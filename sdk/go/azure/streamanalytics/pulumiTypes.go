// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package streamanalytics

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type FunctionJavaScriptUDFInputType struct {
	// Is this input parameter a configuration parameter? Defaults to `false`.
	ConfigurationParameter *bool `pulumi:"configurationParameter"`
	// The Data Type for the Input Argument of this JavaScript Function. Possible values include `array`, `any`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
	Type string `pulumi:"type"`
}

// FunctionJavaScriptUDFInputTypeInput is an input type that accepts FunctionJavaScriptUDFInputTypeArgs and FunctionJavaScriptUDFInputTypeOutput values.
// You can construct a concrete instance of `FunctionJavaScriptUDFInputTypeInput` via:
//
//	FunctionJavaScriptUDFInputTypeArgs{...}
type FunctionJavaScriptUDFInputTypeInput interface {
	pulumi.Input

	ToFunctionJavaScriptUDFInputTypeOutput() FunctionJavaScriptUDFInputTypeOutput
	ToFunctionJavaScriptUDFInputTypeOutputWithContext(context.Context) FunctionJavaScriptUDFInputTypeOutput
}

type FunctionJavaScriptUDFInputTypeArgs struct {
	// Is this input parameter a configuration parameter? Defaults to `false`.
	ConfigurationParameter pulumi.BoolPtrInput `pulumi:"configurationParameter"`
	// The Data Type for the Input Argument of this JavaScript Function. Possible values include `array`, `any`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FunctionJavaScriptUDFInputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionJavaScriptUDFInputType)(nil)).Elem()
}

func (i FunctionJavaScriptUDFInputTypeArgs) ToFunctionJavaScriptUDFInputTypeOutput() FunctionJavaScriptUDFInputTypeOutput {
	return i.ToFunctionJavaScriptUDFInputTypeOutputWithContext(context.Background())
}

func (i FunctionJavaScriptUDFInputTypeArgs) ToFunctionJavaScriptUDFInputTypeOutputWithContext(ctx context.Context) FunctionJavaScriptUDFInputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionJavaScriptUDFInputTypeOutput)
}

// FunctionJavaScriptUDFInputTypeArrayInput is an input type that accepts FunctionJavaScriptUDFInputTypeArray and FunctionJavaScriptUDFInputTypeArrayOutput values.
// You can construct a concrete instance of `FunctionJavaScriptUDFInputTypeArrayInput` via:
//
//	FunctionJavaScriptUDFInputTypeArray{ FunctionJavaScriptUDFInputTypeArgs{...} }
type FunctionJavaScriptUDFInputTypeArrayInput interface {
	pulumi.Input

	ToFunctionJavaScriptUDFInputTypeArrayOutput() FunctionJavaScriptUDFInputTypeArrayOutput
	ToFunctionJavaScriptUDFInputTypeArrayOutputWithContext(context.Context) FunctionJavaScriptUDFInputTypeArrayOutput
}

type FunctionJavaScriptUDFInputTypeArray []FunctionJavaScriptUDFInputTypeInput

func (FunctionJavaScriptUDFInputTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionJavaScriptUDFInputType)(nil)).Elem()
}

func (i FunctionJavaScriptUDFInputTypeArray) ToFunctionJavaScriptUDFInputTypeArrayOutput() FunctionJavaScriptUDFInputTypeArrayOutput {
	return i.ToFunctionJavaScriptUDFInputTypeArrayOutputWithContext(context.Background())
}

func (i FunctionJavaScriptUDFInputTypeArray) ToFunctionJavaScriptUDFInputTypeArrayOutputWithContext(ctx context.Context) FunctionJavaScriptUDFInputTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionJavaScriptUDFInputTypeArrayOutput)
}

type FunctionJavaScriptUDFInputTypeOutput struct{ *pulumi.OutputState }

func (FunctionJavaScriptUDFInputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionJavaScriptUDFInputType)(nil)).Elem()
}

func (o FunctionJavaScriptUDFInputTypeOutput) ToFunctionJavaScriptUDFInputTypeOutput() FunctionJavaScriptUDFInputTypeOutput {
	return o
}

func (o FunctionJavaScriptUDFInputTypeOutput) ToFunctionJavaScriptUDFInputTypeOutputWithContext(ctx context.Context) FunctionJavaScriptUDFInputTypeOutput {
	return o
}

// Is this input parameter a configuration parameter? Defaults to `false`.
func (o FunctionJavaScriptUDFInputTypeOutput) ConfigurationParameter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FunctionJavaScriptUDFInputType) *bool { return v.ConfigurationParameter }).(pulumi.BoolPtrOutput)
}

// The Data Type for the Input Argument of this JavaScript Function. Possible values include `array`, `any`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
func (o FunctionJavaScriptUDFInputTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionJavaScriptUDFInputType) string { return v.Type }).(pulumi.StringOutput)
}

type FunctionJavaScriptUDFInputTypeArrayOutput struct{ *pulumi.OutputState }

func (FunctionJavaScriptUDFInputTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionJavaScriptUDFInputType)(nil)).Elem()
}

func (o FunctionJavaScriptUDFInputTypeArrayOutput) ToFunctionJavaScriptUDFInputTypeArrayOutput() FunctionJavaScriptUDFInputTypeArrayOutput {
	return o
}

func (o FunctionJavaScriptUDFInputTypeArrayOutput) ToFunctionJavaScriptUDFInputTypeArrayOutputWithContext(ctx context.Context) FunctionJavaScriptUDFInputTypeArrayOutput {
	return o
}

func (o FunctionJavaScriptUDFInputTypeArrayOutput) Index(i pulumi.IntInput) FunctionJavaScriptUDFInputTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FunctionJavaScriptUDFInputType {
		return vs[0].([]FunctionJavaScriptUDFInputType)[vs[1].(int)]
	}).(FunctionJavaScriptUDFInputTypeOutput)
}

type FunctionJavaScriptUDFOutputType struct {
	// The Data Type output from this JavaScript Function. Possible values include `array`, `any`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
	Type string `pulumi:"type"`
}

// FunctionJavaScriptUDFOutputTypeInput is an input type that accepts FunctionJavaScriptUDFOutputTypeArgs and FunctionJavaScriptUDFOutputTypeOutput values.
// You can construct a concrete instance of `FunctionJavaScriptUDFOutputTypeInput` via:
//
//	FunctionJavaScriptUDFOutputTypeArgs{...}
type FunctionJavaScriptUDFOutputTypeInput interface {
	pulumi.Input

	ToFunctionJavaScriptUDFOutputTypeOutput() FunctionJavaScriptUDFOutputTypeOutput
	ToFunctionJavaScriptUDFOutputTypeOutputWithContext(context.Context) FunctionJavaScriptUDFOutputTypeOutput
}

type FunctionJavaScriptUDFOutputTypeArgs struct {
	// The Data Type output from this JavaScript Function. Possible values include `array`, `any`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FunctionJavaScriptUDFOutputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionJavaScriptUDFOutputType)(nil)).Elem()
}

func (i FunctionJavaScriptUDFOutputTypeArgs) ToFunctionJavaScriptUDFOutputTypeOutput() FunctionJavaScriptUDFOutputTypeOutput {
	return i.ToFunctionJavaScriptUDFOutputTypeOutputWithContext(context.Background())
}

func (i FunctionJavaScriptUDFOutputTypeArgs) ToFunctionJavaScriptUDFOutputTypeOutputWithContext(ctx context.Context) FunctionJavaScriptUDFOutputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionJavaScriptUDFOutputTypeOutput)
}

func (i FunctionJavaScriptUDFOutputTypeArgs) ToFunctionJavaScriptUDFOutputTypePtrOutput() FunctionJavaScriptUDFOutputTypePtrOutput {
	return i.ToFunctionJavaScriptUDFOutputTypePtrOutputWithContext(context.Background())
}

func (i FunctionJavaScriptUDFOutputTypeArgs) ToFunctionJavaScriptUDFOutputTypePtrOutputWithContext(ctx context.Context) FunctionJavaScriptUDFOutputTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionJavaScriptUDFOutputTypeOutput).ToFunctionJavaScriptUDFOutputTypePtrOutputWithContext(ctx)
}

// FunctionJavaScriptUDFOutputTypePtrInput is an input type that accepts FunctionJavaScriptUDFOutputTypeArgs, FunctionJavaScriptUDFOutputTypePtr and FunctionJavaScriptUDFOutputTypePtrOutput values.
// You can construct a concrete instance of `FunctionJavaScriptUDFOutputTypePtrInput` via:
//
//	        FunctionJavaScriptUDFOutputTypeArgs{...}
//
//	or:
//
//	        nil
type FunctionJavaScriptUDFOutputTypePtrInput interface {
	pulumi.Input

	ToFunctionJavaScriptUDFOutputTypePtrOutput() FunctionJavaScriptUDFOutputTypePtrOutput
	ToFunctionJavaScriptUDFOutputTypePtrOutputWithContext(context.Context) FunctionJavaScriptUDFOutputTypePtrOutput
}

type functionJavaScriptUDFOutputTypePtrType FunctionJavaScriptUDFOutputTypeArgs

func FunctionJavaScriptUDFOutputTypePtr(v *FunctionJavaScriptUDFOutputTypeArgs) FunctionJavaScriptUDFOutputTypePtrInput {
	return (*functionJavaScriptUDFOutputTypePtrType)(v)
}

func (*functionJavaScriptUDFOutputTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionJavaScriptUDFOutputType)(nil)).Elem()
}

func (i *functionJavaScriptUDFOutputTypePtrType) ToFunctionJavaScriptUDFOutputTypePtrOutput() FunctionJavaScriptUDFOutputTypePtrOutput {
	return i.ToFunctionJavaScriptUDFOutputTypePtrOutputWithContext(context.Background())
}

func (i *functionJavaScriptUDFOutputTypePtrType) ToFunctionJavaScriptUDFOutputTypePtrOutputWithContext(ctx context.Context) FunctionJavaScriptUDFOutputTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionJavaScriptUDFOutputTypePtrOutput)
}

type FunctionJavaScriptUDFOutputTypeOutput struct{ *pulumi.OutputState }

func (FunctionJavaScriptUDFOutputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionJavaScriptUDFOutputType)(nil)).Elem()
}

func (o FunctionJavaScriptUDFOutputTypeOutput) ToFunctionJavaScriptUDFOutputTypeOutput() FunctionJavaScriptUDFOutputTypeOutput {
	return o
}

func (o FunctionJavaScriptUDFOutputTypeOutput) ToFunctionJavaScriptUDFOutputTypeOutputWithContext(ctx context.Context) FunctionJavaScriptUDFOutputTypeOutput {
	return o
}

func (o FunctionJavaScriptUDFOutputTypeOutput) ToFunctionJavaScriptUDFOutputTypePtrOutput() FunctionJavaScriptUDFOutputTypePtrOutput {
	return o.ToFunctionJavaScriptUDFOutputTypePtrOutputWithContext(context.Background())
}

func (o FunctionJavaScriptUDFOutputTypeOutput) ToFunctionJavaScriptUDFOutputTypePtrOutputWithContext(ctx context.Context) FunctionJavaScriptUDFOutputTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FunctionJavaScriptUDFOutputType) *FunctionJavaScriptUDFOutputType {
		return &v
	}).(FunctionJavaScriptUDFOutputTypePtrOutput)
}

// The Data Type output from this JavaScript Function. Possible values include `array`, `any`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
func (o FunctionJavaScriptUDFOutputTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionJavaScriptUDFOutputType) string { return v.Type }).(pulumi.StringOutput)
}

type FunctionJavaScriptUDFOutputTypePtrOutput struct{ *pulumi.OutputState }

func (FunctionJavaScriptUDFOutputTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionJavaScriptUDFOutputType)(nil)).Elem()
}

func (o FunctionJavaScriptUDFOutputTypePtrOutput) ToFunctionJavaScriptUDFOutputTypePtrOutput() FunctionJavaScriptUDFOutputTypePtrOutput {
	return o
}

func (o FunctionJavaScriptUDFOutputTypePtrOutput) ToFunctionJavaScriptUDFOutputTypePtrOutputWithContext(ctx context.Context) FunctionJavaScriptUDFOutputTypePtrOutput {
	return o
}

func (o FunctionJavaScriptUDFOutputTypePtrOutput) Elem() FunctionJavaScriptUDFOutputTypeOutput {
	return o.ApplyT(func(v *FunctionJavaScriptUDFOutputType) FunctionJavaScriptUDFOutputType {
		if v != nil {
			return *v
		}
		var ret FunctionJavaScriptUDFOutputType
		return ret
	}).(FunctionJavaScriptUDFOutputTypeOutput)
}

// The Data Type output from this JavaScript Function. Possible values include `array`, `any`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
func (o FunctionJavaScriptUDFOutputTypePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionJavaScriptUDFOutputType) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type FunctionJavascriptUdaInputType struct {
	// Is this input parameter a configuration parameter? Defaults to `false`.
	ConfigurationParameter *bool `pulumi:"configurationParameter"`
	// The input data type of this JavaScript Function. Possible values include `any`, `array`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
	Type string `pulumi:"type"`
}

// FunctionJavascriptUdaInputTypeInput is an input type that accepts FunctionJavascriptUdaInputTypeArgs and FunctionJavascriptUdaInputTypeOutput values.
// You can construct a concrete instance of `FunctionJavascriptUdaInputTypeInput` via:
//
//	FunctionJavascriptUdaInputTypeArgs{...}
type FunctionJavascriptUdaInputTypeInput interface {
	pulumi.Input

	ToFunctionJavascriptUdaInputTypeOutput() FunctionJavascriptUdaInputTypeOutput
	ToFunctionJavascriptUdaInputTypeOutputWithContext(context.Context) FunctionJavascriptUdaInputTypeOutput
}

type FunctionJavascriptUdaInputTypeArgs struct {
	// Is this input parameter a configuration parameter? Defaults to `false`.
	ConfigurationParameter pulumi.BoolPtrInput `pulumi:"configurationParameter"`
	// The input data type of this JavaScript Function. Possible values include `any`, `array`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FunctionJavascriptUdaInputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionJavascriptUdaInputType)(nil)).Elem()
}

func (i FunctionJavascriptUdaInputTypeArgs) ToFunctionJavascriptUdaInputTypeOutput() FunctionJavascriptUdaInputTypeOutput {
	return i.ToFunctionJavascriptUdaInputTypeOutputWithContext(context.Background())
}

func (i FunctionJavascriptUdaInputTypeArgs) ToFunctionJavascriptUdaInputTypeOutputWithContext(ctx context.Context) FunctionJavascriptUdaInputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionJavascriptUdaInputTypeOutput)
}

// FunctionJavascriptUdaInputTypeArrayInput is an input type that accepts FunctionJavascriptUdaInputTypeArray and FunctionJavascriptUdaInputTypeArrayOutput values.
// You can construct a concrete instance of `FunctionJavascriptUdaInputTypeArrayInput` via:
//
//	FunctionJavascriptUdaInputTypeArray{ FunctionJavascriptUdaInputTypeArgs{...} }
type FunctionJavascriptUdaInputTypeArrayInput interface {
	pulumi.Input

	ToFunctionJavascriptUdaInputTypeArrayOutput() FunctionJavascriptUdaInputTypeArrayOutput
	ToFunctionJavascriptUdaInputTypeArrayOutputWithContext(context.Context) FunctionJavascriptUdaInputTypeArrayOutput
}

type FunctionJavascriptUdaInputTypeArray []FunctionJavascriptUdaInputTypeInput

func (FunctionJavascriptUdaInputTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionJavascriptUdaInputType)(nil)).Elem()
}

func (i FunctionJavascriptUdaInputTypeArray) ToFunctionJavascriptUdaInputTypeArrayOutput() FunctionJavascriptUdaInputTypeArrayOutput {
	return i.ToFunctionJavascriptUdaInputTypeArrayOutputWithContext(context.Background())
}

func (i FunctionJavascriptUdaInputTypeArray) ToFunctionJavascriptUdaInputTypeArrayOutputWithContext(ctx context.Context) FunctionJavascriptUdaInputTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionJavascriptUdaInputTypeArrayOutput)
}

type FunctionJavascriptUdaInputTypeOutput struct{ *pulumi.OutputState }

func (FunctionJavascriptUdaInputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionJavascriptUdaInputType)(nil)).Elem()
}

func (o FunctionJavascriptUdaInputTypeOutput) ToFunctionJavascriptUdaInputTypeOutput() FunctionJavascriptUdaInputTypeOutput {
	return o
}

func (o FunctionJavascriptUdaInputTypeOutput) ToFunctionJavascriptUdaInputTypeOutputWithContext(ctx context.Context) FunctionJavascriptUdaInputTypeOutput {
	return o
}

// Is this input parameter a configuration parameter? Defaults to `false`.
func (o FunctionJavascriptUdaInputTypeOutput) ConfigurationParameter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FunctionJavascriptUdaInputType) *bool { return v.ConfigurationParameter }).(pulumi.BoolPtrOutput)
}

// The input data type of this JavaScript Function. Possible values include `any`, `array`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
func (o FunctionJavascriptUdaInputTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionJavascriptUdaInputType) string { return v.Type }).(pulumi.StringOutput)
}

type FunctionJavascriptUdaInputTypeArrayOutput struct{ *pulumi.OutputState }

func (FunctionJavascriptUdaInputTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionJavascriptUdaInputType)(nil)).Elem()
}

func (o FunctionJavascriptUdaInputTypeArrayOutput) ToFunctionJavascriptUdaInputTypeArrayOutput() FunctionJavascriptUdaInputTypeArrayOutput {
	return o
}

func (o FunctionJavascriptUdaInputTypeArrayOutput) ToFunctionJavascriptUdaInputTypeArrayOutputWithContext(ctx context.Context) FunctionJavascriptUdaInputTypeArrayOutput {
	return o
}

func (o FunctionJavascriptUdaInputTypeArrayOutput) Index(i pulumi.IntInput) FunctionJavascriptUdaInputTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FunctionJavascriptUdaInputType {
		return vs[0].([]FunctionJavascriptUdaInputType)[vs[1].(int)]
	}).(FunctionJavascriptUdaInputTypeOutput)
}

type FunctionJavascriptUdaOutputType struct {
	// The output data type from this JavaScript Function. Possible values include `any`, `array`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
	Type string `pulumi:"type"`
}

// FunctionJavascriptUdaOutputTypeInput is an input type that accepts FunctionJavascriptUdaOutputTypeArgs and FunctionJavascriptUdaOutputTypeOutput values.
// You can construct a concrete instance of `FunctionJavascriptUdaOutputTypeInput` via:
//
//	FunctionJavascriptUdaOutputTypeArgs{...}
type FunctionJavascriptUdaOutputTypeInput interface {
	pulumi.Input

	ToFunctionJavascriptUdaOutputTypeOutput() FunctionJavascriptUdaOutputTypeOutput
	ToFunctionJavascriptUdaOutputTypeOutputWithContext(context.Context) FunctionJavascriptUdaOutputTypeOutput
}

type FunctionJavascriptUdaOutputTypeArgs struct {
	// The output data type from this JavaScript Function. Possible values include `any`, `array`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FunctionJavascriptUdaOutputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionJavascriptUdaOutputType)(nil)).Elem()
}

func (i FunctionJavascriptUdaOutputTypeArgs) ToFunctionJavascriptUdaOutputTypeOutput() FunctionJavascriptUdaOutputTypeOutput {
	return i.ToFunctionJavascriptUdaOutputTypeOutputWithContext(context.Background())
}

func (i FunctionJavascriptUdaOutputTypeArgs) ToFunctionJavascriptUdaOutputTypeOutputWithContext(ctx context.Context) FunctionJavascriptUdaOutputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionJavascriptUdaOutputTypeOutput)
}

func (i FunctionJavascriptUdaOutputTypeArgs) ToFunctionJavascriptUdaOutputTypePtrOutput() FunctionJavascriptUdaOutputTypePtrOutput {
	return i.ToFunctionJavascriptUdaOutputTypePtrOutputWithContext(context.Background())
}

func (i FunctionJavascriptUdaOutputTypeArgs) ToFunctionJavascriptUdaOutputTypePtrOutputWithContext(ctx context.Context) FunctionJavascriptUdaOutputTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionJavascriptUdaOutputTypeOutput).ToFunctionJavascriptUdaOutputTypePtrOutputWithContext(ctx)
}

// FunctionJavascriptUdaOutputTypePtrInput is an input type that accepts FunctionJavascriptUdaOutputTypeArgs, FunctionJavascriptUdaOutputTypePtr and FunctionJavascriptUdaOutputTypePtrOutput values.
// You can construct a concrete instance of `FunctionJavascriptUdaOutputTypePtrInput` via:
//
//	        FunctionJavascriptUdaOutputTypeArgs{...}
//
//	or:
//
//	        nil
type FunctionJavascriptUdaOutputTypePtrInput interface {
	pulumi.Input

	ToFunctionJavascriptUdaOutputTypePtrOutput() FunctionJavascriptUdaOutputTypePtrOutput
	ToFunctionJavascriptUdaOutputTypePtrOutputWithContext(context.Context) FunctionJavascriptUdaOutputTypePtrOutput
}

type functionJavascriptUdaOutputTypePtrType FunctionJavascriptUdaOutputTypeArgs

func FunctionJavascriptUdaOutputTypePtr(v *FunctionJavascriptUdaOutputTypeArgs) FunctionJavascriptUdaOutputTypePtrInput {
	return (*functionJavascriptUdaOutputTypePtrType)(v)
}

func (*functionJavascriptUdaOutputTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionJavascriptUdaOutputType)(nil)).Elem()
}

func (i *functionJavascriptUdaOutputTypePtrType) ToFunctionJavascriptUdaOutputTypePtrOutput() FunctionJavascriptUdaOutputTypePtrOutput {
	return i.ToFunctionJavascriptUdaOutputTypePtrOutputWithContext(context.Background())
}

func (i *functionJavascriptUdaOutputTypePtrType) ToFunctionJavascriptUdaOutputTypePtrOutputWithContext(ctx context.Context) FunctionJavascriptUdaOutputTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionJavascriptUdaOutputTypePtrOutput)
}

type FunctionJavascriptUdaOutputTypeOutput struct{ *pulumi.OutputState }

func (FunctionJavascriptUdaOutputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionJavascriptUdaOutputType)(nil)).Elem()
}

func (o FunctionJavascriptUdaOutputTypeOutput) ToFunctionJavascriptUdaOutputTypeOutput() FunctionJavascriptUdaOutputTypeOutput {
	return o
}

func (o FunctionJavascriptUdaOutputTypeOutput) ToFunctionJavascriptUdaOutputTypeOutputWithContext(ctx context.Context) FunctionJavascriptUdaOutputTypeOutput {
	return o
}

func (o FunctionJavascriptUdaOutputTypeOutput) ToFunctionJavascriptUdaOutputTypePtrOutput() FunctionJavascriptUdaOutputTypePtrOutput {
	return o.ToFunctionJavascriptUdaOutputTypePtrOutputWithContext(context.Background())
}

func (o FunctionJavascriptUdaOutputTypeOutput) ToFunctionJavascriptUdaOutputTypePtrOutputWithContext(ctx context.Context) FunctionJavascriptUdaOutputTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FunctionJavascriptUdaOutputType) *FunctionJavascriptUdaOutputType {
		return &v
	}).(FunctionJavascriptUdaOutputTypePtrOutput)
}

// The output data type from this JavaScript Function. Possible values include `any`, `array`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
func (o FunctionJavascriptUdaOutputTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionJavascriptUdaOutputType) string { return v.Type }).(pulumi.StringOutput)
}

type FunctionJavascriptUdaOutputTypePtrOutput struct{ *pulumi.OutputState }

func (FunctionJavascriptUdaOutputTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionJavascriptUdaOutputType)(nil)).Elem()
}

func (o FunctionJavascriptUdaOutputTypePtrOutput) ToFunctionJavascriptUdaOutputTypePtrOutput() FunctionJavascriptUdaOutputTypePtrOutput {
	return o
}

func (o FunctionJavascriptUdaOutputTypePtrOutput) ToFunctionJavascriptUdaOutputTypePtrOutputWithContext(ctx context.Context) FunctionJavascriptUdaOutputTypePtrOutput {
	return o
}

func (o FunctionJavascriptUdaOutputTypePtrOutput) Elem() FunctionJavascriptUdaOutputTypeOutput {
	return o.ApplyT(func(v *FunctionJavascriptUdaOutputType) FunctionJavascriptUdaOutputType {
		if v != nil {
			return *v
		}
		var ret FunctionJavascriptUdaOutputType
		return ret
	}).(FunctionJavascriptUdaOutputTypeOutput)
}

// The output data type from this JavaScript Function. Possible values include `any`, `array`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
func (o FunctionJavascriptUdaOutputTypePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionJavascriptUdaOutputType) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type JobIdentity struct {
	// The Principal ID associated with this Managed Service Identity.
	PrincipalId *string `pulumi:"principalId"`
	// The Tenant ID associated with this Managed Service Identity.
	TenantId *string `pulumi:"tenantId"`
	// Specifies the type of Managed Service Identity that should be configured on this Stream Analytics Job. The only possible value is `SystemAssigned`.
	Type string `pulumi:"type"`
}

// JobIdentityInput is an input type that accepts JobIdentityArgs and JobIdentityOutput values.
// You can construct a concrete instance of `JobIdentityInput` via:
//
//	JobIdentityArgs{...}
type JobIdentityInput interface {
	pulumi.Input

	ToJobIdentityOutput() JobIdentityOutput
	ToJobIdentityOutputWithContext(context.Context) JobIdentityOutput
}

type JobIdentityArgs struct {
	// The Principal ID associated with this Managed Service Identity.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The Tenant ID associated with this Managed Service Identity.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// Specifies the type of Managed Service Identity that should be configured on this Stream Analytics Job. The only possible value is `SystemAssigned`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (JobIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobIdentity)(nil)).Elem()
}

func (i JobIdentityArgs) ToJobIdentityOutput() JobIdentityOutput {
	return i.ToJobIdentityOutputWithContext(context.Background())
}

func (i JobIdentityArgs) ToJobIdentityOutputWithContext(ctx context.Context) JobIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobIdentityOutput)
}

func (i JobIdentityArgs) ToJobIdentityPtrOutput() JobIdentityPtrOutput {
	return i.ToJobIdentityPtrOutputWithContext(context.Background())
}

func (i JobIdentityArgs) ToJobIdentityPtrOutputWithContext(ctx context.Context) JobIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobIdentityOutput).ToJobIdentityPtrOutputWithContext(ctx)
}

// JobIdentityPtrInput is an input type that accepts JobIdentityArgs, JobIdentityPtr and JobIdentityPtrOutput values.
// You can construct a concrete instance of `JobIdentityPtrInput` via:
//
//	        JobIdentityArgs{...}
//
//	or:
//
//	        nil
type JobIdentityPtrInput interface {
	pulumi.Input

	ToJobIdentityPtrOutput() JobIdentityPtrOutput
	ToJobIdentityPtrOutputWithContext(context.Context) JobIdentityPtrOutput
}

type jobIdentityPtrType JobIdentityArgs

func JobIdentityPtr(v *JobIdentityArgs) JobIdentityPtrInput {
	return (*jobIdentityPtrType)(v)
}

func (*jobIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobIdentity)(nil)).Elem()
}

func (i *jobIdentityPtrType) ToJobIdentityPtrOutput() JobIdentityPtrOutput {
	return i.ToJobIdentityPtrOutputWithContext(context.Background())
}

func (i *jobIdentityPtrType) ToJobIdentityPtrOutputWithContext(ctx context.Context) JobIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobIdentityPtrOutput)
}

type JobIdentityOutput struct{ *pulumi.OutputState }

func (JobIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobIdentity)(nil)).Elem()
}

func (o JobIdentityOutput) ToJobIdentityOutput() JobIdentityOutput {
	return o
}

func (o JobIdentityOutput) ToJobIdentityOutputWithContext(ctx context.Context) JobIdentityOutput {
	return o
}

func (o JobIdentityOutput) ToJobIdentityPtrOutput() JobIdentityPtrOutput {
	return o.ToJobIdentityPtrOutputWithContext(context.Background())
}

func (o JobIdentityOutput) ToJobIdentityPtrOutputWithContext(ctx context.Context) JobIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobIdentity) *JobIdentity {
		return &v
	}).(JobIdentityPtrOutput)
}

// The Principal ID associated with this Managed Service Identity.
func (o JobIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The Tenant ID associated with this Managed Service Identity.
func (o JobIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this Stream Analytics Job. The only possible value is `SystemAssigned`.
func (o JobIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JobIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type JobIdentityPtrOutput struct{ *pulumi.OutputState }

func (JobIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobIdentity)(nil)).Elem()
}

func (o JobIdentityPtrOutput) ToJobIdentityPtrOutput() JobIdentityPtrOutput {
	return o
}

func (o JobIdentityPtrOutput) ToJobIdentityPtrOutputWithContext(ctx context.Context) JobIdentityPtrOutput {
	return o
}

func (o JobIdentityPtrOutput) Elem() JobIdentityOutput {
	return o.ApplyT(func(v *JobIdentity) JobIdentity {
		if v != nil {
			return *v
		}
		var ret JobIdentity
		return ret
	}).(JobIdentityOutput)
}

// The Principal ID associated with this Managed Service Identity.
func (o JobIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The Tenant ID associated with this Managed Service Identity.
func (o JobIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this Stream Analytics Job. The only possible value is `SystemAssigned`.
func (o JobIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type JobJobStorageAccount struct {
	// The account key for the Azure storage account.
	AccountKey string `pulumi:"accountKey"`
	// The name of the Azure storage account.
	AccountName string `pulumi:"accountName"`
	// The authentication mode of the storage account. The only supported value is `ConnectionString`. Defaults to `ConnectionString`.
	AuthenticationMode *string `pulumi:"authenticationMode"`
}

// JobJobStorageAccountInput is an input type that accepts JobJobStorageAccountArgs and JobJobStorageAccountOutput values.
// You can construct a concrete instance of `JobJobStorageAccountInput` via:
//
//	JobJobStorageAccountArgs{...}
type JobJobStorageAccountInput interface {
	pulumi.Input

	ToJobJobStorageAccountOutput() JobJobStorageAccountOutput
	ToJobJobStorageAccountOutputWithContext(context.Context) JobJobStorageAccountOutput
}

type JobJobStorageAccountArgs struct {
	// The account key for the Azure storage account.
	AccountKey pulumi.StringInput `pulumi:"accountKey"`
	// The name of the Azure storage account.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The authentication mode of the storage account. The only supported value is `ConnectionString`. Defaults to `ConnectionString`.
	AuthenticationMode pulumi.StringPtrInput `pulumi:"authenticationMode"`
}

func (JobJobStorageAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobJobStorageAccount)(nil)).Elem()
}

func (i JobJobStorageAccountArgs) ToJobJobStorageAccountOutput() JobJobStorageAccountOutput {
	return i.ToJobJobStorageAccountOutputWithContext(context.Background())
}

func (i JobJobStorageAccountArgs) ToJobJobStorageAccountOutputWithContext(ctx context.Context) JobJobStorageAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobJobStorageAccountOutput)
}

// JobJobStorageAccountArrayInput is an input type that accepts JobJobStorageAccountArray and JobJobStorageAccountArrayOutput values.
// You can construct a concrete instance of `JobJobStorageAccountArrayInput` via:
//
//	JobJobStorageAccountArray{ JobJobStorageAccountArgs{...} }
type JobJobStorageAccountArrayInput interface {
	pulumi.Input

	ToJobJobStorageAccountArrayOutput() JobJobStorageAccountArrayOutput
	ToJobJobStorageAccountArrayOutputWithContext(context.Context) JobJobStorageAccountArrayOutput
}

type JobJobStorageAccountArray []JobJobStorageAccountInput

func (JobJobStorageAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobJobStorageAccount)(nil)).Elem()
}

func (i JobJobStorageAccountArray) ToJobJobStorageAccountArrayOutput() JobJobStorageAccountArrayOutput {
	return i.ToJobJobStorageAccountArrayOutputWithContext(context.Background())
}

func (i JobJobStorageAccountArray) ToJobJobStorageAccountArrayOutputWithContext(ctx context.Context) JobJobStorageAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobJobStorageAccountArrayOutput)
}

type JobJobStorageAccountOutput struct{ *pulumi.OutputState }

func (JobJobStorageAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobJobStorageAccount)(nil)).Elem()
}

func (o JobJobStorageAccountOutput) ToJobJobStorageAccountOutput() JobJobStorageAccountOutput {
	return o
}

func (o JobJobStorageAccountOutput) ToJobJobStorageAccountOutputWithContext(ctx context.Context) JobJobStorageAccountOutput {
	return o
}

// The account key for the Azure storage account.
func (o JobJobStorageAccountOutput) AccountKey() pulumi.StringOutput {
	return o.ApplyT(func(v JobJobStorageAccount) string { return v.AccountKey }).(pulumi.StringOutput)
}

// The name of the Azure storage account.
func (o JobJobStorageAccountOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v JobJobStorageAccount) string { return v.AccountName }).(pulumi.StringOutput)
}

// The authentication mode of the storage account. The only supported value is `ConnectionString`. Defaults to `ConnectionString`.
func (o JobJobStorageAccountOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobJobStorageAccount) *string { return v.AuthenticationMode }).(pulumi.StringPtrOutput)
}

type JobJobStorageAccountArrayOutput struct{ *pulumi.OutputState }

func (JobJobStorageAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobJobStorageAccount)(nil)).Elem()
}

func (o JobJobStorageAccountArrayOutput) ToJobJobStorageAccountArrayOutput() JobJobStorageAccountArrayOutput {
	return o
}

func (o JobJobStorageAccountArrayOutput) ToJobJobStorageAccountArrayOutputWithContext(ctx context.Context) JobJobStorageAccountArrayOutput {
	return o
}

func (o JobJobStorageAccountArrayOutput) Index(i pulumi.IntInput) JobJobStorageAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobJobStorageAccount {
		return vs[0].([]JobJobStorageAccount)[vs[1].(int)]
	}).(JobJobStorageAccountOutput)
}

type OutputBlobSerialization struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
	Encoding *string `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv`.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
	//
	// > **NOTE:** This is Required and can only be specified when `type` is set to `Json`.
	Format *string `pulumi:"format"`
	// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv`, `Json` and `Parquet`.
	//
	// > **NOTE:** `batchMaxWaitTime` and `batchMinRows` are required when `type` is set to `Parquet`
	Type string `pulumi:"type"`
}

// OutputBlobSerializationInput is an input type that accepts OutputBlobSerializationArgs and OutputBlobSerializationOutput values.
// You can construct a concrete instance of `OutputBlobSerializationInput` via:
//
//	OutputBlobSerializationArgs{...}
type OutputBlobSerializationInput interface {
	pulumi.Input

	ToOutputBlobSerializationOutput() OutputBlobSerializationOutput
	ToOutputBlobSerializationOutputWithContext(context.Context) OutputBlobSerializationOutput
}

type OutputBlobSerializationArgs struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv`.
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
	//
	// > **NOTE:** This is Required and can only be specified when `type` is set to `Json`.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv`, `Json` and `Parquet`.
	//
	// > **NOTE:** `batchMaxWaitTime` and `batchMinRows` are required when `type` is set to `Parquet`
	Type pulumi.StringInput `pulumi:"type"`
}

func (OutputBlobSerializationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputBlobSerialization)(nil)).Elem()
}

func (i OutputBlobSerializationArgs) ToOutputBlobSerializationOutput() OutputBlobSerializationOutput {
	return i.ToOutputBlobSerializationOutputWithContext(context.Background())
}

func (i OutputBlobSerializationArgs) ToOutputBlobSerializationOutputWithContext(ctx context.Context) OutputBlobSerializationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputBlobSerializationOutput)
}

func (i OutputBlobSerializationArgs) ToOutputBlobSerializationPtrOutput() OutputBlobSerializationPtrOutput {
	return i.ToOutputBlobSerializationPtrOutputWithContext(context.Background())
}

func (i OutputBlobSerializationArgs) ToOutputBlobSerializationPtrOutputWithContext(ctx context.Context) OutputBlobSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputBlobSerializationOutput).ToOutputBlobSerializationPtrOutputWithContext(ctx)
}

// OutputBlobSerializationPtrInput is an input type that accepts OutputBlobSerializationArgs, OutputBlobSerializationPtr and OutputBlobSerializationPtrOutput values.
// You can construct a concrete instance of `OutputBlobSerializationPtrInput` via:
//
//	        OutputBlobSerializationArgs{...}
//
//	or:
//
//	        nil
type OutputBlobSerializationPtrInput interface {
	pulumi.Input

	ToOutputBlobSerializationPtrOutput() OutputBlobSerializationPtrOutput
	ToOutputBlobSerializationPtrOutputWithContext(context.Context) OutputBlobSerializationPtrOutput
}

type outputBlobSerializationPtrType OutputBlobSerializationArgs

func OutputBlobSerializationPtr(v *OutputBlobSerializationArgs) OutputBlobSerializationPtrInput {
	return (*outputBlobSerializationPtrType)(v)
}

func (*outputBlobSerializationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputBlobSerialization)(nil)).Elem()
}

func (i *outputBlobSerializationPtrType) ToOutputBlobSerializationPtrOutput() OutputBlobSerializationPtrOutput {
	return i.ToOutputBlobSerializationPtrOutputWithContext(context.Background())
}

func (i *outputBlobSerializationPtrType) ToOutputBlobSerializationPtrOutputWithContext(ctx context.Context) OutputBlobSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputBlobSerializationPtrOutput)
}

type OutputBlobSerializationOutput struct{ *pulumi.OutputState }

func (OutputBlobSerializationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputBlobSerialization)(nil)).Elem()
}

func (o OutputBlobSerializationOutput) ToOutputBlobSerializationOutput() OutputBlobSerializationOutput {
	return o
}

func (o OutputBlobSerializationOutput) ToOutputBlobSerializationOutputWithContext(ctx context.Context) OutputBlobSerializationOutput {
	return o
}

func (o OutputBlobSerializationOutput) ToOutputBlobSerializationPtrOutput() OutputBlobSerializationPtrOutput {
	return o.ToOutputBlobSerializationPtrOutputWithContext(context.Background())
}

func (o OutputBlobSerializationOutput) ToOutputBlobSerializationPtrOutputWithContext(ctx context.Context) OutputBlobSerializationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OutputBlobSerialization) *OutputBlobSerialization {
		return &v
	}).(OutputBlobSerializationPtrOutput)
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
//
// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
func (o OutputBlobSerializationOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputBlobSerialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
//
// > **NOTE:** This is required when `type` is set to `Csv`.
func (o OutputBlobSerializationOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputBlobSerialization) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
//
// > **NOTE:** This is Required and can only be specified when `type` is set to `Json`.
func (o OutputBlobSerializationOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputBlobSerialization) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv`, `Json` and `Parquet`.
//
// > **NOTE:** `batchMaxWaitTime` and `batchMinRows` are required when `type` is set to `Parquet`
func (o OutputBlobSerializationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OutputBlobSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type OutputBlobSerializationPtrOutput struct{ *pulumi.OutputState }

func (OutputBlobSerializationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputBlobSerialization)(nil)).Elem()
}

func (o OutputBlobSerializationPtrOutput) ToOutputBlobSerializationPtrOutput() OutputBlobSerializationPtrOutput {
	return o
}

func (o OutputBlobSerializationPtrOutput) ToOutputBlobSerializationPtrOutputWithContext(ctx context.Context) OutputBlobSerializationPtrOutput {
	return o
}

func (o OutputBlobSerializationPtrOutput) Elem() OutputBlobSerializationOutput {
	return o.ApplyT(func(v *OutputBlobSerialization) OutputBlobSerialization {
		if v != nil {
			return *v
		}
		var ret OutputBlobSerialization
		return ret
	}).(OutputBlobSerializationOutput)
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
//
// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
func (o OutputBlobSerializationPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputBlobSerialization) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
//
// > **NOTE:** This is required when `type` is set to `Csv`.
func (o OutputBlobSerializationPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputBlobSerialization) *string {
		if v == nil {
			return nil
		}
		return v.FieldDelimiter
	}).(pulumi.StringPtrOutput)
}

// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
//
// > **NOTE:** This is Required and can only be specified when `type` is set to `Json`.
func (o OutputBlobSerializationPtrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputBlobSerialization) *string {
		if v == nil {
			return nil
		}
		return v.Format
	}).(pulumi.StringPtrOutput)
}

// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv`, `Json` and `Parquet`.
//
// > **NOTE:** `batchMaxWaitTime` and `batchMinRows` are required when `type` is set to `Parquet`
func (o OutputBlobSerializationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputBlobSerialization) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type OutputEventHubSerialization struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
	Encoding *string `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv`.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
	//
	// > **NOTE:** This is Required and can only be specified when `type` is set to `Json`.
	Format *string `pulumi:"format"`
	// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv`, `Json` and `Parquet`.
	Type string `pulumi:"type"`
}

// OutputEventHubSerializationInput is an input type that accepts OutputEventHubSerializationArgs and OutputEventHubSerializationOutput values.
// You can construct a concrete instance of `OutputEventHubSerializationInput` via:
//
//	OutputEventHubSerializationArgs{...}
type OutputEventHubSerializationInput interface {
	pulumi.Input

	ToOutputEventHubSerializationOutput() OutputEventHubSerializationOutput
	ToOutputEventHubSerializationOutputWithContext(context.Context) OutputEventHubSerializationOutput
}

type OutputEventHubSerializationArgs struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv`.
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
	//
	// > **NOTE:** This is Required and can only be specified when `type` is set to `Json`.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv`, `Json` and `Parquet`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OutputEventHubSerializationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputEventHubSerialization)(nil)).Elem()
}

func (i OutputEventHubSerializationArgs) ToOutputEventHubSerializationOutput() OutputEventHubSerializationOutput {
	return i.ToOutputEventHubSerializationOutputWithContext(context.Background())
}

func (i OutputEventHubSerializationArgs) ToOutputEventHubSerializationOutputWithContext(ctx context.Context) OutputEventHubSerializationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputEventHubSerializationOutput)
}

func (i OutputEventHubSerializationArgs) ToOutputEventHubSerializationPtrOutput() OutputEventHubSerializationPtrOutput {
	return i.ToOutputEventHubSerializationPtrOutputWithContext(context.Background())
}

func (i OutputEventHubSerializationArgs) ToOutputEventHubSerializationPtrOutputWithContext(ctx context.Context) OutputEventHubSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputEventHubSerializationOutput).ToOutputEventHubSerializationPtrOutputWithContext(ctx)
}

// OutputEventHubSerializationPtrInput is an input type that accepts OutputEventHubSerializationArgs, OutputEventHubSerializationPtr and OutputEventHubSerializationPtrOutput values.
// You can construct a concrete instance of `OutputEventHubSerializationPtrInput` via:
//
//	        OutputEventHubSerializationArgs{...}
//
//	or:
//
//	        nil
type OutputEventHubSerializationPtrInput interface {
	pulumi.Input

	ToOutputEventHubSerializationPtrOutput() OutputEventHubSerializationPtrOutput
	ToOutputEventHubSerializationPtrOutputWithContext(context.Context) OutputEventHubSerializationPtrOutput
}

type outputEventHubSerializationPtrType OutputEventHubSerializationArgs

func OutputEventHubSerializationPtr(v *OutputEventHubSerializationArgs) OutputEventHubSerializationPtrInput {
	return (*outputEventHubSerializationPtrType)(v)
}

func (*outputEventHubSerializationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputEventHubSerialization)(nil)).Elem()
}

func (i *outputEventHubSerializationPtrType) ToOutputEventHubSerializationPtrOutput() OutputEventHubSerializationPtrOutput {
	return i.ToOutputEventHubSerializationPtrOutputWithContext(context.Background())
}

func (i *outputEventHubSerializationPtrType) ToOutputEventHubSerializationPtrOutputWithContext(ctx context.Context) OutputEventHubSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputEventHubSerializationPtrOutput)
}

type OutputEventHubSerializationOutput struct{ *pulumi.OutputState }

func (OutputEventHubSerializationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputEventHubSerialization)(nil)).Elem()
}

func (o OutputEventHubSerializationOutput) ToOutputEventHubSerializationOutput() OutputEventHubSerializationOutput {
	return o
}

func (o OutputEventHubSerializationOutput) ToOutputEventHubSerializationOutputWithContext(ctx context.Context) OutputEventHubSerializationOutput {
	return o
}

func (o OutputEventHubSerializationOutput) ToOutputEventHubSerializationPtrOutput() OutputEventHubSerializationPtrOutput {
	return o.ToOutputEventHubSerializationPtrOutputWithContext(context.Background())
}

func (o OutputEventHubSerializationOutput) ToOutputEventHubSerializationPtrOutputWithContext(ctx context.Context) OutputEventHubSerializationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OutputEventHubSerialization) *OutputEventHubSerialization {
		return &v
	}).(OutputEventHubSerializationPtrOutput)
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
//
// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
func (o OutputEventHubSerializationOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputEventHubSerialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
//
// > **NOTE:** This is required when `type` is set to `Csv`.
func (o OutputEventHubSerializationOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputEventHubSerialization) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
//
// > **NOTE:** This is Required and can only be specified when `type` is set to `Json`.
func (o OutputEventHubSerializationOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputEventHubSerialization) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv`, `Json` and `Parquet`.
func (o OutputEventHubSerializationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OutputEventHubSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type OutputEventHubSerializationPtrOutput struct{ *pulumi.OutputState }

func (OutputEventHubSerializationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputEventHubSerialization)(nil)).Elem()
}

func (o OutputEventHubSerializationPtrOutput) ToOutputEventHubSerializationPtrOutput() OutputEventHubSerializationPtrOutput {
	return o
}

func (o OutputEventHubSerializationPtrOutput) ToOutputEventHubSerializationPtrOutputWithContext(ctx context.Context) OutputEventHubSerializationPtrOutput {
	return o
}

func (o OutputEventHubSerializationPtrOutput) Elem() OutputEventHubSerializationOutput {
	return o.ApplyT(func(v *OutputEventHubSerialization) OutputEventHubSerialization {
		if v != nil {
			return *v
		}
		var ret OutputEventHubSerialization
		return ret
	}).(OutputEventHubSerializationOutput)
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
//
// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
func (o OutputEventHubSerializationPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputEventHubSerialization) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
//
// > **NOTE:** This is required when `type` is set to `Csv`.
func (o OutputEventHubSerializationPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputEventHubSerialization) *string {
		if v == nil {
			return nil
		}
		return v.FieldDelimiter
	}).(pulumi.StringPtrOutput)
}

// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
//
// > **NOTE:** This is Required and can only be specified when `type` is set to `Json`.
func (o OutputEventHubSerializationPtrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputEventHubSerialization) *string {
		if v == nil {
			return nil
		}
		return v.Format
	}).(pulumi.StringPtrOutput)
}

// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv`, `Json` and `Parquet`.
func (o OutputEventHubSerializationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputEventHubSerialization) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type OutputServiceBusQueueSerialization struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
	Encoding *string `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv`.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
	//
	// > **NOTE:** This is Required and can only be specified when `type` is set to `Json`.
	Format *string `pulumi:"format"`
	// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv`, `Json` and `Parquet`.
	Type string `pulumi:"type"`
}

// OutputServiceBusQueueSerializationInput is an input type that accepts OutputServiceBusQueueSerializationArgs and OutputServiceBusQueueSerializationOutput values.
// You can construct a concrete instance of `OutputServiceBusQueueSerializationInput` via:
//
//	OutputServiceBusQueueSerializationArgs{...}
type OutputServiceBusQueueSerializationInput interface {
	pulumi.Input

	ToOutputServiceBusQueueSerializationOutput() OutputServiceBusQueueSerializationOutput
	ToOutputServiceBusQueueSerializationOutputWithContext(context.Context) OutputServiceBusQueueSerializationOutput
}

type OutputServiceBusQueueSerializationArgs struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv`.
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
	//
	// > **NOTE:** This is Required and can only be specified when `type` is set to `Json`.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv`, `Json` and `Parquet`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OutputServiceBusQueueSerializationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputServiceBusQueueSerialization)(nil)).Elem()
}

func (i OutputServiceBusQueueSerializationArgs) ToOutputServiceBusQueueSerializationOutput() OutputServiceBusQueueSerializationOutput {
	return i.ToOutputServiceBusQueueSerializationOutputWithContext(context.Background())
}

func (i OutputServiceBusQueueSerializationArgs) ToOutputServiceBusQueueSerializationOutputWithContext(ctx context.Context) OutputServiceBusQueueSerializationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputServiceBusQueueSerializationOutput)
}

func (i OutputServiceBusQueueSerializationArgs) ToOutputServiceBusQueueSerializationPtrOutput() OutputServiceBusQueueSerializationPtrOutput {
	return i.ToOutputServiceBusQueueSerializationPtrOutputWithContext(context.Background())
}

func (i OutputServiceBusQueueSerializationArgs) ToOutputServiceBusQueueSerializationPtrOutputWithContext(ctx context.Context) OutputServiceBusQueueSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputServiceBusQueueSerializationOutput).ToOutputServiceBusQueueSerializationPtrOutputWithContext(ctx)
}

// OutputServiceBusQueueSerializationPtrInput is an input type that accepts OutputServiceBusQueueSerializationArgs, OutputServiceBusQueueSerializationPtr and OutputServiceBusQueueSerializationPtrOutput values.
// You can construct a concrete instance of `OutputServiceBusQueueSerializationPtrInput` via:
//
//	        OutputServiceBusQueueSerializationArgs{...}
//
//	or:
//
//	        nil
type OutputServiceBusQueueSerializationPtrInput interface {
	pulumi.Input

	ToOutputServiceBusQueueSerializationPtrOutput() OutputServiceBusQueueSerializationPtrOutput
	ToOutputServiceBusQueueSerializationPtrOutputWithContext(context.Context) OutputServiceBusQueueSerializationPtrOutput
}

type outputServiceBusQueueSerializationPtrType OutputServiceBusQueueSerializationArgs

func OutputServiceBusQueueSerializationPtr(v *OutputServiceBusQueueSerializationArgs) OutputServiceBusQueueSerializationPtrInput {
	return (*outputServiceBusQueueSerializationPtrType)(v)
}

func (*outputServiceBusQueueSerializationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputServiceBusQueueSerialization)(nil)).Elem()
}

func (i *outputServiceBusQueueSerializationPtrType) ToOutputServiceBusQueueSerializationPtrOutput() OutputServiceBusQueueSerializationPtrOutput {
	return i.ToOutputServiceBusQueueSerializationPtrOutputWithContext(context.Background())
}

func (i *outputServiceBusQueueSerializationPtrType) ToOutputServiceBusQueueSerializationPtrOutputWithContext(ctx context.Context) OutputServiceBusQueueSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputServiceBusQueueSerializationPtrOutput)
}

type OutputServiceBusQueueSerializationOutput struct{ *pulumi.OutputState }

func (OutputServiceBusQueueSerializationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputServiceBusQueueSerialization)(nil)).Elem()
}

func (o OutputServiceBusQueueSerializationOutput) ToOutputServiceBusQueueSerializationOutput() OutputServiceBusQueueSerializationOutput {
	return o
}

func (o OutputServiceBusQueueSerializationOutput) ToOutputServiceBusQueueSerializationOutputWithContext(ctx context.Context) OutputServiceBusQueueSerializationOutput {
	return o
}

func (o OutputServiceBusQueueSerializationOutput) ToOutputServiceBusQueueSerializationPtrOutput() OutputServiceBusQueueSerializationPtrOutput {
	return o.ToOutputServiceBusQueueSerializationPtrOutputWithContext(context.Background())
}

func (o OutputServiceBusQueueSerializationOutput) ToOutputServiceBusQueueSerializationPtrOutputWithContext(ctx context.Context) OutputServiceBusQueueSerializationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OutputServiceBusQueueSerialization) *OutputServiceBusQueueSerialization {
		return &v
	}).(OutputServiceBusQueueSerializationPtrOutput)
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
//
// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
func (o OutputServiceBusQueueSerializationOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputServiceBusQueueSerialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
//
// > **NOTE:** This is required when `type` is set to `Csv`.
func (o OutputServiceBusQueueSerializationOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputServiceBusQueueSerialization) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
//
// > **NOTE:** This is Required and can only be specified when `type` is set to `Json`.
func (o OutputServiceBusQueueSerializationOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputServiceBusQueueSerialization) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv`, `Json` and `Parquet`.
func (o OutputServiceBusQueueSerializationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OutputServiceBusQueueSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type OutputServiceBusQueueSerializationPtrOutput struct{ *pulumi.OutputState }

func (OutputServiceBusQueueSerializationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputServiceBusQueueSerialization)(nil)).Elem()
}

func (o OutputServiceBusQueueSerializationPtrOutput) ToOutputServiceBusQueueSerializationPtrOutput() OutputServiceBusQueueSerializationPtrOutput {
	return o
}

func (o OutputServiceBusQueueSerializationPtrOutput) ToOutputServiceBusQueueSerializationPtrOutputWithContext(ctx context.Context) OutputServiceBusQueueSerializationPtrOutput {
	return o
}

func (o OutputServiceBusQueueSerializationPtrOutput) Elem() OutputServiceBusQueueSerializationOutput {
	return o.ApplyT(func(v *OutputServiceBusQueueSerialization) OutputServiceBusQueueSerialization {
		if v != nil {
			return *v
		}
		var ret OutputServiceBusQueueSerialization
		return ret
	}).(OutputServiceBusQueueSerializationOutput)
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
//
// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
func (o OutputServiceBusQueueSerializationPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputServiceBusQueueSerialization) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
//
// > **NOTE:** This is required when `type` is set to `Csv`.
func (o OutputServiceBusQueueSerializationPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputServiceBusQueueSerialization) *string {
		if v == nil {
			return nil
		}
		return v.FieldDelimiter
	}).(pulumi.StringPtrOutput)
}

// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
//
// > **NOTE:** This is Required and can only be specified when `type` is set to `Json`.
func (o OutputServiceBusQueueSerializationPtrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputServiceBusQueueSerialization) *string {
		if v == nil {
			return nil
		}
		return v.Format
	}).(pulumi.StringPtrOutput)
}

// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv`, `Json` and `Parquet`.
func (o OutputServiceBusQueueSerializationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputServiceBusQueueSerialization) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type OutputServicebusTopicSerialization struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
	Encoding *string `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv`.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
	//
	// > **NOTE:** This is Required and can only be specified when `type` is set to `Json`.
	Format *string `pulumi:"format"`
	// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv`, `Json` and `Parquet`.
	Type string `pulumi:"type"`
}

// OutputServicebusTopicSerializationInput is an input type that accepts OutputServicebusTopicSerializationArgs and OutputServicebusTopicSerializationOutput values.
// You can construct a concrete instance of `OutputServicebusTopicSerializationInput` via:
//
//	OutputServicebusTopicSerializationArgs{...}
type OutputServicebusTopicSerializationInput interface {
	pulumi.Input

	ToOutputServicebusTopicSerializationOutput() OutputServicebusTopicSerializationOutput
	ToOutputServicebusTopicSerializationOutputWithContext(context.Context) OutputServicebusTopicSerializationOutput
}

type OutputServicebusTopicSerializationArgs struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv`.
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
	//
	// > **NOTE:** This is Required and can only be specified when `type` is set to `Json`.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv`, `Json` and `Parquet`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OutputServicebusTopicSerializationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputServicebusTopicSerialization)(nil)).Elem()
}

func (i OutputServicebusTopicSerializationArgs) ToOutputServicebusTopicSerializationOutput() OutputServicebusTopicSerializationOutput {
	return i.ToOutputServicebusTopicSerializationOutputWithContext(context.Background())
}

func (i OutputServicebusTopicSerializationArgs) ToOutputServicebusTopicSerializationOutputWithContext(ctx context.Context) OutputServicebusTopicSerializationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputServicebusTopicSerializationOutput)
}

func (i OutputServicebusTopicSerializationArgs) ToOutputServicebusTopicSerializationPtrOutput() OutputServicebusTopicSerializationPtrOutput {
	return i.ToOutputServicebusTopicSerializationPtrOutputWithContext(context.Background())
}

func (i OutputServicebusTopicSerializationArgs) ToOutputServicebusTopicSerializationPtrOutputWithContext(ctx context.Context) OutputServicebusTopicSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputServicebusTopicSerializationOutput).ToOutputServicebusTopicSerializationPtrOutputWithContext(ctx)
}

// OutputServicebusTopicSerializationPtrInput is an input type that accepts OutputServicebusTopicSerializationArgs, OutputServicebusTopicSerializationPtr and OutputServicebusTopicSerializationPtrOutput values.
// You can construct a concrete instance of `OutputServicebusTopicSerializationPtrInput` via:
//
//	        OutputServicebusTopicSerializationArgs{...}
//
//	or:
//
//	        nil
type OutputServicebusTopicSerializationPtrInput interface {
	pulumi.Input

	ToOutputServicebusTopicSerializationPtrOutput() OutputServicebusTopicSerializationPtrOutput
	ToOutputServicebusTopicSerializationPtrOutputWithContext(context.Context) OutputServicebusTopicSerializationPtrOutput
}

type outputServicebusTopicSerializationPtrType OutputServicebusTopicSerializationArgs

func OutputServicebusTopicSerializationPtr(v *OutputServicebusTopicSerializationArgs) OutputServicebusTopicSerializationPtrInput {
	return (*outputServicebusTopicSerializationPtrType)(v)
}

func (*outputServicebusTopicSerializationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputServicebusTopicSerialization)(nil)).Elem()
}

func (i *outputServicebusTopicSerializationPtrType) ToOutputServicebusTopicSerializationPtrOutput() OutputServicebusTopicSerializationPtrOutput {
	return i.ToOutputServicebusTopicSerializationPtrOutputWithContext(context.Background())
}

func (i *outputServicebusTopicSerializationPtrType) ToOutputServicebusTopicSerializationPtrOutputWithContext(ctx context.Context) OutputServicebusTopicSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputServicebusTopicSerializationPtrOutput)
}

type OutputServicebusTopicSerializationOutput struct{ *pulumi.OutputState }

func (OutputServicebusTopicSerializationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputServicebusTopicSerialization)(nil)).Elem()
}

func (o OutputServicebusTopicSerializationOutput) ToOutputServicebusTopicSerializationOutput() OutputServicebusTopicSerializationOutput {
	return o
}

func (o OutputServicebusTopicSerializationOutput) ToOutputServicebusTopicSerializationOutputWithContext(ctx context.Context) OutputServicebusTopicSerializationOutput {
	return o
}

func (o OutputServicebusTopicSerializationOutput) ToOutputServicebusTopicSerializationPtrOutput() OutputServicebusTopicSerializationPtrOutput {
	return o.ToOutputServicebusTopicSerializationPtrOutputWithContext(context.Background())
}

func (o OutputServicebusTopicSerializationOutput) ToOutputServicebusTopicSerializationPtrOutputWithContext(ctx context.Context) OutputServicebusTopicSerializationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OutputServicebusTopicSerialization) *OutputServicebusTopicSerialization {
		return &v
	}).(OutputServicebusTopicSerializationPtrOutput)
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
//
// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
func (o OutputServicebusTopicSerializationOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputServicebusTopicSerialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
//
// > **NOTE:** This is required when `type` is set to `Csv`.
func (o OutputServicebusTopicSerializationOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputServicebusTopicSerialization) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
//
// > **NOTE:** This is Required and can only be specified when `type` is set to `Json`.
func (o OutputServicebusTopicSerializationOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputServicebusTopicSerialization) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv`, `Json` and `Parquet`.
func (o OutputServicebusTopicSerializationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OutputServicebusTopicSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type OutputServicebusTopicSerializationPtrOutput struct{ *pulumi.OutputState }

func (OutputServicebusTopicSerializationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputServicebusTopicSerialization)(nil)).Elem()
}

func (o OutputServicebusTopicSerializationPtrOutput) ToOutputServicebusTopicSerializationPtrOutput() OutputServicebusTopicSerializationPtrOutput {
	return o
}

func (o OutputServicebusTopicSerializationPtrOutput) ToOutputServicebusTopicSerializationPtrOutputWithContext(ctx context.Context) OutputServicebusTopicSerializationPtrOutput {
	return o
}

func (o OutputServicebusTopicSerializationPtrOutput) Elem() OutputServicebusTopicSerializationOutput {
	return o.ApplyT(func(v *OutputServicebusTopicSerialization) OutputServicebusTopicSerialization {
		if v != nil {
			return *v
		}
		var ret OutputServicebusTopicSerialization
		return ret
	}).(OutputServicebusTopicSerializationOutput)
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
//
// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
func (o OutputServicebusTopicSerializationPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputServicebusTopicSerialization) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
//
// > **NOTE:** This is required when `type` is set to `Csv`.
func (o OutputServicebusTopicSerializationPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputServicebusTopicSerialization) *string {
		if v == nil {
			return nil
		}
		return v.FieldDelimiter
	}).(pulumi.StringPtrOutput)
}

// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
//
// > **NOTE:** This is Required and can only be specified when `type` is set to `Json`.
func (o OutputServicebusTopicSerializationPtrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputServicebusTopicSerialization) *string {
		if v == nil {
			return nil
		}
		return v.Format
	}).(pulumi.StringPtrOutput)
}

// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv`, `Json` and `Parquet`.
func (o OutputServicebusTopicSerializationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputServicebusTopicSerialization) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type ReferenceInputBlobSerialization struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
	Encoding *string `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv`.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// The serialization format used for the reference data. Possible values are `Avro`, `Csv` and `Json`.
	Type string `pulumi:"type"`
}

// ReferenceInputBlobSerializationInput is an input type that accepts ReferenceInputBlobSerializationArgs and ReferenceInputBlobSerializationOutput values.
// You can construct a concrete instance of `ReferenceInputBlobSerializationInput` via:
//
//	ReferenceInputBlobSerializationArgs{...}
type ReferenceInputBlobSerializationInput interface {
	pulumi.Input

	ToReferenceInputBlobSerializationOutput() ReferenceInputBlobSerializationOutput
	ToReferenceInputBlobSerializationOutputWithContext(context.Context) ReferenceInputBlobSerializationOutput
}

type ReferenceInputBlobSerializationArgs struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv`.
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// The serialization format used for the reference data. Possible values are `Avro`, `Csv` and `Json`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ReferenceInputBlobSerializationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceInputBlobSerialization)(nil)).Elem()
}

func (i ReferenceInputBlobSerializationArgs) ToReferenceInputBlobSerializationOutput() ReferenceInputBlobSerializationOutput {
	return i.ToReferenceInputBlobSerializationOutputWithContext(context.Background())
}

func (i ReferenceInputBlobSerializationArgs) ToReferenceInputBlobSerializationOutputWithContext(ctx context.Context) ReferenceInputBlobSerializationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceInputBlobSerializationOutput)
}

func (i ReferenceInputBlobSerializationArgs) ToReferenceInputBlobSerializationPtrOutput() ReferenceInputBlobSerializationPtrOutput {
	return i.ToReferenceInputBlobSerializationPtrOutputWithContext(context.Background())
}

func (i ReferenceInputBlobSerializationArgs) ToReferenceInputBlobSerializationPtrOutputWithContext(ctx context.Context) ReferenceInputBlobSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceInputBlobSerializationOutput).ToReferenceInputBlobSerializationPtrOutputWithContext(ctx)
}

// ReferenceInputBlobSerializationPtrInput is an input type that accepts ReferenceInputBlobSerializationArgs, ReferenceInputBlobSerializationPtr and ReferenceInputBlobSerializationPtrOutput values.
// You can construct a concrete instance of `ReferenceInputBlobSerializationPtrInput` via:
//
//	        ReferenceInputBlobSerializationArgs{...}
//
//	or:
//
//	        nil
type ReferenceInputBlobSerializationPtrInput interface {
	pulumi.Input

	ToReferenceInputBlobSerializationPtrOutput() ReferenceInputBlobSerializationPtrOutput
	ToReferenceInputBlobSerializationPtrOutputWithContext(context.Context) ReferenceInputBlobSerializationPtrOutput
}

type referenceInputBlobSerializationPtrType ReferenceInputBlobSerializationArgs

func ReferenceInputBlobSerializationPtr(v *ReferenceInputBlobSerializationArgs) ReferenceInputBlobSerializationPtrInput {
	return (*referenceInputBlobSerializationPtrType)(v)
}

func (*referenceInputBlobSerializationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferenceInputBlobSerialization)(nil)).Elem()
}

func (i *referenceInputBlobSerializationPtrType) ToReferenceInputBlobSerializationPtrOutput() ReferenceInputBlobSerializationPtrOutput {
	return i.ToReferenceInputBlobSerializationPtrOutputWithContext(context.Background())
}

func (i *referenceInputBlobSerializationPtrType) ToReferenceInputBlobSerializationPtrOutputWithContext(ctx context.Context) ReferenceInputBlobSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceInputBlobSerializationPtrOutput)
}

type ReferenceInputBlobSerializationOutput struct{ *pulumi.OutputState }

func (ReferenceInputBlobSerializationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceInputBlobSerialization)(nil)).Elem()
}

func (o ReferenceInputBlobSerializationOutput) ToReferenceInputBlobSerializationOutput() ReferenceInputBlobSerializationOutput {
	return o
}

func (o ReferenceInputBlobSerializationOutput) ToReferenceInputBlobSerializationOutputWithContext(ctx context.Context) ReferenceInputBlobSerializationOutput {
	return o
}

func (o ReferenceInputBlobSerializationOutput) ToReferenceInputBlobSerializationPtrOutput() ReferenceInputBlobSerializationPtrOutput {
	return o.ToReferenceInputBlobSerializationPtrOutputWithContext(context.Background())
}

func (o ReferenceInputBlobSerializationOutput) ToReferenceInputBlobSerializationPtrOutputWithContext(ctx context.Context) ReferenceInputBlobSerializationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReferenceInputBlobSerialization) *ReferenceInputBlobSerialization {
		return &v
	}).(ReferenceInputBlobSerializationPtrOutput)
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
//
// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
func (o ReferenceInputBlobSerializationOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceInputBlobSerialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
//
// > **NOTE:** This is required when `type` is set to `Csv`.
func (o ReferenceInputBlobSerializationOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceInputBlobSerialization) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// The serialization format used for the reference data. Possible values are `Avro`, `Csv` and `Json`.
func (o ReferenceInputBlobSerializationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ReferenceInputBlobSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type ReferenceInputBlobSerializationPtrOutput struct{ *pulumi.OutputState }

func (ReferenceInputBlobSerializationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferenceInputBlobSerialization)(nil)).Elem()
}

func (o ReferenceInputBlobSerializationPtrOutput) ToReferenceInputBlobSerializationPtrOutput() ReferenceInputBlobSerializationPtrOutput {
	return o
}

func (o ReferenceInputBlobSerializationPtrOutput) ToReferenceInputBlobSerializationPtrOutputWithContext(ctx context.Context) ReferenceInputBlobSerializationPtrOutput {
	return o
}

func (o ReferenceInputBlobSerializationPtrOutput) Elem() ReferenceInputBlobSerializationOutput {
	return o.ApplyT(func(v *ReferenceInputBlobSerialization) ReferenceInputBlobSerialization {
		if v != nil {
			return *v
		}
		var ret ReferenceInputBlobSerialization
		return ret
	}).(ReferenceInputBlobSerializationOutput)
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
//
// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
func (o ReferenceInputBlobSerializationPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReferenceInputBlobSerialization) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
//
// > **NOTE:** This is required when `type` is set to `Csv`.
func (o ReferenceInputBlobSerializationPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReferenceInputBlobSerialization) *string {
		if v == nil {
			return nil
		}
		return v.FieldDelimiter
	}).(pulumi.StringPtrOutput)
}

// The serialization format used for the reference data. Possible values are `Avro`, `Csv` and `Json`.
func (o ReferenceInputBlobSerializationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReferenceInputBlobSerialization) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type StreamInputBlobSerialization struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
	Encoding *string `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv`.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
	Type string `pulumi:"type"`
}

// StreamInputBlobSerializationInput is an input type that accepts StreamInputBlobSerializationArgs and StreamInputBlobSerializationOutput values.
// You can construct a concrete instance of `StreamInputBlobSerializationInput` via:
//
//	StreamInputBlobSerializationArgs{...}
type StreamInputBlobSerializationInput interface {
	pulumi.Input

	ToStreamInputBlobSerializationOutput() StreamInputBlobSerializationOutput
	ToStreamInputBlobSerializationOutputWithContext(context.Context) StreamInputBlobSerializationOutput
}

type StreamInputBlobSerializationArgs struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv`.
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (StreamInputBlobSerializationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamInputBlobSerialization)(nil)).Elem()
}

func (i StreamInputBlobSerializationArgs) ToStreamInputBlobSerializationOutput() StreamInputBlobSerializationOutput {
	return i.ToStreamInputBlobSerializationOutputWithContext(context.Background())
}

func (i StreamInputBlobSerializationArgs) ToStreamInputBlobSerializationOutputWithContext(ctx context.Context) StreamInputBlobSerializationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInputBlobSerializationOutput)
}

func (i StreamInputBlobSerializationArgs) ToStreamInputBlobSerializationPtrOutput() StreamInputBlobSerializationPtrOutput {
	return i.ToStreamInputBlobSerializationPtrOutputWithContext(context.Background())
}

func (i StreamInputBlobSerializationArgs) ToStreamInputBlobSerializationPtrOutputWithContext(ctx context.Context) StreamInputBlobSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInputBlobSerializationOutput).ToStreamInputBlobSerializationPtrOutputWithContext(ctx)
}

// StreamInputBlobSerializationPtrInput is an input type that accepts StreamInputBlobSerializationArgs, StreamInputBlobSerializationPtr and StreamInputBlobSerializationPtrOutput values.
// You can construct a concrete instance of `StreamInputBlobSerializationPtrInput` via:
//
//	        StreamInputBlobSerializationArgs{...}
//
//	or:
//
//	        nil
type StreamInputBlobSerializationPtrInput interface {
	pulumi.Input

	ToStreamInputBlobSerializationPtrOutput() StreamInputBlobSerializationPtrOutput
	ToStreamInputBlobSerializationPtrOutputWithContext(context.Context) StreamInputBlobSerializationPtrOutput
}

type streamInputBlobSerializationPtrType StreamInputBlobSerializationArgs

func StreamInputBlobSerializationPtr(v *StreamInputBlobSerializationArgs) StreamInputBlobSerializationPtrInput {
	return (*streamInputBlobSerializationPtrType)(v)
}

func (*streamInputBlobSerializationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamInputBlobSerialization)(nil)).Elem()
}

func (i *streamInputBlobSerializationPtrType) ToStreamInputBlobSerializationPtrOutput() StreamInputBlobSerializationPtrOutput {
	return i.ToStreamInputBlobSerializationPtrOutputWithContext(context.Background())
}

func (i *streamInputBlobSerializationPtrType) ToStreamInputBlobSerializationPtrOutputWithContext(ctx context.Context) StreamInputBlobSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInputBlobSerializationPtrOutput)
}

type StreamInputBlobSerializationOutput struct{ *pulumi.OutputState }

func (StreamInputBlobSerializationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamInputBlobSerialization)(nil)).Elem()
}

func (o StreamInputBlobSerializationOutput) ToStreamInputBlobSerializationOutput() StreamInputBlobSerializationOutput {
	return o
}

func (o StreamInputBlobSerializationOutput) ToStreamInputBlobSerializationOutputWithContext(ctx context.Context) StreamInputBlobSerializationOutput {
	return o
}

func (o StreamInputBlobSerializationOutput) ToStreamInputBlobSerializationPtrOutput() StreamInputBlobSerializationPtrOutput {
	return o.ToStreamInputBlobSerializationPtrOutputWithContext(context.Background())
}

func (o StreamInputBlobSerializationOutput) ToStreamInputBlobSerializationPtrOutputWithContext(ctx context.Context) StreamInputBlobSerializationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamInputBlobSerialization) *StreamInputBlobSerialization {
		return &v
	}).(StreamInputBlobSerializationPtrOutput)
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
//
// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
func (o StreamInputBlobSerializationOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamInputBlobSerialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
//
// > **NOTE:** This is required when `type` is set to `Csv`.
func (o StreamInputBlobSerializationOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamInputBlobSerialization) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
func (o StreamInputBlobSerializationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StreamInputBlobSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type StreamInputBlobSerializationPtrOutput struct{ *pulumi.OutputState }

func (StreamInputBlobSerializationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamInputBlobSerialization)(nil)).Elem()
}

func (o StreamInputBlobSerializationPtrOutput) ToStreamInputBlobSerializationPtrOutput() StreamInputBlobSerializationPtrOutput {
	return o
}

func (o StreamInputBlobSerializationPtrOutput) ToStreamInputBlobSerializationPtrOutputWithContext(ctx context.Context) StreamInputBlobSerializationPtrOutput {
	return o
}

func (o StreamInputBlobSerializationPtrOutput) Elem() StreamInputBlobSerializationOutput {
	return o.ApplyT(func(v *StreamInputBlobSerialization) StreamInputBlobSerialization {
		if v != nil {
			return *v
		}
		var ret StreamInputBlobSerialization
		return ret
	}).(StreamInputBlobSerializationOutput)
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
//
// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
func (o StreamInputBlobSerializationPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamInputBlobSerialization) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
//
// > **NOTE:** This is required when `type` is set to `Csv`.
func (o StreamInputBlobSerializationPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamInputBlobSerialization) *string {
		if v == nil {
			return nil
		}
		return v.FieldDelimiter
	}).(pulumi.StringPtrOutput)
}

// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
func (o StreamInputBlobSerializationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamInputBlobSerialization) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type StreamInputEventHubSerialization struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
	Encoding *string `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv`.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
	Type string `pulumi:"type"`
}

// StreamInputEventHubSerializationInput is an input type that accepts StreamInputEventHubSerializationArgs and StreamInputEventHubSerializationOutput values.
// You can construct a concrete instance of `StreamInputEventHubSerializationInput` via:
//
//	StreamInputEventHubSerializationArgs{...}
type StreamInputEventHubSerializationInput interface {
	pulumi.Input

	ToStreamInputEventHubSerializationOutput() StreamInputEventHubSerializationOutput
	ToStreamInputEventHubSerializationOutputWithContext(context.Context) StreamInputEventHubSerializationOutput
}

type StreamInputEventHubSerializationArgs struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv`.
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (StreamInputEventHubSerializationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamInputEventHubSerialization)(nil)).Elem()
}

func (i StreamInputEventHubSerializationArgs) ToStreamInputEventHubSerializationOutput() StreamInputEventHubSerializationOutput {
	return i.ToStreamInputEventHubSerializationOutputWithContext(context.Background())
}

func (i StreamInputEventHubSerializationArgs) ToStreamInputEventHubSerializationOutputWithContext(ctx context.Context) StreamInputEventHubSerializationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInputEventHubSerializationOutput)
}

func (i StreamInputEventHubSerializationArgs) ToStreamInputEventHubSerializationPtrOutput() StreamInputEventHubSerializationPtrOutput {
	return i.ToStreamInputEventHubSerializationPtrOutputWithContext(context.Background())
}

func (i StreamInputEventHubSerializationArgs) ToStreamInputEventHubSerializationPtrOutputWithContext(ctx context.Context) StreamInputEventHubSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInputEventHubSerializationOutput).ToStreamInputEventHubSerializationPtrOutputWithContext(ctx)
}

// StreamInputEventHubSerializationPtrInput is an input type that accepts StreamInputEventHubSerializationArgs, StreamInputEventHubSerializationPtr and StreamInputEventHubSerializationPtrOutput values.
// You can construct a concrete instance of `StreamInputEventHubSerializationPtrInput` via:
//
//	        StreamInputEventHubSerializationArgs{...}
//
//	or:
//
//	        nil
type StreamInputEventHubSerializationPtrInput interface {
	pulumi.Input

	ToStreamInputEventHubSerializationPtrOutput() StreamInputEventHubSerializationPtrOutput
	ToStreamInputEventHubSerializationPtrOutputWithContext(context.Context) StreamInputEventHubSerializationPtrOutput
}

type streamInputEventHubSerializationPtrType StreamInputEventHubSerializationArgs

func StreamInputEventHubSerializationPtr(v *StreamInputEventHubSerializationArgs) StreamInputEventHubSerializationPtrInput {
	return (*streamInputEventHubSerializationPtrType)(v)
}

func (*streamInputEventHubSerializationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamInputEventHubSerialization)(nil)).Elem()
}

func (i *streamInputEventHubSerializationPtrType) ToStreamInputEventHubSerializationPtrOutput() StreamInputEventHubSerializationPtrOutput {
	return i.ToStreamInputEventHubSerializationPtrOutputWithContext(context.Background())
}

func (i *streamInputEventHubSerializationPtrType) ToStreamInputEventHubSerializationPtrOutputWithContext(ctx context.Context) StreamInputEventHubSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInputEventHubSerializationPtrOutput)
}

type StreamInputEventHubSerializationOutput struct{ *pulumi.OutputState }

func (StreamInputEventHubSerializationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamInputEventHubSerialization)(nil)).Elem()
}

func (o StreamInputEventHubSerializationOutput) ToStreamInputEventHubSerializationOutput() StreamInputEventHubSerializationOutput {
	return o
}

func (o StreamInputEventHubSerializationOutput) ToStreamInputEventHubSerializationOutputWithContext(ctx context.Context) StreamInputEventHubSerializationOutput {
	return o
}

func (o StreamInputEventHubSerializationOutput) ToStreamInputEventHubSerializationPtrOutput() StreamInputEventHubSerializationPtrOutput {
	return o.ToStreamInputEventHubSerializationPtrOutputWithContext(context.Background())
}

func (o StreamInputEventHubSerializationOutput) ToStreamInputEventHubSerializationPtrOutputWithContext(ctx context.Context) StreamInputEventHubSerializationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamInputEventHubSerialization) *StreamInputEventHubSerialization {
		return &v
	}).(StreamInputEventHubSerializationPtrOutput)
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
//
// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
func (o StreamInputEventHubSerializationOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamInputEventHubSerialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
//
// > **NOTE:** This is required when `type` is set to `Csv`.
func (o StreamInputEventHubSerializationOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamInputEventHubSerialization) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
func (o StreamInputEventHubSerializationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StreamInputEventHubSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type StreamInputEventHubSerializationPtrOutput struct{ *pulumi.OutputState }

func (StreamInputEventHubSerializationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamInputEventHubSerialization)(nil)).Elem()
}

func (o StreamInputEventHubSerializationPtrOutput) ToStreamInputEventHubSerializationPtrOutput() StreamInputEventHubSerializationPtrOutput {
	return o
}

func (o StreamInputEventHubSerializationPtrOutput) ToStreamInputEventHubSerializationPtrOutputWithContext(ctx context.Context) StreamInputEventHubSerializationPtrOutput {
	return o
}

func (o StreamInputEventHubSerializationPtrOutput) Elem() StreamInputEventHubSerializationOutput {
	return o.ApplyT(func(v *StreamInputEventHubSerialization) StreamInputEventHubSerialization {
		if v != nil {
			return *v
		}
		var ret StreamInputEventHubSerialization
		return ret
	}).(StreamInputEventHubSerializationOutput)
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
//
// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
func (o StreamInputEventHubSerializationPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamInputEventHubSerialization) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
//
// > **NOTE:** This is required when `type` is set to `Csv`.
func (o StreamInputEventHubSerializationPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamInputEventHubSerialization) *string {
		if v == nil {
			return nil
		}
		return v.FieldDelimiter
	}).(pulumi.StringPtrOutput)
}

// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
func (o StreamInputEventHubSerializationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamInputEventHubSerialization) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type StreamInputEventHubV2Serialization struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
	Encoding *string `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv`.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
	Type string `pulumi:"type"`
}

// StreamInputEventHubV2SerializationInput is an input type that accepts StreamInputEventHubV2SerializationArgs and StreamInputEventHubV2SerializationOutput values.
// You can construct a concrete instance of `StreamInputEventHubV2SerializationInput` via:
//
//	StreamInputEventHubV2SerializationArgs{...}
type StreamInputEventHubV2SerializationInput interface {
	pulumi.Input

	ToStreamInputEventHubV2SerializationOutput() StreamInputEventHubV2SerializationOutput
	ToStreamInputEventHubV2SerializationOutputWithContext(context.Context) StreamInputEventHubV2SerializationOutput
}

type StreamInputEventHubV2SerializationArgs struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv`.
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (StreamInputEventHubV2SerializationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamInputEventHubV2Serialization)(nil)).Elem()
}

func (i StreamInputEventHubV2SerializationArgs) ToStreamInputEventHubV2SerializationOutput() StreamInputEventHubV2SerializationOutput {
	return i.ToStreamInputEventHubV2SerializationOutputWithContext(context.Background())
}

func (i StreamInputEventHubV2SerializationArgs) ToStreamInputEventHubV2SerializationOutputWithContext(ctx context.Context) StreamInputEventHubV2SerializationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInputEventHubV2SerializationOutput)
}

func (i StreamInputEventHubV2SerializationArgs) ToStreamInputEventHubV2SerializationPtrOutput() StreamInputEventHubV2SerializationPtrOutput {
	return i.ToStreamInputEventHubV2SerializationPtrOutputWithContext(context.Background())
}

func (i StreamInputEventHubV2SerializationArgs) ToStreamInputEventHubV2SerializationPtrOutputWithContext(ctx context.Context) StreamInputEventHubV2SerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInputEventHubV2SerializationOutput).ToStreamInputEventHubV2SerializationPtrOutputWithContext(ctx)
}

// StreamInputEventHubV2SerializationPtrInput is an input type that accepts StreamInputEventHubV2SerializationArgs, StreamInputEventHubV2SerializationPtr and StreamInputEventHubV2SerializationPtrOutput values.
// You can construct a concrete instance of `StreamInputEventHubV2SerializationPtrInput` via:
//
//	        StreamInputEventHubV2SerializationArgs{...}
//
//	or:
//
//	        nil
type StreamInputEventHubV2SerializationPtrInput interface {
	pulumi.Input

	ToStreamInputEventHubV2SerializationPtrOutput() StreamInputEventHubV2SerializationPtrOutput
	ToStreamInputEventHubV2SerializationPtrOutputWithContext(context.Context) StreamInputEventHubV2SerializationPtrOutput
}

type streamInputEventHubV2SerializationPtrType StreamInputEventHubV2SerializationArgs

func StreamInputEventHubV2SerializationPtr(v *StreamInputEventHubV2SerializationArgs) StreamInputEventHubV2SerializationPtrInput {
	return (*streamInputEventHubV2SerializationPtrType)(v)
}

func (*streamInputEventHubV2SerializationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamInputEventHubV2Serialization)(nil)).Elem()
}

func (i *streamInputEventHubV2SerializationPtrType) ToStreamInputEventHubV2SerializationPtrOutput() StreamInputEventHubV2SerializationPtrOutput {
	return i.ToStreamInputEventHubV2SerializationPtrOutputWithContext(context.Background())
}

func (i *streamInputEventHubV2SerializationPtrType) ToStreamInputEventHubV2SerializationPtrOutputWithContext(ctx context.Context) StreamInputEventHubV2SerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInputEventHubV2SerializationPtrOutput)
}

type StreamInputEventHubV2SerializationOutput struct{ *pulumi.OutputState }

func (StreamInputEventHubV2SerializationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamInputEventHubV2Serialization)(nil)).Elem()
}

func (o StreamInputEventHubV2SerializationOutput) ToStreamInputEventHubV2SerializationOutput() StreamInputEventHubV2SerializationOutput {
	return o
}

func (o StreamInputEventHubV2SerializationOutput) ToStreamInputEventHubV2SerializationOutputWithContext(ctx context.Context) StreamInputEventHubV2SerializationOutput {
	return o
}

func (o StreamInputEventHubV2SerializationOutput) ToStreamInputEventHubV2SerializationPtrOutput() StreamInputEventHubV2SerializationPtrOutput {
	return o.ToStreamInputEventHubV2SerializationPtrOutputWithContext(context.Background())
}

func (o StreamInputEventHubV2SerializationOutput) ToStreamInputEventHubV2SerializationPtrOutputWithContext(ctx context.Context) StreamInputEventHubV2SerializationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamInputEventHubV2Serialization) *StreamInputEventHubV2Serialization {
		return &v
	}).(StreamInputEventHubV2SerializationPtrOutput)
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
//
// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
func (o StreamInputEventHubV2SerializationOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamInputEventHubV2Serialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
//
// > **NOTE:** This is required when `type` is set to `Csv`.
func (o StreamInputEventHubV2SerializationOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamInputEventHubV2Serialization) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
func (o StreamInputEventHubV2SerializationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StreamInputEventHubV2Serialization) string { return v.Type }).(pulumi.StringOutput)
}

type StreamInputEventHubV2SerializationPtrOutput struct{ *pulumi.OutputState }

func (StreamInputEventHubV2SerializationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamInputEventHubV2Serialization)(nil)).Elem()
}

func (o StreamInputEventHubV2SerializationPtrOutput) ToStreamInputEventHubV2SerializationPtrOutput() StreamInputEventHubV2SerializationPtrOutput {
	return o
}

func (o StreamInputEventHubV2SerializationPtrOutput) ToStreamInputEventHubV2SerializationPtrOutputWithContext(ctx context.Context) StreamInputEventHubV2SerializationPtrOutput {
	return o
}

func (o StreamInputEventHubV2SerializationPtrOutput) Elem() StreamInputEventHubV2SerializationOutput {
	return o.ApplyT(func(v *StreamInputEventHubV2Serialization) StreamInputEventHubV2Serialization {
		if v != nil {
			return *v
		}
		var ret StreamInputEventHubV2Serialization
		return ret
	}).(StreamInputEventHubV2SerializationOutput)
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
//
// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
func (o StreamInputEventHubV2SerializationPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamInputEventHubV2Serialization) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
//
// > **NOTE:** This is required when `type` is set to `Csv`.
func (o StreamInputEventHubV2SerializationPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamInputEventHubV2Serialization) *string {
		if v == nil {
			return nil
		}
		return v.FieldDelimiter
	}).(pulumi.StringPtrOutput)
}

// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
func (o StreamInputEventHubV2SerializationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamInputEventHubV2Serialization) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type StreamInputIotHubSerialization struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
	Encoding *string `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv`.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
	Type string `pulumi:"type"`
}

// StreamInputIotHubSerializationInput is an input type that accepts StreamInputIotHubSerializationArgs and StreamInputIotHubSerializationOutput values.
// You can construct a concrete instance of `StreamInputIotHubSerializationInput` via:
//
//	StreamInputIotHubSerializationArgs{...}
type StreamInputIotHubSerializationInput interface {
	pulumi.Input

	ToStreamInputIotHubSerializationOutput() StreamInputIotHubSerializationOutput
	ToStreamInputIotHubSerializationOutputWithContext(context.Context) StreamInputIotHubSerializationOutput
}

type StreamInputIotHubSerializationArgs struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
	//
	// > **NOTE:** This is required when `type` is set to `Csv`.
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (StreamInputIotHubSerializationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamInputIotHubSerialization)(nil)).Elem()
}

func (i StreamInputIotHubSerializationArgs) ToStreamInputIotHubSerializationOutput() StreamInputIotHubSerializationOutput {
	return i.ToStreamInputIotHubSerializationOutputWithContext(context.Background())
}

func (i StreamInputIotHubSerializationArgs) ToStreamInputIotHubSerializationOutputWithContext(ctx context.Context) StreamInputIotHubSerializationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInputIotHubSerializationOutput)
}

func (i StreamInputIotHubSerializationArgs) ToStreamInputIotHubSerializationPtrOutput() StreamInputIotHubSerializationPtrOutput {
	return i.ToStreamInputIotHubSerializationPtrOutputWithContext(context.Background())
}

func (i StreamInputIotHubSerializationArgs) ToStreamInputIotHubSerializationPtrOutputWithContext(ctx context.Context) StreamInputIotHubSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInputIotHubSerializationOutput).ToStreamInputIotHubSerializationPtrOutputWithContext(ctx)
}

// StreamInputIotHubSerializationPtrInput is an input type that accepts StreamInputIotHubSerializationArgs, StreamInputIotHubSerializationPtr and StreamInputIotHubSerializationPtrOutput values.
// You can construct a concrete instance of `StreamInputIotHubSerializationPtrInput` via:
//
//	        StreamInputIotHubSerializationArgs{...}
//
//	or:
//
//	        nil
type StreamInputIotHubSerializationPtrInput interface {
	pulumi.Input

	ToStreamInputIotHubSerializationPtrOutput() StreamInputIotHubSerializationPtrOutput
	ToStreamInputIotHubSerializationPtrOutputWithContext(context.Context) StreamInputIotHubSerializationPtrOutput
}

type streamInputIotHubSerializationPtrType StreamInputIotHubSerializationArgs

func StreamInputIotHubSerializationPtr(v *StreamInputIotHubSerializationArgs) StreamInputIotHubSerializationPtrInput {
	return (*streamInputIotHubSerializationPtrType)(v)
}

func (*streamInputIotHubSerializationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamInputIotHubSerialization)(nil)).Elem()
}

func (i *streamInputIotHubSerializationPtrType) ToStreamInputIotHubSerializationPtrOutput() StreamInputIotHubSerializationPtrOutput {
	return i.ToStreamInputIotHubSerializationPtrOutputWithContext(context.Background())
}

func (i *streamInputIotHubSerializationPtrType) ToStreamInputIotHubSerializationPtrOutputWithContext(ctx context.Context) StreamInputIotHubSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInputIotHubSerializationPtrOutput)
}

type StreamInputIotHubSerializationOutput struct{ *pulumi.OutputState }

func (StreamInputIotHubSerializationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamInputIotHubSerialization)(nil)).Elem()
}

func (o StreamInputIotHubSerializationOutput) ToStreamInputIotHubSerializationOutput() StreamInputIotHubSerializationOutput {
	return o
}

func (o StreamInputIotHubSerializationOutput) ToStreamInputIotHubSerializationOutputWithContext(ctx context.Context) StreamInputIotHubSerializationOutput {
	return o
}

func (o StreamInputIotHubSerializationOutput) ToStreamInputIotHubSerializationPtrOutput() StreamInputIotHubSerializationPtrOutput {
	return o.ToStreamInputIotHubSerializationPtrOutputWithContext(context.Background())
}

func (o StreamInputIotHubSerializationOutput) ToStreamInputIotHubSerializationPtrOutputWithContext(ctx context.Context) StreamInputIotHubSerializationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamInputIotHubSerialization) *StreamInputIotHubSerialization {
		return &v
	}).(StreamInputIotHubSerializationPtrOutput)
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
//
// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
func (o StreamInputIotHubSerializationOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamInputIotHubSerialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
//
// > **NOTE:** This is required when `type` is set to `Csv`.
func (o StreamInputIotHubSerializationOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamInputIotHubSerialization) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
func (o StreamInputIotHubSerializationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StreamInputIotHubSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type StreamInputIotHubSerializationPtrOutput struct{ *pulumi.OutputState }

func (StreamInputIotHubSerializationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamInputIotHubSerialization)(nil)).Elem()
}

func (o StreamInputIotHubSerializationPtrOutput) ToStreamInputIotHubSerializationPtrOutput() StreamInputIotHubSerializationPtrOutput {
	return o
}

func (o StreamInputIotHubSerializationPtrOutput) ToStreamInputIotHubSerializationPtrOutputWithContext(ctx context.Context) StreamInputIotHubSerializationPtrOutput {
	return o
}

func (o StreamInputIotHubSerializationPtrOutput) Elem() StreamInputIotHubSerializationOutput {
	return o.ApplyT(func(v *StreamInputIotHubSerialization) StreamInputIotHubSerialization {
		if v != nil {
			return *v
		}
		var ret StreamInputIotHubSerialization
		return ret
	}).(StreamInputIotHubSerializationOutput)
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
//
// > **NOTE:** This is required when `type` is set to `Csv` or `Json`.
func (o StreamInputIotHubSerializationPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamInputIotHubSerialization) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
//
// > **NOTE:** This is required when `type` is set to `Csv`.
func (o StreamInputIotHubSerializationPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamInputIotHubSerialization) *string {
		if v == nil {
			return nil
		}
		return v.FieldDelimiter
	}).(pulumi.StringPtrOutput)
}

// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
func (o StreamInputIotHubSerializationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamInputIotHubSerialization) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type GetJobIdentity struct {
	// The Principal ID associated with this Managed Service Identity.
	PrincipalId string `pulumi:"principalId"`
	// The Tenant ID associated with this Managed Service Identity.
	TenantId string `pulumi:"tenantId"`
	// The identity type of this Managed Service Identity.
	Type string `pulumi:"type"`
}

// GetJobIdentityInput is an input type that accepts GetJobIdentityArgs and GetJobIdentityOutput values.
// You can construct a concrete instance of `GetJobIdentityInput` via:
//
//	GetJobIdentityArgs{...}
type GetJobIdentityInput interface {
	pulumi.Input

	ToGetJobIdentityOutput() GetJobIdentityOutput
	ToGetJobIdentityOutputWithContext(context.Context) GetJobIdentityOutput
}

type GetJobIdentityArgs struct {
	// The Principal ID associated with this Managed Service Identity.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The Tenant ID associated with this Managed Service Identity.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The identity type of this Managed Service Identity.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetJobIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobIdentity)(nil)).Elem()
}

func (i GetJobIdentityArgs) ToGetJobIdentityOutput() GetJobIdentityOutput {
	return i.ToGetJobIdentityOutputWithContext(context.Background())
}

func (i GetJobIdentityArgs) ToGetJobIdentityOutputWithContext(ctx context.Context) GetJobIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobIdentityOutput)
}

// GetJobIdentityArrayInput is an input type that accepts GetJobIdentityArray and GetJobIdentityArrayOutput values.
// You can construct a concrete instance of `GetJobIdentityArrayInput` via:
//
//	GetJobIdentityArray{ GetJobIdentityArgs{...} }
type GetJobIdentityArrayInput interface {
	pulumi.Input

	ToGetJobIdentityArrayOutput() GetJobIdentityArrayOutput
	ToGetJobIdentityArrayOutputWithContext(context.Context) GetJobIdentityArrayOutput
}

type GetJobIdentityArray []GetJobIdentityInput

func (GetJobIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobIdentity)(nil)).Elem()
}

func (i GetJobIdentityArray) ToGetJobIdentityArrayOutput() GetJobIdentityArrayOutput {
	return i.ToGetJobIdentityArrayOutputWithContext(context.Background())
}

func (i GetJobIdentityArray) ToGetJobIdentityArrayOutputWithContext(ctx context.Context) GetJobIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobIdentityArrayOutput)
}

type GetJobIdentityOutput struct{ *pulumi.OutputState }

func (GetJobIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobIdentity)(nil)).Elem()
}

func (o GetJobIdentityOutput) ToGetJobIdentityOutput() GetJobIdentityOutput {
	return o
}

func (o GetJobIdentityOutput) ToGetJobIdentityOutputWithContext(ctx context.Context) GetJobIdentityOutput {
	return o
}

// The Principal ID associated with this Managed Service Identity.
func (o GetJobIdentityOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobIdentity) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The Tenant ID associated with this Managed Service Identity.
func (o GetJobIdentityOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobIdentity) string { return v.TenantId }).(pulumi.StringOutput)
}

// The identity type of this Managed Service Identity.
func (o GetJobIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type GetJobIdentityArrayOutput struct{ *pulumi.OutputState }

func (GetJobIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobIdentity)(nil)).Elem()
}

func (o GetJobIdentityArrayOutput) ToGetJobIdentityArrayOutput() GetJobIdentityArrayOutput {
	return o
}

func (o GetJobIdentityArrayOutput) ToGetJobIdentityArrayOutputWithContext(ctx context.Context) GetJobIdentityArrayOutput {
	return o
}

func (o GetJobIdentityArrayOutput) Index(i pulumi.IntInput) GetJobIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetJobIdentity {
		return vs[0].([]GetJobIdentity)[vs[1].(int)]
	}).(GetJobIdentityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionJavaScriptUDFInputTypeInput)(nil)).Elem(), FunctionJavaScriptUDFInputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionJavaScriptUDFInputTypeArrayInput)(nil)).Elem(), FunctionJavaScriptUDFInputTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionJavaScriptUDFOutputTypeInput)(nil)).Elem(), FunctionJavaScriptUDFOutputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionJavaScriptUDFOutputTypePtrInput)(nil)).Elem(), FunctionJavaScriptUDFOutputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionJavascriptUdaInputTypeInput)(nil)).Elem(), FunctionJavascriptUdaInputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionJavascriptUdaInputTypeArrayInput)(nil)).Elem(), FunctionJavascriptUdaInputTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionJavascriptUdaOutputTypeInput)(nil)).Elem(), FunctionJavascriptUdaOutputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionJavascriptUdaOutputTypePtrInput)(nil)).Elem(), FunctionJavascriptUdaOutputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobIdentityInput)(nil)).Elem(), JobIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobIdentityPtrInput)(nil)).Elem(), JobIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobJobStorageAccountInput)(nil)).Elem(), JobJobStorageAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobJobStorageAccountArrayInput)(nil)).Elem(), JobJobStorageAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OutputBlobSerializationInput)(nil)).Elem(), OutputBlobSerializationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OutputBlobSerializationPtrInput)(nil)).Elem(), OutputBlobSerializationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OutputEventHubSerializationInput)(nil)).Elem(), OutputEventHubSerializationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OutputEventHubSerializationPtrInput)(nil)).Elem(), OutputEventHubSerializationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OutputServiceBusQueueSerializationInput)(nil)).Elem(), OutputServiceBusQueueSerializationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OutputServiceBusQueueSerializationPtrInput)(nil)).Elem(), OutputServiceBusQueueSerializationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OutputServicebusTopicSerializationInput)(nil)).Elem(), OutputServicebusTopicSerializationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OutputServicebusTopicSerializationPtrInput)(nil)).Elem(), OutputServicebusTopicSerializationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceInputBlobSerializationInput)(nil)).Elem(), ReferenceInputBlobSerializationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceInputBlobSerializationPtrInput)(nil)).Elem(), ReferenceInputBlobSerializationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamInputBlobSerializationInput)(nil)).Elem(), StreamInputBlobSerializationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamInputBlobSerializationPtrInput)(nil)).Elem(), StreamInputBlobSerializationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamInputEventHubSerializationInput)(nil)).Elem(), StreamInputEventHubSerializationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamInputEventHubSerializationPtrInput)(nil)).Elem(), StreamInputEventHubSerializationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamInputEventHubV2SerializationInput)(nil)).Elem(), StreamInputEventHubV2SerializationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamInputEventHubV2SerializationPtrInput)(nil)).Elem(), StreamInputEventHubV2SerializationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamInputIotHubSerializationInput)(nil)).Elem(), StreamInputIotHubSerializationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamInputIotHubSerializationPtrInput)(nil)).Elem(), StreamInputIotHubSerializationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobIdentityInput)(nil)).Elem(), GetJobIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobIdentityArrayInput)(nil)).Elem(), GetJobIdentityArray{})
	pulumi.RegisterOutputType(FunctionJavaScriptUDFInputTypeOutput{})
	pulumi.RegisterOutputType(FunctionJavaScriptUDFInputTypeArrayOutput{})
	pulumi.RegisterOutputType(FunctionJavaScriptUDFOutputTypeOutput{})
	pulumi.RegisterOutputType(FunctionJavaScriptUDFOutputTypePtrOutput{})
	pulumi.RegisterOutputType(FunctionJavascriptUdaInputTypeOutput{})
	pulumi.RegisterOutputType(FunctionJavascriptUdaInputTypeArrayOutput{})
	pulumi.RegisterOutputType(FunctionJavascriptUdaOutputTypeOutput{})
	pulumi.RegisterOutputType(FunctionJavascriptUdaOutputTypePtrOutput{})
	pulumi.RegisterOutputType(JobIdentityOutput{})
	pulumi.RegisterOutputType(JobIdentityPtrOutput{})
	pulumi.RegisterOutputType(JobJobStorageAccountOutput{})
	pulumi.RegisterOutputType(JobJobStorageAccountArrayOutput{})
	pulumi.RegisterOutputType(OutputBlobSerializationOutput{})
	pulumi.RegisterOutputType(OutputBlobSerializationPtrOutput{})
	pulumi.RegisterOutputType(OutputEventHubSerializationOutput{})
	pulumi.RegisterOutputType(OutputEventHubSerializationPtrOutput{})
	pulumi.RegisterOutputType(OutputServiceBusQueueSerializationOutput{})
	pulumi.RegisterOutputType(OutputServiceBusQueueSerializationPtrOutput{})
	pulumi.RegisterOutputType(OutputServicebusTopicSerializationOutput{})
	pulumi.RegisterOutputType(OutputServicebusTopicSerializationPtrOutput{})
	pulumi.RegisterOutputType(ReferenceInputBlobSerializationOutput{})
	pulumi.RegisterOutputType(ReferenceInputBlobSerializationPtrOutput{})
	pulumi.RegisterOutputType(StreamInputBlobSerializationOutput{})
	pulumi.RegisterOutputType(StreamInputBlobSerializationPtrOutput{})
	pulumi.RegisterOutputType(StreamInputEventHubSerializationOutput{})
	pulumi.RegisterOutputType(StreamInputEventHubSerializationPtrOutput{})
	pulumi.RegisterOutputType(StreamInputEventHubV2SerializationOutput{})
	pulumi.RegisterOutputType(StreamInputEventHubV2SerializationPtrOutput{})
	pulumi.RegisterOutputType(StreamInputIotHubSerializationOutput{})
	pulumi.RegisterOutputType(StreamInputIotHubSerializationPtrOutput{})
	pulumi.RegisterOutputType(GetJobIdentityOutput{})
	pulumi.RegisterOutputType(GetJobIdentityArrayOutput{})
}
