// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package streamanalytics

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FunctionJavaScriptUDFInputType struct {
	// The Data Type for the Input Argument of this JavaScript Function. Possible values include `array`, `any`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
	Type string `pulumi:"type"`
}

// FunctionJavaScriptUDFInputTypeInput is an input type that accepts FunctionJavaScriptUDFInputTypeArgs and FunctionJavaScriptUDFInputTypeOutput values.
// You can construct a concrete instance of `FunctionJavaScriptUDFInputTypeInput` via:
//
//          FunctionJavaScriptUDFInputTypeArgs{...}
type FunctionJavaScriptUDFInputTypeInput interface {
	pulumi.Input

	ToFunctionJavaScriptUDFInputTypeOutput() FunctionJavaScriptUDFInputTypeOutput
	ToFunctionJavaScriptUDFInputTypeOutputWithContext(context.Context) FunctionJavaScriptUDFInputTypeOutput
}

type FunctionJavaScriptUDFInputTypeArgs struct {
	// The Data Type for the Input Argument of this JavaScript Function. Possible values include `array`, `any`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FunctionJavaScriptUDFInputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionJavaScriptUDFInputType)(nil)).Elem()
}

func (i FunctionJavaScriptUDFInputTypeArgs) ToFunctionJavaScriptUDFInputTypeOutput() FunctionJavaScriptUDFInputTypeOutput {
	return i.ToFunctionJavaScriptUDFInputTypeOutputWithContext(context.Background())
}

func (i FunctionJavaScriptUDFInputTypeArgs) ToFunctionJavaScriptUDFInputTypeOutputWithContext(ctx context.Context) FunctionJavaScriptUDFInputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionJavaScriptUDFInputTypeOutput)
}

// FunctionJavaScriptUDFInputTypeArrayInput is an input type that accepts FunctionJavaScriptUDFInputTypeArray and FunctionJavaScriptUDFInputTypeArrayOutput values.
// You can construct a concrete instance of `FunctionJavaScriptUDFInputTypeArrayInput` via:
//
//          FunctionJavaScriptUDFInputTypeArray{ FunctionJavaScriptUDFInputTypeArgs{...} }
type FunctionJavaScriptUDFInputTypeArrayInput interface {
	pulumi.Input

	ToFunctionJavaScriptUDFInputTypeArrayOutput() FunctionJavaScriptUDFInputTypeArrayOutput
	ToFunctionJavaScriptUDFInputTypeArrayOutputWithContext(context.Context) FunctionJavaScriptUDFInputTypeArrayOutput
}

type FunctionJavaScriptUDFInputTypeArray []FunctionJavaScriptUDFInputTypeInput

func (FunctionJavaScriptUDFInputTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionJavaScriptUDFInputType)(nil)).Elem()
}

func (i FunctionJavaScriptUDFInputTypeArray) ToFunctionJavaScriptUDFInputTypeArrayOutput() FunctionJavaScriptUDFInputTypeArrayOutput {
	return i.ToFunctionJavaScriptUDFInputTypeArrayOutputWithContext(context.Background())
}

func (i FunctionJavaScriptUDFInputTypeArray) ToFunctionJavaScriptUDFInputTypeArrayOutputWithContext(ctx context.Context) FunctionJavaScriptUDFInputTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionJavaScriptUDFInputTypeArrayOutput)
}

type FunctionJavaScriptUDFInputTypeOutput struct{ *pulumi.OutputState }

func (FunctionJavaScriptUDFInputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionJavaScriptUDFInputType)(nil)).Elem()
}

func (o FunctionJavaScriptUDFInputTypeOutput) ToFunctionJavaScriptUDFInputTypeOutput() FunctionJavaScriptUDFInputTypeOutput {
	return o
}

func (o FunctionJavaScriptUDFInputTypeOutput) ToFunctionJavaScriptUDFInputTypeOutputWithContext(ctx context.Context) FunctionJavaScriptUDFInputTypeOutput {
	return o
}

// The Data Type for the Input Argument of this JavaScript Function. Possible values include `array`, `any`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
func (o FunctionJavaScriptUDFInputTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionJavaScriptUDFInputType) string { return v.Type }).(pulumi.StringOutput)
}

type FunctionJavaScriptUDFInputTypeArrayOutput struct{ *pulumi.OutputState }

func (FunctionJavaScriptUDFInputTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionJavaScriptUDFInputType)(nil)).Elem()
}

func (o FunctionJavaScriptUDFInputTypeArrayOutput) ToFunctionJavaScriptUDFInputTypeArrayOutput() FunctionJavaScriptUDFInputTypeArrayOutput {
	return o
}

func (o FunctionJavaScriptUDFInputTypeArrayOutput) ToFunctionJavaScriptUDFInputTypeArrayOutputWithContext(ctx context.Context) FunctionJavaScriptUDFInputTypeArrayOutput {
	return o
}

func (o FunctionJavaScriptUDFInputTypeArrayOutput) Index(i pulumi.IntInput) FunctionJavaScriptUDFInputTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FunctionJavaScriptUDFInputType {
		return vs[0].([]FunctionJavaScriptUDFInputType)[vs[1].(int)]
	}).(FunctionJavaScriptUDFInputTypeOutput)
}

type FunctionJavaScriptUDFOutputType struct {
	// The Data Type output from this JavaScript Function. Possible values include `array`, `any`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
	Type string `pulumi:"type"`
}

// FunctionJavaScriptUDFOutputTypeInput is an input type that accepts FunctionJavaScriptUDFOutputTypeArgs and FunctionJavaScriptUDFOutputTypeOutput values.
// You can construct a concrete instance of `FunctionJavaScriptUDFOutputTypeInput` via:
//
//          FunctionJavaScriptUDFOutputTypeArgs{...}
type FunctionJavaScriptUDFOutputTypeInput interface {
	pulumi.Input

	ToFunctionJavaScriptUDFOutputTypeOutput() FunctionJavaScriptUDFOutputTypeOutput
	ToFunctionJavaScriptUDFOutputTypeOutputWithContext(context.Context) FunctionJavaScriptUDFOutputTypeOutput
}

type FunctionJavaScriptUDFOutputTypeArgs struct {
	// The Data Type output from this JavaScript Function. Possible values include `array`, `any`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FunctionJavaScriptUDFOutputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionJavaScriptUDFOutputType)(nil)).Elem()
}

func (i FunctionJavaScriptUDFOutputTypeArgs) ToFunctionJavaScriptUDFOutputTypeOutput() FunctionJavaScriptUDFOutputTypeOutput {
	return i.ToFunctionJavaScriptUDFOutputTypeOutputWithContext(context.Background())
}

func (i FunctionJavaScriptUDFOutputTypeArgs) ToFunctionJavaScriptUDFOutputTypeOutputWithContext(ctx context.Context) FunctionJavaScriptUDFOutputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionJavaScriptUDFOutputTypeOutput)
}

type FunctionJavaScriptUDFOutputTypeOutput struct{ *pulumi.OutputState }

func (FunctionJavaScriptUDFOutputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionJavaScriptUDFOutputType)(nil)).Elem()
}

func (o FunctionJavaScriptUDFOutputTypeOutput) ToFunctionJavaScriptUDFOutputTypeOutput() FunctionJavaScriptUDFOutputTypeOutput {
	return o
}

func (o FunctionJavaScriptUDFOutputTypeOutput) ToFunctionJavaScriptUDFOutputTypeOutputWithContext(ctx context.Context) FunctionJavaScriptUDFOutputTypeOutput {
	return o
}

// The Data Type output from this JavaScript Function. Possible values include `array`, `any`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
func (o FunctionJavaScriptUDFOutputTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionJavaScriptUDFOutputType) string { return v.Type }).(pulumi.StringOutput)
}

type JobIdentity struct {
	// The ID of the Principal (Client) in Azure Active Directory.
	PrincipalId *string `pulumi:"principalId"`
	// The ID of the Azure Active Directory Tenant.
	TenantId *string `pulumi:"tenantId"`
	// The type of identity used for the Stream Analytics Job. Possible values are `SystemAssigned`.
	Type string `pulumi:"type"`
}

// JobIdentityInput is an input type that accepts JobIdentityArgs and JobIdentityOutput values.
// You can construct a concrete instance of `JobIdentityInput` via:
//
//          JobIdentityArgs{...}
type JobIdentityInput interface {
	pulumi.Input

	ToJobIdentityOutput() JobIdentityOutput
	ToJobIdentityOutputWithContext(context.Context) JobIdentityOutput
}

type JobIdentityArgs struct {
	// The ID of the Principal (Client) in Azure Active Directory.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The ID of the Azure Active Directory Tenant.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// The type of identity used for the Stream Analytics Job. Possible values are `SystemAssigned`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (JobIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobIdentity)(nil)).Elem()
}

func (i JobIdentityArgs) ToJobIdentityOutput() JobIdentityOutput {
	return i.ToJobIdentityOutputWithContext(context.Background())
}

func (i JobIdentityArgs) ToJobIdentityOutputWithContext(ctx context.Context) JobIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobIdentityOutput)
}

func (i JobIdentityArgs) ToJobIdentityPtrOutput() JobIdentityPtrOutput {
	return i.ToJobIdentityPtrOutputWithContext(context.Background())
}

func (i JobIdentityArgs) ToJobIdentityPtrOutputWithContext(ctx context.Context) JobIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobIdentityOutput).ToJobIdentityPtrOutputWithContext(ctx)
}

// JobIdentityPtrInput is an input type that accepts JobIdentityArgs, JobIdentityPtr and JobIdentityPtrOutput values.
// You can construct a concrete instance of `JobIdentityPtrInput` via:
//
//          JobIdentityArgs{...}
//
//  or:
//
//          nil
type JobIdentityPtrInput interface {
	pulumi.Input

	ToJobIdentityPtrOutput() JobIdentityPtrOutput
	ToJobIdentityPtrOutputWithContext(context.Context) JobIdentityPtrOutput
}

type jobIdentityPtrType JobIdentityArgs

func JobIdentityPtr(v *JobIdentityArgs) JobIdentityPtrInput {
	return (*jobIdentityPtrType)(v)
}

func (*jobIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobIdentity)(nil)).Elem()
}

func (i *jobIdentityPtrType) ToJobIdentityPtrOutput() JobIdentityPtrOutput {
	return i.ToJobIdentityPtrOutputWithContext(context.Background())
}

func (i *jobIdentityPtrType) ToJobIdentityPtrOutputWithContext(ctx context.Context) JobIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobIdentityPtrOutput)
}

type JobIdentityOutput struct{ *pulumi.OutputState }

func (JobIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobIdentity)(nil)).Elem()
}

func (o JobIdentityOutput) ToJobIdentityOutput() JobIdentityOutput {
	return o
}

func (o JobIdentityOutput) ToJobIdentityOutputWithContext(ctx context.Context) JobIdentityOutput {
	return o
}

func (o JobIdentityOutput) ToJobIdentityPtrOutput() JobIdentityPtrOutput {
	return o.ToJobIdentityPtrOutputWithContext(context.Background())
}

func (o JobIdentityOutput) ToJobIdentityPtrOutputWithContext(ctx context.Context) JobIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobIdentity) *JobIdentity {
		return &v
	}).(JobIdentityPtrOutput)
}

// The ID of the Principal (Client) in Azure Active Directory.
func (o JobIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The ID of the Azure Active Directory Tenant.
func (o JobIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The type of identity used for the Stream Analytics Job. Possible values are `SystemAssigned`.
func (o JobIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JobIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type JobIdentityPtrOutput struct{ *pulumi.OutputState }

func (JobIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobIdentity)(nil)).Elem()
}

func (o JobIdentityPtrOutput) ToJobIdentityPtrOutput() JobIdentityPtrOutput {
	return o
}

func (o JobIdentityPtrOutput) ToJobIdentityPtrOutputWithContext(ctx context.Context) JobIdentityPtrOutput {
	return o
}

func (o JobIdentityPtrOutput) Elem() JobIdentityOutput {
	return o.ApplyT(func(v *JobIdentity) JobIdentity {
		if v != nil {
			return *v
		}
		var ret JobIdentity
		return ret
	}).(JobIdentityOutput)
}

// The ID of the Principal (Client) in Azure Active Directory.
func (o JobIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The ID of the Azure Active Directory Tenant.
func (o JobIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The type of identity used for the Stream Analytics Job. Possible values are `SystemAssigned`.
func (o JobIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type OutputBlobSerialization struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	Encoding *string `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
	Format *string `pulumi:"format"`
	// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv`, `Json` and `Parquet`.
	Type string `pulumi:"type"`
}

// OutputBlobSerializationInput is an input type that accepts OutputBlobSerializationArgs and OutputBlobSerializationOutput values.
// You can construct a concrete instance of `OutputBlobSerializationInput` via:
//
//          OutputBlobSerializationArgs{...}
type OutputBlobSerializationInput interface {
	pulumi.Input

	ToOutputBlobSerializationOutput() OutputBlobSerializationOutput
	ToOutputBlobSerializationOutputWithContext(context.Context) OutputBlobSerializationOutput
}

type OutputBlobSerializationArgs struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv`, `Json` and `Parquet`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OutputBlobSerializationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputBlobSerialization)(nil)).Elem()
}

func (i OutputBlobSerializationArgs) ToOutputBlobSerializationOutput() OutputBlobSerializationOutput {
	return i.ToOutputBlobSerializationOutputWithContext(context.Background())
}

func (i OutputBlobSerializationArgs) ToOutputBlobSerializationOutputWithContext(ctx context.Context) OutputBlobSerializationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputBlobSerializationOutput)
}

type OutputBlobSerializationOutput struct{ *pulumi.OutputState }

func (OutputBlobSerializationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputBlobSerialization)(nil)).Elem()
}

func (o OutputBlobSerializationOutput) ToOutputBlobSerializationOutput() OutputBlobSerializationOutput {
	return o
}

func (o OutputBlobSerializationOutput) ToOutputBlobSerializationOutputWithContext(ctx context.Context) OutputBlobSerializationOutput {
	return o
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
func (o OutputBlobSerializationOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputBlobSerialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
func (o OutputBlobSerializationOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputBlobSerialization) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
func (o OutputBlobSerializationOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputBlobSerialization) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv`, `Json` and `Parquet`.
func (o OutputBlobSerializationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OutputBlobSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type OutputEventHubSerialization struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	Encoding *string `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
	Format *string `pulumi:"format"`
	// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
	Type string `pulumi:"type"`
}

// OutputEventHubSerializationInput is an input type that accepts OutputEventHubSerializationArgs and OutputEventHubSerializationOutput values.
// You can construct a concrete instance of `OutputEventHubSerializationInput` via:
//
//          OutputEventHubSerializationArgs{...}
type OutputEventHubSerializationInput interface {
	pulumi.Input

	ToOutputEventHubSerializationOutput() OutputEventHubSerializationOutput
	ToOutputEventHubSerializationOutputWithContext(context.Context) OutputEventHubSerializationOutput
}

type OutputEventHubSerializationArgs struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OutputEventHubSerializationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputEventHubSerialization)(nil)).Elem()
}

func (i OutputEventHubSerializationArgs) ToOutputEventHubSerializationOutput() OutputEventHubSerializationOutput {
	return i.ToOutputEventHubSerializationOutputWithContext(context.Background())
}

func (i OutputEventHubSerializationArgs) ToOutputEventHubSerializationOutputWithContext(ctx context.Context) OutputEventHubSerializationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputEventHubSerializationOutput)
}

type OutputEventHubSerializationOutput struct{ *pulumi.OutputState }

func (OutputEventHubSerializationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputEventHubSerialization)(nil)).Elem()
}

func (o OutputEventHubSerializationOutput) ToOutputEventHubSerializationOutput() OutputEventHubSerializationOutput {
	return o
}

func (o OutputEventHubSerializationOutput) ToOutputEventHubSerializationOutputWithContext(ctx context.Context) OutputEventHubSerializationOutput {
	return o
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
func (o OutputEventHubSerializationOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputEventHubSerialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
func (o OutputEventHubSerializationOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputEventHubSerialization) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
func (o OutputEventHubSerializationOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputEventHubSerialization) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
func (o OutputEventHubSerializationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OutputEventHubSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type OutputServiceBusQueueSerialization struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	Encoding *string `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
	Format *string `pulumi:"format"`
	// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
	Type string `pulumi:"type"`
}

// OutputServiceBusQueueSerializationInput is an input type that accepts OutputServiceBusQueueSerializationArgs and OutputServiceBusQueueSerializationOutput values.
// You can construct a concrete instance of `OutputServiceBusQueueSerializationInput` via:
//
//          OutputServiceBusQueueSerializationArgs{...}
type OutputServiceBusQueueSerializationInput interface {
	pulumi.Input

	ToOutputServiceBusQueueSerializationOutput() OutputServiceBusQueueSerializationOutput
	ToOutputServiceBusQueueSerializationOutputWithContext(context.Context) OutputServiceBusQueueSerializationOutput
}

type OutputServiceBusQueueSerializationArgs struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OutputServiceBusQueueSerializationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputServiceBusQueueSerialization)(nil)).Elem()
}

func (i OutputServiceBusQueueSerializationArgs) ToOutputServiceBusQueueSerializationOutput() OutputServiceBusQueueSerializationOutput {
	return i.ToOutputServiceBusQueueSerializationOutputWithContext(context.Background())
}

func (i OutputServiceBusQueueSerializationArgs) ToOutputServiceBusQueueSerializationOutputWithContext(ctx context.Context) OutputServiceBusQueueSerializationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputServiceBusQueueSerializationOutput)
}

type OutputServiceBusQueueSerializationOutput struct{ *pulumi.OutputState }

func (OutputServiceBusQueueSerializationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputServiceBusQueueSerialization)(nil)).Elem()
}

func (o OutputServiceBusQueueSerializationOutput) ToOutputServiceBusQueueSerializationOutput() OutputServiceBusQueueSerializationOutput {
	return o
}

func (o OutputServiceBusQueueSerializationOutput) ToOutputServiceBusQueueSerializationOutputWithContext(ctx context.Context) OutputServiceBusQueueSerializationOutput {
	return o
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
func (o OutputServiceBusQueueSerializationOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputServiceBusQueueSerialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
func (o OutputServiceBusQueueSerializationOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputServiceBusQueueSerialization) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
func (o OutputServiceBusQueueSerializationOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputServiceBusQueueSerialization) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
func (o OutputServiceBusQueueSerializationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OutputServiceBusQueueSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type OutputServicebusTopicSerialization struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	Encoding *string `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
	Format *string `pulumi:"format"`
	// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
	Type string `pulumi:"type"`
}

// OutputServicebusTopicSerializationInput is an input type that accepts OutputServicebusTopicSerializationArgs and OutputServicebusTopicSerializationOutput values.
// You can construct a concrete instance of `OutputServicebusTopicSerializationInput` via:
//
//          OutputServicebusTopicSerializationArgs{...}
type OutputServicebusTopicSerializationInput interface {
	pulumi.Input

	ToOutputServicebusTopicSerializationOutput() OutputServicebusTopicSerializationOutput
	ToOutputServicebusTopicSerializationOutputWithContext(context.Context) OutputServicebusTopicSerializationOutput
}

type OutputServicebusTopicSerializationArgs struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OutputServicebusTopicSerializationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputServicebusTopicSerialization)(nil)).Elem()
}

func (i OutputServicebusTopicSerializationArgs) ToOutputServicebusTopicSerializationOutput() OutputServicebusTopicSerializationOutput {
	return i.ToOutputServicebusTopicSerializationOutputWithContext(context.Background())
}

func (i OutputServicebusTopicSerializationArgs) ToOutputServicebusTopicSerializationOutputWithContext(ctx context.Context) OutputServicebusTopicSerializationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputServicebusTopicSerializationOutput)
}

type OutputServicebusTopicSerializationOutput struct{ *pulumi.OutputState }

func (OutputServicebusTopicSerializationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputServicebusTopicSerialization)(nil)).Elem()
}

func (o OutputServicebusTopicSerializationOutput) ToOutputServicebusTopicSerializationOutput() OutputServicebusTopicSerializationOutput {
	return o
}

func (o OutputServicebusTopicSerializationOutput) ToOutputServicebusTopicSerializationOutputWithContext(ctx context.Context) OutputServicebusTopicSerializationOutput {
	return o
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
func (o OutputServicebusTopicSerializationOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputServicebusTopicSerialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
func (o OutputServicebusTopicSerializationOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputServicebusTopicSerialization) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
func (o OutputServicebusTopicSerializationOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputServicebusTopicSerialization) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
func (o OutputServicebusTopicSerializationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OutputServicebusTopicSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type ReferenceInputBlobSerialization struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	Encoding *string `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// The serialization format used for the reference data. Possible values are `Avro`, `Csv` and `Json`.
	Type string `pulumi:"type"`
}

// ReferenceInputBlobSerializationInput is an input type that accepts ReferenceInputBlobSerializationArgs and ReferenceInputBlobSerializationOutput values.
// You can construct a concrete instance of `ReferenceInputBlobSerializationInput` via:
//
//          ReferenceInputBlobSerializationArgs{...}
type ReferenceInputBlobSerializationInput interface {
	pulumi.Input

	ToReferenceInputBlobSerializationOutput() ReferenceInputBlobSerializationOutput
	ToReferenceInputBlobSerializationOutputWithContext(context.Context) ReferenceInputBlobSerializationOutput
}

type ReferenceInputBlobSerializationArgs struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// The serialization format used for the reference data. Possible values are `Avro`, `Csv` and `Json`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ReferenceInputBlobSerializationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceInputBlobSerialization)(nil)).Elem()
}

func (i ReferenceInputBlobSerializationArgs) ToReferenceInputBlobSerializationOutput() ReferenceInputBlobSerializationOutput {
	return i.ToReferenceInputBlobSerializationOutputWithContext(context.Background())
}

func (i ReferenceInputBlobSerializationArgs) ToReferenceInputBlobSerializationOutputWithContext(ctx context.Context) ReferenceInputBlobSerializationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceInputBlobSerializationOutput)
}

type ReferenceInputBlobSerializationOutput struct{ *pulumi.OutputState }

func (ReferenceInputBlobSerializationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceInputBlobSerialization)(nil)).Elem()
}

func (o ReferenceInputBlobSerializationOutput) ToReferenceInputBlobSerializationOutput() ReferenceInputBlobSerializationOutput {
	return o
}

func (o ReferenceInputBlobSerializationOutput) ToReferenceInputBlobSerializationOutputWithContext(ctx context.Context) ReferenceInputBlobSerializationOutput {
	return o
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
func (o ReferenceInputBlobSerializationOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceInputBlobSerialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
func (o ReferenceInputBlobSerializationOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceInputBlobSerialization) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// The serialization format used for the reference data. Possible values are `Avro`, `Csv` and `Json`.
func (o ReferenceInputBlobSerializationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ReferenceInputBlobSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type StreamInputBlobSerialization struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	Encoding *string `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
	Type string `pulumi:"type"`
}

// StreamInputBlobSerializationInput is an input type that accepts StreamInputBlobSerializationArgs and StreamInputBlobSerializationOutput values.
// You can construct a concrete instance of `StreamInputBlobSerializationInput` via:
//
//          StreamInputBlobSerializationArgs{...}
type StreamInputBlobSerializationInput interface {
	pulumi.Input

	ToStreamInputBlobSerializationOutput() StreamInputBlobSerializationOutput
	ToStreamInputBlobSerializationOutputWithContext(context.Context) StreamInputBlobSerializationOutput
}

type StreamInputBlobSerializationArgs struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (StreamInputBlobSerializationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamInputBlobSerialization)(nil)).Elem()
}

func (i StreamInputBlobSerializationArgs) ToStreamInputBlobSerializationOutput() StreamInputBlobSerializationOutput {
	return i.ToStreamInputBlobSerializationOutputWithContext(context.Background())
}

func (i StreamInputBlobSerializationArgs) ToStreamInputBlobSerializationOutputWithContext(ctx context.Context) StreamInputBlobSerializationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInputBlobSerializationOutput)
}

type StreamInputBlobSerializationOutput struct{ *pulumi.OutputState }

func (StreamInputBlobSerializationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamInputBlobSerialization)(nil)).Elem()
}

func (o StreamInputBlobSerializationOutput) ToStreamInputBlobSerializationOutput() StreamInputBlobSerializationOutput {
	return o
}

func (o StreamInputBlobSerializationOutput) ToStreamInputBlobSerializationOutputWithContext(ctx context.Context) StreamInputBlobSerializationOutput {
	return o
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
func (o StreamInputBlobSerializationOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamInputBlobSerialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
func (o StreamInputBlobSerializationOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamInputBlobSerialization) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
func (o StreamInputBlobSerializationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StreamInputBlobSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type StreamInputEventHubSerialization struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	Encoding *string `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
	Type string `pulumi:"type"`
}

// StreamInputEventHubSerializationInput is an input type that accepts StreamInputEventHubSerializationArgs and StreamInputEventHubSerializationOutput values.
// You can construct a concrete instance of `StreamInputEventHubSerializationInput` via:
//
//          StreamInputEventHubSerializationArgs{...}
type StreamInputEventHubSerializationInput interface {
	pulumi.Input

	ToStreamInputEventHubSerializationOutput() StreamInputEventHubSerializationOutput
	ToStreamInputEventHubSerializationOutputWithContext(context.Context) StreamInputEventHubSerializationOutput
}

type StreamInputEventHubSerializationArgs struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (StreamInputEventHubSerializationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamInputEventHubSerialization)(nil)).Elem()
}

func (i StreamInputEventHubSerializationArgs) ToStreamInputEventHubSerializationOutput() StreamInputEventHubSerializationOutput {
	return i.ToStreamInputEventHubSerializationOutputWithContext(context.Background())
}

func (i StreamInputEventHubSerializationArgs) ToStreamInputEventHubSerializationOutputWithContext(ctx context.Context) StreamInputEventHubSerializationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInputEventHubSerializationOutput)
}

type StreamInputEventHubSerializationOutput struct{ *pulumi.OutputState }

func (StreamInputEventHubSerializationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamInputEventHubSerialization)(nil)).Elem()
}

func (o StreamInputEventHubSerializationOutput) ToStreamInputEventHubSerializationOutput() StreamInputEventHubSerializationOutput {
	return o
}

func (o StreamInputEventHubSerializationOutput) ToStreamInputEventHubSerializationOutputWithContext(ctx context.Context) StreamInputEventHubSerializationOutput {
	return o
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
func (o StreamInputEventHubSerializationOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamInputEventHubSerialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
func (o StreamInputEventHubSerializationOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamInputEventHubSerialization) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
func (o StreamInputEventHubSerializationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StreamInputEventHubSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type StreamInputIotHubSerialization struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	Encoding *string `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
	Type string `pulumi:"type"`
}

// StreamInputIotHubSerializationInput is an input type that accepts StreamInputIotHubSerializationArgs and StreamInputIotHubSerializationOutput values.
// You can construct a concrete instance of `StreamInputIotHubSerializationInput` via:
//
//          StreamInputIotHubSerializationArgs{...}
type StreamInputIotHubSerializationInput interface {
	pulumi.Input

	ToStreamInputIotHubSerializationOutput() StreamInputIotHubSerializationOutput
	ToStreamInputIotHubSerializationOutputWithContext(context.Context) StreamInputIotHubSerializationOutput
}

type StreamInputIotHubSerializationArgs struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (StreamInputIotHubSerializationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamInputIotHubSerialization)(nil)).Elem()
}

func (i StreamInputIotHubSerializationArgs) ToStreamInputIotHubSerializationOutput() StreamInputIotHubSerializationOutput {
	return i.ToStreamInputIotHubSerializationOutputWithContext(context.Background())
}

func (i StreamInputIotHubSerializationArgs) ToStreamInputIotHubSerializationOutputWithContext(ctx context.Context) StreamInputIotHubSerializationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInputIotHubSerializationOutput)
}

type StreamInputIotHubSerializationOutput struct{ *pulumi.OutputState }

func (StreamInputIotHubSerializationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamInputIotHubSerialization)(nil)).Elem()
}

func (o StreamInputIotHubSerializationOutput) ToStreamInputIotHubSerializationOutput() StreamInputIotHubSerializationOutput {
	return o
}

func (o StreamInputIotHubSerializationOutput) ToStreamInputIotHubSerializationOutputWithContext(ctx context.Context) StreamInputIotHubSerializationOutput {
	return o
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
func (o StreamInputIotHubSerializationOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamInputIotHubSerialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
func (o StreamInputIotHubSerializationOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamInputIotHubSerialization) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
func (o StreamInputIotHubSerializationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StreamInputIotHubSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type GetJobIdentity struct {
	// The ID of the Principal (Client) in Azure Active Directory.
	PrincipalId string `pulumi:"principalId"`
	// The ID of the Azure Active Directory Tenant.
	TenantId string `pulumi:"tenantId"`
	// The type of identity used for the Stream Analytics Job.
	Type string `pulumi:"type"`
}

// GetJobIdentityInput is an input type that accepts GetJobIdentityArgs and GetJobIdentityOutput values.
// You can construct a concrete instance of `GetJobIdentityInput` via:
//
//          GetJobIdentityArgs{...}
type GetJobIdentityInput interface {
	pulumi.Input

	ToGetJobIdentityOutput() GetJobIdentityOutput
	ToGetJobIdentityOutputWithContext(context.Context) GetJobIdentityOutput
}

type GetJobIdentityArgs struct {
	// The ID of the Principal (Client) in Azure Active Directory.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The ID of the Azure Active Directory Tenant.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The type of identity used for the Stream Analytics Job.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetJobIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobIdentity)(nil)).Elem()
}

func (i GetJobIdentityArgs) ToGetJobIdentityOutput() GetJobIdentityOutput {
	return i.ToGetJobIdentityOutputWithContext(context.Background())
}

func (i GetJobIdentityArgs) ToGetJobIdentityOutputWithContext(ctx context.Context) GetJobIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobIdentityOutput)
}

// GetJobIdentityArrayInput is an input type that accepts GetJobIdentityArray and GetJobIdentityArrayOutput values.
// You can construct a concrete instance of `GetJobIdentityArrayInput` via:
//
//          GetJobIdentityArray{ GetJobIdentityArgs{...} }
type GetJobIdentityArrayInput interface {
	pulumi.Input

	ToGetJobIdentityArrayOutput() GetJobIdentityArrayOutput
	ToGetJobIdentityArrayOutputWithContext(context.Context) GetJobIdentityArrayOutput
}

type GetJobIdentityArray []GetJobIdentityInput

func (GetJobIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobIdentity)(nil)).Elem()
}

func (i GetJobIdentityArray) ToGetJobIdentityArrayOutput() GetJobIdentityArrayOutput {
	return i.ToGetJobIdentityArrayOutputWithContext(context.Background())
}

func (i GetJobIdentityArray) ToGetJobIdentityArrayOutputWithContext(ctx context.Context) GetJobIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetJobIdentityArrayOutput)
}

type GetJobIdentityOutput struct{ *pulumi.OutputState }

func (GetJobIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobIdentity)(nil)).Elem()
}

func (o GetJobIdentityOutput) ToGetJobIdentityOutput() GetJobIdentityOutput {
	return o
}

func (o GetJobIdentityOutput) ToGetJobIdentityOutputWithContext(ctx context.Context) GetJobIdentityOutput {
	return o
}

// The ID of the Principal (Client) in Azure Active Directory.
func (o GetJobIdentityOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobIdentity) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The ID of the Azure Active Directory Tenant.
func (o GetJobIdentityOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobIdentity) string { return v.TenantId }).(pulumi.StringOutput)
}

// The type of identity used for the Stream Analytics Job.
func (o GetJobIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetJobIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type GetJobIdentityArrayOutput struct{ *pulumi.OutputState }

func (GetJobIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetJobIdentity)(nil)).Elem()
}

func (o GetJobIdentityArrayOutput) ToGetJobIdentityArrayOutput() GetJobIdentityArrayOutput {
	return o
}

func (o GetJobIdentityArrayOutput) ToGetJobIdentityArrayOutputWithContext(ctx context.Context) GetJobIdentityArrayOutput {
	return o
}

func (o GetJobIdentityArrayOutput) Index(i pulumi.IntInput) GetJobIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetJobIdentity {
		return vs[0].([]GetJobIdentity)[vs[1].(int)]
	}).(GetJobIdentityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionJavaScriptUDFInputTypeInput)(nil)).Elem(), FunctionJavaScriptUDFInputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionJavaScriptUDFInputTypeArrayInput)(nil)).Elem(), FunctionJavaScriptUDFInputTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionJavaScriptUDFOutputTypeInput)(nil)).Elem(), FunctionJavaScriptUDFOutputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobIdentityInput)(nil)).Elem(), JobIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobIdentityPtrInput)(nil)).Elem(), JobIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OutputBlobSerializationInput)(nil)).Elem(), OutputBlobSerializationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OutputEventHubSerializationInput)(nil)).Elem(), OutputEventHubSerializationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OutputServiceBusQueueSerializationInput)(nil)).Elem(), OutputServiceBusQueueSerializationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OutputServicebusTopicSerializationInput)(nil)).Elem(), OutputServicebusTopicSerializationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceInputBlobSerializationInput)(nil)).Elem(), ReferenceInputBlobSerializationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamInputBlobSerializationInput)(nil)).Elem(), StreamInputBlobSerializationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamInputEventHubSerializationInput)(nil)).Elem(), StreamInputEventHubSerializationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamInputIotHubSerializationInput)(nil)).Elem(), StreamInputIotHubSerializationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobIdentityInput)(nil)).Elem(), GetJobIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetJobIdentityArrayInput)(nil)).Elem(), GetJobIdentityArray{})
	pulumi.RegisterOutputType(FunctionJavaScriptUDFInputTypeOutput{})
	pulumi.RegisterOutputType(FunctionJavaScriptUDFInputTypeArrayOutput{})
	pulumi.RegisterOutputType(FunctionJavaScriptUDFOutputTypeOutput{})
	pulumi.RegisterOutputType(JobIdentityOutput{})
	pulumi.RegisterOutputType(JobIdentityPtrOutput{})
	pulumi.RegisterOutputType(OutputBlobSerializationOutput{})
	pulumi.RegisterOutputType(OutputEventHubSerializationOutput{})
	pulumi.RegisterOutputType(OutputServiceBusQueueSerializationOutput{})
	pulumi.RegisterOutputType(OutputServicebusTopicSerializationOutput{})
	pulumi.RegisterOutputType(ReferenceInputBlobSerializationOutput{})
	pulumi.RegisterOutputType(StreamInputBlobSerializationOutput{})
	pulumi.RegisterOutputType(StreamInputEventHubSerializationOutput{})
	pulumi.RegisterOutputType(StreamInputIotHubSerializationOutput{})
	pulumi.RegisterOutputType(GetJobIdentityOutput{})
	pulumi.RegisterOutputType(GetJobIdentityArrayOutput{})
}
