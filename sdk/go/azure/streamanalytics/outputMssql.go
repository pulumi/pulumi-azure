// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package streamanalytics

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Stream Analytics Output to Microsoft SQL Server Database.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/sql"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/streamanalytics"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleJob := streamanalytics.LookupJobOutput(ctx, streamanalytics.GetJobOutputArgs{
//				Name:              pulumi.String("example-job"),
//				ResourceGroupName: exampleResourceGroup.Name,
//			}, nil)
//			exampleSqlServer, err := sql.NewSqlServer(ctx, "exampleSqlServer", &sql.SqlServerArgs{
//				ResourceGroupName:          exampleResourceGroup.Name,
//				Location:                   exampleResourceGroup.Location,
//				Version:                    pulumi.String("12.0"),
//				AdministratorLogin:         pulumi.String("dbadmin"),
//				AdministratorLoginPassword: pulumi.String("example-password"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleDatabase, err := sql.NewDatabase(ctx, "exampleDatabase", &sql.DatabaseArgs{
//				ResourceGroupName:             exampleResourceGroup.Name,
//				Location:                      exampleResourceGroup.Location,
//				ServerName:                    exampleSqlServer.Name,
//				RequestedServiceObjectiveName: pulumi.String("S0"),
//				Collation:                     pulumi.String("SQL_LATIN1_GENERAL_CP1_CI_AS"),
//				MaxSizeBytes:                  pulumi.String("268435456000"),
//				CreateMode:                    pulumi.String("Default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = streamanalytics.NewOutputMssql(ctx, "exampleOutputMssql", &streamanalytics.OutputMssqlArgs{
//				StreamAnalyticsJobName: exampleJob.ApplyT(func(exampleJob streamanalytics.GetJobResult) (*string, error) {
//					return &exampleJob.Name, nil
//				}).(pulumi.StringPtrOutput),
//				ResourceGroupName: exampleJob.ApplyT(func(exampleJob streamanalytics.GetJobResult) (*string, error) {
//					return &exampleJob.ResourceGroupName, nil
//				}).(pulumi.StringPtrOutput),
//				Server:   exampleSqlServer.FullyQualifiedDomainName,
//				User:     exampleSqlServer.AdministratorLogin,
//				Password: exampleSqlServer.AdministratorLoginPassword,
//				Database: exampleDatabase.Name,
//				Table:    pulumi.String("ExampleTable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Stream Analytics Outputs to Microsoft SQL Server Database can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:streamanalytics/outputMssql:OutputMssql example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.StreamAnalytics/streamingJobs/job1/outputs/output1
//
// ```
type OutputMssql struct {
	pulumi.CustomResourceState

	// The authentication mode for the Stream Output. Possible values are `Msi` and `ConnectionString`. Defaults to `ConnectionString`.
	AuthenticationMode pulumi.StringPtrOutput `pulumi:"authenticationMode"`
	// The MS SQL database name where the reference table exists. Changing this forces a new resource to be created.
	Database pulumi.StringOutput `pulumi:"database"`
	// The max batch count to write to the SQL Database. Defaults to `10000`. Possible values are between `1` and `1073741824`.
	MaxBatchCount pulumi.Float64PtrOutput `pulumi:"maxBatchCount"`
	// The max writer count for the SQL Database. Defaults to `1`. Possible values are `0` which bases the writer count on the query partition and `1` which corresponds to a single writer.
	MaxWriterCount pulumi.Float64PtrOutput `pulumi:"maxWriterCount"`
	// The name of the Stream Output. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Password used together with username, to login to the Microsoft SQL Server. Required if `authenticationMode` is `ConnectionString`.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The SQL server url. Changing this forces a new resource to be created.
	Server pulumi.StringOutput `pulumi:"server"`
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobName pulumi.StringOutput `pulumi:"streamAnalyticsJobName"`
	// Table in the database that the output points to. Changing this forces a new resource to be created.
	Table pulumi.StringOutput `pulumi:"table"`
	// Username used to login to the Microsoft SQL Server. Changing this forces a new resource to be created. Required if `authenticationMode` is `ConnectionString`.
	User pulumi.StringPtrOutput `pulumi:"user"`
}

// NewOutputMssql registers a new resource with the given unique name, arguments, and options.
func NewOutputMssql(ctx *pulumi.Context,
	name string, args *OutputMssqlArgs, opts ...pulumi.ResourceOption) (*OutputMssql, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Server == nil {
		return nil, errors.New("invalid value for required argument 'Server'")
	}
	if args.StreamAnalyticsJobName == nil {
		return nil, errors.New("invalid value for required argument 'StreamAnalyticsJobName'")
	}
	if args.Table == nil {
		return nil, errors.New("invalid value for required argument 'Table'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OutputMssql
	err := ctx.RegisterResource("azure:streamanalytics/outputMssql:OutputMssql", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOutputMssql gets an existing OutputMssql resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOutputMssql(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OutputMssqlState, opts ...pulumi.ResourceOption) (*OutputMssql, error) {
	var resource OutputMssql
	err := ctx.ReadResource("azure:streamanalytics/outputMssql:OutputMssql", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OutputMssql resources.
type outputMssqlState struct {
	// The authentication mode for the Stream Output. Possible values are `Msi` and `ConnectionString`. Defaults to `ConnectionString`.
	AuthenticationMode *string `pulumi:"authenticationMode"`
	// The MS SQL database name where the reference table exists. Changing this forces a new resource to be created.
	Database *string `pulumi:"database"`
	// The max batch count to write to the SQL Database. Defaults to `10000`. Possible values are between `1` and `1073741824`.
	MaxBatchCount *float64 `pulumi:"maxBatchCount"`
	// The max writer count for the SQL Database. Defaults to `1`. Possible values are `0` which bases the writer count on the query partition and `1` which corresponds to a single writer.
	MaxWriterCount *float64 `pulumi:"maxWriterCount"`
	// The name of the Stream Output. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Password used together with username, to login to the Microsoft SQL Server. Required if `authenticationMode` is `ConnectionString`.
	Password *string `pulumi:"password"`
	// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The SQL server url. Changing this forces a new resource to be created.
	Server *string `pulumi:"server"`
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobName *string `pulumi:"streamAnalyticsJobName"`
	// Table in the database that the output points to. Changing this forces a new resource to be created.
	Table *string `pulumi:"table"`
	// Username used to login to the Microsoft SQL Server. Changing this forces a new resource to be created. Required if `authenticationMode` is `ConnectionString`.
	User *string `pulumi:"user"`
}

type OutputMssqlState struct {
	// The authentication mode for the Stream Output. Possible values are `Msi` and `ConnectionString`. Defaults to `ConnectionString`.
	AuthenticationMode pulumi.StringPtrInput
	// The MS SQL database name where the reference table exists. Changing this forces a new resource to be created.
	Database pulumi.StringPtrInput
	// The max batch count to write to the SQL Database. Defaults to `10000`. Possible values are between `1` and `1073741824`.
	MaxBatchCount pulumi.Float64PtrInput
	// The max writer count for the SQL Database. Defaults to `1`. Possible values are `0` which bases the writer count on the query partition and `1` which corresponds to a single writer.
	MaxWriterCount pulumi.Float64PtrInput
	// The name of the Stream Output. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Password used together with username, to login to the Microsoft SQL Server. Required if `authenticationMode` is `ConnectionString`.
	Password pulumi.StringPtrInput
	// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The SQL server url. Changing this forces a new resource to be created.
	Server pulumi.StringPtrInput
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobName pulumi.StringPtrInput
	// Table in the database that the output points to. Changing this forces a new resource to be created.
	Table pulumi.StringPtrInput
	// Username used to login to the Microsoft SQL Server. Changing this forces a new resource to be created. Required if `authenticationMode` is `ConnectionString`.
	User pulumi.StringPtrInput
}

func (OutputMssqlState) ElementType() reflect.Type {
	return reflect.TypeOf((*outputMssqlState)(nil)).Elem()
}

type outputMssqlArgs struct {
	// The authentication mode for the Stream Output. Possible values are `Msi` and `ConnectionString`. Defaults to `ConnectionString`.
	AuthenticationMode *string `pulumi:"authenticationMode"`
	// The MS SQL database name where the reference table exists. Changing this forces a new resource to be created.
	Database string `pulumi:"database"`
	// The max batch count to write to the SQL Database. Defaults to `10000`. Possible values are between `1` and `1073741824`.
	MaxBatchCount *float64 `pulumi:"maxBatchCount"`
	// The max writer count for the SQL Database. Defaults to `1`. Possible values are `0` which bases the writer count on the query partition and `1` which corresponds to a single writer.
	MaxWriterCount *float64 `pulumi:"maxWriterCount"`
	// The name of the Stream Output. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Password used together with username, to login to the Microsoft SQL Server. Required if `authenticationMode` is `ConnectionString`.
	Password *string `pulumi:"password"`
	// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The SQL server url. Changing this forces a new resource to be created.
	Server string `pulumi:"server"`
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobName string `pulumi:"streamAnalyticsJobName"`
	// Table in the database that the output points to. Changing this forces a new resource to be created.
	Table string `pulumi:"table"`
	// Username used to login to the Microsoft SQL Server. Changing this forces a new resource to be created. Required if `authenticationMode` is `ConnectionString`.
	User *string `pulumi:"user"`
}

// The set of arguments for constructing a OutputMssql resource.
type OutputMssqlArgs struct {
	// The authentication mode for the Stream Output. Possible values are `Msi` and `ConnectionString`. Defaults to `ConnectionString`.
	AuthenticationMode pulumi.StringPtrInput
	// The MS SQL database name where the reference table exists. Changing this forces a new resource to be created.
	Database pulumi.StringInput
	// The max batch count to write to the SQL Database. Defaults to `10000`. Possible values are between `1` and `1073741824`.
	MaxBatchCount pulumi.Float64PtrInput
	// The max writer count for the SQL Database. Defaults to `1`. Possible values are `0` which bases the writer count on the query partition and `1` which corresponds to a single writer.
	MaxWriterCount pulumi.Float64PtrInput
	// The name of the Stream Output. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Password used together with username, to login to the Microsoft SQL Server. Required if `authenticationMode` is `ConnectionString`.
	Password pulumi.StringPtrInput
	// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// The SQL server url. Changing this forces a new resource to be created.
	Server pulumi.StringInput
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobName pulumi.StringInput
	// Table in the database that the output points to. Changing this forces a new resource to be created.
	Table pulumi.StringInput
	// Username used to login to the Microsoft SQL Server. Changing this forces a new resource to be created. Required if `authenticationMode` is `ConnectionString`.
	User pulumi.StringPtrInput
}

func (OutputMssqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*outputMssqlArgs)(nil)).Elem()
}

type OutputMssqlInput interface {
	pulumi.Input

	ToOutputMssqlOutput() OutputMssqlOutput
	ToOutputMssqlOutputWithContext(ctx context.Context) OutputMssqlOutput
}

func (*OutputMssql) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputMssql)(nil)).Elem()
}

func (i *OutputMssql) ToOutputMssqlOutput() OutputMssqlOutput {
	return i.ToOutputMssqlOutputWithContext(context.Background())
}

func (i *OutputMssql) ToOutputMssqlOutputWithContext(ctx context.Context) OutputMssqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputMssqlOutput)
}

// OutputMssqlArrayInput is an input type that accepts OutputMssqlArray and OutputMssqlArrayOutput values.
// You can construct a concrete instance of `OutputMssqlArrayInput` via:
//
//	OutputMssqlArray{ OutputMssqlArgs{...} }
type OutputMssqlArrayInput interface {
	pulumi.Input

	ToOutputMssqlArrayOutput() OutputMssqlArrayOutput
	ToOutputMssqlArrayOutputWithContext(context.Context) OutputMssqlArrayOutput
}

type OutputMssqlArray []OutputMssqlInput

func (OutputMssqlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OutputMssql)(nil)).Elem()
}

func (i OutputMssqlArray) ToOutputMssqlArrayOutput() OutputMssqlArrayOutput {
	return i.ToOutputMssqlArrayOutputWithContext(context.Background())
}

func (i OutputMssqlArray) ToOutputMssqlArrayOutputWithContext(ctx context.Context) OutputMssqlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputMssqlArrayOutput)
}

// OutputMssqlMapInput is an input type that accepts OutputMssqlMap and OutputMssqlMapOutput values.
// You can construct a concrete instance of `OutputMssqlMapInput` via:
//
//	OutputMssqlMap{ "key": OutputMssqlArgs{...} }
type OutputMssqlMapInput interface {
	pulumi.Input

	ToOutputMssqlMapOutput() OutputMssqlMapOutput
	ToOutputMssqlMapOutputWithContext(context.Context) OutputMssqlMapOutput
}

type OutputMssqlMap map[string]OutputMssqlInput

func (OutputMssqlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OutputMssql)(nil)).Elem()
}

func (i OutputMssqlMap) ToOutputMssqlMapOutput() OutputMssqlMapOutput {
	return i.ToOutputMssqlMapOutputWithContext(context.Background())
}

func (i OutputMssqlMap) ToOutputMssqlMapOutputWithContext(ctx context.Context) OutputMssqlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputMssqlMapOutput)
}

type OutputMssqlOutput struct{ *pulumi.OutputState }

func (OutputMssqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputMssql)(nil)).Elem()
}

func (o OutputMssqlOutput) ToOutputMssqlOutput() OutputMssqlOutput {
	return o
}

func (o OutputMssqlOutput) ToOutputMssqlOutputWithContext(ctx context.Context) OutputMssqlOutput {
	return o
}

// The authentication mode for the Stream Output. Possible values are `Msi` and `ConnectionString`. Defaults to `ConnectionString`.
func (o OutputMssqlOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputMssql) pulumi.StringPtrOutput { return v.AuthenticationMode }).(pulumi.StringPtrOutput)
}

// The MS SQL database name where the reference table exists. Changing this forces a new resource to be created.
func (o OutputMssqlOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *OutputMssql) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

// The max batch count to write to the SQL Database. Defaults to `10000`. Possible values are between `1` and `1073741824`.
func (o OutputMssqlOutput) MaxBatchCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *OutputMssql) pulumi.Float64PtrOutput { return v.MaxBatchCount }).(pulumi.Float64PtrOutput)
}

// The max writer count for the SQL Database. Defaults to `1`. Possible values are `0` which bases the writer count on the query partition and `1` which corresponds to a single writer.
func (o OutputMssqlOutput) MaxWriterCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *OutputMssql) pulumi.Float64PtrOutput { return v.MaxWriterCount }).(pulumi.Float64PtrOutput)
}

// The name of the Stream Output. Changing this forces a new resource to be created.
func (o OutputMssqlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OutputMssql) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Password used together with username, to login to the Microsoft SQL Server. Required if `authenticationMode` is `ConnectionString`.
func (o OutputMssqlOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputMssql) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
func (o OutputMssqlOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *OutputMssql) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The SQL server url. Changing this forces a new resource to be created.
func (o OutputMssqlOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v *OutputMssql) pulumi.StringOutput { return v.Server }).(pulumi.StringOutput)
}

// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
func (o OutputMssqlOutput) StreamAnalyticsJobName() pulumi.StringOutput {
	return o.ApplyT(func(v *OutputMssql) pulumi.StringOutput { return v.StreamAnalyticsJobName }).(pulumi.StringOutput)
}

// Table in the database that the output points to. Changing this forces a new resource to be created.
func (o OutputMssqlOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v *OutputMssql) pulumi.StringOutput { return v.Table }).(pulumi.StringOutput)
}

// Username used to login to the Microsoft SQL Server. Changing this forces a new resource to be created. Required if `authenticationMode` is `ConnectionString`.
func (o OutputMssqlOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputMssql) pulumi.StringPtrOutput { return v.User }).(pulumi.StringPtrOutput)
}

type OutputMssqlArrayOutput struct{ *pulumi.OutputState }

func (OutputMssqlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OutputMssql)(nil)).Elem()
}

func (o OutputMssqlArrayOutput) ToOutputMssqlArrayOutput() OutputMssqlArrayOutput {
	return o
}

func (o OutputMssqlArrayOutput) ToOutputMssqlArrayOutputWithContext(ctx context.Context) OutputMssqlArrayOutput {
	return o
}

func (o OutputMssqlArrayOutput) Index(i pulumi.IntInput) OutputMssqlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OutputMssql {
		return vs[0].([]*OutputMssql)[vs[1].(int)]
	}).(OutputMssqlOutput)
}

type OutputMssqlMapOutput struct{ *pulumi.OutputState }

func (OutputMssqlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OutputMssql)(nil)).Elem()
}

func (o OutputMssqlMapOutput) ToOutputMssqlMapOutput() OutputMssqlMapOutput {
	return o
}

func (o OutputMssqlMapOutput) ToOutputMssqlMapOutputWithContext(ctx context.Context) OutputMssqlMapOutput {
	return o
}

func (o OutputMssqlMapOutput) MapIndex(k pulumi.StringInput) OutputMssqlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OutputMssql {
		return vs[0].(map[string]*OutputMssql)[vs[1].(string)]
	}).(OutputMssqlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OutputMssqlInput)(nil)).Elem(), &OutputMssql{})
	pulumi.RegisterInputType(reflect.TypeOf((*OutputMssqlArrayInput)(nil)).Elem(), OutputMssqlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OutputMssqlMapInput)(nil)).Elem(), OutputMssqlMap{})
	pulumi.RegisterOutputType(OutputMssqlOutput{})
	pulumi.RegisterOutputType(OutputMssqlArrayOutput{})
	pulumi.RegisterOutputType(OutputMssqlMapOutput{})
}
