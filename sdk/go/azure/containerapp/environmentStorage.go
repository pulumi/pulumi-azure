// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containerapp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Container App Environment Storage.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/containerapp"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/operationalinsights"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAnalyticsWorkspace, err := operationalinsights.NewAnalyticsWorkspace(ctx, "exampleAnalyticsWorkspace", &operationalinsights.AnalyticsWorkspaceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku:               pulumi.String("PerGB2018"),
//				RetentionInDays:   pulumi.Int(30),
//			})
//			if err != nil {
//				return err
//			}
//			exampleEnvironment, err := containerapp.NewEnvironment(ctx, "exampleEnvironment", &containerapp.EnvironmentArgs{
//				Location:                exampleResourceGroup.Location,
//				ResourceGroupName:       exampleResourceGroup.Name,
//				LogAnalyticsWorkspaceId: exampleAnalyticsWorkspace.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Location:               exampleResourceGroup.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("LRS"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleShare, err := storage.NewShare(ctx, "exampleShare", &storage.ShareArgs{
//				StorageAccountName: exampleAccount.Name,
//				Quota:              pulumi.Int(5),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = containerapp.NewEnvironmentStorage(ctx, "exampleEnvironmentStorage", &containerapp.EnvironmentStorageArgs{
//				ContainerAppEnvironmentId: exampleEnvironment.ID(),
//				AccountName:               exampleAccount.Name,
//				ShareName:                 exampleShare.Name,
//				AccessKey:                 exampleAccount.PrimaryAccessKey,
//				AccessMode:                pulumi.String("ReadOnly"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// A Container App Environment Storage can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:containerapp/environmentStorage:EnvironmentStorage example "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.App/managedEnvironments/myEnvironment/storages/mystorage"
//
// ```
type EnvironmentStorage struct {
	pulumi.CustomResourceState

	// The Storage Account Access Key.
	AccessKey pulumi.StringOutput `pulumi:"accessKey"`
	// The access mode to connect this storage to the Container App. Possible values include `ReadOnly` and `ReadWrite`. Changing this forces a new resource to be created.
	AccessMode pulumi.StringOutput `pulumi:"accessMode"`
	// The Azure Storage Account in which the Share to be used is located. Changing this forces a new resource to be created.
	AccountName pulumi.StringOutput `pulumi:"accountName"`
	// The ID of the Container App Environment to which this storage belongs. Changing this forces a new resource to be created.
	ContainerAppEnvironmentId pulumi.StringOutput `pulumi:"containerAppEnvironmentId"`
	// The name for this Container App Environment Storage. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Azure Storage Share to use. Changing this forces a new resource to be created.
	ShareName pulumi.StringOutput `pulumi:"shareName"`
}

// NewEnvironmentStorage registers a new resource with the given unique name, arguments, and options.
func NewEnvironmentStorage(ctx *pulumi.Context,
	name string, args *EnvironmentStorageArgs, opts ...pulumi.ResourceOption) (*EnvironmentStorage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessKey == nil {
		return nil, errors.New("invalid value for required argument 'AccessKey'")
	}
	if args.AccessMode == nil {
		return nil, errors.New("invalid value for required argument 'AccessMode'")
	}
	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.ContainerAppEnvironmentId == nil {
		return nil, errors.New("invalid value for required argument 'ContainerAppEnvironmentId'")
	}
	if args.ShareName == nil {
		return nil, errors.New("invalid value for required argument 'ShareName'")
	}
	if args.AccessKey != nil {
		args.AccessKey = pulumi.ToSecret(args.AccessKey).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accessKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EnvironmentStorage
	err := ctx.RegisterResource("azure:containerapp/environmentStorage:EnvironmentStorage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvironmentStorage gets an existing EnvironmentStorage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvironmentStorage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvironmentStorageState, opts ...pulumi.ResourceOption) (*EnvironmentStorage, error) {
	var resource EnvironmentStorage
	err := ctx.ReadResource("azure:containerapp/environmentStorage:EnvironmentStorage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnvironmentStorage resources.
type environmentStorageState struct {
	// The Storage Account Access Key.
	AccessKey *string `pulumi:"accessKey"`
	// The access mode to connect this storage to the Container App. Possible values include `ReadOnly` and `ReadWrite`. Changing this forces a new resource to be created.
	AccessMode *string `pulumi:"accessMode"`
	// The Azure Storage Account in which the Share to be used is located. Changing this forces a new resource to be created.
	AccountName *string `pulumi:"accountName"`
	// The ID of the Container App Environment to which this storage belongs. Changing this forces a new resource to be created.
	ContainerAppEnvironmentId *string `pulumi:"containerAppEnvironmentId"`
	// The name for this Container App Environment Storage. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the Azure Storage Share to use. Changing this forces a new resource to be created.
	ShareName *string `pulumi:"shareName"`
}

type EnvironmentStorageState struct {
	// The Storage Account Access Key.
	AccessKey pulumi.StringPtrInput
	// The access mode to connect this storage to the Container App. Possible values include `ReadOnly` and `ReadWrite`. Changing this forces a new resource to be created.
	AccessMode pulumi.StringPtrInput
	// The Azure Storage Account in which the Share to be used is located. Changing this forces a new resource to be created.
	AccountName pulumi.StringPtrInput
	// The ID of the Container App Environment to which this storage belongs. Changing this forces a new resource to be created.
	ContainerAppEnvironmentId pulumi.StringPtrInput
	// The name for this Container App Environment Storage. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the Azure Storage Share to use. Changing this forces a new resource to be created.
	ShareName pulumi.StringPtrInput
}

func (EnvironmentStorageState) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentStorageState)(nil)).Elem()
}

type environmentStorageArgs struct {
	// The Storage Account Access Key.
	AccessKey string `pulumi:"accessKey"`
	// The access mode to connect this storage to the Container App. Possible values include `ReadOnly` and `ReadWrite`. Changing this forces a new resource to be created.
	AccessMode string `pulumi:"accessMode"`
	// The Azure Storage Account in which the Share to be used is located. Changing this forces a new resource to be created.
	AccountName string `pulumi:"accountName"`
	// The ID of the Container App Environment to which this storage belongs. Changing this forces a new resource to be created.
	ContainerAppEnvironmentId string `pulumi:"containerAppEnvironmentId"`
	// The name for this Container App Environment Storage. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the Azure Storage Share to use. Changing this forces a new resource to be created.
	ShareName string `pulumi:"shareName"`
}

// The set of arguments for constructing a EnvironmentStorage resource.
type EnvironmentStorageArgs struct {
	// The Storage Account Access Key.
	AccessKey pulumi.StringInput
	// The access mode to connect this storage to the Container App. Possible values include `ReadOnly` and `ReadWrite`. Changing this forces a new resource to be created.
	AccessMode pulumi.StringInput
	// The Azure Storage Account in which the Share to be used is located. Changing this forces a new resource to be created.
	AccountName pulumi.StringInput
	// The ID of the Container App Environment to which this storage belongs. Changing this forces a new resource to be created.
	ContainerAppEnvironmentId pulumi.StringInput
	// The name for this Container App Environment Storage. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the Azure Storage Share to use. Changing this forces a new resource to be created.
	ShareName pulumi.StringInput
}

func (EnvironmentStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentStorageArgs)(nil)).Elem()
}

type EnvironmentStorageInput interface {
	pulumi.Input

	ToEnvironmentStorageOutput() EnvironmentStorageOutput
	ToEnvironmentStorageOutputWithContext(ctx context.Context) EnvironmentStorageOutput
}

func (*EnvironmentStorage) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentStorage)(nil)).Elem()
}

func (i *EnvironmentStorage) ToEnvironmentStorageOutput() EnvironmentStorageOutput {
	return i.ToEnvironmentStorageOutputWithContext(context.Background())
}

func (i *EnvironmentStorage) ToEnvironmentStorageOutputWithContext(ctx context.Context) EnvironmentStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentStorageOutput)
}

// EnvironmentStorageArrayInput is an input type that accepts EnvironmentStorageArray and EnvironmentStorageArrayOutput values.
// You can construct a concrete instance of `EnvironmentStorageArrayInput` via:
//
//	EnvironmentStorageArray{ EnvironmentStorageArgs{...} }
type EnvironmentStorageArrayInput interface {
	pulumi.Input

	ToEnvironmentStorageArrayOutput() EnvironmentStorageArrayOutput
	ToEnvironmentStorageArrayOutputWithContext(context.Context) EnvironmentStorageArrayOutput
}

type EnvironmentStorageArray []EnvironmentStorageInput

func (EnvironmentStorageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnvironmentStorage)(nil)).Elem()
}

func (i EnvironmentStorageArray) ToEnvironmentStorageArrayOutput() EnvironmentStorageArrayOutput {
	return i.ToEnvironmentStorageArrayOutputWithContext(context.Background())
}

func (i EnvironmentStorageArray) ToEnvironmentStorageArrayOutputWithContext(ctx context.Context) EnvironmentStorageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentStorageArrayOutput)
}

// EnvironmentStorageMapInput is an input type that accepts EnvironmentStorageMap and EnvironmentStorageMapOutput values.
// You can construct a concrete instance of `EnvironmentStorageMapInput` via:
//
//	EnvironmentStorageMap{ "key": EnvironmentStorageArgs{...} }
type EnvironmentStorageMapInput interface {
	pulumi.Input

	ToEnvironmentStorageMapOutput() EnvironmentStorageMapOutput
	ToEnvironmentStorageMapOutputWithContext(context.Context) EnvironmentStorageMapOutput
}

type EnvironmentStorageMap map[string]EnvironmentStorageInput

func (EnvironmentStorageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnvironmentStorage)(nil)).Elem()
}

func (i EnvironmentStorageMap) ToEnvironmentStorageMapOutput() EnvironmentStorageMapOutput {
	return i.ToEnvironmentStorageMapOutputWithContext(context.Background())
}

func (i EnvironmentStorageMap) ToEnvironmentStorageMapOutputWithContext(ctx context.Context) EnvironmentStorageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentStorageMapOutput)
}

type EnvironmentStorageOutput struct{ *pulumi.OutputState }

func (EnvironmentStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentStorage)(nil)).Elem()
}

func (o EnvironmentStorageOutput) ToEnvironmentStorageOutput() EnvironmentStorageOutput {
	return o
}

func (o EnvironmentStorageOutput) ToEnvironmentStorageOutputWithContext(ctx context.Context) EnvironmentStorageOutput {
	return o
}

// The Storage Account Access Key.
func (o EnvironmentStorageOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentStorage) pulumi.StringOutput { return v.AccessKey }).(pulumi.StringOutput)
}

// The access mode to connect this storage to the Container App. Possible values include `ReadOnly` and `ReadWrite`. Changing this forces a new resource to be created.
func (o EnvironmentStorageOutput) AccessMode() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentStorage) pulumi.StringOutput { return v.AccessMode }).(pulumi.StringOutput)
}

// The Azure Storage Account in which the Share to be used is located. Changing this forces a new resource to be created.
func (o EnvironmentStorageOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentStorage) pulumi.StringOutput { return v.AccountName }).(pulumi.StringOutput)
}

// The ID of the Container App Environment to which this storage belongs. Changing this forces a new resource to be created.
func (o EnvironmentStorageOutput) ContainerAppEnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentStorage) pulumi.StringOutput { return v.ContainerAppEnvironmentId }).(pulumi.StringOutput)
}

// The name for this Container App Environment Storage. Changing this forces a new resource to be created.
func (o EnvironmentStorageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentStorage) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the Azure Storage Share to use. Changing this forces a new resource to be created.
func (o EnvironmentStorageOutput) ShareName() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentStorage) pulumi.StringOutput { return v.ShareName }).(pulumi.StringOutput)
}

type EnvironmentStorageArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentStorageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnvironmentStorage)(nil)).Elem()
}

func (o EnvironmentStorageArrayOutput) ToEnvironmentStorageArrayOutput() EnvironmentStorageArrayOutput {
	return o
}

func (o EnvironmentStorageArrayOutput) ToEnvironmentStorageArrayOutputWithContext(ctx context.Context) EnvironmentStorageArrayOutput {
	return o
}

func (o EnvironmentStorageArrayOutput) Index(i pulumi.IntInput) EnvironmentStorageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EnvironmentStorage {
		return vs[0].([]*EnvironmentStorage)[vs[1].(int)]
	}).(EnvironmentStorageOutput)
}

type EnvironmentStorageMapOutput struct{ *pulumi.OutputState }

func (EnvironmentStorageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnvironmentStorage)(nil)).Elem()
}

func (o EnvironmentStorageMapOutput) ToEnvironmentStorageMapOutput() EnvironmentStorageMapOutput {
	return o
}

func (o EnvironmentStorageMapOutput) ToEnvironmentStorageMapOutputWithContext(ctx context.Context) EnvironmentStorageMapOutput {
	return o
}

func (o EnvironmentStorageMapOutput) MapIndex(k pulumi.StringInput) EnvironmentStorageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EnvironmentStorage {
		return vs[0].(map[string]*EnvironmentStorage)[vs[1].(string)]
	}).(EnvironmentStorageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentStorageInput)(nil)).Elem(), &EnvironmentStorage{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentStorageArrayInput)(nil)).Elem(), EnvironmentStorageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentStorageMapInput)(nil)).Elem(), EnvironmentStorageMap{})
	pulumi.RegisterOutputType(EnvironmentStorageOutput{})
	pulumi.RegisterOutputType(EnvironmentStorageArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentStorageMapOutput{})
}
