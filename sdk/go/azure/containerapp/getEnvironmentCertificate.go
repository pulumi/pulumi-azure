// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containerapp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Container App Environment Certificate.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/containerapp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleEnvironment, err := containerapp.LookupEnvironment(ctx, &containerapp.LookupEnvironmentArgs{
//				Name:              "example-environment",
//				ResourceGroupName: "example-resources",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = containerapp.LookupEnvironmentCertificate(ctx, &containerapp.LookupEnvironmentCertificateArgs{
//				Name:                      "mycertificate",
//				ContainerAppEnvironmentId: exampleEnvironment.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupEnvironmentCertificate(ctx *pulumi.Context, args *LookupEnvironmentCertificateArgs, opts ...pulumi.InvokeOption) (*LookupEnvironmentCertificateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupEnvironmentCertificateResult
	err := ctx.Invoke("azure:containerapp/getEnvironmentCertificate:getEnvironmentCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEnvironmentCertificate.
type LookupEnvironmentCertificateArgs struct {
	// The ID of the Container App Environment to configure this Certificate on. Changing this forces a new resource to be created.
	ContainerAppEnvironmentId string `pulumi:"containerAppEnvironmentId"`
	// The name of the Container Apps Certificate. Changing this forces a new resource to be created.
	Name string `pulumi:"name"`
}

// A collection of values returned by getEnvironmentCertificate.
type LookupEnvironmentCertificateResult struct {
	ContainerAppEnvironmentId string `pulumi:"containerAppEnvironmentId"`
	// The expiration date for the Certificate.
	ExpirationDate string `pulumi:"expirationDate"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The date of issue for the Certificate.
	IssueDate string `pulumi:"issueDate"`
	// The Certificate Issuer.
	Issuer string `pulumi:"issuer"`
	Name   string `pulumi:"name"`
	// The Subject Name for the Certificate.
	SubjectName string `pulumi:"subjectName"`
	// A mapping of tags assigned to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The Thumbprint of the Certificate.
	Thumbprint string `pulumi:"thumbprint"`
}

func LookupEnvironmentCertificateOutput(ctx *pulumi.Context, args LookupEnvironmentCertificateOutputArgs, opts ...pulumi.InvokeOption) LookupEnvironmentCertificateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupEnvironmentCertificateResult, error) {
			args := v.(LookupEnvironmentCertificateArgs)
			r, err := LookupEnvironmentCertificate(ctx, &args, opts...)
			var s LookupEnvironmentCertificateResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupEnvironmentCertificateResultOutput)
}

// A collection of arguments for invoking getEnvironmentCertificate.
type LookupEnvironmentCertificateOutputArgs struct {
	// The ID of the Container App Environment to configure this Certificate on. Changing this forces a new resource to be created.
	ContainerAppEnvironmentId pulumi.StringInput `pulumi:"containerAppEnvironmentId"`
	// The name of the Container Apps Certificate. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupEnvironmentCertificateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEnvironmentCertificateArgs)(nil)).Elem()
}

// A collection of values returned by getEnvironmentCertificate.
type LookupEnvironmentCertificateResultOutput struct{ *pulumi.OutputState }

func (LookupEnvironmentCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEnvironmentCertificateResult)(nil)).Elem()
}

func (o LookupEnvironmentCertificateResultOutput) ToLookupEnvironmentCertificateResultOutput() LookupEnvironmentCertificateResultOutput {
	return o
}

func (o LookupEnvironmentCertificateResultOutput) ToLookupEnvironmentCertificateResultOutputWithContext(ctx context.Context) LookupEnvironmentCertificateResultOutput {
	return o
}

func (o LookupEnvironmentCertificateResultOutput) ContainerAppEnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnvironmentCertificateResult) string { return v.ContainerAppEnvironmentId }).(pulumi.StringOutput)
}

// The expiration date for the Certificate.
func (o LookupEnvironmentCertificateResultOutput) ExpirationDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnvironmentCertificateResult) string { return v.ExpirationDate }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupEnvironmentCertificateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnvironmentCertificateResult) string { return v.Id }).(pulumi.StringOutput)
}

// The date of issue for the Certificate.
func (o LookupEnvironmentCertificateResultOutput) IssueDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnvironmentCertificateResult) string { return v.IssueDate }).(pulumi.StringOutput)
}

// The Certificate Issuer.
func (o LookupEnvironmentCertificateResultOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnvironmentCertificateResult) string { return v.Issuer }).(pulumi.StringOutput)
}

func (o LookupEnvironmentCertificateResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnvironmentCertificateResult) string { return v.Name }).(pulumi.StringOutput)
}

// The Subject Name for the Certificate.
func (o LookupEnvironmentCertificateResultOutput) SubjectName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnvironmentCertificateResult) string { return v.SubjectName }).(pulumi.StringOutput)
}

// A mapping of tags assigned to the resource.
func (o LookupEnvironmentCertificateResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupEnvironmentCertificateResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The Thumbprint of the Certificate.
func (o LookupEnvironmentCertificateResultOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnvironmentCertificateResult) string { return v.Thumbprint }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEnvironmentCertificateResultOutput{})
}
