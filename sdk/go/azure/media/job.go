// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package media

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a Media Job.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/media"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/storage"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West Europe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
// 			ResourceGroupName:      exampleResourceGroup.Name,
// 			Location:               exampleResourceGroup.Location,
// 			AccountTier:            pulumi.String("Standard"),
// 			AccountReplicationType: pulumi.String("GRS"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleServiceAccount, err := media.NewServiceAccount(ctx, "exampleServiceAccount", &media.ServiceAccountArgs{
// 			Location:          exampleResourceGroup.Location,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			StorageAccounts: media.ServiceAccountStorageAccountArray{
// 				&media.ServiceAccountStorageAccountArgs{
// 					Id:        exampleAccount.ID(),
// 					IsPrimary: pulumi.Bool(true),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleTransform, err := media.NewTransform(ctx, "exampleTransform", &media.TransformArgs{
// 			ResourceGroupName:        exampleResourceGroup.Name,
// 			MediaServicesAccountName: exampleServiceAccount.Name,
// 			Description:              pulumi.String("My transform description"),
// 			Outputs: media.TransformOutputArray{
// 				&media.TransformOutputArgs{
// 					RelativePriority: pulumi.String("Normal"),
// 					OnErrorAction:    pulumi.String("ContinueJob"),
// 					BuiltinPreset: &media.TransformOutputBuiltinPresetArgs{
// 						PresetName: pulumi.String("AACGoodQualityAudio"),
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		input, err := media.NewAsset(ctx, "input", &media.AssetArgs{
// 			ResourceGroupName:        exampleResourceGroup.Name,
// 			MediaServicesAccountName: exampleServiceAccount.Name,
// 			Description:              pulumi.String("Input Asset description"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		output, err := media.NewAsset(ctx, "output", &media.AssetArgs{
// 			ResourceGroupName:        exampleResourceGroup.Name,
// 			MediaServicesAccountName: exampleServiceAccount.Name,
// 			Description:              pulumi.String("Output Asset description"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = media.NewJob(ctx, "exampleJob", &media.JobArgs{
// 			ResourceGroupName:        exampleResourceGroup.Name,
// 			MediaServicesAccountName: exampleServiceAccount.Name,
// 			TransformName:            exampleTransform.Name,
// 			Description:              pulumi.String("My Job description"),
// 			Priority:                 pulumi.String("Normal"),
// 			InputAsset: &media.JobInputAssetArgs{
// 				Name: input.Name,
// 			},
// 			OutputAssets: media.JobOutputAssetArray{
// 				&media.JobOutputAssetArgs{
// 					Name: output.Name,
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Media Jobs can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:media/job:Job example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.Media/mediaservices/account1/transforms/transform1/jobs/job1
// ```
type Job struct {
	pulumi.CustomResourceState

	// Optional customer supplied description of the Job.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A `inputAsset` block as defined below. Changing this forces a new Media Job to be created.
	InputAsset JobInputAssetOutput `pulumi:"inputAsset"`
	// The Media Services account name. Changing this forces a new Transform to be created.
	MediaServicesAccountName pulumi.StringOutput `pulumi:"mediaServicesAccountName"`
	// The name which should be used for this Media Job. Changing this forces a new Media Job to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// One or more `outputAsset` blocks as defined below. Changing this forces a new Media Job to be created.
	OutputAssets JobOutputAssetArrayOutput `pulumi:"outputAssets"`
	// Priority with which the job should be processed. Higher priority jobs are processed before lower priority jobs. If not set, the default is normal. Changing this forces a new Media Job to be created.
	Priority pulumi.StringPtrOutput `pulumi:"priority"`
	// The name of the Resource Group where the Media Job should exist. Changing this forces a new Media Job to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The Transform name. Changing this forces a new Media Job to be created.
	TransformName pulumi.StringOutput `pulumi:"transformName"`
}

// NewJob registers a new resource with the given unique name, arguments, and options.
func NewJob(ctx *pulumi.Context,
	name string, args *JobArgs, opts ...pulumi.ResourceOption) (*Job, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InputAsset == nil {
		return nil, errors.New("invalid value for required argument 'InputAsset'")
	}
	if args.MediaServicesAccountName == nil {
		return nil, errors.New("invalid value for required argument 'MediaServicesAccountName'")
	}
	if args.OutputAssets == nil {
		return nil, errors.New("invalid value for required argument 'OutputAssets'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.TransformName == nil {
		return nil, errors.New("invalid value for required argument 'TransformName'")
	}
	var resource Job
	err := ctx.RegisterResource("azure:media/job:Job", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJob gets an existing Job resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JobState, opts ...pulumi.ResourceOption) (*Job, error) {
	var resource Job
	err := ctx.ReadResource("azure:media/job:Job", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Job resources.
type jobState struct {
	// Optional customer supplied description of the Job.
	Description *string `pulumi:"description"`
	// A `inputAsset` block as defined below. Changing this forces a new Media Job to be created.
	InputAsset *JobInputAsset `pulumi:"inputAsset"`
	// The Media Services account name. Changing this forces a new Transform to be created.
	MediaServicesAccountName *string `pulumi:"mediaServicesAccountName"`
	// The name which should be used for this Media Job. Changing this forces a new Media Job to be created.
	Name *string `pulumi:"name"`
	// One or more `outputAsset` blocks as defined below. Changing this forces a new Media Job to be created.
	OutputAssets []JobOutputAsset `pulumi:"outputAssets"`
	// Priority with which the job should be processed. Higher priority jobs are processed before lower priority jobs. If not set, the default is normal. Changing this forces a new Media Job to be created.
	Priority *string `pulumi:"priority"`
	// The name of the Resource Group where the Media Job should exist. Changing this forces a new Media Job to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The Transform name. Changing this forces a new Media Job to be created.
	TransformName *string `pulumi:"transformName"`
}

type JobState struct {
	// Optional customer supplied description of the Job.
	Description pulumi.StringPtrInput
	// A `inputAsset` block as defined below. Changing this forces a new Media Job to be created.
	InputAsset JobInputAssetPtrInput
	// The Media Services account name. Changing this forces a new Transform to be created.
	MediaServicesAccountName pulumi.StringPtrInput
	// The name which should be used for this Media Job. Changing this forces a new Media Job to be created.
	Name pulumi.StringPtrInput
	// One or more `outputAsset` blocks as defined below. Changing this forces a new Media Job to be created.
	OutputAssets JobOutputAssetArrayInput
	// Priority with which the job should be processed. Higher priority jobs are processed before lower priority jobs. If not set, the default is normal. Changing this forces a new Media Job to be created.
	Priority pulumi.StringPtrInput
	// The name of the Resource Group where the Media Job should exist. Changing this forces a new Media Job to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The Transform name. Changing this forces a new Media Job to be created.
	TransformName pulumi.StringPtrInput
}

func (JobState) ElementType() reflect.Type {
	return reflect.TypeOf((*jobState)(nil)).Elem()
}

type jobArgs struct {
	// Optional customer supplied description of the Job.
	Description *string `pulumi:"description"`
	// A `inputAsset` block as defined below. Changing this forces a new Media Job to be created.
	InputAsset JobInputAsset `pulumi:"inputAsset"`
	// The Media Services account name. Changing this forces a new Transform to be created.
	MediaServicesAccountName string `pulumi:"mediaServicesAccountName"`
	// The name which should be used for this Media Job. Changing this forces a new Media Job to be created.
	Name *string `pulumi:"name"`
	// One or more `outputAsset` blocks as defined below. Changing this forces a new Media Job to be created.
	OutputAssets []JobOutputAsset `pulumi:"outputAssets"`
	// Priority with which the job should be processed. Higher priority jobs are processed before lower priority jobs. If not set, the default is normal. Changing this forces a new Media Job to be created.
	Priority *string `pulumi:"priority"`
	// The name of the Resource Group where the Media Job should exist. Changing this forces a new Media Job to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The Transform name. Changing this forces a new Media Job to be created.
	TransformName string `pulumi:"transformName"`
}

// The set of arguments for constructing a Job resource.
type JobArgs struct {
	// Optional customer supplied description of the Job.
	Description pulumi.StringPtrInput
	// A `inputAsset` block as defined below. Changing this forces a new Media Job to be created.
	InputAsset JobInputAssetInput
	// The Media Services account name. Changing this forces a new Transform to be created.
	MediaServicesAccountName pulumi.StringInput
	// The name which should be used for this Media Job. Changing this forces a new Media Job to be created.
	Name pulumi.StringPtrInput
	// One or more `outputAsset` blocks as defined below. Changing this forces a new Media Job to be created.
	OutputAssets JobOutputAssetArrayInput
	// Priority with which the job should be processed. Higher priority jobs are processed before lower priority jobs. If not set, the default is normal. Changing this forces a new Media Job to be created.
	Priority pulumi.StringPtrInput
	// The name of the Resource Group where the Media Job should exist. Changing this forces a new Media Job to be created.
	ResourceGroupName pulumi.StringInput
	// The Transform name. Changing this forces a new Media Job to be created.
	TransformName pulumi.StringInput
}

func (JobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jobArgs)(nil)).Elem()
}

type JobInput interface {
	pulumi.Input

	ToJobOutput() JobOutput
	ToJobOutputWithContext(ctx context.Context) JobOutput
}

func (*Job) ElementType() reflect.Type {
	return reflect.TypeOf((*Job)(nil))
}

func (i *Job) ToJobOutput() JobOutput {
	return i.ToJobOutputWithContext(context.Background())
}

func (i *Job) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutput)
}

func (i *Job) ToJobPtrOutput() JobPtrOutput {
	return i.ToJobPtrOutputWithContext(context.Background())
}

func (i *Job) ToJobPtrOutputWithContext(ctx context.Context) JobPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobPtrOutput)
}

type JobPtrInput interface {
	pulumi.Input

	ToJobPtrOutput() JobPtrOutput
	ToJobPtrOutputWithContext(ctx context.Context) JobPtrOutput
}

type jobPtrType JobArgs

func (*jobPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Job)(nil))
}

func (i *jobPtrType) ToJobPtrOutput() JobPtrOutput {
	return i.ToJobPtrOutputWithContext(context.Background())
}

func (i *jobPtrType) ToJobPtrOutputWithContext(ctx context.Context) JobPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobPtrOutput)
}

// JobArrayInput is an input type that accepts JobArray and JobArrayOutput values.
// You can construct a concrete instance of `JobArrayInput` via:
//
//          JobArray{ JobArgs{...} }
type JobArrayInput interface {
	pulumi.Input

	ToJobArrayOutput() JobArrayOutput
	ToJobArrayOutputWithContext(context.Context) JobArrayOutput
}

type JobArray []JobInput

func (JobArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Job)(nil))
}

func (i JobArray) ToJobArrayOutput() JobArrayOutput {
	return i.ToJobArrayOutputWithContext(context.Background())
}

func (i JobArray) ToJobArrayOutputWithContext(ctx context.Context) JobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobArrayOutput)
}

// JobMapInput is an input type that accepts JobMap and JobMapOutput values.
// You can construct a concrete instance of `JobMapInput` via:
//
//          JobMap{ "key": JobArgs{...} }
type JobMapInput interface {
	pulumi.Input

	ToJobMapOutput() JobMapOutput
	ToJobMapOutputWithContext(context.Context) JobMapOutput
}

type JobMap map[string]JobInput

func (JobMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Job)(nil))
}

func (i JobMap) ToJobMapOutput() JobMapOutput {
	return i.ToJobMapOutputWithContext(context.Background())
}

func (i JobMap) ToJobMapOutputWithContext(ctx context.Context) JobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobMapOutput)
}

type JobOutput struct {
	*pulumi.OutputState
}

func (JobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Job)(nil))
}

func (o JobOutput) ToJobOutput() JobOutput {
	return o
}

func (o JobOutput) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return o
}

func (o JobOutput) ToJobPtrOutput() JobPtrOutput {
	return o.ToJobPtrOutputWithContext(context.Background())
}

func (o JobOutput) ToJobPtrOutputWithContext(ctx context.Context) JobPtrOutput {
	return o.ApplyT(func(v Job) *Job {
		return &v
	}).(JobPtrOutput)
}

type JobPtrOutput struct {
	*pulumi.OutputState
}

func (JobPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Job)(nil))
}

func (o JobPtrOutput) ToJobPtrOutput() JobPtrOutput {
	return o
}

func (o JobPtrOutput) ToJobPtrOutputWithContext(ctx context.Context) JobPtrOutput {
	return o
}

type JobArrayOutput struct{ *pulumi.OutputState }

func (JobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Job)(nil))
}

func (o JobArrayOutput) ToJobArrayOutput() JobArrayOutput {
	return o
}

func (o JobArrayOutput) ToJobArrayOutputWithContext(ctx context.Context) JobArrayOutput {
	return o
}

func (o JobArrayOutput) Index(i pulumi.IntInput) JobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Job {
		return vs[0].([]Job)[vs[1].(int)]
	}).(JobOutput)
}

type JobMapOutput struct{ *pulumi.OutputState }

func (JobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Job)(nil))
}

func (o JobMapOutput) ToJobMapOutput() JobMapOutput {
	return o
}

func (o JobMapOutput) ToJobMapOutputWithContext(ctx context.Context) JobMapOutput {
	return o
}

func (o JobMapOutput) MapIndex(k pulumi.StringInput) JobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Job {
		return vs[0].(map[string]Job)[vs[1].(string)]
	}).(JobOutput)
}

func init() {
	pulumi.RegisterOutputType(JobOutput{})
	pulumi.RegisterOutputType(JobPtrOutput{})
	pulumi.RegisterOutputType(JobArrayOutput{})
	pulumi.RegisterOutputType(JobMapOutput{})
}
