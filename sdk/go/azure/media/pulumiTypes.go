// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package media

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ContentKeyPolicyPolicyOption struct {
	// Enable a configuration for non-DRM keys.
	ClearKeyConfigurationEnabled *bool `pulumi:"clearKeyConfigurationEnabled"`
	// A `fairplayConfiguration` block as defined above. Check license requirements here https://docs.microsoft.com/en-us/azure/media-services/latest/fairplay-license-overview.
	FairplayConfiguration *ContentKeyPolicyPolicyOptionFairplayConfiguration `pulumi:"fairplayConfiguration"`
	// The name which should be used for this Policy Option.
	Name string `pulumi:"name"`
	// Enable an open restriction. License or key will be delivered on every request.
	OpenRestrictionEnabled *bool `pulumi:"openRestrictionEnabled"`
	// One or more `playreadyConfigurationLicense` blocks as defined above.
	PlayreadyConfigurationLicenses []ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense `pulumi:"playreadyConfigurationLicenses"`
	// A `tokenRestriction` block as defined below.
	TokenRestriction *ContentKeyPolicyPolicyOptionTokenRestriction `pulumi:"tokenRestriction"`
	// The Widevine template.
	WidevineConfigurationTemplate *string `pulumi:"widevineConfigurationTemplate"`
}

// ContentKeyPolicyPolicyOptionInput is an input type that accepts ContentKeyPolicyPolicyOptionArgs and ContentKeyPolicyPolicyOptionOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPolicyOptionInput` via:
//
//          ContentKeyPolicyPolicyOptionArgs{...}
type ContentKeyPolicyPolicyOptionInput interface {
	pulumi.Input

	ToContentKeyPolicyPolicyOptionOutput() ContentKeyPolicyPolicyOptionOutput
	ToContentKeyPolicyPolicyOptionOutputWithContext(context.Context) ContentKeyPolicyPolicyOptionOutput
}

type ContentKeyPolicyPolicyOptionArgs struct {
	// Enable a configuration for non-DRM keys.
	ClearKeyConfigurationEnabled pulumi.BoolPtrInput `pulumi:"clearKeyConfigurationEnabled"`
	// A `fairplayConfiguration` block as defined above. Check license requirements here https://docs.microsoft.com/en-us/azure/media-services/latest/fairplay-license-overview.
	FairplayConfiguration ContentKeyPolicyPolicyOptionFairplayConfigurationPtrInput `pulumi:"fairplayConfiguration"`
	// The name which should be used for this Policy Option.
	Name pulumi.StringInput `pulumi:"name"`
	// Enable an open restriction. License or key will be delivered on every request.
	OpenRestrictionEnabled pulumi.BoolPtrInput `pulumi:"openRestrictionEnabled"`
	// One or more `playreadyConfigurationLicense` blocks as defined above.
	PlayreadyConfigurationLicenses ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayInput `pulumi:"playreadyConfigurationLicenses"`
	// A `tokenRestriction` block as defined below.
	TokenRestriction ContentKeyPolicyPolicyOptionTokenRestrictionPtrInput `pulumi:"tokenRestriction"`
	// The Widevine template.
	WidevineConfigurationTemplate pulumi.StringPtrInput `pulumi:"widevineConfigurationTemplate"`
}

func (ContentKeyPolicyPolicyOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPolicyOption)(nil)).Elem()
}

func (i ContentKeyPolicyPolicyOptionArgs) ToContentKeyPolicyPolicyOptionOutput() ContentKeyPolicyPolicyOptionOutput {
	return i.ToContentKeyPolicyPolicyOptionOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPolicyOptionArgs) ToContentKeyPolicyPolicyOptionOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionOutput)
}

// ContentKeyPolicyPolicyOptionArrayInput is an input type that accepts ContentKeyPolicyPolicyOptionArray and ContentKeyPolicyPolicyOptionArrayOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPolicyOptionArrayInput` via:
//
//          ContentKeyPolicyPolicyOptionArray{ ContentKeyPolicyPolicyOptionArgs{...} }
type ContentKeyPolicyPolicyOptionArrayInput interface {
	pulumi.Input

	ToContentKeyPolicyPolicyOptionArrayOutput() ContentKeyPolicyPolicyOptionArrayOutput
	ToContentKeyPolicyPolicyOptionArrayOutputWithContext(context.Context) ContentKeyPolicyPolicyOptionArrayOutput
}

type ContentKeyPolicyPolicyOptionArray []ContentKeyPolicyPolicyOptionInput

func (ContentKeyPolicyPolicyOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentKeyPolicyPolicyOption)(nil)).Elem()
}

func (i ContentKeyPolicyPolicyOptionArray) ToContentKeyPolicyPolicyOptionArrayOutput() ContentKeyPolicyPolicyOptionArrayOutput {
	return i.ToContentKeyPolicyPolicyOptionArrayOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPolicyOptionArray) ToContentKeyPolicyPolicyOptionArrayOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionArrayOutput)
}

type ContentKeyPolicyPolicyOptionOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPolicyOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPolicyOption)(nil)).Elem()
}

func (o ContentKeyPolicyPolicyOptionOutput) ToContentKeyPolicyPolicyOptionOutput() ContentKeyPolicyPolicyOptionOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionOutput) ToContentKeyPolicyPolicyOptionOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionOutput {
	return o
}

// Enable a configuration for non-DRM keys.
func (o ContentKeyPolicyPolicyOptionOutput) ClearKeyConfigurationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOption) *bool { return v.ClearKeyConfigurationEnabled }).(pulumi.BoolPtrOutput)
}

// A `fairplayConfiguration` block as defined above. Check license requirements here https://docs.microsoft.com/en-us/azure/media-services/latest/fairplay-license-overview.
func (o ContentKeyPolicyPolicyOptionOutput) FairplayConfiguration() ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOption) *ContentKeyPolicyPolicyOptionFairplayConfiguration {
		return v.FairplayConfiguration
	}).(ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput)
}

// The name which should be used for this Policy Option.
func (o ContentKeyPolicyPolicyOptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOption) string { return v.Name }).(pulumi.StringOutput)
}

// Enable an open restriction. License or key will be delivered on every request.
func (o ContentKeyPolicyPolicyOptionOutput) OpenRestrictionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOption) *bool { return v.OpenRestrictionEnabled }).(pulumi.BoolPtrOutput)
}

// One or more `playreadyConfigurationLicense` blocks as defined above.
func (o ContentKeyPolicyPolicyOptionOutput) PlayreadyConfigurationLicenses() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOption) []ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense {
		return v.PlayreadyConfigurationLicenses
	}).(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput)
}

// A `tokenRestriction` block as defined below.
func (o ContentKeyPolicyPolicyOptionOutput) TokenRestriction() ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOption) *ContentKeyPolicyPolicyOptionTokenRestriction {
		return v.TokenRestriction
	}).(ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput)
}

// The Widevine template.
func (o ContentKeyPolicyPolicyOptionOutput) WidevineConfigurationTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOption) *string { return v.WidevineConfigurationTemplate }).(pulumi.StringPtrOutput)
}

type ContentKeyPolicyPolicyOptionArrayOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPolicyOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentKeyPolicyPolicyOption)(nil)).Elem()
}

func (o ContentKeyPolicyPolicyOptionArrayOutput) ToContentKeyPolicyPolicyOptionArrayOutput() ContentKeyPolicyPolicyOptionArrayOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionArrayOutput) ToContentKeyPolicyPolicyOptionArrayOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionArrayOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionArrayOutput) Index(i pulumi.IntInput) ContentKeyPolicyPolicyOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContentKeyPolicyPolicyOption {
		return vs[0].([]ContentKeyPolicyPolicyOption)[vs[1].(int)]
	}).(ContentKeyPolicyPolicyOptionOutput)
}

type ContentKeyPolicyPolicyOptionFairplayConfiguration struct {
	// The key that must be used as FairPlay Application Secret key.
	Ask *string `pulumi:"ask"`
	// A `offlineRentalConfiguration` block as defined below.
	OfflineRentalConfiguration *ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration `pulumi:"offlineRentalConfiguration"`
	// The Base64 representation of FairPlay certificate in PKCS 12 (pfx) format (including private key).
	Pfx *string `pulumi:"pfx"`
	// The password encrypting FairPlay certificate in PKCS 12 (pfx) format.
	PfxPassword *string `pulumi:"pfxPassword"`
	// The rental and lease key type. Supported values are `DualExpiry`, `PersistentLimited`, `PersistentUnlimited` or `Undefined`.
	RentalAndLeaseKeyType *string `pulumi:"rentalAndLeaseKeyType"`
	// The rental duration. Must be greater than 0.
	RentalDurationSeconds *int `pulumi:"rentalDurationSeconds"`
}

// ContentKeyPolicyPolicyOptionFairplayConfigurationInput is an input type that accepts ContentKeyPolicyPolicyOptionFairplayConfigurationArgs and ContentKeyPolicyPolicyOptionFairplayConfigurationOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPolicyOptionFairplayConfigurationInput` via:
//
//          ContentKeyPolicyPolicyOptionFairplayConfigurationArgs{...}
type ContentKeyPolicyPolicyOptionFairplayConfigurationInput interface {
	pulumi.Input

	ToContentKeyPolicyPolicyOptionFairplayConfigurationOutput() ContentKeyPolicyPolicyOptionFairplayConfigurationOutput
	ToContentKeyPolicyPolicyOptionFairplayConfigurationOutputWithContext(context.Context) ContentKeyPolicyPolicyOptionFairplayConfigurationOutput
}

type ContentKeyPolicyPolicyOptionFairplayConfigurationArgs struct {
	// The key that must be used as FairPlay Application Secret key.
	Ask pulumi.StringPtrInput `pulumi:"ask"`
	// A `offlineRentalConfiguration` block as defined below.
	OfflineRentalConfiguration ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrInput `pulumi:"offlineRentalConfiguration"`
	// The Base64 representation of FairPlay certificate in PKCS 12 (pfx) format (including private key).
	Pfx pulumi.StringPtrInput `pulumi:"pfx"`
	// The password encrypting FairPlay certificate in PKCS 12 (pfx) format.
	PfxPassword pulumi.StringPtrInput `pulumi:"pfxPassword"`
	// The rental and lease key type. Supported values are `DualExpiry`, `PersistentLimited`, `PersistentUnlimited` or `Undefined`.
	RentalAndLeaseKeyType pulumi.StringPtrInput `pulumi:"rentalAndLeaseKeyType"`
	// The rental duration. Must be greater than 0.
	RentalDurationSeconds pulumi.IntPtrInput `pulumi:"rentalDurationSeconds"`
}

func (ContentKeyPolicyPolicyOptionFairplayConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPolicyOptionFairplayConfiguration)(nil)).Elem()
}

func (i ContentKeyPolicyPolicyOptionFairplayConfigurationArgs) ToContentKeyPolicyPolicyOptionFairplayConfigurationOutput() ContentKeyPolicyPolicyOptionFairplayConfigurationOutput {
	return i.ToContentKeyPolicyPolicyOptionFairplayConfigurationOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPolicyOptionFairplayConfigurationArgs) ToContentKeyPolicyPolicyOptionFairplayConfigurationOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionFairplayConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionFairplayConfigurationOutput)
}

func (i ContentKeyPolicyPolicyOptionFairplayConfigurationArgs) ToContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput() ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput {
	return i.ToContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPolicyOptionFairplayConfigurationArgs) ToContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionFairplayConfigurationOutput).ToContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutputWithContext(ctx)
}

// ContentKeyPolicyPolicyOptionFairplayConfigurationPtrInput is an input type that accepts ContentKeyPolicyPolicyOptionFairplayConfigurationArgs, ContentKeyPolicyPolicyOptionFairplayConfigurationPtr and ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPolicyOptionFairplayConfigurationPtrInput` via:
//
//          ContentKeyPolicyPolicyOptionFairplayConfigurationArgs{...}
//
//  or:
//
//          nil
type ContentKeyPolicyPolicyOptionFairplayConfigurationPtrInput interface {
	pulumi.Input

	ToContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput() ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput
	ToContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutputWithContext(context.Context) ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput
}

type contentKeyPolicyPolicyOptionFairplayConfigurationPtrType ContentKeyPolicyPolicyOptionFairplayConfigurationArgs

func ContentKeyPolicyPolicyOptionFairplayConfigurationPtr(v *ContentKeyPolicyPolicyOptionFairplayConfigurationArgs) ContentKeyPolicyPolicyOptionFairplayConfigurationPtrInput {
	return (*contentKeyPolicyPolicyOptionFairplayConfigurationPtrType)(v)
}

func (*contentKeyPolicyPolicyOptionFairplayConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentKeyPolicyPolicyOptionFairplayConfiguration)(nil)).Elem()
}

func (i *contentKeyPolicyPolicyOptionFairplayConfigurationPtrType) ToContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput() ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput {
	return i.ToContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutputWithContext(context.Background())
}

func (i *contentKeyPolicyPolicyOptionFairplayConfigurationPtrType) ToContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput)
}

type ContentKeyPolicyPolicyOptionFairplayConfigurationOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPolicyOptionFairplayConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPolicyOptionFairplayConfiguration)(nil)).Elem()
}

func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOutput) ToContentKeyPolicyPolicyOptionFairplayConfigurationOutput() ContentKeyPolicyPolicyOptionFairplayConfigurationOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOutput) ToContentKeyPolicyPolicyOptionFairplayConfigurationOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionFairplayConfigurationOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOutput) ToContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput() ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput {
	return o.ToContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutputWithContext(context.Background())
}

func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOutput) ToContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionFairplayConfiguration) *ContentKeyPolicyPolicyOptionFairplayConfiguration {
		return &v
	}).(ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput)
}

// The key that must be used as FairPlay Application Secret key.
func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOutput) Ask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionFairplayConfiguration) *string { return v.Ask }).(pulumi.StringPtrOutput)
}

// A `offlineRentalConfiguration` block as defined below.
func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOutput) OfflineRentalConfiguration() ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionFairplayConfiguration) *ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration {
		return v.OfflineRentalConfiguration
	}).(ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput)
}

// The Base64 representation of FairPlay certificate in PKCS 12 (pfx) format (including private key).
func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOutput) Pfx() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionFairplayConfiguration) *string { return v.Pfx }).(pulumi.StringPtrOutput)
}

// The password encrypting FairPlay certificate in PKCS 12 (pfx) format.
func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOutput) PfxPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionFairplayConfiguration) *string { return v.PfxPassword }).(pulumi.StringPtrOutput)
}

// The rental and lease key type. Supported values are `DualExpiry`, `PersistentLimited`, `PersistentUnlimited` or `Undefined`.
func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOutput) RentalAndLeaseKeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionFairplayConfiguration) *string { return v.RentalAndLeaseKeyType }).(pulumi.StringPtrOutput)
}

// The rental duration. Must be greater than 0.
func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOutput) RentalDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionFairplayConfiguration) *int { return v.RentalDurationSeconds }).(pulumi.IntPtrOutput)
}

type ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentKeyPolicyPolicyOptionFairplayConfiguration)(nil)).Elem()
}

func (o ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput) ToContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput() ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput) ToContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput) Elem() ContentKeyPolicyPolicyOptionFairplayConfigurationOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionFairplayConfiguration) ContentKeyPolicyPolicyOptionFairplayConfiguration {
		return *v
	}).(ContentKeyPolicyPolicyOptionFairplayConfigurationOutput)
}

// The key that must be used as FairPlay Application Secret key.
func (o ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput) Ask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionFairplayConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Ask
	}).(pulumi.StringPtrOutput)
}

// A `offlineRentalConfiguration` block as defined below.
func (o ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput) OfflineRentalConfiguration() ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionFairplayConfiguration) *ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration {
		if v == nil {
			return nil
		}
		return v.OfflineRentalConfiguration
	}).(ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput)
}

// The Base64 representation of FairPlay certificate in PKCS 12 (pfx) format (including private key).
func (o ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput) Pfx() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionFairplayConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Pfx
	}).(pulumi.StringPtrOutput)
}

// The password encrypting FairPlay certificate in PKCS 12 (pfx) format.
func (o ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput) PfxPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionFairplayConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.PfxPassword
	}).(pulumi.StringPtrOutput)
}

// The rental and lease key type. Supported values are `DualExpiry`, `PersistentLimited`, `PersistentUnlimited` or `Undefined`.
func (o ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput) RentalAndLeaseKeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionFairplayConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RentalAndLeaseKeyType
	}).(pulumi.StringPtrOutput)
}

// The rental duration. Must be greater than 0.
func (o ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput) RentalDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionFairplayConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.RentalDurationSeconds
	}).(pulumi.IntPtrOutput)
}

type ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration struct {
	// Playback duration.
	PlaybackDurationSeconds *int `pulumi:"playbackDurationSeconds"`
	// Storage duration.
	StorageDurationSeconds *int `pulumi:"storageDurationSeconds"`
}

// ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationInput is an input type that accepts ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationArgs and ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationInput` via:
//
//          ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationArgs{...}
type ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationInput interface {
	pulumi.Input

	ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput() ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput
	ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutputWithContext(context.Context) ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput
}

type ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationArgs struct {
	// Playback duration.
	PlaybackDurationSeconds pulumi.IntPtrInput `pulumi:"playbackDurationSeconds"`
	// Storage duration.
	StorageDurationSeconds pulumi.IntPtrInput `pulumi:"storageDurationSeconds"`
}

func (ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration)(nil)).Elem()
}

func (i ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationArgs) ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput() ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput {
	return i.ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationArgs) ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput)
}

func (i ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationArgs) ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput() ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput {
	return i.ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationArgs) ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput).ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutputWithContext(ctx)
}

// ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrInput is an input type that accepts ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationArgs, ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtr and ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrInput` via:
//
//          ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationArgs{...}
//
//  or:
//
//          nil
type ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrInput interface {
	pulumi.Input

	ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput() ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput
	ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutputWithContext(context.Context) ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput
}

type contentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrType ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationArgs

func ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtr(v *ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationArgs) ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrInput {
	return (*contentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrType)(v)
}

func (*contentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration)(nil)).Elem()
}

func (i *contentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrType) ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput() ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput {
	return i.ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutputWithContext(context.Background())
}

func (i *contentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrType) ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput)
}

type ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration)(nil)).Elem()
}

func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput) ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput() ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput) ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput) ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput() ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput {
	return o.ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutputWithContext(context.Background())
}

func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput) ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration) *ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration {
		return &v
	}).(ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput)
}

// Playback duration.
func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput) PlaybackDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration) *int {
		return v.PlaybackDurationSeconds
	}).(pulumi.IntPtrOutput)
}

// Storage duration.
func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput) StorageDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration) *int {
		return v.StorageDurationSeconds
	}).(pulumi.IntPtrOutput)
}

type ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration)(nil)).Elem()
}

func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput) ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput() ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput) ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput) Elem() ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration) ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration {
		return *v
	}).(ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput)
}

// Playback duration.
func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput) PlaybackDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.PlaybackDurationSeconds
	}).(pulumi.IntPtrOutput)
}

// Storage duration.
func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput) StorageDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.StorageDurationSeconds
	}).(pulumi.IntPtrOutput)
}

type ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense struct {
	// A flag indicating whether test devices can use the license.
	AllowTestDevices *bool `pulumi:"allowTestDevices"`
	// The begin date of license.
	BeginDate *string `pulumi:"beginDate"`
	// Specifies that the content key ID is in the PlayReady header.
	ContentKeyLocationFromHeaderEnabled *bool `pulumi:"contentKeyLocationFromHeaderEnabled"`
	// The content key ID. Specifies that the content key ID is specified in the PlayReady configuration.
	ContentKeyLocationFromKeyId *string `pulumi:"contentKeyLocationFromKeyId"`
	// The PlayReady content type. Supported values are `UltraVioletDownload`, `UltraVioletStreaming` or `Unspecified`.
	ContentType *string `pulumi:"contentType"`
	// The expiration date of license.
	ExpirationDate *string `pulumi:"expirationDate"`
	// The grace period of license.
	GracePeriod *string `pulumi:"gracePeriod"`
	// The license type. Supported values are `NonPersistent` or `Persistent`.
	LicenseType *string `pulumi:"licenseType"`
	// A `playRight` block as defined above.
	PlayRight *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight `pulumi:"playRight"`
	// The relative begin date of license.
	RelativeBeginDate *string `pulumi:"relativeBeginDate"`
	// The relative expiration date of license.
	RelativeExpirationDate *string `pulumi:"relativeExpirationDate"`
}

// ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseInput is an input type that accepts ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArgs and ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseInput` via:
//
//          ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArgs{...}
type ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseInput interface {
	pulumi.Input

	ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput
	ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutputWithContext(context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput
}

type ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArgs struct {
	// A flag indicating whether test devices can use the license.
	AllowTestDevices pulumi.BoolPtrInput `pulumi:"allowTestDevices"`
	// The begin date of license.
	BeginDate pulumi.StringPtrInput `pulumi:"beginDate"`
	// Specifies that the content key ID is in the PlayReady header.
	ContentKeyLocationFromHeaderEnabled pulumi.BoolPtrInput `pulumi:"contentKeyLocationFromHeaderEnabled"`
	// The content key ID. Specifies that the content key ID is specified in the PlayReady configuration.
	ContentKeyLocationFromKeyId pulumi.StringPtrInput `pulumi:"contentKeyLocationFromKeyId"`
	// The PlayReady content type. Supported values are `UltraVioletDownload`, `UltraVioletStreaming` or `Unspecified`.
	ContentType pulumi.StringPtrInput `pulumi:"contentType"`
	// The expiration date of license.
	ExpirationDate pulumi.StringPtrInput `pulumi:"expirationDate"`
	// The grace period of license.
	GracePeriod pulumi.StringPtrInput `pulumi:"gracePeriod"`
	// The license type. Supported values are `NonPersistent` or `Persistent`.
	LicenseType pulumi.StringPtrInput `pulumi:"licenseType"`
	// A `playRight` block as defined above.
	PlayRight ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrInput `pulumi:"playRight"`
	// The relative begin date of license.
	RelativeBeginDate pulumi.StringPtrInput `pulumi:"relativeBeginDate"`
	// The relative expiration date of license.
	RelativeExpirationDate pulumi.StringPtrInput `pulumi:"relativeExpirationDate"`
}

func (ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense)(nil)).Elem()
}

func (i ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArgs) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput {
	return i.ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArgs) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput)
}

// ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayInput is an input type that accepts ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArray and ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayInput` via:
//
//          ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArray{ ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArgs{...} }
type ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayInput interface {
	pulumi.Input

	ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput
	ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutputWithContext(context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput
}

type ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArray []ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseInput

func (ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense)(nil)).Elem()
}

func (i ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArray) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput {
	return i.ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArray) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput)
}

type ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense)(nil)).Elem()
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput {
	return o
}

// A flag indicating whether test devices can use the license.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput) AllowTestDevices() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense) *bool { return v.AllowTestDevices }).(pulumi.BoolPtrOutput)
}

// The begin date of license.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput) BeginDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense) *string { return v.BeginDate }).(pulumi.StringPtrOutput)
}

// Specifies that the content key ID is in the PlayReady header.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput) ContentKeyLocationFromHeaderEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense) *bool {
		return v.ContentKeyLocationFromHeaderEnabled
	}).(pulumi.BoolPtrOutput)
}

// The content key ID. Specifies that the content key ID is specified in the PlayReady configuration.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput) ContentKeyLocationFromKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense) *string {
		return v.ContentKeyLocationFromKeyId
	}).(pulumi.StringPtrOutput)
}

// The PlayReady content type. Supported values are `UltraVioletDownload`, `UltraVioletStreaming` or `Unspecified`.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense) *string { return v.ContentType }).(pulumi.StringPtrOutput)
}

// The expiration date of license.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput) ExpirationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense) *string { return v.ExpirationDate }).(pulumi.StringPtrOutput)
}

// The grace period of license.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput) GracePeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense) *string { return v.GracePeriod }).(pulumi.StringPtrOutput)
}

// The license type. Supported values are `NonPersistent` or `Persistent`.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense) *string { return v.LicenseType }).(pulumi.StringPtrOutput)
}

// A `playRight` block as defined above.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput) PlayRight() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense) *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight {
		return v.PlayRight
	}).(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput)
}

// The relative begin date of license.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput) RelativeBeginDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense) *string { return v.RelativeBeginDate }).(pulumi.StringPtrOutput)
}

// The relative expiration date of license.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput) RelativeExpirationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense) *string {
		return v.RelativeExpirationDate
	}).(pulumi.StringPtrOutput)
}

type ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense)(nil)).Elem()
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput) Index(i pulumi.IntInput) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense {
		return vs[0].([]ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense)[vs[1].(int)]
	}).(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput)
}

type ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight struct {
	// Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive.
	AgcAndColorStripeRestriction *int `pulumi:"agcAndColorStripeRestriction"`
	// Configures Unknown output handling settings of the license. Supported values are `Allowed`, `AllowedWithVideoConstriction` or `NotAllowed`.
	AllowPassingVideoContentToUnknownOutput *string `pulumi:"allowPassingVideoContentToUnknownOutput"`
	// Specifies the output protection level for compressed digital audio. Supported values are 100, 150 or 200.
	AnalogVideoOpl *int `pulumi:"analogVideoOpl"`
	// Specifies the output protection level for compressed digital audio.Supported values are 100, 150 or 200.
	CompressedDigitalAudioOpl *int `pulumi:"compressedDigitalAudioOpl"`
	// Enables the Image Constraint For Analog Component Video Restriction in the license.
	DigitalVideoOnlyContentRestriction *bool `pulumi:"digitalVideoOnlyContentRestriction"`
	// The amount of time that the license is valid after the license is first used to play content.
	FirstPlayExpiration *string `pulumi:"firstPlayExpiration"`
	// Enables the Image Constraint For Analog Component Video Restriction in the license.
	ImageConstraintForAnalogComponentVideoRestriction *bool `pulumi:"imageConstraintForAnalogComponentVideoRestriction"`
	// Enables the Image Constraint For Analog Component Video Restriction in the license.
	ImageConstraintForAnalogComputerMonitorRestriction *bool `pulumi:"imageConstraintForAnalogComputerMonitorRestriction"`
	// Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive.
	ScmsRestriction *int `pulumi:"scmsRestriction"`
	// Specifies the output protection level for uncompressed digital audio. Supported values are 100, 150, 250 or 300.
	UncompressedDigitalAudioOpl *int `pulumi:"uncompressedDigitalAudioOpl"`
	// Specifies the output protection level for uncompressed digital video. Supported values are 100, 150, 250 or 300.
	UncompressedDigitalVideoOpl *int `pulumi:"uncompressedDigitalVideoOpl"`
}

// ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightInput is an input type that accepts ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightArgs and ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightInput` via:
//
//          ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightArgs{...}
type ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightInput interface {
	pulumi.Input

	ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput
	ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutputWithContext(context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput
}

type ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightArgs struct {
	// Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive.
	AgcAndColorStripeRestriction pulumi.IntPtrInput `pulumi:"agcAndColorStripeRestriction"`
	// Configures Unknown output handling settings of the license. Supported values are `Allowed`, `AllowedWithVideoConstriction` or `NotAllowed`.
	AllowPassingVideoContentToUnknownOutput pulumi.StringPtrInput `pulumi:"allowPassingVideoContentToUnknownOutput"`
	// Specifies the output protection level for compressed digital audio. Supported values are 100, 150 or 200.
	AnalogVideoOpl pulumi.IntPtrInput `pulumi:"analogVideoOpl"`
	// Specifies the output protection level for compressed digital audio.Supported values are 100, 150 or 200.
	CompressedDigitalAudioOpl pulumi.IntPtrInput `pulumi:"compressedDigitalAudioOpl"`
	// Enables the Image Constraint For Analog Component Video Restriction in the license.
	DigitalVideoOnlyContentRestriction pulumi.BoolPtrInput `pulumi:"digitalVideoOnlyContentRestriction"`
	// The amount of time that the license is valid after the license is first used to play content.
	FirstPlayExpiration pulumi.StringPtrInput `pulumi:"firstPlayExpiration"`
	// Enables the Image Constraint For Analog Component Video Restriction in the license.
	ImageConstraintForAnalogComponentVideoRestriction pulumi.BoolPtrInput `pulumi:"imageConstraintForAnalogComponentVideoRestriction"`
	// Enables the Image Constraint For Analog Component Video Restriction in the license.
	ImageConstraintForAnalogComputerMonitorRestriction pulumi.BoolPtrInput `pulumi:"imageConstraintForAnalogComputerMonitorRestriction"`
	// Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive.
	ScmsRestriction pulumi.IntPtrInput `pulumi:"scmsRestriction"`
	// Specifies the output protection level for uncompressed digital audio. Supported values are 100, 150, 250 or 300.
	UncompressedDigitalAudioOpl pulumi.IntPtrInput `pulumi:"uncompressedDigitalAudioOpl"`
	// Specifies the output protection level for uncompressed digital video. Supported values are 100, 150, 250 or 300.
	UncompressedDigitalVideoOpl pulumi.IntPtrInput `pulumi:"uncompressedDigitalVideoOpl"`
}

func (ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight)(nil)).Elem()
}

func (i ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightArgs) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput {
	return i.ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightArgs) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput)
}

func (i ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightArgs) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput {
	return i.ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightArgs) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput).ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutputWithContext(ctx)
}

// ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrInput is an input type that accepts ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightArgs, ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtr and ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrInput` via:
//
//          ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightArgs{...}
//
//  or:
//
//          nil
type ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrInput interface {
	pulumi.Input

	ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput
	ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutputWithContext(context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput
}

type contentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrType ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightArgs

func ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtr(v *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightArgs) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrInput {
	return (*contentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrType)(v)
}

func (*contentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight)(nil)).Elem()
}

func (i *contentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrType) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput {
	return i.ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutputWithContext(context.Background())
}

func (i *contentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrType) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput)
}

type ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight)(nil)).Elem()
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput {
	return o.ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutputWithContext(context.Background())
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight {
		return &v
	}).(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput)
}

// Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) AgcAndColorStripeRestriction() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *int {
		return v.AgcAndColorStripeRestriction
	}).(pulumi.IntPtrOutput)
}

// Configures Unknown output handling settings of the license. Supported values are `Allowed`, `AllowedWithVideoConstriction` or `NotAllowed`.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) AllowPassingVideoContentToUnknownOutput() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *string {
		return v.AllowPassingVideoContentToUnknownOutput
	}).(pulumi.StringPtrOutput)
}

// Specifies the output protection level for compressed digital audio. Supported values are 100, 150 or 200.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) AnalogVideoOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *int {
		return v.AnalogVideoOpl
	}).(pulumi.IntPtrOutput)
}

// Specifies the output protection level for compressed digital audio.Supported values are 100, 150 or 200.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) CompressedDigitalAudioOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *int {
		return v.CompressedDigitalAudioOpl
	}).(pulumi.IntPtrOutput)
}

// Enables the Image Constraint For Analog Component Video Restriction in the license.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) DigitalVideoOnlyContentRestriction() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *bool {
		return v.DigitalVideoOnlyContentRestriction
	}).(pulumi.BoolPtrOutput)
}

// The amount of time that the license is valid after the license is first used to play content.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) FirstPlayExpiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *string {
		return v.FirstPlayExpiration
	}).(pulumi.StringPtrOutput)
}

// Enables the Image Constraint For Analog Component Video Restriction in the license.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) ImageConstraintForAnalogComponentVideoRestriction() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *bool {
		return v.ImageConstraintForAnalogComponentVideoRestriction
	}).(pulumi.BoolPtrOutput)
}

// Enables the Image Constraint For Analog Component Video Restriction in the license.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) ImageConstraintForAnalogComputerMonitorRestriction() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *bool {
		return v.ImageConstraintForAnalogComputerMonitorRestriction
	}).(pulumi.BoolPtrOutput)
}

// Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) ScmsRestriction() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *int {
		return v.ScmsRestriction
	}).(pulumi.IntPtrOutput)
}

// Specifies the output protection level for uncompressed digital audio. Supported values are 100, 150, 250 or 300.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) UncompressedDigitalAudioOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *int {
		return v.UncompressedDigitalAudioOpl
	}).(pulumi.IntPtrOutput)
}

// Specifies the output protection level for uncompressed digital video. Supported values are 100, 150, 250 or 300.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) UncompressedDigitalVideoOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *int {
		return v.UncompressedDigitalVideoOpl
	}).(pulumi.IntPtrOutput)
}

type ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight)(nil)).Elem()
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput) Elem() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight {
		return *v
	}).(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput)
}

// Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput) AgcAndColorStripeRestriction() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *int {
		if v == nil {
			return nil
		}
		return v.AgcAndColorStripeRestriction
	}).(pulumi.IntPtrOutput)
}

// Configures Unknown output handling settings of the license. Supported values are `Allowed`, `AllowedWithVideoConstriction` or `NotAllowed`.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput) AllowPassingVideoContentToUnknownOutput() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *string {
		if v == nil {
			return nil
		}
		return v.AllowPassingVideoContentToUnknownOutput
	}).(pulumi.StringPtrOutput)
}

// Specifies the output protection level for compressed digital audio. Supported values are 100, 150 or 200.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput) AnalogVideoOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *int {
		if v == nil {
			return nil
		}
		return v.AnalogVideoOpl
	}).(pulumi.IntPtrOutput)
}

// Specifies the output protection level for compressed digital audio.Supported values are 100, 150 or 200.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput) CompressedDigitalAudioOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *int {
		if v == nil {
			return nil
		}
		return v.CompressedDigitalAudioOpl
	}).(pulumi.IntPtrOutput)
}

// Enables the Image Constraint For Analog Component Video Restriction in the license.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput) DigitalVideoOnlyContentRestriction() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *bool {
		if v == nil {
			return nil
		}
		return v.DigitalVideoOnlyContentRestriction
	}).(pulumi.BoolPtrOutput)
}

// The amount of time that the license is valid after the license is first used to play content.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput) FirstPlayExpiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *string {
		if v == nil {
			return nil
		}
		return v.FirstPlayExpiration
	}).(pulumi.StringPtrOutput)
}

// Enables the Image Constraint For Analog Component Video Restriction in the license.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput) ImageConstraintForAnalogComponentVideoRestriction() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *bool {
		if v == nil {
			return nil
		}
		return v.ImageConstraintForAnalogComponentVideoRestriction
	}).(pulumi.BoolPtrOutput)
}

// Enables the Image Constraint For Analog Component Video Restriction in the license.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput) ImageConstraintForAnalogComputerMonitorRestriction() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *bool {
		if v == nil {
			return nil
		}
		return v.ImageConstraintForAnalogComputerMonitorRestriction
	}).(pulumi.BoolPtrOutput)
}

// Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput) ScmsRestriction() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *int {
		if v == nil {
			return nil
		}
		return v.ScmsRestriction
	}).(pulumi.IntPtrOutput)
}

// Specifies the output protection level for uncompressed digital audio. Supported values are 100, 150, 250 or 300.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput) UncompressedDigitalAudioOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *int {
		if v == nil {
			return nil
		}
		return v.UncompressedDigitalAudioOpl
	}).(pulumi.IntPtrOutput)
}

// Specifies the output protection level for uncompressed digital video. Supported values are 100, 150, 250 or 300.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput) UncompressedDigitalVideoOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *int {
		if v == nil {
			return nil
		}
		return v.UncompressedDigitalVideoOpl
	}).(pulumi.IntPtrOutput)
}

type ContentKeyPolicyPolicyOptionTokenRestriction struct {
	// The audience for the token.
	Audience *string `pulumi:"audience"`
	// The token issuer.
	Issuer *string `pulumi:"issuer"`
	// The OpenID connect discovery document.
	OpenIdConnectDiscoveryDocument *string `pulumi:"openIdConnectDiscoveryDocument"`
	// The RSA Parameter exponent.
	PrimaryRsaTokenKeyExponent *string `pulumi:"primaryRsaTokenKeyExponent"`
	// The RSA Parameter modulus.
	PrimaryRsaTokenKeyModulus *string `pulumi:"primaryRsaTokenKeyModulus"`
	// The key value of the key. Specifies a symmetric key for token validation.
	PrimarySymmetricTokenKey *string `pulumi:"primarySymmetricTokenKey"`
	// The raw data field of a certificate in PKCS 12 format (X509Certificate2 in .NET). Specifies a certificate for token validation.
	PrimaryX509TokenKeyRaw *string `pulumi:"primaryX509TokenKeyRaw"`
	// One or more `requiredClaim` blocks as defined above.
	RequiredClaims []ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim `pulumi:"requiredClaims"`
	// The type of token. Supported values are `Jwt` or `Swt`.
	TokenType *string `pulumi:"tokenType"`
}

// ContentKeyPolicyPolicyOptionTokenRestrictionInput is an input type that accepts ContentKeyPolicyPolicyOptionTokenRestrictionArgs and ContentKeyPolicyPolicyOptionTokenRestrictionOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPolicyOptionTokenRestrictionInput` via:
//
//          ContentKeyPolicyPolicyOptionTokenRestrictionArgs{...}
type ContentKeyPolicyPolicyOptionTokenRestrictionInput interface {
	pulumi.Input

	ToContentKeyPolicyPolicyOptionTokenRestrictionOutput() ContentKeyPolicyPolicyOptionTokenRestrictionOutput
	ToContentKeyPolicyPolicyOptionTokenRestrictionOutputWithContext(context.Context) ContentKeyPolicyPolicyOptionTokenRestrictionOutput
}

type ContentKeyPolicyPolicyOptionTokenRestrictionArgs struct {
	// The audience for the token.
	Audience pulumi.StringPtrInput `pulumi:"audience"`
	// The token issuer.
	Issuer pulumi.StringPtrInput `pulumi:"issuer"`
	// The OpenID connect discovery document.
	OpenIdConnectDiscoveryDocument pulumi.StringPtrInput `pulumi:"openIdConnectDiscoveryDocument"`
	// The RSA Parameter exponent.
	PrimaryRsaTokenKeyExponent pulumi.StringPtrInput `pulumi:"primaryRsaTokenKeyExponent"`
	// The RSA Parameter modulus.
	PrimaryRsaTokenKeyModulus pulumi.StringPtrInput `pulumi:"primaryRsaTokenKeyModulus"`
	// The key value of the key. Specifies a symmetric key for token validation.
	PrimarySymmetricTokenKey pulumi.StringPtrInput `pulumi:"primarySymmetricTokenKey"`
	// The raw data field of a certificate in PKCS 12 format (X509Certificate2 in .NET). Specifies a certificate for token validation.
	PrimaryX509TokenKeyRaw pulumi.StringPtrInput `pulumi:"primaryX509TokenKeyRaw"`
	// One or more `requiredClaim` blocks as defined above.
	RequiredClaims ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayInput `pulumi:"requiredClaims"`
	// The type of token. Supported values are `Jwt` or `Swt`.
	TokenType pulumi.StringPtrInput `pulumi:"tokenType"`
}

func (ContentKeyPolicyPolicyOptionTokenRestrictionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPolicyOptionTokenRestriction)(nil)).Elem()
}

func (i ContentKeyPolicyPolicyOptionTokenRestrictionArgs) ToContentKeyPolicyPolicyOptionTokenRestrictionOutput() ContentKeyPolicyPolicyOptionTokenRestrictionOutput {
	return i.ToContentKeyPolicyPolicyOptionTokenRestrictionOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPolicyOptionTokenRestrictionArgs) ToContentKeyPolicyPolicyOptionTokenRestrictionOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionTokenRestrictionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionTokenRestrictionOutput)
}

func (i ContentKeyPolicyPolicyOptionTokenRestrictionArgs) ToContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput() ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput {
	return i.ToContentKeyPolicyPolicyOptionTokenRestrictionPtrOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPolicyOptionTokenRestrictionArgs) ToContentKeyPolicyPolicyOptionTokenRestrictionPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionTokenRestrictionOutput).ToContentKeyPolicyPolicyOptionTokenRestrictionPtrOutputWithContext(ctx)
}

// ContentKeyPolicyPolicyOptionTokenRestrictionPtrInput is an input type that accepts ContentKeyPolicyPolicyOptionTokenRestrictionArgs, ContentKeyPolicyPolicyOptionTokenRestrictionPtr and ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPolicyOptionTokenRestrictionPtrInput` via:
//
//          ContentKeyPolicyPolicyOptionTokenRestrictionArgs{...}
//
//  or:
//
//          nil
type ContentKeyPolicyPolicyOptionTokenRestrictionPtrInput interface {
	pulumi.Input

	ToContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput() ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput
	ToContentKeyPolicyPolicyOptionTokenRestrictionPtrOutputWithContext(context.Context) ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput
}

type contentKeyPolicyPolicyOptionTokenRestrictionPtrType ContentKeyPolicyPolicyOptionTokenRestrictionArgs

func ContentKeyPolicyPolicyOptionTokenRestrictionPtr(v *ContentKeyPolicyPolicyOptionTokenRestrictionArgs) ContentKeyPolicyPolicyOptionTokenRestrictionPtrInput {
	return (*contentKeyPolicyPolicyOptionTokenRestrictionPtrType)(v)
}

func (*contentKeyPolicyPolicyOptionTokenRestrictionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentKeyPolicyPolicyOptionTokenRestriction)(nil)).Elem()
}

func (i *contentKeyPolicyPolicyOptionTokenRestrictionPtrType) ToContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput() ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput {
	return i.ToContentKeyPolicyPolicyOptionTokenRestrictionPtrOutputWithContext(context.Background())
}

func (i *contentKeyPolicyPolicyOptionTokenRestrictionPtrType) ToContentKeyPolicyPolicyOptionTokenRestrictionPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput)
}

type ContentKeyPolicyPolicyOptionTokenRestrictionOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPolicyOptionTokenRestrictionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPolicyOptionTokenRestriction)(nil)).Elem()
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionOutput) ToContentKeyPolicyPolicyOptionTokenRestrictionOutput() ContentKeyPolicyPolicyOptionTokenRestrictionOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionOutput) ToContentKeyPolicyPolicyOptionTokenRestrictionOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionTokenRestrictionOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionOutput) ToContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput() ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput {
	return o.ToContentKeyPolicyPolicyOptionTokenRestrictionPtrOutputWithContext(context.Background())
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionOutput) ToContentKeyPolicyPolicyOptionTokenRestrictionPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionTokenRestriction) *ContentKeyPolicyPolicyOptionTokenRestriction {
		return &v
	}).(ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput)
}

// The audience for the token.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionTokenRestriction) *string { return v.Audience }).(pulumi.StringPtrOutput)
}

// The token issuer.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionTokenRestriction) *string { return v.Issuer }).(pulumi.StringPtrOutput)
}

// The OpenID connect discovery document.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionOutput) OpenIdConnectDiscoveryDocument() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionTokenRestriction) *string { return v.OpenIdConnectDiscoveryDocument }).(pulumi.StringPtrOutput)
}

// The RSA Parameter exponent.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionOutput) PrimaryRsaTokenKeyExponent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionTokenRestriction) *string { return v.PrimaryRsaTokenKeyExponent }).(pulumi.StringPtrOutput)
}

// The RSA Parameter modulus.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionOutput) PrimaryRsaTokenKeyModulus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionTokenRestriction) *string { return v.PrimaryRsaTokenKeyModulus }).(pulumi.StringPtrOutput)
}

// The key value of the key. Specifies a symmetric key for token validation.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionOutput) PrimarySymmetricTokenKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionTokenRestriction) *string { return v.PrimarySymmetricTokenKey }).(pulumi.StringPtrOutput)
}

// The raw data field of a certificate in PKCS 12 format (X509Certificate2 in .NET). Specifies a certificate for token validation.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionOutput) PrimaryX509TokenKeyRaw() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionTokenRestriction) *string { return v.PrimaryX509TokenKeyRaw }).(pulumi.StringPtrOutput)
}

// One or more `requiredClaim` blocks as defined above.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionOutput) RequiredClaims() ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionTokenRestriction) []ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim {
		return v.RequiredClaims
	}).(ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput)
}

// The type of token. Supported values are `Jwt` or `Swt`.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionOutput) TokenType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionTokenRestriction) *string { return v.TokenType }).(pulumi.StringPtrOutput)
}

type ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentKeyPolicyPolicyOptionTokenRestriction)(nil)).Elem()
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput) ToContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput() ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput) ToContentKeyPolicyPolicyOptionTokenRestrictionPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput) Elem() ContentKeyPolicyPolicyOptionTokenRestrictionOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionTokenRestriction) ContentKeyPolicyPolicyOptionTokenRestriction {
		return *v
	}).(ContentKeyPolicyPolicyOptionTokenRestrictionOutput)
}

// The audience for the token.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionTokenRestriction) *string {
		if v == nil {
			return nil
		}
		return v.Audience
	}).(pulumi.StringPtrOutput)
}

// The token issuer.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionTokenRestriction) *string {
		if v == nil {
			return nil
		}
		return v.Issuer
	}).(pulumi.StringPtrOutput)
}

// The OpenID connect discovery document.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput) OpenIdConnectDiscoveryDocument() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionTokenRestriction) *string {
		if v == nil {
			return nil
		}
		return v.OpenIdConnectDiscoveryDocument
	}).(pulumi.StringPtrOutput)
}

// The RSA Parameter exponent.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput) PrimaryRsaTokenKeyExponent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionTokenRestriction) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryRsaTokenKeyExponent
	}).(pulumi.StringPtrOutput)
}

// The RSA Parameter modulus.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput) PrimaryRsaTokenKeyModulus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionTokenRestriction) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryRsaTokenKeyModulus
	}).(pulumi.StringPtrOutput)
}

// The key value of the key. Specifies a symmetric key for token validation.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput) PrimarySymmetricTokenKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionTokenRestriction) *string {
		if v == nil {
			return nil
		}
		return v.PrimarySymmetricTokenKey
	}).(pulumi.StringPtrOutput)
}

// The raw data field of a certificate in PKCS 12 format (X509Certificate2 in .NET). Specifies a certificate for token validation.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput) PrimaryX509TokenKeyRaw() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionTokenRestriction) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryX509TokenKeyRaw
	}).(pulumi.StringPtrOutput)
}

// One or more `requiredClaim` blocks as defined above.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput) RequiredClaims() ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionTokenRestriction) []ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim {
		if v == nil {
			return nil
		}
		return v.RequiredClaims
	}).(ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput)
}

// The type of token. Supported values are `Jwt` or `Swt`.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput) TokenType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionTokenRestriction) *string {
		if v == nil {
			return nil
		}
		return v.TokenType
	}).(pulumi.StringPtrOutput)
}

type ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim struct {
	// Token claim type.
	Type *string `pulumi:"type"`
	// Token claim value.
	Value *string `pulumi:"value"`
}

// ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimInput is an input type that accepts ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArgs and ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimInput` via:
//
//          ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArgs{...}
type ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimInput interface {
	pulumi.Input

	ToContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput() ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput
	ToContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutputWithContext(context.Context) ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput
}

type ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArgs struct {
	// Token claim type.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Token claim value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim)(nil)).Elem()
}

func (i ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArgs) ToContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput() ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput {
	return i.ToContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArgs) ToContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput)
}

// ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayInput is an input type that accepts ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArray and ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayInput` via:
//
//          ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArray{ ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArgs{...} }
type ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayInput interface {
	pulumi.Input

	ToContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput() ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput
	ToContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutputWithContext(context.Context) ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput
}

type ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArray []ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimInput

func (ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim)(nil)).Elem()
}

func (i ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArray) ToContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput() ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput {
	return i.ToContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArray) ToContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput)
}

type ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim)(nil)).Elem()
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput) ToContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput() ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput) ToContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput {
	return o
}

// Token claim type.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Token claim value.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim)(nil)).Elem()
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput) ToContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput() ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput) ToContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput) Index(i pulumi.IntInput) ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim {
		return vs[0].([]ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim)[vs[1].(int)]
	}).(ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput)
}

type JobInputAsset struct {
	// A label that is assigned to a JobInputClip, that is used to satisfy a reference used in the Transform. For example, a Transform can be authored so as to take an image file with the label 'xyz' and apply it as an overlay onto the input video before it is encoded. When submitting a Job, exactly one of the JobInputs should be the image file, and it should have the label 'xyz'.
	Label *string `pulumi:"label"`
	// The name of the input Asset. Changing this forces a new Media Job to be created.
	Name string `pulumi:"name"`
}

// JobInputAssetInput is an input type that accepts JobInputAssetArgs and JobInputAssetOutput values.
// You can construct a concrete instance of `JobInputAssetInput` via:
//
//          JobInputAssetArgs{...}
type JobInputAssetInput interface {
	pulumi.Input

	ToJobInputAssetOutput() JobInputAssetOutput
	ToJobInputAssetOutputWithContext(context.Context) JobInputAssetOutput
}

type JobInputAssetArgs struct {
	// A label that is assigned to a JobInputClip, that is used to satisfy a reference used in the Transform. For example, a Transform can be authored so as to take an image file with the label 'xyz' and apply it as an overlay onto the input video before it is encoded. When submitting a Job, exactly one of the JobInputs should be the image file, and it should have the label 'xyz'.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// The name of the input Asset. Changing this forces a new Media Job to be created.
	Name pulumi.StringInput `pulumi:"name"`
}

func (JobInputAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobInputAsset)(nil)).Elem()
}

func (i JobInputAssetArgs) ToJobInputAssetOutput() JobInputAssetOutput {
	return i.ToJobInputAssetOutputWithContext(context.Background())
}

func (i JobInputAssetArgs) ToJobInputAssetOutputWithContext(ctx context.Context) JobInputAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobInputAssetOutput)
}

func (i JobInputAssetArgs) ToJobInputAssetPtrOutput() JobInputAssetPtrOutput {
	return i.ToJobInputAssetPtrOutputWithContext(context.Background())
}

func (i JobInputAssetArgs) ToJobInputAssetPtrOutputWithContext(ctx context.Context) JobInputAssetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobInputAssetOutput).ToJobInputAssetPtrOutputWithContext(ctx)
}

// JobInputAssetPtrInput is an input type that accepts JobInputAssetArgs, JobInputAssetPtr and JobInputAssetPtrOutput values.
// You can construct a concrete instance of `JobInputAssetPtrInput` via:
//
//          JobInputAssetArgs{...}
//
//  or:
//
//          nil
type JobInputAssetPtrInput interface {
	pulumi.Input

	ToJobInputAssetPtrOutput() JobInputAssetPtrOutput
	ToJobInputAssetPtrOutputWithContext(context.Context) JobInputAssetPtrOutput
}

type jobInputAssetPtrType JobInputAssetArgs

func JobInputAssetPtr(v *JobInputAssetArgs) JobInputAssetPtrInput {
	return (*jobInputAssetPtrType)(v)
}

func (*jobInputAssetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobInputAsset)(nil)).Elem()
}

func (i *jobInputAssetPtrType) ToJobInputAssetPtrOutput() JobInputAssetPtrOutput {
	return i.ToJobInputAssetPtrOutputWithContext(context.Background())
}

func (i *jobInputAssetPtrType) ToJobInputAssetPtrOutputWithContext(ctx context.Context) JobInputAssetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobInputAssetPtrOutput)
}

type JobInputAssetOutput struct{ *pulumi.OutputState }

func (JobInputAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobInputAsset)(nil)).Elem()
}

func (o JobInputAssetOutput) ToJobInputAssetOutput() JobInputAssetOutput {
	return o
}

func (o JobInputAssetOutput) ToJobInputAssetOutputWithContext(ctx context.Context) JobInputAssetOutput {
	return o
}

func (o JobInputAssetOutput) ToJobInputAssetPtrOutput() JobInputAssetPtrOutput {
	return o.ToJobInputAssetPtrOutputWithContext(context.Background())
}

func (o JobInputAssetOutput) ToJobInputAssetPtrOutputWithContext(ctx context.Context) JobInputAssetPtrOutput {
	return o.ApplyT(func(v JobInputAsset) *JobInputAsset {
		return &v
	}).(JobInputAssetPtrOutput)
}

// A label that is assigned to a JobInputClip, that is used to satisfy a reference used in the Transform. For example, a Transform can be authored so as to take an image file with the label 'xyz' and apply it as an overlay onto the input video before it is encoded. When submitting a Job, exactly one of the JobInputs should be the image file, and it should have the label 'xyz'.
func (o JobInputAssetOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobInputAsset) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// The name of the input Asset. Changing this forces a new Media Job to be created.
func (o JobInputAssetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v JobInputAsset) string { return v.Name }).(pulumi.StringOutput)
}

type JobInputAssetPtrOutput struct{ *pulumi.OutputState }

func (JobInputAssetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobInputAsset)(nil)).Elem()
}

func (o JobInputAssetPtrOutput) ToJobInputAssetPtrOutput() JobInputAssetPtrOutput {
	return o
}

func (o JobInputAssetPtrOutput) ToJobInputAssetPtrOutputWithContext(ctx context.Context) JobInputAssetPtrOutput {
	return o
}

func (o JobInputAssetPtrOutput) Elem() JobInputAssetOutput {
	return o.ApplyT(func(v *JobInputAsset) JobInputAsset { return *v }).(JobInputAssetOutput)
}

// A label that is assigned to a JobInputClip, that is used to satisfy a reference used in the Transform. For example, a Transform can be authored so as to take an image file with the label 'xyz' and apply it as an overlay onto the input video before it is encoded. When submitting a Job, exactly one of the JobInputs should be the image file, and it should have the label 'xyz'.
func (o JobInputAssetPtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobInputAsset) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

// The name of the input Asset. Changing this forces a new Media Job to be created.
func (o JobInputAssetPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobInputAsset) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

type JobOutputAsset struct {
	// A label that is assigned to a JobOutput in order to help uniquely identify it. This is useful when your Transform has more than one TransformOutput, whereby your Job has more than one JobOutput. In such cases, when you submit the Job, you will add two or more JobOutputs, in the same order as TransformOutputs in the Transform. Subsequently, when you retrieve the Job, either through events or on a GET request, you can use the label to easily identify the JobOutput. If a label is not provided, a default value of '{presetName}_{outputIndex}' will be used, where the preset name is the name of the preset in the corresponding TransformOutput and the output index is the relative index of the this JobOutput within the Job. Note that this index is the same as the relative index of the corresponding TransformOutput within its Transform.
	Label *string `pulumi:"label"`
	// The name of the output Asset. Changing this forces a new Media Job to be created.
	Name string `pulumi:"name"`
}

// JobOutputAssetInput is an input type that accepts JobOutputAssetArgs and JobOutputAssetOutput values.
// You can construct a concrete instance of `JobOutputAssetInput` via:
//
//          JobOutputAssetArgs{...}
type JobOutputAssetInput interface {
	pulumi.Input

	ToJobOutputAssetOutput() JobOutputAssetOutput
	ToJobOutputAssetOutputWithContext(context.Context) JobOutputAssetOutput
}

type JobOutputAssetArgs struct {
	// A label that is assigned to a JobOutput in order to help uniquely identify it. This is useful when your Transform has more than one TransformOutput, whereby your Job has more than one JobOutput. In such cases, when you submit the Job, you will add two or more JobOutputs, in the same order as TransformOutputs in the Transform. Subsequently, when you retrieve the Job, either through events or on a GET request, you can use the label to easily identify the JobOutput. If a label is not provided, a default value of '{presetName}_{outputIndex}' will be used, where the preset name is the name of the preset in the corresponding TransformOutput and the output index is the relative index of the this JobOutput within the Job. Note that this index is the same as the relative index of the corresponding TransformOutput within its Transform.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// The name of the output Asset. Changing this forces a new Media Job to be created.
	Name pulumi.StringInput `pulumi:"name"`
}

func (JobOutputAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobOutputAsset)(nil)).Elem()
}

func (i JobOutputAssetArgs) ToJobOutputAssetOutput() JobOutputAssetOutput {
	return i.ToJobOutputAssetOutputWithContext(context.Background())
}

func (i JobOutputAssetArgs) ToJobOutputAssetOutputWithContext(ctx context.Context) JobOutputAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutputAssetOutput)
}

// JobOutputAssetArrayInput is an input type that accepts JobOutputAssetArray and JobOutputAssetArrayOutput values.
// You can construct a concrete instance of `JobOutputAssetArrayInput` via:
//
//          JobOutputAssetArray{ JobOutputAssetArgs{...} }
type JobOutputAssetArrayInput interface {
	pulumi.Input

	ToJobOutputAssetArrayOutput() JobOutputAssetArrayOutput
	ToJobOutputAssetArrayOutputWithContext(context.Context) JobOutputAssetArrayOutput
}

type JobOutputAssetArray []JobOutputAssetInput

func (JobOutputAssetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobOutputAsset)(nil)).Elem()
}

func (i JobOutputAssetArray) ToJobOutputAssetArrayOutput() JobOutputAssetArrayOutput {
	return i.ToJobOutputAssetArrayOutputWithContext(context.Background())
}

func (i JobOutputAssetArray) ToJobOutputAssetArrayOutputWithContext(ctx context.Context) JobOutputAssetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutputAssetArrayOutput)
}

type JobOutputAssetOutput struct{ *pulumi.OutputState }

func (JobOutputAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobOutputAsset)(nil)).Elem()
}

func (o JobOutputAssetOutput) ToJobOutputAssetOutput() JobOutputAssetOutput {
	return o
}

func (o JobOutputAssetOutput) ToJobOutputAssetOutputWithContext(ctx context.Context) JobOutputAssetOutput {
	return o
}

// A label that is assigned to a JobOutput in order to help uniquely identify it. This is useful when your Transform has more than one TransformOutput, whereby your Job has more than one JobOutput. In such cases, when you submit the Job, you will add two or more JobOutputs, in the same order as TransformOutputs in the Transform. Subsequently, when you retrieve the Job, either through events or on a GET request, you can use the label to easily identify the JobOutput. If a label is not provided, a default value of '{presetName}_{outputIndex}' will be used, where the preset name is the name of the preset in the corresponding TransformOutput and the output index is the relative index of the this JobOutput within the Job. Note that this index is the same as the relative index of the corresponding TransformOutput within its Transform.
func (o JobOutputAssetOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobOutputAsset) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// The name of the output Asset. Changing this forces a new Media Job to be created.
func (o JobOutputAssetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v JobOutputAsset) string { return v.Name }).(pulumi.StringOutput)
}

type JobOutputAssetArrayOutput struct{ *pulumi.OutputState }

func (JobOutputAssetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobOutputAsset)(nil)).Elem()
}

func (o JobOutputAssetArrayOutput) ToJobOutputAssetArrayOutput() JobOutputAssetArrayOutput {
	return o
}

func (o JobOutputAssetArrayOutput) ToJobOutputAssetArrayOutputWithContext(ctx context.Context) JobOutputAssetArrayOutput {
	return o
}

func (o JobOutputAssetArrayOutput) Index(i pulumi.IntInput) JobOutputAssetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobOutputAsset {
		return vs[0].([]JobOutputAsset)[vs[1].(int)]
	}).(JobOutputAssetOutput)
}

type ServiceAccountIdentity struct {
	// The Principal ID associated with this Managed Service Identity.
	PrincipalId *string `pulumi:"principalId"`
	// The Tenant ID associated with this Managed Service Identity.
	TenantId *string `pulumi:"tenantId"`
	// Specifies the type of Managed Service Identity that should be configured on this Media Services Account. Possible value is  `SystemAssigned`.
	Type *string `pulumi:"type"`
}

// ServiceAccountIdentityInput is an input type that accepts ServiceAccountIdentityArgs and ServiceAccountIdentityOutput values.
// You can construct a concrete instance of `ServiceAccountIdentityInput` via:
//
//          ServiceAccountIdentityArgs{...}
type ServiceAccountIdentityInput interface {
	pulumi.Input

	ToServiceAccountIdentityOutput() ServiceAccountIdentityOutput
	ToServiceAccountIdentityOutputWithContext(context.Context) ServiceAccountIdentityOutput
}

type ServiceAccountIdentityArgs struct {
	// The Principal ID associated with this Managed Service Identity.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The Tenant ID associated with this Managed Service Identity.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// Specifies the type of Managed Service Identity that should be configured on this Media Services Account. Possible value is  `SystemAssigned`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ServiceAccountIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountIdentity)(nil)).Elem()
}

func (i ServiceAccountIdentityArgs) ToServiceAccountIdentityOutput() ServiceAccountIdentityOutput {
	return i.ToServiceAccountIdentityOutputWithContext(context.Background())
}

func (i ServiceAccountIdentityArgs) ToServiceAccountIdentityOutputWithContext(ctx context.Context) ServiceAccountIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountIdentityOutput)
}

func (i ServiceAccountIdentityArgs) ToServiceAccountIdentityPtrOutput() ServiceAccountIdentityPtrOutput {
	return i.ToServiceAccountIdentityPtrOutputWithContext(context.Background())
}

func (i ServiceAccountIdentityArgs) ToServiceAccountIdentityPtrOutputWithContext(ctx context.Context) ServiceAccountIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountIdentityOutput).ToServiceAccountIdentityPtrOutputWithContext(ctx)
}

// ServiceAccountIdentityPtrInput is an input type that accepts ServiceAccountIdentityArgs, ServiceAccountIdentityPtr and ServiceAccountIdentityPtrOutput values.
// You can construct a concrete instance of `ServiceAccountIdentityPtrInput` via:
//
//          ServiceAccountIdentityArgs{...}
//
//  or:
//
//          nil
type ServiceAccountIdentityPtrInput interface {
	pulumi.Input

	ToServiceAccountIdentityPtrOutput() ServiceAccountIdentityPtrOutput
	ToServiceAccountIdentityPtrOutputWithContext(context.Context) ServiceAccountIdentityPtrOutput
}

type serviceAccountIdentityPtrType ServiceAccountIdentityArgs

func ServiceAccountIdentityPtr(v *ServiceAccountIdentityArgs) ServiceAccountIdentityPtrInput {
	return (*serviceAccountIdentityPtrType)(v)
}

func (*serviceAccountIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccountIdentity)(nil)).Elem()
}

func (i *serviceAccountIdentityPtrType) ToServiceAccountIdentityPtrOutput() ServiceAccountIdentityPtrOutput {
	return i.ToServiceAccountIdentityPtrOutputWithContext(context.Background())
}

func (i *serviceAccountIdentityPtrType) ToServiceAccountIdentityPtrOutputWithContext(ctx context.Context) ServiceAccountIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountIdentityPtrOutput)
}

type ServiceAccountIdentityOutput struct{ *pulumi.OutputState }

func (ServiceAccountIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountIdentity)(nil)).Elem()
}

func (o ServiceAccountIdentityOutput) ToServiceAccountIdentityOutput() ServiceAccountIdentityOutput {
	return o
}

func (o ServiceAccountIdentityOutput) ToServiceAccountIdentityOutputWithContext(ctx context.Context) ServiceAccountIdentityOutput {
	return o
}

func (o ServiceAccountIdentityOutput) ToServiceAccountIdentityPtrOutput() ServiceAccountIdentityPtrOutput {
	return o.ToServiceAccountIdentityPtrOutputWithContext(context.Background())
}

func (o ServiceAccountIdentityOutput) ToServiceAccountIdentityPtrOutputWithContext(ctx context.Context) ServiceAccountIdentityPtrOutput {
	return o.ApplyT(func(v ServiceAccountIdentity) *ServiceAccountIdentity {
		return &v
	}).(ServiceAccountIdentityPtrOutput)
}

// The Principal ID associated with this Managed Service Identity.
func (o ServiceAccountIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAccountIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The Tenant ID associated with this Managed Service Identity.
func (o ServiceAccountIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAccountIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this Media Services Account. Possible value is  `SystemAssigned`.
func (o ServiceAccountIdentityOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAccountIdentity) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ServiceAccountIdentityPtrOutput struct{ *pulumi.OutputState }

func (ServiceAccountIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccountIdentity)(nil)).Elem()
}

func (o ServiceAccountIdentityPtrOutput) ToServiceAccountIdentityPtrOutput() ServiceAccountIdentityPtrOutput {
	return o
}

func (o ServiceAccountIdentityPtrOutput) ToServiceAccountIdentityPtrOutputWithContext(ctx context.Context) ServiceAccountIdentityPtrOutput {
	return o
}

func (o ServiceAccountIdentityPtrOutput) Elem() ServiceAccountIdentityOutput {
	return o.ApplyT(func(v *ServiceAccountIdentity) ServiceAccountIdentity { return *v }).(ServiceAccountIdentityOutput)
}

// The Principal ID associated with this Managed Service Identity.
func (o ServiceAccountIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccountIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The Tenant ID associated with this Managed Service Identity.
func (o ServiceAccountIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccountIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this Media Services Account. Possible value is  `SystemAssigned`.
func (o ServiceAccountIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccountIdentity) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type ServiceAccountStorageAccount struct {
	// Specifies the ID of the Storage Account that will be associated with the Media Services instance.
	Id string `pulumi:"id"`
	// Specifies whether the storage account should be the primary account or not. Defaults to `false`.
	IsPrimary *bool `pulumi:"isPrimary"`
}

// ServiceAccountStorageAccountInput is an input type that accepts ServiceAccountStorageAccountArgs and ServiceAccountStorageAccountOutput values.
// You can construct a concrete instance of `ServiceAccountStorageAccountInput` via:
//
//          ServiceAccountStorageAccountArgs{...}
type ServiceAccountStorageAccountInput interface {
	pulumi.Input

	ToServiceAccountStorageAccountOutput() ServiceAccountStorageAccountOutput
	ToServiceAccountStorageAccountOutputWithContext(context.Context) ServiceAccountStorageAccountOutput
}

type ServiceAccountStorageAccountArgs struct {
	// Specifies the ID of the Storage Account that will be associated with the Media Services instance.
	Id pulumi.StringInput `pulumi:"id"`
	// Specifies whether the storage account should be the primary account or not. Defaults to `false`.
	IsPrimary pulumi.BoolPtrInput `pulumi:"isPrimary"`
}

func (ServiceAccountStorageAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountStorageAccount)(nil)).Elem()
}

func (i ServiceAccountStorageAccountArgs) ToServiceAccountStorageAccountOutput() ServiceAccountStorageAccountOutput {
	return i.ToServiceAccountStorageAccountOutputWithContext(context.Background())
}

func (i ServiceAccountStorageAccountArgs) ToServiceAccountStorageAccountOutputWithContext(ctx context.Context) ServiceAccountStorageAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountStorageAccountOutput)
}

// ServiceAccountStorageAccountArrayInput is an input type that accepts ServiceAccountStorageAccountArray and ServiceAccountStorageAccountArrayOutput values.
// You can construct a concrete instance of `ServiceAccountStorageAccountArrayInput` via:
//
//          ServiceAccountStorageAccountArray{ ServiceAccountStorageAccountArgs{...} }
type ServiceAccountStorageAccountArrayInput interface {
	pulumi.Input

	ToServiceAccountStorageAccountArrayOutput() ServiceAccountStorageAccountArrayOutput
	ToServiceAccountStorageAccountArrayOutputWithContext(context.Context) ServiceAccountStorageAccountArrayOutput
}

type ServiceAccountStorageAccountArray []ServiceAccountStorageAccountInput

func (ServiceAccountStorageAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceAccountStorageAccount)(nil)).Elem()
}

func (i ServiceAccountStorageAccountArray) ToServiceAccountStorageAccountArrayOutput() ServiceAccountStorageAccountArrayOutput {
	return i.ToServiceAccountStorageAccountArrayOutputWithContext(context.Background())
}

func (i ServiceAccountStorageAccountArray) ToServiceAccountStorageAccountArrayOutputWithContext(ctx context.Context) ServiceAccountStorageAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountStorageAccountArrayOutput)
}

type ServiceAccountStorageAccountOutput struct{ *pulumi.OutputState }

func (ServiceAccountStorageAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountStorageAccount)(nil)).Elem()
}

func (o ServiceAccountStorageAccountOutput) ToServiceAccountStorageAccountOutput() ServiceAccountStorageAccountOutput {
	return o
}

func (o ServiceAccountStorageAccountOutput) ToServiceAccountStorageAccountOutputWithContext(ctx context.Context) ServiceAccountStorageAccountOutput {
	return o
}

// Specifies the ID of the Storage Account that will be associated with the Media Services instance.
func (o ServiceAccountStorageAccountOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceAccountStorageAccount) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies whether the storage account should be the primary account or not. Defaults to `false`.
func (o ServiceAccountStorageAccountOutput) IsPrimary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceAccountStorageAccount) *bool { return v.IsPrimary }).(pulumi.BoolPtrOutput)
}

type ServiceAccountStorageAccountArrayOutput struct{ *pulumi.OutputState }

func (ServiceAccountStorageAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceAccountStorageAccount)(nil)).Elem()
}

func (o ServiceAccountStorageAccountArrayOutput) ToServiceAccountStorageAccountArrayOutput() ServiceAccountStorageAccountArrayOutput {
	return o
}

func (o ServiceAccountStorageAccountArrayOutput) ToServiceAccountStorageAccountArrayOutputWithContext(ctx context.Context) ServiceAccountStorageAccountArrayOutput {
	return o
}

func (o ServiceAccountStorageAccountArrayOutput) Index(i pulumi.IntInput) ServiceAccountStorageAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceAccountStorageAccount {
		return vs[0].([]ServiceAccountStorageAccount)[vs[1].(int)]
	}).(ServiceAccountStorageAccountOutput)
}

type StreamingEndpointAccessControl struct {
	// One or more `akamaiSignatureHeaderAuthenticationKey` blocks as defined below.
	AkamaiSignatureHeaderAuthenticationKeys []StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKey `pulumi:"akamaiSignatureHeaderAuthenticationKeys"`
	// A `ip` block as defined below.
	IpAllows []StreamingEndpointAccessControlIpAllow `pulumi:"ipAllows"`
}

// StreamingEndpointAccessControlInput is an input type that accepts StreamingEndpointAccessControlArgs and StreamingEndpointAccessControlOutput values.
// You can construct a concrete instance of `StreamingEndpointAccessControlInput` via:
//
//          StreamingEndpointAccessControlArgs{...}
type StreamingEndpointAccessControlInput interface {
	pulumi.Input

	ToStreamingEndpointAccessControlOutput() StreamingEndpointAccessControlOutput
	ToStreamingEndpointAccessControlOutputWithContext(context.Context) StreamingEndpointAccessControlOutput
}

type StreamingEndpointAccessControlArgs struct {
	// One or more `akamaiSignatureHeaderAuthenticationKey` blocks as defined below.
	AkamaiSignatureHeaderAuthenticationKeys StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayInput `pulumi:"akamaiSignatureHeaderAuthenticationKeys"`
	// A `ip` block as defined below.
	IpAllows StreamingEndpointAccessControlIpAllowArrayInput `pulumi:"ipAllows"`
}

func (StreamingEndpointAccessControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingEndpointAccessControl)(nil)).Elem()
}

func (i StreamingEndpointAccessControlArgs) ToStreamingEndpointAccessControlOutput() StreamingEndpointAccessControlOutput {
	return i.ToStreamingEndpointAccessControlOutputWithContext(context.Background())
}

func (i StreamingEndpointAccessControlArgs) ToStreamingEndpointAccessControlOutputWithContext(ctx context.Context) StreamingEndpointAccessControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointAccessControlOutput)
}

func (i StreamingEndpointAccessControlArgs) ToStreamingEndpointAccessControlPtrOutput() StreamingEndpointAccessControlPtrOutput {
	return i.ToStreamingEndpointAccessControlPtrOutputWithContext(context.Background())
}

func (i StreamingEndpointAccessControlArgs) ToStreamingEndpointAccessControlPtrOutputWithContext(ctx context.Context) StreamingEndpointAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointAccessControlOutput).ToStreamingEndpointAccessControlPtrOutputWithContext(ctx)
}

// StreamingEndpointAccessControlPtrInput is an input type that accepts StreamingEndpointAccessControlArgs, StreamingEndpointAccessControlPtr and StreamingEndpointAccessControlPtrOutput values.
// You can construct a concrete instance of `StreamingEndpointAccessControlPtrInput` via:
//
//          StreamingEndpointAccessControlArgs{...}
//
//  or:
//
//          nil
type StreamingEndpointAccessControlPtrInput interface {
	pulumi.Input

	ToStreamingEndpointAccessControlPtrOutput() StreamingEndpointAccessControlPtrOutput
	ToStreamingEndpointAccessControlPtrOutputWithContext(context.Context) StreamingEndpointAccessControlPtrOutput
}

type streamingEndpointAccessControlPtrType StreamingEndpointAccessControlArgs

func StreamingEndpointAccessControlPtr(v *StreamingEndpointAccessControlArgs) StreamingEndpointAccessControlPtrInput {
	return (*streamingEndpointAccessControlPtrType)(v)
}

func (*streamingEndpointAccessControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingEndpointAccessControl)(nil)).Elem()
}

func (i *streamingEndpointAccessControlPtrType) ToStreamingEndpointAccessControlPtrOutput() StreamingEndpointAccessControlPtrOutput {
	return i.ToStreamingEndpointAccessControlPtrOutputWithContext(context.Background())
}

func (i *streamingEndpointAccessControlPtrType) ToStreamingEndpointAccessControlPtrOutputWithContext(ctx context.Context) StreamingEndpointAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointAccessControlPtrOutput)
}

type StreamingEndpointAccessControlOutput struct{ *pulumi.OutputState }

func (StreamingEndpointAccessControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingEndpointAccessControl)(nil)).Elem()
}

func (o StreamingEndpointAccessControlOutput) ToStreamingEndpointAccessControlOutput() StreamingEndpointAccessControlOutput {
	return o
}

func (o StreamingEndpointAccessControlOutput) ToStreamingEndpointAccessControlOutputWithContext(ctx context.Context) StreamingEndpointAccessControlOutput {
	return o
}

func (o StreamingEndpointAccessControlOutput) ToStreamingEndpointAccessControlPtrOutput() StreamingEndpointAccessControlPtrOutput {
	return o.ToStreamingEndpointAccessControlPtrOutputWithContext(context.Background())
}

func (o StreamingEndpointAccessControlOutput) ToStreamingEndpointAccessControlPtrOutputWithContext(ctx context.Context) StreamingEndpointAccessControlPtrOutput {
	return o.ApplyT(func(v StreamingEndpointAccessControl) *StreamingEndpointAccessControl {
		return &v
	}).(StreamingEndpointAccessControlPtrOutput)
}

// One or more `akamaiSignatureHeaderAuthenticationKey` blocks as defined below.
func (o StreamingEndpointAccessControlOutput) AkamaiSignatureHeaderAuthenticationKeys() StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput {
	return o.ApplyT(func(v StreamingEndpointAccessControl) []StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKey {
		return v.AkamaiSignatureHeaderAuthenticationKeys
	}).(StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput)
}

// A `ip` block as defined below.
func (o StreamingEndpointAccessControlOutput) IpAllows() StreamingEndpointAccessControlIpAllowArrayOutput {
	return o.ApplyT(func(v StreamingEndpointAccessControl) []StreamingEndpointAccessControlIpAllow { return v.IpAllows }).(StreamingEndpointAccessControlIpAllowArrayOutput)
}

type StreamingEndpointAccessControlPtrOutput struct{ *pulumi.OutputState }

func (StreamingEndpointAccessControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingEndpointAccessControl)(nil)).Elem()
}

func (o StreamingEndpointAccessControlPtrOutput) ToStreamingEndpointAccessControlPtrOutput() StreamingEndpointAccessControlPtrOutput {
	return o
}

func (o StreamingEndpointAccessControlPtrOutput) ToStreamingEndpointAccessControlPtrOutputWithContext(ctx context.Context) StreamingEndpointAccessControlPtrOutput {
	return o
}

func (o StreamingEndpointAccessControlPtrOutput) Elem() StreamingEndpointAccessControlOutput {
	return o.ApplyT(func(v *StreamingEndpointAccessControl) StreamingEndpointAccessControl { return *v }).(StreamingEndpointAccessControlOutput)
}

// One or more `akamaiSignatureHeaderAuthenticationKey` blocks as defined below.
func (o StreamingEndpointAccessControlPtrOutput) AkamaiSignatureHeaderAuthenticationKeys() StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput {
	return o.ApplyT(func(v *StreamingEndpointAccessControl) []StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKey {
		if v == nil {
			return nil
		}
		return v.AkamaiSignatureHeaderAuthenticationKeys
	}).(StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput)
}

// A `ip` block as defined below.
func (o StreamingEndpointAccessControlPtrOutput) IpAllows() StreamingEndpointAccessControlIpAllowArrayOutput {
	return o.ApplyT(func(v *StreamingEndpointAccessControl) []StreamingEndpointAccessControlIpAllow {
		if v == nil {
			return nil
		}
		return v.IpAllows
	}).(StreamingEndpointAccessControlIpAllowArrayOutput)
}

type StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKey struct {
	// Authentication key.
	Base64Key *string `pulumi:"base64Key"`
	// The expiration time of the authentication key.
	Expiration *string `pulumi:"expiration"`
	// Identifier of the key.
	Identifier *string `pulumi:"identifier"`
}

// StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyInput is an input type that accepts StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArgs and StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput values.
// You can construct a concrete instance of `StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyInput` via:
//
//          StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArgs{...}
type StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyInput interface {
	pulumi.Input

	ToStreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput() StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput
	ToStreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutputWithContext(context.Context) StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput
}

type StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArgs struct {
	// Authentication key.
	Base64Key pulumi.StringPtrInput `pulumi:"base64Key"`
	// The expiration time of the authentication key.
	Expiration pulumi.StringPtrInput `pulumi:"expiration"`
	// Identifier of the key.
	Identifier pulumi.StringPtrInput `pulumi:"identifier"`
}

func (StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKey)(nil)).Elem()
}

func (i StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArgs) ToStreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput() StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput {
	return i.ToStreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutputWithContext(context.Background())
}

func (i StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArgs) ToStreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutputWithContext(ctx context.Context) StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput)
}

// StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayInput is an input type that accepts StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArray and StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput values.
// You can construct a concrete instance of `StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayInput` via:
//
//          StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArray{ StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArgs{...} }
type StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayInput interface {
	pulumi.Input

	ToStreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput() StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput
	ToStreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutputWithContext(context.Context) StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput
}

type StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArray []StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyInput

func (StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKey)(nil)).Elem()
}

func (i StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArray) ToStreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput() StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput {
	return i.ToStreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutputWithContext(context.Background())
}

func (i StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArray) ToStreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutputWithContext(ctx context.Context) StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput)
}

type StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput struct{ *pulumi.OutputState }

func (StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKey)(nil)).Elem()
}

func (o StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput) ToStreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput() StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput {
	return o
}

func (o StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput) ToStreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutputWithContext(ctx context.Context) StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput {
	return o
}

// Authentication key.
func (o StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput) Base64Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKey) *string {
		return v.Base64Key
	}).(pulumi.StringPtrOutput)
}

// The expiration time of the authentication key.
func (o StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput) Expiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKey) *string {
		return v.Expiration
	}).(pulumi.StringPtrOutput)
}

// Identifier of the key.
func (o StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKey) *string {
		return v.Identifier
	}).(pulumi.StringPtrOutput)
}

type StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput struct{ *pulumi.OutputState }

func (StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKey)(nil)).Elem()
}

func (o StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput) ToStreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput() StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput {
	return o
}

func (o StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput) ToStreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutputWithContext(ctx context.Context) StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput {
	return o
}

func (o StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput) Index(i pulumi.IntInput) StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKey {
		return vs[0].([]StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKey)[vs[1].(int)]
	}).(StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput)
}

type StreamingEndpointAccessControlIpAllow struct {
	// The IP address to allow.
	Address *string `pulumi:"address"`
	// The friendly name for the IP address range.
	Name *string `pulumi:"name"`
	// The subnet mask prefix length (see CIDR notation).
	SubnetPrefixLength *int `pulumi:"subnetPrefixLength"`
}

// StreamingEndpointAccessControlIpAllowInput is an input type that accepts StreamingEndpointAccessControlIpAllowArgs and StreamingEndpointAccessControlIpAllowOutput values.
// You can construct a concrete instance of `StreamingEndpointAccessControlIpAllowInput` via:
//
//          StreamingEndpointAccessControlIpAllowArgs{...}
type StreamingEndpointAccessControlIpAllowInput interface {
	pulumi.Input

	ToStreamingEndpointAccessControlIpAllowOutput() StreamingEndpointAccessControlIpAllowOutput
	ToStreamingEndpointAccessControlIpAllowOutputWithContext(context.Context) StreamingEndpointAccessControlIpAllowOutput
}

type StreamingEndpointAccessControlIpAllowArgs struct {
	// The IP address to allow.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The friendly name for the IP address range.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The subnet mask prefix length (see CIDR notation).
	SubnetPrefixLength pulumi.IntPtrInput `pulumi:"subnetPrefixLength"`
}

func (StreamingEndpointAccessControlIpAllowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingEndpointAccessControlIpAllow)(nil)).Elem()
}

func (i StreamingEndpointAccessControlIpAllowArgs) ToStreamingEndpointAccessControlIpAllowOutput() StreamingEndpointAccessControlIpAllowOutput {
	return i.ToStreamingEndpointAccessControlIpAllowOutputWithContext(context.Background())
}

func (i StreamingEndpointAccessControlIpAllowArgs) ToStreamingEndpointAccessControlIpAllowOutputWithContext(ctx context.Context) StreamingEndpointAccessControlIpAllowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointAccessControlIpAllowOutput)
}

// StreamingEndpointAccessControlIpAllowArrayInput is an input type that accepts StreamingEndpointAccessControlIpAllowArray and StreamingEndpointAccessControlIpAllowArrayOutput values.
// You can construct a concrete instance of `StreamingEndpointAccessControlIpAllowArrayInput` via:
//
//          StreamingEndpointAccessControlIpAllowArray{ StreamingEndpointAccessControlIpAllowArgs{...} }
type StreamingEndpointAccessControlIpAllowArrayInput interface {
	pulumi.Input

	ToStreamingEndpointAccessControlIpAllowArrayOutput() StreamingEndpointAccessControlIpAllowArrayOutput
	ToStreamingEndpointAccessControlIpAllowArrayOutputWithContext(context.Context) StreamingEndpointAccessControlIpAllowArrayOutput
}

type StreamingEndpointAccessControlIpAllowArray []StreamingEndpointAccessControlIpAllowInput

func (StreamingEndpointAccessControlIpAllowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingEndpointAccessControlIpAllow)(nil)).Elem()
}

func (i StreamingEndpointAccessControlIpAllowArray) ToStreamingEndpointAccessControlIpAllowArrayOutput() StreamingEndpointAccessControlIpAllowArrayOutput {
	return i.ToStreamingEndpointAccessControlIpAllowArrayOutputWithContext(context.Background())
}

func (i StreamingEndpointAccessControlIpAllowArray) ToStreamingEndpointAccessControlIpAllowArrayOutputWithContext(ctx context.Context) StreamingEndpointAccessControlIpAllowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointAccessControlIpAllowArrayOutput)
}

type StreamingEndpointAccessControlIpAllowOutput struct{ *pulumi.OutputState }

func (StreamingEndpointAccessControlIpAllowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingEndpointAccessControlIpAllow)(nil)).Elem()
}

func (o StreamingEndpointAccessControlIpAllowOutput) ToStreamingEndpointAccessControlIpAllowOutput() StreamingEndpointAccessControlIpAllowOutput {
	return o
}

func (o StreamingEndpointAccessControlIpAllowOutput) ToStreamingEndpointAccessControlIpAllowOutputWithContext(ctx context.Context) StreamingEndpointAccessControlIpAllowOutput {
	return o
}

// The IP address to allow.
func (o StreamingEndpointAccessControlIpAllowOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingEndpointAccessControlIpAllow) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The friendly name for the IP address range.
func (o StreamingEndpointAccessControlIpAllowOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingEndpointAccessControlIpAllow) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The subnet mask prefix length (see CIDR notation).
func (o StreamingEndpointAccessControlIpAllowOutput) SubnetPrefixLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamingEndpointAccessControlIpAllow) *int { return v.SubnetPrefixLength }).(pulumi.IntPtrOutput)
}

type StreamingEndpointAccessControlIpAllowArrayOutput struct{ *pulumi.OutputState }

func (StreamingEndpointAccessControlIpAllowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingEndpointAccessControlIpAllow)(nil)).Elem()
}

func (o StreamingEndpointAccessControlIpAllowArrayOutput) ToStreamingEndpointAccessControlIpAllowArrayOutput() StreamingEndpointAccessControlIpAllowArrayOutput {
	return o
}

func (o StreamingEndpointAccessControlIpAllowArrayOutput) ToStreamingEndpointAccessControlIpAllowArrayOutputWithContext(ctx context.Context) StreamingEndpointAccessControlIpAllowArrayOutput {
	return o
}

func (o StreamingEndpointAccessControlIpAllowArrayOutput) Index(i pulumi.IntInput) StreamingEndpointAccessControlIpAllowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamingEndpointAccessControlIpAllow {
		return vs[0].([]StreamingEndpointAccessControlIpAllow)[vs[1].(int)]
	}).(StreamingEndpointAccessControlIpAllowOutput)
}

type StreamingEndpointCrossSiteAccessPolicy struct {
	// The content of clientaccesspolicy.xml used by Silverlight.
	ClientAccessPolicy *string `pulumi:"clientAccessPolicy"`
	// The content of crossdomain.xml used by Silverlight.
	CrossDomainPolicy *string `pulumi:"crossDomainPolicy"`
}

// StreamingEndpointCrossSiteAccessPolicyInput is an input type that accepts StreamingEndpointCrossSiteAccessPolicyArgs and StreamingEndpointCrossSiteAccessPolicyOutput values.
// You can construct a concrete instance of `StreamingEndpointCrossSiteAccessPolicyInput` via:
//
//          StreamingEndpointCrossSiteAccessPolicyArgs{...}
type StreamingEndpointCrossSiteAccessPolicyInput interface {
	pulumi.Input

	ToStreamingEndpointCrossSiteAccessPolicyOutput() StreamingEndpointCrossSiteAccessPolicyOutput
	ToStreamingEndpointCrossSiteAccessPolicyOutputWithContext(context.Context) StreamingEndpointCrossSiteAccessPolicyOutput
}

type StreamingEndpointCrossSiteAccessPolicyArgs struct {
	// The content of clientaccesspolicy.xml used by Silverlight.
	ClientAccessPolicy pulumi.StringPtrInput `pulumi:"clientAccessPolicy"`
	// The content of crossdomain.xml used by Silverlight.
	CrossDomainPolicy pulumi.StringPtrInput `pulumi:"crossDomainPolicy"`
}

func (StreamingEndpointCrossSiteAccessPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingEndpointCrossSiteAccessPolicy)(nil)).Elem()
}

func (i StreamingEndpointCrossSiteAccessPolicyArgs) ToStreamingEndpointCrossSiteAccessPolicyOutput() StreamingEndpointCrossSiteAccessPolicyOutput {
	return i.ToStreamingEndpointCrossSiteAccessPolicyOutputWithContext(context.Background())
}

func (i StreamingEndpointCrossSiteAccessPolicyArgs) ToStreamingEndpointCrossSiteAccessPolicyOutputWithContext(ctx context.Context) StreamingEndpointCrossSiteAccessPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointCrossSiteAccessPolicyOutput)
}

func (i StreamingEndpointCrossSiteAccessPolicyArgs) ToStreamingEndpointCrossSiteAccessPolicyPtrOutput() StreamingEndpointCrossSiteAccessPolicyPtrOutput {
	return i.ToStreamingEndpointCrossSiteAccessPolicyPtrOutputWithContext(context.Background())
}

func (i StreamingEndpointCrossSiteAccessPolicyArgs) ToStreamingEndpointCrossSiteAccessPolicyPtrOutputWithContext(ctx context.Context) StreamingEndpointCrossSiteAccessPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointCrossSiteAccessPolicyOutput).ToStreamingEndpointCrossSiteAccessPolicyPtrOutputWithContext(ctx)
}

// StreamingEndpointCrossSiteAccessPolicyPtrInput is an input type that accepts StreamingEndpointCrossSiteAccessPolicyArgs, StreamingEndpointCrossSiteAccessPolicyPtr and StreamingEndpointCrossSiteAccessPolicyPtrOutput values.
// You can construct a concrete instance of `StreamingEndpointCrossSiteAccessPolicyPtrInput` via:
//
//          StreamingEndpointCrossSiteAccessPolicyArgs{...}
//
//  or:
//
//          nil
type StreamingEndpointCrossSiteAccessPolicyPtrInput interface {
	pulumi.Input

	ToStreamingEndpointCrossSiteAccessPolicyPtrOutput() StreamingEndpointCrossSiteAccessPolicyPtrOutput
	ToStreamingEndpointCrossSiteAccessPolicyPtrOutputWithContext(context.Context) StreamingEndpointCrossSiteAccessPolicyPtrOutput
}

type streamingEndpointCrossSiteAccessPolicyPtrType StreamingEndpointCrossSiteAccessPolicyArgs

func StreamingEndpointCrossSiteAccessPolicyPtr(v *StreamingEndpointCrossSiteAccessPolicyArgs) StreamingEndpointCrossSiteAccessPolicyPtrInput {
	return (*streamingEndpointCrossSiteAccessPolicyPtrType)(v)
}

func (*streamingEndpointCrossSiteAccessPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingEndpointCrossSiteAccessPolicy)(nil)).Elem()
}

func (i *streamingEndpointCrossSiteAccessPolicyPtrType) ToStreamingEndpointCrossSiteAccessPolicyPtrOutput() StreamingEndpointCrossSiteAccessPolicyPtrOutput {
	return i.ToStreamingEndpointCrossSiteAccessPolicyPtrOutputWithContext(context.Background())
}

func (i *streamingEndpointCrossSiteAccessPolicyPtrType) ToStreamingEndpointCrossSiteAccessPolicyPtrOutputWithContext(ctx context.Context) StreamingEndpointCrossSiteAccessPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointCrossSiteAccessPolicyPtrOutput)
}

type StreamingEndpointCrossSiteAccessPolicyOutput struct{ *pulumi.OutputState }

func (StreamingEndpointCrossSiteAccessPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingEndpointCrossSiteAccessPolicy)(nil)).Elem()
}

func (o StreamingEndpointCrossSiteAccessPolicyOutput) ToStreamingEndpointCrossSiteAccessPolicyOutput() StreamingEndpointCrossSiteAccessPolicyOutput {
	return o
}

func (o StreamingEndpointCrossSiteAccessPolicyOutput) ToStreamingEndpointCrossSiteAccessPolicyOutputWithContext(ctx context.Context) StreamingEndpointCrossSiteAccessPolicyOutput {
	return o
}

func (o StreamingEndpointCrossSiteAccessPolicyOutput) ToStreamingEndpointCrossSiteAccessPolicyPtrOutput() StreamingEndpointCrossSiteAccessPolicyPtrOutput {
	return o.ToStreamingEndpointCrossSiteAccessPolicyPtrOutputWithContext(context.Background())
}

func (o StreamingEndpointCrossSiteAccessPolicyOutput) ToStreamingEndpointCrossSiteAccessPolicyPtrOutputWithContext(ctx context.Context) StreamingEndpointCrossSiteAccessPolicyPtrOutput {
	return o.ApplyT(func(v StreamingEndpointCrossSiteAccessPolicy) *StreamingEndpointCrossSiteAccessPolicy {
		return &v
	}).(StreamingEndpointCrossSiteAccessPolicyPtrOutput)
}

// The content of clientaccesspolicy.xml used by Silverlight.
func (o StreamingEndpointCrossSiteAccessPolicyOutput) ClientAccessPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingEndpointCrossSiteAccessPolicy) *string { return v.ClientAccessPolicy }).(pulumi.StringPtrOutput)
}

// The content of crossdomain.xml used by Silverlight.
func (o StreamingEndpointCrossSiteAccessPolicyOutput) CrossDomainPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingEndpointCrossSiteAccessPolicy) *string { return v.CrossDomainPolicy }).(pulumi.StringPtrOutput)
}

type StreamingEndpointCrossSiteAccessPolicyPtrOutput struct{ *pulumi.OutputState }

func (StreamingEndpointCrossSiteAccessPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingEndpointCrossSiteAccessPolicy)(nil)).Elem()
}

func (o StreamingEndpointCrossSiteAccessPolicyPtrOutput) ToStreamingEndpointCrossSiteAccessPolicyPtrOutput() StreamingEndpointCrossSiteAccessPolicyPtrOutput {
	return o
}

func (o StreamingEndpointCrossSiteAccessPolicyPtrOutput) ToStreamingEndpointCrossSiteAccessPolicyPtrOutputWithContext(ctx context.Context) StreamingEndpointCrossSiteAccessPolicyPtrOutput {
	return o
}

func (o StreamingEndpointCrossSiteAccessPolicyPtrOutput) Elem() StreamingEndpointCrossSiteAccessPolicyOutput {
	return o.ApplyT(func(v *StreamingEndpointCrossSiteAccessPolicy) StreamingEndpointCrossSiteAccessPolicy { return *v }).(StreamingEndpointCrossSiteAccessPolicyOutput)
}

// The content of clientaccesspolicy.xml used by Silverlight.
func (o StreamingEndpointCrossSiteAccessPolicyPtrOutput) ClientAccessPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingEndpointCrossSiteAccessPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ClientAccessPolicy
	}).(pulumi.StringPtrOutput)
}

// The content of crossdomain.xml used by Silverlight.
func (o StreamingEndpointCrossSiteAccessPolicyPtrOutput) CrossDomainPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingEndpointCrossSiteAccessPolicy) *string {
		if v == nil {
			return nil
		}
		return v.CrossDomainPolicy
	}).(pulumi.StringPtrOutput)
}

type StreamingLocatorContentKey struct {
	// ID of Content Key. Changing this forces a new Streaming Locator to be created.
	ContentKeyId *string `pulumi:"contentKeyId"`
	// Label of Content Key as specified in the Streaming Policy. Changing this forces a new Streaming Locator to be created.
	LabelReferenceInStreamingPolicy *string `pulumi:"labelReferenceInStreamingPolicy"`
	// Content Key Policy used by Content Key. Changing this forces a new Streaming Locator to be created.
	PolicyName *string `pulumi:"policyName"`
	// Encryption type of Content Key. Supported values are `CommonEncryptionCbcs`, `CommonEncryptionCenc` or `EnvelopeEncryption`. Changing this forces a new Streaming Locator to be created.
	Type *string `pulumi:"type"`
	// Value of Content Key. Changing this forces a new Streaming Locator to be created.
	Value *string `pulumi:"value"`
}

// StreamingLocatorContentKeyInput is an input type that accepts StreamingLocatorContentKeyArgs and StreamingLocatorContentKeyOutput values.
// You can construct a concrete instance of `StreamingLocatorContentKeyInput` via:
//
//          StreamingLocatorContentKeyArgs{...}
type StreamingLocatorContentKeyInput interface {
	pulumi.Input

	ToStreamingLocatorContentKeyOutput() StreamingLocatorContentKeyOutput
	ToStreamingLocatorContentKeyOutputWithContext(context.Context) StreamingLocatorContentKeyOutput
}

type StreamingLocatorContentKeyArgs struct {
	// ID of Content Key. Changing this forces a new Streaming Locator to be created.
	ContentKeyId pulumi.StringPtrInput `pulumi:"contentKeyId"`
	// Label of Content Key as specified in the Streaming Policy. Changing this forces a new Streaming Locator to be created.
	LabelReferenceInStreamingPolicy pulumi.StringPtrInput `pulumi:"labelReferenceInStreamingPolicy"`
	// Content Key Policy used by Content Key. Changing this forces a new Streaming Locator to be created.
	PolicyName pulumi.StringPtrInput `pulumi:"policyName"`
	// Encryption type of Content Key. Supported values are `CommonEncryptionCbcs`, `CommonEncryptionCenc` or `EnvelopeEncryption`. Changing this forces a new Streaming Locator to be created.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Value of Content Key. Changing this forces a new Streaming Locator to be created.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (StreamingLocatorContentKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingLocatorContentKey)(nil)).Elem()
}

func (i StreamingLocatorContentKeyArgs) ToStreamingLocatorContentKeyOutput() StreamingLocatorContentKeyOutput {
	return i.ToStreamingLocatorContentKeyOutputWithContext(context.Background())
}

func (i StreamingLocatorContentKeyArgs) ToStreamingLocatorContentKeyOutputWithContext(ctx context.Context) StreamingLocatorContentKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingLocatorContentKeyOutput)
}

// StreamingLocatorContentKeyArrayInput is an input type that accepts StreamingLocatorContentKeyArray and StreamingLocatorContentKeyArrayOutput values.
// You can construct a concrete instance of `StreamingLocatorContentKeyArrayInput` via:
//
//          StreamingLocatorContentKeyArray{ StreamingLocatorContentKeyArgs{...} }
type StreamingLocatorContentKeyArrayInput interface {
	pulumi.Input

	ToStreamingLocatorContentKeyArrayOutput() StreamingLocatorContentKeyArrayOutput
	ToStreamingLocatorContentKeyArrayOutputWithContext(context.Context) StreamingLocatorContentKeyArrayOutput
}

type StreamingLocatorContentKeyArray []StreamingLocatorContentKeyInput

func (StreamingLocatorContentKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingLocatorContentKey)(nil)).Elem()
}

func (i StreamingLocatorContentKeyArray) ToStreamingLocatorContentKeyArrayOutput() StreamingLocatorContentKeyArrayOutput {
	return i.ToStreamingLocatorContentKeyArrayOutputWithContext(context.Background())
}

func (i StreamingLocatorContentKeyArray) ToStreamingLocatorContentKeyArrayOutputWithContext(ctx context.Context) StreamingLocatorContentKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingLocatorContentKeyArrayOutput)
}

type StreamingLocatorContentKeyOutput struct{ *pulumi.OutputState }

func (StreamingLocatorContentKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingLocatorContentKey)(nil)).Elem()
}

func (o StreamingLocatorContentKeyOutput) ToStreamingLocatorContentKeyOutput() StreamingLocatorContentKeyOutput {
	return o
}

func (o StreamingLocatorContentKeyOutput) ToStreamingLocatorContentKeyOutputWithContext(ctx context.Context) StreamingLocatorContentKeyOutput {
	return o
}

// ID of Content Key. Changing this forces a new Streaming Locator to be created.
func (o StreamingLocatorContentKeyOutput) ContentKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingLocatorContentKey) *string { return v.ContentKeyId }).(pulumi.StringPtrOutput)
}

// Label of Content Key as specified in the Streaming Policy. Changing this forces a new Streaming Locator to be created.
func (o StreamingLocatorContentKeyOutput) LabelReferenceInStreamingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingLocatorContentKey) *string { return v.LabelReferenceInStreamingPolicy }).(pulumi.StringPtrOutput)
}

// Content Key Policy used by Content Key. Changing this forces a new Streaming Locator to be created.
func (o StreamingLocatorContentKeyOutput) PolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingLocatorContentKey) *string { return v.PolicyName }).(pulumi.StringPtrOutput)
}

// Encryption type of Content Key. Supported values are `CommonEncryptionCbcs`, `CommonEncryptionCenc` or `EnvelopeEncryption`. Changing this forces a new Streaming Locator to be created.
func (o StreamingLocatorContentKeyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingLocatorContentKey) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Value of Content Key. Changing this forces a new Streaming Locator to be created.
func (o StreamingLocatorContentKeyOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingLocatorContentKey) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type StreamingLocatorContentKeyArrayOutput struct{ *pulumi.OutputState }

func (StreamingLocatorContentKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingLocatorContentKey)(nil)).Elem()
}

func (o StreamingLocatorContentKeyArrayOutput) ToStreamingLocatorContentKeyArrayOutput() StreamingLocatorContentKeyArrayOutput {
	return o
}

func (o StreamingLocatorContentKeyArrayOutput) ToStreamingLocatorContentKeyArrayOutputWithContext(ctx context.Context) StreamingLocatorContentKeyArrayOutput {
	return o
}

func (o StreamingLocatorContentKeyArrayOutput) Index(i pulumi.IntInput) StreamingLocatorContentKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamingLocatorContentKey {
		return vs[0].([]StreamingLocatorContentKey)[vs[1].(int)]
	}).(StreamingLocatorContentKeyOutput)
}

type StreamingPolicyCommonEncryptionCbcs struct {
	// A `defaultContentKey` block as defined below. Changing this forces a new Streaming Policy to be created.
	DefaultContentKey *StreamingPolicyCommonEncryptionCbcsDefaultContentKey `pulumi:"defaultContentKey"`
	// A `drmFairplay` block as defined below. Changing this forces a new Streaming Policy to be created.
	DrmFairplay *StreamingPolicyCommonEncryptionCbcsDrmFairplay `pulumi:"drmFairplay"`
	// A `enabledProtocols` block as defined below. Changing this forces a new Streaming Policy to be created.
	EnabledProtocols *StreamingPolicyCommonEncryptionCbcsEnabledProtocols `pulumi:"enabledProtocols"`
}

// StreamingPolicyCommonEncryptionCbcsInput is an input type that accepts StreamingPolicyCommonEncryptionCbcsArgs and StreamingPolicyCommonEncryptionCbcsOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCbcsInput` via:
//
//          StreamingPolicyCommonEncryptionCbcsArgs{...}
type StreamingPolicyCommonEncryptionCbcsInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCbcsOutput() StreamingPolicyCommonEncryptionCbcsOutput
	ToStreamingPolicyCommonEncryptionCbcsOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCbcsOutput
}

type StreamingPolicyCommonEncryptionCbcsArgs struct {
	// A `defaultContentKey` block as defined below. Changing this forces a new Streaming Policy to be created.
	DefaultContentKey StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrInput `pulumi:"defaultContentKey"`
	// A `drmFairplay` block as defined below. Changing this forces a new Streaming Policy to be created.
	DrmFairplay StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrInput `pulumi:"drmFairplay"`
	// A `enabledProtocols` block as defined below. Changing this forces a new Streaming Policy to be created.
	EnabledProtocols StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrInput `pulumi:"enabledProtocols"`
}

func (StreamingPolicyCommonEncryptionCbcsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCbcs)(nil)).Elem()
}

func (i StreamingPolicyCommonEncryptionCbcsArgs) ToStreamingPolicyCommonEncryptionCbcsOutput() StreamingPolicyCommonEncryptionCbcsOutput {
	return i.ToStreamingPolicyCommonEncryptionCbcsOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCbcsArgs) ToStreamingPolicyCommonEncryptionCbcsOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCbcsOutput)
}

func (i StreamingPolicyCommonEncryptionCbcsArgs) ToStreamingPolicyCommonEncryptionCbcsPtrOutput() StreamingPolicyCommonEncryptionCbcsPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCbcsPtrOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCbcsArgs) ToStreamingPolicyCommonEncryptionCbcsPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCbcsOutput).ToStreamingPolicyCommonEncryptionCbcsPtrOutputWithContext(ctx)
}

// StreamingPolicyCommonEncryptionCbcsPtrInput is an input type that accepts StreamingPolicyCommonEncryptionCbcsArgs, StreamingPolicyCommonEncryptionCbcsPtr and StreamingPolicyCommonEncryptionCbcsPtrOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCbcsPtrInput` via:
//
//          StreamingPolicyCommonEncryptionCbcsArgs{...}
//
//  or:
//
//          nil
type StreamingPolicyCommonEncryptionCbcsPtrInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCbcsPtrOutput() StreamingPolicyCommonEncryptionCbcsPtrOutput
	ToStreamingPolicyCommonEncryptionCbcsPtrOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCbcsPtrOutput
}

type streamingPolicyCommonEncryptionCbcsPtrType StreamingPolicyCommonEncryptionCbcsArgs

func StreamingPolicyCommonEncryptionCbcsPtr(v *StreamingPolicyCommonEncryptionCbcsArgs) StreamingPolicyCommonEncryptionCbcsPtrInput {
	return (*streamingPolicyCommonEncryptionCbcsPtrType)(v)
}

func (*streamingPolicyCommonEncryptionCbcsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCbcs)(nil)).Elem()
}

func (i *streamingPolicyCommonEncryptionCbcsPtrType) ToStreamingPolicyCommonEncryptionCbcsPtrOutput() StreamingPolicyCommonEncryptionCbcsPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCbcsPtrOutputWithContext(context.Background())
}

func (i *streamingPolicyCommonEncryptionCbcsPtrType) ToStreamingPolicyCommonEncryptionCbcsPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCbcsPtrOutput)
}

type StreamingPolicyCommonEncryptionCbcsOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCbcsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCbcs)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCbcsOutput) ToStreamingPolicyCommonEncryptionCbcsOutput() StreamingPolicyCommonEncryptionCbcsOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsOutput) ToStreamingPolicyCommonEncryptionCbcsOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsOutput) ToStreamingPolicyCommonEncryptionCbcsPtrOutput() StreamingPolicyCommonEncryptionCbcsPtrOutput {
	return o.ToStreamingPolicyCommonEncryptionCbcsPtrOutputWithContext(context.Background())
}

func (o StreamingPolicyCommonEncryptionCbcsOutput) ToStreamingPolicyCommonEncryptionCbcsPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCbcs) *StreamingPolicyCommonEncryptionCbcs {
		return &v
	}).(StreamingPolicyCommonEncryptionCbcsPtrOutput)
}

// A `defaultContentKey` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsOutput) DefaultContentKey() StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCbcs) *StreamingPolicyCommonEncryptionCbcsDefaultContentKey {
		return v.DefaultContentKey
	}).(StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput)
}

// A `drmFairplay` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsOutput) DrmFairplay() StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCbcs) *StreamingPolicyCommonEncryptionCbcsDrmFairplay {
		return v.DrmFairplay
	}).(StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput)
}

// A `enabledProtocols` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsOutput) EnabledProtocols() StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCbcs) *StreamingPolicyCommonEncryptionCbcsEnabledProtocols {
		return v.EnabledProtocols
	}).(StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput)
}

type StreamingPolicyCommonEncryptionCbcsPtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCbcsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCbcs)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCbcsPtrOutput) ToStreamingPolicyCommonEncryptionCbcsPtrOutput() StreamingPolicyCommonEncryptionCbcsPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsPtrOutput) ToStreamingPolicyCommonEncryptionCbcsPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsPtrOutput) Elem() StreamingPolicyCommonEncryptionCbcsOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCbcs) StreamingPolicyCommonEncryptionCbcs { return *v }).(StreamingPolicyCommonEncryptionCbcsOutput)
}

// A `defaultContentKey` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsPtrOutput) DefaultContentKey() StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCbcs) *StreamingPolicyCommonEncryptionCbcsDefaultContentKey {
		if v == nil {
			return nil
		}
		return v.DefaultContentKey
	}).(StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput)
}

// A `drmFairplay` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsPtrOutput) DrmFairplay() StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCbcs) *StreamingPolicyCommonEncryptionCbcsDrmFairplay {
		if v == nil {
			return nil
		}
		return v.DrmFairplay
	}).(StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput)
}

// A `enabledProtocols` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsPtrOutput) EnabledProtocols() StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCbcs) *StreamingPolicyCommonEncryptionCbcsEnabledProtocols {
		if v == nil {
			return nil
		}
		return v.EnabledProtocols
	}).(StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput)
}

type StreamingPolicyCommonEncryptionCbcsDefaultContentKey struct {
	// Label can be used to specify Content Key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
	Label *string `pulumi:"label"`
	// Policy used by Default Key. Changing this forces a new Streaming Policy to be created.
	PolicyName *string `pulumi:"policyName"`
}

// StreamingPolicyCommonEncryptionCbcsDefaultContentKeyInput is an input type that accepts StreamingPolicyCommonEncryptionCbcsDefaultContentKeyArgs and StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCbcsDefaultContentKeyInput` via:
//
//          StreamingPolicyCommonEncryptionCbcsDefaultContentKeyArgs{...}
type StreamingPolicyCommonEncryptionCbcsDefaultContentKeyInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput() StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput
	ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput
}

type StreamingPolicyCommonEncryptionCbcsDefaultContentKeyArgs struct {
	// Label can be used to specify Content Key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Policy used by Default Key. Changing this forces a new Streaming Policy to be created.
	PolicyName pulumi.StringPtrInput `pulumi:"policyName"`
}

func (StreamingPolicyCommonEncryptionCbcsDefaultContentKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCbcsDefaultContentKey)(nil)).Elem()
}

func (i StreamingPolicyCommonEncryptionCbcsDefaultContentKeyArgs) ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput() StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput {
	return i.ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCbcsDefaultContentKeyArgs) ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput)
}

func (i StreamingPolicyCommonEncryptionCbcsDefaultContentKeyArgs) ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput() StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCbcsDefaultContentKeyArgs) ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput).ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutputWithContext(ctx)
}

// StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrInput is an input type that accepts StreamingPolicyCommonEncryptionCbcsDefaultContentKeyArgs, StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtr and StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrInput` via:
//
//          StreamingPolicyCommonEncryptionCbcsDefaultContentKeyArgs{...}
//
//  or:
//
//          nil
type StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput() StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput
	ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput
}

type streamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrType StreamingPolicyCommonEncryptionCbcsDefaultContentKeyArgs

func StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtr(v *StreamingPolicyCommonEncryptionCbcsDefaultContentKeyArgs) StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrInput {
	return (*streamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrType)(v)
}

func (*streamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCbcsDefaultContentKey)(nil)).Elem()
}

func (i *streamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrType) ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput() StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutputWithContext(context.Background())
}

func (i *streamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrType) ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput)
}

type StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCbcsDefaultContentKey)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput) ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput() StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput) ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput) ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput() StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput {
	return o.ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutputWithContext(context.Background())
}

func (o StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput) ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCbcsDefaultContentKey) *StreamingPolicyCommonEncryptionCbcsDefaultContentKey {
		return &v
	}).(StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput)
}

// Label can be used to specify Content Key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCbcsDefaultContentKey) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Policy used by Default Key. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput) PolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCbcsDefaultContentKey) *string { return v.PolicyName }).(pulumi.StringPtrOutput)
}

type StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCbcsDefaultContentKey)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput) ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput() StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput) ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput) Elem() StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCbcsDefaultContentKey) StreamingPolicyCommonEncryptionCbcsDefaultContentKey {
		return *v
	}).(StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput)
}

// Label can be used to specify Content Key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCbcsDefaultContentKey) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

// Policy used by Default Key. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput) PolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCbcsDefaultContentKey) *string {
		if v == nil {
			return nil
		}
		return v.PolicyName
	}).(pulumi.StringPtrOutput)
}

type StreamingPolicyCommonEncryptionCbcsDrmFairplay struct {
	// All license to be persistent or not. Changing this forces a new Streaming Policy to be created.
	AllowPersistentLicense *bool `pulumi:"allowPersistentLicense"`
	// Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the value specific to the request. The currently supported token values are `{AlternativeMediaId}`, which is replaced with the value of `StreamingLocatorId.AlternativeMediaId`, and `{ContentKeyId}`, which is replaced with the value of identifier of the key being requested. Changing this forces a new Streaming Policy to be created.
	CustomLicenseAcquisitionUrlTemplate *string `pulumi:"customLicenseAcquisitionUrlTemplate"`
}

// StreamingPolicyCommonEncryptionCbcsDrmFairplayInput is an input type that accepts StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs and StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCbcsDrmFairplayInput` via:
//
//          StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs{...}
type StreamingPolicyCommonEncryptionCbcsDrmFairplayInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCbcsDrmFairplayOutput() StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput
	ToStreamingPolicyCommonEncryptionCbcsDrmFairplayOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput
}

type StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs struct {
	// All license to be persistent or not. Changing this forces a new Streaming Policy to be created.
	AllowPersistentLicense pulumi.BoolPtrInput `pulumi:"allowPersistentLicense"`
	// Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the value specific to the request. The currently supported token values are `{AlternativeMediaId}`, which is replaced with the value of `StreamingLocatorId.AlternativeMediaId`, and `{ContentKeyId}`, which is replaced with the value of identifier of the key being requested. Changing this forces a new Streaming Policy to be created.
	CustomLicenseAcquisitionUrlTemplate pulumi.StringPtrInput `pulumi:"customLicenseAcquisitionUrlTemplate"`
}

func (StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCbcsDrmFairplay)(nil)).Elem()
}

func (i StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs) ToStreamingPolicyCommonEncryptionCbcsDrmFairplayOutput() StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput {
	return i.ToStreamingPolicyCommonEncryptionCbcsDrmFairplayOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs) ToStreamingPolicyCommonEncryptionCbcsDrmFairplayOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput)
}

func (i StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs) ToStreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput() StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs) ToStreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput).ToStreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutputWithContext(ctx)
}

// StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrInput is an input type that accepts StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs, StreamingPolicyCommonEncryptionCbcsDrmFairplayPtr and StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrInput` via:
//
//          StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs{...}
//
//  or:
//
//          nil
type StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput() StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput
	ToStreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput
}

type streamingPolicyCommonEncryptionCbcsDrmFairplayPtrType StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs

func StreamingPolicyCommonEncryptionCbcsDrmFairplayPtr(v *StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs) StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrInput {
	return (*streamingPolicyCommonEncryptionCbcsDrmFairplayPtrType)(v)
}

func (*streamingPolicyCommonEncryptionCbcsDrmFairplayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCbcsDrmFairplay)(nil)).Elem()
}

func (i *streamingPolicyCommonEncryptionCbcsDrmFairplayPtrType) ToStreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput() StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutputWithContext(context.Background())
}

func (i *streamingPolicyCommonEncryptionCbcsDrmFairplayPtrType) ToStreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput)
}

type StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCbcsDrmFairplay)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput) ToStreamingPolicyCommonEncryptionCbcsDrmFairplayOutput() StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput) ToStreamingPolicyCommonEncryptionCbcsDrmFairplayOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput) ToStreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput() StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput {
	return o.ToStreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutputWithContext(context.Background())
}

func (o StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput) ToStreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCbcsDrmFairplay) *StreamingPolicyCommonEncryptionCbcsDrmFairplay {
		return &v
	}).(StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput)
}

// All license to be persistent or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput) AllowPersistentLicense() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCbcsDrmFairplay) *bool { return v.AllowPersistentLicense }).(pulumi.BoolPtrOutput)
}

// Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the value specific to the request. The currently supported token values are `{AlternativeMediaId}`, which is replaced with the value of `StreamingLocatorId.AlternativeMediaId`, and `{ContentKeyId}`, which is replaced with the value of identifier of the key being requested. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput) CustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCbcsDrmFairplay) *string {
		return v.CustomLicenseAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

type StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCbcsDrmFairplay)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput) ToStreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput() StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput) ToStreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput) Elem() StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCbcsDrmFairplay) StreamingPolicyCommonEncryptionCbcsDrmFairplay {
		return *v
	}).(StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput)
}

// All license to be persistent or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput) AllowPersistentLicense() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCbcsDrmFairplay) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPersistentLicense
	}).(pulumi.BoolPtrOutput)
}

// Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the value specific to the request. The currently supported token values are `{AlternativeMediaId}`, which is replaced with the value of `StreamingLocatorId.AlternativeMediaId`, and `{ContentKeyId}`, which is replaced with the value of identifier of the key being requested. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput) CustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCbcsDrmFairplay) *string {
		if v == nil {
			return nil
		}
		return v.CustomLicenseAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

type StreamingPolicyCommonEncryptionCbcsEnabledProtocols struct {
	// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
	Dash *bool `pulumi:"dash"`
	// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
	Download *bool `pulumi:"download"`
	// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
	Hls *bool `pulumi:"hls"`
	// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
	SmoothStreaming *bool `pulumi:"smoothStreaming"`
}

// StreamingPolicyCommonEncryptionCbcsEnabledProtocolsInput is an input type that accepts StreamingPolicyCommonEncryptionCbcsEnabledProtocolsArgs and StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCbcsEnabledProtocolsInput` via:
//
//          StreamingPolicyCommonEncryptionCbcsEnabledProtocolsArgs{...}
type StreamingPolicyCommonEncryptionCbcsEnabledProtocolsInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput() StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput
	ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput
}

type StreamingPolicyCommonEncryptionCbcsEnabledProtocolsArgs struct {
	// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
	Dash pulumi.BoolPtrInput `pulumi:"dash"`
	// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
	Download pulumi.BoolPtrInput `pulumi:"download"`
	// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
	Hls pulumi.BoolPtrInput `pulumi:"hls"`
	// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
	SmoothStreaming pulumi.BoolPtrInput `pulumi:"smoothStreaming"`
}

func (StreamingPolicyCommonEncryptionCbcsEnabledProtocolsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCbcsEnabledProtocols)(nil)).Elem()
}

func (i StreamingPolicyCommonEncryptionCbcsEnabledProtocolsArgs) ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput() StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput {
	return i.ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCbcsEnabledProtocolsArgs) ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput)
}

func (i StreamingPolicyCommonEncryptionCbcsEnabledProtocolsArgs) ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput() StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCbcsEnabledProtocolsArgs) ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput).ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutputWithContext(ctx)
}

// StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrInput is an input type that accepts StreamingPolicyCommonEncryptionCbcsEnabledProtocolsArgs, StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtr and StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrInput` via:
//
//          StreamingPolicyCommonEncryptionCbcsEnabledProtocolsArgs{...}
//
//  or:
//
//          nil
type StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput() StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput
	ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput
}

type streamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrType StreamingPolicyCommonEncryptionCbcsEnabledProtocolsArgs

func StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtr(v *StreamingPolicyCommonEncryptionCbcsEnabledProtocolsArgs) StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrInput {
	return (*streamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrType)(v)
}

func (*streamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCbcsEnabledProtocols)(nil)).Elem()
}

func (i *streamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrType) ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput() StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutputWithContext(context.Background())
}

func (i *streamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrType) ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput)
}

type StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCbcsEnabledProtocols)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput) ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput() StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput) ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput) ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput() StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput {
	return o.ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutputWithContext(context.Background())
}

func (o StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput) ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCbcsEnabledProtocols) *StreamingPolicyCommonEncryptionCbcsEnabledProtocols {
		return &v
	}).(StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput)
}

// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput) Dash() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCbcsEnabledProtocols) *bool { return v.Dash }).(pulumi.BoolPtrOutput)
}

// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput) Download() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCbcsEnabledProtocols) *bool { return v.Download }).(pulumi.BoolPtrOutput)
}

// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput) Hls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCbcsEnabledProtocols) *bool { return v.Hls }).(pulumi.BoolPtrOutput)
}

// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput) SmoothStreaming() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCbcsEnabledProtocols) *bool { return v.SmoothStreaming }).(pulumi.BoolPtrOutput)
}

type StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCbcsEnabledProtocols)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput) ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput() StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput) ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput) Elem() StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCbcsEnabledProtocols) StreamingPolicyCommonEncryptionCbcsEnabledProtocols {
		return *v
	}).(StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput)
}

// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput) Dash() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCbcsEnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return v.Dash
	}).(pulumi.BoolPtrOutput)
}

// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput) Download() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCbcsEnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return v.Download
	}).(pulumi.BoolPtrOutput)
}

// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput) Hls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCbcsEnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return v.Hls
	}).(pulumi.BoolPtrOutput)
}

// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput) SmoothStreaming() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCbcsEnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return v.SmoothStreaming
	}).(pulumi.BoolPtrOutput)
}

type StreamingPolicyCommonEncryptionCenc struct {
	// A `defaultContentKey` block as defined below. Changing this forces a new Streaming Policy to be created.
	DefaultContentKey *StreamingPolicyCommonEncryptionCencDefaultContentKey `pulumi:"defaultContentKey"`
	// A `drmPlayready` block as defined below. Changing this forces a new Streaming Policy to be created.
	DrmPlayready *StreamingPolicyCommonEncryptionCencDrmPlayready `pulumi:"drmPlayready"`
	// Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the value specific to the request. The currently supported token values are `{AlternativeMediaId}`, which is replaced with the value of `StreamingLocatorId.AlternativeMediaId`, and `{ContentKeyId}`, which is replaced with the value of identifier of the key being requested. Changing this forces a new Streaming Policy to be created.
	DrmWidevineCustomLicenseAcquisitionUrlTemplate *string `pulumi:"drmWidevineCustomLicenseAcquisitionUrlTemplate"`
	// A `enabledProtocols` block as defined below. Changing this forces a new Streaming Policy to be created.
	EnabledProtocols *StreamingPolicyCommonEncryptionCencEnabledProtocols `pulumi:"enabledProtocols"`
}

// StreamingPolicyCommonEncryptionCencInput is an input type that accepts StreamingPolicyCommonEncryptionCencArgs and StreamingPolicyCommonEncryptionCencOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCencInput` via:
//
//          StreamingPolicyCommonEncryptionCencArgs{...}
type StreamingPolicyCommonEncryptionCencInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCencOutput() StreamingPolicyCommonEncryptionCencOutput
	ToStreamingPolicyCommonEncryptionCencOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCencOutput
}

type StreamingPolicyCommonEncryptionCencArgs struct {
	// A `defaultContentKey` block as defined below. Changing this forces a new Streaming Policy to be created.
	DefaultContentKey StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrInput `pulumi:"defaultContentKey"`
	// A `drmPlayready` block as defined below. Changing this forces a new Streaming Policy to be created.
	DrmPlayready StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrInput `pulumi:"drmPlayready"`
	// Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the value specific to the request. The currently supported token values are `{AlternativeMediaId}`, which is replaced with the value of `StreamingLocatorId.AlternativeMediaId`, and `{ContentKeyId}`, which is replaced with the value of identifier of the key being requested. Changing this forces a new Streaming Policy to be created.
	DrmWidevineCustomLicenseAcquisitionUrlTemplate pulumi.StringPtrInput `pulumi:"drmWidevineCustomLicenseAcquisitionUrlTemplate"`
	// A `enabledProtocols` block as defined below. Changing this forces a new Streaming Policy to be created.
	EnabledProtocols StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrInput `pulumi:"enabledProtocols"`
}

func (StreamingPolicyCommonEncryptionCencArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCenc)(nil)).Elem()
}

func (i StreamingPolicyCommonEncryptionCencArgs) ToStreamingPolicyCommonEncryptionCencOutput() StreamingPolicyCommonEncryptionCencOutput {
	return i.ToStreamingPolicyCommonEncryptionCencOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCencArgs) ToStreamingPolicyCommonEncryptionCencOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencOutput)
}

func (i StreamingPolicyCommonEncryptionCencArgs) ToStreamingPolicyCommonEncryptionCencPtrOutput() StreamingPolicyCommonEncryptionCencPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCencPtrOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCencArgs) ToStreamingPolicyCommonEncryptionCencPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencOutput).ToStreamingPolicyCommonEncryptionCencPtrOutputWithContext(ctx)
}

// StreamingPolicyCommonEncryptionCencPtrInput is an input type that accepts StreamingPolicyCommonEncryptionCencArgs, StreamingPolicyCommonEncryptionCencPtr and StreamingPolicyCommonEncryptionCencPtrOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCencPtrInput` via:
//
//          StreamingPolicyCommonEncryptionCencArgs{...}
//
//  or:
//
//          nil
type StreamingPolicyCommonEncryptionCencPtrInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCencPtrOutput() StreamingPolicyCommonEncryptionCencPtrOutput
	ToStreamingPolicyCommonEncryptionCencPtrOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCencPtrOutput
}

type streamingPolicyCommonEncryptionCencPtrType StreamingPolicyCommonEncryptionCencArgs

func StreamingPolicyCommonEncryptionCencPtr(v *StreamingPolicyCommonEncryptionCencArgs) StreamingPolicyCommonEncryptionCencPtrInput {
	return (*streamingPolicyCommonEncryptionCencPtrType)(v)
}

func (*streamingPolicyCommonEncryptionCencPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCenc)(nil)).Elem()
}

func (i *streamingPolicyCommonEncryptionCencPtrType) ToStreamingPolicyCommonEncryptionCencPtrOutput() StreamingPolicyCommonEncryptionCencPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCencPtrOutputWithContext(context.Background())
}

func (i *streamingPolicyCommonEncryptionCencPtrType) ToStreamingPolicyCommonEncryptionCencPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencPtrOutput)
}

type StreamingPolicyCommonEncryptionCencOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCencOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCenc)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCencOutput) ToStreamingPolicyCommonEncryptionCencOutput() StreamingPolicyCommonEncryptionCencOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencOutput) ToStreamingPolicyCommonEncryptionCencOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencOutput) ToStreamingPolicyCommonEncryptionCencPtrOutput() StreamingPolicyCommonEncryptionCencPtrOutput {
	return o.ToStreamingPolicyCommonEncryptionCencPtrOutputWithContext(context.Background())
}

func (o StreamingPolicyCommonEncryptionCencOutput) ToStreamingPolicyCommonEncryptionCencPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCenc) *StreamingPolicyCommonEncryptionCenc {
		return &v
	}).(StreamingPolicyCommonEncryptionCencPtrOutput)
}

// A `defaultContentKey` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencOutput) DefaultContentKey() StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCenc) *StreamingPolicyCommonEncryptionCencDefaultContentKey {
		return v.DefaultContentKey
	}).(StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput)
}

// A `drmPlayready` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencOutput) DrmPlayready() StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCenc) *StreamingPolicyCommonEncryptionCencDrmPlayready {
		return v.DrmPlayready
	}).(StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput)
}

// Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the value specific to the request. The currently supported token values are `{AlternativeMediaId}`, which is replaced with the value of `StreamingLocatorId.AlternativeMediaId`, and `{ContentKeyId}`, which is replaced with the value of identifier of the key being requested. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencOutput) DrmWidevineCustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCenc) *string {
		return v.DrmWidevineCustomLicenseAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

// A `enabledProtocols` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencOutput) EnabledProtocols() StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCenc) *StreamingPolicyCommonEncryptionCencEnabledProtocols {
		return v.EnabledProtocols
	}).(StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput)
}

type StreamingPolicyCommonEncryptionCencPtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCencPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCenc)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCencPtrOutput) ToStreamingPolicyCommonEncryptionCencPtrOutput() StreamingPolicyCommonEncryptionCencPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencPtrOutput) ToStreamingPolicyCommonEncryptionCencPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencPtrOutput) Elem() StreamingPolicyCommonEncryptionCencOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCenc) StreamingPolicyCommonEncryptionCenc { return *v }).(StreamingPolicyCommonEncryptionCencOutput)
}

// A `defaultContentKey` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencPtrOutput) DefaultContentKey() StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCenc) *StreamingPolicyCommonEncryptionCencDefaultContentKey {
		if v == nil {
			return nil
		}
		return v.DefaultContentKey
	}).(StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput)
}

// A `drmPlayready` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencPtrOutput) DrmPlayready() StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCenc) *StreamingPolicyCommonEncryptionCencDrmPlayready {
		if v == nil {
			return nil
		}
		return v.DrmPlayready
	}).(StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput)
}

// Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the value specific to the request. The currently supported token values are `{AlternativeMediaId}`, which is replaced with the value of `StreamingLocatorId.AlternativeMediaId`, and `{ContentKeyId}`, which is replaced with the value of identifier of the key being requested. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencPtrOutput) DrmWidevineCustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCenc) *string {
		if v == nil {
			return nil
		}
		return v.DrmWidevineCustomLicenseAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

// A `enabledProtocols` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencPtrOutput) EnabledProtocols() StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCenc) *StreamingPolicyCommonEncryptionCencEnabledProtocols {
		if v == nil {
			return nil
		}
		return v.EnabledProtocols
	}).(StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput)
}

type StreamingPolicyCommonEncryptionCencDefaultContentKey struct {
	// Label can be used to specify Content Key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
	Label *string `pulumi:"label"`
	// Policy used by Default Key. Changing this forces a new Streaming Policy to be created.
	PolicyName *string `pulumi:"policyName"`
}

// StreamingPolicyCommonEncryptionCencDefaultContentKeyInput is an input type that accepts StreamingPolicyCommonEncryptionCencDefaultContentKeyArgs and StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCencDefaultContentKeyInput` via:
//
//          StreamingPolicyCommonEncryptionCencDefaultContentKeyArgs{...}
type StreamingPolicyCommonEncryptionCencDefaultContentKeyInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCencDefaultContentKeyOutput() StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput
	ToStreamingPolicyCommonEncryptionCencDefaultContentKeyOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput
}

type StreamingPolicyCommonEncryptionCencDefaultContentKeyArgs struct {
	// Label can be used to specify Content Key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Policy used by Default Key. Changing this forces a new Streaming Policy to be created.
	PolicyName pulumi.StringPtrInput `pulumi:"policyName"`
}

func (StreamingPolicyCommonEncryptionCencDefaultContentKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCencDefaultContentKey)(nil)).Elem()
}

func (i StreamingPolicyCommonEncryptionCencDefaultContentKeyArgs) ToStreamingPolicyCommonEncryptionCencDefaultContentKeyOutput() StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput {
	return i.ToStreamingPolicyCommonEncryptionCencDefaultContentKeyOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCencDefaultContentKeyArgs) ToStreamingPolicyCommonEncryptionCencDefaultContentKeyOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput)
}

func (i StreamingPolicyCommonEncryptionCencDefaultContentKeyArgs) ToStreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput() StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCencDefaultContentKeyArgs) ToStreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput).ToStreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutputWithContext(ctx)
}

// StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrInput is an input type that accepts StreamingPolicyCommonEncryptionCencDefaultContentKeyArgs, StreamingPolicyCommonEncryptionCencDefaultContentKeyPtr and StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrInput` via:
//
//          StreamingPolicyCommonEncryptionCencDefaultContentKeyArgs{...}
//
//  or:
//
//          nil
type StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput() StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput
	ToStreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput
}

type streamingPolicyCommonEncryptionCencDefaultContentKeyPtrType StreamingPolicyCommonEncryptionCencDefaultContentKeyArgs

func StreamingPolicyCommonEncryptionCencDefaultContentKeyPtr(v *StreamingPolicyCommonEncryptionCencDefaultContentKeyArgs) StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrInput {
	return (*streamingPolicyCommonEncryptionCencDefaultContentKeyPtrType)(v)
}

func (*streamingPolicyCommonEncryptionCencDefaultContentKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCencDefaultContentKey)(nil)).Elem()
}

func (i *streamingPolicyCommonEncryptionCencDefaultContentKeyPtrType) ToStreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput() StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutputWithContext(context.Background())
}

func (i *streamingPolicyCommonEncryptionCencDefaultContentKeyPtrType) ToStreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput)
}

type StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCencDefaultContentKey)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput) ToStreamingPolicyCommonEncryptionCencDefaultContentKeyOutput() StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput) ToStreamingPolicyCommonEncryptionCencDefaultContentKeyOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput) ToStreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput() StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput {
	return o.ToStreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutputWithContext(context.Background())
}

func (o StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput) ToStreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCencDefaultContentKey) *StreamingPolicyCommonEncryptionCencDefaultContentKey {
		return &v
	}).(StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput)
}

// Label can be used to specify Content Key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCencDefaultContentKey) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Policy used by Default Key. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput) PolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCencDefaultContentKey) *string { return v.PolicyName }).(pulumi.StringPtrOutput)
}

type StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCencDefaultContentKey)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput) ToStreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput() StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput) ToStreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput) Elem() StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCencDefaultContentKey) StreamingPolicyCommonEncryptionCencDefaultContentKey {
		return *v
	}).(StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput)
}

// Label can be used to specify Content Key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCencDefaultContentKey) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

// Policy used by Default Key. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput) PolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCencDefaultContentKey) *string {
		if v == nil {
			return nil
		}
		return v.PolicyName
	}).(pulumi.StringPtrOutput)
}

type StreamingPolicyCommonEncryptionCencDrmPlayready struct {
	// Custom attributes for PlayReady. Changing this forces a new Streaming Policy to be created.
	CustomAttributes *string `pulumi:"customAttributes"`
	// Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the value specific to the request. The currently supported token values are `{AlternativeMediaId}`, which is replaced with the value of `StreamingLocatorId.AlternativeMediaId`, and `{ContentKeyId}`, which is replaced with the value of identifier of the key being requested. Changing this forces a new Streaming Policy to be created.
	CustomLicenseAcquisitionUrlTemplate *string `pulumi:"customLicenseAcquisitionUrlTemplate"`
}

// StreamingPolicyCommonEncryptionCencDrmPlayreadyInput is an input type that accepts StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs and StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCencDrmPlayreadyInput` via:
//
//          StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs{...}
type StreamingPolicyCommonEncryptionCencDrmPlayreadyInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCencDrmPlayreadyOutput() StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput
	ToStreamingPolicyCommonEncryptionCencDrmPlayreadyOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput
}

type StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs struct {
	// Custom attributes for PlayReady. Changing this forces a new Streaming Policy to be created.
	CustomAttributes pulumi.StringPtrInput `pulumi:"customAttributes"`
	// Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the value specific to the request. The currently supported token values are `{AlternativeMediaId}`, which is replaced with the value of `StreamingLocatorId.AlternativeMediaId`, and `{ContentKeyId}`, which is replaced with the value of identifier of the key being requested. Changing this forces a new Streaming Policy to be created.
	CustomLicenseAcquisitionUrlTemplate pulumi.StringPtrInput `pulumi:"customLicenseAcquisitionUrlTemplate"`
}

func (StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCencDrmPlayready)(nil)).Elem()
}

func (i StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs) ToStreamingPolicyCommonEncryptionCencDrmPlayreadyOutput() StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput {
	return i.ToStreamingPolicyCommonEncryptionCencDrmPlayreadyOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs) ToStreamingPolicyCommonEncryptionCencDrmPlayreadyOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput)
}

func (i StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs) ToStreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput() StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs) ToStreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput).ToStreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutputWithContext(ctx)
}

// StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrInput is an input type that accepts StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs, StreamingPolicyCommonEncryptionCencDrmPlayreadyPtr and StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrInput` via:
//
//          StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs{...}
//
//  or:
//
//          nil
type StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput() StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput
	ToStreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput
}

type streamingPolicyCommonEncryptionCencDrmPlayreadyPtrType StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs

func StreamingPolicyCommonEncryptionCencDrmPlayreadyPtr(v *StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs) StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrInput {
	return (*streamingPolicyCommonEncryptionCencDrmPlayreadyPtrType)(v)
}

func (*streamingPolicyCommonEncryptionCencDrmPlayreadyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCencDrmPlayready)(nil)).Elem()
}

func (i *streamingPolicyCommonEncryptionCencDrmPlayreadyPtrType) ToStreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput() StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutputWithContext(context.Background())
}

func (i *streamingPolicyCommonEncryptionCencDrmPlayreadyPtrType) ToStreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput)
}

type StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCencDrmPlayready)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput) ToStreamingPolicyCommonEncryptionCencDrmPlayreadyOutput() StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput) ToStreamingPolicyCommonEncryptionCencDrmPlayreadyOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput) ToStreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput() StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput {
	return o.ToStreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutputWithContext(context.Background())
}

func (o StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput) ToStreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCencDrmPlayready) *StreamingPolicyCommonEncryptionCencDrmPlayready {
		return &v
	}).(StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput)
}

// Custom attributes for PlayReady. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput) CustomAttributes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCencDrmPlayready) *string { return v.CustomAttributes }).(pulumi.StringPtrOutput)
}

// Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the value specific to the request. The currently supported token values are `{AlternativeMediaId}`, which is replaced with the value of `StreamingLocatorId.AlternativeMediaId`, and `{ContentKeyId}`, which is replaced with the value of identifier of the key being requested. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput) CustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCencDrmPlayready) *string {
		return v.CustomLicenseAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

type StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCencDrmPlayready)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput) ToStreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput() StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput) ToStreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput) Elem() StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCencDrmPlayready) StreamingPolicyCommonEncryptionCencDrmPlayready {
		return *v
	}).(StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput)
}

// Custom attributes for PlayReady. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput) CustomAttributes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCencDrmPlayready) *string {
		if v == nil {
			return nil
		}
		return v.CustomAttributes
	}).(pulumi.StringPtrOutput)
}

// Template for the URL of the custom service delivering licenses to end user players. Not required when using Azure Media Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the value specific to the request. The currently supported token values are `{AlternativeMediaId}`, which is replaced with the value of `StreamingLocatorId.AlternativeMediaId`, and `{ContentKeyId}`, which is replaced with the value of identifier of the key being requested. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput) CustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCencDrmPlayready) *string {
		if v == nil {
			return nil
		}
		return v.CustomLicenseAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

type StreamingPolicyCommonEncryptionCencEnabledProtocols struct {
	// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
	Dash *bool `pulumi:"dash"`
	// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
	Download *bool `pulumi:"download"`
	// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
	Hls *bool `pulumi:"hls"`
	// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
	SmoothStreaming *bool `pulumi:"smoothStreaming"`
}

// StreamingPolicyCommonEncryptionCencEnabledProtocolsInput is an input type that accepts StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs and StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCencEnabledProtocolsInput` via:
//
//          StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs{...}
type StreamingPolicyCommonEncryptionCencEnabledProtocolsInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCencEnabledProtocolsOutput() StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput
	ToStreamingPolicyCommonEncryptionCencEnabledProtocolsOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput
}

type StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs struct {
	// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
	Dash pulumi.BoolPtrInput `pulumi:"dash"`
	// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
	Download pulumi.BoolPtrInput `pulumi:"download"`
	// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
	Hls pulumi.BoolPtrInput `pulumi:"hls"`
	// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
	SmoothStreaming pulumi.BoolPtrInput `pulumi:"smoothStreaming"`
}

func (StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCencEnabledProtocols)(nil)).Elem()
}

func (i StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs) ToStreamingPolicyCommonEncryptionCencEnabledProtocolsOutput() StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput {
	return i.ToStreamingPolicyCommonEncryptionCencEnabledProtocolsOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs) ToStreamingPolicyCommonEncryptionCencEnabledProtocolsOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput)
}

func (i StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs) ToStreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput() StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs) ToStreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput).ToStreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutputWithContext(ctx)
}

// StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrInput is an input type that accepts StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs, StreamingPolicyCommonEncryptionCencEnabledProtocolsPtr and StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrInput` via:
//
//          StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs{...}
//
//  or:
//
//          nil
type StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput() StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput
	ToStreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput
}

type streamingPolicyCommonEncryptionCencEnabledProtocolsPtrType StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs

func StreamingPolicyCommonEncryptionCencEnabledProtocolsPtr(v *StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs) StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrInput {
	return (*streamingPolicyCommonEncryptionCencEnabledProtocolsPtrType)(v)
}

func (*streamingPolicyCommonEncryptionCencEnabledProtocolsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCencEnabledProtocols)(nil)).Elem()
}

func (i *streamingPolicyCommonEncryptionCencEnabledProtocolsPtrType) ToStreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput() StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutputWithContext(context.Background())
}

func (i *streamingPolicyCommonEncryptionCencEnabledProtocolsPtrType) ToStreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput)
}

type StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCencEnabledProtocols)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput) ToStreamingPolicyCommonEncryptionCencEnabledProtocolsOutput() StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput) ToStreamingPolicyCommonEncryptionCencEnabledProtocolsOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput) ToStreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput() StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput {
	return o.ToStreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutputWithContext(context.Background())
}

func (o StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput) ToStreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCencEnabledProtocols) *StreamingPolicyCommonEncryptionCencEnabledProtocols {
		return &v
	}).(StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput)
}

// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput) Dash() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCencEnabledProtocols) *bool { return v.Dash }).(pulumi.BoolPtrOutput)
}

// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput) Download() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCencEnabledProtocols) *bool { return v.Download }).(pulumi.BoolPtrOutput)
}

// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput) Hls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCencEnabledProtocols) *bool { return v.Hls }).(pulumi.BoolPtrOutput)
}

// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput) SmoothStreaming() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCencEnabledProtocols) *bool { return v.SmoothStreaming }).(pulumi.BoolPtrOutput)
}

type StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCencEnabledProtocols)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput) ToStreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput() StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput) ToStreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput) Elem() StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCencEnabledProtocols) StreamingPolicyCommonEncryptionCencEnabledProtocols {
		return *v
	}).(StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput)
}

// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput) Dash() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCencEnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return v.Dash
	}).(pulumi.BoolPtrOutput)
}

// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput) Download() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCencEnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return v.Download
	}).(pulumi.BoolPtrOutput)
}

// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput) Hls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCencEnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return v.Hls
	}).(pulumi.BoolPtrOutput)
}

// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput) SmoothStreaming() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCencEnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return v.SmoothStreaming
	}).(pulumi.BoolPtrOutput)
}

type StreamingPolicyNoEncryptionEnabledProtocols struct {
	// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
	Dash *bool `pulumi:"dash"`
	// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
	Download *bool `pulumi:"download"`
	// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
	Hls *bool `pulumi:"hls"`
	// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
	SmoothStreaming *bool `pulumi:"smoothStreaming"`
}

// StreamingPolicyNoEncryptionEnabledProtocolsInput is an input type that accepts StreamingPolicyNoEncryptionEnabledProtocolsArgs and StreamingPolicyNoEncryptionEnabledProtocolsOutput values.
// You can construct a concrete instance of `StreamingPolicyNoEncryptionEnabledProtocolsInput` via:
//
//          StreamingPolicyNoEncryptionEnabledProtocolsArgs{...}
type StreamingPolicyNoEncryptionEnabledProtocolsInput interface {
	pulumi.Input

	ToStreamingPolicyNoEncryptionEnabledProtocolsOutput() StreamingPolicyNoEncryptionEnabledProtocolsOutput
	ToStreamingPolicyNoEncryptionEnabledProtocolsOutputWithContext(context.Context) StreamingPolicyNoEncryptionEnabledProtocolsOutput
}

type StreamingPolicyNoEncryptionEnabledProtocolsArgs struct {
	// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
	Dash pulumi.BoolPtrInput `pulumi:"dash"`
	// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
	Download pulumi.BoolPtrInput `pulumi:"download"`
	// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
	Hls pulumi.BoolPtrInput `pulumi:"hls"`
	// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
	SmoothStreaming pulumi.BoolPtrInput `pulumi:"smoothStreaming"`
}

func (StreamingPolicyNoEncryptionEnabledProtocolsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyNoEncryptionEnabledProtocols)(nil)).Elem()
}

func (i StreamingPolicyNoEncryptionEnabledProtocolsArgs) ToStreamingPolicyNoEncryptionEnabledProtocolsOutput() StreamingPolicyNoEncryptionEnabledProtocolsOutput {
	return i.ToStreamingPolicyNoEncryptionEnabledProtocolsOutputWithContext(context.Background())
}

func (i StreamingPolicyNoEncryptionEnabledProtocolsArgs) ToStreamingPolicyNoEncryptionEnabledProtocolsOutputWithContext(ctx context.Context) StreamingPolicyNoEncryptionEnabledProtocolsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyNoEncryptionEnabledProtocolsOutput)
}

func (i StreamingPolicyNoEncryptionEnabledProtocolsArgs) ToStreamingPolicyNoEncryptionEnabledProtocolsPtrOutput() StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput {
	return i.ToStreamingPolicyNoEncryptionEnabledProtocolsPtrOutputWithContext(context.Background())
}

func (i StreamingPolicyNoEncryptionEnabledProtocolsArgs) ToStreamingPolicyNoEncryptionEnabledProtocolsPtrOutputWithContext(ctx context.Context) StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyNoEncryptionEnabledProtocolsOutput).ToStreamingPolicyNoEncryptionEnabledProtocolsPtrOutputWithContext(ctx)
}

// StreamingPolicyNoEncryptionEnabledProtocolsPtrInput is an input type that accepts StreamingPolicyNoEncryptionEnabledProtocolsArgs, StreamingPolicyNoEncryptionEnabledProtocolsPtr and StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput values.
// You can construct a concrete instance of `StreamingPolicyNoEncryptionEnabledProtocolsPtrInput` via:
//
//          StreamingPolicyNoEncryptionEnabledProtocolsArgs{...}
//
//  or:
//
//          nil
type StreamingPolicyNoEncryptionEnabledProtocolsPtrInput interface {
	pulumi.Input

	ToStreamingPolicyNoEncryptionEnabledProtocolsPtrOutput() StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput
	ToStreamingPolicyNoEncryptionEnabledProtocolsPtrOutputWithContext(context.Context) StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput
}

type streamingPolicyNoEncryptionEnabledProtocolsPtrType StreamingPolicyNoEncryptionEnabledProtocolsArgs

func StreamingPolicyNoEncryptionEnabledProtocolsPtr(v *StreamingPolicyNoEncryptionEnabledProtocolsArgs) StreamingPolicyNoEncryptionEnabledProtocolsPtrInput {
	return (*streamingPolicyNoEncryptionEnabledProtocolsPtrType)(v)
}

func (*streamingPolicyNoEncryptionEnabledProtocolsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyNoEncryptionEnabledProtocols)(nil)).Elem()
}

func (i *streamingPolicyNoEncryptionEnabledProtocolsPtrType) ToStreamingPolicyNoEncryptionEnabledProtocolsPtrOutput() StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput {
	return i.ToStreamingPolicyNoEncryptionEnabledProtocolsPtrOutputWithContext(context.Background())
}

func (i *streamingPolicyNoEncryptionEnabledProtocolsPtrType) ToStreamingPolicyNoEncryptionEnabledProtocolsPtrOutputWithContext(ctx context.Context) StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput)
}

type StreamingPolicyNoEncryptionEnabledProtocolsOutput struct{ *pulumi.OutputState }

func (StreamingPolicyNoEncryptionEnabledProtocolsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyNoEncryptionEnabledProtocols)(nil)).Elem()
}

func (o StreamingPolicyNoEncryptionEnabledProtocolsOutput) ToStreamingPolicyNoEncryptionEnabledProtocolsOutput() StreamingPolicyNoEncryptionEnabledProtocolsOutput {
	return o
}

func (o StreamingPolicyNoEncryptionEnabledProtocolsOutput) ToStreamingPolicyNoEncryptionEnabledProtocolsOutputWithContext(ctx context.Context) StreamingPolicyNoEncryptionEnabledProtocolsOutput {
	return o
}

func (o StreamingPolicyNoEncryptionEnabledProtocolsOutput) ToStreamingPolicyNoEncryptionEnabledProtocolsPtrOutput() StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput {
	return o.ToStreamingPolicyNoEncryptionEnabledProtocolsPtrOutputWithContext(context.Background())
}

func (o StreamingPolicyNoEncryptionEnabledProtocolsOutput) ToStreamingPolicyNoEncryptionEnabledProtocolsPtrOutputWithContext(ctx context.Context) StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput {
	return o.ApplyT(func(v StreamingPolicyNoEncryptionEnabledProtocols) *StreamingPolicyNoEncryptionEnabledProtocols {
		return &v
	}).(StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput)
}

// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyNoEncryptionEnabledProtocolsOutput) Dash() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamingPolicyNoEncryptionEnabledProtocols) *bool { return v.Dash }).(pulumi.BoolPtrOutput)
}

// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyNoEncryptionEnabledProtocolsOutput) Download() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamingPolicyNoEncryptionEnabledProtocols) *bool { return v.Download }).(pulumi.BoolPtrOutput)
}

// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyNoEncryptionEnabledProtocolsOutput) Hls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamingPolicyNoEncryptionEnabledProtocols) *bool { return v.Hls }).(pulumi.BoolPtrOutput)
}

// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyNoEncryptionEnabledProtocolsOutput) SmoothStreaming() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamingPolicyNoEncryptionEnabledProtocols) *bool { return v.SmoothStreaming }).(pulumi.BoolPtrOutput)
}

type StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyNoEncryptionEnabledProtocols)(nil)).Elem()
}

func (o StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput) ToStreamingPolicyNoEncryptionEnabledProtocolsPtrOutput() StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput {
	return o
}

func (o StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput) ToStreamingPolicyNoEncryptionEnabledProtocolsPtrOutputWithContext(ctx context.Context) StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput {
	return o
}

func (o StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput) Elem() StreamingPolicyNoEncryptionEnabledProtocolsOutput {
	return o.ApplyT(func(v *StreamingPolicyNoEncryptionEnabledProtocols) StreamingPolicyNoEncryptionEnabledProtocols {
		return *v
	}).(StreamingPolicyNoEncryptionEnabledProtocolsOutput)
}

// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput) Dash() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyNoEncryptionEnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return v.Dash
	}).(pulumi.BoolPtrOutput)
}

// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput) Download() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyNoEncryptionEnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return v.Download
	}).(pulumi.BoolPtrOutput)
}

// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput) Hls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyNoEncryptionEnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return v.Hls
	}).(pulumi.BoolPtrOutput)
}

// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput) SmoothStreaming() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyNoEncryptionEnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return v.SmoothStreaming
	}).(pulumi.BoolPtrOutput)
}

type TransformOutputType struct {
	// A `audioAnalyzerPreset` block as defined below.
	AudioAnalyzerPreset *TransformOutputAudioAnalyzerPreset `pulumi:"audioAnalyzerPreset"`
	// A `builtinPreset` block as defined below.
	BuiltinPreset *TransformOutputBuiltinPreset `pulumi:"builtinPreset"`
	// A `faceDetectorPreset` block as defined below.
	FaceDetectorPreset *TransformOutputFaceDetectorPreset `pulumi:"faceDetectorPreset"`
	// A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with `ContinueJob`. Possibles value are `StopProcessingJob` or `ContinueJob`.
	OnErrorAction *string `pulumi:"onErrorAction"`
	// Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing Transform Outputs. Possibles value are `High`, `Normal` or `Low`.
	RelativePriority *string `pulumi:"relativePriority"`
	// A `videoAnalyzerPreset` block as defined below.
	VideoAnalyzerPreset *TransformOutputVideoAnalyzerPreset `pulumi:"videoAnalyzerPreset"`
}

// TransformOutputTypeInput is an input type that accepts TransformOutputTypeArgs and TransformOutputTypeOutput values.
// You can construct a concrete instance of `TransformOutputTypeInput` via:
//
//          TransformOutputTypeArgs{...}
type TransformOutputTypeInput interface {
	pulumi.Input

	ToTransformOutputTypeOutput() TransformOutputTypeOutput
	ToTransformOutputTypeOutputWithContext(context.Context) TransformOutputTypeOutput
}

type TransformOutputTypeArgs struct {
	// A `audioAnalyzerPreset` block as defined below.
	AudioAnalyzerPreset TransformOutputAudioAnalyzerPresetPtrInput `pulumi:"audioAnalyzerPreset"`
	// A `builtinPreset` block as defined below.
	BuiltinPreset TransformOutputBuiltinPresetPtrInput `pulumi:"builtinPreset"`
	// A `faceDetectorPreset` block as defined below.
	FaceDetectorPreset TransformOutputFaceDetectorPresetPtrInput `pulumi:"faceDetectorPreset"`
	// A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with `ContinueJob`. Possibles value are `StopProcessingJob` or `ContinueJob`.
	OnErrorAction pulumi.StringPtrInput `pulumi:"onErrorAction"`
	// Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing Transform Outputs. Possibles value are `High`, `Normal` or `Low`.
	RelativePriority pulumi.StringPtrInput `pulumi:"relativePriority"`
	// A `videoAnalyzerPreset` block as defined below.
	VideoAnalyzerPreset TransformOutputVideoAnalyzerPresetPtrInput `pulumi:"videoAnalyzerPreset"`
}

func (TransformOutputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputType)(nil)).Elem()
}

func (i TransformOutputTypeArgs) ToTransformOutputTypeOutput() TransformOutputTypeOutput {
	return i.ToTransformOutputTypeOutputWithContext(context.Background())
}

func (i TransformOutputTypeArgs) ToTransformOutputTypeOutputWithContext(ctx context.Context) TransformOutputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputTypeOutput)
}

// TransformOutputTypeArrayInput is an input type that accepts TransformOutputTypeArray and TransformOutputTypeArrayOutput values.
// You can construct a concrete instance of `TransformOutputTypeArrayInput` via:
//
//          TransformOutputTypeArray{ TransformOutputTypeArgs{...} }
type TransformOutputTypeArrayInput interface {
	pulumi.Input

	ToTransformOutputTypeArrayOutput() TransformOutputTypeArrayOutput
	ToTransformOutputTypeArrayOutputWithContext(context.Context) TransformOutputTypeArrayOutput
}

type TransformOutputTypeArray []TransformOutputTypeInput

func (TransformOutputTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformOutputType)(nil)).Elem()
}

func (i TransformOutputTypeArray) ToTransformOutputTypeArrayOutput() TransformOutputTypeArrayOutput {
	return i.ToTransformOutputTypeArrayOutputWithContext(context.Background())
}

func (i TransformOutputTypeArray) ToTransformOutputTypeArrayOutputWithContext(ctx context.Context) TransformOutputTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputTypeArrayOutput)
}

type TransformOutputTypeOutput struct{ *pulumi.OutputState }

func (TransformOutputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputType)(nil)).Elem()
}

func (o TransformOutputTypeOutput) ToTransformOutputTypeOutput() TransformOutputTypeOutput {
	return o
}

func (o TransformOutputTypeOutput) ToTransformOutputTypeOutputWithContext(ctx context.Context) TransformOutputTypeOutput {
	return o
}

// A `audioAnalyzerPreset` block as defined below.
func (o TransformOutputTypeOutput) AudioAnalyzerPreset() TransformOutputAudioAnalyzerPresetPtrOutput {
	return o.ApplyT(func(v TransformOutputType) *TransformOutputAudioAnalyzerPreset { return v.AudioAnalyzerPreset }).(TransformOutputAudioAnalyzerPresetPtrOutput)
}

// A `builtinPreset` block as defined below.
func (o TransformOutputTypeOutput) BuiltinPreset() TransformOutputBuiltinPresetPtrOutput {
	return o.ApplyT(func(v TransformOutputType) *TransformOutputBuiltinPreset { return v.BuiltinPreset }).(TransformOutputBuiltinPresetPtrOutput)
}

// A `faceDetectorPreset` block as defined below.
func (o TransformOutputTypeOutput) FaceDetectorPreset() TransformOutputFaceDetectorPresetPtrOutput {
	return o.ApplyT(func(v TransformOutputType) *TransformOutputFaceDetectorPreset { return v.FaceDetectorPreset }).(TransformOutputFaceDetectorPresetPtrOutput)
}

// A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with `ContinueJob`. Possibles value are `StopProcessingJob` or `ContinueJob`.
func (o TransformOutputTypeOutput) OnErrorAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputType) *string { return v.OnErrorAction }).(pulumi.StringPtrOutput)
}

// Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing Transform Outputs. Possibles value are `High`, `Normal` or `Low`.
func (o TransformOutputTypeOutput) RelativePriority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputType) *string { return v.RelativePriority }).(pulumi.StringPtrOutput)
}

// A `videoAnalyzerPreset` block as defined below.
func (o TransformOutputTypeOutput) VideoAnalyzerPreset() TransformOutputVideoAnalyzerPresetPtrOutput {
	return o.ApplyT(func(v TransformOutputType) *TransformOutputVideoAnalyzerPreset { return v.VideoAnalyzerPreset }).(TransformOutputVideoAnalyzerPresetPtrOutput)
}

type TransformOutputTypeArrayOutput struct{ *pulumi.OutputState }

func (TransformOutputTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformOutputType)(nil)).Elem()
}

func (o TransformOutputTypeArrayOutput) ToTransformOutputTypeArrayOutput() TransformOutputTypeArrayOutput {
	return o
}

func (o TransformOutputTypeArrayOutput) ToTransformOutputTypeArrayOutputWithContext(ctx context.Context) TransformOutputTypeArrayOutput {
	return o
}

func (o TransformOutputTypeArrayOutput) Index(i pulumi.IntInput) TransformOutputTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformOutputType {
		return vs[0].([]TransformOutputType)[vs[1].(int)]
	}).(TransformOutputTypeOutput)
}

type TransformOutputAudioAnalyzerPreset struct {
	// Possibles value are `Basic` or `Standard`. Determines the set of audio analysis operations to be performed.
	AudioAnalysisMode *string `pulumi:"audioAnalysisMode"`
	// The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US'). If you know the language of your content, it is recommended that you specify it. The language must be specified explicitly for AudioAnalysisMode:Basic, since automatic language detection is not included in basic mode. If the language isn't specified, automatic language detection will choose the first language detected and process with the selected language for the duration of the file. It does not currently support dynamically switching between languages after the first language is detected. The automatic detection works best with audio recordings with clearly discernable speech. If automatic detection fails to find the language, transcription would fallback to 'en-US'." The list of supported languages is available here: https://go.microsoft.com/fwlink/?linkid=2109463.
	AudioLanguage *string `pulumi:"audioLanguage"`
}

// TransformOutputAudioAnalyzerPresetInput is an input type that accepts TransformOutputAudioAnalyzerPresetArgs and TransformOutputAudioAnalyzerPresetOutput values.
// You can construct a concrete instance of `TransformOutputAudioAnalyzerPresetInput` via:
//
//          TransformOutputAudioAnalyzerPresetArgs{...}
type TransformOutputAudioAnalyzerPresetInput interface {
	pulumi.Input

	ToTransformOutputAudioAnalyzerPresetOutput() TransformOutputAudioAnalyzerPresetOutput
	ToTransformOutputAudioAnalyzerPresetOutputWithContext(context.Context) TransformOutputAudioAnalyzerPresetOutput
}

type TransformOutputAudioAnalyzerPresetArgs struct {
	// Possibles value are `Basic` or `Standard`. Determines the set of audio analysis operations to be performed.
	AudioAnalysisMode pulumi.StringPtrInput `pulumi:"audioAnalysisMode"`
	// The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US'). If you know the language of your content, it is recommended that you specify it. The language must be specified explicitly for AudioAnalysisMode:Basic, since automatic language detection is not included in basic mode. If the language isn't specified, automatic language detection will choose the first language detected and process with the selected language for the duration of the file. It does not currently support dynamically switching between languages after the first language is detected. The automatic detection works best with audio recordings with clearly discernable speech. If automatic detection fails to find the language, transcription would fallback to 'en-US'." The list of supported languages is available here: https://go.microsoft.com/fwlink/?linkid=2109463.
	AudioLanguage pulumi.StringPtrInput `pulumi:"audioLanguage"`
}

func (TransformOutputAudioAnalyzerPresetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputAudioAnalyzerPreset)(nil)).Elem()
}

func (i TransformOutputAudioAnalyzerPresetArgs) ToTransformOutputAudioAnalyzerPresetOutput() TransformOutputAudioAnalyzerPresetOutput {
	return i.ToTransformOutputAudioAnalyzerPresetOutputWithContext(context.Background())
}

func (i TransformOutputAudioAnalyzerPresetArgs) ToTransformOutputAudioAnalyzerPresetOutputWithContext(ctx context.Context) TransformOutputAudioAnalyzerPresetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputAudioAnalyzerPresetOutput)
}

func (i TransformOutputAudioAnalyzerPresetArgs) ToTransformOutputAudioAnalyzerPresetPtrOutput() TransformOutputAudioAnalyzerPresetPtrOutput {
	return i.ToTransformOutputAudioAnalyzerPresetPtrOutputWithContext(context.Background())
}

func (i TransformOutputAudioAnalyzerPresetArgs) ToTransformOutputAudioAnalyzerPresetPtrOutputWithContext(ctx context.Context) TransformOutputAudioAnalyzerPresetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputAudioAnalyzerPresetOutput).ToTransformOutputAudioAnalyzerPresetPtrOutputWithContext(ctx)
}

// TransformOutputAudioAnalyzerPresetPtrInput is an input type that accepts TransformOutputAudioAnalyzerPresetArgs, TransformOutputAudioAnalyzerPresetPtr and TransformOutputAudioAnalyzerPresetPtrOutput values.
// You can construct a concrete instance of `TransformOutputAudioAnalyzerPresetPtrInput` via:
//
//          TransformOutputAudioAnalyzerPresetArgs{...}
//
//  or:
//
//          nil
type TransformOutputAudioAnalyzerPresetPtrInput interface {
	pulumi.Input

	ToTransformOutputAudioAnalyzerPresetPtrOutput() TransformOutputAudioAnalyzerPresetPtrOutput
	ToTransformOutputAudioAnalyzerPresetPtrOutputWithContext(context.Context) TransformOutputAudioAnalyzerPresetPtrOutput
}

type transformOutputAudioAnalyzerPresetPtrType TransformOutputAudioAnalyzerPresetArgs

func TransformOutputAudioAnalyzerPresetPtr(v *TransformOutputAudioAnalyzerPresetArgs) TransformOutputAudioAnalyzerPresetPtrInput {
	return (*transformOutputAudioAnalyzerPresetPtrType)(v)
}

func (*transformOutputAudioAnalyzerPresetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputAudioAnalyzerPreset)(nil)).Elem()
}

func (i *transformOutputAudioAnalyzerPresetPtrType) ToTransformOutputAudioAnalyzerPresetPtrOutput() TransformOutputAudioAnalyzerPresetPtrOutput {
	return i.ToTransformOutputAudioAnalyzerPresetPtrOutputWithContext(context.Background())
}

func (i *transformOutputAudioAnalyzerPresetPtrType) ToTransformOutputAudioAnalyzerPresetPtrOutputWithContext(ctx context.Context) TransformOutputAudioAnalyzerPresetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputAudioAnalyzerPresetPtrOutput)
}

type TransformOutputAudioAnalyzerPresetOutput struct{ *pulumi.OutputState }

func (TransformOutputAudioAnalyzerPresetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputAudioAnalyzerPreset)(nil)).Elem()
}

func (o TransformOutputAudioAnalyzerPresetOutput) ToTransformOutputAudioAnalyzerPresetOutput() TransformOutputAudioAnalyzerPresetOutput {
	return o
}

func (o TransformOutputAudioAnalyzerPresetOutput) ToTransformOutputAudioAnalyzerPresetOutputWithContext(ctx context.Context) TransformOutputAudioAnalyzerPresetOutput {
	return o
}

func (o TransformOutputAudioAnalyzerPresetOutput) ToTransformOutputAudioAnalyzerPresetPtrOutput() TransformOutputAudioAnalyzerPresetPtrOutput {
	return o.ToTransformOutputAudioAnalyzerPresetPtrOutputWithContext(context.Background())
}

func (o TransformOutputAudioAnalyzerPresetOutput) ToTransformOutputAudioAnalyzerPresetPtrOutputWithContext(ctx context.Context) TransformOutputAudioAnalyzerPresetPtrOutput {
	return o.ApplyT(func(v TransformOutputAudioAnalyzerPreset) *TransformOutputAudioAnalyzerPreset {
		return &v
	}).(TransformOutputAudioAnalyzerPresetPtrOutput)
}

// Possibles value are `Basic` or `Standard`. Determines the set of audio analysis operations to be performed.
func (o TransformOutputAudioAnalyzerPresetOutput) AudioAnalysisMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputAudioAnalyzerPreset) *string { return v.AudioAnalysisMode }).(pulumi.StringPtrOutput)
}

// The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US'). If you know the language of your content, it is recommended that you specify it. The language must be specified explicitly for AudioAnalysisMode:Basic, since automatic language detection is not included in basic mode. If the language isn't specified, automatic language detection will choose the first language detected and process with the selected language for the duration of the file. It does not currently support dynamically switching between languages after the first language is detected. The automatic detection works best with audio recordings with clearly discernable speech. If automatic detection fails to find the language, transcription would fallback to 'en-US'." The list of supported languages is available here: https://go.microsoft.com/fwlink/?linkid=2109463.
func (o TransformOutputAudioAnalyzerPresetOutput) AudioLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputAudioAnalyzerPreset) *string { return v.AudioLanguage }).(pulumi.StringPtrOutput)
}

type TransformOutputAudioAnalyzerPresetPtrOutput struct{ *pulumi.OutputState }

func (TransformOutputAudioAnalyzerPresetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputAudioAnalyzerPreset)(nil)).Elem()
}

func (o TransformOutputAudioAnalyzerPresetPtrOutput) ToTransformOutputAudioAnalyzerPresetPtrOutput() TransformOutputAudioAnalyzerPresetPtrOutput {
	return o
}

func (o TransformOutputAudioAnalyzerPresetPtrOutput) ToTransformOutputAudioAnalyzerPresetPtrOutputWithContext(ctx context.Context) TransformOutputAudioAnalyzerPresetPtrOutput {
	return o
}

func (o TransformOutputAudioAnalyzerPresetPtrOutput) Elem() TransformOutputAudioAnalyzerPresetOutput {
	return o.ApplyT(func(v *TransformOutputAudioAnalyzerPreset) TransformOutputAudioAnalyzerPreset { return *v }).(TransformOutputAudioAnalyzerPresetOutput)
}

// Possibles value are `Basic` or `Standard`. Determines the set of audio analysis operations to be performed.
func (o TransformOutputAudioAnalyzerPresetPtrOutput) AudioAnalysisMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputAudioAnalyzerPreset) *string {
		if v == nil {
			return nil
		}
		return v.AudioAnalysisMode
	}).(pulumi.StringPtrOutput)
}

// The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US'). If you know the language of your content, it is recommended that you specify it. The language must be specified explicitly for AudioAnalysisMode:Basic, since automatic language detection is not included in basic mode. If the language isn't specified, automatic language detection will choose the first language detected and process with the selected language for the duration of the file. It does not currently support dynamically switching between languages after the first language is detected. The automatic detection works best with audio recordings with clearly discernable speech. If automatic detection fails to find the language, transcription would fallback to 'en-US'." The list of supported languages is available here: https://go.microsoft.com/fwlink/?linkid=2109463.
func (o TransformOutputAudioAnalyzerPresetPtrOutput) AudioLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputAudioAnalyzerPreset) *string {
		if v == nil {
			return nil
		}
		return v.AudioLanguage
	}).(pulumi.StringPtrOutput)
}

type TransformOutputBuiltinPreset struct {
	// The built-in preset to be used for encoding videos. The allowed values are `AACGoodQualityAudio`, `AdaptiveStreaming`,`ContentAwareEncoding`, `ContentAwareEncodingExperimental`,`CopyAllBitrateNonInterleaved`, `H264MultipleBitrate1080p`,`H264MultipleBitrate720p`, `H264MultipleBitrateSD`,`H264SingleBitrate1080p`, `H264SingleBitrate720p` and `H264SingleBitrateSD`.
	PresetName *string `pulumi:"presetName"`
}

// TransformOutputBuiltinPresetInput is an input type that accepts TransformOutputBuiltinPresetArgs and TransformOutputBuiltinPresetOutput values.
// You can construct a concrete instance of `TransformOutputBuiltinPresetInput` via:
//
//          TransformOutputBuiltinPresetArgs{...}
type TransformOutputBuiltinPresetInput interface {
	pulumi.Input

	ToTransformOutputBuiltinPresetOutput() TransformOutputBuiltinPresetOutput
	ToTransformOutputBuiltinPresetOutputWithContext(context.Context) TransformOutputBuiltinPresetOutput
}

type TransformOutputBuiltinPresetArgs struct {
	// The built-in preset to be used for encoding videos. The allowed values are `AACGoodQualityAudio`, `AdaptiveStreaming`,`ContentAwareEncoding`, `ContentAwareEncodingExperimental`,`CopyAllBitrateNonInterleaved`, `H264MultipleBitrate1080p`,`H264MultipleBitrate720p`, `H264MultipleBitrateSD`,`H264SingleBitrate1080p`, `H264SingleBitrate720p` and `H264SingleBitrateSD`.
	PresetName pulumi.StringPtrInput `pulumi:"presetName"`
}

func (TransformOutputBuiltinPresetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputBuiltinPreset)(nil)).Elem()
}

func (i TransformOutputBuiltinPresetArgs) ToTransformOutputBuiltinPresetOutput() TransformOutputBuiltinPresetOutput {
	return i.ToTransformOutputBuiltinPresetOutputWithContext(context.Background())
}

func (i TransformOutputBuiltinPresetArgs) ToTransformOutputBuiltinPresetOutputWithContext(ctx context.Context) TransformOutputBuiltinPresetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputBuiltinPresetOutput)
}

func (i TransformOutputBuiltinPresetArgs) ToTransformOutputBuiltinPresetPtrOutput() TransformOutputBuiltinPresetPtrOutput {
	return i.ToTransformOutputBuiltinPresetPtrOutputWithContext(context.Background())
}

func (i TransformOutputBuiltinPresetArgs) ToTransformOutputBuiltinPresetPtrOutputWithContext(ctx context.Context) TransformOutputBuiltinPresetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputBuiltinPresetOutput).ToTransformOutputBuiltinPresetPtrOutputWithContext(ctx)
}

// TransformOutputBuiltinPresetPtrInput is an input type that accepts TransformOutputBuiltinPresetArgs, TransformOutputBuiltinPresetPtr and TransformOutputBuiltinPresetPtrOutput values.
// You can construct a concrete instance of `TransformOutputBuiltinPresetPtrInput` via:
//
//          TransformOutputBuiltinPresetArgs{...}
//
//  or:
//
//          nil
type TransformOutputBuiltinPresetPtrInput interface {
	pulumi.Input

	ToTransformOutputBuiltinPresetPtrOutput() TransformOutputBuiltinPresetPtrOutput
	ToTransformOutputBuiltinPresetPtrOutputWithContext(context.Context) TransformOutputBuiltinPresetPtrOutput
}

type transformOutputBuiltinPresetPtrType TransformOutputBuiltinPresetArgs

func TransformOutputBuiltinPresetPtr(v *TransformOutputBuiltinPresetArgs) TransformOutputBuiltinPresetPtrInput {
	return (*transformOutputBuiltinPresetPtrType)(v)
}

func (*transformOutputBuiltinPresetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputBuiltinPreset)(nil)).Elem()
}

func (i *transformOutputBuiltinPresetPtrType) ToTransformOutputBuiltinPresetPtrOutput() TransformOutputBuiltinPresetPtrOutput {
	return i.ToTransformOutputBuiltinPresetPtrOutputWithContext(context.Background())
}

func (i *transformOutputBuiltinPresetPtrType) ToTransformOutputBuiltinPresetPtrOutputWithContext(ctx context.Context) TransformOutputBuiltinPresetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputBuiltinPresetPtrOutput)
}

type TransformOutputBuiltinPresetOutput struct{ *pulumi.OutputState }

func (TransformOutputBuiltinPresetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputBuiltinPreset)(nil)).Elem()
}

func (o TransformOutputBuiltinPresetOutput) ToTransformOutputBuiltinPresetOutput() TransformOutputBuiltinPresetOutput {
	return o
}

func (o TransformOutputBuiltinPresetOutput) ToTransformOutputBuiltinPresetOutputWithContext(ctx context.Context) TransformOutputBuiltinPresetOutput {
	return o
}

func (o TransformOutputBuiltinPresetOutput) ToTransformOutputBuiltinPresetPtrOutput() TransformOutputBuiltinPresetPtrOutput {
	return o.ToTransformOutputBuiltinPresetPtrOutputWithContext(context.Background())
}

func (o TransformOutputBuiltinPresetOutput) ToTransformOutputBuiltinPresetPtrOutputWithContext(ctx context.Context) TransformOutputBuiltinPresetPtrOutput {
	return o.ApplyT(func(v TransformOutputBuiltinPreset) *TransformOutputBuiltinPreset {
		return &v
	}).(TransformOutputBuiltinPresetPtrOutput)
}

// The built-in preset to be used for encoding videos. The allowed values are `AACGoodQualityAudio`, `AdaptiveStreaming`,`ContentAwareEncoding`, `ContentAwareEncodingExperimental`,`CopyAllBitrateNonInterleaved`, `H264MultipleBitrate1080p`,`H264MultipleBitrate720p`, `H264MultipleBitrateSD`,`H264SingleBitrate1080p`, `H264SingleBitrate720p` and `H264SingleBitrateSD`.
func (o TransformOutputBuiltinPresetOutput) PresetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputBuiltinPreset) *string { return v.PresetName }).(pulumi.StringPtrOutput)
}

type TransformOutputBuiltinPresetPtrOutput struct{ *pulumi.OutputState }

func (TransformOutputBuiltinPresetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputBuiltinPreset)(nil)).Elem()
}

func (o TransformOutputBuiltinPresetPtrOutput) ToTransformOutputBuiltinPresetPtrOutput() TransformOutputBuiltinPresetPtrOutput {
	return o
}

func (o TransformOutputBuiltinPresetPtrOutput) ToTransformOutputBuiltinPresetPtrOutputWithContext(ctx context.Context) TransformOutputBuiltinPresetPtrOutput {
	return o
}

func (o TransformOutputBuiltinPresetPtrOutput) Elem() TransformOutputBuiltinPresetOutput {
	return o.ApplyT(func(v *TransformOutputBuiltinPreset) TransformOutputBuiltinPreset { return *v }).(TransformOutputBuiltinPresetOutput)
}

// The built-in preset to be used for encoding videos. The allowed values are `AACGoodQualityAudio`, `AdaptiveStreaming`,`ContentAwareEncoding`, `ContentAwareEncodingExperimental`,`CopyAllBitrateNonInterleaved`, `H264MultipleBitrate1080p`,`H264MultipleBitrate720p`, `H264MultipleBitrateSD`,`H264SingleBitrate1080p`, `H264SingleBitrate720p` and `H264SingleBitrateSD`.
func (o TransformOutputBuiltinPresetPtrOutput) PresetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputBuiltinPreset) *string {
		if v == nil {
			return nil
		}
		return v.PresetName
	}).(pulumi.StringPtrOutput)
}

type TransformOutputFaceDetectorPreset struct {
	// Possibles value are `SourceResolution` or `StandardDefinition`. Specifies the maximum resolution at which your video is analyzed. The default behavior is `SourceResolution` which will keep the input video at its original resolution when analyzed. Using `StandardDefinition` will resize input videos to standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution. For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to `StandardDefinition` will reduce the time it takes to process high resolution video. It may also reduce the cost of using this component (see https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics for details). However, faces that end up being too small in the resized video may not be detected.
	AnalysisResolution *string `pulumi:"analysisResolution"`
}

// TransformOutputFaceDetectorPresetInput is an input type that accepts TransformOutputFaceDetectorPresetArgs and TransformOutputFaceDetectorPresetOutput values.
// You can construct a concrete instance of `TransformOutputFaceDetectorPresetInput` via:
//
//          TransformOutputFaceDetectorPresetArgs{...}
type TransformOutputFaceDetectorPresetInput interface {
	pulumi.Input

	ToTransformOutputFaceDetectorPresetOutput() TransformOutputFaceDetectorPresetOutput
	ToTransformOutputFaceDetectorPresetOutputWithContext(context.Context) TransformOutputFaceDetectorPresetOutput
}

type TransformOutputFaceDetectorPresetArgs struct {
	// Possibles value are `SourceResolution` or `StandardDefinition`. Specifies the maximum resolution at which your video is analyzed. The default behavior is `SourceResolution` which will keep the input video at its original resolution when analyzed. Using `StandardDefinition` will resize input videos to standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution. For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to `StandardDefinition` will reduce the time it takes to process high resolution video. It may also reduce the cost of using this component (see https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics for details). However, faces that end up being too small in the resized video may not be detected.
	AnalysisResolution pulumi.StringPtrInput `pulumi:"analysisResolution"`
}

func (TransformOutputFaceDetectorPresetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputFaceDetectorPreset)(nil)).Elem()
}

func (i TransformOutputFaceDetectorPresetArgs) ToTransformOutputFaceDetectorPresetOutput() TransformOutputFaceDetectorPresetOutput {
	return i.ToTransformOutputFaceDetectorPresetOutputWithContext(context.Background())
}

func (i TransformOutputFaceDetectorPresetArgs) ToTransformOutputFaceDetectorPresetOutputWithContext(ctx context.Context) TransformOutputFaceDetectorPresetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputFaceDetectorPresetOutput)
}

func (i TransformOutputFaceDetectorPresetArgs) ToTransformOutputFaceDetectorPresetPtrOutput() TransformOutputFaceDetectorPresetPtrOutput {
	return i.ToTransformOutputFaceDetectorPresetPtrOutputWithContext(context.Background())
}

func (i TransformOutputFaceDetectorPresetArgs) ToTransformOutputFaceDetectorPresetPtrOutputWithContext(ctx context.Context) TransformOutputFaceDetectorPresetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputFaceDetectorPresetOutput).ToTransformOutputFaceDetectorPresetPtrOutputWithContext(ctx)
}

// TransformOutputFaceDetectorPresetPtrInput is an input type that accepts TransformOutputFaceDetectorPresetArgs, TransformOutputFaceDetectorPresetPtr and TransformOutputFaceDetectorPresetPtrOutput values.
// You can construct a concrete instance of `TransformOutputFaceDetectorPresetPtrInput` via:
//
//          TransformOutputFaceDetectorPresetArgs{...}
//
//  or:
//
//          nil
type TransformOutputFaceDetectorPresetPtrInput interface {
	pulumi.Input

	ToTransformOutputFaceDetectorPresetPtrOutput() TransformOutputFaceDetectorPresetPtrOutput
	ToTransformOutputFaceDetectorPresetPtrOutputWithContext(context.Context) TransformOutputFaceDetectorPresetPtrOutput
}

type transformOutputFaceDetectorPresetPtrType TransformOutputFaceDetectorPresetArgs

func TransformOutputFaceDetectorPresetPtr(v *TransformOutputFaceDetectorPresetArgs) TransformOutputFaceDetectorPresetPtrInput {
	return (*transformOutputFaceDetectorPresetPtrType)(v)
}

func (*transformOutputFaceDetectorPresetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputFaceDetectorPreset)(nil)).Elem()
}

func (i *transformOutputFaceDetectorPresetPtrType) ToTransformOutputFaceDetectorPresetPtrOutput() TransformOutputFaceDetectorPresetPtrOutput {
	return i.ToTransformOutputFaceDetectorPresetPtrOutputWithContext(context.Background())
}

func (i *transformOutputFaceDetectorPresetPtrType) ToTransformOutputFaceDetectorPresetPtrOutputWithContext(ctx context.Context) TransformOutputFaceDetectorPresetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputFaceDetectorPresetPtrOutput)
}

type TransformOutputFaceDetectorPresetOutput struct{ *pulumi.OutputState }

func (TransformOutputFaceDetectorPresetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputFaceDetectorPreset)(nil)).Elem()
}

func (o TransformOutputFaceDetectorPresetOutput) ToTransformOutputFaceDetectorPresetOutput() TransformOutputFaceDetectorPresetOutput {
	return o
}

func (o TransformOutputFaceDetectorPresetOutput) ToTransformOutputFaceDetectorPresetOutputWithContext(ctx context.Context) TransformOutputFaceDetectorPresetOutput {
	return o
}

func (o TransformOutputFaceDetectorPresetOutput) ToTransformOutputFaceDetectorPresetPtrOutput() TransformOutputFaceDetectorPresetPtrOutput {
	return o.ToTransformOutputFaceDetectorPresetPtrOutputWithContext(context.Background())
}

func (o TransformOutputFaceDetectorPresetOutput) ToTransformOutputFaceDetectorPresetPtrOutputWithContext(ctx context.Context) TransformOutputFaceDetectorPresetPtrOutput {
	return o.ApplyT(func(v TransformOutputFaceDetectorPreset) *TransformOutputFaceDetectorPreset {
		return &v
	}).(TransformOutputFaceDetectorPresetPtrOutput)
}

// Possibles value are `SourceResolution` or `StandardDefinition`. Specifies the maximum resolution at which your video is analyzed. The default behavior is `SourceResolution` which will keep the input video at its original resolution when analyzed. Using `StandardDefinition` will resize input videos to standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution. For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to `StandardDefinition` will reduce the time it takes to process high resolution video. It may also reduce the cost of using this component (see https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics for details). However, faces that end up being too small in the resized video may not be detected.
func (o TransformOutputFaceDetectorPresetOutput) AnalysisResolution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputFaceDetectorPreset) *string { return v.AnalysisResolution }).(pulumi.StringPtrOutput)
}

type TransformOutputFaceDetectorPresetPtrOutput struct{ *pulumi.OutputState }

func (TransformOutputFaceDetectorPresetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputFaceDetectorPreset)(nil)).Elem()
}

func (o TransformOutputFaceDetectorPresetPtrOutput) ToTransformOutputFaceDetectorPresetPtrOutput() TransformOutputFaceDetectorPresetPtrOutput {
	return o
}

func (o TransformOutputFaceDetectorPresetPtrOutput) ToTransformOutputFaceDetectorPresetPtrOutputWithContext(ctx context.Context) TransformOutputFaceDetectorPresetPtrOutput {
	return o
}

func (o TransformOutputFaceDetectorPresetPtrOutput) Elem() TransformOutputFaceDetectorPresetOutput {
	return o.ApplyT(func(v *TransformOutputFaceDetectorPreset) TransformOutputFaceDetectorPreset { return *v }).(TransformOutputFaceDetectorPresetOutput)
}

// Possibles value are `SourceResolution` or `StandardDefinition`. Specifies the maximum resolution at which your video is analyzed. The default behavior is `SourceResolution` which will keep the input video at its original resolution when analyzed. Using `StandardDefinition` will resize input videos to standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution. For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to `StandardDefinition` will reduce the time it takes to process high resolution video. It may also reduce the cost of using this component (see https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics for details). However, faces that end up being too small in the resized video may not be detected.
func (o TransformOutputFaceDetectorPresetPtrOutput) AnalysisResolution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputFaceDetectorPreset) *string {
		if v == nil {
			return nil
		}
		return v.AnalysisResolution
	}).(pulumi.StringPtrOutput)
}

type TransformOutputVideoAnalyzerPreset struct {
	// Possibles value are `Basic` or `Standard`. Determines the set of audio analysis operations to be performed.
	AudioAnalysisMode *string `pulumi:"audioAnalysisMode"`
	// The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US'). If you know the language of your content, it is recommended that you specify it. The language must be specified explicitly for AudioAnalysisMode:Basic, since automatic language detection is not included in basic mode. If the language isn't specified, automatic language detection will choose the first language detected and process with the selected language for the duration of the file. It does not currently support dynamically switching between languages after the first language is detected. The automatic detection works best with audio recordings with clearly discernable speech. If automatic detection fails to find the language, transcription would fallback to 'en-US'." The list of supported languages is available here: https://go.microsoft.com/fwlink/?linkid=2109463.
	AudioLanguage *string `pulumi:"audioLanguage"`
	// Defines the type of insights that you want the service to generate. The allowed values are `AudioInsightsOnly`, `VideoInsightsOnly`, and `AllInsights`. If you set this to `AllInsights` and the input is audio only, then only audio insights are generated. Similarly if the input is video only, then only video insights are generated. It is recommended that you not use `AudioInsightsOnly` if you expect some of your inputs to be video only; or use `VideoInsightsOnly` if you expect some of your inputs to be audio only. Your Jobs in such conditions would error out.
	InsightsType *string `pulumi:"insightsType"`
}

// TransformOutputVideoAnalyzerPresetInput is an input type that accepts TransformOutputVideoAnalyzerPresetArgs and TransformOutputVideoAnalyzerPresetOutput values.
// You can construct a concrete instance of `TransformOutputVideoAnalyzerPresetInput` via:
//
//          TransformOutputVideoAnalyzerPresetArgs{...}
type TransformOutputVideoAnalyzerPresetInput interface {
	pulumi.Input

	ToTransformOutputVideoAnalyzerPresetOutput() TransformOutputVideoAnalyzerPresetOutput
	ToTransformOutputVideoAnalyzerPresetOutputWithContext(context.Context) TransformOutputVideoAnalyzerPresetOutput
}

type TransformOutputVideoAnalyzerPresetArgs struct {
	// Possibles value are `Basic` or `Standard`. Determines the set of audio analysis operations to be performed.
	AudioAnalysisMode pulumi.StringPtrInput `pulumi:"audioAnalysisMode"`
	// The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US'). If you know the language of your content, it is recommended that you specify it. The language must be specified explicitly for AudioAnalysisMode:Basic, since automatic language detection is not included in basic mode. If the language isn't specified, automatic language detection will choose the first language detected and process with the selected language for the duration of the file. It does not currently support dynamically switching between languages after the first language is detected. The automatic detection works best with audio recordings with clearly discernable speech. If automatic detection fails to find the language, transcription would fallback to 'en-US'." The list of supported languages is available here: https://go.microsoft.com/fwlink/?linkid=2109463.
	AudioLanguage pulumi.StringPtrInput `pulumi:"audioLanguage"`
	// Defines the type of insights that you want the service to generate. The allowed values are `AudioInsightsOnly`, `VideoInsightsOnly`, and `AllInsights`. If you set this to `AllInsights` and the input is audio only, then only audio insights are generated. Similarly if the input is video only, then only video insights are generated. It is recommended that you not use `AudioInsightsOnly` if you expect some of your inputs to be video only; or use `VideoInsightsOnly` if you expect some of your inputs to be audio only. Your Jobs in such conditions would error out.
	InsightsType pulumi.StringPtrInput `pulumi:"insightsType"`
}

func (TransformOutputVideoAnalyzerPresetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputVideoAnalyzerPreset)(nil)).Elem()
}

func (i TransformOutputVideoAnalyzerPresetArgs) ToTransformOutputVideoAnalyzerPresetOutput() TransformOutputVideoAnalyzerPresetOutput {
	return i.ToTransformOutputVideoAnalyzerPresetOutputWithContext(context.Background())
}

func (i TransformOutputVideoAnalyzerPresetArgs) ToTransformOutputVideoAnalyzerPresetOutputWithContext(ctx context.Context) TransformOutputVideoAnalyzerPresetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputVideoAnalyzerPresetOutput)
}

func (i TransformOutputVideoAnalyzerPresetArgs) ToTransformOutputVideoAnalyzerPresetPtrOutput() TransformOutputVideoAnalyzerPresetPtrOutput {
	return i.ToTransformOutputVideoAnalyzerPresetPtrOutputWithContext(context.Background())
}

func (i TransformOutputVideoAnalyzerPresetArgs) ToTransformOutputVideoAnalyzerPresetPtrOutputWithContext(ctx context.Context) TransformOutputVideoAnalyzerPresetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputVideoAnalyzerPresetOutput).ToTransformOutputVideoAnalyzerPresetPtrOutputWithContext(ctx)
}

// TransformOutputVideoAnalyzerPresetPtrInput is an input type that accepts TransformOutputVideoAnalyzerPresetArgs, TransformOutputVideoAnalyzerPresetPtr and TransformOutputVideoAnalyzerPresetPtrOutput values.
// You can construct a concrete instance of `TransformOutputVideoAnalyzerPresetPtrInput` via:
//
//          TransformOutputVideoAnalyzerPresetArgs{...}
//
//  or:
//
//          nil
type TransformOutputVideoAnalyzerPresetPtrInput interface {
	pulumi.Input

	ToTransformOutputVideoAnalyzerPresetPtrOutput() TransformOutputVideoAnalyzerPresetPtrOutput
	ToTransformOutputVideoAnalyzerPresetPtrOutputWithContext(context.Context) TransformOutputVideoAnalyzerPresetPtrOutput
}

type transformOutputVideoAnalyzerPresetPtrType TransformOutputVideoAnalyzerPresetArgs

func TransformOutputVideoAnalyzerPresetPtr(v *TransformOutputVideoAnalyzerPresetArgs) TransformOutputVideoAnalyzerPresetPtrInput {
	return (*transformOutputVideoAnalyzerPresetPtrType)(v)
}

func (*transformOutputVideoAnalyzerPresetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputVideoAnalyzerPreset)(nil)).Elem()
}

func (i *transformOutputVideoAnalyzerPresetPtrType) ToTransformOutputVideoAnalyzerPresetPtrOutput() TransformOutputVideoAnalyzerPresetPtrOutput {
	return i.ToTransformOutputVideoAnalyzerPresetPtrOutputWithContext(context.Background())
}

func (i *transformOutputVideoAnalyzerPresetPtrType) ToTransformOutputVideoAnalyzerPresetPtrOutputWithContext(ctx context.Context) TransformOutputVideoAnalyzerPresetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputVideoAnalyzerPresetPtrOutput)
}

type TransformOutputVideoAnalyzerPresetOutput struct{ *pulumi.OutputState }

func (TransformOutputVideoAnalyzerPresetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputVideoAnalyzerPreset)(nil)).Elem()
}

func (o TransformOutputVideoAnalyzerPresetOutput) ToTransformOutputVideoAnalyzerPresetOutput() TransformOutputVideoAnalyzerPresetOutput {
	return o
}

func (o TransformOutputVideoAnalyzerPresetOutput) ToTransformOutputVideoAnalyzerPresetOutputWithContext(ctx context.Context) TransformOutputVideoAnalyzerPresetOutput {
	return o
}

func (o TransformOutputVideoAnalyzerPresetOutput) ToTransformOutputVideoAnalyzerPresetPtrOutput() TransformOutputVideoAnalyzerPresetPtrOutput {
	return o.ToTransformOutputVideoAnalyzerPresetPtrOutputWithContext(context.Background())
}

func (o TransformOutputVideoAnalyzerPresetOutput) ToTransformOutputVideoAnalyzerPresetPtrOutputWithContext(ctx context.Context) TransformOutputVideoAnalyzerPresetPtrOutput {
	return o.ApplyT(func(v TransformOutputVideoAnalyzerPreset) *TransformOutputVideoAnalyzerPreset {
		return &v
	}).(TransformOutputVideoAnalyzerPresetPtrOutput)
}

// Possibles value are `Basic` or `Standard`. Determines the set of audio analysis operations to be performed.
func (o TransformOutputVideoAnalyzerPresetOutput) AudioAnalysisMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputVideoAnalyzerPreset) *string { return v.AudioAnalysisMode }).(pulumi.StringPtrOutput)
}

// The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US'). If you know the language of your content, it is recommended that you specify it. The language must be specified explicitly for AudioAnalysisMode:Basic, since automatic language detection is not included in basic mode. If the language isn't specified, automatic language detection will choose the first language detected and process with the selected language for the duration of the file. It does not currently support dynamically switching between languages after the first language is detected. The automatic detection works best with audio recordings with clearly discernable speech. If automatic detection fails to find the language, transcription would fallback to 'en-US'." The list of supported languages is available here: https://go.microsoft.com/fwlink/?linkid=2109463.
func (o TransformOutputVideoAnalyzerPresetOutput) AudioLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputVideoAnalyzerPreset) *string { return v.AudioLanguage }).(pulumi.StringPtrOutput)
}

// Defines the type of insights that you want the service to generate. The allowed values are `AudioInsightsOnly`, `VideoInsightsOnly`, and `AllInsights`. If you set this to `AllInsights` and the input is audio only, then only audio insights are generated. Similarly if the input is video only, then only video insights are generated. It is recommended that you not use `AudioInsightsOnly` if you expect some of your inputs to be video only; or use `VideoInsightsOnly` if you expect some of your inputs to be audio only. Your Jobs in such conditions would error out.
func (o TransformOutputVideoAnalyzerPresetOutput) InsightsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputVideoAnalyzerPreset) *string { return v.InsightsType }).(pulumi.StringPtrOutput)
}

type TransformOutputVideoAnalyzerPresetPtrOutput struct{ *pulumi.OutputState }

func (TransformOutputVideoAnalyzerPresetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputVideoAnalyzerPreset)(nil)).Elem()
}

func (o TransformOutputVideoAnalyzerPresetPtrOutput) ToTransformOutputVideoAnalyzerPresetPtrOutput() TransformOutputVideoAnalyzerPresetPtrOutput {
	return o
}

func (o TransformOutputVideoAnalyzerPresetPtrOutput) ToTransformOutputVideoAnalyzerPresetPtrOutputWithContext(ctx context.Context) TransformOutputVideoAnalyzerPresetPtrOutput {
	return o
}

func (o TransformOutputVideoAnalyzerPresetPtrOutput) Elem() TransformOutputVideoAnalyzerPresetOutput {
	return o.ApplyT(func(v *TransformOutputVideoAnalyzerPreset) TransformOutputVideoAnalyzerPreset { return *v }).(TransformOutputVideoAnalyzerPresetOutput)
}

// Possibles value are `Basic` or `Standard`. Determines the set of audio analysis operations to be performed.
func (o TransformOutputVideoAnalyzerPresetPtrOutput) AudioAnalysisMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputVideoAnalyzerPreset) *string {
		if v == nil {
			return nil
		}
		return v.AudioAnalysisMode
	}).(pulumi.StringPtrOutput)
}

// The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US'). If you know the language of your content, it is recommended that you specify it. The language must be specified explicitly for AudioAnalysisMode:Basic, since automatic language detection is not included in basic mode. If the language isn't specified, automatic language detection will choose the first language detected and process with the selected language for the duration of the file. It does not currently support dynamically switching between languages after the first language is detected. The automatic detection works best with audio recordings with clearly discernable speech. If automatic detection fails to find the language, transcription would fallback to 'en-US'." The list of supported languages is available here: https://go.microsoft.com/fwlink/?linkid=2109463.
func (o TransformOutputVideoAnalyzerPresetPtrOutput) AudioLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputVideoAnalyzerPreset) *string {
		if v == nil {
			return nil
		}
		return v.AudioLanguage
	}).(pulumi.StringPtrOutput)
}

// Defines the type of insights that you want the service to generate. The allowed values are `AudioInsightsOnly`, `VideoInsightsOnly`, and `AllInsights`. If you set this to `AllInsights` and the input is audio only, then only audio insights are generated. Similarly if the input is video only, then only video insights are generated. It is recommended that you not use `AudioInsightsOnly` if you expect some of your inputs to be video only; or use `VideoInsightsOnly` if you expect some of your inputs to be audio only. Your Jobs in such conditions would error out.
func (o TransformOutputVideoAnalyzerPresetPtrOutput) InsightsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputVideoAnalyzerPreset) *string {
		if v == nil {
			return nil
		}
		return v.InsightsType
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ContentKeyPolicyPolicyOptionOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPolicyOptionArrayOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPolicyOptionFairplayConfigurationOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPolicyOptionTokenRestrictionOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput{})
	pulumi.RegisterOutputType(JobInputAssetOutput{})
	pulumi.RegisterOutputType(JobInputAssetPtrOutput{})
	pulumi.RegisterOutputType(JobOutputAssetOutput{})
	pulumi.RegisterOutputType(JobOutputAssetArrayOutput{})
	pulumi.RegisterOutputType(ServiceAccountIdentityOutput{})
	pulumi.RegisterOutputType(ServiceAccountIdentityPtrOutput{})
	pulumi.RegisterOutputType(ServiceAccountStorageAccountOutput{})
	pulumi.RegisterOutputType(ServiceAccountStorageAccountArrayOutput{})
	pulumi.RegisterOutputType(StreamingEndpointAccessControlOutput{})
	pulumi.RegisterOutputType(StreamingEndpointAccessControlPtrOutput{})
	pulumi.RegisterOutputType(StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput{})
	pulumi.RegisterOutputType(StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput{})
	pulumi.RegisterOutputType(StreamingEndpointAccessControlIpAllowOutput{})
	pulumi.RegisterOutputType(StreamingEndpointAccessControlIpAllowArrayOutput{})
	pulumi.RegisterOutputType(StreamingEndpointCrossSiteAccessPolicyOutput{})
	pulumi.RegisterOutputType(StreamingEndpointCrossSiteAccessPolicyPtrOutput{})
	pulumi.RegisterOutputType(StreamingLocatorContentKeyOutput{})
	pulumi.RegisterOutputType(StreamingLocatorContentKeyArrayOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCbcsOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCbcsPtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCencOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCencPtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyNoEncryptionEnabledProtocolsOutput{})
	pulumi.RegisterOutputType(StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput{})
	pulumi.RegisterOutputType(TransformOutputTypeOutput{})
	pulumi.RegisterOutputType(TransformOutputTypeArrayOutput{})
	pulumi.RegisterOutputType(TransformOutputAudioAnalyzerPresetOutput{})
	pulumi.RegisterOutputType(TransformOutputAudioAnalyzerPresetPtrOutput{})
	pulumi.RegisterOutputType(TransformOutputBuiltinPresetOutput{})
	pulumi.RegisterOutputType(TransformOutputBuiltinPresetPtrOutput{})
	pulumi.RegisterOutputType(TransformOutputFaceDetectorPresetOutput{})
	pulumi.RegisterOutputType(TransformOutputFaceDetectorPresetPtrOutput{})
	pulumi.RegisterOutputType(TransformOutputVideoAnalyzerPresetOutput{})
	pulumi.RegisterOutputType(TransformOutputVideoAnalyzerPresetPtrOutput{})
}
