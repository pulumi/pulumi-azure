// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package media

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type AccountFilterPresentationTimeRange struct {
	// The absolute end time boundary. Applies to Video on Demand (VoD).
	// For the Live Streaming presentation, it is silently ignored and applied when the presentation ends and the stream becomes VoD. This is a long value that represents an absolute end point of the presentation, rounded to the closest next GOP start. The unit is defined by `unitTimescaleInMilliseconds`, so an `endInUnits` of 180 would be for 3 minutes. Use `startInUnits` and `endInUnits` to trim the fragments that will be in the playlist (manifest). For example, `startInUnits` set to 20 and `endInUnits` set to 60 using `unitTimescaleInMilliseconds` in 1000 will generate a playlist that contains fragments from between 20 seconds and 60 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.
	EndInUnits *int `pulumi:"endInUnits"`
	// Indicates whether the `endInUnits` property must be present. If true, `endInUnits` must be specified or a bad request code is returned. Applies to Live Streaming only. Allowed values: `false`, `true`.
	ForceEnd *bool `pulumi:"forceEnd"`
	// The relative to end right edge. Applies to Live Streaming only.
	// This value defines the latest live position that a client can seek to. Using this property, you can delay live playback position and create a server-side buffer for players. The unit is defined by `unitTimescaleInMilliseconds`. The maximum live back off duration is 300 seconds. For example, a value of 20 means that the latest available content is 20 seconds delayed from the real live edge.
	LiveBackoffInUnits *int `pulumi:"liveBackoffInUnits"`
	// The relative to end sliding window. Applies to Live Streaming only. Use `presentationWindowInUnits` to apply a sliding window of fragments to include in a playlist. The unit is defined by `unitTimescaleInMilliseconds`. For example, set `presentationWindowInUnits` to 120 to apply a two-minute sliding window. Media within 2 minutes of the live edge will be included in the playlist. If a fragment straddles the boundary, the entire fragment will be included in the playlist. The minimum presentation window duration is 60 seconds.
	PresentationWindowInUnits *int `pulumi:"presentationWindowInUnits"`
	// The absolute start time boundary. Applies to Video on Demand (VoD) or Live Streaming. This is a long value that represents an absolute start point of the stream. The value gets rounded to the closest next GOP start. The unit is defined by `unitTimescaleInMilliseconds`, so a `startInUnits` of 15 would be for 15 seconds. Use `startInUnits` and `endInUnits` to trim the fragments that will be in the playlist (manifest). For example, `startInUnits` set to 20 and `endInUnits` set to 60 using `unitTimescaleInMilliseconds` in 1000 will generate a playlist that contains fragments from between 20 seconds and 60 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.
	StartInUnits *int `pulumi:"startInUnits"`
	// Specified as the number of milliseconds in one unit timescale. For example, if you want to set a `startInUnits` at 30 seconds, you would use a value of 30 when using the `unitTimescaleInMilliseconds` in 1000. Or if you want to set `startInUnits` in 30 milliseconds, you would use a value of 30 when using the `unitTimescaleInMilliseconds` in 1. Applies timescale to `startInUnits`, `startTimescale` and `presentationWindowInTimescale` and `liveBackoffInTimescale`.
	UnitTimescaleInMilliseconds int `pulumi:"unitTimescaleInMilliseconds"`
}

// AccountFilterPresentationTimeRangeInput is an input type that accepts AccountFilterPresentationTimeRangeArgs and AccountFilterPresentationTimeRangeOutput values.
// You can construct a concrete instance of `AccountFilterPresentationTimeRangeInput` via:
//
//	AccountFilterPresentationTimeRangeArgs{...}
type AccountFilterPresentationTimeRangeInput interface {
	pulumi.Input

	ToAccountFilterPresentationTimeRangeOutput() AccountFilterPresentationTimeRangeOutput
	ToAccountFilterPresentationTimeRangeOutputWithContext(context.Context) AccountFilterPresentationTimeRangeOutput
}

type AccountFilterPresentationTimeRangeArgs struct {
	// The absolute end time boundary. Applies to Video on Demand (VoD).
	// For the Live Streaming presentation, it is silently ignored and applied when the presentation ends and the stream becomes VoD. This is a long value that represents an absolute end point of the presentation, rounded to the closest next GOP start. The unit is defined by `unitTimescaleInMilliseconds`, so an `endInUnits` of 180 would be for 3 minutes. Use `startInUnits` and `endInUnits` to trim the fragments that will be in the playlist (manifest). For example, `startInUnits` set to 20 and `endInUnits` set to 60 using `unitTimescaleInMilliseconds` in 1000 will generate a playlist that contains fragments from between 20 seconds and 60 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.
	EndInUnits pulumi.IntPtrInput `pulumi:"endInUnits"`
	// Indicates whether the `endInUnits` property must be present. If true, `endInUnits` must be specified or a bad request code is returned. Applies to Live Streaming only. Allowed values: `false`, `true`.
	ForceEnd pulumi.BoolPtrInput `pulumi:"forceEnd"`
	// The relative to end right edge. Applies to Live Streaming only.
	// This value defines the latest live position that a client can seek to. Using this property, you can delay live playback position and create a server-side buffer for players. The unit is defined by `unitTimescaleInMilliseconds`. The maximum live back off duration is 300 seconds. For example, a value of 20 means that the latest available content is 20 seconds delayed from the real live edge.
	LiveBackoffInUnits pulumi.IntPtrInput `pulumi:"liveBackoffInUnits"`
	// The relative to end sliding window. Applies to Live Streaming only. Use `presentationWindowInUnits` to apply a sliding window of fragments to include in a playlist. The unit is defined by `unitTimescaleInMilliseconds`. For example, set `presentationWindowInUnits` to 120 to apply a two-minute sliding window. Media within 2 minutes of the live edge will be included in the playlist. If a fragment straddles the boundary, the entire fragment will be included in the playlist. The minimum presentation window duration is 60 seconds.
	PresentationWindowInUnits pulumi.IntPtrInput `pulumi:"presentationWindowInUnits"`
	// The absolute start time boundary. Applies to Video on Demand (VoD) or Live Streaming. This is a long value that represents an absolute start point of the stream. The value gets rounded to the closest next GOP start. The unit is defined by `unitTimescaleInMilliseconds`, so a `startInUnits` of 15 would be for 15 seconds. Use `startInUnits` and `endInUnits` to trim the fragments that will be in the playlist (manifest). For example, `startInUnits` set to 20 and `endInUnits` set to 60 using `unitTimescaleInMilliseconds` in 1000 will generate a playlist that contains fragments from between 20 seconds and 60 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.
	StartInUnits pulumi.IntPtrInput `pulumi:"startInUnits"`
	// Specified as the number of milliseconds in one unit timescale. For example, if you want to set a `startInUnits` at 30 seconds, you would use a value of 30 when using the `unitTimescaleInMilliseconds` in 1000. Or if you want to set `startInUnits` in 30 milliseconds, you would use a value of 30 when using the `unitTimescaleInMilliseconds` in 1. Applies timescale to `startInUnits`, `startTimescale` and `presentationWindowInTimescale` and `liveBackoffInTimescale`.
	UnitTimescaleInMilliseconds pulumi.IntInput `pulumi:"unitTimescaleInMilliseconds"`
}

func (AccountFilterPresentationTimeRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountFilterPresentationTimeRange)(nil)).Elem()
}

func (i AccountFilterPresentationTimeRangeArgs) ToAccountFilterPresentationTimeRangeOutput() AccountFilterPresentationTimeRangeOutput {
	return i.ToAccountFilterPresentationTimeRangeOutputWithContext(context.Background())
}

func (i AccountFilterPresentationTimeRangeArgs) ToAccountFilterPresentationTimeRangeOutputWithContext(ctx context.Context) AccountFilterPresentationTimeRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountFilterPresentationTimeRangeOutput)
}

func (i AccountFilterPresentationTimeRangeArgs) ToOutput(ctx context.Context) pulumix.Output[AccountFilterPresentationTimeRange] {
	return pulumix.Output[AccountFilterPresentationTimeRange]{
		OutputState: i.ToAccountFilterPresentationTimeRangeOutputWithContext(ctx).OutputState,
	}
}

func (i AccountFilterPresentationTimeRangeArgs) ToAccountFilterPresentationTimeRangePtrOutput() AccountFilterPresentationTimeRangePtrOutput {
	return i.ToAccountFilterPresentationTimeRangePtrOutputWithContext(context.Background())
}

func (i AccountFilterPresentationTimeRangeArgs) ToAccountFilterPresentationTimeRangePtrOutputWithContext(ctx context.Context) AccountFilterPresentationTimeRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountFilterPresentationTimeRangeOutput).ToAccountFilterPresentationTimeRangePtrOutputWithContext(ctx)
}

// AccountFilterPresentationTimeRangePtrInput is an input type that accepts AccountFilterPresentationTimeRangeArgs, AccountFilterPresentationTimeRangePtr and AccountFilterPresentationTimeRangePtrOutput values.
// You can construct a concrete instance of `AccountFilterPresentationTimeRangePtrInput` via:
//
//	        AccountFilterPresentationTimeRangeArgs{...}
//
//	or:
//
//	        nil
type AccountFilterPresentationTimeRangePtrInput interface {
	pulumi.Input

	ToAccountFilterPresentationTimeRangePtrOutput() AccountFilterPresentationTimeRangePtrOutput
	ToAccountFilterPresentationTimeRangePtrOutputWithContext(context.Context) AccountFilterPresentationTimeRangePtrOutput
}

type accountFilterPresentationTimeRangePtrType AccountFilterPresentationTimeRangeArgs

func AccountFilterPresentationTimeRangePtr(v *AccountFilterPresentationTimeRangeArgs) AccountFilterPresentationTimeRangePtrInput {
	return (*accountFilterPresentationTimeRangePtrType)(v)
}

func (*accountFilterPresentationTimeRangePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountFilterPresentationTimeRange)(nil)).Elem()
}

func (i *accountFilterPresentationTimeRangePtrType) ToAccountFilterPresentationTimeRangePtrOutput() AccountFilterPresentationTimeRangePtrOutput {
	return i.ToAccountFilterPresentationTimeRangePtrOutputWithContext(context.Background())
}

func (i *accountFilterPresentationTimeRangePtrType) ToAccountFilterPresentationTimeRangePtrOutputWithContext(ctx context.Context) AccountFilterPresentationTimeRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountFilterPresentationTimeRangePtrOutput)
}

func (i *accountFilterPresentationTimeRangePtrType) ToOutput(ctx context.Context) pulumix.Output[*AccountFilterPresentationTimeRange] {
	return pulumix.Output[*AccountFilterPresentationTimeRange]{
		OutputState: i.ToAccountFilterPresentationTimeRangePtrOutputWithContext(ctx).OutputState,
	}
}

type AccountFilterPresentationTimeRangeOutput struct{ *pulumi.OutputState }

func (AccountFilterPresentationTimeRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountFilterPresentationTimeRange)(nil)).Elem()
}

func (o AccountFilterPresentationTimeRangeOutput) ToAccountFilterPresentationTimeRangeOutput() AccountFilterPresentationTimeRangeOutput {
	return o
}

func (o AccountFilterPresentationTimeRangeOutput) ToAccountFilterPresentationTimeRangeOutputWithContext(ctx context.Context) AccountFilterPresentationTimeRangeOutput {
	return o
}

func (o AccountFilterPresentationTimeRangeOutput) ToAccountFilterPresentationTimeRangePtrOutput() AccountFilterPresentationTimeRangePtrOutput {
	return o.ToAccountFilterPresentationTimeRangePtrOutputWithContext(context.Background())
}

func (o AccountFilterPresentationTimeRangeOutput) ToAccountFilterPresentationTimeRangePtrOutputWithContext(ctx context.Context) AccountFilterPresentationTimeRangePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccountFilterPresentationTimeRange) *AccountFilterPresentationTimeRange {
		return &v
	}).(AccountFilterPresentationTimeRangePtrOutput)
}

func (o AccountFilterPresentationTimeRangeOutput) ToOutput(ctx context.Context) pulumix.Output[AccountFilterPresentationTimeRange] {
	return pulumix.Output[AccountFilterPresentationTimeRange]{
		OutputState: o.OutputState,
	}
}

// The absolute end time boundary. Applies to Video on Demand (VoD).
// For the Live Streaming presentation, it is silently ignored and applied when the presentation ends and the stream becomes VoD. This is a long value that represents an absolute end point of the presentation, rounded to the closest next GOP start. The unit is defined by `unitTimescaleInMilliseconds`, so an `endInUnits` of 180 would be for 3 minutes. Use `startInUnits` and `endInUnits` to trim the fragments that will be in the playlist (manifest). For example, `startInUnits` set to 20 and `endInUnits` set to 60 using `unitTimescaleInMilliseconds` in 1000 will generate a playlist that contains fragments from between 20 seconds and 60 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.
func (o AccountFilterPresentationTimeRangeOutput) EndInUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AccountFilterPresentationTimeRange) *int { return v.EndInUnits }).(pulumi.IntPtrOutput)
}

// Indicates whether the `endInUnits` property must be present. If true, `endInUnits` must be specified or a bad request code is returned. Applies to Live Streaming only. Allowed values: `false`, `true`.
func (o AccountFilterPresentationTimeRangeOutput) ForceEnd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccountFilterPresentationTimeRange) *bool { return v.ForceEnd }).(pulumi.BoolPtrOutput)
}

// The relative to end right edge. Applies to Live Streaming only.
// This value defines the latest live position that a client can seek to. Using this property, you can delay live playback position and create a server-side buffer for players. The unit is defined by `unitTimescaleInMilliseconds`. The maximum live back off duration is 300 seconds. For example, a value of 20 means that the latest available content is 20 seconds delayed from the real live edge.
func (o AccountFilterPresentationTimeRangeOutput) LiveBackoffInUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AccountFilterPresentationTimeRange) *int { return v.LiveBackoffInUnits }).(pulumi.IntPtrOutput)
}

// The relative to end sliding window. Applies to Live Streaming only. Use `presentationWindowInUnits` to apply a sliding window of fragments to include in a playlist. The unit is defined by `unitTimescaleInMilliseconds`. For example, set `presentationWindowInUnits` to 120 to apply a two-minute sliding window. Media within 2 minutes of the live edge will be included in the playlist. If a fragment straddles the boundary, the entire fragment will be included in the playlist. The minimum presentation window duration is 60 seconds.
func (o AccountFilterPresentationTimeRangeOutput) PresentationWindowInUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AccountFilterPresentationTimeRange) *int { return v.PresentationWindowInUnits }).(pulumi.IntPtrOutput)
}

// The absolute start time boundary. Applies to Video on Demand (VoD) or Live Streaming. This is a long value that represents an absolute start point of the stream. The value gets rounded to the closest next GOP start. The unit is defined by `unitTimescaleInMilliseconds`, so a `startInUnits` of 15 would be for 15 seconds. Use `startInUnits` and `endInUnits` to trim the fragments that will be in the playlist (manifest). For example, `startInUnits` set to 20 and `endInUnits` set to 60 using `unitTimescaleInMilliseconds` in 1000 will generate a playlist that contains fragments from between 20 seconds and 60 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.
func (o AccountFilterPresentationTimeRangeOutput) StartInUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AccountFilterPresentationTimeRange) *int { return v.StartInUnits }).(pulumi.IntPtrOutput)
}

// Specified as the number of milliseconds in one unit timescale. For example, if you want to set a `startInUnits` at 30 seconds, you would use a value of 30 when using the `unitTimescaleInMilliseconds` in 1000. Or if you want to set `startInUnits` in 30 milliseconds, you would use a value of 30 when using the `unitTimescaleInMilliseconds` in 1. Applies timescale to `startInUnits`, `startTimescale` and `presentationWindowInTimescale` and `liveBackoffInTimescale`.
func (o AccountFilterPresentationTimeRangeOutput) UnitTimescaleInMilliseconds() pulumi.IntOutput {
	return o.ApplyT(func(v AccountFilterPresentationTimeRange) int { return v.UnitTimescaleInMilliseconds }).(pulumi.IntOutput)
}

type AccountFilterPresentationTimeRangePtrOutput struct{ *pulumi.OutputState }

func (AccountFilterPresentationTimeRangePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountFilterPresentationTimeRange)(nil)).Elem()
}

func (o AccountFilterPresentationTimeRangePtrOutput) ToAccountFilterPresentationTimeRangePtrOutput() AccountFilterPresentationTimeRangePtrOutput {
	return o
}

func (o AccountFilterPresentationTimeRangePtrOutput) ToAccountFilterPresentationTimeRangePtrOutputWithContext(ctx context.Context) AccountFilterPresentationTimeRangePtrOutput {
	return o
}

func (o AccountFilterPresentationTimeRangePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AccountFilterPresentationTimeRange] {
	return pulumix.Output[*AccountFilterPresentationTimeRange]{
		OutputState: o.OutputState,
	}
}

func (o AccountFilterPresentationTimeRangePtrOutput) Elem() AccountFilterPresentationTimeRangeOutput {
	return o.ApplyT(func(v *AccountFilterPresentationTimeRange) AccountFilterPresentationTimeRange {
		if v != nil {
			return *v
		}
		var ret AccountFilterPresentationTimeRange
		return ret
	}).(AccountFilterPresentationTimeRangeOutput)
}

// The absolute end time boundary. Applies to Video on Demand (VoD).
// For the Live Streaming presentation, it is silently ignored and applied when the presentation ends and the stream becomes VoD. This is a long value that represents an absolute end point of the presentation, rounded to the closest next GOP start. The unit is defined by `unitTimescaleInMilliseconds`, so an `endInUnits` of 180 would be for 3 minutes. Use `startInUnits` and `endInUnits` to trim the fragments that will be in the playlist (manifest). For example, `startInUnits` set to 20 and `endInUnits` set to 60 using `unitTimescaleInMilliseconds` in 1000 will generate a playlist that contains fragments from between 20 seconds and 60 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.
func (o AccountFilterPresentationTimeRangePtrOutput) EndInUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AccountFilterPresentationTimeRange) *int {
		if v == nil {
			return nil
		}
		return v.EndInUnits
	}).(pulumi.IntPtrOutput)
}

// Indicates whether the `endInUnits` property must be present. If true, `endInUnits` must be specified or a bad request code is returned. Applies to Live Streaming only. Allowed values: `false`, `true`.
func (o AccountFilterPresentationTimeRangePtrOutput) ForceEnd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AccountFilterPresentationTimeRange) *bool {
		if v == nil {
			return nil
		}
		return v.ForceEnd
	}).(pulumi.BoolPtrOutput)
}

// The relative to end right edge. Applies to Live Streaming only.
// This value defines the latest live position that a client can seek to. Using this property, you can delay live playback position and create a server-side buffer for players. The unit is defined by `unitTimescaleInMilliseconds`. The maximum live back off duration is 300 seconds. For example, a value of 20 means that the latest available content is 20 seconds delayed from the real live edge.
func (o AccountFilterPresentationTimeRangePtrOutput) LiveBackoffInUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AccountFilterPresentationTimeRange) *int {
		if v == nil {
			return nil
		}
		return v.LiveBackoffInUnits
	}).(pulumi.IntPtrOutput)
}

// The relative to end sliding window. Applies to Live Streaming only. Use `presentationWindowInUnits` to apply a sliding window of fragments to include in a playlist. The unit is defined by `unitTimescaleInMilliseconds`. For example, set `presentationWindowInUnits` to 120 to apply a two-minute sliding window. Media within 2 minutes of the live edge will be included in the playlist. If a fragment straddles the boundary, the entire fragment will be included in the playlist. The minimum presentation window duration is 60 seconds.
func (o AccountFilterPresentationTimeRangePtrOutput) PresentationWindowInUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AccountFilterPresentationTimeRange) *int {
		if v == nil {
			return nil
		}
		return v.PresentationWindowInUnits
	}).(pulumi.IntPtrOutput)
}

// The absolute start time boundary. Applies to Video on Demand (VoD) or Live Streaming. This is a long value that represents an absolute start point of the stream. The value gets rounded to the closest next GOP start. The unit is defined by `unitTimescaleInMilliseconds`, so a `startInUnits` of 15 would be for 15 seconds. Use `startInUnits` and `endInUnits` to trim the fragments that will be in the playlist (manifest). For example, `startInUnits` set to 20 and `endInUnits` set to 60 using `unitTimescaleInMilliseconds` in 1000 will generate a playlist that contains fragments from between 20 seconds and 60 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.
func (o AccountFilterPresentationTimeRangePtrOutput) StartInUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AccountFilterPresentationTimeRange) *int {
		if v == nil {
			return nil
		}
		return v.StartInUnits
	}).(pulumi.IntPtrOutput)
}

// Specified as the number of milliseconds in one unit timescale. For example, if you want to set a `startInUnits` at 30 seconds, you would use a value of 30 when using the `unitTimescaleInMilliseconds` in 1000. Or if you want to set `startInUnits` in 30 milliseconds, you would use a value of 30 when using the `unitTimescaleInMilliseconds` in 1. Applies timescale to `startInUnits`, `startTimescale` and `presentationWindowInTimescale` and `liveBackoffInTimescale`.
func (o AccountFilterPresentationTimeRangePtrOutput) UnitTimescaleInMilliseconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AccountFilterPresentationTimeRange) *int {
		if v == nil {
			return nil
		}
		return &v.UnitTimescaleInMilliseconds
	}).(pulumi.IntPtrOutput)
}

type AccountFilterTrackSelection struct {
	// One or more `selection` blocks as defined above.
	Conditions []AccountFilterTrackSelectionCondition `pulumi:"conditions"`
}

// AccountFilterTrackSelectionInput is an input type that accepts AccountFilterTrackSelectionArgs and AccountFilterTrackSelectionOutput values.
// You can construct a concrete instance of `AccountFilterTrackSelectionInput` via:
//
//	AccountFilterTrackSelectionArgs{...}
type AccountFilterTrackSelectionInput interface {
	pulumi.Input

	ToAccountFilterTrackSelectionOutput() AccountFilterTrackSelectionOutput
	ToAccountFilterTrackSelectionOutputWithContext(context.Context) AccountFilterTrackSelectionOutput
}

type AccountFilterTrackSelectionArgs struct {
	// One or more `selection` blocks as defined above.
	Conditions AccountFilterTrackSelectionConditionArrayInput `pulumi:"conditions"`
}

func (AccountFilterTrackSelectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountFilterTrackSelection)(nil)).Elem()
}

func (i AccountFilterTrackSelectionArgs) ToAccountFilterTrackSelectionOutput() AccountFilterTrackSelectionOutput {
	return i.ToAccountFilterTrackSelectionOutputWithContext(context.Background())
}

func (i AccountFilterTrackSelectionArgs) ToAccountFilterTrackSelectionOutputWithContext(ctx context.Context) AccountFilterTrackSelectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountFilterTrackSelectionOutput)
}

func (i AccountFilterTrackSelectionArgs) ToOutput(ctx context.Context) pulumix.Output[AccountFilterTrackSelection] {
	return pulumix.Output[AccountFilterTrackSelection]{
		OutputState: i.ToAccountFilterTrackSelectionOutputWithContext(ctx).OutputState,
	}
}

// AccountFilterTrackSelectionArrayInput is an input type that accepts AccountFilterTrackSelectionArray and AccountFilterTrackSelectionArrayOutput values.
// You can construct a concrete instance of `AccountFilterTrackSelectionArrayInput` via:
//
//	AccountFilterTrackSelectionArray{ AccountFilterTrackSelectionArgs{...} }
type AccountFilterTrackSelectionArrayInput interface {
	pulumi.Input

	ToAccountFilterTrackSelectionArrayOutput() AccountFilterTrackSelectionArrayOutput
	ToAccountFilterTrackSelectionArrayOutputWithContext(context.Context) AccountFilterTrackSelectionArrayOutput
}

type AccountFilterTrackSelectionArray []AccountFilterTrackSelectionInput

func (AccountFilterTrackSelectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccountFilterTrackSelection)(nil)).Elem()
}

func (i AccountFilterTrackSelectionArray) ToAccountFilterTrackSelectionArrayOutput() AccountFilterTrackSelectionArrayOutput {
	return i.ToAccountFilterTrackSelectionArrayOutputWithContext(context.Background())
}

func (i AccountFilterTrackSelectionArray) ToAccountFilterTrackSelectionArrayOutputWithContext(ctx context.Context) AccountFilterTrackSelectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountFilterTrackSelectionArrayOutput)
}

func (i AccountFilterTrackSelectionArray) ToOutput(ctx context.Context) pulumix.Output[[]AccountFilterTrackSelection] {
	return pulumix.Output[[]AccountFilterTrackSelection]{
		OutputState: i.ToAccountFilterTrackSelectionArrayOutputWithContext(ctx).OutputState,
	}
}

type AccountFilterTrackSelectionOutput struct{ *pulumi.OutputState }

func (AccountFilterTrackSelectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountFilterTrackSelection)(nil)).Elem()
}

func (o AccountFilterTrackSelectionOutput) ToAccountFilterTrackSelectionOutput() AccountFilterTrackSelectionOutput {
	return o
}

func (o AccountFilterTrackSelectionOutput) ToAccountFilterTrackSelectionOutputWithContext(ctx context.Context) AccountFilterTrackSelectionOutput {
	return o
}

func (o AccountFilterTrackSelectionOutput) ToOutput(ctx context.Context) pulumix.Output[AccountFilterTrackSelection] {
	return pulumix.Output[AccountFilterTrackSelection]{
		OutputState: o.OutputState,
	}
}

// One or more `selection` blocks as defined above.
func (o AccountFilterTrackSelectionOutput) Conditions() AccountFilterTrackSelectionConditionArrayOutput {
	return o.ApplyT(func(v AccountFilterTrackSelection) []AccountFilterTrackSelectionCondition { return v.Conditions }).(AccountFilterTrackSelectionConditionArrayOutput)
}

type AccountFilterTrackSelectionArrayOutput struct{ *pulumi.OutputState }

func (AccountFilterTrackSelectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccountFilterTrackSelection)(nil)).Elem()
}

func (o AccountFilterTrackSelectionArrayOutput) ToAccountFilterTrackSelectionArrayOutput() AccountFilterTrackSelectionArrayOutput {
	return o
}

func (o AccountFilterTrackSelectionArrayOutput) ToAccountFilterTrackSelectionArrayOutputWithContext(ctx context.Context) AccountFilterTrackSelectionArrayOutput {
	return o
}

func (o AccountFilterTrackSelectionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AccountFilterTrackSelection] {
	return pulumix.Output[[]AccountFilterTrackSelection]{
		OutputState: o.OutputState,
	}
}

func (o AccountFilterTrackSelectionArrayOutput) Index(i pulumi.IntInput) AccountFilterTrackSelectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccountFilterTrackSelection {
		return vs[0].([]AccountFilterTrackSelection)[vs[1].(int)]
	}).(AccountFilterTrackSelectionOutput)
}

type AccountFilterTrackSelectionCondition struct {
	// The condition operation to test a track property against. Supported values are `Equal` and `NotEqual`.
	Operation string `pulumi:"operation"`
	// The track property to compare. Supported values are `Bitrate`, `FourCC`, `Language`, `Name` and `Type`. Check [documentation](https://docs.microsoft.com/azure/media-services/latest/filters-concept) for more details.
	Property string `pulumi:"property"`
	// The track property value to match or not match.
	Value string `pulumi:"value"`
}

// AccountFilterTrackSelectionConditionInput is an input type that accepts AccountFilterTrackSelectionConditionArgs and AccountFilterTrackSelectionConditionOutput values.
// You can construct a concrete instance of `AccountFilterTrackSelectionConditionInput` via:
//
//	AccountFilterTrackSelectionConditionArgs{...}
type AccountFilterTrackSelectionConditionInput interface {
	pulumi.Input

	ToAccountFilterTrackSelectionConditionOutput() AccountFilterTrackSelectionConditionOutput
	ToAccountFilterTrackSelectionConditionOutputWithContext(context.Context) AccountFilterTrackSelectionConditionOutput
}

type AccountFilterTrackSelectionConditionArgs struct {
	// The condition operation to test a track property against. Supported values are `Equal` and `NotEqual`.
	Operation pulumi.StringInput `pulumi:"operation"`
	// The track property to compare. Supported values are `Bitrate`, `FourCC`, `Language`, `Name` and `Type`. Check [documentation](https://docs.microsoft.com/azure/media-services/latest/filters-concept) for more details.
	Property pulumi.StringInput `pulumi:"property"`
	// The track property value to match or not match.
	Value pulumi.StringInput `pulumi:"value"`
}

func (AccountFilterTrackSelectionConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountFilterTrackSelectionCondition)(nil)).Elem()
}

func (i AccountFilterTrackSelectionConditionArgs) ToAccountFilterTrackSelectionConditionOutput() AccountFilterTrackSelectionConditionOutput {
	return i.ToAccountFilterTrackSelectionConditionOutputWithContext(context.Background())
}

func (i AccountFilterTrackSelectionConditionArgs) ToAccountFilterTrackSelectionConditionOutputWithContext(ctx context.Context) AccountFilterTrackSelectionConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountFilterTrackSelectionConditionOutput)
}

func (i AccountFilterTrackSelectionConditionArgs) ToOutput(ctx context.Context) pulumix.Output[AccountFilterTrackSelectionCondition] {
	return pulumix.Output[AccountFilterTrackSelectionCondition]{
		OutputState: i.ToAccountFilterTrackSelectionConditionOutputWithContext(ctx).OutputState,
	}
}

// AccountFilterTrackSelectionConditionArrayInput is an input type that accepts AccountFilterTrackSelectionConditionArray and AccountFilterTrackSelectionConditionArrayOutput values.
// You can construct a concrete instance of `AccountFilterTrackSelectionConditionArrayInput` via:
//
//	AccountFilterTrackSelectionConditionArray{ AccountFilterTrackSelectionConditionArgs{...} }
type AccountFilterTrackSelectionConditionArrayInput interface {
	pulumi.Input

	ToAccountFilterTrackSelectionConditionArrayOutput() AccountFilterTrackSelectionConditionArrayOutput
	ToAccountFilterTrackSelectionConditionArrayOutputWithContext(context.Context) AccountFilterTrackSelectionConditionArrayOutput
}

type AccountFilterTrackSelectionConditionArray []AccountFilterTrackSelectionConditionInput

func (AccountFilterTrackSelectionConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccountFilterTrackSelectionCondition)(nil)).Elem()
}

func (i AccountFilterTrackSelectionConditionArray) ToAccountFilterTrackSelectionConditionArrayOutput() AccountFilterTrackSelectionConditionArrayOutput {
	return i.ToAccountFilterTrackSelectionConditionArrayOutputWithContext(context.Background())
}

func (i AccountFilterTrackSelectionConditionArray) ToAccountFilterTrackSelectionConditionArrayOutputWithContext(ctx context.Context) AccountFilterTrackSelectionConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountFilterTrackSelectionConditionArrayOutput)
}

func (i AccountFilterTrackSelectionConditionArray) ToOutput(ctx context.Context) pulumix.Output[[]AccountFilterTrackSelectionCondition] {
	return pulumix.Output[[]AccountFilterTrackSelectionCondition]{
		OutputState: i.ToAccountFilterTrackSelectionConditionArrayOutputWithContext(ctx).OutputState,
	}
}

type AccountFilterTrackSelectionConditionOutput struct{ *pulumi.OutputState }

func (AccountFilterTrackSelectionConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountFilterTrackSelectionCondition)(nil)).Elem()
}

func (o AccountFilterTrackSelectionConditionOutput) ToAccountFilterTrackSelectionConditionOutput() AccountFilterTrackSelectionConditionOutput {
	return o
}

func (o AccountFilterTrackSelectionConditionOutput) ToAccountFilterTrackSelectionConditionOutputWithContext(ctx context.Context) AccountFilterTrackSelectionConditionOutput {
	return o
}

func (o AccountFilterTrackSelectionConditionOutput) ToOutput(ctx context.Context) pulumix.Output[AccountFilterTrackSelectionCondition] {
	return pulumix.Output[AccountFilterTrackSelectionCondition]{
		OutputState: o.OutputState,
	}
}

// The condition operation to test a track property against. Supported values are `Equal` and `NotEqual`.
func (o AccountFilterTrackSelectionConditionOutput) Operation() pulumi.StringOutput {
	return o.ApplyT(func(v AccountFilterTrackSelectionCondition) string { return v.Operation }).(pulumi.StringOutput)
}

// The track property to compare. Supported values are `Bitrate`, `FourCC`, `Language`, `Name` and `Type`. Check [documentation](https://docs.microsoft.com/azure/media-services/latest/filters-concept) for more details.
func (o AccountFilterTrackSelectionConditionOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v AccountFilterTrackSelectionCondition) string { return v.Property }).(pulumi.StringOutput)
}

// The track property value to match or not match.
func (o AccountFilterTrackSelectionConditionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AccountFilterTrackSelectionCondition) string { return v.Value }).(pulumi.StringOutput)
}

type AccountFilterTrackSelectionConditionArrayOutput struct{ *pulumi.OutputState }

func (AccountFilterTrackSelectionConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccountFilterTrackSelectionCondition)(nil)).Elem()
}

func (o AccountFilterTrackSelectionConditionArrayOutput) ToAccountFilterTrackSelectionConditionArrayOutput() AccountFilterTrackSelectionConditionArrayOutput {
	return o
}

func (o AccountFilterTrackSelectionConditionArrayOutput) ToAccountFilterTrackSelectionConditionArrayOutputWithContext(ctx context.Context) AccountFilterTrackSelectionConditionArrayOutput {
	return o
}

func (o AccountFilterTrackSelectionConditionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AccountFilterTrackSelectionCondition] {
	return pulumix.Output[[]AccountFilterTrackSelectionCondition]{
		OutputState: o.OutputState,
	}
}

func (o AccountFilterTrackSelectionConditionArrayOutput) Index(i pulumi.IntInput) AccountFilterTrackSelectionConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccountFilterTrackSelectionCondition {
		return vs[0].([]AccountFilterTrackSelectionCondition)[vs[1].(int)]
	}).(AccountFilterTrackSelectionConditionOutput)
}

type AssetFilterPresentationTimeRange struct {
	// The absolute end time boundary. Applies to Video on Demand (VoD).
	// For the Live Streaming presentation, it is silently ignored and applied when the presentation ends and the stream becomes VoD. This is a long value that represents an absolute end point of the presentation, rounded to the closest next GOP start. The unit is defined by `unitTimescaleInMiliseconds`, so an `endInUnits` of 180 would be for 3 minutes. Use `startInUnits` and `endInUnits` to trim the fragments that will be in the playlist (manifest). For example, `startInUnits` set to 20 and `endInUnits` set to 60 using `unitTimescaleInMiliseconds` in 1000 will generate a playlist that contains fragments from between 20 seconds and 60 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.
	EndInUnits *int `pulumi:"endInUnits"`
	// Indicates whether the `endInUnits` property must be present. If true, `endInUnits` must be specified or a bad request code is returned. Applies to Live Streaming only. Allowed values: false, true.
	ForceEnd *bool `pulumi:"forceEnd"`
	// The relative to end right edge. Applies to Live Streaming only.
	// This value defines the latest live position that a client can seek to. Using this property, you can delay live playback position and create a server-side buffer for players. The unit is defined by `unitTimescaleInMiliseconds`. The maximum live back off duration is 300 seconds. For example, a value of 20 means that the latest available content is 20 seconds delayed from the real live edge.
	LiveBackoffInUnits *int `pulumi:"liveBackoffInUnits"`
	// The relative to end sliding window. Applies to Live Streaming only. Use `presentationWindowInUnits` to apply a sliding window of fragments to include in a playlist. The unit is defined by `unitTimescaleInMiliseconds`. For example, set `presentationWindowInUnits` to 120 to apply a two-minute sliding window. Media within 2 minutes of the live edge will be included in the playlist. If a fragment straddles the boundary, the entire fragment will be included in the playlist. The minimum presentation window duration is 60 seconds.
	PresentationWindowInUnits *int `pulumi:"presentationWindowInUnits"`
	// The absolute start time boundary. Applies to Video on Demand (VoD) or Live Streaming. This is a long value that represents an absolute start point of the stream. The value gets rounded to the closest next GOP start. The unit is defined by `unitTimescaleInMiliseconds`, so a `startInUnits` of 15 would be for 15 seconds. Use `startInUnits` and `endInUnits` to trim the fragments that will be in the playlist (manifest). For example, `startInUnits` set to 20 and `endInUnits` set to 60 using `unitTimescaleInMiliseconds` in 1000 will generate a playlist that contains fragments from between 20 seconds and 60 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.
	StartInUnits *int `pulumi:"startInUnits"`
	// Specified as the number of miliseconds in one unit timescale. For example, if you want to set a `startInUnits` at 30 seconds, you would use a value of 30 when using the `unitTimescaleInMiliseconds` in 1000. Or if you want to set `startInUnits` in 30 miliseconds, you would use a value of 30 when using the `unitTimescaleInMiliseconds` in 1. Applies timescale to `startInUnits`, `startTimescale` and `presentationWindowInTimescale` and `liveBackoffInTimescale`.
	UnitTimescaleInMiliseconds *int `pulumi:"unitTimescaleInMiliseconds"`
}

// AssetFilterPresentationTimeRangeInput is an input type that accepts AssetFilterPresentationTimeRangeArgs and AssetFilterPresentationTimeRangeOutput values.
// You can construct a concrete instance of `AssetFilterPresentationTimeRangeInput` via:
//
//	AssetFilterPresentationTimeRangeArgs{...}
type AssetFilterPresentationTimeRangeInput interface {
	pulumi.Input

	ToAssetFilterPresentationTimeRangeOutput() AssetFilterPresentationTimeRangeOutput
	ToAssetFilterPresentationTimeRangeOutputWithContext(context.Context) AssetFilterPresentationTimeRangeOutput
}

type AssetFilterPresentationTimeRangeArgs struct {
	// The absolute end time boundary. Applies to Video on Demand (VoD).
	// For the Live Streaming presentation, it is silently ignored and applied when the presentation ends and the stream becomes VoD. This is a long value that represents an absolute end point of the presentation, rounded to the closest next GOP start. The unit is defined by `unitTimescaleInMiliseconds`, so an `endInUnits` of 180 would be for 3 minutes. Use `startInUnits` and `endInUnits` to trim the fragments that will be in the playlist (manifest). For example, `startInUnits` set to 20 and `endInUnits` set to 60 using `unitTimescaleInMiliseconds` in 1000 will generate a playlist that contains fragments from between 20 seconds and 60 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.
	EndInUnits pulumi.IntPtrInput `pulumi:"endInUnits"`
	// Indicates whether the `endInUnits` property must be present. If true, `endInUnits` must be specified or a bad request code is returned. Applies to Live Streaming only. Allowed values: false, true.
	ForceEnd pulumi.BoolPtrInput `pulumi:"forceEnd"`
	// The relative to end right edge. Applies to Live Streaming only.
	// This value defines the latest live position that a client can seek to. Using this property, you can delay live playback position and create a server-side buffer for players. The unit is defined by `unitTimescaleInMiliseconds`. The maximum live back off duration is 300 seconds. For example, a value of 20 means that the latest available content is 20 seconds delayed from the real live edge.
	LiveBackoffInUnits pulumi.IntPtrInput `pulumi:"liveBackoffInUnits"`
	// The relative to end sliding window. Applies to Live Streaming only. Use `presentationWindowInUnits` to apply a sliding window of fragments to include in a playlist. The unit is defined by `unitTimescaleInMiliseconds`. For example, set `presentationWindowInUnits` to 120 to apply a two-minute sliding window. Media within 2 minutes of the live edge will be included in the playlist. If a fragment straddles the boundary, the entire fragment will be included in the playlist. The minimum presentation window duration is 60 seconds.
	PresentationWindowInUnits pulumi.IntPtrInput `pulumi:"presentationWindowInUnits"`
	// The absolute start time boundary. Applies to Video on Demand (VoD) or Live Streaming. This is a long value that represents an absolute start point of the stream. The value gets rounded to the closest next GOP start. The unit is defined by `unitTimescaleInMiliseconds`, so a `startInUnits` of 15 would be for 15 seconds. Use `startInUnits` and `endInUnits` to trim the fragments that will be in the playlist (manifest). For example, `startInUnits` set to 20 and `endInUnits` set to 60 using `unitTimescaleInMiliseconds` in 1000 will generate a playlist that contains fragments from between 20 seconds and 60 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.
	StartInUnits pulumi.IntPtrInput `pulumi:"startInUnits"`
	// Specified as the number of miliseconds in one unit timescale. For example, if you want to set a `startInUnits` at 30 seconds, you would use a value of 30 when using the `unitTimescaleInMiliseconds` in 1000. Or if you want to set `startInUnits` in 30 miliseconds, you would use a value of 30 when using the `unitTimescaleInMiliseconds` in 1. Applies timescale to `startInUnits`, `startTimescale` and `presentationWindowInTimescale` and `liveBackoffInTimescale`.
	UnitTimescaleInMiliseconds pulumi.IntPtrInput `pulumi:"unitTimescaleInMiliseconds"`
}

func (AssetFilterPresentationTimeRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetFilterPresentationTimeRange)(nil)).Elem()
}

func (i AssetFilterPresentationTimeRangeArgs) ToAssetFilterPresentationTimeRangeOutput() AssetFilterPresentationTimeRangeOutput {
	return i.ToAssetFilterPresentationTimeRangeOutputWithContext(context.Background())
}

func (i AssetFilterPresentationTimeRangeArgs) ToAssetFilterPresentationTimeRangeOutputWithContext(ctx context.Context) AssetFilterPresentationTimeRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetFilterPresentationTimeRangeOutput)
}

func (i AssetFilterPresentationTimeRangeArgs) ToOutput(ctx context.Context) pulumix.Output[AssetFilterPresentationTimeRange] {
	return pulumix.Output[AssetFilterPresentationTimeRange]{
		OutputState: i.ToAssetFilterPresentationTimeRangeOutputWithContext(ctx).OutputState,
	}
}

func (i AssetFilterPresentationTimeRangeArgs) ToAssetFilterPresentationTimeRangePtrOutput() AssetFilterPresentationTimeRangePtrOutput {
	return i.ToAssetFilterPresentationTimeRangePtrOutputWithContext(context.Background())
}

func (i AssetFilterPresentationTimeRangeArgs) ToAssetFilterPresentationTimeRangePtrOutputWithContext(ctx context.Context) AssetFilterPresentationTimeRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetFilterPresentationTimeRangeOutput).ToAssetFilterPresentationTimeRangePtrOutputWithContext(ctx)
}

// AssetFilterPresentationTimeRangePtrInput is an input type that accepts AssetFilterPresentationTimeRangeArgs, AssetFilterPresentationTimeRangePtr and AssetFilterPresentationTimeRangePtrOutput values.
// You can construct a concrete instance of `AssetFilterPresentationTimeRangePtrInput` via:
//
//	        AssetFilterPresentationTimeRangeArgs{...}
//
//	or:
//
//	        nil
type AssetFilterPresentationTimeRangePtrInput interface {
	pulumi.Input

	ToAssetFilterPresentationTimeRangePtrOutput() AssetFilterPresentationTimeRangePtrOutput
	ToAssetFilterPresentationTimeRangePtrOutputWithContext(context.Context) AssetFilterPresentationTimeRangePtrOutput
}

type assetFilterPresentationTimeRangePtrType AssetFilterPresentationTimeRangeArgs

func AssetFilterPresentationTimeRangePtr(v *AssetFilterPresentationTimeRangeArgs) AssetFilterPresentationTimeRangePtrInput {
	return (*assetFilterPresentationTimeRangePtrType)(v)
}

func (*assetFilterPresentationTimeRangePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AssetFilterPresentationTimeRange)(nil)).Elem()
}

func (i *assetFilterPresentationTimeRangePtrType) ToAssetFilterPresentationTimeRangePtrOutput() AssetFilterPresentationTimeRangePtrOutput {
	return i.ToAssetFilterPresentationTimeRangePtrOutputWithContext(context.Background())
}

func (i *assetFilterPresentationTimeRangePtrType) ToAssetFilterPresentationTimeRangePtrOutputWithContext(ctx context.Context) AssetFilterPresentationTimeRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetFilterPresentationTimeRangePtrOutput)
}

func (i *assetFilterPresentationTimeRangePtrType) ToOutput(ctx context.Context) pulumix.Output[*AssetFilterPresentationTimeRange] {
	return pulumix.Output[*AssetFilterPresentationTimeRange]{
		OutputState: i.ToAssetFilterPresentationTimeRangePtrOutputWithContext(ctx).OutputState,
	}
}

type AssetFilterPresentationTimeRangeOutput struct{ *pulumi.OutputState }

func (AssetFilterPresentationTimeRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetFilterPresentationTimeRange)(nil)).Elem()
}

func (o AssetFilterPresentationTimeRangeOutput) ToAssetFilterPresentationTimeRangeOutput() AssetFilterPresentationTimeRangeOutput {
	return o
}

func (o AssetFilterPresentationTimeRangeOutput) ToAssetFilterPresentationTimeRangeOutputWithContext(ctx context.Context) AssetFilterPresentationTimeRangeOutput {
	return o
}

func (o AssetFilterPresentationTimeRangeOutput) ToAssetFilterPresentationTimeRangePtrOutput() AssetFilterPresentationTimeRangePtrOutput {
	return o.ToAssetFilterPresentationTimeRangePtrOutputWithContext(context.Background())
}

func (o AssetFilterPresentationTimeRangeOutput) ToAssetFilterPresentationTimeRangePtrOutputWithContext(ctx context.Context) AssetFilterPresentationTimeRangePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AssetFilterPresentationTimeRange) *AssetFilterPresentationTimeRange {
		return &v
	}).(AssetFilterPresentationTimeRangePtrOutput)
}

func (o AssetFilterPresentationTimeRangeOutput) ToOutput(ctx context.Context) pulumix.Output[AssetFilterPresentationTimeRange] {
	return pulumix.Output[AssetFilterPresentationTimeRange]{
		OutputState: o.OutputState,
	}
}

// The absolute end time boundary. Applies to Video on Demand (VoD).
// For the Live Streaming presentation, it is silently ignored and applied when the presentation ends and the stream becomes VoD. This is a long value that represents an absolute end point of the presentation, rounded to the closest next GOP start. The unit is defined by `unitTimescaleInMiliseconds`, so an `endInUnits` of 180 would be for 3 minutes. Use `startInUnits` and `endInUnits` to trim the fragments that will be in the playlist (manifest). For example, `startInUnits` set to 20 and `endInUnits` set to 60 using `unitTimescaleInMiliseconds` in 1000 will generate a playlist that contains fragments from between 20 seconds and 60 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.
func (o AssetFilterPresentationTimeRangeOutput) EndInUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AssetFilterPresentationTimeRange) *int { return v.EndInUnits }).(pulumi.IntPtrOutput)
}

// Indicates whether the `endInUnits` property must be present. If true, `endInUnits` must be specified or a bad request code is returned. Applies to Live Streaming only. Allowed values: false, true.
func (o AssetFilterPresentationTimeRangeOutput) ForceEnd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AssetFilterPresentationTimeRange) *bool { return v.ForceEnd }).(pulumi.BoolPtrOutput)
}

// The relative to end right edge. Applies to Live Streaming only.
// This value defines the latest live position that a client can seek to. Using this property, you can delay live playback position and create a server-side buffer for players. The unit is defined by `unitTimescaleInMiliseconds`. The maximum live back off duration is 300 seconds. For example, a value of 20 means that the latest available content is 20 seconds delayed from the real live edge.
func (o AssetFilterPresentationTimeRangeOutput) LiveBackoffInUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AssetFilterPresentationTimeRange) *int { return v.LiveBackoffInUnits }).(pulumi.IntPtrOutput)
}

// The relative to end sliding window. Applies to Live Streaming only. Use `presentationWindowInUnits` to apply a sliding window of fragments to include in a playlist. The unit is defined by `unitTimescaleInMiliseconds`. For example, set `presentationWindowInUnits` to 120 to apply a two-minute sliding window. Media within 2 minutes of the live edge will be included in the playlist. If a fragment straddles the boundary, the entire fragment will be included in the playlist. The minimum presentation window duration is 60 seconds.
func (o AssetFilterPresentationTimeRangeOutput) PresentationWindowInUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AssetFilterPresentationTimeRange) *int { return v.PresentationWindowInUnits }).(pulumi.IntPtrOutput)
}

// The absolute start time boundary. Applies to Video on Demand (VoD) or Live Streaming. This is a long value that represents an absolute start point of the stream. The value gets rounded to the closest next GOP start. The unit is defined by `unitTimescaleInMiliseconds`, so a `startInUnits` of 15 would be for 15 seconds. Use `startInUnits` and `endInUnits` to trim the fragments that will be in the playlist (manifest). For example, `startInUnits` set to 20 and `endInUnits` set to 60 using `unitTimescaleInMiliseconds` in 1000 will generate a playlist that contains fragments from between 20 seconds and 60 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.
func (o AssetFilterPresentationTimeRangeOutput) StartInUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AssetFilterPresentationTimeRange) *int { return v.StartInUnits }).(pulumi.IntPtrOutput)
}

// Specified as the number of miliseconds in one unit timescale. For example, if you want to set a `startInUnits` at 30 seconds, you would use a value of 30 when using the `unitTimescaleInMiliseconds` in 1000. Or if you want to set `startInUnits` in 30 miliseconds, you would use a value of 30 when using the `unitTimescaleInMiliseconds` in 1. Applies timescale to `startInUnits`, `startTimescale` and `presentationWindowInTimescale` and `liveBackoffInTimescale`.
func (o AssetFilterPresentationTimeRangeOutput) UnitTimescaleInMiliseconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AssetFilterPresentationTimeRange) *int { return v.UnitTimescaleInMiliseconds }).(pulumi.IntPtrOutput)
}

type AssetFilterPresentationTimeRangePtrOutput struct{ *pulumi.OutputState }

func (AssetFilterPresentationTimeRangePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssetFilterPresentationTimeRange)(nil)).Elem()
}

func (o AssetFilterPresentationTimeRangePtrOutput) ToAssetFilterPresentationTimeRangePtrOutput() AssetFilterPresentationTimeRangePtrOutput {
	return o
}

func (o AssetFilterPresentationTimeRangePtrOutput) ToAssetFilterPresentationTimeRangePtrOutputWithContext(ctx context.Context) AssetFilterPresentationTimeRangePtrOutput {
	return o
}

func (o AssetFilterPresentationTimeRangePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AssetFilterPresentationTimeRange] {
	return pulumix.Output[*AssetFilterPresentationTimeRange]{
		OutputState: o.OutputState,
	}
}

func (o AssetFilterPresentationTimeRangePtrOutput) Elem() AssetFilterPresentationTimeRangeOutput {
	return o.ApplyT(func(v *AssetFilterPresentationTimeRange) AssetFilterPresentationTimeRange {
		if v != nil {
			return *v
		}
		var ret AssetFilterPresentationTimeRange
		return ret
	}).(AssetFilterPresentationTimeRangeOutput)
}

// The absolute end time boundary. Applies to Video on Demand (VoD).
// For the Live Streaming presentation, it is silently ignored and applied when the presentation ends and the stream becomes VoD. This is a long value that represents an absolute end point of the presentation, rounded to the closest next GOP start. The unit is defined by `unitTimescaleInMiliseconds`, so an `endInUnits` of 180 would be for 3 minutes. Use `startInUnits` and `endInUnits` to trim the fragments that will be in the playlist (manifest). For example, `startInUnits` set to 20 and `endInUnits` set to 60 using `unitTimescaleInMiliseconds` in 1000 will generate a playlist that contains fragments from between 20 seconds and 60 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.
func (o AssetFilterPresentationTimeRangePtrOutput) EndInUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AssetFilterPresentationTimeRange) *int {
		if v == nil {
			return nil
		}
		return v.EndInUnits
	}).(pulumi.IntPtrOutput)
}

// Indicates whether the `endInUnits` property must be present. If true, `endInUnits` must be specified or a bad request code is returned. Applies to Live Streaming only. Allowed values: false, true.
func (o AssetFilterPresentationTimeRangePtrOutput) ForceEnd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AssetFilterPresentationTimeRange) *bool {
		if v == nil {
			return nil
		}
		return v.ForceEnd
	}).(pulumi.BoolPtrOutput)
}

// The relative to end right edge. Applies to Live Streaming only.
// This value defines the latest live position that a client can seek to. Using this property, you can delay live playback position and create a server-side buffer for players. The unit is defined by `unitTimescaleInMiliseconds`. The maximum live back off duration is 300 seconds. For example, a value of 20 means that the latest available content is 20 seconds delayed from the real live edge.
func (o AssetFilterPresentationTimeRangePtrOutput) LiveBackoffInUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AssetFilterPresentationTimeRange) *int {
		if v == nil {
			return nil
		}
		return v.LiveBackoffInUnits
	}).(pulumi.IntPtrOutput)
}

// The relative to end sliding window. Applies to Live Streaming only. Use `presentationWindowInUnits` to apply a sliding window of fragments to include in a playlist. The unit is defined by `unitTimescaleInMiliseconds`. For example, set `presentationWindowInUnits` to 120 to apply a two-minute sliding window. Media within 2 minutes of the live edge will be included in the playlist. If a fragment straddles the boundary, the entire fragment will be included in the playlist. The minimum presentation window duration is 60 seconds.
func (o AssetFilterPresentationTimeRangePtrOutput) PresentationWindowInUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AssetFilterPresentationTimeRange) *int {
		if v == nil {
			return nil
		}
		return v.PresentationWindowInUnits
	}).(pulumi.IntPtrOutput)
}

// The absolute start time boundary. Applies to Video on Demand (VoD) or Live Streaming. This is a long value that represents an absolute start point of the stream. The value gets rounded to the closest next GOP start. The unit is defined by `unitTimescaleInMiliseconds`, so a `startInUnits` of 15 would be for 15 seconds. Use `startInUnits` and `endInUnits` to trim the fragments that will be in the playlist (manifest). For example, `startInUnits` set to 20 and `endInUnits` set to 60 using `unitTimescaleInMiliseconds` in 1000 will generate a playlist that contains fragments from between 20 seconds and 60 seconds of the VoD presentation. If a fragment straddles the boundary, the entire fragment will be included in the manifest.
func (o AssetFilterPresentationTimeRangePtrOutput) StartInUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AssetFilterPresentationTimeRange) *int {
		if v == nil {
			return nil
		}
		return v.StartInUnits
	}).(pulumi.IntPtrOutput)
}

// Specified as the number of miliseconds in one unit timescale. For example, if you want to set a `startInUnits` at 30 seconds, you would use a value of 30 when using the `unitTimescaleInMiliseconds` in 1000. Or if you want to set `startInUnits` in 30 miliseconds, you would use a value of 30 when using the `unitTimescaleInMiliseconds` in 1. Applies timescale to `startInUnits`, `startTimescale` and `presentationWindowInTimescale` and `liveBackoffInTimescale`.
func (o AssetFilterPresentationTimeRangePtrOutput) UnitTimescaleInMiliseconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AssetFilterPresentationTimeRange) *int {
		if v == nil {
			return nil
		}
		return v.UnitTimescaleInMiliseconds
	}).(pulumi.IntPtrOutput)
}

type AssetFilterTrackSelection struct {
	// One or more `condition` blocks as defined above.
	Conditions []AssetFilterTrackSelectionCondition `pulumi:"conditions"`
}

// AssetFilterTrackSelectionInput is an input type that accepts AssetFilterTrackSelectionArgs and AssetFilterTrackSelectionOutput values.
// You can construct a concrete instance of `AssetFilterTrackSelectionInput` via:
//
//	AssetFilterTrackSelectionArgs{...}
type AssetFilterTrackSelectionInput interface {
	pulumi.Input

	ToAssetFilterTrackSelectionOutput() AssetFilterTrackSelectionOutput
	ToAssetFilterTrackSelectionOutputWithContext(context.Context) AssetFilterTrackSelectionOutput
}

type AssetFilterTrackSelectionArgs struct {
	// One or more `condition` blocks as defined above.
	Conditions AssetFilterTrackSelectionConditionArrayInput `pulumi:"conditions"`
}

func (AssetFilterTrackSelectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetFilterTrackSelection)(nil)).Elem()
}

func (i AssetFilterTrackSelectionArgs) ToAssetFilterTrackSelectionOutput() AssetFilterTrackSelectionOutput {
	return i.ToAssetFilterTrackSelectionOutputWithContext(context.Background())
}

func (i AssetFilterTrackSelectionArgs) ToAssetFilterTrackSelectionOutputWithContext(ctx context.Context) AssetFilterTrackSelectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetFilterTrackSelectionOutput)
}

func (i AssetFilterTrackSelectionArgs) ToOutput(ctx context.Context) pulumix.Output[AssetFilterTrackSelection] {
	return pulumix.Output[AssetFilterTrackSelection]{
		OutputState: i.ToAssetFilterTrackSelectionOutputWithContext(ctx).OutputState,
	}
}

// AssetFilterTrackSelectionArrayInput is an input type that accepts AssetFilterTrackSelectionArray and AssetFilterTrackSelectionArrayOutput values.
// You can construct a concrete instance of `AssetFilterTrackSelectionArrayInput` via:
//
//	AssetFilterTrackSelectionArray{ AssetFilterTrackSelectionArgs{...} }
type AssetFilterTrackSelectionArrayInput interface {
	pulumi.Input

	ToAssetFilterTrackSelectionArrayOutput() AssetFilterTrackSelectionArrayOutput
	ToAssetFilterTrackSelectionArrayOutputWithContext(context.Context) AssetFilterTrackSelectionArrayOutput
}

type AssetFilterTrackSelectionArray []AssetFilterTrackSelectionInput

func (AssetFilterTrackSelectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssetFilterTrackSelection)(nil)).Elem()
}

func (i AssetFilterTrackSelectionArray) ToAssetFilterTrackSelectionArrayOutput() AssetFilterTrackSelectionArrayOutput {
	return i.ToAssetFilterTrackSelectionArrayOutputWithContext(context.Background())
}

func (i AssetFilterTrackSelectionArray) ToAssetFilterTrackSelectionArrayOutputWithContext(ctx context.Context) AssetFilterTrackSelectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetFilterTrackSelectionArrayOutput)
}

func (i AssetFilterTrackSelectionArray) ToOutput(ctx context.Context) pulumix.Output[[]AssetFilterTrackSelection] {
	return pulumix.Output[[]AssetFilterTrackSelection]{
		OutputState: i.ToAssetFilterTrackSelectionArrayOutputWithContext(ctx).OutputState,
	}
}

type AssetFilterTrackSelectionOutput struct{ *pulumi.OutputState }

func (AssetFilterTrackSelectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetFilterTrackSelection)(nil)).Elem()
}

func (o AssetFilterTrackSelectionOutput) ToAssetFilterTrackSelectionOutput() AssetFilterTrackSelectionOutput {
	return o
}

func (o AssetFilterTrackSelectionOutput) ToAssetFilterTrackSelectionOutputWithContext(ctx context.Context) AssetFilterTrackSelectionOutput {
	return o
}

func (o AssetFilterTrackSelectionOutput) ToOutput(ctx context.Context) pulumix.Output[AssetFilterTrackSelection] {
	return pulumix.Output[AssetFilterTrackSelection]{
		OutputState: o.OutputState,
	}
}

// One or more `condition` blocks as defined above.
func (o AssetFilterTrackSelectionOutput) Conditions() AssetFilterTrackSelectionConditionArrayOutput {
	return o.ApplyT(func(v AssetFilterTrackSelection) []AssetFilterTrackSelectionCondition { return v.Conditions }).(AssetFilterTrackSelectionConditionArrayOutput)
}

type AssetFilterTrackSelectionArrayOutput struct{ *pulumi.OutputState }

func (AssetFilterTrackSelectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssetFilterTrackSelection)(nil)).Elem()
}

func (o AssetFilterTrackSelectionArrayOutput) ToAssetFilterTrackSelectionArrayOutput() AssetFilterTrackSelectionArrayOutput {
	return o
}

func (o AssetFilterTrackSelectionArrayOutput) ToAssetFilterTrackSelectionArrayOutputWithContext(ctx context.Context) AssetFilterTrackSelectionArrayOutput {
	return o
}

func (o AssetFilterTrackSelectionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AssetFilterTrackSelection] {
	return pulumix.Output[[]AssetFilterTrackSelection]{
		OutputState: o.OutputState,
	}
}

func (o AssetFilterTrackSelectionArrayOutput) Index(i pulumi.IntInput) AssetFilterTrackSelectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssetFilterTrackSelection {
		return vs[0].([]AssetFilterTrackSelection)[vs[1].(int)]
	}).(AssetFilterTrackSelectionOutput)
}

type AssetFilterTrackSelectionCondition struct {
	// The condition operation to test a track property against. Supported values are `Equal` and `NotEqual`.
	Operation *string `pulumi:"operation"`
	// The track property to compare. Supported values are `Bitrate`, `FourCC`, `Language`, `Name` and `Type`. Check [documentation](https://docs.microsoft.com/azure/media-services/latest/filters-concept) for more details.
	Property *string `pulumi:"property"`
	// The track property value to match or not match.
	Value *string `pulumi:"value"`
}

// AssetFilterTrackSelectionConditionInput is an input type that accepts AssetFilterTrackSelectionConditionArgs and AssetFilterTrackSelectionConditionOutput values.
// You can construct a concrete instance of `AssetFilterTrackSelectionConditionInput` via:
//
//	AssetFilterTrackSelectionConditionArgs{...}
type AssetFilterTrackSelectionConditionInput interface {
	pulumi.Input

	ToAssetFilterTrackSelectionConditionOutput() AssetFilterTrackSelectionConditionOutput
	ToAssetFilterTrackSelectionConditionOutputWithContext(context.Context) AssetFilterTrackSelectionConditionOutput
}

type AssetFilterTrackSelectionConditionArgs struct {
	// The condition operation to test a track property against. Supported values are `Equal` and `NotEqual`.
	Operation pulumi.StringPtrInput `pulumi:"operation"`
	// The track property to compare. Supported values are `Bitrate`, `FourCC`, `Language`, `Name` and `Type`. Check [documentation](https://docs.microsoft.com/azure/media-services/latest/filters-concept) for more details.
	Property pulumi.StringPtrInput `pulumi:"property"`
	// The track property value to match or not match.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (AssetFilterTrackSelectionConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetFilterTrackSelectionCondition)(nil)).Elem()
}

func (i AssetFilterTrackSelectionConditionArgs) ToAssetFilterTrackSelectionConditionOutput() AssetFilterTrackSelectionConditionOutput {
	return i.ToAssetFilterTrackSelectionConditionOutputWithContext(context.Background())
}

func (i AssetFilterTrackSelectionConditionArgs) ToAssetFilterTrackSelectionConditionOutputWithContext(ctx context.Context) AssetFilterTrackSelectionConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetFilterTrackSelectionConditionOutput)
}

func (i AssetFilterTrackSelectionConditionArgs) ToOutput(ctx context.Context) pulumix.Output[AssetFilterTrackSelectionCondition] {
	return pulumix.Output[AssetFilterTrackSelectionCondition]{
		OutputState: i.ToAssetFilterTrackSelectionConditionOutputWithContext(ctx).OutputState,
	}
}

// AssetFilterTrackSelectionConditionArrayInput is an input type that accepts AssetFilterTrackSelectionConditionArray and AssetFilterTrackSelectionConditionArrayOutput values.
// You can construct a concrete instance of `AssetFilterTrackSelectionConditionArrayInput` via:
//
//	AssetFilterTrackSelectionConditionArray{ AssetFilterTrackSelectionConditionArgs{...} }
type AssetFilterTrackSelectionConditionArrayInput interface {
	pulumi.Input

	ToAssetFilterTrackSelectionConditionArrayOutput() AssetFilterTrackSelectionConditionArrayOutput
	ToAssetFilterTrackSelectionConditionArrayOutputWithContext(context.Context) AssetFilterTrackSelectionConditionArrayOutput
}

type AssetFilterTrackSelectionConditionArray []AssetFilterTrackSelectionConditionInput

func (AssetFilterTrackSelectionConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssetFilterTrackSelectionCondition)(nil)).Elem()
}

func (i AssetFilterTrackSelectionConditionArray) ToAssetFilterTrackSelectionConditionArrayOutput() AssetFilterTrackSelectionConditionArrayOutput {
	return i.ToAssetFilterTrackSelectionConditionArrayOutputWithContext(context.Background())
}

func (i AssetFilterTrackSelectionConditionArray) ToAssetFilterTrackSelectionConditionArrayOutputWithContext(ctx context.Context) AssetFilterTrackSelectionConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetFilterTrackSelectionConditionArrayOutput)
}

func (i AssetFilterTrackSelectionConditionArray) ToOutput(ctx context.Context) pulumix.Output[[]AssetFilterTrackSelectionCondition] {
	return pulumix.Output[[]AssetFilterTrackSelectionCondition]{
		OutputState: i.ToAssetFilterTrackSelectionConditionArrayOutputWithContext(ctx).OutputState,
	}
}

type AssetFilterTrackSelectionConditionOutput struct{ *pulumi.OutputState }

func (AssetFilterTrackSelectionConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetFilterTrackSelectionCondition)(nil)).Elem()
}

func (o AssetFilterTrackSelectionConditionOutput) ToAssetFilterTrackSelectionConditionOutput() AssetFilterTrackSelectionConditionOutput {
	return o
}

func (o AssetFilterTrackSelectionConditionOutput) ToAssetFilterTrackSelectionConditionOutputWithContext(ctx context.Context) AssetFilterTrackSelectionConditionOutput {
	return o
}

func (o AssetFilterTrackSelectionConditionOutput) ToOutput(ctx context.Context) pulumix.Output[AssetFilterTrackSelectionCondition] {
	return pulumix.Output[AssetFilterTrackSelectionCondition]{
		OutputState: o.OutputState,
	}
}

// The condition operation to test a track property against. Supported values are `Equal` and `NotEqual`.
func (o AssetFilterTrackSelectionConditionOutput) Operation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssetFilterTrackSelectionCondition) *string { return v.Operation }).(pulumi.StringPtrOutput)
}

// The track property to compare. Supported values are `Bitrate`, `FourCC`, `Language`, `Name` and `Type`. Check [documentation](https://docs.microsoft.com/azure/media-services/latest/filters-concept) for more details.
func (o AssetFilterTrackSelectionConditionOutput) Property() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssetFilterTrackSelectionCondition) *string { return v.Property }).(pulumi.StringPtrOutput)
}

// The track property value to match or not match.
func (o AssetFilterTrackSelectionConditionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssetFilterTrackSelectionCondition) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type AssetFilterTrackSelectionConditionArrayOutput struct{ *pulumi.OutputState }

func (AssetFilterTrackSelectionConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssetFilterTrackSelectionCondition)(nil)).Elem()
}

func (o AssetFilterTrackSelectionConditionArrayOutput) ToAssetFilterTrackSelectionConditionArrayOutput() AssetFilterTrackSelectionConditionArrayOutput {
	return o
}

func (o AssetFilterTrackSelectionConditionArrayOutput) ToAssetFilterTrackSelectionConditionArrayOutputWithContext(ctx context.Context) AssetFilterTrackSelectionConditionArrayOutput {
	return o
}

func (o AssetFilterTrackSelectionConditionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AssetFilterTrackSelectionCondition] {
	return pulumix.Output[[]AssetFilterTrackSelectionCondition]{
		OutputState: o.OutputState,
	}
}

func (o AssetFilterTrackSelectionConditionArrayOutput) Index(i pulumi.IntInput) AssetFilterTrackSelectionConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssetFilterTrackSelectionCondition {
		return vs[0].([]AssetFilterTrackSelectionCondition)[vs[1].(int)]
	}).(AssetFilterTrackSelectionConditionOutput)
}

type ContentKeyPolicyPolicyOption struct {
	// Enable a configuration for non-DRM keys.
	ClearKeyConfigurationEnabled *bool `pulumi:"clearKeyConfigurationEnabled"`
	// A `fairplayConfiguration` block as defined above. Check license requirements here <https://docs.microsoft.com/azure/media-services/latest/fairplay-license-overview>.
	FairplayConfiguration *ContentKeyPolicyPolicyOptionFairplayConfiguration `pulumi:"fairplayConfiguration"`
	// The name which should be used for this Policy Option.
	Name string `pulumi:"name"`
	// Enable an open restriction. License or key will be delivered on every request.
	OpenRestrictionEnabled *bool `pulumi:"openRestrictionEnabled"`
	// One or more `playreadyConfigurationLicense` blocks as defined above.
	PlayreadyConfigurationLicenses []ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense `pulumi:"playreadyConfigurationLicenses"`
	// The custom response data of the PlayReady configuration. This only applies when `playreadyConfigurationLicense` is specified.
	PlayreadyResponseCustomData *string `pulumi:"playreadyResponseCustomData"`
	// A `tokenRestriction` block as defined below.
	TokenRestriction *ContentKeyPolicyPolicyOptionTokenRestriction `pulumi:"tokenRestriction"`
	// The Widevine template.
	//
	// > **NOTE:** Each policyOption can only have one type of configuration: `fairplayConfiguration`, `clearKeyConfigurationEnabled`, `playreadyConfigurationLicense` or `widevineConfigurationTemplate`. And is possible to assign only one type of restriction: `openRestrictionEnabled` or `tokenRestriction`.
	WidevineConfigurationTemplate *string `pulumi:"widevineConfigurationTemplate"`
}

// ContentKeyPolicyPolicyOptionInput is an input type that accepts ContentKeyPolicyPolicyOptionArgs and ContentKeyPolicyPolicyOptionOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPolicyOptionInput` via:
//
//	ContentKeyPolicyPolicyOptionArgs{...}
type ContentKeyPolicyPolicyOptionInput interface {
	pulumi.Input

	ToContentKeyPolicyPolicyOptionOutput() ContentKeyPolicyPolicyOptionOutput
	ToContentKeyPolicyPolicyOptionOutputWithContext(context.Context) ContentKeyPolicyPolicyOptionOutput
}

type ContentKeyPolicyPolicyOptionArgs struct {
	// Enable a configuration for non-DRM keys.
	ClearKeyConfigurationEnabled pulumi.BoolPtrInput `pulumi:"clearKeyConfigurationEnabled"`
	// A `fairplayConfiguration` block as defined above. Check license requirements here <https://docs.microsoft.com/azure/media-services/latest/fairplay-license-overview>.
	FairplayConfiguration ContentKeyPolicyPolicyOptionFairplayConfigurationPtrInput `pulumi:"fairplayConfiguration"`
	// The name which should be used for this Policy Option.
	Name pulumi.StringInput `pulumi:"name"`
	// Enable an open restriction. License or key will be delivered on every request.
	OpenRestrictionEnabled pulumi.BoolPtrInput `pulumi:"openRestrictionEnabled"`
	// One or more `playreadyConfigurationLicense` blocks as defined above.
	PlayreadyConfigurationLicenses ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayInput `pulumi:"playreadyConfigurationLicenses"`
	// The custom response data of the PlayReady configuration. This only applies when `playreadyConfigurationLicense` is specified.
	PlayreadyResponseCustomData pulumi.StringPtrInput `pulumi:"playreadyResponseCustomData"`
	// A `tokenRestriction` block as defined below.
	TokenRestriction ContentKeyPolicyPolicyOptionTokenRestrictionPtrInput `pulumi:"tokenRestriction"`
	// The Widevine template.
	//
	// > **NOTE:** Each policyOption can only have one type of configuration: `fairplayConfiguration`, `clearKeyConfigurationEnabled`, `playreadyConfigurationLicense` or `widevineConfigurationTemplate`. And is possible to assign only one type of restriction: `openRestrictionEnabled` or `tokenRestriction`.
	WidevineConfigurationTemplate pulumi.StringPtrInput `pulumi:"widevineConfigurationTemplate"`
}

func (ContentKeyPolicyPolicyOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPolicyOption)(nil)).Elem()
}

func (i ContentKeyPolicyPolicyOptionArgs) ToContentKeyPolicyPolicyOptionOutput() ContentKeyPolicyPolicyOptionOutput {
	return i.ToContentKeyPolicyPolicyOptionOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPolicyOptionArgs) ToContentKeyPolicyPolicyOptionOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionOutput)
}

func (i ContentKeyPolicyPolicyOptionArgs) ToOutput(ctx context.Context) pulumix.Output[ContentKeyPolicyPolicyOption] {
	return pulumix.Output[ContentKeyPolicyPolicyOption]{
		OutputState: i.ToContentKeyPolicyPolicyOptionOutputWithContext(ctx).OutputState,
	}
}

// ContentKeyPolicyPolicyOptionArrayInput is an input type that accepts ContentKeyPolicyPolicyOptionArray and ContentKeyPolicyPolicyOptionArrayOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPolicyOptionArrayInput` via:
//
//	ContentKeyPolicyPolicyOptionArray{ ContentKeyPolicyPolicyOptionArgs{...} }
type ContentKeyPolicyPolicyOptionArrayInput interface {
	pulumi.Input

	ToContentKeyPolicyPolicyOptionArrayOutput() ContentKeyPolicyPolicyOptionArrayOutput
	ToContentKeyPolicyPolicyOptionArrayOutputWithContext(context.Context) ContentKeyPolicyPolicyOptionArrayOutput
}

type ContentKeyPolicyPolicyOptionArray []ContentKeyPolicyPolicyOptionInput

func (ContentKeyPolicyPolicyOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentKeyPolicyPolicyOption)(nil)).Elem()
}

func (i ContentKeyPolicyPolicyOptionArray) ToContentKeyPolicyPolicyOptionArrayOutput() ContentKeyPolicyPolicyOptionArrayOutput {
	return i.ToContentKeyPolicyPolicyOptionArrayOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPolicyOptionArray) ToContentKeyPolicyPolicyOptionArrayOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionArrayOutput)
}

func (i ContentKeyPolicyPolicyOptionArray) ToOutput(ctx context.Context) pulumix.Output[[]ContentKeyPolicyPolicyOption] {
	return pulumix.Output[[]ContentKeyPolicyPolicyOption]{
		OutputState: i.ToContentKeyPolicyPolicyOptionArrayOutputWithContext(ctx).OutputState,
	}
}

type ContentKeyPolicyPolicyOptionOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPolicyOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPolicyOption)(nil)).Elem()
}

func (o ContentKeyPolicyPolicyOptionOutput) ToContentKeyPolicyPolicyOptionOutput() ContentKeyPolicyPolicyOptionOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionOutput) ToContentKeyPolicyPolicyOptionOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionOutput) ToOutput(ctx context.Context) pulumix.Output[ContentKeyPolicyPolicyOption] {
	return pulumix.Output[ContentKeyPolicyPolicyOption]{
		OutputState: o.OutputState,
	}
}

// Enable a configuration for non-DRM keys.
func (o ContentKeyPolicyPolicyOptionOutput) ClearKeyConfigurationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOption) *bool { return v.ClearKeyConfigurationEnabled }).(pulumi.BoolPtrOutput)
}

// A `fairplayConfiguration` block as defined above. Check license requirements here <https://docs.microsoft.com/azure/media-services/latest/fairplay-license-overview>.
func (o ContentKeyPolicyPolicyOptionOutput) FairplayConfiguration() ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOption) *ContentKeyPolicyPolicyOptionFairplayConfiguration {
		return v.FairplayConfiguration
	}).(ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput)
}

// The name which should be used for this Policy Option.
func (o ContentKeyPolicyPolicyOptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOption) string { return v.Name }).(pulumi.StringOutput)
}

// Enable an open restriction. License or key will be delivered on every request.
func (o ContentKeyPolicyPolicyOptionOutput) OpenRestrictionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOption) *bool { return v.OpenRestrictionEnabled }).(pulumi.BoolPtrOutput)
}

// One or more `playreadyConfigurationLicense` blocks as defined above.
func (o ContentKeyPolicyPolicyOptionOutput) PlayreadyConfigurationLicenses() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOption) []ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense {
		return v.PlayreadyConfigurationLicenses
	}).(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput)
}

// The custom response data of the PlayReady configuration. This only applies when `playreadyConfigurationLicense` is specified.
func (o ContentKeyPolicyPolicyOptionOutput) PlayreadyResponseCustomData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOption) *string { return v.PlayreadyResponseCustomData }).(pulumi.StringPtrOutput)
}

// A `tokenRestriction` block as defined below.
func (o ContentKeyPolicyPolicyOptionOutput) TokenRestriction() ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOption) *ContentKeyPolicyPolicyOptionTokenRestriction {
		return v.TokenRestriction
	}).(ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput)
}

// The Widevine template.
//
// > **NOTE:** Each policyOption can only have one type of configuration: `fairplayConfiguration`, `clearKeyConfigurationEnabled`, `playreadyConfigurationLicense` or `widevineConfigurationTemplate`. And is possible to assign only one type of restriction: `openRestrictionEnabled` or `tokenRestriction`.
func (o ContentKeyPolicyPolicyOptionOutput) WidevineConfigurationTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOption) *string { return v.WidevineConfigurationTemplate }).(pulumi.StringPtrOutput)
}

type ContentKeyPolicyPolicyOptionArrayOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPolicyOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentKeyPolicyPolicyOption)(nil)).Elem()
}

func (o ContentKeyPolicyPolicyOptionArrayOutput) ToContentKeyPolicyPolicyOptionArrayOutput() ContentKeyPolicyPolicyOptionArrayOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionArrayOutput) ToContentKeyPolicyPolicyOptionArrayOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionArrayOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ContentKeyPolicyPolicyOption] {
	return pulumix.Output[[]ContentKeyPolicyPolicyOption]{
		OutputState: o.OutputState,
	}
}

func (o ContentKeyPolicyPolicyOptionArrayOutput) Index(i pulumi.IntInput) ContentKeyPolicyPolicyOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContentKeyPolicyPolicyOption {
		return vs[0].([]ContentKeyPolicyPolicyOption)[vs[1].(int)]
	}).(ContentKeyPolicyPolicyOptionOutput)
}

type ContentKeyPolicyPolicyOptionFairplayConfiguration struct {
	// The key that must be used as FairPlay Application Secret key.
	Ask *string `pulumi:"ask"`
	// A `offlineRentalConfiguration` block as defined below.
	OfflineRentalConfiguration *ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration `pulumi:"offlineRentalConfiguration"`
	// The Base64 representation of FairPlay certificate in PKCS 12 (pfx) format (including private key).
	Pfx *string `pulumi:"pfx"`
	// The password encrypting FairPlay certificate in PKCS 12 (pfx) format.
	PfxPassword *string `pulumi:"pfxPassword"`
	// The rental and lease key type. Supported values are `DualExpiry`, `PersistentLimited`, `PersistentUnlimited` or `Undefined`.
	RentalAndLeaseKeyType *string `pulumi:"rentalAndLeaseKeyType"`
	// The rental duration. Must be greater than 0.
	RentalDurationSeconds *int `pulumi:"rentalDurationSeconds"`
}

// ContentKeyPolicyPolicyOptionFairplayConfigurationInput is an input type that accepts ContentKeyPolicyPolicyOptionFairplayConfigurationArgs and ContentKeyPolicyPolicyOptionFairplayConfigurationOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPolicyOptionFairplayConfigurationInput` via:
//
//	ContentKeyPolicyPolicyOptionFairplayConfigurationArgs{...}
type ContentKeyPolicyPolicyOptionFairplayConfigurationInput interface {
	pulumi.Input

	ToContentKeyPolicyPolicyOptionFairplayConfigurationOutput() ContentKeyPolicyPolicyOptionFairplayConfigurationOutput
	ToContentKeyPolicyPolicyOptionFairplayConfigurationOutputWithContext(context.Context) ContentKeyPolicyPolicyOptionFairplayConfigurationOutput
}

type ContentKeyPolicyPolicyOptionFairplayConfigurationArgs struct {
	// The key that must be used as FairPlay Application Secret key.
	Ask pulumi.StringPtrInput `pulumi:"ask"`
	// A `offlineRentalConfiguration` block as defined below.
	OfflineRentalConfiguration ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrInput `pulumi:"offlineRentalConfiguration"`
	// The Base64 representation of FairPlay certificate in PKCS 12 (pfx) format (including private key).
	Pfx pulumi.StringPtrInput `pulumi:"pfx"`
	// The password encrypting FairPlay certificate in PKCS 12 (pfx) format.
	PfxPassword pulumi.StringPtrInput `pulumi:"pfxPassword"`
	// The rental and lease key type. Supported values are `DualExpiry`, `PersistentLimited`, `PersistentUnlimited` or `Undefined`.
	RentalAndLeaseKeyType pulumi.StringPtrInput `pulumi:"rentalAndLeaseKeyType"`
	// The rental duration. Must be greater than 0.
	RentalDurationSeconds pulumi.IntPtrInput `pulumi:"rentalDurationSeconds"`
}

func (ContentKeyPolicyPolicyOptionFairplayConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPolicyOptionFairplayConfiguration)(nil)).Elem()
}

func (i ContentKeyPolicyPolicyOptionFairplayConfigurationArgs) ToContentKeyPolicyPolicyOptionFairplayConfigurationOutput() ContentKeyPolicyPolicyOptionFairplayConfigurationOutput {
	return i.ToContentKeyPolicyPolicyOptionFairplayConfigurationOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPolicyOptionFairplayConfigurationArgs) ToContentKeyPolicyPolicyOptionFairplayConfigurationOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionFairplayConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionFairplayConfigurationOutput)
}

func (i ContentKeyPolicyPolicyOptionFairplayConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ContentKeyPolicyPolicyOptionFairplayConfiguration] {
	return pulumix.Output[ContentKeyPolicyPolicyOptionFairplayConfiguration]{
		OutputState: i.ToContentKeyPolicyPolicyOptionFairplayConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ContentKeyPolicyPolicyOptionFairplayConfigurationArgs) ToContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput() ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput {
	return i.ToContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPolicyOptionFairplayConfigurationArgs) ToContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionFairplayConfigurationOutput).ToContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutputWithContext(ctx)
}

// ContentKeyPolicyPolicyOptionFairplayConfigurationPtrInput is an input type that accepts ContentKeyPolicyPolicyOptionFairplayConfigurationArgs, ContentKeyPolicyPolicyOptionFairplayConfigurationPtr and ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPolicyOptionFairplayConfigurationPtrInput` via:
//
//	        ContentKeyPolicyPolicyOptionFairplayConfigurationArgs{...}
//
//	or:
//
//	        nil
type ContentKeyPolicyPolicyOptionFairplayConfigurationPtrInput interface {
	pulumi.Input

	ToContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput() ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput
	ToContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutputWithContext(context.Context) ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput
}

type contentKeyPolicyPolicyOptionFairplayConfigurationPtrType ContentKeyPolicyPolicyOptionFairplayConfigurationArgs

func ContentKeyPolicyPolicyOptionFairplayConfigurationPtr(v *ContentKeyPolicyPolicyOptionFairplayConfigurationArgs) ContentKeyPolicyPolicyOptionFairplayConfigurationPtrInput {
	return (*contentKeyPolicyPolicyOptionFairplayConfigurationPtrType)(v)
}

func (*contentKeyPolicyPolicyOptionFairplayConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentKeyPolicyPolicyOptionFairplayConfiguration)(nil)).Elem()
}

func (i *contentKeyPolicyPolicyOptionFairplayConfigurationPtrType) ToContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput() ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput {
	return i.ToContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutputWithContext(context.Background())
}

func (i *contentKeyPolicyPolicyOptionFairplayConfigurationPtrType) ToContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput)
}

func (i *contentKeyPolicyPolicyOptionFairplayConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ContentKeyPolicyPolicyOptionFairplayConfiguration] {
	return pulumix.Output[*ContentKeyPolicyPolicyOptionFairplayConfiguration]{
		OutputState: i.ToContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

type ContentKeyPolicyPolicyOptionFairplayConfigurationOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPolicyOptionFairplayConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPolicyOptionFairplayConfiguration)(nil)).Elem()
}

func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOutput) ToContentKeyPolicyPolicyOptionFairplayConfigurationOutput() ContentKeyPolicyPolicyOptionFairplayConfigurationOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOutput) ToContentKeyPolicyPolicyOptionFairplayConfigurationOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionFairplayConfigurationOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOutput) ToContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput() ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput {
	return o.ToContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutputWithContext(context.Background())
}

func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOutput) ToContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContentKeyPolicyPolicyOptionFairplayConfiguration) *ContentKeyPolicyPolicyOptionFairplayConfiguration {
		return &v
	}).(ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput)
}

func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ContentKeyPolicyPolicyOptionFairplayConfiguration] {
	return pulumix.Output[ContentKeyPolicyPolicyOptionFairplayConfiguration]{
		OutputState: o.OutputState,
	}
}

// The key that must be used as FairPlay Application Secret key.
func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOutput) Ask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionFairplayConfiguration) *string { return v.Ask }).(pulumi.StringPtrOutput)
}

// A `offlineRentalConfiguration` block as defined below.
func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOutput) OfflineRentalConfiguration() ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionFairplayConfiguration) *ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration {
		return v.OfflineRentalConfiguration
	}).(ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput)
}

// The Base64 representation of FairPlay certificate in PKCS 12 (pfx) format (including private key).
func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOutput) Pfx() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionFairplayConfiguration) *string { return v.Pfx }).(pulumi.StringPtrOutput)
}

// The password encrypting FairPlay certificate in PKCS 12 (pfx) format.
func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOutput) PfxPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionFairplayConfiguration) *string { return v.PfxPassword }).(pulumi.StringPtrOutput)
}

// The rental and lease key type. Supported values are `DualExpiry`, `PersistentLimited`, `PersistentUnlimited` or `Undefined`.
func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOutput) RentalAndLeaseKeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionFairplayConfiguration) *string { return v.RentalAndLeaseKeyType }).(pulumi.StringPtrOutput)
}

// The rental duration. Must be greater than 0.
func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOutput) RentalDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionFairplayConfiguration) *int { return v.RentalDurationSeconds }).(pulumi.IntPtrOutput)
}

type ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentKeyPolicyPolicyOptionFairplayConfiguration)(nil)).Elem()
}

func (o ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput) ToContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput() ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput) ToContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContentKeyPolicyPolicyOptionFairplayConfiguration] {
	return pulumix.Output[*ContentKeyPolicyPolicyOptionFairplayConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput) Elem() ContentKeyPolicyPolicyOptionFairplayConfigurationOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionFairplayConfiguration) ContentKeyPolicyPolicyOptionFairplayConfiguration {
		if v != nil {
			return *v
		}
		var ret ContentKeyPolicyPolicyOptionFairplayConfiguration
		return ret
	}).(ContentKeyPolicyPolicyOptionFairplayConfigurationOutput)
}

// The key that must be used as FairPlay Application Secret key.
func (o ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput) Ask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionFairplayConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Ask
	}).(pulumi.StringPtrOutput)
}

// A `offlineRentalConfiguration` block as defined below.
func (o ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput) OfflineRentalConfiguration() ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionFairplayConfiguration) *ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration {
		if v == nil {
			return nil
		}
		return v.OfflineRentalConfiguration
	}).(ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput)
}

// The Base64 representation of FairPlay certificate in PKCS 12 (pfx) format (including private key).
func (o ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput) Pfx() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionFairplayConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Pfx
	}).(pulumi.StringPtrOutput)
}

// The password encrypting FairPlay certificate in PKCS 12 (pfx) format.
func (o ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput) PfxPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionFairplayConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.PfxPassword
	}).(pulumi.StringPtrOutput)
}

// The rental and lease key type. Supported values are `DualExpiry`, `PersistentLimited`, `PersistentUnlimited` or `Undefined`.
func (o ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput) RentalAndLeaseKeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionFairplayConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RentalAndLeaseKeyType
	}).(pulumi.StringPtrOutput)
}

// The rental duration. Must be greater than 0.
func (o ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput) RentalDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionFairplayConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.RentalDurationSeconds
	}).(pulumi.IntPtrOutput)
}

type ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration struct {
	// Playback duration.
	PlaybackDurationSeconds *int `pulumi:"playbackDurationSeconds"`
	// Storage duration.
	StorageDurationSeconds *int `pulumi:"storageDurationSeconds"`
}

// ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationInput is an input type that accepts ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationArgs and ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationInput` via:
//
//	ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationArgs{...}
type ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationInput interface {
	pulumi.Input

	ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput() ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput
	ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutputWithContext(context.Context) ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput
}

type ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationArgs struct {
	// Playback duration.
	PlaybackDurationSeconds pulumi.IntPtrInput `pulumi:"playbackDurationSeconds"`
	// Storage duration.
	StorageDurationSeconds pulumi.IntPtrInput `pulumi:"storageDurationSeconds"`
}

func (ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration)(nil)).Elem()
}

func (i ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationArgs) ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput() ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput {
	return i.ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationArgs) ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput)
}

func (i ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration] {
	return pulumix.Output[ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration]{
		OutputState: i.ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationArgs) ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput() ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput {
	return i.ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationArgs) ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput).ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutputWithContext(ctx)
}

// ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrInput is an input type that accepts ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationArgs, ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtr and ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrInput` via:
//
//	        ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationArgs{...}
//
//	or:
//
//	        nil
type ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrInput interface {
	pulumi.Input

	ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput() ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput
	ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutputWithContext(context.Context) ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput
}

type contentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrType ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationArgs

func ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtr(v *ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationArgs) ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrInput {
	return (*contentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrType)(v)
}

func (*contentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration)(nil)).Elem()
}

func (i *contentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrType) ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput() ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput {
	return i.ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutputWithContext(context.Background())
}

func (i *contentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrType) ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput)
}

func (i *contentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration] {
	return pulumix.Output[*ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration]{
		OutputState: i.ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

type ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration)(nil)).Elem()
}

func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput) ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput() ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput) ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput) ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput() ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput {
	return o.ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutputWithContext(context.Background())
}

func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput) ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration) *ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration {
		return &v
	}).(ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput)
}

func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration] {
	return pulumix.Output[ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration]{
		OutputState: o.OutputState,
	}
}

// Playback duration.
func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput) PlaybackDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration) *int {
		return v.PlaybackDurationSeconds
	}).(pulumi.IntPtrOutput)
}

// Storage duration.
func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput) StorageDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration) *int {
		return v.StorageDurationSeconds
	}).(pulumi.IntPtrOutput)
}

type ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration)(nil)).Elem()
}

func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput) ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput() ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput) ToContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration] {
	return pulumix.Output[*ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput) Elem() ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration) ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration {
		if v != nil {
			return *v
		}
		var ret ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration
		return ret
	}).(ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput)
}

// Playback duration.
func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput) PlaybackDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.PlaybackDurationSeconds
	}).(pulumi.IntPtrOutput)
}

// Storage duration.
func (o ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput) StorageDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.StorageDurationSeconds
	}).(pulumi.IntPtrOutput)
}

type ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense struct {
	// A flag indicating whether test devices can use the license.
	AllowTestDevices *bool `pulumi:"allowTestDevices"`
	// The begin date of license.
	BeginDate *string `pulumi:"beginDate"`
	// Specifies that the content key ID is in the PlayReady header.
	ContentKeyLocationFromHeaderEnabled *bool `pulumi:"contentKeyLocationFromHeaderEnabled"`
	// The content key ID. Specifies that the content key ID is specified in the PlayReady configuration.
	//
	// > **NOTE:** You can only specify one content key location. For example if you specify `contentKeyLocationFromHeaderEnabled` in true, you shouldn't specify `contentKeyLocationFromKeyId` and vice versa.
	ContentKeyLocationFromKeyId *string `pulumi:"contentKeyLocationFromKeyId"`
	// The PlayReady content type. Supported values are `UltraVioletDownload`, `UltraVioletStreaming` or `Unspecified`.
	ContentType *string `pulumi:"contentType"`
	// The expiration date of license.
	ExpirationDate *string `pulumi:"expirationDate"`
	// The grace period of license.
	GracePeriod *string `pulumi:"gracePeriod"`
	// The license type. Supported values are `NonPersistent` or `Persistent`.
	LicenseType *string `pulumi:"licenseType"`
	// A `playRight` block as defined above.
	PlayRight *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight `pulumi:"playRight"`
	// The relative begin date of license.
	RelativeBeginDate *string `pulumi:"relativeBeginDate"`
	// The relative expiration date of license.
	RelativeExpirationDate *string `pulumi:"relativeExpirationDate"`
	// The security level of the PlayReady license. Possible values are `SL150`, `SL2000` and `SL3000`. Please see [this document](https://learn.microsoft.com/en-us/rest/api/media/content-key-policies/create-or-update?tabs=HTTP#securitylevel) for more information about security level. See [this document](https://learn.microsoft.com/en-us/azure/media-services/latest/drm-playready-license-template-concept#playready-sl3000-support) for more information about `SL3000` support.
	SecurityLevel *string `pulumi:"securityLevel"`
}

// ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseInput is an input type that accepts ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArgs and ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseInput` via:
//
//	ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArgs{...}
type ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseInput interface {
	pulumi.Input

	ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput
	ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutputWithContext(context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput
}

type ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArgs struct {
	// A flag indicating whether test devices can use the license.
	AllowTestDevices pulumi.BoolPtrInput `pulumi:"allowTestDevices"`
	// The begin date of license.
	BeginDate pulumi.StringPtrInput `pulumi:"beginDate"`
	// Specifies that the content key ID is in the PlayReady header.
	ContentKeyLocationFromHeaderEnabled pulumi.BoolPtrInput `pulumi:"contentKeyLocationFromHeaderEnabled"`
	// The content key ID. Specifies that the content key ID is specified in the PlayReady configuration.
	//
	// > **NOTE:** You can only specify one content key location. For example if you specify `contentKeyLocationFromHeaderEnabled` in true, you shouldn't specify `contentKeyLocationFromKeyId` and vice versa.
	ContentKeyLocationFromKeyId pulumi.StringPtrInput `pulumi:"contentKeyLocationFromKeyId"`
	// The PlayReady content type. Supported values are `UltraVioletDownload`, `UltraVioletStreaming` or `Unspecified`.
	ContentType pulumi.StringPtrInput `pulumi:"contentType"`
	// The expiration date of license.
	ExpirationDate pulumi.StringPtrInput `pulumi:"expirationDate"`
	// The grace period of license.
	GracePeriod pulumi.StringPtrInput `pulumi:"gracePeriod"`
	// The license type. Supported values are `NonPersistent` or `Persistent`.
	LicenseType pulumi.StringPtrInput `pulumi:"licenseType"`
	// A `playRight` block as defined above.
	PlayRight ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrInput `pulumi:"playRight"`
	// The relative begin date of license.
	RelativeBeginDate pulumi.StringPtrInput `pulumi:"relativeBeginDate"`
	// The relative expiration date of license.
	RelativeExpirationDate pulumi.StringPtrInput `pulumi:"relativeExpirationDate"`
	// The security level of the PlayReady license. Possible values are `SL150`, `SL2000` and `SL3000`. Please see [this document](https://learn.microsoft.com/en-us/rest/api/media/content-key-policies/create-or-update?tabs=HTTP#securitylevel) for more information about security level. See [this document](https://learn.microsoft.com/en-us/azure/media-services/latest/drm-playready-license-template-concept#playready-sl3000-support) for more information about `SL3000` support.
	SecurityLevel pulumi.StringPtrInput `pulumi:"securityLevel"`
}

func (ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense)(nil)).Elem()
}

func (i ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArgs) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput {
	return i.ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArgs) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput)
}

func (i ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArgs) ToOutput(ctx context.Context) pulumix.Output[ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense] {
	return pulumix.Output[ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense]{
		OutputState: i.ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutputWithContext(ctx).OutputState,
	}
}

// ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayInput is an input type that accepts ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArray and ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayInput` via:
//
//	ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArray{ ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArgs{...} }
type ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayInput interface {
	pulumi.Input

	ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput
	ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutputWithContext(context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput
}

type ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArray []ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseInput

func (ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense)(nil)).Elem()
}

func (i ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArray) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput {
	return i.ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArray) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput)
}

func (i ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArray) ToOutput(ctx context.Context) pulumix.Output[[]ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense] {
	return pulumix.Output[[]ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense]{
		OutputState: i.ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutputWithContext(ctx).OutputState,
	}
}

type ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense)(nil)).Elem()
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput) ToOutput(ctx context.Context) pulumix.Output[ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense] {
	return pulumix.Output[ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense]{
		OutputState: o.OutputState,
	}
}

// A flag indicating whether test devices can use the license.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput) AllowTestDevices() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense) *bool { return v.AllowTestDevices }).(pulumi.BoolPtrOutput)
}

// The begin date of license.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput) BeginDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense) *string { return v.BeginDate }).(pulumi.StringPtrOutput)
}

// Specifies that the content key ID is in the PlayReady header.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput) ContentKeyLocationFromHeaderEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense) *bool {
		return v.ContentKeyLocationFromHeaderEnabled
	}).(pulumi.BoolPtrOutput)
}

// The content key ID. Specifies that the content key ID is specified in the PlayReady configuration.
//
// > **NOTE:** You can only specify one content key location. For example if you specify `contentKeyLocationFromHeaderEnabled` in true, you shouldn't specify `contentKeyLocationFromKeyId` and vice versa.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput) ContentKeyLocationFromKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense) *string {
		return v.ContentKeyLocationFromKeyId
	}).(pulumi.StringPtrOutput)
}

// The PlayReady content type. Supported values are `UltraVioletDownload`, `UltraVioletStreaming` or `Unspecified`.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense) *string { return v.ContentType }).(pulumi.StringPtrOutput)
}

// The expiration date of license.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput) ExpirationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense) *string { return v.ExpirationDate }).(pulumi.StringPtrOutput)
}

// The grace period of license.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput) GracePeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense) *string { return v.GracePeriod }).(pulumi.StringPtrOutput)
}

// The license type. Supported values are `NonPersistent` or `Persistent`.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense) *string { return v.LicenseType }).(pulumi.StringPtrOutput)
}

// A `playRight` block as defined above.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput) PlayRight() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense) *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight {
		return v.PlayRight
	}).(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput)
}

// The relative begin date of license.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput) RelativeBeginDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense) *string { return v.RelativeBeginDate }).(pulumi.StringPtrOutput)
}

// The relative expiration date of license.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput) RelativeExpirationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense) *string {
		return v.RelativeExpirationDate
	}).(pulumi.StringPtrOutput)
}

// The security level of the PlayReady license. Possible values are `SL150`, `SL2000` and `SL3000`. Please see [this document](https://learn.microsoft.com/en-us/rest/api/media/content-key-policies/create-or-update?tabs=HTTP#securitylevel) for more information about security level. See [this document](https://learn.microsoft.com/en-us/azure/media-services/latest/drm-playready-license-template-concept#playready-sl3000-support) for more information about `SL3000` support.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput) SecurityLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense) *string { return v.SecurityLevel }).(pulumi.StringPtrOutput)
}

type ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense)(nil)).Elem()
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense] {
	return pulumix.Output[[]ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense]{
		OutputState: o.OutputState,
	}
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput) Index(i pulumi.IntInput) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense {
		return vs[0].([]ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicense)[vs[1].(int)]
	}).(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput)
}

type ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight struct {
	// Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between `0` and `3` inclusive.
	AgcAndColorStripeRestriction *int `pulumi:"agcAndColorStripeRestriction"`
	// Configures Unknown output handling settings of the license. Supported values are `Allowed`, `AllowedWithVideoConstriction` or `NotAllowed`.
	AllowPassingVideoContentToUnknownOutput *string `pulumi:"allowPassingVideoContentToUnknownOutput"`
	// Specifies the output protection level for compressed digital audio. Supported values are `100`, `150` or `200`.
	AnalogVideoOpl *int `pulumi:"analogVideoOpl"`
	// Specifies the output protection level for compressed digital audio.Supported values are `100`, `150`, `200`, `250` or `300`.
	CompressedDigitalAudioOpl *int `pulumi:"compressedDigitalAudioOpl"`
	// Specifies the output protection level for compressed digital video. Supported values are `400` or `500`.
	CompressedDigitalVideoOpl *int `pulumi:"compressedDigitalVideoOpl"`
	// Enables the Image Constraint For Analog Component Video Restriction in the license.
	DigitalVideoOnlyContentRestriction *bool `pulumi:"digitalVideoOnlyContentRestriction"`
	// An `explicitAnalogTelevisionOutputRestriction` block as defined above.
	ExplicitAnalogTelevisionOutputRestriction *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestriction `pulumi:"explicitAnalogTelevisionOutputRestriction"`
	// The amount of time that the license is valid after the license is first used to play content.
	FirstPlayExpiration *string `pulumi:"firstPlayExpiration"`
	// Enables the Image Constraint For Analog Component Video Restriction in the license.
	ImageConstraintForAnalogComponentVideoRestriction *bool `pulumi:"imageConstraintForAnalogComponentVideoRestriction"`
	// Enables the Image Constraint For Analog Component Video Restriction in the license.
	ImageConstraintForAnalogComputerMonitorRestriction *bool `pulumi:"imageConstraintForAnalogComputerMonitorRestriction"`
	// Configures the Serial Copy Management System (SCMS) in the license. Must be between `0` and `3` inclusive.
	ScmsRestriction *int `pulumi:"scmsRestriction"`
	// Specifies the output protection level for uncompressed digital audio. Supported values are `100`, `150`, `200`, `250` or `300`.
	UncompressedDigitalAudioOpl *int `pulumi:"uncompressedDigitalAudioOpl"`
	// Specifies the output protection level for uncompressed digital video. Supported values are `100`, `250`, `270` or `300`.
	UncompressedDigitalVideoOpl *int `pulumi:"uncompressedDigitalVideoOpl"`
}

// ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightInput is an input type that accepts ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightArgs and ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightInput` via:
//
//	ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightArgs{...}
type ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightInput interface {
	pulumi.Input

	ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput
	ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutputWithContext(context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput
}

type ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightArgs struct {
	// Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between `0` and `3` inclusive.
	AgcAndColorStripeRestriction pulumi.IntPtrInput `pulumi:"agcAndColorStripeRestriction"`
	// Configures Unknown output handling settings of the license. Supported values are `Allowed`, `AllowedWithVideoConstriction` or `NotAllowed`.
	AllowPassingVideoContentToUnknownOutput pulumi.StringPtrInput `pulumi:"allowPassingVideoContentToUnknownOutput"`
	// Specifies the output protection level for compressed digital audio. Supported values are `100`, `150` or `200`.
	AnalogVideoOpl pulumi.IntPtrInput `pulumi:"analogVideoOpl"`
	// Specifies the output protection level for compressed digital audio.Supported values are `100`, `150`, `200`, `250` or `300`.
	CompressedDigitalAudioOpl pulumi.IntPtrInput `pulumi:"compressedDigitalAudioOpl"`
	// Specifies the output protection level for compressed digital video. Supported values are `400` or `500`.
	CompressedDigitalVideoOpl pulumi.IntPtrInput `pulumi:"compressedDigitalVideoOpl"`
	// Enables the Image Constraint For Analog Component Video Restriction in the license.
	DigitalVideoOnlyContentRestriction pulumi.BoolPtrInput `pulumi:"digitalVideoOnlyContentRestriction"`
	// An `explicitAnalogTelevisionOutputRestriction` block as defined above.
	ExplicitAnalogTelevisionOutputRestriction ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrInput `pulumi:"explicitAnalogTelevisionOutputRestriction"`
	// The amount of time that the license is valid after the license is first used to play content.
	FirstPlayExpiration pulumi.StringPtrInput `pulumi:"firstPlayExpiration"`
	// Enables the Image Constraint For Analog Component Video Restriction in the license.
	ImageConstraintForAnalogComponentVideoRestriction pulumi.BoolPtrInput `pulumi:"imageConstraintForAnalogComponentVideoRestriction"`
	// Enables the Image Constraint For Analog Component Video Restriction in the license.
	ImageConstraintForAnalogComputerMonitorRestriction pulumi.BoolPtrInput `pulumi:"imageConstraintForAnalogComputerMonitorRestriction"`
	// Configures the Serial Copy Management System (SCMS) in the license. Must be between `0` and `3` inclusive.
	ScmsRestriction pulumi.IntPtrInput `pulumi:"scmsRestriction"`
	// Specifies the output protection level for uncompressed digital audio. Supported values are `100`, `150`, `200`, `250` or `300`.
	UncompressedDigitalAudioOpl pulumi.IntPtrInput `pulumi:"uncompressedDigitalAudioOpl"`
	// Specifies the output protection level for uncompressed digital video. Supported values are `100`, `250`, `270` or `300`.
	UncompressedDigitalVideoOpl pulumi.IntPtrInput `pulumi:"uncompressedDigitalVideoOpl"`
}

func (ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight)(nil)).Elem()
}

func (i ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightArgs) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput {
	return i.ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightArgs) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput)
}

func (i ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightArgs) ToOutput(ctx context.Context) pulumix.Output[ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight] {
	return pulumix.Output[ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight]{
		OutputState: i.ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutputWithContext(ctx).OutputState,
	}
}

func (i ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightArgs) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput {
	return i.ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightArgs) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput).ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutputWithContext(ctx)
}

// ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrInput is an input type that accepts ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightArgs, ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtr and ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrInput` via:
//
//	        ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightArgs{...}
//
//	or:
//
//	        nil
type ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrInput interface {
	pulumi.Input

	ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput
	ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutputWithContext(context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput
}

type contentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrType ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightArgs

func ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtr(v *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightArgs) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrInput {
	return (*contentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrType)(v)
}

func (*contentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight)(nil)).Elem()
}

func (i *contentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrType) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput {
	return i.ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutputWithContext(context.Background())
}

func (i *contentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrType) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput)
}

func (i *contentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrType) ToOutput(ctx context.Context) pulumix.Output[*ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight] {
	return pulumix.Output[*ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight]{
		OutputState: i.ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutputWithContext(ctx).OutputState,
	}
}

type ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight)(nil)).Elem()
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput {
	return o.ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutputWithContext(context.Background())
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight {
		return &v
	}).(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput)
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) ToOutput(ctx context.Context) pulumix.Output[ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight] {
	return pulumix.Output[ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight]{
		OutputState: o.OutputState,
	}
}

// Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between `0` and `3` inclusive.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) AgcAndColorStripeRestriction() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *int {
		return v.AgcAndColorStripeRestriction
	}).(pulumi.IntPtrOutput)
}

// Configures Unknown output handling settings of the license. Supported values are `Allowed`, `AllowedWithVideoConstriction` or `NotAllowed`.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) AllowPassingVideoContentToUnknownOutput() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *string {
		return v.AllowPassingVideoContentToUnknownOutput
	}).(pulumi.StringPtrOutput)
}

// Specifies the output protection level for compressed digital audio. Supported values are `100`, `150` or `200`.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) AnalogVideoOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *int {
		return v.AnalogVideoOpl
	}).(pulumi.IntPtrOutput)
}

// Specifies the output protection level for compressed digital audio.Supported values are `100`, `150`, `200`, `250` or `300`.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) CompressedDigitalAudioOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *int {
		return v.CompressedDigitalAudioOpl
	}).(pulumi.IntPtrOutput)
}

// Specifies the output protection level for compressed digital video. Supported values are `400` or `500`.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) CompressedDigitalVideoOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *int {
		return v.CompressedDigitalVideoOpl
	}).(pulumi.IntPtrOutput)
}

// Enables the Image Constraint For Analog Component Video Restriction in the license.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) DigitalVideoOnlyContentRestriction() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *bool {
		return v.DigitalVideoOnlyContentRestriction
	}).(pulumi.BoolPtrOutput)
}

// An `explicitAnalogTelevisionOutputRestriction` block as defined above.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) ExplicitAnalogTelevisionOutputRestriction() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestriction {
		return v.ExplicitAnalogTelevisionOutputRestriction
	}).(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutput)
}

// The amount of time that the license is valid after the license is first used to play content.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) FirstPlayExpiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *string {
		return v.FirstPlayExpiration
	}).(pulumi.StringPtrOutput)
}

// Enables the Image Constraint For Analog Component Video Restriction in the license.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) ImageConstraintForAnalogComponentVideoRestriction() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *bool {
		return v.ImageConstraintForAnalogComponentVideoRestriction
	}).(pulumi.BoolPtrOutput)
}

// Enables the Image Constraint For Analog Component Video Restriction in the license.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) ImageConstraintForAnalogComputerMonitorRestriction() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *bool {
		return v.ImageConstraintForAnalogComputerMonitorRestriction
	}).(pulumi.BoolPtrOutput)
}

// Configures the Serial Copy Management System (SCMS) in the license. Must be between `0` and `3` inclusive.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) ScmsRestriction() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *int {
		return v.ScmsRestriction
	}).(pulumi.IntPtrOutput)
}

// Specifies the output protection level for uncompressed digital audio. Supported values are `100`, `150`, `200`, `250` or `300`.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) UncompressedDigitalAudioOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *int {
		return v.UncompressedDigitalAudioOpl
	}).(pulumi.IntPtrOutput)
}

// Specifies the output protection level for uncompressed digital video. Supported values are `100`, `250`, `270` or `300`.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput) UncompressedDigitalVideoOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *int {
		return v.UncompressedDigitalVideoOpl
	}).(pulumi.IntPtrOutput)
}

type ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight)(nil)).Elem()
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight] {
	return pulumix.Output[*ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight]{
		OutputState: o.OutputState,
	}
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput) Elem() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight {
		if v != nil {
			return *v
		}
		var ret ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight
		return ret
	}).(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput)
}

// Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between `0` and `3` inclusive.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput) AgcAndColorStripeRestriction() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *int {
		if v == nil {
			return nil
		}
		return v.AgcAndColorStripeRestriction
	}).(pulumi.IntPtrOutput)
}

// Configures Unknown output handling settings of the license. Supported values are `Allowed`, `AllowedWithVideoConstriction` or `NotAllowed`.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput) AllowPassingVideoContentToUnknownOutput() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *string {
		if v == nil {
			return nil
		}
		return v.AllowPassingVideoContentToUnknownOutput
	}).(pulumi.StringPtrOutput)
}

// Specifies the output protection level for compressed digital audio. Supported values are `100`, `150` or `200`.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput) AnalogVideoOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *int {
		if v == nil {
			return nil
		}
		return v.AnalogVideoOpl
	}).(pulumi.IntPtrOutput)
}

// Specifies the output protection level for compressed digital audio.Supported values are `100`, `150`, `200`, `250` or `300`.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput) CompressedDigitalAudioOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *int {
		if v == nil {
			return nil
		}
		return v.CompressedDigitalAudioOpl
	}).(pulumi.IntPtrOutput)
}

// Specifies the output protection level for compressed digital video. Supported values are `400` or `500`.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput) CompressedDigitalVideoOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *int {
		if v == nil {
			return nil
		}
		return v.CompressedDigitalVideoOpl
	}).(pulumi.IntPtrOutput)
}

// Enables the Image Constraint For Analog Component Video Restriction in the license.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput) DigitalVideoOnlyContentRestriction() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *bool {
		if v == nil {
			return nil
		}
		return v.DigitalVideoOnlyContentRestriction
	}).(pulumi.BoolPtrOutput)
}

// An `explicitAnalogTelevisionOutputRestriction` block as defined above.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput) ExplicitAnalogTelevisionOutputRestriction() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestriction {
		if v == nil {
			return nil
		}
		return v.ExplicitAnalogTelevisionOutputRestriction
	}).(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutput)
}

// The amount of time that the license is valid after the license is first used to play content.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput) FirstPlayExpiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *string {
		if v == nil {
			return nil
		}
		return v.FirstPlayExpiration
	}).(pulumi.StringPtrOutput)
}

// Enables the Image Constraint For Analog Component Video Restriction in the license.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput) ImageConstraintForAnalogComponentVideoRestriction() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *bool {
		if v == nil {
			return nil
		}
		return v.ImageConstraintForAnalogComponentVideoRestriction
	}).(pulumi.BoolPtrOutput)
}

// Enables the Image Constraint For Analog Component Video Restriction in the license.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput) ImageConstraintForAnalogComputerMonitorRestriction() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *bool {
		if v == nil {
			return nil
		}
		return v.ImageConstraintForAnalogComputerMonitorRestriction
	}).(pulumi.BoolPtrOutput)
}

// Configures the Serial Copy Management System (SCMS) in the license. Must be between `0` and `3` inclusive.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput) ScmsRestriction() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *int {
		if v == nil {
			return nil
		}
		return v.ScmsRestriction
	}).(pulumi.IntPtrOutput)
}

// Specifies the output protection level for uncompressed digital audio. Supported values are `100`, `150`, `200`, `250` or `300`.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput) UncompressedDigitalAudioOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *int {
		if v == nil {
			return nil
		}
		return v.UncompressedDigitalAudioOpl
	}).(pulumi.IntPtrOutput)
}

// Specifies the output protection level for uncompressed digital video. Supported values are `100`, `250`, `270` or `300`.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput) UncompressedDigitalVideoOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRight) *int {
		if v == nil {
			return nil
		}
		return v.UncompressedDigitalVideoOpl
	}).(pulumi.IntPtrOutput)
}

type ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestriction struct {
	// Indicates whether this restriction is enforced on a best effort basis. Possible values are `true` or `false`. Defaults to `false`.
	BestEffortEnforced *bool `pulumi:"bestEffortEnforced"`
	// The restriction control bits. Possible value is integer between `0` and `3` inclusive.
	ControlBits int `pulumi:"controlBits"`
}

// ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionInput is an input type that accepts ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionArgs and ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionInput` via:
//
//	ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionArgs{...}
type ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionInput interface {
	pulumi.Input

	ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionOutput
	ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionOutputWithContext(context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionOutput
}

type ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionArgs struct {
	// Indicates whether this restriction is enforced on a best effort basis. Possible values are `true` or `false`. Defaults to `false`.
	BestEffortEnforced pulumi.BoolPtrInput `pulumi:"bestEffortEnforced"`
	// The restriction control bits. Possible value is integer between `0` and `3` inclusive.
	ControlBits pulumi.IntInput `pulumi:"controlBits"`
}

func (ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestriction)(nil)).Elem()
}

func (i ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionArgs) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionOutput {
	return i.ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionArgs) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionOutput)
}

func (i ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionArgs) ToOutput(ctx context.Context) pulumix.Output[ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestriction] {
	return pulumix.Output[ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestriction]{
		OutputState: i.ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionOutputWithContext(ctx).OutputState,
	}
}

func (i ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionArgs) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutput {
	return i.ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionArgs) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionOutput).ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutputWithContext(ctx)
}

// ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrInput is an input type that accepts ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionArgs, ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtr and ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrInput` via:
//
//	        ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionArgs{...}
//
//	or:
//
//	        nil
type ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrInput interface {
	pulumi.Input

	ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutput
	ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutputWithContext(context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutput
}

type contentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrType ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionArgs

func ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtr(v *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionArgs) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrInput {
	return (*contentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrType)(v)
}

func (*contentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestriction)(nil)).Elem()
}

func (i *contentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrType) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutput {
	return i.ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutputWithContext(context.Background())
}

func (i *contentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrType) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutput)
}

func (i *contentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrType) ToOutput(ctx context.Context) pulumix.Output[*ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestriction] {
	return pulumix.Output[*ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestriction]{
		OutputState: i.ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutputWithContext(ctx).OutputState,
	}
}

type ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestriction)(nil)).Elem()
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionOutput) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionOutput) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionOutput) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutput {
	return o.ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutputWithContext(context.Background())
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionOutput) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestriction) *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestriction {
		return &v
	}).(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutput)
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionOutput) ToOutput(ctx context.Context) pulumix.Output[ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestriction] {
	return pulumix.Output[ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestriction]{
		OutputState: o.OutputState,
	}
}

// Indicates whether this restriction is enforced on a best effort basis. Possible values are `true` or `false`. Defaults to `false`.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionOutput) BestEffortEnforced() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestriction) *bool {
		return v.BestEffortEnforced
	}).(pulumi.BoolPtrOutput)
}

// The restriction control bits. Possible value is integer between `0` and `3` inclusive.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionOutput) ControlBits() pulumi.IntOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestriction) int {
		return v.ControlBits
	}).(pulumi.IntOutput)
}

type ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestriction)(nil)).Elem()
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutput) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutput() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutput) ToContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestriction] {
	return pulumix.Output[*ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestriction]{
		OutputState: o.OutputState,
	}
}

func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutput) Elem() ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestriction) ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestriction {
		if v != nil {
			return *v
		}
		var ret ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestriction
		return ret
	}).(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionOutput)
}

// Indicates whether this restriction is enforced on a best effort basis. Possible values are `true` or `false`. Defaults to `false`.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutput) BestEffortEnforced() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestriction) *bool {
		if v == nil {
			return nil
		}
		return v.BestEffortEnforced
	}).(pulumi.BoolPtrOutput)
}

// The restriction control bits. Possible value is integer between `0` and `3` inclusive.
func (o ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutput) ControlBits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestriction) *int {
		if v == nil {
			return nil
		}
		return &v.ControlBits
	}).(pulumi.IntPtrOutput)
}

type ContentKeyPolicyPolicyOptionTokenRestriction struct {
	// One or more `alternateKey` block as defined above.
	AlternateKeys []ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKey `pulumi:"alternateKeys"`
	// The audience for the token.
	Audience *string `pulumi:"audience"`
	// The token issuer.
	Issuer *string `pulumi:"issuer"`
	// The OpenID connect discovery document.
	OpenIdConnectDiscoveryDocument *string `pulumi:"openIdConnectDiscoveryDocument"`
	// The RSA parameter exponent.
	PrimaryRsaTokenKeyExponent *string `pulumi:"primaryRsaTokenKeyExponent"`
	// The RSA parameter modulus.
	PrimaryRsaTokenKeyModulus *string `pulumi:"primaryRsaTokenKeyModulus"`
	// The key value of the key. Specifies a symmetric key for token validation.
	PrimarySymmetricTokenKey *string `pulumi:"primarySymmetricTokenKey"`
	// The raw data field of a certificate in PKCS 12 format (X509Certificate2 in .NET). Specifies a certificate for token validation.
	PrimaryX509TokenKeyRaw *string `pulumi:"primaryX509TokenKeyRaw"`
	// One or more `requiredClaim` blocks as defined above.
	RequiredClaims []ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim `pulumi:"requiredClaims"`
	// The type of token. Supported values are `Jwt` or `Swt`.
	//
	// > **NOTE:** Each tokenRestriction can only have one type of primary verification key: if you want to use RSA you must provide `primaryRsaTokenKeyExponent` and `primaryRsaTokenKeyModulus`, if you want to use symmetric you need to provide `primarySymmetricTokenKey` and for x509 you must provide `primaryX509TokenKeyRaw`. For more information about Token access please refer to <https://docs.microsoft.com/azure/media-services/latest/content-protection-overview#controlling-content-access>
	TokenType *string `pulumi:"tokenType"`
}

// ContentKeyPolicyPolicyOptionTokenRestrictionInput is an input type that accepts ContentKeyPolicyPolicyOptionTokenRestrictionArgs and ContentKeyPolicyPolicyOptionTokenRestrictionOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPolicyOptionTokenRestrictionInput` via:
//
//	ContentKeyPolicyPolicyOptionTokenRestrictionArgs{...}
type ContentKeyPolicyPolicyOptionTokenRestrictionInput interface {
	pulumi.Input

	ToContentKeyPolicyPolicyOptionTokenRestrictionOutput() ContentKeyPolicyPolicyOptionTokenRestrictionOutput
	ToContentKeyPolicyPolicyOptionTokenRestrictionOutputWithContext(context.Context) ContentKeyPolicyPolicyOptionTokenRestrictionOutput
}

type ContentKeyPolicyPolicyOptionTokenRestrictionArgs struct {
	// One or more `alternateKey` block as defined above.
	AlternateKeys ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArrayInput `pulumi:"alternateKeys"`
	// The audience for the token.
	Audience pulumi.StringPtrInput `pulumi:"audience"`
	// The token issuer.
	Issuer pulumi.StringPtrInput `pulumi:"issuer"`
	// The OpenID connect discovery document.
	OpenIdConnectDiscoveryDocument pulumi.StringPtrInput `pulumi:"openIdConnectDiscoveryDocument"`
	// The RSA parameter exponent.
	PrimaryRsaTokenKeyExponent pulumi.StringPtrInput `pulumi:"primaryRsaTokenKeyExponent"`
	// The RSA parameter modulus.
	PrimaryRsaTokenKeyModulus pulumi.StringPtrInput `pulumi:"primaryRsaTokenKeyModulus"`
	// The key value of the key. Specifies a symmetric key for token validation.
	PrimarySymmetricTokenKey pulumi.StringPtrInput `pulumi:"primarySymmetricTokenKey"`
	// The raw data field of a certificate in PKCS 12 format (X509Certificate2 in .NET). Specifies a certificate for token validation.
	PrimaryX509TokenKeyRaw pulumi.StringPtrInput `pulumi:"primaryX509TokenKeyRaw"`
	// One or more `requiredClaim` blocks as defined above.
	RequiredClaims ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayInput `pulumi:"requiredClaims"`
	// The type of token. Supported values are `Jwt` or `Swt`.
	//
	// > **NOTE:** Each tokenRestriction can only have one type of primary verification key: if you want to use RSA you must provide `primaryRsaTokenKeyExponent` and `primaryRsaTokenKeyModulus`, if you want to use symmetric you need to provide `primarySymmetricTokenKey` and for x509 you must provide `primaryX509TokenKeyRaw`. For more information about Token access please refer to <https://docs.microsoft.com/azure/media-services/latest/content-protection-overview#controlling-content-access>
	TokenType pulumi.StringPtrInput `pulumi:"tokenType"`
}

func (ContentKeyPolicyPolicyOptionTokenRestrictionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPolicyOptionTokenRestriction)(nil)).Elem()
}

func (i ContentKeyPolicyPolicyOptionTokenRestrictionArgs) ToContentKeyPolicyPolicyOptionTokenRestrictionOutput() ContentKeyPolicyPolicyOptionTokenRestrictionOutput {
	return i.ToContentKeyPolicyPolicyOptionTokenRestrictionOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPolicyOptionTokenRestrictionArgs) ToContentKeyPolicyPolicyOptionTokenRestrictionOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionTokenRestrictionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionTokenRestrictionOutput)
}

func (i ContentKeyPolicyPolicyOptionTokenRestrictionArgs) ToOutput(ctx context.Context) pulumix.Output[ContentKeyPolicyPolicyOptionTokenRestriction] {
	return pulumix.Output[ContentKeyPolicyPolicyOptionTokenRestriction]{
		OutputState: i.ToContentKeyPolicyPolicyOptionTokenRestrictionOutputWithContext(ctx).OutputState,
	}
}

func (i ContentKeyPolicyPolicyOptionTokenRestrictionArgs) ToContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput() ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput {
	return i.ToContentKeyPolicyPolicyOptionTokenRestrictionPtrOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPolicyOptionTokenRestrictionArgs) ToContentKeyPolicyPolicyOptionTokenRestrictionPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionTokenRestrictionOutput).ToContentKeyPolicyPolicyOptionTokenRestrictionPtrOutputWithContext(ctx)
}

// ContentKeyPolicyPolicyOptionTokenRestrictionPtrInput is an input type that accepts ContentKeyPolicyPolicyOptionTokenRestrictionArgs, ContentKeyPolicyPolicyOptionTokenRestrictionPtr and ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPolicyOptionTokenRestrictionPtrInput` via:
//
//	        ContentKeyPolicyPolicyOptionTokenRestrictionArgs{...}
//
//	or:
//
//	        nil
type ContentKeyPolicyPolicyOptionTokenRestrictionPtrInput interface {
	pulumi.Input

	ToContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput() ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput
	ToContentKeyPolicyPolicyOptionTokenRestrictionPtrOutputWithContext(context.Context) ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput
}

type contentKeyPolicyPolicyOptionTokenRestrictionPtrType ContentKeyPolicyPolicyOptionTokenRestrictionArgs

func ContentKeyPolicyPolicyOptionTokenRestrictionPtr(v *ContentKeyPolicyPolicyOptionTokenRestrictionArgs) ContentKeyPolicyPolicyOptionTokenRestrictionPtrInput {
	return (*contentKeyPolicyPolicyOptionTokenRestrictionPtrType)(v)
}

func (*contentKeyPolicyPolicyOptionTokenRestrictionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentKeyPolicyPolicyOptionTokenRestriction)(nil)).Elem()
}

func (i *contentKeyPolicyPolicyOptionTokenRestrictionPtrType) ToContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput() ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput {
	return i.ToContentKeyPolicyPolicyOptionTokenRestrictionPtrOutputWithContext(context.Background())
}

func (i *contentKeyPolicyPolicyOptionTokenRestrictionPtrType) ToContentKeyPolicyPolicyOptionTokenRestrictionPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput)
}

func (i *contentKeyPolicyPolicyOptionTokenRestrictionPtrType) ToOutput(ctx context.Context) pulumix.Output[*ContentKeyPolicyPolicyOptionTokenRestriction] {
	return pulumix.Output[*ContentKeyPolicyPolicyOptionTokenRestriction]{
		OutputState: i.ToContentKeyPolicyPolicyOptionTokenRestrictionPtrOutputWithContext(ctx).OutputState,
	}
}

type ContentKeyPolicyPolicyOptionTokenRestrictionOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPolicyOptionTokenRestrictionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPolicyOptionTokenRestriction)(nil)).Elem()
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionOutput) ToContentKeyPolicyPolicyOptionTokenRestrictionOutput() ContentKeyPolicyPolicyOptionTokenRestrictionOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionOutput) ToContentKeyPolicyPolicyOptionTokenRestrictionOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionTokenRestrictionOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionOutput) ToContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput() ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput {
	return o.ToContentKeyPolicyPolicyOptionTokenRestrictionPtrOutputWithContext(context.Background())
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionOutput) ToContentKeyPolicyPolicyOptionTokenRestrictionPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContentKeyPolicyPolicyOptionTokenRestriction) *ContentKeyPolicyPolicyOptionTokenRestriction {
		return &v
	}).(ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput)
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionOutput) ToOutput(ctx context.Context) pulumix.Output[ContentKeyPolicyPolicyOptionTokenRestriction] {
	return pulumix.Output[ContentKeyPolicyPolicyOptionTokenRestriction]{
		OutputState: o.OutputState,
	}
}

// One or more `alternateKey` block as defined above.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionOutput) AlternateKeys() ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArrayOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionTokenRestriction) []ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKey {
		return v.AlternateKeys
	}).(ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArrayOutput)
}

// The audience for the token.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionTokenRestriction) *string { return v.Audience }).(pulumi.StringPtrOutput)
}

// The token issuer.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionTokenRestriction) *string { return v.Issuer }).(pulumi.StringPtrOutput)
}

// The OpenID connect discovery document.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionOutput) OpenIdConnectDiscoveryDocument() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionTokenRestriction) *string { return v.OpenIdConnectDiscoveryDocument }).(pulumi.StringPtrOutput)
}

// The RSA parameter exponent.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionOutput) PrimaryRsaTokenKeyExponent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionTokenRestriction) *string { return v.PrimaryRsaTokenKeyExponent }).(pulumi.StringPtrOutput)
}

// The RSA parameter modulus.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionOutput) PrimaryRsaTokenKeyModulus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionTokenRestriction) *string { return v.PrimaryRsaTokenKeyModulus }).(pulumi.StringPtrOutput)
}

// The key value of the key. Specifies a symmetric key for token validation.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionOutput) PrimarySymmetricTokenKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionTokenRestriction) *string { return v.PrimarySymmetricTokenKey }).(pulumi.StringPtrOutput)
}

// The raw data field of a certificate in PKCS 12 format (X509Certificate2 in .NET). Specifies a certificate for token validation.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionOutput) PrimaryX509TokenKeyRaw() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionTokenRestriction) *string { return v.PrimaryX509TokenKeyRaw }).(pulumi.StringPtrOutput)
}

// One or more `requiredClaim` blocks as defined above.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionOutput) RequiredClaims() ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionTokenRestriction) []ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim {
		return v.RequiredClaims
	}).(ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput)
}

// The type of token. Supported values are `Jwt` or `Swt`.
//
// > **NOTE:** Each tokenRestriction can only have one type of primary verification key: if you want to use RSA you must provide `primaryRsaTokenKeyExponent` and `primaryRsaTokenKeyModulus`, if you want to use symmetric you need to provide `primarySymmetricTokenKey` and for x509 you must provide `primaryX509TokenKeyRaw`. For more information about Token access please refer to <https://docs.microsoft.com/azure/media-services/latest/content-protection-overview#controlling-content-access>
func (o ContentKeyPolicyPolicyOptionTokenRestrictionOutput) TokenType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionTokenRestriction) *string { return v.TokenType }).(pulumi.StringPtrOutput)
}

type ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentKeyPolicyPolicyOptionTokenRestriction)(nil)).Elem()
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput) ToContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput() ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput) ToContentKeyPolicyPolicyOptionTokenRestrictionPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContentKeyPolicyPolicyOptionTokenRestriction] {
	return pulumix.Output[*ContentKeyPolicyPolicyOptionTokenRestriction]{
		OutputState: o.OutputState,
	}
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput) Elem() ContentKeyPolicyPolicyOptionTokenRestrictionOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionTokenRestriction) ContentKeyPolicyPolicyOptionTokenRestriction {
		if v != nil {
			return *v
		}
		var ret ContentKeyPolicyPolicyOptionTokenRestriction
		return ret
	}).(ContentKeyPolicyPolicyOptionTokenRestrictionOutput)
}

// One or more `alternateKey` block as defined above.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput) AlternateKeys() ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArrayOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionTokenRestriction) []ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKey {
		if v == nil {
			return nil
		}
		return v.AlternateKeys
	}).(ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArrayOutput)
}

// The audience for the token.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionTokenRestriction) *string {
		if v == nil {
			return nil
		}
		return v.Audience
	}).(pulumi.StringPtrOutput)
}

// The token issuer.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionTokenRestriction) *string {
		if v == nil {
			return nil
		}
		return v.Issuer
	}).(pulumi.StringPtrOutput)
}

// The OpenID connect discovery document.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput) OpenIdConnectDiscoveryDocument() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionTokenRestriction) *string {
		if v == nil {
			return nil
		}
		return v.OpenIdConnectDiscoveryDocument
	}).(pulumi.StringPtrOutput)
}

// The RSA parameter exponent.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput) PrimaryRsaTokenKeyExponent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionTokenRestriction) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryRsaTokenKeyExponent
	}).(pulumi.StringPtrOutput)
}

// The RSA parameter modulus.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput) PrimaryRsaTokenKeyModulus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionTokenRestriction) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryRsaTokenKeyModulus
	}).(pulumi.StringPtrOutput)
}

// The key value of the key. Specifies a symmetric key for token validation.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput) PrimarySymmetricTokenKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionTokenRestriction) *string {
		if v == nil {
			return nil
		}
		return v.PrimarySymmetricTokenKey
	}).(pulumi.StringPtrOutput)
}

// The raw data field of a certificate in PKCS 12 format (X509Certificate2 in .NET). Specifies a certificate for token validation.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput) PrimaryX509TokenKeyRaw() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionTokenRestriction) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryX509TokenKeyRaw
	}).(pulumi.StringPtrOutput)
}

// One or more `requiredClaim` blocks as defined above.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput) RequiredClaims() ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionTokenRestriction) []ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim {
		if v == nil {
			return nil
		}
		return v.RequiredClaims
	}).(ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput)
}

// The type of token. Supported values are `Jwt` or `Swt`.
//
// > **NOTE:** Each tokenRestriction can only have one type of primary verification key: if you want to use RSA you must provide `primaryRsaTokenKeyExponent` and `primaryRsaTokenKeyModulus`, if you want to use symmetric you need to provide `primarySymmetricTokenKey` and for x509 you must provide `primaryX509TokenKeyRaw`. For more information about Token access please refer to <https://docs.microsoft.com/azure/media-services/latest/content-protection-overview#controlling-content-access>
func (o ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput) TokenType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPolicyOptionTokenRestriction) *string {
		if v == nil {
			return nil
		}
		return v.TokenType
	}).(pulumi.StringPtrOutput)
}

type ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKey struct {
	// The RSA parameter exponent.
	RsaTokenKeyExponent *string `pulumi:"rsaTokenKeyExponent"`
	// The RSA parameter modulus.
	RsaTokenKeyModulus *string `pulumi:"rsaTokenKeyModulus"`
	// The key value of the key. Specifies a symmetric key for token validation.
	SymmetricTokenKey *string `pulumi:"symmetricTokenKey"`
	// The raw data field of a certificate in PKCS 12 format (X509Certificate2 in .NET). Specifies a certificate for token validation.
	//
	// > **NOTE:** Each `alternateKey` block can only have one type of primary verification key: if you want to use RSA you must provide `rsaTokenKeyExponent` and `rsaTokenKeyModulus`, if you want to use symmetric you need to provide `symmetricTokenKey` and for x509 you must provide `x509TokenKeyRaw`.
	X509TokenKeyRaw *string `pulumi:"x509TokenKeyRaw"`
}

// ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyInput is an input type that accepts ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArgs and ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyInput` via:
//
//	ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArgs{...}
type ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyInput interface {
	pulumi.Input

	ToContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyOutput() ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyOutput
	ToContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyOutputWithContext(context.Context) ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyOutput
}

type ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArgs struct {
	// The RSA parameter exponent.
	RsaTokenKeyExponent pulumi.StringPtrInput `pulumi:"rsaTokenKeyExponent"`
	// The RSA parameter modulus.
	RsaTokenKeyModulus pulumi.StringPtrInput `pulumi:"rsaTokenKeyModulus"`
	// The key value of the key. Specifies a symmetric key for token validation.
	SymmetricTokenKey pulumi.StringPtrInput `pulumi:"symmetricTokenKey"`
	// The raw data field of a certificate in PKCS 12 format (X509Certificate2 in .NET). Specifies a certificate for token validation.
	//
	// > **NOTE:** Each `alternateKey` block can only have one type of primary verification key: if you want to use RSA you must provide `rsaTokenKeyExponent` and `rsaTokenKeyModulus`, if you want to use symmetric you need to provide `symmetricTokenKey` and for x509 you must provide `x509TokenKeyRaw`.
	X509TokenKeyRaw pulumi.StringPtrInput `pulumi:"x509TokenKeyRaw"`
}

func (ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKey)(nil)).Elem()
}

func (i ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArgs) ToContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyOutput() ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyOutput {
	return i.ToContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArgs) ToContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyOutput)
}

func (i ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArgs) ToOutput(ctx context.Context) pulumix.Output[ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKey] {
	return pulumix.Output[ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKey]{
		OutputState: i.ToContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyOutputWithContext(ctx).OutputState,
	}
}

// ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArrayInput is an input type that accepts ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArray and ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArrayOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArrayInput` via:
//
//	ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArray{ ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArgs{...} }
type ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArrayInput interface {
	pulumi.Input

	ToContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArrayOutput() ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArrayOutput
	ToContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArrayOutputWithContext(context.Context) ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArrayOutput
}

type ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArray []ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyInput

func (ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKey)(nil)).Elem()
}

func (i ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArray) ToContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArrayOutput() ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArrayOutput {
	return i.ToContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArrayOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArray) ToContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArrayOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArrayOutput)
}

func (i ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArray) ToOutput(ctx context.Context) pulumix.Output[[]ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKey] {
	return pulumix.Output[[]ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKey]{
		OutputState: i.ToContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArrayOutputWithContext(ctx).OutputState,
	}
}

type ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKey)(nil)).Elem()
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyOutput) ToContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyOutput() ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyOutput) ToContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyOutput) ToOutput(ctx context.Context) pulumix.Output[ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKey] {
	return pulumix.Output[ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKey]{
		OutputState: o.OutputState,
	}
}

// The RSA parameter exponent.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyOutput) RsaTokenKeyExponent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKey) *string { return v.RsaTokenKeyExponent }).(pulumi.StringPtrOutput)
}

// The RSA parameter modulus.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyOutput) RsaTokenKeyModulus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKey) *string { return v.RsaTokenKeyModulus }).(pulumi.StringPtrOutput)
}

// The key value of the key. Specifies a symmetric key for token validation.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyOutput) SymmetricTokenKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKey) *string { return v.SymmetricTokenKey }).(pulumi.StringPtrOutput)
}

// The raw data field of a certificate in PKCS 12 format (X509Certificate2 in .NET). Specifies a certificate for token validation.
//
// > **NOTE:** Each `alternateKey` block can only have one type of primary verification key: if you want to use RSA you must provide `rsaTokenKeyExponent` and `rsaTokenKeyModulus`, if you want to use symmetric you need to provide `symmetricTokenKey` and for x509 you must provide `x509TokenKeyRaw`.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyOutput) X509TokenKeyRaw() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKey) *string { return v.X509TokenKeyRaw }).(pulumi.StringPtrOutput)
}

type ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArrayOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKey)(nil)).Elem()
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArrayOutput) ToContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArrayOutput() ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArrayOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArrayOutput) ToContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArrayOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArrayOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKey] {
	return pulumix.Output[[]ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKey]{
		OutputState: o.OutputState,
	}
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArrayOutput) Index(i pulumi.IntInput) ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKey {
		return vs[0].([]ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKey)[vs[1].(int)]
	}).(ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyOutput)
}

type ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim struct {
	// Token claim type.
	Type *string `pulumi:"type"`
	// Token claim value.
	Value *string `pulumi:"value"`
}

// ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimInput is an input type that accepts ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArgs and ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimInput` via:
//
//	ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArgs{...}
type ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimInput interface {
	pulumi.Input

	ToContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput() ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput
	ToContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutputWithContext(context.Context) ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput
}

type ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArgs struct {
	// Token claim type.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Token claim value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim)(nil)).Elem()
}

func (i ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArgs) ToContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput() ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput {
	return i.ToContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArgs) ToContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput)
}

func (i ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArgs) ToOutput(ctx context.Context) pulumix.Output[ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim] {
	return pulumix.Output[ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim]{
		OutputState: i.ToContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutputWithContext(ctx).OutputState,
	}
}

// ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayInput is an input type that accepts ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArray and ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayInput` via:
//
//	ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArray{ ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArgs{...} }
type ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayInput interface {
	pulumi.Input

	ToContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput() ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput
	ToContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutputWithContext(context.Context) ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput
}

type ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArray []ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimInput

func (ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim)(nil)).Elem()
}

func (i ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArray) ToContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput() ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput {
	return i.ToContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArray) ToContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput)
}

func (i ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArray) ToOutput(ctx context.Context) pulumix.Output[[]ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim] {
	return pulumix.Output[[]ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim]{
		OutputState: i.ToContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutputWithContext(ctx).OutputState,
	}
}

type ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim)(nil)).Elem()
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput) ToContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput() ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput) ToContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput) ToOutput(ctx context.Context) pulumix.Output[ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim] {
	return pulumix.Output[ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim]{
		OutputState: o.OutputState,
	}
}

// Token claim type.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Token claim value.
func (o ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim)(nil)).Elem()
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput) ToContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput() ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput) ToContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutputWithContext(ctx context.Context) ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput {
	return o
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim] {
	return pulumix.Output[[]ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim]{
		OutputState: o.OutputState,
	}
}

func (o ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput) Index(i pulumi.IntInput) ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim {
		return vs[0].([]ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaim)[vs[1].(int)]
	}).(ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput)
}

type JobInputAsset struct {
	// A label that is assigned to a JobInputClip, that is used to satisfy a reference used in the Transform. For example, a Transform can be authored so as to take an image file with the label 'xyz' and apply it as an overlay onto the input video before it is encoded. When submitting a Job, exactly one of the JobInputs should be the image file, and it should have the label 'xyz'. Changing this forces a new resource to be created.
	Label *string `pulumi:"label"`
	// The name of the input Asset. Changing this forces a new Media Job to be created.
	Name string `pulumi:"name"`
}

// JobInputAssetInput is an input type that accepts JobInputAssetArgs and JobInputAssetOutput values.
// You can construct a concrete instance of `JobInputAssetInput` via:
//
//	JobInputAssetArgs{...}
type JobInputAssetInput interface {
	pulumi.Input

	ToJobInputAssetOutput() JobInputAssetOutput
	ToJobInputAssetOutputWithContext(context.Context) JobInputAssetOutput
}

type JobInputAssetArgs struct {
	// A label that is assigned to a JobInputClip, that is used to satisfy a reference used in the Transform. For example, a Transform can be authored so as to take an image file with the label 'xyz' and apply it as an overlay onto the input video before it is encoded. When submitting a Job, exactly one of the JobInputs should be the image file, and it should have the label 'xyz'. Changing this forces a new resource to be created.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// The name of the input Asset. Changing this forces a new Media Job to be created.
	Name pulumi.StringInput `pulumi:"name"`
}

func (JobInputAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobInputAsset)(nil)).Elem()
}

func (i JobInputAssetArgs) ToJobInputAssetOutput() JobInputAssetOutput {
	return i.ToJobInputAssetOutputWithContext(context.Background())
}

func (i JobInputAssetArgs) ToJobInputAssetOutputWithContext(ctx context.Context) JobInputAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobInputAssetOutput)
}

func (i JobInputAssetArgs) ToOutput(ctx context.Context) pulumix.Output[JobInputAsset] {
	return pulumix.Output[JobInputAsset]{
		OutputState: i.ToJobInputAssetOutputWithContext(ctx).OutputState,
	}
}

func (i JobInputAssetArgs) ToJobInputAssetPtrOutput() JobInputAssetPtrOutput {
	return i.ToJobInputAssetPtrOutputWithContext(context.Background())
}

func (i JobInputAssetArgs) ToJobInputAssetPtrOutputWithContext(ctx context.Context) JobInputAssetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobInputAssetOutput).ToJobInputAssetPtrOutputWithContext(ctx)
}

// JobInputAssetPtrInput is an input type that accepts JobInputAssetArgs, JobInputAssetPtr and JobInputAssetPtrOutput values.
// You can construct a concrete instance of `JobInputAssetPtrInput` via:
//
//	        JobInputAssetArgs{...}
//
//	or:
//
//	        nil
type JobInputAssetPtrInput interface {
	pulumi.Input

	ToJobInputAssetPtrOutput() JobInputAssetPtrOutput
	ToJobInputAssetPtrOutputWithContext(context.Context) JobInputAssetPtrOutput
}

type jobInputAssetPtrType JobInputAssetArgs

func JobInputAssetPtr(v *JobInputAssetArgs) JobInputAssetPtrInput {
	return (*jobInputAssetPtrType)(v)
}

func (*jobInputAssetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobInputAsset)(nil)).Elem()
}

func (i *jobInputAssetPtrType) ToJobInputAssetPtrOutput() JobInputAssetPtrOutput {
	return i.ToJobInputAssetPtrOutputWithContext(context.Background())
}

func (i *jobInputAssetPtrType) ToJobInputAssetPtrOutputWithContext(ctx context.Context) JobInputAssetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobInputAssetPtrOutput)
}

func (i *jobInputAssetPtrType) ToOutput(ctx context.Context) pulumix.Output[*JobInputAsset] {
	return pulumix.Output[*JobInputAsset]{
		OutputState: i.ToJobInputAssetPtrOutputWithContext(ctx).OutputState,
	}
}

type JobInputAssetOutput struct{ *pulumi.OutputState }

func (JobInputAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobInputAsset)(nil)).Elem()
}

func (o JobInputAssetOutput) ToJobInputAssetOutput() JobInputAssetOutput {
	return o
}

func (o JobInputAssetOutput) ToJobInputAssetOutputWithContext(ctx context.Context) JobInputAssetOutput {
	return o
}

func (o JobInputAssetOutput) ToJobInputAssetPtrOutput() JobInputAssetPtrOutput {
	return o.ToJobInputAssetPtrOutputWithContext(context.Background())
}

func (o JobInputAssetOutput) ToJobInputAssetPtrOutputWithContext(ctx context.Context) JobInputAssetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobInputAsset) *JobInputAsset {
		return &v
	}).(JobInputAssetPtrOutput)
}

func (o JobInputAssetOutput) ToOutput(ctx context.Context) pulumix.Output[JobInputAsset] {
	return pulumix.Output[JobInputAsset]{
		OutputState: o.OutputState,
	}
}

// A label that is assigned to a JobInputClip, that is used to satisfy a reference used in the Transform. For example, a Transform can be authored so as to take an image file with the label 'xyz' and apply it as an overlay onto the input video before it is encoded. When submitting a Job, exactly one of the JobInputs should be the image file, and it should have the label 'xyz'. Changing this forces a new resource to be created.
func (o JobInputAssetOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobInputAsset) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// The name of the input Asset. Changing this forces a new Media Job to be created.
func (o JobInputAssetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v JobInputAsset) string { return v.Name }).(pulumi.StringOutput)
}

type JobInputAssetPtrOutput struct{ *pulumi.OutputState }

func (JobInputAssetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobInputAsset)(nil)).Elem()
}

func (o JobInputAssetPtrOutput) ToJobInputAssetPtrOutput() JobInputAssetPtrOutput {
	return o
}

func (o JobInputAssetPtrOutput) ToJobInputAssetPtrOutputWithContext(ctx context.Context) JobInputAssetPtrOutput {
	return o
}

func (o JobInputAssetPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*JobInputAsset] {
	return pulumix.Output[*JobInputAsset]{
		OutputState: o.OutputState,
	}
}

func (o JobInputAssetPtrOutput) Elem() JobInputAssetOutput {
	return o.ApplyT(func(v *JobInputAsset) JobInputAsset {
		if v != nil {
			return *v
		}
		var ret JobInputAsset
		return ret
	}).(JobInputAssetOutput)
}

// A label that is assigned to a JobInputClip, that is used to satisfy a reference used in the Transform. For example, a Transform can be authored so as to take an image file with the label 'xyz' and apply it as an overlay onto the input video before it is encoded. When submitting a Job, exactly one of the JobInputs should be the image file, and it should have the label 'xyz'. Changing this forces a new resource to be created.
func (o JobInputAssetPtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobInputAsset) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

// The name of the input Asset. Changing this forces a new Media Job to be created.
func (o JobInputAssetPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobInputAsset) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

type JobOutputAsset struct {
	// A label that is assigned to a JobOutput in order to help uniquely identify it. This is useful when your Transform has more than one TransformOutput, whereby your Job has more than one JobOutput. In such cases, when you submit the Job, you will add two or more JobOutputs, in the same order as TransformOutputs in the Transform. Subsequently, when you retrieve the Job, either through events or on a GET request, you can use the label to easily identify the JobOutput. If a label is not provided, a default value of '{presetName}_{outputIndex}' will be used, where the preset name is the name of the preset in the corresponding TransformOutput and the output index is the relative index of the this JobOutput within the Job. Note that this index is the same as the relative index of the corresponding TransformOutput within its Transform. Changing this forces a new resource to be created.
	Label *string `pulumi:"label"`
	// The name of the output Asset. Changing this forces a new Media Job to be created.
	Name string `pulumi:"name"`
}

// JobOutputAssetInput is an input type that accepts JobOutputAssetArgs and JobOutputAssetOutput values.
// You can construct a concrete instance of `JobOutputAssetInput` via:
//
//	JobOutputAssetArgs{...}
type JobOutputAssetInput interface {
	pulumi.Input

	ToJobOutputAssetOutput() JobOutputAssetOutput
	ToJobOutputAssetOutputWithContext(context.Context) JobOutputAssetOutput
}

type JobOutputAssetArgs struct {
	// A label that is assigned to a JobOutput in order to help uniquely identify it. This is useful when your Transform has more than one TransformOutput, whereby your Job has more than one JobOutput. In such cases, when you submit the Job, you will add two or more JobOutputs, in the same order as TransformOutputs in the Transform. Subsequently, when you retrieve the Job, either through events or on a GET request, you can use the label to easily identify the JobOutput. If a label is not provided, a default value of '{presetName}_{outputIndex}' will be used, where the preset name is the name of the preset in the corresponding TransformOutput and the output index is the relative index of the this JobOutput within the Job. Note that this index is the same as the relative index of the corresponding TransformOutput within its Transform. Changing this forces a new resource to be created.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// The name of the output Asset. Changing this forces a new Media Job to be created.
	Name pulumi.StringInput `pulumi:"name"`
}

func (JobOutputAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobOutputAsset)(nil)).Elem()
}

func (i JobOutputAssetArgs) ToJobOutputAssetOutput() JobOutputAssetOutput {
	return i.ToJobOutputAssetOutputWithContext(context.Background())
}

func (i JobOutputAssetArgs) ToJobOutputAssetOutputWithContext(ctx context.Context) JobOutputAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutputAssetOutput)
}

func (i JobOutputAssetArgs) ToOutput(ctx context.Context) pulumix.Output[JobOutputAsset] {
	return pulumix.Output[JobOutputAsset]{
		OutputState: i.ToJobOutputAssetOutputWithContext(ctx).OutputState,
	}
}

// JobOutputAssetArrayInput is an input type that accepts JobOutputAssetArray and JobOutputAssetArrayOutput values.
// You can construct a concrete instance of `JobOutputAssetArrayInput` via:
//
//	JobOutputAssetArray{ JobOutputAssetArgs{...} }
type JobOutputAssetArrayInput interface {
	pulumi.Input

	ToJobOutputAssetArrayOutput() JobOutputAssetArrayOutput
	ToJobOutputAssetArrayOutputWithContext(context.Context) JobOutputAssetArrayOutput
}

type JobOutputAssetArray []JobOutputAssetInput

func (JobOutputAssetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobOutputAsset)(nil)).Elem()
}

func (i JobOutputAssetArray) ToJobOutputAssetArrayOutput() JobOutputAssetArrayOutput {
	return i.ToJobOutputAssetArrayOutputWithContext(context.Background())
}

func (i JobOutputAssetArray) ToJobOutputAssetArrayOutputWithContext(ctx context.Context) JobOutputAssetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutputAssetArrayOutput)
}

func (i JobOutputAssetArray) ToOutput(ctx context.Context) pulumix.Output[[]JobOutputAsset] {
	return pulumix.Output[[]JobOutputAsset]{
		OutputState: i.ToJobOutputAssetArrayOutputWithContext(ctx).OutputState,
	}
}

type JobOutputAssetOutput struct{ *pulumi.OutputState }

func (JobOutputAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobOutputAsset)(nil)).Elem()
}

func (o JobOutputAssetOutput) ToJobOutputAssetOutput() JobOutputAssetOutput {
	return o
}

func (o JobOutputAssetOutput) ToJobOutputAssetOutputWithContext(ctx context.Context) JobOutputAssetOutput {
	return o
}

func (o JobOutputAssetOutput) ToOutput(ctx context.Context) pulumix.Output[JobOutputAsset] {
	return pulumix.Output[JobOutputAsset]{
		OutputState: o.OutputState,
	}
}

// A label that is assigned to a JobOutput in order to help uniquely identify it. This is useful when your Transform has more than one TransformOutput, whereby your Job has more than one JobOutput. In such cases, when you submit the Job, you will add two or more JobOutputs, in the same order as TransformOutputs in the Transform. Subsequently, when you retrieve the Job, either through events or on a GET request, you can use the label to easily identify the JobOutput. If a label is not provided, a default value of '{presetName}_{outputIndex}' will be used, where the preset name is the name of the preset in the corresponding TransformOutput and the output index is the relative index of the this JobOutput within the Job. Note that this index is the same as the relative index of the corresponding TransformOutput within its Transform. Changing this forces a new resource to be created.
func (o JobOutputAssetOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobOutputAsset) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// The name of the output Asset. Changing this forces a new Media Job to be created.
func (o JobOutputAssetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v JobOutputAsset) string { return v.Name }).(pulumi.StringOutput)
}

type JobOutputAssetArrayOutput struct{ *pulumi.OutputState }

func (JobOutputAssetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobOutputAsset)(nil)).Elem()
}

func (o JobOutputAssetArrayOutput) ToJobOutputAssetArrayOutput() JobOutputAssetArrayOutput {
	return o
}

func (o JobOutputAssetArrayOutput) ToJobOutputAssetArrayOutputWithContext(ctx context.Context) JobOutputAssetArrayOutput {
	return o
}

func (o JobOutputAssetArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]JobOutputAsset] {
	return pulumix.Output[[]JobOutputAsset]{
		OutputState: o.OutputState,
	}
}

func (o JobOutputAssetArrayOutput) Index(i pulumi.IntInput) JobOutputAssetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobOutputAsset {
		return vs[0].([]JobOutputAsset)[vs[1].(int)]
	}).(JobOutputAssetOutput)
}

type LiveEventCrossSiteAccessPolicy struct {
	// The content of clientaccesspolicy.xml used by Silverlight.
	ClientAccessPolicy *string `pulumi:"clientAccessPolicy"`
	// The content of the Cross Domain Policy (`crossdomain.xml`).
	CrossDomainPolicy *string `pulumi:"crossDomainPolicy"`
}

// LiveEventCrossSiteAccessPolicyInput is an input type that accepts LiveEventCrossSiteAccessPolicyArgs and LiveEventCrossSiteAccessPolicyOutput values.
// You can construct a concrete instance of `LiveEventCrossSiteAccessPolicyInput` via:
//
//	LiveEventCrossSiteAccessPolicyArgs{...}
type LiveEventCrossSiteAccessPolicyInput interface {
	pulumi.Input

	ToLiveEventCrossSiteAccessPolicyOutput() LiveEventCrossSiteAccessPolicyOutput
	ToLiveEventCrossSiteAccessPolicyOutputWithContext(context.Context) LiveEventCrossSiteAccessPolicyOutput
}

type LiveEventCrossSiteAccessPolicyArgs struct {
	// The content of clientaccesspolicy.xml used by Silverlight.
	ClientAccessPolicy pulumi.StringPtrInput `pulumi:"clientAccessPolicy"`
	// The content of the Cross Domain Policy (`crossdomain.xml`).
	CrossDomainPolicy pulumi.StringPtrInput `pulumi:"crossDomainPolicy"`
}

func (LiveEventCrossSiteAccessPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventCrossSiteAccessPolicy)(nil)).Elem()
}

func (i LiveEventCrossSiteAccessPolicyArgs) ToLiveEventCrossSiteAccessPolicyOutput() LiveEventCrossSiteAccessPolicyOutput {
	return i.ToLiveEventCrossSiteAccessPolicyOutputWithContext(context.Background())
}

func (i LiveEventCrossSiteAccessPolicyArgs) ToLiveEventCrossSiteAccessPolicyOutputWithContext(ctx context.Context) LiveEventCrossSiteAccessPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventCrossSiteAccessPolicyOutput)
}

func (i LiveEventCrossSiteAccessPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[LiveEventCrossSiteAccessPolicy] {
	return pulumix.Output[LiveEventCrossSiteAccessPolicy]{
		OutputState: i.ToLiveEventCrossSiteAccessPolicyOutputWithContext(ctx).OutputState,
	}
}

func (i LiveEventCrossSiteAccessPolicyArgs) ToLiveEventCrossSiteAccessPolicyPtrOutput() LiveEventCrossSiteAccessPolicyPtrOutput {
	return i.ToLiveEventCrossSiteAccessPolicyPtrOutputWithContext(context.Background())
}

func (i LiveEventCrossSiteAccessPolicyArgs) ToLiveEventCrossSiteAccessPolicyPtrOutputWithContext(ctx context.Context) LiveEventCrossSiteAccessPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventCrossSiteAccessPolicyOutput).ToLiveEventCrossSiteAccessPolicyPtrOutputWithContext(ctx)
}

// LiveEventCrossSiteAccessPolicyPtrInput is an input type that accepts LiveEventCrossSiteAccessPolicyArgs, LiveEventCrossSiteAccessPolicyPtr and LiveEventCrossSiteAccessPolicyPtrOutput values.
// You can construct a concrete instance of `LiveEventCrossSiteAccessPolicyPtrInput` via:
//
//	        LiveEventCrossSiteAccessPolicyArgs{...}
//
//	or:
//
//	        nil
type LiveEventCrossSiteAccessPolicyPtrInput interface {
	pulumi.Input

	ToLiveEventCrossSiteAccessPolicyPtrOutput() LiveEventCrossSiteAccessPolicyPtrOutput
	ToLiveEventCrossSiteAccessPolicyPtrOutputWithContext(context.Context) LiveEventCrossSiteAccessPolicyPtrOutput
}

type liveEventCrossSiteAccessPolicyPtrType LiveEventCrossSiteAccessPolicyArgs

func LiveEventCrossSiteAccessPolicyPtr(v *LiveEventCrossSiteAccessPolicyArgs) LiveEventCrossSiteAccessPolicyPtrInput {
	return (*liveEventCrossSiteAccessPolicyPtrType)(v)
}

func (*liveEventCrossSiteAccessPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventCrossSiteAccessPolicy)(nil)).Elem()
}

func (i *liveEventCrossSiteAccessPolicyPtrType) ToLiveEventCrossSiteAccessPolicyPtrOutput() LiveEventCrossSiteAccessPolicyPtrOutput {
	return i.ToLiveEventCrossSiteAccessPolicyPtrOutputWithContext(context.Background())
}

func (i *liveEventCrossSiteAccessPolicyPtrType) ToLiveEventCrossSiteAccessPolicyPtrOutputWithContext(ctx context.Context) LiveEventCrossSiteAccessPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventCrossSiteAccessPolicyPtrOutput)
}

func (i *liveEventCrossSiteAccessPolicyPtrType) ToOutput(ctx context.Context) pulumix.Output[*LiveEventCrossSiteAccessPolicy] {
	return pulumix.Output[*LiveEventCrossSiteAccessPolicy]{
		OutputState: i.ToLiveEventCrossSiteAccessPolicyPtrOutputWithContext(ctx).OutputState,
	}
}

type LiveEventCrossSiteAccessPolicyOutput struct{ *pulumi.OutputState }

func (LiveEventCrossSiteAccessPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventCrossSiteAccessPolicy)(nil)).Elem()
}

func (o LiveEventCrossSiteAccessPolicyOutput) ToLiveEventCrossSiteAccessPolicyOutput() LiveEventCrossSiteAccessPolicyOutput {
	return o
}

func (o LiveEventCrossSiteAccessPolicyOutput) ToLiveEventCrossSiteAccessPolicyOutputWithContext(ctx context.Context) LiveEventCrossSiteAccessPolicyOutput {
	return o
}

func (o LiveEventCrossSiteAccessPolicyOutput) ToLiveEventCrossSiteAccessPolicyPtrOutput() LiveEventCrossSiteAccessPolicyPtrOutput {
	return o.ToLiveEventCrossSiteAccessPolicyPtrOutputWithContext(context.Background())
}

func (o LiveEventCrossSiteAccessPolicyOutput) ToLiveEventCrossSiteAccessPolicyPtrOutputWithContext(ctx context.Context) LiveEventCrossSiteAccessPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LiveEventCrossSiteAccessPolicy) *LiveEventCrossSiteAccessPolicy {
		return &v
	}).(LiveEventCrossSiteAccessPolicyPtrOutput)
}

func (o LiveEventCrossSiteAccessPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventCrossSiteAccessPolicy] {
	return pulumix.Output[LiveEventCrossSiteAccessPolicy]{
		OutputState: o.OutputState,
	}
}

// The content of clientaccesspolicy.xml used by Silverlight.
func (o LiveEventCrossSiteAccessPolicyOutput) ClientAccessPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventCrossSiteAccessPolicy) *string { return v.ClientAccessPolicy }).(pulumi.StringPtrOutput)
}

// The content of the Cross Domain Policy (`crossdomain.xml`).
func (o LiveEventCrossSiteAccessPolicyOutput) CrossDomainPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventCrossSiteAccessPolicy) *string { return v.CrossDomainPolicy }).(pulumi.StringPtrOutput)
}

type LiveEventCrossSiteAccessPolicyPtrOutput struct{ *pulumi.OutputState }

func (LiveEventCrossSiteAccessPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventCrossSiteAccessPolicy)(nil)).Elem()
}

func (o LiveEventCrossSiteAccessPolicyPtrOutput) ToLiveEventCrossSiteAccessPolicyPtrOutput() LiveEventCrossSiteAccessPolicyPtrOutput {
	return o
}

func (o LiveEventCrossSiteAccessPolicyPtrOutput) ToLiveEventCrossSiteAccessPolicyPtrOutputWithContext(ctx context.Context) LiveEventCrossSiteAccessPolicyPtrOutput {
	return o
}

func (o LiveEventCrossSiteAccessPolicyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LiveEventCrossSiteAccessPolicy] {
	return pulumix.Output[*LiveEventCrossSiteAccessPolicy]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventCrossSiteAccessPolicyPtrOutput) Elem() LiveEventCrossSiteAccessPolicyOutput {
	return o.ApplyT(func(v *LiveEventCrossSiteAccessPolicy) LiveEventCrossSiteAccessPolicy {
		if v != nil {
			return *v
		}
		var ret LiveEventCrossSiteAccessPolicy
		return ret
	}).(LiveEventCrossSiteAccessPolicyOutput)
}

// The content of clientaccesspolicy.xml used by Silverlight.
func (o LiveEventCrossSiteAccessPolicyPtrOutput) ClientAccessPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventCrossSiteAccessPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ClientAccessPolicy
	}).(pulumi.StringPtrOutput)
}

// The content of the Cross Domain Policy (`crossdomain.xml`).
func (o LiveEventCrossSiteAccessPolicyPtrOutput) CrossDomainPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventCrossSiteAccessPolicy) *string {
		if v == nil {
			return nil
		}
		return v.CrossDomainPolicy
	}).(pulumi.StringPtrOutput)
}

type LiveEventEncoding struct {
	// Use an `ISO 8601` time value between 0.5 to 20 seconds to specify the output fragment length for the video and audio tracks of an encoding live event. For example, use `PT2S` to indicate 2 seconds. For the video track it also defines the key frame interval, or the length of a GoP (group of pictures). The value cannot be set for pass-through live events. Defaults to `PT2S`.
	KeyFrameInterval *string `pulumi:"keyFrameInterval"`
	// The optional encoding preset name, used when `type` is not `None`. If the `type` is set to `Standard`, then the default preset name is `Default720p`. Else if the `type` is set to `Premium1080p`, Changing this forces a new resource to be created.
	PresetName *string `pulumi:"presetName"`
	// Specifies how the input video will be resized to fit the desired output resolution(s). Allowed values are `None`, `AutoFit` or `AutoSize`. Default is `None`.
	StretchMode *string `pulumi:"stretchMode"`
	// Live event type. Possible values are `None`, `Premium1080p`, `PassthroughBasic`, `PassthroughStandard` and `Standard`. When set to `None`, the service simply passes through the incoming video and audio layer(s) to the output. When `type` is set to `Standard` or `Premium1080p`, a live encoder transcodes the incoming stream into multiple bitrates or layers. Defaults to `None`. Changing this forces a new resource to be created.
	//
	// > [More information can be found in the Microsoft Documentation](https://go.microsoft.com/fwlink/?linkid=2095101).
	Type *string `pulumi:"type"`
}

// LiveEventEncodingInput is an input type that accepts LiveEventEncodingArgs and LiveEventEncodingOutput values.
// You can construct a concrete instance of `LiveEventEncodingInput` via:
//
//	LiveEventEncodingArgs{...}
type LiveEventEncodingInput interface {
	pulumi.Input

	ToLiveEventEncodingOutput() LiveEventEncodingOutput
	ToLiveEventEncodingOutputWithContext(context.Context) LiveEventEncodingOutput
}

type LiveEventEncodingArgs struct {
	// Use an `ISO 8601` time value between 0.5 to 20 seconds to specify the output fragment length for the video and audio tracks of an encoding live event. For example, use `PT2S` to indicate 2 seconds. For the video track it also defines the key frame interval, or the length of a GoP (group of pictures). The value cannot be set for pass-through live events. Defaults to `PT2S`.
	KeyFrameInterval pulumi.StringPtrInput `pulumi:"keyFrameInterval"`
	// The optional encoding preset name, used when `type` is not `None`. If the `type` is set to `Standard`, then the default preset name is `Default720p`. Else if the `type` is set to `Premium1080p`, Changing this forces a new resource to be created.
	PresetName pulumi.StringPtrInput `pulumi:"presetName"`
	// Specifies how the input video will be resized to fit the desired output resolution(s). Allowed values are `None`, `AutoFit` or `AutoSize`. Default is `None`.
	StretchMode pulumi.StringPtrInput `pulumi:"stretchMode"`
	// Live event type. Possible values are `None`, `Premium1080p`, `PassthroughBasic`, `PassthroughStandard` and `Standard`. When set to `None`, the service simply passes through the incoming video and audio layer(s) to the output. When `type` is set to `Standard` or `Premium1080p`, a live encoder transcodes the incoming stream into multiple bitrates or layers. Defaults to `None`. Changing this forces a new resource to be created.
	//
	// > [More information can be found in the Microsoft Documentation](https://go.microsoft.com/fwlink/?linkid=2095101).
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (LiveEventEncodingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventEncoding)(nil)).Elem()
}

func (i LiveEventEncodingArgs) ToLiveEventEncodingOutput() LiveEventEncodingOutput {
	return i.ToLiveEventEncodingOutputWithContext(context.Background())
}

func (i LiveEventEncodingArgs) ToLiveEventEncodingOutputWithContext(ctx context.Context) LiveEventEncodingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventEncodingOutput)
}

func (i LiveEventEncodingArgs) ToOutput(ctx context.Context) pulumix.Output[LiveEventEncoding] {
	return pulumix.Output[LiveEventEncoding]{
		OutputState: i.ToLiveEventEncodingOutputWithContext(ctx).OutputState,
	}
}

func (i LiveEventEncodingArgs) ToLiveEventEncodingPtrOutput() LiveEventEncodingPtrOutput {
	return i.ToLiveEventEncodingPtrOutputWithContext(context.Background())
}

func (i LiveEventEncodingArgs) ToLiveEventEncodingPtrOutputWithContext(ctx context.Context) LiveEventEncodingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventEncodingOutput).ToLiveEventEncodingPtrOutputWithContext(ctx)
}

// LiveEventEncodingPtrInput is an input type that accepts LiveEventEncodingArgs, LiveEventEncodingPtr and LiveEventEncodingPtrOutput values.
// You can construct a concrete instance of `LiveEventEncodingPtrInput` via:
//
//	        LiveEventEncodingArgs{...}
//
//	or:
//
//	        nil
type LiveEventEncodingPtrInput interface {
	pulumi.Input

	ToLiveEventEncodingPtrOutput() LiveEventEncodingPtrOutput
	ToLiveEventEncodingPtrOutputWithContext(context.Context) LiveEventEncodingPtrOutput
}

type liveEventEncodingPtrType LiveEventEncodingArgs

func LiveEventEncodingPtr(v *LiveEventEncodingArgs) LiveEventEncodingPtrInput {
	return (*liveEventEncodingPtrType)(v)
}

func (*liveEventEncodingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventEncoding)(nil)).Elem()
}

func (i *liveEventEncodingPtrType) ToLiveEventEncodingPtrOutput() LiveEventEncodingPtrOutput {
	return i.ToLiveEventEncodingPtrOutputWithContext(context.Background())
}

func (i *liveEventEncodingPtrType) ToLiveEventEncodingPtrOutputWithContext(ctx context.Context) LiveEventEncodingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventEncodingPtrOutput)
}

func (i *liveEventEncodingPtrType) ToOutput(ctx context.Context) pulumix.Output[*LiveEventEncoding] {
	return pulumix.Output[*LiveEventEncoding]{
		OutputState: i.ToLiveEventEncodingPtrOutputWithContext(ctx).OutputState,
	}
}

type LiveEventEncodingOutput struct{ *pulumi.OutputState }

func (LiveEventEncodingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventEncoding)(nil)).Elem()
}

func (o LiveEventEncodingOutput) ToLiveEventEncodingOutput() LiveEventEncodingOutput {
	return o
}

func (o LiveEventEncodingOutput) ToLiveEventEncodingOutputWithContext(ctx context.Context) LiveEventEncodingOutput {
	return o
}

func (o LiveEventEncodingOutput) ToLiveEventEncodingPtrOutput() LiveEventEncodingPtrOutput {
	return o.ToLiveEventEncodingPtrOutputWithContext(context.Background())
}

func (o LiveEventEncodingOutput) ToLiveEventEncodingPtrOutputWithContext(ctx context.Context) LiveEventEncodingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LiveEventEncoding) *LiveEventEncoding {
		return &v
	}).(LiveEventEncodingPtrOutput)
}

func (o LiveEventEncodingOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventEncoding] {
	return pulumix.Output[LiveEventEncoding]{
		OutputState: o.OutputState,
	}
}

// Use an `ISO 8601` time value between 0.5 to 20 seconds to specify the output fragment length for the video and audio tracks of an encoding live event. For example, use `PT2S` to indicate 2 seconds. For the video track it also defines the key frame interval, or the length of a GoP (group of pictures). The value cannot be set for pass-through live events. Defaults to `PT2S`.
func (o LiveEventEncodingOutput) KeyFrameInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEncoding) *string { return v.KeyFrameInterval }).(pulumi.StringPtrOutput)
}

// The optional encoding preset name, used when `type` is not `None`. If the `type` is set to `Standard`, then the default preset name is `Default720p`. Else if the `type` is set to `Premium1080p`, Changing this forces a new resource to be created.
func (o LiveEventEncodingOutput) PresetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEncoding) *string { return v.PresetName }).(pulumi.StringPtrOutput)
}

// Specifies how the input video will be resized to fit the desired output resolution(s). Allowed values are `None`, `AutoFit` or `AutoSize`. Default is `None`.
func (o LiveEventEncodingOutput) StretchMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEncoding) *string { return v.StretchMode }).(pulumi.StringPtrOutput)
}

// Live event type. Possible values are `None`, `Premium1080p`, `PassthroughBasic`, `PassthroughStandard` and `Standard`. When set to `None`, the service simply passes through the incoming video and audio layer(s) to the output. When `type` is set to `Standard` or `Premium1080p`, a live encoder transcodes the incoming stream into multiple bitrates or layers. Defaults to `None`. Changing this forces a new resource to be created.
//
// > [More information can be found in the Microsoft Documentation](https://go.microsoft.com/fwlink/?linkid=2095101).
func (o LiveEventEncodingOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEncoding) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type LiveEventEncodingPtrOutput struct{ *pulumi.OutputState }

func (LiveEventEncodingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventEncoding)(nil)).Elem()
}

func (o LiveEventEncodingPtrOutput) ToLiveEventEncodingPtrOutput() LiveEventEncodingPtrOutput {
	return o
}

func (o LiveEventEncodingPtrOutput) ToLiveEventEncodingPtrOutputWithContext(ctx context.Context) LiveEventEncodingPtrOutput {
	return o
}

func (o LiveEventEncodingPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LiveEventEncoding] {
	return pulumix.Output[*LiveEventEncoding]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventEncodingPtrOutput) Elem() LiveEventEncodingOutput {
	return o.ApplyT(func(v *LiveEventEncoding) LiveEventEncoding {
		if v != nil {
			return *v
		}
		var ret LiveEventEncoding
		return ret
	}).(LiveEventEncodingOutput)
}

// Use an `ISO 8601` time value between 0.5 to 20 seconds to specify the output fragment length for the video and audio tracks of an encoding live event. For example, use `PT2S` to indicate 2 seconds. For the video track it also defines the key frame interval, or the length of a GoP (group of pictures). The value cannot be set for pass-through live events. Defaults to `PT2S`.
func (o LiveEventEncodingPtrOutput) KeyFrameInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventEncoding) *string {
		if v == nil {
			return nil
		}
		return v.KeyFrameInterval
	}).(pulumi.StringPtrOutput)
}

// The optional encoding preset name, used when `type` is not `None`. If the `type` is set to `Standard`, then the default preset name is `Default720p`. Else if the `type` is set to `Premium1080p`, Changing this forces a new resource to be created.
func (o LiveEventEncodingPtrOutput) PresetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventEncoding) *string {
		if v == nil {
			return nil
		}
		return v.PresetName
	}).(pulumi.StringPtrOutput)
}

// Specifies how the input video will be resized to fit the desired output resolution(s). Allowed values are `None`, `AutoFit` or `AutoSize`. Default is `None`.
func (o LiveEventEncodingPtrOutput) StretchMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventEncoding) *string {
		if v == nil {
			return nil
		}
		return v.StretchMode
	}).(pulumi.StringPtrOutput)
}

// Live event type. Possible values are `None`, `Premium1080p`, `PassthroughBasic`, `PassthroughStandard` and `Standard`. When set to `None`, the service simply passes through the incoming video and audio layer(s) to the output. When `type` is set to `Standard` or `Premium1080p`, a live encoder transcodes the incoming stream into multiple bitrates or layers. Defaults to `None`. Changing this forces a new resource to be created.
//
// > [More information can be found in the Microsoft Documentation](https://go.microsoft.com/fwlink/?linkid=2095101).
func (o LiveEventEncodingPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventEncoding) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type LiveEventInputType struct {
	// A UUID in string form to uniquely identify the stream. If omitted, the service will generate a unique value. Changing this forces a new value to be created.
	AccessToken *string                  `pulumi:"accessToken"`
	Endpoints   []LiveEventInputEndpoint `pulumi:"endpoints"`
	// One or more `ipAccessControlAllow` blocks as defined below.
	IpAccessControlAllows []LiveEventInputIpAccessControlAllow `pulumi:"ipAccessControlAllows"`
	// ISO 8601 time duration of the key frame interval duration of the input. This value sets the `EXT-X-TARGETDURATION` property in the HLS output. For example, use PT2S to indicate 2 seconds. This field cannot be set when `type` is set to `Encoding`.
	KeyFrameIntervalDuration *string `pulumi:"keyFrameIntervalDuration"`
	// The input protocol for the live event. Allowed values are `FragmentedMP4` and `RTMP`. Changing this forces a new resource to be created.
	StreamingProtocol *string `pulumi:"streamingProtocol"`
}

// LiveEventInputTypeInput is an input type that accepts LiveEventInputTypeArgs and LiveEventInputTypeOutput values.
// You can construct a concrete instance of `LiveEventInputTypeInput` via:
//
//	LiveEventInputTypeArgs{...}
type LiveEventInputTypeInput interface {
	pulumi.Input

	ToLiveEventInputTypeOutput() LiveEventInputTypeOutput
	ToLiveEventInputTypeOutputWithContext(context.Context) LiveEventInputTypeOutput
}

type LiveEventInputTypeArgs struct {
	// A UUID in string form to uniquely identify the stream. If omitted, the service will generate a unique value. Changing this forces a new value to be created.
	AccessToken pulumi.StringPtrInput            `pulumi:"accessToken"`
	Endpoints   LiveEventInputEndpointArrayInput `pulumi:"endpoints"`
	// One or more `ipAccessControlAllow` blocks as defined below.
	IpAccessControlAllows LiveEventInputIpAccessControlAllowArrayInput `pulumi:"ipAccessControlAllows"`
	// ISO 8601 time duration of the key frame interval duration of the input. This value sets the `EXT-X-TARGETDURATION` property in the HLS output. For example, use PT2S to indicate 2 seconds. This field cannot be set when `type` is set to `Encoding`.
	KeyFrameIntervalDuration pulumi.StringPtrInput `pulumi:"keyFrameIntervalDuration"`
	// The input protocol for the live event. Allowed values are `FragmentedMP4` and `RTMP`. Changing this forces a new resource to be created.
	StreamingProtocol pulumi.StringPtrInput `pulumi:"streamingProtocol"`
}

func (LiveEventInputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInputType)(nil)).Elem()
}

func (i LiveEventInputTypeArgs) ToLiveEventInputTypeOutput() LiveEventInputTypeOutput {
	return i.ToLiveEventInputTypeOutputWithContext(context.Background())
}

func (i LiveEventInputTypeArgs) ToLiveEventInputTypeOutputWithContext(ctx context.Context) LiveEventInputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputTypeOutput)
}

func (i LiveEventInputTypeArgs) ToOutput(ctx context.Context) pulumix.Output[LiveEventInputType] {
	return pulumix.Output[LiveEventInputType]{
		OutputState: i.ToLiveEventInputTypeOutputWithContext(ctx).OutputState,
	}
}

func (i LiveEventInputTypeArgs) ToLiveEventInputTypePtrOutput() LiveEventInputTypePtrOutput {
	return i.ToLiveEventInputTypePtrOutputWithContext(context.Background())
}

func (i LiveEventInputTypeArgs) ToLiveEventInputTypePtrOutputWithContext(ctx context.Context) LiveEventInputTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputTypeOutput).ToLiveEventInputTypePtrOutputWithContext(ctx)
}

// LiveEventInputTypePtrInput is an input type that accepts LiveEventInputTypeArgs, LiveEventInputTypePtr and LiveEventInputTypePtrOutput values.
// You can construct a concrete instance of `LiveEventInputTypePtrInput` via:
//
//	        LiveEventInputTypeArgs{...}
//
//	or:
//
//	        nil
type LiveEventInputTypePtrInput interface {
	pulumi.Input

	ToLiveEventInputTypePtrOutput() LiveEventInputTypePtrOutput
	ToLiveEventInputTypePtrOutputWithContext(context.Context) LiveEventInputTypePtrOutput
}

type liveEventInputTypePtrType LiveEventInputTypeArgs

func LiveEventInputTypePtr(v *LiveEventInputTypeArgs) LiveEventInputTypePtrInput {
	return (*liveEventInputTypePtrType)(v)
}

func (*liveEventInputTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventInputType)(nil)).Elem()
}

func (i *liveEventInputTypePtrType) ToLiveEventInputTypePtrOutput() LiveEventInputTypePtrOutput {
	return i.ToLiveEventInputTypePtrOutputWithContext(context.Background())
}

func (i *liveEventInputTypePtrType) ToLiveEventInputTypePtrOutputWithContext(ctx context.Context) LiveEventInputTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputTypePtrOutput)
}

func (i *liveEventInputTypePtrType) ToOutput(ctx context.Context) pulumix.Output[*LiveEventInputType] {
	return pulumix.Output[*LiveEventInputType]{
		OutputState: i.ToLiveEventInputTypePtrOutputWithContext(ctx).OutputState,
	}
}

type LiveEventInputTypeOutput struct{ *pulumi.OutputState }

func (LiveEventInputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInputType)(nil)).Elem()
}

func (o LiveEventInputTypeOutput) ToLiveEventInputTypeOutput() LiveEventInputTypeOutput {
	return o
}

func (o LiveEventInputTypeOutput) ToLiveEventInputTypeOutputWithContext(ctx context.Context) LiveEventInputTypeOutput {
	return o
}

func (o LiveEventInputTypeOutput) ToLiveEventInputTypePtrOutput() LiveEventInputTypePtrOutput {
	return o.ToLiveEventInputTypePtrOutputWithContext(context.Background())
}

func (o LiveEventInputTypeOutput) ToLiveEventInputTypePtrOutputWithContext(ctx context.Context) LiveEventInputTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LiveEventInputType) *LiveEventInputType {
		return &v
	}).(LiveEventInputTypePtrOutput)
}

func (o LiveEventInputTypeOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventInputType] {
	return pulumix.Output[LiveEventInputType]{
		OutputState: o.OutputState,
	}
}

// A UUID in string form to uniquely identify the stream. If omitted, the service will generate a unique value. Changing this forces a new value to be created.
func (o LiveEventInputTypeOutput) AccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventInputType) *string { return v.AccessToken }).(pulumi.StringPtrOutput)
}

func (o LiveEventInputTypeOutput) Endpoints() LiveEventInputEndpointArrayOutput {
	return o.ApplyT(func(v LiveEventInputType) []LiveEventInputEndpoint { return v.Endpoints }).(LiveEventInputEndpointArrayOutput)
}

// One or more `ipAccessControlAllow` blocks as defined below.
func (o LiveEventInputTypeOutput) IpAccessControlAllows() LiveEventInputIpAccessControlAllowArrayOutput {
	return o.ApplyT(func(v LiveEventInputType) []LiveEventInputIpAccessControlAllow { return v.IpAccessControlAllows }).(LiveEventInputIpAccessControlAllowArrayOutput)
}

// ISO 8601 time duration of the key frame interval duration of the input. This value sets the `EXT-X-TARGETDURATION` property in the HLS output. For example, use PT2S to indicate 2 seconds. This field cannot be set when `type` is set to `Encoding`.
func (o LiveEventInputTypeOutput) KeyFrameIntervalDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventInputType) *string { return v.KeyFrameIntervalDuration }).(pulumi.StringPtrOutput)
}

// The input protocol for the live event. Allowed values are `FragmentedMP4` and `RTMP`. Changing this forces a new resource to be created.
func (o LiveEventInputTypeOutput) StreamingProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventInputType) *string { return v.StreamingProtocol }).(pulumi.StringPtrOutput)
}

type LiveEventInputTypePtrOutput struct{ *pulumi.OutputState }

func (LiveEventInputTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventInputType)(nil)).Elem()
}

func (o LiveEventInputTypePtrOutput) ToLiveEventInputTypePtrOutput() LiveEventInputTypePtrOutput {
	return o
}

func (o LiveEventInputTypePtrOutput) ToLiveEventInputTypePtrOutputWithContext(ctx context.Context) LiveEventInputTypePtrOutput {
	return o
}

func (o LiveEventInputTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LiveEventInputType] {
	return pulumix.Output[*LiveEventInputType]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventInputTypePtrOutput) Elem() LiveEventInputTypeOutput {
	return o.ApplyT(func(v *LiveEventInputType) LiveEventInputType {
		if v != nil {
			return *v
		}
		var ret LiveEventInputType
		return ret
	}).(LiveEventInputTypeOutput)
}

// A UUID in string form to uniquely identify the stream. If omitted, the service will generate a unique value. Changing this forces a new value to be created.
func (o LiveEventInputTypePtrOutput) AccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventInputType) *string {
		if v == nil {
			return nil
		}
		return v.AccessToken
	}).(pulumi.StringPtrOutput)
}

func (o LiveEventInputTypePtrOutput) Endpoints() LiveEventInputEndpointArrayOutput {
	return o.ApplyT(func(v *LiveEventInputType) []LiveEventInputEndpoint {
		if v == nil {
			return nil
		}
		return v.Endpoints
	}).(LiveEventInputEndpointArrayOutput)
}

// One or more `ipAccessControlAllow` blocks as defined below.
func (o LiveEventInputTypePtrOutput) IpAccessControlAllows() LiveEventInputIpAccessControlAllowArrayOutput {
	return o.ApplyT(func(v *LiveEventInputType) []LiveEventInputIpAccessControlAllow {
		if v == nil {
			return nil
		}
		return v.IpAccessControlAllows
	}).(LiveEventInputIpAccessControlAllowArrayOutput)
}

// ISO 8601 time duration of the key frame interval duration of the input. This value sets the `EXT-X-TARGETDURATION` property in the HLS output. For example, use PT2S to indicate 2 seconds. This field cannot be set when `type` is set to `Encoding`.
func (o LiveEventInputTypePtrOutput) KeyFrameIntervalDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventInputType) *string {
		if v == nil {
			return nil
		}
		return v.KeyFrameIntervalDuration
	}).(pulumi.StringPtrOutput)
}

// The input protocol for the live event. Allowed values are `FragmentedMP4` and `RTMP`. Changing this forces a new resource to be created.
func (o LiveEventInputTypePtrOutput) StreamingProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventInputType) *string {
		if v == nil {
			return nil
		}
		return v.StreamingProtocol
	}).(pulumi.StringPtrOutput)
}

type LiveEventInputEndpoint struct {
	Protocol *string `pulumi:"protocol"`
	Url      *string `pulumi:"url"`
}

// LiveEventInputEndpointInput is an input type that accepts LiveEventInputEndpointArgs and LiveEventInputEndpointOutput values.
// You can construct a concrete instance of `LiveEventInputEndpointInput` via:
//
//	LiveEventInputEndpointArgs{...}
type LiveEventInputEndpointInput interface {
	pulumi.Input

	ToLiveEventInputEndpointOutput() LiveEventInputEndpointOutput
	ToLiveEventInputEndpointOutputWithContext(context.Context) LiveEventInputEndpointOutput
}

type LiveEventInputEndpointArgs struct {
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	Url      pulumi.StringPtrInput `pulumi:"url"`
}

func (LiveEventInputEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInputEndpoint)(nil)).Elem()
}

func (i LiveEventInputEndpointArgs) ToLiveEventInputEndpointOutput() LiveEventInputEndpointOutput {
	return i.ToLiveEventInputEndpointOutputWithContext(context.Background())
}

func (i LiveEventInputEndpointArgs) ToLiveEventInputEndpointOutputWithContext(ctx context.Context) LiveEventInputEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputEndpointOutput)
}

func (i LiveEventInputEndpointArgs) ToOutput(ctx context.Context) pulumix.Output[LiveEventInputEndpoint] {
	return pulumix.Output[LiveEventInputEndpoint]{
		OutputState: i.ToLiveEventInputEndpointOutputWithContext(ctx).OutputState,
	}
}

// LiveEventInputEndpointArrayInput is an input type that accepts LiveEventInputEndpointArray and LiveEventInputEndpointArrayOutput values.
// You can construct a concrete instance of `LiveEventInputEndpointArrayInput` via:
//
//	LiveEventInputEndpointArray{ LiveEventInputEndpointArgs{...} }
type LiveEventInputEndpointArrayInput interface {
	pulumi.Input

	ToLiveEventInputEndpointArrayOutput() LiveEventInputEndpointArrayOutput
	ToLiveEventInputEndpointArrayOutputWithContext(context.Context) LiveEventInputEndpointArrayOutput
}

type LiveEventInputEndpointArray []LiveEventInputEndpointInput

func (LiveEventInputEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventInputEndpoint)(nil)).Elem()
}

func (i LiveEventInputEndpointArray) ToLiveEventInputEndpointArrayOutput() LiveEventInputEndpointArrayOutput {
	return i.ToLiveEventInputEndpointArrayOutputWithContext(context.Background())
}

func (i LiveEventInputEndpointArray) ToLiveEventInputEndpointArrayOutputWithContext(ctx context.Context) LiveEventInputEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputEndpointArrayOutput)
}

func (i LiveEventInputEndpointArray) ToOutput(ctx context.Context) pulumix.Output[[]LiveEventInputEndpoint] {
	return pulumix.Output[[]LiveEventInputEndpoint]{
		OutputState: i.ToLiveEventInputEndpointArrayOutputWithContext(ctx).OutputState,
	}
}

type LiveEventInputEndpointOutput struct{ *pulumi.OutputState }

func (LiveEventInputEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInputEndpoint)(nil)).Elem()
}

func (o LiveEventInputEndpointOutput) ToLiveEventInputEndpointOutput() LiveEventInputEndpointOutput {
	return o
}

func (o LiveEventInputEndpointOutput) ToLiveEventInputEndpointOutputWithContext(ctx context.Context) LiveEventInputEndpointOutput {
	return o
}

func (o LiveEventInputEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventInputEndpoint] {
	return pulumix.Output[LiveEventInputEndpoint]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventInputEndpointOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventInputEndpoint) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

func (o LiveEventInputEndpointOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventInputEndpoint) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type LiveEventInputEndpointArrayOutput struct{ *pulumi.OutputState }

func (LiveEventInputEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventInputEndpoint)(nil)).Elem()
}

func (o LiveEventInputEndpointArrayOutput) ToLiveEventInputEndpointArrayOutput() LiveEventInputEndpointArrayOutput {
	return o
}

func (o LiveEventInputEndpointArrayOutput) ToLiveEventInputEndpointArrayOutputWithContext(ctx context.Context) LiveEventInputEndpointArrayOutput {
	return o
}

func (o LiveEventInputEndpointArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LiveEventInputEndpoint] {
	return pulumix.Output[[]LiveEventInputEndpoint]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventInputEndpointArrayOutput) Index(i pulumi.IntInput) LiveEventInputEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LiveEventInputEndpoint {
		return vs[0].([]LiveEventInputEndpoint)[vs[1].(int)]
	}).(LiveEventInputEndpointOutput)
}

type LiveEventInputIpAccessControlAllow struct {
	// The IP address or CIDR range.
	Address *string `pulumi:"address"`
	// The friendly name for the IP address range.
	Name *string `pulumi:"name"`
	// The subnet mask prefix length (see CIDR notation).
	SubnetPrefixLength *int `pulumi:"subnetPrefixLength"`
}

// LiveEventInputIpAccessControlAllowInput is an input type that accepts LiveEventInputIpAccessControlAllowArgs and LiveEventInputIpAccessControlAllowOutput values.
// You can construct a concrete instance of `LiveEventInputIpAccessControlAllowInput` via:
//
//	LiveEventInputIpAccessControlAllowArgs{...}
type LiveEventInputIpAccessControlAllowInput interface {
	pulumi.Input

	ToLiveEventInputIpAccessControlAllowOutput() LiveEventInputIpAccessControlAllowOutput
	ToLiveEventInputIpAccessControlAllowOutputWithContext(context.Context) LiveEventInputIpAccessControlAllowOutput
}

type LiveEventInputIpAccessControlAllowArgs struct {
	// The IP address or CIDR range.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The friendly name for the IP address range.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The subnet mask prefix length (see CIDR notation).
	SubnetPrefixLength pulumi.IntPtrInput `pulumi:"subnetPrefixLength"`
}

func (LiveEventInputIpAccessControlAllowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInputIpAccessControlAllow)(nil)).Elem()
}

func (i LiveEventInputIpAccessControlAllowArgs) ToLiveEventInputIpAccessControlAllowOutput() LiveEventInputIpAccessControlAllowOutput {
	return i.ToLiveEventInputIpAccessControlAllowOutputWithContext(context.Background())
}

func (i LiveEventInputIpAccessControlAllowArgs) ToLiveEventInputIpAccessControlAllowOutputWithContext(ctx context.Context) LiveEventInputIpAccessControlAllowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputIpAccessControlAllowOutput)
}

func (i LiveEventInputIpAccessControlAllowArgs) ToOutput(ctx context.Context) pulumix.Output[LiveEventInputIpAccessControlAllow] {
	return pulumix.Output[LiveEventInputIpAccessControlAllow]{
		OutputState: i.ToLiveEventInputIpAccessControlAllowOutputWithContext(ctx).OutputState,
	}
}

// LiveEventInputIpAccessControlAllowArrayInput is an input type that accepts LiveEventInputIpAccessControlAllowArray and LiveEventInputIpAccessControlAllowArrayOutput values.
// You can construct a concrete instance of `LiveEventInputIpAccessControlAllowArrayInput` via:
//
//	LiveEventInputIpAccessControlAllowArray{ LiveEventInputIpAccessControlAllowArgs{...} }
type LiveEventInputIpAccessControlAllowArrayInput interface {
	pulumi.Input

	ToLiveEventInputIpAccessControlAllowArrayOutput() LiveEventInputIpAccessControlAllowArrayOutput
	ToLiveEventInputIpAccessControlAllowArrayOutputWithContext(context.Context) LiveEventInputIpAccessControlAllowArrayOutput
}

type LiveEventInputIpAccessControlAllowArray []LiveEventInputIpAccessControlAllowInput

func (LiveEventInputIpAccessControlAllowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventInputIpAccessControlAllow)(nil)).Elem()
}

func (i LiveEventInputIpAccessControlAllowArray) ToLiveEventInputIpAccessControlAllowArrayOutput() LiveEventInputIpAccessControlAllowArrayOutput {
	return i.ToLiveEventInputIpAccessControlAllowArrayOutputWithContext(context.Background())
}

func (i LiveEventInputIpAccessControlAllowArray) ToLiveEventInputIpAccessControlAllowArrayOutputWithContext(ctx context.Context) LiveEventInputIpAccessControlAllowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputIpAccessControlAllowArrayOutput)
}

func (i LiveEventInputIpAccessControlAllowArray) ToOutput(ctx context.Context) pulumix.Output[[]LiveEventInputIpAccessControlAllow] {
	return pulumix.Output[[]LiveEventInputIpAccessControlAllow]{
		OutputState: i.ToLiveEventInputIpAccessControlAllowArrayOutputWithContext(ctx).OutputState,
	}
}

type LiveEventInputIpAccessControlAllowOutput struct{ *pulumi.OutputState }

func (LiveEventInputIpAccessControlAllowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInputIpAccessControlAllow)(nil)).Elem()
}

func (o LiveEventInputIpAccessControlAllowOutput) ToLiveEventInputIpAccessControlAllowOutput() LiveEventInputIpAccessControlAllowOutput {
	return o
}

func (o LiveEventInputIpAccessControlAllowOutput) ToLiveEventInputIpAccessControlAllowOutputWithContext(ctx context.Context) LiveEventInputIpAccessControlAllowOutput {
	return o
}

func (o LiveEventInputIpAccessControlAllowOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventInputIpAccessControlAllow] {
	return pulumix.Output[LiveEventInputIpAccessControlAllow]{
		OutputState: o.OutputState,
	}
}

// The IP address or CIDR range.
func (o LiveEventInputIpAccessControlAllowOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventInputIpAccessControlAllow) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The friendly name for the IP address range.
func (o LiveEventInputIpAccessControlAllowOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventInputIpAccessControlAllow) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The subnet mask prefix length (see CIDR notation).
func (o LiveEventInputIpAccessControlAllowOutput) SubnetPrefixLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LiveEventInputIpAccessControlAllow) *int { return v.SubnetPrefixLength }).(pulumi.IntPtrOutput)
}

type LiveEventInputIpAccessControlAllowArrayOutput struct{ *pulumi.OutputState }

func (LiveEventInputIpAccessControlAllowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventInputIpAccessControlAllow)(nil)).Elem()
}

func (o LiveEventInputIpAccessControlAllowArrayOutput) ToLiveEventInputIpAccessControlAllowArrayOutput() LiveEventInputIpAccessControlAllowArrayOutput {
	return o
}

func (o LiveEventInputIpAccessControlAllowArrayOutput) ToLiveEventInputIpAccessControlAllowArrayOutputWithContext(ctx context.Context) LiveEventInputIpAccessControlAllowArrayOutput {
	return o
}

func (o LiveEventInputIpAccessControlAllowArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LiveEventInputIpAccessControlAllow] {
	return pulumix.Output[[]LiveEventInputIpAccessControlAllow]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventInputIpAccessControlAllowArrayOutput) Index(i pulumi.IntInput) LiveEventInputIpAccessControlAllowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LiveEventInputIpAccessControlAllow {
		return vs[0].([]LiveEventInputIpAccessControlAllow)[vs[1].(int)]
	}).(LiveEventInputIpAccessControlAllowOutput)
}

type LiveEventPreview struct {
	// An alternative media identifier associated with the streaming locator created for the preview. The identifier can be used in the `CustomLicenseAcquisitionUrlTemplate` or the `CustomKeyAcquisitionUrlTemplate` of the Streaming Policy specified in the `streamingPolicyName` field.
	AlternativeMediaId *string                    `pulumi:"alternativeMediaId"`
	Endpoints          []LiveEventPreviewEndpoint `pulumi:"endpoints"`
	// One or more `ipAccessControlAllow` blocks as defined above.
	IpAccessControlAllows []LiveEventPreviewIpAccessControlAllow `pulumi:"ipAccessControlAllows"`
	// The identifier of the preview locator in GUID format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. Changing this forces a new resource to be created.
	PreviewLocator *string `pulumi:"previewLocator"`
	// The name of streaming policy used for the live event preview. Changing this forces a new resource to be created.
	StreamingPolicyName *string `pulumi:"streamingPolicyName"`
}

// LiveEventPreviewInput is an input type that accepts LiveEventPreviewArgs and LiveEventPreviewOutput values.
// You can construct a concrete instance of `LiveEventPreviewInput` via:
//
//	LiveEventPreviewArgs{...}
type LiveEventPreviewInput interface {
	pulumi.Input

	ToLiveEventPreviewOutput() LiveEventPreviewOutput
	ToLiveEventPreviewOutputWithContext(context.Context) LiveEventPreviewOutput
}

type LiveEventPreviewArgs struct {
	// An alternative media identifier associated with the streaming locator created for the preview. The identifier can be used in the `CustomLicenseAcquisitionUrlTemplate` or the `CustomKeyAcquisitionUrlTemplate` of the Streaming Policy specified in the `streamingPolicyName` field.
	AlternativeMediaId pulumi.StringPtrInput              `pulumi:"alternativeMediaId"`
	Endpoints          LiveEventPreviewEndpointArrayInput `pulumi:"endpoints"`
	// One or more `ipAccessControlAllow` blocks as defined above.
	IpAccessControlAllows LiveEventPreviewIpAccessControlAllowArrayInput `pulumi:"ipAccessControlAllows"`
	// The identifier of the preview locator in GUID format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. Changing this forces a new resource to be created.
	PreviewLocator pulumi.StringPtrInput `pulumi:"previewLocator"`
	// The name of streaming policy used for the live event preview. Changing this forces a new resource to be created.
	StreamingPolicyName pulumi.StringPtrInput `pulumi:"streamingPolicyName"`
}

func (LiveEventPreviewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventPreview)(nil)).Elem()
}

func (i LiveEventPreviewArgs) ToLiveEventPreviewOutput() LiveEventPreviewOutput {
	return i.ToLiveEventPreviewOutputWithContext(context.Background())
}

func (i LiveEventPreviewArgs) ToLiveEventPreviewOutputWithContext(ctx context.Context) LiveEventPreviewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewOutput)
}

func (i LiveEventPreviewArgs) ToOutput(ctx context.Context) pulumix.Output[LiveEventPreview] {
	return pulumix.Output[LiveEventPreview]{
		OutputState: i.ToLiveEventPreviewOutputWithContext(ctx).OutputState,
	}
}

func (i LiveEventPreviewArgs) ToLiveEventPreviewPtrOutput() LiveEventPreviewPtrOutput {
	return i.ToLiveEventPreviewPtrOutputWithContext(context.Background())
}

func (i LiveEventPreviewArgs) ToLiveEventPreviewPtrOutputWithContext(ctx context.Context) LiveEventPreviewPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewOutput).ToLiveEventPreviewPtrOutputWithContext(ctx)
}

// LiveEventPreviewPtrInput is an input type that accepts LiveEventPreviewArgs, LiveEventPreviewPtr and LiveEventPreviewPtrOutput values.
// You can construct a concrete instance of `LiveEventPreviewPtrInput` via:
//
//	        LiveEventPreviewArgs{...}
//
//	or:
//
//	        nil
type LiveEventPreviewPtrInput interface {
	pulumi.Input

	ToLiveEventPreviewPtrOutput() LiveEventPreviewPtrOutput
	ToLiveEventPreviewPtrOutputWithContext(context.Context) LiveEventPreviewPtrOutput
}

type liveEventPreviewPtrType LiveEventPreviewArgs

func LiveEventPreviewPtr(v *LiveEventPreviewArgs) LiveEventPreviewPtrInput {
	return (*liveEventPreviewPtrType)(v)
}

func (*liveEventPreviewPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventPreview)(nil)).Elem()
}

func (i *liveEventPreviewPtrType) ToLiveEventPreviewPtrOutput() LiveEventPreviewPtrOutput {
	return i.ToLiveEventPreviewPtrOutputWithContext(context.Background())
}

func (i *liveEventPreviewPtrType) ToLiveEventPreviewPtrOutputWithContext(ctx context.Context) LiveEventPreviewPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewPtrOutput)
}

func (i *liveEventPreviewPtrType) ToOutput(ctx context.Context) pulumix.Output[*LiveEventPreview] {
	return pulumix.Output[*LiveEventPreview]{
		OutputState: i.ToLiveEventPreviewPtrOutputWithContext(ctx).OutputState,
	}
}

type LiveEventPreviewOutput struct{ *pulumi.OutputState }

func (LiveEventPreviewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventPreview)(nil)).Elem()
}

func (o LiveEventPreviewOutput) ToLiveEventPreviewOutput() LiveEventPreviewOutput {
	return o
}

func (o LiveEventPreviewOutput) ToLiveEventPreviewOutputWithContext(ctx context.Context) LiveEventPreviewOutput {
	return o
}

func (o LiveEventPreviewOutput) ToLiveEventPreviewPtrOutput() LiveEventPreviewPtrOutput {
	return o.ToLiveEventPreviewPtrOutputWithContext(context.Background())
}

func (o LiveEventPreviewOutput) ToLiveEventPreviewPtrOutputWithContext(ctx context.Context) LiveEventPreviewPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LiveEventPreview) *LiveEventPreview {
		return &v
	}).(LiveEventPreviewPtrOutput)
}

func (o LiveEventPreviewOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventPreview] {
	return pulumix.Output[LiveEventPreview]{
		OutputState: o.OutputState,
	}
}

// An alternative media identifier associated with the streaming locator created for the preview. The identifier can be used in the `CustomLicenseAcquisitionUrlTemplate` or the `CustomKeyAcquisitionUrlTemplate` of the Streaming Policy specified in the `streamingPolicyName` field.
func (o LiveEventPreviewOutput) AlternativeMediaId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventPreview) *string { return v.AlternativeMediaId }).(pulumi.StringPtrOutput)
}

func (o LiveEventPreviewOutput) Endpoints() LiveEventPreviewEndpointArrayOutput {
	return o.ApplyT(func(v LiveEventPreview) []LiveEventPreviewEndpoint { return v.Endpoints }).(LiveEventPreviewEndpointArrayOutput)
}

// One or more `ipAccessControlAllow` blocks as defined above.
func (o LiveEventPreviewOutput) IpAccessControlAllows() LiveEventPreviewIpAccessControlAllowArrayOutput {
	return o.ApplyT(func(v LiveEventPreview) []LiveEventPreviewIpAccessControlAllow { return v.IpAccessControlAllows }).(LiveEventPreviewIpAccessControlAllowArrayOutput)
}

// The identifier of the preview locator in GUID format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. Changing this forces a new resource to be created.
func (o LiveEventPreviewOutput) PreviewLocator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventPreview) *string { return v.PreviewLocator }).(pulumi.StringPtrOutput)
}

// The name of streaming policy used for the live event preview. Changing this forces a new resource to be created.
func (o LiveEventPreviewOutput) StreamingPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventPreview) *string { return v.StreamingPolicyName }).(pulumi.StringPtrOutput)
}

type LiveEventPreviewPtrOutput struct{ *pulumi.OutputState }

func (LiveEventPreviewPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventPreview)(nil)).Elem()
}

func (o LiveEventPreviewPtrOutput) ToLiveEventPreviewPtrOutput() LiveEventPreviewPtrOutput {
	return o
}

func (o LiveEventPreviewPtrOutput) ToLiveEventPreviewPtrOutputWithContext(ctx context.Context) LiveEventPreviewPtrOutput {
	return o
}

func (o LiveEventPreviewPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LiveEventPreview] {
	return pulumix.Output[*LiveEventPreview]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventPreviewPtrOutput) Elem() LiveEventPreviewOutput {
	return o.ApplyT(func(v *LiveEventPreview) LiveEventPreview {
		if v != nil {
			return *v
		}
		var ret LiveEventPreview
		return ret
	}).(LiveEventPreviewOutput)
}

// An alternative media identifier associated with the streaming locator created for the preview. The identifier can be used in the `CustomLicenseAcquisitionUrlTemplate` or the `CustomKeyAcquisitionUrlTemplate` of the Streaming Policy specified in the `streamingPolicyName` field.
func (o LiveEventPreviewPtrOutput) AlternativeMediaId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventPreview) *string {
		if v == nil {
			return nil
		}
		return v.AlternativeMediaId
	}).(pulumi.StringPtrOutput)
}

func (o LiveEventPreviewPtrOutput) Endpoints() LiveEventPreviewEndpointArrayOutput {
	return o.ApplyT(func(v *LiveEventPreview) []LiveEventPreviewEndpoint {
		if v == nil {
			return nil
		}
		return v.Endpoints
	}).(LiveEventPreviewEndpointArrayOutput)
}

// One or more `ipAccessControlAllow` blocks as defined above.
func (o LiveEventPreviewPtrOutput) IpAccessControlAllows() LiveEventPreviewIpAccessControlAllowArrayOutput {
	return o.ApplyT(func(v *LiveEventPreview) []LiveEventPreviewIpAccessControlAllow {
		if v == nil {
			return nil
		}
		return v.IpAccessControlAllows
	}).(LiveEventPreviewIpAccessControlAllowArrayOutput)
}

// The identifier of the preview locator in GUID format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. Changing this forces a new resource to be created.
func (o LiveEventPreviewPtrOutput) PreviewLocator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventPreview) *string {
		if v == nil {
			return nil
		}
		return v.PreviewLocator
	}).(pulumi.StringPtrOutput)
}

// The name of streaming policy used for the live event preview. Changing this forces a new resource to be created.
func (o LiveEventPreviewPtrOutput) StreamingPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventPreview) *string {
		if v == nil {
			return nil
		}
		return v.StreamingPolicyName
	}).(pulumi.StringPtrOutput)
}

type LiveEventPreviewEndpoint struct {
	Protocol *string `pulumi:"protocol"`
	Url      *string `pulumi:"url"`
}

// LiveEventPreviewEndpointInput is an input type that accepts LiveEventPreviewEndpointArgs and LiveEventPreviewEndpointOutput values.
// You can construct a concrete instance of `LiveEventPreviewEndpointInput` via:
//
//	LiveEventPreviewEndpointArgs{...}
type LiveEventPreviewEndpointInput interface {
	pulumi.Input

	ToLiveEventPreviewEndpointOutput() LiveEventPreviewEndpointOutput
	ToLiveEventPreviewEndpointOutputWithContext(context.Context) LiveEventPreviewEndpointOutput
}

type LiveEventPreviewEndpointArgs struct {
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	Url      pulumi.StringPtrInput `pulumi:"url"`
}

func (LiveEventPreviewEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventPreviewEndpoint)(nil)).Elem()
}

func (i LiveEventPreviewEndpointArgs) ToLiveEventPreviewEndpointOutput() LiveEventPreviewEndpointOutput {
	return i.ToLiveEventPreviewEndpointOutputWithContext(context.Background())
}

func (i LiveEventPreviewEndpointArgs) ToLiveEventPreviewEndpointOutputWithContext(ctx context.Context) LiveEventPreviewEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewEndpointOutput)
}

func (i LiveEventPreviewEndpointArgs) ToOutput(ctx context.Context) pulumix.Output[LiveEventPreviewEndpoint] {
	return pulumix.Output[LiveEventPreviewEndpoint]{
		OutputState: i.ToLiveEventPreviewEndpointOutputWithContext(ctx).OutputState,
	}
}

// LiveEventPreviewEndpointArrayInput is an input type that accepts LiveEventPreviewEndpointArray and LiveEventPreviewEndpointArrayOutput values.
// You can construct a concrete instance of `LiveEventPreviewEndpointArrayInput` via:
//
//	LiveEventPreviewEndpointArray{ LiveEventPreviewEndpointArgs{...} }
type LiveEventPreviewEndpointArrayInput interface {
	pulumi.Input

	ToLiveEventPreviewEndpointArrayOutput() LiveEventPreviewEndpointArrayOutput
	ToLiveEventPreviewEndpointArrayOutputWithContext(context.Context) LiveEventPreviewEndpointArrayOutput
}

type LiveEventPreviewEndpointArray []LiveEventPreviewEndpointInput

func (LiveEventPreviewEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventPreviewEndpoint)(nil)).Elem()
}

func (i LiveEventPreviewEndpointArray) ToLiveEventPreviewEndpointArrayOutput() LiveEventPreviewEndpointArrayOutput {
	return i.ToLiveEventPreviewEndpointArrayOutputWithContext(context.Background())
}

func (i LiveEventPreviewEndpointArray) ToLiveEventPreviewEndpointArrayOutputWithContext(ctx context.Context) LiveEventPreviewEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewEndpointArrayOutput)
}

func (i LiveEventPreviewEndpointArray) ToOutput(ctx context.Context) pulumix.Output[[]LiveEventPreviewEndpoint] {
	return pulumix.Output[[]LiveEventPreviewEndpoint]{
		OutputState: i.ToLiveEventPreviewEndpointArrayOutputWithContext(ctx).OutputState,
	}
}

type LiveEventPreviewEndpointOutput struct{ *pulumi.OutputState }

func (LiveEventPreviewEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventPreviewEndpoint)(nil)).Elem()
}

func (o LiveEventPreviewEndpointOutput) ToLiveEventPreviewEndpointOutput() LiveEventPreviewEndpointOutput {
	return o
}

func (o LiveEventPreviewEndpointOutput) ToLiveEventPreviewEndpointOutputWithContext(ctx context.Context) LiveEventPreviewEndpointOutput {
	return o
}

func (o LiveEventPreviewEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventPreviewEndpoint] {
	return pulumix.Output[LiveEventPreviewEndpoint]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventPreviewEndpointOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventPreviewEndpoint) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

func (o LiveEventPreviewEndpointOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventPreviewEndpoint) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type LiveEventPreviewEndpointArrayOutput struct{ *pulumi.OutputState }

func (LiveEventPreviewEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventPreviewEndpoint)(nil)).Elem()
}

func (o LiveEventPreviewEndpointArrayOutput) ToLiveEventPreviewEndpointArrayOutput() LiveEventPreviewEndpointArrayOutput {
	return o
}

func (o LiveEventPreviewEndpointArrayOutput) ToLiveEventPreviewEndpointArrayOutputWithContext(ctx context.Context) LiveEventPreviewEndpointArrayOutput {
	return o
}

func (o LiveEventPreviewEndpointArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LiveEventPreviewEndpoint] {
	return pulumix.Output[[]LiveEventPreviewEndpoint]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventPreviewEndpointArrayOutput) Index(i pulumi.IntInput) LiveEventPreviewEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LiveEventPreviewEndpoint {
		return vs[0].([]LiveEventPreviewEndpoint)[vs[1].(int)]
	}).(LiveEventPreviewEndpointOutput)
}

type LiveEventPreviewIpAccessControlAllow struct {
	// The IP address or CIDR range.
	Address *string `pulumi:"address"`
	// The friendly name for the IP address range.
	Name *string `pulumi:"name"`
	// The subnet mask prefix length (see CIDR notation).
	SubnetPrefixLength *int `pulumi:"subnetPrefixLength"`
}

// LiveEventPreviewIpAccessControlAllowInput is an input type that accepts LiveEventPreviewIpAccessControlAllowArgs and LiveEventPreviewIpAccessControlAllowOutput values.
// You can construct a concrete instance of `LiveEventPreviewIpAccessControlAllowInput` via:
//
//	LiveEventPreviewIpAccessControlAllowArgs{...}
type LiveEventPreviewIpAccessControlAllowInput interface {
	pulumi.Input

	ToLiveEventPreviewIpAccessControlAllowOutput() LiveEventPreviewIpAccessControlAllowOutput
	ToLiveEventPreviewIpAccessControlAllowOutputWithContext(context.Context) LiveEventPreviewIpAccessControlAllowOutput
}

type LiveEventPreviewIpAccessControlAllowArgs struct {
	// The IP address or CIDR range.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The friendly name for the IP address range.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The subnet mask prefix length (see CIDR notation).
	SubnetPrefixLength pulumi.IntPtrInput `pulumi:"subnetPrefixLength"`
}

func (LiveEventPreviewIpAccessControlAllowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventPreviewIpAccessControlAllow)(nil)).Elem()
}

func (i LiveEventPreviewIpAccessControlAllowArgs) ToLiveEventPreviewIpAccessControlAllowOutput() LiveEventPreviewIpAccessControlAllowOutput {
	return i.ToLiveEventPreviewIpAccessControlAllowOutputWithContext(context.Background())
}

func (i LiveEventPreviewIpAccessControlAllowArgs) ToLiveEventPreviewIpAccessControlAllowOutputWithContext(ctx context.Context) LiveEventPreviewIpAccessControlAllowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewIpAccessControlAllowOutput)
}

func (i LiveEventPreviewIpAccessControlAllowArgs) ToOutput(ctx context.Context) pulumix.Output[LiveEventPreviewIpAccessControlAllow] {
	return pulumix.Output[LiveEventPreviewIpAccessControlAllow]{
		OutputState: i.ToLiveEventPreviewIpAccessControlAllowOutputWithContext(ctx).OutputState,
	}
}

// LiveEventPreviewIpAccessControlAllowArrayInput is an input type that accepts LiveEventPreviewIpAccessControlAllowArray and LiveEventPreviewIpAccessControlAllowArrayOutput values.
// You can construct a concrete instance of `LiveEventPreviewIpAccessControlAllowArrayInput` via:
//
//	LiveEventPreviewIpAccessControlAllowArray{ LiveEventPreviewIpAccessControlAllowArgs{...} }
type LiveEventPreviewIpAccessControlAllowArrayInput interface {
	pulumi.Input

	ToLiveEventPreviewIpAccessControlAllowArrayOutput() LiveEventPreviewIpAccessControlAllowArrayOutput
	ToLiveEventPreviewIpAccessControlAllowArrayOutputWithContext(context.Context) LiveEventPreviewIpAccessControlAllowArrayOutput
}

type LiveEventPreviewIpAccessControlAllowArray []LiveEventPreviewIpAccessControlAllowInput

func (LiveEventPreviewIpAccessControlAllowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventPreviewIpAccessControlAllow)(nil)).Elem()
}

func (i LiveEventPreviewIpAccessControlAllowArray) ToLiveEventPreviewIpAccessControlAllowArrayOutput() LiveEventPreviewIpAccessControlAllowArrayOutput {
	return i.ToLiveEventPreviewIpAccessControlAllowArrayOutputWithContext(context.Background())
}

func (i LiveEventPreviewIpAccessControlAllowArray) ToLiveEventPreviewIpAccessControlAllowArrayOutputWithContext(ctx context.Context) LiveEventPreviewIpAccessControlAllowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewIpAccessControlAllowArrayOutput)
}

func (i LiveEventPreviewIpAccessControlAllowArray) ToOutput(ctx context.Context) pulumix.Output[[]LiveEventPreviewIpAccessControlAllow] {
	return pulumix.Output[[]LiveEventPreviewIpAccessControlAllow]{
		OutputState: i.ToLiveEventPreviewIpAccessControlAllowArrayOutputWithContext(ctx).OutputState,
	}
}

type LiveEventPreviewIpAccessControlAllowOutput struct{ *pulumi.OutputState }

func (LiveEventPreviewIpAccessControlAllowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventPreviewIpAccessControlAllow)(nil)).Elem()
}

func (o LiveEventPreviewIpAccessControlAllowOutput) ToLiveEventPreviewIpAccessControlAllowOutput() LiveEventPreviewIpAccessControlAllowOutput {
	return o
}

func (o LiveEventPreviewIpAccessControlAllowOutput) ToLiveEventPreviewIpAccessControlAllowOutputWithContext(ctx context.Context) LiveEventPreviewIpAccessControlAllowOutput {
	return o
}

func (o LiveEventPreviewIpAccessControlAllowOutput) ToOutput(ctx context.Context) pulumix.Output[LiveEventPreviewIpAccessControlAllow] {
	return pulumix.Output[LiveEventPreviewIpAccessControlAllow]{
		OutputState: o.OutputState,
	}
}

// The IP address or CIDR range.
func (o LiveEventPreviewIpAccessControlAllowOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventPreviewIpAccessControlAllow) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The friendly name for the IP address range.
func (o LiveEventPreviewIpAccessControlAllowOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventPreviewIpAccessControlAllow) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The subnet mask prefix length (see CIDR notation).
func (o LiveEventPreviewIpAccessControlAllowOutput) SubnetPrefixLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LiveEventPreviewIpAccessControlAllow) *int { return v.SubnetPrefixLength }).(pulumi.IntPtrOutput)
}

type LiveEventPreviewIpAccessControlAllowArrayOutput struct{ *pulumi.OutputState }

func (LiveEventPreviewIpAccessControlAllowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventPreviewIpAccessControlAllow)(nil)).Elem()
}

func (o LiveEventPreviewIpAccessControlAllowArrayOutput) ToLiveEventPreviewIpAccessControlAllowArrayOutput() LiveEventPreviewIpAccessControlAllowArrayOutput {
	return o
}

func (o LiveEventPreviewIpAccessControlAllowArrayOutput) ToLiveEventPreviewIpAccessControlAllowArrayOutputWithContext(ctx context.Context) LiveEventPreviewIpAccessControlAllowArrayOutput {
	return o
}

func (o LiveEventPreviewIpAccessControlAllowArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LiveEventPreviewIpAccessControlAllow] {
	return pulumix.Output[[]LiveEventPreviewIpAccessControlAllow]{
		OutputState: o.OutputState,
	}
}

func (o LiveEventPreviewIpAccessControlAllowArrayOutput) Index(i pulumi.IntInput) LiveEventPreviewIpAccessControlAllowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LiveEventPreviewIpAccessControlAllow {
		return vs[0].([]LiveEventPreviewIpAccessControlAllow)[vs[1].(int)]
	}).(LiveEventPreviewIpAccessControlAllowOutput)
}

type ServiceAccountEncryption struct {
	// The current key used to encrypt the Media Services Account, including the key version.
	CurrentKeyIdentifier *string `pulumi:"currentKeyIdentifier"`
	// Specifies the URI of the Key Vault Key used to encrypt data. The key may either be versioned (for example https://vault/keys/mykey/version1) or reference a key without a version (for example https://vault/keys/mykey).
	KeyVaultKeyIdentifier *string `pulumi:"keyVaultKeyIdentifier"`
	// A `managedIdentity` block as defined below.
	ManagedIdentity *ServiceAccountEncryptionManagedIdentity `pulumi:"managedIdentity"`
	// Specifies the type of key used to encrypt the account data. Possible values are `SystemKey` and `CustomerKey`. Defaults to `SystemKey`.
	Type *string `pulumi:"type"`
}

// ServiceAccountEncryptionInput is an input type that accepts ServiceAccountEncryptionArgs and ServiceAccountEncryptionOutput values.
// You can construct a concrete instance of `ServiceAccountEncryptionInput` via:
//
//	ServiceAccountEncryptionArgs{...}
type ServiceAccountEncryptionInput interface {
	pulumi.Input

	ToServiceAccountEncryptionOutput() ServiceAccountEncryptionOutput
	ToServiceAccountEncryptionOutputWithContext(context.Context) ServiceAccountEncryptionOutput
}

type ServiceAccountEncryptionArgs struct {
	// The current key used to encrypt the Media Services Account, including the key version.
	CurrentKeyIdentifier pulumi.StringPtrInput `pulumi:"currentKeyIdentifier"`
	// Specifies the URI of the Key Vault Key used to encrypt data. The key may either be versioned (for example https://vault/keys/mykey/version1) or reference a key without a version (for example https://vault/keys/mykey).
	KeyVaultKeyIdentifier pulumi.StringPtrInput `pulumi:"keyVaultKeyIdentifier"`
	// A `managedIdentity` block as defined below.
	ManagedIdentity ServiceAccountEncryptionManagedIdentityPtrInput `pulumi:"managedIdentity"`
	// Specifies the type of key used to encrypt the account data. Possible values are `SystemKey` and `CustomerKey`. Defaults to `SystemKey`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ServiceAccountEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountEncryption)(nil)).Elem()
}

func (i ServiceAccountEncryptionArgs) ToServiceAccountEncryptionOutput() ServiceAccountEncryptionOutput {
	return i.ToServiceAccountEncryptionOutputWithContext(context.Background())
}

func (i ServiceAccountEncryptionArgs) ToServiceAccountEncryptionOutputWithContext(ctx context.Context) ServiceAccountEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountEncryptionOutput)
}

func (i ServiceAccountEncryptionArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceAccountEncryption] {
	return pulumix.Output[ServiceAccountEncryption]{
		OutputState: i.ToServiceAccountEncryptionOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceAccountEncryptionArgs) ToServiceAccountEncryptionPtrOutput() ServiceAccountEncryptionPtrOutput {
	return i.ToServiceAccountEncryptionPtrOutputWithContext(context.Background())
}

func (i ServiceAccountEncryptionArgs) ToServiceAccountEncryptionPtrOutputWithContext(ctx context.Context) ServiceAccountEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountEncryptionOutput).ToServiceAccountEncryptionPtrOutputWithContext(ctx)
}

// ServiceAccountEncryptionPtrInput is an input type that accepts ServiceAccountEncryptionArgs, ServiceAccountEncryptionPtr and ServiceAccountEncryptionPtrOutput values.
// You can construct a concrete instance of `ServiceAccountEncryptionPtrInput` via:
//
//	        ServiceAccountEncryptionArgs{...}
//
//	or:
//
//	        nil
type ServiceAccountEncryptionPtrInput interface {
	pulumi.Input

	ToServiceAccountEncryptionPtrOutput() ServiceAccountEncryptionPtrOutput
	ToServiceAccountEncryptionPtrOutputWithContext(context.Context) ServiceAccountEncryptionPtrOutput
}

type serviceAccountEncryptionPtrType ServiceAccountEncryptionArgs

func ServiceAccountEncryptionPtr(v *ServiceAccountEncryptionArgs) ServiceAccountEncryptionPtrInput {
	return (*serviceAccountEncryptionPtrType)(v)
}

func (*serviceAccountEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccountEncryption)(nil)).Elem()
}

func (i *serviceAccountEncryptionPtrType) ToServiceAccountEncryptionPtrOutput() ServiceAccountEncryptionPtrOutput {
	return i.ToServiceAccountEncryptionPtrOutputWithContext(context.Background())
}

func (i *serviceAccountEncryptionPtrType) ToServiceAccountEncryptionPtrOutputWithContext(ctx context.Context) ServiceAccountEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountEncryptionPtrOutput)
}

func (i *serviceAccountEncryptionPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceAccountEncryption] {
	return pulumix.Output[*ServiceAccountEncryption]{
		OutputState: i.ToServiceAccountEncryptionPtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceAccountEncryptionOutput struct{ *pulumi.OutputState }

func (ServiceAccountEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountEncryption)(nil)).Elem()
}

func (o ServiceAccountEncryptionOutput) ToServiceAccountEncryptionOutput() ServiceAccountEncryptionOutput {
	return o
}

func (o ServiceAccountEncryptionOutput) ToServiceAccountEncryptionOutputWithContext(ctx context.Context) ServiceAccountEncryptionOutput {
	return o
}

func (o ServiceAccountEncryptionOutput) ToServiceAccountEncryptionPtrOutput() ServiceAccountEncryptionPtrOutput {
	return o.ToServiceAccountEncryptionPtrOutputWithContext(context.Background())
}

func (o ServiceAccountEncryptionOutput) ToServiceAccountEncryptionPtrOutputWithContext(ctx context.Context) ServiceAccountEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceAccountEncryption) *ServiceAccountEncryption {
		return &v
	}).(ServiceAccountEncryptionPtrOutput)
}

func (o ServiceAccountEncryptionOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceAccountEncryption] {
	return pulumix.Output[ServiceAccountEncryption]{
		OutputState: o.OutputState,
	}
}

// The current key used to encrypt the Media Services Account, including the key version.
func (o ServiceAccountEncryptionOutput) CurrentKeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAccountEncryption) *string { return v.CurrentKeyIdentifier }).(pulumi.StringPtrOutput)
}

// Specifies the URI of the Key Vault Key used to encrypt data. The key may either be versioned (for example https://vault/keys/mykey/version1) or reference a key without a version (for example https://vault/keys/mykey).
func (o ServiceAccountEncryptionOutput) KeyVaultKeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAccountEncryption) *string { return v.KeyVaultKeyIdentifier }).(pulumi.StringPtrOutput)
}

// A `managedIdentity` block as defined below.
func (o ServiceAccountEncryptionOutput) ManagedIdentity() ServiceAccountEncryptionManagedIdentityPtrOutput {
	return o.ApplyT(func(v ServiceAccountEncryption) *ServiceAccountEncryptionManagedIdentity { return v.ManagedIdentity }).(ServiceAccountEncryptionManagedIdentityPtrOutput)
}

// Specifies the type of key used to encrypt the account data. Possible values are `SystemKey` and `CustomerKey`. Defaults to `SystemKey`.
func (o ServiceAccountEncryptionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAccountEncryption) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ServiceAccountEncryptionPtrOutput struct{ *pulumi.OutputState }

func (ServiceAccountEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccountEncryption)(nil)).Elem()
}

func (o ServiceAccountEncryptionPtrOutput) ToServiceAccountEncryptionPtrOutput() ServiceAccountEncryptionPtrOutput {
	return o
}

func (o ServiceAccountEncryptionPtrOutput) ToServiceAccountEncryptionPtrOutputWithContext(ctx context.Context) ServiceAccountEncryptionPtrOutput {
	return o
}

func (o ServiceAccountEncryptionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceAccountEncryption] {
	return pulumix.Output[*ServiceAccountEncryption]{
		OutputState: o.OutputState,
	}
}

func (o ServiceAccountEncryptionPtrOutput) Elem() ServiceAccountEncryptionOutput {
	return o.ApplyT(func(v *ServiceAccountEncryption) ServiceAccountEncryption {
		if v != nil {
			return *v
		}
		var ret ServiceAccountEncryption
		return ret
	}).(ServiceAccountEncryptionOutput)
}

// The current key used to encrypt the Media Services Account, including the key version.
func (o ServiceAccountEncryptionPtrOutput) CurrentKeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccountEncryption) *string {
		if v == nil {
			return nil
		}
		return v.CurrentKeyIdentifier
	}).(pulumi.StringPtrOutput)
}

// Specifies the URI of the Key Vault Key used to encrypt data. The key may either be versioned (for example https://vault/keys/mykey/version1) or reference a key without a version (for example https://vault/keys/mykey).
func (o ServiceAccountEncryptionPtrOutput) KeyVaultKeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccountEncryption) *string {
		if v == nil {
			return nil
		}
		return v.KeyVaultKeyIdentifier
	}).(pulumi.StringPtrOutput)
}

// A `managedIdentity` block as defined below.
func (o ServiceAccountEncryptionPtrOutput) ManagedIdentity() ServiceAccountEncryptionManagedIdentityPtrOutput {
	return o.ApplyT(func(v *ServiceAccountEncryption) *ServiceAccountEncryptionManagedIdentity {
		if v == nil {
			return nil
		}
		return v.ManagedIdentity
	}).(ServiceAccountEncryptionManagedIdentityPtrOutput)
}

// Specifies the type of key used to encrypt the account data. Possible values are `SystemKey` and `CustomerKey`. Defaults to `SystemKey`.
func (o ServiceAccountEncryptionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccountEncryption) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type ServiceAccountEncryptionManagedIdentity struct {
	// Whether to use System Assigned Identity. Possible Values are `true` and `false`.
	UseSystemAssignedIdentity *bool `pulumi:"useSystemAssignedIdentity"`
	// The ID of the User Assigned Identity. This value can only be set when `useSystemAssignedIdentity` is `false`
	UserAssignedIdentityId *string `pulumi:"userAssignedIdentityId"`
}

// ServiceAccountEncryptionManagedIdentityInput is an input type that accepts ServiceAccountEncryptionManagedIdentityArgs and ServiceAccountEncryptionManagedIdentityOutput values.
// You can construct a concrete instance of `ServiceAccountEncryptionManagedIdentityInput` via:
//
//	ServiceAccountEncryptionManagedIdentityArgs{...}
type ServiceAccountEncryptionManagedIdentityInput interface {
	pulumi.Input

	ToServiceAccountEncryptionManagedIdentityOutput() ServiceAccountEncryptionManagedIdentityOutput
	ToServiceAccountEncryptionManagedIdentityOutputWithContext(context.Context) ServiceAccountEncryptionManagedIdentityOutput
}

type ServiceAccountEncryptionManagedIdentityArgs struct {
	// Whether to use System Assigned Identity. Possible Values are `true` and `false`.
	UseSystemAssignedIdentity pulumi.BoolPtrInput `pulumi:"useSystemAssignedIdentity"`
	// The ID of the User Assigned Identity. This value can only be set when `useSystemAssignedIdentity` is `false`
	UserAssignedIdentityId pulumi.StringPtrInput `pulumi:"userAssignedIdentityId"`
}

func (ServiceAccountEncryptionManagedIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountEncryptionManagedIdentity)(nil)).Elem()
}

func (i ServiceAccountEncryptionManagedIdentityArgs) ToServiceAccountEncryptionManagedIdentityOutput() ServiceAccountEncryptionManagedIdentityOutput {
	return i.ToServiceAccountEncryptionManagedIdentityOutputWithContext(context.Background())
}

func (i ServiceAccountEncryptionManagedIdentityArgs) ToServiceAccountEncryptionManagedIdentityOutputWithContext(ctx context.Context) ServiceAccountEncryptionManagedIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountEncryptionManagedIdentityOutput)
}

func (i ServiceAccountEncryptionManagedIdentityArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceAccountEncryptionManagedIdentity] {
	return pulumix.Output[ServiceAccountEncryptionManagedIdentity]{
		OutputState: i.ToServiceAccountEncryptionManagedIdentityOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceAccountEncryptionManagedIdentityArgs) ToServiceAccountEncryptionManagedIdentityPtrOutput() ServiceAccountEncryptionManagedIdentityPtrOutput {
	return i.ToServiceAccountEncryptionManagedIdentityPtrOutputWithContext(context.Background())
}

func (i ServiceAccountEncryptionManagedIdentityArgs) ToServiceAccountEncryptionManagedIdentityPtrOutputWithContext(ctx context.Context) ServiceAccountEncryptionManagedIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountEncryptionManagedIdentityOutput).ToServiceAccountEncryptionManagedIdentityPtrOutputWithContext(ctx)
}

// ServiceAccountEncryptionManagedIdentityPtrInput is an input type that accepts ServiceAccountEncryptionManagedIdentityArgs, ServiceAccountEncryptionManagedIdentityPtr and ServiceAccountEncryptionManagedIdentityPtrOutput values.
// You can construct a concrete instance of `ServiceAccountEncryptionManagedIdentityPtrInput` via:
//
//	        ServiceAccountEncryptionManagedIdentityArgs{...}
//
//	or:
//
//	        nil
type ServiceAccountEncryptionManagedIdentityPtrInput interface {
	pulumi.Input

	ToServiceAccountEncryptionManagedIdentityPtrOutput() ServiceAccountEncryptionManagedIdentityPtrOutput
	ToServiceAccountEncryptionManagedIdentityPtrOutputWithContext(context.Context) ServiceAccountEncryptionManagedIdentityPtrOutput
}

type serviceAccountEncryptionManagedIdentityPtrType ServiceAccountEncryptionManagedIdentityArgs

func ServiceAccountEncryptionManagedIdentityPtr(v *ServiceAccountEncryptionManagedIdentityArgs) ServiceAccountEncryptionManagedIdentityPtrInput {
	return (*serviceAccountEncryptionManagedIdentityPtrType)(v)
}

func (*serviceAccountEncryptionManagedIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccountEncryptionManagedIdentity)(nil)).Elem()
}

func (i *serviceAccountEncryptionManagedIdentityPtrType) ToServiceAccountEncryptionManagedIdentityPtrOutput() ServiceAccountEncryptionManagedIdentityPtrOutput {
	return i.ToServiceAccountEncryptionManagedIdentityPtrOutputWithContext(context.Background())
}

func (i *serviceAccountEncryptionManagedIdentityPtrType) ToServiceAccountEncryptionManagedIdentityPtrOutputWithContext(ctx context.Context) ServiceAccountEncryptionManagedIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountEncryptionManagedIdentityPtrOutput)
}

func (i *serviceAccountEncryptionManagedIdentityPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceAccountEncryptionManagedIdentity] {
	return pulumix.Output[*ServiceAccountEncryptionManagedIdentity]{
		OutputState: i.ToServiceAccountEncryptionManagedIdentityPtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceAccountEncryptionManagedIdentityOutput struct{ *pulumi.OutputState }

func (ServiceAccountEncryptionManagedIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountEncryptionManagedIdentity)(nil)).Elem()
}

func (o ServiceAccountEncryptionManagedIdentityOutput) ToServiceAccountEncryptionManagedIdentityOutput() ServiceAccountEncryptionManagedIdentityOutput {
	return o
}

func (o ServiceAccountEncryptionManagedIdentityOutput) ToServiceAccountEncryptionManagedIdentityOutputWithContext(ctx context.Context) ServiceAccountEncryptionManagedIdentityOutput {
	return o
}

func (o ServiceAccountEncryptionManagedIdentityOutput) ToServiceAccountEncryptionManagedIdentityPtrOutput() ServiceAccountEncryptionManagedIdentityPtrOutput {
	return o.ToServiceAccountEncryptionManagedIdentityPtrOutputWithContext(context.Background())
}

func (o ServiceAccountEncryptionManagedIdentityOutput) ToServiceAccountEncryptionManagedIdentityPtrOutputWithContext(ctx context.Context) ServiceAccountEncryptionManagedIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceAccountEncryptionManagedIdentity) *ServiceAccountEncryptionManagedIdentity {
		return &v
	}).(ServiceAccountEncryptionManagedIdentityPtrOutput)
}

func (o ServiceAccountEncryptionManagedIdentityOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceAccountEncryptionManagedIdentity] {
	return pulumix.Output[ServiceAccountEncryptionManagedIdentity]{
		OutputState: o.OutputState,
	}
}

// Whether to use System Assigned Identity. Possible Values are `true` and `false`.
func (o ServiceAccountEncryptionManagedIdentityOutput) UseSystemAssignedIdentity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceAccountEncryptionManagedIdentity) *bool { return v.UseSystemAssignedIdentity }).(pulumi.BoolPtrOutput)
}

// The ID of the User Assigned Identity. This value can only be set when `useSystemAssignedIdentity` is `false`
func (o ServiceAccountEncryptionManagedIdentityOutput) UserAssignedIdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAccountEncryptionManagedIdentity) *string { return v.UserAssignedIdentityId }).(pulumi.StringPtrOutput)
}

type ServiceAccountEncryptionManagedIdentityPtrOutput struct{ *pulumi.OutputState }

func (ServiceAccountEncryptionManagedIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccountEncryptionManagedIdentity)(nil)).Elem()
}

func (o ServiceAccountEncryptionManagedIdentityPtrOutput) ToServiceAccountEncryptionManagedIdentityPtrOutput() ServiceAccountEncryptionManagedIdentityPtrOutput {
	return o
}

func (o ServiceAccountEncryptionManagedIdentityPtrOutput) ToServiceAccountEncryptionManagedIdentityPtrOutputWithContext(ctx context.Context) ServiceAccountEncryptionManagedIdentityPtrOutput {
	return o
}

func (o ServiceAccountEncryptionManagedIdentityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceAccountEncryptionManagedIdentity] {
	return pulumix.Output[*ServiceAccountEncryptionManagedIdentity]{
		OutputState: o.OutputState,
	}
}

func (o ServiceAccountEncryptionManagedIdentityPtrOutput) Elem() ServiceAccountEncryptionManagedIdentityOutput {
	return o.ApplyT(func(v *ServiceAccountEncryptionManagedIdentity) ServiceAccountEncryptionManagedIdentity {
		if v != nil {
			return *v
		}
		var ret ServiceAccountEncryptionManagedIdentity
		return ret
	}).(ServiceAccountEncryptionManagedIdentityOutput)
}

// Whether to use System Assigned Identity. Possible Values are `true` and `false`.
func (o ServiceAccountEncryptionManagedIdentityPtrOutput) UseSystemAssignedIdentity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceAccountEncryptionManagedIdentity) *bool {
		if v == nil {
			return nil
		}
		return v.UseSystemAssignedIdentity
	}).(pulumi.BoolPtrOutput)
}

// The ID of the User Assigned Identity. This value can only be set when `useSystemAssignedIdentity` is `false`
func (o ServiceAccountEncryptionManagedIdentityPtrOutput) UserAssignedIdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccountEncryptionManagedIdentity) *string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentityId
	}).(pulumi.StringPtrOutput)
}

type ServiceAccountIdentity struct {
	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this Media Services Account.
	IdentityIds []string `pulumi:"identityIds"`
	// The Principal ID associated with this Managed Service Identity.
	PrincipalId *string `pulumi:"principalId"`
	// The Tenant ID associated with this Managed Service Identity.
	TenantId *string `pulumi:"tenantId"`
	// Specifies the type of Managed Service Identity that should be configured on this Media Services Account. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both).
	Type string `pulumi:"type"`
}

// ServiceAccountIdentityInput is an input type that accepts ServiceAccountIdentityArgs and ServiceAccountIdentityOutput values.
// You can construct a concrete instance of `ServiceAccountIdentityInput` via:
//
//	ServiceAccountIdentityArgs{...}
type ServiceAccountIdentityInput interface {
	pulumi.Input

	ToServiceAccountIdentityOutput() ServiceAccountIdentityOutput
	ToServiceAccountIdentityOutputWithContext(context.Context) ServiceAccountIdentityOutput
}

type ServiceAccountIdentityArgs struct {
	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this Media Services Account.
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	// The Principal ID associated with this Managed Service Identity.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The Tenant ID associated with this Managed Service Identity.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// Specifies the type of Managed Service Identity that should be configured on this Media Services Account. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both).
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServiceAccountIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountIdentity)(nil)).Elem()
}

func (i ServiceAccountIdentityArgs) ToServiceAccountIdentityOutput() ServiceAccountIdentityOutput {
	return i.ToServiceAccountIdentityOutputWithContext(context.Background())
}

func (i ServiceAccountIdentityArgs) ToServiceAccountIdentityOutputWithContext(ctx context.Context) ServiceAccountIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountIdentityOutput)
}

func (i ServiceAccountIdentityArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceAccountIdentity] {
	return pulumix.Output[ServiceAccountIdentity]{
		OutputState: i.ToServiceAccountIdentityOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceAccountIdentityArgs) ToServiceAccountIdentityPtrOutput() ServiceAccountIdentityPtrOutput {
	return i.ToServiceAccountIdentityPtrOutputWithContext(context.Background())
}

func (i ServiceAccountIdentityArgs) ToServiceAccountIdentityPtrOutputWithContext(ctx context.Context) ServiceAccountIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountIdentityOutput).ToServiceAccountIdentityPtrOutputWithContext(ctx)
}

// ServiceAccountIdentityPtrInput is an input type that accepts ServiceAccountIdentityArgs, ServiceAccountIdentityPtr and ServiceAccountIdentityPtrOutput values.
// You can construct a concrete instance of `ServiceAccountIdentityPtrInput` via:
//
//	        ServiceAccountIdentityArgs{...}
//
//	or:
//
//	        nil
type ServiceAccountIdentityPtrInput interface {
	pulumi.Input

	ToServiceAccountIdentityPtrOutput() ServiceAccountIdentityPtrOutput
	ToServiceAccountIdentityPtrOutputWithContext(context.Context) ServiceAccountIdentityPtrOutput
}

type serviceAccountIdentityPtrType ServiceAccountIdentityArgs

func ServiceAccountIdentityPtr(v *ServiceAccountIdentityArgs) ServiceAccountIdentityPtrInput {
	return (*serviceAccountIdentityPtrType)(v)
}

func (*serviceAccountIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccountIdentity)(nil)).Elem()
}

func (i *serviceAccountIdentityPtrType) ToServiceAccountIdentityPtrOutput() ServiceAccountIdentityPtrOutput {
	return i.ToServiceAccountIdentityPtrOutputWithContext(context.Background())
}

func (i *serviceAccountIdentityPtrType) ToServiceAccountIdentityPtrOutputWithContext(ctx context.Context) ServiceAccountIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountIdentityPtrOutput)
}

func (i *serviceAccountIdentityPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceAccountIdentity] {
	return pulumix.Output[*ServiceAccountIdentity]{
		OutputState: i.ToServiceAccountIdentityPtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceAccountIdentityOutput struct{ *pulumi.OutputState }

func (ServiceAccountIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountIdentity)(nil)).Elem()
}

func (o ServiceAccountIdentityOutput) ToServiceAccountIdentityOutput() ServiceAccountIdentityOutput {
	return o
}

func (o ServiceAccountIdentityOutput) ToServiceAccountIdentityOutputWithContext(ctx context.Context) ServiceAccountIdentityOutput {
	return o
}

func (o ServiceAccountIdentityOutput) ToServiceAccountIdentityPtrOutput() ServiceAccountIdentityPtrOutput {
	return o.ToServiceAccountIdentityPtrOutputWithContext(context.Background())
}

func (o ServiceAccountIdentityOutput) ToServiceAccountIdentityPtrOutputWithContext(ctx context.Context) ServiceAccountIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceAccountIdentity) *ServiceAccountIdentity {
		return &v
	}).(ServiceAccountIdentityPtrOutput)
}

func (o ServiceAccountIdentityOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceAccountIdentity] {
	return pulumix.Output[ServiceAccountIdentity]{
		OutputState: o.OutputState,
	}
}

// Specifies a list of User Assigned Managed Identity IDs to be assigned to this Media Services Account.
func (o ServiceAccountIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceAccountIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

// The Principal ID associated with this Managed Service Identity.
func (o ServiceAccountIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAccountIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The Tenant ID associated with this Managed Service Identity.
func (o ServiceAccountIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAccountIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this Media Services Account. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both).
func (o ServiceAccountIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceAccountIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type ServiceAccountIdentityPtrOutput struct{ *pulumi.OutputState }

func (ServiceAccountIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccountIdentity)(nil)).Elem()
}

func (o ServiceAccountIdentityPtrOutput) ToServiceAccountIdentityPtrOutput() ServiceAccountIdentityPtrOutput {
	return o
}

func (o ServiceAccountIdentityPtrOutput) ToServiceAccountIdentityPtrOutputWithContext(ctx context.Context) ServiceAccountIdentityPtrOutput {
	return o
}

func (o ServiceAccountIdentityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceAccountIdentity] {
	return pulumix.Output[*ServiceAccountIdentity]{
		OutputState: o.OutputState,
	}
}

func (o ServiceAccountIdentityPtrOutput) Elem() ServiceAccountIdentityOutput {
	return o.ApplyT(func(v *ServiceAccountIdentity) ServiceAccountIdentity {
		if v != nil {
			return *v
		}
		var ret ServiceAccountIdentity
		return ret
	}).(ServiceAccountIdentityOutput)
}

// Specifies a list of User Assigned Managed Identity IDs to be assigned to this Media Services Account.
func (o ServiceAccountIdentityPtrOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceAccountIdentity) []string {
		if v == nil {
			return nil
		}
		return v.IdentityIds
	}).(pulumi.StringArrayOutput)
}

// The Principal ID associated with this Managed Service Identity.
func (o ServiceAccountIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccountIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The Tenant ID associated with this Managed Service Identity.
func (o ServiceAccountIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccountIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this Media Services Account. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both).
func (o ServiceAccountIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccountIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type ServiceAccountKeyDeliveryAccessControl struct {
	// The Default Action to use when no rules match from `ipAllowList`. Possible values are `Allow` and `Deny`.
	DefaultAction *string `pulumi:"defaultAction"`
	// One or more IP Addresses, or CIDR Blocks which should be able to access the Key Delivery.
	IpAllowLists []string `pulumi:"ipAllowLists"`
}

// ServiceAccountKeyDeliveryAccessControlInput is an input type that accepts ServiceAccountKeyDeliveryAccessControlArgs and ServiceAccountKeyDeliveryAccessControlOutput values.
// You can construct a concrete instance of `ServiceAccountKeyDeliveryAccessControlInput` via:
//
//	ServiceAccountKeyDeliveryAccessControlArgs{...}
type ServiceAccountKeyDeliveryAccessControlInput interface {
	pulumi.Input

	ToServiceAccountKeyDeliveryAccessControlOutput() ServiceAccountKeyDeliveryAccessControlOutput
	ToServiceAccountKeyDeliveryAccessControlOutputWithContext(context.Context) ServiceAccountKeyDeliveryAccessControlOutput
}

type ServiceAccountKeyDeliveryAccessControlArgs struct {
	// The Default Action to use when no rules match from `ipAllowList`. Possible values are `Allow` and `Deny`.
	DefaultAction pulumi.StringPtrInput `pulumi:"defaultAction"`
	// One or more IP Addresses, or CIDR Blocks which should be able to access the Key Delivery.
	IpAllowLists pulumi.StringArrayInput `pulumi:"ipAllowLists"`
}

func (ServiceAccountKeyDeliveryAccessControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountKeyDeliveryAccessControl)(nil)).Elem()
}

func (i ServiceAccountKeyDeliveryAccessControlArgs) ToServiceAccountKeyDeliveryAccessControlOutput() ServiceAccountKeyDeliveryAccessControlOutput {
	return i.ToServiceAccountKeyDeliveryAccessControlOutputWithContext(context.Background())
}

func (i ServiceAccountKeyDeliveryAccessControlArgs) ToServiceAccountKeyDeliveryAccessControlOutputWithContext(ctx context.Context) ServiceAccountKeyDeliveryAccessControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountKeyDeliveryAccessControlOutput)
}

func (i ServiceAccountKeyDeliveryAccessControlArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceAccountKeyDeliveryAccessControl] {
	return pulumix.Output[ServiceAccountKeyDeliveryAccessControl]{
		OutputState: i.ToServiceAccountKeyDeliveryAccessControlOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceAccountKeyDeliveryAccessControlArgs) ToServiceAccountKeyDeliveryAccessControlPtrOutput() ServiceAccountKeyDeliveryAccessControlPtrOutput {
	return i.ToServiceAccountKeyDeliveryAccessControlPtrOutputWithContext(context.Background())
}

func (i ServiceAccountKeyDeliveryAccessControlArgs) ToServiceAccountKeyDeliveryAccessControlPtrOutputWithContext(ctx context.Context) ServiceAccountKeyDeliveryAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountKeyDeliveryAccessControlOutput).ToServiceAccountKeyDeliveryAccessControlPtrOutputWithContext(ctx)
}

// ServiceAccountKeyDeliveryAccessControlPtrInput is an input type that accepts ServiceAccountKeyDeliveryAccessControlArgs, ServiceAccountKeyDeliveryAccessControlPtr and ServiceAccountKeyDeliveryAccessControlPtrOutput values.
// You can construct a concrete instance of `ServiceAccountKeyDeliveryAccessControlPtrInput` via:
//
//	        ServiceAccountKeyDeliveryAccessControlArgs{...}
//
//	or:
//
//	        nil
type ServiceAccountKeyDeliveryAccessControlPtrInput interface {
	pulumi.Input

	ToServiceAccountKeyDeliveryAccessControlPtrOutput() ServiceAccountKeyDeliveryAccessControlPtrOutput
	ToServiceAccountKeyDeliveryAccessControlPtrOutputWithContext(context.Context) ServiceAccountKeyDeliveryAccessControlPtrOutput
}

type serviceAccountKeyDeliveryAccessControlPtrType ServiceAccountKeyDeliveryAccessControlArgs

func ServiceAccountKeyDeliveryAccessControlPtr(v *ServiceAccountKeyDeliveryAccessControlArgs) ServiceAccountKeyDeliveryAccessControlPtrInput {
	return (*serviceAccountKeyDeliveryAccessControlPtrType)(v)
}

func (*serviceAccountKeyDeliveryAccessControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccountKeyDeliveryAccessControl)(nil)).Elem()
}

func (i *serviceAccountKeyDeliveryAccessControlPtrType) ToServiceAccountKeyDeliveryAccessControlPtrOutput() ServiceAccountKeyDeliveryAccessControlPtrOutput {
	return i.ToServiceAccountKeyDeliveryAccessControlPtrOutputWithContext(context.Background())
}

func (i *serviceAccountKeyDeliveryAccessControlPtrType) ToServiceAccountKeyDeliveryAccessControlPtrOutputWithContext(ctx context.Context) ServiceAccountKeyDeliveryAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountKeyDeliveryAccessControlPtrOutput)
}

func (i *serviceAccountKeyDeliveryAccessControlPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceAccountKeyDeliveryAccessControl] {
	return pulumix.Output[*ServiceAccountKeyDeliveryAccessControl]{
		OutputState: i.ToServiceAccountKeyDeliveryAccessControlPtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceAccountKeyDeliveryAccessControlOutput struct{ *pulumi.OutputState }

func (ServiceAccountKeyDeliveryAccessControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountKeyDeliveryAccessControl)(nil)).Elem()
}

func (o ServiceAccountKeyDeliveryAccessControlOutput) ToServiceAccountKeyDeliveryAccessControlOutput() ServiceAccountKeyDeliveryAccessControlOutput {
	return o
}

func (o ServiceAccountKeyDeliveryAccessControlOutput) ToServiceAccountKeyDeliveryAccessControlOutputWithContext(ctx context.Context) ServiceAccountKeyDeliveryAccessControlOutput {
	return o
}

func (o ServiceAccountKeyDeliveryAccessControlOutput) ToServiceAccountKeyDeliveryAccessControlPtrOutput() ServiceAccountKeyDeliveryAccessControlPtrOutput {
	return o.ToServiceAccountKeyDeliveryAccessControlPtrOutputWithContext(context.Background())
}

func (o ServiceAccountKeyDeliveryAccessControlOutput) ToServiceAccountKeyDeliveryAccessControlPtrOutputWithContext(ctx context.Context) ServiceAccountKeyDeliveryAccessControlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceAccountKeyDeliveryAccessControl) *ServiceAccountKeyDeliveryAccessControl {
		return &v
	}).(ServiceAccountKeyDeliveryAccessControlPtrOutput)
}

func (o ServiceAccountKeyDeliveryAccessControlOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceAccountKeyDeliveryAccessControl] {
	return pulumix.Output[ServiceAccountKeyDeliveryAccessControl]{
		OutputState: o.OutputState,
	}
}

// The Default Action to use when no rules match from `ipAllowList`. Possible values are `Allow` and `Deny`.
func (o ServiceAccountKeyDeliveryAccessControlOutput) DefaultAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAccountKeyDeliveryAccessControl) *string { return v.DefaultAction }).(pulumi.StringPtrOutput)
}

// One or more IP Addresses, or CIDR Blocks which should be able to access the Key Delivery.
func (o ServiceAccountKeyDeliveryAccessControlOutput) IpAllowLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceAccountKeyDeliveryAccessControl) []string { return v.IpAllowLists }).(pulumi.StringArrayOutput)
}

type ServiceAccountKeyDeliveryAccessControlPtrOutput struct{ *pulumi.OutputState }

func (ServiceAccountKeyDeliveryAccessControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccountKeyDeliveryAccessControl)(nil)).Elem()
}

func (o ServiceAccountKeyDeliveryAccessControlPtrOutput) ToServiceAccountKeyDeliveryAccessControlPtrOutput() ServiceAccountKeyDeliveryAccessControlPtrOutput {
	return o
}

func (o ServiceAccountKeyDeliveryAccessControlPtrOutput) ToServiceAccountKeyDeliveryAccessControlPtrOutputWithContext(ctx context.Context) ServiceAccountKeyDeliveryAccessControlPtrOutput {
	return o
}

func (o ServiceAccountKeyDeliveryAccessControlPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceAccountKeyDeliveryAccessControl] {
	return pulumix.Output[*ServiceAccountKeyDeliveryAccessControl]{
		OutputState: o.OutputState,
	}
}

func (o ServiceAccountKeyDeliveryAccessControlPtrOutput) Elem() ServiceAccountKeyDeliveryAccessControlOutput {
	return o.ApplyT(func(v *ServiceAccountKeyDeliveryAccessControl) ServiceAccountKeyDeliveryAccessControl {
		if v != nil {
			return *v
		}
		var ret ServiceAccountKeyDeliveryAccessControl
		return ret
	}).(ServiceAccountKeyDeliveryAccessControlOutput)
}

// The Default Action to use when no rules match from `ipAllowList`. Possible values are `Allow` and `Deny`.
func (o ServiceAccountKeyDeliveryAccessControlPtrOutput) DefaultAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccountKeyDeliveryAccessControl) *string {
		if v == nil {
			return nil
		}
		return v.DefaultAction
	}).(pulumi.StringPtrOutput)
}

// One or more IP Addresses, or CIDR Blocks which should be able to access the Key Delivery.
func (o ServiceAccountKeyDeliveryAccessControlPtrOutput) IpAllowLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceAccountKeyDeliveryAccessControl) []string {
		if v == nil {
			return nil
		}
		return v.IpAllowLists
	}).(pulumi.StringArrayOutput)
}

type ServiceAccountStorageAccount struct {
	// Specifies the ID of the Storage Account that will be associated with the Media Services instance.
	Id string `pulumi:"id"`
	// Specifies whether the storage account should be the primary account or not. Defaults to `false`.
	//
	// > **NOTE:** Whilst multiple `storageAccount` blocks can be specified - one of them must be set to the primary
	IsPrimary *bool `pulumi:"isPrimary"`
	// A `managedIdentity` block as defined below.
	ManagedIdentity *ServiceAccountStorageAccountManagedIdentity `pulumi:"managedIdentity"`
}

// ServiceAccountStorageAccountInput is an input type that accepts ServiceAccountStorageAccountArgs and ServiceAccountStorageAccountOutput values.
// You can construct a concrete instance of `ServiceAccountStorageAccountInput` via:
//
//	ServiceAccountStorageAccountArgs{...}
type ServiceAccountStorageAccountInput interface {
	pulumi.Input

	ToServiceAccountStorageAccountOutput() ServiceAccountStorageAccountOutput
	ToServiceAccountStorageAccountOutputWithContext(context.Context) ServiceAccountStorageAccountOutput
}

type ServiceAccountStorageAccountArgs struct {
	// Specifies the ID of the Storage Account that will be associated with the Media Services instance.
	Id pulumi.StringInput `pulumi:"id"`
	// Specifies whether the storage account should be the primary account or not. Defaults to `false`.
	//
	// > **NOTE:** Whilst multiple `storageAccount` blocks can be specified - one of them must be set to the primary
	IsPrimary pulumi.BoolPtrInput `pulumi:"isPrimary"`
	// A `managedIdentity` block as defined below.
	ManagedIdentity ServiceAccountStorageAccountManagedIdentityPtrInput `pulumi:"managedIdentity"`
}

func (ServiceAccountStorageAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountStorageAccount)(nil)).Elem()
}

func (i ServiceAccountStorageAccountArgs) ToServiceAccountStorageAccountOutput() ServiceAccountStorageAccountOutput {
	return i.ToServiceAccountStorageAccountOutputWithContext(context.Background())
}

func (i ServiceAccountStorageAccountArgs) ToServiceAccountStorageAccountOutputWithContext(ctx context.Context) ServiceAccountStorageAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountStorageAccountOutput)
}

func (i ServiceAccountStorageAccountArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceAccountStorageAccount] {
	return pulumix.Output[ServiceAccountStorageAccount]{
		OutputState: i.ToServiceAccountStorageAccountOutputWithContext(ctx).OutputState,
	}
}

// ServiceAccountStorageAccountArrayInput is an input type that accepts ServiceAccountStorageAccountArray and ServiceAccountStorageAccountArrayOutput values.
// You can construct a concrete instance of `ServiceAccountStorageAccountArrayInput` via:
//
//	ServiceAccountStorageAccountArray{ ServiceAccountStorageAccountArgs{...} }
type ServiceAccountStorageAccountArrayInput interface {
	pulumi.Input

	ToServiceAccountStorageAccountArrayOutput() ServiceAccountStorageAccountArrayOutput
	ToServiceAccountStorageAccountArrayOutputWithContext(context.Context) ServiceAccountStorageAccountArrayOutput
}

type ServiceAccountStorageAccountArray []ServiceAccountStorageAccountInput

func (ServiceAccountStorageAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceAccountStorageAccount)(nil)).Elem()
}

func (i ServiceAccountStorageAccountArray) ToServiceAccountStorageAccountArrayOutput() ServiceAccountStorageAccountArrayOutput {
	return i.ToServiceAccountStorageAccountArrayOutputWithContext(context.Background())
}

func (i ServiceAccountStorageAccountArray) ToServiceAccountStorageAccountArrayOutputWithContext(ctx context.Context) ServiceAccountStorageAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountStorageAccountArrayOutput)
}

func (i ServiceAccountStorageAccountArray) ToOutput(ctx context.Context) pulumix.Output[[]ServiceAccountStorageAccount] {
	return pulumix.Output[[]ServiceAccountStorageAccount]{
		OutputState: i.ToServiceAccountStorageAccountArrayOutputWithContext(ctx).OutputState,
	}
}

type ServiceAccountStorageAccountOutput struct{ *pulumi.OutputState }

func (ServiceAccountStorageAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountStorageAccount)(nil)).Elem()
}

func (o ServiceAccountStorageAccountOutput) ToServiceAccountStorageAccountOutput() ServiceAccountStorageAccountOutput {
	return o
}

func (o ServiceAccountStorageAccountOutput) ToServiceAccountStorageAccountOutputWithContext(ctx context.Context) ServiceAccountStorageAccountOutput {
	return o
}

func (o ServiceAccountStorageAccountOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceAccountStorageAccount] {
	return pulumix.Output[ServiceAccountStorageAccount]{
		OutputState: o.OutputState,
	}
}

// Specifies the ID of the Storage Account that will be associated with the Media Services instance.
func (o ServiceAccountStorageAccountOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceAccountStorageAccount) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies whether the storage account should be the primary account or not. Defaults to `false`.
//
// > **NOTE:** Whilst multiple `storageAccount` blocks can be specified - one of them must be set to the primary
func (o ServiceAccountStorageAccountOutput) IsPrimary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceAccountStorageAccount) *bool { return v.IsPrimary }).(pulumi.BoolPtrOutput)
}

// A `managedIdentity` block as defined below.
func (o ServiceAccountStorageAccountOutput) ManagedIdentity() ServiceAccountStorageAccountManagedIdentityPtrOutput {
	return o.ApplyT(func(v ServiceAccountStorageAccount) *ServiceAccountStorageAccountManagedIdentity {
		return v.ManagedIdentity
	}).(ServiceAccountStorageAccountManagedIdentityPtrOutput)
}

type ServiceAccountStorageAccountArrayOutput struct{ *pulumi.OutputState }

func (ServiceAccountStorageAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceAccountStorageAccount)(nil)).Elem()
}

func (o ServiceAccountStorageAccountArrayOutput) ToServiceAccountStorageAccountArrayOutput() ServiceAccountStorageAccountArrayOutput {
	return o
}

func (o ServiceAccountStorageAccountArrayOutput) ToServiceAccountStorageAccountArrayOutputWithContext(ctx context.Context) ServiceAccountStorageAccountArrayOutput {
	return o
}

func (o ServiceAccountStorageAccountArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ServiceAccountStorageAccount] {
	return pulumix.Output[[]ServiceAccountStorageAccount]{
		OutputState: o.OutputState,
	}
}

func (o ServiceAccountStorageAccountArrayOutput) Index(i pulumi.IntInput) ServiceAccountStorageAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceAccountStorageAccount {
		return vs[0].([]ServiceAccountStorageAccount)[vs[1].(int)]
	}).(ServiceAccountStorageAccountOutput)
}

type ServiceAccountStorageAccountManagedIdentity struct {
	// Whether to use System Assigned Identity. Possible Values are `true` and `false`.
	UseSystemAssignedIdentity *bool `pulumi:"useSystemAssignedIdentity"`
	// The ID of the User Assigned Identity. This value can only be set when `useSystemAssignedIdentity` is `false`
	UserAssignedIdentityId *string `pulumi:"userAssignedIdentityId"`
}

// ServiceAccountStorageAccountManagedIdentityInput is an input type that accepts ServiceAccountStorageAccountManagedIdentityArgs and ServiceAccountStorageAccountManagedIdentityOutput values.
// You can construct a concrete instance of `ServiceAccountStorageAccountManagedIdentityInput` via:
//
//	ServiceAccountStorageAccountManagedIdentityArgs{...}
type ServiceAccountStorageAccountManagedIdentityInput interface {
	pulumi.Input

	ToServiceAccountStorageAccountManagedIdentityOutput() ServiceAccountStorageAccountManagedIdentityOutput
	ToServiceAccountStorageAccountManagedIdentityOutputWithContext(context.Context) ServiceAccountStorageAccountManagedIdentityOutput
}

type ServiceAccountStorageAccountManagedIdentityArgs struct {
	// Whether to use System Assigned Identity. Possible Values are `true` and `false`.
	UseSystemAssignedIdentity pulumi.BoolPtrInput `pulumi:"useSystemAssignedIdentity"`
	// The ID of the User Assigned Identity. This value can only be set when `useSystemAssignedIdentity` is `false`
	UserAssignedIdentityId pulumi.StringPtrInput `pulumi:"userAssignedIdentityId"`
}

func (ServiceAccountStorageAccountManagedIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountStorageAccountManagedIdentity)(nil)).Elem()
}

func (i ServiceAccountStorageAccountManagedIdentityArgs) ToServiceAccountStorageAccountManagedIdentityOutput() ServiceAccountStorageAccountManagedIdentityOutput {
	return i.ToServiceAccountStorageAccountManagedIdentityOutputWithContext(context.Background())
}

func (i ServiceAccountStorageAccountManagedIdentityArgs) ToServiceAccountStorageAccountManagedIdentityOutputWithContext(ctx context.Context) ServiceAccountStorageAccountManagedIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountStorageAccountManagedIdentityOutput)
}

func (i ServiceAccountStorageAccountManagedIdentityArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceAccountStorageAccountManagedIdentity] {
	return pulumix.Output[ServiceAccountStorageAccountManagedIdentity]{
		OutputState: i.ToServiceAccountStorageAccountManagedIdentityOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceAccountStorageAccountManagedIdentityArgs) ToServiceAccountStorageAccountManagedIdentityPtrOutput() ServiceAccountStorageAccountManagedIdentityPtrOutput {
	return i.ToServiceAccountStorageAccountManagedIdentityPtrOutputWithContext(context.Background())
}

func (i ServiceAccountStorageAccountManagedIdentityArgs) ToServiceAccountStorageAccountManagedIdentityPtrOutputWithContext(ctx context.Context) ServiceAccountStorageAccountManagedIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountStorageAccountManagedIdentityOutput).ToServiceAccountStorageAccountManagedIdentityPtrOutputWithContext(ctx)
}

// ServiceAccountStorageAccountManagedIdentityPtrInput is an input type that accepts ServiceAccountStorageAccountManagedIdentityArgs, ServiceAccountStorageAccountManagedIdentityPtr and ServiceAccountStorageAccountManagedIdentityPtrOutput values.
// You can construct a concrete instance of `ServiceAccountStorageAccountManagedIdentityPtrInput` via:
//
//	        ServiceAccountStorageAccountManagedIdentityArgs{...}
//
//	or:
//
//	        nil
type ServiceAccountStorageAccountManagedIdentityPtrInput interface {
	pulumi.Input

	ToServiceAccountStorageAccountManagedIdentityPtrOutput() ServiceAccountStorageAccountManagedIdentityPtrOutput
	ToServiceAccountStorageAccountManagedIdentityPtrOutputWithContext(context.Context) ServiceAccountStorageAccountManagedIdentityPtrOutput
}

type serviceAccountStorageAccountManagedIdentityPtrType ServiceAccountStorageAccountManagedIdentityArgs

func ServiceAccountStorageAccountManagedIdentityPtr(v *ServiceAccountStorageAccountManagedIdentityArgs) ServiceAccountStorageAccountManagedIdentityPtrInput {
	return (*serviceAccountStorageAccountManagedIdentityPtrType)(v)
}

func (*serviceAccountStorageAccountManagedIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccountStorageAccountManagedIdentity)(nil)).Elem()
}

func (i *serviceAccountStorageAccountManagedIdentityPtrType) ToServiceAccountStorageAccountManagedIdentityPtrOutput() ServiceAccountStorageAccountManagedIdentityPtrOutput {
	return i.ToServiceAccountStorageAccountManagedIdentityPtrOutputWithContext(context.Background())
}

func (i *serviceAccountStorageAccountManagedIdentityPtrType) ToServiceAccountStorageAccountManagedIdentityPtrOutputWithContext(ctx context.Context) ServiceAccountStorageAccountManagedIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountStorageAccountManagedIdentityPtrOutput)
}

func (i *serviceAccountStorageAccountManagedIdentityPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServiceAccountStorageAccountManagedIdentity] {
	return pulumix.Output[*ServiceAccountStorageAccountManagedIdentity]{
		OutputState: i.ToServiceAccountStorageAccountManagedIdentityPtrOutputWithContext(ctx).OutputState,
	}
}

type ServiceAccountStorageAccountManagedIdentityOutput struct{ *pulumi.OutputState }

func (ServiceAccountStorageAccountManagedIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountStorageAccountManagedIdentity)(nil)).Elem()
}

func (o ServiceAccountStorageAccountManagedIdentityOutput) ToServiceAccountStorageAccountManagedIdentityOutput() ServiceAccountStorageAccountManagedIdentityOutput {
	return o
}

func (o ServiceAccountStorageAccountManagedIdentityOutput) ToServiceAccountStorageAccountManagedIdentityOutputWithContext(ctx context.Context) ServiceAccountStorageAccountManagedIdentityOutput {
	return o
}

func (o ServiceAccountStorageAccountManagedIdentityOutput) ToServiceAccountStorageAccountManagedIdentityPtrOutput() ServiceAccountStorageAccountManagedIdentityPtrOutput {
	return o.ToServiceAccountStorageAccountManagedIdentityPtrOutputWithContext(context.Background())
}

func (o ServiceAccountStorageAccountManagedIdentityOutput) ToServiceAccountStorageAccountManagedIdentityPtrOutputWithContext(ctx context.Context) ServiceAccountStorageAccountManagedIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceAccountStorageAccountManagedIdentity) *ServiceAccountStorageAccountManagedIdentity {
		return &v
	}).(ServiceAccountStorageAccountManagedIdentityPtrOutput)
}

func (o ServiceAccountStorageAccountManagedIdentityOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceAccountStorageAccountManagedIdentity] {
	return pulumix.Output[ServiceAccountStorageAccountManagedIdentity]{
		OutputState: o.OutputState,
	}
}

// Whether to use System Assigned Identity. Possible Values are `true` and `false`.
func (o ServiceAccountStorageAccountManagedIdentityOutput) UseSystemAssignedIdentity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceAccountStorageAccountManagedIdentity) *bool { return v.UseSystemAssignedIdentity }).(pulumi.BoolPtrOutput)
}

// The ID of the User Assigned Identity. This value can only be set when `useSystemAssignedIdentity` is `false`
func (o ServiceAccountStorageAccountManagedIdentityOutput) UserAssignedIdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAccountStorageAccountManagedIdentity) *string { return v.UserAssignedIdentityId }).(pulumi.StringPtrOutput)
}

type ServiceAccountStorageAccountManagedIdentityPtrOutput struct{ *pulumi.OutputState }

func (ServiceAccountStorageAccountManagedIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccountStorageAccountManagedIdentity)(nil)).Elem()
}

func (o ServiceAccountStorageAccountManagedIdentityPtrOutput) ToServiceAccountStorageAccountManagedIdentityPtrOutput() ServiceAccountStorageAccountManagedIdentityPtrOutput {
	return o
}

func (o ServiceAccountStorageAccountManagedIdentityPtrOutput) ToServiceAccountStorageAccountManagedIdentityPtrOutputWithContext(ctx context.Context) ServiceAccountStorageAccountManagedIdentityPtrOutput {
	return o
}

func (o ServiceAccountStorageAccountManagedIdentityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceAccountStorageAccountManagedIdentity] {
	return pulumix.Output[*ServiceAccountStorageAccountManagedIdentity]{
		OutputState: o.OutputState,
	}
}

func (o ServiceAccountStorageAccountManagedIdentityPtrOutput) Elem() ServiceAccountStorageAccountManagedIdentityOutput {
	return o.ApplyT(func(v *ServiceAccountStorageAccountManagedIdentity) ServiceAccountStorageAccountManagedIdentity {
		if v != nil {
			return *v
		}
		var ret ServiceAccountStorageAccountManagedIdentity
		return ret
	}).(ServiceAccountStorageAccountManagedIdentityOutput)
}

// Whether to use System Assigned Identity. Possible Values are `true` and `false`.
func (o ServiceAccountStorageAccountManagedIdentityPtrOutput) UseSystemAssignedIdentity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceAccountStorageAccountManagedIdentity) *bool {
		if v == nil {
			return nil
		}
		return v.UseSystemAssignedIdentity
	}).(pulumi.BoolPtrOutput)
}

// The ID of the User Assigned Identity. This value can only be set when `useSystemAssignedIdentity` is `false`
func (o ServiceAccountStorageAccountManagedIdentityPtrOutput) UserAssignedIdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccountStorageAccountManagedIdentity) *string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentityId
	}).(pulumi.StringPtrOutput)
}

type StreamingEndpointAccessControl struct {
	// One or more `akamaiSignatureHeaderAuthenticationKey` blocks as defined below.
	AkamaiSignatureHeaderAuthenticationKeys []StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKey `pulumi:"akamaiSignatureHeaderAuthenticationKeys"`
	// A `ipAllow` block as defined below.
	IpAllows []StreamingEndpointAccessControlIpAllow `pulumi:"ipAllows"`
}

// StreamingEndpointAccessControlInput is an input type that accepts StreamingEndpointAccessControlArgs and StreamingEndpointAccessControlOutput values.
// You can construct a concrete instance of `StreamingEndpointAccessControlInput` via:
//
//	StreamingEndpointAccessControlArgs{...}
type StreamingEndpointAccessControlInput interface {
	pulumi.Input

	ToStreamingEndpointAccessControlOutput() StreamingEndpointAccessControlOutput
	ToStreamingEndpointAccessControlOutputWithContext(context.Context) StreamingEndpointAccessControlOutput
}

type StreamingEndpointAccessControlArgs struct {
	// One or more `akamaiSignatureHeaderAuthenticationKey` blocks as defined below.
	AkamaiSignatureHeaderAuthenticationKeys StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayInput `pulumi:"akamaiSignatureHeaderAuthenticationKeys"`
	// A `ipAllow` block as defined below.
	IpAllows StreamingEndpointAccessControlIpAllowArrayInput `pulumi:"ipAllows"`
}

func (StreamingEndpointAccessControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingEndpointAccessControl)(nil)).Elem()
}

func (i StreamingEndpointAccessControlArgs) ToStreamingEndpointAccessControlOutput() StreamingEndpointAccessControlOutput {
	return i.ToStreamingEndpointAccessControlOutputWithContext(context.Background())
}

func (i StreamingEndpointAccessControlArgs) ToStreamingEndpointAccessControlOutputWithContext(ctx context.Context) StreamingEndpointAccessControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointAccessControlOutput)
}

func (i StreamingEndpointAccessControlArgs) ToOutput(ctx context.Context) pulumix.Output[StreamingEndpointAccessControl] {
	return pulumix.Output[StreamingEndpointAccessControl]{
		OutputState: i.ToStreamingEndpointAccessControlOutputWithContext(ctx).OutputState,
	}
}

func (i StreamingEndpointAccessControlArgs) ToStreamingEndpointAccessControlPtrOutput() StreamingEndpointAccessControlPtrOutput {
	return i.ToStreamingEndpointAccessControlPtrOutputWithContext(context.Background())
}

func (i StreamingEndpointAccessControlArgs) ToStreamingEndpointAccessControlPtrOutputWithContext(ctx context.Context) StreamingEndpointAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointAccessControlOutput).ToStreamingEndpointAccessControlPtrOutputWithContext(ctx)
}

// StreamingEndpointAccessControlPtrInput is an input type that accepts StreamingEndpointAccessControlArgs, StreamingEndpointAccessControlPtr and StreamingEndpointAccessControlPtrOutput values.
// You can construct a concrete instance of `StreamingEndpointAccessControlPtrInput` via:
//
//	        StreamingEndpointAccessControlArgs{...}
//
//	or:
//
//	        nil
type StreamingEndpointAccessControlPtrInput interface {
	pulumi.Input

	ToStreamingEndpointAccessControlPtrOutput() StreamingEndpointAccessControlPtrOutput
	ToStreamingEndpointAccessControlPtrOutputWithContext(context.Context) StreamingEndpointAccessControlPtrOutput
}

type streamingEndpointAccessControlPtrType StreamingEndpointAccessControlArgs

func StreamingEndpointAccessControlPtr(v *StreamingEndpointAccessControlArgs) StreamingEndpointAccessControlPtrInput {
	return (*streamingEndpointAccessControlPtrType)(v)
}

func (*streamingEndpointAccessControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingEndpointAccessControl)(nil)).Elem()
}

func (i *streamingEndpointAccessControlPtrType) ToStreamingEndpointAccessControlPtrOutput() StreamingEndpointAccessControlPtrOutput {
	return i.ToStreamingEndpointAccessControlPtrOutputWithContext(context.Background())
}

func (i *streamingEndpointAccessControlPtrType) ToStreamingEndpointAccessControlPtrOutputWithContext(ctx context.Context) StreamingEndpointAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointAccessControlPtrOutput)
}

func (i *streamingEndpointAccessControlPtrType) ToOutput(ctx context.Context) pulumix.Output[*StreamingEndpointAccessControl] {
	return pulumix.Output[*StreamingEndpointAccessControl]{
		OutputState: i.ToStreamingEndpointAccessControlPtrOutputWithContext(ctx).OutputState,
	}
}

type StreamingEndpointAccessControlOutput struct{ *pulumi.OutputState }

func (StreamingEndpointAccessControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingEndpointAccessControl)(nil)).Elem()
}

func (o StreamingEndpointAccessControlOutput) ToStreamingEndpointAccessControlOutput() StreamingEndpointAccessControlOutput {
	return o
}

func (o StreamingEndpointAccessControlOutput) ToStreamingEndpointAccessControlOutputWithContext(ctx context.Context) StreamingEndpointAccessControlOutput {
	return o
}

func (o StreamingEndpointAccessControlOutput) ToStreamingEndpointAccessControlPtrOutput() StreamingEndpointAccessControlPtrOutput {
	return o.ToStreamingEndpointAccessControlPtrOutputWithContext(context.Background())
}

func (o StreamingEndpointAccessControlOutput) ToStreamingEndpointAccessControlPtrOutputWithContext(ctx context.Context) StreamingEndpointAccessControlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamingEndpointAccessControl) *StreamingEndpointAccessControl {
		return &v
	}).(StreamingEndpointAccessControlPtrOutput)
}

func (o StreamingEndpointAccessControlOutput) ToOutput(ctx context.Context) pulumix.Output[StreamingEndpointAccessControl] {
	return pulumix.Output[StreamingEndpointAccessControl]{
		OutputState: o.OutputState,
	}
}

// One or more `akamaiSignatureHeaderAuthenticationKey` blocks as defined below.
func (o StreamingEndpointAccessControlOutput) AkamaiSignatureHeaderAuthenticationKeys() StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput {
	return o.ApplyT(func(v StreamingEndpointAccessControl) []StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKey {
		return v.AkamaiSignatureHeaderAuthenticationKeys
	}).(StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput)
}

// A `ipAllow` block as defined below.
func (o StreamingEndpointAccessControlOutput) IpAllows() StreamingEndpointAccessControlIpAllowArrayOutput {
	return o.ApplyT(func(v StreamingEndpointAccessControl) []StreamingEndpointAccessControlIpAllow { return v.IpAllows }).(StreamingEndpointAccessControlIpAllowArrayOutput)
}

type StreamingEndpointAccessControlPtrOutput struct{ *pulumi.OutputState }

func (StreamingEndpointAccessControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingEndpointAccessControl)(nil)).Elem()
}

func (o StreamingEndpointAccessControlPtrOutput) ToStreamingEndpointAccessControlPtrOutput() StreamingEndpointAccessControlPtrOutput {
	return o
}

func (o StreamingEndpointAccessControlPtrOutput) ToStreamingEndpointAccessControlPtrOutputWithContext(ctx context.Context) StreamingEndpointAccessControlPtrOutput {
	return o
}

func (o StreamingEndpointAccessControlPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*StreamingEndpointAccessControl] {
	return pulumix.Output[*StreamingEndpointAccessControl]{
		OutputState: o.OutputState,
	}
}

func (o StreamingEndpointAccessControlPtrOutput) Elem() StreamingEndpointAccessControlOutput {
	return o.ApplyT(func(v *StreamingEndpointAccessControl) StreamingEndpointAccessControl {
		if v != nil {
			return *v
		}
		var ret StreamingEndpointAccessControl
		return ret
	}).(StreamingEndpointAccessControlOutput)
}

// One or more `akamaiSignatureHeaderAuthenticationKey` blocks as defined below.
func (o StreamingEndpointAccessControlPtrOutput) AkamaiSignatureHeaderAuthenticationKeys() StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput {
	return o.ApplyT(func(v *StreamingEndpointAccessControl) []StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKey {
		if v == nil {
			return nil
		}
		return v.AkamaiSignatureHeaderAuthenticationKeys
	}).(StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput)
}

// A `ipAllow` block as defined below.
func (o StreamingEndpointAccessControlPtrOutput) IpAllows() StreamingEndpointAccessControlIpAllowArrayOutput {
	return o.ApplyT(func(v *StreamingEndpointAccessControl) []StreamingEndpointAccessControlIpAllow {
		if v == nil {
			return nil
		}
		return v.IpAllows
	}).(StreamingEndpointAccessControlIpAllowArrayOutput)
}

type StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKey struct {
	// Authentication key.
	Base64Key *string `pulumi:"base64Key"`
	// The expiration time of the authentication key.
	Expiration *string `pulumi:"expiration"`
	// Identifier of the key.
	Identifier *string `pulumi:"identifier"`
}

// StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyInput is an input type that accepts StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArgs and StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput values.
// You can construct a concrete instance of `StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyInput` via:
//
//	StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArgs{...}
type StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyInput interface {
	pulumi.Input

	ToStreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput() StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput
	ToStreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutputWithContext(context.Context) StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput
}

type StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArgs struct {
	// Authentication key.
	Base64Key pulumi.StringPtrInput `pulumi:"base64Key"`
	// The expiration time of the authentication key.
	Expiration pulumi.StringPtrInput `pulumi:"expiration"`
	// Identifier of the key.
	Identifier pulumi.StringPtrInput `pulumi:"identifier"`
}

func (StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKey)(nil)).Elem()
}

func (i StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArgs) ToStreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput() StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput {
	return i.ToStreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutputWithContext(context.Background())
}

func (i StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArgs) ToStreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutputWithContext(ctx context.Context) StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput)
}

func (i StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArgs) ToOutput(ctx context.Context) pulumix.Output[StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKey] {
	return pulumix.Output[StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKey]{
		OutputState: i.ToStreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutputWithContext(ctx).OutputState,
	}
}

// StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayInput is an input type that accepts StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArray and StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput values.
// You can construct a concrete instance of `StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayInput` via:
//
//	StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArray{ StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArgs{...} }
type StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayInput interface {
	pulumi.Input

	ToStreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput() StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput
	ToStreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutputWithContext(context.Context) StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput
}

type StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArray []StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyInput

func (StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKey)(nil)).Elem()
}

func (i StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArray) ToStreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput() StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput {
	return i.ToStreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutputWithContext(context.Background())
}

func (i StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArray) ToStreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutputWithContext(ctx context.Context) StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput)
}

func (i StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArray) ToOutput(ctx context.Context) pulumix.Output[[]StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKey] {
	return pulumix.Output[[]StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKey]{
		OutputState: i.ToStreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutputWithContext(ctx).OutputState,
	}
}

type StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput struct{ *pulumi.OutputState }

func (StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKey)(nil)).Elem()
}

func (o StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput) ToStreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput() StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput {
	return o
}

func (o StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput) ToStreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutputWithContext(ctx context.Context) StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput {
	return o
}

func (o StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput) ToOutput(ctx context.Context) pulumix.Output[StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKey] {
	return pulumix.Output[StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKey]{
		OutputState: o.OutputState,
	}
}

// Authentication key.
func (o StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput) Base64Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKey) *string {
		return v.Base64Key
	}).(pulumi.StringPtrOutput)
}

// The expiration time of the authentication key.
func (o StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput) Expiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKey) *string {
		return v.Expiration
	}).(pulumi.StringPtrOutput)
}

// Identifier of the key.
func (o StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKey) *string {
		return v.Identifier
	}).(pulumi.StringPtrOutput)
}

type StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput struct{ *pulumi.OutputState }

func (StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKey)(nil)).Elem()
}

func (o StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput) ToStreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput() StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput {
	return o
}

func (o StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput) ToStreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutputWithContext(ctx context.Context) StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput {
	return o
}

func (o StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKey] {
	return pulumix.Output[[]StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKey]{
		OutputState: o.OutputState,
	}
}

func (o StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput) Index(i pulumi.IntInput) StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKey {
		return vs[0].([]StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKey)[vs[1].(int)]
	}).(StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput)
}

type StreamingEndpointAccessControlIpAllow struct {
	// The IP address to allow.
	Address *string `pulumi:"address"`
	// The friendly name for the IP address range.
	Name *string `pulumi:"name"`
	// The subnet mask prefix length (see CIDR notation).
	SubnetPrefixLength *int `pulumi:"subnetPrefixLength"`
}

// StreamingEndpointAccessControlIpAllowInput is an input type that accepts StreamingEndpointAccessControlIpAllowArgs and StreamingEndpointAccessControlIpAllowOutput values.
// You can construct a concrete instance of `StreamingEndpointAccessControlIpAllowInput` via:
//
//	StreamingEndpointAccessControlIpAllowArgs{...}
type StreamingEndpointAccessControlIpAllowInput interface {
	pulumi.Input

	ToStreamingEndpointAccessControlIpAllowOutput() StreamingEndpointAccessControlIpAllowOutput
	ToStreamingEndpointAccessControlIpAllowOutputWithContext(context.Context) StreamingEndpointAccessControlIpAllowOutput
}

type StreamingEndpointAccessControlIpAllowArgs struct {
	// The IP address to allow.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The friendly name for the IP address range.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The subnet mask prefix length (see CIDR notation).
	SubnetPrefixLength pulumi.IntPtrInput `pulumi:"subnetPrefixLength"`
}

func (StreamingEndpointAccessControlIpAllowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingEndpointAccessControlIpAllow)(nil)).Elem()
}

func (i StreamingEndpointAccessControlIpAllowArgs) ToStreamingEndpointAccessControlIpAllowOutput() StreamingEndpointAccessControlIpAllowOutput {
	return i.ToStreamingEndpointAccessControlIpAllowOutputWithContext(context.Background())
}

func (i StreamingEndpointAccessControlIpAllowArgs) ToStreamingEndpointAccessControlIpAllowOutputWithContext(ctx context.Context) StreamingEndpointAccessControlIpAllowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointAccessControlIpAllowOutput)
}

func (i StreamingEndpointAccessControlIpAllowArgs) ToOutput(ctx context.Context) pulumix.Output[StreamingEndpointAccessControlIpAllow] {
	return pulumix.Output[StreamingEndpointAccessControlIpAllow]{
		OutputState: i.ToStreamingEndpointAccessControlIpAllowOutputWithContext(ctx).OutputState,
	}
}

// StreamingEndpointAccessControlIpAllowArrayInput is an input type that accepts StreamingEndpointAccessControlIpAllowArray and StreamingEndpointAccessControlIpAllowArrayOutput values.
// You can construct a concrete instance of `StreamingEndpointAccessControlIpAllowArrayInput` via:
//
//	StreamingEndpointAccessControlIpAllowArray{ StreamingEndpointAccessControlIpAllowArgs{...} }
type StreamingEndpointAccessControlIpAllowArrayInput interface {
	pulumi.Input

	ToStreamingEndpointAccessControlIpAllowArrayOutput() StreamingEndpointAccessControlIpAllowArrayOutput
	ToStreamingEndpointAccessControlIpAllowArrayOutputWithContext(context.Context) StreamingEndpointAccessControlIpAllowArrayOutput
}

type StreamingEndpointAccessControlIpAllowArray []StreamingEndpointAccessControlIpAllowInput

func (StreamingEndpointAccessControlIpAllowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingEndpointAccessControlIpAllow)(nil)).Elem()
}

func (i StreamingEndpointAccessControlIpAllowArray) ToStreamingEndpointAccessControlIpAllowArrayOutput() StreamingEndpointAccessControlIpAllowArrayOutput {
	return i.ToStreamingEndpointAccessControlIpAllowArrayOutputWithContext(context.Background())
}

func (i StreamingEndpointAccessControlIpAllowArray) ToStreamingEndpointAccessControlIpAllowArrayOutputWithContext(ctx context.Context) StreamingEndpointAccessControlIpAllowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointAccessControlIpAllowArrayOutput)
}

func (i StreamingEndpointAccessControlIpAllowArray) ToOutput(ctx context.Context) pulumix.Output[[]StreamingEndpointAccessControlIpAllow] {
	return pulumix.Output[[]StreamingEndpointAccessControlIpAllow]{
		OutputState: i.ToStreamingEndpointAccessControlIpAllowArrayOutputWithContext(ctx).OutputState,
	}
}

type StreamingEndpointAccessControlIpAllowOutput struct{ *pulumi.OutputState }

func (StreamingEndpointAccessControlIpAllowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingEndpointAccessControlIpAllow)(nil)).Elem()
}

func (o StreamingEndpointAccessControlIpAllowOutput) ToStreamingEndpointAccessControlIpAllowOutput() StreamingEndpointAccessControlIpAllowOutput {
	return o
}

func (o StreamingEndpointAccessControlIpAllowOutput) ToStreamingEndpointAccessControlIpAllowOutputWithContext(ctx context.Context) StreamingEndpointAccessControlIpAllowOutput {
	return o
}

func (o StreamingEndpointAccessControlIpAllowOutput) ToOutput(ctx context.Context) pulumix.Output[StreamingEndpointAccessControlIpAllow] {
	return pulumix.Output[StreamingEndpointAccessControlIpAllow]{
		OutputState: o.OutputState,
	}
}

// The IP address to allow.
func (o StreamingEndpointAccessControlIpAllowOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingEndpointAccessControlIpAllow) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The friendly name for the IP address range.
func (o StreamingEndpointAccessControlIpAllowOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingEndpointAccessControlIpAllow) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The subnet mask prefix length (see CIDR notation).
func (o StreamingEndpointAccessControlIpAllowOutput) SubnetPrefixLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamingEndpointAccessControlIpAllow) *int { return v.SubnetPrefixLength }).(pulumi.IntPtrOutput)
}

type StreamingEndpointAccessControlIpAllowArrayOutput struct{ *pulumi.OutputState }

func (StreamingEndpointAccessControlIpAllowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingEndpointAccessControlIpAllow)(nil)).Elem()
}

func (o StreamingEndpointAccessControlIpAllowArrayOutput) ToStreamingEndpointAccessControlIpAllowArrayOutput() StreamingEndpointAccessControlIpAllowArrayOutput {
	return o
}

func (o StreamingEndpointAccessControlIpAllowArrayOutput) ToStreamingEndpointAccessControlIpAllowArrayOutputWithContext(ctx context.Context) StreamingEndpointAccessControlIpAllowArrayOutput {
	return o
}

func (o StreamingEndpointAccessControlIpAllowArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]StreamingEndpointAccessControlIpAllow] {
	return pulumix.Output[[]StreamingEndpointAccessControlIpAllow]{
		OutputState: o.OutputState,
	}
}

func (o StreamingEndpointAccessControlIpAllowArrayOutput) Index(i pulumi.IntInput) StreamingEndpointAccessControlIpAllowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamingEndpointAccessControlIpAllow {
		return vs[0].([]StreamingEndpointAccessControlIpAllow)[vs[1].(int)]
	}).(StreamingEndpointAccessControlIpAllowOutput)
}

type StreamingEndpointCrossSiteAccessPolicy struct {
	// The content of `clientaccesspolicy.xml` used by Silverlight.
	ClientAccessPolicy *string `pulumi:"clientAccessPolicy"`
	// The content of `crossdomain.xml` used by Silverlight.
	CrossDomainPolicy *string `pulumi:"crossDomainPolicy"`
}

// StreamingEndpointCrossSiteAccessPolicyInput is an input type that accepts StreamingEndpointCrossSiteAccessPolicyArgs and StreamingEndpointCrossSiteAccessPolicyOutput values.
// You can construct a concrete instance of `StreamingEndpointCrossSiteAccessPolicyInput` via:
//
//	StreamingEndpointCrossSiteAccessPolicyArgs{...}
type StreamingEndpointCrossSiteAccessPolicyInput interface {
	pulumi.Input

	ToStreamingEndpointCrossSiteAccessPolicyOutput() StreamingEndpointCrossSiteAccessPolicyOutput
	ToStreamingEndpointCrossSiteAccessPolicyOutputWithContext(context.Context) StreamingEndpointCrossSiteAccessPolicyOutput
}

type StreamingEndpointCrossSiteAccessPolicyArgs struct {
	// The content of `clientaccesspolicy.xml` used by Silverlight.
	ClientAccessPolicy pulumi.StringPtrInput `pulumi:"clientAccessPolicy"`
	// The content of `crossdomain.xml` used by Silverlight.
	CrossDomainPolicy pulumi.StringPtrInput `pulumi:"crossDomainPolicy"`
}

func (StreamingEndpointCrossSiteAccessPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingEndpointCrossSiteAccessPolicy)(nil)).Elem()
}

func (i StreamingEndpointCrossSiteAccessPolicyArgs) ToStreamingEndpointCrossSiteAccessPolicyOutput() StreamingEndpointCrossSiteAccessPolicyOutput {
	return i.ToStreamingEndpointCrossSiteAccessPolicyOutputWithContext(context.Background())
}

func (i StreamingEndpointCrossSiteAccessPolicyArgs) ToStreamingEndpointCrossSiteAccessPolicyOutputWithContext(ctx context.Context) StreamingEndpointCrossSiteAccessPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointCrossSiteAccessPolicyOutput)
}

func (i StreamingEndpointCrossSiteAccessPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[StreamingEndpointCrossSiteAccessPolicy] {
	return pulumix.Output[StreamingEndpointCrossSiteAccessPolicy]{
		OutputState: i.ToStreamingEndpointCrossSiteAccessPolicyOutputWithContext(ctx).OutputState,
	}
}

func (i StreamingEndpointCrossSiteAccessPolicyArgs) ToStreamingEndpointCrossSiteAccessPolicyPtrOutput() StreamingEndpointCrossSiteAccessPolicyPtrOutput {
	return i.ToStreamingEndpointCrossSiteAccessPolicyPtrOutputWithContext(context.Background())
}

func (i StreamingEndpointCrossSiteAccessPolicyArgs) ToStreamingEndpointCrossSiteAccessPolicyPtrOutputWithContext(ctx context.Context) StreamingEndpointCrossSiteAccessPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointCrossSiteAccessPolicyOutput).ToStreamingEndpointCrossSiteAccessPolicyPtrOutputWithContext(ctx)
}

// StreamingEndpointCrossSiteAccessPolicyPtrInput is an input type that accepts StreamingEndpointCrossSiteAccessPolicyArgs, StreamingEndpointCrossSiteAccessPolicyPtr and StreamingEndpointCrossSiteAccessPolicyPtrOutput values.
// You can construct a concrete instance of `StreamingEndpointCrossSiteAccessPolicyPtrInput` via:
//
//	        StreamingEndpointCrossSiteAccessPolicyArgs{...}
//
//	or:
//
//	        nil
type StreamingEndpointCrossSiteAccessPolicyPtrInput interface {
	pulumi.Input

	ToStreamingEndpointCrossSiteAccessPolicyPtrOutput() StreamingEndpointCrossSiteAccessPolicyPtrOutput
	ToStreamingEndpointCrossSiteAccessPolicyPtrOutputWithContext(context.Context) StreamingEndpointCrossSiteAccessPolicyPtrOutput
}

type streamingEndpointCrossSiteAccessPolicyPtrType StreamingEndpointCrossSiteAccessPolicyArgs

func StreamingEndpointCrossSiteAccessPolicyPtr(v *StreamingEndpointCrossSiteAccessPolicyArgs) StreamingEndpointCrossSiteAccessPolicyPtrInput {
	return (*streamingEndpointCrossSiteAccessPolicyPtrType)(v)
}

func (*streamingEndpointCrossSiteAccessPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingEndpointCrossSiteAccessPolicy)(nil)).Elem()
}

func (i *streamingEndpointCrossSiteAccessPolicyPtrType) ToStreamingEndpointCrossSiteAccessPolicyPtrOutput() StreamingEndpointCrossSiteAccessPolicyPtrOutput {
	return i.ToStreamingEndpointCrossSiteAccessPolicyPtrOutputWithContext(context.Background())
}

func (i *streamingEndpointCrossSiteAccessPolicyPtrType) ToStreamingEndpointCrossSiteAccessPolicyPtrOutputWithContext(ctx context.Context) StreamingEndpointCrossSiteAccessPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointCrossSiteAccessPolicyPtrOutput)
}

func (i *streamingEndpointCrossSiteAccessPolicyPtrType) ToOutput(ctx context.Context) pulumix.Output[*StreamingEndpointCrossSiteAccessPolicy] {
	return pulumix.Output[*StreamingEndpointCrossSiteAccessPolicy]{
		OutputState: i.ToStreamingEndpointCrossSiteAccessPolicyPtrOutputWithContext(ctx).OutputState,
	}
}

type StreamingEndpointCrossSiteAccessPolicyOutput struct{ *pulumi.OutputState }

func (StreamingEndpointCrossSiteAccessPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingEndpointCrossSiteAccessPolicy)(nil)).Elem()
}

func (o StreamingEndpointCrossSiteAccessPolicyOutput) ToStreamingEndpointCrossSiteAccessPolicyOutput() StreamingEndpointCrossSiteAccessPolicyOutput {
	return o
}

func (o StreamingEndpointCrossSiteAccessPolicyOutput) ToStreamingEndpointCrossSiteAccessPolicyOutputWithContext(ctx context.Context) StreamingEndpointCrossSiteAccessPolicyOutput {
	return o
}

func (o StreamingEndpointCrossSiteAccessPolicyOutput) ToStreamingEndpointCrossSiteAccessPolicyPtrOutput() StreamingEndpointCrossSiteAccessPolicyPtrOutput {
	return o.ToStreamingEndpointCrossSiteAccessPolicyPtrOutputWithContext(context.Background())
}

func (o StreamingEndpointCrossSiteAccessPolicyOutput) ToStreamingEndpointCrossSiteAccessPolicyPtrOutputWithContext(ctx context.Context) StreamingEndpointCrossSiteAccessPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamingEndpointCrossSiteAccessPolicy) *StreamingEndpointCrossSiteAccessPolicy {
		return &v
	}).(StreamingEndpointCrossSiteAccessPolicyPtrOutput)
}

func (o StreamingEndpointCrossSiteAccessPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[StreamingEndpointCrossSiteAccessPolicy] {
	return pulumix.Output[StreamingEndpointCrossSiteAccessPolicy]{
		OutputState: o.OutputState,
	}
}

// The content of `clientaccesspolicy.xml` used by Silverlight.
func (o StreamingEndpointCrossSiteAccessPolicyOutput) ClientAccessPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingEndpointCrossSiteAccessPolicy) *string { return v.ClientAccessPolicy }).(pulumi.StringPtrOutput)
}

// The content of `crossdomain.xml` used by Silverlight.
func (o StreamingEndpointCrossSiteAccessPolicyOutput) CrossDomainPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingEndpointCrossSiteAccessPolicy) *string { return v.CrossDomainPolicy }).(pulumi.StringPtrOutput)
}

type StreamingEndpointCrossSiteAccessPolicyPtrOutput struct{ *pulumi.OutputState }

func (StreamingEndpointCrossSiteAccessPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingEndpointCrossSiteAccessPolicy)(nil)).Elem()
}

func (o StreamingEndpointCrossSiteAccessPolicyPtrOutput) ToStreamingEndpointCrossSiteAccessPolicyPtrOutput() StreamingEndpointCrossSiteAccessPolicyPtrOutput {
	return o
}

func (o StreamingEndpointCrossSiteAccessPolicyPtrOutput) ToStreamingEndpointCrossSiteAccessPolicyPtrOutputWithContext(ctx context.Context) StreamingEndpointCrossSiteAccessPolicyPtrOutput {
	return o
}

func (o StreamingEndpointCrossSiteAccessPolicyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*StreamingEndpointCrossSiteAccessPolicy] {
	return pulumix.Output[*StreamingEndpointCrossSiteAccessPolicy]{
		OutputState: o.OutputState,
	}
}

func (o StreamingEndpointCrossSiteAccessPolicyPtrOutput) Elem() StreamingEndpointCrossSiteAccessPolicyOutput {
	return o.ApplyT(func(v *StreamingEndpointCrossSiteAccessPolicy) StreamingEndpointCrossSiteAccessPolicy {
		if v != nil {
			return *v
		}
		var ret StreamingEndpointCrossSiteAccessPolicy
		return ret
	}).(StreamingEndpointCrossSiteAccessPolicyOutput)
}

// The content of `clientaccesspolicy.xml` used by Silverlight.
func (o StreamingEndpointCrossSiteAccessPolicyPtrOutput) ClientAccessPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingEndpointCrossSiteAccessPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ClientAccessPolicy
	}).(pulumi.StringPtrOutput)
}

// The content of `crossdomain.xml` used by Silverlight.
func (o StreamingEndpointCrossSiteAccessPolicyPtrOutput) CrossDomainPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingEndpointCrossSiteAccessPolicy) *string {
		if v == nil {
			return nil
		}
		return v.CrossDomainPolicy
	}).(pulumi.StringPtrOutput)
}

type StreamingEndpointSkus struct {
	// The sku capacity of Streaming Endpoint.
	Capacity *int `pulumi:"capacity"`
	// The name which should be used for this Streaming Endpoint maximum length is `24`. Changing this forces a new Streaming Endpoint to be created.
	Name *string `pulumi:"name"`
}

// StreamingEndpointSkusInput is an input type that accepts StreamingEndpointSkusArgs and StreamingEndpointSkusOutput values.
// You can construct a concrete instance of `StreamingEndpointSkusInput` via:
//
//	StreamingEndpointSkusArgs{...}
type StreamingEndpointSkusInput interface {
	pulumi.Input

	ToStreamingEndpointSkusOutput() StreamingEndpointSkusOutput
	ToStreamingEndpointSkusOutputWithContext(context.Context) StreamingEndpointSkusOutput
}

type StreamingEndpointSkusArgs struct {
	// The sku capacity of Streaming Endpoint.
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// The name which should be used for this Streaming Endpoint maximum length is `24`. Changing this forces a new Streaming Endpoint to be created.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (StreamingEndpointSkusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingEndpointSkus)(nil)).Elem()
}

func (i StreamingEndpointSkusArgs) ToStreamingEndpointSkusOutput() StreamingEndpointSkusOutput {
	return i.ToStreamingEndpointSkusOutputWithContext(context.Background())
}

func (i StreamingEndpointSkusArgs) ToStreamingEndpointSkusOutputWithContext(ctx context.Context) StreamingEndpointSkusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointSkusOutput)
}

func (i StreamingEndpointSkusArgs) ToOutput(ctx context.Context) pulumix.Output[StreamingEndpointSkus] {
	return pulumix.Output[StreamingEndpointSkus]{
		OutputState: i.ToStreamingEndpointSkusOutputWithContext(ctx).OutputState,
	}
}

// StreamingEndpointSkusArrayInput is an input type that accepts StreamingEndpointSkusArray and StreamingEndpointSkusArrayOutput values.
// You can construct a concrete instance of `StreamingEndpointSkusArrayInput` via:
//
//	StreamingEndpointSkusArray{ StreamingEndpointSkusArgs{...} }
type StreamingEndpointSkusArrayInput interface {
	pulumi.Input

	ToStreamingEndpointSkusArrayOutput() StreamingEndpointSkusArrayOutput
	ToStreamingEndpointSkusArrayOutputWithContext(context.Context) StreamingEndpointSkusArrayOutput
}

type StreamingEndpointSkusArray []StreamingEndpointSkusInput

func (StreamingEndpointSkusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingEndpointSkus)(nil)).Elem()
}

func (i StreamingEndpointSkusArray) ToStreamingEndpointSkusArrayOutput() StreamingEndpointSkusArrayOutput {
	return i.ToStreamingEndpointSkusArrayOutputWithContext(context.Background())
}

func (i StreamingEndpointSkusArray) ToStreamingEndpointSkusArrayOutputWithContext(ctx context.Context) StreamingEndpointSkusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointSkusArrayOutput)
}

func (i StreamingEndpointSkusArray) ToOutput(ctx context.Context) pulumix.Output[[]StreamingEndpointSkus] {
	return pulumix.Output[[]StreamingEndpointSkus]{
		OutputState: i.ToStreamingEndpointSkusArrayOutputWithContext(ctx).OutputState,
	}
}

type StreamingEndpointSkusOutput struct{ *pulumi.OutputState }

func (StreamingEndpointSkusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingEndpointSkus)(nil)).Elem()
}

func (o StreamingEndpointSkusOutput) ToStreamingEndpointSkusOutput() StreamingEndpointSkusOutput {
	return o
}

func (o StreamingEndpointSkusOutput) ToStreamingEndpointSkusOutputWithContext(ctx context.Context) StreamingEndpointSkusOutput {
	return o
}

func (o StreamingEndpointSkusOutput) ToOutput(ctx context.Context) pulumix.Output[StreamingEndpointSkus] {
	return pulumix.Output[StreamingEndpointSkus]{
		OutputState: o.OutputState,
	}
}

// The sku capacity of Streaming Endpoint.
func (o StreamingEndpointSkusOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamingEndpointSkus) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// The name which should be used for this Streaming Endpoint maximum length is `24`. Changing this forces a new Streaming Endpoint to be created.
func (o StreamingEndpointSkusOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingEndpointSkus) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type StreamingEndpointSkusArrayOutput struct{ *pulumi.OutputState }

func (StreamingEndpointSkusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingEndpointSkus)(nil)).Elem()
}

func (o StreamingEndpointSkusArrayOutput) ToStreamingEndpointSkusArrayOutput() StreamingEndpointSkusArrayOutput {
	return o
}

func (o StreamingEndpointSkusArrayOutput) ToStreamingEndpointSkusArrayOutputWithContext(ctx context.Context) StreamingEndpointSkusArrayOutput {
	return o
}

func (o StreamingEndpointSkusArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]StreamingEndpointSkus] {
	return pulumix.Output[[]StreamingEndpointSkus]{
		OutputState: o.OutputState,
	}
}

func (o StreamingEndpointSkusArrayOutput) Index(i pulumi.IntInput) StreamingEndpointSkusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamingEndpointSkus {
		return vs[0].([]StreamingEndpointSkus)[vs[1].(int)]
	}).(StreamingEndpointSkusOutput)
}

type StreamingLocatorContentKey struct {
	// ID of Content Key. Changing this forces a new Streaming Locator to be created.
	ContentKeyId *string `pulumi:"contentKeyId"`
	// Label of Content Key as specified in the Streaming Policy. Changing this forces a new Streaming Locator to be created.
	LabelReferenceInStreamingPolicy *string `pulumi:"labelReferenceInStreamingPolicy"`
	// Content Key Policy used by Content Key. Changing this forces a new Streaming Locator to be created.
	PolicyName *string `pulumi:"policyName"`
	// Encryption type of Content Key. Supported values are `CommonEncryptionCbcs`, `CommonEncryptionCenc` or `EnvelopeEncryption`. Changing this forces a new Streaming Locator to be created.
	Type *string `pulumi:"type"`
	// Value of Content Key. Changing this forces a new Streaming Locator to be created.
	Value *string `pulumi:"value"`
}

// StreamingLocatorContentKeyInput is an input type that accepts StreamingLocatorContentKeyArgs and StreamingLocatorContentKeyOutput values.
// You can construct a concrete instance of `StreamingLocatorContentKeyInput` via:
//
//	StreamingLocatorContentKeyArgs{...}
type StreamingLocatorContentKeyInput interface {
	pulumi.Input

	ToStreamingLocatorContentKeyOutput() StreamingLocatorContentKeyOutput
	ToStreamingLocatorContentKeyOutputWithContext(context.Context) StreamingLocatorContentKeyOutput
}

type StreamingLocatorContentKeyArgs struct {
	// ID of Content Key. Changing this forces a new Streaming Locator to be created.
	ContentKeyId pulumi.StringPtrInput `pulumi:"contentKeyId"`
	// Label of Content Key as specified in the Streaming Policy. Changing this forces a new Streaming Locator to be created.
	LabelReferenceInStreamingPolicy pulumi.StringPtrInput `pulumi:"labelReferenceInStreamingPolicy"`
	// Content Key Policy used by Content Key. Changing this forces a new Streaming Locator to be created.
	PolicyName pulumi.StringPtrInput `pulumi:"policyName"`
	// Encryption type of Content Key. Supported values are `CommonEncryptionCbcs`, `CommonEncryptionCenc` or `EnvelopeEncryption`. Changing this forces a new Streaming Locator to be created.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Value of Content Key. Changing this forces a new Streaming Locator to be created.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (StreamingLocatorContentKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingLocatorContentKey)(nil)).Elem()
}

func (i StreamingLocatorContentKeyArgs) ToStreamingLocatorContentKeyOutput() StreamingLocatorContentKeyOutput {
	return i.ToStreamingLocatorContentKeyOutputWithContext(context.Background())
}

func (i StreamingLocatorContentKeyArgs) ToStreamingLocatorContentKeyOutputWithContext(ctx context.Context) StreamingLocatorContentKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingLocatorContentKeyOutput)
}

func (i StreamingLocatorContentKeyArgs) ToOutput(ctx context.Context) pulumix.Output[StreamingLocatorContentKey] {
	return pulumix.Output[StreamingLocatorContentKey]{
		OutputState: i.ToStreamingLocatorContentKeyOutputWithContext(ctx).OutputState,
	}
}

// StreamingLocatorContentKeyArrayInput is an input type that accepts StreamingLocatorContentKeyArray and StreamingLocatorContentKeyArrayOutput values.
// You can construct a concrete instance of `StreamingLocatorContentKeyArrayInput` via:
//
//	StreamingLocatorContentKeyArray{ StreamingLocatorContentKeyArgs{...} }
type StreamingLocatorContentKeyArrayInput interface {
	pulumi.Input

	ToStreamingLocatorContentKeyArrayOutput() StreamingLocatorContentKeyArrayOutput
	ToStreamingLocatorContentKeyArrayOutputWithContext(context.Context) StreamingLocatorContentKeyArrayOutput
}

type StreamingLocatorContentKeyArray []StreamingLocatorContentKeyInput

func (StreamingLocatorContentKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingLocatorContentKey)(nil)).Elem()
}

func (i StreamingLocatorContentKeyArray) ToStreamingLocatorContentKeyArrayOutput() StreamingLocatorContentKeyArrayOutput {
	return i.ToStreamingLocatorContentKeyArrayOutputWithContext(context.Background())
}

func (i StreamingLocatorContentKeyArray) ToStreamingLocatorContentKeyArrayOutputWithContext(ctx context.Context) StreamingLocatorContentKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingLocatorContentKeyArrayOutput)
}

func (i StreamingLocatorContentKeyArray) ToOutput(ctx context.Context) pulumix.Output[[]StreamingLocatorContentKey] {
	return pulumix.Output[[]StreamingLocatorContentKey]{
		OutputState: i.ToStreamingLocatorContentKeyArrayOutputWithContext(ctx).OutputState,
	}
}

type StreamingLocatorContentKeyOutput struct{ *pulumi.OutputState }

func (StreamingLocatorContentKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingLocatorContentKey)(nil)).Elem()
}

func (o StreamingLocatorContentKeyOutput) ToStreamingLocatorContentKeyOutput() StreamingLocatorContentKeyOutput {
	return o
}

func (o StreamingLocatorContentKeyOutput) ToStreamingLocatorContentKeyOutputWithContext(ctx context.Context) StreamingLocatorContentKeyOutput {
	return o
}

func (o StreamingLocatorContentKeyOutput) ToOutput(ctx context.Context) pulumix.Output[StreamingLocatorContentKey] {
	return pulumix.Output[StreamingLocatorContentKey]{
		OutputState: o.OutputState,
	}
}

// ID of Content Key. Changing this forces a new Streaming Locator to be created.
func (o StreamingLocatorContentKeyOutput) ContentKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingLocatorContentKey) *string { return v.ContentKeyId }).(pulumi.StringPtrOutput)
}

// Label of Content Key as specified in the Streaming Policy. Changing this forces a new Streaming Locator to be created.
func (o StreamingLocatorContentKeyOutput) LabelReferenceInStreamingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingLocatorContentKey) *string { return v.LabelReferenceInStreamingPolicy }).(pulumi.StringPtrOutput)
}

// Content Key Policy used by Content Key. Changing this forces a new Streaming Locator to be created.
func (o StreamingLocatorContentKeyOutput) PolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingLocatorContentKey) *string { return v.PolicyName }).(pulumi.StringPtrOutput)
}

// Encryption type of Content Key. Supported values are `CommonEncryptionCbcs`, `CommonEncryptionCenc` or `EnvelopeEncryption`. Changing this forces a new Streaming Locator to be created.
func (o StreamingLocatorContentKeyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingLocatorContentKey) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Value of Content Key. Changing this forces a new Streaming Locator to be created.
func (o StreamingLocatorContentKeyOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingLocatorContentKey) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type StreamingLocatorContentKeyArrayOutput struct{ *pulumi.OutputState }

func (StreamingLocatorContentKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingLocatorContentKey)(nil)).Elem()
}

func (o StreamingLocatorContentKeyArrayOutput) ToStreamingLocatorContentKeyArrayOutput() StreamingLocatorContentKeyArrayOutput {
	return o
}

func (o StreamingLocatorContentKeyArrayOutput) ToStreamingLocatorContentKeyArrayOutputWithContext(ctx context.Context) StreamingLocatorContentKeyArrayOutput {
	return o
}

func (o StreamingLocatorContentKeyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]StreamingLocatorContentKey] {
	return pulumix.Output[[]StreamingLocatorContentKey]{
		OutputState: o.OutputState,
	}
}

func (o StreamingLocatorContentKeyArrayOutput) Index(i pulumi.IntInput) StreamingLocatorContentKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamingLocatorContentKey {
		return vs[0].([]StreamingLocatorContentKey)[vs[1].(int)]
	}).(StreamingLocatorContentKeyOutput)
}

type StreamingPolicyCommonEncryptionCbcs struct {
	// A `clearKeyEncryption` block as defined below. Changing this forces a new Streaming Policy to be created.
	ClearKeyEncryption *StreamingPolicyCommonEncryptionCbcsClearKeyEncryption `pulumi:"clearKeyEncryption"`
	// A `defaultContentKey` block as defined below. Changing this forces a new Streaming Policy to be created.
	DefaultContentKey *StreamingPolicyCommonEncryptionCbcsDefaultContentKey `pulumi:"defaultContentKey"`
	// A `drmFairplay` block as defined below. Changing this forces a new Streaming Policy to be created.
	DrmFairplay *StreamingPolicyCommonEncryptionCbcsDrmFairplay `pulumi:"drmFairplay"`
	// A `enabledProtocols` block as defined below. Changing this forces a new Streaming Policy to be created.
	EnabledProtocols *StreamingPolicyCommonEncryptionCbcsEnabledProtocols `pulumi:"enabledProtocols"`
}

// StreamingPolicyCommonEncryptionCbcsInput is an input type that accepts StreamingPolicyCommonEncryptionCbcsArgs and StreamingPolicyCommonEncryptionCbcsOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCbcsInput` via:
//
//	StreamingPolicyCommonEncryptionCbcsArgs{...}
type StreamingPolicyCommonEncryptionCbcsInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCbcsOutput() StreamingPolicyCommonEncryptionCbcsOutput
	ToStreamingPolicyCommonEncryptionCbcsOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCbcsOutput
}

type StreamingPolicyCommonEncryptionCbcsArgs struct {
	// A `clearKeyEncryption` block as defined below. Changing this forces a new Streaming Policy to be created.
	ClearKeyEncryption StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrInput `pulumi:"clearKeyEncryption"`
	// A `defaultContentKey` block as defined below. Changing this forces a new Streaming Policy to be created.
	DefaultContentKey StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrInput `pulumi:"defaultContentKey"`
	// A `drmFairplay` block as defined below. Changing this forces a new Streaming Policy to be created.
	DrmFairplay StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrInput `pulumi:"drmFairplay"`
	// A `enabledProtocols` block as defined below. Changing this forces a new Streaming Policy to be created.
	EnabledProtocols StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrInput `pulumi:"enabledProtocols"`
}

func (StreamingPolicyCommonEncryptionCbcsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCbcs)(nil)).Elem()
}

func (i StreamingPolicyCommonEncryptionCbcsArgs) ToStreamingPolicyCommonEncryptionCbcsOutput() StreamingPolicyCommonEncryptionCbcsOutput {
	return i.ToStreamingPolicyCommonEncryptionCbcsOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCbcsArgs) ToStreamingPolicyCommonEncryptionCbcsOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCbcsOutput)
}

func (i StreamingPolicyCommonEncryptionCbcsArgs) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyCommonEncryptionCbcs] {
	return pulumix.Output[StreamingPolicyCommonEncryptionCbcs]{
		OutputState: i.ToStreamingPolicyCommonEncryptionCbcsOutputWithContext(ctx).OutputState,
	}
}

func (i StreamingPolicyCommonEncryptionCbcsArgs) ToStreamingPolicyCommonEncryptionCbcsPtrOutput() StreamingPolicyCommonEncryptionCbcsPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCbcsPtrOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCbcsArgs) ToStreamingPolicyCommonEncryptionCbcsPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCbcsOutput).ToStreamingPolicyCommonEncryptionCbcsPtrOutputWithContext(ctx)
}

// StreamingPolicyCommonEncryptionCbcsPtrInput is an input type that accepts StreamingPolicyCommonEncryptionCbcsArgs, StreamingPolicyCommonEncryptionCbcsPtr and StreamingPolicyCommonEncryptionCbcsPtrOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCbcsPtrInput` via:
//
//	        StreamingPolicyCommonEncryptionCbcsArgs{...}
//
//	or:
//
//	        nil
type StreamingPolicyCommonEncryptionCbcsPtrInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCbcsPtrOutput() StreamingPolicyCommonEncryptionCbcsPtrOutput
	ToStreamingPolicyCommonEncryptionCbcsPtrOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCbcsPtrOutput
}

type streamingPolicyCommonEncryptionCbcsPtrType StreamingPolicyCommonEncryptionCbcsArgs

func StreamingPolicyCommonEncryptionCbcsPtr(v *StreamingPolicyCommonEncryptionCbcsArgs) StreamingPolicyCommonEncryptionCbcsPtrInput {
	return (*streamingPolicyCommonEncryptionCbcsPtrType)(v)
}

func (*streamingPolicyCommonEncryptionCbcsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCbcs)(nil)).Elem()
}

func (i *streamingPolicyCommonEncryptionCbcsPtrType) ToStreamingPolicyCommonEncryptionCbcsPtrOutput() StreamingPolicyCommonEncryptionCbcsPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCbcsPtrOutputWithContext(context.Background())
}

func (i *streamingPolicyCommonEncryptionCbcsPtrType) ToStreamingPolicyCommonEncryptionCbcsPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCbcsPtrOutput)
}

func (i *streamingPolicyCommonEncryptionCbcsPtrType) ToOutput(ctx context.Context) pulumix.Output[*StreamingPolicyCommonEncryptionCbcs] {
	return pulumix.Output[*StreamingPolicyCommonEncryptionCbcs]{
		OutputState: i.ToStreamingPolicyCommonEncryptionCbcsPtrOutputWithContext(ctx).OutputState,
	}
}

type StreamingPolicyCommonEncryptionCbcsOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCbcsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCbcs)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCbcsOutput) ToStreamingPolicyCommonEncryptionCbcsOutput() StreamingPolicyCommonEncryptionCbcsOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsOutput) ToStreamingPolicyCommonEncryptionCbcsOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsOutput) ToStreamingPolicyCommonEncryptionCbcsPtrOutput() StreamingPolicyCommonEncryptionCbcsPtrOutput {
	return o.ToStreamingPolicyCommonEncryptionCbcsPtrOutputWithContext(context.Background())
}

func (o StreamingPolicyCommonEncryptionCbcsOutput) ToStreamingPolicyCommonEncryptionCbcsPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamingPolicyCommonEncryptionCbcs) *StreamingPolicyCommonEncryptionCbcs {
		return &v
	}).(StreamingPolicyCommonEncryptionCbcsPtrOutput)
}

func (o StreamingPolicyCommonEncryptionCbcsOutput) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyCommonEncryptionCbcs] {
	return pulumix.Output[StreamingPolicyCommonEncryptionCbcs]{
		OutputState: o.OutputState,
	}
}

// A `clearKeyEncryption` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsOutput) ClearKeyEncryption() StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCbcs) *StreamingPolicyCommonEncryptionCbcsClearKeyEncryption {
		return v.ClearKeyEncryption
	}).(StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutput)
}

// A `defaultContentKey` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsOutput) DefaultContentKey() StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCbcs) *StreamingPolicyCommonEncryptionCbcsDefaultContentKey {
		return v.DefaultContentKey
	}).(StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput)
}

// A `drmFairplay` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsOutput) DrmFairplay() StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCbcs) *StreamingPolicyCommonEncryptionCbcsDrmFairplay {
		return v.DrmFairplay
	}).(StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput)
}

// A `enabledProtocols` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsOutput) EnabledProtocols() StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCbcs) *StreamingPolicyCommonEncryptionCbcsEnabledProtocols {
		return v.EnabledProtocols
	}).(StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput)
}

type StreamingPolicyCommonEncryptionCbcsPtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCbcsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCbcs)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCbcsPtrOutput) ToStreamingPolicyCommonEncryptionCbcsPtrOutput() StreamingPolicyCommonEncryptionCbcsPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsPtrOutput) ToStreamingPolicyCommonEncryptionCbcsPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*StreamingPolicyCommonEncryptionCbcs] {
	return pulumix.Output[*StreamingPolicyCommonEncryptionCbcs]{
		OutputState: o.OutputState,
	}
}

func (o StreamingPolicyCommonEncryptionCbcsPtrOutput) Elem() StreamingPolicyCommonEncryptionCbcsOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCbcs) StreamingPolicyCommonEncryptionCbcs {
		if v != nil {
			return *v
		}
		var ret StreamingPolicyCommonEncryptionCbcs
		return ret
	}).(StreamingPolicyCommonEncryptionCbcsOutput)
}

// A `clearKeyEncryption` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsPtrOutput) ClearKeyEncryption() StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCbcs) *StreamingPolicyCommonEncryptionCbcsClearKeyEncryption {
		if v == nil {
			return nil
		}
		return v.ClearKeyEncryption
	}).(StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutput)
}

// A `defaultContentKey` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsPtrOutput) DefaultContentKey() StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCbcs) *StreamingPolicyCommonEncryptionCbcsDefaultContentKey {
		if v == nil {
			return nil
		}
		return v.DefaultContentKey
	}).(StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput)
}

// A `drmFairplay` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsPtrOutput) DrmFairplay() StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCbcs) *StreamingPolicyCommonEncryptionCbcsDrmFairplay {
		if v == nil {
			return nil
		}
		return v.DrmFairplay
	}).(StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput)
}

// A `enabledProtocols` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsPtrOutput) EnabledProtocols() StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCbcs) *StreamingPolicyCommonEncryptionCbcsEnabledProtocols {
		if v == nil {
			return nil
		}
		return v.EnabledProtocols
	}).(StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput)
}

type StreamingPolicyCommonEncryptionCbcsClearKeyEncryption struct {
	// The URL template for the custom service that delivers content keys to the end user. This is not required when using Azure Media Services for issuing keys. Changing this forces a new Streaming Policy to be created.
	//
	// > **Note** Either `clearKeyEncryption` or `drm` must be specified.
	CustomKeysAcquisitionUrlTemplate string `pulumi:"customKeysAcquisitionUrlTemplate"`
}

// StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionInput is an input type that accepts StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionArgs and StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionInput` via:
//
//	StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionArgs{...}
type StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCbcsClearKeyEncryptionOutput() StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionOutput
	ToStreamingPolicyCommonEncryptionCbcsClearKeyEncryptionOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionOutput
}

type StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionArgs struct {
	// The URL template for the custom service that delivers content keys to the end user. This is not required when using Azure Media Services for issuing keys. Changing this forces a new Streaming Policy to be created.
	//
	// > **Note** Either `clearKeyEncryption` or `drm` must be specified.
	CustomKeysAcquisitionUrlTemplate pulumi.StringInput `pulumi:"customKeysAcquisitionUrlTemplate"`
}

func (StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCbcsClearKeyEncryption)(nil)).Elem()
}

func (i StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionArgs) ToStreamingPolicyCommonEncryptionCbcsClearKeyEncryptionOutput() StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionOutput {
	return i.ToStreamingPolicyCommonEncryptionCbcsClearKeyEncryptionOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionArgs) ToStreamingPolicyCommonEncryptionCbcsClearKeyEncryptionOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionOutput)
}

func (i StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionArgs) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyCommonEncryptionCbcsClearKeyEncryption] {
	return pulumix.Output[StreamingPolicyCommonEncryptionCbcsClearKeyEncryption]{
		OutputState: i.ToStreamingPolicyCommonEncryptionCbcsClearKeyEncryptionOutputWithContext(ctx).OutputState,
	}
}

func (i StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionArgs) ToStreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutput() StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionArgs) ToStreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionOutput).ToStreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutputWithContext(ctx)
}

// StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrInput is an input type that accepts StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionArgs, StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtr and StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrInput` via:
//
//	        StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionArgs{...}
//
//	or:
//
//	        nil
type StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutput() StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutput
	ToStreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutput
}

type streamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrType StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionArgs

func StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtr(v *StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionArgs) StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrInput {
	return (*streamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrType)(v)
}

func (*streamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCbcsClearKeyEncryption)(nil)).Elem()
}

func (i *streamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrType) ToStreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutput() StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutputWithContext(context.Background())
}

func (i *streamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrType) ToStreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutput)
}

func (i *streamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrType) ToOutput(ctx context.Context) pulumix.Output[*StreamingPolicyCommonEncryptionCbcsClearKeyEncryption] {
	return pulumix.Output[*StreamingPolicyCommonEncryptionCbcsClearKeyEncryption]{
		OutputState: i.ToStreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutputWithContext(ctx).OutputState,
	}
}

type StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCbcsClearKeyEncryption)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionOutput) ToStreamingPolicyCommonEncryptionCbcsClearKeyEncryptionOutput() StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionOutput) ToStreamingPolicyCommonEncryptionCbcsClearKeyEncryptionOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionOutput) ToStreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutput() StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutput {
	return o.ToStreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutputWithContext(context.Background())
}

func (o StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionOutput) ToStreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamingPolicyCommonEncryptionCbcsClearKeyEncryption) *StreamingPolicyCommonEncryptionCbcsClearKeyEncryption {
		return &v
	}).(StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutput)
}

func (o StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionOutput) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyCommonEncryptionCbcsClearKeyEncryption] {
	return pulumix.Output[StreamingPolicyCommonEncryptionCbcsClearKeyEncryption]{
		OutputState: o.OutputState,
	}
}

// The URL template for the custom service that delivers content keys to the end user. This is not required when using Azure Media Services for issuing keys. Changing this forces a new Streaming Policy to be created.
//
// > **Note** Either `clearKeyEncryption` or `drm` must be specified.
func (o StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionOutput) CustomKeysAcquisitionUrlTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCbcsClearKeyEncryption) string {
		return v.CustomKeysAcquisitionUrlTemplate
	}).(pulumi.StringOutput)
}

type StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCbcsClearKeyEncryption)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutput) ToStreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutput() StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutput) ToStreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*StreamingPolicyCommonEncryptionCbcsClearKeyEncryption] {
	return pulumix.Output[*StreamingPolicyCommonEncryptionCbcsClearKeyEncryption]{
		OutputState: o.OutputState,
	}
}

func (o StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutput) Elem() StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCbcsClearKeyEncryption) StreamingPolicyCommonEncryptionCbcsClearKeyEncryption {
		if v != nil {
			return *v
		}
		var ret StreamingPolicyCommonEncryptionCbcsClearKeyEncryption
		return ret
	}).(StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionOutput)
}

// The URL template for the custom service that delivers content keys to the end user. This is not required when using Azure Media Services for issuing keys. Changing this forces a new Streaming Policy to be created.
//
// > **Note** Either `clearKeyEncryption` or `drm` must be specified.
func (o StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutput) CustomKeysAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCbcsClearKeyEncryption) *string {
		if v == nil {
			return nil
		}
		return &v.CustomKeysAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

type StreamingPolicyCommonEncryptionCbcsDefaultContentKey struct {
	// Label can be used to specify Content Key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
	Label *string `pulumi:"label"`
	// Policy used by Default Key. Changing this forces a new Streaming Policy to be created.
	PolicyName *string `pulumi:"policyName"`
}

// StreamingPolicyCommonEncryptionCbcsDefaultContentKeyInput is an input type that accepts StreamingPolicyCommonEncryptionCbcsDefaultContentKeyArgs and StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCbcsDefaultContentKeyInput` via:
//
//	StreamingPolicyCommonEncryptionCbcsDefaultContentKeyArgs{...}
type StreamingPolicyCommonEncryptionCbcsDefaultContentKeyInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput() StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput
	ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput
}

type StreamingPolicyCommonEncryptionCbcsDefaultContentKeyArgs struct {
	// Label can be used to specify Content Key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Policy used by Default Key. Changing this forces a new Streaming Policy to be created.
	PolicyName pulumi.StringPtrInput `pulumi:"policyName"`
}

func (StreamingPolicyCommonEncryptionCbcsDefaultContentKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCbcsDefaultContentKey)(nil)).Elem()
}

func (i StreamingPolicyCommonEncryptionCbcsDefaultContentKeyArgs) ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput() StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput {
	return i.ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCbcsDefaultContentKeyArgs) ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput)
}

func (i StreamingPolicyCommonEncryptionCbcsDefaultContentKeyArgs) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyCommonEncryptionCbcsDefaultContentKey] {
	return pulumix.Output[StreamingPolicyCommonEncryptionCbcsDefaultContentKey]{
		OutputState: i.ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutputWithContext(ctx).OutputState,
	}
}

func (i StreamingPolicyCommonEncryptionCbcsDefaultContentKeyArgs) ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput() StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCbcsDefaultContentKeyArgs) ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput).ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutputWithContext(ctx)
}

// StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrInput is an input type that accepts StreamingPolicyCommonEncryptionCbcsDefaultContentKeyArgs, StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtr and StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrInput` via:
//
//	        StreamingPolicyCommonEncryptionCbcsDefaultContentKeyArgs{...}
//
//	or:
//
//	        nil
type StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput() StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput
	ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput
}

type streamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrType StreamingPolicyCommonEncryptionCbcsDefaultContentKeyArgs

func StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtr(v *StreamingPolicyCommonEncryptionCbcsDefaultContentKeyArgs) StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrInput {
	return (*streamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrType)(v)
}

func (*streamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCbcsDefaultContentKey)(nil)).Elem()
}

func (i *streamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrType) ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput() StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutputWithContext(context.Background())
}

func (i *streamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrType) ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput)
}

func (i *streamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrType) ToOutput(ctx context.Context) pulumix.Output[*StreamingPolicyCommonEncryptionCbcsDefaultContentKey] {
	return pulumix.Output[*StreamingPolicyCommonEncryptionCbcsDefaultContentKey]{
		OutputState: i.ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutputWithContext(ctx).OutputState,
	}
}

type StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCbcsDefaultContentKey)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput) ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput() StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput) ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput) ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput() StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput {
	return o.ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutputWithContext(context.Background())
}

func (o StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput) ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamingPolicyCommonEncryptionCbcsDefaultContentKey) *StreamingPolicyCommonEncryptionCbcsDefaultContentKey {
		return &v
	}).(StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput)
}

func (o StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyCommonEncryptionCbcsDefaultContentKey] {
	return pulumix.Output[StreamingPolicyCommonEncryptionCbcsDefaultContentKey]{
		OutputState: o.OutputState,
	}
}

// Label can be used to specify Content Key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCbcsDefaultContentKey) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Policy used by Default Key. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput) PolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCbcsDefaultContentKey) *string { return v.PolicyName }).(pulumi.StringPtrOutput)
}

type StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCbcsDefaultContentKey)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput) ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput() StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput) ToStreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*StreamingPolicyCommonEncryptionCbcsDefaultContentKey] {
	return pulumix.Output[*StreamingPolicyCommonEncryptionCbcsDefaultContentKey]{
		OutputState: o.OutputState,
	}
}

func (o StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput) Elem() StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCbcsDefaultContentKey) StreamingPolicyCommonEncryptionCbcsDefaultContentKey {
		if v != nil {
			return *v
		}
		var ret StreamingPolicyCommonEncryptionCbcsDefaultContentKey
		return ret
	}).(StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput)
}

// Label can be used to specify Content Key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCbcsDefaultContentKey) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

// Policy used by Default Key. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput) PolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCbcsDefaultContentKey) *string {
		if v == nil {
			return nil
		}
		return v.PolicyName
	}).(pulumi.StringPtrOutput)
}

type StreamingPolicyCommonEncryptionCbcsDrmFairplay struct {
	// All license to be persistent or not. Changing this forces a new Streaming Policy to be created.
	AllowPersistentLicense *bool `pulumi:"allowPersistentLicense"`
	// The URL template for the custom service that delivers licenses to the end user. This is not required when using Azure Media Services for issuing licenses. Changing this forces a new Streaming Policy to be created.
	CustomLicenseAcquisitionUrlTemplate *string `pulumi:"customLicenseAcquisitionUrlTemplate"`
}

// StreamingPolicyCommonEncryptionCbcsDrmFairplayInput is an input type that accepts StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs and StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCbcsDrmFairplayInput` via:
//
//	StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs{...}
type StreamingPolicyCommonEncryptionCbcsDrmFairplayInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCbcsDrmFairplayOutput() StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput
	ToStreamingPolicyCommonEncryptionCbcsDrmFairplayOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput
}

type StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs struct {
	// All license to be persistent or not. Changing this forces a new Streaming Policy to be created.
	AllowPersistentLicense pulumi.BoolPtrInput `pulumi:"allowPersistentLicense"`
	// The URL template for the custom service that delivers licenses to the end user. This is not required when using Azure Media Services for issuing licenses. Changing this forces a new Streaming Policy to be created.
	CustomLicenseAcquisitionUrlTemplate pulumi.StringPtrInput `pulumi:"customLicenseAcquisitionUrlTemplate"`
}

func (StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCbcsDrmFairplay)(nil)).Elem()
}

func (i StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs) ToStreamingPolicyCommonEncryptionCbcsDrmFairplayOutput() StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput {
	return i.ToStreamingPolicyCommonEncryptionCbcsDrmFairplayOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs) ToStreamingPolicyCommonEncryptionCbcsDrmFairplayOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput)
}

func (i StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyCommonEncryptionCbcsDrmFairplay] {
	return pulumix.Output[StreamingPolicyCommonEncryptionCbcsDrmFairplay]{
		OutputState: i.ToStreamingPolicyCommonEncryptionCbcsDrmFairplayOutputWithContext(ctx).OutputState,
	}
}

func (i StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs) ToStreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput() StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs) ToStreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput).ToStreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutputWithContext(ctx)
}

// StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrInput is an input type that accepts StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs, StreamingPolicyCommonEncryptionCbcsDrmFairplayPtr and StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrInput` via:
//
//	        StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs{...}
//
//	or:
//
//	        nil
type StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput() StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput
	ToStreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput
}

type streamingPolicyCommonEncryptionCbcsDrmFairplayPtrType StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs

func StreamingPolicyCommonEncryptionCbcsDrmFairplayPtr(v *StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs) StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrInput {
	return (*streamingPolicyCommonEncryptionCbcsDrmFairplayPtrType)(v)
}

func (*streamingPolicyCommonEncryptionCbcsDrmFairplayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCbcsDrmFairplay)(nil)).Elem()
}

func (i *streamingPolicyCommonEncryptionCbcsDrmFairplayPtrType) ToStreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput() StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutputWithContext(context.Background())
}

func (i *streamingPolicyCommonEncryptionCbcsDrmFairplayPtrType) ToStreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput)
}

func (i *streamingPolicyCommonEncryptionCbcsDrmFairplayPtrType) ToOutput(ctx context.Context) pulumix.Output[*StreamingPolicyCommonEncryptionCbcsDrmFairplay] {
	return pulumix.Output[*StreamingPolicyCommonEncryptionCbcsDrmFairplay]{
		OutputState: i.ToStreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutputWithContext(ctx).OutputState,
	}
}

type StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCbcsDrmFairplay)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput) ToStreamingPolicyCommonEncryptionCbcsDrmFairplayOutput() StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput) ToStreamingPolicyCommonEncryptionCbcsDrmFairplayOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput) ToStreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput() StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput {
	return o.ToStreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutputWithContext(context.Background())
}

func (o StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput) ToStreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamingPolicyCommonEncryptionCbcsDrmFairplay) *StreamingPolicyCommonEncryptionCbcsDrmFairplay {
		return &v
	}).(StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput)
}

func (o StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyCommonEncryptionCbcsDrmFairplay] {
	return pulumix.Output[StreamingPolicyCommonEncryptionCbcsDrmFairplay]{
		OutputState: o.OutputState,
	}
}

// All license to be persistent or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput) AllowPersistentLicense() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCbcsDrmFairplay) *bool { return v.AllowPersistentLicense }).(pulumi.BoolPtrOutput)
}

// The URL template for the custom service that delivers licenses to the end user. This is not required when using Azure Media Services for issuing licenses. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput) CustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCbcsDrmFairplay) *string {
		return v.CustomLicenseAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

type StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCbcsDrmFairplay)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput) ToStreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput() StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput) ToStreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*StreamingPolicyCommonEncryptionCbcsDrmFairplay] {
	return pulumix.Output[*StreamingPolicyCommonEncryptionCbcsDrmFairplay]{
		OutputState: o.OutputState,
	}
}

func (o StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput) Elem() StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCbcsDrmFairplay) StreamingPolicyCommonEncryptionCbcsDrmFairplay {
		if v != nil {
			return *v
		}
		var ret StreamingPolicyCommonEncryptionCbcsDrmFairplay
		return ret
	}).(StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput)
}

// All license to be persistent or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput) AllowPersistentLicense() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCbcsDrmFairplay) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPersistentLicense
	}).(pulumi.BoolPtrOutput)
}

// The URL template for the custom service that delivers licenses to the end user. This is not required when using Azure Media Services for issuing licenses. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput) CustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCbcsDrmFairplay) *string {
		if v == nil {
			return nil
		}
		return v.CustomLicenseAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

type StreamingPolicyCommonEncryptionCbcsEnabledProtocols struct {
	// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
	Dash *bool `pulumi:"dash"`
	// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
	Download *bool `pulumi:"download"`
	// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
	Hls *bool `pulumi:"hls"`
	// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
	SmoothStreaming *bool `pulumi:"smoothStreaming"`
}

// StreamingPolicyCommonEncryptionCbcsEnabledProtocolsInput is an input type that accepts StreamingPolicyCommonEncryptionCbcsEnabledProtocolsArgs and StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCbcsEnabledProtocolsInput` via:
//
//	StreamingPolicyCommonEncryptionCbcsEnabledProtocolsArgs{...}
type StreamingPolicyCommonEncryptionCbcsEnabledProtocolsInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput() StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput
	ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput
}

type StreamingPolicyCommonEncryptionCbcsEnabledProtocolsArgs struct {
	// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
	Dash pulumi.BoolPtrInput `pulumi:"dash"`
	// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
	Download pulumi.BoolPtrInput `pulumi:"download"`
	// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
	Hls pulumi.BoolPtrInput `pulumi:"hls"`
	// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
	SmoothStreaming pulumi.BoolPtrInput `pulumi:"smoothStreaming"`
}

func (StreamingPolicyCommonEncryptionCbcsEnabledProtocolsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCbcsEnabledProtocols)(nil)).Elem()
}

func (i StreamingPolicyCommonEncryptionCbcsEnabledProtocolsArgs) ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput() StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput {
	return i.ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCbcsEnabledProtocolsArgs) ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput)
}

func (i StreamingPolicyCommonEncryptionCbcsEnabledProtocolsArgs) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyCommonEncryptionCbcsEnabledProtocols] {
	return pulumix.Output[StreamingPolicyCommonEncryptionCbcsEnabledProtocols]{
		OutputState: i.ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutputWithContext(ctx).OutputState,
	}
}

func (i StreamingPolicyCommonEncryptionCbcsEnabledProtocolsArgs) ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput() StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCbcsEnabledProtocolsArgs) ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput).ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutputWithContext(ctx)
}

// StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrInput is an input type that accepts StreamingPolicyCommonEncryptionCbcsEnabledProtocolsArgs, StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtr and StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrInput` via:
//
//	        StreamingPolicyCommonEncryptionCbcsEnabledProtocolsArgs{...}
//
//	or:
//
//	        nil
type StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput() StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput
	ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput
}

type streamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrType StreamingPolicyCommonEncryptionCbcsEnabledProtocolsArgs

func StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtr(v *StreamingPolicyCommonEncryptionCbcsEnabledProtocolsArgs) StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrInput {
	return (*streamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrType)(v)
}

func (*streamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCbcsEnabledProtocols)(nil)).Elem()
}

func (i *streamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrType) ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput() StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutputWithContext(context.Background())
}

func (i *streamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrType) ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput)
}

func (i *streamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrType) ToOutput(ctx context.Context) pulumix.Output[*StreamingPolicyCommonEncryptionCbcsEnabledProtocols] {
	return pulumix.Output[*StreamingPolicyCommonEncryptionCbcsEnabledProtocols]{
		OutputState: i.ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutputWithContext(ctx).OutputState,
	}
}

type StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCbcsEnabledProtocols)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput) ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput() StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput) ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput) ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput() StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput {
	return o.ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutputWithContext(context.Background())
}

func (o StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput) ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamingPolicyCommonEncryptionCbcsEnabledProtocols) *StreamingPolicyCommonEncryptionCbcsEnabledProtocols {
		return &v
	}).(StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput)
}

func (o StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyCommonEncryptionCbcsEnabledProtocols] {
	return pulumix.Output[StreamingPolicyCommonEncryptionCbcsEnabledProtocols]{
		OutputState: o.OutputState,
	}
}

// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput) Dash() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCbcsEnabledProtocols) *bool { return v.Dash }).(pulumi.BoolPtrOutput)
}

// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput) Download() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCbcsEnabledProtocols) *bool { return v.Download }).(pulumi.BoolPtrOutput)
}

// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput) Hls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCbcsEnabledProtocols) *bool { return v.Hls }).(pulumi.BoolPtrOutput)
}

// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput) SmoothStreaming() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCbcsEnabledProtocols) *bool { return v.SmoothStreaming }).(pulumi.BoolPtrOutput)
}

type StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCbcsEnabledProtocols)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput) ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput() StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput) ToStreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*StreamingPolicyCommonEncryptionCbcsEnabledProtocols] {
	return pulumix.Output[*StreamingPolicyCommonEncryptionCbcsEnabledProtocols]{
		OutputState: o.OutputState,
	}
}

func (o StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput) Elem() StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCbcsEnabledProtocols) StreamingPolicyCommonEncryptionCbcsEnabledProtocols {
		if v != nil {
			return *v
		}
		var ret StreamingPolicyCommonEncryptionCbcsEnabledProtocols
		return ret
	}).(StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput)
}

// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput) Dash() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCbcsEnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return v.Dash
	}).(pulumi.BoolPtrOutput)
}

// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput) Download() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCbcsEnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return v.Download
	}).(pulumi.BoolPtrOutput)
}

// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput) Hls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCbcsEnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return v.Hls
	}).(pulumi.BoolPtrOutput)
}

// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput) SmoothStreaming() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCbcsEnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return v.SmoothStreaming
	}).(pulumi.BoolPtrOutput)
}

type StreamingPolicyCommonEncryptionCenc struct {
	// A `clearKeyEncryption` block as defined below. Changing this forces a new Streaming Policy to be created.
	ClearKeyEncryption *StreamingPolicyCommonEncryptionCencClearKeyEncryption `pulumi:"clearKeyEncryption"`
	// One or more `clearTrack` blocks as defined below. Changing this forces a new Streaming Policy to be created.
	ClearTracks []StreamingPolicyCommonEncryptionCencClearTrack `pulumi:"clearTracks"`
	// One or more `contentKeyToTrackMapping` blocks as defined below. Changing this forces a new Streaming Policy to be created.
	ContentKeyToTrackMappings []StreamingPolicyCommonEncryptionCencContentKeyToTrackMapping `pulumi:"contentKeyToTrackMappings"`
	// A `defaultContentKey` block as defined below. Changing this forces a new Streaming Policy to be created.
	DefaultContentKey *StreamingPolicyCommonEncryptionCencDefaultContentKey `pulumi:"defaultContentKey"`
	// A `drmPlayready` block as defined below. Changing this forces a new Streaming Policy to be created.
	DrmPlayready *StreamingPolicyCommonEncryptionCencDrmPlayready `pulumi:"drmPlayready"`
	// The URL template for the custom service that delivers licenses to the end user. This is not required when using Azure Media Services for issuing licenses. Changing this forces a new Streaming Policy to be created.
	DrmWidevineCustomLicenseAcquisitionUrlTemplate *string `pulumi:"drmWidevineCustomLicenseAcquisitionUrlTemplate"`
	// A `enabledProtocols` block as defined below. Changing this forces a new Streaming Policy to be created.
	EnabledProtocols *StreamingPolicyCommonEncryptionCencEnabledProtocols `pulumi:"enabledProtocols"`
}

// StreamingPolicyCommonEncryptionCencInput is an input type that accepts StreamingPolicyCommonEncryptionCencArgs and StreamingPolicyCommonEncryptionCencOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCencInput` via:
//
//	StreamingPolicyCommonEncryptionCencArgs{...}
type StreamingPolicyCommonEncryptionCencInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCencOutput() StreamingPolicyCommonEncryptionCencOutput
	ToStreamingPolicyCommonEncryptionCencOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCencOutput
}

type StreamingPolicyCommonEncryptionCencArgs struct {
	// A `clearKeyEncryption` block as defined below. Changing this forces a new Streaming Policy to be created.
	ClearKeyEncryption StreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrInput `pulumi:"clearKeyEncryption"`
	// One or more `clearTrack` blocks as defined below. Changing this forces a new Streaming Policy to be created.
	ClearTracks StreamingPolicyCommonEncryptionCencClearTrackArrayInput `pulumi:"clearTracks"`
	// One or more `contentKeyToTrackMapping` blocks as defined below. Changing this forces a new Streaming Policy to be created.
	ContentKeyToTrackMappings StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArrayInput `pulumi:"contentKeyToTrackMappings"`
	// A `defaultContentKey` block as defined below. Changing this forces a new Streaming Policy to be created.
	DefaultContentKey StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrInput `pulumi:"defaultContentKey"`
	// A `drmPlayready` block as defined below. Changing this forces a new Streaming Policy to be created.
	DrmPlayready StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrInput `pulumi:"drmPlayready"`
	// The URL template for the custom service that delivers licenses to the end user. This is not required when using Azure Media Services for issuing licenses. Changing this forces a new Streaming Policy to be created.
	DrmWidevineCustomLicenseAcquisitionUrlTemplate pulumi.StringPtrInput `pulumi:"drmWidevineCustomLicenseAcquisitionUrlTemplate"`
	// A `enabledProtocols` block as defined below. Changing this forces a new Streaming Policy to be created.
	EnabledProtocols StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrInput `pulumi:"enabledProtocols"`
}

func (StreamingPolicyCommonEncryptionCencArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCenc)(nil)).Elem()
}

func (i StreamingPolicyCommonEncryptionCencArgs) ToStreamingPolicyCommonEncryptionCencOutput() StreamingPolicyCommonEncryptionCencOutput {
	return i.ToStreamingPolicyCommonEncryptionCencOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCencArgs) ToStreamingPolicyCommonEncryptionCencOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencOutput)
}

func (i StreamingPolicyCommonEncryptionCencArgs) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyCommonEncryptionCenc] {
	return pulumix.Output[StreamingPolicyCommonEncryptionCenc]{
		OutputState: i.ToStreamingPolicyCommonEncryptionCencOutputWithContext(ctx).OutputState,
	}
}

func (i StreamingPolicyCommonEncryptionCencArgs) ToStreamingPolicyCommonEncryptionCencPtrOutput() StreamingPolicyCommonEncryptionCencPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCencPtrOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCencArgs) ToStreamingPolicyCommonEncryptionCencPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencOutput).ToStreamingPolicyCommonEncryptionCencPtrOutputWithContext(ctx)
}

// StreamingPolicyCommonEncryptionCencPtrInput is an input type that accepts StreamingPolicyCommonEncryptionCencArgs, StreamingPolicyCommonEncryptionCencPtr and StreamingPolicyCommonEncryptionCencPtrOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCencPtrInput` via:
//
//	        StreamingPolicyCommonEncryptionCencArgs{...}
//
//	or:
//
//	        nil
type StreamingPolicyCommonEncryptionCencPtrInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCencPtrOutput() StreamingPolicyCommonEncryptionCencPtrOutput
	ToStreamingPolicyCommonEncryptionCencPtrOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCencPtrOutput
}

type streamingPolicyCommonEncryptionCencPtrType StreamingPolicyCommonEncryptionCencArgs

func StreamingPolicyCommonEncryptionCencPtr(v *StreamingPolicyCommonEncryptionCencArgs) StreamingPolicyCommonEncryptionCencPtrInput {
	return (*streamingPolicyCommonEncryptionCencPtrType)(v)
}

func (*streamingPolicyCommonEncryptionCencPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCenc)(nil)).Elem()
}

func (i *streamingPolicyCommonEncryptionCencPtrType) ToStreamingPolicyCommonEncryptionCencPtrOutput() StreamingPolicyCommonEncryptionCencPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCencPtrOutputWithContext(context.Background())
}

func (i *streamingPolicyCommonEncryptionCencPtrType) ToStreamingPolicyCommonEncryptionCencPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencPtrOutput)
}

func (i *streamingPolicyCommonEncryptionCencPtrType) ToOutput(ctx context.Context) pulumix.Output[*StreamingPolicyCommonEncryptionCenc] {
	return pulumix.Output[*StreamingPolicyCommonEncryptionCenc]{
		OutputState: i.ToStreamingPolicyCommonEncryptionCencPtrOutputWithContext(ctx).OutputState,
	}
}

type StreamingPolicyCommonEncryptionCencOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCencOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCenc)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCencOutput) ToStreamingPolicyCommonEncryptionCencOutput() StreamingPolicyCommonEncryptionCencOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencOutput) ToStreamingPolicyCommonEncryptionCencOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencOutput) ToStreamingPolicyCommonEncryptionCencPtrOutput() StreamingPolicyCommonEncryptionCencPtrOutput {
	return o.ToStreamingPolicyCommonEncryptionCencPtrOutputWithContext(context.Background())
}

func (o StreamingPolicyCommonEncryptionCencOutput) ToStreamingPolicyCommonEncryptionCencPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamingPolicyCommonEncryptionCenc) *StreamingPolicyCommonEncryptionCenc {
		return &v
	}).(StreamingPolicyCommonEncryptionCencPtrOutput)
}

func (o StreamingPolicyCommonEncryptionCencOutput) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyCommonEncryptionCenc] {
	return pulumix.Output[StreamingPolicyCommonEncryptionCenc]{
		OutputState: o.OutputState,
	}
}

// A `clearKeyEncryption` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencOutput) ClearKeyEncryption() StreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCenc) *StreamingPolicyCommonEncryptionCencClearKeyEncryption {
		return v.ClearKeyEncryption
	}).(StreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutput)
}

// One or more `clearTrack` blocks as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencOutput) ClearTracks() StreamingPolicyCommonEncryptionCencClearTrackArrayOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCenc) []StreamingPolicyCommonEncryptionCencClearTrack {
		return v.ClearTracks
	}).(StreamingPolicyCommonEncryptionCencClearTrackArrayOutput)
}

// One or more `contentKeyToTrackMapping` blocks as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencOutput) ContentKeyToTrackMappings() StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArrayOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCenc) []StreamingPolicyCommonEncryptionCencContentKeyToTrackMapping {
		return v.ContentKeyToTrackMappings
	}).(StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArrayOutput)
}

// A `defaultContentKey` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencOutput) DefaultContentKey() StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCenc) *StreamingPolicyCommonEncryptionCencDefaultContentKey {
		return v.DefaultContentKey
	}).(StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput)
}

// A `drmPlayready` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencOutput) DrmPlayready() StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCenc) *StreamingPolicyCommonEncryptionCencDrmPlayready {
		return v.DrmPlayready
	}).(StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput)
}

// The URL template for the custom service that delivers licenses to the end user. This is not required when using Azure Media Services for issuing licenses. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencOutput) DrmWidevineCustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCenc) *string {
		return v.DrmWidevineCustomLicenseAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

// A `enabledProtocols` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencOutput) EnabledProtocols() StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCenc) *StreamingPolicyCommonEncryptionCencEnabledProtocols {
		return v.EnabledProtocols
	}).(StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput)
}

type StreamingPolicyCommonEncryptionCencPtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCencPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCenc)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCencPtrOutput) ToStreamingPolicyCommonEncryptionCencPtrOutput() StreamingPolicyCommonEncryptionCencPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencPtrOutput) ToStreamingPolicyCommonEncryptionCencPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*StreamingPolicyCommonEncryptionCenc] {
	return pulumix.Output[*StreamingPolicyCommonEncryptionCenc]{
		OutputState: o.OutputState,
	}
}

func (o StreamingPolicyCommonEncryptionCencPtrOutput) Elem() StreamingPolicyCommonEncryptionCencOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCenc) StreamingPolicyCommonEncryptionCenc {
		if v != nil {
			return *v
		}
		var ret StreamingPolicyCommonEncryptionCenc
		return ret
	}).(StreamingPolicyCommonEncryptionCencOutput)
}

// A `clearKeyEncryption` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencPtrOutput) ClearKeyEncryption() StreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCenc) *StreamingPolicyCommonEncryptionCencClearKeyEncryption {
		if v == nil {
			return nil
		}
		return v.ClearKeyEncryption
	}).(StreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutput)
}

// One or more `clearTrack` blocks as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencPtrOutput) ClearTracks() StreamingPolicyCommonEncryptionCencClearTrackArrayOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCenc) []StreamingPolicyCommonEncryptionCencClearTrack {
		if v == nil {
			return nil
		}
		return v.ClearTracks
	}).(StreamingPolicyCommonEncryptionCencClearTrackArrayOutput)
}

// One or more `contentKeyToTrackMapping` blocks as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencPtrOutput) ContentKeyToTrackMappings() StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArrayOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCenc) []StreamingPolicyCommonEncryptionCencContentKeyToTrackMapping {
		if v == nil {
			return nil
		}
		return v.ContentKeyToTrackMappings
	}).(StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArrayOutput)
}

// A `defaultContentKey` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencPtrOutput) DefaultContentKey() StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCenc) *StreamingPolicyCommonEncryptionCencDefaultContentKey {
		if v == nil {
			return nil
		}
		return v.DefaultContentKey
	}).(StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput)
}

// A `drmPlayready` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencPtrOutput) DrmPlayready() StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCenc) *StreamingPolicyCommonEncryptionCencDrmPlayready {
		if v == nil {
			return nil
		}
		return v.DrmPlayready
	}).(StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput)
}

// The URL template for the custom service that delivers licenses to the end user. This is not required when using Azure Media Services for issuing licenses. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencPtrOutput) DrmWidevineCustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCenc) *string {
		if v == nil {
			return nil
		}
		return v.DrmWidevineCustomLicenseAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

// A `enabledProtocols` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencPtrOutput) EnabledProtocols() StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCenc) *StreamingPolicyCommonEncryptionCencEnabledProtocols {
		if v == nil {
			return nil
		}
		return v.EnabledProtocols
	}).(StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput)
}

type StreamingPolicyCommonEncryptionCencClearKeyEncryption struct {
	// The URL template for the custom service that delivers content keys to the end user. This is not required when using Azure Media Services for issuing keys. Changing this forces a new Streaming Policy to be created.
	//
	// > **Note** Either `clearKeyEncryption` or `drm` must be specified.
	CustomKeysAcquisitionUrlTemplate string `pulumi:"customKeysAcquisitionUrlTemplate"`
}

// StreamingPolicyCommonEncryptionCencClearKeyEncryptionInput is an input type that accepts StreamingPolicyCommonEncryptionCencClearKeyEncryptionArgs and StreamingPolicyCommonEncryptionCencClearKeyEncryptionOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCencClearKeyEncryptionInput` via:
//
//	StreamingPolicyCommonEncryptionCencClearKeyEncryptionArgs{...}
type StreamingPolicyCommonEncryptionCencClearKeyEncryptionInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCencClearKeyEncryptionOutput() StreamingPolicyCommonEncryptionCencClearKeyEncryptionOutput
	ToStreamingPolicyCommonEncryptionCencClearKeyEncryptionOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCencClearKeyEncryptionOutput
}

type StreamingPolicyCommonEncryptionCencClearKeyEncryptionArgs struct {
	// The URL template for the custom service that delivers content keys to the end user. This is not required when using Azure Media Services for issuing keys. Changing this forces a new Streaming Policy to be created.
	//
	// > **Note** Either `clearKeyEncryption` or `drm` must be specified.
	CustomKeysAcquisitionUrlTemplate pulumi.StringInput `pulumi:"customKeysAcquisitionUrlTemplate"`
}

func (StreamingPolicyCommonEncryptionCencClearKeyEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCencClearKeyEncryption)(nil)).Elem()
}

func (i StreamingPolicyCommonEncryptionCencClearKeyEncryptionArgs) ToStreamingPolicyCommonEncryptionCencClearKeyEncryptionOutput() StreamingPolicyCommonEncryptionCencClearKeyEncryptionOutput {
	return i.ToStreamingPolicyCommonEncryptionCencClearKeyEncryptionOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCencClearKeyEncryptionArgs) ToStreamingPolicyCommonEncryptionCencClearKeyEncryptionOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencClearKeyEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencClearKeyEncryptionOutput)
}

func (i StreamingPolicyCommonEncryptionCencClearKeyEncryptionArgs) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyCommonEncryptionCencClearKeyEncryption] {
	return pulumix.Output[StreamingPolicyCommonEncryptionCencClearKeyEncryption]{
		OutputState: i.ToStreamingPolicyCommonEncryptionCencClearKeyEncryptionOutputWithContext(ctx).OutputState,
	}
}

func (i StreamingPolicyCommonEncryptionCencClearKeyEncryptionArgs) ToStreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutput() StreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCencClearKeyEncryptionArgs) ToStreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencClearKeyEncryptionOutput).ToStreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutputWithContext(ctx)
}

// StreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrInput is an input type that accepts StreamingPolicyCommonEncryptionCencClearKeyEncryptionArgs, StreamingPolicyCommonEncryptionCencClearKeyEncryptionPtr and StreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrInput` via:
//
//	        StreamingPolicyCommonEncryptionCencClearKeyEncryptionArgs{...}
//
//	or:
//
//	        nil
type StreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutput() StreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutput
	ToStreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutput
}

type streamingPolicyCommonEncryptionCencClearKeyEncryptionPtrType StreamingPolicyCommonEncryptionCencClearKeyEncryptionArgs

func StreamingPolicyCommonEncryptionCencClearKeyEncryptionPtr(v *StreamingPolicyCommonEncryptionCencClearKeyEncryptionArgs) StreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrInput {
	return (*streamingPolicyCommonEncryptionCencClearKeyEncryptionPtrType)(v)
}

func (*streamingPolicyCommonEncryptionCencClearKeyEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCencClearKeyEncryption)(nil)).Elem()
}

func (i *streamingPolicyCommonEncryptionCencClearKeyEncryptionPtrType) ToStreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutput() StreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutputWithContext(context.Background())
}

func (i *streamingPolicyCommonEncryptionCencClearKeyEncryptionPtrType) ToStreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutput)
}

func (i *streamingPolicyCommonEncryptionCencClearKeyEncryptionPtrType) ToOutput(ctx context.Context) pulumix.Output[*StreamingPolicyCommonEncryptionCencClearKeyEncryption] {
	return pulumix.Output[*StreamingPolicyCommonEncryptionCencClearKeyEncryption]{
		OutputState: i.ToStreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutputWithContext(ctx).OutputState,
	}
}

type StreamingPolicyCommonEncryptionCencClearKeyEncryptionOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCencClearKeyEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCencClearKeyEncryption)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCencClearKeyEncryptionOutput) ToStreamingPolicyCommonEncryptionCencClearKeyEncryptionOutput() StreamingPolicyCommonEncryptionCencClearKeyEncryptionOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencClearKeyEncryptionOutput) ToStreamingPolicyCommonEncryptionCencClearKeyEncryptionOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencClearKeyEncryptionOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencClearKeyEncryptionOutput) ToStreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutput() StreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutput {
	return o.ToStreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutputWithContext(context.Background())
}

func (o StreamingPolicyCommonEncryptionCencClearKeyEncryptionOutput) ToStreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamingPolicyCommonEncryptionCencClearKeyEncryption) *StreamingPolicyCommonEncryptionCencClearKeyEncryption {
		return &v
	}).(StreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutput)
}

func (o StreamingPolicyCommonEncryptionCencClearKeyEncryptionOutput) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyCommonEncryptionCencClearKeyEncryption] {
	return pulumix.Output[StreamingPolicyCommonEncryptionCencClearKeyEncryption]{
		OutputState: o.OutputState,
	}
}

// The URL template for the custom service that delivers content keys to the end user. This is not required when using Azure Media Services for issuing keys. Changing this forces a new Streaming Policy to be created.
//
// > **Note** Either `clearKeyEncryption` or `drm` must be specified.
func (o StreamingPolicyCommonEncryptionCencClearKeyEncryptionOutput) CustomKeysAcquisitionUrlTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCencClearKeyEncryption) string {
		return v.CustomKeysAcquisitionUrlTemplate
	}).(pulumi.StringOutput)
}

type StreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCencClearKeyEncryption)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutput) ToStreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutput() StreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutput) ToStreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*StreamingPolicyCommonEncryptionCencClearKeyEncryption] {
	return pulumix.Output[*StreamingPolicyCommonEncryptionCencClearKeyEncryption]{
		OutputState: o.OutputState,
	}
}

func (o StreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutput) Elem() StreamingPolicyCommonEncryptionCencClearKeyEncryptionOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCencClearKeyEncryption) StreamingPolicyCommonEncryptionCencClearKeyEncryption {
		if v != nil {
			return *v
		}
		var ret StreamingPolicyCommonEncryptionCencClearKeyEncryption
		return ret
	}).(StreamingPolicyCommonEncryptionCencClearKeyEncryptionOutput)
}

// The URL template for the custom service that delivers content keys to the end user. This is not required when using Azure Media Services for issuing keys. Changing this forces a new Streaming Policy to be created.
//
// > **Note** Either `clearKeyEncryption` or `drm` must be specified.
func (o StreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutput) CustomKeysAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCencClearKeyEncryption) *string {
		if v == nil {
			return nil
		}
		return &v.CustomKeysAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

type StreamingPolicyCommonEncryptionCencClearTrack struct {
	// One or more `condition` blocks as defined below. Changing this forces a new Streaming Policy to be created.
	Conditions []StreamingPolicyCommonEncryptionCencClearTrackCondition `pulumi:"conditions"`
}

// StreamingPolicyCommonEncryptionCencClearTrackInput is an input type that accepts StreamingPolicyCommonEncryptionCencClearTrackArgs and StreamingPolicyCommonEncryptionCencClearTrackOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCencClearTrackInput` via:
//
//	StreamingPolicyCommonEncryptionCencClearTrackArgs{...}
type StreamingPolicyCommonEncryptionCencClearTrackInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCencClearTrackOutput() StreamingPolicyCommonEncryptionCencClearTrackOutput
	ToStreamingPolicyCommonEncryptionCencClearTrackOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCencClearTrackOutput
}

type StreamingPolicyCommonEncryptionCencClearTrackArgs struct {
	// One or more `condition` blocks as defined below. Changing this forces a new Streaming Policy to be created.
	Conditions StreamingPolicyCommonEncryptionCencClearTrackConditionArrayInput `pulumi:"conditions"`
}

func (StreamingPolicyCommonEncryptionCencClearTrackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCencClearTrack)(nil)).Elem()
}

func (i StreamingPolicyCommonEncryptionCencClearTrackArgs) ToStreamingPolicyCommonEncryptionCencClearTrackOutput() StreamingPolicyCommonEncryptionCencClearTrackOutput {
	return i.ToStreamingPolicyCommonEncryptionCencClearTrackOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCencClearTrackArgs) ToStreamingPolicyCommonEncryptionCencClearTrackOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencClearTrackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencClearTrackOutput)
}

func (i StreamingPolicyCommonEncryptionCencClearTrackArgs) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyCommonEncryptionCencClearTrack] {
	return pulumix.Output[StreamingPolicyCommonEncryptionCencClearTrack]{
		OutputState: i.ToStreamingPolicyCommonEncryptionCencClearTrackOutputWithContext(ctx).OutputState,
	}
}

// StreamingPolicyCommonEncryptionCencClearTrackArrayInput is an input type that accepts StreamingPolicyCommonEncryptionCencClearTrackArray and StreamingPolicyCommonEncryptionCencClearTrackArrayOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCencClearTrackArrayInput` via:
//
//	StreamingPolicyCommonEncryptionCencClearTrackArray{ StreamingPolicyCommonEncryptionCencClearTrackArgs{...} }
type StreamingPolicyCommonEncryptionCencClearTrackArrayInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCencClearTrackArrayOutput() StreamingPolicyCommonEncryptionCencClearTrackArrayOutput
	ToStreamingPolicyCommonEncryptionCencClearTrackArrayOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCencClearTrackArrayOutput
}

type StreamingPolicyCommonEncryptionCencClearTrackArray []StreamingPolicyCommonEncryptionCencClearTrackInput

func (StreamingPolicyCommonEncryptionCencClearTrackArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingPolicyCommonEncryptionCencClearTrack)(nil)).Elem()
}

func (i StreamingPolicyCommonEncryptionCencClearTrackArray) ToStreamingPolicyCommonEncryptionCencClearTrackArrayOutput() StreamingPolicyCommonEncryptionCencClearTrackArrayOutput {
	return i.ToStreamingPolicyCommonEncryptionCencClearTrackArrayOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCencClearTrackArray) ToStreamingPolicyCommonEncryptionCencClearTrackArrayOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencClearTrackArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencClearTrackArrayOutput)
}

func (i StreamingPolicyCommonEncryptionCencClearTrackArray) ToOutput(ctx context.Context) pulumix.Output[[]StreamingPolicyCommonEncryptionCencClearTrack] {
	return pulumix.Output[[]StreamingPolicyCommonEncryptionCencClearTrack]{
		OutputState: i.ToStreamingPolicyCommonEncryptionCencClearTrackArrayOutputWithContext(ctx).OutputState,
	}
}

type StreamingPolicyCommonEncryptionCencClearTrackOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCencClearTrackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCencClearTrack)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCencClearTrackOutput) ToStreamingPolicyCommonEncryptionCencClearTrackOutput() StreamingPolicyCommonEncryptionCencClearTrackOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencClearTrackOutput) ToStreamingPolicyCommonEncryptionCencClearTrackOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencClearTrackOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencClearTrackOutput) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyCommonEncryptionCencClearTrack] {
	return pulumix.Output[StreamingPolicyCommonEncryptionCencClearTrack]{
		OutputState: o.OutputState,
	}
}

// One or more `condition` blocks as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencClearTrackOutput) Conditions() StreamingPolicyCommonEncryptionCencClearTrackConditionArrayOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCencClearTrack) []StreamingPolicyCommonEncryptionCencClearTrackCondition {
		return v.Conditions
	}).(StreamingPolicyCommonEncryptionCencClearTrackConditionArrayOutput)
}

type StreamingPolicyCommonEncryptionCencClearTrackArrayOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCencClearTrackArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingPolicyCommonEncryptionCencClearTrack)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCencClearTrackArrayOutput) ToStreamingPolicyCommonEncryptionCencClearTrackArrayOutput() StreamingPolicyCommonEncryptionCencClearTrackArrayOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencClearTrackArrayOutput) ToStreamingPolicyCommonEncryptionCencClearTrackArrayOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencClearTrackArrayOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencClearTrackArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]StreamingPolicyCommonEncryptionCencClearTrack] {
	return pulumix.Output[[]StreamingPolicyCommonEncryptionCencClearTrack]{
		OutputState: o.OutputState,
	}
}

func (o StreamingPolicyCommonEncryptionCencClearTrackArrayOutput) Index(i pulumi.IntInput) StreamingPolicyCommonEncryptionCencClearTrackOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamingPolicyCommonEncryptionCencClearTrack {
		return vs[0].([]StreamingPolicyCommonEncryptionCencClearTrack)[vs[1].(int)]
	}).(StreamingPolicyCommonEncryptionCencClearTrackOutput)
}

type StreamingPolicyCommonEncryptionCencClearTrackCondition struct {
	// The track property condition operation. Possible value is `Equal`. Changing this forces a new Streaming Policy to be created.
	Operation string `pulumi:"operation"`
	// The track property type. Possible value is `FourCC`. Changing this forces a new Streaming Policy to be created.
	Property string `pulumi:"property"`
	// The track property value. Changing this forces a new Streaming Policy to be created.
	Value string `pulumi:"value"`
}

// StreamingPolicyCommonEncryptionCencClearTrackConditionInput is an input type that accepts StreamingPolicyCommonEncryptionCencClearTrackConditionArgs and StreamingPolicyCommonEncryptionCencClearTrackConditionOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCencClearTrackConditionInput` via:
//
//	StreamingPolicyCommonEncryptionCencClearTrackConditionArgs{...}
type StreamingPolicyCommonEncryptionCencClearTrackConditionInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCencClearTrackConditionOutput() StreamingPolicyCommonEncryptionCencClearTrackConditionOutput
	ToStreamingPolicyCommonEncryptionCencClearTrackConditionOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCencClearTrackConditionOutput
}

type StreamingPolicyCommonEncryptionCencClearTrackConditionArgs struct {
	// The track property condition operation. Possible value is `Equal`. Changing this forces a new Streaming Policy to be created.
	Operation pulumi.StringInput `pulumi:"operation"`
	// The track property type. Possible value is `FourCC`. Changing this forces a new Streaming Policy to be created.
	Property pulumi.StringInput `pulumi:"property"`
	// The track property value. Changing this forces a new Streaming Policy to be created.
	Value pulumi.StringInput `pulumi:"value"`
}

func (StreamingPolicyCommonEncryptionCencClearTrackConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCencClearTrackCondition)(nil)).Elem()
}

func (i StreamingPolicyCommonEncryptionCencClearTrackConditionArgs) ToStreamingPolicyCommonEncryptionCencClearTrackConditionOutput() StreamingPolicyCommonEncryptionCencClearTrackConditionOutput {
	return i.ToStreamingPolicyCommonEncryptionCencClearTrackConditionOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCencClearTrackConditionArgs) ToStreamingPolicyCommonEncryptionCencClearTrackConditionOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencClearTrackConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencClearTrackConditionOutput)
}

func (i StreamingPolicyCommonEncryptionCencClearTrackConditionArgs) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyCommonEncryptionCencClearTrackCondition] {
	return pulumix.Output[StreamingPolicyCommonEncryptionCencClearTrackCondition]{
		OutputState: i.ToStreamingPolicyCommonEncryptionCencClearTrackConditionOutputWithContext(ctx).OutputState,
	}
}

// StreamingPolicyCommonEncryptionCencClearTrackConditionArrayInput is an input type that accepts StreamingPolicyCommonEncryptionCencClearTrackConditionArray and StreamingPolicyCommonEncryptionCencClearTrackConditionArrayOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCencClearTrackConditionArrayInput` via:
//
//	StreamingPolicyCommonEncryptionCencClearTrackConditionArray{ StreamingPolicyCommonEncryptionCencClearTrackConditionArgs{...} }
type StreamingPolicyCommonEncryptionCencClearTrackConditionArrayInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCencClearTrackConditionArrayOutput() StreamingPolicyCommonEncryptionCencClearTrackConditionArrayOutput
	ToStreamingPolicyCommonEncryptionCencClearTrackConditionArrayOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCencClearTrackConditionArrayOutput
}

type StreamingPolicyCommonEncryptionCencClearTrackConditionArray []StreamingPolicyCommonEncryptionCencClearTrackConditionInput

func (StreamingPolicyCommonEncryptionCencClearTrackConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingPolicyCommonEncryptionCencClearTrackCondition)(nil)).Elem()
}

func (i StreamingPolicyCommonEncryptionCencClearTrackConditionArray) ToStreamingPolicyCommonEncryptionCencClearTrackConditionArrayOutput() StreamingPolicyCommonEncryptionCencClearTrackConditionArrayOutput {
	return i.ToStreamingPolicyCommonEncryptionCencClearTrackConditionArrayOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCencClearTrackConditionArray) ToStreamingPolicyCommonEncryptionCencClearTrackConditionArrayOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencClearTrackConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencClearTrackConditionArrayOutput)
}

func (i StreamingPolicyCommonEncryptionCencClearTrackConditionArray) ToOutput(ctx context.Context) pulumix.Output[[]StreamingPolicyCommonEncryptionCencClearTrackCondition] {
	return pulumix.Output[[]StreamingPolicyCommonEncryptionCencClearTrackCondition]{
		OutputState: i.ToStreamingPolicyCommonEncryptionCencClearTrackConditionArrayOutputWithContext(ctx).OutputState,
	}
}

type StreamingPolicyCommonEncryptionCencClearTrackConditionOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCencClearTrackConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCencClearTrackCondition)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCencClearTrackConditionOutput) ToStreamingPolicyCommonEncryptionCencClearTrackConditionOutput() StreamingPolicyCommonEncryptionCencClearTrackConditionOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencClearTrackConditionOutput) ToStreamingPolicyCommonEncryptionCencClearTrackConditionOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencClearTrackConditionOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencClearTrackConditionOutput) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyCommonEncryptionCencClearTrackCondition] {
	return pulumix.Output[StreamingPolicyCommonEncryptionCencClearTrackCondition]{
		OutputState: o.OutputState,
	}
}

// The track property condition operation. Possible value is `Equal`. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencClearTrackConditionOutput) Operation() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCencClearTrackCondition) string { return v.Operation }).(pulumi.StringOutput)
}

// The track property type. Possible value is `FourCC`. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencClearTrackConditionOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCencClearTrackCondition) string { return v.Property }).(pulumi.StringOutput)
}

// The track property value. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencClearTrackConditionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCencClearTrackCondition) string { return v.Value }).(pulumi.StringOutput)
}

type StreamingPolicyCommonEncryptionCencClearTrackConditionArrayOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCencClearTrackConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingPolicyCommonEncryptionCencClearTrackCondition)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCencClearTrackConditionArrayOutput) ToStreamingPolicyCommonEncryptionCencClearTrackConditionArrayOutput() StreamingPolicyCommonEncryptionCencClearTrackConditionArrayOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencClearTrackConditionArrayOutput) ToStreamingPolicyCommonEncryptionCencClearTrackConditionArrayOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencClearTrackConditionArrayOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencClearTrackConditionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]StreamingPolicyCommonEncryptionCencClearTrackCondition] {
	return pulumix.Output[[]StreamingPolicyCommonEncryptionCencClearTrackCondition]{
		OutputState: o.OutputState,
	}
}

func (o StreamingPolicyCommonEncryptionCencClearTrackConditionArrayOutput) Index(i pulumi.IntInput) StreamingPolicyCommonEncryptionCencClearTrackConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamingPolicyCommonEncryptionCencClearTrackCondition {
		return vs[0].([]StreamingPolicyCommonEncryptionCencClearTrackCondition)[vs[1].(int)]
	}).(StreamingPolicyCommonEncryptionCencClearTrackConditionOutput)
}

type StreamingPolicyCommonEncryptionCencContentKeyToTrackMapping struct {
	// Specifies the content key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
	Label *string `pulumi:"label"`
	// The policy used by the default key. Changing this forces a new Streaming Policy to be created.
	PolicyName *string `pulumi:"policyName"`
	// One or more `track` blocks as defined below. Changing this forces a new Streaming Policy to be created.
	Tracks []StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrack `pulumi:"tracks"`
}

// StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingInput is an input type that accepts StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArgs and StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingInput` via:
//
//	StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArgs{...}
type StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingOutput() StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingOutput
	ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingOutput
}

type StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArgs struct {
	// Specifies the content key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// The policy used by the default key. Changing this forces a new Streaming Policy to be created.
	PolicyName pulumi.StringPtrInput `pulumi:"policyName"`
	// One or more `track` blocks as defined below. Changing this forces a new Streaming Policy to be created.
	Tracks StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArrayInput `pulumi:"tracks"`
}

func (StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCencContentKeyToTrackMapping)(nil)).Elem()
}

func (i StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArgs) ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingOutput() StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingOutput {
	return i.ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArgs) ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingOutput)
}

func (i StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArgs) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyCommonEncryptionCencContentKeyToTrackMapping] {
	return pulumix.Output[StreamingPolicyCommonEncryptionCencContentKeyToTrackMapping]{
		OutputState: i.ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingOutputWithContext(ctx).OutputState,
	}
}

// StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArrayInput is an input type that accepts StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArray and StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArrayOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArrayInput` via:
//
//	StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArray{ StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArgs{...} }
type StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArrayInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArrayOutput() StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArrayOutput
	ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArrayOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArrayOutput
}

type StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArray []StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingInput

func (StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingPolicyCommonEncryptionCencContentKeyToTrackMapping)(nil)).Elem()
}

func (i StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArray) ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArrayOutput() StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArrayOutput {
	return i.ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArrayOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArray) ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArrayOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArrayOutput)
}

func (i StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArray) ToOutput(ctx context.Context) pulumix.Output[[]StreamingPolicyCommonEncryptionCencContentKeyToTrackMapping] {
	return pulumix.Output[[]StreamingPolicyCommonEncryptionCencContentKeyToTrackMapping]{
		OutputState: i.ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArrayOutputWithContext(ctx).OutputState,
	}
}

type StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCencContentKeyToTrackMapping)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingOutput) ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingOutput() StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingOutput) ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingOutput) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyCommonEncryptionCencContentKeyToTrackMapping] {
	return pulumix.Output[StreamingPolicyCommonEncryptionCencContentKeyToTrackMapping]{
		OutputState: o.OutputState,
	}
}

// Specifies the content key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCencContentKeyToTrackMapping) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// The policy used by the default key. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingOutput) PolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCencContentKeyToTrackMapping) *string { return v.PolicyName }).(pulumi.StringPtrOutput)
}

// One or more `track` blocks as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingOutput) Tracks() StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArrayOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCencContentKeyToTrackMapping) []StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrack {
		return v.Tracks
	}).(StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArrayOutput)
}

type StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArrayOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingPolicyCommonEncryptionCencContentKeyToTrackMapping)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArrayOutput) ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArrayOutput() StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArrayOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArrayOutput) ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArrayOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArrayOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]StreamingPolicyCommonEncryptionCencContentKeyToTrackMapping] {
	return pulumix.Output[[]StreamingPolicyCommonEncryptionCencContentKeyToTrackMapping]{
		OutputState: o.OutputState,
	}
}

func (o StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArrayOutput) Index(i pulumi.IntInput) StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamingPolicyCommonEncryptionCencContentKeyToTrackMapping {
		return vs[0].([]StreamingPolicyCommonEncryptionCencContentKeyToTrackMapping)[vs[1].(int)]
	}).(StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingOutput)
}

type StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrack struct {
	// One or more `condition` blocks as defined below. Changing this forces a new Streaming Policy to be created.
	Conditions []StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackCondition `pulumi:"conditions"`
}

// StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackInput is an input type that accepts StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArgs and StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackInput` via:
//
//	StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArgs{...}
type StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackOutput() StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackOutput
	ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackOutput
}

type StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArgs struct {
	// One or more `condition` blocks as defined below. Changing this forces a new Streaming Policy to be created.
	Conditions StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArrayInput `pulumi:"conditions"`
}

func (StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrack)(nil)).Elem()
}

func (i StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArgs) ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackOutput() StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackOutput {
	return i.ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArgs) ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackOutput)
}

func (i StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArgs) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrack] {
	return pulumix.Output[StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrack]{
		OutputState: i.ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackOutputWithContext(ctx).OutputState,
	}
}

// StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArrayInput is an input type that accepts StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArray and StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArrayOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArrayInput` via:
//
//	StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArray{ StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArgs{...} }
type StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArrayInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArrayOutput() StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArrayOutput
	ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArrayOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArrayOutput
}

type StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArray []StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackInput

func (StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrack)(nil)).Elem()
}

func (i StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArray) ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArrayOutput() StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArrayOutput {
	return i.ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArrayOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArray) ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArrayOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArrayOutput)
}

func (i StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArray) ToOutput(ctx context.Context) pulumix.Output[[]StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrack] {
	return pulumix.Output[[]StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrack]{
		OutputState: i.ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArrayOutputWithContext(ctx).OutputState,
	}
}

type StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrack)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackOutput) ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackOutput() StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackOutput) ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackOutput) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrack] {
	return pulumix.Output[StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrack]{
		OutputState: o.OutputState,
	}
}

// One or more `condition` blocks as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackOutput) Conditions() StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArrayOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrack) []StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackCondition {
		return v.Conditions
	}).(StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArrayOutput)
}

type StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArrayOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrack)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArrayOutput) ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArrayOutput() StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArrayOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArrayOutput) ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArrayOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArrayOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrack] {
	return pulumix.Output[[]StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrack]{
		OutputState: o.OutputState,
	}
}

func (o StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArrayOutput) Index(i pulumi.IntInput) StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrack {
		return vs[0].([]StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrack)[vs[1].(int)]
	}).(StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackOutput)
}

type StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackCondition struct {
	// The track property condition operation. Possible value is `Equal`. Changing this forces a new Streaming Policy to be created.
	Operation string `pulumi:"operation"`
	// The track property type. Possible value is `FourCC`. Changing this forces a new Streaming Policy to be created.
	Property string `pulumi:"property"`
	// The track property value. Changing this forces a new Streaming Policy to be created.
	Value string `pulumi:"value"`
}

// StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionInput is an input type that accepts StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArgs and StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionInput` via:
//
//	StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArgs{...}
type StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionOutput() StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionOutput
	ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionOutput
}

type StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArgs struct {
	// The track property condition operation. Possible value is `Equal`. Changing this forces a new Streaming Policy to be created.
	Operation pulumi.StringInput `pulumi:"operation"`
	// The track property type. Possible value is `FourCC`. Changing this forces a new Streaming Policy to be created.
	Property pulumi.StringInput `pulumi:"property"`
	// The track property value. Changing this forces a new Streaming Policy to be created.
	Value pulumi.StringInput `pulumi:"value"`
}

func (StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackCondition)(nil)).Elem()
}

func (i StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArgs) ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionOutput() StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionOutput {
	return i.ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArgs) ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionOutput)
}

func (i StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArgs) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackCondition] {
	return pulumix.Output[StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackCondition]{
		OutputState: i.ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionOutputWithContext(ctx).OutputState,
	}
}

// StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArrayInput is an input type that accepts StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArray and StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArrayOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArrayInput` via:
//
//	StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArray{ StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArgs{...} }
type StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArrayInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArrayOutput() StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArrayOutput
	ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArrayOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArrayOutput
}

type StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArray []StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionInput

func (StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackCondition)(nil)).Elem()
}

func (i StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArray) ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArrayOutput() StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArrayOutput {
	return i.ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArrayOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArray) ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArrayOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArrayOutput)
}

func (i StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArray) ToOutput(ctx context.Context) pulumix.Output[[]StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackCondition] {
	return pulumix.Output[[]StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackCondition]{
		OutputState: i.ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArrayOutputWithContext(ctx).OutputState,
	}
}

type StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackCondition)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionOutput) ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionOutput() StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionOutput) ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionOutput) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackCondition] {
	return pulumix.Output[StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackCondition]{
		OutputState: o.OutputState,
	}
}

// The track property condition operation. Possible value is `Equal`. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionOutput) Operation() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackCondition) string {
		return v.Operation
	}).(pulumi.StringOutput)
}

// The track property type. Possible value is `FourCC`. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackCondition) string {
		return v.Property
	}).(pulumi.StringOutput)
}

// The track property value. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackCondition) string {
		return v.Value
	}).(pulumi.StringOutput)
}

type StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArrayOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackCondition)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArrayOutput) ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArrayOutput() StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArrayOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArrayOutput) ToStreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArrayOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArrayOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackCondition] {
	return pulumix.Output[[]StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackCondition]{
		OutputState: o.OutputState,
	}
}

func (o StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArrayOutput) Index(i pulumi.IntInput) StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackCondition {
		return vs[0].([]StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackCondition)[vs[1].(int)]
	}).(StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionOutput)
}

type StreamingPolicyCommonEncryptionCencDefaultContentKey struct {
	// Label can be used to specify Content Key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
	Label *string `pulumi:"label"`
	// Policy used by Default Key. Changing this forces a new Streaming Policy to be created.
	PolicyName *string `pulumi:"policyName"`
}

// StreamingPolicyCommonEncryptionCencDefaultContentKeyInput is an input type that accepts StreamingPolicyCommonEncryptionCencDefaultContentKeyArgs and StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCencDefaultContentKeyInput` via:
//
//	StreamingPolicyCommonEncryptionCencDefaultContentKeyArgs{...}
type StreamingPolicyCommonEncryptionCencDefaultContentKeyInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCencDefaultContentKeyOutput() StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput
	ToStreamingPolicyCommonEncryptionCencDefaultContentKeyOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput
}

type StreamingPolicyCommonEncryptionCencDefaultContentKeyArgs struct {
	// Label can be used to specify Content Key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Policy used by Default Key. Changing this forces a new Streaming Policy to be created.
	PolicyName pulumi.StringPtrInput `pulumi:"policyName"`
}

func (StreamingPolicyCommonEncryptionCencDefaultContentKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCencDefaultContentKey)(nil)).Elem()
}

func (i StreamingPolicyCommonEncryptionCencDefaultContentKeyArgs) ToStreamingPolicyCommonEncryptionCencDefaultContentKeyOutput() StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput {
	return i.ToStreamingPolicyCommonEncryptionCencDefaultContentKeyOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCencDefaultContentKeyArgs) ToStreamingPolicyCommonEncryptionCencDefaultContentKeyOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput)
}

func (i StreamingPolicyCommonEncryptionCencDefaultContentKeyArgs) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyCommonEncryptionCencDefaultContentKey] {
	return pulumix.Output[StreamingPolicyCommonEncryptionCencDefaultContentKey]{
		OutputState: i.ToStreamingPolicyCommonEncryptionCencDefaultContentKeyOutputWithContext(ctx).OutputState,
	}
}

func (i StreamingPolicyCommonEncryptionCencDefaultContentKeyArgs) ToStreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput() StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCencDefaultContentKeyArgs) ToStreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput).ToStreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutputWithContext(ctx)
}

// StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrInput is an input type that accepts StreamingPolicyCommonEncryptionCencDefaultContentKeyArgs, StreamingPolicyCommonEncryptionCencDefaultContentKeyPtr and StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrInput` via:
//
//	        StreamingPolicyCommonEncryptionCencDefaultContentKeyArgs{...}
//
//	or:
//
//	        nil
type StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput() StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput
	ToStreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput
}

type streamingPolicyCommonEncryptionCencDefaultContentKeyPtrType StreamingPolicyCommonEncryptionCencDefaultContentKeyArgs

func StreamingPolicyCommonEncryptionCencDefaultContentKeyPtr(v *StreamingPolicyCommonEncryptionCencDefaultContentKeyArgs) StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrInput {
	return (*streamingPolicyCommonEncryptionCencDefaultContentKeyPtrType)(v)
}

func (*streamingPolicyCommonEncryptionCencDefaultContentKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCencDefaultContentKey)(nil)).Elem()
}

func (i *streamingPolicyCommonEncryptionCencDefaultContentKeyPtrType) ToStreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput() StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutputWithContext(context.Background())
}

func (i *streamingPolicyCommonEncryptionCencDefaultContentKeyPtrType) ToStreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput)
}

func (i *streamingPolicyCommonEncryptionCencDefaultContentKeyPtrType) ToOutput(ctx context.Context) pulumix.Output[*StreamingPolicyCommonEncryptionCencDefaultContentKey] {
	return pulumix.Output[*StreamingPolicyCommonEncryptionCencDefaultContentKey]{
		OutputState: i.ToStreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutputWithContext(ctx).OutputState,
	}
}

type StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCencDefaultContentKey)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput) ToStreamingPolicyCommonEncryptionCencDefaultContentKeyOutput() StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput) ToStreamingPolicyCommonEncryptionCencDefaultContentKeyOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput) ToStreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput() StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput {
	return o.ToStreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutputWithContext(context.Background())
}

func (o StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput) ToStreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamingPolicyCommonEncryptionCencDefaultContentKey) *StreamingPolicyCommonEncryptionCencDefaultContentKey {
		return &v
	}).(StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput)
}

func (o StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyCommonEncryptionCencDefaultContentKey] {
	return pulumix.Output[StreamingPolicyCommonEncryptionCencDefaultContentKey]{
		OutputState: o.OutputState,
	}
}

// Label can be used to specify Content Key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCencDefaultContentKey) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Policy used by Default Key. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput) PolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCencDefaultContentKey) *string { return v.PolicyName }).(pulumi.StringPtrOutput)
}

type StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCencDefaultContentKey)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput) ToStreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput() StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput) ToStreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*StreamingPolicyCommonEncryptionCencDefaultContentKey] {
	return pulumix.Output[*StreamingPolicyCommonEncryptionCencDefaultContentKey]{
		OutputState: o.OutputState,
	}
}

func (o StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput) Elem() StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCencDefaultContentKey) StreamingPolicyCommonEncryptionCencDefaultContentKey {
		if v != nil {
			return *v
		}
		var ret StreamingPolicyCommonEncryptionCencDefaultContentKey
		return ret
	}).(StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput)
}

// Label can be used to specify Content Key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCencDefaultContentKey) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

// Policy used by Default Key. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput) PolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCencDefaultContentKey) *string {
		if v == nil {
			return nil
		}
		return v.PolicyName
	}).(pulumi.StringPtrOutput)
}

type StreamingPolicyCommonEncryptionCencDrmPlayready struct {
	// Custom attributes for PlayReady. Changing this forces a new Streaming Policy to be created.
	CustomAttributes *string `pulumi:"customAttributes"`
	// The URL template for the custom service that delivers licenses to the end user. This is not required when using Azure Media Services for issuing licenses. Changing this forces a new Streaming Policy to be created.
	CustomLicenseAcquisitionUrlTemplate *string `pulumi:"customLicenseAcquisitionUrlTemplate"`
}

// StreamingPolicyCommonEncryptionCencDrmPlayreadyInput is an input type that accepts StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs and StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCencDrmPlayreadyInput` via:
//
//	StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs{...}
type StreamingPolicyCommonEncryptionCencDrmPlayreadyInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCencDrmPlayreadyOutput() StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput
	ToStreamingPolicyCommonEncryptionCencDrmPlayreadyOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput
}

type StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs struct {
	// Custom attributes for PlayReady. Changing this forces a new Streaming Policy to be created.
	CustomAttributes pulumi.StringPtrInput `pulumi:"customAttributes"`
	// The URL template for the custom service that delivers licenses to the end user. This is not required when using Azure Media Services for issuing licenses. Changing this forces a new Streaming Policy to be created.
	CustomLicenseAcquisitionUrlTemplate pulumi.StringPtrInput `pulumi:"customLicenseAcquisitionUrlTemplate"`
}

func (StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCencDrmPlayready)(nil)).Elem()
}

func (i StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs) ToStreamingPolicyCommonEncryptionCencDrmPlayreadyOutput() StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput {
	return i.ToStreamingPolicyCommonEncryptionCencDrmPlayreadyOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs) ToStreamingPolicyCommonEncryptionCencDrmPlayreadyOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput)
}

func (i StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyCommonEncryptionCencDrmPlayready] {
	return pulumix.Output[StreamingPolicyCommonEncryptionCencDrmPlayready]{
		OutputState: i.ToStreamingPolicyCommonEncryptionCencDrmPlayreadyOutputWithContext(ctx).OutputState,
	}
}

func (i StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs) ToStreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput() StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs) ToStreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput).ToStreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutputWithContext(ctx)
}

// StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrInput is an input type that accepts StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs, StreamingPolicyCommonEncryptionCencDrmPlayreadyPtr and StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrInput` via:
//
//	        StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs{...}
//
//	or:
//
//	        nil
type StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput() StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput
	ToStreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput
}

type streamingPolicyCommonEncryptionCencDrmPlayreadyPtrType StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs

func StreamingPolicyCommonEncryptionCencDrmPlayreadyPtr(v *StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs) StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrInput {
	return (*streamingPolicyCommonEncryptionCencDrmPlayreadyPtrType)(v)
}

func (*streamingPolicyCommonEncryptionCencDrmPlayreadyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCencDrmPlayready)(nil)).Elem()
}

func (i *streamingPolicyCommonEncryptionCencDrmPlayreadyPtrType) ToStreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput() StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutputWithContext(context.Background())
}

func (i *streamingPolicyCommonEncryptionCencDrmPlayreadyPtrType) ToStreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput)
}

func (i *streamingPolicyCommonEncryptionCencDrmPlayreadyPtrType) ToOutput(ctx context.Context) pulumix.Output[*StreamingPolicyCommonEncryptionCencDrmPlayready] {
	return pulumix.Output[*StreamingPolicyCommonEncryptionCencDrmPlayready]{
		OutputState: i.ToStreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutputWithContext(ctx).OutputState,
	}
}

type StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCencDrmPlayready)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput) ToStreamingPolicyCommonEncryptionCencDrmPlayreadyOutput() StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput) ToStreamingPolicyCommonEncryptionCencDrmPlayreadyOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput) ToStreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput() StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput {
	return o.ToStreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutputWithContext(context.Background())
}

func (o StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput) ToStreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamingPolicyCommonEncryptionCencDrmPlayready) *StreamingPolicyCommonEncryptionCencDrmPlayready {
		return &v
	}).(StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput)
}

func (o StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyCommonEncryptionCencDrmPlayready] {
	return pulumix.Output[StreamingPolicyCommonEncryptionCencDrmPlayready]{
		OutputState: o.OutputState,
	}
}

// Custom attributes for PlayReady. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput) CustomAttributes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCencDrmPlayready) *string { return v.CustomAttributes }).(pulumi.StringPtrOutput)
}

// The URL template for the custom service that delivers licenses to the end user. This is not required when using Azure Media Services for issuing licenses. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput) CustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCencDrmPlayready) *string {
		return v.CustomLicenseAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

type StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCencDrmPlayready)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput) ToStreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput() StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput) ToStreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*StreamingPolicyCommonEncryptionCencDrmPlayready] {
	return pulumix.Output[*StreamingPolicyCommonEncryptionCencDrmPlayready]{
		OutputState: o.OutputState,
	}
}

func (o StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput) Elem() StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCencDrmPlayready) StreamingPolicyCommonEncryptionCencDrmPlayready {
		if v != nil {
			return *v
		}
		var ret StreamingPolicyCommonEncryptionCencDrmPlayready
		return ret
	}).(StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput)
}

// Custom attributes for PlayReady. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput) CustomAttributes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCencDrmPlayready) *string {
		if v == nil {
			return nil
		}
		return v.CustomAttributes
	}).(pulumi.StringPtrOutput)
}

// The URL template for the custom service that delivers licenses to the end user. This is not required when using Azure Media Services for issuing licenses. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput) CustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCencDrmPlayready) *string {
		if v == nil {
			return nil
		}
		return v.CustomLicenseAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

type StreamingPolicyCommonEncryptionCencEnabledProtocols struct {
	// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
	Dash *bool `pulumi:"dash"`
	// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
	Download *bool `pulumi:"download"`
	// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
	Hls *bool `pulumi:"hls"`
	// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
	SmoothStreaming *bool `pulumi:"smoothStreaming"`
}

// StreamingPolicyCommonEncryptionCencEnabledProtocolsInput is an input type that accepts StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs and StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCencEnabledProtocolsInput` via:
//
//	StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs{...}
type StreamingPolicyCommonEncryptionCencEnabledProtocolsInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCencEnabledProtocolsOutput() StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput
	ToStreamingPolicyCommonEncryptionCencEnabledProtocolsOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput
}

type StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs struct {
	// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
	Dash pulumi.BoolPtrInput `pulumi:"dash"`
	// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
	Download pulumi.BoolPtrInput `pulumi:"download"`
	// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
	Hls pulumi.BoolPtrInput `pulumi:"hls"`
	// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
	SmoothStreaming pulumi.BoolPtrInput `pulumi:"smoothStreaming"`
}

func (StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCencEnabledProtocols)(nil)).Elem()
}

func (i StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs) ToStreamingPolicyCommonEncryptionCencEnabledProtocolsOutput() StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput {
	return i.ToStreamingPolicyCommonEncryptionCencEnabledProtocolsOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs) ToStreamingPolicyCommonEncryptionCencEnabledProtocolsOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput)
}

func (i StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyCommonEncryptionCencEnabledProtocols] {
	return pulumix.Output[StreamingPolicyCommonEncryptionCencEnabledProtocols]{
		OutputState: i.ToStreamingPolicyCommonEncryptionCencEnabledProtocolsOutputWithContext(ctx).OutputState,
	}
}

func (i StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs) ToStreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput() StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutputWithContext(context.Background())
}

func (i StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs) ToStreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput).ToStreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutputWithContext(ctx)
}

// StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrInput is an input type that accepts StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs, StreamingPolicyCommonEncryptionCencEnabledProtocolsPtr and StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput values.
// You can construct a concrete instance of `StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrInput` via:
//
//	        StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs{...}
//
//	or:
//
//	        nil
type StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrInput interface {
	pulumi.Input

	ToStreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput() StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput
	ToStreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutputWithContext(context.Context) StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput
}

type streamingPolicyCommonEncryptionCencEnabledProtocolsPtrType StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs

func StreamingPolicyCommonEncryptionCencEnabledProtocolsPtr(v *StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs) StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrInput {
	return (*streamingPolicyCommonEncryptionCencEnabledProtocolsPtrType)(v)
}

func (*streamingPolicyCommonEncryptionCencEnabledProtocolsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCencEnabledProtocols)(nil)).Elem()
}

func (i *streamingPolicyCommonEncryptionCencEnabledProtocolsPtrType) ToStreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput() StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput {
	return i.ToStreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutputWithContext(context.Background())
}

func (i *streamingPolicyCommonEncryptionCencEnabledProtocolsPtrType) ToStreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput)
}

func (i *streamingPolicyCommonEncryptionCencEnabledProtocolsPtrType) ToOutput(ctx context.Context) pulumix.Output[*StreamingPolicyCommonEncryptionCencEnabledProtocols] {
	return pulumix.Output[*StreamingPolicyCommonEncryptionCencEnabledProtocols]{
		OutputState: i.ToStreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutputWithContext(ctx).OutputState,
	}
}

type StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyCommonEncryptionCencEnabledProtocols)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput) ToStreamingPolicyCommonEncryptionCencEnabledProtocolsOutput() StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput) ToStreamingPolicyCommonEncryptionCencEnabledProtocolsOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput) ToStreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput() StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput {
	return o.ToStreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutputWithContext(context.Background())
}

func (o StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput) ToStreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamingPolicyCommonEncryptionCencEnabledProtocols) *StreamingPolicyCommonEncryptionCencEnabledProtocols {
		return &v
	}).(StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput)
}

func (o StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyCommonEncryptionCencEnabledProtocols] {
	return pulumix.Output[StreamingPolicyCommonEncryptionCencEnabledProtocols]{
		OutputState: o.OutputState,
	}
}

// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput) Dash() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCencEnabledProtocols) *bool { return v.Dash }).(pulumi.BoolPtrOutput)
}

// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput) Download() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCencEnabledProtocols) *bool { return v.Download }).(pulumi.BoolPtrOutput)
}

// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput) Hls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCencEnabledProtocols) *bool { return v.Hls }).(pulumi.BoolPtrOutput)
}

// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput) SmoothStreaming() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamingPolicyCommonEncryptionCencEnabledProtocols) *bool { return v.SmoothStreaming }).(pulumi.BoolPtrOutput)
}

type StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyCommonEncryptionCencEnabledProtocols)(nil)).Elem()
}

func (o StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput) ToStreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput() StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput) ToStreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutputWithContext(ctx context.Context) StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput {
	return o
}

func (o StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*StreamingPolicyCommonEncryptionCencEnabledProtocols] {
	return pulumix.Output[*StreamingPolicyCommonEncryptionCencEnabledProtocols]{
		OutputState: o.OutputState,
	}
}

func (o StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput) Elem() StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCencEnabledProtocols) StreamingPolicyCommonEncryptionCencEnabledProtocols {
		if v != nil {
			return *v
		}
		var ret StreamingPolicyCommonEncryptionCencEnabledProtocols
		return ret
	}).(StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput)
}

// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput) Dash() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCencEnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return v.Dash
	}).(pulumi.BoolPtrOutput)
}

// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput) Download() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCencEnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return v.Download
	}).(pulumi.BoolPtrOutput)
}

// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput) Hls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCencEnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return v.Hls
	}).(pulumi.BoolPtrOutput)
}

// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput) SmoothStreaming() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyCommonEncryptionCencEnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return v.SmoothStreaming
	}).(pulumi.BoolPtrOutput)
}

type StreamingPolicyEnvelopeEncryption struct {
	// The URL template for the custom service that delivers content keys to the end user. This is not required when using Azure Media Services for issuing keys. Changing this forces a new Streaming Policy to be created.
	CustomKeysAcquisitionUrlTemplate *string `pulumi:"customKeysAcquisitionUrlTemplate"`
	// A `defaultContentKey` block as defined above. Changing this forces a new Streaming Policy to be created.
	DefaultContentKey *StreamingPolicyEnvelopeEncryptionDefaultContentKey `pulumi:"defaultContentKey"`
	// A `enabledProtocols` block as defined above. Changing this forces a new Streaming Policy to be created.
	EnabledProtocols *StreamingPolicyEnvelopeEncryptionEnabledProtocols `pulumi:"enabledProtocols"`
}

// StreamingPolicyEnvelopeEncryptionInput is an input type that accepts StreamingPolicyEnvelopeEncryptionArgs and StreamingPolicyEnvelopeEncryptionOutput values.
// You can construct a concrete instance of `StreamingPolicyEnvelopeEncryptionInput` via:
//
//	StreamingPolicyEnvelopeEncryptionArgs{...}
type StreamingPolicyEnvelopeEncryptionInput interface {
	pulumi.Input

	ToStreamingPolicyEnvelopeEncryptionOutput() StreamingPolicyEnvelopeEncryptionOutput
	ToStreamingPolicyEnvelopeEncryptionOutputWithContext(context.Context) StreamingPolicyEnvelopeEncryptionOutput
}

type StreamingPolicyEnvelopeEncryptionArgs struct {
	// The URL template for the custom service that delivers content keys to the end user. This is not required when using Azure Media Services for issuing keys. Changing this forces a new Streaming Policy to be created.
	CustomKeysAcquisitionUrlTemplate pulumi.StringPtrInput `pulumi:"customKeysAcquisitionUrlTemplate"`
	// A `defaultContentKey` block as defined above. Changing this forces a new Streaming Policy to be created.
	DefaultContentKey StreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrInput `pulumi:"defaultContentKey"`
	// A `enabledProtocols` block as defined above. Changing this forces a new Streaming Policy to be created.
	EnabledProtocols StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrInput `pulumi:"enabledProtocols"`
}

func (StreamingPolicyEnvelopeEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyEnvelopeEncryption)(nil)).Elem()
}

func (i StreamingPolicyEnvelopeEncryptionArgs) ToStreamingPolicyEnvelopeEncryptionOutput() StreamingPolicyEnvelopeEncryptionOutput {
	return i.ToStreamingPolicyEnvelopeEncryptionOutputWithContext(context.Background())
}

func (i StreamingPolicyEnvelopeEncryptionArgs) ToStreamingPolicyEnvelopeEncryptionOutputWithContext(ctx context.Context) StreamingPolicyEnvelopeEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyEnvelopeEncryptionOutput)
}

func (i StreamingPolicyEnvelopeEncryptionArgs) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyEnvelopeEncryption] {
	return pulumix.Output[StreamingPolicyEnvelopeEncryption]{
		OutputState: i.ToStreamingPolicyEnvelopeEncryptionOutputWithContext(ctx).OutputState,
	}
}

func (i StreamingPolicyEnvelopeEncryptionArgs) ToStreamingPolicyEnvelopeEncryptionPtrOutput() StreamingPolicyEnvelopeEncryptionPtrOutput {
	return i.ToStreamingPolicyEnvelopeEncryptionPtrOutputWithContext(context.Background())
}

func (i StreamingPolicyEnvelopeEncryptionArgs) ToStreamingPolicyEnvelopeEncryptionPtrOutputWithContext(ctx context.Context) StreamingPolicyEnvelopeEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyEnvelopeEncryptionOutput).ToStreamingPolicyEnvelopeEncryptionPtrOutputWithContext(ctx)
}

// StreamingPolicyEnvelopeEncryptionPtrInput is an input type that accepts StreamingPolicyEnvelopeEncryptionArgs, StreamingPolicyEnvelopeEncryptionPtr and StreamingPolicyEnvelopeEncryptionPtrOutput values.
// You can construct a concrete instance of `StreamingPolicyEnvelopeEncryptionPtrInput` via:
//
//	        StreamingPolicyEnvelopeEncryptionArgs{...}
//
//	or:
//
//	        nil
type StreamingPolicyEnvelopeEncryptionPtrInput interface {
	pulumi.Input

	ToStreamingPolicyEnvelopeEncryptionPtrOutput() StreamingPolicyEnvelopeEncryptionPtrOutput
	ToStreamingPolicyEnvelopeEncryptionPtrOutputWithContext(context.Context) StreamingPolicyEnvelopeEncryptionPtrOutput
}

type streamingPolicyEnvelopeEncryptionPtrType StreamingPolicyEnvelopeEncryptionArgs

func StreamingPolicyEnvelopeEncryptionPtr(v *StreamingPolicyEnvelopeEncryptionArgs) StreamingPolicyEnvelopeEncryptionPtrInput {
	return (*streamingPolicyEnvelopeEncryptionPtrType)(v)
}

func (*streamingPolicyEnvelopeEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyEnvelopeEncryption)(nil)).Elem()
}

func (i *streamingPolicyEnvelopeEncryptionPtrType) ToStreamingPolicyEnvelopeEncryptionPtrOutput() StreamingPolicyEnvelopeEncryptionPtrOutput {
	return i.ToStreamingPolicyEnvelopeEncryptionPtrOutputWithContext(context.Background())
}

func (i *streamingPolicyEnvelopeEncryptionPtrType) ToStreamingPolicyEnvelopeEncryptionPtrOutputWithContext(ctx context.Context) StreamingPolicyEnvelopeEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyEnvelopeEncryptionPtrOutput)
}

func (i *streamingPolicyEnvelopeEncryptionPtrType) ToOutput(ctx context.Context) pulumix.Output[*StreamingPolicyEnvelopeEncryption] {
	return pulumix.Output[*StreamingPolicyEnvelopeEncryption]{
		OutputState: i.ToStreamingPolicyEnvelopeEncryptionPtrOutputWithContext(ctx).OutputState,
	}
}

type StreamingPolicyEnvelopeEncryptionOutput struct{ *pulumi.OutputState }

func (StreamingPolicyEnvelopeEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyEnvelopeEncryption)(nil)).Elem()
}

func (o StreamingPolicyEnvelopeEncryptionOutput) ToStreamingPolicyEnvelopeEncryptionOutput() StreamingPolicyEnvelopeEncryptionOutput {
	return o
}

func (o StreamingPolicyEnvelopeEncryptionOutput) ToStreamingPolicyEnvelopeEncryptionOutputWithContext(ctx context.Context) StreamingPolicyEnvelopeEncryptionOutput {
	return o
}

func (o StreamingPolicyEnvelopeEncryptionOutput) ToStreamingPolicyEnvelopeEncryptionPtrOutput() StreamingPolicyEnvelopeEncryptionPtrOutput {
	return o.ToStreamingPolicyEnvelopeEncryptionPtrOutputWithContext(context.Background())
}

func (o StreamingPolicyEnvelopeEncryptionOutput) ToStreamingPolicyEnvelopeEncryptionPtrOutputWithContext(ctx context.Context) StreamingPolicyEnvelopeEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamingPolicyEnvelopeEncryption) *StreamingPolicyEnvelopeEncryption {
		return &v
	}).(StreamingPolicyEnvelopeEncryptionPtrOutput)
}

func (o StreamingPolicyEnvelopeEncryptionOutput) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyEnvelopeEncryption] {
	return pulumix.Output[StreamingPolicyEnvelopeEncryption]{
		OutputState: o.OutputState,
	}
}

// The URL template for the custom service that delivers content keys to the end user. This is not required when using Azure Media Services for issuing keys. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyEnvelopeEncryptionOutput) CustomKeysAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyEnvelopeEncryption) *string { return v.CustomKeysAcquisitionUrlTemplate }).(pulumi.StringPtrOutput)
}

// A `defaultContentKey` block as defined above. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyEnvelopeEncryptionOutput) DefaultContentKey() StreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutput {
	return o.ApplyT(func(v StreamingPolicyEnvelopeEncryption) *StreamingPolicyEnvelopeEncryptionDefaultContentKey {
		return v.DefaultContentKey
	}).(StreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutput)
}

// A `enabledProtocols` block as defined above. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyEnvelopeEncryptionOutput) EnabledProtocols() StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutput {
	return o.ApplyT(func(v StreamingPolicyEnvelopeEncryption) *StreamingPolicyEnvelopeEncryptionEnabledProtocols {
		return v.EnabledProtocols
	}).(StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutput)
}

type StreamingPolicyEnvelopeEncryptionPtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyEnvelopeEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyEnvelopeEncryption)(nil)).Elem()
}

func (o StreamingPolicyEnvelopeEncryptionPtrOutput) ToStreamingPolicyEnvelopeEncryptionPtrOutput() StreamingPolicyEnvelopeEncryptionPtrOutput {
	return o
}

func (o StreamingPolicyEnvelopeEncryptionPtrOutput) ToStreamingPolicyEnvelopeEncryptionPtrOutputWithContext(ctx context.Context) StreamingPolicyEnvelopeEncryptionPtrOutput {
	return o
}

func (o StreamingPolicyEnvelopeEncryptionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*StreamingPolicyEnvelopeEncryption] {
	return pulumix.Output[*StreamingPolicyEnvelopeEncryption]{
		OutputState: o.OutputState,
	}
}

func (o StreamingPolicyEnvelopeEncryptionPtrOutput) Elem() StreamingPolicyEnvelopeEncryptionOutput {
	return o.ApplyT(func(v *StreamingPolicyEnvelopeEncryption) StreamingPolicyEnvelopeEncryption {
		if v != nil {
			return *v
		}
		var ret StreamingPolicyEnvelopeEncryption
		return ret
	}).(StreamingPolicyEnvelopeEncryptionOutput)
}

// The URL template for the custom service that delivers content keys to the end user. This is not required when using Azure Media Services for issuing keys. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyEnvelopeEncryptionPtrOutput) CustomKeysAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyEnvelopeEncryption) *string {
		if v == nil {
			return nil
		}
		return v.CustomKeysAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

// A `defaultContentKey` block as defined above. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyEnvelopeEncryptionPtrOutput) DefaultContentKey() StreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyEnvelopeEncryption) *StreamingPolicyEnvelopeEncryptionDefaultContentKey {
		if v == nil {
			return nil
		}
		return v.DefaultContentKey
	}).(StreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutput)
}

// A `enabledProtocols` block as defined above. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyEnvelopeEncryptionPtrOutput) EnabledProtocols() StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyEnvelopeEncryption) *StreamingPolicyEnvelopeEncryptionEnabledProtocols {
		if v == nil {
			return nil
		}
		return v.EnabledProtocols
	}).(StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutput)
}

type StreamingPolicyEnvelopeEncryptionDefaultContentKey struct {
	// Label can be used to specify Content Key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
	Label *string `pulumi:"label"`
	// Policy used by Default Key. Changing this forces a new Streaming Policy to be created.
	PolicyName *string `pulumi:"policyName"`
}

// StreamingPolicyEnvelopeEncryptionDefaultContentKeyInput is an input type that accepts StreamingPolicyEnvelopeEncryptionDefaultContentKeyArgs and StreamingPolicyEnvelopeEncryptionDefaultContentKeyOutput values.
// You can construct a concrete instance of `StreamingPolicyEnvelopeEncryptionDefaultContentKeyInput` via:
//
//	StreamingPolicyEnvelopeEncryptionDefaultContentKeyArgs{...}
type StreamingPolicyEnvelopeEncryptionDefaultContentKeyInput interface {
	pulumi.Input

	ToStreamingPolicyEnvelopeEncryptionDefaultContentKeyOutput() StreamingPolicyEnvelopeEncryptionDefaultContentKeyOutput
	ToStreamingPolicyEnvelopeEncryptionDefaultContentKeyOutputWithContext(context.Context) StreamingPolicyEnvelopeEncryptionDefaultContentKeyOutput
}

type StreamingPolicyEnvelopeEncryptionDefaultContentKeyArgs struct {
	// Label can be used to specify Content Key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Policy used by Default Key. Changing this forces a new Streaming Policy to be created.
	PolicyName pulumi.StringPtrInput `pulumi:"policyName"`
}

func (StreamingPolicyEnvelopeEncryptionDefaultContentKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyEnvelopeEncryptionDefaultContentKey)(nil)).Elem()
}

func (i StreamingPolicyEnvelopeEncryptionDefaultContentKeyArgs) ToStreamingPolicyEnvelopeEncryptionDefaultContentKeyOutput() StreamingPolicyEnvelopeEncryptionDefaultContentKeyOutput {
	return i.ToStreamingPolicyEnvelopeEncryptionDefaultContentKeyOutputWithContext(context.Background())
}

func (i StreamingPolicyEnvelopeEncryptionDefaultContentKeyArgs) ToStreamingPolicyEnvelopeEncryptionDefaultContentKeyOutputWithContext(ctx context.Context) StreamingPolicyEnvelopeEncryptionDefaultContentKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyEnvelopeEncryptionDefaultContentKeyOutput)
}

func (i StreamingPolicyEnvelopeEncryptionDefaultContentKeyArgs) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyEnvelopeEncryptionDefaultContentKey] {
	return pulumix.Output[StreamingPolicyEnvelopeEncryptionDefaultContentKey]{
		OutputState: i.ToStreamingPolicyEnvelopeEncryptionDefaultContentKeyOutputWithContext(ctx).OutputState,
	}
}

func (i StreamingPolicyEnvelopeEncryptionDefaultContentKeyArgs) ToStreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutput() StreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutput {
	return i.ToStreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutputWithContext(context.Background())
}

func (i StreamingPolicyEnvelopeEncryptionDefaultContentKeyArgs) ToStreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutputWithContext(ctx context.Context) StreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyEnvelopeEncryptionDefaultContentKeyOutput).ToStreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutputWithContext(ctx)
}

// StreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrInput is an input type that accepts StreamingPolicyEnvelopeEncryptionDefaultContentKeyArgs, StreamingPolicyEnvelopeEncryptionDefaultContentKeyPtr and StreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutput values.
// You can construct a concrete instance of `StreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrInput` via:
//
//	        StreamingPolicyEnvelopeEncryptionDefaultContentKeyArgs{...}
//
//	or:
//
//	        nil
type StreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrInput interface {
	pulumi.Input

	ToStreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutput() StreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutput
	ToStreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutputWithContext(context.Context) StreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutput
}

type streamingPolicyEnvelopeEncryptionDefaultContentKeyPtrType StreamingPolicyEnvelopeEncryptionDefaultContentKeyArgs

func StreamingPolicyEnvelopeEncryptionDefaultContentKeyPtr(v *StreamingPolicyEnvelopeEncryptionDefaultContentKeyArgs) StreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrInput {
	return (*streamingPolicyEnvelopeEncryptionDefaultContentKeyPtrType)(v)
}

func (*streamingPolicyEnvelopeEncryptionDefaultContentKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyEnvelopeEncryptionDefaultContentKey)(nil)).Elem()
}

func (i *streamingPolicyEnvelopeEncryptionDefaultContentKeyPtrType) ToStreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutput() StreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutput {
	return i.ToStreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutputWithContext(context.Background())
}

func (i *streamingPolicyEnvelopeEncryptionDefaultContentKeyPtrType) ToStreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutputWithContext(ctx context.Context) StreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutput)
}

func (i *streamingPolicyEnvelopeEncryptionDefaultContentKeyPtrType) ToOutput(ctx context.Context) pulumix.Output[*StreamingPolicyEnvelopeEncryptionDefaultContentKey] {
	return pulumix.Output[*StreamingPolicyEnvelopeEncryptionDefaultContentKey]{
		OutputState: i.ToStreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutputWithContext(ctx).OutputState,
	}
}

type StreamingPolicyEnvelopeEncryptionDefaultContentKeyOutput struct{ *pulumi.OutputState }

func (StreamingPolicyEnvelopeEncryptionDefaultContentKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyEnvelopeEncryptionDefaultContentKey)(nil)).Elem()
}

func (o StreamingPolicyEnvelopeEncryptionDefaultContentKeyOutput) ToStreamingPolicyEnvelopeEncryptionDefaultContentKeyOutput() StreamingPolicyEnvelopeEncryptionDefaultContentKeyOutput {
	return o
}

func (o StreamingPolicyEnvelopeEncryptionDefaultContentKeyOutput) ToStreamingPolicyEnvelopeEncryptionDefaultContentKeyOutputWithContext(ctx context.Context) StreamingPolicyEnvelopeEncryptionDefaultContentKeyOutput {
	return o
}

func (o StreamingPolicyEnvelopeEncryptionDefaultContentKeyOutput) ToStreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutput() StreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutput {
	return o.ToStreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutputWithContext(context.Background())
}

func (o StreamingPolicyEnvelopeEncryptionDefaultContentKeyOutput) ToStreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutputWithContext(ctx context.Context) StreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamingPolicyEnvelopeEncryptionDefaultContentKey) *StreamingPolicyEnvelopeEncryptionDefaultContentKey {
		return &v
	}).(StreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutput)
}

func (o StreamingPolicyEnvelopeEncryptionDefaultContentKeyOutput) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyEnvelopeEncryptionDefaultContentKey] {
	return pulumix.Output[StreamingPolicyEnvelopeEncryptionDefaultContentKey]{
		OutputState: o.OutputState,
	}
}

// Label can be used to specify Content Key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyEnvelopeEncryptionDefaultContentKeyOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyEnvelopeEncryptionDefaultContentKey) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Policy used by Default Key. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyEnvelopeEncryptionDefaultContentKeyOutput) PolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyEnvelopeEncryptionDefaultContentKey) *string { return v.PolicyName }).(pulumi.StringPtrOutput)
}

type StreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyEnvelopeEncryptionDefaultContentKey)(nil)).Elem()
}

func (o StreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutput) ToStreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutput() StreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutput {
	return o
}

func (o StreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutput) ToStreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutputWithContext(ctx context.Context) StreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutput {
	return o
}

func (o StreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*StreamingPolicyEnvelopeEncryptionDefaultContentKey] {
	return pulumix.Output[*StreamingPolicyEnvelopeEncryptionDefaultContentKey]{
		OutputState: o.OutputState,
	}
}

func (o StreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutput) Elem() StreamingPolicyEnvelopeEncryptionDefaultContentKeyOutput {
	return o.ApplyT(func(v *StreamingPolicyEnvelopeEncryptionDefaultContentKey) StreamingPolicyEnvelopeEncryptionDefaultContentKey {
		if v != nil {
			return *v
		}
		var ret StreamingPolicyEnvelopeEncryptionDefaultContentKey
		return ret
	}).(StreamingPolicyEnvelopeEncryptionDefaultContentKeyOutput)
}

// Label can be used to specify Content Key when creating a Streaming Locator. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyEnvelopeEncryptionDefaultContentKey) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

// Policy used by Default Key. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutput) PolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyEnvelopeEncryptionDefaultContentKey) *string {
		if v == nil {
			return nil
		}
		return v.PolicyName
	}).(pulumi.StringPtrOutput)
}

type StreamingPolicyEnvelopeEncryptionEnabledProtocols struct {
	// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
	Dash *bool `pulumi:"dash"`
	// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
	Download *bool `pulumi:"download"`
	// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
	Hls *bool `pulumi:"hls"`
	// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
	SmoothStreaming *bool `pulumi:"smoothStreaming"`
}

// StreamingPolicyEnvelopeEncryptionEnabledProtocolsInput is an input type that accepts StreamingPolicyEnvelopeEncryptionEnabledProtocolsArgs and StreamingPolicyEnvelopeEncryptionEnabledProtocolsOutput values.
// You can construct a concrete instance of `StreamingPolicyEnvelopeEncryptionEnabledProtocolsInput` via:
//
//	StreamingPolicyEnvelopeEncryptionEnabledProtocolsArgs{...}
type StreamingPolicyEnvelopeEncryptionEnabledProtocolsInput interface {
	pulumi.Input

	ToStreamingPolicyEnvelopeEncryptionEnabledProtocolsOutput() StreamingPolicyEnvelopeEncryptionEnabledProtocolsOutput
	ToStreamingPolicyEnvelopeEncryptionEnabledProtocolsOutputWithContext(context.Context) StreamingPolicyEnvelopeEncryptionEnabledProtocolsOutput
}

type StreamingPolicyEnvelopeEncryptionEnabledProtocolsArgs struct {
	// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
	Dash pulumi.BoolPtrInput `pulumi:"dash"`
	// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
	Download pulumi.BoolPtrInput `pulumi:"download"`
	// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
	Hls pulumi.BoolPtrInput `pulumi:"hls"`
	// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
	SmoothStreaming pulumi.BoolPtrInput `pulumi:"smoothStreaming"`
}

func (StreamingPolicyEnvelopeEncryptionEnabledProtocolsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyEnvelopeEncryptionEnabledProtocols)(nil)).Elem()
}

func (i StreamingPolicyEnvelopeEncryptionEnabledProtocolsArgs) ToStreamingPolicyEnvelopeEncryptionEnabledProtocolsOutput() StreamingPolicyEnvelopeEncryptionEnabledProtocolsOutput {
	return i.ToStreamingPolicyEnvelopeEncryptionEnabledProtocolsOutputWithContext(context.Background())
}

func (i StreamingPolicyEnvelopeEncryptionEnabledProtocolsArgs) ToStreamingPolicyEnvelopeEncryptionEnabledProtocolsOutputWithContext(ctx context.Context) StreamingPolicyEnvelopeEncryptionEnabledProtocolsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyEnvelopeEncryptionEnabledProtocolsOutput)
}

func (i StreamingPolicyEnvelopeEncryptionEnabledProtocolsArgs) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyEnvelopeEncryptionEnabledProtocols] {
	return pulumix.Output[StreamingPolicyEnvelopeEncryptionEnabledProtocols]{
		OutputState: i.ToStreamingPolicyEnvelopeEncryptionEnabledProtocolsOutputWithContext(ctx).OutputState,
	}
}

func (i StreamingPolicyEnvelopeEncryptionEnabledProtocolsArgs) ToStreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutput() StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutput {
	return i.ToStreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutputWithContext(context.Background())
}

func (i StreamingPolicyEnvelopeEncryptionEnabledProtocolsArgs) ToStreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutputWithContext(ctx context.Context) StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyEnvelopeEncryptionEnabledProtocolsOutput).ToStreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutputWithContext(ctx)
}

// StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrInput is an input type that accepts StreamingPolicyEnvelopeEncryptionEnabledProtocolsArgs, StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtr and StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutput values.
// You can construct a concrete instance of `StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrInput` via:
//
//	        StreamingPolicyEnvelopeEncryptionEnabledProtocolsArgs{...}
//
//	or:
//
//	        nil
type StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrInput interface {
	pulumi.Input

	ToStreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutput() StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutput
	ToStreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutputWithContext(context.Context) StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutput
}

type streamingPolicyEnvelopeEncryptionEnabledProtocolsPtrType StreamingPolicyEnvelopeEncryptionEnabledProtocolsArgs

func StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtr(v *StreamingPolicyEnvelopeEncryptionEnabledProtocolsArgs) StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrInput {
	return (*streamingPolicyEnvelopeEncryptionEnabledProtocolsPtrType)(v)
}

func (*streamingPolicyEnvelopeEncryptionEnabledProtocolsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyEnvelopeEncryptionEnabledProtocols)(nil)).Elem()
}

func (i *streamingPolicyEnvelopeEncryptionEnabledProtocolsPtrType) ToStreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutput() StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutput {
	return i.ToStreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutputWithContext(context.Background())
}

func (i *streamingPolicyEnvelopeEncryptionEnabledProtocolsPtrType) ToStreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutputWithContext(ctx context.Context) StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutput)
}

func (i *streamingPolicyEnvelopeEncryptionEnabledProtocolsPtrType) ToOutput(ctx context.Context) pulumix.Output[*StreamingPolicyEnvelopeEncryptionEnabledProtocols] {
	return pulumix.Output[*StreamingPolicyEnvelopeEncryptionEnabledProtocols]{
		OutputState: i.ToStreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutputWithContext(ctx).OutputState,
	}
}

type StreamingPolicyEnvelopeEncryptionEnabledProtocolsOutput struct{ *pulumi.OutputState }

func (StreamingPolicyEnvelopeEncryptionEnabledProtocolsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyEnvelopeEncryptionEnabledProtocols)(nil)).Elem()
}

func (o StreamingPolicyEnvelopeEncryptionEnabledProtocolsOutput) ToStreamingPolicyEnvelopeEncryptionEnabledProtocolsOutput() StreamingPolicyEnvelopeEncryptionEnabledProtocolsOutput {
	return o
}

func (o StreamingPolicyEnvelopeEncryptionEnabledProtocolsOutput) ToStreamingPolicyEnvelopeEncryptionEnabledProtocolsOutputWithContext(ctx context.Context) StreamingPolicyEnvelopeEncryptionEnabledProtocolsOutput {
	return o
}

func (o StreamingPolicyEnvelopeEncryptionEnabledProtocolsOutput) ToStreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutput() StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutput {
	return o.ToStreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutputWithContext(context.Background())
}

func (o StreamingPolicyEnvelopeEncryptionEnabledProtocolsOutput) ToStreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutputWithContext(ctx context.Context) StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamingPolicyEnvelopeEncryptionEnabledProtocols) *StreamingPolicyEnvelopeEncryptionEnabledProtocols {
		return &v
	}).(StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutput)
}

func (o StreamingPolicyEnvelopeEncryptionEnabledProtocolsOutput) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyEnvelopeEncryptionEnabledProtocols] {
	return pulumix.Output[StreamingPolicyEnvelopeEncryptionEnabledProtocols]{
		OutputState: o.OutputState,
	}
}

// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyEnvelopeEncryptionEnabledProtocolsOutput) Dash() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamingPolicyEnvelopeEncryptionEnabledProtocols) *bool { return v.Dash }).(pulumi.BoolPtrOutput)
}

// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyEnvelopeEncryptionEnabledProtocolsOutput) Download() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamingPolicyEnvelopeEncryptionEnabledProtocols) *bool { return v.Download }).(pulumi.BoolPtrOutput)
}

// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyEnvelopeEncryptionEnabledProtocolsOutput) Hls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamingPolicyEnvelopeEncryptionEnabledProtocols) *bool { return v.Hls }).(pulumi.BoolPtrOutput)
}

// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyEnvelopeEncryptionEnabledProtocolsOutput) SmoothStreaming() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamingPolicyEnvelopeEncryptionEnabledProtocols) *bool { return v.SmoothStreaming }).(pulumi.BoolPtrOutput)
}

type StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyEnvelopeEncryptionEnabledProtocols)(nil)).Elem()
}

func (o StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutput) ToStreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutput() StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutput {
	return o
}

func (o StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutput) ToStreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutputWithContext(ctx context.Context) StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutput {
	return o
}

func (o StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*StreamingPolicyEnvelopeEncryptionEnabledProtocols] {
	return pulumix.Output[*StreamingPolicyEnvelopeEncryptionEnabledProtocols]{
		OutputState: o.OutputState,
	}
}

func (o StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutput) Elem() StreamingPolicyEnvelopeEncryptionEnabledProtocolsOutput {
	return o.ApplyT(func(v *StreamingPolicyEnvelopeEncryptionEnabledProtocols) StreamingPolicyEnvelopeEncryptionEnabledProtocols {
		if v != nil {
			return *v
		}
		var ret StreamingPolicyEnvelopeEncryptionEnabledProtocols
		return ret
	}).(StreamingPolicyEnvelopeEncryptionEnabledProtocolsOutput)
}

// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutput) Dash() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyEnvelopeEncryptionEnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return v.Dash
	}).(pulumi.BoolPtrOutput)
}

// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutput) Download() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyEnvelopeEncryptionEnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return v.Download
	}).(pulumi.BoolPtrOutput)
}

// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutput) Hls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyEnvelopeEncryptionEnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return v.Hls
	}).(pulumi.BoolPtrOutput)
}

// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutput) SmoothStreaming() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyEnvelopeEncryptionEnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return v.SmoothStreaming
	}).(pulumi.BoolPtrOutput)
}

type StreamingPolicyNoEncryptionEnabledProtocols struct {
	// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
	Dash *bool `pulumi:"dash"`
	// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
	Download *bool `pulumi:"download"`
	// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
	Hls *bool `pulumi:"hls"`
	// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
	SmoothStreaming *bool `pulumi:"smoothStreaming"`
}

// StreamingPolicyNoEncryptionEnabledProtocolsInput is an input type that accepts StreamingPolicyNoEncryptionEnabledProtocolsArgs and StreamingPolicyNoEncryptionEnabledProtocolsOutput values.
// You can construct a concrete instance of `StreamingPolicyNoEncryptionEnabledProtocolsInput` via:
//
//	StreamingPolicyNoEncryptionEnabledProtocolsArgs{...}
type StreamingPolicyNoEncryptionEnabledProtocolsInput interface {
	pulumi.Input

	ToStreamingPolicyNoEncryptionEnabledProtocolsOutput() StreamingPolicyNoEncryptionEnabledProtocolsOutput
	ToStreamingPolicyNoEncryptionEnabledProtocolsOutputWithContext(context.Context) StreamingPolicyNoEncryptionEnabledProtocolsOutput
}

type StreamingPolicyNoEncryptionEnabledProtocolsArgs struct {
	// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
	Dash pulumi.BoolPtrInput `pulumi:"dash"`
	// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
	Download pulumi.BoolPtrInput `pulumi:"download"`
	// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
	Hls pulumi.BoolPtrInput `pulumi:"hls"`
	// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
	SmoothStreaming pulumi.BoolPtrInput `pulumi:"smoothStreaming"`
}

func (StreamingPolicyNoEncryptionEnabledProtocolsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyNoEncryptionEnabledProtocols)(nil)).Elem()
}

func (i StreamingPolicyNoEncryptionEnabledProtocolsArgs) ToStreamingPolicyNoEncryptionEnabledProtocolsOutput() StreamingPolicyNoEncryptionEnabledProtocolsOutput {
	return i.ToStreamingPolicyNoEncryptionEnabledProtocolsOutputWithContext(context.Background())
}

func (i StreamingPolicyNoEncryptionEnabledProtocolsArgs) ToStreamingPolicyNoEncryptionEnabledProtocolsOutputWithContext(ctx context.Context) StreamingPolicyNoEncryptionEnabledProtocolsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyNoEncryptionEnabledProtocolsOutput)
}

func (i StreamingPolicyNoEncryptionEnabledProtocolsArgs) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyNoEncryptionEnabledProtocols] {
	return pulumix.Output[StreamingPolicyNoEncryptionEnabledProtocols]{
		OutputState: i.ToStreamingPolicyNoEncryptionEnabledProtocolsOutputWithContext(ctx).OutputState,
	}
}

func (i StreamingPolicyNoEncryptionEnabledProtocolsArgs) ToStreamingPolicyNoEncryptionEnabledProtocolsPtrOutput() StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput {
	return i.ToStreamingPolicyNoEncryptionEnabledProtocolsPtrOutputWithContext(context.Background())
}

func (i StreamingPolicyNoEncryptionEnabledProtocolsArgs) ToStreamingPolicyNoEncryptionEnabledProtocolsPtrOutputWithContext(ctx context.Context) StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyNoEncryptionEnabledProtocolsOutput).ToStreamingPolicyNoEncryptionEnabledProtocolsPtrOutputWithContext(ctx)
}

// StreamingPolicyNoEncryptionEnabledProtocolsPtrInput is an input type that accepts StreamingPolicyNoEncryptionEnabledProtocolsArgs, StreamingPolicyNoEncryptionEnabledProtocolsPtr and StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput values.
// You can construct a concrete instance of `StreamingPolicyNoEncryptionEnabledProtocolsPtrInput` via:
//
//	        StreamingPolicyNoEncryptionEnabledProtocolsArgs{...}
//
//	or:
//
//	        nil
type StreamingPolicyNoEncryptionEnabledProtocolsPtrInput interface {
	pulumi.Input

	ToStreamingPolicyNoEncryptionEnabledProtocolsPtrOutput() StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput
	ToStreamingPolicyNoEncryptionEnabledProtocolsPtrOutputWithContext(context.Context) StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput
}

type streamingPolicyNoEncryptionEnabledProtocolsPtrType StreamingPolicyNoEncryptionEnabledProtocolsArgs

func StreamingPolicyNoEncryptionEnabledProtocolsPtr(v *StreamingPolicyNoEncryptionEnabledProtocolsArgs) StreamingPolicyNoEncryptionEnabledProtocolsPtrInput {
	return (*streamingPolicyNoEncryptionEnabledProtocolsPtrType)(v)
}

func (*streamingPolicyNoEncryptionEnabledProtocolsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyNoEncryptionEnabledProtocols)(nil)).Elem()
}

func (i *streamingPolicyNoEncryptionEnabledProtocolsPtrType) ToStreamingPolicyNoEncryptionEnabledProtocolsPtrOutput() StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput {
	return i.ToStreamingPolicyNoEncryptionEnabledProtocolsPtrOutputWithContext(context.Background())
}

func (i *streamingPolicyNoEncryptionEnabledProtocolsPtrType) ToStreamingPolicyNoEncryptionEnabledProtocolsPtrOutputWithContext(ctx context.Context) StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput)
}

func (i *streamingPolicyNoEncryptionEnabledProtocolsPtrType) ToOutput(ctx context.Context) pulumix.Output[*StreamingPolicyNoEncryptionEnabledProtocols] {
	return pulumix.Output[*StreamingPolicyNoEncryptionEnabledProtocols]{
		OutputState: i.ToStreamingPolicyNoEncryptionEnabledProtocolsPtrOutputWithContext(ctx).OutputState,
	}
}

type StreamingPolicyNoEncryptionEnabledProtocolsOutput struct{ *pulumi.OutputState }

func (StreamingPolicyNoEncryptionEnabledProtocolsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyNoEncryptionEnabledProtocols)(nil)).Elem()
}

func (o StreamingPolicyNoEncryptionEnabledProtocolsOutput) ToStreamingPolicyNoEncryptionEnabledProtocolsOutput() StreamingPolicyNoEncryptionEnabledProtocolsOutput {
	return o
}

func (o StreamingPolicyNoEncryptionEnabledProtocolsOutput) ToStreamingPolicyNoEncryptionEnabledProtocolsOutputWithContext(ctx context.Context) StreamingPolicyNoEncryptionEnabledProtocolsOutput {
	return o
}

func (o StreamingPolicyNoEncryptionEnabledProtocolsOutput) ToStreamingPolicyNoEncryptionEnabledProtocolsPtrOutput() StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput {
	return o.ToStreamingPolicyNoEncryptionEnabledProtocolsPtrOutputWithContext(context.Background())
}

func (o StreamingPolicyNoEncryptionEnabledProtocolsOutput) ToStreamingPolicyNoEncryptionEnabledProtocolsPtrOutputWithContext(ctx context.Context) StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamingPolicyNoEncryptionEnabledProtocols) *StreamingPolicyNoEncryptionEnabledProtocols {
		return &v
	}).(StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput)
}

func (o StreamingPolicyNoEncryptionEnabledProtocolsOutput) ToOutput(ctx context.Context) pulumix.Output[StreamingPolicyNoEncryptionEnabledProtocols] {
	return pulumix.Output[StreamingPolicyNoEncryptionEnabledProtocols]{
		OutputState: o.OutputState,
	}
}

// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyNoEncryptionEnabledProtocolsOutput) Dash() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamingPolicyNoEncryptionEnabledProtocols) *bool { return v.Dash }).(pulumi.BoolPtrOutput)
}

// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyNoEncryptionEnabledProtocolsOutput) Download() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamingPolicyNoEncryptionEnabledProtocols) *bool { return v.Download }).(pulumi.BoolPtrOutput)
}

// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyNoEncryptionEnabledProtocolsOutput) Hls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamingPolicyNoEncryptionEnabledProtocols) *bool { return v.Hls }).(pulumi.BoolPtrOutput)
}

// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyNoEncryptionEnabledProtocolsOutput) SmoothStreaming() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamingPolicyNoEncryptionEnabledProtocols) *bool { return v.SmoothStreaming }).(pulumi.BoolPtrOutput)
}

type StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyNoEncryptionEnabledProtocols)(nil)).Elem()
}

func (o StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput) ToStreamingPolicyNoEncryptionEnabledProtocolsPtrOutput() StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput {
	return o
}

func (o StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput) ToStreamingPolicyNoEncryptionEnabledProtocolsPtrOutputWithContext(ctx context.Context) StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput {
	return o
}

func (o StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*StreamingPolicyNoEncryptionEnabledProtocols] {
	return pulumix.Output[*StreamingPolicyNoEncryptionEnabledProtocols]{
		OutputState: o.OutputState,
	}
}

func (o StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput) Elem() StreamingPolicyNoEncryptionEnabledProtocolsOutput {
	return o.ApplyT(func(v *StreamingPolicyNoEncryptionEnabledProtocols) StreamingPolicyNoEncryptionEnabledProtocols {
		if v != nil {
			return *v
		}
		var ret StreamingPolicyNoEncryptionEnabledProtocols
		return ret
	}).(StreamingPolicyNoEncryptionEnabledProtocolsOutput)
}

// Enable DASH protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput) Dash() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyNoEncryptionEnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return v.Dash
	}).(pulumi.BoolPtrOutput)
}

// Enable Download protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput) Download() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyNoEncryptionEnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return v.Download
	}).(pulumi.BoolPtrOutput)
}

// Enable HLS protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput) Hls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyNoEncryptionEnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return v.Hls
	}).(pulumi.BoolPtrOutput)
}

// Enable SmoothStreaming protocol or not. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput) SmoothStreaming() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyNoEncryptionEnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return v.SmoothStreaming
	}).(pulumi.BoolPtrOutput)
}

type TransformOutputType struct {
	// An `audioAnalyzerPreset` block as defined above.
	AudioAnalyzerPreset *TransformOutputAudioAnalyzerPreset `pulumi:"audioAnalyzerPreset"`
	// A `builtinPreset` block as defined above.
	BuiltinPreset *TransformOutputBuiltinPreset `pulumi:"builtinPreset"`
	// A `customPreset` block as defined above.
	CustomPreset *TransformOutputCustomPreset `pulumi:"customPreset"`
	// A `faceDetectorPreset` block as defined above.
	FaceDetectorPreset *TransformOutputFaceDetectorPreset `pulumi:"faceDetectorPreset"`
	// A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with `ContinueJob`. Possible values are `StopProcessingJob` or `ContinueJob`. Defaults to `StopProcessingJob`.
	OnErrorAction *string `pulumi:"onErrorAction"`
	// Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing Transform Outputs. Possible values are `High`, `Normal` or `Low`. Defaults to `Normal`.
	RelativePriority *string `pulumi:"relativePriority"`
	// A `videoAnalyzerPreset` block as defined below.
	//
	// > **NOTE:** Each output can only have one type of preset: `builtinPreset`, `audioAnalyzerPreset`, `customPreset`, `faceDetectorPreset` or `videoAnalyzerPreset`. If you need to apply different presets you must create one output for each one.
	VideoAnalyzerPreset *TransformOutputVideoAnalyzerPreset `pulumi:"videoAnalyzerPreset"`
}

// TransformOutputTypeInput is an input type that accepts TransformOutputTypeArgs and TransformOutputTypeOutput values.
// You can construct a concrete instance of `TransformOutputTypeInput` via:
//
//	TransformOutputTypeArgs{...}
type TransformOutputTypeInput interface {
	pulumi.Input

	ToTransformOutputTypeOutput() TransformOutputTypeOutput
	ToTransformOutputTypeOutputWithContext(context.Context) TransformOutputTypeOutput
}

type TransformOutputTypeArgs struct {
	// An `audioAnalyzerPreset` block as defined above.
	AudioAnalyzerPreset TransformOutputAudioAnalyzerPresetPtrInput `pulumi:"audioAnalyzerPreset"`
	// A `builtinPreset` block as defined above.
	BuiltinPreset TransformOutputBuiltinPresetPtrInput `pulumi:"builtinPreset"`
	// A `customPreset` block as defined above.
	CustomPreset TransformOutputCustomPresetPtrInput `pulumi:"customPreset"`
	// A `faceDetectorPreset` block as defined above.
	FaceDetectorPreset TransformOutputFaceDetectorPresetPtrInput `pulumi:"faceDetectorPreset"`
	// A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with `ContinueJob`. Possible values are `StopProcessingJob` or `ContinueJob`. Defaults to `StopProcessingJob`.
	OnErrorAction pulumi.StringPtrInput `pulumi:"onErrorAction"`
	// Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing Transform Outputs. Possible values are `High`, `Normal` or `Low`. Defaults to `Normal`.
	RelativePriority pulumi.StringPtrInput `pulumi:"relativePriority"`
	// A `videoAnalyzerPreset` block as defined below.
	//
	// > **NOTE:** Each output can only have one type of preset: `builtinPreset`, `audioAnalyzerPreset`, `customPreset`, `faceDetectorPreset` or `videoAnalyzerPreset`. If you need to apply different presets you must create one output for each one.
	VideoAnalyzerPreset TransformOutputVideoAnalyzerPresetPtrInput `pulumi:"videoAnalyzerPreset"`
}

func (TransformOutputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputType)(nil)).Elem()
}

func (i TransformOutputTypeArgs) ToTransformOutputTypeOutput() TransformOutputTypeOutput {
	return i.ToTransformOutputTypeOutputWithContext(context.Background())
}

func (i TransformOutputTypeArgs) ToTransformOutputTypeOutputWithContext(ctx context.Context) TransformOutputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputTypeOutput)
}

func (i TransformOutputTypeArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputType] {
	return pulumix.Output[TransformOutputType]{
		OutputState: i.ToTransformOutputTypeOutputWithContext(ctx).OutputState,
	}
}

// TransformOutputTypeArrayInput is an input type that accepts TransformOutputTypeArray and TransformOutputTypeArrayOutput values.
// You can construct a concrete instance of `TransformOutputTypeArrayInput` via:
//
//	TransformOutputTypeArray{ TransformOutputTypeArgs{...} }
type TransformOutputTypeArrayInput interface {
	pulumi.Input

	ToTransformOutputTypeArrayOutput() TransformOutputTypeArrayOutput
	ToTransformOutputTypeArrayOutputWithContext(context.Context) TransformOutputTypeArrayOutput
}

type TransformOutputTypeArray []TransformOutputTypeInput

func (TransformOutputTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformOutputType)(nil)).Elem()
}

func (i TransformOutputTypeArray) ToTransformOutputTypeArrayOutput() TransformOutputTypeArrayOutput {
	return i.ToTransformOutputTypeArrayOutputWithContext(context.Background())
}

func (i TransformOutputTypeArray) ToTransformOutputTypeArrayOutputWithContext(ctx context.Context) TransformOutputTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputTypeArrayOutput)
}

func (i TransformOutputTypeArray) ToOutput(ctx context.Context) pulumix.Output[[]TransformOutputType] {
	return pulumix.Output[[]TransformOutputType]{
		OutputState: i.ToTransformOutputTypeArrayOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputTypeOutput struct{ *pulumi.OutputState }

func (TransformOutputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputType)(nil)).Elem()
}

func (o TransformOutputTypeOutput) ToTransformOutputTypeOutput() TransformOutputTypeOutput {
	return o
}

func (o TransformOutputTypeOutput) ToTransformOutputTypeOutputWithContext(ctx context.Context) TransformOutputTypeOutput {
	return o
}

func (o TransformOutputTypeOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputType] {
	return pulumix.Output[TransformOutputType]{
		OutputState: o.OutputState,
	}
}

// An `audioAnalyzerPreset` block as defined above.
func (o TransformOutputTypeOutput) AudioAnalyzerPreset() TransformOutputAudioAnalyzerPresetPtrOutput {
	return o.ApplyT(func(v TransformOutputType) *TransformOutputAudioAnalyzerPreset { return v.AudioAnalyzerPreset }).(TransformOutputAudioAnalyzerPresetPtrOutput)
}

// A `builtinPreset` block as defined above.
func (o TransformOutputTypeOutput) BuiltinPreset() TransformOutputBuiltinPresetPtrOutput {
	return o.ApplyT(func(v TransformOutputType) *TransformOutputBuiltinPreset { return v.BuiltinPreset }).(TransformOutputBuiltinPresetPtrOutput)
}

// A `customPreset` block as defined above.
func (o TransformOutputTypeOutput) CustomPreset() TransformOutputCustomPresetPtrOutput {
	return o.ApplyT(func(v TransformOutputType) *TransformOutputCustomPreset { return v.CustomPreset }).(TransformOutputCustomPresetPtrOutput)
}

// A `faceDetectorPreset` block as defined above.
func (o TransformOutputTypeOutput) FaceDetectorPreset() TransformOutputFaceDetectorPresetPtrOutput {
	return o.ApplyT(func(v TransformOutputType) *TransformOutputFaceDetectorPreset { return v.FaceDetectorPreset }).(TransformOutputFaceDetectorPresetPtrOutput)
}

// A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with `ContinueJob`. Possible values are `StopProcessingJob` or `ContinueJob`. Defaults to `StopProcessingJob`.
func (o TransformOutputTypeOutput) OnErrorAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputType) *string { return v.OnErrorAction }).(pulumi.StringPtrOutput)
}

// Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing Transform Outputs. Possible values are `High`, `Normal` or `Low`. Defaults to `Normal`.
func (o TransformOutputTypeOutput) RelativePriority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputType) *string { return v.RelativePriority }).(pulumi.StringPtrOutput)
}

// A `videoAnalyzerPreset` block as defined below.
//
// > **NOTE:** Each output can only have one type of preset: `builtinPreset`, `audioAnalyzerPreset`, `customPreset`, `faceDetectorPreset` or `videoAnalyzerPreset`. If you need to apply different presets you must create one output for each one.
func (o TransformOutputTypeOutput) VideoAnalyzerPreset() TransformOutputVideoAnalyzerPresetPtrOutput {
	return o.ApplyT(func(v TransformOutputType) *TransformOutputVideoAnalyzerPreset { return v.VideoAnalyzerPreset }).(TransformOutputVideoAnalyzerPresetPtrOutput)
}

type TransformOutputTypeArrayOutput struct{ *pulumi.OutputState }

func (TransformOutputTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformOutputType)(nil)).Elem()
}

func (o TransformOutputTypeArrayOutput) ToTransformOutputTypeArrayOutput() TransformOutputTypeArrayOutput {
	return o
}

func (o TransformOutputTypeArrayOutput) ToTransformOutputTypeArrayOutputWithContext(ctx context.Context) TransformOutputTypeArrayOutput {
	return o
}

func (o TransformOutputTypeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TransformOutputType] {
	return pulumix.Output[[]TransformOutputType]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputTypeArrayOutput) Index(i pulumi.IntInput) TransformOutputTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformOutputType {
		return vs[0].([]TransformOutputType)[vs[1].(int)]
	}).(TransformOutputTypeOutput)
}

type TransformOutputAudioAnalyzerPreset struct {
	// Possible values are `Basic` or `Standard`. Determines the set of audio analysis operations to be performed. Default to `Standard`.
	AudioAnalysisMode *string `pulumi:"audioAnalysisMode"`
	// The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US'). If you know the language of your content, it is recommended that you specify it. The language must be specified explicitly for AudioAnalysisMode:Basic, since automatic language detection is not included in basic mode. If the language isn't specified, automatic language detection will choose the first language detected and process with the selected language for the duration of the file. It does not currently support dynamically switching between languages after the first language is detected. The automatic detection works best with audio recordings with clearly discernible speech. If automatic detection fails to find the language, transcription would fall back to `en-US`. The list of supported languages is available here: <https://go.microsoft.com/fwlink/?linkid=2109463>.
	AudioLanguage *string `pulumi:"audioLanguage"`
	// Dictionary containing key value pairs for parameters not exposed in the preset itself.
	ExperimentalOptions map[string]string `pulumi:"experimentalOptions"`
}

// TransformOutputAudioAnalyzerPresetInput is an input type that accepts TransformOutputAudioAnalyzerPresetArgs and TransformOutputAudioAnalyzerPresetOutput values.
// You can construct a concrete instance of `TransformOutputAudioAnalyzerPresetInput` via:
//
//	TransformOutputAudioAnalyzerPresetArgs{...}
type TransformOutputAudioAnalyzerPresetInput interface {
	pulumi.Input

	ToTransformOutputAudioAnalyzerPresetOutput() TransformOutputAudioAnalyzerPresetOutput
	ToTransformOutputAudioAnalyzerPresetOutputWithContext(context.Context) TransformOutputAudioAnalyzerPresetOutput
}

type TransformOutputAudioAnalyzerPresetArgs struct {
	// Possible values are `Basic` or `Standard`. Determines the set of audio analysis operations to be performed. Default to `Standard`.
	AudioAnalysisMode pulumi.StringPtrInput `pulumi:"audioAnalysisMode"`
	// The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US'). If you know the language of your content, it is recommended that you specify it. The language must be specified explicitly for AudioAnalysisMode:Basic, since automatic language detection is not included in basic mode. If the language isn't specified, automatic language detection will choose the first language detected and process with the selected language for the duration of the file. It does not currently support dynamically switching between languages after the first language is detected. The automatic detection works best with audio recordings with clearly discernible speech. If automatic detection fails to find the language, transcription would fall back to `en-US`. The list of supported languages is available here: <https://go.microsoft.com/fwlink/?linkid=2109463>.
	AudioLanguage pulumi.StringPtrInput `pulumi:"audioLanguage"`
	// Dictionary containing key value pairs for parameters not exposed in the preset itself.
	ExperimentalOptions pulumi.StringMapInput `pulumi:"experimentalOptions"`
}

func (TransformOutputAudioAnalyzerPresetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputAudioAnalyzerPreset)(nil)).Elem()
}

func (i TransformOutputAudioAnalyzerPresetArgs) ToTransformOutputAudioAnalyzerPresetOutput() TransformOutputAudioAnalyzerPresetOutput {
	return i.ToTransformOutputAudioAnalyzerPresetOutputWithContext(context.Background())
}

func (i TransformOutputAudioAnalyzerPresetArgs) ToTransformOutputAudioAnalyzerPresetOutputWithContext(ctx context.Context) TransformOutputAudioAnalyzerPresetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputAudioAnalyzerPresetOutput)
}

func (i TransformOutputAudioAnalyzerPresetArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputAudioAnalyzerPreset] {
	return pulumix.Output[TransformOutputAudioAnalyzerPreset]{
		OutputState: i.ToTransformOutputAudioAnalyzerPresetOutputWithContext(ctx).OutputState,
	}
}

func (i TransformOutputAudioAnalyzerPresetArgs) ToTransformOutputAudioAnalyzerPresetPtrOutput() TransformOutputAudioAnalyzerPresetPtrOutput {
	return i.ToTransformOutputAudioAnalyzerPresetPtrOutputWithContext(context.Background())
}

func (i TransformOutputAudioAnalyzerPresetArgs) ToTransformOutputAudioAnalyzerPresetPtrOutputWithContext(ctx context.Context) TransformOutputAudioAnalyzerPresetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputAudioAnalyzerPresetOutput).ToTransformOutputAudioAnalyzerPresetPtrOutputWithContext(ctx)
}

// TransformOutputAudioAnalyzerPresetPtrInput is an input type that accepts TransformOutputAudioAnalyzerPresetArgs, TransformOutputAudioAnalyzerPresetPtr and TransformOutputAudioAnalyzerPresetPtrOutput values.
// You can construct a concrete instance of `TransformOutputAudioAnalyzerPresetPtrInput` via:
//
//	        TransformOutputAudioAnalyzerPresetArgs{...}
//
//	or:
//
//	        nil
type TransformOutputAudioAnalyzerPresetPtrInput interface {
	pulumi.Input

	ToTransformOutputAudioAnalyzerPresetPtrOutput() TransformOutputAudioAnalyzerPresetPtrOutput
	ToTransformOutputAudioAnalyzerPresetPtrOutputWithContext(context.Context) TransformOutputAudioAnalyzerPresetPtrOutput
}

type transformOutputAudioAnalyzerPresetPtrType TransformOutputAudioAnalyzerPresetArgs

func TransformOutputAudioAnalyzerPresetPtr(v *TransformOutputAudioAnalyzerPresetArgs) TransformOutputAudioAnalyzerPresetPtrInput {
	return (*transformOutputAudioAnalyzerPresetPtrType)(v)
}

func (*transformOutputAudioAnalyzerPresetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputAudioAnalyzerPreset)(nil)).Elem()
}

func (i *transformOutputAudioAnalyzerPresetPtrType) ToTransformOutputAudioAnalyzerPresetPtrOutput() TransformOutputAudioAnalyzerPresetPtrOutput {
	return i.ToTransformOutputAudioAnalyzerPresetPtrOutputWithContext(context.Background())
}

func (i *transformOutputAudioAnalyzerPresetPtrType) ToTransformOutputAudioAnalyzerPresetPtrOutputWithContext(ctx context.Context) TransformOutputAudioAnalyzerPresetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputAudioAnalyzerPresetPtrOutput)
}

func (i *transformOutputAudioAnalyzerPresetPtrType) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputAudioAnalyzerPreset] {
	return pulumix.Output[*TransformOutputAudioAnalyzerPreset]{
		OutputState: i.ToTransformOutputAudioAnalyzerPresetPtrOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputAudioAnalyzerPresetOutput struct{ *pulumi.OutputState }

func (TransformOutputAudioAnalyzerPresetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputAudioAnalyzerPreset)(nil)).Elem()
}

func (o TransformOutputAudioAnalyzerPresetOutput) ToTransformOutputAudioAnalyzerPresetOutput() TransformOutputAudioAnalyzerPresetOutput {
	return o
}

func (o TransformOutputAudioAnalyzerPresetOutput) ToTransformOutputAudioAnalyzerPresetOutputWithContext(ctx context.Context) TransformOutputAudioAnalyzerPresetOutput {
	return o
}

func (o TransformOutputAudioAnalyzerPresetOutput) ToTransformOutputAudioAnalyzerPresetPtrOutput() TransformOutputAudioAnalyzerPresetPtrOutput {
	return o.ToTransformOutputAudioAnalyzerPresetPtrOutputWithContext(context.Background())
}

func (o TransformOutputAudioAnalyzerPresetOutput) ToTransformOutputAudioAnalyzerPresetPtrOutputWithContext(ctx context.Context) TransformOutputAudioAnalyzerPresetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformOutputAudioAnalyzerPreset) *TransformOutputAudioAnalyzerPreset {
		return &v
	}).(TransformOutputAudioAnalyzerPresetPtrOutput)
}

func (o TransformOutputAudioAnalyzerPresetOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputAudioAnalyzerPreset] {
	return pulumix.Output[TransformOutputAudioAnalyzerPreset]{
		OutputState: o.OutputState,
	}
}

// Possible values are `Basic` or `Standard`. Determines the set of audio analysis operations to be performed. Default to `Standard`.
func (o TransformOutputAudioAnalyzerPresetOutput) AudioAnalysisMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputAudioAnalyzerPreset) *string { return v.AudioAnalysisMode }).(pulumi.StringPtrOutput)
}

// The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US'). If you know the language of your content, it is recommended that you specify it. The language must be specified explicitly for AudioAnalysisMode:Basic, since automatic language detection is not included in basic mode. If the language isn't specified, automatic language detection will choose the first language detected and process with the selected language for the duration of the file. It does not currently support dynamically switching between languages after the first language is detected. The automatic detection works best with audio recordings with clearly discernible speech. If automatic detection fails to find the language, transcription would fall back to `en-US`. The list of supported languages is available here: <https://go.microsoft.com/fwlink/?linkid=2109463>.
func (o TransformOutputAudioAnalyzerPresetOutput) AudioLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputAudioAnalyzerPreset) *string { return v.AudioLanguage }).(pulumi.StringPtrOutput)
}

// Dictionary containing key value pairs for parameters not exposed in the preset itself.
func (o TransformOutputAudioAnalyzerPresetOutput) ExperimentalOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v TransformOutputAudioAnalyzerPreset) map[string]string { return v.ExperimentalOptions }).(pulumi.StringMapOutput)
}

type TransformOutputAudioAnalyzerPresetPtrOutput struct{ *pulumi.OutputState }

func (TransformOutputAudioAnalyzerPresetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputAudioAnalyzerPreset)(nil)).Elem()
}

func (o TransformOutputAudioAnalyzerPresetPtrOutput) ToTransformOutputAudioAnalyzerPresetPtrOutput() TransformOutputAudioAnalyzerPresetPtrOutput {
	return o
}

func (o TransformOutputAudioAnalyzerPresetPtrOutput) ToTransformOutputAudioAnalyzerPresetPtrOutputWithContext(ctx context.Context) TransformOutputAudioAnalyzerPresetPtrOutput {
	return o
}

func (o TransformOutputAudioAnalyzerPresetPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputAudioAnalyzerPreset] {
	return pulumix.Output[*TransformOutputAudioAnalyzerPreset]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputAudioAnalyzerPresetPtrOutput) Elem() TransformOutputAudioAnalyzerPresetOutput {
	return o.ApplyT(func(v *TransformOutputAudioAnalyzerPreset) TransformOutputAudioAnalyzerPreset {
		if v != nil {
			return *v
		}
		var ret TransformOutputAudioAnalyzerPreset
		return ret
	}).(TransformOutputAudioAnalyzerPresetOutput)
}

// Possible values are `Basic` or `Standard`. Determines the set of audio analysis operations to be performed. Default to `Standard`.
func (o TransformOutputAudioAnalyzerPresetPtrOutput) AudioAnalysisMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputAudioAnalyzerPreset) *string {
		if v == nil {
			return nil
		}
		return v.AudioAnalysisMode
	}).(pulumi.StringPtrOutput)
}

// The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US'). If you know the language of your content, it is recommended that you specify it. The language must be specified explicitly for AudioAnalysisMode:Basic, since automatic language detection is not included in basic mode. If the language isn't specified, automatic language detection will choose the first language detected and process with the selected language for the duration of the file. It does not currently support dynamically switching between languages after the first language is detected. The automatic detection works best with audio recordings with clearly discernible speech. If automatic detection fails to find the language, transcription would fall back to `en-US`. The list of supported languages is available here: <https://go.microsoft.com/fwlink/?linkid=2109463>.
func (o TransformOutputAudioAnalyzerPresetPtrOutput) AudioLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputAudioAnalyzerPreset) *string {
		if v == nil {
			return nil
		}
		return v.AudioLanguage
	}).(pulumi.StringPtrOutput)
}

// Dictionary containing key value pairs for parameters not exposed in the preset itself.
func (o TransformOutputAudioAnalyzerPresetPtrOutput) ExperimentalOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TransformOutputAudioAnalyzerPreset) map[string]string {
		if v == nil {
			return nil
		}
		return v.ExperimentalOptions
	}).(pulumi.StringMapOutput)
}

type TransformOutputBuiltinPreset struct {
	// A `presetConfiguration` block as defined below.
	PresetConfiguration *TransformOutputBuiltinPresetPresetConfiguration `pulumi:"presetConfiguration"`
	// The built-in preset to be used for encoding videos. The Possible values are `AACGoodQualityAudio`, `AdaptiveStreaming`, `ContentAwareEncoding`, `ContentAwareEncodingExperimental`, `CopyAllBitrateNonInterleaved`, `DDGoodQualityAudio`, `H265AdaptiveStreaming`, `H265ContentAwareEncoding`, `H265SingleBitrate4K`, `H265SingleBitrate1080p`, `H265SingleBitrate720p`, `H264MultipleBitrate1080p`, `H264MultipleBitrateSD`, `H264MultipleBitrate720p`, `H264SingleBitrate1080p`, `H264SingleBitrateSD` and `H264SingleBitrate720p`.
	PresetName string `pulumi:"presetName"`
}

// TransformOutputBuiltinPresetInput is an input type that accepts TransformOutputBuiltinPresetArgs and TransformOutputBuiltinPresetOutput values.
// You can construct a concrete instance of `TransformOutputBuiltinPresetInput` via:
//
//	TransformOutputBuiltinPresetArgs{...}
type TransformOutputBuiltinPresetInput interface {
	pulumi.Input

	ToTransformOutputBuiltinPresetOutput() TransformOutputBuiltinPresetOutput
	ToTransformOutputBuiltinPresetOutputWithContext(context.Context) TransformOutputBuiltinPresetOutput
}

type TransformOutputBuiltinPresetArgs struct {
	// A `presetConfiguration` block as defined below.
	PresetConfiguration TransformOutputBuiltinPresetPresetConfigurationPtrInput `pulumi:"presetConfiguration"`
	// The built-in preset to be used for encoding videos. The Possible values are `AACGoodQualityAudio`, `AdaptiveStreaming`, `ContentAwareEncoding`, `ContentAwareEncodingExperimental`, `CopyAllBitrateNonInterleaved`, `DDGoodQualityAudio`, `H265AdaptiveStreaming`, `H265ContentAwareEncoding`, `H265SingleBitrate4K`, `H265SingleBitrate1080p`, `H265SingleBitrate720p`, `H264MultipleBitrate1080p`, `H264MultipleBitrateSD`, `H264MultipleBitrate720p`, `H264SingleBitrate1080p`, `H264SingleBitrateSD` and `H264SingleBitrate720p`.
	PresetName pulumi.StringInput `pulumi:"presetName"`
}

func (TransformOutputBuiltinPresetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputBuiltinPreset)(nil)).Elem()
}

func (i TransformOutputBuiltinPresetArgs) ToTransformOutputBuiltinPresetOutput() TransformOutputBuiltinPresetOutput {
	return i.ToTransformOutputBuiltinPresetOutputWithContext(context.Background())
}

func (i TransformOutputBuiltinPresetArgs) ToTransformOutputBuiltinPresetOutputWithContext(ctx context.Context) TransformOutputBuiltinPresetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputBuiltinPresetOutput)
}

func (i TransformOutputBuiltinPresetArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputBuiltinPreset] {
	return pulumix.Output[TransformOutputBuiltinPreset]{
		OutputState: i.ToTransformOutputBuiltinPresetOutputWithContext(ctx).OutputState,
	}
}

func (i TransformOutputBuiltinPresetArgs) ToTransformOutputBuiltinPresetPtrOutput() TransformOutputBuiltinPresetPtrOutput {
	return i.ToTransformOutputBuiltinPresetPtrOutputWithContext(context.Background())
}

func (i TransformOutputBuiltinPresetArgs) ToTransformOutputBuiltinPresetPtrOutputWithContext(ctx context.Context) TransformOutputBuiltinPresetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputBuiltinPresetOutput).ToTransformOutputBuiltinPresetPtrOutputWithContext(ctx)
}

// TransformOutputBuiltinPresetPtrInput is an input type that accepts TransformOutputBuiltinPresetArgs, TransformOutputBuiltinPresetPtr and TransformOutputBuiltinPresetPtrOutput values.
// You can construct a concrete instance of `TransformOutputBuiltinPresetPtrInput` via:
//
//	        TransformOutputBuiltinPresetArgs{...}
//
//	or:
//
//	        nil
type TransformOutputBuiltinPresetPtrInput interface {
	pulumi.Input

	ToTransformOutputBuiltinPresetPtrOutput() TransformOutputBuiltinPresetPtrOutput
	ToTransformOutputBuiltinPresetPtrOutputWithContext(context.Context) TransformOutputBuiltinPresetPtrOutput
}

type transformOutputBuiltinPresetPtrType TransformOutputBuiltinPresetArgs

func TransformOutputBuiltinPresetPtr(v *TransformOutputBuiltinPresetArgs) TransformOutputBuiltinPresetPtrInput {
	return (*transformOutputBuiltinPresetPtrType)(v)
}

func (*transformOutputBuiltinPresetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputBuiltinPreset)(nil)).Elem()
}

func (i *transformOutputBuiltinPresetPtrType) ToTransformOutputBuiltinPresetPtrOutput() TransformOutputBuiltinPresetPtrOutput {
	return i.ToTransformOutputBuiltinPresetPtrOutputWithContext(context.Background())
}

func (i *transformOutputBuiltinPresetPtrType) ToTransformOutputBuiltinPresetPtrOutputWithContext(ctx context.Context) TransformOutputBuiltinPresetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputBuiltinPresetPtrOutput)
}

func (i *transformOutputBuiltinPresetPtrType) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputBuiltinPreset] {
	return pulumix.Output[*TransformOutputBuiltinPreset]{
		OutputState: i.ToTransformOutputBuiltinPresetPtrOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputBuiltinPresetOutput struct{ *pulumi.OutputState }

func (TransformOutputBuiltinPresetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputBuiltinPreset)(nil)).Elem()
}

func (o TransformOutputBuiltinPresetOutput) ToTransformOutputBuiltinPresetOutput() TransformOutputBuiltinPresetOutput {
	return o
}

func (o TransformOutputBuiltinPresetOutput) ToTransformOutputBuiltinPresetOutputWithContext(ctx context.Context) TransformOutputBuiltinPresetOutput {
	return o
}

func (o TransformOutputBuiltinPresetOutput) ToTransformOutputBuiltinPresetPtrOutput() TransformOutputBuiltinPresetPtrOutput {
	return o.ToTransformOutputBuiltinPresetPtrOutputWithContext(context.Background())
}

func (o TransformOutputBuiltinPresetOutput) ToTransformOutputBuiltinPresetPtrOutputWithContext(ctx context.Context) TransformOutputBuiltinPresetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformOutputBuiltinPreset) *TransformOutputBuiltinPreset {
		return &v
	}).(TransformOutputBuiltinPresetPtrOutput)
}

func (o TransformOutputBuiltinPresetOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputBuiltinPreset] {
	return pulumix.Output[TransformOutputBuiltinPreset]{
		OutputState: o.OutputState,
	}
}

// A `presetConfiguration` block as defined below.
func (o TransformOutputBuiltinPresetOutput) PresetConfiguration() TransformOutputBuiltinPresetPresetConfigurationPtrOutput {
	return o.ApplyT(func(v TransformOutputBuiltinPreset) *TransformOutputBuiltinPresetPresetConfiguration {
		return v.PresetConfiguration
	}).(TransformOutputBuiltinPresetPresetConfigurationPtrOutput)
}

// The built-in preset to be used for encoding videos. The Possible values are `AACGoodQualityAudio`, `AdaptiveStreaming`, `ContentAwareEncoding`, `ContentAwareEncodingExperimental`, `CopyAllBitrateNonInterleaved`, `DDGoodQualityAudio`, `H265AdaptiveStreaming`, `H265ContentAwareEncoding`, `H265SingleBitrate4K`, `H265SingleBitrate1080p`, `H265SingleBitrate720p`, `H264MultipleBitrate1080p`, `H264MultipleBitrateSD`, `H264MultipleBitrate720p`, `H264SingleBitrate1080p`, `H264SingleBitrateSD` and `H264SingleBitrate720p`.
func (o TransformOutputBuiltinPresetOutput) PresetName() pulumi.StringOutput {
	return o.ApplyT(func(v TransformOutputBuiltinPreset) string { return v.PresetName }).(pulumi.StringOutput)
}

type TransformOutputBuiltinPresetPtrOutput struct{ *pulumi.OutputState }

func (TransformOutputBuiltinPresetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputBuiltinPreset)(nil)).Elem()
}

func (o TransformOutputBuiltinPresetPtrOutput) ToTransformOutputBuiltinPresetPtrOutput() TransformOutputBuiltinPresetPtrOutput {
	return o
}

func (o TransformOutputBuiltinPresetPtrOutput) ToTransformOutputBuiltinPresetPtrOutputWithContext(ctx context.Context) TransformOutputBuiltinPresetPtrOutput {
	return o
}

func (o TransformOutputBuiltinPresetPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputBuiltinPreset] {
	return pulumix.Output[*TransformOutputBuiltinPreset]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputBuiltinPresetPtrOutput) Elem() TransformOutputBuiltinPresetOutput {
	return o.ApplyT(func(v *TransformOutputBuiltinPreset) TransformOutputBuiltinPreset {
		if v != nil {
			return *v
		}
		var ret TransformOutputBuiltinPreset
		return ret
	}).(TransformOutputBuiltinPresetOutput)
}

// A `presetConfiguration` block as defined below.
func (o TransformOutputBuiltinPresetPtrOutput) PresetConfiguration() TransformOutputBuiltinPresetPresetConfigurationPtrOutput {
	return o.ApplyT(func(v *TransformOutputBuiltinPreset) *TransformOutputBuiltinPresetPresetConfiguration {
		if v == nil {
			return nil
		}
		return v.PresetConfiguration
	}).(TransformOutputBuiltinPresetPresetConfigurationPtrOutput)
}

// The built-in preset to be used for encoding videos. The Possible values are `AACGoodQualityAudio`, `AdaptiveStreaming`, `ContentAwareEncoding`, `ContentAwareEncodingExperimental`, `CopyAllBitrateNonInterleaved`, `DDGoodQualityAudio`, `H265AdaptiveStreaming`, `H265ContentAwareEncoding`, `H265SingleBitrate4K`, `H265SingleBitrate1080p`, `H265SingleBitrate720p`, `H264MultipleBitrate1080p`, `H264MultipleBitrateSD`, `H264MultipleBitrate720p`, `H264SingleBitrate1080p`, `H264SingleBitrateSD` and `H264SingleBitrate720p`.
func (o TransformOutputBuiltinPresetPtrOutput) PresetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputBuiltinPreset) *string {
		if v == nil {
			return nil
		}
		return &v.PresetName
	}).(pulumi.StringPtrOutput)
}

type TransformOutputBuiltinPresetPresetConfiguration struct {
	// The complexity of the encoding. Possible values are `Balanced`, `Speed` or `Quality`.
	Complexity *string `pulumi:"complexity"`
	// Specifies the interleave mode of the output to control how audio are stored in the container format. Possible values are `InterleavedOutput` and `NonInterleavedOutput`.
	InterleaveOutput *string `pulumi:"interleaveOutput"`
	// The key frame interval in seconds. Possible value is a positive float. For example, set as `2.0` to reduce the playback buffering for some players.
	KeyFrameIntervalInSeconds *float64 `pulumi:"keyFrameIntervalInSeconds"`
	// The maximum bitrate in bits per second (threshold for the top video layer). For example, set as `6000000` to avoid producing very high bitrate outputs for contents with high complexity.
	MaxBitrateBps *int `pulumi:"maxBitrateBps"`
	// The maximum height of output video layers. For example, set as `720` to produce output layers up to 720P even if the input is 4K.
	MaxHeight *int `pulumi:"maxHeight"`
	// The maximum number of output video layers. For example, set as `4` to make sure at most 4 output layers are produced to control the overall cost of the encoding job.
	MaxLayers *int `pulumi:"maxLayers"`
	// The minimum bitrate in bits per second (threshold for the bottom video layer). For example, set as `200000` to have a bottom layer that covers users with low network bandwidth.
	MinBitrateBps *int `pulumi:"minBitrateBps"`
	// The minimum height of output video layers. For example, set as `360` to avoid output layers of smaller resolutions like 180P.
	MinHeight *int `pulumi:"minHeight"`
}

// TransformOutputBuiltinPresetPresetConfigurationInput is an input type that accepts TransformOutputBuiltinPresetPresetConfigurationArgs and TransformOutputBuiltinPresetPresetConfigurationOutput values.
// You can construct a concrete instance of `TransformOutputBuiltinPresetPresetConfigurationInput` via:
//
//	TransformOutputBuiltinPresetPresetConfigurationArgs{...}
type TransformOutputBuiltinPresetPresetConfigurationInput interface {
	pulumi.Input

	ToTransformOutputBuiltinPresetPresetConfigurationOutput() TransformOutputBuiltinPresetPresetConfigurationOutput
	ToTransformOutputBuiltinPresetPresetConfigurationOutputWithContext(context.Context) TransformOutputBuiltinPresetPresetConfigurationOutput
}

type TransformOutputBuiltinPresetPresetConfigurationArgs struct {
	// The complexity of the encoding. Possible values are `Balanced`, `Speed` or `Quality`.
	Complexity pulumi.StringPtrInput `pulumi:"complexity"`
	// Specifies the interleave mode of the output to control how audio are stored in the container format. Possible values are `InterleavedOutput` and `NonInterleavedOutput`.
	InterleaveOutput pulumi.StringPtrInput `pulumi:"interleaveOutput"`
	// The key frame interval in seconds. Possible value is a positive float. For example, set as `2.0` to reduce the playback buffering for some players.
	KeyFrameIntervalInSeconds pulumi.Float64PtrInput `pulumi:"keyFrameIntervalInSeconds"`
	// The maximum bitrate in bits per second (threshold for the top video layer). For example, set as `6000000` to avoid producing very high bitrate outputs for contents with high complexity.
	MaxBitrateBps pulumi.IntPtrInput `pulumi:"maxBitrateBps"`
	// The maximum height of output video layers. For example, set as `720` to produce output layers up to 720P even if the input is 4K.
	MaxHeight pulumi.IntPtrInput `pulumi:"maxHeight"`
	// The maximum number of output video layers. For example, set as `4` to make sure at most 4 output layers are produced to control the overall cost of the encoding job.
	MaxLayers pulumi.IntPtrInput `pulumi:"maxLayers"`
	// The minimum bitrate in bits per second (threshold for the bottom video layer). For example, set as `200000` to have a bottom layer that covers users with low network bandwidth.
	MinBitrateBps pulumi.IntPtrInput `pulumi:"minBitrateBps"`
	// The minimum height of output video layers. For example, set as `360` to avoid output layers of smaller resolutions like 180P.
	MinHeight pulumi.IntPtrInput `pulumi:"minHeight"`
}

func (TransformOutputBuiltinPresetPresetConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputBuiltinPresetPresetConfiguration)(nil)).Elem()
}

func (i TransformOutputBuiltinPresetPresetConfigurationArgs) ToTransformOutputBuiltinPresetPresetConfigurationOutput() TransformOutputBuiltinPresetPresetConfigurationOutput {
	return i.ToTransformOutputBuiltinPresetPresetConfigurationOutputWithContext(context.Background())
}

func (i TransformOutputBuiltinPresetPresetConfigurationArgs) ToTransformOutputBuiltinPresetPresetConfigurationOutputWithContext(ctx context.Context) TransformOutputBuiltinPresetPresetConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputBuiltinPresetPresetConfigurationOutput)
}

func (i TransformOutputBuiltinPresetPresetConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputBuiltinPresetPresetConfiguration] {
	return pulumix.Output[TransformOutputBuiltinPresetPresetConfiguration]{
		OutputState: i.ToTransformOutputBuiltinPresetPresetConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i TransformOutputBuiltinPresetPresetConfigurationArgs) ToTransformOutputBuiltinPresetPresetConfigurationPtrOutput() TransformOutputBuiltinPresetPresetConfigurationPtrOutput {
	return i.ToTransformOutputBuiltinPresetPresetConfigurationPtrOutputWithContext(context.Background())
}

func (i TransformOutputBuiltinPresetPresetConfigurationArgs) ToTransformOutputBuiltinPresetPresetConfigurationPtrOutputWithContext(ctx context.Context) TransformOutputBuiltinPresetPresetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputBuiltinPresetPresetConfigurationOutput).ToTransformOutputBuiltinPresetPresetConfigurationPtrOutputWithContext(ctx)
}

// TransformOutputBuiltinPresetPresetConfigurationPtrInput is an input type that accepts TransformOutputBuiltinPresetPresetConfigurationArgs, TransformOutputBuiltinPresetPresetConfigurationPtr and TransformOutputBuiltinPresetPresetConfigurationPtrOutput values.
// You can construct a concrete instance of `TransformOutputBuiltinPresetPresetConfigurationPtrInput` via:
//
//	        TransformOutputBuiltinPresetPresetConfigurationArgs{...}
//
//	or:
//
//	        nil
type TransformOutputBuiltinPresetPresetConfigurationPtrInput interface {
	pulumi.Input

	ToTransformOutputBuiltinPresetPresetConfigurationPtrOutput() TransformOutputBuiltinPresetPresetConfigurationPtrOutput
	ToTransformOutputBuiltinPresetPresetConfigurationPtrOutputWithContext(context.Context) TransformOutputBuiltinPresetPresetConfigurationPtrOutput
}

type transformOutputBuiltinPresetPresetConfigurationPtrType TransformOutputBuiltinPresetPresetConfigurationArgs

func TransformOutputBuiltinPresetPresetConfigurationPtr(v *TransformOutputBuiltinPresetPresetConfigurationArgs) TransformOutputBuiltinPresetPresetConfigurationPtrInput {
	return (*transformOutputBuiltinPresetPresetConfigurationPtrType)(v)
}

func (*transformOutputBuiltinPresetPresetConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputBuiltinPresetPresetConfiguration)(nil)).Elem()
}

func (i *transformOutputBuiltinPresetPresetConfigurationPtrType) ToTransformOutputBuiltinPresetPresetConfigurationPtrOutput() TransformOutputBuiltinPresetPresetConfigurationPtrOutput {
	return i.ToTransformOutputBuiltinPresetPresetConfigurationPtrOutputWithContext(context.Background())
}

func (i *transformOutputBuiltinPresetPresetConfigurationPtrType) ToTransformOutputBuiltinPresetPresetConfigurationPtrOutputWithContext(ctx context.Context) TransformOutputBuiltinPresetPresetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputBuiltinPresetPresetConfigurationPtrOutput)
}

func (i *transformOutputBuiltinPresetPresetConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputBuiltinPresetPresetConfiguration] {
	return pulumix.Output[*TransformOutputBuiltinPresetPresetConfiguration]{
		OutputState: i.ToTransformOutputBuiltinPresetPresetConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputBuiltinPresetPresetConfigurationOutput struct{ *pulumi.OutputState }

func (TransformOutputBuiltinPresetPresetConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputBuiltinPresetPresetConfiguration)(nil)).Elem()
}

func (o TransformOutputBuiltinPresetPresetConfigurationOutput) ToTransformOutputBuiltinPresetPresetConfigurationOutput() TransformOutputBuiltinPresetPresetConfigurationOutput {
	return o
}

func (o TransformOutputBuiltinPresetPresetConfigurationOutput) ToTransformOutputBuiltinPresetPresetConfigurationOutputWithContext(ctx context.Context) TransformOutputBuiltinPresetPresetConfigurationOutput {
	return o
}

func (o TransformOutputBuiltinPresetPresetConfigurationOutput) ToTransformOutputBuiltinPresetPresetConfigurationPtrOutput() TransformOutputBuiltinPresetPresetConfigurationPtrOutput {
	return o.ToTransformOutputBuiltinPresetPresetConfigurationPtrOutputWithContext(context.Background())
}

func (o TransformOutputBuiltinPresetPresetConfigurationOutput) ToTransformOutputBuiltinPresetPresetConfigurationPtrOutputWithContext(ctx context.Context) TransformOutputBuiltinPresetPresetConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformOutputBuiltinPresetPresetConfiguration) *TransformOutputBuiltinPresetPresetConfiguration {
		return &v
	}).(TransformOutputBuiltinPresetPresetConfigurationPtrOutput)
}

func (o TransformOutputBuiltinPresetPresetConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputBuiltinPresetPresetConfiguration] {
	return pulumix.Output[TransformOutputBuiltinPresetPresetConfiguration]{
		OutputState: o.OutputState,
	}
}

// The complexity of the encoding. Possible values are `Balanced`, `Speed` or `Quality`.
func (o TransformOutputBuiltinPresetPresetConfigurationOutput) Complexity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputBuiltinPresetPresetConfiguration) *string { return v.Complexity }).(pulumi.StringPtrOutput)
}

// Specifies the interleave mode of the output to control how audio are stored in the container format. Possible values are `InterleavedOutput` and `NonInterleavedOutput`.
func (o TransformOutputBuiltinPresetPresetConfigurationOutput) InterleaveOutput() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputBuiltinPresetPresetConfiguration) *string { return v.InterleaveOutput }).(pulumi.StringPtrOutput)
}

// The key frame interval in seconds. Possible value is a positive float. For example, set as `2.0` to reduce the playback buffering for some players.
func (o TransformOutputBuiltinPresetPresetConfigurationOutput) KeyFrameIntervalInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TransformOutputBuiltinPresetPresetConfiguration) *float64 { return v.KeyFrameIntervalInSeconds }).(pulumi.Float64PtrOutput)
}

// The maximum bitrate in bits per second (threshold for the top video layer). For example, set as `6000000` to avoid producing very high bitrate outputs for contents with high complexity.
func (o TransformOutputBuiltinPresetPresetConfigurationOutput) MaxBitrateBps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TransformOutputBuiltinPresetPresetConfiguration) *int { return v.MaxBitrateBps }).(pulumi.IntPtrOutput)
}

// The maximum height of output video layers. For example, set as `720` to produce output layers up to 720P even if the input is 4K.
func (o TransformOutputBuiltinPresetPresetConfigurationOutput) MaxHeight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TransformOutputBuiltinPresetPresetConfiguration) *int { return v.MaxHeight }).(pulumi.IntPtrOutput)
}

// The maximum number of output video layers. For example, set as `4` to make sure at most 4 output layers are produced to control the overall cost of the encoding job.
func (o TransformOutputBuiltinPresetPresetConfigurationOutput) MaxLayers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TransformOutputBuiltinPresetPresetConfiguration) *int { return v.MaxLayers }).(pulumi.IntPtrOutput)
}

// The minimum bitrate in bits per second (threshold for the bottom video layer). For example, set as `200000` to have a bottom layer that covers users with low network bandwidth.
func (o TransformOutputBuiltinPresetPresetConfigurationOutput) MinBitrateBps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TransformOutputBuiltinPresetPresetConfiguration) *int { return v.MinBitrateBps }).(pulumi.IntPtrOutput)
}

// The minimum height of output video layers. For example, set as `360` to avoid output layers of smaller resolutions like 180P.
func (o TransformOutputBuiltinPresetPresetConfigurationOutput) MinHeight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TransformOutputBuiltinPresetPresetConfiguration) *int { return v.MinHeight }).(pulumi.IntPtrOutput)
}

type TransformOutputBuiltinPresetPresetConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TransformOutputBuiltinPresetPresetConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputBuiltinPresetPresetConfiguration)(nil)).Elem()
}

func (o TransformOutputBuiltinPresetPresetConfigurationPtrOutput) ToTransformOutputBuiltinPresetPresetConfigurationPtrOutput() TransformOutputBuiltinPresetPresetConfigurationPtrOutput {
	return o
}

func (o TransformOutputBuiltinPresetPresetConfigurationPtrOutput) ToTransformOutputBuiltinPresetPresetConfigurationPtrOutputWithContext(ctx context.Context) TransformOutputBuiltinPresetPresetConfigurationPtrOutput {
	return o
}

func (o TransformOutputBuiltinPresetPresetConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputBuiltinPresetPresetConfiguration] {
	return pulumix.Output[*TransformOutputBuiltinPresetPresetConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputBuiltinPresetPresetConfigurationPtrOutput) Elem() TransformOutputBuiltinPresetPresetConfigurationOutput {
	return o.ApplyT(func(v *TransformOutputBuiltinPresetPresetConfiguration) TransformOutputBuiltinPresetPresetConfiguration {
		if v != nil {
			return *v
		}
		var ret TransformOutputBuiltinPresetPresetConfiguration
		return ret
	}).(TransformOutputBuiltinPresetPresetConfigurationOutput)
}

// The complexity of the encoding. Possible values are `Balanced`, `Speed` or `Quality`.
func (o TransformOutputBuiltinPresetPresetConfigurationPtrOutput) Complexity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputBuiltinPresetPresetConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Complexity
	}).(pulumi.StringPtrOutput)
}

// Specifies the interleave mode of the output to control how audio are stored in the container format. Possible values are `InterleavedOutput` and `NonInterleavedOutput`.
func (o TransformOutputBuiltinPresetPresetConfigurationPtrOutput) InterleaveOutput() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputBuiltinPresetPresetConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.InterleaveOutput
	}).(pulumi.StringPtrOutput)
}

// The key frame interval in seconds. Possible value is a positive float. For example, set as `2.0` to reduce the playback buffering for some players.
func (o TransformOutputBuiltinPresetPresetConfigurationPtrOutput) KeyFrameIntervalInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TransformOutputBuiltinPresetPresetConfiguration) *float64 {
		if v == nil {
			return nil
		}
		return v.KeyFrameIntervalInSeconds
	}).(pulumi.Float64PtrOutput)
}

// The maximum bitrate in bits per second (threshold for the top video layer). For example, set as `6000000` to avoid producing very high bitrate outputs for contents with high complexity.
func (o TransformOutputBuiltinPresetPresetConfigurationPtrOutput) MaxBitrateBps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TransformOutputBuiltinPresetPresetConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.MaxBitrateBps
	}).(pulumi.IntPtrOutput)
}

// The maximum height of output video layers. For example, set as `720` to produce output layers up to 720P even if the input is 4K.
func (o TransformOutputBuiltinPresetPresetConfigurationPtrOutput) MaxHeight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TransformOutputBuiltinPresetPresetConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.MaxHeight
	}).(pulumi.IntPtrOutput)
}

// The maximum number of output video layers. For example, set as `4` to make sure at most 4 output layers are produced to control the overall cost of the encoding job.
func (o TransformOutputBuiltinPresetPresetConfigurationPtrOutput) MaxLayers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TransformOutputBuiltinPresetPresetConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.MaxLayers
	}).(pulumi.IntPtrOutput)
}

// The minimum bitrate in bits per second (threshold for the bottom video layer). For example, set as `200000` to have a bottom layer that covers users with low network bandwidth.
func (o TransformOutputBuiltinPresetPresetConfigurationPtrOutput) MinBitrateBps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TransformOutputBuiltinPresetPresetConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.MinBitrateBps
	}).(pulumi.IntPtrOutput)
}

// The minimum height of output video layers. For example, set as `360` to avoid output layers of smaller resolutions like 180P.
func (o TransformOutputBuiltinPresetPresetConfigurationPtrOutput) MinHeight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TransformOutputBuiltinPresetPresetConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.MinHeight
	}).(pulumi.IntPtrOutput)
}

type TransformOutputCustomPreset struct {
	// One or more `codec` blocks as defined above.
	Codecs []TransformOutputCustomPresetCodec `pulumi:"codecs"`
	// Dictionary containing key value pairs for parameters not exposed in the preset itself.
	ExperimentalOptions map[string]string `pulumi:"experimentalOptions"`
	// A `filter` block as defined below.
	Filter *TransformOutputCustomPresetFilter `pulumi:"filter"`
	// One or more `format` blocks as defined below.
	Formats []TransformOutputCustomPresetFormat `pulumi:"formats"`
}

// TransformOutputCustomPresetInput is an input type that accepts TransformOutputCustomPresetArgs and TransformOutputCustomPresetOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetInput` via:
//
//	TransformOutputCustomPresetArgs{...}
type TransformOutputCustomPresetInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetOutput() TransformOutputCustomPresetOutput
	ToTransformOutputCustomPresetOutputWithContext(context.Context) TransformOutputCustomPresetOutput
}

type TransformOutputCustomPresetArgs struct {
	// One or more `codec` blocks as defined above.
	Codecs TransformOutputCustomPresetCodecArrayInput `pulumi:"codecs"`
	// Dictionary containing key value pairs for parameters not exposed in the preset itself.
	ExperimentalOptions pulumi.StringMapInput `pulumi:"experimentalOptions"`
	// A `filter` block as defined below.
	Filter TransformOutputCustomPresetFilterPtrInput `pulumi:"filter"`
	// One or more `format` blocks as defined below.
	Formats TransformOutputCustomPresetFormatArrayInput `pulumi:"formats"`
}

func (TransformOutputCustomPresetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPreset)(nil)).Elem()
}

func (i TransformOutputCustomPresetArgs) ToTransformOutputCustomPresetOutput() TransformOutputCustomPresetOutput {
	return i.ToTransformOutputCustomPresetOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetArgs) ToTransformOutputCustomPresetOutputWithContext(ctx context.Context) TransformOutputCustomPresetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetOutput)
}

func (i TransformOutputCustomPresetArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPreset] {
	return pulumix.Output[TransformOutputCustomPreset]{
		OutputState: i.ToTransformOutputCustomPresetOutputWithContext(ctx).OutputState,
	}
}

func (i TransformOutputCustomPresetArgs) ToTransformOutputCustomPresetPtrOutput() TransformOutputCustomPresetPtrOutput {
	return i.ToTransformOutputCustomPresetPtrOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetArgs) ToTransformOutputCustomPresetPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetOutput).ToTransformOutputCustomPresetPtrOutputWithContext(ctx)
}

// TransformOutputCustomPresetPtrInput is an input type that accepts TransformOutputCustomPresetArgs, TransformOutputCustomPresetPtr and TransformOutputCustomPresetPtrOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetPtrInput` via:
//
//	        TransformOutputCustomPresetArgs{...}
//
//	or:
//
//	        nil
type TransformOutputCustomPresetPtrInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetPtrOutput() TransformOutputCustomPresetPtrOutput
	ToTransformOutputCustomPresetPtrOutputWithContext(context.Context) TransformOutputCustomPresetPtrOutput
}

type transformOutputCustomPresetPtrType TransformOutputCustomPresetArgs

func TransformOutputCustomPresetPtr(v *TransformOutputCustomPresetArgs) TransformOutputCustomPresetPtrInput {
	return (*transformOutputCustomPresetPtrType)(v)
}

func (*transformOutputCustomPresetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPreset)(nil)).Elem()
}

func (i *transformOutputCustomPresetPtrType) ToTransformOutputCustomPresetPtrOutput() TransformOutputCustomPresetPtrOutput {
	return i.ToTransformOutputCustomPresetPtrOutputWithContext(context.Background())
}

func (i *transformOutputCustomPresetPtrType) ToTransformOutputCustomPresetPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetPtrOutput)
}

func (i *transformOutputCustomPresetPtrType) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPreset] {
	return pulumix.Output[*TransformOutputCustomPreset]{
		OutputState: i.ToTransformOutputCustomPresetPtrOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputCustomPresetOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPreset)(nil)).Elem()
}

func (o TransformOutputCustomPresetOutput) ToTransformOutputCustomPresetOutput() TransformOutputCustomPresetOutput {
	return o
}

func (o TransformOutputCustomPresetOutput) ToTransformOutputCustomPresetOutputWithContext(ctx context.Context) TransformOutputCustomPresetOutput {
	return o
}

func (o TransformOutputCustomPresetOutput) ToTransformOutputCustomPresetPtrOutput() TransformOutputCustomPresetPtrOutput {
	return o.ToTransformOutputCustomPresetPtrOutputWithContext(context.Background())
}

func (o TransformOutputCustomPresetOutput) ToTransformOutputCustomPresetPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformOutputCustomPreset) *TransformOutputCustomPreset {
		return &v
	}).(TransformOutputCustomPresetPtrOutput)
}

func (o TransformOutputCustomPresetOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPreset] {
	return pulumix.Output[TransformOutputCustomPreset]{
		OutputState: o.OutputState,
	}
}

// One or more `codec` blocks as defined above.
func (o TransformOutputCustomPresetOutput) Codecs() TransformOutputCustomPresetCodecArrayOutput {
	return o.ApplyT(func(v TransformOutputCustomPreset) []TransformOutputCustomPresetCodec { return v.Codecs }).(TransformOutputCustomPresetCodecArrayOutput)
}

// Dictionary containing key value pairs for parameters not exposed in the preset itself.
func (o TransformOutputCustomPresetOutput) ExperimentalOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v TransformOutputCustomPreset) map[string]string { return v.ExperimentalOptions }).(pulumi.StringMapOutput)
}

// A `filter` block as defined below.
func (o TransformOutputCustomPresetOutput) Filter() TransformOutputCustomPresetFilterPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPreset) *TransformOutputCustomPresetFilter { return v.Filter }).(TransformOutputCustomPresetFilterPtrOutput)
}

// One or more `format` blocks as defined below.
func (o TransformOutputCustomPresetOutput) Formats() TransformOutputCustomPresetFormatArrayOutput {
	return o.ApplyT(func(v TransformOutputCustomPreset) []TransformOutputCustomPresetFormat { return v.Formats }).(TransformOutputCustomPresetFormatArrayOutput)
}

type TransformOutputCustomPresetPtrOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPreset)(nil)).Elem()
}

func (o TransformOutputCustomPresetPtrOutput) ToTransformOutputCustomPresetPtrOutput() TransformOutputCustomPresetPtrOutput {
	return o
}

func (o TransformOutputCustomPresetPtrOutput) ToTransformOutputCustomPresetPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetPtrOutput {
	return o
}

func (o TransformOutputCustomPresetPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPreset] {
	return pulumix.Output[*TransformOutputCustomPreset]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputCustomPresetPtrOutput) Elem() TransformOutputCustomPresetOutput {
	return o.ApplyT(func(v *TransformOutputCustomPreset) TransformOutputCustomPreset {
		if v != nil {
			return *v
		}
		var ret TransformOutputCustomPreset
		return ret
	}).(TransformOutputCustomPresetOutput)
}

// One or more `codec` blocks as defined above.
func (o TransformOutputCustomPresetPtrOutput) Codecs() TransformOutputCustomPresetCodecArrayOutput {
	return o.ApplyT(func(v *TransformOutputCustomPreset) []TransformOutputCustomPresetCodec {
		if v == nil {
			return nil
		}
		return v.Codecs
	}).(TransformOutputCustomPresetCodecArrayOutput)
}

// Dictionary containing key value pairs for parameters not exposed in the preset itself.
func (o TransformOutputCustomPresetPtrOutput) ExperimentalOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TransformOutputCustomPreset) map[string]string {
		if v == nil {
			return nil
		}
		return v.ExperimentalOptions
	}).(pulumi.StringMapOutput)
}

// A `filter` block as defined below.
func (o TransformOutputCustomPresetPtrOutput) Filter() TransformOutputCustomPresetFilterPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPreset) *TransformOutputCustomPresetFilter {
		if v == nil {
			return nil
		}
		return v.Filter
	}).(TransformOutputCustomPresetFilterPtrOutput)
}

// One or more `format` blocks as defined below.
func (o TransformOutputCustomPresetPtrOutput) Formats() TransformOutputCustomPresetFormatArrayOutput {
	return o.ApplyT(func(v *TransformOutputCustomPreset) []TransformOutputCustomPresetFormat {
		if v == nil {
			return nil
		}
		return v.Formats
	}).(TransformOutputCustomPresetFormatArrayOutput)
}

type TransformOutputCustomPresetCodec struct {
	// A `aacAudio` block as defined above.
	AacAudio *TransformOutputCustomPresetCodecAacAudio `pulumi:"aacAudio"`
	// A `copyAudio` block as defined below.
	CopyAudio *TransformOutputCustomPresetCodecCopyAudio `pulumi:"copyAudio"`
	// A `copyVideo` block as defined below.
	CopyVideo *TransformOutputCustomPresetCodecCopyVideo `pulumi:"copyVideo"`
	// A `ddAudio` block as defined below.
	DdAudio *TransformOutputCustomPresetCodecDdAudio `pulumi:"ddAudio"`
	// A `h264Video` block as defined below.
	H264Video *TransformOutputCustomPresetCodecH264Video `pulumi:"h264Video"`
	// A `h265Video` block as defined below.
	H265Video *TransformOutputCustomPresetCodecH265Video `pulumi:"h265Video"`
	// A `jpgImage` block as defined below.
	JpgImage *TransformOutputCustomPresetCodecJpgImage `pulumi:"jpgImage"`
	// A `pngImage` block as defined below.
	//
	// > **NOTE:** Each codec can only have one type: `aacAudio`, `copyAudio`, `copyVideo`, `ddAudio`, `h264Video`, `h265Video`, `jpgImage` or `pngImage`. If you need to apply different codec you must create one codec for each one.
	PngImage *TransformOutputCustomPresetCodecPngImage `pulumi:"pngImage"`
}

// TransformOutputCustomPresetCodecInput is an input type that accepts TransformOutputCustomPresetCodecArgs and TransformOutputCustomPresetCodecOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetCodecInput` via:
//
//	TransformOutputCustomPresetCodecArgs{...}
type TransformOutputCustomPresetCodecInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetCodecOutput() TransformOutputCustomPresetCodecOutput
	ToTransformOutputCustomPresetCodecOutputWithContext(context.Context) TransformOutputCustomPresetCodecOutput
}

type TransformOutputCustomPresetCodecArgs struct {
	// A `aacAudio` block as defined above.
	AacAudio TransformOutputCustomPresetCodecAacAudioPtrInput `pulumi:"aacAudio"`
	// A `copyAudio` block as defined below.
	CopyAudio TransformOutputCustomPresetCodecCopyAudioPtrInput `pulumi:"copyAudio"`
	// A `copyVideo` block as defined below.
	CopyVideo TransformOutputCustomPresetCodecCopyVideoPtrInput `pulumi:"copyVideo"`
	// A `ddAudio` block as defined below.
	DdAudio TransformOutputCustomPresetCodecDdAudioPtrInput `pulumi:"ddAudio"`
	// A `h264Video` block as defined below.
	H264Video TransformOutputCustomPresetCodecH264VideoPtrInput `pulumi:"h264Video"`
	// A `h265Video` block as defined below.
	H265Video TransformOutputCustomPresetCodecH265VideoPtrInput `pulumi:"h265Video"`
	// A `jpgImage` block as defined below.
	JpgImage TransformOutputCustomPresetCodecJpgImagePtrInput `pulumi:"jpgImage"`
	// A `pngImage` block as defined below.
	//
	// > **NOTE:** Each codec can only have one type: `aacAudio`, `copyAudio`, `copyVideo`, `ddAudio`, `h264Video`, `h265Video`, `jpgImage` or `pngImage`. If you need to apply different codec you must create one codec for each one.
	PngImage TransformOutputCustomPresetCodecPngImagePtrInput `pulumi:"pngImage"`
}

func (TransformOutputCustomPresetCodecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetCodec)(nil)).Elem()
}

func (i TransformOutputCustomPresetCodecArgs) ToTransformOutputCustomPresetCodecOutput() TransformOutputCustomPresetCodecOutput {
	return i.ToTransformOutputCustomPresetCodecOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetCodecArgs) ToTransformOutputCustomPresetCodecOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetCodecOutput)
}

func (i TransformOutputCustomPresetCodecArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetCodec] {
	return pulumix.Output[TransformOutputCustomPresetCodec]{
		OutputState: i.ToTransformOutputCustomPresetCodecOutputWithContext(ctx).OutputState,
	}
}

// TransformOutputCustomPresetCodecArrayInput is an input type that accepts TransformOutputCustomPresetCodecArray and TransformOutputCustomPresetCodecArrayOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetCodecArrayInput` via:
//
//	TransformOutputCustomPresetCodecArray{ TransformOutputCustomPresetCodecArgs{...} }
type TransformOutputCustomPresetCodecArrayInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetCodecArrayOutput() TransformOutputCustomPresetCodecArrayOutput
	ToTransformOutputCustomPresetCodecArrayOutputWithContext(context.Context) TransformOutputCustomPresetCodecArrayOutput
}

type TransformOutputCustomPresetCodecArray []TransformOutputCustomPresetCodecInput

func (TransformOutputCustomPresetCodecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformOutputCustomPresetCodec)(nil)).Elem()
}

func (i TransformOutputCustomPresetCodecArray) ToTransformOutputCustomPresetCodecArrayOutput() TransformOutputCustomPresetCodecArrayOutput {
	return i.ToTransformOutputCustomPresetCodecArrayOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetCodecArray) ToTransformOutputCustomPresetCodecArrayOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetCodecArrayOutput)
}

func (i TransformOutputCustomPresetCodecArray) ToOutput(ctx context.Context) pulumix.Output[[]TransformOutputCustomPresetCodec] {
	return pulumix.Output[[]TransformOutputCustomPresetCodec]{
		OutputState: i.ToTransformOutputCustomPresetCodecArrayOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputCustomPresetCodecOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetCodecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetCodec)(nil)).Elem()
}

func (o TransformOutputCustomPresetCodecOutput) ToTransformOutputCustomPresetCodecOutput() TransformOutputCustomPresetCodecOutput {
	return o
}

func (o TransformOutputCustomPresetCodecOutput) ToTransformOutputCustomPresetCodecOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecOutput {
	return o
}

func (o TransformOutputCustomPresetCodecOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetCodec] {
	return pulumix.Output[TransformOutputCustomPresetCodec]{
		OutputState: o.OutputState,
	}
}

// A `aacAudio` block as defined above.
func (o TransformOutputCustomPresetCodecOutput) AacAudio() TransformOutputCustomPresetCodecAacAudioPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodec) *TransformOutputCustomPresetCodecAacAudio { return v.AacAudio }).(TransformOutputCustomPresetCodecAacAudioPtrOutput)
}

// A `copyAudio` block as defined below.
func (o TransformOutputCustomPresetCodecOutput) CopyAudio() TransformOutputCustomPresetCodecCopyAudioPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodec) *TransformOutputCustomPresetCodecCopyAudio {
		return v.CopyAudio
	}).(TransformOutputCustomPresetCodecCopyAudioPtrOutput)
}

// A `copyVideo` block as defined below.
func (o TransformOutputCustomPresetCodecOutput) CopyVideo() TransformOutputCustomPresetCodecCopyVideoPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodec) *TransformOutputCustomPresetCodecCopyVideo {
		return v.CopyVideo
	}).(TransformOutputCustomPresetCodecCopyVideoPtrOutput)
}

// A `ddAudio` block as defined below.
func (o TransformOutputCustomPresetCodecOutput) DdAudio() TransformOutputCustomPresetCodecDdAudioPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodec) *TransformOutputCustomPresetCodecDdAudio { return v.DdAudio }).(TransformOutputCustomPresetCodecDdAudioPtrOutput)
}

// A `h264Video` block as defined below.
func (o TransformOutputCustomPresetCodecOutput) H264Video() TransformOutputCustomPresetCodecH264VideoPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodec) *TransformOutputCustomPresetCodecH264Video {
		return v.H264Video
	}).(TransformOutputCustomPresetCodecH264VideoPtrOutput)
}

// A `h265Video` block as defined below.
func (o TransformOutputCustomPresetCodecOutput) H265Video() TransformOutputCustomPresetCodecH265VideoPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodec) *TransformOutputCustomPresetCodecH265Video {
		return v.H265Video
	}).(TransformOutputCustomPresetCodecH265VideoPtrOutput)
}

// A `jpgImage` block as defined below.
func (o TransformOutputCustomPresetCodecOutput) JpgImage() TransformOutputCustomPresetCodecJpgImagePtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodec) *TransformOutputCustomPresetCodecJpgImage { return v.JpgImage }).(TransformOutputCustomPresetCodecJpgImagePtrOutput)
}

// A `pngImage` block as defined below.
//
// > **NOTE:** Each codec can only have one type: `aacAudio`, `copyAudio`, `copyVideo`, `ddAudio`, `h264Video`, `h265Video`, `jpgImage` or `pngImage`. If you need to apply different codec you must create one codec for each one.
func (o TransformOutputCustomPresetCodecOutput) PngImage() TransformOutputCustomPresetCodecPngImagePtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodec) *TransformOutputCustomPresetCodecPngImage { return v.PngImage }).(TransformOutputCustomPresetCodecPngImagePtrOutput)
}

type TransformOutputCustomPresetCodecArrayOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetCodecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformOutputCustomPresetCodec)(nil)).Elem()
}

func (o TransformOutputCustomPresetCodecArrayOutput) ToTransformOutputCustomPresetCodecArrayOutput() TransformOutputCustomPresetCodecArrayOutput {
	return o
}

func (o TransformOutputCustomPresetCodecArrayOutput) ToTransformOutputCustomPresetCodecArrayOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecArrayOutput {
	return o
}

func (o TransformOutputCustomPresetCodecArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TransformOutputCustomPresetCodec] {
	return pulumix.Output[[]TransformOutputCustomPresetCodec]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputCustomPresetCodecArrayOutput) Index(i pulumi.IntInput) TransformOutputCustomPresetCodecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformOutputCustomPresetCodec {
		return vs[0].([]TransformOutputCustomPresetCodec)[vs[1].(int)]
	}).(TransformOutputCustomPresetCodecOutput)
}

type TransformOutputCustomPresetCodecAacAudio struct {
	// The bitrate of the audio in bits per second. Default to `128000`.
	Bitrate *int `pulumi:"bitrate"`
	// The number of audio channels. Default to `2`.
	Channels *int `pulumi:"channels"`
	// Specifies the label for the codec. The label can be used to control muxing behavior.
	Label *string `pulumi:"label"`
	// The encoding profile to be used when encoding audio with AAC. Possible values are `AacLc`, `HeAacV1`,and `HeAacV2`. Default to `AacLc`.
	Profile *string `pulumi:"profile"`
	// The sampling rate to use for encoding in Hertz. Default to `48000`.
	SamplingRate *int `pulumi:"samplingRate"`
}

// TransformOutputCustomPresetCodecAacAudioInput is an input type that accepts TransformOutputCustomPresetCodecAacAudioArgs and TransformOutputCustomPresetCodecAacAudioOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetCodecAacAudioInput` via:
//
//	TransformOutputCustomPresetCodecAacAudioArgs{...}
type TransformOutputCustomPresetCodecAacAudioInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetCodecAacAudioOutput() TransformOutputCustomPresetCodecAacAudioOutput
	ToTransformOutputCustomPresetCodecAacAudioOutputWithContext(context.Context) TransformOutputCustomPresetCodecAacAudioOutput
}

type TransformOutputCustomPresetCodecAacAudioArgs struct {
	// The bitrate of the audio in bits per second. Default to `128000`.
	Bitrate pulumi.IntPtrInput `pulumi:"bitrate"`
	// The number of audio channels. Default to `2`.
	Channels pulumi.IntPtrInput `pulumi:"channels"`
	// Specifies the label for the codec. The label can be used to control muxing behavior.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// The encoding profile to be used when encoding audio with AAC. Possible values are `AacLc`, `HeAacV1`,and `HeAacV2`. Default to `AacLc`.
	Profile pulumi.StringPtrInput `pulumi:"profile"`
	// The sampling rate to use for encoding in Hertz. Default to `48000`.
	SamplingRate pulumi.IntPtrInput `pulumi:"samplingRate"`
}

func (TransformOutputCustomPresetCodecAacAudioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetCodecAacAudio)(nil)).Elem()
}

func (i TransformOutputCustomPresetCodecAacAudioArgs) ToTransformOutputCustomPresetCodecAacAudioOutput() TransformOutputCustomPresetCodecAacAudioOutput {
	return i.ToTransformOutputCustomPresetCodecAacAudioOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetCodecAacAudioArgs) ToTransformOutputCustomPresetCodecAacAudioOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecAacAudioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetCodecAacAudioOutput)
}

func (i TransformOutputCustomPresetCodecAacAudioArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetCodecAacAudio] {
	return pulumix.Output[TransformOutputCustomPresetCodecAacAudio]{
		OutputState: i.ToTransformOutputCustomPresetCodecAacAudioOutputWithContext(ctx).OutputState,
	}
}

func (i TransformOutputCustomPresetCodecAacAudioArgs) ToTransformOutputCustomPresetCodecAacAudioPtrOutput() TransformOutputCustomPresetCodecAacAudioPtrOutput {
	return i.ToTransformOutputCustomPresetCodecAacAudioPtrOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetCodecAacAudioArgs) ToTransformOutputCustomPresetCodecAacAudioPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecAacAudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetCodecAacAudioOutput).ToTransformOutputCustomPresetCodecAacAudioPtrOutputWithContext(ctx)
}

// TransformOutputCustomPresetCodecAacAudioPtrInput is an input type that accepts TransformOutputCustomPresetCodecAacAudioArgs, TransformOutputCustomPresetCodecAacAudioPtr and TransformOutputCustomPresetCodecAacAudioPtrOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetCodecAacAudioPtrInput` via:
//
//	        TransformOutputCustomPresetCodecAacAudioArgs{...}
//
//	or:
//
//	        nil
type TransformOutputCustomPresetCodecAacAudioPtrInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetCodecAacAudioPtrOutput() TransformOutputCustomPresetCodecAacAudioPtrOutput
	ToTransformOutputCustomPresetCodecAacAudioPtrOutputWithContext(context.Context) TransformOutputCustomPresetCodecAacAudioPtrOutput
}

type transformOutputCustomPresetCodecAacAudioPtrType TransformOutputCustomPresetCodecAacAudioArgs

func TransformOutputCustomPresetCodecAacAudioPtr(v *TransformOutputCustomPresetCodecAacAudioArgs) TransformOutputCustomPresetCodecAacAudioPtrInput {
	return (*transformOutputCustomPresetCodecAacAudioPtrType)(v)
}

func (*transformOutputCustomPresetCodecAacAudioPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetCodecAacAudio)(nil)).Elem()
}

func (i *transformOutputCustomPresetCodecAacAudioPtrType) ToTransformOutputCustomPresetCodecAacAudioPtrOutput() TransformOutputCustomPresetCodecAacAudioPtrOutput {
	return i.ToTransformOutputCustomPresetCodecAacAudioPtrOutputWithContext(context.Background())
}

func (i *transformOutputCustomPresetCodecAacAudioPtrType) ToTransformOutputCustomPresetCodecAacAudioPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecAacAudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetCodecAacAudioPtrOutput)
}

func (i *transformOutputCustomPresetCodecAacAudioPtrType) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetCodecAacAudio] {
	return pulumix.Output[*TransformOutputCustomPresetCodecAacAudio]{
		OutputState: i.ToTransformOutputCustomPresetCodecAacAudioPtrOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputCustomPresetCodecAacAudioOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetCodecAacAudioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetCodecAacAudio)(nil)).Elem()
}

func (o TransformOutputCustomPresetCodecAacAudioOutput) ToTransformOutputCustomPresetCodecAacAudioOutput() TransformOutputCustomPresetCodecAacAudioOutput {
	return o
}

func (o TransformOutputCustomPresetCodecAacAudioOutput) ToTransformOutputCustomPresetCodecAacAudioOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecAacAudioOutput {
	return o
}

func (o TransformOutputCustomPresetCodecAacAudioOutput) ToTransformOutputCustomPresetCodecAacAudioPtrOutput() TransformOutputCustomPresetCodecAacAudioPtrOutput {
	return o.ToTransformOutputCustomPresetCodecAacAudioPtrOutputWithContext(context.Background())
}

func (o TransformOutputCustomPresetCodecAacAudioOutput) ToTransformOutputCustomPresetCodecAacAudioPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecAacAudioPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformOutputCustomPresetCodecAacAudio) *TransformOutputCustomPresetCodecAacAudio {
		return &v
	}).(TransformOutputCustomPresetCodecAacAudioPtrOutput)
}

func (o TransformOutputCustomPresetCodecAacAudioOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetCodecAacAudio] {
	return pulumix.Output[TransformOutputCustomPresetCodecAacAudio]{
		OutputState: o.OutputState,
	}
}

// The bitrate of the audio in bits per second. Default to `128000`.
func (o TransformOutputCustomPresetCodecAacAudioOutput) Bitrate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecAacAudio) *int { return v.Bitrate }).(pulumi.IntPtrOutput)
}

// The number of audio channels. Default to `2`.
func (o TransformOutputCustomPresetCodecAacAudioOutput) Channels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecAacAudio) *int { return v.Channels }).(pulumi.IntPtrOutput)
}

// Specifies the label for the codec. The label can be used to control muxing behavior.
func (o TransformOutputCustomPresetCodecAacAudioOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecAacAudio) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// The encoding profile to be used when encoding audio with AAC. Possible values are `AacLc`, `HeAacV1`,and `HeAacV2`. Default to `AacLc`.
func (o TransformOutputCustomPresetCodecAacAudioOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecAacAudio) *string { return v.Profile }).(pulumi.StringPtrOutput)
}

// The sampling rate to use for encoding in Hertz. Default to `48000`.
func (o TransformOutputCustomPresetCodecAacAudioOutput) SamplingRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecAacAudio) *int { return v.SamplingRate }).(pulumi.IntPtrOutput)
}

type TransformOutputCustomPresetCodecAacAudioPtrOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetCodecAacAudioPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetCodecAacAudio)(nil)).Elem()
}

func (o TransformOutputCustomPresetCodecAacAudioPtrOutput) ToTransformOutputCustomPresetCodecAacAudioPtrOutput() TransformOutputCustomPresetCodecAacAudioPtrOutput {
	return o
}

func (o TransformOutputCustomPresetCodecAacAudioPtrOutput) ToTransformOutputCustomPresetCodecAacAudioPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecAacAudioPtrOutput {
	return o
}

func (o TransformOutputCustomPresetCodecAacAudioPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetCodecAacAudio] {
	return pulumix.Output[*TransformOutputCustomPresetCodecAacAudio]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputCustomPresetCodecAacAudioPtrOutput) Elem() TransformOutputCustomPresetCodecAacAudioOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecAacAudio) TransformOutputCustomPresetCodecAacAudio {
		if v != nil {
			return *v
		}
		var ret TransformOutputCustomPresetCodecAacAudio
		return ret
	}).(TransformOutputCustomPresetCodecAacAudioOutput)
}

// The bitrate of the audio in bits per second. Default to `128000`.
func (o TransformOutputCustomPresetCodecAacAudioPtrOutput) Bitrate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecAacAudio) *int {
		if v == nil {
			return nil
		}
		return v.Bitrate
	}).(pulumi.IntPtrOutput)
}

// The number of audio channels. Default to `2`.
func (o TransformOutputCustomPresetCodecAacAudioPtrOutput) Channels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecAacAudio) *int {
		if v == nil {
			return nil
		}
		return v.Channels
	}).(pulumi.IntPtrOutput)
}

// Specifies the label for the codec. The label can be used to control muxing behavior.
func (o TransformOutputCustomPresetCodecAacAudioPtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecAacAudio) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

// The encoding profile to be used when encoding audio with AAC. Possible values are `AacLc`, `HeAacV1`,and `HeAacV2`. Default to `AacLc`.
func (o TransformOutputCustomPresetCodecAacAudioPtrOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecAacAudio) *string {
		if v == nil {
			return nil
		}
		return v.Profile
	}).(pulumi.StringPtrOutput)
}

// The sampling rate to use for encoding in Hertz. Default to `48000`.
func (o TransformOutputCustomPresetCodecAacAudioPtrOutput) SamplingRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecAacAudio) *int {
		if v == nil {
			return nil
		}
		return v.SamplingRate
	}).(pulumi.IntPtrOutput)
}

type TransformOutputCustomPresetCodecCopyAudio struct {
	// Specifies the label for the codec. The label can be used to control muxing behavior.
	Label *string `pulumi:"label"`
}

// TransformOutputCustomPresetCodecCopyAudioInput is an input type that accepts TransformOutputCustomPresetCodecCopyAudioArgs and TransformOutputCustomPresetCodecCopyAudioOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetCodecCopyAudioInput` via:
//
//	TransformOutputCustomPresetCodecCopyAudioArgs{...}
type TransformOutputCustomPresetCodecCopyAudioInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetCodecCopyAudioOutput() TransformOutputCustomPresetCodecCopyAudioOutput
	ToTransformOutputCustomPresetCodecCopyAudioOutputWithContext(context.Context) TransformOutputCustomPresetCodecCopyAudioOutput
}

type TransformOutputCustomPresetCodecCopyAudioArgs struct {
	// Specifies the label for the codec. The label can be used to control muxing behavior.
	Label pulumi.StringPtrInput `pulumi:"label"`
}

func (TransformOutputCustomPresetCodecCopyAudioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetCodecCopyAudio)(nil)).Elem()
}

func (i TransformOutputCustomPresetCodecCopyAudioArgs) ToTransformOutputCustomPresetCodecCopyAudioOutput() TransformOutputCustomPresetCodecCopyAudioOutput {
	return i.ToTransformOutputCustomPresetCodecCopyAudioOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetCodecCopyAudioArgs) ToTransformOutputCustomPresetCodecCopyAudioOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecCopyAudioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetCodecCopyAudioOutput)
}

func (i TransformOutputCustomPresetCodecCopyAudioArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetCodecCopyAudio] {
	return pulumix.Output[TransformOutputCustomPresetCodecCopyAudio]{
		OutputState: i.ToTransformOutputCustomPresetCodecCopyAudioOutputWithContext(ctx).OutputState,
	}
}

func (i TransformOutputCustomPresetCodecCopyAudioArgs) ToTransformOutputCustomPresetCodecCopyAudioPtrOutput() TransformOutputCustomPresetCodecCopyAudioPtrOutput {
	return i.ToTransformOutputCustomPresetCodecCopyAudioPtrOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetCodecCopyAudioArgs) ToTransformOutputCustomPresetCodecCopyAudioPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecCopyAudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetCodecCopyAudioOutput).ToTransformOutputCustomPresetCodecCopyAudioPtrOutputWithContext(ctx)
}

// TransformOutputCustomPresetCodecCopyAudioPtrInput is an input type that accepts TransformOutputCustomPresetCodecCopyAudioArgs, TransformOutputCustomPresetCodecCopyAudioPtr and TransformOutputCustomPresetCodecCopyAudioPtrOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetCodecCopyAudioPtrInput` via:
//
//	        TransformOutputCustomPresetCodecCopyAudioArgs{...}
//
//	or:
//
//	        nil
type TransformOutputCustomPresetCodecCopyAudioPtrInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetCodecCopyAudioPtrOutput() TransformOutputCustomPresetCodecCopyAudioPtrOutput
	ToTransformOutputCustomPresetCodecCopyAudioPtrOutputWithContext(context.Context) TransformOutputCustomPresetCodecCopyAudioPtrOutput
}

type transformOutputCustomPresetCodecCopyAudioPtrType TransformOutputCustomPresetCodecCopyAudioArgs

func TransformOutputCustomPresetCodecCopyAudioPtr(v *TransformOutputCustomPresetCodecCopyAudioArgs) TransformOutputCustomPresetCodecCopyAudioPtrInput {
	return (*transformOutputCustomPresetCodecCopyAudioPtrType)(v)
}

func (*transformOutputCustomPresetCodecCopyAudioPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetCodecCopyAudio)(nil)).Elem()
}

func (i *transformOutputCustomPresetCodecCopyAudioPtrType) ToTransformOutputCustomPresetCodecCopyAudioPtrOutput() TransformOutputCustomPresetCodecCopyAudioPtrOutput {
	return i.ToTransformOutputCustomPresetCodecCopyAudioPtrOutputWithContext(context.Background())
}

func (i *transformOutputCustomPresetCodecCopyAudioPtrType) ToTransformOutputCustomPresetCodecCopyAudioPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecCopyAudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetCodecCopyAudioPtrOutput)
}

func (i *transformOutputCustomPresetCodecCopyAudioPtrType) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetCodecCopyAudio] {
	return pulumix.Output[*TransformOutputCustomPresetCodecCopyAudio]{
		OutputState: i.ToTransformOutputCustomPresetCodecCopyAudioPtrOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputCustomPresetCodecCopyAudioOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetCodecCopyAudioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetCodecCopyAudio)(nil)).Elem()
}

func (o TransformOutputCustomPresetCodecCopyAudioOutput) ToTransformOutputCustomPresetCodecCopyAudioOutput() TransformOutputCustomPresetCodecCopyAudioOutput {
	return o
}

func (o TransformOutputCustomPresetCodecCopyAudioOutput) ToTransformOutputCustomPresetCodecCopyAudioOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecCopyAudioOutput {
	return o
}

func (o TransformOutputCustomPresetCodecCopyAudioOutput) ToTransformOutputCustomPresetCodecCopyAudioPtrOutput() TransformOutputCustomPresetCodecCopyAudioPtrOutput {
	return o.ToTransformOutputCustomPresetCodecCopyAudioPtrOutputWithContext(context.Background())
}

func (o TransformOutputCustomPresetCodecCopyAudioOutput) ToTransformOutputCustomPresetCodecCopyAudioPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecCopyAudioPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformOutputCustomPresetCodecCopyAudio) *TransformOutputCustomPresetCodecCopyAudio {
		return &v
	}).(TransformOutputCustomPresetCodecCopyAudioPtrOutput)
}

func (o TransformOutputCustomPresetCodecCopyAudioOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetCodecCopyAudio] {
	return pulumix.Output[TransformOutputCustomPresetCodecCopyAudio]{
		OutputState: o.OutputState,
	}
}

// Specifies the label for the codec. The label can be used to control muxing behavior.
func (o TransformOutputCustomPresetCodecCopyAudioOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecCopyAudio) *string { return v.Label }).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetCodecCopyAudioPtrOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetCodecCopyAudioPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetCodecCopyAudio)(nil)).Elem()
}

func (o TransformOutputCustomPresetCodecCopyAudioPtrOutput) ToTransformOutputCustomPresetCodecCopyAudioPtrOutput() TransformOutputCustomPresetCodecCopyAudioPtrOutput {
	return o
}

func (o TransformOutputCustomPresetCodecCopyAudioPtrOutput) ToTransformOutputCustomPresetCodecCopyAudioPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecCopyAudioPtrOutput {
	return o
}

func (o TransformOutputCustomPresetCodecCopyAudioPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetCodecCopyAudio] {
	return pulumix.Output[*TransformOutputCustomPresetCodecCopyAudio]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputCustomPresetCodecCopyAudioPtrOutput) Elem() TransformOutputCustomPresetCodecCopyAudioOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecCopyAudio) TransformOutputCustomPresetCodecCopyAudio {
		if v != nil {
			return *v
		}
		var ret TransformOutputCustomPresetCodecCopyAudio
		return ret
	}).(TransformOutputCustomPresetCodecCopyAudioOutput)
}

// Specifies the label for the codec. The label can be used to control muxing behavior.
func (o TransformOutputCustomPresetCodecCopyAudioPtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecCopyAudio) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetCodecCopyVideo struct {
	// Specifies the label for the codec. The label can be used to control muxing behavior.
	Label *string `pulumi:"label"`
}

// TransformOutputCustomPresetCodecCopyVideoInput is an input type that accepts TransformOutputCustomPresetCodecCopyVideoArgs and TransformOutputCustomPresetCodecCopyVideoOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetCodecCopyVideoInput` via:
//
//	TransformOutputCustomPresetCodecCopyVideoArgs{...}
type TransformOutputCustomPresetCodecCopyVideoInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetCodecCopyVideoOutput() TransformOutputCustomPresetCodecCopyVideoOutput
	ToTransformOutputCustomPresetCodecCopyVideoOutputWithContext(context.Context) TransformOutputCustomPresetCodecCopyVideoOutput
}

type TransformOutputCustomPresetCodecCopyVideoArgs struct {
	// Specifies the label for the codec. The label can be used to control muxing behavior.
	Label pulumi.StringPtrInput `pulumi:"label"`
}

func (TransformOutputCustomPresetCodecCopyVideoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetCodecCopyVideo)(nil)).Elem()
}

func (i TransformOutputCustomPresetCodecCopyVideoArgs) ToTransformOutputCustomPresetCodecCopyVideoOutput() TransformOutputCustomPresetCodecCopyVideoOutput {
	return i.ToTransformOutputCustomPresetCodecCopyVideoOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetCodecCopyVideoArgs) ToTransformOutputCustomPresetCodecCopyVideoOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecCopyVideoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetCodecCopyVideoOutput)
}

func (i TransformOutputCustomPresetCodecCopyVideoArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetCodecCopyVideo] {
	return pulumix.Output[TransformOutputCustomPresetCodecCopyVideo]{
		OutputState: i.ToTransformOutputCustomPresetCodecCopyVideoOutputWithContext(ctx).OutputState,
	}
}

func (i TransformOutputCustomPresetCodecCopyVideoArgs) ToTransformOutputCustomPresetCodecCopyVideoPtrOutput() TransformOutputCustomPresetCodecCopyVideoPtrOutput {
	return i.ToTransformOutputCustomPresetCodecCopyVideoPtrOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetCodecCopyVideoArgs) ToTransformOutputCustomPresetCodecCopyVideoPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecCopyVideoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetCodecCopyVideoOutput).ToTransformOutputCustomPresetCodecCopyVideoPtrOutputWithContext(ctx)
}

// TransformOutputCustomPresetCodecCopyVideoPtrInput is an input type that accepts TransformOutputCustomPresetCodecCopyVideoArgs, TransformOutputCustomPresetCodecCopyVideoPtr and TransformOutputCustomPresetCodecCopyVideoPtrOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetCodecCopyVideoPtrInput` via:
//
//	        TransformOutputCustomPresetCodecCopyVideoArgs{...}
//
//	or:
//
//	        nil
type TransformOutputCustomPresetCodecCopyVideoPtrInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetCodecCopyVideoPtrOutput() TransformOutputCustomPresetCodecCopyVideoPtrOutput
	ToTransformOutputCustomPresetCodecCopyVideoPtrOutputWithContext(context.Context) TransformOutputCustomPresetCodecCopyVideoPtrOutput
}

type transformOutputCustomPresetCodecCopyVideoPtrType TransformOutputCustomPresetCodecCopyVideoArgs

func TransformOutputCustomPresetCodecCopyVideoPtr(v *TransformOutputCustomPresetCodecCopyVideoArgs) TransformOutputCustomPresetCodecCopyVideoPtrInput {
	return (*transformOutputCustomPresetCodecCopyVideoPtrType)(v)
}

func (*transformOutputCustomPresetCodecCopyVideoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetCodecCopyVideo)(nil)).Elem()
}

func (i *transformOutputCustomPresetCodecCopyVideoPtrType) ToTransformOutputCustomPresetCodecCopyVideoPtrOutput() TransformOutputCustomPresetCodecCopyVideoPtrOutput {
	return i.ToTransformOutputCustomPresetCodecCopyVideoPtrOutputWithContext(context.Background())
}

func (i *transformOutputCustomPresetCodecCopyVideoPtrType) ToTransformOutputCustomPresetCodecCopyVideoPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecCopyVideoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetCodecCopyVideoPtrOutput)
}

func (i *transformOutputCustomPresetCodecCopyVideoPtrType) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetCodecCopyVideo] {
	return pulumix.Output[*TransformOutputCustomPresetCodecCopyVideo]{
		OutputState: i.ToTransformOutputCustomPresetCodecCopyVideoPtrOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputCustomPresetCodecCopyVideoOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetCodecCopyVideoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetCodecCopyVideo)(nil)).Elem()
}

func (o TransformOutputCustomPresetCodecCopyVideoOutput) ToTransformOutputCustomPresetCodecCopyVideoOutput() TransformOutputCustomPresetCodecCopyVideoOutput {
	return o
}

func (o TransformOutputCustomPresetCodecCopyVideoOutput) ToTransformOutputCustomPresetCodecCopyVideoOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecCopyVideoOutput {
	return o
}

func (o TransformOutputCustomPresetCodecCopyVideoOutput) ToTransformOutputCustomPresetCodecCopyVideoPtrOutput() TransformOutputCustomPresetCodecCopyVideoPtrOutput {
	return o.ToTransformOutputCustomPresetCodecCopyVideoPtrOutputWithContext(context.Background())
}

func (o TransformOutputCustomPresetCodecCopyVideoOutput) ToTransformOutputCustomPresetCodecCopyVideoPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecCopyVideoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformOutputCustomPresetCodecCopyVideo) *TransformOutputCustomPresetCodecCopyVideo {
		return &v
	}).(TransformOutputCustomPresetCodecCopyVideoPtrOutput)
}

func (o TransformOutputCustomPresetCodecCopyVideoOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetCodecCopyVideo] {
	return pulumix.Output[TransformOutputCustomPresetCodecCopyVideo]{
		OutputState: o.OutputState,
	}
}

// Specifies the label for the codec. The label can be used to control muxing behavior.
func (o TransformOutputCustomPresetCodecCopyVideoOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecCopyVideo) *string { return v.Label }).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetCodecCopyVideoPtrOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetCodecCopyVideoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetCodecCopyVideo)(nil)).Elem()
}

func (o TransformOutputCustomPresetCodecCopyVideoPtrOutput) ToTransformOutputCustomPresetCodecCopyVideoPtrOutput() TransformOutputCustomPresetCodecCopyVideoPtrOutput {
	return o
}

func (o TransformOutputCustomPresetCodecCopyVideoPtrOutput) ToTransformOutputCustomPresetCodecCopyVideoPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecCopyVideoPtrOutput {
	return o
}

func (o TransformOutputCustomPresetCodecCopyVideoPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetCodecCopyVideo] {
	return pulumix.Output[*TransformOutputCustomPresetCodecCopyVideo]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputCustomPresetCodecCopyVideoPtrOutput) Elem() TransformOutputCustomPresetCodecCopyVideoOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecCopyVideo) TransformOutputCustomPresetCodecCopyVideo {
		if v != nil {
			return *v
		}
		var ret TransformOutputCustomPresetCodecCopyVideo
		return ret
	}).(TransformOutputCustomPresetCodecCopyVideoOutput)
}

// Specifies the label for the codec. The label can be used to control muxing behavior.
func (o TransformOutputCustomPresetCodecCopyVideoPtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecCopyVideo) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetCodecDdAudio struct {
	// The bitrate of the audio in bits per second. Default to `192000`.
	Bitrate *int `pulumi:"bitrate"`
	// The number of audio channels. Default to `2`.
	Channels *int `pulumi:"channels"`
	// Specifies the label for the codec. The label can be used to control muxing behavior.
	Label *string `pulumi:"label"`
	// The sampling rate to use for encoding in Hertz. Default to `48000`.
	SamplingRate *int `pulumi:"samplingRate"`
}

// TransformOutputCustomPresetCodecDdAudioInput is an input type that accepts TransformOutputCustomPresetCodecDdAudioArgs and TransformOutputCustomPresetCodecDdAudioOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetCodecDdAudioInput` via:
//
//	TransformOutputCustomPresetCodecDdAudioArgs{...}
type TransformOutputCustomPresetCodecDdAudioInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetCodecDdAudioOutput() TransformOutputCustomPresetCodecDdAudioOutput
	ToTransformOutputCustomPresetCodecDdAudioOutputWithContext(context.Context) TransformOutputCustomPresetCodecDdAudioOutput
}

type TransformOutputCustomPresetCodecDdAudioArgs struct {
	// The bitrate of the audio in bits per second. Default to `192000`.
	Bitrate pulumi.IntPtrInput `pulumi:"bitrate"`
	// The number of audio channels. Default to `2`.
	Channels pulumi.IntPtrInput `pulumi:"channels"`
	// Specifies the label for the codec. The label can be used to control muxing behavior.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// The sampling rate to use for encoding in Hertz. Default to `48000`.
	SamplingRate pulumi.IntPtrInput `pulumi:"samplingRate"`
}

func (TransformOutputCustomPresetCodecDdAudioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetCodecDdAudio)(nil)).Elem()
}

func (i TransformOutputCustomPresetCodecDdAudioArgs) ToTransformOutputCustomPresetCodecDdAudioOutput() TransformOutputCustomPresetCodecDdAudioOutput {
	return i.ToTransformOutputCustomPresetCodecDdAudioOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetCodecDdAudioArgs) ToTransformOutputCustomPresetCodecDdAudioOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecDdAudioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetCodecDdAudioOutput)
}

func (i TransformOutputCustomPresetCodecDdAudioArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetCodecDdAudio] {
	return pulumix.Output[TransformOutputCustomPresetCodecDdAudio]{
		OutputState: i.ToTransformOutputCustomPresetCodecDdAudioOutputWithContext(ctx).OutputState,
	}
}

func (i TransformOutputCustomPresetCodecDdAudioArgs) ToTransformOutputCustomPresetCodecDdAudioPtrOutput() TransformOutputCustomPresetCodecDdAudioPtrOutput {
	return i.ToTransformOutputCustomPresetCodecDdAudioPtrOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetCodecDdAudioArgs) ToTransformOutputCustomPresetCodecDdAudioPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecDdAudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetCodecDdAudioOutput).ToTransformOutputCustomPresetCodecDdAudioPtrOutputWithContext(ctx)
}

// TransformOutputCustomPresetCodecDdAudioPtrInput is an input type that accepts TransformOutputCustomPresetCodecDdAudioArgs, TransformOutputCustomPresetCodecDdAudioPtr and TransformOutputCustomPresetCodecDdAudioPtrOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetCodecDdAudioPtrInput` via:
//
//	        TransformOutputCustomPresetCodecDdAudioArgs{...}
//
//	or:
//
//	        nil
type TransformOutputCustomPresetCodecDdAudioPtrInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetCodecDdAudioPtrOutput() TransformOutputCustomPresetCodecDdAudioPtrOutput
	ToTransformOutputCustomPresetCodecDdAudioPtrOutputWithContext(context.Context) TransformOutputCustomPresetCodecDdAudioPtrOutput
}

type transformOutputCustomPresetCodecDdAudioPtrType TransformOutputCustomPresetCodecDdAudioArgs

func TransformOutputCustomPresetCodecDdAudioPtr(v *TransformOutputCustomPresetCodecDdAudioArgs) TransformOutputCustomPresetCodecDdAudioPtrInput {
	return (*transformOutputCustomPresetCodecDdAudioPtrType)(v)
}

func (*transformOutputCustomPresetCodecDdAudioPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetCodecDdAudio)(nil)).Elem()
}

func (i *transformOutputCustomPresetCodecDdAudioPtrType) ToTransformOutputCustomPresetCodecDdAudioPtrOutput() TransformOutputCustomPresetCodecDdAudioPtrOutput {
	return i.ToTransformOutputCustomPresetCodecDdAudioPtrOutputWithContext(context.Background())
}

func (i *transformOutputCustomPresetCodecDdAudioPtrType) ToTransformOutputCustomPresetCodecDdAudioPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecDdAudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetCodecDdAudioPtrOutput)
}

func (i *transformOutputCustomPresetCodecDdAudioPtrType) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetCodecDdAudio] {
	return pulumix.Output[*TransformOutputCustomPresetCodecDdAudio]{
		OutputState: i.ToTransformOutputCustomPresetCodecDdAudioPtrOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputCustomPresetCodecDdAudioOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetCodecDdAudioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetCodecDdAudio)(nil)).Elem()
}

func (o TransformOutputCustomPresetCodecDdAudioOutput) ToTransformOutputCustomPresetCodecDdAudioOutput() TransformOutputCustomPresetCodecDdAudioOutput {
	return o
}

func (o TransformOutputCustomPresetCodecDdAudioOutput) ToTransformOutputCustomPresetCodecDdAudioOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecDdAudioOutput {
	return o
}

func (o TransformOutputCustomPresetCodecDdAudioOutput) ToTransformOutputCustomPresetCodecDdAudioPtrOutput() TransformOutputCustomPresetCodecDdAudioPtrOutput {
	return o.ToTransformOutputCustomPresetCodecDdAudioPtrOutputWithContext(context.Background())
}

func (o TransformOutputCustomPresetCodecDdAudioOutput) ToTransformOutputCustomPresetCodecDdAudioPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecDdAudioPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformOutputCustomPresetCodecDdAudio) *TransformOutputCustomPresetCodecDdAudio {
		return &v
	}).(TransformOutputCustomPresetCodecDdAudioPtrOutput)
}

func (o TransformOutputCustomPresetCodecDdAudioOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetCodecDdAudio] {
	return pulumix.Output[TransformOutputCustomPresetCodecDdAudio]{
		OutputState: o.OutputState,
	}
}

// The bitrate of the audio in bits per second. Default to `192000`.
func (o TransformOutputCustomPresetCodecDdAudioOutput) Bitrate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecDdAudio) *int { return v.Bitrate }).(pulumi.IntPtrOutput)
}

// The number of audio channels. Default to `2`.
func (o TransformOutputCustomPresetCodecDdAudioOutput) Channels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecDdAudio) *int { return v.Channels }).(pulumi.IntPtrOutput)
}

// Specifies the label for the codec. The label can be used to control muxing behavior.
func (o TransformOutputCustomPresetCodecDdAudioOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecDdAudio) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// The sampling rate to use for encoding in Hertz. Default to `48000`.
func (o TransformOutputCustomPresetCodecDdAudioOutput) SamplingRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecDdAudio) *int { return v.SamplingRate }).(pulumi.IntPtrOutput)
}

type TransformOutputCustomPresetCodecDdAudioPtrOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetCodecDdAudioPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetCodecDdAudio)(nil)).Elem()
}

func (o TransformOutputCustomPresetCodecDdAudioPtrOutput) ToTransformOutputCustomPresetCodecDdAudioPtrOutput() TransformOutputCustomPresetCodecDdAudioPtrOutput {
	return o
}

func (o TransformOutputCustomPresetCodecDdAudioPtrOutput) ToTransformOutputCustomPresetCodecDdAudioPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecDdAudioPtrOutput {
	return o
}

func (o TransformOutputCustomPresetCodecDdAudioPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetCodecDdAudio] {
	return pulumix.Output[*TransformOutputCustomPresetCodecDdAudio]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputCustomPresetCodecDdAudioPtrOutput) Elem() TransformOutputCustomPresetCodecDdAudioOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecDdAudio) TransformOutputCustomPresetCodecDdAudio {
		if v != nil {
			return *v
		}
		var ret TransformOutputCustomPresetCodecDdAudio
		return ret
	}).(TransformOutputCustomPresetCodecDdAudioOutput)
}

// The bitrate of the audio in bits per second. Default to `192000`.
func (o TransformOutputCustomPresetCodecDdAudioPtrOutput) Bitrate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecDdAudio) *int {
		if v == nil {
			return nil
		}
		return v.Bitrate
	}).(pulumi.IntPtrOutput)
}

// The number of audio channels. Default to `2`.
func (o TransformOutputCustomPresetCodecDdAudioPtrOutput) Channels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecDdAudio) *int {
		if v == nil {
			return nil
		}
		return v.Channels
	}).(pulumi.IntPtrOutput)
}

// Specifies the label for the codec. The label can be used to control muxing behavior.
func (o TransformOutputCustomPresetCodecDdAudioPtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecDdAudio) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

// The sampling rate to use for encoding in Hertz. Default to `48000`.
func (o TransformOutputCustomPresetCodecDdAudioPtrOutput) SamplingRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecDdAudio) *int {
		if v == nil {
			return nil
		}
		return v.SamplingRate
	}).(pulumi.IntPtrOutput)
}

type TransformOutputCustomPresetCodecH264Video struct {
	// The complexity of the encoding. Possible values are `Balanced`, `Speed` or `Quality`. Default to `Balanced`.
	Complexity *string `pulumi:"complexity"`
	// The distance between two key frames. The value should be non-zero in the range `0.5` to `20` seconds, specified in ISO 8601 format. Note that this setting is ignored if `syncMode` is set to `Passthrough`, where the KeyFrameInterval value will follow the input source setting. Defaults to `PT2S`.
	KeyFrameInterval *string `pulumi:"keyFrameInterval"`
	// Specifies the label for the codec. The label can be used to control muxing behavior.
	Label *string `pulumi:"label"`
	// One or more `layer` blocks as defined below.
	Layers []TransformOutputCustomPresetCodecH264VideoLayer `pulumi:"layers"`
	// The rate control mode. Possible values are `ABR`, `CBR` or `CRF`. Default to `ABR`.
	RateControlMode *string `pulumi:"rateControlMode"`
	// Whether the encoder should insert key frames at scene changes. This flag should be set to true only when the encoder is being configured to produce a single output video. Default to `false`.
	SceneChangeDetectionEnabled *bool `pulumi:"sceneChangeDetectionEnabled"`
	// Specifies the resizing mode - how the input video will be resized to fit the desired output resolution(s). Possible values are `AutoFit`, `AutoSize` or `None`. Default to `AutoSize`.
	StretchMode *string `pulumi:"stretchMode"`
	// Specifies the synchronization mode for the video. Possible values are `Auto`, `Cfr`, `Passthrough` or `Vfr`. Default to `Auto`.
	SyncMode *string `pulumi:"syncMode"`
}

// TransformOutputCustomPresetCodecH264VideoInput is an input type that accepts TransformOutputCustomPresetCodecH264VideoArgs and TransformOutputCustomPresetCodecH264VideoOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetCodecH264VideoInput` via:
//
//	TransformOutputCustomPresetCodecH264VideoArgs{...}
type TransformOutputCustomPresetCodecH264VideoInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetCodecH264VideoOutput() TransformOutputCustomPresetCodecH264VideoOutput
	ToTransformOutputCustomPresetCodecH264VideoOutputWithContext(context.Context) TransformOutputCustomPresetCodecH264VideoOutput
}

type TransformOutputCustomPresetCodecH264VideoArgs struct {
	// The complexity of the encoding. Possible values are `Balanced`, `Speed` or `Quality`. Default to `Balanced`.
	Complexity pulumi.StringPtrInput `pulumi:"complexity"`
	// The distance between two key frames. The value should be non-zero in the range `0.5` to `20` seconds, specified in ISO 8601 format. Note that this setting is ignored if `syncMode` is set to `Passthrough`, where the KeyFrameInterval value will follow the input source setting. Defaults to `PT2S`.
	KeyFrameInterval pulumi.StringPtrInput `pulumi:"keyFrameInterval"`
	// Specifies the label for the codec. The label can be used to control muxing behavior.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// One or more `layer` blocks as defined below.
	Layers TransformOutputCustomPresetCodecH264VideoLayerArrayInput `pulumi:"layers"`
	// The rate control mode. Possible values are `ABR`, `CBR` or `CRF`. Default to `ABR`.
	RateControlMode pulumi.StringPtrInput `pulumi:"rateControlMode"`
	// Whether the encoder should insert key frames at scene changes. This flag should be set to true only when the encoder is being configured to produce a single output video. Default to `false`.
	SceneChangeDetectionEnabled pulumi.BoolPtrInput `pulumi:"sceneChangeDetectionEnabled"`
	// Specifies the resizing mode - how the input video will be resized to fit the desired output resolution(s). Possible values are `AutoFit`, `AutoSize` or `None`. Default to `AutoSize`.
	StretchMode pulumi.StringPtrInput `pulumi:"stretchMode"`
	// Specifies the synchronization mode for the video. Possible values are `Auto`, `Cfr`, `Passthrough` or `Vfr`. Default to `Auto`.
	SyncMode pulumi.StringPtrInput `pulumi:"syncMode"`
}

func (TransformOutputCustomPresetCodecH264VideoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetCodecH264Video)(nil)).Elem()
}

func (i TransformOutputCustomPresetCodecH264VideoArgs) ToTransformOutputCustomPresetCodecH264VideoOutput() TransformOutputCustomPresetCodecH264VideoOutput {
	return i.ToTransformOutputCustomPresetCodecH264VideoOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetCodecH264VideoArgs) ToTransformOutputCustomPresetCodecH264VideoOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecH264VideoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetCodecH264VideoOutput)
}

func (i TransformOutputCustomPresetCodecH264VideoArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetCodecH264Video] {
	return pulumix.Output[TransformOutputCustomPresetCodecH264Video]{
		OutputState: i.ToTransformOutputCustomPresetCodecH264VideoOutputWithContext(ctx).OutputState,
	}
}

func (i TransformOutputCustomPresetCodecH264VideoArgs) ToTransformOutputCustomPresetCodecH264VideoPtrOutput() TransformOutputCustomPresetCodecH264VideoPtrOutput {
	return i.ToTransformOutputCustomPresetCodecH264VideoPtrOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetCodecH264VideoArgs) ToTransformOutputCustomPresetCodecH264VideoPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecH264VideoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetCodecH264VideoOutput).ToTransformOutputCustomPresetCodecH264VideoPtrOutputWithContext(ctx)
}

// TransformOutputCustomPresetCodecH264VideoPtrInput is an input type that accepts TransformOutputCustomPresetCodecH264VideoArgs, TransformOutputCustomPresetCodecH264VideoPtr and TransformOutputCustomPresetCodecH264VideoPtrOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetCodecH264VideoPtrInput` via:
//
//	        TransformOutputCustomPresetCodecH264VideoArgs{...}
//
//	or:
//
//	        nil
type TransformOutputCustomPresetCodecH264VideoPtrInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetCodecH264VideoPtrOutput() TransformOutputCustomPresetCodecH264VideoPtrOutput
	ToTransformOutputCustomPresetCodecH264VideoPtrOutputWithContext(context.Context) TransformOutputCustomPresetCodecH264VideoPtrOutput
}

type transformOutputCustomPresetCodecH264VideoPtrType TransformOutputCustomPresetCodecH264VideoArgs

func TransformOutputCustomPresetCodecH264VideoPtr(v *TransformOutputCustomPresetCodecH264VideoArgs) TransformOutputCustomPresetCodecH264VideoPtrInput {
	return (*transformOutputCustomPresetCodecH264VideoPtrType)(v)
}

func (*transformOutputCustomPresetCodecH264VideoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetCodecH264Video)(nil)).Elem()
}

func (i *transformOutputCustomPresetCodecH264VideoPtrType) ToTransformOutputCustomPresetCodecH264VideoPtrOutput() TransformOutputCustomPresetCodecH264VideoPtrOutput {
	return i.ToTransformOutputCustomPresetCodecH264VideoPtrOutputWithContext(context.Background())
}

func (i *transformOutputCustomPresetCodecH264VideoPtrType) ToTransformOutputCustomPresetCodecH264VideoPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecH264VideoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetCodecH264VideoPtrOutput)
}

func (i *transformOutputCustomPresetCodecH264VideoPtrType) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetCodecH264Video] {
	return pulumix.Output[*TransformOutputCustomPresetCodecH264Video]{
		OutputState: i.ToTransformOutputCustomPresetCodecH264VideoPtrOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputCustomPresetCodecH264VideoOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetCodecH264VideoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetCodecH264Video)(nil)).Elem()
}

func (o TransformOutputCustomPresetCodecH264VideoOutput) ToTransformOutputCustomPresetCodecH264VideoOutput() TransformOutputCustomPresetCodecH264VideoOutput {
	return o
}

func (o TransformOutputCustomPresetCodecH264VideoOutput) ToTransformOutputCustomPresetCodecH264VideoOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecH264VideoOutput {
	return o
}

func (o TransformOutputCustomPresetCodecH264VideoOutput) ToTransformOutputCustomPresetCodecH264VideoPtrOutput() TransformOutputCustomPresetCodecH264VideoPtrOutput {
	return o.ToTransformOutputCustomPresetCodecH264VideoPtrOutputWithContext(context.Background())
}

func (o TransformOutputCustomPresetCodecH264VideoOutput) ToTransformOutputCustomPresetCodecH264VideoPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecH264VideoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformOutputCustomPresetCodecH264Video) *TransformOutputCustomPresetCodecH264Video {
		return &v
	}).(TransformOutputCustomPresetCodecH264VideoPtrOutput)
}

func (o TransformOutputCustomPresetCodecH264VideoOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetCodecH264Video] {
	return pulumix.Output[TransformOutputCustomPresetCodecH264Video]{
		OutputState: o.OutputState,
	}
}

// The complexity of the encoding. Possible values are `Balanced`, `Speed` or `Quality`. Default to `Balanced`.
func (o TransformOutputCustomPresetCodecH264VideoOutput) Complexity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH264Video) *string { return v.Complexity }).(pulumi.StringPtrOutput)
}

// The distance between two key frames. The value should be non-zero in the range `0.5` to `20` seconds, specified in ISO 8601 format. Note that this setting is ignored if `syncMode` is set to `Passthrough`, where the KeyFrameInterval value will follow the input source setting. Defaults to `PT2S`.
func (o TransformOutputCustomPresetCodecH264VideoOutput) KeyFrameInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH264Video) *string { return v.KeyFrameInterval }).(pulumi.StringPtrOutput)
}

// Specifies the label for the codec. The label can be used to control muxing behavior.
func (o TransformOutputCustomPresetCodecH264VideoOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH264Video) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// One or more `layer` blocks as defined below.
func (o TransformOutputCustomPresetCodecH264VideoOutput) Layers() TransformOutputCustomPresetCodecH264VideoLayerArrayOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH264Video) []TransformOutputCustomPresetCodecH264VideoLayer {
		return v.Layers
	}).(TransformOutputCustomPresetCodecH264VideoLayerArrayOutput)
}

// The rate control mode. Possible values are `ABR`, `CBR` or `CRF`. Default to `ABR`.
func (o TransformOutputCustomPresetCodecH264VideoOutput) RateControlMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH264Video) *string { return v.RateControlMode }).(pulumi.StringPtrOutput)
}

// Whether the encoder should insert key frames at scene changes. This flag should be set to true only when the encoder is being configured to produce a single output video. Default to `false`.
func (o TransformOutputCustomPresetCodecH264VideoOutput) SceneChangeDetectionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH264Video) *bool { return v.SceneChangeDetectionEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the resizing mode - how the input video will be resized to fit the desired output resolution(s). Possible values are `AutoFit`, `AutoSize` or `None`. Default to `AutoSize`.
func (o TransformOutputCustomPresetCodecH264VideoOutput) StretchMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH264Video) *string { return v.StretchMode }).(pulumi.StringPtrOutput)
}

// Specifies the synchronization mode for the video. Possible values are `Auto`, `Cfr`, `Passthrough` or `Vfr`. Default to `Auto`.
func (o TransformOutputCustomPresetCodecH264VideoOutput) SyncMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH264Video) *string { return v.SyncMode }).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetCodecH264VideoPtrOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetCodecH264VideoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetCodecH264Video)(nil)).Elem()
}

func (o TransformOutputCustomPresetCodecH264VideoPtrOutput) ToTransformOutputCustomPresetCodecH264VideoPtrOutput() TransformOutputCustomPresetCodecH264VideoPtrOutput {
	return o
}

func (o TransformOutputCustomPresetCodecH264VideoPtrOutput) ToTransformOutputCustomPresetCodecH264VideoPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecH264VideoPtrOutput {
	return o
}

func (o TransformOutputCustomPresetCodecH264VideoPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetCodecH264Video] {
	return pulumix.Output[*TransformOutputCustomPresetCodecH264Video]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputCustomPresetCodecH264VideoPtrOutput) Elem() TransformOutputCustomPresetCodecH264VideoOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecH264Video) TransformOutputCustomPresetCodecH264Video {
		if v != nil {
			return *v
		}
		var ret TransformOutputCustomPresetCodecH264Video
		return ret
	}).(TransformOutputCustomPresetCodecH264VideoOutput)
}

// The complexity of the encoding. Possible values are `Balanced`, `Speed` or `Quality`. Default to `Balanced`.
func (o TransformOutputCustomPresetCodecH264VideoPtrOutput) Complexity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecH264Video) *string {
		if v == nil {
			return nil
		}
		return v.Complexity
	}).(pulumi.StringPtrOutput)
}

// The distance between two key frames. The value should be non-zero in the range `0.5` to `20` seconds, specified in ISO 8601 format. Note that this setting is ignored if `syncMode` is set to `Passthrough`, where the KeyFrameInterval value will follow the input source setting. Defaults to `PT2S`.
func (o TransformOutputCustomPresetCodecH264VideoPtrOutput) KeyFrameInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecH264Video) *string {
		if v == nil {
			return nil
		}
		return v.KeyFrameInterval
	}).(pulumi.StringPtrOutput)
}

// Specifies the label for the codec. The label can be used to control muxing behavior.
func (o TransformOutputCustomPresetCodecH264VideoPtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecH264Video) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

// One or more `layer` blocks as defined below.
func (o TransformOutputCustomPresetCodecH264VideoPtrOutput) Layers() TransformOutputCustomPresetCodecH264VideoLayerArrayOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecH264Video) []TransformOutputCustomPresetCodecH264VideoLayer {
		if v == nil {
			return nil
		}
		return v.Layers
	}).(TransformOutputCustomPresetCodecH264VideoLayerArrayOutput)
}

// The rate control mode. Possible values are `ABR`, `CBR` or `CRF`. Default to `ABR`.
func (o TransformOutputCustomPresetCodecH264VideoPtrOutput) RateControlMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecH264Video) *string {
		if v == nil {
			return nil
		}
		return v.RateControlMode
	}).(pulumi.StringPtrOutput)
}

// Whether the encoder should insert key frames at scene changes. This flag should be set to true only when the encoder is being configured to produce a single output video. Default to `false`.
func (o TransformOutputCustomPresetCodecH264VideoPtrOutput) SceneChangeDetectionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecH264Video) *bool {
		if v == nil {
			return nil
		}
		return v.SceneChangeDetectionEnabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the resizing mode - how the input video will be resized to fit the desired output resolution(s). Possible values are `AutoFit`, `AutoSize` or `None`. Default to `AutoSize`.
func (o TransformOutputCustomPresetCodecH264VideoPtrOutput) StretchMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecH264Video) *string {
		if v == nil {
			return nil
		}
		return v.StretchMode
	}).(pulumi.StringPtrOutput)
}

// Specifies the synchronization mode for the video. Possible values are `Auto`, `Cfr`, `Passthrough` or `Vfr`. Default to `Auto`.
func (o TransformOutputCustomPresetCodecH264VideoPtrOutput) SyncMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecH264Video) *string {
		if v == nil {
			return nil
		}
		return v.SyncMode
	}).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetCodecH264VideoLayer struct {
	// Whether adaptive B-frames are used when encoding this layer. If not specified, the encoder will turn it on whenever the video profile permits its use. Default to `true`.
	AdaptiveBFrameEnabled *bool `pulumi:"adaptiveBFrameEnabled"`
	// The number of B-frames to use when encoding this layer. If not specified, the encoder chooses an appropriate number based on the video profile and level.
	BFrames *int `pulumi:"bFrames"`
	// The average bitrate in bits per second at which to encode the input video when generating this layer.
	Bitrate int `pulumi:"bitrate"`
	// Specifies the maximum amount of time that the encoder should buffer frames before encoding. The value should be in ISO 8601 format. The value should be in the range `0.1` to `100` seconds. Defaults to `PT5S`.
	BufferWindow *string `pulumi:"bufferWindow"`
	// The value of CRF to be used when encoding this layer. This setting takes effect when `rateControlMode` is set `CRF`. The range of CRF value is between `0` and `51`, where lower values would result in better quality, at the expense of higher file sizes. Higher values mean more compression, but at some point quality degradation will be noticed. Default to `28`.
	Crf *float64 `pulumi:"crf"`
	// The entropy mode to be used for this layer. Possible values are `Cabac` or `Cavlc`. If not specified, the encoder chooses the mode that is appropriate for the profile and level.
	EntropyMode *string `pulumi:"entropyMode"`
	// The frame rate (in frames per second) at which to encode this layer. The value can be in the form of `M/N` where `M` and `N` are integers (For example, `30000/1001`), or in the form of a number (For example, `30`, or `29.97`). The encoder enforces constraints on allowed frame rates based on the profile and level. If it is not specified, the encoder will use the same frame rate as the input video.
	FrameRate *string `pulumi:"frameRate"`
	// The height of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example `50%` means the output video has half as many pixels in height as the input.
	Height *string `pulumi:"height"`
	// The alphanumeric label for this layer, which can be used in multiplexing different video and audio layers, or in naming the output file.
	Label *string `pulumi:"label"`
	// The H.264 levels. Currently, the resource support Level up to `6.2`. The value can be `auto`, or a number that matches the H.264 profile. If not specified, the default is `auto`, which lets the encoder choose the Level that is appropriate for this layer.
	Level *string `pulumi:"level"`
	// The maximum bitrate (in bits per second), at which the VBV buffer should be assumed to refill. If not specified, defaults to the same value as bitrate.
	MaxBitrate *int `pulumi:"maxBitrate"`
	// The H.264 profile. Possible values are `Auto`, `Main` and `Main10`. Default to `Auto`.
	Profile *string `pulumi:"profile"`
	// The number of reference frames to be used when encoding this layer. If not specified, the encoder determines an appropriate number based on the encoder complexity setting.
	ReferenceFrames *int `pulumi:"referenceFrames"`
	// The number of slices to be used when encoding this layer. If not specified, default is `1`, which means that encoder will use a single slice for each frame.
	Slices *int `pulumi:"slices"`
	// The width of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example `50%` means the output video has half as many pixels in width as the input.
	Width *string `pulumi:"width"`
}

// TransformOutputCustomPresetCodecH264VideoLayerInput is an input type that accepts TransformOutputCustomPresetCodecH264VideoLayerArgs and TransformOutputCustomPresetCodecH264VideoLayerOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetCodecH264VideoLayerInput` via:
//
//	TransformOutputCustomPresetCodecH264VideoLayerArgs{...}
type TransformOutputCustomPresetCodecH264VideoLayerInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetCodecH264VideoLayerOutput() TransformOutputCustomPresetCodecH264VideoLayerOutput
	ToTransformOutputCustomPresetCodecH264VideoLayerOutputWithContext(context.Context) TransformOutputCustomPresetCodecH264VideoLayerOutput
}

type TransformOutputCustomPresetCodecH264VideoLayerArgs struct {
	// Whether adaptive B-frames are used when encoding this layer. If not specified, the encoder will turn it on whenever the video profile permits its use. Default to `true`.
	AdaptiveBFrameEnabled pulumi.BoolPtrInput `pulumi:"adaptiveBFrameEnabled"`
	// The number of B-frames to use when encoding this layer. If not specified, the encoder chooses an appropriate number based on the video profile and level.
	BFrames pulumi.IntPtrInput `pulumi:"bFrames"`
	// The average bitrate in bits per second at which to encode the input video when generating this layer.
	Bitrate pulumi.IntInput `pulumi:"bitrate"`
	// Specifies the maximum amount of time that the encoder should buffer frames before encoding. The value should be in ISO 8601 format. The value should be in the range `0.1` to `100` seconds. Defaults to `PT5S`.
	BufferWindow pulumi.StringPtrInput `pulumi:"bufferWindow"`
	// The value of CRF to be used when encoding this layer. This setting takes effect when `rateControlMode` is set `CRF`. The range of CRF value is between `0` and `51`, where lower values would result in better quality, at the expense of higher file sizes. Higher values mean more compression, but at some point quality degradation will be noticed. Default to `28`.
	Crf pulumi.Float64PtrInput `pulumi:"crf"`
	// The entropy mode to be used for this layer. Possible values are `Cabac` or `Cavlc`. If not specified, the encoder chooses the mode that is appropriate for the profile and level.
	EntropyMode pulumi.StringPtrInput `pulumi:"entropyMode"`
	// The frame rate (in frames per second) at which to encode this layer. The value can be in the form of `M/N` where `M` and `N` are integers (For example, `30000/1001`), or in the form of a number (For example, `30`, or `29.97`). The encoder enforces constraints on allowed frame rates based on the profile and level. If it is not specified, the encoder will use the same frame rate as the input video.
	FrameRate pulumi.StringPtrInput `pulumi:"frameRate"`
	// The height of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example `50%` means the output video has half as many pixels in height as the input.
	Height pulumi.StringPtrInput `pulumi:"height"`
	// The alphanumeric label for this layer, which can be used in multiplexing different video and audio layers, or in naming the output file.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// The H.264 levels. Currently, the resource support Level up to `6.2`. The value can be `auto`, or a number that matches the H.264 profile. If not specified, the default is `auto`, which lets the encoder choose the Level that is appropriate for this layer.
	Level pulumi.StringPtrInput `pulumi:"level"`
	// The maximum bitrate (in bits per second), at which the VBV buffer should be assumed to refill. If not specified, defaults to the same value as bitrate.
	MaxBitrate pulumi.IntPtrInput `pulumi:"maxBitrate"`
	// The H.264 profile. Possible values are `Auto`, `Main` and `Main10`. Default to `Auto`.
	Profile pulumi.StringPtrInput `pulumi:"profile"`
	// The number of reference frames to be used when encoding this layer. If not specified, the encoder determines an appropriate number based on the encoder complexity setting.
	ReferenceFrames pulumi.IntPtrInput `pulumi:"referenceFrames"`
	// The number of slices to be used when encoding this layer. If not specified, default is `1`, which means that encoder will use a single slice for each frame.
	Slices pulumi.IntPtrInput `pulumi:"slices"`
	// The width of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example `50%` means the output video has half as many pixels in width as the input.
	Width pulumi.StringPtrInput `pulumi:"width"`
}

func (TransformOutputCustomPresetCodecH264VideoLayerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetCodecH264VideoLayer)(nil)).Elem()
}

func (i TransformOutputCustomPresetCodecH264VideoLayerArgs) ToTransformOutputCustomPresetCodecH264VideoLayerOutput() TransformOutputCustomPresetCodecH264VideoLayerOutput {
	return i.ToTransformOutputCustomPresetCodecH264VideoLayerOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetCodecH264VideoLayerArgs) ToTransformOutputCustomPresetCodecH264VideoLayerOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecH264VideoLayerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetCodecH264VideoLayerOutput)
}

func (i TransformOutputCustomPresetCodecH264VideoLayerArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetCodecH264VideoLayer] {
	return pulumix.Output[TransformOutputCustomPresetCodecH264VideoLayer]{
		OutputState: i.ToTransformOutputCustomPresetCodecH264VideoLayerOutputWithContext(ctx).OutputState,
	}
}

// TransformOutputCustomPresetCodecH264VideoLayerArrayInput is an input type that accepts TransformOutputCustomPresetCodecH264VideoLayerArray and TransformOutputCustomPresetCodecH264VideoLayerArrayOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetCodecH264VideoLayerArrayInput` via:
//
//	TransformOutputCustomPresetCodecH264VideoLayerArray{ TransformOutputCustomPresetCodecH264VideoLayerArgs{...} }
type TransformOutputCustomPresetCodecH264VideoLayerArrayInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetCodecH264VideoLayerArrayOutput() TransformOutputCustomPresetCodecH264VideoLayerArrayOutput
	ToTransformOutputCustomPresetCodecH264VideoLayerArrayOutputWithContext(context.Context) TransformOutputCustomPresetCodecH264VideoLayerArrayOutput
}

type TransformOutputCustomPresetCodecH264VideoLayerArray []TransformOutputCustomPresetCodecH264VideoLayerInput

func (TransformOutputCustomPresetCodecH264VideoLayerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformOutputCustomPresetCodecH264VideoLayer)(nil)).Elem()
}

func (i TransformOutputCustomPresetCodecH264VideoLayerArray) ToTransformOutputCustomPresetCodecH264VideoLayerArrayOutput() TransformOutputCustomPresetCodecH264VideoLayerArrayOutput {
	return i.ToTransformOutputCustomPresetCodecH264VideoLayerArrayOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetCodecH264VideoLayerArray) ToTransformOutputCustomPresetCodecH264VideoLayerArrayOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecH264VideoLayerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetCodecH264VideoLayerArrayOutput)
}

func (i TransformOutputCustomPresetCodecH264VideoLayerArray) ToOutput(ctx context.Context) pulumix.Output[[]TransformOutputCustomPresetCodecH264VideoLayer] {
	return pulumix.Output[[]TransformOutputCustomPresetCodecH264VideoLayer]{
		OutputState: i.ToTransformOutputCustomPresetCodecH264VideoLayerArrayOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputCustomPresetCodecH264VideoLayerOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetCodecH264VideoLayerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetCodecH264VideoLayer)(nil)).Elem()
}

func (o TransformOutputCustomPresetCodecH264VideoLayerOutput) ToTransformOutputCustomPresetCodecH264VideoLayerOutput() TransformOutputCustomPresetCodecH264VideoLayerOutput {
	return o
}

func (o TransformOutputCustomPresetCodecH264VideoLayerOutput) ToTransformOutputCustomPresetCodecH264VideoLayerOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecH264VideoLayerOutput {
	return o
}

func (o TransformOutputCustomPresetCodecH264VideoLayerOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetCodecH264VideoLayer] {
	return pulumix.Output[TransformOutputCustomPresetCodecH264VideoLayer]{
		OutputState: o.OutputState,
	}
}

// Whether adaptive B-frames are used when encoding this layer. If not specified, the encoder will turn it on whenever the video profile permits its use. Default to `true`.
func (o TransformOutputCustomPresetCodecH264VideoLayerOutput) AdaptiveBFrameEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH264VideoLayer) *bool { return v.AdaptiveBFrameEnabled }).(pulumi.BoolPtrOutput)
}

// The number of B-frames to use when encoding this layer. If not specified, the encoder chooses an appropriate number based on the video profile and level.
func (o TransformOutputCustomPresetCodecH264VideoLayerOutput) BFrames() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH264VideoLayer) *int { return v.BFrames }).(pulumi.IntPtrOutput)
}

// The average bitrate in bits per second at which to encode the input video when generating this layer.
func (o TransformOutputCustomPresetCodecH264VideoLayerOutput) Bitrate() pulumi.IntOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH264VideoLayer) int { return v.Bitrate }).(pulumi.IntOutput)
}

// Specifies the maximum amount of time that the encoder should buffer frames before encoding. The value should be in ISO 8601 format. The value should be in the range `0.1` to `100` seconds. Defaults to `PT5S`.
func (o TransformOutputCustomPresetCodecH264VideoLayerOutput) BufferWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH264VideoLayer) *string { return v.BufferWindow }).(pulumi.StringPtrOutput)
}

// The value of CRF to be used when encoding this layer. This setting takes effect when `rateControlMode` is set `CRF`. The range of CRF value is between `0` and `51`, where lower values would result in better quality, at the expense of higher file sizes. Higher values mean more compression, but at some point quality degradation will be noticed. Default to `28`.
func (o TransformOutputCustomPresetCodecH264VideoLayerOutput) Crf() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH264VideoLayer) *float64 { return v.Crf }).(pulumi.Float64PtrOutput)
}

// The entropy mode to be used for this layer. Possible values are `Cabac` or `Cavlc`. If not specified, the encoder chooses the mode that is appropriate for the profile and level.
func (o TransformOutputCustomPresetCodecH264VideoLayerOutput) EntropyMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH264VideoLayer) *string { return v.EntropyMode }).(pulumi.StringPtrOutput)
}

// The frame rate (in frames per second) at which to encode this layer. The value can be in the form of `M/N` where `M` and `N` are integers (For example, `30000/1001`), or in the form of a number (For example, `30`, or `29.97`). The encoder enforces constraints on allowed frame rates based on the profile and level. If it is not specified, the encoder will use the same frame rate as the input video.
func (o TransformOutputCustomPresetCodecH264VideoLayerOutput) FrameRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH264VideoLayer) *string { return v.FrameRate }).(pulumi.StringPtrOutput)
}

// The height of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example `50%` means the output video has half as many pixels in height as the input.
func (o TransformOutputCustomPresetCodecH264VideoLayerOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH264VideoLayer) *string { return v.Height }).(pulumi.StringPtrOutput)
}

// The alphanumeric label for this layer, which can be used in multiplexing different video and audio layers, or in naming the output file.
func (o TransformOutputCustomPresetCodecH264VideoLayerOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH264VideoLayer) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// The H.264 levels. Currently, the resource support Level up to `6.2`. The value can be `auto`, or a number that matches the H.264 profile. If not specified, the default is `auto`, which lets the encoder choose the Level that is appropriate for this layer.
func (o TransformOutputCustomPresetCodecH264VideoLayerOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH264VideoLayer) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// The maximum bitrate (in bits per second), at which the VBV buffer should be assumed to refill. If not specified, defaults to the same value as bitrate.
func (o TransformOutputCustomPresetCodecH264VideoLayerOutput) MaxBitrate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH264VideoLayer) *int { return v.MaxBitrate }).(pulumi.IntPtrOutput)
}

// The H.264 profile. Possible values are `Auto`, `Main` and `Main10`. Default to `Auto`.
func (o TransformOutputCustomPresetCodecH264VideoLayerOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH264VideoLayer) *string { return v.Profile }).(pulumi.StringPtrOutput)
}

// The number of reference frames to be used when encoding this layer. If not specified, the encoder determines an appropriate number based on the encoder complexity setting.
func (o TransformOutputCustomPresetCodecH264VideoLayerOutput) ReferenceFrames() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH264VideoLayer) *int { return v.ReferenceFrames }).(pulumi.IntPtrOutput)
}

// The number of slices to be used when encoding this layer. If not specified, default is `1`, which means that encoder will use a single slice for each frame.
func (o TransformOutputCustomPresetCodecH264VideoLayerOutput) Slices() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH264VideoLayer) *int { return v.Slices }).(pulumi.IntPtrOutput)
}

// The width of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example `50%` means the output video has half as many pixels in width as the input.
func (o TransformOutputCustomPresetCodecH264VideoLayerOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH264VideoLayer) *string { return v.Width }).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetCodecH264VideoLayerArrayOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetCodecH264VideoLayerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformOutputCustomPresetCodecH264VideoLayer)(nil)).Elem()
}

func (o TransformOutputCustomPresetCodecH264VideoLayerArrayOutput) ToTransformOutputCustomPresetCodecH264VideoLayerArrayOutput() TransformOutputCustomPresetCodecH264VideoLayerArrayOutput {
	return o
}

func (o TransformOutputCustomPresetCodecH264VideoLayerArrayOutput) ToTransformOutputCustomPresetCodecH264VideoLayerArrayOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecH264VideoLayerArrayOutput {
	return o
}

func (o TransformOutputCustomPresetCodecH264VideoLayerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TransformOutputCustomPresetCodecH264VideoLayer] {
	return pulumix.Output[[]TransformOutputCustomPresetCodecH264VideoLayer]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputCustomPresetCodecH264VideoLayerArrayOutput) Index(i pulumi.IntInput) TransformOutputCustomPresetCodecH264VideoLayerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformOutputCustomPresetCodecH264VideoLayer {
		return vs[0].([]TransformOutputCustomPresetCodecH264VideoLayer)[vs[1].(int)]
	}).(TransformOutputCustomPresetCodecH264VideoLayerOutput)
}

type TransformOutputCustomPresetCodecH265Video struct {
	// The complexity of the encoding. Possible values are `Balanced`, `Speed` or `Quality`. Default to `Balanced`.
	Complexity *string `pulumi:"complexity"`
	// The distance between two key frames. The value should be non-zero in the range `0.5` to `20` seconds, specified in ISO 8601 format. Note that this setting is ignored if `syncMode` is set to `Passthrough`, where the KeyFrameInterval value will follow the input source setting. Defaults to `PT2S`.
	KeyFrameInterval *string `pulumi:"keyFrameInterval"`
	// Specifies the label for the codec. The label can be used to control muxing behavior.
	Label *string `pulumi:"label"`
	// One or more `layer` blocks as defined below.
	Layers []TransformOutputCustomPresetCodecH265VideoLayer `pulumi:"layers"`
	// Whether the encoder should insert key frames at scene changes. This flag should be set to true only when the encoder is being configured to produce a single output video. Default to `false`.
	SceneChangeDetectionEnabled *bool `pulumi:"sceneChangeDetectionEnabled"`
	// Specifies the resizing mode - how the input video will be resized to fit the desired output resolution(s). Possible values are `AutoFit`, `AutoSize` or `None`. Default to `AutoSize`.
	StretchMode *string `pulumi:"stretchMode"`
	// Specifies the synchronization mode for the video. Possible values are `Auto`, `Cfr`, `Passthrough` or `Vfr`. Default to `Auto`.
	SyncMode *string `pulumi:"syncMode"`
}

// TransformOutputCustomPresetCodecH265VideoInput is an input type that accepts TransformOutputCustomPresetCodecH265VideoArgs and TransformOutputCustomPresetCodecH265VideoOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetCodecH265VideoInput` via:
//
//	TransformOutputCustomPresetCodecH265VideoArgs{...}
type TransformOutputCustomPresetCodecH265VideoInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetCodecH265VideoOutput() TransformOutputCustomPresetCodecH265VideoOutput
	ToTransformOutputCustomPresetCodecH265VideoOutputWithContext(context.Context) TransformOutputCustomPresetCodecH265VideoOutput
}

type TransformOutputCustomPresetCodecH265VideoArgs struct {
	// The complexity of the encoding. Possible values are `Balanced`, `Speed` or `Quality`. Default to `Balanced`.
	Complexity pulumi.StringPtrInput `pulumi:"complexity"`
	// The distance between two key frames. The value should be non-zero in the range `0.5` to `20` seconds, specified in ISO 8601 format. Note that this setting is ignored if `syncMode` is set to `Passthrough`, where the KeyFrameInterval value will follow the input source setting. Defaults to `PT2S`.
	KeyFrameInterval pulumi.StringPtrInput `pulumi:"keyFrameInterval"`
	// Specifies the label for the codec. The label can be used to control muxing behavior.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// One or more `layer` blocks as defined below.
	Layers TransformOutputCustomPresetCodecH265VideoLayerArrayInput `pulumi:"layers"`
	// Whether the encoder should insert key frames at scene changes. This flag should be set to true only when the encoder is being configured to produce a single output video. Default to `false`.
	SceneChangeDetectionEnabled pulumi.BoolPtrInput `pulumi:"sceneChangeDetectionEnabled"`
	// Specifies the resizing mode - how the input video will be resized to fit the desired output resolution(s). Possible values are `AutoFit`, `AutoSize` or `None`. Default to `AutoSize`.
	StretchMode pulumi.StringPtrInput `pulumi:"stretchMode"`
	// Specifies the synchronization mode for the video. Possible values are `Auto`, `Cfr`, `Passthrough` or `Vfr`. Default to `Auto`.
	SyncMode pulumi.StringPtrInput `pulumi:"syncMode"`
}

func (TransformOutputCustomPresetCodecH265VideoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetCodecH265Video)(nil)).Elem()
}

func (i TransformOutputCustomPresetCodecH265VideoArgs) ToTransformOutputCustomPresetCodecH265VideoOutput() TransformOutputCustomPresetCodecH265VideoOutput {
	return i.ToTransformOutputCustomPresetCodecH265VideoOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetCodecH265VideoArgs) ToTransformOutputCustomPresetCodecH265VideoOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecH265VideoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetCodecH265VideoOutput)
}

func (i TransformOutputCustomPresetCodecH265VideoArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetCodecH265Video] {
	return pulumix.Output[TransformOutputCustomPresetCodecH265Video]{
		OutputState: i.ToTransformOutputCustomPresetCodecH265VideoOutputWithContext(ctx).OutputState,
	}
}

func (i TransformOutputCustomPresetCodecH265VideoArgs) ToTransformOutputCustomPresetCodecH265VideoPtrOutput() TransformOutputCustomPresetCodecH265VideoPtrOutput {
	return i.ToTransformOutputCustomPresetCodecH265VideoPtrOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetCodecH265VideoArgs) ToTransformOutputCustomPresetCodecH265VideoPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecH265VideoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetCodecH265VideoOutput).ToTransformOutputCustomPresetCodecH265VideoPtrOutputWithContext(ctx)
}

// TransformOutputCustomPresetCodecH265VideoPtrInput is an input type that accepts TransformOutputCustomPresetCodecH265VideoArgs, TransformOutputCustomPresetCodecH265VideoPtr and TransformOutputCustomPresetCodecH265VideoPtrOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetCodecH265VideoPtrInput` via:
//
//	        TransformOutputCustomPresetCodecH265VideoArgs{...}
//
//	or:
//
//	        nil
type TransformOutputCustomPresetCodecH265VideoPtrInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetCodecH265VideoPtrOutput() TransformOutputCustomPresetCodecH265VideoPtrOutput
	ToTransformOutputCustomPresetCodecH265VideoPtrOutputWithContext(context.Context) TransformOutputCustomPresetCodecH265VideoPtrOutput
}

type transformOutputCustomPresetCodecH265VideoPtrType TransformOutputCustomPresetCodecH265VideoArgs

func TransformOutputCustomPresetCodecH265VideoPtr(v *TransformOutputCustomPresetCodecH265VideoArgs) TransformOutputCustomPresetCodecH265VideoPtrInput {
	return (*transformOutputCustomPresetCodecH265VideoPtrType)(v)
}

func (*transformOutputCustomPresetCodecH265VideoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetCodecH265Video)(nil)).Elem()
}

func (i *transformOutputCustomPresetCodecH265VideoPtrType) ToTransformOutputCustomPresetCodecH265VideoPtrOutput() TransformOutputCustomPresetCodecH265VideoPtrOutput {
	return i.ToTransformOutputCustomPresetCodecH265VideoPtrOutputWithContext(context.Background())
}

func (i *transformOutputCustomPresetCodecH265VideoPtrType) ToTransformOutputCustomPresetCodecH265VideoPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecH265VideoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetCodecH265VideoPtrOutput)
}

func (i *transformOutputCustomPresetCodecH265VideoPtrType) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetCodecH265Video] {
	return pulumix.Output[*TransformOutputCustomPresetCodecH265Video]{
		OutputState: i.ToTransformOutputCustomPresetCodecH265VideoPtrOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputCustomPresetCodecH265VideoOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetCodecH265VideoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetCodecH265Video)(nil)).Elem()
}

func (o TransformOutputCustomPresetCodecH265VideoOutput) ToTransformOutputCustomPresetCodecH265VideoOutput() TransformOutputCustomPresetCodecH265VideoOutput {
	return o
}

func (o TransformOutputCustomPresetCodecH265VideoOutput) ToTransformOutputCustomPresetCodecH265VideoOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecH265VideoOutput {
	return o
}

func (o TransformOutputCustomPresetCodecH265VideoOutput) ToTransformOutputCustomPresetCodecH265VideoPtrOutput() TransformOutputCustomPresetCodecH265VideoPtrOutput {
	return o.ToTransformOutputCustomPresetCodecH265VideoPtrOutputWithContext(context.Background())
}

func (o TransformOutputCustomPresetCodecH265VideoOutput) ToTransformOutputCustomPresetCodecH265VideoPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecH265VideoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformOutputCustomPresetCodecH265Video) *TransformOutputCustomPresetCodecH265Video {
		return &v
	}).(TransformOutputCustomPresetCodecH265VideoPtrOutput)
}

func (o TransformOutputCustomPresetCodecH265VideoOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetCodecH265Video] {
	return pulumix.Output[TransformOutputCustomPresetCodecH265Video]{
		OutputState: o.OutputState,
	}
}

// The complexity of the encoding. Possible values are `Balanced`, `Speed` or `Quality`. Default to `Balanced`.
func (o TransformOutputCustomPresetCodecH265VideoOutput) Complexity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH265Video) *string { return v.Complexity }).(pulumi.StringPtrOutput)
}

// The distance between two key frames. The value should be non-zero in the range `0.5` to `20` seconds, specified in ISO 8601 format. Note that this setting is ignored if `syncMode` is set to `Passthrough`, where the KeyFrameInterval value will follow the input source setting. Defaults to `PT2S`.
func (o TransformOutputCustomPresetCodecH265VideoOutput) KeyFrameInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH265Video) *string { return v.KeyFrameInterval }).(pulumi.StringPtrOutput)
}

// Specifies the label for the codec. The label can be used to control muxing behavior.
func (o TransformOutputCustomPresetCodecH265VideoOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH265Video) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// One or more `layer` blocks as defined below.
func (o TransformOutputCustomPresetCodecH265VideoOutput) Layers() TransformOutputCustomPresetCodecH265VideoLayerArrayOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH265Video) []TransformOutputCustomPresetCodecH265VideoLayer {
		return v.Layers
	}).(TransformOutputCustomPresetCodecH265VideoLayerArrayOutput)
}

// Whether the encoder should insert key frames at scene changes. This flag should be set to true only when the encoder is being configured to produce a single output video. Default to `false`.
func (o TransformOutputCustomPresetCodecH265VideoOutput) SceneChangeDetectionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH265Video) *bool { return v.SceneChangeDetectionEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the resizing mode - how the input video will be resized to fit the desired output resolution(s). Possible values are `AutoFit`, `AutoSize` or `None`. Default to `AutoSize`.
func (o TransformOutputCustomPresetCodecH265VideoOutput) StretchMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH265Video) *string { return v.StretchMode }).(pulumi.StringPtrOutput)
}

// Specifies the synchronization mode for the video. Possible values are `Auto`, `Cfr`, `Passthrough` or `Vfr`. Default to `Auto`.
func (o TransformOutputCustomPresetCodecH265VideoOutput) SyncMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH265Video) *string { return v.SyncMode }).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetCodecH265VideoPtrOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetCodecH265VideoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetCodecH265Video)(nil)).Elem()
}

func (o TransformOutputCustomPresetCodecH265VideoPtrOutput) ToTransformOutputCustomPresetCodecH265VideoPtrOutput() TransformOutputCustomPresetCodecH265VideoPtrOutput {
	return o
}

func (o TransformOutputCustomPresetCodecH265VideoPtrOutput) ToTransformOutputCustomPresetCodecH265VideoPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecH265VideoPtrOutput {
	return o
}

func (o TransformOutputCustomPresetCodecH265VideoPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetCodecH265Video] {
	return pulumix.Output[*TransformOutputCustomPresetCodecH265Video]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputCustomPresetCodecH265VideoPtrOutput) Elem() TransformOutputCustomPresetCodecH265VideoOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecH265Video) TransformOutputCustomPresetCodecH265Video {
		if v != nil {
			return *v
		}
		var ret TransformOutputCustomPresetCodecH265Video
		return ret
	}).(TransformOutputCustomPresetCodecH265VideoOutput)
}

// The complexity of the encoding. Possible values are `Balanced`, `Speed` or `Quality`. Default to `Balanced`.
func (o TransformOutputCustomPresetCodecH265VideoPtrOutput) Complexity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecH265Video) *string {
		if v == nil {
			return nil
		}
		return v.Complexity
	}).(pulumi.StringPtrOutput)
}

// The distance between two key frames. The value should be non-zero in the range `0.5` to `20` seconds, specified in ISO 8601 format. Note that this setting is ignored if `syncMode` is set to `Passthrough`, where the KeyFrameInterval value will follow the input source setting. Defaults to `PT2S`.
func (o TransformOutputCustomPresetCodecH265VideoPtrOutput) KeyFrameInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecH265Video) *string {
		if v == nil {
			return nil
		}
		return v.KeyFrameInterval
	}).(pulumi.StringPtrOutput)
}

// Specifies the label for the codec. The label can be used to control muxing behavior.
func (o TransformOutputCustomPresetCodecH265VideoPtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecH265Video) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

// One or more `layer` blocks as defined below.
func (o TransformOutputCustomPresetCodecH265VideoPtrOutput) Layers() TransformOutputCustomPresetCodecH265VideoLayerArrayOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecH265Video) []TransformOutputCustomPresetCodecH265VideoLayer {
		if v == nil {
			return nil
		}
		return v.Layers
	}).(TransformOutputCustomPresetCodecH265VideoLayerArrayOutput)
}

// Whether the encoder should insert key frames at scene changes. This flag should be set to true only when the encoder is being configured to produce a single output video. Default to `false`.
func (o TransformOutputCustomPresetCodecH265VideoPtrOutput) SceneChangeDetectionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecH265Video) *bool {
		if v == nil {
			return nil
		}
		return v.SceneChangeDetectionEnabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the resizing mode - how the input video will be resized to fit the desired output resolution(s). Possible values are `AutoFit`, `AutoSize` or `None`. Default to `AutoSize`.
func (o TransformOutputCustomPresetCodecH265VideoPtrOutput) StretchMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecH265Video) *string {
		if v == nil {
			return nil
		}
		return v.StretchMode
	}).(pulumi.StringPtrOutput)
}

// Specifies the synchronization mode for the video. Possible values are `Auto`, `Cfr`, `Passthrough` or `Vfr`. Default to `Auto`.
func (o TransformOutputCustomPresetCodecH265VideoPtrOutput) SyncMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecH265Video) *string {
		if v == nil {
			return nil
		}
		return v.SyncMode
	}).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetCodecH265VideoLayer struct {
	// Whether adaptive B-frames are used when encoding this layer. If not specified, the encoder will turn it on whenever the video profile permits its use. Default to `true`.
	AdaptiveBFrameEnabled *bool `pulumi:"adaptiveBFrameEnabled"`
	// The number of B-frames to use when encoding this layer. If not specified, the encoder chooses an appropriate number based on the video profile and level.
	BFrames *int `pulumi:"bFrames"`
	// The average bitrate in bits per second at which to encode the input video when generating this layer.
	Bitrate int `pulumi:"bitrate"`
	// Specifies the maximum amount of time that the encoder should buffer frames before encoding. The value should be in ISO 8601 format. The value should be in the range `0.1` to `100` seconds. Defaults to `PT5S`.
	BufferWindow *string `pulumi:"bufferWindow"`
	// The value of CRF to be used when encoding this layer. This setting takes effect when `rateControlMode` is set `CRF`. The range of CRF value is between `0` and `51`, where lower values would result in better quality, at the expense of higher file sizes. Higher values mean more compression, but at some point quality degradation will be noticed. Default to `28`.
	Crf *float64 `pulumi:"crf"`
	// The frame rate (in frames per second) at which to encode this layer. The value can be in the form of `M/N` where `M` and `N` are integers (For example, `30000/1001`), or in the form of a number (For example, `30`, or `29.97`). The encoder enforces constraints on allowed frame rates based on the profile and level. If it is not specified, the encoder will use the same frame rate as the input video.
	FrameRate *string `pulumi:"frameRate"`
	// The height of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example `50%` means the output video has half as many pixels in height as the input.
	Height *string `pulumi:"height"`
	// The alphanumeric label for this layer, which can be used in multiplexing different video and audio layers, or in naming the output file.
	Label *string `pulumi:"label"`
	// The H.264 levels. Currently, the resource support Level up to `6.2`. The value can be `auto`, or a number that matches the H.264 profile. If not specified, the default is `auto`, which lets the encoder choose the Level that is appropriate for this layer.
	Level *string `pulumi:"level"`
	// The maximum bitrate (in bits per second), at which the VBV buffer should be assumed to refill. If not specified, defaults to the same value as bitrate.
	MaxBitrate *int `pulumi:"maxBitrate"`
	// The H.264 profile. Possible values are `Auto`, `Main` and `Main10`. Default to `Auto`.
	Profile *string `pulumi:"profile"`
	// The number of reference frames to be used when encoding this layer. If not specified, the encoder determines an appropriate number based on the encoder complexity setting.
	ReferenceFrames *int `pulumi:"referenceFrames"`
	// The number of slices to be used when encoding this layer. If not specified, default is `1`, which means that encoder will use a single slice for each frame.
	Slices *int `pulumi:"slices"`
	// The width of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example `50%` means the output video has half as many pixels in width as the input.
	Width *string `pulumi:"width"`
}

// TransformOutputCustomPresetCodecH265VideoLayerInput is an input type that accepts TransformOutputCustomPresetCodecH265VideoLayerArgs and TransformOutputCustomPresetCodecH265VideoLayerOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetCodecH265VideoLayerInput` via:
//
//	TransformOutputCustomPresetCodecH265VideoLayerArgs{...}
type TransformOutputCustomPresetCodecH265VideoLayerInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetCodecH265VideoLayerOutput() TransformOutputCustomPresetCodecH265VideoLayerOutput
	ToTransformOutputCustomPresetCodecH265VideoLayerOutputWithContext(context.Context) TransformOutputCustomPresetCodecH265VideoLayerOutput
}

type TransformOutputCustomPresetCodecH265VideoLayerArgs struct {
	// Whether adaptive B-frames are used when encoding this layer. If not specified, the encoder will turn it on whenever the video profile permits its use. Default to `true`.
	AdaptiveBFrameEnabled pulumi.BoolPtrInput `pulumi:"adaptiveBFrameEnabled"`
	// The number of B-frames to use when encoding this layer. If not specified, the encoder chooses an appropriate number based on the video profile and level.
	BFrames pulumi.IntPtrInput `pulumi:"bFrames"`
	// The average bitrate in bits per second at which to encode the input video when generating this layer.
	Bitrate pulumi.IntInput `pulumi:"bitrate"`
	// Specifies the maximum amount of time that the encoder should buffer frames before encoding. The value should be in ISO 8601 format. The value should be in the range `0.1` to `100` seconds. Defaults to `PT5S`.
	BufferWindow pulumi.StringPtrInput `pulumi:"bufferWindow"`
	// The value of CRF to be used when encoding this layer. This setting takes effect when `rateControlMode` is set `CRF`. The range of CRF value is between `0` and `51`, where lower values would result in better quality, at the expense of higher file sizes. Higher values mean more compression, but at some point quality degradation will be noticed. Default to `28`.
	Crf pulumi.Float64PtrInput `pulumi:"crf"`
	// The frame rate (in frames per second) at which to encode this layer. The value can be in the form of `M/N` where `M` and `N` are integers (For example, `30000/1001`), or in the form of a number (For example, `30`, or `29.97`). The encoder enforces constraints on allowed frame rates based on the profile and level. If it is not specified, the encoder will use the same frame rate as the input video.
	FrameRate pulumi.StringPtrInput `pulumi:"frameRate"`
	// The height of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example `50%` means the output video has half as many pixels in height as the input.
	Height pulumi.StringPtrInput `pulumi:"height"`
	// The alphanumeric label for this layer, which can be used in multiplexing different video and audio layers, or in naming the output file.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// The H.264 levels. Currently, the resource support Level up to `6.2`. The value can be `auto`, or a number that matches the H.264 profile. If not specified, the default is `auto`, which lets the encoder choose the Level that is appropriate for this layer.
	Level pulumi.StringPtrInput `pulumi:"level"`
	// The maximum bitrate (in bits per second), at which the VBV buffer should be assumed to refill. If not specified, defaults to the same value as bitrate.
	MaxBitrate pulumi.IntPtrInput `pulumi:"maxBitrate"`
	// The H.264 profile. Possible values are `Auto`, `Main` and `Main10`. Default to `Auto`.
	Profile pulumi.StringPtrInput `pulumi:"profile"`
	// The number of reference frames to be used when encoding this layer. If not specified, the encoder determines an appropriate number based on the encoder complexity setting.
	ReferenceFrames pulumi.IntPtrInput `pulumi:"referenceFrames"`
	// The number of slices to be used when encoding this layer. If not specified, default is `1`, which means that encoder will use a single slice for each frame.
	Slices pulumi.IntPtrInput `pulumi:"slices"`
	// The width of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example `50%` means the output video has half as many pixels in width as the input.
	Width pulumi.StringPtrInput `pulumi:"width"`
}

func (TransformOutputCustomPresetCodecH265VideoLayerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetCodecH265VideoLayer)(nil)).Elem()
}

func (i TransformOutputCustomPresetCodecH265VideoLayerArgs) ToTransformOutputCustomPresetCodecH265VideoLayerOutput() TransformOutputCustomPresetCodecH265VideoLayerOutput {
	return i.ToTransformOutputCustomPresetCodecH265VideoLayerOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetCodecH265VideoLayerArgs) ToTransformOutputCustomPresetCodecH265VideoLayerOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecH265VideoLayerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetCodecH265VideoLayerOutput)
}

func (i TransformOutputCustomPresetCodecH265VideoLayerArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetCodecH265VideoLayer] {
	return pulumix.Output[TransformOutputCustomPresetCodecH265VideoLayer]{
		OutputState: i.ToTransformOutputCustomPresetCodecH265VideoLayerOutputWithContext(ctx).OutputState,
	}
}

// TransformOutputCustomPresetCodecH265VideoLayerArrayInput is an input type that accepts TransformOutputCustomPresetCodecH265VideoLayerArray and TransformOutputCustomPresetCodecH265VideoLayerArrayOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetCodecH265VideoLayerArrayInput` via:
//
//	TransformOutputCustomPresetCodecH265VideoLayerArray{ TransformOutputCustomPresetCodecH265VideoLayerArgs{...} }
type TransformOutputCustomPresetCodecH265VideoLayerArrayInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetCodecH265VideoLayerArrayOutput() TransformOutputCustomPresetCodecH265VideoLayerArrayOutput
	ToTransformOutputCustomPresetCodecH265VideoLayerArrayOutputWithContext(context.Context) TransformOutputCustomPresetCodecH265VideoLayerArrayOutput
}

type TransformOutputCustomPresetCodecH265VideoLayerArray []TransformOutputCustomPresetCodecH265VideoLayerInput

func (TransformOutputCustomPresetCodecH265VideoLayerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformOutputCustomPresetCodecH265VideoLayer)(nil)).Elem()
}

func (i TransformOutputCustomPresetCodecH265VideoLayerArray) ToTransformOutputCustomPresetCodecH265VideoLayerArrayOutput() TransformOutputCustomPresetCodecH265VideoLayerArrayOutput {
	return i.ToTransformOutputCustomPresetCodecH265VideoLayerArrayOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetCodecH265VideoLayerArray) ToTransformOutputCustomPresetCodecH265VideoLayerArrayOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecH265VideoLayerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetCodecH265VideoLayerArrayOutput)
}

func (i TransformOutputCustomPresetCodecH265VideoLayerArray) ToOutput(ctx context.Context) pulumix.Output[[]TransformOutputCustomPresetCodecH265VideoLayer] {
	return pulumix.Output[[]TransformOutputCustomPresetCodecH265VideoLayer]{
		OutputState: i.ToTransformOutputCustomPresetCodecH265VideoLayerArrayOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputCustomPresetCodecH265VideoLayerOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetCodecH265VideoLayerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetCodecH265VideoLayer)(nil)).Elem()
}

func (o TransformOutputCustomPresetCodecH265VideoLayerOutput) ToTransformOutputCustomPresetCodecH265VideoLayerOutput() TransformOutputCustomPresetCodecH265VideoLayerOutput {
	return o
}

func (o TransformOutputCustomPresetCodecH265VideoLayerOutput) ToTransformOutputCustomPresetCodecH265VideoLayerOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecH265VideoLayerOutput {
	return o
}

func (o TransformOutputCustomPresetCodecH265VideoLayerOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetCodecH265VideoLayer] {
	return pulumix.Output[TransformOutputCustomPresetCodecH265VideoLayer]{
		OutputState: o.OutputState,
	}
}

// Whether adaptive B-frames are used when encoding this layer. If not specified, the encoder will turn it on whenever the video profile permits its use. Default to `true`.
func (o TransformOutputCustomPresetCodecH265VideoLayerOutput) AdaptiveBFrameEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH265VideoLayer) *bool { return v.AdaptiveBFrameEnabled }).(pulumi.BoolPtrOutput)
}

// The number of B-frames to use when encoding this layer. If not specified, the encoder chooses an appropriate number based on the video profile and level.
func (o TransformOutputCustomPresetCodecH265VideoLayerOutput) BFrames() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH265VideoLayer) *int { return v.BFrames }).(pulumi.IntPtrOutput)
}

// The average bitrate in bits per second at which to encode the input video when generating this layer.
func (o TransformOutputCustomPresetCodecH265VideoLayerOutput) Bitrate() pulumi.IntOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH265VideoLayer) int { return v.Bitrate }).(pulumi.IntOutput)
}

// Specifies the maximum amount of time that the encoder should buffer frames before encoding. The value should be in ISO 8601 format. The value should be in the range `0.1` to `100` seconds. Defaults to `PT5S`.
func (o TransformOutputCustomPresetCodecH265VideoLayerOutput) BufferWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH265VideoLayer) *string { return v.BufferWindow }).(pulumi.StringPtrOutput)
}

// The value of CRF to be used when encoding this layer. This setting takes effect when `rateControlMode` is set `CRF`. The range of CRF value is between `0` and `51`, where lower values would result in better quality, at the expense of higher file sizes. Higher values mean more compression, but at some point quality degradation will be noticed. Default to `28`.
func (o TransformOutputCustomPresetCodecH265VideoLayerOutput) Crf() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH265VideoLayer) *float64 { return v.Crf }).(pulumi.Float64PtrOutput)
}

// The frame rate (in frames per second) at which to encode this layer. The value can be in the form of `M/N` where `M` and `N` are integers (For example, `30000/1001`), or in the form of a number (For example, `30`, or `29.97`). The encoder enforces constraints on allowed frame rates based on the profile and level. If it is not specified, the encoder will use the same frame rate as the input video.
func (o TransformOutputCustomPresetCodecH265VideoLayerOutput) FrameRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH265VideoLayer) *string { return v.FrameRate }).(pulumi.StringPtrOutput)
}

// The height of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example `50%` means the output video has half as many pixels in height as the input.
func (o TransformOutputCustomPresetCodecH265VideoLayerOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH265VideoLayer) *string { return v.Height }).(pulumi.StringPtrOutput)
}

// The alphanumeric label for this layer, which can be used in multiplexing different video and audio layers, or in naming the output file.
func (o TransformOutputCustomPresetCodecH265VideoLayerOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH265VideoLayer) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// The H.264 levels. Currently, the resource support Level up to `6.2`. The value can be `auto`, or a number that matches the H.264 profile. If not specified, the default is `auto`, which lets the encoder choose the Level that is appropriate for this layer.
func (o TransformOutputCustomPresetCodecH265VideoLayerOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH265VideoLayer) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// The maximum bitrate (in bits per second), at which the VBV buffer should be assumed to refill. If not specified, defaults to the same value as bitrate.
func (o TransformOutputCustomPresetCodecH265VideoLayerOutput) MaxBitrate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH265VideoLayer) *int { return v.MaxBitrate }).(pulumi.IntPtrOutput)
}

// The H.264 profile. Possible values are `Auto`, `Main` and `Main10`. Default to `Auto`.
func (o TransformOutputCustomPresetCodecH265VideoLayerOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH265VideoLayer) *string { return v.Profile }).(pulumi.StringPtrOutput)
}

// The number of reference frames to be used when encoding this layer. If not specified, the encoder determines an appropriate number based on the encoder complexity setting.
func (o TransformOutputCustomPresetCodecH265VideoLayerOutput) ReferenceFrames() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH265VideoLayer) *int { return v.ReferenceFrames }).(pulumi.IntPtrOutput)
}

// The number of slices to be used when encoding this layer. If not specified, default is `1`, which means that encoder will use a single slice for each frame.
func (o TransformOutputCustomPresetCodecH265VideoLayerOutput) Slices() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH265VideoLayer) *int { return v.Slices }).(pulumi.IntPtrOutput)
}

// The width of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example `50%` means the output video has half as many pixels in width as the input.
func (o TransformOutputCustomPresetCodecH265VideoLayerOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecH265VideoLayer) *string { return v.Width }).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetCodecH265VideoLayerArrayOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetCodecH265VideoLayerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformOutputCustomPresetCodecH265VideoLayer)(nil)).Elem()
}

func (o TransformOutputCustomPresetCodecH265VideoLayerArrayOutput) ToTransformOutputCustomPresetCodecH265VideoLayerArrayOutput() TransformOutputCustomPresetCodecH265VideoLayerArrayOutput {
	return o
}

func (o TransformOutputCustomPresetCodecH265VideoLayerArrayOutput) ToTransformOutputCustomPresetCodecH265VideoLayerArrayOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecH265VideoLayerArrayOutput {
	return o
}

func (o TransformOutputCustomPresetCodecH265VideoLayerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TransformOutputCustomPresetCodecH265VideoLayer] {
	return pulumix.Output[[]TransformOutputCustomPresetCodecH265VideoLayer]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputCustomPresetCodecH265VideoLayerArrayOutput) Index(i pulumi.IntInput) TransformOutputCustomPresetCodecH265VideoLayerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformOutputCustomPresetCodecH265VideoLayer {
		return vs[0].([]TransformOutputCustomPresetCodecH265VideoLayer)[vs[1].(int)]
	}).(TransformOutputCustomPresetCodecH265VideoLayerOutput)
}

type TransformOutputCustomPresetCodecJpgImage struct {
	// The distance between two key frames. The value should be non-zero in the range `0.5` to `20` seconds, specified in ISO 8601 format. Note that this setting is ignored if `syncMode` is set to `Passthrough`, where the KeyFrameInterval value will follow the input source setting. Defaults to `PT2S`.
	KeyFrameInterval *string `pulumi:"keyFrameInterval"`
	// Specifies the label for the codec. The label can be used to control muxing behavior.
	Label *string `pulumi:"label"`
	// One or more `layer` blocks as defined below.
	Layers []TransformOutputCustomPresetCodecJpgImageLayer `pulumi:"layers"`
	// The position relative to transform preset start time in the input video at which to stop generating thumbnails. The value can be in ISO 8601 format (For example, `PT5M30S` to stop at 5 minutes and 30 seconds from start time), or a frame count (For example, `300` to stop at the 300th frame from the frame at start time. If this value is `1`, it means only producing one thumbnail at start time), or a relative value to the stream duration (For example, `50%` to stop at half of stream duration from start time). The default value is `100%`, which means to stop at the end of the stream.
	Range *string `pulumi:"range"`
	// Sets the number of columns used in thumbnail sprite image. The number of rows are automatically calculated and a VTT file is generated with the coordinate mappings for each thumbnail in the sprite. Note: this value should be a positive integer and a proper value is recommended so that the output image resolution will not go beyond JPEG maximum pixel resolution limit `65535x65535`.
	SpriteColumn *int `pulumi:"spriteColumn"`
	// The position in the input video from where to start generating thumbnails. The value can be in ISO 8601 format (For example, `PT05S` to start at 5 seconds), or a frame count (For example, `10` to start at the 10th frame), or a relative value to stream duration (For example, `10%` to start at 10% of stream duration). Also supports a macro `{Best}`, which tells the encoder to select the best thumbnail from the first few seconds of the video and will only produce one thumbnail, no matter what other settings are for `step` and `range`.
	Start string `pulumi:"start"`
	// The intervals at which thumbnails are generated. The value can be in ISO 8601 format (For example, `PT05S` for one image every 5 seconds), or a frame count (For example, `30` for one image every 30 frames), or a relative value to stream duration (For example, `10%` for one image every 10% of stream duration). Note: Step value will affect the first generated thumbnail, which may not be exactly the one specified at transform preset start time. This is due to the encoder, which tries to select the best thumbnail between start time and Step position from start time as the first output. As the default value is `10%`, it means if stream has long duration, the first generated thumbnail might be far away from the one specified at start time. Try to select reasonable value for Step if the first thumbnail is expected close to start time, or set Range value at `1` if only one thumbnail is needed at start time.
	Step *string `pulumi:"step"`
	// The resizing mode, which indicates how the input video will be resized to fit the desired output resolution(s). Possible values are `AutoFit`, `AutoSize` or `None`. Default to `AutoSize`.
	StretchMode *string `pulumi:"stretchMode"`
	// Specifies the synchronization mode for the video. Possible values are `Auto`, `Cfr`, `Passthrough` or `Vfr`. Default to `Auto`.
	SyncMode *string `pulumi:"syncMode"`
}

// TransformOutputCustomPresetCodecJpgImageInput is an input type that accepts TransformOutputCustomPresetCodecJpgImageArgs and TransformOutputCustomPresetCodecJpgImageOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetCodecJpgImageInput` via:
//
//	TransformOutputCustomPresetCodecJpgImageArgs{...}
type TransformOutputCustomPresetCodecJpgImageInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetCodecJpgImageOutput() TransformOutputCustomPresetCodecJpgImageOutput
	ToTransformOutputCustomPresetCodecJpgImageOutputWithContext(context.Context) TransformOutputCustomPresetCodecJpgImageOutput
}

type TransformOutputCustomPresetCodecJpgImageArgs struct {
	// The distance between two key frames. The value should be non-zero in the range `0.5` to `20` seconds, specified in ISO 8601 format. Note that this setting is ignored if `syncMode` is set to `Passthrough`, where the KeyFrameInterval value will follow the input source setting. Defaults to `PT2S`.
	KeyFrameInterval pulumi.StringPtrInput `pulumi:"keyFrameInterval"`
	// Specifies the label for the codec. The label can be used to control muxing behavior.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// One or more `layer` blocks as defined below.
	Layers TransformOutputCustomPresetCodecJpgImageLayerArrayInput `pulumi:"layers"`
	// The position relative to transform preset start time in the input video at which to stop generating thumbnails. The value can be in ISO 8601 format (For example, `PT5M30S` to stop at 5 minutes and 30 seconds from start time), or a frame count (For example, `300` to stop at the 300th frame from the frame at start time. If this value is `1`, it means only producing one thumbnail at start time), or a relative value to the stream duration (For example, `50%` to stop at half of stream duration from start time). The default value is `100%`, which means to stop at the end of the stream.
	Range pulumi.StringPtrInput `pulumi:"range"`
	// Sets the number of columns used in thumbnail sprite image. The number of rows are automatically calculated and a VTT file is generated with the coordinate mappings for each thumbnail in the sprite. Note: this value should be a positive integer and a proper value is recommended so that the output image resolution will not go beyond JPEG maximum pixel resolution limit `65535x65535`.
	SpriteColumn pulumi.IntPtrInput `pulumi:"spriteColumn"`
	// The position in the input video from where to start generating thumbnails. The value can be in ISO 8601 format (For example, `PT05S` to start at 5 seconds), or a frame count (For example, `10` to start at the 10th frame), or a relative value to stream duration (For example, `10%` to start at 10% of stream duration). Also supports a macro `{Best}`, which tells the encoder to select the best thumbnail from the first few seconds of the video and will only produce one thumbnail, no matter what other settings are for `step` and `range`.
	Start pulumi.StringInput `pulumi:"start"`
	// The intervals at which thumbnails are generated. The value can be in ISO 8601 format (For example, `PT05S` for one image every 5 seconds), or a frame count (For example, `30` for one image every 30 frames), or a relative value to stream duration (For example, `10%` for one image every 10% of stream duration). Note: Step value will affect the first generated thumbnail, which may not be exactly the one specified at transform preset start time. This is due to the encoder, which tries to select the best thumbnail between start time and Step position from start time as the first output. As the default value is `10%`, it means if stream has long duration, the first generated thumbnail might be far away from the one specified at start time. Try to select reasonable value for Step if the first thumbnail is expected close to start time, or set Range value at `1` if only one thumbnail is needed at start time.
	Step pulumi.StringPtrInput `pulumi:"step"`
	// The resizing mode, which indicates how the input video will be resized to fit the desired output resolution(s). Possible values are `AutoFit`, `AutoSize` or `None`. Default to `AutoSize`.
	StretchMode pulumi.StringPtrInput `pulumi:"stretchMode"`
	// Specifies the synchronization mode for the video. Possible values are `Auto`, `Cfr`, `Passthrough` or `Vfr`. Default to `Auto`.
	SyncMode pulumi.StringPtrInput `pulumi:"syncMode"`
}

func (TransformOutputCustomPresetCodecJpgImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetCodecJpgImage)(nil)).Elem()
}

func (i TransformOutputCustomPresetCodecJpgImageArgs) ToTransformOutputCustomPresetCodecJpgImageOutput() TransformOutputCustomPresetCodecJpgImageOutput {
	return i.ToTransformOutputCustomPresetCodecJpgImageOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetCodecJpgImageArgs) ToTransformOutputCustomPresetCodecJpgImageOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecJpgImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetCodecJpgImageOutput)
}

func (i TransformOutputCustomPresetCodecJpgImageArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetCodecJpgImage] {
	return pulumix.Output[TransformOutputCustomPresetCodecJpgImage]{
		OutputState: i.ToTransformOutputCustomPresetCodecJpgImageOutputWithContext(ctx).OutputState,
	}
}

func (i TransformOutputCustomPresetCodecJpgImageArgs) ToTransformOutputCustomPresetCodecJpgImagePtrOutput() TransformOutputCustomPresetCodecJpgImagePtrOutput {
	return i.ToTransformOutputCustomPresetCodecJpgImagePtrOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetCodecJpgImageArgs) ToTransformOutputCustomPresetCodecJpgImagePtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecJpgImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetCodecJpgImageOutput).ToTransformOutputCustomPresetCodecJpgImagePtrOutputWithContext(ctx)
}

// TransformOutputCustomPresetCodecJpgImagePtrInput is an input type that accepts TransformOutputCustomPresetCodecJpgImageArgs, TransformOutputCustomPresetCodecJpgImagePtr and TransformOutputCustomPresetCodecJpgImagePtrOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetCodecJpgImagePtrInput` via:
//
//	        TransformOutputCustomPresetCodecJpgImageArgs{...}
//
//	or:
//
//	        nil
type TransformOutputCustomPresetCodecJpgImagePtrInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetCodecJpgImagePtrOutput() TransformOutputCustomPresetCodecJpgImagePtrOutput
	ToTransformOutputCustomPresetCodecJpgImagePtrOutputWithContext(context.Context) TransformOutputCustomPresetCodecJpgImagePtrOutput
}

type transformOutputCustomPresetCodecJpgImagePtrType TransformOutputCustomPresetCodecJpgImageArgs

func TransformOutputCustomPresetCodecJpgImagePtr(v *TransformOutputCustomPresetCodecJpgImageArgs) TransformOutputCustomPresetCodecJpgImagePtrInput {
	return (*transformOutputCustomPresetCodecJpgImagePtrType)(v)
}

func (*transformOutputCustomPresetCodecJpgImagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetCodecJpgImage)(nil)).Elem()
}

func (i *transformOutputCustomPresetCodecJpgImagePtrType) ToTransformOutputCustomPresetCodecJpgImagePtrOutput() TransformOutputCustomPresetCodecJpgImagePtrOutput {
	return i.ToTransformOutputCustomPresetCodecJpgImagePtrOutputWithContext(context.Background())
}

func (i *transformOutputCustomPresetCodecJpgImagePtrType) ToTransformOutputCustomPresetCodecJpgImagePtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecJpgImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetCodecJpgImagePtrOutput)
}

func (i *transformOutputCustomPresetCodecJpgImagePtrType) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetCodecJpgImage] {
	return pulumix.Output[*TransformOutputCustomPresetCodecJpgImage]{
		OutputState: i.ToTransformOutputCustomPresetCodecJpgImagePtrOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputCustomPresetCodecJpgImageOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetCodecJpgImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetCodecJpgImage)(nil)).Elem()
}

func (o TransformOutputCustomPresetCodecJpgImageOutput) ToTransformOutputCustomPresetCodecJpgImageOutput() TransformOutputCustomPresetCodecJpgImageOutput {
	return o
}

func (o TransformOutputCustomPresetCodecJpgImageOutput) ToTransformOutputCustomPresetCodecJpgImageOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecJpgImageOutput {
	return o
}

func (o TransformOutputCustomPresetCodecJpgImageOutput) ToTransformOutputCustomPresetCodecJpgImagePtrOutput() TransformOutputCustomPresetCodecJpgImagePtrOutput {
	return o.ToTransformOutputCustomPresetCodecJpgImagePtrOutputWithContext(context.Background())
}

func (o TransformOutputCustomPresetCodecJpgImageOutput) ToTransformOutputCustomPresetCodecJpgImagePtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecJpgImagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformOutputCustomPresetCodecJpgImage) *TransformOutputCustomPresetCodecJpgImage {
		return &v
	}).(TransformOutputCustomPresetCodecJpgImagePtrOutput)
}

func (o TransformOutputCustomPresetCodecJpgImageOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetCodecJpgImage] {
	return pulumix.Output[TransformOutputCustomPresetCodecJpgImage]{
		OutputState: o.OutputState,
	}
}

// The distance between two key frames. The value should be non-zero in the range `0.5` to `20` seconds, specified in ISO 8601 format. Note that this setting is ignored if `syncMode` is set to `Passthrough`, where the KeyFrameInterval value will follow the input source setting. Defaults to `PT2S`.
func (o TransformOutputCustomPresetCodecJpgImageOutput) KeyFrameInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecJpgImage) *string { return v.KeyFrameInterval }).(pulumi.StringPtrOutput)
}

// Specifies the label for the codec. The label can be used to control muxing behavior.
func (o TransformOutputCustomPresetCodecJpgImageOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecJpgImage) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// One or more `layer` blocks as defined below.
func (o TransformOutputCustomPresetCodecJpgImageOutput) Layers() TransformOutputCustomPresetCodecJpgImageLayerArrayOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecJpgImage) []TransformOutputCustomPresetCodecJpgImageLayer {
		return v.Layers
	}).(TransformOutputCustomPresetCodecJpgImageLayerArrayOutput)
}

// The position relative to transform preset start time in the input video at which to stop generating thumbnails. The value can be in ISO 8601 format (For example, `PT5M30S` to stop at 5 minutes and 30 seconds from start time), or a frame count (For example, `300` to stop at the 300th frame from the frame at start time. If this value is `1`, it means only producing one thumbnail at start time), or a relative value to the stream duration (For example, `50%` to stop at half of stream duration from start time). The default value is `100%`, which means to stop at the end of the stream.
func (o TransformOutputCustomPresetCodecJpgImageOutput) Range() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecJpgImage) *string { return v.Range }).(pulumi.StringPtrOutput)
}

// Sets the number of columns used in thumbnail sprite image. The number of rows are automatically calculated and a VTT file is generated with the coordinate mappings for each thumbnail in the sprite. Note: this value should be a positive integer and a proper value is recommended so that the output image resolution will not go beyond JPEG maximum pixel resolution limit `65535x65535`.
func (o TransformOutputCustomPresetCodecJpgImageOutput) SpriteColumn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecJpgImage) *int { return v.SpriteColumn }).(pulumi.IntPtrOutput)
}

// The position in the input video from where to start generating thumbnails. The value can be in ISO 8601 format (For example, `PT05S` to start at 5 seconds), or a frame count (For example, `10` to start at the 10th frame), or a relative value to stream duration (For example, `10%` to start at 10% of stream duration). Also supports a macro `{Best}`, which tells the encoder to select the best thumbnail from the first few seconds of the video and will only produce one thumbnail, no matter what other settings are for `step` and `range`.
func (o TransformOutputCustomPresetCodecJpgImageOutput) Start() pulumi.StringOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecJpgImage) string { return v.Start }).(pulumi.StringOutput)
}

// The intervals at which thumbnails are generated. The value can be in ISO 8601 format (For example, `PT05S` for one image every 5 seconds), or a frame count (For example, `30` for one image every 30 frames), or a relative value to stream duration (For example, `10%` for one image every 10% of stream duration). Note: Step value will affect the first generated thumbnail, which may not be exactly the one specified at transform preset start time. This is due to the encoder, which tries to select the best thumbnail between start time and Step position from start time as the first output. As the default value is `10%`, it means if stream has long duration, the first generated thumbnail might be far away from the one specified at start time. Try to select reasonable value for Step if the first thumbnail is expected close to start time, or set Range value at `1` if only one thumbnail is needed at start time.
func (o TransformOutputCustomPresetCodecJpgImageOutput) Step() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecJpgImage) *string { return v.Step }).(pulumi.StringPtrOutput)
}

// The resizing mode, which indicates how the input video will be resized to fit the desired output resolution(s). Possible values are `AutoFit`, `AutoSize` or `None`. Default to `AutoSize`.
func (o TransformOutputCustomPresetCodecJpgImageOutput) StretchMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecJpgImage) *string { return v.StretchMode }).(pulumi.StringPtrOutput)
}

// Specifies the synchronization mode for the video. Possible values are `Auto`, `Cfr`, `Passthrough` or `Vfr`. Default to `Auto`.
func (o TransformOutputCustomPresetCodecJpgImageOutput) SyncMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecJpgImage) *string { return v.SyncMode }).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetCodecJpgImagePtrOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetCodecJpgImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetCodecJpgImage)(nil)).Elem()
}

func (o TransformOutputCustomPresetCodecJpgImagePtrOutput) ToTransformOutputCustomPresetCodecJpgImagePtrOutput() TransformOutputCustomPresetCodecJpgImagePtrOutput {
	return o
}

func (o TransformOutputCustomPresetCodecJpgImagePtrOutput) ToTransformOutputCustomPresetCodecJpgImagePtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecJpgImagePtrOutput {
	return o
}

func (o TransformOutputCustomPresetCodecJpgImagePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetCodecJpgImage] {
	return pulumix.Output[*TransformOutputCustomPresetCodecJpgImage]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputCustomPresetCodecJpgImagePtrOutput) Elem() TransformOutputCustomPresetCodecJpgImageOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecJpgImage) TransformOutputCustomPresetCodecJpgImage {
		if v != nil {
			return *v
		}
		var ret TransformOutputCustomPresetCodecJpgImage
		return ret
	}).(TransformOutputCustomPresetCodecJpgImageOutput)
}

// The distance between two key frames. The value should be non-zero in the range `0.5` to `20` seconds, specified in ISO 8601 format. Note that this setting is ignored if `syncMode` is set to `Passthrough`, where the KeyFrameInterval value will follow the input source setting. Defaults to `PT2S`.
func (o TransformOutputCustomPresetCodecJpgImagePtrOutput) KeyFrameInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecJpgImage) *string {
		if v == nil {
			return nil
		}
		return v.KeyFrameInterval
	}).(pulumi.StringPtrOutput)
}

// Specifies the label for the codec. The label can be used to control muxing behavior.
func (o TransformOutputCustomPresetCodecJpgImagePtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecJpgImage) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

// One or more `layer` blocks as defined below.
func (o TransformOutputCustomPresetCodecJpgImagePtrOutput) Layers() TransformOutputCustomPresetCodecJpgImageLayerArrayOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecJpgImage) []TransformOutputCustomPresetCodecJpgImageLayer {
		if v == nil {
			return nil
		}
		return v.Layers
	}).(TransformOutputCustomPresetCodecJpgImageLayerArrayOutput)
}

// The position relative to transform preset start time in the input video at which to stop generating thumbnails. The value can be in ISO 8601 format (For example, `PT5M30S` to stop at 5 minutes and 30 seconds from start time), or a frame count (For example, `300` to stop at the 300th frame from the frame at start time. If this value is `1`, it means only producing one thumbnail at start time), or a relative value to the stream duration (For example, `50%` to stop at half of stream duration from start time). The default value is `100%`, which means to stop at the end of the stream.
func (o TransformOutputCustomPresetCodecJpgImagePtrOutput) Range() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecJpgImage) *string {
		if v == nil {
			return nil
		}
		return v.Range
	}).(pulumi.StringPtrOutput)
}

// Sets the number of columns used in thumbnail sprite image. The number of rows are automatically calculated and a VTT file is generated with the coordinate mappings for each thumbnail in the sprite. Note: this value should be a positive integer and a proper value is recommended so that the output image resolution will not go beyond JPEG maximum pixel resolution limit `65535x65535`.
func (o TransformOutputCustomPresetCodecJpgImagePtrOutput) SpriteColumn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecJpgImage) *int {
		if v == nil {
			return nil
		}
		return v.SpriteColumn
	}).(pulumi.IntPtrOutput)
}

// The position in the input video from where to start generating thumbnails. The value can be in ISO 8601 format (For example, `PT05S` to start at 5 seconds), or a frame count (For example, `10` to start at the 10th frame), or a relative value to stream duration (For example, `10%` to start at 10% of stream duration). Also supports a macro `{Best}`, which tells the encoder to select the best thumbnail from the first few seconds of the video and will only produce one thumbnail, no matter what other settings are for `step` and `range`.
func (o TransformOutputCustomPresetCodecJpgImagePtrOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecJpgImage) *string {
		if v == nil {
			return nil
		}
		return &v.Start
	}).(pulumi.StringPtrOutput)
}

// The intervals at which thumbnails are generated. The value can be in ISO 8601 format (For example, `PT05S` for one image every 5 seconds), or a frame count (For example, `30` for one image every 30 frames), or a relative value to stream duration (For example, `10%` for one image every 10% of stream duration). Note: Step value will affect the first generated thumbnail, which may not be exactly the one specified at transform preset start time. This is due to the encoder, which tries to select the best thumbnail between start time and Step position from start time as the first output. As the default value is `10%`, it means if stream has long duration, the first generated thumbnail might be far away from the one specified at start time. Try to select reasonable value for Step if the first thumbnail is expected close to start time, or set Range value at `1` if only one thumbnail is needed at start time.
func (o TransformOutputCustomPresetCodecJpgImagePtrOutput) Step() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecJpgImage) *string {
		if v == nil {
			return nil
		}
		return v.Step
	}).(pulumi.StringPtrOutput)
}

// The resizing mode, which indicates how the input video will be resized to fit the desired output resolution(s). Possible values are `AutoFit`, `AutoSize` or `None`. Default to `AutoSize`.
func (o TransformOutputCustomPresetCodecJpgImagePtrOutput) StretchMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecJpgImage) *string {
		if v == nil {
			return nil
		}
		return v.StretchMode
	}).(pulumi.StringPtrOutput)
}

// Specifies the synchronization mode for the video. Possible values are `Auto`, `Cfr`, `Passthrough` or `Vfr`. Default to `Auto`.
func (o TransformOutputCustomPresetCodecJpgImagePtrOutput) SyncMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecJpgImage) *string {
		if v == nil {
			return nil
		}
		return v.SyncMode
	}).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetCodecJpgImageLayer struct {
	// The height of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example `50%` means the output video has half as many pixels in height as the input.
	Height *string `pulumi:"height"`
	// The alphanumeric label for this layer, which can be used in multiplexing different video and audio layers, or in naming the output file.
	Label *string `pulumi:"label"`
	// The compression quality of the JPEG output. Range is from `0` to `100` and the default is `70`.
	Quality *int `pulumi:"quality"`
	// The width of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example `50%` means the output video has half as many pixels in width as the input.
	Width *string `pulumi:"width"`
}

// TransformOutputCustomPresetCodecJpgImageLayerInput is an input type that accepts TransformOutputCustomPresetCodecJpgImageLayerArgs and TransformOutputCustomPresetCodecJpgImageLayerOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetCodecJpgImageLayerInput` via:
//
//	TransformOutputCustomPresetCodecJpgImageLayerArgs{...}
type TransformOutputCustomPresetCodecJpgImageLayerInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetCodecJpgImageLayerOutput() TransformOutputCustomPresetCodecJpgImageLayerOutput
	ToTransformOutputCustomPresetCodecJpgImageLayerOutputWithContext(context.Context) TransformOutputCustomPresetCodecJpgImageLayerOutput
}

type TransformOutputCustomPresetCodecJpgImageLayerArgs struct {
	// The height of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example `50%` means the output video has half as many pixels in height as the input.
	Height pulumi.StringPtrInput `pulumi:"height"`
	// The alphanumeric label for this layer, which can be used in multiplexing different video and audio layers, or in naming the output file.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// The compression quality of the JPEG output. Range is from `0` to `100` and the default is `70`.
	Quality pulumi.IntPtrInput `pulumi:"quality"`
	// The width of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example `50%` means the output video has half as many pixels in width as the input.
	Width pulumi.StringPtrInput `pulumi:"width"`
}

func (TransformOutputCustomPresetCodecJpgImageLayerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetCodecJpgImageLayer)(nil)).Elem()
}

func (i TransformOutputCustomPresetCodecJpgImageLayerArgs) ToTransformOutputCustomPresetCodecJpgImageLayerOutput() TransformOutputCustomPresetCodecJpgImageLayerOutput {
	return i.ToTransformOutputCustomPresetCodecJpgImageLayerOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetCodecJpgImageLayerArgs) ToTransformOutputCustomPresetCodecJpgImageLayerOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecJpgImageLayerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetCodecJpgImageLayerOutput)
}

func (i TransformOutputCustomPresetCodecJpgImageLayerArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetCodecJpgImageLayer] {
	return pulumix.Output[TransformOutputCustomPresetCodecJpgImageLayer]{
		OutputState: i.ToTransformOutputCustomPresetCodecJpgImageLayerOutputWithContext(ctx).OutputState,
	}
}

// TransformOutputCustomPresetCodecJpgImageLayerArrayInput is an input type that accepts TransformOutputCustomPresetCodecJpgImageLayerArray and TransformOutputCustomPresetCodecJpgImageLayerArrayOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetCodecJpgImageLayerArrayInput` via:
//
//	TransformOutputCustomPresetCodecJpgImageLayerArray{ TransformOutputCustomPresetCodecJpgImageLayerArgs{...} }
type TransformOutputCustomPresetCodecJpgImageLayerArrayInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetCodecJpgImageLayerArrayOutput() TransformOutputCustomPresetCodecJpgImageLayerArrayOutput
	ToTransformOutputCustomPresetCodecJpgImageLayerArrayOutputWithContext(context.Context) TransformOutputCustomPresetCodecJpgImageLayerArrayOutput
}

type TransformOutputCustomPresetCodecJpgImageLayerArray []TransformOutputCustomPresetCodecJpgImageLayerInput

func (TransformOutputCustomPresetCodecJpgImageLayerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformOutputCustomPresetCodecJpgImageLayer)(nil)).Elem()
}

func (i TransformOutputCustomPresetCodecJpgImageLayerArray) ToTransformOutputCustomPresetCodecJpgImageLayerArrayOutput() TransformOutputCustomPresetCodecJpgImageLayerArrayOutput {
	return i.ToTransformOutputCustomPresetCodecJpgImageLayerArrayOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetCodecJpgImageLayerArray) ToTransformOutputCustomPresetCodecJpgImageLayerArrayOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecJpgImageLayerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetCodecJpgImageLayerArrayOutput)
}

func (i TransformOutputCustomPresetCodecJpgImageLayerArray) ToOutput(ctx context.Context) pulumix.Output[[]TransformOutputCustomPresetCodecJpgImageLayer] {
	return pulumix.Output[[]TransformOutputCustomPresetCodecJpgImageLayer]{
		OutputState: i.ToTransformOutputCustomPresetCodecJpgImageLayerArrayOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputCustomPresetCodecJpgImageLayerOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetCodecJpgImageLayerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetCodecJpgImageLayer)(nil)).Elem()
}

func (o TransformOutputCustomPresetCodecJpgImageLayerOutput) ToTransformOutputCustomPresetCodecJpgImageLayerOutput() TransformOutputCustomPresetCodecJpgImageLayerOutput {
	return o
}

func (o TransformOutputCustomPresetCodecJpgImageLayerOutput) ToTransformOutputCustomPresetCodecJpgImageLayerOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecJpgImageLayerOutput {
	return o
}

func (o TransformOutputCustomPresetCodecJpgImageLayerOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetCodecJpgImageLayer] {
	return pulumix.Output[TransformOutputCustomPresetCodecJpgImageLayer]{
		OutputState: o.OutputState,
	}
}

// The height of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example `50%` means the output video has half as many pixels in height as the input.
func (o TransformOutputCustomPresetCodecJpgImageLayerOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecJpgImageLayer) *string { return v.Height }).(pulumi.StringPtrOutput)
}

// The alphanumeric label for this layer, which can be used in multiplexing different video and audio layers, or in naming the output file.
func (o TransformOutputCustomPresetCodecJpgImageLayerOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecJpgImageLayer) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// The compression quality of the JPEG output. Range is from `0` to `100` and the default is `70`.
func (o TransformOutputCustomPresetCodecJpgImageLayerOutput) Quality() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecJpgImageLayer) *int { return v.Quality }).(pulumi.IntPtrOutput)
}

// The width of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example `50%` means the output video has half as many pixels in width as the input.
func (o TransformOutputCustomPresetCodecJpgImageLayerOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecJpgImageLayer) *string { return v.Width }).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetCodecJpgImageLayerArrayOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetCodecJpgImageLayerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformOutputCustomPresetCodecJpgImageLayer)(nil)).Elem()
}

func (o TransformOutputCustomPresetCodecJpgImageLayerArrayOutput) ToTransformOutputCustomPresetCodecJpgImageLayerArrayOutput() TransformOutputCustomPresetCodecJpgImageLayerArrayOutput {
	return o
}

func (o TransformOutputCustomPresetCodecJpgImageLayerArrayOutput) ToTransformOutputCustomPresetCodecJpgImageLayerArrayOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecJpgImageLayerArrayOutput {
	return o
}

func (o TransformOutputCustomPresetCodecJpgImageLayerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TransformOutputCustomPresetCodecJpgImageLayer] {
	return pulumix.Output[[]TransformOutputCustomPresetCodecJpgImageLayer]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputCustomPresetCodecJpgImageLayerArrayOutput) Index(i pulumi.IntInput) TransformOutputCustomPresetCodecJpgImageLayerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformOutputCustomPresetCodecJpgImageLayer {
		return vs[0].([]TransformOutputCustomPresetCodecJpgImageLayer)[vs[1].(int)]
	}).(TransformOutputCustomPresetCodecJpgImageLayerOutput)
}

type TransformOutputCustomPresetCodecPngImage struct {
	// The distance between two key frames. The value should be non-zero in the range `0.5` to `20` seconds, specified in ISO 8601 format. Note that this setting is ignored if `syncMode` is set to `Passthrough`, where the KeyFrameInterval value will follow the input source setting. Defaults to `PT2S`.
	KeyFrameInterval *string `pulumi:"keyFrameInterval"`
	// Specifies the label for the codec. The label can be used to control muxing behavior.
	Label *string `pulumi:"label"`
	// One or more `layer` blocks as defined below.
	Layers []TransformOutputCustomPresetCodecPngImageLayer `pulumi:"layers"`
	// The position relative to transform preset start time in the input video at which to stop generating thumbnails. The value can be in ISO 8601 format (For example, `PT5M30S` to stop at `5` minutes and `30` seconds from start time), or a frame count (For example, `300` to stop at the 300th frame from the frame at start time. If this value is `1`, it means only producing one thumbnail at start time), or a relative value to the stream duration (For example, `50%` to stop at half of stream duration from start time). The default value is `100%`, which means to stop at the end of the stream.
	Range *string `pulumi:"range"`
	// The position in the input video from where to start generating thumbnails. The value can be in ISO 8601 format (For example, `PT05S` to start at 5 seconds), or a frame count (For example, `10` to start at the 10th frame), or a relative value to stream duration (For example, `10%` to start at 10% of stream duration). Also supports a macro `{Best}`, which tells the encoder to select the best thumbnail from the first few seconds of the video and will only produce one thumbnail, no matter what other settings are for `step` and `range`.
	Start string `pulumi:"start"`
	// The intervals at which thumbnails are generated. The value can be in ISO 8601 format (For example, `PT05S` for one image every 5 seconds), or a frame count (For example, `30` for one image every 30 frames), or a relative value to stream duration (For example, `10%` for one image every 10% of stream duration). Note: Step value will affect the first generated thumbnail, which may not be exactly the one specified at transform preset start time. This is due to the encoder, which tries to select the best thumbnail between start time and Step position from start time as the first output. As the default value is `10%`, it means if stream has long duration, the first generated thumbnail might be far away from the one specified at start time. Try to select reasonable value for Step if the first thumbnail is expected close to start time, or set Range value at `1` if only one thumbnail is needed at start time.
	Step *string `pulumi:"step"`
	// The resizing mode, which indicates how the input video will be resized to fit the desired output resolution(s). Possible values are `AutoFit`, `AutoSize` or `None`. Default to `AutoSize`.
	StretchMode *string `pulumi:"stretchMode"`
	// Specifies the synchronization mode for the video. Possible values are `Auto`, `Cfr`, `Passthrough` or `Vfr`. Default to `Auto`.
	SyncMode *string `pulumi:"syncMode"`
}

// TransformOutputCustomPresetCodecPngImageInput is an input type that accepts TransformOutputCustomPresetCodecPngImageArgs and TransformOutputCustomPresetCodecPngImageOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetCodecPngImageInput` via:
//
//	TransformOutputCustomPresetCodecPngImageArgs{...}
type TransformOutputCustomPresetCodecPngImageInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetCodecPngImageOutput() TransformOutputCustomPresetCodecPngImageOutput
	ToTransformOutputCustomPresetCodecPngImageOutputWithContext(context.Context) TransformOutputCustomPresetCodecPngImageOutput
}

type TransformOutputCustomPresetCodecPngImageArgs struct {
	// The distance between two key frames. The value should be non-zero in the range `0.5` to `20` seconds, specified in ISO 8601 format. Note that this setting is ignored if `syncMode` is set to `Passthrough`, where the KeyFrameInterval value will follow the input source setting. Defaults to `PT2S`.
	KeyFrameInterval pulumi.StringPtrInput `pulumi:"keyFrameInterval"`
	// Specifies the label for the codec. The label can be used to control muxing behavior.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// One or more `layer` blocks as defined below.
	Layers TransformOutputCustomPresetCodecPngImageLayerArrayInput `pulumi:"layers"`
	// The position relative to transform preset start time in the input video at which to stop generating thumbnails. The value can be in ISO 8601 format (For example, `PT5M30S` to stop at `5` minutes and `30` seconds from start time), or a frame count (For example, `300` to stop at the 300th frame from the frame at start time. If this value is `1`, it means only producing one thumbnail at start time), or a relative value to the stream duration (For example, `50%` to stop at half of stream duration from start time). The default value is `100%`, which means to stop at the end of the stream.
	Range pulumi.StringPtrInput `pulumi:"range"`
	// The position in the input video from where to start generating thumbnails. The value can be in ISO 8601 format (For example, `PT05S` to start at 5 seconds), or a frame count (For example, `10` to start at the 10th frame), or a relative value to stream duration (For example, `10%` to start at 10% of stream duration). Also supports a macro `{Best}`, which tells the encoder to select the best thumbnail from the first few seconds of the video and will only produce one thumbnail, no matter what other settings are for `step` and `range`.
	Start pulumi.StringInput `pulumi:"start"`
	// The intervals at which thumbnails are generated. The value can be in ISO 8601 format (For example, `PT05S` for one image every 5 seconds), or a frame count (For example, `30` for one image every 30 frames), or a relative value to stream duration (For example, `10%` for one image every 10% of stream duration). Note: Step value will affect the first generated thumbnail, which may not be exactly the one specified at transform preset start time. This is due to the encoder, which tries to select the best thumbnail between start time and Step position from start time as the first output. As the default value is `10%`, it means if stream has long duration, the first generated thumbnail might be far away from the one specified at start time. Try to select reasonable value for Step if the first thumbnail is expected close to start time, or set Range value at `1` if only one thumbnail is needed at start time.
	Step pulumi.StringPtrInput `pulumi:"step"`
	// The resizing mode, which indicates how the input video will be resized to fit the desired output resolution(s). Possible values are `AutoFit`, `AutoSize` or `None`. Default to `AutoSize`.
	StretchMode pulumi.StringPtrInput `pulumi:"stretchMode"`
	// Specifies the synchronization mode for the video. Possible values are `Auto`, `Cfr`, `Passthrough` or `Vfr`. Default to `Auto`.
	SyncMode pulumi.StringPtrInput `pulumi:"syncMode"`
}

func (TransformOutputCustomPresetCodecPngImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetCodecPngImage)(nil)).Elem()
}

func (i TransformOutputCustomPresetCodecPngImageArgs) ToTransformOutputCustomPresetCodecPngImageOutput() TransformOutputCustomPresetCodecPngImageOutput {
	return i.ToTransformOutputCustomPresetCodecPngImageOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetCodecPngImageArgs) ToTransformOutputCustomPresetCodecPngImageOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecPngImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetCodecPngImageOutput)
}

func (i TransformOutputCustomPresetCodecPngImageArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetCodecPngImage] {
	return pulumix.Output[TransformOutputCustomPresetCodecPngImage]{
		OutputState: i.ToTransformOutputCustomPresetCodecPngImageOutputWithContext(ctx).OutputState,
	}
}

func (i TransformOutputCustomPresetCodecPngImageArgs) ToTransformOutputCustomPresetCodecPngImagePtrOutput() TransformOutputCustomPresetCodecPngImagePtrOutput {
	return i.ToTransformOutputCustomPresetCodecPngImagePtrOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetCodecPngImageArgs) ToTransformOutputCustomPresetCodecPngImagePtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecPngImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetCodecPngImageOutput).ToTransformOutputCustomPresetCodecPngImagePtrOutputWithContext(ctx)
}

// TransformOutputCustomPresetCodecPngImagePtrInput is an input type that accepts TransformOutputCustomPresetCodecPngImageArgs, TransformOutputCustomPresetCodecPngImagePtr and TransformOutputCustomPresetCodecPngImagePtrOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetCodecPngImagePtrInput` via:
//
//	        TransformOutputCustomPresetCodecPngImageArgs{...}
//
//	or:
//
//	        nil
type TransformOutputCustomPresetCodecPngImagePtrInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetCodecPngImagePtrOutput() TransformOutputCustomPresetCodecPngImagePtrOutput
	ToTransformOutputCustomPresetCodecPngImagePtrOutputWithContext(context.Context) TransformOutputCustomPresetCodecPngImagePtrOutput
}

type transformOutputCustomPresetCodecPngImagePtrType TransformOutputCustomPresetCodecPngImageArgs

func TransformOutputCustomPresetCodecPngImagePtr(v *TransformOutputCustomPresetCodecPngImageArgs) TransformOutputCustomPresetCodecPngImagePtrInput {
	return (*transformOutputCustomPresetCodecPngImagePtrType)(v)
}

func (*transformOutputCustomPresetCodecPngImagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetCodecPngImage)(nil)).Elem()
}

func (i *transformOutputCustomPresetCodecPngImagePtrType) ToTransformOutputCustomPresetCodecPngImagePtrOutput() TransformOutputCustomPresetCodecPngImagePtrOutput {
	return i.ToTransformOutputCustomPresetCodecPngImagePtrOutputWithContext(context.Background())
}

func (i *transformOutputCustomPresetCodecPngImagePtrType) ToTransformOutputCustomPresetCodecPngImagePtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecPngImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetCodecPngImagePtrOutput)
}

func (i *transformOutputCustomPresetCodecPngImagePtrType) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetCodecPngImage] {
	return pulumix.Output[*TransformOutputCustomPresetCodecPngImage]{
		OutputState: i.ToTransformOutputCustomPresetCodecPngImagePtrOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputCustomPresetCodecPngImageOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetCodecPngImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetCodecPngImage)(nil)).Elem()
}

func (o TransformOutputCustomPresetCodecPngImageOutput) ToTransformOutputCustomPresetCodecPngImageOutput() TransformOutputCustomPresetCodecPngImageOutput {
	return o
}

func (o TransformOutputCustomPresetCodecPngImageOutput) ToTransformOutputCustomPresetCodecPngImageOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecPngImageOutput {
	return o
}

func (o TransformOutputCustomPresetCodecPngImageOutput) ToTransformOutputCustomPresetCodecPngImagePtrOutput() TransformOutputCustomPresetCodecPngImagePtrOutput {
	return o.ToTransformOutputCustomPresetCodecPngImagePtrOutputWithContext(context.Background())
}

func (o TransformOutputCustomPresetCodecPngImageOutput) ToTransformOutputCustomPresetCodecPngImagePtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecPngImagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformOutputCustomPresetCodecPngImage) *TransformOutputCustomPresetCodecPngImage {
		return &v
	}).(TransformOutputCustomPresetCodecPngImagePtrOutput)
}

func (o TransformOutputCustomPresetCodecPngImageOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetCodecPngImage] {
	return pulumix.Output[TransformOutputCustomPresetCodecPngImage]{
		OutputState: o.OutputState,
	}
}

// The distance between two key frames. The value should be non-zero in the range `0.5` to `20` seconds, specified in ISO 8601 format. Note that this setting is ignored if `syncMode` is set to `Passthrough`, where the KeyFrameInterval value will follow the input source setting. Defaults to `PT2S`.
func (o TransformOutputCustomPresetCodecPngImageOutput) KeyFrameInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecPngImage) *string { return v.KeyFrameInterval }).(pulumi.StringPtrOutput)
}

// Specifies the label for the codec. The label can be used to control muxing behavior.
func (o TransformOutputCustomPresetCodecPngImageOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecPngImage) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// One or more `layer` blocks as defined below.
func (o TransformOutputCustomPresetCodecPngImageOutput) Layers() TransformOutputCustomPresetCodecPngImageLayerArrayOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecPngImage) []TransformOutputCustomPresetCodecPngImageLayer {
		return v.Layers
	}).(TransformOutputCustomPresetCodecPngImageLayerArrayOutput)
}

// The position relative to transform preset start time in the input video at which to stop generating thumbnails. The value can be in ISO 8601 format (For example, `PT5M30S` to stop at `5` minutes and `30` seconds from start time), or a frame count (For example, `300` to stop at the 300th frame from the frame at start time. If this value is `1`, it means only producing one thumbnail at start time), or a relative value to the stream duration (For example, `50%` to stop at half of stream duration from start time). The default value is `100%`, which means to stop at the end of the stream.
func (o TransformOutputCustomPresetCodecPngImageOutput) Range() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecPngImage) *string { return v.Range }).(pulumi.StringPtrOutput)
}

// The position in the input video from where to start generating thumbnails. The value can be in ISO 8601 format (For example, `PT05S` to start at 5 seconds), or a frame count (For example, `10` to start at the 10th frame), or a relative value to stream duration (For example, `10%` to start at 10% of stream duration). Also supports a macro `{Best}`, which tells the encoder to select the best thumbnail from the first few seconds of the video and will only produce one thumbnail, no matter what other settings are for `step` and `range`.
func (o TransformOutputCustomPresetCodecPngImageOutput) Start() pulumi.StringOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecPngImage) string { return v.Start }).(pulumi.StringOutput)
}

// The intervals at which thumbnails are generated. The value can be in ISO 8601 format (For example, `PT05S` for one image every 5 seconds), or a frame count (For example, `30` for one image every 30 frames), or a relative value to stream duration (For example, `10%` for one image every 10% of stream duration). Note: Step value will affect the first generated thumbnail, which may not be exactly the one specified at transform preset start time. This is due to the encoder, which tries to select the best thumbnail between start time and Step position from start time as the first output. As the default value is `10%`, it means if stream has long duration, the first generated thumbnail might be far away from the one specified at start time. Try to select reasonable value for Step if the first thumbnail is expected close to start time, or set Range value at `1` if only one thumbnail is needed at start time.
func (o TransformOutputCustomPresetCodecPngImageOutput) Step() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecPngImage) *string { return v.Step }).(pulumi.StringPtrOutput)
}

// The resizing mode, which indicates how the input video will be resized to fit the desired output resolution(s). Possible values are `AutoFit`, `AutoSize` or `None`. Default to `AutoSize`.
func (o TransformOutputCustomPresetCodecPngImageOutput) StretchMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecPngImage) *string { return v.StretchMode }).(pulumi.StringPtrOutput)
}

// Specifies the synchronization mode for the video. Possible values are `Auto`, `Cfr`, `Passthrough` or `Vfr`. Default to `Auto`.
func (o TransformOutputCustomPresetCodecPngImageOutput) SyncMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecPngImage) *string { return v.SyncMode }).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetCodecPngImagePtrOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetCodecPngImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetCodecPngImage)(nil)).Elem()
}

func (o TransformOutputCustomPresetCodecPngImagePtrOutput) ToTransformOutputCustomPresetCodecPngImagePtrOutput() TransformOutputCustomPresetCodecPngImagePtrOutput {
	return o
}

func (o TransformOutputCustomPresetCodecPngImagePtrOutput) ToTransformOutputCustomPresetCodecPngImagePtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecPngImagePtrOutput {
	return o
}

func (o TransformOutputCustomPresetCodecPngImagePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetCodecPngImage] {
	return pulumix.Output[*TransformOutputCustomPresetCodecPngImage]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputCustomPresetCodecPngImagePtrOutput) Elem() TransformOutputCustomPresetCodecPngImageOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecPngImage) TransformOutputCustomPresetCodecPngImage {
		if v != nil {
			return *v
		}
		var ret TransformOutputCustomPresetCodecPngImage
		return ret
	}).(TransformOutputCustomPresetCodecPngImageOutput)
}

// The distance between two key frames. The value should be non-zero in the range `0.5` to `20` seconds, specified in ISO 8601 format. Note that this setting is ignored if `syncMode` is set to `Passthrough`, where the KeyFrameInterval value will follow the input source setting. Defaults to `PT2S`.
func (o TransformOutputCustomPresetCodecPngImagePtrOutput) KeyFrameInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecPngImage) *string {
		if v == nil {
			return nil
		}
		return v.KeyFrameInterval
	}).(pulumi.StringPtrOutput)
}

// Specifies the label for the codec. The label can be used to control muxing behavior.
func (o TransformOutputCustomPresetCodecPngImagePtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecPngImage) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

// One or more `layer` blocks as defined below.
func (o TransformOutputCustomPresetCodecPngImagePtrOutput) Layers() TransformOutputCustomPresetCodecPngImageLayerArrayOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecPngImage) []TransformOutputCustomPresetCodecPngImageLayer {
		if v == nil {
			return nil
		}
		return v.Layers
	}).(TransformOutputCustomPresetCodecPngImageLayerArrayOutput)
}

// The position relative to transform preset start time in the input video at which to stop generating thumbnails. The value can be in ISO 8601 format (For example, `PT5M30S` to stop at `5` minutes and `30` seconds from start time), or a frame count (For example, `300` to stop at the 300th frame from the frame at start time. If this value is `1`, it means only producing one thumbnail at start time), or a relative value to the stream duration (For example, `50%` to stop at half of stream duration from start time). The default value is `100%`, which means to stop at the end of the stream.
func (o TransformOutputCustomPresetCodecPngImagePtrOutput) Range() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecPngImage) *string {
		if v == nil {
			return nil
		}
		return v.Range
	}).(pulumi.StringPtrOutput)
}

// The position in the input video from where to start generating thumbnails. The value can be in ISO 8601 format (For example, `PT05S` to start at 5 seconds), or a frame count (For example, `10` to start at the 10th frame), or a relative value to stream duration (For example, `10%` to start at 10% of stream duration). Also supports a macro `{Best}`, which tells the encoder to select the best thumbnail from the first few seconds of the video and will only produce one thumbnail, no matter what other settings are for `step` and `range`.
func (o TransformOutputCustomPresetCodecPngImagePtrOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecPngImage) *string {
		if v == nil {
			return nil
		}
		return &v.Start
	}).(pulumi.StringPtrOutput)
}

// The intervals at which thumbnails are generated. The value can be in ISO 8601 format (For example, `PT05S` for one image every 5 seconds), or a frame count (For example, `30` for one image every 30 frames), or a relative value to stream duration (For example, `10%` for one image every 10% of stream duration). Note: Step value will affect the first generated thumbnail, which may not be exactly the one specified at transform preset start time. This is due to the encoder, which tries to select the best thumbnail between start time and Step position from start time as the first output. As the default value is `10%`, it means if stream has long duration, the first generated thumbnail might be far away from the one specified at start time. Try to select reasonable value for Step if the first thumbnail is expected close to start time, or set Range value at `1` if only one thumbnail is needed at start time.
func (o TransformOutputCustomPresetCodecPngImagePtrOutput) Step() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecPngImage) *string {
		if v == nil {
			return nil
		}
		return v.Step
	}).(pulumi.StringPtrOutput)
}

// The resizing mode, which indicates how the input video will be resized to fit the desired output resolution(s). Possible values are `AutoFit`, `AutoSize` or `None`. Default to `AutoSize`.
func (o TransformOutputCustomPresetCodecPngImagePtrOutput) StretchMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecPngImage) *string {
		if v == nil {
			return nil
		}
		return v.StretchMode
	}).(pulumi.StringPtrOutput)
}

// Specifies the synchronization mode for the video. Possible values are `Auto`, `Cfr`, `Passthrough` or `Vfr`. Default to `Auto`.
func (o TransformOutputCustomPresetCodecPngImagePtrOutput) SyncMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetCodecPngImage) *string {
		if v == nil {
			return nil
		}
		return v.SyncMode
	}).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetCodecPngImageLayer struct {
	// The height of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example `50%` means the output video has half as many pixels in height as the input.
	Height *string `pulumi:"height"`
	// The alphanumeric label for this layer, which can be used in multiplexing different video and audio layers, or in naming the output file.
	Label *string `pulumi:"label"`
	// The width of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example `50%` means the output video has half as many pixels in width as the input.
	Width *string `pulumi:"width"`
}

// TransformOutputCustomPresetCodecPngImageLayerInput is an input type that accepts TransformOutputCustomPresetCodecPngImageLayerArgs and TransformOutputCustomPresetCodecPngImageLayerOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetCodecPngImageLayerInput` via:
//
//	TransformOutputCustomPresetCodecPngImageLayerArgs{...}
type TransformOutputCustomPresetCodecPngImageLayerInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetCodecPngImageLayerOutput() TransformOutputCustomPresetCodecPngImageLayerOutput
	ToTransformOutputCustomPresetCodecPngImageLayerOutputWithContext(context.Context) TransformOutputCustomPresetCodecPngImageLayerOutput
}

type TransformOutputCustomPresetCodecPngImageLayerArgs struct {
	// The height of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example `50%` means the output video has half as many pixels in height as the input.
	Height pulumi.StringPtrInput `pulumi:"height"`
	// The alphanumeric label for this layer, which can be used in multiplexing different video and audio layers, or in naming the output file.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// The width of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example `50%` means the output video has half as many pixels in width as the input.
	Width pulumi.StringPtrInput `pulumi:"width"`
}

func (TransformOutputCustomPresetCodecPngImageLayerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetCodecPngImageLayer)(nil)).Elem()
}

func (i TransformOutputCustomPresetCodecPngImageLayerArgs) ToTransformOutputCustomPresetCodecPngImageLayerOutput() TransformOutputCustomPresetCodecPngImageLayerOutput {
	return i.ToTransformOutputCustomPresetCodecPngImageLayerOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetCodecPngImageLayerArgs) ToTransformOutputCustomPresetCodecPngImageLayerOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecPngImageLayerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetCodecPngImageLayerOutput)
}

func (i TransformOutputCustomPresetCodecPngImageLayerArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetCodecPngImageLayer] {
	return pulumix.Output[TransformOutputCustomPresetCodecPngImageLayer]{
		OutputState: i.ToTransformOutputCustomPresetCodecPngImageLayerOutputWithContext(ctx).OutputState,
	}
}

// TransformOutputCustomPresetCodecPngImageLayerArrayInput is an input type that accepts TransformOutputCustomPresetCodecPngImageLayerArray and TransformOutputCustomPresetCodecPngImageLayerArrayOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetCodecPngImageLayerArrayInput` via:
//
//	TransformOutputCustomPresetCodecPngImageLayerArray{ TransformOutputCustomPresetCodecPngImageLayerArgs{...} }
type TransformOutputCustomPresetCodecPngImageLayerArrayInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetCodecPngImageLayerArrayOutput() TransformOutputCustomPresetCodecPngImageLayerArrayOutput
	ToTransformOutputCustomPresetCodecPngImageLayerArrayOutputWithContext(context.Context) TransformOutputCustomPresetCodecPngImageLayerArrayOutput
}

type TransformOutputCustomPresetCodecPngImageLayerArray []TransformOutputCustomPresetCodecPngImageLayerInput

func (TransformOutputCustomPresetCodecPngImageLayerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformOutputCustomPresetCodecPngImageLayer)(nil)).Elem()
}

func (i TransformOutputCustomPresetCodecPngImageLayerArray) ToTransformOutputCustomPresetCodecPngImageLayerArrayOutput() TransformOutputCustomPresetCodecPngImageLayerArrayOutput {
	return i.ToTransformOutputCustomPresetCodecPngImageLayerArrayOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetCodecPngImageLayerArray) ToTransformOutputCustomPresetCodecPngImageLayerArrayOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecPngImageLayerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetCodecPngImageLayerArrayOutput)
}

func (i TransformOutputCustomPresetCodecPngImageLayerArray) ToOutput(ctx context.Context) pulumix.Output[[]TransformOutputCustomPresetCodecPngImageLayer] {
	return pulumix.Output[[]TransformOutputCustomPresetCodecPngImageLayer]{
		OutputState: i.ToTransformOutputCustomPresetCodecPngImageLayerArrayOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputCustomPresetCodecPngImageLayerOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetCodecPngImageLayerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetCodecPngImageLayer)(nil)).Elem()
}

func (o TransformOutputCustomPresetCodecPngImageLayerOutput) ToTransformOutputCustomPresetCodecPngImageLayerOutput() TransformOutputCustomPresetCodecPngImageLayerOutput {
	return o
}

func (o TransformOutputCustomPresetCodecPngImageLayerOutput) ToTransformOutputCustomPresetCodecPngImageLayerOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecPngImageLayerOutput {
	return o
}

func (o TransformOutputCustomPresetCodecPngImageLayerOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetCodecPngImageLayer] {
	return pulumix.Output[TransformOutputCustomPresetCodecPngImageLayer]{
		OutputState: o.OutputState,
	}
}

// The height of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example `50%` means the output video has half as many pixels in height as the input.
func (o TransformOutputCustomPresetCodecPngImageLayerOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecPngImageLayer) *string { return v.Height }).(pulumi.StringPtrOutput)
}

// The alphanumeric label for this layer, which can be used in multiplexing different video and audio layers, or in naming the output file.
func (o TransformOutputCustomPresetCodecPngImageLayerOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecPngImageLayer) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// The width of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example `50%` means the output video has half as many pixels in width as the input.
func (o TransformOutputCustomPresetCodecPngImageLayerOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetCodecPngImageLayer) *string { return v.Width }).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetCodecPngImageLayerArrayOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetCodecPngImageLayerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformOutputCustomPresetCodecPngImageLayer)(nil)).Elem()
}

func (o TransformOutputCustomPresetCodecPngImageLayerArrayOutput) ToTransformOutputCustomPresetCodecPngImageLayerArrayOutput() TransformOutputCustomPresetCodecPngImageLayerArrayOutput {
	return o
}

func (o TransformOutputCustomPresetCodecPngImageLayerArrayOutput) ToTransformOutputCustomPresetCodecPngImageLayerArrayOutputWithContext(ctx context.Context) TransformOutputCustomPresetCodecPngImageLayerArrayOutput {
	return o
}

func (o TransformOutputCustomPresetCodecPngImageLayerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TransformOutputCustomPresetCodecPngImageLayer] {
	return pulumix.Output[[]TransformOutputCustomPresetCodecPngImageLayer]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputCustomPresetCodecPngImageLayerArrayOutput) Index(i pulumi.IntInput) TransformOutputCustomPresetCodecPngImageLayerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformOutputCustomPresetCodecPngImageLayer {
		return vs[0].([]TransformOutputCustomPresetCodecPngImageLayer)[vs[1].(int)]
	}).(TransformOutputCustomPresetCodecPngImageLayerOutput)
}

type TransformOutputCustomPresetFilter struct {
	// A `cropRectangle` block as defined above.
	CropRectangle *TransformOutputCustomPresetFilterCropRectangle `pulumi:"cropRectangle"`
	// A `deinterlace` block as defined below.
	Deinterlace *TransformOutputCustomPresetFilterDeinterlace `pulumi:"deinterlace"`
	// A `fadeIn` block as defined above.
	FadeIn *TransformOutputCustomPresetFilterFadeIn `pulumi:"fadeIn"`
	// A `fadeOut` block as defined above.
	FadeOut *TransformOutputCustomPresetFilterFadeOut `pulumi:"fadeOut"`
	// One or more `overlay` blocks as defined below.
	Overlays []TransformOutputCustomPresetFilterOverlay `pulumi:"overlays"`
	// The rotation to be applied to the input video before it is encoded. Possible values are `Auto`, `None`, `Rotate90`, `Rotate180`, `Rotate270`,or `Rotate0`. Default to `Auto`.
	Rotation *string `pulumi:"rotation"`
}

// TransformOutputCustomPresetFilterInput is an input type that accepts TransformOutputCustomPresetFilterArgs and TransformOutputCustomPresetFilterOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetFilterInput` via:
//
//	TransformOutputCustomPresetFilterArgs{...}
type TransformOutputCustomPresetFilterInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetFilterOutput() TransformOutputCustomPresetFilterOutput
	ToTransformOutputCustomPresetFilterOutputWithContext(context.Context) TransformOutputCustomPresetFilterOutput
}

type TransformOutputCustomPresetFilterArgs struct {
	// A `cropRectangle` block as defined above.
	CropRectangle TransformOutputCustomPresetFilterCropRectanglePtrInput `pulumi:"cropRectangle"`
	// A `deinterlace` block as defined below.
	Deinterlace TransformOutputCustomPresetFilterDeinterlacePtrInput `pulumi:"deinterlace"`
	// A `fadeIn` block as defined above.
	FadeIn TransformOutputCustomPresetFilterFadeInPtrInput `pulumi:"fadeIn"`
	// A `fadeOut` block as defined above.
	FadeOut TransformOutputCustomPresetFilterFadeOutPtrInput `pulumi:"fadeOut"`
	// One or more `overlay` blocks as defined below.
	Overlays TransformOutputCustomPresetFilterOverlayArrayInput `pulumi:"overlays"`
	// The rotation to be applied to the input video before it is encoded. Possible values are `Auto`, `None`, `Rotate90`, `Rotate180`, `Rotate270`,or `Rotate0`. Default to `Auto`.
	Rotation pulumi.StringPtrInput `pulumi:"rotation"`
}

func (TransformOutputCustomPresetFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetFilter)(nil)).Elem()
}

func (i TransformOutputCustomPresetFilterArgs) ToTransformOutputCustomPresetFilterOutput() TransformOutputCustomPresetFilterOutput {
	return i.ToTransformOutputCustomPresetFilterOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetFilterArgs) ToTransformOutputCustomPresetFilterOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFilterOutput)
}

func (i TransformOutputCustomPresetFilterArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetFilter] {
	return pulumix.Output[TransformOutputCustomPresetFilter]{
		OutputState: i.ToTransformOutputCustomPresetFilterOutputWithContext(ctx).OutputState,
	}
}

func (i TransformOutputCustomPresetFilterArgs) ToTransformOutputCustomPresetFilterPtrOutput() TransformOutputCustomPresetFilterPtrOutput {
	return i.ToTransformOutputCustomPresetFilterPtrOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetFilterArgs) ToTransformOutputCustomPresetFilterPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFilterOutput).ToTransformOutputCustomPresetFilterPtrOutputWithContext(ctx)
}

// TransformOutputCustomPresetFilterPtrInput is an input type that accepts TransformOutputCustomPresetFilterArgs, TransformOutputCustomPresetFilterPtr and TransformOutputCustomPresetFilterPtrOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetFilterPtrInput` via:
//
//	        TransformOutputCustomPresetFilterArgs{...}
//
//	or:
//
//	        nil
type TransformOutputCustomPresetFilterPtrInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetFilterPtrOutput() TransformOutputCustomPresetFilterPtrOutput
	ToTransformOutputCustomPresetFilterPtrOutputWithContext(context.Context) TransformOutputCustomPresetFilterPtrOutput
}

type transformOutputCustomPresetFilterPtrType TransformOutputCustomPresetFilterArgs

func TransformOutputCustomPresetFilterPtr(v *TransformOutputCustomPresetFilterArgs) TransformOutputCustomPresetFilterPtrInput {
	return (*transformOutputCustomPresetFilterPtrType)(v)
}

func (*transformOutputCustomPresetFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetFilter)(nil)).Elem()
}

func (i *transformOutputCustomPresetFilterPtrType) ToTransformOutputCustomPresetFilterPtrOutput() TransformOutputCustomPresetFilterPtrOutput {
	return i.ToTransformOutputCustomPresetFilterPtrOutputWithContext(context.Background())
}

func (i *transformOutputCustomPresetFilterPtrType) ToTransformOutputCustomPresetFilterPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFilterPtrOutput)
}

func (i *transformOutputCustomPresetFilterPtrType) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetFilter] {
	return pulumix.Output[*TransformOutputCustomPresetFilter]{
		OutputState: i.ToTransformOutputCustomPresetFilterPtrOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputCustomPresetFilterOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetFilter)(nil)).Elem()
}

func (o TransformOutputCustomPresetFilterOutput) ToTransformOutputCustomPresetFilterOutput() TransformOutputCustomPresetFilterOutput {
	return o
}

func (o TransformOutputCustomPresetFilterOutput) ToTransformOutputCustomPresetFilterOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterOutput {
	return o
}

func (o TransformOutputCustomPresetFilterOutput) ToTransformOutputCustomPresetFilterPtrOutput() TransformOutputCustomPresetFilterPtrOutput {
	return o.ToTransformOutputCustomPresetFilterPtrOutputWithContext(context.Background())
}

func (o TransformOutputCustomPresetFilterOutput) ToTransformOutputCustomPresetFilterPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformOutputCustomPresetFilter) *TransformOutputCustomPresetFilter {
		return &v
	}).(TransformOutputCustomPresetFilterPtrOutput)
}

func (o TransformOutputCustomPresetFilterOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetFilter] {
	return pulumix.Output[TransformOutputCustomPresetFilter]{
		OutputState: o.OutputState,
	}
}

// A `cropRectangle` block as defined above.
func (o TransformOutputCustomPresetFilterOutput) CropRectangle() TransformOutputCustomPresetFilterCropRectanglePtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilter) *TransformOutputCustomPresetFilterCropRectangle {
		return v.CropRectangle
	}).(TransformOutputCustomPresetFilterCropRectanglePtrOutput)
}

// A `deinterlace` block as defined below.
func (o TransformOutputCustomPresetFilterOutput) Deinterlace() TransformOutputCustomPresetFilterDeinterlacePtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilter) *TransformOutputCustomPresetFilterDeinterlace {
		return v.Deinterlace
	}).(TransformOutputCustomPresetFilterDeinterlacePtrOutput)
}

// A `fadeIn` block as defined above.
func (o TransformOutputCustomPresetFilterOutput) FadeIn() TransformOutputCustomPresetFilterFadeInPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilter) *TransformOutputCustomPresetFilterFadeIn { return v.FadeIn }).(TransformOutputCustomPresetFilterFadeInPtrOutput)
}

// A `fadeOut` block as defined above.
func (o TransformOutputCustomPresetFilterOutput) FadeOut() TransformOutputCustomPresetFilterFadeOutPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilter) *TransformOutputCustomPresetFilterFadeOut { return v.FadeOut }).(TransformOutputCustomPresetFilterFadeOutPtrOutput)
}

// One or more `overlay` blocks as defined below.
func (o TransformOutputCustomPresetFilterOutput) Overlays() TransformOutputCustomPresetFilterOverlayArrayOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilter) []TransformOutputCustomPresetFilterOverlay {
		return v.Overlays
	}).(TransformOutputCustomPresetFilterOverlayArrayOutput)
}

// The rotation to be applied to the input video before it is encoded. Possible values are `Auto`, `None`, `Rotate90`, `Rotate180`, `Rotate270`,or `Rotate0`. Default to `Auto`.
func (o TransformOutputCustomPresetFilterOutput) Rotation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilter) *string { return v.Rotation }).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetFilterPtrOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetFilter)(nil)).Elem()
}

func (o TransformOutputCustomPresetFilterPtrOutput) ToTransformOutputCustomPresetFilterPtrOutput() TransformOutputCustomPresetFilterPtrOutput {
	return o
}

func (o TransformOutputCustomPresetFilterPtrOutput) ToTransformOutputCustomPresetFilterPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterPtrOutput {
	return o
}

func (o TransformOutputCustomPresetFilterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetFilter] {
	return pulumix.Output[*TransformOutputCustomPresetFilter]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputCustomPresetFilterPtrOutput) Elem() TransformOutputCustomPresetFilterOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilter) TransformOutputCustomPresetFilter {
		if v != nil {
			return *v
		}
		var ret TransformOutputCustomPresetFilter
		return ret
	}).(TransformOutputCustomPresetFilterOutput)
}

// A `cropRectangle` block as defined above.
func (o TransformOutputCustomPresetFilterPtrOutput) CropRectangle() TransformOutputCustomPresetFilterCropRectanglePtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilter) *TransformOutputCustomPresetFilterCropRectangle {
		if v == nil {
			return nil
		}
		return v.CropRectangle
	}).(TransformOutputCustomPresetFilterCropRectanglePtrOutput)
}

// A `deinterlace` block as defined below.
func (o TransformOutputCustomPresetFilterPtrOutput) Deinterlace() TransformOutputCustomPresetFilterDeinterlacePtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilter) *TransformOutputCustomPresetFilterDeinterlace {
		if v == nil {
			return nil
		}
		return v.Deinterlace
	}).(TransformOutputCustomPresetFilterDeinterlacePtrOutput)
}

// A `fadeIn` block as defined above.
func (o TransformOutputCustomPresetFilterPtrOutput) FadeIn() TransformOutputCustomPresetFilterFadeInPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilter) *TransformOutputCustomPresetFilterFadeIn {
		if v == nil {
			return nil
		}
		return v.FadeIn
	}).(TransformOutputCustomPresetFilterFadeInPtrOutput)
}

// A `fadeOut` block as defined above.
func (o TransformOutputCustomPresetFilterPtrOutput) FadeOut() TransformOutputCustomPresetFilterFadeOutPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilter) *TransformOutputCustomPresetFilterFadeOut {
		if v == nil {
			return nil
		}
		return v.FadeOut
	}).(TransformOutputCustomPresetFilterFadeOutPtrOutput)
}

// One or more `overlay` blocks as defined below.
func (o TransformOutputCustomPresetFilterPtrOutput) Overlays() TransformOutputCustomPresetFilterOverlayArrayOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilter) []TransformOutputCustomPresetFilterOverlay {
		if v == nil {
			return nil
		}
		return v.Overlays
	}).(TransformOutputCustomPresetFilterOverlayArrayOutput)
}

// The rotation to be applied to the input video before it is encoded. Possible values are `Auto`, `None`, `Rotate90`, `Rotate180`, `Rotate270`,or `Rotate0`. Default to `Auto`.
func (o TransformOutputCustomPresetFilterPtrOutput) Rotation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilter) *string {
		if v == nil {
			return nil
		}
		return v.Rotation
	}).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetFilterCropRectangle struct {
	// The height of the rectangular region in pixels. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
	Height *string `pulumi:"height"`
	// The number of pixels from the left-margin. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
	Left *string `pulumi:"left"`
	// The number of pixels from the top-margin. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
	Top *string `pulumi:"top"`
	// The width of the rectangular region in pixels. This can be absolute pixel value (e.g`  100 `), or relative to the size of the video (For example, `50%`).
	Width *string `pulumi:"width"`
}

// TransformOutputCustomPresetFilterCropRectangleInput is an input type that accepts TransformOutputCustomPresetFilterCropRectangleArgs and TransformOutputCustomPresetFilterCropRectangleOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetFilterCropRectangleInput` via:
//
//	TransformOutputCustomPresetFilterCropRectangleArgs{...}
type TransformOutputCustomPresetFilterCropRectangleInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetFilterCropRectangleOutput() TransformOutputCustomPresetFilterCropRectangleOutput
	ToTransformOutputCustomPresetFilterCropRectangleOutputWithContext(context.Context) TransformOutputCustomPresetFilterCropRectangleOutput
}

type TransformOutputCustomPresetFilterCropRectangleArgs struct {
	// The height of the rectangular region in pixels. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
	Height pulumi.StringPtrInput `pulumi:"height"`
	// The number of pixels from the left-margin. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
	Left pulumi.StringPtrInput `pulumi:"left"`
	// The number of pixels from the top-margin. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
	Top pulumi.StringPtrInput `pulumi:"top"`
	// The width of the rectangular region in pixels. This can be absolute pixel value (e.g`  100 `), or relative to the size of the video (For example, `50%`).
	Width pulumi.StringPtrInput `pulumi:"width"`
}

func (TransformOutputCustomPresetFilterCropRectangleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetFilterCropRectangle)(nil)).Elem()
}

func (i TransformOutputCustomPresetFilterCropRectangleArgs) ToTransformOutputCustomPresetFilterCropRectangleOutput() TransformOutputCustomPresetFilterCropRectangleOutput {
	return i.ToTransformOutputCustomPresetFilterCropRectangleOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetFilterCropRectangleArgs) ToTransformOutputCustomPresetFilterCropRectangleOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterCropRectangleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFilterCropRectangleOutput)
}

func (i TransformOutputCustomPresetFilterCropRectangleArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetFilterCropRectangle] {
	return pulumix.Output[TransformOutputCustomPresetFilterCropRectangle]{
		OutputState: i.ToTransformOutputCustomPresetFilterCropRectangleOutputWithContext(ctx).OutputState,
	}
}

func (i TransformOutputCustomPresetFilterCropRectangleArgs) ToTransformOutputCustomPresetFilterCropRectanglePtrOutput() TransformOutputCustomPresetFilterCropRectanglePtrOutput {
	return i.ToTransformOutputCustomPresetFilterCropRectanglePtrOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetFilterCropRectangleArgs) ToTransformOutputCustomPresetFilterCropRectanglePtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterCropRectanglePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFilterCropRectangleOutput).ToTransformOutputCustomPresetFilterCropRectanglePtrOutputWithContext(ctx)
}

// TransformOutputCustomPresetFilterCropRectanglePtrInput is an input type that accepts TransformOutputCustomPresetFilterCropRectangleArgs, TransformOutputCustomPresetFilterCropRectanglePtr and TransformOutputCustomPresetFilterCropRectanglePtrOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetFilterCropRectanglePtrInput` via:
//
//	        TransformOutputCustomPresetFilterCropRectangleArgs{...}
//
//	or:
//
//	        nil
type TransformOutputCustomPresetFilterCropRectanglePtrInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetFilterCropRectanglePtrOutput() TransformOutputCustomPresetFilterCropRectanglePtrOutput
	ToTransformOutputCustomPresetFilterCropRectanglePtrOutputWithContext(context.Context) TransformOutputCustomPresetFilterCropRectanglePtrOutput
}

type transformOutputCustomPresetFilterCropRectanglePtrType TransformOutputCustomPresetFilterCropRectangleArgs

func TransformOutputCustomPresetFilterCropRectanglePtr(v *TransformOutputCustomPresetFilterCropRectangleArgs) TransformOutputCustomPresetFilterCropRectanglePtrInput {
	return (*transformOutputCustomPresetFilterCropRectanglePtrType)(v)
}

func (*transformOutputCustomPresetFilterCropRectanglePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetFilterCropRectangle)(nil)).Elem()
}

func (i *transformOutputCustomPresetFilterCropRectanglePtrType) ToTransformOutputCustomPresetFilterCropRectanglePtrOutput() TransformOutputCustomPresetFilterCropRectanglePtrOutput {
	return i.ToTransformOutputCustomPresetFilterCropRectanglePtrOutputWithContext(context.Background())
}

func (i *transformOutputCustomPresetFilterCropRectanglePtrType) ToTransformOutputCustomPresetFilterCropRectanglePtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterCropRectanglePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFilterCropRectanglePtrOutput)
}

func (i *transformOutputCustomPresetFilterCropRectanglePtrType) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetFilterCropRectangle] {
	return pulumix.Output[*TransformOutputCustomPresetFilterCropRectangle]{
		OutputState: i.ToTransformOutputCustomPresetFilterCropRectanglePtrOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputCustomPresetFilterCropRectangleOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetFilterCropRectangleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetFilterCropRectangle)(nil)).Elem()
}

func (o TransformOutputCustomPresetFilterCropRectangleOutput) ToTransformOutputCustomPresetFilterCropRectangleOutput() TransformOutputCustomPresetFilterCropRectangleOutput {
	return o
}

func (o TransformOutputCustomPresetFilterCropRectangleOutput) ToTransformOutputCustomPresetFilterCropRectangleOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterCropRectangleOutput {
	return o
}

func (o TransformOutputCustomPresetFilterCropRectangleOutput) ToTransformOutputCustomPresetFilterCropRectanglePtrOutput() TransformOutputCustomPresetFilterCropRectanglePtrOutput {
	return o.ToTransformOutputCustomPresetFilterCropRectanglePtrOutputWithContext(context.Background())
}

func (o TransformOutputCustomPresetFilterCropRectangleOutput) ToTransformOutputCustomPresetFilterCropRectanglePtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterCropRectanglePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformOutputCustomPresetFilterCropRectangle) *TransformOutputCustomPresetFilterCropRectangle {
		return &v
	}).(TransformOutputCustomPresetFilterCropRectanglePtrOutput)
}

func (o TransformOutputCustomPresetFilterCropRectangleOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetFilterCropRectangle] {
	return pulumix.Output[TransformOutputCustomPresetFilterCropRectangle]{
		OutputState: o.OutputState,
	}
}

// The height of the rectangular region in pixels. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
func (o TransformOutputCustomPresetFilterCropRectangleOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterCropRectangle) *string { return v.Height }).(pulumi.StringPtrOutput)
}

// The number of pixels from the left-margin. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
func (o TransformOutputCustomPresetFilterCropRectangleOutput) Left() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterCropRectangle) *string { return v.Left }).(pulumi.StringPtrOutput)
}

// The number of pixels from the top-margin. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
func (o TransformOutputCustomPresetFilterCropRectangleOutput) Top() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterCropRectangle) *string { return v.Top }).(pulumi.StringPtrOutput)
}

// The width of the rectangular region in pixels. This can be absolute pixel value (e.g`  100 `), or relative to the size of the video (For example, `50%`).
func (o TransformOutputCustomPresetFilterCropRectangleOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterCropRectangle) *string { return v.Width }).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetFilterCropRectanglePtrOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetFilterCropRectanglePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetFilterCropRectangle)(nil)).Elem()
}

func (o TransformOutputCustomPresetFilterCropRectanglePtrOutput) ToTransformOutputCustomPresetFilterCropRectanglePtrOutput() TransformOutputCustomPresetFilterCropRectanglePtrOutput {
	return o
}

func (o TransformOutputCustomPresetFilterCropRectanglePtrOutput) ToTransformOutputCustomPresetFilterCropRectanglePtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterCropRectanglePtrOutput {
	return o
}

func (o TransformOutputCustomPresetFilterCropRectanglePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetFilterCropRectangle] {
	return pulumix.Output[*TransformOutputCustomPresetFilterCropRectangle]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputCustomPresetFilterCropRectanglePtrOutput) Elem() TransformOutputCustomPresetFilterCropRectangleOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterCropRectangle) TransformOutputCustomPresetFilterCropRectangle {
		if v != nil {
			return *v
		}
		var ret TransformOutputCustomPresetFilterCropRectangle
		return ret
	}).(TransformOutputCustomPresetFilterCropRectangleOutput)
}

// The height of the rectangular region in pixels. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
func (o TransformOutputCustomPresetFilterCropRectanglePtrOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterCropRectangle) *string {
		if v == nil {
			return nil
		}
		return v.Height
	}).(pulumi.StringPtrOutput)
}

// The number of pixels from the left-margin. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
func (o TransformOutputCustomPresetFilterCropRectanglePtrOutput) Left() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterCropRectangle) *string {
		if v == nil {
			return nil
		}
		return v.Left
	}).(pulumi.StringPtrOutput)
}

// The number of pixels from the top-margin. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
func (o TransformOutputCustomPresetFilterCropRectanglePtrOutput) Top() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterCropRectangle) *string {
		if v == nil {
			return nil
		}
		return v.Top
	}).(pulumi.StringPtrOutput)
}

// The width of the rectangular region in pixels. This can be absolute pixel value (e.g`  100 `), or relative to the size of the video (For example, `50%`).
func (o TransformOutputCustomPresetFilterCropRectanglePtrOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterCropRectangle) *string {
		if v == nil {
			return nil
		}
		return v.Width
	}).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetFilterDeinterlace struct {
	// The deinterlacing mode. Possible values are `AutoPixelAdaptive` or `Off`. Default to `AutoPixelAdaptive`.
	Mode *string `pulumi:"mode"`
	// The field parity to use for deinterlacing. Possible values are `Auto`, `TopFieldFirst` or `BottomFieldFirst`. Default to `Auto`.
	Parity *string `pulumi:"parity"`
}

// TransformOutputCustomPresetFilterDeinterlaceInput is an input type that accepts TransformOutputCustomPresetFilterDeinterlaceArgs and TransformOutputCustomPresetFilterDeinterlaceOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetFilterDeinterlaceInput` via:
//
//	TransformOutputCustomPresetFilterDeinterlaceArgs{...}
type TransformOutputCustomPresetFilterDeinterlaceInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetFilterDeinterlaceOutput() TransformOutputCustomPresetFilterDeinterlaceOutput
	ToTransformOutputCustomPresetFilterDeinterlaceOutputWithContext(context.Context) TransformOutputCustomPresetFilterDeinterlaceOutput
}

type TransformOutputCustomPresetFilterDeinterlaceArgs struct {
	// The deinterlacing mode. Possible values are `AutoPixelAdaptive` or `Off`. Default to `AutoPixelAdaptive`.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// The field parity to use for deinterlacing. Possible values are `Auto`, `TopFieldFirst` or `BottomFieldFirst`. Default to `Auto`.
	Parity pulumi.StringPtrInput `pulumi:"parity"`
}

func (TransformOutputCustomPresetFilterDeinterlaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetFilterDeinterlace)(nil)).Elem()
}

func (i TransformOutputCustomPresetFilterDeinterlaceArgs) ToTransformOutputCustomPresetFilterDeinterlaceOutput() TransformOutputCustomPresetFilterDeinterlaceOutput {
	return i.ToTransformOutputCustomPresetFilterDeinterlaceOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetFilterDeinterlaceArgs) ToTransformOutputCustomPresetFilterDeinterlaceOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterDeinterlaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFilterDeinterlaceOutput)
}

func (i TransformOutputCustomPresetFilterDeinterlaceArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetFilterDeinterlace] {
	return pulumix.Output[TransformOutputCustomPresetFilterDeinterlace]{
		OutputState: i.ToTransformOutputCustomPresetFilterDeinterlaceOutputWithContext(ctx).OutputState,
	}
}

func (i TransformOutputCustomPresetFilterDeinterlaceArgs) ToTransformOutputCustomPresetFilterDeinterlacePtrOutput() TransformOutputCustomPresetFilterDeinterlacePtrOutput {
	return i.ToTransformOutputCustomPresetFilterDeinterlacePtrOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetFilterDeinterlaceArgs) ToTransformOutputCustomPresetFilterDeinterlacePtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterDeinterlacePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFilterDeinterlaceOutput).ToTransformOutputCustomPresetFilterDeinterlacePtrOutputWithContext(ctx)
}

// TransformOutputCustomPresetFilterDeinterlacePtrInput is an input type that accepts TransformOutputCustomPresetFilterDeinterlaceArgs, TransformOutputCustomPresetFilterDeinterlacePtr and TransformOutputCustomPresetFilterDeinterlacePtrOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetFilterDeinterlacePtrInput` via:
//
//	        TransformOutputCustomPresetFilterDeinterlaceArgs{...}
//
//	or:
//
//	        nil
type TransformOutputCustomPresetFilterDeinterlacePtrInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetFilterDeinterlacePtrOutput() TransformOutputCustomPresetFilterDeinterlacePtrOutput
	ToTransformOutputCustomPresetFilterDeinterlacePtrOutputWithContext(context.Context) TransformOutputCustomPresetFilterDeinterlacePtrOutput
}

type transformOutputCustomPresetFilterDeinterlacePtrType TransformOutputCustomPresetFilterDeinterlaceArgs

func TransformOutputCustomPresetFilterDeinterlacePtr(v *TransformOutputCustomPresetFilterDeinterlaceArgs) TransformOutputCustomPresetFilterDeinterlacePtrInput {
	return (*transformOutputCustomPresetFilterDeinterlacePtrType)(v)
}

func (*transformOutputCustomPresetFilterDeinterlacePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetFilterDeinterlace)(nil)).Elem()
}

func (i *transformOutputCustomPresetFilterDeinterlacePtrType) ToTransformOutputCustomPresetFilterDeinterlacePtrOutput() TransformOutputCustomPresetFilterDeinterlacePtrOutput {
	return i.ToTransformOutputCustomPresetFilterDeinterlacePtrOutputWithContext(context.Background())
}

func (i *transformOutputCustomPresetFilterDeinterlacePtrType) ToTransformOutputCustomPresetFilterDeinterlacePtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterDeinterlacePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFilterDeinterlacePtrOutput)
}

func (i *transformOutputCustomPresetFilterDeinterlacePtrType) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetFilterDeinterlace] {
	return pulumix.Output[*TransformOutputCustomPresetFilterDeinterlace]{
		OutputState: i.ToTransformOutputCustomPresetFilterDeinterlacePtrOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputCustomPresetFilterDeinterlaceOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetFilterDeinterlaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetFilterDeinterlace)(nil)).Elem()
}

func (o TransformOutputCustomPresetFilterDeinterlaceOutput) ToTransformOutputCustomPresetFilterDeinterlaceOutput() TransformOutputCustomPresetFilterDeinterlaceOutput {
	return o
}

func (o TransformOutputCustomPresetFilterDeinterlaceOutput) ToTransformOutputCustomPresetFilterDeinterlaceOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterDeinterlaceOutput {
	return o
}

func (o TransformOutputCustomPresetFilterDeinterlaceOutput) ToTransformOutputCustomPresetFilterDeinterlacePtrOutput() TransformOutputCustomPresetFilterDeinterlacePtrOutput {
	return o.ToTransformOutputCustomPresetFilterDeinterlacePtrOutputWithContext(context.Background())
}

func (o TransformOutputCustomPresetFilterDeinterlaceOutput) ToTransformOutputCustomPresetFilterDeinterlacePtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterDeinterlacePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformOutputCustomPresetFilterDeinterlace) *TransformOutputCustomPresetFilterDeinterlace {
		return &v
	}).(TransformOutputCustomPresetFilterDeinterlacePtrOutput)
}

func (o TransformOutputCustomPresetFilterDeinterlaceOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetFilterDeinterlace] {
	return pulumix.Output[TransformOutputCustomPresetFilterDeinterlace]{
		OutputState: o.OutputState,
	}
}

// The deinterlacing mode. Possible values are `AutoPixelAdaptive` or `Off`. Default to `AutoPixelAdaptive`.
func (o TransformOutputCustomPresetFilterDeinterlaceOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterDeinterlace) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// The field parity to use for deinterlacing. Possible values are `Auto`, `TopFieldFirst` or `BottomFieldFirst`. Default to `Auto`.
func (o TransformOutputCustomPresetFilterDeinterlaceOutput) Parity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterDeinterlace) *string { return v.Parity }).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetFilterDeinterlacePtrOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetFilterDeinterlacePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetFilterDeinterlace)(nil)).Elem()
}

func (o TransformOutputCustomPresetFilterDeinterlacePtrOutput) ToTransformOutputCustomPresetFilterDeinterlacePtrOutput() TransformOutputCustomPresetFilterDeinterlacePtrOutput {
	return o
}

func (o TransformOutputCustomPresetFilterDeinterlacePtrOutput) ToTransformOutputCustomPresetFilterDeinterlacePtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterDeinterlacePtrOutput {
	return o
}

func (o TransformOutputCustomPresetFilterDeinterlacePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetFilterDeinterlace] {
	return pulumix.Output[*TransformOutputCustomPresetFilterDeinterlace]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputCustomPresetFilterDeinterlacePtrOutput) Elem() TransformOutputCustomPresetFilterDeinterlaceOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterDeinterlace) TransformOutputCustomPresetFilterDeinterlace {
		if v != nil {
			return *v
		}
		var ret TransformOutputCustomPresetFilterDeinterlace
		return ret
	}).(TransformOutputCustomPresetFilterDeinterlaceOutput)
}

// The deinterlacing mode. Possible values are `AutoPixelAdaptive` or `Off`. Default to `AutoPixelAdaptive`.
func (o TransformOutputCustomPresetFilterDeinterlacePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterDeinterlace) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// The field parity to use for deinterlacing. Possible values are `Auto`, `TopFieldFirst` or `BottomFieldFirst`. Default to `Auto`.
func (o TransformOutputCustomPresetFilterDeinterlacePtrOutput) Parity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterDeinterlace) *string {
		if v == nil {
			return nil
		}
		return v.Parity
	}).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetFilterFadeIn struct {
	// The duration of the fade effect in the video. The value can be in ISO 8601 format (For example, PT05S to fade In/Out a color during 5 seconds), or a frame count (For example, 10 to fade 10 frames from the start time), or a relative value to stream duration (For example, 10% to fade 10% of stream duration).
	Duration string `pulumi:"duration"`
	// The color for the fade in/out. It can be on the [CSS Level1 colors](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color_keywords) or an RGB/hex value: e.g: `rgb(255,0,0)`, `0xFF0000` or `#FF0000`.
	FadeColor string `pulumi:"fadeColor"`
	// The position in the input video from where to start fade. The value can be in ISO 8601 format (For example, `PT05S` to start at 5 seconds), or a frame count (For example, `10` to start at the 10th frame), or a relative value to stream duration (For example, `10%` to start at 10% of stream duration). Default to `0`.
	Start *string `pulumi:"start"`
}

// TransformOutputCustomPresetFilterFadeInInput is an input type that accepts TransformOutputCustomPresetFilterFadeInArgs and TransformOutputCustomPresetFilterFadeInOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetFilterFadeInInput` via:
//
//	TransformOutputCustomPresetFilterFadeInArgs{...}
type TransformOutputCustomPresetFilterFadeInInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetFilterFadeInOutput() TransformOutputCustomPresetFilterFadeInOutput
	ToTransformOutputCustomPresetFilterFadeInOutputWithContext(context.Context) TransformOutputCustomPresetFilterFadeInOutput
}

type TransformOutputCustomPresetFilterFadeInArgs struct {
	// The duration of the fade effect in the video. The value can be in ISO 8601 format (For example, PT05S to fade In/Out a color during 5 seconds), or a frame count (For example, 10 to fade 10 frames from the start time), or a relative value to stream duration (For example, 10% to fade 10% of stream duration).
	Duration pulumi.StringInput `pulumi:"duration"`
	// The color for the fade in/out. It can be on the [CSS Level1 colors](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color_keywords) or an RGB/hex value: e.g: `rgb(255,0,0)`, `0xFF0000` or `#FF0000`.
	FadeColor pulumi.StringInput `pulumi:"fadeColor"`
	// The position in the input video from where to start fade. The value can be in ISO 8601 format (For example, `PT05S` to start at 5 seconds), or a frame count (For example, `10` to start at the 10th frame), or a relative value to stream duration (For example, `10%` to start at 10% of stream duration). Default to `0`.
	Start pulumi.StringPtrInput `pulumi:"start"`
}

func (TransformOutputCustomPresetFilterFadeInArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetFilterFadeIn)(nil)).Elem()
}

func (i TransformOutputCustomPresetFilterFadeInArgs) ToTransformOutputCustomPresetFilterFadeInOutput() TransformOutputCustomPresetFilterFadeInOutput {
	return i.ToTransformOutputCustomPresetFilterFadeInOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetFilterFadeInArgs) ToTransformOutputCustomPresetFilterFadeInOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterFadeInOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFilterFadeInOutput)
}

func (i TransformOutputCustomPresetFilterFadeInArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetFilterFadeIn] {
	return pulumix.Output[TransformOutputCustomPresetFilterFadeIn]{
		OutputState: i.ToTransformOutputCustomPresetFilterFadeInOutputWithContext(ctx).OutputState,
	}
}

func (i TransformOutputCustomPresetFilterFadeInArgs) ToTransformOutputCustomPresetFilterFadeInPtrOutput() TransformOutputCustomPresetFilterFadeInPtrOutput {
	return i.ToTransformOutputCustomPresetFilterFadeInPtrOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetFilterFadeInArgs) ToTransformOutputCustomPresetFilterFadeInPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterFadeInPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFilterFadeInOutput).ToTransformOutputCustomPresetFilterFadeInPtrOutputWithContext(ctx)
}

// TransformOutputCustomPresetFilterFadeInPtrInput is an input type that accepts TransformOutputCustomPresetFilterFadeInArgs, TransformOutputCustomPresetFilterFadeInPtr and TransformOutputCustomPresetFilterFadeInPtrOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetFilterFadeInPtrInput` via:
//
//	        TransformOutputCustomPresetFilterFadeInArgs{...}
//
//	or:
//
//	        nil
type TransformOutputCustomPresetFilterFadeInPtrInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetFilterFadeInPtrOutput() TransformOutputCustomPresetFilterFadeInPtrOutput
	ToTransformOutputCustomPresetFilterFadeInPtrOutputWithContext(context.Context) TransformOutputCustomPresetFilterFadeInPtrOutput
}

type transformOutputCustomPresetFilterFadeInPtrType TransformOutputCustomPresetFilterFadeInArgs

func TransformOutputCustomPresetFilterFadeInPtr(v *TransformOutputCustomPresetFilterFadeInArgs) TransformOutputCustomPresetFilterFadeInPtrInput {
	return (*transformOutputCustomPresetFilterFadeInPtrType)(v)
}

func (*transformOutputCustomPresetFilterFadeInPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetFilterFadeIn)(nil)).Elem()
}

func (i *transformOutputCustomPresetFilterFadeInPtrType) ToTransformOutputCustomPresetFilterFadeInPtrOutput() TransformOutputCustomPresetFilterFadeInPtrOutput {
	return i.ToTransformOutputCustomPresetFilterFadeInPtrOutputWithContext(context.Background())
}

func (i *transformOutputCustomPresetFilterFadeInPtrType) ToTransformOutputCustomPresetFilterFadeInPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterFadeInPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFilterFadeInPtrOutput)
}

func (i *transformOutputCustomPresetFilterFadeInPtrType) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetFilterFadeIn] {
	return pulumix.Output[*TransformOutputCustomPresetFilterFadeIn]{
		OutputState: i.ToTransformOutputCustomPresetFilterFadeInPtrOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputCustomPresetFilterFadeInOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetFilterFadeInOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetFilterFadeIn)(nil)).Elem()
}

func (o TransformOutputCustomPresetFilterFadeInOutput) ToTransformOutputCustomPresetFilterFadeInOutput() TransformOutputCustomPresetFilterFadeInOutput {
	return o
}

func (o TransformOutputCustomPresetFilterFadeInOutput) ToTransformOutputCustomPresetFilterFadeInOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterFadeInOutput {
	return o
}

func (o TransformOutputCustomPresetFilterFadeInOutput) ToTransformOutputCustomPresetFilterFadeInPtrOutput() TransformOutputCustomPresetFilterFadeInPtrOutput {
	return o.ToTransformOutputCustomPresetFilterFadeInPtrOutputWithContext(context.Background())
}

func (o TransformOutputCustomPresetFilterFadeInOutput) ToTransformOutputCustomPresetFilterFadeInPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterFadeInPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformOutputCustomPresetFilterFadeIn) *TransformOutputCustomPresetFilterFadeIn {
		return &v
	}).(TransformOutputCustomPresetFilterFadeInPtrOutput)
}

func (o TransformOutputCustomPresetFilterFadeInOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetFilterFadeIn] {
	return pulumix.Output[TransformOutputCustomPresetFilterFadeIn]{
		OutputState: o.OutputState,
	}
}

// The duration of the fade effect in the video. The value can be in ISO 8601 format (For example, PT05S to fade In/Out a color during 5 seconds), or a frame count (For example, 10 to fade 10 frames from the start time), or a relative value to stream duration (For example, 10% to fade 10% of stream duration).
func (o TransformOutputCustomPresetFilterFadeInOutput) Duration() pulumi.StringOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterFadeIn) string { return v.Duration }).(pulumi.StringOutput)
}

// The color for the fade in/out. It can be on the [CSS Level1 colors](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color_keywords) or an RGB/hex value: e.g: `rgb(255,0,0)`, `0xFF0000` or `#FF0000`.
func (o TransformOutputCustomPresetFilterFadeInOutput) FadeColor() pulumi.StringOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterFadeIn) string { return v.FadeColor }).(pulumi.StringOutput)
}

// The position in the input video from where to start fade. The value can be in ISO 8601 format (For example, `PT05S` to start at 5 seconds), or a frame count (For example, `10` to start at the 10th frame), or a relative value to stream duration (For example, `10%` to start at 10% of stream duration). Default to `0`.
func (o TransformOutputCustomPresetFilterFadeInOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterFadeIn) *string { return v.Start }).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetFilterFadeInPtrOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetFilterFadeInPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetFilterFadeIn)(nil)).Elem()
}

func (o TransformOutputCustomPresetFilterFadeInPtrOutput) ToTransformOutputCustomPresetFilterFadeInPtrOutput() TransformOutputCustomPresetFilterFadeInPtrOutput {
	return o
}

func (o TransformOutputCustomPresetFilterFadeInPtrOutput) ToTransformOutputCustomPresetFilterFadeInPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterFadeInPtrOutput {
	return o
}

func (o TransformOutputCustomPresetFilterFadeInPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetFilterFadeIn] {
	return pulumix.Output[*TransformOutputCustomPresetFilterFadeIn]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputCustomPresetFilterFadeInPtrOutput) Elem() TransformOutputCustomPresetFilterFadeInOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterFadeIn) TransformOutputCustomPresetFilterFadeIn {
		if v != nil {
			return *v
		}
		var ret TransformOutputCustomPresetFilterFadeIn
		return ret
	}).(TransformOutputCustomPresetFilterFadeInOutput)
}

// The duration of the fade effect in the video. The value can be in ISO 8601 format (For example, PT05S to fade In/Out a color during 5 seconds), or a frame count (For example, 10 to fade 10 frames from the start time), or a relative value to stream duration (For example, 10% to fade 10% of stream duration).
func (o TransformOutputCustomPresetFilterFadeInPtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterFadeIn) *string {
		if v == nil {
			return nil
		}
		return &v.Duration
	}).(pulumi.StringPtrOutput)
}

// The color for the fade in/out. It can be on the [CSS Level1 colors](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color_keywords) or an RGB/hex value: e.g: `rgb(255,0,0)`, `0xFF0000` or `#FF0000`.
func (o TransformOutputCustomPresetFilterFadeInPtrOutput) FadeColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterFadeIn) *string {
		if v == nil {
			return nil
		}
		return &v.FadeColor
	}).(pulumi.StringPtrOutput)
}

// The position in the input video from where to start fade. The value can be in ISO 8601 format (For example, `PT05S` to start at 5 seconds), or a frame count (For example, `10` to start at the 10th frame), or a relative value to stream duration (For example, `10%` to start at 10% of stream duration). Default to `0`.
func (o TransformOutputCustomPresetFilterFadeInPtrOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterFadeIn) *string {
		if v == nil {
			return nil
		}
		return v.Start
	}).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetFilterFadeOut struct {
	// The duration of the fade effect in the video. The value can be in ISO 8601 format (For example, PT05S to fade In/Out a color during 5 seconds), or a frame count (For example, 10 to fade 10 frames from the start time), or a relative value to stream duration (For example, 10% to fade 10% of stream duration).
	Duration string `pulumi:"duration"`
	// The color for the fade in/out. It can be on the [CSS Level1 colors](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color_keywords) or an RGB/hex value: e.g: `rgb(255,0,0)`, `0xFF0000` or `#FF0000`.
	FadeColor string `pulumi:"fadeColor"`
	// The position in the input video from where to start fade. The value can be in ISO 8601 format (For example, `PT05S` to start at 5 seconds), or a frame count (For example, `10` to start at the 10th frame), or a relative value to stream duration (For example, `10%` to start at 10% of stream duration). Default to `0`.
	Start *string `pulumi:"start"`
}

// TransformOutputCustomPresetFilterFadeOutInput is an input type that accepts TransformOutputCustomPresetFilterFadeOutArgs and TransformOutputCustomPresetFilterFadeOutOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetFilterFadeOutInput` via:
//
//	TransformOutputCustomPresetFilterFadeOutArgs{...}
type TransformOutputCustomPresetFilterFadeOutInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetFilterFadeOutOutput() TransformOutputCustomPresetFilterFadeOutOutput
	ToTransformOutputCustomPresetFilterFadeOutOutputWithContext(context.Context) TransformOutputCustomPresetFilterFadeOutOutput
}

type TransformOutputCustomPresetFilterFadeOutArgs struct {
	// The duration of the fade effect in the video. The value can be in ISO 8601 format (For example, PT05S to fade In/Out a color during 5 seconds), or a frame count (For example, 10 to fade 10 frames from the start time), or a relative value to stream duration (For example, 10% to fade 10% of stream duration).
	Duration pulumi.StringInput `pulumi:"duration"`
	// The color for the fade in/out. It can be on the [CSS Level1 colors](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color_keywords) or an RGB/hex value: e.g: `rgb(255,0,0)`, `0xFF0000` or `#FF0000`.
	FadeColor pulumi.StringInput `pulumi:"fadeColor"`
	// The position in the input video from where to start fade. The value can be in ISO 8601 format (For example, `PT05S` to start at 5 seconds), or a frame count (For example, `10` to start at the 10th frame), or a relative value to stream duration (For example, `10%` to start at 10% of stream duration). Default to `0`.
	Start pulumi.StringPtrInput `pulumi:"start"`
}

func (TransformOutputCustomPresetFilterFadeOutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetFilterFadeOut)(nil)).Elem()
}

func (i TransformOutputCustomPresetFilterFadeOutArgs) ToTransformOutputCustomPresetFilterFadeOutOutput() TransformOutputCustomPresetFilterFadeOutOutput {
	return i.ToTransformOutputCustomPresetFilterFadeOutOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetFilterFadeOutArgs) ToTransformOutputCustomPresetFilterFadeOutOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterFadeOutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFilterFadeOutOutput)
}

func (i TransformOutputCustomPresetFilterFadeOutArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetFilterFadeOut] {
	return pulumix.Output[TransformOutputCustomPresetFilterFadeOut]{
		OutputState: i.ToTransformOutputCustomPresetFilterFadeOutOutputWithContext(ctx).OutputState,
	}
}

func (i TransformOutputCustomPresetFilterFadeOutArgs) ToTransformOutputCustomPresetFilterFadeOutPtrOutput() TransformOutputCustomPresetFilterFadeOutPtrOutput {
	return i.ToTransformOutputCustomPresetFilterFadeOutPtrOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetFilterFadeOutArgs) ToTransformOutputCustomPresetFilterFadeOutPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterFadeOutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFilterFadeOutOutput).ToTransformOutputCustomPresetFilterFadeOutPtrOutputWithContext(ctx)
}

// TransformOutputCustomPresetFilterFadeOutPtrInput is an input type that accepts TransformOutputCustomPresetFilterFadeOutArgs, TransformOutputCustomPresetFilterFadeOutPtr and TransformOutputCustomPresetFilterFadeOutPtrOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetFilterFadeOutPtrInput` via:
//
//	        TransformOutputCustomPresetFilterFadeOutArgs{...}
//
//	or:
//
//	        nil
type TransformOutputCustomPresetFilterFadeOutPtrInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetFilterFadeOutPtrOutput() TransformOutputCustomPresetFilterFadeOutPtrOutput
	ToTransformOutputCustomPresetFilterFadeOutPtrOutputWithContext(context.Context) TransformOutputCustomPresetFilterFadeOutPtrOutput
}

type transformOutputCustomPresetFilterFadeOutPtrType TransformOutputCustomPresetFilterFadeOutArgs

func TransformOutputCustomPresetFilterFadeOutPtr(v *TransformOutputCustomPresetFilterFadeOutArgs) TransformOutputCustomPresetFilterFadeOutPtrInput {
	return (*transformOutputCustomPresetFilterFadeOutPtrType)(v)
}

func (*transformOutputCustomPresetFilterFadeOutPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetFilterFadeOut)(nil)).Elem()
}

func (i *transformOutputCustomPresetFilterFadeOutPtrType) ToTransformOutputCustomPresetFilterFadeOutPtrOutput() TransformOutputCustomPresetFilterFadeOutPtrOutput {
	return i.ToTransformOutputCustomPresetFilterFadeOutPtrOutputWithContext(context.Background())
}

func (i *transformOutputCustomPresetFilterFadeOutPtrType) ToTransformOutputCustomPresetFilterFadeOutPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterFadeOutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFilterFadeOutPtrOutput)
}

func (i *transformOutputCustomPresetFilterFadeOutPtrType) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetFilterFadeOut] {
	return pulumix.Output[*TransformOutputCustomPresetFilterFadeOut]{
		OutputState: i.ToTransformOutputCustomPresetFilterFadeOutPtrOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputCustomPresetFilterFadeOutOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetFilterFadeOutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetFilterFadeOut)(nil)).Elem()
}

func (o TransformOutputCustomPresetFilterFadeOutOutput) ToTransformOutputCustomPresetFilterFadeOutOutput() TransformOutputCustomPresetFilterFadeOutOutput {
	return o
}

func (o TransformOutputCustomPresetFilterFadeOutOutput) ToTransformOutputCustomPresetFilterFadeOutOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterFadeOutOutput {
	return o
}

func (o TransformOutputCustomPresetFilterFadeOutOutput) ToTransformOutputCustomPresetFilterFadeOutPtrOutput() TransformOutputCustomPresetFilterFadeOutPtrOutput {
	return o.ToTransformOutputCustomPresetFilterFadeOutPtrOutputWithContext(context.Background())
}

func (o TransformOutputCustomPresetFilterFadeOutOutput) ToTransformOutputCustomPresetFilterFadeOutPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterFadeOutPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformOutputCustomPresetFilterFadeOut) *TransformOutputCustomPresetFilterFadeOut {
		return &v
	}).(TransformOutputCustomPresetFilterFadeOutPtrOutput)
}

func (o TransformOutputCustomPresetFilterFadeOutOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetFilterFadeOut] {
	return pulumix.Output[TransformOutputCustomPresetFilterFadeOut]{
		OutputState: o.OutputState,
	}
}

// The duration of the fade effect in the video. The value can be in ISO 8601 format (For example, PT05S to fade In/Out a color during 5 seconds), or a frame count (For example, 10 to fade 10 frames from the start time), or a relative value to stream duration (For example, 10% to fade 10% of stream duration).
func (o TransformOutputCustomPresetFilterFadeOutOutput) Duration() pulumi.StringOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterFadeOut) string { return v.Duration }).(pulumi.StringOutput)
}

// The color for the fade in/out. It can be on the [CSS Level1 colors](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color_keywords) or an RGB/hex value: e.g: `rgb(255,0,0)`, `0xFF0000` or `#FF0000`.
func (o TransformOutputCustomPresetFilterFadeOutOutput) FadeColor() pulumi.StringOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterFadeOut) string { return v.FadeColor }).(pulumi.StringOutput)
}

// The position in the input video from where to start fade. The value can be in ISO 8601 format (For example, `PT05S` to start at 5 seconds), or a frame count (For example, `10` to start at the 10th frame), or a relative value to stream duration (For example, `10%` to start at 10% of stream duration). Default to `0`.
func (o TransformOutputCustomPresetFilterFadeOutOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterFadeOut) *string { return v.Start }).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetFilterFadeOutPtrOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetFilterFadeOutPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetFilterFadeOut)(nil)).Elem()
}

func (o TransformOutputCustomPresetFilterFadeOutPtrOutput) ToTransformOutputCustomPresetFilterFadeOutPtrOutput() TransformOutputCustomPresetFilterFadeOutPtrOutput {
	return o
}

func (o TransformOutputCustomPresetFilterFadeOutPtrOutput) ToTransformOutputCustomPresetFilterFadeOutPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterFadeOutPtrOutput {
	return o
}

func (o TransformOutputCustomPresetFilterFadeOutPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetFilterFadeOut] {
	return pulumix.Output[*TransformOutputCustomPresetFilterFadeOut]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputCustomPresetFilterFadeOutPtrOutput) Elem() TransformOutputCustomPresetFilterFadeOutOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterFadeOut) TransformOutputCustomPresetFilterFadeOut {
		if v != nil {
			return *v
		}
		var ret TransformOutputCustomPresetFilterFadeOut
		return ret
	}).(TransformOutputCustomPresetFilterFadeOutOutput)
}

// The duration of the fade effect in the video. The value can be in ISO 8601 format (For example, PT05S to fade In/Out a color during 5 seconds), or a frame count (For example, 10 to fade 10 frames from the start time), or a relative value to stream duration (For example, 10% to fade 10% of stream duration).
func (o TransformOutputCustomPresetFilterFadeOutPtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterFadeOut) *string {
		if v == nil {
			return nil
		}
		return &v.Duration
	}).(pulumi.StringPtrOutput)
}

// The color for the fade in/out. It can be on the [CSS Level1 colors](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color_keywords) or an RGB/hex value: e.g: `rgb(255,0,0)`, `0xFF0000` or `#FF0000`.
func (o TransformOutputCustomPresetFilterFadeOutPtrOutput) FadeColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterFadeOut) *string {
		if v == nil {
			return nil
		}
		return &v.FadeColor
	}).(pulumi.StringPtrOutput)
}

// The position in the input video from where to start fade. The value can be in ISO 8601 format (For example, `PT05S` to start at 5 seconds), or a frame count (For example, `10` to start at the 10th frame), or a relative value to stream duration (For example, `10%` to start at 10% of stream duration). Default to `0`.
func (o TransformOutputCustomPresetFilterFadeOutPtrOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterFadeOut) *string {
		if v == nil {
			return nil
		}
		return v.Start
	}).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetFilterOverlay struct {
	// An `audio` block as defined above.
	Audio *TransformOutputCustomPresetFilterOverlayAudio `pulumi:"audio"`
	// A `video` block as defined below.
	//
	// > **NOTE:** Each overlay can only have one type: `audio` or `video`. If you need to apply different type you must create one overlay for each one.
	Video *TransformOutputCustomPresetFilterOverlayVideo `pulumi:"video"`
}

// TransformOutputCustomPresetFilterOverlayInput is an input type that accepts TransformOutputCustomPresetFilterOverlayArgs and TransformOutputCustomPresetFilterOverlayOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetFilterOverlayInput` via:
//
//	TransformOutputCustomPresetFilterOverlayArgs{...}
type TransformOutputCustomPresetFilterOverlayInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetFilterOverlayOutput() TransformOutputCustomPresetFilterOverlayOutput
	ToTransformOutputCustomPresetFilterOverlayOutputWithContext(context.Context) TransformOutputCustomPresetFilterOverlayOutput
}

type TransformOutputCustomPresetFilterOverlayArgs struct {
	// An `audio` block as defined above.
	Audio TransformOutputCustomPresetFilterOverlayAudioPtrInput `pulumi:"audio"`
	// A `video` block as defined below.
	//
	// > **NOTE:** Each overlay can only have one type: `audio` or `video`. If you need to apply different type you must create one overlay for each one.
	Video TransformOutputCustomPresetFilterOverlayVideoPtrInput `pulumi:"video"`
}

func (TransformOutputCustomPresetFilterOverlayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetFilterOverlay)(nil)).Elem()
}

func (i TransformOutputCustomPresetFilterOverlayArgs) ToTransformOutputCustomPresetFilterOverlayOutput() TransformOutputCustomPresetFilterOverlayOutput {
	return i.ToTransformOutputCustomPresetFilterOverlayOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetFilterOverlayArgs) ToTransformOutputCustomPresetFilterOverlayOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterOverlayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFilterOverlayOutput)
}

func (i TransformOutputCustomPresetFilterOverlayArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetFilterOverlay] {
	return pulumix.Output[TransformOutputCustomPresetFilterOverlay]{
		OutputState: i.ToTransformOutputCustomPresetFilterOverlayOutputWithContext(ctx).OutputState,
	}
}

// TransformOutputCustomPresetFilterOverlayArrayInput is an input type that accepts TransformOutputCustomPresetFilterOverlayArray and TransformOutputCustomPresetFilterOverlayArrayOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetFilterOverlayArrayInput` via:
//
//	TransformOutputCustomPresetFilterOverlayArray{ TransformOutputCustomPresetFilterOverlayArgs{...} }
type TransformOutputCustomPresetFilterOverlayArrayInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetFilterOverlayArrayOutput() TransformOutputCustomPresetFilterOverlayArrayOutput
	ToTransformOutputCustomPresetFilterOverlayArrayOutputWithContext(context.Context) TransformOutputCustomPresetFilterOverlayArrayOutput
}

type TransformOutputCustomPresetFilterOverlayArray []TransformOutputCustomPresetFilterOverlayInput

func (TransformOutputCustomPresetFilterOverlayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformOutputCustomPresetFilterOverlay)(nil)).Elem()
}

func (i TransformOutputCustomPresetFilterOverlayArray) ToTransformOutputCustomPresetFilterOverlayArrayOutput() TransformOutputCustomPresetFilterOverlayArrayOutput {
	return i.ToTransformOutputCustomPresetFilterOverlayArrayOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetFilterOverlayArray) ToTransformOutputCustomPresetFilterOverlayArrayOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterOverlayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFilterOverlayArrayOutput)
}

func (i TransformOutputCustomPresetFilterOverlayArray) ToOutput(ctx context.Context) pulumix.Output[[]TransformOutputCustomPresetFilterOverlay] {
	return pulumix.Output[[]TransformOutputCustomPresetFilterOverlay]{
		OutputState: i.ToTransformOutputCustomPresetFilterOverlayArrayOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputCustomPresetFilterOverlayOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetFilterOverlayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetFilterOverlay)(nil)).Elem()
}

func (o TransformOutputCustomPresetFilterOverlayOutput) ToTransformOutputCustomPresetFilterOverlayOutput() TransformOutputCustomPresetFilterOverlayOutput {
	return o
}

func (o TransformOutputCustomPresetFilterOverlayOutput) ToTransformOutputCustomPresetFilterOverlayOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterOverlayOutput {
	return o
}

func (o TransformOutputCustomPresetFilterOverlayOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetFilterOverlay] {
	return pulumix.Output[TransformOutputCustomPresetFilterOverlay]{
		OutputState: o.OutputState,
	}
}

// An `audio` block as defined above.
func (o TransformOutputCustomPresetFilterOverlayOutput) Audio() TransformOutputCustomPresetFilterOverlayAudioPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterOverlay) *TransformOutputCustomPresetFilterOverlayAudio {
		return v.Audio
	}).(TransformOutputCustomPresetFilterOverlayAudioPtrOutput)
}

// A `video` block as defined below.
//
// > **NOTE:** Each overlay can only have one type: `audio` or `video`. If you need to apply different type you must create one overlay for each one.
func (o TransformOutputCustomPresetFilterOverlayOutput) Video() TransformOutputCustomPresetFilterOverlayVideoPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterOverlay) *TransformOutputCustomPresetFilterOverlayVideo {
		return v.Video
	}).(TransformOutputCustomPresetFilterOverlayVideoPtrOutput)
}

type TransformOutputCustomPresetFilterOverlayArrayOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetFilterOverlayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformOutputCustomPresetFilterOverlay)(nil)).Elem()
}

func (o TransformOutputCustomPresetFilterOverlayArrayOutput) ToTransformOutputCustomPresetFilterOverlayArrayOutput() TransformOutputCustomPresetFilterOverlayArrayOutput {
	return o
}

func (o TransformOutputCustomPresetFilterOverlayArrayOutput) ToTransformOutputCustomPresetFilterOverlayArrayOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterOverlayArrayOutput {
	return o
}

func (o TransformOutputCustomPresetFilterOverlayArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TransformOutputCustomPresetFilterOverlay] {
	return pulumix.Output[[]TransformOutputCustomPresetFilterOverlay]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputCustomPresetFilterOverlayArrayOutput) Index(i pulumi.IntInput) TransformOutputCustomPresetFilterOverlayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformOutputCustomPresetFilterOverlay {
		return vs[0].([]TransformOutputCustomPresetFilterOverlay)[vs[1].(int)]
	}).(TransformOutputCustomPresetFilterOverlayOutput)
}

type TransformOutputCustomPresetFilterOverlayAudio struct {
	// The gain level of audio in the overlay. The value should be in the range `0` to `1.0`. The default is `1.0`.
	AudioGainLevel *float64 `pulumi:"audioGainLevel"`
	// The end position, with reference to the input video, at which the overlay ends. The value should be in ISO 8601 format. For example, `PT30S` to end the overlay at 30 seconds into the input video. If not specified or the value is greater than the input video duration, the overlay will be applied until the end of the input video if the overlay media duration is greater than the input video duration, else the overlay will last as long as the overlay media duration.
	End *string `pulumi:"end"`
	// The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as `PT0S`).
	FadeInDuration *string `pulumi:"fadeInDuration"`
	// The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as `PT0S`).
	FadeOutDuration *string `pulumi:"fadeOutDuration"`
	// The label of the job input which is to be used as an overlay. The input must specify exact one file. You can specify an image file in JPG, PNG, GIF or BMP format, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file.
	InputLabel string `pulumi:"inputLabel"`
	// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, `PT05S` to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
	Start *string `pulumi:"start"`
}

// TransformOutputCustomPresetFilterOverlayAudioInput is an input type that accepts TransformOutputCustomPresetFilterOverlayAudioArgs and TransformOutputCustomPresetFilterOverlayAudioOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetFilterOverlayAudioInput` via:
//
//	TransformOutputCustomPresetFilterOverlayAudioArgs{...}
type TransformOutputCustomPresetFilterOverlayAudioInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetFilterOverlayAudioOutput() TransformOutputCustomPresetFilterOverlayAudioOutput
	ToTransformOutputCustomPresetFilterOverlayAudioOutputWithContext(context.Context) TransformOutputCustomPresetFilterOverlayAudioOutput
}

type TransformOutputCustomPresetFilterOverlayAudioArgs struct {
	// The gain level of audio in the overlay. The value should be in the range `0` to `1.0`. The default is `1.0`.
	AudioGainLevel pulumi.Float64PtrInput `pulumi:"audioGainLevel"`
	// The end position, with reference to the input video, at which the overlay ends. The value should be in ISO 8601 format. For example, `PT30S` to end the overlay at 30 seconds into the input video. If not specified or the value is greater than the input video duration, the overlay will be applied until the end of the input video if the overlay media duration is greater than the input video duration, else the overlay will last as long as the overlay media duration.
	End pulumi.StringPtrInput `pulumi:"end"`
	// The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as `PT0S`).
	FadeInDuration pulumi.StringPtrInput `pulumi:"fadeInDuration"`
	// The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as `PT0S`).
	FadeOutDuration pulumi.StringPtrInput `pulumi:"fadeOutDuration"`
	// The label of the job input which is to be used as an overlay. The input must specify exact one file. You can specify an image file in JPG, PNG, GIF or BMP format, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file.
	InputLabel pulumi.StringInput `pulumi:"inputLabel"`
	// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, `PT05S` to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
	Start pulumi.StringPtrInput `pulumi:"start"`
}

func (TransformOutputCustomPresetFilterOverlayAudioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetFilterOverlayAudio)(nil)).Elem()
}

func (i TransformOutputCustomPresetFilterOverlayAudioArgs) ToTransformOutputCustomPresetFilterOverlayAudioOutput() TransformOutputCustomPresetFilterOverlayAudioOutput {
	return i.ToTransformOutputCustomPresetFilterOverlayAudioOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetFilterOverlayAudioArgs) ToTransformOutputCustomPresetFilterOverlayAudioOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterOverlayAudioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFilterOverlayAudioOutput)
}

func (i TransformOutputCustomPresetFilterOverlayAudioArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetFilterOverlayAudio] {
	return pulumix.Output[TransformOutputCustomPresetFilterOverlayAudio]{
		OutputState: i.ToTransformOutputCustomPresetFilterOverlayAudioOutputWithContext(ctx).OutputState,
	}
}

func (i TransformOutputCustomPresetFilterOverlayAudioArgs) ToTransformOutputCustomPresetFilterOverlayAudioPtrOutput() TransformOutputCustomPresetFilterOverlayAudioPtrOutput {
	return i.ToTransformOutputCustomPresetFilterOverlayAudioPtrOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetFilterOverlayAudioArgs) ToTransformOutputCustomPresetFilterOverlayAudioPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterOverlayAudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFilterOverlayAudioOutput).ToTransformOutputCustomPresetFilterOverlayAudioPtrOutputWithContext(ctx)
}

// TransformOutputCustomPresetFilterOverlayAudioPtrInput is an input type that accepts TransformOutputCustomPresetFilterOverlayAudioArgs, TransformOutputCustomPresetFilterOverlayAudioPtr and TransformOutputCustomPresetFilterOverlayAudioPtrOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetFilterOverlayAudioPtrInput` via:
//
//	        TransformOutputCustomPresetFilterOverlayAudioArgs{...}
//
//	or:
//
//	        nil
type TransformOutputCustomPresetFilterOverlayAudioPtrInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetFilterOverlayAudioPtrOutput() TransformOutputCustomPresetFilterOverlayAudioPtrOutput
	ToTransformOutputCustomPresetFilterOverlayAudioPtrOutputWithContext(context.Context) TransformOutputCustomPresetFilterOverlayAudioPtrOutput
}

type transformOutputCustomPresetFilterOverlayAudioPtrType TransformOutputCustomPresetFilterOverlayAudioArgs

func TransformOutputCustomPresetFilterOverlayAudioPtr(v *TransformOutputCustomPresetFilterOverlayAudioArgs) TransformOutputCustomPresetFilterOverlayAudioPtrInput {
	return (*transformOutputCustomPresetFilterOverlayAudioPtrType)(v)
}

func (*transformOutputCustomPresetFilterOverlayAudioPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetFilterOverlayAudio)(nil)).Elem()
}

func (i *transformOutputCustomPresetFilterOverlayAudioPtrType) ToTransformOutputCustomPresetFilterOverlayAudioPtrOutput() TransformOutputCustomPresetFilterOverlayAudioPtrOutput {
	return i.ToTransformOutputCustomPresetFilterOverlayAudioPtrOutputWithContext(context.Background())
}

func (i *transformOutputCustomPresetFilterOverlayAudioPtrType) ToTransformOutputCustomPresetFilterOverlayAudioPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterOverlayAudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFilterOverlayAudioPtrOutput)
}

func (i *transformOutputCustomPresetFilterOverlayAudioPtrType) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetFilterOverlayAudio] {
	return pulumix.Output[*TransformOutputCustomPresetFilterOverlayAudio]{
		OutputState: i.ToTransformOutputCustomPresetFilterOverlayAudioPtrOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputCustomPresetFilterOverlayAudioOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetFilterOverlayAudioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetFilterOverlayAudio)(nil)).Elem()
}

func (o TransformOutputCustomPresetFilterOverlayAudioOutput) ToTransformOutputCustomPresetFilterOverlayAudioOutput() TransformOutputCustomPresetFilterOverlayAudioOutput {
	return o
}

func (o TransformOutputCustomPresetFilterOverlayAudioOutput) ToTransformOutputCustomPresetFilterOverlayAudioOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterOverlayAudioOutput {
	return o
}

func (o TransformOutputCustomPresetFilterOverlayAudioOutput) ToTransformOutputCustomPresetFilterOverlayAudioPtrOutput() TransformOutputCustomPresetFilterOverlayAudioPtrOutput {
	return o.ToTransformOutputCustomPresetFilterOverlayAudioPtrOutputWithContext(context.Background())
}

func (o TransformOutputCustomPresetFilterOverlayAudioOutput) ToTransformOutputCustomPresetFilterOverlayAudioPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterOverlayAudioPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformOutputCustomPresetFilterOverlayAudio) *TransformOutputCustomPresetFilterOverlayAudio {
		return &v
	}).(TransformOutputCustomPresetFilterOverlayAudioPtrOutput)
}

func (o TransformOutputCustomPresetFilterOverlayAudioOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetFilterOverlayAudio] {
	return pulumix.Output[TransformOutputCustomPresetFilterOverlayAudio]{
		OutputState: o.OutputState,
	}
}

// The gain level of audio in the overlay. The value should be in the range `0` to `1.0`. The default is `1.0`.
func (o TransformOutputCustomPresetFilterOverlayAudioOutput) AudioGainLevel() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterOverlayAudio) *float64 { return v.AudioGainLevel }).(pulumi.Float64PtrOutput)
}

// The end position, with reference to the input video, at which the overlay ends. The value should be in ISO 8601 format. For example, `PT30S` to end the overlay at 30 seconds into the input video. If not specified or the value is greater than the input video duration, the overlay will be applied until the end of the input video if the overlay media duration is greater than the input video duration, else the overlay will last as long as the overlay media duration.
func (o TransformOutputCustomPresetFilterOverlayAudioOutput) End() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterOverlayAudio) *string { return v.End }).(pulumi.StringPtrOutput)
}

// The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as `PT0S`).
func (o TransformOutputCustomPresetFilterOverlayAudioOutput) FadeInDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterOverlayAudio) *string { return v.FadeInDuration }).(pulumi.StringPtrOutput)
}

// The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as `PT0S`).
func (o TransformOutputCustomPresetFilterOverlayAudioOutput) FadeOutDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterOverlayAudio) *string { return v.FadeOutDuration }).(pulumi.StringPtrOutput)
}

// The label of the job input which is to be used as an overlay. The input must specify exact one file. You can specify an image file in JPG, PNG, GIF or BMP format, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file.
func (o TransformOutputCustomPresetFilterOverlayAudioOutput) InputLabel() pulumi.StringOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterOverlayAudio) string { return v.InputLabel }).(pulumi.StringOutput)
}

// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, `PT05S` to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
func (o TransformOutputCustomPresetFilterOverlayAudioOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterOverlayAudio) *string { return v.Start }).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetFilterOverlayAudioPtrOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetFilterOverlayAudioPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetFilterOverlayAudio)(nil)).Elem()
}

func (o TransformOutputCustomPresetFilterOverlayAudioPtrOutput) ToTransformOutputCustomPresetFilterOverlayAudioPtrOutput() TransformOutputCustomPresetFilterOverlayAudioPtrOutput {
	return o
}

func (o TransformOutputCustomPresetFilterOverlayAudioPtrOutput) ToTransformOutputCustomPresetFilterOverlayAudioPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterOverlayAudioPtrOutput {
	return o
}

func (o TransformOutputCustomPresetFilterOverlayAudioPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetFilterOverlayAudio] {
	return pulumix.Output[*TransformOutputCustomPresetFilterOverlayAudio]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputCustomPresetFilterOverlayAudioPtrOutput) Elem() TransformOutputCustomPresetFilterOverlayAudioOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterOverlayAudio) TransformOutputCustomPresetFilterOverlayAudio {
		if v != nil {
			return *v
		}
		var ret TransformOutputCustomPresetFilterOverlayAudio
		return ret
	}).(TransformOutputCustomPresetFilterOverlayAudioOutput)
}

// The gain level of audio in the overlay. The value should be in the range `0` to `1.0`. The default is `1.0`.
func (o TransformOutputCustomPresetFilterOverlayAudioPtrOutput) AudioGainLevel() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterOverlayAudio) *float64 {
		if v == nil {
			return nil
		}
		return v.AudioGainLevel
	}).(pulumi.Float64PtrOutput)
}

// The end position, with reference to the input video, at which the overlay ends. The value should be in ISO 8601 format. For example, `PT30S` to end the overlay at 30 seconds into the input video. If not specified or the value is greater than the input video duration, the overlay will be applied until the end of the input video if the overlay media duration is greater than the input video duration, else the overlay will last as long as the overlay media duration.
func (o TransformOutputCustomPresetFilterOverlayAudioPtrOutput) End() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterOverlayAudio) *string {
		if v == nil {
			return nil
		}
		return v.End
	}).(pulumi.StringPtrOutput)
}

// The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as `PT0S`).
func (o TransformOutputCustomPresetFilterOverlayAudioPtrOutput) FadeInDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterOverlayAudio) *string {
		if v == nil {
			return nil
		}
		return v.FadeInDuration
	}).(pulumi.StringPtrOutput)
}

// The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as `PT0S`).
func (o TransformOutputCustomPresetFilterOverlayAudioPtrOutput) FadeOutDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterOverlayAudio) *string {
		if v == nil {
			return nil
		}
		return v.FadeOutDuration
	}).(pulumi.StringPtrOutput)
}

// The label of the job input which is to be used as an overlay. The input must specify exact one file. You can specify an image file in JPG, PNG, GIF or BMP format, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file.
func (o TransformOutputCustomPresetFilterOverlayAudioPtrOutput) InputLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterOverlayAudio) *string {
		if v == nil {
			return nil
		}
		return &v.InputLabel
	}).(pulumi.StringPtrOutput)
}

// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, `PT05S` to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
func (o TransformOutputCustomPresetFilterOverlayAudioPtrOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterOverlayAudio) *string {
		if v == nil {
			return nil
		}
		return v.Start
	}).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetFilterOverlayVideo struct {
	// The gain level of audio in the overlay. The value should be in range between `0` to `1.0`. The default is `1.0`.
	AudioGainLevel *float64 `pulumi:"audioGainLevel"`
	// A `cropRectangle` block as defined above.
	CropRectangle *TransformOutputCustomPresetFilterOverlayVideoCropRectangle `pulumi:"cropRectangle"`
	// The end position, with reference to the input video, at which the overlay ends. The value should be in ISO 8601 format. For example, `PT30S` to end the overlay at 30 seconds into the input video. If not specified or the value is greater than the input video duration, the overlay will be applied until the end of the input video if the overlay media duration is greater than the input video duration, else the overlay will last as long as the overlay media duration.
	End *string `pulumi:"end"`
	// The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as `PT0S`).
	FadeInDuration *string `pulumi:"fadeInDuration"`
	// The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as `PT0S`).
	FadeOutDuration *string `pulumi:"fadeOutDuration"`
	// The label of the job input which is to be used as an overlay. The input must specify exact one file. You can specify an image file in JPG, PNG, GIF or BMP format, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file.
	InputLabel string `pulumi:"inputLabel"`
	// The opacity of the overlay. The value should be in the range between `0` to `1.0`. Default to `1.0`, which means the overlay is opaque.
	Opacity *float64 `pulumi:"opacity"`
	// A `position` block as defined above.
	Position *TransformOutputCustomPresetFilterOverlayVideoPosition `pulumi:"position"`
	// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, `PT05S` to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
	Start *string `pulumi:"start"`
}

// TransformOutputCustomPresetFilterOverlayVideoInput is an input type that accepts TransformOutputCustomPresetFilterOverlayVideoArgs and TransformOutputCustomPresetFilterOverlayVideoOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetFilterOverlayVideoInput` via:
//
//	TransformOutputCustomPresetFilterOverlayVideoArgs{...}
type TransformOutputCustomPresetFilterOverlayVideoInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetFilterOverlayVideoOutput() TransformOutputCustomPresetFilterOverlayVideoOutput
	ToTransformOutputCustomPresetFilterOverlayVideoOutputWithContext(context.Context) TransformOutputCustomPresetFilterOverlayVideoOutput
}

type TransformOutputCustomPresetFilterOverlayVideoArgs struct {
	// The gain level of audio in the overlay. The value should be in range between `0` to `1.0`. The default is `1.0`.
	AudioGainLevel pulumi.Float64PtrInput `pulumi:"audioGainLevel"`
	// A `cropRectangle` block as defined above.
	CropRectangle TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrInput `pulumi:"cropRectangle"`
	// The end position, with reference to the input video, at which the overlay ends. The value should be in ISO 8601 format. For example, `PT30S` to end the overlay at 30 seconds into the input video. If not specified or the value is greater than the input video duration, the overlay will be applied until the end of the input video if the overlay media duration is greater than the input video duration, else the overlay will last as long as the overlay media duration.
	End pulumi.StringPtrInput `pulumi:"end"`
	// The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as `PT0S`).
	FadeInDuration pulumi.StringPtrInput `pulumi:"fadeInDuration"`
	// The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as `PT0S`).
	FadeOutDuration pulumi.StringPtrInput `pulumi:"fadeOutDuration"`
	// The label of the job input which is to be used as an overlay. The input must specify exact one file. You can specify an image file in JPG, PNG, GIF or BMP format, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file.
	InputLabel pulumi.StringInput `pulumi:"inputLabel"`
	// The opacity of the overlay. The value should be in the range between `0` to `1.0`. Default to `1.0`, which means the overlay is opaque.
	Opacity pulumi.Float64PtrInput `pulumi:"opacity"`
	// A `position` block as defined above.
	Position TransformOutputCustomPresetFilterOverlayVideoPositionPtrInput `pulumi:"position"`
	// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, `PT05S` to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
	Start pulumi.StringPtrInput `pulumi:"start"`
}

func (TransformOutputCustomPresetFilterOverlayVideoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetFilterOverlayVideo)(nil)).Elem()
}

func (i TransformOutputCustomPresetFilterOverlayVideoArgs) ToTransformOutputCustomPresetFilterOverlayVideoOutput() TransformOutputCustomPresetFilterOverlayVideoOutput {
	return i.ToTransformOutputCustomPresetFilterOverlayVideoOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetFilterOverlayVideoArgs) ToTransformOutputCustomPresetFilterOverlayVideoOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterOverlayVideoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFilterOverlayVideoOutput)
}

func (i TransformOutputCustomPresetFilterOverlayVideoArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetFilterOverlayVideo] {
	return pulumix.Output[TransformOutputCustomPresetFilterOverlayVideo]{
		OutputState: i.ToTransformOutputCustomPresetFilterOverlayVideoOutputWithContext(ctx).OutputState,
	}
}

func (i TransformOutputCustomPresetFilterOverlayVideoArgs) ToTransformOutputCustomPresetFilterOverlayVideoPtrOutput() TransformOutputCustomPresetFilterOverlayVideoPtrOutput {
	return i.ToTransformOutputCustomPresetFilterOverlayVideoPtrOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetFilterOverlayVideoArgs) ToTransformOutputCustomPresetFilterOverlayVideoPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterOverlayVideoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFilterOverlayVideoOutput).ToTransformOutputCustomPresetFilterOverlayVideoPtrOutputWithContext(ctx)
}

// TransformOutputCustomPresetFilterOverlayVideoPtrInput is an input type that accepts TransformOutputCustomPresetFilterOverlayVideoArgs, TransformOutputCustomPresetFilterOverlayVideoPtr and TransformOutputCustomPresetFilterOverlayVideoPtrOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetFilterOverlayVideoPtrInput` via:
//
//	        TransformOutputCustomPresetFilterOverlayVideoArgs{...}
//
//	or:
//
//	        nil
type TransformOutputCustomPresetFilterOverlayVideoPtrInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetFilterOverlayVideoPtrOutput() TransformOutputCustomPresetFilterOverlayVideoPtrOutput
	ToTransformOutputCustomPresetFilterOverlayVideoPtrOutputWithContext(context.Context) TransformOutputCustomPresetFilterOverlayVideoPtrOutput
}

type transformOutputCustomPresetFilterOverlayVideoPtrType TransformOutputCustomPresetFilterOverlayVideoArgs

func TransformOutputCustomPresetFilterOverlayVideoPtr(v *TransformOutputCustomPresetFilterOverlayVideoArgs) TransformOutputCustomPresetFilterOverlayVideoPtrInput {
	return (*transformOutputCustomPresetFilterOverlayVideoPtrType)(v)
}

func (*transformOutputCustomPresetFilterOverlayVideoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetFilterOverlayVideo)(nil)).Elem()
}

func (i *transformOutputCustomPresetFilterOverlayVideoPtrType) ToTransformOutputCustomPresetFilterOverlayVideoPtrOutput() TransformOutputCustomPresetFilterOverlayVideoPtrOutput {
	return i.ToTransformOutputCustomPresetFilterOverlayVideoPtrOutputWithContext(context.Background())
}

func (i *transformOutputCustomPresetFilterOverlayVideoPtrType) ToTransformOutputCustomPresetFilterOverlayVideoPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterOverlayVideoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFilterOverlayVideoPtrOutput)
}

func (i *transformOutputCustomPresetFilterOverlayVideoPtrType) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetFilterOverlayVideo] {
	return pulumix.Output[*TransformOutputCustomPresetFilterOverlayVideo]{
		OutputState: i.ToTransformOutputCustomPresetFilterOverlayVideoPtrOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputCustomPresetFilterOverlayVideoOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetFilterOverlayVideoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetFilterOverlayVideo)(nil)).Elem()
}

func (o TransformOutputCustomPresetFilterOverlayVideoOutput) ToTransformOutputCustomPresetFilterOverlayVideoOutput() TransformOutputCustomPresetFilterOverlayVideoOutput {
	return o
}

func (o TransformOutputCustomPresetFilterOverlayVideoOutput) ToTransformOutputCustomPresetFilterOverlayVideoOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterOverlayVideoOutput {
	return o
}

func (o TransformOutputCustomPresetFilterOverlayVideoOutput) ToTransformOutputCustomPresetFilterOverlayVideoPtrOutput() TransformOutputCustomPresetFilterOverlayVideoPtrOutput {
	return o.ToTransformOutputCustomPresetFilterOverlayVideoPtrOutputWithContext(context.Background())
}

func (o TransformOutputCustomPresetFilterOverlayVideoOutput) ToTransformOutputCustomPresetFilterOverlayVideoPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterOverlayVideoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformOutputCustomPresetFilterOverlayVideo) *TransformOutputCustomPresetFilterOverlayVideo {
		return &v
	}).(TransformOutputCustomPresetFilterOverlayVideoPtrOutput)
}

func (o TransformOutputCustomPresetFilterOverlayVideoOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetFilterOverlayVideo] {
	return pulumix.Output[TransformOutputCustomPresetFilterOverlayVideo]{
		OutputState: o.OutputState,
	}
}

// The gain level of audio in the overlay. The value should be in range between `0` to `1.0`. The default is `1.0`.
func (o TransformOutputCustomPresetFilterOverlayVideoOutput) AudioGainLevel() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterOverlayVideo) *float64 { return v.AudioGainLevel }).(pulumi.Float64PtrOutput)
}

// A `cropRectangle` block as defined above.
func (o TransformOutputCustomPresetFilterOverlayVideoOutput) CropRectangle() TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterOverlayVideo) *TransformOutputCustomPresetFilterOverlayVideoCropRectangle {
		return v.CropRectangle
	}).(TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutput)
}

// The end position, with reference to the input video, at which the overlay ends. The value should be in ISO 8601 format. For example, `PT30S` to end the overlay at 30 seconds into the input video. If not specified or the value is greater than the input video duration, the overlay will be applied until the end of the input video if the overlay media duration is greater than the input video duration, else the overlay will last as long as the overlay media duration.
func (o TransformOutputCustomPresetFilterOverlayVideoOutput) End() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterOverlayVideo) *string { return v.End }).(pulumi.StringPtrOutput)
}

// The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as `PT0S`).
func (o TransformOutputCustomPresetFilterOverlayVideoOutput) FadeInDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterOverlayVideo) *string { return v.FadeInDuration }).(pulumi.StringPtrOutput)
}

// The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as `PT0S`).
func (o TransformOutputCustomPresetFilterOverlayVideoOutput) FadeOutDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterOverlayVideo) *string { return v.FadeOutDuration }).(pulumi.StringPtrOutput)
}

// The label of the job input which is to be used as an overlay. The input must specify exact one file. You can specify an image file in JPG, PNG, GIF or BMP format, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file.
func (o TransformOutputCustomPresetFilterOverlayVideoOutput) InputLabel() pulumi.StringOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterOverlayVideo) string { return v.InputLabel }).(pulumi.StringOutput)
}

// The opacity of the overlay. The value should be in the range between `0` to `1.0`. Default to `1.0`, which means the overlay is opaque.
func (o TransformOutputCustomPresetFilterOverlayVideoOutput) Opacity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterOverlayVideo) *float64 { return v.Opacity }).(pulumi.Float64PtrOutput)
}

// A `position` block as defined above.
func (o TransformOutputCustomPresetFilterOverlayVideoOutput) Position() TransformOutputCustomPresetFilterOverlayVideoPositionPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterOverlayVideo) *TransformOutputCustomPresetFilterOverlayVideoPosition {
		return v.Position
	}).(TransformOutputCustomPresetFilterOverlayVideoPositionPtrOutput)
}

// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, `PT05S` to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
func (o TransformOutputCustomPresetFilterOverlayVideoOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterOverlayVideo) *string { return v.Start }).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetFilterOverlayVideoPtrOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetFilterOverlayVideoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetFilterOverlayVideo)(nil)).Elem()
}

func (o TransformOutputCustomPresetFilterOverlayVideoPtrOutput) ToTransformOutputCustomPresetFilterOverlayVideoPtrOutput() TransformOutputCustomPresetFilterOverlayVideoPtrOutput {
	return o
}

func (o TransformOutputCustomPresetFilterOverlayVideoPtrOutput) ToTransformOutputCustomPresetFilterOverlayVideoPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterOverlayVideoPtrOutput {
	return o
}

func (o TransformOutputCustomPresetFilterOverlayVideoPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetFilterOverlayVideo] {
	return pulumix.Output[*TransformOutputCustomPresetFilterOverlayVideo]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputCustomPresetFilterOverlayVideoPtrOutput) Elem() TransformOutputCustomPresetFilterOverlayVideoOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterOverlayVideo) TransformOutputCustomPresetFilterOverlayVideo {
		if v != nil {
			return *v
		}
		var ret TransformOutputCustomPresetFilterOverlayVideo
		return ret
	}).(TransformOutputCustomPresetFilterOverlayVideoOutput)
}

// The gain level of audio in the overlay. The value should be in range between `0` to `1.0`. The default is `1.0`.
func (o TransformOutputCustomPresetFilterOverlayVideoPtrOutput) AudioGainLevel() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterOverlayVideo) *float64 {
		if v == nil {
			return nil
		}
		return v.AudioGainLevel
	}).(pulumi.Float64PtrOutput)
}

// A `cropRectangle` block as defined above.
func (o TransformOutputCustomPresetFilterOverlayVideoPtrOutput) CropRectangle() TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterOverlayVideo) *TransformOutputCustomPresetFilterOverlayVideoCropRectangle {
		if v == nil {
			return nil
		}
		return v.CropRectangle
	}).(TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutput)
}

// The end position, with reference to the input video, at which the overlay ends. The value should be in ISO 8601 format. For example, `PT30S` to end the overlay at 30 seconds into the input video. If not specified or the value is greater than the input video duration, the overlay will be applied until the end of the input video if the overlay media duration is greater than the input video duration, else the overlay will last as long as the overlay media duration.
func (o TransformOutputCustomPresetFilterOverlayVideoPtrOutput) End() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterOverlayVideo) *string {
		if v == nil {
			return nil
		}
		return v.End
	}).(pulumi.StringPtrOutput)
}

// The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as `PT0S`).
func (o TransformOutputCustomPresetFilterOverlayVideoPtrOutput) FadeInDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterOverlayVideo) *string {
		if v == nil {
			return nil
		}
		return v.FadeInDuration
	}).(pulumi.StringPtrOutput)
}

// The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as `PT0S`).
func (o TransformOutputCustomPresetFilterOverlayVideoPtrOutput) FadeOutDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterOverlayVideo) *string {
		if v == nil {
			return nil
		}
		return v.FadeOutDuration
	}).(pulumi.StringPtrOutput)
}

// The label of the job input which is to be used as an overlay. The input must specify exact one file. You can specify an image file in JPG, PNG, GIF or BMP format, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file.
func (o TransformOutputCustomPresetFilterOverlayVideoPtrOutput) InputLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterOverlayVideo) *string {
		if v == nil {
			return nil
		}
		return &v.InputLabel
	}).(pulumi.StringPtrOutput)
}

// The opacity of the overlay. The value should be in the range between `0` to `1.0`. Default to `1.0`, which means the overlay is opaque.
func (o TransformOutputCustomPresetFilterOverlayVideoPtrOutput) Opacity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterOverlayVideo) *float64 {
		if v == nil {
			return nil
		}
		return v.Opacity
	}).(pulumi.Float64PtrOutput)
}

// A `position` block as defined above.
func (o TransformOutputCustomPresetFilterOverlayVideoPtrOutput) Position() TransformOutputCustomPresetFilterOverlayVideoPositionPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterOverlayVideo) *TransformOutputCustomPresetFilterOverlayVideoPosition {
		if v == nil {
			return nil
		}
		return v.Position
	}).(TransformOutputCustomPresetFilterOverlayVideoPositionPtrOutput)
}

// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, `PT05S` to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
func (o TransformOutputCustomPresetFilterOverlayVideoPtrOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterOverlayVideo) *string {
		if v == nil {
			return nil
		}
		return v.Start
	}).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetFilterOverlayVideoCropRectangle struct {
	// The height of the rectangular region in pixels. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
	Height *string `pulumi:"height"`
	// The number of pixels from the left-margin. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
	Left *string `pulumi:"left"`
	// The number of pixels from the top-margin. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
	Top *string `pulumi:"top"`
	// The width of the rectangular region in pixels. This can be absolute pixel value (e.g`  100 `), or relative to the size of the video (For example, `50%`).
	Width *string `pulumi:"width"`
}

// TransformOutputCustomPresetFilterOverlayVideoCropRectangleInput is an input type that accepts TransformOutputCustomPresetFilterOverlayVideoCropRectangleArgs and TransformOutputCustomPresetFilterOverlayVideoCropRectangleOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetFilterOverlayVideoCropRectangleInput` via:
//
//	TransformOutputCustomPresetFilterOverlayVideoCropRectangleArgs{...}
type TransformOutputCustomPresetFilterOverlayVideoCropRectangleInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetFilterOverlayVideoCropRectangleOutput() TransformOutputCustomPresetFilterOverlayVideoCropRectangleOutput
	ToTransformOutputCustomPresetFilterOverlayVideoCropRectangleOutputWithContext(context.Context) TransformOutputCustomPresetFilterOverlayVideoCropRectangleOutput
}

type TransformOutputCustomPresetFilterOverlayVideoCropRectangleArgs struct {
	// The height of the rectangular region in pixels. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
	Height pulumi.StringPtrInput `pulumi:"height"`
	// The number of pixels from the left-margin. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
	Left pulumi.StringPtrInput `pulumi:"left"`
	// The number of pixels from the top-margin. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
	Top pulumi.StringPtrInput `pulumi:"top"`
	// The width of the rectangular region in pixels. This can be absolute pixel value (e.g`  100 `), or relative to the size of the video (For example, `50%`).
	Width pulumi.StringPtrInput `pulumi:"width"`
}

func (TransformOutputCustomPresetFilterOverlayVideoCropRectangleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetFilterOverlayVideoCropRectangle)(nil)).Elem()
}

func (i TransformOutputCustomPresetFilterOverlayVideoCropRectangleArgs) ToTransformOutputCustomPresetFilterOverlayVideoCropRectangleOutput() TransformOutputCustomPresetFilterOverlayVideoCropRectangleOutput {
	return i.ToTransformOutputCustomPresetFilterOverlayVideoCropRectangleOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetFilterOverlayVideoCropRectangleArgs) ToTransformOutputCustomPresetFilterOverlayVideoCropRectangleOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterOverlayVideoCropRectangleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFilterOverlayVideoCropRectangleOutput)
}

func (i TransformOutputCustomPresetFilterOverlayVideoCropRectangleArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetFilterOverlayVideoCropRectangle] {
	return pulumix.Output[TransformOutputCustomPresetFilterOverlayVideoCropRectangle]{
		OutputState: i.ToTransformOutputCustomPresetFilterOverlayVideoCropRectangleOutputWithContext(ctx).OutputState,
	}
}

func (i TransformOutputCustomPresetFilterOverlayVideoCropRectangleArgs) ToTransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutput() TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutput {
	return i.ToTransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetFilterOverlayVideoCropRectangleArgs) ToTransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFilterOverlayVideoCropRectangleOutput).ToTransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutputWithContext(ctx)
}

// TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrInput is an input type that accepts TransformOutputCustomPresetFilterOverlayVideoCropRectangleArgs, TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtr and TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrInput` via:
//
//	        TransformOutputCustomPresetFilterOverlayVideoCropRectangleArgs{...}
//
//	or:
//
//	        nil
type TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutput() TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutput
	ToTransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutputWithContext(context.Context) TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutput
}

type transformOutputCustomPresetFilterOverlayVideoCropRectanglePtrType TransformOutputCustomPresetFilterOverlayVideoCropRectangleArgs

func TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtr(v *TransformOutputCustomPresetFilterOverlayVideoCropRectangleArgs) TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrInput {
	return (*transformOutputCustomPresetFilterOverlayVideoCropRectanglePtrType)(v)
}

func (*transformOutputCustomPresetFilterOverlayVideoCropRectanglePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetFilterOverlayVideoCropRectangle)(nil)).Elem()
}

func (i *transformOutputCustomPresetFilterOverlayVideoCropRectanglePtrType) ToTransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutput() TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutput {
	return i.ToTransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutputWithContext(context.Background())
}

func (i *transformOutputCustomPresetFilterOverlayVideoCropRectanglePtrType) ToTransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutput)
}

func (i *transformOutputCustomPresetFilterOverlayVideoCropRectanglePtrType) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetFilterOverlayVideoCropRectangle] {
	return pulumix.Output[*TransformOutputCustomPresetFilterOverlayVideoCropRectangle]{
		OutputState: i.ToTransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputCustomPresetFilterOverlayVideoCropRectangleOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetFilterOverlayVideoCropRectangleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetFilterOverlayVideoCropRectangle)(nil)).Elem()
}

func (o TransformOutputCustomPresetFilterOverlayVideoCropRectangleOutput) ToTransformOutputCustomPresetFilterOverlayVideoCropRectangleOutput() TransformOutputCustomPresetFilterOverlayVideoCropRectangleOutput {
	return o
}

func (o TransformOutputCustomPresetFilterOverlayVideoCropRectangleOutput) ToTransformOutputCustomPresetFilterOverlayVideoCropRectangleOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterOverlayVideoCropRectangleOutput {
	return o
}

func (o TransformOutputCustomPresetFilterOverlayVideoCropRectangleOutput) ToTransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutput() TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutput {
	return o.ToTransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutputWithContext(context.Background())
}

func (o TransformOutputCustomPresetFilterOverlayVideoCropRectangleOutput) ToTransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformOutputCustomPresetFilterOverlayVideoCropRectangle) *TransformOutputCustomPresetFilterOverlayVideoCropRectangle {
		return &v
	}).(TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutput)
}

func (o TransformOutputCustomPresetFilterOverlayVideoCropRectangleOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetFilterOverlayVideoCropRectangle] {
	return pulumix.Output[TransformOutputCustomPresetFilterOverlayVideoCropRectangle]{
		OutputState: o.OutputState,
	}
}

// The height of the rectangular region in pixels. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
func (o TransformOutputCustomPresetFilterOverlayVideoCropRectangleOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterOverlayVideoCropRectangle) *string { return v.Height }).(pulumi.StringPtrOutput)
}

// The number of pixels from the left-margin. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
func (o TransformOutputCustomPresetFilterOverlayVideoCropRectangleOutput) Left() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterOverlayVideoCropRectangle) *string { return v.Left }).(pulumi.StringPtrOutput)
}

// The number of pixels from the top-margin. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
func (o TransformOutputCustomPresetFilterOverlayVideoCropRectangleOutput) Top() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterOverlayVideoCropRectangle) *string { return v.Top }).(pulumi.StringPtrOutput)
}

// The width of the rectangular region in pixels. This can be absolute pixel value (e.g`  100 `), or relative to the size of the video (For example, `50%`).
func (o TransformOutputCustomPresetFilterOverlayVideoCropRectangleOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterOverlayVideoCropRectangle) *string { return v.Width }).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetFilterOverlayVideoCropRectangle)(nil)).Elem()
}

func (o TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutput) ToTransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutput() TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutput {
	return o
}

func (o TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutput) ToTransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutput {
	return o
}

func (o TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetFilterOverlayVideoCropRectangle] {
	return pulumix.Output[*TransformOutputCustomPresetFilterOverlayVideoCropRectangle]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutput) Elem() TransformOutputCustomPresetFilterOverlayVideoCropRectangleOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterOverlayVideoCropRectangle) TransformOutputCustomPresetFilterOverlayVideoCropRectangle {
		if v != nil {
			return *v
		}
		var ret TransformOutputCustomPresetFilterOverlayVideoCropRectangle
		return ret
	}).(TransformOutputCustomPresetFilterOverlayVideoCropRectangleOutput)
}

// The height of the rectangular region in pixels. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
func (o TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterOverlayVideoCropRectangle) *string {
		if v == nil {
			return nil
		}
		return v.Height
	}).(pulumi.StringPtrOutput)
}

// The number of pixels from the left-margin. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
func (o TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutput) Left() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterOverlayVideoCropRectangle) *string {
		if v == nil {
			return nil
		}
		return v.Left
	}).(pulumi.StringPtrOutput)
}

// The number of pixels from the top-margin. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
func (o TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutput) Top() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterOverlayVideoCropRectangle) *string {
		if v == nil {
			return nil
		}
		return v.Top
	}).(pulumi.StringPtrOutput)
}

// The width of the rectangular region in pixels. This can be absolute pixel value (e.g`  100 `), or relative to the size of the video (For example, `50%`).
func (o TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterOverlayVideoCropRectangle) *string {
		if v == nil {
			return nil
		}
		return v.Width
	}).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetFilterOverlayVideoPosition struct {
	// The height of the rectangular region in pixels. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
	Height *string `pulumi:"height"`
	// The number of pixels from the left-margin. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
	Left *string `pulumi:"left"`
	// The number of pixels from the top-margin. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
	Top *string `pulumi:"top"`
	// The width of the rectangular region in pixels. This can be absolute pixel value (e.g`  100 `), or relative to the size of the video (For example, `50%`).
	Width *string `pulumi:"width"`
}

// TransformOutputCustomPresetFilterOverlayVideoPositionInput is an input type that accepts TransformOutputCustomPresetFilterOverlayVideoPositionArgs and TransformOutputCustomPresetFilterOverlayVideoPositionOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetFilterOverlayVideoPositionInput` via:
//
//	TransformOutputCustomPresetFilterOverlayVideoPositionArgs{...}
type TransformOutputCustomPresetFilterOverlayVideoPositionInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetFilterOverlayVideoPositionOutput() TransformOutputCustomPresetFilterOverlayVideoPositionOutput
	ToTransformOutputCustomPresetFilterOverlayVideoPositionOutputWithContext(context.Context) TransformOutputCustomPresetFilterOverlayVideoPositionOutput
}

type TransformOutputCustomPresetFilterOverlayVideoPositionArgs struct {
	// The height of the rectangular region in pixels. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
	Height pulumi.StringPtrInput `pulumi:"height"`
	// The number of pixels from the left-margin. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
	Left pulumi.StringPtrInput `pulumi:"left"`
	// The number of pixels from the top-margin. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
	Top pulumi.StringPtrInput `pulumi:"top"`
	// The width of the rectangular region in pixels. This can be absolute pixel value (e.g`  100 `), or relative to the size of the video (For example, `50%`).
	Width pulumi.StringPtrInput `pulumi:"width"`
}

func (TransformOutputCustomPresetFilterOverlayVideoPositionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetFilterOverlayVideoPosition)(nil)).Elem()
}

func (i TransformOutputCustomPresetFilterOverlayVideoPositionArgs) ToTransformOutputCustomPresetFilterOverlayVideoPositionOutput() TransformOutputCustomPresetFilterOverlayVideoPositionOutput {
	return i.ToTransformOutputCustomPresetFilterOverlayVideoPositionOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetFilterOverlayVideoPositionArgs) ToTransformOutputCustomPresetFilterOverlayVideoPositionOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterOverlayVideoPositionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFilterOverlayVideoPositionOutput)
}

func (i TransformOutputCustomPresetFilterOverlayVideoPositionArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetFilterOverlayVideoPosition] {
	return pulumix.Output[TransformOutputCustomPresetFilterOverlayVideoPosition]{
		OutputState: i.ToTransformOutputCustomPresetFilterOverlayVideoPositionOutputWithContext(ctx).OutputState,
	}
}

func (i TransformOutputCustomPresetFilterOverlayVideoPositionArgs) ToTransformOutputCustomPresetFilterOverlayVideoPositionPtrOutput() TransformOutputCustomPresetFilterOverlayVideoPositionPtrOutput {
	return i.ToTransformOutputCustomPresetFilterOverlayVideoPositionPtrOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetFilterOverlayVideoPositionArgs) ToTransformOutputCustomPresetFilterOverlayVideoPositionPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterOverlayVideoPositionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFilterOverlayVideoPositionOutput).ToTransformOutputCustomPresetFilterOverlayVideoPositionPtrOutputWithContext(ctx)
}

// TransformOutputCustomPresetFilterOverlayVideoPositionPtrInput is an input type that accepts TransformOutputCustomPresetFilterOverlayVideoPositionArgs, TransformOutputCustomPresetFilterOverlayVideoPositionPtr and TransformOutputCustomPresetFilterOverlayVideoPositionPtrOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetFilterOverlayVideoPositionPtrInput` via:
//
//	        TransformOutputCustomPresetFilterOverlayVideoPositionArgs{...}
//
//	or:
//
//	        nil
type TransformOutputCustomPresetFilterOverlayVideoPositionPtrInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetFilterOverlayVideoPositionPtrOutput() TransformOutputCustomPresetFilterOverlayVideoPositionPtrOutput
	ToTransformOutputCustomPresetFilterOverlayVideoPositionPtrOutputWithContext(context.Context) TransformOutputCustomPresetFilterOverlayVideoPositionPtrOutput
}

type transformOutputCustomPresetFilterOverlayVideoPositionPtrType TransformOutputCustomPresetFilterOverlayVideoPositionArgs

func TransformOutputCustomPresetFilterOverlayVideoPositionPtr(v *TransformOutputCustomPresetFilterOverlayVideoPositionArgs) TransformOutputCustomPresetFilterOverlayVideoPositionPtrInput {
	return (*transformOutputCustomPresetFilterOverlayVideoPositionPtrType)(v)
}

func (*transformOutputCustomPresetFilterOverlayVideoPositionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetFilterOverlayVideoPosition)(nil)).Elem()
}

func (i *transformOutputCustomPresetFilterOverlayVideoPositionPtrType) ToTransformOutputCustomPresetFilterOverlayVideoPositionPtrOutput() TransformOutputCustomPresetFilterOverlayVideoPositionPtrOutput {
	return i.ToTransformOutputCustomPresetFilterOverlayVideoPositionPtrOutputWithContext(context.Background())
}

func (i *transformOutputCustomPresetFilterOverlayVideoPositionPtrType) ToTransformOutputCustomPresetFilterOverlayVideoPositionPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterOverlayVideoPositionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFilterOverlayVideoPositionPtrOutput)
}

func (i *transformOutputCustomPresetFilterOverlayVideoPositionPtrType) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetFilterOverlayVideoPosition] {
	return pulumix.Output[*TransformOutputCustomPresetFilterOverlayVideoPosition]{
		OutputState: i.ToTransformOutputCustomPresetFilterOverlayVideoPositionPtrOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputCustomPresetFilterOverlayVideoPositionOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetFilterOverlayVideoPositionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetFilterOverlayVideoPosition)(nil)).Elem()
}

func (o TransformOutputCustomPresetFilterOverlayVideoPositionOutput) ToTransformOutputCustomPresetFilterOverlayVideoPositionOutput() TransformOutputCustomPresetFilterOverlayVideoPositionOutput {
	return o
}

func (o TransformOutputCustomPresetFilterOverlayVideoPositionOutput) ToTransformOutputCustomPresetFilterOverlayVideoPositionOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterOverlayVideoPositionOutput {
	return o
}

func (o TransformOutputCustomPresetFilterOverlayVideoPositionOutput) ToTransformOutputCustomPresetFilterOverlayVideoPositionPtrOutput() TransformOutputCustomPresetFilterOverlayVideoPositionPtrOutput {
	return o.ToTransformOutputCustomPresetFilterOverlayVideoPositionPtrOutputWithContext(context.Background())
}

func (o TransformOutputCustomPresetFilterOverlayVideoPositionOutput) ToTransformOutputCustomPresetFilterOverlayVideoPositionPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterOverlayVideoPositionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformOutputCustomPresetFilterOverlayVideoPosition) *TransformOutputCustomPresetFilterOverlayVideoPosition {
		return &v
	}).(TransformOutputCustomPresetFilterOverlayVideoPositionPtrOutput)
}

func (o TransformOutputCustomPresetFilterOverlayVideoPositionOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetFilterOverlayVideoPosition] {
	return pulumix.Output[TransformOutputCustomPresetFilterOverlayVideoPosition]{
		OutputState: o.OutputState,
	}
}

// The height of the rectangular region in pixels. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
func (o TransformOutputCustomPresetFilterOverlayVideoPositionOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterOverlayVideoPosition) *string { return v.Height }).(pulumi.StringPtrOutput)
}

// The number of pixels from the left-margin. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
func (o TransformOutputCustomPresetFilterOverlayVideoPositionOutput) Left() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterOverlayVideoPosition) *string { return v.Left }).(pulumi.StringPtrOutput)
}

// The number of pixels from the top-margin. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
func (o TransformOutputCustomPresetFilterOverlayVideoPositionOutput) Top() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterOverlayVideoPosition) *string { return v.Top }).(pulumi.StringPtrOutput)
}

// The width of the rectangular region in pixels. This can be absolute pixel value (e.g`  100 `), or relative to the size of the video (For example, `50%`).
func (o TransformOutputCustomPresetFilterOverlayVideoPositionOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFilterOverlayVideoPosition) *string { return v.Width }).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetFilterOverlayVideoPositionPtrOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetFilterOverlayVideoPositionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetFilterOverlayVideoPosition)(nil)).Elem()
}

func (o TransformOutputCustomPresetFilterOverlayVideoPositionPtrOutput) ToTransformOutputCustomPresetFilterOverlayVideoPositionPtrOutput() TransformOutputCustomPresetFilterOverlayVideoPositionPtrOutput {
	return o
}

func (o TransformOutputCustomPresetFilterOverlayVideoPositionPtrOutput) ToTransformOutputCustomPresetFilterOverlayVideoPositionPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFilterOverlayVideoPositionPtrOutput {
	return o
}

func (o TransformOutputCustomPresetFilterOverlayVideoPositionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetFilterOverlayVideoPosition] {
	return pulumix.Output[*TransformOutputCustomPresetFilterOverlayVideoPosition]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputCustomPresetFilterOverlayVideoPositionPtrOutput) Elem() TransformOutputCustomPresetFilterOverlayVideoPositionOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterOverlayVideoPosition) TransformOutputCustomPresetFilterOverlayVideoPosition {
		if v != nil {
			return *v
		}
		var ret TransformOutputCustomPresetFilterOverlayVideoPosition
		return ret
	}).(TransformOutputCustomPresetFilterOverlayVideoPositionOutput)
}

// The height of the rectangular region in pixels. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
func (o TransformOutputCustomPresetFilterOverlayVideoPositionPtrOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterOverlayVideoPosition) *string {
		if v == nil {
			return nil
		}
		return v.Height
	}).(pulumi.StringPtrOutput)
}

// The number of pixels from the left-margin. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
func (o TransformOutputCustomPresetFilterOverlayVideoPositionPtrOutput) Left() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterOverlayVideoPosition) *string {
		if v == nil {
			return nil
		}
		return v.Left
	}).(pulumi.StringPtrOutput)
}

// The number of pixels from the top-margin. This can be absolute pixel value (e.g `100`), or relative to the size of the video (For example, `50%`).
func (o TransformOutputCustomPresetFilterOverlayVideoPositionPtrOutput) Top() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterOverlayVideoPosition) *string {
		if v == nil {
			return nil
		}
		return v.Top
	}).(pulumi.StringPtrOutput)
}

// The width of the rectangular region in pixels. This can be absolute pixel value (e.g`  100 `), or relative to the size of the video (For example, `50%`).
func (o TransformOutputCustomPresetFilterOverlayVideoPositionPtrOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFilterOverlayVideoPosition) *string {
		if v == nil {
			return nil
		}
		return v.Width
	}).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetFormat struct {
	// A `jpg` block as defined below.
	Jpg *TransformOutputCustomPresetFormatJpg `pulumi:"jpg"`
	// A `mp4` block as defined below.
	Mp4 *TransformOutputCustomPresetFormatMp4 `pulumi:"mp4"`
	// A `png` block as defined below.
	Png *TransformOutputCustomPresetFormatPng `pulumi:"png"`
	// A `transportStream` block as defined below.
	//
	// > **NOTE:** Each format can only have one type: `jpg`, `mp4`, `png` or `transportStream`. If you need to apply different type you must create one format for each one.
	TransportStream *TransformOutputCustomPresetFormatTransportStream `pulumi:"transportStream"`
}

// TransformOutputCustomPresetFormatInput is an input type that accepts TransformOutputCustomPresetFormatArgs and TransformOutputCustomPresetFormatOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetFormatInput` via:
//
//	TransformOutputCustomPresetFormatArgs{...}
type TransformOutputCustomPresetFormatInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetFormatOutput() TransformOutputCustomPresetFormatOutput
	ToTransformOutputCustomPresetFormatOutputWithContext(context.Context) TransformOutputCustomPresetFormatOutput
}

type TransformOutputCustomPresetFormatArgs struct {
	// A `jpg` block as defined below.
	Jpg TransformOutputCustomPresetFormatJpgPtrInput `pulumi:"jpg"`
	// A `mp4` block as defined below.
	Mp4 TransformOutputCustomPresetFormatMp4PtrInput `pulumi:"mp4"`
	// A `png` block as defined below.
	Png TransformOutputCustomPresetFormatPngPtrInput `pulumi:"png"`
	// A `transportStream` block as defined below.
	//
	// > **NOTE:** Each format can only have one type: `jpg`, `mp4`, `png` or `transportStream`. If you need to apply different type you must create one format for each one.
	TransportStream TransformOutputCustomPresetFormatTransportStreamPtrInput `pulumi:"transportStream"`
}

func (TransformOutputCustomPresetFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetFormat)(nil)).Elem()
}

func (i TransformOutputCustomPresetFormatArgs) ToTransformOutputCustomPresetFormatOutput() TransformOutputCustomPresetFormatOutput {
	return i.ToTransformOutputCustomPresetFormatOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetFormatArgs) ToTransformOutputCustomPresetFormatOutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFormatOutput)
}

func (i TransformOutputCustomPresetFormatArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetFormat] {
	return pulumix.Output[TransformOutputCustomPresetFormat]{
		OutputState: i.ToTransformOutputCustomPresetFormatOutputWithContext(ctx).OutputState,
	}
}

// TransformOutputCustomPresetFormatArrayInput is an input type that accepts TransformOutputCustomPresetFormatArray and TransformOutputCustomPresetFormatArrayOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetFormatArrayInput` via:
//
//	TransformOutputCustomPresetFormatArray{ TransformOutputCustomPresetFormatArgs{...} }
type TransformOutputCustomPresetFormatArrayInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetFormatArrayOutput() TransformOutputCustomPresetFormatArrayOutput
	ToTransformOutputCustomPresetFormatArrayOutputWithContext(context.Context) TransformOutputCustomPresetFormatArrayOutput
}

type TransformOutputCustomPresetFormatArray []TransformOutputCustomPresetFormatInput

func (TransformOutputCustomPresetFormatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformOutputCustomPresetFormat)(nil)).Elem()
}

func (i TransformOutputCustomPresetFormatArray) ToTransformOutputCustomPresetFormatArrayOutput() TransformOutputCustomPresetFormatArrayOutput {
	return i.ToTransformOutputCustomPresetFormatArrayOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetFormatArray) ToTransformOutputCustomPresetFormatArrayOutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFormatArrayOutput)
}

func (i TransformOutputCustomPresetFormatArray) ToOutput(ctx context.Context) pulumix.Output[[]TransformOutputCustomPresetFormat] {
	return pulumix.Output[[]TransformOutputCustomPresetFormat]{
		OutputState: i.ToTransformOutputCustomPresetFormatArrayOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputCustomPresetFormatOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetFormat)(nil)).Elem()
}

func (o TransformOutputCustomPresetFormatOutput) ToTransformOutputCustomPresetFormatOutput() TransformOutputCustomPresetFormatOutput {
	return o
}

func (o TransformOutputCustomPresetFormatOutput) ToTransformOutputCustomPresetFormatOutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatOutput {
	return o
}

func (o TransformOutputCustomPresetFormatOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetFormat] {
	return pulumix.Output[TransformOutputCustomPresetFormat]{
		OutputState: o.OutputState,
	}
}

// A `jpg` block as defined below.
func (o TransformOutputCustomPresetFormatOutput) Jpg() TransformOutputCustomPresetFormatJpgPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFormat) *TransformOutputCustomPresetFormatJpg { return v.Jpg }).(TransformOutputCustomPresetFormatJpgPtrOutput)
}

// A `mp4` block as defined below.
func (o TransformOutputCustomPresetFormatOutput) Mp4() TransformOutputCustomPresetFormatMp4PtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFormat) *TransformOutputCustomPresetFormatMp4 { return v.Mp4 }).(TransformOutputCustomPresetFormatMp4PtrOutput)
}

// A `png` block as defined below.
func (o TransformOutputCustomPresetFormatOutput) Png() TransformOutputCustomPresetFormatPngPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFormat) *TransformOutputCustomPresetFormatPng { return v.Png }).(TransformOutputCustomPresetFormatPngPtrOutput)
}

// A `transportStream` block as defined below.
//
// > **NOTE:** Each format can only have one type: `jpg`, `mp4`, `png` or `transportStream`. If you need to apply different type you must create one format for each one.
func (o TransformOutputCustomPresetFormatOutput) TransportStream() TransformOutputCustomPresetFormatTransportStreamPtrOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFormat) *TransformOutputCustomPresetFormatTransportStream {
		return v.TransportStream
	}).(TransformOutputCustomPresetFormatTransportStreamPtrOutput)
}

type TransformOutputCustomPresetFormatArrayOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetFormatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformOutputCustomPresetFormat)(nil)).Elem()
}

func (o TransformOutputCustomPresetFormatArrayOutput) ToTransformOutputCustomPresetFormatArrayOutput() TransformOutputCustomPresetFormatArrayOutput {
	return o
}

func (o TransformOutputCustomPresetFormatArrayOutput) ToTransformOutputCustomPresetFormatArrayOutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatArrayOutput {
	return o
}

func (o TransformOutputCustomPresetFormatArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TransformOutputCustomPresetFormat] {
	return pulumix.Output[[]TransformOutputCustomPresetFormat]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputCustomPresetFormatArrayOutput) Index(i pulumi.IntInput) TransformOutputCustomPresetFormatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformOutputCustomPresetFormat {
		return vs[0].([]TransformOutputCustomPresetFormat)[vs[1].(int)]
	}).(TransformOutputCustomPresetFormatOutput)
}

type TransformOutputCustomPresetFormatJpg struct {
	// The file naming pattern used for the creation of output files. The following macros are supported in the file name: `{Basename}` - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. `{Extension}` - The appropriate extension for this format. `{Label}` - The label assigned to the codec/layer. `{Index}` - A unique index for thumbnails. Only applicable to thumbnails. `{AudioStream}` - string "Audio" plus audio stream number(start from 1). `{Bitrate}` - The audio/video bitrate in kbps. Not applicable to thumbnails. `{Codec}` - The type of the audio/video codec. `{Resolution}` - The video resolution. Any unsubstituted macros will be collapsed and removed from the filename.
	FilenamePattern string `pulumi:"filenamePattern"`
}

// TransformOutputCustomPresetFormatJpgInput is an input type that accepts TransformOutputCustomPresetFormatJpgArgs and TransformOutputCustomPresetFormatJpgOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetFormatJpgInput` via:
//
//	TransformOutputCustomPresetFormatJpgArgs{...}
type TransformOutputCustomPresetFormatJpgInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetFormatJpgOutput() TransformOutputCustomPresetFormatJpgOutput
	ToTransformOutputCustomPresetFormatJpgOutputWithContext(context.Context) TransformOutputCustomPresetFormatJpgOutput
}

type TransformOutputCustomPresetFormatJpgArgs struct {
	// The file naming pattern used for the creation of output files. The following macros are supported in the file name: `{Basename}` - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. `{Extension}` - The appropriate extension for this format. `{Label}` - The label assigned to the codec/layer. `{Index}` - A unique index for thumbnails. Only applicable to thumbnails. `{AudioStream}` - string "Audio" plus audio stream number(start from 1). `{Bitrate}` - The audio/video bitrate in kbps. Not applicable to thumbnails. `{Codec}` - The type of the audio/video codec. `{Resolution}` - The video resolution. Any unsubstituted macros will be collapsed and removed from the filename.
	FilenamePattern pulumi.StringInput `pulumi:"filenamePattern"`
}

func (TransformOutputCustomPresetFormatJpgArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetFormatJpg)(nil)).Elem()
}

func (i TransformOutputCustomPresetFormatJpgArgs) ToTransformOutputCustomPresetFormatJpgOutput() TransformOutputCustomPresetFormatJpgOutput {
	return i.ToTransformOutputCustomPresetFormatJpgOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetFormatJpgArgs) ToTransformOutputCustomPresetFormatJpgOutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatJpgOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFormatJpgOutput)
}

func (i TransformOutputCustomPresetFormatJpgArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetFormatJpg] {
	return pulumix.Output[TransformOutputCustomPresetFormatJpg]{
		OutputState: i.ToTransformOutputCustomPresetFormatJpgOutputWithContext(ctx).OutputState,
	}
}

func (i TransformOutputCustomPresetFormatJpgArgs) ToTransformOutputCustomPresetFormatJpgPtrOutput() TransformOutputCustomPresetFormatJpgPtrOutput {
	return i.ToTransformOutputCustomPresetFormatJpgPtrOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetFormatJpgArgs) ToTransformOutputCustomPresetFormatJpgPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatJpgPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFormatJpgOutput).ToTransformOutputCustomPresetFormatJpgPtrOutputWithContext(ctx)
}

// TransformOutputCustomPresetFormatJpgPtrInput is an input type that accepts TransformOutputCustomPresetFormatJpgArgs, TransformOutputCustomPresetFormatJpgPtr and TransformOutputCustomPresetFormatJpgPtrOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetFormatJpgPtrInput` via:
//
//	        TransformOutputCustomPresetFormatJpgArgs{...}
//
//	or:
//
//	        nil
type TransformOutputCustomPresetFormatJpgPtrInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetFormatJpgPtrOutput() TransformOutputCustomPresetFormatJpgPtrOutput
	ToTransformOutputCustomPresetFormatJpgPtrOutputWithContext(context.Context) TransformOutputCustomPresetFormatJpgPtrOutput
}

type transformOutputCustomPresetFormatJpgPtrType TransformOutputCustomPresetFormatJpgArgs

func TransformOutputCustomPresetFormatJpgPtr(v *TransformOutputCustomPresetFormatJpgArgs) TransformOutputCustomPresetFormatJpgPtrInput {
	return (*transformOutputCustomPresetFormatJpgPtrType)(v)
}

func (*transformOutputCustomPresetFormatJpgPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetFormatJpg)(nil)).Elem()
}

func (i *transformOutputCustomPresetFormatJpgPtrType) ToTransformOutputCustomPresetFormatJpgPtrOutput() TransformOutputCustomPresetFormatJpgPtrOutput {
	return i.ToTransformOutputCustomPresetFormatJpgPtrOutputWithContext(context.Background())
}

func (i *transformOutputCustomPresetFormatJpgPtrType) ToTransformOutputCustomPresetFormatJpgPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatJpgPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFormatJpgPtrOutput)
}

func (i *transformOutputCustomPresetFormatJpgPtrType) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetFormatJpg] {
	return pulumix.Output[*TransformOutputCustomPresetFormatJpg]{
		OutputState: i.ToTransformOutputCustomPresetFormatJpgPtrOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputCustomPresetFormatJpgOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetFormatJpgOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetFormatJpg)(nil)).Elem()
}

func (o TransformOutputCustomPresetFormatJpgOutput) ToTransformOutputCustomPresetFormatJpgOutput() TransformOutputCustomPresetFormatJpgOutput {
	return o
}

func (o TransformOutputCustomPresetFormatJpgOutput) ToTransformOutputCustomPresetFormatJpgOutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatJpgOutput {
	return o
}

func (o TransformOutputCustomPresetFormatJpgOutput) ToTransformOutputCustomPresetFormatJpgPtrOutput() TransformOutputCustomPresetFormatJpgPtrOutput {
	return o.ToTransformOutputCustomPresetFormatJpgPtrOutputWithContext(context.Background())
}

func (o TransformOutputCustomPresetFormatJpgOutput) ToTransformOutputCustomPresetFormatJpgPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatJpgPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformOutputCustomPresetFormatJpg) *TransformOutputCustomPresetFormatJpg {
		return &v
	}).(TransformOutputCustomPresetFormatJpgPtrOutput)
}

func (o TransformOutputCustomPresetFormatJpgOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetFormatJpg] {
	return pulumix.Output[TransformOutputCustomPresetFormatJpg]{
		OutputState: o.OutputState,
	}
}

// The file naming pattern used for the creation of output files. The following macros are supported in the file name: `{Basename}` - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. `{Extension}` - The appropriate extension for this format. `{Label}` - The label assigned to the codec/layer. `{Index}` - A unique index for thumbnails. Only applicable to thumbnails. `{AudioStream}` - string "Audio" plus audio stream number(start from 1). `{Bitrate}` - The audio/video bitrate in kbps. Not applicable to thumbnails. `{Codec}` - The type of the audio/video codec. `{Resolution}` - The video resolution. Any unsubstituted macros will be collapsed and removed from the filename.
func (o TransformOutputCustomPresetFormatJpgOutput) FilenamePattern() pulumi.StringOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFormatJpg) string { return v.FilenamePattern }).(pulumi.StringOutput)
}

type TransformOutputCustomPresetFormatJpgPtrOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetFormatJpgPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetFormatJpg)(nil)).Elem()
}

func (o TransformOutputCustomPresetFormatJpgPtrOutput) ToTransformOutputCustomPresetFormatJpgPtrOutput() TransformOutputCustomPresetFormatJpgPtrOutput {
	return o
}

func (o TransformOutputCustomPresetFormatJpgPtrOutput) ToTransformOutputCustomPresetFormatJpgPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatJpgPtrOutput {
	return o
}

func (o TransformOutputCustomPresetFormatJpgPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetFormatJpg] {
	return pulumix.Output[*TransformOutputCustomPresetFormatJpg]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputCustomPresetFormatJpgPtrOutput) Elem() TransformOutputCustomPresetFormatJpgOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFormatJpg) TransformOutputCustomPresetFormatJpg {
		if v != nil {
			return *v
		}
		var ret TransformOutputCustomPresetFormatJpg
		return ret
	}).(TransformOutputCustomPresetFormatJpgOutput)
}

// The file naming pattern used for the creation of output files. The following macros are supported in the file name: `{Basename}` - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. `{Extension}` - The appropriate extension for this format. `{Label}` - The label assigned to the codec/layer. `{Index}` - A unique index for thumbnails. Only applicable to thumbnails. `{AudioStream}` - string "Audio" plus audio stream number(start from 1). `{Bitrate}` - The audio/video bitrate in kbps. Not applicable to thumbnails. `{Codec}` - The type of the audio/video codec. `{Resolution}` - The video resolution. Any unsubstituted macros will be collapsed and removed from the filename.
func (o TransformOutputCustomPresetFormatJpgPtrOutput) FilenamePattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFormatJpg) *string {
		if v == nil {
			return nil
		}
		return &v.FilenamePattern
	}).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetFormatMp4 struct {
	// The file naming pattern used for the creation of output files. The following macros are supported in the file name: `{Basename}` - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. `{Extension}` - The appropriate extension for this format. `{Label}` - The label assigned to the codec/layer. `{Index}` - A unique index for thumbnails. Only applicable to thumbnails. `{AudioStream}` - string "Audio" plus audio stream number(start from 1). `{Bitrate}` - The audio/video bitrate in kbps. Not applicable to thumbnails. `{Codec}` - The type of the audio/video codec. `{Resolution}` - The video resolution. Any unsubstituted macros will be collapsed and removed from the filename.
	FilenamePattern string `pulumi:"filenamePattern"`
	// One or more `outputFile` blocks as defined below.
	OutputFiles []TransformOutputCustomPresetFormatMp4OutputFile `pulumi:"outputFiles"`
}

// TransformOutputCustomPresetFormatMp4Input is an input type that accepts TransformOutputCustomPresetFormatMp4Args and TransformOutputCustomPresetFormatMp4Output values.
// You can construct a concrete instance of `TransformOutputCustomPresetFormatMp4Input` via:
//
//	TransformOutputCustomPresetFormatMp4Args{...}
type TransformOutputCustomPresetFormatMp4Input interface {
	pulumi.Input

	ToTransformOutputCustomPresetFormatMp4Output() TransformOutputCustomPresetFormatMp4Output
	ToTransformOutputCustomPresetFormatMp4OutputWithContext(context.Context) TransformOutputCustomPresetFormatMp4Output
}

type TransformOutputCustomPresetFormatMp4Args struct {
	// The file naming pattern used for the creation of output files. The following macros are supported in the file name: `{Basename}` - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. `{Extension}` - The appropriate extension for this format. `{Label}` - The label assigned to the codec/layer. `{Index}` - A unique index for thumbnails. Only applicable to thumbnails. `{AudioStream}` - string "Audio" plus audio stream number(start from 1). `{Bitrate}` - The audio/video bitrate in kbps. Not applicable to thumbnails. `{Codec}` - The type of the audio/video codec. `{Resolution}` - The video resolution. Any unsubstituted macros will be collapsed and removed from the filename.
	FilenamePattern pulumi.StringInput `pulumi:"filenamePattern"`
	// One or more `outputFile` blocks as defined below.
	OutputFiles TransformOutputCustomPresetFormatMp4OutputFileArrayInput `pulumi:"outputFiles"`
}

func (TransformOutputCustomPresetFormatMp4Args) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetFormatMp4)(nil)).Elem()
}

func (i TransformOutputCustomPresetFormatMp4Args) ToTransformOutputCustomPresetFormatMp4Output() TransformOutputCustomPresetFormatMp4Output {
	return i.ToTransformOutputCustomPresetFormatMp4OutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetFormatMp4Args) ToTransformOutputCustomPresetFormatMp4OutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatMp4Output {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFormatMp4Output)
}

func (i TransformOutputCustomPresetFormatMp4Args) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetFormatMp4] {
	return pulumix.Output[TransformOutputCustomPresetFormatMp4]{
		OutputState: i.ToTransformOutputCustomPresetFormatMp4OutputWithContext(ctx).OutputState,
	}
}

func (i TransformOutputCustomPresetFormatMp4Args) ToTransformOutputCustomPresetFormatMp4PtrOutput() TransformOutputCustomPresetFormatMp4PtrOutput {
	return i.ToTransformOutputCustomPresetFormatMp4PtrOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetFormatMp4Args) ToTransformOutputCustomPresetFormatMp4PtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatMp4PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFormatMp4Output).ToTransformOutputCustomPresetFormatMp4PtrOutputWithContext(ctx)
}

// TransformOutputCustomPresetFormatMp4PtrInput is an input type that accepts TransformOutputCustomPresetFormatMp4Args, TransformOutputCustomPresetFormatMp4Ptr and TransformOutputCustomPresetFormatMp4PtrOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetFormatMp4PtrInput` via:
//
//	        TransformOutputCustomPresetFormatMp4Args{...}
//
//	or:
//
//	        nil
type TransformOutputCustomPresetFormatMp4PtrInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetFormatMp4PtrOutput() TransformOutputCustomPresetFormatMp4PtrOutput
	ToTransformOutputCustomPresetFormatMp4PtrOutputWithContext(context.Context) TransformOutputCustomPresetFormatMp4PtrOutput
}

type transformOutputCustomPresetFormatMp4PtrType TransformOutputCustomPresetFormatMp4Args

func TransformOutputCustomPresetFormatMp4Ptr(v *TransformOutputCustomPresetFormatMp4Args) TransformOutputCustomPresetFormatMp4PtrInput {
	return (*transformOutputCustomPresetFormatMp4PtrType)(v)
}

func (*transformOutputCustomPresetFormatMp4PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetFormatMp4)(nil)).Elem()
}

func (i *transformOutputCustomPresetFormatMp4PtrType) ToTransformOutputCustomPresetFormatMp4PtrOutput() TransformOutputCustomPresetFormatMp4PtrOutput {
	return i.ToTransformOutputCustomPresetFormatMp4PtrOutputWithContext(context.Background())
}

func (i *transformOutputCustomPresetFormatMp4PtrType) ToTransformOutputCustomPresetFormatMp4PtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatMp4PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFormatMp4PtrOutput)
}

func (i *transformOutputCustomPresetFormatMp4PtrType) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetFormatMp4] {
	return pulumix.Output[*TransformOutputCustomPresetFormatMp4]{
		OutputState: i.ToTransformOutputCustomPresetFormatMp4PtrOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputCustomPresetFormatMp4Output struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetFormatMp4Output) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetFormatMp4)(nil)).Elem()
}

func (o TransformOutputCustomPresetFormatMp4Output) ToTransformOutputCustomPresetFormatMp4Output() TransformOutputCustomPresetFormatMp4Output {
	return o
}

func (o TransformOutputCustomPresetFormatMp4Output) ToTransformOutputCustomPresetFormatMp4OutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatMp4Output {
	return o
}

func (o TransformOutputCustomPresetFormatMp4Output) ToTransformOutputCustomPresetFormatMp4PtrOutput() TransformOutputCustomPresetFormatMp4PtrOutput {
	return o.ToTransformOutputCustomPresetFormatMp4PtrOutputWithContext(context.Background())
}

func (o TransformOutputCustomPresetFormatMp4Output) ToTransformOutputCustomPresetFormatMp4PtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatMp4PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformOutputCustomPresetFormatMp4) *TransformOutputCustomPresetFormatMp4 {
		return &v
	}).(TransformOutputCustomPresetFormatMp4PtrOutput)
}

func (o TransformOutputCustomPresetFormatMp4Output) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetFormatMp4] {
	return pulumix.Output[TransformOutputCustomPresetFormatMp4]{
		OutputState: o.OutputState,
	}
}

// The file naming pattern used for the creation of output files. The following macros are supported in the file name: `{Basename}` - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. `{Extension}` - The appropriate extension for this format. `{Label}` - The label assigned to the codec/layer. `{Index}` - A unique index for thumbnails. Only applicable to thumbnails. `{AudioStream}` - string "Audio" plus audio stream number(start from 1). `{Bitrate}` - The audio/video bitrate in kbps. Not applicable to thumbnails. `{Codec}` - The type of the audio/video codec. `{Resolution}` - The video resolution. Any unsubstituted macros will be collapsed and removed from the filename.
func (o TransformOutputCustomPresetFormatMp4Output) FilenamePattern() pulumi.StringOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFormatMp4) string { return v.FilenamePattern }).(pulumi.StringOutput)
}

// One or more `outputFile` blocks as defined below.
func (o TransformOutputCustomPresetFormatMp4Output) OutputFiles() TransformOutputCustomPresetFormatMp4OutputFileArrayOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFormatMp4) []TransformOutputCustomPresetFormatMp4OutputFile {
		return v.OutputFiles
	}).(TransformOutputCustomPresetFormatMp4OutputFileArrayOutput)
}

type TransformOutputCustomPresetFormatMp4PtrOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetFormatMp4PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetFormatMp4)(nil)).Elem()
}

func (o TransformOutputCustomPresetFormatMp4PtrOutput) ToTransformOutputCustomPresetFormatMp4PtrOutput() TransformOutputCustomPresetFormatMp4PtrOutput {
	return o
}

func (o TransformOutputCustomPresetFormatMp4PtrOutput) ToTransformOutputCustomPresetFormatMp4PtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatMp4PtrOutput {
	return o
}

func (o TransformOutputCustomPresetFormatMp4PtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetFormatMp4] {
	return pulumix.Output[*TransformOutputCustomPresetFormatMp4]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputCustomPresetFormatMp4PtrOutput) Elem() TransformOutputCustomPresetFormatMp4Output {
	return o.ApplyT(func(v *TransformOutputCustomPresetFormatMp4) TransformOutputCustomPresetFormatMp4 {
		if v != nil {
			return *v
		}
		var ret TransformOutputCustomPresetFormatMp4
		return ret
	}).(TransformOutputCustomPresetFormatMp4Output)
}

// The file naming pattern used for the creation of output files. The following macros are supported in the file name: `{Basename}` - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. `{Extension}` - The appropriate extension for this format. `{Label}` - The label assigned to the codec/layer. `{Index}` - A unique index for thumbnails. Only applicable to thumbnails. `{AudioStream}` - string "Audio" plus audio stream number(start from 1). `{Bitrate}` - The audio/video bitrate in kbps. Not applicable to thumbnails. `{Codec}` - The type of the audio/video codec. `{Resolution}` - The video resolution. Any unsubstituted macros will be collapsed and removed from the filename.
func (o TransformOutputCustomPresetFormatMp4PtrOutput) FilenamePattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFormatMp4) *string {
		if v == nil {
			return nil
		}
		return &v.FilenamePattern
	}).(pulumi.StringPtrOutput)
}

// One or more `outputFile` blocks as defined below.
func (o TransformOutputCustomPresetFormatMp4PtrOutput) OutputFiles() TransformOutputCustomPresetFormatMp4OutputFileArrayOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFormatMp4) []TransformOutputCustomPresetFormatMp4OutputFile {
		if v == nil {
			return nil
		}
		return v.OutputFiles
	}).(TransformOutputCustomPresetFormatMp4OutputFileArrayOutput)
}

type TransformOutputCustomPresetFormatMp4OutputFile struct {
	// The list of labels that describe how the encoder should multiplex video and audio into an output file. For example, if the encoder is producing two video layers with labels `v1` and `v2`, and one audio layer with label `a1`, then an array like `["v1", "a1"]` tells the encoder to produce an output file with the video track represented by `v1` and the audio track represented by `a1`.
	Labels []string `pulumi:"labels"`
}

// TransformOutputCustomPresetFormatMp4OutputFileInput is an input type that accepts TransformOutputCustomPresetFormatMp4OutputFileArgs and TransformOutputCustomPresetFormatMp4OutputFileOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetFormatMp4OutputFileInput` via:
//
//	TransformOutputCustomPresetFormatMp4OutputFileArgs{...}
type TransformOutputCustomPresetFormatMp4OutputFileInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetFormatMp4OutputFileOutput() TransformOutputCustomPresetFormatMp4OutputFileOutput
	ToTransformOutputCustomPresetFormatMp4OutputFileOutputWithContext(context.Context) TransformOutputCustomPresetFormatMp4OutputFileOutput
}

type TransformOutputCustomPresetFormatMp4OutputFileArgs struct {
	// The list of labels that describe how the encoder should multiplex video and audio into an output file. For example, if the encoder is producing two video layers with labels `v1` and `v2`, and one audio layer with label `a1`, then an array like `["v1", "a1"]` tells the encoder to produce an output file with the video track represented by `v1` and the audio track represented by `a1`.
	Labels pulumi.StringArrayInput `pulumi:"labels"`
}

func (TransformOutputCustomPresetFormatMp4OutputFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetFormatMp4OutputFile)(nil)).Elem()
}

func (i TransformOutputCustomPresetFormatMp4OutputFileArgs) ToTransformOutputCustomPresetFormatMp4OutputFileOutput() TransformOutputCustomPresetFormatMp4OutputFileOutput {
	return i.ToTransformOutputCustomPresetFormatMp4OutputFileOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetFormatMp4OutputFileArgs) ToTransformOutputCustomPresetFormatMp4OutputFileOutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatMp4OutputFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFormatMp4OutputFileOutput)
}

func (i TransformOutputCustomPresetFormatMp4OutputFileArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetFormatMp4OutputFile] {
	return pulumix.Output[TransformOutputCustomPresetFormatMp4OutputFile]{
		OutputState: i.ToTransformOutputCustomPresetFormatMp4OutputFileOutputWithContext(ctx).OutputState,
	}
}

// TransformOutputCustomPresetFormatMp4OutputFileArrayInput is an input type that accepts TransformOutputCustomPresetFormatMp4OutputFileArray and TransformOutputCustomPresetFormatMp4OutputFileArrayOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetFormatMp4OutputFileArrayInput` via:
//
//	TransformOutputCustomPresetFormatMp4OutputFileArray{ TransformOutputCustomPresetFormatMp4OutputFileArgs{...} }
type TransformOutputCustomPresetFormatMp4OutputFileArrayInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetFormatMp4OutputFileArrayOutput() TransformOutputCustomPresetFormatMp4OutputFileArrayOutput
	ToTransformOutputCustomPresetFormatMp4OutputFileArrayOutputWithContext(context.Context) TransformOutputCustomPresetFormatMp4OutputFileArrayOutput
}

type TransformOutputCustomPresetFormatMp4OutputFileArray []TransformOutputCustomPresetFormatMp4OutputFileInput

func (TransformOutputCustomPresetFormatMp4OutputFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformOutputCustomPresetFormatMp4OutputFile)(nil)).Elem()
}

func (i TransformOutputCustomPresetFormatMp4OutputFileArray) ToTransformOutputCustomPresetFormatMp4OutputFileArrayOutput() TransformOutputCustomPresetFormatMp4OutputFileArrayOutput {
	return i.ToTransformOutputCustomPresetFormatMp4OutputFileArrayOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetFormatMp4OutputFileArray) ToTransformOutputCustomPresetFormatMp4OutputFileArrayOutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatMp4OutputFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFormatMp4OutputFileArrayOutput)
}

func (i TransformOutputCustomPresetFormatMp4OutputFileArray) ToOutput(ctx context.Context) pulumix.Output[[]TransformOutputCustomPresetFormatMp4OutputFile] {
	return pulumix.Output[[]TransformOutputCustomPresetFormatMp4OutputFile]{
		OutputState: i.ToTransformOutputCustomPresetFormatMp4OutputFileArrayOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputCustomPresetFormatMp4OutputFileOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetFormatMp4OutputFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetFormatMp4OutputFile)(nil)).Elem()
}

func (o TransformOutputCustomPresetFormatMp4OutputFileOutput) ToTransformOutputCustomPresetFormatMp4OutputFileOutput() TransformOutputCustomPresetFormatMp4OutputFileOutput {
	return o
}

func (o TransformOutputCustomPresetFormatMp4OutputFileOutput) ToTransformOutputCustomPresetFormatMp4OutputFileOutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatMp4OutputFileOutput {
	return o
}

func (o TransformOutputCustomPresetFormatMp4OutputFileOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetFormatMp4OutputFile] {
	return pulumix.Output[TransformOutputCustomPresetFormatMp4OutputFile]{
		OutputState: o.OutputState,
	}
}

// The list of labels that describe how the encoder should multiplex video and audio into an output file. For example, if the encoder is producing two video layers with labels `v1` and `v2`, and one audio layer with label `a1`, then an array like `["v1", "a1"]` tells the encoder to produce an output file with the video track represented by `v1` and the audio track represented by `a1`.
func (o TransformOutputCustomPresetFormatMp4OutputFileOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFormatMp4OutputFile) []string { return v.Labels }).(pulumi.StringArrayOutput)
}

type TransformOutputCustomPresetFormatMp4OutputFileArrayOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetFormatMp4OutputFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformOutputCustomPresetFormatMp4OutputFile)(nil)).Elem()
}

func (o TransformOutputCustomPresetFormatMp4OutputFileArrayOutput) ToTransformOutputCustomPresetFormatMp4OutputFileArrayOutput() TransformOutputCustomPresetFormatMp4OutputFileArrayOutput {
	return o
}

func (o TransformOutputCustomPresetFormatMp4OutputFileArrayOutput) ToTransformOutputCustomPresetFormatMp4OutputFileArrayOutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatMp4OutputFileArrayOutput {
	return o
}

func (o TransformOutputCustomPresetFormatMp4OutputFileArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TransformOutputCustomPresetFormatMp4OutputFile] {
	return pulumix.Output[[]TransformOutputCustomPresetFormatMp4OutputFile]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputCustomPresetFormatMp4OutputFileArrayOutput) Index(i pulumi.IntInput) TransformOutputCustomPresetFormatMp4OutputFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformOutputCustomPresetFormatMp4OutputFile {
		return vs[0].([]TransformOutputCustomPresetFormatMp4OutputFile)[vs[1].(int)]
	}).(TransformOutputCustomPresetFormatMp4OutputFileOutput)
}

type TransformOutputCustomPresetFormatPng struct {
	// The file naming pattern used for the creation of output files. The following macros are supported in the file name: `{Basename}` - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. `{Extension}` - The appropriate extension for this format. `{Label}` - The label assigned to the codec/layer. `{Index}` - A unique index for thumbnails. Only applicable to thumbnails. `{AudioStream}` - string "Audio" plus audio stream number(start from 1). `{Bitrate}` - The audio/video bitrate in kbps. Not applicable to thumbnails. `{Codec}` - The type of the audio/video codec. `{Resolution}` - The video resolution. Any unsubstituted macros will be collapsed and removed from the filename.
	FilenamePattern string `pulumi:"filenamePattern"`
}

// TransformOutputCustomPresetFormatPngInput is an input type that accepts TransformOutputCustomPresetFormatPngArgs and TransformOutputCustomPresetFormatPngOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetFormatPngInput` via:
//
//	TransformOutputCustomPresetFormatPngArgs{...}
type TransformOutputCustomPresetFormatPngInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetFormatPngOutput() TransformOutputCustomPresetFormatPngOutput
	ToTransformOutputCustomPresetFormatPngOutputWithContext(context.Context) TransformOutputCustomPresetFormatPngOutput
}

type TransformOutputCustomPresetFormatPngArgs struct {
	// The file naming pattern used for the creation of output files. The following macros are supported in the file name: `{Basename}` - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. `{Extension}` - The appropriate extension for this format. `{Label}` - The label assigned to the codec/layer. `{Index}` - A unique index for thumbnails. Only applicable to thumbnails. `{AudioStream}` - string "Audio" plus audio stream number(start from 1). `{Bitrate}` - The audio/video bitrate in kbps. Not applicable to thumbnails. `{Codec}` - The type of the audio/video codec. `{Resolution}` - The video resolution. Any unsubstituted macros will be collapsed and removed from the filename.
	FilenamePattern pulumi.StringInput `pulumi:"filenamePattern"`
}

func (TransformOutputCustomPresetFormatPngArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetFormatPng)(nil)).Elem()
}

func (i TransformOutputCustomPresetFormatPngArgs) ToTransformOutputCustomPresetFormatPngOutput() TransformOutputCustomPresetFormatPngOutput {
	return i.ToTransformOutputCustomPresetFormatPngOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetFormatPngArgs) ToTransformOutputCustomPresetFormatPngOutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatPngOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFormatPngOutput)
}

func (i TransformOutputCustomPresetFormatPngArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetFormatPng] {
	return pulumix.Output[TransformOutputCustomPresetFormatPng]{
		OutputState: i.ToTransformOutputCustomPresetFormatPngOutputWithContext(ctx).OutputState,
	}
}

func (i TransformOutputCustomPresetFormatPngArgs) ToTransformOutputCustomPresetFormatPngPtrOutput() TransformOutputCustomPresetFormatPngPtrOutput {
	return i.ToTransformOutputCustomPresetFormatPngPtrOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetFormatPngArgs) ToTransformOutputCustomPresetFormatPngPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatPngPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFormatPngOutput).ToTransformOutputCustomPresetFormatPngPtrOutputWithContext(ctx)
}

// TransformOutputCustomPresetFormatPngPtrInput is an input type that accepts TransformOutputCustomPresetFormatPngArgs, TransformOutputCustomPresetFormatPngPtr and TransformOutputCustomPresetFormatPngPtrOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetFormatPngPtrInput` via:
//
//	        TransformOutputCustomPresetFormatPngArgs{...}
//
//	or:
//
//	        nil
type TransformOutputCustomPresetFormatPngPtrInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetFormatPngPtrOutput() TransformOutputCustomPresetFormatPngPtrOutput
	ToTransformOutputCustomPresetFormatPngPtrOutputWithContext(context.Context) TransformOutputCustomPresetFormatPngPtrOutput
}

type transformOutputCustomPresetFormatPngPtrType TransformOutputCustomPresetFormatPngArgs

func TransformOutputCustomPresetFormatPngPtr(v *TransformOutputCustomPresetFormatPngArgs) TransformOutputCustomPresetFormatPngPtrInput {
	return (*transformOutputCustomPresetFormatPngPtrType)(v)
}

func (*transformOutputCustomPresetFormatPngPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetFormatPng)(nil)).Elem()
}

func (i *transformOutputCustomPresetFormatPngPtrType) ToTransformOutputCustomPresetFormatPngPtrOutput() TransformOutputCustomPresetFormatPngPtrOutput {
	return i.ToTransformOutputCustomPresetFormatPngPtrOutputWithContext(context.Background())
}

func (i *transformOutputCustomPresetFormatPngPtrType) ToTransformOutputCustomPresetFormatPngPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatPngPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFormatPngPtrOutput)
}

func (i *transformOutputCustomPresetFormatPngPtrType) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetFormatPng] {
	return pulumix.Output[*TransformOutputCustomPresetFormatPng]{
		OutputState: i.ToTransformOutputCustomPresetFormatPngPtrOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputCustomPresetFormatPngOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetFormatPngOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetFormatPng)(nil)).Elem()
}

func (o TransformOutputCustomPresetFormatPngOutput) ToTransformOutputCustomPresetFormatPngOutput() TransformOutputCustomPresetFormatPngOutput {
	return o
}

func (o TransformOutputCustomPresetFormatPngOutput) ToTransformOutputCustomPresetFormatPngOutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatPngOutput {
	return o
}

func (o TransformOutputCustomPresetFormatPngOutput) ToTransformOutputCustomPresetFormatPngPtrOutput() TransformOutputCustomPresetFormatPngPtrOutput {
	return o.ToTransformOutputCustomPresetFormatPngPtrOutputWithContext(context.Background())
}

func (o TransformOutputCustomPresetFormatPngOutput) ToTransformOutputCustomPresetFormatPngPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatPngPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformOutputCustomPresetFormatPng) *TransformOutputCustomPresetFormatPng {
		return &v
	}).(TransformOutputCustomPresetFormatPngPtrOutput)
}

func (o TransformOutputCustomPresetFormatPngOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetFormatPng] {
	return pulumix.Output[TransformOutputCustomPresetFormatPng]{
		OutputState: o.OutputState,
	}
}

// The file naming pattern used for the creation of output files. The following macros are supported in the file name: `{Basename}` - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. `{Extension}` - The appropriate extension for this format. `{Label}` - The label assigned to the codec/layer. `{Index}` - A unique index for thumbnails. Only applicable to thumbnails. `{AudioStream}` - string "Audio" plus audio stream number(start from 1). `{Bitrate}` - The audio/video bitrate in kbps. Not applicable to thumbnails. `{Codec}` - The type of the audio/video codec. `{Resolution}` - The video resolution. Any unsubstituted macros will be collapsed and removed from the filename.
func (o TransformOutputCustomPresetFormatPngOutput) FilenamePattern() pulumi.StringOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFormatPng) string { return v.FilenamePattern }).(pulumi.StringOutput)
}

type TransformOutputCustomPresetFormatPngPtrOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetFormatPngPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetFormatPng)(nil)).Elem()
}

func (o TransformOutputCustomPresetFormatPngPtrOutput) ToTransformOutputCustomPresetFormatPngPtrOutput() TransformOutputCustomPresetFormatPngPtrOutput {
	return o
}

func (o TransformOutputCustomPresetFormatPngPtrOutput) ToTransformOutputCustomPresetFormatPngPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatPngPtrOutput {
	return o
}

func (o TransformOutputCustomPresetFormatPngPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetFormatPng] {
	return pulumix.Output[*TransformOutputCustomPresetFormatPng]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputCustomPresetFormatPngPtrOutput) Elem() TransformOutputCustomPresetFormatPngOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFormatPng) TransformOutputCustomPresetFormatPng {
		if v != nil {
			return *v
		}
		var ret TransformOutputCustomPresetFormatPng
		return ret
	}).(TransformOutputCustomPresetFormatPngOutput)
}

// The file naming pattern used for the creation of output files. The following macros are supported in the file name: `{Basename}` - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. `{Extension}` - The appropriate extension for this format. `{Label}` - The label assigned to the codec/layer. `{Index}` - A unique index for thumbnails. Only applicable to thumbnails. `{AudioStream}` - string "Audio" plus audio stream number(start from 1). `{Bitrate}` - The audio/video bitrate in kbps. Not applicable to thumbnails. `{Codec}` - The type of the audio/video codec. `{Resolution}` - The video resolution. Any unsubstituted macros will be collapsed and removed from the filename.
func (o TransformOutputCustomPresetFormatPngPtrOutput) FilenamePattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFormatPng) *string {
		if v == nil {
			return nil
		}
		return &v.FilenamePattern
	}).(pulumi.StringPtrOutput)
}

type TransformOutputCustomPresetFormatTransportStream struct {
	// The file naming pattern used for the creation of output files. The following macros are supported in the file name: `{Basename}` - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. `{Extension}` - The appropriate extension for this format. `{Label}` - The label assigned to the codec/layer. `{Index}` - A unique index for thumbnails. Only applicable to thumbnails. `{AudioStream}` - string "Audio" plus audio stream number(start from 1). `{Bitrate}` - The audio/video bitrate in kbps. Not applicable to thumbnails. `{Codec}` - The type of the audio/video codec. `{Resolution}` - The video resolution. Any unsubstituted macros will be collapsed and removed from the filename.
	FilenamePattern string `pulumi:"filenamePattern"`
	// One or more `outputFile` blocks as defined above.
	OutputFiles []TransformOutputCustomPresetFormatTransportStreamOutputFile `pulumi:"outputFiles"`
}

// TransformOutputCustomPresetFormatTransportStreamInput is an input type that accepts TransformOutputCustomPresetFormatTransportStreamArgs and TransformOutputCustomPresetFormatTransportStreamOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetFormatTransportStreamInput` via:
//
//	TransformOutputCustomPresetFormatTransportStreamArgs{...}
type TransformOutputCustomPresetFormatTransportStreamInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetFormatTransportStreamOutput() TransformOutputCustomPresetFormatTransportStreamOutput
	ToTransformOutputCustomPresetFormatTransportStreamOutputWithContext(context.Context) TransformOutputCustomPresetFormatTransportStreamOutput
}

type TransformOutputCustomPresetFormatTransportStreamArgs struct {
	// The file naming pattern used for the creation of output files. The following macros are supported in the file name: `{Basename}` - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. `{Extension}` - The appropriate extension for this format. `{Label}` - The label assigned to the codec/layer. `{Index}` - A unique index for thumbnails. Only applicable to thumbnails. `{AudioStream}` - string "Audio" plus audio stream number(start from 1). `{Bitrate}` - The audio/video bitrate in kbps. Not applicable to thumbnails. `{Codec}` - The type of the audio/video codec. `{Resolution}` - The video resolution. Any unsubstituted macros will be collapsed and removed from the filename.
	FilenamePattern pulumi.StringInput `pulumi:"filenamePattern"`
	// One or more `outputFile` blocks as defined above.
	OutputFiles TransformOutputCustomPresetFormatTransportStreamOutputFileArrayInput `pulumi:"outputFiles"`
}

func (TransformOutputCustomPresetFormatTransportStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetFormatTransportStream)(nil)).Elem()
}

func (i TransformOutputCustomPresetFormatTransportStreamArgs) ToTransformOutputCustomPresetFormatTransportStreamOutput() TransformOutputCustomPresetFormatTransportStreamOutput {
	return i.ToTransformOutputCustomPresetFormatTransportStreamOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetFormatTransportStreamArgs) ToTransformOutputCustomPresetFormatTransportStreamOutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatTransportStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFormatTransportStreamOutput)
}

func (i TransformOutputCustomPresetFormatTransportStreamArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetFormatTransportStream] {
	return pulumix.Output[TransformOutputCustomPresetFormatTransportStream]{
		OutputState: i.ToTransformOutputCustomPresetFormatTransportStreamOutputWithContext(ctx).OutputState,
	}
}

func (i TransformOutputCustomPresetFormatTransportStreamArgs) ToTransformOutputCustomPresetFormatTransportStreamPtrOutput() TransformOutputCustomPresetFormatTransportStreamPtrOutput {
	return i.ToTransformOutputCustomPresetFormatTransportStreamPtrOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetFormatTransportStreamArgs) ToTransformOutputCustomPresetFormatTransportStreamPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatTransportStreamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFormatTransportStreamOutput).ToTransformOutputCustomPresetFormatTransportStreamPtrOutputWithContext(ctx)
}

// TransformOutputCustomPresetFormatTransportStreamPtrInput is an input type that accepts TransformOutputCustomPresetFormatTransportStreamArgs, TransformOutputCustomPresetFormatTransportStreamPtr and TransformOutputCustomPresetFormatTransportStreamPtrOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetFormatTransportStreamPtrInput` via:
//
//	        TransformOutputCustomPresetFormatTransportStreamArgs{...}
//
//	or:
//
//	        nil
type TransformOutputCustomPresetFormatTransportStreamPtrInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetFormatTransportStreamPtrOutput() TransformOutputCustomPresetFormatTransportStreamPtrOutput
	ToTransformOutputCustomPresetFormatTransportStreamPtrOutputWithContext(context.Context) TransformOutputCustomPresetFormatTransportStreamPtrOutput
}

type transformOutputCustomPresetFormatTransportStreamPtrType TransformOutputCustomPresetFormatTransportStreamArgs

func TransformOutputCustomPresetFormatTransportStreamPtr(v *TransformOutputCustomPresetFormatTransportStreamArgs) TransformOutputCustomPresetFormatTransportStreamPtrInput {
	return (*transformOutputCustomPresetFormatTransportStreamPtrType)(v)
}

func (*transformOutputCustomPresetFormatTransportStreamPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetFormatTransportStream)(nil)).Elem()
}

func (i *transformOutputCustomPresetFormatTransportStreamPtrType) ToTransformOutputCustomPresetFormatTransportStreamPtrOutput() TransformOutputCustomPresetFormatTransportStreamPtrOutput {
	return i.ToTransformOutputCustomPresetFormatTransportStreamPtrOutputWithContext(context.Background())
}

func (i *transformOutputCustomPresetFormatTransportStreamPtrType) ToTransformOutputCustomPresetFormatTransportStreamPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatTransportStreamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFormatTransportStreamPtrOutput)
}

func (i *transformOutputCustomPresetFormatTransportStreamPtrType) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetFormatTransportStream] {
	return pulumix.Output[*TransformOutputCustomPresetFormatTransportStream]{
		OutputState: i.ToTransformOutputCustomPresetFormatTransportStreamPtrOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputCustomPresetFormatTransportStreamOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetFormatTransportStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetFormatTransportStream)(nil)).Elem()
}

func (o TransformOutputCustomPresetFormatTransportStreamOutput) ToTransformOutputCustomPresetFormatTransportStreamOutput() TransformOutputCustomPresetFormatTransportStreamOutput {
	return o
}

func (o TransformOutputCustomPresetFormatTransportStreamOutput) ToTransformOutputCustomPresetFormatTransportStreamOutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatTransportStreamOutput {
	return o
}

func (o TransformOutputCustomPresetFormatTransportStreamOutput) ToTransformOutputCustomPresetFormatTransportStreamPtrOutput() TransformOutputCustomPresetFormatTransportStreamPtrOutput {
	return o.ToTransformOutputCustomPresetFormatTransportStreamPtrOutputWithContext(context.Background())
}

func (o TransformOutputCustomPresetFormatTransportStreamOutput) ToTransformOutputCustomPresetFormatTransportStreamPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatTransportStreamPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformOutputCustomPresetFormatTransportStream) *TransformOutputCustomPresetFormatTransportStream {
		return &v
	}).(TransformOutputCustomPresetFormatTransportStreamPtrOutput)
}

func (o TransformOutputCustomPresetFormatTransportStreamOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetFormatTransportStream] {
	return pulumix.Output[TransformOutputCustomPresetFormatTransportStream]{
		OutputState: o.OutputState,
	}
}

// The file naming pattern used for the creation of output files. The following macros are supported in the file name: `{Basename}` - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. `{Extension}` - The appropriate extension for this format. `{Label}` - The label assigned to the codec/layer. `{Index}` - A unique index for thumbnails. Only applicable to thumbnails. `{AudioStream}` - string "Audio" plus audio stream number(start from 1). `{Bitrate}` - The audio/video bitrate in kbps. Not applicable to thumbnails. `{Codec}` - The type of the audio/video codec. `{Resolution}` - The video resolution. Any unsubstituted macros will be collapsed and removed from the filename.
func (o TransformOutputCustomPresetFormatTransportStreamOutput) FilenamePattern() pulumi.StringOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFormatTransportStream) string { return v.FilenamePattern }).(pulumi.StringOutput)
}

// One or more `outputFile` blocks as defined above.
func (o TransformOutputCustomPresetFormatTransportStreamOutput) OutputFiles() TransformOutputCustomPresetFormatTransportStreamOutputFileArrayOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFormatTransportStream) []TransformOutputCustomPresetFormatTransportStreamOutputFile {
		return v.OutputFiles
	}).(TransformOutputCustomPresetFormatTransportStreamOutputFileArrayOutput)
}

type TransformOutputCustomPresetFormatTransportStreamPtrOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetFormatTransportStreamPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputCustomPresetFormatTransportStream)(nil)).Elem()
}

func (o TransformOutputCustomPresetFormatTransportStreamPtrOutput) ToTransformOutputCustomPresetFormatTransportStreamPtrOutput() TransformOutputCustomPresetFormatTransportStreamPtrOutput {
	return o
}

func (o TransformOutputCustomPresetFormatTransportStreamPtrOutput) ToTransformOutputCustomPresetFormatTransportStreamPtrOutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatTransportStreamPtrOutput {
	return o
}

func (o TransformOutputCustomPresetFormatTransportStreamPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputCustomPresetFormatTransportStream] {
	return pulumix.Output[*TransformOutputCustomPresetFormatTransportStream]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputCustomPresetFormatTransportStreamPtrOutput) Elem() TransformOutputCustomPresetFormatTransportStreamOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFormatTransportStream) TransformOutputCustomPresetFormatTransportStream {
		if v != nil {
			return *v
		}
		var ret TransformOutputCustomPresetFormatTransportStream
		return ret
	}).(TransformOutputCustomPresetFormatTransportStreamOutput)
}

// The file naming pattern used for the creation of output files. The following macros are supported in the file name: `{Basename}` - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. `{Extension}` - The appropriate extension for this format. `{Label}` - The label assigned to the codec/layer. `{Index}` - A unique index for thumbnails. Only applicable to thumbnails. `{AudioStream}` - string "Audio" plus audio stream number(start from 1). `{Bitrate}` - The audio/video bitrate in kbps. Not applicable to thumbnails. `{Codec}` - The type of the audio/video codec. `{Resolution}` - The video resolution. Any unsubstituted macros will be collapsed and removed from the filename.
func (o TransformOutputCustomPresetFormatTransportStreamPtrOutput) FilenamePattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFormatTransportStream) *string {
		if v == nil {
			return nil
		}
		return &v.FilenamePattern
	}).(pulumi.StringPtrOutput)
}

// One or more `outputFile` blocks as defined above.
func (o TransformOutputCustomPresetFormatTransportStreamPtrOutput) OutputFiles() TransformOutputCustomPresetFormatTransportStreamOutputFileArrayOutput {
	return o.ApplyT(func(v *TransformOutputCustomPresetFormatTransportStream) []TransformOutputCustomPresetFormatTransportStreamOutputFile {
		if v == nil {
			return nil
		}
		return v.OutputFiles
	}).(TransformOutputCustomPresetFormatTransportStreamOutputFileArrayOutput)
}

type TransformOutputCustomPresetFormatTransportStreamOutputFile struct {
	// The list of labels that describe how the encoder should multiplex video and audio into an output file. For example, if the encoder is producing two video layers with labels `v1` and `v2`, and one audio layer with label `a1`, then an array like `["v1", "a1"]` tells the encoder to produce an output file with the video track represented by `v1` and the audio track represented by `a1`.
	Labels []string `pulumi:"labels"`
}

// TransformOutputCustomPresetFormatTransportStreamOutputFileInput is an input type that accepts TransformOutputCustomPresetFormatTransportStreamOutputFileArgs and TransformOutputCustomPresetFormatTransportStreamOutputFileOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetFormatTransportStreamOutputFileInput` via:
//
//	TransformOutputCustomPresetFormatTransportStreamOutputFileArgs{...}
type TransformOutputCustomPresetFormatTransportStreamOutputFileInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetFormatTransportStreamOutputFileOutput() TransformOutputCustomPresetFormatTransportStreamOutputFileOutput
	ToTransformOutputCustomPresetFormatTransportStreamOutputFileOutputWithContext(context.Context) TransformOutputCustomPresetFormatTransportStreamOutputFileOutput
}

type TransformOutputCustomPresetFormatTransportStreamOutputFileArgs struct {
	// The list of labels that describe how the encoder should multiplex video and audio into an output file. For example, if the encoder is producing two video layers with labels `v1` and `v2`, and one audio layer with label `a1`, then an array like `["v1", "a1"]` tells the encoder to produce an output file with the video track represented by `v1` and the audio track represented by `a1`.
	Labels pulumi.StringArrayInput `pulumi:"labels"`
}

func (TransformOutputCustomPresetFormatTransportStreamOutputFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetFormatTransportStreamOutputFile)(nil)).Elem()
}

func (i TransformOutputCustomPresetFormatTransportStreamOutputFileArgs) ToTransformOutputCustomPresetFormatTransportStreamOutputFileOutput() TransformOutputCustomPresetFormatTransportStreamOutputFileOutput {
	return i.ToTransformOutputCustomPresetFormatTransportStreamOutputFileOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetFormatTransportStreamOutputFileArgs) ToTransformOutputCustomPresetFormatTransportStreamOutputFileOutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatTransportStreamOutputFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFormatTransportStreamOutputFileOutput)
}

func (i TransformOutputCustomPresetFormatTransportStreamOutputFileArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetFormatTransportStreamOutputFile] {
	return pulumix.Output[TransformOutputCustomPresetFormatTransportStreamOutputFile]{
		OutputState: i.ToTransformOutputCustomPresetFormatTransportStreamOutputFileOutputWithContext(ctx).OutputState,
	}
}

// TransformOutputCustomPresetFormatTransportStreamOutputFileArrayInput is an input type that accepts TransformOutputCustomPresetFormatTransportStreamOutputFileArray and TransformOutputCustomPresetFormatTransportStreamOutputFileArrayOutput values.
// You can construct a concrete instance of `TransformOutputCustomPresetFormatTransportStreamOutputFileArrayInput` via:
//
//	TransformOutputCustomPresetFormatTransportStreamOutputFileArray{ TransformOutputCustomPresetFormatTransportStreamOutputFileArgs{...} }
type TransformOutputCustomPresetFormatTransportStreamOutputFileArrayInput interface {
	pulumi.Input

	ToTransformOutputCustomPresetFormatTransportStreamOutputFileArrayOutput() TransformOutputCustomPresetFormatTransportStreamOutputFileArrayOutput
	ToTransformOutputCustomPresetFormatTransportStreamOutputFileArrayOutputWithContext(context.Context) TransformOutputCustomPresetFormatTransportStreamOutputFileArrayOutput
}

type TransformOutputCustomPresetFormatTransportStreamOutputFileArray []TransformOutputCustomPresetFormatTransportStreamOutputFileInput

func (TransformOutputCustomPresetFormatTransportStreamOutputFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformOutputCustomPresetFormatTransportStreamOutputFile)(nil)).Elem()
}

func (i TransformOutputCustomPresetFormatTransportStreamOutputFileArray) ToTransformOutputCustomPresetFormatTransportStreamOutputFileArrayOutput() TransformOutputCustomPresetFormatTransportStreamOutputFileArrayOutput {
	return i.ToTransformOutputCustomPresetFormatTransportStreamOutputFileArrayOutputWithContext(context.Background())
}

func (i TransformOutputCustomPresetFormatTransportStreamOutputFileArray) ToTransformOutputCustomPresetFormatTransportStreamOutputFileArrayOutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatTransportStreamOutputFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputCustomPresetFormatTransportStreamOutputFileArrayOutput)
}

func (i TransformOutputCustomPresetFormatTransportStreamOutputFileArray) ToOutput(ctx context.Context) pulumix.Output[[]TransformOutputCustomPresetFormatTransportStreamOutputFile] {
	return pulumix.Output[[]TransformOutputCustomPresetFormatTransportStreamOutputFile]{
		OutputState: i.ToTransformOutputCustomPresetFormatTransportStreamOutputFileArrayOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputCustomPresetFormatTransportStreamOutputFileOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetFormatTransportStreamOutputFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputCustomPresetFormatTransportStreamOutputFile)(nil)).Elem()
}

func (o TransformOutputCustomPresetFormatTransportStreamOutputFileOutput) ToTransformOutputCustomPresetFormatTransportStreamOutputFileOutput() TransformOutputCustomPresetFormatTransportStreamOutputFileOutput {
	return o
}

func (o TransformOutputCustomPresetFormatTransportStreamOutputFileOutput) ToTransformOutputCustomPresetFormatTransportStreamOutputFileOutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatTransportStreamOutputFileOutput {
	return o
}

func (o TransformOutputCustomPresetFormatTransportStreamOutputFileOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputCustomPresetFormatTransportStreamOutputFile] {
	return pulumix.Output[TransformOutputCustomPresetFormatTransportStreamOutputFile]{
		OutputState: o.OutputState,
	}
}

// The list of labels that describe how the encoder should multiplex video and audio into an output file. For example, if the encoder is producing two video layers with labels `v1` and `v2`, and one audio layer with label `a1`, then an array like `["v1", "a1"]` tells the encoder to produce an output file with the video track represented by `v1` and the audio track represented by `a1`.
func (o TransformOutputCustomPresetFormatTransportStreamOutputFileOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TransformOutputCustomPresetFormatTransportStreamOutputFile) []string { return v.Labels }).(pulumi.StringArrayOutput)
}

type TransformOutputCustomPresetFormatTransportStreamOutputFileArrayOutput struct{ *pulumi.OutputState }

func (TransformOutputCustomPresetFormatTransportStreamOutputFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformOutputCustomPresetFormatTransportStreamOutputFile)(nil)).Elem()
}

func (o TransformOutputCustomPresetFormatTransportStreamOutputFileArrayOutput) ToTransformOutputCustomPresetFormatTransportStreamOutputFileArrayOutput() TransformOutputCustomPresetFormatTransportStreamOutputFileArrayOutput {
	return o
}

func (o TransformOutputCustomPresetFormatTransportStreamOutputFileArrayOutput) ToTransformOutputCustomPresetFormatTransportStreamOutputFileArrayOutputWithContext(ctx context.Context) TransformOutputCustomPresetFormatTransportStreamOutputFileArrayOutput {
	return o
}

func (o TransformOutputCustomPresetFormatTransportStreamOutputFileArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TransformOutputCustomPresetFormatTransportStreamOutputFile] {
	return pulumix.Output[[]TransformOutputCustomPresetFormatTransportStreamOutputFile]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputCustomPresetFormatTransportStreamOutputFileArrayOutput) Index(i pulumi.IntInput) TransformOutputCustomPresetFormatTransportStreamOutputFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformOutputCustomPresetFormatTransportStreamOutputFile {
		return vs[0].([]TransformOutputCustomPresetFormatTransportStreamOutputFile)[vs[1].(int)]
	}).(TransformOutputCustomPresetFormatTransportStreamOutputFileOutput)
}

type TransformOutputFaceDetectorPreset struct {
	// Possible values are `SourceResolution` or `StandardDefinition`. Specifies the maximum resolution at which your video is analyzed. which will keep the input video at its original resolution when analyzed. Using `StandardDefinition` will resize input videos to standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution. For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to `StandardDefinition` will reduce the time it takes to process high resolution video. It may also reduce the cost of using this component (see <https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics> for details). However, faces that end up being too small in the resized video may not be detected. Default to `SourceResolution`.
	AnalysisResolution *string `pulumi:"analysisResolution"`
	// Specifies the type of blur to apply to faces in the output video. Possible values are `Black`, `Box`, `High`, `Low`,and `Med`.
	BlurType *string `pulumi:"blurType"`
	// Dictionary containing key value pairs for parameters not exposed in the preset itself.
	ExperimentalOptions map[string]string `pulumi:"experimentalOptions"`
	// This mode provides the ability to choose between the following settings: 1) `Analyze` - For detection only. This mode generates a metadata JSON file marking appearances of faces throughout the video. Where possible, appearances of the same person are assigned the same ID. 2) `Combined` - Additionally redacts(blurs) detected faces. 3) `Redact` - This enables a 2-pass process, allowing for selective redaction of a subset of detected faces. It takes in the metadata file from a prior analyze pass, along with the source video, and a user-selected subset of IDs that require redaction. Default to `Analyze`.
	FaceRedactorMode *string `pulumi:"faceRedactorMode"`
}

// TransformOutputFaceDetectorPresetInput is an input type that accepts TransformOutputFaceDetectorPresetArgs and TransformOutputFaceDetectorPresetOutput values.
// You can construct a concrete instance of `TransformOutputFaceDetectorPresetInput` via:
//
//	TransformOutputFaceDetectorPresetArgs{...}
type TransformOutputFaceDetectorPresetInput interface {
	pulumi.Input

	ToTransformOutputFaceDetectorPresetOutput() TransformOutputFaceDetectorPresetOutput
	ToTransformOutputFaceDetectorPresetOutputWithContext(context.Context) TransformOutputFaceDetectorPresetOutput
}

type TransformOutputFaceDetectorPresetArgs struct {
	// Possible values are `SourceResolution` or `StandardDefinition`. Specifies the maximum resolution at which your video is analyzed. which will keep the input video at its original resolution when analyzed. Using `StandardDefinition` will resize input videos to standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution. For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to `StandardDefinition` will reduce the time it takes to process high resolution video. It may also reduce the cost of using this component (see <https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics> for details). However, faces that end up being too small in the resized video may not be detected. Default to `SourceResolution`.
	AnalysisResolution pulumi.StringPtrInput `pulumi:"analysisResolution"`
	// Specifies the type of blur to apply to faces in the output video. Possible values are `Black`, `Box`, `High`, `Low`,and `Med`.
	BlurType pulumi.StringPtrInput `pulumi:"blurType"`
	// Dictionary containing key value pairs for parameters not exposed in the preset itself.
	ExperimentalOptions pulumi.StringMapInput `pulumi:"experimentalOptions"`
	// This mode provides the ability to choose between the following settings: 1) `Analyze` - For detection only. This mode generates a metadata JSON file marking appearances of faces throughout the video. Where possible, appearances of the same person are assigned the same ID. 2) `Combined` - Additionally redacts(blurs) detected faces. 3) `Redact` - This enables a 2-pass process, allowing for selective redaction of a subset of detected faces. It takes in the metadata file from a prior analyze pass, along with the source video, and a user-selected subset of IDs that require redaction. Default to `Analyze`.
	FaceRedactorMode pulumi.StringPtrInput `pulumi:"faceRedactorMode"`
}

func (TransformOutputFaceDetectorPresetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputFaceDetectorPreset)(nil)).Elem()
}

func (i TransformOutputFaceDetectorPresetArgs) ToTransformOutputFaceDetectorPresetOutput() TransformOutputFaceDetectorPresetOutput {
	return i.ToTransformOutputFaceDetectorPresetOutputWithContext(context.Background())
}

func (i TransformOutputFaceDetectorPresetArgs) ToTransformOutputFaceDetectorPresetOutputWithContext(ctx context.Context) TransformOutputFaceDetectorPresetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputFaceDetectorPresetOutput)
}

func (i TransformOutputFaceDetectorPresetArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputFaceDetectorPreset] {
	return pulumix.Output[TransformOutputFaceDetectorPreset]{
		OutputState: i.ToTransformOutputFaceDetectorPresetOutputWithContext(ctx).OutputState,
	}
}

func (i TransformOutputFaceDetectorPresetArgs) ToTransformOutputFaceDetectorPresetPtrOutput() TransformOutputFaceDetectorPresetPtrOutput {
	return i.ToTransformOutputFaceDetectorPresetPtrOutputWithContext(context.Background())
}

func (i TransformOutputFaceDetectorPresetArgs) ToTransformOutputFaceDetectorPresetPtrOutputWithContext(ctx context.Context) TransformOutputFaceDetectorPresetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputFaceDetectorPresetOutput).ToTransformOutputFaceDetectorPresetPtrOutputWithContext(ctx)
}

// TransformOutputFaceDetectorPresetPtrInput is an input type that accepts TransformOutputFaceDetectorPresetArgs, TransformOutputFaceDetectorPresetPtr and TransformOutputFaceDetectorPresetPtrOutput values.
// You can construct a concrete instance of `TransformOutputFaceDetectorPresetPtrInput` via:
//
//	        TransformOutputFaceDetectorPresetArgs{...}
//
//	or:
//
//	        nil
type TransformOutputFaceDetectorPresetPtrInput interface {
	pulumi.Input

	ToTransformOutputFaceDetectorPresetPtrOutput() TransformOutputFaceDetectorPresetPtrOutput
	ToTransformOutputFaceDetectorPresetPtrOutputWithContext(context.Context) TransformOutputFaceDetectorPresetPtrOutput
}

type transformOutputFaceDetectorPresetPtrType TransformOutputFaceDetectorPresetArgs

func TransformOutputFaceDetectorPresetPtr(v *TransformOutputFaceDetectorPresetArgs) TransformOutputFaceDetectorPresetPtrInput {
	return (*transformOutputFaceDetectorPresetPtrType)(v)
}

func (*transformOutputFaceDetectorPresetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputFaceDetectorPreset)(nil)).Elem()
}

func (i *transformOutputFaceDetectorPresetPtrType) ToTransformOutputFaceDetectorPresetPtrOutput() TransformOutputFaceDetectorPresetPtrOutput {
	return i.ToTransformOutputFaceDetectorPresetPtrOutputWithContext(context.Background())
}

func (i *transformOutputFaceDetectorPresetPtrType) ToTransformOutputFaceDetectorPresetPtrOutputWithContext(ctx context.Context) TransformOutputFaceDetectorPresetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputFaceDetectorPresetPtrOutput)
}

func (i *transformOutputFaceDetectorPresetPtrType) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputFaceDetectorPreset] {
	return pulumix.Output[*TransformOutputFaceDetectorPreset]{
		OutputState: i.ToTransformOutputFaceDetectorPresetPtrOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputFaceDetectorPresetOutput struct{ *pulumi.OutputState }

func (TransformOutputFaceDetectorPresetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputFaceDetectorPreset)(nil)).Elem()
}

func (o TransformOutputFaceDetectorPresetOutput) ToTransformOutputFaceDetectorPresetOutput() TransformOutputFaceDetectorPresetOutput {
	return o
}

func (o TransformOutputFaceDetectorPresetOutput) ToTransformOutputFaceDetectorPresetOutputWithContext(ctx context.Context) TransformOutputFaceDetectorPresetOutput {
	return o
}

func (o TransformOutputFaceDetectorPresetOutput) ToTransformOutputFaceDetectorPresetPtrOutput() TransformOutputFaceDetectorPresetPtrOutput {
	return o.ToTransformOutputFaceDetectorPresetPtrOutputWithContext(context.Background())
}

func (o TransformOutputFaceDetectorPresetOutput) ToTransformOutputFaceDetectorPresetPtrOutputWithContext(ctx context.Context) TransformOutputFaceDetectorPresetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformOutputFaceDetectorPreset) *TransformOutputFaceDetectorPreset {
		return &v
	}).(TransformOutputFaceDetectorPresetPtrOutput)
}

func (o TransformOutputFaceDetectorPresetOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputFaceDetectorPreset] {
	return pulumix.Output[TransformOutputFaceDetectorPreset]{
		OutputState: o.OutputState,
	}
}

// Possible values are `SourceResolution` or `StandardDefinition`. Specifies the maximum resolution at which your video is analyzed. which will keep the input video at its original resolution when analyzed. Using `StandardDefinition` will resize input videos to standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution. For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to `StandardDefinition` will reduce the time it takes to process high resolution video. It may also reduce the cost of using this component (see <https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics> for details). However, faces that end up being too small in the resized video may not be detected. Default to `SourceResolution`.
func (o TransformOutputFaceDetectorPresetOutput) AnalysisResolution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputFaceDetectorPreset) *string { return v.AnalysisResolution }).(pulumi.StringPtrOutput)
}

// Specifies the type of blur to apply to faces in the output video. Possible values are `Black`, `Box`, `High`, `Low`,and `Med`.
func (o TransformOutputFaceDetectorPresetOutput) BlurType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputFaceDetectorPreset) *string { return v.BlurType }).(pulumi.StringPtrOutput)
}

// Dictionary containing key value pairs for parameters not exposed in the preset itself.
func (o TransformOutputFaceDetectorPresetOutput) ExperimentalOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v TransformOutputFaceDetectorPreset) map[string]string { return v.ExperimentalOptions }).(pulumi.StringMapOutput)
}

// This mode provides the ability to choose between the following settings: 1) `Analyze` - For detection only. This mode generates a metadata JSON file marking appearances of faces throughout the video. Where possible, appearances of the same person are assigned the same ID. 2) `Combined` - Additionally redacts(blurs) detected faces. 3) `Redact` - This enables a 2-pass process, allowing for selective redaction of a subset of detected faces. It takes in the metadata file from a prior analyze pass, along with the source video, and a user-selected subset of IDs that require redaction. Default to `Analyze`.
func (o TransformOutputFaceDetectorPresetOutput) FaceRedactorMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputFaceDetectorPreset) *string { return v.FaceRedactorMode }).(pulumi.StringPtrOutput)
}

type TransformOutputFaceDetectorPresetPtrOutput struct{ *pulumi.OutputState }

func (TransformOutputFaceDetectorPresetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputFaceDetectorPreset)(nil)).Elem()
}

func (o TransformOutputFaceDetectorPresetPtrOutput) ToTransformOutputFaceDetectorPresetPtrOutput() TransformOutputFaceDetectorPresetPtrOutput {
	return o
}

func (o TransformOutputFaceDetectorPresetPtrOutput) ToTransformOutputFaceDetectorPresetPtrOutputWithContext(ctx context.Context) TransformOutputFaceDetectorPresetPtrOutput {
	return o
}

func (o TransformOutputFaceDetectorPresetPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputFaceDetectorPreset] {
	return pulumix.Output[*TransformOutputFaceDetectorPreset]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputFaceDetectorPresetPtrOutput) Elem() TransformOutputFaceDetectorPresetOutput {
	return o.ApplyT(func(v *TransformOutputFaceDetectorPreset) TransformOutputFaceDetectorPreset {
		if v != nil {
			return *v
		}
		var ret TransformOutputFaceDetectorPreset
		return ret
	}).(TransformOutputFaceDetectorPresetOutput)
}

// Possible values are `SourceResolution` or `StandardDefinition`. Specifies the maximum resolution at which your video is analyzed. which will keep the input video at its original resolution when analyzed. Using `StandardDefinition` will resize input videos to standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution. For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to `StandardDefinition` will reduce the time it takes to process high resolution video. It may also reduce the cost of using this component (see <https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics> for details). However, faces that end up being too small in the resized video may not be detected. Default to `SourceResolution`.
func (o TransformOutputFaceDetectorPresetPtrOutput) AnalysisResolution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputFaceDetectorPreset) *string {
		if v == nil {
			return nil
		}
		return v.AnalysisResolution
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of blur to apply to faces in the output video. Possible values are `Black`, `Box`, `High`, `Low`,and `Med`.
func (o TransformOutputFaceDetectorPresetPtrOutput) BlurType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputFaceDetectorPreset) *string {
		if v == nil {
			return nil
		}
		return v.BlurType
	}).(pulumi.StringPtrOutput)
}

// Dictionary containing key value pairs for parameters not exposed in the preset itself.
func (o TransformOutputFaceDetectorPresetPtrOutput) ExperimentalOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TransformOutputFaceDetectorPreset) map[string]string {
		if v == nil {
			return nil
		}
		return v.ExperimentalOptions
	}).(pulumi.StringMapOutput)
}

// This mode provides the ability to choose between the following settings: 1) `Analyze` - For detection only. This mode generates a metadata JSON file marking appearances of faces throughout the video. Where possible, appearances of the same person are assigned the same ID. 2) `Combined` - Additionally redacts(blurs) detected faces. 3) `Redact` - This enables a 2-pass process, allowing for selective redaction of a subset of detected faces. It takes in the metadata file from a prior analyze pass, along with the source video, and a user-selected subset of IDs that require redaction. Default to `Analyze`.
func (o TransformOutputFaceDetectorPresetPtrOutput) FaceRedactorMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputFaceDetectorPreset) *string {
		if v == nil {
			return nil
		}
		return v.FaceRedactorMode
	}).(pulumi.StringPtrOutput)
}

type TransformOutputVideoAnalyzerPreset struct {
	// Possible values are `Basic` or `Standard`. Determines the set of audio analysis operations to be performed. Default to `Standard`.
	AudioAnalysisMode *string `pulumi:"audioAnalysisMode"`
	// The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US'). If you know the language of your content, it is recommended that you specify it. The language must be specified explicitly for AudioAnalysisMode:Basic, since automatic language detection is not included in basic mode. If the language isn't specified, automatic language detection will choose the first language detected and process with the selected language for the duration of the file. It does not currently support dynamically switching between languages after the first language is detected. The automatic detection works best with audio recordings with clearly discernible speech. If automatic detection fails to find the language, transcription would fall back to `en-US`. The list of supported languages is available here: <https://go.microsoft.com/fwlink/?linkid=2109463>.
	AudioLanguage *string `pulumi:"audioLanguage"`
	// Dictionary containing key value pairs for parameters not exposed in the preset itself.
	ExperimentalOptions map[string]string `pulumi:"experimentalOptions"`
	// Defines the type of insights that you want the service to generate. The allowed values are `AudioInsightsOnly`, `VideoInsightsOnly`, and `AllInsights`. If you set this to `AllInsights` and the input is audio only, then only audio insights are generated. Similarly, if the input is video only, then only video insights are generated. It is recommended that you not use `AudioInsightsOnly` if you expect some of your inputs to be video only; or use `VideoInsightsOnly` if you expect some of your inputs to be audio only. Your Jobs in such conditions would error out. Default to `AllInsights`.
	InsightsType *string `pulumi:"insightsType"`
}

// TransformOutputVideoAnalyzerPresetInput is an input type that accepts TransformOutputVideoAnalyzerPresetArgs and TransformOutputVideoAnalyzerPresetOutput values.
// You can construct a concrete instance of `TransformOutputVideoAnalyzerPresetInput` via:
//
//	TransformOutputVideoAnalyzerPresetArgs{...}
type TransformOutputVideoAnalyzerPresetInput interface {
	pulumi.Input

	ToTransformOutputVideoAnalyzerPresetOutput() TransformOutputVideoAnalyzerPresetOutput
	ToTransformOutputVideoAnalyzerPresetOutputWithContext(context.Context) TransformOutputVideoAnalyzerPresetOutput
}

type TransformOutputVideoAnalyzerPresetArgs struct {
	// Possible values are `Basic` or `Standard`. Determines the set of audio analysis operations to be performed. Default to `Standard`.
	AudioAnalysisMode pulumi.StringPtrInput `pulumi:"audioAnalysisMode"`
	// The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US'). If you know the language of your content, it is recommended that you specify it. The language must be specified explicitly for AudioAnalysisMode:Basic, since automatic language detection is not included in basic mode. If the language isn't specified, automatic language detection will choose the first language detected and process with the selected language for the duration of the file. It does not currently support dynamically switching between languages after the first language is detected. The automatic detection works best with audio recordings with clearly discernible speech. If automatic detection fails to find the language, transcription would fall back to `en-US`. The list of supported languages is available here: <https://go.microsoft.com/fwlink/?linkid=2109463>.
	AudioLanguage pulumi.StringPtrInput `pulumi:"audioLanguage"`
	// Dictionary containing key value pairs for parameters not exposed in the preset itself.
	ExperimentalOptions pulumi.StringMapInput `pulumi:"experimentalOptions"`
	// Defines the type of insights that you want the service to generate. The allowed values are `AudioInsightsOnly`, `VideoInsightsOnly`, and `AllInsights`. If you set this to `AllInsights` and the input is audio only, then only audio insights are generated. Similarly, if the input is video only, then only video insights are generated. It is recommended that you not use `AudioInsightsOnly` if you expect some of your inputs to be video only; or use `VideoInsightsOnly` if you expect some of your inputs to be audio only. Your Jobs in such conditions would error out. Default to `AllInsights`.
	InsightsType pulumi.StringPtrInput `pulumi:"insightsType"`
}

func (TransformOutputVideoAnalyzerPresetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputVideoAnalyzerPreset)(nil)).Elem()
}

func (i TransformOutputVideoAnalyzerPresetArgs) ToTransformOutputVideoAnalyzerPresetOutput() TransformOutputVideoAnalyzerPresetOutput {
	return i.ToTransformOutputVideoAnalyzerPresetOutputWithContext(context.Background())
}

func (i TransformOutputVideoAnalyzerPresetArgs) ToTransformOutputVideoAnalyzerPresetOutputWithContext(ctx context.Context) TransformOutputVideoAnalyzerPresetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputVideoAnalyzerPresetOutput)
}

func (i TransformOutputVideoAnalyzerPresetArgs) ToOutput(ctx context.Context) pulumix.Output[TransformOutputVideoAnalyzerPreset] {
	return pulumix.Output[TransformOutputVideoAnalyzerPreset]{
		OutputState: i.ToTransformOutputVideoAnalyzerPresetOutputWithContext(ctx).OutputState,
	}
}

func (i TransformOutputVideoAnalyzerPresetArgs) ToTransformOutputVideoAnalyzerPresetPtrOutput() TransformOutputVideoAnalyzerPresetPtrOutput {
	return i.ToTransformOutputVideoAnalyzerPresetPtrOutputWithContext(context.Background())
}

func (i TransformOutputVideoAnalyzerPresetArgs) ToTransformOutputVideoAnalyzerPresetPtrOutputWithContext(ctx context.Context) TransformOutputVideoAnalyzerPresetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputVideoAnalyzerPresetOutput).ToTransformOutputVideoAnalyzerPresetPtrOutputWithContext(ctx)
}

// TransformOutputVideoAnalyzerPresetPtrInput is an input type that accepts TransformOutputVideoAnalyzerPresetArgs, TransformOutputVideoAnalyzerPresetPtr and TransformOutputVideoAnalyzerPresetPtrOutput values.
// You can construct a concrete instance of `TransformOutputVideoAnalyzerPresetPtrInput` via:
//
//	        TransformOutputVideoAnalyzerPresetArgs{...}
//
//	or:
//
//	        nil
type TransformOutputVideoAnalyzerPresetPtrInput interface {
	pulumi.Input

	ToTransformOutputVideoAnalyzerPresetPtrOutput() TransformOutputVideoAnalyzerPresetPtrOutput
	ToTransformOutputVideoAnalyzerPresetPtrOutputWithContext(context.Context) TransformOutputVideoAnalyzerPresetPtrOutput
}

type transformOutputVideoAnalyzerPresetPtrType TransformOutputVideoAnalyzerPresetArgs

func TransformOutputVideoAnalyzerPresetPtr(v *TransformOutputVideoAnalyzerPresetArgs) TransformOutputVideoAnalyzerPresetPtrInput {
	return (*transformOutputVideoAnalyzerPresetPtrType)(v)
}

func (*transformOutputVideoAnalyzerPresetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputVideoAnalyzerPreset)(nil)).Elem()
}

func (i *transformOutputVideoAnalyzerPresetPtrType) ToTransformOutputVideoAnalyzerPresetPtrOutput() TransformOutputVideoAnalyzerPresetPtrOutput {
	return i.ToTransformOutputVideoAnalyzerPresetPtrOutputWithContext(context.Background())
}

func (i *transformOutputVideoAnalyzerPresetPtrType) ToTransformOutputVideoAnalyzerPresetPtrOutputWithContext(ctx context.Context) TransformOutputVideoAnalyzerPresetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputVideoAnalyzerPresetPtrOutput)
}

func (i *transformOutputVideoAnalyzerPresetPtrType) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputVideoAnalyzerPreset] {
	return pulumix.Output[*TransformOutputVideoAnalyzerPreset]{
		OutputState: i.ToTransformOutputVideoAnalyzerPresetPtrOutputWithContext(ctx).OutputState,
	}
}

type TransformOutputVideoAnalyzerPresetOutput struct{ *pulumi.OutputState }

func (TransformOutputVideoAnalyzerPresetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputVideoAnalyzerPreset)(nil)).Elem()
}

func (o TransformOutputVideoAnalyzerPresetOutput) ToTransformOutputVideoAnalyzerPresetOutput() TransformOutputVideoAnalyzerPresetOutput {
	return o
}

func (o TransformOutputVideoAnalyzerPresetOutput) ToTransformOutputVideoAnalyzerPresetOutputWithContext(ctx context.Context) TransformOutputVideoAnalyzerPresetOutput {
	return o
}

func (o TransformOutputVideoAnalyzerPresetOutput) ToTransformOutputVideoAnalyzerPresetPtrOutput() TransformOutputVideoAnalyzerPresetPtrOutput {
	return o.ToTransformOutputVideoAnalyzerPresetPtrOutputWithContext(context.Background())
}

func (o TransformOutputVideoAnalyzerPresetOutput) ToTransformOutputVideoAnalyzerPresetPtrOutputWithContext(ctx context.Context) TransformOutputVideoAnalyzerPresetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransformOutputVideoAnalyzerPreset) *TransformOutputVideoAnalyzerPreset {
		return &v
	}).(TransformOutputVideoAnalyzerPresetPtrOutput)
}

func (o TransformOutputVideoAnalyzerPresetOutput) ToOutput(ctx context.Context) pulumix.Output[TransformOutputVideoAnalyzerPreset] {
	return pulumix.Output[TransformOutputVideoAnalyzerPreset]{
		OutputState: o.OutputState,
	}
}

// Possible values are `Basic` or `Standard`. Determines the set of audio analysis operations to be performed. Default to `Standard`.
func (o TransformOutputVideoAnalyzerPresetOutput) AudioAnalysisMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputVideoAnalyzerPreset) *string { return v.AudioAnalysisMode }).(pulumi.StringPtrOutput)
}

// The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US'). If you know the language of your content, it is recommended that you specify it. The language must be specified explicitly for AudioAnalysisMode:Basic, since automatic language detection is not included in basic mode. If the language isn't specified, automatic language detection will choose the first language detected and process with the selected language for the duration of the file. It does not currently support dynamically switching between languages after the first language is detected. The automatic detection works best with audio recordings with clearly discernible speech. If automatic detection fails to find the language, transcription would fall back to `en-US`. The list of supported languages is available here: <https://go.microsoft.com/fwlink/?linkid=2109463>.
func (o TransformOutputVideoAnalyzerPresetOutput) AudioLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputVideoAnalyzerPreset) *string { return v.AudioLanguage }).(pulumi.StringPtrOutput)
}

// Dictionary containing key value pairs for parameters not exposed in the preset itself.
func (o TransformOutputVideoAnalyzerPresetOutput) ExperimentalOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v TransformOutputVideoAnalyzerPreset) map[string]string { return v.ExperimentalOptions }).(pulumi.StringMapOutput)
}

// Defines the type of insights that you want the service to generate. The allowed values are `AudioInsightsOnly`, `VideoInsightsOnly`, and `AllInsights`. If you set this to `AllInsights` and the input is audio only, then only audio insights are generated. Similarly, if the input is video only, then only video insights are generated. It is recommended that you not use `AudioInsightsOnly` if you expect some of your inputs to be video only; or use `VideoInsightsOnly` if you expect some of your inputs to be audio only. Your Jobs in such conditions would error out. Default to `AllInsights`.
func (o TransformOutputVideoAnalyzerPresetOutput) InsightsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputVideoAnalyzerPreset) *string { return v.InsightsType }).(pulumi.StringPtrOutput)
}

type TransformOutputVideoAnalyzerPresetPtrOutput struct{ *pulumi.OutputState }

func (TransformOutputVideoAnalyzerPresetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformOutputVideoAnalyzerPreset)(nil)).Elem()
}

func (o TransformOutputVideoAnalyzerPresetPtrOutput) ToTransformOutputVideoAnalyzerPresetPtrOutput() TransformOutputVideoAnalyzerPresetPtrOutput {
	return o
}

func (o TransformOutputVideoAnalyzerPresetPtrOutput) ToTransformOutputVideoAnalyzerPresetPtrOutputWithContext(ctx context.Context) TransformOutputVideoAnalyzerPresetPtrOutput {
	return o
}

func (o TransformOutputVideoAnalyzerPresetPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TransformOutputVideoAnalyzerPreset] {
	return pulumix.Output[*TransformOutputVideoAnalyzerPreset]{
		OutputState: o.OutputState,
	}
}

func (o TransformOutputVideoAnalyzerPresetPtrOutput) Elem() TransformOutputVideoAnalyzerPresetOutput {
	return o.ApplyT(func(v *TransformOutputVideoAnalyzerPreset) TransformOutputVideoAnalyzerPreset {
		if v != nil {
			return *v
		}
		var ret TransformOutputVideoAnalyzerPreset
		return ret
	}).(TransformOutputVideoAnalyzerPresetOutput)
}

// Possible values are `Basic` or `Standard`. Determines the set of audio analysis operations to be performed. Default to `Standard`.
func (o TransformOutputVideoAnalyzerPresetPtrOutput) AudioAnalysisMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputVideoAnalyzerPreset) *string {
		if v == nil {
			return nil
		}
		return v.AudioAnalysisMode
	}).(pulumi.StringPtrOutput)
}

// The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US'). If you know the language of your content, it is recommended that you specify it. The language must be specified explicitly for AudioAnalysisMode:Basic, since automatic language detection is not included in basic mode. If the language isn't specified, automatic language detection will choose the first language detected and process with the selected language for the duration of the file. It does not currently support dynamically switching between languages after the first language is detected. The automatic detection works best with audio recordings with clearly discernible speech. If automatic detection fails to find the language, transcription would fall back to `en-US`. The list of supported languages is available here: <https://go.microsoft.com/fwlink/?linkid=2109463>.
func (o TransformOutputVideoAnalyzerPresetPtrOutput) AudioLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputVideoAnalyzerPreset) *string {
		if v == nil {
			return nil
		}
		return v.AudioLanguage
	}).(pulumi.StringPtrOutput)
}

// Dictionary containing key value pairs for parameters not exposed in the preset itself.
func (o TransformOutputVideoAnalyzerPresetPtrOutput) ExperimentalOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TransformOutputVideoAnalyzerPreset) map[string]string {
		if v == nil {
			return nil
		}
		return v.ExperimentalOptions
	}).(pulumi.StringMapOutput)
}

// Defines the type of insights that you want the service to generate. The allowed values are `AudioInsightsOnly`, `VideoInsightsOnly`, and `AllInsights`. If you set this to `AllInsights` and the input is audio only, then only audio insights are generated. Similarly, if the input is video only, then only video insights are generated. It is recommended that you not use `AudioInsightsOnly` if you expect some of your inputs to be video only; or use `VideoInsightsOnly` if you expect some of your inputs to be audio only. Your Jobs in such conditions would error out. Default to `AllInsights`.
func (o TransformOutputVideoAnalyzerPresetPtrOutput) InsightsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformOutputVideoAnalyzerPreset) *string {
		if v == nil {
			return nil
		}
		return v.InsightsType
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountFilterPresentationTimeRangeInput)(nil)).Elem(), AccountFilterPresentationTimeRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountFilterPresentationTimeRangePtrInput)(nil)).Elem(), AccountFilterPresentationTimeRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountFilterTrackSelectionInput)(nil)).Elem(), AccountFilterTrackSelectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountFilterTrackSelectionArrayInput)(nil)).Elem(), AccountFilterTrackSelectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountFilterTrackSelectionConditionInput)(nil)).Elem(), AccountFilterTrackSelectionConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountFilterTrackSelectionConditionArrayInput)(nil)).Elem(), AccountFilterTrackSelectionConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetFilterPresentationTimeRangeInput)(nil)).Elem(), AssetFilterPresentationTimeRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetFilterPresentationTimeRangePtrInput)(nil)).Elem(), AssetFilterPresentationTimeRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetFilterTrackSelectionInput)(nil)).Elem(), AssetFilterTrackSelectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetFilterTrackSelectionArrayInput)(nil)).Elem(), AssetFilterTrackSelectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetFilterTrackSelectionConditionInput)(nil)).Elem(), AssetFilterTrackSelectionConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetFilterTrackSelectionConditionArrayInput)(nil)).Elem(), AssetFilterTrackSelectionConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentKeyPolicyPolicyOptionInput)(nil)).Elem(), ContentKeyPolicyPolicyOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentKeyPolicyPolicyOptionArrayInput)(nil)).Elem(), ContentKeyPolicyPolicyOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentKeyPolicyPolicyOptionFairplayConfigurationInput)(nil)).Elem(), ContentKeyPolicyPolicyOptionFairplayConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentKeyPolicyPolicyOptionFairplayConfigurationPtrInput)(nil)).Elem(), ContentKeyPolicyPolicyOptionFairplayConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationInput)(nil)).Elem(), ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrInput)(nil)).Elem(), ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseInput)(nil)).Elem(), ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayInput)(nil)).Elem(), ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightInput)(nil)).Elem(), ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrInput)(nil)).Elem(), ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionInput)(nil)).Elem(), ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrInput)(nil)).Elem(), ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentKeyPolicyPolicyOptionTokenRestrictionInput)(nil)).Elem(), ContentKeyPolicyPolicyOptionTokenRestrictionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentKeyPolicyPolicyOptionTokenRestrictionPtrInput)(nil)).Elem(), ContentKeyPolicyPolicyOptionTokenRestrictionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyInput)(nil)).Elem(), ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArrayInput)(nil)).Elem(), ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimInput)(nil)).Elem(), ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayInput)(nil)).Elem(), ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobInputAssetInput)(nil)).Elem(), JobInputAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobInputAssetPtrInput)(nil)).Elem(), JobInputAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobOutputAssetInput)(nil)).Elem(), JobOutputAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobOutputAssetArrayInput)(nil)).Elem(), JobOutputAssetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiveEventCrossSiteAccessPolicyInput)(nil)).Elem(), LiveEventCrossSiteAccessPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiveEventCrossSiteAccessPolicyPtrInput)(nil)).Elem(), LiveEventCrossSiteAccessPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiveEventEncodingInput)(nil)).Elem(), LiveEventEncodingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiveEventEncodingPtrInput)(nil)).Elem(), LiveEventEncodingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiveEventInputTypeInput)(nil)).Elem(), LiveEventInputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiveEventInputTypePtrInput)(nil)).Elem(), LiveEventInputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiveEventInputEndpointInput)(nil)).Elem(), LiveEventInputEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiveEventInputEndpointArrayInput)(nil)).Elem(), LiveEventInputEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiveEventInputIpAccessControlAllowInput)(nil)).Elem(), LiveEventInputIpAccessControlAllowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiveEventInputIpAccessControlAllowArrayInput)(nil)).Elem(), LiveEventInputIpAccessControlAllowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiveEventPreviewInput)(nil)).Elem(), LiveEventPreviewArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiveEventPreviewPtrInput)(nil)).Elem(), LiveEventPreviewArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiveEventPreviewEndpointInput)(nil)).Elem(), LiveEventPreviewEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiveEventPreviewEndpointArrayInput)(nil)).Elem(), LiveEventPreviewEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiveEventPreviewIpAccessControlAllowInput)(nil)).Elem(), LiveEventPreviewIpAccessControlAllowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiveEventPreviewIpAccessControlAllowArrayInput)(nil)).Elem(), LiveEventPreviewIpAccessControlAllowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountEncryptionInput)(nil)).Elem(), ServiceAccountEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountEncryptionPtrInput)(nil)).Elem(), ServiceAccountEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountEncryptionManagedIdentityInput)(nil)).Elem(), ServiceAccountEncryptionManagedIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountEncryptionManagedIdentityPtrInput)(nil)).Elem(), ServiceAccountEncryptionManagedIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountIdentityInput)(nil)).Elem(), ServiceAccountIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountIdentityPtrInput)(nil)).Elem(), ServiceAccountIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountKeyDeliveryAccessControlInput)(nil)).Elem(), ServiceAccountKeyDeliveryAccessControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountKeyDeliveryAccessControlPtrInput)(nil)).Elem(), ServiceAccountKeyDeliveryAccessControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountStorageAccountInput)(nil)).Elem(), ServiceAccountStorageAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountStorageAccountArrayInput)(nil)).Elem(), ServiceAccountStorageAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountStorageAccountManagedIdentityInput)(nil)).Elem(), ServiceAccountStorageAccountManagedIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountStorageAccountManagedIdentityPtrInput)(nil)).Elem(), ServiceAccountStorageAccountManagedIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingEndpointAccessControlInput)(nil)).Elem(), StreamingEndpointAccessControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingEndpointAccessControlPtrInput)(nil)).Elem(), StreamingEndpointAccessControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyInput)(nil)).Elem(), StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayInput)(nil)).Elem(), StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingEndpointAccessControlIpAllowInput)(nil)).Elem(), StreamingEndpointAccessControlIpAllowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingEndpointAccessControlIpAllowArrayInput)(nil)).Elem(), StreamingEndpointAccessControlIpAllowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingEndpointCrossSiteAccessPolicyInput)(nil)).Elem(), StreamingEndpointCrossSiteAccessPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingEndpointCrossSiteAccessPolicyPtrInput)(nil)).Elem(), StreamingEndpointCrossSiteAccessPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingEndpointSkusInput)(nil)).Elem(), StreamingEndpointSkusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingEndpointSkusArrayInput)(nil)).Elem(), StreamingEndpointSkusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingLocatorContentKeyInput)(nil)).Elem(), StreamingLocatorContentKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingLocatorContentKeyArrayInput)(nil)).Elem(), StreamingLocatorContentKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyCommonEncryptionCbcsInput)(nil)).Elem(), StreamingPolicyCommonEncryptionCbcsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyCommonEncryptionCbcsPtrInput)(nil)).Elem(), StreamingPolicyCommonEncryptionCbcsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionInput)(nil)).Elem(), StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrInput)(nil)).Elem(), StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyCommonEncryptionCbcsDefaultContentKeyInput)(nil)).Elem(), StreamingPolicyCommonEncryptionCbcsDefaultContentKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrInput)(nil)).Elem(), StreamingPolicyCommonEncryptionCbcsDefaultContentKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyCommonEncryptionCbcsDrmFairplayInput)(nil)).Elem(), StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrInput)(nil)).Elem(), StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyCommonEncryptionCbcsEnabledProtocolsInput)(nil)).Elem(), StreamingPolicyCommonEncryptionCbcsEnabledProtocolsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrInput)(nil)).Elem(), StreamingPolicyCommonEncryptionCbcsEnabledProtocolsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyCommonEncryptionCencInput)(nil)).Elem(), StreamingPolicyCommonEncryptionCencArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyCommonEncryptionCencPtrInput)(nil)).Elem(), StreamingPolicyCommonEncryptionCencArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyCommonEncryptionCencClearKeyEncryptionInput)(nil)).Elem(), StreamingPolicyCommonEncryptionCencClearKeyEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrInput)(nil)).Elem(), StreamingPolicyCommonEncryptionCencClearKeyEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyCommonEncryptionCencClearTrackInput)(nil)).Elem(), StreamingPolicyCommonEncryptionCencClearTrackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyCommonEncryptionCencClearTrackArrayInput)(nil)).Elem(), StreamingPolicyCommonEncryptionCencClearTrackArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyCommonEncryptionCencClearTrackConditionInput)(nil)).Elem(), StreamingPolicyCommonEncryptionCencClearTrackConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyCommonEncryptionCencClearTrackConditionArrayInput)(nil)).Elem(), StreamingPolicyCommonEncryptionCencClearTrackConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingInput)(nil)).Elem(), StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArrayInput)(nil)).Elem(), StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackInput)(nil)).Elem(), StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArrayInput)(nil)).Elem(), StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionInput)(nil)).Elem(), StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArrayInput)(nil)).Elem(), StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyCommonEncryptionCencDefaultContentKeyInput)(nil)).Elem(), StreamingPolicyCommonEncryptionCencDefaultContentKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrInput)(nil)).Elem(), StreamingPolicyCommonEncryptionCencDefaultContentKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyCommonEncryptionCencDrmPlayreadyInput)(nil)).Elem(), StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrInput)(nil)).Elem(), StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyCommonEncryptionCencEnabledProtocolsInput)(nil)).Elem(), StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrInput)(nil)).Elem(), StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyEnvelopeEncryptionInput)(nil)).Elem(), StreamingPolicyEnvelopeEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyEnvelopeEncryptionPtrInput)(nil)).Elem(), StreamingPolicyEnvelopeEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyEnvelopeEncryptionDefaultContentKeyInput)(nil)).Elem(), StreamingPolicyEnvelopeEncryptionDefaultContentKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrInput)(nil)).Elem(), StreamingPolicyEnvelopeEncryptionDefaultContentKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyEnvelopeEncryptionEnabledProtocolsInput)(nil)).Elem(), StreamingPolicyEnvelopeEncryptionEnabledProtocolsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrInput)(nil)).Elem(), StreamingPolicyEnvelopeEncryptionEnabledProtocolsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyNoEncryptionEnabledProtocolsInput)(nil)).Elem(), StreamingPolicyNoEncryptionEnabledProtocolsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyNoEncryptionEnabledProtocolsPtrInput)(nil)).Elem(), StreamingPolicyNoEncryptionEnabledProtocolsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputTypeInput)(nil)).Elem(), TransformOutputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputTypeArrayInput)(nil)).Elem(), TransformOutputTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputAudioAnalyzerPresetInput)(nil)).Elem(), TransformOutputAudioAnalyzerPresetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputAudioAnalyzerPresetPtrInput)(nil)).Elem(), TransformOutputAudioAnalyzerPresetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputBuiltinPresetInput)(nil)).Elem(), TransformOutputBuiltinPresetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputBuiltinPresetPtrInput)(nil)).Elem(), TransformOutputBuiltinPresetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputBuiltinPresetPresetConfigurationInput)(nil)).Elem(), TransformOutputBuiltinPresetPresetConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputBuiltinPresetPresetConfigurationPtrInput)(nil)).Elem(), TransformOutputBuiltinPresetPresetConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetInput)(nil)).Elem(), TransformOutputCustomPresetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetPtrInput)(nil)).Elem(), TransformOutputCustomPresetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetCodecInput)(nil)).Elem(), TransformOutputCustomPresetCodecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetCodecArrayInput)(nil)).Elem(), TransformOutputCustomPresetCodecArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetCodecAacAudioInput)(nil)).Elem(), TransformOutputCustomPresetCodecAacAudioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetCodecAacAudioPtrInput)(nil)).Elem(), TransformOutputCustomPresetCodecAacAudioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetCodecCopyAudioInput)(nil)).Elem(), TransformOutputCustomPresetCodecCopyAudioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetCodecCopyAudioPtrInput)(nil)).Elem(), TransformOutputCustomPresetCodecCopyAudioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetCodecCopyVideoInput)(nil)).Elem(), TransformOutputCustomPresetCodecCopyVideoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetCodecCopyVideoPtrInput)(nil)).Elem(), TransformOutputCustomPresetCodecCopyVideoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetCodecDdAudioInput)(nil)).Elem(), TransformOutputCustomPresetCodecDdAudioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetCodecDdAudioPtrInput)(nil)).Elem(), TransformOutputCustomPresetCodecDdAudioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetCodecH264VideoInput)(nil)).Elem(), TransformOutputCustomPresetCodecH264VideoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetCodecH264VideoPtrInput)(nil)).Elem(), TransformOutputCustomPresetCodecH264VideoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetCodecH264VideoLayerInput)(nil)).Elem(), TransformOutputCustomPresetCodecH264VideoLayerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetCodecH264VideoLayerArrayInput)(nil)).Elem(), TransformOutputCustomPresetCodecH264VideoLayerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetCodecH265VideoInput)(nil)).Elem(), TransformOutputCustomPresetCodecH265VideoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetCodecH265VideoPtrInput)(nil)).Elem(), TransformOutputCustomPresetCodecH265VideoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetCodecH265VideoLayerInput)(nil)).Elem(), TransformOutputCustomPresetCodecH265VideoLayerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetCodecH265VideoLayerArrayInput)(nil)).Elem(), TransformOutputCustomPresetCodecH265VideoLayerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetCodecJpgImageInput)(nil)).Elem(), TransformOutputCustomPresetCodecJpgImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetCodecJpgImagePtrInput)(nil)).Elem(), TransformOutputCustomPresetCodecJpgImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetCodecJpgImageLayerInput)(nil)).Elem(), TransformOutputCustomPresetCodecJpgImageLayerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetCodecJpgImageLayerArrayInput)(nil)).Elem(), TransformOutputCustomPresetCodecJpgImageLayerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetCodecPngImageInput)(nil)).Elem(), TransformOutputCustomPresetCodecPngImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetCodecPngImagePtrInput)(nil)).Elem(), TransformOutputCustomPresetCodecPngImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetCodecPngImageLayerInput)(nil)).Elem(), TransformOutputCustomPresetCodecPngImageLayerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetCodecPngImageLayerArrayInput)(nil)).Elem(), TransformOutputCustomPresetCodecPngImageLayerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetFilterInput)(nil)).Elem(), TransformOutputCustomPresetFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetFilterPtrInput)(nil)).Elem(), TransformOutputCustomPresetFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetFilterCropRectangleInput)(nil)).Elem(), TransformOutputCustomPresetFilterCropRectangleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetFilterCropRectanglePtrInput)(nil)).Elem(), TransformOutputCustomPresetFilterCropRectangleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetFilterDeinterlaceInput)(nil)).Elem(), TransformOutputCustomPresetFilterDeinterlaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetFilterDeinterlacePtrInput)(nil)).Elem(), TransformOutputCustomPresetFilterDeinterlaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetFilterFadeInInput)(nil)).Elem(), TransformOutputCustomPresetFilterFadeInArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetFilterFadeInPtrInput)(nil)).Elem(), TransformOutputCustomPresetFilterFadeInArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetFilterFadeOutInput)(nil)).Elem(), TransformOutputCustomPresetFilterFadeOutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetFilterFadeOutPtrInput)(nil)).Elem(), TransformOutputCustomPresetFilterFadeOutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetFilterOverlayInput)(nil)).Elem(), TransformOutputCustomPresetFilterOverlayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetFilterOverlayArrayInput)(nil)).Elem(), TransformOutputCustomPresetFilterOverlayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetFilterOverlayAudioInput)(nil)).Elem(), TransformOutputCustomPresetFilterOverlayAudioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetFilterOverlayAudioPtrInput)(nil)).Elem(), TransformOutputCustomPresetFilterOverlayAudioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetFilterOverlayVideoInput)(nil)).Elem(), TransformOutputCustomPresetFilterOverlayVideoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetFilterOverlayVideoPtrInput)(nil)).Elem(), TransformOutputCustomPresetFilterOverlayVideoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetFilterOverlayVideoCropRectangleInput)(nil)).Elem(), TransformOutputCustomPresetFilterOverlayVideoCropRectangleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrInput)(nil)).Elem(), TransformOutputCustomPresetFilterOverlayVideoCropRectangleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetFilterOverlayVideoPositionInput)(nil)).Elem(), TransformOutputCustomPresetFilterOverlayVideoPositionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetFilterOverlayVideoPositionPtrInput)(nil)).Elem(), TransformOutputCustomPresetFilterOverlayVideoPositionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetFormatInput)(nil)).Elem(), TransformOutputCustomPresetFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetFormatArrayInput)(nil)).Elem(), TransformOutputCustomPresetFormatArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetFormatJpgInput)(nil)).Elem(), TransformOutputCustomPresetFormatJpgArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetFormatJpgPtrInput)(nil)).Elem(), TransformOutputCustomPresetFormatJpgArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetFormatMp4Input)(nil)).Elem(), TransformOutputCustomPresetFormatMp4Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetFormatMp4PtrInput)(nil)).Elem(), TransformOutputCustomPresetFormatMp4Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetFormatMp4OutputFileInput)(nil)).Elem(), TransformOutputCustomPresetFormatMp4OutputFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetFormatMp4OutputFileArrayInput)(nil)).Elem(), TransformOutputCustomPresetFormatMp4OutputFileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetFormatPngInput)(nil)).Elem(), TransformOutputCustomPresetFormatPngArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetFormatPngPtrInput)(nil)).Elem(), TransformOutputCustomPresetFormatPngArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetFormatTransportStreamInput)(nil)).Elem(), TransformOutputCustomPresetFormatTransportStreamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetFormatTransportStreamPtrInput)(nil)).Elem(), TransformOutputCustomPresetFormatTransportStreamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetFormatTransportStreamOutputFileInput)(nil)).Elem(), TransformOutputCustomPresetFormatTransportStreamOutputFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputCustomPresetFormatTransportStreamOutputFileArrayInput)(nil)).Elem(), TransformOutputCustomPresetFormatTransportStreamOutputFileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputFaceDetectorPresetInput)(nil)).Elem(), TransformOutputFaceDetectorPresetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputFaceDetectorPresetPtrInput)(nil)).Elem(), TransformOutputFaceDetectorPresetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputVideoAnalyzerPresetInput)(nil)).Elem(), TransformOutputVideoAnalyzerPresetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformOutputVideoAnalyzerPresetPtrInput)(nil)).Elem(), TransformOutputVideoAnalyzerPresetArgs{})
	pulumi.RegisterOutputType(AccountFilterPresentationTimeRangeOutput{})
	pulumi.RegisterOutputType(AccountFilterPresentationTimeRangePtrOutput{})
	pulumi.RegisterOutputType(AccountFilterTrackSelectionOutput{})
	pulumi.RegisterOutputType(AccountFilterTrackSelectionArrayOutput{})
	pulumi.RegisterOutputType(AccountFilterTrackSelectionConditionOutput{})
	pulumi.RegisterOutputType(AccountFilterTrackSelectionConditionArrayOutput{})
	pulumi.RegisterOutputType(AssetFilterPresentationTimeRangeOutput{})
	pulumi.RegisterOutputType(AssetFilterPresentationTimeRangePtrOutput{})
	pulumi.RegisterOutputType(AssetFilterTrackSelectionOutput{})
	pulumi.RegisterOutputType(AssetFilterTrackSelectionArrayOutput{})
	pulumi.RegisterOutputType(AssetFilterTrackSelectionConditionOutput{})
	pulumi.RegisterOutputType(AssetFilterTrackSelectionConditionArrayOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPolicyOptionOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPolicyOptionArrayOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPolicyOptionFairplayConfigurationOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPolicyOptionFairplayConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPolicyOptionFairplayConfigurationOfflineRentalConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicenseArrayOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightPtrOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPolicyOptionPlayreadyConfigurationLicensePlayRightExplicitAnalogTelevisionOutputRestrictionPtrOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPolicyOptionTokenRestrictionOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPolicyOptionTokenRestrictionPtrOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPolicyOptionTokenRestrictionAlternateKeyArrayOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPolicyOptionTokenRestrictionRequiredClaimArrayOutput{})
	pulumi.RegisterOutputType(JobInputAssetOutput{})
	pulumi.RegisterOutputType(JobInputAssetPtrOutput{})
	pulumi.RegisterOutputType(JobOutputAssetOutput{})
	pulumi.RegisterOutputType(JobOutputAssetArrayOutput{})
	pulumi.RegisterOutputType(LiveEventCrossSiteAccessPolicyOutput{})
	pulumi.RegisterOutputType(LiveEventCrossSiteAccessPolicyPtrOutput{})
	pulumi.RegisterOutputType(LiveEventEncodingOutput{})
	pulumi.RegisterOutputType(LiveEventEncodingPtrOutput{})
	pulumi.RegisterOutputType(LiveEventInputTypeOutput{})
	pulumi.RegisterOutputType(LiveEventInputTypePtrOutput{})
	pulumi.RegisterOutputType(LiveEventInputEndpointOutput{})
	pulumi.RegisterOutputType(LiveEventInputEndpointArrayOutput{})
	pulumi.RegisterOutputType(LiveEventInputIpAccessControlAllowOutput{})
	pulumi.RegisterOutputType(LiveEventInputIpAccessControlAllowArrayOutput{})
	pulumi.RegisterOutputType(LiveEventPreviewOutput{})
	pulumi.RegisterOutputType(LiveEventPreviewPtrOutput{})
	pulumi.RegisterOutputType(LiveEventPreviewEndpointOutput{})
	pulumi.RegisterOutputType(LiveEventPreviewEndpointArrayOutput{})
	pulumi.RegisterOutputType(LiveEventPreviewIpAccessControlAllowOutput{})
	pulumi.RegisterOutputType(LiveEventPreviewIpAccessControlAllowArrayOutput{})
	pulumi.RegisterOutputType(ServiceAccountEncryptionOutput{})
	pulumi.RegisterOutputType(ServiceAccountEncryptionPtrOutput{})
	pulumi.RegisterOutputType(ServiceAccountEncryptionManagedIdentityOutput{})
	pulumi.RegisterOutputType(ServiceAccountEncryptionManagedIdentityPtrOutput{})
	pulumi.RegisterOutputType(ServiceAccountIdentityOutput{})
	pulumi.RegisterOutputType(ServiceAccountIdentityPtrOutput{})
	pulumi.RegisterOutputType(ServiceAccountKeyDeliveryAccessControlOutput{})
	pulumi.RegisterOutputType(ServiceAccountKeyDeliveryAccessControlPtrOutput{})
	pulumi.RegisterOutputType(ServiceAccountStorageAccountOutput{})
	pulumi.RegisterOutputType(ServiceAccountStorageAccountArrayOutput{})
	pulumi.RegisterOutputType(ServiceAccountStorageAccountManagedIdentityOutput{})
	pulumi.RegisterOutputType(ServiceAccountStorageAccountManagedIdentityPtrOutput{})
	pulumi.RegisterOutputType(StreamingEndpointAccessControlOutput{})
	pulumi.RegisterOutputType(StreamingEndpointAccessControlPtrOutput{})
	pulumi.RegisterOutputType(StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyOutput{})
	pulumi.RegisterOutputType(StreamingEndpointAccessControlAkamaiSignatureHeaderAuthenticationKeyArrayOutput{})
	pulumi.RegisterOutputType(StreamingEndpointAccessControlIpAllowOutput{})
	pulumi.RegisterOutputType(StreamingEndpointAccessControlIpAllowArrayOutput{})
	pulumi.RegisterOutputType(StreamingEndpointCrossSiteAccessPolicyOutput{})
	pulumi.RegisterOutputType(StreamingEndpointCrossSiteAccessPolicyPtrOutput{})
	pulumi.RegisterOutputType(StreamingEndpointSkusOutput{})
	pulumi.RegisterOutputType(StreamingEndpointSkusArrayOutput{})
	pulumi.RegisterOutputType(StreamingLocatorContentKeyOutput{})
	pulumi.RegisterOutputType(StreamingLocatorContentKeyArrayOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCbcsOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCbcsPtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCbcsClearKeyEncryptionPtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCbcsDefaultContentKeyOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCbcsDefaultContentKeyPtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCbcsDrmFairplayOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCbcsDrmFairplayPtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCbcsEnabledProtocolsOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCbcsEnabledProtocolsPtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCencOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCencPtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCencClearKeyEncryptionOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCencClearKeyEncryptionPtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCencClearTrackOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCencClearTrackArrayOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCencClearTrackConditionOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCencClearTrackConditionArrayOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingArrayOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackArrayOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCencContentKeyToTrackMappingTrackConditionArrayOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCencDefaultContentKeyOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCencDefaultContentKeyPtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCencDrmPlayreadyOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCencDrmPlayreadyPtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCencEnabledProtocolsOutput{})
	pulumi.RegisterOutputType(StreamingPolicyCommonEncryptionCencEnabledProtocolsPtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyEnvelopeEncryptionOutput{})
	pulumi.RegisterOutputType(StreamingPolicyEnvelopeEncryptionPtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyEnvelopeEncryptionDefaultContentKeyOutput{})
	pulumi.RegisterOutputType(StreamingPolicyEnvelopeEncryptionDefaultContentKeyPtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyEnvelopeEncryptionEnabledProtocolsOutput{})
	pulumi.RegisterOutputType(StreamingPolicyEnvelopeEncryptionEnabledProtocolsPtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyNoEncryptionEnabledProtocolsOutput{})
	pulumi.RegisterOutputType(StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput{})
	pulumi.RegisterOutputType(TransformOutputTypeOutput{})
	pulumi.RegisterOutputType(TransformOutputTypeArrayOutput{})
	pulumi.RegisterOutputType(TransformOutputAudioAnalyzerPresetOutput{})
	pulumi.RegisterOutputType(TransformOutputAudioAnalyzerPresetPtrOutput{})
	pulumi.RegisterOutputType(TransformOutputBuiltinPresetOutput{})
	pulumi.RegisterOutputType(TransformOutputBuiltinPresetPtrOutput{})
	pulumi.RegisterOutputType(TransformOutputBuiltinPresetPresetConfigurationOutput{})
	pulumi.RegisterOutputType(TransformOutputBuiltinPresetPresetConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetPtrOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetCodecOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetCodecArrayOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetCodecAacAudioOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetCodecAacAudioPtrOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetCodecCopyAudioOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetCodecCopyAudioPtrOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetCodecCopyVideoOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetCodecCopyVideoPtrOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetCodecDdAudioOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetCodecDdAudioPtrOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetCodecH264VideoOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetCodecH264VideoPtrOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetCodecH264VideoLayerOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetCodecH264VideoLayerArrayOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetCodecH265VideoOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetCodecH265VideoPtrOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetCodecH265VideoLayerOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetCodecH265VideoLayerArrayOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetCodecJpgImageOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetCodecJpgImagePtrOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetCodecJpgImageLayerOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetCodecJpgImageLayerArrayOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetCodecPngImageOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetCodecPngImagePtrOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetCodecPngImageLayerOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetCodecPngImageLayerArrayOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetFilterOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetFilterPtrOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetFilterCropRectangleOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetFilterCropRectanglePtrOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetFilterDeinterlaceOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetFilterDeinterlacePtrOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetFilterFadeInOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetFilterFadeInPtrOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetFilterFadeOutOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetFilterFadeOutPtrOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetFilterOverlayOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetFilterOverlayArrayOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetFilterOverlayAudioOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetFilterOverlayAudioPtrOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetFilterOverlayVideoOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetFilterOverlayVideoPtrOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetFilterOverlayVideoCropRectangleOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetFilterOverlayVideoCropRectanglePtrOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetFilterOverlayVideoPositionOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetFilterOverlayVideoPositionPtrOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetFormatOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetFormatArrayOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetFormatJpgOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetFormatJpgPtrOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetFormatMp4Output{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetFormatMp4PtrOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetFormatMp4OutputFileOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetFormatMp4OutputFileArrayOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetFormatPngOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetFormatPngPtrOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetFormatTransportStreamOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetFormatTransportStreamPtrOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetFormatTransportStreamOutputFileOutput{})
	pulumi.RegisterOutputType(TransformOutputCustomPresetFormatTransportStreamOutputFileArrayOutput{})
	pulumi.RegisterOutputType(TransformOutputFaceDetectorPresetOutput{})
	pulumi.RegisterOutputType(TransformOutputFaceDetectorPresetPtrOutput{})
	pulumi.RegisterOutputType(TransformOutputVideoAnalyzerPresetOutput{})
	pulumi.RegisterOutputType(TransformOutputVideoAnalyzerPresetPtrOutput{})
}
