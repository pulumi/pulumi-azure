// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package media

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a Streaming Policy.
//
// ## Import
//
// Streaming Policies can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:media/streamingPolicy:StreamingPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Media/mediaServices/account1/streamingPolicies/policy1
//
// ```
type StreamingPolicy struct {
	pulumi.CustomResourceState

	// A `commonEncryptionCbcs` block as defined below. Changing this forces a new Streaming Policy to be created.
	CommonEncryptionCbcs StreamingPolicyCommonEncryptionCbcsPtrOutput `pulumi:"commonEncryptionCbcs"`
	// A `commonEncryptionCenc` block as defined below. Changing this forces a new Streaming Policy to be created.
	CommonEncryptionCenc StreamingPolicyCommonEncryptionCencPtrOutput `pulumi:"commonEncryptionCenc"`
	// Default Content Key used by current Streaming Policy. Changing this forces a new Streaming Policy to be created.
	DefaultContentKeyPolicyName pulumi.StringPtrOutput `pulumi:"defaultContentKeyPolicyName"`
	// A `envelopeEncryption` block as defined below. Changing this forces a new Streaming Policy to be created.
	EnvelopeEncryption StreamingPolicyEnvelopeEncryptionPtrOutput `pulumi:"envelopeEncryption"`
	// The Media Services account name. Changing this forces a new Streaming Policy to be created.
	MediaServicesAccountName pulumi.StringOutput `pulumi:"mediaServicesAccountName"`
	// The name which should be used for this Streaming Policy. Changing this forces a new Streaming Policy to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A `noEncryptionEnabledProtocols` block as defined below. Changing this forces a new Streaming Policy to be created.
	NoEncryptionEnabledProtocols StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput `pulumi:"noEncryptionEnabledProtocols"`
	// The name of the Resource Group where the Streaming Policy should exist. Changing this forces a new Streaming Policy to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
}

// NewStreamingPolicy registers a new resource with the given unique name, arguments, and options.
func NewStreamingPolicy(ctx *pulumi.Context,
	name string, args *StreamingPolicyArgs, opts ...pulumi.ResourceOption) (*StreamingPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MediaServicesAccountName == nil {
		return nil, errors.New("invalid value for required argument 'MediaServicesAccountName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StreamingPolicy
	err := ctx.RegisterResource("azure:media/streamingPolicy:StreamingPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamingPolicy gets an existing StreamingPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamingPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamingPolicyState, opts ...pulumi.ResourceOption) (*StreamingPolicy, error) {
	var resource StreamingPolicy
	err := ctx.ReadResource("azure:media/streamingPolicy:StreamingPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamingPolicy resources.
type streamingPolicyState struct {
	// A `commonEncryptionCbcs` block as defined below. Changing this forces a new Streaming Policy to be created.
	CommonEncryptionCbcs *StreamingPolicyCommonEncryptionCbcs `pulumi:"commonEncryptionCbcs"`
	// A `commonEncryptionCenc` block as defined below. Changing this forces a new Streaming Policy to be created.
	CommonEncryptionCenc *StreamingPolicyCommonEncryptionCenc `pulumi:"commonEncryptionCenc"`
	// Default Content Key used by current Streaming Policy. Changing this forces a new Streaming Policy to be created.
	DefaultContentKeyPolicyName *string `pulumi:"defaultContentKeyPolicyName"`
	// A `envelopeEncryption` block as defined below. Changing this forces a new Streaming Policy to be created.
	EnvelopeEncryption *StreamingPolicyEnvelopeEncryption `pulumi:"envelopeEncryption"`
	// The Media Services account name. Changing this forces a new Streaming Policy to be created.
	MediaServicesAccountName *string `pulumi:"mediaServicesAccountName"`
	// The name which should be used for this Streaming Policy. Changing this forces a new Streaming Policy to be created.
	Name *string `pulumi:"name"`
	// A `noEncryptionEnabledProtocols` block as defined below. Changing this forces a new Streaming Policy to be created.
	NoEncryptionEnabledProtocols *StreamingPolicyNoEncryptionEnabledProtocols `pulumi:"noEncryptionEnabledProtocols"`
	// The name of the Resource Group where the Streaming Policy should exist. Changing this forces a new Streaming Policy to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
}

type StreamingPolicyState struct {
	// A `commonEncryptionCbcs` block as defined below. Changing this forces a new Streaming Policy to be created.
	CommonEncryptionCbcs StreamingPolicyCommonEncryptionCbcsPtrInput
	// A `commonEncryptionCenc` block as defined below. Changing this forces a new Streaming Policy to be created.
	CommonEncryptionCenc StreamingPolicyCommonEncryptionCencPtrInput
	// Default Content Key used by current Streaming Policy. Changing this forces a new Streaming Policy to be created.
	DefaultContentKeyPolicyName pulumi.StringPtrInput
	// A `envelopeEncryption` block as defined below. Changing this forces a new Streaming Policy to be created.
	EnvelopeEncryption StreamingPolicyEnvelopeEncryptionPtrInput
	// The Media Services account name. Changing this forces a new Streaming Policy to be created.
	MediaServicesAccountName pulumi.StringPtrInput
	// The name which should be used for this Streaming Policy. Changing this forces a new Streaming Policy to be created.
	Name pulumi.StringPtrInput
	// A `noEncryptionEnabledProtocols` block as defined below. Changing this forces a new Streaming Policy to be created.
	NoEncryptionEnabledProtocols StreamingPolicyNoEncryptionEnabledProtocolsPtrInput
	// The name of the Resource Group where the Streaming Policy should exist. Changing this forces a new Streaming Policy to be created.
	ResourceGroupName pulumi.StringPtrInput
}

func (StreamingPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamingPolicyState)(nil)).Elem()
}

type streamingPolicyArgs struct {
	// A `commonEncryptionCbcs` block as defined below. Changing this forces a new Streaming Policy to be created.
	CommonEncryptionCbcs *StreamingPolicyCommonEncryptionCbcs `pulumi:"commonEncryptionCbcs"`
	// A `commonEncryptionCenc` block as defined below. Changing this forces a new Streaming Policy to be created.
	CommonEncryptionCenc *StreamingPolicyCommonEncryptionCenc `pulumi:"commonEncryptionCenc"`
	// Default Content Key used by current Streaming Policy. Changing this forces a new Streaming Policy to be created.
	DefaultContentKeyPolicyName *string `pulumi:"defaultContentKeyPolicyName"`
	// A `envelopeEncryption` block as defined below. Changing this forces a new Streaming Policy to be created.
	EnvelopeEncryption *StreamingPolicyEnvelopeEncryption `pulumi:"envelopeEncryption"`
	// The Media Services account name. Changing this forces a new Streaming Policy to be created.
	MediaServicesAccountName string `pulumi:"mediaServicesAccountName"`
	// The name which should be used for this Streaming Policy. Changing this forces a new Streaming Policy to be created.
	Name *string `pulumi:"name"`
	// A `noEncryptionEnabledProtocols` block as defined below. Changing this forces a new Streaming Policy to be created.
	NoEncryptionEnabledProtocols *StreamingPolicyNoEncryptionEnabledProtocols `pulumi:"noEncryptionEnabledProtocols"`
	// The name of the Resource Group where the Streaming Policy should exist. Changing this forces a new Streaming Policy to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a StreamingPolicy resource.
type StreamingPolicyArgs struct {
	// A `commonEncryptionCbcs` block as defined below. Changing this forces a new Streaming Policy to be created.
	CommonEncryptionCbcs StreamingPolicyCommonEncryptionCbcsPtrInput
	// A `commonEncryptionCenc` block as defined below. Changing this forces a new Streaming Policy to be created.
	CommonEncryptionCenc StreamingPolicyCommonEncryptionCencPtrInput
	// Default Content Key used by current Streaming Policy. Changing this forces a new Streaming Policy to be created.
	DefaultContentKeyPolicyName pulumi.StringPtrInput
	// A `envelopeEncryption` block as defined below. Changing this forces a new Streaming Policy to be created.
	EnvelopeEncryption StreamingPolicyEnvelopeEncryptionPtrInput
	// The Media Services account name. Changing this forces a new Streaming Policy to be created.
	MediaServicesAccountName pulumi.StringInput
	// The name which should be used for this Streaming Policy. Changing this forces a new Streaming Policy to be created.
	Name pulumi.StringPtrInput
	// A `noEncryptionEnabledProtocols` block as defined below. Changing this forces a new Streaming Policy to be created.
	NoEncryptionEnabledProtocols StreamingPolicyNoEncryptionEnabledProtocolsPtrInput
	// The name of the Resource Group where the Streaming Policy should exist. Changing this forces a new Streaming Policy to be created.
	ResourceGroupName pulumi.StringInput
}

func (StreamingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamingPolicyArgs)(nil)).Elem()
}

type StreamingPolicyInput interface {
	pulumi.Input

	ToStreamingPolicyOutput() StreamingPolicyOutput
	ToStreamingPolicyOutputWithContext(ctx context.Context) StreamingPolicyOutput
}

func (*StreamingPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicy)(nil)).Elem()
}

func (i *StreamingPolicy) ToStreamingPolicyOutput() StreamingPolicyOutput {
	return i.ToStreamingPolicyOutputWithContext(context.Background())
}

func (i *StreamingPolicy) ToStreamingPolicyOutputWithContext(ctx context.Context) StreamingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyOutput)
}

func (i *StreamingPolicy) ToOutput(ctx context.Context) pulumix.Output[*StreamingPolicy] {
	return pulumix.Output[*StreamingPolicy]{
		OutputState: i.ToStreamingPolicyOutputWithContext(ctx).OutputState,
	}
}

// StreamingPolicyArrayInput is an input type that accepts StreamingPolicyArray and StreamingPolicyArrayOutput values.
// You can construct a concrete instance of `StreamingPolicyArrayInput` via:
//
//	StreamingPolicyArray{ StreamingPolicyArgs{...} }
type StreamingPolicyArrayInput interface {
	pulumi.Input

	ToStreamingPolicyArrayOutput() StreamingPolicyArrayOutput
	ToStreamingPolicyArrayOutputWithContext(context.Context) StreamingPolicyArrayOutput
}

type StreamingPolicyArray []StreamingPolicyInput

func (StreamingPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamingPolicy)(nil)).Elem()
}

func (i StreamingPolicyArray) ToStreamingPolicyArrayOutput() StreamingPolicyArrayOutput {
	return i.ToStreamingPolicyArrayOutputWithContext(context.Background())
}

func (i StreamingPolicyArray) ToStreamingPolicyArrayOutputWithContext(ctx context.Context) StreamingPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyArrayOutput)
}

func (i StreamingPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]*StreamingPolicy] {
	return pulumix.Output[[]*StreamingPolicy]{
		OutputState: i.ToStreamingPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

// StreamingPolicyMapInput is an input type that accepts StreamingPolicyMap and StreamingPolicyMapOutput values.
// You can construct a concrete instance of `StreamingPolicyMapInput` via:
//
//	StreamingPolicyMap{ "key": StreamingPolicyArgs{...} }
type StreamingPolicyMapInput interface {
	pulumi.Input

	ToStreamingPolicyMapOutput() StreamingPolicyMapOutput
	ToStreamingPolicyMapOutputWithContext(context.Context) StreamingPolicyMapOutput
}

type StreamingPolicyMap map[string]StreamingPolicyInput

func (StreamingPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamingPolicy)(nil)).Elem()
}

func (i StreamingPolicyMap) ToStreamingPolicyMapOutput() StreamingPolicyMapOutput {
	return i.ToStreamingPolicyMapOutputWithContext(context.Background())
}

func (i StreamingPolicyMap) ToStreamingPolicyMapOutputWithContext(ctx context.Context) StreamingPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyMapOutput)
}

func (i StreamingPolicyMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*StreamingPolicy] {
	return pulumix.Output[map[string]*StreamingPolicy]{
		OutputState: i.ToStreamingPolicyMapOutputWithContext(ctx).OutputState,
	}
}

type StreamingPolicyOutput struct{ *pulumi.OutputState }

func (StreamingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicy)(nil)).Elem()
}

func (o StreamingPolicyOutput) ToStreamingPolicyOutput() StreamingPolicyOutput {
	return o
}

func (o StreamingPolicyOutput) ToStreamingPolicyOutputWithContext(ctx context.Context) StreamingPolicyOutput {
	return o
}

func (o StreamingPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[*StreamingPolicy] {
	return pulumix.Output[*StreamingPolicy]{
		OutputState: o.OutputState,
	}
}

// A `commonEncryptionCbcs` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyOutput) CommonEncryptionCbcs() StreamingPolicyCommonEncryptionCbcsPtrOutput {
	return o.ApplyT(func(v *StreamingPolicy) StreamingPolicyCommonEncryptionCbcsPtrOutput { return v.CommonEncryptionCbcs }).(StreamingPolicyCommonEncryptionCbcsPtrOutput)
}

// A `commonEncryptionCenc` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyOutput) CommonEncryptionCenc() StreamingPolicyCommonEncryptionCencPtrOutput {
	return o.ApplyT(func(v *StreamingPolicy) StreamingPolicyCommonEncryptionCencPtrOutput { return v.CommonEncryptionCenc }).(StreamingPolicyCommonEncryptionCencPtrOutput)
}

// Default Content Key used by current Streaming Policy. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyOutput) DefaultContentKeyPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicy) pulumi.StringPtrOutput { return v.DefaultContentKeyPolicyName }).(pulumi.StringPtrOutput)
}

// A `envelopeEncryption` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyOutput) EnvelopeEncryption() StreamingPolicyEnvelopeEncryptionPtrOutput {
	return o.ApplyT(func(v *StreamingPolicy) StreamingPolicyEnvelopeEncryptionPtrOutput { return v.EnvelopeEncryption }).(StreamingPolicyEnvelopeEncryptionPtrOutput)
}

// The Media Services account name. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyOutput) MediaServicesAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamingPolicy) pulumi.StringOutput { return v.MediaServicesAccountName }).(pulumi.StringOutput)
}

// The name which should be used for this Streaming Policy. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamingPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A `noEncryptionEnabledProtocols` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyOutput) NoEncryptionEnabledProtocols() StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput {
	return o.ApplyT(func(v *StreamingPolicy) StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput {
		return v.NoEncryptionEnabledProtocols
	}).(StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput)
}

// The name of the Resource Group where the Streaming Policy should exist. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamingPolicy) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

type StreamingPolicyArrayOutput struct{ *pulumi.OutputState }

func (StreamingPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamingPolicy)(nil)).Elem()
}

func (o StreamingPolicyArrayOutput) ToStreamingPolicyArrayOutput() StreamingPolicyArrayOutput {
	return o
}

func (o StreamingPolicyArrayOutput) ToStreamingPolicyArrayOutputWithContext(ctx context.Context) StreamingPolicyArrayOutput {
	return o
}

func (o StreamingPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*StreamingPolicy] {
	return pulumix.Output[[]*StreamingPolicy]{
		OutputState: o.OutputState,
	}
}

func (o StreamingPolicyArrayOutput) Index(i pulumi.IntInput) StreamingPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StreamingPolicy {
		return vs[0].([]*StreamingPolicy)[vs[1].(int)]
	}).(StreamingPolicyOutput)
}

type StreamingPolicyMapOutput struct{ *pulumi.OutputState }

func (StreamingPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamingPolicy)(nil)).Elem()
}

func (o StreamingPolicyMapOutput) ToStreamingPolicyMapOutput() StreamingPolicyMapOutput {
	return o
}

func (o StreamingPolicyMapOutput) ToStreamingPolicyMapOutputWithContext(ctx context.Context) StreamingPolicyMapOutput {
	return o
}

func (o StreamingPolicyMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*StreamingPolicy] {
	return pulumix.Output[map[string]*StreamingPolicy]{
		OutputState: o.OutputState,
	}
}

func (o StreamingPolicyMapOutput) MapIndex(k pulumi.StringInput) StreamingPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StreamingPolicy {
		return vs[0].(map[string]*StreamingPolicy)[vs[1].(string)]
	}).(StreamingPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyInput)(nil)).Elem(), &StreamingPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyArrayInput)(nil)).Elem(), StreamingPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyMapInput)(nil)).Elem(), StreamingPolicyMap{})
	pulumi.RegisterOutputType(StreamingPolicyOutput{})
	pulumi.RegisterOutputType(StreamingPolicyArrayOutput{})
	pulumi.RegisterOutputType(StreamingPolicyMapOutput{})
}
