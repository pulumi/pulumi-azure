// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package media

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Streaming Policy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/media"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Location:               exampleResourceGroup.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("GRS"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleServiceAccount, err := media.NewServiceAccount(ctx, "exampleServiceAccount", &media.ServiceAccountArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				StorageAccounts: media.ServiceAccountStorageAccountArray{
//					&media.ServiceAccountStorageAccountArgs{
//						Id:        exampleAccount.ID(),
//						IsPrimary: pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleContentKeyPolicy, err := media.NewContentKeyPolicy(ctx, "exampleContentKeyPolicy", &media.ContentKeyPolicyArgs{
//				ResourceGroupName:        exampleResourceGroup.Name,
//				MediaServicesAccountName: exampleServiceAccount.Name,
//				PolicyOptions: media.ContentKeyPolicyPolicyOptionArray{
//					&media.ContentKeyPolicyPolicyOptionArgs{
//						Name: pulumi.String("fairPlay"),
//						FairplayConfiguration: &media.ContentKeyPolicyPolicyOptionFairplayConfigurationArgs{
//							Ask:                   pulumi.String("bb566284cc124a21c435a92cd3c108c4"),
//							Pfx:                   pulumi.String("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"),
//							PfxPassword:           pulumi.String("password"),
//							RentalDurationSeconds: pulumi.Int(2249),
//							RentalAndLeaseKeyType: pulumi.String("PersistentUnlimited"),
//						},
//						OpenRestrictionEnabled: pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = media.NewStreamingPolicy(ctx, "exampleStreamingPolicy", &media.StreamingPolicyArgs{
//				ResourceGroupName:        exampleResourceGroup.Name,
//				MediaServicesAccountName: exampleServiceAccount.Name,
//				CommonEncryptionCenc: &media.StreamingPolicyCommonEncryptionCencArgs{
//					ClearTracks: media.StreamingPolicyCommonEncryptionCencClearTrackArray{
//						&media.StreamingPolicyCommonEncryptionCencClearTrackArgs{
//							Conditions: media.StreamingPolicyCommonEncryptionCencClearTrackConditionArray{
//								&media.StreamingPolicyCommonEncryptionCencClearTrackConditionArgs{
//									Property:  pulumi.String("FourCC"),
//									Operation: pulumi.String("Equal"),
//									Value:     pulumi.String("hev2"),
//								},
//							},
//						},
//					},
//					EnabledProtocols: &media.StreamingPolicyCommonEncryptionCencEnabledProtocolsArgs{
//						Download:        pulumi.Bool(false),
//						Dash:            pulumi.Bool(true),
//						Hls:             pulumi.Bool(false),
//						SmoothStreaming: pulumi.Bool(false),
//					},
//					DefaultContentKey: &media.StreamingPolicyCommonEncryptionCencDefaultContentKeyArgs{
//						Label:      pulumi.String("aesDefaultKey"),
//						PolicyName: exampleContentKeyPolicy.Name,
//					},
//					DrmPlayready: &media.StreamingPolicyCommonEncryptionCencDrmPlayreadyArgs{
//						CustomLicenseAcquisitionUrlTemplate: pulumi.String("https://contoso.com/{AssetAlternativeId}/playready/{ContentKeyId}"),
//						CustomAttributes:                    pulumi.String("PlayReady CustomAttributes"),
//					},
//					DrmWidevineCustomLicenseAcquisitionUrlTemplate: pulumi.String("https://contoso.com/{AssetAlternativeId}/widevine/{ContentKeyId}"),
//				},
//				CommonEncryptionCbcs: &media.StreamingPolicyCommonEncryptionCbcsArgs{
//					EnabledProtocols: &media.StreamingPolicyCommonEncryptionCbcsEnabledProtocolsArgs{
//						Download:        pulumi.Bool(false),
//						Dash:            pulumi.Bool(true),
//						Hls:             pulumi.Bool(false),
//						SmoothStreaming: pulumi.Bool(false),
//					},
//					DrmFairplay: &media.StreamingPolicyCommonEncryptionCbcsDrmFairplayArgs{
//						CustomLicenseAcquisitionUrlTemplate: pulumi.String("https://contoso.com/{AssetAlternativeId}/fairplay/{ContentKeyId}"),
//						AllowPersistentLicense:              pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Streaming Policies can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:media/streamingPolicy:StreamingPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Media/mediaServices/account1/streamingPolicies/policy1
//
// ```
type StreamingPolicy struct {
	pulumi.CustomResourceState

	// A `commonEncryptionCbcs` block as defined below. Changing this forces a new Streaming Policy to be created.
	CommonEncryptionCbcs StreamingPolicyCommonEncryptionCbcsPtrOutput `pulumi:"commonEncryptionCbcs"`
	// A `commonEncryptionCenc` block as defined below. Changing this forces a new Streaming Policy to be created.
	CommonEncryptionCenc StreamingPolicyCommonEncryptionCencPtrOutput `pulumi:"commonEncryptionCenc"`
	// Default Content Key used by current Streaming Policy. Changing this forces a new Streaming Policy to be created.
	DefaultContentKeyPolicyName pulumi.StringPtrOutput `pulumi:"defaultContentKeyPolicyName"`
	// A `envelopeEncryption` block as defined below. Changing this forces a new Streaming Policy to be created.
	EnvelopeEncryption StreamingPolicyEnvelopeEncryptionPtrOutput `pulumi:"envelopeEncryption"`
	// The Media Services account name. Changing this forces a new Streaming Policy to be created.
	MediaServicesAccountName pulumi.StringOutput `pulumi:"mediaServicesAccountName"`
	// The name which should be used for this Streaming Policy. Changing this forces a new Streaming Policy to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A `noEncryptionEnabledProtocols` block as defined below. Changing this forces a new Streaming Policy to be created.
	NoEncryptionEnabledProtocols StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput `pulumi:"noEncryptionEnabledProtocols"`
	// The name of the Resource Group where the Streaming Policy should exist. Changing this forces a new Streaming Policy to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
}

// NewStreamingPolicy registers a new resource with the given unique name, arguments, and options.
func NewStreamingPolicy(ctx *pulumi.Context,
	name string, args *StreamingPolicyArgs, opts ...pulumi.ResourceOption) (*StreamingPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MediaServicesAccountName == nil {
		return nil, errors.New("invalid value for required argument 'MediaServicesAccountName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StreamingPolicy
	err := ctx.RegisterResource("azure:media/streamingPolicy:StreamingPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamingPolicy gets an existing StreamingPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamingPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamingPolicyState, opts ...pulumi.ResourceOption) (*StreamingPolicy, error) {
	var resource StreamingPolicy
	err := ctx.ReadResource("azure:media/streamingPolicy:StreamingPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamingPolicy resources.
type streamingPolicyState struct {
	// A `commonEncryptionCbcs` block as defined below. Changing this forces a new Streaming Policy to be created.
	CommonEncryptionCbcs *StreamingPolicyCommonEncryptionCbcs `pulumi:"commonEncryptionCbcs"`
	// A `commonEncryptionCenc` block as defined below. Changing this forces a new Streaming Policy to be created.
	CommonEncryptionCenc *StreamingPolicyCommonEncryptionCenc `pulumi:"commonEncryptionCenc"`
	// Default Content Key used by current Streaming Policy. Changing this forces a new Streaming Policy to be created.
	DefaultContentKeyPolicyName *string `pulumi:"defaultContentKeyPolicyName"`
	// A `envelopeEncryption` block as defined below. Changing this forces a new Streaming Policy to be created.
	EnvelopeEncryption *StreamingPolicyEnvelopeEncryption `pulumi:"envelopeEncryption"`
	// The Media Services account name. Changing this forces a new Streaming Policy to be created.
	MediaServicesAccountName *string `pulumi:"mediaServicesAccountName"`
	// The name which should be used for this Streaming Policy. Changing this forces a new Streaming Policy to be created.
	Name *string `pulumi:"name"`
	// A `noEncryptionEnabledProtocols` block as defined below. Changing this forces a new Streaming Policy to be created.
	NoEncryptionEnabledProtocols *StreamingPolicyNoEncryptionEnabledProtocols `pulumi:"noEncryptionEnabledProtocols"`
	// The name of the Resource Group where the Streaming Policy should exist. Changing this forces a new Streaming Policy to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
}

type StreamingPolicyState struct {
	// A `commonEncryptionCbcs` block as defined below. Changing this forces a new Streaming Policy to be created.
	CommonEncryptionCbcs StreamingPolicyCommonEncryptionCbcsPtrInput
	// A `commonEncryptionCenc` block as defined below. Changing this forces a new Streaming Policy to be created.
	CommonEncryptionCenc StreamingPolicyCommonEncryptionCencPtrInput
	// Default Content Key used by current Streaming Policy. Changing this forces a new Streaming Policy to be created.
	DefaultContentKeyPolicyName pulumi.StringPtrInput
	// A `envelopeEncryption` block as defined below. Changing this forces a new Streaming Policy to be created.
	EnvelopeEncryption StreamingPolicyEnvelopeEncryptionPtrInput
	// The Media Services account name. Changing this forces a new Streaming Policy to be created.
	MediaServicesAccountName pulumi.StringPtrInput
	// The name which should be used for this Streaming Policy. Changing this forces a new Streaming Policy to be created.
	Name pulumi.StringPtrInput
	// A `noEncryptionEnabledProtocols` block as defined below. Changing this forces a new Streaming Policy to be created.
	NoEncryptionEnabledProtocols StreamingPolicyNoEncryptionEnabledProtocolsPtrInput
	// The name of the Resource Group where the Streaming Policy should exist. Changing this forces a new Streaming Policy to be created.
	ResourceGroupName pulumi.StringPtrInput
}

func (StreamingPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamingPolicyState)(nil)).Elem()
}

type streamingPolicyArgs struct {
	// A `commonEncryptionCbcs` block as defined below. Changing this forces a new Streaming Policy to be created.
	CommonEncryptionCbcs *StreamingPolicyCommonEncryptionCbcs `pulumi:"commonEncryptionCbcs"`
	// A `commonEncryptionCenc` block as defined below. Changing this forces a new Streaming Policy to be created.
	CommonEncryptionCenc *StreamingPolicyCommonEncryptionCenc `pulumi:"commonEncryptionCenc"`
	// Default Content Key used by current Streaming Policy. Changing this forces a new Streaming Policy to be created.
	DefaultContentKeyPolicyName *string `pulumi:"defaultContentKeyPolicyName"`
	// A `envelopeEncryption` block as defined below. Changing this forces a new Streaming Policy to be created.
	EnvelopeEncryption *StreamingPolicyEnvelopeEncryption `pulumi:"envelopeEncryption"`
	// The Media Services account name. Changing this forces a new Streaming Policy to be created.
	MediaServicesAccountName string `pulumi:"mediaServicesAccountName"`
	// The name which should be used for this Streaming Policy. Changing this forces a new Streaming Policy to be created.
	Name *string `pulumi:"name"`
	// A `noEncryptionEnabledProtocols` block as defined below. Changing this forces a new Streaming Policy to be created.
	NoEncryptionEnabledProtocols *StreamingPolicyNoEncryptionEnabledProtocols `pulumi:"noEncryptionEnabledProtocols"`
	// The name of the Resource Group where the Streaming Policy should exist. Changing this forces a new Streaming Policy to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a StreamingPolicy resource.
type StreamingPolicyArgs struct {
	// A `commonEncryptionCbcs` block as defined below. Changing this forces a new Streaming Policy to be created.
	CommonEncryptionCbcs StreamingPolicyCommonEncryptionCbcsPtrInput
	// A `commonEncryptionCenc` block as defined below. Changing this forces a new Streaming Policy to be created.
	CommonEncryptionCenc StreamingPolicyCommonEncryptionCencPtrInput
	// Default Content Key used by current Streaming Policy. Changing this forces a new Streaming Policy to be created.
	DefaultContentKeyPolicyName pulumi.StringPtrInput
	// A `envelopeEncryption` block as defined below. Changing this forces a new Streaming Policy to be created.
	EnvelopeEncryption StreamingPolicyEnvelopeEncryptionPtrInput
	// The Media Services account name. Changing this forces a new Streaming Policy to be created.
	MediaServicesAccountName pulumi.StringInput
	// The name which should be used for this Streaming Policy. Changing this forces a new Streaming Policy to be created.
	Name pulumi.StringPtrInput
	// A `noEncryptionEnabledProtocols` block as defined below. Changing this forces a new Streaming Policy to be created.
	NoEncryptionEnabledProtocols StreamingPolicyNoEncryptionEnabledProtocolsPtrInput
	// The name of the Resource Group where the Streaming Policy should exist. Changing this forces a new Streaming Policy to be created.
	ResourceGroupName pulumi.StringInput
}

func (StreamingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamingPolicyArgs)(nil)).Elem()
}

type StreamingPolicyInput interface {
	pulumi.Input

	ToStreamingPolicyOutput() StreamingPolicyOutput
	ToStreamingPolicyOutputWithContext(ctx context.Context) StreamingPolicyOutput
}

func (*StreamingPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicy)(nil)).Elem()
}

func (i *StreamingPolicy) ToStreamingPolicyOutput() StreamingPolicyOutput {
	return i.ToStreamingPolicyOutputWithContext(context.Background())
}

func (i *StreamingPolicy) ToStreamingPolicyOutputWithContext(ctx context.Context) StreamingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyOutput)
}

// StreamingPolicyArrayInput is an input type that accepts StreamingPolicyArray and StreamingPolicyArrayOutput values.
// You can construct a concrete instance of `StreamingPolicyArrayInput` via:
//
//	StreamingPolicyArray{ StreamingPolicyArgs{...} }
type StreamingPolicyArrayInput interface {
	pulumi.Input

	ToStreamingPolicyArrayOutput() StreamingPolicyArrayOutput
	ToStreamingPolicyArrayOutputWithContext(context.Context) StreamingPolicyArrayOutput
}

type StreamingPolicyArray []StreamingPolicyInput

func (StreamingPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamingPolicy)(nil)).Elem()
}

func (i StreamingPolicyArray) ToStreamingPolicyArrayOutput() StreamingPolicyArrayOutput {
	return i.ToStreamingPolicyArrayOutputWithContext(context.Background())
}

func (i StreamingPolicyArray) ToStreamingPolicyArrayOutputWithContext(ctx context.Context) StreamingPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyArrayOutput)
}

// StreamingPolicyMapInput is an input type that accepts StreamingPolicyMap and StreamingPolicyMapOutput values.
// You can construct a concrete instance of `StreamingPolicyMapInput` via:
//
//	StreamingPolicyMap{ "key": StreamingPolicyArgs{...} }
type StreamingPolicyMapInput interface {
	pulumi.Input

	ToStreamingPolicyMapOutput() StreamingPolicyMapOutput
	ToStreamingPolicyMapOutputWithContext(context.Context) StreamingPolicyMapOutput
}

type StreamingPolicyMap map[string]StreamingPolicyInput

func (StreamingPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamingPolicy)(nil)).Elem()
}

func (i StreamingPolicyMap) ToStreamingPolicyMapOutput() StreamingPolicyMapOutput {
	return i.ToStreamingPolicyMapOutputWithContext(context.Background())
}

func (i StreamingPolicyMap) ToStreamingPolicyMapOutputWithContext(ctx context.Context) StreamingPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyMapOutput)
}

type StreamingPolicyOutput struct{ *pulumi.OutputState }

func (StreamingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicy)(nil)).Elem()
}

func (o StreamingPolicyOutput) ToStreamingPolicyOutput() StreamingPolicyOutput {
	return o
}

func (o StreamingPolicyOutput) ToStreamingPolicyOutputWithContext(ctx context.Context) StreamingPolicyOutput {
	return o
}

// A `commonEncryptionCbcs` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyOutput) CommonEncryptionCbcs() StreamingPolicyCommonEncryptionCbcsPtrOutput {
	return o.ApplyT(func(v *StreamingPolicy) StreamingPolicyCommonEncryptionCbcsPtrOutput { return v.CommonEncryptionCbcs }).(StreamingPolicyCommonEncryptionCbcsPtrOutput)
}

// A `commonEncryptionCenc` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyOutput) CommonEncryptionCenc() StreamingPolicyCommonEncryptionCencPtrOutput {
	return o.ApplyT(func(v *StreamingPolicy) StreamingPolicyCommonEncryptionCencPtrOutput { return v.CommonEncryptionCenc }).(StreamingPolicyCommonEncryptionCencPtrOutput)
}

// Default Content Key used by current Streaming Policy. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyOutput) DefaultContentKeyPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicy) pulumi.StringPtrOutput { return v.DefaultContentKeyPolicyName }).(pulumi.StringPtrOutput)
}

// A `envelopeEncryption` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyOutput) EnvelopeEncryption() StreamingPolicyEnvelopeEncryptionPtrOutput {
	return o.ApplyT(func(v *StreamingPolicy) StreamingPolicyEnvelopeEncryptionPtrOutput { return v.EnvelopeEncryption }).(StreamingPolicyEnvelopeEncryptionPtrOutput)
}

// The Media Services account name. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyOutput) MediaServicesAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamingPolicy) pulumi.StringOutput { return v.MediaServicesAccountName }).(pulumi.StringOutput)
}

// The name which should be used for this Streaming Policy. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamingPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A `noEncryptionEnabledProtocols` block as defined below. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyOutput) NoEncryptionEnabledProtocols() StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput {
	return o.ApplyT(func(v *StreamingPolicy) StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput {
		return v.NoEncryptionEnabledProtocols
	}).(StreamingPolicyNoEncryptionEnabledProtocolsPtrOutput)
}

// The name of the Resource Group where the Streaming Policy should exist. Changing this forces a new Streaming Policy to be created.
func (o StreamingPolicyOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamingPolicy) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

type StreamingPolicyArrayOutput struct{ *pulumi.OutputState }

func (StreamingPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamingPolicy)(nil)).Elem()
}

func (o StreamingPolicyArrayOutput) ToStreamingPolicyArrayOutput() StreamingPolicyArrayOutput {
	return o
}

func (o StreamingPolicyArrayOutput) ToStreamingPolicyArrayOutputWithContext(ctx context.Context) StreamingPolicyArrayOutput {
	return o
}

func (o StreamingPolicyArrayOutput) Index(i pulumi.IntInput) StreamingPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StreamingPolicy {
		return vs[0].([]*StreamingPolicy)[vs[1].(int)]
	}).(StreamingPolicyOutput)
}

type StreamingPolicyMapOutput struct{ *pulumi.OutputState }

func (StreamingPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamingPolicy)(nil)).Elem()
}

func (o StreamingPolicyMapOutput) ToStreamingPolicyMapOutput() StreamingPolicyMapOutput {
	return o
}

func (o StreamingPolicyMapOutput) ToStreamingPolicyMapOutputWithContext(ctx context.Context) StreamingPolicyMapOutput {
	return o
}

func (o StreamingPolicyMapOutput) MapIndex(k pulumi.StringInput) StreamingPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StreamingPolicy {
		return vs[0].(map[string]*StreamingPolicy)[vs[1].(string)]
	}).(StreamingPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyInput)(nil)).Elem(), &StreamingPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyArrayInput)(nil)).Elem(), StreamingPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamingPolicyMapInput)(nil)).Elem(), StreamingPolicyMap{})
	pulumi.RegisterOutputType(StreamingPolicyOutput{})
	pulumi.RegisterOutputType(StreamingPolicyArrayOutput{})
	pulumi.RegisterOutputType(StreamingPolicyMapOutput{})
}
