// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package media

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Transform.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/media"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/storage"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West Europe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
// 			ResourceGroupName:      exampleResourceGroup.Name,
// 			Location:               exampleResourceGroup.Location,
// 			AccountTier:            pulumi.String("Standard"),
// 			AccountReplicationType: pulumi.String("GRS"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleServiceAccount, err := media.NewServiceAccount(ctx, "exampleServiceAccount", &media.ServiceAccountArgs{
// 			Location:          exampleResourceGroup.Location,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			StorageAccounts: media.ServiceAccountStorageAccountArray{
// 				&media.ServiceAccountStorageAccountArgs{
// 					Id:        exampleAccount.ID(),
// 					IsPrimary: pulumi.Bool(true),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = media.NewTransform(ctx, "exampleTransform", &media.TransformArgs{
// 			ResourceGroupName:        exampleResourceGroup.Name,
// 			MediaServicesAccountName: exampleServiceAccount.Name,
// 			Description:              pulumi.String("My transform description"),
// 			Outputs: media.TransformOutputArray{
// 				&media.TransformOutputArgs{
// 					RelativePriority: pulumi.String("Normal"),
// 					OnErrorAction:    pulumi.String("ContinueJob"),
// 					BuiltinPreset: &media.TransformOutputBuiltinPresetArgs{
// 						PresetName: pulumi.String("AACGoodQualityAudio"),
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### With Multiple Outputs
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/media"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/storage"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West Europe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
// 			ResourceGroupName:      exampleResourceGroup.Name,
// 			Location:               exampleResourceGroup.Location,
// 			AccountTier:            pulumi.String("Standard"),
// 			AccountReplicationType: pulumi.String("GRS"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleServiceAccount, err := media.NewServiceAccount(ctx, "exampleServiceAccount", &media.ServiceAccountArgs{
// 			Location:          exampleResourceGroup.Location,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			StorageAccounts: media.ServiceAccountStorageAccountArray{
// 				&media.ServiceAccountStorageAccountArgs{
// 					Id:        exampleAccount.ID(),
// 					IsPrimary: pulumi.Bool(true),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = media.NewTransform(ctx, "exampleTransform", &media.TransformArgs{
// 			ResourceGroupName:        exampleResourceGroup.Name,
// 			MediaServicesAccountName: exampleServiceAccount.Name,
// 			Description:              pulumi.String("My transform description"),
// 			Outputs: media.TransformOutputArray{
// 				&media.TransformOutputArgs{
// 					RelativePriority: pulumi.String("Normal"),
// 					OnErrorAction:    pulumi.String("ContinueJob"),
// 					BuiltinPreset: &media.TransformOutputBuiltinPresetArgs{
// 						PresetName: pulumi.String("AACGoodQualityAudio"),
// 					},
// 				},
// 				&media.TransformOutputArgs{
// 					RelativePriority: pulumi.String("Low"),
// 					OnErrorAction:    pulumi.String("ContinueJob"),
// 					AudioAnalyzerPreset: &media.TransformOutputAudioAnalyzerPresetArgs{
// 						AudioLanguage:     pulumi.String("en-US"),
// 						AudioAnalysisMode: pulumi.String("Basic"),
// 					},
// 				},
// 				&media.TransformOutputArgs{
// 					RelativePriority: pulumi.String("Low"),
// 					OnErrorAction:    pulumi.String("StopProcessingJob"),
// 					FaceDetectorPreset: &media.TransformOutputFaceDetectorPresetArgs{
// 						AnalysisResolution: pulumi.String("StandardDefinition"),
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Transforms can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:media/transform:Transform example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Media/mediaservices/media1/transforms/transform1
// ```
type Transform struct {
	pulumi.CustomResourceState

	// An optional verbose description of the Transform.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The Media Services account name. Changing this forces a new Transform to be created.
	MediaServicesAccountName pulumi.StringOutput `pulumi:"mediaServicesAccountName"`
	// The name which should be used for this Transform. Changing this forces a new Transform to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// One or more `output` blocks as defined below. At least one `output` must be defined.
	Outputs TransformOutputTypeArrayOutput `pulumi:"outputs"`
	// The name of the Resource Group where the Transform should exist. Changing this forces a new Transform to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
}

// NewTransform registers a new resource with the given unique name, arguments, and options.
func NewTransform(ctx *pulumi.Context,
	name string, args *TransformArgs, opts ...pulumi.ResourceOption) (*Transform, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MediaServicesAccountName == nil {
		return nil, errors.New("invalid value for required argument 'MediaServicesAccountName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	var resource Transform
	err := ctx.RegisterResource("azure:media/transform:Transform", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTransform gets an existing Transform resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTransform(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TransformState, opts ...pulumi.ResourceOption) (*Transform, error) {
	var resource Transform
	err := ctx.ReadResource("azure:media/transform:Transform", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Transform resources.
type transformState struct {
	// An optional verbose description of the Transform.
	Description *string `pulumi:"description"`
	// The Media Services account name. Changing this forces a new Transform to be created.
	MediaServicesAccountName *string `pulumi:"mediaServicesAccountName"`
	// The name which should be used for this Transform. Changing this forces a new Transform to be created.
	Name *string `pulumi:"name"`
	// One or more `output` blocks as defined below. At least one `output` must be defined.
	Outputs []TransformOutputType `pulumi:"outputs"`
	// The name of the Resource Group where the Transform should exist. Changing this forces a new Transform to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
}

type TransformState struct {
	// An optional verbose description of the Transform.
	Description pulumi.StringPtrInput
	// The Media Services account name. Changing this forces a new Transform to be created.
	MediaServicesAccountName pulumi.StringPtrInput
	// The name which should be used for this Transform. Changing this forces a new Transform to be created.
	Name pulumi.StringPtrInput
	// One or more `output` blocks as defined below. At least one `output` must be defined.
	Outputs TransformOutputTypeArrayInput
	// The name of the Resource Group where the Transform should exist. Changing this forces a new Transform to be created.
	ResourceGroupName pulumi.StringPtrInput
}

func (TransformState) ElementType() reflect.Type {
	return reflect.TypeOf((*transformState)(nil)).Elem()
}

type transformArgs struct {
	// An optional verbose description of the Transform.
	Description *string `pulumi:"description"`
	// The Media Services account name. Changing this forces a new Transform to be created.
	MediaServicesAccountName string `pulumi:"mediaServicesAccountName"`
	// The name which should be used for this Transform. Changing this forces a new Transform to be created.
	Name *string `pulumi:"name"`
	// One or more `output` blocks as defined below. At least one `output` must be defined.
	Outputs []TransformOutputType `pulumi:"outputs"`
	// The name of the Resource Group where the Transform should exist. Changing this forces a new Transform to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a Transform resource.
type TransformArgs struct {
	// An optional verbose description of the Transform.
	Description pulumi.StringPtrInput
	// The Media Services account name. Changing this forces a new Transform to be created.
	MediaServicesAccountName pulumi.StringInput
	// The name which should be used for this Transform. Changing this forces a new Transform to be created.
	Name pulumi.StringPtrInput
	// One or more `output` blocks as defined below. At least one `output` must be defined.
	Outputs TransformOutputTypeArrayInput
	// The name of the Resource Group where the Transform should exist. Changing this forces a new Transform to be created.
	ResourceGroupName pulumi.StringInput
}

func (TransformArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*transformArgs)(nil)).Elem()
}

type TransformInput interface {
	pulumi.Input

	ToTransformOutput() TransformOutput
	ToTransformOutputWithContext(ctx context.Context) TransformOutput
}

func (*Transform) ElementType() reflect.Type {
	return reflect.TypeOf((*Transform)(nil))
}

func (i *Transform) ToTransformOutput() TransformOutput {
	return i.ToTransformOutputWithContext(context.Background())
}

func (i *Transform) ToTransformOutputWithContext(ctx context.Context) TransformOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutput)
}

func (i *Transform) ToTransformPtrOutput() TransformPtrOutput {
	return i.ToTransformPtrOutputWithContext(context.Background())
}

func (i *Transform) ToTransformPtrOutputWithContext(ctx context.Context) TransformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformPtrOutput)
}

type TransformPtrInput interface {
	pulumi.Input

	ToTransformPtrOutput() TransformPtrOutput
	ToTransformPtrOutputWithContext(ctx context.Context) TransformPtrOutput
}

type transformPtrType TransformArgs

func (*transformPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Transform)(nil))
}

func (i *transformPtrType) ToTransformPtrOutput() TransformPtrOutput {
	return i.ToTransformPtrOutputWithContext(context.Background())
}

func (i *transformPtrType) ToTransformPtrOutputWithContext(ctx context.Context) TransformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformPtrOutput)
}

// TransformArrayInput is an input type that accepts TransformArray and TransformArrayOutput values.
// You can construct a concrete instance of `TransformArrayInput` via:
//
//          TransformArray{ TransformArgs{...} }
type TransformArrayInput interface {
	pulumi.Input

	ToTransformArrayOutput() TransformArrayOutput
	ToTransformArrayOutputWithContext(context.Context) TransformArrayOutput
}

type TransformArray []TransformInput

func (TransformArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Transform)(nil))
}

func (i TransformArray) ToTransformArrayOutput() TransformArrayOutput {
	return i.ToTransformArrayOutputWithContext(context.Background())
}

func (i TransformArray) ToTransformArrayOutputWithContext(ctx context.Context) TransformArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformArrayOutput)
}

// TransformMapInput is an input type that accepts TransformMap and TransformMapOutput values.
// You can construct a concrete instance of `TransformMapInput` via:
//
//          TransformMap{ "key": TransformArgs{...} }
type TransformMapInput interface {
	pulumi.Input

	ToTransformMapOutput() TransformMapOutput
	ToTransformMapOutputWithContext(context.Context) TransformMapOutput
}

type TransformMap map[string]TransformInput

func (TransformMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Transform)(nil))
}

func (i TransformMap) ToTransformMapOutput() TransformMapOutput {
	return i.ToTransformMapOutputWithContext(context.Background())
}

func (i TransformMap) ToTransformMapOutputWithContext(ctx context.Context) TransformMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformMapOutput)
}

type TransformOutput struct {
	*pulumi.OutputState
}

func (TransformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Transform)(nil))
}

func (o TransformOutput) ToTransformOutput() TransformOutput {
	return o
}

func (o TransformOutput) ToTransformOutputWithContext(ctx context.Context) TransformOutput {
	return o
}

func (o TransformOutput) ToTransformPtrOutput() TransformPtrOutput {
	return o.ToTransformPtrOutputWithContext(context.Background())
}

func (o TransformOutput) ToTransformPtrOutputWithContext(ctx context.Context) TransformPtrOutput {
	return o.ApplyT(func(v Transform) *Transform {
		return &v
	}).(TransformPtrOutput)
}

type TransformPtrOutput struct {
	*pulumi.OutputState
}

func (TransformPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Transform)(nil))
}

func (o TransformPtrOutput) ToTransformPtrOutput() TransformPtrOutput {
	return o
}

func (o TransformPtrOutput) ToTransformPtrOutputWithContext(ctx context.Context) TransformPtrOutput {
	return o
}

type TransformArrayOutput struct{ *pulumi.OutputState }

func (TransformArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Transform)(nil))
}

func (o TransformArrayOutput) ToTransformArrayOutput() TransformArrayOutput {
	return o
}

func (o TransformArrayOutput) ToTransformArrayOutputWithContext(ctx context.Context) TransformArrayOutput {
	return o
}

func (o TransformArrayOutput) Index(i pulumi.IntInput) TransformOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Transform {
		return vs[0].([]Transform)[vs[1].(int)]
	}).(TransformOutput)
}

type TransformMapOutput struct{ *pulumi.OutputState }

func (TransformMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Transform)(nil))
}

func (o TransformMapOutput) ToTransformMapOutput() TransformMapOutput {
	return o
}

func (o TransformMapOutput) ToTransformMapOutputWithContext(ctx context.Context) TransformMapOutput {
	return o
}

func (o TransformMapOutput) MapIndex(k pulumi.StringInput) TransformOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Transform {
		return vs[0].(map[string]Transform)[vs[1].(string)]
	}).(TransformOutput)
}

func init() {
	pulumi.RegisterOutputType(TransformOutput{})
	pulumi.RegisterOutputType(TransformPtrOutput{})
	pulumi.RegisterOutputType(TransformArrayOutput{})
	pulumi.RegisterOutputType(TransformMapOutput{})
}
