// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package media

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Transform.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/media"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Location:               exampleResourceGroup.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("GRS"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleServiceAccount, err := media.NewServiceAccount(ctx, "exampleServiceAccount", &media.ServiceAccountArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				StorageAccounts: media.ServiceAccountStorageAccountArray{
//					&media.ServiceAccountStorageAccountArgs{
//						Id:        exampleAccount.ID(),
//						IsPrimary: pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = media.NewTransform(ctx, "exampleTransform", &media.TransformArgs{
//				ResourceGroupName:        exampleResourceGroup.Name,
//				MediaServicesAccountName: exampleServiceAccount.Name,
//				Description:              pulumi.String("My transform description"),
//				Outputs: media.TransformOutputTypeArray{
//					&media.TransformOutputTypeArgs{
//						RelativePriority: pulumi.String("Normal"),
//						OnErrorAction:    pulumi.String("ContinueJob"),
//						BuiltinPreset: &media.TransformOutputBuiltinPresetArgs{
//							PresetName: pulumi.String("AACGoodQualityAudio"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### With Multiple Outputs
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/media"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Location:               exampleResourceGroup.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("GRS"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleServiceAccount, err := media.NewServiceAccount(ctx, "exampleServiceAccount", &media.ServiceAccountArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				StorageAccounts: media.ServiceAccountStorageAccountArray{
//					&media.ServiceAccountStorageAccountArgs{
//						Id:        exampleAccount.ID(),
//						IsPrimary: pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = media.NewTransform(ctx, "exampleTransform", &media.TransformArgs{
//				ResourceGroupName:        exampleResourceGroup.Name,
//				MediaServicesAccountName: exampleServiceAccount.Name,
//				Description:              pulumi.String("My transform description"),
//				Outputs: media.TransformOutputTypeArray{
//					&media.TransformOutputTypeArgs{
//						RelativePriority: pulumi.String("Normal"),
//						OnErrorAction:    pulumi.String("ContinueJob"),
//						BuiltinPreset: &media.TransformOutputBuiltinPresetArgs{
//							PresetName: pulumi.String("AACGoodQualityAudio"),
//							PresetConfiguration: &media.TransformOutputBuiltinPresetPresetConfigurationArgs{
//								Complexity:                pulumi.String("Balanced"),
//								InterleaveOutput:          pulumi.String("NonInterleavedOutput"),
//								KeyFrameIntervalInSeconds: pulumi.Float64(123122.5),
//								MaxBitrateBps:             pulumi.Int(300000),
//								MaxHeight:                 pulumi.Int(480),
//								MaxLayers:                 pulumi.Int(14),
//								MinBitrateBps:             pulumi.Int(200000),
//								MinHeight:                 pulumi.Int(360),
//							},
//						},
//					},
//					&media.TransformOutputTypeArgs{
//						RelativePriority: pulumi.String("Low"),
//						OnErrorAction:    pulumi.String("ContinueJob"),
//						AudioAnalyzerPreset: &media.TransformOutputAudioAnalyzerPresetArgs{
//							AudioLanguage:     pulumi.String("en-US"),
//							AudioAnalysisMode: pulumi.String("Basic"),
//							ExperimentalOptions: pulumi.StringMap{
//								"env": pulumi.String("test"),
//							},
//						},
//					},
//					&media.TransformOutputTypeArgs{
//						RelativePriority: pulumi.String("Low"),
//						OnErrorAction:    pulumi.String("StopProcessingJob"),
//						FaceDetectorPreset: &media.TransformOutputFaceDetectorPresetArgs{
//							AnalysisResolution: pulumi.String("StandardDefinition"),
//							BlurType:           pulumi.String("Med"),
//							FaceRedactorMode:   pulumi.String("Combined"),
//							ExperimentalOptions: pulumi.StringMap{
//								"env": pulumi.String("test"),
//							},
//						},
//					},
//					&media.TransformOutputTypeArgs{
//						RelativePriority: pulumi.String("Normal"),
//						OnErrorAction:    pulumi.String("StopProcessingJob"),
//						VideoAnalyzerPreset: &media.TransformOutputVideoAnalyzerPresetArgs{
//							AudioLanguage:     pulumi.String("en-US"),
//							AudioAnalysisMode: pulumi.String("Basic"),
//							InsightsType:      pulumi.String("AllInsights"),
//							ExperimentalOptions: pulumi.StringMap{
//								"env": pulumi.String("test"),
//							},
//						},
//					},
//					&media.TransformOutputTypeArgs{
//						RelativePriority: pulumi.String("Low"),
//						OnErrorAction:    pulumi.String("ContinueJob"),
//						CustomPreset: &media.TransformOutputCustomPresetArgs{
//							Codecs: media.TransformOutputCustomPresetCodecArray{
//								&media.TransformOutputCustomPresetCodecArgs{
//									AacAudio: &media.TransformOutputCustomPresetCodecAacAudioArgs{
//										Bitrate:      pulumi.Int(128000),
//										Channels:     pulumi.Int(2),
//										SamplingRate: pulumi.Int(48000),
//										Profile:      pulumi.String("AacLc"),
//									},
//								},
//								&media.TransformOutputCustomPresetCodecArgs{
//									CopyAudio: &media.TransformOutputCustomPresetCodecCopyAudioArgs{
//										Label: pulumi.String("test"),
//									},
//								},
//								&media.TransformOutputCustomPresetCodecArgs{
//									CopyVideo: &media.TransformOutputCustomPresetCodecCopyVideoArgs{
//										Label: pulumi.String("test"),
//									},
//								},
//								&media.TransformOutputCustomPresetCodecArgs{
//									H264Video: &media.TransformOutputCustomPresetCodecH264VideoArgs{
//										KeyFrameInterval:            pulumi.String("PT1S"),
//										StretchMode:                 pulumi.String("AutoSize"),
//										SyncMode:                    pulumi.String("Auto"),
//										SceneChangeDetectionEnabled: pulumi.Bool(false),
//										RateControlMode:             pulumi.String("ABR"),
//										Complexity:                  pulumi.String("Quality"),
//										Layers: media.TransformOutputCustomPresetCodecH264VideoLayerArray{
//											&media.TransformOutputCustomPresetCodecH264VideoLayerArgs{
//												Width:                 pulumi.String("64"),
//												Height:                pulumi.String("64"),
//												Bitrate:               pulumi.Int(1045000),
//												MaxBitrate:            pulumi.Int(1045000),
//												BFrames:               pulumi.Int(3),
//												Slices:                pulumi.Int(0),
//												AdaptiveBFrameEnabled: pulumi.Bool(true),
//												Profile:               pulumi.String("Auto"),
//												Level:                 pulumi.String("auto"),
//												BufferWindow:          pulumi.String("PT5S"),
//												ReferenceFrames:       pulumi.Int(4),
//												Crf:                   pulumi.Float64(23),
//												EntropyMode:           pulumi.String("Cabac"),
//											},
//											&media.TransformOutputCustomPresetCodecH264VideoLayerArgs{
//												Width:                 pulumi.String("64"),
//												Height:                pulumi.String("64"),
//												Bitrate:               pulumi.Int(1000),
//												MaxBitrate:            pulumi.Int(1000),
//												BFrames:               pulumi.Int(3),
//												FrameRate:             pulumi.String("32"),
//												Slices:                pulumi.Int(1),
//												AdaptiveBFrameEnabled: pulumi.Bool(true),
//												Profile:               pulumi.String("High444"),
//												Level:                 pulumi.String("auto"),
//												BufferWindow:          pulumi.String("PT5S"),
//												ReferenceFrames:       pulumi.Int(4),
//												Crf:                   pulumi.Float64(23),
//												EntropyMode:           pulumi.String("Cavlc"),
//											},
//										},
//									},
//								},
//								&media.TransformOutputCustomPresetCodecArgs{
//									H265Video: &media.TransformOutputCustomPresetCodecH265VideoArgs{
//										KeyFrameInterval:            pulumi.String("PT2S"),
//										StretchMode:                 pulumi.String("AutoSize"),
//										SyncMode:                    pulumi.String("Auto"),
//										SceneChangeDetectionEnabled: pulumi.Bool(false),
//										Complexity:                  pulumi.String("Speed"),
//										Layers: media.TransformOutputCustomPresetCodecH265VideoLayerArray{
//											&media.TransformOutputCustomPresetCodecH265VideoLayerArgs{
//												Width:                 pulumi.String("64"),
//												Height:                pulumi.String("64"),
//												Bitrate:               pulumi.Int(1045000),
//												MaxBitrate:            pulumi.Int(1045000),
//												BFrames:               pulumi.Int(3),
//												Slices:                pulumi.Int(5),
//												AdaptiveBFrameEnabled: pulumi.Bool(true),
//												Profile:               pulumi.String("Auto"),
//												Label:                 pulumi.String("test"),
//												Level:                 pulumi.String("auto"),
//												BufferWindow:          pulumi.String("PT5S"),
//												FrameRate:             pulumi.String("32"),
//												ReferenceFrames:       pulumi.Int(4),
//												Crf:                   pulumi.Float64(23),
//											},
//										},
//									},
//								},
//								&media.TransformOutputCustomPresetCodecArgs{
//									JpgImage: &media.TransformOutputCustomPresetCodecJpgImageArgs{
//										StretchMode:  pulumi.String("AutoSize"),
//										SyncMode:     pulumi.String("Auto"),
//										Start:        pulumi.String("10"),
//										Range:        pulumi.String("100%%"),
//										SpriteColumn: pulumi.Int(1),
//										Step:         pulumi.String("10"),
//										Layers: media.TransformOutputCustomPresetCodecJpgImageLayerArray{
//											&media.TransformOutputCustomPresetCodecJpgImageLayerArgs{
//												Quality: pulumi.Int(70),
//												Height:  pulumi.String("180"),
//												Label:   pulumi.String("test"),
//												Width:   pulumi.String("120"),
//											},
//										},
//									},
//								},
//								&media.TransformOutputCustomPresetCodecArgs{
//									PngImage: &media.TransformOutputCustomPresetCodecPngImageArgs{
//										StretchMode: pulumi.String("AutoSize"),
//										SyncMode:    pulumi.String("Auto"),
//										Start:       pulumi.String("{Best}"),
//										Range:       pulumi.String("80"),
//										Step:        pulumi.String("10"),
//										Layers: media.TransformOutputCustomPresetCodecPngImageLayerArray{
//											&media.TransformOutputCustomPresetCodecPngImageLayerArgs{
//												Height: pulumi.String("180"),
//												Label:  pulumi.String("test"),
//												Width:  pulumi.String("120"),
//											},
//										},
//									},
//								},
//							},
//							Formats: media.TransformOutputCustomPresetFormatArray{
//								&media.TransformOutputCustomPresetFormatArgs{
//									Jpg: &media.TransformOutputCustomPresetFormatJpgArgs{
//										FilenamePattern: pulumi.String("test{Basename}"),
//									},
//								},
//								&media.TransformOutputCustomPresetFormatArgs{
//									Mp4: &media.TransformOutputCustomPresetFormatMp4Args{
//										FilenamePattern: pulumi.String("test{Bitrate}"),
//										OutputFiles: media.TransformOutputCustomPresetFormatMp4OutputFileArray{
//											&media.TransformOutputCustomPresetFormatMp4OutputFileArgs{
//												Labels: pulumi.StringArray{
//													pulumi.String("test"),
//													pulumi.String("ppe"),
//												},
//											},
//										},
//									},
//								},
//								&media.TransformOutputCustomPresetFormatArgs{
//									Png: &media.TransformOutputCustomPresetFormatPngArgs{
//										FilenamePattern: pulumi.String("test{Basename}"),
//									},
//								},
//								&media.TransformOutputCustomPresetFormatArgs{
//									TransportStream: &media.TransformOutputCustomPresetFormatTransportStreamArgs{
//										FilenamePattern: pulumi.String("test{Bitrate}"),
//										OutputFiles: media.TransformOutputCustomPresetFormatTransportStreamOutputFileArray{
//											&media.TransformOutputCustomPresetFormatTransportStreamOutputFileArgs{
//												Labels: pulumi.StringArray{
//													pulumi.String("prod"),
//												},
//											},
//										},
//									},
//								},
//							},
//							Filter: &media.TransformOutputCustomPresetFilterArgs{
//								CropRectangle: &media.TransformOutputCustomPresetFilterCropRectangleArgs{
//									Height: pulumi.String("240"),
//									Left:   pulumi.String("30"),
//									Top:    pulumi.String("360"),
//									Width:  pulumi.String("70"),
//								},
//								Deinterlace: &media.TransformOutputCustomPresetFilterDeinterlaceArgs{
//									Parity: pulumi.String("TopFieldFirst"),
//									Mode:   pulumi.String("AutoPixelAdaptive"),
//								},
//								FadeIn: &media.TransformOutputCustomPresetFilterFadeInArgs{
//									Duration:  pulumi.String("PT5S"),
//									FadeColor: pulumi.String("0xFF0000"),
//									Start:     pulumi.String("10"),
//								},
//								FadeOut: &media.TransformOutputCustomPresetFilterFadeOutArgs{
//									Duration:  pulumi.String("90%%"),
//									FadeColor: pulumi.String("#FF0C7B"),
//									Start:     pulumi.String("10%%"),
//								},
//								Rotation: pulumi.String("Auto"),
//								Overlays: media.TransformOutputCustomPresetFilterOverlayArray{
//									&media.TransformOutputCustomPresetFilterOverlayArgs{
//										Audio: &media.TransformOutputCustomPresetFilterOverlayAudioArgs{
//											InputLabel:      pulumi.String("label.jpg"),
//											Start:           pulumi.String("PT5S"),
//											End:             pulumi.String("PT30S"),
//											FadeInDuration:  pulumi.String("PT1S"),
//											FadeOutDuration: pulumi.String("PT2S"),
//											AudioGainLevel:  pulumi.Float64(1),
//										},
//									},
//									&media.TransformOutputCustomPresetFilterOverlayArgs{
//										Video: &media.TransformOutputCustomPresetFilterOverlayVideoArgs{
//											InputLabel:      pulumi.String("label.jpg"),
//											Start:           pulumi.String("PT5S"),
//											End:             pulumi.String("PT30S"),
//											FadeInDuration:  pulumi.String("PT1S"),
//											FadeOutDuration: pulumi.String("PT2S"),
//											AudioGainLevel:  pulumi.Float64(1),
//											Opacity:         pulumi.Float64(1),
//											Position: &media.TransformOutputCustomPresetFilterOverlayVideoPositionArgs{
//												Height: pulumi.String("180"),
//												Left:   pulumi.String("20"),
//												Top:    pulumi.String("240"),
//												Width:  pulumi.String("140"),
//											},
//											CropRectangle: &media.TransformOutputCustomPresetFilterOverlayVideoCropRectangleArgs{
//												Height: pulumi.String("240"),
//												Left:   pulumi.String("30"),
//												Top:    pulumi.String("360"),
//												Width:  pulumi.String("70"),
//											},
//										},
//									},
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Transforms can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:media/transform:Transform example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Media/mediaServices/media1/transforms/transform1
//
// ```
type Transform struct {
	pulumi.CustomResourceState

	// An optional verbose description of the Transform.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The Media Services account name. Changing this forces a new Transform to be created.
	MediaServicesAccountName pulumi.StringOutput `pulumi:"mediaServicesAccountName"`
	// The name which should be used for this Transform. Changing this forces a new Transform to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// One or more `output` blocks as defined below. At least one `output` must be defined.
	Outputs TransformOutputTypeArrayOutput `pulumi:"outputs"`
	// The name of the Resource Group where the Transform should exist. Changing this forces a new Transform to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
}

// NewTransform registers a new resource with the given unique name, arguments, and options.
func NewTransform(ctx *pulumi.Context,
	name string, args *TransformArgs, opts ...pulumi.ResourceOption) (*Transform, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MediaServicesAccountName == nil {
		return nil, errors.New("invalid value for required argument 'MediaServicesAccountName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Transform
	err := ctx.RegisterResource("azure:media/transform:Transform", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTransform gets an existing Transform resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTransform(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TransformState, opts ...pulumi.ResourceOption) (*Transform, error) {
	var resource Transform
	err := ctx.ReadResource("azure:media/transform:Transform", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Transform resources.
type transformState struct {
	// An optional verbose description of the Transform.
	Description *string `pulumi:"description"`
	// The Media Services account name. Changing this forces a new Transform to be created.
	MediaServicesAccountName *string `pulumi:"mediaServicesAccountName"`
	// The name which should be used for this Transform. Changing this forces a new Transform to be created.
	Name *string `pulumi:"name"`
	// One or more `output` blocks as defined below. At least one `output` must be defined.
	Outputs []TransformOutputType `pulumi:"outputs"`
	// The name of the Resource Group where the Transform should exist. Changing this forces a new Transform to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
}

type TransformState struct {
	// An optional verbose description of the Transform.
	Description pulumi.StringPtrInput
	// The Media Services account name. Changing this forces a new Transform to be created.
	MediaServicesAccountName pulumi.StringPtrInput
	// The name which should be used for this Transform. Changing this forces a new Transform to be created.
	Name pulumi.StringPtrInput
	// One or more `output` blocks as defined below. At least one `output` must be defined.
	Outputs TransformOutputTypeArrayInput
	// The name of the Resource Group where the Transform should exist. Changing this forces a new Transform to be created.
	ResourceGroupName pulumi.StringPtrInput
}

func (TransformState) ElementType() reflect.Type {
	return reflect.TypeOf((*transformState)(nil)).Elem()
}

type transformArgs struct {
	// An optional verbose description of the Transform.
	Description *string `pulumi:"description"`
	// The Media Services account name. Changing this forces a new Transform to be created.
	MediaServicesAccountName string `pulumi:"mediaServicesAccountName"`
	// The name which should be used for this Transform. Changing this forces a new Transform to be created.
	Name *string `pulumi:"name"`
	// One or more `output` blocks as defined below. At least one `output` must be defined.
	Outputs []TransformOutputType `pulumi:"outputs"`
	// The name of the Resource Group where the Transform should exist. Changing this forces a new Transform to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a Transform resource.
type TransformArgs struct {
	// An optional verbose description of the Transform.
	Description pulumi.StringPtrInput
	// The Media Services account name. Changing this forces a new Transform to be created.
	MediaServicesAccountName pulumi.StringInput
	// The name which should be used for this Transform. Changing this forces a new Transform to be created.
	Name pulumi.StringPtrInput
	// One or more `output` blocks as defined below. At least one `output` must be defined.
	Outputs TransformOutputTypeArrayInput
	// The name of the Resource Group where the Transform should exist. Changing this forces a new Transform to be created.
	ResourceGroupName pulumi.StringInput
}

func (TransformArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*transformArgs)(nil)).Elem()
}

type TransformInput interface {
	pulumi.Input

	ToTransformOutput() TransformOutput
	ToTransformOutputWithContext(ctx context.Context) TransformOutput
}

func (*Transform) ElementType() reflect.Type {
	return reflect.TypeOf((**Transform)(nil)).Elem()
}

func (i *Transform) ToTransformOutput() TransformOutput {
	return i.ToTransformOutputWithContext(context.Background())
}

func (i *Transform) ToTransformOutputWithContext(ctx context.Context) TransformOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutput)
}

// TransformArrayInput is an input type that accepts TransformArray and TransformArrayOutput values.
// You can construct a concrete instance of `TransformArrayInput` via:
//
//	TransformArray{ TransformArgs{...} }
type TransformArrayInput interface {
	pulumi.Input

	ToTransformArrayOutput() TransformArrayOutput
	ToTransformArrayOutputWithContext(context.Context) TransformArrayOutput
}

type TransformArray []TransformInput

func (TransformArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Transform)(nil)).Elem()
}

func (i TransformArray) ToTransformArrayOutput() TransformArrayOutput {
	return i.ToTransformArrayOutputWithContext(context.Background())
}

func (i TransformArray) ToTransformArrayOutputWithContext(ctx context.Context) TransformArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformArrayOutput)
}

// TransformMapInput is an input type that accepts TransformMap and TransformMapOutput values.
// You can construct a concrete instance of `TransformMapInput` via:
//
//	TransformMap{ "key": TransformArgs{...} }
type TransformMapInput interface {
	pulumi.Input

	ToTransformMapOutput() TransformMapOutput
	ToTransformMapOutputWithContext(context.Context) TransformMapOutput
}

type TransformMap map[string]TransformInput

func (TransformMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Transform)(nil)).Elem()
}

func (i TransformMap) ToTransformMapOutput() TransformMapOutput {
	return i.ToTransformMapOutputWithContext(context.Background())
}

func (i TransformMap) ToTransformMapOutputWithContext(ctx context.Context) TransformMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformMapOutput)
}

type TransformOutput struct{ *pulumi.OutputState }

func (TransformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Transform)(nil)).Elem()
}

func (o TransformOutput) ToTransformOutput() TransformOutput {
	return o
}

func (o TransformOutput) ToTransformOutputWithContext(ctx context.Context) TransformOutput {
	return o
}

// An optional verbose description of the Transform.
func (o TransformOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Transform) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The Media Services account name. Changing this forces a new Transform to be created.
func (o TransformOutput) MediaServicesAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v *Transform) pulumi.StringOutput { return v.MediaServicesAccountName }).(pulumi.StringOutput)
}

// The name which should be used for this Transform. Changing this forces a new Transform to be created.
func (o TransformOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Transform) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// One or more `output` blocks as defined below. At least one `output` must be defined.
func (o TransformOutput) Outputs() TransformOutputTypeArrayOutput {
	return o.ApplyT(func(v *Transform) TransformOutputTypeArrayOutput { return v.Outputs }).(TransformOutputTypeArrayOutput)
}

// The name of the Resource Group where the Transform should exist. Changing this forces a new Transform to be created.
func (o TransformOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Transform) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

type TransformArrayOutput struct{ *pulumi.OutputState }

func (TransformArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Transform)(nil)).Elem()
}

func (o TransformArrayOutput) ToTransformArrayOutput() TransformArrayOutput {
	return o
}

func (o TransformArrayOutput) ToTransformArrayOutputWithContext(ctx context.Context) TransformArrayOutput {
	return o
}

func (o TransformArrayOutput) Index(i pulumi.IntInput) TransformOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Transform {
		return vs[0].([]*Transform)[vs[1].(int)]
	}).(TransformOutput)
}

type TransformMapOutput struct{ *pulumi.OutputState }

func (TransformMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Transform)(nil)).Elem()
}

func (o TransformMapOutput) ToTransformMapOutput() TransformMapOutput {
	return o
}

func (o TransformMapOutput) ToTransformMapOutputWithContext(ctx context.Context) TransformMapOutput {
	return o
}

func (o TransformMapOutput) MapIndex(k pulumi.StringInput) TransformOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Transform {
		return vs[0].(map[string]*Transform)[vs[1].(string)]
	}).(TransformOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TransformInput)(nil)).Elem(), &Transform{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformArrayInput)(nil)).Elem(), TransformArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformMapInput)(nil)).Elem(), TransformMap{})
	pulumi.RegisterOutputType(TransformOutput{})
	pulumi.RegisterOutputType(TransformArrayOutput{})
	pulumi.RegisterOutputType(TransformMapOutput{})
}
