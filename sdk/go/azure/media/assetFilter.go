// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package media

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an Azure Media Asset Filter.
//
// ## Import
//
// Asset Filters can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:media/assetFilter:AssetFilter example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Media/mediaServices/account1/assets/asset1/assetFilters/filter1
//
// ```
type AssetFilter struct {
	pulumi.CustomResourceState

	// The Asset ID for which the Asset Filter should be created. Changing this forces a new Asset Filter to be created.
	AssetId pulumi.StringOutput `pulumi:"assetId"`
	// The first quality bitrate. Sets the first video track to appear in the Live Streaming playlist to allow HLS native players to start downloading from this quality level at the beginning.
	FirstQualityBitrate pulumi.IntPtrOutput `pulumi:"firstQualityBitrate"`
	// The name which should be used for this Asset Filter. Changing this forces a new Asset Filter to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A `presentationTimeRange` block as defined below.
	PresentationTimeRange AssetFilterPresentationTimeRangePtrOutput `pulumi:"presentationTimeRange"`
	// One or more `trackSelection` blocks as defined below.
	TrackSelections AssetFilterTrackSelectionArrayOutput `pulumi:"trackSelections"`
}

// NewAssetFilter registers a new resource with the given unique name, arguments, and options.
func NewAssetFilter(ctx *pulumi.Context,
	name string, args *AssetFilterArgs, opts ...pulumi.ResourceOption) (*AssetFilter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AssetId == nil {
		return nil, errors.New("invalid value for required argument 'AssetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AssetFilter
	err := ctx.RegisterResource("azure:media/assetFilter:AssetFilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssetFilter gets an existing AssetFilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssetFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssetFilterState, opts ...pulumi.ResourceOption) (*AssetFilter, error) {
	var resource AssetFilter
	err := ctx.ReadResource("azure:media/assetFilter:AssetFilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AssetFilter resources.
type assetFilterState struct {
	// The Asset ID for which the Asset Filter should be created. Changing this forces a new Asset Filter to be created.
	AssetId *string `pulumi:"assetId"`
	// The first quality bitrate. Sets the first video track to appear in the Live Streaming playlist to allow HLS native players to start downloading from this quality level at the beginning.
	FirstQualityBitrate *int `pulumi:"firstQualityBitrate"`
	// The name which should be used for this Asset Filter. Changing this forces a new Asset Filter to be created.
	Name *string `pulumi:"name"`
	// A `presentationTimeRange` block as defined below.
	PresentationTimeRange *AssetFilterPresentationTimeRange `pulumi:"presentationTimeRange"`
	// One or more `trackSelection` blocks as defined below.
	TrackSelections []AssetFilterTrackSelection `pulumi:"trackSelections"`
}

type AssetFilterState struct {
	// The Asset ID for which the Asset Filter should be created. Changing this forces a new Asset Filter to be created.
	AssetId pulumi.StringPtrInput
	// The first quality bitrate. Sets the first video track to appear in the Live Streaming playlist to allow HLS native players to start downloading from this quality level at the beginning.
	FirstQualityBitrate pulumi.IntPtrInput
	// The name which should be used for this Asset Filter. Changing this forces a new Asset Filter to be created.
	Name pulumi.StringPtrInput
	// A `presentationTimeRange` block as defined below.
	PresentationTimeRange AssetFilterPresentationTimeRangePtrInput
	// One or more `trackSelection` blocks as defined below.
	TrackSelections AssetFilterTrackSelectionArrayInput
}

func (AssetFilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*assetFilterState)(nil)).Elem()
}

type assetFilterArgs struct {
	// The Asset ID for which the Asset Filter should be created. Changing this forces a new Asset Filter to be created.
	AssetId string `pulumi:"assetId"`
	// The first quality bitrate. Sets the first video track to appear in the Live Streaming playlist to allow HLS native players to start downloading from this quality level at the beginning.
	FirstQualityBitrate *int `pulumi:"firstQualityBitrate"`
	// The name which should be used for this Asset Filter. Changing this forces a new Asset Filter to be created.
	Name *string `pulumi:"name"`
	// A `presentationTimeRange` block as defined below.
	PresentationTimeRange *AssetFilterPresentationTimeRange `pulumi:"presentationTimeRange"`
	// One or more `trackSelection` blocks as defined below.
	TrackSelections []AssetFilterTrackSelection `pulumi:"trackSelections"`
}

// The set of arguments for constructing a AssetFilter resource.
type AssetFilterArgs struct {
	// The Asset ID for which the Asset Filter should be created. Changing this forces a new Asset Filter to be created.
	AssetId pulumi.StringInput
	// The first quality bitrate. Sets the first video track to appear in the Live Streaming playlist to allow HLS native players to start downloading from this quality level at the beginning.
	FirstQualityBitrate pulumi.IntPtrInput
	// The name which should be used for this Asset Filter. Changing this forces a new Asset Filter to be created.
	Name pulumi.StringPtrInput
	// A `presentationTimeRange` block as defined below.
	PresentationTimeRange AssetFilterPresentationTimeRangePtrInput
	// One or more `trackSelection` blocks as defined below.
	TrackSelections AssetFilterTrackSelectionArrayInput
}

func (AssetFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assetFilterArgs)(nil)).Elem()
}

type AssetFilterInput interface {
	pulumi.Input

	ToAssetFilterOutput() AssetFilterOutput
	ToAssetFilterOutputWithContext(ctx context.Context) AssetFilterOutput
}

func (*AssetFilter) ElementType() reflect.Type {
	return reflect.TypeOf((**AssetFilter)(nil)).Elem()
}

func (i *AssetFilter) ToAssetFilterOutput() AssetFilterOutput {
	return i.ToAssetFilterOutputWithContext(context.Background())
}

func (i *AssetFilter) ToAssetFilterOutputWithContext(ctx context.Context) AssetFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetFilterOutput)
}

func (i *AssetFilter) ToOutput(ctx context.Context) pulumix.Output[*AssetFilter] {
	return pulumix.Output[*AssetFilter]{
		OutputState: i.ToAssetFilterOutputWithContext(ctx).OutputState,
	}
}

// AssetFilterArrayInput is an input type that accepts AssetFilterArray and AssetFilterArrayOutput values.
// You can construct a concrete instance of `AssetFilterArrayInput` via:
//
//	AssetFilterArray{ AssetFilterArgs{...} }
type AssetFilterArrayInput interface {
	pulumi.Input

	ToAssetFilterArrayOutput() AssetFilterArrayOutput
	ToAssetFilterArrayOutputWithContext(context.Context) AssetFilterArrayOutput
}

type AssetFilterArray []AssetFilterInput

func (AssetFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AssetFilter)(nil)).Elem()
}

func (i AssetFilterArray) ToAssetFilterArrayOutput() AssetFilterArrayOutput {
	return i.ToAssetFilterArrayOutputWithContext(context.Background())
}

func (i AssetFilterArray) ToAssetFilterArrayOutputWithContext(ctx context.Context) AssetFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetFilterArrayOutput)
}

func (i AssetFilterArray) ToOutput(ctx context.Context) pulumix.Output[[]*AssetFilter] {
	return pulumix.Output[[]*AssetFilter]{
		OutputState: i.ToAssetFilterArrayOutputWithContext(ctx).OutputState,
	}
}

// AssetFilterMapInput is an input type that accepts AssetFilterMap and AssetFilterMapOutput values.
// You can construct a concrete instance of `AssetFilterMapInput` via:
//
//	AssetFilterMap{ "key": AssetFilterArgs{...} }
type AssetFilterMapInput interface {
	pulumi.Input

	ToAssetFilterMapOutput() AssetFilterMapOutput
	ToAssetFilterMapOutputWithContext(context.Context) AssetFilterMapOutput
}

type AssetFilterMap map[string]AssetFilterInput

func (AssetFilterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AssetFilter)(nil)).Elem()
}

func (i AssetFilterMap) ToAssetFilterMapOutput() AssetFilterMapOutput {
	return i.ToAssetFilterMapOutputWithContext(context.Background())
}

func (i AssetFilterMap) ToAssetFilterMapOutputWithContext(ctx context.Context) AssetFilterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetFilterMapOutput)
}

func (i AssetFilterMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*AssetFilter] {
	return pulumix.Output[map[string]*AssetFilter]{
		OutputState: i.ToAssetFilterMapOutputWithContext(ctx).OutputState,
	}
}

type AssetFilterOutput struct{ *pulumi.OutputState }

func (AssetFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssetFilter)(nil)).Elem()
}

func (o AssetFilterOutput) ToAssetFilterOutput() AssetFilterOutput {
	return o
}

func (o AssetFilterOutput) ToAssetFilterOutputWithContext(ctx context.Context) AssetFilterOutput {
	return o
}

func (o AssetFilterOutput) ToOutput(ctx context.Context) pulumix.Output[*AssetFilter] {
	return pulumix.Output[*AssetFilter]{
		OutputState: o.OutputState,
	}
}

// The Asset ID for which the Asset Filter should be created. Changing this forces a new Asset Filter to be created.
func (o AssetFilterOutput) AssetId() pulumi.StringOutput {
	return o.ApplyT(func(v *AssetFilter) pulumi.StringOutput { return v.AssetId }).(pulumi.StringOutput)
}

// The first quality bitrate. Sets the first video track to appear in the Live Streaming playlist to allow HLS native players to start downloading from this quality level at the beginning.
func (o AssetFilterOutput) FirstQualityBitrate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AssetFilter) pulumi.IntPtrOutput { return v.FirstQualityBitrate }).(pulumi.IntPtrOutput)
}

// The name which should be used for this Asset Filter. Changing this forces a new Asset Filter to be created.
func (o AssetFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AssetFilter) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A `presentationTimeRange` block as defined below.
func (o AssetFilterOutput) PresentationTimeRange() AssetFilterPresentationTimeRangePtrOutput {
	return o.ApplyT(func(v *AssetFilter) AssetFilterPresentationTimeRangePtrOutput { return v.PresentationTimeRange }).(AssetFilterPresentationTimeRangePtrOutput)
}

// One or more `trackSelection` blocks as defined below.
func (o AssetFilterOutput) TrackSelections() AssetFilterTrackSelectionArrayOutput {
	return o.ApplyT(func(v *AssetFilter) AssetFilterTrackSelectionArrayOutput { return v.TrackSelections }).(AssetFilterTrackSelectionArrayOutput)
}

type AssetFilterArrayOutput struct{ *pulumi.OutputState }

func (AssetFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AssetFilter)(nil)).Elem()
}

func (o AssetFilterArrayOutput) ToAssetFilterArrayOutput() AssetFilterArrayOutput {
	return o
}

func (o AssetFilterArrayOutput) ToAssetFilterArrayOutputWithContext(ctx context.Context) AssetFilterArrayOutput {
	return o
}

func (o AssetFilterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*AssetFilter] {
	return pulumix.Output[[]*AssetFilter]{
		OutputState: o.OutputState,
	}
}

func (o AssetFilterArrayOutput) Index(i pulumi.IntInput) AssetFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AssetFilter {
		return vs[0].([]*AssetFilter)[vs[1].(int)]
	}).(AssetFilterOutput)
}

type AssetFilterMapOutput struct{ *pulumi.OutputState }

func (AssetFilterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AssetFilter)(nil)).Elem()
}

func (o AssetFilterMapOutput) ToAssetFilterMapOutput() AssetFilterMapOutput {
	return o
}

func (o AssetFilterMapOutput) ToAssetFilterMapOutputWithContext(ctx context.Context) AssetFilterMapOutput {
	return o
}

func (o AssetFilterMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*AssetFilter] {
	return pulumix.Output[map[string]*AssetFilter]{
		OutputState: o.OutputState,
	}
}

func (o AssetFilterMapOutput) MapIndex(k pulumi.StringInput) AssetFilterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AssetFilter {
		return vs[0].(map[string]*AssetFilter)[vs[1].(string)]
	}).(AssetFilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AssetFilterInput)(nil)).Elem(), &AssetFilter{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetFilterArrayInput)(nil)).Elem(), AssetFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetFilterMapInput)(nil)).Elem(), AssetFilterMap{})
	pulumi.RegisterOutputType(AssetFilterOutput{})
	pulumi.RegisterOutputType(AssetFilterArrayOutput{})
	pulumi.RegisterOutputType(AssetFilterMapOutput{})
}
