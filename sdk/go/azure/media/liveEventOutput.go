// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package media

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Azure Media Live Event Output.
//
// ## Import
//
// Live Outputs can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:media/liveEventOutput:LiveEventOutput example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Media/mediaservices/account1/liveevents/event1/liveoutputs/output1
// ```
type LiveEventOutputResource struct {
	pulumi.CustomResourceState

	// `ISO 8601` time between 1 minute to 25 hours to indicate the maximum content length that can be archived in the asset for this live output. This also sets the maximum content length for the rewind window. For example, use `PT1H30M` to indicate 1 hour and 30 minutes of archive window. Changing this forces a new Live Output to be created.
	ArchiveWindowDuration pulumi.StringOutput `pulumi:"archiveWindowDuration"`
	// The asset that the live output will write to. Changing this forces a new Live Output to be created.
	AssetName pulumi.StringOutput `pulumi:"assetName"`
	// The description of the live output. Changing this forces a new Live Output to be created.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The number of fragments in an HTTP Live Streaming (HLS) TS segment in the output of the live event. This value does not affect the packing ratio for HLS CMAF output. Changing this forces a new Live Output to be created.
	HlsFragmentsPerTsSegment pulumi.IntPtrOutput `pulumi:"hlsFragmentsPerTsSegment"`
	// The id of the live event. Changing this forces a new Live Output to be created.
	LiveEventId pulumi.StringOutput `pulumi:"liveEventId"`
	// The manifest file name. If not provided, the service will generate one automatically. Changing this forces a new Live Output to be created.
	ManifestName pulumi.StringOutput `pulumi:"manifestName"`
	// The name which should be used for this Live Event Output. Changing this forces a new Live Output to be created.
	Name                    pulumi.StringOutput `pulumi:"name"`
	OutputSnapTimeInSeconds pulumi.IntPtrOutput `pulumi:"outputSnapTimeInSeconds"`
}

// NewLiveEventOutputResource registers a new resource with the given unique name, arguments, and options.
func NewLiveEventOutputResource(ctx *pulumi.Context,
	name string, args *LiveEventOutputResourceArgs, opts ...pulumi.ResourceOption) (*LiveEventOutputResource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ArchiveWindowDuration == nil {
		return nil, errors.New("invalid value for required argument 'ArchiveWindowDuration'")
	}
	if args.AssetName == nil {
		return nil, errors.New("invalid value for required argument 'AssetName'")
	}
	if args.LiveEventId == nil {
		return nil, errors.New("invalid value for required argument 'LiveEventId'")
	}
	var resource LiveEventOutputResource
	err := ctx.RegisterResource("azure:media/liveEventOutput:LiveEventOutput", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLiveEventOutputResource gets an existing LiveEventOutputResource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLiveEventOutputResource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LiveEventOutputResourceState, opts ...pulumi.ResourceOption) (*LiveEventOutputResource, error) {
	var resource LiveEventOutputResource
	err := ctx.ReadResource("azure:media/liveEventOutput:LiveEventOutput", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LiveEventOutputResource resources.
type liveEventOutputResourceState struct {
	// `ISO 8601` time between 1 minute to 25 hours to indicate the maximum content length that can be archived in the asset for this live output. This also sets the maximum content length for the rewind window. For example, use `PT1H30M` to indicate 1 hour and 30 minutes of archive window. Changing this forces a new Live Output to be created.
	ArchiveWindowDuration *string `pulumi:"archiveWindowDuration"`
	// The asset that the live output will write to. Changing this forces a new Live Output to be created.
	AssetName *string `pulumi:"assetName"`
	// The description of the live output. Changing this forces a new Live Output to be created.
	Description *string `pulumi:"description"`
	// The number of fragments in an HTTP Live Streaming (HLS) TS segment in the output of the live event. This value does not affect the packing ratio for HLS CMAF output. Changing this forces a new Live Output to be created.
	HlsFragmentsPerTsSegment *int `pulumi:"hlsFragmentsPerTsSegment"`
	// The id of the live event. Changing this forces a new Live Output to be created.
	LiveEventId *string `pulumi:"liveEventId"`
	// The manifest file name. If not provided, the service will generate one automatically. Changing this forces a new Live Output to be created.
	ManifestName *string `pulumi:"manifestName"`
	// The name which should be used for this Live Event Output. Changing this forces a new Live Output to be created.
	Name                    *string `pulumi:"name"`
	OutputSnapTimeInSeconds *int    `pulumi:"outputSnapTimeInSeconds"`
}

type LiveEventOutputResourceState struct {
	// `ISO 8601` time between 1 minute to 25 hours to indicate the maximum content length that can be archived in the asset for this live output. This also sets the maximum content length for the rewind window. For example, use `PT1H30M` to indicate 1 hour and 30 minutes of archive window. Changing this forces a new Live Output to be created.
	ArchiveWindowDuration pulumi.StringPtrInput
	// The asset that the live output will write to. Changing this forces a new Live Output to be created.
	AssetName pulumi.StringPtrInput
	// The description of the live output. Changing this forces a new Live Output to be created.
	Description pulumi.StringPtrInput
	// The number of fragments in an HTTP Live Streaming (HLS) TS segment in the output of the live event. This value does not affect the packing ratio for HLS CMAF output. Changing this forces a new Live Output to be created.
	HlsFragmentsPerTsSegment pulumi.IntPtrInput
	// The id of the live event. Changing this forces a new Live Output to be created.
	LiveEventId pulumi.StringPtrInput
	// The manifest file name. If not provided, the service will generate one automatically. Changing this forces a new Live Output to be created.
	ManifestName pulumi.StringPtrInput
	// The name which should be used for this Live Event Output. Changing this forces a new Live Output to be created.
	Name                    pulumi.StringPtrInput
	OutputSnapTimeInSeconds pulumi.IntPtrInput
}

func (LiveEventOutputResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*liveEventOutputResourceState)(nil)).Elem()
}

type liveEventOutputResourceArgs struct {
	// `ISO 8601` time between 1 minute to 25 hours to indicate the maximum content length that can be archived in the asset for this live output. This also sets the maximum content length for the rewind window. For example, use `PT1H30M` to indicate 1 hour and 30 minutes of archive window. Changing this forces a new Live Output to be created.
	ArchiveWindowDuration string `pulumi:"archiveWindowDuration"`
	// The asset that the live output will write to. Changing this forces a new Live Output to be created.
	AssetName string `pulumi:"assetName"`
	// The description of the live output. Changing this forces a new Live Output to be created.
	Description *string `pulumi:"description"`
	// The number of fragments in an HTTP Live Streaming (HLS) TS segment in the output of the live event. This value does not affect the packing ratio for HLS CMAF output. Changing this forces a new Live Output to be created.
	HlsFragmentsPerTsSegment *int `pulumi:"hlsFragmentsPerTsSegment"`
	// The id of the live event. Changing this forces a new Live Output to be created.
	LiveEventId string `pulumi:"liveEventId"`
	// The manifest file name. If not provided, the service will generate one automatically. Changing this forces a new Live Output to be created.
	ManifestName *string `pulumi:"manifestName"`
	// The name which should be used for this Live Event Output. Changing this forces a new Live Output to be created.
	Name                    *string `pulumi:"name"`
	OutputSnapTimeInSeconds *int    `pulumi:"outputSnapTimeInSeconds"`
}

// The set of arguments for constructing a LiveEventOutputResource resource.
type LiveEventOutputResourceArgs struct {
	// `ISO 8601` time between 1 minute to 25 hours to indicate the maximum content length that can be archived in the asset for this live output. This also sets the maximum content length for the rewind window. For example, use `PT1H30M` to indicate 1 hour and 30 minutes of archive window. Changing this forces a new Live Output to be created.
	ArchiveWindowDuration pulumi.StringInput
	// The asset that the live output will write to. Changing this forces a new Live Output to be created.
	AssetName pulumi.StringInput
	// The description of the live output. Changing this forces a new Live Output to be created.
	Description pulumi.StringPtrInput
	// The number of fragments in an HTTP Live Streaming (HLS) TS segment in the output of the live event. This value does not affect the packing ratio for HLS CMAF output. Changing this forces a new Live Output to be created.
	HlsFragmentsPerTsSegment pulumi.IntPtrInput
	// The id of the live event. Changing this forces a new Live Output to be created.
	LiveEventId pulumi.StringInput
	// The manifest file name. If not provided, the service will generate one automatically. Changing this forces a new Live Output to be created.
	ManifestName pulumi.StringPtrInput
	// The name which should be used for this Live Event Output. Changing this forces a new Live Output to be created.
	Name                    pulumi.StringPtrInput
	OutputSnapTimeInSeconds pulumi.IntPtrInput
}

func (LiveEventOutputResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*liveEventOutputResourceArgs)(nil)).Elem()
}

type LiveEventOutputResourceInput interface {
	pulumi.Input

	ToLiveEventOutputResourceOutput() LiveEventOutputResourceOutput
	ToLiveEventOutputResourceOutputWithContext(ctx context.Context) LiveEventOutputResourceOutput
}

func (*LiveEventOutputResource) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventOutputResource)(nil)).Elem()
}

func (i *LiveEventOutputResource) ToLiveEventOutputResourceOutput() LiveEventOutputResourceOutput {
	return i.ToLiveEventOutputResourceOutputWithContext(context.Background())
}

func (i *LiveEventOutputResource) ToLiveEventOutputResourceOutputWithContext(ctx context.Context) LiveEventOutputResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventOutputResourceOutput)
}

// LiveEventOutputResourceArrayInput is an input type that accepts LiveEventOutputResourceArray and LiveEventOutputResourceArrayOutput values.
// You can construct a concrete instance of `LiveEventOutputResourceArrayInput` via:
//
//          LiveEventOutputResourceArray{ LiveEventOutputResourceArgs{...} }
type LiveEventOutputResourceArrayInput interface {
	pulumi.Input

	ToLiveEventOutputResourceArrayOutput() LiveEventOutputResourceArrayOutput
	ToLiveEventOutputResourceArrayOutputWithContext(context.Context) LiveEventOutputResourceArrayOutput
}

type LiveEventOutputResourceArray []LiveEventOutputResourceInput

func (LiveEventOutputResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LiveEventOutputResource)(nil)).Elem()
}

func (i LiveEventOutputResourceArray) ToLiveEventOutputResourceArrayOutput() LiveEventOutputResourceArrayOutput {
	return i.ToLiveEventOutputResourceArrayOutputWithContext(context.Background())
}

func (i LiveEventOutputResourceArray) ToLiveEventOutputResourceArrayOutputWithContext(ctx context.Context) LiveEventOutputResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventOutputResourceArrayOutput)
}

// LiveEventOutputResourceMapInput is an input type that accepts LiveEventOutputResourceMap and LiveEventOutputResourceMapOutput values.
// You can construct a concrete instance of `LiveEventOutputResourceMapInput` via:
//
//          LiveEventOutputResourceMap{ "key": LiveEventOutputResourceArgs{...} }
type LiveEventOutputResourceMapInput interface {
	pulumi.Input

	ToLiveEventOutputResourceMapOutput() LiveEventOutputResourceMapOutput
	ToLiveEventOutputResourceMapOutputWithContext(context.Context) LiveEventOutputResourceMapOutput
}

type LiveEventOutputResourceMap map[string]LiveEventOutputResourceInput

func (LiveEventOutputResourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LiveEventOutputResource)(nil)).Elem()
}

func (i LiveEventOutputResourceMap) ToLiveEventOutputResourceMapOutput() LiveEventOutputResourceMapOutput {
	return i.ToLiveEventOutputResourceMapOutputWithContext(context.Background())
}

func (i LiveEventOutputResourceMap) ToLiveEventOutputResourceMapOutputWithContext(ctx context.Context) LiveEventOutputResourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventOutputResourceMapOutput)
}

type LiveEventOutputResourceOutput struct{ *pulumi.OutputState }

func (LiveEventOutputResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventOutputResource)(nil)).Elem()
}

func (o LiveEventOutputResourceOutput) ToLiveEventOutputResourceOutput() LiveEventOutputResourceOutput {
	return o
}

func (o LiveEventOutputResourceOutput) ToLiveEventOutputResourceOutputWithContext(ctx context.Context) LiveEventOutputResourceOutput {
	return o
}

type LiveEventOutputResourceArrayOutput struct{ *pulumi.OutputState }

func (LiveEventOutputResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LiveEventOutputResource)(nil)).Elem()
}

func (o LiveEventOutputResourceArrayOutput) ToLiveEventOutputResourceArrayOutput() LiveEventOutputResourceArrayOutput {
	return o
}

func (o LiveEventOutputResourceArrayOutput) ToLiveEventOutputResourceArrayOutputWithContext(ctx context.Context) LiveEventOutputResourceArrayOutput {
	return o
}

func (o LiveEventOutputResourceArrayOutput) Index(i pulumi.IntInput) LiveEventOutputResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LiveEventOutputResource {
		return vs[0].([]*LiveEventOutputResource)[vs[1].(int)]
	}).(LiveEventOutputResourceOutput)
}

type LiveEventOutputResourceMapOutput struct{ *pulumi.OutputState }

func (LiveEventOutputResourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LiveEventOutputResource)(nil)).Elem()
}

func (o LiveEventOutputResourceMapOutput) ToLiveEventOutputResourceMapOutput() LiveEventOutputResourceMapOutput {
	return o
}

func (o LiveEventOutputResourceMapOutput) ToLiveEventOutputResourceMapOutputWithContext(ctx context.Context) LiveEventOutputResourceMapOutput {
	return o
}

func (o LiveEventOutputResourceMapOutput) MapIndex(k pulumi.StringInput) LiveEventOutputResourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LiveEventOutputResource {
		return vs[0].(map[string]*LiveEventOutputResource)[vs[1].(string)]
	}).(LiveEventOutputResourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LiveEventOutputResourceInput)(nil)).Elem(), &LiveEventOutputResource{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiveEventOutputResourceArrayInput)(nil)).Elem(), LiveEventOutputResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiveEventOutputResourceMapInput)(nil)).Elem(), LiveEventOutputResourceMap{})
	pulumi.RegisterOutputType(LiveEventOutputResourceOutput{})
	pulumi.RegisterOutputType(LiveEventOutputResourceArrayOutput{})
	pulumi.RegisterOutputType(LiveEventOutputResourceMapOutput{})
}
