// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package media

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LiveEventOutputResource struct {
	pulumi.CustomResourceState

	ArchiveWindowDuration    pulumi.StringOutput    `pulumi:"archiveWindowDuration"`
	AssetName                pulumi.StringOutput    `pulumi:"assetName"`
	Description              pulumi.StringPtrOutput `pulumi:"description"`
	HlsFragmentsPerTsSegment pulumi.IntPtrOutput    `pulumi:"hlsFragmentsPerTsSegment"`
	LiveEventId              pulumi.StringOutput    `pulumi:"liveEventId"`
	ManifestName             pulumi.StringOutput    `pulumi:"manifestName"`
	Name                     pulumi.StringOutput    `pulumi:"name"`
	OutputSnapTimeInSeconds  pulumi.IntPtrOutput    `pulumi:"outputSnapTimeInSeconds"`
}

// NewLiveEventOutputResource registers a new resource with the given unique name, arguments, and options.
func NewLiveEventOutputResource(ctx *pulumi.Context,
	name string, args *LiveEventOutputResourceArgs, opts ...pulumi.ResourceOption) (*LiveEventOutputResource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ArchiveWindowDuration == nil {
		return nil, errors.New("invalid value for required argument 'ArchiveWindowDuration'")
	}
	if args.AssetName == nil {
		return nil, errors.New("invalid value for required argument 'AssetName'")
	}
	if args.LiveEventId == nil {
		return nil, errors.New("invalid value for required argument 'LiveEventId'")
	}
	var resource LiveEventOutputResource
	err := ctx.RegisterResource("azure:media/liveEventOutput:LiveEventOutput", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLiveEventOutputResource gets an existing LiveEventOutputResource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLiveEventOutputResource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LiveEventOutputResourceState, opts ...pulumi.ResourceOption) (*LiveEventOutputResource, error) {
	var resource LiveEventOutputResource
	err := ctx.ReadResource("azure:media/liveEventOutput:LiveEventOutput", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LiveEventOutputResource resources.
type liveEventOutputResourceState struct {
	ArchiveWindowDuration    *string `pulumi:"archiveWindowDuration"`
	AssetName                *string `pulumi:"assetName"`
	Description              *string `pulumi:"description"`
	HlsFragmentsPerTsSegment *int    `pulumi:"hlsFragmentsPerTsSegment"`
	LiveEventId              *string `pulumi:"liveEventId"`
	ManifestName             *string `pulumi:"manifestName"`
	Name                     *string `pulumi:"name"`
	OutputSnapTimeInSeconds  *int    `pulumi:"outputSnapTimeInSeconds"`
}

type LiveEventOutputResourceState struct {
	ArchiveWindowDuration    pulumi.StringPtrInput
	AssetName                pulumi.StringPtrInput
	Description              pulumi.StringPtrInput
	HlsFragmentsPerTsSegment pulumi.IntPtrInput
	LiveEventId              pulumi.StringPtrInput
	ManifestName             pulumi.StringPtrInput
	Name                     pulumi.StringPtrInput
	OutputSnapTimeInSeconds  pulumi.IntPtrInput
}

func (LiveEventOutputResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*liveEventOutputResourceState)(nil)).Elem()
}

type liveEventOutputResourceArgs struct {
	ArchiveWindowDuration    string  `pulumi:"archiveWindowDuration"`
	AssetName                string  `pulumi:"assetName"`
	Description              *string `pulumi:"description"`
	HlsFragmentsPerTsSegment *int    `pulumi:"hlsFragmentsPerTsSegment"`
	LiveEventId              string  `pulumi:"liveEventId"`
	ManifestName             *string `pulumi:"manifestName"`
	Name                     *string `pulumi:"name"`
	OutputSnapTimeInSeconds  *int    `pulumi:"outputSnapTimeInSeconds"`
}

// The set of arguments for constructing a LiveEventOutputResource resource.
type LiveEventOutputResourceArgs struct {
	ArchiveWindowDuration    pulumi.StringInput
	AssetName                pulumi.StringInput
	Description              pulumi.StringPtrInput
	HlsFragmentsPerTsSegment pulumi.IntPtrInput
	LiveEventId              pulumi.StringInput
	ManifestName             pulumi.StringPtrInput
	Name                     pulumi.StringPtrInput
	OutputSnapTimeInSeconds  pulumi.IntPtrInput
}

func (LiveEventOutputResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*liveEventOutputResourceArgs)(nil)).Elem()
}

type LiveEventOutputResourceInput interface {
	pulumi.Input

	ToLiveEventOutputResourceOutput() LiveEventOutputResourceOutput
	ToLiveEventOutputResourceOutputWithContext(ctx context.Context) LiveEventOutputResourceOutput
}

func (*LiveEventOutputResource) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventOutputResource)(nil))
}

func (i *LiveEventOutputResource) ToLiveEventOutputResourceOutput() LiveEventOutputResourceOutput {
	return i.ToLiveEventOutputResourceOutputWithContext(context.Background())
}

func (i *LiveEventOutputResource) ToLiveEventOutputResourceOutputWithContext(ctx context.Context) LiveEventOutputResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventOutputResourceOutput)
}

func (i *LiveEventOutputResource) ToLiveEventOutputResourcePtrOutput() LiveEventOutputResourcePtrOutput {
	return i.ToLiveEventOutputResourcePtrOutputWithContext(context.Background())
}

func (i *LiveEventOutputResource) ToLiveEventOutputResourcePtrOutputWithContext(ctx context.Context) LiveEventOutputResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventOutputResourcePtrOutput)
}

type LiveEventOutputResourcePtrInput interface {
	pulumi.Input

	ToLiveEventOutputResourcePtrOutput() LiveEventOutputResourcePtrOutput
	ToLiveEventOutputResourcePtrOutputWithContext(ctx context.Context) LiveEventOutputResourcePtrOutput
}

type liveEventOutputResourcePtrType LiveEventOutputResourceArgs

func (*liveEventOutputResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventOutputResource)(nil))
}

func (i *liveEventOutputResourcePtrType) ToLiveEventOutputResourcePtrOutput() LiveEventOutputResourcePtrOutput {
	return i.ToLiveEventOutputResourcePtrOutputWithContext(context.Background())
}

func (i *liveEventOutputResourcePtrType) ToLiveEventOutputResourcePtrOutputWithContext(ctx context.Context) LiveEventOutputResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventOutputResourcePtrOutput)
}

// LiveEventOutputResourceArrayInput is an input type that accepts LiveEventOutputResourceArray and LiveEventOutputResourceArrayOutput values.
// You can construct a concrete instance of `LiveEventOutputResourceArrayInput` via:
//
//          LiveEventOutputResourceArray{ LiveEventOutputResourceArgs{...} }
type LiveEventOutputResourceArrayInput interface {
	pulumi.Input

	ToLiveEventOutputResourceArrayOutput() LiveEventOutputResourceArrayOutput
	ToLiveEventOutputResourceArrayOutputWithContext(context.Context) LiveEventOutputResourceArrayOutput
}

type LiveEventOutputResourceArray []LiveEventOutputResourceInput

func (LiveEventOutputResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LiveEventOutputResource)(nil)).Elem()
}

func (i LiveEventOutputResourceArray) ToLiveEventOutputResourceArrayOutput() LiveEventOutputResourceArrayOutput {
	return i.ToLiveEventOutputResourceArrayOutputWithContext(context.Background())
}

func (i LiveEventOutputResourceArray) ToLiveEventOutputResourceArrayOutputWithContext(ctx context.Context) LiveEventOutputResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventOutputResourceArrayOutput)
}

// LiveEventOutputResourceMapInput is an input type that accepts LiveEventOutputResourceMap and LiveEventOutputResourceMapOutput values.
// You can construct a concrete instance of `LiveEventOutputResourceMapInput` via:
//
//          LiveEventOutputResourceMap{ "key": LiveEventOutputResourceArgs{...} }
type LiveEventOutputResourceMapInput interface {
	pulumi.Input

	ToLiveEventOutputResourceMapOutput() LiveEventOutputResourceMapOutput
	ToLiveEventOutputResourceMapOutputWithContext(context.Context) LiveEventOutputResourceMapOutput
}

type LiveEventOutputResourceMap map[string]LiveEventOutputResourceInput

func (LiveEventOutputResourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LiveEventOutputResource)(nil)).Elem()
}

func (i LiveEventOutputResourceMap) ToLiveEventOutputResourceMapOutput() LiveEventOutputResourceMapOutput {
	return i.ToLiveEventOutputResourceMapOutputWithContext(context.Background())
}

func (i LiveEventOutputResourceMap) ToLiveEventOutputResourceMapOutputWithContext(ctx context.Context) LiveEventOutputResourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventOutputResourceMapOutput)
}

type LiveEventOutputResourceOutput struct{ *pulumi.OutputState }

func (LiveEventOutputResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventOutputResource)(nil))
}

func (o LiveEventOutputResourceOutput) ToLiveEventOutputResourceOutput() LiveEventOutputResourceOutput {
	return o
}

func (o LiveEventOutputResourceOutput) ToLiveEventOutputResourceOutputWithContext(ctx context.Context) LiveEventOutputResourceOutput {
	return o
}

func (o LiveEventOutputResourceOutput) ToLiveEventOutputResourcePtrOutput() LiveEventOutputResourcePtrOutput {
	return o.ToLiveEventOutputResourcePtrOutputWithContext(context.Background())
}

func (o LiveEventOutputResourceOutput) ToLiveEventOutputResourcePtrOutputWithContext(ctx context.Context) LiveEventOutputResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LiveEventOutputResource) *LiveEventOutputResource {
		return &v
	}).(LiveEventOutputResourcePtrOutput)
}

type LiveEventOutputResourcePtrOutput struct{ *pulumi.OutputState }

func (LiveEventOutputResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventOutputResource)(nil))
}

func (o LiveEventOutputResourcePtrOutput) ToLiveEventOutputResourcePtrOutput() LiveEventOutputResourcePtrOutput {
	return o
}

func (o LiveEventOutputResourcePtrOutput) ToLiveEventOutputResourcePtrOutputWithContext(ctx context.Context) LiveEventOutputResourcePtrOutput {
	return o
}

func (o LiveEventOutputResourcePtrOutput) Elem() LiveEventOutputResourceOutput {
	return o.ApplyT(func(v *LiveEventOutputResource) LiveEventOutputResource {
		if v != nil {
			return *v
		}
		var ret LiveEventOutputResource
		return ret
	}).(LiveEventOutputResourceOutput)
}

type LiveEventOutputResourceArrayOutput struct{ *pulumi.OutputState }

func (LiveEventOutputResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventOutputResource)(nil))
}

func (o LiveEventOutputResourceArrayOutput) ToLiveEventOutputResourceArrayOutput() LiveEventOutputResourceArrayOutput {
	return o
}

func (o LiveEventOutputResourceArrayOutput) ToLiveEventOutputResourceArrayOutputWithContext(ctx context.Context) LiveEventOutputResourceArrayOutput {
	return o
}

func (o LiveEventOutputResourceArrayOutput) Index(i pulumi.IntInput) LiveEventOutputResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LiveEventOutputResource {
		return vs[0].([]LiveEventOutputResource)[vs[1].(int)]
	}).(LiveEventOutputResourceOutput)
}

type LiveEventOutputResourceMapOutput struct{ *pulumi.OutputState }

func (LiveEventOutputResourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LiveEventOutputResource)(nil))
}

func (o LiveEventOutputResourceMapOutput) ToLiveEventOutputResourceMapOutput() LiveEventOutputResourceMapOutput {
	return o
}

func (o LiveEventOutputResourceMapOutput) ToLiveEventOutputResourceMapOutputWithContext(ctx context.Context) LiveEventOutputResourceMapOutput {
	return o
}

func (o LiveEventOutputResourceMapOutput) MapIndex(k pulumi.StringInput) LiveEventOutputResourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) LiveEventOutputResource {
		return vs[0].(map[string]LiveEventOutputResource)[vs[1].(string)]
	}).(LiveEventOutputResourceOutput)
}

func init() {
	pulumi.RegisterOutputType(LiveEventOutputResourceOutput{})
	pulumi.RegisterOutputType(LiveEventOutputResourcePtrOutput{})
	pulumi.RegisterOutputType(LiveEventOutputResourceArrayOutput{})
	pulumi.RegisterOutputType(LiveEventOutputResourceMapOutput{})
}
