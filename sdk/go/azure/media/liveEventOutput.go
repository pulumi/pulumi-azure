// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package media

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LiveEventOutput struct {
	pulumi.CustomResourceState

	ArchiveWindowDuration    pulumi.StringOutput    `pulumi:"archiveWindowDuration"`
	AssetName                pulumi.StringOutput    `pulumi:"assetName"`
	Description              pulumi.StringPtrOutput `pulumi:"description"`
	HlsFragmentsPerTsSegment pulumi.IntPtrOutput    `pulumi:"hlsFragmentsPerTsSegment"`
	LiveEventId              pulumi.StringOutput    `pulumi:"liveEventId"`
	ManifestName             pulumi.StringOutput    `pulumi:"manifestName"`
	Name                     pulumi.StringOutput    `pulumi:"name"`
	OutputSnapTimeInSeconds  pulumi.IntPtrOutput    `pulumi:"outputSnapTimeInSeconds"`
}

// NewLiveEventOutput registers a new resource with the given unique name, arguments, and options.
func NewLiveEventOutput(ctx *pulumi.Context,
	name string, args *LiveEventOutputArgs, opts ...pulumi.ResourceOption) (*LiveEventOutput, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ArchiveWindowDuration == nil {
		return nil, errors.New("invalid value for required argument 'ArchiveWindowDuration'")
	}
	if args.AssetName == nil {
		return nil, errors.New("invalid value for required argument 'AssetName'")
	}
	if args.LiveEventId == nil {
		return nil, errors.New("invalid value for required argument 'LiveEventId'")
	}
	var resource LiveEventOutput
	err := ctx.RegisterResource("azure:media/liveEventOutput:LiveEventOutput", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLiveEventOutput gets an existing LiveEventOutput resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLiveEventOutput(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LiveEventOutputState, opts ...pulumi.ResourceOption) (*LiveEventOutput, error) {
	var resource LiveEventOutput
	err := ctx.ReadResource("azure:media/liveEventOutput:LiveEventOutput", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LiveEventOutput resources.
type liveEventOutputState struct {
	ArchiveWindowDuration    *string `pulumi:"archiveWindowDuration"`
	AssetName                *string `pulumi:"assetName"`
	Description              *string `pulumi:"description"`
	HlsFragmentsPerTsSegment *int    `pulumi:"hlsFragmentsPerTsSegment"`
	LiveEventId              *string `pulumi:"liveEventId"`
	ManifestName             *string `pulumi:"manifestName"`
	Name                     *string `pulumi:"name"`
	OutputSnapTimeInSeconds  *int    `pulumi:"outputSnapTimeInSeconds"`
}

type LiveEventOutputState struct {
	ArchiveWindowDuration    pulumi.StringPtrInput
	AssetName                pulumi.StringPtrInput
	Description              pulumi.StringPtrInput
	HlsFragmentsPerTsSegment pulumi.IntPtrInput
	LiveEventId              pulumi.StringPtrInput
	ManifestName             pulumi.StringPtrInput
	Name                     pulumi.StringPtrInput
	OutputSnapTimeInSeconds  pulumi.IntPtrInput
}

func (LiveEventOutputState) ElementType() reflect.Type {
	return reflect.TypeOf((*liveEventOutputState)(nil)).Elem()
}

type liveEventOutputArgs struct {
	ArchiveWindowDuration    string  `pulumi:"archiveWindowDuration"`
	AssetName                string  `pulumi:"assetName"`
	Description              *string `pulumi:"description"`
	HlsFragmentsPerTsSegment *int    `pulumi:"hlsFragmentsPerTsSegment"`
	LiveEventId              string  `pulumi:"liveEventId"`
	ManifestName             *string `pulumi:"manifestName"`
	Name                     *string `pulumi:"name"`
	OutputSnapTimeInSeconds  *int    `pulumi:"outputSnapTimeInSeconds"`
}

// The set of arguments for constructing a LiveEventOutput resource.
type LiveEventOutputArgs struct {
	ArchiveWindowDuration    pulumi.StringInput
	AssetName                pulumi.StringInput
	Description              pulumi.StringPtrInput
	HlsFragmentsPerTsSegment pulumi.IntPtrInput
	LiveEventId              pulumi.StringInput
	ManifestName             pulumi.StringPtrInput
	Name                     pulumi.StringPtrInput
	OutputSnapTimeInSeconds  pulumi.IntPtrInput
}

func (LiveEventOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*liveEventOutputArgs)(nil)).Elem()
}

type LiveEventOutputInput interface {
	pulumi.Input

	ToLiveEventOutputOutput() LiveEventOutputOutput
	ToLiveEventOutputOutputWithContext(ctx context.Context) LiveEventOutputOutput
}

func (*LiveEventOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventOutput)(nil))
}

func (i *LiveEventOutput) ToLiveEventOutputOutput() LiveEventOutputOutput {
	return i.ToLiveEventOutputOutputWithContext(context.Background())
}

func (i *LiveEventOutput) ToLiveEventOutputOutputWithContext(ctx context.Context) LiveEventOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventOutputOutput)
}

func (i *LiveEventOutput) ToLiveEventOutputPtrOutput() LiveEventOutputPtrOutput {
	return i.ToLiveEventOutputPtrOutputWithContext(context.Background())
}

func (i *LiveEventOutput) ToLiveEventOutputPtrOutputWithContext(ctx context.Context) LiveEventOutputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventOutputPtrOutput)
}

type LiveEventOutputPtrInput interface {
	pulumi.Input

	ToLiveEventOutputPtrOutput() LiveEventOutputPtrOutput
	ToLiveEventOutputPtrOutputWithContext(ctx context.Context) LiveEventOutputPtrOutput
}

type liveEventOutputPtrType LiveEventOutputArgs

func (*liveEventOutputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventOutput)(nil))
}

func (i *liveEventOutputPtrType) ToLiveEventOutputPtrOutput() LiveEventOutputPtrOutput {
	return i.ToLiveEventOutputPtrOutputWithContext(context.Background())
}

func (i *liveEventOutputPtrType) ToLiveEventOutputPtrOutputWithContext(ctx context.Context) LiveEventOutputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventOutputPtrOutput)
}

// LiveEventOutputArrayInput is an input type that accepts LiveEventOutputArray and LiveEventOutputArrayOutput values.
// You can construct a concrete instance of `LiveEventOutputArrayInput` via:
//
//          LiveEventOutputArray{ LiveEventOutputArgs{...} }
type LiveEventOutputArrayInput interface {
	pulumi.Input

	ToLiveEventOutputArrayOutput() LiveEventOutputArrayOutput
	ToLiveEventOutputArrayOutputWithContext(context.Context) LiveEventOutputArrayOutput
}

type LiveEventOutputArray []LiveEventOutputInput

func (LiveEventOutputArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*LiveEventOutput)(nil))
}

func (i LiveEventOutputArray) ToLiveEventOutputArrayOutput() LiveEventOutputArrayOutput {
	return i.ToLiveEventOutputArrayOutputWithContext(context.Background())
}

func (i LiveEventOutputArray) ToLiveEventOutputArrayOutputWithContext(ctx context.Context) LiveEventOutputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventOutputArrayOutput)
}

// LiveEventOutputMapInput is an input type that accepts LiveEventOutputMap and LiveEventOutputMapOutput values.
// You can construct a concrete instance of `LiveEventOutputMapInput` via:
//
//          LiveEventOutputMap{ "key": LiveEventOutputArgs{...} }
type LiveEventOutputMapInput interface {
	pulumi.Input

	ToLiveEventOutputMapOutput() LiveEventOutputMapOutput
	ToLiveEventOutputMapOutputWithContext(context.Context) LiveEventOutputMapOutput
}

type LiveEventOutputMap map[string]LiveEventOutputInput

func (LiveEventOutputMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*LiveEventOutput)(nil))
}

func (i LiveEventOutputMap) ToLiveEventOutputMapOutput() LiveEventOutputMapOutput {
	return i.ToLiveEventOutputMapOutputWithContext(context.Background())
}

func (i LiveEventOutputMap) ToLiveEventOutputMapOutputWithContext(ctx context.Context) LiveEventOutputMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventOutputMapOutput)
}

type LiveEventOutputOutput struct {
	*pulumi.OutputState
}

func (LiveEventOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventOutput)(nil))
}

func (o LiveEventOutputOutput) ToLiveEventOutputOutput() LiveEventOutputOutput {
	return o
}

func (o LiveEventOutputOutput) ToLiveEventOutputOutputWithContext(ctx context.Context) LiveEventOutputOutput {
	return o
}

func (o LiveEventOutputOutput) ToLiveEventOutputPtrOutput() LiveEventOutputPtrOutput {
	return o.ToLiveEventOutputPtrOutputWithContext(context.Background())
}

func (o LiveEventOutputOutput) ToLiveEventOutputPtrOutputWithContext(ctx context.Context) LiveEventOutputPtrOutput {
	return o.ApplyT(func(v LiveEventOutput) *LiveEventOutput {
		return &v
	}).(LiveEventOutputPtrOutput)
}

type LiveEventOutputPtrOutput struct {
	*pulumi.OutputState
}

func (LiveEventOutputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventOutput)(nil))
}

func (o LiveEventOutputPtrOutput) ToLiveEventOutputPtrOutput() LiveEventOutputPtrOutput {
	return o
}

func (o LiveEventOutputPtrOutput) ToLiveEventOutputPtrOutputWithContext(ctx context.Context) LiveEventOutputPtrOutput {
	return o
}

type LiveEventOutputArrayOutput struct{ *pulumi.OutputState }

func (LiveEventOutputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventOutput)(nil))
}

func (o LiveEventOutputArrayOutput) ToLiveEventOutputArrayOutput() LiveEventOutputArrayOutput {
	return o
}

func (o LiveEventOutputArrayOutput) ToLiveEventOutputArrayOutputWithContext(ctx context.Context) LiveEventOutputArrayOutput {
	return o
}

func (o LiveEventOutputArrayOutput) Index(i pulumi.IntInput) LiveEventOutputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LiveEventOutput {
		return vs[0].([]LiveEventOutput)[vs[1].(int)]
	}).(LiveEventOutputOutput)
}

type LiveEventOutputMapOutput struct{ *pulumi.OutputState }

func (LiveEventOutputMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LiveEventOutput)(nil))
}

func (o LiveEventOutputMapOutput) ToLiveEventOutputMapOutput() LiveEventOutputMapOutput {
	return o
}

func (o LiveEventOutputMapOutput) ToLiveEventOutputMapOutputWithContext(ctx context.Context) LiveEventOutputMapOutput {
	return o
}

func (o LiveEventOutputMapOutput) MapIndex(k pulumi.StringInput) LiveEventOutputOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) LiveEventOutput {
		return vs[0].(map[string]LiveEventOutput)[vs[1].(string)]
	}).(LiveEventOutputOutput)
}

func init() {
	pulumi.RegisterOutputType(LiveEventOutputOutput{})
	pulumi.RegisterOutputType(LiveEventOutputPtrOutput{})
	pulumi.RegisterOutputType(LiveEventOutputArrayOutput{})
	pulumi.RegisterOutputType(LiveEventOutputMapOutput{})
}
