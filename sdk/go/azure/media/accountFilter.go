// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package media

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Media Services Account Filter.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/media"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Location:               exampleResourceGroup.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("GRS"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = media.NewServiceAccount(ctx, "exampleServiceAccount", &media.ServiceAccountArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				StorageAccounts: media.ServiceAccountStorageAccountArray{
//					&media.ServiceAccountStorageAccountArgs{
//						Id:        exampleAccount.ID(),
//						IsPrimary: pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = media.NewAccountFilter(ctx, "exampleAccountFilter", &media.AccountFilterArgs{
//				ResourceGroupName:        pulumi.Any(azurerm_resource_group.Test.Name),
//				MediaServicesAccountName: pulumi.Any(azurerm_media_services_account.Test.Name),
//				FirstQualityBitrate:      pulumi.Int(128000),
//				PresentationTimeRange: &media.AccountFilterPresentationTimeRangeArgs{
//					StartInUnits:                pulumi.Int(0),
//					EndInUnits:                  pulumi.Int(15),
//					PresentationWindowInUnits:   pulumi.Int(90),
//					LiveBackoffInUnits:          pulumi.Int(0),
//					UnitTimescaleInMilliseconds: pulumi.Int(1000),
//					ForceEnd:                    pulumi.Bool(false),
//				},
//				TrackSelections: media.AccountFilterTrackSelectionArray{
//					&media.AccountFilterTrackSelectionArgs{
//						Conditions: media.AccountFilterTrackSelectionConditionArray{
//							&media.AccountFilterTrackSelectionConditionArgs{
//								Property:  pulumi.String("Type"),
//								Operation: pulumi.String("Equal"),
//								Value:     pulumi.String("Audio"),
//							},
//							&media.AccountFilterTrackSelectionConditionArgs{
//								Property:  pulumi.String("Language"),
//								Operation: pulumi.String("NotEqual"),
//								Value:     pulumi.String("en"),
//							},
//							&media.AccountFilterTrackSelectionConditionArgs{
//								Property:  pulumi.String("FourCC"),
//								Operation: pulumi.String("NotEqual"),
//								Value:     pulumi.String("EC-3"),
//							},
//						},
//					},
//					&media.AccountFilterTrackSelectionArgs{
//						Conditions: media.AccountFilterTrackSelectionConditionArray{
//							&media.AccountFilterTrackSelectionConditionArgs{
//								Property:  pulumi.String("Type"),
//								Operation: pulumi.String("Equal"),
//								Value:     pulumi.String("Video"),
//							},
//							&media.AccountFilterTrackSelectionConditionArgs{
//								Property:  pulumi.String("Bitrate"),
//								Operation: pulumi.String("Equal"),
//								Value:     pulumi.String("3000000-5000000"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Account Filters can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:media/accountFilter:AccountFilter example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Media/mediaServices/account1/accountFilters/filter1
//
// ```
type AccountFilter struct {
	pulumi.CustomResourceState

	// The first quality bitrate. Sets the first video track to appear in the Live Streaming playlist to allow HLS native players to start downloading from this quality level at the beginning.
	FirstQualityBitrate pulumi.IntPtrOutput `pulumi:"firstQualityBitrate"`
	// The Media Services account name. Changing this forces a new Account Filter to be created.
	MediaServicesAccountName pulumi.StringOutput `pulumi:"mediaServicesAccountName"`
	// The name which should be used for this Account Filter. Changing this forces a new Account Filter to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A `presentationTimeRange` block as defined below.
	PresentationTimeRange AccountFilterPresentationTimeRangePtrOutput `pulumi:"presentationTimeRange"`
	// The name of the Resource Group where the Account Filter should exist. Changing this forces a new Account Filter to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// One or more `trackSelection` blocks as defined below.
	TrackSelections AccountFilterTrackSelectionArrayOutput `pulumi:"trackSelections"`
}

// NewAccountFilter registers a new resource with the given unique name, arguments, and options.
func NewAccountFilter(ctx *pulumi.Context,
	name string, args *AccountFilterArgs, opts ...pulumi.ResourceOption) (*AccountFilter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MediaServicesAccountName == nil {
		return nil, errors.New("invalid value for required argument 'MediaServicesAccountName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccountFilter
	err := ctx.RegisterResource("azure:media/accountFilter:AccountFilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccountFilter gets an existing AccountFilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountFilterState, opts ...pulumi.ResourceOption) (*AccountFilter, error) {
	var resource AccountFilter
	err := ctx.ReadResource("azure:media/accountFilter:AccountFilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccountFilter resources.
type accountFilterState struct {
	// The first quality bitrate. Sets the first video track to appear in the Live Streaming playlist to allow HLS native players to start downloading from this quality level at the beginning.
	FirstQualityBitrate *int `pulumi:"firstQualityBitrate"`
	// The Media Services account name. Changing this forces a new Account Filter to be created.
	MediaServicesAccountName *string `pulumi:"mediaServicesAccountName"`
	// The name which should be used for this Account Filter. Changing this forces a new Account Filter to be created.
	Name *string `pulumi:"name"`
	// A `presentationTimeRange` block as defined below.
	PresentationTimeRange *AccountFilterPresentationTimeRange `pulumi:"presentationTimeRange"`
	// The name of the Resource Group where the Account Filter should exist. Changing this forces a new Account Filter to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// One or more `trackSelection` blocks as defined below.
	TrackSelections []AccountFilterTrackSelection `pulumi:"trackSelections"`
}

type AccountFilterState struct {
	// The first quality bitrate. Sets the first video track to appear in the Live Streaming playlist to allow HLS native players to start downloading from this quality level at the beginning.
	FirstQualityBitrate pulumi.IntPtrInput
	// The Media Services account name. Changing this forces a new Account Filter to be created.
	MediaServicesAccountName pulumi.StringPtrInput
	// The name which should be used for this Account Filter. Changing this forces a new Account Filter to be created.
	Name pulumi.StringPtrInput
	// A `presentationTimeRange` block as defined below.
	PresentationTimeRange AccountFilterPresentationTimeRangePtrInput
	// The name of the Resource Group where the Account Filter should exist. Changing this forces a new Account Filter to be created.
	ResourceGroupName pulumi.StringPtrInput
	// One or more `trackSelection` blocks as defined below.
	TrackSelections AccountFilterTrackSelectionArrayInput
}

func (AccountFilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountFilterState)(nil)).Elem()
}

type accountFilterArgs struct {
	// The first quality bitrate. Sets the first video track to appear in the Live Streaming playlist to allow HLS native players to start downloading from this quality level at the beginning.
	FirstQualityBitrate *int `pulumi:"firstQualityBitrate"`
	// The Media Services account name. Changing this forces a new Account Filter to be created.
	MediaServicesAccountName string `pulumi:"mediaServicesAccountName"`
	// The name which should be used for this Account Filter. Changing this forces a new Account Filter to be created.
	Name *string `pulumi:"name"`
	// A `presentationTimeRange` block as defined below.
	PresentationTimeRange *AccountFilterPresentationTimeRange `pulumi:"presentationTimeRange"`
	// The name of the Resource Group where the Account Filter should exist. Changing this forces a new Account Filter to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// One or more `trackSelection` blocks as defined below.
	TrackSelections []AccountFilterTrackSelection `pulumi:"trackSelections"`
}

// The set of arguments for constructing a AccountFilter resource.
type AccountFilterArgs struct {
	// The first quality bitrate. Sets the first video track to appear in the Live Streaming playlist to allow HLS native players to start downloading from this quality level at the beginning.
	FirstQualityBitrate pulumi.IntPtrInput
	// The Media Services account name. Changing this forces a new Account Filter to be created.
	MediaServicesAccountName pulumi.StringInput
	// The name which should be used for this Account Filter. Changing this forces a new Account Filter to be created.
	Name pulumi.StringPtrInput
	// A `presentationTimeRange` block as defined below.
	PresentationTimeRange AccountFilterPresentationTimeRangePtrInput
	// The name of the Resource Group where the Account Filter should exist. Changing this forces a new Account Filter to be created.
	ResourceGroupName pulumi.StringInput
	// One or more `trackSelection` blocks as defined below.
	TrackSelections AccountFilterTrackSelectionArrayInput
}

func (AccountFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountFilterArgs)(nil)).Elem()
}

type AccountFilterInput interface {
	pulumi.Input

	ToAccountFilterOutput() AccountFilterOutput
	ToAccountFilterOutputWithContext(ctx context.Context) AccountFilterOutput
}

func (*AccountFilter) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountFilter)(nil)).Elem()
}

func (i *AccountFilter) ToAccountFilterOutput() AccountFilterOutput {
	return i.ToAccountFilterOutputWithContext(context.Background())
}

func (i *AccountFilter) ToAccountFilterOutputWithContext(ctx context.Context) AccountFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountFilterOutput)
}

// AccountFilterArrayInput is an input type that accepts AccountFilterArray and AccountFilterArrayOutput values.
// You can construct a concrete instance of `AccountFilterArrayInput` via:
//
//	AccountFilterArray{ AccountFilterArgs{...} }
type AccountFilterArrayInput interface {
	pulumi.Input

	ToAccountFilterArrayOutput() AccountFilterArrayOutput
	ToAccountFilterArrayOutputWithContext(context.Context) AccountFilterArrayOutput
}

type AccountFilterArray []AccountFilterInput

func (AccountFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountFilter)(nil)).Elem()
}

func (i AccountFilterArray) ToAccountFilterArrayOutput() AccountFilterArrayOutput {
	return i.ToAccountFilterArrayOutputWithContext(context.Background())
}

func (i AccountFilterArray) ToAccountFilterArrayOutputWithContext(ctx context.Context) AccountFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountFilterArrayOutput)
}

// AccountFilterMapInput is an input type that accepts AccountFilterMap and AccountFilterMapOutput values.
// You can construct a concrete instance of `AccountFilterMapInput` via:
//
//	AccountFilterMap{ "key": AccountFilterArgs{...} }
type AccountFilterMapInput interface {
	pulumi.Input

	ToAccountFilterMapOutput() AccountFilterMapOutput
	ToAccountFilterMapOutputWithContext(context.Context) AccountFilterMapOutput
}

type AccountFilterMap map[string]AccountFilterInput

func (AccountFilterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountFilter)(nil)).Elem()
}

func (i AccountFilterMap) ToAccountFilterMapOutput() AccountFilterMapOutput {
	return i.ToAccountFilterMapOutputWithContext(context.Background())
}

func (i AccountFilterMap) ToAccountFilterMapOutputWithContext(ctx context.Context) AccountFilterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountFilterMapOutput)
}

type AccountFilterOutput struct{ *pulumi.OutputState }

func (AccountFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountFilter)(nil)).Elem()
}

func (o AccountFilterOutput) ToAccountFilterOutput() AccountFilterOutput {
	return o
}

func (o AccountFilterOutput) ToAccountFilterOutputWithContext(ctx context.Context) AccountFilterOutput {
	return o
}

// The first quality bitrate. Sets the first video track to appear in the Live Streaming playlist to allow HLS native players to start downloading from this quality level at the beginning.
func (o AccountFilterOutput) FirstQualityBitrate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AccountFilter) pulumi.IntPtrOutput { return v.FirstQualityBitrate }).(pulumi.IntPtrOutput)
}

// The Media Services account name. Changing this forces a new Account Filter to be created.
func (o AccountFilterOutput) MediaServicesAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountFilter) pulumi.StringOutput { return v.MediaServicesAccountName }).(pulumi.StringOutput)
}

// The name which should be used for this Account Filter. Changing this forces a new Account Filter to be created.
func (o AccountFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountFilter) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A `presentationTimeRange` block as defined below.
func (o AccountFilterOutput) PresentationTimeRange() AccountFilterPresentationTimeRangePtrOutput {
	return o.ApplyT(func(v *AccountFilter) AccountFilterPresentationTimeRangePtrOutput { return v.PresentationTimeRange }).(AccountFilterPresentationTimeRangePtrOutput)
}

// The name of the Resource Group where the Account Filter should exist. Changing this forces a new Account Filter to be created.
func (o AccountFilterOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountFilter) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// One or more `trackSelection` blocks as defined below.
func (o AccountFilterOutput) TrackSelections() AccountFilterTrackSelectionArrayOutput {
	return o.ApplyT(func(v *AccountFilter) AccountFilterTrackSelectionArrayOutput { return v.TrackSelections }).(AccountFilterTrackSelectionArrayOutput)
}

type AccountFilterArrayOutput struct{ *pulumi.OutputState }

func (AccountFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountFilter)(nil)).Elem()
}

func (o AccountFilterArrayOutput) ToAccountFilterArrayOutput() AccountFilterArrayOutput {
	return o
}

func (o AccountFilterArrayOutput) ToAccountFilterArrayOutputWithContext(ctx context.Context) AccountFilterArrayOutput {
	return o
}

func (o AccountFilterArrayOutput) Index(i pulumi.IntInput) AccountFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccountFilter {
		return vs[0].([]*AccountFilter)[vs[1].(int)]
	}).(AccountFilterOutput)
}

type AccountFilterMapOutput struct{ *pulumi.OutputState }

func (AccountFilterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountFilter)(nil)).Elem()
}

func (o AccountFilterMapOutput) ToAccountFilterMapOutput() AccountFilterMapOutput {
	return o
}

func (o AccountFilterMapOutput) ToAccountFilterMapOutputWithContext(ctx context.Context) AccountFilterMapOutput {
	return o
}

func (o AccountFilterMapOutput) MapIndex(k pulumi.StringInput) AccountFilterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccountFilter {
		return vs[0].(map[string]*AccountFilter)[vs[1].(string)]
	}).(AccountFilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountFilterInput)(nil)).Elem(), &AccountFilter{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountFilterArrayInput)(nil)).Elem(), AccountFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountFilterMapInput)(nil)).Elem(), AccountFilterMap{})
	pulumi.RegisterOutputType(AccountFilterOutput{})
	pulumi.RegisterOutputType(AccountFilterArrayOutput{})
	pulumi.RegisterOutputType(AccountFilterMapOutput{})
}
