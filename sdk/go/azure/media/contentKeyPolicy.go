// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package media

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Content Key Policy.
//
// ## Import
//
// Resource Groups can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:media/contentKeyPolicy:ContentKeyPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Media/mediaservices/account1/contentkeypolicies/policy1
// ```
type ContentKeyPolicy struct {
	pulumi.CustomResourceState

	// A description for the Policy.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The Media Services account name. Changing this forces a new Content Key Policy to be created.
	MediaServicesAccountName pulumi.StringOutput `pulumi:"mediaServicesAccountName"`
	// The name which should be used for this Content Key Policy. Changing this forces a new Content Key Policy to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// One or more `policyOption` blocks as defined below.
	PolicyOptions ContentKeyPolicyPolicyOptionArrayOutput `pulumi:"policyOptions"`
	// The name of the Resource Group where the Content Key Policy should exist. Changing this forces a new Content Key Policy to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
}

// NewContentKeyPolicy registers a new resource with the given unique name, arguments, and options.
func NewContentKeyPolicy(ctx *pulumi.Context,
	name string, args *ContentKeyPolicyArgs, opts ...pulumi.ResourceOption) (*ContentKeyPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MediaServicesAccountName == nil {
		return nil, errors.New("invalid value for required argument 'MediaServicesAccountName'")
	}
	if args.PolicyOptions == nil {
		return nil, errors.New("invalid value for required argument 'PolicyOptions'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	var resource ContentKeyPolicy
	err := ctx.RegisterResource("azure:media/contentKeyPolicy:ContentKeyPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContentKeyPolicy gets an existing ContentKeyPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContentKeyPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContentKeyPolicyState, opts ...pulumi.ResourceOption) (*ContentKeyPolicy, error) {
	var resource ContentKeyPolicy
	err := ctx.ReadResource("azure:media/contentKeyPolicy:ContentKeyPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContentKeyPolicy resources.
type contentKeyPolicyState struct {
	// A description for the Policy.
	Description *string `pulumi:"description"`
	// The Media Services account name. Changing this forces a new Content Key Policy to be created.
	MediaServicesAccountName *string `pulumi:"mediaServicesAccountName"`
	// The name which should be used for this Content Key Policy. Changing this forces a new Content Key Policy to be created.
	Name *string `pulumi:"name"`
	// One or more `policyOption` blocks as defined below.
	PolicyOptions []ContentKeyPolicyPolicyOption `pulumi:"policyOptions"`
	// The name of the Resource Group where the Content Key Policy should exist. Changing this forces a new Content Key Policy to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
}

type ContentKeyPolicyState struct {
	// A description for the Policy.
	Description pulumi.StringPtrInput
	// The Media Services account name. Changing this forces a new Content Key Policy to be created.
	MediaServicesAccountName pulumi.StringPtrInput
	// The name which should be used for this Content Key Policy. Changing this forces a new Content Key Policy to be created.
	Name pulumi.StringPtrInput
	// One or more `policyOption` blocks as defined below.
	PolicyOptions ContentKeyPolicyPolicyOptionArrayInput
	// The name of the Resource Group where the Content Key Policy should exist. Changing this forces a new Content Key Policy to be created.
	ResourceGroupName pulumi.StringPtrInput
}

func (ContentKeyPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*contentKeyPolicyState)(nil)).Elem()
}

type contentKeyPolicyArgs struct {
	// A description for the Policy.
	Description *string `pulumi:"description"`
	// The Media Services account name. Changing this forces a new Content Key Policy to be created.
	MediaServicesAccountName string `pulumi:"mediaServicesAccountName"`
	// The name which should be used for this Content Key Policy. Changing this forces a new Content Key Policy to be created.
	Name *string `pulumi:"name"`
	// One or more `policyOption` blocks as defined below.
	PolicyOptions []ContentKeyPolicyPolicyOption `pulumi:"policyOptions"`
	// The name of the Resource Group where the Content Key Policy should exist. Changing this forces a new Content Key Policy to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a ContentKeyPolicy resource.
type ContentKeyPolicyArgs struct {
	// A description for the Policy.
	Description pulumi.StringPtrInput
	// The Media Services account name. Changing this forces a new Content Key Policy to be created.
	MediaServicesAccountName pulumi.StringInput
	// The name which should be used for this Content Key Policy. Changing this forces a new Content Key Policy to be created.
	Name pulumi.StringPtrInput
	// One or more `policyOption` blocks as defined below.
	PolicyOptions ContentKeyPolicyPolicyOptionArrayInput
	// The name of the Resource Group where the Content Key Policy should exist. Changing this forces a new Content Key Policy to be created.
	ResourceGroupName pulumi.StringInput
}

func (ContentKeyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*contentKeyPolicyArgs)(nil)).Elem()
}

type ContentKeyPolicyInput interface {
	pulumi.Input

	ToContentKeyPolicyOutput() ContentKeyPolicyOutput
	ToContentKeyPolicyOutputWithContext(ctx context.Context) ContentKeyPolicyOutput
}

func (*ContentKeyPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicy)(nil))
}

func (i *ContentKeyPolicy) ToContentKeyPolicyOutput() ContentKeyPolicyOutput {
	return i.ToContentKeyPolicyOutputWithContext(context.Background())
}

func (i *ContentKeyPolicy) ToContentKeyPolicyOutputWithContext(ctx context.Context) ContentKeyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyOutput)
}

func (i *ContentKeyPolicy) ToContentKeyPolicyPtrOutput() ContentKeyPolicyPtrOutput {
	return i.ToContentKeyPolicyPtrOutputWithContext(context.Background())
}

func (i *ContentKeyPolicy) ToContentKeyPolicyPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPtrOutput)
}

type ContentKeyPolicyPtrInput interface {
	pulumi.Input

	ToContentKeyPolicyPtrOutput() ContentKeyPolicyPtrOutput
	ToContentKeyPolicyPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPtrOutput
}

type contentKeyPolicyPtrType ContentKeyPolicyArgs

func (*contentKeyPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentKeyPolicy)(nil))
}

func (i *contentKeyPolicyPtrType) ToContentKeyPolicyPtrOutput() ContentKeyPolicyPtrOutput {
	return i.ToContentKeyPolicyPtrOutputWithContext(context.Background())
}

func (i *contentKeyPolicyPtrType) ToContentKeyPolicyPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPtrOutput)
}

// ContentKeyPolicyArrayInput is an input type that accepts ContentKeyPolicyArray and ContentKeyPolicyArrayOutput values.
// You can construct a concrete instance of `ContentKeyPolicyArrayInput` via:
//
//          ContentKeyPolicyArray{ ContentKeyPolicyArgs{...} }
type ContentKeyPolicyArrayInput interface {
	pulumi.Input

	ToContentKeyPolicyArrayOutput() ContentKeyPolicyArrayOutput
	ToContentKeyPolicyArrayOutputWithContext(context.Context) ContentKeyPolicyArrayOutput
}

type ContentKeyPolicyArray []ContentKeyPolicyInput

func (ContentKeyPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*ContentKeyPolicy)(nil))
}

func (i ContentKeyPolicyArray) ToContentKeyPolicyArrayOutput() ContentKeyPolicyArrayOutput {
	return i.ToContentKeyPolicyArrayOutputWithContext(context.Background())
}

func (i ContentKeyPolicyArray) ToContentKeyPolicyArrayOutputWithContext(ctx context.Context) ContentKeyPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyArrayOutput)
}

// ContentKeyPolicyMapInput is an input type that accepts ContentKeyPolicyMap and ContentKeyPolicyMapOutput values.
// You can construct a concrete instance of `ContentKeyPolicyMapInput` via:
//
//          ContentKeyPolicyMap{ "key": ContentKeyPolicyArgs{...} }
type ContentKeyPolicyMapInput interface {
	pulumi.Input

	ToContentKeyPolicyMapOutput() ContentKeyPolicyMapOutput
	ToContentKeyPolicyMapOutputWithContext(context.Context) ContentKeyPolicyMapOutput
}

type ContentKeyPolicyMap map[string]ContentKeyPolicyInput

func (ContentKeyPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*ContentKeyPolicy)(nil))
}

func (i ContentKeyPolicyMap) ToContentKeyPolicyMapOutput() ContentKeyPolicyMapOutput {
	return i.ToContentKeyPolicyMapOutputWithContext(context.Background())
}

func (i ContentKeyPolicyMap) ToContentKeyPolicyMapOutputWithContext(ctx context.Context) ContentKeyPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyMapOutput)
}

type ContentKeyPolicyOutput struct {
	*pulumi.OutputState
}

func (ContentKeyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicy)(nil))
}

func (o ContentKeyPolicyOutput) ToContentKeyPolicyOutput() ContentKeyPolicyOutput {
	return o
}

func (o ContentKeyPolicyOutput) ToContentKeyPolicyOutputWithContext(ctx context.Context) ContentKeyPolicyOutput {
	return o
}

func (o ContentKeyPolicyOutput) ToContentKeyPolicyPtrOutput() ContentKeyPolicyPtrOutput {
	return o.ToContentKeyPolicyPtrOutputWithContext(context.Background())
}

func (o ContentKeyPolicyOutput) ToContentKeyPolicyPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicy) *ContentKeyPolicy {
		return &v
	}).(ContentKeyPolicyPtrOutput)
}

type ContentKeyPolicyPtrOutput struct {
	*pulumi.OutputState
}

func (ContentKeyPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentKeyPolicy)(nil))
}

func (o ContentKeyPolicyPtrOutput) ToContentKeyPolicyPtrOutput() ContentKeyPolicyPtrOutput {
	return o
}

func (o ContentKeyPolicyPtrOutput) ToContentKeyPolicyPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPtrOutput {
	return o
}

type ContentKeyPolicyArrayOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentKeyPolicy)(nil))
}

func (o ContentKeyPolicyArrayOutput) ToContentKeyPolicyArrayOutput() ContentKeyPolicyArrayOutput {
	return o
}

func (o ContentKeyPolicyArrayOutput) ToContentKeyPolicyArrayOutputWithContext(ctx context.Context) ContentKeyPolicyArrayOutput {
	return o
}

func (o ContentKeyPolicyArrayOutput) Index(i pulumi.IntInput) ContentKeyPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContentKeyPolicy {
		return vs[0].([]ContentKeyPolicy)[vs[1].(int)]
	}).(ContentKeyPolicyOutput)
}

type ContentKeyPolicyMapOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ContentKeyPolicy)(nil))
}

func (o ContentKeyPolicyMapOutput) ToContentKeyPolicyMapOutput() ContentKeyPolicyMapOutput {
	return o
}

func (o ContentKeyPolicyMapOutput) ToContentKeyPolicyMapOutputWithContext(ctx context.Context) ContentKeyPolicyMapOutput {
	return o
}

func (o ContentKeyPolicyMapOutput) MapIndex(k pulumi.StringInput) ContentKeyPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ContentKeyPolicy {
		return vs[0].(map[string]ContentKeyPolicy)[vs[1].(string)]
	}).(ContentKeyPolicyOutput)
}

func init() {
	pulumi.RegisterOutputType(ContentKeyPolicyOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPtrOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyArrayOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyMapOutput{})
}
