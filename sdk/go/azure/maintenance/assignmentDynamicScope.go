// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package maintenance

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Dynamic Maintenance Assignment.
//
// > **Note:** Only valid for `InGuestPatch` Maintenance Configuration Scopes.
//
// ## Import
//
// Dynamic Maintenance Assignments can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:maintenance/assignmentDynamicScope:AssignmentDynamicScope example /subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Maintenance/configurationAssignments/assignmentName
// ```
type AssignmentDynamicScope struct {
	pulumi.CustomResourceState

	// A `filter` block as defined below.
	Filter AssignmentDynamicScopeFilterOutput `pulumi:"filter"`
	// The ID of the Maintenance Configuration Resource. Changing this forces a new Dynamic Maintenance Assignment to be created.
	MaintenanceConfigurationId pulumi.StringOutput `pulumi:"maintenanceConfigurationId"`
	// The name which should be used for this Dynamic Maintenance Assignment. Changing this forces a new Dynamic Maintenance Assignment to be created.
	//
	// > **Note:** The `name` must be unique per subscription.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewAssignmentDynamicScope registers a new resource with the given unique name, arguments, and options.
func NewAssignmentDynamicScope(ctx *pulumi.Context,
	name string, args *AssignmentDynamicScopeArgs, opts ...pulumi.ResourceOption) (*AssignmentDynamicScope, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Filter == nil {
		return nil, errors.New("invalid value for required argument 'Filter'")
	}
	if args.MaintenanceConfigurationId == nil {
		return nil, errors.New("invalid value for required argument 'MaintenanceConfigurationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AssignmentDynamicScope
	err := ctx.RegisterResource("azure:maintenance/assignmentDynamicScope:AssignmentDynamicScope", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssignmentDynamicScope gets an existing AssignmentDynamicScope resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssignmentDynamicScope(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssignmentDynamicScopeState, opts ...pulumi.ResourceOption) (*AssignmentDynamicScope, error) {
	var resource AssignmentDynamicScope
	err := ctx.ReadResource("azure:maintenance/assignmentDynamicScope:AssignmentDynamicScope", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AssignmentDynamicScope resources.
type assignmentDynamicScopeState struct {
	// A `filter` block as defined below.
	Filter *AssignmentDynamicScopeFilter `pulumi:"filter"`
	// The ID of the Maintenance Configuration Resource. Changing this forces a new Dynamic Maintenance Assignment to be created.
	MaintenanceConfigurationId *string `pulumi:"maintenanceConfigurationId"`
	// The name which should be used for this Dynamic Maintenance Assignment. Changing this forces a new Dynamic Maintenance Assignment to be created.
	//
	// > **Note:** The `name` must be unique per subscription.
	Name *string `pulumi:"name"`
}

type AssignmentDynamicScopeState struct {
	// A `filter` block as defined below.
	Filter AssignmentDynamicScopeFilterPtrInput
	// The ID of the Maintenance Configuration Resource. Changing this forces a new Dynamic Maintenance Assignment to be created.
	MaintenanceConfigurationId pulumi.StringPtrInput
	// The name which should be used for this Dynamic Maintenance Assignment. Changing this forces a new Dynamic Maintenance Assignment to be created.
	//
	// > **Note:** The `name` must be unique per subscription.
	Name pulumi.StringPtrInput
}

func (AssignmentDynamicScopeState) ElementType() reflect.Type {
	return reflect.TypeOf((*assignmentDynamicScopeState)(nil)).Elem()
}

type assignmentDynamicScopeArgs struct {
	// A `filter` block as defined below.
	Filter AssignmentDynamicScopeFilter `pulumi:"filter"`
	// The ID of the Maintenance Configuration Resource. Changing this forces a new Dynamic Maintenance Assignment to be created.
	MaintenanceConfigurationId string `pulumi:"maintenanceConfigurationId"`
	// The name which should be used for this Dynamic Maintenance Assignment. Changing this forces a new Dynamic Maintenance Assignment to be created.
	//
	// > **Note:** The `name` must be unique per subscription.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a AssignmentDynamicScope resource.
type AssignmentDynamicScopeArgs struct {
	// A `filter` block as defined below.
	Filter AssignmentDynamicScopeFilterInput
	// The ID of the Maintenance Configuration Resource. Changing this forces a new Dynamic Maintenance Assignment to be created.
	MaintenanceConfigurationId pulumi.StringInput
	// The name which should be used for this Dynamic Maintenance Assignment. Changing this forces a new Dynamic Maintenance Assignment to be created.
	//
	// > **Note:** The `name` must be unique per subscription.
	Name pulumi.StringPtrInput
}

func (AssignmentDynamicScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assignmentDynamicScopeArgs)(nil)).Elem()
}

type AssignmentDynamicScopeInput interface {
	pulumi.Input

	ToAssignmentDynamicScopeOutput() AssignmentDynamicScopeOutput
	ToAssignmentDynamicScopeOutputWithContext(ctx context.Context) AssignmentDynamicScopeOutput
}

func (*AssignmentDynamicScope) ElementType() reflect.Type {
	return reflect.TypeOf((**AssignmentDynamicScope)(nil)).Elem()
}

func (i *AssignmentDynamicScope) ToAssignmentDynamicScopeOutput() AssignmentDynamicScopeOutput {
	return i.ToAssignmentDynamicScopeOutputWithContext(context.Background())
}

func (i *AssignmentDynamicScope) ToAssignmentDynamicScopeOutputWithContext(ctx context.Context) AssignmentDynamicScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignmentDynamicScopeOutput)
}

// AssignmentDynamicScopeArrayInput is an input type that accepts AssignmentDynamicScopeArray and AssignmentDynamicScopeArrayOutput values.
// You can construct a concrete instance of `AssignmentDynamicScopeArrayInput` via:
//
//	AssignmentDynamicScopeArray{ AssignmentDynamicScopeArgs{...} }
type AssignmentDynamicScopeArrayInput interface {
	pulumi.Input

	ToAssignmentDynamicScopeArrayOutput() AssignmentDynamicScopeArrayOutput
	ToAssignmentDynamicScopeArrayOutputWithContext(context.Context) AssignmentDynamicScopeArrayOutput
}

type AssignmentDynamicScopeArray []AssignmentDynamicScopeInput

func (AssignmentDynamicScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AssignmentDynamicScope)(nil)).Elem()
}

func (i AssignmentDynamicScopeArray) ToAssignmentDynamicScopeArrayOutput() AssignmentDynamicScopeArrayOutput {
	return i.ToAssignmentDynamicScopeArrayOutputWithContext(context.Background())
}

func (i AssignmentDynamicScopeArray) ToAssignmentDynamicScopeArrayOutputWithContext(ctx context.Context) AssignmentDynamicScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignmentDynamicScopeArrayOutput)
}

// AssignmentDynamicScopeMapInput is an input type that accepts AssignmentDynamicScopeMap and AssignmentDynamicScopeMapOutput values.
// You can construct a concrete instance of `AssignmentDynamicScopeMapInput` via:
//
//	AssignmentDynamicScopeMap{ "key": AssignmentDynamicScopeArgs{...} }
type AssignmentDynamicScopeMapInput interface {
	pulumi.Input

	ToAssignmentDynamicScopeMapOutput() AssignmentDynamicScopeMapOutput
	ToAssignmentDynamicScopeMapOutputWithContext(context.Context) AssignmentDynamicScopeMapOutput
}

type AssignmentDynamicScopeMap map[string]AssignmentDynamicScopeInput

func (AssignmentDynamicScopeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AssignmentDynamicScope)(nil)).Elem()
}

func (i AssignmentDynamicScopeMap) ToAssignmentDynamicScopeMapOutput() AssignmentDynamicScopeMapOutput {
	return i.ToAssignmentDynamicScopeMapOutputWithContext(context.Background())
}

func (i AssignmentDynamicScopeMap) ToAssignmentDynamicScopeMapOutputWithContext(ctx context.Context) AssignmentDynamicScopeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignmentDynamicScopeMapOutput)
}

type AssignmentDynamicScopeOutput struct{ *pulumi.OutputState }

func (AssignmentDynamicScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssignmentDynamicScope)(nil)).Elem()
}

func (o AssignmentDynamicScopeOutput) ToAssignmentDynamicScopeOutput() AssignmentDynamicScopeOutput {
	return o
}

func (o AssignmentDynamicScopeOutput) ToAssignmentDynamicScopeOutputWithContext(ctx context.Context) AssignmentDynamicScopeOutput {
	return o
}

// A `filter` block as defined below.
func (o AssignmentDynamicScopeOutput) Filter() AssignmentDynamicScopeFilterOutput {
	return o.ApplyT(func(v *AssignmentDynamicScope) AssignmentDynamicScopeFilterOutput { return v.Filter }).(AssignmentDynamicScopeFilterOutput)
}

// The ID of the Maintenance Configuration Resource. Changing this forces a new Dynamic Maintenance Assignment to be created.
func (o AssignmentDynamicScopeOutput) MaintenanceConfigurationId() pulumi.StringOutput {
	return o.ApplyT(func(v *AssignmentDynamicScope) pulumi.StringOutput { return v.MaintenanceConfigurationId }).(pulumi.StringOutput)
}

// The name which should be used for this Dynamic Maintenance Assignment. Changing this forces a new Dynamic Maintenance Assignment to be created.
//
// > **Note:** The `name` must be unique per subscription.
func (o AssignmentDynamicScopeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AssignmentDynamicScope) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type AssignmentDynamicScopeArrayOutput struct{ *pulumi.OutputState }

func (AssignmentDynamicScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AssignmentDynamicScope)(nil)).Elem()
}

func (o AssignmentDynamicScopeArrayOutput) ToAssignmentDynamicScopeArrayOutput() AssignmentDynamicScopeArrayOutput {
	return o
}

func (o AssignmentDynamicScopeArrayOutput) ToAssignmentDynamicScopeArrayOutputWithContext(ctx context.Context) AssignmentDynamicScopeArrayOutput {
	return o
}

func (o AssignmentDynamicScopeArrayOutput) Index(i pulumi.IntInput) AssignmentDynamicScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AssignmentDynamicScope {
		return vs[0].([]*AssignmentDynamicScope)[vs[1].(int)]
	}).(AssignmentDynamicScopeOutput)
}

type AssignmentDynamicScopeMapOutput struct{ *pulumi.OutputState }

func (AssignmentDynamicScopeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AssignmentDynamicScope)(nil)).Elem()
}

func (o AssignmentDynamicScopeMapOutput) ToAssignmentDynamicScopeMapOutput() AssignmentDynamicScopeMapOutput {
	return o
}

func (o AssignmentDynamicScopeMapOutput) ToAssignmentDynamicScopeMapOutputWithContext(ctx context.Context) AssignmentDynamicScopeMapOutput {
	return o
}

func (o AssignmentDynamicScopeMapOutput) MapIndex(k pulumi.StringInput) AssignmentDynamicScopeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AssignmentDynamicScope {
		return vs[0].(map[string]*AssignmentDynamicScope)[vs[1].(string)]
	}).(AssignmentDynamicScopeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AssignmentDynamicScopeInput)(nil)).Elem(), &AssignmentDynamicScope{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssignmentDynamicScopeArrayInput)(nil)).Elem(), AssignmentDynamicScopeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssignmentDynamicScopeMapInput)(nil)).Elem(), AssignmentDynamicScopeMap{})
	pulumi.RegisterOutputType(AssignmentDynamicScopeOutput{})
	pulumi.RegisterOutputType(AssignmentDynamicScopeArrayOutput{})
	pulumi.RegisterOutputType(AssignmentDynamicScopeMapOutput{})
}
