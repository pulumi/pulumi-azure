// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package maintenance

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a maintenance assignment to Dedicated Host.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/compute"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/maintenance"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West Europe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleDedicatedHostGroup, err := compute.NewDedicatedHostGroup(ctx, "exampleDedicatedHostGroup", &compute.DedicatedHostGroupArgs{
// 			ResourceGroupName:        exampleResourceGroup.Name,
// 			Location:                 exampleResourceGroup.Location,
// 			PlatformFaultDomainCount: pulumi.Int(2),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleDedicatedHost, err := compute.NewDedicatedHost(ctx, "exampleDedicatedHost", &compute.DedicatedHostArgs{
// 			Location:             exampleResourceGroup.Location,
// 			DedicatedHostGroupId: exampleDedicatedHostGroup.ID(),
// 			SkuName:              pulumi.String("DSv3-Type1"),
// 			PlatformFaultDomain:  pulumi.Int(1),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleConfiguration, err := maintenance.NewConfiguration(ctx, "exampleConfiguration", &maintenance.ConfigurationArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			Location:          exampleResourceGroup.Location,
// 			Scope:             pulumi.String("All"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = maintenance.NewAssignmentDedicatedHost(ctx, "exampleAssignmentDedicatedHost", &maintenance.AssignmentDedicatedHostArgs{
// 			Location:                   exampleResourceGroup.Location,
// 			MaintenanceConfigurationId: exampleConfiguration.ID(),
// 			DedicatedHostId:            exampleDedicatedHost.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Maintenance Assignment can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:maintenance/assignmentDedicatedHost:AssignmentDedicatedHost example /subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resGroup1/providers/microsoft.compute/hostGroups/group1/hosts/host1/providers/Microsoft.Maintenance/configurationAssignments/assign1
// ```
type AssignmentDedicatedHost struct {
	pulumi.CustomResourceState

	// Specifies the Dedicated Host ID to which the Maintenance Configuration will be assigned. Changing this forces a new resource to be created.
	DedicatedHostId pulumi.StringOutput `pulumi:"dedicatedHostId"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the ID of the Maintenance Configuration Resource. Changing this forces a new resource to be created.
	MaintenanceConfigurationId pulumi.StringOutput `pulumi:"maintenanceConfigurationId"`
}

// NewAssignmentDedicatedHost registers a new resource with the given unique name, arguments, and options.
func NewAssignmentDedicatedHost(ctx *pulumi.Context,
	name string, args *AssignmentDedicatedHostArgs, opts ...pulumi.ResourceOption) (*AssignmentDedicatedHost, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DedicatedHostId == nil {
		return nil, errors.New("invalid value for required argument 'DedicatedHostId'")
	}
	if args.MaintenanceConfigurationId == nil {
		return nil, errors.New("invalid value for required argument 'MaintenanceConfigurationId'")
	}
	var resource AssignmentDedicatedHost
	err := ctx.RegisterResource("azure:maintenance/assignmentDedicatedHost:AssignmentDedicatedHost", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssignmentDedicatedHost gets an existing AssignmentDedicatedHost resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssignmentDedicatedHost(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssignmentDedicatedHostState, opts ...pulumi.ResourceOption) (*AssignmentDedicatedHost, error) {
	var resource AssignmentDedicatedHost
	err := ctx.ReadResource("azure:maintenance/assignmentDedicatedHost:AssignmentDedicatedHost", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AssignmentDedicatedHost resources.
type assignmentDedicatedHostState struct {
	// Specifies the Dedicated Host ID to which the Maintenance Configuration will be assigned. Changing this forces a new resource to be created.
	DedicatedHostId *string `pulumi:"dedicatedHostId"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the ID of the Maintenance Configuration Resource. Changing this forces a new resource to be created.
	MaintenanceConfigurationId *string `pulumi:"maintenanceConfigurationId"`
}

type AssignmentDedicatedHostState struct {
	// Specifies the Dedicated Host ID to which the Maintenance Configuration will be assigned. Changing this forces a new resource to be created.
	DedicatedHostId pulumi.StringPtrInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the ID of the Maintenance Configuration Resource. Changing this forces a new resource to be created.
	MaintenanceConfigurationId pulumi.StringPtrInput
}

func (AssignmentDedicatedHostState) ElementType() reflect.Type {
	return reflect.TypeOf((*assignmentDedicatedHostState)(nil)).Elem()
}

type assignmentDedicatedHostArgs struct {
	// Specifies the Dedicated Host ID to which the Maintenance Configuration will be assigned. Changing this forces a new resource to be created.
	DedicatedHostId string `pulumi:"dedicatedHostId"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the ID of the Maintenance Configuration Resource. Changing this forces a new resource to be created.
	MaintenanceConfigurationId string `pulumi:"maintenanceConfigurationId"`
}

// The set of arguments for constructing a AssignmentDedicatedHost resource.
type AssignmentDedicatedHostArgs struct {
	// Specifies the Dedicated Host ID to which the Maintenance Configuration will be assigned. Changing this forces a new resource to be created.
	DedicatedHostId pulumi.StringInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the ID of the Maintenance Configuration Resource. Changing this forces a new resource to be created.
	MaintenanceConfigurationId pulumi.StringInput
}

func (AssignmentDedicatedHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assignmentDedicatedHostArgs)(nil)).Elem()
}

type AssignmentDedicatedHostInput interface {
	pulumi.Input

	ToAssignmentDedicatedHostOutput() AssignmentDedicatedHostOutput
	ToAssignmentDedicatedHostOutputWithContext(ctx context.Context) AssignmentDedicatedHostOutput
}

func (*AssignmentDedicatedHost) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignmentDedicatedHost)(nil))
}

func (i *AssignmentDedicatedHost) ToAssignmentDedicatedHostOutput() AssignmentDedicatedHostOutput {
	return i.ToAssignmentDedicatedHostOutputWithContext(context.Background())
}

func (i *AssignmentDedicatedHost) ToAssignmentDedicatedHostOutputWithContext(ctx context.Context) AssignmentDedicatedHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignmentDedicatedHostOutput)
}

func (i *AssignmentDedicatedHost) ToAssignmentDedicatedHostPtrOutput() AssignmentDedicatedHostPtrOutput {
	return i.ToAssignmentDedicatedHostPtrOutputWithContext(context.Background())
}

func (i *AssignmentDedicatedHost) ToAssignmentDedicatedHostPtrOutputWithContext(ctx context.Context) AssignmentDedicatedHostPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignmentDedicatedHostPtrOutput)
}

type AssignmentDedicatedHostPtrInput interface {
	pulumi.Input

	ToAssignmentDedicatedHostPtrOutput() AssignmentDedicatedHostPtrOutput
	ToAssignmentDedicatedHostPtrOutputWithContext(ctx context.Context) AssignmentDedicatedHostPtrOutput
}

type assignmentDedicatedHostPtrType AssignmentDedicatedHostArgs

func (*assignmentDedicatedHostPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AssignmentDedicatedHost)(nil))
}

func (i *assignmentDedicatedHostPtrType) ToAssignmentDedicatedHostPtrOutput() AssignmentDedicatedHostPtrOutput {
	return i.ToAssignmentDedicatedHostPtrOutputWithContext(context.Background())
}

func (i *assignmentDedicatedHostPtrType) ToAssignmentDedicatedHostPtrOutputWithContext(ctx context.Context) AssignmentDedicatedHostPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignmentDedicatedHostPtrOutput)
}

// AssignmentDedicatedHostArrayInput is an input type that accepts AssignmentDedicatedHostArray and AssignmentDedicatedHostArrayOutput values.
// You can construct a concrete instance of `AssignmentDedicatedHostArrayInput` via:
//
//          AssignmentDedicatedHostArray{ AssignmentDedicatedHostArgs{...} }
type AssignmentDedicatedHostArrayInput interface {
	pulumi.Input

	ToAssignmentDedicatedHostArrayOutput() AssignmentDedicatedHostArrayOutput
	ToAssignmentDedicatedHostArrayOutputWithContext(context.Context) AssignmentDedicatedHostArrayOutput
}

type AssignmentDedicatedHostArray []AssignmentDedicatedHostInput

func (AssignmentDedicatedHostArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*AssignmentDedicatedHost)(nil))
}

func (i AssignmentDedicatedHostArray) ToAssignmentDedicatedHostArrayOutput() AssignmentDedicatedHostArrayOutput {
	return i.ToAssignmentDedicatedHostArrayOutputWithContext(context.Background())
}

func (i AssignmentDedicatedHostArray) ToAssignmentDedicatedHostArrayOutputWithContext(ctx context.Context) AssignmentDedicatedHostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignmentDedicatedHostArrayOutput)
}

// AssignmentDedicatedHostMapInput is an input type that accepts AssignmentDedicatedHostMap and AssignmentDedicatedHostMapOutput values.
// You can construct a concrete instance of `AssignmentDedicatedHostMapInput` via:
//
//          AssignmentDedicatedHostMap{ "key": AssignmentDedicatedHostArgs{...} }
type AssignmentDedicatedHostMapInput interface {
	pulumi.Input

	ToAssignmentDedicatedHostMapOutput() AssignmentDedicatedHostMapOutput
	ToAssignmentDedicatedHostMapOutputWithContext(context.Context) AssignmentDedicatedHostMapOutput
}

type AssignmentDedicatedHostMap map[string]AssignmentDedicatedHostInput

func (AssignmentDedicatedHostMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*AssignmentDedicatedHost)(nil))
}

func (i AssignmentDedicatedHostMap) ToAssignmentDedicatedHostMapOutput() AssignmentDedicatedHostMapOutput {
	return i.ToAssignmentDedicatedHostMapOutputWithContext(context.Background())
}

func (i AssignmentDedicatedHostMap) ToAssignmentDedicatedHostMapOutputWithContext(ctx context.Context) AssignmentDedicatedHostMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignmentDedicatedHostMapOutput)
}

type AssignmentDedicatedHostOutput struct {
	*pulumi.OutputState
}

func (AssignmentDedicatedHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignmentDedicatedHost)(nil))
}

func (o AssignmentDedicatedHostOutput) ToAssignmentDedicatedHostOutput() AssignmentDedicatedHostOutput {
	return o
}

func (o AssignmentDedicatedHostOutput) ToAssignmentDedicatedHostOutputWithContext(ctx context.Context) AssignmentDedicatedHostOutput {
	return o
}

func (o AssignmentDedicatedHostOutput) ToAssignmentDedicatedHostPtrOutput() AssignmentDedicatedHostPtrOutput {
	return o.ToAssignmentDedicatedHostPtrOutputWithContext(context.Background())
}

func (o AssignmentDedicatedHostOutput) ToAssignmentDedicatedHostPtrOutputWithContext(ctx context.Context) AssignmentDedicatedHostPtrOutput {
	return o.ApplyT(func(v AssignmentDedicatedHost) *AssignmentDedicatedHost {
		return &v
	}).(AssignmentDedicatedHostPtrOutput)
}

type AssignmentDedicatedHostPtrOutput struct {
	*pulumi.OutputState
}

func (AssignmentDedicatedHostPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssignmentDedicatedHost)(nil))
}

func (o AssignmentDedicatedHostPtrOutput) ToAssignmentDedicatedHostPtrOutput() AssignmentDedicatedHostPtrOutput {
	return o
}

func (o AssignmentDedicatedHostPtrOutput) ToAssignmentDedicatedHostPtrOutputWithContext(ctx context.Context) AssignmentDedicatedHostPtrOutput {
	return o
}

type AssignmentDedicatedHostArrayOutput struct{ *pulumi.OutputState }

func (AssignmentDedicatedHostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssignmentDedicatedHost)(nil))
}

func (o AssignmentDedicatedHostArrayOutput) ToAssignmentDedicatedHostArrayOutput() AssignmentDedicatedHostArrayOutput {
	return o
}

func (o AssignmentDedicatedHostArrayOutput) ToAssignmentDedicatedHostArrayOutputWithContext(ctx context.Context) AssignmentDedicatedHostArrayOutput {
	return o
}

func (o AssignmentDedicatedHostArrayOutput) Index(i pulumi.IntInput) AssignmentDedicatedHostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssignmentDedicatedHost {
		return vs[0].([]AssignmentDedicatedHost)[vs[1].(int)]
	}).(AssignmentDedicatedHostOutput)
}

type AssignmentDedicatedHostMapOutput struct{ *pulumi.OutputState }

func (AssignmentDedicatedHostMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AssignmentDedicatedHost)(nil))
}

func (o AssignmentDedicatedHostMapOutput) ToAssignmentDedicatedHostMapOutput() AssignmentDedicatedHostMapOutput {
	return o
}

func (o AssignmentDedicatedHostMapOutput) ToAssignmentDedicatedHostMapOutputWithContext(ctx context.Context) AssignmentDedicatedHostMapOutput {
	return o
}

func (o AssignmentDedicatedHostMapOutput) MapIndex(k pulumi.StringInput) AssignmentDedicatedHostOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AssignmentDedicatedHost {
		return vs[0].(map[string]AssignmentDedicatedHost)[vs[1].(string)]
	}).(AssignmentDedicatedHostOutput)
}

func init() {
	pulumi.RegisterOutputType(AssignmentDedicatedHostOutput{})
	pulumi.RegisterOutputType(AssignmentDedicatedHostPtrOutput{})
	pulumi.RegisterOutputType(AssignmentDedicatedHostArrayOutput{})
	pulumi.RegisterOutputType(AssignmentDedicatedHostMapOutput{})
}
