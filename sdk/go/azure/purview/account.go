// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package purview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Purview Account.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/purview"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West Europe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = purview.NewAccount(ctx, "exampleAccount", &purview.AccountArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			Location:          exampleResourceGroup.Location,
// 			SkuName:           pulumi.String("Standard_4"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Purview Accounts can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:purview/account:Account example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Purview/accounts/account1
// ```
type Account struct {
	pulumi.CustomResourceState

	// Atlas Kafka endpoint primary connection string.
	AtlasKafkaEndpointPrimaryConnectionString pulumi.StringOutput `pulumi:"atlasKafkaEndpointPrimaryConnectionString"`
	// Atlas Kafka endpoint secondary connection string.
	AtlasKafkaEndpointSecondaryConnectionString pulumi.StringOutput `pulumi:"atlasKafkaEndpointSecondaryConnectionString"`
	// Catalog endpoint.
	CatalogEndpoint pulumi.StringOutput `pulumi:"catalogEndpoint"`
	// Guardian endpoint.
	GuardianEndpoint pulumi.StringOutput `pulumi:"guardianEndpoint"`
	// A `identity` block as defined below.
	Identities AccountIdentityArrayOutput `pulumi:"identities"`
	// The Azure Region where the Purview Account should exist. Changing this forces a new Purview Account to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name which should be used for this Purview Account. Changing this forces a new Purview Account to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Should the Purview Account be visible to the public network? Defaults to `true`.
	PublicNetworkEnabled pulumi.BoolPtrOutput `pulumi:"publicNetworkEnabled"`
	// The name of the Resource Group where the Purview Account should exist. Changing this forces a new Purview Account to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Scan endpoint.
	ScanEndpoint pulumi.StringOutput `pulumi:"scanEndpoint"`
	// The SKU's capacity for platform size and catalog capabilities. Accepted values are `Standard_4` and `Standard_16`.
	SkuName pulumi.StringOutput `pulumi:"skuName"`
	// A mapping of tags which should be assigned to the Purview Account.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewAccount registers a new resource with the given unique name, arguments, and options.
func NewAccount(ctx *pulumi.Context,
	name string, args *AccountArgs, opts ...pulumi.ResourceOption) (*Account, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SkuName == nil {
		return nil, errors.New("invalid value for required argument 'SkuName'")
	}
	var resource Account
	err := ctx.RegisterResource("azure:purview/account:Account", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccount gets an existing Account resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountState, opts ...pulumi.ResourceOption) (*Account, error) {
	var resource Account
	err := ctx.ReadResource("azure:purview/account:Account", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Account resources.
type accountState struct {
	// Atlas Kafka endpoint primary connection string.
	AtlasKafkaEndpointPrimaryConnectionString *string `pulumi:"atlasKafkaEndpointPrimaryConnectionString"`
	// Atlas Kafka endpoint secondary connection string.
	AtlasKafkaEndpointSecondaryConnectionString *string `pulumi:"atlasKafkaEndpointSecondaryConnectionString"`
	// Catalog endpoint.
	CatalogEndpoint *string `pulumi:"catalogEndpoint"`
	// Guardian endpoint.
	GuardianEndpoint *string `pulumi:"guardianEndpoint"`
	// A `identity` block as defined below.
	Identities []AccountIdentity `pulumi:"identities"`
	// The Azure Region where the Purview Account should exist. Changing this forces a new Purview Account to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Purview Account. Changing this forces a new Purview Account to be created.
	Name *string `pulumi:"name"`
	// Should the Purview Account be visible to the public network? Defaults to `true`.
	PublicNetworkEnabled *bool `pulumi:"publicNetworkEnabled"`
	// The name of the Resource Group where the Purview Account should exist. Changing this forces a new Purview Account to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Scan endpoint.
	ScanEndpoint *string `pulumi:"scanEndpoint"`
	// The SKU's capacity for platform size and catalog capabilities. Accepted values are `Standard_4` and `Standard_16`.
	SkuName *string `pulumi:"skuName"`
	// A mapping of tags which should be assigned to the Purview Account.
	Tags map[string]string `pulumi:"tags"`
}

type AccountState struct {
	// Atlas Kafka endpoint primary connection string.
	AtlasKafkaEndpointPrimaryConnectionString pulumi.StringPtrInput
	// Atlas Kafka endpoint secondary connection string.
	AtlasKafkaEndpointSecondaryConnectionString pulumi.StringPtrInput
	// Catalog endpoint.
	CatalogEndpoint pulumi.StringPtrInput
	// Guardian endpoint.
	GuardianEndpoint pulumi.StringPtrInput
	// A `identity` block as defined below.
	Identities AccountIdentityArrayInput
	// The Azure Region where the Purview Account should exist. Changing this forces a new Purview Account to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Purview Account. Changing this forces a new Purview Account to be created.
	Name pulumi.StringPtrInput
	// Should the Purview Account be visible to the public network? Defaults to `true`.
	PublicNetworkEnabled pulumi.BoolPtrInput
	// The name of the Resource Group where the Purview Account should exist. Changing this forces a new Purview Account to be created.
	ResourceGroupName pulumi.StringPtrInput
	// Scan endpoint.
	ScanEndpoint pulumi.StringPtrInput
	// The SKU's capacity for platform size and catalog capabilities. Accepted values are `Standard_4` and `Standard_16`.
	SkuName pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Purview Account.
	Tags pulumi.StringMapInput
}

func (AccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountState)(nil)).Elem()
}

type accountArgs struct {
	// The Azure Region where the Purview Account should exist. Changing this forces a new Purview Account to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Purview Account. Changing this forces a new Purview Account to be created.
	Name *string `pulumi:"name"`
	// Should the Purview Account be visible to the public network? Defaults to `true`.
	PublicNetworkEnabled *bool `pulumi:"publicNetworkEnabled"`
	// The name of the Resource Group where the Purview Account should exist. Changing this forces a new Purview Account to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The SKU's capacity for platform size and catalog capabilities. Accepted values are `Standard_4` and `Standard_16`.
	SkuName string `pulumi:"skuName"`
	// A mapping of tags which should be assigned to the Purview Account.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Account resource.
type AccountArgs struct {
	// The Azure Region where the Purview Account should exist. Changing this forces a new Purview Account to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Purview Account. Changing this forces a new Purview Account to be created.
	Name pulumi.StringPtrInput
	// Should the Purview Account be visible to the public network? Defaults to `true`.
	PublicNetworkEnabled pulumi.BoolPtrInput
	// The name of the Resource Group where the Purview Account should exist. Changing this forces a new Purview Account to be created.
	ResourceGroupName pulumi.StringInput
	// The SKU's capacity for platform size and catalog capabilities. Accepted values are `Standard_4` and `Standard_16`.
	SkuName pulumi.StringInput
	// A mapping of tags which should be assigned to the Purview Account.
	Tags pulumi.StringMapInput
}

func (AccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountArgs)(nil)).Elem()
}

type AccountInput interface {
	pulumi.Input

	ToAccountOutput() AccountOutput
	ToAccountOutputWithContext(ctx context.Context) AccountOutput
}

func (*Account) ElementType() reflect.Type {
	return reflect.TypeOf((*Account)(nil))
}

func (i *Account) ToAccountOutput() AccountOutput {
	return i.ToAccountOutputWithContext(context.Background())
}

func (i *Account) ToAccountOutputWithContext(ctx context.Context) AccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountOutput)
}

func (i *Account) ToAccountPtrOutput() AccountPtrOutput {
	return i.ToAccountPtrOutputWithContext(context.Background())
}

func (i *Account) ToAccountPtrOutputWithContext(ctx context.Context) AccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountPtrOutput)
}

type AccountPtrInput interface {
	pulumi.Input

	ToAccountPtrOutput() AccountPtrOutput
	ToAccountPtrOutputWithContext(ctx context.Context) AccountPtrOutput
}

type accountPtrType AccountArgs

func (*accountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Account)(nil))
}

func (i *accountPtrType) ToAccountPtrOutput() AccountPtrOutput {
	return i.ToAccountPtrOutputWithContext(context.Background())
}

func (i *accountPtrType) ToAccountPtrOutputWithContext(ctx context.Context) AccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountPtrOutput)
}

// AccountArrayInput is an input type that accepts AccountArray and AccountArrayOutput values.
// You can construct a concrete instance of `AccountArrayInput` via:
//
//          AccountArray{ AccountArgs{...} }
type AccountArrayInput interface {
	pulumi.Input

	ToAccountArrayOutput() AccountArrayOutput
	ToAccountArrayOutputWithContext(context.Context) AccountArrayOutput
}

type AccountArray []AccountInput

func (AccountArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Account)(nil))
}

func (i AccountArray) ToAccountArrayOutput() AccountArrayOutput {
	return i.ToAccountArrayOutputWithContext(context.Background())
}

func (i AccountArray) ToAccountArrayOutputWithContext(ctx context.Context) AccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountArrayOutput)
}

// AccountMapInput is an input type that accepts AccountMap and AccountMapOutput values.
// You can construct a concrete instance of `AccountMapInput` via:
//
//          AccountMap{ "key": AccountArgs{...} }
type AccountMapInput interface {
	pulumi.Input

	ToAccountMapOutput() AccountMapOutput
	ToAccountMapOutputWithContext(context.Context) AccountMapOutput
}

type AccountMap map[string]AccountInput

func (AccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Account)(nil))
}

func (i AccountMap) ToAccountMapOutput() AccountMapOutput {
	return i.ToAccountMapOutputWithContext(context.Background())
}

func (i AccountMap) ToAccountMapOutputWithContext(ctx context.Context) AccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountMapOutput)
}

type AccountOutput struct {
	*pulumi.OutputState
}

func (AccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Account)(nil))
}

func (o AccountOutput) ToAccountOutput() AccountOutput {
	return o
}

func (o AccountOutput) ToAccountOutputWithContext(ctx context.Context) AccountOutput {
	return o
}

func (o AccountOutput) ToAccountPtrOutput() AccountPtrOutput {
	return o.ToAccountPtrOutputWithContext(context.Background())
}

func (o AccountOutput) ToAccountPtrOutputWithContext(ctx context.Context) AccountPtrOutput {
	return o.ApplyT(func(v Account) *Account {
		return &v
	}).(AccountPtrOutput)
}

type AccountPtrOutput struct {
	*pulumi.OutputState
}

func (AccountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Account)(nil))
}

func (o AccountPtrOutput) ToAccountPtrOutput() AccountPtrOutput {
	return o
}

func (o AccountPtrOutput) ToAccountPtrOutputWithContext(ctx context.Context) AccountPtrOutput {
	return o
}

type AccountArrayOutput struct{ *pulumi.OutputState }

func (AccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Account)(nil))
}

func (o AccountArrayOutput) ToAccountArrayOutput() AccountArrayOutput {
	return o
}

func (o AccountArrayOutput) ToAccountArrayOutputWithContext(ctx context.Context) AccountArrayOutput {
	return o
}

func (o AccountArrayOutput) Index(i pulumi.IntInput) AccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Account {
		return vs[0].([]Account)[vs[1].(int)]
	}).(AccountOutput)
}

type AccountMapOutput struct{ *pulumi.OutputState }

func (AccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Account)(nil))
}

func (o AccountMapOutput) ToAccountMapOutput() AccountMapOutput {
	return o
}

func (o AccountMapOutput) ToAccountMapOutputWithContext(ctx context.Context) AccountMapOutput {
	return o
}

func (o AccountMapOutput) MapIndex(k pulumi.StringInput) AccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Account {
		return vs[0].(map[string]Account)[vs[1].(string)]
	}).(AccountOutput)
}

func init() {
	pulumi.RegisterOutputType(AccountOutput{})
	pulumi.RegisterOutputType(AccountPtrOutput{})
	pulumi.RegisterOutputType(AccountArrayOutput{})
	pulumi.RegisterOutputType(AccountMapOutput{})
}
