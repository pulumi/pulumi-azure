// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package trafficmanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Traffic Manager Profile to which multiple endpoints can be attached.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			server, err := random.NewRandomId(ctx, "server", &random.RandomIdArgs{
//				Keepers: pulumi.Map{
//					"azi_id": pulumi.Any(1),
//				},
//				ByteLength: pulumi.Int(8),
//			})
//			if err != nil {
//				return err
//			}
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = network.NewTrafficManagerProfile(ctx, "exampleTrafficManagerProfile", &network.TrafficManagerProfileArgs{
//				ResourceGroupName:    exampleResourceGroup.Name,
//				TrafficRoutingMethod: pulumi.String("Weighted"),
//				DnsConfig: &network.TrafficManagerProfileDnsConfigArgs{
//					RelativeName: server.Hex,
//					Ttl:          pulumi.Int(100),
//				},
//				MonitorConfig: &network.TrafficManagerProfileMonitorConfigArgs{
//					Protocol:                  pulumi.String("HTTP"),
//					Port:                      pulumi.Int(80),
//					Path:                      pulumi.String("/"),
//					IntervalInSeconds:         pulumi.Int(30),
//					TimeoutInSeconds:          pulumi.Int(9),
//					ToleratedNumberOfFailures: pulumi.Int(3),
//				},
//				Tags: pulumi.StringMap{
//					"environment": pulumi.String("Production"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Traffic Manager Profiles can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:trafficmanager/profile:Profile exampleProfile /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/trafficManagerProfiles/mytrafficmanagerprofile1
//
// ```
//
// Deprecated: azure.trafficmanager.Profile has been deprecated in favor of azure.network.TrafficManagerProfile
type Profile struct {
	pulumi.CustomResourceState

	// This block specifies the DNS configuration of the Profile. One `dnsConfig` block as defined below.
	DnsConfig ProfileDnsConfigOutput `pulumi:"dnsConfig"`
	// The FQDN of the created Profile.
	Fqdn pulumi.StringOutput `pulumi:"fqdn"`
	// The amount of endpoints to return for DNS queries to this Profile. Possible values range from `1` to `8`.
	//
	// > **NOTE:** `maxReturn` must be set when the `trafficRoutingMethod` is `MultiValue`.
	MaxReturn pulumi.IntPtrOutput `pulumi:"maxReturn"`
	// This block specifies the Endpoint monitoring configuration for the Profile. One `monitorConfig` block as defined below.
	MonitorConfig ProfileMonitorConfigOutput `pulumi:"monitorConfig"`
	// The name of the Traffic Manager profile. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The status of the profile, can be set to either `Enabled` or `Disabled`. Defaults to `Enabled`.
	ProfileStatus pulumi.StringOutput `pulumi:"profileStatus"`
	// The name of the resource group in which to create the Traffic Manager profile. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies the algorithm used to route traffic. Possible values are `Geographic`, `Weighted`, `Performance`, `Priority`, `Subnet` and `MultiValue`.
	TrafficRoutingMethod pulumi.StringOutput `pulumi:"trafficRoutingMethod"`
	// Indicates whether Traffic View is enabled for the Traffic Manager profile.
	TrafficViewEnabled pulumi.BoolPtrOutput `pulumi:"trafficViewEnabled"`
}

// NewProfile registers a new resource with the given unique name, arguments, and options.
func NewProfile(ctx *pulumi.Context,
	name string, args *ProfileArgs, opts ...pulumi.ResourceOption) (*Profile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DnsConfig == nil {
		return nil, errors.New("invalid value for required argument 'DnsConfig'")
	}
	if args.MonitorConfig == nil {
		return nil, errors.New("invalid value for required argument 'MonitorConfig'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.TrafficRoutingMethod == nil {
		return nil, errors.New("invalid value for required argument 'TrafficRoutingMethod'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Profile
	err := ctx.RegisterResource("azure:trafficmanager/profile:Profile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProfile gets an existing Profile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProfileState, opts ...pulumi.ResourceOption) (*Profile, error) {
	var resource Profile
	err := ctx.ReadResource("azure:trafficmanager/profile:Profile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Profile resources.
type profileState struct {
	// This block specifies the DNS configuration of the Profile. One `dnsConfig` block as defined below.
	DnsConfig *ProfileDnsConfig `pulumi:"dnsConfig"`
	// The FQDN of the created Profile.
	Fqdn *string `pulumi:"fqdn"`
	// The amount of endpoints to return for DNS queries to this Profile. Possible values range from `1` to `8`.
	//
	// > **NOTE:** `maxReturn` must be set when the `trafficRoutingMethod` is `MultiValue`.
	MaxReturn *int `pulumi:"maxReturn"`
	// This block specifies the Endpoint monitoring configuration for the Profile. One `monitorConfig` block as defined below.
	MonitorConfig *ProfileMonitorConfig `pulumi:"monitorConfig"`
	// The name of the Traffic Manager profile. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The status of the profile, can be set to either `Enabled` or `Disabled`. Defaults to `Enabled`.
	ProfileStatus *string `pulumi:"profileStatus"`
	// The name of the resource group in which to create the Traffic Manager profile. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the algorithm used to route traffic. Possible values are `Geographic`, `Weighted`, `Performance`, `Priority`, `Subnet` and `MultiValue`.
	TrafficRoutingMethod *string `pulumi:"trafficRoutingMethod"`
	// Indicates whether Traffic View is enabled for the Traffic Manager profile.
	TrafficViewEnabled *bool `pulumi:"trafficViewEnabled"`
}

type ProfileState struct {
	// This block specifies the DNS configuration of the Profile. One `dnsConfig` block as defined below.
	DnsConfig ProfileDnsConfigPtrInput
	// The FQDN of the created Profile.
	Fqdn pulumi.StringPtrInput
	// The amount of endpoints to return for DNS queries to this Profile. Possible values range from `1` to `8`.
	//
	// > **NOTE:** `maxReturn` must be set when the `trafficRoutingMethod` is `MultiValue`.
	MaxReturn pulumi.IntPtrInput
	// This block specifies the Endpoint monitoring configuration for the Profile. One `monitorConfig` block as defined below.
	MonitorConfig ProfileMonitorConfigPtrInput
	// The name of the Traffic Manager profile. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The status of the profile, can be set to either `Enabled` or `Disabled`. Defaults to `Enabled`.
	ProfileStatus pulumi.StringPtrInput
	// The name of the resource group in which to create the Traffic Manager profile. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// Specifies the algorithm used to route traffic. Possible values are `Geographic`, `Weighted`, `Performance`, `Priority`, `Subnet` and `MultiValue`.
	TrafficRoutingMethod pulumi.StringPtrInput
	// Indicates whether Traffic View is enabled for the Traffic Manager profile.
	TrafficViewEnabled pulumi.BoolPtrInput
}

func (ProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*profileState)(nil)).Elem()
}

type profileArgs struct {
	// This block specifies the DNS configuration of the Profile. One `dnsConfig` block as defined below.
	DnsConfig ProfileDnsConfig `pulumi:"dnsConfig"`
	// The amount of endpoints to return for DNS queries to this Profile. Possible values range from `1` to `8`.
	//
	// > **NOTE:** `maxReturn` must be set when the `trafficRoutingMethod` is `MultiValue`.
	MaxReturn *int `pulumi:"maxReturn"`
	// This block specifies the Endpoint monitoring configuration for the Profile. One `monitorConfig` block as defined below.
	MonitorConfig ProfileMonitorConfig `pulumi:"monitorConfig"`
	// The name of the Traffic Manager profile. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The status of the profile, can be set to either `Enabled` or `Disabled`. Defaults to `Enabled`.
	ProfileStatus *string `pulumi:"profileStatus"`
	// The name of the resource group in which to create the Traffic Manager profile. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the algorithm used to route traffic. Possible values are `Geographic`, `Weighted`, `Performance`, `Priority`, `Subnet` and `MultiValue`.
	TrafficRoutingMethod string `pulumi:"trafficRoutingMethod"`
	// Indicates whether Traffic View is enabled for the Traffic Manager profile.
	TrafficViewEnabled *bool `pulumi:"trafficViewEnabled"`
}

// The set of arguments for constructing a Profile resource.
type ProfileArgs struct {
	// This block specifies the DNS configuration of the Profile. One `dnsConfig` block as defined below.
	DnsConfig ProfileDnsConfigInput
	// The amount of endpoints to return for DNS queries to this Profile. Possible values range from `1` to `8`.
	//
	// > **NOTE:** `maxReturn` must be set when the `trafficRoutingMethod` is `MultiValue`.
	MaxReturn pulumi.IntPtrInput
	// This block specifies the Endpoint monitoring configuration for the Profile. One `monitorConfig` block as defined below.
	MonitorConfig ProfileMonitorConfigInput
	// The name of the Traffic Manager profile. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The status of the profile, can be set to either `Enabled` or `Disabled`. Defaults to `Enabled`.
	ProfileStatus pulumi.StringPtrInput
	// The name of the resource group in which to create the Traffic Manager profile. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// Specifies the algorithm used to route traffic. Possible values are `Geographic`, `Weighted`, `Performance`, `Priority`, `Subnet` and `MultiValue`.
	TrafficRoutingMethod pulumi.StringInput
	// Indicates whether Traffic View is enabled for the Traffic Manager profile.
	TrafficViewEnabled pulumi.BoolPtrInput
}

func (ProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*profileArgs)(nil)).Elem()
}

type ProfileInput interface {
	pulumi.Input

	ToProfileOutput() ProfileOutput
	ToProfileOutputWithContext(ctx context.Context) ProfileOutput
}

func (*Profile) ElementType() reflect.Type {
	return reflect.TypeOf((**Profile)(nil)).Elem()
}

func (i *Profile) ToProfileOutput() ProfileOutput {
	return i.ToProfileOutputWithContext(context.Background())
}

func (i *Profile) ToProfileOutputWithContext(ctx context.Context) ProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileOutput)
}

// ProfileArrayInput is an input type that accepts ProfileArray and ProfileArrayOutput values.
// You can construct a concrete instance of `ProfileArrayInput` via:
//
//	ProfileArray{ ProfileArgs{...} }
type ProfileArrayInput interface {
	pulumi.Input

	ToProfileArrayOutput() ProfileArrayOutput
	ToProfileArrayOutputWithContext(context.Context) ProfileArrayOutput
}

type ProfileArray []ProfileInput

func (ProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Profile)(nil)).Elem()
}

func (i ProfileArray) ToProfileArrayOutput() ProfileArrayOutput {
	return i.ToProfileArrayOutputWithContext(context.Background())
}

func (i ProfileArray) ToProfileArrayOutputWithContext(ctx context.Context) ProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileArrayOutput)
}

// ProfileMapInput is an input type that accepts ProfileMap and ProfileMapOutput values.
// You can construct a concrete instance of `ProfileMapInput` via:
//
//	ProfileMap{ "key": ProfileArgs{...} }
type ProfileMapInput interface {
	pulumi.Input

	ToProfileMapOutput() ProfileMapOutput
	ToProfileMapOutputWithContext(context.Context) ProfileMapOutput
}

type ProfileMap map[string]ProfileInput

func (ProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Profile)(nil)).Elem()
}

func (i ProfileMap) ToProfileMapOutput() ProfileMapOutput {
	return i.ToProfileMapOutputWithContext(context.Background())
}

func (i ProfileMap) ToProfileMapOutputWithContext(ctx context.Context) ProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileMapOutput)
}

type ProfileOutput struct{ *pulumi.OutputState }

func (ProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Profile)(nil)).Elem()
}

func (o ProfileOutput) ToProfileOutput() ProfileOutput {
	return o
}

func (o ProfileOutput) ToProfileOutputWithContext(ctx context.Context) ProfileOutput {
	return o
}

// This block specifies the DNS configuration of the Profile. One `dnsConfig` block as defined below.
func (o ProfileOutput) DnsConfig() ProfileDnsConfigOutput {
	return o.ApplyT(func(v *Profile) ProfileDnsConfigOutput { return v.DnsConfig }).(ProfileDnsConfigOutput)
}

// The FQDN of the created Profile.
func (o ProfileOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.Fqdn }).(pulumi.StringOutput)
}

// The amount of endpoints to return for DNS queries to this Profile. Possible values range from `1` to `8`.
//
// > **NOTE:** `maxReturn` must be set when the `trafficRoutingMethod` is `MultiValue`.
func (o ProfileOutput) MaxReturn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.IntPtrOutput { return v.MaxReturn }).(pulumi.IntPtrOutput)
}

// This block specifies the Endpoint monitoring configuration for the Profile. One `monitorConfig` block as defined below.
func (o ProfileOutput) MonitorConfig() ProfileMonitorConfigOutput {
	return o.ApplyT(func(v *Profile) ProfileMonitorConfigOutput { return v.MonitorConfig }).(ProfileMonitorConfigOutput)
}

// The name of the Traffic Manager profile. Changing this forces a new resource to be created.
func (o ProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The status of the profile, can be set to either `Enabled` or `Disabled`. Defaults to `Enabled`.
func (o ProfileOutput) ProfileStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.ProfileStatus }).(pulumi.StringOutput)
}

// The name of the resource group in which to create the Traffic Manager profile. Changing this forces a new resource to be created.
func (o ProfileOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o ProfileOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the algorithm used to route traffic. Possible values are `Geographic`, `Weighted`, `Performance`, `Priority`, `Subnet` and `MultiValue`.
func (o ProfileOutput) TrafficRoutingMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.TrafficRoutingMethod }).(pulumi.StringOutput)
}

// Indicates whether Traffic View is enabled for the Traffic Manager profile.
func (o ProfileOutput) TrafficViewEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.BoolPtrOutput { return v.TrafficViewEnabled }).(pulumi.BoolPtrOutput)
}

type ProfileArrayOutput struct{ *pulumi.OutputState }

func (ProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Profile)(nil)).Elem()
}

func (o ProfileArrayOutput) ToProfileArrayOutput() ProfileArrayOutput {
	return o
}

func (o ProfileArrayOutput) ToProfileArrayOutputWithContext(ctx context.Context) ProfileArrayOutput {
	return o
}

func (o ProfileArrayOutput) Index(i pulumi.IntInput) ProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Profile {
		return vs[0].([]*Profile)[vs[1].(int)]
	}).(ProfileOutput)
}

type ProfileMapOutput struct{ *pulumi.OutputState }

func (ProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Profile)(nil)).Elem()
}

func (o ProfileMapOutput) ToProfileMapOutput() ProfileMapOutput {
	return o
}

func (o ProfileMapOutput) ToProfileMapOutputWithContext(ctx context.Context) ProfileMapOutput {
	return o
}

func (o ProfileMapOutput) MapIndex(k pulumi.StringInput) ProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Profile {
		return vs[0].(map[string]*Profile)[vs[1].(string)]
	}).(ProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileInput)(nil)).Elem(), &Profile{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileArrayInput)(nil)).Elem(), ProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileMapInput)(nil)).Elem(), ProfileMap{})
	pulumi.RegisterOutputType(ProfileOutput{})
	pulumi.RegisterOutputType(ProfileArrayOutput{})
	pulumi.RegisterOutputType(ProfileMapOutput{})
}
