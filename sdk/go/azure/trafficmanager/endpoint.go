// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package trafficmanager

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Traffic Manager Endpoint.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/traffic_manager_endpoint_legacy.html.markdown.
type Endpoint struct {
	s *pulumi.ResourceState
}

// NewEndpoint registers a new resource with the given unique name, arguments, and options.
func NewEndpoint(ctx *pulumi.Context,
	name string, args *EndpointArgs, opts ...pulumi.ResourceOpt) (*Endpoint, error) {
	if args == nil || args.ProfileName == nil {
		return nil, errors.New("missing required argument 'ProfileName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["customHeaders"] = nil
		inputs["endpointLocation"] = nil
		inputs["endpointStatus"] = nil
		inputs["geoMappings"] = nil
		inputs["minChildEndpoints"] = nil
		inputs["name"] = nil
		inputs["priority"] = nil
		inputs["profileName"] = nil
		inputs["resourceGroupName"] = nil
		inputs["subnets"] = nil
		inputs["target"] = nil
		inputs["targetResourceId"] = nil
		inputs["type"] = nil
		inputs["weight"] = nil
	} else {
		inputs["customHeaders"] = args.CustomHeaders
		inputs["endpointLocation"] = args.EndpointLocation
		inputs["endpointStatus"] = args.EndpointStatus
		inputs["geoMappings"] = args.GeoMappings
		inputs["minChildEndpoints"] = args.MinChildEndpoints
		inputs["name"] = args.Name
		inputs["priority"] = args.Priority
		inputs["profileName"] = args.ProfileName
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["subnets"] = args.Subnets
		inputs["target"] = args.Target
		inputs["targetResourceId"] = args.TargetResourceId
		inputs["type"] = args.Type
		inputs["weight"] = args.Weight
	}
	inputs["endpointMonitorStatus"] = nil
	s, err := ctx.RegisterResource("azure:trafficmanager/endpoint:Endpoint", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Endpoint{s: s}, nil
}

// GetEndpoint gets an existing Endpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEndpoint(ctx *pulumi.Context,
	name string, id pulumi.ID, state *EndpointState, opts ...pulumi.ResourceOpt) (*Endpoint, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["customHeaders"] = state.CustomHeaders
		inputs["endpointLocation"] = state.EndpointLocation
		inputs["endpointMonitorStatus"] = state.EndpointMonitorStatus
		inputs["endpointStatus"] = state.EndpointStatus
		inputs["geoMappings"] = state.GeoMappings
		inputs["minChildEndpoints"] = state.MinChildEndpoints
		inputs["name"] = state.Name
		inputs["priority"] = state.Priority
		inputs["profileName"] = state.ProfileName
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["subnets"] = state.Subnets
		inputs["target"] = state.Target
		inputs["targetResourceId"] = state.TargetResourceId
		inputs["type"] = state.Type
		inputs["weight"] = state.Weight
	}
	s, err := ctx.ReadResource("azure:trafficmanager/endpoint:Endpoint", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Endpoint{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Endpoint) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Endpoint) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// One or more `customHeader` blocks as defined below
func (r *Endpoint) CustomHeaders() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["customHeaders"])
}

// Specifies the Azure location of the Endpoint,
// this must be specified for Profiles using the `Performance` routing method
// if the Endpoint is of either type `nestedEndpoints` or `externalEndpoints`.
// For Endpoints of type `azureEndpoints` the value will be taken from the
// location of the Azure target resource.
func (r *Endpoint) EndpointLocation() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["endpointLocation"])
}

func (r *Endpoint) EndpointMonitorStatus() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["endpointMonitorStatus"])
}

// The status of the Endpoint, can be set to
// either `Enabled` or `Disabled`. Defaults to `Enabled`.
func (r *Endpoint) EndpointStatus() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["endpointStatus"])
}

// A list of Geographic Regions used to distribute traffic, such as `WORLD`, `UK` or `DE`. The same location can't be specified in two endpoints. [See the Geographic Hierarchies documentation for more information](https://docs.microsoft.com/en-us/rest/api/trafficmanager/geographichierarchies/getdefault).
func (r *Endpoint) GeoMappings() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["geoMappings"])
}

// This argument specifies the minimum number
// of endpoints that must be ‘online’ in the child profile in order for the
// parent profile to direct traffic to any of the endpoints in that child
// profile. This argument only applies to Endpoints of type `nestedEndpoints`
// and defaults to `1`.
func (r *Endpoint) MinChildEndpoints() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["minChildEndpoints"])
}

// The name of the Traffic Manager endpoint. Changing this forces a
// new resource to be created.
func (r *Endpoint) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Specifies the priority of this Endpoint, this must be
// specified for Profiles using the `Priority` traffic routing method. Supports
// values between 1 and 1000, with no Endpoints sharing the same value. If
// omitted the value will be computed in order of creation.
func (r *Endpoint) Priority() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["priority"])
}

// The name of the Traffic Manager Profile to attach
// create the Traffic Manager endpoint.
func (r *Endpoint) ProfileName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["profileName"])
}

// The name of the resource group in which to
// create the Traffic Manager endpoint.
func (r *Endpoint) ResourceGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// One or more `subnet` blocks as defined below
func (r *Endpoint) Subnets() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["subnets"])
}

// The FQDN DNS name of the target. This argument must be
// provided for an endpoint of type `externalEndpoints`, for other types it
// will be computed.
func (r *Endpoint) Target() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["target"])
}

// The resource id of an Azure resource to
// target. This argument must be provided for an endpoint of type
// `azureEndpoints` or `nestedEndpoints`.
func (r *Endpoint) TargetResourceId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["targetResourceId"])
}

// The Endpoint type, must be one of:
// - `azureEndpoints`
// - `externalEndpoints`
// - `nestedEndpoints`
func (r *Endpoint) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// Specifies how much traffic should be distributed to this
// endpoint, this must be specified for Profiles using the  `Weighted` traffic
// routing method. Supports values between 1 and 1000.
func (r *Endpoint) Weight() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["weight"])
}

// Input properties used for looking up and filtering Endpoint resources.
type EndpointState struct {
	// One or more `customHeader` blocks as defined below
	CustomHeaders interface{}
	// Specifies the Azure location of the Endpoint,
	// this must be specified for Profiles using the `Performance` routing method
	// if the Endpoint is of either type `nestedEndpoints` or `externalEndpoints`.
	// For Endpoints of type `azureEndpoints` the value will be taken from the
	// location of the Azure target resource.
	EndpointLocation interface{}
	EndpointMonitorStatus interface{}
	// The status of the Endpoint, can be set to
	// either `Enabled` or `Disabled`. Defaults to `Enabled`.
	EndpointStatus interface{}
	// A list of Geographic Regions used to distribute traffic, such as `WORLD`, `UK` or `DE`. The same location can't be specified in two endpoints. [See the Geographic Hierarchies documentation for more information](https://docs.microsoft.com/en-us/rest/api/trafficmanager/geographichierarchies/getdefault).
	GeoMappings interface{}
	// This argument specifies the minimum number
	// of endpoints that must be ‘online’ in the child profile in order for the
	// parent profile to direct traffic to any of the endpoints in that child
	// profile. This argument only applies to Endpoints of type `nestedEndpoints`
	// and defaults to `1`.
	MinChildEndpoints interface{}
	// The name of the Traffic Manager endpoint. Changing this forces a
	// new resource to be created.
	Name interface{}
	// Specifies the priority of this Endpoint, this must be
	// specified for Profiles using the `Priority` traffic routing method. Supports
	// values between 1 and 1000, with no Endpoints sharing the same value. If
	// omitted the value will be computed in order of creation.
	Priority interface{}
	// The name of the Traffic Manager Profile to attach
	// create the Traffic Manager endpoint.
	ProfileName interface{}
	// The name of the resource group in which to
	// create the Traffic Manager endpoint.
	ResourceGroupName interface{}
	// One or more `subnet` blocks as defined below
	Subnets interface{}
	// The FQDN DNS name of the target. This argument must be
	// provided for an endpoint of type `externalEndpoints`, for other types it
	// will be computed.
	Target interface{}
	// The resource id of an Azure resource to
	// target. This argument must be provided for an endpoint of type
	// `azureEndpoints` or `nestedEndpoints`.
	TargetResourceId interface{}
	// The Endpoint type, must be one of:
	// - `azureEndpoints`
	// - `externalEndpoints`
	// - `nestedEndpoints`
	Type interface{}
	// Specifies how much traffic should be distributed to this
	// endpoint, this must be specified for Profiles using the  `Weighted` traffic
	// routing method. Supports values between 1 and 1000.
	Weight interface{}
}

// The set of arguments for constructing a Endpoint resource.
type EndpointArgs struct {
	// One or more `customHeader` blocks as defined below
	CustomHeaders interface{}
	// Specifies the Azure location of the Endpoint,
	// this must be specified for Profiles using the `Performance` routing method
	// if the Endpoint is of either type `nestedEndpoints` or `externalEndpoints`.
	// For Endpoints of type `azureEndpoints` the value will be taken from the
	// location of the Azure target resource.
	EndpointLocation interface{}
	// The status of the Endpoint, can be set to
	// either `Enabled` or `Disabled`. Defaults to `Enabled`.
	EndpointStatus interface{}
	// A list of Geographic Regions used to distribute traffic, such as `WORLD`, `UK` or `DE`. The same location can't be specified in two endpoints. [See the Geographic Hierarchies documentation for more information](https://docs.microsoft.com/en-us/rest/api/trafficmanager/geographichierarchies/getdefault).
	GeoMappings interface{}
	// This argument specifies the minimum number
	// of endpoints that must be ‘online’ in the child profile in order for the
	// parent profile to direct traffic to any of the endpoints in that child
	// profile. This argument only applies to Endpoints of type `nestedEndpoints`
	// and defaults to `1`.
	MinChildEndpoints interface{}
	// The name of the Traffic Manager endpoint. Changing this forces a
	// new resource to be created.
	Name interface{}
	// Specifies the priority of this Endpoint, this must be
	// specified for Profiles using the `Priority` traffic routing method. Supports
	// values between 1 and 1000, with no Endpoints sharing the same value. If
	// omitted the value will be computed in order of creation.
	Priority interface{}
	// The name of the Traffic Manager Profile to attach
	// create the Traffic Manager endpoint.
	ProfileName interface{}
	// The name of the resource group in which to
	// create the Traffic Manager endpoint.
	ResourceGroupName interface{}
	// One or more `subnet` blocks as defined below
	Subnets interface{}
	// The FQDN DNS name of the target. This argument must be
	// provided for an endpoint of type `externalEndpoints`, for other types it
	// will be computed.
	Target interface{}
	// The resource id of an Azure resource to
	// target. This argument must be provided for an endpoint of type
	// `azureEndpoints` or `nestedEndpoints`.
	TargetResourceId interface{}
	// The Endpoint type, must be one of:
	// - `azureEndpoints`
	// - `externalEndpoints`
	// - `nestedEndpoints`
	Type interface{}
	// Specifies how much traffic should be distributed to this
	// endpoint, this must be specified for Profiles using the  `Weighted` traffic
	// routing method. Supports values between 1 and 1000.
	Weight interface{}
}
