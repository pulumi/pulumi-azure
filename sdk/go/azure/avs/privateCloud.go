// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package avs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a VMware Private Cloud.
//
// ## Example Usage
//
// > **NOTE :**  Normal `pulumi up` could ignore this note. Please disable correlation request id for continuous operations in one build (like acctest). The continuous operations like `update` or `delete` could not be triggered when it shares the same `correlation-id` with its previous operation.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/avs"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = avs.NewPrivateCloud(ctx, "examplePrivateCloud", &avs.PrivateCloudArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				SkuName:           pulumi.String("av36"),
//				ManagementCluster: &avs.PrivateCloudManagementClusterArgs{
//					Size: pulumi.Int(3),
//				},
//				NetworkSubnetCidr:         pulumi.String("192.168.48.0/22"),
//				InternetConnectionEnabled: pulumi.Bool(false),
//				NsxtPassword:              pulumi.String("QazWsx13$Edc"),
//				VcenterPassword:           pulumi.String("WsxEdc23$Rfv"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VMware Private Clouds can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:avs/privateCloud:PrivateCloud example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/privateCloud1
//
// ```
type PrivateCloud struct {
	pulumi.CustomResourceState

	// A `circuit` block as defined below.
	Circuits PrivateCloudCircuitArrayOutput `pulumi:"circuits"`
	// The endpoint for the HCX Cloud Manager.
	HcxCloudManagerEndpoint pulumi.StringOutput `pulumi:"hcxCloudManagerEndpoint"`
	// Is the Private Cluster connected to the internet? This field can not updated with `management_cluster.0.size` together.
	// > **NOTE :** `internetConnectionEnabled` and `management_cluster.0.size` cannot be updated at the same time.
	InternetConnectionEnabled pulumi.BoolPtrOutput `pulumi:"internetConnectionEnabled"`
	// The Azure Region where the VMware Private Cloud should exist. Changing this forces a new VMware Private Cloud to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// A `managementCluster` block as defined below.
	// > **NOTE :** `internetConnectionEnabled` and `management_cluster.0.size` cannot be updated at the same time.
	ManagementCluster PrivateCloudManagementClusterOutput `pulumi:"managementCluster"`
	// The network used to access vCenter Server and NSX-T Manager.
	ManagementSubnetCidr pulumi.StringOutput `pulumi:"managementSubnetCidr"`
	// The name which should be used for this VMware Private Cloud. Changing this forces a new VMware Private Cloud to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The subnet which should be unique across virtual network in your subscription as well as on-premise. Changing this forces a new VMware Private Cloud to be created.
	NetworkSubnetCidr pulumi.StringOutput `pulumi:"networkSubnetCidr"`
	// The thumbprint of the NSX-T Manager SSL certificate.
	NsxtCertificateThumbprint pulumi.StringOutput `pulumi:"nsxtCertificateThumbprint"`
	// The endpoint for the NSX-T Data Center manager.
	NsxtManagerEndpoint pulumi.StringOutput `pulumi:"nsxtManagerEndpoint"`
	// The password of the NSX-T Manager. Changing this forces a new VMware Private Cloud to be created.
	NsxtPassword pulumi.StringPtrOutput `pulumi:"nsxtPassword"`
	// The network which is used for virtual machine cold migration, cloning, and snapshot migration.
	ProvisioningSubnetCidr pulumi.StringOutput `pulumi:"provisioningSubnetCidr"`
	// The name of the Resource Group where the VMware Private Cloud should exist. Changing this forces a new VMware Private Cloud to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The Name of the SKU used for this Private Cloud. Possible values are `av20`, `av36`, `av36t`, `av36p` and `av52`. Changing this forces a new VMware Private Cloud to be created.
	SkuName pulumi.StringOutput `pulumi:"skuName"`
	// A mapping of tags which should be assigned to the VMware Private Cloud.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The thumbprint of the vCenter Server SSL certificate.
	VcenterCertificateThumbprint pulumi.StringOutput `pulumi:"vcenterCertificateThumbprint"`
	// The password of the vCenter admin. Changing this forces a new VMware Private Cloud to be created.
	VcenterPassword pulumi.StringPtrOutput `pulumi:"vcenterPassword"`
	// The endpoint for Virtual Center Server Appliance.
	VcsaEndpoint pulumi.StringOutput `pulumi:"vcsaEndpoint"`
	// The network which is used for live migration of virtual machines.
	VmotionSubnetCidr pulumi.StringOutput `pulumi:"vmotionSubnetCidr"`
}

// NewPrivateCloud registers a new resource with the given unique name, arguments, and options.
func NewPrivateCloud(ctx *pulumi.Context,
	name string, args *PrivateCloudArgs, opts ...pulumi.ResourceOption) (*PrivateCloud, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ManagementCluster == nil {
		return nil, errors.New("invalid value for required argument 'ManagementCluster'")
	}
	if args.NetworkSubnetCidr == nil {
		return nil, errors.New("invalid value for required argument 'NetworkSubnetCidr'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SkuName == nil {
		return nil, errors.New("invalid value for required argument 'SkuName'")
	}
	if args.NsxtPassword != nil {
		args.NsxtPassword = pulumi.ToSecret(args.NsxtPassword).(pulumi.StringPtrInput)
	}
	if args.VcenterPassword != nil {
		args.VcenterPassword = pulumi.ToSecret(args.VcenterPassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"nsxtPassword",
		"vcenterPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PrivateCloud
	err := ctx.RegisterResource("azure:avs/privateCloud:PrivateCloud", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrivateCloud gets an existing PrivateCloud resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrivateCloud(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrivateCloudState, opts ...pulumi.ResourceOption) (*PrivateCloud, error) {
	var resource PrivateCloud
	err := ctx.ReadResource("azure:avs/privateCloud:PrivateCloud", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrivateCloud resources.
type privateCloudState struct {
	// A `circuit` block as defined below.
	Circuits []PrivateCloudCircuit `pulumi:"circuits"`
	// The endpoint for the HCX Cloud Manager.
	HcxCloudManagerEndpoint *string `pulumi:"hcxCloudManagerEndpoint"`
	// Is the Private Cluster connected to the internet? This field can not updated with `management_cluster.0.size` together.
	// > **NOTE :** `internetConnectionEnabled` and `management_cluster.0.size` cannot be updated at the same time.
	InternetConnectionEnabled *bool `pulumi:"internetConnectionEnabled"`
	// The Azure Region where the VMware Private Cloud should exist. Changing this forces a new VMware Private Cloud to be created.
	Location *string `pulumi:"location"`
	// A `managementCluster` block as defined below.
	// > **NOTE :** `internetConnectionEnabled` and `management_cluster.0.size` cannot be updated at the same time.
	ManagementCluster *PrivateCloudManagementCluster `pulumi:"managementCluster"`
	// The network used to access vCenter Server and NSX-T Manager.
	ManagementSubnetCidr *string `pulumi:"managementSubnetCidr"`
	// The name which should be used for this VMware Private Cloud. Changing this forces a new VMware Private Cloud to be created.
	Name *string `pulumi:"name"`
	// The subnet which should be unique across virtual network in your subscription as well as on-premise. Changing this forces a new VMware Private Cloud to be created.
	NetworkSubnetCidr *string `pulumi:"networkSubnetCidr"`
	// The thumbprint of the NSX-T Manager SSL certificate.
	NsxtCertificateThumbprint *string `pulumi:"nsxtCertificateThumbprint"`
	// The endpoint for the NSX-T Data Center manager.
	NsxtManagerEndpoint *string `pulumi:"nsxtManagerEndpoint"`
	// The password of the NSX-T Manager. Changing this forces a new VMware Private Cloud to be created.
	NsxtPassword *string `pulumi:"nsxtPassword"`
	// The network which is used for virtual machine cold migration, cloning, and snapshot migration.
	ProvisioningSubnetCidr *string `pulumi:"provisioningSubnetCidr"`
	// The name of the Resource Group where the VMware Private Cloud should exist. Changing this forces a new VMware Private Cloud to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The Name of the SKU used for this Private Cloud. Possible values are `av20`, `av36`, `av36t`, `av36p` and `av52`. Changing this forces a new VMware Private Cloud to be created.
	SkuName *string `pulumi:"skuName"`
	// A mapping of tags which should be assigned to the VMware Private Cloud.
	Tags map[string]string `pulumi:"tags"`
	// The thumbprint of the vCenter Server SSL certificate.
	VcenterCertificateThumbprint *string `pulumi:"vcenterCertificateThumbprint"`
	// The password of the vCenter admin. Changing this forces a new VMware Private Cloud to be created.
	VcenterPassword *string `pulumi:"vcenterPassword"`
	// The endpoint for Virtual Center Server Appliance.
	VcsaEndpoint *string `pulumi:"vcsaEndpoint"`
	// The network which is used for live migration of virtual machines.
	VmotionSubnetCidr *string `pulumi:"vmotionSubnetCidr"`
}

type PrivateCloudState struct {
	// A `circuit` block as defined below.
	Circuits PrivateCloudCircuitArrayInput
	// The endpoint for the HCX Cloud Manager.
	HcxCloudManagerEndpoint pulumi.StringPtrInput
	// Is the Private Cluster connected to the internet? This field can not updated with `management_cluster.0.size` together.
	// > **NOTE :** `internetConnectionEnabled` and `management_cluster.0.size` cannot be updated at the same time.
	InternetConnectionEnabled pulumi.BoolPtrInput
	// The Azure Region where the VMware Private Cloud should exist. Changing this forces a new VMware Private Cloud to be created.
	Location pulumi.StringPtrInput
	// A `managementCluster` block as defined below.
	// > **NOTE :** `internetConnectionEnabled` and `management_cluster.0.size` cannot be updated at the same time.
	ManagementCluster PrivateCloudManagementClusterPtrInput
	// The network used to access vCenter Server and NSX-T Manager.
	ManagementSubnetCidr pulumi.StringPtrInput
	// The name which should be used for this VMware Private Cloud. Changing this forces a new VMware Private Cloud to be created.
	Name pulumi.StringPtrInput
	// The subnet which should be unique across virtual network in your subscription as well as on-premise. Changing this forces a new VMware Private Cloud to be created.
	NetworkSubnetCidr pulumi.StringPtrInput
	// The thumbprint of the NSX-T Manager SSL certificate.
	NsxtCertificateThumbprint pulumi.StringPtrInput
	// The endpoint for the NSX-T Data Center manager.
	NsxtManagerEndpoint pulumi.StringPtrInput
	// The password of the NSX-T Manager. Changing this forces a new VMware Private Cloud to be created.
	NsxtPassword pulumi.StringPtrInput
	// The network which is used for virtual machine cold migration, cloning, and snapshot migration.
	ProvisioningSubnetCidr pulumi.StringPtrInput
	// The name of the Resource Group where the VMware Private Cloud should exist. Changing this forces a new VMware Private Cloud to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The Name of the SKU used for this Private Cloud. Possible values are `av20`, `av36`, `av36t`, `av36p` and `av52`. Changing this forces a new VMware Private Cloud to be created.
	SkuName pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the VMware Private Cloud.
	Tags pulumi.StringMapInput
	// The thumbprint of the vCenter Server SSL certificate.
	VcenterCertificateThumbprint pulumi.StringPtrInput
	// The password of the vCenter admin. Changing this forces a new VMware Private Cloud to be created.
	VcenterPassword pulumi.StringPtrInput
	// The endpoint for Virtual Center Server Appliance.
	VcsaEndpoint pulumi.StringPtrInput
	// The network which is used for live migration of virtual machines.
	VmotionSubnetCidr pulumi.StringPtrInput
}

func (PrivateCloudState) ElementType() reflect.Type {
	return reflect.TypeOf((*privateCloudState)(nil)).Elem()
}

type privateCloudArgs struct {
	// Is the Private Cluster connected to the internet? This field can not updated with `management_cluster.0.size` together.
	// > **NOTE :** `internetConnectionEnabled` and `management_cluster.0.size` cannot be updated at the same time.
	InternetConnectionEnabled *bool `pulumi:"internetConnectionEnabled"`
	// The Azure Region where the VMware Private Cloud should exist. Changing this forces a new VMware Private Cloud to be created.
	Location *string `pulumi:"location"`
	// A `managementCluster` block as defined below.
	// > **NOTE :** `internetConnectionEnabled` and `management_cluster.0.size` cannot be updated at the same time.
	ManagementCluster PrivateCloudManagementCluster `pulumi:"managementCluster"`
	// The name which should be used for this VMware Private Cloud. Changing this forces a new VMware Private Cloud to be created.
	Name *string `pulumi:"name"`
	// The subnet which should be unique across virtual network in your subscription as well as on-premise. Changing this forces a new VMware Private Cloud to be created.
	NetworkSubnetCidr string `pulumi:"networkSubnetCidr"`
	// The password of the NSX-T Manager. Changing this forces a new VMware Private Cloud to be created.
	NsxtPassword *string `pulumi:"nsxtPassword"`
	// The name of the Resource Group where the VMware Private Cloud should exist. Changing this forces a new VMware Private Cloud to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The Name of the SKU used for this Private Cloud. Possible values are `av20`, `av36`, `av36t`, `av36p` and `av52`. Changing this forces a new VMware Private Cloud to be created.
	SkuName string `pulumi:"skuName"`
	// A mapping of tags which should be assigned to the VMware Private Cloud.
	Tags map[string]string `pulumi:"tags"`
	// The password of the vCenter admin. Changing this forces a new VMware Private Cloud to be created.
	VcenterPassword *string `pulumi:"vcenterPassword"`
}

// The set of arguments for constructing a PrivateCloud resource.
type PrivateCloudArgs struct {
	// Is the Private Cluster connected to the internet? This field can not updated with `management_cluster.0.size` together.
	// > **NOTE :** `internetConnectionEnabled` and `management_cluster.0.size` cannot be updated at the same time.
	InternetConnectionEnabled pulumi.BoolPtrInput
	// The Azure Region where the VMware Private Cloud should exist. Changing this forces a new VMware Private Cloud to be created.
	Location pulumi.StringPtrInput
	// A `managementCluster` block as defined below.
	// > **NOTE :** `internetConnectionEnabled` and `management_cluster.0.size` cannot be updated at the same time.
	ManagementCluster PrivateCloudManagementClusterInput
	// The name which should be used for this VMware Private Cloud. Changing this forces a new VMware Private Cloud to be created.
	Name pulumi.StringPtrInput
	// The subnet which should be unique across virtual network in your subscription as well as on-premise. Changing this forces a new VMware Private Cloud to be created.
	NetworkSubnetCidr pulumi.StringInput
	// The password of the NSX-T Manager. Changing this forces a new VMware Private Cloud to be created.
	NsxtPassword pulumi.StringPtrInput
	// The name of the Resource Group where the VMware Private Cloud should exist. Changing this forces a new VMware Private Cloud to be created.
	ResourceGroupName pulumi.StringInput
	// The Name of the SKU used for this Private Cloud. Possible values are `av20`, `av36`, `av36t`, `av36p` and `av52`. Changing this forces a new VMware Private Cloud to be created.
	SkuName pulumi.StringInput
	// A mapping of tags which should be assigned to the VMware Private Cloud.
	Tags pulumi.StringMapInput
	// The password of the vCenter admin. Changing this forces a new VMware Private Cloud to be created.
	VcenterPassword pulumi.StringPtrInput
}

func (PrivateCloudArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*privateCloudArgs)(nil)).Elem()
}

type PrivateCloudInput interface {
	pulumi.Input

	ToPrivateCloudOutput() PrivateCloudOutput
	ToPrivateCloudOutputWithContext(ctx context.Context) PrivateCloudOutput
}

func (*PrivateCloud) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateCloud)(nil)).Elem()
}

func (i *PrivateCloud) ToPrivateCloudOutput() PrivateCloudOutput {
	return i.ToPrivateCloudOutputWithContext(context.Background())
}

func (i *PrivateCloud) ToPrivateCloudOutputWithContext(ctx context.Context) PrivateCloudOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateCloudOutput)
}

// PrivateCloudArrayInput is an input type that accepts PrivateCloudArray and PrivateCloudArrayOutput values.
// You can construct a concrete instance of `PrivateCloudArrayInput` via:
//
//	PrivateCloudArray{ PrivateCloudArgs{...} }
type PrivateCloudArrayInput interface {
	pulumi.Input

	ToPrivateCloudArrayOutput() PrivateCloudArrayOutput
	ToPrivateCloudArrayOutputWithContext(context.Context) PrivateCloudArrayOutput
}

type PrivateCloudArray []PrivateCloudInput

func (PrivateCloudArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrivateCloud)(nil)).Elem()
}

func (i PrivateCloudArray) ToPrivateCloudArrayOutput() PrivateCloudArrayOutput {
	return i.ToPrivateCloudArrayOutputWithContext(context.Background())
}

func (i PrivateCloudArray) ToPrivateCloudArrayOutputWithContext(ctx context.Context) PrivateCloudArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateCloudArrayOutput)
}

// PrivateCloudMapInput is an input type that accepts PrivateCloudMap and PrivateCloudMapOutput values.
// You can construct a concrete instance of `PrivateCloudMapInput` via:
//
//	PrivateCloudMap{ "key": PrivateCloudArgs{...} }
type PrivateCloudMapInput interface {
	pulumi.Input

	ToPrivateCloudMapOutput() PrivateCloudMapOutput
	ToPrivateCloudMapOutputWithContext(context.Context) PrivateCloudMapOutput
}

type PrivateCloudMap map[string]PrivateCloudInput

func (PrivateCloudMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrivateCloud)(nil)).Elem()
}

func (i PrivateCloudMap) ToPrivateCloudMapOutput() PrivateCloudMapOutput {
	return i.ToPrivateCloudMapOutputWithContext(context.Background())
}

func (i PrivateCloudMap) ToPrivateCloudMapOutputWithContext(ctx context.Context) PrivateCloudMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateCloudMapOutput)
}

type PrivateCloudOutput struct{ *pulumi.OutputState }

func (PrivateCloudOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateCloud)(nil)).Elem()
}

func (o PrivateCloudOutput) ToPrivateCloudOutput() PrivateCloudOutput {
	return o
}

func (o PrivateCloudOutput) ToPrivateCloudOutputWithContext(ctx context.Context) PrivateCloudOutput {
	return o
}

// A `circuit` block as defined below.
func (o PrivateCloudOutput) Circuits() PrivateCloudCircuitArrayOutput {
	return o.ApplyT(func(v *PrivateCloud) PrivateCloudCircuitArrayOutput { return v.Circuits }).(PrivateCloudCircuitArrayOutput)
}

// The endpoint for the HCX Cloud Manager.
func (o PrivateCloudOutput) HcxCloudManagerEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateCloud) pulumi.StringOutput { return v.HcxCloudManagerEndpoint }).(pulumi.StringOutput)
}

// Is the Private Cluster connected to the internet? This field can not updated with `management_cluster.0.size` together.
// > **NOTE :** `internetConnectionEnabled` and `management_cluster.0.size` cannot be updated at the same time.
func (o PrivateCloudOutput) InternetConnectionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PrivateCloud) pulumi.BoolPtrOutput { return v.InternetConnectionEnabled }).(pulumi.BoolPtrOutput)
}

// The Azure Region where the VMware Private Cloud should exist. Changing this forces a new VMware Private Cloud to be created.
func (o PrivateCloudOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateCloud) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// A `managementCluster` block as defined below.
// > **NOTE :** `internetConnectionEnabled` and `management_cluster.0.size` cannot be updated at the same time.
func (o PrivateCloudOutput) ManagementCluster() PrivateCloudManagementClusterOutput {
	return o.ApplyT(func(v *PrivateCloud) PrivateCloudManagementClusterOutput { return v.ManagementCluster }).(PrivateCloudManagementClusterOutput)
}

// The network used to access vCenter Server and NSX-T Manager.
func (o PrivateCloudOutput) ManagementSubnetCidr() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateCloud) pulumi.StringOutput { return v.ManagementSubnetCidr }).(pulumi.StringOutput)
}

// The name which should be used for this VMware Private Cloud. Changing this forces a new VMware Private Cloud to be created.
func (o PrivateCloudOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateCloud) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The subnet which should be unique across virtual network in your subscription as well as on-premise. Changing this forces a new VMware Private Cloud to be created.
func (o PrivateCloudOutput) NetworkSubnetCidr() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateCloud) pulumi.StringOutput { return v.NetworkSubnetCidr }).(pulumi.StringOutput)
}

// The thumbprint of the NSX-T Manager SSL certificate.
func (o PrivateCloudOutput) NsxtCertificateThumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateCloud) pulumi.StringOutput { return v.NsxtCertificateThumbprint }).(pulumi.StringOutput)
}

// The endpoint for the NSX-T Data Center manager.
func (o PrivateCloudOutput) NsxtManagerEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateCloud) pulumi.StringOutput { return v.NsxtManagerEndpoint }).(pulumi.StringOutput)
}

// The password of the NSX-T Manager. Changing this forces a new VMware Private Cloud to be created.
func (o PrivateCloudOutput) NsxtPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateCloud) pulumi.StringPtrOutput { return v.NsxtPassword }).(pulumi.StringPtrOutput)
}

// The network which is used for virtual machine cold migration, cloning, and snapshot migration.
func (o PrivateCloudOutput) ProvisioningSubnetCidr() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateCloud) pulumi.StringOutput { return v.ProvisioningSubnetCidr }).(pulumi.StringOutput)
}

// The name of the Resource Group where the VMware Private Cloud should exist. Changing this forces a new VMware Private Cloud to be created.
func (o PrivateCloudOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateCloud) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The Name of the SKU used for this Private Cloud. Possible values are `av20`, `av36`, `av36t`, `av36p` and `av52`. Changing this forces a new VMware Private Cloud to be created.
func (o PrivateCloudOutput) SkuName() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateCloud) pulumi.StringOutput { return v.SkuName }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the VMware Private Cloud.
func (o PrivateCloudOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PrivateCloud) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The thumbprint of the vCenter Server SSL certificate.
func (o PrivateCloudOutput) VcenterCertificateThumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateCloud) pulumi.StringOutput { return v.VcenterCertificateThumbprint }).(pulumi.StringOutput)
}

// The password of the vCenter admin. Changing this forces a new VMware Private Cloud to be created.
func (o PrivateCloudOutput) VcenterPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateCloud) pulumi.StringPtrOutput { return v.VcenterPassword }).(pulumi.StringPtrOutput)
}

// The endpoint for Virtual Center Server Appliance.
func (o PrivateCloudOutput) VcsaEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateCloud) pulumi.StringOutput { return v.VcsaEndpoint }).(pulumi.StringOutput)
}

// The network which is used for live migration of virtual machines.
func (o PrivateCloudOutput) VmotionSubnetCidr() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateCloud) pulumi.StringOutput { return v.VmotionSubnetCidr }).(pulumi.StringOutput)
}

type PrivateCloudArrayOutput struct{ *pulumi.OutputState }

func (PrivateCloudArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrivateCloud)(nil)).Elem()
}

func (o PrivateCloudArrayOutput) ToPrivateCloudArrayOutput() PrivateCloudArrayOutput {
	return o
}

func (o PrivateCloudArrayOutput) ToPrivateCloudArrayOutputWithContext(ctx context.Context) PrivateCloudArrayOutput {
	return o
}

func (o PrivateCloudArrayOutput) Index(i pulumi.IntInput) PrivateCloudOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PrivateCloud {
		return vs[0].([]*PrivateCloud)[vs[1].(int)]
	}).(PrivateCloudOutput)
}

type PrivateCloudMapOutput struct{ *pulumi.OutputState }

func (PrivateCloudMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrivateCloud)(nil)).Elem()
}

func (o PrivateCloudMapOutput) ToPrivateCloudMapOutput() PrivateCloudMapOutput {
	return o
}

func (o PrivateCloudMapOutput) ToPrivateCloudMapOutputWithContext(ctx context.Context) PrivateCloudMapOutput {
	return o
}

func (o PrivateCloudMapOutput) MapIndex(k pulumi.StringInput) PrivateCloudOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PrivateCloud {
		return vs[0].(map[string]*PrivateCloud)[vs[1].(string)]
	}).(PrivateCloudOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateCloudInput)(nil)).Elem(), &PrivateCloud{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateCloudArrayInput)(nil)).Elem(), PrivateCloudArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateCloudMapInput)(nil)).Elem(), PrivateCloudMap{})
	pulumi.RegisterOutputType(PrivateCloudOutput{})
	pulumi.RegisterOutputType(PrivateCloudArrayOutput{})
	pulumi.RegisterOutputType(PrivateCloudMapOutput{})
}
