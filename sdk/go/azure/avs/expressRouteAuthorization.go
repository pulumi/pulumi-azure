// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package avs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Express Route VMware Authorization.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/avs"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			examplePrivateCloud, err := avs.NewPrivateCloud(ctx, "examplePrivateCloud", &avs.PrivateCloudArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				SkuName:           pulumi.String("av36"),
//				ManagementCluster: &avs.PrivateCloudManagementClusterArgs{
//					Size: pulumi.Int(3),
//				},
//				NetworkSubnetCidr:         pulumi.String("192.168.48.0/22"),
//				InternetConnectionEnabled: pulumi.Bool(false),
//				NsxtPassword:              pulumi.String("QazWsx13$Edc"),
//				VcenterPassword:           pulumi.String("WsxEdc23$Rfv"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = avs.NewExpressRouteAuthorization(ctx, "exampleExpressRouteAuthorization", &avs.ExpressRouteAuthorizationArgs{
//				PrivateCloudId: examplePrivateCloud.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VMware Authorizations can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:avs/expressRouteAuthorization:ExpressRouteAuthorization example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.AVS/privateClouds/privateCloud1/authorizations/authorization1
//
// ```
type ExpressRouteAuthorization struct {
	pulumi.CustomResourceState

	// The ID of the Express Route Circuit Authorization.
	ExpressRouteAuthorizationId pulumi.StringOutput `pulumi:"expressRouteAuthorizationId"`
	// The key of the Express Route Circuit Authorization.
	ExpressRouteAuthorizationKey pulumi.StringOutput `pulumi:"expressRouteAuthorizationKey"`
	// The name which should be used for this Express Route VMware Authorization. Changing this forces a new VMware Authorization to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the VMware Private Cloud in which to create this Express Route VMware Authorization. Changing this forces a new VMware Authorization to be created.
	PrivateCloudId pulumi.StringOutput `pulumi:"privateCloudId"`
}

// NewExpressRouteAuthorization registers a new resource with the given unique name, arguments, and options.
func NewExpressRouteAuthorization(ctx *pulumi.Context,
	name string, args *ExpressRouteAuthorizationArgs, opts ...pulumi.ResourceOption) (*ExpressRouteAuthorization, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PrivateCloudId == nil {
		return nil, errors.New("invalid value for required argument 'PrivateCloudId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"expressRouteAuthorizationKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ExpressRouteAuthorization
	err := ctx.RegisterResource("azure:avs/expressRouteAuthorization:ExpressRouteAuthorization", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExpressRouteAuthorization gets an existing ExpressRouteAuthorization resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExpressRouteAuthorization(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExpressRouteAuthorizationState, opts ...pulumi.ResourceOption) (*ExpressRouteAuthorization, error) {
	var resource ExpressRouteAuthorization
	err := ctx.ReadResource("azure:avs/expressRouteAuthorization:ExpressRouteAuthorization", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExpressRouteAuthorization resources.
type expressRouteAuthorizationState struct {
	// The ID of the Express Route Circuit Authorization.
	ExpressRouteAuthorizationId *string `pulumi:"expressRouteAuthorizationId"`
	// The key of the Express Route Circuit Authorization.
	ExpressRouteAuthorizationKey *string `pulumi:"expressRouteAuthorizationKey"`
	// The name which should be used for this Express Route VMware Authorization. Changing this forces a new VMware Authorization to be created.
	Name *string `pulumi:"name"`
	// The ID of the VMware Private Cloud in which to create this Express Route VMware Authorization. Changing this forces a new VMware Authorization to be created.
	PrivateCloudId *string `pulumi:"privateCloudId"`
}

type ExpressRouteAuthorizationState struct {
	// The ID of the Express Route Circuit Authorization.
	ExpressRouteAuthorizationId pulumi.StringPtrInput
	// The key of the Express Route Circuit Authorization.
	ExpressRouteAuthorizationKey pulumi.StringPtrInput
	// The name which should be used for this Express Route VMware Authorization. Changing this forces a new VMware Authorization to be created.
	Name pulumi.StringPtrInput
	// The ID of the VMware Private Cloud in which to create this Express Route VMware Authorization. Changing this forces a new VMware Authorization to be created.
	PrivateCloudId pulumi.StringPtrInput
}

func (ExpressRouteAuthorizationState) ElementType() reflect.Type {
	return reflect.TypeOf((*expressRouteAuthorizationState)(nil)).Elem()
}

type expressRouteAuthorizationArgs struct {
	// The name which should be used for this Express Route VMware Authorization. Changing this forces a new VMware Authorization to be created.
	Name *string `pulumi:"name"`
	// The ID of the VMware Private Cloud in which to create this Express Route VMware Authorization. Changing this forces a new VMware Authorization to be created.
	PrivateCloudId string `pulumi:"privateCloudId"`
}

// The set of arguments for constructing a ExpressRouteAuthorization resource.
type ExpressRouteAuthorizationArgs struct {
	// The name which should be used for this Express Route VMware Authorization. Changing this forces a new VMware Authorization to be created.
	Name pulumi.StringPtrInput
	// The ID of the VMware Private Cloud in which to create this Express Route VMware Authorization. Changing this forces a new VMware Authorization to be created.
	PrivateCloudId pulumi.StringInput
}

func (ExpressRouteAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*expressRouteAuthorizationArgs)(nil)).Elem()
}

type ExpressRouteAuthorizationInput interface {
	pulumi.Input

	ToExpressRouteAuthorizationOutput() ExpressRouteAuthorizationOutput
	ToExpressRouteAuthorizationOutputWithContext(ctx context.Context) ExpressRouteAuthorizationOutput
}

func (*ExpressRouteAuthorization) ElementType() reflect.Type {
	return reflect.TypeOf((**ExpressRouteAuthorization)(nil)).Elem()
}

func (i *ExpressRouteAuthorization) ToExpressRouteAuthorizationOutput() ExpressRouteAuthorizationOutput {
	return i.ToExpressRouteAuthorizationOutputWithContext(context.Background())
}

func (i *ExpressRouteAuthorization) ToExpressRouteAuthorizationOutputWithContext(ctx context.Context) ExpressRouteAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpressRouteAuthorizationOutput)
}

// ExpressRouteAuthorizationArrayInput is an input type that accepts ExpressRouteAuthorizationArray and ExpressRouteAuthorizationArrayOutput values.
// You can construct a concrete instance of `ExpressRouteAuthorizationArrayInput` via:
//
//	ExpressRouteAuthorizationArray{ ExpressRouteAuthorizationArgs{...} }
type ExpressRouteAuthorizationArrayInput interface {
	pulumi.Input

	ToExpressRouteAuthorizationArrayOutput() ExpressRouteAuthorizationArrayOutput
	ToExpressRouteAuthorizationArrayOutputWithContext(context.Context) ExpressRouteAuthorizationArrayOutput
}

type ExpressRouteAuthorizationArray []ExpressRouteAuthorizationInput

func (ExpressRouteAuthorizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExpressRouteAuthorization)(nil)).Elem()
}

func (i ExpressRouteAuthorizationArray) ToExpressRouteAuthorizationArrayOutput() ExpressRouteAuthorizationArrayOutput {
	return i.ToExpressRouteAuthorizationArrayOutputWithContext(context.Background())
}

func (i ExpressRouteAuthorizationArray) ToExpressRouteAuthorizationArrayOutputWithContext(ctx context.Context) ExpressRouteAuthorizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpressRouteAuthorizationArrayOutput)
}

// ExpressRouteAuthorizationMapInput is an input type that accepts ExpressRouteAuthorizationMap and ExpressRouteAuthorizationMapOutput values.
// You can construct a concrete instance of `ExpressRouteAuthorizationMapInput` via:
//
//	ExpressRouteAuthorizationMap{ "key": ExpressRouteAuthorizationArgs{...} }
type ExpressRouteAuthorizationMapInput interface {
	pulumi.Input

	ToExpressRouteAuthorizationMapOutput() ExpressRouteAuthorizationMapOutput
	ToExpressRouteAuthorizationMapOutputWithContext(context.Context) ExpressRouteAuthorizationMapOutput
}

type ExpressRouteAuthorizationMap map[string]ExpressRouteAuthorizationInput

func (ExpressRouteAuthorizationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExpressRouteAuthorization)(nil)).Elem()
}

func (i ExpressRouteAuthorizationMap) ToExpressRouteAuthorizationMapOutput() ExpressRouteAuthorizationMapOutput {
	return i.ToExpressRouteAuthorizationMapOutputWithContext(context.Background())
}

func (i ExpressRouteAuthorizationMap) ToExpressRouteAuthorizationMapOutputWithContext(ctx context.Context) ExpressRouteAuthorizationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpressRouteAuthorizationMapOutput)
}

type ExpressRouteAuthorizationOutput struct{ *pulumi.OutputState }

func (ExpressRouteAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExpressRouteAuthorization)(nil)).Elem()
}

func (o ExpressRouteAuthorizationOutput) ToExpressRouteAuthorizationOutput() ExpressRouteAuthorizationOutput {
	return o
}

func (o ExpressRouteAuthorizationOutput) ToExpressRouteAuthorizationOutputWithContext(ctx context.Context) ExpressRouteAuthorizationOutput {
	return o
}

// The ID of the Express Route Circuit Authorization.
func (o ExpressRouteAuthorizationOutput) ExpressRouteAuthorizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *ExpressRouteAuthorization) pulumi.StringOutput { return v.ExpressRouteAuthorizationId }).(pulumi.StringOutput)
}

// The key of the Express Route Circuit Authorization.
func (o ExpressRouteAuthorizationOutput) ExpressRouteAuthorizationKey() pulumi.StringOutput {
	return o.ApplyT(func(v *ExpressRouteAuthorization) pulumi.StringOutput { return v.ExpressRouteAuthorizationKey }).(pulumi.StringOutput)
}

// The name which should be used for this Express Route VMware Authorization. Changing this forces a new VMware Authorization to be created.
func (o ExpressRouteAuthorizationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ExpressRouteAuthorization) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the VMware Private Cloud in which to create this Express Route VMware Authorization. Changing this forces a new VMware Authorization to be created.
func (o ExpressRouteAuthorizationOutput) PrivateCloudId() pulumi.StringOutput {
	return o.ApplyT(func(v *ExpressRouteAuthorization) pulumi.StringOutput { return v.PrivateCloudId }).(pulumi.StringOutput)
}

type ExpressRouteAuthorizationArrayOutput struct{ *pulumi.OutputState }

func (ExpressRouteAuthorizationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExpressRouteAuthorization)(nil)).Elem()
}

func (o ExpressRouteAuthorizationArrayOutput) ToExpressRouteAuthorizationArrayOutput() ExpressRouteAuthorizationArrayOutput {
	return o
}

func (o ExpressRouteAuthorizationArrayOutput) ToExpressRouteAuthorizationArrayOutputWithContext(ctx context.Context) ExpressRouteAuthorizationArrayOutput {
	return o
}

func (o ExpressRouteAuthorizationArrayOutput) Index(i pulumi.IntInput) ExpressRouteAuthorizationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExpressRouteAuthorization {
		return vs[0].([]*ExpressRouteAuthorization)[vs[1].(int)]
	}).(ExpressRouteAuthorizationOutput)
}

type ExpressRouteAuthorizationMapOutput struct{ *pulumi.OutputState }

func (ExpressRouteAuthorizationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExpressRouteAuthorization)(nil)).Elem()
}

func (o ExpressRouteAuthorizationMapOutput) ToExpressRouteAuthorizationMapOutput() ExpressRouteAuthorizationMapOutput {
	return o
}

func (o ExpressRouteAuthorizationMapOutput) ToExpressRouteAuthorizationMapOutputWithContext(ctx context.Context) ExpressRouteAuthorizationMapOutput {
	return o
}

func (o ExpressRouteAuthorizationMapOutput) MapIndex(k pulumi.StringInput) ExpressRouteAuthorizationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExpressRouteAuthorization {
		return vs[0].(map[string]*ExpressRouteAuthorization)[vs[1].(string)]
	}).(ExpressRouteAuthorizationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExpressRouteAuthorizationInput)(nil)).Elem(), &ExpressRouteAuthorization{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExpressRouteAuthorizationArrayInput)(nil)).Elem(), ExpressRouteAuthorizationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExpressRouteAuthorizationMapInput)(nil)).Elem(), ExpressRouteAuthorizationMap{})
	pulumi.RegisterOutputType(ExpressRouteAuthorizationOutput{})
	pulumi.RegisterOutputType(ExpressRouteAuthorizationArrayOutput{})
	pulumi.RegisterOutputType(ExpressRouteAuthorizationMapOutput{})
}
