// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package avs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a VMware Private Cloud Netapp File Attachment.
//
// ## Example Usage
//
// > **NOTE :** For Azure VMware private cloud, normal `pulumi up` could ignore this note. Please disable correlation request id for continuous operations in one build (like acctest). The continuous operations like `update` or `delete` could not be triggered when it shares the same `correlation-id` with its previous operation.
//
// ```go
// package main
//
// import (
//
//	avs/cluster "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/avs/cluster"
//	avs/expressRouteAuthorization "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/avs/expressRouteAuthorization"
//	avs/netappVolumeAttachment "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/avs/netappVolumeAttachment"
//	avs/privateCloud "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/avs/privateCloud"
//	core/resourceGroup "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/core/resourceGroup"
//	netapp/account "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/netapp/account"
//	netapp/pool "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/netapp/pool"
//	netapp/volume "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/netapp/volume"
//	network/publicIp "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/publicIp"
//	network/subnet "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/subnet"
//	network/virtualNetwork "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/virtualNetwork"
//	network/virtualNetworkGateway "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/virtualNetworkGateway"
//	network/virtualNetworkGatewayConnection "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/virtualNetworkGatewayConnection"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// _, err := core/resourceGroup.NewResourceGroup(ctx, "example", &core/resourceGroup.ResourceGroupArgs{
// Name: "example-resources",
// Location: "West Europe",
// })
// if err != nil {
// return err
// }
// test, err := network/publicIp.NewPublicIp(ctx, "test", &network/publicIp.PublicIpArgs{
// Name: "example-public-ip",
// Location: testAzurermResourceGroup.Location,
// ResourceGroupName: testAzurermResourceGroup.Name,
// AllocationMethod: "Static",
// Sku: "Standard",
// })
// if err != nil {
// return err
// }
// testVirtualNetwork, err := network/virtualNetwork.NewVirtualNetwork(ctx, "test", &network/virtualNetwork.VirtualNetworkArgs{
// Name: "example-VirtualNetwork",
// Location: testAzurermResourceGroup.Location,
// ResourceGroupName: testAzurermResourceGroup.Name,
// AddressSpaces: []string{
// "10.6.0.0/16",
// },
// })
// if err != nil {
// return err
// }
// netappSubnet, err := network/subnet.NewSubnet(ctx, "netappSubnet", &network/subnet.SubnetArgs{
// Name: "example-Subnet",
// ResourceGroupName: testAzurermResourceGroup.Name,
// VirtualNetworkName: testVirtualNetwork.Name,
// AddressPrefixes: []string{
// "10.6.2.0/24",
// },
// Delegations: []map[string]interface{}{
// map[string]interface{}{
// "name": "testdelegation",
// "serviceDelegation": map[string]interface{}{
// "name": "Microsoft.Netapp/volumes",
// "actions": []string{
// "Microsoft.Network/networkinterfaces/*",
// "Microsoft.Network/virtualNetworks/subnets/join/action",
// },
// },
// },
// },
// })
// if err != nil {
// return err
// }
// gatewaySubnet, err := network/subnet.NewSubnet(ctx, "gatewaySubnet", &network/subnet.SubnetArgs{
// Name: "GatewaySubnet",
// ResourceGroupName: testAzurermResourceGroup.Name,
// VirtualNetworkName: testVirtualNetwork.Name,
// AddressPrefixes: []string{
// "10.6.1.0/24",
// },
// })
// if err != nil {
// return err
// }
// testVirtualNetworkGateway, err := network/virtualNetworkGateway.NewVirtualNetworkGateway(ctx, "test", &network/virtualNetworkGateway.VirtualNetworkGatewayArgs{
// Name: "example-vnet-gateway",
// Location: testAzurermResourceGroup.Location,
// ResourceGroupName: testAzurermResourceGroup.Name,
// Type: "ExpressRoute",
// Sku: "Standard",
// IpConfigurations: []map[string]interface{}{
// map[string]interface{}{
// "name": "vnetGatewayConfig",
// "publicIpAddressId": test.Id,
// "subnetId": gatewaySubnet.Id,
// },
// },
// })
// if err != nil {
// return err
// }
// testAccount, err := netapp/account.NewAccount(ctx, "test", &netapp/account.AccountArgs{
// Name: "example-NetAppAccount",
// Location: testAzurermResourceGroup.Location,
// ResourceGroupName: testAzurermResourceGroup.Name,
// })
// if err != nil {
// return err
// }
// testPool, err := netapp/pool.NewPool(ctx, "test", &netapp/pool.PoolArgs{
// Name: "example-NetAppPool",
// Location: testAzurermResourceGroup.Location,
// ResourceGroupName: testAzurermResourceGroup.Name,
// AccountName: testAccount.Name,
// ServiceLevel: "Standard",
// SizeInTb: 4,
// })
// if err != nil {
// return err
// }
// testVolume, err := netapp/volume.NewVolume(ctx, "test", &netapp/volume.VolumeArgs{
// Name: "example-NetAppVolume",
// Location: testAzurermResourceGroup.Location,
// ResourceGroupName: testAzurermResourceGroup.Name,
// AccountName: testAccount.Name,
// PoolName: testPool.Name,
// VolumePath: "my-unique-file-path-%d",
// ServiceLevel: "Standard",
// SubnetId: netappSubnet.Id,
// Protocols: []string{
// "NFSv3",
// },
// StorageQuotaInGb: 100,
// AzureVmwareDataStoreEnabled: true,
// ExportPolicyRules: []map[string]interface{}{
// map[string]interface{}{
// "ruleIndex": 1,
// "allowedClients": []string{
// "0.0.0.0/0",
// },
// "protocolsEnabled": "NFSv3",
// "unixReadOnly": false,
// "unixReadWrite": true,
// "rootAccessEnabled": true,
// },
// },
// })
// if err != nil {
// return err
// }
// testPrivateCloud, err := avs/privateCloud.NewPrivateCloud(ctx, "test", &avs/privateCloud.PrivateCloudArgs{
// Name: "example-PC",
// ResourceGroupName: testAzurermResourceGroup.Name,
// Location: testAzurermResourceGroup.Location,
// SkuName: "av36",
// ManagementCluster: map[string]interface{}{
// "size": 3,
// },
// NetworkSubnetCidr: "192.168.48.0/22",
// })
// if err != nil {
// return err
// }
// testCluster, err := avs/cluster.NewCluster(ctx, "test", &avs/cluster.ClusterArgs{
// Name: "example-vm-cluster",
// VmwareCloudId: testPrivateCloud.Id,
// ClusterNodeCount: 3,
// SkuName: "av36",
// })
// if err != nil {
// return err
// }
// testExpressRouteAuthorization, err := avs/expressRouteAuthorization.NewExpressRouteAuthorization(ctx, "test", &avs/expressRouteAuthorization.ExpressRouteAuthorizationArgs{
// Name: "example-VmwareAuthorization",
// PrivateCloudId: testPrivateCloud.Id,
// })
// if err != nil {
// return err
// }
// _, err = network/virtualNetworkGatewayConnection.NewVirtualNetworkGatewayConnection(ctx, "test", &network/virtualNetworkGatewayConnection.VirtualNetworkGatewayConnectionArgs{
// Name: "example-vnetgwconn",
// Location: testAzurermResourceGroup.Location,
// ResourceGroupName: testAzurermResourceGroup.Name,
// Type: "ExpressRoute",
// VirtualNetworkGatewayId: testVirtualNetworkGateway.Id,
// ExpressRouteCircuitId: testPrivateCloud.Circuits[0].ExpressRouteId,
// AuthorizationKey: testExpressRouteAuthorization.ExpressRouteAuthorizationKey,
// })
// if err != nil {
// return err
// }
// _, err = avs/netappVolumeAttachment.NewNetappVolumeAttachment(ctx, "test", &avs/netappVolumeAttachment.NetappVolumeAttachmentArgs{
// Name: "example-vmwareattachment",
// NetappVolumeId: testVolume.Id,
// VmwareClusterId: testCluster.Id,
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
//
// ## Import
//
// VMware Private Clouds Netapp File Volume Attachment can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:avs/netappVolumeAttachment:NetappVolumeAttachment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/privateCloud1/clusters/Cluster1/dataStores/datastore1
// ```
type NetappVolumeAttachment struct {
	pulumi.CustomResourceState

	// The name which should be used for this VMware Private Cloud Netapp File Volume Attachment. Changing this forces a new VMware Private Cloud Netapp File Volume Attachment to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The netapp file volume for this VMware Private Cloud Netapp File Volume Attachment to connect to. Changing this forces a new VMware Private Cloud Netapp File Volume Attachment to be created.
	NetappVolumeId pulumi.StringOutput `pulumi:"netappVolumeId"`
	// The vmware cluster for this VMware Private Cloud Netapp File Volume Attachment to associated to. Changing this forces a new VMware Private Cloud Netapp File Volume Attachment to be created.
	//
	// > **NOTE :** please follow the prerequisites mentioned in this [article](https://learn.microsoft.com/en-us/azure/azure-vmware/attach-azure-netapp-files-to-azure-vmware-solution-hosts?tabs=azure-portal#prerequisites) before associating the netapp file volume to the vmware solution hosts.
	VmwareClusterId pulumi.StringOutput `pulumi:"vmwareClusterId"`
}

// NewNetappVolumeAttachment registers a new resource with the given unique name, arguments, and options.
func NewNetappVolumeAttachment(ctx *pulumi.Context,
	name string, args *NetappVolumeAttachmentArgs, opts ...pulumi.ResourceOption) (*NetappVolumeAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetappVolumeId == nil {
		return nil, errors.New("invalid value for required argument 'NetappVolumeId'")
	}
	if args.VmwareClusterId == nil {
		return nil, errors.New("invalid value for required argument 'VmwareClusterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetappVolumeAttachment
	err := ctx.RegisterResource("azure:avs/netappVolumeAttachment:NetappVolumeAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetappVolumeAttachment gets an existing NetappVolumeAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetappVolumeAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetappVolumeAttachmentState, opts ...pulumi.ResourceOption) (*NetappVolumeAttachment, error) {
	var resource NetappVolumeAttachment
	err := ctx.ReadResource("azure:avs/netappVolumeAttachment:NetappVolumeAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetappVolumeAttachment resources.
type netappVolumeAttachmentState struct {
	// The name which should be used for this VMware Private Cloud Netapp File Volume Attachment. Changing this forces a new VMware Private Cloud Netapp File Volume Attachment to be created.
	Name *string `pulumi:"name"`
	// The netapp file volume for this VMware Private Cloud Netapp File Volume Attachment to connect to. Changing this forces a new VMware Private Cloud Netapp File Volume Attachment to be created.
	NetappVolumeId *string `pulumi:"netappVolumeId"`
	// The vmware cluster for this VMware Private Cloud Netapp File Volume Attachment to associated to. Changing this forces a new VMware Private Cloud Netapp File Volume Attachment to be created.
	//
	// > **NOTE :** please follow the prerequisites mentioned in this [article](https://learn.microsoft.com/en-us/azure/azure-vmware/attach-azure-netapp-files-to-azure-vmware-solution-hosts?tabs=azure-portal#prerequisites) before associating the netapp file volume to the vmware solution hosts.
	VmwareClusterId *string `pulumi:"vmwareClusterId"`
}

type NetappVolumeAttachmentState struct {
	// The name which should be used for this VMware Private Cloud Netapp File Volume Attachment. Changing this forces a new VMware Private Cloud Netapp File Volume Attachment to be created.
	Name pulumi.StringPtrInput
	// The netapp file volume for this VMware Private Cloud Netapp File Volume Attachment to connect to. Changing this forces a new VMware Private Cloud Netapp File Volume Attachment to be created.
	NetappVolumeId pulumi.StringPtrInput
	// The vmware cluster for this VMware Private Cloud Netapp File Volume Attachment to associated to. Changing this forces a new VMware Private Cloud Netapp File Volume Attachment to be created.
	//
	// > **NOTE :** please follow the prerequisites mentioned in this [article](https://learn.microsoft.com/en-us/azure/azure-vmware/attach-azure-netapp-files-to-azure-vmware-solution-hosts?tabs=azure-portal#prerequisites) before associating the netapp file volume to the vmware solution hosts.
	VmwareClusterId pulumi.StringPtrInput
}

func (NetappVolumeAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*netappVolumeAttachmentState)(nil)).Elem()
}

type netappVolumeAttachmentArgs struct {
	// The name which should be used for this VMware Private Cloud Netapp File Volume Attachment. Changing this forces a new VMware Private Cloud Netapp File Volume Attachment to be created.
	Name *string `pulumi:"name"`
	// The netapp file volume for this VMware Private Cloud Netapp File Volume Attachment to connect to. Changing this forces a new VMware Private Cloud Netapp File Volume Attachment to be created.
	NetappVolumeId string `pulumi:"netappVolumeId"`
	// The vmware cluster for this VMware Private Cloud Netapp File Volume Attachment to associated to. Changing this forces a new VMware Private Cloud Netapp File Volume Attachment to be created.
	//
	// > **NOTE :** please follow the prerequisites mentioned in this [article](https://learn.microsoft.com/en-us/azure/azure-vmware/attach-azure-netapp-files-to-azure-vmware-solution-hosts?tabs=azure-portal#prerequisites) before associating the netapp file volume to the vmware solution hosts.
	VmwareClusterId string `pulumi:"vmwareClusterId"`
}

// The set of arguments for constructing a NetappVolumeAttachment resource.
type NetappVolumeAttachmentArgs struct {
	// The name which should be used for this VMware Private Cloud Netapp File Volume Attachment. Changing this forces a new VMware Private Cloud Netapp File Volume Attachment to be created.
	Name pulumi.StringPtrInput
	// The netapp file volume for this VMware Private Cloud Netapp File Volume Attachment to connect to. Changing this forces a new VMware Private Cloud Netapp File Volume Attachment to be created.
	NetappVolumeId pulumi.StringInput
	// The vmware cluster for this VMware Private Cloud Netapp File Volume Attachment to associated to. Changing this forces a new VMware Private Cloud Netapp File Volume Attachment to be created.
	//
	// > **NOTE :** please follow the prerequisites mentioned in this [article](https://learn.microsoft.com/en-us/azure/azure-vmware/attach-azure-netapp-files-to-azure-vmware-solution-hosts?tabs=azure-portal#prerequisites) before associating the netapp file volume to the vmware solution hosts.
	VmwareClusterId pulumi.StringInput
}

func (NetappVolumeAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*netappVolumeAttachmentArgs)(nil)).Elem()
}

type NetappVolumeAttachmentInput interface {
	pulumi.Input

	ToNetappVolumeAttachmentOutput() NetappVolumeAttachmentOutput
	ToNetappVolumeAttachmentOutputWithContext(ctx context.Context) NetappVolumeAttachmentOutput
}

func (*NetappVolumeAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**NetappVolumeAttachment)(nil)).Elem()
}

func (i *NetappVolumeAttachment) ToNetappVolumeAttachmentOutput() NetappVolumeAttachmentOutput {
	return i.ToNetappVolumeAttachmentOutputWithContext(context.Background())
}

func (i *NetappVolumeAttachment) ToNetappVolumeAttachmentOutputWithContext(ctx context.Context) NetappVolumeAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetappVolumeAttachmentOutput)
}

// NetappVolumeAttachmentArrayInput is an input type that accepts NetappVolumeAttachmentArray and NetappVolumeAttachmentArrayOutput values.
// You can construct a concrete instance of `NetappVolumeAttachmentArrayInput` via:
//
//	NetappVolumeAttachmentArray{ NetappVolumeAttachmentArgs{...} }
type NetappVolumeAttachmentArrayInput interface {
	pulumi.Input

	ToNetappVolumeAttachmentArrayOutput() NetappVolumeAttachmentArrayOutput
	ToNetappVolumeAttachmentArrayOutputWithContext(context.Context) NetappVolumeAttachmentArrayOutput
}

type NetappVolumeAttachmentArray []NetappVolumeAttachmentInput

func (NetappVolumeAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetappVolumeAttachment)(nil)).Elem()
}

func (i NetappVolumeAttachmentArray) ToNetappVolumeAttachmentArrayOutput() NetappVolumeAttachmentArrayOutput {
	return i.ToNetappVolumeAttachmentArrayOutputWithContext(context.Background())
}

func (i NetappVolumeAttachmentArray) ToNetappVolumeAttachmentArrayOutputWithContext(ctx context.Context) NetappVolumeAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetappVolumeAttachmentArrayOutput)
}

// NetappVolumeAttachmentMapInput is an input type that accepts NetappVolumeAttachmentMap and NetappVolumeAttachmentMapOutput values.
// You can construct a concrete instance of `NetappVolumeAttachmentMapInput` via:
//
//	NetappVolumeAttachmentMap{ "key": NetappVolumeAttachmentArgs{...} }
type NetappVolumeAttachmentMapInput interface {
	pulumi.Input

	ToNetappVolumeAttachmentMapOutput() NetappVolumeAttachmentMapOutput
	ToNetappVolumeAttachmentMapOutputWithContext(context.Context) NetappVolumeAttachmentMapOutput
}

type NetappVolumeAttachmentMap map[string]NetappVolumeAttachmentInput

func (NetappVolumeAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetappVolumeAttachment)(nil)).Elem()
}

func (i NetappVolumeAttachmentMap) ToNetappVolumeAttachmentMapOutput() NetappVolumeAttachmentMapOutput {
	return i.ToNetappVolumeAttachmentMapOutputWithContext(context.Background())
}

func (i NetappVolumeAttachmentMap) ToNetappVolumeAttachmentMapOutputWithContext(ctx context.Context) NetappVolumeAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetappVolumeAttachmentMapOutput)
}

type NetappVolumeAttachmentOutput struct{ *pulumi.OutputState }

func (NetappVolumeAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetappVolumeAttachment)(nil)).Elem()
}

func (o NetappVolumeAttachmentOutput) ToNetappVolumeAttachmentOutput() NetappVolumeAttachmentOutput {
	return o
}

func (o NetappVolumeAttachmentOutput) ToNetappVolumeAttachmentOutputWithContext(ctx context.Context) NetappVolumeAttachmentOutput {
	return o
}

// The name which should be used for this VMware Private Cloud Netapp File Volume Attachment. Changing this forces a new VMware Private Cloud Netapp File Volume Attachment to be created.
func (o NetappVolumeAttachmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolumeAttachment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The netapp file volume for this VMware Private Cloud Netapp File Volume Attachment to connect to. Changing this forces a new VMware Private Cloud Netapp File Volume Attachment to be created.
func (o NetappVolumeAttachmentOutput) NetappVolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolumeAttachment) pulumi.StringOutput { return v.NetappVolumeId }).(pulumi.StringOutput)
}

// The vmware cluster for this VMware Private Cloud Netapp File Volume Attachment to associated to. Changing this forces a new VMware Private Cloud Netapp File Volume Attachment to be created.
//
// > **NOTE :** please follow the prerequisites mentioned in this [article](https://learn.microsoft.com/en-us/azure/azure-vmware/attach-azure-netapp-files-to-azure-vmware-solution-hosts?tabs=azure-portal#prerequisites) before associating the netapp file volume to the vmware solution hosts.
func (o NetappVolumeAttachmentOutput) VmwareClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetappVolumeAttachment) pulumi.StringOutput { return v.VmwareClusterId }).(pulumi.StringOutput)
}

type NetappVolumeAttachmentArrayOutput struct{ *pulumi.OutputState }

func (NetappVolumeAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetappVolumeAttachment)(nil)).Elem()
}

func (o NetappVolumeAttachmentArrayOutput) ToNetappVolumeAttachmentArrayOutput() NetappVolumeAttachmentArrayOutput {
	return o
}

func (o NetappVolumeAttachmentArrayOutput) ToNetappVolumeAttachmentArrayOutputWithContext(ctx context.Context) NetappVolumeAttachmentArrayOutput {
	return o
}

func (o NetappVolumeAttachmentArrayOutput) Index(i pulumi.IntInput) NetappVolumeAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetappVolumeAttachment {
		return vs[0].([]*NetappVolumeAttachment)[vs[1].(int)]
	}).(NetappVolumeAttachmentOutput)
}

type NetappVolumeAttachmentMapOutput struct{ *pulumi.OutputState }

func (NetappVolumeAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetappVolumeAttachment)(nil)).Elem()
}

func (o NetappVolumeAttachmentMapOutput) ToNetappVolumeAttachmentMapOutput() NetappVolumeAttachmentMapOutput {
	return o
}

func (o NetappVolumeAttachmentMapOutput) ToNetappVolumeAttachmentMapOutputWithContext(ctx context.Context) NetappVolumeAttachmentMapOutput {
	return o
}

func (o NetappVolumeAttachmentMapOutput) MapIndex(k pulumi.StringInput) NetappVolumeAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetappVolumeAttachment {
		return vs[0].(map[string]*NetappVolumeAttachment)[vs[1].(string)]
	}).(NetappVolumeAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetappVolumeAttachmentInput)(nil)).Elem(), &NetappVolumeAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetappVolumeAttachmentArrayInput)(nil)).Elem(), NetappVolumeAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetappVolumeAttachmentMapInput)(nil)).Elem(), NetappVolumeAttachmentMap{})
	pulumi.RegisterOutputType(NetappVolumeAttachmentOutput{})
	pulumi.RegisterOutputType(NetappVolumeAttachmentArrayOutput{})
	pulumi.RegisterOutputType(NetappVolumeAttachmentMapOutput{})
}
