// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appplatform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Spring Cloud Configuration Service.
//
// > **NOTE:** This resource is applicable only for Spring Cloud Service with enterprise tier.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/appplatform"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleSpringCloudService, err := appplatform.NewSpringCloudService(ctx, "exampleSpringCloudService", &appplatform.SpringCloudServiceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				SkuName:           pulumi.String("E0"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = appplatform.NewSpringCloudConfigurationService(ctx, "exampleSpringCloudConfigurationService", &appplatform.SpringCloudConfigurationServiceArgs{
//				SpringCloudServiceId: exampleSpringCloudService.ID(),
//				Repositories: appplatform.SpringCloudConfigurationServiceRepositoryArray{
//					&appplatform.SpringCloudConfigurationServiceRepositoryArgs{
//						Name:  pulumi.String("fake"),
//						Label: pulumi.String("master"),
//						Patterns: pulumi.StringArray{
//							pulumi.String("app/dev"),
//						},
//						Uri: pulumi.String("https://github.com/Azure-Samples/piggymetrics"),
//						SearchPaths: pulumi.StringArray{
//							pulumi.String("dir1"),
//							pulumi.String("dir2"),
//						},
//						StrictHostKeyChecking: pulumi.Bool(false),
//						Username:              pulumi.String("adminuser"),
//						Password:              pulumi.String("H@Sh1CoR3!"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Spring Cloud Configuration Services can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:appplatform/springCloudConfigurationService:SpringCloudConfigurationService example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resourceGroup1/providers/Microsoft.AppPlatform/spring/service1/configurationServices/configurationService1
//
// ```
type SpringCloudConfigurationService struct {
	pulumi.CustomResourceState

	// The generation of the Spring Cloud Configuration Service. Possible values are `Gen1` and `Gen2`.
	Generation pulumi.StringPtrOutput `pulumi:"generation"`
	// The name which should be used for this Spring Cloud Configuration Service. The only possible value is `default`. Changing this forces a new Spring Cloud Configuration Service to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// One or more `repository` blocks as defined below.
	Repositories SpringCloudConfigurationServiceRepositoryArrayOutput `pulumi:"repositories"`
	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Configuration Service to be created.
	SpringCloudServiceId pulumi.StringOutput `pulumi:"springCloudServiceId"`
}

// NewSpringCloudConfigurationService registers a new resource with the given unique name, arguments, and options.
func NewSpringCloudConfigurationService(ctx *pulumi.Context,
	name string, args *SpringCloudConfigurationServiceArgs, opts ...pulumi.ResourceOption) (*SpringCloudConfigurationService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SpringCloudServiceId == nil {
		return nil, errors.New("invalid value for required argument 'SpringCloudServiceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SpringCloudConfigurationService
	err := ctx.RegisterResource("azure:appplatform/springCloudConfigurationService:SpringCloudConfigurationService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpringCloudConfigurationService gets an existing SpringCloudConfigurationService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpringCloudConfigurationService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpringCloudConfigurationServiceState, opts ...pulumi.ResourceOption) (*SpringCloudConfigurationService, error) {
	var resource SpringCloudConfigurationService
	err := ctx.ReadResource("azure:appplatform/springCloudConfigurationService:SpringCloudConfigurationService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SpringCloudConfigurationService resources.
type springCloudConfigurationServiceState struct {
	// The generation of the Spring Cloud Configuration Service. Possible values are `Gen1` and `Gen2`.
	Generation *string `pulumi:"generation"`
	// The name which should be used for this Spring Cloud Configuration Service. The only possible value is `default`. Changing this forces a new Spring Cloud Configuration Service to be created.
	Name *string `pulumi:"name"`
	// One or more `repository` blocks as defined below.
	Repositories []SpringCloudConfigurationServiceRepository `pulumi:"repositories"`
	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Configuration Service to be created.
	SpringCloudServiceId *string `pulumi:"springCloudServiceId"`
}

type SpringCloudConfigurationServiceState struct {
	// The generation of the Spring Cloud Configuration Service. Possible values are `Gen1` and `Gen2`.
	Generation pulumi.StringPtrInput
	// The name which should be used for this Spring Cloud Configuration Service. The only possible value is `default`. Changing this forces a new Spring Cloud Configuration Service to be created.
	Name pulumi.StringPtrInput
	// One or more `repository` blocks as defined below.
	Repositories SpringCloudConfigurationServiceRepositoryArrayInput
	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Configuration Service to be created.
	SpringCloudServiceId pulumi.StringPtrInput
}

func (SpringCloudConfigurationServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*springCloudConfigurationServiceState)(nil)).Elem()
}

type springCloudConfigurationServiceArgs struct {
	// The generation of the Spring Cloud Configuration Service. Possible values are `Gen1` and `Gen2`.
	Generation *string `pulumi:"generation"`
	// The name which should be used for this Spring Cloud Configuration Service. The only possible value is `default`. Changing this forces a new Spring Cloud Configuration Service to be created.
	Name *string `pulumi:"name"`
	// One or more `repository` blocks as defined below.
	Repositories []SpringCloudConfigurationServiceRepository `pulumi:"repositories"`
	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Configuration Service to be created.
	SpringCloudServiceId string `pulumi:"springCloudServiceId"`
}

// The set of arguments for constructing a SpringCloudConfigurationService resource.
type SpringCloudConfigurationServiceArgs struct {
	// The generation of the Spring Cloud Configuration Service. Possible values are `Gen1` and `Gen2`.
	Generation pulumi.StringPtrInput
	// The name which should be used for this Spring Cloud Configuration Service. The only possible value is `default`. Changing this forces a new Spring Cloud Configuration Service to be created.
	Name pulumi.StringPtrInput
	// One or more `repository` blocks as defined below.
	Repositories SpringCloudConfigurationServiceRepositoryArrayInput
	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Configuration Service to be created.
	SpringCloudServiceId pulumi.StringInput
}

func (SpringCloudConfigurationServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*springCloudConfigurationServiceArgs)(nil)).Elem()
}

type SpringCloudConfigurationServiceInput interface {
	pulumi.Input

	ToSpringCloudConfigurationServiceOutput() SpringCloudConfigurationServiceOutput
	ToSpringCloudConfigurationServiceOutputWithContext(ctx context.Context) SpringCloudConfigurationServiceOutput
}

func (*SpringCloudConfigurationService) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudConfigurationService)(nil)).Elem()
}

func (i *SpringCloudConfigurationService) ToSpringCloudConfigurationServiceOutput() SpringCloudConfigurationServiceOutput {
	return i.ToSpringCloudConfigurationServiceOutputWithContext(context.Background())
}

func (i *SpringCloudConfigurationService) ToSpringCloudConfigurationServiceOutputWithContext(ctx context.Context) SpringCloudConfigurationServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudConfigurationServiceOutput)
}

// SpringCloudConfigurationServiceArrayInput is an input type that accepts SpringCloudConfigurationServiceArray and SpringCloudConfigurationServiceArrayOutput values.
// You can construct a concrete instance of `SpringCloudConfigurationServiceArrayInput` via:
//
//	SpringCloudConfigurationServiceArray{ SpringCloudConfigurationServiceArgs{...} }
type SpringCloudConfigurationServiceArrayInput interface {
	pulumi.Input

	ToSpringCloudConfigurationServiceArrayOutput() SpringCloudConfigurationServiceArrayOutput
	ToSpringCloudConfigurationServiceArrayOutputWithContext(context.Context) SpringCloudConfigurationServiceArrayOutput
}

type SpringCloudConfigurationServiceArray []SpringCloudConfigurationServiceInput

func (SpringCloudConfigurationServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpringCloudConfigurationService)(nil)).Elem()
}

func (i SpringCloudConfigurationServiceArray) ToSpringCloudConfigurationServiceArrayOutput() SpringCloudConfigurationServiceArrayOutput {
	return i.ToSpringCloudConfigurationServiceArrayOutputWithContext(context.Background())
}

func (i SpringCloudConfigurationServiceArray) ToSpringCloudConfigurationServiceArrayOutputWithContext(ctx context.Context) SpringCloudConfigurationServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudConfigurationServiceArrayOutput)
}

// SpringCloudConfigurationServiceMapInput is an input type that accepts SpringCloudConfigurationServiceMap and SpringCloudConfigurationServiceMapOutput values.
// You can construct a concrete instance of `SpringCloudConfigurationServiceMapInput` via:
//
//	SpringCloudConfigurationServiceMap{ "key": SpringCloudConfigurationServiceArgs{...} }
type SpringCloudConfigurationServiceMapInput interface {
	pulumi.Input

	ToSpringCloudConfigurationServiceMapOutput() SpringCloudConfigurationServiceMapOutput
	ToSpringCloudConfigurationServiceMapOutputWithContext(context.Context) SpringCloudConfigurationServiceMapOutput
}

type SpringCloudConfigurationServiceMap map[string]SpringCloudConfigurationServiceInput

func (SpringCloudConfigurationServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpringCloudConfigurationService)(nil)).Elem()
}

func (i SpringCloudConfigurationServiceMap) ToSpringCloudConfigurationServiceMapOutput() SpringCloudConfigurationServiceMapOutput {
	return i.ToSpringCloudConfigurationServiceMapOutputWithContext(context.Background())
}

func (i SpringCloudConfigurationServiceMap) ToSpringCloudConfigurationServiceMapOutputWithContext(ctx context.Context) SpringCloudConfigurationServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudConfigurationServiceMapOutput)
}

type SpringCloudConfigurationServiceOutput struct{ *pulumi.OutputState }

func (SpringCloudConfigurationServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudConfigurationService)(nil)).Elem()
}

func (o SpringCloudConfigurationServiceOutput) ToSpringCloudConfigurationServiceOutput() SpringCloudConfigurationServiceOutput {
	return o
}

func (o SpringCloudConfigurationServiceOutput) ToSpringCloudConfigurationServiceOutputWithContext(ctx context.Context) SpringCloudConfigurationServiceOutput {
	return o
}

// The generation of the Spring Cloud Configuration Service. Possible values are `Gen1` and `Gen2`.
func (o SpringCloudConfigurationServiceOutput) Generation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudConfigurationService) pulumi.StringPtrOutput { return v.Generation }).(pulumi.StringPtrOutput)
}

// The name which should be used for this Spring Cloud Configuration Service. The only possible value is `default`. Changing this forces a new Spring Cloud Configuration Service to be created.
func (o SpringCloudConfigurationServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SpringCloudConfigurationService) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// One or more `repository` blocks as defined below.
func (o SpringCloudConfigurationServiceOutput) Repositories() SpringCloudConfigurationServiceRepositoryArrayOutput {
	return o.ApplyT(func(v *SpringCloudConfigurationService) SpringCloudConfigurationServiceRepositoryArrayOutput {
		return v.Repositories
	}).(SpringCloudConfigurationServiceRepositoryArrayOutput)
}

// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Configuration Service to be created.
func (o SpringCloudConfigurationServiceOutput) SpringCloudServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SpringCloudConfigurationService) pulumi.StringOutput { return v.SpringCloudServiceId }).(pulumi.StringOutput)
}

type SpringCloudConfigurationServiceArrayOutput struct{ *pulumi.OutputState }

func (SpringCloudConfigurationServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpringCloudConfigurationService)(nil)).Elem()
}

func (o SpringCloudConfigurationServiceArrayOutput) ToSpringCloudConfigurationServiceArrayOutput() SpringCloudConfigurationServiceArrayOutput {
	return o
}

func (o SpringCloudConfigurationServiceArrayOutput) ToSpringCloudConfigurationServiceArrayOutputWithContext(ctx context.Context) SpringCloudConfigurationServiceArrayOutput {
	return o
}

func (o SpringCloudConfigurationServiceArrayOutput) Index(i pulumi.IntInput) SpringCloudConfigurationServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SpringCloudConfigurationService {
		return vs[0].([]*SpringCloudConfigurationService)[vs[1].(int)]
	}).(SpringCloudConfigurationServiceOutput)
}

type SpringCloudConfigurationServiceMapOutput struct{ *pulumi.OutputState }

func (SpringCloudConfigurationServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpringCloudConfigurationService)(nil)).Elem()
}

func (o SpringCloudConfigurationServiceMapOutput) ToSpringCloudConfigurationServiceMapOutput() SpringCloudConfigurationServiceMapOutput {
	return o
}

func (o SpringCloudConfigurationServiceMapOutput) ToSpringCloudConfigurationServiceMapOutputWithContext(ctx context.Context) SpringCloudConfigurationServiceMapOutput {
	return o
}

func (o SpringCloudConfigurationServiceMapOutput) MapIndex(k pulumi.StringInput) SpringCloudConfigurationServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SpringCloudConfigurationService {
		return vs[0].(map[string]*SpringCloudConfigurationService)[vs[1].(string)]
	}).(SpringCloudConfigurationServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudConfigurationServiceInput)(nil)).Elem(), &SpringCloudConfigurationService{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudConfigurationServiceArrayInput)(nil)).Elem(), SpringCloudConfigurationServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudConfigurationServiceMapInput)(nil)).Elem(), SpringCloudConfigurationServiceMap{})
	pulumi.RegisterOutputType(SpringCloudConfigurationServiceOutput{})
	pulumi.RegisterOutputType(SpringCloudConfigurationServiceArrayOutput{})
	pulumi.RegisterOutputType(SpringCloudConfigurationServiceMapOutput{})
}
