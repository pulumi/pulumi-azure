// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appplatform

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manage an Azure Spring Cloud Application.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/appplatform"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("Southeast Asia"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleSpringCloudService, err := appplatform.NewSpringCloudService(ctx, "exampleSpringCloudService", &appplatform.SpringCloudServiceArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			Location:          exampleResourceGroup.Location,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = appplatform.NewSpringCloudApp(ctx, "exampleSpringCloudApp", &appplatform.SpringCloudAppArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			ServiceName:       exampleSpringCloudService.Name,
// 			Identity: &appplatform.SpringCloudAppIdentityArgs{
// 				Type: pulumi.String("SystemAssigned"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Spring Cloud Application can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:appplatform/springCloudApp:SpringCloudApp example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.AppPlatform/Spring/myservice/apps/myapp
// ```
type SpringCloudApp struct {
	pulumi.CustomResourceState

	// Is only https allowed? Defaults to `false`.
	HttpsOnly pulumi.BoolPtrOutput `pulumi:"httpsOnly"`
	// An `identity` block as defined below.
	Identity SpringCloudAppIdentityPtrOutput `pulumi:"identity"`
	// Does the Spring Cloud Application have public endpoint? Defaults to `false`.
	IsPublic pulumi.BoolPtrOutput `pulumi:"isPublic"`
	// Specifies the name of the Spring Cloud Application. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// An `persistentDisk` block as defined below.
	PersistentDisk SpringCloudAppPersistentDiskOutput `pulumi:"persistentDisk"`
	// Specifies the name of the resource group in which to create the Spring Cloud Application. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Specifies the name of the Spring Cloud Service resource. Changing this forces a new resource to be created.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// The public endpoint of the Spring Cloud Application.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewSpringCloudApp registers a new resource with the given unique name, arguments, and options.
func NewSpringCloudApp(ctx *pulumi.Context,
	name string, args *SpringCloudAppArgs, opts ...pulumi.ResourceOption) (*SpringCloudApp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource SpringCloudApp
	err := ctx.RegisterResource("azure:appplatform/springCloudApp:SpringCloudApp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpringCloudApp gets an existing SpringCloudApp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpringCloudApp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpringCloudAppState, opts ...pulumi.ResourceOption) (*SpringCloudApp, error) {
	var resource SpringCloudApp
	err := ctx.ReadResource("azure:appplatform/springCloudApp:SpringCloudApp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SpringCloudApp resources.
type springCloudAppState struct {
	// Is only https allowed? Defaults to `false`.
	HttpsOnly *bool `pulumi:"httpsOnly"`
	// An `identity` block as defined below.
	Identity *SpringCloudAppIdentity `pulumi:"identity"`
	// Does the Spring Cloud Application have public endpoint? Defaults to `false`.
	IsPublic *bool `pulumi:"isPublic"`
	// Specifies the name of the Spring Cloud Application. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// An `persistentDisk` block as defined below.
	PersistentDisk *SpringCloudAppPersistentDisk `pulumi:"persistentDisk"`
	// Specifies the name of the resource group in which to create the Spring Cloud Application. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Specifies the name of the Spring Cloud Service resource. Changing this forces a new resource to be created.
	ServiceName *string `pulumi:"serviceName"`
	// The public endpoint of the Spring Cloud Application.
	Url *string `pulumi:"url"`
}

type SpringCloudAppState struct {
	// Is only https allowed? Defaults to `false`.
	HttpsOnly pulumi.BoolPtrInput
	// An `identity` block as defined below.
	Identity SpringCloudAppIdentityPtrInput
	// Does the Spring Cloud Application have public endpoint? Defaults to `false`.
	IsPublic pulumi.BoolPtrInput
	// Specifies the name of the Spring Cloud Application. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// An `persistentDisk` block as defined below.
	PersistentDisk SpringCloudAppPersistentDiskPtrInput
	// Specifies the name of the resource group in which to create the Spring Cloud Application. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// Specifies the name of the Spring Cloud Service resource. Changing this forces a new resource to be created.
	ServiceName pulumi.StringPtrInput
	// The public endpoint of the Spring Cloud Application.
	Url pulumi.StringPtrInput
}

func (SpringCloudAppState) ElementType() reflect.Type {
	return reflect.TypeOf((*springCloudAppState)(nil)).Elem()
}

type springCloudAppArgs struct {
	// Is only https allowed? Defaults to `false`.
	HttpsOnly *bool `pulumi:"httpsOnly"`
	// An `identity` block as defined below.
	Identity *SpringCloudAppIdentity `pulumi:"identity"`
	// Does the Spring Cloud Application have public endpoint? Defaults to `false`.
	IsPublic *bool `pulumi:"isPublic"`
	// Specifies the name of the Spring Cloud Application. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// An `persistentDisk` block as defined below.
	PersistentDisk *SpringCloudAppPersistentDisk `pulumi:"persistentDisk"`
	// Specifies the name of the resource group in which to create the Spring Cloud Application. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Specifies the name of the Spring Cloud Service resource. Changing this forces a new resource to be created.
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a SpringCloudApp resource.
type SpringCloudAppArgs struct {
	// Is only https allowed? Defaults to `false`.
	HttpsOnly pulumi.BoolPtrInput
	// An `identity` block as defined below.
	Identity SpringCloudAppIdentityPtrInput
	// Does the Spring Cloud Application have public endpoint? Defaults to `false`.
	IsPublic pulumi.BoolPtrInput
	// Specifies the name of the Spring Cloud Application. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// An `persistentDisk` block as defined below.
	PersistentDisk SpringCloudAppPersistentDiskPtrInput
	// Specifies the name of the resource group in which to create the Spring Cloud Application. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// Specifies the name of the Spring Cloud Service resource. Changing this forces a new resource to be created.
	ServiceName pulumi.StringInput
}

func (SpringCloudAppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*springCloudAppArgs)(nil)).Elem()
}

type SpringCloudAppInput interface {
	pulumi.Input

	ToSpringCloudAppOutput() SpringCloudAppOutput
	ToSpringCloudAppOutputWithContext(ctx context.Context) SpringCloudAppOutput
}

func (*SpringCloudApp) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudApp)(nil))
}

func (i *SpringCloudApp) ToSpringCloudAppOutput() SpringCloudAppOutput {
	return i.ToSpringCloudAppOutputWithContext(context.Background())
}

func (i *SpringCloudApp) ToSpringCloudAppOutputWithContext(ctx context.Context) SpringCloudAppOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudAppOutput)
}

func (i *SpringCloudApp) ToSpringCloudAppPtrOutput() SpringCloudAppPtrOutput {
	return i.ToSpringCloudAppPtrOutputWithContext(context.Background())
}

func (i *SpringCloudApp) ToSpringCloudAppPtrOutputWithContext(ctx context.Context) SpringCloudAppPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudAppPtrOutput)
}

type SpringCloudAppPtrInput interface {
	pulumi.Input

	ToSpringCloudAppPtrOutput() SpringCloudAppPtrOutput
	ToSpringCloudAppPtrOutputWithContext(ctx context.Context) SpringCloudAppPtrOutput
}

type springCloudAppPtrType SpringCloudAppArgs

func (*springCloudAppPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudApp)(nil))
}

func (i *springCloudAppPtrType) ToSpringCloudAppPtrOutput() SpringCloudAppPtrOutput {
	return i.ToSpringCloudAppPtrOutputWithContext(context.Background())
}

func (i *springCloudAppPtrType) ToSpringCloudAppPtrOutputWithContext(ctx context.Context) SpringCloudAppPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudAppPtrOutput)
}

// SpringCloudAppArrayInput is an input type that accepts SpringCloudAppArray and SpringCloudAppArrayOutput values.
// You can construct a concrete instance of `SpringCloudAppArrayInput` via:
//
//          SpringCloudAppArray{ SpringCloudAppArgs{...} }
type SpringCloudAppArrayInput interface {
	pulumi.Input

	ToSpringCloudAppArrayOutput() SpringCloudAppArrayOutput
	ToSpringCloudAppArrayOutputWithContext(context.Context) SpringCloudAppArrayOutput
}

type SpringCloudAppArray []SpringCloudAppInput

func (SpringCloudAppArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*SpringCloudApp)(nil))
}

func (i SpringCloudAppArray) ToSpringCloudAppArrayOutput() SpringCloudAppArrayOutput {
	return i.ToSpringCloudAppArrayOutputWithContext(context.Background())
}

func (i SpringCloudAppArray) ToSpringCloudAppArrayOutputWithContext(ctx context.Context) SpringCloudAppArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudAppArrayOutput)
}

// SpringCloudAppMapInput is an input type that accepts SpringCloudAppMap and SpringCloudAppMapOutput values.
// You can construct a concrete instance of `SpringCloudAppMapInput` via:
//
//          SpringCloudAppMap{ "key": SpringCloudAppArgs{...} }
type SpringCloudAppMapInput interface {
	pulumi.Input

	ToSpringCloudAppMapOutput() SpringCloudAppMapOutput
	ToSpringCloudAppMapOutputWithContext(context.Context) SpringCloudAppMapOutput
}

type SpringCloudAppMap map[string]SpringCloudAppInput

func (SpringCloudAppMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*SpringCloudApp)(nil))
}

func (i SpringCloudAppMap) ToSpringCloudAppMapOutput() SpringCloudAppMapOutput {
	return i.ToSpringCloudAppMapOutputWithContext(context.Background())
}

func (i SpringCloudAppMap) ToSpringCloudAppMapOutputWithContext(ctx context.Context) SpringCloudAppMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudAppMapOutput)
}

type SpringCloudAppOutput struct {
	*pulumi.OutputState
}

func (SpringCloudAppOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudApp)(nil))
}

func (o SpringCloudAppOutput) ToSpringCloudAppOutput() SpringCloudAppOutput {
	return o
}

func (o SpringCloudAppOutput) ToSpringCloudAppOutputWithContext(ctx context.Context) SpringCloudAppOutput {
	return o
}

func (o SpringCloudAppOutput) ToSpringCloudAppPtrOutput() SpringCloudAppPtrOutput {
	return o.ToSpringCloudAppPtrOutputWithContext(context.Background())
}

func (o SpringCloudAppOutput) ToSpringCloudAppPtrOutputWithContext(ctx context.Context) SpringCloudAppPtrOutput {
	return o.ApplyT(func(v SpringCloudApp) *SpringCloudApp {
		return &v
	}).(SpringCloudAppPtrOutput)
}

type SpringCloudAppPtrOutput struct {
	*pulumi.OutputState
}

func (SpringCloudAppPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudApp)(nil))
}

func (o SpringCloudAppPtrOutput) ToSpringCloudAppPtrOutput() SpringCloudAppPtrOutput {
	return o
}

func (o SpringCloudAppPtrOutput) ToSpringCloudAppPtrOutputWithContext(ctx context.Context) SpringCloudAppPtrOutput {
	return o
}

type SpringCloudAppArrayOutput struct{ *pulumi.OutputState }

func (SpringCloudAppArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpringCloudApp)(nil))
}

func (o SpringCloudAppArrayOutput) ToSpringCloudAppArrayOutput() SpringCloudAppArrayOutput {
	return o
}

func (o SpringCloudAppArrayOutput) ToSpringCloudAppArrayOutputWithContext(ctx context.Context) SpringCloudAppArrayOutput {
	return o
}

func (o SpringCloudAppArrayOutput) Index(i pulumi.IntInput) SpringCloudAppOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SpringCloudApp {
		return vs[0].([]SpringCloudApp)[vs[1].(int)]
	}).(SpringCloudAppOutput)
}

type SpringCloudAppMapOutput struct{ *pulumi.OutputState }

func (SpringCloudAppMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SpringCloudApp)(nil))
}

func (o SpringCloudAppMapOutput) ToSpringCloudAppMapOutput() SpringCloudAppMapOutput {
	return o
}

func (o SpringCloudAppMapOutput) ToSpringCloudAppMapOutputWithContext(ctx context.Context) SpringCloudAppMapOutput {
	return o
}

func (o SpringCloudAppMapOutput) MapIndex(k pulumi.StringInput) SpringCloudAppOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SpringCloudApp {
		return vs[0].(map[string]SpringCloudApp)[vs[1].(string)]
	}).(SpringCloudAppOutput)
}

func init() {
	pulumi.RegisterOutputType(SpringCloudAppOutput{})
	pulumi.RegisterOutputType(SpringCloudAppPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudAppArrayOutput{})
	pulumi.RegisterOutputType(SpringCloudAppMapOutput{})
}
