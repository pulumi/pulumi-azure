// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appplatform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > **NOTE:** This resource is only applicable for Spring Cloud Service enterprise tier
//
// Manages a Spring Cloud Application Performance Monitoring resource for New Relic.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/appplatform"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleSpringCloudService, err := appplatform.NewSpringCloudService(ctx, "example", &appplatform.SpringCloudServiceArgs{
//				Name:              pulumi.String("example"),
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//				SkuName:           pulumi.String("E0"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = appplatform.NewSpringCloudNewRelicApplicationPerformanceMonitoring(ctx, "example", &appplatform.SpringCloudNewRelicApplicationPerformanceMonitoringArgs{
//				Name:                 pulumi.String("example"),
//				SpringCloudServiceId: exampleSpringCloudService.ID(),
//				AppName:              pulumi.String("example-app-name"),
//				LicenseKey:           pulumi.String("example-license-key"),
//				AppServerPort:        pulumi.Int(8080),
//				Labels: pulumi.StringMap{
//					"tagName1": pulumi.String("tagValue1"),
//					"tagName2": pulumi.String("tagValue2"),
//				},
//				GloballyEnabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Spring Cloud Application Performance Monitoring resource for New Relic can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:appplatform/springCloudNewRelicApplicationPerformanceMonitoring:SpringCloudNewRelicApplicationPerformanceMonitoring example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.AppPlatform/spring/service1/apms/apm1
// ```
type SpringCloudNewRelicApplicationPerformanceMonitoring struct {
	pulumi.CustomResourceState

	// Specifies whether enable the agent. Defaults to `true`.
	AgentEnabled pulumi.BoolPtrOutput `pulumi:"agentEnabled"`
	// Specifies the application name used to report data to New Relic.
	AppName pulumi.StringOutput `pulumi:"appName"`
	// Specifies the port number to differentiate JVMs for the same app on the same machine.
	AppServerPort pulumi.IntPtrOutput `pulumi:"appServerPort"`
	// Specifies whether enable plain text logging of all data sent to New Relic to the agent logfile. Defaults to `false`.
	AuditModeEnabled pulumi.BoolPtrOutput `pulumi:"auditModeEnabled"`
	// Specifies whether enable the reporting of data separately for each web app. Defaults to `false`.
	AutoAppNamingEnabled pulumi.BoolPtrOutput `pulumi:"autoAppNamingEnabled"`
	// Specifies whether enable the component-based transaction naming. Defaults to `true`.
	AutoTransactionNamingEnabled pulumi.BoolPtrOutput `pulumi:"autoTransactionNamingEnabled"`
	// Specifies whether enable all instrumentation using an `@Trace` annotation. Disabling this causes `@Trace` annotations to be ignored. Defaults to `true`.
	CustomTracingEnabled pulumi.BoolPtrOutput `pulumi:"customTracingEnabled"`
	// Specifies whether the Spring Cloud Application Performance Monitoring resource for Application Insights is enabled globally. Defaults to `false`.
	GloballyEnabled pulumi.BoolPtrOutput `pulumi:"globallyEnabled"`
	// Specifies a mapping of labels to be added to the New Relic application.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Specifies the license key associated with the New Relic account. This key binds your agent's data to your account in New Relic service.
	LicenseKey pulumi.StringOutput `pulumi:"licenseKey"`
	// The name which should be used for this Spring Cloud Application Performance Monitoring resource for New Relic. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Spring Cloud Service. Changing this forces a new resource to be created.
	SpringCloudServiceId pulumi.StringOutput `pulumi:"springCloudServiceId"`
}

// NewSpringCloudNewRelicApplicationPerformanceMonitoring registers a new resource with the given unique name, arguments, and options.
func NewSpringCloudNewRelicApplicationPerformanceMonitoring(ctx *pulumi.Context,
	name string, args *SpringCloudNewRelicApplicationPerformanceMonitoringArgs, opts ...pulumi.ResourceOption) (*SpringCloudNewRelicApplicationPerformanceMonitoring, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppName == nil {
		return nil, errors.New("invalid value for required argument 'AppName'")
	}
	if args.LicenseKey == nil {
		return nil, errors.New("invalid value for required argument 'LicenseKey'")
	}
	if args.SpringCloudServiceId == nil {
		return nil, errors.New("invalid value for required argument 'SpringCloudServiceId'")
	}
	if args.LicenseKey != nil {
		args.LicenseKey = pulumi.ToSecret(args.LicenseKey).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"licenseKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SpringCloudNewRelicApplicationPerformanceMonitoring
	err := ctx.RegisterResource("azure:appplatform/springCloudNewRelicApplicationPerformanceMonitoring:SpringCloudNewRelicApplicationPerformanceMonitoring", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpringCloudNewRelicApplicationPerformanceMonitoring gets an existing SpringCloudNewRelicApplicationPerformanceMonitoring resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpringCloudNewRelicApplicationPerformanceMonitoring(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpringCloudNewRelicApplicationPerformanceMonitoringState, opts ...pulumi.ResourceOption) (*SpringCloudNewRelicApplicationPerformanceMonitoring, error) {
	var resource SpringCloudNewRelicApplicationPerformanceMonitoring
	err := ctx.ReadResource("azure:appplatform/springCloudNewRelicApplicationPerformanceMonitoring:SpringCloudNewRelicApplicationPerformanceMonitoring", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SpringCloudNewRelicApplicationPerformanceMonitoring resources.
type springCloudNewRelicApplicationPerformanceMonitoringState struct {
	// Specifies whether enable the agent. Defaults to `true`.
	AgentEnabled *bool `pulumi:"agentEnabled"`
	// Specifies the application name used to report data to New Relic.
	AppName *string `pulumi:"appName"`
	// Specifies the port number to differentiate JVMs for the same app on the same machine.
	AppServerPort *int `pulumi:"appServerPort"`
	// Specifies whether enable plain text logging of all data sent to New Relic to the agent logfile. Defaults to `false`.
	AuditModeEnabled *bool `pulumi:"auditModeEnabled"`
	// Specifies whether enable the reporting of data separately for each web app. Defaults to `false`.
	AutoAppNamingEnabled *bool `pulumi:"autoAppNamingEnabled"`
	// Specifies whether enable the component-based transaction naming. Defaults to `true`.
	AutoTransactionNamingEnabled *bool `pulumi:"autoTransactionNamingEnabled"`
	// Specifies whether enable all instrumentation using an `@Trace` annotation. Disabling this causes `@Trace` annotations to be ignored. Defaults to `true`.
	CustomTracingEnabled *bool `pulumi:"customTracingEnabled"`
	// Specifies whether the Spring Cloud Application Performance Monitoring resource for Application Insights is enabled globally. Defaults to `false`.
	GloballyEnabled *bool `pulumi:"globallyEnabled"`
	// Specifies a mapping of labels to be added to the New Relic application.
	Labels map[string]string `pulumi:"labels"`
	// Specifies the license key associated with the New Relic account. This key binds your agent's data to your account in New Relic service.
	LicenseKey *string `pulumi:"licenseKey"`
	// The name which should be used for this Spring Cloud Application Performance Monitoring resource for New Relic. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The ID of the Spring Cloud Service. Changing this forces a new resource to be created.
	SpringCloudServiceId *string `pulumi:"springCloudServiceId"`
}

type SpringCloudNewRelicApplicationPerformanceMonitoringState struct {
	// Specifies whether enable the agent. Defaults to `true`.
	AgentEnabled pulumi.BoolPtrInput
	// Specifies the application name used to report data to New Relic.
	AppName pulumi.StringPtrInput
	// Specifies the port number to differentiate JVMs for the same app on the same machine.
	AppServerPort pulumi.IntPtrInput
	// Specifies whether enable plain text logging of all data sent to New Relic to the agent logfile. Defaults to `false`.
	AuditModeEnabled pulumi.BoolPtrInput
	// Specifies whether enable the reporting of data separately for each web app. Defaults to `false`.
	AutoAppNamingEnabled pulumi.BoolPtrInput
	// Specifies whether enable the component-based transaction naming. Defaults to `true`.
	AutoTransactionNamingEnabled pulumi.BoolPtrInput
	// Specifies whether enable all instrumentation using an `@Trace` annotation. Disabling this causes `@Trace` annotations to be ignored. Defaults to `true`.
	CustomTracingEnabled pulumi.BoolPtrInput
	// Specifies whether the Spring Cloud Application Performance Monitoring resource for Application Insights is enabled globally. Defaults to `false`.
	GloballyEnabled pulumi.BoolPtrInput
	// Specifies a mapping of labels to be added to the New Relic application.
	Labels pulumi.StringMapInput
	// Specifies the license key associated with the New Relic account. This key binds your agent's data to your account in New Relic service.
	LicenseKey pulumi.StringPtrInput
	// The name which should be used for this Spring Cloud Application Performance Monitoring resource for New Relic. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The ID of the Spring Cloud Service. Changing this forces a new resource to be created.
	SpringCloudServiceId pulumi.StringPtrInput
}

func (SpringCloudNewRelicApplicationPerformanceMonitoringState) ElementType() reflect.Type {
	return reflect.TypeOf((*springCloudNewRelicApplicationPerformanceMonitoringState)(nil)).Elem()
}

type springCloudNewRelicApplicationPerformanceMonitoringArgs struct {
	// Specifies whether enable the agent. Defaults to `true`.
	AgentEnabled *bool `pulumi:"agentEnabled"`
	// Specifies the application name used to report data to New Relic.
	AppName string `pulumi:"appName"`
	// Specifies the port number to differentiate JVMs for the same app on the same machine.
	AppServerPort *int `pulumi:"appServerPort"`
	// Specifies whether enable plain text logging of all data sent to New Relic to the agent logfile. Defaults to `false`.
	AuditModeEnabled *bool `pulumi:"auditModeEnabled"`
	// Specifies whether enable the reporting of data separately for each web app. Defaults to `false`.
	AutoAppNamingEnabled *bool `pulumi:"autoAppNamingEnabled"`
	// Specifies whether enable the component-based transaction naming. Defaults to `true`.
	AutoTransactionNamingEnabled *bool `pulumi:"autoTransactionNamingEnabled"`
	// Specifies whether enable all instrumentation using an `@Trace` annotation. Disabling this causes `@Trace` annotations to be ignored. Defaults to `true`.
	CustomTracingEnabled *bool `pulumi:"customTracingEnabled"`
	// Specifies whether the Spring Cloud Application Performance Monitoring resource for Application Insights is enabled globally. Defaults to `false`.
	GloballyEnabled *bool `pulumi:"globallyEnabled"`
	// Specifies a mapping of labels to be added to the New Relic application.
	Labels map[string]string `pulumi:"labels"`
	// Specifies the license key associated with the New Relic account. This key binds your agent's data to your account in New Relic service.
	LicenseKey string `pulumi:"licenseKey"`
	// The name which should be used for this Spring Cloud Application Performance Monitoring resource for New Relic. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The ID of the Spring Cloud Service. Changing this forces a new resource to be created.
	SpringCloudServiceId string `pulumi:"springCloudServiceId"`
}

// The set of arguments for constructing a SpringCloudNewRelicApplicationPerformanceMonitoring resource.
type SpringCloudNewRelicApplicationPerformanceMonitoringArgs struct {
	// Specifies whether enable the agent. Defaults to `true`.
	AgentEnabled pulumi.BoolPtrInput
	// Specifies the application name used to report data to New Relic.
	AppName pulumi.StringInput
	// Specifies the port number to differentiate JVMs for the same app on the same machine.
	AppServerPort pulumi.IntPtrInput
	// Specifies whether enable plain text logging of all data sent to New Relic to the agent logfile. Defaults to `false`.
	AuditModeEnabled pulumi.BoolPtrInput
	// Specifies whether enable the reporting of data separately for each web app. Defaults to `false`.
	AutoAppNamingEnabled pulumi.BoolPtrInput
	// Specifies whether enable the component-based transaction naming. Defaults to `true`.
	AutoTransactionNamingEnabled pulumi.BoolPtrInput
	// Specifies whether enable all instrumentation using an `@Trace` annotation. Disabling this causes `@Trace` annotations to be ignored. Defaults to `true`.
	CustomTracingEnabled pulumi.BoolPtrInput
	// Specifies whether the Spring Cloud Application Performance Monitoring resource for Application Insights is enabled globally. Defaults to `false`.
	GloballyEnabled pulumi.BoolPtrInput
	// Specifies a mapping of labels to be added to the New Relic application.
	Labels pulumi.StringMapInput
	// Specifies the license key associated with the New Relic account. This key binds your agent's data to your account in New Relic service.
	LicenseKey pulumi.StringInput
	// The name which should be used for this Spring Cloud Application Performance Monitoring resource for New Relic. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The ID of the Spring Cloud Service. Changing this forces a new resource to be created.
	SpringCloudServiceId pulumi.StringInput
}

func (SpringCloudNewRelicApplicationPerformanceMonitoringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*springCloudNewRelicApplicationPerformanceMonitoringArgs)(nil)).Elem()
}

type SpringCloudNewRelicApplicationPerformanceMonitoringInput interface {
	pulumi.Input

	ToSpringCloudNewRelicApplicationPerformanceMonitoringOutput() SpringCloudNewRelicApplicationPerformanceMonitoringOutput
	ToSpringCloudNewRelicApplicationPerformanceMonitoringOutputWithContext(ctx context.Context) SpringCloudNewRelicApplicationPerformanceMonitoringOutput
}

func (*SpringCloudNewRelicApplicationPerformanceMonitoring) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudNewRelicApplicationPerformanceMonitoring)(nil)).Elem()
}

func (i *SpringCloudNewRelicApplicationPerformanceMonitoring) ToSpringCloudNewRelicApplicationPerformanceMonitoringOutput() SpringCloudNewRelicApplicationPerformanceMonitoringOutput {
	return i.ToSpringCloudNewRelicApplicationPerformanceMonitoringOutputWithContext(context.Background())
}

func (i *SpringCloudNewRelicApplicationPerformanceMonitoring) ToSpringCloudNewRelicApplicationPerformanceMonitoringOutputWithContext(ctx context.Context) SpringCloudNewRelicApplicationPerformanceMonitoringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudNewRelicApplicationPerformanceMonitoringOutput)
}

// SpringCloudNewRelicApplicationPerformanceMonitoringArrayInput is an input type that accepts SpringCloudNewRelicApplicationPerformanceMonitoringArray and SpringCloudNewRelicApplicationPerformanceMonitoringArrayOutput values.
// You can construct a concrete instance of `SpringCloudNewRelicApplicationPerformanceMonitoringArrayInput` via:
//
//	SpringCloudNewRelicApplicationPerformanceMonitoringArray{ SpringCloudNewRelicApplicationPerformanceMonitoringArgs{...} }
type SpringCloudNewRelicApplicationPerformanceMonitoringArrayInput interface {
	pulumi.Input

	ToSpringCloudNewRelicApplicationPerformanceMonitoringArrayOutput() SpringCloudNewRelicApplicationPerformanceMonitoringArrayOutput
	ToSpringCloudNewRelicApplicationPerformanceMonitoringArrayOutputWithContext(context.Context) SpringCloudNewRelicApplicationPerformanceMonitoringArrayOutput
}

type SpringCloudNewRelicApplicationPerformanceMonitoringArray []SpringCloudNewRelicApplicationPerformanceMonitoringInput

func (SpringCloudNewRelicApplicationPerformanceMonitoringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpringCloudNewRelicApplicationPerformanceMonitoring)(nil)).Elem()
}

func (i SpringCloudNewRelicApplicationPerformanceMonitoringArray) ToSpringCloudNewRelicApplicationPerformanceMonitoringArrayOutput() SpringCloudNewRelicApplicationPerformanceMonitoringArrayOutput {
	return i.ToSpringCloudNewRelicApplicationPerformanceMonitoringArrayOutputWithContext(context.Background())
}

func (i SpringCloudNewRelicApplicationPerformanceMonitoringArray) ToSpringCloudNewRelicApplicationPerformanceMonitoringArrayOutputWithContext(ctx context.Context) SpringCloudNewRelicApplicationPerformanceMonitoringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudNewRelicApplicationPerformanceMonitoringArrayOutput)
}

// SpringCloudNewRelicApplicationPerformanceMonitoringMapInput is an input type that accepts SpringCloudNewRelicApplicationPerformanceMonitoringMap and SpringCloudNewRelicApplicationPerformanceMonitoringMapOutput values.
// You can construct a concrete instance of `SpringCloudNewRelicApplicationPerformanceMonitoringMapInput` via:
//
//	SpringCloudNewRelicApplicationPerformanceMonitoringMap{ "key": SpringCloudNewRelicApplicationPerformanceMonitoringArgs{...} }
type SpringCloudNewRelicApplicationPerformanceMonitoringMapInput interface {
	pulumi.Input

	ToSpringCloudNewRelicApplicationPerformanceMonitoringMapOutput() SpringCloudNewRelicApplicationPerformanceMonitoringMapOutput
	ToSpringCloudNewRelicApplicationPerformanceMonitoringMapOutputWithContext(context.Context) SpringCloudNewRelicApplicationPerformanceMonitoringMapOutput
}

type SpringCloudNewRelicApplicationPerformanceMonitoringMap map[string]SpringCloudNewRelicApplicationPerformanceMonitoringInput

func (SpringCloudNewRelicApplicationPerformanceMonitoringMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpringCloudNewRelicApplicationPerformanceMonitoring)(nil)).Elem()
}

func (i SpringCloudNewRelicApplicationPerformanceMonitoringMap) ToSpringCloudNewRelicApplicationPerformanceMonitoringMapOutput() SpringCloudNewRelicApplicationPerformanceMonitoringMapOutput {
	return i.ToSpringCloudNewRelicApplicationPerformanceMonitoringMapOutputWithContext(context.Background())
}

func (i SpringCloudNewRelicApplicationPerformanceMonitoringMap) ToSpringCloudNewRelicApplicationPerformanceMonitoringMapOutputWithContext(ctx context.Context) SpringCloudNewRelicApplicationPerformanceMonitoringMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudNewRelicApplicationPerformanceMonitoringMapOutput)
}

type SpringCloudNewRelicApplicationPerformanceMonitoringOutput struct{ *pulumi.OutputState }

func (SpringCloudNewRelicApplicationPerformanceMonitoringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudNewRelicApplicationPerformanceMonitoring)(nil)).Elem()
}

func (o SpringCloudNewRelicApplicationPerformanceMonitoringOutput) ToSpringCloudNewRelicApplicationPerformanceMonitoringOutput() SpringCloudNewRelicApplicationPerformanceMonitoringOutput {
	return o
}

func (o SpringCloudNewRelicApplicationPerformanceMonitoringOutput) ToSpringCloudNewRelicApplicationPerformanceMonitoringOutputWithContext(ctx context.Context) SpringCloudNewRelicApplicationPerformanceMonitoringOutput {
	return o
}

// Specifies whether enable the agent. Defaults to `true`.
func (o SpringCloudNewRelicApplicationPerformanceMonitoringOutput) AgentEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SpringCloudNewRelicApplicationPerformanceMonitoring) pulumi.BoolPtrOutput {
		return v.AgentEnabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the application name used to report data to New Relic.
func (o SpringCloudNewRelicApplicationPerformanceMonitoringOutput) AppName() pulumi.StringOutput {
	return o.ApplyT(func(v *SpringCloudNewRelicApplicationPerformanceMonitoring) pulumi.StringOutput { return v.AppName }).(pulumi.StringOutput)
}

// Specifies the port number to differentiate JVMs for the same app on the same machine.
func (o SpringCloudNewRelicApplicationPerformanceMonitoringOutput) AppServerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SpringCloudNewRelicApplicationPerformanceMonitoring) pulumi.IntPtrOutput {
		return v.AppServerPort
	}).(pulumi.IntPtrOutput)
}

// Specifies whether enable plain text logging of all data sent to New Relic to the agent logfile. Defaults to `false`.
func (o SpringCloudNewRelicApplicationPerformanceMonitoringOutput) AuditModeEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SpringCloudNewRelicApplicationPerformanceMonitoring) pulumi.BoolPtrOutput {
		return v.AuditModeEnabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies whether enable the reporting of data separately for each web app. Defaults to `false`.
func (o SpringCloudNewRelicApplicationPerformanceMonitoringOutput) AutoAppNamingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SpringCloudNewRelicApplicationPerformanceMonitoring) pulumi.BoolPtrOutput {
		return v.AutoAppNamingEnabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies whether enable the component-based transaction naming. Defaults to `true`.
func (o SpringCloudNewRelicApplicationPerformanceMonitoringOutput) AutoTransactionNamingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SpringCloudNewRelicApplicationPerformanceMonitoring) pulumi.BoolPtrOutput {
		return v.AutoTransactionNamingEnabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies whether enable all instrumentation using an `@Trace` annotation. Disabling this causes `@Trace` annotations to be ignored. Defaults to `true`.
func (o SpringCloudNewRelicApplicationPerformanceMonitoringOutput) CustomTracingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SpringCloudNewRelicApplicationPerformanceMonitoring) pulumi.BoolPtrOutput {
		return v.CustomTracingEnabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies whether the Spring Cloud Application Performance Monitoring resource for Application Insights is enabled globally. Defaults to `false`.
func (o SpringCloudNewRelicApplicationPerformanceMonitoringOutput) GloballyEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SpringCloudNewRelicApplicationPerformanceMonitoring) pulumi.BoolPtrOutput {
		return v.GloballyEnabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies a mapping of labels to be added to the New Relic application.
func (o SpringCloudNewRelicApplicationPerformanceMonitoringOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SpringCloudNewRelicApplicationPerformanceMonitoring) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Specifies the license key associated with the New Relic account. This key binds your agent's data to your account in New Relic service.
func (o SpringCloudNewRelicApplicationPerformanceMonitoringOutput) LicenseKey() pulumi.StringOutput {
	return o.ApplyT(func(v *SpringCloudNewRelicApplicationPerformanceMonitoring) pulumi.StringOutput { return v.LicenseKey }).(pulumi.StringOutput)
}

// The name which should be used for this Spring Cloud Application Performance Monitoring resource for New Relic. Changing this forces a new resource to be created.
func (o SpringCloudNewRelicApplicationPerformanceMonitoringOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SpringCloudNewRelicApplicationPerformanceMonitoring) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Spring Cloud Service. Changing this forces a new resource to be created.
func (o SpringCloudNewRelicApplicationPerformanceMonitoringOutput) SpringCloudServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SpringCloudNewRelicApplicationPerformanceMonitoring) pulumi.StringOutput {
		return v.SpringCloudServiceId
	}).(pulumi.StringOutput)
}

type SpringCloudNewRelicApplicationPerformanceMonitoringArrayOutput struct{ *pulumi.OutputState }

func (SpringCloudNewRelicApplicationPerformanceMonitoringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpringCloudNewRelicApplicationPerformanceMonitoring)(nil)).Elem()
}

func (o SpringCloudNewRelicApplicationPerformanceMonitoringArrayOutput) ToSpringCloudNewRelicApplicationPerformanceMonitoringArrayOutput() SpringCloudNewRelicApplicationPerformanceMonitoringArrayOutput {
	return o
}

func (o SpringCloudNewRelicApplicationPerformanceMonitoringArrayOutput) ToSpringCloudNewRelicApplicationPerformanceMonitoringArrayOutputWithContext(ctx context.Context) SpringCloudNewRelicApplicationPerformanceMonitoringArrayOutput {
	return o
}

func (o SpringCloudNewRelicApplicationPerformanceMonitoringArrayOutput) Index(i pulumi.IntInput) SpringCloudNewRelicApplicationPerformanceMonitoringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SpringCloudNewRelicApplicationPerformanceMonitoring {
		return vs[0].([]*SpringCloudNewRelicApplicationPerformanceMonitoring)[vs[1].(int)]
	}).(SpringCloudNewRelicApplicationPerformanceMonitoringOutput)
}

type SpringCloudNewRelicApplicationPerformanceMonitoringMapOutput struct{ *pulumi.OutputState }

func (SpringCloudNewRelicApplicationPerformanceMonitoringMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpringCloudNewRelicApplicationPerformanceMonitoring)(nil)).Elem()
}

func (o SpringCloudNewRelicApplicationPerformanceMonitoringMapOutput) ToSpringCloudNewRelicApplicationPerformanceMonitoringMapOutput() SpringCloudNewRelicApplicationPerformanceMonitoringMapOutput {
	return o
}

func (o SpringCloudNewRelicApplicationPerformanceMonitoringMapOutput) ToSpringCloudNewRelicApplicationPerformanceMonitoringMapOutputWithContext(ctx context.Context) SpringCloudNewRelicApplicationPerformanceMonitoringMapOutput {
	return o
}

func (o SpringCloudNewRelicApplicationPerformanceMonitoringMapOutput) MapIndex(k pulumi.StringInput) SpringCloudNewRelicApplicationPerformanceMonitoringOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SpringCloudNewRelicApplicationPerformanceMonitoring {
		return vs[0].(map[string]*SpringCloudNewRelicApplicationPerformanceMonitoring)[vs[1].(string)]
	}).(SpringCloudNewRelicApplicationPerformanceMonitoringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudNewRelicApplicationPerformanceMonitoringInput)(nil)).Elem(), &SpringCloudNewRelicApplicationPerformanceMonitoring{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudNewRelicApplicationPerformanceMonitoringArrayInput)(nil)).Elem(), SpringCloudNewRelicApplicationPerformanceMonitoringArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudNewRelicApplicationPerformanceMonitoringMapInput)(nil)).Elem(), SpringCloudNewRelicApplicationPerformanceMonitoringMap{})
	pulumi.RegisterOutputType(SpringCloudNewRelicApplicationPerformanceMonitoringOutput{})
	pulumi.RegisterOutputType(SpringCloudNewRelicApplicationPerformanceMonitoringArrayOutput{})
	pulumi.RegisterOutputType(SpringCloudNewRelicApplicationPerformanceMonitoringMapOutput{})
}
