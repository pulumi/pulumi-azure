// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appplatform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Spring Cloud Builder.
//
// > **NOTE:** This resource is applicable only for Spring Cloud Service with enterprise tier.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/appplatform"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleSpringCloudService, err := appplatform.NewSpringCloudService(ctx, "exampleSpringCloudService", &appplatform.SpringCloudServiceArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				SkuName:           pulumi.String("E0"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = appplatform.NewSpringCloudBuilder(ctx, "exampleSpringCloudBuilder", &appplatform.SpringCloudBuilderArgs{
//				SpringCloudServiceId: exampleSpringCloudService.ID(),
//				BuildPackGroups: appplatform.SpringCloudBuilderBuildPackGroupArray{
//					&appplatform.SpringCloudBuilderBuildPackGroupArgs{
//						Name: pulumi.String("mix"),
//						BuildPackIds: pulumi.StringArray{
//							pulumi.String("tanzu-buildpacks/java-azure"),
//						},
//					},
//				},
//				Stack: &appplatform.SpringCloudBuilderStackArgs{
//					Id:      pulumi.String("io.buildpacks.stacks.bionic"),
//					Version: pulumi.String("base"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Spring Cloud Builders can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:appplatform/springCloudBuilder:SpringCloudBuilder example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resourceGroup1/providers/Microsoft.AppPlatform/spring/service1/buildServices/buildService1/builders/builder1
//
// ```
type SpringCloudBuilder struct {
	pulumi.CustomResourceState

	// One or more `buildPackGroup` blocks as defined below.
	BuildPackGroups SpringCloudBuilderBuildPackGroupArrayOutput `pulumi:"buildPackGroups"`
	// The name which should be used for this Spring Cloud Builder. Changing this forces a new Spring Cloud Builder to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Builder to be created.
	SpringCloudServiceId pulumi.StringOutput `pulumi:"springCloudServiceId"`
	// A `stack` block as defined below.
	Stack SpringCloudBuilderStackOutput `pulumi:"stack"`
}

// NewSpringCloudBuilder registers a new resource with the given unique name, arguments, and options.
func NewSpringCloudBuilder(ctx *pulumi.Context,
	name string, args *SpringCloudBuilderArgs, opts ...pulumi.ResourceOption) (*SpringCloudBuilder, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BuildPackGroups == nil {
		return nil, errors.New("invalid value for required argument 'BuildPackGroups'")
	}
	if args.SpringCloudServiceId == nil {
		return nil, errors.New("invalid value for required argument 'SpringCloudServiceId'")
	}
	if args.Stack == nil {
		return nil, errors.New("invalid value for required argument 'Stack'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SpringCloudBuilder
	err := ctx.RegisterResource("azure:appplatform/springCloudBuilder:SpringCloudBuilder", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpringCloudBuilder gets an existing SpringCloudBuilder resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpringCloudBuilder(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpringCloudBuilderState, opts ...pulumi.ResourceOption) (*SpringCloudBuilder, error) {
	var resource SpringCloudBuilder
	err := ctx.ReadResource("azure:appplatform/springCloudBuilder:SpringCloudBuilder", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SpringCloudBuilder resources.
type springCloudBuilderState struct {
	// One or more `buildPackGroup` blocks as defined below.
	BuildPackGroups []SpringCloudBuilderBuildPackGroup `pulumi:"buildPackGroups"`
	// The name which should be used for this Spring Cloud Builder. Changing this forces a new Spring Cloud Builder to be created.
	Name *string `pulumi:"name"`
	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Builder to be created.
	SpringCloudServiceId *string `pulumi:"springCloudServiceId"`
	// A `stack` block as defined below.
	Stack *SpringCloudBuilderStack `pulumi:"stack"`
}

type SpringCloudBuilderState struct {
	// One or more `buildPackGroup` blocks as defined below.
	BuildPackGroups SpringCloudBuilderBuildPackGroupArrayInput
	// The name which should be used for this Spring Cloud Builder. Changing this forces a new Spring Cloud Builder to be created.
	Name pulumi.StringPtrInput
	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Builder to be created.
	SpringCloudServiceId pulumi.StringPtrInput
	// A `stack` block as defined below.
	Stack SpringCloudBuilderStackPtrInput
}

func (SpringCloudBuilderState) ElementType() reflect.Type {
	return reflect.TypeOf((*springCloudBuilderState)(nil)).Elem()
}

type springCloudBuilderArgs struct {
	// One or more `buildPackGroup` blocks as defined below.
	BuildPackGroups []SpringCloudBuilderBuildPackGroup `pulumi:"buildPackGroups"`
	// The name which should be used for this Spring Cloud Builder. Changing this forces a new Spring Cloud Builder to be created.
	Name *string `pulumi:"name"`
	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Builder to be created.
	SpringCloudServiceId string `pulumi:"springCloudServiceId"`
	// A `stack` block as defined below.
	Stack SpringCloudBuilderStack `pulumi:"stack"`
}

// The set of arguments for constructing a SpringCloudBuilder resource.
type SpringCloudBuilderArgs struct {
	// One or more `buildPackGroup` blocks as defined below.
	BuildPackGroups SpringCloudBuilderBuildPackGroupArrayInput
	// The name which should be used for this Spring Cloud Builder. Changing this forces a new Spring Cloud Builder to be created.
	Name pulumi.StringPtrInput
	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Builder to be created.
	SpringCloudServiceId pulumi.StringInput
	// A `stack` block as defined below.
	Stack SpringCloudBuilderStackInput
}

func (SpringCloudBuilderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*springCloudBuilderArgs)(nil)).Elem()
}

type SpringCloudBuilderInput interface {
	pulumi.Input

	ToSpringCloudBuilderOutput() SpringCloudBuilderOutput
	ToSpringCloudBuilderOutputWithContext(ctx context.Context) SpringCloudBuilderOutput
}

func (*SpringCloudBuilder) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudBuilder)(nil)).Elem()
}

func (i *SpringCloudBuilder) ToSpringCloudBuilderOutput() SpringCloudBuilderOutput {
	return i.ToSpringCloudBuilderOutputWithContext(context.Background())
}

func (i *SpringCloudBuilder) ToSpringCloudBuilderOutputWithContext(ctx context.Context) SpringCloudBuilderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudBuilderOutput)
}

// SpringCloudBuilderArrayInput is an input type that accepts SpringCloudBuilderArray and SpringCloudBuilderArrayOutput values.
// You can construct a concrete instance of `SpringCloudBuilderArrayInput` via:
//
//	SpringCloudBuilderArray{ SpringCloudBuilderArgs{...} }
type SpringCloudBuilderArrayInput interface {
	pulumi.Input

	ToSpringCloudBuilderArrayOutput() SpringCloudBuilderArrayOutput
	ToSpringCloudBuilderArrayOutputWithContext(context.Context) SpringCloudBuilderArrayOutput
}

type SpringCloudBuilderArray []SpringCloudBuilderInput

func (SpringCloudBuilderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpringCloudBuilder)(nil)).Elem()
}

func (i SpringCloudBuilderArray) ToSpringCloudBuilderArrayOutput() SpringCloudBuilderArrayOutput {
	return i.ToSpringCloudBuilderArrayOutputWithContext(context.Background())
}

func (i SpringCloudBuilderArray) ToSpringCloudBuilderArrayOutputWithContext(ctx context.Context) SpringCloudBuilderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudBuilderArrayOutput)
}

// SpringCloudBuilderMapInput is an input type that accepts SpringCloudBuilderMap and SpringCloudBuilderMapOutput values.
// You can construct a concrete instance of `SpringCloudBuilderMapInput` via:
//
//	SpringCloudBuilderMap{ "key": SpringCloudBuilderArgs{...} }
type SpringCloudBuilderMapInput interface {
	pulumi.Input

	ToSpringCloudBuilderMapOutput() SpringCloudBuilderMapOutput
	ToSpringCloudBuilderMapOutputWithContext(context.Context) SpringCloudBuilderMapOutput
}

type SpringCloudBuilderMap map[string]SpringCloudBuilderInput

func (SpringCloudBuilderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpringCloudBuilder)(nil)).Elem()
}

func (i SpringCloudBuilderMap) ToSpringCloudBuilderMapOutput() SpringCloudBuilderMapOutput {
	return i.ToSpringCloudBuilderMapOutputWithContext(context.Background())
}

func (i SpringCloudBuilderMap) ToSpringCloudBuilderMapOutputWithContext(ctx context.Context) SpringCloudBuilderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudBuilderMapOutput)
}

type SpringCloudBuilderOutput struct{ *pulumi.OutputState }

func (SpringCloudBuilderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudBuilder)(nil)).Elem()
}

func (o SpringCloudBuilderOutput) ToSpringCloudBuilderOutput() SpringCloudBuilderOutput {
	return o
}

func (o SpringCloudBuilderOutput) ToSpringCloudBuilderOutputWithContext(ctx context.Context) SpringCloudBuilderOutput {
	return o
}

// One or more `buildPackGroup` blocks as defined below.
func (o SpringCloudBuilderOutput) BuildPackGroups() SpringCloudBuilderBuildPackGroupArrayOutput {
	return o.ApplyT(func(v *SpringCloudBuilder) SpringCloudBuilderBuildPackGroupArrayOutput { return v.BuildPackGroups }).(SpringCloudBuilderBuildPackGroupArrayOutput)
}

// The name which should be used for this Spring Cloud Builder. Changing this forces a new Spring Cloud Builder to be created.
func (o SpringCloudBuilderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SpringCloudBuilder) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Builder to be created.
func (o SpringCloudBuilderOutput) SpringCloudServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SpringCloudBuilder) pulumi.StringOutput { return v.SpringCloudServiceId }).(pulumi.StringOutput)
}

// A `stack` block as defined below.
func (o SpringCloudBuilderOutput) Stack() SpringCloudBuilderStackOutput {
	return o.ApplyT(func(v *SpringCloudBuilder) SpringCloudBuilderStackOutput { return v.Stack }).(SpringCloudBuilderStackOutput)
}

type SpringCloudBuilderArrayOutput struct{ *pulumi.OutputState }

func (SpringCloudBuilderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpringCloudBuilder)(nil)).Elem()
}

func (o SpringCloudBuilderArrayOutput) ToSpringCloudBuilderArrayOutput() SpringCloudBuilderArrayOutput {
	return o
}

func (o SpringCloudBuilderArrayOutput) ToSpringCloudBuilderArrayOutputWithContext(ctx context.Context) SpringCloudBuilderArrayOutput {
	return o
}

func (o SpringCloudBuilderArrayOutput) Index(i pulumi.IntInput) SpringCloudBuilderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SpringCloudBuilder {
		return vs[0].([]*SpringCloudBuilder)[vs[1].(int)]
	}).(SpringCloudBuilderOutput)
}

type SpringCloudBuilderMapOutput struct{ *pulumi.OutputState }

func (SpringCloudBuilderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpringCloudBuilder)(nil)).Elem()
}

func (o SpringCloudBuilderMapOutput) ToSpringCloudBuilderMapOutput() SpringCloudBuilderMapOutput {
	return o
}

func (o SpringCloudBuilderMapOutput) ToSpringCloudBuilderMapOutputWithContext(ctx context.Context) SpringCloudBuilderMapOutput {
	return o
}

func (o SpringCloudBuilderMapOutput) MapIndex(k pulumi.StringInput) SpringCloudBuilderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SpringCloudBuilder {
		return vs[0].(map[string]*SpringCloudBuilder)[vs[1].(string)]
	}).(SpringCloudBuilderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudBuilderInput)(nil)).Elem(), &SpringCloudBuilder{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudBuilderArrayInput)(nil)).Elem(), SpringCloudBuilderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudBuilderMapInput)(nil)).Elem(), SpringCloudBuilderMap{})
	pulumi.RegisterOutputType(SpringCloudBuilderOutput{})
	pulumi.RegisterOutputType(SpringCloudBuilderArrayOutput{})
	pulumi.RegisterOutputType(SpringCloudBuilderMapOutput{})
}
