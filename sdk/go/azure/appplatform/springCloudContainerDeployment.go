// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appplatform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Spring Cloud Container Deployment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/appplatform"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleSpringCloudService, err := appplatform.NewSpringCloudService(ctx, "exampleSpringCloudService", &appplatform.SpringCloudServiceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				SkuName:           pulumi.String("E0"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleSpringCloudApp, err := appplatform.NewSpringCloudApp(ctx, "exampleSpringCloudApp", &appplatform.SpringCloudAppArgs{
//				ResourceGroupName: exampleSpringCloudService.ResourceGroupName,
//				ServiceName:       exampleSpringCloudService.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = appplatform.NewSpringCloudContainerDeployment(ctx, "exampleSpringCloudContainerDeployment", &appplatform.SpringCloudContainerDeploymentArgs{
//				SpringCloudAppId: exampleSpringCloudApp.ID(),
//				InstanceCount:    pulumi.Int(2),
//				Arguments: pulumi.StringArray{
//					pulumi.String("-cp"),
//					pulumi.String("/app/resources:/app/classes:/app/libs/*"),
//					pulumi.String("hello.Application"),
//				},
//				Commands: pulumi.StringArray{
//					pulumi.String("java"),
//				},
//				EnvironmentVariables: pulumi.StringMap{
//					"Foo": pulumi.String("Bar"),
//					"Env": pulumi.String("Staging"),
//				},
//				Server:            pulumi.String("docker.io"),
//				Image:             pulumi.String("springio/gs-spring-boot-docker"),
//				LanguageFramework: pulumi.String("springboot"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Spring Cloud Container Deployments can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:appplatform/springCloudContainerDeployment:SpringCloudContainerDeployment example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.AppPlatform/spring/spring1/apps/app1/deployments/deploy1
//
// ```
type SpringCloudContainerDeployment struct {
	pulumi.CustomResourceState

	// A JSON object that contains the addon configurations of the Spring Cloud Container Deployment.
	AddonJson pulumi.StringOutput `pulumi:"addonJson"`
	// Specifies a list of Spring Cloud Application Performance Monitoring IDs.
	ApplicationPerformanceMonitoringIds pulumi.StringArrayOutput `pulumi:"applicationPerformanceMonitoringIds"`
	// Specifies the arguments to the entrypoint. The docker image's `CMD` is used if not specified.
	Arguments pulumi.StringArrayOutput `pulumi:"arguments"`
	// Specifies the entrypoint array. It will not be executed within a shell. The docker image's `ENTRYPOINT` is used if not specified.
	Commands pulumi.StringArrayOutput `pulumi:"commands"`
	// Specifies the environment variables of the Spring Cloud Deployment as a map of key-value pairs.
	EnvironmentVariables pulumi.StringMapOutput `pulumi:"environmentVariables"`
	// Container image of the custom container. This should be in the form of `<repository>:<tag>` without the server name of the registry.
	Image pulumi.StringOutput `pulumi:"image"`
	// Specifies the required instance count of the Spring Cloud Deployment. Possible Values are between `1` and `500`. Defaults to `1` if not specified.
	InstanceCount pulumi.IntPtrOutput `pulumi:"instanceCount"`
	// Specifies the language framework of the container image. The only possible value is `springboot`.
	LanguageFramework pulumi.StringPtrOutput `pulumi:"languageFramework"`
	// The name which should be used for this Spring Cloud Container Deployment. Changing this forces a new Spring Cloud Container Deployment to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A `quota` block as defined below.
	Quota SpringCloudContainerDeploymentQuotaOutput `pulumi:"quota"`
	// The name of the registry that contains the container image.
	Server pulumi.StringOutput `pulumi:"server"`
	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Container Deployment to be created.
	SpringCloudAppId pulumi.StringOutput `pulumi:"springCloudAppId"`
}

// NewSpringCloudContainerDeployment registers a new resource with the given unique name, arguments, and options.
func NewSpringCloudContainerDeployment(ctx *pulumi.Context,
	name string, args *SpringCloudContainerDeploymentArgs, opts ...pulumi.ResourceOption) (*SpringCloudContainerDeployment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Image == nil {
		return nil, errors.New("invalid value for required argument 'Image'")
	}
	if args.Server == nil {
		return nil, errors.New("invalid value for required argument 'Server'")
	}
	if args.SpringCloudAppId == nil {
		return nil, errors.New("invalid value for required argument 'SpringCloudAppId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SpringCloudContainerDeployment
	err := ctx.RegisterResource("azure:appplatform/springCloudContainerDeployment:SpringCloudContainerDeployment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpringCloudContainerDeployment gets an existing SpringCloudContainerDeployment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpringCloudContainerDeployment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpringCloudContainerDeploymentState, opts ...pulumi.ResourceOption) (*SpringCloudContainerDeployment, error) {
	var resource SpringCloudContainerDeployment
	err := ctx.ReadResource("azure:appplatform/springCloudContainerDeployment:SpringCloudContainerDeployment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SpringCloudContainerDeployment resources.
type springCloudContainerDeploymentState struct {
	// A JSON object that contains the addon configurations of the Spring Cloud Container Deployment.
	AddonJson *string `pulumi:"addonJson"`
	// Specifies a list of Spring Cloud Application Performance Monitoring IDs.
	ApplicationPerformanceMonitoringIds []string `pulumi:"applicationPerformanceMonitoringIds"`
	// Specifies the arguments to the entrypoint. The docker image's `CMD` is used if not specified.
	Arguments []string `pulumi:"arguments"`
	// Specifies the entrypoint array. It will not be executed within a shell. The docker image's `ENTRYPOINT` is used if not specified.
	Commands []string `pulumi:"commands"`
	// Specifies the environment variables of the Spring Cloud Deployment as a map of key-value pairs.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Container image of the custom container. This should be in the form of `<repository>:<tag>` without the server name of the registry.
	Image *string `pulumi:"image"`
	// Specifies the required instance count of the Spring Cloud Deployment. Possible Values are between `1` and `500`. Defaults to `1` if not specified.
	InstanceCount *int `pulumi:"instanceCount"`
	// Specifies the language framework of the container image. The only possible value is `springboot`.
	LanguageFramework *string `pulumi:"languageFramework"`
	// The name which should be used for this Spring Cloud Container Deployment. Changing this forces a new Spring Cloud Container Deployment to be created.
	Name *string `pulumi:"name"`
	// A `quota` block as defined below.
	Quota *SpringCloudContainerDeploymentQuota `pulumi:"quota"`
	// The name of the registry that contains the container image.
	Server *string `pulumi:"server"`
	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Container Deployment to be created.
	SpringCloudAppId *string `pulumi:"springCloudAppId"`
}

type SpringCloudContainerDeploymentState struct {
	// A JSON object that contains the addon configurations of the Spring Cloud Container Deployment.
	AddonJson pulumi.StringPtrInput
	// Specifies a list of Spring Cloud Application Performance Monitoring IDs.
	ApplicationPerformanceMonitoringIds pulumi.StringArrayInput
	// Specifies the arguments to the entrypoint. The docker image's `CMD` is used if not specified.
	Arguments pulumi.StringArrayInput
	// Specifies the entrypoint array. It will not be executed within a shell. The docker image's `ENTRYPOINT` is used if not specified.
	Commands pulumi.StringArrayInput
	// Specifies the environment variables of the Spring Cloud Deployment as a map of key-value pairs.
	EnvironmentVariables pulumi.StringMapInput
	// Container image of the custom container. This should be in the form of `<repository>:<tag>` without the server name of the registry.
	Image pulumi.StringPtrInput
	// Specifies the required instance count of the Spring Cloud Deployment. Possible Values are between `1` and `500`. Defaults to `1` if not specified.
	InstanceCount pulumi.IntPtrInput
	// Specifies the language framework of the container image. The only possible value is `springboot`.
	LanguageFramework pulumi.StringPtrInput
	// The name which should be used for this Spring Cloud Container Deployment. Changing this forces a new Spring Cloud Container Deployment to be created.
	Name pulumi.StringPtrInput
	// A `quota` block as defined below.
	Quota SpringCloudContainerDeploymentQuotaPtrInput
	// The name of the registry that contains the container image.
	Server pulumi.StringPtrInput
	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Container Deployment to be created.
	SpringCloudAppId pulumi.StringPtrInput
}

func (SpringCloudContainerDeploymentState) ElementType() reflect.Type {
	return reflect.TypeOf((*springCloudContainerDeploymentState)(nil)).Elem()
}

type springCloudContainerDeploymentArgs struct {
	// A JSON object that contains the addon configurations of the Spring Cloud Container Deployment.
	AddonJson *string `pulumi:"addonJson"`
	// Specifies a list of Spring Cloud Application Performance Monitoring IDs.
	ApplicationPerformanceMonitoringIds []string `pulumi:"applicationPerformanceMonitoringIds"`
	// Specifies the arguments to the entrypoint. The docker image's `CMD` is used if not specified.
	Arguments []string `pulumi:"arguments"`
	// Specifies the entrypoint array. It will not be executed within a shell. The docker image's `ENTRYPOINT` is used if not specified.
	Commands []string `pulumi:"commands"`
	// Specifies the environment variables of the Spring Cloud Deployment as a map of key-value pairs.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Container image of the custom container. This should be in the form of `<repository>:<tag>` without the server name of the registry.
	Image string `pulumi:"image"`
	// Specifies the required instance count of the Spring Cloud Deployment. Possible Values are between `1` and `500`. Defaults to `1` if not specified.
	InstanceCount *int `pulumi:"instanceCount"`
	// Specifies the language framework of the container image. The only possible value is `springboot`.
	LanguageFramework *string `pulumi:"languageFramework"`
	// The name which should be used for this Spring Cloud Container Deployment. Changing this forces a new Spring Cloud Container Deployment to be created.
	Name *string `pulumi:"name"`
	// A `quota` block as defined below.
	Quota *SpringCloudContainerDeploymentQuota `pulumi:"quota"`
	// The name of the registry that contains the container image.
	Server string `pulumi:"server"`
	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Container Deployment to be created.
	SpringCloudAppId string `pulumi:"springCloudAppId"`
}

// The set of arguments for constructing a SpringCloudContainerDeployment resource.
type SpringCloudContainerDeploymentArgs struct {
	// A JSON object that contains the addon configurations of the Spring Cloud Container Deployment.
	AddonJson pulumi.StringPtrInput
	// Specifies a list of Spring Cloud Application Performance Monitoring IDs.
	ApplicationPerformanceMonitoringIds pulumi.StringArrayInput
	// Specifies the arguments to the entrypoint. The docker image's `CMD` is used if not specified.
	Arguments pulumi.StringArrayInput
	// Specifies the entrypoint array. It will not be executed within a shell. The docker image's `ENTRYPOINT` is used if not specified.
	Commands pulumi.StringArrayInput
	// Specifies the environment variables of the Spring Cloud Deployment as a map of key-value pairs.
	EnvironmentVariables pulumi.StringMapInput
	// Container image of the custom container. This should be in the form of `<repository>:<tag>` without the server name of the registry.
	Image pulumi.StringInput
	// Specifies the required instance count of the Spring Cloud Deployment. Possible Values are between `1` and `500`. Defaults to `1` if not specified.
	InstanceCount pulumi.IntPtrInput
	// Specifies the language framework of the container image. The only possible value is `springboot`.
	LanguageFramework pulumi.StringPtrInput
	// The name which should be used for this Spring Cloud Container Deployment. Changing this forces a new Spring Cloud Container Deployment to be created.
	Name pulumi.StringPtrInput
	// A `quota` block as defined below.
	Quota SpringCloudContainerDeploymentQuotaPtrInput
	// The name of the registry that contains the container image.
	Server pulumi.StringInput
	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Container Deployment to be created.
	SpringCloudAppId pulumi.StringInput
}

func (SpringCloudContainerDeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*springCloudContainerDeploymentArgs)(nil)).Elem()
}

type SpringCloudContainerDeploymentInput interface {
	pulumi.Input

	ToSpringCloudContainerDeploymentOutput() SpringCloudContainerDeploymentOutput
	ToSpringCloudContainerDeploymentOutputWithContext(ctx context.Context) SpringCloudContainerDeploymentOutput
}

func (*SpringCloudContainerDeployment) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudContainerDeployment)(nil)).Elem()
}

func (i *SpringCloudContainerDeployment) ToSpringCloudContainerDeploymentOutput() SpringCloudContainerDeploymentOutput {
	return i.ToSpringCloudContainerDeploymentOutputWithContext(context.Background())
}

func (i *SpringCloudContainerDeployment) ToSpringCloudContainerDeploymentOutputWithContext(ctx context.Context) SpringCloudContainerDeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudContainerDeploymentOutput)
}

// SpringCloudContainerDeploymentArrayInput is an input type that accepts SpringCloudContainerDeploymentArray and SpringCloudContainerDeploymentArrayOutput values.
// You can construct a concrete instance of `SpringCloudContainerDeploymentArrayInput` via:
//
//	SpringCloudContainerDeploymentArray{ SpringCloudContainerDeploymentArgs{...} }
type SpringCloudContainerDeploymentArrayInput interface {
	pulumi.Input

	ToSpringCloudContainerDeploymentArrayOutput() SpringCloudContainerDeploymentArrayOutput
	ToSpringCloudContainerDeploymentArrayOutputWithContext(context.Context) SpringCloudContainerDeploymentArrayOutput
}

type SpringCloudContainerDeploymentArray []SpringCloudContainerDeploymentInput

func (SpringCloudContainerDeploymentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpringCloudContainerDeployment)(nil)).Elem()
}

func (i SpringCloudContainerDeploymentArray) ToSpringCloudContainerDeploymentArrayOutput() SpringCloudContainerDeploymentArrayOutput {
	return i.ToSpringCloudContainerDeploymentArrayOutputWithContext(context.Background())
}

func (i SpringCloudContainerDeploymentArray) ToSpringCloudContainerDeploymentArrayOutputWithContext(ctx context.Context) SpringCloudContainerDeploymentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudContainerDeploymentArrayOutput)
}

// SpringCloudContainerDeploymentMapInput is an input type that accepts SpringCloudContainerDeploymentMap and SpringCloudContainerDeploymentMapOutput values.
// You can construct a concrete instance of `SpringCloudContainerDeploymentMapInput` via:
//
//	SpringCloudContainerDeploymentMap{ "key": SpringCloudContainerDeploymentArgs{...} }
type SpringCloudContainerDeploymentMapInput interface {
	pulumi.Input

	ToSpringCloudContainerDeploymentMapOutput() SpringCloudContainerDeploymentMapOutput
	ToSpringCloudContainerDeploymentMapOutputWithContext(context.Context) SpringCloudContainerDeploymentMapOutput
}

type SpringCloudContainerDeploymentMap map[string]SpringCloudContainerDeploymentInput

func (SpringCloudContainerDeploymentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpringCloudContainerDeployment)(nil)).Elem()
}

func (i SpringCloudContainerDeploymentMap) ToSpringCloudContainerDeploymentMapOutput() SpringCloudContainerDeploymentMapOutput {
	return i.ToSpringCloudContainerDeploymentMapOutputWithContext(context.Background())
}

func (i SpringCloudContainerDeploymentMap) ToSpringCloudContainerDeploymentMapOutputWithContext(ctx context.Context) SpringCloudContainerDeploymentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudContainerDeploymentMapOutput)
}

type SpringCloudContainerDeploymentOutput struct{ *pulumi.OutputState }

func (SpringCloudContainerDeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudContainerDeployment)(nil)).Elem()
}

func (o SpringCloudContainerDeploymentOutput) ToSpringCloudContainerDeploymentOutput() SpringCloudContainerDeploymentOutput {
	return o
}

func (o SpringCloudContainerDeploymentOutput) ToSpringCloudContainerDeploymentOutputWithContext(ctx context.Context) SpringCloudContainerDeploymentOutput {
	return o
}

// A JSON object that contains the addon configurations of the Spring Cloud Container Deployment.
func (o SpringCloudContainerDeploymentOutput) AddonJson() pulumi.StringOutput {
	return o.ApplyT(func(v *SpringCloudContainerDeployment) pulumi.StringOutput { return v.AddonJson }).(pulumi.StringOutput)
}

// Specifies a list of Spring Cloud Application Performance Monitoring IDs.
func (o SpringCloudContainerDeploymentOutput) ApplicationPerformanceMonitoringIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SpringCloudContainerDeployment) pulumi.StringArrayOutput {
		return v.ApplicationPerformanceMonitoringIds
	}).(pulumi.StringArrayOutput)
}

// Specifies the arguments to the entrypoint. The docker image's `CMD` is used if not specified.
func (o SpringCloudContainerDeploymentOutput) Arguments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SpringCloudContainerDeployment) pulumi.StringArrayOutput { return v.Arguments }).(pulumi.StringArrayOutput)
}

// Specifies the entrypoint array. It will not be executed within a shell. The docker image's `ENTRYPOINT` is used if not specified.
func (o SpringCloudContainerDeploymentOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SpringCloudContainerDeployment) pulumi.StringArrayOutput { return v.Commands }).(pulumi.StringArrayOutput)
}

// Specifies the environment variables of the Spring Cloud Deployment as a map of key-value pairs.
func (o SpringCloudContainerDeploymentOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SpringCloudContainerDeployment) pulumi.StringMapOutput { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// Container image of the custom container. This should be in the form of `<repository>:<tag>` without the server name of the registry.
func (o SpringCloudContainerDeploymentOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v *SpringCloudContainerDeployment) pulumi.StringOutput { return v.Image }).(pulumi.StringOutput)
}

// Specifies the required instance count of the Spring Cloud Deployment. Possible Values are between `1` and `500`. Defaults to `1` if not specified.
func (o SpringCloudContainerDeploymentOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SpringCloudContainerDeployment) pulumi.IntPtrOutput { return v.InstanceCount }).(pulumi.IntPtrOutput)
}

// Specifies the language framework of the container image. The only possible value is `springboot`.
func (o SpringCloudContainerDeploymentOutput) LanguageFramework() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudContainerDeployment) pulumi.StringPtrOutput { return v.LanguageFramework }).(pulumi.StringPtrOutput)
}

// The name which should be used for this Spring Cloud Container Deployment. Changing this forces a new Spring Cloud Container Deployment to be created.
func (o SpringCloudContainerDeploymentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SpringCloudContainerDeployment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A `quota` block as defined below.
func (o SpringCloudContainerDeploymentOutput) Quota() SpringCloudContainerDeploymentQuotaOutput {
	return o.ApplyT(func(v *SpringCloudContainerDeployment) SpringCloudContainerDeploymentQuotaOutput { return v.Quota }).(SpringCloudContainerDeploymentQuotaOutput)
}

// The name of the registry that contains the container image.
func (o SpringCloudContainerDeploymentOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v *SpringCloudContainerDeployment) pulumi.StringOutput { return v.Server }).(pulumi.StringOutput)
}

// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Container Deployment to be created.
func (o SpringCloudContainerDeploymentOutput) SpringCloudAppId() pulumi.StringOutput {
	return o.ApplyT(func(v *SpringCloudContainerDeployment) pulumi.StringOutput { return v.SpringCloudAppId }).(pulumi.StringOutput)
}

type SpringCloudContainerDeploymentArrayOutput struct{ *pulumi.OutputState }

func (SpringCloudContainerDeploymentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpringCloudContainerDeployment)(nil)).Elem()
}

func (o SpringCloudContainerDeploymentArrayOutput) ToSpringCloudContainerDeploymentArrayOutput() SpringCloudContainerDeploymentArrayOutput {
	return o
}

func (o SpringCloudContainerDeploymentArrayOutput) ToSpringCloudContainerDeploymentArrayOutputWithContext(ctx context.Context) SpringCloudContainerDeploymentArrayOutput {
	return o
}

func (o SpringCloudContainerDeploymentArrayOutput) Index(i pulumi.IntInput) SpringCloudContainerDeploymentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SpringCloudContainerDeployment {
		return vs[0].([]*SpringCloudContainerDeployment)[vs[1].(int)]
	}).(SpringCloudContainerDeploymentOutput)
}

type SpringCloudContainerDeploymentMapOutput struct{ *pulumi.OutputState }

func (SpringCloudContainerDeploymentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpringCloudContainerDeployment)(nil)).Elem()
}

func (o SpringCloudContainerDeploymentMapOutput) ToSpringCloudContainerDeploymentMapOutput() SpringCloudContainerDeploymentMapOutput {
	return o
}

func (o SpringCloudContainerDeploymentMapOutput) ToSpringCloudContainerDeploymentMapOutputWithContext(ctx context.Context) SpringCloudContainerDeploymentMapOutput {
	return o
}

func (o SpringCloudContainerDeploymentMapOutput) MapIndex(k pulumi.StringInput) SpringCloudContainerDeploymentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SpringCloudContainerDeployment {
		return vs[0].(map[string]*SpringCloudContainerDeployment)[vs[1].(string)]
	}).(SpringCloudContainerDeploymentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudContainerDeploymentInput)(nil)).Elem(), &SpringCloudContainerDeployment{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudContainerDeploymentArrayInput)(nil)).Elem(), SpringCloudContainerDeploymentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudContainerDeploymentMapInput)(nil)).Elem(), SpringCloudContainerDeploymentMap{})
	pulumi.RegisterOutputType(SpringCloudContainerDeploymentOutput{})
	pulumi.RegisterOutputType(SpringCloudContainerDeploymentArrayOutput{})
	pulumi.RegisterOutputType(SpringCloudContainerDeploymentMapOutput{})
}
