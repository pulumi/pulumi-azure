// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appplatform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a Spring Cloud API Portal.
//
// > **NOTE:** This resource is applicable only for Spring Cloud Service with enterprise tier.
//
// ## Import
//
// Spring Cloud API Portals can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:appplatform/springCloudApiPortal:SpringCloudApiPortal example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.AppPlatform/spring/service1/apiPortals/apiPortal1
//
// ```
type SpringCloudApiPortal struct {
	pulumi.CustomResourceState

	// Specifies a list of Spring Cloud Gateway.
	GatewayIds pulumi.StringArrayOutput `pulumi:"gatewayIds"`
	// is only https is allowed?
	HttpsOnlyEnabled pulumi.BoolPtrOutput `pulumi:"httpsOnlyEnabled"`
	// Specifies the required instance count of the Spring Cloud API Portal. Possible Values are between `1` and `500`. Defaults to `1` if not specified.
	InstanceCount pulumi.IntPtrOutput `pulumi:"instanceCount"`
	// The name which should be used for this Spring Cloud API Portal. Changing this forces a new Spring Cloud API Portal to be created. The only possible value is `default`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Is the public network access enabled?
	PublicNetworkAccessEnabled pulumi.BoolPtrOutput `pulumi:"publicNetworkAccessEnabled"`
	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud API Portal to be created.
	SpringCloudServiceId pulumi.StringOutput `pulumi:"springCloudServiceId"`
	// A `sso` block as defined below.
	Sso SpringCloudApiPortalSsoPtrOutput `pulumi:"sso"`
	// TODO.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewSpringCloudApiPortal registers a new resource with the given unique name, arguments, and options.
func NewSpringCloudApiPortal(ctx *pulumi.Context,
	name string, args *SpringCloudApiPortalArgs, opts ...pulumi.ResourceOption) (*SpringCloudApiPortal, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SpringCloudServiceId == nil {
		return nil, errors.New("invalid value for required argument 'SpringCloudServiceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SpringCloudApiPortal
	err := ctx.RegisterResource("azure:appplatform/springCloudApiPortal:SpringCloudApiPortal", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpringCloudApiPortal gets an existing SpringCloudApiPortal resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpringCloudApiPortal(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpringCloudApiPortalState, opts ...pulumi.ResourceOption) (*SpringCloudApiPortal, error) {
	var resource SpringCloudApiPortal
	err := ctx.ReadResource("azure:appplatform/springCloudApiPortal:SpringCloudApiPortal", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SpringCloudApiPortal resources.
type springCloudApiPortalState struct {
	// Specifies a list of Spring Cloud Gateway.
	GatewayIds []string `pulumi:"gatewayIds"`
	// is only https is allowed?
	HttpsOnlyEnabled *bool `pulumi:"httpsOnlyEnabled"`
	// Specifies the required instance count of the Spring Cloud API Portal. Possible Values are between `1` and `500`. Defaults to `1` if not specified.
	InstanceCount *int `pulumi:"instanceCount"`
	// The name which should be used for this Spring Cloud API Portal. Changing this forces a new Spring Cloud API Portal to be created. The only possible value is `default`.
	Name *string `pulumi:"name"`
	// Is the public network access enabled?
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud API Portal to be created.
	SpringCloudServiceId *string `pulumi:"springCloudServiceId"`
	// A `sso` block as defined below.
	Sso *SpringCloudApiPortalSso `pulumi:"sso"`
	// TODO.
	Url *string `pulumi:"url"`
}

type SpringCloudApiPortalState struct {
	// Specifies a list of Spring Cloud Gateway.
	GatewayIds pulumi.StringArrayInput
	// is only https is allowed?
	HttpsOnlyEnabled pulumi.BoolPtrInput
	// Specifies the required instance count of the Spring Cloud API Portal. Possible Values are between `1` and `500`. Defaults to `1` if not specified.
	InstanceCount pulumi.IntPtrInput
	// The name which should be used for this Spring Cloud API Portal. Changing this forces a new Spring Cloud API Portal to be created. The only possible value is `default`.
	Name pulumi.StringPtrInput
	// Is the public network access enabled?
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud API Portal to be created.
	SpringCloudServiceId pulumi.StringPtrInput
	// A `sso` block as defined below.
	Sso SpringCloudApiPortalSsoPtrInput
	// TODO.
	Url pulumi.StringPtrInput
}

func (SpringCloudApiPortalState) ElementType() reflect.Type {
	return reflect.TypeOf((*springCloudApiPortalState)(nil)).Elem()
}

type springCloudApiPortalArgs struct {
	// Specifies a list of Spring Cloud Gateway.
	GatewayIds []string `pulumi:"gatewayIds"`
	// is only https is allowed?
	HttpsOnlyEnabled *bool `pulumi:"httpsOnlyEnabled"`
	// Specifies the required instance count of the Spring Cloud API Portal. Possible Values are between `1` and `500`. Defaults to `1` if not specified.
	InstanceCount *int `pulumi:"instanceCount"`
	// The name which should be used for this Spring Cloud API Portal. Changing this forces a new Spring Cloud API Portal to be created. The only possible value is `default`.
	Name *string `pulumi:"name"`
	// Is the public network access enabled?
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud API Portal to be created.
	SpringCloudServiceId string `pulumi:"springCloudServiceId"`
	// A `sso` block as defined below.
	Sso *SpringCloudApiPortalSso `pulumi:"sso"`
}

// The set of arguments for constructing a SpringCloudApiPortal resource.
type SpringCloudApiPortalArgs struct {
	// Specifies a list of Spring Cloud Gateway.
	GatewayIds pulumi.StringArrayInput
	// is only https is allowed?
	HttpsOnlyEnabled pulumi.BoolPtrInput
	// Specifies the required instance count of the Spring Cloud API Portal. Possible Values are between `1` and `500`. Defaults to `1` if not specified.
	InstanceCount pulumi.IntPtrInput
	// The name which should be used for this Spring Cloud API Portal. Changing this forces a new Spring Cloud API Portal to be created. The only possible value is `default`.
	Name pulumi.StringPtrInput
	// Is the public network access enabled?
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud API Portal to be created.
	SpringCloudServiceId pulumi.StringInput
	// A `sso` block as defined below.
	Sso SpringCloudApiPortalSsoPtrInput
}

func (SpringCloudApiPortalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*springCloudApiPortalArgs)(nil)).Elem()
}

type SpringCloudApiPortalInput interface {
	pulumi.Input

	ToSpringCloudApiPortalOutput() SpringCloudApiPortalOutput
	ToSpringCloudApiPortalOutputWithContext(ctx context.Context) SpringCloudApiPortalOutput
}

func (*SpringCloudApiPortal) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudApiPortal)(nil)).Elem()
}

func (i *SpringCloudApiPortal) ToSpringCloudApiPortalOutput() SpringCloudApiPortalOutput {
	return i.ToSpringCloudApiPortalOutputWithContext(context.Background())
}

func (i *SpringCloudApiPortal) ToSpringCloudApiPortalOutputWithContext(ctx context.Context) SpringCloudApiPortalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudApiPortalOutput)
}

func (i *SpringCloudApiPortal) ToOutput(ctx context.Context) pulumix.Output[*SpringCloudApiPortal] {
	return pulumix.Output[*SpringCloudApiPortal]{
		OutputState: i.ToSpringCloudApiPortalOutputWithContext(ctx).OutputState,
	}
}

// SpringCloudApiPortalArrayInput is an input type that accepts SpringCloudApiPortalArray and SpringCloudApiPortalArrayOutput values.
// You can construct a concrete instance of `SpringCloudApiPortalArrayInput` via:
//
//	SpringCloudApiPortalArray{ SpringCloudApiPortalArgs{...} }
type SpringCloudApiPortalArrayInput interface {
	pulumi.Input

	ToSpringCloudApiPortalArrayOutput() SpringCloudApiPortalArrayOutput
	ToSpringCloudApiPortalArrayOutputWithContext(context.Context) SpringCloudApiPortalArrayOutput
}

type SpringCloudApiPortalArray []SpringCloudApiPortalInput

func (SpringCloudApiPortalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpringCloudApiPortal)(nil)).Elem()
}

func (i SpringCloudApiPortalArray) ToSpringCloudApiPortalArrayOutput() SpringCloudApiPortalArrayOutput {
	return i.ToSpringCloudApiPortalArrayOutputWithContext(context.Background())
}

func (i SpringCloudApiPortalArray) ToSpringCloudApiPortalArrayOutputWithContext(ctx context.Context) SpringCloudApiPortalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudApiPortalArrayOutput)
}

func (i SpringCloudApiPortalArray) ToOutput(ctx context.Context) pulumix.Output[[]*SpringCloudApiPortal] {
	return pulumix.Output[[]*SpringCloudApiPortal]{
		OutputState: i.ToSpringCloudApiPortalArrayOutputWithContext(ctx).OutputState,
	}
}

// SpringCloudApiPortalMapInput is an input type that accepts SpringCloudApiPortalMap and SpringCloudApiPortalMapOutput values.
// You can construct a concrete instance of `SpringCloudApiPortalMapInput` via:
//
//	SpringCloudApiPortalMap{ "key": SpringCloudApiPortalArgs{...} }
type SpringCloudApiPortalMapInput interface {
	pulumi.Input

	ToSpringCloudApiPortalMapOutput() SpringCloudApiPortalMapOutput
	ToSpringCloudApiPortalMapOutputWithContext(context.Context) SpringCloudApiPortalMapOutput
}

type SpringCloudApiPortalMap map[string]SpringCloudApiPortalInput

func (SpringCloudApiPortalMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpringCloudApiPortal)(nil)).Elem()
}

func (i SpringCloudApiPortalMap) ToSpringCloudApiPortalMapOutput() SpringCloudApiPortalMapOutput {
	return i.ToSpringCloudApiPortalMapOutputWithContext(context.Background())
}

func (i SpringCloudApiPortalMap) ToSpringCloudApiPortalMapOutputWithContext(ctx context.Context) SpringCloudApiPortalMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudApiPortalMapOutput)
}

func (i SpringCloudApiPortalMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SpringCloudApiPortal] {
	return pulumix.Output[map[string]*SpringCloudApiPortal]{
		OutputState: i.ToSpringCloudApiPortalMapOutputWithContext(ctx).OutputState,
	}
}

type SpringCloudApiPortalOutput struct{ *pulumi.OutputState }

func (SpringCloudApiPortalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudApiPortal)(nil)).Elem()
}

func (o SpringCloudApiPortalOutput) ToSpringCloudApiPortalOutput() SpringCloudApiPortalOutput {
	return o
}

func (o SpringCloudApiPortalOutput) ToSpringCloudApiPortalOutputWithContext(ctx context.Context) SpringCloudApiPortalOutput {
	return o
}

func (o SpringCloudApiPortalOutput) ToOutput(ctx context.Context) pulumix.Output[*SpringCloudApiPortal] {
	return pulumix.Output[*SpringCloudApiPortal]{
		OutputState: o.OutputState,
	}
}

// Specifies a list of Spring Cloud Gateway.
func (o SpringCloudApiPortalOutput) GatewayIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SpringCloudApiPortal) pulumi.StringArrayOutput { return v.GatewayIds }).(pulumi.StringArrayOutput)
}

// is only https is allowed?
func (o SpringCloudApiPortalOutput) HttpsOnlyEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SpringCloudApiPortal) pulumi.BoolPtrOutput { return v.HttpsOnlyEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the required instance count of the Spring Cloud API Portal. Possible Values are between `1` and `500`. Defaults to `1` if not specified.
func (o SpringCloudApiPortalOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SpringCloudApiPortal) pulumi.IntPtrOutput { return v.InstanceCount }).(pulumi.IntPtrOutput)
}

// The name which should be used for this Spring Cloud API Portal. Changing this forces a new Spring Cloud API Portal to be created. The only possible value is `default`.
func (o SpringCloudApiPortalOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SpringCloudApiPortal) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Is the public network access enabled?
func (o SpringCloudApiPortalOutput) PublicNetworkAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SpringCloudApiPortal) pulumi.BoolPtrOutput { return v.PublicNetworkAccessEnabled }).(pulumi.BoolPtrOutput)
}

// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud API Portal to be created.
func (o SpringCloudApiPortalOutput) SpringCloudServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SpringCloudApiPortal) pulumi.StringOutput { return v.SpringCloudServiceId }).(pulumi.StringOutput)
}

// A `sso` block as defined below.
func (o SpringCloudApiPortalOutput) Sso() SpringCloudApiPortalSsoPtrOutput {
	return o.ApplyT(func(v *SpringCloudApiPortal) SpringCloudApiPortalSsoPtrOutput { return v.Sso }).(SpringCloudApiPortalSsoPtrOutput)
}

// TODO.
func (o SpringCloudApiPortalOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *SpringCloudApiPortal) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type SpringCloudApiPortalArrayOutput struct{ *pulumi.OutputState }

func (SpringCloudApiPortalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpringCloudApiPortal)(nil)).Elem()
}

func (o SpringCloudApiPortalArrayOutput) ToSpringCloudApiPortalArrayOutput() SpringCloudApiPortalArrayOutput {
	return o
}

func (o SpringCloudApiPortalArrayOutput) ToSpringCloudApiPortalArrayOutputWithContext(ctx context.Context) SpringCloudApiPortalArrayOutput {
	return o
}

func (o SpringCloudApiPortalArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SpringCloudApiPortal] {
	return pulumix.Output[[]*SpringCloudApiPortal]{
		OutputState: o.OutputState,
	}
}

func (o SpringCloudApiPortalArrayOutput) Index(i pulumi.IntInput) SpringCloudApiPortalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SpringCloudApiPortal {
		return vs[0].([]*SpringCloudApiPortal)[vs[1].(int)]
	}).(SpringCloudApiPortalOutput)
}

type SpringCloudApiPortalMapOutput struct{ *pulumi.OutputState }

func (SpringCloudApiPortalMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpringCloudApiPortal)(nil)).Elem()
}

func (o SpringCloudApiPortalMapOutput) ToSpringCloudApiPortalMapOutput() SpringCloudApiPortalMapOutput {
	return o
}

func (o SpringCloudApiPortalMapOutput) ToSpringCloudApiPortalMapOutputWithContext(ctx context.Context) SpringCloudApiPortalMapOutput {
	return o
}

func (o SpringCloudApiPortalMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SpringCloudApiPortal] {
	return pulumix.Output[map[string]*SpringCloudApiPortal]{
		OutputState: o.OutputState,
	}
}

func (o SpringCloudApiPortalMapOutput) MapIndex(k pulumi.StringInput) SpringCloudApiPortalOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SpringCloudApiPortal {
		return vs[0].(map[string]*SpringCloudApiPortal)[vs[1].(string)]
	}).(SpringCloudApiPortalOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudApiPortalInput)(nil)).Elem(), &SpringCloudApiPortal{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudApiPortalArrayInput)(nil)).Elem(), SpringCloudApiPortalArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudApiPortalMapInput)(nil)).Elem(), SpringCloudApiPortalMap{})
	pulumi.RegisterOutputType(SpringCloudApiPortalOutput{})
	pulumi.RegisterOutputType(SpringCloudApiPortalArrayOutput{})
	pulumi.RegisterOutputType(SpringCloudApiPortalMapOutput{})
}
