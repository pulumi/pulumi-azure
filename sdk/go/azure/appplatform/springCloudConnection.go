// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appplatform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a service connector for spring cloud app.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/appplatform"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/cosmosdb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := cosmosdb.NewAccount(ctx, "exampleAccount", &cosmosdb.AccountArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				OfferType:         pulumi.String("Standard"),
//				Kind:              pulumi.String("GlobalDocumentDB"),
//				ConsistencyPolicy: &cosmosdb.AccountConsistencyPolicyArgs{
//					ConsistencyLevel:     pulumi.String("BoundedStaleness"),
//					MaxIntervalInSeconds: pulumi.Int(10),
//					MaxStalenessPrefix:   pulumi.Int(200),
//				},
//				GeoLocations: cosmosdb.AccountGeoLocationArray{
//					&cosmosdb.AccountGeoLocationArgs{
//						Location:         exampleResourceGroup.Location,
//						FailoverPriority: pulumi.Int(0),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleSqlDatabase, err := cosmosdb.NewSqlDatabase(ctx, "exampleSqlDatabase", &cosmosdb.SqlDatabaseArgs{
//				ResourceGroupName: exampleAccount.ResourceGroupName,
//				AccountName:       exampleAccount.Name,
//				Throughput:        pulumi.Int(400),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cosmosdb.NewSqlContainer(ctx, "exampleSqlContainer", &cosmosdb.SqlContainerArgs{
//				ResourceGroupName: exampleAccount.ResourceGroupName,
//				AccountName:       exampleAccount.Name,
//				DatabaseName:      exampleSqlDatabase.Name,
//				PartitionKeyPath:  pulumi.String("/definition"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleSpringCloudService, err := appplatform.NewSpringCloudService(ctx, "exampleSpringCloudService", &appplatform.SpringCloudServiceArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//			})
//			if err != nil {
//				return err
//			}
//			exampleSpringCloudApp, err := appplatform.NewSpringCloudApp(ctx, "exampleSpringCloudApp", &appplatform.SpringCloudAppArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				ServiceName:       exampleSpringCloudService.Name,
//				Identity: &appplatform.SpringCloudAppIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleSpringCloudJavaDeployment, err := appplatform.NewSpringCloudJavaDeployment(ctx, "exampleSpringCloudJavaDeployment", &appplatform.SpringCloudJavaDeploymentArgs{
//				SpringCloudAppId: exampleSpringCloudApp.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = appplatform.NewSpringCloudConnection(ctx, "exampleSpringCloudConnection", &appplatform.SpringCloudConnectionArgs{
//				SpringCloudId:    exampleSpringCloudJavaDeployment.ID(),
//				TargetResourceId: exampleSqlDatabase.ID(),
//				Authentication: &appplatform.SpringCloudConnectionAuthenticationArgs{
//					Type: pulumi.String("systemAssignedIdentity"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Service Connector for spring cloud can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:appplatform/springCloudConnection:SpringCloudConnection example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.AppPlatform/Spring/springcloud/apps/springcloudapp/deployments/deployment/providers/Microsoft.ServiceLinker/linkers/serviceconnector1
//
// ```
type SpringCloudConnection struct {
	pulumi.CustomResourceState

	// The authentication info. An `authentication` block as defined below.
	Authentication SpringCloudConnectionAuthenticationOutput `pulumi:"authentication"`
	// The application client type. Possible values are `none`, `dotnet`, `java`, `python`, `go`, `php`, `ruby`, `django`, `nodejs` and `springBoot`. Defaults to `none`.
	ClientType pulumi.StringPtrOutput `pulumi:"clientType"`
	// The name of the service connection. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// An option to store secret value in secure place. An `secretStore` block as defined below.
	SecretStore SpringCloudConnectionSecretStorePtrOutput `pulumi:"secretStore"`
	// The ID of the data source spring cloud. Changing this forces a new resource to be created.
	SpringCloudId pulumi.StringOutput `pulumi:"springCloudId"`
	// The ID of the target resource. Changing this forces a new resource to be created. Possible target resources are `Postgres`, `PostgresFlexible`, `Mysql`, `Sql`, `Redis`, `RedisEnterprise`, `CosmosCassandra`, `CosmosGremlin`, `CosmosMongo`, `CosmosSql`, `CosmosTable`, `StorageBlob`, `StorageQueue`, `StorageFile`, `StorageTable`, `AppConfig`, `EventHub`, `ServiceBus`, `SignalR`, `WebPubSub`, `ConfluentKafka`. The integration guide can be found [here](https://learn.microsoft.com/en-us/azure/service-connector/how-to-integrate-postgres).
	TargetResourceId pulumi.StringOutput `pulumi:"targetResourceId"`
	// The type of the VNet solution. Possible values are `serviceEndpoint`, `privateLink`.
	VnetSolution pulumi.StringPtrOutput `pulumi:"vnetSolution"`
}

// NewSpringCloudConnection registers a new resource with the given unique name, arguments, and options.
func NewSpringCloudConnection(ctx *pulumi.Context,
	name string, args *SpringCloudConnectionArgs, opts ...pulumi.ResourceOption) (*SpringCloudConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Authentication == nil {
		return nil, errors.New("invalid value for required argument 'Authentication'")
	}
	if args.SpringCloudId == nil {
		return nil, errors.New("invalid value for required argument 'SpringCloudId'")
	}
	if args.TargetResourceId == nil {
		return nil, errors.New("invalid value for required argument 'TargetResourceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SpringCloudConnection
	err := ctx.RegisterResource("azure:appplatform/springCloudConnection:SpringCloudConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpringCloudConnection gets an existing SpringCloudConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpringCloudConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpringCloudConnectionState, opts ...pulumi.ResourceOption) (*SpringCloudConnection, error) {
	var resource SpringCloudConnection
	err := ctx.ReadResource("azure:appplatform/springCloudConnection:SpringCloudConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SpringCloudConnection resources.
type springCloudConnectionState struct {
	// The authentication info. An `authentication` block as defined below.
	Authentication *SpringCloudConnectionAuthentication `pulumi:"authentication"`
	// The application client type. Possible values are `none`, `dotnet`, `java`, `python`, `go`, `php`, `ruby`, `django`, `nodejs` and `springBoot`. Defaults to `none`.
	ClientType *string `pulumi:"clientType"`
	// The name of the service connection. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// An option to store secret value in secure place. An `secretStore` block as defined below.
	SecretStore *SpringCloudConnectionSecretStore `pulumi:"secretStore"`
	// The ID of the data source spring cloud. Changing this forces a new resource to be created.
	SpringCloudId *string `pulumi:"springCloudId"`
	// The ID of the target resource. Changing this forces a new resource to be created. Possible target resources are `Postgres`, `PostgresFlexible`, `Mysql`, `Sql`, `Redis`, `RedisEnterprise`, `CosmosCassandra`, `CosmosGremlin`, `CosmosMongo`, `CosmosSql`, `CosmosTable`, `StorageBlob`, `StorageQueue`, `StorageFile`, `StorageTable`, `AppConfig`, `EventHub`, `ServiceBus`, `SignalR`, `WebPubSub`, `ConfluentKafka`. The integration guide can be found [here](https://learn.microsoft.com/en-us/azure/service-connector/how-to-integrate-postgres).
	TargetResourceId *string `pulumi:"targetResourceId"`
	// The type of the VNet solution. Possible values are `serviceEndpoint`, `privateLink`.
	VnetSolution *string `pulumi:"vnetSolution"`
}

type SpringCloudConnectionState struct {
	// The authentication info. An `authentication` block as defined below.
	Authentication SpringCloudConnectionAuthenticationPtrInput
	// The application client type. Possible values are `none`, `dotnet`, `java`, `python`, `go`, `php`, `ruby`, `django`, `nodejs` and `springBoot`. Defaults to `none`.
	ClientType pulumi.StringPtrInput
	// The name of the service connection. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// An option to store secret value in secure place. An `secretStore` block as defined below.
	SecretStore SpringCloudConnectionSecretStorePtrInput
	// The ID of the data source spring cloud. Changing this forces a new resource to be created.
	SpringCloudId pulumi.StringPtrInput
	// The ID of the target resource. Changing this forces a new resource to be created. Possible target resources are `Postgres`, `PostgresFlexible`, `Mysql`, `Sql`, `Redis`, `RedisEnterprise`, `CosmosCassandra`, `CosmosGremlin`, `CosmosMongo`, `CosmosSql`, `CosmosTable`, `StorageBlob`, `StorageQueue`, `StorageFile`, `StorageTable`, `AppConfig`, `EventHub`, `ServiceBus`, `SignalR`, `WebPubSub`, `ConfluentKafka`. The integration guide can be found [here](https://learn.microsoft.com/en-us/azure/service-connector/how-to-integrate-postgres).
	TargetResourceId pulumi.StringPtrInput
	// The type of the VNet solution. Possible values are `serviceEndpoint`, `privateLink`.
	VnetSolution pulumi.StringPtrInput
}

func (SpringCloudConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*springCloudConnectionState)(nil)).Elem()
}

type springCloudConnectionArgs struct {
	// The authentication info. An `authentication` block as defined below.
	Authentication SpringCloudConnectionAuthentication `pulumi:"authentication"`
	// The application client type. Possible values are `none`, `dotnet`, `java`, `python`, `go`, `php`, `ruby`, `django`, `nodejs` and `springBoot`. Defaults to `none`.
	ClientType *string `pulumi:"clientType"`
	// The name of the service connection. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// An option to store secret value in secure place. An `secretStore` block as defined below.
	SecretStore *SpringCloudConnectionSecretStore `pulumi:"secretStore"`
	// The ID of the data source spring cloud. Changing this forces a new resource to be created.
	SpringCloudId string `pulumi:"springCloudId"`
	// The ID of the target resource. Changing this forces a new resource to be created. Possible target resources are `Postgres`, `PostgresFlexible`, `Mysql`, `Sql`, `Redis`, `RedisEnterprise`, `CosmosCassandra`, `CosmosGremlin`, `CosmosMongo`, `CosmosSql`, `CosmosTable`, `StorageBlob`, `StorageQueue`, `StorageFile`, `StorageTable`, `AppConfig`, `EventHub`, `ServiceBus`, `SignalR`, `WebPubSub`, `ConfluentKafka`. The integration guide can be found [here](https://learn.microsoft.com/en-us/azure/service-connector/how-to-integrate-postgres).
	TargetResourceId string `pulumi:"targetResourceId"`
	// The type of the VNet solution. Possible values are `serviceEndpoint`, `privateLink`.
	VnetSolution *string `pulumi:"vnetSolution"`
}

// The set of arguments for constructing a SpringCloudConnection resource.
type SpringCloudConnectionArgs struct {
	// The authentication info. An `authentication` block as defined below.
	Authentication SpringCloudConnectionAuthenticationInput
	// The application client type. Possible values are `none`, `dotnet`, `java`, `python`, `go`, `php`, `ruby`, `django`, `nodejs` and `springBoot`. Defaults to `none`.
	ClientType pulumi.StringPtrInput
	// The name of the service connection. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// An option to store secret value in secure place. An `secretStore` block as defined below.
	SecretStore SpringCloudConnectionSecretStorePtrInput
	// The ID of the data source spring cloud. Changing this forces a new resource to be created.
	SpringCloudId pulumi.StringInput
	// The ID of the target resource. Changing this forces a new resource to be created. Possible target resources are `Postgres`, `PostgresFlexible`, `Mysql`, `Sql`, `Redis`, `RedisEnterprise`, `CosmosCassandra`, `CosmosGremlin`, `CosmosMongo`, `CosmosSql`, `CosmosTable`, `StorageBlob`, `StorageQueue`, `StorageFile`, `StorageTable`, `AppConfig`, `EventHub`, `ServiceBus`, `SignalR`, `WebPubSub`, `ConfluentKafka`. The integration guide can be found [here](https://learn.microsoft.com/en-us/azure/service-connector/how-to-integrate-postgres).
	TargetResourceId pulumi.StringInput
	// The type of the VNet solution. Possible values are `serviceEndpoint`, `privateLink`.
	VnetSolution pulumi.StringPtrInput
}

func (SpringCloudConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*springCloudConnectionArgs)(nil)).Elem()
}

type SpringCloudConnectionInput interface {
	pulumi.Input

	ToSpringCloudConnectionOutput() SpringCloudConnectionOutput
	ToSpringCloudConnectionOutputWithContext(ctx context.Context) SpringCloudConnectionOutput
}

func (*SpringCloudConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudConnection)(nil)).Elem()
}

func (i *SpringCloudConnection) ToSpringCloudConnectionOutput() SpringCloudConnectionOutput {
	return i.ToSpringCloudConnectionOutputWithContext(context.Background())
}

func (i *SpringCloudConnection) ToSpringCloudConnectionOutputWithContext(ctx context.Context) SpringCloudConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudConnectionOutput)
}

func (i *SpringCloudConnection) ToOutput(ctx context.Context) pulumix.Output[*SpringCloudConnection] {
	return pulumix.Output[*SpringCloudConnection]{
		OutputState: i.ToSpringCloudConnectionOutputWithContext(ctx).OutputState,
	}
}

// SpringCloudConnectionArrayInput is an input type that accepts SpringCloudConnectionArray and SpringCloudConnectionArrayOutput values.
// You can construct a concrete instance of `SpringCloudConnectionArrayInput` via:
//
//	SpringCloudConnectionArray{ SpringCloudConnectionArgs{...} }
type SpringCloudConnectionArrayInput interface {
	pulumi.Input

	ToSpringCloudConnectionArrayOutput() SpringCloudConnectionArrayOutput
	ToSpringCloudConnectionArrayOutputWithContext(context.Context) SpringCloudConnectionArrayOutput
}

type SpringCloudConnectionArray []SpringCloudConnectionInput

func (SpringCloudConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpringCloudConnection)(nil)).Elem()
}

func (i SpringCloudConnectionArray) ToSpringCloudConnectionArrayOutput() SpringCloudConnectionArrayOutput {
	return i.ToSpringCloudConnectionArrayOutputWithContext(context.Background())
}

func (i SpringCloudConnectionArray) ToSpringCloudConnectionArrayOutputWithContext(ctx context.Context) SpringCloudConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudConnectionArrayOutput)
}

func (i SpringCloudConnectionArray) ToOutput(ctx context.Context) pulumix.Output[[]*SpringCloudConnection] {
	return pulumix.Output[[]*SpringCloudConnection]{
		OutputState: i.ToSpringCloudConnectionArrayOutputWithContext(ctx).OutputState,
	}
}

// SpringCloudConnectionMapInput is an input type that accepts SpringCloudConnectionMap and SpringCloudConnectionMapOutput values.
// You can construct a concrete instance of `SpringCloudConnectionMapInput` via:
//
//	SpringCloudConnectionMap{ "key": SpringCloudConnectionArgs{...} }
type SpringCloudConnectionMapInput interface {
	pulumi.Input

	ToSpringCloudConnectionMapOutput() SpringCloudConnectionMapOutput
	ToSpringCloudConnectionMapOutputWithContext(context.Context) SpringCloudConnectionMapOutput
}

type SpringCloudConnectionMap map[string]SpringCloudConnectionInput

func (SpringCloudConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpringCloudConnection)(nil)).Elem()
}

func (i SpringCloudConnectionMap) ToSpringCloudConnectionMapOutput() SpringCloudConnectionMapOutput {
	return i.ToSpringCloudConnectionMapOutputWithContext(context.Background())
}

func (i SpringCloudConnectionMap) ToSpringCloudConnectionMapOutputWithContext(ctx context.Context) SpringCloudConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudConnectionMapOutput)
}

func (i SpringCloudConnectionMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SpringCloudConnection] {
	return pulumix.Output[map[string]*SpringCloudConnection]{
		OutputState: i.ToSpringCloudConnectionMapOutputWithContext(ctx).OutputState,
	}
}

type SpringCloudConnectionOutput struct{ *pulumi.OutputState }

func (SpringCloudConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudConnection)(nil)).Elem()
}

func (o SpringCloudConnectionOutput) ToSpringCloudConnectionOutput() SpringCloudConnectionOutput {
	return o
}

func (o SpringCloudConnectionOutput) ToSpringCloudConnectionOutputWithContext(ctx context.Context) SpringCloudConnectionOutput {
	return o
}

func (o SpringCloudConnectionOutput) ToOutput(ctx context.Context) pulumix.Output[*SpringCloudConnection] {
	return pulumix.Output[*SpringCloudConnection]{
		OutputState: o.OutputState,
	}
}

// The authentication info. An `authentication` block as defined below.
func (o SpringCloudConnectionOutput) Authentication() SpringCloudConnectionAuthenticationOutput {
	return o.ApplyT(func(v *SpringCloudConnection) SpringCloudConnectionAuthenticationOutput { return v.Authentication }).(SpringCloudConnectionAuthenticationOutput)
}

// The application client type. Possible values are `none`, `dotnet`, `java`, `python`, `go`, `php`, `ruby`, `django`, `nodejs` and `springBoot`. Defaults to `none`.
func (o SpringCloudConnectionOutput) ClientType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudConnection) pulumi.StringPtrOutput { return v.ClientType }).(pulumi.StringPtrOutput)
}

// The name of the service connection. Changing this forces a new resource to be created.
func (o SpringCloudConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SpringCloudConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// An option to store secret value in secure place. An `secretStore` block as defined below.
func (o SpringCloudConnectionOutput) SecretStore() SpringCloudConnectionSecretStorePtrOutput {
	return o.ApplyT(func(v *SpringCloudConnection) SpringCloudConnectionSecretStorePtrOutput { return v.SecretStore }).(SpringCloudConnectionSecretStorePtrOutput)
}

// The ID of the data source spring cloud. Changing this forces a new resource to be created.
func (o SpringCloudConnectionOutput) SpringCloudId() pulumi.StringOutput {
	return o.ApplyT(func(v *SpringCloudConnection) pulumi.StringOutput { return v.SpringCloudId }).(pulumi.StringOutput)
}

// The ID of the target resource. Changing this forces a new resource to be created. Possible target resources are `Postgres`, `PostgresFlexible`, `Mysql`, `Sql`, `Redis`, `RedisEnterprise`, `CosmosCassandra`, `CosmosGremlin`, `CosmosMongo`, `CosmosSql`, `CosmosTable`, `StorageBlob`, `StorageQueue`, `StorageFile`, `StorageTable`, `AppConfig`, `EventHub`, `ServiceBus`, `SignalR`, `WebPubSub`, `ConfluentKafka`. The integration guide can be found [here](https://learn.microsoft.com/en-us/azure/service-connector/how-to-integrate-postgres).
func (o SpringCloudConnectionOutput) TargetResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SpringCloudConnection) pulumi.StringOutput { return v.TargetResourceId }).(pulumi.StringOutput)
}

// The type of the VNet solution. Possible values are `serviceEndpoint`, `privateLink`.
func (o SpringCloudConnectionOutput) VnetSolution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudConnection) pulumi.StringPtrOutput { return v.VnetSolution }).(pulumi.StringPtrOutput)
}

type SpringCloudConnectionArrayOutput struct{ *pulumi.OutputState }

func (SpringCloudConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpringCloudConnection)(nil)).Elem()
}

func (o SpringCloudConnectionArrayOutput) ToSpringCloudConnectionArrayOutput() SpringCloudConnectionArrayOutput {
	return o
}

func (o SpringCloudConnectionArrayOutput) ToSpringCloudConnectionArrayOutputWithContext(ctx context.Context) SpringCloudConnectionArrayOutput {
	return o
}

func (o SpringCloudConnectionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SpringCloudConnection] {
	return pulumix.Output[[]*SpringCloudConnection]{
		OutputState: o.OutputState,
	}
}

func (o SpringCloudConnectionArrayOutput) Index(i pulumi.IntInput) SpringCloudConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SpringCloudConnection {
		return vs[0].([]*SpringCloudConnection)[vs[1].(int)]
	}).(SpringCloudConnectionOutput)
}

type SpringCloudConnectionMapOutput struct{ *pulumi.OutputState }

func (SpringCloudConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpringCloudConnection)(nil)).Elem()
}

func (o SpringCloudConnectionMapOutput) ToSpringCloudConnectionMapOutput() SpringCloudConnectionMapOutput {
	return o
}

func (o SpringCloudConnectionMapOutput) ToSpringCloudConnectionMapOutputWithContext(ctx context.Context) SpringCloudConnectionMapOutput {
	return o
}

func (o SpringCloudConnectionMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SpringCloudConnection] {
	return pulumix.Output[map[string]*SpringCloudConnection]{
		OutputState: o.OutputState,
	}
}

func (o SpringCloudConnectionMapOutput) MapIndex(k pulumi.StringInput) SpringCloudConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SpringCloudConnection {
		return vs[0].(map[string]*SpringCloudConnection)[vs[1].(string)]
	}).(SpringCloudConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudConnectionInput)(nil)).Elem(), &SpringCloudConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudConnectionArrayInput)(nil)).Elem(), SpringCloudConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudConnectionMapInput)(nil)).Elem(), SpringCloudConnectionMap{})
	pulumi.RegisterOutputType(SpringCloudConnectionOutput{})
	pulumi.RegisterOutputType(SpringCloudConnectionArrayOutput{})
	pulumi.RegisterOutputType(SpringCloudConnectionMapOutput{})
}
