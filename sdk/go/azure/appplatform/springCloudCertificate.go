// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appplatform

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages an Azure Spring Cloud Certificate.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/appplatform"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/keyvault"
// 	"github.com/pulumi/pulumi-azuread/sdk/v2/go/azuread"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("Southeast Asia"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		current, err := core.GetClientConfig(ctx, nil, nil)
// 		if err != nil {
// 			return err
// 		}
// 		opt0 := "Azure Spring Cloud Domain-Management"
// 		exampleServicePrincipal, err := azuread.LookupServicePrincipal(ctx, &azuread.LookupServicePrincipalArgs{
// 			DisplayName: &opt0,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		exampleKeyVault, err := keyvault.NewKeyVault(ctx, "exampleKeyVault", &keyvault.KeyVaultArgs{
// 			Location:          exampleResourceGroup.Location,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			TenantId:          pulumi.String(current.TenantId),
// 			SkuName:           pulumi.String("standard"),
// 			AccessPolicies: keyvault.KeyVaultAccessPolicyArray{
// 				&keyvault.KeyVaultAccessPolicyArgs{
// 					TenantId: pulumi.String(current.TenantId),
// 					ObjectId: pulumi.String(current.ObjectId),
// 					SecretPermissions: pulumi.StringArray{
// 						pulumi.String("set"),
// 					},
// 					CertificatePermissions: pulumi.StringArray{
// 						pulumi.String("create"),
// 						pulumi.String("delete"),
// 						pulumi.String("get"),
// 						pulumi.String("update"),
// 					},
// 				},
// 				&keyvault.KeyVaultAccessPolicyArgs{
// 					TenantId: pulumi.String(current.TenantId),
// 					ObjectId: pulumi.String(exampleServicePrincipal.ObjectId),
// 					SecretPermissions: pulumi.StringArray{
// 						pulumi.String("get"),
// 						pulumi.String("list"),
// 					},
// 					CertificatePermissions: pulumi.StringArray{
// 						pulumi.String("get"),
// 						pulumi.String("list"),
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleCertificate, err := keyvault.NewCertificate(ctx, "exampleCertificate", &keyvault.CertificateArgs{
// 			KeyVaultId: exampleKeyVault.ID(),
// 			CertificatePolicy: &keyvault.CertificateCertificatePolicyArgs{
// 				IssuerParameters: &keyvault.CertificateCertificatePolicyIssuerParametersArgs{
// 					Name: pulumi.String("Self"),
// 				},
// 				KeyProperties: &keyvault.CertificateCertificatePolicyKeyPropertiesArgs{
// 					Exportable: pulumi.Bool(true),
// 					KeySize:    pulumi.Int(2048),
// 					KeyType:    pulumi.String("RSA"),
// 					ReuseKey:   pulumi.Bool(true),
// 				},
// 				LifetimeActions: keyvault.CertificateCertificatePolicyLifetimeActionArray{
// 					&keyvault.CertificateCertificatePolicyLifetimeActionArgs{
// 						Action: &keyvault.CertificateCertificatePolicyLifetimeActionActionArgs{
// 							ActionType: pulumi.String("AutoRenew"),
// 						},
// 						Trigger: &keyvault.CertificateCertificatePolicyLifetimeActionTriggerArgs{
// 							DaysBeforeExpiry: pulumi.Int(30),
// 						},
// 					},
// 				},
// 				SecretProperties: &keyvault.CertificateCertificatePolicySecretPropertiesArgs{
// 					ContentType: pulumi.String("application/x-pkcs12"),
// 				},
// 				X509CertificateProperties: &keyvault.CertificateCertificatePolicyX509CertificatePropertiesArgs{
// 					KeyUsages: pulumi.StringArray{
// 						pulumi.String("cRLSign"),
// 						pulumi.String("dataEncipherment"),
// 						pulumi.String("digitalSignature"),
// 						pulumi.String("keyAgreement"),
// 						pulumi.String("keyCertSign"),
// 						pulumi.String("keyEncipherment"),
// 					},
// 					Subject:          pulumi.String("CN=contoso.com"),
// 					ValidityInMonths: pulumi.Int(12),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleSpringCloudService, err := appplatform.NewSpringCloudService(ctx, "exampleSpringCloudService", &appplatform.SpringCloudServiceArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			Location:          exampleResourceGroup.Location,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = appplatform.NewSpringCloudCertificate(ctx, "exampleSpringCloudCertificate", &appplatform.SpringCloudCertificateArgs{
// 			ResourceGroupName:     exampleSpringCloudService.ResourceGroupName,
// 			ServiceName:           exampleSpringCloudService.Name,
// 			KeyVaultCertificateId: exampleCertificate.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Spring Cloud Certificate can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:appplatform/springCloudCertificate:SpringCloudCertificate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourcegroup1/providers/Microsoft.AppPlatform/Spring/spring1/certificates/cert1
// ```
type SpringCloudCertificate struct {
	pulumi.CustomResourceState

	// Specifies the ID of the Key Vault Certificate resource. Changing this forces a new resource to be created.
	KeyVaultCertificateId pulumi.StringOutput `pulumi:"keyVaultCertificateId"`
	// Specifies the name of the Spring Cloud Certificate. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the name of the resource group in which to create the Spring Cloud Certificate. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Specifies the name of the Spring Cloud Service resource. Changing this forces a new resource to be created.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewSpringCloudCertificate registers a new resource with the given unique name, arguments, and options.
func NewSpringCloudCertificate(ctx *pulumi.Context,
	name string, args *SpringCloudCertificateArgs, opts ...pulumi.ResourceOption) (*SpringCloudCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KeyVaultCertificateId == nil {
		return nil, errors.New("invalid value for required argument 'KeyVaultCertificateId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource SpringCloudCertificate
	err := ctx.RegisterResource("azure:appplatform/springCloudCertificate:SpringCloudCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpringCloudCertificate gets an existing SpringCloudCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpringCloudCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpringCloudCertificateState, opts ...pulumi.ResourceOption) (*SpringCloudCertificate, error) {
	var resource SpringCloudCertificate
	err := ctx.ReadResource("azure:appplatform/springCloudCertificate:SpringCloudCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SpringCloudCertificate resources.
type springCloudCertificateState struct {
	// Specifies the ID of the Key Vault Certificate resource. Changing this forces a new resource to be created.
	KeyVaultCertificateId *string `pulumi:"keyVaultCertificateId"`
	// Specifies the name of the Spring Cloud Certificate. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies the name of the resource group in which to create the Spring Cloud Certificate. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Specifies the name of the Spring Cloud Service resource. Changing this forces a new resource to be created.
	ServiceName *string `pulumi:"serviceName"`
}

type SpringCloudCertificateState struct {
	// Specifies the ID of the Key Vault Certificate resource. Changing this forces a new resource to be created.
	KeyVaultCertificateId pulumi.StringPtrInput
	// Specifies the name of the Spring Cloud Certificate. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies the name of the resource group in which to create the Spring Cloud Certificate. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// Specifies the name of the Spring Cloud Service resource. Changing this forces a new resource to be created.
	ServiceName pulumi.StringPtrInput
}

func (SpringCloudCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*springCloudCertificateState)(nil)).Elem()
}

type springCloudCertificateArgs struct {
	// Specifies the ID of the Key Vault Certificate resource. Changing this forces a new resource to be created.
	KeyVaultCertificateId string `pulumi:"keyVaultCertificateId"`
	// Specifies the name of the Spring Cloud Certificate. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies the name of the resource group in which to create the Spring Cloud Certificate. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Specifies the name of the Spring Cloud Service resource. Changing this forces a new resource to be created.
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a SpringCloudCertificate resource.
type SpringCloudCertificateArgs struct {
	// Specifies the ID of the Key Vault Certificate resource. Changing this forces a new resource to be created.
	KeyVaultCertificateId pulumi.StringInput
	// Specifies the name of the Spring Cloud Certificate. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies the name of the resource group in which to create the Spring Cloud Certificate. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// Specifies the name of the Spring Cloud Service resource. Changing this forces a new resource to be created.
	ServiceName pulumi.StringInput
}

func (SpringCloudCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*springCloudCertificateArgs)(nil)).Elem()
}

type SpringCloudCertificateInput interface {
	pulumi.Input

	ToSpringCloudCertificateOutput() SpringCloudCertificateOutput
	ToSpringCloudCertificateOutputWithContext(ctx context.Context) SpringCloudCertificateOutput
}

func (*SpringCloudCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudCertificate)(nil))
}

func (i *SpringCloudCertificate) ToSpringCloudCertificateOutput() SpringCloudCertificateOutput {
	return i.ToSpringCloudCertificateOutputWithContext(context.Background())
}

func (i *SpringCloudCertificate) ToSpringCloudCertificateOutputWithContext(ctx context.Context) SpringCloudCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudCertificateOutput)
}

func (i *SpringCloudCertificate) ToSpringCloudCertificatePtrOutput() SpringCloudCertificatePtrOutput {
	return i.ToSpringCloudCertificatePtrOutputWithContext(context.Background())
}

func (i *SpringCloudCertificate) ToSpringCloudCertificatePtrOutputWithContext(ctx context.Context) SpringCloudCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudCertificatePtrOutput)
}

type SpringCloudCertificatePtrInput interface {
	pulumi.Input

	ToSpringCloudCertificatePtrOutput() SpringCloudCertificatePtrOutput
	ToSpringCloudCertificatePtrOutputWithContext(ctx context.Context) SpringCloudCertificatePtrOutput
}

type springCloudCertificatePtrType SpringCloudCertificateArgs

func (*springCloudCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudCertificate)(nil))
}

func (i *springCloudCertificatePtrType) ToSpringCloudCertificatePtrOutput() SpringCloudCertificatePtrOutput {
	return i.ToSpringCloudCertificatePtrOutputWithContext(context.Background())
}

func (i *springCloudCertificatePtrType) ToSpringCloudCertificatePtrOutputWithContext(ctx context.Context) SpringCloudCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudCertificatePtrOutput)
}

// SpringCloudCertificateArrayInput is an input type that accepts SpringCloudCertificateArray and SpringCloudCertificateArrayOutput values.
// You can construct a concrete instance of `SpringCloudCertificateArrayInput` via:
//
//          SpringCloudCertificateArray{ SpringCloudCertificateArgs{...} }
type SpringCloudCertificateArrayInput interface {
	pulumi.Input

	ToSpringCloudCertificateArrayOutput() SpringCloudCertificateArrayOutput
	ToSpringCloudCertificateArrayOutputWithContext(context.Context) SpringCloudCertificateArrayOutput
}

type SpringCloudCertificateArray []SpringCloudCertificateInput

func (SpringCloudCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*SpringCloudCertificate)(nil))
}

func (i SpringCloudCertificateArray) ToSpringCloudCertificateArrayOutput() SpringCloudCertificateArrayOutput {
	return i.ToSpringCloudCertificateArrayOutputWithContext(context.Background())
}

func (i SpringCloudCertificateArray) ToSpringCloudCertificateArrayOutputWithContext(ctx context.Context) SpringCloudCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudCertificateArrayOutput)
}

// SpringCloudCertificateMapInput is an input type that accepts SpringCloudCertificateMap and SpringCloudCertificateMapOutput values.
// You can construct a concrete instance of `SpringCloudCertificateMapInput` via:
//
//          SpringCloudCertificateMap{ "key": SpringCloudCertificateArgs{...} }
type SpringCloudCertificateMapInput interface {
	pulumi.Input

	ToSpringCloudCertificateMapOutput() SpringCloudCertificateMapOutput
	ToSpringCloudCertificateMapOutputWithContext(context.Context) SpringCloudCertificateMapOutput
}

type SpringCloudCertificateMap map[string]SpringCloudCertificateInput

func (SpringCloudCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*SpringCloudCertificate)(nil))
}

func (i SpringCloudCertificateMap) ToSpringCloudCertificateMapOutput() SpringCloudCertificateMapOutput {
	return i.ToSpringCloudCertificateMapOutputWithContext(context.Background())
}

func (i SpringCloudCertificateMap) ToSpringCloudCertificateMapOutputWithContext(ctx context.Context) SpringCloudCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudCertificateMapOutput)
}

type SpringCloudCertificateOutput struct {
	*pulumi.OutputState
}

func (SpringCloudCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudCertificate)(nil))
}

func (o SpringCloudCertificateOutput) ToSpringCloudCertificateOutput() SpringCloudCertificateOutput {
	return o
}

func (o SpringCloudCertificateOutput) ToSpringCloudCertificateOutputWithContext(ctx context.Context) SpringCloudCertificateOutput {
	return o
}

func (o SpringCloudCertificateOutput) ToSpringCloudCertificatePtrOutput() SpringCloudCertificatePtrOutput {
	return o.ToSpringCloudCertificatePtrOutputWithContext(context.Background())
}

func (o SpringCloudCertificateOutput) ToSpringCloudCertificatePtrOutputWithContext(ctx context.Context) SpringCloudCertificatePtrOutput {
	return o.ApplyT(func(v SpringCloudCertificate) *SpringCloudCertificate {
		return &v
	}).(SpringCloudCertificatePtrOutput)
}

type SpringCloudCertificatePtrOutput struct {
	*pulumi.OutputState
}

func (SpringCloudCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudCertificate)(nil))
}

func (o SpringCloudCertificatePtrOutput) ToSpringCloudCertificatePtrOutput() SpringCloudCertificatePtrOutput {
	return o
}

func (o SpringCloudCertificatePtrOutput) ToSpringCloudCertificatePtrOutputWithContext(ctx context.Context) SpringCloudCertificatePtrOutput {
	return o
}

type SpringCloudCertificateArrayOutput struct{ *pulumi.OutputState }

func (SpringCloudCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpringCloudCertificate)(nil))
}

func (o SpringCloudCertificateArrayOutput) ToSpringCloudCertificateArrayOutput() SpringCloudCertificateArrayOutput {
	return o
}

func (o SpringCloudCertificateArrayOutput) ToSpringCloudCertificateArrayOutputWithContext(ctx context.Context) SpringCloudCertificateArrayOutput {
	return o
}

func (o SpringCloudCertificateArrayOutput) Index(i pulumi.IntInput) SpringCloudCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SpringCloudCertificate {
		return vs[0].([]SpringCloudCertificate)[vs[1].(int)]
	}).(SpringCloudCertificateOutput)
}

type SpringCloudCertificateMapOutput struct{ *pulumi.OutputState }

func (SpringCloudCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SpringCloudCertificate)(nil))
}

func (o SpringCloudCertificateMapOutput) ToSpringCloudCertificateMapOutput() SpringCloudCertificateMapOutput {
	return o
}

func (o SpringCloudCertificateMapOutput) ToSpringCloudCertificateMapOutputWithContext(ctx context.Context) SpringCloudCertificateMapOutput {
	return o
}

func (o SpringCloudCertificateMapOutput) MapIndex(k pulumi.StringInput) SpringCloudCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SpringCloudCertificate {
		return vs[0].(map[string]SpringCloudCertificate)[vs[1].(string)]
	}).(SpringCloudCertificateOutput)
}

func init() {
	pulumi.RegisterOutputType(SpringCloudCertificateOutput{})
	pulumi.RegisterOutputType(SpringCloudCertificatePtrOutput{})
	pulumi.RegisterOutputType(SpringCloudCertificateArrayOutput{})
	pulumi.RegisterOutputType(SpringCloudCertificateMapOutput{})
}
