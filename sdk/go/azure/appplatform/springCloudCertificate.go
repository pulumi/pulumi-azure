// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appplatform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Azure Spring Cloud Certificate.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/appplatform"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/keyvault"
//	"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			current, err := core.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			exampleServicePrincipal, err := azuread.LookupServicePrincipal(ctx, &azuread.LookupServicePrincipalArgs{
//				DisplayName: pulumi.StringRef("Azure Spring Cloud Resource Provider"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleKeyVault, err := keyvault.NewKeyVault(ctx, "exampleKeyVault", &keyvault.KeyVaultArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				TenantId:          *pulumi.String(current.TenantId),
//				SkuName:           pulumi.String("standard"),
//				AccessPolicies: keyvault.KeyVaultAccessPolicyArray{
//					&keyvault.KeyVaultAccessPolicyArgs{
//						TenantId: *pulumi.String(current.TenantId),
//						ObjectId: *pulumi.String(current.ObjectId),
//						SecretPermissions: pulumi.StringArray{
//							pulumi.String("Set"),
//						},
//						CertificatePermissions: pulumi.StringArray{
//							pulumi.String("Create"),
//							pulumi.String("Delete"),
//							pulumi.String("Get"),
//							pulumi.String("Update"),
//						},
//					},
//					&keyvault.KeyVaultAccessPolicyArgs{
//						TenantId: *pulumi.String(current.TenantId),
//						ObjectId: *pulumi.String(exampleServicePrincipal.ObjectId),
//						SecretPermissions: pulumi.StringArray{
//							pulumi.String("Get"),
//							pulumi.String("List"),
//						},
//						CertificatePermissions: pulumi.StringArray{
//							pulumi.String("Get"),
//							pulumi.String("List"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleCertificate, err := keyvault.NewCertificate(ctx, "exampleCertificate", &keyvault.CertificateArgs{
//				KeyVaultId: exampleKeyVault.ID(),
//				CertificatePolicy: &keyvault.CertificateCertificatePolicyArgs{
//					IssuerParameters: &keyvault.CertificateCertificatePolicyIssuerParametersArgs{
//						Name: pulumi.String("Self"),
//					},
//					KeyProperties: &keyvault.CertificateCertificatePolicyKeyPropertiesArgs{
//						Exportable: pulumi.Bool(true),
//						KeySize:    pulumi.Int(2048),
//						KeyType:    pulumi.String("RSA"),
//						ReuseKey:   pulumi.Bool(true),
//					},
//					LifetimeActions: keyvault.CertificateCertificatePolicyLifetimeActionArray{
//						&keyvault.CertificateCertificatePolicyLifetimeActionArgs{
//							Action: &keyvault.CertificateCertificatePolicyLifetimeActionActionArgs{
//								ActionType: pulumi.String("AutoRenew"),
//							},
//							Trigger: &keyvault.CertificateCertificatePolicyLifetimeActionTriggerArgs{
//								DaysBeforeExpiry: pulumi.Int(30),
//							},
//						},
//					},
//					SecretProperties: &keyvault.CertificateCertificatePolicySecretPropertiesArgs{
//						ContentType: pulumi.String("application/x-pkcs12"),
//					},
//					X509CertificateProperties: &keyvault.CertificateCertificatePolicyX509CertificatePropertiesArgs{
//						KeyUsages: pulumi.StringArray{
//							pulumi.String("cRLSign"),
//							pulumi.String("dataEncipherment"),
//							pulumi.String("digitalSignature"),
//							pulumi.String("keyAgreement"),
//							pulumi.String("keyCertSign"),
//							pulumi.String("keyEncipherment"),
//						},
//						Subject:          pulumi.String("CN=contoso.com"),
//						ValidityInMonths: pulumi.Int(12),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleSpringCloudService, err := appplatform.NewSpringCloudService(ctx, "exampleSpringCloudService", &appplatform.SpringCloudServiceArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = appplatform.NewSpringCloudCertificate(ctx, "exampleSpringCloudCertificate", &appplatform.SpringCloudCertificateArgs{
//				ResourceGroupName:     exampleSpringCloudService.ResourceGroupName,
//				ServiceName:           exampleSpringCloudService.Name,
//				KeyVaultCertificateId: exampleCertificate.ID(),
//				ExcludePrivateKey:     pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Spring Cloud Certificate can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:appplatform/springCloudCertificate:SpringCloudCertificate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourcegroup1/providers/Microsoft.AppPlatform/spring/spring1/certificates/cert1
//
// ```
type SpringCloudCertificate struct {
	pulumi.CustomResourceState

	// The content of uploaded certificate. Changing this forces a new resource to be created.
	CertificateContent pulumi.StringPtrOutput `pulumi:"certificateContent"`
	// Specifies whether the private key should be excluded from the Key Vault Certificate. Changing this forces a new resource to be created. Defaults to `false`.
	ExcludePrivateKey pulumi.BoolPtrOutput `pulumi:"excludePrivateKey"`
	// Specifies the ID of the Key Vault Certificate resource. Changing this forces a new resource to be created.
	KeyVaultCertificateId pulumi.StringPtrOutput `pulumi:"keyVaultCertificateId"`
	// Specifies the name of the Spring Cloud Certificate. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the name of the resource group in which to create the Spring Cloud Certificate. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Specifies the name of the Spring Cloud Service resource. Changing this forces a new resource to be created.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// The thumbprint of the Spring Cloud certificate.
	Thumbprint pulumi.StringOutput `pulumi:"thumbprint"`
}

// NewSpringCloudCertificate registers a new resource with the given unique name, arguments, and options.
func NewSpringCloudCertificate(ctx *pulumi.Context,
	name string, args *SpringCloudCertificateArgs, opts ...pulumi.ResourceOption) (*SpringCloudCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SpringCloudCertificate
	err := ctx.RegisterResource("azure:appplatform/springCloudCertificate:SpringCloudCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpringCloudCertificate gets an existing SpringCloudCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpringCloudCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpringCloudCertificateState, opts ...pulumi.ResourceOption) (*SpringCloudCertificate, error) {
	var resource SpringCloudCertificate
	err := ctx.ReadResource("azure:appplatform/springCloudCertificate:SpringCloudCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SpringCloudCertificate resources.
type springCloudCertificateState struct {
	// The content of uploaded certificate. Changing this forces a new resource to be created.
	CertificateContent *string `pulumi:"certificateContent"`
	// Specifies whether the private key should be excluded from the Key Vault Certificate. Changing this forces a new resource to be created. Defaults to `false`.
	ExcludePrivateKey *bool `pulumi:"excludePrivateKey"`
	// Specifies the ID of the Key Vault Certificate resource. Changing this forces a new resource to be created.
	KeyVaultCertificateId *string `pulumi:"keyVaultCertificateId"`
	// Specifies the name of the Spring Cloud Certificate. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies the name of the resource group in which to create the Spring Cloud Certificate. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Specifies the name of the Spring Cloud Service resource. Changing this forces a new resource to be created.
	ServiceName *string `pulumi:"serviceName"`
	// The thumbprint of the Spring Cloud certificate.
	Thumbprint *string `pulumi:"thumbprint"`
}

type SpringCloudCertificateState struct {
	// The content of uploaded certificate. Changing this forces a new resource to be created.
	CertificateContent pulumi.StringPtrInput
	// Specifies whether the private key should be excluded from the Key Vault Certificate. Changing this forces a new resource to be created. Defaults to `false`.
	ExcludePrivateKey pulumi.BoolPtrInput
	// Specifies the ID of the Key Vault Certificate resource. Changing this forces a new resource to be created.
	KeyVaultCertificateId pulumi.StringPtrInput
	// Specifies the name of the Spring Cloud Certificate. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies the name of the resource group in which to create the Spring Cloud Certificate. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// Specifies the name of the Spring Cloud Service resource. Changing this forces a new resource to be created.
	ServiceName pulumi.StringPtrInput
	// The thumbprint of the Spring Cloud certificate.
	Thumbprint pulumi.StringPtrInput
}

func (SpringCloudCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*springCloudCertificateState)(nil)).Elem()
}

type springCloudCertificateArgs struct {
	// The content of uploaded certificate. Changing this forces a new resource to be created.
	CertificateContent *string `pulumi:"certificateContent"`
	// Specifies whether the private key should be excluded from the Key Vault Certificate. Changing this forces a new resource to be created. Defaults to `false`.
	ExcludePrivateKey *bool `pulumi:"excludePrivateKey"`
	// Specifies the ID of the Key Vault Certificate resource. Changing this forces a new resource to be created.
	KeyVaultCertificateId *string `pulumi:"keyVaultCertificateId"`
	// Specifies the name of the Spring Cloud Certificate. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies the name of the resource group in which to create the Spring Cloud Certificate. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Specifies the name of the Spring Cloud Service resource. Changing this forces a new resource to be created.
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a SpringCloudCertificate resource.
type SpringCloudCertificateArgs struct {
	// The content of uploaded certificate. Changing this forces a new resource to be created.
	CertificateContent pulumi.StringPtrInput
	// Specifies whether the private key should be excluded from the Key Vault Certificate. Changing this forces a new resource to be created. Defaults to `false`.
	ExcludePrivateKey pulumi.BoolPtrInput
	// Specifies the ID of the Key Vault Certificate resource. Changing this forces a new resource to be created.
	KeyVaultCertificateId pulumi.StringPtrInput
	// Specifies the name of the Spring Cloud Certificate. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies the name of the resource group in which to create the Spring Cloud Certificate. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// Specifies the name of the Spring Cloud Service resource. Changing this forces a new resource to be created.
	ServiceName pulumi.StringInput
}

func (SpringCloudCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*springCloudCertificateArgs)(nil)).Elem()
}

type SpringCloudCertificateInput interface {
	pulumi.Input

	ToSpringCloudCertificateOutput() SpringCloudCertificateOutput
	ToSpringCloudCertificateOutputWithContext(ctx context.Context) SpringCloudCertificateOutput
}

func (*SpringCloudCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudCertificate)(nil)).Elem()
}

func (i *SpringCloudCertificate) ToSpringCloudCertificateOutput() SpringCloudCertificateOutput {
	return i.ToSpringCloudCertificateOutputWithContext(context.Background())
}

func (i *SpringCloudCertificate) ToSpringCloudCertificateOutputWithContext(ctx context.Context) SpringCloudCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudCertificateOutput)
}

// SpringCloudCertificateArrayInput is an input type that accepts SpringCloudCertificateArray and SpringCloudCertificateArrayOutput values.
// You can construct a concrete instance of `SpringCloudCertificateArrayInput` via:
//
//	SpringCloudCertificateArray{ SpringCloudCertificateArgs{...} }
type SpringCloudCertificateArrayInput interface {
	pulumi.Input

	ToSpringCloudCertificateArrayOutput() SpringCloudCertificateArrayOutput
	ToSpringCloudCertificateArrayOutputWithContext(context.Context) SpringCloudCertificateArrayOutput
}

type SpringCloudCertificateArray []SpringCloudCertificateInput

func (SpringCloudCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpringCloudCertificate)(nil)).Elem()
}

func (i SpringCloudCertificateArray) ToSpringCloudCertificateArrayOutput() SpringCloudCertificateArrayOutput {
	return i.ToSpringCloudCertificateArrayOutputWithContext(context.Background())
}

func (i SpringCloudCertificateArray) ToSpringCloudCertificateArrayOutputWithContext(ctx context.Context) SpringCloudCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudCertificateArrayOutput)
}

// SpringCloudCertificateMapInput is an input type that accepts SpringCloudCertificateMap and SpringCloudCertificateMapOutput values.
// You can construct a concrete instance of `SpringCloudCertificateMapInput` via:
//
//	SpringCloudCertificateMap{ "key": SpringCloudCertificateArgs{...} }
type SpringCloudCertificateMapInput interface {
	pulumi.Input

	ToSpringCloudCertificateMapOutput() SpringCloudCertificateMapOutput
	ToSpringCloudCertificateMapOutputWithContext(context.Context) SpringCloudCertificateMapOutput
}

type SpringCloudCertificateMap map[string]SpringCloudCertificateInput

func (SpringCloudCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpringCloudCertificate)(nil)).Elem()
}

func (i SpringCloudCertificateMap) ToSpringCloudCertificateMapOutput() SpringCloudCertificateMapOutput {
	return i.ToSpringCloudCertificateMapOutputWithContext(context.Background())
}

func (i SpringCloudCertificateMap) ToSpringCloudCertificateMapOutputWithContext(ctx context.Context) SpringCloudCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudCertificateMapOutput)
}

type SpringCloudCertificateOutput struct{ *pulumi.OutputState }

func (SpringCloudCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudCertificate)(nil)).Elem()
}

func (o SpringCloudCertificateOutput) ToSpringCloudCertificateOutput() SpringCloudCertificateOutput {
	return o
}

func (o SpringCloudCertificateOutput) ToSpringCloudCertificateOutputWithContext(ctx context.Context) SpringCloudCertificateOutput {
	return o
}

// The content of uploaded certificate. Changing this forces a new resource to be created.
func (o SpringCloudCertificateOutput) CertificateContent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudCertificate) pulumi.StringPtrOutput { return v.CertificateContent }).(pulumi.StringPtrOutput)
}

// Specifies whether the private key should be excluded from the Key Vault Certificate. Changing this forces a new resource to be created. Defaults to `false`.
func (o SpringCloudCertificateOutput) ExcludePrivateKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SpringCloudCertificate) pulumi.BoolPtrOutput { return v.ExcludePrivateKey }).(pulumi.BoolPtrOutput)
}

// Specifies the ID of the Key Vault Certificate resource. Changing this forces a new resource to be created.
func (o SpringCloudCertificateOutput) KeyVaultCertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudCertificate) pulumi.StringPtrOutput { return v.KeyVaultCertificateId }).(pulumi.StringPtrOutput)
}

// Specifies the name of the Spring Cloud Certificate. Changing this forces a new resource to be created.
func (o SpringCloudCertificateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SpringCloudCertificate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the name of the resource group in which to create the Spring Cloud Certificate. Changing this forces a new resource to be created.
func (o SpringCloudCertificateOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *SpringCloudCertificate) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// Specifies the name of the Spring Cloud Service resource. Changing this forces a new resource to be created.
func (o SpringCloudCertificateOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *SpringCloudCertificate) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// The thumbprint of the Spring Cloud certificate.
func (o SpringCloudCertificateOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v *SpringCloudCertificate) pulumi.StringOutput { return v.Thumbprint }).(pulumi.StringOutput)
}

type SpringCloudCertificateArrayOutput struct{ *pulumi.OutputState }

func (SpringCloudCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpringCloudCertificate)(nil)).Elem()
}

func (o SpringCloudCertificateArrayOutput) ToSpringCloudCertificateArrayOutput() SpringCloudCertificateArrayOutput {
	return o
}

func (o SpringCloudCertificateArrayOutput) ToSpringCloudCertificateArrayOutputWithContext(ctx context.Context) SpringCloudCertificateArrayOutput {
	return o
}

func (o SpringCloudCertificateArrayOutput) Index(i pulumi.IntInput) SpringCloudCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SpringCloudCertificate {
		return vs[0].([]*SpringCloudCertificate)[vs[1].(int)]
	}).(SpringCloudCertificateOutput)
}

type SpringCloudCertificateMapOutput struct{ *pulumi.OutputState }

func (SpringCloudCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpringCloudCertificate)(nil)).Elem()
}

func (o SpringCloudCertificateMapOutput) ToSpringCloudCertificateMapOutput() SpringCloudCertificateMapOutput {
	return o
}

func (o SpringCloudCertificateMapOutput) ToSpringCloudCertificateMapOutputWithContext(ctx context.Context) SpringCloudCertificateMapOutput {
	return o
}

func (o SpringCloudCertificateMapOutput) MapIndex(k pulumi.StringInput) SpringCloudCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SpringCloudCertificate {
		return vs[0].(map[string]*SpringCloudCertificate)[vs[1].(string)]
	}).(SpringCloudCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudCertificateInput)(nil)).Elem(), &SpringCloudCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudCertificateArrayInput)(nil)).Elem(), SpringCloudCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudCertificateMapInput)(nil)).Elem(), SpringCloudCertificateMap{})
	pulumi.RegisterOutputType(SpringCloudCertificateOutput{})
	pulumi.RegisterOutputType(SpringCloudCertificateArrayOutput{})
	pulumi.RegisterOutputType(SpringCloudCertificateMapOutput{})
}
