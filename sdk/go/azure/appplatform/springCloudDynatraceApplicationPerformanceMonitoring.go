// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appplatform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > **NOTE:** This resource is only applicable for Spring Cloud Service enterprise tier
//
// Manages a Spring Cloud Application Performance Monitoring resource for Dynatrace.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/appplatform"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleSpringCloudService, err := appplatform.NewSpringCloudService(ctx, "exampleSpringCloudService", &appplatform.SpringCloudServiceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				SkuName:           pulumi.String("E0"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = appplatform.NewSpringCloudDynatraceApplicationPerformanceMonitoring(ctx, "exampleSpringCloudDynatraceApplicationPerformanceMonitoring", &appplatform.SpringCloudDynatraceApplicationPerformanceMonitoringArgs{
//				SpringCloudServiceId: exampleSpringCloudService.ID(),
//				GloballyEnabled:      pulumi.Bool(true),
//				ApiUrl:               pulumi.String("https://example-api-url.com"),
//				ApiToken:             pulumi.String("dt0s01.AAAAAAAAAAAAAAAAAAAAAAAA.BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"),
//				EnvironmentId:        pulumi.String("example-environment-id"),
//				Tenant:               pulumi.String("example-tenant"),
//				TenantToken:          pulumi.String("dt0s01.AAAAAAAAAAAAAAAAAAAAAAAA.BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"),
//				ConnectionPoint:      pulumi.String("https://example.live.dynatrace.com:443"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Spring Cloud Application Performance Monitoring resource for Dynatrace can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:appplatform/springCloudDynatraceApplicationPerformanceMonitoring:SpringCloudDynatraceApplicationPerformanceMonitoring example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.AppPlatform/spring/service1/apms/apm1
//
// ```
type SpringCloudDynatraceApplicationPerformanceMonitoring struct {
	pulumi.CustomResourceState

	// Specifies the API token of the Dynatrace environment.
	ApiToken pulumi.StringPtrOutput `pulumi:"apiToken"`
	// Specifies the API Url of the Dynatrace environment.
	ApiUrl pulumi.StringPtrOutput `pulumi:"apiUrl"`
	// Specifies the endpoint to connect to the Dynatrace environment.
	ConnectionPoint pulumi.StringOutput `pulumi:"connectionPoint"`
	// Specifies the Dynatrace environment ID.
	EnvironmentId pulumi.StringPtrOutput `pulumi:"environmentId"`
	// Specifies whether the Spring Cloud Application Performance Monitoring resource for Application Insights is enabled globally. Defaults to `false`.
	GloballyEnabled pulumi.BoolPtrOutput `pulumi:"globallyEnabled"`
	// The name which should be used for this Spring Cloud Application Performance Monitoring resource for Dynatrace. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Spring Cloud Service. Changing this forces a new resource to be created.
	SpringCloudServiceId pulumi.StringOutput `pulumi:"springCloudServiceId"`
	// Specifies the Dynatrace tenant.
	Tenant pulumi.StringOutput `pulumi:"tenant"`
	// Specifies the internal token that is used for authentication when OneAgent connects to the Dynatrace cluster to send data.
	TenantToken pulumi.StringOutput `pulumi:"tenantToken"`
}

// NewSpringCloudDynatraceApplicationPerformanceMonitoring registers a new resource with the given unique name, arguments, and options.
func NewSpringCloudDynatraceApplicationPerformanceMonitoring(ctx *pulumi.Context,
	name string, args *SpringCloudDynatraceApplicationPerformanceMonitoringArgs, opts ...pulumi.ResourceOption) (*SpringCloudDynatraceApplicationPerformanceMonitoring, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionPoint == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionPoint'")
	}
	if args.SpringCloudServiceId == nil {
		return nil, errors.New("invalid value for required argument 'SpringCloudServiceId'")
	}
	if args.Tenant == nil {
		return nil, errors.New("invalid value for required argument 'Tenant'")
	}
	if args.TenantToken == nil {
		return nil, errors.New("invalid value for required argument 'TenantToken'")
	}
	if args.ApiToken != nil {
		args.ApiToken = pulumi.ToSecret(args.ApiToken).(pulumi.StringPtrInput)
	}
	if args.Tenant != nil {
		args.Tenant = pulumi.ToSecret(args.Tenant).(pulumi.StringInput)
	}
	if args.TenantToken != nil {
		args.TenantToken = pulumi.ToSecret(args.TenantToken).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"apiToken",
		"tenant",
		"tenantToken",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SpringCloudDynatraceApplicationPerformanceMonitoring
	err := ctx.RegisterResource("azure:appplatform/springCloudDynatraceApplicationPerformanceMonitoring:SpringCloudDynatraceApplicationPerformanceMonitoring", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpringCloudDynatraceApplicationPerformanceMonitoring gets an existing SpringCloudDynatraceApplicationPerformanceMonitoring resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpringCloudDynatraceApplicationPerformanceMonitoring(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpringCloudDynatraceApplicationPerformanceMonitoringState, opts ...pulumi.ResourceOption) (*SpringCloudDynatraceApplicationPerformanceMonitoring, error) {
	var resource SpringCloudDynatraceApplicationPerformanceMonitoring
	err := ctx.ReadResource("azure:appplatform/springCloudDynatraceApplicationPerformanceMonitoring:SpringCloudDynatraceApplicationPerformanceMonitoring", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SpringCloudDynatraceApplicationPerformanceMonitoring resources.
type springCloudDynatraceApplicationPerformanceMonitoringState struct {
	// Specifies the API token of the Dynatrace environment.
	ApiToken *string `pulumi:"apiToken"`
	// Specifies the API Url of the Dynatrace environment.
	ApiUrl *string `pulumi:"apiUrl"`
	// Specifies the endpoint to connect to the Dynatrace environment.
	ConnectionPoint *string `pulumi:"connectionPoint"`
	// Specifies the Dynatrace environment ID.
	EnvironmentId *string `pulumi:"environmentId"`
	// Specifies whether the Spring Cloud Application Performance Monitoring resource for Application Insights is enabled globally. Defaults to `false`.
	GloballyEnabled *bool `pulumi:"globallyEnabled"`
	// The name which should be used for this Spring Cloud Application Performance Monitoring resource for Dynatrace. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The ID of the Spring Cloud Service. Changing this forces a new resource to be created.
	SpringCloudServiceId *string `pulumi:"springCloudServiceId"`
	// Specifies the Dynatrace tenant.
	Tenant *string `pulumi:"tenant"`
	// Specifies the internal token that is used for authentication when OneAgent connects to the Dynatrace cluster to send data.
	TenantToken *string `pulumi:"tenantToken"`
}

type SpringCloudDynatraceApplicationPerformanceMonitoringState struct {
	// Specifies the API token of the Dynatrace environment.
	ApiToken pulumi.StringPtrInput
	// Specifies the API Url of the Dynatrace environment.
	ApiUrl pulumi.StringPtrInput
	// Specifies the endpoint to connect to the Dynatrace environment.
	ConnectionPoint pulumi.StringPtrInput
	// Specifies the Dynatrace environment ID.
	EnvironmentId pulumi.StringPtrInput
	// Specifies whether the Spring Cloud Application Performance Monitoring resource for Application Insights is enabled globally. Defaults to `false`.
	GloballyEnabled pulumi.BoolPtrInput
	// The name which should be used for this Spring Cloud Application Performance Monitoring resource for Dynatrace. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The ID of the Spring Cloud Service. Changing this forces a new resource to be created.
	SpringCloudServiceId pulumi.StringPtrInput
	// Specifies the Dynatrace tenant.
	Tenant pulumi.StringPtrInput
	// Specifies the internal token that is used for authentication when OneAgent connects to the Dynatrace cluster to send data.
	TenantToken pulumi.StringPtrInput
}

func (SpringCloudDynatraceApplicationPerformanceMonitoringState) ElementType() reflect.Type {
	return reflect.TypeOf((*springCloudDynatraceApplicationPerformanceMonitoringState)(nil)).Elem()
}

type springCloudDynatraceApplicationPerformanceMonitoringArgs struct {
	// Specifies the API token of the Dynatrace environment.
	ApiToken *string `pulumi:"apiToken"`
	// Specifies the API Url of the Dynatrace environment.
	ApiUrl *string `pulumi:"apiUrl"`
	// Specifies the endpoint to connect to the Dynatrace environment.
	ConnectionPoint string `pulumi:"connectionPoint"`
	// Specifies the Dynatrace environment ID.
	EnvironmentId *string `pulumi:"environmentId"`
	// Specifies whether the Spring Cloud Application Performance Monitoring resource for Application Insights is enabled globally. Defaults to `false`.
	GloballyEnabled *bool `pulumi:"globallyEnabled"`
	// The name which should be used for this Spring Cloud Application Performance Monitoring resource for Dynatrace. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The ID of the Spring Cloud Service. Changing this forces a new resource to be created.
	SpringCloudServiceId string `pulumi:"springCloudServiceId"`
	// Specifies the Dynatrace tenant.
	Tenant string `pulumi:"tenant"`
	// Specifies the internal token that is used for authentication when OneAgent connects to the Dynatrace cluster to send data.
	TenantToken string `pulumi:"tenantToken"`
}

// The set of arguments for constructing a SpringCloudDynatraceApplicationPerformanceMonitoring resource.
type SpringCloudDynatraceApplicationPerformanceMonitoringArgs struct {
	// Specifies the API token of the Dynatrace environment.
	ApiToken pulumi.StringPtrInput
	// Specifies the API Url of the Dynatrace environment.
	ApiUrl pulumi.StringPtrInput
	// Specifies the endpoint to connect to the Dynatrace environment.
	ConnectionPoint pulumi.StringInput
	// Specifies the Dynatrace environment ID.
	EnvironmentId pulumi.StringPtrInput
	// Specifies whether the Spring Cloud Application Performance Monitoring resource for Application Insights is enabled globally. Defaults to `false`.
	GloballyEnabled pulumi.BoolPtrInput
	// The name which should be used for this Spring Cloud Application Performance Monitoring resource for Dynatrace. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The ID of the Spring Cloud Service. Changing this forces a new resource to be created.
	SpringCloudServiceId pulumi.StringInput
	// Specifies the Dynatrace tenant.
	Tenant pulumi.StringInput
	// Specifies the internal token that is used for authentication when OneAgent connects to the Dynatrace cluster to send data.
	TenantToken pulumi.StringInput
}

func (SpringCloudDynatraceApplicationPerformanceMonitoringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*springCloudDynatraceApplicationPerformanceMonitoringArgs)(nil)).Elem()
}

type SpringCloudDynatraceApplicationPerformanceMonitoringInput interface {
	pulumi.Input

	ToSpringCloudDynatraceApplicationPerformanceMonitoringOutput() SpringCloudDynatraceApplicationPerformanceMonitoringOutput
	ToSpringCloudDynatraceApplicationPerformanceMonitoringOutputWithContext(ctx context.Context) SpringCloudDynatraceApplicationPerformanceMonitoringOutput
}

func (*SpringCloudDynatraceApplicationPerformanceMonitoring) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudDynatraceApplicationPerformanceMonitoring)(nil)).Elem()
}

func (i *SpringCloudDynatraceApplicationPerformanceMonitoring) ToSpringCloudDynatraceApplicationPerformanceMonitoringOutput() SpringCloudDynatraceApplicationPerformanceMonitoringOutput {
	return i.ToSpringCloudDynatraceApplicationPerformanceMonitoringOutputWithContext(context.Background())
}

func (i *SpringCloudDynatraceApplicationPerformanceMonitoring) ToSpringCloudDynatraceApplicationPerformanceMonitoringOutputWithContext(ctx context.Context) SpringCloudDynatraceApplicationPerformanceMonitoringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudDynatraceApplicationPerformanceMonitoringOutput)
}

// SpringCloudDynatraceApplicationPerformanceMonitoringArrayInput is an input type that accepts SpringCloudDynatraceApplicationPerformanceMonitoringArray and SpringCloudDynatraceApplicationPerformanceMonitoringArrayOutput values.
// You can construct a concrete instance of `SpringCloudDynatraceApplicationPerformanceMonitoringArrayInput` via:
//
//	SpringCloudDynatraceApplicationPerformanceMonitoringArray{ SpringCloudDynatraceApplicationPerformanceMonitoringArgs{...} }
type SpringCloudDynatraceApplicationPerformanceMonitoringArrayInput interface {
	pulumi.Input

	ToSpringCloudDynatraceApplicationPerformanceMonitoringArrayOutput() SpringCloudDynatraceApplicationPerformanceMonitoringArrayOutput
	ToSpringCloudDynatraceApplicationPerformanceMonitoringArrayOutputWithContext(context.Context) SpringCloudDynatraceApplicationPerformanceMonitoringArrayOutput
}

type SpringCloudDynatraceApplicationPerformanceMonitoringArray []SpringCloudDynatraceApplicationPerformanceMonitoringInput

func (SpringCloudDynatraceApplicationPerformanceMonitoringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpringCloudDynatraceApplicationPerformanceMonitoring)(nil)).Elem()
}

func (i SpringCloudDynatraceApplicationPerformanceMonitoringArray) ToSpringCloudDynatraceApplicationPerformanceMonitoringArrayOutput() SpringCloudDynatraceApplicationPerformanceMonitoringArrayOutput {
	return i.ToSpringCloudDynatraceApplicationPerformanceMonitoringArrayOutputWithContext(context.Background())
}

func (i SpringCloudDynatraceApplicationPerformanceMonitoringArray) ToSpringCloudDynatraceApplicationPerformanceMonitoringArrayOutputWithContext(ctx context.Context) SpringCloudDynatraceApplicationPerformanceMonitoringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudDynatraceApplicationPerformanceMonitoringArrayOutput)
}

// SpringCloudDynatraceApplicationPerformanceMonitoringMapInput is an input type that accepts SpringCloudDynatraceApplicationPerformanceMonitoringMap and SpringCloudDynatraceApplicationPerformanceMonitoringMapOutput values.
// You can construct a concrete instance of `SpringCloudDynatraceApplicationPerformanceMonitoringMapInput` via:
//
//	SpringCloudDynatraceApplicationPerformanceMonitoringMap{ "key": SpringCloudDynatraceApplicationPerformanceMonitoringArgs{...} }
type SpringCloudDynatraceApplicationPerformanceMonitoringMapInput interface {
	pulumi.Input

	ToSpringCloudDynatraceApplicationPerformanceMonitoringMapOutput() SpringCloudDynatraceApplicationPerformanceMonitoringMapOutput
	ToSpringCloudDynatraceApplicationPerformanceMonitoringMapOutputWithContext(context.Context) SpringCloudDynatraceApplicationPerformanceMonitoringMapOutput
}

type SpringCloudDynatraceApplicationPerformanceMonitoringMap map[string]SpringCloudDynatraceApplicationPerformanceMonitoringInput

func (SpringCloudDynatraceApplicationPerformanceMonitoringMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpringCloudDynatraceApplicationPerformanceMonitoring)(nil)).Elem()
}

func (i SpringCloudDynatraceApplicationPerformanceMonitoringMap) ToSpringCloudDynatraceApplicationPerformanceMonitoringMapOutput() SpringCloudDynatraceApplicationPerformanceMonitoringMapOutput {
	return i.ToSpringCloudDynatraceApplicationPerformanceMonitoringMapOutputWithContext(context.Background())
}

func (i SpringCloudDynatraceApplicationPerformanceMonitoringMap) ToSpringCloudDynatraceApplicationPerformanceMonitoringMapOutputWithContext(ctx context.Context) SpringCloudDynatraceApplicationPerformanceMonitoringMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudDynatraceApplicationPerformanceMonitoringMapOutput)
}

type SpringCloudDynatraceApplicationPerformanceMonitoringOutput struct{ *pulumi.OutputState }

func (SpringCloudDynatraceApplicationPerformanceMonitoringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudDynatraceApplicationPerformanceMonitoring)(nil)).Elem()
}

func (o SpringCloudDynatraceApplicationPerformanceMonitoringOutput) ToSpringCloudDynatraceApplicationPerformanceMonitoringOutput() SpringCloudDynatraceApplicationPerformanceMonitoringOutput {
	return o
}

func (o SpringCloudDynatraceApplicationPerformanceMonitoringOutput) ToSpringCloudDynatraceApplicationPerformanceMonitoringOutputWithContext(ctx context.Context) SpringCloudDynatraceApplicationPerformanceMonitoringOutput {
	return o
}

// Specifies the API token of the Dynatrace environment.
func (o SpringCloudDynatraceApplicationPerformanceMonitoringOutput) ApiToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudDynatraceApplicationPerformanceMonitoring) pulumi.StringPtrOutput {
		return v.ApiToken
	}).(pulumi.StringPtrOutput)
}

// Specifies the API Url of the Dynatrace environment.
func (o SpringCloudDynatraceApplicationPerformanceMonitoringOutput) ApiUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudDynatraceApplicationPerformanceMonitoring) pulumi.StringPtrOutput { return v.ApiUrl }).(pulumi.StringPtrOutput)
}

// Specifies the endpoint to connect to the Dynatrace environment.
func (o SpringCloudDynatraceApplicationPerformanceMonitoringOutput) ConnectionPoint() pulumi.StringOutput {
	return o.ApplyT(func(v *SpringCloudDynatraceApplicationPerformanceMonitoring) pulumi.StringOutput {
		return v.ConnectionPoint
	}).(pulumi.StringOutput)
}

// Specifies the Dynatrace environment ID.
func (o SpringCloudDynatraceApplicationPerformanceMonitoringOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudDynatraceApplicationPerformanceMonitoring) pulumi.StringPtrOutput {
		return v.EnvironmentId
	}).(pulumi.StringPtrOutput)
}

// Specifies whether the Spring Cloud Application Performance Monitoring resource for Application Insights is enabled globally. Defaults to `false`.
func (o SpringCloudDynatraceApplicationPerformanceMonitoringOutput) GloballyEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SpringCloudDynatraceApplicationPerformanceMonitoring) pulumi.BoolPtrOutput {
		return v.GloballyEnabled
	}).(pulumi.BoolPtrOutput)
}

// The name which should be used for this Spring Cloud Application Performance Monitoring resource for Dynatrace. Changing this forces a new resource to be created.
func (o SpringCloudDynatraceApplicationPerformanceMonitoringOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SpringCloudDynatraceApplicationPerformanceMonitoring) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Spring Cloud Service. Changing this forces a new resource to be created.
func (o SpringCloudDynatraceApplicationPerformanceMonitoringOutput) SpringCloudServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SpringCloudDynatraceApplicationPerformanceMonitoring) pulumi.StringOutput {
		return v.SpringCloudServiceId
	}).(pulumi.StringOutput)
}

// Specifies the Dynatrace tenant.
func (o SpringCloudDynatraceApplicationPerformanceMonitoringOutput) Tenant() pulumi.StringOutput {
	return o.ApplyT(func(v *SpringCloudDynatraceApplicationPerformanceMonitoring) pulumi.StringOutput { return v.Tenant }).(pulumi.StringOutput)
}

// Specifies the internal token that is used for authentication when OneAgent connects to the Dynatrace cluster to send data.
func (o SpringCloudDynatraceApplicationPerformanceMonitoringOutput) TenantToken() pulumi.StringOutput {
	return o.ApplyT(func(v *SpringCloudDynatraceApplicationPerformanceMonitoring) pulumi.StringOutput {
		return v.TenantToken
	}).(pulumi.StringOutput)
}

type SpringCloudDynatraceApplicationPerformanceMonitoringArrayOutput struct{ *pulumi.OutputState }

func (SpringCloudDynatraceApplicationPerformanceMonitoringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpringCloudDynatraceApplicationPerformanceMonitoring)(nil)).Elem()
}

func (o SpringCloudDynatraceApplicationPerformanceMonitoringArrayOutput) ToSpringCloudDynatraceApplicationPerformanceMonitoringArrayOutput() SpringCloudDynatraceApplicationPerformanceMonitoringArrayOutput {
	return o
}

func (o SpringCloudDynatraceApplicationPerformanceMonitoringArrayOutput) ToSpringCloudDynatraceApplicationPerformanceMonitoringArrayOutputWithContext(ctx context.Context) SpringCloudDynatraceApplicationPerformanceMonitoringArrayOutput {
	return o
}

func (o SpringCloudDynatraceApplicationPerformanceMonitoringArrayOutput) Index(i pulumi.IntInput) SpringCloudDynatraceApplicationPerformanceMonitoringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SpringCloudDynatraceApplicationPerformanceMonitoring {
		return vs[0].([]*SpringCloudDynatraceApplicationPerformanceMonitoring)[vs[1].(int)]
	}).(SpringCloudDynatraceApplicationPerformanceMonitoringOutput)
}

type SpringCloudDynatraceApplicationPerformanceMonitoringMapOutput struct{ *pulumi.OutputState }

func (SpringCloudDynatraceApplicationPerformanceMonitoringMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpringCloudDynatraceApplicationPerformanceMonitoring)(nil)).Elem()
}

func (o SpringCloudDynatraceApplicationPerformanceMonitoringMapOutput) ToSpringCloudDynatraceApplicationPerformanceMonitoringMapOutput() SpringCloudDynatraceApplicationPerformanceMonitoringMapOutput {
	return o
}

func (o SpringCloudDynatraceApplicationPerformanceMonitoringMapOutput) ToSpringCloudDynatraceApplicationPerformanceMonitoringMapOutputWithContext(ctx context.Context) SpringCloudDynatraceApplicationPerformanceMonitoringMapOutput {
	return o
}

func (o SpringCloudDynatraceApplicationPerformanceMonitoringMapOutput) MapIndex(k pulumi.StringInput) SpringCloudDynatraceApplicationPerformanceMonitoringOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SpringCloudDynatraceApplicationPerformanceMonitoring {
		return vs[0].(map[string]*SpringCloudDynatraceApplicationPerformanceMonitoring)[vs[1].(string)]
	}).(SpringCloudDynatraceApplicationPerformanceMonitoringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudDynatraceApplicationPerformanceMonitoringInput)(nil)).Elem(), &SpringCloudDynatraceApplicationPerformanceMonitoring{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudDynatraceApplicationPerformanceMonitoringArrayInput)(nil)).Elem(), SpringCloudDynatraceApplicationPerformanceMonitoringArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudDynatraceApplicationPerformanceMonitoringMapInput)(nil)).Elem(), SpringCloudDynatraceApplicationPerformanceMonitoringMap{})
	pulumi.RegisterOutputType(SpringCloudDynatraceApplicationPerformanceMonitoringOutput{})
	pulumi.RegisterOutputType(SpringCloudDynatraceApplicationPerformanceMonitoringArrayOutput{})
	pulumi.RegisterOutputType(SpringCloudDynatraceApplicationPerformanceMonitoringMapOutput{})
}
