// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appplatform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > **NOTE:** This resource is applicable only for Spring Cloud Service with enterprise tier.
//
// Manages a Spring Cloud Dev Tool Portal.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/appplatform"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := core.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleSpringCloudService, err := appplatform.NewSpringCloudService(ctx, "exampleSpringCloudService", &appplatform.SpringCloudServiceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				SkuName:           pulumi.String("E0"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = appplatform.NewSpringCloudDevToolPortal(ctx, "exampleSpringCloudDevToolPortal", &appplatform.SpringCloudDevToolPortalArgs{
//				SpringCloudServiceId:       exampleSpringCloudService.ID(),
//				PublicNetworkAccessEnabled: pulumi.Bool(true),
//				Sso: &appplatform.SpringCloudDevToolPortalSsoArgs{
//					ClientId:     pulumi.String("example id"),
//					ClientSecret: pulumi.String("example secret"),
//					MetadataUrl:  pulumi.String(fmt.Sprintf("https://login.microsoftonline.com/%v/v2.0/.well-known/openid-configuration", current.TenantId)),
//					Scopes: pulumi.StringArray{
//						pulumi.String("openid"),
//						pulumi.String("profile"),
//						pulumi.String("email"),
//					},
//				},
//				ApplicationAcceleratorEnabled: pulumi.Bool(true),
//				ApplicationLiveViewEnabled:    pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Spring Cloud Dev Tool Portals can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:appplatform/springCloudDevToolPortal:SpringCloudDevToolPortal example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resourceGroup1/providers/Microsoft.AppPlatform/Spring/service1/DevToolPortals/default
//
// ```
type SpringCloudDevToolPortal struct {
	pulumi.CustomResourceState

	// Should the Accelerator plugin be enabled?
	ApplicationAcceleratorEnabled pulumi.BoolOutput `pulumi:"applicationAcceleratorEnabled"`
	// Should the Application Live View be enabled?
	ApplicationLiveViewEnabled pulumi.BoolOutput `pulumi:"applicationLiveViewEnabled"`
	// The name which should be used for this Spring Cloud Dev Tool Portal. The only possible value is `default`. Changing this forces a new Spring Cloud Dev Tool Portal to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Is public network access enabled?
	PublicNetworkAccessEnabled pulumi.BoolPtrOutput `pulumi:"publicNetworkAccessEnabled"`
	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Dev Tool Portal to be created.
	SpringCloudServiceId pulumi.StringOutput `pulumi:"springCloudServiceId"`
	// A `sso` block as defined below.
	Sso SpringCloudDevToolPortalSsoPtrOutput `pulumi:"sso"`
}

// NewSpringCloudDevToolPortal registers a new resource with the given unique name, arguments, and options.
func NewSpringCloudDevToolPortal(ctx *pulumi.Context,
	name string, args *SpringCloudDevToolPortalArgs, opts ...pulumi.ResourceOption) (*SpringCloudDevToolPortal, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SpringCloudServiceId == nil {
		return nil, errors.New("invalid value for required argument 'SpringCloudServiceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SpringCloudDevToolPortal
	err := ctx.RegisterResource("azure:appplatform/springCloudDevToolPortal:SpringCloudDevToolPortal", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpringCloudDevToolPortal gets an existing SpringCloudDevToolPortal resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpringCloudDevToolPortal(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpringCloudDevToolPortalState, opts ...pulumi.ResourceOption) (*SpringCloudDevToolPortal, error) {
	var resource SpringCloudDevToolPortal
	err := ctx.ReadResource("azure:appplatform/springCloudDevToolPortal:SpringCloudDevToolPortal", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SpringCloudDevToolPortal resources.
type springCloudDevToolPortalState struct {
	// Should the Accelerator plugin be enabled?
	ApplicationAcceleratorEnabled *bool `pulumi:"applicationAcceleratorEnabled"`
	// Should the Application Live View be enabled?
	ApplicationLiveViewEnabled *bool `pulumi:"applicationLiveViewEnabled"`
	// The name which should be used for this Spring Cloud Dev Tool Portal. The only possible value is `default`. Changing this forces a new Spring Cloud Dev Tool Portal to be created.
	Name *string `pulumi:"name"`
	// Is public network access enabled?
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Dev Tool Portal to be created.
	SpringCloudServiceId *string `pulumi:"springCloudServiceId"`
	// A `sso` block as defined below.
	Sso *SpringCloudDevToolPortalSso `pulumi:"sso"`
}

type SpringCloudDevToolPortalState struct {
	// Should the Accelerator plugin be enabled?
	ApplicationAcceleratorEnabled pulumi.BoolPtrInput
	// Should the Application Live View be enabled?
	ApplicationLiveViewEnabled pulumi.BoolPtrInput
	// The name which should be used for this Spring Cloud Dev Tool Portal. The only possible value is `default`. Changing this forces a new Spring Cloud Dev Tool Portal to be created.
	Name pulumi.StringPtrInput
	// Is public network access enabled?
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Dev Tool Portal to be created.
	SpringCloudServiceId pulumi.StringPtrInput
	// A `sso` block as defined below.
	Sso SpringCloudDevToolPortalSsoPtrInput
}

func (SpringCloudDevToolPortalState) ElementType() reflect.Type {
	return reflect.TypeOf((*springCloudDevToolPortalState)(nil)).Elem()
}

type springCloudDevToolPortalArgs struct {
	// Should the Accelerator plugin be enabled?
	ApplicationAcceleratorEnabled *bool `pulumi:"applicationAcceleratorEnabled"`
	// Should the Application Live View be enabled?
	ApplicationLiveViewEnabled *bool `pulumi:"applicationLiveViewEnabled"`
	// The name which should be used for this Spring Cloud Dev Tool Portal. The only possible value is `default`. Changing this forces a new Spring Cloud Dev Tool Portal to be created.
	Name *string `pulumi:"name"`
	// Is public network access enabled?
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Dev Tool Portal to be created.
	SpringCloudServiceId string `pulumi:"springCloudServiceId"`
	// A `sso` block as defined below.
	Sso *SpringCloudDevToolPortalSso `pulumi:"sso"`
}

// The set of arguments for constructing a SpringCloudDevToolPortal resource.
type SpringCloudDevToolPortalArgs struct {
	// Should the Accelerator plugin be enabled?
	ApplicationAcceleratorEnabled pulumi.BoolPtrInput
	// Should the Application Live View be enabled?
	ApplicationLiveViewEnabled pulumi.BoolPtrInput
	// The name which should be used for this Spring Cloud Dev Tool Portal. The only possible value is `default`. Changing this forces a new Spring Cloud Dev Tool Portal to be created.
	Name pulumi.StringPtrInput
	// Is public network access enabled?
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Dev Tool Portal to be created.
	SpringCloudServiceId pulumi.StringInput
	// A `sso` block as defined below.
	Sso SpringCloudDevToolPortalSsoPtrInput
}

func (SpringCloudDevToolPortalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*springCloudDevToolPortalArgs)(nil)).Elem()
}

type SpringCloudDevToolPortalInput interface {
	pulumi.Input

	ToSpringCloudDevToolPortalOutput() SpringCloudDevToolPortalOutput
	ToSpringCloudDevToolPortalOutputWithContext(ctx context.Context) SpringCloudDevToolPortalOutput
}

func (*SpringCloudDevToolPortal) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudDevToolPortal)(nil)).Elem()
}

func (i *SpringCloudDevToolPortal) ToSpringCloudDevToolPortalOutput() SpringCloudDevToolPortalOutput {
	return i.ToSpringCloudDevToolPortalOutputWithContext(context.Background())
}

func (i *SpringCloudDevToolPortal) ToSpringCloudDevToolPortalOutputWithContext(ctx context.Context) SpringCloudDevToolPortalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudDevToolPortalOutput)
}

// SpringCloudDevToolPortalArrayInput is an input type that accepts SpringCloudDevToolPortalArray and SpringCloudDevToolPortalArrayOutput values.
// You can construct a concrete instance of `SpringCloudDevToolPortalArrayInput` via:
//
//	SpringCloudDevToolPortalArray{ SpringCloudDevToolPortalArgs{...} }
type SpringCloudDevToolPortalArrayInput interface {
	pulumi.Input

	ToSpringCloudDevToolPortalArrayOutput() SpringCloudDevToolPortalArrayOutput
	ToSpringCloudDevToolPortalArrayOutputWithContext(context.Context) SpringCloudDevToolPortalArrayOutput
}

type SpringCloudDevToolPortalArray []SpringCloudDevToolPortalInput

func (SpringCloudDevToolPortalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpringCloudDevToolPortal)(nil)).Elem()
}

func (i SpringCloudDevToolPortalArray) ToSpringCloudDevToolPortalArrayOutput() SpringCloudDevToolPortalArrayOutput {
	return i.ToSpringCloudDevToolPortalArrayOutputWithContext(context.Background())
}

func (i SpringCloudDevToolPortalArray) ToSpringCloudDevToolPortalArrayOutputWithContext(ctx context.Context) SpringCloudDevToolPortalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudDevToolPortalArrayOutput)
}

// SpringCloudDevToolPortalMapInput is an input type that accepts SpringCloudDevToolPortalMap and SpringCloudDevToolPortalMapOutput values.
// You can construct a concrete instance of `SpringCloudDevToolPortalMapInput` via:
//
//	SpringCloudDevToolPortalMap{ "key": SpringCloudDevToolPortalArgs{...} }
type SpringCloudDevToolPortalMapInput interface {
	pulumi.Input

	ToSpringCloudDevToolPortalMapOutput() SpringCloudDevToolPortalMapOutput
	ToSpringCloudDevToolPortalMapOutputWithContext(context.Context) SpringCloudDevToolPortalMapOutput
}

type SpringCloudDevToolPortalMap map[string]SpringCloudDevToolPortalInput

func (SpringCloudDevToolPortalMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpringCloudDevToolPortal)(nil)).Elem()
}

func (i SpringCloudDevToolPortalMap) ToSpringCloudDevToolPortalMapOutput() SpringCloudDevToolPortalMapOutput {
	return i.ToSpringCloudDevToolPortalMapOutputWithContext(context.Background())
}

func (i SpringCloudDevToolPortalMap) ToSpringCloudDevToolPortalMapOutputWithContext(ctx context.Context) SpringCloudDevToolPortalMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudDevToolPortalMapOutput)
}

type SpringCloudDevToolPortalOutput struct{ *pulumi.OutputState }

func (SpringCloudDevToolPortalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudDevToolPortal)(nil)).Elem()
}

func (o SpringCloudDevToolPortalOutput) ToSpringCloudDevToolPortalOutput() SpringCloudDevToolPortalOutput {
	return o
}

func (o SpringCloudDevToolPortalOutput) ToSpringCloudDevToolPortalOutputWithContext(ctx context.Context) SpringCloudDevToolPortalOutput {
	return o
}

// Should the Accelerator plugin be enabled?
func (o SpringCloudDevToolPortalOutput) ApplicationAcceleratorEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SpringCloudDevToolPortal) pulumi.BoolOutput { return v.ApplicationAcceleratorEnabled }).(pulumi.BoolOutput)
}

// Should the Application Live View be enabled?
func (o SpringCloudDevToolPortalOutput) ApplicationLiveViewEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SpringCloudDevToolPortal) pulumi.BoolOutput { return v.ApplicationLiveViewEnabled }).(pulumi.BoolOutput)
}

// The name which should be used for this Spring Cloud Dev Tool Portal. The only possible value is `default`. Changing this forces a new Spring Cloud Dev Tool Portal to be created.
func (o SpringCloudDevToolPortalOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SpringCloudDevToolPortal) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Is public network access enabled?
func (o SpringCloudDevToolPortalOutput) PublicNetworkAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SpringCloudDevToolPortal) pulumi.BoolPtrOutput { return v.PublicNetworkAccessEnabled }).(pulumi.BoolPtrOutput)
}

// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Dev Tool Portal to be created.
func (o SpringCloudDevToolPortalOutput) SpringCloudServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SpringCloudDevToolPortal) pulumi.StringOutput { return v.SpringCloudServiceId }).(pulumi.StringOutput)
}

// A `sso` block as defined below.
func (o SpringCloudDevToolPortalOutput) Sso() SpringCloudDevToolPortalSsoPtrOutput {
	return o.ApplyT(func(v *SpringCloudDevToolPortal) SpringCloudDevToolPortalSsoPtrOutput { return v.Sso }).(SpringCloudDevToolPortalSsoPtrOutput)
}

type SpringCloudDevToolPortalArrayOutput struct{ *pulumi.OutputState }

func (SpringCloudDevToolPortalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpringCloudDevToolPortal)(nil)).Elem()
}

func (o SpringCloudDevToolPortalArrayOutput) ToSpringCloudDevToolPortalArrayOutput() SpringCloudDevToolPortalArrayOutput {
	return o
}

func (o SpringCloudDevToolPortalArrayOutput) ToSpringCloudDevToolPortalArrayOutputWithContext(ctx context.Context) SpringCloudDevToolPortalArrayOutput {
	return o
}

func (o SpringCloudDevToolPortalArrayOutput) Index(i pulumi.IntInput) SpringCloudDevToolPortalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SpringCloudDevToolPortal {
		return vs[0].([]*SpringCloudDevToolPortal)[vs[1].(int)]
	}).(SpringCloudDevToolPortalOutput)
}

type SpringCloudDevToolPortalMapOutput struct{ *pulumi.OutputState }

func (SpringCloudDevToolPortalMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpringCloudDevToolPortal)(nil)).Elem()
}

func (o SpringCloudDevToolPortalMapOutput) ToSpringCloudDevToolPortalMapOutput() SpringCloudDevToolPortalMapOutput {
	return o
}

func (o SpringCloudDevToolPortalMapOutput) ToSpringCloudDevToolPortalMapOutputWithContext(ctx context.Context) SpringCloudDevToolPortalMapOutput {
	return o
}

func (o SpringCloudDevToolPortalMapOutput) MapIndex(k pulumi.StringInput) SpringCloudDevToolPortalOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SpringCloudDevToolPortal {
		return vs[0].(map[string]*SpringCloudDevToolPortal)[vs[1].(string)]
	}).(SpringCloudDevToolPortalOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudDevToolPortalInput)(nil)).Elem(), &SpringCloudDevToolPortal{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudDevToolPortalArrayInput)(nil)).Elem(), SpringCloudDevToolPortalArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudDevToolPortalMapInput)(nil)).Elem(), SpringCloudDevToolPortalMap{})
	pulumi.RegisterOutputType(SpringCloudDevToolPortalOutput{})
	pulumi.RegisterOutputType(SpringCloudDevToolPortalArrayOutput{})
	pulumi.RegisterOutputType(SpringCloudDevToolPortalMapOutput{})
}
