// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appplatform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > **NOTE:** This resource is applicable only for Spring Cloud Service with enterprise tier.
//
// Manages a Spring Cloud Application Live View.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/appplatform"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleSpringCloudService, err := appplatform.NewSpringCloudService(ctx, "exampleSpringCloudService", &appplatform.SpringCloudServiceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				SkuName:           pulumi.String("E0"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = appplatform.NewSpringCloudApplicationLiveView(ctx, "exampleSpringCloudApplicationLiveView", &appplatform.SpringCloudApplicationLiveViewArgs{
//				SpringCloudServiceId: exampleSpringCloudService.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Spring Cloud Application Live Views can be imported using the `resource id`, e.g. g
//
// ```sh
//
//	$ pulumi import azure:appplatform/springCloudApplicationLiveView:SpringCloudApplicationLiveView example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resourceGroup1/providers/Microsoft.AppPlatform/spring/service1/applicationLiveViews/default
//
// ```
type SpringCloudApplicationLiveView struct {
	pulumi.CustomResourceState

	// The name which should be used for this Spring Cloud Application Live View. Changing this forces a new Spring Cloud Application Live View to be created. The only possible value is `default`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Application Live View to be created.
	SpringCloudServiceId pulumi.StringOutput `pulumi:"springCloudServiceId"`
}

// NewSpringCloudApplicationLiveView registers a new resource with the given unique name, arguments, and options.
func NewSpringCloudApplicationLiveView(ctx *pulumi.Context,
	name string, args *SpringCloudApplicationLiveViewArgs, opts ...pulumi.ResourceOption) (*SpringCloudApplicationLiveView, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SpringCloudServiceId == nil {
		return nil, errors.New("invalid value for required argument 'SpringCloudServiceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SpringCloudApplicationLiveView
	err := ctx.RegisterResource("azure:appplatform/springCloudApplicationLiveView:SpringCloudApplicationLiveView", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpringCloudApplicationLiveView gets an existing SpringCloudApplicationLiveView resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpringCloudApplicationLiveView(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpringCloudApplicationLiveViewState, opts ...pulumi.ResourceOption) (*SpringCloudApplicationLiveView, error) {
	var resource SpringCloudApplicationLiveView
	err := ctx.ReadResource("azure:appplatform/springCloudApplicationLiveView:SpringCloudApplicationLiveView", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SpringCloudApplicationLiveView resources.
type springCloudApplicationLiveViewState struct {
	// The name which should be used for this Spring Cloud Application Live View. Changing this forces a new Spring Cloud Application Live View to be created. The only possible value is `default`.
	Name *string `pulumi:"name"`
	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Application Live View to be created.
	SpringCloudServiceId *string `pulumi:"springCloudServiceId"`
}

type SpringCloudApplicationLiveViewState struct {
	// The name which should be used for this Spring Cloud Application Live View. Changing this forces a new Spring Cloud Application Live View to be created. The only possible value is `default`.
	Name pulumi.StringPtrInput
	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Application Live View to be created.
	SpringCloudServiceId pulumi.StringPtrInput
}

func (SpringCloudApplicationLiveViewState) ElementType() reflect.Type {
	return reflect.TypeOf((*springCloudApplicationLiveViewState)(nil)).Elem()
}

type springCloudApplicationLiveViewArgs struct {
	// The name which should be used for this Spring Cloud Application Live View. Changing this forces a new Spring Cloud Application Live View to be created. The only possible value is `default`.
	Name *string `pulumi:"name"`
	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Application Live View to be created.
	SpringCloudServiceId string `pulumi:"springCloudServiceId"`
}

// The set of arguments for constructing a SpringCloudApplicationLiveView resource.
type SpringCloudApplicationLiveViewArgs struct {
	// The name which should be used for this Spring Cloud Application Live View. Changing this forces a new Spring Cloud Application Live View to be created. The only possible value is `default`.
	Name pulumi.StringPtrInput
	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Application Live View to be created.
	SpringCloudServiceId pulumi.StringInput
}

func (SpringCloudApplicationLiveViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*springCloudApplicationLiveViewArgs)(nil)).Elem()
}

type SpringCloudApplicationLiveViewInput interface {
	pulumi.Input

	ToSpringCloudApplicationLiveViewOutput() SpringCloudApplicationLiveViewOutput
	ToSpringCloudApplicationLiveViewOutputWithContext(ctx context.Context) SpringCloudApplicationLiveViewOutput
}

func (*SpringCloudApplicationLiveView) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudApplicationLiveView)(nil)).Elem()
}

func (i *SpringCloudApplicationLiveView) ToSpringCloudApplicationLiveViewOutput() SpringCloudApplicationLiveViewOutput {
	return i.ToSpringCloudApplicationLiveViewOutputWithContext(context.Background())
}

func (i *SpringCloudApplicationLiveView) ToSpringCloudApplicationLiveViewOutputWithContext(ctx context.Context) SpringCloudApplicationLiveViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudApplicationLiveViewOutput)
}

// SpringCloudApplicationLiveViewArrayInput is an input type that accepts SpringCloudApplicationLiveViewArray and SpringCloudApplicationLiveViewArrayOutput values.
// You can construct a concrete instance of `SpringCloudApplicationLiveViewArrayInput` via:
//
//	SpringCloudApplicationLiveViewArray{ SpringCloudApplicationLiveViewArgs{...} }
type SpringCloudApplicationLiveViewArrayInput interface {
	pulumi.Input

	ToSpringCloudApplicationLiveViewArrayOutput() SpringCloudApplicationLiveViewArrayOutput
	ToSpringCloudApplicationLiveViewArrayOutputWithContext(context.Context) SpringCloudApplicationLiveViewArrayOutput
}

type SpringCloudApplicationLiveViewArray []SpringCloudApplicationLiveViewInput

func (SpringCloudApplicationLiveViewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpringCloudApplicationLiveView)(nil)).Elem()
}

func (i SpringCloudApplicationLiveViewArray) ToSpringCloudApplicationLiveViewArrayOutput() SpringCloudApplicationLiveViewArrayOutput {
	return i.ToSpringCloudApplicationLiveViewArrayOutputWithContext(context.Background())
}

func (i SpringCloudApplicationLiveViewArray) ToSpringCloudApplicationLiveViewArrayOutputWithContext(ctx context.Context) SpringCloudApplicationLiveViewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudApplicationLiveViewArrayOutput)
}

// SpringCloudApplicationLiveViewMapInput is an input type that accepts SpringCloudApplicationLiveViewMap and SpringCloudApplicationLiveViewMapOutput values.
// You can construct a concrete instance of `SpringCloudApplicationLiveViewMapInput` via:
//
//	SpringCloudApplicationLiveViewMap{ "key": SpringCloudApplicationLiveViewArgs{...} }
type SpringCloudApplicationLiveViewMapInput interface {
	pulumi.Input

	ToSpringCloudApplicationLiveViewMapOutput() SpringCloudApplicationLiveViewMapOutput
	ToSpringCloudApplicationLiveViewMapOutputWithContext(context.Context) SpringCloudApplicationLiveViewMapOutput
}

type SpringCloudApplicationLiveViewMap map[string]SpringCloudApplicationLiveViewInput

func (SpringCloudApplicationLiveViewMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpringCloudApplicationLiveView)(nil)).Elem()
}

func (i SpringCloudApplicationLiveViewMap) ToSpringCloudApplicationLiveViewMapOutput() SpringCloudApplicationLiveViewMapOutput {
	return i.ToSpringCloudApplicationLiveViewMapOutputWithContext(context.Background())
}

func (i SpringCloudApplicationLiveViewMap) ToSpringCloudApplicationLiveViewMapOutputWithContext(ctx context.Context) SpringCloudApplicationLiveViewMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudApplicationLiveViewMapOutput)
}

type SpringCloudApplicationLiveViewOutput struct{ *pulumi.OutputState }

func (SpringCloudApplicationLiveViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudApplicationLiveView)(nil)).Elem()
}

func (o SpringCloudApplicationLiveViewOutput) ToSpringCloudApplicationLiveViewOutput() SpringCloudApplicationLiveViewOutput {
	return o
}

func (o SpringCloudApplicationLiveViewOutput) ToSpringCloudApplicationLiveViewOutputWithContext(ctx context.Context) SpringCloudApplicationLiveViewOutput {
	return o
}

// The name which should be used for this Spring Cloud Application Live View. Changing this forces a new Spring Cloud Application Live View to be created. The only possible value is `default`.
func (o SpringCloudApplicationLiveViewOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SpringCloudApplicationLiveView) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Application Live View to be created.
func (o SpringCloudApplicationLiveViewOutput) SpringCloudServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SpringCloudApplicationLiveView) pulumi.StringOutput { return v.SpringCloudServiceId }).(pulumi.StringOutput)
}

type SpringCloudApplicationLiveViewArrayOutput struct{ *pulumi.OutputState }

func (SpringCloudApplicationLiveViewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpringCloudApplicationLiveView)(nil)).Elem()
}

func (o SpringCloudApplicationLiveViewArrayOutput) ToSpringCloudApplicationLiveViewArrayOutput() SpringCloudApplicationLiveViewArrayOutput {
	return o
}

func (o SpringCloudApplicationLiveViewArrayOutput) ToSpringCloudApplicationLiveViewArrayOutputWithContext(ctx context.Context) SpringCloudApplicationLiveViewArrayOutput {
	return o
}

func (o SpringCloudApplicationLiveViewArrayOutput) Index(i pulumi.IntInput) SpringCloudApplicationLiveViewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SpringCloudApplicationLiveView {
		return vs[0].([]*SpringCloudApplicationLiveView)[vs[1].(int)]
	}).(SpringCloudApplicationLiveViewOutput)
}

type SpringCloudApplicationLiveViewMapOutput struct{ *pulumi.OutputState }

func (SpringCloudApplicationLiveViewMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpringCloudApplicationLiveView)(nil)).Elem()
}

func (o SpringCloudApplicationLiveViewMapOutput) ToSpringCloudApplicationLiveViewMapOutput() SpringCloudApplicationLiveViewMapOutput {
	return o
}

func (o SpringCloudApplicationLiveViewMapOutput) ToSpringCloudApplicationLiveViewMapOutputWithContext(ctx context.Context) SpringCloudApplicationLiveViewMapOutput {
	return o
}

func (o SpringCloudApplicationLiveViewMapOutput) MapIndex(k pulumi.StringInput) SpringCloudApplicationLiveViewOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SpringCloudApplicationLiveView {
		return vs[0].(map[string]*SpringCloudApplicationLiveView)[vs[1].(string)]
	}).(SpringCloudApplicationLiveViewOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudApplicationLiveViewInput)(nil)).Elem(), &SpringCloudApplicationLiveView{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudApplicationLiveViewArrayInput)(nil)).Elem(), SpringCloudApplicationLiveViewArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudApplicationLiveViewMapInput)(nil)).Elem(), SpringCloudApplicationLiveViewMap{})
	pulumi.RegisterOutputType(SpringCloudApplicationLiveViewOutput{})
	pulumi.RegisterOutputType(SpringCloudApplicationLiveViewArrayOutput{})
	pulumi.RegisterOutputType(SpringCloudApplicationLiveViewMapOutput{})
}
