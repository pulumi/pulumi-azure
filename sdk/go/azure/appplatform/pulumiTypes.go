// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appplatform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type SpringCloudApiPortalSso struct {
	// The public identifier for the application.
	ClientId *string `pulumi:"clientId"`
	// The secret known only to the application and the authorization server.
	ClientSecret *string `pulumi:"clientSecret"`
	// The URI of Issuer Identifier.
	IssuerUri *string `pulumi:"issuerUri"`
	// It defines the specific actions applications can be allowed to do on a user's behalf.
	Scopes []string `pulumi:"scopes"`
}

// SpringCloudApiPortalSsoInput is an input type that accepts SpringCloudApiPortalSsoArgs and SpringCloudApiPortalSsoOutput values.
// You can construct a concrete instance of `SpringCloudApiPortalSsoInput` via:
//
//	SpringCloudApiPortalSsoArgs{...}
type SpringCloudApiPortalSsoInput interface {
	pulumi.Input

	ToSpringCloudApiPortalSsoOutput() SpringCloudApiPortalSsoOutput
	ToSpringCloudApiPortalSsoOutputWithContext(context.Context) SpringCloudApiPortalSsoOutput
}

type SpringCloudApiPortalSsoArgs struct {
	// The public identifier for the application.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// The secret known only to the application and the authorization server.
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	// The URI of Issuer Identifier.
	IssuerUri pulumi.StringPtrInput `pulumi:"issuerUri"`
	// It defines the specific actions applications can be allowed to do on a user's behalf.
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
}

func (SpringCloudApiPortalSsoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudApiPortalSso)(nil)).Elem()
}

func (i SpringCloudApiPortalSsoArgs) ToSpringCloudApiPortalSsoOutput() SpringCloudApiPortalSsoOutput {
	return i.ToSpringCloudApiPortalSsoOutputWithContext(context.Background())
}

func (i SpringCloudApiPortalSsoArgs) ToSpringCloudApiPortalSsoOutputWithContext(ctx context.Context) SpringCloudApiPortalSsoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudApiPortalSsoOutput)
}

func (i SpringCloudApiPortalSsoArgs) ToSpringCloudApiPortalSsoPtrOutput() SpringCloudApiPortalSsoPtrOutput {
	return i.ToSpringCloudApiPortalSsoPtrOutputWithContext(context.Background())
}

func (i SpringCloudApiPortalSsoArgs) ToSpringCloudApiPortalSsoPtrOutputWithContext(ctx context.Context) SpringCloudApiPortalSsoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudApiPortalSsoOutput).ToSpringCloudApiPortalSsoPtrOutputWithContext(ctx)
}

// SpringCloudApiPortalSsoPtrInput is an input type that accepts SpringCloudApiPortalSsoArgs, SpringCloudApiPortalSsoPtr and SpringCloudApiPortalSsoPtrOutput values.
// You can construct a concrete instance of `SpringCloudApiPortalSsoPtrInput` via:
//
//	        SpringCloudApiPortalSsoArgs{...}
//
//	or:
//
//	        nil
type SpringCloudApiPortalSsoPtrInput interface {
	pulumi.Input

	ToSpringCloudApiPortalSsoPtrOutput() SpringCloudApiPortalSsoPtrOutput
	ToSpringCloudApiPortalSsoPtrOutputWithContext(context.Context) SpringCloudApiPortalSsoPtrOutput
}

type springCloudApiPortalSsoPtrType SpringCloudApiPortalSsoArgs

func SpringCloudApiPortalSsoPtr(v *SpringCloudApiPortalSsoArgs) SpringCloudApiPortalSsoPtrInput {
	return (*springCloudApiPortalSsoPtrType)(v)
}

func (*springCloudApiPortalSsoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudApiPortalSso)(nil)).Elem()
}

func (i *springCloudApiPortalSsoPtrType) ToSpringCloudApiPortalSsoPtrOutput() SpringCloudApiPortalSsoPtrOutput {
	return i.ToSpringCloudApiPortalSsoPtrOutputWithContext(context.Background())
}

func (i *springCloudApiPortalSsoPtrType) ToSpringCloudApiPortalSsoPtrOutputWithContext(ctx context.Context) SpringCloudApiPortalSsoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudApiPortalSsoPtrOutput)
}

type SpringCloudApiPortalSsoOutput struct{ *pulumi.OutputState }

func (SpringCloudApiPortalSsoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudApiPortalSso)(nil)).Elem()
}

func (o SpringCloudApiPortalSsoOutput) ToSpringCloudApiPortalSsoOutput() SpringCloudApiPortalSsoOutput {
	return o
}

func (o SpringCloudApiPortalSsoOutput) ToSpringCloudApiPortalSsoOutputWithContext(ctx context.Context) SpringCloudApiPortalSsoOutput {
	return o
}

func (o SpringCloudApiPortalSsoOutput) ToSpringCloudApiPortalSsoPtrOutput() SpringCloudApiPortalSsoPtrOutput {
	return o.ToSpringCloudApiPortalSsoPtrOutputWithContext(context.Background())
}

func (o SpringCloudApiPortalSsoOutput) ToSpringCloudApiPortalSsoPtrOutputWithContext(ctx context.Context) SpringCloudApiPortalSsoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpringCloudApiPortalSso) *SpringCloudApiPortalSso {
		return &v
	}).(SpringCloudApiPortalSsoPtrOutput)
}

// The public identifier for the application.
func (o SpringCloudApiPortalSsoOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudApiPortalSso) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The secret known only to the application and the authorization server.
func (o SpringCloudApiPortalSsoOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudApiPortalSso) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// The URI of Issuer Identifier.
func (o SpringCloudApiPortalSsoOutput) IssuerUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudApiPortalSso) *string { return v.IssuerUri }).(pulumi.StringPtrOutput)
}

// It defines the specific actions applications can be allowed to do on a user's behalf.
func (o SpringCloudApiPortalSsoOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SpringCloudApiPortalSso) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

type SpringCloudApiPortalSsoPtrOutput struct{ *pulumi.OutputState }

func (SpringCloudApiPortalSsoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudApiPortalSso)(nil)).Elem()
}

func (o SpringCloudApiPortalSsoPtrOutput) ToSpringCloudApiPortalSsoPtrOutput() SpringCloudApiPortalSsoPtrOutput {
	return o
}

func (o SpringCloudApiPortalSsoPtrOutput) ToSpringCloudApiPortalSsoPtrOutputWithContext(ctx context.Context) SpringCloudApiPortalSsoPtrOutput {
	return o
}

func (o SpringCloudApiPortalSsoPtrOutput) Elem() SpringCloudApiPortalSsoOutput {
	return o.ApplyT(func(v *SpringCloudApiPortalSso) SpringCloudApiPortalSso {
		if v != nil {
			return *v
		}
		var ret SpringCloudApiPortalSso
		return ret
	}).(SpringCloudApiPortalSsoOutput)
}

// The public identifier for the application.
func (o SpringCloudApiPortalSsoPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudApiPortalSso) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The secret known only to the application and the authorization server.
func (o SpringCloudApiPortalSsoPtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudApiPortalSso) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// The URI of Issuer Identifier.
func (o SpringCloudApiPortalSsoPtrOutput) IssuerUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudApiPortalSso) *string {
		if v == nil {
			return nil
		}
		return v.IssuerUri
	}).(pulumi.StringPtrOutput)
}

// It defines the specific actions applications can be allowed to do on a user's behalf.
func (o SpringCloudApiPortalSsoPtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SpringCloudApiPortalSso) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

type SpringCloudAppCustomPersistentDisk struct {
	// These are the mount options for a persistent disk.
	MountOptions []string `pulumi:"mountOptions"`
	// The mount path of the persistent disk.
	MountPath string `pulumi:"mountPath"`
	// Indicates whether the persistent disk is a readOnly one.
	ReadOnlyEnabled *bool `pulumi:"readOnlyEnabled"`
	// The share name of the Azure File share.
	ShareName string `pulumi:"shareName"`
	// The name of the Spring Cloud Storage.
	StorageName string `pulumi:"storageName"`
}

// SpringCloudAppCustomPersistentDiskInput is an input type that accepts SpringCloudAppCustomPersistentDiskArgs and SpringCloudAppCustomPersistentDiskOutput values.
// You can construct a concrete instance of `SpringCloudAppCustomPersistentDiskInput` via:
//
//	SpringCloudAppCustomPersistentDiskArgs{...}
type SpringCloudAppCustomPersistentDiskInput interface {
	pulumi.Input

	ToSpringCloudAppCustomPersistentDiskOutput() SpringCloudAppCustomPersistentDiskOutput
	ToSpringCloudAppCustomPersistentDiskOutputWithContext(context.Context) SpringCloudAppCustomPersistentDiskOutput
}

type SpringCloudAppCustomPersistentDiskArgs struct {
	// These are the mount options for a persistent disk.
	MountOptions pulumi.StringArrayInput `pulumi:"mountOptions"`
	// The mount path of the persistent disk.
	MountPath pulumi.StringInput `pulumi:"mountPath"`
	// Indicates whether the persistent disk is a readOnly one.
	ReadOnlyEnabled pulumi.BoolPtrInput `pulumi:"readOnlyEnabled"`
	// The share name of the Azure File share.
	ShareName pulumi.StringInput `pulumi:"shareName"`
	// The name of the Spring Cloud Storage.
	StorageName pulumi.StringInput `pulumi:"storageName"`
}

func (SpringCloudAppCustomPersistentDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudAppCustomPersistentDisk)(nil)).Elem()
}

func (i SpringCloudAppCustomPersistentDiskArgs) ToSpringCloudAppCustomPersistentDiskOutput() SpringCloudAppCustomPersistentDiskOutput {
	return i.ToSpringCloudAppCustomPersistentDiskOutputWithContext(context.Background())
}

func (i SpringCloudAppCustomPersistentDiskArgs) ToSpringCloudAppCustomPersistentDiskOutputWithContext(ctx context.Context) SpringCloudAppCustomPersistentDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudAppCustomPersistentDiskOutput)
}

// SpringCloudAppCustomPersistentDiskArrayInput is an input type that accepts SpringCloudAppCustomPersistentDiskArray and SpringCloudAppCustomPersistentDiskArrayOutput values.
// You can construct a concrete instance of `SpringCloudAppCustomPersistentDiskArrayInput` via:
//
//	SpringCloudAppCustomPersistentDiskArray{ SpringCloudAppCustomPersistentDiskArgs{...} }
type SpringCloudAppCustomPersistentDiskArrayInput interface {
	pulumi.Input

	ToSpringCloudAppCustomPersistentDiskArrayOutput() SpringCloudAppCustomPersistentDiskArrayOutput
	ToSpringCloudAppCustomPersistentDiskArrayOutputWithContext(context.Context) SpringCloudAppCustomPersistentDiskArrayOutput
}

type SpringCloudAppCustomPersistentDiskArray []SpringCloudAppCustomPersistentDiskInput

func (SpringCloudAppCustomPersistentDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpringCloudAppCustomPersistentDisk)(nil)).Elem()
}

func (i SpringCloudAppCustomPersistentDiskArray) ToSpringCloudAppCustomPersistentDiskArrayOutput() SpringCloudAppCustomPersistentDiskArrayOutput {
	return i.ToSpringCloudAppCustomPersistentDiskArrayOutputWithContext(context.Background())
}

func (i SpringCloudAppCustomPersistentDiskArray) ToSpringCloudAppCustomPersistentDiskArrayOutputWithContext(ctx context.Context) SpringCloudAppCustomPersistentDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudAppCustomPersistentDiskArrayOutput)
}

type SpringCloudAppCustomPersistentDiskOutput struct{ *pulumi.OutputState }

func (SpringCloudAppCustomPersistentDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudAppCustomPersistentDisk)(nil)).Elem()
}

func (o SpringCloudAppCustomPersistentDiskOutput) ToSpringCloudAppCustomPersistentDiskOutput() SpringCloudAppCustomPersistentDiskOutput {
	return o
}

func (o SpringCloudAppCustomPersistentDiskOutput) ToSpringCloudAppCustomPersistentDiskOutputWithContext(ctx context.Context) SpringCloudAppCustomPersistentDiskOutput {
	return o
}

// These are the mount options for a persistent disk.
func (o SpringCloudAppCustomPersistentDiskOutput) MountOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SpringCloudAppCustomPersistentDisk) []string { return v.MountOptions }).(pulumi.StringArrayOutput)
}

// The mount path of the persistent disk.
func (o SpringCloudAppCustomPersistentDiskOutput) MountPath() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudAppCustomPersistentDisk) string { return v.MountPath }).(pulumi.StringOutput)
}

// Indicates whether the persistent disk is a readOnly one.
func (o SpringCloudAppCustomPersistentDiskOutput) ReadOnlyEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SpringCloudAppCustomPersistentDisk) *bool { return v.ReadOnlyEnabled }).(pulumi.BoolPtrOutput)
}

// The share name of the Azure File share.
func (o SpringCloudAppCustomPersistentDiskOutput) ShareName() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudAppCustomPersistentDisk) string { return v.ShareName }).(pulumi.StringOutput)
}

// The name of the Spring Cloud Storage.
func (o SpringCloudAppCustomPersistentDiskOutput) StorageName() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudAppCustomPersistentDisk) string { return v.StorageName }).(pulumi.StringOutput)
}

type SpringCloudAppCustomPersistentDiskArrayOutput struct{ *pulumi.OutputState }

func (SpringCloudAppCustomPersistentDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpringCloudAppCustomPersistentDisk)(nil)).Elem()
}

func (o SpringCloudAppCustomPersistentDiskArrayOutput) ToSpringCloudAppCustomPersistentDiskArrayOutput() SpringCloudAppCustomPersistentDiskArrayOutput {
	return o
}

func (o SpringCloudAppCustomPersistentDiskArrayOutput) ToSpringCloudAppCustomPersistentDiskArrayOutputWithContext(ctx context.Context) SpringCloudAppCustomPersistentDiskArrayOutput {
	return o
}

func (o SpringCloudAppCustomPersistentDiskArrayOutput) Index(i pulumi.IntInput) SpringCloudAppCustomPersistentDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SpringCloudAppCustomPersistentDisk {
		return vs[0].([]SpringCloudAppCustomPersistentDisk)[vs[1].(int)]
	}).(SpringCloudAppCustomPersistentDiskOutput)
}

type SpringCloudAppIdentity struct {
	// A list of User Assigned Managed Identity IDs to be assigned to this Spring Cloud Application.
	//
	// > **NOTE:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
	IdentityIds []string `pulumi:"identityIds"`
	// The Principal ID for the Service Principal associated with the Managed Service Identity of this Spring Cloud Application.
	PrincipalId *string `pulumi:"principalId"`
	// The Tenant ID for the Service Principal associated with the Managed Service Identity of this Spring Cloud Application.
	TenantId *string `pulumi:"tenantId"`
	// Specifies the type of Managed Service Identity that should be configured on this Spring Cloud Application. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both).
	Type string `pulumi:"type"`
}

// SpringCloudAppIdentityInput is an input type that accepts SpringCloudAppIdentityArgs and SpringCloudAppIdentityOutput values.
// You can construct a concrete instance of `SpringCloudAppIdentityInput` via:
//
//	SpringCloudAppIdentityArgs{...}
type SpringCloudAppIdentityInput interface {
	pulumi.Input

	ToSpringCloudAppIdentityOutput() SpringCloudAppIdentityOutput
	ToSpringCloudAppIdentityOutputWithContext(context.Context) SpringCloudAppIdentityOutput
}

type SpringCloudAppIdentityArgs struct {
	// A list of User Assigned Managed Identity IDs to be assigned to this Spring Cloud Application.
	//
	// > **NOTE:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	// The Principal ID for the Service Principal associated with the Managed Service Identity of this Spring Cloud Application.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The Tenant ID for the Service Principal associated with the Managed Service Identity of this Spring Cloud Application.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// Specifies the type of Managed Service Identity that should be configured on this Spring Cloud Application. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both).
	Type pulumi.StringInput `pulumi:"type"`
}

func (SpringCloudAppIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudAppIdentity)(nil)).Elem()
}

func (i SpringCloudAppIdentityArgs) ToSpringCloudAppIdentityOutput() SpringCloudAppIdentityOutput {
	return i.ToSpringCloudAppIdentityOutputWithContext(context.Background())
}

func (i SpringCloudAppIdentityArgs) ToSpringCloudAppIdentityOutputWithContext(ctx context.Context) SpringCloudAppIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudAppIdentityOutput)
}

func (i SpringCloudAppIdentityArgs) ToSpringCloudAppIdentityPtrOutput() SpringCloudAppIdentityPtrOutput {
	return i.ToSpringCloudAppIdentityPtrOutputWithContext(context.Background())
}

func (i SpringCloudAppIdentityArgs) ToSpringCloudAppIdentityPtrOutputWithContext(ctx context.Context) SpringCloudAppIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudAppIdentityOutput).ToSpringCloudAppIdentityPtrOutputWithContext(ctx)
}

// SpringCloudAppIdentityPtrInput is an input type that accepts SpringCloudAppIdentityArgs, SpringCloudAppIdentityPtr and SpringCloudAppIdentityPtrOutput values.
// You can construct a concrete instance of `SpringCloudAppIdentityPtrInput` via:
//
//	        SpringCloudAppIdentityArgs{...}
//
//	or:
//
//	        nil
type SpringCloudAppIdentityPtrInput interface {
	pulumi.Input

	ToSpringCloudAppIdentityPtrOutput() SpringCloudAppIdentityPtrOutput
	ToSpringCloudAppIdentityPtrOutputWithContext(context.Context) SpringCloudAppIdentityPtrOutput
}

type springCloudAppIdentityPtrType SpringCloudAppIdentityArgs

func SpringCloudAppIdentityPtr(v *SpringCloudAppIdentityArgs) SpringCloudAppIdentityPtrInput {
	return (*springCloudAppIdentityPtrType)(v)
}

func (*springCloudAppIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudAppIdentity)(nil)).Elem()
}

func (i *springCloudAppIdentityPtrType) ToSpringCloudAppIdentityPtrOutput() SpringCloudAppIdentityPtrOutput {
	return i.ToSpringCloudAppIdentityPtrOutputWithContext(context.Background())
}

func (i *springCloudAppIdentityPtrType) ToSpringCloudAppIdentityPtrOutputWithContext(ctx context.Context) SpringCloudAppIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudAppIdentityPtrOutput)
}

type SpringCloudAppIdentityOutput struct{ *pulumi.OutputState }

func (SpringCloudAppIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudAppIdentity)(nil)).Elem()
}

func (o SpringCloudAppIdentityOutput) ToSpringCloudAppIdentityOutput() SpringCloudAppIdentityOutput {
	return o
}

func (o SpringCloudAppIdentityOutput) ToSpringCloudAppIdentityOutputWithContext(ctx context.Context) SpringCloudAppIdentityOutput {
	return o
}

func (o SpringCloudAppIdentityOutput) ToSpringCloudAppIdentityPtrOutput() SpringCloudAppIdentityPtrOutput {
	return o.ToSpringCloudAppIdentityPtrOutputWithContext(context.Background())
}

func (o SpringCloudAppIdentityOutput) ToSpringCloudAppIdentityPtrOutputWithContext(ctx context.Context) SpringCloudAppIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpringCloudAppIdentity) *SpringCloudAppIdentity {
		return &v
	}).(SpringCloudAppIdentityPtrOutput)
}

// A list of User Assigned Managed Identity IDs to be assigned to this Spring Cloud Application.
//
// > **NOTE:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
func (o SpringCloudAppIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SpringCloudAppIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

// The Principal ID for the Service Principal associated with the Managed Service Identity of this Spring Cloud Application.
func (o SpringCloudAppIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudAppIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The Tenant ID for the Service Principal associated with the Managed Service Identity of this Spring Cloud Application.
func (o SpringCloudAppIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudAppIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this Spring Cloud Application. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both).
func (o SpringCloudAppIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudAppIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type SpringCloudAppIdentityPtrOutput struct{ *pulumi.OutputState }

func (SpringCloudAppIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudAppIdentity)(nil)).Elem()
}

func (o SpringCloudAppIdentityPtrOutput) ToSpringCloudAppIdentityPtrOutput() SpringCloudAppIdentityPtrOutput {
	return o
}

func (o SpringCloudAppIdentityPtrOutput) ToSpringCloudAppIdentityPtrOutputWithContext(ctx context.Context) SpringCloudAppIdentityPtrOutput {
	return o
}

func (o SpringCloudAppIdentityPtrOutput) Elem() SpringCloudAppIdentityOutput {
	return o.ApplyT(func(v *SpringCloudAppIdentity) SpringCloudAppIdentity {
		if v != nil {
			return *v
		}
		var ret SpringCloudAppIdentity
		return ret
	}).(SpringCloudAppIdentityOutput)
}

// A list of User Assigned Managed Identity IDs to be assigned to this Spring Cloud Application.
//
// > **NOTE:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
func (o SpringCloudAppIdentityPtrOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SpringCloudAppIdentity) []string {
		if v == nil {
			return nil
		}
		return v.IdentityIds
	}).(pulumi.StringArrayOutput)
}

// The Principal ID for the Service Principal associated with the Managed Service Identity of this Spring Cloud Application.
func (o SpringCloudAppIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudAppIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The Tenant ID for the Service Principal associated with the Managed Service Identity of this Spring Cloud Application.
func (o SpringCloudAppIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudAppIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this Spring Cloud Application. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both).
func (o SpringCloudAppIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudAppIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type SpringCloudAppIngressSettings struct {
	// Specifies how ingress should communicate with this app backend service. Allowed values are `GRPC` and `Default`. Defaults to `Default`.
	BackendProtocol *string `pulumi:"backendProtocol"`
	// Specifies the ingress read time out in seconds. Defaults to `300`.
	ReadTimeoutInSeconds *int `pulumi:"readTimeoutInSeconds"`
	// Specifies the ingress send time out in seconds. Defaults to `60`.
	SendTimeoutInSeconds *int `pulumi:"sendTimeoutInSeconds"`
	// Specifies the type of the affinity, set this to `Cookie` to enable session affinity. Allowed values are `Cookie` and `None`. Defaults to `None`.
	SessionAffinity *string `pulumi:"sessionAffinity"`
	// Specifies the time in seconds until the cookie expires.
	SessionCookieMaxAge *int `pulumi:"sessionCookieMaxAge"`
}

// SpringCloudAppIngressSettingsInput is an input type that accepts SpringCloudAppIngressSettingsArgs and SpringCloudAppIngressSettingsOutput values.
// You can construct a concrete instance of `SpringCloudAppIngressSettingsInput` via:
//
//	SpringCloudAppIngressSettingsArgs{...}
type SpringCloudAppIngressSettingsInput interface {
	pulumi.Input

	ToSpringCloudAppIngressSettingsOutput() SpringCloudAppIngressSettingsOutput
	ToSpringCloudAppIngressSettingsOutputWithContext(context.Context) SpringCloudAppIngressSettingsOutput
}

type SpringCloudAppIngressSettingsArgs struct {
	// Specifies how ingress should communicate with this app backend service. Allowed values are `GRPC` and `Default`. Defaults to `Default`.
	BackendProtocol pulumi.StringPtrInput `pulumi:"backendProtocol"`
	// Specifies the ingress read time out in seconds. Defaults to `300`.
	ReadTimeoutInSeconds pulumi.IntPtrInput `pulumi:"readTimeoutInSeconds"`
	// Specifies the ingress send time out in seconds. Defaults to `60`.
	SendTimeoutInSeconds pulumi.IntPtrInput `pulumi:"sendTimeoutInSeconds"`
	// Specifies the type of the affinity, set this to `Cookie` to enable session affinity. Allowed values are `Cookie` and `None`. Defaults to `None`.
	SessionAffinity pulumi.StringPtrInput `pulumi:"sessionAffinity"`
	// Specifies the time in seconds until the cookie expires.
	SessionCookieMaxAge pulumi.IntPtrInput `pulumi:"sessionCookieMaxAge"`
}

func (SpringCloudAppIngressSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudAppIngressSettings)(nil)).Elem()
}

func (i SpringCloudAppIngressSettingsArgs) ToSpringCloudAppIngressSettingsOutput() SpringCloudAppIngressSettingsOutput {
	return i.ToSpringCloudAppIngressSettingsOutputWithContext(context.Background())
}

func (i SpringCloudAppIngressSettingsArgs) ToSpringCloudAppIngressSettingsOutputWithContext(ctx context.Context) SpringCloudAppIngressSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudAppIngressSettingsOutput)
}

func (i SpringCloudAppIngressSettingsArgs) ToSpringCloudAppIngressSettingsPtrOutput() SpringCloudAppIngressSettingsPtrOutput {
	return i.ToSpringCloudAppIngressSettingsPtrOutputWithContext(context.Background())
}

func (i SpringCloudAppIngressSettingsArgs) ToSpringCloudAppIngressSettingsPtrOutputWithContext(ctx context.Context) SpringCloudAppIngressSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudAppIngressSettingsOutput).ToSpringCloudAppIngressSettingsPtrOutputWithContext(ctx)
}

// SpringCloudAppIngressSettingsPtrInput is an input type that accepts SpringCloudAppIngressSettingsArgs, SpringCloudAppIngressSettingsPtr and SpringCloudAppIngressSettingsPtrOutput values.
// You can construct a concrete instance of `SpringCloudAppIngressSettingsPtrInput` via:
//
//	        SpringCloudAppIngressSettingsArgs{...}
//
//	or:
//
//	        nil
type SpringCloudAppIngressSettingsPtrInput interface {
	pulumi.Input

	ToSpringCloudAppIngressSettingsPtrOutput() SpringCloudAppIngressSettingsPtrOutput
	ToSpringCloudAppIngressSettingsPtrOutputWithContext(context.Context) SpringCloudAppIngressSettingsPtrOutput
}

type springCloudAppIngressSettingsPtrType SpringCloudAppIngressSettingsArgs

func SpringCloudAppIngressSettingsPtr(v *SpringCloudAppIngressSettingsArgs) SpringCloudAppIngressSettingsPtrInput {
	return (*springCloudAppIngressSettingsPtrType)(v)
}

func (*springCloudAppIngressSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudAppIngressSettings)(nil)).Elem()
}

func (i *springCloudAppIngressSettingsPtrType) ToSpringCloudAppIngressSettingsPtrOutput() SpringCloudAppIngressSettingsPtrOutput {
	return i.ToSpringCloudAppIngressSettingsPtrOutputWithContext(context.Background())
}

func (i *springCloudAppIngressSettingsPtrType) ToSpringCloudAppIngressSettingsPtrOutputWithContext(ctx context.Context) SpringCloudAppIngressSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudAppIngressSettingsPtrOutput)
}

type SpringCloudAppIngressSettingsOutput struct{ *pulumi.OutputState }

func (SpringCloudAppIngressSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudAppIngressSettings)(nil)).Elem()
}

func (o SpringCloudAppIngressSettingsOutput) ToSpringCloudAppIngressSettingsOutput() SpringCloudAppIngressSettingsOutput {
	return o
}

func (o SpringCloudAppIngressSettingsOutput) ToSpringCloudAppIngressSettingsOutputWithContext(ctx context.Context) SpringCloudAppIngressSettingsOutput {
	return o
}

func (o SpringCloudAppIngressSettingsOutput) ToSpringCloudAppIngressSettingsPtrOutput() SpringCloudAppIngressSettingsPtrOutput {
	return o.ToSpringCloudAppIngressSettingsPtrOutputWithContext(context.Background())
}

func (o SpringCloudAppIngressSettingsOutput) ToSpringCloudAppIngressSettingsPtrOutputWithContext(ctx context.Context) SpringCloudAppIngressSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpringCloudAppIngressSettings) *SpringCloudAppIngressSettings {
		return &v
	}).(SpringCloudAppIngressSettingsPtrOutput)
}

// Specifies how ingress should communicate with this app backend service. Allowed values are `GRPC` and `Default`. Defaults to `Default`.
func (o SpringCloudAppIngressSettingsOutput) BackendProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudAppIngressSettings) *string { return v.BackendProtocol }).(pulumi.StringPtrOutput)
}

// Specifies the ingress read time out in seconds. Defaults to `300`.
func (o SpringCloudAppIngressSettingsOutput) ReadTimeoutInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SpringCloudAppIngressSettings) *int { return v.ReadTimeoutInSeconds }).(pulumi.IntPtrOutput)
}

// Specifies the ingress send time out in seconds. Defaults to `60`.
func (o SpringCloudAppIngressSettingsOutput) SendTimeoutInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SpringCloudAppIngressSettings) *int { return v.SendTimeoutInSeconds }).(pulumi.IntPtrOutput)
}

// Specifies the type of the affinity, set this to `Cookie` to enable session affinity. Allowed values are `Cookie` and `None`. Defaults to `None`.
func (o SpringCloudAppIngressSettingsOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudAppIngressSettings) *string { return v.SessionAffinity }).(pulumi.StringPtrOutput)
}

// Specifies the time in seconds until the cookie expires.
func (o SpringCloudAppIngressSettingsOutput) SessionCookieMaxAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SpringCloudAppIngressSettings) *int { return v.SessionCookieMaxAge }).(pulumi.IntPtrOutput)
}

type SpringCloudAppIngressSettingsPtrOutput struct{ *pulumi.OutputState }

func (SpringCloudAppIngressSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudAppIngressSettings)(nil)).Elem()
}

func (o SpringCloudAppIngressSettingsPtrOutput) ToSpringCloudAppIngressSettingsPtrOutput() SpringCloudAppIngressSettingsPtrOutput {
	return o
}

func (o SpringCloudAppIngressSettingsPtrOutput) ToSpringCloudAppIngressSettingsPtrOutputWithContext(ctx context.Context) SpringCloudAppIngressSettingsPtrOutput {
	return o
}

func (o SpringCloudAppIngressSettingsPtrOutput) Elem() SpringCloudAppIngressSettingsOutput {
	return o.ApplyT(func(v *SpringCloudAppIngressSettings) SpringCloudAppIngressSettings {
		if v != nil {
			return *v
		}
		var ret SpringCloudAppIngressSettings
		return ret
	}).(SpringCloudAppIngressSettingsOutput)
}

// Specifies how ingress should communicate with this app backend service. Allowed values are `GRPC` and `Default`. Defaults to `Default`.
func (o SpringCloudAppIngressSettingsPtrOutput) BackendProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudAppIngressSettings) *string {
		if v == nil {
			return nil
		}
		return v.BackendProtocol
	}).(pulumi.StringPtrOutput)
}

// Specifies the ingress read time out in seconds. Defaults to `300`.
func (o SpringCloudAppIngressSettingsPtrOutput) ReadTimeoutInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SpringCloudAppIngressSettings) *int {
		if v == nil {
			return nil
		}
		return v.ReadTimeoutInSeconds
	}).(pulumi.IntPtrOutput)
}

// Specifies the ingress send time out in seconds. Defaults to `60`.
func (o SpringCloudAppIngressSettingsPtrOutput) SendTimeoutInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SpringCloudAppIngressSettings) *int {
		if v == nil {
			return nil
		}
		return v.SendTimeoutInSeconds
	}).(pulumi.IntPtrOutput)
}

// Specifies the type of the affinity, set this to `Cookie` to enable session affinity. Allowed values are `Cookie` and `None`. Defaults to `None`.
func (o SpringCloudAppIngressSettingsPtrOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudAppIngressSettings) *string {
		if v == nil {
			return nil
		}
		return v.SessionAffinity
	}).(pulumi.StringPtrOutput)
}

// Specifies the time in seconds until the cookie expires.
func (o SpringCloudAppIngressSettingsPtrOutput) SessionCookieMaxAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SpringCloudAppIngressSettings) *int {
		if v == nil {
			return nil
		}
		return v.SessionCookieMaxAge
	}).(pulumi.IntPtrOutput)
}

type SpringCloudAppPersistentDisk struct {
	// Specifies the mount path of the persistent disk. Defaults to `/persistent`.
	MountPath *string `pulumi:"mountPath"`
	// Specifies the size of the persistent disk in GB. Possible values are between `0` and `50`.
	SizeInGb int `pulumi:"sizeInGb"`
}

// SpringCloudAppPersistentDiskInput is an input type that accepts SpringCloudAppPersistentDiskArgs and SpringCloudAppPersistentDiskOutput values.
// You can construct a concrete instance of `SpringCloudAppPersistentDiskInput` via:
//
//	SpringCloudAppPersistentDiskArgs{...}
type SpringCloudAppPersistentDiskInput interface {
	pulumi.Input

	ToSpringCloudAppPersistentDiskOutput() SpringCloudAppPersistentDiskOutput
	ToSpringCloudAppPersistentDiskOutputWithContext(context.Context) SpringCloudAppPersistentDiskOutput
}

type SpringCloudAppPersistentDiskArgs struct {
	// Specifies the mount path of the persistent disk. Defaults to `/persistent`.
	MountPath pulumi.StringPtrInput `pulumi:"mountPath"`
	// Specifies the size of the persistent disk in GB. Possible values are between `0` and `50`.
	SizeInGb pulumi.IntInput `pulumi:"sizeInGb"`
}

func (SpringCloudAppPersistentDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudAppPersistentDisk)(nil)).Elem()
}

func (i SpringCloudAppPersistentDiskArgs) ToSpringCloudAppPersistentDiskOutput() SpringCloudAppPersistentDiskOutput {
	return i.ToSpringCloudAppPersistentDiskOutputWithContext(context.Background())
}

func (i SpringCloudAppPersistentDiskArgs) ToSpringCloudAppPersistentDiskOutputWithContext(ctx context.Context) SpringCloudAppPersistentDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudAppPersistentDiskOutput)
}

func (i SpringCloudAppPersistentDiskArgs) ToSpringCloudAppPersistentDiskPtrOutput() SpringCloudAppPersistentDiskPtrOutput {
	return i.ToSpringCloudAppPersistentDiskPtrOutputWithContext(context.Background())
}

func (i SpringCloudAppPersistentDiskArgs) ToSpringCloudAppPersistentDiskPtrOutputWithContext(ctx context.Context) SpringCloudAppPersistentDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudAppPersistentDiskOutput).ToSpringCloudAppPersistentDiskPtrOutputWithContext(ctx)
}

// SpringCloudAppPersistentDiskPtrInput is an input type that accepts SpringCloudAppPersistentDiskArgs, SpringCloudAppPersistentDiskPtr and SpringCloudAppPersistentDiskPtrOutput values.
// You can construct a concrete instance of `SpringCloudAppPersistentDiskPtrInput` via:
//
//	        SpringCloudAppPersistentDiskArgs{...}
//
//	or:
//
//	        nil
type SpringCloudAppPersistentDiskPtrInput interface {
	pulumi.Input

	ToSpringCloudAppPersistentDiskPtrOutput() SpringCloudAppPersistentDiskPtrOutput
	ToSpringCloudAppPersistentDiskPtrOutputWithContext(context.Context) SpringCloudAppPersistentDiskPtrOutput
}

type springCloudAppPersistentDiskPtrType SpringCloudAppPersistentDiskArgs

func SpringCloudAppPersistentDiskPtr(v *SpringCloudAppPersistentDiskArgs) SpringCloudAppPersistentDiskPtrInput {
	return (*springCloudAppPersistentDiskPtrType)(v)
}

func (*springCloudAppPersistentDiskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudAppPersistentDisk)(nil)).Elem()
}

func (i *springCloudAppPersistentDiskPtrType) ToSpringCloudAppPersistentDiskPtrOutput() SpringCloudAppPersistentDiskPtrOutput {
	return i.ToSpringCloudAppPersistentDiskPtrOutputWithContext(context.Background())
}

func (i *springCloudAppPersistentDiskPtrType) ToSpringCloudAppPersistentDiskPtrOutputWithContext(ctx context.Context) SpringCloudAppPersistentDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudAppPersistentDiskPtrOutput)
}

type SpringCloudAppPersistentDiskOutput struct{ *pulumi.OutputState }

func (SpringCloudAppPersistentDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudAppPersistentDisk)(nil)).Elem()
}

func (o SpringCloudAppPersistentDiskOutput) ToSpringCloudAppPersistentDiskOutput() SpringCloudAppPersistentDiskOutput {
	return o
}

func (o SpringCloudAppPersistentDiskOutput) ToSpringCloudAppPersistentDiskOutputWithContext(ctx context.Context) SpringCloudAppPersistentDiskOutput {
	return o
}

func (o SpringCloudAppPersistentDiskOutput) ToSpringCloudAppPersistentDiskPtrOutput() SpringCloudAppPersistentDiskPtrOutput {
	return o.ToSpringCloudAppPersistentDiskPtrOutputWithContext(context.Background())
}

func (o SpringCloudAppPersistentDiskOutput) ToSpringCloudAppPersistentDiskPtrOutputWithContext(ctx context.Context) SpringCloudAppPersistentDiskPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpringCloudAppPersistentDisk) *SpringCloudAppPersistentDisk {
		return &v
	}).(SpringCloudAppPersistentDiskPtrOutput)
}

// Specifies the mount path of the persistent disk. Defaults to `/persistent`.
func (o SpringCloudAppPersistentDiskOutput) MountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudAppPersistentDisk) *string { return v.MountPath }).(pulumi.StringPtrOutput)
}

// Specifies the size of the persistent disk in GB. Possible values are between `0` and `50`.
func (o SpringCloudAppPersistentDiskOutput) SizeInGb() pulumi.IntOutput {
	return o.ApplyT(func(v SpringCloudAppPersistentDisk) int { return v.SizeInGb }).(pulumi.IntOutput)
}

type SpringCloudAppPersistentDiskPtrOutput struct{ *pulumi.OutputState }

func (SpringCloudAppPersistentDiskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudAppPersistentDisk)(nil)).Elem()
}

func (o SpringCloudAppPersistentDiskPtrOutput) ToSpringCloudAppPersistentDiskPtrOutput() SpringCloudAppPersistentDiskPtrOutput {
	return o
}

func (o SpringCloudAppPersistentDiskPtrOutput) ToSpringCloudAppPersistentDiskPtrOutputWithContext(ctx context.Context) SpringCloudAppPersistentDiskPtrOutput {
	return o
}

func (o SpringCloudAppPersistentDiskPtrOutput) Elem() SpringCloudAppPersistentDiskOutput {
	return o.ApplyT(func(v *SpringCloudAppPersistentDisk) SpringCloudAppPersistentDisk {
		if v != nil {
			return *v
		}
		var ret SpringCloudAppPersistentDisk
		return ret
	}).(SpringCloudAppPersistentDiskOutput)
}

// Specifies the mount path of the persistent disk. Defaults to `/persistent`.
func (o SpringCloudAppPersistentDiskPtrOutput) MountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudAppPersistentDisk) *string {
		if v == nil {
			return nil
		}
		return v.MountPath
	}).(pulumi.StringPtrOutput)
}

// Specifies the size of the persistent disk in GB. Possible values are between `0` and `50`.
func (o SpringCloudAppPersistentDiskPtrOutput) SizeInGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SpringCloudAppPersistentDisk) *int {
		if v == nil {
			return nil
		}
		return &v.SizeInGb
	}).(pulumi.IntPtrOutput)
}

type SpringCloudBuildDeploymentQuota struct {
	// Specifies the required cpu of the Spring Cloud Deployment. Possible Values are `500m`, `1`, `2`, `3` and `4`. Defaults to `1` if not specified.
	//
	// > **Note:** `cpu` supports `500m` and `1` for Basic tier, `500m`, `1`, `2`, `3` and `4` for Standard tier.
	Cpu *string `pulumi:"cpu"`
	// Specifies the required memory size of the Spring Cloud Deployment. Possible Values are `512Mi`, `1Gi`, `2Gi`, `3Gi`, `4Gi`, `5Gi`, `6Gi`, `7Gi`, and `8Gi`. Defaults to `1Gi` if not specified.
	//
	// > **Note:** `memory` supports `512Mi`, `1Gi` and `2Gi` for Basic tier, `512Mi`, `1Gi`, `2Gi`, `3Gi`, `4Gi`, `5Gi`, `6Gi`, `7Gi`, and `8Gi` for Standard tier.
	Memory *string `pulumi:"memory"`
}

// SpringCloudBuildDeploymentQuotaInput is an input type that accepts SpringCloudBuildDeploymentQuotaArgs and SpringCloudBuildDeploymentQuotaOutput values.
// You can construct a concrete instance of `SpringCloudBuildDeploymentQuotaInput` via:
//
//	SpringCloudBuildDeploymentQuotaArgs{...}
type SpringCloudBuildDeploymentQuotaInput interface {
	pulumi.Input

	ToSpringCloudBuildDeploymentQuotaOutput() SpringCloudBuildDeploymentQuotaOutput
	ToSpringCloudBuildDeploymentQuotaOutputWithContext(context.Context) SpringCloudBuildDeploymentQuotaOutput
}

type SpringCloudBuildDeploymentQuotaArgs struct {
	// Specifies the required cpu of the Spring Cloud Deployment. Possible Values are `500m`, `1`, `2`, `3` and `4`. Defaults to `1` if not specified.
	//
	// > **Note:** `cpu` supports `500m` and `1` for Basic tier, `500m`, `1`, `2`, `3` and `4` for Standard tier.
	Cpu pulumi.StringPtrInput `pulumi:"cpu"`
	// Specifies the required memory size of the Spring Cloud Deployment. Possible Values are `512Mi`, `1Gi`, `2Gi`, `3Gi`, `4Gi`, `5Gi`, `6Gi`, `7Gi`, and `8Gi`. Defaults to `1Gi` if not specified.
	//
	// > **Note:** `memory` supports `512Mi`, `1Gi` and `2Gi` for Basic tier, `512Mi`, `1Gi`, `2Gi`, `3Gi`, `4Gi`, `5Gi`, `6Gi`, `7Gi`, and `8Gi` for Standard tier.
	Memory pulumi.StringPtrInput `pulumi:"memory"`
}

func (SpringCloudBuildDeploymentQuotaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudBuildDeploymentQuota)(nil)).Elem()
}

func (i SpringCloudBuildDeploymentQuotaArgs) ToSpringCloudBuildDeploymentQuotaOutput() SpringCloudBuildDeploymentQuotaOutput {
	return i.ToSpringCloudBuildDeploymentQuotaOutputWithContext(context.Background())
}

func (i SpringCloudBuildDeploymentQuotaArgs) ToSpringCloudBuildDeploymentQuotaOutputWithContext(ctx context.Context) SpringCloudBuildDeploymentQuotaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudBuildDeploymentQuotaOutput)
}

func (i SpringCloudBuildDeploymentQuotaArgs) ToSpringCloudBuildDeploymentQuotaPtrOutput() SpringCloudBuildDeploymentQuotaPtrOutput {
	return i.ToSpringCloudBuildDeploymentQuotaPtrOutputWithContext(context.Background())
}

func (i SpringCloudBuildDeploymentQuotaArgs) ToSpringCloudBuildDeploymentQuotaPtrOutputWithContext(ctx context.Context) SpringCloudBuildDeploymentQuotaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudBuildDeploymentQuotaOutput).ToSpringCloudBuildDeploymentQuotaPtrOutputWithContext(ctx)
}

// SpringCloudBuildDeploymentQuotaPtrInput is an input type that accepts SpringCloudBuildDeploymentQuotaArgs, SpringCloudBuildDeploymentQuotaPtr and SpringCloudBuildDeploymentQuotaPtrOutput values.
// You can construct a concrete instance of `SpringCloudBuildDeploymentQuotaPtrInput` via:
//
//	        SpringCloudBuildDeploymentQuotaArgs{...}
//
//	or:
//
//	        nil
type SpringCloudBuildDeploymentQuotaPtrInput interface {
	pulumi.Input

	ToSpringCloudBuildDeploymentQuotaPtrOutput() SpringCloudBuildDeploymentQuotaPtrOutput
	ToSpringCloudBuildDeploymentQuotaPtrOutputWithContext(context.Context) SpringCloudBuildDeploymentQuotaPtrOutput
}

type springCloudBuildDeploymentQuotaPtrType SpringCloudBuildDeploymentQuotaArgs

func SpringCloudBuildDeploymentQuotaPtr(v *SpringCloudBuildDeploymentQuotaArgs) SpringCloudBuildDeploymentQuotaPtrInput {
	return (*springCloudBuildDeploymentQuotaPtrType)(v)
}

func (*springCloudBuildDeploymentQuotaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudBuildDeploymentQuota)(nil)).Elem()
}

func (i *springCloudBuildDeploymentQuotaPtrType) ToSpringCloudBuildDeploymentQuotaPtrOutput() SpringCloudBuildDeploymentQuotaPtrOutput {
	return i.ToSpringCloudBuildDeploymentQuotaPtrOutputWithContext(context.Background())
}

func (i *springCloudBuildDeploymentQuotaPtrType) ToSpringCloudBuildDeploymentQuotaPtrOutputWithContext(ctx context.Context) SpringCloudBuildDeploymentQuotaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudBuildDeploymentQuotaPtrOutput)
}

type SpringCloudBuildDeploymentQuotaOutput struct{ *pulumi.OutputState }

func (SpringCloudBuildDeploymentQuotaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudBuildDeploymentQuota)(nil)).Elem()
}

func (o SpringCloudBuildDeploymentQuotaOutput) ToSpringCloudBuildDeploymentQuotaOutput() SpringCloudBuildDeploymentQuotaOutput {
	return o
}

func (o SpringCloudBuildDeploymentQuotaOutput) ToSpringCloudBuildDeploymentQuotaOutputWithContext(ctx context.Context) SpringCloudBuildDeploymentQuotaOutput {
	return o
}

func (o SpringCloudBuildDeploymentQuotaOutput) ToSpringCloudBuildDeploymentQuotaPtrOutput() SpringCloudBuildDeploymentQuotaPtrOutput {
	return o.ToSpringCloudBuildDeploymentQuotaPtrOutputWithContext(context.Background())
}

func (o SpringCloudBuildDeploymentQuotaOutput) ToSpringCloudBuildDeploymentQuotaPtrOutputWithContext(ctx context.Context) SpringCloudBuildDeploymentQuotaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpringCloudBuildDeploymentQuota) *SpringCloudBuildDeploymentQuota {
		return &v
	}).(SpringCloudBuildDeploymentQuotaPtrOutput)
}

// Specifies the required cpu of the Spring Cloud Deployment. Possible Values are `500m`, `1`, `2`, `3` and `4`. Defaults to `1` if not specified.
//
// > **Note:** `cpu` supports `500m` and `1` for Basic tier, `500m`, `1`, `2`, `3` and `4` for Standard tier.
func (o SpringCloudBuildDeploymentQuotaOutput) Cpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudBuildDeploymentQuota) *string { return v.Cpu }).(pulumi.StringPtrOutput)
}

// Specifies the required memory size of the Spring Cloud Deployment. Possible Values are `512Mi`, `1Gi`, `2Gi`, `3Gi`, `4Gi`, `5Gi`, `6Gi`, `7Gi`, and `8Gi`. Defaults to `1Gi` if not specified.
//
// > **Note:** `memory` supports `512Mi`, `1Gi` and `2Gi` for Basic tier, `512Mi`, `1Gi`, `2Gi`, `3Gi`, `4Gi`, `5Gi`, `6Gi`, `7Gi`, and `8Gi` for Standard tier.
func (o SpringCloudBuildDeploymentQuotaOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudBuildDeploymentQuota) *string { return v.Memory }).(pulumi.StringPtrOutput)
}

type SpringCloudBuildDeploymentQuotaPtrOutput struct{ *pulumi.OutputState }

func (SpringCloudBuildDeploymentQuotaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudBuildDeploymentQuota)(nil)).Elem()
}

func (o SpringCloudBuildDeploymentQuotaPtrOutput) ToSpringCloudBuildDeploymentQuotaPtrOutput() SpringCloudBuildDeploymentQuotaPtrOutput {
	return o
}

func (o SpringCloudBuildDeploymentQuotaPtrOutput) ToSpringCloudBuildDeploymentQuotaPtrOutputWithContext(ctx context.Context) SpringCloudBuildDeploymentQuotaPtrOutput {
	return o
}

func (o SpringCloudBuildDeploymentQuotaPtrOutput) Elem() SpringCloudBuildDeploymentQuotaOutput {
	return o.ApplyT(func(v *SpringCloudBuildDeploymentQuota) SpringCloudBuildDeploymentQuota {
		if v != nil {
			return *v
		}
		var ret SpringCloudBuildDeploymentQuota
		return ret
	}).(SpringCloudBuildDeploymentQuotaOutput)
}

// Specifies the required cpu of the Spring Cloud Deployment. Possible Values are `500m`, `1`, `2`, `3` and `4`. Defaults to `1` if not specified.
//
// > **Note:** `cpu` supports `500m` and `1` for Basic tier, `500m`, `1`, `2`, `3` and `4` for Standard tier.
func (o SpringCloudBuildDeploymentQuotaPtrOutput) Cpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudBuildDeploymentQuota) *string {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.StringPtrOutput)
}

// Specifies the required memory size of the Spring Cloud Deployment. Possible Values are `512Mi`, `1Gi`, `2Gi`, `3Gi`, `4Gi`, `5Gi`, `6Gi`, `7Gi`, and `8Gi`. Defaults to `1Gi` if not specified.
//
// > **Note:** `memory` supports `512Mi`, `1Gi` and `2Gi` for Basic tier, `512Mi`, `1Gi`, `2Gi`, `3Gi`, `4Gi`, `5Gi`, `6Gi`, `7Gi`, and `8Gi` for Standard tier.
func (o SpringCloudBuildDeploymentQuotaPtrOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudBuildDeploymentQuota) *string {
		if v == nil {
			return nil
		}
		return v.Memory
	}).(pulumi.StringPtrOutput)
}

type SpringCloudBuildPackBindingLaunch struct {
	// Specifies a map of non-sensitive properties for launchProperties.
	Properties map[string]string `pulumi:"properties"`
	// Specifies a map of sensitive properties for launchProperties.
	Secrets map[string]string `pulumi:"secrets"`
}

// SpringCloudBuildPackBindingLaunchInput is an input type that accepts SpringCloudBuildPackBindingLaunchArgs and SpringCloudBuildPackBindingLaunchOutput values.
// You can construct a concrete instance of `SpringCloudBuildPackBindingLaunchInput` via:
//
//	SpringCloudBuildPackBindingLaunchArgs{...}
type SpringCloudBuildPackBindingLaunchInput interface {
	pulumi.Input

	ToSpringCloudBuildPackBindingLaunchOutput() SpringCloudBuildPackBindingLaunchOutput
	ToSpringCloudBuildPackBindingLaunchOutputWithContext(context.Context) SpringCloudBuildPackBindingLaunchOutput
}

type SpringCloudBuildPackBindingLaunchArgs struct {
	// Specifies a map of non-sensitive properties for launchProperties.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Specifies a map of sensitive properties for launchProperties.
	Secrets pulumi.StringMapInput `pulumi:"secrets"`
}

func (SpringCloudBuildPackBindingLaunchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudBuildPackBindingLaunch)(nil)).Elem()
}

func (i SpringCloudBuildPackBindingLaunchArgs) ToSpringCloudBuildPackBindingLaunchOutput() SpringCloudBuildPackBindingLaunchOutput {
	return i.ToSpringCloudBuildPackBindingLaunchOutputWithContext(context.Background())
}

func (i SpringCloudBuildPackBindingLaunchArgs) ToSpringCloudBuildPackBindingLaunchOutputWithContext(ctx context.Context) SpringCloudBuildPackBindingLaunchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudBuildPackBindingLaunchOutput)
}

func (i SpringCloudBuildPackBindingLaunchArgs) ToSpringCloudBuildPackBindingLaunchPtrOutput() SpringCloudBuildPackBindingLaunchPtrOutput {
	return i.ToSpringCloudBuildPackBindingLaunchPtrOutputWithContext(context.Background())
}

func (i SpringCloudBuildPackBindingLaunchArgs) ToSpringCloudBuildPackBindingLaunchPtrOutputWithContext(ctx context.Context) SpringCloudBuildPackBindingLaunchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudBuildPackBindingLaunchOutput).ToSpringCloudBuildPackBindingLaunchPtrOutputWithContext(ctx)
}

// SpringCloudBuildPackBindingLaunchPtrInput is an input type that accepts SpringCloudBuildPackBindingLaunchArgs, SpringCloudBuildPackBindingLaunchPtr and SpringCloudBuildPackBindingLaunchPtrOutput values.
// You can construct a concrete instance of `SpringCloudBuildPackBindingLaunchPtrInput` via:
//
//	        SpringCloudBuildPackBindingLaunchArgs{...}
//
//	or:
//
//	        nil
type SpringCloudBuildPackBindingLaunchPtrInput interface {
	pulumi.Input

	ToSpringCloudBuildPackBindingLaunchPtrOutput() SpringCloudBuildPackBindingLaunchPtrOutput
	ToSpringCloudBuildPackBindingLaunchPtrOutputWithContext(context.Context) SpringCloudBuildPackBindingLaunchPtrOutput
}

type springCloudBuildPackBindingLaunchPtrType SpringCloudBuildPackBindingLaunchArgs

func SpringCloudBuildPackBindingLaunchPtr(v *SpringCloudBuildPackBindingLaunchArgs) SpringCloudBuildPackBindingLaunchPtrInput {
	return (*springCloudBuildPackBindingLaunchPtrType)(v)
}

func (*springCloudBuildPackBindingLaunchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudBuildPackBindingLaunch)(nil)).Elem()
}

func (i *springCloudBuildPackBindingLaunchPtrType) ToSpringCloudBuildPackBindingLaunchPtrOutput() SpringCloudBuildPackBindingLaunchPtrOutput {
	return i.ToSpringCloudBuildPackBindingLaunchPtrOutputWithContext(context.Background())
}

func (i *springCloudBuildPackBindingLaunchPtrType) ToSpringCloudBuildPackBindingLaunchPtrOutputWithContext(ctx context.Context) SpringCloudBuildPackBindingLaunchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudBuildPackBindingLaunchPtrOutput)
}

type SpringCloudBuildPackBindingLaunchOutput struct{ *pulumi.OutputState }

func (SpringCloudBuildPackBindingLaunchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudBuildPackBindingLaunch)(nil)).Elem()
}

func (o SpringCloudBuildPackBindingLaunchOutput) ToSpringCloudBuildPackBindingLaunchOutput() SpringCloudBuildPackBindingLaunchOutput {
	return o
}

func (o SpringCloudBuildPackBindingLaunchOutput) ToSpringCloudBuildPackBindingLaunchOutputWithContext(ctx context.Context) SpringCloudBuildPackBindingLaunchOutput {
	return o
}

func (o SpringCloudBuildPackBindingLaunchOutput) ToSpringCloudBuildPackBindingLaunchPtrOutput() SpringCloudBuildPackBindingLaunchPtrOutput {
	return o.ToSpringCloudBuildPackBindingLaunchPtrOutputWithContext(context.Background())
}

func (o SpringCloudBuildPackBindingLaunchOutput) ToSpringCloudBuildPackBindingLaunchPtrOutputWithContext(ctx context.Context) SpringCloudBuildPackBindingLaunchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpringCloudBuildPackBindingLaunch) *SpringCloudBuildPackBindingLaunch {
		return &v
	}).(SpringCloudBuildPackBindingLaunchPtrOutput)
}

// Specifies a map of non-sensitive properties for launchProperties.
func (o SpringCloudBuildPackBindingLaunchOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v SpringCloudBuildPackBindingLaunch) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Specifies a map of sensitive properties for launchProperties.
func (o SpringCloudBuildPackBindingLaunchOutput) Secrets() pulumi.StringMapOutput {
	return o.ApplyT(func(v SpringCloudBuildPackBindingLaunch) map[string]string { return v.Secrets }).(pulumi.StringMapOutput)
}

type SpringCloudBuildPackBindingLaunchPtrOutput struct{ *pulumi.OutputState }

func (SpringCloudBuildPackBindingLaunchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudBuildPackBindingLaunch)(nil)).Elem()
}

func (o SpringCloudBuildPackBindingLaunchPtrOutput) ToSpringCloudBuildPackBindingLaunchPtrOutput() SpringCloudBuildPackBindingLaunchPtrOutput {
	return o
}

func (o SpringCloudBuildPackBindingLaunchPtrOutput) ToSpringCloudBuildPackBindingLaunchPtrOutputWithContext(ctx context.Context) SpringCloudBuildPackBindingLaunchPtrOutput {
	return o
}

func (o SpringCloudBuildPackBindingLaunchPtrOutput) Elem() SpringCloudBuildPackBindingLaunchOutput {
	return o.ApplyT(func(v *SpringCloudBuildPackBindingLaunch) SpringCloudBuildPackBindingLaunch {
		if v != nil {
			return *v
		}
		var ret SpringCloudBuildPackBindingLaunch
		return ret
	}).(SpringCloudBuildPackBindingLaunchOutput)
}

// Specifies a map of non-sensitive properties for launchProperties.
func (o SpringCloudBuildPackBindingLaunchPtrOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SpringCloudBuildPackBindingLaunch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(pulumi.StringMapOutput)
}

// Specifies a map of sensitive properties for launchProperties.
func (o SpringCloudBuildPackBindingLaunchPtrOutput) Secrets() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SpringCloudBuildPackBindingLaunch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(pulumi.StringMapOutput)
}

type SpringCloudBuilderBuildPackGroup struct {
	// Specifies a list of the build pack's ID.
	BuildPackIds []string `pulumi:"buildPackIds"`
	// The name which should be used for this build pack group.
	Name string `pulumi:"name"`
}

// SpringCloudBuilderBuildPackGroupInput is an input type that accepts SpringCloudBuilderBuildPackGroupArgs and SpringCloudBuilderBuildPackGroupOutput values.
// You can construct a concrete instance of `SpringCloudBuilderBuildPackGroupInput` via:
//
//	SpringCloudBuilderBuildPackGroupArgs{...}
type SpringCloudBuilderBuildPackGroupInput interface {
	pulumi.Input

	ToSpringCloudBuilderBuildPackGroupOutput() SpringCloudBuilderBuildPackGroupOutput
	ToSpringCloudBuilderBuildPackGroupOutputWithContext(context.Context) SpringCloudBuilderBuildPackGroupOutput
}

type SpringCloudBuilderBuildPackGroupArgs struct {
	// Specifies a list of the build pack's ID.
	BuildPackIds pulumi.StringArrayInput `pulumi:"buildPackIds"`
	// The name which should be used for this build pack group.
	Name pulumi.StringInput `pulumi:"name"`
}

func (SpringCloudBuilderBuildPackGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudBuilderBuildPackGroup)(nil)).Elem()
}

func (i SpringCloudBuilderBuildPackGroupArgs) ToSpringCloudBuilderBuildPackGroupOutput() SpringCloudBuilderBuildPackGroupOutput {
	return i.ToSpringCloudBuilderBuildPackGroupOutputWithContext(context.Background())
}

func (i SpringCloudBuilderBuildPackGroupArgs) ToSpringCloudBuilderBuildPackGroupOutputWithContext(ctx context.Context) SpringCloudBuilderBuildPackGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudBuilderBuildPackGroupOutput)
}

// SpringCloudBuilderBuildPackGroupArrayInput is an input type that accepts SpringCloudBuilderBuildPackGroupArray and SpringCloudBuilderBuildPackGroupArrayOutput values.
// You can construct a concrete instance of `SpringCloudBuilderBuildPackGroupArrayInput` via:
//
//	SpringCloudBuilderBuildPackGroupArray{ SpringCloudBuilderBuildPackGroupArgs{...} }
type SpringCloudBuilderBuildPackGroupArrayInput interface {
	pulumi.Input

	ToSpringCloudBuilderBuildPackGroupArrayOutput() SpringCloudBuilderBuildPackGroupArrayOutput
	ToSpringCloudBuilderBuildPackGroupArrayOutputWithContext(context.Context) SpringCloudBuilderBuildPackGroupArrayOutput
}

type SpringCloudBuilderBuildPackGroupArray []SpringCloudBuilderBuildPackGroupInput

func (SpringCloudBuilderBuildPackGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpringCloudBuilderBuildPackGroup)(nil)).Elem()
}

func (i SpringCloudBuilderBuildPackGroupArray) ToSpringCloudBuilderBuildPackGroupArrayOutput() SpringCloudBuilderBuildPackGroupArrayOutput {
	return i.ToSpringCloudBuilderBuildPackGroupArrayOutputWithContext(context.Background())
}

func (i SpringCloudBuilderBuildPackGroupArray) ToSpringCloudBuilderBuildPackGroupArrayOutputWithContext(ctx context.Context) SpringCloudBuilderBuildPackGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudBuilderBuildPackGroupArrayOutput)
}

type SpringCloudBuilderBuildPackGroupOutput struct{ *pulumi.OutputState }

func (SpringCloudBuilderBuildPackGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudBuilderBuildPackGroup)(nil)).Elem()
}

func (o SpringCloudBuilderBuildPackGroupOutput) ToSpringCloudBuilderBuildPackGroupOutput() SpringCloudBuilderBuildPackGroupOutput {
	return o
}

func (o SpringCloudBuilderBuildPackGroupOutput) ToSpringCloudBuilderBuildPackGroupOutputWithContext(ctx context.Context) SpringCloudBuilderBuildPackGroupOutput {
	return o
}

// Specifies a list of the build pack's ID.
func (o SpringCloudBuilderBuildPackGroupOutput) BuildPackIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SpringCloudBuilderBuildPackGroup) []string { return v.BuildPackIds }).(pulumi.StringArrayOutput)
}

// The name which should be used for this build pack group.
func (o SpringCloudBuilderBuildPackGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudBuilderBuildPackGroup) string { return v.Name }).(pulumi.StringOutput)
}

type SpringCloudBuilderBuildPackGroupArrayOutput struct{ *pulumi.OutputState }

func (SpringCloudBuilderBuildPackGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpringCloudBuilderBuildPackGroup)(nil)).Elem()
}

func (o SpringCloudBuilderBuildPackGroupArrayOutput) ToSpringCloudBuilderBuildPackGroupArrayOutput() SpringCloudBuilderBuildPackGroupArrayOutput {
	return o
}

func (o SpringCloudBuilderBuildPackGroupArrayOutput) ToSpringCloudBuilderBuildPackGroupArrayOutputWithContext(ctx context.Context) SpringCloudBuilderBuildPackGroupArrayOutput {
	return o
}

func (o SpringCloudBuilderBuildPackGroupArrayOutput) Index(i pulumi.IntInput) SpringCloudBuilderBuildPackGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SpringCloudBuilderBuildPackGroup {
		return vs[0].([]SpringCloudBuilderBuildPackGroup)[vs[1].(int)]
	}).(SpringCloudBuilderBuildPackGroupOutput)
}

type SpringCloudBuilderStack struct {
	// Specifies the ID of the ClusterStack.
	Id string `pulumi:"id"`
	// Specifies the version of the ClusterStack
	Version string `pulumi:"version"`
}

// SpringCloudBuilderStackInput is an input type that accepts SpringCloudBuilderStackArgs and SpringCloudBuilderStackOutput values.
// You can construct a concrete instance of `SpringCloudBuilderStackInput` via:
//
//	SpringCloudBuilderStackArgs{...}
type SpringCloudBuilderStackInput interface {
	pulumi.Input

	ToSpringCloudBuilderStackOutput() SpringCloudBuilderStackOutput
	ToSpringCloudBuilderStackOutputWithContext(context.Context) SpringCloudBuilderStackOutput
}

type SpringCloudBuilderStackArgs struct {
	// Specifies the ID of the ClusterStack.
	Id pulumi.StringInput `pulumi:"id"`
	// Specifies the version of the ClusterStack
	Version pulumi.StringInput `pulumi:"version"`
}

func (SpringCloudBuilderStackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudBuilderStack)(nil)).Elem()
}

func (i SpringCloudBuilderStackArgs) ToSpringCloudBuilderStackOutput() SpringCloudBuilderStackOutput {
	return i.ToSpringCloudBuilderStackOutputWithContext(context.Background())
}

func (i SpringCloudBuilderStackArgs) ToSpringCloudBuilderStackOutputWithContext(ctx context.Context) SpringCloudBuilderStackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudBuilderStackOutput)
}

func (i SpringCloudBuilderStackArgs) ToSpringCloudBuilderStackPtrOutput() SpringCloudBuilderStackPtrOutput {
	return i.ToSpringCloudBuilderStackPtrOutputWithContext(context.Background())
}

func (i SpringCloudBuilderStackArgs) ToSpringCloudBuilderStackPtrOutputWithContext(ctx context.Context) SpringCloudBuilderStackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudBuilderStackOutput).ToSpringCloudBuilderStackPtrOutputWithContext(ctx)
}

// SpringCloudBuilderStackPtrInput is an input type that accepts SpringCloudBuilderStackArgs, SpringCloudBuilderStackPtr and SpringCloudBuilderStackPtrOutput values.
// You can construct a concrete instance of `SpringCloudBuilderStackPtrInput` via:
//
//	        SpringCloudBuilderStackArgs{...}
//
//	or:
//
//	        nil
type SpringCloudBuilderStackPtrInput interface {
	pulumi.Input

	ToSpringCloudBuilderStackPtrOutput() SpringCloudBuilderStackPtrOutput
	ToSpringCloudBuilderStackPtrOutputWithContext(context.Context) SpringCloudBuilderStackPtrOutput
}

type springCloudBuilderStackPtrType SpringCloudBuilderStackArgs

func SpringCloudBuilderStackPtr(v *SpringCloudBuilderStackArgs) SpringCloudBuilderStackPtrInput {
	return (*springCloudBuilderStackPtrType)(v)
}

func (*springCloudBuilderStackPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudBuilderStack)(nil)).Elem()
}

func (i *springCloudBuilderStackPtrType) ToSpringCloudBuilderStackPtrOutput() SpringCloudBuilderStackPtrOutput {
	return i.ToSpringCloudBuilderStackPtrOutputWithContext(context.Background())
}

func (i *springCloudBuilderStackPtrType) ToSpringCloudBuilderStackPtrOutputWithContext(ctx context.Context) SpringCloudBuilderStackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudBuilderStackPtrOutput)
}

type SpringCloudBuilderStackOutput struct{ *pulumi.OutputState }

func (SpringCloudBuilderStackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudBuilderStack)(nil)).Elem()
}

func (o SpringCloudBuilderStackOutput) ToSpringCloudBuilderStackOutput() SpringCloudBuilderStackOutput {
	return o
}

func (o SpringCloudBuilderStackOutput) ToSpringCloudBuilderStackOutputWithContext(ctx context.Context) SpringCloudBuilderStackOutput {
	return o
}

func (o SpringCloudBuilderStackOutput) ToSpringCloudBuilderStackPtrOutput() SpringCloudBuilderStackPtrOutput {
	return o.ToSpringCloudBuilderStackPtrOutputWithContext(context.Background())
}

func (o SpringCloudBuilderStackOutput) ToSpringCloudBuilderStackPtrOutputWithContext(ctx context.Context) SpringCloudBuilderStackPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpringCloudBuilderStack) *SpringCloudBuilderStack {
		return &v
	}).(SpringCloudBuilderStackPtrOutput)
}

// Specifies the ID of the ClusterStack.
func (o SpringCloudBuilderStackOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudBuilderStack) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies the version of the ClusterStack
func (o SpringCloudBuilderStackOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudBuilderStack) string { return v.Version }).(pulumi.StringOutput)
}

type SpringCloudBuilderStackPtrOutput struct{ *pulumi.OutputState }

func (SpringCloudBuilderStackPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudBuilderStack)(nil)).Elem()
}

func (o SpringCloudBuilderStackPtrOutput) ToSpringCloudBuilderStackPtrOutput() SpringCloudBuilderStackPtrOutput {
	return o
}

func (o SpringCloudBuilderStackPtrOutput) ToSpringCloudBuilderStackPtrOutputWithContext(ctx context.Context) SpringCloudBuilderStackPtrOutput {
	return o
}

func (o SpringCloudBuilderStackPtrOutput) Elem() SpringCloudBuilderStackOutput {
	return o.ApplyT(func(v *SpringCloudBuilderStack) SpringCloudBuilderStack {
		if v != nil {
			return *v
		}
		var ret SpringCloudBuilderStack
		return ret
	}).(SpringCloudBuilderStackOutput)
}

// Specifies the ID of the ClusterStack.
func (o SpringCloudBuilderStackPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudBuilderStack) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Specifies the version of the ClusterStack
func (o SpringCloudBuilderStackPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudBuilderStack) *string {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(pulumi.StringPtrOutput)
}

type SpringCloudConfigurationServiceRepository struct {
	// Specifies the ID of the Certificate Authority used when retrieving the Git Repository via HTTPS.
	CaCertificateId *string `pulumi:"caCertificateId"`
	// Specifies the SSH public key of git repository.
	HostKey *string `pulumi:"hostKey"`
	// Specifies the SSH key algorithm of git repository.
	HostKeyAlgorithm *string `pulumi:"hostKeyAlgorithm"`
	// Specifies the label of the repository.
	Label string `pulumi:"label"`
	// Specifies the name which should be used for this repository.
	Name string `pulumi:"name"`
	// Specifies the password of git repository basic auth.
	Password *string `pulumi:"password"`
	// Specifies the collection of patterns of the repository.
	Patterns []string `pulumi:"patterns"`
	// Specifies the SSH private key of git repository.
	PrivateKey *string `pulumi:"privateKey"`
	// Specifies a list of searching path of the repository
	SearchPaths []string `pulumi:"searchPaths"`
	// Specifies whether enable the strict host key checking.
	StrictHostKeyChecking *bool `pulumi:"strictHostKeyChecking"`
	// Specifies the URI of the repository.
	Uri string `pulumi:"uri"`
	// Specifies the username of git repository basic auth.
	Username *string `pulumi:"username"`
}

// SpringCloudConfigurationServiceRepositoryInput is an input type that accepts SpringCloudConfigurationServiceRepositoryArgs and SpringCloudConfigurationServiceRepositoryOutput values.
// You can construct a concrete instance of `SpringCloudConfigurationServiceRepositoryInput` via:
//
//	SpringCloudConfigurationServiceRepositoryArgs{...}
type SpringCloudConfigurationServiceRepositoryInput interface {
	pulumi.Input

	ToSpringCloudConfigurationServiceRepositoryOutput() SpringCloudConfigurationServiceRepositoryOutput
	ToSpringCloudConfigurationServiceRepositoryOutputWithContext(context.Context) SpringCloudConfigurationServiceRepositoryOutput
}

type SpringCloudConfigurationServiceRepositoryArgs struct {
	// Specifies the ID of the Certificate Authority used when retrieving the Git Repository via HTTPS.
	CaCertificateId pulumi.StringPtrInput `pulumi:"caCertificateId"`
	// Specifies the SSH public key of git repository.
	HostKey pulumi.StringPtrInput `pulumi:"hostKey"`
	// Specifies the SSH key algorithm of git repository.
	HostKeyAlgorithm pulumi.StringPtrInput `pulumi:"hostKeyAlgorithm"`
	// Specifies the label of the repository.
	Label pulumi.StringInput `pulumi:"label"`
	// Specifies the name which should be used for this repository.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the password of git repository basic auth.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Specifies the collection of patterns of the repository.
	Patterns pulumi.StringArrayInput `pulumi:"patterns"`
	// Specifies the SSH private key of git repository.
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	// Specifies a list of searching path of the repository
	SearchPaths pulumi.StringArrayInput `pulumi:"searchPaths"`
	// Specifies whether enable the strict host key checking.
	StrictHostKeyChecking pulumi.BoolPtrInput `pulumi:"strictHostKeyChecking"`
	// Specifies the URI of the repository.
	Uri pulumi.StringInput `pulumi:"uri"`
	// Specifies the username of git repository basic auth.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (SpringCloudConfigurationServiceRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudConfigurationServiceRepository)(nil)).Elem()
}

func (i SpringCloudConfigurationServiceRepositoryArgs) ToSpringCloudConfigurationServiceRepositoryOutput() SpringCloudConfigurationServiceRepositoryOutput {
	return i.ToSpringCloudConfigurationServiceRepositoryOutputWithContext(context.Background())
}

func (i SpringCloudConfigurationServiceRepositoryArgs) ToSpringCloudConfigurationServiceRepositoryOutputWithContext(ctx context.Context) SpringCloudConfigurationServiceRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudConfigurationServiceRepositoryOutput)
}

// SpringCloudConfigurationServiceRepositoryArrayInput is an input type that accepts SpringCloudConfigurationServiceRepositoryArray and SpringCloudConfigurationServiceRepositoryArrayOutput values.
// You can construct a concrete instance of `SpringCloudConfigurationServiceRepositoryArrayInput` via:
//
//	SpringCloudConfigurationServiceRepositoryArray{ SpringCloudConfigurationServiceRepositoryArgs{...} }
type SpringCloudConfigurationServiceRepositoryArrayInput interface {
	pulumi.Input

	ToSpringCloudConfigurationServiceRepositoryArrayOutput() SpringCloudConfigurationServiceRepositoryArrayOutput
	ToSpringCloudConfigurationServiceRepositoryArrayOutputWithContext(context.Context) SpringCloudConfigurationServiceRepositoryArrayOutput
}

type SpringCloudConfigurationServiceRepositoryArray []SpringCloudConfigurationServiceRepositoryInput

func (SpringCloudConfigurationServiceRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpringCloudConfigurationServiceRepository)(nil)).Elem()
}

func (i SpringCloudConfigurationServiceRepositoryArray) ToSpringCloudConfigurationServiceRepositoryArrayOutput() SpringCloudConfigurationServiceRepositoryArrayOutput {
	return i.ToSpringCloudConfigurationServiceRepositoryArrayOutputWithContext(context.Background())
}

func (i SpringCloudConfigurationServiceRepositoryArray) ToSpringCloudConfigurationServiceRepositoryArrayOutputWithContext(ctx context.Context) SpringCloudConfigurationServiceRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudConfigurationServiceRepositoryArrayOutput)
}

type SpringCloudConfigurationServiceRepositoryOutput struct{ *pulumi.OutputState }

func (SpringCloudConfigurationServiceRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudConfigurationServiceRepository)(nil)).Elem()
}

func (o SpringCloudConfigurationServiceRepositoryOutput) ToSpringCloudConfigurationServiceRepositoryOutput() SpringCloudConfigurationServiceRepositoryOutput {
	return o
}

func (o SpringCloudConfigurationServiceRepositoryOutput) ToSpringCloudConfigurationServiceRepositoryOutputWithContext(ctx context.Context) SpringCloudConfigurationServiceRepositoryOutput {
	return o
}

// Specifies the ID of the Certificate Authority used when retrieving the Git Repository via HTTPS.
func (o SpringCloudConfigurationServiceRepositoryOutput) CaCertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudConfigurationServiceRepository) *string { return v.CaCertificateId }).(pulumi.StringPtrOutput)
}

// Specifies the SSH public key of git repository.
func (o SpringCloudConfigurationServiceRepositoryOutput) HostKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudConfigurationServiceRepository) *string { return v.HostKey }).(pulumi.StringPtrOutput)
}

// Specifies the SSH key algorithm of git repository.
func (o SpringCloudConfigurationServiceRepositoryOutput) HostKeyAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudConfigurationServiceRepository) *string { return v.HostKeyAlgorithm }).(pulumi.StringPtrOutput)
}

// Specifies the label of the repository.
func (o SpringCloudConfigurationServiceRepositoryOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudConfigurationServiceRepository) string { return v.Label }).(pulumi.StringOutput)
}

// Specifies the name which should be used for this repository.
func (o SpringCloudConfigurationServiceRepositoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudConfigurationServiceRepository) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the password of git repository basic auth.
func (o SpringCloudConfigurationServiceRepositoryOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudConfigurationServiceRepository) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Specifies the collection of patterns of the repository.
func (o SpringCloudConfigurationServiceRepositoryOutput) Patterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SpringCloudConfigurationServiceRepository) []string { return v.Patterns }).(pulumi.StringArrayOutput)
}

// Specifies the SSH private key of git repository.
func (o SpringCloudConfigurationServiceRepositoryOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudConfigurationServiceRepository) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// Specifies a list of searching path of the repository
func (o SpringCloudConfigurationServiceRepositoryOutput) SearchPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SpringCloudConfigurationServiceRepository) []string { return v.SearchPaths }).(pulumi.StringArrayOutput)
}

// Specifies whether enable the strict host key checking.
func (o SpringCloudConfigurationServiceRepositoryOutput) StrictHostKeyChecking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SpringCloudConfigurationServiceRepository) *bool { return v.StrictHostKeyChecking }).(pulumi.BoolPtrOutput)
}

// Specifies the URI of the repository.
func (o SpringCloudConfigurationServiceRepositoryOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudConfigurationServiceRepository) string { return v.Uri }).(pulumi.StringOutput)
}

// Specifies the username of git repository basic auth.
func (o SpringCloudConfigurationServiceRepositoryOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudConfigurationServiceRepository) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type SpringCloudConfigurationServiceRepositoryArrayOutput struct{ *pulumi.OutputState }

func (SpringCloudConfigurationServiceRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpringCloudConfigurationServiceRepository)(nil)).Elem()
}

func (o SpringCloudConfigurationServiceRepositoryArrayOutput) ToSpringCloudConfigurationServiceRepositoryArrayOutput() SpringCloudConfigurationServiceRepositoryArrayOutput {
	return o
}

func (o SpringCloudConfigurationServiceRepositoryArrayOutput) ToSpringCloudConfigurationServiceRepositoryArrayOutputWithContext(ctx context.Context) SpringCloudConfigurationServiceRepositoryArrayOutput {
	return o
}

func (o SpringCloudConfigurationServiceRepositoryArrayOutput) Index(i pulumi.IntInput) SpringCloudConfigurationServiceRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SpringCloudConfigurationServiceRepository {
		return vs[0].([]SpringCloudConfigurationServiceRepository)[vs[1].(int)]
	}).(SpringCloudConfigurationServiceRepositoryOutput)
}

type SpringCloudConnectionAuthentication struct {
	// Service principal certificate for `servicePrincipal` auth. Should be specified when `type` is set to `servicePrincipalCertificate`.
	Certificate *string `pulumi:"certificate"`
	// Client ID for `userAssignedIdentity` or `servicePrincipal` auth. Should be specified when `type` is set to `servicePrincipalSecret` or `servicePrincipalCertificate`. When `type` is set to `userAssignedIdentity`, `clientId` and `subscriptionId` should be either both specified or both not specified.
	ClientId *string `pulumi:"clientId"`
	// Username or account name for secret auth. `name` and `secret` should be either both specified or both not specified when `type` is set to `secret`.
	Name *string `pulumi:"name"`
	// Principal ID for `servicePrincipal` auth. Should be specified when `type` is set to `servicePrincipalSecret` or `servicePrincipalCertificate`.
	PrincipalId *string `pulumi:"principalId"`
	// Password or account key for secret auth. `secret` and `name` should be either both specified or both not specified when `type` is set to `secret`.
	Secret *string `pulumi:"secret"`
	// Subscription ID for `userAssignedIdentity`. `subscriptionId` and `clientId` should be either both specified or both not specified.
	SubscriptionId *string `pulumi:"subscriptionId"`
	// The authentication type. Possible values are `systemAssignedIdentity`, `userAssignedIdentity`, `servicePrincipalSecret`, `servicePrincipalCertificate`, `secret`. Changing this forces a new resource to be created.
	Type string `pulumi:"type"`
}

// SpringCloudConnectionAuthenticationInput is an input type that accepts SpringCloudConnectionAuthenticationArgs and SpringCloudConnectionAuthenticationOutput values.
// You can construct a concrete instance of `SpringCloudConnectionAuthenticationInput` via:
//
//	SpringCloudConnectionAuthenticationArgs{...}
type SpringCloudConnectionAuthenticationInput interface {
	pulumi.Input

	ToSpringCloudConnectionAuthenticationOutput() SpringCloudConnectionAuthenticationOutput
	ToSpringCloudConnectionAuthenticationOutputWithContext(context.Context) SpringCloudConnectionAuthenticationOutput
}

type SpringCloudConnectionAuthenticationArgs struct {
	// Service principal certificate for `servicePrincipal` auth. Should be specified when `type` is set to `servicePrincipalCertificate`.
	Certificate pulumi.StringPtrInput `pulumi:"certificate"`
	// Client ID for `userAssignedIdentity` or `servicePrincipal` auth. Should be specified when `type` is set to `servicePrincipalSecret` or `servicePrincipalCertificate`. When `type` is set to `userAssignedIdentity`, `clientId` and `subscriptionId` should be either both specified or both not specified.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// Username or account name for secret auth. `name` and `secret` should be either both specified or both not specified when `type` is set to `secret`.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Principal ID for `servicePrincipal` auth. Should be specified when `type` is set to `servicePrincipalSecret` or `servicePrincipalCertificate`.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// Password or account key for secret auth. `secret` and `name` should be either both specified or both not specified when `type` is set to `secret`.
	Secret pulumi.StringPtrInput `pulumi:"secret"`
	// Subscription ID for `userAssignedIdentity`. `subscriptionId` and `clientId` should be either both specified or both not specified.
	SubscriptionId pulumi.StringPtrInput `pulumi:"subscriptionId"`
	// The authentication type. Possible values are `systemAssignedIdentity`, `userAssignedIdentity`, `servicePrincipalSecret`, `servicePrincipalCertificate`, `secret`. Changing this forces a new resource to be created.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SpringCloudConnectionAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudConnectionAuthentication)(nil)).Elem()
}

func (i SpringCloudConnectionAuthenticationArgs) ToSpringCloudConnectionAuthenticationOutput() SpringCloudConnectionAuthenticationOutput {
	return i.ToSpringCloudConnectionAuthenticationOutputWithContext(context.Background())
}

func (i SpringCloudConnectionAuthenticationArgs) ToSpringCloudConnectionAuthenticationOutputWithContext(ctx context.Context) SpringCloudConnectionAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudConnectionAuthenticationOutput)
}

func (i SpringCloudConnectionAuthenticationArgs) ToSpringCloudConnectionAuthenticationPtrOutput() SpringCloudConnectionAuthenticationPtrOutput {
	return i.ToSpringCloudConnectionAuthenticationPtrOutputWithContext(context.Background())
}

func (i SpringCloudConnectionAuthenticationArgs) ToSpringCloudConnectionAuthenticationPtrOutputWithContext(ctx context.Context) SpringCloudConnectionAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudConnectionAuthenticationOutput).ToSpringCloudConnectionAuthenticationPtrOutputWithContext(ctx)
}

// SpringCloudConnectionAuthenticationPtrInput is an input type that accepts SpringCloudConnectionAuthenticationArgs, SpringCloudConnectionAuthenticationPtr and SpringCloudConnectionAuthenticationPtrOutput values.
// You can construct a concrete instance of `SpringCloudConnectionAuthenticationPtrInput` via:
//
//	        SpringCloudConnectionAuthenticationArgs{...}
//
//	or:
//
//	        nil
type SpringCloudConnectionAuthenticationPtrInput interface {
	pulumi.Input

	ToSpringCloudConnectionAuthenticationPtrOutput() SpringCloudConnectionAuthenticationPtrOutput
	ToSpringCloudConnectionAuthenticationPtrOutputWithContext(context.Context) SpringCloudConnectionAuthenticationPtrOutput
}

type springCloudConnectionAuthenticationPtrType SpringCloudConnectionAuthenticationArgs

func SpringCloudConnectionAuthenticationPtr(v *SpringCloudConnectionAuthenticationArgs) SpringCloudConnectionAuthenticationPtrInput {
	return (*springCloudConnectionAuthenticationPtrType)(v)
}

func (*springCloudConnectionAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudConnectionAuthentication)(nil)).Elem()
}

func (i *springCloudConnectionAuthenticationPtrType) ToSpringCloudConnectionAuthenticationPtrOutput() SpringCloudConnectionAuthenticationPtrOutput {
	return i.ToSpringCloudConnectionAuthenticationPtrOutputWithContext(context.Background())
}

func (i *springCloudConnectionAuthenticationPtrType) ToSpringCloudConnectionAuthenticationPtrOutputWithContext(ctx context.Context) SpringCloudConnectionAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudConnectionAuthenticationPtrOutput)
}

type SpringCloudConnectionAuthenticationOutput struct{ *pulumi.OutputState }

func (SpringCloudConnectionAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudConnectionAuthentication)(nil)).Elem()
}

func (o SpringCloudConnectionAuthenticationOutput) ToSpringCloudConnectionAuthenticationOutput() SpringCloudConnectionAuthenticationOutput {
	return o
}

func (o SpringCloudConnectionAuthenticationOutput) ToSpringCloudConnectionAuthenticationOutputWithContext(ctx context.Context) SpringCloudConnectionAuthenticationOutput {
	return o
}

func (o SpringCloudConnectionAuthenticationOutput) ToSpringCloudConnectionAuthenticationPtrOutput() SpringCloudConnectionAuthenticationPtrOutput {
	return o.ToSpringCloudConnectionAuthenticationPtrOutputWithContext(context.Background())
}

func (o SpringCloudConnectionAuthenticationOutput) ToSpringCloudConnectionAuthenticationPtrOutputWithContext(ctx context.Context) SpringCloudConnectionAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpringCloudConnectionAuthentication) *SpringCloudConnectionAuthentication {
		return &v
	}).(SpringCloudConnectionAuthenticationPtrOutput)
}

// Service principal certificate for `servicePrincipal` auth. Should be specified when `type` is set to `servicePrincipalCertificate`.
func (o SpringCloudConnectionAuthenticationOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudConnectionAuthentication) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

// Client ID for `userAssignedIdentity` or `servicePrincipal` auth. Should be specified when `type` is set to `servicePrincipalSecret` or `servicePrincipalCertificate`. When `type` is set to `userAssignedIdentity`, `clientId` and `subscriptionId` should be either both specified or both not specified.
func (o SpringCloudConnectionAuthenticationOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudConnectionAuthentication) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Username or account name for secret auth. `name` and `secret` should be either both specified or both not specified when `type` is set to `secret`.
func (o SpringCloudConnectionAuthenticationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudConnectionAuthentication) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Principal ID for `servicePrincipal` auth. Should be specified when `type` is set to `servicePrincipalSecret` or `servicePrincipalCertificate`.
func (o SpringCloudConnectionAuthenticationOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudConnectionAuthentication) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// Password or account key for secret auth. `secret` and `name` should be either both specified or both not specified when `type` is set to `secret`.
func (o SpringCloudConnectionAuthenticationOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudConnectionAuthentication) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

// Subscription ID for `userAssignedIdentity`. `subscriptionId` and `clientId` should be either both specified or both not specified.
func (o SpringCloudConnectionAuthenticationOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudConnectionAuthentication) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

// The authentication type. Possible values are `systemAssignedIdentity`, `userAssignedIdentity`, `servicePrincipalSecret`, `servicePrincipalCertificate`, `secret`. Changing this forces a new resource to be created.
func (o SpringCloudConnectionAuthenticationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudConnectionAuthentication) string { return v.Type }).(pulumi.StringOutput)
}

type SpringCloudConnectionAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (SpringCloudConnectionAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudConnectionAuthentication)(nil)).Elem()
}

func (o SpringCloudConnectionAuthenticationPtrOutput) ToSpringCloudConnectionAuthenticationPtrOutput() SpringCloudConnectionAuthenticationPtrOutput {
	return o
}

func (o SpringCloudConnectionAuthenticationPtrOutput) ToSpringCloudConnectionAuthenticationPtrOutputWithContext(ctx context.Context) SpringCloudConnectionAuthenticationPtrOutput {
	return o
}

func (o SpringCloudConnectionAuthenticationPtrOutput) Elem() SpringCloudConnectionAuthenticationOutput {
	return o.ApplyT(func(v *SpringCloudConnectionAuthentication) SpringCloudConnectionAuthentication {
		if v != nil {
			return *v
		}
		var ret SpringCloudConnectionAuthentication
		return ret
	}).(SpringCloudConnectionAuthenticationOutput)
}

// Service principal certificate for `servicePrincipal` auth. Should be specified when `type` is set to `servicePrincipalCertificate`.
func (o SpringCloudConnectionAuthenticationPtrOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudConnectionAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(pulumi.StringPtrOutput)
}

// Client ID for `userAssignedIdentity` or `servicePrincipal` auth. Should be specified when `type` is set to `servicePrincipalSecret` or `servicePrincipalCertificate`. When `type` is set to `userAssignedIdentity`, `clientId` and `subscriptionId` should be either both specified or both not specified.
func (o SpringCloudConnectionAuthenticationPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudConnectionAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Username or account name for secret auth. `name` and `secret` should be either both specified or both not specified when `type` is set to `secret`.
func (o SpringCloudConnectionAuthenticationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudConnectionAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Principal ID for `servicePrincipal` auth. Should be specified when `type` is set to `servicePrincipalSecret` or `servicePrincipalCertificate`.
func (o SpringCloudConnectionAuthenticationPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudConnectionAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// Password or account key for secret auth. `secret` and `name` should be either both specified or both not specified when `type` is set to `secret`.
func (o SpringCloudConnectionAuthenticationPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudConnectionAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(pulumi.StringPtrOutput)
}

// Subscription ID for `userAssignedIdentity`. `subscriptionId` and `clientId` should be either both specified or both not specified.
func (o SpringCloudConnectionAuthenticationPtrOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudConnectionAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.SubscriptionId
	}).(pulumi.StringPtrOutput)
}

// The authentication type. Possible values are `systemAssignedIdentity`, `userAssignedIdentity`, `servicePrincipalSecret`, `servicePrincipalCertificate`, `secret`. Changing this forces a new resource to be created.
func (o SpringCloudConnectionAuthenticationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudConnectionAuthentication) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type SpringCloudConnectionSecretStore struct {
	// The key vault id to store secret.
	KeyVaultId string `pulumi:"keyVaultId"`
}

// SpringCloudConnectionSecretStoreInput is an input type that accepts SpringCloudConnectionSecretStoreArgs and SpringCloudConnectionSecretStoreOutput values.
// You can construct a concrete instance of `SpringCloudConnectionSecretStoreInput` via:
//
//	SpringCloudConnectionSecretStoreArgs{...}
type SpringCloudConnectionSecretStoreInput interface {
	pulumi.Input

	ToSpringCloudConnectionSecretStoreOutput() SpringCloudConnectionSecretStoreOutput
	ToSpringCloudConnectionSecretStoreOutputWithContext(context.Context) SpringCloudConnectionSecretStoreOutput
}

type SpringCloudConnectionSecretStoreArgs struct {
	// The key vault id to store secret.
	KeyVaultId pulumi.StringInput `pulumi:"keyVaultId"`
}

func (SpringCloudConnectionSecretStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudConnectionSecretStore)(nil)).Elem()
}

func (i SpringCloudConnectionSecretStoreArgs) ToSpringCloudConnectionSecretStoreOutput() SpringCloudConnectionSecretStoreOutput {
	return i.ToSpringCloudConnectionSecretStoreOutputWithContext(context.Background())
}

func (i SpringCloudConnectionSecretStoreArgs) ToSpringCloudConnectionSecretStoreOutputWithContext(ctx context.Context) SpringCloudConnectionSecretStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudConnectionSecretStoreOutput)
}

func (i SpringCloudConnectionSecretStoreArgs) ToSpringCloudConnectionSecretStorePtrOutput() SpringCloudConnectionSecretStorePtrOutput {
	return i.ToSpringCloudConnectionSecretStorePtrOutputWithContext(context.Background())
}

func (i SpringCloudConnectionSecretStoreArgs) ToSpringCloudConnectionSecretStorePtrOutputWithContext(ctx context.Context) SpringCloudConnectionSecretStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudConnectionSecretStoreOutput).ToSpringCloudConnectionSecretStorePtrOutputWithContext(ctx)
}

// SpringCloudConnectionSecretStorePtrInput is an input type that accepts SpringCloudConnectionSecretStoreArgs, SpringCloudConnectionSecretStorePtr and SpringCloudConnectionSecretStorePtrOutput values.
// You can construct a concrete instance of `SpringCloudConnectionSecretStorePtrInput` via:
//
//	        SpringCloudConnectionSecretStoreArgs{...}
//
//	or:
//
//	        nil
type SpringCloudConnectionSecretStorePtrInput interface {
	pulumi.Input

	ToSpringCloudConnectionSecretStorePtrOutput() SpringCloudConnectionSecretStorePtrOutput
	ToSpringCloudConnectionSecretStorePtrOutputWithContext(context.Context) SpringCloudConnectionSecretStorePtrOutput
}

type springCloudConnectionSecretStorePtrType SpringCloudConnectionSecretStoreArgs

func SpringCloudConnectionSecretStorePtr(v *SpringCloudConnectionSecretStoreArgs) SpringCloudConnectionSecretStorePtrInput {
	return (*springCloudConnectionSecretStorePtrType)(v)
}

func (*springCloudConnectionSecretStorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudConnectionSecretStore)(nil)).Elem()
}

func (i *springCloudConnectionSecretStorePtrType) ToSpringCloudConnectionSecretStorePtrOutput() SpringCloudConnectionSecretStorePtrOutput {
	return i.ToSpringCloudConnectionSecretStorePtrOutputWithContext(context.Background())
}

func (i *springCloudConnectionSecretStorePtrType) ToSpringCloudConnectionSecretStorePtrOutputWithContext(ctx context.Context) SpringCloudConnectionSecretStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudConnectionSecretStorePtrOutput)
}

type SpringCloudConnectionSecretStoreOutput struct{ *pulumi.OutputState }

func (SpringCloudConnectionSecretStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudConnectionSecretStore)(nil)).Elem()
}

func (o SpringCloudConnectionSecretStoreOutput) ToSpringCloudConnectionSecretStoreOutput() SpringCloudConnectionSecretStoreOutput {
	return o
}

func (o SpringCloudConnectionSecretStoreOutput) ToSpringCloudConnectionSecretStoreOutputWithContext(ctx context.Context) SpringCloudConnectionSecretStoreOutput {
	return o
}

func (o SpringCloudConnectionSecretStoreOutput) ToSpringCloudConnectionSecretStorePtrOutput() SpringCloudConnectionSecretStorePtrOutput {
	return o.ToSpringCloudConnectionSecretStorePtrOutputWithContext(context.Background())
}

func (o SpringCloudConnectionSecretStoreOutput) ToSpringCloudConnectionSecretStorePtrOutputWithContext(ctx context.Context) SpringCloudConnectionSecretStorePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpringCloudConnectionSecretStore) *SpringCloudConnectionSecretStore {
		return &v
	}).(SpringCloudConnectionSecretStorePtrOutput)
}

// The key vault id to store secret.
func (o SpringCloudConnectionSecretStoreOutput) KeyVaultId() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudConnectionSecretStore) string { return v.KeyVaultId }).(pulumi.StringOutput)
}

type SpringCloudConnectionSecretStorePtrOutput struct{ *pulumi.OutputState }

func (SpringCloudConnectionSecretStorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudConnectionSecretStore)(nil)).Elem()
}

func (o SpringCloudConnectionSecretStorePtrOutput) ToSpringCloudConnectionSecretStorePtrOutput() SpringCloudConnectionSecretStorePtrOutput {
	return o
}

func (o SpringCloudConnectionSecretStorePtrOutput) ToSpringCloudConnectionSecretStorePtrOutputWithContext(ctx context.Context) SpringCloudConnectionSecretStorePtrOutput {
	return o
}

func (o SpringCloudConnectionSecretStorePtrOutput) Elem() SpringCloudConnectionSecretStoreOutput {
	return o.ApplyT(func(v *SpringCloudConnectionSecretStore) SpringCloudConnectionSecretStore {
		if v != nil {
			return *v
		}
		var ret SpringCloudConnectionSecretStore
		return ret
	}).(SpringCloudConnectionSecretStoreOutput)
}

// The key vault id to store secret.
func (o SpringCloudConnectionSecretStorePtrOutput) KeyVaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudConnectionSecretStore) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVaultId
	}).(pulumi.StringPtrOutput)
}

type SpringCloudContainerDeploymentQuota struct {
	// Specifies the required cpu of the Spring Cloud Deployment. Possible Values are `500m`, `1`, `2`, `3` and `4`. Defaults to `1` if not specified.
	//
	// > **Note:** `cpu` supports `500m` and `1` for Basic tier, `500m`, `1`, `2`, `3` and `4` for Standard tier.
	Cpu *string `pulumi:"cpu"`
	// Specifies the required memory size of the Spring Cloud Deployment. Possible Values are `512Mi`, `1Gi`, `2Gi`, `3Gi`, `4Gi`, `5Gi`, `6Gi`, `7Gi`, and `8Gi`. Defaults to `1Gi` if not specified.
	//
	// > **Note:** `memory` supports `512Mi`, `1Gi` and `2Gi` for Basic tier, `512Mi`, `1Gi`, `2Gi`, `3Gi`, `4Gi`, `5Gi`, `6Gi`, `7Gi`, and `8Gi` for Standard tier.
	Memory *string `pulumi:"memory"`
}

// SpringCloudContainerDeploymentQuotaInput is an input type that accepts SpringCloudContainerDeploymentQuotaArgs and SpringCloudContainerDeploymentQuotaOutput values.
// You can construct a concrete instance of `SpringCloudContainerDeploymentQuotaInput` via:
//
//	SpringCloudContainerDeploymentQuotaArgs{...}
type SpringCloudContainerDeploymentQuotaInput interface {
	pulumi.Input

	ToSpringCloudContainerDeploymentQuotaOutput() SpringCloudContainerDeploymentQuotaOutput
	ToSpringCloudContainerDeploymentQuotaOutputWithContext(context.Context) SpringCloudContainerDeploymentQuotaOutput
}

type SpringCloudContainerDeploymentQuotaArgs struct {
	// Specifies the required cpu of the Spring Cloud Deployment. Possible Values are `500m`, `1`, `2`, `3` and `4`. Defaults to `1` if not specified.
	//
	// > **Note:** `cpu` supports `500m` and `1` for Basic tier, `500m`, `1`, `2`, `3` and `4` for Standard tier.
	Cpu pulumi.StringPtrInput `pulumi:"cpu"`
	// Specifies the required memory size of the Spring Cloud Deployment. Possible Values are `512Mi`, `1Gi`, `2Gi`, `3Gi`, `4Gi`, `5Gi`, `6Gi`, `7Gi`, and `8Gi`. Defaults to `1Gi` if not specified.
	//
	// > **Note:** `memory` supports `512Mi`, `1Gi` and `2Gi` for Basic tier, `512Mi`, `1Gi`, `2Gi`, `3Gi`, `4Gi`, `5Gi`, `6Gi`, `7Gi`, and `8Gi` for Standard tier.
	Memory pulumi.StringPtrInput `pulumi:"memory"`
}

func (SpringCloudContainerDeploymentQuotaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudContainerDeploymentQuota)(nil)).Elem()
}

func (i SpringCloudContainerDeploymentQuotaArgs) ToSpringCloudContainerDeploymentQuotaOutput() SpringCloudContainerDeploymentQuotaOutput {
	return i.ToSpringCloudContainerDeploymentQuotaOutputWithContext(context.Background())
}

func (i SpringCloudContainerDeploymentQuotaArgs) ToSpringCloudContainerDeploymentQuotaOutputWithContext(ctx context.Context) SpringCloudContainerDeploymentQuotaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudContainerDeploymentQuotaOutput)
}

func (i SpringCloudContainerDeploymentQuotaArgs) ToSpringCloudContainerDeploymentQuotaPtrOutput() SpringCloudContainerDeploymentQuotaPtrOutput {
	return i.ToSpringCloudContainerDeploymentQuotaPtrOutputWithContext(context.Background())
}

func (i SpringCloudContainerDeploymentQuotaArgs) ToSpringCloudContainerDeploymentQuotaPtrOutputWithContext(ctx context.Context) SpringCloudContainerDeploymentQuotaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudContainerDeploymentQuotaOutput).ToSpringCloudContainerDeploymentQuotaPtrOutputWithContext(ctx)
}

// SpringCloudContainerDeploymentQuotaPtrInput is an input type that accepts SpringCloudContainerDeploymentQuotaArgs, SpringCloudContainerDeploymentQuotaPtr and SpringCloudContainerDeploymentQuotaPtrOutput values.
// You can construct a concrete instance of `SpringCloudContainerDeploymentQuotaPtrInput` via:
//
//	        SpringCloudContainerDeploymentQuotaArgs{...}
//
//	or:
//
//	        nil
type SpringCloudContainerDeploymentQuotaPtrInput interface {
	pulumi.Input

	ToSpringCloudContainerDeploymentQuotaPtrOutput() SpringCloudContainerDeploymentQuotaPtrOutput
	ToSpringCloudContainerDeploymentQuotaPtrOutputWithContext(context.Context) SpringCloudContainerDeploymentQuotaPtrOutput
}

type springCloudContainerDeploymentQuotaPtrType SpringCloudContainerDeploymentQuotaArgs

func SpringCloudContainerDeploymentQuotaPtr(v *SpringCloudContainerDeploymentQuotaArgs) SpringCloudContainerDeploymentQuotaPtrInput {
	return (*springCloudContainerDeploymentQuotaPtrType)(v)
}

func (*springCloudContainerDeploymentQuotaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudContainerDeploymentQuota)(nil)).Elem()
}

func (i *springCloudContainerDeploymentQuotaPtrType) ToSpringCloudContainerDeploymentQuotaPtrOutput() SpringCloudContainerDeploymentQuotaPtrOutput {
	return i.ToSpringCloudContainerDeploymentQuotaPtrOutputWithContext(context.Background())
}

func (i *springCloudContainerDeploymentQuotaPtrType) ToSpringCloudContainerDeploymentQuotaPtrOutputWithContext(ctx context.Context) SpringCloudContainerDeploymentQuotaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudContainerDeploymentQuotaPtrOutput)
}

type SpringCloudContainerDeploymentQuotaOutput struct{ *pulumi.OutputState }

func (SpringCloudContainerDeploymentQuotaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudContainerDeploymentQuota)(nil)).Elem()
}

func (o SpringCloudContainerDeploymentQuotaOutput) ToSpringCloudContainerDeploymentQuotaOutput() SpringCloudContainerDeploymentQuotaOutput {
	return o
}

func (o SpringCloudContainerDeploymentQuotaOutput) ToSpringCloudContainerDeploymentQuotaOutputWithContext(ctx context.Context) SpringCloudContainerDeploymentQuotaOutput {
	return o
}

func (o SpringCloudContainerDeploymentQuotaOutput) ToSpringCloudContainerDeploymentQuotaPtrOutput() SpringCloudContainerDeploymentQuotaPtrOutput {
	return o.ToSpringCloudContainerDeploymentQuotaPtrOutputWithContext(context.Background())
}

func (o SpringCloudContainerDeploymentQuotaOutput) ToSpringCloudContainerDeploymentQuotaPtrOutputWithContext(ctx context.Context) SpringCloudContainerDeploymentQuotaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpringCloudContainerDeploymentQuota) *SpringCloudContainerDeploymentQuota {
		return &v
	}).(SpringCloudContainerDeploymentQuotaPtrOutput)
}

// Specifies the required cpu of the Spring Cloud Deployment. Possible Values are `500m`, `1`, `2`, `3` and `4`. Defaults to `1` if not specified.
//
// > **Note:** `cpu` supports `500m` and `1` for Basic tier, `500m`, `1`, `2`, `3` and `4` for Standard tier.
func (o SpringCloudContainerDeploymentQuotaOutput) Cpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudContainerDeploymentQuota) *string { return v.Cpu }).(pulumi.StringPtrOutput)
}

// Specifies the required memory size of the Spring Cloud Deployment. Possible Values are `512Mi`, `1Gi`, `2Gi`, `3Gi`, `4Gi`, `5Gi`, `6Gi`, `7Gi`, and `8Gi`. Defaults to `1Gi` if not specified.
//
// > **Note:** `memory` supports `512Mi`, `1Gi` and `2Gi` for Basic tier, `512Mi`, `1Gi`, `2Gi`, `3Gi`, `4Gi`, `5Gi`, `6Gi`, `7Gi`, and `8Gi` for Standard tier.
func (o SpringCloudContainerDeploymentQuotaOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudContainerDeploymentQuota) *string { return v.Memory }).(pulumi.StringPtrOutput)
}

type SpringCloudContainerDeploymentQuotaPtrOutput struct{ *pulumi.OutputState }

func (SpringCloudContainerDeploymentQuotaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudContainerDeploymentQuota)(nil)).Elem()
}

func (o SpringCloudContainerDeploymentQuotaPtrOutput) ToSpringCloudContainerDeploymentQuotaPtrOutput() SpringCloudContainerDeploymentQuotaPtrOutput {
	return o
}

func (o SpringCloudContainerDeploymentQuotaPtrOutput) ToSpringCloudContainerDeploymentQuotaPtrOutputWithContext(ctx context.Context) SpringCloudContainerDeploymentQuotaPtrOutput {
	return o
}

func (o SpringCloudContainerDeploymentQuotaPtrOutput) Elem() SpringCloudContainerDeploymentQuotaOutput {
	return o.ApplyT(func(v *SpringCloudContainerDeploymentQuota) SpringCloudContainerDeploymentQuota {
		if v != nil {
			return *v
		}
		var ret SpringCloudContainerDeploymentQuota
		return ret
	}).(SpringCloudContainerDeploymentQuotaOutput)
}

// Specifies the required cpu of the Spring Cloud Deployment. Possible Values are `500m`, `1`, `2`, `3` and `4`. Defaults to `1` if not specified.
//
// > **Note:** `cpu` supports `500m` and `1` for Basic tier, `500m`, `1`, `2`, `3` and `4` for Standard tier.
func (o SpringCloudContainerDeploymentQuotaPtrOutput) Cpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudContainerDeploymentQuota) *string {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.StringPtrOutput)
}

// Specifies the required memory size of the Spring Cloud Deployment. Possible Values are `512Mi`, `1Gi`, `2Gi`, `3Gi`, `4Gi`, `5Gi`, `6Gi`, `7Gi`, and `8Gi`. Defaults to `1Gi` if not specified.
//
// > **Note:** `memory` supports `512Mi`, `1Gi` and `2Gi` for Basic tier, `512Mi`, `1Gi`, `2Gi`, `3Gi`, `4Gi`, `5Gi`, `6Gi`, `7Gi`, and `8Gi` for Standard tier.
func (o SpringCloudContainerDeploymentQuotaPtrOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudContainerDeploymentQuota) *string {
		if v == nil {
			return nil
		}
		return v.Memory
	}).(pulumi.StringPtrOutput)
}

type SpringCloudCustomizedAcceleratorGitRepository struct {
	// A `basicAuth` block as defined below. Conflicts with `git_repository.0.ssh_auth`. Changing this forces a new Spring Cloud Customized Accelerator to be created.
	BasicAuth *SpringCloudCustomizedAcceleratorGitRepositoryBasicAuth `pulumi:"basicAuth"`
	// Specifies the Git repository branch to be used.
	Branch *string `pulumi:"branch"`
	// Specifies the ID of the CA Spring Cloud Certificate for https URL of Git repository.
	CaCertificateId *string `pulumi:"caCertificateId"`
	// Specifies the Git repository commit to be used.
	Commit *string `pulumi:"commit"`
	// Specifies the Git repository tag to be used.
	GitTag *string `pulumi:"gitTag"`
	// Specifies the interval for checking for updates to Git or image repository. It should be greater than 10.
	IntervalInSeconds *int `pulumi:"intervalInSeconds"`
	// Specifies the path under the git repository to be treated as the root directory of the accelerator or the fragment (depending on `acceleratorType`).
	Path *string `pulumi:"path"`
	// A `sshAuth` block as defined below. Conflicts with `git_repository.0.basic_auth`. Changing this forces a new Spring Cloud Customized Accelerator to be created.
	SshAuth *SpringCloudCustomizedAcceleratorGitRepositorySshAuth `pulumi:"sshAuth"`
	// Specifies Git repository URL for the accelerator.
	Url string `pulumi:"url"`
}

// SpringCloudCustomizedAcceleratorGitRepositoryInput is an input type that accepts SpringCloudCustomizedAcceleratorGitRepositoryArgs and SpringCloudCustomizedAcceleratorGitRepositoryOutput values.
// You can construct a concrete instance of `SpringCloudCustomizedAcceleratorGitRepositoryInput` via:
//
//	SpringCloudCustomizedAcceleratorGitRepositoryArgs{...}
type SpringCloudCustomizedAcceleratorGitRepositoryInput interface {
	pulumi.Input

	ToSpringCloudCustomizedAcceleratorGitRepositoryOutput() SpringCloudCustomizedAcceleratorGitRepositoryOutput
	ToSpringCloudCustomizedAcceleratorGitRepositoryOutputWithContext(context.Context) SpringCloudCustomizedAcceleratorGitRepositoryOutput
}

type SpringCloudCustomizedAcceleratorGitRepositoryArgs struct {
	// A `basicAuth` block as defined below. Conflicts with `git_repository.0.ssh_auth`. Changing this forces a new Spring Cloud Customized Accelerator to be created.
	BasicAuth SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrInput `pulumi:"basicAuth"`
	// Specifies the Git repository branch to be used.
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// Specifies the ID of the CA Spring Cloud Certificate for https URL of Git repository.
	CaCertificateId pulumi.StringPtrInput `pulumi:"caCertificateId"`
	// Specifies the Git repository commit to be used.
	Commit pulumi.StringPtrInput `pulumi:"commit"`
	// Specifies the Git repository tag to be used.
	GitTag pulumi.StringPtrInput `pulumi:"gitTag"`
	// Specifies the interval for checking for updates to Git or image repository. It should be greater than 10.
	IntervalInSeconds pulumi.IntPtrInput `pulumi:"intervalInSeconds"`
	// Specifies the path under the git repository to be treated as the root directory of the accelerator or the fragment (depending on `acceleratorType`).
	Path pulumi.StringPtrInput `pulumi:"path"`
	// A `sshAuth` block as defined below. Conflicts with `git_repository.0.basic_auth`. Changing this forces a new Spring Cloud Customized Accelerator to be created.
	SshAuth SpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrInput `pulumi:"sshAuth"`
	// Specifies Git repository URL for the accelerator.
	Url pulumi.StringInput `pulumi:"url"`
}

func (SpringCloudCustomizedAcceleratorGitRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudCustomizedAcceleratorGitRepository)(nil)).Elem()
}

func (i SpringCloudCustomizedAcceleratorGitRepositoryArgs) ToSpringCloudCustomizedAcceleratorGitRepositoryOutput() SpringCloudCustomizedAcceleratorGitRepositoryOutput {
	return i.ToSpringCloudCustomizedAcceleratorGitRepositoryOutputWithContext(context.Background())
}

func (i SpringCloudCustomizedAcceleratorGitRepositoryArgs) ToSpringCloudCustomizedAcceleratorGitRepositoryOutputWithContext(ctx context.Context) SpringCloudCustomizedAcceleratorGitRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudCustomizedAcceleratorGitRepositoryOutput)
}

func (i SpringCloudCustomizedAcceleratorGitRepositoryArgs) ToSpringCloudCustomizedAcceleratorGitRepositoryPtrOutput() SpringCloudCustomizedAcceleratorGitRepositoryPtrOutput {
	return i.ToSpringCloudCustomizedAcceleratorGitRepositoryPtrOutputWithContext(context.Background())
}

func (i SpringCloudCustomizedAcceleratorGitRepositoryArgs) ToSpringCloudCustomizedAcceleratorGitRepositoryPtrOutputWithContext(ctx context.Context) SpringCloudCustomizedAcceleratorGitRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudCustomizedAcceleratorGitRepositoryOutput).ToSpringCloudCustomizedAcceleratorGitRepositoryPtrOutputWithContext(ctx)
}

// SpringCloudCustomizedAcceleratorGitRepositoryPtrInput is an input type that accepts SpringCloudCustomizedAcceleratorGitRepositoryArgs, SpringCloudCustomizedAcceleratorGitRepositoryPtr and SpringCloudCustomizedAcceleratorGitRepositoryPtrOutput values.
// You can construct a concrete instance of `SpringCloudCustomizedAcceleratorGitRepositoryPtrInput` via:
//
//	        SpringCloudCustomizedAcceleratorGitRepositoryArgs{...}
//
//	or:
//
//	        nil
type SpringCloudCustomizedAcceleratorGitRepositoryPtrInput interface {
	pulumi.Input

	ToSpringCloudCustomizedAcceleratorGitRepositoryPtrOutput() SpringCloudCustomizedAcceleratorGitRepositoryPtrOutput
	ToSpringCloudCustomizedAcceleratorGitRepositoryPtrOutputWithContext(context.Context) SpringCloudCustomizedAcceleratorGitRepositoryPtrOutput
}

type springCloudCustomizedAcceleratorGitRepositoryPtrType SpringCloudCustomizedAcceleratorGitRepositoryArgs

func SpringCloudCustomizedAcceleratorGitRepositoryPtr(v *SpringCloudCustomizedAcceleratorGitRepositoryArgs) SpringCloudCustomizedAcceleratorGitRepositoryPtrInput {
	return (*springCloudCustomizedAcceleratorGitRepositoryPtrType)(v)
}

func (*springCloudCustomizedAcceleratorGitRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudCustomizedAcceleratorGitRepository)(nil)).Elem()
}

func (i *springCloudCustomizedAcceleratorGitRepositoryPtrType) ToSpringCloudCustomizedAcceleratorGitRepositoryPtrOutput() SpringCloudCustomizedAcceleratorGitRepositoryPtrOutput {
	return i.ToSpringCloudCustomizedAcceleratorGitRepositoryPtrOutputWithContext(context.Background())
}

func (i *springCloudCustomizedAcceleratorGitRepositoryPtrType) ToSpringCloudCustomizedAcceleratorGitRepositoryPtrOutputWithContext(ctx context.Context) SpringCloudCustomizedAcceleratorGitRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudCustomizedAcceleratorGitRepositoryPtrOutput)
}

type SpringCloudCustomizedAcceleratorGitRepositoryOutput struct{ *pulumi.OutputState }

func (SpringCloudCustomizedAcceleratorGitRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudCustomizedAcceleratorGitRepository)(nil)).Elem()
}

func (o SpringCloudCustomizedAcceleratorGitRepositoryOutput) ToSpringCloudCustomizedAcceleratorGitRepositoryOutput() SpringCloudCustomizedAcceleratorGitRepositoryOutput {
	return o
}

func (o SpringCloudCustomizedAcceleratorGitRepositoryOutput) ToSpringCloudCustomizedAcceleratorGitRepositoryOutputWithContext(ctx context.Context) SpringCloudCustomizedAcceleratorGitRepositoryOutput {
	return o
}

func (o SpringCloudCustomizedAcceleratorGitRepositoryOutput) ToSpringCloudCustomizedAcceleratorGitRepositoryPtrOutput() SpringCloudCustomizedAcceleratorGitRepositoryPtrOutput {
	return o.ToSpringCloudCustomizedAcceleratorGitRepositoryPtrOutputWithContext(context.Background())
}

func (o SpringCloudCustomizedAcceleratorGitRepositoryOutput) ToSpringCloudCustomizedAcceleratorGitRepositoryPtrOutputWithContext(ctx context.Context) SpringCloudCustomizedAcceleratorGitRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpringCloudCustomizedAcceleratorGitRepository) *SpringCloudCustomizedAcceleratorGitRepository {
		return &v
	}).(SpringCloudCustomizedAcceleratorGitRepositoryPtrOutput)
}

// A `basicAuth` block as defined below. Conflicts with `git_repository.0.ssh_auth`. Changing this forces a new Spring Cloud Customized Accelerator to be created.
func (o SpringCloudCustomizedAcceleratorGitRepositoryOutput) BasicAuth() SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutput {
	return o.ApplyT(func(v SpringCloudCustomizedAcceleratorGitRepository) *SpringCloudCustomizedAcceleratorGitRepositoryBasicAuth {
		return v.BasicAuth
	}).(SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutput)
}

// Specifies the Git repository branch to be used.
func (o SpringCloudCustomizedAcceleratorGitRepositoryOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudCustomizedAcceleratorGitRepository) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// Specifies the ID of the CA Spring Cloud Certificate for https URL of Git repository.
func (o SpringCloudCustomizedAcceleratorGitRepositoryOutput) CaCertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudCustomizedAcceleratorGitRepository) *string { return v.CaCertificateId }).(pulumi.StringPtrOutput)
}

// Specifies the Git repository commit to be used.
func (o SpringCloudCustomizedAcceleratorGitRepositoryOutput) Commit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudCustomizedAcceleratorGitRepository) *string { return v.Commit }).(pulumi.StringPtrOutput)
}

// Specifies the Git repository tag to be used.
func (o SpringCloudCustomizedAcceleratorGitRepositoryOutput) GitTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudCustomizedAcceleratorGitRepository) *string { return v.GitTag }).(pulumi.StringPtrOutput)
}

// Specifies the interval for checking for updates to Git or image repository. It should be greater than 10.
func (o SpringCloudCustomizedAcceleratorGitRepositoryOutput) IntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SpringCloudCustomizedAcceleratorGitRepository) *int { return v.IntervalInSeconds }).(pulumi.IntPtrOutput)
}

// Specifies the path under the git repository to be treated as the root directory of the accelerator or the fragment (depending on `acceleratorType`).
func (o SpringCloudCustomizedAcceleratorGitRepositoryOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudCustomizedAcceleratorGitRepository) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// A `sshAuth` block as defined below. Conflicts with `git_repository.0.basic_auth`. Changing this forces a new Spring Cloud Customized Accelerator to be created.
func (o SpringCloudCustomizedAcceleratorGitRepositoryOutput) SshAuth() SpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutput {
	return o.ApplyT(func(v SpringCloudCustomizedAcceleratorGitRepository) *SpringCloudCustomizedAcceleratorGitRepositorySshAuth {
		return v.SshAuth
	}).(SpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutput)
}

// Specifies Git repository URL for the accelerator.
func (o SpringCloudCustomizedAcceleratorGitRepositoryOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudCustomizedAcceleratorGitRepository) string { return v.Url }).(pulumi.StringOutput)
}

type SpringCloudCustomizedAcceleratorGitRepositoryPtrOutput struct{ *pulumi.OutputState }

func (SpringCloudCustomizedAcceleratorGitRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudCustomizedAcceleratorGitRepository)(nil)).Elem()
}

func (o SpringCloudCustomizedAcceleratorGitRepositoryPtrOutput) ToSpringCloudCustomizedAcceleratorGitRepositoryPtrOutput() SpringCloudCustomizedAcceleratorGitRepositoryPtrOutput {
	return o
}

func (o SpringCloudCustomizedAcceleratorGitRepositoryPtrOutput) ToSpringCloudCustomizedAcceleratorGitRepositoryPtrOutputWithContext(ctx context.Context) SpringCloudCustomizedAcceleratorGitRepositoryPtrOutput {
	return o
}

func (o SpringCloudCustomizedAcceleratorGitRepositoryPtrOutput) Elem() SpringCloudCustomizedAcceleratorGitRepositoryOutput {
	return o.ApplyT(func(v *SpringCloudCustomizedAcceleratorGitRepository) SpringCloudCustomizedAcceleratorGitRepository {
		if v != nil {
			return *v
		}
		var ret SpringCloudCustomizedAcceleratorGitRepository
		return ret
	}).(SpringCloudCustomizedAcceleratorGitRepositoryOutput)
}

// A `basicAuth` block as defined below. Conflicts with `git_repository.0.ssh_auth`. Changing this forces a new Spring Cloud Customized Accelerator to be created.
func (o SpringCloudCustomizedAcceleratorGitRepositoryPtrOutput) BasicAuth() SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutput {
	return o.ApplyT(func(v *SpringCloudCustomizedAcceleratorGitRepository) *SpringCloudCustomizedAcceleratorGitRepositoryBasicAuth {
		if v == nil {
			return nil
		}
		return v.BasicAuth
	}).(SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutput)
}

// Specifies the Git repository branch to be used.
func (o SpringCloudCustomizedAcceleratorGitRepositoryPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudCustomizedAcceleratorGitRepository) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

// Specifies the ID of the CA Spring Cloud Certificate for https URL of Git repository.
func (o SpringCloudCustomizedAcceleratorGitRepositoryPtrOutput) CaCertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudCustomizedAcceleratorGitRepository) *string {
		if v == nil {
			return nil
		}
		return v.CaCertificateId
	}).(pulumi.StringPtrOutput)
}

// Specifies the Git repository commit to be used.
func (o SpringCloudCustomizedAcceleratorGitRepositoryPtrOutput) Commit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudCustomizedAcceleratorGitRepository) *string {
		if v == nil {
			return nil
		}
		return v.Commit
	}).(pulumi.StringPtrOutput)
}

// Specifies the Git repository tag to be used.
func (o SpringCloudCustomizedAcceleratorGitRepositoryPtrOutput) GitTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudCustomizedAcceleratorGitRepository) *string {
		if v == nil {
			return nil
		}
		return v.GitTag
	}).(pulumi.StringPtrOutput)
}

// Specifies the interval for checking for updates to Git or image repository. It should be greater than 10.
func (o SpringCloudCustomizedAcceleratorGitRepositoryPtrOutput) IntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SpringCloudCustomizedAcceleratorGitRepository) *int {
		if v == nil {
			return nil
		}
		return v.IntervalInSeconds
	}).(pulumi.IntPtrOutput)
}

// Specifies the path under the git repository to be treated as the root directory of the accelerator or the fragment (depending on `acceleratorType`).
func (o SpringCloudCustomizedAcceleratorGitRepositoryPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudCustomizedAcceleratorGitRepository) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// A `sshAuth` block as defined below. Conflicts with `git_repository.0.basic_auth`. Changing this forces a new Spring Cloud Customized Accelerator to be created.
func (o SpringCloudCustomizedAcceleratorGitRepositoryPtrOutput) SshAuth() SpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutput {
	return o.ApplyT(func(v *SpringCloudCustomizedAcceleratorGitRepository) *SpringCloudCustomizedAcceleratorGitRepositorySshAuth {
		if v == nil {
			return nil
		}
		return v.SshAuth
	}).(SpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutput)
}

// Specifies Git repository URL for the accelerator.
func (o SpringCloudCustomizedAcceleratorGitRepositoryPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudCustomizedAcceleratorGitRepository) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

type SpringCloudCustomizedAcceleratorGitRepositoryBasicAuth struct {
	// Specifies the password of git repository basic auth.
	Password string `pulumi:"password"`
	// Specifies the username of git repository basic auth.
	Username string `pulumi:"username"`
}

// SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthInput is an input type that accepts SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthArgs and SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthOutput values.
// You can construct a concrete instance of `SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthInput` via:
//
//	SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthArgs{...}
type SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthInput interface {
	pulumi.Input

	ToSpringCloudCustomizedAcceleratorGitRepositoryBasicAuthOutput() SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthOutput
	ToSpringCloudCustomizedAcceleratorGitRepositoryBasicAuthOutputWithContext(context.Context) SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthOutput
}

type SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthArgs struct {
	// Specifies the password of git repository basic auth.
	Password pulumi.StringInput `pulumi:"password"`
	// Specifies the username of git repository basic auth.
	Username pulumi.StringInput `pulumi:"username"`
}

func (SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudCustomizedAcceleratorGitRepositoryBasicAuth)(nil)).Elem()
}

func (i SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthArgs) ToSpringCloudCustomizedAcceleratorGitRepositoryBasicAuthOutput() SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthOutput {
	return i.ToSpringCloudCustomizedAcceleratorGitRepositoryBasicAuthOutputWithContext(context.Background())
}

func (i SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthArgs) ToSpringCloudCustomizedAcceleratorGitRepositoryBasicAuthOutputWithContext(ctx context.Context) SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthOutput)
}

func (i SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthArgs) ToSpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutput() SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutput {
	return i.ToSpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutputWithContext(context.Background())
}

func (i SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthArgs) ToSpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutputWithContext(ctx context.Context) SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthOutput).ToSpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutputWithContext(ctx)
}

// SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrInput is an input type that accepts SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthArgs, SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtr and SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutput values.
// You can construct a concrete instance of `SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrInput` via:
//
//	        SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthArgs{...}
//
//	or:
//
//	        nil
type SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrInput interface {
	pulumi.Input

	ToSpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutput() SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutput
	ToSpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutputWithContext(context.Context) SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutput
}

type springCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrType SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthArgs

func SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtr(v *SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthArgs) SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrInput {
	return (*springCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrType)(v)
}

func (*springCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudCustomizedAcceleratorGitRepositoryBasicAuth)(nil)).Elem()
}

func (i *springCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrType) ToSpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutput() SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutput {
	return i.ToSpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutputWithContext(context.Background())
}

func (i *springCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrType) ToSpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutputWithContext(ctx context.Context) SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutput)
}

type SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthOutput struct{ *pulumi.OutputState }

func (SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudCustomizedAcceleratorGitRepositoryBasicAuth)(nil)).Elem()
}

func (o SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthOutput) ToSpringCloudCustomizedAcceleratorGitRepositoryBasicAuthOutput() SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthOutput {
	return o
}

func (o SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthOutput) ToSpringCloudCustomizedAcceleratorGitRepositoryBasicAuthOutputWithContext(ctx context.Context) SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthOutput {
	return o
}

func (o SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthOutput) ToSpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutput() SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutput {
	return o.ToSpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutputWithContext(context.Background())
}

func (o SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthOutput) ToSpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutputWithContext(ctx context.Context) SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpringCloudCustomizedAcceleratorGitRepositoryBasicAuth) *SpringCloudCustomizedAcceleratorGitRepositoryBasicAuth {
		return &v
	}).(SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutput)
}

// Specifies the password of git repository basic auth.
func (o SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudCustomizedAcceleratorGitRepositoryBasicAuth) string { return v.Password }).(pulumi.StringOutput)
}

// Specifies the username of git repository basic auth.
func (o SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudCustomizedAcceleratorGitRepositoryBasicAuth) string { return v.Username }).(pulumi.StringOutput)
}

type SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutput struct{ *pulumi.OutputState }

func (SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudCustomizedAcceleratorGitRepositoryBasicAuth)(nil)).Elem()
}

func (o SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutput) ToSpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutput() SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutput {
	return o
}

func (o SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutput) ToSpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutputWithContext(ctx context.Context) SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutput {
	return o
}

func (o SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutput) Elem() SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthOutput {
	return o.ApplyT(func(v *SpringCloudCustomizedAcceleratorGitRepositoryBasicAuth) SpringCloudCustomizedAcceleratorGitRepositoryBasicAuth {
		if v != nil {
			return *v
		}
		var ret SpringCloudCustomizedAcceleratorGitRepositoryBasicAuth
		return ret
	}).(SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthOutput)
}

// Specifies the password of git repository basic auth.
func (o SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudCustomizedAcceleratorGitRepositoryBasicAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Specifies the username of git repository basic auth.
func (o SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudCustomizedAcceleratorGitRepositoryBasicAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type SpringCloudCustomizedAcceleratorGitRepositorySshAuth struct {
	// Specifies the Public SSH Key of git repository basic auth.
	HostKey *string `pulumi:"hostKey"`
	// Specifies the SSH Key algorithm of git repository basic auth.
	HostKeyAlgorithm *string `pulumi:"hostKeyAlgorithm"`
	// Specifies the Private SSH Key of git repository basic auth.
	PrivateKey string `pulumi:"privateKey"`
}

// SpringCloudCustomizedAcceleratorGitRepositorySshAuthInput is an input type that accepts SpringCloudCustomizedAcceleratorGitRepositorySshAuthArgs and SpringCloudCustomizedAcceleratorGitRepositorySshAuthOutput values.
// You can construct a concrete instance of `SpringCloudCustomizedAcceleratorGitRepositorySshAuthInput` via:
//
//	SpringCloudCustomizedAcceleratorGitRepositorySshAuthArgs{...}
type SpringCloudCustomizedAcceleratorGitRepositorySshAuthInput interface {
	pulumi.Input

	ToSpringCloudCustomizedAcceleratorGitRepositorySshAuthOutput() SpringCloudCustomizedAcceleratorGitRepositorySshAuthOutput
	ToSpringCloudCustomizedAcceleratorGitRepositorySshAuthOutputWithContext(context.Context) SpringCloudCustomizedAcceleratorGitRepositorySshAuthOutput
}

type SpringCloudCustomizedAcceleratorGitRepositorySshAuthArgs struct {
	// Specifies the Public SSH Key of git repository basic auth.
	HostKey pulumi.StringPtrInput `pulumi:"hostKey"`
	// Specifies the SSH Key algorithm of git repository basic auth.
	HostKeyAlgorithm pulumi.StringPtrInput `pulumi:"hostKeyAlgorithm"`
	// Specifies the Private SSH Key of git repository basic auth.
	PrivateKey pulumi.StringInput `pulumi:"privateKey"`
}

func (SpringCloudCustomizedAcceleratorGitRepositorySshAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudCustomizedAcceleratorGitRepositorySshAuth)(nil)).Elem()
}

func (i SpringCloudCustomizedAcceleratorGitRepositorySshAuthArgs) ToSpringCloudCustomizedAcceleratorGitRepositorySshAuthOutput() SpringCloudCustomizedAcceleratorGitRepositorySshAuthOutput {
	return i.ToSpringCloudCustomizedAcceleratorGitRepositorySshAuthOutputWithContext(context.Background())
}

func (i SpringCloudCustomizedAcceleratorGitRepositorySshAuthArgs) ToSpringCloudCustomizedAcceleratorGitRepositorySshAuthOutputWithContext(ctx context.Context) SpringCloudCustomizedAcceleratorGitRepositorySshAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudCustomizedAcceleratorGitRepositorySshAuthOutput)
}

func (i SpringCloudCustomizedAcceleratorGitRepositorySshAuthArgs) ToSpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutput() SpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutput {
	return i.ToSpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutputWithContext(context.Background())
}

func (i SpringCloudCustomizedAcceleratorGitRepositorySshAuthArgs) ToSpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutputWithContext(ctx context.Context) SpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudCustomizedAcceleratorGitRepositorySshAuthOutput).ToSpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutputWithContext(ctx)
}

// SpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrInput is an input type that accepts SpringCloudCustomizedAcceleratorGitRepositorySshAuthArgs, SpringCloudCustomizedAcceleratorGitRepositorySshAuthPtr and SpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutput values.
// You can construct a concrete instance of `SpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrInput` via:
//
//	        SpringCloudCustomizedAcceleratorGitRepositorySshAuthArgs{...}
//
//	or:
//
//	        nil
type SpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrInput interface {
	pulumi.Input

	ToSpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutput() SpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutput
	ToSpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutputWithContext(context.Context) SpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutput
}

type springCloudCustomizedAcceleratorGitRepositorySshAuthPtrType SpringCloudCustomizedAcceleratorGitRepositorySshAuthArgs

func SpringCloudCustomizedAcceleratorGitRepositorySshAuthPtr(v *SpringCloudCustomizedAcceleratorGitRepositorySshAuthArgs) SpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrInput {
	return (*springCloudCustomizedAcceleratorGitRepositorySshAuthPtrType)(v)
}

func (*springCloudCustomizedAcceleratorGitRepositorySshAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudCustomizedAcceleratorGitRepositorySshAuth)(nil)).Elem()
}

func (i *springCloudCustomizedAcceleratorGitRepositorySshAuthPtrType) ToSpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutput() SpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutput {
	return i.ToSpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutputWithContext(context.Background())
}

func (i *springCloudCustomizedAcceleratorGitRepositorySshAuthPtrType) ToSpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutputWithContext(ctx context.Context) SpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutput)
}

type SpringCloudCustomizedAcceleratorGitRepositorySshAuthOutput struct{ *pulumi.OutputState }

func (SpringCloudCustomizedAcceleratorGitRepositorySshAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudCustomizedAcceleratorGitRepositorySshAuth)(nil)).Elem()
}

func (o SpringCloudCustomizedAcceleratorGitRepositorySshAuthOutput) ToSpringCloudCustomizedAcceleratorGitRepositorySshAuthOutput() SpringCloudCustomizedAcceleratorGitRepositorySshAuthOutput {
	return o
}

func (o SpringCloudCustomizedAcceleratorGitRepositorySshAuthOutput) ToSpringCloudCustomizedAcceleratorGitRepositorySshAuthOutputWithContext(ctx context.Context) SpringCloudCustomizedAcceleratorGitRepositorySshAuthOutput {
	return o
}

func (o SpringCloudCustomizedAcceleratorGitRepositorySshAuthOutput) ToSpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutput() SpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutput {
	return o.ToSpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutputWithContext(context.Background())
}

func (o SpringCloudCustomizedAcceleratorGitRepositorySshAuthOutput) ToSpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutputWithContext(ctx context.Context) SpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpringCloudCustomizedAcceleratorGitRepositorySshAuth) *SpringCloudCustomizedAcceleratorGitRepositorySshAuth {
		return &v
	}).(SpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutput)
}

// Specifies the Public SSH Key of git repository basic auth.
func (o SpringCloudCustomizedAcceleratorGitRepositorySshAuthOutput) HostKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudCustomizedAcceleratorGitRepositorySshAuth) *string { return v.HostKey }).(pulumi.StringPtrOutput)
}

// Specifies the SSH Key algorithm of git repository basic auth.
func (o SpringCloudCustomizedAcceleratorGitRepositorySshAuthOutput) HostKeyAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudCustomizedAcceleratorGitRepositorySshAuth) *string { return v.HostKeyAlgorithm }).(pulumi.StringPtrOutput)
}

// Specifies the Private SSH Key of git repository basic auth.
func (o SpringCloudCustomizedAcceleratorGitRepositorySshAuthOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudCustomizedAcceleratorGitRepositorySshAuth) string { return v.PrivateKey }).(pulumi.StringOutput)
}

type SpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutput struct{ *pulumi.OutputState }

func (SpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudCustomizedAcceleratorGitRepositorySshAuth)(nil)).Elem()
}

func (o SpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutput) ToSpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutput() SpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutput {
	return o
}

func (o SpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutput) ToSpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutputWithContext(ctx context.Context) SpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutput {
	return o
}

func (o SpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutput) Elem() SpringCloudCustomizedAcceleratorGitRepositorySshAuthOutput {
	return o.ApplyT(func(v *SpringCloudCustomizedAcceleratorGitRepositorySshAuth) SpringCloudCustomizedAcceleratorGitRepositorySshAuth {
		if v != nil {
			return *v
		}
		var ret SpringCloudCustomizedAcceleratorGitRepositorySshAuth
		return ret
	}).(SpringCloudCustomizedAcceleratorGitRepositorySshAuthOutput)
}

// Specifies the Public SSH Key of git repository basic auth.
func (o SpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutput) HostKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudCustomizedAcceleratorGitRepositorySshAuth) *string {
		if v == nil {
			return nil
		}
		return v.HostKey
	}).(pulumi.StringPtrOutput)
}

// Specifies the SSH Key algorithm of git repository basic auth.
func (o SpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutput) HostKeyAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudCustomizedAcceleratorGitRepositorySshAuth) *string {
		if v == nil {
			return nil
		}
		return v.HostKeyAlgorithm
	}).(pulumi.StringPtrOutput)
}

// Specifies the Private SSH Key of git repository basic auth.
func (o SpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudCustomizedAcceleratorGitRepositorySshAuth) *string {
		if v == nil {
			return nil
		}
		return &v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

type SpringCloudDevToolPortalSso struct {
	// Specifies the public identifier for the application.
	ClientId *string `pulumi:"clientId"`
	// Specifies the secret known only to the application and the authorization server.
	ClientSecret *string `pulumi:"clientSecret"`
	// Specifies the URI of a JSON file with generic OIDC provider configuration.
	MetadataUrl *string `pulumi:"metadataUrl"`
	// Specifies a list of specific actions applications can be allowed to do on a user's behalf.
	Scopes []string `pulumi:"scopes"`
}

// SpringCloudDevToolPortalSsoInput is an input type that accepts SpringCloudDevToolPortalSsoArgs and SpringCloudDevToolPortalSsoOutput values.
// You can construct a concrete instance of `SpringCloudDevToolPortalSsoInput` via:
//
//	SpringCloudDevToolPortalSsoArgs{...}
type SpringCloudDevToolPortalSsoInput interface {
	pulumi.Input

	ToSpringCloudDevToolPortalSsoOutput() SpringCloudDevToolPortalSsoOutput
	ToSpringCloudDevToolPortalSsoOutputWithContext(context.Context) SpringCloudDevToolPortalSsoOutput
}

type SpringCloudDevToolPortalSsoArgs struct {
	// Specifies the public identifier for the application.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// Specifies the secret known only to the application and the authorization server.
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	// Specifies the URI of a JSON file with generic OIDC provider configuration.
	MetadataUrl pulumi.StringPtrInput `pulumi:"metadataUrl"`
	// Specifies a list of specific actions applications can be allowed to do on a user's behalf.
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
}

func (SpringCloudDevToolPortalSsoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudDevToolPortalSso)(nil)).Elem()
}

func (i SpringCloudDevToolPortalSsoArgs) ToSpringCloudDevToolPortalSsoOutput() SpringCloudDevToolPortalSsoOutput {
	return i.ToSpringCloudDevToolPortalSsoOutputWithContext(context.Background())
}

func (i SpringCloudDevToolPortalSsoArgs) ToSpringCloudDevToolPortalSsoOutputWithContext(ctx context.Context) SpringCloudDevToolPortalSsoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudDevToolPortalSsoOutput)
}

func (i SpringCloudDevToolPortalSsoArgs) ToSpringCloudDevToolPortalSsoPtrOutput() SpringCloudDevToolPortalSsoPtrOutput {
	return i.ToSpringCloudDevToolPortalSsoPtrOutputWithContext(context.Background())
}

func (i SpringCloudDevToolPortalSsoArgs) ToSpringCloudDevToolPortalSsoPtrOutputWithContext(ctx context.Context) SpringCloudDevToolPortalSsoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudDevToolPortalSsoOutput).ToSpringCloudDevToolPortalSsoPtrOutputWithContext(ctx)
}

// SpringCloudDevToolPortalSsoPtrInput is an input type that accepts SpringCloudDevToolPortalSsoArgs, SpringCloudDevToolPortalSsoPtr and SpringCloudDevToolPortalSsoPtrOutput values.
// You can construct a concrete instance of `SpringCloudDevToolPortalSsoPtrInput` via:
//
//	        SpringCloudDevToolPortalSsoArgs{...}
//
//	or:
//
//	        nil
type SpringCloudDevToolPortalSsoPtrInput interface {
	pulumi.Input

	ToSpringCloudDevToolPortalSsoPtrOutput() SpringCloudDevToolPortalSsoPtrOutput
	ToSpringCloudDevToolPortalSsoPtrOutputWithContext(context.Context) SpringCloudDevToolPortalSsoPtrOutput
}

type springCloudDevToolPortalSsoPtrType SpringCloudDevToolPortalSsoArgs

func SpringCloudDevToolPortalSsoPtr(v *SpringCloudDevToolPortalSsoArgs) SpringCloudDevToolPortalSsoPtrInput {
	return (*springCloudDevToolPortalSsoPtrType)(v)
}

func (*springCloudDevToolPortalSsoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudDevToolPortalSso)(nil)).Elem()
}

func (i *springCloudDevToolPortalSsoPtrType) ToSpringCloudDevToolPortalSsoPtrOutput() SpringCloudDevToolPortalSsoPtrOutput {
	return i.ToSpringCloudDevToolPortalSsoPtrOutputWithContext(context.Background())
}

func (i *springCloudDevToolPortalSsoPtrType) ToSpringCloudDevToolPortalSsoPtrOutputWithContext(ctx context.Context) SpringCloudDevToolPortalSsoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudDevToolPortalSsoPtrOutput)
}

type SpringCloudDevToolPortalSsoOutput struct{ *pulumi.OutputState }

func (SpringCloudDevToolPortalSsoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudDevToolPortalSso)(nil)).Elem()
}

func (o SpringCloudDevToolPortalSsoOutput) ToSpringCloudDevToolPortalSsoOutput() SpringCloudDevToolPortalSsoOutput {
	return o
}

func (o SpringCloudDevToolPortalSsoOutput) ToSpringCloudDevToolPortalSsoOutputWithContext(ctx context.Context) SpringCloudDevToolPortalSsoOutput {
	return o
}

func (o SpringCloudDevToolPortalSsoOutput) ToSpringCloudDevToolPortalSsoPtrOutput() SpringCloudDevToolPortalSsoPtrOutput {
	return o.ToSpringCloudDevToolPortalSsoPtrOutputWithContext(context.Background())
}

func (o SpringCloudDevToolPortalSsoOutput) ToSpringCloudDevToolPortalSsoPtrOutputWithContext(ctx context.Context) SpringCloudDevToolPortalSsoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpringCloudDevToolPortalSso) *SpringCloudDevToolPortalSso {
		return &v
	}).(SpringCloudDevToolPortalSsoPtrOutput)
}

// Specifies the public identifier for the application.
func (o SpringCloudDevToolPortalSsoOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudDevToolPortalSso) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Specifies the secret known only to the application and the authorization server.
func (o SpringCloudDevToolPortalSsoOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudDevToolPortalSso) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// Specifies the URI of a JSON file with generic OIDC provider configuration.
func (o SpringCloudDevToolPortalSsoOutput) MetadataUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudDevToolPortalSso) *string { return v.MetadataUrl }).(pulumi.StringPtrOutput)
}

// Specifies a list of specific actions applications can be allowed to do on a user's behalf.
func (o SpringCloudDevToolPortalSsoOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SpringCloudDevToolPortalSso) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

type SpringCloudDevToolPortalSsoPtrOutput struct{ *pulumi.OutputState }

func (SpringCloudDevToolPortalSsoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudDevToolPortalSso)(nil)).Elem()
}

func (o SpringCloudDevToolPortalSsoPtrOutput) ToSpringCloudDevToolPortalSsoPtrOutput() SpringCloudDevToolPortalSsoPtrOutput {
	return o
}

func (o SpringCloudDevToolPortalSsoPtrOutput) ToSpringCloudDevToolPortalSsoPtrOutputWithContext(ctx context.Context) SpringCloudDevToolPortalSsoPtrOutput {
	return o
}

func (o SpringCloudDevToolPortalSsoPtrOutput) Elem() SpringCloudDevToolPortalSsoOutput {
	return o.ApplyT(func(v *SpringCloudDevToolPortalSso) SpringCloudDevToolPortalSso {
		if v != nil {
			return *v
		}
		var ret SpringCloudDevToolPortalSso
		return ret
	}).(SpringCloudDevToolPortalSsoOutput)
}

// Specifies the public identifier for the application.
func (o SpringCloudDevToolPortalSsoPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudDevToolPortalSso) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Specifies the secret known only to the application and the authorization server.
func (o SpringCloudDevToolPortalSsoPtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudDevToolPortalSso) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// Specifies the URI of a JSON file with generic OIDC provider configuration.
func (o SpringCloudDevToolPortalSsoPtrOutput) MetadataUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudDevToolPortalSso) *string {
		if v == nil {
			return nil
		}
		return v.MetadataUrl
	}).(pulumi.StringPtrOutput)
}

// Specifies a list of specific actions applications can be allowed to do on a user's behalf.
func (o SpringCloudDevToolPortalSsoPtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SpringCloudDevToolPortalSso) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

type SpringCloudGatewayApiMetadata struct {
	// Detailed description of the APIs available on the Gateway instance.
	Description *string `pulumi:"description"`
	// Location of additional documentation for the APIs available on the Gateway instance.
	DocumentationUrl *string `pulumi:"documentationUrl"`
	// Base URL that API consumers will use to access APIs on the Gateway instance.
	ServerUrl *string `pulumi:"serverUrl"`
	// Specifies the title describing the context of the APIs available on the Gateway instance.
	Title *string `pulumi:"title"`
	// Specifies the version of APIs available on this Gateway instance.
	Version *string `pulumi:"version"`
}

// SpringCloudGatewayApiMetadataInput is an input type that accepts SpringCloudGatewayApiMetadataArgs and SpringCloudGatewayApiMetadataOutput values.
// You can construct a concrete instance of `SpringCloudGatewayApiMetadataInput` via:
//
//	SpringCloudGatewayApiMetadataArgs{...}
type SpringCloudGatewayApiMetadataInput interface {
	pulumi.Input

	ToSpringCloudGatewayApiMetadataOutput() SpringCloudGatewayApiMetadataOutput
	ToSpringCloudGatewayApiMetadataOutputWithContext(context.Context) SpringCloudGatewayApiMetadataOutput
}

type SpringCloudGatewayApiMetadataArgs struct {
	// Detailed description of the APIs available on the Gateway instance.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Location of additional documentation for the APIs available on the Gateway instance.
	DocumentationUrl pulumi.StringPtrInput `pulumi:"documentationUrl"`
	// Base URL that API consumers will use to access APIs on the Gateway instance.
	ServerUrl pulumi.StringPtrInput `pulumi:"serverUrl"`
	// Specifies the title describing the context of the APIs available on the Gateway instance.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// Specifies the version of APIs available on this Gateway instance.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (SpringCloudGatewayApiMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudGatewayApiMetadata)(nil)).Elem()
}

func (i SpringCloudGatewayApiMetadataArgs) ToSpringCloudGatewayApiMetadataOutput() SpringCloudGatewayApiMetadataOutput {
	return i.ToSpringCloudGatewayApiMetadataOutputWithContext(context.Background())
}

func (i SpringCloudGatewayApiMetadataArgs) ToSpringCloudGatewayApiMetadataOutputWithContext(ctx context.Context) SpringCloudGatewayApiMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudGatewayApiMetadataOutput)
}

func (i SpringCloudGatewayApiMetadataArgs) ToSpringCloudGatewayApiMetadataPtrOutput() SpringCloudGatewayApiMetadataPtrOutput {
	return i.ToSpringCloudGatewayApiMetadataPtrOutputWithContext(context.Background())
}

func (i SpringCloudGatewayApiMetadataArgs) ToSpringCloudGatewayApiMetadataPtrOutputWithContext(ctx context.Context) SpringCloudGatewayApiMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudGatewayApiMetadataOutput).ToSpringCloudGatewayApiMetadataPtrOutputWithContext(ctx)
}

// SpringCloudGatewayApiMetadataPtrInput is an input type that accepts SpringCloudGatewayApiMetadataArgs, SpringCloudGatewayApiMetadataPtr and SpringCloudGatewayApiMetadataPtrOutput values.
// You can construct a concrete instance of `SpringCloudGatewayApiMetadataPtrInput` via:
//
//	        SpringCloudGatewayApiMetadataArgs{...}
//
//	or:
//
//	        nil
type SpringCloudGatewayApiMetadataPtrInput interface {
	pulumi.Input

	ToSpringCloudGatewayApiMetadataPtrOutput() SpringCloudGatewayApiMetadataPtrOutput
	ToSpringCloudGatewayApiMetadataPtrOutputWithContext(context.Context) SpringCloudGatewayApiMetadataPtrOutput
}

type springCloudGatewayApiMetadataPtrType SpringCloudGatewayApiMetadataArgs

func SpringCloudGatewayApiMetadataPtr(v *SpringCloudGatewayApiMetadataArgs) SpringCloudGatewayApiMetadataPtrInput {
	return (*springCloudGatewayApiMetadataPtrType)(v)
}

func (*springCloudGatewayApiMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudGatewayApiMetadata)(nil)).Elem()
}

func (i *springCloudGatewayApiMetadataPtrType) ToSpringCloudGatewayApiMetadataPtrOutput() SpringCloudGatewayApiMetadataPtrOutput {
	return i.ToSpringCloudGatewayApiMetadataPtrOutputWithContext(context.Background())
}

func (i *springCloudGatewayApiMetadataPtrType) ToSpringCloudGatewayApiMetadataPtrOutputWithContext(ctx context.Context) SpringCloudGatewayApiMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudGatewayApiMetadataPtrOutput)
}

type SpringCloudGatewayApiMetadataOutput struct{ *pulumi.OutputState }

func (SpringCloudGatewayApiMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudGatewayApiMetadata)(nil)).Elem()
}

func (o SpringCloudGatewayApiMetadataOutput) ToSpringCloudGatewayApiMetadataOutput() SpringCloudGatewayApiMetadataOutput {
	return o
}

func (o SpringCloudGatewayApiMetadataOutput) ToSpringCloudGatewayApiMetadataOutputWithContext(ctx context.Context) SpringCloudGatewayApiMetadataOutput {
	return o
}

func (o SpringCloudGatewayApiMetadataOutput) ToSpringCloudGatewayApiMetadataPtrOutput() SpringCloudGatewayApiMetadataPtrOutput {
	return o.ToSpringCloudGatewayApiMetadataPtrOutputWithContext(context.Background())
}

func (o SpringCloudGatewayApiMetadataOutput) ToSpringCloudGatewayApiMetadataPtrOutputWithContext(ctx context.Context) SpringCloudGatewayApiMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpringCloudGatewayApiMetadata) *SpringCloudGatewayApiMetadata {
		return &v
	}).(SpringCloudGatewayApiMetadataPtrOutput)
}

// Detailed description of the APIs available on the Gateway instance.
func (o SpringCloudGatewayApiMetadataOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudGatewayApiMetadata) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Location of additional documentation for the APIs available on the Gateway instance.
func (o SpringCloudGatewayApiMetadataOutput) DocumentationUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudGatewayApiMetadata) *string { return v.DocumentationUrl }).(pulumi.StringPtrOutput)
}

// Base URL that API consumers will use to access APIs on the Gateway instance.
func (o SpringCloudGatewayApiMetadataOutput) ServerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudGatewayApiMetadata) *string { return v.ServerUrl }).(pulumi.StringPtrOutput)
}

// Specifies the title describing the context of the APIs available on the Gateway instance.
func (o SpringCloudGatewayApiMetadataOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudGatewayApiMetadata) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// Specifies the version of APIs available on this Gateway instance.
func (o SpringCloudGatewayApiMetadataOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudGatewayApiMetadata) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type SpringCloudGatewayApiMetadataPtrOutput struct{ *pulumi.OutputState }

func (SpringCloudGatewayApiMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudGatewayApiMetadata)(nil)).Elem()
}

func (o SpringCloudGatewayApiMetadataPtrOutput) ToSpringCloudGatewayApiMetadataPtrOutput() SpringCloudGatewayApiMetadataPtrOutput {
	return o
}

func (o SpringCloudGatewayApiMetadataPtrOutput) ToSpringCloudGatewayApiMetadataPtrOutputWithContext(ctx context.Context) SpringCloudGatewayApiMetadataPtrOutput {
	return o
}

func (o SpringCloudGatewayApiMetadataPtrOutput) Elem() SpringCloudGatewayApiMetadataOutput {
	return o.ApplyT(func(v *SpringCloudGatewayApiMetadata) SpringCloudGatewayApiMetadata {
		if v != nil {
			return *v
		}
		var ret SpringCloudGatewayApiMetadata
		return ret
	}).(SpringCloudGatewayApiMetadataOutput)
}

// Detailed description of the APIs available on the Gateway instance.
func (o SpringCloudGatewayApiMetadataPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudGatewayApiMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Location of additional documentation for the APIs available on the Gateway instance.
func (o SpringCloudGatewayApiMetadataPtrOutput) DocumentationUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudGatewayApiMetadata) *string {
		if v == nil {
			return nil
		}
		return v.DocumentationUrl
	}).(pulumi.StringPtrOutput)
}

// Base URL that API consumers will use to access APIs on the Gateway instance.
func (o SpringCloudGatewayApiMetadataPtrOutput) ServerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudGatewayApiMetadata) *string {
		if v == nil {
			return nil
		}
		return v.ServerUrl
	}).(pulumi.StringPtrOutput)
}

// Specifies the title describing the context of the APIs available on the Gateway instance.
func (o SpringCloudGatewayApiMetadataPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudGatewayApiMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Specifies the version of APIs available on this Gateway instance.
func (o SpringCloudGatewayApiMetadataPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudGatewayApiMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type SpringCloudGatewayClientAuthorization struct {
	// Specifies the Spring Cloud Certificate IDs of the Spring Cloud Gateway.
	CertificateIds []string `pulumi:"certificateIds"`
	// Specifies whether the client certificate verification is enabled.
	VerificationEnabled *bool `pulumi:"verificationEnabled"`
}

// SpringCloudGatewayClientAuthorizationInput is an input type that accepts SpringCloudGatewayClientAuthorizationArgs and SpringCloudGatewayClientAuthorizationOutput values.
// You can construct a concrete instance of `SpringCloudGatewayClientAuthorizationInput` via:
//
//	SpringCloudGatewayClientAuthorizationArgs{...}
type SpringCloudGatewayClientAuthorizationInput interface {
	pulumi.Input

	ToSpringCloudGatewayClientAuthorizationOutput() SpringCloudGatewayClientAuthorizationOutput
	ToSpringCloudGatewayClientAuthorizationOutputWithContext(context.Context) SpringCloudGatewayClientAuthorizationOutput
}

type SpringCloudGatewayClientAuthorizationArgs struct {
	// Specifies the Spring Cloud Certificate IDs of the Spring Cloud Gateway.
	CertificateIds pulumi.StringArrayInput `pulumi:"certificateIds"`
	// Specifies whether the client certificate verification is enabled.
	VerificationEnabled pulumi.BoolPtrInput `pulumi:"verificationEnabled"`
}

func (SpringCloudGatewayClientAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudGatewayClientAuthorization)(nil)).Elem()
}

func (i SpringCloudGatewayClientAuthorizationArgs) ToSpringCloudGatewayClientAuthorizationOutput() SpringCloudGatewayClientAuthorizationOutput {
	return i.ToSpringCloudGatewayClientAuthorizationOutputWithContext(context.Background())
}

func (i SpringCloudGatewayClientAuthorizationArgs) ToSpringCloudGatewayClientAuthorizationOutputWithContext(ctx context.Context) SpringCloudGatewayClientAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudGatewayClientAuthorizationOutput)
}

func (i SpringCloudGatewayClientAuthorizationArgs) ToSpringCloudGatewayClientAuthorizationPtrOutput() SpringCloudGatewayClientAuthorizationPtrOutput {
	return i.ToSpringCloudGatewayClientAuthorizationPtrOutputWithContext(context.Background())
}

func (i SpringCloudGatewayClientAuthorizationArgs) ToSpringCloudGatewayClientAuthorizationPtrOutputWithContext(ctx context.Context) SpringCloudGatewayClientAuthorizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudGatewayClientAuthorizationOutput).ToSpringCloudGatewayClientAuthorizationPtrOutputWithContext(ctx)
}

// SpringCloudGatewayClientAuthorizationPtrInput is an input type that accepts SpringCloudGatewayClientAuthorizationArgs, SpringCloudGatewayClientAuthorizationPtr and SpringCloudGatewayClientAuthorizationPtrOutput values.
// You can construct a concrete instance of `SpringCloudGatewayClientAuthorizationPtrInput` via:
//
//	        SpringCloudGatewayClientAuthorizationArgs{...}
//
//	or:
//
//	        nil
type SpringCloudGatewayClientAuthorizationPtrInput interface {
	pulumi.Input

	ToSpringCloudGatewayClientAuthorizationPtrOutput() SpringCloudGatewayClientAuthorizationPtrOutput
	ToSpringCloudGatewayClientAuthorizationPtrOutputWithContext(context.Context) SpringCloudGatewayClientAuthorizationPtrOutput
}

type springCloudGatewayClientAuthorizationPtrType SpringCloudGatewayClientAuthorizationArgs

func SpringCloudGatewayClientAuthorizationPtr(v *SpringCloudGatewayClientAuthorizationArgs) SpringCloudGatewayClientAuthorizationPtrInput {
	return (*springCloudGatewayClientAuthorizationPtrType)(v)
}

func (*springCloudGatewayClientAuthorizationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudGatewayClientAuthorization)(nil)).Elem()
}

func (i *springCloudGatewayClientAuthorizationPtrType) ToSpringCloudGatewayClientAuthorizationPtrOutput() SpringCloudGatewayClientAuthorizationPtrOutput {
	return i.ToSpringCloudGatewayClientAuthorizationPtrOutputWithContext(context.Background())
}

func (i *springCloudGatewayClientAuthorizationPtrType) ToSpringCloudGatewayClientAuthorizationPtrOutputWithContext(ctx context.Context) SpringCloudGatewayClientAuthorizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudGatewayClientAuthorizationPtrOutput)
}

type SpringCloudGatewayClientAuthorizationOutput struct{ *pulumi.OutputState }

func (SpringCloudGatewayClientAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudGatewayClientAuthorization)(nil)).Elem()
}

func (o SpringCloudGatewayClientAuthorizationOutput) ToSpringCloudGatewayClientAuthorizationOutput() SpringCloudGatewayClientAuthorizationOutput {
	return o
}

func (o SpringCloudGatewayClientAuthorizationOutput) ToSpringCloudGatewayClientAuthorizationOutputWithContext(ctx context.Context) SpringCloudGatewayClientAuthorizationOutput {
	return o
}

func (o SpringCloudGatewayClientAuthorizationOutput) ToSpringCloudGatewayClientAuthorizationPtrOutput() SpringCloudGatewayClientAuthorizationPtrOutput {
	return o.ToSpringCloudGatewayClientAuthorizationPtrOutputWithContext(context.Background())
}

func (o SpringCloudGatewayClientAuthorizationOutput) ToSpringCloudGatewayClientAuthorizationPtrOutputWithContext(ctx context.Context) SpringCloudGatewayClientAuthorizationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpringCloudGatewayClientAuthorization) *SpringCloudGatewayClientAuthorization {
		return &v
	}).(SpringCloudGatewayClientAuthorizationPtrOutput)
}

// Specifies the Spring Cloud Certificate IDs of the Spring Cloud Gateway.
func (o SpringCloudGatewayClientAuthorizationOutput) CertificateIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SpringCloudGatewayClientAuthorization) []string { return v.CertificateIds }).(pulumi.StringArrayOutput)
}

// Specifies whether the client certificate verification is enabled.
func (o SpringCloudGatewayClientAuthorizationOutput) VerificationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SpringCloudGatewayClientAuthorization) *bool { return v.VerificationEnabled }).(pulumi.BoolPtrOutput)
}

type SpringCloudGatewayClientAuthorizationPtrOutput struct{ *pulumi.OutputState }

func (SpringCloudGatewayClientAuthorizationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudGatewayClientAuthorization)(nil)).Elem()
}

func (o SpringCloudGatewayClientAuthorizationPtrOutput) ToSpringCloudGatewayClientAuthorizationPtrOutput() SpringCloudGatewayClientAuthorizationPtrOutput {
	return o
}

func (o SpringCloudGatewayClientAuthorizationPtrOutput) ToSpringCloudGatewayClientAuthorizationPtrOutputWithContext(ctx context.Context) SpringCloudGatewayClientAuthorizationPtrOutput {
	return o
}

func (o SpringCloudGatewayClientAuthorizationPtrOutput) Elem() SpringCloudGatewayClientAuthorizationOutput {
	return o.ApplyT(func(v *SpringCloudGatewayClientAuthorization) SpringCloudGatewayClientAuthorization {
		if v != nil {
			return *v
		}
		var ret SpringCloudGatewayClientAuthorization
		return ret
	}).(SpringCloudGatewayClientAuthorizationOutput)
}

// Specifies the Spring Cloud Certificate IDs of the Spring Cloud Gateway.
func (o SpringCloudGatewayClientAuthorizationPtrOutput) CertificateIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SpringCloudGatewayClientAuthorization) []string {
		if v == nil {
			return nil
		}
		return v.CertificateIds
	}).(pulumi.StringArrayOutput)
}

// Specifies whether the client certificate verification is enabled.
func (o SpringCloudGatewayClientAuthorizationPtrOutput) VerificationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SpringCloudGatewayClientAuthorization) *bool {
		if v == nil {
			return nil
		}
		return v.VerificationEnabled
	}).(pulumi.BoolPtrOutput)
}

type SpringCloudGatewayCors struct {
	// Allowed headers in cross-site requests. The special value `*` allows actual requests to send any header.
	AllowedHeaders []string `pulumi:"allowedHeaders"`
	// Allowed HTTP methods on cross-site requests. The special value `*` allows all methods. If not set, `GET` and `HEAD` are allowed by default. Possible values are `DELETE`, `GET`, `HEAD`, `MERGE`, `POST`, `OPTIONS` and `PUT`.
	AllowedMethods []string `pulumi:"allowedMethods"`
	// Allowed origin patterns to make cross-site requests.
	AllowedOriginPatterns []string `pulumi:"allowedOriginPatterns"`
	// Allowed origins to make cross-site requests. The special value `*` allows all domains.
	AllowedOrigins []string `pulumi:"allowedOrigins"`
	// is user credentials are supported on cross-site requests?
	CredentialsAllowed *bool `pulumi:"credentialsAllowed"`
	// HTTP response headers to expose for cross-site requests.
	ExposedHeaders []string `pulumi:"exposedHeaders"`
	// How long, in seconds, the response from a pre-flight request can be cached by clients.
	MaxAgeSeconds *int `pulumi:"maxAgeSeconds"`
}

// SpringCloudGatewayCorsInput is an input type that accepts SpringCloudGatewayCorsArgs and SpringCloudGatewayCorsOutput values.
// You can construct a concrete instance of `SpringCloudGatewayCorsInput` via:
//
//	SpringCloudGatewayCorsArgs{...}
type SpringCloudGatewayCorsInput interface {
	pulumi.Input

	ToSpringCloudGatewayCorsOutput() SpringCloudGatewayCorsOutput
	ToSpringCloudGatewayCorsOutputWithContext(context.Context) SpringCloudGatewayCorsOutput
}

type SpringCloudGatewayCorsArgs struct {
	// Allowed headers in cross-site requests. The special value `*` allows actual requests to send any header.
	AllowedHeaders pulumi.StringArrayInput `pulumi:"allowedHeaders"`
	// Allowed HTTP methods on cross-site requests. The special value `*` allows all methods. If not set, `GET` and `HEAD` are allowed by default. Possible values are `DELETE`, `GET`, `HEAD`, `MERGE`, `POST`, `OPTIONS` and `PUT`.
	AllowedMethods pulumi.StringArrayInput `pulumi:"allowedMethods"`
	// Allowed origin patterns to make cross-site requests.
	AllowedOriginPatterns pulumi.StringArrayInput `pulumi:"allowedOriginPatterns"`
	// Allowed origins to make cross-site requests. The special value `*` allows all domains.
	AllowedOrigins pulumi.StringArrayInput `pulumi:"allowedOrigins"`
	// is user credentials are supported on cross-site requests?
	CredentialsAllowed pulumi.BoolPtrInput `pulumi:"credentialsAllowed"`
	// HTTP response headers to expose for cross-site requests.
	ExposedHeaders pulumi.StringArrayInput `pulumi:"exposedHeaders"`
	// How long, in seconds, the response from a pre-flight request can be cached by clients.
	MaxAgeSeconds pulumi.IntPtrInput `pulumi:"maxAgeSeconds"`
}

func (SpringCloudGatewayCorsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudGatewayCors)(nil)).Elem()
}

func (i SpringCloudGatewayCorsArgs) ToSpringCloudGatewayCorsOutput() SpringCloudGatewayCorsOutput {
	return i.ToSpringCloudGatewayCorsOutputWithContext(context.Background())
}

func (i SpringCloudGatewayCorsArgs) ToSpringCloudGatewayCorsOutputWithContext(ctx context.Context) SpringCloudGatewayCorsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudGatewayCorsOutput)
}

func (i SpringCloudGatewayCorsArgs) ToSpringCloudGatewayCorsPtrOutput() SpringCloudGatewayCorsPtrOutput {
	return i.ToSpringCloudGatewayCorsPtrOutputWithContext(context.Background())
}

func (i SpringCloudGatewayCorsArgs) ToSpringCloudGatewayCorsPtrOutputWithContext(ctx context.Context) SpringCloudGatewayCorsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudGatewayCorsOutput).ToSpringCloudGatewayCorsPtrOutputWithContext(ctx)
}

// SpringCloudGatewayCorsPtrInput is an input type that accepts SpringCloudGatewayCorsArgs, SpringCloudGatewayCorsPtr and SpringCloudGatewayCorsPtrOutput values.
// You can construct a concrete instance of `SpringCloudGatewayCorsPtrInput` via:
//
//	        SpringCloudGatewayCorsArgs{...}
//
//	or:
//
//	        nil
type SpringCloudGatewayCorsPtrInput interface {
	pulumi.Input

	ToSpringCloudGatewayCorsPtrOutput() SpringCloudGatewayCorsPtrOutput
	ToSpringCloudGatewayCorsPtrOutputWithContext(context.Context) SpringCloudGatewayCorsPtrOutput
}

type springCloudGatewayCorsPtrType SpringCloudGatewayCorsArgs

func SpringCloudGatewayCorsPtr(v *SpringCloudGatewayCorsArgs) SpringCloudGatewayCorsPtrInput {
	return (*springCloudGatewayCorsPtrType)(v)
}

func (*springCloudGatewayCorsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudGatewayCors)(nil)).Elem()
}

func (i *springCloudGatewayCorsPtrType) ToSpringCloudGatewayCorsPtrOutput() SpringCloudGatewayCorsPtrOutput {
	return i.ToSpringCloudGatewayCorsPtrOutputWithContext(context.Background())
}

func (i *springCloudGatewayCorsPtrType) ToSpringCloudGatewayCorsPtrOutputWithContext(ctx context.Context) SpringCloudGatewayCorsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudGatewayCorsPtrOutput)
}

type SpringCloudGatewayCorsOutput struct{ *pulumi.OutputState }

func (SpringCloudGatewayCorsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudGatewayCors)(nil)).Elem()
}

func (o SpringCloudGatewayCorsOutput) ToSpringCloudGatewayCorsOutput() SpringCloudGatewayCorsOutput {
	return o
}

func (o SpringCloudGatewayCorsOutput) ToSpringCloudGatewayCorsOutputWithContext(ctx context.Context) SpringCloudGatewayCorsOutput {
	return o
}

func (o SpringCloudGatewayCorsOutput) ToSpringCloudGatewayCorsPtrOutput() SpringCloudGatewayCorsPtrOutput {
	return o.ToSpringCloudGatewayCorsPtrOutputWithContext(context.Background())
}

func (o SpringCloudGatewayCorsOutput) ToSpringCloudGatewayCorsPtrOutputWithContext(ctx context.Context) SpringCloudGatewayCorsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpringCloudGatewayCors) *SpringCloudGatewayCors {
		return &v
	}).(SpringCloudGatewayCorsPtrOutput)
}

// Allowed headers in cross-site requests. The special value `*` allows actual requests to send any header.
func (o SpringCloudGatewayCorsOutput) AllowedHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SpringCloudGatewayCors) []string { return v.AllowedHeaders }).(pulumi.StringArrayOutput)
}

// Allowed HTTP methods on cross-site requests. The special value `*` allows all methods. If not set, `GET` and `HEAD` are allowed by default. Possible values are `DELETE`, `GET`, `HEAD`, `MERGE`, `POST`, `OPTIONS` and `PUT`.
func (o SpringCloudGatewayCorsOutput) AllowedMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SpringCloudGatewayCors) []string { return v.AllowedMethods }).(pulumi.StringArrayOutput)
}

// Allowed origin patterns to make cross-site requests.
func (o SpringCloudGatewayCorsOutput) AllowedOriginPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SpringCloudGatewayCors) []string { return v.AllowedOriginPatterns }).(pulumi.StringArrayOutput)
}

// Allowed origins to make cross-site requests. The special value `*` allows all domains.
func (o SpringCloudGatewayCorsOutput) AllowedOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SpringCloudGatewayCors) []string { return v.AllowedOrigins }).(pulumi.StringArrayOutput)
}

// is user credentials are supported on cross-site requests?
func (o SpringCloudGatewayCorsOutput) CredentialsAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SpringCloudGatewayCors) *bool { return v.CredentialsAllowed }).(pulumi.BoolPtrOutput)
}

// HTTP response headers to expose for cross-site requests.
func (o SpringCloudGatewayCorsOutput) ExposedHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SpringCloudGatewayCors) []string { return v.ExposedHeaders }).(pulumi.StringArrayOutput)
}

// How long, in seconds, the response from a pre-flight request can be cached by clients.
func (o SpringCloudGatewayCorsOutput) MaxAgeSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SpringCloudGatewayCors) *int { return v.MaxAgeSeconds }).(pulumi.IntPtrOutput)
}

type SpringCloudGatewayCorsPtrOutput struct{ *pulumi.OutputState }

func (SpringCloudGatewayCorsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudGatewayCors)(nil)).Elem()
}

func (o SpringCloudGatewayCorsPtrOutput) ToSpringCloudGatewayCorsPtrOutput() SpringCloudGatewayCorsPtrOutput {
	return o
}

func (o SpringCloudGatewayCorsPtrOutput) ToSpringCloudGatewayCorsPtrOutputWithContext(ctx context.Context) SpringCloudGatewayCorsPtrOutput {
	return o
}

func (o SpringCloudGatewayCorsPtrOutput) Elem() SpringCloudGatewayCorsOutput {
	return o.ApplyT(func(v *SpringCloudGatewayCors) SpringCloudGatewayCors {
		if v != nil {
			return *v
		}
		var ret SpringCloudGatewayCors
		return ret
	}).(SpringCloudGatewayCorsOutput)
}

// Allowed headers in cross-site requests. The special value `*` allows actual requests to send any header.
func (o SpringCloudGatewayCorsPtrOutput) AllowedHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SpringCloudGatewayCors) []string {
		if v == nil {
			return nil
		}
		return v.AllowedHeaders
	}).(pulumi.StringArrayOutput)
}

// Allowed HTTP methods on cross-site requests. The special value `*` allows all methods. If not set, `GET` and `HEAD` are allowed by default. Possible values are `DELETE`, `GET`, `HEAD`, `MERGE`, `POST`, `OPTIONS` and `PUT`.
func (o SpringCloudGatewayCorsPtrOutput) AllowedMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SpringCloudGatewayCors) []string {
		if v == nil {
			return nil
		}
		return v.AllowedMethods
	}).(pulumi.StringArrayOutput)
}

// Allowed origin patterns to make cross-site requests.
func (o SpringCloudGatewayCorsPtrOutput) AllowedOriginPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SpringCloudGatewayCors) []string {
		if v == nil {
			return nil
		}
		return v.AllowedOriginPatterns
	}).(pulumi.StringArrayOutput)
}

// Allowed origins to make cross-site requests. The special value `*` allows all domains.
func (o SpringCloudGatewayCorsPtrOutput) AllowedOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SpringCloudGatewayCors) []string {
		if v == nil {
			return nil
		}
		return v.AllowedOrigins
	}).(pulumi.StringArrayOutput)
}

// is user credentials are supported on cross-site requests?
func (o SpringCloudGatewayCorsPtrOutput) CredentialsAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SpringCloudGatewayCors) *bool {
		if v == nil {
			return nil
		}
		return v.CredentialsAllowed
	}).(pulumi.BoolPtrOutput)
}

// HTTP response headers to expose for cross-site requests.
func (o SpringCloudGatewayCorsPtrOutput) ExposedHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SpringCloudGatewayCors) []string {
		if v == nil {
			return nil
		}
		return v.ExposedHeaders
	}).(pulumi.StringArrayOutput)
}

// How long, in seconds, the response from a pre-flight request can be cached by clients.
func (o SpringCloudGatewayCorsPtrOutput) MaxAgeSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SpringCloudGatewayCors) *int {
		if v == nil {
			return nil
		}
		return v.MaxAgeSeconds
	}).(pulumi.IntPtrOutput)
}

type SpringCloudGatewayQuota struct {
	// Specifies the required cpu of the Spring Cloud Deployment. Possible Values are `500m`, `1`, `2`, `3` and `4`. Defaults to `1` if not specified.
	//
	// > **Note:** `cpu` supports `500m` and `1` for Basic tier, `500m`, `1`, `2`, `3` and `4` for Standard tier.
	Cpu *string `pulumi:"cpu"`
	// Specifies the required memory size of the Spring Cloud Deployment. Possible Values are `512Mi`, `1Gi`, `2Gi`, `3Gi`, `4Gi`, `5Gi`, `6Gi`, `7Gi`, and `8Gi`. Defaults to `2Gi` if not specified.
	//
	// > **Note:** `memory` supports `512Mi`, `1Gi` and `2Gi` for Basic tier, `512Mi`, `1Gi`, `2Gi`, `3Gi`, `4Gi`, `5Gi`, `6Gi`, `7Gi`, and `8Gi` for Standard tier.
	Memory *string `pulumi:"memory"`
}

// SpringCloudGatewayQuotaInput is an input type that accepts SpringCloudGatewayQuotaArgs and SpringCloudGatewayQuotaOutput values.
// You can construct a concrete instance of `SpringCloudGatewayQuotaInput` via:
//
//	SpringCloudGatewayQuotaArgs{...}
type SpringCloudGatewayQuotaInput interface {
	pulumi.Input

	ToSpringCloudGatewayQuotaOutput() SpringCloudGatewayQuotaOutput
	ToSpringCloudGatewayQuotaOutputWithContext(context.Context) SpringCloudGatewayQuotaOutput
}

type SpringCloudGatewayQuotaArgs struct {
	// Specifies the required cpu of the Spring Cloud Deployment. Possible Values are `500m`, `1`, `2`, `3` and `4`. Defaults to `1` if not specified.
	//
	// > **Note:** `cpu` supports `500m` and `1` for Basic tier, `500m`, `1`, `2`, `3` and `4` for Standard tier.
	Cpu pulumi.StringPtrInput `pulumi:"cpu"`
	// Specifies the required memory size of the Spring Cloud Deployment. Possible Values are `512Mi`, `1Gi`, `2Gi`, `3Gi`, `4Gi`, `5Gi`, `6Gi`, `7Gi`, and `8Gi`. Defaults to `2Gi` if not specified.
	//
	// > **Note:** `memory` supports `512Mi`, `1Gi` and `2Gi` for Basic tier, `512Mi`, `1Gi`, `2Gi`, `3Gi`, `4Gi`, `5Gi`, `6Gi`, `7Gi`, and `8Gi` for Standard tier.
	Memory pulumi.StringPtrInput `pulumi:"memory"`
}

func (SpringCloudGatewayQuotaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudGatewayQuota)(nil)).Elem()
}

func (i SpringCloudGatewayQuotaArgs) ToSpringCloudGatewayQuotaOutput() SpringCloudGatewayQuotaOutput {
	return i.ToSpringCloudGatewayQuotaOutputWithContext(context.Background())
}

func (i SpringCloudGatewayQuotaArgs) ToSpringCloudGatewayQuotaOutputWithContext(ctx context.Context) SpringCloudGatewayQuotaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudGatewayQuotaOutput)
}

func (i SpringCloudGatewayQuotaArgs) ToSpringCloudGatewayQuotaPtrOutput() SpringCloudGatewayQuotaPtrOutput {
	return i.ToSpringCloudGatewayQuotaPtrOutputWithContext(context.Background())
}

func (i SpringCloudGatewayQuotaArgs) ToSpringCloudGatewayQuotaPtrOutputWithContext(ctx context.Context) SpringCloudGatewayQuotaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudGatewayQuotaOutput).ToSpringCloudGatewayQuotaPtrOutputWithContext(ctx)
}

// SpringCloudGatewayQuotaPtrInput is an input type that accepts SpringCloudGatewayQuotaArgs, SpringCloudGatewayQuotaPtr and SpringCloudGatewayQuotaPtrOutput values.
// You can construct a concrete instance of `SpringCloudGatewayQuotaPtrInput` via:
//
//	        SpringCloudGatewayQuotaArgs{...}
//
//	or:
//
//	        nil
type SpringCloudGatewayQuotaPtrInput interface {
	pulumi.Input

	ToSpringCloudGatewayQuotaPtrOutput() SpringCloudGatewayQuotaPtrOutput
	ToSpringCloudGatewayQuotaPtrOutputWithContext(context.Context) SpringCloudGatewayQuotaPtrOutput
}

type springCloudGatewayQuotaPtrType SpringCloudGatewayQuotaArgs

func SpringCloudGatewayQuotaPtr(v *SpringCloudGatewayQuotaArgs) SpringCloudGatewayQuotaPtrInput {
	return (*springCloudGatewayQuotaPtrType)(v)
}

func (*springCloudGatewayQuotaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudGatewayQuota)(nil)).Elem()
}

func (i *springCloudGatewayQuotaPtrType) ToSpringCloudGatewayQuotaPtrOutput() SpringCloudGatewayQuotaPtrOutput {
	return i.ToSpringCloudGatewayQuotaPtrOutputWithContext(context.Background())
}

func (i *springCloudGatewayQuotaPtrType) ToSpringCloudGatewayQuotaPtrOutputWithContext(ctx context.Context) SpringCloudGatewayQuotaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudGatewayQuotaPtrOutput)
}

type SpringCloudGatewayQuotaOutput struct{ *pulumi.OutputState }

func (SpringCloudGatewayQuotaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudGatewayQuota)(nil)).Elem()
}

func (o SpringCloudGatewayQuotaOutput) ToSpringCloudGatewayQuotaOutput() SpringCloudGatewayQuotaOutput {
	return o
}

func (o SpringCloudGatewayQuotaOutput) ToSpringCloudGatewayQuotaOutputWithContext(ctx context.Context) SpringCloudGatewayQuotaOutput {
	return o
}

func (o SpringCloudGatewayQuotaOutput) ToSpringCloudGatewayQuotaPtrOutput() SpringCloudGatewayQuotaPtrOutput {
	return o.ToSpringCloudGatewayQuotaPtrOutputWithContext(context.Background())
}

func (o SpringCloudGatewayQuotaOutput) ToSpringCloudGatewayQuotaPtrOutputWithContext(ctx context.Context) SpringCloudGatewayQuotaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpringCloudGatewayQuota) *SpringCloudGatewayQuota {
		return &v
	}).(SpringCloudGatewayQuotaPtrOutput)
}

// Specifies the required cpu of the Spring Cloud Deployment. Possible Values are `500m`, `1`, `2`, `3` and `4`. Defaults to `1` if not specified.
//
// > **Note:** `cpu` supports `500m` and `1` for Basic tier, `500m`, `1`, `2`, `3` and `4` for Standard tier.
func (o SpringCloudGatewayQuotaOutput) Cpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudGatewayQuota) *string { return v.Cpu }).(pulumi.StringPtrOutput)
}

// Specifies the required memory size of the Spring Cloud Deployment. Possible Values are `512Mi`, `1Gi`, `2Gi`, `3Gi`, `4Gi`, `5Gi`, `6Gi`, `7Gi`, and `8Gi`. Defaults to `2Gi` if not specified.
//
// > **Note:** `memory` supports `512Mi`, `1Gi` and `2Gi` for Basic tier, `512Mi`, `1Gi`, `2Gi`, `3Gi`, `4Gi`, `5Gi`, `6Gi`, `7Gi`, and `8Gi` for Standard tier.
func (o SpringCloudGatewayQuotaOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudGatewayQuota) *string { return v.Memory }).(pulumi.StringPtrOutput)
}

type SpringCloudGatewayQuotaPtrOutput struct{ *pulumi.OutputState }

func (SpringCloudGatewayQuotaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudGatewayQuota)(nil)).Elem()
}

func (o SpringCloudGatewayQuotaPtrOutput) ToSpringCloudGatewayQuotaPtrOutput() SpringCloudGatewayQuotaPtrOutput {
	return o
}

func (o SpringCloudGatewayQuotaPtrOutput) ToSpringCloudGatewayQuotaPtrOutputWithContext(ctx context.Context) SpringCloudGatewayQuotaPtrOutput {
	return o
}

func (o SpringCloudGatewayQuotaPtrOutput) Elem() SpringCloudGatewayQuotaOutput {
	return o.ApplyT(func(v *SpringCloudGatewayQuota) SpringCloudGatewayQuota {
		if v != nil {
			return *v
		}
		var ret SpringCloudGatewayQuota
		return ret
	}).(SpringCloudGatewayQuotaOutput)
}

// Specifies the required cpu of the Spring Cloud Deployment. Possible Values are `500m`, `1`, `2`, `3` and `4`. Defaults to `1` if not specified.
//
// > **Note:** `cpu` supports `500m` and `1` for Basic tier, `500m`, `1`, `2`, `3` and `4` for Standard tier.
func (o SpringCloudGatewayQuotaPtrOutput) Cpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudGatewayQuota) *string {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.StringPtrOutput)
}

// Specifies the required memory size of the Spring Cloud Deployment. Possible Values are `512Mi`, `1Gi`, `2Gi`, `3Gi`, `4Gi`, `5Gi`, `6Gi`, `7Gi`, and `8Gi`. Defaults to `2Gi` if not specified.
//
// > **Note:** `memory` supports `512Mi`, `1Gi` and `2Gi` for Basic tier, `512Mi`, `1Gi`, `2Gi`, `3Gi`, `4Gi`, `5Gi`, `6Gi`, `7Gi`, and `8Gi` for Standard tier.
func (o SpringCloudGatewayQuotaPtrOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudGatewayQuota) *string {
		if v == nil {
			return nil
		}
		return v.Memory
	}).(pulumi.StringPtrOutput)
}

type SpringCloudGatewayRouteConfigOpenApi struct {
	// The URI of OpenAPI specification.
	Uri *string `pulumi:"uri"`
}

// SpringCloudGatewayRouteConfigOpenApiInput is an input type that accepts SpringCloudGatewayRouteConfigOpenApiArgs and SpringCloudGatewayRouteConfigOpenApiOutput values.
// You can construct a concrete instance of `SpringCloudGatewayRouteConfigOpenApiInput` via:
//
//	SpringCloudGatewayRouteConfigOpenApiArgs{...}
type SpringCloudGatewayRouteConfigOpenApiInput interface {
	pulumi.Input

	ToSpringCloudGatewayRouteConfigOpenApiOutput() SpringCloudGatewayRouteConfigOpenApiOutput
	ToSpringCloudGatewayRouteConfigOpenApiOutputWithContext(context.Context) SpringCloudGatewayRouteConfigOpenApiOutput
}

type SpringCloudGatewayRouteConfigOpenApiArgs struct {
	// The URI of OpenAPI specification.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (SpringCloudGatewayRouteConfigOpenApiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudGatewayRouteConfigOpenApi)(nil)).Elem()
}

func (i SpringCloudGatewayRouteConfigOpenApiArgs) ToSpringCloudGatewayRouteConfigOpenApiOutput() SpringCloudGatewayRouteConfigOpenApiOutput {
	return i.ToSpringCloudGatewayRouteConfigOpenApiOutputWithContext(context.Background())
}

func (i SpringCloudGatewayRouteConfigOpenApiArgs) ToSpringCloudGatewayRouteConfigOpenApiOutputWithContext(ctx context.Context) SpringCloudGatewayRouteConfigOpenApiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudGatewayRouteConfigOpenApiOutput)
}

func (i SpringCloudGatewayRouteConfigOpenApiArgs) ToSpringCloudGatewayRouteConfigOpenApiPtrOutput() SpringCloudGatewayRouteConfigOpenApiPtrOutput {
	return i.ToSpringCloudGatewayRouteConfigOpenApiPtrOutputWithContext(context.Background())
}

func (i SpringCloudGatewayRouteConfigOpenApiArgs) ToSpringCloudGatewayRouteConfigOpenApiPtrOutputWithContext(ctx context.Context) SpringCloudGatewayRouteConfigOpenApiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudGatewayRouteConfigOpenApiOutput).ToSpringCloudGatewayRouteConfigOpenApiPtrOutputWithContext(ctx)
}

// SpringCloudGatewayRouteConfigOpenApiPtrInput is an input type that accepts SpringCloudGatewayRouteConfigOpenApiArgs, SpringCloudGatewayRouteConfigOpenApiPtr and SpringCloudGatewayRouteConfigOpenApiPtrOutput values.
// You can construct a concrete instance of `SpringCloudGatewayRouteConfigOpenApiPtrInput` via:
//
//	        SpringCloudGatewayRouteConfigOpenApiArgs{...}
//
//	or:
//
//	        nil
type SpringCloudGatewayRouteConfigOpenApiPtrInput interface {
	pulumi.Input

	ToSpringCloudGatewayRouteConfigOpenApiPtrOutput() SpringCloudGatewayRouteConfigOpenApiPtrOutput
	ToSpringCloudGatewayRouteConfigOpenApiPtrOutputWithContext(context.Context) SpringCloudGatewayRouteConfigOpenApiPtrOutput
}

type springCloudGatewayRouteConfigOpenApiPtrType SpringCloudGatewayRouteConfigOpenApiArgs

func SpringCloudGatewayRouteConfigOpenApiPtr(v *SpringCloudGatewayRouteConfigOpenApiArgs) SpringCloudGatewayRouteConfigOpenApiPtrInput {
	return (*springCloudGatewayRouteConfigOpenApiPtrType)(v)
}

func (*springCloudGatewayRouteConfigOpenApiPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudGatewayRouteConfigOpenApi)(nil)).Elem()
}

func (i *springCloudGatewayRouteConfigOpenApiPtrType) ToSpringCloudGatewayRouteConfigOpenApiPtrOutput() SpringCloudGatewayRouteConfigOpenApiPtrOutput {
	return i.ToSpringCloudGatewayRouteConfigOpenApiPtrOutputWithContext(context.Background())
}

func (i *springCloudGatewayRouteConfigOpenApiPtrType) ToSpringCloudGatewayRouteConfigOpenApiPtrOutputWithContext(ctx context.Context) SpringCloudGatewayRouteConfigOpenApiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudGatewayRouteConfigOpenApiPtrOutput)
}

type SpringCloudGatewayRouteConfigOpenApiOutput struct{ *pulumi.OutputState }

func (SpringCloudGatewayRouteConfigOpenApiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudGatewayRouteConfigOpenApi)(nil)).Elem()
}

func (o SpringCloudGatewayRouteConfigOpenApiOutput) ToSpringCloudGatewayRouteConfigOpenApiOutput() SpringCloudGatewayRouteConfigOpenApiOutput {
	return o
}

func (o SpringCloudGatewayRouteConfigOpenApiOutput) ToSpringCloudGatewayRouteConfigOpenApiOutputWithContext(ctx context.Context) SpringCloudGatewayRouteConfigOpenApiOutput {
	return o
}

func (o SpringCloudGatewayRouteConfigOpenApiOutput) ToSpringCloudGatewayRouteConfigOpenApiPtrOutput() SpringCloudGatewayRouteConfigOpenApiPtrOutput {
	return o.ToSpringCloudGatewayRouteConfigOpenApiPtrOutputWithContext(context.Background())
}

func (o SpringCloudGatewayRouteConfigOpenApiOutput) ToSpringCloudGatewayRouteConfigOpenApiPtrOutputWithContext(ctx context.Context) SpringCloudGatewayRouteConfigOpenApiPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpringCloudGatewayRouteConfigOpenApi) *SpringCloudGatewayRouteConfigOpenApi {
		return &v
	}).(SpringCloudGatewayRouteConfigOpenApiPtrOutput)
}

// The URI of OpenAPI specification.
func (o SpringCloudGatewayRouteConfigOpenApiOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudGatewayRouteConfigOpenApi) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type SpringCloudGatewayRouteConfigOpenApiPtrOutput struct{ *pulumi.OutputState }

func (SpringCloudGatewayRouteConfigOpenApiPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudGatewayRouteConfigOpenApi)(nil)).Elem()
}

func (o SpringCloudGatewayRouteConfigOpenApiPtrOutput) ToSpringCloudGatewayRouteConfigOpenApiPtrOutput() SpringCloudGatewayRouteConfigOpenApiPtrOutput {
	return o
}

func (o SpringCloudGatewayRouteConfigOpenApiPtrOutput) ToSpringCloudGatewayRouteConfigOpenApiPtrOutputWithContext(ctx context.Context) SpringCloudGatewayRouteConfigOpenApiPtrOutput {
	return o
}

func (o SpringCloudGatewayRouteConfigOpenApiPtrOutput) Elem() SpringCloudGatewayRouteConfigOpenApiOutput {
	return o.ApplyT(func(v *SpringCloudGatewayRouteConfigOpenApi) SpringCloudGatewayRouteConfigOpenApi {
		if v != nil {
			return *v
		}
		var ret SpringCloudGatewayRouteConfigOpenApi
		return ret
	}).(SpringCloudGatewayRouteConfigOpenApiOutput)
}

// The URI of OpenAPI specification.
func (o SpringCloudGatewayRouteConfigOpenApiPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudGatewayRouteConfigOpenApi) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

type SpringCloudGatewayRouteConfigRoute struct {
	// Specifies the classification tags which will be applied to methods in the generated OpenAPI documentation.
	ClassificationTags []string `pulumi:"classificationTags"`
	// Specifies the description which will be applied to methods in the generated OpenAPI documentation.
	Description *string `pulumi:"description"`
	// Specifies a list of filters which are used to modify the request before sending it to the target endpoint, or the received response.
	Filters []string `pulumi:"filters"`
	// Specifies the route processing order.
	Order int `pulumi:"order"`
	// Specifies a list of conditions to evaluate a route for each request. Each predicate may be evaluated against request headers and parameter values. All of the predicates associated with a route must evaluate to true for the route to be matched to the request.
	Predicates []string `pulumi:"predicates"`
	// Should the sso validation be enabled?
	SsoValidationEnabled *bool `pulumi:"ssoValidationEnabled"`
	// Specifies the title which will be applied to methods in the generated OpenAPI documentation.
	Title *string `pulumi:"title"`
	// Should pass currently-authenticated user's identity token to application service?
	TokenRelay *bool `pulumi:"tokenRelay"`
	// Specifies the full uri which will override `appName`.
	Uri *string `pulumi:"uri"`
}

// SpringCloudGatewayRouteConfigRouteInput is an input type that accepts SpringCloudGatewayRouteConfigRouteArgs and SpringCloudGatewayRouteConfigRouteOutput values.
// You can construct a concrete instance of `SpringCloudGatewayRouteConfigRouteInput` via:
//
//	SpringCloudGatewayRouteConfigRouteArgs{...}
type SpringCloudGatewayRouteConfigRouteInput interface {
	pulumi.Input

	ToSpringCloudGatewayRouteConfigRouteOutput() SpringCloudGatewayRouteConfigRouteOutput
	ToSpringCloudGatewayRouteConfigRouteOutputWithContext(context.Context) SpringCloudGatewayRouteConfigRouteOutput
}

type SpringCloudGatewayRouteConfigRouteArgs struct {
	// Specifies the classification tags which will be applied to methods in the generated OpenAPI documentation.
	ClassificationTags pulumi.StringArrayInput `pulumi:"classificationTags"`
	// Specifies the description which will be applied to methods in the generated OpenAPI documentation.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies a list of filters which are used to modify the request before sending it to the target endpoint, or the received response.
	Filters pulumi.StringArrayInput `pulumi:"filters"`
	// Specifies the route processing order.
	Order pulumi.IntInput `pulumi:"order"`
	// Specifies a list of conditions to evaluate a route for each request. Each predicate may be evaluated against request headers and parameter values. All of the predicates associated with a route must evaluate to true for the route to be matched to the request.
	Predicates pulumi.StringArrayInput `pulumi:"predicates"`
	// Should the sso validation be enabled?
	SsoValidationEnabled pulumi.BoolPtrInput `pulumi:"ssoValidationEnabled"`
	// Specifies the title which will be applied to methods in the generated OpenAPI documentation.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// Should pass currently-authenticated user's identity token to application service?
	TokenRelay pulumi.BoolPtrInput `pulumi:"tokenRelay"`
	// Specifies the full uri which will override `appName`.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (SpringCloudGatewayRouteConfigRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudGatewayRouteConfigRoute)(nil)).Elem()
}

func (i SpringCloudGatewayRouteConfigRouteArgs) ToSpringCloudGatewayRouteConfigRouteOutput() SpringCloudGatewayRouteConfigRouteOutput {
	return i.ToSpringCloudGatewayRouteConfigRouteOutputWithContext(context.Background())
}

func (i SpringCloudGatewayRouteConfigRouteArgs) ToSpringCloudGatewayRouteConfigRouteOutputWithContext(ctx context.Context) SpringCloudGatewayRouteConfigRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudGatewayRouteConfigRouteOutput)
}

// SpringCloudGatewayRouteConfigRouteArrayInput is an input type that accepts SpringCloudGatewayRouteConfigRouteArray and SpringCloudGatewayRouteConfigRouteArrayOutput values.
// You can construct a concrete instance of `SpringCloudGatewayRouteConfigRouteArrayInput` via:
//
//	SpringCloudGatewayRouteConfigRouteArray{ SpringCloudGatewayRouteConfigRouteArgs{...} }
type SpringCloudGatewayRouteConfigRouteArrayInput interface {
	pulumi.Input

	ToSpringCloudGatewayRouteConfigRouteArrayOutput() SpringCloudGatewayRouteConfigRouteArrayOutput
	ToSpringCloudGatewayRouteConfigRouteArrayOutputWithContext(context.Context) SpringCloudGatewayRouteConfigRouteArrayOutput
}

type SpringCloudGatewayRouteConfigRouteArray []SpringCloudGatewayRouteConfigRouteInput

func (SpringCloudGatewayRouteConfigRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpringCloudGatewayRouteConfigRoute)(nil)).Elem()
}

func (i SpringCloudGatewayRouteConfigRouteArray) ToSpringCloudGatewayRouteConfigRouteArrayOutput() SpringCloudGatewayRouteConfigRouteArrayOutput {
	return i.ToSpringCloudGatewayRouteConfigRouteArrayOutputWithContext(context.Background())
}

func (i SpringCloudGatewayRouteConfigRouteArray) ToSpringCloudGatewayRouteConfigRouteArrayOutputWithContext(ctx context.Context) SpringCloudGatewayRouteConfigRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudGatewayRouteConfigRouteArrayOutput)
}

type SpringCloudGatewayRouteConfigRouteOutput struct{ *pulumi.OutputState }

func (SpringCloudGatewayRouteConfigRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudGatewayRouteConfigRoute)(nil)).Elem()
}

func (o SpringCloudGatewayRouteConfigRouteOutput) ToSpringCloudGatewayRouteConfigRouteOutput() SpringCloudGatewayRouteConfigRouteOutput {
	return o
}

func (o SpringCloudGatewayRouteConfigRouteOutput) ToSpringCloudGatewayRouteConfigRouteOutputWithContext(ctx context.Context) SpringCloudGatewayRouteConfigRouteOutput {
	return o
}

// Specifies the classification tags which will be applied to methods in the generated OpenAPI documentation.
func (o SpringCloudGatewayRouteConfigRouteOutput) ClassificationTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SpringCloudGatewayRouteConfigRoute) []string { return v.ClassificationTags }).(pulumi.StringArrayOutput)
}

// Specifies the description which will be applied to methods in the generated OpenAPI documentation.
func (o SpringCloudGatewayRouteConfigRouteOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudGatewayRouteConfigRoute) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies a list of filters which are used to modify the request before sending it to the target endpoint, or the received response.
func (o SpringCloudGatewayRouteConfigRouteOutput) Filters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SpringCloudGatewayRouteConfigRoute) []string { return v.Filters }).(pulumi.StringArrayOutput)
}

// Specifies the route processing order.
func (o SpringCloudGatewayRouteConfigRouteOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v SpringCloudGatewayRouteConfigRoute) int { return v.Order }).(pulumi.IntOutput)
}

// Specifies a list of conditions to evaluate a route for each request. Each predicate may be evaluated against request headers and parameter values. All of the predicates associated with a route must evaluate to true for the route to be matched to the request.
func (o SpringCloudGatewayRouteConfigRouteOutput) Predicates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SpringCloudGatewayRouteConfigRoute) []string { return v.Predicates }).(pulumi.StringArrayOutput)
}

// Should the sso validation be enabled?
func (o SpringCloudGatewayRouteConfigRouteOutput) SsoValidationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SpringCloudGatewayRouteConfigRoute) *bool { return v.SsoValidationEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the title which will be applied to methods in the generated OpenAPI documentation.
func (o SpringCloudGatewayRouteConfigRouteOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudGatewayRouteConfigRoute) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// Should pass currently-authenticated user's identity token to application service?
func (o SpringCloudGatewayRouteConfigRouteOutput) TokenRelay() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SpringCloudGatewayRouteConfigRoute) *bool { return v.TokenRelay }).(pulumi.BoolPtrOutput)
}

// Specifies the full uri which will override `appName`.
func (o SpringCloudGatewayRouteConfigRouteOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudGatewayRouteConfigRoute) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type SpringCloudGatewayRouteConfigRouteArrayOutput struct{ *pulumi.OutputState }

func (SpringCloudGatewayRouteConfigRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpringCloudGatewayRouteConfigRoute)(nil)).Elem()
}

func (o SpringCloudGatewayRouteConfigRouteArrayOutput) ToSpringCloudGatewayRouteConfigRouteArrayOutput() SpringCloudGatewayRouteConfigRouteArrayOutput {
	return o
}

func (o SpringCloudGatewayRouteConfigRouteArrayOutput) ToSpringCloudGatewayRouteConfigRouteArrayOutputWithContext(ctx context.Context) SpringCloudGatewayRouteConfigRouteArrayOutput {
	return o
}

func (o SpringCloudGatewayRouteConfigRouteArrayOutput) Index(i pulumi.IntInput) SpringCloudGatewayRouteConfigRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SpringCloudGatewayRouteConfigRoute {
		return vs[0].([]SpringCloudGatewayRouteConfigRoute)[vs[1].(int)]
	}).(SpringCloudGatewayRouteConfigRouteOutput)
}

type SpringCloudGatewaySso struct {
	// The public identifier for the application.
	ClientId *string `pulumi:"clientId"`
	// The secret known only to the application and the authorization server.
	ClientSecret *string `pulumi:"clientSecret"`
	// The URI of Issuer Identifier.
	IssuerUri *string `pulumi:"issuerUri"`
	// It defines the specific actions applications can be allowed to do on a user's behalf.
	Scopes []string `pulumi:"scopes"`
}

// SpringCloudGatewaySsoInput is an input type that accepts SpringCloudGatewaySsoArgs and SpringCloudGatewaySsoOutput values.
// You can construct a concrete instance of `SpringCloudGatewaySsoInput` via:
//
//	SpringCloudGatewaySsoArgs{...}
type SpringCloudGatewaySsoInput interface {
	pulumi.Input

	ToSpringCloudGatewaySsoOutput() SpringCloudGatewaySsoOutput
	ToSpringCloudGatewaySsoOutputWithContext(context.Context) SpringCloudGatewaySsoOutput
}

type SpringCloudGatewaySsoArgs struct {
	// The public identifier for the application.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// The secret known only to the application and the authorization server.
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	// The URI of Issuer Identifier.
	IssuerUri pulumi.StringPtrInput `pulumi:"issuerUri"`
	// It defines the specific actions applications can be allowed to do on a user's behalf.
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
}

func (SpringCloudGatewaySsoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudGatewaySso)(nil)).Elem()
}

func (i SpringCloudGatewaySsoArgs) ToSpringCloudGatewaySsoOutput() SpringCloudGatewaySsoOutput {
	return i.ToSpringCloudGatewaySsoOutputWithContext(context.Background())
}

func (i SpringCloudGatewaySsoArgs) ToSpringCloudGatewaySsoOutputWithContext(ctx context.Context) SpringCloudGatewaySsoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudGatewaySsoOutput)
}

func (i SpringCloudGatewaySsoArgs) ToSpringCloudGatewaySsoPtrOutput() SpringCloudGatewaySsoPtrOutput {
	return i.ToSpringCloudGatewaySsoPtrOutputWithContext(context.Background())
}

func (i SpringCloudGatewaySsoArgs) ToSpringCloudGatewaySsoPtrOutputWithContext(ctx context.Context) SpringCloudGatewaySsoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudGatewaySsoOutput).ToSpringCloudGatewaySsoPtrOutputWithContext(ctx)
}

// SpringCloudGatewaySsoPtrInput is an input type that accepts SpringCloudGatewaySsoArgs, SpringCloudGatewaySsoPtr and SpringCloudGatewaySsoPtrOutput values.
// You can construct a concrete instance of `SpringCloudGatewaySsoPtrInput` via:
//
//	        SpringCloudGatewaySsoArgs{...}
//
//	or:
//
//	        nil
type SpringCloudGatewaySsoPtrInput interface {
	pulumi.Input

	ToSpringCloudGatewaySsoPtrOutput() SpringCloudGatewaySsoPtrOutput
	ToSpringCloudGatewaySsoPtrOutputWithContext(context.Context) SpringCloudGatewaySsoPtrOutput
}

type springCloudGatewaySsoPtrType SpringCloudGatewaySsoArgs

func SpringCloudGatewaySsoPtr(v *SpringCloudGatewaySsoArgs) SpringCloudGatewaySsoPtrInput {
	return (*springCloudGatewaySsoPtrType)(v)
}

func (*springCloudGatewaySsoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudGatewaySso)(nil)).Elem()
}

func (i *springCloudGatewaySsoPtrType) ToSpringCloudGatewaySsoPtrOutput() SpringCloudGatewaySsoPtrOutput {
	return i.ToSpringCloudGatewaySsoPtrOutputWithContext(context.Background())
}

func (i *springCloudGatewaySsoPtrType) ToSpringCloudGatewaySsoPtrOutputWithContext(ctx context.Context) SpringCloudGatewaySsoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudGatewaySsoPtrOutput)
}

type SpringCloudGatewaySsoOutput struct{ *pulumi.OutputState }

func (SpringCloudGatewaySsoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudGatewaySso)(nil)).Elem()
}

func (o SpringCloudGatewaySsoOutput) ToSpringCloudGatewaySsoOutput() SpringCloudGatewaySsoOutput {
	return o
}

func (o SpringCloudGatewaySsoOutput) ToSpringCloudGatewaySsoOutputWithContext(ctx context.Context) SpringCloudGatewaySsoOutput {
	return o
}

func (o SpringCloudGatewaySsoOutput) ToSpringCloudGatewaySsoPtrOutput() SpringCloudGatewaySsoPtrOutput {
	return o.ToSpringCloudGatewaySsoPtrOutputWithContext(context.Background())
}

func (o SpringCloudGatewaySsoOutput) ToSpringCloudGatewaySsoPtrOutputWithContext(ctx context.Context) SpringCloudGatewaySsoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpringCloudGatewaySso) *SpringCloudGatewaySso {
		return &v
	}).(SpringCloudGatewaySsoPtrOutput)
}

// The public identifier for the application.
func (o SpringCloudGatewaySsoOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudGatewaySso) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The secret known only to the application and the authorization server.
func (o SpringCloudGatewaySsoOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudGatewaySso) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// The URI of Issuer Identifier.
func (o SpringCloudGatewaySsoOutput) IssuerUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudGatewaySso) *string { return v.IssuerUri }).(pulumi.StringPtrOutput)
}

// It defines the specific actions applications can be allowed to do on a user's behalf.
func (o SpringCloudGatewaySsoOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SpringCloudGatewaySso) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

type SpringCloudGatewaySsoPtrOutput struct{ *pulumi.OutputState }

func (SpringCloudGatewaySsoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudGatewaySso)(nil)).Elem()
}

func (o SpringCloudGatewaySsoPtrOutput) ToSpringCloudGatewaySsoPtrOutput() SpringCloudGatewaySsoPtrOutput {
	return o
}

func (o SpringCloudGatewaySsoPtrOutput) ToSpringCloudGatewaySsoPtrOutputWithContext(ctx context.Context) SpringCloudGatewaySsoPtrOutput {
	return o
}

func (o SpringCloudGatewaySsoPtrOutput) Elem() SpringCloudGatewaySsoOutput {
	return o.ApplyT(func(v *SpringCloudGatewaySso) SpringCloudGatewaySso {
		if v != nil {
			return *v
		}
		var ret SpringCloudGatewaySso
		return ret
	}).(SpringCloudGatewaySsoOutput)
}

// The public identifier for the application.
func (o SpringCloudGatewaySsoPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudGatewaySso) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The secret known only to the application and the authorization server.
func (o SpringCloudGatewaySsoPtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudGatewaySso) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// The URI of Issuer Identifier.
func (o SpringCloudGatewaySsoPtrOutput) IssuerUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudGatewaySso) *string {
		if v == nil {
			return nil
		}
		return v.IssuerUri
	}).(pulumi.StringPtrOutput)
}

// It defines the specific actions applications can be allowed to do on a user's behalf.
func (o SpringCloudGatewaySsoPtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SpringCloudGatewaySso) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

type SpringCloudJavaDeploymentQuota struct {
	// Specifies the required cpu of the Spring Cloud Deployment. Possible Values are `500m`, `1`, `2`, `3` and `4`. Defaults to `1` if not specified.
	//
	// > **Note:** `cpu` supports `500m` and `1` for Basic tier, `500m`, `1`, `2`, `3` and `4` for Standard tier.
	Cpu *string `pulumi:"cpu"`
	// Specifies the required memory size of the Spring Cloud Deployment. Possible Values are `512Mi`, `1Gi`, `2Gi`, `3Gi`, `4Gi`, `5Gi`, `6Gi`, `7Gi`, and `8Gi`. Defaults to `1Gi` if not specified.
	//
	// > **Note:** `memory` supports `512Mi`, `1Gi` and `2Gi` for Basic tier, `512Mi`, `1Gi`, `2Gi`, `3Gi`, `4Gi`, `5Gi`, `6Gi`, `7Gi`, and `8Gi` for Standard tier.
	Memory *string `pulumi:"memory"`
}

// SpringCloudJavaDeploymentQuotaInput is an input type that accepts SpringCloudJavaDeploymentQuotaArgs and SpringCloudJavaDeploymentQuotaOutput values.
// You can construct a concrete instance of `SpringCloudJavaDeploymentQuotaInput` via:
//
//	SpringCloudJavaDeploymentQuotaArgs{...}
type SpringCloudJavaDeploymentQuotaInput interface {
	pulumi.Input

	ToSpringCloudJavaDeploymentQuotaOutput() SpringCloudJavaDeploymentQuotaOutput
	ToSpringCloudJavaDeploymentQuotaOutputWithContext(context.Context) SpringCloudJavaDeploymentQuotaOutput
}

type SpringCloudJavaDeploymentQuotaArgs struct {
	// Specifies the required cpu of the Spring Cloud Deployment. Possible Values are `500m`, `1`, `2`, `3` and `4`. Defaults to `1` if not specified.
	//
	// > **Note:** `cpu` supports `500m` and `1` for Basic tier, `500m`, `1`, `2`, `3` and `4` for Standard tier.
	Cpu pulumi.StringPtrInput `pulumi:"cpu"`
	// Specifies the required memory size of the Spring Cloud Deployment. Possible Values are `512Mi`, `1Gi`, `2Gi`, `3Gi`, `4Gi`, `5Gi`, `6Gi`, `7Gi`, and `8Gi`. Defaults to `1Gi` if not specified.
	//
	// > **Note:** `memory` supports `512Mi`, `1Gi` and `2Gi` for Basic tier, `512Mi`, `1Gi`, `2Gi`, `3Gi`, `4Gi`, `5Gi`, `6Gi`, `7Gi`, and `8Gi` for Standard tier.
	Memory pulumi.StringPtrInput `pulumi:"memory"`
}

func (SpringCloudJavaDeploymentQuotaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudJavaDeploymentQuota)(nil)).Elem()
}

func (i SpringCloudJavaDeploymentQuotaArgs) ToSpringCloudJavaDeploymentQuotaOutput() SpringCloudJavaDeploymentQuotaOutput {
	return i.ToSpringCloudJavaDeploymentQuotaOutputWithContext(context.Background())
}

func (i SpringCloudJavaDeploymentQuotaArgs) ToSpringCloudJavaDeploymentQuotaOutputWithContext(ctx context.Context) SpringCloudJavaDeploymentQuotaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudJavaDeploymentQuotaOutput)
}

func (i SpringCloudJavaDeploymentQuotaArgs) ToSpringCloudJavaDeploymentQuotaPtrOutput() SpringCloudJavaDeploymentQuotaPtrOutput {
	return i.ToSpringCloudJavaDeploymentQuotaPtrOutputWithContext(context.Background())
}

func (i SpringCloudJavaDeploymentQuotaArgs) ToSpringCloudJavaDeploymentQuotaPtrOutputWithContext(ctx context.Context) SpringCloudJavaDeploymentQuotaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudJavaDeploymentQuotaOutput).ToSpringCloudJavaDeploymentQuotaPtrOutputWithContext(ctx)
}

// SpringCloudJavaDeploymentQuotaPtrInput is an input type that accepts SpringCloudJavaDeploymentQuotaArgs, SpringCloudJavaDeploymentQuotaPtr and SpringCloudJavaDeploymentQuotaPtrOutput values.
// You can construct a concrete instance of `SpringCloudJavaDeploymentQuotaPtrInput` via:
//
//	        SpringCloudJavaDeploymentQuotaArgs{...}
//
//	or:
//
//	        nil
type SpringCloudJavaDeploymentQuotaPtrInput interface {
	pulumi.Input

	ToSpringCloudJavaDeploymentQuotaPtrOutput() SpringCloudJavaDeploymentQuotaPtrOutput
	ToSpringCloudJavaDeploymentQuotaPtrOutputWithContext(context.Context) SpringCloudJavaDeploymentQuotaPtrOutput
}

type springCloudJavaDeploymentQuotaPtrType SpringCloudJavaDeploymentQuotaArgs

func SpringCloudJavaDeploymentQuotaPtr(v *SpringCloudJavaDeploymentQuotaArgs) SpringCloudJavaDeploymentQuotaPtrInput {
	return (*springCloudJavaDeploymentQuotaPtrType)(v)
}

func (*springCloudJavaDeploymentQuotaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudJavaDeploymentQuota)(nil)).Elem()
}

func (i *springCloudJavaDeploymentQuotaPtrType) ToSpringCloudJavaDeploymentQuotaPtrOutput() SpringCloudJavaDeploymentQuotaPtrOutput {
	return i.ToSpringCloudJavaDeploymentQuotaPtrOutputWithContext(context.Background())
}

func (i *springCloudJavaDeploymentQuotaPtrType) ToSpringCloudJavaDeploymentQuotaPtrOutputWithContext(ctx context.Context) SpringCloudJavaDeploymentQuotaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudJavaDeploymentQuotaPtrOutput)
}

type SpringCloudJavaDeploymentQuotaOutput struct{ *pulumi.OutputState }

func (SpringCloudJavaDeploymentQuotaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudJavaDeploymentQuota)(nil)).Elem()
}

func (o SpringCloudJavaDeploymentQuotaOutput) ToSpringCloudJavaDeploymentQuotaOutput() SpringCloudJavaDeploymentQuotaOutput {
	return o
}

func (o SpringCloudJavaDeploymentQuotaOutput) ToSpringCloudJavaDeploymentQuotaOutputWithContext(ctx context.Context) SpringCloudJavaDeploymentQuotaOutput {
	return o
}

func (o SpringCloudJavaDeploymentQuotaOutput) ToSpringCloudJavaDeploymentQuotaPtrOutput() SpringCloudJavaDeploymentQuotaPtrOutput {
	return o.ToSpringCloudJavaDeploymentQuotaPtrOutputWithContext(context.Background())
}

func (o SpringCloudJavaDeploymentQuotaOutput) ToSpringCloudJavaDeploymentQuotaPtrOutputWithContext(ctx context.Context) SpringCloudJavaDeploymentQuotaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpringCloudJavaDeploymentQuota) *SpringCloudJavaDeploymentQuota {
		return &v
	}).(SpringCloudJavaDeploymentQuotaPtrOutput)
}

// Specifies the required cpu of the Spring Cloud Deployment. Possible Values are `500m`, `1`, `2`, `3` and `4`. Defaults to `1` if not specified.
//
// > **Note:** `cpu` supports `500m` and `1` for Basic tier, `500m`, `1`, `2`, `3` and `4` for Standard tier.
func (o SpringCloudJavaDeploymentQuotaOutput) Cpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudJavaDeploymentQuota) *string { return v.Cpu }).(pulumi.StringPtrOutput)
}

// Specifies the required memory size of the Spring Cloud Deployment. Possible Values are `512Mi`, `1Gi`, `2Gi`, `3Gi`, `4Gi`, `5Gi`, `6Gi`, `7Gi`, and `8Gi`. Defaults to `1Gi` if not specified.
//
// > **Note:** `memory` supports `512Mi`, `1Gi` and `2Gi` for Basic tier, `512Mi`, `1Gi`, `2Gi`, `3Gi`, `4Gi`, `5Gi`, `6Gi`, `7Gi`, and `8Gi` for Standard tier.
func (o SpringCloudJavaDeploymentQuotaOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudJavaDeploymentQuota) *string { return v.Memory }).(pulumi.StringPtrOutput)
}

type SpringCloudJavaDeploymentQuotaPtrOutput struct{ *pulumi.OutputState }

func (SpringCloudJavaDeploymentQuotaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudJavaDeploymentQuota)(nil)).Elem()
}

func (o SpringCloudJavaDeploymentQuotaPtrOutput) ToSpringCloudJavaDeploymentQuotaPtrOutput() SpringCloudJavaDeploymentQuotaPtrOutput {
	return o
}

func (o SpringCloudJavaDeploymentQuotaPtrOutput) ToSpringCloudJavaDeploymentQuotaPtrOutputWithContext(ctx context.Context) SpringCloudJavaDeploymentQuotaPtrOutput {
	return o
}

func (o SpringCloudJavaDeploymentQuotaPtrOutput) Elem() SpringCloudJavaDeploymentQuotaOutput {
	return o.ApplyT(func(v *SpringCloudJavaDeploymentQuota) SpringCloudJavaDeploymentQuota {
		if v != nil {
			return *v
		}
		var ret SpringCloudJavaDeploymentQuota
		return ret
	}).(SpringCloudJavaDeploymentQuotaOutput)
}

// Specifies the required cpu of the Spring Cloud Deployment. Possible Values are `500m`, `1`, `2`, `3` and `4`. Defaults to `1` if not specified.
//
// > **Note:** `cpu` supports `500m` and `1` for Basic tier, `500m`, `1`, `2`, `3` and `4` for Standard tier.
func (o SpringCloudJavaDeploymentQuotaPtrOutput) Cpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudJavaDeploymentQuota) *string {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.StringPtrOutput)
}

// Specifies the required memory size of the Spring Cloud Deployment. Possible Values are `512Mi`, `1Gi`, `2Gi`, `3Gi`, `4Gi`, `5Gi`, `6Gi`, `7Gi`, and `8Gi`. Defaults to `1Gi` if not specified.
//
// > **Note:** `memory` supports `512Mi`, `1Gi` and `2Gi` for Basic tier, `512Mi`, `1Gi`, `2Gi`, `3Gi`, `4Gi`, `5Gi`, `6Gi`, `7Gi`, and `8Gi` for Standard tier.
func (o SpringCloudJavaDeploymentQuotaPtrOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudJavaDeploymentQuota) *string {
		if v == nil {
			return nil
		}
		return v.Memory
	}).(pulumi.StringPtrOutput)
}

type SpringCloudServiceConfigServerGitSetting struct {
	// A `httpBasicAuth` block as defined below.
	HttpBasicAuth *SpringCloudServiceConfigServerGitSettingHttpBasicAuth `pulumi:"httpBasicAuth"`
	// The default label of the Git repository, should be the branch name, tag name, or commit-id of the repository.
	Label *string `pulumi:"label"`
	// One or more `repository` blocks as defined below.
	Repositories []SpringCloudServiceConfigServerGitSettingRepository `pulumi:"repositories"`
	// An array of strings used to search subdirectories of the Git repository.
	SearchPaths []string `pulumi:"searchPaths"`
	// A `sshAuth` block as defined below.
	SshAuth *SpringCloudServiceConfigServerGitSettingSshAuth `pulumi:"sshAuth"`
	// The URI of the default Git repository used as the Config Server back end, should be started with `http://`, `https://`, `git@`, or `ssh://`.
	Uri string `pulumi:"uri"`
}

// SpringCloudServiceConfigServerGitSettingInput is an input type that accepts SpringCloudServiceConfigServerGitSettingArgs and SpringCloudServiceConfigServerGitSettingOutput values.
// You can construct a concrete instance of `SpringCloudServiceConfigServerGitSettingInput` via:
//
//	SpringCloudServiceConfigServerGitSettingArgs{...}
type SpringCloudServiceConfigServerGitSettingInput interface {
	pulumi.Input

	ToSpringCloudServiceConfigServerGitSettingOutput() SpringCloudServiceConfigServerGitSettingOutput
	ToSpringCloudServiceConfigServerGitSettingOutputWithContext(context.Context) SpringCloudServiceConfigServerGitSettingOutput
}

type SpringCloudServiceConfigServerGitSettingArgs struct {
	// A `httpBasicAuth` block as defined below.
	HttpBasicAuth SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrInput `pulumi:"httpBasicAuth"`
	// The default label of the Git repository, should be the branch name, tag name, or commit-id of the repository.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// One or more `repository` blocks as defined below.
	Repositories SpringCloudServiceConfigServerGitSettingRepositoryArrayInput `pulumi:"repositories"`
	// An array of strings used to search subdirectories of the Git repository.
	SearchPaths pulumi.StringArrayInput `pulumi:"searchPaths"`
	// A `sshAuth` block as defined below.
	SshAuth SpringCloudServiceConfigServerGitSettingSshAuthPtrInput `pulumi:"sshAuth"`
	// The URI of the default Git repository used as the Config Server back end, should be started with `http://`, `https://`, `git@`, or `ssh://`.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (SpringCloudServiceConfigServerGitSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceConfigServerGitSetting)(nil)).Elem()
}

func (i SpringCloudServiceConfigServerGitSettingArgs) ToSpringCloudServiceConfigServerGitSettingOutput() SpringCloudServiceConfigServerGitSettingOutput {
	return i.ToSpringCloudServiceConfigServerGitSettingOutputWithContext(context.Background())
}

func (i SpringCloudServiceConfigServerGitSettingArgs) ToSpringCloudServiceConfigServerGitSettingOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceConfigServerGitSettingOutput)
}

func (i SpringCloudServiceConfigServerGitSettingArgs) ToSpringCloudServiceConfigServerGitSettingPtrOutput() SpringCloudServiceConfigServerGitSettingPtrOutput {
	return i.ToSpringCloudServiceConfigServerGitSettingPtrOutputWithContext(context.Background())
}

func (i SpringCloudServiceConfigServerGitSettingArgs) ToSpringCloudServiceConfigServerGitSettingPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceConfigServerGitSettingOutput).ToSpringCloudServiceConfigServerGitSettingPtrOutputWithContext(ctx)
}

// SpringCloudServiceConfigServerGitSettingPtrInput is an input type that accepts SpringCloudServiceConfigServerGitSettingArgs, SpringCloudServiceConfigServerGitSettingPtr and SpringCloudServiceConfigServerGitSettingPtrOutput values.
// You can construct a concrete instance of `SpringCloudServiceConfigServerGitSettingPtrInput` via:
//
//	        SpringCloudServiceConfigServerGitSettingArgs{...}
//
//	or:
//
//	        nil
type SpringCloudServiceConfigServerGitSettingPtrInput interface {
	pulumi.Input

	ToSpringCloudServiceConfigServerGitSettingPtrOutput() SpringCloudServiceConfigServerGitSettingPtrOutput
	ToSpringCloudServiceConfigServerGitSettingPtrOutputWithContext(context.Context) SpringCloudServiceConfigServerGitSettingPtrOutput
}

type springCloudServiceConfigServerGitSettingPtrType SpringCloudServiceConfigServerGitSettingArgs

func SpringCloudServiceConfigServerGitSettingPtr(v *SpringCloudServiceConfigServerGitSettingArgs) SpringCloudServiceConfigServerGitSettingPtrInput {
	return (*springCloudServiceConfigServerGitSettingPtrType)(v)
}

func (*springCloudServiceConfigServerGitSettingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudServiceConfigServerGitSetting)(nil)).Elem()
}

func (i *springCloudServiceConfigServerGitSettingPtrType) ToSpringCloudServiceConfigServerGitSettingPtrOutput() SpringCloudServiceConfigServerGitSettingPtrOutput {
	return i.ToSpringCloudServiceConfigServerGitSettingPtrOutputWithContext(context.Background())
}

func (i *springCloudServiceConfigServerGitSettingPtrType) ToSpringCloudServiceConfigServerGitSettingPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceConfigServerGitSettingPtrOutput)
}

type SpringCloudServiceConfigServerGitSettingOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceConfigServerGitSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceConfigServerGitSetting)(nil)).Elem()
}

func (o SpringCloudServiceConfigServerGitSettingOutput) ToSpringCloudServiceConfigServerGitSettingOutput() SpringCloudServiceConfigServerGitSettingOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingOutput) ToSpringCloudServiceConfigServerGitSettingOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingOutput) ToSpringCloudServiceConfigServerGitSettingPtrOutput() SpringCloudServiceConfigServerGitSettingPtrOutput {
	return o.ToSpringCloudServiceConfigServerGitSettingPtrOutputWithContext(context.Background())
}

func (o SpringCloudServiceConfigServerGitSettingOutput) ToSpringCloudServiceConfigServerGitSettingPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpringCloudServiceConfigServerGitSetting) *SpringCloudServiceConfigServerGitSetting {
		return &v
	}).(SpringCloudServiceConfigServerGitSettingPtrOutput)
}

// A `httpBasicAuth` block as defined below.
func (o SpringCloudServiceConfigServerGitSettingOutput) HttpBasicAuth() SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSetting) *SpringCloudServiceConfigServerGitSettingHttpBasicAuth {
		return v.HttpBasicAuth
	}).(SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput)
}

// The default label of the Git repository, should be the branch name, tag name, or commit-id of the repository.
func (o SpringCloudServiceConfigServerGitSettingOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSetting) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// One or more `repository` blocks as defined below.
func (o SpringCloudServiceConfigServerGitSettingOutput) Repositories() SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSetting) []SpringCloudServiceConfigServerGitSettingRepository {
		return v.Repositories
	}).(SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput)
}

// An array of strings used to search subdirectories of the Git repository.
func (o SpringCloudServiceConfigServerGitSettingOutput) SearchPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSetting) []string { return v.SearchPaths }).(pulumi.StringArrayOutput)
}

// A `sshAuth` block as defined below.
func (o SpringCloudServiceConfigServerGitSettingOutput) SshAuth() SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSetting) *SpringCloudServiceConfigServerGitSettingSshAuth {
		return v.SshAuth
	}).(SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput)
}

// The URI of the default Git repository used as the Config Server back end, should be started with `http://`, `https://`, `git@`, or `ssh://`.
func (o SpringCloudServiceConfigServerGitSettingOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSetting) string { return v.Uri }).(pulumi.StringOutput)
}

type SpringCloudServiceConfigServerGitSettingPtrOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceConfigServerGitSettingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudServiceConfigServerGitSetting)(nil)).Elem()
}

func (o SpringCloudServiceConfigServerGitSettingPtrOutput) ToSpringCloudServiceConfigServerGitSettingPtrOutput() SpringCloudServiceConfigServerGitSettingPtrOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingPtrOutput) ToSpringCloudServiceConfigServerGitSettingPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingPtrOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingPtrOutput) Elem() SpringCloudServiceConfigServerGitSettingOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSetting) SpringCloudServiceConfigServerGitSetting {
		if v != nil {
			return *v
		}
		var ret SpringCloudServiceConfigServerGitSetting
		return ret
	}).(SpringCloudServiceConfigServerGitSettingOutput)
}

// A `httpBasicAuth` block as defined below.
func (o SpringCloudServiceConfigServerGitSettingPtrOutput) HttpBasicAuth() SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSetting) *SpringCloudServiceConfigServerGitSettingHttpBasicAuth {
		if v == nil {
			return nil
		}
		return v.HttpBasicAuth
	}).(SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput)
}

// The default label of the Git repository, should be the branch name, tag name, or commit-id of the repository.
func (o SpringCloudServiceConfigServerGitSettingPtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSetting) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

// One or more `repository` blocks as defined below.
func (o SpringCloudServiceConfigServerGitSettingPtrOutput) Repositories() SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSetting) []SpringCloudServiceConfigServerGitSettingRepository {
		if v == nil {
			return nil
		}
		return v.Repositories
	}).(SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput)
}

// An array of strings used to search subdirectories of the Git repository.
func (o SpringCloudServiceConfigServerGitSettingPtrOutput) SearchPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSetting) []string {
		if v == nil {
			return nil
		}
		return v.SearchPaths
	}).(pulumi.StringArrayOutput)
}

// A `sshAuth` block as defined below.
func (o SpringCloudServiceConfigServerGitSettingPtrOutput) SshAuth() SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSetting) *SpringCloudServiceConfigServerGitSettingSshAuth {
		if v == nil {
			return nil
		}
		return v.SshAuth
	}).(SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput)
}

// The URI of the default Git repository used as the Config Server back end, should be started with `http://`, `https://`, `git@`, or `ssh://`.
func (o SpringCloudServiceConfigServerGitSettingPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSetting) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type SpringCloudServiceConfigServerGitSettingHttpBasicAuth struct {
	// The password used to access the Git repository server, required when the Git repository server supports HTTP Basic Authentication.
	Password string `pulumi:"password"`
	// The username that's used to access the Git repository server, required when the Git repository server supports HTTP Basic Authentication.
	Username string `pulumi:"username"`
}

// SpringCloudServiceConfigServerGitSettingHttpBasicAuthInput is an input type that accepts SpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs and SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput values.
// You can construct a concrete instance of `SpringCloudServiceConfigServerGitSettingHttpBasicAuthInput` via:
//
//	SpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs{...}
type SpringCloudServiceConfigServerGitSettingHttpBasicAuthInput interface {
	pulumi.Input

	ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput() SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput
	ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutputWithContext(context.Context) SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput
}

type SpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs struct {
	// The password used to access the Git repository server, required when the Git repository server supports HTTP Basic Authentication.
	Password pulumi.StringInput `pulumi:"password"`
	// The username that's used to access the Git repository server, required when the Git repository server supports HTTP Basic Authentication.
	Username pulumi.StringInput `pulumi:"username"`
}

func (SpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceConfigServerGitSettingHttpBasicAuth)(nil)).Elem()
}

func (i SpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs) ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput() SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput {
	return i.ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutputWithContext(context.Background())
}

func (i SpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs) ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput)
}

func (i SpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs) ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput() SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput {
	return i.ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutputWithContext(context.Background())
}

func (i SpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs) ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput).ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutputWithContext(ctx)
}

// SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrInput is an input type that accepts SpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs, SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtr and SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput values.
// You can construct a concrete instance of `SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrInput` via:
//
//	        SpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs{...}
//
//	or:
//
//	        nil
type SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrInput interface {
	pulumi.Input

	ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput() SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput
	ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutputWithContext(context.Context) SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput
}

type springCloudServiceConfigServerGitSettingHttpBasicAuthPtrType SpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs

func SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtr(v *SpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs) SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrInput {
	return (*springCloudServiceConfigServerGitSettingHttpBasicAuthPtrType)(v)
}

func (*springCloudServiceConfigServerGitSettingHttpBasicAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudServiceConfigServerGitSettingHttpBasicAuth)(nil)).Elem()
}

func (i *springCloudServiceConfigServerGitSettingHttpBasicAuthPtrType) ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput() SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput {
	return i.ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutputWithContext(context.Background())
}

func (i *springCloudServiceConfigServerGitSettingHttpBasicAuthPtrType) ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput)
}

type SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceConfigServerGitSettingHttpBasicAuth)(nil)).Elem()
}

func (o SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput) ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput() SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput) ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput) ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput() SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput {
	return o.ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutputWithContext(context.Background())
}

func (o SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput) ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpringCloudServiceConfigServerGitSettingHttpBasicAuth) *SpringCloudServiceConfigServerGitSettingHttpBasicAuth {
		return &v
	}).(SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput)
}

// The password used to access the Git repository server, required when the Git repository server supports HTTP Basic Authentication.
func (o SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingHttpBasicAuth) string { return v.Password }).(pulumi.StringOutput)
}

// The username that's used to access the Git repository server, required when the Git repository server supports HTTP Basic Authentication.
func (o SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingHttpBasicAuth) string { return v.Username }).(pulumi.StringOutput)
}

type SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudServiceConfigServerGitSettingHttpBasicAuth)(nil)).Elem()
}

func (o SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput) ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput() SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput) ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput) Elem() SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSettingHttpBasicAuth) SpringCloudServiceConfigServerGitSettingHttpBasicAuth {
		if v != nil {
			return *v
		}
		var ret SpringCloudServiceConfigServerGitSettingHttpBasicAuth
		return ret
	}).(SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput)
}

// The password used to access the Git repository server, required when the Git repository server supports HTTP Basic Authentication.
func (o SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSettingHttpBasicAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// The username that's used to access the Git repository server, required when the Git repository server supports HTTP Basic Authentication.
func (o SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSettingHttpBasicAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type SpringCloudServiceConfigServerGitSettingRepository struct {
	// A `httpBasicAuth` block as defined below.
	HttpBasicAuth *SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth `pulumi:"httpBasicAuth"`
	// The default label of the Git repository, should be the branch name, tag name, or commit-id of the repository.
	Label *string `pulumi:"label"`
	// A name to identify on the Git repository, required only if repos exists.
	Name string `pulumi:"name"`
	// An array of strings used to match an application name. For each pattern, use the `{application}/{profile}` format with wildcards.
	Patterns []string `pulumi:"patterns"`
	// An array of strings used to search subdirectories of the Git repository.
	SearchPaths []string `pulumi:"searchPaths"`
	// A `sshAuth` block as defined below.
	SshAuth *SpringCloudServiceConfigServerGitSettingRepositorySshAuth `pulumi:"sshAuth"`
	// The URI of the Git repository that's used as the Config Server back end should be started with `http://`, `https://`, `git@`, or `ssh://`.
	Uri string `pulumi:"uri"`
}

// SpringCloudServiceConfigServerGitSettingRepositoryInput is an input type that accepts SpringCloudServiceConfigServerGitSettingRepositoryArgs and SpringCloudServiceConfigServerGitSettingRepositoryOutput values.
// You can construct a concrete instance of `SpringCloudServiceConfigServerGitSettingRepositoryInput` via:
//
//	SpringCloudServiceConfigServerGitSettingRepositoryArgs{...}
type SpringCloudServiceConfigServerGitSettingRepositoryInput interface {
	pulumi.Input

	ToSpringCloudServiceConfigServerGitSettingRepositoryOutput() SpringCloudServiceConfigServerGitSettingRepositoryOutput
	ToSpringCloudServiceConfigServerGitSettingRepositoryOutputWithContext(context.Context) SpringCloudServiceConfigServerGitSettingRepositoryOutput
}

type SpringCloudServiceConfigServerGitSettingRepositoryArgs struct {
	// A `httpBasicAuth` block as defined below.
	HttpBasicAuth SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrInput `pulumi:"httpBasicAuth"`
	// The default label of the Git repository, should be the branch name, tag name, or commit-id of the repository.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// A name to identify on the Git repository, required only if repos exists.
	Name pulumi.StringInput `pulumi:"name"`
	// An array of strings used to match an application name. For each pattern, use the `{application}/{profile}` format with wildcards.
	Patterns pulumi.StringArrayInput `pulumi:"patterns"`
	// An array of strings used to search subdirectories of the Git repository.
	SearchPaths pulumi.StringArrayInput `pulumi:"searchPaths"`
	// A `sshAuth` block as defined below.
	SshAuth SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrInput `pulumi:"sshAuth"`
	// The URI of the Git repository that's used as the Config Server back end should be started with `http://`, `https://`, `git@`, or `ssh://`.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (SpringCloudServiceConfigServerGitSettingRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceConfigServerGitSettingRepository)(nil)).Elem()
}

func (i SpringCloudServiceConfigServerGitSettingRepositoryArgs) ToSpringCloudServiceConfigServerGitSettingRepositoryOutput() SpringCloudServiceConfigServerGitSettingRepositoryOutput {
	return i.ToSpringCloudServiceConfigServerGitSettingRepositoryOutputWithContext(context.Background())
}

func (i SpringCloudServiceConfigServerGitSettingRepositoryArgs) ToSpringCloudServiceConfigServerGitSettingRepositoryOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceConfigServerGitSettingRepositoryOutput)
}

// SpringCloudServiceConfigServerGitSettingRepositoryArrayInput is an input type that accepts SpringCloudServiceConfigServerGitSettingRepositoryArray and SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput values.
// You can construct a concrete instance of `SpringCloudServiceConfigServerGitSettingRepositoryArrayInput` via:
//
//	SpringCloudServiceConfigServerGitSettingRepositoryArray{ SpringCloudServiceConfigServerGitSettingRepositoryArgs{...} }
type SpringCloudServiceConfigServerGitSettingRepositoryArrayInput interface {
	pulumi.Input

	ToSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput() SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput
	ToSpringCloudServiceConfigServerGitSettingRepositoryArrayOutputWithContext(context.Context) SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput
}

type SpringCloudServiceConfigServerGitSettingRepositoryArray []SpringCloudServiceConfigServerGitSettingRepositoryInput

func (SpringCloudServiceConfigServerGitSettingRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpringCloudServiceConfigServerGitSettingRepository)(nil)).Elem()
}

func (i SpringCloudServiceConfigServerGitSettingRepositoryArray) ToSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput() SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput {
	return i.ToSpringCloudServiceConfigServerGitSettingRepositoryArrayOutputWithContext(context.Background())
}

func (i SpringCloudServiceConfigServerGitSettingRepositoryArray) ToSpringCloudServiceConfigServerGitSettingRepositoryArrayOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput)
}

type SpringCloudServiceConfigServerGitSettingRepositoryOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceConfigServerGitSettingRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceConfigServerGitSettingRepository)(nil)).Elem()
}

func (o SpringCloudServiceConfigServerGitSettingRepositoryOutput) ToSpringCloudServiceConfigServerGitSettingRepositoryOutput() SpringCloudServiceConfigServerGitSettingRepositoryOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingRepositoryOutput) ToSpringCloudServiceConfigServerGitSettingRepositoryOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingRepositoryOutput {
	return o
}

// A `httpBasicAuth` block as defined below.
func (o SpringCloudServiceConfigServerGitSettingRepositoryOutput) HttpBasicAuth() SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingRepository) *SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth {
		return v.HttpBasicAuth
	}).(SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput)
}

// The default label of the Git repository, should be the branch name, tag name, or commit-id of the repository.
func (o SpringCloudServiceConfigServerGitSettingRepositoryOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingRepository) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// A name to identify on the Git repository, required only if repos exists.
func (o SpringCloudServiceConfigServerGitSettingRepositoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingRepository) string { return v.Name }).(pulumi.StringOutput)
}

// An array of strings used to match an application name. For each pattern, use the `{application}/{profile}` format with wildcards.
func (o SpringCloudServiceConfigServerGitSettingRepositoryOutput) Patterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingRepository) []string { return v.Patterns }).(pulumi.StringArrayOutput)
}

// An array of strings used to search subdirectories of the Git repository.
func (o SpringCloudServiceConfigServerGitSettingRepositoryOutput) SearchPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingRepository) []string { return v.SearchPaths }).(pulumi.StringArrayOutput)
}

// A `sshAuth` block as defined below.
func (o SpringCloudServiceConfigServerGitSettingRepositoryOutput) SshAuth() SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingRepository) *SpringCloudServiceConfigServerGitSettingRepositorySshAuth {
		return v.SshAuth
	}).(SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput)
}

// The URI of the Git repository that's used as the Config Server back end should be started with `http://`, `https://`, `git@`, or `ssh://`.
func (o SpringCloudServiceConfigServerGitSettingRepositoryOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingRepository) string { return v.Uri }).(pulumi.StringOutput)
}

type SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpringCloudServiceConfigServerGitSettingRepository)(nil)).Elem()
}

func (o SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput) ToSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput() SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput) ToSpringCloudServiceConfigServerGitSettingRepositoryArrayOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput) Index(i pulumi.IntInput) SpringCloudServiceConfigServerGitSettingRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SpringCloudServiceConfigServerGitSettingRepository {
		return vs[0].([]SpringCloudServiceConfigServerGitSettingRepository)[vs[1].(int)]
	}).(SpringCloudServiceConfigServerGitSettingRepositoryOutput)
}

type SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth struct {
	// The password used to access the Git repository server, required when the Git repository server supports HTTP Basic Authentication.
	Password string `pulumi:"password"`
	// The username that's used to access the Git repository server, required when the Git repository server supports HTTP Basic Authentication.
	Username string `pulumi:"username"`
}

// SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthInput is an input type that accepts SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs and SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput values.
// You can construct a concrete instance of `SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthInput` via:
//
//	SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs{...}
type SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthInput interface {
	pulumi.Input

	ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput() SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput
	ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutputWithContext(context.Context) SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput
}

type SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs struct {
	// The password used to access the Git repository server, required when the Git repository server supports HTTP Basic Authentication.
	Password pulumi.StringInput `pulumi:"password"`
	// The username that's used to access the Git repository server, required when the Git repository server supports HTTP Basic Authentication.
	Username pulumi.StringInput `pulumi:"username"`
}

func (SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth)(nil)).Elem()
}

func (i SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs) ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput() SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput {
	return i.ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutputWithContext(context.Background())
}

func (i SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs) ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput)
}

func (i SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs) ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput() SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput {
	return i.ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutputWithContext(context.Background())
}

func (i SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs) ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput).ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutputWithContext(ctx)
}

// SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrInput is an input type that accepts SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs, SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtr and SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput values.
// You can construct a concrete instance of `SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrInput` via:
//
//	        SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs{...}
//
//	or:
//
//	        nil
type SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrInput interface {
	pulumi.Input

	ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput() SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput
	ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutputWithContext(context.Context) SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput
}

type springCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrType SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs

func SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtr(v *SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs) SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrInput {
	return (*springCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrType)(v)
}

func (*springCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth)(nil)).Elem()
}

func (i *springCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrType) ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput() SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput {
	return i.ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutputWithContext(context.Background())
}

func (i *springCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrType) ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput)
}

type SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth)(nil)).Elem()
}

func (o SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput) ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput() SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput) ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput) ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput() SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput {
	return o.ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutputWithContext(context.Background())
}

func (o SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput) ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth) *SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth {
		return &v
	}).(SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput)
}

// The password used to access the Git repository server, required when the Git repository server supports HTTP Basic Authentication.
func (o SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth) string { return v.Password }).(pulumi.StringOutput)
}

// The username that's used to access the Git repository server, required when the Git repository server supports HTTP Basic Authentication.
func (o SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth) string { return v.Username }).(pulumi.StringOutput)
}

type SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth)(nil)).Elem()
}

func (o SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput) ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput() SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput) ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput) Elem() SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth) SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth {
		if v != nil {
			return *v
		}
		var ret SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth
		return ret
	}).(SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput)
}

// The password used to access the Git repository server, required when the Git repository server supports HTTP Basic Authentication.
func (o SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// The username that's used to access the Git repository server, required when the Git repository server supports HTTP Basic Authentication.
func (o SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type SpringCloudServiceConfigServerGitSettingRepositorySshAuth struct {
	// The host key of the Git repository server, should not include the algorithm prefix as covered by `host-key-algorithm`.
	HostKey *string `pulumi:"hostKey"`
	// The host key algorithm, should be `ssh-dss`, `ssh-rsa`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`. Required only if `host-key` exists.
	HostKeyAlgorithm *string `pulumi:"hostKeyAlgorithm"`
	// The SSH private key to access the Git repository, required when the URI starts with `git@` or `ssh://`.
	PrivateKey string `pulumi:"privateKey"`
	// Indicates whether the Config Server instance will fail to start if the hostKey does not match. Defaults to `true`.
	StrictHostKeyCheckingEnabled *bool `pulumi:"strictHostKeyCheckingEnabled"`
}

// SpringCloudServiceConfigServerGitSettingRepositorySshAuthInput is an input type that accepts SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs and SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput values.
// You can construct a concrete instance of `SpringCloudServiceConfigServerGitSettingRepositorySshAuthInput` via:
//
//	SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs{...}
type SpringCloudServiceConfigServerGitSettingRepositorySshAuthInput interface {
	pulumi.Input

	ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput() SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput
	ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutputWithContext(context.Context) SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput
}

type SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs struct {
	// The host key of the Git repository server, should not include the algorithm prefix as covered by `host-key-algorithm`.
	HostKey pulumi.StringPtrInput `pulumi:"hostKey"`
	// The host key algorithm, should be `ssh-dss`, `ssh-rsa`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`. Required only if `host-key` exists.
	HostKeyAlgorithm pulumi.StringPtrInput `pulumi:"hostKeyAlgorithm"`
	// The SSH private key to access the Git repository, required when the URI starts with `git@` or `ssh://`.
	PrivateKey pulumi.StringInput `pulumi:"privateKey"`
	// Indicates whether the Config Server instance will fail to start if the hostKey does not match. Defaults to `true`.
	StrictHostKeyCheckingEnabled pulumi.BoolPtrInput `pulumi:"strictHostKeyCheckingEnabled"`
}

func (SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceConfigServerGitSettingRepositorySshAuth)(nil)).Elem()
}

func (i SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs) ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput() SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput {
	return i.ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutputWithContext(context.Background())
}

func (i SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs) ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput)
}

func (i SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs) ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput() SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput {
	return i.ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutputWithContext(context.Background())
}

func (i SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs) ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput).ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutputWithContext(ctx)
}

// SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrInput is an input type that accepts SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs, SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtr and SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput values.
// You can construct a concrete instance of `SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrInput` via:
//
//	        SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs{...}
//
//	or:
//
//	        nil
type SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrInput interface {
	pulumi.Input

	ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput() SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput
	ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutputWithContext(context.Context) SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput
}

type springCloudServiceConfigServerGitSettingRepositorySshAuthPtrType SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs

func SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtr(v *SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs) SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrInput {
	return (*springCloudServiceConfigServerGitSettingRepositorySshAuthPtrType)(v)
}

func (*springCloudServiceConfigServerGitSettingRepositorySshAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudServiceConfigServerGitSettingRepositorySshAuth)(nil)).Elem()
}

func (i *springCloudServiceConfigServerGitSettingRepositorySshAuthPtrType) ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput() SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput {
	return i.ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutputWithContext(context.Background())
}

func (i *springCloudServiceConfigServerGitSettingRepositorySshAuthPtrType) ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput)
}

type SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceConfigServerGitSettingRepositorySshAuth)(nil)).Elem()
}

func (o SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput) ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput() SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput) ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput) ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput() SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput {
	return o.ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutputWithContext(context.Background())
}

func (o SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput) ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpringCloudServiceConfigServerGitSettingRepositorySshAuth) *SpringCloudServiceConfigServerGitSettingRepositorySshAuth {
		return &v
	}).(SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput)
}

// The host key of the Git repository server, should not include the algorithm prefix as covered by `host-key-algorithm`.
func (o SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput) HostKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingRepositorySshAuth) *string { return v.HostKey }).(pulumi.StringPtrOutput)
}

// The host key algorithm, should be `ssh-dss`, `ssh-rsa`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`. Required only if `host-key` exists.
func (o SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput) HostKeyAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingRepositorySshAuth) *string { return v.HostKeyAlgorithm }).(pulumi.StringPtrOutput)
}

// The SSH private key to access the Git repository, required when the URI starts with `git@` or `ssh://`.
func (o SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingRepositorySshAuth) string { return v.PrivateKey }).(pulumi.StringOutput)
}

// Indicates whether the Config Server instance will fail to start if the hostKey does not match. Defaults to `true`.
func (o SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput) StrictHostKeyCheckingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingRepositorySshAuth) *bool {
		return v.StrictHostKeyCheckingEnabled
	}).(pulumi.BoolPtrOutput)
}

type SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudServiceConfigServerGitSettingRepositorySshAuth)(nil)).Elem()
}

func (o SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput) ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput() SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput) ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput) Elem() SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSettingRepositorySshAuth) SpringCloudServiceConfigServerGitSettingRepositorySshAuth {
		if v != nil {
			return *v
		}
		var ret SpringCloudServiceConfigServerGitSettingRepositorySshAuth
		return ret
	}).(SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput)
}

// The host key of the Git repository server, should not include the algorithm prefix as covered by `host-key-algorithm`.
func (o SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput) HostKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSettingRepositorySshAuth) *string {
		if v == nil {
			return nil
		}
		return v.HostKey
	}).(pulumi.StringPtrOutput)
}

// The host key algorithm, should be `ssh-dss`, `ssh-rsa`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`. Required only if `host-key` exists.
func (o SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput) HostKeyAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSettingRepositorySshAuth) *string {
		if v == nil {
			return nil
		}
		return v.HostKeyAlgorithm
	}).(pulumi.StringPtrOutput)
}

// The SSH private key to access the Git repository, required when the URI starts with `git@` or `ssh://`.
func (o SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSettingRepositorySshAuth) *string {
		if v == nil {
			return nil
		}
		return &v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// Indicates whether the Config Server instance will fail to start if the hostKey does not match. Defaults to `true`.
func (o SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput) StrictHostKeyCheckingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSettingRepositorySshAuth) *bool {
		if v == nil {
			return nil
		}
		return v.StrictHostKeyCheckingEnabled
	}).(pulumi.BoolPtrOutput)
}

type SpringCloudServiceConfigServerGitSettingSshAuth struct {
	// The host key of the Git repository server, should not include the algorithm prefix as covered by `host-key-algorithm`.
	HostKey *string `pulumi:"hostKey"`
	// The host key algorithm, should be `ssh-dss`, `ssh-rsa`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`. Required only if `host-key` exists.
	HostKeyAlgorithm *string `pulumi:"hostKeyAlgorithm"`
	// The SSH private key to access the Git repository, required when the URI starts with `git@` or `ssh://`.
	PrivateKey string `pulumi:"privateKey"`
	// Indicates whether the Config Server instance will fail to start if the hostKey does not match. Defaults to `true`.
	StrictHostKeyCheckingEnabled *bool `pulumi:"strictHostKeyCheckingEnabled"`
}

// SpringCloudServiceConfigServerGitSettingSshAuthInput is an input type that accepts SpringCloudServiceConfigServerGitSettingSshAuthArgs and SpringCloudServiceConfigServerGitSettingSshAuthOutput values.
// You can construct a concrete instance of `SpringCloudServiceConfigServerGitSettingSshAuthInput` via:
//
//	SpringCloudServiceConfigServerGitSettingSshAuthArgs{...}
type SpringCloudServiceConfigServerGitSettingSshAuthInput interface {
	pulumi.Input

	ToSpringCloudServiceConfigServerGitSettingSshAuthOutput() SpringCloudServiceConfigServerGitSettingSshAuthOutput
	ToSpringCloudServiceConfigServerGitSettingSshAuthOutputWithContext(context.Context) SpringCloudServiceConfigServerGitSettingSshAuthOutput
}

type SpringCloudServiceConfigServerGitSettingSshAuthArgs struct {
	// The host key of the Git repository server, should not include the algorithm prefix as covered by `host-key-algorithm`.
	HostKey pulumi.StringPtrInput `pulumi:"hostKey"`
	// The host key algorithm, should be `ssh-dss`, `ssh-rsa`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`. Required only if `host-key` exists.
	HostKeyAlgorithm pulumi.StringPtrInput `pulumi:"hostKeyAlgorithm"`
	// The SSH private key to access the Git repository, required when the URI starts with `git@` or `ssh://`.
	PrivateKey pulumi.StringInput `pulumi:"privateKey"`
	// Indicates whether the Config Server instance will fail to start if the hostKey does not match. Defaults to `true`.
	StrictHostKeyCheckingEnabled pulumi.BoolPtrInput `pulumi:"strictHostKeyCheckingEnabled"`
}

func (SpringCloudServiceConfigServerGitSettingSshAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceConfigServerGitSettingSshAuth)(nil)).Elem()
}

func (i SpringCloudServiceConfigServerGitSettingSshAuthArgs) ToSpringCloudServiceConfigServerGitSettingSshAuthOutput() SpringCloudServiceConfigServerGitSettingSshAuthOutput {
	return i.ToSpringCloudServiceConfigServerGitSettingSshAuthOutputWithContext(context.Background())
}

func (i SpringCloudServiceConfigServerGitSettingSshAuthArgs) ToSpringCloudServiceConfigServerGitSettingSshAuthOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingSshAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceConfigServerGitSettingSshAuthOutput)
}

func (i SpringCloudServiceConfigServerGitSettingSshAuthArgs) ToSpringCloudServiceConfigServerGitSettingSshAuthPtrOutput() SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput {
	return i.ToSpringCloudServiceConfigServerGitSettingSshAuthPtrOutputWithContext(context.Background())
}

func (i SpringCloudServiceConfigServerGitSettingSshAuthArgs) ToSpringCloudServiceConfigServerGitSettingSshAuthPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceConfigServerGitSettingSshAuthOutput).ToSpringCloudServiceConfigServerGitSettingSshAuthPtrOutputWithContext(ctx)
}

// SpringCloudServiceConfigServerGitSettingSshAuthPtrInput is an input type that accepts SpringCloudServiceConfigServerGitSettingSshAuthArgs, SpringCloudServiceConfigServerGitSettingSshAuthPtr and SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput values.
// You can construct a concrete instance of `SpringCloudServiceConfigServerGitSettingSshAuthPtrInput` via:
//
//	        SpringCloudServiceConfigServerGitSettingSshAuthArgs{...}
//
//	or:
//
//	        nil
type SpringCloudServiceConfigServerGitSettingSshAuthPtrInput interface {
	pulumi.Input

	ToSpringCloudServiceConfigServerGitSettingSshAuthPtrOutput() SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput
	ToSpringCloudServiceConfigServerGitSettingSshAuthPtrOutputWithContext(context.Context) SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput
}

type springCloudServiceConfigServerGitSettingSshAuthPtrType SpringCloudServiceConfigServerGitSettingSshAuthArgs

func SpringCloudServiceConfigServerGitSettingSshAuthPtr(v *SpringCloudServiceConfigServerGitSettingSshAuthArgs) SpringCloudServiceConfigServerGitSettingSshAuthPtrInput {
	return (*springCloudServiceConfigServerGitSettingSshAuthPtrType)(v)
}

func (*springCloudServiceConfigServerGitSettingSshAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudServiceConfigServerGitSettingSshAuth)(nil)).Elem()
}

func (i *springCloudServiceConfigServerGitSettingSshAuthPtrType) ToSpringCloudServiceConfigServerGitSettingSshAuthPtrOutput() SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput {
	return i.ToSpringCloudServiceConfigServerGitSettingSshAuthPtrOutputWithContext(context.Background())
}

func (i *springCloudServiceConfigServerGitSettingSshAuthPtrType) ToSpringCloudServiceConfigServerGitSettingSshAuthPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput)
}

type SpringCloudServiceConfigServerGitSettingSshAuthOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceConfigServerGitSettingSshAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceConfigServerGitSettingSshAuth)(nil)).Elem()
}

func (o SpringCloudServiceConfigServerGitSettingSshAuthOutput) ToSpringCloudServiceConfigServerGitSettingSshAuthOutput() SpringCloudServiceConfigServerGitSettingSshAuthOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingSshAuthOutput) ToSpringCloudServiceConfigServerGitSettingSshAuthOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingSshAuthOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingSshAuthOutput) ToSpringCloudServiceConfigServerGitSettingSshAuthPtrOutput() SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput {
	return o.ToSpringCloudServiceConfigServerGitSettingSshAuthPtrOutputWithContext(context.Background())
}

func (o SpringCloudServiceConfigServerGitSettingSshAuthOutput) ToSpringCloudServiceConfigServerGitSettingSshAuthPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpringCloudServiceConfigServerGitSettingSshAuth) *SpringCloudServiceConfigServerGitSettingSshAuth {
		return &v
	}).(SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput)
}

// The host key of the Git repository server, should not include the algorithm prefix as covered by `host-key-algorithm`.
func (o SpringCloudServiceConfigServerGitSettingSshAuthOutput) HostKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingSshAuth) *string { return v.HostKey }).(pulumi.StringPtrOutput)
}

// The host key algorithm, should be `ssh-dss`, `ssh-rsa`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`. Required only if `host-key` exists.
func (o SpringCloudServiceConfigServerGitSettingSshAuthOutput) HostKeyAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingSshAuth) *string { return v.HostKeyAlgorithm }).(pulumi.StringPtrOutput)
}

// The SSH private key to access the Git repository, required when the URI starts with `git@` or `ssh://`.
func (o SpringCloudServiceConfigServerGitSettingSshAuthOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingSshAuth) string { return v.PrivateKey }).(pulumi.StringOutput)
}

// Indicates whether the Config Server instance will fail to start if the hostKey does not match. Defaults to `true`.
func (o SpringCloudServiceConfigServerGitSettingSshAuthOutput) StrictHostKeyCheckingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingSshAuth) *bool { return v.StrictHostKeyCheckingEnabled }).(pulumi.BoolPtrOutput)
}

type SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudServiceConfigServerGitSettingSshAuth)(nil)).Elem()
}

func (o SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput) ToSpringCloudServiceConfigServerGitSettingSshAuthPtrOutput() SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput) ToSpringCloudServiceConfigServerGitSettingSshAuthPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput) Elem() SpringCloudServiceConfigServerGitSettingSshAuthOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSettingSshAuth) SpringCloudServiceConfigServerGitSettingSshAuth {
		if v != nil {
			return *v
		}
		var ret SpringCloudServiceConfigServerGitSettingSshAuth
		return ret
	}).(SpringCloudServiceConfigServerGitSettingSshAuthOutput)
}

// The host key of the Git repository server, should not include the algorithm prefix as covered by `host-key-algorithm`.
func (o SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput) HostKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSettingSshAuth) *string {
		if v == nil {
			return nil
		}
		return v.HostKey
	}).(pulumi.StringPtrOutput)
}

// The host key algorithm, should be `ssh-dss`, `ssh-rsa`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`. Required only if `host-key` exists.
func (o SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput) HostKeyAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSettingSshAuth) *string {
		if v == nil {
			return nil
		}
		return v.HostKeyAlgorithm
	}).(pulumi.StringPtrOutput)
}

// The SSH private key to access the Git repository, required when the URI starts with `git@` or `ssh://`.
func (o SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSettingSshAuth) *string {
		if v == nil {
			return nil
		}
		return &v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// Indicates whether the Config Server instance will fail to start if the hostKey does not match. Defaults to `true`.
func (o SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput) StrictHostKeyCheckingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSettingSshAuth) *bool {
		if v == nil {
			return nil
		}
		return v.StrictHostKeyCheckingEnabled
	}).(pulumi.BoolPtrOutput)
}

type SpringCloudServiceContainerRegistry struct {
	// Specifies the name of the container registry.
	Name string `pulumi:"name"`
	// Specifies the password of the container registry.
	Password string `pulumi:"password"`
	// Specifies the login server of the container registry.
	Server string `pulumi:"server"`
	// Specifies the username of the container registry.
	Username string `pulumi:"username"`
}

// SpringCloudServiceContainerRegistryInput is an input type that accepts SpringCloudServiceContainerRegistryArgs and SpringCloudServiceContainerRegistryOutput values.
// You can construct a concrete instance of `SpringCloudServiceContainerRegistryInput` via:
//
//	SpringCloudServiceContainerRegistryArgs{...}
type SpringCloudServiceContainerRegistryInput interface {
	pulumi.Input

	ToSpringCloudServiceContainerRegistryOutput() SpringCloudServiceContainerRegistryOutput
	ToSpringCloudServiceContainerRegistryOutputWithContext(context.Context) SpringCloudServiceContainerRegistryOutput
}

type SpringCloudServiceContainerRegistryArgs struct {
	// Specifies the name of the container registry.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the password of the container registry.
	Password pulumi.StringInput `pulumi:"password"`
	// Specifies the login server of the container registry.
	Server pulumi.StringInput `pulumi:"server"`
	// Specifies the username of the container registry.
	Username pulumi.StringInput `pulumi:"username"`
}

func (SpringCloudServiceContainerRegistryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceContainerRegistry)(nil)).Elem()
}

func (i SpringCloudServiceContainerRegistryArgs) ToSpringCloudServiceContainerRegistryOutput() SpringCloudServiceContainerRegistryOutput {
	return i.ToSpringCloudServiceContainerRegistryOutputWithContext(context.Background())
}

func (i SpringCloudServiceContainerRegistryArgs) ToSpringCloudServiceContainerRegistryOutputWithContext(ctx context.Context) SpringCloudServiceContainerRegistryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceContainerRegistryOutput)
}

// SpringCloudServiceContainerRegistryArrayInput is an input type that accepts SpringCloudServiceContainerRegistryArray and SpringCloudServiceContainerRegistryArrayOutput values.
// You can construct a concrete instance of `SpringCloudServiceContainerRegistryArrayInput` via:
//
//	SpringCloudServiceContainerRegistryArray{ SpringCloudServiceContainerRegistryArgs{...} }
type SpringCloudServiceContainerRegistryArrayInput interface {
	pulumi.Input

	ToSpringCloudServiceContainerRegistryArrayOutput() SpringCloudServiceContainerRegistryArrayOutput
	ToSpringCloudServiceContainerRegistryArrayOutputWithContext(context.Context) SpringCloudServiceContainerRegistryArrayOutput
}

type SpringCloudServiceContainerRegistryArray []SpringCloudServiceContainerRegistryInput

func (SpringCloudServiceContainerRegistryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpringCloudServiceContainerRegistry)(nil)).Elem()
}

func (i SpringCloudServiceContainerRegistryArray) ToSpringCloudServiceContainerRegistryArrayOutput() SpringCloudServiceContainerRegistryArrayOutput {
	return i.ToSpringCloudServiceContainerRegistryArrayOutputWithContext(context.Background())
}

func (i SpringCloudServiceContainerRegistryArray) ToSpringCloudServiceContainerRegistryArrayOutputWithContext(ctx context.Context) SpringCloudServiceContainerRegistryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceContainerRegistryArrayOutput)
}

type SpringCloudServiceContainerRegistryOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceContainerRegistryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceContainerRegistry)(nil)).Elem()
}

func (o SpringCloudServiceContainerRegistryOutput) ToSpringCloudServiceContainerRegistryOutput() SpringCloudServiceContainerRegistryOutput {
	return o
}

func (o SpringCloudServiceContainerRegistryOutput) ToSpringCloudServiceContainerRegistryOutputWithContext(ctx context.Context) SpringCloudServiceContainerRegistryOutput {
	return o
}

// Specifies the name of the container registry.
func (o SpringCloudServiceContainerRegistryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudServiceContainerRegistry) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the password of the container registry.
func (o SpringCloudServiceContainerRegistryOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudServiceContainerRegistry) string { return v.Password }).(pulumi.StringOutput)
}

// Specifies the login server of the container registry.
func (o SpringCloudServiceContainerRegistryOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudServiceContainerRegistry) string { return v.Server }).(pulumi.StringOutput)
}

// Specifies the username of the container registry.
func (o SpringCloudServiceContainerRegistryOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudServiceContainerRegistry) string { return v.Username }).(pulumi.StringOutput)
}

type SpringCloudServiceContainerRegistryArrayOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceContainerRegistryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpringCloudServiceContainerRegistry)(nil)).Elem()
}

func (o SpringCloudServiceContainerRegistryArrayOutput) ToSpringCloudServiceContainerRegistryArrayOutput() SpringCloudServiceContainerRegistryArrayOutput {
	return o
}

func (o SpringCloudServiceContainerRegistryArrayOutput) ToSpringCloudServiceContainerRegistryArrayOutputWithContext(ctx context.Context) SpringCloudServiceContainerRegistryArrayOutput {
	return o
}

func (o SpringCloudServiceContainerRegistryArrayOutput) Index(i pulumi.IntInput) SpringCloudServiceContainerRegistryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SpringCloudServiceContainerRegistry {
		return vs[0].([]SpringCloudServiceContainerRegistry)[vs[1].(int)]
	}).(SpringCloudServiceContainerRegistryOutput)
}

type SpringCloudServiceDefaultBuildService struct {
	// Specifies the name of the container registry used in the default build service.
	ContainerRegistryName *string `pulumi:"containerRegistryName"`
}

// SpringCloudServiceDefaultBuildServiceInput is an input type that accepts SpringCloudServiceDefaultBuildServiceArgs and SpringCloudServiceDefaultBuildServiceOutput values.
// You can construct a concrete instance of `SpringCloudServiceDefaultBuildServiceInput` via:
//
//	SpringCloudServiceDefaultBuildServiceArgs{...}
type SpringCloudServiceDefaultBuildServiceInput interface {
	pulumi.Input

	ToSpringCloudServiceDefaultBuildServiceOutput() SpringCloudServiceDefaultBuildServiceOutput
	ToSpringCloudServiceDefaultBuildServiceOutputWithContext(context.Context) SpringCloudServiceDefaultBuildServiceOutput
}

type SpringCloudServiceDefaultBuildServiceArgs struct {
	// Specifies the name of the container registry used in the default build service.
	ContainerRegistryName pulumi.StringPtrInput `pulumi:"containerRegistryName"`
}

func (SpringCloudServiceDefaultBuildServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceDefaultBuildService)(nil)).Elem()
}

func (i SpringCloudServiceDefaultBuildServiceArgs) ToSpringCloudServiceDefaultBuildServiceOutput() SpringCloudServiceDefaultBuildServiceOutput {
	return i.ToSpringCloudServiceDefaultBuildServiceOutputWithContext(context.Background())
}

func (i SpringCloudServiceDefaultBuildServiceArgs) ToSpringCloudServiceDefaultBuildServiceOutputWithContext(ctx context.Context) SpringCloudServiceDefaultBuildServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceDefaultBuildServiceOutput)
}

func (i SpringCloudServiceDefaultBuildServiceArgs) ToSpringCloudServiceDefaultBuildServicePtrOutput() SpringCloudServiceDefaultBuildServicePtrOutput {
	return i.ToSpringCloudServiceDefaultBuildServicePtrOutputWithContext(context.Background())
}

func (i SpringCloudServiceDefaultBuildServiceArgs) ToSpringCloudServiceDefaultBuildServicePtrOutputWithContext(ctx context.Context) SpringCloudServiceDefaultBuildServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceDefaultBuildServiceOutput).ToSpringCloudServiceDefaultBuildServicePtrOutputWithContext(ctx)
}

// SpringCloudServiceDefaultBuildServicePtrInput is an input type that accepts SpringCloudServiceDefaultBuildServiceArgs, SpringCloudServiceDefaultBuildServicePtr and SpringCloudServiceDefaultBuildServicePtrOutput values.
// You can construct a concrete instance of `SpringCloudServiceDefaultBuildServicePtrInput` via:
//
//	        SpringCloudServiceDefaultBuildServiceArgs{...}
//
//	or:
//
//	        nil
type SpringCloudServiceDefaultBuildServicePtrInput interface {
	pulumi.Input

	ToSpringCloudServiceDefaultBuildServicePtrOutput() SpringCloudServiceDefaultBuildServicePtrOutput
	ToSpringCloudServiceDefaultBuildServicePtrOutputWithContext(context.Context) SpringCloudServiceDefaultBuildServicePtrOutput
}

type springCloudServiceDefaultBuildServicePtrType SpringCloudServiceDefaultBuildServiceArgs

func SpringCloudServiceDefaultBuildServicePtr(v *SpringCloudServiceDefaultBuildServiceArgs) SpringCloudServiceDefaultBuildServicePtrInput {
	return (*springCloudServiceDefaultBuildServicePtrType)(v)
}

func (*springCloudServiceDefaultBuildServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudServiceDefaultBuildService)(nil)).Elem()
}

func (i *springCloudServiceDefaultBuildServicePtrType) ToSpringCloudServiceDefaultBuildServicePtrOutput() SpringCloudServiceDefaultBuildServicePtrOutput {
	return i.ToSpringCloudServiceDefaultBuildServicePtrOutputWithContext(context.Background())
}

func (i *springCloudServiceDefaultBuildServicePtrType) ToSpringCloudServiceDefaultBuildServicePtrOutputWithContext(ctx context.Context) SpringCloudServiceDefaultBuildServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceDefaultBuildServicePtrOutput)
}

type SpringCloudServiceDefaultBuildServiceOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceDefaultBuildServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceDefaultBuildService)(nil)).Elem()
}

func (o SpringCloudServiceDefaultBuildServiceOutput) ToSpringCloudServiceDefaultBuildServiceOutput() SpringCloudServiceDefaultBuildServiceOutput {
	return o
}

func (o SpringCloudServiceDefaultBuildServiceOutput) ToSpringCloudServiceDefaultBuildServiceOutputWithContext(ctx context.Context) SpringCloudServiceDefaultBuildServiceOutput {
	return o
}

func (o SpringCloudServiceDefaultBuildServiceOutput) ToSpringCloudServiceDefaultBuildServicePtrOutput() SpringCloudServiceDefaultBuildServicePtrOutput {
	return o.ToSpringCloudServiceDefaultBuildServicePtrOutputWithContext(context.Background())
}

func (o SpringCloudServiceDefaultBuildServiceOutput) ToSpringCloudServiceDefaultBuildServicePtrOutputWithContext(ctx context.Context) SpringCloudServiceDefaultBuildServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpringCloudServiceDefaultBuildService) *SpringCloudServiceDefaultBuildService {
		return &v
	}).(SpringCloudServiceDefaultBuildServicePtrOutput)
}

// Specifies the name of the container registry used in the default build service.
func (o SpringCloudServiceDefaultBuildServiceOutput) ContainerRegistryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceDefaultBuildService) *string { return v.ContainerRegistryName }).(pulumi.StringPtrOutput)
}

type SpringCloudServiceDefaultBuildServicePtrOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceDefaultBuildServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudServiceDefaultBuildService)(nil)).Elem()
}

func (o SpringCloudServiceDefaultBuildServicePtrOutput) ToSpringCloudServiceDefaultBuildServicePtrOutput() SpringCloudServiceDefaultBuildServicePtrOutput {
	return o
}

func (o SpringCloudServiceDefaultBuildServicePtrOutput) ToSpringCloudServiceDefaultBuildServicePtrOutputWithContext(ctx context.Context) SpringCloudServiceDefaultBuildServicePtrOutput {
	return o
}

func (o SpringCloudServiceDefaultBuildServicePtrOutput) Elem() SpringCloudServiceDefaultBuildServiceOutput {
	return o.ApplyT(func(v *SpringCloudServiceDefaultBuildService) SpringCloudServiceDefaultBuildService {
		if v != nil {
			return *v
		}
		var ret SpringCloudServiceDefaultBuildService
		return ret
	}).(SpringCloudServiceDefaultBuildServiceOutput)
}

// Specifies the name of the container registry used in the default build service.
func (o SpringCloudServiceDefaultBuildServicePtrOutput) ContainerRegistryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceDefaultBuildService) *string {
		if v == nil {
			return nil
		}
		return v.ContainerRegistryName
	}).(pulumi.StringPtrOutput)
}

type SpringCloudServiceMarketplace struct {
	// Specifies the plan ID of the 3rd Party Artifact that is being procured.
	Plan string `pulumi:"plan"`
	// Specifies the 3rd Party artifact that is being procured.
	Product string `pulumi:"product"`
	// Specifies the publisher ID of the 3rd Party Artifact that is being procured.
	Publisher string `pulumi:"publisher"`
}

// SpringCloudServiceMarketplaceInput is an input type that accepts SpringCloudServiceMarketplaceArgs and SpringCloudServiceMarketplaceOutput values.
// You can construct a concrete instance of `SpringCloudServiceMarketplaceInput` via:
//
//	SpringCloudServiceMarketplaceArgs{...}
type SpringCloudServiceMarketplaceInput interface {
	pulumi.Input

	ToSpringCloudServiceMarketplaceOutput() SpringCloudServiceMarketplaceOutput
	ToSpringCloudServiceMarketplaceOutputWithContext(context.Context) SpringCloudServiceMarketplaceOutput
}

type SpringCloudServiceMarketplaceArgs struct {
	// Specifies the plan ID of the 3rd Party Artifact that is being procured.
	Plan pulumi.StringInput `pulumi:"plan"`
	// Specifies the 3rd Party artifact that is being procured.
	Product pulumi.StringInput `pulumi:"product"`
	// Specifies the publisher ID of the 3rd Party Artifact that is being procured.
	Publisher pulumi.StringInput `pulumi:"publisher"`
}

func (SpringCloudServiceMarketplaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceMarketplace)(nil)).Elem()
}

func (i SpringCloudServiceMarketplaceArgs) ToSpringCloudServiceMarketplaceOutput() SpringCloudServiceMarketplaceOutput {
	return i.ToSpringCloudServiceMarketplaceOutputWithContext(context.Background())
}

func (i SpringCloudServiceMarketplaceArgs) ToSpringCloudServiceMarketplaceOutputWithContext(ctx context.Context) SpringCloudServiceMarketplaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceMarketplaceOutput)
}

func (i SpringCloudServiceMarketplaceArgs) ToSpringCloudServiceMarketplacePtrOutput() SpringCloudServiceMarketplacePtrOutput {
	return i.ToSpringCloudServiceMarketplacePtrOutputWithContext(context.Background())
}

func (i SpringCloudServiceMarketplaceArgs) ToSpringCloudServiceMarketplacePtrOutputWithContext(ctx context.Context) SpringCloudServiceMarketplacePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceMarketplaceOutput).ToSpringCloudServiceMarketplacePtrOutputWithContext(ctx)
}

// SpringCloudServiceMarketplacePtrInput is an input type that accepts SpringCloudServiceMarketplaceArgs, SpringCloudServiceMarketplacePtr and SpringCloudServiceMarketplacePtrOutput values.
// You can construct a concrete instance of `SpringCloudServiceMarketplacePtrInput` via:
//
//	        SpringCloudServiceMarketplaceArgs{...}
//
//	or:
//
//	        nil
type SpringCloudServiceMarketplacePtrInput interface {
	pulumi.Input

	ToSpringCloudServiceMarketplacePtrOutput() SpringCloudServiceMarketplacePtrOutput
	ToSpringCloudServiceMarketplacePtrOutputWithContext(context.Context) SpringCloudServiceMarketplacePtrOutput
}

type springCloudServiceMarketplacePtrType SpringCloudServiceMarketplaceArgs

func SpringCloudServiceMarketplacePtr(v *SpringCloudServiceMarketplaceArgs) SpringCloudServiceMarketplacePtrInput {
	return (*springCloudServiceMarketplacePtrType)(v)
}

func (*springCloudServiceMarketplacePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudServiceMarketplace)(nil)).Elem()
}

func (i *springCloudServiceMarketplacePtrType) ToSpringCloudServiceMarketplacePtrOutput() SpringCloudServiceMarketplacePtrOutput {
	return i.ToSpringCloudServiceMarketplacePtrOutputWithContext(context.Background())
}

func (i *springCloudServiceMarketplacePtrType) ToSpringCloudServiceMarketplacePtrOutputWithContext(ctx context.Context) SpringCloudServiceMarketplacePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceMarketplacePtrOutput)
}

type SpringCloudServiceMarketplaceOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceMarketplaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceMarketplace)(nil)).Elem()
}

func (o SpringCloudServiceMarketplaceOutput) ToSpringCloudServiceMarketplaceOutput() SpringCloudServiceMarketplaceOutput {
	return o
}

func (o SpringCloudServiceMarketplaceOutput) ToSpringCloudServiceMarketplaceOutputWithContext(ctx context.Context) SpringCloudServiceMarketplaceOutput {
	return o
}

func (o SpringCloudServiceMarketplaceOutput) ToSpringCloudServiceMarketplacePtrOutput() SpringCloudServiceMarketplacePtrOutput {
	return o.ToSpringCloudServiceMarketplacePtrOutputWithContext(context.Background())
}

func (o SpringCloudServiceMarketplaceOutput) ToSpringCloudServiceMarketplacePtrOutputWithContext(ctx context.Context) SpringCloudServiceMarketplacePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpringCloudServiceMarketplace) *SpringCloudServiceMarketplace {
		return &v
	}).(SpringCloudServiceMarketplacePtrOutput)
}

// Specifies the plan ID of the 3rd Party Artifact that is being procured.
func (o SpringCloudServiceMarketplaceOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudServiceMarketplace) string { return v.Plan }).(pulumi.StringOutput)
}

// Specifies the 3rd Party artifact that is being procured.
func (o SpringCloudServiceMarketplaceOutput) Product() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudServiceMarketplace) string { return v.Product }).(pulumi.StringOutput)
}

// Specifies the publisher ID of the 3rd Party Artifact that is being procured.
func (o SpringCloudServiceMarketplaceOutput) Publisher() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudServiceMarketplace) string { return v.Publisher }).(pulumi.StringOutput)
}

type SpringCloudServiceMarketplacePtrOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceMarketplacePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudServiceMarketplace)(nil)).Elem()
}

func (o SpringCloudServiceMarketplacePtrOutput) ToSpringCloudServiceMarketplacePtrOutput() SpringCloudServiceMarketplacePtrOutput {
	return o
}

func (o SpringCloudServiceMarketplacePtrOutput) ToSpringCloudServiceMarketplacePtrOutputWithContext(ctx context.Context) SpringCloudServiceMarketplacePtrOutput {
	return o
}

func (o SpringCloudServiceMarketplacePtrOutput) Elem() SpringCloudServiceMarketplaceOutput {
	return o.ApplyT(func(v *SpringCloudServiceMarketplace) SpringCloudServiceMarketplace {
		if v != nil {
			return *v
		}
		var ret SpringCloudServiceMarketplace
		return ret
	}).(SpringCloudServiceMarketplaceOutput)
}

// Specifies the plan ID of the 3rd Party Artifact that is being procured.
func (o SpringCloudServiceMarketplacePtrOutput) Plan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceMarketplace) *string {
		if v == nil {
			return nil
		}
		return &v.Plan
	}).(pulumi.StringPtrOutput)
}

// Specifies the 3rd Party artifact that is being procured.
func (o SpringCloudServiceMarketplacePtrOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceMarketplace) *string {
		if v == nil {
			return nil
		}
		return &v.Product
	}).(pulumi.StringPtrOutput)
}

// Specifies the publisher ID of the 3rd Party Artifact that is being procured.
func (o SpringCloudServiceMarketplacePtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceMarketplace) *string {
		if v == nil {
			return nil
		}
		return &v.Publisher
	}).(pulumi.StringPtrOutput)
}

type SpringCloudServiceNetwork struct {
	// Specifies the Name of the resource group containing network resources of Azure Spring Cloud Apps. Changing this forces a new resource to be created.
	AppNetworkResourceGroup *string `pulumi:"appNetworkResourceGroup"`
	// Specifies the ID of the Subnet which should host the Spring Boot Applications deployed in this Spring Cloud Service. Changing this forces a new resource to be created.
	AppSubnetId string `pulumi:"appSubnetId"`
	// A list of (at least 3) CIDR ranges (at least /16) which are used to host the Spring Cloud infrastructure, which must not overlap with any existing CIDR ranges in the Subnet. Changing this forces a new resource to be created.
	CidrRanges []string `pulumi:"cidrRanges"`
	// Specifies the egress traffic type of the Spring Cloud Service. Possible values are `loadBalancer` and `userDefinedRouting`. Defaults to `loadBalancer`. Changing this forces a new resource to be created.
	OutboundType *string `pulumi:"outboundType"`
	// Ingress read time out in seconds.
	ReadTimeoutSeconds *int `pulumi:"readTimeoutSeconds"`
	// Specifies the Name of the resource group containing network resources of Azure Spring Cloud Service Runtime. Changing this forces a new resource to be created.
	ServiceRuntimeNetworkResourceGroup *string `pulumi:"serviceRuntimeNetworkResourceGroup"`
	// Specifies the ID of the Subnet where the Service Runtime components of the Spring Cloud Service will exist. Changing this forces a new resource to be created.
	ServiceRuntimeSubnetId string `pulumi:"serviceRuntimeSubnetId"`
}

// SpringCloudServiceNetworkInput is an input type that accepts SpringCloudServiceNetworkArgs and SpringCloudServiceNetworkOutput values.
// You can construct a concrete instance of `SpringCloudServiceNetworkInput` via:
//
//	SpringCloudServiceNetworkArgs{...}
type SpringCloudServiceNetworkInput interface {
	pulumi.Input

	ToSpringCloudServiceNetworkOutput() SpringCloudServiceNetworkOutput
	ToSpringCloudServiceNetworkOutputWithContext(context.Context) SpringCloudServiceNetworkOutput
}

type SpringCloudServiceNetworkArgs struct {
	// Specifies the Name of the resource group containing network resources of Azure Spring Cloud Apps. Changing this forces a new resource to be created.
	AppNetworkResourceGroup pulumi.StringPtrInput `pulumi:"appNetworkResourceGroup"`
	// Specifies the ID of the Subnet which should host the Spring Boot Applications deployed in this Spring Cloud Service. Changing this forces a new resource to be created.
	AppSubnetId pulumi.StringInput `pulumi:"appSubnetId"`
	// A list of (at least 3) CIDR ranges (at least /16) which are used to host the Spring Cloud infrastructure, which must not overlap with any existing CIDR ranges in the Subnet. Changing this forces a new resource to be created.
	CidrRanges pulumi.StringArrayInput `pulumi:"cidrRanges"`
	// Specifies the egress traffic type of the Spring Cloud Service. Possible values are `loadBalancer` and `userDefinedRouting`. Defaults to `loadBalancer`. Changing this forces a new resource to be created.
	OutboundType pulumi.StringPtrInput `pulumi:"outboundType"`
	// Ingress read time out in seconds.
	ReadTimeoutSeconds pulumi.IntPtrInput `pulumi:"readTimeoutSeconds"`
	// Specifies the Name of the resource group containing network resources of Azure Spring Cloud Service Runtime. Changing this forces a new resource to be created.
	ServiceRuntimeNetworkResourceGroup pulumi.StringPtrInput `pulumi:"serviceRuntimeNetworkResourceGroup"`
	// Specifies the ID of the Subnet where the Service Runtime components of the Spring Cloud Service will exist. Changing this forces a new resource to be created.
	ServiceRuntimeSubnetId pulumi.StringInput `pulumi:"serviceRuntimeSubnetId"`
}

func (SpringCloudServiceNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceNetwork)(nil)).Elem()
}

func (i SpringCloudServiceNetworkArgs) ToSpringCloudServiceNetworkOutput() SpringCloudServiceNetworkOutput {
	return i.ToSpringCloudServiceNetworkOutputWithContext(context.Background())
}

func (i SpringCloudServiceNetworkArgs) ToSpringCloudServiceNetworkOutputWithContext(ctx context.Context) SpringCloudServiceNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceNetworkOutput)
}

func (i SpringCloudServiceNetworkArgs) ToSpringCloudServiceNetworkPtrOutput() SpringCloudServiceNetworkPtrOutput {
	return i.ToSpringCloudServiceNetworkPtrOutputWithContext(context.Background())
}

func (i SpringCloudServiceNetworkArgs) ToSpringCloudServiceNetworkPtrOutputWithContext(ctx context.Context) SpringCloudServiceNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceNetworkOutput).ToSpringCloudServiceNetworkPtrOutputWithContext(ctx)
}

// SpringCloudServiceNetworkPtrInput is an input type that accepts SpringCloudServiceNetworkArgs, SpringCloudServiceNetworkPtr and SpringCloudServiceNetworkPtrOutput values.
// You can construct a concrete instance of `SpringCloudServiceNetworkPtrInput` via:
//
//	        SpringCloudServiceNetworkArgs{...}
//
//	or:
//
//	        nil
type SpringCloudServiceNetworkPtrInput interface {
	pulumi.Input

	ToSpringCloudServiceNetworkPtrOutput() SpringCloudServiceNetworkPtrOutput
	ToSpringCloudServiceNetworkPtrOutputWithContext(context.Context) SpringCloudServiceNetworkPtrOutput
}

type springCloudServiceNetworkPtrType SpringCloudServiceNetworkArgs

func SpringCloudServiceNetworkPtr(v *SpringCloudServiceNetworkArgs) SpringCloudServiceNetworkPtrInput {
	return (*springCloudServiceNetworkPtrType)(v)
}

func (*springCloudServiceNetworkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudServiceNetwork)(nil)).Elem()
}

func (i *springCloudServiceNetworkPtrType) ToSpringCloudServiceNetworkPtrOutput() SpringCloudServiceNetworkPtrOutput {
	return i.ToSpringCloudServiceNetworkPtrOutputWithContext(context.Background())
}

func (i *springCloudServiceNetworkPtrType) ToSpringCloudServiceNetworkPtrOutputWithContext(ctx context.Context) SpringCloudServiceNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceNetworkPtrOutput)
}

type SpringCloudServiceNetworkOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceNetwork)(nil)).Elem()
}

func (o SpringCloudServiceNetworkOutput) ToSpringCloudServiceNetworkOutput() SpringCloudServiceNetworkOutput {
	return o
}

func (o SpringCloudServiceNetworkOutput) ToSpringCloudServiceNetworkOutputWithContext(ctx context.Context) SpringCloudServiceNetworkOutput {
	return o
}

func (o SpringCloudServiceNetworkOutput) ToSpringCloudServiceNetworkPtrOutput() SpringCloudServiceNetworkPtrOutput {
	return o.ToSpringCloudServiceNetworkPtrOutputWithContext(context.Background())
}

func (o SpringCloudServiceNetworkOutput) ToSpringCloudServiceNetworkPtrOutputWithContext(ctx context.Context) SpringCloudServiceNetworkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpringCloudServiceNetwork) *SpringCloudServiceNetwork {
		return &v
	}).(SpringCloudServiceNetworkPtrOutput)
}

// Specifies the Name of the resource group containing network resources of Azure Spring Cloud Apps. Changing this forces a new resource to be created.
func (o SpringCloudServiceNetworkOutput) AppNetworkResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceNetwork) *string { return v.AppNetworkResourceGroup }).(pulumi.StringPtrOutput)
}

// Specifies the ID of the Subnet which should host the Spring Boot Applications deployed in this Spring Cloud Service. Changing this forces a new resource to be created.
func (o SpringCloudServiceNetworkOutput) AppSubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudServiceNetwork) string { return v.AppSubnetId }).(pulumi.StringOutput)
}

// A list of (at least 3) CIDR ranges (at least /16) which are used to host the Spring Cloud infrastructure, which must not overlap with any existing CIDR ranges in the Subnet. Changing this forces a new resource to be created.
func (o SpringCloudServiceNetworkOutput) CidrRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SpringCloudServiceNetwork) []string { return v.CidrRanges }).(pulumi.StringArrayOutput)
}

// Specifies the egress traffic type of the Spring Cloud Service. Possible values are `loadBalancer` and `userDefinedRouting`. Defaults to `loadBalancer`. Changing this forces a new resource to be created.
func (o SpringCloudServiceNetworkOutput) OutboundType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceNetwork) *string { return v.OutboundType }).(pulumi.StringPtrOutput)
}

// Ingress read time out in seconds.
func (o SpringCloudServiceNetworkOutput) ReadTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceNetwork) *int { return v.ReadTimeoutSeconds }).(pulumi.IntPtrOutput)
}

// Specifies the Name of the resource group containing network resources of Azure Spring Cloud Service Runtime. Changing this forces a new resource to be created.
func (o SpringCloudServiceNetworkOutput) ServiceRuntimeNetworkResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceNetwork) *string { return v.ServiceRuntimeNetworkResourceGroup }).(pulumi.StringPtrOutput)
}

// Specifies the ID of the Subnet where the Service Runtime components of the Spring Cloud Service will exist. Changing this forces a new resource to be created.
func (o SpringCloudServiceNetworkOutput) ServiceRuntimeSubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudServiceNetwork) string { return v.ServiceRuntimeSubnetId }).(pulumi.StringOutput)
}

type SpringCloudServiceNetworkPtrOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceNetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudServiceNetwork)(nil)).Elem()
}

func (o SpringCloudServiceNetworkPtrOutput) ToSpringCloudServiceNetworkPtrOutput() SpringCloudServiceNetworkPtrOutput {
	return o
}

func (o SpringCloudServiceNetworkPtrOutput) ToSpringCloudServiceNetworkPtrOutputWithContext(ctx context.Context) SpringCloudServiceNetworkPtrOutput {
	return o
}

func (o SpringCloudServiceNetworkPtrOutput) Elem() SpringCloudServiceNetworkOutput {
	return o.ApplyT(func(v *SpringCloudServiceNetwork) SpringCloudServiceNetwork {
		if v != nil {
			return *v
		}
		var ret SpringCloudServiceNetwork
		return ret
	}).(SpringCloudServiceNetworkOutput)
}

// Specifies the Name of the resource group containing network resources of Azure Spring Cloud Apps. Changing this forces a new resource to be created.
func (o SpringCloudServiceNetworkPtrOutput) AppNetworkResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceNetwork) *string {
		if v == nil {
			return nil
		}
		return v.AppNetworkResourceGroup
	}).(pulumi.StringPtrOutput)
}

// Specifies the ID of the Subnet which should host the Spring Boot Applications deployed in this Spring Cloud Service. Changing this forces a new resource to be created.
func (o SpringCloudServiceNetworkPtrOutput) AppSubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceNetwork) *string {
		if v == nil {
			return nil
		}
		return &v.AppSubnetId
	}).(pulumi.StringPtrOutput)
}

// A list of (at least 3) CIDR ranges (at least /16) which are used to host the Spring Cloud infrastructure, which must not overlap with any existing CIDR ranges in the Subnet. Changing this forces a new resource to be created.
func (o SpringCloudServiceNetworkPtrOutput) CidrRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SpringCloudServiceNetwork) []string {
		if v == nil {
			return nil
		}
		return v.CidrRanges
	}).(pulumi.StringArrayOutput)
}

// Specifies the egress traffic type of the Spring Cloud Service. Possible values are `loadBalancer` and `userDefinedRouting`. Defaults to `loadBalancer`. Changing this forces a new resource to be created.
func (o SpringCloudServiceNetworkPtrOutput) OutboundType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceNetwork) *string {
		if v == nil {
			return nil
		}
		return v.OutboundType
	}).(pulumi.StringPtrOutput)
}

// Ingress read time out in seconds.
func (o SpringCloudServiceNetworkPtrOutput) ReadTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceNetwork) *int {
		if v == nil {
			return nil
		}
		return v.ReadTimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// Specifies the Name of the resource group containing network resources of Azure Spring Cloud Service Runtime. Changing this forces a new resource to be created.
func (o SpringCloudServiceNetworkPtrOutput) ServiceRuntimeNetworkResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceNetwork) *string {
		if v == nil {
			return nil
		}
		return v.ServiceRuntimeNetworkResourceGroup
	}).(pulumi.StringPtrOutput)
}

// Specifies the ID of the Subnet where the Service Runtime components of the Spring Cloud Service will exist. Changing this forces a new resource to be created.
func (o SpringCloudServiceNetworkPtrOutput) ServiceRuntimeSubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceNetwork) *string {
		if v == nil {
			return nil
		}
		return &v.ServiceRuntimeSubnetId
	}).(pulumi.StringPtrOutput)
}

type SpringCloudServiceRequiredNetworkTrafficRule struct {
	// The direction of required traffic. Possible values are `Inbound`, `Outbound`.
	Direction *string `pulumi:"direction"`
	// The FQDN list of required traffic.
	Fqdns []string `pulumi:"fqdns"`
	// The IP list of required traffic.
	IpAddresses []string `pulumi:"ipAddresses"`
	// The port of required traffic.
	Port *int `pulumi:"port"`
	// The protocol of required traffic.
	Protocol *string `pulumi:"protocol"`
}

// SpringCloudServiceRequiredNetworkTrafficRuleInput is an input type that accepts SpringCloudServiceRequiredNetworkTrafficRuleArgs and SpringCloudServiceRequiredNetworkTrafficRuleOutput values.
// You can construct a concrete instance of `SpringCloudServiceRequiredNetworkTrafficRuleInput` via:
//
//	SpringCloudServiceRequiredNetworkTrafficRuleArgs{...}
type SpringCloudServiceRequiredNetworkTrafficRuleInput interface {
	pulumi.Input

	ToSpringCloudServiceRequiredNetworkTrafficRuleOutput() SpringCloudServiceRequiredNetworkTrafficRuleOutput
	ToSpringCloudServiceRequiredNetworkTrafficRuleOutputWithContext(context.Context) SpringCloudServiceRequiredNetworkTrafficRuleOutput
}

type SpringCloudServiceRequiredNetworkTrafficRuleArgs struct {
	// The direction of required traffic. Possible values are `Inbound`, `Outbound`.
	Direction pulumi.StringPtrInput `pulumi:"direction"`
	// The FQDN list of required traffic.
	Fqdns pulumi.StringArrayInput `pulumi:"fqdns"`
	// The IP list of required traffic.
	IpAddresses pulumi.StringArrayInput `pulumi:"ipAddresses"`
	// The port of required traffic.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The protocol of required traffic.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (SpringCloudServiceRequiredNetworkTrafficRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceRequiredNetworkTrafficRule)(nil)).Elem()
}

func (i SpringCloudServiceRequiredNetworkTrafficRuleArgs) ToSpringCloudServiceRequiredNetworkTrafficRuleOutput() SpringCloudServiceRequiredNetworkTrafficRuleOutput {
	return i.ToSpringCloudServiceRequiredNetworkTrafficRuleOutputWithContext(context.Background())
}

func (i SpringCloudServiceRequiredNetworkTrafficRuleArgs) ToSpringCloudServiceRequiredNetworkTrafficRuleOutputWithContext(ctx context.Context) SpringCloudServiceRequiredNetworkTrafficRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceRequiredNetworkTrafficRuleOutput)
}

// SpringCloudServiceRequiredNetworkTrafficRuleArrayInput is an input type that accepts SpringCloudServiceRequiredNetworkTrafficRuleArray and SpringCloudServiceRequiredNetworkTrafficRuleArrayOutput values.
// You can construct a concrete instance of `SpringCloudServiceRequiredNetworkTrafficRuleArrayInput` via:
//
//	SpringCloudServiceRequiredNetworkTrafficRuleArray{ SpringCloudServiceRequiredNetworkTrafficRuleArgs{...} }
type SpringCloudServiceRequiredNetworkTrafficRuleArrayInput interface {
	pulumi.Input

	ToSpringCloudServiceRequiredNetworkTrafficRuleArrayOutput() SpringCloudServiceRequiredNetworkTrafficRuleArrayOutput
	ToSpringCloudServiceRequiredNetworkTrafficRuleArrayOutputWithContext(context.Context) SpringCloudServiceRequiredNetworkTrafficRuleArrayOutput
}

type SpringCloudServiceRequiredNetworkTrafficRuleArray []SpringCloudServiceRequiredNetworkTrafficRuleInput

func (SpringCloudServiceRequiredNetworkTrafficRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpringCloudServiceRequiredNetworkTrafficRule)(nil)).Elem()
}

func (i SpringCloudServiceRequiredNetworkTrafficRuleArray) ToSpringCloudServiceRequiredNetworkTrafficRuleArrayOutput() SpringCloudServiceRequiredNetworkTrafficRuleArrayOutput {
	return i.ToSpringCloudServiceRequiredNetworkTrafficRuleArrayOutputWithContext(context.Background())
}

func (i SpringCloudServiceRequiredNetworkTrafficRuleArray) ToSpringCloudServiceRequiredNetworkTrafficRuleArrayOutputWithContext(ctx context.Context) SpringCloudServiceRequiredNetworkTrafficRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceRequiredNetworkTrafficRuleArrayOutput)
}

type SpringCloudServiceRequiredNetworkTrafficRuleOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceRequiredNetworkTrafficRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceRequiredNetworkTrafficRule)(nil)).Elem()
}

func (o SpringCloudServiceRequiredNetworkTrafficRuleOutput) ToSpringCloudServiceRequiredNetworkTrafficRuleOutput() SpringCloudServiceRequiredNetworkTrafficRuleOutput {
	return o
}

func (o SpringCloudServiceRequiredNetworkTrafficRuleOutput) ToSpringCloudServiceRequiredNetworkTrafficRuleOutputWithContext(ctx context.Context) SpringCloudServiceRequiredNetworkTrafficRuleOutput {
	return o
}

// The direction of required traffic. Possible values are `Inbound`, `Outbound`.
func (o SpringCloudServiceRequiredNetworkTrafficRuleOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceRequiredNetworkTrafficRule) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// The FQDN list of required traffic.
func (o SpringCloudServiceRequiredNetworkTrafficRuleOutput) Fqdns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SpringCloudServiceRequiredNetworkTrafficRule) []string { return v.Fqdns }).(pulumi.StringArrayOutput)
}

// The IP list of required traffic.
func (o SpringCloudServiceRequiredNetworkTrafficRuleOutput) IpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SpringCloudServiceRequiredNetworkTrafficRule) []string { return v.IpAddresses }).(pulumi.StringArrayOutput)
}

// The port of required traffic.
func (o SpringCloudServiceRequiredNetworkTrafficRuleOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceRequiredNetworkTrafficRule) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The protocol of required traffic.
func (o SpringCloudServiceRequiredNetworkTrafficRuleOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceRequiredNetworkTrafficRule) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type SpringCloudServiceRequiredNetworkTrafficRuleArrayOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceRequiredNetworkTrafficRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpringCloudServiceRequiredNetworkTrafficRule)(nil)).Elem()
}

func (o SpringCloudServiceRequiredNetworkTrafficRuleArrayOutput) ToSpringCloudServiceRequiredNetworkTrafficRuleArrayOutput() SpringCloudServiceRequiredNetworkTrafficRuleArrayOutput {
	return o
}

func (o SpringCloudServiceRequiredNetworkTrafficRuleArrayOutput) ToSpringCloudServiceRequiredNetworkTrafficRuleArrayOutputWithContext(ctx context.Context) SpringCloudServiceRequiredNetworkTrafficRuleArrayOutput {
	return o
}

func (o SpringCloudServiceRequiredNetworkTrafficRuleArrayOutput) Index(i pulumi.IntInput) SpringCloudServiceRequiredNetworkTrafficRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SpringCloudServiceRequiredNetworkTrafficRule {
		return vs[0].([]SpringCloudServiceRequiredNetworkTrafficRule)[vs[1].(int)]
	}).(SpringCloudServiceRequiredNetworkTrafficRuleOutput)
}

type SpringCloudServiceTrace struct {
	// The connection string used for Application Insights.
	ConnectionString *string `pulumi:"connectionString"`
	// The sampling rate of Application Insights Agent. Must be between `0.0` and `100.0`. Defaults to `10.0`.
	SampleRate *float64 `pulumi:"sampleRate"`
}

// SpringCloudServiceTraceInput is an input type that accepts SpringCloudServiceTraceArgs and SpringCloudServiceTraceOutput values.
// You can construct a concrete instance of `SpringCloudServiceTraceInput` via:
//
//	SpringCloudServiceTraceArgs{...}
type SpringCloudServiceTraceInput interface {
	pulumi.Input

	ToSpringCloudServiceTraceOutput() SpringCloudServiceTraceOutput
	ToSpringCloudServiceTraceOutputWithContext(context.Context) SpringCloudServiceTraceOutput
}

type SpringCloudServiceTraceArgs struct {
	// The connection string used for Application Insights.
	ConnectionString pulumi.StringPtrInput `pulumi:"connectionString"`
	// The sampling rate of Application Insights Agent. Must be between `0.0` and `100.0`. Defaults to `10.0`.
	SampleRate pulumi.Float64PtrInput `pulumi:"sampleRate"`
}

func (SpringCloudServiceTraceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceTrace)(nil)).Elem()
}

func (i SpringCloudServiceTraceArgs) ToSpringCloudServiceTraceOutput() SpringCloudServiceTraceOutput {
	return i.ToSpringCloudServiceTraceOutputWithContext(context.Background())
}

func (i SpringCloudServiceTraceArgs) ToSpringCloudServiceTraceOutputWithContext(ctx context.Context) SpringCloudServiceTraceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceTraceOutput)
}

func (i SpringCloudServiceTraceArgs) ToSpringCloudServiceTracePtrOutput() SpringCloudServiceTracePtrOutput {
	return i.ToSpringCloudServiceTracePtrOutputWithContext(context.Background())
}

func (i SpringCloudServiceTraceArgs) ToSpringCloudServiceTracePtrOutputWithContext(ctx context.Context) SpringCloudServiceTracePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceTraceOutput).ToSpringCloudServiceTracePtrOutputWithContext(ctx)
}

// SpringCloudServiceTracePtrInput is an input type that accepts SpringCloudServiceTraceArgs, SpringCloudServiceTracePtr and SpringCloudServiceTracePtrOutput values.
// You can construct a concrete instance of `SpringCloudServiceTracePtrInput` via:
//
//	        SpringCloudServiceTraceArgs{...}
//
//	or:
//
//	        nil
type SpringCloudServiceTracePtrInput interface {
	pulumi.Input

	ToSpringCloudServiceTracePtrOutput() SpringCloudServiceTracePtrOutput
	ToSpringCloudServiceTracePtrOutputWithContext(context.Context) SpringCloudServiceTracePtrOutput
}

type springCloudServiceTracePtrType SpringCloudServiceTraceArgs

func SpringCloudServiceTracePtr(v *SpringCloudServiceTraceArgs) SpringCloudServiceTracePtrInput {
	return (*springCloudServiceTracePtrType)(v)
}

func (*springCloudServiceTracePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudServiceTrace)(nil)).Elem()
}

func (i *springCloudServiceTracePtrType) ToSpringCloudServiceTracePtrOutput() SpringCloudServiceTracePtrOutput {
	return i.ToSpringCloudServiceTracePtrOutputWithContext(context.Background())
}

func (i *springCloudServiceTracePtrType) ToSpringCloudServiceTracePtrOutputWithContext(ctx context.Context) SpringCloudServiceTracePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceTracePtrOutput)
}

type SpringCloudServiceTraceOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceTraceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceTrace)(nil)).Elem()
}

func (o SpringCloudServiceTraceOutput) ToSpringCloudServiceTraceOutput() SpringCloudServiceTraceOutput {
	return o
}

func (o SpringCloudServiceTraceOutput) ToSpringCloudServiceTraceOutputWithContext(ctx context.Context) SpringCloudServiceTraceOutput {
	return o
}

func (o SpringCloudServiceTraceOutput) ToSpringCloudServiceTracePtrOutput() SpringCloudServiceTracePtrOutput {
	return o.ToSpringCloudServiceTracePtrOutputWithContext(context.Background())
}

func (o SpringCloudServiceTraceOutput) ToSpringCloudServiceTracePtrOutputWithContext(ctx context.Context) SpringCloudServiceTracePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpringCloudServiceTrace) *SpringCloudServiceTrace {
		return &v
	}).(SpringCloudServiceTracePtrOutput)
}

// The connection string used for Application Insights.
func (o SpringCloudServiceTraceOutput) ConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceTrace) *string { return v.ConnectionString }).(pulumi.StringPtrOutput)
}

// The sampling rate of Application Insights Agent. Must be between `0.0` and `100.0`. Defaults to `10.0`.
func (o SpringCloudServiceTraceOutput) SampleRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SpringCloudServiceTrace) *float64 { return v.SampleRate }).(pulumi.Float64PtrOutput)
}

type SpringCloudServiceTracePtrOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceTracePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudServiceTrace)(nil)).Elem()
}

func (o SpringCloudServiceTracePtrOutput) ToSpringCloudServiceTracePtrOutput() SpringCloudServiceTracePtrOutput {
	return o
}

func (o SpringCloudServiceTracePtrOutput) ToSpringCloudServiceTracePtrOutputWithContext(ctx context.Context) SpringCloudServiceTracePtrOutput {
	return o
}

func (o SpringCloudServiceTracePtrOutput) Elem() SpringCloudServiceTraceOutput {
	return o.ApplyT(func(v *SpringCloudServiceTrace) SpringCloudServiceTrace {
		if v != nil {
			return *v
		}
		var ret SpringCloudServiceTrace
		return ret
	}).(SpringCloudServiceTraceOutput)
}

// The connection string used for Application Insights.
func (o SpringCloudServiceTracePtrOutput) ConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceTrace) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionString
	}).(pulumi.StringPtrOutput)
}

// The sampling rate of Application Insights Agent. Must be between `0.0` and `100.0`. Defaults to `10.0`.
func (o SpringCloudServiceTracePtrOutput) SampleRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceTrace) *float64 {
		if v == nil {
			return nil
		}
		return v.SampleRate
	}).(pulumi.Float64PtrOutput)
}

type GetSpringCloudAppIdentity struct {
	IdentityIds []string `pulumi:"identityIds"`
	// The Principal ID for the Service Principal associated with the Managed Service Identity of this Spring Cloud Application.
	PrincipalId string `pulumi:"principalId"`
	// The Tenant ID for the Service Principal associated with the Managed Service Identity of this Spring Cloud Application.
	TenantId string `pulumi:"tenantId"`
	// The Type of Managed Identity assigned to the Spring Cloud Application.
	Type string `pulumi:"type"`
}

// GetSpringCloudAppIdentityInput is an input type that accepts GetSpringCloudAppIdentityArgs and GetSpringCloudAppIdentityOutput values.
// You can construct a concrete instance of `GetSpringCloudAppIdentityInput` via:
//
//	GetSpringCloudAppIdentityArgs{...}
type GetSpringCloudAppIdentityInput interface {
	pulumi.Input

	ToGetSpringCloudAppIdentityOutput() GetSpringCloudAppIdentityOutput
	ToGetSpringCloudAppIdentityOutputWithContext(context.Context) GetSpringCloudAppIdentityOutput
}

type GetSpringCloudAppIdentityArgs struct {
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	// The Principal ID for the Service Principal associated with the Managed Service Identity of this Spring Cloud Application.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The Tenant ID for the Service Principal associated with the Managed Service Identity of this Spring Cloud Application.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The Type of Managed Identity assigned to the Spring Cloud Application.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetSpringCloudAppIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpringCloudAppIdentity)(nil)).Elem()
}

func (i GetSpringCloudAppIdentityArgs) ToGetSpringCloudAppIdentityOutput() GetSpringCloudAppIdentityOutput {
	return i.ToGetSpringCloudAppIdentityOutputWithContext(context.Background())
}

func (i GetSpringCloudAppIdentityArgs) ToGetSpringCloudAppIdentityOutputWithContext(ctx context.Context) GetSpringCloudAppIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpringCloudAppIdentityOutput)
}

// GetSpringCloudAppIdentityArrayInput is an input type that accepts GetSpringCloudAppIdentityArray and GetSpringCloudAppIdentityArrayOutput values.
// You can construct a concrete instance of `GetSpringCloudAppIdentityArrayInput` via:
//
//	GetSpringCloudAppIdentityArray{ GetSpringCloudAppIdentityArgs{...} }
type GetSpringCloudAppIdentityArrayInput interface {
	pulumi.Input

	ToGetSpringCloudAppIdentityArrayOutput() GetSpringCloudAppIdentityArrayOutput
	ToGetSpringCloudAppIdentityArrayOutputWithContext(context.Context) GetSpringCloudAppIdentityArrayOutput
}

type GetSpringCloudAppIdentityArray []GetSpringCloudAppIdentityInput

func (GetSpringCloudAppIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpringCloudAppIdentity)(nil)).Elem()
}

func (i GetSpringCloudAppIdentityArray) ToGetSpringCloudAppIdentityArrayOutput() GetSpringCloudAppIdentityArrayOutput {
	return i.ToGetSpringCloudAppIdentityArrayOutputWithContext(context.Background())
}

func (i GetSpringCloudAppIdentityArray) ToGetSpringCloudAppIdentityArrayOutputWithContext(ctx context.Context) GetSpringCloudAppIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpringCloudAppIdentityArrayOutput)
}

type GetSpringCloudAppIdentityOutput struct{ *pulumi.OutputState }

func (GetSpringCloudAppIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpringCloudAppIdentity)(nil)).Elem()
}

func (o GetSpringCloudAppIdentityOutput) ToGetSpringCloudAppIdentityOutput() GetSpringCloudAppIdentityOutput {
	return o
}

func (o GetSpringCloudAppIdentityOutput) ToGetSpringCloudAppIdentityOutputWithContext(ctx context.Context) GetSpringCloudAppIdentityOutput {
	return o
}

func (o GetSpringCloudAppIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSpringCloudAppIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

// The Principal ID for the Service Principal associated with the Managed Service Identity of this Spring Cloud Application.
func (o GetSpringCloudAppIdentityOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudAppIdentity) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The Tenant ID for the Service Principal associated with the Managed Service Identity of this Spring Cloud Application.
func (o GetSpringCloudAppIdentityOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudAppIdentity) string { return v.TenantId }).(pulumi.StringOutput)
}

// The Type of Managed Identity assigned to the Spring Cloud Application.
func (o GetSpringCloudAppIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudAppIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type GetSpringCloudAppIdentityArrayOutput struct{ *pulumi.OutputState }

func (GetSpringCloudAppIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpringCloudAppIdentity)(nil)).Elem()
}

func (o GetSpringCloudAppIdentityArrayOutput) ToGetSpringCloudAppIdentityArrayOutput() GetSpringCloudAppIdentityArrayOutput {
	return o
}

func (o GetSpringCloudAppIdentityArrayOutput) ToGetSpringCloudAppIdentityArrayOutputWithContext(ctx context.Context) GetSpringCloudAppIdentityArrayOutput {
	return o
}

func (o GetSpringCloudAppIdentityArrayOutput) Index(i pulumi.IntInput) GetSpringCloudAppIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSpringCloudAppIdentity {
		return vs[0].([]GetSpringCloudAppIdentity)[vs[1].(int)]
	}).(GetSpringCloudAppIdentityOutput)
}

type GetSpringCloudAppPersistentDisk struct {
	// The mount path of the persistent disk.
	MountPath string `pulumi:"mountPath"`
	// The size of the persistent disk in GB.
	SizeInGb int `pulumi:"sizeInGb"`
}

// GetSpringCloudAppPersistentDiskInput is an input type that accepts GetSpringCloudAppPersistentDiskArgs and GetSpringCloudAppPersistentDiskOutput values.
// You can construct a concrete instance of `GetSpringCloudAppPersistentDiskInput` via:
//
//	GetSpringCloudAppPersistentDiskArgs{...}
type GetSpringCloudAppPersistentDiskInput interface {
	pulumi.Input

	ToGetSpringCloudAppPersistentDiskOutput() GetSpringCloudAppPersistentDiskOutput
	ToGetSpringCloudAppPersistentDiskOutputWithContext(context.Context) GetSpringCloudAppPersistentDiskOutput
}

type GetSpringCloudAppPersistentDiskArgs struct {
	// The mount path of the persistent disk.
	MountPath pulumi.StringInput `pulumi:"mountPath"`
	// The size of the persistent disk in GB.
	SizeInGb pulumi.IntInput `pulumi:"sizeInGb"`
}

func (GetSpringCloudAppPersistentDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpringCloudAppPersistentDisk)(nil)).Elem()
}

func (i GetSpringCloudAppPersistentDiskArgs) ToGetSpringCloudAppPersistentDiskOutput() GetSpringCloudAppPersistentDiskOutput {
	return i.ToGetSpringCloudAppPersistentDiskOutputWithContext(context.Background())
}

func (i GetSpringCloudAppPersistentDiskArgs) ToGetSpringCloudAppPersistentDiskOutputWithContext(ctx context.Context) GetSpringCloudAppPersistentDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpringCloudAppPersistentDiskOutput)
}

// GetSpringCloudAppPersistentDiskArrayInput is an input type that accepts GetSpringCloudAppPersistentDiskArray and GetSpringCloudAppPersistentDiskArrayOutput values.
// You can construct a concrete instance of `GetSpringCloudAppPersistentDiskArrayInput` via:
//
//	GetSpringCloudAppPersistentDiskArray{ GetSpringCloudAppPersistentDiskArgs{...} }
type GetSpringCloudAppPersistentDiskArrayInput interface {
	pulumi.Input

	ToGetSpringCloudAppPersistentDiskArrayOutput() GetSpringCloudAppPersistentDiskArrayOutput
	ToGetSpringCloudAppPersistentDiskArrayOutputWithContext(context.Context) GetSpringCloudAppPersistentDiskArrayOutput
}

type GetSpringCloudAppPersistentDiskArray []GetSpringCloudAppPersistentDiskInput

func (GetSpringCloudAppPersistentDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpringCloudAppPersistentDisk)(nil)).Elem()
}

func (i GetSpringCloudAppPersistentDiskArray) ToGetSpringCloudAppPersistentDiskArrayOutput() GetSpringCloudAppPersistentDiskArrayOutput {
	return i.ToGetSpringCloudAppPersistentDiskArrayOutputWithContext(context.Background())
}

func (i GetSpringCloudAppPersistentDiskArray) ToGetSpringCloudAppPersistentDiskArrayOutputWithContext(ctx context.Context) GetSpringCloudAppPersistentDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpringCloudAppPersistentDiskArrayOutput)
}

type GetSpringCloudAppPersistentDiskOutput struct{ *pulumi.OutputState }

func (GetSpringCloudAppPersistentDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpringCloudAppPersistentDisk)(nil)).Elem()
}

func (o GetSpringCloudAppPersistentDiskOutput) ToGetSpringCloudAppPersistentDiskOutput() GetSpringCloudAppPersistentDiskOutput {
	return o
}

func (o GetSpringCloudAppPersistentDiskOutput) ToGetSpringCloudAppPersistentDiskOutputWithContext(ctx context.Context) GetSpringCloudAppPersistentDiskOutput {
	return o
}

// The mount path of the persistent disk.
func (o GetSpringCloudAppPersistentDiskOutput) MountPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudAppPersistentDisk) string { return v.MountPath }).(pulumi.StringOutput)
}

// The size of the persistent disk in GB.
func (o GetSpringCloudAppPersistentDiskOutput) SizeInGb() pulumi.IntOutput {
	return o.ApplyT(func(v GetSpringCloudAppPersistentDisk) int { return v.SizeInGb }).(pulumi.IntOutput)
}

type GetSpringCloudAppPersistentDiskArrayOutput struct{ *pulumi.OutputState }

func (GetSpringCloudAppPersistentDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpringCloudAppPersistentDisk)(nil)).Elem()
}

func (o GetSpringCloudAppPersistentDiskArrayOutput) ToGetSpringCloudAppPersistentDiskArrayOutput() GetSpringCloudAppPersistentDiskArrayOutput {
	return o
}

func (o GetSpringCloudAppPersistentDiskArrayOutput) ToGetSpringCloudAppPersistentDiskArrayOutputWithContext(ctx context.Context) GetSpringCloudAppPersistentDiskArrayOutput {
	return o
}

func (o GetSpringCloudAppPersistentDiskArrayOutput) Index(i pulumi.IntInput) GetSpringCloudAppPersistentDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSpringCloudAppPersistentDisk {
		return vs[0].([]GetSpringCloudAppPersistentDisk)[vs[1].(int)]
	}).(GetSpringCloudAppPersistentDiskOutput)
}

type GetSpringCloudServiceConfigServerGitSetting struct {
	// A `httpBasicAuth` block as defined below.
	HttpBasicAuths []GetSpringCloudServiceConfigServerGitSettingHttpBasicAuth `pulumi:"httpBasicAuths"`
	// The default label of the Git repository, which is a branch name, tag name, or commit-id of the repository
	Label string `pulumi:"label"`
	// One or more `repository` blocks as defined below.
	Repositories []GetSpringCloudServiceConfigServerGitSettingRepository `pulumi:"repositories"`
	// An array of strings used to search subdirectories of the Git repository.
	SearchPaths []string `pulumi:"searchPaths"`
	// A `sshAuth` block as defined below.
	SshAuths []GetSpringCloudServiceConfigServerGitSettingSshAuth `pulumi:"sshAuths"`
	// The URI of the Git repository
	Uri string `pulumi:"uri"`
}

// GetSpringCloudServiceConfigServerGitSettingInput is an input type that accepts GetSpringCloudServiceConfigServerGitSettingArgs and GetSpringCloudServiceConfigServerGitSettingOutput values.
// You can construct a concrete instance of `GetSpringCloudServiceConfigServerGitSettingInput` via:
//
//	GetSpringCloudServiceConfigServerGitSettingArgs{...}
type GetSpringCloudServiceConfigServerGitSettingInput interface {
	pulumi.Input

	ToGetSpringCloudServiceConfigServerGitSettingOutput() GetSpringCloudServiceConfigServerGitSettingOutput
	ToGetSpringCloudServiceConfigServerGitSettingOutputWithContext(context.Context) GetSpringCloudServiceConfigServerGitSettingOutput
}

type GetSpringCloudServiceConfigServerGitSettingArgs struct {
	// A `httpBasicAuth` block as defined below.
	HttpBasicAuths GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayInput `pulumi:"httpBasicAuths"`
	// The default label of the Git repository, which is a branch name, tag name, or commit-id of the repository
	Label pulumi.StringInput `pulumi:"label"`
	// One or more `repository` blocks as defined below.
	Repositories GetSpringCloudServiceConfigServerGitSettingRepositoryArrayInput `pulumi:"repositories"`
	// An array of strings used to search subdirectories of the Git repository.
	SearchPaths pulumi.StringArrayInput `pulumi:"searchPaths"`
	// A `sshAuth` block as defined below.
	SshAuths GetSpringCloudServiceConfigServerGitSettingSshAuthArrayInput `pulumi:"sshAuths"`
	// The URI of the Git repository
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (GetSpringCloudServiceConfigServerGitSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSetting)(nil)).Elem()
}

func (i GetSpringCloudServiceConfigServerGitSettingArgs) ToGetSpringCloudServiceConfigServerGitSettingOutput() GetSpringCloudServiceConfigServerGitSettingOutput {
	return i.ToGetSpringCloudServiceConfigServerGitSettingOutputWithContext(context.Background())
}

func (i GetSpringCloudServiceConfigServerGitSettingArgs) ToGetSpringCloudServiceConfigServerGitSettingOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpringCloudServiceConfigServerGitSettingOutput)
}

// GetSpringCloudServiceConfigServerGitSettingArrayInput is an input type that accepts GetSpringCloudServiceConfigServerGitSettingArray and GetSpringCloudServiceConfigServerGitSettingArrayOutput values.
// You can construct a concrete instance of `GetSpringCloudServiceConfigServerGitSettingArrayInput` via:
//
//	GetSpringCloudServiceConfigServerGitSettingArray{ GetSpringCloudServiceConfigServerGitSettingArgs{...} }
type GetSpringCloudServiceConfigServerGitSettingArrayInput interface {
	pulumi.Input

	ToGetSpringCloudServiceConfigServerGitSettingArrayOutput() GetSpringCloudServiceConfigServerGitSettingArrayOutput
	ToGetSpringCloudServiceConfigServerGitSettingArrayOutputWithContext(context.Context) GetSpringCloudServiceConfigServerGitSettingArrayOutput
}

type GetSpringCloudServiceConfigServerGitSettingArray []GetSpringCloudServiceConfigServerGitSettingInput

func (GetSpringCloudServiceConfigServerGitSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpringCloudServiceConfigServerGitSetting)(nil)).Elem()
}

func (i GetSpringCloudServiceConfigServerGitSettingArray) ToGetSpringCloudServiceConfigServerGitSettingArrayOutput() GetSpringCloudServiceConfigServerGitSettingArrayOutput {
	return i.ToGetSpringCloudServiceConfigServerGitSettingArrayOutputWithContext(context.Background())
}

func (i GetSpringCloudServiceConfigServerGitSettingArray) ToGetSpringCloudServiceConfigServerGitSettingArrayOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpringCloudServiceConfigServerGitSettingArrayOutput)
}

type GetSpringCloudServiceConfigServerGitSettingOutput struct{ *pulumi.OutputState }

func (GetSpringCloudServiceConfigServerGitSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSetting)(nil)).Elem()
}

func (o GetSpringCloudServiceConfigServerGitSettingOutput) ToGetSpringCloudServiceConfigServerGitSettingOutput() GetSpringCloudServiceConfigServerGitSettingOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingOutput) ToGetSpringCloudServiceConfigServerGitSettingOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingOutput {
	return o
}

// A `httpBasicAuth` block as defined below.
func (o GetSpringCloudServiceConfigServerGitSettingOutput) HttpBasicAuths() GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSetting) []GetSpringCloudServiceConfigServerGitSettingHttpBasicAuth {
		return v.HttpBasicAuths
	}).(GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput)
}

// The default label of the Git repository, which is a branch name, tag name, or commit-id of the repository
func (o GetSpringCloudServiceConfigServerGitSettingOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSetting) string { return v.Label }).(pulumi.StringOutput)
}

// One or more `repository` blocks as defined below.
func (o GetSpringCloudServiceConfigServerGitSettingOutput) Repositories() GetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSetting) []GetSpringCloudServiceConfigServerGitSettingRepository {
		return v.Repositories
	}).(GetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput)
}

// An array of strings used to search subdirectories of the Git repository.
func (o GetSpringCloudServiceConfigServerGitSettingOutput) SearchPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSetting) []string { return v.SearchPaths }).(pulumi.StringArrayOutput)
}

// A `sshAuth` block as defined below.
func (o GetSpringCloudServiceConfigServerGitSettingOutput) SshAuths() GetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSetting) []GetSpringCloudServiceConfigServerGitSettingSshAuth {
		return v.SshAuths
	}).(GetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput)
}

// The URI of the Git repository
func (o GetSpringCloudServiceConfigServerGitSettingOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSetting) string { return v.Uri }).(pulumi.StringOutput)
}

type GetSpringCloudServiceConfigServerGitSettingArrayOutput struct{ *pulumi.OutputState }

func (GetSpringCloudServiceConfigServerGitSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpringCloudServiceConfigServerGitSetting)(nil)).Elem()
}

func (o GetSpringCloudServiceConfigServerGitSettingArrayOutput) ToGetSpringCloudServiceConfigServerGitSettingArrayOutput() GetSpringCloudServiceConfigServerGitSettingArrayOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingArrayOutput) ToGetSpringCloudServiceConfigServerGitSettingArrayOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingArrayOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingArrayOutput) Index(i pulumi.IntInput) GetSpringCloudServiceConfigServerGitSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSpringCloudServiceConfigServerGitSetting {
		return vs[0].([]GetSpringCloudServiceConfigServerGitSetting)[vs[1].(int)]
	}).(GetSpringCloudServiceConfigServerGitSettingOutput)
}

type GetSpringCloudServiceConfigServerGitSettingHttpBasicAuth struct {
	// The password used to access the HTTP Basic Authentication Git repository server.
	Password string `pulumi:"password"`
	// The username used to access the HTTP Basic Authentication Git repository server.
	Username string `pulumi:"username"`
}

// GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthInput is an input type that accepts GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs and GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput values.
// You can construct a concrete instance of `GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthInput` via:
//
//	GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs{...}
type GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthInput interface {
	pulumi.Input

	ToGetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput() GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput
	ToGetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutputWithContext(context.Context) GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput
}

type GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs struct {
	// The password used to access the HTTP Basic Authentication Git repository server.
	Password pulumi.StringInput `pulumi:"password"`
	// The username used to access the HTTP Basic Authentication Git repository server.
	Username pulumi.StringInput `pulumi:"username"`
}

func (GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSettingHttpBasicAuth)(nil)).Elem()
}

func (i GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs) ToGetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput() GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput {
	return i.ToGetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutputWithContext(context.Background())
}

func (i GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs) ToGetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput)
}

// GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayInput is an input type that accepts GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArray and GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput values.
// You can construct a concrete instance of `GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayInput` via:
//
//	GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArray{ GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs{...} }
type GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayInput interface {
	pulumi.Input

	ToGetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput() GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput
	ToGetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutputWithContext(context.Context) GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput
}

type GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArray []GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthInput

func (GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpringCloudServiceConfigServerGitSettingHttpBasicAuth)(nil)).Elem()
}

func (i GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArray) ToGetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput() GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput {
	return i.ToGetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutputWithContext(context.Background())
}

func (i GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArray) ToGetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput)
}

type GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput struct{ *pulumi.OutputState }

func (GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSettingHttpBasicAuth)(nil)).Elem()
}

func (o GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput) ToGetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput() GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput) ToGetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput {
	return o
}

// The password used to access the HTTP Basic Authentication Git repository server.
func (o GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingHttpBasicAuth) string { return v.Password }).(pulumi.StringOutput)
}

// The username used to access the HTTP Basic Authentication Git repository server.
func (o GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingHttpBasicAuth) string { return v.Username }).(pulumi.StringOutput)
}

type GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput struct{ *pulumi.OutputState }

func (GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpringCloudServiceConfigServerGitSettingHttpBasicAuth)(nil)).Elem()
}

func (o GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput) ToGetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput() GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput) ToGetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput) Index(i pulumi.IntInput) GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSpringCloudServiceConfigServerGitSettingHttpBasicAuth {
		return vs[0].([]GetSpringCloudServiceConfigServerGitSettingHttpBasicAuth)[vs[1].(int)]
	}).(GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput)
}

type GetSpringCloudServiceConfigServerGitSettingRepository struct {
	// A `httpBasicAuth` block as defined below.
	HttpBasicAuths []GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth `pulumi:"httpBasicAuths"`
	// The default label of the Git repository, which is a branch name, tag name, or commit-id of the repository
	Label string `pulumi:"label"`
	// Specifies The name of the Spring Cloud Service resource.
	Name string `pulumi:"name"`
	// An array of strings used to match an application name. For each pattern, use the `{application}/{profile}` format with wildcards.
	Patterns []string `pulumi:"patterns"`
	// An array of strings used to search subdirectories of the Git repository.
	SearchPaths []string `pulumi:"searchPaths"`
	// A `sshAuth` block as defined below.
	SshAuths []GetSpringCloudServiceConfigServerGitSettingRepositorySshAuth `pulumi:"sshAuths"`
	// The URI of the Git repository
	Uri string `pulumi:"uri"`
}

// GetSpringCloudServiceConfigServerGitSettingRepositoryInput is an input type that accepts GetSpringCloudServiceConfigServerGitSettingRepositoryArgs and GetSpringCloudServiceConfigServerGitSettingRepositoryOutput values.
// You can construct a concrete instance of `GetSpringCloudServiceConfigServerGitSettingRepositoryInput` via:
//
//	GetSpringCloudServiceConfigServerGitSettingRepositoryArgs{...}
type GetSpringCloudServiceConfigServerGitSettingRepositoryInput interface {
	pulumi.Input

	ToGetSpringCloudServiceConfigServerGitSettingRepositoryOutput() GetSpringCloudServiceConfigServerGitSettingRepositoryOutput
	ToGetSpringCloudServiceConfigServerGitSettingRepositoryOutputWithContext(context.Context) GetSpringCloudServiceConfigServerGitSettingRepositoryOutput
}

type GetSpringCloudServiceConfigServerGitSettingRepositoryArgs struct {
	// A `httpBasicAuth` block as defined below.
	HttpBasicAuths GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayInput `pulumi:"httpBasicAuths"`
	// The default label of the Git repository, which is a branch name, tag name, or commit-id of the repository
	Label pulumi.StringInput `pulumi:"label"`
	// Specifies The name of the Spring Cloud Service resource.
	Name pulumi.StringInput `pulumi:"name"`
	// An array of strings used to match an application name. For each pattern, use the `{application}/{profile}` format with wildcards.
	Patterns pulumi.StringArrayInput `pulumi:"patterns"`
	// An array of strings used to search subdirectories of the Git repository.
	SearchPaths pulumi.StringArrayInput `pulumi:"searchPaths"`
	// A `sshAuth` block as defined below.
	SshAuths GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayInput `pulumi:"sshAuths"`
	// The URI of the Git repository
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (GetSpringCloudServiceConfigServerGitSettingRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSettingRepository)(nil)).Elem()
}

func (i GetSpringCloudServiceConfigServerGitSettingRepositoryArgs) ToGetSpringCloudServiceConfigServerGitSettingRepositoryOutput() GetSpringCloudServiceConfigServerGitSettingRepositoryOutput {
	return i.ToGetSpringCloudServiceConfigServerGitSettingRepositoryOutputWithContext(context.Background())
}

func (i GetSpringCloudServiceConfigServerGitSettingRepositoryArgs) ToGetSpringCloudServiceConfigServerGitSettingRepositoryOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpringCloudServiceConfigServerGitSettingRepositoryOutput)
}

// GetSpringCloudServiceConfigServerGitSettingRepositoryArrayInput is an input type that accepts GetSpringCloudServiceConfigServerGitSettingRepositoryArray and GetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput values.
// You can construct a concrete instance of `GetSpringCloudServiceConfigServerGitSettingRepositoryArrayInput` via:
//
//	GetSpringCloudServiceConfigServerGitSettingRepositoryArray{ GetSpringCloudServiceConfigServerGitSettingRepositoryArgs{...} }
type GetSpringCloudServiceConfigServerGitSettingRepositoryArrayInput interface {
	pulumi.Input

	ToGetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput() GetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput
	ToGetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutputWithContext(context.Context) GetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput
}

type GetSpringCloudServiceConfigServerGitSettingRepositoryArray []GetSpringCloudServiceConfigServerGitSettingRepositoryInput

func (GetSpringCloudServiceConfigServerGitSettingRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpringCloudServiceConfigServerGitSettingRepository)(nil)).Elem()
}

func (i GetSpringCloudServiceConfigServerGitSettingRepositoryArray) ToGetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput() GetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput {
	return i.ToGetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutputWithContext(context.Background())
}

func (i GetSpringCloudServiceConfigServerGitSettingRepositoryArray) ToGetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput)
}

type GetSpringCloudServiceConfigServerGitSettingRepositoryOutput struct{ *pulumi.OutputState }

func (GetSpringCloudServiceConfigServerGitSettingRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSettingRepository)(nil)).Elem()
}

func (o GetSpringCloudServiceConfigServerGitSettingRepositoryOutput) ToGetSpringCloudServiceConfigServerGitSettingRepositoryOutput() GetSpringCloudServiceConfigServerGitSettingRepositoryOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingRepositoryOutput) ToGetSpringCloudServiceConfigServerGitSettingRepositoryOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingRepositoryOutput {
	return o
}

// A `httpBasicAuth` block as defined below.
func (o GetSpringCloudServiceConfigServerGitSettingRepositoryOutput) HttpBasicAuths() GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingRepository) []GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth {
		return v.HttpBasicAuths
	}).(GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput)
}

// The default label of the Git repository, which is a branch name, tag name, or commit-id of the repository
func (o GetSpringCloudServiceConfigServerGitSettingRepositoryOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingRepository) string { return v.Label }).(pulumi.StringOutput)
}

// Specifies The name of the Spring Cloud Service resource.
func (o GetSpringCloudServiceConfigServerGitSettingRepositoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingRepository) string { return v.Name }).(pulumi.StringOutput)
}

// An array of strings used to match an application name. For each pattern, use the `{application}/{profile}` format with wildcards.
func (o GetSpringCloudServiceConfigServerGitSettingRepositoryOutput) Patterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingRepository) []string { return v.Patterns }).(pulumi.StringArrayOutput)
}

// An array of strings used to search subdirectories of the Git repository.
func (o GetSpringCloudServiceConfigServerGitSettingRepositoryOutput) SearchPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingRepository) []string { return v.SearchPaths }).(pulumi.StringArrayOutput)
}

// A `sshAuth` block as defined below.
func (o GetSpringCloudServiceConfigServerGitSettingRepositoryOutput) SshAuths() GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingRepository) []GetSpringCloudServiceConfigServerGitSettingRepositorySshAuth {
		return v.SshAuths
	}).(GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput)
}

// The URI of the Git repository
func (o GetSpringCloudServiceConfigServerGitSettingRepositoryOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingRepository) string { return v.Uri }).(pulumi.StringOutput)
}

type GetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput struct{ *pulumi.OutputState }

func (GetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpringCloudServiceConfigServerGitSettingRepository)(nil)).Elem()
}

func (o GetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput) ToGetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput() GetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput) ToGetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput) Index(i pulumi.IntInput) GetSpringCloudServiceConfigServerGitSettingRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSpringCloudServiceConfigServerGitSettingRepository {
		return vs[0].([]GetSpringCloudServiceConfigServerGitSettingRepository)[vs[1].(int)]
	}).(GetSpringCloudServiceConfigServerGitSettingRepositoryOutput)
}

type GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth struct {
	// The password used to access the HTTP Basic Authentication Git repository server.
	Password string `pulumi:"password"`
	// The username used to access the HTTP Basic Authentication Git repository server.
	Username string `pulumi:"username"`
}

// GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthInput is an input type that accepts GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs and GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput values.
// You can construct a concrete instance of `GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthInput` via:
//
//	GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs{...}
type GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthInput interface {
	pulumi.Input

	ToGetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput() GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput
	ToGetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutputWithContext(context.Context) GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput
}

type GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs struct {
	// The password used to access the HTTP Basic Authentication Git repository server.
	Password pulumi.StringInput `pulumi:"password"`
	// The username used to access the HTTP Basic Authentication Git repository server.
	Username pulumi.StringInput `pulumi:"username"`
}

func (GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth)(nil)).Elem()
}

func (i GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs) ToGetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput() GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput {
	return i.ToGetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutputWithContext(context.Background())
}

func (i GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs) ToGetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput)
}

// GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayInput is an input type that accepts GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArray and GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput values.
// You can construct a concrete instance of `GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayInput` via:
//
//	GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArray{ GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs{...} }
type GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayInput interface {
	pulumi.Input

	ToGetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput() GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput
	ToGetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutputWithContext(context.Context) GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput
}

type GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArray []GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthInput

func (GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth)(nil)).Elem()
}

func (i GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArray) ToGetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput() GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput {
	return i.ToGetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutputWithContext(context.Background())
}

func (i GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArray) ToGetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput)
}

type GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput struct{ *pulumi.OutputState }

func (GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth)(nil)).Elem()
}

func (o GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput) ToGetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput() GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput) ToGetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput {
	return o
}

// The password used to access the HTTP Basic Authentication Git repository server.
func (o GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth) string { return v.Password }).(pulumi.StringOutput)
}

// The username used to access the HTTP Basic Authentication Git repository server.
func (o GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth) string { return v.Username }).(pulumi.StringOutput)
}

type GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput struct{ *pulumi.OutputState }

func (GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth)(nil)).Elem()
}

func (o GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput) ToGetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput() GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput) ToGetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput) Index(i pulumi.IntInput) GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth {
		return vs[0].([]GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth)[vs[1].(int)]
	}).(GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput)
}

type GetSpringCloudServiceConfigServerGitSettingRepositorySshAuth struct {
	// The host key of the Git repository server.
	HostKey string `pulumi:"hostKey"`
	// The host key algorithm.
	HostKeyAlgorithm string `pulumi:"hostKeyAlgorithm"`
	// The SSH private key to access the Git repository, needed when the URI starts with `git@` or `ssh://`.
	PrivateKey string `pulumi:"privateKey"`
	// Indicates whether the Config Server instance will fail to start if the hostKey does not match.
	StrictHostKeyCheckingEnabled bool `pulumi:"strictHostKeyCheckingEnabled"`
}

// GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthInput is an input type that accepts GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs and GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput values.
// You can construct a concrete instance of `GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthInput` via:
//
//	GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs{...}
type GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthInput interface {
	pulumi.Input

	ToGetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput() GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput
	ToGetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutputWithContext(context.Context) GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput
}

type GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs struct {
	// The host key of the Git repository server.
	HostKey pulumi.StringInput `pulumi:"hostKey"`
	// The host key algorithm.
	HostKeyAlgorithm pulumi.StringInput `pulumi:"hostKeyAlgorithm"`
	// The SSH private key to access the Git repository, needed when the URI starts with `git@` or `ssh://`.
	PrivateKey pulumi.StringInput `pulumi:"privateKey"`
	// Indicates whether the Config Server instance will fail to start if the hostKey does not match.
	StrictHostKeyCheckingEnabled pulumi.BoolInput `pulumi:"strictHostKeyCheckingEnabled"`
}

func (GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSettingRepositorySshAuth)(nil)).Elem()
}

func (i GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs) ToGetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput() GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput {
	return i.ToGetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutputWithContext(context.Background())
}

func (i GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs) ToGetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput)
}

// GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayInput is an input type that accepts GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArray and GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput values.
// You can construct a concrete instance of `GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayInput` via:
//
//	GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArray{ GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs{...} }
type GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayInput interface {
	pulumi.Input

	ToGetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput() GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput
	ToGetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutputWithContext(context.Context) GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput
}

type GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArray []GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthInput

func (GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpringCloudServiceConfigServerGitSettingRepositorySshAuth)(nil)).Elem()
}

func (i GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArray) ToGetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput() GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput {
	return i.ToGetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutputWithContext(context.Background())
}

func (i GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArray) ToGetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput)
}

type GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput struct{ *pulumi.OutputState }

func (GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSettingRepositorySshAuth)(nil)).Elem()
}

func (o GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput) ToGetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput() GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput) ToGetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput {
	return o
}

// The host key of the Git repository server.
func (o GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput) HostKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingRepositorySshAuth) string { return v.HostKey }).(pulumi.StringOutput)
}

// The host key algorithm.
func (o GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput) HostKeyAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingRepositorySshAuth) string { return v.HostKeyAlgorithm }).(pulumi.StringOutput)
}

// The SSH private key to access the Git repository, needed when the URI starts with `git@` or `ssh://`.
func (o GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingRepositorySshAuth) string { return v.PrivateKey }).(pulumi.StringOutput)
}

// Indicates whether the Config Server instance will fail to start if the hostKey does not match.
func (o GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput) StrictHostKeyCheckingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingRepositorySshAuth) bool {
		return v.StrictHostKeyCheckingEnabled
	}).(pulumi.BoolOutput)
}

type GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput struct{ *pulumi.OutputState }

func (GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpringCloudServiceConfigServerGitSettingRepositorySshAuth)(nil)).Elem()
}

func (o GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput) ToGetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput() GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput) ToGetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput) Index(i pulumi.IntInput) GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSpringCloudServiceConfigServerGitSettingRepositorySshAuth {
		return vs[0].([]GetSpringCloudServiceConfigServerGitSettingRepositorySshAuth)[vs[1].(int)]
	}).(GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput)
}

type GetSpringCloudServiceConfigServerGitSettingSshAuth struct {
	// The host key of the Git repository server.
	HostKey string `pulumi:"hostKey"`
	// The host key algorithm.
	HostKeyAlgorithm string `pulumi:"hostKeyAlgorithm"`
	// The SSH private key to access the Git repository, needed when the URI starts with `git@` or `ssh://`.
	PrivateKey string `pulumi:"privateKey"`
	// Indicates whether the Config Server instance will fail to start if the hostKey does not match.
	StrictHostKeyCheckingEnabled bool `pulumi:"strictHostKeyCheckingEnabled"`
}

// GetSpringCloudServiceConfigServerGitSettingSshAuthInput is an input type that accepts GetSpringCloudServiceConfigServerGitSettingSshAuthArgs and GetSpringCloudServiceConfigServerGitSettingSshAuthOutput values.
// You can construct a concrete instance of `GetSpringCloudServiceConfigServerGitSettingSshAuthInput` via:
//
//	GetSpringCloudServiceConfigServerGitSettingSshAuthArgs{...}
type GetSpringCloudServiceConfigServerGitSettingSshAuthInput interface {
	pulumi.Input

	ToGetSpringCloudServiceConfigServerGitSettingSshAuthOutput() GetSpringCloudServiceConfigServerGitSettingSshAuthOutput
	ToGetSpringCloudServiceConfigServerGitSettingSshAuthOutputWithContext(context.Context) GetSpringCloudServiceConfigServerGitSettingSshAuthOutput
}

type GetSpringCloudServiceConfigServerGitSettingSshAuthArgs struct {
	// The host key of the Git repository server.
	HostKey pulumi.StringInput `pulumi:"hostKey"`
	// The host key algorithm.
	HostKeyAlgorithm pulumi.StringInput `pulumi:"hostKeyAlgorithm"`
	// The SSH private key to access the Git repository, needed when the URI starts with `git@` or `ssh://`.
	PrivateKey pulumi.StringInput `pulumi:"privateKey"`
	// Indicates whether the Config Server instance will fail to start if the hostKey does not match.
	StrictHostKeyCheckingEnabled pulumi.BoolInput `pulumi:"strictHostKeyCheckingEnabled"`
}

func (GetSpringCloudServiceConfigServerGitSettingSshAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSettingSshAuth)(nil)).Elem()
}

func (i GetSpringCloudServiceConfigServerGitSettingSshAuthArgs) ToGetSpringCloudServiceConfigServerGitSettingSshAuthOutput() GetSpringCloudServiceConfigServerGitSettingSshAuthOutput {
	return i.ToGetSpringCloudServiceConfigServerGitSettingSshAuthOutputWithContext(context.Background())
}

func (i GetSpringCloudServiceConfigServerGitSettingSshAuthArgs) ToGetSpringCloudServiceConfigServerGitSettingSshAuthOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingSshAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpringCloudServiceConfigServerGitSettingSshAuthOutput)
}

// GetSpringCloudServiceConfigServerGitSettingSshAuthArrayInput is an input type that accepts GetSpringCloudServiceConfigServerGitSettingSshAuthArray and GetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput values.
// You can construct a concrete instance of `GetSpringCloudServiceConfigServerGitSettingSshAuthArrayInput` via:
//
//	GetSpringCloudServiceConfigServerGitSettingSshAuthArray{ GetSpringCloudServiceConfigServerGitSettingSshAuthArgs{...} }
type GetSpringCloudServiceConfigServerGitSettingSshAuthArrayInput interface {
	pulumi.Input

	ToGetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput() GetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput
	ToGetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutputWithContext(context.Context) GetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput
}

type GetSpringCloudServiceConfigServerGitSettingSshAuthArray []GetSpringCloudServiceConfigServerGitSettingSshAuthInput

func (GetSpringCloudServiceConfigServerGitSettingSshAuthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpringCloudServiceConfigServerGitSettingSshAuth)(nil)).Elem()
}

func (i GetSpringCloudServiceConfigServerGitSettingSshAuthArray) ToGetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput() GetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput {
	return i.ToGetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutputWithContext(context.Background())
}

func (i GetSpringCloudServiceConfigServerGitSettingSshAuthArray) ToGetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput)
}

type GetSpringCloudServiceConfigServerGitSettingSshAuthOutput struct{ *pulumi.OutputState }

func (GetSpringCloudServiceConfigServerGitSettingSshAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSettingSshAuth)(nil)).Elem()
}

func (o GetSpringCloudServiceConfigServerGitSettingSshAuthOutput) ToGetSpringCloudServiceConfigServerGitSettingSshAuthOutput() GetSpringCloudServiceConfigServerGitSettingSshAuthOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingSshAuthOutput) ToGetSpringCloudServiceConfigServerGitSettingSshAuthOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingSshAuthOutput {
	return o
}

// The host key of the Git repository server.
func (o GetSpringCloudServiceConfigServerGitSettingSshAuthOutput) HostKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingSshAuth) string { return v.HostKey }).(pulumi.StringOutput)
}

// The host key algorithm.
func (o GetSpringCloudServiceConfigServerGitSettingSshAuthOutput) HostKeyAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingSshAuth) string { return v.HostKeyAlgorithm }).(pulumi.StringOutput)
}

// The SSH private key to access the Git repository, needed when the URI starts with `git@` or `ssh://`.
func (o GetSpringCloudServiceConfigServerGitSettingSshAuthOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingSshAuth) string { return v.PrivateKey }).(pulumi.StringOutput)
}

// Indicates whether the Config Server instance will fail to start if the hostKey does not match.
func (o GetSpringCloudServiceConfigServerGitSettingSshAuthOutput) StrictHostKeyCheckingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingSshAuth) bool { return v.StrictHostKeyCheckingEnabled }).(pulumi.BoolOutput)
}

type GetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput struct{ *pulumi.OutputState }

func (GetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpringCloudServiceConfigServerGitSettingSshAuth)(nil)).Elem()
}

func (o GetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput) ToGetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput() GetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput) ToGetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput) Index(i pulumi.IntInput) GetSpringCloudServiceConfigServerGitSettingSshAuthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSpringCloudServiceConfigServerGitSettingSshAuth {
		return vs[0].([]GetSpringCloudServiceConfigServerGitSettingSshAuth)[vs[1].(int)]
	}).(GetSpringCloudServiceConfigServerGitSettingSshAuthOutput)
}

type GetSpringCloudServiceRequiredNetworkTrafficRule struct {
	// The direction of required traffic. Possible values are `Inbound`, `Outbound`.
	Direction string `pulumi:"direction"`
	// The FQDN list of required traffic.
	Fqdns []string `pulumi:"fqdns"`
	// The IP list of required traffic.
	IpAddresses []string `pulumi:"ipAddresses"`
	// The port of required traffic.
	Port int `pulumi:"port"`
	// The protocol of required traffic.
	Protocol string `pulumi:"protocol"`
}

// GetSpringCloudServiceRequiredNetworkTrafficRuleInput is an input type that accepts GetSpringCloudServiceRequiredNetworkTrafficRuleArgs and GetSpringCloudServiceRequiredNetworkTrafficRuleOutput values.
// You can construct a concrete instance of `GetSpringCloudServiceRequiredNetworkTrafficRuleInput` via:
//
//	GetSpringCloudServiceRequiredNetworkTrafficRuleArgs{...}
type GetSpringCloudServiceRequiredNetworkTrafficRuleInput interface {
	pulumi.Input

	ToGetSpringCloudServiceRequiredNetworkTrafficRuleOutput() GetSpringCloudServiceRequiredNetworkTrafficRuleOutput
	ToGetSpringCloudServiceRequiredNetworkTrafficRuleOutputWithContext(context.Context) GetSpringCloudServiceRequiredNetworkTrafficRuleOutput
}

type GetSpringCloudServiceRequiredNetworkTrafficRuleArgs struct {
	// The direction of required traffic. Possible values are `Inbound`, `Outbound`.
	Direction pulumi.StringInput `pulumi:"direction"`
	// The FQDN list of required traffic.
	Fqdns pulumi.StringArrayInput `pulumi:"fqdns"`
	// The IP list of required traffic.
	IpAddresses pulumi.StringArrayInput `pulumi:"ipAddresses"`
	// The port of required traffic.
	Port pulumi.IntInput `pulumi:"port"`
	// The protocol of required traffic.
	Protocol pulumi.StringInput `pulumi:"protocol"`
}

func (GetSpringCloudServiceRequiredNetworkTrafficRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpringCloudServiceRequiredNetworkTrafficRule)(nil)).Elem()
}

func (i GetSpringCloudServiceRequiredNetworkTrafficRuleArgs) ToGetSpringCloudServiceRequiredNetworkTrafficRuleOutput() GetSpringCloudServiceRequiredNetworkTrafficRuleOutput {
	return i.ToGetSpringCloudServiceRequiredNetworkTrafficRuleOutputWithContext(context.Background())
}

func (i GetSpringCloudServiceRequiredNetworkTrafficRuleArgs) ToGetSpringCloudServiceRequiredNetworkTrafficRuleOutputWithContext(ctx context.Context) GetSpringCloudServiceRequiredNetworkTrafficRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpringCloudServiceRequiredNetworkTrafficRuleOutput)
}

// GetSpringCloudServiceRequiredNetworkTrafficRuleArrayInput is an input type that accepts GetSpringCloudServiceRequiredNetworkTrafficRuleArray and GetSpringCloudServiceRequiredNetworkTrafficRuleArrayOutput values.
// You can construct a concrete instance of `GetSpringCloudServiceRequiredNetworkTrafficRuleArrayInput` via:
//
//	GetSpringCloudServiceRequiredNetworkTrafficRuleArray{ GetSpringCloudServiceRequiredNetworkTrafficRuleArgs{...} }
type GetSpringCloudServiceRequiredNetworkTrafficRuleArrayInput interface {
	pulumi.Input

	ToGetSpringCloudServiceRequiredNetworkTrafficRuleArrayOutput() GetSpringCloudServiceRequiredNetworkTrafficRuleArrayOutput
	ToGetSpringCloudServiceRequiredNetworkTrafficRuleArrayOutputWithContext(context.Context) GetSpringCloudServiceRequiredNetworkTrafficRuleArrayOutput
}

type GetSpringCloudServiceRequiredNetworkTrafficRuleArray []GetSpringCloudServiceRequiredNetworkTrafficRuleInput

func (GetSpringCloudServiceRequiredNetworkTrafficRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpringCloudServiceRequiredNetworkTrafficRule)(nil)).Elem()
}

func (i GetSpringCloudServiceRequiredNetworkTrafficRuleArray) ToGetSpringCloudServiceRequiredNetworkTrafficRuleArrayOutput() GetSpringCloudServiceRequiredNetworkTrafficRuleArrayOutput {
	return i.ToGetSpringCloudServiceRequiredNetworkTrafficRuleArrayOutputWithContext(context.Background())
}

func (i GetSpringCloudServiceRequiredNetworkTrafficRuleArray) ToGetSpringCloudServiceRequiredNetworkTrafficRuleArrayOutputWithContext(ctx context.Context) GetSpringCloudServiceRequiredNetworkTrafficRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpringCloudServiceRequiredNetworkTrafficRuleArrayOutput)
}

type GetSpringCloudServiceRequiredNetworkTrafficRuleOutput struct{ *pulumi.OutputState }

func (GetSpringCloudServiceRequiredNetworkTrafficRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpringCloudServiceRequiredNetworkTrafficRule)(nil)).Elem()
}

func (o GetSpringCloudServiceRequiredNetworkTrafficRuleOutput) ToGetSpringCloudServiceRequiredNetworkTrafficRuleOutput() GetSpringCloudServiceRequiredNetworkTrafficRuleOutput {
	return o
}

func (o GetSpringCloudServiceRequiredNetworkTrafficRuleOutput) ToGetSpringCloudServiceRequiredNetworkTrafficRuleOutputWithContext(ctx context.Context) GetSpringCloudServiceRequiredNetworkTrafficRuleOutput {
	return o
}

// The direction of required traffic. Possible values are `Inbound`, `Outbound`.
func (o GetSpringCloudServiceRequiredNetworkTrafficRuleOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudServiceRequiredNetworkTrafficRule) string { return v.Direction }).(pulumi.StringOutput)
}

// The FQDN list of required traffic.
func (o GetSpringCloudServiceRequiredNetworkTrafficRuleOutput) Fqdns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSpringCloudServiceRequiredNetworkTrafficRule) []string { return v.Fqdns }).(pulumi.StringArrayOutput)
}

// The IP list of required traffic.
func (o GetSpringCloudServiceRequiredNetworkTrafficRuleOutput) IpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSpringCloudServiceRequiredNetworkTrafficRule) []string { return v.IpAddresses }).(pulumi.StringArrayOutput)
}

// The port of required traffic.
func (o GetSpringCloudServiceRequiredNetworkTrafficRuleOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetSpringCloudServiceRequiredNetworkTrafficRule) int { return v.Port }).(pulumi.IntOutput)
}

// The protocol of required traffic.
func (o GetSpringCloudServiceRequiredNetworkTrafficRuleOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudServiceRequiredNetworkTrafficRule) string { return v.Protocol }).(pulumi.StringOutput)
}

type GetSpringCloudServiceRequiredNetworkTrafficRuleArrayOutput struct{ *pulumi.OutputState }

func (GetSpringCloudServiceRequiredNetworkTrafficRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpringCloudServiceRequiredNetworkTrafficRule)(nil)).Elem()
}

func (o GetSpringCloudServiceRequiredNetworkTrafficRuleArrayOutput) ToGetSpringCloudServiceRequiredNetworkTrafficRuleArrayOutput() GetSpringCloudServiceRequiredNetworkTrafficRuleArrayOutput {
	return o
}

func (o GetSpringCloudServiceRequiredNetworkTrafficRuleArrayOutput) ToGetSpringCloudServiceRequiredNetworkTrafficRuleArrayOutputWithContext(ctx context.Context) GetSpringCloudServiceRequiredNetworkTrafficRuleArrayOutput {
	return o
}

func (o GetSpringCloudServiceRequiredNetworkTrafficRuleArrayOutput) Index(i pulumi.IntInput) GetSpringCloudServiceRequiredNetworkTrafficRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSpringCloudServiceRequiredNetworkTrafficRule {
		return vs[0].([]GetSpringCloudServiceRequiredNetworkTrafficRule)[vs[1].(int)]
	}).(GetSpringCloudServiceRequiredNetworkTrafficRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudApiPortalSsoInput)(nil)).Elem(), SpringCloudApiPortalSsoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudApiPortalSsoPtrInput)(nil)).Elem(), SpringCloudApiPortalSsoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudAppCustomPersistentDiskInput)(nil)).Elem(), SpringCloudAppCustomPersistentDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudAppCustomPersistentDiskArrayInput)(nil)).Elem(), SpringCloudAppCustomPersistentDiskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudAppIdentityInput)(nil)).Elem(), SpringCloudAppIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudAppIdentityPtrInput)(nil)).Elem(), SpringCloudAppIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudAppIngressSettingsInput)(nil)).Elem(), SpringCloudAppIngressSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudAppIngressSettingsPtrInput)(nil)).Elem(), SpringCloudAppIngressSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudAppPersistentDiskInput)(nil)).Elem(), SpringCloudAppPersistentDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudAppPersistentDiskPtrInput)(nil)).Elem(), SpringCloudAppPersistentDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudBuildDeploymentQuotaInput)(nil)).Elem(), SpringCloudBuildDeploymentQuotaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudBuildDeploymentQuotaPtrInput)(nil)).Elem(), SpringCloudBuildDeploymentQuotaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudBuildPackBindingLaunchInput)(nil)).Elem(), SpringCloudBuildPackBindingLaunchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudBuildPackBindingLaunchPtrInput)(nil)).Elem(), SpringCloudBuildPackBindingLaunchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudBuilderBuildPackGroupInput)(nil)).Elem(), SpringCloudBuilderBuildPackGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudBuilderBuildPackGroupArrayInput)(nil)).Elem(), SpringCloudBuilderBuildPackGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudBuilderStackInput)(nil)).Elem(), SpringCloudBuilderStackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudBuilderStackPtrInput)(nil)).Elem(), SpringCloudBuilderStackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudConfigurationServiceRepositoryInput)(nil)).Elem(), SpringCloudConfigurationServiceRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudConfigurationServiceRepositoryArrayInput)(nil)).Elem(), SpringCloudConfigurationServiceRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudConnectionAuthenticationInput)(nil)).Elem(), SpringCloudConnectionAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudConnectionAuthenticationPtrInput)(nil)).Elem(), SpringCloudConnectionAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudConnectionSecretStoreInput)(nil)).Elem(), SpringCloudConnectionSecretStoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudConnectionSecretStorePtrInput)(nil)).Elem(), SpringCloudConnectionSecretStoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudContainerDeploymentQuotaInput)(nil)).Elem(), SpringCloudContainerDeploymentQuotaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudContainerDeploymentQuotaPtrInput)(nil)).Elem(), SpringCloudContainerDeploymentQuotaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudCustomizedAcceleratorGitRepositoryInput)(nil)).Elem(), SpringCloudCustomizedAcceleratorGitRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudCustomizedAcceleratorGitRepositoryPtrInput)(nil)).Elem(), SpringCloudCustomizedAcceleratorGitRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthInput)(nil)).Elem(), SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrInput)(nil)).Elem(), SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudCustomizedAcceleratorGitRepositorySshAuthInput)(nil)).Elem(), SpringCloudCustomizedAcceleratorGitRepositorySshAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrInput)(nil)).Elem(), SpringCloudCustomizedAcceleratorGitRepositorySshAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudDevToolPortalSsoInput)(nil)).Elem(), SpringCloudDevToolPortalSsoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudDevToolPortalSsoPtrInput)(nil)).Elem(), SpringCloudDevToolPortalSsoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudGatewayApiMetadataInput)(nil)).Elem(), SpringCloudGatewayApiMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudGatewayApiMetadataPtrInput)(nil)).Elem(), SpringCloudGatewayApiMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudGatewayClientAuthorizationInput)(nil)).Elem(), SpringCloudGatewayClientAuthorizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudGatewayClientAuthorizationPtrInput)(nil)).Elem(), SpringCloudGatewayClientAuthorizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudGatewayCorsInput)(nil)).Elem(), SpringCloudGatewayCorsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudGatewayCorsPtrInput)(nil)).Elem(), SpringCloudGatewayCorsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudGatewayQuotaInput)(nil)).Elem(), SpringCloudGatewayQuotaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudGatewayQuotaPtrInput)(nil)).Elem(), SpringCloudGatewayQuotaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudGatewayRouteConfigOpenApiInput)(nil)).Elem(), SpringCloudGatewayRouteConfigOpenApiArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudGatewayRouteConfigOpenApiPtrInput)(nil)).Elem(), SpringCloudGatewayRouteConfigOpenApiArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudGatewayRouteConfigRouteInput)(nil)).Elem(), SpringCloudGatewayRouteConfigRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudGatewayRouteConfigRouteArrayInput)(nil)).Elem(), SpringCloudGatewayRouteConfigRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudGatewaySsoInput)(nil)).Elem(), SpringCloudGatewaySsoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudGatewaySsoPtrInput)(nil)).Elem(), SpringCloudGatewaySsoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudJavaDeploymentQuotaInput)(nil)).Elem(), SpringCloudJavaDeploymentQuotaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudJavaDeploymentQuotaPtrInput)(nil)).Elem(), SpringCloudJavaDeploymentQuotaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudServiceConfigServerGitSettingInput)(nil)).Elem(), SpringCloudServiceConfigServerGitSettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudServiceConfigServerGitSettingPtrInput)(nil)).Elem(), SpringCloudServiceConfigServerGitSettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudServiceConfigServerGitSettingHttpBasicAuthInput)(nil)).Elem(), SpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrInput)(nil)).Elem(), SpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudServiceConfigServerGitSettingRepositoryInput)(nil)).Elem(), SpringCloudServiceConfigServerGitSettingRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudServiceConfigServerGitSettingRepositoryArrayInput)(nil)).Elem(), SpringCloudServiceConfigServerGitSettingRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthInput)(nil)).Elem(), SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrInput)(nil)).Elem(), SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudServiceConfigServerGitSettingRepositorySshAuthInput)(nil)).Elem(), SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrInput)(nil)).Elem(), SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudServiceConfigServerGitSettingSshAuthInput)(nil)).Elem(), SpringCloudServiceConfigServerGitSettingSshAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudServiceConfigServerGitSettingSshAuthPtrInput)(nil)).Elem(), SpringCloudServiceConfigServerGitSettingSshAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudServiceContainerRegistryInput)(nil)).Elem(), SpringCloudServiceContainerRegistryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudServiceContainerRegistryArrayInput)(nil)).Elem(), SpringCloudServiceContainerRegistryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudServiceDefaultBuildServiceInput)(nil)).Elem(), SpringCloudServiceDefaultBuildServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudServiceDefaultBuildServicePtrInput)(nil)).Elem(), SpringCloudServiceDefaultBuildServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudServiceMarketplaceInput)(nil)).Elem(), SpringCloudServiceMarketplaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudServiceMarketplacePtrInput)(nil)).Elem(), SpringCloudServiceMarketplaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudServiceNetworkInput)(nil)).Elem(), SpringCloudServiceNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudServiceNetworkPtrInput)(nil)).Elem(), SpringCloudServiceNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudServiceRequiredNetworkTrafficRuleInput)(nil)).Elem(), SpringCloudServiceRequiredNetworkTrafficRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudServiceRequiredNetworkTrafficRuleArrayInput)(nil)).Elem(), SpringCloudServiceRequiredNetworkTrafficRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudServiceTraceInput)(nil)).Elem(), SpringCloudServiceTraceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpringCloudServiceTracePtrInput)(nil)).Elem(), SpringCloudServiceTraceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSpringCloudAppIdentityInput)(nil)).Elem(), GetSpringCloudAppIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSpringCloudAppIdentityArrayInput)(nil)).Elem(), GetSpringCloudAppIdentityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSpringCloudAppPersistentDiskInput)(nil)).Elem(), GetSpringCloudAppPersistentDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSpringCloudAppPersistentDiskArrayInput)(nil)).Elem(), GetSpringCloudAppPersistentDiskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSettingInput)(nil)).Elem(), GetSpringCloudServiceConfigServerGitSettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSettingArrayInput)(nil)).Elem(), GetSpringCloudServiceConfigServerGitSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthInput)(nil)).Elem(), GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayInput)(nil)).Elem(), GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSettingRepositoryInput)(nil)).Elem(), GetSpringCloudServiceConfigServerGitSettingRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSettingRepositoryArrayInput)(nil)).Elem(), GetSpringCloudServiceConfigServerGitSettingRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthInput)(nil)).Elem(), GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayInput)(nil)).Elem(), GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthInput)(nil)).Elem(), GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayInput)(nil)).Elem(), GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSettingSshAuthInput)(nil)).Elem(), GetSpringCloudServiceConfigServerGitSettingSshAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSettingSshAuthArrayInput)(nil)).Elem(), GetSpringCloudServiceConfigServerGitSettingSshAuthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSpringCloudServiceRequiredNetworkTrafficRuleInput)(nil)).Elem(), GetSpringCloudServiceRequiredNetworkTrafficRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSpringCloudServiceRequiredNetworkTrafficRuleArrayInput)(nil)).Elem(), GetSpringCloudServiceRequiredNetworkTrafficRuleArray{})
	pulumi.RegisterOutputType(SpringCloudApiPortalSsoOutput{})
	pulumi.RegisterOutputType(SpringCloudApiPortalSsoPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudAppCustomPersistentDiskOutput{})
	pulumi.RegisterOutputType(SpringCloudAppCustomPersistentDiskArrayOutput{})
	pulumi.RegisterOutputType(SpringCloudAppIdentityOutput{})
	pulumi.RegisterOutputType(SpringCloudAppIdentityPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudAppIngressSettingsOutput{})
	pulumi.RegisterOutputType(SpringCloudAppIngressSettingsPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudAppPersistentDiskOutput{})
	pulumi.RegisterOutputType(SpringCloudAppPersistentDiskPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudBuildDeploymentQuotaOutput{})
	pulumi.RegisterOutputType(SpringCloudBuildDeploymentQuotaPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudBuildPackBindingLaunchOutput{})
	pulumi.RegisterOutputType(SpringCloudBuildPackBindingLaunchPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudBuilderBuildPackGroupOutput{})
	pulumi.RegisterOutputType(SpringCloudBuilderBuildPackGroupArrayOutput{})
	pulumi.RegisterOutputType(SpringCloudBuilderStackOutput{})
	pulumi.RegisterOutputType(SpringCloudBuilderStackPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudConfigurationServiceRepositoryOutput{})
	pulumi.RegisterOutputType(SpringCloudConfigurationServiceRepositoryArrayOutput{})
	pulumi.RegisterOutputType(SpringCloudConnectionAuthenticationOutput{})
	pulumi.RegisterOutputType(SpringCloudConnectionAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudConnectionSecretStoreOutput{})
	pulumi.RegisterOutputType(SpringCloudConnectionSecretStorePtrOutput{})
	pulumi.RegisterOutputType(SpringCloudContainerDeploymentQuotaOutput{})
	pulumi.RegisterOutputType(SpringCloudContainerDeploymentQuotaPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudCustomizedAcceleratorGitRepositoryOutput{})
	pulumi.RegisterOutputType(SpringCloudCustomizedAcceleratorGitRepositoryPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthOutput{})
	pulumi.RegisterOutputType(SpringCloudCustomizedAcceleratorGitRepositoryBasicAuthPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudCustomizedAcceleratorGitRepositorySshAuthOutput{})
	pulumi.RegisterOutputType(SpringCloudCustomizedAcceleratorGitRepositorySshAuthPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudDevToolPortalSsoOutput{})
	pulumi.RegisterOutputType(SpringCloudDevToolPortalSsoPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudGatewayApiMetadataOutput{})
	pulumi.RegisterOutputType(SpringCloudGatewayApiMetadataPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudGatewayClientAuthorizationOutput{})
	pulumi.RegisterOutputType(SpringCloudGatewayClientAuthorizationPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudGatewayCorsOutput{})
	pulumi.RegisterOutputType(SpringCloudGatewayCorsPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudGatewayQuotaOutput{})
	pulumi.RegisterOutputType(SpringCloudGatewayQuotaPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudGatewayRouteConfigOpenApiOutput{})
	pulumi.RegisterOutputType(SpringCloudGatewayRouteConfigOpenApiPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudGatewayRouteConfigRouteOutput{})
	pulumi.RegisterOutputType(SpringCloudGatewayRouteConfigRouteArrayOutput{})
	pulumi.RegisterOutputType(SpringCloudGatewaySsoOutput{})
	pulumi.RegisterOutputType(SpringCloudGatewaySsoPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudJavaDeploymentQuotaOutput{})
	pulumi.RegisterOutputType(SpringCloudJavaDeploymentQuotaPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceConfigServerGitSettingOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceConfigServerGitSettingPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceConfigServerGitSettingRepositoryOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceConfigServerGitSettingSshAuthOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceContainerRegistryOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceContainerRegistryArrayOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceDefaultBuildServiceOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceDefaultBuildServicePtrOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceMarketplaceOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceMarketplacePtrOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceNetworkOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceNetworkPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceRequiredNetworkTrafficRuleOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceRequiredNetworkTrafficRuleArrayOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceTraceOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceTracePtrOutput{})
	pulumi.RegisterOutputType(GetSpringCloudAppIdentityOutput{})
	pulumi.RegisterOutputType(GetSpringCloudAppIdentityArrayOutput{})
	pulumi.RegisterOutputType(GetSpringCloudAppPersistentDiskOutput{})
	pulumi.RegisterOutputType(GetSpringCloudAppPersistentDiskArrayOutput{})
	pulumi.RegisterOutputType(GetSpringCloudServiceConfigServerGitSettingOutput{})
	pulumi.RegisterOutputType(GetSpringCloudServiceConfigServerGitSettingArrayOutput{})
	pulumi.RegisterOutputType(GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput{})
	pulumi.RegisterOutputType(GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput{})
	pulumi.RegisterOutputType(GetSpringCloudServiceConfigServerGitSettingRepositoryOutput{})
	pulumi.RegisterOutputType(GetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput{})
	pulumi.RegisterOutputType(GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput{})
	pulumi.RegisterOutputType(GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput{})
	pulumi.RegisterOutputType(GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput{})
	pulumi.RegisterOutputType(GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput{})
	pulumi.RegisterOutputType(GetSpringCloudServiceConfigServerGitSettingSshAuthOutput{})
	pulumi.RegisterOutputType(GetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput{})
	pulumi.RegisterOutputType(GetSpringCloudServiceRequiredNetworkTrafficRuleOutput{})
	pulumi.RegisterOutputType(GetSpringCloudServiceRequiredNetworkTrafficRuleArrayOutput{})
}
