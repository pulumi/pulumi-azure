// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appplatform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SpringCloudAppIdentity struct {
	// The Principal ID for the Service Principal associated with the Managed Service Identity of this Spring Cloud Application.
	PrincipalId *string `pulumi:"principalId"`
	// The Tenant ID for the Service Principal associated with the Managed Service Identity of this Spring Cloud Application.
	TenantId *string `pulumi:"tenantId"`
	// Specifies the identity type of the Spring Cloud Application. Possible value is `SystemAssigned`.
	Type *string `pulumi:"type"`
}

// SpringCloudAppIdentityInput is an input type that accepts SpringCloudAppIdentityArgs and SpringCloudAppIdentityOutput values.
// You can construct a concrete instance of `SpringCloudAppIdentityInput` via:
//
//          SpringCloudAppIdentityArgs{...}
type SpringCloudAppIdentityInput interface {
	pulumi.Input

	ToSpringCloudAppIdentityOutput() SpringCloudAppIdentityOutput
	ToSpringCloudAppIdentityOutputWithContext(context.Context) SpringCloudAppIdentityOutput
}

type SpringCloudAppIdentityArgs struct {
	// The Principal ID for the Service Principal associated with the Managed Service Identity of this Spring Cloud Application.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The Tenant ID for the Service Principal associated with the Managed Service Identity of this Spring Cloud Application.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// Specifies the identity type of the Spring Cloud Application. Possible value is `SystemAssigned`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (SpringCloudAppIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudAppIdentity)(nil)).Elem()
}

func (i SpringCloudAppIdentityArgs) ToSpringCloudAppIdentityOutput() SpringCloudAppIdentityOutput {
	return i.ToSpringCloudAppIdentityOutputWithContext(context.Background())
}

func (i SpringCloudAppIdentityArgs) ToSpringCloudAppIdentityOutputWithContext(ctx context.Context) SpringCloudAppIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudAppIdentityOutput)
}

func (i SpringCloudAppIdentityArgs) ToSpringCloudAppIdentityPtrOutput() SpringCloudAppIdentityPtrOutput {
	return i.ToSpringCloudAppIdentityPtrOutputWithContext(context.Background())
}

func (i SpringCloudAppIdentityArgs) ToSpringCloudAppIdentityPtrOutputWithContext(ctx context.Context) SpringCloudAppIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudAppIdentityOutput).ToSpringCloudAppIdentityPtrOutputWithContext(ctx)
}

// SpringCloudAppIdentityPtrInput is an input type that accepts SpringCloudAppIdentityArgs, SpringCloudAppIdentityPtr and SpringCloudAppIdentityPtrOutput values.
// You can construct a concrete instance of `SpringCloudAppIdentityPtrInput` via:
//
//          SpringCloudAppIdentityArgs{...}
//
//  or:
//
//          nil
type SpringCloudAppIdentityPtrInput interface {
	pulumi.Input

	ToSpringCloudAppIdentityPtrOutput() SpringCloudAppIdentityPtrOutput
	ToSpringCloudAppIdentityPtrOutputWithContext(context.Context) SpringCloudAppIdentityPtrOutput
}

type springCloudAppIdentityPtrType SpringCloudAppIdentityArgs

func SpringCloudAppIdentityPtr(v *SpringCloudAppIdentityArgs) SpringCloudAppIdentityPtrInput {
	return (*springCloudAppIdentityPtrType)(v)
}

func (*springCloudAppIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudAppIdentity)(nil)).Elem()
}

func (i *springCloudAppIdentityPtrType) ToSpringCloudAppIdentityPtrOutput() SpringCloudAppIdentityPtrOutput {
	return i.ToSpringCloudAppIdentityPtrOutputWithContext(context.Background())
}

func (i *springCloudAppIdentityPtrType) ToSpringCloudAppIdentityPtrOutputWithContext(ctx context.Context) SpringCloudAppIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudAppIdentityPtrOutput)
}

type SpringCloudAppIdentityOutput struct{ *pulumi.OutputState }

func (SpringCloudAppIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudAppIdentity)(nil)).Elem()
}

func (o SpringCloudAppIdentityOutput) ToSpringCloudAppIdentityOutput() SpringCloudAppIdentityOutput {
	return o
}

func (o SpringCloudAppIdentityOutput) ToSpringCloudAppIdentityOutputWithContext(ctx context.Context) SpringCloudAppIdentityOutput {
	return o
}

func (o SpringCloudAppIdentityOutput) ToSpringCloudAppIdentityPtrOutput() SpringCloudAppIdentityPtrOutput {
	return o.ToSpringCloudAppIdentityPtrOutputWithContext(context.Background())
}

func (o SpringCloudAppIdentityOutput) ToSpringCloudAppIdentityPtrOutputWithContext(ctx context.Context) SpringCloudAppIdentityPtrOutput {
	return o.ApplyT(func(v SpringCloudAppIdentity) *SpringCloudAppIdentity {
		return &v
	}).(SpringCloudAppIdentityPtrOutput)
}

// The Principal ID for the Service Principal associated with the Managed Service Identity of this Spring Cloud Application.
func (o SpringCloudAppIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudAppIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The Tenant ID for the Service Principal associated with the Managed Service Identity of this Spring Cloud Application.
func (o SpringCloudAppIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudAppIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Specifies the identity type of the Spring Cloud Application. Possible value is `SystemAssigned`.
func (o SpringCloudAppIdentityOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudAppIdentity) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type SpringCloudAppIdentityPtrOutput struct{ *pulumi.OutputState }

func (SpringCloudAppIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudAppIdentity)(nil)).Elem()
}

func (o SpringCloudAppIdentityPtrOutput) ToSpringCloudAppIdentityPtrOutput() SpringCloudAppIdentityPtrOutput {
	return o
}

func (o SpringCloudAppIdentityPtrOutput) ToSpringCloudAppIdentityPtrOutputWithContext(ctx context.Context) SpringCloudAppIdentityPtrOutput {
	return o
}

func (o SpringCloudAppIdentityPtrOutput) Elem() SpringCloudAppIdentityOutput {
	return o.ApplyT(func(v *SpringCloudAppIdentity) SpringCloudAppIdentity { return *v }).(SpringCloudAppIdentityOutput)
}

// The Principal ID for the Service Principal associated with the Managed Service Identity of this Spring Cloud Application.
func (o SpringCloudAppIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudAppIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The Tenant ID for the Service Principal associated with the Managed Service Identity of this Spring Cloud Application.
func (o SpringCloudAppIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudAppIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Specifies the identity type of the Spring Cloud Application. Possible value is `SystemAssigned`.
func (o SpringCloudAppIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudAppIdentity) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type SpringCloudAppPersistentDisk struct {
	// Specifies the mount path of the persistent disk. Defaults to `/persistent`.
	MountPath *string `pulumi:"mountPath"`
	// Specifies the size of the persistent disk in GB. Possible values are between `0` and `50`.
	SizeInGb int `pulumi:"sizeInGb"`
}

// SpringCloudAppPersistentDiskInput is an input type that accepts SpringCloudAppPersistentDiskArgs and SpringCloudAppPersistentDiskOutput values.
// You can construct a concrete instance of `SpringCloudAppPersistentDiskInput` via:
//
//          SpringCloudAppPersistentDiskArgs{...}
type SpringCloudAppPersistentDiskInput interface {
	pulumi.Input

	ToSpringCloudAppPersistentDiskOutput() SpringCloudAppPersistentDiskOutput
	ToSpringCloudAppPersistentDiskOutputWithContext(context.Context) SpringCloudAppPersistentDiskOutput
}

type SpringCloudAppPersistentDiskArgs struct {
	// Specifies the mount path of the persistent disk. Defaults to `/persistent`.
	MountPath pulumi.StringPtrInput `pulumi:"mountPath"`
	// Specifies the size of the persistent disk in GB. Possible values are between `0` and `50`.
	SizeInGb pulumi.IntInput `pulumi:"sizeInGb"`
}

func (SpringCloudAppPersistentDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudAppPersistentDisk)(nil)).Elem()
}

func (i SpringCloudAppPersistentDiskArgs) ToSpringCloudAppPersistentDiskOutput() SpringCloudAppPersistentDiskOutput {
	return i.ToSpringCloudAppPersistentDiskOutputWithContext(context.Background())
}

func (i SpringCloudAppPersistentDiskArgs) ToSpringCloudAppPersistentDiskOutputWithContext(ctx context.Context) SpringCloudAppPersistentDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudAppPersistentDiskOutput)
}

func (i SpringCloudAppPersistentDiskArgs) ToSpringCloudAppPersistentDiskPtrOutput() SpringCloudAppPersistentDiskPtrOutput {
	return i.ToSpringCloudAppPersistentDiskPtrOutputWithContext(context.Background())
}

func (i SpringCloudAppPersistentDiskArgs) ToSpringCloudAppPersistentDiskPtrOutputWithContext(ctx context.Context) SpringCloudAppPersistentDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudAppPersistentDiskOutput).ToSpringCloudAppPersistentDiskPtrOutputWithContext(ctx)
}

// SpringCloudAppPersistentDiskPtrInput is an input type that accepts SpringCloudAppPersistentDiskArgs, SpringCloudAppPersistentDiskPtr and SpringCloudAppPersistentDiskPtrOutput values.
// You can construct a concrete instance of `SpringCloudAppPersistentDiskPtrInput` via:
//
//          SpringCloudAppPersistentDiskArgs{...}
//
//  or:
//
//          nil
type SpringCloudAppPersistentDiskPtrInput interface {
	pulumi.Input

	ToSpringCloudAppPersistentDiskPtrOutput() SpringCloudAppPersistentDiskPtrOutput
	ToSpringCloudAppPersistentDiskPtrOutputWithContext(context.Context) SpringCloudAppPersistentDiskPtrOutput
}

type springCloudAppPersistentDiskPtrType SpringCloudAppPersistentDiskArgs

func SpringCloudAppPersistentDiskPtr(v *SpringCloudAppPersistentDiskArgs) SpringCloudAppPersistentDiskPtrInput {
	return (*springCloudAppPersistentDiskPtrType)(v)
}

func (*springCloudAppPersistentDiskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudAppPersistentDisk)(nil)).Elem()
}

func (i *springCloudAppPersistentDiskPtrType) ToSpringCloudAppPersistentDiskPtrOutput() SpringCloudAppPersistentDiskPtrOutput {
	return i.ToSpringCloudAppPersistentDiskPtrOutputWithContext(context.Background())
}

func (i *springCloudAppPersistentDiskPtrType) ToSpringCloudAppPersistentDiskPtrOutputWithContext(ctx context.Context) SpringCloudAppPersistentDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudAppPersistentDiskPtrOutput)
}

type SpringCloudAppPersistentDiskOutput struct{ *pulumi.OutputState }

func (SpringCloudAppPersistentDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudAppPersistentDisk)(nil)).Elem()
}

func (o SpringCloudAppPersistentDiskOutput) ToSpringCloudAppPersistentDiskOutput() SpringCloudAppPersistentDiskOutput {
	return o
}

func (o SpringCloudAppPersistentDiskOutput) ToSpringCloudAppPersistentDiskOutputWithContext(ctx context.Context) SpringCloudAppPersistentDiskOutput {
	return o
}

func (o SpringCloudAppPersistentDiskOutput) ToSpringCloudAppPersistentDiskPtrOutput() SpringCloudAppPersistentDiskPtrOutput {
	return o.ToSpringCloudAppPersistentDiskPtrOutputWithContext(context.Background())
}

func (o SpringCloudAppPersistentDiskOutput) ToSpringCloudAppPersistentDiskPtrOutputWithContext(ctx context.Context) SpringCloudAppPersistentDiskPtrOutput {
	return o.ApplyT(func(v SpringCloudAppPersistentDisk) *SpringCloudAppPersistentDisk {
		return &v
	}).(SpringCloudAppPersistentDiskPtrOutput)
}

// Specifies the mount path of the persistent disk. Defaults to `/persistent`.
func (o SpringCloudAppPersistentDiskOutput) MountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudAppPersistentDisk) *string { return v.MountPath }).(pulumi.StringPtrOutput)
}

// Specifies the size of the persistent disk in GB. Possible values are between `0` and `50`.
func (o SpringCloudAppPersistentDiskOutput) SizeInGb() pulumi.IntOutput {
	return o.ApplyT(func(v SpringCloudAppPersistentDisk) int { return v.SizeInGb }).(pulumi.IntOutput)
}

type SpringCloudAppPersistentDiskPtrOutput struct{ *pulumi.OutputState }

func (SpringCloudAppPersistentDiskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudAppPersistentDisk)(nil)).Elem()
}

func (o SpringCloudAppPersistentDiskPtrOutput) ToSpringCloudAppPersistentDiskPtrOutput() SpringCloudAppPersistentDiskPtrOutput {
	return o
}

func (o SpringCloudAppPersistentDiskPtrOutput) ToSpringCloudAppPersistentDiskPtrOutputWithContext(ctx context.Context) SpringCloudAppPersistentDiskPtrOutput {
	return o
}

func (o SpringCloudAppPersistentDiskPtrOutput) Elem() SpringCloudAppPersistentDiskOutput {
	return o.ApplyT(func(v *SpringCloudAppPersistentDisk) SpringCloudAppPersistentDisk { return *v }).(SpringCloudAppPersistentDiskOutput)
}

// Specifies the mount path of the persistent disk. Defaults to `/persistent`.
func (o SpringCloudAppPersistentDiskPtrOutput) MountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudAppPersistentDisk) *string {
		if v == nil {
			return nil
		}
		return v.MountPath
	}).(pulumi.StringPtrOutput)
}

// Specifies the size of the persistent disk in GB. Possible values are between `0` and `50`.
func (o SpringCloudAppPersistentDiskPtrOutput) SizeInGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SpringCloudAppPersistentDisk) *int {
		if v == nil {
			return nil
		}
		return &v.SizeInGb
	}).(pulumi.IntPtrOutput)
}

type SpringCloudServiceConfigServerGitSetting struct {
	// A `httpBasicAuth` block as defined below.
	HttpBasicAuth *SpringCloudServiceConfigServerGitSettingHttpBasicAuth `pulumi:"httpBasicAuth"`
	// The default label of the Git repository, should be the branch name, tag name, or commit-id of the repository.
	Label *string `pulumi:"label"`
	// One or more `repository` blocks as defined below.
	Repositories []SpringCloudServiceConfigServerGitSettingRepository `pulumi:"repositories"`
	// An array of strings used to search subdirectories of the Git repository.
	SearchPaths []string `pulumi:"searchPaths"`
	// A `sshAuth` block as defined below.
	SshAuth *SpringCloudServiceConfigServerGitSettingSshAuth `pulumi:"sshAuth"`
	// The URI of the default Git repository used as the Config Server back end, should be started with `http://`, `https://`, `git@`, or `ssh://`.
	Uri string `pulumi:"uri"`
}

// SpringCloudServiceConfigServerGitSettingInput is an input type that accepts SpringCloudServiceConfigServerGitSettingArgs and SpringCloudServiceConfigServerGitSettingOutput values.
// You can construct a concrete instance of `SpringCloudServiceConfigServerGitSettingInput` via:
//
//          SpringCloudServiceConfigServerGitSettingArgs{...}
type SpringCloudServiceConfigServerGitSettingInput interface {
	pulumi.Input

	ToSpringCloudServiceConfigServerGitSettingOutput() SpringCloudServiceConfigServerGitSettingOutput
	ToSpringCloudServiceConfigServerGitSettingOutputWithContext(context.Context) SpringCloudServiceConfigServerGitSettingOutput
}

type SpringCloudServiceConfigServerGitSettingArgs struct {
	// A `httpBasicAuth` block as defined below.
	HttpBasicAuth SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrInput `pulumi:"httpBasicAuth"`
	// The default label of the Git repository, should be the branch name, tag name, or commit-id of the repository.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// One or more `repository` blocks as defined below.
	Repositories SpringCloudServiceConfigServerGitSettingRepositoryArrayInput `pulumi:"repositories"`
	// An array of strings used to search subdirectories of the Git repository.
	SearchPaths pulumi.StringArrayInput `pulumi:"searchPaths"`
	// A `sshAuth` block as defined below.
	SshAuth SpringCloudServiceConfigServerGitSettingSshAuthPtrInput `pulumi:"sshAuth"`
	// The URI of the default Git repository used as the Config Server back end, should be started with `http://`, `https://`, `git@`, or `ssh://`.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (SpringCloudServiceConfigServerGitSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceConfigServerGitSetting)(nil)).Elem()
}

func (i SpringCloudServiceConfigServerGitSettingArgs) ToSpringCloudServiceConfigServerGitSettingOutput() SpringCloudServiceConfigServerGitSettingOutput {
	return i.ToSpringCloudServiceConfigServerGitSettingOutputWithContext(context.Background())
}

func (i SpringCloudServiceConfigServerGitSettingArgs) ToSpringCloudServiceConfigServerGitSettingOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceConfigServerGitSettingOutput)
}

func (i SpringCloudServiceConfigServerGitSettingArgs) ToSpringCloudServiceConfigServerGitSettingPtrOutput() SpringCloudServiceConfigServerGitSettingPtrOutput {
	return i.ToSpringCloudServiceConfigServerGitSettingPtrOutputWithContext(context.Background())
}

func (i SpringCloudServiceConfigServerGitSettingArgs) ToSpringCloudServiceConfigServerGitSettingPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceConfigServerGitSettingOutput).ToSpringCloudServiceConfigServerGitSettingPtrOutputWithContext(ctx)
}

// SpringCloudServiceConfigServerGitSettingPtrInput is an input type that accepts SpringCloudServiceConfigServerGitSettingArgs, SpringCloudServiceConfigServerGitSettingPtr and SpringCloudServiceConfigServerGitSettingPtrOutput values.
// You can construct a concrete instance of `SpringCloudServiceConfigServerGitSettingPtrInput` via:
//
//          SpringCloudServiceConfigServerGitSettingArgs{...}
//
//  or:
//
//          nil
type SpringCloudServiceConfigServerGitSettingPtrInput interface {
	pulumi.Input

	ToSpringCloudServiceConfigServerGitSettingPtrOutput() SpringCloudServiceConfigServerGitSettingPtrOutput
	ToSpringCloudServiceConfigServerGitSettingPtrOutputWithContext(context.Context) SpringCloudServiceConfigServerGitSettingPtrOutput
}

type springCloudServiceConfigServerGitSettingPtrType SpringCloudServiceConfigServerGitSettingArgs

func SpringCloudServiceConfigServerGitSettingPtr(v *SpringCloudServiceConfigServerGitSettingArgs) SpringCloudServiceConfigServerGitSettingPtrInput {
	return (*springCloudServiceConfigServerGitSettingPtrType)(v)
}

func (*springCloudServiceConfigServerGitSettingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudServiceConfigServerGitSetting)(nil)).Elem()
}

func (i *springCloudServiceConfigServerGitSettingPtrType) ToSpringCloudServiceConfigServerGitSettingPtrOutput() SpringCloudServiceConfigServerGitSettingPtrOutput {
	return i.ToSpringCloudServiceConfigServerGitSettingPtrOutputWithContext(context.Background())
}

func (i *springCloudServiceConfigServerGitSettingPtrType) ToSpringCloudServiceConfigServerGitSettingPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceConfigServerGitSettingPtrOutput)
}

type SpringCloudServiceConfigServerGitSettingOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceConfigServerGitSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceConfigServerGitSetting)(nil)).Elem()
}

func (o SpringCloudServiceConfigServerGitSettingOutput) ToSpringCloudServiceConfigServerGitSettingOutput() SpringCloudServiceConfigServerGitSettingOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingOutput) ToSpringCloudServiceConfigServerGitSettingOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingOutput) ToSpringCloudServiceConfigServerGitSettingPtrOutput() SpringCloudServiceConfigServerGitSettingPtrOutput {
	return o.ToSpringCloudServiceConfigServerGitSettingPtrOutputWithContext(context.Background())
}

func (o SpringCloudServiceConfigServerGitSettingOutput) ToSpringCloudServiceConfigServerGitSettingPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSetting) *SpringCloudServiceConfigServerGitSetting {
		return &v
	}).(SpringCloudServiceConfigServerGitSettingPtrOutput)
}

// A `httpBasicAuth` block as defined below.
func (o SpringCloudServiceConfigServerGitSettingOutput) HttpBasicAuth() SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSetting) *SpringCloudServiceConfigServerGitSettingHttpBasicAuth {
		return v.HttpBasicAuth
	}).(SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput)
}

// The default label of the Git repository, should be the branch name, tag name, or commit-id of the repository.
func (o SpringCloudServiceConfigServerGitSettingOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSetting) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// One or more `repository` blocks as defined below.
func (o SpringCloudServiceConfigServerGitSettingOutput) Repositories() SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSetting) []SpringCloudServiceConfigServerGitSettingRepository {
		return v.Repositories
	}).(SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput)
}

// An array of strings used to search subdirectories of the Git repository.
func (o SpringCloudServiceConfigServerGitSettingOutput) SearchPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSetting) []string { return v.SearchPaths }).(pulumi.StringArrayOutput)
}

// A `sshAuth` block as defined below.
func (o SpringCloudServiceConfigServerGitSettingOutput) SshAuth() SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSetting) *SpringCloudServiceConfigServerGitSettingSshAuth {
		return v.SshAuth
	}).(SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput)
}

// The URI of the default Git repository used as the Config Server back end, should be started with `http://`, `https://`, `git@`, or `ssh://`.
func (o SpringCloudServiceConfigServerGitSettingOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSetting) string { return v.Uri }).(pulumi.StringOutput)
}

type SpringCloudServiceConfigServerGitSettingPtrOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceConfigServerGitSettingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudServiceConfigServerGitSetting)(nil)).Elem()
}

func (o SpringCloudServiceConfigServerGitSettingPtrOutput) ToSpringCloudServiceConfigServerGitSettingPtrOutput() SpringCloudServiceConfigServerGitSettingPtrOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingPtrOutput) ToSpringCloudServiceConfigServerGitSettingPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingPtrOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingPtrOutput) Elem() SpringCloudServiceConfigServerGitSettingOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSetting) SpringCloudServiceConfigServerGitSetting { return *v }).(SpringCloudServiceConfigServerGitSettingOutput)
}

// A `httpBasicAuth` block as defined below.
func (o SpringCloudServiceConfigServerGitSettingPtrOutput) HttpBasicAuth() SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSetting) *SpringCloudServiceConfigServerGitSettingHttpBasicAuth {
		if v == nil {
			return nil
		}
		return v.HttpBasicAuth
	}).(SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput)
}

// The default label of the Git repository, should be the branch name, tag name, or commit-id of the repository.
func (o SpringCloudServiceConfigServerGitSettingPtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSetting) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

// One or more `repository` blocks as defined below.
func (o SpringCloudServiceConfigServerGitSettingPtrOutput) Repositories() SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSetting) []SpringCloudServiceConfigServerGitSettingRepository {
		if v == nil {
			return nil
		}
		return v.Repositories
	}).(SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput)
}

// An array of strings used to search subdirectories of the Git repository.
func (o SpringCloudServiceConfigServerGitSettingPtrOutput) SearchPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSetting) []string {
		if v == nil {
			return nil
		}
		return v.SearchPaths
	}).(pulumi.StringArrayOutput)
}

// A `sshAuth` block as defined below.
func (o SpringCloudServiceConfigServerGitSettingPtrOutput) SshAuth() SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSetting) *SpringCloudServiceConfigServerGitSettingSshAuth {
		if v == nil {
			return nil
		}
		return v.SshAuth
	}).(SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput)
}

// The URI of the default Git repository used as the Config Server back end, should be started with `http://`, `https://`, `git@`, or `ssh://`.
func (o SpringCloudServiceConfigServerGitSettingPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSetting) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type SpringCloudServiceConfigServerGitSettingHttpBasicAuth struct {
	// The password used to access the Git repository server, required when the Git repository server supports Http Basic Authentication.
	Password string `pulumi:"password"`
	// The username that's used to access the Git repository server, required when the Git repository server supports Http Basic Authentication.
	Username string `pulumi:"username"`
}

// SpringCloudServiceConfigServerGitSettingHttpBasicAuthInput is an input type that accepts SpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs and SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput values.
// You can construct a concrete instance of `SpringCloudServiceConfigServerGitSettingHttpBasicAuthInput` via:
//
//          SpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs{...}
type SpringCloudServiceConfigServerGitSettingHttpBasicAuthInput interface {
	pulumi.Input

	ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput() SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput
	ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutputWithContext(context.Context) SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput
}

type SpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs struct {
	// The password used to access the Git repository server, required when the Git repository server supports Http Basic Authentication.
	Password pulumi.StringInput `pulumi:"password"`
	// The username that's used to access the Git repository server, required when the Git repository server supports Http Basic Authentication.
	Username pulumi.StringInput `pulumi:"username"`
}

func (SpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceConfigServerGitSettingHttpBasicAuth)(nil)).Elem()
}

func (i SpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs) ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput() SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput {
	return i.ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutputWithContext(context.Background())
}

func (i SpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs) ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput)
}

func (i SpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs) ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput() SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput {
	return i.ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutputWithContext(context.Background())
}

func (i SpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs) ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput).ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutputWithContext(ctx)
}

// SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrInput is an input type that accepts SpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs, SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtr and SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput values.
// You can construct a concrete instance of `SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrInput` via:
//
//          SpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs{...}
//
//  or:
//
//          nil
type SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrInput interface {
	pulumi.Input

	ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput() SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput
	ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutputWithContext(context.Context) SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput
}

type springCloudServiceConfigServerGitSettingHttpBasicAuthPtrType SpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs

func SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtr(v *SpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs) SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrInput {
	return (*springCloudServiceConfigServerGitSettingHttpBasicAuthPtrType)(v)
}

func (*springCloudServiceConfigServerGitSettingHttpBasicAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudServiceConfigServerGitSettingHttpBasicAuth)(nil)).Elem()
}

func (i *springCloudServiceConfigServerGitSettingHttpBasicAuthPtrType) ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput() SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput {
	return i.ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutputWithContext(context.Background())
}

func (i *springCloudServiceConfigServerGitSettingHttpBasicAuthPtrType) ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput)
}

type SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceConfigServerGitSettingHttpBasicAuth)(nil)).Elem()
}

func (o SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput) ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput() SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput) ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput) ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput() SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput {
	return o.ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutputWithContext(context.Background())
}

func (o SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput) ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingHttpBasicAuth) *SpringCloudServiceConfigServerGitSettingHttpBasicAuth {
		return &v
	}).(SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput)
}

// The password used to access the Git repository server, required when the Git repository server supports Http Basic Authentication.
func (o SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingHttpBasicAuth) string { return v.Password }).(pulumi.StringOutput)
}

// The username that's used to access the Git repository server, required when the Git repository server supports Http Basic Authentication.
func (o SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingHttpBasicAuth) string { return v.Username }).(pulumi.StringOutput)
}

type SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudServiceConfigServerGitSettingHttpBasicAuth)(nil)).Elem()
}

func (o SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput) ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput() SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput) ToSpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput) Elem() SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSettingHttpBasicAuth) SpringCloudServiceConfigServerGitSettingHttpBasicAuth {
		return *v
	}).(SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput)
}

// The password used to access the Git repository server, required when the Git repository server supports Http Basic Authentication.
func (o SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSettingHttpBasicAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// The username that's used to access the Git repository server, required when the Git repository server supports Http Basic Authentication.
func (o SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSettingHttpBasicAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type SpringCloudServiceConfigServerGitSettingRepository struct {
	// A `httpBasicAuth` block as defined below.
	HttpBasicAuth *SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth `pulumi:"httpBasicAuth"`
	// The default label of the Git repository, should be the branch name, tag name, or commit-id of the repository.
	Label *string `pulumi:"label"`
	// A name to identify on the Git repository, required only if repos exists.
	Name string `pulumi:"name"`
	// An array of strings used to match an application name. For each pattern, use the `{application}/{profile}` format with wildcards.
	Patterns []string `pulumi:"patterns"`
	// An array of strings used to search subdirectories of the Git repository.
	SearchPaths []string `pulumi:"searchPaths"`
	// A `sshAuth` block as defined below.
	SshAuth *SpringCloudServiceConfigServerGitSettingRepositorySshAuth `pulumi:"sshAuth"`
	// The URI of the Git repository that's used as the Config Server back end should be started with `http://`, `https://`, `git@`, or `ssh://`.
	Uri string `pulumi:"uri"`
}

// SpringCloudServiceConfigServerGitSettingRepositoryInput is an input type that accepts SpringCloudServiceConfigServerGitSettingRepositoryArgs and SpringCloudServiceConfigServerGitSettingRepositoryOutput values.
// You can construct a concrete instance of `SpringCloudServiceConfigServerGitSettingRepositoryInput` via:
//
//          SpringCloudServiceConfigServerGitSettingRepositoryArgs{...}
type SpringCloudServiceConfigServerGitSettingRepositoryInput interface {
	pulumi.Input

	ToSpringCloudServiceConfigServerGitSettingRepositoryOutput() SpringCloudServiceConfigServerGitSettingRepositoryOutput
	ToSpringCloudServiceConfigServerGitSettingRepositoryOutputWithContext(context.Context) SpringCloudServiceConfigServerGitSettingRepositoryOutput
}

type SpringCloudServiceConfigServerGitSettingRepositoryArgs struct {
	// A `httpBasicAuth` block as defined below.
	HttpBasicAuth SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrInput `pulumi:"httpBasicAuth"`
	// The default label of the Git repository, should be the branch name, tag name, or commit-id of the repository.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// A name to identify on the Git repository, required only if repos exists.
	Name pulumi.StringInput `pulumi:"name"`
	// An array of strings used to match an application name. For each pattern, use the `{application}/{profile}` format with wildcards.
	Patterns pulumi.StringArrayInput `pulumi:"patterns"`
	// An array of strings used to search subdirectories of the Git repository.
	SearchPaths pulumi.StringArrayInput `pulumi:"searchPaths"`
	// A `sshAuth` block as defined below.
	SshAuth SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrInput `pulumi:"sshAuth"`
	// The URI of the Git repository that's used as the Config Server back end should be started with `http://`, `https://`, `git@`, or `ssh://`.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (SpringCloudServiceConfigServerGitSettingRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceConfigServerGitSettingRepository)(nil)).Elem()
}

func (i SpringCloudServiceConfigServerGitSettingRepositoryArgs) ToSpringCloudServiceConfigServerGitSettingRepositoryOutput() SpringCloudServiceConfigServerGitSettingRepositoryOutput {
	return i.ToSpringCloudServiceConfigServerGitSettingRepositoryOutputWithContext(context.Background())
}

func (i SpringCloudServiceConfigServerGitSettingRepositoryArgs) ToSpringCloudServiceConfigServerGitSettingRepositoryOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceConfigServerGitSettingRepositoryOutput)
}

// SpringCloudServiceConfigServerGitSettingRepositoryArrayInput is an input type that accepts SpringCloudServiceConfigServerGitSettingRepositoryArray and SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput values.
// You can construct a concrete instance of `SpringCloudServiceConfigServerGitSettingRepositoryArrayInput` via:
//
//          SpringCloudServiceConfigServerGitSettingRepositoryArray{ SpringCloudServiceConfigServerGitSettingRepositoryArgs{...} }
type SpringCloudServiceConfigServerGitSettingRepositoryArrayInput interface {
	pulumi.Input

	ToSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput() SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput
	ToSpringCloudServiceConfigServerGitSettingRepositoryArrayOutputWithContext(context.Context) SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput
}

type SpringCloudServiceConfigServerGitSettingRepositoryArray []SpringCloudServiceConfigServerGitSettingRepositoryInput

func (SpringCloudServiceConfigServerGitSettingRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpringCloudServiceConfigServerGitSettingRepository)(nil)).Elem()
}

func (i SpringCloudServiceConfigServerGitSettingRepositoryArray) ToSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput() SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput {
	return i.ToSpringCloudServiceConfigServerGitSettingRepositoryArrayOutputWithContext(context.Background())
}

func (i SpringCloudServiceConfigServerGitSettingRepositoryArray) ToSpringCloudServiceConfigServerGitSettingRepositoryArrayOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput)
}

type SpringCloudServiceConfigServerGitSettingRepositoryOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceConfigServerGitSettingRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceConfigServerGitSettingRepository)(nil)).Elem()
}

func (o SpringCloudServiceConfigServerGitSettingRepositoryOutput) ToSpringCloudServiceConfigServerGitSettingRepositoryOutput() SpringCloudServiceConfigServerGitSettingRepositoryOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingRepositoryOutput) ToSpringCloudServiceConfigServerGitSettingRepositoryOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingRepositoryOutput {
	return o
}

// A `httpBasicAuth` block as defined below.
func (o SpringCloudServiceConfigServerGitSettingRepositoryOutput) HttpBasicAuth() SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingRepository) *SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth {
		return v.HttpBasicAuth
	}).(SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput)
}

// The default label of the Git repository, should be the branch name, tag name, or commit-id of the repository.
func (o SpringCloudServiceConfigServerGitSettingRepositoryOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingRepository) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// A name to identify on the Git repository, required only if repos exists.
func (o SpringCloudServiceConfigServerGitSettingRepositoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingRepository) string { return v.Name }).(pulumi.StringOutput)
}

// An array of strings used to match an application name. For each pattern, use the `{application}/{profile}` format with wildcards.
func (o SpringCloudServiceConfigServerGitSettingRepositoryOutput) Patterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingRepository) []string { return v.Patterns }).(pulumi.StringArrayOutput)
}

// An array of strings used to search subdirectories of the Git repository.
func (o SpringCloudServiceConfigServerGitSettingRepositoryOutput) SearchPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingRepository) []string { return v.SearchPaths }).(pulumi.StringArrayOutput)
}

// A `sshAuth` block as defined below.
func (o SpringCloudServiceConfigServerGitSettingRepositoryOutput) SshAuth() SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingRepository) *SpringCloudServiceConfigServerGitSettingRepositorySshAuth {
		return v.SshAuth
	}).(SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput)
}

// The URI of the Git repository that's used as the Config Server back end should be started with `http://`, `https://`, `git@`, or `ssh://`.
func (o SpringCloudServiceConfigServerGitSettingRepositoryOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingRepository) string { return v.Uri }).(pulumi.StringOutput)
}

type SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpringCloudServiceConfigServerGitSettingRepository)(nil)).Elem()
}

func (o SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput) ToSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput() SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput) ToSpringCloudServiceConfigServerGitSettingRepositoryArrayOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput) Index(i pulumi.IntInput) SpringCloudServiceConfigServerGitSettingRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SpringCloudServiceConfigServerGitSettingRepository {
		return vs[0].([]SpringCloudServiceConfigServerGitSettingRepository)[vs[1].(int)]
	}).(SpringCloudServiceConfigServerGitSettingRepositoryOutput)
}

type SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth struct {
	// The password used to access the Git repository server, required when the Git repository server supports Http Basic Authentication.
	Password string `pulumi:"password"`
	// The username that's used to access the Git repository server, required when the Git repository server supports Http Basic Authentication.
	Username string `pulumi:"username"`
}

// SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthInput is an input type that accepts SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs and SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput values.
// You can construct a concrete instance of `SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthInput` via:
//
//          SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs{...}
type SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthInput interface {
	pulumi.Input

	ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput() SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput
	ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutputWithContext(context.Context) SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput
}

type SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs struct {
	// The password used to access the Git repository server, required when the Git repository server supports Http Basic Authentication.
	Password pulumi.StringInput `pulumi:"password"`
	// The username that's used to access the Git repository server, required when the Git repository server supports Http Basic Authentication.
	Username pulumi.StringInput `pulumi:"username"`
}

func (SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth)(nil)).Elem()
}

func (i SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs) ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput() SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput {
	return i.ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutputWithContext(context.Background())
}

func (i SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs) ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput)
}

func (i SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs) ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput() SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput {
	return i.ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutputWithContext(context.Background())
}

func (i SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs) ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput).ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutputWithContext(ctx)
}

// SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrInput is an input type that accepts SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs, SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtr and SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput values.
// You can construct a concrete instance of `SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrInput` via:
//
//          SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs{...}
//
//  or:
//
//          nil
type SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrInput interface {
	pulumi.Input

	ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput() SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput
	ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutputWithContext(context.Context) SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput
}

type springCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrType SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs

func SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtr(v *SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs) SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrInput {
	return (*springCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrType)(v)
}

func (*springCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth)(nil)).Elem()
}

func (i *springCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrType) ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput() SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput {
	return i.ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutputWithContext(context.Background())
}

func (i *springCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrType) ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput)
}

type SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth)(nil)).Elem()
}

func (o SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput) ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput() SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput) ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput) ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput() SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput {
	return o.ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutputWithContext(context.Background())
}

func (o SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput) ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth) *SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth {
		return &v
	}).(SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput)
}

// The password used to access the Git repository server, required when the Git repository server supports Http Basic Authentication.
func (o SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth) string { return v.Password }).(pulumi.StringOutput)
}

// The username that's used to access the Git repository server, required when the Git repository server supports Http Basic Authentication.
func (o SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth) string { return v.Username }).(pulumi.StringOutput)
}

type SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth)(nil)).Elem()
}

func (o SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput) ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput() SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput) ToSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput) Elem() SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth) SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth {
		return *v
	}).(SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput)
}

// The password used to access the Git repository server, required when the Git repository server supports Http Basic Authentication.
func (o SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// The username that's used to access the Git repository server, required when the Git repository server supports Http Basic Authentication.
func (o SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type SpringCloudServiceConfigServerGitSettingRepositorySshAuth struct {
	// The host key of the Git repository server, should not include the algorithm prefix as covered by `host-key-algorithm`.
	HostKey *string `pulumi:"hostKey"`
	// The host key algorithm, should be `ssh-dss`, `ssh-rsa`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`. Required only if `host-key` exists.
	HostKeyAlgorithm *string `pulumi:"hostKeyAlgorithm"`
	// The SSH private key to access the Git repository, required when the URI starts with `git@` or `ssh://`.
	PrivateKey string `pulumi:"privateKey"`
	// Indicates whether the Config Server instance will fail to start if the hostKey does not match.
	StrictHostKeyCheckingEnabled *bool `pulumi:"strictHostKeyCheckingEnabled"`
}

// SpringCloudServiceConfigServerGitSettingRepositorySshAuthInput is an input type that accepts SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs and SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput values.
// You can construct a concrete instance of `SpringCloudServiceConfigServerGitSettingRepositorySshAuthInput` via:
//
//          SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs{...}
type SpringCloudServiceConfigServerGitSettingRepositorySshAuthInput interface {
	pulumi.Input

	ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput() SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput
	ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutputWithContext(context.Context) SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput
}

type SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs struct {
	// The host key of the Git repository server, should not include the algorithm prefix as covered by `host-key-algorithm`.
	HostKey pulumi.StringPtrInput `pulumi:"hostKey"`
	// The host key algorithm, should be `ssh-dss`, `ssh-rsa`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`. Required only if `host-key` exists.
	HostKeyAlgorithm pulumi.StringPtrInput `pulumi:"hostKeyAlgorithm"`
	// The SSH private key to access the Git repository, required when the URI starts with `git@` or `ssh://`.
	PrivateKey pulumi.StringInput `pulumi:"privateKey"`
	// Indicates whether the Config Server instance will fail to start if the hostKey does not match.
	StrictHostKeyCheckingEnabled pulumi.BoolPtrInput `pulumi:"strictHostKeyCheckingEnabled"`
}

func (SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceConfigServerGitSettingRepositorySshAuth)(nil)).Elem()
}

func (i SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs) ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput() SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput {
	return i.ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutputWithContext(context.Background())
}

func (i SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs) ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput)
}

func (i SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs) ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput() SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput {
	return i.ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutputWithContext(context.Background())
}

func (i SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs) ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput).ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutputWithContext(ctx)
}

// SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrInput is an input type that accepts SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs, SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtr and SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput values.
// You can construct a concrete instance of `SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrInput` via:
//
//          SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs{...}
//
//  or:
//
//          nil
type SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrInput interface {
	pulumi.Input

	ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput() SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput
	ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutputWithContext(context.Context) SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput
}

type springCloudServiceConfigServerGitSettingRepositorySshAuthPtrType SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs

func SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtr(v *SpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs) SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrInput {
	return (*springCloudServiceConfigServerGitSettingRepositorySshAuthPtrType)(v)
}

func (*springCloudServiceConfigServerGitSettingRepositorySshAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudServiceConfigServerGitSettingRepositorySshAuth)(nil)).Elem()
}

func (i *springCloudServiceConfigServerGitSettingRepositorySshAuthPtrType) ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput() SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput {
	return i.ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutputWithContext(context.Background())
}

func (i *springCloudServiceConfigServerGitSettingRepositorySshAuthPtrType) ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput)
}

type SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceConfigServerGitSettingRepositorySshAuth)(nil)).Elem()
}

func (o SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput) ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput() SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput) ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput) ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput() SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput {
	return o.ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutputWithContext(context.Background())
}

func (o SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput) ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingRepositorySshAuth) *SpringCloudServiceConfigServerGitSettingRepositorySshAuth {
		return &v
	}).(SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput)
}

// The host key of the Git repository server, should not include the algorithm prefix as covered by `host-key-algorithm`.
func (o SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput) HostKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingRepositorySshAuth) *string { return v.HostKey }).(pulumi.StringPtrOutput)
}

// The host key algorithm, should be `ssh-dss`, `ssh-rsa`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`. Required only if `host-key` exists.
func (o SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput) HostKeyAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingRepositorySshAuth) *string { return v.HostKeyAlgorithm }).(pulumi.StringPtrOutput)
}

// The SSH private key to access the Git repository, required when the URI starts with `git@` or `ssh://`.
func (o SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingRepositorySshAuth) string { return v.PrivateKey }).(pulumi.StringOutput)
}

// Indicates whether the Config Server instance will fail to start if the hostKey does not match.
func (o SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput) StrictHostKeyCheckingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingRepositorySshAuth) *bool {
		return v.StrictHostKeyCheckingEnabled
	}).(pulumi.BoolPtrOutput)
}

type SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudServiceConfigServerGitSettingRepositorySshAuth)(nil)).Elem()
}

func (o SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput) ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput() SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput) ToSpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput) Elem() SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSettingRepositorySshAuth) SpringCloudServiceConfigServerGitSettingRepositorySshAuth {
		return *v
	}).(SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput)
}

// The host key of the Git repository server, should not include the algorithm prefix as covered by `host-key-algorithm`.
func (o SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput) HostKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSettingRepositorySshAuth) *string {
		if v == nil {
			return nil
		}
		return v.HostKey
	}).(pulumi.StringPtrOutput)
}

// The host key algorithm, should be `ssh-dss`, `ssh-rsa`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`. Required only if `host-key` exists.
func (o SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput) HostKeyAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSettingRepositorySshAuth) *string {
		if v == nil {
			return nil
		}
		return v.HostKeyAlgorithm
	}).(pulumi.StringPtrOutput)
}

// The SSH private key to access the Git repository, required when the URI starts with `git@` or `ssh://`.
func (o SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSettingRepositorySshAuth) *string {
		if v == nil {
			return nil
		}
		return &v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// Indicates whether the Config Server instance will fail to start if the hostKey does not match.
func (o SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput) StrictHostKeyCheckingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSettingRepositorySshAuth) *bool {
		if v == nil {
			return nil
		}
		return v.StrictHostKeyCheckingEnabled
	}).(pulumi.BoolPtrOutput)
}

type SpringCloudServiceConfigServerGitSettingSshAuth struct {
	// The host key of the Git repository server, should not include the algorithm prefix as covered by `host-key-algorithm`.
	HostKey *string `pulumi:"hostKey"`
	// The host key algorithm, should be `ssh-dss`, `ssh-rsa`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`. Required only if `host-key` exists.
	HostKeyAlgorithm *string `pulumi:"hostKeyAlgorithm"`
	// The SSH private key to access the Git repository, required when the URI starts with `git@` or `ssh://`.
	PrivateKey string `pulumi:"privateKey"`
	// Indicates whether the Config Server instance will fail to start if the hostKey does not match.
	StrictHostKeyCheckingEnabled *bool `pulumi:"strictHostKeyCheckingEnabled"`
}

// SpringCloudServiceConfigServerGitSettingSshAuthInput is an input type that accepts SpringCloudServiceConfigServerGitSettingSshAuthArgs and SpringCloudServiceConfigServerGitSettingSshAuthOutput values.
// You can construct a concrete instance of `SpringCloudServiceConfigServerGitSettingSshAuthInput` via:
//
//          SpringCloudServiceConfigServerGitSettingSshAuthArgs{...}
type SpringCloudServiceConfigServerGitSettingSshAuthInput interface {
	pulumi.Input

	ToSpringCloudServiceConfigServerGitSettingSshAuthOutput() SpringCloudServiceConfigServerGitSettingSshAuthOutput
	ToSpringCloudServiceConfigServerGitSettingSshAuthOutputWithContext(context.Context) SpringCloudServiceConfigServerGitSettingSshAuthOutput
}

type SpringCloudServiceConfigServerGitSettingSshAuthArgs struct {
	// The host key of the Git repository server, should not include the algorithm prefix as covered by `host-key-algorithm`.
	HostKey pulumi.StringPtrInput `pulumi:"hostKey"`
	// The host key algorithm, should be `ssh-dss`, `ssh-rsa`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`. Required only if `host-key` exists.
	HostKeyAlgorithm pulumi.StringPtrInput `pulumi:"hostKeyAlgorithm"`
	// The SSH private key to access the Git repository, required when the URI starts with `git@` or `ssh://`.
	PrivateKey pulumi.StringInput `pulumi:"privateKey"`
	// Indicates whether the Config Server instance will fail to start if the hostKey does not match.
	StrictHostKeyCheckingEnabled pulumi.BoolPtrInput `pulumi:"strictHostKeyCheckingEnabled"`
}

func (SpringCloudServiceConfigServerGitSettingSshAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceConfigServerGitSettingSshAuth)(nil)).Elem()
}

func (i SpringCloudServiceConfigServerGitSettingSshAuthArgs) ToSpringCloudServiceConfigServerGitSettingSshAuthOutput() SpringCloudServiceConfigServerGitSettingSshAuthOutput {
	return i.ToSpringCloudServiceConfigServerGitSettingSshAuthOutputWithContext(context.Background())
}

func (i SpringCloudServiceConfigServerGitSettingSshAuthArgs) ToSpringCloudServiceConfigServerGitSettingSshAuthOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingSshAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceConfigServerGitSettingSshAuthOutput)
}

func (i SpringCloudServiceConfigServerGitSettingSshAuthArgs) ToSpringCloudServiceConfigServerGitSettingSshAuthPtrOutput() SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput {
	return i.ToSpringCloudServiceConfigServerGitSettingSshAuthPtrOutputWithContext(context.Background())
}

func (i SpringCloudServiceConfigServerGitSettingSshAuthArgs) ToSpringCloudServiceConfigServerGitSettingSshAuthPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceConfigServerGitSettingSshAuthOutput).ToSpringCloudServiceConfigServerGitSettingSshAuthPtrOutputWithContext(ctx)
}

// SpringCloudServiceConfigServerGitSettingSshAuthPtrInput is an input type that accepts SpringCloudServiceConfigServerGitSettingSshAuthArgs, SpringCloudServiceConfigServerGitSettingSshAuthPtr and SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput values.
// You can construct a concrete instance of `SpringCloudServiceConfigServerGitSettingSshAuthPtrInput` via:
//
//          SpringCloudServiceConfigServerGitSettingSshAuthArgs{...}
//
//  or:
//
//          nil
type SpringCloudServiceConfigServerGitSettingSshAuthPtrInput interface {
	pulumi.Input

	ToSpringCloudServiceConfigServerGitSettingSshAuthPtrOutput() SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput
	ToSpringCloudServiceConfigServerGitSettingSshAuthPtrOutputWithContext(context.Context) SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput
}

type springCloudServiceConfigServerGitSettingSshAuthPtrType SpringCloudServiceConfigServerGitSettingSshAuthArgs

func SpringCloudServiceConfigServerGitSettingSshAuthPtr(v *SpringCloudServiceConfigServerGitSettingSshAuthArgs) SpringCloudServiceConfigServerGitSettingSshAuthPtrInput {
	return (*springCloudServiceConfigServerGitSettingSshAuthPtrType)(v)
}

func (*springCloudServiceConfigServerGitSettingSshAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudServiceConfigServerGitSettingSshAuth)(nil)).Elem()
}

func (i *springCloudServiceConfigServerGitSettingSshAuthPtrType) ToSpringCloudServiceConfigServerGitSettingSshAuthPtrOutput() SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput {
	return i.ToSpringCloudServiceConfigServerGitSettingSshAuthPtrOutputWithContext(context.Background())
}

func (i *springCloudServiceConfigServerGitSettingSshAuthPtrType) ToSpringCloudServiceConfigServerGitSettingSshAuthPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput)
}

type SpringCloudServiceConfigServerGitSettingSshAuthOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceConfigServerGitSettingSshAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceConfigServerGitSettingSshAuth)(nil)).Elem()
}

func (o SpringCloudServiceConfigServerGitSettingSshAuthOutput) ToSpringCloudServiceConfigServerGitSettingSshAuthOutput() SpringCloudServiceConfigServerGitSettingSshAuthOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingSshAuthOutput) ToSpringCloudServiceConfigServerGitSettingSshAuthOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingSshAuthOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingSshAuthOutput) ToSpringCloudServiceConfigServerGitSettingSshAuthPtrOutput() SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput {
	return o.ToSpringCloudServiceConfigServerGitSettingSshAuthPtrOutputWithContext(context.Background())
}

func (o SpringCloudServiceConfigServerGitSettingSshAuthOutput) ToSpringCloudServiceConfigServerGitSettingSshAuthPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingSshAuth) *SpringCloudServiceConfigServerGitSettingSshAuth {
		return &v
	}).(SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput)
}

// The host key of the Git repository server, should not include the algorithm prefix as covered by `host-key-algorithm`.
func (o SpringCloudServiceConfigServerGitSettingSshAuthOutput) HostKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingSshAuth) *string { return v.HostKey }).(pulumi.StringPtrOutput)
}

// The host key algorithm, should be `ssh-dss`, `ssh-rsa`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`. Required only if `host-key` exists.
func (o SpringCloudServiceConfigServerGitSettingSshAuthOutput) HostKeyAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingSshAuth) *string { return v.HostKeyAlgorithm }).(pulumi.StringPtrOutput)
}

// The SSH private key to access the Git repository, required when the URI starts with `git@` or `ssh://`.
func (o SpringCloudServiceConfigServerGitSettingSshAuthOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingSshAuth) string { return v.PrivateKey }).(pulumi.StringOutput)
}

// Indicates whether the Config Server instance will fail to start if the hostKey does not match.
func (o SpringCloudServiceConfigServerGitSettingSshAuthOutput) StrictHostKeyCheckingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceConfigServerGitSettingSshAuth) *bool { return v.StrictHostKeyCheckingEnabled }).(pulumi.BoolPtrOutput)
}

type SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudServiceConfigServerGitSettingSshAuth)(nil)).Elem()
}

func (o SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput) ToSpringCloudServiceConfigServerGitSettingSshAuthPtrOutput() SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput) ToSpringCloudServiceConfigServerGitSettingSshAuthPtrOutputWithContext(ctx context.Context) SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput {
	return o
}

func (o SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput) Elem() SpringCloudServiceConfigServerGitSettingSshAuthOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSettingSshAuth) SpringCloudServiceConfigServerGitSettingSshAuth {
		return *v
	}).(SpringCloudServiceConfigServerGitSettingSshAuthOutput)
}

// The host key of the Git repository server, should not include the algorithm prefix as covered by `host-key-algorithm`.
func (o SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput) HostKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSettingSshAuth) *string {
		if v == nil {
			return nil
		}
		return v.HostKey
	}).(pulumi.StringPtrOutput)
}

// The host key algorithm, should be `ssh-dss`, `ssh-rsa`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`. Required only if `host-key` exists.
func (o SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput) HostKeyAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSettingSshAuth) *string {
		if v == nil {
			return nil
		}
		return v.HostKeyAlgorithm
	}).(pulumi.StringPtrOutput)
}

// The SSH private key to access the Git repository, required when the URI starts with `git@` or `ssh://`.
func (o SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSettingSshAuth) *string {
		if v == nil {
			return nil
		}
		return &v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// Indicates whether the Config Server instance will fail to start if the hostKey does not match.
func (o SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput) StrictHostKeyCheckingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceConfigServerGitSettingSshAuth) *bool {
		if v == nil {
			return nil
		}
		return v.StrictHostKeyCheckingEnabled
	}).(pulumi.BoolPtrOutput)
}

type SpringCloudServiceNetwork struct {
	// Specifies the Name of the resource group containing network resources of Azure Spring Cloud Apps. Changing this forces a new resource to be created.
	AppNetworkResourceGroup *string `pulumi:"appNetworkResourceGroup"`
	// Specifies the ID of the Subnet which should host the Spring Boot Applications deployed in this Spring Cloud Service. Changing this forces a new resource to be created.
	AppSubnetId string `pulumi:"appSubnetId"`
	// A list of (at least 3) CIDR ranges (at least /16) which are used to host the Spring Cloud infrastructure, which must not overlap with any existing CIDR ranges in the Subnet. Changing this forces a new resource to be created.
	CidrRanges []string `pulumi:"cidrRanges"`
	// Specifies the Name of the resource group containing network resources of Azure Spring Cloud Service Runtime. Changing this forces a new resource to be created.
	ServiceRuntimeNetworkResourceGroup *string `pulumi:"serviceRuntimeNetworkResourceGroup"`
	// Specifies the ID of the Subnet where the Service Runtime components of the Spring Cloud Service will exist. Changing this forces a new resource to be created.
	ServiceRuntimeSubnetId string `pulumi:"serviceRuntimeSubnetId"`
}

// SpringCloudServiceNetworkInput is an input type that accepts SpringCloudServiceNetworkArgs and SpringCloudServiceNetworkOutput values.
// You can construct a concrete instance of `SpringCloudServiceNetworkInput` via:
//
//          SpringCloudServiceNetworkArgs{...}
type SpringCloudServiceNetworkInput interface {
	pulumi.Input

	ToSpringCloudServiceNetworkOutput() SpringCloudServiceNetworkOutput
	ToSpringCloudServiceNetworkOutputWithContext(context.Context) SpringCloudServiceNetworkOutput
}

type SpringCloudServiceNetworkArgs struct {
	// Specifies the Name of the resource group containing network resources of Azure Spring Cloud Apps. Changing this forces a new resource to be created.
	AppNetworkResourceGroup pulumi.StringPtrInput `pulumi:"appNetworkResourceGroup"`
	// Specifies the ID of the Subnet which should host the Spring Boot Applications deployed in this Spring Cloud Service. Changing this forces a new resource to be created.
	AppSubnetId pulumi.StringInput `pulumi:"appSubnetId"`
	// A list of (at least 3) CIDR ranges (at least /16) which are used to host the Spring Cloud infrastructure, which must not overlap with any existing CIDR ranges in the Subnet. Changing this forces a new resource to be created.
	CidrRanges pulumi.StringArrayInput `pulumi:"cidrRanges"`
	// Specifies the Name of the resource group containing network resources of Azure Spring Cloud Service Runtime. Changing this forces a new resource to be created.
	ServiceRuntimeNetworkResourceGroup pulumi.StringPtrInput `pulumi:"serviceRuntimeNetworkResourceGroup"`
	// Specifies the ID of the Subnet where the Service Runtime components of the Spring Cloud Service will exist. Changing this forces a new resource to be created.
	ServiceRuntimeSubnetId pulumi.StringInput `pulumi:"serviceRuntimeSubnetId"`
}

func (SpringCloudServiceNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceNetwork)(nil)).Elem()
}

func (i SpringCloudServiceNetworkArgs) ToSpringCloudServiceNetworkOutput() SpringCloudServiceNetworkOutput {
	return i.ToSpringCloudServiceNetworkOutputWithContext(context.Background())
}

func (i SpringCloudServiceNetworkArgs) ToSpringCloudServiceNetworkOutputWithContext(ctx context.Context) SpringCloudServiceNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceNetworkOutput)
}

func (i SpringCloudServiceNetworkArgs) ToSpringCloudServiceNetworkPtrOutput() SpringCloudServiceNetworkPtrOutput {
	return i.ToSpringCloudServiceNetworkPtrOutputWithContext(context.Background())
}

func (i SpringCloudServiceNetworkArgs) ToSpringCloudServiceNetworkPtrOutputWithContext(ctx context.Context) SpringCloudServiceNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceNetworkOutput).ToSpringCloudServiceNetworkPtrOutputWithContext(ctx)
}

// SpringCloudServiceNetworkPtrInput is an input type that accepts SpringCloudServiceNetworkArgs, SpringCloudServiceNetworkPtr and SpringCloudServiceNetworkPtrOutput values.
// You can construct a concrete instance of `SpringCloudServiceNetworkPtrInput` via:
//
//          SpringCloudServiceNetworkArgs{...}
//
//  or:
//
//          nil
type SpringCloudServiceNetworkPtrInput interface {
	pulumi.Input

	ToSpringCloudServiceNetworkPtrOutput() SpringCloudServiceNetworkPtrOutput
	ToSpringCloudServiceNetworkPtrOutputWithContext(context.Context) SpringCloudServiceNetworkPtrOutput
}

type springCloudServiceNetworkPtrType SpringCloudServiceNetworkArgs

func SpringCloudServiceNetworkPtr(v *SpringCloudServiceNetworkArgs) SpringCloudServiceNetworkPtrInput {
	return (*springCloudServiceNetworkPtrType)(v)
}

func (*springCloudServiceNetworkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudServiceNetwork)(nil)).Elem()
}

func (i *springCloudServiceNetworkPtrType) ToSpringCloudServiceNetworkPtrOutput() SpringCloudServiceNetworkPtrOutput {
	return i.ToSpringCloudServiceNetworkPtrOutputWithContext(context.Background())
}

func (i *springCloudServiceNetworkPtrType) ToSpringCloudServiceNetworkPtrOutputWithContext(ctx context.Context) SpringCloudServiceNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceNetworkPtrOutput)
}

type SpringCloudServiceNetworkOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceNetwork)(nil)).Elem()
}

func (o SpringCloudServiceNetworkOutput) ToSpringCloudServiceNetworkOutput() SpringCloudServiceNetworkOutput {
	return o
}

func (o SpringCloudServiceNetworkOutput) ToSpringCloudServiceNetworkOutputWithContext(ctx context.Context) SpringCloudServiceNetworkOutput {
	return o
}

func (o SpringCloudServiceNetworkOutput) ToSpringCloudServiceNetworkPtrOutput() SpringCloudServiceNetworkPtrOutput {
	return o.ToSpringCloudServiceNetworkPtrOutputWithContext(context.Background())
}

func (o SpringCloudServiceNetworkOutput) ToSpringCloudServiceNetworkPtrOutputWithContext(ctx context.Context) SpringCloudServiceNetworkPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceNetwork) *SpringCloudServiceNetwork {
		return &v
	}).(SpringCloudServiceNetworkPtrOutput)
}

// Specifies the Name of the resource group containing network resources of Azure Spring Cloud Apps. Changing this forces a new resource to be created.
func (o SpringCloudServiceNetworkOutput) AppNetworkResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceNetwork) *string { return v.AppNetworkResourceGroup }).(pulumi.StringPtrOutput)
}

// Specifies the ID of the Subnet which should host the Spring Boot Applications deployed in this Spring Cloud Service. Changing this forces a new resource to be created.
func (o SpringCloudServiceNetworkOutput) AppSubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudServiceNetwork) string { return v.AppSubnetId }).(pulumi.StringOutput)
}

// A list of (at least 3) CIDR ranges (at least /16) which are used to host the Spring Cloud infrastructure, which must not overlap with any existing CIDR ranges in the Subnet. Changing this forces a new resource to be created.
func (o SpringCloudServiceNetworkOutput) CidrRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SpringCloudServiceNetwork) []string { return v.CidrRanges }).(pulumi.StringArrayOutput)
}

// Specifies the Name of the resource group containing network resources of Azure Spring Cloud Service Runtime. Changing this forces a new resource to be created.
func (o SpringCloudServiceNetworkOutput) ServiceRuntimeNetworkResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpringCloudServiceNetwork) *string { return v.ServiceRuntimeNetworkResourceGroup }).(pulumi.StringPtrOutput)
}

// Specifies the ID of the Subnet where the Service Runtime components of the Spring Cloud Service will exist. Changing this forces a new resource to be created.
func (o SpringCloudServiceNetworkOutput) ServiceRuntimeSubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudServiceNetwork) string { return v.ServiceRuntimeSubnetId }).(pulumi.StringOutput)
}

type SpringCloudServiceNetworkPtrOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceNetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudServiceNetwork)(nil)).Elem()
}

func (o SpringCloudServiceNetworkPtrOutput) ToSpringCloudServiceNetworkPtrOutput() SpringCloudServiceNetworkPtrOutput {
	return o
}

func (o SpringCloudServiceNetworkPtrOutput) ToSpringCloudServiceNetworkPtrOutputWithContext(ctx context.Context) SpringCloudServiceNetworkPtrOutput {
	return o
}

func (o SpringCloudServiceNetworkPtrOutput) Elem() SpringCloudServiceNetworkOutput {
	return o.ApplyT(func(v *SpringCloudServiceNetwork) SpringCloudServiceNetwork { return *v }).(SpringCloudServiceNetworkOutput)
}

// Specifies the Name of the resource group containing network resources of Azure Spring Cloud Apps. Changing this forces a new resource to be created.
func (o SpringCloudServiceNetworkPtrOutput) AppNetworkResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceNetwork) *string {
		if v == nil {
			return nil
		}
		return v.AppNetworkResourceGroup
	}).(pulumi.StringPtrOutput)
}

// Specifies the ID of the Subnet which should host the Spring Boot Applications deployed in this Spring Cloud Service. Changing this forces a new resource to be created.
func (o SpringCloudServiceNetworkPtrOutput) AppSubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceNetwork) *string {
		if v == nil {
			return nil
		}
		return &v.AppSubnetId
	}).(pulumi.StringPtrOutput)
}

// A list of (at least 3) CIDR ranges (at least /16) which are used to host the Spring Cloud infrastructure, which must not overlap with any existing CIDR ranges in the Subnet. Changing this forces a new resource to be created.
func (o SpringCloudServiceNetworkPtrOutput) CidrRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SpringCloudServiceNetwork) []string {
		if v == nil {
			return nil
		}
		return v.CidrRanges
	}).(pulumi.StringArrayOutput)
}

// Specifies the Name of the resource group containing network resources of Azure Spring Cloud Service Runtime. Changing this forces a new resource to be created.
func (o SpringCloudServiceNetworkPtrOutput) ServiceRuntimeNetworkResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceNetwork) *string {
		if v == nil {
			return nil
		}
		return v.ServiceRuntimeNetworkResourceGroup
	}).(pulumi.StringPtrOutput)
}

// Specifies the ID of the Subnet where the Service Runtime components of the Spring Cloud Service will exist. Changing this forces a new resource to be created.
func (o SpringCloudServiceNetworkPtrOutput) ServiceRuntimeSubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceNetwork) *string {
		if v == nil {
			return nil
		}
		return &v.ServiceRuntimeSubnetId
	}).(pulumi.StringPtrOutput)
}

type SpringCloudServiceTrace struct {
	// The Instrumentation Key used for Application Insights.
	InstrumentationKey string `pulumi:"instrumentationKey"`
	// The sampling rate of Application Insights Agent. Must be between `0.0` and `100.0`. Defaults to `10.0`.
	SampleRate *float64 `pulumi:"sampleRate"`
}

// SpringCloudServiceTraceInput is an input type that accepts SpringCloudServiceTraceArgs and SpringCloudServiceTraceOutput values.
// You can construct a concrete instance of `SpringCloudServiceTraceInput` via:
//
//          SpringCloudServiceTraceArgs{...}
type SpringCloudServiceTraceInput interface {
	pulumi.Input

	ToSpringCloudServiceTraceOutput() SpringCloudServiceTraceOutput
	ToSpringCloudServiceTraceOutputWithContext(context.Context) SpringCloudServiceTraceOutput
}

type SpringCloudServiceTraceArgs struct {
	// The Instrumentation Key used for Application Insights.
	InstrumentationKey pulumi.StringInput `pulumi:"instrumentationKey"`
	// The sampling rate of Application Insights Agent. Must be between `0.0` and `100.0`. Defaults to `10.0`.
	SampleRate pulumi.Float64PtrInput `pulumi:"sampleRate"`
}

func (SpringCloudServiceTraceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceTrace)(nil)).Elem()
}

func (i SpringCloudServiceTraceArgs) ToSpringCloudServiceTraceOutput() SpringCloudServiceTraceOutput {
	return i.ToSpringCloudServiceTraceOutputWithContext(context.Background())
}

func (i SpringCloudServiceTraceArgs) ToSpringCloudServiceTraceOutputWithContext(ctx context.Context) SpringCloudServiceTraceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceTraceOutput)
}

func (i SpringCloudServiceTraceArgs) ToSpringCloudServiceTracePtrOutput() SpringCloudServiceTracePtrOutput {
	return i.ToSpringCloudServiceTracePtrOutputWithContext(context.Background())
}

func (i SpringCloudServiceTraceArgs) ToSpringCloudServiceTracePtrOutputWithContext(ctx context.Context) SpringCloudServiceTracePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceTraceOutput).ToSpringCloudServiceTracePtrOutputWithContext(ctx)
}

// SpringCloudServiceTracePtrInput is an input type that accepts SpringCloudServiceTraceArgs, SpringCloudServiceTracePtr and SpringCloudServiceTracePtrOutput values.
// You can construct a concrete instance of `SpringCloudServiceTracePtrInput` via:
//
//          SpringCloudServiceTraceArgs{...}
//
//  or:
//
//          nil
type SpringCloudServiceTracePtrInput interface {
	pulumi.Input

	ToSpringCloudServiceTracePtrOutput() SpringCloudServiceTracePtrOutput
	ToSpringCloudServiceTracePtrOutputWithContext(context.Context) SpringCloudServiceTracePtrOutput
}

type springCloudServiceTracePtrType SpringCloudServiceTraceArgs

func SpringCloudServiceTracePtr(v *SpringCloudServiceTraceArgs) SpringCloudServiceTracePtrInput {
	return (*springCloudServiceTracePtrType)(v)
}

func (*springCloudServiceTracePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudServiceTrace)(nil)).Elem()
}

func (i *springCloudServiceTracePtrType) ToSpringCloudServiceTracePtrOutput() SpringCloudServiceTracePtrOutput {
	return i.ToSpringCloudServiceTracePtrOutputWithContext(context.Background())
}

func (i *springCloudServiceTracePtrType) ToSpringCloudServiceTracePtrOutputWithContext(ctx context.Context) SpringCloudServiceTracePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringCloudServiceTracePtrOutput)
}

type SpringCloudServiceTraceOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceTraceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpringCloudServiceTrace)(nil)).Elem()
}

func (o SpringCloudServiceTraceOutput) ToSpringCloudServiceTraceOutput() SpringCloudServiceTraceOutput {
	return o
}

func (o SpringCloudServiceTraceOutput) ToSpringCloudServiceTraceOutputWithContext(ctx context.Context) SpringCloudServiceTraceOutput {
	return o
}

func (o SpringCloudServiceTraceOutput) ToSpringCloudServiceTracePtrOutput() SpringCloudServiceTracePtrOutput {
	return o.ToSpringCloudServiceTracePtrOutputWithContext(context.Background())
}

func (o SpringCloudServiceTraceOutput) ToSpringCloudServiceTracePtrOutputWithContext(ctx context.Context) SpringCloudServiceTracePtrOutput {
	return o.ApplyT(func(v SpringCloudServiceTrace) *SpringCloudServiceTrace {
		return &v
	}).(SpringCloudServiceTracePtrOutput)
}

// The Instrumentation Key used for Application Insights.
func (o SpringCloudServiceTraceOutput) InstrumentationKey() pulumi.StringOutput {
	return o.ApplyT(func(v SpringCloudServiceTrace) string { return v.InstrumentationKey }).(pulumi.StringOutput)
}

// The sampling rate of Application Insights Agent. Must be between `0.0` and `100.0`. Defaults to `10.0`.
func (o SpringCloudServiceTraceOutput) SampleRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SpringCloudServiceTrace) *float64 { return v.SampleRate }).(pulumi.Float64PtrOutput)
}

type SpringCloudServiceTracePtrOutput struct{ *pulumi.OutputState }

func (SpringCloudServiceTracePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpringCloudServiceTrace)(nil)).Elem()
}

func (o SpringCloudServiceTracePtrOutput) ToSpringCloudServiceTracePtrOutput() SpringCloudServiceTracePtrOutput {
	return o
}

func (o SpringCloudServiceTracePtrOutput) ToSpringCloudServiceTracePtrOutputWithContext(ctx context.Context) SpringCloudServiceTracePtrOutput {
	return o
}

func (o SpringCloudServiceTracePtrOutput) Elem() SpringCloudServiceTraceOutput {
	return o.ApplyT(func(v *SpringCloudServiceTrace) SpringCloudServiceTrace { return *v }).(SpringCloudServiceTraceOutput)
}

// The Instrumentation Key used for Application Insights.
func (o SpringCloudServiceTracePtrOutput) InstrumentationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceTrace) *string {
		if v == nil {
			return nil
		}
		return &v.InstrumentationKey
	}).(pulumi.StringPtrOutput)
}

// The sampling rate of Application Insights Agent. Must be between `0.0` and `100.0`. Defaults to `10.0`.
func (o SpringCloudServiceTracePtrOutput) SampleRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SpringCloudServiceTrace) *float64 {
		if v == nil {
			return nil
		}
		return v.SampleRate
	}).(pulumi.Float64PtrOutput)
}

type GetSpringCloudAppIdentity struct {
	// The Principal ID for the Service Principal associated with the Managed Service Identity of this Spring Cloud Application.
	PrincipalId string `pulumi:"principalId"`
	// The Tenant ID for the Service Principal associated with the Managed Service Identity of this Spring Cloud Application.
	TenantId string `pulumi:"tenantId"`
	// The Type of Managed Identity assigned to the Spring Cloud Application.
	Type string `pulumi:"type"`
}

// GetSpringCloudAppIdentityInput is an input type that accepts GetSpringCloudAppIdentityArgs and GetSpringCloudAppIdentityOutput values.
// You can construct a concrete instance of `GetSpringCloudAppIdentityInput` via:
//
//          GetSpringCloudAppIdentityArgs{...}
type GetSpringCloudAppIdentityInput interface {
	pulumi.Input

	ToGetSpringCloudAppIdentityOutput() GetSpringCloudAppIdentityOutput
	ToGetSpringCloudAppIdentityOutputWithContext(context.Context) GetSpringCloudAppIdentityOutput
}

type GetSpringCloudAppIdentityArgs struct {
	// The Principal ID for the Service Principal associated with the Managed Service Identity of this Spring Cloud Application.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The Tenant ID for the Service Principal associated with the Managed Service Identity of this Spring Cloud Application.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The Type of Managed Identity assigned to the Spring Cloud Application.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetSpringCloudAppIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpringCloudAppIdentity)(nil)).Elem()
}

func (i GetSpringCloudAppIdentityArgs) ToGetSpringCloudAppIdentityOutput() GetSpringCloudAppIdentityOutput {
	return i.ToGetSpringCloudAppIdentityOutputWithContext(context.Background())
}

func (i GetSpringCloudAppIdentityArgs) ToGetSpringCloudAppIdentityOutputWithContext(ctx context.Context) GetSpringCloudAppIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpringCloudAppIdentityOutput)
}

// GetSpringCloudAppIdentityArrayInput is an input type that accepts GetSpringCloudAppIdentityArray and GetSpringCloudAppIdentityArrayOutput values.
// You can construct a concrete instance of `GetSpringCloudAppIdentityArrayInput` via:
//
//          GetSpringCloudAppIdentityArray{ GetSpringCloudAppIdentityArgs{...} }
type GetSpringCloudAppIdentityArrayInput interface {
	pulumi.Input

	ToGetSpringCloudAppIdentityArrayOutput() GetSpringCloudAppIdentityArrayOutput
	ToGetSpringCloudAppIdentityArrayOutputWithContext(context.Context) GetSpringCloudAppIdentityArrayOutput
}

type GetSpringCloudAppIdentityArray []GetSpringCloudAppIdentityInput

func (GetSpringCloudAppIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpringCloudAppIdentity)(nil)).Elem()
}

func (i GetSpringCloudAppIdentityArray) ToGetSpringCloudAppIdentityArrayOutput() GetSpringCloudAppIdentityArrayOutput {
	return i.ToGetSpringCloudAppIdentityArrayOutputWithContext(context.Background())
}

func (i GetSpringCloudAppIdentityArray) ToGetSpringCloudAppIdentityArrayOutputWithContext(ctx context.Context) GetSpringCloudAppIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpringCloudAppIdentityArrayOutput)
}

type GetSpringCloudAppIdentityOutput struct{ *pulumi.OutputState }

func (GetSpringCloudAppIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpringCloudAppIdentity)(nil)).Elem()
}

func (o GetSpringCloudAppIdentityOutput) ToGetSpringCloudAppIdentityOutput() GetSpringCloudAppIdentityOutput {
	return o
}

func (o GetSpringCloudAppIdentityOutput) ToGetSpringCloudAppIdentityOutputWithContext(ctx context.Context) GetSpringCloudAppIdentityOutput {
	return o
}

// The Principal ID for the Service Principal associated with the Managed Service Identity of this Spring Cloud Application.
func (o GetSpringCloudAppIdentityOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudAppIdentity) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The Tenant ID for the Service Principal associated with the Managed Service Identity of this Spring Cloud Application.
func (o GetSpringCloudAppIdentityOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudAppIdentity) string { return v.TenantId }).(pulumi.StringOutput)
}

// The Type of Managed Identity assigned to the Spring Cloud Application.
func (o GetSpringCloudAppIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudAppIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type GetSpringCloudAppIdentityArrayOutput struct{ *pulumi.OutputState }

func (GetSpringCloudAppIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpringCloudAppIdentity)(nil)).Elem()
}

func (o GetSpringCloudAppIdentityArrayOutput) ToGetSpringCloudAppIdentityArrayOutput() GetSpringCloudAppIdentityArrayOutput {
	return o
}

func (o GetSpringCloudAppIdentityArrayOutput) ToGetSpringCloudAppIdentityArrayOutputWithContext(ctx context.Context) GetSpringCloudAppIdentityArrayOutput {
	return o
}

func (o GetSpringCloudAppIdentityArrayOutput) Index(i pulumi.IntInput) GetSpringCloudAppIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSpringCloudAppIdentity {
		return vs[0].([]GetSpringCloudAppIdentity)[vs[1].(int)]
	}).(GetSpringCloudAppIdentityOutput)
}

type GetSpringCloudAppPersistentDisk struct {
	// The mount path of the persistent disk.
	MountPath string `pulumi:"mountPath"`
	// The size of the persistent disk in GB.
	SizeInGb int `pulumi:"sizeInGb"`
}

// GetSpringCloudAppPersistentDiskInput is an input type that accepts GetSpringCloudAppPersistentDiskArgs and GetSpringCloudAppPersistentDiskOutput values.
// You can construct a concrete instance of `GetSpringCloudAppPersistentDiskInput` via:
//
//          GetSpringCloudAppPersistentDiskArgs{...}
type GetSpringCloudAppPersistentDiskInput interface {
	pulumi.Input

	ToGetSpringCloudAppPersistentDiskOutput() GetSpringCloudAppPersistentDiskOutput
	ToGetSpringCloudAppPersistentDiskOutputWithContext(context.Context) GetSpringCloudAppPersistentDiskOutput
}

type GetSpringCloudAppPersistentDiskArgs struct {
	// The mount path of the persistent disk.
	MountPath pulumi.StringInput `pulumi:"mountPath"`
	// The size of the persistent disk in GB.
	SizeInGb pulumi.IntInput `pulumi:"sizeInGb"`
}

func (GetSpringCloudAppPersistentDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpringCloudAppPersistentDisk)(nil)).Elem()
}

func (i GetSpringCloudAppPersistentDiskArgs) ToGetSpringCloudAppPersistentDiskOutput() GetSpringCloudAppPersistentDiskOutput {
	return i.ToGetSpringCloudAppPersistentDiskOutputWithContext(context.Background())
}

func (i GetSpringCloudAppPersistentDiskArgs) ToGetSpringCloudAppPersistentDiskOutputWithContext(ctx context.Context) GetSpringCloudAppPersistentDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpringCloudAppPersistentDiskOutput)
}

// GetSpringCloudAppPersistentDiskArrayInput is an input type that accepts GetSpringCloudAppPersistentDiskArray and GetSpringCloudAppPersistentDiskArrayOutput values.
// You can construct a concrete instance of `GetSpringCloudAppPersistentDiskArrayInput` via:
//
//          GetSpringCloudAppPersistentDiskArray{ GetSpringCloudAppPersistentDiskArgs{...} }
type GetSpringCloudAppPersistentDiskArrayInput interface {
	pulumi.Input

	ToGetSpringCloudAppPersistentDiskArrayOutput() GetSpringCloudAppPersistentDiskArrayOutput
	ToGetSpringCloudAppPersistentDiskArrayOutputWithContext(context.Context) GetSpringCloudAppPersistentDiskArrayOutput
}

type GetSpringCloudAppPersistentDiskArray []GetSpringCloudAppPersistentDiskInput

func (GetSpringCloudAppPersistentDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpringCloudAppPersistentDisk)(nil)).Elem()
}

func (i GetSpringCloudAppPersistentDiskArray) ToGetSpringCloudAppPersistentDiskArrayOutput() GetSpringCloudAppPersistentDiskArrayOutput {
	return i.ToGetSpringCloudAppPersistentDiskArrayOutputWithContext(context.Background())
}

func (i GetSpringCloudAppPersistentDiskArray) ToGetSpringCloudAppPersistentDiskArrayOutputWithContext(ctx context.Context) GetSpringCloudAppPersistentDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpringCloudAppPersistentDiskArrayOutput)
}

type GetSpringCloudAppPersistentDiskOutput struct{ *pulumi.OutputState }

func (GetSpringCloudAppPersistentDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpringCloudAppPersistentDisk)(nil)).Elem()
}

func (o GetSpringCloudAppPersistentDiskOutput) ToGetSpringCloudAppPersistentDiskOutput() GetSpringCloudAppPersistentDiskOutput {
	return o
}

func (o GetSpringCloudAppPersistentDiskOutput) ToGetSpringCloudAppPersistentDiskOutputWithContext(ctx context.Context) GetSpringCloudAppPersistentDiskOutput {
	return o
}

// The mount path of the persistent disk.
func (o GetSpringCloudAppPersistentDiskOutput) MountPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudAppPersistentDisk) string { return v.MountPath }).(pulumi.StringOutput)
}

// The size of the persistent disk in GB.
func (o GetSpringCloudAppPersistentDiskOutput) SizeInGb() pulumi.IntOutput {
	return o.ApplyT(func(v GetSpringCloudAppPersistentDisk) int { return v.SizeInGb }).(pulumi.IntOutput)
}

type GetSpringCloudAppPersistentDiskArrayOutput struct{ *pulumi.OutputState }

func (GetSpringCloudAppPersistentDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpringCloudAppPersistentDisk)(nil)).Elem()
}

func (o GetSpringCloudAppPersistentDiskArrayOutput) ToGetSpringCloudAppPersistentDiskArrayOutput() GetSpringCloudAppPersistentDiskArrayOutput {
	return o
}

func (o GetSpringCloudAppPersistentDiskArrayOutput) ToGetSpringCloudAppPersistentDiskArrayOutputWithContext(ctx context.Context) GetSpringCloudAppPersistentDiskArrayOutput {
	return o
}

func (o GetSpringCloudAppPersistentDiskArrayOutput) Index(i pulumi.IntInput) GetSpringCloudAppPersistentDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSpringCloudAppPersistentDisk {
		return vs[0].([]GetSpringCloudAppPersistentDisk)[vs[1].(int)]
	}).(GetSpringCloudAppPersistentDiskOutput)
}

type GetSpringCloudServiceConfigServerGitSetting struct {
	// A `httpBasicAuth` block as defined below.
	HttpBasicAuths []GetSpringCloudServiceConfigServerGitSettingHttpBasicAuth `pulumi:"httpBasicAuths"`
	// The default label of the Git repository, which is a branch name, tag name, or commit-id of the repository
	Label string `pulumi:"label"`
	// One or more `repository` blocks as defined below.
	Repositories []GetSpringCloudServiceConfigServerGitSettingRepository `pulumi:"repositories"`
	// An array of strings used to search subdirectories of the Git repository.
	SearchPaths []string `pulumi:"searchPaths"`
	// A `sshAuth` block as defined below.
	SshAuths []GetSpringCloudServiceConfigServerGitSettingSshAuth `pulumi:"sshAuths"`
	// The URI of the Git repository
	Uri string `pulumi:"uri"`
}

// GetSpringCloudServiceConfigServerGitSettingInput is an input type that accepts GetSpringCloudServiceConfigServerGitSettingArgs and GetSpringCloudServiceConfigServerGitSettingOutput values.
// You can construct a concrete instance of `GetSpringCloudServiceConfigServerGitSettingInput` via:
//
//          GetSpringCloudServiceConfigServerGitSettingArgs{...}
type GetSpringCloudServiceConfigServerGitSettingInput interface {
	pulumi.Input

	ToGetSpringCloudServiceConfigServerGitSettingOutput() GetSpringCloudServiceConfigServerGitSettingOutput
	ToGetSpringCloudServiceConfigServerGitSettingOutputWithContext(context.Context) GetSpringCloudServiceConfigServerGitSettingOutput
}

type GetSpringCloudServiceConfigServerGitSettingArgs struct {
	// A `httpBasicAuth` block as defined below.
	HttpBasicAuths GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayInput `pulumi:"httpBasicAuths"`
	// The default label of the Git repository, which is a branch name, tag name, or commit-id of the repository
	Label pulumi.StringInput `pulumi:"label"`
	// One or more `repository` blocks as defined below.
	Repositories GetSpringCloudServiceConfigServerGitSettingRepositoryArrayInput `pulumi:"repositories"`
	// An array of strings used to search subdirectories of the Git repository.
	SearchPaths pulumi.StringArrayInput `pulumi:"searchPaths"`
	// A `sshAuth` block as defined below.
	SshAuths GetSpringCloudServiceConfigServerGitSettingSshAuthArrayInput `pulumi:"sshAuths"`
	// The URI of the Git repository
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (GetSpringCloudServiceConfigServerGitSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSetting)(nil)).Elem()
}

func (i GetSpringCloudServiceConfigServerGitSettingArgs) ToGetSpringCloudServiceConfigServerGitSettingOutput() GetSpringCloudServiceConfigServerGitSettingOutput {
	return i.ToGetSpringCloudServiceConfigServerGitSettingOutputWithContext(context.Background())
}

func (i GetSpringCloudServiceConfigServerGitSettingArgs) ToGetSpringCloudServiceConfigServerGitSettingOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpringCloudServiceConfigServerGitSettingOutput)
}

// GetSpringCloudServiceConfigServerGitSettingArrayInput is an input type that accepts GetSpringCloudServiceConfigServerGitSettingArray and GetSpringCloudServiceConfigServerGitSettingArrayOutput values.
// You can construct a concrete instance of `GetSpringCloudServiceConfigServerGitSettingArrayInput` via:
//
//          GetSpringCloudServiceConfigServerGitSettingArray{ GetSpringCloudServiceConfigServerGitSettingArgs{...} }
type GetSpringCloudServiceConfigServerGitSettingArrayInput interface {
	pulumi.Input

	ToGetSpringCloudServiceConfigServerGitSettingArrayOutput() GetSpringCloudServiceConfigServerGitSettingArrayOutput
	ToGetSpringCloudServiceConfigServerGitSettingArrayOutputWithContext(context.Context) GetSpringCloudServiceConfigServerGitSettingArrayOutput
}

type GetSpringCloudServiceConfigServerGitSettingArray []GetSpringCloudServiceConfigServerGitSettingInput

func (GetSpringCloudServiceConfigServerGitSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpringCloudServiceConfigServerGitSetting)(nil)).Elem()
}

func (i GetSpringCloudServiceConfigServerGitSettingArray) ToGetSpringCloudServiceConfigServerGitSettingArrayOutput() GetSpringCloudServiceConfigServerGitSettingArrayOutput {
	return i.ToGetSpringCloudServiceConfigServerGitSettingArrayOutputWithContext(context.Background())
}

func (i GetSpringCloudServiceConfigServerGitSettingArray) ToGetSpringCloudServiceConfigServerGitSettingArrayOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpringCloudServiceConfigServerGitSettingArrayOutput)
}

type GetSpringCloudServiceConfigServerGitSettingOutput struct{ *pulumi.OutputState }

func (GetSpringCloudServiceConfigServerGitSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSetting)(nil)).Elem()
}

func (o GetSpringCloudServiceConfigServerGitSettingOutput) ToGetSpringCloudServiceConfigServerGitSettingOutput() GetSpringCloudServiceConfigServerGitSettingOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingOutput) ToGetSpringCloudServiceConfigServerGitSettingOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingOutput {
	return o
}

// A `httpBasicAuth` block as defined below.
func (o GetSpringCloudServiceConfigServerGitSettingOutput) HttpBasicAuths() GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSetting) []GetSpringCloudServiceConfigServerGitSettingHttpBasicAuth {
		return v.HttpBasicAuths
	}).(GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput)
}

// The default label of the Git repository, which is a branch name, tag name, or commit-id of the repository
func (o GetSpringCloudServiceConfigServerGitSettingOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSetting) string { return v.Label }).(pulumi.StringOutput)
}

// One or more `repository` blocks as defined below.
func (o GetSpringCloudServiceConfigServerGitSettingOutput) Repositories() GetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSetting) []GetSpringCloudServiceConfigServerGitSettingRepository {
		return v.Repositories
	}).(GetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput)
}

// An array of strings used to search subdirectories of the Git repository.
func (o GetSpringCloudServiceConfigServerGitSettingOutput) SearchPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSetting) []string { return v.SearchPaths }).(pulumi.StringArrayOutput)
}

// A `sshAuth` block as defined below.
func (o GetSpringCloudServiceConfigServerGitSettingOutput) SshAuths() GetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSetting) []GetSpringCloudServiceConfigServerGitSettingSshAuth {
		return v.SshAuths
	}).(GetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput)
}

// The URI of the Git repository
func (o GetSpringCloudServiceConfigServerGitSettingOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSetting) string { return v.Uri }).(pulumi.StringOutput)
}

type GetSpringCloudServiceConfigServerGitSettingArrayOutput struct{ *pulumi.OutputState }

func (GetSpringCloudServiceConfigServerGitSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpringCloudServiceConfigServerGitSetting)(nil)).Elem()
}

func (o GetSpringCloudServiceConfigServerGitSettingArrayOutput) ToGetSpringCloudServiceConfigServerGitSettingArrayOutput() GetSpringCloudServiceConfigServerGitSettingArrayOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingArrayOutput) ToGetSpringCloudServiceConfigServerGitSettingArrayOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingArrayOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingArrayOutput) Index(i pulumi.IntInput) GetSpringCloudServiceConfigServerGitSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSpringCloudServiceConfigServerGitSetting {
		return vs[0].([]GetSpringCloudServiceConfigServerGitSetting)[vs[1].(int)]
	}).(GetSpringCloudServiceConfigServerGitSettingOutput)
}

type GetSpringCloudServiceConfigServerGitSettingHttpBasicAuth struct {
	// The password used to access the Http Basic Authentication Git repository server.
	Password string `pulumi:"password"`
	// The username used to access the Http Basic Authentication Git repository server.
	Username string `pulumi:"username"`
}

// GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthInput is an input type that accepts GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs and GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput values.
// You can construct a concrete instance of `GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthInput` via:
//
//          GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs{...}
type GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthInput interface {
	pulumi.Input

	ToGetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput() GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput
	ToGetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutputWithContext(context.Context) GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput
}

type GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs struct {
	// The password used to access the Http Basic Authentication Git repository server.
	Password pulumi.StringInput `pulumi:"password"`
	// The username used to access the Http Basic Authentication Git repository server.
	Username pulumi.StringInput `pulumi:"username"`
}

func (GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSettingHttpBasicAuth)(nil)).Elem()
}

func (i GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs) ToGetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput() GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput {
	return i.ToGetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutputWithContext(context.Background())
}

func (i GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs) ToGetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput)
}

// GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayInput is an input type that accepts GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArray and GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput values.
// You can construct a concrete instance of `GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayInput` via:
//
//          GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArray{ GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArgs{...} }
type GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayInput interface {
	pulumi.Input

	ToGetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput() GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput
	ToGetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutputWithContext(context.Context) GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput
}

type GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArray []GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthInput

func (GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpringCloudServiceConfigServerGitSettingHttpBasicAuth)(nil)).Elem()
}

func (i GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArray) ToGetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput() GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput {
	return i.ToGetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutputWithContext(context.Background())
}

func (i GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArray) ToGetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput)
}

type GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput struct{ *pulumi.OutputState }

func (GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSettingHttpBasicAuth)(nil)).Elem()
}

func (o GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput) ToGetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput() GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput) ToGetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput {
	return o
}

// The password used to access the Http Basic Authentication Git repository server.
func (o GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingHttpBasicAuth) string { return v.Password }).(pulumi.StringOutput)
}

// The username used to access the Http Basic Authentication Git repository server.
func (o GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingHttpBasicAuth) string { return v.Username }).(pulumi.StringOutput)
}

type GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput struct{ *pulumi.OutputState }

func (GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpringCloudServiceConfigServerGitSettingHttpBasicAuth)(nil)).Elem()
}

func (o GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput) ToGetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput() GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput) ToGetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput) Index(i pulumi.IntInput) GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSpringCloudServiceConfigServerGitSettingHttpBasicAuth {
		return vs[0].([]GetSpringCloudServiceConfigServerGitSettingHttpBasicAuth)[vs[1].(int)]
	}).(GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput)
}

type GetSpringCloudServiceConfigServerGitSettingRepository struct {
	// A `httpBasicAuth` block as defined below.
	HttpBasicAuths []GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth `pulumi:"httpBasicAuths"`
	// The default label of the Git repository, which is a branch name, tag name, or commit-id of the repository
	Label string `pulumi:"label"`
	// Specifies The name of the Spring Cloud Service resource.
	Name string `pulumi:"name"`
	// An array of strings used to match an application name. For each pattern, use the `{application}/{profile}` format with wildcards.
	Patterns []string `pulumi:"patterns"`
	// An array of strings used to search subdirectories of the Git repository.
	SearchPaths []string `pulumi:"searchPaths"`
	// A `sshAuth` block as defined below.
	SshAuths []GetSpringCloudServiceConfigServerGitSettingRepositorySshAuth `pulumi:"sshAuths"`
	// The URI of the Git repository
	Uri string `pulumi:"uri"`
}

// GetSpringCloudServiceConfigServerGitSettingRepositoryInput is an input type that accepts GetSpringCloudServiceConfigServerGitSettingRepositoryArgs and GetSpringCloudServiceConfigServerGitSettingRepositoryOutput values.
// You can construct a concrete instance of `GetSpringCloudServiceConfigServerGitSettingRepositoryInput` via:
//
//          GetSpringCloudServiceConfigServerGitSettingRepositoryArgs{...}
type GetSpringCloudServiceConfigServerGitSettingRepositoryInput interface {
	pulumi.Input

	ToGetSpringCloudServiceConfigServerGitSettingRepositoryOutput() GetSpringCloudServiceConfigServerGitSettingRepositoryOutput
	ToGetSpringCloudServiceConfigServerGitSettingRepositoryOutputWithContext(context.Context) GetSpringCloudServiceConfigServerGitSettingRepositoryOutput
}

type GetSpringCloudServiceConfigServerGitSettingRepositoryArgs struct {
	// A `httpBasicAuth` block as defined below.
	HttpBasicAuths GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayInput `pulumi:"httpBasicAuths"`
	// The default label of the Git repository, which is a branch name, tag name, or commit-id of the repository
	Label pulumi.StringInput `pulumi:"label"`
	// Specifies The name of the Spring Cloud Service resource.
	Name pulumi.StringInput `pulumi:"name"`
	// An array of strings used to match an application name. For each pattern, use the `{application}/{profile}` format with wildcards.
	Patterns pulumi.StringArrayInput `pulumi:"patterns"`
	// An array of strings used to search subdirectories of the Git repository.
	SearchPaths pulumi.StringArrayInput `pulumi:"searchPaths"`
	// A `sshAuth` block as defined below.
	SshAuths GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayInput `pulumi:"sshAuths"`
	// The URI of the Git repository
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (GetSpringCloudServiceConfigServerGitSettingRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSettingRepository)(nil)).Elem()
}

func (i GetSpringCloudServiceConfigServerGitSettingRepositoryArgs) ToGetSpringCloudServiceConfigServerGitSettingRepositoryOutput() GetSpringCloudServiceConfigServerGitSettingRepositoryOutput {
	return i.ToGetSpringCloudServiceConfigServerGitSettingRepositoryOutputWithContext(context.Background())
}

func (i GetSpringCloudServiceConfigServerGitSettingRepositoryArgs) ToGetSpringCloudServiceConfigServerGitSettingRepositoryOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpringCloudServiceConfigServerGitSettingRepositoryOutput)
}

// GetSpringCloudServiceConfigServerGitSettingRepositoryArrayInput is an input type that accepts GetSpringCloudServiceConfigServerGitSettingRepositoryArray and GetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput values.
// You can construct a concrete instance of `GetSpringCloudServiceConfigServerGitSettingRepositoryArrayInput` via:
//
//          GetSpringCloudServiceConfigServerGitSettingRepositoryArray{ GetSpringCloudServiceConfigServerGitSettingRepositoryArgs{...} }
type GetSpringCloudServiceConfigServerGitSettingRepositoryArrayInput interface {
	pulumi.Input

	ToGetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput() GetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput
	ToGetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutputWithContext(context.Context) GetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput
}

type GetSpringCloudServiceConfigServerGitSettingRepositoryArray []GetSpringCloudServiceConfigServerGitSettingRepositoryInput

func (GetSpringCloudServiceConfigServerGitSettingRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpringCloudServiceConfigServerGitSettingRepository)(nil)).Elem()
}

func (i GetSpringCloudServiceConfigServerGitSettingRepositoryArray) ToGetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput() GetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput {
	return i.ToGetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutputWithContext(context.Background())
}

func (i GetSpringCloudServiceConfigServerGitSettingRepositoryArray) ToGetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput)
}

type GetSpringCloudServiceConfigServerGitSettingRepositoryOutput struct{ *pulumi.OutputState }

func (GetSpringCloudServiceConfigServerGitSettingRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSettingRepository)(nil)).Elem()
}

func (o GetSpringCloudServiceConfigServerGitSettingRepositoryOutput) ToGetSpringCloudServiceConfigServerGitSettingRepositoryOutput() GetSpringCloudServiceConfigServerGitSettingRepositoryOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingRepositoryOutput) ToGetSpringCloudServiceConfigServerGitSettingRepositoryOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingRepositoryOutput {
	return o
}

// A `httpBasicAuth` block as defined below.
func (o GetSpringCloudServiceConfigServerGitSettingRepositoryOutput) HttpBasicAuths() GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingRepository) []GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth {
		return v.HttpBasicAuths
	}).(GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput)
}

// The default label of the Git repository, which is a branch name, tag name, or commit-id of the repository
func (o GetSpringCloudServiceConfigServerGitSettingRepositoryOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingRepository) string { return v.Label }).(pulumi.StringOutput)
}

// Specifies The name of the Spring Cloud Service resource.
func (o GetSpringCloudServiceConfigServerGitSettingRepositoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingRepository) string { return v.Name }).(pulumi.StringOutput)
}

// An array of strings used to match an application name. For each pattern, use the `{application}/{profile}` format with wildcards.
func (o GetSpringCloudServiceConfigServerGitSettingRepositoryOutput) Patterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingRepository) []string { return v.Patterns }).(pulumi.StringArrayOutput)
}

// An array of strings used to search subdirectories of the Git repository.
func (o GetSpringCloudServiceConfigServerGitSettingRepositoryOutput) SearchPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingRepository) []string { return v.SearchPaths }).(pulumi.StringArrayOutput)
}

// A `sshAuth` block as defined below.
func (o GetSpringCloudServiceConfigServerGitSettingRepositoryOutput) SshAuths() GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingRepository) []GetSpringCloudServiceConfigServerGitSettingRepositorySshAuth {
		return v.SshAuths
	}).(GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput)
}

// The URI of the Git repository
func (o GetSpringCloudServiceConfigServerGitSettingRepositoryOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingRepository) string { return v.Uri }).(pulumi.StringOutput)
}

type GetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput struct{ *pulumi.OutputState }

func (GetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpringCloudServiceConfigServerGitSettingRepository)(nil)).Elem()
}

func (o GetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput) ToGetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput() GetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput) ToGetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput) Index(i pulumi.IntInput) GetSpringCloudServiceConfigServerGitSettingRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSpringCloudServiceConfigServerGitSettingRepository {
		return vs[0].([]GetSpringCloudServiceConfigServerGitSettingRepository)[vs[1].(int)]
	}).(GetSpringCloudServiceConfigServerGitSettingRepositoryOutput)
}

type GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth struct {
	// The password used to access the Http Basic Authentication Git repository server.
	Password string `pulumi:"password"`
	// The username used to access the Http Basic Authentication Git repository server.
	Username string `pulumi:"username"`
}

// GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthInput is an input type that accepts GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs and GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput values.
// You can construct a concrete instance of `GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthInput` via:
//
//          GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs{...}
type GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthInput interface {
	pulumi.Input

	ToGetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput() GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput
	ToGetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutputWithContext(context.Context) GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput
}

type GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs struct {
	// The password used to access the Http Basic Authentication Git repository server.
	Password pulumi.StringInput `pulumi:"password"`
	// The username used to access the Http Basic Authentication Git repository server.
	Username pulumi.StringInput `pulumi:"username"`
}

func (GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth)(nil)).Elem()
}

func (i GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs) ToGetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput() GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput {
	return i.ToGetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutputWithContext(context.Background())
}

func (i GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs) ToGetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput)
}

// GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayInput is an input type that accepts GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArray and GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput values.
// You can construct a concrete instance of `GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayInput` via:
//
//          GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArray{ GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArgs{...} }
type GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayInput interface {
	pulumi.Input

	ToGetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput() GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput
	ToGetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutputWithContext(context.Context) GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput
}

type GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArray []GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthInput

func (GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth)(nil)).Elem()
}

func (i GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArray) ToGetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput() GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput {
	return i.ToGetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutputWithContext(context.Background())
}

func (i GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArray) ToGetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput)
}

type GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput struct{ *pulumi.OutputState }

func (GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth)(nil)).Elem()
}

func (o GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput) ToGetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput() GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput) ToGetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput {
	return o
}

// The password used to access the Http Basic Authentication Git repository server.
func (o GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth) string { return v.Password }).(pulumi.StringOutput)
}

// The username used to access the Http Basic Authentication Git repository server.
func (o GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth) string { return v.Username }).(pulumi.StringOutput)
}

type GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput struct{ *pulumi.OutputState }

func (GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth)(nil)).Elem()
}

func (o GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput) ToGetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput() GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput) ToGetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput) Index(i pulumi.IntInput) GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth {
		return vs[0].([]GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuth)[vs[1].(int)]
	}).(GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput)
}

type GetSpringCloudServiceConfigServerGitSettingRepositorySshAuth struct {
	// The host key of the Git repository server.
	HostKey string `pulumi:"hostKey"`
	// The host key algorithm.
	HostKeyAlgorithm string `pulumi:"hostKeyAlgorithm"`
	// The SSH private key to access the Git repository, needed when the URI starts with `git@` or `ssh://`.
	PrivateKey string `pulumi:"privateKey"`
	// Indicates whether the Config Server instance will fail to start if the hostKey does not match.
	StrictHostKeyCheckingEnabled bool `pulumi:"strictHostKeyCheckingEnabled"`
}

// GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthInput is an input type that accepts GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs and GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput values.
// You can construct a concrete instance of `GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthInput` via:
//
//          GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs{...}
type GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthInput interface {
	pulumi.Input

	ToGetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput() GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput
	ToGetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutputWithContext(context.Context) GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput
}

type GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs struct {
	// The host key of the Git repository server.
	HostKey pulumi.StringInput `pulumi:"hostKey"`
	// The host key algorithm.
	HostKeyAlgorithm pulumi.StringInput `pulumi:"hostKeyAlgorithm"`
	// The SSH private key to access the Git repository, needed when the URI starts with `git@` or `ssh://`.
	PrivateKey pulumi.StringInput `pulumi:"privateKey"`
	// Indicates whether the Config Server instance will fail to start if the hostKey does not match.
	StrictHostKeyCheckingEnabled pulumi.BoolInput `pulumi:"strictHostKeyCheckingEnabled"`
}

func (GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSettingRepositorySshAuth)(nil)).Elem()
}

func (i GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs) ToGetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput() GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput {
	return i.ToGetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutputWithContext(context.Background())
}

func (i GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs) ToGetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput)
}

// GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayInput is an input type that accepts GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArray and GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput values.
// You can construct a concrete instance of `GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayInput` via:
//
//          GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArray{ GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArgs{...} }
type GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayInput interface {
	pulumi.Input

	ToGetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput() GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput
	ToGetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutputWithContext(context.Context) GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput
}

type GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArray []GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthInput

func (GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpringCloudServiceConfigServerGitSettingRepositorySshAuth)(nil)).Elem()
}

func (i GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArray) ToGetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput() GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput {
	return i.ToGetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutputWithContext(context.Background())
}

func (i GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArray) ToGetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput)
}

type GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput struct{ *pulumi.OutputState }

func (GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSettingRepositorySshAuth)(nil)).Elem()
}

func (o GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput) ToGetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput() GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput) ToGetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput {
	return o
}

// The host key of the Git repository server.
func (o GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput) HostKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingRepositorySshAuth) string { return v.HostKey }).(pulumi.StringOutput)
}

// The host key algorithm.
func (o GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput) HostKeyAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingRepositorySshAuth) string { return v.HostKeyAlgorithm }).(pulumi.StringOutput)
}

// The SSH private key to access the Git repository, needed when the URI starts with `git@` or `ssh://`.
func (o GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingRepositorySshAuth) string { return v.PrivateKey }).(pulumi.StringOutput)
}

// Indicates whether the Config Server instance will fail to start if the hostKey does not match.
func (o GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput) StrictHostKeyCheckingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingRepositorySshAuth) bool {
		return v.StrictHostKeyCheckingEnabled
	}).(pulumi.BoolOutput)
}

type GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput struct{ *pulumi.OutputState }

func (GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpringCloudServiceConfigServerGitSettingRepositorySshAuth)(nil)).Elem()
}

func (o GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput) ToGetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput() GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput) ToGetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput) Index(i pulumi.IntInput) GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSpringCloudServiceConfigServerGitSettingRepositorySshAuth {
		return vs[0].([]GetSpringCloudServiceConfigServerGitSettingRepositorySshAuth)[vs[1].(int)]
	}).(GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput)
}

type GetSpringCloudServiceConfigServerGitSettingSshAuth struct {
	// The host key of the Git repository server.
	HostKey string `pulumi:"hostKey"`
	// The host key algorithm.
	HostKeyAlgorithm string `pulumi:"hostKeyAlgorithm"`
	// The SSH private key to access the Git repository, needed when the URI starts with `git@` or `ssh://`.
	PrivateKey string `pulumi:"privateKey"`
	// Indicates whether the Config Server instance will fail to start if the hostKey does not match.
	StrictHostKeyCheckingEnabled bool `pulumi:"strictHostKeyCheckingEnabled"`
}

// GetSpringCloudServiceConfigServerGitSettingSshAuthInput is an input type that accepts GetSpringCloudServiceConfigServerGitSettingSshAuthArgs and GetSpringCloudServiceConfigServerGitSettingSshAuthOutput values.
// You can construct a concrete instance of `GetSpringCloudServiceConfigServerGitSettingSshAuthInput` via:
//
//          GetSpringCloudServiceConfigServerGitSettingSshAuthArgs{...}
type GetSpringCloudServiceConfigServerGitSettingSshAuthInput interface {
	pulumi.Input

	ToGetSpringCloudServiceConfigServerGitSettingSshAuthOutput() GetSpringCloudServiceConfigServerGitSettingSshAuthOutput
	ToGetSpringCloudServiceConfigServerGitSettingSshAuthOutputWithContext(context.Context) GetSpringCloudServiceConfigServerGitSettingSshAuthOutput
}

type GetSpringCloudServiceConfigServerGitSettingSshAuthArgs struct {
	// The host key of the Git repository server.
	HostKey pulumi.StringInput `pulumi:"hostKey"`
	// The host key algorithm.
	HostKeyAlgorithm pulumi.StringInput `pulumi:"hostKeyAlgorithm"`
	// The SSH private key to access the Git repository, needed when the URI starts with `git@` or `ssh://`.
	PrivateKey pulumi.StringInput `pulumi:"privateKey"`
	// Indicates whether the Config Server instance will fail to start if the hostKey does not match.
	StrictHostKeyCheckingEnabled pulumi.BoolInput `pulumi:"strictHostKeyCheckingEnabled"`
}

func (GetSpringCloudServiceConfigServerGitSettingSshAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSettingSshAuth)(nil)).Elem()
}

func (i GetSpringCloudServiceConfigServerGitSettingSshAuthArgs) ToGetSpringCloudServiceConfigServerGitSettingSshAuthOutput() GetSpringCloudServiceConfigServerGitSettingSshAuthOutput {
	return i.ToGetSpringCloudServiceConfigServerGitSettingSshAuthOutputWithContext(context.Background())
}

func (i GetSpringCloudServiceConfigServerGitSettingSshAuthArgs) ToGetSpringCloudServiceConfigServerGitSettingSshAuthOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingSshAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpringCloudServiceConfigServerGitSettingSshAuthOutput)
}

// GetSpringCloudServiceConfigServerGitSettingSshAuthArrayInput is an input type that accepts GetSpringCloudServiceConfigServerGitSettingSshAuthArray and GetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput values.
// You can construct a concrete instance of `GetSpringCloudServiceConfigServerGitSettingSshAuthArrayInput` via:
//
//          GetSpringCloudServiceConfigServerGitSettingSshAuthArray{ GetSpringCloudServiceConfigServerGitSettingSshAuthArgs{...} }
type GetSpringCloudServiceConfigServerGitSettingSshAuthArrayInput interface {
	pulumi.Input

	ToGetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput() GetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput
	ToGetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutputWithContext(context.Context) GetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput
}

type GetSpringCloudServiceConfigServerGitSettingSshAuthArray []GetSpringCloudServiceConfigServerGitSettingSshAuthInput

func (GetSpringCloudServiceConfigServerGitSettingSshAuthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpringCloudServiceConfigServerGitSettingSshAuth)(nil)).Elem()
}

func (i GetSpringCloudServiceConfigServerGitSettingSshAuthArray) ToGetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput() GetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput {
	return i.ToGetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutputWithContext(context.Background())
}

func (i GetSpringCloudServiceConfigServerGitSettingSshAuthArray) ToGetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput)
}

type GetSpringCloudServiceConfigServerGitSettingSshAuthOutput struct{ *pulumi.OutputState }

func (GetSpringCloudServiceConfigServerGitSettingSshAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSpringCloudServiceConfigServerGitSettingSshAuth)(nil)).Elem()
}

func (o GetSpringCloudServiceConfigServerGitSettingSshAuthOutput) ToGetSpringCloudServiceConfigServerGitSettingSshAuthOutput() GetSpringCloudServiceConfigServerGitSettingSshAuthOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingSshAuthOutput) ToGetSpringCloudServiceConfigServerGitSettingSshAuthOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingSshAuthOutput {
	return o
}

// The host key of the Git repository server.
func (o GetSpringCloudServiceConfigServerGitSettingSshAuthOutput) HostKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingSshAuth) string { return v.HostKey }).(pulumi.StringOutput)
}

// The host key algorithm.
func (o GetSpringCloudServiceConfigServerGitSettingSshAuthOutput) HostKeyAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingSshAuth) string { return v.HostKeyAlgorithm }).(pulumi.StringOutput)
}

// The SSH private key to access the Git repository, needed when the URI starts with `git@` or `ssh://`.
func (o GetSpringCloudServiceConfigServerGitSettingSshAuthOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingSshAuth) string { return v.PrivateKey }).(pulumi.StringOutput)
}

// Indicates whether the Config Server instance will fail to start if the hostKey does not match.
func (o GetSpringCloudServiceConfigServerGitSettingSshAuthOutput) StrictHostKeyCheckingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSpringCloudServiceConfigServerGitSettingSshAuth) bool { return v.StrictHostKeyCheckingEnabled }).(pulumi.BoolOutput)
}

type GetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput struct{ *pulumi.OutputState }

func (GetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSpringCloudServiceConfigServerGitSettingSshAuth)(nil)).Elem()
}

func (o GetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput) ToGetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput() GetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput) ToGetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutputWithContext(ctx context.Context) GetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput {
	return o
}

func (o GetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput) Index(i pulumi.IntInput) GetSpringCloudServiceConfigServerGitSettingSshAuthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSpringCloudServiceConfigServerGitSettingSshAuth {
		return vs[0].([]GetSpringCloudServiceConfigServerGitSettingSshAuth)[vs[1].(int)]
	}).(GetSpringCloudServiceConfigServerGitSettingSshAuthOutput)
}

func init() {
	pulumi.RegisterOutputType(SpringCloudAppIdentityOutput{})
	pulumi.RegisterOutputType(SpringCloudAppIdentityPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudAppPersistentDiskOutput{})
	pulumi.RegisterOutputType(SpringCloudAppPersistentDiskPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceConfigServerGitSettingOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceConfigServerGitSettingPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceConfigServerGitSettingHttpBasicAuthPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceConfigServerGitSettingRepositoryOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceConfigServerGitSettingRepositoryArrayOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceConfigServerGitSettingRepositorySshAuthPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceConfigServerGitSettingSshAuthOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceConfigServerGitSettingSshAuthPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceNetworkOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceNetworkPtrOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceTraceOutput{})
	pulumi.RegisterOutputType(SpringCloudServiceTracePtrOutput{})
	pulumi.RegisterOutputType(GetSpringCloudAppIdentityOutput{})
	pulumi.RegisterOutputType(GetSpringCloudAppIdentityArrayOutput{})
	pulumi.RegisterOutputType(GetSpringCloudAppPersistentDiskOutput{})
	pulumi.RegisterOutputType(GetSpringCloudAppPersistentDiskArrayOutput{})
	pulumi.RegisterOutputType(GetSpringCloudServiceConfigServerGitSettingOutput{})
	pulumi.RegisterOutputType(GetSpringCloudServiceConfigServerGitSettingArrayOutput{})
	pulumi.RegisterOutputType(GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthOutput{})
	pulumi.RegisterOutputType(GetSpringCloudServiceConfigServerGitSettingHttpBasicAuthArrayOutput{})
	pulumi.RegisterOutputType(GetSpringCloudServiceConfigServerGitSettingRepositoryOutput{})
	pulumi.RegisterOutputType(GetSpringCloudServiceConfigServerGitSettingRepositoryArrayOutput{})
	pulumi.RegisterOutputType(GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthOutput{})
	pulumi.RegisterOutputType(GetSpringCloudServiceConfigServerGitSettingRepositoryHttpBasicAuthArrayOutput{})
	pulumi.RegisterOutputType(GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthOutput{})
	pulumi.RegisterOutputType(GetSpringCloudServiceConfigServerGitSettingRepositorySshAuthArrayOutput{})
	pulumi.RegisterOutputType(GetSpringCloudServiceConfigServerGitSettingSshAuthOutput{})
	pulumi.RegisterOutputType(GetSpringCloudServiceConfigServerGitSettingSshAuthArrayOutput{})
}
