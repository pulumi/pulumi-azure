// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oracle

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of GI Versions in Oracle Cloud Infrastructure Database service.
//
// Gets a list of supported GI versions.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/oracle"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := oracle.GetGiVersions(ctx, &oracle.GetGiVersionsArgs{
//				Location: "eastus",
//				Zone:     pulumi.StringRef("2"),
//				Shape:    pulumi.StringRef("Exadata.X9M"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("example", example)
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This data source uses the following Azure API Providers:
//
// * `Oracle.Database` - 2025-03-01
func GetGiVersions(ctx *pulumi.Context, args *GetGiVersionsArgs, opts ...pulumi.InvokeOption) (*GetGiVersionsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetGiVersionsResult
	err := ctx.Invoke("azure:oracle/getGiVersions:getGiVersions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGiVersions.
type GetGiVersionsArgs struct {
	// The Azure Region to query for the GI Versions in.
	Location string `pulumi:"location"`
	// The model name of the Cloud Exadata Infrastructure resource. Possible values are `ExaDbXS`, `Exadata.X9M`, and `Exadata.X11M`. This is used to filter out the available GI versions compatible with the given model.
	Shape *string `pulumi:"shape"`
	// Indicates the Azure zone for the Cloud Exadata Infrastructure, used to filter the available GI versions within a given zone.
	Zone *string `pulumi:"zone"`
}

// A collection of values returned by getGiVersions.
type GetGiVersionsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id       string  `pulumi:"id"`
	Location string  `pulumi:"location"`
	Shape    *string `pulumi:"shape"`
	// A list of valid GI software versions.
	Versions []string `pulumi:"versions"`
	Zone     *string  `pulumi:"zone"`
}

func GetGiVersionsOutput(ctx *pulumi.Context, args GetGiVersionsOutputArgs, opts ...pulumi.InvokeOption) GetGiVersionsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetGiVersionsResultOutput, error) {
			args := v.(GetGiVersionsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure:oracle/getGiVersions:getGiVersions", args, GetGiVersionsResultOutput{}, options).(GetGiVersionsResultOutput), nil
		}).(GetGiVersionsResultOutput)
}

// A collection of arguments for invoking getGiVersions.
type GetGiVersionsOutputArgs struct {
	// The Azure Region to query for the GI Versions in.
	Location pulumi.StringInput `pulumi:"location"`
	// The model name of the Cloud Exadata Infrastructure resource. Possible values are `ExaDbXS`, `Exadata.X9M`, and `Exadata.X11M`. This is used to filter out the available GI versions compatible with the given model.
	Shape pulumi.StringPtrInput `pulumi:"shape"`
	// Indicates the Azure zone for the Cloud Exadata Infrastructure, used to filter the available GI versions within a given zone.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (GetGiVersionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGiVersionsArgs)(nil)).Elem()
}

// A collection of values returned by getGiVersions.
type GetGiVersionsResultOutput struct{ *pulumi.OutputState }

func (GetGiVersionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGiVersionsResult)(nil)).Elem()
}

func (o GetGiVersionsResultOutput) ToGetGiVersionsResultOutput() GetGiVersionsResultOutput {
	return o
}

func (o GetGiVersionsResultOutput) ToGetGiVersionsResultOutputWithContext(ctx context.Context) GetGiVersionsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetGiVersionsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGiVersionsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetGiVersionsResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetGiVersionsResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o GetGiVersionsResultOutput) Shape() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGiVersionsResult) *string { return v.Shape }).(pulumi.StringPtrOutput)
}

// A list of valid GI software versions.
func (o GetGiVersionsResultOutput) Versions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetGiVersionsResult) []string { return v.Versions }).(pulumi.StringArrayOutput)
}

func (o GetGiVersionsResultOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGiVersionsResult) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetGiVersionsResultOutput{})
}
