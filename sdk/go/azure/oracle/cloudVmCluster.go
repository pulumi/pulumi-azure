// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oracle

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Cloud VM Cluster.
//
// ## Import
//
// Cloud VM Clusters can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:oracle/cloudVmCluster:CloudVmCluster example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup/providers/Oracle.Database/cloudVmClusters/cloudVmClusters1
// ```
type CloudVmCluster struct {
	pulumi.CustomResourceState

	// The backup subnet CIDR of the Virtual Network associated with the Cloud VM Cluster.
	BackupSubnetCidr pulumi.StringPtrOutput `pulumi:"backupSubnetCidr"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Cloud Exadata infrastructure.
	CloudExadataInfrastructureId pulumi.StringOutput `pulumi:"cloudExadataInfrastructureId"`
	// The cluster name for Cloud VM Cluster.
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`
	// The number of CPU cores enabled on the Cloud VM Cluster.
	CpuCoreCount pulumi.IntOutput `pulumi:"cpuCoreCount"`
	// A `dataCollectionOptions` block as defined below.
	DataCollectionOptions CloudVmClusterDataCollectionOptionsOutput `pulumi:"dataCollectionOptions"`
	// The percentage assigned to DATA storage (user data and database files). The remaining percentage is assigned to RECO storage (database redo logs, archive logs, and recovery manager backups). Accepted values are `35`, `40`, `60` and `80`.
	DataStoragePercentage pulumi.IntOutput `pulumi:"dataStoragePercentage"`
	// The data disk group size to be allocated in TBs.
	DataStorageSizeInTbs pulumi.Float64Output `pulumi:"dataStorageSizeInTbs"`
	// The local node storage to be allocated in GBs.
	DbNodeStorageSizeInGbs pulumi.IntOutput `pulumi:"dbNodeStorageSizeInGbs"`
	// The list of DB servers.
	DbServers pulumi.StringArrayOutput `pulumi:"dbServers"`
	// The user-friendly name for the Cloud VM Cluster. The name does not need to be unique..
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// A valid Oracle Grid Infrastructure (GI) software version.
	GiVersion pulumi.StringOutput `pulumi:"giVersion"`
	// The hostname for the Cloud VM Cluster without suffix.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// The hostname for the Cloud VM Cluster with suffix.
	HostnameActual pulumi.StringOutput `pulumi:"hostnameActual"`
	// The Oracle license model that applies to the Cloud VM Cluster, either `BringYourOwnLicense` or `LicenseIncluded`.
	LicenseModel pulumi.StringOutput `pulumi:"licenseModel"`
	// If true, database backup on local Exadata storage is configured for the Cloud VM Cluster. If `false`, database backup on local Exadata storage is not available in the Cloud VM Cluster.
	LocalBackupEnabled pulumi.BoolOutput `pulumi:"localBackupEnabled"`
	// The Azure Region where the Cloud VM Cluster should exist.
	Location pulumi.StringOutput `pulumi:"location"`
	// The memory to be allocated in GBs.
	MemorySizeInGbs pulumi.IntOutput `pulumi:"memorySizeInGbs"`
	// The name which should be used for this Cloud VM Cluster.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Resource Group where the Cloud VM Cluster should exist.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// If true, the sparse disk group is configured for the Cloud VM Cluster. If `false`, the sparse disk group is not created.
	SparseDiskgroupEnabled pulumi.BoolOutput `pulumi:"sparseDiskgroupEnabled"`
	// The public key portion of one or more key pairs used for SSH access to the Cloud VM Cluster.
	SshPublicKeys pulumi.StringArrayOutput `pulumi:"sshPublicKeys"`
	// The ID of the subnet associated with the Cloud VM Cluster.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// A mapping of tags which should be assigned to the Cloud VM Cluster.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The time zone of the Cloud VM Cluster. For details, see [Exadata Infrastructure Time Zones](https://docs.cloud.oracle.com/iaas/Content/Database/References/timezones.htm).
	TimeZone pulumi.StringOutput `pulumi:"timeZone"`
	// The ID of the Virtual Network associated with the Cloud VM Cluster.
	VirtualNetworkId pulumi.StringOutput `pulumi:"virtualNetworkId"`
}

// NewCloudVmCluster registers a new resource with the given unique name, arguments, and options.
func NewCloudVmCluster(ctx *pulumi.Context,
	name string, args *CloudVmClusterArgs, opts ...pulumi.ResourceOption) (*CloudVmCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CloudExadataInfrastructureId == nil {
		return nil, errors.New("invalid value for required argument 'CloudExadataInfrastructureId'")
	}
	if args.CpuCoreCount == nil {
		return nil, errors.New("invalid value for required argument 'CpuCoreCount'")
	}
	if args.DbServers == nil {
		return nil, errors.New("invalid value for required argument 'DbServers'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.GiVersion == nil {
		return nil, errors.New("invalid value for required argument 'GiVersion'")
	}
	if args.Hostname == nil {
		return nil, errors.New("invalid value for required argument 'Hostname'")
	}
	if args.LicenseModel == nil {
		return nil, errors.New("invalid value for required argument 'LicenseModel'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SshPublicKeys == nil {
		return nil, errors.New("invalid value for required argument 'SshPublicKeys'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.VirtualNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'VirtualNetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CloudVmCluster
	err := ctx.RegisterResource("azure:oracle/cloudVmCluster:CloudVmCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudVmCluster gets an existing CloudVmCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudVmCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudVmClusterState, opts ...pulumi.ResourceOption) (*CloudVmCluster, error) {
	var resource CloudVmCluster
	err := ctx.ReadResource("azure:oracle/cloudVmCluster:CloudVmCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudVmCluster resources.
type cloudVmClusterState struct {
	// The backup subnet CIDR of the Virtual Network associated with the Cloud VM Cluster.
	BackupSubnetCidr *string `pulumi:"backupSubnetCidr"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Cloud Exadata infrastructure.
	CloudExadataInfrastructureId *string `pulumi:"cloudExadataInfrastructureId"`
	// The cluster name for Cloud VM Cluster.
	ClusterName *string `pulumi:"clusterName"`
	// The number of CPU cores enabled on the Cloud VM Cluster.
	CpuCoreCount *int `pulumi:"cpuCoreCount"`
	// A `dataCollectionOptions` block as defined below.
	DataCollectionOptions *CloudVmClusterDataCollectionOptions `pulumi:"dataCollectionOptions"`
	// The percentage assigned to DATA storage (user data and database files). The remaining percentage is assigned to RECO storage (database redo logs, archive logs, and recovery manager backups). Accepted values are `35`, `40`, `60` and `80`.
	DataStoragePercentage *int `pulumi:"dataStoragePercentage"`
	// The data disk group size to be allocated in TBs.
	DataStorageSizeInTbs *float64 `pulumi:"dataStorageSizeInTbs"`
	// The local node storage to be allocated in GBs.
	DbNodeStorageSizeInGbs *int `pulumi:"dbNodeStorageSizeInGbs"`
	// The list of DB servers.
	DbServers []string `pulumi:"dbServers"`
	// The user-friendly name for the Cloud VM Cluster. The name does not need to be unique..
	DisplayName *string `pulumi:"displayName"`
	// A valid Oracle Grid Infrastructure (GI) software version.
	GiVersion *string `pulumi:"giVersion"`
	// The hostname for the Cloud VM Cluster without suffix.
	Hostname *string `pulumi:"hostname"`
	// The hostname for the Cloud VM Cluster with suffix.
	HostnameActual *string `pulumi:"hostnameActual"`
	// The Oracle license model that applies to the Cloud VM Cluster, either `BringYourOwnLicense` or `LicenseIncluded`.
	LicenseModel *string `pulumi:"licenseModel"`
	// If true, database backup on local Exadata storage is configured for the Cloud VM Cluster. If `false`, database backup on local Exadata storage is not available in the Cloud VM Cluster.
	LocalBackupEnabled *bool `pulumi:"localBackupEnabled"`
	// The Azure Region where the Cloud VM Cluster should exist.
	Location *string `pulumi:"location"`
	// The memory to be allocated in GBs.
	MemorySizeInGbs *int `pulumi:"memorySizeInGbs"`
	// The name which should be used for this Cloud VM Cluster.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Cloud VM Cluster should exist.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// If true, the sparse disk group is configured for the Cloud VM Cluster. If `false`, the sparse disk group is not created.
	SparseDiskgroupEnabled *bool `pulumi:"sparseDiskgroupEnabled"`
	// The public key portion of one or more key pairs used for SSH access to the Cloud VM Cluster.
	SshPublicKeys []string `pulumi:"sshPublicKeys"`
	// The ID of the subnet associated with the Cloud VM Cluster.
	SubnetId *string `pulumi:"subnetId"`
	// A mapping of tags which should be assigned to the Cloud VM Cluster.
	Tags map[string]string `pulumi:"tags"`
	// The time zone of the Cloud VM Cluster. For details, see [Exadata Infrastructure Time Zones](https://docs.cloud.oracle.com/iaas/Content/Database/References/timezones.htm).
	TimeZone *string `pulumi:"timeZone"`
	// The ID of the Virtual Network associated with the Cloud VM Cluster.
	VirtualNetworkId *string `pulumi:"virtualNetworkId"`
}

type CloudVmClusterState struct {
	// The backup subnet CIDR of the Virtual Network associated with the Cloud VM Cluster.
	BackupSubnetCidr pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Cloud Exadata infrastructure.
	CloudExadataInfrastructureId pulumi.StringPtrInput
	// The cluster name for Cloud VM Cluster.
	ClusterName pulumi.StringPtrInput
	// The number of CPU cores enabled on the Cloud VM Cluster.
	CpuCoreCount pulumi.IntPtrInput
	// A `dataCollectionOptions` block as defined below.
	DataCollectionOptions CloudVmClusterDataCollectionOptionsPtrInput
	// The percentage assigned to DATA storage (user data and database files). The remaining percentage is assigned to RECO storage (database redo logs, archive logs, and recovery manager backups). Accepted values are `35`, `40`, `60` and `80`.
	DataStoragePercentage pulumi.IntPtrInput
	// The data disk group size to be allocated in TBs.
	DataStorageSizeInTbs pulumi.Float64PtrInput
	// The local node storage to be allocated in GBs.
	DbNodeStorageSizeInGbs pulumi.IntPtrInput
	// The list of DB servers.
	DbServers pulumi.StringArrayInput
	// The user-friendly name for the Cloud VM Cluster. The name does not need to be unique..
	DisplayName pulumi.StringPtrInput
	// A valid Oracle Grid Infrastructure (GI) software version.
	GiVersion pulumi.StringPtrInput
	// The hostname for the Cloud VM Cluster without suffix.
	Hostname pulumi.StringPtrInput
	// The hostname for the Cloud VM Cluster with suffix.
	HostnameActual pulumi.StringPtrInput
	// The Oracle license model that applies to the Cloud VM Cluster, either `BringYourOwnLicense` or `LicenseIncluded`.
	LicenseModel pulumi.StringPtrInput
	// If true, database backup on local Exadata storage is configured for the Cloud VM Cluster. If `false`, database backup on local Exadata storage is not available in the Cloud VM Cluster.
	LocalBackupEnabled pulumi.BoolPtrInput
	// The Azure Region where the Cloud VM Cluster should exist.
	Location pulumi.StringPtrInput
	// The memory to be allocated in GBs.
	MemorySizeInGbs pulumi.IntPtrInput
	// The name which should be used for this Cloud VM Cluster.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Cloud VM Cluster should exist.
	ResourceGroupName pulumi.StringPtrInput
	// If true, the sparse disk group is configured for the Cloud VM Cluster. If `false`, the sparse disk group is not created.
	SparseDiskgroupEnabled pulumi.BoolPtrInput
	// The public key portion of one or more key pairs used for SSH access to the Cloud VM Cluster.
	SshPublicKeys pulumi.StringArrayInput
	// The ID of the subnet associated with the Cloud VM Cluster.
	SubnetId pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Cloud VM Cluster.
	Tags pulumi.StringMapInput
	// The time zone of the Cloud VM Cluster. For details, see [Exadata Infrastructure Time Zones](https://docs.cloud.oracle.com/iaas/Content/Database/References/timezones.htm).
	TimeZone pulumi.StringPtrInput
	// The ID of the Virtual Network associated with the Cloud VM Cluster.
	VirtualNetworkId pulumi.StringPtrInput
}

func (CloudVmClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudVmClusterState)(nil)).Elem()
}

type cloudVmClusterArgs struct {
	// The backup subnet CIDR of the Virtual Network associated with the Cloud VM Cluster.
	BackupSubnetCidr *string `pulumi:"backupSubnetCidr"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Cloud Exadata infrastructure.
	CloudExadataInfrastructureId string `pulumi:"cloudExadataInfrastructureId"`
	// The cluster name for Cloud VM Cluster.
	ClusterName *string `pulumi:"clusterName"`
	// The number of CPU cores enabled on the Cloud VM Cluster.
	CpuCoreCount int `pulumi:"cpuCoreCount"`
	// A `dataCollectionOptions` block as defined below.
	DataCollectionOptions *CloudVmClusterDataCollectionOptions `pulumi:"dataCollectionOptions"`
	// The percentage assigned to DATA storage (user data and database files). The remaining percentage is assigned to RECO storage (database redo logs, archive logs, and recovery manager backups). Accepted values are `35`, `40`, `60` and `80`.
	DataStoragePercentage *int `pulumi:"dataStoragePercentage"`
	// The data disk group size to be allocated in TBs.
	DataStorageSizeInTbs *float64 `pulumi:"dataStorageSizeInTbs"`
	// The local node storage to be allocated in GBs.
	DbNodeStorageSizeInGbs *int `pulumi:"dbNodeStorageSizeInGbs"`
	// The list of DB servers.
	DbServers []string `pulumi:"dbServers"`
	// The user-friendly name for the Cloud VM Cluster. The name does not need to be unique..
	DisplayName string `pulumi:"displayName"`
	// A valid Oracle Grid Infrastructure (GI) software version.
	GiVersion string `pulumi:"giVersion"`
	// The hostname for the Cloud VM Cluster without suffix.
	Hostname string `pulumi:"hostname"`
	// The Oracle license model that applies to the Cloud VM Cluster, either `BringYourOwnLicense` or `LicenseIncluded`.
	LicenseModel string `pulumi:"licenseModel"`
	// If true, database backup on local Exadata storage is configured for the Cloud VM Cluster. If `false`, database backup on local Exadata storage is not available in the Cloud VM Cluster.
	LocalBackupEnabled *bool `pulumi:"localBackupEnabled"`
	// The Azure Region where the Cloud VM Cluster should exist.
	Location *string `pulumi:"location"`
	// The memory to be allocated in GBs.
	MemorySizeInGbs *int `pulumi:"memorySizeInGbs"`
	// The name which should be used for this Cloud VM Cluster.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Cloud VM Cluster should exist.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// If true, the sparse disk group is configured for the Cloud VM Cluster. If `false`, the sparse disk group is not created.
	SparseDiskgroupEnabled *bool `pulumi:"sparseDiskgroupEnabled"`
	// The public key portion of one or more key pairs used for SSH access to the Cloud VM Cluster.
	SshPublicKeys []string `pulumi:"sshPublicKeys"`
	// The ID of the subnet associated with the Cloud VM Cluster.
	SubnetId string `pulumi:"subnetId"`
	// A mapping of tags which should be assigned to the Cloud VM Cluster.
	Tags map[string]string `pulumi:"tags"`
	// The time zone of the Cloud VM Cluster. For details, see [Exadata Infrastructure Time Zones](https://docs.cloud.oracle.com/iaas/Content/Database/References/timezones.htm).
	TimeZone *string `pulumi:"timeZone"`
	// The ID of the Virtual Network associated with the Cloud VM Cluster.
	VirtualNetworkId string `pulumi:"virtualNetworkId"`
}

// The set of arguments for constructing a CloudVmCluster resource.
type CloudVmClusterArgs struct {
	// The backup subnet CIDR of the Virtual Network associated with the Cloud VM Cluster.
	BackupSubnetCidr pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Cloud Exadata infrastructure.
	CloudExadataInfrastructureId pulumi.StringInput
	// The cluster name for Cloud VM Cluster.
	ClusterName pulumi.StringPtrInput
	// The number of CPU cores enabled on the Cloud VM Cluster.
	CpuCoreCount pulumi.IntInput
	// A `dataCollectionOptions` block as defined below.
	DataCollectionOptions CloudVmClusterDataCollectionOptionsPtrInput
	// The percentage assigned to DATA storage (user data and database files). The remaining percentage is assigned to RECO storage (database redo logs, archive logs, and recovery manager backups). Accepted values are `35`, `40`, `60` and `80`.
	DataStoragePercentage pulumi.IntPtrInput
	// The data disk group size to be allocated in TBs.
	DataStorageSizeInTbs pulumi.Float64PtrInput
	// The local node storage to be allocated in GBs.
	DbNodeStorageSizeInGbs pulumi.IntPtrInput
	// The list of DB servers.
	DbServers pulumi.StringArrayInput
	// The user-friendly name for the Cloud VM Cluster. The name does not need to be unique..
	DisplayName pulumi.StringInput
	// A valid Oracle Grid Infrastructure (GI) software version.
	GiVersion pulumi.StringInput
	// The hostname for the Cloud VM Cluster without suffix.
	Hostname pulumi.StringInput
	// The Oracle license model that applies to the Cloud VM Cluster, either `BringYourOwnLicense` or `LicenseIncluded`.
	LicenseModel pulumi.StringInput
	// If true, database backup on local Exadata storage is configured for the Cloud VM Cluster. If `false`, database backup on local Exadata storage is not available in the Cloud VM Cluster.
	LocalBackupEnabled pulumi.BoolPtrInput
	// The Azure Region where the Cloud VM Cluster should exist.
	Location pulumi.StringPtrInput
	// The memory to be allocated in GBs.
	MemorySizeInGbs pulumi.IntPtrInput
	// The name which should be used for this Cloud VM Cluster.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Cloud VM Cluster should exist.
	ResourceGroupName pulumi.StringInput
	// If true, the sparse disk group is configured for the Cloud VM Cluster. If `false`, the sparse disk group is not created.
	SparseDiskgroupEnabled pulumi.BoolPtrInput
	// The public key portion of one or more key pairs used for SSH access to the Cloud VM Cluster.
	SshPublicKeys pulumi.StringArrayInput
	// The ID of the subnet associated with the Cloud VM Cluster.
	SubnetId pulumi.StringInput
	// A mapping of tags which should be assigned to the Cloud VM Cluster.
	Tags pulumi.StringMapInput
	// The time zone of the Cloud VM Cluster. For details, see [Exadata Infrastructure Time Zones](https://docs.cloud.oracle.com/iaas/Content/Database/References/timezones.htm).
	TimeZone pulumi.StringPtrInput
	// The ID of the Virtual Network associated with the Cloud VM Cluster.
	VirtualNetworkId pulumi.StringInput
}

func (CloudVmClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudVmClusterArgs)(nil)).Elem()
}

type CloudVmClusterInput interface {
	pulumi.Input

	ToCloudVmClusterOutput() CloudVmClusterOutput
	ToCloudVmClusterOutputWithContext(ctx context.Context) CloudVmClusterOutput
}

func (*CloudVmCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudVmCluster)(nil)).Elem()
}

func (i *CloudVmCluster) ToCloudVmClusterOutput() CloudVmClusterOutput {
	return i.ToCloudVmClusterOutputWithContext(context.Background())
}

func (i *CloudVmCluster) ToCloudVmClusterOutputWithContext(ctx context.Context) CloudVmClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudVmClusterOutput)
}

// CloudVmClusterArrayInput is an input type that accepts CloudVmClusterArray and CloudVmClusterArrayOutput values.
// You can construct a concrete instance of `CloudVmClusterArrayInput` via:
//
//	CloudVmClusterArray{ CloudVmClusterArgs{...} }
type CloudVmClusterArrayInput interface {
	pulumi.Input

	ToCloudVmClusterArrayOutput() CloudVmClusterArrayOutput
	ToCloudVmClusterArrayOutputWithContext(context.Context) CloudVmClusterArrayOutput
}

type CloudVmClusterArray []CloudVmClusterInput

func (CloudVmClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudVmCluster)(nil)).Elem()
}

func (i CloudVmClusterArray) ToCloudVmClusterArrayOutput() CloudVmClusterArrayOutput {
	return i.ToCloudVmClusterArrayOutputWithContext(context.Background())
}

func (i CloudVmClusterArray) ToCloudVmClusterArrayOutputWithContext(ctx context.Context) CloudVmClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudVmClusterArrayOutput)
}

// CloudVmClusterMapInput is an input type that accepts CloudVmClusterMap and CloudVmClusterMapOutput values.
// You can construct a concrete instance of `CloudVmClusterMapInput` via:
//
//	CloudVmClusterMap{ "key": CloudVmClusterArgs{...} }
type CloudVmClusterMapInput interface {
	pulumi.Input

	ToCloudVmClusterMapOutput() CloudVmClusterMapOutput
	ToCloudVmClusterMapOutputWithContext(context.Context) CloudVmClusterMapOutput
}

type CloudVmClusterMap map[string]CloudVmClusterInput

func (CloudVmClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudVmCluster)(nil)).Elem()
}

func (i CloudVmClusterMap) ToCloudVmClusterMapOutput() CloudVmClusterMapOutput {
	return i.ToCloudVmClusterMapOutputWithContext(context.Background())
}

func (i CloudVmClusterMap) ToCloudVmClusterMapOutputWithContext(ctx context.Context) CloudVmClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudVmClusterMapOutput)
}

type CloudVmClusterOutput struct{ *pulumi.OutputState }

func (CloudVmClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudVmCluster)(nil)).Elem()
}

func (o CloudVmClusterOutput) ToCloudVmClusterOutput() CloudVmClusterOutput {
	return o
}

func (o CloudVmClusterOutput) ToCloudVmClusterOutputWithContext(ctx context.Context) CloudVmClusterOutput {
	return o
}

// The backup subnet CIDR of the Virtual Network associated with the Cloud VM Cluster.
func (o CloudVmClusterOutput) BackupSubnetCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringPtrOutput { return v.BackupSubnetCidr }).(pulumi.StringPtrOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Cloud Exadata infrastructure.
func (o CloudVmClusterOutput) CloudExadataInfrastructureId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringOutput { return v.CloudExadataInfrastructureId }).(pulumi.StringOutput)
}

// The cluster name for Cloud VM Cluster.
func (o CloudVmClusterOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

// The number of CPU cores enabled on the Cloud VM Cluster.
func (o CloudVmClusterOutput) CpuCoreCount() pulumi.IntOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.IntOutput { return v.CpuCoreCount }).(pulumi.IntOutput)
}

// A `dataCollectionOptions` block as defined below.
func (o CloudVmClusterOutput) DataCollectionOptions() CloudVmClusterDataCollectionOptionsOutput {
	return o.ApplyT(func(v *CloudVmCluster) CloudVmClusterDataCollectionOptionsOutput { return v.DataCollectionOptions }).(CloudVmClusterDataCollectionOptionsOutput)
}

// The percentage assigned to DATA storage (user data and database files). The remaining percentage is assigned to RECO storage (database redo logs, archive logs, and recovery manager backups). Accepted values are `35`, `40`, `60` and `80`.
func (o CloudVmClusterOutput) DataStoragePercentage() pulumi.IntOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.IntOutput { return v.DataStoragePercentage }).(pulumi.IntOutput)
}

// The data disk group size to be allocated in TBs.
func (o CloudVmClusterOutput) DataStorageSizeInTbs() pulumi.Float64Output {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.Float64Output { return v.DataStorageSizeInTbs }).(pulumi.Float64Output)
}

// The local node storage to be allocated in GBs.
func (o CloudVmClusterOutput) DbNodeStorageSizeInGbs() pulumi.IntOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.IntOutput { return v.DbNodeStorageSizeInGbs }).(pulumi.IntOutput)
}

// The list of DB servers.
func (o CloudVmClusterOutput) DbServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringArrayOutput { return v.DbServers }).(pulumi.StringArrayOutput)
}

// The user-friendly name for the Cloud VM Cluster. The name does not need to be unique..
func (o CloudVmClusterOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// A valid Oracle Grid Infrastructure (GI) software version.
func (o CloudVmClusterOutput) GiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringOutput { return v.GiVersion }).(pulumi.StringOutput)
}

// The hostname for the Cloud VM Cluster without suffix.
func (o CloudVmClusterOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

// The hostname for the Cloud VM Cluster with suffix.
func (o CloudVmClusterOutput) HostnameActual() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringOutput { return v.HostnameActual }).(pulumi.StringOutput)
}

// The Oracle license model that applies to the Cloud VM Cluster, either `BringYourOwnLicense` or `LicenseIncluded`.
func (o CloudVmClusterOutput) LicenseModel() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringOutput { return v.LicenseModel }).(pulumi.StringOutput)
}

// If true, database backup on local Exadata storage is configured for the Cloud VM Cluster. If `false`, database backup on local Exadata storage is not available in the Cloud VM Cluster.
func (o CloudVmClusterOutput) LocalBackupEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.BoolOutput { return v.LocalBackupEnabled }).(pulumi.BoolOutput)
}

// The Azure Region where the Cloud VM Cluster should exist.
func (o CloudVmClusterOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The memory to be allocated in GBs.
func (o CloudVmClusterOutput) MemorySizeInGbs() pulumi.IntOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.IntOutput { return v.MemorySizeInGbs }).(pulumi.IntOutput)
}

// The name which should be used for this Cloud VM Cluster.
func (o CloudVmClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the Resource Group where the Cloud VM Cluster should exist.
func (o CloudVmClusterOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// If true, the sparse disk group is configured for the Cloud VM Cluster. If `false`, the sparse disk group is not created.
func (o CloudVmClusterOutput) SparseDiskgroupEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.BoolOutput { return v.SparseDiskgroupEnabled }).(pulumi.BoolOutput)
}

// The public key portion of one or more key pairs used for SSH access to the Cloud VM Cluster.
func (o CloudVmClusterOutput) SshPublicKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringArrayOutput { return v.SshPublicKeys }).(pulumi.StringArrayOutput)
}

// The ID of the subnet associated with the Cloud VM Cluster.
func (o CloudVmClusterOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the Cloud VM Cluster.
func (o CloudVmClusterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The time zone of the Cloud VM Cluster. For details, see [Exadata Infrastructure Time Zones](https://docs.cloud.oracle.com/iaas/Content/Database/References/timezones.htm).
func (o CloudVmClusterOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringOutput { return v.TimeZone }).(pulumi.StringOutput)
}

// The ID of the Virtual Network associated with the Cloud VM Cluster.
func (o CloudVmClusterOutput) VirtualNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudVmCluster) pulumi.StringOutput { return v.VirtualNetworkId }).(pulumi.StringOutput)
}

type CloudVmClusterArrayOutput struct{ *pulumi.OutputState }

func (CloudVmClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudVmCluster)(nil)).Elem()
}

func (o CloudVmClusterArrayOutput) ToCloudVmClusterArrayOutput() CloudVmClusterArrayOutput {
	return o
}

func (o CloudVmClusterArrayOutput) ToCloudVmClusterArrayOutputWithContext(ctx context.Context) CloudVmClusterArrayOutput {
	return o
}

func (o CloudVmClusterArrayOutput) Index(i pulumi.IntInput) CloudVmClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CloudVmCluster {
		return vs[0].([]*CloudVmCluster)[vs[1].(int)]
	}).(CloudVmClusterOutput)
}

type CloudVmClusterMapOutput struct{ *pulumi.OutputState }

func (CloudVmClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudVmCluster)(nil)).Elem()
}

func (o CloudVmClusterMapOutput) ToCloudVmClusterMapOutput() CloudVmClusterMapOutput {
	return o
}

func (o CloudVmClusterMapOutput) ToCloudVmClusterMapOutputWithContext(ctx context.Context) CloudVmClusterMapOutput {
	return o
}

func (o CloudVmClusterMapOutput) MapIndex(k pulumi.StringInput) CloudVmClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CloudVmCluster {
		return vs[0].(map[string]*CloudVmCluster)[vs[1].(string)]
	}).(CloudVmClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudVmClusterInput)(nil)).Elem(), &CloudVmCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudVmClusterArrayInput)(nil)).Elem(), CloudVmClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudVmClusterMapInput)(nil)).Elem(), CloudVmClusterMap{})
	pulumi.RegisterOutputType(CloudVmClusterOutput{})
	pulumi.RegisterOutputType(CloudVmClusterArrayOutput{})
	pulumi.RegisterOutputType(CloudVmClusterMapOutput{})
}
