// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package recoveryservices

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Azure recovery replicated vms (Azure to Azure). An replicated VM keeps a copiously updated image of the vm in another region in order to be able to start the VM in that region in case of a disaster. 
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/recovery_replicated_vm.html.markdown.
type ReplicatedVm struct {
	s *pulumi.ResourceState
}

// NewReplicatedVm registers a new resource with the given unique name, arguments, and options.
func NewReplicatedVm(ctx *pulumi.Context,
	name string, args *ReplicatedVmArgs, opts ...pulumi.ResourceOpt) (*ReplicatedVm, error) {
	if args == nil || args.RecoveryReplicationPolicyId == nil {
		return nil, errors.New("missing required argument 'RecoveryReplicationPolicyId'")
	}
	if args == nil || args.RecoveryVaultName == nil {
		return nil, errors.New("missing required argument 'RecoveryVaultName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.SourceRecoveryFabricName == nil {
		return nil, errors.New("missing required argument 'SourceRecoveryFabricName'")
	}
	if args == nil || args.SourceRecoveryProtectionContainerName == nil {
		return nil, errors.New("missing required argument 'SourceRecoveryProtectionContainerName'")
	}
	if args == nil || args.SourceVmId == nil {
		return nil, errors.New("missing required argument 'SourceVmId'")
	}
	if args == nil || args.TargetRecoveryFabricId == nil {
		return nil, errors.New("missing required argument 'TargetRecoveryFabricId'")
	}
	if args == nil || args.TargetRecoveryProtectionContainerId == nil {
		return nil, errors.New("missing required argument 'TargetRecoveryProtectionContainerId'")
	}
	if args == nil || args.TargetResourceGroupId == nil {
		return nil, errors.New("missing required argument 'TargetResourceGroupId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["managedDisks"] = nil
		inputs["name"] = nil
		inputs["recoveryReplicationPolicyId"] = nil
		inputs["recoveryVaultName"] = nil
		inputs["resourceGroupName"] = nil
		inputs["sourceRecoveryFabricName"] = nil
		inputs["sourceRecoveryProtectionContainerName"] = nil
		inputs["sourceVmId"] = nil
		inputs["targetAvailabilitySetId"] = nil
		inputs["targetRecoveryFabricId"] = nil
		inputs["targetRecoveryProtectionContainerId"] = nil
		inputs["targetResourceGroupId"] = nil
	} else {
		inputs["managedDisks"] = args.ManagedDisks
		inputs["name"] = args.Name
		inputs["recoveryReplicationPolicyId"] = args.RecoveryReplicationPolicyId
		inputs["recoveryVaultName"] = args.RecoveryVaultName
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["sourceRecoveryFabricName"] = args.SourceRecoveryFabricName
		inputs["sourceRecoveryProtectionContainerName"] = args.SourceRecoveryProtectionContainerName
		inputs["sourceVmId"] = args.SourceVmId
		inputs["targetAvailabilitySetId"] = args.TargetAvailabilitySetId
		inputs["targetRecoveryFabricId"] = args.TargetRecoveryFabricId
		inputs["targetRecoveryProtectionContainerId"] = args.TargetRecoveryProtectionContainerId
		inputs["targetResourceGroupId"] = args.TargetResourceGroupId
	}
	s, err := ctx.RegisterResource("azure:recoveryservices/replicatedVm:ReplicatedVm", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ReplicatedVm{s: s}, nil
}

// GetReplicatedVm gets an existing ReplicatedVm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReplicatedVm(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ReplicatedVmState, opts ...pulumi.ResourceOpt) (*ReplicatedVm, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["managedDisks"] = state.ManagedDisks
		inputs["name"] = state.Name
		inputs["recoveryReplicationPolicyId"] = state.RecoveryReplicationPolicyId
		inputs["recoveryVaultName"] = state.RecoveryVaultName
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["sourceRecoveryFabricName"] = state.SourceRecoveryFabricName
		inputs["sourceRecoveryProtectionContainerName"] = state.SourceRecoveryProtectionContainerName
		inputs["sourceVmId"] = state.SourceVmId
		inputs["targetAvailabilitySetId"] = state.TargetAvailabilitySetId
		inputs["targetRecoveryFabricId"] = state.TargetRecoveryFabricId
		inputs["targetRecoveryProtectionContainerId"] = state.TargetRecoveryProtectionContainerId
		inputs["targetResourceGroupId"] = state.TargetResourceGroupId
	}
	s, err := ctx.ReadResource("azure:recoveryservices/replicatedVm:ReplicatedVm", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ReplicatedVm{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ReplicatedVm) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ReplicatedVm) ID() pulumi.IDOutput {
	return r.s.ID()
}

// One or more `managedDisk` block.
func (r *ReplicatedVm) ManagedDisks() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["managedDisks"])
}

// The name of the network mapping.
func (r *ReplicatedVm) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

func (r *ReplicatedVm) RecoveryReplicationPolicyId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["recoveryReplicationPolicyId"])
}

// The name of the vault that should be updated.
func (r *ReplicatedVm) RecoveryVaultName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["recoveryVaultName"])
}

// Name of the resource group where the vault that should be updated is located.
func (r *ReplicatedVm) ResourceGroupName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// Name of fabric that should contains this replication.
func (r *ReplicatedVm) SourceRecoveryFabricName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["sourceRecoveryFabricName"])
}

// Name of the protection container to use.
func (r *ReplicatedVm) SourceRecoveryProtectionContainerName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["sourceRecoveryProtectionContainerName"])
}

// Id of the VM to replicate
func (r *ReplicatedVm) SourceVmId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["sourceVmId"])
}

// Id of availability set that the new VM should belong to when a failover is done.
func (r *ReplicatedVm) TargetAvailabilitySetId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["targetAvailabilitySetId"])
}

// Id of fabric where the VM replication should be handled when a failover is done.
func (r *ReplicatedVm) TargetRecoveryFabricId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["targetRecoveryFabricId"])
}

// Id of protection container where the VM replication should be created when a failover is done.
func (r *ReplicatedVm) TargetRecoveryProtectionContainerId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["targetRecoveryProtectionContainerId"])
}

// Id of resource group where the VM should be created when a failover is done.
func (r *ReplicatedVm) TargetResourceGroupId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["targetResourceGroupId"])
}

// Input properties used for looking up and filtering ReplicatedVm resources.
type ReplicatedVmState struct {
	// One or more `managedDisk` block.
	ManagedDisks interface{}
	// The name of the network mapping.
	Name interface{}
	RecoveryReplicationPolicyId interface{}
	// The name of the vault that should be updated.
	RecoveryVaultName interface{}
	// Name of the resource group where the vault that should be updated is located.
	ResourceGroupName interface{}
	// Name of fabric that should contains this replication.
	SourceRecoveryFabricName interface{}
	// Name of the protection container to use.
	SourceRecoveryProtectionContainerName interface{}
	// Id of the VM to replicate
	SourceVmId interface{}
	// Id of availability set that the new VM should belong to when a failover is done.
	TargetAvailabilitySetId interface{}
	// Id of fabric where the VM replication should be handled when a failover is done.
	TargetRecoveryFabricId interface{}
	// Id of protection container where the VM replication should be created when a failover is done.
	TargetRecoveryProtectionContainerId interface{}
	// Id of resource group where the VM should be created when a failover is done.
	TargetResourceGroupId interface{}
}

// The set of arguments for constructing a ReplicatedVm resource.
type ReplicatedVmArgs struct {
	// One or more `managedDisk` block.
	ManagedDisks interface{}
	// The name of the network mapping.
	Name interface{}
	RecoveryReplicationPolicyId interface{}
	// The name of the vault that should be updated.
	RecoveryVaultName interface{}
	// Name of the resource group where the vault that should be updated is located.
	ResourceGroupName interface{}
	// Name of fabric that should contains this replication.
	SourceRecoveryFabricName interface{}
	// Name of the protection container to use.
	SourceRecoveryProtectionContainerName interface{}
	// Id of the VM to replicate
	SourceVmId interface{}
	// Id of availability set that the new VM should belong to when a failover is done.
	TargetAvailabilitySetId interface{}
	// Id of fabric where the VM replication should be handled when a failover is done.
	TargetRecoveryFabricId interface{}
	// Id of protection container where the VM replication should be created when a failover is done.
	TargetRecoveryProtectionContainerId interface{}
	// Id of resource group where the VM should be created when a failover is done.
	TargetResourceGroupId interface{}
}
