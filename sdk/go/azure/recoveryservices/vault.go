// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package recoveryservices

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Recovery Services Vault.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/recoveryservices"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = recoveryservices.NewVault(ctx, "vault", &recoveryservices.VaultArgs{
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//				Sku:               pulumi.String("Standard"),
//				SoftDeleteEnabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Recovery Services Vaults can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:recoveryservices/vault:Vault vault1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.RecoveryServices/vaults/vault1
//
// ```
type Vault struct {
	pulumi.CustomResourceState

	// Whether to enable the Classic experience for VMware replication. If set to `false` VMware machines will be protected using the new stateless ASR replication appliance. Changing this forces a new resource to be created.
	ClassicVmwareReplicationEnabled pulumi.BoolOutput `pulumi:"classicVmwareReplicationEnabled"`
	// Is cross region restore enabled for this Vault? Only can be `true`, when `storageModeType` is `GeoRedundant`. Defaults to `false`.
	//
	// > **Note:** Once `crossRegionRestoreEnabled` is set to `true`, changing it back to `false` forces a new Recovery Service Vault to be created.
	CrossRegionRestoreEnabled pulumi.BoolPtrOutput `pulumi:"crossRegionRestoreEnabled"`
	// An `encryption` block as defined below. Required with `identity`.
	//
	// !> **Note:** Once Encryption with your own key has been Enabled it's not possible to Disable it.
	Encryption VaultEncryptionPtrOutput `pulumi:"encryption"`
	// An `identity` block as defined below.
	Identity VaultIdentityPtrOutput `pulumi:"identity"`
	// Immutability Settings of vault, possible values include: `Locked`, `Unlocked` and `Disabled`.
	//
	// > **Note:** Once `immutability` is set to `Locked`, changing it to other values forces a new Recovery Services Vault to be created.
	Immutability pulumi.StringOutput `pulumi:"immutability"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// A `monitoring` block as defined below.
	Monitoring VaultMonitoringPtrOutput `pulumi:"monitoring"`
	// Specifies the name of the Recovery Services Vault. Recovery Service Vault name must be 2 - 50 characters long, start with a letter, contain only letters, numbers and hyphens. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Is it enabled to access the vault from public networks. Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrOutput `pulumi:"publicNetworkAccessEnabled"`
	// The name of the resource group in which to create the Recovery Services Vault. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Sets the vault's SKU. Possible values include: `Standard`, `RS0`.
	Sku pulumi.StringOutput `pulumi:"sku"`
	// Is soft delete enable for this Vault? Defaults to `true`.
	SoftDeleteEnabled pulumi.BoolPtrOutput `pulumi:"softDeleteEnabled"`
	// The storage type of the Recovery Services Vault. Possible values are `GeoRedundant`, `LocallyRedundant` and `ZoneRedundant`. Defaults to `GeoRedundant`.
	StorageModeType pulumi.StringPtrOutput `pulumi:"storageModeType"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewVault registers a new resource with the given unique name, arguments, and options.
func NewVault(ctx *pulumi.Context,
	name string, args *VaultArgs, opts ...pulumi.ResourceOption) (*Vault, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Sku == nil {
		return nil, errors.New("invalid value for required argument 'Sku'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vault
	err := ctx.RegisterResource("azure:recoveryservices/vault:Vault", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVault gets an existing Vault resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVault(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VaultState, opts ...pulumi.ResourceOption) (*Vault, error) {
	var resource Vault
	err := ctx.ReadResource("azure:recoveryservices/vault:Vault", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vault resources.
type vaultState struct {
	// Whether to enable the Classic experience for VMware replication. If set to `false` VMware machines will be protected using the new stateless ASR replication appliance. Changing this forces a new resource to be created.
	ClassicVmwareReplicationEnabled *bool `pulumi:"classicVmwareReplicationEnabled"`
	// Is cross region restore enabled for this Vault? Only can be `true`, when `storageModeType` is `GeoRedundant`. Defaults to `false`.
	//
	// > **Note:** Once `crossRegionRestoreEnabled` is set to `true`, changing it back to `false` forces a new Recovery Service Vault to be created.
	CrossRegionRestoreEnabled *bool `pulumi:"crossRegionRestoreEnabled"`
	// An `encryption` block as defined below. Required with `identity`.
	//
	// !> **Note:** Once Encryption with your own key has been Enabled it's not possible to Disable it.
	Encryption *VaultEncryption `pulumi:"encryption"`
	// An `identity` block as defined below.
	Identity *VaultIdentity `pulumi:"identity"`
	// Immutability Settings of vault, possible values include: `Locked`, `Unlocked` and `Disabled`.
	//
	// > **Note:** Once `immutability` is set to `Locked`, changing it to other values forces a new Recovery Services Vault to be created.
	Immutability *string `pulumi:"immutability"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// A `monitoring` block as defined below.
	Monitoring *VaultMonitoring `pulumi:"monitoring"`
	// Specifies the name of the Recovery Services Vault. Recovery Service Vault name must be 2 - 50 characters long, start with a letter, contain only letters, numbers and hyphens. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Is it enabled to access the vault from public networks. Defaults to `true`.
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// The name of the resource group in which to create the Recovery Services Vault. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Sets the vault's SKU. Possible values include: `Standard`, `RS0`.
	Sku *string `pulumi:"sku"`
	// Is soft delete enable for this Vault? Defaults to `true`.
	SoftDeleteEnabled *bool `pulumi:"softDeleteEnabled"`
	// The storage type of the Recovery Services Vault. Possible values are `GeoRedundant`, `LocallyRedundant` and `ZoneRedundant`. Defaults to `GeoRedundant`.
	StorageModeType *string `pulumi:"storageModeType"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

type VaultState struct {
	// Whether to enable the Classic experience for VMware replication. If set to `false` VMware machines will be protected using the new stateless ASR replication appliance. Changing this forces a new resource to be created.
	ClassicVmwareReplicationEnabled pulumi.BoolPtrInput
	// Is cross region restore enabled for this Vault? Only can be `true`, when `storageModeType` is `GeoRedundant`. Defaults to `false`.
	//
	// > **Note:** Once `crossRegionRestoreEnabled` is set to `true`, changing it back to `false` forces a new Recovery Service Vault to be created.
	CrossRegionRestoreEnabled pulumi.BoolPtrInput
	// An `encryption` block as defined below. Required with `identity`.
	//
	// !> **Note:** Once Encryption with your own key has been Enabled it's not possible to Disable it.
	Encryption VaultEncryptionPtrInput
	// An `identity` block as defined below.
	Identity VaultIdentityPtrInput
	// Immutability Settings of vault, possible values include: `Locked`, `Unlocked` and `Disabled`.
	//
	// > **Note:** Once `immutability` is set to `Locked`, changing it to other values forces a new Recovery Services Vault to be created.
	Immutability pulumi.StringPtrInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// A `monitoring` block as defined below.
	Monitoring VaultMonitoringPtrInput
	// Specifies the name of the Recovery Services Vault. Recovery Service Vault name must be 2 - 50 characters long, start with a letter, contain only letters, numbers and hyphens. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Is it enabled to access the vault from public networks. Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// The name of the resource group in which to create the Recovery Services Vault. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// Sets the vault's SKU. Possible values include: `Standard`, `RS0`.
	Sku pulumi.StringPtrInput
	// Is soft delete enable for this Vault? Defaults to `true`.
	SoftDeleteEnabled pulumi.BoolPtrInput
	// The storage type of the Recovery Services Vault. Possible values are `GeoRedundant`, `LocallyRedundant` and `ZoneRedundant`. Defaults to `GeoRedundant`.
	StorageModeType pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
}

func (VaultState) ElementType() reflect.Type {
	return reflect.TypeOf((*vaultState)(nil)).Elem()
}

type vaultArgs struct {
	// Whether to enable the Classic experience for VMware replication. If set to `false` VMware machines will be protected using the new stateless ASR replication appliance. Changing this forces a new resource to be created.
	ClassicVmwareReplicationEnabled *bool `pulumi:"classicVmwareReplicationEnabled"`
	// Is cross region restore enabled for this Vault? Only can be `true`, when `storageModeType` is `GeoRedundant`. Defaults to `false`.
	//
	// > **Note:** Once `crossRegionRestoreEnabled` is set to `true`, changing it back to `false` forces a new Recovery Service Vault to be created.
	CrossRegionRestoreEnabled *bool `pulumi:"crossRegionRestoreEnabled"`
	// An `encryption` block as defined below. Required with `identity`.
	//
	// !> **Note:** Once Encryption with your own key has been Enabled it's not possible to Disable it.
	Encryption *VaultEncryption `pulumi:"encryption"`
	// An `identity` block as defined below.
	Identity *VaultIdentity `pulumi:"identity"`
	// Immutability Settings of vault, possible values include: `Locked`, `Unlocked` and `Disabled`.
	//
	// > **Note:** Once `immutability` is set to `Locked`, changing it to other values forces a new Recovery Services Vault to be created.
	Immutability *string `pulumi:"immutability"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// A `monitoring` block as defined below.
	Monitoring *VaultMonitoring `pulumi:"monitoring"`
	// Specifies the name of the Recovery Services Vault. Recovery Service Vault name must be 2 - 50 characters long, start with a letter, contain only letters, numbers and hyphens. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Is it enabled to access the vault from public networks. Defaults to `true`.
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// The name of the resource group in which to create the Recovery Services Vault. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Sets the vault's SKU. Possible values include: `Standard`, `RS0`.
	Sku string `pulumi:"sku"`
	// Is soft delete enable for this Vault? Defaults to `true`.
	SoftDeleteEnabled *bool `pulumi:"softDeleteEnabled"`
	// The storage type of the Recovery Services Vault. Possible values are `GeoRedundant`, `LocallyRedundant` and `ZoneRedundant`. Defaults to `GeoRedundant`.
	StorageModeType *string `pulumi:"storageModeType"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Vault resource.
type VaultArgs struct {
	// Whether to enable the Classic experience for VMware replication. If set to `false` VMware machines will be protected using the new stateless ASR replication appliance. Changing this forces a new resource to be created.
	ClassicVmwareReplicationEnabled pulumi.BoolPtrInput
	// Is cross region restore enabled for this Vault? Only can be `true`, when `storageModeType` is `GeoRedundant`. Defaults to `false`.
	//
	// > **Note:** Once `crossRegionRestoreEnabled` is set to `true`, changing it back to `false` forces a new Recovery Service Vault to be created.
	CrossRegionRestoreEnabled pulumi.BoolPtrInput
	// An `encryption` block as defined below. Required with `identity`.
	//
	// !> **Note:** Once Encryption with your own key has been Enabled it's not possible to Disable it.
	Encryption VaultEncryptionPtrInput
	// An `identity` block as defined below.
	Identity VaultIdentityPtrInput
	// Immutability Settings of vault, possible values include: `Locked`, `Unlocked` and `Disabled`.
	//
	// > **Note:** Once `immutability` is set to `Locked`, changing it to other values forces a new Recovery Services Vault to be created.
	Immutability pulumi.StringPtrInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// A `monitoring` block as defined below.
	Monitoring VaultMonitoringPtrInput
	// Specifies the name of the Recovery Services Vault. Recovery Service Vault name must be 2 - 50 characters long, start with a letter, contain only letters, numbers and hyphens. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Is it enabled to access the vault from public networks. Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// The name of the resource group in which to create the Recovery Services Vault. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// Sets the vault's SKU. Possible values include: `Standard`, `RS0`.
	Sku pulumi.StringInput
	// Is soft delete enable for this Vault? Defaults to `true`.
	SoftDeleteEnabled pulumi.BoolPtrInput
	// The storage type of the Recovery Services Vault. Possible values are `GeoRedundant`, `LocallyRedundant` and `ZoneRedundant`. Defaults to `GeoRedundant`.
	StorageModeType pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
}

func (VaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vaultArgs)(nil)).Elem()
}

type VaultInput interface {
	pulumi.Input

	ToVaultOutput() VaultOutput
	ToVaultOutputWithContext(ctx context.Context) VaultOutput
}

func (*Vault) ElementType() reflect.Type {
	return reflect.TypeOf((**Vault)(nil)).Elem()
}

func (i *Vault) ToVaultOutput() VaultOutput {
	return i.ToVaultOutputWithContext(context.Background())
}

func (i *Vault) ToVaultOutputWithContext(ctx context.Context) VaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultOutput)
}

// VaultArrayInput is an input type that accepts VaultArray and VaultArrayOutput values.
// You can construct a concrete instance of `VaultArrayInput` via:
//
//	VaultArray{ VaultArgs{...} }
type VaultArrayInput interface {
	pulumi.Input

	ToVaultArrayOutput() VaultArrayOutput
	ToVaultArrayOutputWithContext(context.Context) VaultArrayOutput
}

type VaultArray []VaultInput

func (VaultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vault)(nil)).Elem()
}

func (i VaultArray) ToVaultArrayOutput() VaultArrayOutput {
	return i.ToVaultArrayOutputWithContext(context.Background())
}

func (i VaultArray) ToVaultArrayOutputWithContext(ctx context.Context) VaultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultArrayOutput)
}

// VaultMapInput is an input type that accepts VaultMap and VaultMapOutput values.
// You can construct a concrete instance of `VaultMapInput` via:
//
//	VaultMap{ "key": VaultArgs{...} }
type VaultMapInput interface {
	pulumi.Input

	ToVaultMapOutput() VaultMapOutput
	ToVaultMapOutputWithContext(context.Context) VaultMapOutput
}

type VaultMap map[string]VaultInput

func (VaultMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vault)(nil)).Elem()
}

func (i VaultMap) ToVaultMapOutput() VaultMapOutput {
	return i.ToVaultMapOutputWithContext(context.Background())
}

func (i VaultMap) ToVaultMapOutputWithContext(ctx context.Context) VaultMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultMapOutput)
}

type VaultOutput struct{ *pulumi.OutputState }

func (VaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vault)(nil)).Elem()
}

func (o VaultOutput) ToVaultOutput() VaultOutput {
	return o
}

func (o VaultOutput) ToVaultOutputWithContext(ctx context.Context) VaultOutput {
	return o
}

// Whether to enable the Classic experience for VMware replication. If set to `false` VMware machines will be protected using the new stateless ASR replication appliance. Changing this forces a new resource to be created.
func (o VaultOutput) ClassicVmwareReplicationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Vault) pulumi.BoolOutput { return v.ClassicVmwareReplicationEnabled }).(pulumi.BoolOutput)
}

// Is cross region restore enabled for this Vault? Only can be `true`, when `storageModeType` is `GeoRedundant`. Defaults to `false`.
//
// > **Note:** Once `crossRegionRestoreEnabled` is set to `true`, changing it back to `false` forces a new Recovery Service Vault to be created.
func (o VaultOutput) CrossRegionRestoreEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vault) pulumi.BoolPtrOutput { return v.CrossRegionRestoreEnabled }).(pulumi.BoolPtrOutput)
}

// An `encryption` block as defined below. Required with `identity`.
//
// !> **Note:** Once Encryption with your own key has been Enabled it's not possible to Disable it.
func (o VaultOutput) Encryption() VaultEncryptionPtrOutput {
	return o.ApplyT(func(v *Vault) VaultEncryptionPtrOutput { return v.Encryption }).(VaultEncryptionPtrOutput)
}

// An `identity` block as defined below.
func (o VaultOutput) Identity() VaultIdentityPtrOutput {
	return o.ApplyT(func(v *Vault) VaultIdentityPtrOutput { return v.Identity }).(VaultIdentityPtrOutput)
}

// Immutability Settings of vault, possible values include: `Locked`, `Unlocked` and `Disabled`.
//
// > **Note:** Once `immutability` is set to `Locked`, changing it to other values forces a new Recovery Services Vault to be created.
func (o VaultOutput) Immutability() pulumi.StringOutput {
	return o.ApplyT(func(v *Vault) pulumi.StringOutput { return v.Immutability }).(pulumi.StringOutput)
}

// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
func (o VaultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Vault) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// A `monitoring` block as defined below.
func (o VaultOutput) Monitoring() VaultMonitoringPtrOutput {
	return o.ApplyT(func(v *Vault) VaultMonitoringPtrOutput { return v.Monitoring }).(VaultMonitoringPtrOutput)
}

// Specifies the name of the Recovery Services Vault. Recovery Service Vault name must be 2 - 50 characters long, start with a letter, contain only letters, numbers and hyphens. Changing this forces a new resource to be created.
func (o VaultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Vault) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Is it enabled to access the vault from public networks. Defaults to `true`.
func (o VaultOutput) PublicNetworkAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vault) pulumi.BoolPtrOutput { return v.PublicNetworkAccessEnabled }).(pulumi.BoolPtrOutput)
}

// The name of the resource group in which to create the Recovery Services Vault. Changing this forces a new resource to be created.
func (o VaultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Vault) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// Sets the vault's SKU. Possible values include: `Standard`, `RS0`.
func (o VaultOutput) Sku() pulumi.StringOutput {
	return o.ApplyT(func(v *Vault) pulumi.StringOutput { return v.Sku }).(pulumi.StringOutput)
}

// Is soft delete enable for this Vault? Defaults to `true`.
func (o VaultOutput) SoftDeleteEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vault) pulumi.BoolPtrOutput { return v.SoftDeleteEnabled }).(pulumi.BoolPtrOutput)
}

// The storage type of the Recovery Services Vault. Possible values are `GeoRedundant`, `LocallyRedundant` and `ZoneRedundant`. Defaults to `GeoRedundant`.
func (o VaultOutput) StorageModeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vault) pulumi.StringPtrOutput { return v.StorageModeType }).(pulumi.StringPtrOutput)
}

// A mapping of tags to assign to the resource.
func (o VaultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Vault) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type VaultArrayOutput struct{ *pulumi.OutputState }

func (VaultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vault)(nil)).Elem()
}

func (o VaultArrayOutput) ToVaultArrayOutput() VaultArrayOutput {
	return o
}

func (o VaultArrayOutput) ToVaultArrayOutputWithContext(ctx context.Context) VaultArrayOutput {
	return o
}

func (o VaultArrayOutput) Index(i pulumi.IntInput) VaultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vault {
		return vs[0].([]*Vault)[vs[1].(int)]
	}).(VaultOutput)
}

type VaultMapOutput struct{ *pulumi.OutputState }

func (VaultMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vault)(nil)).Elem()
}

func (o VaultMapOutput) ToVaultMapOutput() VaultMapOutput {
	return o
}

func (o VaultMapOutput) ToVaultMapOutputWithContext(ctx context.Context) VaultMapOutput {
	return o
}

func (o VaultMapOutput) MapIndex(k pulumi.StringInput) VaultOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vault {
		return vs[0].(map[string]*Vault)[vs[1].(string)]
	}).(VaultOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VaultInput)(nil)).Elem(), &Vault{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultArrayInput)(nil)).Elem(), VaultArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultMapInput)(nil)).Elem(), VaultMap{})
	pulumi.RegisterOutputType(VaultOutput{})
	pulumi.RegisterOutputType(VaultArrayOutput{})
	pulumi.RegisterOutputType(VaultMapOutput{})
}
