// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package recoveryservices

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Azure recovery vault protection container mapping. A network protection container mapping decides how to translate the protection container when a VM is migrated from one region to another.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/recovery_services_protection_container_mapping.html.markdown.
type ProtectionContainerMapping struct {
	s *pulumi.ResourceState
}

// NewProtectionContainerMapping registers a new resource with the given unique name, arguments, and options.
func NewProtectionContainerMapping(ctx *pulumi.Context,
	name string, args *ProtectionContainerMappingArgs, opts ...pulumi.ResourceOpt) (*ProtectionContainerMapping, error) {
	if args == nil || args.RecoveryFabricName == nil {
		return nil, errors.New("missing required argument 'RecoveryFabricName'")
	}
	if args == nil || args.RecoveryReplicationPolicyId == nil {
		return nil, errors.New("missing required argument 'RecoveryReplicationPolicyId'")
	}
	if args == nil || args.RecoverySourceProtectionContainerName == nil {
		return nil, errors.New("missing required argument 'RecoverySourceProtectionContainerName'")
	}
	if args == nil || args.RecoveryTargetProtectionContainerId == nil {
		return nil, errors.New("missing required argument 'RecoveryTargetProtectionContainerId'")
	}
	if args == nil || args.RecoveryVaultName == nil {
		return nil, errors.New("missing required argument 'RecoveryVaultName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["name"] = nil
		inputs["recoveryFabricName"] = nil
		inputs["recoveryReplicationPolicyId"] = nil
		inputs["recoverySourceProtectionContainerName"] = nil
		inputs["recoveryTargetProtectionContainerId"] = nil
		inputs["recoveryVaultName"] = nil
		inputs["resourceGroupName"] = nil
	} else {
		inputs["name"] = args.Name
		inputs["recoveryFabricName"] = args.RecoveryFabricName
		inputs["recoveryReplicationPolicyId"] = args.RecoveryReplicationPolicyId
		inputs["recoverySourceProtectionContainerName"] = args.RecoverySourceProtectionContainerName
		inputs["recoveryTargetProtectionContainerId"] = args.RecoveryTargetProtectionContainerId
		inputs["recoveryVaultName"] = args.RecoveryVaultName
		inputs["resourceGroupName"] = args.ResourceGroupName
	}
	s, err := ctx.RegisterResource("azure:recoveryservices/protectionContainerMapping:ProtectionContainerMapping", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProtectionContainerMapping{s: s}, nil
}

// GetProtectionContainerMapping gets an existing ProtectionContainerMapping resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProtectionContainerMapping(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ProtectionContainerMappingState, opts ...pulumi.ResourceOpt) (*ProtectionContainerMapping, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["name"] = state.Name
		inputs["recoveryFabricName"] = state.RecoveryFabricName
		inputs["recoveryReplicationPolicyId"] = state.RecoveryReplicationPolicyId
		inputs["recoverySourceProtectionContainerName"] = state.RecoverySourceProtectionContainerName
		inputs["recoveryTargetProtectionContainerId"] = state.RecoveryTargetProtectionContainerId
		inputs["recoveryVaultName"] = state.RecoveryVaultName
		inputs["resourceGroupName"] = state.ResourceGroupName
	}
	s, err := ctx.ReadResource("azure:recoveryservices/protectionContainerMapping:ProtectionContainerMapping", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProtectionContainerMapping{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ProtectionContainerMapping) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ProtectionContainerMapping) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The name of the network mapping.
func (r *ProtectionContainerMapping) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Name of fabric that should contains the protection container to map.
func (r *ProtectionContainerMapping) RecoveryFabricName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["recoveryFabricName"])
}

// Id of the policy to use for this mapping.
func (r *ProtectionContainerMapping) RecoveryReplicationPolicyId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["recoveryReplicationPolicyId"])
}

// Name of the protection container to map.
func (r *ProtectionContainerMapping) RecoverySourceProtectionContainerName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["recoverySourceProtectionContainerName"])
}

// Id of protection container to map to.
func (r *ProtectionContainerMapping) RecoveryTargetProtectionContainerId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["recoveryTargetProtectionContainerId"])
}

// The name of the vault that should be updated.
func (r *ProtectionContainerMapping) RecoveryVaultName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["recoveryVaultName"])
}

// Name of the resource group where the vault that should be updated is located.
func (r *ProtectionContainerMapping) ResourceGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// Input properties used for looking up and filtering ProtectionContainerMapping resources.
type ProtectionContainerMappingState struct {
	// The name of the network mapping.
	Name interface{}
	// Name of fabric that should contains the protection container to map.
	RecoveryFabricName interface{}
	// Id of the policy to use for this mapping.
	RecoveryReplicationPolicyId interface{}
	// Name of the protection container to map.
	RecoverySourceProtectionContainerName interface{}
	// Id of protection container to map to.
	RecoveryTargetProtectionContainerId interface{}
	// The name of the vault that should be updated.
	RecoveryVaultName interface{}
	// Name of the resource group where the vault that should be updated is located.
	ResourceGroupName interface{}
}

// The set of arguments for constructing a ProtectionContainerMapping resource.
type ProtectionContainerMappingArgs struct {
	// The name of the network mapping.
	Name interface{}
	// Name of fabric that should contains the protection container to map.
	RecoveryFabricName interface{}
	// Id of the policy to use for this mapping.
	RecoveryReplicationPolicyId interface{}
	// Name of the protection container to map.
	RecoverySourceProtectionContainerName interface{}
	// Id of protection container to map to.
	RecoveryTargetProtectionContainerId interface{}
	// The name of the vault that should be updated.
	RecoveryVaultName interface{}
	// Name of the resource group where the vault that should be updated is located.
	ResourceGroupName interface{}
}
