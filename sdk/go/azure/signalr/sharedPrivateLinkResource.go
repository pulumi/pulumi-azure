// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package signalr

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages the Shared Private Link Resource for a Signalr service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/keyvault"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/signalr"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := core.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("east us"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleKeyVault, err := keyvault.NewKeyVault(ctx, "exampleKeyVault", &keyvault.KeyVaultArgs{
//				Location:                exampleResourceGroup.Location,
//				ResourceGroupName:       exampleResourceGroup.Name,
//				TenantId:                *pulumi.String(current.TenantId),
//				SkuName:                 pulumi.String("standard"),
//				SoftDeleteRetentionDays: pulumi.Int(7),
//				AccessPolicies: keyvault.KeyVaultAccessPolicyArray{
//					&keyvault.KeyVaultAccessPolicyArgs{
//						TenantId: *pulumi.String(current.TenantId),
//						ObjectId: *pulumi.String(current.ObjectId),
//						CertificatePermissions: pulumi.StringArray{
//							pulumi.String("ManageContacts"),
//						},
//						KeyPermissions: pulumi.StringArray{
//							pulumi.String("Create"),
//						},
//						SecretPermissions: pulumi.StringArray{
//							pulumi.String("Set"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = signalr.NewService(ctx, "test", &signalr.ServiceArgs{
//				Location:          pulumi.Any(azurerm_resource_group.Test.Location),
//				ResourceGroupName: pulumi.Any(azurerm_resource_group.Test.Name),
//				Sku: &signalr.ServiceSkuArgs{
//					Name:     pulumi.String("Standard_S1"),
//					Capacity: pulumi.Int(1),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = signalr.NewSharedPrivateLinkResource(ctx, "exampleSharedPrivateLinkResource", &signalr.SharedPrivateLinkResourceArgs{
//				SignalrServiceId: pulumi.Any(azurerm_signalr_service.Example.Id),
//				SubResourceName:  pulumi.String("vault"),
//				TargetResourceId: exampleKeyVault.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Signalr Shared Private Link Resource can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:signalr/sharedPrivateLinkResource:SharedPrivateLinkResource example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.SignalRService/signalR/signalr1/sharedPrivateLinkResources/resource1
//
// ```
type SharedPrivateLinkResource struct {
	pulumi.CustomResourceState

	// The name of the Signalr Shared Private Link Resource. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The request message for requesting approval of the Shared Private Link Enabled Remote Resource.
	RequestMessage pulumi.StringPtrOutput `pulumi:"requestMessage"`
	// The id of the Signalr Service. Changing this forces a new resource to be created.
	SignalrServiceId pulumi.StringOutput `pulumi:"signalrServiceId"`
	// The status of a private endpoint connection. Possible values are `Pending`, `Approved`, `Rejected` or `Disconnected`.
	Status pulumi.StringOutput `pulumi:"status"`
	// The sub resource name which the Signalr Private Endpoint can connect to. Possible values are `sites`, `vault`. Changing this forces a new resource to be created.
	SubResourceName pulumi.StringOutput `pulumi:"subResourceName"`
	// The ID of the Shared Private Link Enabled Remote Resource which this Signalr Private Endpoint should be connected to. Changing this forces a new resource to be created.
	//
	// > **NOTE:** The `subResourceName` should match with the type of the `targetResourceId` that's being specified.
	TargetResourceId pulumi.StringOutput `pulumi:"targetResourceId"`
}

// NewSharedPrivateLinkResource registers a new resource with the given unique name, arguments, and options.
func NewSharedPrivateLinkResource(ctx *pulumi.Context,
	name string, args *SharedPrivateLinkResourceArgs, opts ...pulumi.ResourceOption) (*SharedPrivateLinkResource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SignalrServiceId == nil {
		return nil, errors.New("invalid value for required argument 'SignalrServiceId'")
	}
	if args.SubResourceName == nil {
		return nil, errors.New("invalid value for required argument 'SubResourceName'")
	}
	if args.TargetResourceId == nil {
		return nil, errors.New("invalid value for required argument 'TargetResourceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SharedPrivateLinkResource
	err := ctx.RegisterResource("azure:signalr/sharedPrivateLinkResource:SharedPrivateLinkResource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSharedPrivateLinkResource gets an existing SharedPrivateLinkResource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSharedPrivateLinkResource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SharedPrivateLinkResourceState, opts ...pulumi.ResourceOption) (*SharedPrivateLinkResource, error) {
	var resource SharedPrivateLinkResource
	err := ctx.ReadResource("azure:signalr/sharedPrivateLinkResource:SharedPrivateLinkResource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SharedPrivateLinkResource resources.
type sharedPrivateLinkResourceState struct {
	// The name of the Signalr Shared Private Link Resource. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The request message for requesting approval of the Shared Private Link Enabled Remote Resource.
	RequestMessage *string `pulumi:"requestMessage"`
	// The id of the Signalr Service. Changing this forces a new resource to be created.
	SignalrServiceId *string `pulumi:"signalrServiceId"`
	// The status of a private endpoint connection. Possible values are `Pending`, `Approved`, `Rejected` or `Disconnected`.
	Status *string `pulumi:"status"`
	// The sub resource name which the Signalr Private Endpoint can connect to. Possible values are `sites`, `vault`. Changing this forces a new resource to be created.
	SubResourceName *string `pulumi:"subResourceName"`
	// The ID of the Shared Private Link Enabled Remote Resource which this Signalr Private Endpoint should be connected to. Changing this forces a new resource to be created.
	//
	// > **NOTE:** The `subResourceName` should match with the type of the `targetResourceId` that's being specified.
	TargetResourceId *string `pulumi:"targetResourceId"`
}

type SharedPrivateLinkResourceState struct {
	// The name of the Signalr Shared Private Link Resource. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The request message for requesting approval of the Shared Private Link Enabled Remote Resource.
	RequestMessage pulumi.StringPtrInput
	// The id of the Signalr Service. Changing this forces a new resource to be created.
	SignalrServiceId pulumi.StringPtrInput
	// The status of a private endpoint connection. Possible values are `Pending`, `Approved`, `Rejected` or `Disconnected`.
	Status pulumi.StringPtrInput
	// The sub resource name which the Signalr Private Endpoint can connect to. Possible values are `sites`, `vault`. Changing this forces a new resource to be created.
	SubResourceName pulumi.StringPtrInput
	// The ID of the Shared Private Link Enabled Remote Resource which this Signalr Private Endpoint should be connected to. Changing this forces a new resource to be created.
	//
	// > **NOTE:** The `subResourceName` should match with the type of the `targetResourceId` that's being specified.
	TargetResourceId pulumi.StringPtrInput
}

func (SharedPrivateLinkResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*sharedPrivateLinkResourceState)(nil)).Elem()
}

type sharedPrivateLinkResourceArgs struct {
	// The name of the Signalr Shared Private Link Resource. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The request message for requesting approval of the Shared Private Link Enabled Remote Resource.
	RequestMessage *string `pulumi:"requestMessage"`
	// The id of the Signalr Service. Changing this forces a new resource to be created.
	SignalrServiceId string `pulumi:"signalrServiceId"`
	// The sub resource name which the Signalr Private Endpoint can connect to. Possible values are `sites`, `vault`. Changing this forces a new resource to be created.
	SubResourceName string `pulumi:"subResourceName"`
	// The ID of the Shared Private Link Enabled Remote Resource which this Signalr Private Endpoint should be connected to. Changing this forces a new resource to be created.
	//
	// > **NOTE:** The `subResourceName` should match with the type of the `targetResourceId` that's being specified.
	TargetResourceId string `pulumi:"targetResourceId"`
}

// The set of arguments for constructing a SharedPrivateLinkResource resource.
type SharedPrivateLinkResourceArgs struct {
	// The name of the Signalr Shared Private Link Resource. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The request message for requesting approval of the Shared Private Link Enabled Remote Resource.
	RequestMessage pulumi.StringPtrInput
	// The id of the Signalr Service. Changing this forces a new resource to be created.
	SignalrServiceId pulumi.StringInput
	// The sub resource name which the Signalr Private Endpoint can connect to. Possible values are `sites`, `vault`. Changing this forces a new resource to be created.
	SubResourceName pulumi.StringInput
	// The ID of the Shared Private Link Enabled Remote Resource which this Signalr Private Endpoint should be connected to. Changing this forces a new resource to be created.
	//
	// > **NOTE:** The `subResourceName` should match with the type of the `targetResourceId` that's being specified.
	TargetResourceId pulumi.StringInput
}

func (SharedPrivateLinkResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sharedPrivateLinkResourceArgs)(nil)).Elem()
}

type SharedPrivateLinkResourceInput interface {
	pulumi.Input

	ToSharedPrivateLinkResourceOutput() SharedPrivateLinkResourceOutput
	ToSharedPrivateLinkResourceOutputWithContext(ctx context.Context) SharedPrivateLinkResourceOutput
}

func (*SharedPrivateLinkResource) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedPrivateLinkResource)(nil)).Elem()
}

func (i *SharedPrivateLinkResource) ToSharedPrivateLinkResourceOutput() SharedPrivateLinkResourceOutput {
	return i.ToSharedPrivateLinkResourceOutputWithContext(context.Background())
}

func (i *SharedPrivateLinkResource) ToSharedPrivateLinkResourceOutputWithContext(ctx context.Context) SharedPrivateLinkResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedPrivateLinkResourceOutput)
}

// SharedPrivateLinkResourceArrayInput is an input type that accepts SharedPrivateLinkResourceArray and SharedPrivateLinkResourceArrayOutput values.
// You can construct a concrete instance of `SharedPrivateLinkResourceArrayInput` via:
//
//	SharedPrivateLinkResourceArray{ SharedPrivateLinkResourceArgs{...} }
type SharedPrivateLinkResourceArrayInput interface {
	pulumi.Input

	ToSharedPrivateLinkResourceArrayOutput() SharedPrivateLinkResourceArrayOutput
	ToSharedPrivateLinkResourceArrayOutputWithContext(context.Context) SharedPrivateLinkResourceArrayOutput
}

type SharedPrivateLinkResourceArray []SharedPrivateLinkResourceInput

func (SharedPrivateLinkResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SharedPrivateLinkResource)(nil)).Elem()
}

func (i SharedPrivateLinkResourceArray) ToSharedPrivateLinkResourceArrayOutput() SharedPrivateLinkResourceArrayOutput {
	return i.ToSharedPrivateLinkResourceArrayOutputWithContext(context.Background())
}

func (i SharedPrivateLinkResourceArray) ToSharedPrivateLinkResourceArrayOutputWithContext(ctx context.Context) SharedPrivateLinkResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedPrivateLinkResourceArrayOutput)
}

// SharedPrivateLinkResourceMapInput is an input type that accepts SharedPrivateLinkResourceMap and SharedPrivateLinkResourceMapOutput values.
// You can construct a concrete instance of `SharedPrivateLinkResourceMapInput` via:
//
//	SharedPrivateLinkResourceMap{ "key": SharedPrivateLinkResourceArgs{...} }
type SharedPrivateLinkResourceMapInput interface {
	pulumi.Input

	ToSharedPrivateLinkResourceMapOutput() SharedPrivateLinkResourceMapOutput
	ToSharedPrivateLinkResourceMapOutputWithContext(context.Context) SharedPrivateLinkResourceMapOutput
}

type SharedPrivateLinkResourceMap map[string]SharedPrivateLinkResourceInput

func (SharedPrivateLinkResourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SharedPrivateLinkResource)(nil)).Elem()
}

func (i SharedPrivateLinkResourceMap) ToSharedPrivateLinkResourceMapOutput() SharedPrivateLinkResourceMapOutput {
	return i.ToSharedPrivateLinkResourceMapOutputWithContext(context.Background())
}

func (i SharedPrivateLinkResourceMap) ToSharedPrivateLinkResourceMapOutputWithContext(ctx context.Context) SharedPrivateLinkResourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedPrivateLinkResourceMapOutput)
}

type SharedPrivateLinkResourceOutput struct{ *pulumi.OutputState }

func (SharedPrivateLinkResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedPrivateLinkResource)(nil)).Elem()
}

func (o SharedPrivateLinkResourceOutput) ToSharedPrivateLinkResourceOutput() SharedPrivateLinkResourceOutput {
	return o
}

func (o SharedPrivateLinkResourceOutput) ToSharedPrivateLinkResourceOutputWithContext(ctx context.Context) SharedPrivateLinkResourceOutput {
	return o
}

// The name of the Signalr Shared Private Link Resource. Changing this forces a new resource to be created.
func (o SharedPrivateLinkResourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedPrivateLinkResource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The request message for requesting approval of the Shared Private Link Enabled Remote Resource.
func (o SharedPrivateLinkResourceOutput) RequestMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SharedPrivateLinkResource) pulumi.StringPtrOutput { return v.RequestMessage }).(pulumi.StringPtrOutput)
}

// The id of the Signalr Service. Changing this forces a new resource to be created.
func (o SharedPrivateLinkResourceOutput) SignalrServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedPrivateLinkResource) pulumi.StringOutput { return v.SignalrServiceId }).(pulumi.StringOutput)
}

// The status of a private endpoint connection. Possible values are `Pending`, `Approved`, `Rejected` or `Disconnected`.
func (o SharedPrivateLinkResourceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedPrivateLinkResource) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The sub resource name which the Signalr Private Endpoint can connect to. Possible values are `sites`, `vault`. Changing this forces a new resource to be created.
func (o SharedPrivateLinkResourceOutput) SubResourceName() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedPrivateLinkResource) pulumi.StringOutput { return v.SubResourceName }).(pulumi.StringOutput)
}

// The ID of the Shared Private Link Enabled Remote Resource which this Signalr Private Endpoint should be connected to. Changing this forces a new resource to be created.
//
// > **NOTE:** The `subResourceName` should match with the type of the `targetResourceId` that's being specified.
func (o SharedPrivateLinkResourceOutput) TargetResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedPrivateLinkResource) pulumi.StringOutput { return v.TargetResourceId }).(pulumi.StringOutput)
}

type SharedPrivateLinkResourceArrayOutput struct{ *pulumi.OutputState }

func (SharedPrivateLinkResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SharedPrivateLinkResource)(nil)).Elem()
}

func (o SharedPrivateLinkResourceArrayOutput) ToSharedPrivateLinkResourceArrayOutput() SharedPrivateLinkResourceArrayOutput {
	return o
}

func (o SharedPrivateLinkResourceArrayOutput) ToSharedPrivateLinkResourceArrayOutputWithContext(ctx context.Context) SharedPrivateLinkResourceArrayOutput {
	return o
}

func (o SharedPrivateLinkResourceArrayOutput) Index(i pulumi.IntInput) SharedPrivateLinkResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SharedPrivateLinkResource {
		return vs[0].([]*SharedPrivateLinkResource)[vs[1].(int)]
	}).(SharedPrivateLinkResourceOutput)
}

type SharedPrivateLinkResourceMapOutput struct{ *pulumi.OutputState }

func (SharedPrivateLinkResourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SharedPrivateLinkResource)(nil)).Elem()
}

func (o SharedPrivateLinkResourceMapOutput) ToSharedPrivateLinkResourceMapOutput() SharedPrivateLinkResourceMapOutput {
	return o
}

func (o SharedPrivateLinkResourceMapOutput) ToSharedPrivateLinkResourceMapOutputWithContext(ctx context.Context) SharedPrivateLinkResourceMapOutput {
	return o
}

func (o SharedPrivateLinkResourceMapOutput) MapIndex(k pulumi.StringInput) SharedPrivateLinkResourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SharedPrivateLinkResource {
		return vs[0].(map[string]*SharedPrivateLinkResource)[vs[1].(string)]
	}).(SharedPrivateLinkResourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SharedPrivateLinkResourceInput)(nil)).Elem(), &SharedPrivateLinkResource{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedPrivateLinkResourceArrayInput)(nil)).Elem(), SharedPrivateLinkResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedPrivateLinkResourceMapInput)(nil)).Elem(), SharedPrivateLinkResourceMap{})
	pulumi.RegisterOutputType(SharedPrivateLinkResourceOutput{})
	pulumi.RegisterOutputType(SharedPrivateLinkResourceArrayOutput{})
	pulumi.RegisterOutputType(SharedPrivateLinkResourceMapOutput{})
}
