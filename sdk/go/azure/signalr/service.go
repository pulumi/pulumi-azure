// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package signalr

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Azure SignalR service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/signalr"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West US"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = signalr.NewService(ctx, "exampleService", &signalr.ServiceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku: &signalr.ServiceSkuArgs{
//					Name:     pulumi.String("Free_F1"),
//					Capacity: pulumi.Int(1),
//				},
//				Cors: signalr.ServiceCorArray{
//					&signalr.ServiceCorArgs{
//						AllowedOrigins: pulumi.StringArray{
//							pulumi.String("http://www.example.com"),
//						},
//					},
//				},
//				PublicNetworkAccessEnabled: pulumi.Bool(false),
//				ConnectivityLogsEnabled:    pulumi.Bool(true),
//				MessagingLogsEnabled:       pulumi.Bool(true),
//				ServiceMode:                pulumi.String("Default"),
//				UpstreamEndpoints: signalr.ServiceUpstreamEndpointArray{
//					&signalr.ServiceUpstreamEndpointArgs{
//						CategoryPatterns: pulumi.StringArray{
//							pulumi.String("connections"),
//							pulumi.String("messages"),
//						},
//						EventPatterns: pulumi.StringArray{
//							pulumi.String("*"),
//						},
//						HubPatterns: pulumi.StringArray{
//							pulumi.String("hub1"),
//						},
//						UrlTemplate: pulumi.String("http://foo.com"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SignalR services can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:signalr/service:Service example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/terraform-signalr/providers/Microsoft.SignalRService/signalR/tfex-signalr
//
// ```
type Service struct {
	pulumi.CustomResourceState

	// Whether to enable AAD auth? Defaults to `true`.
	AadAuthEnabled pulumi.BoolPtrOutput `pulumi:"aadAuthEnabled"`
	// Specifies if Connectivity Logs are enabled or not. Defaults to `false`.
	ConnectivityLogsEnabled pulumi.BoolPtrOutput `pulumi:"connectivityLogsEnabled"`
	// A `cors` block as documented below.
	Cors ServiceCorArrayOutput `pulumi:"cors"`
	// The FQDN of the SignalR service.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// Specifies if Http Request Logs are enabled or not. Defaults to `false`.
	HttpRequestLogsEnabled pulumi.BoolPtrOutput `pulumi:"httpRequestLogsEnabled"`
	// An `identity` block as defined below.
	Identity ServiceIdentityPtrOutput `pulumi:"identity"`
	// The publicly accessible IP of the SignalR service.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// A `liveTrace` block as defined below.
	LiveTrace ServiceLiveTracePtrOutput `pulumi:"liveTrace"`
	// Specifies if Live Trace is enabled or not. Defaults to `false`.
	//
	// Deprecated: `live_trace_enabled` has been deprecated in favor of `live_trace` and will be removed in 4.0.
	LiveTraceEnabled pulumi.BoolPtrOutput `pulumi:"liveTraceEnabled"`
	// Whether to enable local auth? Defaults to `true`.
	LocalAuthEnabled pulumi.BoolPtrOutput `pulumi:"localAuthEnabled"`
	// Specifies the supported Azure location where the SignalR service exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies if Messaging Logs are enabled or not. Defaults to `false`.
	MessagingLogsEnabled pulumi.BoolPtrOutput `pulumi:"messagingLogsEnabled"`
	// The name of the SignalR service. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The primary access key for the SignalR service.
	PrimaryAccessKey pulumi.StringOutput `pulumi:"primaryAccessKey"`
	// The primary connection string for the SignalR service.
	PrimaryConnectionString pulumi.StringOutput `pulumi:"primaryConnectionString"`
	// Whether to enable public network access? Defaults to `true`.
	//
	// > **Note:** `publicNetworkAccessEnabled` cannot be set to `false` in `Free` sku tier.
	PublicNetworkAccessEnabled pulumi.BoolPtrOutput `pulumi:"publicNetworkAccessEnabled"`
	// The publicly accessible port of the SignalR service which is designed for browser/client use.
	PublicPort pulumi.IntOutput `pulumi:"publicPort"`
	// The name of the resource group in which to create the SignalR service. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The secondary access key for the SignalR service.
	SecondaryAccessKey pulumi.StringOutput `pulumi:"secondaryAccessKey"`
	// The secondary connection string for the SignalR service.
	SecondaryConnectionString pulumi.StringOutput `pulumi:"secondaryConnectionString"`
	// The publicly accessible port of the SignalR service which is designed for customer server side use.
	ServerPort pulumi.IntOutput `pulumi:"serverPort"`
	// Specifies the client connection timeout. Defaults to `30`.
	ServerlessConnectionTimeoutInSeconds pulumi.IntPtrOutput `pulumi:"serverlessConnectionTimeoutInSeconds"`
	// Specifies the service mode. Possible values are `Classic`, `Default` and `Serverless`. Defaults to `Default`.
	ServiceMode pulumi.StringPtrOutput `pulumi:"serviceMode"`
	// A `sku` block as documented below.
	Sku ServiceSkuOutput `pulumi:"sku"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Whether to request client certificate during TLS handshake? Defaults to `false`.
	//
	// > **Note:** `tlsClientCertEnabled` cannot be set to `true` in `Free` sku tier.
	TlsClientCertEnabled pulumi.BoolPtrOutput `pulumi:"tlsClientCertEnabled"`
	// An `upstreamEndpoint` block as documented below. Using this block requires the SignalR service to be Serverless. When creating multiple blocks they will be processed in the order they are defined in.
	UpstreamEndpoints ServiceUpstreamEndpointArrayOutput `pulumi:"upstreamEndpoints"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Sku == nil {
		return nil, errors.New("invalid value for required argument 'Sku'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"primaryAccessKey",
		"primaryConnectionString",
		"secondaryAccessKey",
		"secondaryConnectionString",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Service
	err := ctx.RegisterResource("azure:signalr/service:Service", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("azure:signalr/service:Service", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type serviceState struct {
	// Whether to enable AAD auth? Defaults to `true`.
	AadAuthEnabled *bool `pulumi:"aadAuthEnabled"`
	// Specifies if Connectivity Logs are enabled or not. Defaults to `false`.
	ConnectivityLogsEnabled *bool `pulumi:"connectivityLogsEnabled"`
	// A `cors` block as documented below.
	Cors []ServiceCor `pulumi:"cors"`
	// The FQDN of the SignalR service.
	Hostname *string `pulumi:"hostname"`
	// Specifies if Http Request Logs are enabled or not. Defaults to `false`.
	HttpRequestLogsEnabled *bool `pulumi:"httpRequestLogsEnabled"`
	// An `identity` block as defined below.
	Identity *ServiceIdentity `pulumi:"identity"`
	// The publicly accessible IP of the SignalR service.
	IpAddress *string `pulumi:"ipAddress"`
	// A `liveTrace` block as defined below.
	LiveTrace *ServiceLiveTrace `pulumi:"liveTrace"`
	// Specifies if Live Trace is enabled or not. Defaults to `false`.
	//
	// Deprecated: `live_trace_enabled` has been deprecated in favor of `live_trace` and will be removed in 4.0.
	LiveTraceEnabled *bool `pulumi:"liveTraceEnabled"`
	// Whether to enable local auth? Defaults to `true`.
	LocalAuthEnabled *bool `pulumi:"localAuthEnabled"`
	// Specifies the supported Azure location where the SignalR service exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies if Messaging Logs are enabled or not. Defaults to `false`.
	MessagingLogsEnabled *bool `pulumi:"messagingLogsEnabled"`
	// The name of the SignalR service. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The primary access key for the SignalR service.
	PrimaryAccessKey *string `pulumi:"primaryAccessKey"`
	// The primary connection string for the SignalR service.
	PrimaryConnectionString *string `pulumi:"primaryConnectionString"`
	// Whether to enable public network access? Defaults to `true`.
	//
	// > **Note:** `publicNetworkAccessEnabled` cannot be set to `false` in `Free` sku tier.
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// The publicly accessible port of the SignalR service which is designed for browser/client use.
	PublicPort *int `pulumi:"publicPort"`
	// The name of the resource group in which to create the SignalR service. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The secondary access key for the SignalR service.
	SecondaryAccessKey *string `pulumi:"secondaryAccessKey"`
	// The secondary connection string for the SignalR service.
	SecondaryConnectionString *string `pulumi:"secondaryConnectionString"`
	// The publicly accessible port of the SignalR service which is designed for customer server side use.
	ServerPort *int `pulumi:"serverPort"`
	// Specifies the client connection timeout. Defaults to `30`.
	ServerlessConnectionTimeoutInSeconds *int `pulumi:"serverlessConnectionTimeoutInSeconds"`
	// Specifies the service mode. Possible values are `Classic`, `Default` and `Serverless`. Defaults to `Default`.
	ServiceMode *string `pulumi:"serviceMode"`
	// A `sku` block as documented below.
	Sku *ServiceSku `pulumi:"sku"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Whether to request client certificate during TLS handshake? Defaults to `false`.
	//
	// > **Note:** `tlsClientCertEnabled` cannot be set to `true` in `Free` sku tier.
	TlsClientCertEnabled *bool `pulumi:"tlsClientCertEnabled"`
	// An `upstreamEndpoint` block as documented below. Using this block requires the SignalR service to be Serverless. When creating multiple blocks they will be processed in the order they are defined in.
	UpstreamEndpoints []ServiceUpstreamEndpoint `pulumi:"upstreamEndpoints"`
}

type ServiceState struct {
	// Whether to enable AAD auth? Defaults to `true`.
	AadAuthEnabled pulumi.BoolPtrInput
	// Specifies if Connectivity Logs are enabled or not. Defaults to `false`.
	ConnectivityLogsEnabled pulumi.BoolPtrInput
	// A `cors` block as documented below.
	Cors ServiceCorArrayInput
	// The FQDN of the SignalR service.
	Hostname pulumi.StringPtrInput
	// Specifies if Http Request Logs are enabled or not. Defaults to `false`.
	HttpRequestLogsEnabled pulumi.BoolPtrInput
	// An `identity` block as defined below.
	Identity ServiceIdentityPtrInput
	// The publicly accessible IP of the SignalR service.
	IpAddress pulumi.StringPtrInput
	// A `liveTrace` block as defined below.
	LiveTrace ServiceLiveTracePtrInput
	// Specifies if Live Trace is enabled or not. Defaults to `false`.
	//
	// Deprecated: `live_trace_enabled` has been deprecated in favor of `live_trace` and will be removed in 4.0.
	LiveTraceEnabled pulumi.BoolPtrInput
	// Whether to enable local auth? Defaults to `true`.
	LocalAuthEnabled pulumi.BoolPtrInput
	// Specifies the supported Azure location where the SignalR service exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies if Messaging Logs are enabled or not. Defaults to `false`.
	MessagingLogsEnabled pulumi.BoolPtrInput
	// The name of the SignalR service. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The primary access key for the SignalR service.
	PrimaryAccessKey pulumi.StringPtrInput
	// The primary connection string for the SignalR service.
	PrimaryConnectionString pulumi.StringPtrInput
	// Whether to enable public network access? Defaults to `true`.
	//
	// > **Note:** `publicNetworkAccessEnabled` cannot be set to `false` in `Free` sku tier.
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// The publicly accessible port of the SignalR service which is designed for browser/client use.
	PublicPort pulumi.IntPtrInput
	// The name of the resource group in which to create the SignalR service. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The secondary access key for the SignalR service.
	SecondaryAccessKey pulumi.StringPtrInput
	// The secondary connection string for the SignalR service.
	SecondaryConnectionString pulumi.StringPtrInput
	// The publicly accessible port of the SignalR service which is designed for customer server side use.
	ServerPort pulumi.IntPtrInput
	// Specifies the client connection timeout. Defaults to `30`.
	ServerlessConnectionTimeoutInSeconds pulumi.IntPtrInput
	// Specifies the service mode. Possible values are `Classic`, `Default` and `Serverless`. Defaults to `Default`.
	ServiceMode pulumi.StringPtrInput
	// A `sku` block as documented below.
	Sku ServiceSkuPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// Whether to request client certificate during TLS handshake? Defaults to `false`.
	//
	// > **Note:** `tlsClientCertEnabled` cannot be set to `true` in `Free` sku tier.
	TlsClientCertEnabled pulumi.BoolPtrInput
	// An `upstreamEndpoint` block as documented below. Using this block requires the SignalR service to be Serverless. When creating multiple blocks they will be processed in the order they are defined in.
	UpstreamEndpoints ServiceUpstreamEndpointArrayInput
}

func (ServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceState)(nil)).Elem()
}

type serviceArgs struct {
	// Whether to enable AAD auth? Defaults to `true`.
	AadAuthEnabled *bool `pulumi:"aadAuthEnabled"`
	// Specifies if Connectivity Logs are enabled or not. Defaults to `false`.
	ConnectivityLogsEnabled *bool `pulumi:"connectivityLogsEnabled"`
	// A `cors` block as documented below.
	Cors []ServiceCor `pulumi:"cors"`
	// Specifies if Http Request Logs are enabled or not. Defaults to `false`.
	HttpRequestLogsEnabled *bool `pulumi:"httpRequestLogsEnabled"`
	// An `identity` block as defined below.
	Identity *ServiceIdentity `pulumi:"identity"`
	// A `liveTrace` block as defined below.
	LiveTrace *ServiceLiveTrace `pulumi:"liveTrace"`
	// Specifies if Live Trace is enabled or not. Defaults to `false`.
	//
	// Deprecated: `live_trace_enabled` has been deprecated in favor of `live_trace` and will be removed in 4.0.
	LiveTraceEnabled *bool `pulumi:"liveTraceEnabled"`
	// Whether to enable local auth? Defaults to `true`.
	LocalAuthEnabled *bool `pulumi:"localAuthEnabled"`
	// Specifies the supported Azure location where the SignalR service exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies if Messaging Logs are enabled or not. Defaults to `false`.
	MessagingLogsEnabled *bool `pulumi:"messagingLogsEnabled"`
	// The name of the SignalR service. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Whether to enable public network access? Defaults to `true`.
	//
	// > **Note:** `publicNetworkAccessEnabled` cannot be set to `false` in `Free` sku tier.
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// The name of the resource group in which to create the SignalR service. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Specifies the client connection timeout. Defaults to `30`.
	ServerlessConnectionTimeoutInSeconds *int `pulumi:"serverlessConnectionTimeoutInSeconds"`
	// Specifies the service mode. Possible values are `Classic`, `Default` and `Serverless`. Defaults to `Default`.
	ServiceMode *string `pulumi:"serviceMode"`
	// A `sku` block as documented below.
	Sku ServiceSku `pulumi:"sku"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Whether to request client certificate during TLS handshake? Defaults to `false`.
	//
	// > **Note:** `tlsClientCertEnabled` cannot be set to `true` in `Free` sku tier.
	TlsClientCertEnabled *bool `pulumi:"tlsClientCertEnabled"`
	// An `upstreamEndpoint` block as documented below. Using this block requires the SignalR service to be Serverless. When creating multiple blocks they will be processed in the order they are defined in.
	UpstreamEndpoints []ServiceUpstreamEndpoint `pulumi:"upstreamEndpoints"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	// Whether to enable AAD auth? Defaults to `true`.
	AadAuthEnabled pulumi.BoolPtrInput
	// Specifies if Connectivity Logs are enabled or not. Defaults to `false`.
	ConnectivityLogsEnabled pulumi.BoolPtrInput
	// A `cors` block as documented below.
	Cors ServiceCorArrayInput
	// Specifies if Http Request Logs are enabled or not. Defaults to `false`.
	HttpRequestLogsEnabled pulumi.BoolPtrInput
	// An `identity` block as defined below.
	Identity ServiceIdentityPtrInput
	// A `liveTrace` block as defined below.
	LiveTrace ServiceLiveTracePtrInput
	// Specifies if Live Trace is enabled or not. Defaults to `false`.
	//
	// Deprecated: `live_trace_enabled` has been deprecated in favor of `live_trace` and will be removed in 4.0.
	LiveTraceEnabled pulumi.BoolPtrInput
	// Whether to enable local auth? Defaults to `true`.
	LocalAuthEnabled pulumi.BoolPtrInput
	// Specifies the supported Azure location where the SignalR service exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies if Messaging Logs are enabled or not. Defaults to `false`.
	MessagingLogsEnabled pulumi.BoolPtrInput
	// The name of the SignalR service. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Whether to enable public network access? Defaults to `true`.
	//
	// > **Note:** `publicNetworkAccessEnabled` cannot be set to `false` in `Free` sku tier.
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// The name of the resource group in which to create the SignalR service. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// Specifies the client connection timeout. Defaults to `30`.
	ServerlessConnectionTimeoutInSeconds pulumi.IntPtrInput
	// Specifies the service mode. Possible values are `Classic`, `Default` and `Serverless`. Defaults to `Default`.
	ServiceMode pulumi.StringPtrInput
	// A `sku` block as documented below.
	Sku ServiceSkuInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// Whether to request client certificate during TLS handshake? Defaults to `false`.
	//
	// > **Note:** `tlsClientCertEnabled` cannot be set to `true` in `Free` sku tier.
	TlsClientCertEnabled pulumi.BoolPtrInput
	// An `upstreamEndpoint` block as documented below. Using this block requires the SignalR service to be Serverless. When creating multiple blocks they will be processed in the order they are defined in.
	UpstreamEndpoints ServiceUpstreamEndpointArrayInput
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceArgs)(nil)).Elem()
}

type ServiceInput interface {
	pulumi.Input

	ToServiceOutput() ServiceOutput
	ToServiceOutputWithContext(ctx context.Context) ServiceOutput
}

func (*Service) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (i *Service) ToServiceOutput() ServiceOutput {
	return i.ToServiceOutputWithContext(context.Background())
}

func (i *Service) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOutput)
}

// ServiceArrayInput is an input type that accepts ServiceArray and ServiceArrayOutput values.
// You can construct a concrete instance of `ServiceArrayInput` via:
//
//	ServiceArray{ ServiceArgs{...} }
type ServiceArrayInput interface {
	pulumi.Input

	ToServiceArrayOutput() ServiceArrayOutput
	ToServiceArrayOutputWithContext(context.Context) ServiceArrayOutput
}

type ServiceArray []ServiceInput

func (ServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Service)(nil)).Elem()
}

func (i ServiceArray) ToServiceArrayOutput() ServiceArrayOutput {
	return i.ToServiceArrayOutputWithContext(context.Background())
}

func (i ServiceArray) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceArrayOutput)
}

// ServiceMapInput is an input type that accepts ServiceMap and ServiceMapOutput values.
// You can construct a concrete instance of `ServiceMapInput` via:
//
//	ServiceMap{ "key": ServiceArgs{...} }
type ServiceMapInput interface {
	pulumi.Input

	ToServiceMapOutput() ServiceMapOutput
	ToServiceMapOutputWithContext(context.Context) ServiceMapOutput
}

type ServiceMap map[string]ServiceInput

func (ServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Service)(nil)).Elem()
}

func (i ServiceMap) ToServiceMapOutput() ServiceMapOutput {
	return i.ToServiceMapOutputWithContext(context.Background())
}

func (i ServiceMap) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMapOutput)
}

type ServiceOutput struct{ *pulumi.OutputState }

func (ServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (o ServiceOutput) ToServiceOutput() ServiceOutput {
	return o
}

func (o ServiceOutput) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return o
}

// Whether to enable AAD auth? Defaults to `true`.
func (o ServiceOutput) AadAuthEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.BoolPtrOutput { return v.AadAuthEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies if Connectivity Logs are enabled or not. Defaults to `false`.
func (o ServiceOutput) ConnectivityLogsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.BoolPtrOutput { return v.ConnectivityLogsEnabled }).(pulumi.BoolPtrOutput)
}

// A `cors` block as documented below.
func (o ServiceOutput) Cors() ServiceCorArrayOutput {
	return o.ApplyT(func(v *Service) ServiceCorArrayOutput { return v.Cors }).(ServiceCorArrayOutput)
}

// The FQDN of the SignalR service.
func (o ServiceOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

// Specifies if Http Request Logs are enabled or not. Defaults to `false`.
func (o ServiceOutput) HttpRequestLogsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.BoolPtrOutput { return v.HttpRequestLogsEnabled }).(pulumi.BoolPtrOutput)
}

// An `identity` block as defined below.
func (o ServiceOutput) Identity() ServiceIdentityPtrOutput {
	return o.ApplyT(func(v *Service) ServiceIdentityPtrOutput { return v.Identity }).(ServiceIdentityPtrOutput)
}

// The publicly accessible IP of the SignalR service.
func (o ServiceOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

// A `liveTrace` block as defined below.
func (o ServiceOutput) LiveTrace() ServiceLiveTracePtrOutput {
	return o.ApplyT(func(v *Service) ServiceLiveTracePtrOutput { return v.LiveTrace }).(ServiceLiveTracePtrOutput)
}

// Specifies if Live Trace is enabled or not. Defaults to `false`.
//
// Deprecated: `live_trace_enabled` has been deprecated in favor of `live_trace` and will be removed in 4.0.
func (o ServiceOutput) LiveTraceEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.BoolPtrOutput { return v.LiveTraceEnabled }).(pulumi.BoolPtrOutput)
}

// Whether to enable local auth? Defaults to `true`.
func (o ServiceOutput) LocalAuthEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.BoolPtrOutput { return v.LocalAuthEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the supported Azure location where the SignalR service exists. Changing this forces a new resource to be created.
func (o ServiceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies if Messaging Logs are enabled or not. Defaults to `false`.
func (o ServiceOutput) MessagingLogsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.BoolPtrOutput { return v.MessagingLogsEnabled }).(pulumi.BoolPtrOutput)
}

// The name of the SignalR service. Changing this forces a new resource to be created.
func (o ServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The primary access key for the SignalR service.
func (o ServiceOutput) PrimaryAccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.PrimaryAccessKey }).(pulumi.StringOutput)
}

// The primary connection string for the SignalR service.
func (o ServiceOutput) PrimaryConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.PrimaryConnectionString }).(pulumi.StringOutput)
}

// Whether to enable public network access? Defaults to `true`.
//
// > **Note:** `publicNetworkAccessEnabled` cannot be set to `false` in `Free` sku tier.
func (o ServiceOutput) PublicNetworkAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.BoolPtrOutput { return v.PublicNetworkAccessEnabled }).(pulumi.BoolPtrOutput)
}

// The publicly accessible port of the SignalR service which is designed for browser/client use.
func (o ServiceOutput) PublicPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Service) pulumi.IntOutput { return v.PublicPort }).(pulumi.IntOutput)
}

// The name of the resource group in which to create the SignalR service. Changing this forces a new resource to be created.
func (o ServiceOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The secondary access key for the SignalR service.
func (o ServiceOutput) SecondaryAccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.SecondaryAccessKey }).(pulumi.StringOutput)
}

// The secondary connection string for the SignalR service.
func (o ServiceOutput) SecondaryConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.SecondaryConnectionString }).(pulumi.StringOutput)
}

// The publicly accessible port of the SignalR service which is designed for customer server side use.
func (o ServiceOutput) ServerPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Service) pulumi.IntOutput { return v.ServerPort }).(pulumi.IntOutput)
}

// Specifies the client connection timeout. Defaults to `30`.
func (o ServiceOutput) ServerlessConnectionTimeoutInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.IntPtrOutput { return v.ServerlessConnectionTimeoutInSeconds }).(pulumi.IntPtrOutput)
}

// Specifies the service mode. Possible values are `Classic`, `Default` and `Serverless`. Defaults to `Default`.
func (o ServiceOutput) ServiceMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.ServiceMode }).(pulumi.StringPtrOutput)
}

// A `sku` block as documented below.
func (o ServiceOutput) Sku() ServiceSkuOutput {
	return o.ApplyT(func(v *Service) ServiceSkuOutput { return v.Sku }).(ServiceSkuOutput)
}

// A mapping of tags to assign to the resource.
func (o ServiceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Service) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Whether to request client certificate during TLS handshake? Defaults to `false`.
//
// > **Note:** `tlsClientCertEnabled` cannot be set to `true` in `Free` sku tier.
func (o ServiceOutput) TlsClientCertEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.BoolPtrOutput { return v.TlsClientCertEnabled }).(pulumi.BoolPtrOutput)
}

// An `upstreamEndpoint` block as documented below. Using this block requires the SignalR service to be Serverless. When creating multiple blocks they will be processed in the order they are defined in.
func (o ServiceOutput) UpstreamEndpoints() ServiceUpstreamEndpointArrayOutput {
	return o.ApplyT(func(v *Service) ServiceUpstreamEndpointArrayOutput { return v.UpstreamEndpoints }).(ServiceUpstreamEndpointArrayOutput)
}

type ServiceArrayOutput struct{ *pulumi.OutputState }

func (ServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Service)(nil)).Elem()
}

func (o ServiceArrayOutput) ToServiceArrayOutput() ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) Index(i pulumi.IntInput) ServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Service {
		return vs[0].([]*Service)[vs[1].(int)]
	}).(ServiceOutput)
}

type ServiceMapOutput struct{ *pulumi.OutputState }

func (ServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Service)(nil)).Elem()
}

func (o ServiceMapOutput) ToServiceMapOutput() ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) MapIndex(k pulumi.StringInput) ServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Service {
		return vs[0].(map[string]*Service)[vs[1].(string)]
	}).(ServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceInput)(nil)).Elem(), &Service{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceArrayInput)(nil)).Elem(), ServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceMapInput)(nil)).Elem(), ServiceMap{})
	pulumi.RegisterOutputType(ServiceOutput{})
	pulumi.RegisterOutputType(ServiceArrayOutput{})
	pulumi.RegisterOutputType(ServiceMapOutput{})
}
