// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package signalr

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Azure SignalR Custom Domain.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/keyvault"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/signalr"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := core.GetClientConfig(ctx, map[string]interface{}{}, nil)
//			if err != nil {
//				return err
//			}
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resources"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleService, err := signalr.NewService(ctx, "example", &signalr.ServiceArgs{
//				Name:              pulumi.String("example-signalr"),
//				Location:          pulumi.Any(testAzurermResourceGroup.Location),
//				ResourceGroupName: pulumi.Any(testAzurermResourceGroup.Name),
//				Sku: &signalr.ServiceSkuArgs{
//					Name:     pulumi.String("Premium_P1"),
//					Capacity: pulumi.Int(1),
//				},
//				Identity: &signalr.ServiceIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleKeyVault, err := keyvault.NewKeyVault(ctx, "example", &keyvault.KeyVaultArgs{
//				Name:              pulumi.String("example-keyvault"),
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//				TenantId:          pulumi.String(current.TenantId),
//				SkuName:           pulumi.String("premium"),
//				AccessPolicies: keyvault.KeyVaultAccessPolicyArray{
//					&keyvault.KeyVaultAccessPolicyArgs{
//						TenantId: pulumi.String(current.TenantId),
//						ObjectId: pulumi.String(current.ObjectId),
//						CertificatePermissions: pulumi.StringArray{
//							pulumi.String("Create"),
//							pulumi.String("Get"),
//							pulumi.String("List"),
//						},
//						SecretPermissions: pulumi.StringArray{
//							pulumi.String("Get"),
//							pulumi.String("List"),
//						},
//					},
//					&keyvault.KeyVaultAccessPolicyArgs{
//						TenantId: pulumi.String(current.TenantId),
//						ObjectId: pulumi.Any(testAzurermSignalrService.Identity[0].PrincipalId),
//						CertificatePermissions: pulumi.StringArray{
//							pulumi.String("Create"),
//							pulumi.String("Get"),
//							pulumi.String("List"),
//						},
//						SecretPermissions: pulumi.StringArray{
//							pulumi.String("Get"),
//							pulumi.String("List"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			invokeFilebase64, err := std.Filebase64(ctx, &std.Filebase64Args{
//				Input: "certificate-to-import.pfx",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleCertificate, err := keyvault.NewCertificate(ctx, "example", &keyvault.CertificateArgs{
//				Name:       pulumi.String("imported-cert"),
//				KeyVaultId: exampleKeyVault.ID(),
//				Certificate: &keyvault.CertificateCertificateArgs{
//					Contents: pulumi.String(invokeFilebase64.Result),
//					Password: pulumi.String(""),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			test, err := signalr.NewServiceCustomCertificate(ctx, "test", &signalr.ServiceCustomCertificateArgs{
//				Name:                pulumi.String("example-cert"),
//				SignalrServiceId:    exampleService.ID(),
//				CustomCertificateId: exampleCertificate.ID(),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				exampleAzurermKeyVaultAccessPolicy,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = signalr.NewServiceCustomDomain(ctx, "test", &signalr.ServiceCustomDomainArgs{
//				Name:                       pulumi.String("example-domain"),
//				SignalrServiceId:           pulumi.Any(testAzurermSignalrService.Id),
//				DomainName:                 pulumi.String("tftest.com"),
//				SignalrCustomCertificateId: test.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This resource uses the following Azure API Providers:
//
// * `Microsoft.SignalRService` - 2024-03-01
//
// ## Import
//
// Custom Domain for a SignalR service can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:signalr/serviceCustomDomain:ServiceCustomDomain example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.SignalRService/signalR/signalr1/customDomains/customDomain1
// ```
type ServiceCustomDomain struct {
	pulumi.CustomResourceState

	// Specifies the custom domain name of the SignalR Custom Domain. Changing this forces a new resource to be created.
	//
	// > **Note:** Please ensure the custom domain name is included in the Subject Alternative Names of the selected SignalR Custom Certificate.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// Specifies the name of the SignalR Custom Domain. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the SignalR Custom Certificate ID of the SignalR Custom Domain. Changing this forces a new resource to be created.
	SignalrCustomCertificateId pulumi.StringOutput `pulumi:"signalrCustomCertificateId"`
	// Specifies the SignalR ID of the SignalR Custom Domain. Changing this forces a new resource to be created.
	SignalrServiceId pulumi.StringOutput `pulumi:"signalrServiceId"`
}

// NewServiceCustomDomain registers a new resource with the given unique name, arguments, and options.
func NewServiceCustomDomain(ctx *pulumi.Context,
	name string, args *ServiceCustomDomainArgs, opts ...pulumi.ResourceOption) (*ServiceCustomDomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	if args.SignalrCustomCertificateId == nil {
		return nil, errors.New("invalid value for required argument 'SignalrCustomCertificateId'")
	}
	if args.SignalrServiceId == nil {
		return nil, errors.New("invalid value for required argument 'SignalrServiceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceCustomDomain
	err := ctx.RegisterResource("azure:signalr/serviceCustomDomain:ServiceCustomDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceCustomDomain gets an existing ServiceCustomDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceCustomDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceCustomDomainState, opts ...pulumi.ResourceOption) (*ServiceCustomDomain, error) {
	var resource ServiceCustomDomain
	err := ctx.ReadResource("azure:signalr/serviceCustomDomain:ServiceCustomDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceCustomDomain resources.
type serviceCustomDomainState struct {
	// Specifies the custom domain name of the SignalR Custom Domain. Changing this forces a new resource to be created.
	//
	// > **Note:** Please ensure the custom domain name is included in the Subject Alternative Names of the selected SignalR Custom Certificate.
	DomainName *string `pulumi:"domainName"`
	// Specifies the name of the SignalR Custom Domain. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies the SignalR Custom Certificate ID of the SignalR Custom Domain. Changing this forces a new resource to be created.
	SignalrCustomCertificateId *string `pulumi:"signalrCustomCertificateId"`
	// Specifies the SignalR ID of the SignalR Custom Domain. Changing this forces a new resource to be created.
	SignalrServiceId *string `pulumi:"signalrServiceId"`
}

type ServiceCustomDomainState struct {
	// Specifies the custom domain name of the SignalR Custom Domain. Changing this forces a new resource to be created.
	//
	// > **Note:** Please ensure the custom domain name is included in the Subject Alternative Names of the selected SignalR Custom Certificate.
	DomainName pulumi.StringPtrInput
	// Specifies the name of the SignalR Custom Domain. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies the SignalR Custom Certificate ID of the SignalR Custom Domain. Changing this forces a new resource to be created.
	SignalrCustomCertificateId pulumi.StringPtrInput
	// Specifies the SignalR ID of the SignalR Custom Domain. Changing this forces a new resource to be created.
	SignalrServiceId pulumi.StringPtrInput
}

func (ServiceCustomDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceCustomDomainState)(nil)).Elem()
}

type serviceCustomDomainArgs struct {
	// Specifies the custom domain name of the SignalR Custom Domain. Changing this forces a new resource to be created.
	//
	// > **Note:** Please ensure the custom domain name is included in the Subject Alternative Names of the selected SignalR Custom Certificate.
	DomainName string `pulumi:"domainName"`
	// Specifies the name of the SignalR Custom Domain. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies the SignalR Custom Certificate ID of the SignalR Custom Domain. Changing this forces a new resource to be created.
	SignalrCustomCertificateId string `pulumi:"signalrCustomCertificateId"`
	// Specifies the SignalR ID of the SignalR Custom Domain. Changing this forces a new resource to be created.
	SignalrServiceId string `pulumi:"signalrServiceId"`
}

// The set of arguments for constructing a ServiceCustomDomain resource.
type ServiceCustomDomainArgs struct {
	// Specifies the custom domain name of the SignalR Custom Domain. Changing this forces a new resource to be created.
	//
	// > **Note:** Please ensure the custom domain name is included in the Subject Alternative Names of the selected SignalR Custom Certificate.
	DomainName pulumi.StringInput
	// Specifies the name of the SignalR Custom Domain. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies the SignalR Custom Certificate ID of the SignalR Custom Domain. Changing this forces a new resource to be created.
	SignalrCustomCertificateId pulumi.StringInput
	// Specifies the SignalR ID of the SignalR Custom Domain. Changing this forces a new resource to be created.
	SignalrServiceId pulumi.StringInput
}

func (ServiceCustomDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceCustomDomainArgs)(nil)).Elem()
}

type ServiceCustomDomainInput interface {
	pulumi.Input

	ToServiceCustomDomainOutput() ServiceCustomDomainOutput
	ToServiceCustomDomainOutputWithContext(ctx context.Context) ServiceCustomDomainOutput
}

func (*ServiceCustomDomain) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceCustomDomain)(nil)).Elem()
}

func (i *ServiceCustomDomain) ToServiceCustomDomainOutput() ServiceCustomDomainOutput {
	return i.ToServiceCustomDomainOutputWithContext(context.Background())
}

func (i *ServiceCustomDomain) ToServiceCustomDomainOutputWithContext(ctx context.Context) ServiceCustomDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCustomDomainOutput)
}

// ServiceCustomDomainArrayInput is an input type that accepts ServiceCustomDomainArray and ServiceCustomDomainArrayOutput values.
// You can construct a concrete instance of `ServiceCustomDomainArrayInput` via:
//
//	ServiceCustomDomainArray{ ServiceCustomDomainArgs{...} }
type ServiceCustomDomainArrayInput interface {
	pulumi.Input

	ToServiceCustomDomainArrayOutput() ServiceCustomDomainArrayOutput
	ToServiceCustomDomainArrayOutputWithContext(context.Context) ServiceCustomDomainArrayOutput
}

type ServiceCustomDomainArray []ServiceCustomDomainInput

func (ServiceCustomDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceCustomDomain)(nil)).Elem()
}

func (i ServiceCustomDomainArray) ToServiceCustomDomainArrayOutput() ServiceCustomDomainArrayOutput {
	return i.ToServiceCustomDomainArrayOutputWithContext(context.Background())
}

func (i ServiceCustomDomainArray) ToServiceCustomDomainArrayOutputWithContext(ctx context.Context) ServiceCustomDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCustomDomainArrayOutput)
}

// ServiceCustomDomainMapInput is an input type that accepts ServiceCustomDomainMap and ServiceCustomDomainMapOutput values.
// You can construct a concrete instance of `ServiceCustomDomainMapInput` via:
//
//	ServiceCustomDomainMap{ "key": ServiceCustomDomainArgs{...} }
type ServiceCustomDomainMapInput interface {
	pulumi.Input

	ToServiceCustomDomainMapOutput() ServiceCustomDomainMapOutput
	ToServiceCustomDomainMapOutputWithContext(context.Context) ServiceCustomDomainMapOutput
}

type ServiceCustomDomainMap map[string]ServiceCustomDomainInput

func (ServiceCustomDomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceCustomDomain)(nil)).Elem()
}

func (i ServiceCustomDomainMap) ToServiceCustomDomainMapOutput() ServiceCustomDomainMapOutput {
	return i.ToServiceCustomDomainMapOutputWithContext(context.Background())
}

func (i ServiceCustomDomainMap) ToServiceCustomDomainMapOutputWithContext(ctx context.Context) ServiceCustomDomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCustomDomainMapOutput)
}

type ServiceCustomDomainOutput struct{ *pulumi.OutputState }

func (ServiceCustomDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceCustomDomain)(nil)).Elem()
}

func (o ServiceCustomDomainOutput) ToServiceCustomDomainOutput() ServiceCustomDomainOutput {
	return o
}

func (o ServiceCustomDomainOutput) ToServiceCustomDomainOutputWithContext(ctx context.Context) ServiceCustomDomainOutput {
	return o
}

// Specifies the custom domain name of the SignalR Custom Domain. Changing this forces a new resource to be created.
//
// > **Note:** Please ensure the custom domain name is included in the Subject Alternative Names of the selected SignalR Custom Certificate.
func (o ServiceCustomDomainOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceCustomDomain) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// Specifies the name of the SignalR Custom Domain. Changing this forces a new resource to be created.
func (o ServiceCustomDomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceCustomDomain) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the SignalR Custom Certificate ID of the SignalR Custom Domain. Changing this forces a new resource to be created.
func (o ServiceCustomDomainOutput) SignalrCustomCertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceCustomDomain) pulumi.StringOutput { return v.SignalrCustomCertificateId }).(pulumi.StringOutput)
}

// Specifies the SignalR ID of the SignalR Custom Domain. Changing this forces a new resource to be created.
func (o ServiceCustomDomainOutput) SignalrServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceCustomDomain) pulumi.StringOutput { return v.SignalrServiceId }).(pulumi.StringOutput)
}

type ServiceCustomDomainArrayOutput struct{ *pulumi.OutputState }

func (ServiceCustomDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceCustomDomain)(nil)).Elem()
}

func (o ServiceCustomDomainArrayOutput) ToServiceCustomDomainArrayOutput() ServiceCustomDomainArrayOutput {
	return o
}

func (o ServiceCustomDomainArrayOutput) ToServiceCustomDomainArrayOutputWithContext(ctx context.Context) ServiceCustomDomainArrayOutput {
	return o
}

func (o ServiceCustomDomainArrayOutput) Index(i pulumi.IntInput) ServiceCustomDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceCustomDomain {
		return vs[0].([]*ServiceCustomDomain)[vs[1].(int)]
	}).(ServiceCustomDomainOutput)
}

type ServiceCustomDomainMapOutput struct{ *pulumi.OutputState }

func (ServiceCustomDomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceCustomDomain)(nil)).Elem()
}

func (o ServiceCustomDomainMapOutput) ToServiceCustomDomainMapOutput() ServiceCustomDomainMapOutput {
	return o
}

func (o ServiceCustomDomainMapOutput) ToServiceCustomDomainMapOutputWithContext(ctx context.Context) ServiceCustomDomainMapOutput {
	return o
}

func (o ServiceCustomDomainMapOutput) MapIndex(k pulumi.StringInput) ServiceCustomDomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceCustomDomain {
		return vs[0].(map[string]*ServiceCustomDomain)[vs[1].(string)]
	}).(ServiceCustomDomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceCustomDomainInput)(nil)).Elem(), &ServiceCustomDomain{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceCustomDomainArrayInput)(nil)).Elem(), ServiceCustomDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceCustomDomainMapInput)(nil)).Elem(), ServiceCustomDomainMap{})
	pulumi.RegisterOutputType(ServiceCustomDomainOutput{})
	pulumi.RegisterOutputType(ServiceCustomDomainArrayOutput{})
	pulumi.RegisterOutputType(ServiceCustomDomainMapOutput{})
}
