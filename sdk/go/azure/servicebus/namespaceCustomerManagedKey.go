// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicebus

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Service Bus Namespace Customer Managed Key.
//
// !> **Note:** It is not possible to remove the Customer Managed Key from the Service Bus Namespace once it's been added. To remove the Customer Managed Key, the parent Service Bus Namespace must be deleted and recreated.
//
// > **Note:** This resource should only be used to create a Customer Managed Key for Service Bus Namespaces with System Assigned identities. The `customerManagedKey` block in `servicebus.Namespace` should be used to create a Customer Managed Key for a Service Bus Namespace with a User Assigned identity.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/keyvault"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/servicebus"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resource-group"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleNamespace, err := servicebus.NewNamespace(ctx, "example", &servicebus.NamespaceArgs{
//				Name:                       pulumi.String("example-servicebus-namespace"),
//				Location:                   example.Location,
//				ResourceGroupName:          example.Name,
//				Sku:                        pulumi.String("Premium"),
//				PremiumMessagingPartitions: pulumi.Int(1),
//				Capacity:                   pulumi.Int(1),
//				Identity: &servicebus.NamespaceIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			current, err := core.GetClientConfig(ctx, map[string]interface{}{}, nil)
//			if err != nil {
//				return err
//			}
//			exampleKeyVault, err := keyvault.NewKeyVault(ctx, "example", &keyvault.KeyVaultArgs{
//				Name:                     pulumi.String("example-key-vault"),
//				Location:                 example.Location,
//				ResourceGroupName:        example.Name,
//				EnabledForDiskEncryption: pulumi.Bool(true),
//				TenantId:                 pulumi.String(current.TenantId),
//				SoftDeleteRetentionDays:  pulumi.Int(7),
//				PurgeProtectionEnabled:   pulumi.Bool(true),
//				SkuName:                  pulumi.String("standard"),
//				AccessPolicies: keyvault.KeyVaultAccessPolicyArray{
//					&keyvault.KeyVaultAccessPolicyArgs{
//						TenantId: pulumi.String(current.TenantId),
//						ObjectId: pulumi.String(current.ObjectId),
//						KeyPermissions: pulumi.StringArray{
//							pulumi.String("Create"),
//							pulumi.String("Decrypt"),
//							pulumi.String("Encrypt"),
//							pulumi.String("Delete"),
//							pulumi.String("Get"),
//							pulumi.String("List"),
//							pulumi.String("Purge"),
//							pulumi.String("UnwrapKey"),
//							pulumi.String("WrapKey"),
//							pulumi.String("Verify"),
//							pulumi.String("GetRotationPolicy"),
//						},
//						SecretPermissions: pulumi.StringArray{
//							pulumi.String("Set"),
//						},
//					},
//					&keyvault.KeyVaultAccessPolicyArgs{
//						TenantId: exampleNamespace.Identity.ApplyT(func(identity servicebus.NamespaceIdentity) (*string, error) {
//							return &identity.TenantId, nil
//						}).(pulumi.StringPtrOutput),
//						ObjectId: exampleNamespace.Identity.ApplyT(func(identity servicebus.NamespaceIdentity) (*string, error) {
//							return &identity.PrincipalId, nil
//						}).(pulumi.StringPtrOutput),
//						KeyPermissions: pulumi.StringArray{
//							pulumi.String("Create"),
//							pulumi.String("Decrypt"),
//							pulumi.String("Encrypt"),
//							pulumi.String("Delete"),
//							pulumi.String("Get"),
//							pulumi.String("List"),
//							pulumi.String("Purge"),
//							pulumi.String("UnwrapKey"),
//							pulumi.String("WrapKey"),
//							pulumi.String("Verify"),
//							pulumi.String("GetRotationPolicy"),
//						},
//						SecretPermissions: pulumi.StringArray{
//							pulumi.String("Set"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleKey, err := keyvault.NewKey(ctx, "example", &keyvault.KeyArgs{
//				Name:       pulumi.String("example-key-vault-key"),
//				KeyVaultId: exampleKeyVault.ID(),
//				KeyType:    pulumi.String("RSA"),
//				KeySize:    pulumi.Int(2048),
//				KeyOpts: pulumi.StringArray{
//					pulumi.String("decrypt"),
//					pulumi.String("encrypt"),
//					pulumi.String("sign"),
//					pulumi.String("unwrapKey"),
//					pulumi.String("verify"),
//					pulumi.String("wrapKey"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = servicebus.NewNamespaceCustomerManagedKey(ctx, "example", &servicebus.NamespaceCustomerManagedKeyArgs{
//				NamespaceId:   exampleNamespace.ID(),
//				KeyVaultKeyId: exampleKey.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This resource uses the following Azure API Providers:
//
// * `Microsoft.ServiceBus`: 2022-10-01-preview
//
// ## Import
//
// Service Bus Namespace Customer Managed Key can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:servicebus/namespaceCustomerManagedKey:NamespaceCustomerManagedKey example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ServiceBus/namespaces/sbns1
// ```
type NamespaceCustomerManagedKey struct {
	pulumi.CustomResourceState

	// Used to specify whether enable Infrastructure Encryption. Changing this forces a new resource to be created.
	InfrastructureEncryptionEnabled pulumi.BoolPtrOutput `pulumi:"infrastructureEncryptionEnabled"`
	// The ID of the Key Vault Key which should be used to Encrypt the data in this Service Bus Namespace.
	KeyVaultKeyId pulumi.StringOutput `pulumi:"keyVaultKeyId"`
	// The ID of the Service Bus namespace. Changing this forces a new resource to be created.
	NamespaceId pulumi.StringOutput `pulumi:"namespaceId"`
}

// NewNamespaceCustomerManagedKey registers a new resource with the given unique name, arguments, and options.
func NewNamespaceCustomerManagedKey(ctx *pulumi.Context,
	name string, args *NamespaceCustomerManagedKeyArgs, opts ...pulumi.ResourceOption) (*NamespaceCustomerManagedKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KeyVaultKeyId == nil {
		return nil, errors.New("invalid value for required argument 'KeyVaultKeyId'")
	}
	if args.NamespaceId == nil {
		return nil, errors.New("invalid value for required argument 'NamespaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NamespaceCustomerManagedKey
	err := ctx.RegisterResource("azure:servicebus/namespaceCustomerManagedKey:NamespaceCustomerManagedKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNamespaceCustomerManagedKey gets an existing NamespaceCustomerManagedKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamespaceCustomerManagedKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NamespaceCustomerManagedKeyState, opts ...pulumi.ResourceOption) (*NamespaceCustomerManagedKey, error) {
	var resource NamespaceCustomerManagedKey
	err := ctx.ReadResource("azure:servicebus/namespaceCustomerManagedKey:NamespaceCustomerManagedKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NamespaceCustomerManagedKey resources.
type namespaceCustomerManagedKeyState struct {
	// Used to specify whether enable Infrastructure Encryption. Changing this forces a new resource to be created.
	InfrastructureEncryptionEnabled *bool `pulumi:"infrastructureEncryptionEnabled"`
	// The ID of the Key Vault Key which should be used to Encrypt the data in this Service Bus Namespace.
	KeyVaultKeyId *string `pulumi:"keyVaultKeyId"`
	// The ID of the Service Bus namespace. Changing this forces a new resource to be created.
	NamespaceId *string `pulumi:"namespaceId"`
}

type NamespaceCustomerManagedKeyState struct {
	// Used to specify whether enable Infrastructure Encryption. Changing this forces a new resource to be created.
	InfrastructureEncryptionEnabled pulumi.BoolPtrInput
	// The ID of the Key Vault Key which should be used to Encrypt the data in this Service Bus Namespace.
	KeyVaultKeyId pulumi.StringPtrInput
	// The ID of the Service Bus namespace. Changing this forces a new resource to be created.
	NamespaceId pulumi.StringPtrInput
}

func (NamespaceCustomerManagedKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceCustomerManagedKeyState)(nil)).Elem()
}

type namespaceCustomerManagedKeyArgs struct {
	// Used to specify whether enable Infrastructure Encryption. Changing this forces a new resource to be created.
	InfrastructureEncryptionEnabled *bool `pulumi:"infrastructureEncryptionEnabled"`
	// The ID of the Key Vault Key which should be used to Encrypt the data in this Service Bus Namespace.
	KeyVaultKeyId string `pulumi:"keyVaultKeyId"`
	// The ID of the Service Bus namespace. Changing this forces a new resource to be created.
	NamespaceId string `pulumi:"namespaceId"`
}

// The set of arguments for constructing a NamespaceCustomerManagedKey resource.
type NamespaceCustomerManagedKeyArgs struct {
	// Used to specify whether enable Infrastructure Encryption. Changing this forces a new resource to be created.
	InfrastructureEncryptionEnabled pulumi.BoolPtrInput
	// The ID of the Key Vault Key which should be used to Encrypt the data in this Service Bus Namespace.
	KeyVaultKeyId pulumi.StringInput
	// The ID of the Service Bus namespace. Changing this forces a new resource to be created.
	NamespaceId pulumi.StringInput
}

func (NamespaceCustomerManagedKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceCustomerManagedKeyArgs)(nil)).Elem()
}

type NamespaceCustomerManagedKeyInput interface {
	pulumi.Input

	ToNamespaceCustomerManagedKeyOutput() NamespaceCustomerManagedKeyOutput
	ToNamespaceCustomerManagedKeyOutputWithContext(ctx context.Context) NamespaceCustomerManagedKeyOutput
}

func (*NamespaceCustomerManagedKey) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceCustomerManagedKey)(nil)).Elem()
}

func (i *NamespaceCustomerManagedKey) ToNamespaceCustomerManagedKeyOutput() NamespaceCustomerManagedKeyOutput {
	return i.ToNamespaceCustomerManagedKeyOutputWithContext(context.Background())
}

func (i *NamespaceCustomerManagedKey) ToNamespaceCustomerManagedKeyOutputWithContext(ctx context.Context) NamespaceCustomerManagedKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceCustomerManagedKeyOutput)
}

// NamespaceCustomerManagedKeyArrayInput is an input type that accepts NamespaceCustomerManagedKeyArray and NamespaceCustomerManagedKeyArrayOutput values.
// You can construct a concrete instance of `NamespaceCustomerManagedKeyArrayInput` via:
//
//	NamespaceCustomerManagedKeyArray{ NamespaceCustomerManagedKeyArgs{...} }
type NamespaceCustomerManagedKeyArrayInput interface {
	pulumi.Input

	ToNamespaceCustomerManagedKeyArrayOutput() NamespaceCustomerManagedKeyArrayOutput
	ToNamespaceCustomerManagedKeyArrayOutputWithContext(context.Context) NamespaceCustomerManagedKeyArrayOutput
}

type NamespaceCustomerManagedKeyArray []NamespaceCustomerManagedKeyInput

func (NamespaceCustomerManagedKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NamespaceCustomerManagedKey)(nil)).Elem()
}

func (i NamespaceCustomerManagedKeyArray) ToNamespaceCustomerManagedKeyArrayOutput() NamespaceCustomerManagedKeyArrayOutput {
	return i.ToNamespaceCustomerManagedKeyArrayOutputWithContext(context.Background())
}

func (i NamespaceCustomerManagedKeyArray) ToNamespaceCustomerManagedKeyArrayOutputWithContext(ctx context.Context) NamespaceCustomerManagedKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceCustomerManagedKeyArrayOutput)
}

// NamespaceCustomerManagedKeyMapInput is an input type that accepts NamespaceCustomerManagedKeyMap and NamespaceCustomerManagedKeyMapOutput values.
// You can construct a concrete instance of `NamespaceCustomerManagedKeyMapInput` via:
//
//	NamespaceCustomerManagedKeyMap{ "key": NamespaceCustomerManagedKeyArgs{...} }
type NamespaceCustomerManagedKeyMapInput interface {
	pulumi.Input

	ToNamespaceCustomerManagedKeyMapOutput() NamespaceCustomerManagedKeyMapOutput
	ToNamespaceCustomerManagedKeyMapOutputWithContext(context.Context) NamespaceCustomerManagedKeyMapOutput
}

type NamespaceCustomerManagedKeyMap map[string]NamespaceCustomerManagedKeyInput

func (NamespaceCustomerManagedKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NamespaceCustomerManagedKey)(nil)).Elem()
}

func (i NamespaceCustomerManagedKeyMap) ToNamespaceCustomerManagedKeyMapOutput() NamespaceCustomerManagedKeyMapOutput {
	return i.ToNamespaceCustomerManagedKeyMapOutputWithContext(context.Background())
}

func (i NamespaceCustomerManagedKeyMap) ToNamespaceCustomerManagedKeyMapOutputWithContext(ctx context.Context) NamespaceCustomerManagedKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceCustomerManagedKeyMapOutput)
}

type NamespaceCustomerManagedKeyOutput struct{ *pulumi.OutputState }

func (NamespaceCustomerManagedKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceCustomerManagedKey)(nil)).Elem()
}

func (o NamespaceCustomerManagedKeyOutput) ToNamespaceCustomerManagedKeyOutput() NamespaceCustomerManagedKeyOutput {
	return o
}

func (o NamespaceCustomerManagedKeyOutput) ToNamespaceCustomerManagedKeyOutputWithContext(ctx context.Context) NamespaceCustomerManagedKeyOutput {
	return o
}

// Used to specify whether enable Infrastructure Encryption. Changing this forces a new resource to be created.
func (o NamespaceCustomerManagedKeyOutput) InfrastructureEncryptionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NamespaceCustomerManagedKey) pulumi.BoolPtrOutput { return v.InfrastructureEncryptionEnabled }).(pulumi.BoolPtrOutput)
}

// The ID of the Key Vault Key which should be used to Encrypt the data in this Service Bus Namespace.
func (o NamespaceCustomerManagedKeyOutput) KeyVaultKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceCustomerManagedKey) pulumi.StringOutput { return v.KeyVaultKeyId }).(pulumi.StringOutput)
}

// The ID of the Service Bus namespace. Changing this forces a new resource to be created.
func (o NamespaceCustomerManagedKeyOutput) NamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceCustomerManagedKey) pulumi.StringOutput { return v.NamespaceId }).(pulumi.StringOutput)
}

type NamespaceCustomerManagedKeyArrayOutput struct{ *pulumi.OutputState }

func (NamespaceCustomerManagedKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NamespaceCustomerManagedKey)(nil)).Elem()
}

func (o NamespaceCustomerManagedKeyArrayOutput) ToNamespaceCustomerManagedKeyArrayOutput() NamespaceCustomerManagedKeyArrayOutput {
	return o
}

func (o NamespaceCustomerManagedKeyArrayOutput) ToNamespaceCustomerManagedKeyArrayOutputWithContext(ctx context.Context) NamespaceCustomerManagedKeyArrayOutput {
	return o
}

func (o NamespaceCustomerManagedKeyArrayOutput) Index(i pulumi.IntInput) NamespaceCustomerManagedKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NamespaceCustomerManagedKey {
		return vs[0].([]*NamespaceCustomerManagedKey)[vs[1].(int)]
	}).(NamespaceCustomerManagedKeyOutput)
}

type NamespaceCustomerManagedKeyMapOutput struct{ *pulumi.OutputState }

func (NamespaceCustomerManagedKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NamespaceCustomerManagedKey)(nil)).Elem()
}

func (o NamespaceCustomerManagedKeyMapOutput) ToNamespaceCustomerManagedKeyMapOutput() NamespaceCustomerManagedKeyMapOutput {
	return o
}

func (o NamespaceCustomerManagedKeyMapOutput) ToNamespaceCustomerManagedKeyMapOutputWithContext(ctx context.Context) NamespaceCustomerManagedKeyMapOutput {
	return o
}

func (o NamespaceCustomerManagedKeyMapOutput) MapIndex(k pulumi.StringInput) NamespaceCustomerManagedKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NamespaceCustomerManagedKey {
		return vs[0].(map[string]*NamespaceCustomerManagedKey)[vs[1].(string)]
	}).(NamespaceCustomerManagedKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceCustomerManagedKeyInput)(nil)).Elem(), &NamespaceCustomerManagedKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceCustomerManagedKeyArrayInput)(nil)).Elem(), NamespaceCustomerManagedKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceCustomerManagedKeyMapInput)(nil)).Elem(), NamespaceCustomerManagedKeyMap{})
	pulumi.RegisterOutputType(NamespaceCustomerManagedKeyOutput{})
	pulumi.RegisterOutputType(NamespaceCustomerManagedKeyArrayOutput{})
	pulumi.RegisterOutputType(NamespaceCustomerManagedKeyMapOutput{})
}
