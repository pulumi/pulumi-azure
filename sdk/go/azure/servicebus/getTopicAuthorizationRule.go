// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicebus

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about a ServiceBus Topic Authorization Rule within a ServiceBus Topic.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/servicebus"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := servicebus.LookupTopicAuthorizationRule(ctx, &servicebus.LookupTopicAuthorizationRuleArgs{
//				Name:              "example-tfex_name",
//				ResourceGroupName: pulumi.StringRef("example-resources"),
//				NamespaceName:     pulumi.StringRef("example-namespace"),
//				TopicName:         pulumi.StringRef("example-servicebus_topic"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("servicebusAuthorizationRuleId", data.Azurem_servicebus_topic_authorization_rule.Example.Id)
//			return nil
//		})
//	}
//
// ```
func LookupTopicAuthorizationRule(ctx *pulumi.Context, args *LookupTopicAuthorizationRuleArgs, opts ...pulumi.InvokeOption) (*LookupTopicAuthorizationRuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTopicAuthorizationRuleResult
	err := ctx.Invoke("azure:servicebus/getTopicAuthorizationRule:getTopicAuthorizationRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTopicAuthorizationRule.
type LookupTopicAuthorizationRuleArgs struct {
	// The name of the ServiceBus Topic Authorization Rule resource.
	Name string `pulumi:"name"`
	// The name of the ServiceBus Namespace.
	NamespaceName *string `pulumi:"namespaceName"`
	QueueName     *string `pulumi:"queueName"`
	// The name of the resource group in which the ServiceBus Namespace exists.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	TopicId           *string `pulumi:"topicId"`
	// The name of the ServiceBus Topic.
	TopicName *string `pulumi:"topicName"`
}

// A collection of values returned by getTopicAuthorizationRule.
type LookupTopicAuthorizationRuleResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id            string  `pulumi:"id"`
	Listen        bool    `pulumi:"listen"`
	Manage        bool    `pulumi:"manage"`
	Name          string  `pulumi:"name"`
	NamespaceName *string `pulumi:"namespaceName"`
	// The Primary Connection String for the ServiceBus Topic authorization Rule.
	PrimaryConnectionString string `pulumi:"primaryConnectionString"`
	// The alias Primary Connection String for the ServiceBus Namespace, if the namespace is Geo DR paired.
	PrimaryConnectionStringAlias string `pulumi:"primaryConnectionStringAlias"`
	// The Primary Key for the ServiceBus Topic authorization Rule.
	PrimaryKey        string  `pulumi:"primaryKey"`
	QueueName         *string `pulumi:"queueName"`
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The Secondary Connection String for the ServiceBus Topic authorization Rule.
	SecondaryConnectionString string `pulumi:"secondaryConnectionString"`
	// The alias Secondary Connection String for the ServiceBus Namespace
	SecondaryConnectionStringAlias string `pulumi:"secondaryConnectionStringAlias"`
	// The Secondary Key for the ServiceBus Topic authorization Rule.
	SecondaryKey string  `pulumi:"secondaryKey"`
	Send         bool    `pulumi:"send"`
	TopicId      *string `pulumi:"topicId"`
	TopicName    *string `pulumi:"topicName"`
}

func LookupTopicAuthorizationRuleOutput(ctx *pulumi.Context, args LookupTopicAuthorizationRuleOutputArgs, opts ...pulumi.InvokeOption) LookupTopicAuthorizationRuleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTopicAuthorizationRuleResult, error) {
			args := v.(LookupTopicAuthorizationRuleArgs)
			r, err := LookupTopicAuthorizationRule(ctx, &args, opts...)
			var s LookupTopicAuthorizationRuleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupTopicAuthorizationRuleResultOutput)
}

// A collection of arguments for invoking getTopicAuthorizationRule.
type LookupTopicAuthorizationRuleOutputArgs struct {
	// The name of the ServiceBus Topic Authorization Rule resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the ServiceBus Namespace.
	NamespaceName pulumi.StringPtrInput `pulumi:"namespaceName"`
	QueueName     pulumi.StringPtrInput `pulumi:"queueName"`
	// The name of the resource group in which the ServiceBus Namespace exists.
	ResourceGroupName pulumi.StringPtrInput `pulumi:"resourceGroupName"`
	TopicId           pulumi.StringPtrInput `pulumi:"topicId"`
	// The name of the ServiceBus Topic.
	TopicName pulumi.StringPtrInput `pulumi:"topicName"`
}

func (LookupTopicAuthorizationRuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTopicAuthorizationRuleArgs)(nil)).Elem()
}

// A collection of values returned by getTopicAuthorizationRule.
type LookupTopicAuthorizationRuleResultOutput struct{ *pulumi.OutputState }

func (LookupTopicAuthorizationRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTopicAuthorizationRuleResult)(nil)).Elem()
}

func (o LookupTopicAuthorizationRuleResultOutput) ToLookupTopicAuthorizationRuleResultOutput() LookupTopicAuthorizationRuleResultOutput {
	return o
}

func (o LookupTopicAuthorizationRuleResultOutput) ToLookupTopicAuthorizationRuleResultOutputWithContext(ctx context.Context) LookupTopicAuthorizationRuleResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupTopicAuthorizationRuleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTopicAuthorizationRuleResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupTopicAuthorizationRuleResultOutput) Listen() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTopicAuthorizationRuleResult) bool { return v.Listen }).(pulumi.BoolOutput)
}

func (o LookupTopicAuthorizationRuleResultOutput) Manage() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTopicAuthorizationRuleResult) bool { return v.Manage }).(pulumi.BoolOutput)
}

func (o LookupTopicAuthorizationRuleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTopicAuthorizationRuleResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupTopicAuthorizationRuleResultOutput) NamespaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTopicAuthorizationRuleResult) *string { return v.NamespaceName }).(pulumi.StringPtrOutput)
}

// The Primary Connection String for the ServiceBus Topic authorization Rule.
func (o LookupTopicAuthorizationRuleResultOutput) PrimaryConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTopicAuthorizationRuleResult) string { return v.PrimaryConnectionString }).(pulumi.StringOutput)
}

// The alias Primary Connection String for the ServiceBus Namespace, if the namespace is Geo DR paired.
func (o LookupTopicAuthorizationRuleResultOutput) PrimaryConnectionStringAlias() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTopicAuthorizationRuleResult) string { return v.PrimaryConnectionStringAlias }).(pulumi.StringOutput)
}

// The Primary Key for the ServiceBus Topic authorization Rule.
func (o LookupTopicAuthorizationRuleResultOutput) PrimaryKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTopicAuthorizationRuleResult) string { return v.PrimaryKey }).(pulumi.StringOutput)
}

func (o LookupTopicAuthorizationRuleResultOutput) QueueName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTopicAuthorizationRuleResult) *string { return v.QueueName }).(pulumi.StringPtrOutput)
}

func (o LookupTopicAuthorizationRuleResultOutput) ResourceGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTopicAuthorizationRuleResult) *string { return v.ResourceGroupName }).(pulumi.StringPtrOutput)
}

// The Secondary Connection String for the ServiceBus Topic authorization Rule.
func (o LookupTopicAuthorizationRuleResultOutput) SecondaryConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTopicAuthorizationRuleResult) string { return v.SecondaryConnectionString }).(pulumi.StringOutput)
}

// The alias Secondary Connection String for the ServiceBus Namespace
func (o LookupTopicAuthorizationRuleResultOutput) SecondaryConnectionStringAlias() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTopicAuthorizationRuleResult) string { return v.SecondaryConnectionStringAlias }).(pulumi.StringOutput)
}

// The Secondary Key for the ServiceBus Topic authorization Rule.
func (o LookupTopicAuthorizationRuleResultOutput) SecondaryKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTopicAuthorizationRuleResult) string { return v.SecondaryKey }).(pulumi.StringOutput)
}

func (o LookupTopicAuthorizationRuleResultOutput) Send() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTopicAuthorizationRuleResult) bool { return v.Send }).(pulumi.BoolOutput)
}

func (o LookupTopicAuthorizationRuleResultOutput) TopicId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTopicAuthorizationRuleResult) *string { return v.TopicId }).(pulumi.StringPtrOutput)
}

func (o LookupTopicAuthorizationRuleResultOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTopicAuthorizationRuleResult) *string { return v.TopicName }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTopicAuthorizationRuleResultOutput{})
}
