// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package servicebus

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Service Bus Topic.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/servicebus"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		example, err := servicebus.LookupTopic(ctx, &servicebus.LookupTopicArgs{
// 			Name:              "existing",
// 			ResourceGroupName: "existing",
// 			NamespaceName:     "existing",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("id", example.Id)
// 		return nil
// 	})
// }
// ```
func LookupTopic(ctx *pulumi.Context, args *LookupTopicArgs, opts ...pulumi.InvokeOption) (*LookupTopicResult, error) {
	var rv LookupTopicResult
	err := ctx.Invoke("azure:servicebus/getTopic:getTopic", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTopic.
type LookupTopicArgs struct {
	// The name of this Service Bus Topic.
	Name string `pulumi:"name"`
	// The name of the Service Bus Namespace.
	NamespaceName string `pulumi:"namespaceName"`
	// The name of the Resource Group where the Service Bus Topic exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getTopic.
type LookupTopicResult struct {
	// The ISO 8601 timespan duration of the idle interval after which the Topic is automatically deleted, minimum of 5 minutes.
	AutoDeleteOnIdle string `pulumi:"autoDeleteOnIdle"`
	// The ISO 8601 timespan duration of TTL of messages sent to this topic if no TTL value is set on the message itself.
	DefaultMessageTtl string `pulumi:"defaultMessageTtl"`
	// The ISO 8601 timespan duration during which duplicates can be detected.
	DuplicateDetectionHistoryTimeWindow string `pulumi:"duplicateDetectionHistoryTimeWindow"`
	// Boolean flag which controls if server-side batched operations are enabled.
	EnableBatchedOperations bool `pulumi:"enableBatchedOperations"`
	// Boolean flag which controls whether Express Entities are enabled. An express topic holds a message in memory temporarily before writing it to persistent storage.
	EnableExpress bool `pulumi:"enableExpress"`
	// Boolean flag which controls whether to enable the topic to be partitioned across multiple message brokers.
	EnablePartitioning bool `pulumi:"enablePartitioning"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Integer value which controls the size of memory allocated for the topic. For supported values see the "Queue/topic size" section of [this document](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-quotas).
	MaxSizeInMegabytes int    `pulumi:"maxSizeInMegabytes"`
	Name               string `pulumi:"name"`
	NamespaceName      string `pulumi:"namespaceName"`
	// Boolean flag which controls whether the Topic requires duplicate detection.
	RequiresDuplicateDetection bool   `pulumi:"requiresDuplicateDetection"`
	ResourceGroupName          string `pulumi:"resourceGroupName"`
	// The Status of the Service Bus Topic. Acceptable values are Active or Disabled.
	Status string `pulumi:"status"`
	// Boolean flag which controls whether the Topic supports ordering.
	SupportOrdering bool `pulumi:"supportOrdering"`
}
