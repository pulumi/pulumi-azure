// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devcenter

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Dev Center Dev Box Definition.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/devcenter"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := devcenter.LookupDevBoxDefinition(ctx, &devcenter.LookupDevBoxDefinitionArgs{
//				Name:        exampleAzurermDevCenterDevBoxDefinition.Name,
//				DevCenterId: exampleAzurermDevCenterDevBoxDefinition.DevCenterId,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("id", example.Id)
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This data source uses the following Azure API Providers:
//
// * `Microsoft.DevCenter` - 2025-02-01
func LookupDevBoxDefinition(ctx *pulumi.Context, args *LookupDevBoxDefinitionArgs, opts ...pulumi.InvokeOption) (*LookupDevBoxDefinitionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDevBoxDefinitionResult
	err := ctx.Invoke("azure:devcenter/getDevBoxDefinition:getDevBoxDefinition", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDevBoxDefinition.
type LookupDevBoxDefinitionArgs struct {
	// The ID of the associated Dev Center.
	DevCenterId string `pulumi:"devCenterId"`
	// The name of this Dev Center Dev Box Definition.
	Name string `pulumi:"name"`
}

// A collection of values returned by getDevBoxDefinition.
type LookupDevBoxDefinitionResult struct {
	DevCenterId string `pulumi:"devCenterId"`
	// Whether Dev Boxes created with this definition are capable of hibernation.
	HibernateSupportEnabled bool `pulumi:"hibernateSupportEnabled"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The ID of the image for the Dev Center Dev Box Definition.
	ImageReferenceId string `pulumi:"imageReferenceId"`
	// The Azure Region where the Dev Center Dev Box Definition exists.
	Location string `pulumi:"location"`
	Name     string `pulumi:"name"`
	// The name of the SKU for the Dev Center Dev Box Definition.
	SkuName string `pulumi:"skuName"`
	// A mapping of tags assigned to the Dev Center Dev Box Definition.
	Tags map[string]string `pulumi:"tags"`
}

func LookupDevBoxDefinitionOutput(ctx *pulumi.Context, args LookupDevBoxDefinitionOutputArgs, opts ...pulumi.InvokeOption) LookupDevBoxDefinitionResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDevBoxDefinitionResultOutput, error) {
			args := v.(LookupDevBoxDefinitionArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure:devcenter/getDevBoxDefinition:getDevBoxDefinition", args, LookupDevBoxDefinitionResultOutput{}, options).(LookupDevBoxDefinitionResultOutput), nil
		}).(LookupDevBoxDefinitionResultOutput)
}

// A collection of arguments for invoking getDevBoxDefinition.
type LookupDevBoxDefinitionOutputArgs struct {
	// The ID of the associated Dev Center.
	DevCenterId pulumi.StringInput `pulumi:"devCenterId"`
	// The name of this Dev Center Dev Box Definition.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupDevBoxDefinitionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDevBoxDefinitionArgs)(nil)).Elem()
}

// A collection of values returned by getDevBoxDefinition.
type LookupDevBoxDefinitionResultOutput struct{ *pulumi.OutputState }

func (LookupDevBoxDefinitionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDevBoxDefinitionResult)(nil)).Elem()
}

func (o LookupDevBoxDefinitionResultOutput) ToLookupDevBoxDefinitionResultOutput() LookupDevBoxDefinitionResultOutput {
	return o
}

func (o LookupDevBoxDefinitionResultOutput) ToLookupDevBoxDefinitionResultOutputWithContext(ctx context.Context) LookupDevBoxDefinitionResultOutput {
	return o
}

func (o LookupDevBoxDefinitionResultOutput) DevCenterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDevBoxDefinitionResult) string { return v.DevCenterId }).(pulumi.StringOutput)
}

// Whether Dev Boxes created with this definition are capable of hibernation.
func (o LookupDevBoxDefinitionResultOutput) HibernateSupportEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDevBoxDefinitionResult) bool { return v.HibernateSupportEnabled }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDevBoxDefinitionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDevBoxDefinitionResult) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the image for the Dev Center Dev Box Definition.
func (o LookupDevBoxDefinitionResultOutput) ImageReferenceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDevBoxDefinitionResult) string { return v.ImageReferenceId }).(pulumi.StringOutput)
}

// The Azure Region where the Dev Center Dev Box Definition exists.
func (o LookupDevBoxDefinitionResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDevBoxDefinitionResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o LookupDevBoxDefinitionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDevBoxDefinitionResult) string { return v.Name }).(pulumi.StringOutput)
}

// The name of the SKU for the Dev Center Dev Box Definition.
func (o LookupDevBoxDefinitionResultOutput) SkuName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDevBoxDefinitionResult) string { return v.SkuName }).(pulumi.StringOutput)
}

// A mapping of tags assigned to the Dev Center Dev Box Definition.
func (o LookupDevBoxDefinitionResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupDevBoxDefinitionResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDevBoxDefinitionResultOutput{})
}
