// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devcenter

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Dev Center Attached Network.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/devcenter"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-dcan"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "example", &network.VirtualNetworkArgs{
//				Name: pulumi.String("example-vnet"),
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//			})
//			if err != nil {
//				return err
//			}
//			exampleSubnet, err := network.NewSubnet(ctx, "example", &network.SubnetArgs{
//				Name:               pulumi.String("internal"),
//				ResourceGroupName:  example.Name,
//				VirtualNetworkName: exampleVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.0.2.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleDevCenter, err := devcenter.NewDevCenter(ctx, "example", &devcenter.DevCenterArgs{
//				Name:              pulumi.String("example-dc"),
//				ResourceGroupName: example.Name,
//				Location:          example.Location,
//				Identity: &devcenter.DevCenterIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleNetworkConnection, err := devcenter.NewNetworkConnection(ctx, "example", &devcenter.NetworkConnectionArgs{
//				Name:              pulumi.String("example-dcnc"),
//				ResourceGroupName: example.Name,
//				Location:          example.Location,
//				DomainJoinType:    pulumi.String("AzureADJoin"),
//				SubnetId:          exampleSubnet.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = devcenter.NewAttachedNetwork(ctx, "example", &devcenter.AttachedNetworkArgs{
//				Name:                pulumi.String("example-dcet"),
//				DevCenterId:         exampleDevCenter.ID(),
//				NetworkConnectionId: exampleNetworkConnection.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// An existing Dev Center Attached Network can be imported into Pulumi using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:devcenter/attachedNetwork:AttachedNetwork example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DevCenter/devCenters/dc1/attachedNetworks/et1
// ```
type AttachedNetwork struct {
	pulumi.CustomResourceState

	// The ID of the associated Dev Center. Changing this forces a new resource to be created.
	DevCenterId pulumi.StringOutput `pulumi:"devCenterId"`
	// Specifies the name of this Dev Center Attached Network. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Dev Center Network Connection you want to attach. Changing this forces a new resource to be created.
	NetworkConnectionId pulumi.StringOutput `pulumi:"networkConnectionId"`
}

// NewAttachedNetwork registers a new resource with the given unique name, arguments, and options.
func NewAttachedNetwork(ctx *pulumi.Context,
	name string, args *AttachedNetworkArgs, opts ...pulumi.ResourceOption) (*AttachedNetwork, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DevCenterId == nil {
		return nil, errors.New("invalid value for required argument 'DevCenterId'")
	}
	if args.NetworkConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkConnectionId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AttachedNetwork
	err := ctx.RegisterResource("azure:devcenter/attachedNetwork:AttachedNetwork", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAttachedNetwork gets an existing AttachedNetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAttachedNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AttachedNetworkState, opts ...pulumi.ResourceOption) (*AttachedNetwork, error) {
	var resource AttachedNetwork
	err := ctx.ReadResource("azure:devcenter/attachedNetwork:AttachedNetwork", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AttachedNetwork resources.
type attachedNetworkState struct {
	// The ID of the associated Dev Center. Changing this forces a new resource to be created.
	DevCenterId *string `pulumi:"devCenterId"`
	// Specifies the name of this Dev Center Attached Network. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The ID of the Dev Center Network Connection you want to attach. Changing this forces a new resource to be created.
	NetworkConnectionId *string `pulumi:"networkConnectionId"`
}

type AttachedNetworkState struct {
	// The ID of the associated Dev Center. Changing this forces a new resource to be created.
	DevCenterId pulumi.StringPtrInput
	// Specifies the name of this Dev Center Attached Network. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The ID of the Dev Center Network Connection you want to attach. Changing this forces a new resource to be created.
	NetworkConnectionId pulumi.StringPtrInput
}

func (AttachedNetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*attachedNetworkState)(nil)).Elem()
}

type attachedNetworkArgs struct {
	// The ID of the associated Dev Center. Changing this forces a new resource to be created.
	DevCenterId string `pulumi:"devCenterId"`
	// Specifies the name of this Dev Center Attached Network. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The ID of the Dev Center Network Connection you want to attach. Changing this forces a new resource to be created.
	NetworkConnectionId string `pulumi:"networkConnectionId"`
}

// The set of arguments for constructing a AttachedNetwork resource.
type AttachedNetworkArgs struct {
	// The ID of the associated Dev Center. Changing this forces a new resource to be created.
	DevCenterId pulumi.StringInput
	// Specifies the name of this Dev Center Attached Network. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The ID of the Dev Center Network Connection you want to attach. Changing this forces a new resource to be created.
	NetworkConnectionId pulumi.StringInput
}

func (AttachedNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*attachedNetworkArgs)(nil)).Elem()
}

type AttachedNetworkInput interface {
	pulumi.Input

	ToAttachedNetworkOutput() AttachedNetworkOutput
	ToAttachedNetworkOutputWithContext(ctx context.Context) AttachedNetworkOutput
}

func (*AttachedNetwork) ElementType() reflect.Type {
	return reflect.TypeOf((**AttachedNetwork)(nil)).Elem()
}

func (i *AttachedNetwork) ToAttachedNetworkOutput() AttachedNetworkOutput {
	return i.ToAttachedNetworkOutputWithContext(context.Background())
}

func (i *AttachedNetwork) ToAttachedNetworkOutputWithContext(ctx context.Context) AttachedNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachedNetworkOutput)
}

// AttachedNetworkArrayInput is an input type that accepts AttachedNetworkArray and AttachedNetworkArrayOutput values.
// You can construct a concrete instance of `AttachedNetworkArrayInput` via:
//
//	AttachedNetworkArray{ AttachedNetworkArgs{...} }
type AttachedNetworkArrayInput interface {
	pulumi.Input

	ToAttachedNetworkArrayOutput() AttachedNetworkArrayOutput
	ToAttachedNetworkArrayOutputWithContext(context.Context) AttachedNetworkArrayOutput
}

type AttachedNetworkArray []AttachedNetworkInput

func (AttachedNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AttachedNetwork)(nil)).Elem()
}

func (i AttachedNetworkArray) ToAttachedNetworkArrayOutput() AttachedNetworkArrayOutput {
	return i.ToAttachedNetworkArrayOutputWithContext(context.Background())
}

func (i AttachedNetworkArray) ToAttachedNetworkArrayOutputWithContext(ctx context.Context) AttachedNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachedNetworkArrayOutput)
}

// AttachedNetworkMapInput is an input type that accepts AttachedNetworkMap and AttachedNetworkMapOutput values.
// You can construct a concrete instance of `AttachedNetworkMapInput` via:
//
//	AttachedNetworkMap{ "key": AttachedNetworkArgs{...} }
type AttachedNetworkMapInput interface {
	pulumi.Input

	ToAttachedNetworkMapOutput() AttachedNetworkMapOutput
	ToAttachedNetworkMapOutputWithContext(context.Context) AttachedNetworkMapOutput
}

type AttachedNetworkMap map[string]AttachedNetworkInput

func (AttachedNetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AttachedNetwork)(nil)).Elem()
}

func (i AttachedNetworkMap) ToAttachedNetworkMapOutput() AttachedNetworkMapOutput {
	return i.ToAttachedNetworkMapOutputWithContext(context.Background())
}

func (i AttachedNetworkMap) ToAttachedNetworkMapOutputWithContext(ctx context.Context) AttachedNetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachedNetworkMapOutput)
}

type AttachedNetworkOutput struct{ *pulumi.OutputState }

func (AttachedNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AttachedNetwork)(nil)).Elem()
}

func (o AttachedNetworkOutput) ToAttachedNetworkOutput() AttachedNetworkOutput {
	return o
}

func (o AttachedNetworkOutput) ToAttachedNetworkOutputWithContext(ctx context.Context) AttachedNetworkOutput {
	return o
}

// The ID of the associated Dev Center. Changing this forces a new resource to be created.
func (o AttachedNetworkOutput) DevCenterId() pulumi.StringOutput {
	return o.ApplyT(func(v *AttachedNetwork) pulumi.StringOutput { return v.DevCenterId }).(pulumi.StringOutput)
}

// Specifies the name of this Dev Center Attached Network. Changing this forces a new resource to be created.
func (o AttachedNetworkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AttachedNetwork) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Dev Center Network Connection you want to attach. Changing this forces a new resource to be created.
func (o AttachedNetworkOutput) NetworkConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *AttachedNetwork) pulumi.StringOutput { return v.NetworkConnectionId }).(pulumi.StringOutput)
}

type AttachedNetworkArrayOutput struct{ *pulumi.OutputState }

func (AttachedNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AttachedNetwork)(nil)).Elem()
}

func (o AttachedNetworkArrayOutput) ToAttachedNetworkArrayOutput() AttachedNetworkArrayOutput {
	return o
}

func (o AttachedNetworkArrayOutput) ToAttachedNetworkArrayOutputWithContext(ctx context.Context) AttachedNetworkArrayOutput {
	return o
}

func (o AttachedNetworkArrayOutput) Index(i pulumi.IntInput) AttachedNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AttachedNetwork {
		return vs[0].([]*AttachedNetwork)[vs[1].(int)]
	}).(AttachedNetworkOutput)
}

type AttachedNetworkMapOutput struct{ *pulumi.OutputState }

func (AttachedNetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AttachedNetwork)(nil)).Elem()
}

func (o AttachedNetworkMapOutput) ToAttachedNetworkMapOutput() AttachedNetworkMapOutput {
	return o
}

func (o AttachedNetworkMapOutput) ToAttachedNetworkMapOutputWithContext(ctx context.Context) AttachedNetworkMapOutput {
	return o
}

func (o AttachedNetworkMapOutput) MapIndex(k pulumi.StringInput) AttachedNetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AttachedNetwork {
		return vs[0].(map[string]*AttachedNetwork)[vs[1].(string)]
	}).(AttachedNetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AttachedNetworkInput)(nil)).Elem(), &AttachedNetwork{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttachedNetworkArrayInput)(nil)).Elem(), AttachedNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttachedNetworkMapInput)(nil)).Elem(), AttachedNetworkMap{})
	pulumi.RegisterOutputType(AttachedNetworkOutput{})
	pulumi.RegisterOutputType(AttachedNetworkArrayOutput{})
	pulumi.RegisterOutputType(AttachedNetworkMapOutput{})
}
