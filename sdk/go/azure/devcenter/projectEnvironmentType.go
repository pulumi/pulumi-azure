// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devcenter

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Dev Center Project Environment Type.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/devcenter"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := core.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resources"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleDevCenter, err := devcenter.NewDevCenter(ctx, "example", &devcenter.DevCenterArgs{
//				Name:              pulumi.String("example-dc"),
//				ResourceGroupName: example.Name,
//				Location:          example.Location,
//				Identity: &devcenter.DevCenterIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleEnvironmentType, err := devcenter.NewEnvironmentType(ctx, "example", &devcenter.EnvironmentTypeArgs{
//				Name:        pulumi.String("example-et"),
//				DevCenterId: exampleDevCenter.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			exampleProject, err := devcenter.NewProject(ctx, "example", &devcenter.ProjectArgs{
//				Name:              pulumi.String("example-dcp"),
//				ResourceGroupName: example.Name,
//				Location:          example.Location,
//				DevCenterId:       exampleDevCenter.ID(),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				exampleEnvironmentType,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = devcenter.NewProjectEnvironmentType(ctx, "example", &devcenter.ProjectEnvironmentTypeArgs{
//				Name:               pulumi.String("example-et"),
//				Location:           example.Location,
//				DevCenterProjectId: exampleProject.ID(),
//				DeploymentTargetId: pulumi.Sprintf("/subscriptions/%v", current.SubscriptionId),
//				Identity: &devcenter.ProjectEnvironmentTypeIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// An existing Dev Center Project Environment Type can be imported into Terraform using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:devcenter/projectEnvironmentType:ProjectEnvironmentType example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DevCenter/projects/project1/environmentTypes/et1
// ```
type ProjectEnvironmentType struct {
	pulumi.CustomResourceState

	// A list of roles to assign to the environment creator.
	CreatorRoleAssignmentRoles pulumi.StringArrayOutput `pulumi:"creatorRoleAssignmentRoles"`
	// The ID of the subscription that the Environment Type will be mapped to. The environment's resources will be deployed into this subscription.
	DeploymentTargetId pulumi.StringOutput `pulumi:"deploymentTargetId"`
	// The ID of the associated Dev Center Project. Changing this forces a new resource to be created.
	DevCenterProjectId pulumi.StringOutput `pulumi:"devCenterProjectId"`
	// An `identity` block as defined below.
	Identity ProjectEnvironmentTypeIdentityOutput `pulumi:"identity"`
	// The Azure Region where the Dev Center Project Environment Type should exist. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name of this Dev Center Project Environment Type. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A mapping of tags which should be assigned to the Dev Center Project Environment Type.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A `userRoleAssignment` block as defined below.
	UserRoleAssignments ProjectEnvironmentTypeUserRoleAssignmentArrayOutput `pulumi:"userRoleAssignments"`
}

// NewProjectEnvironmentType registers a new resource with the given unique name, arguments, and options.
func NewProjectEnvironmentType(ctx *pulumi.Context,
	name string, args *ProjectEnvironmentTypeArgs, opts ...pulumi.ResourceOption) (*ProjectEnvironmentType, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeploymentTargetId == nil {
		return nil, errors.New("invalid value for required argument 'DeploymentTargetId'")
	}
	if args.DevCenterProjectId == nil {
		return nil, errors.New("invalid value for required argument 'DevCenterProjectId'")
	}
	if args.Identity == nil {
		return nil, errors.New("invalid value for required argument 'Identity'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectEnvironmentType
	err := ctx.RegisterResource("azure:devcenter/projectEnvironmentType:ProjectEnvironmentType", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectEnvironmentType gets an existing ProjectEnvironmentType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectEnvironmentType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectEnvironmentTypeState, opts ...pulumi.ResourceOption) (*ProjectEnvironmentType, error) {
	var resource ProjectEnvironmentType
	err := ctx.ReadResource("azure:devcenter/projectEnvironmentType:ProjectEnvironmentType", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectEnvironmentType resources.
type projectEnvironmentTypeState struct {
	// A list of roles to assign to the environment creator.
	CreatorRoleAssignmentRoles []string `pulumi:"creatorRoleAssignmentRoles"`
	// The ID of the subscription that the Environment Type will be mapped to. The environment's resources will be deployed into this subscription.
	DeploymentTargetId *string `pulumi:"deploymentTargetId"`
	// The ID of the associated Dev Center Project. Changing this forces a new resource to be created.
	DevCenterProjectId *string `pulumi:"devCenterProjectId"`
	// An `identity` block as defined below.
	Identity *ProjectEnvironmentTypeIdentity `pulumi:"identity"`
	// The Azure Region where the Dev Center Project Environment Type should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of this Dev Center Project Environment Type. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A mapping of tags which should be assigned to the Dev Center Project Environment Type.
	Tags map[string]string `pulumi:"tags"`
	// A `userRoleAssignment` block as defined below.
	UserRoleAssignments []ProjectEnvironmentTypeUserRoleAssignment `pulumi:"userRoleAssignments"`
}

type ProjectEnvironmentTypeState struct {
	// A list of roles to assign to the environment creator.
	CreatorRoleAssignmentRoles pulumi.StringArrayInput
	// The ID of the subscription that the Environment Type will be mapped to. The environment's resources will be deployed into this subscription.
	DeploymentTargetId pulumi.StringPtrInput
	// The ID of the associated Dev Center Project. Changing this forces a new resource to be created.
	DevCenterProjectId pulumi.StringPtrInput
	// An `identity` block as defined below.
	Identity ProjectEnvironmentTypeIdentityPtrInput
	// The Azure Region where the Dev Center Project Environment Type should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of this Dev Center Project Environment Type. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Dev Center Project Environment Type.
	Tags pulumi.StringMapInput
	// A `userRoleAssignment` block as defined below.
	UserRoleAssignments ProjectEnvironmentTypeUserRoleAssignmentArrayInput
}

func (ProjectEnvironmentTypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectEnvironmentTypeState)(nil)).Elem()
}

type projectEnvironmentTypeArgs struct {
	// A list of roles to assign to the environment creator.
	CreatorRoleAssignmentRoles []string `pulumi:"creatorRoleAssignmentRoles"`
	// The ID of the subscription that the Environment Type will be mapped to. The environment's resources will be deployed into this subscription.
	DeploymentTargetId string `pulumi:"deploymentTargetId"`
	// The ID of the associated Dev Center Project. Changing this forces a new resource to be created.
	DevCenterProjectId string `pulumi:"devCenterProjectId"`
	// An `identity` block as defined below.
	Identity ProjectEnvironmentTypeIdentity `pulumi:"identity"`
	// The Azure Region where the Dev Center Project Environment Type should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of this Dev Center Project Environment Type. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A mapping of tags which should be assigned to the Dev Center Project Environment Type.
	Tags map[string]string `pulumi:"tags"`
	// A `userRoleAssignment` block as defined below.
	UserRoleAssignments []ProjectEnvironmentTypeUserRoleAssignment `pulumi:"userRoleAssignments"`
}

// The set of arguments for constructing a ProjectEnvironmentType resource.
type ProjectEnvironmentTypeArgs struct {
	// A list of roles to assign to the environment creator.
	CreatorRoleAssignmentRoles pulumi.StringArrayInput
	// The ID of the subscription that the Environment Type will be mapped to. The environment's resources will be deployed into this subscription.
	DeploymentTargetId pulumi.StringInput
	// The ID of the associated Dev Center Project. Changing this forces a new resource to be created.
	DevCenterProjectId pulumi.StringInput
	// An `identity` block as defined below.
	Identity ProjectEnvironmentTypeIdentityInput
	// The Azure Region where the Dev Center Project Environment Type should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of this Dev Center Project Environment Type. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Dev Center Project Environment Type.
	Tags pulumi.StringMapInput
	// A `userRoleAssignment` block as defined below.
	UserRoleAssignments ProjectEnvironmentTypeUserRoleAssignmentArrayInput
}

func (ProjectEnvironmentTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectEnvironmentTypeArgs)(nil)).Elem()
}

type ProjectEnvironmentTypeInput interface {
	pulumi.Input

	ToProjectEnvironmentTypeOutput() ProjectEnvironmentTypeOutput
	ToProjectEnvironmentTypeOutputWithContext(ctx context.Context) ProjectEnvironmentTypeOutput
}

func (*ProjectEnvironmentType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectEnvironmentType)(nil)).Elem()
}

func (i *ProjectEnvironmentType) ToProjectEnvironmentTypeOutput() ProjectEnvironmentTypeOutput {
	return i.ToProjectEnvironmentTypeOutputWithContext(context.Background())
}

func (i *ProjectEnvironmentType) ToProjectEnvironmentTypeOutputWithContext(ctx context.Context) ProjectEnvironmentTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentTypeOutput)
}

// ProjectEnvironmentTypeArrayInput is an input type that accepts ProjectEnvironmentTypeArray and ProjectEnvironmentTypeArrayOutput values.
// You can construct a concrete instance of `ProjectEnvironmentTypeArrayInput` via:
//
//	ProjectEnvironmentTypeArray{ ProjectEnvironmentTypeArgs{...} }
type ProjectEnvironmentTypeArrayInput interface {
	pulumi.Input

	ToProjectEnvironmentTypeArrayOutput() ProjectEnvironmentTypeArrayOutput
	ToProjectEnvironmentTypeArrayOutputWithContext(context.Context) ProjectEnvironmentTypeArrayOutput
}

type ProjectEnvironmentTypeArray []ProjectEnvironmentTypeInput

func (ProjectEnvironmentTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectEnvironmentType)(nil)).Elem()
}

func (i ProjectEnvironmentTypeArray) ToProjectEnvironmentTypeArrayOutput() ProjectEnvironmentTypeArrayOutput {
	return i.ToProjectEnvironmentTypeArrayOutputWithContext(context.Background())
}

func (i ProjectEnvironmentTypeArray) ToProjectEnvironmentTypeArrayOutputWithContext(ctx context.Context) ProjectEnvironmentTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentTypeArrayOutput)
}

// ProjectEnvironmentTypeMapInput is an input type that accepts ProjectEnvironmentTypeMap and ProjectEnvironmentTypeMapOutput values.
// You can construct a concrete instance of `ProjectEnvironmentTypeMapInput` via:
//
//	ProjectEnvironmentTypeMap{ "key": ProjectEnvironmentTypeArgs{...} }
type ProjectEnvironmentTypeMapInput interface {
	pulumi.Input

	ToProjectEnvironmentTypeMapOutput() ProjectEnvironmentTypeMapOutput
	ToProjectEnvironmentTypeMapOutputWithContext(context.Context) ProjectEnvironmentTypeMapOutput
}

type ProjectEnvironmentTypeMap map[string]ProjectEnvironmentTypeInput

func (ProjectEnvironmentTypeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectEnvironmentType)(nil)).Elem()
}

func (i ProjectEnvironmentTypeMap) ToProjectEnvironmentTypeMapOutput() ProjectEnvironmentTypeMapOutput {
	return i.ToProjectEnvironmentTypeMapOutputWithContext(context.Background())
}

func (i ProjectEnvironmentTypeMap) ToProjectEnvironmentTypeMapOutputWithContext(ctx context.Context) ProjectEnvironmentTypeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentTypeMapOutput)
}

type ProjectEnvironmentTypeOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectEnvironmentType)(nil)).Elem()
}

func (o ProjectEnvironmentTypeOutput) ToProjectEnvironmentTypeOutput() ProjectEnvironmentTypeOutput {
	return o
}

func (o ProjectEnvironmentTypeOutput) ToProjectEnvironmentTypeOutputWithContext(ctx context.Context) ProjectEnvironmentTypeOutput {
	return o
}

// A list of roles to assign to the environment creator.
func (o ProjectEnvironmentTypeOutput) CreatorRoleAssignmentRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectEnvironmentType) pulumi.StringArrayOutput { return v.CreatorRoleAssignmentRoles }).(pulumi.StringArrayOutput)
}

// The ID of the subscription that the Environment Type will be mapped to. The environment's resources will be deployed into this subscription.
func (o ProjectEnvironmentTypeOutput) DeploymentTargetId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectEnvironmentType) pulumi.StringOutput { return v.DeploymentTargetId }).(pulumi.StringOutput)
}

// The ID of the associated Dev Center Project. Changing this forces a new resource to be created.
func (o ProjectEnvironmentTypeOutput) DevCenterProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectEnvironmentType) pulumi.StringOutput { return v.DevCenterProjectId }).(pulumi.StringOutput)
}

// An `identity` block as defined below.
func (o ProjectEnvironmentTypeOutput) Identity() ProjectEnvironmentTypeIdentityOutput {
	return o.ApplyT(func(v *ProjectEnvironmentType) ProjectEnvironmentTypeIdentityOutput { return v.Identity }).(ProjectEnvironmentTypeIdentityOutput)
}

// The Azure Region where the Dev Center Project Environment Type should exist. Changing this forces a new resource to be created.
func (o ProjectEnvironmentTypeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectEnvironmentType) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name of this Dev Center Project Environment Type. Changing this forces a new resource to be created.
func (o ProjectEnvironmentTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectEnvironmentType) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the Dev Center Project Environment Type.
func (o ProjectEnvironmentTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ProjectEnvironmentType) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A `userRoleAssignment` block as defined below.
func (o ProjectEnvironmentTypeOutput) UserRoleAssignments() ProjectEnvironmentTypeUserRoleAssignmentArrayOutput {
	return o.ApplyT(func(v *ProjectEnvironmentType) ProjectEnvironmentTypeUserRoleAssignmentArrayOutput {
		return v.UserRoleAssignments
	}).(ProjectEnvironmentTypeUserRoleAssignmentArrayOutput)
}

type ProjectEnvironmentTypeArrayOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectEnvironmentType)(nil)).Elem()
}

func (o ProjectEnvironmentTypeArrayOutput) ToProjectEnvironmentTypeArrayOutput() ProjectEnvironmentTypeArrayOutput {
	return o
}

func (o ProjectEnvironmentTypeArrayOutput) ToProjectEnvironmentTypeArrayOutputWithContext(ctx context.Context) ProjectEnvironmentTypeArrayOutput {
	return o
}

func (o ProjectEnvironmentTypeArrayOutput) Index(i pulumi.IntInput) ProjectEnvironmentTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectEnvironmentType {
		return vs[0].([]*ProjectEnvironmentType)[vs[1].(int)]
	}).(ProjectEnvironmentTypeOutput)
}

type ProjectEnvironmentTypeMapOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentTypeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectEnvironmentType)(nil)).Elem()
}

func (o ProjectEnvironmentTypeMapOutput) ToProjectEnvironmentTypeMapOutput() ProjectEnvironmentTypeMapOutput {
	return o
}

func (o ProjectEnvironmentTypeMapOutput) ToProjectEnvironmentTypeMapOutputWithContext(ctx context.Context) ProjectEnvironmentTypeMapOutput {
	return o
}

func (o ProjectEnvironmentTypeMapOutput) MapIndex(k pulumi.StringInput) ProjectEnvironmentTypeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectEnvironmentType {
		return vs[0].(map[string]*ProjectEnvironmentType)[vs[1].(string)]
	}).(ProjectEnvironmentTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectEnvironmentTypeInput)(nil)).Elem(), &ProjectEnvironmentType{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectEnvironmentTypeArrayInput)(nil)).Elem(), ProjectEnvironmentTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectEnvironmentTypeMapInput)(nil)).Elem(), ProjectEnvironmentTypeMap{})
	pulumi.RegisterOutputType(ProjectEnvironmentTypeOutput{})
	pulumi.RegisterOutputType(ProjectEnvironmentTypeArrayOutput{})
	pulumi.RegisterOutputType(ProjectEnvironmentTypeMapOutput{})
}
