// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devcenter

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Dev Center Gallery.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/authorization"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/compute"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/devcenter"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resources"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			testUserAssignedIdentity, err := authorization.NewUserAssignedIdentity(ctx, "test", &authorization.UserAssignedIdentityArgs{
//				Name:              pulumi.String("example-uai"),
//				Location:          pulumi.Any(testAzurermResourceGroup.Location),
//				ResourceGroupName: pulumi.Any(testAzurermResourceGroup.Name),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = devcenter.NewDevCenter(ctx, "test", &devcenter.DevCenterArgs{
//				Name:              pulumi.String("example-devcenter"),
//				ResourceGroupName: pulumi.Any(testAzurermResourceGroup.Name),
//				Location:          pulumi.Any(testAzurermResourceGroup.Location),
//				Identity: &devcenter.DevCenterIdentityArgs{
//					Type: pulumi.String("UserAssigned"),
//					IdentityIds: pulumi.StringArray{
//						testUserAssignedIdentity.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleSharedImageGallery, err := compute.NewSharedImageGallery(ctx, "example", &compute.SharedImageGalleryArgs{
//				Name:              pulumi.String("example-image-gallery"),
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = devcenter.NewGallery(ctx, "example", &devcenter.GalleryArgs{
//				DevCenterId:     pulumi.Any(exampleAzurermDevCenter.Id),
//				SharedGalleryId: exampleSharedImageGallery.ID(),
//				Name:            pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This resource uses the following Azure API Providers:
//
// * `Microsoft.DevCenter`: 2025-02-01
//
// ## Import
//
// An existing Dev Center Gallery can be imported into Pulumi using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:devcenter/gallery:Gallery example /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devCenters/{devCenterName}/galleries/{galleryName}
// ```
//
// * Where `{subscriptionId}` is the ID of the Azure Subscription where the Dev Center Gallery exists. For example `12345678-1234-9876-4563-123456789012`.
//
// * Where `{resourceGroupName}` is the name of Resource Group where this Dev Center Gallery exists. For example `example-resource-group`.
//
// * Where `{devCenterName}` is the name of the Dev Center. For example `devCenterValue`.
//
// * Where `{galleryName}` is the name of the Gallery. For example `galleryValue`.
type Gallery struct {
	pulumi.CustomResourceState

	// Specifies the ID of the Dev Center within which this Dev Center Gallery should exist. Changing this forces a new Dev Center Gallery to be created.
	DevCenterId pulumi.StringOutput `pulumi:"devCenterId"`
	// Specifies the name of this Dev Center Gallery. Changing this forces a new Dev Center Gallery to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Shared Gallery which should be connected to the Dev Center Gallery. Changing this forces a new Dev Center Gallery to be created.
	SharedGalleryId pulumi.StringOutput `pulumi:"sharedGalleryId"`
}

// NewGallery registers a new resource with the given unique name, arguments, and options.
func NewGallery(ctx *pulumi.Context,
	name string, args *GalleryArgs, opts ...pulumi.ResourceOption) (*Gallery, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DevCenterId == nil {
		return nil, errors.New("invalid value for required argument 'DevCenterId'")
	}
	if args.SharedGalleryId == nil {
		return nil, errors.New("invalid value for required argument 'SharedGalleryId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Gallery
	err := ctx.RegisterResource("azure:devcenter/gallery:Gallery", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGallery gets an existing Gallery resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGallery(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GalleryState, opts ...pulumi.ResourceOption) (*Gallery, error) {
	var resource Gallery
	err := ctx.ReadResource("azure:devcenter/gallery:Gallery", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Gallery resources.
type galleryState struct {
	// Specifies the ID of the Dev Center within which this Dev Center Gallery should exist. Changing this forces a new Dev Center Gallery to be created.
	DevCenterId *string `pulumi:"devCenterId"`
	// Specifies the name of this Dev Center Gallery. Changing this forces a new Dev Center Gallery to be created.
	Name *string `pulumi:"name"`
	// The ID of the Shared Gallery which should be connected to the Dev Center Gallery. Changing this forces a new Dev Center Gallery to be created.
	SharedGalleryId *string `pulumi:"sharedGalleryId"`
}

type GalleryState struct {
	// Specifies the ID of the Dev Center within which this Dev Center Gallery should exist. Changing this forces a new Dev Center Gallery to be created.
	DevCenterId pulumi.StringPtrInput
	// Specifies the name of this Dev Center Gallery. Changing this forces a new Dev Center Gallery to be created.
	Name pulumi.StringPtrInput
	// The ID of the Shared Gallery which should be connected to the Dev Center Gallery. Changing this forces a new Dev Center Gallery to be created.
	SharedGalleryId pulumi.StringPtrInput
}

func (GalleryState) ElementType() reflect.Type {
	return reflect.TypeOf((*galleryState)(nil)).Elem()
}

type galleryArgs struct {
	// Specifies the ID of the Dev Center within which this Dev Center Gallery should exist. Changing this forces a new Dev Center Gallery to be created.
	DevCenterId string `pulumi:"devCenterId"`
	// Specifies the name of this Dev Center Gallery. Changing this forces a new Dev Center Gallery to be created.
	Name *string `pulumi:"name"`
	// The ID of the Shared Gallery which should be connected to the Dev Center Gallery. Changing this forces a new Dev Center Gallery to be created.
	SharedGalleryId string `pulumi:"sharedGalleryId"`
}

// The set of arguments for constructing a Gallery resource.
type GalleryArgs struct {
	// Specifies the ID of the Dev Center within which this Dev Center Gallery should exist. Changing this forces a new Dev Center Gallery to be created.
	DevCenterId pulumi.StringInput
	// Specifies the name of this Dev Center Gallery. Changing this forces a new Dev Center Gallery to be created.
	Name pulumi.StringPtrInput
	// The ID of the Shared Gallery which should be connected to the Dev Center Gallery. Changing this forces a new Dev Center Gallery to be created.
	SharedGalleryId pulumi.StringInput
}

func (GalleryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*galleryArgs)(nil)).Elem()
}

type GalleryInput interface {
	pulumi.Input

	ToGalleryOutput() GalleryOutput
	ToGalleryOutputWithContext(ctx context.Context) GalleryOutput
}

func (*Gallery) ElementType() reflect.Type {
	return reflect.TypeOf((**Gallery)(nil)).Elem()
}

func (i *Gallery) ToGalleryOutput() GalleryOutput {
	return i.ToGalleryOutputWithContext(context.Background())
}

func (i *Gallery) ToGalleryOutputWithContext(ctx context.Context) GalleryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryOutput)
}

// GalleryArrayInput is an input type that accepts GalleryArray and GalleryArrayOutput values.
// You can construct a concrete instance of `GalleryArrayInput` via:
//
//	GalleryArray{ GalleryArgs{...} }
type GalleryArrayInput interface {
	pulumi.Input

	ToGalleryArrayOutput() GalleryArrayOutput
	ToGalleryArrayOutputWithContext(context.Context) GalleryArrayOutput
}

type GalleryArray []GalleryInput

func (GalleryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Gallery)(nil)).Elem()
}

func (i GalleryArray) ToGalleryArrayOutput() GalleryArrayOutput {
	return i.ToGalleryArrayOutputWithContext(context.Background())
}

func (i GalleryArray) ToGalleryArrayOutputWithContext(ctx context.Context) GalleryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryArrayOutput)
}

// GalleryMapInput is an input type that accepts GalleryMap and GalleryMapOutput values.
// You can construct a concrete instance of `GalleryMapInput` via:
//
//	GalleryMap{ "key": GalleryArgs{...} }
type GalleryMapInput interface {
	pulumi.Input

	ToGalleryMapOutput() GalleryMapOutput
	ToGalleryMapOutputWithContext(context.Context) GalleryMapOutput
}

type GalleryMap map[string]GalleryInput

func (GalleryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Gallery)(nil)).Elem()
}

func (i GalleryMap) ToGalleryMapOutput() GalleryMapOutput {
	return i.ToGalleryMapOutputWithContext(context.Background())
}

func (i GalleryMap) ToGalleryMapOutputWithContext(ctx context.Context) GalleryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryMapOutput)
}

type GalleryOutput struct{ *pulumi.OutputState }

func (GalleryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Gallery)(nil)).Elem()
}

func (o GalleryOutput) ToGalleryOutput() GalleryOutput {
	return o
}

func (o GalleryOutput) ToGalleryOutputWithContext(ctx context.Context) GalleryOutput {
	return o
}

// Specifies the ID of the Dev Center within which this Dev Center Gallery should exist. Changing this forces a new Dev Center Gallery to be created.
func (o GalleryOutput) DevCenterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Gallery) pulumi.StringOutput { return v.DevCenterId }).(pulumi.StringOutput)
}

// Specifies the name of this Dev Center Gallery. Changing this forces a new Dev Center Gallery to be created.
func (o GalleryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Gallery) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Shared Gallery which should be connected to the Dev Center Gallery. Changing this forces a new Dev Center Gallery to be created.
func (o GalleryOutput) SharedGalleryId() pulumi.StringOutput {
	return o.ApplyT(func(v *Gallery) pulumi.StringOutput { return v.SharedGalleryId }).(pulumi.StringOutput)
}

type GalleryArrayOutput struct{ *pulumi.OutputState }

func (GalleryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Gallery)(nil)).Elem()
}

func (o GalleryArrayOutput) ToGalleryArrayOutput() GalleryArrayOutput {
	return o
}

func (o GalleryArrayOutput) ToGalleryArrayOutputWithContext(ctx context.Context) GalleryArrayOutput {
	return o
}

func (o GalleryArrayOutput) Index(i pulumi.IntInput) GalleryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Gallery {
		return vs[0].([]*Gallery)[vs[1].(int)]
	}).(GalleryOutput)
}

type GalleryMapOutput struct{ *pulumi.OutputState }

func (GalleryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Gallery)(nil)).Elem()
}

func (o GalleryMapOutput) ToGalleryMapOutput() GalleryMapOutput {
	return o
}

func (o GalleryMapOutput) ToGalleryMapOutputWithContext(ctx context.Context) GalleryMapOutput {
	return o
}

func (o GalleryMapOutput) MapIndex(k pulumi.StringInput) GalleryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Gallery {
		return vs[0].(map[string]*Gallery)[vs[1].(string)]
	}).(GalleryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GalleryInput)(nil)).Elem(), &Gallery{})
	pulumi.RegisterInputType(reflect.TypeOf((*GalleryArrayInput)(nil)).Elem(), GalleryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GalleryMapInput)(nil)).Elem(), GalleryMap{})
	pulumi.RegisterOutputType(GalleryOutput{})
	pulumi.RegisterOutputType(GalleryArrayOutput{})
	pulumi.RegisterOutputType(GalleryMapOutput{})
}
