// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devcenter

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// <!-- Note: This documentation is generated. Any manual changes will be overwritten -->
//
// Manages a Dev Center Project.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/devcenter"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleDevCenter, err := devcenter.NewDevCenter(ctx, "exampleDevCenter", &devcenter.DevCenterArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				Identity: &devcenter.DevCenterIdentityArgs{
//					Type: pulumi.String("example-value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = devcenter.NewProject(ctx, "exampleProject", &devcenter.ProjectArgs{
//				DevCenterId:       exampleDevCenter.ID(),
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// An existing Dev Center Project can be imported into Terraform using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:devcenter/project:Project example /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}
//
// ```
//
//   - Where `{subscriptionId}` is the ID of the Azure Subscription where the Dev Center Project exists. For example `12345678-1234-9876-4563-123456789012`. * Where `{resourceGroupName}` is the name of Resource Group where this Dev Center Project exists. For example `example-resource-group`. * Where `{projectName}` is the name of the Project. For example `projectValue`.
type Project struct {
	pulumi.CustomResourceState

	// Description of the project. Changing this forces a new Dev Center Project to be created.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Resource Id of an associated DevCenter. Changing this forces a new Dev Center Project to be created.
	DevCenterId pulumi.StringOutput `pulumi:"devCenterId"`
	// The URI of the Dev Center resource this project is associated with.
	DevCenterUri pulumi.StringOutput `pulumi:"devCenterUri"`
	// The Azure Region where the Dev Center Project should exist. Changing this forces a new Dev Center Project to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// When specified, limits the maximum number of Dev Boxes a single user can create across all pools in the project.
	MaximumDevBoxesPerUser pulumi.IntPtrOutput `pulumi:"maximumDevBoxesPerUser"`
	// Specifies the name of this Dev Center Project. Changing this forces a new Dev Center Project to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the name of the Resource Group within which this Dev Center Project should exist. Changing this forces a new Dev Center Project to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Dev Center Project.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOption) (*Project, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DevCenterId == nil {
		return nil, errors.New("invalid value for required argument 'DevCenterId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Project
	err := ctx.RegisterResource("azure:devcenter/project:Project", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectState, opts ...pulumi.ResourceOption) (*Project, error) {
	var resource Project
	err := ctx.ReadResource("azure:devcenter/project:Project", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Project resources.
type projectState struct {
	// Description of the project. Changing this forces a new Dev Center Project to be created.
	Description *string `pulumi:"description"`
	// Resource Id of an associated DevCenter. Changing this forces a new Dev Center Project to be created.
	DevCenterId *string `pulumi:"devCenterId"`
	// The URI of the Dev Center resource this project is associated with.
	DevCenterUri *string `pulumi:"devCenterUri"`
	// The Azure Region where the Dev Center Project should exist. Changing this forces a new Dev Center Project to be created.
	Location *string `pulumi:"location"`
	// When specified, limits the maximum number of Dev Boxes a single user can create across all pools in the project.
	MaximumDevBoxesPerUser *int `pulumi:"maximumDevBoxesPerUser"`
	// Specifies the name of this Dev Center Project. Changing this forces a new Dev Center Project to be created.
	Name *string `pulumi:"name"`
	// Specifies the name of the Resource Group within which this Dev Center Project should exist. Changing this forces a new Dev Center Project to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Dev Center Project.
	Tags map[string]string `pulumi:"tags"`
}

type ProjectState struct {
	// Description of the project. Changing this forces a new Dev Center Project to be created.
	Description pulumi.StringPtrInput
	// Resource Id of an associated DevCenter. Changing this forces a new Dev Center Project to be created.
	DevCenterId pulumi.StringPtrInput
	// The URI of the Dev Center resource this project is associated with.
	DevCenterUri pulumi.StringPtrInput
	// The Azure Region where the Dev Center Project should exist. Changing this forces a new Dev Center Project to be created.
	Location pulumi.StringPtrInput
	// When specified, limits the maximum number of Dev Boxes a single user can create across all pools in the project.
	MaximumDevBoxesPerUser pulumi.IntPtrInput
	// Specifies the name of this Dev Center Project. Changing this forces a new Dev Center Project to be created.
	Name pulumi.StringPtrInput
	// Specifies the name of the Resource Group within which this Dev Center Project should exist. Changing this forces a new Dev Center Project to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Dev Center Project.
	Tags pulumi.StringMapInput
}

func (ProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectState)(nil)).Elem()
}

type projectArgs struct {
	// Description of the project. Changing this forces a new Dev Center Project to be created.
	Description *string `pulumi:"description"`
	// Resource Id of an associated DevCenter. Changing this forces a new Dev Center Project to be created.
	DevCenterId string `pulumi:"devCenterId"`
	// The Azure Region where the Dev Center Project should exist. Changing this forces a new Dev Center Project to be created.
	Location *string `pulumi:"location"`
	// When specified, limits the maximum number of Dev Boxes a single user can create across all pools in the project.
	MaximumDevBoxesPerUser *int `pulumi:"maximumDevBoxesPerUser"`
	// Specifies the name of this Dev Center Project. Changing this forces a new Dev Center Project to be created.
	Name *string `pulumi:"name"`
	// Specifies the name of the Resource Group within which this Dev Center Project should exist. Changing this forces a new Dev Center Project to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Dev Center Project.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	// Description of the project. Changing this forces a new Dev Center Project to be created.
	Description pulumi.StringPtrInput
	// Resource Id of an associated DevCenter. Changing this forces a new Dev Center Project to be created.
	DevCenterId pulumi.StringInput
	// The Azure Region where the Dev Center Project should exist. Changing this forces a new Dev Center Project to be created.
	Location pulumi.StringPtrInput
	// When specified, limits the maximum number of Dev Boxes a single user can create across all pools in the project.
	MaximumDevBoxesPerUser pulumi.IntPtrInput
	// Specifies the name of this Dev Center Project. Changing this forces a new Dev Center Project to be created.
	Name pulumi.StringPtrInput
	// Specifies the name of the Resource Group within which this Dev Center Project should exist. Changing this forces a new Dev Center Project to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags which should be assigned to the Dev Center Project.
	Tags pulumi.StringMapInput
}

func (ProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectArgs)(nil)).Elem()
}

type ProjectInput interface {
	pulumi.Input

	ToProjectOutput() ProjectOutput
	ToProjectOutputWithContext(ctx context.Context) ProjectOutput
}

func (*Project) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (i *Project) ToProjectOutput() ProjectOutput {
	return i.ToProjectOutputWithContext(context.Background())
}

func (i *Project) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectOutput)
}

// ProjectArrayInput is an input type that accepts ProjectArray and ProjectArrayOutput values.
// You can construct a concrete instance of `ProjectArrayInput` via:
//
//	ProjectArray{ ProjectArgs{...} }
type ProjectArrayInput interface {
	pulumi.Input

	ToProjectArrayOutput() ProjectArrayOutput
	ToProjectArrayOutputWithContext(context.Context) ProjectArrayOutput
}

type ProjectArray []ProjectInput

func (ProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Project)(nil)).Elem()
}

func (i ProjectArray) ToProjectArrayOutput() ProjectArrayOutput {
	return i.ToProjectArrayOutputWithContext(context.Background())
}

func (i ProjectArray) ToProjectArrayOutputWithContext(ctx context.Context) ProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectArrayOutput)
}

// ProjectMapInput is an input type that accepts ProjectMap and ProjectMapOutput values.
// You can construct a concrete instance of `ProjectMapInput` via:
//
//	ProjectMap{ "key": ProjectArgs{...} }
type ProjectMapInput interface {
	pulumi.Input

	ToProjectMapOutput() ProjectMapOutput
	ToProjectMapOutputWithContext(context.Context) ProjectMapOutput
}

type ProjectMap map[string]ProjectInput

func (ProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Project)(nil)).Elem()
}

func (i ProjectMap) ToProjectMapOutput() ProjectMapOutput {
	return i.ToProjectMapOutputWithContext(context.Background())
}

func (i ProjectMap) ToProjectMapOutputWithContext(ctx context.Context) ProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMapOutput)
}

type ProjectOutput struct{ *pulumi.OutputState }

func (ProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (o ProjectOutput) ToProjectOutput() ProjectOutput {
	return o
}

func (o ProjectOutput) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return o
}

// Description of the project. Changing this forces a new Dev Center Project to be created.
func (o ProjectOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Resource Id of an associated DevCenter. Changing this forces a new Dev Center Project to be created.
func (o ProjectOutput) DevCenterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.DevCenterId }).(pulumi.StringOutput)
}

// The URI of the Dev Center resource this project is associated with.
func (o ProjectOutput) DevCenterUri() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.DevCenterUri }).(pulumi.StringOutput)
}

// The Azure Region where the Dev Center Project should exist. Changing this forces a new Dev Center Project to be created.
func (o ProjectOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// When specified, limits the maximum number of Dev Boxes a single user can create across all pools in the project.
func (o ProjectOutput) MaximumDevBoxesPerUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.IntPtrOutput { return v.MaximumDevBoxesPerUser }).(pulumi.IntPtrOutput)
}

// Specifies the name of this Dev Center Project. Changing this forces a new Dev Center Project to be created.
func (o ProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the name of the Resource Group within which this Dev Center Project should exist. Changing this forces a new Dev Center Project to be created.
func (o ProjectOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the Dev Center Project.
func (o ProjectOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Project) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type ProjectArrayOutput struct{ *pulumi.OutputState }

func (ProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Project)(nil)).Elem()
}

func (o ProjectArrayOutput) ToProjectArrayOutput() ProjectArrayOutput {
	return o
}

func (o ProjectArrayOutput) ToProjectArrayOutputWithContext(ctx context.Context) ProjectArrayOutput {
	return o
}

func (o ProjectArrayOutput) Index(i pulumi.IntInput) ProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Project {
		return vs[0].([]*Project)[vs[1].(int)]
	}).(ProjectOutput)
}

type ProjectMapOutput struct{ *pulumi.OutputState }

func (ProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Project)(nil)).Elem()
}

func (o ProjectMapOutput) ToProjectMapOutput() ProjectMapOutput {
	return o
}

func (o ProjectMapOutput) ToProjectMapOutputWithContext(ctx context.Context) ProjectMapOutput {
	return o
}

func (o ProjectMapOutput) MapIndex(k pulumi.StringInput) ProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Project {
		return vs[0].(map[string]*Project)[vs[1].(string)]
	}).(ProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectInput)(nil)).Elem(), &Project{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectArrayInput)(nil)).Elem(), ProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMapInput)(nil)).Elem(), ProjectMap{})
	pulumi.RegisterOutputType(ProjectOutput{})
	pulumi.RegisterOutputType(ProjectArrayOutput{})
	pulumi.RegisterOutputType(ProjectMapOutput{})
}
