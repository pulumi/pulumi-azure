// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devcenter

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Dev Center Dev Box Definition.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/devcenter"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resources"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleDevCenter, err := devcenter.NewDevCenter(ctx, "example", &devcenter.DevCenterArgs{
//				Name:              pulumi.String("example-dc"),
//				ResourceGroupName: example.Name,
//				Location:          example.Location,
//				Identity: &devcenter.DevCenterIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = devcenter.NewDevBoxDefinition(ctx, "example", &devcenter.DevBoxDefinitionArgs{
//				Name:        pulumi.String("example-dcet"),
//				Location:    example.Location,
//				DevCenterId: exampleDevCenter.ID(),
//				ImageReferenceId: exampleDevCenter.ID().ApplyT(func(id string) (string, error) {
//					return fmt.Sprintf("%v/galleries/default/images/microsoftvisualstudio_visualstudioplustools_vs-2022-ent-general-win10-m365-gen2", id), nil
//				}).(pulumi.StringOutput),
//				SkuName: pulumi.String("general_i_8c32gb256ssd_v2"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// An existing Dev Center Dev Box Definition can be imported into Terraform using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:devcenter/devBoxDefinition:DevBoxDefinition example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DevCenter/devCenters/dc1/devBoxDefinitions/et1
// ```
type DevBoxDefinition struct {
	pulumi.CustomResourceState

	// The ID of the associated Dev Center. Changing this forces a new resource to be created.
	DevCenterId pulumi.StringOutput `pulumi:"devCenterId"`
	// The ID of the image for the Dev Center Dev Box Definition.
	ImageReferenceId pulumi.StringOutput `pulumi:"imageReferenceId"`
	// The Azure Region where the Dev Center Dev Box Definition should exist. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name of this Dev Center Dev Box Definition. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the SKU for the Dev Center Dev Box Definition.
	SkuName pulumi.StringOutput `pulumi:"skuName"`
	// A mapping of tags which should be assigned to the Dev Center Dev Box Definition.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewDevBoxDefinition registers a new resource with the given unique name, arguments, and options.
func NewDevBoxDefinition(ctx *pulumi.Context,
	name string, args *DevBoxDefinitionArgs, opts ...pulumi.ResourceOption) (*DevBoxDefinition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DevCenterId == nil {
		return nil, errors.New("invalid value for required argument 'DevCenterId'")
	}
	if args.ImageReferenceId == nil {
		return nil, errors.New("invalid value for required argument 'ImageReferenceId'")
	}
	if args.SkuName == nil {
		return nil, errors.New("invalid value for required argument 'SkuName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DevBoxDefinition
	err := ctx.RegisterResource("azure:devcenter/devBoxDefinition:DevBoxDefinition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDevBoxDefinition gets an existing DevBoxDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevBoxDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DevBoxDefinitionState, opts ...pulumi.ResourceOption) (*DevBoxDefinition, error) {
	var resource DevBoxDefinition
	err := ctx.ReadResource("azure:devcenter/devBoxDefinition:DevBoxDefinition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DevBoxDefinition resources.
type devBoxDefinitionState struct {
	// The ID of the associated Dev Center. Changing this forces a new resource to be created.
	DevCenterId *string `pulumi:"devCenterId"`
	// The ID of the image for the Dev Center Dev Box Definition.
	ImageReferenceId *string `pulumi:"imageReferenceId"`
	// The Azure Region where the Dev Center Dev Box Definition should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of this Dev Center Dev Box Definition. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the SKU for the Dev Center Dev Box Definition.
	SkuName *string `pulumi:"skuName"`
	// A mapping of tags which should be assigned to the Dev Center Dev Box Definition.
	Tags map[string]string `pulumi:"tags"`
}

type DevBoxDefinitionState struct {
	// The ID of the associated Dev Center. Changing this forces a new resource to be created.
	DevCenterId pulumi.StringPtrInput
	// The ID of the image for the Dev Center Dev Box Definition.
	ImageReferenceId pulumi.StringPtrInput
	// The Azure Region where the Dev Center Dev Box Definition should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of this Dev Center Dev Box Definition. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the SKU for the Dev Center Dev Box Definition.
	SkuName pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Dev Center Dev Box Definition.
	Tags pulumi.StringMapInput
}

func (DevBoxDefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*devBoxDefinitionState)(nil)).Elem()
}

type devBoxDefinitionArgs struct {
	// The ID of the associated Dev Center. Changing this forces a new resource to be created.
	DevCenterId string `pulumi:"devCenterId"`
	// The ID of the image for the Dev Center Dev Box Definition.
	ImageReferenceId string `pulumi:"imageReferenceId"`
	// The Azure Region where the Dev Center Dev Box Definition should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of this Dev Center Dev Box Definition. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the SKU for the Dev Center Dev Box Definition.
	SkuName string `pulumi:"skuName"`
	// A mapping of tags which should be assigned to the Dev Center Dev Box Definition.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a DevBoxDefinition resource.
type DevBoxDefinitionArgs struct {
	// The ID of the associated Dev Center. Changing this forces a new resource to be created.
	DevCenterId pulumi.StringInput
	// The ID of the image for the Dev Center Dev Box Definition.
	ImageReferenceId pulumi.StringInput
	// The Azure Region where the Dev Center Dev Box Definition should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of this Dev Center Dev Box Definition. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the SKU for the Dev Center Dev Box Definition.
	SkuName pulumi.StringInput
	// A mapping of tags which should be assigned to the Dev Center Dev Box Definition.
	Tags pulumi.StringMapInput
}

func (DevBoxDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*devBoxDefinitionArgs)(nil)).Elem()
}

type DevBoxDefinitionInput interface {
	pulumi.Input

	ToDevBoxDefinitionOutput() DevBoxDefinitionOutput
	ToDevBoxDefinitionOutputWithContext(ctx context.Context) DevBoxDefinitionOutput
}

func (*DevBoxDefinition) ElementType() reflect.Type {
	return reflect.TypeOf((**DevBoxDefinition)(nil)).Elem()
}

func (i *DevBoxDefinition) ToDevBoxDefinitionOutput() DevBoxDefinitionOutput {
	return i.ToDevBoxDefinitionOutputWithContext(context.Background())
}

func (i *DevBoxDefinition) ToDevBoxDefinitionOutputWithContext(ctx context.Context) DevBoxDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevBoxDefinitionOutput)
}

// DevBoxDefinitionArrayInput is an input type that accepts DevBoxDefinitionArray and DevBoxDefinitionArrayOutput values.
// You can construct a concrete instance of `DevBoxDefinitionArrayInput` via:
//
//	DevBoxDefinitionArray{ DevBoxDefinitionArgs{...} }
type DevBoxDefinitionArrayInput interface {
	pulumi.Input

	ToDevBoxDefinitionArrayOutput() DevBoxDefinitionArrayOutput
	ToDevBoxDefinitionArrayOutputWithContext(context.Context) DevBoxDefinitionArrayOutput
}

type DevBoxDefinitionArray []DevBoxDefinitionInput

func (DevBoxDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DevBoxDefinition)(nil)).Elem()
}

func (i DevBoxDefinitionArray) ToDevBoxDefinitionArrayOutput() DevBoxDefinitionArrayOutput {
	return i.ToDevBoxDefinitionArrayOutputWithContext(context.Background())
}

func (i DevBoxDefinitionArray) ToDevBoxDefinitionArrayOutputWithContext(ctx context.Context) DevBoxDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevBoxDefinitionArrayOutput)
}

// DevBoxDefinitionMapInput is an input type that accepts DevBoxDefinitionMap and DevBoxDefinitionMapOutput values.
// You can construct a concrete instance of `DevBoxDefinitionMapInput` via:
//
//	DevBoxDefinitionMap{ "key": DevBoxDefinitionArgs{...} }
type DevBoxDefinitionMapInput interface {
	pulumi.Input

	ToDevBoxDefinitionMapOutput() DevBoxDefinitionMapOutput
	ToDevBoxDefinitionMapOutputWithContext(context.Context) DevBoxDefinitionMapOutput
}

type DevBoxDefinitionMap map[string]DevBoxDefinitionInput

func (DevBoxDefinitionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DevBoxDefinition)(nil)).Elem()
}

func (i DevBoxDefinitionMap) ToDevBoxDefinitionMapOutput() DevBoxDefinitionMapOutput {
	return i.ToDevBoxDefinitionMapOutputWithContext(context.Background())
}

func (i DevBoxDefinitionMap) ToDevBoxDefinitionMapOutputWithContext(ctx context.Context) DevBoxDefinitionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevBoxDefinitionMapOutput)
}

type DevBoxDefinitionOutput struct{ *pulumi.OutputState }

func (DevBoxDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DevBoxDefinition)(nil)).Elem()
}

func (o DevBoxDefinitionOutput) ToDevBoxDefinitionOutput() DevBoxDefinitionOutput {
	return o
}

func (o DevBoxDefinitionOutput) ToDevBoxDefinitionOutputWithContext(ctx context.Context) DevBoxDefinitionOutput {
	return o
}

// The ID of the associated Dev Center. Changing this forces a new resource to be created.
func (o DevBoxDefinitionOutput) DevCenterId() pulumi.StringOutput {
	return o.ApplyT(func(v *DevBoxDefinition) pulumi.StringOutput { return v.DevCenterId }).(pulumi.StringOutput)
}

// The ID of the image for the Dev Center Dev Box Definition.
func (o DevBoxDefinitionOutput) ImageReferenceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DevBoxDefinition) pulumi.StringOutput { return v.ImageReferenceId }).(pulumi.StringOutput)
}

// The Azure Region where the Dev Center Dev Box Definition should exist. Changing this forces a new resource to be created.
func (o DevBoxDefinitionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DevBoxDefinition) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name of this Dev Center Dev Box Definition. Changing this forces a new resource to be created.
func (o DevBoxDefinitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DevBoxDefinition) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the SKU for the Dev Center Dev Box Definition.
func (o DevBoxDefinitionOutput) SkuName() pulumi.StringOutput {
	return o.ApplyT(func(v *DevBoxDefinition) pulumi.StringOutput { return v.SkuName }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the Dev Center Dev Box Definition.
func (o DevBoxDefinitionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DevBoxDefinition) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type DevBoxDefinitionArrayOutput struct{ *pulumi.OutputState }

func (DevBoxDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DevBoxDefinition)(nil)).Elem()
}

func (o DevBoxDefinitionArrayOutput) ToDevBoxDefinitionArrayOutput() DevBoxDefinitionArrayOutput {
	return o
}

func (o DevBoxDefinitionArrayOutput) ToDevBoxDefinitionArrayOutputWithContext(ctx context.Context) DevBoxDefinitionArrayOutput {
	return o
}

func (o DevBoxDefinitionArrayOutput) Index(i pulumi.IntInput) DevBoxDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DevBoxDefinition {
		return vs[0].([]*DevBoxDefinition)[vs[1].(int)]
	}).(DevBoxDefinitionOutput)
}

type DevBoxDefinitionMapOutput struct{ *pulumi.OutputState }

func (DevBoxDefinitionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DevBoxDefinition)(nil)).Elem()
}

func (o DevBoxDefinitionMapOutput) ToDevBoxDefinitionMapOutput() DevBoxDefinitionMapOutput {
	return o
}

func (o DevBoxDefinitionMapOutput) ToDevBoxDefinitionMapOutputWithContext(ctx context.Context) DevBoxDefinitionMapOutput {
	return o
}

func (o DevBoxDefinitionMapOutput) MapIndex(k pulumi.StringInput) DevBoxDefinitionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DevBoxDefinition {
		return vs[0].(map[string]*DevBoxDefinition)[vs[1].(string)]
	}).(DevBoxDefinitionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DevBoxDefinitionInput)(nil)).Elem(), &DevBoxDefinition{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevBoxDefinitionArrayInput)(nil)).Elem(), DevBoxDefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevBoxDefinitionMapInput)(nil)).Elem(), DevBoxDefinitionMap{})
	pulumi.RegisterOutputType(DevBoxDefinitionOutput{})
	pulumi.RegisterOutputType(DevBoxDefinitionArrayOutput{})
	pulumi.RegisterOutputType(DevBoxDefinitionMapOutput{})
}
