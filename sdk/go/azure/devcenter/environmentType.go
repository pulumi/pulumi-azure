// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devcenter

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Dev Center Environment Type.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/devcenter"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resources"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleDevCenter, err := devcenter.NewDevCenter(ctx, "example", &devcenter.DevCenterArgs{
//				Name:              pulumi.String("example-dc"),
//				ResourceGroupName: example.Name,
//				Location:          example.Location,
//				Identity: &devcenter.DevCenterIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = devcenter.NewEnvironmentType(ctx, "example", &devcenter.EnvironmentTypeArgs{
//				Name:        pulumi.String("example-dcet"),
//				DevCenterId: exampleDevCenter.ID(),
//				Tags: pulumi.StringMap{
//					"Env": pulumi.String("Test"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// An existing Dev Center Environment Type can be imported into Pulumi using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:devcenter/environmentType:EnvironmentType example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DevCenter/devCenters/dc1/environmentTypes/et1
// ```
type EnvironmentType struct {
	pulumi.CustomResourceState

	// The ID of the associated Dev Center. Changing this forces a new resource to be created.
	DevCenterId pulumi.StringOutput `pulumi:"devCenterId"`
	// Specifies the name of this Dev Center Environment Type. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A mapping of tags which should be assigned to the Dev Center Environment Type.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewEnvironmentType registers a new resource with the given unique name, arguments, and options.
func NewEnvironmentType(ctx *pulumi.Context,
	name string, args *EnvironmentTypeArgs, opts ...pulumi.ResourceOption) (*EnvironmentType, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DevCenterId == nil {
		return nil, errors.New("invalid value for required argument 'DevCenterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EnvironmentType
	err := ctx.RegisterResource("azure:devcenter/environmentType:EnvironmentType", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvironmentType gets an existing EnvironmentType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvironmentType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvironmentTypeState, opts ...pulumi.ResourceOption) (*EnvironmentType, error) {
	var resource EnvironmentType
	err := ctx.ReadResource("azure:devcenter/environmentType:EnvironmentType", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnvironmentType resources.
type environmentTypeState struct {
	// The ID of the associated Dev Center. Changing this forces a new resource to be created.
	DevCenterId *string `pulumi:"devCenterId"`
	// Specifies the name of this Dev Center Environment Type. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A mapping of tags which should be assigned to the Dev Center Environment Type.
	Tags map[string]string `pulumi:"tags"`
}

type EnvironmentTypeState struct {
	// The ID of the associated Dev Center. Changing this forces a new resource to be created.
	DevCenterId pulumi.StringPtrInput
	// Specifies the name of this Dev Center Environment Type. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Dev Center Environment Type.
	Tags pulumi.StringMapInput
}

func (EnvironmentTypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentTypeState)(nil)).Elem()
}

type environmentTypeArgs struct {
	// The ID of the associated Dev Center. Changing this forces a new resource to be created.
	DevCenterId string `pulumi:"devCenterId"`
	// Specifies the name of this Dev Center Environment Type. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A mapping of tags which should be assigned to the Dev Center Environment Type.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a EnvironmentType resource.
type EnvironmentTypeArgs struct {
	// The ID of the associated Dev Center. Changing this forces a new resource to be created.
	DevCenterId pulumi.StringInput
	// Specifies the name of this Dev Center Environment Type. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Dev Center Environment Type.
	Tags pulumi.StringMapInput
}

func (EnvironmentTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentTypeArgs)(nil)).Elem()
}

type EnvironmentTypeInput interface {
	pulumi.Input

	ToEnvironmentTypeOutput() EnvironmentTypeOutput
	ToEnvironmentTypeOutputWithContext(ctx context.Context) EnvironmentTypeOutput
}

func (*EnvironmentType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentType)(nil)).Elem()
}

func (i *EnvironmentType) ToEnvironmentTypeOutput() EnvironmentTypeOutput {
	return i.ToEnvironmentTypeOutputWithContext(context.Background())
}

func (i *EnvironmentType) ToEnvironmentTypeOutputWithContext(ctx context.Context) EnvironmentTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentTypeOutput)
}

// EnvironmentTypeArrayInput is an input type that accepts EnvironmentTypeArray and EnvironmentTypeArrayOutput values.
// You can construct a concrete instance of `EnvironmentTypeArrayInput` via:
//
//	EnvironmentTypeArray{ EnvironmentTypeArgs{...} }
type EnvironmentTypeArrayInput interface {
	pulumi.Input

	ToEnvironmentTypeArrayOutput() EnvironmentTypeArrayOutput
	ToEnvironmentTypeArrayOutputWithContext(context.Context) EnvironmentTypeArrayOutput
}

type EnvironmentTypeArray []EnvironmentTypeInput

func (EnvironmentTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnvironmentType)(nil)).Elem()
}

func (i EnvironmentTypeArray) ToEnvironmentTypeArrayOutput() EnvironmentTypeArrayOutput {
	return i.ToEnvironmentTypeArrayOutputWithContext(context.Background())
}

func (i EnvironmentTypeArray) ToEnvironmentTypeArrayOutputWithContext(ctx context.Context) EnvironmentTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentTypeArrayOutput)
}

// EnvironmentTypeMapInput is an input type that accepts EnvironmentTypeMap and EnvironmentTypeMapOutput values.
// You can construct a concrete instance of `EnvironmentTypeMapInput` via:
//
//	EnvironmentTypeMap{ "key": EnvironmentTypeArgs{...} }
type EnvironmentTypeMapInput interface {
	pulumi.Input

	ToEnvironmentTypeMapOutput() EnvironmentTypeMapOutput
	ToEnvironmentTypeMapOutputWithContext(context.Context) EnvironmentTypeMapOutput
}

type EnvironmentTypeMap map[string]EnvironmentTypeInput

func (EnvironmentTypeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnvironmentType)(nil)).Elem()
}

func (i EnvironmentTypeMap) ToEnvironmentTypeMapOutput() EnvironmentTypeMapOutput {
	return i.ToEnvironmentTypeMapOutputWithContext(context.Background())
}

func (i EnvironmentTypeMap) ToEnvironmentTypeMapOutputWithContext(ctx context.Context) EnvironmentTypeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentTypeMapOutput)
}

type EnvironmentTypeOutput struct{ *pulumi.OutputState }

func (EnvironmentTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentType)(nil)).Elem()
}

func (o EnvironmentTypeOutput) ToEnvironmentTypeOutput() EnvironmentTypeOutput {
	return o
}

func (o EnvironmentTypeOutput) ToEnvironmentTypeOutputWithContext(ctx context.Context) EnvironmentTypeOutput {
	return o
}

// The ID of the associated Dev Center. Changing this forces a new resource to be created.
func (o EnvironmentTypeOutput) DevCenterId() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentType) pulumi.StringOutput { return v.DevCenterId }).(pulumi.StringOutput)
}

// Specifies the name of this Dev Center Environment Type. Changing this forces a new resource to be created.
func (o EnvironmentTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentType) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the Dev Center Environment Type.
func (o EnvironmentTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EnvironmentType) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type EnvironmentTypeArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnvironmentType)(nil)).Elem()
}

func (o EnvironmentTypeArrayOutput) ToEnvironmentTypeArrayOutput() EnvironmentTypeArrayOutput {
	return o
}

func (o EnvironmentTypeArrayOutput) ToEnvironmentTypeArrayOutputWithContext(ctx context.Context) EnvironmentTypeArrayOutput {
	return o
}

func (o EnvironmentTypeArrayOutput) Index(i pulumi.IntInput) EnvironmentTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EnvironmentType {
		return vs[0].([]*EnvironmentType)[vs[1].(int)]
	}).(EnvironmentTypeOutput)
}

type EnvironmentTypeMapOutput struct{ *pulumi.OutputState }

func (EnvironmentTypeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnvironmentType)(nil)).Elem()
}

func (o EnvironmentTypeMapOutput) ToEnvironmentTypeMapOutput() EnvironmentTypeMapOutput {
	return o
}

func (o EnvironmentTypeMapOutput) ToEnvironmentTypeMapOutputWithContext(ctx context.Context) EnvironmentTypeMapOutput {
	return o
}

func (o EnvironmentTypeMapOutput) MapIndex(k pulumi.StringInput) EnvironmentTypeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EnvironmentType {
		return vs[0].(map[string]*EnvironmentType)[vs[1].(string)]
	}).(EnvironmentTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentTypeInput)(nil)).Elem(), &EnvironmentType{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentTypeArrayInput)(nil)).Elem(), EnvironmentTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentTypeMapInput)(nil)).Elem(), EnvironmentTypeMap{})
	pulumi.RegisterOutputType(EnvironmentTypeOutput{})
	pulumi.RegisterOutputType(EnvironmentTypeArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentTypeMapOutput{})
}
