// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devcenter

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type CatalogCatalogAdogit struct {
	// The Git branch of the Dev Center Catalog.
	Branch string `pulumi:"branch"`
	// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
	KeyVaultKeyUrl string `pulumi:"keyVaultKeyUrl"`
	// The folder where the catalog items can be found inside the repository.
	Path string `pulumi:"path"`
	// The Git URI of the Dev Center Catalog.
	Uri string `pulumi:"uri"`
}

// CatalogCatalogAdogitInput is an input type that accepts CatalogCatalogAdogitArgs and CatalogCatalogAdogitOutput values.
// You can construct a concrete instance of `CatalogCatalogAdogitInput` via:
//
//	CatalogCatalogAdogitArgs{...}
type CatalogCatalogAdogitInput interface {
	pulumi.Input

	ToCatalogCatalogAdogitOutput() CatalogCatalogAdogitOutput
	ToCatalogCatalogAdogitOutputWithContext(context.Context) CatalogCatalogAdogitOutput
}

type CatalogCatalogAdogitArgs struct {
	// The Git branch of the Dev Center Catalog.
	Branch pulumi.StringInput `pulumi:"branch"`
	// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
	KeyVaultKeyUrl pulumi.StringInput `pulumi:"keyVaultKeyUrl"`
	// The folder where the catalog items can be found inside the repository.
	Path pulumi.StringInput `pulumi:"path"`
	// The Git URI of the Dev Center Catalog.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (CatalogCatalogAdogitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogCatalogAdogit)(nil)).Elem()
}

func (i CatalogCatalogAdogitArgs) ToCatalogCatalogAdogitOutput() CatalogCatalogAdogitOutput {
	return i.ToCatalogCatalogAdogitOutputWithContext(context.Background())
}

func (i CatalogCatalogAdogitArgs) ToCatalogCatalogAdogitOutputWithContext(ctx context.Context) CatalogCatalogAdogitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogCatalogAdogitOutput)
}

func (i CatalogCatalogAdogitArgs) ToCatalogCatalogAdogitPtrOutput() CatalogCatalogAdogitPtrOutput {
	return i.ToCatalogCatalogAdogitPtrOutputWithContext(context.Background())
}

func (i CatalogCatalogAdogitArgs) ToCatalogCatalogAdogitPtrOutputWithContext(ctx context.Context) CatalogCatalogAdogitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogCatalogAdogitOutput).ToCatalogCatalogAdogitPtrOutputWithContext(ctx)
}

// CatalogCatalogAdogitPtrInput is an input type that accepts CatalogCatalogAdogitArgs, CatalogCatalogAdogitPtr and CatalogCatalogAdogitPtrOutput values.
// You can construct a concrete instance of `CatalogCatalogAdogitPtrInput` via:
//
//	        CatalogCatalogAdogitArgs{...}
//
//	or:
//
//	        nil
type CatalogCatalogAdogitPtrInput interface {
	pulumi.Input

	ToCatalogCatalogAdogitPtrOutput() CatalogCatalogAdogitPtrOutput
	ToCatalogCatalogAdogitPtrOutputWithContext(context.Context) CatalogCatalogAdogitPtrOutput
}

type catalogCatalogAdogitPtrType CatalogCatalogAdogitArgs

func CatalogCatalogAdogitPtr(v *CatalogCatalogAdogitArgs) CatalogCatalogAdogitPtrInput {
	return (*catalogCatalogAdogitPtrType)(v)
}

func (*catalogCatalogAdogitPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogCatalogAdogit)(nil)).Elem()
}

func (i *catalogCatalogAdogitPtrType) ToCatalogCatalogAdogitPtrOutput() CatalogCatalogAdogitPtrOutput {
	return i.ToCatalogCatalogAdogitPtrOutputWithContext(context.Background())
}

func (i *catalogCatalogAdogitPtrType) ToCatalogCatalogAdogitPtrOutputWithContext(ctx context.Context) CatalogCatalogAdogitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogCatalogAdogitPtrOutput)
}

type CatalogCatalogAdogitOutput struct{ *pulumi.OutputState }

func (CatalogCatalogAdogitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogCatalogAdogit)(nil)).Elem()
}

func (o CatalogCatalogAdogitOutput) ToCatalogCatalogAdogitOutput() CatalogCatalogAdogitOutput {
	return o
}

func (o CatalogCatalogAdogitOutput) ToCatalogCatalogAdogitOutputWithContext(ctx context.Context) CatalogCatalogAdogitOutput {
	return o
}

func (o CatalogCatalogAdogitOutput) ToCatalogCatalogAdogitPtrOutput() CatalogCatalogAdogitPtrOutput {
	return o.ToCatalogCatalogAdogitPtrOutputWithContext(context.Background())
}

func (o CatalogCatalogAdogitOutput) ToCatalogCatalogAdogitPtrOutputWithContext(ctx context.Context) CatalogCatalogAdogitPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CatalogCatalogAdogit) *CatalogCatalogAdogit {
		return &v
	}).(CatalogCatalogAdogitPtrOutput)
}

// The Git branch of the Dev Center Catalog.
func (o CatalogCatalogAdogitOutput) Branch() pulumi.StringOutput {
	return o.ApplyT(func(v CatalogCatalogAdogit) string { return v.Branch }).(pulumi.StringOutput)
}

// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
func (o CatalogCatalogAdogitOutput) KeyVaultKeyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v CatalogCatalogAdogit) string { return v.KeyVaultKeyUrl }).(pulumi.StringOutput)
}

// The folder where the catalog items can be found inside the repository.
func (o CatalogCatalogAdogitOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v CatalogCatalogAdogit) string { return v.Path }).(pulumi.StringOutput)
}

// The Git URI of the Dev Center Catalog.
func (o CatalogCatalogAdogitOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v CatalogCatalogAdogit) string { return v.Uri }).(pulumi.StringOutput)
}

type CatalogCatalogAdogitPtrOutput struct{ *pulumi.OutputState }

func (CatalogCatalogAdogitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogCatalogAdogit)(nil)).Elem()
}

func (o CatalogCatalogAdogitPtrOutput) ToCatalogCatalogAdogitPtrOutput() CatalogCatalogAdogitPtrOutput {
	return o
}

func (o CatalogCatalogAdogitPtrOutput) ToCatalogCatalogAdogitPtrOutputWithContext(ctx context.Context) CatalogCatalogAdogitPtrOutput {
	return o
}

func (o CatalogCatalogAdogitPtrOutput) Elem() CatalogCatalogAdogitOutput {
	return o.ApplyT(func(v *CatalogCatalogAdogit) CatalogCatalogAdogit {
		if v != nil {
			return *v
		}
		var ret CatalogCatalogAdogit
		return ret
	}).(CatalogCatalogAdogitOutput)
}

// The Git branch of the Dev Center Catalog.
func (o CatalogCatalogAdogitPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogCatalogAdogit) *string {
		if v == nil {
			return nil
		}
		return &v.Branch
	}).(pulumi.StringPtrOutput)
}

// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
func (o CatalogCatalogAdogitPtrOutput) KeyVaultKeyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogCatalogAdogit) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVaultKeyUrl
	}).(pulumi.StringPtrOutput)
}

// The folder where the catalog items can be found inside the repository.
func (o CatalogCatalogAdogitPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogCatalogAdogit) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// The Git URI of the Dev Center Catalog.
func (o CatalogCatalogAdogitPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogCatalogAdogit) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type CatalogCatalogGithub struct {
	// The Git branch of the Dev Center Catalog.
	Branch string `pulumi:"branch"`
	// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
	KeyVaultKeyUrl string `pulumi:"keyVaultKeyUrl"`
	// The folder where the catalog items can be found inside the repository.
	Path string `pulumi:"path"`
	// The Git URI of the Dev Center Catalog.
	Uri string `pulumi:"uri"`
}

// CatalogCatalogGithubInput is an input type that accepts CatalogCatalogGithubArgs and CatalogCatalogGithubOutput values.
// You can construct a concrete instance of `CatalogCatalogGithubInput` via:
//
//	CatalogCatalogGithubArgs{...}
type CatalogCatalogGithubInput interface {
	pulumi.Input

	ToCatalogCatalogGithubOutput() CatalogCatalogGithubOutput
	ToCatalogCatalogGithubOutputWithContext(context.Context) CatalogCatalogGithubOutput
}

type CatalogCatalogGithubArgs struct {
	// The Git branch of the Dev Center Catalog.
	Branch pulumi.StringInput `pulumi:"branch"`
	// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
	KeyVaultKeyUrl pulumi.StringInput `pulumi:"keyVaultKeyUrl"`
	// The folder where the catalog items can be found inside the repository.
	Path pulumi.StringInput `pulumi:"path"`
	// The Git URI of the Dev Center Catalog.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (CatalogCatalogGithubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogCatalogGithub)(nil)).Elem()
}

func (i CatalogCatalogGithubArgs) ToCatalogCatalogGithubOutput() CatalogCatalogGithubOutput {
	return i.ToCatalogCatalogGithubOutputWithContext(context.Background())
}

func (i CatalogCatalogGithubArgs) ToCatalogCatalogGithubOutputWithContext(ctx context.Context) CatalogCatalogGithubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogCatalogGithubOutput)
}

func (i CatalogCatalogGithubArgs) ToCatalogCatalogGithubPtrOutput() CatalogCatalogGithubPtrOutput {
	return i.ToCatalogCatalogGithubPtrOutputWithContext(context.Background())
}

func (i CatalogCatalogGithubArgs) ToCatalogCatalogGithubPtrOutputWithContext(ctx context.Context) CatalogCatalogGithubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogCatalogGithubOutput).ToCatalogCatalogGithubPtrOutputWithContext(ctx)
}

// CatalogCatalogGithubPtrInput is an input type that accepts CatalogCatalogGithubArgs, CatalogCatalogGithubPtr and CatalogCatalogGithubPtrOutput values.
// You can construct a concrete instance of `CatalogCatalogGithubPtrInput` via:
//
//	        CatalogCatalogGithubArgs{...}
//
//	or:
//
//	        nil
type CatalogCatalogGithubPtrInput interface {
	pulumi.Input

	ToCatalogCatalogGithubPtrOutput() CatalogCatalogGithubPtrOutput
	ToCatalogCatalogGithubPtrOutputWithContext(context.Context) CatalogCatalogGithubPtrOutput
}

type catalogCatalogGithubPtrType CatalogCatalogGithubArgs

func CatalogCatalogGithubPtr(v *CatalogCatalogGithubArgs) CatalogCatalogGithubPtrInput {
	return (*catalogCatalogGithubPtrType)(v)
}

func (*catalogCatalogGithubPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogCatalogGithub)(nil)).Elem()
}

func (i *catalogCatalogGithubPtrType) ToCatalogCatalogGithubPtrOutput() CatalogCatalogGithubPtrOutput {
	return i.ToCatalogCatalogGithubPtrOutputWithContext(context.Background())
}

func (i *catalogCatalogGithubPtrType) ToCatalogCatalogGithubPtrOutputWithContext(ctx context.Context) CatalogCatalogGithubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogCatalogGithubPtrOutput)
}

type CatalogCatalogGithubOutput struct{ *pulumi.OutputState }

func (CatalogCatalogGithubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogCatalogGithub)(nil)).Elem()
}

func (o CatalogCatalogGithubOutput) ToCatalogCatalogGithubOutput() CatalogCatalogGithubOutput {
	return o
}

func (o CatalogCatalogGithubOutput) ToCatalogCatalogGithubOutputWithContext(ctx context.Context) CatalogCatalogGithubOutput {
	return o
}

func (o CatalogCatalogGithubOutput) ToCatalogCatalogGithubPtrOutput() CatalogCatalogGithubPtrOutput {
	return o.ToCatalogCatalogGithubPtrOutputWithContext(context.Background())
}

func (o CatalogCatalogGithubOutput) ToCatalogCatalogGithubPtrOutputWithContext(ctx context.Context) CatalogCatalogGithubPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CatalogCatalogGithub) *CatalogCatalogGithub {
		return &v
	}).(CatalogCatalogGithubPtrOutput)
}

// The Git branch of the Dev Center Catalog.
func (o CatalogCatalogGithubOutput) Branch() pulumi.StringOutput {
	return o.ApplyT(func(v CatalogCatalogGithub) string { return v.Branch }).(pulumi.StringOutput)
}

// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
func (o CatalogCatalogGithubOutput) KeyVaultKeyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v CatalogCatalogGithub) string { return v.KeyVaultKeyUrl }).(pulumi.StringOutput)
}

// The folder where the catalog items can be found inside the repository.
func (o CatalogCatalogGithubOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v CatalogCatalogGithub) string { return v.Path }).(pulumi.StringOutput)
}

// The Git URI of the Dev Center Catalog.
func (o CatalogCatalogGithubOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v CatalogCatalogGithub) string { return v.Uri }).(pulumi.StringOutput)
}

type CatalogCatalogGithubPtrOutput struct{ *pulumi.OutputState }

func (CatalogCatalogGithubPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogCatalogGithub)(nil)).Elem()
}

func (o CatalogCatalogGithubPtrOutput) ToCatalogCatalogGithubPtrOutput() CatalogCatalogGithubPtrOutput {
	return o
}

func (o CatalogCatalogGithubPtrOutput) ToCatalogCatalogGithubPtrOutputWithContext(ctx context.Context) CatalogCatalogGithubPtrOutput {
	return o
}

func (o CatalogCatalogGithubPtrOutput) Elem() CatalogCatalogGithubOutput {
	return o.ApplyT(func(v *CatalogCatalogGithub) CatalogCatalogGithub {
		if v != nil {
			return *v
		}
		var ret CatalogCatalogGithub
		return ret
	}).(CatalogCatalogGithubOutput)
}

// The Git branch of the Dev Center Catalog.
func (o CatalogCatalogGithubPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogCatalogGithub) *string {
		if v == nil {
			return nil
		}
		return &v.Branch
	}).(pulumi.StringPtrOutput)
}

// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
func (o CatalogCatalogGithubPtrOutput) KeyVaultKeyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogCatalogGithub) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVaultKeyUrl
	}).(pulumi.StringPtrOutput)
}

// The folder where the catalog items can be found inside the repository.
func (o CatalogCatalogGithubPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogCatalogGithub) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// The Git URI of the Dev Center Catalog.
func (o CatalogCatalogGithubPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogCatalogGithub) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type DevCenterIdentity struct {
	IdentityIds []string `pulumi:"identityIds"`
	PrincipalId *string  `pulumi:"principalId"`
	TenantId    *string  `pulumi:"tenantId"`
	Type        string   `pulumi:"type"`
}

// DevCenterIdentityInput is an input type that accepts DevCenterIdentityArgs and DevCenterIdentityOutput values.
// You can construct a concrete instance of `DevCenterIdentityInput` via:
//
//	DevCenterIdentityArgs{...}
type DevCenterIdentityInput interface {
	pulumi.Input

	ToDevCenterIdentityOutput() DevCenterIdentityOutput
	ToDevCenterIdentityOutputWithContext(context.Context) DevCenterIdentityOutput
}

type DevCenterIdentityArgs struct {
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	PrincipalId pulumi.StringPtrInput   `pulumi:"principalId"`
	TenantId    pulumi.StringPtrInput   `pulumi:"tenantId"`
	Type        pulumi.StringInput      `pulumi:"type"`
}

func (DevCenterIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DevCenterIdentity)(nil)).Elem()
}

func (i DevCenterIdentityArgs) ToDevCenterIdentityOutput() DevCenterIdentityOutput {
	return i.ToDevCenterIdentityOutputWithContext(context.Background())
}

func (i DevCenterIdentityArgs) ToDevCenterIdentityOutputWithContext(ctx context.Context) DevCenterIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevCenterIdentityOutput)
}

func (i DevCenterIdentityArgs) ToDevCenterIdentityPtrOutput() DevCenterIdentityPtrOutput {
	return i.ToDevCenterIdentityPtrOutputWithContext(context.Background())
}

func (i DevCenterIdentityArgs) ToDevCenterIdentityPtrOutputWithContext(ctx context.Context) DevCenterIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevCenterIdentityOutput).ToDevCenterIdentityPtrOutputWithContext(ctx)
}

// DevCenterIdentityPtrInput is an input type that accepts DevCenterIdentityArgs, DevCenterIdentityPtr and DevCenterIdentityPtrOutput values.
// You can construct a concrete instance of `DevCenterIdentityPtrInput` via:
//
//	        DevCenterIdentityArgs{...}
//
//	or:
//
//	        nil
type DevCenterIdentityPtrInput interface {
	pulumi.Input

	ToDevCenterIdentityPtrOutput() DevCenterIdentityPtrOutput
	ToDevCenterIdentityPtrOutputWithContext(context.Context) DevCenterIdentityPtrOutput
}

type devCenterIdentityPtrType DevCenterIdentityArgs

func DevCenterIdentityPtr(v *DevCenterIdentityArgs) DevCenterIdentityPtrInput {
	return (*devCenterIdentityPtrType)(v)
}

func (*devCenterIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DevCenterIdentity)(nil)).Elem()
}

func (i *devCenterIdentityPtrType) ToDevCenterIdentityPtrOutput() DevCenterIdentityPtrOutput {
	return i.ToDevCenterIdentityPtrOutputWithContext(context.Background())
}

func (i *devCenterIdentityPtrType) ToDevCenterIdentityPtrOutputWithContext(ctx context.Context) DevCenterIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevCenterIdentityPtrOutput)
}

type DevCenterIdentityOutput struct{ *pulumi.OutputState }

func (DevCenterIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DevCenterIdentity)(nil)).Elem()
}

func (o DevCenterIdentityOutput) ToDevCenterIdentityOutput() DevCenterIdentityOutput {
	return o
}

func (o DevCenterIdentityOutput) ToDevCenterIdentityOutputWithContext(ctx context.Context) DevCenterIdentityOutput {
	return o
}

func (o DevCenterIdentityOutput) ToDevCenterIdentityPtrOutput() DevCenterIdentityPtrOutput {
	return o.ToDevCenterIdentityPtrOutputWithContext(context.Background())
}

func (o DevCenterIdentityOutput) ToDevCenterIdentityPtrOutputWithContext(ctx context.Context) DevCenterIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DevCenterIdentity) *DevCenterIdentity {
		return &v
	}).(DevCenterIdentityPtrOutput)
}

func (o DevCenterIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DevCenterIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

func (o DevCenterIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DevCenterIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

func (o DevCenterIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DevCenterIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

func (o DevCenterIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DevCenterIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type DevCenterIdentityPtrOutput struct{ *pulumi.OutputState }

func (DevCenterIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DevCenterIdentity)(nil)).Elem()
}

func (o DevCenterIdentityPtrOutput) ToDevCenterIdentityPtrOutput() DevCenterIdentityPtrOutput {
	return o
}

func (o DevCenterIdentityPtrOutput) ToDevCenterIdentityPtrOutputWithContext(ctx context.Context) DevCenterIdentityPtrOutput {
	return o
}

func (o DevCenterIdentityPtrOutput) Elem() DevCenterIdentityOutput {
	return o.ApplyT(func(v *DevCenterIdentity) DevCenterIdentity {
		if v != nil {
			return *v
		}
		var ret DevCenterIdentity
		return ret
	}).(DevCenterIdentityOutput)
}

func (o DevCenterIdentityPtrOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DevCenterIdentity) []string {
		if v == nil {
			return nil
		}
		return v.IdentityIds
	}).(pulumi.StringArrayOutput)
}

func (o DevCenterIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevCenterIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

func (o DevCenterIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevCenterIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

func (o DevCenterIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevCenterIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type ProjectEnvironmentTypeIdentity struct {
	// The ID of the User Assigned Identity which should be assigned to this Dev Center Project Environment Type.
	//
	// > **Note:** `identityIds` is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
	IdentityIds []string `pulumi:"identityIds"`
	PrincipalId *string  `pulumi:"principalId"`
	TenantId    *string  `pulumi:"tenantId"`
	// The type of identity used for this Dev Center Project Environment Type. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned, UserAssigned`.
	Type string `pulumi:"type"`
}

// ProjectEnvironmentTypeIdentityInput is an input type that accepts ProjectEnvironmentTypeIdentityArgs and ProjectEnvironmentTypeIdentityOutput values.
// You can construct a concrete instance of `ProjectEnvironmentTypeIdentityInput` via:
//
//	ProjectEnvironmentTypeIdentityArgs{...}
type ProjectEnvironmentTypeIdentityInput interface {
	pulumi.Input

	ToProjectEnvironmentTypeIdentityOutput() ProjectEnvironmentTypeIdentityOutput
	ToProjectEnvironmentTypeIdentityOutputWithContext(context.Context) ProjectEnvironmentTypeIdentityOutput
}

type ProjectEnvironmentTypeIdentityArgs struct {
	// The ID of the User Assigned Identity which should be assigned to this Dev Center Project Environment Type.
	//
	// > **Note:** `identityIds` is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	PrincipalId pulumi.StringPtrInput   `pulumi:"principalId"`
	TenantId    pulumi.StringPtrInput   `pulumi:"tenantId"`
	// The type of identity used for this Dev Center Project Environment Type. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned, UserAssigned`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ProjectEnvironmentTypeIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectEnvironmentTypeIdentity)(nil)).Elem()
}

func (i ProjectEnvironmentTypeIdentityArgs) ToProjectEnvironmentTypeIdentityOutput() ProjectEnvironmentTypeIdentityOutput {
	return i.ToProjectEnvironmentTypeIdentityOutputWithContext(context.Background())
}

func (i ProjectEnvironmentTypeIdentityArgs) ToProjectEnvironmentTypeIdentityOutputWithContext(ctx context.Context) ProjectEnvironmentTypeIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentTypeIdentityOutput)
}

func (i ProjectEnvironmentTypeIdentityArgs) ToProjectEnvironmentTypeIdentityPtrOutput() ProjectEnvironmentTypeIdentityPtrOutput {
	return i.ToProjectEnvironmentTypeIdentityPtrOutputWithContext(context.Background())
}

func (i ProjectEnvironmentTypeIdentityArgs) ToProjectEnvironmentTypeIdentityPtrOutputWithContext(ctx context.Context) ProjectEnvironmentTypeIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentTypeIdentityOutput).ToProjectEnvironmentTypeIdentityPtrOutputWithContext(ctx)
}

// ProjectEnvironmentTypeIdentityPtrInput is an input type that accepts ProjectEnvironmentTypeIdentityArgs, ProjectEnvironmentTypeIdentityPtr and ProjectEnvironmentTypeIdentityPtrOutput values.
// You can construct a concrete instance of `ProjectEnvironmentTypeIdentityPtrInput` via:
//
//	        ProjectEnvironmentTypeIdentityArgs{...}
//
//	or:
//
//	        nil
type ProjectEnvironmentTypeIdentityPtrInput interface {
	pulumi.Input

	ToProjectEnvironmentTypeIdentityPtrOutput() ProjectEnvironmentTypeIdentityPtrOutput
	ToProjectEnvironmentTypeIdentityPtrOutputWithContext(context.Context) ProjectEnvironmentTypeIdentityPtrOutput
}

type projectEnvironmentTypeIdentityPtrType ProjectEnvironmentTypeIdentityArgs

func ProjectEnvironmentTypeIdentityPtr(v *ProjectEnvironmentTypeIdentityArgs) ProjectEnvironmentTypeIdentityPtrInput {
	return (*projectEnvironmentTypeIdentityPtrType)(v)
}

func (*projectEnvironmentTypeIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectEnvironmentTypeIdentity)(nil)).Elem()
}

func (i *projectEnvironmentTypeIdentityPtrType) ToProjectEnvironmentTypeIdentityPtrOutput() ProjectEnvironmentTypeIdentityPtrOutput {
	return i.ToProjectEnvironmentTypeIdentityPtrOutputWithContext(context.Background())
}

func (i *projectEnvironmentTypeIdentityPtrType) ToProjectEnvironmentTypeIdentityPtrOutputWithContext(ctx context.Context) ProjectEnvironmentTypeIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentTypeIdentityPtrOutput)
}

type ProjectEnvironmentTypeIdentityOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentTypeIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectEnvironmentTypeIdentity)(nil)).Elem()
}

func (o ProjectEnvironmentTypeIdentityOutput) ToProjectEnvironmentTypeIdentityOutput() ProjectEnvironmentTypeIdentityOutput {
	return o
}

func (o ProjectEnvironmentTypeIdentityOutput) ToProjectEnvironmentTypeIdentityOutputWithContext(ctx context.Context) ProjectEnvironmentTypeIdentityOutput {
	return o
}

func (o ProjectEnvironmentTypeIdentityOutput) ToProjectEnvironmentTypeIdentityPtrOutput() ProjectEnvironmentTypeIdentityPtrOutput {
	return o.ToProjectEnvironmentTypeIdentityPtrOutputWithContext(context.Background())
}

func (o ProjectEnvironmentTypeIdentityOutput) ToProjectEnvironmentTypeIdentityPtrOutputWithContext(ctx context.Context) ProjectEnvironmentTypeIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectEnvironmentTypeIdentity) *ProjectEnvironmentTypeIdentity {
		return &v
	}).(ProjectEnvironmentTypeIdentityPtrOutput)
}

// The ID of the User Assigned Identity which should be assigned to this Dev Center Project Environment Type.
//
// > **Note:** `identityIds` is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
func (o ProjectEnvironmentTypeIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectEnvironmentTypeIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

func (o ProjectEnvironmentTypeIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectEnvironmentTypeIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

func (o ProjectEnvironmentTypeIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectEnvironmentTypeIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The type of identity used for this Dev Center Project Environment Type. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned, UserAssigned`.
func (o ProjectEnvironmentTypeIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectEnvironmentTypeIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type ProjectEnvironmentTypeIdentityPtrOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentTypeIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectEnvironmentTypeIdentity)(nil)).Elem()
}

func (o ProjectEnvironmentTypeIdentityPtrOutput) ToProjectEnvironmentTypeIdentityPtrOutput() ProjectEnvironmentTypeIdentityPtrOutput {
	return o
}

func (o ProjectEnvironmentTypeIdentityPtrOutput) ToProjectEnvironmentTypeIdentityPtrOutputWithContext(ctx context.Context) ProjectEnvironmentTypeIdentityPtrOutput {
	return o
}

func (o ProjectEnvironmentTypeIdentityPtrOutput) Elem() ProjectEnvironmentTypeIdentityOutput {
	return o.ApplyT(func(v *ProjectEnvironmentTypeIdentity) ProjectEnvironmentTypeIdentity {
		if v != nil {
			return *v
		}
		var ret ProjectEnvironmentTypeIdentity
		return ret
	}).(ProjectEnvironmentTypeIdentityOutput)
}

// The ID of the User Assigned Identity which should be assigned to this Dev Center Project Environment Type.
//
// > **Note:** `identityIds` is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
func (o ProjectEnvironmentTypeIdentityPtrOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectEnvironmentTypeIdentity) []string {
		if v == nil {
			return nil
		}
		return v.IdentityIds
	}).(pulumi.StringArrayOutput)
}

func (o ProjectEnvironmentTypeIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectEnvironmentTypeIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

func (o ProjectEnvironmentTypeIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectEnvironmentTypeIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The type of identity used for this Dev Center Project Environment Type. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned, UserAssigned`.
func (o ProjectEnvironmentTypeIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectEnvironmentTypeIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type ProjectEnvironmentTypeUserRoleAssignment struct {
	// A list of roles to assign to the `userId`.
	Roles []string `pulumi:"roles"`
	// The user object ID that is assigned roles.
	UserId string `pulumi:"userId"`
}

// ProjectEnvironmentTypeUserRoleAssignmentInput is an input type that accepts ProjectEnvironmentTypeUserRoleAssignmentArgs and ProjectEnvironmentTypeUserRoleAssignmentOutput values.
// You can construct a concrete instance of `ProjectEnvironmentTypeUserRoleAssignmentInput` via:
//
//	ProjectEnvironmentTypeUserRoleAssignmentArgs{...}
type ProjectEnvironmentTypeUserRoleAssignmentInput interface {
	pulumi.Input

	ToProjectEnvironmentTypeUserRoleAssignmentOutput() ProjectEnvironmentTypeUserRoleAssignmentOutput
	ToProjectEnvironmentTypeUserRoleAssignmentOutputWithContext(context.Context) ProjectEnvironmentTypeUserRoleAssignmentOutput
}

type ProjectEnvironmentTypeUserRoleAssignmentArgs struct {
	// A list of roles to assign to the `userId`.
	Roles pulumi.StringArrayInput `pulumi:"roles"`
	// The user object ID that is assigned roles.
	UserId pulumi.StringInput `pulumi:"userId"`
}

func (ProjectEnvironmentTypeUserRoleAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectEnvironmentTypeUserRoleAssignment)(nil)).Elem()
}

func (i ProjectEnvironmentTypeUserRoleAssignmentArgs) ToProjectEnvironmentTypeUserRoleAssignmentOutput() ProjectEnvironmentTypeUserRoleAssignmentOutput {
	return i.ToProjectEnvironmentTypeUserRoleAssignmentOutputWithContext(context.Background())
}

func (i ProjectEnvironmentTypeUserRoleAssignmentArgs) ToProjectEnvironmentTypeUserRoleAssignmentOutputWithContext(ctx context.Context) ProjectEnvironmentTypeUserRoleAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentTypeUserRoleAssignmentOutput)
}

// ProjectEnvironmentTypeUserRoleAssignmentArrayInput is an input type that accepts ProjectEnvironmentTypeUserRoleAssignmentArray and ProjectEnvironmentTypeUserRoleAssignmentArrayOutput values.
// You can construct a concrete instance of `ProjectEnvironmentTypeUserRoleAssignmentArrayInput` via:
//
//	ProjectEnvironmentTypeUserRoleAssignmentArray{ ProjectEnvironmentTypeUserRoleAssignmentArgs{...} }
type ProjectEnvironmentTypeUserRoleAssignmentArrayInput interface {
	pulumi.Input

	ToProjectEnvironmentTypeUserRoleAssignmentArrayOutput() ProjectEnvironmentTypeUserRoleAssignmentArrayOutput
	ToProjectEnvironmentTypeUserRoleAssignmentArrayOutputWithContext(context.Context) ProjectEnvironmentTypeUserRoleAssignmentArrayOutput
}

type ProjectEnvironmentTypeUserRoleAssignmentArray []ProjectEnvironmentTypeUserRoleAssignmentInput

func (ProjectEnvironmentTypeUserRoleAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectEnvironmentTypeUserRoleAssignment)(nil)).Elem()
}

func (i ProjectEnvironmentTypeUserRoleAssignmentArray) ToProjectEnvironmentTypeUserRoleAssignmentArrayOutput() ProjectEnvironmentTypeUserRoleAssignmentArrayOutput {
	return i.ToProjectEnvironmentTypeUserRoleAssignmentArrayOutputWithContext(context.Background())
}

func (i ProjectEnvironmentTypeUserRoleAssignmentArray) ToProjectEnvironmentTypeUserRoleAssignmentArrayOutputWithContext(ctx context.Context) ProjectEnvironmentTypeUserRoleAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentTypeUserRoleAssignmentArrayOutput)
}

type ProjectEnvironmentTypeUserRoleAssignmentOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentTypeUserRoleAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectEnvironmentTypeUserRoleAssignment)(nil)).Elem()
}

func (o ProjectEnvironmentTypeUserRoleAssignmentOutput) ToProjectEnvironmentTypeUserRoleAssignmentOutput() ProjectEnvironmentTypeUserRoleAssignmentOutput {
	return o
}

func (o ProjectEnvironmentTypeUserRoleAssignmentOutput) ToProjectEnvironmentTypeUserRoleAssignmentOutputWithContext(ctx context.Context) ProjectEnvironmentTypeUserRoleAssignmentOutput {
	return o
}

// A list of roles to assign to the `userId`.
func (o ProjectEnvironmentTypeUserRoleAssignmentOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectEnvironmentTypeUserRoleAssignment) []string { return v.Roles }).(pulumi.StringArrayOutput)
}

// The user object ID that is assigned roles.
func (o ProjectEnvironmentTypeUserRoleAssignmentOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectEnvironmentTypeUserRoleAssignment) string { return v.UserId }).(pulumi.StringOutput)
}

type ProjectEnvironmentTypeUserRoleAssignmentArrayOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentTypeUserRoleAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectEnvironmentTypeUserRoleAssignment)(nil)).Elem()
}

func (o ProjectEnvironmentTypeUserRoleAssignmentArrayOutput) ToProjectEnvironmentTypeUserRoleAssignmentArrayOutput() ProjectEnvironmentTypeUserRoleAssignmentArrayOutput {
	return o
}

func (o ProjectEnvironmentTypeUserRoleAssignmentArrayOutput) ToProjectEnvironmentTypeUserRoleAssignmentArrayOutputWithContext(ctx context.Context) ProjectEnvironmentTypeUserRoleAssignmentArrayOutput {
	return o
}

func (o ProjectEnvironmentTypeUserRoleAssignmentArrayOutput) Index(i pulumi.IntInput) ProjectEnvironmentTypeUserRoleAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectEnvironmentTypeUserRoleAssignment {
		return vs[0].([]ProjectEnvironmentTypeUserRoleAssignment)[vs[1].(int)]
	}).(ProjectEnvironmentTypeUserRoleAssignmentOutput)
}

type ProjectIdentity struct {
	// The ID of the User Assigned Identity which should be assigned to this Dev Center Project.
	//
	// > **Note:** `identityIds` is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
	IdentityIds []string `pulumi:"identityIds"`
	// The Principal ID for the Service Principal associated with the Identity of this Dev Center Project.
	PrincipalId *string `pulumi:"principalId"`
	// The Tenant ID for the Service Principal associated with the Identity of this Dev Center Project.
	TenantId *string `pulumi:"tenantId"`
	// The type of identity used for this Dev Center Project. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned, UserAssigned`.
	Type string `pulumi:"type"`
}

// ProjectIdentityInput is an input type that accepts ProjectIdentityArgs and ProjectIdentityOutput values.
// You can construct a concrete instance of `ProjectIdentityInput` via:
//
//	ProjectIdentityArgs{...}
type ProjectIdentityInput interface {
	pulumi.Input

	ToProjectIdentityOutput() ProjectIdentityOutput
	ToProjectIdentityOutputWithContext(context.Context) ProjectIdentityOutput
}

type ProjectIdentityArgs struct {
	// The ID of the User Assigned Identity which should be assigned to this Dev Center Project.
	//
	// > **Note:** `identityIds` is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	// The Principal ID for the Service Principal associated with the Identity of this Dev Center Project.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The Tenant ID for the Service Principal associated with the Identity of this Dev Center Project.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// The type of identity used for this Dev Center Project. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned, UserAssigned`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ProjectIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectIdentity)(nil)).Elem()
}

func (i ProjectIdentityArgs) ToProjectIdentityOutput() ProjectIdentityOutput {
	return i.ToProjectIdentityOutputWithContext(context.Background())
}

func (i ProjectIdentityArgs) ToProjectIdentityOutputWithContext(ctx context.Context) ProjectIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIdentityOutput)
}

func (i ProjectIdentityArgs) ToProjectIdentityPtrOutput() ProjectIdentityPtrOutput {
	return i.ToProjectIdentityPtrOutputWithContext(context.Background())
}

func (i ProjectIdentityArgs) ToProjectIdentityPtrOutputWithContext(ctx context.Context) ProjectIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIdentityOutput).ToProjectIdentityPtrOutputWithContext(ctx)
}

// ProjectIdentityPtrInput is an input type that accepts ProjectIdentityArgs, ProjectIdentityPtr and ProjectIdentityPtrOutput values.
// You can construct a concrete instance of `ProjectIdentityPtrInput` via:
//
//	        ProjectIdentityArgs{...}
//
//	or:
//
//	        nil
type ProjectIdentityPtrInput interface {
	pulumi.Input

	ToProjectIdentityPtrOutput() ProjectIdentityPtrOutput
	ToProjectIdentityPtrOutputWithContext(context.Context) ProjectIdentityPtrOutput
}

type projectIdentityPtrType ProjectIdentityArgs

func ProjectIdentityPtr(v *ProjectIdentityArgs) ProjectIdentityPtrInput {
	return (*projectIdentityPtrType)(v)
}

func (*projectIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIdentity)(nil)).Elem()
}

func (i *projectIdentityPtrType) ToProjectIdentityPtrOutput() ProjectIdentityPtrOutput {
	return i.ToProjectIdentityPtrOutputWithContext(context.Background())
}

func (i *projectIdentityPtrType) ToProjectIdentityPtrOutputWithContext(ctx context.Context) ProjectIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIdentityPtrOutput)
}

type ProjectIdentityOutput struct{ *pulumi.OutputState }

func (ProjectIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectIdentity)(nil)).Elem()
}

func (o ProjectIdentityOutput) ToProjectIdentityOutput() ProjectIdentityOutput {
	return o
}

func (o ProjectIdentityOutput) ToProjectIdentityOutputWithContext(ctx context.Context) ProjectIdentityOutput {
	return o
}

func (o ProjectIdentityOutput) ToProjectIdentityPtrOutput() ProjectIdentityPtrOutput {
	return o.ToProjectIdentityPtrOutputWithContext(context.Background())
}

func (o ProjectIdentityOutput) ToProjectIdentityPtrOutputWithContext(ctx context.Context) ProjectIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectIdentity) *ProjectIdentity {
		return &v
	}).(ProjectIdentityPtrOutput)
}

// The ID of the User Assigned Identity which should be assigned to this Dev Center Project.
//
// > **Note:** `identityIds` is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
func (o ProjectIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

// The Principal ID for the Service Principal associated with the Identity of this Dev Center Project.
func (o ProjectIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The Tenant ID for the Service Principal associated with the Identity of this Dev Center Project.
func (o ProjectIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The type of identity used for this Dev Center Project. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned, UserAssigned`.
func (o ProjectIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type ProjectIdentityPtrOutput struct{ *pulumi.OutputState }

func (ProjectIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIdentity)(nil)).Elem()
}

func (o ProjectIdentityPtrOutput) ToProjectIdentityPtrOutput() ProjectIdentityPtrOutput {
	return o
}

func (o ProjectIdentityPtrOutput) ToProjectIdentityPtrOutputWithContext(ctx context.Context) ProjectIdentityPtrOutput {
	return o
}

func (o ProjectIdentityPtrOutput) Elem() ProjectIdentityOutput {
	return o.ApplyT(func(v *ProjectIdentity) ProjectIdentity {
		if v != nil {
			return *v
		}
		var ret ProjectIdentity
		return ret
	}).(ProjectIdentityOutput)
}

// The ID of the User Assigned Identity which should be assigned to this Dev Center Project.
//
// > **Note:** `identityIds` is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
func (o ProjectIdentityPtrOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectIdentity) []string {
		if v == nil {
			return nil
		}
		return v.IdentityIds
	}).(pulumi.StringArrayOutput)
}

// The Principal ID for the Service Principal associated with the Identity of this Dev Center Project.
func (o ProjectIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The Tenant ID for the Service Principal associated with the Identity of this Dev Center Project.
func (o ProjectIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The type of identity used for this Dev Center Project. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned, UserAssigned`.
func (o ProjectIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogCatalogAdogitInput)(nil)).Elem(), CatalogCatalogAdogitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogCatalogAdogitPtrInput)(nil)).Elem(), CatalogCatalogAdogitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogCatalogGithubInput)(nil)).Elem(), CatalogCatalogGithubArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogCatalogGithubPtrInput)(nil)).Elem(), CatalogCatalogGithubArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevCenterIdentityInput)(nil)).Elem(), DevCenterIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevCenterIdentityPtrInput)(nil)).Elem(), DevCenterIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectEnvironmentTypeIdentityInput)(nil)).Elem(), ProjectEnvironmentTypeIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectEnvironmentTypeIdentityPtrInput)(nil)).Elem(), ProjectEnvironmentTypeIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectEnvironmentTypeUserRoleAssignmentInput)(nil)).Elem(), ProjectEnvironmentTypeUserRoleAssignmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectEnvironmentTypeUserRoleAssignmentArrayInput)(nil)).Elem(), ProjectEnvironmentTypeUserRoleAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIdentityInput)(nil)).Elem(), ProjectIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIdentityPtrInput)(nil)).Elem(), ProjectIdentityArgs{})
	pulumi.RegisterOutputType(CatalogCatalogAdogitOutput{})
	pulumi.RegisterOutputType(CatalogCatalogAdogitPtrOutput{})
	pulumi.RegisterOutputType(CatalogCatalogGithubOutput{})
	pulumi.RegisterOutputType(CatalogCatalogGithubPtrOutput{})
	pulumi.RegisterOutputType(DevCenterIdentityOutput{})
	pulumi.RegisterOutputType(DevCenterIdentityPtrOutput{})
	pulumi.RegisterOutputType(ProjectEnvironmentTypeIdentityOutput{})
	pulumi.RegisterOutputType(ProjectEnvironmentTypeIdentityPtrOutput{})
	pulumi.RegisterOutputType(ProjectEnvironmentTypeUserRoleAssignmentOutput{})
	pulumi.RegisterOutputType(ProjectEnvironmentTypeUserRoleAssignmentArrayOutput{})
	pulumi.RegisterOutputType(ProjectIdentityOutput{})
	pulumi.RegisterOutputType(ProjectIdentityPtrOutput{})
}
