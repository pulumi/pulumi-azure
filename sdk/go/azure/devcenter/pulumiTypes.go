// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devcenter

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type CatalogCatalogAdogit struct {
	// The Git branch of the Dev Center Catalog.
	Branch string `pulumi:"branch"`
	// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
	KeyVaultKeyUrl string `pulumi:"keyVaultKeyUrl"`
	// The folder where the catalog items can be found inside the repository.
	Path string `pulumi:"path"`
	// The Git URI of the Dev Center Catalog.
	Uri string `pulumi:"uri"`
}

// CatalogCatalogAdogitInput is an input type that accepts CatalogCatalogAdogitArgs and CatalogCatalogAdogitOutput values.
// You can construct a concrete instance of `CatalogCatalogAdogitInput` via:
//
//	CatalogCatalogAdogitArgs{...}
type CatalogCatalogAdogitInput interface {
	pulumi.Input

	ToCatalogCatalogAdogitOutput() CatalogCatalogAdogitOutput
	ToCatalogCatalogAdogitOutputWithContext(context.Context) CatalogCatalogAdogitOutput
}

type CatalogCatalogAdogitArgs struct {
	// The Git branch of the Dev Center Catalog.
	Branch pulumi.StringInput `pulumi:"branch"`
	// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
	KeyVaultKeyUrl pulumi.StringInput `pulumi:"keyVaultKeyUrl"`
	// The folder where the catalog items can be found inside the repository.
	Path pulumi.StringInput `pulumi:"path"`
	// The Git URI of the Dev Center Catalog.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (CatalogCatalogAdogitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogCatalogAdogit)(nil)).Elem()
}

func (i CatalogCatalogAdogitArgs) ToCatalogCatalogAdogitOutput() CatalogCatalogAdogitOutput {
	return i.ToCatalogCatalogAdogitOutputWithContext(context.Background())
}

func (i CatalogCatalogAdogitArgs) ToCatalogCatalogAdogitOutputWithContext(ctx context.Context) CatalogCatalogAdogitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogCatalogAdogitOutput)
}

func (i CatalogCatalogAdogitArgs) ToCatalogCatalogAdogitPtrOutput() CatalogCatalogAdogitPtrOutput {
	return i.ToCatalogCatalogAdogitPtrOutputWithContext(context.Background())
}

func (i CatalogCatalogAdogitArgs) ToCatalogCatalogAdogitPtrOutputWithContext(ctx context.Context) CatalogCatalogAdogitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogCatalogAdogitOutput).ToCatalogCatalogAdogitPtrOutputWithContext(ctx)
}

// CatalogCatalogAdogitPtrInput is an input type that accepts CatalogCatalogAdogitArgs, CatalogCatalogAdogitPtr and CatalogCatalogAdogitPtrOutput values.
// You can construct a concrete instance of `CatalogCatalogAdogitPtrInput` via:
//
//	        CatalogCatalogAdogitArgs{...}
//
//	or:
//
//	        nil
type CatalogCatalogAdogitPtrInput interface {
	pulumi.Input

	ToCatalogCatalogAdogitPtrOutput() CatalogCatalogAdogitPtrOutput
	ToCatalogCatalogAdogitPtrOutputWithContext(context.Context) CatalogCatalogAdogitPtrOutput
}

type catalogCatalogAdogitPtrType CatalogCatalogAdogitArgs

func CatalogCatalogAdogitPtr(v *CatalogCatalogAdogitArgs) CatalogCatalogAdogitPtrInput {
	return (*catalogCatalogAdogitPtrType)(v)
}

func (*catalogCatalogAdogitPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogCatalogAdogit)(nil)).Elem()
}

func (i *catalogCatalogAdogitPtrType) ToCatalogCatalogAdogitPtrOutput() CatalogCatalogAdogitPtrOutput {
	return i.ToCatalogCatalogAdogitPtrOutputWithContext(context.Background())
}

func (i *catalogCatalogAdogitPtrType) ToCatalogCatalogAdogitPtrOutputWithContext(ctx context.Context) CatalogCatalogAdogitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogCatalogAdogitPtrOutput)
}

type CatalogCatalogAdogitOutput struct{ *pulumi.OutputState }

func (CatalogCatalogAdogitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogCatalogAdogit)(nil)).Elem()
}

func (o CatalogCatalogAdogitOutput) ToCatalogCatalogAdogitOutput() CatalogCatalogAdogitOutput {
	return o
}

func (o CatalogCatalogAdogitOutput) ToCatalogCatalogAdogitOutputWithContext(ctx context.Context) CatalogCatalogAdogitOutput {
	return o
}

func (o CatalogCatalogAdogitOutput) ToCatalogCatalogAdogitPtrOutput() CatalogCatalogAdogitPtrOutput {
	return o.ToCatalogCatalogAdogitPtrOutputWithContext(context.Background())
}

func (o CatalogCatalogAdogitOutput) ToCatalogCatalogAdogitPtrOutputWithContext(ctx context.Context) CatalogCatalogAdogitPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CatalogCatalogAdogit) *CatalogCatalogAdogit {
		return &v
	}).(CatalogCatalogAdogitPtrOutput)
}

// The Git branch of the Dev Center Catalog.
func (o CatalogCatalogAdogitOutput) Branch() pulumi.StringOutput {
	return o.ApplyT(func(v CatalogCatalogAdogit) string { return v.Branch }).(pulumi.StringOutput)
}

// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
func (o CatalogCatalogAdogitOutput) KeyVaultKeyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v CatalogCatalogAdogit) string { return v.KeyVaultKeyUrl }).(pulumi.StringOutput)
}

// The folder where the catalog items can be found inside the repository.
func (o CatalogCatalogAdogitOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v CatalogCatalogAdogit) string { return v.Path }).(pulumi.StringOutput)
}

// The Git URI of the Dev Center Catalog.
func (o CatalogCatalogAdogitOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v CatalogCatalogAdogit) string { return v.Uri }).(pulumi.StringOutput)
}

type CatalogCatalogAdogitPtrOutput struct{ *pulumi.OutputState }

func (CatalogCatalogAdogitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogCatalogAdogit)(nil)).Elem()
}

func (o CatalogCatalogAdogitPtrOutput) ToCatalogCatalogAdogitPtrOutput() CatalogCatalogAdogitPtrOutput {
	return o
}

func (o CatalogCatalogAdogitPtrOutput) ToCatalogCatalogAdogitPtrOutputWithContext(ctx context.Context) CatalogCatalogAdogitPtrOutput {
	return o
}

func (o CatalogCatalogAdogitPtrOutput) Elem() CatalogCatalogAdogitOutput {
	return o.ApplyT(func(v *CatalogCatalogAdogit) CatalogCatalogAdogit {
		if v != nil {
			return *v
		}
		var ret CatalogCatalogAdogit
		return ret
	}).(CatalogCatalogAdogitOutput)
}

// The Git branch of the Dev Center Catalog.
func (o CatalogCatalogAdogitPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogCatalogAdogit) *string {
		if v == nil {
			return nil
		}
		return &v.Branch
	}).(pulumi.StringPtrOutput)
}

// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
func (o CatalogCatalogAdogitPtrOutput) KeyVaultKeyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogCatalogAdogit) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVaultKeyUrl
	}).(pulumi.StringPtrOutput)
}

// The folder where the catalog items can be found inside the repository.
func (o CatalogCatalogAdogitPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogCatalogAdogit) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// The Git URI of the Dev Center Catalog.
func (o CatalogCatalogAdogitPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogCatalogAdogit) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type CatalogCatalogGithub struct {
	// The Git branch of the Dev Center Catalog.
	Branch string `pulumi:"branch"`
	// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
	KeyVaultKeyUrl string `pulumi:"keyVaultKeyUrl"`
	// The folder where the catalog items can be found inside the repository.
	Path string `pulumi:"path"`
	// The Git URI of the Dev Center Catalog.
	Uri string `pulumi:"uri"`
}

// CatalogCatalogGithubInput is an input type that accepts CatalogCatalogGithubArgs and CatalogCatalogGithubOutput values.
// You can construct a concrete instance of `CatalogCatalogGithubInput` via:
//
//	CatalogCatalogGithubArgs{...}
type CatalogCatalogGithubInput interface {
	pulumi.Input

	ToCatalogCatalogGithubOutput() CatalogCatalogGithubOutput
	ToCatalogCatalogGithubOutputWithContext(context.Context) CatalogCatalogGithubOutput
}

type CatalogCatalogGithubArgs struct {
	// The Git branch of the Dev Center Catalog.
	Branch pulumi.StringInput `pulumi:"branch"`
	// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
	KeyVaultKeyUrl pulumi.StringInput `pulumi:"keyVaultKeyUrl"`
	// The folder where the catalog items can be found inside the repository.
	Path pulumi.StringInput `pulumi:"path"`
	// The Git URI of the Dev Center Catalog.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (CatalogCatalogGithubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogCatalogGithub)(nil)).Elem()
}

func (i CatalogCatalogGithubArgs) ToCatalogCatalogGithubOutput() CatalogCatalogGithubOutput {
	return i.ToCatalogCatalogGithubOutputWithContext(context.Background())
}

func (i CatalogCatalogGithubArgs) ToCatalogCatalogGithubOutputWithContext(ctx context.Context) CatalogCatalogGithubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogCatalogGithubOutput)
}

func (i CatalogCatalogGithubArgs) ToCatalogCatalogGithubPtrOutput() CatalogCatalogGithubPtrOutput {
	return i.ToCatalogCatalogGithubPtrOutputWithContext(context.Background())
}

func (i CatalogCatalogGithubArgs) ToCatalogCatalogGithubPtrOutputWithContext(ctx context.Context) CatalogCatalogGithubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogCatalogGithubOutput).ToCatalogCatalogGithubPtrOutputWithContext(ctx)
}

// CatalogCatalogGithubPtrInput is an input type that accepts CatalogCatalogGithubArgs, CatalogCatalogGithubPtr and CatalogCatalogGithubPtrOutput values.
// You can construct a concrete instance of `CatalogCatalogGithubPtrInput` via:
//
//	        CatalogCatalogGithubArgs{...}
//
//	or:
//
//	        nil
type CatalogCatalogGithubPtrInput interface {
	pulumi.Input

	ToCatalogCatalogGithubPtrOutput() CatalogCatalogGithubPtrOutput
	ToCatalogCatalogGithubPtrOutputWithContext(context.Context) CatalogCatalogGithubPtrOutput
}

type catalogCatalogGithubPtrType CatalogCatalogGithubArgs

func CatalogCatalogGithubPtr(v *CatalogCatalogGithubArgs) CatalogCatalogGithubPtrInput {
	return (*catalogCatalogGithubPtrType)(v)
}

func (*catalogCatalogGithubPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogCatalogGithub)(nil)).Elem()
}

func (i *catalogCatalogGithubPtrType) ToCatalogCatalogGithubPtrOutput() CatalogCatalogGithubPtrOutput {
	return i.ToCatalogCatalogGithubPtrOutputWithContext(context.Background())
}

func (i *catalogCatalogGithubPtrType) ToCatalogCatalogGithubPtrOutputWithContext(ctx context.Context) CatalogCatalogGithubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogCatalogGithubPtrOutput)
}

type CatalogCatalogGithubOutput struct{ *pulumi.OutputState }

func (CatalogCatalogGithubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogCatalogGithub)(nil)).Elem()
}

func (o CatalogCatalogGithubOutput) ToCatalogCatalogGithubOutput() CatalogCatalogGithubOutput {
	return o
}

func (o CatalogCatalogGithubOutput) ToCatalogCatalogGithubOutputWithContext(ctx context.Context) CatalogCatalogGithubOutput {
	return o
}

func (o CatalogCatalogGithubOutput) ToCatalogCatalogGithubPtrOutput() CatalogCatalogGithubPtrOutput {
	return o.ToCatalogCatalogGithubPtrOutputWithContext(context.Background())
}

func (o CatalogCatalogGithubOutput) ToCatalogCatalogGithubPtrOutputWithContext(ctx context.Context) CatalogCatalogGithubPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CatalogCatalogGithub) *CatalogCatalogGithub {
		return &v
	}).(CatalogCatalogGithubPtrOutput)
}

// The Git branch of the Dev Center Catalog.
func (o CatalogCatalogGithubOutput) Branch() pulumi.StringOutput {
	return o.ApplyT(func(v CatalogCatalogGithub) string { return v.Branch }).(pulumi.StringOutput)
}

// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
func (o CatalogCatalogGithubOutput) KeyVaultKeyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v CatalogCatalogGithub) string { return v.KeyVaultKeyUrl }).(pulumi.StringOutput)
}

// The folder where the catalog items can be found inside the repository.
func (o CatalogCatalogGithubOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v CatalogCatalogGithub) string { return v.Path }).(pulumi.StringOutput)
}

// The Git URI of the Dev Center Catalog.
func (o CatalogCatalogGithubOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v CatalogCatalogGithub) string { return v.Uri }).(pulumi.StringOutput)
}

type CatalogCatalogGithubPtrOutput struct{ *pulumi.OutputState }

func (CatalogCatalogGithubPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogCatalogGithub)(nil)).Elem()
}

func (o CatalogCatalogGithubPtrOutput) ToCatalogCatalogGithubPtrOutput() CatalogCatalogGithubPtrOutput {
	return o
}

func (o CatalogCatalogGithubPtrOutput) ToCatalogCatalogGithubPtrOutputWithContext(ctx context.Context) CatalogCatalogGithubPtrOutput {
	return o
}

func (o CatalogCatalogGithubPtrOutput) Elem() CatalogCatalogGithubOutput {
	return o.ApplyT(func(v *CatalogCatalogGithub) CatalogCatalogGithub {
		if v != nil {
			return *v
		}
		var ret CatalogCatalogGithub
		return ret
	}).(CatalogCatalogGithubOutput)
}

// The Git branch of the Dev Center Catalog.
func (o CatalogCatalogGithubPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogCatalogGithub) *string {
		if v == nil {
			return nil
		}
		return &v.Branch
	}).(pulumi.StringPtrOutput)
}

// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
func (o CatalogCatalogGithubPtrOutput) KeyVaultKeyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogCatalogGithub) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVaultKeyUrl
	}).(pulumi.StringPtrOutput)
}

// The folder where the catalog items can be found inside the repository.
func (o CatalogCatalogGithubPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogCatalogGithub) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// The Git URI of the Dev Center Catalog.
func (o CatalogCatalogGithubPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogCatalogGithub) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type DevCenterIdentity struct {
	IdentityIds []string `pulumi:"identityIds"`
	PrincipalId *string  `pulumi:"principalId"`
	TenantId    *string  `pulumi:"tenantId"`
	Type        string   `pulumi:"type"`
}

// DevCenterIdentityInput is an input type that accepts DevCenterIdentityArgs and DevCenterIdentityOutput values.
// You can construct a concrete instance of `DevCenterIdentityInput` via:
//
//	DevCenterIdentityArgs{...}
type DevCenterIdentityInput interface {
	pulumi.Input

	ToDevCenterIdentityOutput() DevCenterIdentityOutput
	ToDevCenterIdentityOutputWithContext(context.Context) DevCenterIdentityOutput
}

type DevCenterIdentityArgs struct {
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	PrincipalId pulumi.StringPtrInput   `pulumi:"principalId"`
	TenantId    pulumi.StringPtrInput   `pulumi:"tenantId"`
	Type        pulumi.StringInput      `pulumi:"type"`
}

func (DevCenterIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DevCenterIdentity)(nil)).Elem()
}

func (i DevCenterIdentityArgs) ToDevCenterIdentityOutput() DevCenterIdentityOutput {
	return i.ToDevCenterIdentityOutputWithContext(context.Background())
}

func (i DevCenterIdentityArgs) ToDevCenterIdentityOutputWithContext(ctx context.Context) DevCenterIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevCenterIdentityOutput)
}

func (i DevCenterIdentityArgs) ToDevCenterIdentityPtrOutput() DevCenterIdentityPtrOutput {
	return i.ToDevCenterIdentityPtrOutputWithContext(context.Background())
}

func (i DevCenterIdentityArgs) ToDevCenterIdentityPtrOutputWithContext(ctx context.Context) DevCenterIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevCenterIdentityOutput).ToDevCenterIdentityPtrOutputWithContext(ctx)
}

// DevCenterIdentityPtrInput is an input type that accepts DevCenterIdentityArgs, DevCenterIdentityPtr and DevCenterIdentityPtrOutput values.
// You can construct a concrete instance of `DevCenterIdentityPtrInput` via:
//
//	        DevCenterIdentityArgs{...}
//
//	or:
//
//	        nil
type DevCenterIdentityPtrInput interface {
	pulumi.Input

	ToDevCenterIdentityPtrOutput() DevCenterIdentityPtrOutput
	ToDevCenterIdentityPtrOutputWithContext(context.Context) DevCenterIdentityPtrOutput
}

type devCenterIdentityPtrType DevCenterIdentityArgs

func DevCenterIdentityPtr(v *DevCenterIdentityArgs) DevCenterIdentityPtrInput {
	return (*devCenterIdentityPtrType)(v)
}

func (*devCenterIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DevCenterIdentity)(nil)).Elem()
}

func (i *devCenterIdentityPtrType) ToDevCenterIdentityPtrOutput() DevCenterIdentityPtrOutput {
	return i.ToDevCenterIdentityPtrOutputWithContext(context.Background())
}

func (i *devCenterIdentityPtrType) ToDevCenterIdentityPtrOutputWithContext(ctx context.Context) DevCenterIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevCenterIdentityPtrOutput)
}

type DevCenterIdentityOutput struct{ *pulumi.OutputState }

func (DevCenterIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DevCenterIdentity)(nil)).Elem()
}

func (o DevCenterIdentityOutput) ToDevCenterIdentityOutput() DevCenterIdentityOutput {
	return o
}

func (o DevCenterIdentityOutput) ToDevCenterIdentityOutputWithContext(ctx context.Context) DevCenterIdentityOutput {
	return o
}

func (o DevCenterIdentityOutput) ToDevCenterIdentityPtrOutput() DevCenterIdentityPtrOutput {
	return o.ToDevCenterIdentityPtrOutputWithContext(context.Background())
}

func (o DevCenterIdentityOutput) ToDevCenterIdentityPtrOutputWithContext(ctx context.Context) DevCenterIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DevCenterIdentity) *DevCenterIdentity {
		return &v
	}).(DevCenterIdentityPtrOutput)
}

func (o DevCenterIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DevCenterIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

func (o DevCenterIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DevCenterIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

func (o DevCenterIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DevCenterIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

func (o DevCenterIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DevCenterIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type DevCenterIdentityPtrOutput struct{ *pulumi.OutputState }

func (DevCenterIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DevCenterIdentity)(nil)).Elem()
}

func (o DevCenterIdentityPtrOutput) ToDevCenterIdentityPtrOutput() DevCenterIdentityPtrOutput {
	return o
}

func (o DevCenterIdentityPtrOutput) ToDevCenterIdentityPtrOutputWithContext(ctx context.Context) DevCenterIdentityPtrOutput {
	return o
}

func (o DevCenterIdentityPtrOutput) Elem() DevCenterIdentityOutput {
	return o.ApplyT(func(v *DevCenterIdentity) DevCenterIdentity {
		if v != nil {
			return *v
		}
		var ret DevCenterIdentity
		return ret
	}).(DevCenterIdentityOutput)
}

func (o DevCenterIdentityPtrOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DevCenterIdentity) []string {
		if v == nil {
			return nil
		}
		return v.IdentityIds
	}).(pulumi.StringArrayOutput)
}

func (o DevCenterIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevCenterIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

func (o DevCenterIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevCenterIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

func (o DevCenterIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevCenterIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type ProjectEnvironmentTypeIdentity struct {
	// The ID of the User Assigned Identity which should be assigned to this Dev Center Project Environment Type.
	//
	// > **Note:** `identityIds` is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
	IdentityIds []string `pulumi:"identityIds"`
	PrincipalId *string  `pulumi:"principalId"`
	TenantId    *string  `pulumi:"tenantId"`
	// The type of identity used for this Dev Center Project Environment Type. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned, UserAssigned`.
	Type string `pulumi:"type"`
}

// ProjectEnvironmentTypeIdentityInput is an input type that accepts ProjectEnvironmentTypeIdentityArgs and ProjectEnvironmentTypeIdentityOutput values.
// You can construct a concrete instance of `ProjectEnvironmentTypeIdentityInput` via:
//
//	ProjectEnvironmentTypeIdentityArgs{...}
type ProjectEnvironmentTypeIdentityInput interface {
	pulumi.Input

	ToProjectEnvironmentTypeIdentityOutput() ProjectEnvironmentTypeIdentityOutput
	ToProjectEnvironmentTypeIdentityOutputWithContext(context.Context) ProjectEnvironmentTypeIdentityOutput
}

type ProjectEnvironmentTypeIdentityArgs struct {
	// The ID of the User Assigned Identity which should be assigned to this Dev Center Project Environment Type.
	//
	// > **Note:** `identityIds` is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	PrincipalId pulumi.StringPtrInput   `pulumi:"principalId"`
	TenantId    pulumi.StringPtrInput   `pulumi:"tenantId"`
	// The type of identity used for this Dev Center Project Environment Type. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned, UserAssigned`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ProjectEnvironmentTypeIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectEnvironmentTypeIdentity)(nil)).Elem()
}

func (i ProjectEnvironmentTypeIdentityArgs) ToProjectEnvironmentTypeIdentityOutput() ProjectEnvironmentTypeIdentityOutput {
	return i.ToProjectEnvironmentTypeIdentityOutputWithContext(context.Background())
}

func (i ProjectEnvironmentTypeIdentityArgs) ToProjectEnvironmentTypeIdentityOutputWithContext(ctx context.Context) ProjectEnvironmentTypeIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentTypeIdentityOutput)
}

func (i ProjectEnvironmentTypeIdentityArgs) ToProjectEnvironmentTypeIdentityPtrOutput() ProjectEnvironmentTypeIdentityPtrOutput {
	return i.ToProjectEnvironmentTypeIdentityPtrOutputWithContext(context.Background())
}

func (i ProjectEnvironmentTypeIdentityArgs) ToProjectEnvironmentTypeIdentityPtrOutputWithContext(ctx context.Context) ProjectEnvironmentTypeIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentTypeIdentityOutput).ToProjectEnvironmentTypeIdentityPtrOutputWithContext(ctx)
}

// ProjectEnvironmentTypeIdentityPtrInput is an input type that accepts ProjectEnvironmentTypeIdentityArgs, ProjectEnvironmentTypeIdentityPtr and ProjectEnvironmentTypeIdentityPtrOutput values.
// You can construct a concrete instance of `ProjectEnvironmentTypeIdentityPtrInput` via:
//
//	        ProjectEnvironmentTypeIdentityArgs{...}
//
//	or:
//
//	        nil
type ProjectEnvironmentTypeIdentityPtrInput interface {
	pulumi.Input

	ToProjectEnvironmentTypeIdentityPtrOutput() ProjectEnvironmentTypeIdentityPtrOutput
	ToProjectEnvironmentTypeIdentityPtrOutputWithContext(context.Context) ProjectEnvironmentTypeIdentityPtrOutput
}

type projectEnvironmentTypeIdentityPtrType ProjectEnvironmentTypeIdentityArgs

func ProjectEnvironmentTypeIdentityPtr(v *ProjectEnvironmentTypeIdentityArgs) ProjectEnvironmentTypeIdentityPtrInput {
	return (*projectEnvironmentTypeIdentityPtrType)(v)
}

func (*projectEnvironmentTypeIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectEnvironmentTypeIdentity)(nil)).Elem()
}

func (i *projectEnvironmentTypeIdentityPtrType) ToProjectEnvironmentTypeIdentityPtrOutput() ProjectEnvironmentTypeIdentityPtrOutput {
	return i.ToProjectEnvironmentTypeIdentityPtrOutputWithContext(context.Background())
}

func (i *projectEnvironmentTypeIdentityPtrType) ToProjectEnvironmentTypeIdentityPtrOutputWithContext(ctx context.Context) ProjectEnvironmentTypeIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentTypeIdentityPtrOutput)
}

type ProjectEnvironmentTypeIdentityOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentTypeIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectEnvironmentTypeIdentity)(nil)).Elem()
}

func (o ProjectEnvironmentTypeIdentityOutput) ToProjectEnvironmentTypeIdentityOutput() ProjectEnvironmentTypeIdentityOutput {
	return o
}

func (o ProjectEnvironmentTypeIdentityOutput) ToProjectEnvironmentTypeIdentityOutputWithContext(ctx context.Context) ProjectEnvironmentTypeIdentityOutput {
	return o
}

func (o ProjectEnvironmentTypeIdentityOutput) ToProjectEnvironmentTypeIdentityPtrOutput() ProjectEnvironmentTypeIdentityPtrOutput {
	return o.ToProjectEnvironmentTypeIdentityPtrOutputWithContext(context.Background())
}

func (o ProjectEnvironmentTypeIdentityOutput) ToProjectEnvironmentTypeIdentityPtrOutputWithContext(ctx context.Context) ProjectEnvironmentTypeIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectEnvironmentTypeIdentity) *ProjectEnvironmentTypeIdentity {
		return &v
	}).(ProjectEnvironmentTypeIdentityPtrOutput)
}

// The ID of the User Assigned Identity which should be assigned to this Dev Center Project Environment Type.
//
// > **Note:** `identityIds` is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
func (o ProjectEnvironmentTypeIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectEnvironmentTypeIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

func (o ProjectEnvironmentTypeIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectEnvironmentTypeIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

func (o ProjectEnvironmentTypeIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectEnvironmentTypeIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The type of identity used for this Dev Center Project Environment Type. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned, UserAssigned`.
func (o ProjectEnvironmentTypeIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectEnvironmentTypeIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type ProjectEnvironmentTypeIdentityPtrOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentTypeIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectEnvironmentTypeIdentity)(nil)).Elem()
}

func (o ProjectEnvironmentTypeIdentityPtrOutput) ToProjectEnvironmentTypeIdentityPtrOutput() ProjectEnvironmentTypeIdentityPtrOutput {
	return o
}

func (o ProjectEnvironmentTypeIdentityPtrOutput) ToProjectEnvironmentTypeIdentityPtrOutputWithContext(ctx context.Context) ProjectEnvironmentTypeIdentityPtrOutput {
	return o
}

func (o ProjectEnvironmentTypeIdentityPtrOutput) Elem() ProjectEnvironmentTypeIdentityOutput {
	return o.ApplyT(func(v *ProjectEnvironmentTypeIdentity) ProjectEnvironmentTypeIdentity {
		if v != nil {
			return *v
		}
		var ret ProjectEnvironmentTypeIdentity
		return ret
	}).(ProjectEnvironmentTypeIdentityOutput)
}

// The ID of the User Assigned Identity which should be assigned to this Dev Center Project Environment Type.
//
// > **Note:** `identityIds` is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
func (o ProjectEnvironmentTypeIdentityPtrOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectEnvironmentTypeIdentity) []string {
		if v == nil {
			return nil
		}
		return v.IdentityIds
	}).(pulumi.StringArrayOutput)
}

func (o ProjectEnvironmentTypeIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectEnvironmentTypeIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

func (o ProjectEnvironmentTypeIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectEnvironmentTypeIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The type of identity used for this Dev Center Project Environment Type. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned, UserAssigned`.
func (o ProjectEnvironmentTypeIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectEnvironmentTypeIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type ProjectEnvironmentTypeUserRoleAssignment struct {
	// A list of roles to assign to the `userId`.
	Roles []string `pulumi:"roles"`
	// The user object ID that is assigned roles.
	UserId string `pulumi:"userId"`
}

// ProjectEnvironmentTypeUserRoleAssignmentInput is an input type that accepts ProjectEnvironmentTypeUserRoleAssignmentArgs and ProjectEnvironmentTypeUserRoleAssignmentOutput values.
// You can construct a concrete instance of `ProjectEnvironmentTypeUserRoleAssignmentInput` via:
//
//	ProjectEnvironmentTypeUserRoleAssignmentArgs{...}
type ProjectEnvironmentTypeUserRoleAssignmentInput interface {
	pulumi.Input

	ToProjectEnvironmentTypeUserRoleAssignmentOutput() ProjectEnvironmentTypeUserRoleAssignmentOutput
	ToProjectEnvironmentTypeUserRoleAssignmentOutputWithContext(context.Context) ProjectEnvironmentTypeUserRoleAssignmentOutput
}

type ProjectEnvironmentTypeUserRoleAssignmentArgs struct {
	// A list of roles to assign to the `userId`.
	Roles pulumi.StringArrayInput `pulumi:"roles"`
	// The user object ID that is assigned roles.
	UserId pulumi.StringInput `pulumi:"userId"`
}

func (ProjectEnvironmentTypeUserRoleAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectEnvironmentTypeUserRoleAssignment)(nil)).Elem()
}

func (i ProjectEnvironmentTypeUserRoleAssignmentArgs) ToProjectEnvironmentTypeUserRoleAssignmentOutput() ProjectEnvironmentTypeUserRoleAssignmentOutput {
	return i.ToProjectEnvironmentTypeUserRoleAssignmentOutputWithContext(context.Background())
}

func (i ProjectEnvironmentTypeUserRoleAssignmentArgs) ToProjectEnvironmentTypeUserRoleAssignmentOutputWithContext(ctx context.Context) ProjectEnvironmentTypeUserRoleAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentTypeUserRoleAssignmentOutput)
}

// ProjectEnvironmentTypeUserRoleAssignmentArrayInput is an input type that accepts ProjectEnvironmentTypeUserRoleAssignmentArray and ProjectEnvironmentTypeUserRoleAssignmentArrayOutput values.
// You can construct a concrete instance of `ProjectEnvironmentTypeUserRoleAssignmentArrayInput` via:
//
//	ProjectEnvironmentTypeUserRoleAssignmentArray{ ProjectEnvironmentTypeUserRoleAssignmentArgs{...} }
type ProjectEnvironmentTypeUserRoleAssignmentArrayInput interface {
	pulumi.Input

	ToProjectEnvironmentTypeUserRoleAssignmentArrayOutput() ProjectEnvironmentTypeUserRoleAssignmentArrayOutput
	ToProjectEnvironmentTypeUserRoleAssignmentArrayOutputWithContext(context.Context) ProjectEnvironmentTypeUserRoleAssignmentArrayOutput
}

type ProjectEnvironmentTypeUserRoleAssignmentArray []ProjectEnvironmentTypeUserRoleAssignmentInput

func (ProjectEnvironmentTypeUserRoleAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectEnvironmentTypeUserRoleAssignment)(nil)).Elem()
}

func (i ProjectEnvironmentTypeUserRoleAssignmentArray) ToProjectEnvironmentTypeUserRoleAssignmentArrayOutput() ProjectEnvironmentTypeUserRoleAssignmentArrayOutput {
	return i.ToProjectEnvironmentTypeUserRoleAssignmentArrayOutputWithContext(context.Background())
}

func (i ProjectEnvironmentTypeUserRoleAssignmentArray) ToProjectEnvironmentTypeUserRoleAssignmentArrayOutputWithContext(ctx context.Context) ProjectEnvironmentTypeUserRoleAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentTypeUserRoleAssignmentArrayOutput)
}

type ProjectEnvironmentTypeUserRoleAssignmentOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentTypeUserRoleAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectEnvironmentTypeUserRoleAssignment)(nil)).Elem()
}

func (o ProjectEnvironmentTypeUserRoleAssignmentOutput) ToProjectEnvironmentTypeUserRoleAssignmentOutput() ProjectEnvironmentTypeUserRoleAssignmentOutput {
	return o
}

func (o ProjectEnvironmentTypeUserRoleAssignmentOutput) ToProjectEnvironmentTypeUserRoleAssignmentOutputWithContext(ctx context.Context) ProjectEnvironmentTypeUserRoleAssignmentOutput {
	return o
}

// A list of roles to assign to the `userId`.
func (o ProjectEnvironmentTypeUserRoleAssignmentOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectEnvironmentTypeUserRoleAssignment) []string { return v.Roles }).(pulumi.StringArrayOutput)
}

// The user object ID that is assigned roles.
func (o ProjectEnvironmentTypeUserRoleAssignmentOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectEnvironmentTypeUserRoleAssignment) string { return v.UserId }).(pulumi.StringOutput)
}

type ProjectEnvironmentTypeUserRoleAssignmentArrayOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentTypeUserRoleAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectEnvironmentTypeUserRoleAssignment)(nil)).Elem()
}

func (o ProjectEnvironmentTypeUserRoleAssignmentArrayOutput) ToProjectEnvironmentTypeUserRoleAssignmentArrayOutput() ProjectEnvironmentTypeUserRoleAssignmentArrayOutput {
	return o
}

func (o ProjectEnvironmentTypeUserRoleAssignmentArrayOutput) ToProjectEnvironmentTypeUserRoleAssignmentArrayOutputWithContext(ctx context.Context) ProjectEnvironmentTypeUserRoleAssignmentArrayOutput {
	return o
}

func (o ProjectEnvironmentTypeUserRoleAssignmentArrayOutput) Index(i pulumi.IntInput) ProjectEnvironmentTypeUserRoleAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectEnvironmentTypeUserRoleAssignment {
		return vs[0].([]ProjectEnvironmentTypeUserRoleAssignment)[vs[1].(int)]
	}).(ProjectEnvironmentTypeUserRoleAssignmentOutput)
}

type ProjectIdentity struct {
	// The ID of the User Assigned Identity which should be assigned to this Dev Center Project.
	//
	// > **Note:** `identityIds` is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
	IdentityIds []string `pulumi:"identityIds"`
	// The Principal ID for the Service Principal associated with the Identity of this Dev Center Project.
	PrincipalId *string `pulumi:"principalId"`
	// The Tenant ID for the Service Principal associated with the Identity of this Dev Center Project.
	TenantId *string `pulumi:"tenantId"`
	// The type of identity used for this Dev Center Project. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned, UserAssigned`.
	Type string `pulumi:"type"`
}

// ProjectIdentityInput is an input type that accepts ProjectIdentityArgs and ProjectIdentityOutput values.
// You can construct a concrete instance of `ProjectIdentityInput` via:
//
//	ProjectIdentityArgs{...}
type ProjectIdentityInput interface {
	pulumi.Input

	ToProjectIdentityOutput() ProjectIdentityOutput
	ToProjectIdentityOutputWithContext(context.Context) ProjectIdentityOutput
}

type ProjectIdentityArgs struct {
	// The ID of the User Assigned Identity which should be assigned to this Dev Center Project.
	//
	// > **Note:** `identityIds` is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	// The Principal ID for the Service Principal associated with the Identity of this Dev Center Project.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The Tenant ID for the Service Principal associated with the Identity of this Dev Center Project.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// The type of identity used for this Dev Center Project. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned, UserAssigned`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ProjectIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectIdentity)(nil)).Elem()
}

func (i ProjectIdentityArgs) ToProjectIdentityOutput() ProjectIdentityOutput {
	return i.ToProjectIdentityOutputWithContext(context.Background())
}

func (i ProjectIdentityArgs) ToProjectIdentityOutputWithContext(ctx context.Context) ProjectIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIdentityOutput)
}

func (i ProjectIdentityArgs) ToProjectIdentityPtrOutput() ProjectIdentityPtrOutput {
	return i.ToProjectIdentityPtrOutputWithContext(context.Background())
}

func (i ProjectIdentityArgs) ToProjectIdentityPtrOutputWithContext(ctx context.Context) ProjectIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIdentityOutput).ToProjectIdentityPtrOutputWithContext(ctx)
}

// ProjectIdentityPtrInput is an input type that accepts ProjectIdentityArgs, ProjectIdentityPtr and ProjectIdentityPtrOutput values.
// You can construct a concrete instance of `ProjectIdentityPtrInput` via:
//
//	        ProjectIdentityArgs{...}
//
//	or:
//
//	        nil
type ProjectIdentityPtrInput interface {
	pulumi.Input

	ToProjectIdentityPtrOutput() ProjectIdentityPtrOutput
	ToProjectIdentityPtrOutputWithContext(context.Context) ProjectIdentityPtrOutput
}

type projectIdentityPtrType ProjectIdentityArgs

func ProjectIdentityPtr(v *ProjectIdentityArgs) ProjectIdentityPtrInput {
	return (*projectIdentityPtrType)(v)
}

func (*projectIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIdentity)(nil)).Elem()
}

func (i *projectIdentityPtrType) ToProjectIdentityPtrOutput() ProjectIdentityPtrOutput {
	return i.ToProjectIdentityPtrOutputWithContext(context.Background())
}

func (i *projectIdentityPtrType) ToProjectIdentityPtrOutputWithContext(ctx context.Context) ProjectIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIdentityPtrOutput)
}

type ProjectIdentityOutput struct{ *pulumi.OutputState }

func (ProjectIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectIdentity)(nil)).Elem()
}

func (o ProjectIdentityOutput) ToProjectIdentityOutput() ProjectIdentityOutput {
	return o
}

func (o ProjectIdentityOutput) ToProjectIdentityOutputWithContext(ctx context.Context) ProjectIdentityOutput {
	return o
}

func (o ProjectIdentityOutput) ToProjectIdentityPtrOutput() ProjectIdentityPtrOutput {
	return o.ToProjectIdentityPtrOutputWithContext(context.Background())
}

func (o ProjectIdentityOutput) ToProjectIdentityPtrOutputWithContext(ctx context.Context) ProjectIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectIdentity) *ProjectIdentity {
		return &v
	}).(ProjectIdentityPtrOutput)
}

// The ID of the User Assigned Identity which should be assigned to this Dev Center Project.
//
// > **Note:** `identityIds` is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
func (o ProjectIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

// The Principal ID for the Service Principal associated with the Identity of this Dev Center Project.
func (o ProjectIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The Tenant ID for the Service Principal associated with the Identity of this Dev Center Project.
func (o ProjectIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The type of identity used for this Dev Center Project. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned, UserAssigned`.
func (o ProjectIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type ProjectIdentityPtrOutput struct{ *pulumi.OutputState }

func (ProjectIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIdentity)(nil)).Elem()
}

func (o ProjectIdentityPtrOutput) ToProjectIdentityPtrOutput() ProjectIdentityPtrOutput {
	return o
}

func (o ProjectIdentityPtrOutput) ToProjectIdentityPtrOutputWithContext(ctx context.Context) ProjectIdentityPtrOutput {
	return o
}

func (o ProjectIdentityPtrOutput) Elem() ProjectIdentityOutput {
	return o.ApplyT(func(v *ProjectIdentity) ProjectIdentity {
		if v != nil {
			return *v
		}
		var ret ProjectIdentity
		return ret
	}).(ProjectIdentityOutput)
}

// The ID of the User Assigned Identity which should be assigned to this Dev Center Project.
//
// > **Note:** `identityIds` is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
func (o ProjectIdentityPtrOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectIdentity) []string {
		if v == nil {
			return nil
		}
		return v.IdentityIds
	}).(pulumi.StringArrayOutput)
}

// The Principal ID for the Service Principal associated with the Identity of this Dev Center Project.
func (o ProjectIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The Tenant ID for the Service Principal associated with the Identity of this Dev Center Project.
func (o ProjectIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The type of identity used for this Dev Center Project. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned, UserAssigned`.
func (o ProjectIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type GetCatalogCatalogAdogit struct {
	// The Git branch of the Dev Center Catalog.
	Branch string `pulumi:"branch"`
	// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
	KeyVaultKeyUrl string `pulumi:"keyVaultKeyUrl"`
	// The folder where the catalog items can be found inside the repository.
	Path string `pulumi:"path"`
	// The Git URI of the Dev Center Catalog.
	Uri string `pulumi:"uri"`
}

// GetCatalogCatalogAdogitInput is an input type that accepts GetCatalogCatalogAdogitArgs and GetCatalogCatalogAdogitOutput values.
// You can construct a concrete instance of `GetCatalogCatalogAdogitInput` via:
//
//	GetCatalogCatalogAdogitArgs{...}
type GetCatalogCatalogAdogitInput interface {
	pulumi.Input

	ToGetCatalogCatalogAdogitOutput() GetCatalogCatalogAdogitOutput
	ToGetCatalogCatalogAdogitOutputWithContext(context.Context) GetCatalogCatalogAdogitOutput
}

type GetCatalogCatalogAdogitArgs struct {
	// The Git branch of the Dev Center Catalog.
	Branch pulumi.StringInput `pulumi:"branch"`
	// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
	KeyVaultKeyUrl pulumi.StringInput `pulumi:"keyVaultKeyUrl"`
	// The folder where the catalog items can be found inside the repository.
	Path pulumi.StringInput `pulumi:"path"`
	// The Git URI of the Dev Center Catalog.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (GetCatalogCatalogAdogitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogCatalogAdogit)(nil)).Elem()
}

func (i GetCatalogCatalogAdogitArgs) ToGetCatalogCatalogAdogitOutput() GetCatalogCatalogAdogitOutput {
	return i.ToGetCatalogCatalogAdogitOutputWithContext(context.Background())
}

func (i GetCatalogCatalogAdogitArgs) ToGetCatalogCatalogAdogitOutputWithContext(ctx context.Context) GetCatalogCatalogAdogitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCatalogCatalogAdogitOutput)
}

// GetCatalogCatalogAdogitArrayInput is an input type that accepts GetCatalogCatalogAdogitArray and GetCatalogCatalogAdogitArrayOutput values.
// You can construct a concrete instance of `GetCatalogCatalogAdogitArrayInput` via:
//
//	GetCatalogCatalogAdogitArray{ GetCatalogCatalogAdogitArgs{...} }
type GetCatalogCatalogAdogitArrayInput interface {
	pulumi.Input

	ToGetCatalogCatalogAdogitArrayOutput() GetCatalogCatalogAdogitArrayOutput
	ToGetCatalogCatalogAdogitArrayOutputWithContext(context.Context) GetCatalogCatalogAdogitArrayOutput
}

type GetCatalogCatalogAdogitArray []GetCatalogCatalogAdogitInput

func (GetCatalogCatalogAdogitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCatalogCatalogAdogit)(nil)).Elem()
}

func (i GetCatalogCatalogAdogitArray) ToGetCatalogCatalogAdogitArrayOutput() GetCatalogCatalogAdogitArrayOutput {
	return i.ToGetCatalogCatalogAdogitArrayOutputWithContext(context.Background())
}

func (i GetCatalogCatalogAdogitArray) ToGetCatalogCatalogAdogitArrayOutputWithContext(ctx context.Context) GetCatalogCatalogAdogitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCatalogCatalogAdogitArrayOutput)
}

type GetCatalogCatalogAdogitOutput struct{ *pulumi.OutputState }

func (GetCatalogCatalogAdogitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogCatalogAdogit)(nil)).Elem()
}

func (o GetCatalogCatalogAdogitOutput) ToGetCatalogCatalogAdogitOutput() GetCatalogCatalogAdogitOutput {
	return o
}

func (o GetCatalogCatalogAdogitOutput) ToGetCatalogCatalogAdogitOutputWithContext(ctx context.Context) GetCatalogCatalogAdogitOutput {
	return o
}

// The Git branch of the Dev Center Catalog.
func (o GetCatalogCatalogAdogitOutput) Branch() pulumi.StringOutput {
	return o.ApplyT(func(v GetCatalogCatalogAdogit) string { return v.Branch }).(pulumi.StringOutput)
}

// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
func (o GetCatalogCatalogAdogitOutput) KeyVaultKeyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetCatalogCatalogAdogit) string { return v.KeyVaultKeyUrl }).(pulumi.StringOutput)
}

// The folder where the catalog items can be found inside the repository.
func (o GetCatalogCatalogAdogitOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetCatalogCatalogAdogit) string { return v.Path }).(pulumi.StringOutput)
}

// The Git URI of the Dev Center Catalog.
func (o GetCatalogCatalogAdogitOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v GetCatalogCatalogAdogit) string { return v.Uri }).(pulumi.StringOutput)
}

type GetCatalogCatalogAdogitArrayOutput struct{ *pulumi.OutputState }

func (GetCatalogCatalogAdogitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCatalogCatalogAdogit)(nil)).Elem()
}

func (o GetCatalogCatalogAdogitArrayOutput) ToGetCatalogCatalogAdogitArrayOutput() GetCatalogCatalogAdogitArrayOutput {
	return o
}

func (o GetCatalogCatalogAdogitArrayOutput) ToGetCatalogCatalogAdogitArrayOutputWithContext(ctx context.Context) GetCatalogCatalogAdogitArrayOutput {
	return o
}

func (o GetCatalogCatalogAdogitArrayOutput) Index(i pulumi.IntInput) GetCatalogCatalogAdogitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCatalogCatalogAdogit {
		return vs[0].([]GetCatalogCatalogAdogit)[vs[1].(int)]
	}).(GetCatalogCatalogAdogitOutput)
}

type GetCatalogCatalogGithub struct {
	// The Git branch of the Dev Center Catalog.
	Branch string `pulumi:"branch"`
	// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
	KeyVaultKeyUrl string `pulumi:"keyVaultKeyUrl"`
	// The folder where the catalog items can be found inside the repository.
	Path string `pulumi:"path"`
	// The Git URI of the Dev Center Catalog.
	Uri string `pulumi:"uri"`
}

// GetCatalogCatalogGithubInput is an input type that accepts GetCatalogCatalogGithubArgs and GetCatalogCatalogGithubOutput values.
// You can construct a concrete instance of `GetCatalogCatalogGithubInput` via:
//
//	GetCatalogCatalogGithubArgs{...}
type GetCatalogCatalogGithubInput interface {
	pulumi.Input

	ToGetCatalogCatalogGithubOutput() GetCatalogCatalogGithubOutput
	ToGetCatalogCatalogGithubOutputWithContext(context.Context) GetCatalogCatalogGithubOutput
}

type GetCatalogCatalogGithubArgs struct {
	// The Git branch of the Dev Center Catalog.
	Branch pulumi.StringInput `pulumi:"branch"`
	// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
	KeyVaultKeyUrl pulumi.StringInput `pulumi:"keyVaultKeyUrl"`
	// The folder where the catalog items can be found inside the repository.
	Path pulumi.StringInput `pulumi:"path"`
	// The Git URI of the Dev Center Catalog.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (GetCatalogCatalogGithubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogCatalogGithub)(nil)).Elem()
}

func (i GetCatalogCatalogGithubArgs) ToGetCatalogCatalogGithubOutput() GetCatalogCatalogGithubOutput {
	return i.ToGetCatalogCatalogGithubOutputWithContext(context.Background())
}

func (i GetCatalogCatalogGithubArgs) ToGetCatalogCatalogGithubOutputWithContext(ctx context.Context) GetCatalogCatalogGithubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCatalogCatalogGithubOutput)
}

// GetCatalogCatalogGithubArrayInput is an input type that accepts GetCatalogCatalogGithubArray and GetCatalogCatalogGithubArrayOutput values.
// You can construct a concrete instance of `GetCatalogCatalogGithubArrayInput` via:
//
//	GetCatalogCatalogGithubArray{ GetCatalogCatalogGithubArgs{...} }
type GetCatalogCatalogGithubArrayInput interface {
	pulumi.Input

	ToGetCatalogCatalogGithubArrayOutput() GetCatalogCatalogGithubArrayOutput
	ToGetCatalogCatalogGithubArrayOutputWithContext(context.Context) GetCatalogCatalogGithubArrayOutput
}

type GetCatalogCatalogGithubArray []GetCatalogCatalogGithubInput

func (GetCatalogCatalogGithubArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCatalogCatalogGithub)(nil)).Elem()
}

func (i GetCatalogCatalogGithubArray) ToGetCatalogCatalogGithubArrayOutput() GetCatalogCatalogGithubArrayOutput {
	return i.ToGetCatalogCatalogGithubArrayOutputWithContext(context.Background())
}

func (i GetCatalogCatalogGithubArray) ToGetCatalogCatalogGithubArrayOutputWithContext(ctx context.Context) GetCatalogCatalogGithubArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCatalogCatalogGithubArrayOutput)
}

type GetCatalogCatalogGithubOutput struct{ *pulumi.OutputState }

func (GetCatalogCatalogGithubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCatalogCatalogGithub)(nil)).Elem()
}

func (o GetCatalogCatalogGithubOutput) ToGetCatalogCatalogGithubOutput() GetCatalogCatalogGithubOutput {
	return o
}

func (o GetCatalogCatalogGithubOutput) ToGetCatalogCatalogGithubOutputWithContext(ctx context.Context) GetCatalogCatalogGithubOutput {
	return o
}

// The Git branch of the Dev Center Catalog.
func (o GetCatalogCatalogGithubOutput) Branch() pulumi.StringOutput {
	return o.ApplyT(func(v GetCatalogCatalogGithub) string { return v.Branch }).(pulumi.StringOutput)
}

// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
func (o GetCatalogCatalogGithubOutput) KeyVaultKeyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetCatalogCatalogGithub) string { return v.KeyVaultKeyUrl }).(pulumi.StringOutput)
}

// The folder where the catalog items can be found inside the repository.
func (o GetCatalogCatalogGithubOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetCatalogCatalogGithub) string { return v.Path }).(pulumi.StringOutput)
}

// The Git URI of the Dev Center Catalog.
func (o GetCatalogCatalogGithubOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v GetCatalogCatalogGithub) string { return v.Uri }).(pulumi.StringOutput)
}

type GetCatalogCatalogGithubArrayOutput struct{ *pulumi.OutputState }

func (GetCatalogCatalogGithubArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCatalogCatalogGithub)(nil)).Elem()
}

func (o GetCatalogCatalogGithubArrayOutput) ToGetCatalogCatalogGithubArrayOutput() GetCatalogCatalogGithubArrayOutput {
	return o
}

func (o GetCatalogCatalogGithubArrayOutput) ToGetCatalogCatalogGithubArrayOutputWithContext(ctx context.Context) GetCatalogCatalogGithubArrayOutput {
	return o
}

func (o GetCatalogCatalogGithubArrayOutput) Index(i pulumi.IntInput) GetCatalogCatalogGithubOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCatalogCatalogGithub {
		return vs[0].([]GetCatalogCatalogGithub)[vs[1].(int)]
	}).(GetCatalogCatalogGithubOutput)
}

type GetIdentity struct {
	// The list of User Assigned Managed Identity IDs assigned to this Dev Center.
	IdentityIds []string `pulumi:"identityIds"`
	// The Principal ID of the System Assigned Managed Service Identity that is configured on this Dev Center.
	PrincipalId string `pulumi:"principalId"`
	// The Tenant ID of the System Assigned Managed Service Identity that is configured on this Dev Center.
	TenantId string `pulumi:"tenantId"`
	// The type of Managed Service Identity that is configured on this Dev Center.
	Type string `pulumi:"type"`
}

// GetIdentityInput is an input type that accepts GetIdentityArgs and GetIdentityOutput values.
// You can construct a concrete instance of `GetIdentityInput` via:
//
//	GetIdentityArgs{...}
type GetIdentityInput interface {
	pulumi.Input

	ToGetIdentityOutput() GetIdentityOutput
	ToGetIdentityOutputWithContext(context.Context) GetIdentityOutput
}

type GetIdentityArgs struct {
	// The list of User Assigned Managed Identity IDs assigned to this Dev Center.
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	// The Principal ID of the System Assigned Managed Service Identity that is configured on this Dev Center.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The Tenant ID of the System Assigned Managed Service Identity that is configured on this Dev Center.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The type of Managed Service Identity that is configured on this Dev Center.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIdentity)(nil)).Elem()
}

func (i GetIdentityArgs) ToGetIdentityOutput() GetIdentityOutput {
	return i.ToGetIdentityOutputWithContext(context.Background())
}

func (i GetIdentityArgs) ToGetIdentityOutputWithContext(ctx context.Context) GetIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIdentityOutput)
}

// GetIdentityArrayInput is an input type that accepts GetIdentityArray and GetIdentityArrayOutput values.
// You can construct a concrete instance of `GetIdentityArrayInput` via:
//
//	GetIdentityArray{ GetIdentityArgs{...} }
type GetIdentityArrayInput interface {
	pulumi.Input

	ToGetIdentityArrayOutput() GetIdentityArrayOutput
	ToGetIdentityArrayOutputWithContext(context.Context) GetIdentityArrayOutput
}

type GetIdentityArray []GetIdentityInput

func (GetIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIdentity)(nil)).Elem()
}

func (i GetIdentityArray) ToGetIdentityArrayOutput() GetIdentityArrayOutput {
	return i.ToGetIdentityArrayOutputWithContext(context.Background())
}

func (i GetIdentityArray) ToGetIdentityArrayOutputWithContext(ctx context.Context) GetIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIdentityArrayOutput)
}

type GetIdentityOutput struct{ *pulumi.OutputState }

func (GetIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIdentity)(nil)).Elem()
}

func (o GetIdentityOutput) ToGetIdentityOutput() GetIdentityOutput {
	return o
}

func (o GetIdentityOutput) ToGetIdentityOutputWithContext(ctx context.Context) GetIdentityOutput {
	return o
}

// The list of User Assigned Managed Identity IDs assigned to this Dev Center.
func (o GetIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

// The Principal ID of the System Assigned Managed Service Identity that is configured on this Dev Center.
func (o GetIdentityOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v GetIdentity) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The Tenant ID of the System Assigned Managed Service Identity that is configured on this Dev Center.
func (o GetIdentityOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v GetIdentity) string { return v.TenantId }).(pulumi.StringOutput)
}

// The type of Managed Service Identity that is configured on this Dev Center.
func (o GetIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type GetIdentityArrayOutput struct{ *pulumi.OutputState }

func (GetIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIdentity)(nil)).Elem()
}

func (o GetIdentityArrayOutput) ToGetIdentityArrayOutput() GetIdentityArrayOutput {
	return o
}

func (o GetIdentityArrayOutput) ToGetIdentityArrayOutputWithContext(ctx context.Context) GetIdentityArrayOutput {
	return o
}

func (o GetIdentityArrayOutput) Index(i pulumi.IntInput) GetIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetIdentity {
		return vs[0].([]GetIdentity)[vs[1].(int)]
	}).(GetIdentityOutput)
}

type GetProjectEnvironmentTypeIdentity struct {
	// The list of User Assigned Managed Identity IDs assigned to this Dev Center Project Environment Type.
	IdentityIds []string `pulumi:"identityIds"`
	// The Principal ID of the System Assigned Managed Service Identity that is configured on this Dev Center Project Environment Type.
	PrincipalId string `pulumi:"principalId"`
	// The Tenant ID of the System Assigned Managed Service Identity that is configured on this Dev Center Project Environment Type.
	TenantId string `pulumi:"tenantId"`
	// The type of Managed Service Identity that is configured on this Dev Center Project Environment Type.
	Type string `pulumi:"type"`
}

// GetProjectEnvironmentTypeIdentityInput is an input type that accepts GetProjectEnvironmentTypeIdentityArgs and GetProjectEnvironmentTypeIdentityOutput values.
// You can construct a concrete instance of `GetProjectEnvironmentTypeIdentityInput` via:
//
//	GetProjectEnvironmentTypeIdentityArgs{...}
type GetProjectEnvironmentTypeIdentityInput interface {
	pulumi.Input

	ToGetProjectEnvironmentTypeIdentityOutput() GetProjectEnvironmentTypeIdentityOutput
	ToGetProjectEnvironmentTypeIdentityOutputWithContext(context.Context) GetProjectEnvironmentTypeIdentityOutput
}

type GetProjectEnvironmentTypeIdentityArgs struct {
	// The list of User Assigned Managed Identity IDs assigned to this Dev Center Project Environment Type.
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	// The Principal ID of the System Assigned Managed Service Identity that is configured on this Dev Center Project Environment Type.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The Tenant ID of the System Assigned Managed Service Identity that is configured on this Dev Center Project Environment Type.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The type of Managed Service Identity that is configured on this Dev Center Project Environment Type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetProjectEnvironmentTypeIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectEnvironmentTypeIdentity)(nil)).Elem()
}

func (i GetProjectEnvironmentTypeIdentityArgs) ToGetProjectEnvironmentTypeIdentityOutput() GetProjectEnvironmentTypeIdentityOutput {
	return i.ToGetProjectEnvironmentTypeIdentityOutputWithContext(context.Background())
}

func (i GetProjectEnvironmentTypeIdentityArgs) ToGetProjectEnvironmentTypeIdentityOutputWithContext(ctx context.Context) GetProjectEnvironmentTypeIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectEnvironmentTypeIdentityOutput)
}

// GetProjectEnvironmentTypeIdentityArrayInput is an input type that accepts GetProjectEnvironmentTypeIdentityArray and GetProjectEnvironmentTypeIdentityArrayOutput values.
// You can construct a concrete instance of `GetProjectEnvironmentTypeIdentityArrayInput` via:
//
//	GetProjectEnvironmentTypeIdentityArray{ GetProjectEnvironmentTypeIdentityArgs{...} }
type GetProjectEnvironmentTypeIdentityArrayInput interface {
	pulumi.Input

	ToGetProjectEnvironmentTypeIdentityArrayOutput() GetProjectEnvironmentTypeIdentityArrayOutput
	ToGetProjectEnvironmentTypeIdentityArrayOutputWithContext(context.Context) GetProjectEnvironmentTypeIdentityArrayOutput
}

type GetProjectEnvironmentTypeIdentityArray []GetProjectEnvironmentTypeIdentityInput

func (GetProjectEnvironmentTypeIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectEnvironmentTypeIdentity)(nil)).Elem()
}

func (i GetProjectEnvironmentTypeIdentityArray) ToGetProjectEnvironmentTypeIdentityArrayOutput() GetProjectEnvironmentTypeIdentityArrayOutput {
	return i.ToGetProjectEnvironmentTypeIdentityArrayOutputWithContext(context.Background())
}

func (i GetProjectEnvironmentTypeIdentityArray) ToGetProjectEnvironmentTypeIdentityArrayOutputWithContext(ctx context.Context) GetProjectEnvironmentTypeIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectEnvironmentTypeIdentityArrayOutput)
}

type GetProjectEnvironmentTypeIdentityOutput struct{ *pulumi.OutputState }

func (GetProjectEnvironmentTypeIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectEnvironmentTypeIdentity)(nil)).Elem()
}

func (o GetProjectEnvironmentTypeIdentityOutput) ToGetProjectEnvironmentTypeIdentityOutput() GetProjectEnvironmentTypeIdentityOutput {
	return o
}

func (o GetProjectEnvironmentTypeIdentityOutput) ToGetProjectEnvironmentTypeIdentityOutputWithContext(ctx context.Context) GetProjectEnvironmentTypeIdentityOutput {
	return o
}

// The list of User Assigned Managed Identity IDs assigned to this Dev Center Project Environment Type.
func (o GetProjectEnvironmentTypeIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetProjectEnvironmentTypeIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

// The Principal ID of the System Assigned Managed Service Identity that is configured on this Dev Center Project Environment Type.
func (o GetProjectEnvironmentTypeIdentityOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectEnvironmentTypeIdentity) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The Tenant ID of the System Assigned Managed Service Identity that is configured on this Dev Center Project Environment Type.
func (o GetProjectEnvironmentTypeIdentityOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectEnvironmentTypeIdentity) string { return v.TenantId }).(pulumi.StringOutput)
}

// The type of Managed Service Identity that is configured on this Dev Center Project Environment Type.
func (o GetProjectEnvironmentTypeIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectEnvironmentTypeIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type GetProjectEnvironmentTypeIdentityArrayOutput struct{ *pulumi.OutputState }

func (GetProjectEnvironmentTypeIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectEnvironmentTypeIdentity)(nil)).Elem()
}

func (o GetProjectEnvironmentTypeIdentityArrayOutput) ToGetProjectEnvironmentTypeIdentityArrayOutput() GetProjectEnvironmentTypeIdentityArrayOutput {
	return o
}

func (o GetProjectEnvironmentTypeIdentityArrayOutput) ToGetProjectEnvironmentTypeIdentityArrayOutputWithContext(ctx context.Context) GetProjectEnvironmentTypeIdentityArrayOutput {
	return o
}

func (o GetProjectEnvironmentTypeIdentityArrayOutput) Index(i pulumi.IntInput) GetProjectEnvironmentTypeIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectEnvironmentTypeIdentity {
		return vs[0].([]GetProjectEnvironmentTypeIdentity)[vs[1].(int)]
	}).(GetProjectEnvironmentTypeIdentityOutput)
}

type GetProjectEnvironmentTypeUserRoleAssignment struct {
	// A list of roles to assign to the `userId`.
	Roles []string `pulumi:"roles"`
	// The user object ID that is assigned roles.
	UserId string `pulumi:"userId"`
}

// GetProjectEnvironmentTypeUserRoleAssignmentInput is an input type that accepts GetProjectEnvironmentTypeUserRoleAssignmentArgs and GetProjectEnvironmentTypeUserRoleAssignmentOutput values.
// You can construct a concrete instance of `GetProjectEnvironmentTypeUserRoleAssignmentInput` via:
//
//	GetProjectEnvironmentTypeUserRoleAssignmentArgs{...}
type GetProjectEnvironmentTypeUserRoleAssignmentInput interface {
	pulumi.Input

	ToGetProjectEnvironmentTypeUserRoleAssignmentOutput() GetProjectEnvironmentTypeUserRoleAssignmentOutput
	ToGetProjectEnvironmentTypeUserRoleAssignmentOutputWithContext(context.Context) GetProjectEnvironmentTypeUserRoleAssignmentOutput
}

type GetProjectEnvironmentTypeUserRoleAssignmentArgs struct {
	// A list of roles to assign to the `userId`.
	Roles pulumi.StringArrayInput `pulumi:"roles"`
	// The user object ID that is assigned roles.
	UserId pulumi.StringInput `pulumi:"userId"`
}

func (GetProjectEnvironmentTypeUserRoleAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectEnvironmentTypeUserRoleAssignment)(nil)).Elem()
}

func (i GetProjectEnvironmentTypeUserRoleAssignmentArgs) ToGetProjectEnvironmentTypeUserRoleAssignmentOutput() GetProjectEnvironmentTypeUserRoleAssignmentOutput {
	return i.ToGetProjectEnvironmentTypeUserRoleAssignmentOutputWithContext(context.Background())
}

func (i GetProjectEnvironmentTypeUserRoleAssignmentArgs) ToGetProjectEnvironmentTypeUserRoleAssignmentOutputWithContext(ctx context.Context) GetProjectEnvironmentTypeUserRoleAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectEnvironmentTypeUserRoleAssignmentOutput)
}

// GetProjectEnvironmentTypeUserRoleAssignmentArrayInput is an input type that accepts GetProjectEnvironmentTypeUserRoleAssignmentArray and GetProjectEnvironmentTypeUserRoleAssignmentArrayOutput values.
// You can construct a concrete instance of `GetProjectEnvironmentTypeUserRoleAssignmentArrayInput` via:
//
//	GetProjectEnvironmentTypeUserRoleAssignmentArray{ GetProjectEnvironmentTypeUserRoleAssignmentArgs{...} }
type GetProjectEnvironmentTypeUserRoleAssignmentArrayInput interface {
	pulumi.Input

	ToGetProjectEnvironmentTypeUserRoleAssignmentArrayOutput() GetProjectEnvironmentTypeUserRoleAssignmentArrayOutput
	ToGetProjectEnvironmentTypeUserRoleAssignmentArrayOutputWithContext(context.Context) GetProjectEnvironmentTypeUserRoleAssignmentArrayOutput
}

type GetProjectEnvironmentTypeUserRoleAssignmentArray []GetProjectEnvironmentTypeUserRoleAssignmentInput

func (GetProjectEnvironmentTypeUserRoleAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectEnvironmentTypeUserRoleAssignment)(nil)).Elem()
}

func (i GetProjectEnvironmentTypeUserRoleAssignmentArray) ToGetProjectEnvironmentTypeUserRoleAssignmentArrayOutput() GetProjectEnvironmentTypeUserRoleAssignmentArrayOutput {
	return i.ToGetProjectEnvironmentTypeUserRoleAssignmentArrayOutputWithContext(context.Background())
}

func (i GetProjectEnvironmentTypeUserRoleAssignmentArray) ToGetProjectEnvironmentTypeUserRoleAssignmentArrayOutputWithContext(ctx context.Context) GetProjectEnvironmentTypeUserRoleAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectEnvironmentTypeUserRoleAssignmentArrayOutput)
}

type GetProjectEnvironmentTypeUserRoleAssignmentOutput struct{ *pulumi.OutputState }

func (GetProjectEnvironmentTypeUserRoleAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectEnvironmentTypeUserRoleAssignment)(nil)).Elem()
}

func (o GetProjectEnvironmentTypeUserRoleAssignmentOutput) ToGetProjectEnvironmentTypeUserRoleAssignmentOutput() GetProjectEnvironmentTypeUserRoleAssignmentOutput {
	return o
}

func (o GetProjectEnvironmentTypeUserRoleAssignmentOutput) ToGetProjectEnvironmentTypeUserRoleAssignmentOutputWithContext(ctx context.Context) GetProjectEnvironmentTypeUserRoleAssignmentOutput {
	return o
}

// A list of roles to assign to the `userId`.
func (o GetProjectEnvironmentTypeUserRoleAssignmentOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetProjectEnvironmentTypeUserRoleAssignment) []string { return v.Roles }).(pulumi.StringArrayOutput)
}

// The user object ID that is assigned roles.
func (o GetProjectEnvironmentTypeUserRoleAssignmentOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectEnvironmentTypeUserRoleAssignment) string { return v.UserId }).(pulumi.StringOutput)
}

type GetProjectEnvironmentTypeUserRoleAssignmentArrayOutput struct{ *pulumi.OutputState }

func (GetProjectEnvironmentTypeUserRoleAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectEnvironmentTypeUserRoleAssignment)(nil)).Elem()
}

func (o GetProjectEnvironmentTypeUserRoleAssignmentArrayOutput) ToGetProjectEnvironmentTypeUserRoleAssignmentArrayOutput() GetProjectEnvironmentTypeUserRoleAssignmentArrayOutput {
	return o
}

func (o GetProjectEnvironmentTypeUserRoleAssignmentArrayOutput) ToGetProjectEnvironmentTypeUserRoleAssignmentArrayOutputWithContext(ctx context.Context) GetProjectEnvironmentTypeUserRoleAssignmentArrayOutput {
	return o
}

func (o GetProjectEnvironmentTypeUserRoleAssignmentArrayOutput) Index(i pulumi.IntInput) GetProjectEnvironmentTypeUserRoleAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectEnvironmentTypeUserRoleAssignment {
		return vs[0].([]GetProjectEnvironmentTypeUserRoleAssignment)[vs[1].(int)]
	}).(GetProjectEnvironmentTypeUserRoleAssignmentOutput)
}

type GetProjectIdentity struct {
	// The list of User Assigned Managed Identity IDs assigned to this Dev Center Project.
	IdentityIds []string `pulumi:"identityIds"`
	// The Principal ID of the System Assigned Managed Service Identity that is configured on this Dev Center Project.
	PrincipalId string `pulumi:"principalId"`
	// The Tenant ID of the System Assigned Managed Service Identity that is configured on this Dev Center Project.
	TenantId string `pulumi:"tenantId"`
	// The type of Managed Service Identity that is configured on this Dev Center Project.
	Type string `pulumi:"type"`
}

// GetProjectIdentityInput is an input type that accepts GetProjectIdentityArgs and GetProjectIdentityOutput values.
// You can construct a concrete instance of `GetProjectIdentityInput` via:
//
//	GetProjectIdentityArgs{...}
type GetProjectIdentityInput interface {
	pulumi.Input

	ToGetProjectIdentityOutput() GetProjectIdentityOutput
	ToGetProjectIdentityOutputWithContext(context.Context) GetProjectIdentityOutput
}

type GetProjectIdentityArgs struct {
	// The list of User Assigned Managed Identity IDs assigned to this Dev Center Project.
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	// The Principal ID of the System Assigned Managed Service Identity that is configured on this Dev Center Project.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The Tenant ID of the System Assigned Managed Service Identity that is configured on this Dev Center Project.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The type of Managed Service Identity that is configured on this Dev Center Project.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetProjectIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectIdentity)(nil)).Elem()
}

func (i GetProjectIdentityArgs) ToGetProjectIdentityOutput() GetProjectIdentityOutput {
	return i.ToGetProjectIdentityOutputWithContext(context.Background())
}

func (i GetProjectIdentityArgs) ToGetProjectIdentityOutputWithContext(ctx context.Context) GetProjectIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectIdentityOutput)
}

// GetProjectIdentityArrayInput is an input type that accepts GetProjectIdentityArray and GetProjectIdentityArrayOutput values.
// You can construct a concrete instance of `GetProjectIdentityArrayInput` via:
//
//	GetProjectIdentityArray{ GetProjectIdentityArgs{...} }
type GetProjectIdentityArrayInput interface {
	pulumi.Input

	ToGetProjectIdentityArrayOutput() GetProjectIdentityArrayOutput
	ToGetProjectIdentityArrayOutputWithContext(context.Context) GetProjectIdentityArrayOutput
}

type GetProjectIdentityArray []GetProjectIdentityInput

func (GetProjectIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectIdentity)(nil)).Elem()
}

func (i GetProjectIdentityArray) ToGetProjectIdentityArrayOutput() GetProjectIdentityArrayOutput {
	return i.ToGetProjectIdentityArrayOutputWithContext(context.Background())
}

func (i GetProjectIdentityArray) ToGetProjectIdentityArrayOutputWithContext(ctx context.Context) GetProjectIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectIdentityArrayOutput)
}

type GetProjectIdentityOutput struct{ *pulumi.OutputState }

func (GetProjectIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectIdentity)(nil)).Elem()
}

func (o GetProjectIdentityOutput) ToGetProjectIdentityOutput() GetProjectIdentityOutput {
	return o
}

func (o GetProjectIdentityOutput) ToGetProjectIdentityOutputWithContext(ctx context.Context) GetProjectIdentityOutput {
	return o
}

// The list of User Assigned Managed Identity IDs assigned to this Dev Center Project.
func (o GetProjectIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetProjectIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

// The Principal ID of the System Assigned Managed Service Identity that is configured on this Dev Center Project.
func (o GetProjectIdentityOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIdentity) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The Tenant ID of the System Assigned Managed Service Identity that is configured on this Dev Center Project.
func (o GetProjectIdentityOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIdentity) string { return v.TenantId }).(pulumi.StringOutput)
}

// The type of Managed Service Identity that is configured on this Dev Center Project.
func (o GetProjectIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type GetProjectIdentityArrayOutput struct{ *pulumi.OutputState }

func (GetProjectIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectIdentity)(nil)).Elem()
}

func (o GetProjectIdentityArrayOutput) ToGetProjectIdentityArrayOutput() GetProjectIdentityArrayOutput {
	return o
}

func (o GetProjectIdentityArrayOutput) ToGetProjectIdentityArrayOutputWithContext(ctx context.Context) GetProjectIdentityArrayOutput {
	return o
}

func (o GetProjectIdentityArrayOutput) Index(i pulumi.IntInput) GetProjectIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectIdentity {
		return vs[0].([]GetProjectIdentity)[vs[1].(int)]
	}).(GetProjectIdentityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogCatalogAdogitInput)(nil)).Elem(), CatalogCatalogAdogitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogCatalogAdogitPtrInput)(nil)).Elem(), CatalogCatalogAdogitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogCatalogGithubInput)(nil)).Elem(), CatalogCatalogGithubArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogCatalogGithubPtrInput)(nil)).Elem(), CatalogCatalogGithubArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevCenterIdentityInput)(nil)).Elem(), DevCenterIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevCenterIdentityPtrInput)(nil)).Elem(), DevCenterIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectEnvironmentTypeIdentityInput)(nil)).Elem(), ProjectEnvironmentTypeIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectEnvironmentTypeIdentityPtrInput)(nil)).Elem(), ProjectEnvironmentTypeIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectEnvironmentTypeUserRoleAssignmentInput)(nil)).Elem(), ProjectEnvironmentTypeUserRoleAssignmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectEnvironmentTypeUserRoleAssignmentArrayInput)(nil)).Elem(), ProjectEnvironmentTypeUserRoleAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIdentityInput)(nil)).Elem(), ProjectIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIdentityPtrInput)(nil)).Elem(), ProjectIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCatalogCatalogAdogitInput)(nil)).Elem(), GetCatalogCatalogAdogitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCatalogCatalogAdogitArrayInput)(nil)).Elem(), GetCatalogCatalogAdogitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCatalogCatalogGithubInput)(nil)).Elem(), GetCatalogCatalogGithubArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCatalogCatalogGithubArrayInput)(nil)).Elem(), GetCatalogCatalogGithubArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIdentityInput)(nil)).Elem(), GetIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIdentityArrayInput)(nil)).Elem(), GetIdentityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectEnvironmentTypeIdentityInput)(nil)).Elem(), GetProjectEnvironmentTypeIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectEnvironmentTypeIdentityArrayInput)(nil)).Elem(), GetProjectEnvironmentTypeIdentityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectEnvironmentTypeUserRoleAssignmentInput)(nil)).Elem(), GetProjectEnvironmentTypeUserRoleAssignmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectEnvironmentTypeUserRoleAssignmentArrayInput)(nil)).Elem(), GetProjectEnvironmentTypeUserRoleAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectIdentityInput)(nil)).Elem(), GetProjectIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectIdentityArrayInput)(nil)).Elem(), GetProjectIdentityArray{})
	pulumi.RegisterOutputType(CatalogCatalogAdogitOutput{})
	pulumi.RegisterOutputType(CatalogCatalogAdogitPtrOutput{})
	pulumi.RegisterOutputType(CatalogCatalogGithubOutput{})
	pulumi.RegisterOutputType(CatalogCatalogGithubPtrOutput{})
	pulumi.RegisterOutputType(DevCenterIdentityOutput{})
	pulumi.RegisterOutputType(DevCenterIdentityPtrOutput{})
	pulumi.RegisterOutputType(ProjectEnvironmentTypeIdentityOutput{})
	pulumi.RegisterOutputType(ProjectEnvironmentTypeIdentityPtrOutput{})
	pulumi.RegisterOutputType(ProjectEnvironmentTypeUserRoleAssignmentOutput{})
	pulumi.RegisterOutputType(ProjectEnvironmentTypeUserRoleAssignmentArrayOutput{})
	pulumi.RegisterOutputType(ProjectIdentityOutput{})
	pulumi.RegisterOutputType(ProjectIdentityPtrOutput{})
	pulumi.RegisterOutputType(GetCatalogCatalogAdogitOutput{})
	pulumi.RegisterOutputType(GetCatalogCatalogAdogitArrayOutput{})
	pulumi.RegisterOutputType(GetCatalogCatalogGithubOutput{})
	pulumi.RegisterOutputType(GetCatalogCatalogGithubArrayOutput{})
	pulumi.RegisterOutputType(GetIdentityOutput{})
	pulumi.RegisterOutputType(GetIdentityArrayOutput{})
	pulumi.RegisterOutputType(GetProjectEnvironmentTypeIdentityOutput{})
	pulumi.RegisterOutputType(GetProjectEnvironmentTypeIdentityArrayOutput{})
	pulumi.RegisterOutputType(GetProjectEnvironmentTypeUserRoleAssignmentOutput{})
	pulumi.RegisterOutputType(GetProjectEnvironmentTypeUserRoleAssignmentArrayOutput{})
	pulumi.RegisterOutputType(GetProjectIdentityOutput{})
	pulumi.RegisterOutputType(GetProjectIdentityArrayOutput{})
}
