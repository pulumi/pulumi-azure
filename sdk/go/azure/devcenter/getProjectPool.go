// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devcenter

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Dev Center Project Pool.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/devcenter"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := devcenter.LookupProjectPool(ctx, &devcenter.LookupProjectPoolArgs{
//				Name:               exampleAzurermDevCenterProjectPool.Name,
//				DevCenterProjectId: exampleAzurermDevCenterProjectPool.DevCenterProjectId,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("id", example.Id)
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This data source uses the following Azure API Providers:
//
// * `Microsoft.DevCenter` - 2025-02-01
func LookupProjectPool(ctx *pulumi.Context, args *LookupProjectPoolArgs, opts ...pulumi.InvokeOption) (*LookupProjectPoolResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupProjectPoolResult
	err := ctx.Invoke("azure:devcenter/getProjectPool:getProjectPool", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProjectPool.
type LookupProjectPoolArgs struct {
	// The ID of the associated Dev Center Project.
	DevCenterProjectId string `pulumi:"devCenterProjectId"`
	// The name of this Dev Center Project Pool.
	Name string `pulumi:"name"`
}

// A collection of values returned by getProjectPool.
type LookupProjectPoolResult struct {
	// The name of the Dev Center Dev Box Definition.
	DevBoxDefinitionName string `pulumi:"devBoxDefinitionName"`
	// The name of the Dev Center Attached Network in parent Project of the Dev Center Project Pool.
	DevCenterAttachedNetworkName string `pulumi:"devCenterAttachedNetworkName"`
	DevCenterProjectId           string `pulumi:"devCenterProjectId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Specifies whether owners of Dev Boxes in the Dev Center Project Pool are added as local administrators on the Dev Box.
	LocalAdministratorEnabled bool `pulumi:"localAdministratorEnabled"`
	// The Azure Region where the Dev Center Project Pool exists.
	Location string `pulumi:"location"`
	Name     string `pulumi:"name"`
	// Specifies whether Dev Boxes in the Pool will have SSO enabled or disabled.
	SingleSignOnEnabled bool `pulumi:"singleSignOnEnabled"`
	// The specified time in minutes to wait before stopping a Dev Center Dev Box once disconnect is detected.
	StopOnDisconnectGracePeriodMinutes int `pulumi:"stopOnDisconnectGracePeriodMinutes"`
	// A mapping of tags assigned to the Dev Center Project Pool.
	Tags map[string]string `pulumi:"tags"`
}

func LookupProjectPoolOutput(ctx *pulumi.Context, args LookupProjectPoolOutputArgs, opts ...pulumi.InvokeOption) LookupProjectPoolResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupProjectPoolResultOutput, error) {
			args := v.(LookupProjectPoolArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure:devcenter/getProjectPool:getProjectPool", args, LookupProjectPoolResultOutput{}, options).(LookupProjectPoolResultOutput), nil
		}).(LookupProjectPoolResultOutput)
}

// A collection of arguments for invoking getProjectPool.
type LookupProjectPoolOutputArgs struct {
	// The ID of the associated Dev Center Project.
	DevCenterProjectId pulumi.StringInput `pulumi:"devCenterProjectId"`
	// The name of this Dev Center Project Pool.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupProjectPoolOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectPoolArgs)(nil)).Elem()
}

// A collection of values returned by getProjectPool.
type LookupProjectPoolResultOutput struct{ *pulumi.OutputState }

func (LookupProjectPoolResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectPoolResult)(nil)).Elem()
}

func (o LookupProjectPoolResultOutput) ToLookupProjectPoolResultOutput() LookupProjectPoolResultOutput {
	return o
}

func (o LookupProjectPoolResultOutput) ToLookupProjectPoolResultOutputWithContext(ctx context.Context) LookupProjectPoolResultOutput {
	return o
}

// The name of the Dev Center Dev Box Definition.
func (o LookupProjectPoolResultOutput) DevBoxDefinitionName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectPoolResult) string { return v.DevBoxDefinitionName }).(pulumi.StringOutput)
}

// The name of the Dev Center Attached Network in parent Project of the Dev Center Project Pool.
func (o LookupProjectPoolResultOutput) DevCenterAttachedNetworkName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectPoolResult) string { return v.DevCenterAttachedNetworkName }).(pulumi.StringOutput)
}

func (o LookupProjectPoolResultOutput) DevCenterProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectPoolResult) string { return v.DevCenterProjectId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupProjectPoolResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectPoolResult) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies whether owners of Dev Boxes in the Dev Center Project Pool are added as local administrators on the Dev Box.
func (o LookupProjectPoolResultOutput) LocalAdministratorEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProjectPoolResult) bool { return v.LocalAdministratorEnabled }).(pulumi.BoolOutput)
}

// The Azure Region where the Dev Center Project Pool exists.
func (o LookupProjectPoolResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectPoolResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o LookupProjectPoolResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectPoolResult) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies whether Dev Boxes in the Pool will have SSO enabled or disabled.
func (o LookupProjectPoolResultOutput) SingleSignOnEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProjectPoolResult) bool { return v.SingleSignOnEnabled }).(pulumi.BoolOutput)
}

// The specified time in minutes to wait before stopping a Dev Center Dev Box once disconnect is detected.
func (o LookupProjectPoolResultOutput) StopOnDisconnectGracePeriodMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProjectPoolResult) int { return v.StopOnDisconnectGracePeriodMinutes }).(pulumi.IntOutput)
}

// A mapping of tags assigned to the Dev Center Project Pool.
func (o LookupProjectPoolResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupProjectPoolResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupProjectPoolResultOutput{})
}
