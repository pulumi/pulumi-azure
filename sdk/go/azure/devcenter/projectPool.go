// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devcenter

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Dev Center Project Pool.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/devcenter"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resources"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleDevCenter, err := devcenter.NewDevCenter(ctx, "example", &devcenter.DevCenterArgs{
//				Name:              pulumi.String("example-dc"),
//				ResourceGroupName: example.Name,
//				Location:          example.Location,
//				Identity: &devcenter.DevCenterIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "example", &network.VirtualNetworkArgs{
//				Name: pulumi.String("example-vnet"),
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//			})
//			if err != nil {
//				return err
//			}
//			exampleSubnet, err := network.NewSubnet(ctx, "example", &network.SubnetArgs{
//				Name:               pulumi.String("internal"),
//				ResourceGroupName:  example.Name,
//				VirtualNetworkName: exampleVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.0.2.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleNetworkConnection, err := devcenter.NewNetworkConnection(ctx, "example", &devcenter.NetworkConnectionArgs{
//				Name:              pulumi.String("example-dcnc"),
//				ResourceGroupName: example.Name,
//				Location:          example.Location,
//				SubnetId:          exampleSubnet.ID(),
//				DomainJoinType:    pulumi.String("AzureADJoin"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAttachedNetwork, err := devcenter.NewAttachedNetwork(ctx, "example", &devcenter.AttachedNetworkArgs{
//				Name:                pulumi.String("example-dcet"),
//				DevCenterId:         exampleDevCenter.ID(),
//				NetworkConnectionId: exampleNetworkConnection.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			exampleProject, err := devcenter.NewProject(ctx, "example", &devcenter.ProjectArgs{
//				Name:              pulumi.String("example-dcp"),
//				ResourceGroupName: example.Name,
//				Location:          example.Location,
//				DevCenterId:       exampleDevCenter.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			exampleDevBoxDefinition, err := devcenter.NewDevBoxDefinition(ctx, "example", &devcenter.DevBoxDefinitionArgs{
//				Name:        pulumi.String("example-dcet"),
//				Location:    example.Location,
//				DevCenterId: exampleDevCenter.ID(),
//				ImageReferenceId: exampleDevCenter.ID().ApplyT(func(id string) (string, error) {
//					return fmt.Sprintf("%v/galleries/default/images/microsoftvisualstudio_visualstudioplustools_vs-2022-ent-general-win10-m365-gen2", id), nil
//				}).(pulumi.StringOutput),
//				SkuName: pulumi.String("general_i_8c32gb256ssd_v2"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = devcenter.NewProjectPool(ctx, "example", &devcenter.ProjectPoolArgs{
//				Name:                               pulumi.String("example-dcpl"),
//				Location:                           example.Location,
//				DevCenterProjectId:                 exampleProject.ID(),
//				DevBoxDefinitionName:               exampleDevBoxDefinition.Name,
//				LocalAdministratorEnabled:          pulumi.Bool(true),
//				DevCenterAttachedNetworkName:       exampleAttachedNetwork.Name,
//				StopOnDisconnectGracePeriodMinutes: pulumi.Int(60),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This resource uses the following Azure API Providers:
//
// * `Microsoft.DevCenter` - 2025-02-01
//
// ## Import
//
// An existing Dev Center Project Pool can be imported into Pulumi using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:devcenter/projectPool:ProjectPool example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DevCenter/projects/project1/pools/pool1
// ```
type ProjectPool struct {
	pulumi.CustomResourceState

	// The name of the Dev Center Dev Box Definition.
	DevBoxDefinitionName pulumi.StringOutput `pulumi:"devBoxDefinitionName"`
	// The name of the Dev Center Attached Network in parent Project of the Dev Center Project Pool.
	DevCenterAttachedNetworkName pulumi.StringOutput `pulumi:"devCenterAttachedNetworkName"`
	// The ID of the associated Dev Center Project. Changing this forces a new resource to be created.
	DevCenterProjectId pulumi.StringOutput `pulumi:"devCenterProjectId"`
	// Specifies whether owners of Dev Boxes in the Dev Center Project Pool are added as local administrators on the Dev Box.
	LocalAdministratorEnabled pulumi.BoolOutput `pulumi:"localAdministratorEnabled"`
	// The Azure Region where the Dev Center Project Pool should exist. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// A list of the regions of the managed Virtual Network. When specified, the Dev Center Project Pool will use a Microsoft managed network.
	//
	// > **Note:** Currently only one region can be specified for `managedVirtualNetworkRegions`.
	ManagedVirtualNetworkRegions pulumi.StringPtrOutput `pulumi:"managedVirtualNetworkRegions"`
	// Specifies the name of this Dev Center Project Pool. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The specified time in minutes to wait before stopping a Dev Center Dev Box once disconnect is detected. Possible values are between `60` and `480`.
	StopOnDisconnectGracePeriodMinutes pulumi.IntPtrOutput `pulumi:"stopOnDisconnectGracePeriodMinutes"`
	// A mapping of tags which should be assigned to the Dev Center Project Pool.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewProjectPool registers a new resource with the given unique name, arguments, and options.
func NewProjectPool(ctx *pulumi.Context,
	name string, args *ProjectPoolArgs, opts ...pulumi.ResourceOption) (*ProjectPool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DevBoxDefinitionName == nil {
		return nil, errors.New("invalid value for required argument 'DevBoxDefinitionName'")
	}
	if args.DevCenterAttachedNetworkName == nil {
		return nil, errors.New("invalid value for required argument 'DevCenterAttachedNetworkName'")
	}
	if args.DevCenterProjectId == nil {
		return nil, errors.New("invalid value for required argument 'DevCenterProjectId'")
	}
	if args.LocalAdministratorEnabled == nil {
		return nil, errors.New("invalid value for required argument 'LocalAdministratorEnabled'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectPool
	err := ctx.RegisterResource("azure:devcenter/projectPool:ProjectPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectPool gets an existing ProjectPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectPoolState, opts ...pulumi.ResourceOption) (*ProjectPool, error) {
	var resource ProjectPool
	err := ctx.ReadResource("azure:devcenter/projectPool:ProjectPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectPool resources.
type projectPoolState struct {
	// The name of the Dev Center Dev Box Definition.
	DevBoxDefinitionName *string `pulumi:"devBoxDefinitionName"`
	// The name of the Dev Center Attached Network in parent Project of the Dev Center Project Pool.
	DevCenterAttachedNetworkName *string `pulumi:"devCenterAttachedNetworkName"`
	// The ID of the associated Dev Center Project. Changing this forces a new resource to be created.
	DevCenterProjectId *string `pulumi:"devCenterProjectId"`
	// Specifies whether owners of Dev Boxes in the Dev Center Project Pool are added as local administrators on the Dev Box.
	LocalAdministratorEnabled *bool `pulumi:"localAdministratorEnabled"`
	// The Azure Region where the Dev Center Project Pool should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// A list of the regions of the managed Virtual Network. When specified, the Dev Center Project Pool will use a Microsoft managed network.
	//
	// > **Note:** Currently only one region can be specified for `managedVirtualNetworkRegions`.
	ManagedVirtualNetworkRegions *string `pulumi:"managedVirtualNetworkRegions"`
	// Specifies the name of this Dev Center Project Pool. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The specified time in minutes to wait before stopping a Dev Center Dev Box once disconnect is detected. Possible values are between `60` and `480`.
	StopOnDisconnectGracePeriodMinutes *int `pulumi:"stopOnDisconnectGracePeriodMinutes"`
	// A mapping of tags which should be assigned to the Dev Center Project Pool.
	Tags map[string]string `pulumi:"tags"`
}

type ProjectPoolState struct {
	// The name of the Dev Center Dev Box Definition.
	DevBoxDefinitionName pulumi.StringPtrInput
	// The name of the Dev Center Attached Network in parent Project of the Dev Center Project Pool.
	DevCenterAttachedNetworkName pulumi.StringPtrInput
	// The ID of the associated Dev Center Project. Changing this forces a new resource to be created.
	DevCenterProjectId pulumi.StringPtrInput
	// Specifies whether owners of Dev Boxes in the Dev Center Project Pool are added as local administrators on the Dev Box.
	LocalAdministratorEnabled pulumi.BoolPtrInput
	// The Azure Region where the Dev Center Project Pool should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// A list of the regions of the managed Virtual Network. When specified, the Dev Center Project Pool will use a Microsoft managed network.
	//
	// > **Note:** Currently only one region can be specified for `managedVirtualNetworkRegions`.
	ManagedVirtualNetworkRegions pulumi.StringPtrInput
	// Specifies the name of this Dev Center Project Pool. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The specified time in minutes to wait before stopping a Dev Center Dev Box once disconnect is detected. Possible values are between `60` and `480`.
	StopOnDisconnectGracePeriodMinutes pulumi.IntPtrInput
	// A mapping of tags which should be assigned to the Dev Center Project Pool.
	Tags pulumi.StringMapInput
}

func (ProjectPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectPoolState)(nil)).Elem()
}

type projectPoolArgs struct {
	// The name of the Dev Center Dev Box Definition.
	DevBoxDefinitionName string `pulumi:"devBoxDefinitionName"`
	// The name of the Dev Center Attached Network in parent Project of the Dev Center Project Pool.
	DevCenterAttachedNetworkName string `pulumi:"devCenterAttachedNetworkName"`
	// The ID of the associated Dev Center Project. Changing this forces a new resource to be created.
	DevCenterProjectId string `pulumi:"devCenterProjectId"`
	// Specifies whether owners of Dev Boxes in the Dev Center Project Pool are added as local administrators on the Dev Box.
	LocalAdministratorEnabled bool `pulumi:"localAdministratorEnabled"`
	// The Azure Region where the Dev Center Project Pool should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// A list of the regions of the managed Virtual Network. When specified, the Dev Center Project Pool will use a Microsoft managed network.
	//
	// > **Note:** Currently only one region can be specified for `managedVirtualNetworkRegions`.
	ManagedVirtualNetworkRegions *string `pulumi:"managedVirtualNetworkRegions"`
	// Specifies the name of this Dev Center Project Pool. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The specified time in minutes to wait before stopping a Dev Center Dev Box once disconnect is detected. Possible values are between `60` and `480`.
	StopOnDisconnectGracePeriodMinutes *int `pulumi:"stopOnDisconnectGracePeriodMinutes"`
	// A mapping of tags which should be assigned to the Dev Center Project Pool.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ProjectPool resource.
type ProjectPoolArgs struct {
	// The name of the Dev Center Dev Box Definition.
	DevBoxDefinitionName pulumi.StringInput
	// The name of the Dev Center Attached Network in parent Project of the Dev Center Project Pool.
	DevCenterAttachedNetworkName pulumi.StringInput
	// The ID of the associated Dev Center Project. Changing this forces a new resource to be created.
	DevCenterProjectId pulumi.StringInput
	// Specifies whether owners of Dev Boxes in the Dev Center Project Pool are added as local administrators on the Dev Box.
	LocalAdministratorEnabled pulumi.BoolInput
	// The Azure Region where the Dev Center Project Pool should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// A list of the regions of the managed Virtual Network. When specified, the Dev Center Project Pool will use a Microsoft managed network.
	//
	// > **Note:** Currently only one region can be specified for `managedVirtualNetworkRegions`.
	ManagedVirtualNetworkRegions pulumi.StringPtrInput
	// Specifies the name of this Dev Center Project Pool. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The specified time in minutes to wait before stopping a Dev Center Dev Box once disconnect is detected. Possible values are between `60` and `480`.
	StopOnDisconnectGracePeriodMinutes pulumi.IntPtrInput
	// A mapping of tags which should be assigned to the Dev Center Project Pool.
	Tags pulumi.StringMapInput
}

func (ProjectPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectPoolArgs)(nil)).Elem()
}

type ProjectPoolInput interface {
	pulumi.Input

	ToProjectPoolOutput() ProjectPoolOutput
	ToProjectPoolOutputWithContext(ctx context.Context) ProjectPoolOutput
}

func (*ProjectPool) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectPool)(nil)).Elem()
}

func (i *ProjectPool) ToProjectPoolOutput() ProjectPoolOutput {
	return i.ToProjectPoolOutputWithContext(context.Background())
}

func (i *ProjectPool) ToProjectPoolOutputWithContext(ctx context.Context) ProjectPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectPoolOutput)
}

// ProjectPoolArrayInput is an input type that accepts ProjectPoolArray and ProjectPoolArrayOutput values.
// You can construct a concrete instance of `ProjectPoolArrayInput` via:
//
//	ProjectPoolArray{ ProjectPoolArgs{...} }
type ProjectPoolArrayInput interface {
	pulumi.Input

	ToProjectPoolArrayOutput() ProjectPoolArrayOutput
	ToProjectPoolArrayOutputWithContext(context.Context) ProjectPoolArrayOutput
}

type ProjectPoolArray []ProjectPoolInput

func (ProjectPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectPool)(nil)).Elem()
}

func (i ProjectPoolArray) ToProjectPoolArrayOutput() ProjectPoolArrayOutput {
	return i.ToProjectPoolArrayOutputWithContext(context.Background())
}

func (i ProjectPoolArray) ToProjectPoolArrayOutputWithContext(ctx context.Context) ProjectPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectPoolArrayOutput)
}

// ProjectPoolMapInput is an input type that accepts ProjectPoolMap and ProjectPoolMapOutput values.
// You can construct a concrete instance of `ProjectPoolMapInput` via:
//
//	ProjectPoolMap{ "key": ProjectPoolArgs{...} }
type ProjectPoolMapInput interface {
	pulumi.Input

	ToProjectPoolMapOutput() ProjectPoolMapOutput
	ToProjectPoolMapOutputWithContext(context.Context) ProjectPoolMapOutput
}

type ProjectPoolMap map[string]ProjectPoolInput

func (ProjectPoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectPool)(nil)).Elem()
}

func (i ProjectPoolMap) ToProjectPoolMapOutput() ProjectPoolMapOutput {
	return i.ToProjectPoolMapOutputWithContext(context.Background())
}

func (i ProjectPoolMap) ToProjectPoolMapOutputWithContext(ctx context.Context) ProjectPoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectPoolMapOutput)
}

type ProjectPoolOutput struct{ *pulumi.OutputState }

func (ProjectPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectPool)(nil)).Elem()
}

func (o ProjectPoolOutput) ToProjectPoolOutput() ProjectPoolOutput {
	return o
}

func (o ProjectPoolOutput) ToProjectPoolOutputWithContext(ctx context.Context) ProjectPoolOutput {
	return o
}

// The name of the Dev Center Dev Box Definition.
func (o ProjectPoolOutput) DevBoxDefinitionName() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectPool) pulumi.StringOutput { return v.DevBoxDefinitionName }).(pulumi.StringOutput)
}

// The name of the Dev Center Attached Network in parent Project of the Dev Center Project Pool.
func (o ProjectPoolOutput) DevCenterAttachedNetworkName() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectPool) pulumi.StringOutput { return v.DevCenterAttachedNetworkName }).(pulumi.StringOutput)
}

// The ID of the associated Dev Center Project. Changing this forces a new resource to be created.
func (o ProjectPoolOutput) DevCenterProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectPool) pulumi.StringOutput { return v.DevCenterProjectId }).(pulumi.StringOutput)
}

// Specifies whether owners of Dev Boxes in the Dev Center Project Pool are added as local administrators on the Dev Box.
func (o ProjectPoolOutput) LocalAdministratorEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProjectPool) pulumi.BoolOutput { return v.LocalAdministratorEnabled }).(pulumi.BoolOutput)
}

// The Azure Region where the Dev Center Project Pool should exist. Changing this forces a new resource to be created.
func (o ProjectPoolOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectPool) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// A list of the regions of the managed Virtual Network. When specified, the Dev Center Project Pool will use a Microsoft managed network.
//
// > **Note:** Currently only one region can be specified for `managedVirtualNetworkRegions`.
func (o ProjectPoolOutput) ManagedVirtualNetworkRegions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectPool) pulumi.StringPtrOutput { return v.ManagedVirtualNetworkRegions }).(pulumi.StringPtrOutput)
}

// Specifies the name of this Dev Center Project Pool. Changing this forces a new resource to be created.
func (o ProjectPoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectPool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The specified time in minutes to wait before stopping a Dev Center Dev Box once disconnect is detected. Possible values are between `60` and `480`.
func (o ProjectPoolOutput) StopOnDisconnectGracePeriodMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProjectPool) pulumi.IntPtrOutput { return v.StopOnDisconnectGracePeriodMinutes }).(pulumi.IntPtrOutput)
}

// A mapping of tags which should be assigned to the Dev Center Project Pool.
func (o ProjectPoolOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ProjectPool) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type ProjectPoolArrayOutput struct{ *pulumi.OutputState }

func (ProjectPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectPool)(nil)).Elem()
}

func (o ProjectPoolArrayOutput) ToProjectPoolArrayOutput() ProjectPoolArrayOutput {
	return o
}

func (o ProjectPoolArrayOutput) ToProjectPoolArrayOutputWithContext(ctx context.Context) ProjectPoolArrayOutput {
	return o
}

func (o ProjectPoolArrayOutput) Index(i pulumi.IntInput) ProjectPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectPool {
		return vs[0].([]*ProjectPool)[vs[1].(int)]
	}).(ProjectPoolOutput)
}

type ProjectPoolMapOutput struct{ *pulumi.OutputState }

func (ProjectPoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectPool)(nil)).Elem()
}

func (o ProjectPoolMapOutput) ToProjectPoolMapOutput() ProjectPoolMapOutput {
	return o
}

func (o ProjectPoolMapOutput) ToProjectPoolMapOutputWithContext(ctx context.Context) ProjectPoolMapOutput {
	return o
}

func (o ProjectPoolMapOutput) MapIndex(k pulumi.StringInput) ProjectPoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectPool {
		return vs[0].(map[string]*ProjectPool)[vs[1].(string)]
	}).(ProjectPoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectPoolInput)(nil)).Elem(), &ProjectPool{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectPoolArrayInput)(nil)).Elem(), ProjectPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectPoolMapInput)(nil)).Elem(), ProjectPoolMap{})
	pulumi.RegisterOutputType(ProjectPoolOutput{})
	pulumi.RegisterOutputType(ProjectPoolArrayOutput{})
	pulumi.RegisterOutputType(ProjectPoolMapOutput{})
}
