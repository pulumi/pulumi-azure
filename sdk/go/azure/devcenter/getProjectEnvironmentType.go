// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devcenter

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Dev Center Project Environment Type.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/devcenter"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := devcenter.LookupProjectEnvironmentType(ctx, &devcenter.LookupProjectEnvironmentTypeArgs{
//				Name:               exampleAzurermDevCenterProjectEnvironmentType.Name,
//				DevCenterProjectId: exampleAzurermDevCenterProjectEnvironmentType.DevCenterProjectId,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("id", example.Id)
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This data source uses the following Azure API Providers:
//
// * `Microsoft.DevCenter`: 2025-02-01
func LookupProjectEnvironmentType(ctx *pulumi.Context, args *LookupProjectEnvironmentTypeArgs, opts ...pulumi.InvokeOption) (*LookupProjectEnvironmentTypeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupProjectEnvironmentTypeResult
	err := ctx.Invoke("azure:devcenter/getProjectEnvironmentType:getProjectEnvironmentType", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProjectEnvironmentType.
type LookupProjectEnvironmentTypeArgs struct {
	// The ID of the associated Dev Center Project.
	DevCenterProjectId string `pulumi:"devCenterProjectId"`
	// The name of this Dev Center Project Environment Type.
	Name string `pulumi:"name"`
}

// A collection of values returned by getProjectEnvironmentType.
type LookupProjectEnvironmentTypeResult struct {
	// A list of roles assigned to the environment creator.
	CreatorRoleAssignmentRoles []string `pulumi:"creatorRoleAssignmentRoles"`
	// The ID of the subscription that the Environment Type is mapped to.
	DeploymentTargetId string `pulumi:"deploymentTargetId"`
	DevCenterProjectId string `pulumi:"devCenterProjectId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// An `identity` block as defined below.
	Identities []GetProjectEnvironmentTypeIdentity `pulumi:"identities"`
	// The Azure Region where the Dev Center Project Environment Type exists.
	Location string `pulumi:"location"`
	Name     string `pulumi:"name"`
	// A mapping of tags assigned to the Dev Center Project Environment Type.
	Tags map[string]string `pulumi:"tags"`
	// A `userRoleAssignment` block as defined below.
	UserRoleAssignments []GetProjectEnvironmentTypeUserRoleAssignment `pulumi:"userRoleAssignments"`
}

func LookupProjectEnvironmentTypeOutput(ctx *pulumi.Context, args LookupProjectEnvironmentTypeOutputArgs, opts ...pulumi.InvokeOption) LookupProjectEnvironmentTypeResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupProjectEnvironmentTypeResultOutput, error) {
			args := v.(LookupProjectEnvironmentTypeArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure:devcenter/getProjectEnvironmentType:getProjectEnvironmentType", args, LookupProjectEnvironmentTypeResultOutput{}, options).(LookupProjectEnvironmentTypeResultOutput), nil
		}).(LookupProjectEnvironmentTypeResultOutput)
}

// A collection of arguments for invoking getProjectEnvironmentType.
type LookupProjectEnvironmentTypeOutputArgs struct {
	// The ID of the associated Dev Center Project.
	DevCenterProjectId pulumi.StringInput `pulumi:"devCenterProjectId"`
	// The name of this Dev Center Project Environment Type.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupProjectEnvironmentTypeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectEnvironmentTypeArgs)(nil)).Elem()
}

// A collection of values returned by getProjectEnvironmentType.
type LookupProjectEnvironmentTypeResultOutput struct{ *pulumi.OutputState }

func (LookupProjectEnvironmentTypeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectEnvironmentTypeResult)(nil)).Elem()
}

func (o LookupProjectEnvironmentTypeResultOutput) ToLookupProjectEnvironmentTypeResultOutput() LookupProjectEnvironmentTypeResultOutput {
	return o
}

func (o LookupProjectEnvironmentTypeResultOutput) ToLookupProjectEnvironmentTypeResultOutputWithContext(ctx context.Context) LookupProjectEnvironmentTypeResultOutput {
	return o
}

// A list of roles assigned to the environment creator.
func (o LookupProjectEnvironmentTypeResultOutput) CreatorRoleAssignmentRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupProjectEnvironmentTypeResult) []string { return v.CreatorRoleAssignmentRoles }).(pulumi.StringArrayOutput)
}

// The ID of the subscription that the Environment Type is mapped to.
func (o LookupProjectEnvironmentTypeResultOutput) DeploymentTargetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectEnvironmentTypeResult) string { return v.DeploymentTargetId }).(pulumi.StringOutput)
}

func (o LookupProjectEnvironmentTypeResultOutput) DevCenterProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectEnvironmentTypeResult) string { return v.DevCenterProjectId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupProjectEnvironmentTypeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectEnvironmentTypeResult) string { return v.Id }).(pulumi.StringOutput)
}

// An `identity` block as defined below.
func (o LookupProjectEnvironmentTypeResultOutput) Identities() GetProjectEnvironmentTypeIdentityArrayOutput {
	return o.ApplyT(func(v LookupProjectEnvironmentTypeResult) []GetProjectEnvironmentTypeIdentity { return v.Identities }).(GetProjectEnvironmentTypeIdentityArrayOutput)
}

// The Azure Region where the Dev Center Project Environment Type exists.
func (o LookupProjectEnvironmentTypeResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectEnvironmentTypeResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o LookupProjectEnvironmentTypeResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectEnvironmentTypeResult) string { return v.Name }).(pulumi.StringOutput)
}

// A mapping of tags assigned to the Dev Center Project Environment Type.
func (o LookupProjectEnvironmentTypeResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupProjectEnvironmentTypeResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// A `userRoleAssignment` block as defined below.
func (o LookupProjectEnvironmentTypeResultOutput) UserRoleAssignments() GetProjectEnvironmentTypeUserRoleAssignmentArrayOutput {
	return o.ApplyT(func(v LookupProjectEnvironmentTypeResult) []GetProjectEnvironmentTypeUserRoleAssignment {
		return v.UserRoleAssignments
	}).(GetProjectEnvironmentTypeUserRoleAssignmentArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupProjectEnvironmentTypeResultOutput{})
}
