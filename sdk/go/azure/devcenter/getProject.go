// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devcenter

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Dev Center Project.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/devcenter"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := devcenter.LookupProject(ctx, &devcenter.LookupProjectArgs{
//				Name:              "example",
//				ResourceGroupName: "example-resource-group",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("id", example.Id)
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This data source uses the following Azure API Providers:
//
// * `Microsoft.DevCenter` - 2025-02-01
func LookupProject(ctx *pulumi.Context, args *LookupProjectArgs, opts ...pulumi.InvokeOption) (*LookupProjectResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupProjectResult
	err := ctx.Invoke("azure:devcenter/getProject:getProject", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProject.
type LookupProjectArgs struct {
	// The name of this Dev Center Project.
	Name string `pulumi:"name"`
	// The name of the Resource Group where the Dev Center Project exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getProject.
type LookupProjectResult struct {
	// The description of the Dev Center Project.
	Description string `pulumi:"description"`
	// The ID of the associated Dev Center.
	DevCenterId string `pulumi:"devCenterId"`
	// The URI of the Dev Center.
	DevCenterUri string `pulumi:"devCenterUri"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// An `identity` block as defined below.
	Identities []GetProjectIdentity `pulumi:"identities"`
	// The Azure Region where the Dev Center Project exists.
	Location string `pulumi:"location"`
	// The maximum number of Dev Boxes a single user can create across all pools in the project.
	MaximumDevBoxesPerUser int    `pulumi:"maximumDevBoxesPerUser"`
	Name                   string `pulumi:"name"`
	ResourceGroupName      string `pulumi:"resourceGroupName"`
	// A mapping of tags assigned to the Dev Center Project.
	Tags map[string]string `pulumi:"tags"`
}

func LookupProjectOutput(ctx *pulumi.Context, args LookupProjectOutputArgs, opts ...pulumi.InvokeOption) LookupProjectResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupProjectResultOutput, error) {
			args := v.(LookupProjectArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure:devcenter/getProject:getProject", args, LookupProjectResultOutput{}, options).(LookupProjectResultOutput), nil
		}).(LookupProjectResultOutput)
}

// A collection of arguments for invoking getProject.
type LookupProjectOutputArgs struct {
	// The name of this Dev Center Project.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Resource Group where the Dev Center Project exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupProjectOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectArgs)(nil)).Elem()
}

// A collection of values returned by getProject.
type LookupProjectResultOutput struct{ *pulumi.OutputState }

func (LookupProjectResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectResult)(nil)).Elem()
}

func (o LookupProjectResultOutput) ToLookupProjectResultOutput() LookupProjectResultOutput {
	return o
}

func (o LookupProjectResultOutput) ToLookupProjectResultOutputWithContext(ctx context.Context) LookupProjectResultOutput {
	return o
}

// The description of the Dev Center Project.
func (o LookupProjectResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of the associated Dev Center.
func (o LookupProjectResultOutput) DevCenterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.DevCenterId }).(pulumi.StringOutput)
}

// The URI of the Dev Center.
func (o LookupProjectResultOutput) DevCenterUri() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.DevCenterUri }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupProjectResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.Id }).(pulumi.StringOutput)
}

// An `identity` block as defined below.
func (o LookupProjectResultOutput) Identities() GetProjectIdentityArrayOutput {
	return o.ApplyT(func(v LookupProjectResult) []GetProjectIdentity { return v.Identities }).(GetProjectIdentityArrayOutput)
}

// The Azure Region where the Dev Center Project exists.
func (o LookupProjectResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.Location }).(pulumi.StringOutput)
}

// The maximum number of Dev Boxes a single user can create across all pools in the project.
func (o LookupProjectResultOutput) MaximumDevBoxesPerUser() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProjectResult) int { return v.MaximumDevBoxesPerUser }).(pulumi.IntOutput)
}

func (o LookupProjectResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupProjectResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags assigned to the Dev Center Project.
func (o LookupProjectResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupProjectResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupProjectResultOutput{})
}
