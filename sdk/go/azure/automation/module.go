// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package automation

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Automation Module.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/automation"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := automation.NewAccount(ctx, "exampleAccount", &automation.AccountArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				SkuName:           pulumi.String("Basic"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = automation.NewModule(ctx, "exampleModule", &automation.ModuleArgs{
//				ResourceGroupName:     exampleResourceGroup.Name,
//				AutomationAccountName: exampleAccount.Name,
//				ModuleLink: &automation.ModuleModuleLinkArgs{
//					Uri: pulumi.String("https://devopsgallerystorage.blob.core.windows.net/packages/xactivedirectory.2.19.0.nupkg"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Automation Modules can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:automation/module:Module module1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Automation/automationAccounts/account1/modules/module1
//
// ```
type Module struct {
	pulumi.CustomResourceState

	// The name of the automation account in which the Module is created. Changing this forces a new resource to be created.
	AutomationAccountName pulumi.StringOutput `pulumi:"automationAccountName"`
	// A `moduleLink` block as defined below.
	ModuleLink ModuleModuleLinkOutput `pulumi:"moduleLink"`
	// Specifies the name of the Module. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the resource group in which the Module is created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
}

// NewModule registers a new resource with the given unique name, arguments, and options.
func NewModule(ctx *pulumi.Context,
	name string, args *ModuleArgs, opts ...pulumi.ResourceOption) (*Module, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutomationAccountName == nil {
		return nil, errors.New("invalid value for required argument 'AutomationAccountName'")
	}
	if args.ModuleLink == nil {
		return nil, errors.New("invalid value for required argument 'ModuleLink'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Module
	err := ctx.RegisterResource("azure:automation/module:Module", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetModule gets an existing Module resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetModule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ModuleState, opts ...pulumi.ResourceOption) (*Module, error) {
	var resource Module
	err := ctx.ReadResource("azure:automation/module:Module", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Module resources.
type moduleState struct {
	// The name of the automation account in which the Module is created. Changing this forces a new resource to be created.
	AutomationAccountName *string `pulumi:"automationAccountName"`
	// A `moduleLink` block as defined below.
	ModuleLink *ModuleModuleLink `pulumi:"moduleLink"`
	// Specifies the name of the Module. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which the Module is created. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
}

type ModuleState struct {
	// The name of the automation account in which the Module is created. Changing this forces a new resource to be created.
	AutomationAccountName pulumi.StringPtrInput
	// A `moduleLink` block as defined below.
	ModuleLink ModuleModuleLinkPtrInput
	// Specifies the name of the Module. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which the Module is created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
}

func (ModuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*moduleState)(nil)).Elem()
}

type moduleArgs struct {
	// The name of the automation account in which the Module is created. Changing this forces a new resource to be created.
	AutomationAccountName string `pulumi:"automationAccountName"`
	// A `moduleLink` block as defined below.
	ModuleLink ModuleModuleLink `pulumi:"moduleLink"`
	// Specifies the name of the Module. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which the Module is created. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a Module resource.
type ModuleArgs struct {
	// The name of the automation account in which the Module is created. Changing this forces a new resource to be created.
	AutomationAccountName pulumi.StringInput
	// A `moduleLink` block as defined below.
	ModuleLink ModuleModuleLinkInput
	// Specifies the name of the Module. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which the Module is created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
}

func (ModuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*moduleArgs)(nil)).Elem()
}

type ModuleInput interface {
	pulumi.Input

	ToModuleOutput() ModuleOutput
	ToModuleOutputWithContext(ctx context.Context) ModuleOutput
}

func (*Module) ElementType() reflect.Type {
	return reflect.TypeOf((**Module)(nil)).Elem()
}

func (i *Module) ToModuleOutput() ModuleOutput {
	return i.ToModuleOutputWithContext(context.Background())
}

func (i *Module) ToModuleOutputWithContext(ctx context.Context) ModuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleOutput)
}

// ModuleArrayInput is an input type that accepts ModuleArray and ModuleArrayOutput values.
// You can construct a concrete instance of `ModuleArrayInput` via:
//
//	ModuleArray{ ModuleArgs{...} }
type ModuleArrayInput interface {
	pulumi.Input

	ToModuleArrayOutput() ModuleArrayOutput
	ToModuleArrayOutputWithContext(context.Context) ModuleArrayOutput
}

type ModuleArray []ModuleInput

func (ModuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Module)(nil)).Elem()
}

func (i ModuleArray) ToModuleArrayOutput() ModuleArrayOutput {
	return i.ToModuleArrayOutputWithContext(context.Background())
}

func (i ModuleArray) ToModuleArrayOutputWithContext(ctx context.Context) ModuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleArrayOutput)
}

// ModuleMapInput is an input type that accepts ModuleMap and ModuleMapOutput values.
// You can construct a concrete instance of `ModuleMapInput` via:
//
//	ModuleMap{ "key": ModuleArgs{...} }
type ModuleMapInput interface {
	pulumi.Input

	ToModuleMapOutput() ModuleMapOutput
	ToModuleMapOutputWithContext(context.Context) ModuleMapOutput
}

type ModuleMap map[string]ModuleInput

func (ModuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Module)(nil)).Elem()
}

func (i ModuleMap) ToModuleMapOutput() ModuleMapOutput {
	return i.ToModuleMapOutputWithContext(context.Background())
}

func (i ModuleMap) ToModuleMapOutputWithContext(ctx context.Context) ModuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleMapOutput)
}

type ModuleOutput struct{ *pulumi.OutputState }

func (ModuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Module)(nil)).Elem()
}

func (o ModuleOutput) ToModuleOutput() ModuleOutput {
	return o
}

func (o ModuleOutput) ToModuleOutputWithContext(ctx context.Context) ModuleOutput {
	return o
}

// The name of the automation account in which the Module is created. Changing this forces a new resource to be created.
func (o ModuleOutput) AutomationAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v *Module) pulumi.StringOutput { return v.AutomationAccountName }).(pulumi.StringOutput)
}

// A `moduleLink` block as defined below.
func (o ModuleOutput) ModuleLink() ModuleModuleLinkOutput {
	return o.ApplyT(func(v *Module) ModuleModuleLinkOutput { return v.ModuleLink }).(ModuleModuleLinkOutput)
}

// Specifies the name of the Module. Changing this forces a new resource to be created.
func (o ModuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Module) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the resource group in which the Module is created. Changing this forces a new resource to be created.
func (o ModuleOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Module) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

type ModuleArrayOutput struct{ *pulumi.OutputState }

func (ModuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Module)(nil)).Elem()
}

func (o ModuleArrayOutput) ToModuleArrayOutput() ModuleArrayOutput {
	return o
}

func (o ModuleArrayOutput) ToModuleArrayOutputWithContext(ctx context.Context) ModuleArrayOutput {
	return o
}

func (o ModuleArrayOutput) Index(i pulumi.IntInput) ModuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Module {
		return vs[0].([]*Module)[vs[1].(int)]
	}).(ModuleOutput)
}

type ModuleMapOutput struct{ *pulumi.OutputState }

func (ModuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Module)(nil)).Elem()
}

func (o ModuleMapOutput) ToModuleMapOutput() ModuleMapOutput {
	return o
}

func (o ModuleMapOutput) ToModuleMapOutputWithContext(ctx context.Context) ModuleMapOutput {
	return o
}

func (o ModuleMapOutput) MapIndex(k pulumi.StringInput) ModuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Module {
		return vs[0].(map[string]*Module)[vs[1].(string)]
	}).(ModuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ModuleInput)(nil)).Elem(), &Module{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModuleArrayInput)(nil)).Elem(), ModuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModuleMapInput)(nil)).Elem(), ModuleMap{})
	pulumi.RegisterOutputType(ModuleOutput{})
	pulumi.RegisterOutputType(ModuleArrayOutput{})
	pulumi.RegisterOutputType(ModuleMapOutput{})
}
