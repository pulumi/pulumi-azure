// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package automation

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Automation Source Control.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/automation"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := automation.NewAccount(ctx, "exampleAccount", &automation.AccountArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				SkuName:           pulumi.String("Basic"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = automation.NewSourceControl(ctx, "exampleSourceControl", &automation.SourceControlArgs{
//				AutomationAccountId: exampleAccount.ID(),
//				FolderPath:          pulumi.String("runbook"),
//				Security: &automation.SourceControlSecurityArgs{
//					Token:     pulumi.String("ghp_xxx"),
//					TokenType: pulumi.String("PersonalAccessToken"),
//				},
//				RepositoryUrl:     pulumi.String("https://github.com/foo/bat.git"),
//				SourceControlType: pulumi.String("GitHub"),
//				Branch:            pulumi.String("main"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Automations can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:automation/sourceControl:SourceControl example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.Automation/automationAccounts/account1/sourceControls/sc1
//
// ```
type SourceControl struct {
	pulumi.CustomResourceState

	// Whether auto async the Source Control.
	AutomaticSync pulumi.BoolPtrOutput `pulumi:"automaticSync"`
	// The ID of Automation Account to manage this Source Control. Changing this forces a new Automation Source Control to be created.
	AutomationAccountId pulumi.StringOutput `pulumi:"automationAccountId"`
	// Specify the repo branch of the Source Control. Empty value is valid only for `VsoTfvc`.
	Branch pulumi.StringPtrOutput `pulumi:"branch"`
	// A short description of the Source Control.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The folder path of the source control. This Path must be relative.
	FolderPath pulumi.StringOutput `pulumi:"folderPath"`
	// The name which should be used for this Automation Source Control. Changing this forces a new Automation Source Control to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Whether auto publish the Source Control. Defaults to `true`.
	PublishRunbookEnabled pulumi.BoolPtrOutput `pulumi:"publishRunbookEnabled"`
	// The Repository URL of the source control.
	RepositoryUrl pulumi.StringOutput `pulumi:"repositoryUrl"`
	// A `security` block as defined below.
	Security SourceControlSecurityOutput `pulumi:"security"`
	// The source type of Source Control, possible vaules are `VsoGit`, `VsoTfvc` and `GitHub`, and the value is case sensitive.
	SourceControlType pulumi.StringOutput `pulumi:"sourceControlType"`
}

// NewSourceControl registers a new resource with the given unique name, arguments, and options.
func NewSourceControl(ctx *pulumi.Context,
	name string, args *SourceControlArgs, opts ...pulumi.ResourceOption) (*SourceControl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutomationAccountId == nil {
		return nil, errors.New("invalid value for required argument 'AutomationAccountId'")
	}
	if args.FolderPath == nil {
		return nil, errors.New("invalid value for required argument 'FolderPath'")
	}
	if args.RepositoryUrl == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryUrl'")
	}
	if args.Security == nil {
		return nil, errors.New("invalid value for required argument 'Security'")
	}
	if args.SourceControlType == nil {
		return nil, errors.New("invalid value for required argument 'SourceControlType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceControl
	err := ctx.RegisterResource("azure:automation/sourceControl:SourceControl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceControl gets an existing SourceControl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceControl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceControlState, opts ...pulumi.ResourceOption) (*SourceControl, error) {
	var resource SourceControl
	err := ctx.ReadResource("azure:automation/sourceControl:SourceControl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceControl resources.
type sourceControlState struct {
	// Whether auto async the Source Control.
	AutomaticSync *bool `pulumi:"automaticSync"`
	// The ID of Automation Account to manage this Source Control. Changing this forces a new Automation Source Control to be created.
	AutomationAccountId *string `pulumi:"automationAccountId"`
	// Specify the repo branch of the Source Control. Empty value is valid only for `VsoTfvc`.
	Branch *string `pulumi:"branch"`
	// A short description of the Source Control.
	Description *string `pulumi:"description"`
	// The folder path of the source control. This Path must be relative.
	FolderPath *string `pulumi:"folderPath"`
	// The name which should be used for this Automation Source Control. Changing this forces a new Automation Source Control to be created.
	Name *string `pulumi:"name"`
	// Whether auto publish the Source Control. Defaults to `true`.
	PublishRunbookEnabled *bool `pulumi:"publishRunbookEnabled"`
	// The Repository URL of the source control.
	RepositoryUrl *string `pulumi:"repositoryUrl"`
	// A `security` block as defined below.
	Security *SourceControlSecurity `pulumi:"security"`
	// The source type of Source Control, possible vaules are `VsoGit`, `VsoTfvc` and `GitHub`, and the value is case sensitive.
	SourceControlType *string `pulumi:"sourceControlType"`
}

type SourceControlState struct {
	// Whether auto async the Source Control.
	AutomaticSync pulumi.BoolPtrInput
	// The ID of Automation Account to manage this Source Control. Changing this forces a new Automation Source Control to be created.
	AutomationAccountId pulumi.StringPtrInput
	// Specify the repo branch of the Source Control. Empty value is valid only for `VsoTfvc`.
	Branch pulumi.StringPtrInput
	// A short description of the Source Control.
	Description pulumi.StringPtrInput
	// The folder path of the source control. This Path must be relative.
	FolderPath pulumi.StringPtrInput
	// The name which should be used for this Automation Source Control. Changing this forces a new Automation Source Control to be created.
	Name pulumi.StringPtrInput
	// Whether auto publish the Source Control. Defaults to `true`.
	PublishRunbookEnabled pulumi.BoolPtrInput
	// The Repository URL of the source control.
	RepositoryUrl pulumi.StringPtrInput
	// A `security` block as defined below.
	Security SourceControlSecurityPtrInput
	// The source type of Source Control, possible vaules are `VsoGit`, `VsoTfvc` and `GitHub`, and the value is case sensitive.
	SourceControlType pulumi.StringPtrInput
}

func (SourceControlState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceControlState)(nil)).Elem()
}

type sourceControlArgs struct {
	// Whether auto async the Source Control.
	AutomaticSync *bool `pulumi:"automaticSync"`
	// The ID of Automation Account to manage this Source Control. Changing this forces a new Automation Source Control to be created.
	AutomationAccountId string `pulumi:"automationAccountId"`
	// Specify the repo branch of the Source Control. Empty value is valid only for `VsoTfvc`.
	Branch *string `pulumi:"branch"`
	// A short description of the Source Control.
	Description *string `pulumi:"description"`
	// The folder path of the source control. This Path must be relative.
	FolderPath string `pulumi:"folderPath"`
	// The name which should be used for this Automation Source Control. Changing this forces a new Automation Source Control to be created.
	Name *string `pulumi:"name"`
	// Whether auto publish the Source Control. Defaults to `true`.
	PublishRunbookEnabled *bool `pulumi:"publishRunbookEnabled"`
	// The Repository URL of the source control.
	RepositoryUrl string `pulumi:"repositoryUrl"`
	// A `security` block as defined below.
	Security SourceControlSecurity `pulumi:"security"`
	// The source type of Source Control, possible vaules are `VsoGit`, `VsoTfvc` and `GitHub`, and the value is case sensitive.
	SourceControlType string `pulumi:"sourceControlType"`
}

// The set of arguments for constructing a SourceControl resource.
type SourceControlArgs struct {
	// Whether auto async the Source Control.
	AutomaticSync pulumi.BoolPtrInput
	// The ID of Automation Account to manage this Source Control. Changing this forces a new Automation Source Control to be created.
	AutomationAccountId pulumi.StringInput
	// Specify the repo branch of the Source Control. Empty value is valid only for `VsoTfvc`.
	Branch pulumi.StringPtrInput
	// A short description of the Source Control.
	Description pulumi.StringPtrInput
	// The folder path of the source control. This Path must be relative.
	FolderPath pulumi.StringInput
	// The name which should be used for this Automation Source Control. Changing this forces a new Automation Source Control to be created.
	Name pulumi.StringPtrInput
	// Whether auto publish the Source Control. Defaults to `true`.
	PublishRunbookEnabled pulumi.BoolPtrInput
	// The Repository URL of the source control.
	RepositoryUrl pulumi.StringInput
	// A `security` block as defined below.
	Security SourceControlSecurityInput
	// The source type of Source Control, possible vaules are `VsoGit`, `VsoTfvc` and `GitHub`, and the value is case sensitive.
	SourceControlType pulumi.StringInput
}

func (SourceControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceControlArgs)(nil)).Elem()
}

type SourceControlInput interface {
	pulumi.Input

	ToSourceControlOutput() SourceControlOutput
	ToSourceControlOutputWithContext(ctx context.Context) SourceControlOutput
}

func (*SourceControl) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceControl)(nil)).Elem()
}

func (i *SourceControl) ToSourceControlOutput() SourceControlOutput {
	return i.ToSourceControlOutputWithContext(context.Background())
}

func (i *SourceControl) ToSourceControlOutputWithContext(ctx context.Context) SourceControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceControlOutput)
}

// SourceControlArrayInput is an input type that accepts SourceControlArray and SourceControlArrayOutput values.
// You can construct a concrete instance of `SourceControlArrayInput` via:
//
//	SourceControlArray{ SourceControlArgs{...} }
type SourceControlArrayInput interface {
	pulumi.Input

	ToSourceControlArrayOutput() SourceControlArrayOutput
	ToSourceControlArrayOutputWithContext(context.Context) SourceControlArrayOutput
}

type SourceControlArray []SourceControlInput

func (SourceControlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceControl)(nil)).Elem()
}

func (i SourceControlArray) ToSourceControlArrayOutput() SourceControlArrayOutput {
	return i.ToSourceControlArrayOutputWithContext(context.Background())
}

func (i SourceControlArray) ToSourceControlArrayOutputWithContext(ctx context.Context) SourceControlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceControlArrayOutput)
}

// SourceControlMapInput is an input type that accepts SourceControlMap and SourceControlMapOutput values.
// You can construct a concrete instance of `SourceControlMapInput` via:
//
//	SourceControlMap{ "key": SourceControlArgs{...} }
type SourceControlMapInput interface {
	pulumi.Input

	ToSourceControlMapOutput() SourceControlMapOutput
	ToSourceControlMapOutputWithContext(context.Context) SourceControlMapOutput
}

type SourceControlMap map[string]SourceControlInput

func (SourceControlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceControl)(nil)).Elem()
}

func (i SourceControlMap) ToSourceControlMapOutput() SourceControlMapOutput {
	return i.ToSourceControlMapOutputWithContext(context.Background())
}

func (i SourceControlMap) ToSourceControlMapOutputWithContext(ctx context.Context) SourceControlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceControlMapOutput)
}

type SourceControlOutput struct{ *pulumi.OutputState }

func (SourceControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceControl)(nil)).Elem()
}

func (o SourceControlOutput) ToSourceControlOutput() SourceControlOutput {
	return o
}

func (o SourceControlOutput) ToSourceControlOutputWithContext(ctx context.Context) SourceControlOutput {
	return o
}

// Whether auto async the Source Control.
func (o SourceControlOutput) AutomaticSync() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SourceControl) pulumi.BoolPtrOutput { return v.AutomaticSync }).(pulumi.BoolPtrOutput)
}

// The ID of Automation Account to manage this Source Control. Changing this forces a new Automation Source Control to be created.
func (o SourceControlOutput) AutomationAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceControl) pulumi.StringOutput { return v.AutomationAccountId }).(pulumi.StringOutput)
}

// Specify the repo branch of the Source Control. Empty value is valid only for `VsoTfvc`.
func (o SourceControlOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceControl) pulumi.StringPtrOutput { return v.Branch }).(pulumi.StringPtrOutput)
}

// A short description of the Source Control.
func (o SourceControlOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceControl) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder path of the source control. This Path must be relative.
func (o SourceControlOutput) FolderPath() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceControl) pulumi.StringOutput { return v.FolderPath }).(pulumi.StringOutput)
}

// The name which should be used for this Automation Source Control. Changing this forces a new Automation Source Control to be created.
func (o SourceControlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceControl) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Whether auto publish the Source Control. Defaults to `true`.
func (o SourceControlOutput) PublishRunbookEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SourceControl) pulumi.BoolPtrOutput { return v.PublishRunbookEnabled }).(pulumi.BoolPtrOutput)
}

// The Repository URL of the source control.
func (o SourceControlOutput) RepositoryUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceControl) pulumi.StringOutput { return v.RepositoryUrl }).(pulumi.StringOutput)
}

// A `security` block as defined below.
func (o SourceControlOutput) Security() SourceControlSecurityOutput {
	return o.ApplyT(func(v *SourceControl) SourceControlSecurityOutput { return v.Security }).(SourceControlSecurityOutput)
}

// The source type of Source Control, possible vaules are `VsoGit`, `VsoTfvc` and `GitHub`, and the value is case sensitive.
func (o SourceControlOutput) SourceControlType() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceControl) pulumi.StringOutput { return v.SourceControlType }).(pulumi.StringOutput)
}

type SourceControlArrayOutput struct{ *pulumi.OutputState }

func (SourceControlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceControl)(nil)).Elem()
}

func (o SourceControlArrayOutput) ToSourceControlArrayOutput() SourceControlArrayOutput {
	return o
}

func (o SourceControlArrayOutput) ToSourceControlArrayOutputWithContext(ctx context.Context) SourceControlArrayOutput {
	return o
}

func (o SourceControlArrayOutput) Index(i pulumi.IntInput) SourceControlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceControl {
		return vs[0].([]*SourceControl)[vs[1].(int)]
	}).(SourceControlOutput)
}

type SourceControlMapOutput struct{ *pulumi.OutputState }

func (SourceControlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceControl)(nil)).Elem()
}

func (o SourceControlMapOutput) ToSourceControlMapOutput() SourceControlMapOutput {
	return o
}

func (o SourceControlMapOutput) ToSourceControlMapOutputWithContext(ctx context.Context) SourceControlMapOutput {
	return o
}

func (o SourceControlMapOutput) MapIndex(k pulumi.StringInput) SourceControlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceControl {
		return vs[0].(map[string]*SourceControl)[vs[1].(string)]
	}).(SourceControlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceControlInput)(nil)).Elem(), &SourceControl{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceControlArrayInput)(nil)).Elem(), SourceControlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceControlMapInput)(nil)).Elem(), SourceControlMap{})
	pulumi.RegisterOutputType(SourceControlOutput{})
	pulumi.RegisterOutputType(SourceControlArrayOutput{})
	pulumi.RegisterOutputType(SourceControlMapOutput{})
}
