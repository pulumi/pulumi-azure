// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package automation

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a string variable in Azure Automation
//
// ## Import
//
// Automation String Variable can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:automation/stringVariable:StringVariable example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/tfex-example-rg/providers/Microsoft.Automation/automationAccounts/tfex-example-account/variables/tfex-example-var
// ```
type StringVariable struct {
	pulumi.CustomResourceState

	// The name of the automation account in which the Variable is created. Changing this forces a new resource to be created.
	AutomationAccountName pulumi.StringOutput `pulumi:"automationAccountName"`
	// The description of the Automation Variable.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies if the Automation Variable is encrypted. Defaults to `false`.
	Encrypted pulumi.BoolPtrOutput `pulumi:"encrypted"`
	// The name of the Automation Variable. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the resource group in which to create the Automation Variable. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The value of the Automation Variable as a `string`.
	Value pulumi.StringPtrOutput `pulumi:"value"`
}

// NewStringVariable registers a new resource with the given unique name, arguments, and options.
func NewStringVariable(ctx *pulumi.Context,
	name string, args *StringVariableArgs, opts ...pulumi.ResourceOption) (*StringVariable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutomationAccountName == nil {
		return nil, errors.New("invalid value for required argument 'AutomationAccountName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	var resource StringVariable
	err := ctx.RegisterResource("azure:automation/stringVariable:StringVariable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStringVariable gets an existing StringVariable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStringVariable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StringVariableState, opts ...pulumi.ResourceOption) (*StringVariable, error) {
	var resource StringVariable
	err := ctx.ReadResource("azure:automation/stringVariable:StringVariable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StringVariable resources.
type stringVariableState struct {
	// The name of the automation account in which the Variable is created. Changing this forces a new resource to be created.
	AutomationAccountName *string `pulumi:"automationAccountName"`
	// The description of the Automation Variable.
	Description *string `pulumi:"description"`
	// Specifies if the Automation Variable is encrypted. Defaults to `false`.
	Encrypted *bool `pulumi:"encrypted"`
	// The name of the Automation Variable. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to create the Automation Variable. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The value of the Automation Variable as a `string`.
	Value *string `pulumi:"value"`
}

type StringVariableState struct {
	// The name of the automation account in which the Variable is created. Changing this forces a new resource to be created.
	AutomationAccountName pulumi.StringPtrInput
	// The description of the Automation Variable.
	Description pulumi.StringPtrInput
	// Specifies if the Automation Variable is encrypted. Defaults to `false`.
	Encrypted pulumi.BoolPtrInput
	// The name of the Automation Variable. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to create the Automation Variable. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The value of the Automation Variable as a `string`.
	Value pulumi.StringPtrInput
}

func (StringVariableState) ElementType() reflect.Type {
	return reflect.TypeOf((*stringVariableState)(nil)).Elem()
}

type stringVariableArgs struct {
	// The name of the automation account in which the Variable is created. Changing this forces a new resource to be created.
	AutomationAccountName string `pulumi:"automationAccountName"`
	// The description of the Automation Variable.
	Description *string `pulumi:"description"`
	// Specifies if the Automation Variable is encrypted. Defaults to `false`.
	Encrypted *bool `pulumi:"encrypted"`
	// The name of the Automation Variable. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to create the Automation Variable. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The value of the Automation Variable as a `string`.
	Value *string `pulumi:"value"`
}

// The set of arguments for constructing a StringVariable resource.
type StringVariableArgs struct {
	// The name of the automation account in which the Variable is created. Changing this forces a new resource to be created.
	AutomationAccountName pulumi.StringInput
	// The description of the Automation Variable.
	Description pulumi.StringPtrInput
	// Specifies if the Automation Variable is encrypted. Defaults to `false`.
	Encrypted pulumi.BoolPtrInput
	// The name of the Automation Variable. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to create the Automation Variable. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// The value of the Automation Variable as a `string`.
	Value pulumi.StringPtrInput
}

func (StringVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stringVariableArgs)(nil)).Elem()
}

type StringVariableInput interface {
	pulumi.Input

	ToStringVariableOutput() StringVariableOutput
	ToStringVariableOutputWithContext(ctx context.Context) StringVariableOutput
}

func (*StringVariable) ElementType() reflect.Type {
	return reflect.TypeOf((*StringVariable)(nil))
}

func (i *StringVariable) ToStringVariableOutput() StringVariableOutput {
	return i.ToStringVariableOutputWithContext(context.Background())
}

func (i *StringVariable) ToStringVariableOutputWithContext(ctx context.Context) StringVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StringVariableOutput)
}

func (i *StringVariable) ToStringVariablePtrOutput() StringVariablePtrOutput {
	return i.ToStringVariablePtrOutputWithContext(context.Background())
}

func (i *StringVariable) ToStringVariablePtrOutputWithContext(ctx context.Context) StringVariablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StringVariablePtrOutput)
}

type StringVariablePtrInput interface {
	pulumi.Input

	ToStringVariablePtrOutput() StringVariablePtrOutput
	ToStringVariablePtrOutputWithContext(ctx context.Context) StringVariablePtrOutput
}

type stringVariablePtrType StringVariableArgs

func (*stringVariablePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StringVariable)(nil))
}

func (i *stringVariablePtrType) ToStringVariablePtrOutput() StringVariablePtrOutput {
	return i.ToStringVariablePtrOutputWithContext(context.Background())
}

func (i *stringVariablePtrType) ToStringVariablePtrOutputWithContext(ctx context.Context) StringVariablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StringVariablePtrOutput)
}

// StringVariableArrayInput is an input type that accepts StringVariableArray and StringVariableArrayOutput values.
// You can construct a concrete instance of `StringVariableArrayInput` via:
//
//          StringVariableArray{ StringVariableArgs{...} }
type StringVariableArrayInput interface {
	pulumi.Input

	ToStringVariableArrayOutput() StringVariableArrayOutput
	ToStringVariableArrayOutputWithContext(context.Context) StringVariableArrayOutput
}

type StringVariableArray []StringVariableInput

func (StringVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*StringVariable)(nil))
}

func (i StringVariableArray) ToStringVariableArrayOutput() StringVariableArrayOutput {
	return i.ToStringVariableArrayOutputWithContext(context.Background())
}

func (i StringVariableArray) ToStringVariableArrayOutputWithContext(ctx context.Context) StringVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StringVariableArrayOutput)
}

// StringVariableMapInput is an input type that accepts StringVariableMap and StringVariableMapOutput values.
// You can construct a concrete instance of `StringVariableMapInput` via:
//
//          StringVariableMap{ "key": StringVariableArgs{...} }
type StringVariableMapInput interface {
	pulumi.Input

	ToStringVariableMapOutput() StringVariableMapOutput
	ToStringVariableMapOutputWithContext(context.Context) StringVariableMapOutput
}

type StringVariableMap map[string]StringVariableInput

func (StringVariableMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*StringVariable)(nil))
}

func (i StringVariableMap) ToStringVariableMapOutput() StringVariableMapOutput {
	return i.ToStringVariableMapOutputWithContext(context.Background())
}

func (i StringVariableMap) ToStringVariableMapOutputWithContext(ctx context.Context) StringVariableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StringVariableMapOutput)
}

type StringVariableOutput struct {
	*pulumi.OutputState
}

func (StringVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringVariable)(nil))
}

func (o StringVariableOutput) ToStringVariableOutput() StringVariableOutput {
	return o
}

func (o StringVariableOutput) ToStringVariableOutputWithContext(ctx context.Context) StringVariableOutput {
	return o
}

func (o StringVariableOutput) ToStringVariablePtrOutput() StringVariablePtrOutput {
	return o.ToStringVariablePtrOutputWithContext(context.Background())
}

func (o StringVariableOutput) ToStringVariablePtrOutputWithContext(ctx context.Context) StringVariablePtrOutput {
	return o.ApplyT(func(v StringVariable) *StringVariable {
		return &v
	}).(StringVariablePtrOutput)
}

type StringVariablePtrOutput struct {
	*pulumi.OutputState
}

func (StringVariablePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StringVariable)(nil))
}

func (o StringVariablePtrOutput) ToStringVariablePtrOutput() StringVariablePtrOutput {
	return o
}

func (o StringVariablePtrOutput) ToStringVariablePtrOutputWithContext(ctx context.Context) StringVariablePtrOutput {
	return o
}

type StringVariableArrayOutput struct{ *pulumi.OutputState }

func (StringVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StringVariable)(nil))
}

func (o StringVariableArrayOutput) ToStringVariableArrayOutput() StringVariableArrayOutput {
	return o
}

func (o StringVariableArrayOutput) ToStringVariableArrayOutputWithContext(ctx context.Context) StringVariableArrayOutput {
	return o
}

func (o StringVariableArrayOutput) Index(i pulumi.IntInput) StringVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StringVariable {
		return vs[0].([]StringVariable)[vs[1].(int)]
	}).(StringVariableOutput)
}

type StringVariableMapOutput struct{ *pulumi.OutputState }

func (StringVariableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]StringVariable)(nil))
}

func (o StringVariableMapOutput) ToStringVariableMapOutput() StringVariableMapOutput {
	return o
}

func (o StringVariableMapOutput) ToStringVariableMapOutputWithContext(ctx context.Context) StringVariableMapOutput {
	return o
}

func (o StringVariableMapOutput) MapIndex(k pulumi.StringInput) StringVariableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) StringVariable {
		return vs[0].(map[string]StringVariable)[vs[1].(string)]
	}).(StringVariableOutput)
}

func init() {
	pulumi.RegisterOutputType(StringVariableOutput{})
	pulumi.RegisterOutputType(StringVariablePtrOutput{})
	pulumi.RegisterOutputType(StringVariableArrayOutput{})
	pulumi.RegisterOutputType(StringVariableMapOutput{})
}
