// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package automation

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Automation Wacher.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/automation"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := automation.NewAccount(ctx, "exampleAccount", &automation.AccountArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				SkuName:           pulumi.String("Basic"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleHybridRunbookWorkerGroup, err := automation.NewHybridRunbookWorkerGroup(ctx, "exampleHybridRunbookWorkerGroup", &automation.HybridRunbookWorkerGroupArgs{
//				ResourceGroupName:     exampleResourceGroup.Name,
//				AutomationAccountName: exampleAccount.Name,
//			})
//			if err != nil {
//				return err
//			}
//			exampleRunBook, err := automation.NewRunBook(ctx, "exampleRunBook", &automation.RunBookArgs{
//				Location:              exampleResourceGroup.Location,
//				ResourceGroupName:     exampleResourceGroup.Name,
//				AutomationAccountName: exampleAccount.Name,
//				LogVerbose:            pulumi.Bool(true),
//				LogProgress:           pulumi.Bool(true),
//				Description:           pulumi.String("This is an example runbook"),
//				RunbookType:           pulumi.String("PowerShellWorkflow"),
//				PublishContentLink: &automation.RunBookPublishContentLinkArgs{
//					Uri: pulumi.String("https://raw.githubusercontent.com/Azure/azure-quickstart-templates/c4935ffb69246a6058eb24f54640f53f69d3ac9f/101-automation-runbook-getvms/Runbooks/Get-AzureVMTutorial.ps1"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = automation.NewWatcher(ctx, "exampleWatcher", &automation.WatcherArgs{
//				AutomationAccountId:         exampleAccount.ID(),
//				Location:                    pulumi.String("West Europe"),
//				ScriptName:                  exampleRunBook.Name,
//				ScriptRunOn:                 exampleHybridRunbookWorkerGroup.Name,
//				Description:                 pulumi.String("example-watcher desc"),
//				ExecutionFrequencyInSeconds: pulumi.Int(42),
//				Tags: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				ScriptParameters: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Automation Watchers can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:automation/watcher:Watcher example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.Automation/automationAccounts/account1/watchers/watch1
//
// ```
type Watcher struct {
	pulumi.CustomResourceState

	// The ID of Automation Account to manage this Watcher. Changing this forces a new Watcher to be created.
	AutomationAccountId pulumi.StringOutput `pulumi:"automationAccountId"`
	// A description of this Automation Watcher.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A string of etag assigned to this Automation Watcher.
	Etag pulumi.StringPtrOutput `pulumi:"etag"`
	// Specify the frequency at which the watcher is invoked.
	ExecutionFrequencyInSeconds pulumi.IntOutput `pulumi:"executionFrequencyInSeconds"`
	// The Azure Region where the Automation Watcher should exist. Changing this forces a new Automation Watcher to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name which should be used for this Automation Watcher. Changing this forces a new Automation Watcher to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specify the name of an existing runbook this watcher is attached to. Changing this forces a new Automation to be created.
	ScriptName pulumi.StringOutput `pulumi:"scriptName"`
	// Specifies a list of key-vaule parameters. Changing this forces a new Automation watcher to be created.
	ScriptParameters pulumi.StringMapOutput `pulumi:"scriptParameters"`
	// Specify the name of the Hybrid work group the watcher will run on.
	ScriptRunOn pulumi.StringOutput `pulumi:"scriptRunOn"`
	// The current status of the Automation Watcher.
	Status pulumi.StringOutput `pulumi:"status"`
	// A mapping of tags which should be assigned to the Automation Watcher.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewWatcher registers a new resource with the given unique name, arguments, and options.
func NewWatcher(ctx *pulumi.Context,
	name string, args *WatcherArgs, opts ...pulumi.ResourceOption) (*Watcher, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutomationAccountId == nil {
		return nil, errors.New("invalid value for required argument 'AutomationAccountId'")
	}
	if args.ExecutionFrequencyInSeconds == nil {
		return nil, errors.New("invalid value for required argument 'ExecutionFrequencyInSeconds'")
	}
	if args.ScriptName == nil {
		return nil, errors.New("invalid value for required argument 'ScriptName'")
	}
	if args.ScriptRunOn == nil {
		return nil, errors.New("invalid value for required argument 'ScriptRunOn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Watcher
	err := ctx.RegisterResource("azure:automation/watcher:Watcher", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWatcher gets an existing Watcher resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWatcher(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WatcherState, opts ...pulumi.ResourceOption) (*Watcher, error) {
	var resource Watcher
	err := ctx.ReadResource("azure:automation/watcher:Watcher", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Watcher resources.
type watcherState struct {
	// The ID of Automation Account to manage this Watcher. Changing this forces a new Watcher to be created.
	AutomationAccountId *string `pulumi:"automationAccountId"`
	// A description of this Automation Watcher.
	Description *string `pulumi:"description"`
	// A string of etag assigned to this Automation Watcher.
	Etag *string `pulumi:"etag"`
	// Specify the frequency at which the watcher is invoked.
	ExecutionFrequencyInSeconds *int `pulumi:"executionFrequencyInSeconds"`
	// The Azure Region where the Automation Watcher should exist. Changing this forces a new Automation Watcher to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Automation Watcher. Changing this forces a new Automation Watcher to be created.
	Name *string `pulumi:"name"`
	// Specify the name of an existing runbook this watcher is attached to. Changing this forces a new Automation to be created.
	ScriptName *string `pulumi:"scriptName"`
	// Specifies a list of key-vaule parameters. Changing this forces a new Automation watcher to be created.
	ScriptParameters map[string]string `pulumi:"scriptParameters"`
	// Specify the name of the Hybrid work group the watcher will run on.
	ScriptRunOn *string `pulumi:"scriptRunOn"`
	// The current status of the Automation Watcher.
	Status *string `pulumi:"status"`
	// A mapping of tags which should be assigned to the Automation Watcher.
	Tags map[string]string `pulumi:"tags"`
}

type WatcherState struct {
	// The ID of Automation Account to manage this Watcher. Changing this forces a new Watcher to be created.
	AutomationAccountId pulumi.StringPtrInput
	// A description of this Automation Watcher.
	Description pulumi.StringPtrInput
	// A string of etag assigned to this Automation Watcher.
	Etag pulumi.StringPtrInput
	// Specify the frequency at which the watcher is invoked.
	ExecutionFrequencyInSeconds pulumi.IntPtrInput
	// The Azure Region where the Automation Watcher should exist. Changing this forces a new Automation Watcher to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Automation Watcher. Changing this forces a new Automation Watcher to be created.
	Name pulumi.StringPtrInput
	// Specify the name of an existing runbook this watcher is attached to. Changing this forces a new Automation to be created.
	ScriptName pulumi.StringPtrInput
	// Specifies a list of key-vaule parameters. Changing this forces a new Automation watcher to be created.
	ScriptParameters pulumi.StringMapInput
	// Specify the name of the Hybrid work group the watcher will run on.
	ScriptRunOn pulumi.StringPtrInput
	// The current status of the Automation Watcher.
	Status pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Automation Watcher.
	Tags pulumi.StringMapInput
}

func (WatcherState) ElementType() reflect.Type {
	return reflect.TypeOf((*watcherState)(nil)).Elem()
}

type watcherArgs struct {
	// The ID of Automation Account to manage this Watcher. Changing this forces a new Watcher to be created.
	AutomationAccountId string `pulumi:"automationAccountId"`
	// A description of this Automation Watcher.
	Description *string `pulumi:"description"`
	// A string of etag assigned to this Automation Watcher.
	Etag *string `pulumi:"etag"`
	// Specify the frequency at which the watcher is invoked.
	ExecutionFrequencyInSeconds int `pulumi:"executionFrequencyInSeconds"`
	// The Azure Region where the Automation Watcher should exist. Changing this forces a new Automation Watcher to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Automation Watcher. Changing this forces a new Automation Watcher to be created.
	Name *string `pulumi:"name"`
	// Specify the name of an existing runbook this watcher is attached to. Changing this forces a new Automation to be created.
	ScriptName string `pulumi:"scriptName"`
	// Specifies a list of key-vaule parameters. Changing this forces a new Automation watcher to be created.
	ScriptParameters map[string]string `pulumi:"scriptParameters"`
	// Specify the name of the Hybrid work group the watcher will run on.
	ScriptRunOn string `pulumi:"scriptRunOn"`
	// A mapping of tags which should be assigned to the Automation Watcher.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Watcher resource.
type WatcherArgs struct {
	// The ID of Automation Account to manage this Watcher. Changing this forces a new Watcher to be created.
	AutomationAccountId pulumi.StringInput
	// A description of this Automation Watcher.
	Description pulumi.StringPtrInput
	// A string of etag assigned to this Automation Watcher.
	Etag pulumi.StringPtrInput
	// Specify the frequency at which the watcher is invoked.
	ExecutionFrequencyInSeconds pulumi.IntInput
	// The Azure Region where the Automation Watcher should exist. Changing this forces a new Automation Watcher to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Automation Watcher. Changing this forces a new Automation Watcher to be created.
	Name pulumi.StringPtrInput
	// Specify the name of an existing runbook this watcher is attached to. Changing this forces a new Automation to be created.
	ScriptName pulumi.StringInput
	// Specifies a list of key-vaule parameters. Changing this forces a new Automation watcher to be created.
	ScriptParameters pulumi.StringMapInput
	// Specify the name of the Hybrid work group the watcher will run on.
	ScriptRunOn pulumi.StringInput
	// A mapping of tags which should be assigned to the Automation Watcher.
	Tags pulumi.StringMapInput
}

func (WatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*watcherArgs)(nil)).Elem()
}

type WatcherInput interface {
	pulumi.Input

	ToWatcherOutput() WatcherOutput
	ToWatcherOutputWithContext(ctx context.Context) WatcherOutput
}

func (*Watcher) ElementType() reflect.Type {
	return reflect.TypeOf((**Watcher)(nil)).Elem()
}

func (i *Watcher) ToWatcherOutput() WatcherOutput {
	return i.ToWatcherOutputWithContext(context.Background())
}

func (i *Watcher) ToWatcherOutputWithContext(ctx context.Context) WatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WatcherOutput)
}

// WatcherArrayInput is an input type that accepts WatcherArray and WatcherArrayOutput values.
// You can construct a concrete instance of `WatcherArrayInput` via:
//
//	WatcherArray{ WatcherArgs{...} }
type WatcherArrayInput interface {
	pulumi.Input

	ToWatcherArrayOutput() WatcherArrayOutput
	ToWatcherArrayOutputWithContext(context.Context) WatcherArrayOutput
}

type WatcherArray []WatcherInput

func (WatcherArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Watcher)(nil)).Elem()
}

func (i WatcherArray) ToWatcherArrayOutput() WatcherArrayOutput {
	return i.ToWatcherArrayOutputWithContext(context.Background())
}

func (i WatcherArray) ToWatcherArrayOutputWithContext(ctx context.Context) WatcherArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WatcherArrayOutput)
}

// WatcherMapInput is an input type that accepts WatcherMap and WatcherMapOutput values.
// You can construct a concrete instance of `WatcherMapInput` via:
//
//	WatcherMap{ "key": WatcherArgs{...} }
type WatcherMapInput interface {
	pulumi.Input

	ToWatcherMapOutput() WatcherMapOutput
	ToWatcherMapOutputWithContext(context.Context) WatcherMapOutput
}

type WatcherMap map[string]WatcherInput

func (WatcherMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Watcher)(nil)).Elem()
}

func (i WatcherMap) ToWatcherMapOutput() WatcherMapOutput {
	return i.ToWatcherMapOutputWithContext(context.Background())
}

func (i WatcherMap) ToWatcherMapOutputWithContext(ctx context.Context) WatcherMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WatcherMapOutput)
}

type WatcherOutput struct{ *pulumi.OutputState }

func (WatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Watcher)(nil)).Elem()
}

func (o WatcherOutput) ToWatcherOutput() WatcherOutput {
	return o
}

func (o WatcherOutput) ToWatcherOutputWithContext(ctx context.Context) WatcherOutput {
	return o
}

// The ID of Automation Account to manage this Watcher. Changing this forces a new Watcher to be created.
func (o WatcherOutput) AutomationAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Watcher) pulumi.StringOutput { return v.AutomationAccountId }).(pulumi.StringOutput)
}

// A description of this Automation Watcher.
func (o WatcherOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Watcher) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A string of etag assigned to this Automation Watcher.
func (o WatcherOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Watcher) pulumi.StringPtrOutput { return v.Etag }).(pulumi.StringPtrOutput)
}

// Specify the frequency at which the watcher is invoked.
func (o WatcherOutput) ExecutionFrequencyInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *Watcher) pulumi.IntOutput { return v.ExecutionFrequencyInSeconds }).(pulumi.IntOutput)
}

// The Azure Region where the Automation Watcher should exist. Changing this forces a new Automation Watcher to be created.
func (o WatcherOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Watcher) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name which should be used for this Automation Watcher. Changing this forces a new Automation Watcher to be created.
func (o WatcherOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Watcher) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specify the name of an existing runbook this watcher is attached to. Changing this forces a new Automation to be created.
func (o WatcherOutput) ScriptName() pulumi.StringOutput {
	return o.ApplyT(func(v *Watcher) pulumi.StringOutput { return v.ScriptName }).(pulumi.StringOutput)
}

// Specifies a list of key-vaule parameters. Changing this forces a new Automation watcher to be created.
func (o WatcherOutput) ScriptParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Watcher) pulumi.StringMapOutput { return v.ScriptParameters }).(pulumi.StringMapOutput)
}

// Specify the name of the Hybrid work group the watcher will run on.
func (o WatcherOutput) ScriptRunOn() pulumi.StringOutput {
	return o.ApplyT(func(v *Watcher) pulumi.StringOutput { return v.ScriptRunOn }).(pulumi.StringOutput)
}

// The current status of the Automation Watcher.
func (o WatcherOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Watcher) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the Automation Watcher.
func (o WatcherOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Watcher) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type WatcherArrayOutput struct{ *pulumi.OutputState }

func (WatcherArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Watcher)(nil)).Elem()
}

func (o WatcherArrayOutput) ToWatcherArrayOutput() WatcherArrayOutput {
	return o
}

func (o WatcherArrayOutput) ToWatcherArrayOutputWithContext(ctx context.Context) WatcherArrayOutput {
	return o
}

func (o WatcherArrayOutput) Index(i pulumi.IntInput) WatcherOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Watcher {
		return vs[0].([]*Watcher)[vs[1].(int)]
	}).(WatcherOutput)
}

type WatcherMapOutput struct{ *pulumi.OutputState }

func (WatcherMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Watcher)(nil)).Elem()
}

func (o WatcherMapOutput) ToWatcherMapOutput() WatcherMapOutput {
	return o
}

func (o WatcherMapOutput) ToWatcherMapOutputWithContext(ctx context.Context) WatcherMapOutput {
	return o
}

func (o WatcherMapOutput) MapIndex(k pulumi.StringInput) WatcherOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Watcher {
		return vs[0].(map[string]*Watcher)[vs[1].(string)]
	}).(WatcherOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WatcherInput)(nil)).Elem(), &Watcher{})
	pulumi.RegisterInputType(reflect.TypeOf((*WatcherArrayInput)(nil)).Elem(), WatcherArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WatcherMapInput)(nil)).Elem(), WatcherMap{})
	pulumi.RegisterOutputType(WatcherOutput{})
	pulumi.RegisterOutputType(WatcherArrayOutput{})
	pulumi.RegisterOutputType(WatcherMapOutput{})
}
