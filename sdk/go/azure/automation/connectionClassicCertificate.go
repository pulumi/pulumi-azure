// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package automation

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Automation Connection with type `AzureClassicCertificate`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/automation"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleClientConfig, err := core.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := automation.NewAccount(ctx, "exampleAccount", &automation.AccountArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				SkuName:           pulumi.String("Basic"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = automation.NewConnectionClassicCertificate(ctx, "exampleConnectionClassicCertificate", &automation.ConnectionClassicCertificateArgs{
//				ResourceGroupName:     exampleResourceGroup.Name,
//				AutomationAccountName: exampleAccount.Name,
//				CertificateAssetName:  pulumi.String("cert1"),
//				SubscriptionName:      pulumi.String("subs1"),
//				SubscriptionId:        *pulumi.String(exampleClientConfig.SubscriptionId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Automation Connection can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:automation/connectionClassicCertificate:ConnectionClassicCertificate conn1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Automation/automationAccounts/account1/connections/conn1
//
// ```
type ConnectionClassicCertificate struct {
	pulumi.CustomResourceState

	// The name of the automation account in which the Connection is created. Changing this forces a new resource to be created.
	AutomationAccountName pulumi.StringOutput `pulumi:"automationAccountName"`
	// The name of the certificate asset.
	CertificateAssetName pulumi.StringOutput `pulumi:"certificateAssetName"`
	// A description for this Connection.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the name of the Connection. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the resource group in which the Connection is created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The id of subscription.
	SubscriptionId pulumi.StringOutput `pulumi:"subscriptionId"`
	// The name of subscription.
	SubscriptionName pulumi.StringOutput `pulumi:"subscriptionName"`
}

// NewConnectionClassicCertificate registers a new resource with the given unique name, arguments, and options.
func NewConnectionClassicCertificate(ctx *pulumi.Context,
	name string, args *ConnectionClassicCertificateArgs, opts ...pulumi.ResourceOption) (*ConnectionClassicCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutomationAccountName == nil {
		return nil, errors.New("invalid value for required argument 'AutomationAccountName'")
	}
	if args.CertificateAssetName == nil {
		return nil, errors.New("invalid value for required argument 'CertificateAssetName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SubscriptionId == nil {
		return nil, errors.New("invalid value for required argument 'SubscriptionId'")
	}
	if args.SubscriptionName == nil {
		return nil, errors.New("invalid value for required argument 'SubscriptionName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConnectionClassicCertificate
	err := ctx.RegisterResource("azure:automation/connectionClassicCertificate:ConnectionClassicCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectionClassicCertificate gets an existing ConnectionClassicCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectionClassicCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionClassicCertificateState, opts ...pulumi.ResourceOption) (*ConnectionClassicCertificate, error) {
	var resource ConnectionClassicCertificate
	err := ctx.ReadResource("azure:automation/connectionClassicCertificate:ConnectionClassicCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectionClassicCertificate resources.
type connectionClassicCertificateState struct {
	// The name of the automation account in which the Connection is created. Changing this forces a new resource to be created.
	AutomationAccountName *string `pulumi:"automationAccountName"`
	// The name of the certificate asset.
	CertificateAssetName *string `pulumi:"certificateAssetName"`
	// A description for this Connection.
	Description *string `pulumi:"description"`
	// Specifies the name of the Connection. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which the Connection is created. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The id of subscription.
	SubscriptionId *string `pulumi:"subscriptionId"`
	// The name of subscription.
	SubscriptionName *string `pulumi:"subscriptionName"`
}

type ConnectionClassicCertificateState struct {
	// The name of the automation account in which the Connection is created. Changing this forces a new resource to be created.
	AutomationAccountName pulumi.StringPtrInput
	// The name of the certificate asset.
	CertificateAssetName pulumi.StringPtrInput
	// A description for this Connection.
	Description pulumi.StringPtrInput
	// Specifies the name of the Connection. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which the Connection is created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The id of subscription.
	SubscriptionId pulumi.StringPtrInput
	// The name of subscription.
	SubscriptionName pulumi.StringPtrInput
}

func (ConnectionClassicCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionClassicCertificateState)(nil)).Elem()
}

type connectionClassicCertificateArgs struct {
	// The name of the automation account in which the Connection is created. Changing this forces a new resource to be created.
	AutomationAccountName string `pulumi:"automationAccountName"`
	// The name of the certificate asset.
	CertificateAssetName string `pulumi:"certificateAssetName"`
	// A description for this Connection.
	Description *string `pulumi:"description"`
	// Specifies the name of the Connection. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which the Connection is created. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The id of subscription.
	SubscriptionId string `pulumi:"subscriptionId"`
	// The name of subscription.
	SubscriptionName string `pulumi:"subscriptionName"`
}

// The set of arguments for constructing a ConnectionClassicCertificate resource.
type ConnectionClassicCertificateArgs struct {
	// The name of the automation account in which the Connection is created. Changing this forces a new resource to be created.
	AutomationAccountName pulumi.StringInput
	// The name of the certificate asset.
	CertificateAssetName pulumi.StringInput
	// A description for this Connection.
	Description pulumi.StringPtrInput
	// Specifies the name of the Connection. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which the Connection is created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// The id of subscription.
	SubscriptionId pulumi.StringInput
	// The name of subscription.
	SubscriptionName pulumi.StringInput
}

func (ConnectionClassicCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionClassicCertificateArgs)(nil)).Elem()
}

type ConnectionClassicCertificateInput interface {
	pulumi.Input

	ToConnectionClassicCertificateOutput() ConnectionClassicCertificateOutput
	ToConnectionClassicCertificateOutputWithContext(ctx context.Context) ConnectionClassicCertificateOutput
}

func (*ConnectionClassicCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionClassicCertificate)(nil)).Elem()
}

func (i *ConnectionClassicCertificate) ToConnectionClassicCertificateOutput() ConnectionClassicCertificateOutput {
	return i.ToConnectionClassicCertificateOutputWithContext(context.Background())
}

func (i *ConnectionClassicCertificate) ToConnectionClassicCertificateOutputWithContext(ctx context.Context) ConnectionClassicCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionClassicCertificateOutput)
}

// ConnectionClassicCertificateArrayInput is an input type that accepts ConnectionClassicCertificateArray and ConnectionClassicCertificateArrayOutput values.
// You can construct a concrete instance of `ConnectionClassicCertificateArrayInput` via:
//
//	ConnectionClassicCertificateArray{ ConnectionClassicCertificateArgs{...} }
type ConnectionClassicCertificateArrayInput interface {
	pulumi.Input

	ToConnectionClassicCertificateArrayOutput() ConnectionClassicCertificateArrayOutput
	ToConnectionClassicCertificateArrayOutputWithContext(context.Context) ConnectionClassicCertificateArrayOutput
}

type ConnectionClassicCertificateArray []ConnectionClassicCertificateInput

func (ConnectionClassicCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectionClassicCertificate)(nil)).Elem()
}

func (i ConnectionClassicCertificateArray) ToConnectionClassicCertificateArrayOutput() ConnectionClassicCertificateArrayOutput {
	return i.ToConnectionClassicCertificateArrayOutputWithContext(context.Background())
}

func (i ConnectionClassicCertificateArray) ToConnectionClassicCertificateArrayOutputWithContext(ctx context.Context) ConnectionClassicCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionClassicCertificateArrayOutput)
}

// ConnectionClassicCertificateMapInput is an input type that accepts ConnectionClassicCertificateMap and ConnectionClassicCertificateMapOutput values.
// You can construct a concrete instance of `ConnectionClassicCertificateMapInput` via:
//
//	ConnectionClassicCertificateMap{ "key": ConnectionClassicCertificateArgs{...} }
type ConnectionClassicCertificateMapInput interface {
	pulumi.Input

	ToConnectionClassicCertificateMapOutput() ConnectionClassicCertificateMapOutput
	ToConnectionClassicCertificateMapOutputWithContext(context.Context) ConnectionClassicCertificateMapOutput
}

type ConnectionClassicCertificateMap map[string]ConnectionClassicCertificateInput

func (ConnectionClassicCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectionClassicCertificate)(nil)).Elem()
}

func (i ConnectionClassicCertificateMap) ToConnectionClassicCertificateMapOutput() ConnectionClassicCertificateMapOutput {
	return i.ToConnectionClassicCertificateMapOutputWithContext(context.Background())
}

func (i ConnectionClassicCertificateMap) ToConnectionClassicCertificateMapOutputWithContext(ctx context.Context) ConnectionClassicCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionClassicCertificateMapOutput)
}

type ConnectionClassicCertificateOutput struct{ *pulumi.OutputState }

func (ConnectionClassicCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionClassicCertificate)(nil)).Elem()
}

func (o ConnectionClassicCertificateOutput) ToConnectionClassicCertificateOutput() ConnectionClassicCertificateOutput {
	return o
}

func (o ConnectionClassicCertificateOutput) ToConnectionClassicCertificateOutputWithContext(ctx context.Context) ConnectionClassicCertificateOutput {
	return o
}

// The name of the automation account in which the Connection is created. Changing this forces a new resource to be created.
func (o ConnectionClassicCertificateOutput) AutomationAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionClassicCertificate) pulumi.StringOutput { return v.AutomationAccountName }).(pulumi.StringOutput)
}

// The name of the certificate asset.
func (o ConnectionClassicCertificateOutput) CertificateAssetName() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionClassicCertificate) pulumi.StringOutput { return v.CertificateAssetName }).(pulumi.StringOutput)
}

// A description for this Connection.
func (o ConnectionClassicCertificateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionClassicCertificate) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the name of the Connection. Changing this forces a new resource to be created.
func (o ConnectionClassicCertificateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionClassicCertificate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the resource group in which the Connection is created. Changing this forces a new resource to be created.
func (o ConnectionClassicCertificateOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionClassicCertificate) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The id of subscription.
func (o ConnectionClassicCertificateOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionClassicCertificate) pulumi.StringOutput { return v.SubscriptionId }).(pulumi.StringOutput)
}

// The name of subscription.
func (o ConnectionClassicCertificateOutput) SubscriptionName() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionClassicCertificate) pulumi.StringOutput { return v.SubscriptionName }).(pulumi.StringOutput)
}

type ConnectionClassicCertificateArrayOutput struct{ *pulumi.OutputState }

func (ConnectionClassicCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectionClassicCertificate)(nil)).Elem()
}

func (o ConnectionClassicCertificateArrayOutput) ToConnectionClassicCertificateArrayOutput() ConnectionClassicCertificateArrayOutput {
	return o
}

func (o ConnectionClassicCertificateArrayOutput) ToConnectionClassicCertificateArrayOutputWithContext(ctx context.Context) ConnectionClassicCertificateArrayOutput {
	return o
}

func (o ConnectionClassicCertificateArrayOutput) Index(i pulumi.IntInput) ConnectionClassicCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectionClassicCertificate {
		return vs[0].([]*ConnectionClassicCertificate)[vs[1].(int)]
	}).(ConnectionClassicCertificateOutput)
}

type ConnectionClassicCertificateMapOutput struct{ *pulumi.OutputState }

func (ConnectionClassicCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectionClassicCertificate)(nil)).Elem()
}

func (o ConnectionClassicCertificateMapOutput) ToConnectionClassicCertificateMapOutput() ConnectionClassicCertificateMapOutput {
	return o
}

func (o ConnectionClassicCertificateMapOutput) ToConnectionClassicCertificateMapOutputWithContext(ctx context.Context) ConnectionClassicCertificateMapOutput {
	return o
}

func (o ConnectionClassicCertificateMapOutput) MapIndex(k pulumi.StringInput) ConnectionClassicCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectionClassicCertificate {
		return vs[0].(map[string]*ConnectionClassicCertificate)[vs[1].(string)]
	}).(ConnectionClassicCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionClassicCertificateInput)(nil)).Elem(), &ConnectionClassicCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionClassicCertificateArrayInput)(nil)).Elem(), ConnectionClassicCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionClassicCertificateMapInput)(nil)).Elem(), ConnectionClassicCertificateMap{})
	pulumi.RegisterOutputType(ConnectionClassicCertificateOutput{})
	pulumi.RegisterOutputType(ConnectionClassicCertificateArrayOutput{})
	pulumi.RegisterOutputType(ConnectionClassicCertificateMapOutput{})
}
