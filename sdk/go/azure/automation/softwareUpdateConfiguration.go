// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package automation

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Automation Software Update Configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/automation"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-rg"),
//				Location: pulumi.String("East US"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := automation.NewAccount(ctx, "example", &automation.AccountArgs{
//				Name:              pulumi.String("example"),
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//				SkuName:           pulumi.String("Basic"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleRunBook, err := automation.NewRunBook(ctx, "example", &automation.RunBookArgs{
//				Name:                  pulumi.String("Get-AzureVMTutorial"),
//				Location:              example.Location,
//				ResourceGroupName:     example.Name,
//				AutomationAccountName: exampleAccount.Name,
//				LogVerbose:            pulumi.Bool(true),
//				LogProgress:           pulumi.Bool(true),
//				Description:           pulumi.String("This is a example runbook for terraform acceptance example"),
//				RunbookType:           pulumi.String("Python3"),
//				Content:               pulumi.String("# Some example content\n# for Terraform acceptance example\n"),
//				Tags: pulumi.StringMap{
//					"ENV": pulumi.String("runbook_test"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = automation.NewSoftwareUpdateConfiguration(ctx, "example", &automation.SoftwareUpdateConfigurationArgs{
//				Name:                pulumi.String("example"),
//				AutomationAccountId: exampleAccount.ID(),
//				Linux: &automation.SoftwareUpdateConfigurationLinuxArgs{
//					ClassificationsIncludeds: pulumi.StringArray("Security"),
//					ExcludedPackages: pulumi.StringArray{
//						pulumi.String("apt"),
//					},
//					IncludedPackages: pulumi.StringArray{
//						pulumi.String("vim"),
//					},
//					Reboot: pulumi.String("IfRequired"),
//				},
//				PreTask: &automation.SoftwareUpdateConfigurationPreTaskArgs{
//					Source: exampleRunBook.Name,
//					Parameters: pulumi.StringMap{
//						"COMPUTER_NAME": pulumi.String("Foo"),
//					},
//				},
//				Duration: pulumi.String("PT2H2M2S"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Automations Software Update Configuration can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:automation/softwareUpdateConfiguration:SoftwareUpdateConfiguration example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.Automation/automationAccounts/account1/softwareUpdateConfigurations/suc1
// ```
type SoftwareUpdateConfiguration struct {
	pulumi.CustomResourceState

	// The ID of Automation Account to manage this Source Control. Changing this forces a new Automation Source Control to be created.
	AutomationAccountId pulumi.StringOutput `pulumi:"automationAccountId"`
	// Maximum time allowed for the software update configuration run. using format `PT[n]H[n]M[n]S` as per ISO8601. Defaults to `PT2H`.
	Duration pulumi.StringPtrOutput `pulumi:"duration"`
	// The Error code when failed.
	ErrorCode pulumi.StringOutput `pulumi:"errorCode"`
	// The Error message indicating why the operation failed.
	ErrorMessage pulumi.StringOutput `pulumi:"errorMessage"`
	// A `linux` block as defined below.
	Linux SoftwareUpdateConfigurationLinuxPtrOutput `pulumi:"linux"`
	// The name which should be used for this Automation. Changing this forces a new Automation to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies a list of names of non-Azure machines for the software update configuration.
	NonAzureComputerNames pulumi.StringArrayOutput `pulumi:"nonAzureComputerNames"`
	// A `postTask` blocks as defined below.
	PostTask SoftwareUpdateConfigurationPostTaskPtrOutput `pulumi:"postTask"`
	// A `preTask` blocks as defined below.
	PreTask SoftwareUpdateConfigurationPreTaskPtrOutput `pulumi:"preTask"`
	// A `schedule` blocks as defined below.
	Schedule SoftwareUpdateConfigurationScheduleOutput `pulumi:"schedule"`
	// A `target` blocks as defined below.
	Target SoftwareUpdateConfigurationTargetPtrOutput `pulumi:"target"`
	// Specifies a list of Azure Resource IDs of azure virtual machines.
	VirtualMachineIds pulumi.StringArrayOutput `pulumi:"virtualMachineIds"`
	// A `windows` block as defined below.
	//
	// > **NOTE:** One of `linux` or `windows` must be specified.
	Windows SoftwareUpdateConfigurationWindowsPtrOutput `pulumi:"windows"`
}

// NewSoftwareUpdateConfiguration registers a new resource with the given unique name, arguments, and options.
func NewSoftwareUpdateConfiguration(ctx *pulumi.Context,
	name string, args *SoftwareUpdateConfigurationArgs, opts ...pulumi.ResourceOption) (*SoftwareUpdateConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutomationAccountId == nil {
		return nil, errors.New("invalid value for required argument 'AutomationAccountId'")
	}
	if args.Schedule == nil {
		return nil, errors.New("invalid value for required argument 'Schedule'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SoftwareUpdateConfiguration
	err := ctx.RegisterResource("azure:automation/softwareUpdateConfiguration:SoftwareUpdateConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSoftwareUpdateConfiguration gets an existing SoftwareUpdateConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSoftwareUpdateConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SoftwareUpdateConfigurationState, opts ...pulumi.ResourceOption) (*SoftwareUpdateConfiguration, error) {
	var resource SoftwareUpdateConfiguration
	err := ctx.ReadResource("azure:automation/softwareUpdateConfiguration:SoftwareUpdateConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SoftwareUpdateConfiguration resources.
type softwareUpdateConfigurationState struct {
	// The ID of Automation Account to manage this Source Control. Changing this forces a new Automation Source Control to be created.
	AutomationAccountId *string `pulumi:"automationAccountId"`
	// Maximum time allowed for the software update configuration run. using format `PT[n]H[n]M[n]S` as per ISO8601. Defaults to `PT2H`.
	Duration *string `pulumi:"duration"`
	// The Error code when failed.
	ErrorCode *string `pulumi:"errorCode"`
	// The Error message indicating why the operation failed.
	ErrorMessage *string `pulumi:"errorMessage"`
	// A `linux` block as defined below.
	Linux *SoftwareUpdateConfigurationLinux `pulumi:"linux"`
	// The name which should be used for this Automation. Changing this forces a new Automation to be created.
	Name *string `pulumi:"name"`
	// Specifies a list of names of non-Azure machines for the software update configuration.
	NonAzureComputerNames []string `pulumi:"nonAzureComputerNames"`
	// A `postTask` blocks as defined below.
	PostTask *SoftwareUpdateConfigurationPostTask `pulumi:"postTask"`
	// A `preTask` blocks as defined below.
	PreTask *SoftwareUpdateConfigurationPreTask `pulumi:"preTask"`
	// A `schedule` blocks as defined below.
	Schedule *SoftwareUpdateConfigurationSchedule `pulumi:"schedule"`
	// A `target` blocks as defined below.
	Target *SoftwareUpdateConfigurationTarget `pulumi:"target"`
	// Specifies a list of Azure Resource IDs of azure virtual machines.
	VirtualMachineIds []string `pulumi:"virtualMachineIds"`
	// A `windows` block as defined below.
	//
	// > **NOTE:** One of `linux` or `windows` must be specified.
	Windows *SoftwareUpdateConfigurationWindows `pulumi:"windows"`
}

type SoftwareUpdateConfigurationState struct {
	// The ID of Automation Account to manage this Source Control. Changing this forces a new Automation Source Control to be created.
	AutomationAccountId pulumi.StringPtrInput
	// Maximum time allowed for the software update configuration run. using format `PT[n]H[n]M[n]S` as per ISO8601. Defaults to `PT2H`.
	Duration pulumi.StringPtrInput
	// The Error code when failed.
	ErrorCode pulumi.StringPtrInput
	// The Error message indicating why the operation failed.
	ErrorMessage pulumi.StringPtrInput
	// A `linux` block as defined below.
	Linux SoftwareUpdateConfigurationLinuxPtrInput
	// The name which should be used for this Automation. Changing this forces a new Automation to be created.
	Name pulumi.StringPtrInput
	// Specifies a list of names of non-Azure machines for the software update configuration.
	NonAzureComputerNames pulumi.StringArrayInput
	// A `postTask` blocks as defined below.
	PostTask SoftwareUpdateConfigurationPostTaskPtrInput
	// A `preTask` blocks as defined below.
	PreTask SoftwareUpdateConfigurationPreTaskPtrInput
	// A `schedule` blocks as defined below.
	Schedule SoftwareUpdateConfigurationSchedulePtrInput
	// A `target` blocks as defined below.
	Target SoftwareUpdateConfigurationTargetPtrInput
	// Specifies a list of Azure Resource IDs of azure virtual machines.
	VirtualMachineIds pulumi.StringArrayInput
	// A `windows` block as defined below.
	//
	// > **NOTE:** One of `linux` or `windows` must be specified.
	Windows SoftwareUpdateConfigurationWindowsPtrInput
}

func (SoftwareUpdateConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*softwareUpdateConfigurationState)(nil)).Elem()
}

type softwareUpdateConfigurationArgs struct {
	// The ID of Automation Account to manage this Source Control. Changing this forces a new Automation Source Control to be created.
	AutomationAccountId string `pulumi:"automationAccountId"`
	// Maximum time allowed for the software update configuration run. using format `PT[n]H[n]M[n]S` as per ISO8601. Defaults to `PT2H`.
	Duration *string `pulumi:"duration"`
	// A `linux` block as defined below.
	Linux *SoftwareUpdateConfigurationLinux `pulumi:"linux"`
	// The name which should be used for this Automation. Changing this forces a new Automation to be created.
	Name *string `pulumi:"name"`
	// Specifies a list of names of non-Azure machines for the software update configuration.
	NonAzureComputerNames []string `pulumi:"nonAzureComputerNames"`
	// A `postTask` blocks as defined below.
	PostTask *SoftwareUpdateConfigurationPostTask `pulumi:"postTask"`
	// A `preTask` blocks as defined below.
	PreTask *SoftwareUpdateConfigurationPreTask `pulumi:"preTask"`
	// A `schedule` blocks as defined below.
	Schedule SoftwareUpdateConfigurationSchedule `pulumi:"schedule"`
	// A `target` blocks as defined below.
	Target *SoftwareUpdateConfigurationTarget `pulumi:"target"`
	// Specifies a list of Azure Resource IDs of azure virtual machines.
	VirtualMachineIds []string `pulumi:"virtualMachineIds"`
	// A `windows` block as defined below.
	//
	// > **NOTE:** One of `linux` or `windows` must be specified.
	Windows *SoftwareUpdateConfigurationWindows `pulumi:"windows"`
}

// The set of arguments for constructing a SoftwareUpdateConfiguration resource.
type SoftwareUpdateConfigurationArgs struct {
	// The ID of Automation Account to manage this Source Control. Changing this forces a new Automation Source Control to be created.
	AutomationAccountId pulumi.StringInput
	// Maximum time allowed for the software update configuration run. using format `PT[n]H[n]M[n]S` as per ISO8601. Defaults to `PT2H`.
	Duration pulumi.StringPtrInput
	// A `linux` block as defined below.
	Linux SoftwareUpdateConfigurationLinuxPtrInput
	// The name which should be used for this Automation. Changing this forces a new Automation to be created.
	Name pulumi.StringPtrInput
	// Specifies a list of names of non-Azure machines for the software update configuration.
	NonAzureComputerNames pulumi.StringArrayInput
	// A `postTask` blocks as defined below.
	PostTask SoftwareUpdateConfigurationPostTaskPtrInput
	// A `preTask` blocks as defined below.
	PreTask SoftwareUpdateConfigurationPreTaskPtrInput
	// A `schedule` blocks as defined below.
	Schedule SoftwareUpdateConfigurationScheduleInput
	// A `target` blocks as defined below.
	Target SoftwareUpdateConfigurationTargetPtrInput
	// Specifies a list of Azure Resource IDs of azure virtual machines.
	VirtualMachineIds pulumi.StringArrayInput
	// A `windows` block as defined below.
	//
	// > **NOTE:** One of `linux` or `windows` must be specified.
	Windows SoftwareUpdateConfigurationWindowsPtrInput
}

func (SoftwareUpdateConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*softwareUpdateConfigurationArgs)(nil)).Elem()
}

type SoftwareUpdateConfigurationInput interface {
	pulumi.Input

	ToSoftwareUpdateConfigurationOutput() SoftwareUpdateConfigurationOutput
	ToSoftwareUpdateConfigurationOutputWithContext(ctx context.Context) SoftwareUpdateConfigurationOutput
}

func (*SoftwareUpdateConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareUpdateConfiguration)(nil)).Elem()
}

func (i *SoftwareUpdateConfiguration) ToSoftwareUpdateConfigurationOutput() SoftwareUpdateConfigurationOutput {
	return i.ToSoftwareUpdateConfigurationOutputWithContext(context.Background())
}

func (i *SoftwareUpdateConfiguration) ToSoftwareUpdateConfigurationOutputWithContext(ctx context.Context) SoftwareUpdateConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareUpdateConfigurationOutput)
}

// SoftwareUpdateConfigurationArrayInput is an input type that accepts SoftwareUpdateConfigurationArray and SoftwareUpdateConfigurationArrayOutput values.
// You can construct a concrete instance of `SoftwareUpdateConfigurationArrayInput` via:
//
//	SoftwareUpdateConfigurationArray{ SoftwareUpdateConfigurationArgs{...} }
type SoftwareUpdateConfigurationArrayInput interface {
	pulumi.Input

	ToSoftwareUpdateConfigurationArrayOutput() SoftwareUpdateConfigurationArrayOutput
	ToSoftwareUpdateConfigurationArrayOutputWithContext(context.Context) SoftwareUpdateConfigurationArrayOutput
}

type SoftwareUpdateConfigurationArray []SoftwareUpdateConfigurationInput

func (SoftwareUpdateConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SoftwareUpdateConfiguration)(nil)).Elem()
}

func (i SoftwareUpdateConfigurationArray) ToSoftwareUpdateConfigurationArrayOutput() SoftwareUpdateConfigurationArrayOutput {
	return i.ToSoftwareUpdateConfigurationArrayOutputWithContext(context.Background())
}

func (i SoftwareUpdateConfigurationArray) ToSoftwareUpdateConfigurationArrayOutputWithContext(ctx context.Context) SoftwareUpdateConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareUpdateConfigurationArrayOutput)
}

// SoftwareUpdateConfigurationMapInput is an input type that accepts SoftwareUpdateConfigurationMap and SoftwareUpdateConfigurationMapOutput values.
// You can construct a concrete instance of `SoftwareUpdateConfigurationMapInput` via:
//
//	SoftwareUpdateConfigurationMap{ "key": SoftwareUpdateConfigurationArgs{...} }
type SoftwareUpdateConfigurationMapInput interface {
	pulumi.Input

	ToSoftwareUpdateConfigurationMapOutput() SoftwareUpdateConfigurationMapOutput
	ToSoftwareUpdateConfigurationMapOutputWithContext(context.Context) SoftwareUpdateConfigurationMapOutput
}

type SoftwareUpdateConfigurationMap map[string]SoftwareUpdateConfigurationInput

func (SoftwareUpdateConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SoftwareUpdateConfiguration)(nil)).Elem()
}

func (i SoftwareUpdateConfigurationMap) ToSoftwareUpdateConfigurationMapOutput() SoftwareUpdateConfigurationMapOutput {
	return i.ToSoftwareUpdateConfigurationMapOutputWithContext(context.Background())
}

func (i SoftwareUpdateConfigurationMap) ToSoftwareUpdateConfigurationMapOutputWithContext(ctx context.Context) SoftwareUpdateConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareUpdateConfigurationMapOutput)
}

type SoftwareUpdateConfigurationOutput struct{ *pulumi.OutputState }

func (SoftwareUpdateConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareUpdateConfiguration)(nil)).Elem()
}

func (o SoftwareUpdateConfigurationOutput) ToSoftwareUpdateConfigurationOutput() SoftwareUpdateConfigurationOutput {
	return o
}

func (o SoftwareUpdateConfigurationOutput) ToSoftwareUpdateConfigurationOutputWithContext(ctx context.Context) SoftwareUpdateConfigurationOutput {
	return o
}

// The ID of Automation Account to manage this Source Control. Changing this forces a new Automation Source Control to be created.
func (o SoftwareUpdateConfigurationOutput) AutomationAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareUpdateConfiguration) pulumi.StringOutput { return v.AutomationAccountId }).(pulumi.StringOutput)
}

// Maximum time allowed for the software update configuration run. using format `PT[n]H[n]M[n]S` as per ISO8601. Defaults to `PT2H`.
func (o SoftwareUpdateConfigurationOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareUpdateConfiguration) pulumi.StringPtrOutput { return v.Duration }).(pulumi.StringPtrOutput)
}

// The Error code when failed.
func (o SoftwareUpdateConfigurationOutput) ErrorCode() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareUpdateConfiguration) pulumi.StringOutput { return v.ErrorCode }).(pulumi.StringOutput)
}

// The Error message indicating why the operation failed.
func (o SoftwareUpdateConfigurationOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareUpdateConfiguration) pulumi.StringOutput { return v.ErrorMessage }).(pulumi.StringOutput)
}

// A `linux` block as defined below.
func (o SoftwareUpdateConfigurationOutput) Linux() SoftwareUpdateConfigurationLinuxPtrOutput {
	return o.ApplyT(func(v *SoftwareUpdateConfiguration) SoftwareUpdateConfigurationLinuxPtrOutput { return v.Linux }).(SoftwareUpdateConfigurationLinuxPtrOutput)
}

// The name which should be used for this Automation. Changing this forces a new Automation to be created.
func (o SoftwareUpdateConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareUpdateConfiguration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies a list of names of non-Azure machines for the software update configuration.
func (o SoftwareUpdateConfigurationOutput) NonAzureComputerNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SoftwareUpdateConfiguration) pulumi.StringArrayOutput { return v.NonAzureComputerNames }).(pulumi.StringArrayOutput)
}

// A `postTask` blocks as defined below.
func (o SoftwareUpdateConfigurationOutput) PostTask() SoftwareUpdateConfigurationPostTaskPtrOutput {
	return o.ApplyT(func(v *SoftwareUpdateConfiguration) SoftwareUpdateConfigurationPostTaskPtrOutput { return v.PostTask }).(SoftwareUpdateConfigurationPostTaskPtrOutput)
}

// A `preTask` blocks as defined below.
func (o SoftwareUpdateConfigurationOutput) PreTask() SoftwareUpdateConfigurationPreTaskPtrOutput {
	return o.ApplyT(func(v *SoftwareUpdateConfiguration) SoftwareUpdateConfigurationPreTaskPtrOutput { return v.PreTask }).(SoftwareUpdateConfigurationPreTaskPtrOutput)
}

// A `schedule` blocks as defined below.
func (o SoftwareUpdateConfigurationOutput) Schedule() SoftwareUpdateConfigurationScheduleOutput {
	return o.ApplyT(func(v *SoftwareUpdateConfiguration) SoftwareUpdateConfigurationScheduleOutput { return v.Schedule }).(SoftwareUpdateConfigurationScheduleOutput)
}

// A `target` blocks as defined below.
func (o SoftwareUpdateConfigurationOutput) Target() SoftwareUpdateConfigurationTargetPtrOutput {
	return o.ApplyT(func(v *SoftwareUpdateConfiguration) SoftwareUpdateConfigurationTargetPtrOutput { return v.Target }).(SoftwareUpdateConfigurationTargetPtrOutput)
}

// Specifies a list of Azure Resource IDs of azure virtual machines.
func (o SoftwareUpdateConfigurationOutput) VirtualMachineIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SoftwareUpdateConfiguration) pulumi.StringArrayOutput { return v.VirtualMachineIds }).(pulumi.StringArrayOutput)
}

// A `windows` block as defined below.
//
// > **NOTE:** One of `linux` or `windows` must be specified.
func (o SoftwareUpdateConfigurationOutput) Windows() SoftwareUpdateConfigurationWindowsPtrOutput {
	return o.ApplyT(func(v *SoftwareUpdateConfiguration) SoftwareUpdateConfigurationWindowsPtrOutput { return v.Windows }).(SoftwareUpdateConfigurationWindowsPtrOutput)
}

type SoftwareUpdateConfigurationArrayOutput struct{ *pulumi.OutputState }

func (SoftwareUpdateConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SoftwareUpdateConfiguration)(nil)).Elem()
}

func (o SoftwareUpdateConfigurationArrayOutput) ToSoftwareUpdateConfigurationArrayOutput() SoftwareUpdateConfigurationArrayOutput {
	return o
}

func (o SoftwareUpdateConfigurationArrayOutput) ToSoftwareUpdateConfigurationArrayOutputWithContext(ctx context.Context) SoftwareUpdateConfigurationArrayOutput {
	return o
}

func (o SoftwareUpdateConfigurationArrayOutput) Index(i pulumi.IntInput) SoftwareUpdateConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SoftwareUpdateConfiguration {
		return vs[0].([]*SoftwareUpdateConfiguration)[vs[1].(int)]
	}).(SoftwareUpdateConfigurationOutput)
}

type SoftwareUpdateConfigurationMapOutput struct{ *pulumi.OutputState }

func (SoftwareUpdateConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SoftwareUpdateConfiguration)(nil)).Elem()
}

func (o SoftwareUpdateConfigurationMapOutput) ToSoftwareUpdateConfigurationMapOutput() SoftwareUpdateConfigurationMapOutput {
	return o
}

func (o SoftwareUpdateConfigurationMapOutput) ToSoftwareUpdateConfigurationMapOutputWithContext(ctx context.Context) SoftwareUpdateConfigurationMapOutput {
	return o
}

func (o SoftwareUpdateConfigurationMapOutput) MapIndex(k pulumi.StringInput) SoftwareUpdateConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SoftwareUpdateConfiguration {
		return vs[0].(map[string]*SoftwareUpdateConfiguration)[vs[1].(string)]
	}).(SoftwareUpdateConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SoftwareUpdateConfigurationInput)(nil)).Elem(), &SoftwareUpdateConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*SoftwareUpdateConfigurationArrayInput)(nil)).Elem(), SoftwareUpdateConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SoftwareUpdateConfigurationMapInput)(nil)).Elem(), SoftwareUpdateConfigurationMap{})
	pulumi.RegisterOutputType(SoftwareUpdateConfigurationOutput{})
	pulumi.RegisterOutputType(SoftwareUpdateConfigurationArrayOutput{})
	pulumi.RegisterOutputType(SoftwareUpdateConfigurationMapOutput{})
}
