// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kusto

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a Kusto / Cosmos Database Data Connection.
//
// ## Import
//
// Kusto / Cosmos Database Data Connection can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:kusto/cosmosdbDataConnection:CosmosdbDataConnection example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Kusto/clusters/cluster1/databases/database1/dataConnections/dataConnection1
//
// ```
type CosmosdbDataConnection struct {
	pulumi.CustomResourceState

	// The name of an existing container in the Cosmos DB database. Changing this forces a new Kusto Cosmos DB Connection to be created.
	CosmosdbContainerId pulumi.StringOutput `pulumi:"cosmosdbContainerId"`
	// The name of the database in the Kusto cluster. Changing this forces a new Kusto Cosmos DB Connection to be created.
	KustoDatabaseId pulumi.StringOutput `pulumi:"kustoDatabaseId"`
	// The Azure Region where the Data Explorer should exist. Changing this forces a new Kusto Cosmos DB Connection to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource ID of a managed system or user-assigned identity. The identity is used to authenticate with Cosmos DB. Changing this forces a new Kusto Cosmos DB Connection to be created.
	ManagedIdentityId pulumi.StringOutput `pulumi:"managedIdentityId"`
	// The name of an existing mapping rule to use when ingesting the retrieved data. Changing this forces a new Kusto Cosmos DB Connection to be created.
	MappingRuleName pulumi.StringPtrOutput `pulumi:"mappingRuleName"`
	// The name of the data connection. Changing this forces a new Kusto Cosmos DB Connection to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// If defined, the data connection retrieves Cosmos DB documents created or updated after the specified retrieval start date. Changing this forces a new Kusto Cosmos DB Connection to be created.
	RetrievalStartDate pulumi.StringPtrOutput `pulumi:"retrievalStartDate"`
	// The case-sensitive name of the existing target table in your cluster. Retrieved data is ingested into this table. Changing this forces a new Kusto Cosmos DB Connection to be created.
	TableName pulumi.StringOutput `pulumi:"tableName"`
}

// NewCosmosdbDataConnection registers a new resource with the given unique name, arguments, and options.
func NewCosmosdbDataConnection(ctx *pulumi.Context,
	name string, args *CosmosdbDataConnectionArgs, opts ...pulumi.ResourceOption) (*CosmosdbDataConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CosmosdbContainerId == nil {
		return nil, errors.New("invalid value for required argument 'CosmosdbContainerId'")
	}
	if args.KustoDatabaseId == nil {
		return nil, errors.New("invalid value for required argument 'KustoDatabaseId'")
	}
	if args.ManagedIdentityId == nil {
		return nil, errors.New("invalid value for required argument 'ManagedIdentityId'")
	}
	if args.TableName == nil {
		return nil, errors.New("invalid value for required argument 'TableName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CosmosdbDataConnection
	err := ctx.RegisterResource("azure:kusto/cosmosdbDataConnection:CosmosdbDataConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCosmosdbDataConnection gets an existing CosmosdbDataConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCosmosdbDataConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CosmosdbDataConnectionState, opts ...pulumi.ResourceOption) (*CosmosdbDataConnection, error) {
	var resource CosmosdbDataConnection
	err := ctx.ReadResource("azure:kusto/cosmosdbDataConnection:CosmosdbDataConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CosmosdbDataConnection resources.
type cosmosdbDataConnectionState struct {
	// The name of an existing container in the Cosmos DB database. Changing this forces a new Kusto Cosmos DB Connection to be created.
	CosmosdbContainerId *string `pulumi:"cosmosdbContainerId"`
	// The name of the database in the Kusto cluster. Changing this forces a new Kusto Cosmos DB Connection to be created.
	KustoDatabaseId *string `pulumi:"kustoDatabaseId"`
	// The Azure Region where the Data Explorer should exist. Changing this forces a new Kusto Cosmos DB Connection to be created.
	Location *string `pulumi:"location"`
	// The resource ID of a managed system or user-assigned identity. The identity is used to authenticate with Cosmos DB. Changing this forces a new Kusto Cosmos DB Connection to be created.
	ManagedIdentityId *string `pulumi:"managedIdentityId"`
	// The name of an existing mapping rule to use when ingesting the retrieved data. Changing this forces a new Kusto Cosmos DB Connection to be created.
	MappingRuleName *string `pulumi:"mappingRuleName"`
	// The name of the data connection. Changing this forces a new Kusto Cosmos DB Connection to be created.
	Name *string `pulumi:"name"`
	// If defined, the data connection retrieves Cosmos DB documents created or updated after the specified retrieval start date. Changing this forces a new Kusto Cosmos DB Connection to be created.
	RetrievalStartDate *string `pulumi:"retrievalStartDate"`
	// The case-sensitive name of the existing target table in your cluster. Retrieved data is ingested into this table. Changing this forces a new Kusto Cosmos DB Connection to be created.
	TableName *string `pulumi:"tableName"`
}

type CosmosdbDataConnectionState struct {
	// The name of an existing container in the Cosmos DB database. Changing this forces a new Kusto Cosmos DB Connection to be created.
	CosmosdbContainerId pulumi.StringPtrInput
	// The name of the database in the Kusto cluster. Changing this forces a new Kusto Cosmos DB Connection to be created.
	KustoDatabaseId pulumi.StringPtrInput
	// The Azure Region where the Data Explorer should exist. Changing this forces a new Kusto Cosmos DB Connection to be created.
	Location pulumi.StringPtrInput
	// The resource ID of a managed system or user-assigned identity. The identity is used to authenticate with Cosmos DB. Changing this forces a new Kusto Cosmos DB Connection to be created.
	ManagedIdentityId pulumi.StringPtrInput
	// The name of an existing mapping rule to use when ingesting the retrieved data. Changing this forces a new Kusto Cosmos DB Connection to be created.
	MappingRuleName pulumi.StringPtrInput
	// The name of the data connection. Changing this forces a new Kusto Cosmos DB Connection to be created.
	Name pulumi.StringPtrInput
	// If defined, the data connection retrieves Cosmos DB documents created or updated after the specified retrieval start date. Changing this forces a new Kusto Cosmos DB Connection to be created.
	RetrievalStartDate pulumi.StringPtrInput
	// The case-sensitive name of the existing target table in your cluster. Retrieved data is ingested into this table. Changing this forces a new Kusto Cosmos DB Connection to be created.
	TableName pulumi.StringPtrInput
}

func (CosmosdbDataConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*cosmosdbDataConnectionState)(nil)).Elem()
}

type cosmosdbDataConnectionArgs struct {
	// The name of an existing container in the Cosmos DB database. Changing this forces a new Kusto Cosmos DB Connection to be created.
	CosmosdbContainerId string `pulumi:"cosmosdbContainerId"`
	// The name of the database in the Kusto cluster. Changing this forces a new Kusto Cosmos DB Connection to be created.
	KustoDatabaseId string `pulumi:"kustoDatabaseId"`
	// The Azure Region where the Data Explorer should exist. Changing this forces a new Kusto Cosmos DB Connection to be created.
	Location *string `pulumi:"location"`
	// The resource ID of a managed system or user-assigned identity. The identity is used to authenticate with Cosmos DB. Changing this forces a new Kusto Cosmos DB Connection to be created.
	ManagedIdentityId string `pulumi:"managedIdentityId"`
	// The name of an existing mapping rule to use when ingesting the retrieved data. Changing this forces a new Kusto Cosmos DB Connection to be created.
	MappingRuleName *string `pulumi:"mappingRuleName"`
	// The name of the data connection. Changing this forces a new Kusto Cosmos DB Connection to be created.
	Name *string `pulumi:"name"`
	// If defined, the data connection retrieves Cosmos DB documents created or updated after the specified retrieval start date. Changing this forces a new Kusto Cosmos DB Connection to be created.
	RetrievalStartDate *string `pulumi:"retrievalStartDate"`
	// The case-sensitive name of the existing target table in your cluster. Retrieved data is ingested into this table. Changing this forces a new Kusto Cosmos DB Connection to be created.
	TableName string `pulumi:"tableName"`
}

// The set of arguments for constructing a CosmosdbDataConnection resource.
type CosmosdbDataConnectionArgs struct {
	// The name of an existing container in the Cosmos DB database. Changing this forces a new Kusto Cosmos DB Connection to be created.
	CosmosdbContainerId pulumi.StringInput
	// The name of the database in the Kusto cluster. Changing this forces a new Kusto Cosmos DB Connection to be created.
	KustoDatabaseId pulumi.StringInput
	// The Azure Region where the Data Explorer should exist. Changing this forces a new Kusto Cosmos DB Connection to be created.
	Location pulumi.StringPtrInput
	// The resource ID of a managed system or user-assigned identity. The identity is used to authenticate with Cosmos DB. Changing this forces a new Kusto Cosmos DB Connection to be created.
	ManagedIdentityId pulumi.StringInput
	// The name of an existing mapping rule to use when ingesting the retrieved data. Changing this forces a new Kusto Cosmos DB Connection to be created.
	MappingRuleName pulumi.StringPtrInput
	// The name of the data connection. Changing this forces a new Kusto Cosmos DB Connection to be created.
	Name pulumi.StringPtrInput
	// If defined, the data connection retrieves Cosmos DB documents created or updated after the specified retrieval start date. Changing this forces a new Kusto Cosmos DB Connection to be created.
	RetrievalStartDate pulumi.StringPtrInput
	// The case-sensitive name of the existing target table in your cluster. Retrieved data is ingested into this table. Changing this forces a new Kusto Cosmos DB Connection to be created.
	TableName pulumi.StringInput
}

func (CosmosdbDataConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cosmosdbDataConnectionArgs)(nil)).Elem()
}

type CosmosdbDataConnectionInput interface {
	pulumi.Input

	ToCosmosdbDataConnectionOutput() CosmosdbDataConnectionOutput
	ToCosmosdbDataConnectionOutputWithContext(ctx context.Context) CosmosdbDataConnectionOutput
}

func (*CosmosdbDataConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**CosmosdbDataConnection)(nil)).Elem()
}

func (i *CosmosdbDataConnection) ToCosmosdbDataConnectionOutput() CosmosdbDataConnectionOutput {
	return i.ToCosmosdbDataConnectionOutputWithContext(context.Background())
}

func (i *CosmosdbDataConnection) ToCosmosdbDataConnectionOutputWithContext(ctx context.Context) CosmosdbDataConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosmosdbDataConnectionOutput)
}

func (i *CosmosdbDataConnection) ToOutput(ctx context.Context) pulumix.Output[*CosmosdbDataConnection] {
	return pulumix.Output[*CosmosdbDataConnection]{
		OutputState: i.ToCosmosdbDataConnectionOutputWithContext(ctx).OutputState,
	}
}

// CosmosdbDataConnectionArrayInput is an input type that accepts CosmosdbDataConnectionArray and CosmosdbDataConnectionArrayOutput values.
// You can construct a concrete instance of `CosmosdbDataConnectionArrayInput` via:
//
//	CosmosdbDataConnectionArray{ CosmosdbDataConnectionArgs{...} }
type CosmosdbDataConnectionArrayInput interface {
	pulumi.Input

	ToCosmosdbDataConnectionArrayOutput() CosmosdbDataConnectionArrayOutput
	ToCosmosdbDataConnectionArrayOutputWithContext(context.Context) CosmosdbDataConnectionArrayOutput
}

type CosmosdbDataConnectionArray []CosmosdbDataConnectionInput

func (CosmosdbDataConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CosmosdbDataConnection)(nil)).Elem()
}

func (i CosmosdbDataConnectionArray) ToCosmosdbDataConnectionArrayOutput() CosmosdbDataConnectionArrayOutput {
	return i.ToCosmosdbDataConnectionArrayOutputWithContext(context.Background())
}

func (i CosmosdbDataConnectionArray) ToCosmosdbDataConnectionArrayOutputWithContext(ctx context.Context) CosmosdbDataConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosmosdbDataConnectionArrayOutput)
}

func (i CosmosdbDataConnectionArray) ToOutput(ctx context.Context) pulumix.Output[[]*CosmosdbDataConnection] {
	return pulumix.Output[[]*CosmosdbDataConnection]{
		OutputState: i.ToCosmosdbDataConnectionArrayOutputWithContext(ctx).OutputState,
	}
}

// CosmosdbDataConnectionMapInput is an input type that accepts CosmosdbDataConnectionMap and CosmosdbDataConnectionMapOutput values.
// You can construct a concrete instance of `CosmosdbDataConnectionMapInput` via:
//
//	CosmosdbDataConnectionMap{ "key": CosmosdbDataConnectionArgs{...} }
type CosmosdbDataConnectionMapInput interface {
	pulumi.Input

	ToCosmosdbDataConnectionMapOutput() CosmosdbDataConnectionMapOutput
	ToCosmosdbDataConnectionMapOutputWithContext(context.Context) CosmosdbDataConnectionMapOutput
}

type CosmosdbDataConnectionMap map[string]CosmosdbDataConnectionInput

func (CosmosdbDataConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CosmosdbDataConnection)(nil)).Elem()
}

func (i CosmosdbDataConnectionMap) ToCosmosdbDataConnectionMapOutput() CosmosdbDataConnectionMapOutput {
	return i.ToCosmosdbDataConnectionMapOutputWithContext(context.Background())
}

func (i CosmosdbDataConnectionMap) ToCosmosdbDataConnectionMapOutputWithContext(ctx context.Context) CosmosdbDataConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosmosdbDataConnectionMapOutput)
}

func (i CosmosdbDataConnectionMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*CosmosdbDataConnection] {
	return pulumix.Output[map[string]*CosmosdbDataConnection]{
		OutputState: i.ToCosmosdbDataConnectionMapOutputWithContext(ctx).OutputState,
	}
}

type CosmosdbDataConnectionOutput struct{ *pulumi.OutputState }

func (CosmosdbDataConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CosmosdbDataConnection)(nil)).Elem()
}

func (o CosmosdbDataConnectionOutput) ToCosmosdbDataConnectionOutput() CosmosdbDataConnectionOutput {
	return o
}

func (o CosmosdbDataConnectionOutput) ToCosmosdbDataConnectionOutputWithContext(ctx context.Context) CosmosdbDataConnectionOutput {
	return o
}

func (o CosmosdbDataConnectionOutput) ToOutput(ctx context.Context) pulumix.Output[*CosmosdbDataConnection] {
	return pulumix.Output[*CosmosdbDataConnection]{
		OutputState: o.OutputState,
	}
}

// The name of an existing container in the Cosmos DB database. Changing this forces a new Kusto Cosmos DB Connection to be created.
func (o CosmosdbDataConnectionOutput) CosmosdbContainerId() pulumi.StringOutput {
	return o.ApplyT(func(v *CosmosdbDataConnection) pulumi.StringOutput { return v.CosmosdbContainerId }).(pulumi.StringOutput)
}

// The name of the database in the Kusto cluster. Changing this forces a new Kusto Cosmos DB Connection to be created.
func (o CosmosdbDataConnectionOutput) KustoDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *CosmosdbDataConnection) pulumi.StringOutput { return v.KustoDatabaseId }).(pulumi.StringOutput)
}

// The Azure Region where the Data Explorer should exist. Changing this forces a new Kusto Cosmos DB Connection to be created.
func (o CosmosdbDataConnectionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *CosmosdbDataConnection) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource ID of a managed system or user-assigned identity. The identity is used to authenticate with Cosmos DB. Changing this forces a new Kusto Cosmos DB Connection to be created.
func (o CosmosdbDataConnectionOutput) ManagedIdentityId() pulumi.StringOutput {
	return o.ApplyT(func(v *CosmosdbDataConnection) pulumi.StringOutput { return v.ManagedIdentityId }).(pulumi.StringOutput)
}

// The name of an existing mapping rule to use when ingesting the retrieved data. Changing this forces a new Kusto Cosmos DB Connection to be created.
func (o CosmosdbDataConnectionOutput) MappingRuleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CosmosdbDataConnection) pulumi.StringPtrOutput { return v.MappingRuleName }).(pulumi.StringPtrOutput)
}

// The name of the data connection. Changing this forces a new Kusto Cosmos DB Connection to be created.
func (o CosmosdbDataConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CosmosdbDataConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// If defined, the data connection retrieves Cosmos DB documents created or updated after the specified retrieval start date. Changing this forces a new Kusto Cosmos DB Connection to be created.
func (o CosmosdbDataConnectionOutput) RetrievalStartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CosmosdbDataConnection) pulumi.StringPtrOutput { return v.RetrievalStartDate }).(pulumi.StringPtrOutput)
}

// The case-sensitive name of the existing target table in your cluster. Retrieved data is ingested into this table. Changing this forces a new Kusto Cosmos DB Connection to be created.
func (o CosmosdbDataConnectionOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v *CosmosdbDataConnection) pulumi.StringOutput { return v.TableName }).(pulumi.StringOutput)
}

type CosmosdbDataConnectionArrayOutput struct{ *pulumi.OutputState }

func (CosmosdbDataConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CosmosdbDataConnection)(nil)).Elem()
}

func (o CosmosdbDataConnectionArrayOutput) ToCosmosdbDataConnectionArrayOutput() CosmosdbDataConnectionArrayOutput {
	return o
}

func (o CosmosdbDataConnectionArrayOutput) ToCosmosdbDataConnectionArrayOutputWithContext(ctx context.Context) CosmosdbDataConnectionArrayOutput {
	return o
}

func (o CosmosdbDataConnectionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*CosmosdbDataConnection] {
	return pulumix.Output[[]*CosmosdbDataConnection]{
		OutputState: o.OutputState,
	}
}

func (o CosmosdbDataConnectionArrayOutput) Index(i pulumi.IntInput) CosmosdbDataConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CosmosdbDataConnection {
		return vs[0].([]*CosmosdbDataConnection)[vs[1].(int)]
	}).(CosmosdbDataConnectionOutput)
}

type CosmosdbDataConnectionMapOutput struct{ *pulumi.OutputState }

func (CosmosdbDataConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CosmosdbDataConnection)(nil)).Elem()
}

func (o CosmosdbDataConnectionMapOutput) ToCosmosdbDataConnectionMapOutput() CosmosdbDataConnectionMapOutput {
	return o
}

func (o CosmosdbDataConnectionMapOutput) ToCosmosdbDataConnectionMapOutputWithContext(ctx context.Context) CosmosdbDataConnectionMapOutput {
	return o
}

func (o CosmosdbDataConnectionMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*CosmosdbDataConnection] {
	return pulumix.Output[map[string]*CosmosdbDataConnection]{
		OutputState: o.OutputState,
	}
}

func (o CosmosdbDataConnectionMapOutput) MapIndex(k pulumi.StringInput) CosmosdbDataConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CosmosdbDataConnection {
		return vs[0].(map[string]*CosmosdbDataConnection)[vs[1].(string)]
	}).(CosmosdbDataConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CosmosdbDataConnectionInput)(nil)).Elem(), &CosmosdbDataConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*CosmosdbDataConnectionArrayInput)(nil)).Elem(), CosmosdbDataConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CosmosdbDataConnectionMapInput)(nil)).Elem(), CosmosdbDataConnectionMap{})
	pulumi.RegisterOutputType(CosmosdbDataConnectionOutput{})
	pulumi.RegisterOutputType(CosmosdbDataConnectionArrayOutput{})
	pulumi.RegisterOutputType(CosmosdbDataConnectionMapOutput{})
}
