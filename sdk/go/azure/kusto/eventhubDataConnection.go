// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kusto

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Kusto (also known as Azure Data Explorer) EventHub Data Connection
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/eventhub"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/kusto"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			cluster, err := kusto.NewCluster(ctx, "cluster", &kusto.ClusterArgs{
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//				Sku: &kusto.ClusterSkuArgs{
//					Name:     pulumi.String("Standard_D13_v2"),
//					Capacity: pulumi.Int(2),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			database, err := kusto.NewDatabase(ctx, "database", &kusto.DatabaseArgs{
//				ResourceGroupName: example.Name,
//				Location:          example.Location,
//				ClusterName:       cluster.Name,
//				HotCachePeriod:    pulumi.String("P7D"),
//				SoftDeletePeriod:  pulumi.String("P31D"),
//			})
//			if err != nil {
//				return err
//			}
//			eventhubNs, err := eventhub.NewEventHubNamespace(ctx, "eventhubNs", &eventhub.EventHubNamespaceArgs{
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//				Sku:               pulumi.String("Standard"),
//			})
//			if err != nil {
//				return err
//			}
//			eventhub, err := eventhub.NewEventHub(ctx, "eventhub", &eventhub.EventHubArgs{
//				NamespaceName:     eventhubNs.Name,
//				ResourceGroupName: example.Name,
//				PartitionCount:    pulumi.Int(1),
//				MessageRetention:  pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			consumerGroup, err := eventhub.NewConsumerGroup(ctx, "consumerGroup", &eventhub.ConsumerGroupArgs{
//				NamespaceName:     eventhubNs.Name,
//				EventhubName:      eventhub.Name,
//				ResourceGroupName: example.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = kusto.NewEventhubDataConnection(ctx, "eventhubConnection", &kusto.EventhubDataConnectionArgs{
//				ResourceGroupName: example.Name,
//				Location:          example.Location,
//				ClusterName:       cluster.Name,
//				DatabaseName:      database.Name,
//				EventhubId:        eventhub.ID(),
//				ConsumerGroup:     consumerGroup.Name,
//				TableName:         pulumi.String("my-table"),
//				MappingRuleName:   pulumi.String("my-table-mapping"),
//				DataFormat:        pulumi.String("JSON"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Kusto EventHub Data Connections can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:kusto/eventhubDataConnection:EventhubDataConnection example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Kusto/clusters/cluster1/databases/database1/dataConnections/eventHubConnection1
//
// ```
type EventhubDataConnection struct {
	pulumi.CustomResourceState

	// Specifies the name of the Kusto Cluster this data connection will be added to. Changing this forces a new resource to be created.
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`
	// Specifies compression type for the connection. Allowed values: `GZip` and `None`. Defaults to `None`. Changing this forces a new resource to be created.
	Compression pulumi.StringPtrOutput `pulumi:"compression"`
	// Specifies the EventHub consumer group this data connection will use for ingestion. Changing this forces a new resource to be created.
	ConsumerGroup pulumi.StringOutput `pulumi:"consumerGroup"`
	// Specifies the data format of the EventHub messages. Allowed values: `APACHEAVRO`, `AVRO`, `CSV`, `JSON`, `MULTIJSON`, `ORC`, `PARQUET`, `PSV`, `RAW`, `SCSV`, `SINGLEJSON`, `SOHSV`, `TSVE`, `TSV`, `TXT`, and `W3CLOGFILE`.
	DataFormat pulumi.StringPtrOutput `pulumi:"dataFormat"`
	// Specifies the name of the Kusto Database this data connection will be added to. Changing this forces a new resource to be created.
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`
	// Indication for database routing information from the data connection, by default only database routing information is allowed. Allowed values: `Single`, `Multi`. Changing this forces a new resource to be created. Defaults to `Single`.
	DatabaseRoutingType pulumi.StringPtrOutput `pulumi:"databaseRoutingType"`
	// Specifies a list of system properties for the Event Hub.
	EventSystemProperties pulumi.StringArrayOutput `pulumi:"eventSystemProperties"`
	// Specifies the resource id of the EventHub this data connection will use for ingestion. Changing this forces a new resource to be created.
	EventhubId pulumi.StringOutput `pulumi:"eventhubId"`
	// The resource ID of a managed identity (system or user assigned) to be used to authenticate with event hub.
	IdentityId pulumi.StringPtrOutput `pulumi:"identityId"`
	// The location where the Kusto Database should be created. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the mapping rule used for the message ingestion. Mapping rule must exist before resource is created.
	MappingRuleName pulumi.StringPtrOutput `pulumi:"mappingRuleName"`
	// The name of the Kusto EventHub Data Connection to create. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the Resource Group where the Kusto Database should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Specifies the target table name used for the message ingestion. Table must exist before resource is created.
	TableName pulumi.StringPtrOutput `pulumi:"tableName"`
}

// NewEventhubDataConnection registers a new resource with the given unique name, arguments, and options.
func NewEventhubDataConnection(ctx *pulumi.Context,
	name string, args *EventhubDataConnectionArgs, opts ...pulumi.ResourceOption) (*EventhubDataConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.ConsumerGroup == nil {
		return nil, errors.New("invalid value for required argument 'ConsumerGroup'")
	}
	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.EventhubId == nil {
		return nil, errors.New("invalid value for required argument 'EventhubId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EventhubDataConnection
	err := ctx.RegisterResource("azure:kusto/eventhubDataConnection:EventhubDataConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventhubDataConnection gets an existing EventhubDataConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventhubDataConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventhubDataConnectionState, opts ...pulumi.ResourceOption) (*EventhubDataConnection, error) {
	var resource EventhubDataConnection
	err := ctx.ReadResource("azure:kusto/eventhubDataConnection:EventhubDataConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventhubDataConnection resources.
type eventhubDataConnectionState struct {
	// Specifies the name of the Kusto Cluster this data connection will be added to. Changing this forces a new resource to be created.
	ClusterName *string `pulumi:"clusterName"`
	// Specifies compression type for the connection. Allowed values: `GZip` and `None`. Defaults to `None`. Changing this forces a new resource to be created.
	Compression *string `pulumi:"compression"`
	// Specifies the EventHub consumer group this data connection will use for ingestion. Changing this forces a new resource to be created.
	ConsumerGroup *string `pulumi:"consumerGroup"`
	// Specifies the data format of the EventHub messages. Allowed values: `APACHEAVRO`, `AVRO`, `CSV`, `JSON`, `MULTIJSON`, `ORC`, `PARQUET`, `PSV`, `RAW`, `SCSV`, `SINGLEJSON`, `SOHSV`, `TSVE`, `TSV`, `TXT`, and `W3CLOGFILE`.
	DataFormat *string `pulumi:"dataFormat"`
	// Specifies the name of the Kusto Database this data connection will be added to. Changing this forces a new resource to be created.
	DatabaseName *string `pulumi:"databaseName"`
	// Indication for database routing information from the data connection, by default only database routing information is allowed. Allowed values: `Single`, `Multi`. Changing this forces a new resource to be created. Defaults to `Single`.
	DatabaseRoutingType *string `pulumi:"databaseRoutingType"`
	// Specifies a list of system properties for the Event Hub.
	EventSystemProperties []string `pulumi:"eventSystemProperties"`
	// Specifies the resource id of the EventHub this data connection will use for ingestion. Changing this forces a new resource to be created.
	EventhubId *string `pulumi:"eventhubId"`
	// The resource ID of a managed identity (system or user assigned) to be used to authenticate with event hub.
	IdentityId *string `pulumi:"identityId"`
	// The location where the Kusto Database should be created. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the mapping rule used for the message ingestion. Mapping rule must exist before resource is created.
	MappingRuleName *string `pulumi:"mappingRuleName"`
	// The name of the Kusto EventHub Data Connection to create. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies the Resource Group where the Kusto Database should exist. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Specifies the target table name used for the message ingestion. Table must exist before resource is created.
	TableName *string `pulumi:"tableName"`
}

type EventhubDataConnectionState struct {
	// Specifies the name of the Kusto Cluster this data connection will be added to. Changing this forces a new resource to be created.
	ClusterName pulumi.StringPtrInput
	// Specifies compression type for the connection. Allowed values: `GZip` and `None`. Defaults to `None`. Changing this forces a new resource to be created.
	Compression pulumi.StringPtrInput
	// Specifies the EventHub consumer group this data connection will use for ingestion. Changing this forces a new resource to be created.
	ConsumerGroup pulumi.StringPtrInput
	// Specifies the data format of the EventHub messages. Allowed values: `APACHEAVRO`, `AVRO`, `CSV`, `JSON`, `MULTIJSON`, `ORC`, `PARQUET`, `PSV`, `RAW`, `SCSV`, `SINGLEJSON`, `SOHSV`, `TSVE`, `TSV`, `TXT`, and `W3CLOGFILE`.
	DataFormat pulumi.StringPtrInput
	// Specifies the name of the Kusto Database this data connection will be added to. Changing this forces a new resource to be created.
	DatabaseName pulumi.StringPtrInput
	// Indication for database routing information from the data connection, by default only database routing information is allowed. Allowed values: `Single`, `Multi`. Changing this forces a new resource to be created. Defaults to `Single`.
	DatabaseRoutingType pulumi.StringPtrInput
	// Specifies a list of system properties for the Event Hub.
	EventSystemProperties pulumi.StringArrayInput
	// Specifies the resource id of the EventHub this data connection will use for ingestion. Changing this forces a new resource to be created.
	EventhubId pulumi.StringPtrInput
	// The resource ID of a managed identity (system or user assigned) to be used to authenticate with event hub.
	IdentityId pulumi.StringPtrInput
	// The location where the Kusto Database should be created. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the mapping rule used for the message ingestion. Mapping rule must exist before resource is created.
	MappingRuleName pulumi.StringPtrInput
	// The name of the Kusto EventHub Data Connection to create. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies the Resource Group where the Kusto Database should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// Specifies the target table name used for the message ingestion. Table must exist before resource is created.
	TableName pulumi.StringPtrInput
}

func (EventhubDataConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventhubDataConnectionState)(nil)).Elem()
}

type eventhubDataConnectionArgs struct {
	// Specifies the name of the Kusto Cluster this data connection will be added to. Changing this forces a new resource to be created.
	ClusterName string `pulumi:"clusterName"`
	// Specifies compression type for the connection. Allowed values: `GZip` and `None`. Defaults to `None`. Changing this forces a new resource to be created.
	Compression *string `pulumi:"compression"`
	// Specifies the EventHub consumer group this data connection will use for ingestion. Changing this forces a new resource to be created.
	ConsumerGroup string `pulumi:"consumerGroup"`
	// Specifies the data format of the EventHub messages. Allowed values: `APACHEAVRO`, `AVRO`, `CSV`, `JSON`, `MULTIJSON`, `ORC`, `PARQUET`, `PSV`, `RAW`, `SCSV`, `SINGLEJSON`, `SOHSV`, `TSVE`, `TSV`, `TXT`, and `W3CLOGFILE`.
	DataFormat *string `pulumi:"dataFormat"`
	// Specifies the name of the Kusto Database this data connection will be added to. Changing this forces a new resource to be created.
	DatabaseName string `pulumi:"databaseName"`
	// Indication for database routing information from the data connection, by default only database routing information is allowed. Allowed values: `Single`, `Multi`. Changing this forces a new resource to be created. Defaults to `Single`.
	DatabaseRoutingType *string `pulumi:"databaseRoutingType"`
	// Specifies a list of system properties for the Event Hub.
	EventSystemProperties []string `pulumi:"eventSystemProperties"`
	// Specifies the resource id of the EventHub this data connection will use for ingestion. Changing this forces a new resource to be created.
	EventhubId string `pulumi:"eventhubId"`
	// The resource ID of a managed identity (system or user assigned) to be used to authenticate with event hub.
	IdentityId *string `pulumi:"identityId"`
	// The location where the Kusto Database should be created. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the mapping rule used for the message ingestion. Mapping rule must exist before resource is created.
	MappingRuleName *string `pulumi:"mappingRuleName"`
	// The name of the Kusto EventHub Data Connection to create. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies the Resource Group where the Kusto Database should exist. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Specifies the target table name used for the message ingestion. Table must exist before resource is created.
	TableName *string `pulumi:"tableName"`
}

// The set of arguments for constructing a EventhubDataConnection resource.
type EventhubDataConnectionArgs struct {
	// Specifies the name of the Kusto Cluster this data connection will be added to. Changing this forces a new resource to be created.
	ClusterName pulumi.StringInput
	// Specifies compression type for the connection. Allowed values: `GZip` and `None`. Defaults to `None`. Changing this forces a new resource to be created.
	Compression pulumi.StringPtrInput
	// Specifies the EventHub consumer group this data connection will use for ingestion. Changing this forces a new resource to be created.
	ConsumerGroup pulumi.StringInput
	// Specifies the data format of the EventHub messages. Allowed values: `APACHEAVRO`, `AVRO`, `CSV`, `JSON`, `MULTIJSON`, `ORC`, `PARQUET`, `PSV`, `RAW`, `SCSV`, `SINGLEJSON`, `SOHSV`, `TSVE`, `TSV`, `TXT`, and `W3CLOGFILE`.
	DataFormat pulumi.StringPtrInput
	// Specifies the name of the Kusto Database this data connection will be added to. Changing this forces a new resource to be created.
	DatabaseName pulumi.StringInput
	// Indication for database routing information from the data connection, by default only database routing information is allowed. Allowed values: `Single`, `Multi`. Changing this forces a new resource to be created. Defaults to `Single`.
	DatabaseRoutingType pulumi.StringPtrInput
	// Specifies a list of system properties for the Event Hub.
	EventSystemProperties pulumi.StringArrayInput
	// Specifies the resource id of the EventHub this data connection will use for ingestion. Changing this forces a new resource to be created.
	EventhubId pulumi.StringInput
	// The resource ID of a managed identity (system or user assigned) to be used to authenticate with event hub.
	IdentityId pulumi.StringPtrInput
	// The location where the Kusto Database should be created. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the mapping rule used for the message ingestion. Mapping rule must exist before resource is created.
	MappingRuleName pulumi.StringPtrInput
	// The name of the Kusto EventHub Data Connection to create. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies the Resource Group where the Kusto Database should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// Specifies the target table name used for the message ingestion. Table must exist before resource is created.
	TableName pulumi.StringPtrInput
}

func (EventhubDataConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventhubDataConnectionArgs)(nil)).Elem()
}

type EventhubDataConnectionInput interface {
	pulumi.Input

	ToEventhubDataConnectionOutput() EventhubDataConnectionOutput
	ToEventhubDataConnectionOutputWithContext(ctx context.Context) EventhubDataConnectionOutput
}

func (*EventhubDataConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**EventhubDataConnection)(nil)).Elem()
}

func (i *EventhubDataConnection) ToEventhubDataConnectionOutput() EventhubDataConnectionOutput {
	return i.ToEventhubDataConnectionOutputWithContext(context.Background())
}

func (i *EventhubDataConnection) ToEventhubDataConnectionOutputWithContext(ctx context.Context) EventhubDataConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventhubDataConnectionOutput)
}

// EventhubDataConnectionArrayInput is an input type that accepts EventhubDataConnectionArray and EventhubDataConnectionArrayOutput values.
// You can construct a concrete instance of `EventhubDataConnectionArrayInput` via:
//
//	EventhubDataConnectionArray{ EventhubDataConnectionArgs{...} }
type EventhubDataConnectionArrayInput interface {
	pulumi.Input

	ToEventhubDataConnectionArrayOutput() EventhubDataConnectionArrayOutput
	ToEventhubDataConnectionArrayOutputWithContext(context.Context) EventhubDataConnectionArrayOutput
}

type EventhubDataConnectionArray []EventhubDataConnectionInput

func (EventhubDataConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventhubDataConnection)(nil)).Elem()
}

func (i EventhubDataConnectionArray) ToEventhubDataConnectionArrayOutput() EventhubDataConnectionArrayOutput {
	return i.ToEventhubDataConnectionArrayOutputWithContext(context.Background())
}

func (i EventhubDataConnectionArray) ToEventhubDataConnectionArrayOutputWithContext(ctx context.Context) EventhubDataConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventhubDataConnectionArrayOutput)
}

// EventhubDataConnectionMapInput is an input type that accepts EventhubDataConnectionMap and EventhubDataConnectionMapOutput values.
// You can construct a concrete instance of `EventhubDataConnectionMapInput` via:
//
//	EventhubDataConnectionMap{ "key": EventhubDataConnectionArgs{...} }
type EventhubDataConnectionMapInput interface {
	pulumi.Input

	ToEventhubDataConnectionMapOutput() EventhubDataConnectionMapOutput
	ToEventhubDataConnectionMapOutputWithContext(context.Context) EventhubDataConnectionMapOutput
}

type EventhubDataConnectionMap map[string]EventhubDataConnectionInput

func (EventhubDataConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventhubDataConnection)(nil)).Elem()
}

func (i EventhubDataConnectionMap) ToEventhubDataConnectionMapOutput() EventhubDataConnectionMapOutput {
	return i.ToEventhubDataConnectionMapOutputWithContext(context.Background())
}

func (i EventhubDataConnectionMap) ToEventhubDataConnectionMapOutputWithContext(ctx context.Context) EventhubDataConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventhubDataConnectionMapOutput)
}

type EventhubDataConnectionOutput struct{ *pulumi.OutputState }

func (EventhubDataConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventhubDataConnection)(nil)).Elem()
}

func (o EventhubDataConnectionOutput) ToEventhubDataConnectionOutput() EventhubDataConnectionOutput {
	return o
}

func (o EventhubDataConnectionOutput) ToEventhubDataConnectionOutputWithContext(ctx context.Context) EventhubDataConnectionOutput {
	return o
}

// Specifies the name of the Kusto Cluster this data connection will be added to. Changing this forces a new resource to be created.
func (o EventhubDataConnectionOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *EventhubDataConnection) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

// Specifies compression type for the connection. Allowed values: `GZip` and `None`. Defaults to `None`. Changing this forces a new resource to be created.
func (o EventhubDataConnectionOutput) Compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventhubDataConnection) pulumi.StringPtrOutput { return v.Compression }).(pulumi.StringPtrOutput)
}

// Specifies the EventHub consumer group this data connection will use for ingestion. Changing this forces a new resource to be created.
func (o EventhubDataConnectionOutput) ConsumerGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *EventhubDataConnection) pulumi.StringOutput { return v.ConsumerGroup }).(pulumi.StringOutput)
}

// Specifies the data format of the EventHub messages. Allowed values: `APACHEAVRO`, `AVRO`, `CSV`, `JSON`, `MULTIJSON`, `ORC`, `PARQUET`, `PSV`, `RAW`, `SCSV`, `SINGLEJSON`, `SOHSV`, `TSVE`, `TSV`, `TXT`, and `W3CLOGFILE`.
func (o EventhubDataConnectionOutput) DataFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventhubDataConnection) pulumi.StringPtrOutput { return v.DataFormat }).(pulumi.StringPtrOutput)
}

// Specifies the name of the Kusto Database this data connection will be added to. Changing this forces a new resource to be created.
func (o EventhubDataConnectionOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *EventhubDataConnection) pulumi.StringOutput { return v.DatabaseName }).(pulumi.StringOutput)
}

// Indication for database routing information from the data connection, by default only database routing information is allowed. Allowed values: `Single`, `Multi`. Changing this forces a new resource to be created. Defaults to `Single`.
func (o EventhubDataConnectionOutput) DatabaseRoutingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventhubDataConnection) pulumi.StringPtrOutput { return v.DatabaseRoutingType }).(pulumi.StringPtrOutput)
}

// Specifies a list of system properties for the Event Hub.
func (o EventhubDataConnectionOutput) EventSystemProperties() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventhubDataConnection) pulumi.StringArrayOutput { return v.EventSystemProperties }).(pulumi.StringArrayOutput)
}

// Specifies the resource id of the EventHub this data connection will use for ingestion. Changing this forces a new resource to be created.
func (o EventhubDataConnectionOutput) EventhubId() pulumi.StringOutput {
	return o.ApplyT(func(v *EventhubDataConnection) pulumi.StringOutput { return v.EventhubId }).(pulumi.StringOutput)
}

// The resource ID of a managed identity (system or user assigned) to be used to authenticate with event hub.
func (o EventhubDataConnectionOutput) IdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventhubDataConnection) pulumi.StringPtrOutput { return v.IdentityId }).(pulumi.StringPtrOutput)
}

// The location where the Kusto Database should be created. Changing this forces a new resource to be created.
func (o EventhubDataConnectionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *EventhubDataConnection) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the mapping rule used for the message ingestion. Mapping rule must exist before resource is created.
func (o EventhubDataConnectionOutput) MappingRuleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventhubDataConnection) pulumi.StringPtrOutput { return v.MappingRuleName }).(pulumi.StringPtrOutput)
}

// The name of the Kusto EventHub Data Connection to create. Changing this forces a new resource to be created.
func (o EventhubDataConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EventhubDataConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the Resource Group where the Kusto Database should exist. Changing this forces a new resource to be created.
func (o EventhubDataConnectionOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *EventhubDataConnection) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// Specifies the target table name used for the message ingestion. Table must exist before resource is created.
func (o EventhubDataConnectionOutput) TableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventhubDataConnection) pulumi.StringPtrOutput { return v.TableName }).(pulumi.StringPtrOutput)
}

type EventhubDataConnectionArrayOutput struct{ *pulumi.OutputState }

func (EventhubDataConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventhubDataConnection)(nil)).Elem()
}

func (o EventhubDataConnectionArrayOutput) ToEventhubDataConnectionArrayOutput() EventhubDataConnectionArrayOutput {
	return o
}

func (o EventhubDataConnectionArrayOutput) ToEventhubDataConnectionArrayOutputWithContext(ctx context.Context) EventhubDataConnectionArrayOutput {
	return o
}

func (o EventhubDataConnectionArrayOutput) Index(i pulumi.IntInput) EventhubDataConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EventhubDataConnection {
		return vs[0].([]*EventhubDataConnection)[vs[1].(int)]
	}).(EventhubDataConnectionOutput)
}

type EventhubDataConnectionMapOutput struct{ *pulumi.OutputState }

func (EventhubDataConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventhubDataConnection)(nil)).Elem()
}

func (o EventhubDataConnectionMapOutput) ToEventhubDataConnectionMapOutput() EventhubDataConnectionMapOutput {
	return o
}

func (o EventhubDataConnectionMapOutput) ToEventhubDataConnectionMapOutputWithContext(ctx context.Context) EventhubDataConnectionMapOutput {
	return o
}

func (o EventhubDataConnectionMapOutput) MapIndex(k pulumi.StringInput) EventhubDataConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EventhubDataConnection {
		return vs[0].(map[string]*EventhubDataConnection)[vs[1].(string)]
	}).(EventhubDataConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventhubDataConnectionInput)(nil)).Elem(), &EventhubDataConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventhubDataConnectionArrayInput)(nil)).Elem(), EventhubDataConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventhubDataConnectionMapInput)(nil)).Elem(), EventhubDataConnectionMap{})
	pulumi.RegisterOutputType(EventhubDataConnectionOutput{})
	pulumi.RegisterOutputType(EventhubDataConnectionArrayOutput{})
	pulumi.RegisterOutputType(EventhubDataConnectionMapOutput{})
}
