// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kusto

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Kusto Database
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/kusto"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kusto.LookupDatabase(ctx, &kusto.LookupDatabaseArgs{
//				ClusterName:       "test_cluster",
//				Name:              "my-kusto-database",
//				ResourceGroupName: "test_resource_group",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDatabase(ctx *pulumi.Context, args *LookupDatabaseArgs, opts ...pulumi.InvokeOption) (*LookupDatabaseResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDatabaseResult
	err := ctx.Invoke("azure:kusto/getDatabase:getDatabase", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDatabase.
type LookupDatabaseArgs struct {
	// The name of the Kusto Cluster this database is added to.
	ClusterName string `pulumi:"clusterName"`
	// The name of the Kusto Database.
	Name string `pulumi:"name"`
	// The Resource Group where the Kusto Database exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getDatabase.
type LookupDatabaseResult struct {
	ClusterName string `pulumi:"clusterName"`
	// The time the data that should be kept in cache for fast queries as ISO 8601 timespan.
	HotCachePeriod string `pulumi:"hotCachePeriod"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The Azure Region in which the managed Kusto Database exists.
	Location          string `pulumi:"location"`
	Name              string `pulumi:"name"`
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The size of the database in bytes.
	Size float64 `pulumi:"size"`
	// The time the data should be kept before it stops being accessible to queries as ISO 8601 timespan.
	SoftDeletePeriod string `pulumi:"softDeletePeriod"`
}

func LookupDatabaseOutput(ctx *pulumi.Context, args LookupDatabaseOutputArgs, opts ...pulumi.InvokeOption) LookupDatabaseResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDatabaseResult, error) {
			args := v.(LookupDatabaseArgs)
			r, err := LookupDatabase(ctx, &args, opts...)
			var s LookupDatabaseResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDatabaseResultOutput)
}

// A collection of arguments for invoking getDatabase.
type LookupDatabaseOutputArgs struct {
	// The name of the Kusto Cluster this database is added to.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// The name of the Kusto Database.
	Name pulumi.StringInput `pulumi:"name"`
	// The Resource Group where the Kusto Database exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupDatabaseOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabaseArgs)(nil)).Elem()
}

// A collection of values returned by getDatabase.
type LookupDatabaseResultOutput struct{ *pulumi.OutputState }

func (LookupDatabaseResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabaseResult)(nil)).Elem()
}

func (o LookupDatabaseResultOutput) ToLookupDatabaseResultOutput() LookupDatabaseResultOutput {
	return o
}

func (o LookupDatabaseResultOutput) ToLookupDatabaseResultOutputWithContext(ctx context.Context) LookupDatabaseResultOutput {
	return o
}

func (o LookupDatabaseResultOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.ClusterName }).(pulumi.StringOutput)
}

// The time the data that should be kept in cache for fast queries as ISO 8601 timespan.
func (o LookupDatabaseResultOutput) HotCachePeriod() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.HotCachePeriod }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDatabaseResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.Id }).(pulumi.StringOutput)
}

// The Azure Region in which the managed Kusto Database exists.
func (o LookupDatabaseResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o LookupDatabaseResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupDatabaseResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The size of the database in bytes.
func (o LookupDatabaseResultOutput) Size() pulumi.Float64Output {
	return o.ApplyT(func(v LookupDatabaseResult) float64 { return v.Size }).(pulumi.Float64Output)
}

// The time the data should be kept before it stops being accessible to queries as ISO 8601 timespan.
func (o LookupDatabaseResultOutput) SoftDeletePeriod() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseResult) string { return v.SoftDeletePeriod }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDatabaseResultOutput{})
}
