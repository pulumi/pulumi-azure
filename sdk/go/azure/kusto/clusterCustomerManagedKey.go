// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kusto

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Customer Managed Key for a Kusto Cluster.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/keyvault"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/kusto"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := core.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleKeyVault, err := keyvault.NewKeyVault(ctx, "exampleKeyVault", &keyvault.KeyVaultArgs{
//				Location:               exampleResourceGroup.Location,
//				ResourceGroupName:      exampleResourceGroup.Name,
//				TenantId:               *pulumi.String(current.TenantId),
//				SkuName:                pulumi.String("standard"),
//				PurgeProtectionEnabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			exampleCluster, err := kusto.NewCluster(ctx, "exampleCluster", &kusto.ClusterArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku: &kusto.ClusterSkuArgs{
//					Name:     pulumi.String("Standard_D13_v2"),
//					Capacity: pulumi.Int(2),
//				},
//				Identity: &kusto.ClusterIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			cluster, err := keyvault.NewAccessPolicy(ctx, "cluster", &keyvault.AccessPolicyArgs{
//				KeyVaultId: exampleKeyVault.ID(),
//				TenantId:   *pulumi.String(current.TenantId),
//				ObjectId: exampleCluster.Identity.ApplyT(func(identity kusto.ClusterIdentity) (*string, error) {
//					return &identity.PrincipalId, nil
//				}).(pulumi.StringPtrOutput),
//				KeyPermissions: pulumi.StringArray{
//					pulumi.String("Get"),
//					pulumi.String("UnwrapKey"),
//					pulumi.String("WrapKey"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			client, err := keyvault.NewAccessPolicy(ctx, "client", &keyvault.AccessPolicyArgs{
//				KeyVaultId: exampleKeyVault.ID(),
//				TenantId:   *pulumi.String(current.TenantId),
//				ObjectId:   *pulumi.String(current.ObjectId),
//				KeyPermissions: pulumi.StringArray{
//					pulumi.String("Get"),
//					pulumi.String("List"),
//					pulumi.String("Create"),
//					pulumi.String("Delete"),
//					pulumi.String("Recover"),
//					pulumi.String("GetRotationPolicy"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleKey, err := keyvault.NewKey(ctx, "exampleKey", &keyvault.KeyArgs{
//				KeyVaultId: exampleKeyVault.ID(),
//				KeyType:    pulumi.String("RSA"),
//				KeySize:    pulumi.Int(2048),
//				KeyOpts: pulumi.StringArray{
//					pulumi.String("decrypt"),
//					pulumi.String("encrypt"),
//					pulumi.String("sign"),
//					pulumi.String("unwrapKey"),
//					pulumi.String("verify"),
//					pulumi.String("wrapKey"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				client,
//				cluster,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = kusto.NewClusterCustomerManagedKey(ctx, "exampleClusterCustomerManagedKey", &kusto.ClusterCustomerManagedKeyArgs{
//				ClusterId:  exampleCluster.ID(),
//				KeyVaultId: exampleKeyVault.ID(),
//				KeyName:    exampleKey.Name,
//				KeyVersion: exampleKey.Version,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Customer Managed Keys for a Kusto Cluster can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:kusto/clusterCustomerManagedKey:ClusterCustomerManagedKey example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Kusto/clusters/cluster1
//
// ```
type ClusterCustomerManagedKey struct {
	pulumi.CustomResourceState

	// The ID of the Kusto Cluster. Changing this forces a new resource to be created.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The name of Key Vault Key.
	KeyName pulumi.StringOutput `pulumi:"keyName"`
	// The ID of the Key Vault.
	KeyVaultId pulumi.StringOutput `pulumi:"keyVaultId"`
	// The version of Key Vault Key.
	KeyVersion pulumi.StringPtrOutput `pulumi:"keyVersion"`
	// The user assigned identity that has access to the Key Vault Key. If not specified, system assigned identity will be used.
	UserIdentity pulumi.StringPtrOutput `pulumi:"userIdentity"`
}

// NewClusterCustomerManagedKey registers a new resource with the given unique name, arguments, and options.
func NewClusterCustomerManagedKey(ctx *pulumi.Context,
	name string, args *ClusterCustomerManagedKeyArgs, opts ...pulumi.ResourceOption) (*ClusterCustomerManagedKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.KeyName == nil {
		return nil, errors.New("invalid value for required argument 'KeyName'")
	}
	if args.KeyVaultId == nil {
		return nil, errors.New("invalid value for required argument 'KeyVaultId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClusterCustomerManagedKey
	err := ctx.RegisterResource("azure:kusto/clusterCustomerManagedKey:ClusterCustomerManagedKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterCustomerManagedKey gets an existing ClusterCustomerManagedKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterCustomerManagedKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterCustomerManagedKeyState, opts ...pulumi.ResourceOption) (*ClusterCustomerManagedKey, error) {
	var resource ClusterCustomerManagedKey
	err := ctx.ReadResource("azure:kusto/clusterCustomerManagedKey:ClusterCustomerManagedKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterCustomerManagedKey resources.
type clusterCustomerManagedKeyState struct {
	// The ID of the Kusto Cluster. Changing this forces a new resource to be created.
	ClusterId *string `pulumi:"clusterId"`
	// The name of Key Vault Key.
	KeyName *string `pulumi:"keyName"`
	// The ID of the Key Vault.
	KeyVaultId *string `pulumi:"keyVaultId"`
	// The version of Key Vault Key.
	KeyVersion *string `pulumi:"keyVersion"`
	// The user assigned identity that has access to the Key Vault Key. If not specified, system assigned identity will be used.
	UserIdentity *string `pulumi:"userIdentity"`
}

type ClusterCustomerManagedKeyState struct {
	// The ID of the Kusto Cluster. Changing this forces a new resource to be created.
	ClusterId pulumi.StringPtrInput
	// The name of Key Vault Key.
	KeyName pulumi.StringPtrInput
	// The ID of the Key Vault.
	KeyVaultId pulumi.StringPtrInput
	// The version of Key Vault Key.
	KeyVersion pulumi.StringPtrInput
	// The user assigned identity that has access to the Key Vault Key. If not specified, system assigned identity will be used.
	UserIdentity pulumi.StringPtrInput
}

func (ClusterCustomerManagedKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterCustomerManagedKeyState)(nil)).Elem()
}

type clusterCustomerManagedKeyArgs struct {
	// The ID of the Kusto Cluster. Changing this forces a new resource to be created.
	ClusterId string `pulumi:"clusterId"`
	// The name of Key Vault Key.
	KeyName string `pulumi:"keyName"`
	// The ID of the Key Vault.
	KeyVaultId string `pulumi:"keyVaultId"`
	// The version of Key Vault Key.
	KeyVersion *string `pulumi:"keyVersion"`
	// The user assigned identity that has access to the Key Vault Key. If not specified, system assigned identity will be used.
	UserIdentity *string `pulumi:"userIdentity"`
}

// The set of arguments for constructing a ClusterCustomerManagedKey resource.
type ClusterCustomerManagedKeyArgs struct {
	// The ID of the Kusto Cluster. Changing this forces a new resource to be created.
	ClusterId pulumi.StringInput
	// The name of Key Vault Key.
	KeyName pulumi.StringInput
	// The ID of the Key Vault.
	KeyVaultId pulumi.StringInput
	// The version of Key Vault Key.
	KeyVersion pulumi.StringPtrInput
	// The user assigned identity that has access to the Key Vault Key. If not specified, system assigned identity will be used.
	UserIdentity pulumi.StringPtrInput
}

func (ClusterCustomerManagedKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterCustomerManagedKeyArgs)(nil)).Elem()
}

type ClusterCustomerManagedKeyInput interface {
	pulumi.Input

	ToClusterCustomerManagedKeyOutput() ClusterCustomerManagedKeyOutput
	ToClusterCustomerManagedKeyOutputWithContext(ctx context.Context) ClusterCustomerManagedKeyOutput
}

func (*ClusterCustomerManagedKey) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterCustomerManagedKey)(nil)).Elem()
}

func (i *ClusterCustomerManagedKey) ToClusterCustomerManagedKeyOutput() ClusterCustomerManagedKeyOutput {
	return i.ToClusterCustomerManagedKeyOutputWithContext(context.Background())
}

func (i *ClusterCustomerManagedKey) ToClusterCustomerManagedKeyOutputWithContext(ctx context.Context) ClusterCustomerManagedKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCustomerManagedKeyOutput)
}

// ClusterCustomerManagedKeyArrayInput is an input type that accepts ClusterCustomerManagedKeyArray and ClusterCustomerManagedKeyArrayOutput values.
// You can construct a concrete instance of `ClusterCustomerManagedKeyArrayInput` via:
//
//	ClusterCustomerManagedKeyArray{ ClusterCustomerManagedKeyArgs{...} }
type ClusterCustomerManagedKeyArrayInput interface {
	pulumi.Input

	ToClusterCustomerManagedKeyArrayOutput() ClusterCustomerManagedKeyArrayOutput
	ToClusterCustomerManagedKeyArrayOutputWithContext(context.Context) ClusterCustomerManagedKeyArrayOutput
}

type ClusterCustomerManagedKeyArray []ClusterCustomerManagedKeyInput

func (ClusterCustomerManagedKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterCustomerManagedKey)(nil)).Elem()
}

func (i ClusterCustomerManagedKeyArray) ToClusterCustomerManagedKeyArrayOutput() ClusterCustomerManagedKeyArrayOutput {
	return i.ToClusterCustomerManagedKeyArrayOutputWithContext(context.Background())
}

func (i ClusterCustomerManagedKeyArray) ToClusterCustomerManagedKeyArrayOutputWithContext(ctx context.Context) ClusterCustomerManagedKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCustomerManagedKeyArrayOutput)
}

// ClusterCustomerManagedKeyMapInput is an input type that accepts ClusterCustomerManagedKeyMap and ClusterCustomerManagedKeyMapOutput values.
// You can construct a concrete instance of `ClusterCustomerManagedKeyMapInput` via:
//
//	ClusterCustomerManagedKeyMap{ "key": ClusterCustomerManagedKeyArgs{...} }
type ClusterCustomerManagedKeyMapInput interface {
	pulumi.Input

	ToClusterCustomerManagedKeyMapOutput() ClusterCustomerManagedKeyMapOutput
	ToClusterCustomerManagedKeyMapOutputWithContext(context.Context) ClusterCustomerManagedKeyMapOutput
}

type ClusterCustomerManagedKeyMap map[string]ClusterCustomerManagedKeyInput

func (ClusterCustomerManagedKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterCustomerManagedKey)(nil)).Elem()
}

func (i ClusterCustomerManagedKeyMap) ToClusterCustomerManagedKeyMapOutput() ClusterCustomerManagedKeyMapOutput {
	return i.ToClusterCustomerManagedKeyMapOutputWithContext(context.Background())
}

func (i ClusterCustomerManagedKeyMap) ToClusterCustomerManagedKeyMapOutputWithContext(ctx context.Context) ClusterCustomerManagedKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCustomerManagedKeyMapOutput)
}

type ClusterCustomerManagedKeyOutput struct{ *pulumi.OutputState }

func (ClusterCustomerManagedKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterCustomerManagedKey)(nil)).Elem()
}

func (o ClusterCustomerManagedKeyOutput) ToClusterCustomerManagedKeyOutput() ClusterCustomerManagedKeyOutput {
	return o
}

func (o ClusterCustomerManagedKeyOutput) ToClusterCustomerManagedKeyOutputWithContext(ctx context.Context) ClusterCustomerManagedKeyOutput {
	return o
}

// The ID of the Kusto Cluster. Changing this forces a new resource to be created.
func (o ClusterCustomerManagedKeyOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterCustomerManagedKey) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The name of Key Vault Key.
func (o ClusterCustomerManagedKeyOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterCustomerManagedKey) pulumi.StringOutput { return v.KeyName }).(pulumi.StringOutput)
}

// The ID of the Key Vault.
func (o ClusterCustomerManagedKeyOutput) KeyVaultId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterCustomerManagedKey) pulumi.StringOutput { return v.KeyVaultId }).(pulumi.StringOutput)
}

// The version of Key Vault Key.
func (o ClusterCustomerManagedKeyOutput) KeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterCustomerManagedKey) pulumi.StringPtrOutput { return v.KeyVersion }).(pulumi.StringPtrOutput)
}

// The user assigned identity that has access to the Key Vault Key. If not specified, system assigned identity will be used.
func (o ClusterCustomerManagedKeyOutput) UserIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterCustomerManagedKey) pulumi.StringPtrOutput { return v.UserIdentity }).(pulumi.StringPtrOutput)
}

type ClusterCustomerManagedKeyArrayOutput struct{ *pulumi.OutputState }

func (ClusterCustomerManagedKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterCustomerManagedKey)(nil)).Elem()
}

func (o ClusterCustomerManagedKeyArrayOutput) ToClusterCustomerManagedKeyArrayOutput() ClusterCustomerManagedKeyArrayOutput {
	return o
}

func (o ClusterCustomerManagedKeyArrayOutput) ToClusterCustomerManagedKeyArrayOutputWithContext(ctx context.Context) ClusterCustomerManagedKeyArrayOutput {
	return o
}

func (o ClusterCustomerManagedKeyArrayOutput) Index(i pulumi.IntInput) ClusterCustomerManagedKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterCustomerManagedKey {
		return vs[0].([]*ClusterCustomerManagedKey)[vs[1].(int)]
	}).(ClusterCustomerManagedKeyOutput)
}

type ClusterCustomerManagedKeyMapOutput struct{ *pulumi.OutputState }

func (ClusterCustomerManagedKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterCustomerManagedKey)(nil)).Elem()
}

func (o ClusterCustomerManagedKeyMapOutput) ToClusterCustomerManagedKeyMapOutput() ClusterCustomerManagedKeyMapOutput {
	return o
}

func (o ClusterCustomerManagedKeyMapOutput) ToClusterCustomerManagedKeyMapOutputWithContext(ctx context.Context) ClusterCustomerManagedKeyMapOutput {
	return o
}

func (o ClusterCustomerManagedKeyMapOutput) MapIndex(k pulumi.StringInput) ClusterCustomerManagedKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterCustomerManagedKey {
		return vs[0].(map[string]*ClusterCustomerManagedKey)[vs[1].(string)]
	}).(ClusterCustomerManagedKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCustomerManagedKeyInput)(nil)).Elem(), &ClusterCustomerManagedKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCustomerManagedKeyArrayInput)(nil)).Elem(), ClusterCustomerManagedKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCustomerManagedKeyMapInput)(nil)).Elem(), ClusterCustomerManagedKeyMap{})
	pulumi.RegisterOutputType(ClusterCustomerManagedKeyOutput{})
	pulumi.RegisterOutputType(ClusterCustomerManagedKeyArrayOutput{})
	pulumi.RegisterOutputType(ClusterCustomerManagedKeyMapOutput{})
}
