// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kusto

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a Customer Managed Key for a Kusto Cluster.
//
// ## Import
//
// Customer Managed Keys for a Kusto Cluster can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:kusto/clusterCustomerManagedKey:ClusterCustomerManagedKey example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Kusto/Clusters/cluster1
// ```
type ClusterCustomerManagedKey struct {
	pulumi.CustomResourceState

	// The ID of the Kusto Cluster. Changing this forces a new resource to be created.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The name of Key Vault Key.
	KeyName pulumi.StringOutput `pulumi:"keyName"`
	// The ID of the Key Vault. Changing this forces a new resource to be created.
	KeyVaultId pulumi.StringOutput `pulumi:"keyVaultId"`
	// The version of Key Vault Key.
	KeyVersion pulumi.StringOutput `pulumi:"keyVersion"`
}

// NewClusterCustomerManagedKey registers a new resource with the given unique name, arguments, and options.
func NewClusterCustomerManagedKey(ctx *pulumi.Context,
	name string, args *ClusterCustomerManagedKeyArgs, opts ...pulumi.ResourceOption) (*ClusterCustomerManagedKey, error) {
	if args == nil || args.ClusterId == nil {
		return nil, errors.New("missing required argument 'ClusterId'")
	}
	if args == nil || args.KeyName == nil {
		return nil, errors.New("missing required argument 'KeyName'")
	}
	if args == nil || args.KeyVaultId == nil {
		return nil, errors.New("missing required argument 'KeyVaultId'")
	}
	if args == nil || args.KeyVersion == nil {
		return nil, errors.New("missing required argument 'KeyVersion'")
	}
	if args == nil {
		args = &ClusterCustomerManagedKeyArgs{}
	}
	var resource ClusterCustomerManagedKey
	err := ctx.RegisterResource("azure:kusto/clusterCustomerManagedKey:ClusterCustomerManagedKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterCustomerManagedKey gets an existing ClusterCustomerManagedKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterCustomerManagedKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterCustomerManagedKeyState, opts ...pulumi.ResourceOption) (*ClusterCustomerManagedKey, error) {
	var resource ClusterCustomerManagedKey
	err := ctx.ReadResource("azure:kusto/clusterCustomerManagedKey:ClusterCustomerManagedKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterCustomerManagedKey resources.
type clusterCustomerManagedKeyState struct {
	// The ID of the Kusto Cluster. Changing this forces a new resource to be created.
	ClusterId *string `pulumi:"clusterId"`
	// The name of Key Vault Key.
	KeyName *string `pulumi:"keyName"`
	// The ID of the Key Vault. Changing this forces a new resource to be created.
	KeyVaultId *string `pulumi:"keyVaultId"`
	// The version of Key Vault Key.
	KeyVersion *string `pulumi:"keyVersion"`
}

type ClusterCustomerManagedKeyState struct {
	// The ID of the Kusto Cluster. Changing this forces a new resource to be created.
	ClusterId pulumi.StringPtrInput
	// The name of Key Vault Key.
	KeyName pulumi.StringPtrInput
	// The ID of the Key Vault. Changing this forces a new resource to be created.
	KeyVaultId pulumi.StringPtrInput
	// The version of Key Vault Key.
	KeyVersion pulumi.StringPtrInput
}

func (ClusterCustomerManagedKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterCustomerManagedKeyState)(nil)).Elem()
}

type clusterCustomerManagedKeyArgs struct {
	// The ID of the Kusto Cluster. Changing this forces a new resource to be created.
	ClusterId string `pulumi:"clusterId"`
	// The name of Key Vault Key.
	KeyName string `pulumi:"keyName"`
	// The ID of the Key Vault. Changing this forces a new resource to be created.
	KeyVaultId string `pulumi:"keyVaultId"`
	// The version of Key Vault Key.
	KeyVersion string `pulumi:"keyVersion"`
}

// The set of arguments for constructing a ClusterCustomerManagedKey resource.
type ClusterCustomerManagedKeyArgs struct {
	// The ID of the Kusto Cluster. Changing this forces a new resource to be created.
	ClusterId pulumi.StringInput
	// The name of Key Vault Key.
	KeyName pulumi.StringInput
	// The ID of the Key Vault. Changing this forces a new resource to be created.
	KeyVaultId pulumi.StringInput
	// The version of Key Vault Key.
	KeyVersion pulumi.StringInput
}

func (ClusterCustomerManagedKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterCustomerManagedKeyArgs)(nil)).Elem()
}

type ClusterCustomerManagedKeyInput interface {
	pulumi.Input

	ToClusterCustomerManagedKeyOutput() ClusterCustomerManagedKeyOutput
	ToClusterCustomerManagedKeyOutputWithContext(ctx context.Context) ClusterCustomerManagedKeyOutput
}

func (ClusterCustomerManagedKey) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCustomerManagedKey)(nil)).Elem()
}

func (i ClusterCustomerManagedKey) ToClusterCustomerManagedKeyOutput() ClusterCustomerManagedKeyOutput {
	return i.ToClusterCustomerManagedKeyOutputWithContext(context.Background())
}

func (i ClusterCustomerManagedKey) ToClusterCustomerManagedKeyOutputWithContext(ctx context.Context) ClusterCustomerManagedKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCustomerManagedKeyOutput)
}

type ClusterCustomerManagedKeyOutput struct {
	*pulumi.OutputState
}

func (ClusterCustomerManagedKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCustomerManagedKeyOutput)(nil)).Elem()
}

func (o ClusterCustomerManagedKeyOutput) ToClusterCustomerManagedKeyOutput() ClusterCustomerManagedKeyOutput {
	return o
}

func (o ClusterCustomerManagedKeyOutput) ToClusterCustomerManagedKeyOutputWithContext(ctx context.Context) ClusterCustomerManagedKeyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ClusterCustomerManagedKeyOutput{})
}
