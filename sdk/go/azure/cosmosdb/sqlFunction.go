// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cosmosdb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an SQL User Defined Function.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/cosmosdb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleAccount, err := cosmosdb.LookupAccount(ctx, &cosmosdb.LookupAccountArgs{
//				Name:              "tfex-cosmosdb-account",
//				ResourceGroupName: "tfex-cosmosdb-account-rg",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleSqlDatabase, err := cosmosdb.NewSqlDatabase(ctx, "exampleSqlDatabase", &cosmosdb.SqlDatabaseArgs{
//				ResourceGroupName: *pulumi.String(exampleAccount.ResourceGroupName),
//				AccountName:       *pulumi.String(exampleAccount.Name),
//				Throughput:        pulumi.Int(400),
//			})
//			if err != nil {
//				return err
//			}
//			exampleSqlContainer, err := cosmosdb.NewSqlContainer(ctx, "exampleSqlContainer", &cosmosdb.SqlContainerArgs{
//				ResourceGroupName: *pulumi.String(exampleAccount.ResourceGroupName),
//				AccountName:       *pulumi.String(exampleAccount.Name),
//				DatabaseName:      exampleSqlDatabase.Name,
//				PartitionKeyPath:  pulumi.String("/id"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cosmosdb.NewSqlFunction(ctx, "exampleSqlFunction", &cosmosdb.SqlFunctionArgs{
//				ContainerId: exampleSqlContainer.ID(),
//				Body:        pulumi.String("function trigger(){}"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SQL User Defined Functions can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:cosmosdb/sqlFunction:SqlFunction example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DocumentDB/databaseAccounts/account1/sqlDatabases/database1/containers/container1/userDefinedFunctions/userDefinedFunction1
//
// ```
type SqlFunction struct {
	pulumi.CustomResourceState

	// Body of the User Defined Function.
	Body pulumi.StringOutput `pulumi:"body"`
	// The id of the Cosmos DB SQL Container to create the SQL User Defined Function within. Changing this forces a new SQL User Defined Function to be created.
	ContainerId pulumi.StringOutput `pulumi:"containerId"`
	// The name which should be used for this SQL User Defined Function. Changing this forces a new SQL User Defined Function to be created.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewSqlFunction registers a new resource with the given unique name, arguments, and options.
func NewSqlFunction(ctx *pulumi.Context,
	name string, args *SqlFunctionArgs, opts ...pulumi.ResourceOption) (*SqlFunction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Body == nil {
		return nil, errors.New("invalid value for required argument 'Body'")
	}
	if args.ContainerId == nil {
		return nil, errors.New("invalid value for required argument 'ContainerId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SqlFunction
	err := ctx.RegisterResource("azure:cosmosdb/sqlFunction:SqlFunction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlFunction gets an existing SqlFunction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlFunction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlFunctionState, opts ...pulumi.ResourceOption) (*SqlFunction, error) {
	var resource SqlFunction
	err := ctx.ReadResource("azure:cosmosdb/sqlFunction:SqlFunction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlFunction resources.
type sqlFunctionState struct {
	// Body of the User Defined Function.
	Body *string `pulumi:"body"`
	// The id of the Cosmos DB SQL Container to create the SQL User Defined Function within. Changing this forces a new SQL User Defined Function to be created.
	ContainerId *string `pulumi:"containerId"`
	// The name which should be used for this SQL User Defined Function. Changing this forces a new SQL User Defined Function to be created.
	Name *string `pulumi:"name"`
}

type SqlFunctionState struct {
	// Body of the User Defined Function.
	Body pulumi.StringPtrInput
	// The id of the Cosmos DB SQL Container to create the SQL User Defined Function within. Changing this forces a new SQL User Defined Function to be created.
	ContainerId pulumi.StringPtrInput
	// The name which should be used for this SQL User Defined Function. Changing this forces a new SQL User Defined Function to be created.
	Name pulumi.StringPtrInput
}

func (SqlFunctionState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlFunctionState)(nil)).Elem()
}

type sqlFunctionArgs struct {
	// Body of the User Defined Function.
	Body string `pulumi:"body"`
	// The id of the Cosmos DB SQL Container to create the SQL User Defined Function within. Changing this forces a new SQL User Defined Function to be created.
	ContainerId string `pulumi:"containerId"`
	// The name which should be used for this SQL User Defined Function. Changing this forces a new SQL User Defined Function to be created.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a SqlFunction resource.
type SqlFunctionArgs struct {
	// Body of the User Defined Function.
	Body pulumi.StringInput
	// The id of the Cosmos DB SQL Container to create the SQL User Defined Function within. Changing this forces a new SQL User Defined Function to be created.
	ContainerId pulumi.StringInput
	// The name which should be used for this SQL User Defined Function. Changing this forces a new SQL User Defined Function to be created.
	Name pulumi.StringPtrInput
}

func (SqlFunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlFunctionArgs)(nil)).Elem()
}

type SqlFunctionInput interface {
	pulumi.Input

	ToSqlFunctionOutput() SqlFunctionOutput
	ToSqlFunctionOutputWithContext(ctx context.Context) SqlFunctionOutput
}

func (*SqlFunction) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlFunction)(nil)).Elem()
}

func (i *SqlFunction) ToSqlFunctionOutput() SqlFunctionOutput {
	return i.ToSqlFunctionOutputWithContext(context.Background())
}

func (i *SqlFunction) ToSqlFunctionOutputWithContext(ctx context.Context) SqlFunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlFunctionOutput)
}

// SqlFunctionArrayInput is an input type that accepts SqlFunctionArray and SqlFunctionArrayOutput values.
// You can construct a concrete instance of `SqlFunctionArrayInput` via:
//
//	SqlFunctionArray{ SqlFunctionArgs{...} }
type SqlFunctionArrayInput interface {
	pulumi.Input

	ToSqlFunctionArrayOutput() SqlFunctionArrayOutput
	ToSqlFunctionArrayOutputWithContext(context.Context) SqlFunctionArrayOutput
}

type SqlFunctionArray []SqlFunctionInput

func (SqlFunctionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlFunction)(nil)).Elem()
}

func (i SqlFunctionArray) ToSqlFunctionArrayOutput() SqlFunctionArrayOutput {
	return i.ToSqlFunctionArrayOutputWithContext(context.Background())
}

func (i SqlFunctionArray) ToSqlFunctionArrayOutputWithContext(ctx context.Context) SqlFunctionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlFunctionArrayOutput)
}

// SqlFunctionMapInput is an input type that accepts SqlFunctionMap and SqlFunctionMapOutput values.
// You can construct a concrete instance of `SqlFunctionMapInput` via:
//
//	SqlFunctionMap{ "key": SqlFunctionArgs{...} }
type SqlFunctionMapInput interface {
	pulumi.Input

	ToSqlFunctionMapOutput() SqlFunctionMapOutput
	ToSqlFunctionMapOutputWithContext(context.Context) SqlFunctionMapOutput
}

type SqlFunctionMap map[string]SqlFunctionInput

func (SqlFunctionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlFunction)(nil)).Elem()
}

func (i SqlFunctionMap) ToSqlFunctionMapOutput() SqlFunctionMapOutput {
	return i.ToSqlFunctionMapOutputWithContext(context.Background())
}

func (i SqlFunctionMap) ToSqlFunctionMapOutputWithContext(ctx context.Context) SqlFunctionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlFunctionMapOutput)
}

type SqlFunctionOutput struct{ *pulumi.OutputState }

func (SqlFunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlFunction)(nil)).Elem()
}

func (o SqlFunctionOutput) ToSqlFunctionOutput() SqlFunctionOutput {
	return o
}

func (o SqlFunctionOutput) ToSqlFunctionOutputWithContext(ctx context.Context) SqlFunctionOutput {
	return o
}

// Body of the User Defined Function.
func (o SqlFunctionOutput) Body() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlFunction) pulumi.StringOutput { return v.Body }).(pulumi.StringOutput)
}

// The id of the Cosmos DB SQL Container to create the SQL User Defined Function within. Changing this forces a new SQL User Defined Function to be created.
func (o SqlFunctionOutput) ContainerId() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlFunction) pulumi.StringOutput { return v.ContainerId }).(pulumi.StringOutput)
}

// The name which should be used for this SQL User Defined Function. Changing this forces a new SQL User Defined Function to be created.
func (o SqlFunctionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlFunction) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type SqlFunctionArrayOutput struct{ *pulumi.OutputState }

func (SqlFunctionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlFunction)(nil)).Elem()
}

func (o SqlFunctionArrayOutput) ToSqlFunctionArrayOutput() SqlFunctionArrayOutput {
	return o
}

func (o SqlFunctionArrayOutput) ToSqlFunctionArrayOutputWithContext(ctx context.Context) SqlFunctionArrayOutput {
	return o
}

func (o SqlFunctionArrayOutput) Index(i pulumi.IntInput) SqlFunctionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SqlFunction {
		return vs[0].([]*SqlFunction)[vs[1].(int)]
	}).(SqlFunctionOutput)
}

type SqlFunctionMapOutput struct{ *pulumi.OutputState }

func (SqlFunctionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlFunction)(nil)).Elem()
}

func (o SqlFunctionMapOutput) ToSqlFunctionMapOutput() SqlFunctionMapOutput {
	return o
}

func (o SqlFunctionMapOutput) ToSqlFunctionMapOutputWithContext(ctx context.Context) SqlFunctionMapOutput {
	return o
}

func (o SqlFunctionMapOutput) MapIndex(k pulumi.StringInput) SqlFunctionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SqlFunction {
		return vs[0].(map[string]*SqlFunction)[vs[1].(string)]
	}).(SqlFunctionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SqlFunctionInput)(nil)).Elem(), &SqlFunction{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlFunctionArrayInput)(nil)).Elem(), SqlFunctionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlFunctionMapInput)(nil)).Elem(), SqlFunctionMap{})
	pulumi.RegisterOutputType(SqlFunctionOutput{})
	pulumi.RegisterOutputType(SqlFunctionArrayOutput{})
	pulumi.RegisterOutputType(SqlFunctionMapOutput{})
}
