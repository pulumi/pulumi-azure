// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cosmosdb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SqlFunction struct {
	pulumi.CustomResourceState

	Body        pulumi.StringOutput `pulumi:"body"`
	ContainerId pulumi.StringOutput `pulumi:"containerId"`
	Name        pulumi.StringOutput `pulumi:"name"`
}

// NewSqlFunction registers a new resource with the given unique name, arguments, and options.
func NewSqlFunction(ctx *pulumi.Context,
	name string, args *SqlFunctionArgs, opts ...pulumi.ResourceOption) (*SqlFunction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Body == nil {
		return nil, errors.New("invalid value for required argument 'Body'")
	}
	if args.ContainerId == nil {
		return nil, errors.New("invalid value for required argument 'ContainerId'")
	}
	var resource SqlFunction
	err := ctx.RegisterResource("azure:cosmosdb/sqlFunction:SqlFunction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlFunction gets an existing SqlFunction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlFunction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlFunctionState, opts ...pulumi.ResourceOption) (*SqlFunction, error) {
	var resource SqlFunction
	err := ctx.ReadResource("azure:cosmosdb/sqlFunction:SqlFunction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlFunction resources.
type sqlFunctionState struct {
	Body        *string `pulumi:"body"`
	ContainerId *string `pulumi:"containerId"`
	Name        *string `pulumi:"name"`
}

type SqlFunctionState struct {
	Body        pulumi.StringPtrInput
	ContainerId pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
}

func (SqlFunctionState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlFunctionState)(nil)).Elem()
}

type sqlFunctionArgs struct {
	Body        string  `pulumi:"body"`
	ContainerId string  `pulumi:"containerId"`
	Name        *string `pulumi:"name"`
}

// The set of arguments for constructing a SqlFunction resource.
type SqlFunctionArgs struct {
	Body        pulumi.StringInput
	ContainerId pulumi.StringInput
	Name        pulumi.StringPtrInput
}

func (SqlFunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlFunctionArgs)(nil)).Elem()
}

type SqlFunctionInput interface {
	pulumi.Input

	ToSqlFunctionOutput() SqlFunctionOutput
	ToSqlFunctionOutputWithContext(ctx context.Context) SqlFunctionOutput
}

func (*SqlFunction) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlFunction)(nil))
}

func (i *SqlFunction) ToSqlFunctionOutput() SqlFunctionOutput {
	return i.ToSqlFunctionOutputWithContext(context.Background())
}

func (i *SqlFunction) ToSqlFunctionOutputWithContext(ctx context.Context) SqlFunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlFunctionOutput)
}

func (i *SqlFunction) ToSqlFunctionPtrOutput() SqlFunctionPtrOutput {
	return i.ToSqlFunctionPtrOutputWithContext(context.Background())
}

func (i *SqlFunction) ToSqlFunctionPtrOutputWithContext(ctx context.Context) SqlFunctionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlFunctionPtrOutput)
}

type SqlFunctionPtrInput interface {
	pulumi.Input

	ToSqlFunctionPtrOutput() SqlFunctionPtrOutput
	ToSqlFunctionPtrOutputWithContext(ctx context.Context) SqlFunctionPtrOutput
}

type sqlFunctionPtrType SqlFunctionArgs

func (*sqlFunctionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlFunction)(nil))
}

func (i *sqlFunctionPtrType) ToSqlFunctionPtrOutput() SqlFunctionPtrOutput {
	return i.ToSqlFunctionPtrOutputWithContext(context.Background())
}

func (i *sqlFunctionPtrType) ToSqlFunctionPtrOutputWithContext(ctx context.Context) SqlFunctionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlFunctionPtrOutput)
}

// SqlFunctionArrayInput is an input type that accepts SqlFunctionArray and SqlFunctionArrayOutput values.
// You can construct a concrete instance of `SqlFunctionArrayInput` via:
//
//          SqlFunctionArray{ SqlFunctionArgs{...} }
type SqlFunctionArrayInput interface {
	pulumi.Input

	ToSqlFunctionArrayOutput() SqlFunctionArrayOutput
	ToSqlFunctionArrayOutputWithContext(context.Context) SqlFunctionArrayOutput
}

type SqlFunctionArray []SqlFunctionInput

func (SqlFunctionArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*SqlFunction)(nil))
}

func (i SqlFunctionArray) ToSqlFunctionArrayOutput() SqlFunctionArrayOutput {
	return i.ToSqlFunctionArrayOutputWithContext(context.Background())
}

func (i SqlFunctionArray) ToSqlFunctionArrayOutputWithContext(ctx context.Context) SqlFunctionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlFunctionArrayOutput)
}

// SqlFunctionMapInput is an input type that accepts SqlFunctionMap and SqlFunctionMapOutput values.
// You can construct a concrete instance of `SqlFunctionMapInput` via:
//
//          SqlFunctionMap{ "key": SqlFunctionArgs{...} }
type SqlFunctionMapInput interface {
	pulumi.Input

	ToSqlFunctionMapOutput() SqlFunctionMapOutput
	ToSqlFunctionMapOutputWithContext(context.Context) SqlFunctionMapOutput
}

type SqlFunctionMap map[string]SqlFunctionInput

func (SqlFunctionMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*SqlFunction)(nil))
}

func (i SqlFunctionMap) ToSqlFunctionMapOutput() SqlFunctionMapOutput {
	return i.ToSqlFunctionMapOutputWithContext(context.Background())
}

func (i SqlFunctionMap) ToSqlFunctionMapOutputWithContext(ctx context.Context) SqlFunctionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlFunctionMapOutput)
}

type SqlFunctionOutput struct {
	*pulumi.OutputState
}

func (SqlFunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlFunction)(nil))
}

func (o SqlFunctionOutput) ToSqlFunctionOutput() SqlFunctionOutput {
	return o
}

func (o SqlFunctionOutput) ToSqlFunctionOutputWithContext(ctx context.Context) SqlFunctionOutput {
	return o
}

func (o SqlFunctionOutput) ToSqlFunctionPtrOutput() SqlFunctionPtrOutput {
	return o.ToSqlFunctionPtrOutputWithContext(context.Background())
}

func (o SqlFunctionOutput) ToSqlFunctionPtrOutputWithContext(ctx context.Context) SqlFunctionPtrOutput {
	return o.ApplyT(func(v SqlFunction) *SqlFunction {
		return &v
	}).(SqlFunctionPtrOutput)
}

type SqlFunctionPtrOutput struct {
	*pulumi.OutputState
}

func (SqlFunctionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlFunction)(nil))
}

func (o SqlFunctionPtrOutput) ToSqlFunctionPtrOutput() SqlFunctionPtrOutput {
	return o
}

func (o SqlFunctionPtrOutput) ToSqlFunctionPtrOutputWithContext(ctx context.Context) SqlFunctionPtrOutput {
	return o
}

type SqlFunctionArrayOutput struct{ *pulumi.OutputState }

func (SqlFunctionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SqlFunction)(nil))
}

func (o SqlFunctionArrayOutput) ToSqlFunctionArrayOutput() SqlFunctionArrayOutput {
	return o
}

func (o SqlFunctionArrayOutput) ToSqlFunctionArrayOutputWithContext(ctx context.Context) SqlFunctionArrayOutput {
	return o
}

func (o SqlFunctionArrayOutput) Index(i pulumi.IntInput) SqlFunctionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SqlFunction {
		return vs[0].([]SqlFunction)[vs[1].(int)]
	}).(SqlFunctionOutput)
}

type SqlFunctionMapOutput struct{ *pulumi.OutputState }

func (SqlFunctionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SqlFunction)(nil))
}

func (o SqlFunctionMapOutput) ToSqlFunctionMapOutput() SqlFunctionMapOutput {
	return o
}

func (o SqlFunctionMapOutput) ToSqlFunctionMapOutputWithContext(ctx context.Context) SqlFunctionMapOutput {
	return o
}

func (o SqlFunctionMapOutput) MapIndex(k pulumi.StringInput) SqlFunctionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SqlFunction {
		return vs[0].(map[string]SqlFunction)[vs[1].(string)]
	}).(SqlFunctionOutput)
}

func init() {
	pulumi.RegisterOutputType(SqlFunctionOutput{})
	pulumi.RegisterOutputType(SqlFunctionPtrOutput{})
	pulumi.RegisterOutputType(SqlFunctionArrayOutput{})
	pulumi.RegisterOutputType(SqlFunctionMapOutput{})
}
