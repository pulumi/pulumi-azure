// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cosmosdb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Azure Cosmos DB for PostgreSQL Role.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/cosmosdb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			examplePostgresqlCluster, err := cosmosdb.NewPostgresqlCluster(ctx, "examplePostgresqlCluster", &cosmosdb.PostgresqlClusterArgs{
//				ResourceGroupName:           exampleResourceGroup.Name,
//				Location:                    exampleResourceGroup.Location,
//				AdministratorLoginPassword:  pulumi.String("H@Sh1CoR3!"),
//				CoordinatorStorageQuotaInMb: pulumi.Int(131072),
//				CoordinatorVcoreCount:       pulumi.Int(2),
//				NodeCount:                   pulumi.Int(0),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cosmosdb.NewPostgresqlRole(ctx, "examplePostgresqlRole", &cosmosdb.PostgresqlRoleArgs{
//				ClusterId: examplePostgresqlCluster.ID(),
//				Password:  pulumi.String("H@Sh1CoR3!"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Azure Cosmos DB for PostgreSQL Roles can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:cosmosdb/postgresqlRole:PostgresqlRole example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/cluster1/roles/role1
//
// ```
type PostgresqlRole struct {
	pulumi.CustomResourceState

	// The resource ID of the Azure Cosmos DB for PostgreSQL Cluster. Changing this forces a new resource to be created.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The name which should be used for this Azure Cosmos DB for PostgreSQL Role. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The password of the Azure Cosmos DB for PostgreSQL Role. Changing this forces a new resource to be created.
	Password pulumi.StringOutput `pulumi:"password"`
}

// NewPostgresqlRole registers a new resource with the given unique name, arguments, and options.
func NewPostgresqlRole(ctx *pulumi.Context,
	name string, args *PostgresqlRoleArgs, opts ...pulumi.ResourceOption) (*PostgresqlRole, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PostgresqlRole
	err := ctx.RegisterResource("azure:cosmosdb/postgresqlRole:PostgresqlRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPostgresqlRole gets an existing PostgresqlRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPostgresqlRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PostgresqlRoleState, opts ...pulumi.ResourceOption) (*PostgresqlRole, error) {
	var resource PostgresqlRole
	err := ctx.ReadResource("azure:cosmosdb/postgresqlRole:PostgresqlRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PostgresqlRole resources.
type postgresqlRoleState struct {
	// The resource ID of the Azure Cosmos DB for PostgreSQL Cluster. Changing this forces a new resource to be created.
	ClusterId *string `pulumi:"clusterId"`
	// The name which should be used for this Azure Cosmos DB for PostgreSQL Role. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The password of the Azure Cosmos DB for PostgreSQL Role. Changing this forces a new resource to be created.
	Password *string `pulumi:"password"`
}

type PostgresqlRoleState struct {
	// The resource ID of the Azure Cosmos DB for PostgreSQL Cluster. Changing this forces a new resource to be created.
	ClusterId pulumi.StringPtrInput
	// The name which should be used for this Azure Cosmos DB for PostgreSQL Role. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The password of the Azure Cosmos DB for PostgreSQL Role. Changing this forces a new resource to be created.
	Password pulumi.StringPtrInput
}

func (PostgresqlRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresqlRoleState)(nil)).Elem()
}

type postgresqlRoleArgs struct {
	// The resource ID of the Azure Cosmos DB for PostgreSQL Cluster. Changing this forces a new resource to be created.
	ClusterId string `pulumi:"clusterId"`
	// The name which should be used for this Azure Cosmos DB for PostgreSQL Role. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The password of the Azure Cosmos DB for PostgreSQL Role. Changing this forces a new resource to be created.
	Password string `pulumi:"password"`
}

// The set of arguments for constructing a PostgresqlRole resource.
type PostgresqlRoleArgs struct {
	// The resource ID of the Azure Cosmos DB for PostgreSQL Cluster. Changing this forces a new resource to be created.
	ClusterId pulumi.StringInput
	// The name which should be used for this Azure Cosmos DB for PostgreSQL Role. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The password of the Azure Cosmos DB for PostgreSQL Role. Changing this forces a new resource to be created.
	Password pulumi.StringInput
}

func (PostgresqlRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresqlRoleArgs)(nil)).Elem()
}

type PostgresqlRoleInput interface {
	pulumi.Input

	ToPostgresqlRoleOutput() PostgresqlRoleOutput
	ToPostgresqlRoleOutputWithContext(ctx context.Context) PostgresqlRoleOutput
}

func (*PostgresqlRole) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresqlRole)(nil)).Elem()
}

func (i *PostgresqlRole) ToPostgresqlRoleOutput() PostgresqlRoleOutput {
	return i.ToPostgresqlRoleOutputWithContext(context.Background())
}

func (i *PostgresqlRole) ToPostgresqlRoleOutputWithContext(ctx context.Context) PostgresqlRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresqlRoleOutput)
}

// PostgresqlRoleArrayInput is an input type that accepts PostgresqlRoleArray and PostgresqlRoleArrayOutput values.
// You can construct a concrete instance of `PostgresqlRoleArrayInput` via:
//
//	PostgresqlRoleArray{ PostgresqlRoleArgs{...} }
type PostgresqlRoleArrayInput interface {
	pulumi.Input

	ToPostgresqlRoleArrayOutput() PostgresqlRoleArrayOutput
	ToPostgresqlRoleArrayOutputWithContext(context.Context) PostgresqlRoleArrayOutput
}

type PostgresqlRoleArray []PostgresqlRoleInput

func (PostgresqlRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PostgresqlRole)(nil)).Elem()
}

func (i PostgresqlRoleArray) ToPostgresqlRoleArrayOutput() PostgresqlRoleArrayOutput {
	return i.ToPostgresqlRoleArrayOutputWithContext(context.Background())
}

func (i PostgresqlRoleArray) ToPostgresqlRoleArrayOutputWithContext(ctx context.Context) PostgresqlRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresqlRoleArrayOutput)
}

// PostgresqlRoleMapInput is an input type that accepts PostgresqlRoleMap and PostgresqlRoleMapOutput values.
// You can construct a concrete instance of `PostgresqlRoleMapInput` via:
//
//	PostgresqlRoleMap{ "key": PostgresqlRoleArgs{...} }
type PostgresqlRoleMapInput interface {
	pulumi.Input

	ToPostgresqlRoleMapOutput() PostgresqlRoleMapOutput
	ToPostgresqlRoleMapOutputWithContext(context.Context) PostgresqlRoleMapOutput
}

type PostgresqlRoleMap map[string]PostgresqlRoleInput

func (PostgresqlRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PostgresqlRole)(nil)).Elem()
}

func (i PostgresqlRoleMap) ToPostgresqlRoleMapOutput() PostgresqlRoleMapOutput {
	return i.ToPostgresqlRoleMapOutputWithContext(context.Background())
}

func (i PostgresqlRoleMap) ToPostgresqlRoleMapOutputWithContext(ctx context.Context) PostgresqlRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresqlRoleMapOutput)
}

type PostgresqlRoleOutput struct{ *pulumi.OutputState }

func (PostgresqlRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresqlRole)(nil)).Elem()
}

func (o PostgresqlRoleOutput) ToPostgresqlRoleOutput() PostgresqlRoleOutput {
	return o
}

func (o PostgresqlRoleOutput) ToPostgresqlRoleOutputWithContext(ctx context.Context) PostgresqlRoleOutput {
	return o
}

// The resource ID of the Azure Cosmos DB for PostgreSQL Cluster. Changing this forces a new resource to be created.
func (o PostgresqlRoleOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresqlRole) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The name which should be used for this Azure Cosmos DB for PostgreSQL Role. Changing this forces a new resource to be created.
func (o PostgresqlRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresqlRole) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The password of the Azure Cosmos DB for PostgreSQL Role. Changing this forces a new resource to be created.
func (o PostgresqlRoleOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresqlRole) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

type PostgresqlRoleArrayOutput struct{ *pulumi.OutputState }

func (PostgresqlRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PostgresqlRole)(nil)).Elem()
}

func (o PostgresqlRoleArrayOutput) ToPostgresqlRoleArrayOutput() PostgresqlRoleArrayOutput {
	return o
}

func (o PostgresqlRoleArrayOutput) ToPostgresqlRoleArrayOutputWithContext(ctx context.Context) PostgresqlRoleArrayOutput {
	return o
}

func (o PostgresqlRoleArrayOutput) Index(i pulumi.IntInput) PostgresqlRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PostgresqlRole {
		return vs[0].([]*PostgresqlRole)[vs[1].(int)]
	}).(PostgresqlRoleOutput)
}

type PostgresqlRoleMapOutput struct{ *pulumi.OutputState }

func (PostgresqlRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PostgresqlRole)(nil)).Elem()
}

func (o PostgresqlRoleMapOutput) ToPostgresqlRoleMapOutput() PostgresqlRoleMapOutput {
	return o
}

func (o PostgresqlRoleMapOutput) ToPostgresqlRoleMapOutputWithContext(ctx context.Context) PostgresqlRoleMapOutput {
	return o
}

func (o PostgresqlRoleMapOutput) MapIndex(k pulumi.StringInput) PostgresqlRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PostgresqlRole {
		return vs[0].(map[string]*PostgresqlRole)[vs[1].(string)]
	}).(PostgresqlRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresqlRoleInput)(nil)).Elem(), &PostgresqlRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresqlRoleArrayInput)(nil)).Elem(), PostgresqlRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresqlRoleMapInput)(nil)).Elem(), PostgresqlRoleMap{})
	pulumi.RegisterOutputType(PostgresqlRoleOutput{})
	pulumi.RegisterOutputType(PostgresqlRoleArrayOutput{})
	pulumi.RegisterOutputType(PostgresqlRoleMapOutput{})
}
