// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cosmosdb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a Cassandra Datacenter.
//
// > **NOTE:** In order for the `Azure Managed Instances for Apache Cassandra` to work properly the product requires the `Azure Cosmos DB` Application ID to be present and working in your tenant. If the `Azure Cosmos DB` Application ID is missing in your environment you will need to have an administrator of your tenant run the following command to add the `Azure Cosmos DB` Application ID to your tenant:
//
// ## Import
//
// Cassandra Datacenters can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:cosmosdb/cassandraDatacenter:CassandraDatacenter example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DocumentDB/cassandraClusters/cluster1/dataCenters/dc1
//
// ```
type CassandraDatacenter struct {
	pulumi.CustomResourceState

	// Determines whether availability zones are enabled. Defaults to `true`.
	AvailabilityZonesEnabled pulumi.BoolPtrOutput `pulumi:"availabilityZonesEnabled"`
	// The key URI of the customer key to use for the encryption of the backup Storage Account.
	BackupStorageCustomerKeyUri pulumi.StringPtrOutput `pulumi:"backupStorageCustomerKeyUri"`
	// The fragment of the cassandra.yaml configuration file to be included in the cassandra.yaml for all nodes in this Cassandra Datacenter. The fragment should be Base64 encoded and only a subset of keys is allowed.
	Base64EncodedYamlFragment pulumi.StringPtrOutput `pulumi:"base64EncodedYamlFragment"`
	// The ID of the Cassandra Cluster. Changing this forces a new Cassandra Datacenter to be created.
	CassandraClusterId pulumi.StringOutput `pulumi:"cassandraClusterId"`
	// The ID of the delegated management subnet for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.
	DelegatedManagementSubnetId pulumi.StringOutput `pulumi:"delegatedManagementSubnetId"`
	// Determines the number of p30 disks that are attached to each node.
	DiskCount pulumi.IntPtrOutput `pulumi:"diskCount"`
	// The Disk SKU that is used for this Cassandra Datacenter. Defaults to `P30`.
	DiskSku pulumi.StringPtrOutput `pulumi:"diskSku"`
	// The Azure Region where the Cassandra Datacenter should exist. Changing this forces a new Cassandra Datacenter to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The key URI of the customer key to use for the encryption of the Managed Disk.
	ManagedDiskCustomerKeyUri pulumi.StringPtrOutput `pulumi:"managedDiskCustomerKeyUri"`
	// The name which should be used for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The number of nodes the Cassandra Datacenter should have. The number should be equal or greater than `3`. Defaults to `3`.
	NodeCount pulumi.IntPtrOutput `pulumi:"nodeCount"`
	// Determines the selected sku.
	//
	// > **NOTE:** In v4.0 of the provider the `skuName` will have a default value of `Standard_E16s_v5`.
	SkuName pulumi.StringOutput `pulumi:"skuName"`
}

// NewCassandraDatacenter registers a new resource with the given unique name, arguments, and options.
func NewCassandraDatacenter(ctx *pulumi.Context,
	name string, args *CassandraDatacenterArgs, opts ...pulumi.ResourceOption) (*CassandraDatacenter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CassandraClusterId == nil {
		return nil, errors.New("invalid value for required argument 'CassandraClusterId'")
	}
	if args.DelegatedManagementSubnetId == nil {
		return nil, errors.New("invalid value for required argument 'DelegatedManagementSubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CassandraDatacenter
	err := ctx.RegisterResource("azure:cosmosdb/cassandraDatacenter:CassandraDatacenter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCassandraDatacenter gets an existing CassandraDatacenter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCassandraDatacenter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CassandraDatacenterState, opts ...pulumi.ResourceOption) (*CassandraDatacenter, error) {
	var resource CassandraDatacenter
	err := ctx.ReadResource("azure:cosmosdb/cassandraDatacenter:CassandraDatacenter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CassandraDatacenter resources.
type cassandraDatacenterState struct {
	// Determines whether availability zones are enabled. Defaults to `true`.
	AvailabilityZonesEnabled *bool `pulumi:"availabilityZonesEnabled"`
	// The key URI of the customer key to use for the encryption of the backup Storage Account.
	BackupStorageCustomerKeyUri *string `pulumi:"backupStorageCustomerKeyUri"`
	// The fragment of the cassandra.yaml configuration file to be included in the cassandra.yaml for all nodes in this Cassandra Datacenter. The fragment should be Base64 encoded and only a subset of keys is allowed.
	Base64EncodedYamlFragment *string `pulumi:"base64EncodedYamlFragment"`
	// The ID of the Cassandra Cluster. Changing this forces a new Cassandra Datacenter to be created.
	CassandraClusterId *string `pulumi:"cassandraClusterId"`
	// The ID of the delegated management subnet for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.
	DelegatedManagementSubnetId *string `pulumi:"delegatedManagementSubnetId"`
	// Determines the number of p30 disks that are attached to each node.
	DiskCount *int `pulumi:"diskCount"`
	// The Disk SKU that is used for this Cassandra Datacenter. Defaults to `P30`.
	DiskSku *string `pulumi:"diskSku"`
	// The Azure Region where the Cassandra Datacenter should exist. Changing this forces a new Cassandra Datacenter to be created.
	Location *string `pulumi:"location"`
	// The key URI of the customer key to use for the encryption of the Managed Disk.
	ManagedDiskCustomerKeyUri *string `pulumi:"managedDiskCustomerKeyUri"`
	// The name which should be used for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.
	Name *string `pulumi:"name"`
	// The number of nodes the Cassandra Datacenter should have. The number should be equal or greater than `3`. Defaults to `3`.
	NodeCount *int `pulumi:"nodeCount"`
	// Determines the selected sku.
	//
	// > **NOTE:** In v4.0 of the provider the `skuName` will have a default value of `Standard_E16s_v5`.
	SkuName *string `pulumi:"skuName"`
}

type CassandraDatacenterState struct {
	// Determines whether availability zones are enabled. Defaults to `true`.
	AvailabilityZonesEnabled pulumi.BoolPtrInput
	// The key URI of the customer key to use for the encryption of the backup Storage Account.
	BackupStorageCustomerKeyUri pulumi.StringPtrInput
	// The fragment of the cassandra.yaml configuration file to be included in the cassandra.yaml for all nodes in this Cassandra Datacenter. The fragment should be Base64 encoded and only a subset of keys is allowed.
	Base64EncodedYamlFragment pulumi.StringPtrInput
	// The ID of the Cassandra Cluster. Changing this forces a new Cassandra Datacenter to be created.
	CassandraClusterId pulumi.StringPtrInput
	// The ID of the delegated management subnet for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.
	DelegatedManagementSubnetId pulumi.StringPtrInput
	// Determines the number of p30 disks that are attached to each node.
	DiskCount pulumi.IntPtrInput
	// The Disk SKU that is used for this Cassandra Datacenter. Defaults to `P30`.
	DiskSku pulumi.StringPtrInput
	// The Azure Region where the Cassandra Datacenter should exist. Changing this forces a new Cassandra Datacenter to be created.
	Location pulumi.StringPtrInput
	// The key URI of the customer key to use for the encryption of the Managed Disk.
	ManagedDiskCustomerKeyUri pulumi.StringPtrInput
	// The name which should be used for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.
	Name pulumi.StringPtrInput
	// The number of nodes the Cassandra Datacenter should have. The number should be equal or greater than `3`. Defaults to `3`.
	NodeCount pulumi.IntPtrInput
	// Determines the selected sku.
	//
	// > **NOTE:** In v4.0 of the provider the `skuName` will have a default value of `Standard_E16s_v5`.
	SkuName pulumi.StringPtrInput
}

func (CassandraDatacenterState) ElementType() reflect.Type {
	return reflect.TypeOf((*cassandraDatacenterState)(nil)).Elem()
}

type cassandraDatacenterArgs struct {
	// Determines whether availability zones are enabled. Defaults to `true`.
	AvailabilityZonesEnabled *bool `pulumi:"availabilityZonesEnabled"`
	// The key URI of the customer key to use for the encryption of the backup Storage Account.
	BackupStorageCustomerKeyUri *string `pulumi:"backupStorageCustomerKeyUri"`
	// The fragment of the cassandra.yaml configuration file to be included in the cassandra.yaml for all nodes in this Cassandra Datacenter. The fragment should be Base64 encoded and only a subset of keys is allowed.
	Base64EncodedYamlFragment *string `pulumi:"base64EncodedYamlFragment"`
	// The ID of the Cassandra Cluster. Changing this forces a new Cassandra Datacenter to be created.
	CassandraClusterId string `pulumi:"cassandraClusterId"`
	// The ID of the delegated management subnet for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.
	DelegatedManagementSubnetId string `pulumi:"delegatedManagementSubnetId"`
	// Determines the number of p30 disks that are attached to each node.
	DiskCount *int `pulumi:"diskCount"`
	// The Disk SKU that is used for this Cassandra Datacenter. Defaults to `P30`.
	DiskSku *string `pulumi:"diskSku"`
	// The Azure Region where the Cassandra Datacenter should exist. Changing this forces a new Cassandra Datacenter to be created.
	Location *string `pulumi:"location"`
	// The key URI of the customer key to use for the encryption of the Managed Disk.
	ManagedDiskCustomerKeyUri *string `pulumi:"managedDiskCustomerKeyUri"`
	// The name which should be used for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.
	Name *string `pulumi:"name"`
	// The number of nodes the Cassandra Datacenter should have. The number should be equal or greater than `3`. Defaults to `3`.
	NodeCount *int `pulumi:"nodeCount"`
	// Determines the selected sku.
	//
	// > **NOTE:** In v4.0 of the provider the `skuName` will have a default value of `Standard_E16s_v5`.
	SkuName *string `pulumi:"skuName"`
}

// The set of arguments for constructing a CassandraDatacenter resource.
type CassandraDatacenterArgs struct {
	// Determines whether availability zones are enabled. Defaults to `true`.
	AvailabilityZonesEnabled pulumi.BoolPtrInput
	// The key URI of the customer key to use for the encryption of the backup Storage Account.
	BackupStorageCustomerKeyUri pulumi.StringPtrInput
	// The fragment of the cassandra.yaml configuration file to be included in the cassandra.yaml for all nodes in this Cassandra Datacenter. The fragment should be Base64 encoded and only a subset of keys is allowed.
	Base64EncodedYamlFragment pulumi.StringPtrInput
	// The ID of the Cassandra Cluster. Changing this forces a new Cassandra Datacenter to be created.
	CassandraClusterId pulumi.StringInput
	// The ID of the delegated management subnet for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.
	DelegatedManagementSubnetId pulumi.StringInput
	// Determines the number of p30 disks that are attached to each node.
	DiskCount pulumi.IntPtrInput
	// The Disk SKU that is used for this Cassandra Datacenter. Defaults to `P30`.
	DiskSku pulumi.StringPtrInput
	// The Azure Region where the Cassandra Datacenter should exist. Changing this forces a new Cassandra Datacenter to be created.
	Location pulumi.StringPtrInput
	// The key URI of the customer key to use for the encryption of the Managed Disk.
	ManagedDiskCustomerKeyUri pulumi.StringPtrInput
	// The name which should be used for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.
	Name pulumi.StringPtrInput
	// The number of nodes the Cassandra Datacenter should have. The number should be equal or greater than `3`. Defaults to `3`.
	NodeCount pulumi.IntPtrInput
	// Determines the selected sku.
	//
	// > **NOTE:** In v4.0 of the provider the `skuName` will have a default value of `Standard_E16s_v5`.
	SkuName pulumi.StringPtrInput
}

func (CassandraDatacenterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cassandraDatacenterArgs)(nil)).Elem()
}

type CassandraDatacenterInput interface {
	pulumi.Input

	ToCassandraDatacenterOutput() CassandraDatacenterOutput
	ToCassandraDatacenterOutputWithContext(ctx context.Context) CassandraDatacenterOutput
}

func (*CassandraDatacenter) ElementType() reflect.Type {
	return reflect.TypeOf((**CassandraDatacenter)(nil)).Elem()
}

func (i *CassandraDatacenter) ToCassandraDatacenterOutput() CassandraDatacenterOutput {
	return i.ToCassandraDatacenterOutputWithContext(context.Background())
}

func (i *CassandraDatacenter) ToCassandraDatacenterOutputWithContext(ctx context.Context) CassandraDatacenterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraDatacenterOutput)
}

func (i *CassandraDatacenter) ToOutput(ctx context.Context) pulumix.Output[*CassandraDatacenter] {
	return pulumix.Output[*CassandraDatacenter]{
		OutputState: i.ToCassandraDatacenterOutputWithContext(ctx).OutputState,
	}
}

// CassandraDatacenterArrayInput is an input type that accepts CassandraDatacenterArray and CassandraDatacenterArrayOutput values.
// You can construct a concrete instance of `CassandraDatacenterArrayInput` via:
//
//	CassandraDatacenterArray{ CassandraDatacenterArgs{...} }
type CassandraDatacenterArrayInput interface {
	pulumi.Input

	ToCassandraDatacenterArrayOutput() CassandraDatacenterArrayOutput
	ToCassandraDatacenterArrayOutputWithContext(context.Context) CassandraDatacenterArrayOutput
}

type CassandraDatacenterArray []CassandraDatacenterInput

func (CassandraDatacenterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CassandraDatacenter)(nil)).Elem()
}

func (i CassandraDatacenterArray) ToCassandraDatacenterArrayOutput() CassandraDatacenterArrayOutput {
	return i.ToCassandraDatacenterArrayOutputWithContext(context.Background())
}

func (i CassandraDatacenterArray) ToCassandraDatacenterArrayOutputWithContext(ctx context.Context) CassandraDatacenterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraDatacenterArrayOutput)
}

func (i CassandraDatacenterArray) ToOutput(ctx context.Context) pulumix.Output[[]*CassandraDatacenter] {
	return pulumix.Output[[]*CassandraDatacenter]{
		OutputState: i.ToCassandraDatacenterArrayOutputWithContext(ctx).OutputState,
	}
}

// CassandraDatacenterMapInput is an input type that accepts CassandraDatacenterMap and CassandraDatacenterMapOutput values.
// You can construct a concrete instance of `CassandraDatacenterMapInput` via:
//
//	CassandraDatacenterMap{ "key": CassandraDatacenterArgs{...} }
type CassandraDatacenterMapInput interface {
	pulumi.Input

	ToCassandraDatacenterMapOutput() CassandraDatacenterMapOutput
	ToCassandraDatacenterMapOutputWithContext(context.Context) CassandraDatacenterMapOutput
}

type CassandraDatacenterMap map[string]CassandraDatacenterInput

func (CassandraDatacenterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CassandraDatacenter)(nil)).Elem()
}

func (i CassandraDatacenterMap) ToCassandraDatacenterMapOutput() CassandraDatacenterMapOutput {
	return i.ToCassandraDatacenterMapOutputWithContext(context.Background())
}

func (i CassandraDatacenterMap) ToCassandraDatacenterMapOutputWithContext(ctx context.Context) CassandraDatacenterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraDatacenterMapOutput)
}

func (i CassandraDatacenterMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*CassandraDatacenter] {
	return pulumix.Output[map[string]*CassandraDatacenter]{
		OutputState: i.ToCassandraDatacenterMapOutputWithContext(ctx).OutputState,
	}
}

type CassandraDatacenterOutput struct{ *pulumi.OutputState }

func (CassandraDatacenterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CassandraDatacenter)(nil)).Elem()
}

func (o CassandraDatacenterOutput) ToCassandraDatacenterOutput() CassandraDatacenterOutput {
	return o
}

func (o CassandraDatacenterOutput) ToCassandraDatacenterOutputWithContext(ctx context.Context) CassandraDatacenterOutput {
	return o
}

func (o CassandraDatacenterOutput) ToOutput(ctx context.Context) pulumix.Output[*CassandraDatacenter] {
	return pulumix.Output[*CassandraDatacenter]{
		OutputState: o.OutputState,
	}
}

// Determines whether availability zones are enabled. Defaults to `true`.
func (o CassandraDatacenterOutput) AvailabilityZonesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CassandraDatacenter) pulumi.BoolPtrOutput { return v.AvailabilityZonesEnabled }).(pulumi.BoolPtrOutput)
}

// The key URI of the customer key to use for the encryption of the backup Storage Account.
func (o CassandraDatacenterOutput) BackupStorageCustomerKeyUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CassandraDatacenter) pulumi.StringPtrOutput { return v.BackupStorageCustomerKeyUri }).(pulumi.StringPtrOutput)
}

// The fragment of the cassandra.yaml configuration file to be included in the cassandra.yaml for all nodes in this Cassandra Datacenter. The fragment should be Base64 encoded and only a subset of keys is allowed.
func (o CassandraDatacenterOutput) Base64EncodedYamlFragment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CassandraDatacenter) pulumi.StringPtrOutput { return v.Base64EncodedYamlFragment }).(pulumi.StringPtrOutput)
}

// The ID of the Cassandra Cluster. Changing this forces a new Cassandra Datacenter to be created.
func (o CassandraDatacenterOutput) CassandraClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *CassandraDatacenter) pulumi.StringOutput { return v.CassandraClusterId }).(pulumi.StringOutput)
}

// The ID of the delegated management subnet for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.
func (o CassandraDatacenterOutput) DelegatedManagementSubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *CassandraDatacenter) pulumi.StringOutput { return v.DelegatedManagementSubnetId }).(pulumi.StringOutput)
}

// Determines the number of p30 disks that are attached to each node.
func (o CassandraDatacenterOutput) DiskCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CassandraDatacenter) pulumi.IntPtrOutput { return v.DiskCount }).(pulumi.IntPtrOutput)
}

// The Disk SKU that is used for this Cassandra Datacenter. Defaults to `P30`.
func (o CassandraDatacenterOutput) DiskSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CassandraDatacenter) pulumi.StringPtrOutput { return v.DiskSku }).(pulumi.StringPtrOutput)
}

// The Azure Region where the Cassandra Datacenter should exist. Changing this forces a new Cassandra Datacenter to be created.
func (o CassandraDatacenterOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *CassandraDatacenter) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The key URI of the customer key to use for the encryption of the Managed Disk.
func (o CassandraDatacenterOutput) ManagedDiskCustomerKeyUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CassandraDatacenter) pulumi.StringPtrOutput { return v.ManagedDiskCustomerKeyUri }).(pulumi.StringPtrOutput)
}

// The name which should be used for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.
func (o CassandraDatacenterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CassandraDatacenter) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The number of nodes the Cassandra Datacenter should have. The number should be equal or greater than `3`. Defaults to `3`.
func (o CassandraDatacenterOutput) NodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CassandraDatacenter) pulumi.IntPtrOutput { return v.NodeCount }).(pulumi.IntPtrOutput)
}

// Determines the selected sku.
//
// > **NOTE:** In v4.0 of the provider the `skuName` will have a default value of `Standard_E16s_v5`.
func (o CassandraDatacenterOutput) SkuName() pulumi.StringOutput {
	return o.ApplyT(func(v *CassandraDatacenter) pulumi.StringOutput { return v.SkuName }).(pulumi.StringOutput)
}

type CassandraDatacenterArrayOutput struct{ *pulumi.OutputState }

func (CassandraDatacenterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CassandraDatacenter)(nil)).Elem()
}

func (o CassandraDatacenterArrayOutput) ToCassandraDatacenterArrayOutput() CassandraDatacenterArrayOutput {
	return o
}

func (o CassandraDatacenterArrayOutput) ToCassandraDatacenterArrayOutputWithContext(ctx context.Context) CassandraDatacenterArrayOutput {
	return o
}

func (o CassandraDatacenterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*CassandraDatacenter] {
	return pulumix.Output[[]*CassandraDatacenter]{
		OutputState: o.OutputState,
	}
}

func (o CassandraDatacenterArrayOutput) Index(i pulumi.IntInput) CassandraDatacenterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CassandraDatacenter {
		return vs[0].([]*CassandraDatacenter)[vs[1].(int)]
	}).(CassandraDatacenterOutput)
}

type CassandraDatacenterMapOutput struct{ *pulumi.OutputState }

func (CassandraDatacenterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CassandraDatacenter)(nil)).Elem()
}

func (o CassandraDatacenterMapOutput) ToCassandraDatacenterMapOutput() CassandraDatacenterMapOutput {
	return o
}

func (o CassandraDatacenterMapOutput) ToCassandraDatacenterMapOutputWithContext(ctx context.Context) CassandraDatacenterMapOutput {
	return o
}

func (o CassandraDatacenterMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*CassandraDatacenter] {
	return pulumix.Output[map[string]*CassandraDatacenter]{
		OutputState: o.OutputState,
	}
}

func (o CassandraDatacenterMapOutput) MapIndex(k pulumi.StringInput) CassandraDatacenterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CassandraDatacenter {
		return vs[0].(map[string]*CassandraDatacenter)[vs[1].(string)]
	}).(CassandraDatacenterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CassandraDatacenterInput)(nil)).Elem(), &CassandraDatacenter{})
	pulumi.RegisterInputType(reflect.TypeOf((*CassandraDatacenterArrayInput)(nil)).Elem(), CassandraDatacenterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CassandraDatacenterMapInput)(nil)).Elem(), CassandraDatacenterMap{})
	pulumi.RegisterOutputType(CassandraDatacenterOutput{})
	pulumi.RegisterOutputType(CassandraDatacenterArrayOutput{})
	pulumi.RegisterOutputType(CassandraDatacenterMapOutput{})
}
