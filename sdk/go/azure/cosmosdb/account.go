// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cosmosdb

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a new CosmosDB (formally DocumentDB) Account.
type Account struct {
	s *pulumi.ResourceState
}

// NewAccount registers a new resource with the given unique name, arguments, and options.
func NewAccount(ctx *pulumi.Context,
	name string, args *AccountArgs, opts ...pulumi.ResourceOpt) (*Account, error) {
	if args == nil || args.ConsistencyPolicy == nil {
		return nil, errors.New("missing required argument 'ConsistencyPolicy'")
	}
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	if args == nil || args.OfferType == nil {
		return nil, errors.New("missing required argument 'OfferType'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["consistencyPolicy"] = nil
		inputs["enableAutomaticFailover"] = nil
		inputs["failoverPolicies"] = nil
		inputs["geoLocations"] = nil
		inputs["ipRangeFilter"] = nil
		inputs["kind"] = nil
		inputs["location"] = nil
		inputs["name"] = nil
		inputs["offerType"] = nil
		inputs["resourceGroupName"] = nil
		inputs["tags"] = nil
	} else {
		inputs["consistencyPolicy"] = args.ConsistencyPolicy
		inputs["enableAutomaticFailover"] = args.EnableAutomaticFailover
		inputs["failoverPolicies"] = args.FailoverPolicies
		inputs["geoLocations"] = args.GeoLocations
		inputs["ipRangeFilter"] = args.IpRangeFilter
		inputs["kind"] = args.Kind
		inputs["location"] = args.Location
		inputs["name"] = args.Name
		inputs["offerType"] = args.OfferType
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["tags"] = args.Tags
	}
	inputs["connectionStrings"] = nil
	inputs["endpoint"] = nil
	inputs["primaryMasterKey"] = nil
	inputs["primaryReadonlyMasterKey"] = nil
	inputs["readEndpoints"] = nil
	inputs["secondaryMasterKey"] = nil
	inputs["secondaryReadonlyMasterKey"] = nil
	inputs["writeEndpoints"] = nil
	s, err := ctx.RegisterResource("azure:cosmosdb/account:Account", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Account{s: s}, nil
}

// GetAccount gets an existing Account resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccount(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AccountState, opts ...pulumi.ResourceOpt) (*Account, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["connectionStrings"] = state.ConnectionStrings
		inputs["consistencyPolicy"] = state.ConsistencyPolicy
		inputs["enableAutomaticFailover"] = state.EnableAutomaticFailover
		inputs["endpoint"] = state.Endpoint
		inputs["failoverPolicies"] = state.FailoverPolicies
		inputs["geoLocations"] = state.GeoLocations
		inputs["ipRangeFilter"] = state.IpRangeFilter
		inputs["kind"] = state.Kind
		inputs["location"] = state.Location
		inputs["name"] = state.Name
		inputs["offerType"] = state.OfferType
		inputs["primaryMasterKey"] = state.PrimaryMasterKey
		inputs["primaryReadonlyMasterKey"] = state.PrimaryReadonlyMasterKey
		inputs["readEndpoints"] = state.ReadEndpoints
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["secondaryMasterKey"] = state.SecondaryMasterKey
		inputs["secondaryReadonlyMasterKey"] = state.SecondaryReadonlyMasterKey
		inputs["tags"] = state.Tags
		inputs["writeEndpoints"] = state.WriteEndpoints
	}
	s, err := ctx.ReadResource("azure:cosmosdb/account:Account", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Account{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Account) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Account) ID() *pulumi.IDOutput {
	return r.s.ID
}

// A list of connection strings available for this CosmosDB account. If the kind is `GlobalDocumentDB`, this will be empty.
func (r *Account) ConnectionStrings() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["connectionStrings"])
}

// Specifies a `consistency_policy` resource, used to define the consistency policy for this CosmosDB account.
func (r *Account) ConsistencyPolicy() *pulumi.Output {
	return r.s.State["consistencyPolicy"]
}

// Enable automatic fail over for this Cosmos DB account.
func (r *Account) EnableAutomaticFailover() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enableAutomaticFailover"])
}

// The endpoint used to connect to the CosmosDB account.
func (r *Account) Endpoint() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["endpoint"])
}

func (r *Account) FailoverPolicies() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["failoverPolicies"])
}

// Specifies a `geo_location` resource, used to define where data should be replicated with the `failover_priority` 0 specifying the primary location.
func (r *Account) GeoLocations() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["geoLocations"])
}

// CosmosDB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IP's for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.
func (r *Account) IpRangeFilter() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipRangeFilter"])
}

// Specifies the Kind of CosmosDB to create - possible values are `GlobalDocumentDB` and `MongoDB`. Defaults to `GlobalDocumentDB`. Changing this forces a new resource to be created.
func (r *Account) Kind() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["kind"])
}

// The name of the Azure region to host replicated data.
func (r *Account) Location() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["location"])
}

// Specifies the name of the CosmosDB Account. Changing this forces a new resource to be created.
func (r *Account) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Specifies the Offer Type to use for this CosmosDB Account - currently this can only be set to `Standard`.
func (r *Account) OfferType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["offerType"])
}

// The Primary master key for the CosmosDB Account.
func (r *Account) PrimaryMasterKey() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["primaryMasterKey"])
}

// The Primary read-only master Key for the CosmosDB Account.
func (r *Account) PrimaryReadonlyMasterKey() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["primaryReadonlyMasterKey"])
}

// A list of read endpoints available for this CosmosDB account.
func (r *Account) ReadEndpoints() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["readEndpoints"])
}

// The name of the resource group in which the CosmosDB Account is created. Changing this forces a new resource to be created.
func (r *Account) ResourceGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// The Secondary master key for the CosmosDB Account.
func (r *Account) SecondaryMasterKey() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["secondaryMasterKey"])
}

// The Secondary read-only master key for the CosmosDB Account.
func (r *Account) SecondaryReadonlyMasterKey() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["secondaryReadonlyMasterKey"])
}

// A mapping of tags to assign to the resource.
func (r *Account) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// A list of write endpoints available for this CosmosDB account.
func (r *Account) WriteEndpoints() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["writeEndpoints"])
}

// Input properties used for looking up and filtering Account resources.
type AccountState struct {
	// A list of connection strings available for this CosmosDB account. If the kind is `GlobalDocumentDB`, this will be empty.
	ConnectionStrings interface{}
	// Specifies a `consistency_policy` resource, used to define the consistency policy for this CosmosDB account.
	ConsistencyPolicy interface{}
	// Enable automatic fail over for this Cosmos DB account.
	EnableAutomaticFailover interface{}
	// The endpoint used to connect to the CosmosDB account.
	Endpoint interface{}
	FailoverPolicies interface{}
	// Specifies a `geo_location` resource, used to define where data should be replicated with the `failover_priority` 0 specifying the primary location.
	GeoLocations interface{}
	// CosmosDB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IP's for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.
	IpRangeFilter interface{}
	// Specifies the Kind of CosmosDB to create - possible values are `GlobalDocumentDB` and `MongoDB`. Defaults to `GlobalDocumentDB`. Changing this forces a new resource to be created.
	Kind interface{}
	// The name of the Azure region to host replicated data.
	Location interface{}
	// Specifies the name of the CosmosDB Account. Changing this forces a new resource to be created.
	Name interface{}
	// Specifies the Offer Type to use for this CosmosDB Account - currently this can only be set to `Standard`.
	OfferType interface{}
	// The Primary master key for the CosmosDB Account.
	PrimaryMasterKey interface{}
	// The Primary read-only master Key for the CosmosDB Account.
	PrimaryReadonlyMasterKey interface{}
	// A list of read endpoints available for this CosmosDB account.
	ReadEndpoints interface{}
	// The name of the resource group in which the CosmosDB Account is created. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// The Secondary master key for the CosmosDB Account.
	SecondaryMasterKey interface{}
	// The Secondary read-only master key for the CosmosDB Account.
	SecondaryReadonlyMasterKey interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// A list of write endpoints available for this CosmosDB account.
	WriteEndpoints interface{}
}

// The set of arguments for constructing a Account resource.
type AccountArgs struct {
	// Specifies a `consistency_policy` resource, used to define the consistency policy for this CosmosDB account.
	ConsistencyPolicy interface{}
	// Enable automatic fail over for this Cosmos DB account.
	EnableAutomaticFailover interface{}
	FailoverPolicies interface{}
	// Specifies a `geo_location` resource, used to define where data should be replicated with the `failover_priority` 0 specifying the primary location.
	GeoLocations interface{}
	// CosmosDB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IP's for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.
	IpRangeFilter interface{}
	// Specifies the Kind of CosmosDB to create - possible values are `GlobalDocumentDB` and `MongoDB`. Defaults to `GlobalDocumentDB`. Changing this forces a new resource to be created.
	Kind interface{}
	// The name of the Azure region to host replicated data.
	Location interface{}
	// Specifies the name of the CosmosDB Account. Changing this forces a new resource to be created.
	Name interface{}
	// Specifies the Offer Type to use for this CosmosDB Account - currently this can only be set to `Standard`.
	OfferType interface{}
	// The name of the resource group in which the CosmosDB Account is created. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
}
