// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package cosmosdb

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Mongo Collection within a Cosmos DB Account.
// 
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/cosmosdb_mongo_collection.html.markdown.
type MongoCollection struct {
	pulumi.CustomResourceState

	AccountName pulumi.StringOutput `pulumi:"accountName"`
	// The name of the Cosmos DB Mongo Database in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`
	// The default Time To Live in seconds. If the value is `-1` items are not automatically expired.
	DefaultTtlSeconds pulumi.IntPtrOutput `pulumi:"defaultTtlSeconds"`
	// One or more `indexes` blocks as defined below.
	Indexes MongoCollectionIndexArrayOutput `pulumi:"indexes"`
	// Specifies the name of the Cosmos DB Mongo Collection. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the resource group in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The name of the key to partition on for sharding. There must not be any other unique index keys.
	ShardKey pulumi.StringPtrOutput `pulumi:"shardKey"`
	Throughput pulumi.IntOutput `pulumi:"throughput"`
}

// NewMongoCollection registers a new resource with the given unique name, arguments, and options.
func NewMongoCollection(ctx *pulumi.Context,
	name string, args *MongoCollectionArgs, opts ...pulumi.ResourceOption) (*MongoCollection, error) {
	if args == nil || args.AccountName == nil {
		return nil, errors.New("missing required argument 'AccountName'")
	}
	if args == nil || args.DatabaseName == nil {
		return nil, errors.New("missing required argument 'DatabaseName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &MongoCollectionArgs{}
	}
	var resource MongoCollection
	err := ctx.RegisterResource("azure:cosmosdb/mongoCollection:MongoCollection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMongoCollection gets an existing MongoCollection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMongoCollection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MongoCollectionState, opts ...pulumi.ResourceOption) (*MongoCollection, error) {
	var resource MongoCollection
	err := ctx.ReadResource("azure:cosmosdb/mongoCollection:MongoCollection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MongoCollection resources.
type mongoCollectionState struct {
	AccountName *string `pulumi:"accountName"`
	// The name of the Cosmos DB Mongo Database in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
	DatabaseName *string `pulumi:"databaseName"`
	// The default Time To Live in seconds. If the value is `-1` items are not automatically expired.
	DefaultTtlSeconds *int `pulumi:"defaultTtlSeconds"`
	// One or more `indexes` blocks as defined below.
	Indexes []MongoCollectionIndex `pulumi:"indexes"`
	// Specifies the name of the Cosmos DB Mongo Collection. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The name of the key to partition on for sharding. There must not be any other unique index keys.
	ShardKey *string `pulumi:"shardKey"`
	Throughput *int `pulumi:"throughput"`
}

type MongoCollectionState struct {
	AccountName pulumi.StringPtrInput
	// The name of the Cosmos DB Mongo Database in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
	DatabaseName pulumi.StringPtrInput
	// The default Time To Live in seconds. If the value is `-1` items are not automatically expired.
	DefaultTtlSeconds pulumi.IntPtrInput
	// One or more `indexes` blocks as defined below.
	Indexes MongoCollectionIndexArrayInput
	// Specifies the name of the Cosmos DB Mongo Collection. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The name of the key to partition on for sharding. There must not be any other unique index keys.
	ShardKey pulumi.StringPtrInput
	Throughput pulumi.IntPtrInput
}

func (MongoCollectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*mongoCollectionState)(nil)).Elem()
}

type mongoCollectionArgs struct {
	AccountName string `pulumi:"accountName"`
	// The name of the Cosmos DB Mongo Database in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
	DatabaseName string `pulumi:"databaseName"`
	// The default Time To Live in seconds. If the value is `-1` items are not automatically expired.
	DefaultTtlSeconds *int `pulumi:"defaultTtlSeconds"`
	// One or more `indexes` blocks as defined below.
	Indexes []MongoCollectionIndex `pulumi:"indexes"`
	// Specifies the name of the Cosmos DB Mongo Collection. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the key to partition on for sharding. There must not be any other unique index keys.
	ShardKey *string `pulumi:"shardKey"`
	Throughput *int `pulumi:"throughput"`
}

// The set of arguments for constructing a MongoCollection resource.
type MongoCollectionArgs struct {
	AccountName pulumi.StringInput
	// The name of the Cosmos DB Mongo Database in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
	DatabaseName pulumi.StringInput
	// The default Time To Live in seconds. If the value is `-1` items are not automatically expired.
	DefaultTtlSeconds pulumi.IntPtrInput
	// One or more `indexes` blocks as defined below.
	Indexes MongoCollectionIndexArrayInput
	// Specifies the name of the Cosmos DB Mongo Collection. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// The name of the key to partition on for sharding. There must not be any other unique index keys.
	ShardKey pulumi.StringPtrInput
	Throughput pulumi.IntPtrInput
}

func (MongoCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mongoCollectionArgs)(nil)).Elem()
}

