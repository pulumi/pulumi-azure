// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cosmosdb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a MongoDB Cluster using vCore Architecture.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/cosmosdb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-rg"),
//				Location: pulumi.String("East US"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cosmosdb.NewMongoCluster(ctx, "example", &cosmosdb.MongoClusterArgs{
//				Name:                  pulumi.String("example-mc"),
//				ResourceGroupName:     example.Name,
//				Location:              example.Location,
//				AdministratorUsername: pulumi.String("adminTerraform"),
//				AdministratorPassword: pulumi.String("QAZwsx123"),
//				ShardCount:            pulumi.Int(1),
//				ComputeTier:           pulumi.String("Free"),
//				HighAvailabilityMode:  pulumi.String("Disabled"),
//				StorageSizeInGb:       pulumi.Int(32),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Preview Feature GeoReplicas)
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/cosmosdb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-rg"),
//				Location: pulumi.String("East US"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleMongoCluster, err := cosmosdb.NewMongoCluster(ctx, "example", &cosmosdb.MongoClusterArgs{
//				Name:                  pulumi.String("example-mc"),
//				ResourceGroupName:     example.Name,
//				Location:              example.Location,
//				AdministratorUsername: pulumi.String("adminTerraform"),
//				AdministratorPassword: pulumi.String("QAZwsx123"),
//				ShardCount:            pulumi.Int(1),
//				ComputeTier:           pulumi.String("M30"),
//				HighAvailabilityMode:  pulumi.String("ZoneRedundantPreferred"),
//				StorageSizeInGb:       pulumi.Int(64),
//				PreviewFeatures: pulumi.StringArray{
//					pulumi.String("GeoReplicas"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cosmosdb.NewMongoCluster(ctx, "example_geo_replica", &cosmosdb.MongoClusterArgs{
//				Name:              pulumi.String("example-mc-geo"),
//				ResourceGroupName: example.Name,
//				Location:          pulumi.String("Central US"),
//				SourceServerId:    exampleMongoCluster.ID(),
//				SourceLocation:    exampleMongoCluster.Location,
//				CreateMode:        pulumi.String("GeoReplica"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This resource uses the following Azure API Providers:
//
// * `Microsoft.DocumentDB`: 2024-07-01
//
// ## Import
//
// MongoDB Clusters can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:cosmosdb/mongoCluster:MongoCluster example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DocumentDB/mongoClusters/myMongoCluster
// ```
type MongoCluster struct {
	pulumi.CustomResourceState

	// The Password associated with the `administratorUsername` for the MongoDB Cluster.
	AdministratorPassword pulumi.StringPtrOutput `pulumi:"administratorPassword"`
	// The administrator username of the MongoDB Cluster. Changing this forces a new resource to be created.
	AdministratorUsername pulumi.StringPtrOutput `pulumi:"administratorUsername"`
	// The compute tier to assign to the MongoDB Cluster. Possible values are `Free`, `M10`, `M20`, `M25`, `M30`, `M40`, `M50`, `M60`, `M80`, and `M200`.
	ComputeTier pulumi.StringPtrOutput `pulumi:"computeTier"`
	// The list of `connectionStrings` blocks as defined below.
	ConnectionStrings MongoClusterConnectionStringArrayOutput `pulumi:"connectionStrings"`
	// The creation mode for the MongoDB Cluster. Possibles values are `Default` and `GeoReplica`. Defaults to `Default`. Changing this forces a new resource to be created.
	CreateMode pulumi.StringPtrOutput `pulumi:"createMode"`
	// The high availability mode for the MongoDB Cluster. Possibles values are `Disabled` and `ZoneRedundantPreferred`.
	HighAvailabilityMode pulumi.StringPtrOutput `pulumi:"highAvailabilityMode"`
	// The supported Azure location where the MongoDB Cluster exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name which should be used for the MongoDB Cluster. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The preview features that can be enabled on the MongoDB Cluster. Changing this forces a new resource to be created.
	PreviewFeatures pulumi.StringArrayOutput `pulumi:"previewFeatures"`
	// The Public Network Access setting for the MongoDB Cluster. Possibles values are `Disabled` and `Enabled`. Defaults to `Enabled`.
	PublicNetworkAccess pulumi.StringPtrOutput `pulumi:"publicNetworkAccess"`
	// The name of the resource group in which to create the MongoDB Cluster. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The Number of shards to provision on the MongoDB Cluster. Changing this forces a new resource to be created.
	ShardCount pulumi.IntPtrOutput `pulumi:"shardCount"`
	// The location of the source MongoDB Cluster. Changing this forces a new resource to be created.
	SourceLocation pulumi.StringPtrOutput `pulumi:"sourceLocation"`
	// The ID of the replication source MongoDB Cluster. Changing this forces a new resource to be created.
	SourceServerId pulumi.StringPtrOutput `pulumi:"sourceServerId"`
	// The size of the data disk space for the MongoDB Cluster.
	StorageSizeInGb pulumi.IntPtrOutput `pulumi:"storageSizeInGb"`
	// A mapping of tags to assign to the MongoDB Cluster.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The version for the MongoDB Cluster. Possibles values are `5.0`, `6.0` and `7.0`.
	Version pulumi.StringPtrOutput `pulumi:"version"`
}

// NewMongoCluster registers a new resource with the given unique name, arguments, and options.
func NewMongoCluster(ctx *pulumi.Context,
	name string, args *MongoClusterArgs, opts ...pulumi.ResourceOption) (*MongoCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.AdministratorPassword != nil {
		args.AdministratorPassword = pulumi.ToSecret(args.AdministratorPassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"administratorPassword",
		"connectionStrings",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MongoCluster
	err := ctx.RegisterResource("azure:cosmosdb/mongoCluster:MongoCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMongoCluster gets an existing MongoCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMongoCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MongoClusterState, opts ...pulumi.ResourceOption) (*MongoCluster, error) {
	var resource MongoCluster
	err := ctx.ReadResource("azure:cosmosdb/mongoCluster:MongoCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MongoCluster resources.
type mongoClusterState struct {
	// The Password associated with the `administratorUsername` for the MongoDB Cluster.
	AdministratorPassword *string `pulumi:"administratorPassword"`
	// The administrator username of the MongoDB Cluster. Changing this forces a new resource to be created.
	AdministratorUsername *string `pulumi:"administratorUsername"`
	// The compute tier to assign to the MongoDB Cluster. Possible values are `Free`, `M10`, `M20`, `M25`, `M30`, `M40`, `M50`, `M60`, `M80`, and `M200`.
	ComputeTier *string `pulumi:"computeTier"`
	// The list of `connectionStrings` blocks as defined below.
	ConnectionStrings []MongoClusterConnectionString `pulumi:"connectionStrings"`
	// The creation mode for the MongoDB Cluster. Possibles values are `Default` and `GeoReplica`. Defaults to `Default`. Changing this forces a new resource to be created.
	CreateMode *string `pulumi:"createMode"`
	// The high availability mode for the MongoDB Cluster. Possibles values are `Disabled` and `ZoneRedundantPreferred`.
	HighAvailabilityMode *string `pulumi:"highAvailabilityMode"`
	// The supported Azure location where the MongoDB Cluster exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for the MongoDB Cluster. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The preview features that can be enabled on the MongoDB Cluster. Changing this forces a new resource to be created.
	PreviewFeatures []string `pulumi:"previewFeatures"`
	// The Public Network Access setting for the MongoDB Cluster. Possibles values are `Disabled` and `Enabled`. Defaults to `Enabled`.
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
	// The name of the resource group in which to create the MongoDB Cluster. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The Number of shards to provision on the MongoDB Cluster. Changing this forces a new resource to be created.
	ShardCount *int `pulumi:"shardCount"`
	// The location of the source MongoDB Cluster. Changing this forces a new resource to be created.
	SourceLocation *string `pulumi:"sourceLocation"`
	// The ID of the replication source MongoDB Cluster. Changing this forces a new resource to be created.
	SourceServerId *string `pulumi:"sourceServerId"`
	// The size of the data disk space for the MongoDB Cluster.
	StorageSizeInGb *int `pulumi:"storageSizeInGb"`
	// A mapping of tags to assign to the MongoDB Cluster.
	Tags map[string]string `pulumi:"tags"`
	// The version for the MongoDB Cluster. Possibles values are `5.0`, `6.0` and `7.0`.
	Version *string `pulumi:"version"`
}

type MongoClusterState struct {
	// The Password associated with the `administratorUsername` for the MongoDB Cluster.
	AdministratorPassword pulumi.StringPtrInput
	// The administrator username of the MongoDB Cluster. Changing this forces a new resource to be created.
	AdministratorUsername pulumi.StringPtrInput
	// The compute tier to assign to the MongoDB Cluster. Possible values are `Free`, `M10`, `M20`, `M25`, `M30`, `M40`, `M50`, `M60`, `M80`, and `M200`.
	ComputeTier pulumi.StringPtrInput
	// The list of `connectionStrings` blocks as defined below.
	ConnectionStrings MongoClusterConnectionStringArrayInput
	// The creation mode for the MongoDB Cluster. Possibles values are `Default` and `GeoReplica`. Defaults to `Default`. Changing this forces a new resource to be created.
	CreateMode pulumi.StringPtrInput
	// The high availability mode for the MongoDB Cluster. Possibles values are `Disabled` and `ZoneRedundantPreferred`.
	HighAvailabilityMode pulumi.StringPtrInput
	// The supported Azure location where the MongoDB Cluster exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for the MongoDB Cluster. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The preview features that can be enabled on the MongoDB Cluster. Changing this forces a new resource to be created.
	PreviewFeatures pulumi.StringArrayInput
	// The Public Network Access setting for the MongoDB Cluster. Possibles values are `Disabled` and `Enabled`. Defaults to `Enabled`.
	PublicNetworkAccess pulumi.StringPtrInput
	// The name of the resource group in which to create the MongoDB Cluster. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The Number of shards to provision on the MongoDB Cluster. Changing this forces a new resource to be created.
	ShardCount pulumi.IntPtrInput
	// The location of the source MongoDB Cluster. Changing this forces a new resource to be created.
	SourceLocation pulumi.StringPtrInput
	// The ID of the replication source MongoDB Cluster. Changing this forces a new resource to be created.
	SourceServerId pulumi.StringPtrInput
	// The size of the data disk space for the MongoDB Cluster.
	StorageSizeInGb pulumi.IntPtrInput
	// A mapping of tags to assign to the MongoDB Cluster.
	Tags pulumi.StringMapInput
	// The version for the MongoDB Cluster. Possibles values are `5.0`, `6.0` and `7.0`.
	Version pulumi.StringPtrInput
}

func (MongoClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*mongoClusterState)(nil)).Elem()
}

type mongoClusterArgs struct {
	// The Password associated with the `administratorUsername` for the MongoDB Cluster.
	AdministratorPassword *string `pulumi:"administratorPassword"`
	// The administrator username of the MongoDB Cluster. Changing this forces a new resource to be created.
	AdministratorUsername *string `pulumi:"administratorUsername"`
	// The compute tier to assign to the MongoDB Cluster. Possible values are `Free`, `M10`, `M20`, `M25`, `M30`, `M40`, `M50`, `M60`, `M80`, and `M200`.
	ComputeTier *string `pulumi:"computeTier"`
	// The creation mode for the MongoDB Cluster. Possibles values are `Default` and `GeoReplica`. Defaults to `Default`. Changing this forces a new resource to be created.
	CreateMode *string `pulumi:"createMode"`
	// The high availability mode for the MongoDB Cluster. Possibles values are `Disabled` and `ZoneRedundantPreferred`.
	HighAvailabilityMode *string `pulumi:"highAvailabilityMode"`
	// The supported Azure location where the MongoDB Cluster exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for the MongoDB Cluster. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The preview features that can be enabled on the MongoDB Cluster. Changing this forces a new resource to be created.
	PreviewFeatures []string `pulumi:"previewFeatures"`
	// The Public Network Access setting for the MongoDB Cluster. Possibles values are `Disabled` and `Enabled`. Defaults to `Enabled`.
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
	// The name of the resource group in which to create the MongoDB Cluster. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The Number of shards to provision on the MongoDB Cluster. Changing this forces a new resource to be created.
	ShardCount *int `pulumi:"shardCount"`
	// The location of the source MongoDB Cluster. Changing this forces a new resource to be created.
	SourceLocation *string `pulumi:"sourceLocation"`
	// The ID of the replication source MongoDB Cluster. Changing this forces a new resource to be created.
	SourceServerId *string `pulumi:"sourceServerId"`
	// The size of the data disk space for the MongoDB Cluster.
	StorageSizeInGb *int `pulumi:"storageSizeInGb"`
	// A mapping of tags to assign to the MongoDB Cluster.
	Tags map[string]string `pulumi:"tags"`
	// The version for the MongoDB Cluster. Possibles values are `5.0`, `6.0` and `7.0`.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a MongoCluster resource.
type MongoClusterArgs struct {
	// The Password associated with the `administratorUsername` for the MongoDB Cluster.
	AdministratorPassword pulumi.StringPtrInput
	// The administrator username of the MongoDB Cluster. Changing this forces a new resource to be created.
	AdministratorUsername pulumi.StringPtrInput
	// The compute tier to assign to the MongoDB Cluster. Possible values are `Free`, `M10`, `M20`, `M25`, `M30`, `M40`, `M50`, `M60`, `M80`, and `M200`.
	ComputeTier pulumi.StringPtrInput
	// The creation mode for the MongoDB Cluster. Possibles values are `Default` and `GeoReplica`. Defaults to `Default`. Changing this forces a new resource to be created.
	CreateMode pulumi.StringPtrInput
	// The high availability mode for the MongoDB Cluster. Possibles values are `Disabled` and `ZoneRedundantPreferred`.
	HighAvailabilityMode pulumi.StringPtrInput
	// The supported Azure location where the MongoDB Cluster exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for the MongoDB Cluster. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The preview features that can be enabled on the MongoDB Cluster. Changing this forces a new resource to be created.
	PreviewFeatures pulumi.StringArrayInput
	// The Public Network Access setting for the MongoDB Cluster. Possibles values are `Disabled` and `Enabled`. Defaults to `Enabled`.
	PublicNetworkAccess pulumi.StringPtrInput
	// The name of the resource group in which to create the MongoDB Cluster. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// The Number of shards to provision on the MongoDB Cluster. Changing this forces a new resource to be created.
	ShardCount pulumi.IntPtrInput
	// The location of the source MongoDB Cluster. Changing this forces a new resource to be created.
	SourceLocation pulumi.StringPtrInput
	// The ID of the replication source MongoDB Cluster. Changing this forces a new resource to be created.
	SourceServerId pulumi.StringPtrInput
	// The size of the data disk space for the MongoDB Cluster.
	StorageSizeInGb pulumi.IntPtrInput
	// A mapping of tags to assign to the MongoDB Cluster.
	Tags pulumi.StringMapInput
	// The version for the MongoDB Cluster. Possibles values are `5.0`, `6.0` and `7.0`.
	Version pulumi.StringPtrInput
}

func (MongoClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mongoClusterArgs)(nil)).Elem()
}

type MongoClusterInput interface {
	pulumi.Input

	ToMongoClusterOutput() MongoClusterOutput
	ToMongoClusterOutputWithContext(ctx context.Context) MongoClusterOutput
}

func (*MongoCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoCluster)(nil)).Elem()
}

func (i *MongoCluster) ToMongoClusterOutput() MongoClusterOutput {
	return i.ToMongoClusterOutputWithContext(context.Background())
}

func (i *MongoCluster) ToMongoClusterOutputWithContext(ctx context.Context) MongoClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoClusterOutput)
}

// MongoClusterArrayInput is an input type that accepts MongoClusterArray and MongoClusterArrayOutput values.
// You can construct a concrete instance of `MongoClusterArrayInput` via:
//
//	MongoClusterArray{ MongoClusterArgs{...} }
type MongoClusterArrayInput interface {
	pulumi.Input

	ToMongoClusterArrayOutput() MongoClusterArrayOutput
	ToMongoClusterArrayOutputWithContext(context.Context) MongoClusterArrayOutput
}

type MongoClusterArray []MongoClusterInput

func (MongoClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MongoCluster)(nil)).Elem()
}

func (i MongoClusterArray) ToMongoClusterArrayOutput() MongoClusterArrayOutput {
	return i.ToMongoClusterArrayOutputWithContext(context.Background())
}

func (i MongoClusterArray) ToMongoClusterArrayOutputWithContext(ctx context.Context) MongoClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoClusterArrayOutput)
}

// MongoClusterMapInput is an input type that accepts MongoClusterMap and MongoClusterMapOutput values.
// You can construct a concrete instance of `MongoClusterMapInput` via:
//
//	MongoClusterMap{ "key": MongoClusterArgs{...} }
type MongoClusterMapInput interface {
	pulumi.Input

	ToMongoClusterMapOutput() MongoClusterMapOutput
	ToMongoClusterMapOutputWithContext(context.Context) MongoClusterMapOutput
}

type MongoClusterMap map[string]MongoClusterInput

func (MongoClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MongoCluster)(nil)).Elem()
}

func (i MongoClusterMap) ToMongoClusterMapOutput() MongoClusterMapOutput {
	return i.ToMongoClusterMapOutputWithContext(context.Background())
}

func (i MongoClusterMap) ToMongoClusterMapOutputWithContext(ctx context.Context) MongoClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoClusterMapOutput)
}

type MongoClusterOutput struct{ *pulumi.OutputState }

func (MongoClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoCluster)(nil)).Elem()
}

func (o MongoClusterOutput) ToMongoClusterOutput() MongoClusterOutput {
	return o
}

func (o MongoClusterOutput) ToMongoClusterOutputWithContext(ctx context.Context) MongoClusterOutput {
	return o
}

// The Password associated with the `administratorUsername` for the MongoDB Cluster.
func (o MongoClusterOutput) AdministratorPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoCluster) pulumi.StringPtrOutput { return v.AdministratorPassword }).(pulumi.StringPtrOutput)
}

// The administrator username of the MongoDB Cluster. Changing this forces a new resource to be created.
func (o MongoClusterOutput) AdministratorUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoCluster) pulumi.StringPtrOutput { return v.AdministratorUsername }).(pulumi.StringPtrOutput)
}

// The compute tier to assign to the MongoDB Cluster. Possible values are `Free`, `M10`, `M20`, `M25`, `M30`, `M40`, `M50`, `M60`, `M80`, and `M200`.
func (o MongoClusterOutput) ComputeTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoCluster) pulumi.StringPtrOutput { return v.ComputeTier }).(pulumi.StringPtrOutput)
}

// The list of `connectionStrings` blocks as defined below.
func (o MongoClusterOutput) ConnectionStrings() MongoClusterConnectionStringArrayOutput {
	return o.ApplyT(func(v *MongoCluster) MongoClusterConnectionStringArrayOutput { return v.ConnectionStrings }).(MongoClusterConnectionStringArrayOutput)
}

// The creation mode for the MongoDB Cluster. Possibles values are `Default` and `GeoReplica`. Defaults to `Default`. Changing this forces a new resource to be created.
func (o MongoClusterOutput) CreateMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoCluster) pulumi.StringPtrOutput { return v.CreateMode }).(pulumi.StringPtrOutput)
}

// The high availability mode for the MongoDB Cluster. Possibles values are `Disabled` and `ZoneRedundantPreferred`.
func (o MongoClusterOutput) HighAvailabilityMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoCluster) pulumi.StringPtrOutput { return v.HighAvailabilityMode }).(pulumi.StringPtrOutput)
}

// The supported Azure location where the MongoDB Cluster exists. Changing this forces a new resource to be created.
func (o MongoClusterOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoCluster) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name which should be used for the MongoDB Cluster. Changing this forces a new resource to be created.
func (o MongoClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The preview features that can be enabled on the MongoDB Cluster. Changing this forces a new resource to be created.
func (o MongoClusterOutput) PreviewFeatures() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MongoCluster) pulumi.StringArrayOutput { return v.PreviewFeatures }).(pulumi.StringArrayOutput)
}

// The Public Network Access setting for the MongoDB Cluster. Possibles values are `Disabled` and `Enabled`. Defaults to `Enabled`.
func (o MongoClusterOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoCluster) pulumi.StringPtrOutput { return v.PublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// The name of the resource group in which to create the MongoDB Cluster. Changing this forces a new resource to be created.
func (o MongoClusterOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoCluster) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The Number of shards to provision on the MongoDB Cluster. Changing this forces a new resource to be created.
func (o MongoClusterOutput) ShardCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongoCluster) pulumi.IntPtrOutput { return v.ShardCount }).(pulumi.IntPtrOutput)
}

// The location of the source MongoDB Cluster. Changing this forces a new resource to be created.
func (o MongoClusterOutput) SourceLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoCluster) pulumi.StringPtrOutput { return v.SourceLocation }).(pulumi.StringPtrOutput)
}

// The ID of the replication source MongoDB Cluster. Changing this forces a new resource to be created.
func (o MongoClusterOutput) SourceServerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoCluster) pulumi.StringPtrOutput { return v.SourceServerId }).(pulumi.StringPtrOutput)
}

// The size of the data disk space for the MongoDB Cluster.
func (o MongoClusterOutput) StorageSizeInGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongoCluster) pulumi.IntPtrOutput { return v.StorageSizeInGb }).(pulumi.IntPtrOutput)
}

// A mapping of tags to assign to the MongoDB Cluster.
func (o MongoClusterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MongoCluster) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The version for the MongoDB Cluster. Possibles values are `5.0`, `6.0` and `7.0`.
func (o MongoClusterOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoCluster) pulumi.StringPtrOutput { return v.Version }).(pulumi.StringPtrOutput)
}

type MongoClusterArrayOutput struct{ *pulumi.OutputState }

func (MongoClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MongoCluster)(nil)).Elem()
}

func (o MongoClusterArrayOutput) ToMongoClusterArrayOutput() MongoClusterArrayOutput {
	return o
}

func (o MongoClusterArrayOutput) ToMongoClusterArrayOutputWithContext(ctx context.Context) MongoClusterArrayOutput {
	return o
}

func (o MongoClusterArrayOutput) Index(i pulumi.IntInput) MongoClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MongoCluster {
		return vs[0].([]*MongoCluster)[vs[1].(int)]
	}).(MongoClusterOutput)
}

type MongoClusterMapOutput struct{ *pulumi.OutputState }

func (MongoClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MongoCluster)(nil)).Elem()
}

func (o MongoClusterMapOutput) ToMongoClusterMapOutput() MongoClusterMapOutput {
	return o
}

func (o MongoClusterMapOutput) ToMongoClusterMapOutputWithContext(ctx context.Context) MongoClusterMapOutput {
	return o
}

func (o MongoClusterMapOutput) MapIndex(k pulumi.StringInput) MongoClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MongoCluster {
		return vs[0].(map[string]*MongoCluster)[vs[1].(string)]
	}).(MongoClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MongoClusterInput)(nil)).Elem(), &MongoCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongoClusterArrayInput)(nil)).Elem(), MongoClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongoClusterMapInput)(nil)).Elem(), MongoClusterMap{})
	pulumi.RegisterOutputType(MongoClusterOutput{})
	pulumi.RegisterOutputType(MongoClusterArrayOutput{})
	pulumi.RegisterOutputType(MongoClusterMapOutput{})
}
