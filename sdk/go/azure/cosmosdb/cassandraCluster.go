// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cosmosdb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Cassandra Cluster.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/authorization"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/cosmosdb"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/network"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West Europe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "exampleVirtualNetwork", &network.VirtualNetworkArgs{
// 			Location:          exampleResourceGroup.Location,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			AddressSpaces: pulumi.StringArray{
// 				pulumi.String("10.0.0.0/16"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleSubnet, err := network.NewSubnet(ctx, "exampleSubnet", &network.SubnetArgs{
// 			ResourceGroupName:  exampleResourceGroup.Name,
// 			VirtualNetworkName: exampleVirtualNetwork.Name,
// 			AddressPrefixes: pulumi.StringArray{
// 				pulumi.String("10.0.1.0/24"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = authorization.NewAssignment(ctx, "exampleAssignment", &authorization.AssignmentArgs{
// 			Scope:              exampleVirtualNetwork.ID(),
// 			RoleDefinitionName: pulumi.String("Network Contributor"),
// 			PrincipalId:        pulumi.String("e5007d2c-4b13-4a74-9b6a-605d99f03501"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = cosmosdb.NewCassandraCluster(ctx, "exampleCassandraCluster", &cosmosdb.CassandraClusterArgs{
// 			ResourceGroupName:           exampleResourceGroup.Name,
// 			Location:                    exampleResourceGroup.Location,
// 			DelegatedManagementSubnetId: exampleSubnet.ID(),
// 			DefaultAdminPassword:        pulumi.String("Password1234"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Cassandra Clusters can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:cosmosdb/cassandraCluster:CassandraCluster example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DocumentDB/cassandraClusters/cluster1
// ```
type CassandraCluster struct {
	pulumi.CustomResourceState

	// The initial admin password for this Cassandra Cluster.
	DefaultAdminPassword pulumi.StringOutput `pulumi:"defaultAdminPassword"`
	// The ID of the delegated management subnet for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
	DelegatedManagementSubnetId pulumi.StringOutput `pulumi:"delegatedManagementSubnetId"`
	// The Azure Region where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name which should be used for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Resource Group where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
}

// NewCassandraCluster registers a new resource with the given unique name, arguments, and options.
func NewCassandraCluster(ctx *pulumi.Context,
	name string, args *CassandraClusterArgs, opts ...pulumi.ResourceOption) (*CassandraCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultAdminPassword == nil {
		return nil, errors.New("invalid value for required argument 'DefaultAdminPassword'")
	}
	if args.DelegatedManagementSubnetId == nil {
		return nil, errors.New("invalid value for required argument 'DelegatedManagementSubnetId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	var resource CassandraCluster
	err := ctx.RegisterResource("azure:cosmosdb/cassandraCluster:CassandraCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCassandraCluster gets an existing CassandraCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCassandraCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CassandraClusterState, opts ...pulumi.ResourceOption) (*CassandraCluster, error) {
	var resource CassandraCluster
	err := ctx.ReadResource("azure:cosmosdb/cassandraCluster:CassandraCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CassandraCluster resources.
type cassandraClusterState struct {
	// The initial admin password for this Cassandra Cluster.
	DefaultAdminPassword *string `pulumi:"defaultAdminPassword"`
	// The ID of the delegated management subnet for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
	DelegatedManagementSubnetId *string `pulumi:"delegatedManagementSubnetId"`
	// The Azure Region where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
}

type CassandraClusterState struct {
	// The initial admin password for this Cassandra Cluster.
	DefaultAdminPassword pulumi.StringPtrInput
	// The ID of the delegated management subnet for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
	DelegatedManagementSubnetId pulumi.StringPtrInput
	// The Azure Region where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
	ResourceGroupName pulumi.StringPtrInput
}

func (CassandraClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*cassandraClusterState)(nil)).Elem()
}

type cassandraClusterArgs struct {
	// The initial admin password for this Cassandra Cluster.
	DefaultAdminPassword string `pulumi:"defaultAdminPassword"`
	// The ID of the delegated management subnet for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
	DelegatedManagementSubnetId string `pulumi:"delegatedManagementSubnetId"`
	// The Azure Region where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a CassandraCluster resource.
type CassandraClusterArgs struct {
	// The initial admin password for this Cassandra Cluster.
	DefaultAdminPassword pulumi.StringInput
	// The ID of the delegated management subnet for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
	DelegatedManagementSubnetId pulumi.StringInput
	// The Azure Region where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
	ResourceGroupName pulumi.StringInput
}

func (CassandraClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cassandraClusterArgs)(nil)).Elem()
}

type CassandraClusterInput interface {
	pulumi.Input

	ToCassandraClusterOutput() CassandraClusterOutput
	ToCassandraClusterOutputWithContext(ctx context.Context) CassandraClusterOutput
}

func (*CassandraCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**CassandraCluster)(nil)).Elem()
}

func (i *CassandraCluster) ToCassandraClusterOutput() CassandraClusterOutput {
	return i.ToCassandraClusterOutputWithContext(context.Background())
}

func (i *CassandraCluster) ToCassandraClusterOutputWithContext(ctx context.Context) CassandraClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraClusterOutput)
}

// CassandraClusterArrayInput is an input type that accepts CassandraClusterArray and CassandraClusterArrayOutput values.
// You can construct a concrete instance of `CassandraClusterArrayInput` via:
//
//          CassandraClusterArray{ CassandraClusterArgs{...} }
type CassandraClusterArrayInput interface {
	pulumi.Input

	ToCassandraClusterArrayOutput() CassandraClusterArrayOutput
	ToCassandraClusterArrayOutputWithContext(context.Context) CassandraClusterArrayOutput
}

type CassandraClusterArray []CassandraClusterInput

func (CassandraClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CassandraCluster)(nil)).Elem()
}

func (i CassandraClusterArray) ToCassandraClusterArrayOutput() CassandraClusterArrayOutput {
	return i.ToCassandraClusterArrayOutputWithContext(context.Background())
}

func (i CassandraClusterArray) ToCassandraClusterArrayOutputWithContext(ctx context.Context) CassandraClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraClusterArrayOutput)
}

// CassandraClusterMapInput is an input type that accepts CassandraClusterMap and CassandraClusterMapOutput values.
// You can construct a concrete instance of `CassandraClusterMapInput` via:
//
//          CassandraClusterMap{ "key": CassandraClusterArgs{...} }
type CassandraClusterMapInput interface {
	pulumi.Input

	ToCassandraClusterMapOutput() CassandraClusterMapOutput
	ToCassandraClusterMapOutputWithContext(context.Context) CassandraClusterMapOutput
}

type CassandraClusterMap map[string]CassandraClusterInput

func (CassandraClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CassandraCluster)(nil)).Elem()
}

func (i CassandraClusterMap) ToCassandraClusterMapOutput() CassandraClusterMapOutput {
	return i.ToCassandraClusterMapOutputWithContext(context.Background())
}

func (i CassandraClusterMap) ToCassandraClusterMapOutputWithContext(ctx context.Context) CassandraClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraClusterMapOutput)
}

type CassandraClusterOutput struct{ *pulumi.OutputState }

func (CassandraClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CassandraCluster)(nil)).Elem()
}

func (o CassandraClusterOutput) ToCassandraClusterOutput() CassandraClusterOutput {
	return o
}

func (o CassandraClusterOutput) ToCassandraClusterOutputWithContext(ctx context.Context) CassandraClusterOutput {
	return o
}

type CassandraClusterArrayOutput struct{ *pulumi.OutputState }

func (CassandraClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CassandraCluster)(nil)).Elem()
}

func (o CassandraClusterArrayOutput) ToCassandraClusterArrayOutput() CassandraClusterArrayOutput {
	return o
}

func (o CassandraClusterArrayOutput) ToCassandraClusterArrayOutputWithContext(ctx context.Context) CassandraClusterArrayOutput {
	return o
}

func (o CassandraClusterArrayOutput) Index(i pulumi.IntInput) CassandraClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CassandraCluster {
		return vs[0].([]*CassandraCluster)[vs[1].(int)]
	}).(CassandraClusterOutput)
}

type CassandraClusterMapOutput struct{ *pulumi.OutputState }

func (CassandraClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CassandraCluster)(nil)).Elem()
}

func (o CassandraClusterMapOutput) ToCassandraClusterMapOutput() CassandraClusterMapOutput {
	return o
}

func (o CassandraClusterMapOutput) ToCassandraClusterMapOutputWithContext(ctx context.Context) CassandraClusterMapOutput {
	return o
}

func (o CassandraClusterMapOutput) MapIndex(k pulumi.StringInput) CassandraClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CassandraCluster {
		return vs[0].(map[string]*CassandraCluster)[vs[1].(string)]
	}).(CassandraClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CassandraClusterInput)(nil)).Elem(), &CassandraCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*CassandraClusterArrayInput)(nil)).Elem(), CassandraClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CassandraClusterMapInput)(nil)).Elem(), CassandraClusterMap{})
	pulumi.RegisterOutputType(CassandraClusterOutput{})
	pulumi.RegisterOutputType(CassandraClusterArrayOutput{})
	pulumi.RegisterOutputType(CassandraClusterMapOutput{})
}
