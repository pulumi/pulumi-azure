// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cosmosdb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Cassandra Cluster.
//
// > **NOTE:** In order for the `Azure Managed Instances for Apache Cassandra` to work properly the product requires the `Azure Cosmos DB` Application ID to be present and working in your tenant. If the `Azure Cosmos DB` Application ID is missing in your environment you will need to have an administrator of your tenant run the following command to add the `Azure Cosmos DB` Application ID to your tenant:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			return nil
//		})
//	}
//
// ```
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/authorization"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/cosmosdb"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "exampleVirtualNetwork", &network.VirtualNetworkArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleSubnet, err := network.NewSubnet(ctx, "exampleSubnet", &network.SubnetArgs{
//				ResourceGroupName:  exampleResourceGroup.Name,
//				VirtualNetworkName: exampleVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.0.1.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleServicePrincipal, err := azuread.LookupServicePrincipal(ctx, &azuread.LookupServicePrincipalArgs{
//				DisplayName: pulumi.StringRef("Azure Cosmos DB"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleAssignment, err := authorization.NewAssignment(ctx, "exampleAssignment", &authorization.AssignmentArgs{
//				Scope:              exampleVirtualNetwork.ID(),
//				RoleDefinitionName: pulumi.String("Network Contributor"),
//				PrincipalId:        *pulumi.String(exampleServicePrincipal.ObjectId),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cosmosdb.NewCassandraCluster(ctx, "exampleCassandraCluster", &cosmosdb.CassandraClusterArgs{
//				ResourceGroupName:           exampleResourceGroup.Name,
//				Location:                    exampleResourceGroup.Location,
//				DelegatedManagementSubnetId: exampleSubnet.ID(),
//				DefaultAdminPassword:        pulumi.String("Password1234"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				exampleAssignment,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Cassandra Clusters can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:cosmosdb/cassandraCluster:CassandraCluster example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DocumentDB/cassandraClusters/cluster1
//
// ```
type CassandraCluster struct {
	pulumi.CustomResourceState

	// The authentication method that is used to authenticate clients. Possible values are `None` and `Cassandra`. Defaults to `Cassandra`.
	AuthenticationMethod pulumi.StringPtrOutput `pulumi:"authenticationMethod"`
	// A list of TLS certificates that is used to authorize client connecting to the Cassandra Cluster.
	ClientCertificatePems pulumi.StringArrayOutput `pulumi:"clientCertificatePems"`
	// The initial admin password for this Cassandra Cluster. Changing this forces a new resource to be created.
	DefaultAdminPassword pulumi.StringOutput `pulumi:"defaultAdminPassword"`
	// The ID of the delegated management subnet for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
	DelegatedManagementSubnetId pulumi.StringOutput `pulumi:"delegatedManagementSubnetId"`
	// A list of TLS certificates that is used to authorize gossip from unmanaged Cassandra Data Center.
	ExternalGossipCertificatePems pulumi.StringArrayOutput `pulumi:"externalGossipCertificatePems"`
	// A list of IP Addresses of the seed nodes in unmanaged the Cassandra Data Center which will be added to the seed node lists of all managed nodes.
	ExternalSeedNodeIpAddresses pulumi.StringArrayOutput `pulumi:"externalSeedNodeIpAddresses"`
	// The number of hours to wait between taking a backup of the Cassandra Cluster. Defaults to `24`.
	//
	// > **Note:** To disable this feature, set this property to `0`.
	HoursBetweenBackups pulumi.IntPtrOutput `pulumi:"hoursBetweenBackups"`
	// An `identity` block as defined below.
	Identity CassandraClusterIdentityPtrOutput `pulumi:"identity"`
	// The Azure Region where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name which should be used for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Is the automatic repair enabled on the Cassandra Cluster? Defaults to `true`.
	RepairEnabled pulumi.BoolPtrOutput `pulumi:"repairEnabled"`
	// The name of the Resource Group where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags assigned to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The version of Cassandra what the Cluster converges to run. Possible values are `3.11` and `4.0`. Defaults to `3.11`. Changing this forces a new Cassandra Cluster to be created.
	Version pulumi.StringPtrOutput `pulumi:"version"`
}

// NewCassandraCluster registers a new resource with the given unique name, arguments, and options.
func NewCassandraCluster(ctx *pulumi.Context,
	name string, args *CassandraClusterArgs, opts ...pulumi.ResourceOption) (*CassandraCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultAdminPassword == nil {
		return nil, errors.New("invalid value for required argument 'DefaultAdminPassword'")
	}
	if args.DelegatedManagementSubnetId == nil {
		return nil, errors.New("invalid value for required argument 'DelegatedManagementSubnetId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.DefaultAdminPassword != nil {
		args.DefaultAdminPassword = pulumi.ToSecret(args.DefaultAdminPassword).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"defaultAdminPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CassandraCluster
	err := ctx.RegisterResource("azure:cosmosdb/cassandraCluster:CassandraCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCassandraCluster gets an existing CassandraCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCassandraCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CassandraClusterState, opts ...pulumi.ResourceOption) (*CassandraCluster, error) {
	var resource CassandraCluster
	err := ctx.ReadResource("azure:cosmosdb/cassandraCluster:CassandraCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CassandraCluster resources.
type cassandraClusterState struct {
	// The authentication method that is used to authenticate clients. Possible values are `None` and `Cassandra`. Defaults to `Cassandra`.
	AuthenticationMethod *string `pulumi:"authenticationMethod"`
	// A list of TLS certificates that is used to authorize client connecting to the Cassandra Cluster.
	ClientCertificatePems []string `pulumi:"clientCertificatePems"`
	// The initial admin password for this Cassandra Cluster. Changing this forces a new resource to be created.
	DefaultAdminPassword *string `pulumi:"defaultAdminPassword"`
	// The ID of the delegated management subnet for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
	DelegatedManagementSubnetId *string `pulumi:"delegatedManagementSubnetId"`
	// A list of TLS certificates that is used to authorize gossip from unmanaged Cassandra Data Center.
	ExternalGossipCertificatePems []string `pulumi:"externalGossipCertificatePems"`
	// A list of IP Addresses of the seed nodes in unmanaged the Cassandra Data Center which will be added to the seed node lists of all managed nodes.
	ExternalSeedNodeIpAddresses []string `pulumi:"externalSeedNodeIpAddresses"`
	// The number of hours to wait between taking a backup of the Cassandra Cluster. Defaults to `24`.
	//
	// > **Note:** To disable this feature, set this property to `0`.
	HoursBetweenBackups *int `pulumi:"hoursBetweenBackups"`
	// An `identity` block as defined below.
	Identity *CassandraClusterIdentity `pulumi:"identity"`
	// The Azure Region where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
	Name *string `pulumi:"name"`
	// Is the automatic repair enabled on the Cassandra Cluster? Defaults to `true`.
	RepairEnabled *bool `pulumi:"repairEnabled"`
	// The name of the Resource Group where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags assigned to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The version of Cassandra what the Cluster converges to run. Possible values are `3.11` and `4.0`. Defaults to `3.11`. Changing this forces a new Cassandra Cluster to be created.
	Version *string `pulumi:"version"`
}

type CassandraClusterState struct {
	// The authentication method that is used to authenticate clients. Possible values are `None` and `Cassandra`. Defaults to `Cassandra`.
	AuthenticationMethod pulumi.StringPtrInput
	// A list of TLS certificates that is used to authorize client connecting to the Cassandra Cluster.
	ClientCertificatePems pulumi.StringArrayInput
	// The initial admin password for this Cassandra Cluster. Changing this forces a new resource to be created.
	DefaultAdminPassword pulumi.StringPtrInput
	// The ID of the delegated management subnet for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
	DelegatedManagementSubnetId pulumi.StringPtrInput
	// A list of TLS certificates that is used to authorize gossip from unmanaged Cassandra Data Center.
	ExternalGossipCertificatePems pulumi.StringArrayInput
	// A list of IP Addresses of the seed nodes in unmanaged the Cassandra Data Center which will be added to the seed node lists of all managed nodes.
	ExternalSeedNodeIpAddresses pulumi.StringArrayInput
	// The number of hours to wait between taking a backup of the Cassandra Cluster. Defaults to `24`.
	//
	// > **Note:** To disable this feature, set this property to `0`.
	HoursBetweenBackups pulumi.IntPtrInput
	// An `identity` block as defined below.
	Identity CassandraClusterIdentityPtrInput
	// The Azure Region where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
	Name pulumi.StringPtrInput
	// Is the automatic repair enabled on the Cassandra Cluster? Defaults to `true`.
	RepairEnabled pulumi.BoolPtrInput
	// The name of the Resource Group where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags assigned to the resource.
	Tags pulumi.StringMapInput
	// The version of Cassandra what the Cluster converges to run. Possible values are `3.11` and `4.0`. Defaults to `3.11`. Changing this forces a new Cassandra Cluster to be created.
	Version pulumi.StringPtrInput
}

func (CassandraClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*cassandraClusterState)(nil)).Elem()
}

type cassandraClusterArgs struct {
	// The authentication method that is used to authenticate clients. Possible values are `None` and `Cassandra`. Defaults to `Cassandra`.
	AuthenticationMethod *string `pulumi:"authenticationMethod"`
	// A list of TLS certificates that is used to authorize client connecting to the Cassandra Cluster.
	ClientCertificatePems []string `pulumi:"clientCertificatePems"`
	// The initial admin password for this Cassandra Cluster. Changing this forces a new resource to be created.
	DefaultAdminPassword string `pulumi:"defaultAdminPassword"`
	// The ID of the delegated management subnet for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
	DelegatedManagementSubnetId string `pulumi:"delegatedManagementSubnetId"`
	// A list of TLS certificates that is used to authorize gossip from unmanaged Cassandra Data Center.
	ExternalGossipCertificatePems []string `pulumi:"externalGossipCertificatePems"`
	// A list of IP Addresses of the seed nodes in unmanaged the Cassandra Data Center which will be added to the seed node lists of all managed nodes.
	ExternalSeedNodeIpAddresses []string `pulumi:"externalSeedNodeIpAddresses"`
	// The number of hours to wait between taking a backup of the Cassandra Cluster. Defaults to `24`.
	//
	// > **Note:** To disable this feature, set this property to `0`.
	HoursBetweenBackups *int `pulumi:"hoursBetweenBackups"`
	// An `identity` block as defined below.
	Identity *CassandraClusterIdentity `pulumi:"identity"`
	// The Azure Region where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
	Name *string `pulumi:"name"`
	// Is the automatic repair enabled on the Cassandra Cluster? Defaults to `true`.
	RepairEnabled *bool `pulumi:"repairEnabled"`
	// The name of the Resource Group where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags assigned to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The version of Cassandra what the Cluster converges to run. Possible values are `3.11` and `4.0`. Defaults to `3.11`. Changing this forces a new Cassandra Cluster to be created.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a CassandraCluster resource.
type CassandraClusterArgs struct {
	// The authentication method that is used to authenticate clients. Possible values are `None` and `Cassandra`. Defaults to `Cassandra`.
	AuthenticationMethod pulumi.StringPtrInput
	// A list of TLS certificates that is used to authorize client connecting to the Cassandra Cluster.
	ClientCertificatePems pulumi.StringArrayInput
	// The initial admin password for this Cassandra Cluster. Changing this forces a new resource to be created.
	DefaultAdminPassword pulumi.StringInput
	// The ID of the delegated management subnet for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
	DelegatedManagementSubnetId pulumi.StringInput
	// A list of TLS certificates that is used to authorize gossip from unmanaged Cassandra Data Center.
	ExternalGossipCertificatePems pulumi.StringArrayInput
	// A list of IP Addresses of the seed nodes in unmanaged the Cassandra Data Center which will be added to the seed node lists of all managed nodes.
	ExternalSeedNodeIpAddresses pulumi.StringArrayInput
	// The number of hours to wait between taking a backup of the Cassandra Cluster. Defaults to `24`.
	//
	// > **Note:** To disable this feature, set this property to `0`.
	HoursBetweenBackups pulumi.IntPtrInput
	// An `identity` block as defined below.
	Identity CassandraClusterIdentityPtrInput
	// The Azure Region where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
	Name pulumi.StringPtrInput
	// Is the automatic repair enabled on the Cassandra Cluster? Defaults to `true`.
	RepairEnabled pulumi.BoolPtrInput
	// The name of the Resource Group where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags assigned to the resource.
	Tags pulumi.StringMapInput
	// The version of Cassandra what the Cluster converges to run. Possible values are `3.11` and `4.0`. Defaults to `3.11`. Changing this forces a new Cassandra Cluster to be created.
	Version pulumi.StringPtrInput
}

func (CassandraClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cassandraClusterArgs)(nil)).Elem()
}

type CassandraClusterInput interface {
	pulumi.Input

	ToCassandraClusterOutput() CassandraClusterOutput
	ToCassandraClusterOutputWithContext(ctx context.Context) CassandraClusterOutput
}

func (*CassandraCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**CassandraCluster)(nil)).Elem()
}

func (i *CassandraCluster) ToCassandraClusterOutput() CassandraClusterOutput {
	return i.ToCassandraClusterOutputWithContext(context.Background())
}

func (i *CassandraCluster) ToCassandraClusterOutputWithContext(ctx context.Context) CassandraClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraClusterOutput)
}

// CassandraClusterArrayInput is an input type that accepts CassandraClusterArray and CassandraClusterArrayOutput values.
// You can construct a concrete instance of `CassandraClusterArrayInput` via:
//
//	CassandraClusterArray{ CassandraClusterArgs{...} }
type CassandraClusterArrayInput interface {
	pulumi.Input

	ToCassandraClusterArrayOutput() CassandraClusterArrayOutput
	ToCassandraClusterArrayOutputWithContext(context.Context) CassandraClusterArrayOutput
}

type CassandraClusterArray []CassandraClusterInput

func (CassandraClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CassandraCluster)(nil)).Elem()
}

func (i CassandraClusterArray) ToCassandraClusterArrayOutput() CassandraClusterArrayOutput {
	return i.ToCassandraClusterArrayOutputWithContext(context.Background())
}

func (i CassandraClusterArray) ToCassandraClusterArrayOutputWithContext(ctx context.Context) CassandraClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraClusterArrayOutput)
}

// CassandraClusterMapInput is an input type that accepts CassandraClusterMap and CassandraClusterMapOutput values.
// You can construct a concrete instance of `CassandraClusterMapInput` via:
//
//	CassandraClusterMap{ "key": CassandraClusterArgs{...} }
type CassandraClusterMapInput interface {
	pulumi.Input

	ToCassandraClusterMapOutput() CassandraClusterMapOutput
	ToCassandraClusterMapOutputWithContext(context.Context) CassandraClusterMapOutput
}

type CassandraClusterMap map[string]CassandraClusterInput

func (CassandraClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CassandraCluster)(nil)).Elem()
}

func (i CassandraClusterMap) ToCassandraClusterMapOutput() CassandraClusterMapOutput {
	return i.ToCassandraClusterMapOutputWithContext(context.Background())
}

func (i CassandraClusterMap) ToCassandraClusterMapOutputWithContext(ctx context.Context) CassandraClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraClusterMapOutput)
}

type CassandraClusterOutput struct{ *pulumi.OutputState }

func (CassandraClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CassandraCluster)(nil)).Elem()
}

func (o CassandraClusterOutput) ToCassandraClusterOutput() CassandraClusterOutput {
	return o
}

func (o CassandraClusterOutput) ToCassandraClusterOutputWithContext(ctx context.Context) CassandraClusterOutput {
	return o
}

// The authentication method that is used to authenticate clients. Possible values are `None` and `Cassandra`. Defaults to `Cassandra`.
func (o CassandraClusterOutput) AuthenticationMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CassandraCluster) pulumi.StringPtrOutput { return v.AuthenticationMethod }).(pulumi.StringPtrOutput)
}

// A list of TLS certificates that is used to authorize client connecting to the Cassandra Cluster.
func (o CassandraClusterOutput) ClientCertificatePems() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CassandraCluster) pulumi.StringArrayOutput { return v.ClientCertificatePems }).(pulumi.StringArrayOutput)
}

// The initial admin password for this Cassandra Cluster. Changing this forces a new resource to be created.
func (o CassandraClusterOutput) DefaultAdminPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *CassandraCluster) pulumi.StringOutput { return v.DefaultAdminPassword }).(pulumi.StringOutput)
}

// The ID of the delegated management subnet for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
func (o CassandraClusterOutput) DelegatedManagementSubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *CassandraCluster) pulumi.StringOutput { return v.DelegatedManagementSubnetId }).(pulumi.StringOutput)
}

// A list of TLS certificates that is used to authorize gossip from unmanaged Cassandra Data Center.
func (o CassandraClusterOutput) ExternalGossipCertificatePems() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CassandraCluster) pulumi.StringArrayOutput { return v.ExternalGossipCertificatePems }).(pulumi.StringArrayOutput)
}

// A list of IP Addresses of the seed nodes in unmanaged the Cassandra Data Center which will be added to the seed node lists of all managed nodes.
func (o CassandraClusterOutput) ExternalSeedNodeIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CassandraCluster) pulumi.StringArrayOutput { return v.ExternalSeedNodeIpAddresses }).(pulumi.StringArrayOutput)
}

// The number of hours to wait between taking a backup of the Cassandra Cluster. Defaults to `24`.
//
// > **Note:** To disable this feature, set this property to `0`.
func (o CassandraClusterOutput) HoursBetweenBackups() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CassandraCluster) pulumi.IntPtrOutput { return v.HoursBetweenBackups }).(pulumi.IntPtrOutput)
}

// An `identity` block as defined below.
func (o CassandraClusterOutput) Identity() CassandraClusterIdentityPtrOutput {
	return o.ApplyT(func(v *CassandraCluster) CassandraClusterIdentityPtrOutput { return v.Identity }).(CassandraClusterIdentityPtrOutput)
}

// The Azure Region where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
func (o CassandraClusterOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *CassandraCluster) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name which should be used for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
func (o CassandraClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CassandraCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Is the automatic repair enabled on the Cassandra Cluster? Defaults to `true`.
func (o CassandraClusterOutput) RepairEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CassandraCluster) pulumi.BoolPtrOutput { return v.RepairEnabled }).(pulumi.BoolPtrOutput)
}

// The name of the Resource Group where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
func (o CassandraClusterOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *CassandraCluster) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags assigned to the resource.
func (o CassandraClusterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CassandraCluster) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The version of Cassandra what the Cluster converges to run. Possible values are `3.11` and `4.0`. Defaults to `3.11`. Changing this forces a new Cassandra Cluster to be created.
func (o CassandraClusterOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CassandraCluster) pulumi.StringPtrOutput { return v.Version }).(pulumi.StringPtrOutput)
}

type CassandraClusterArrayOutput struct{ *pulumi.OutputState }

func (CassandraClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CassandraCluster)(nil)).Elem()
}

func (o CassandraClusterArrayOutput) ToCassandraClusterArrayOutput() CassandraClusterArrayOutput {
	return o
}

func (o CassandraClusterArrayOutput) ToCassandraClusterArrayOutputWithContext(ctx context.Context) CassandraClusterArrayOutput {
	return o
}

func (o CassandraClusterArrayOutput) Index(i pulumi.IntInput) CassandraClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CassandraCluster {
		return vs[0].([]*CassandraCluster)[vs[1].(int)]
	}).(CassandraClusterOutput)
}

type CassandraClusterMapOutput struct{ *pulumi.OutputState }

func (CassandraClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CassandraCluster)(nil)).Elem()
}

func (o CassandraClusterMapOutput) ToCassandraClusterMapOutput() CassandraClusterMapOutput {
	return o
}

func (o CassandraClusterMapOutput) ToCassandraClusterMapOutputWithContext(ctx context.Context) CassandraClusterMapOutput {
	return o
}

func (o CassandraClusterMapOutput) MapIndex(k pulumi.StringInput) CassandraClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CassandraCluster {
		return vs[0].(map[string]*CassandraCluster)[vs[1].(string)]
	}).(CassandraClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CassandraClusterInput)(nil)).Elem(), &CassandraCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*CassandraClusterArrayInput)(nil)).Elem(), CassandraClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CassandraClusterMapInput)(nil)).Elem(), CassandraClusterMap{})
	pulumi.RegisterOutputType(CassandraClusterOutput{})
	pulumi.RegisterOutputType(CassandraClusterArrayOutput{})
	pulumi.RegisterOutputType(CassandraClusterMapOutput{})
}
