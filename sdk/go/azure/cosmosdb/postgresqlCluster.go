// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cosmosdb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Azure Cosmos DB for PostgreSQL Cluster.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/cosmosdb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cosmosdb.NewPostgresqlCluster(ctx, "examplePostgresqlCluster", &cosmosdb.PostgresqlClusterArgs{
//				ResourceGroupName:           exampleResourceGroup.Name,
//				Location:                    exampleResourceGroup.Location,
//				AdministratorLoginPassword:  pulumi.String("H@Sh1CoR3!"),
//				CoordinatorStorageQuotaInMb: pulumi.Int(131072),
//				CoordinatorVcoreCount:       pulumi.Int(2),
//				NodeCount:                   pulumi.Int(0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Azure Cosmos DB for PostgreSQL Clusters can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:cosmosdb/postgresqlCluster:PostgresqlCluster example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/cluster1
//
// ```
type PostgresqlCluster struct {
	pulumi.CustomResourceState

	// The password of the administrator login. This is required when `sourceResourceId` is not set.
	AdministratorLoginPassword pulumi.StringPtrOutput `pulumi:"administratorLoginPassword"`
	// The citus extension version on the Azure Cosmos DB for PostgreSQL Cluster. Possible values are `8.3`, `9.0`, `9.1`, `9.2`, `9.3`, `9.4`, `9.5`, `10.0`, `10.1`, `10.2`, `11.0`, `11.1`, `11.2`, `11.3` and `12.1`.
	CitusVersion pulumi.StringOutput `pulumi:"citusVersion"`
	// Is public access enabled on coordinator? Defaults to `true`.
	CoordinatorPublicIpAccessEnabled pulumi.BoolPtrOutput `pulumi:"coordinatorPublicIpAccessEnabled"`
	// The edition of the coordinator server. Possible values are `BurstableGeneralPurpose`, `BurstableMemoryOptimized`, `GeneralPurpose` and `MemoryOptimized`. Defaults to `GeneralPurpose`.
	CoordinatorServerEdition pulumi.StringPtrOutput `pulumi:"coordinatorServerEdition"`
	// The coordinator storage allowed for the Azure Cosmos DB for PostgreSQL Cluster. Possible values are `32768`, `65536`, `131072`, `262144`, `524288`, `1048576`, `2097152`, `4194304`, `8388608`, `16777216`, and `33554432`.
	//
	// > **NOTE:** More information on [the types of compute resources available for CosmosDB can be found in the product documentation](https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute)
	CoordinatorStorageQuotaInMb pulumi.IntPtrOutput `pulumi:"coordinatorStorageQuotaInMb"`
	// The coordinator vCore count for the Azure Cosmos DB for PostgreSQL Cluster. Possible values are `1`, `2`, `4`, `8`, `16`, `32`, `64` and `96`.
	CoordinatorVcoreCount pulumi.IntPtrOutput `pulumi:"coordinatorVcoreCount"`
	// The earliest restore point time (ISO8601 format) for the Azure Cosmos DB for PostgreSQL Cluster.
	EarliestRestoreTime pulumi.StringOutput `pulumi:"earliestRestoreTime"`
	// Is high availability enabled for the Azure Cosmos DB for PostgreSQL cluster? Defaults to `false`.
	HaEnabled pulumi.BoolPtrOutput `pulumi:"haEnabled"`
	// The Azure Region where the Azure Cosmos DB for PostgreSQL Cluster should exist. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// A `maintenanceWindow` block as defined below.
	MaintenanceWindow PostgresqlClusterMaintenanceWindowPtrOutput `pulumi:"maintenanceWindow"`
	// The name which should be used for this Azure Cosmos DB for PostgreSQL Cluster. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The worker node count of the Azure Cosmos DB for PostgreSQL Cluster. Possible value is between `0` and `20` except `1`.
	NodeCount pulumi.IntOutput `pulumi:"nodeCount"`
	// Is public access enabled on worker nodes. Defaults to `false`.
	NodePublicIpAccessEnabled pulumi.BoolPtrOutput `pulumi:"nodePublicIpAccessEnabled"`
	// The edition of the node server. Possible values are `BurstableGeneralPurpose`, `BurstableMemoryOptimized`, `GeneralPurpose` and `MemoryOptimized`. Defaults to `MemoryOptimized`.
	NodeServerEdition pulumi.StringPtrOutput `pulumi:"nodeServerEdition"`
	// The storage quota in MB on each worker node. Possible values are `32768`, `65536`, `131072`, `262144`, `524288`, `1048576`, `2097152`, `4194304`, `8388608` and `16777216`.
	NodeStorageQuotaInMb pulumi.IntOutput `pulumi:"nodeStorageQuotaInMb"`
	// The vCores count on each worker node. Possible values are `1`, `2`, `4`, `8`, `16`, `32`, `64`, `96` and `104`.
	NodeVcores pulumi.IntOutput `pulumi:"nodeVcores"`
	// The date and time in UTC (ISO8601 format) for the Azure Cosmos DB for PostgreSQL cluster restore. Changing this forces a new resource to be created.
	PointInTimeInUtc pulumi.StringPtrOutput `pulumi:"pointInTimeInUtc"`
	// The preferred primary availability zone for the Azure Cosmos DB for PostgreSQL cluster.
	PreferredPrimaryZone pulumi.StringPtrOutput `pulumi:"preferredPrimaryZone"`
	// The name of the Resource Group where the Azure Cosmos DB for PostgreSQL Cluster should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Is shards on coordinator enabled for the Azure Cosmos DB for PostgreSQL cluster.
	ShardsOnCoordinatorEnabled pulumi.BoolOutput `pulumi:"shardsOnCoordinatorEnabled"`
	// The Azure region of the source Azure Cosmos DB for PostgreSQL cluster for read replica clusters. Changing this forces a new resource to be created.
	SourceLocation pulumi.StringPtrOutput `pulumi:"sourceLocation"`
	// The resource ID of the source Azure Cosmos DB for PostgreSQL cluster for read replica clusters. Changing this forces a new resource to be created.
	SourceResourceId pulumi.StringPtrOutput `pulumi:"sourceResourceId"`
	// The major PostgreSQL version on the Azure Cosmos DB for PostgreSQL cluster. Possible values are `11`, `12`, `13`, `14`, `15` and `16`.
	SqlVersion pulumi.StringOutput `pulumi:"sqlVersion"`
	// A mapping of tags which should be assigned to the Azure Cosmos DB for PostgreSQL Cluster.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewPostgresqlCluster registers a new resource with the given unique name, arguments, and options.
func NewPostgresqlCluster(ctx *pulumi.Context,
	name string, args *PostgresqlClusterArgs, opts ...pulumi.ResourceOption) (*PostgresqlCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NodeCount == nil {
		return nil, errors.New("invalid value for required argument 'NodeCount'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.AdministratorLoginPassword != nil {
		args.AdministratorLoginPassword = pulumi.ToSecret(args.AdministratorLoginPassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"administratorLoginPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PostgresqlCluster
	err := ctx.RegisterResource("azure:cosmosdb/postgresqlCluster:PostgresqlCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPostgresqlCluster gets an existing PostgresqlCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPostgresqlCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PostgresqlClusterState, opts ...pulumi.ResourceOption) (*PostgresqlCluster, error) {
	var resource PostgresqlCluster
	err := ctx.ReadResource("azure:cosmosdb/postgresqlCluster:PostgresqlCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PostgresqlCluster resources.
type postgresqlClusterState struct {
	// The password of the administrator login. This is required when `sourceResourceId` is not set.
	AdministratorLoginPassword *string `pulumi:"administratorLoginPassword"`
	// The citus extension version on the Azure Cosmos DB for PostgreSQL Cluster. Possible values are `8.3`, `9.0`, `9.1`, `9.2`, `9.3`, `9.4`, `9.5`, `10.0`, `10.1`, `10.2`, `11.0`, `11.1`, `11.2`, `11.3` and `12.1`.
	CitusVersion *string `pulumi:"citusVersion"`
	// Is public access enabled on coordinator? Defaults to `true`.
	CoordinatorPublicIpAccessEnabled *bool `pulumi:"coordinatorPublicIpAccessEnabled"`
	// The edition of the coordinator server. Possible values are `BurstableGeneralPurpose`, `BurstableMemoryOptimized`, `GeneralPurpose` and `MemoryOptimized`. Defaults to `GeneralPurpose`.
	CoordinatorServerEdition *string `pulumi:"coordinatorServerEdition"`
	// The coordinator storage allowed for the Azure Cosmos DB for PostgreSQL Cluster. Possible values are `32768`, `65536`, `131072`, `262144`, `524288`, `1048576`, `2097152`, `4194304`, `8388608`, `16777216`, and `33554432`.
	//
	// > **NOTE:** More information on [the types of compute resources available for CosmosDB can be found in the product documentation](https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute)
	CoordinatorStorageQuotaInMb *int `pulumi:"coordinatorStorageQuotaInMb"`
	// The coordinator vCore count for the Azure Cosmos DB for PostgreSQL Cluster. Possible values are `1`, `2`, `4`, `8`, `16`, `32`, `64` and `96`.
	CoordinatorVcoreCount *int `pulumi:"coordinatorVcoreCount"`
	// The earliest restore point time (ISO8601 format) for the Azure Cosmos DB for PostgreSQL Cluster.
	EarliestRestoreTime *string `pulumi:"earliestRestoreTime"`
	// Is high availability enabled for the Azure Cosmos DB for PostgreSQL cluster? Defaults to `false`.
	HaEnabled *bool `pulumi:"haEnabled"`
	// The Azure Region where the Azure Cosmos DB for PostgreSQL Cluster should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// A `maintenanceWindow` block as defined below.
	MaintenanceWindow *PostgresqlClusterMaintenanceWindow `pulumi:"maintenanceWindow"`
	// The name which should be used for this Azure Cosmos DB for PostgreSQL Cluster. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The worker node count of the Azure Cosmos DB for PostgreSQL Cluster. Possible value is between `0` and `20` except `1`.
	NodeCount *int `pulumi:"nodeCount"`
	// Is public access enabled on worker nodes. Defaults to `false`.
	NodePublicIpAccessEnabled *bool `pulumi:"nodePublicIpAccessEnabled"`
	// The edition of the node server. Possible values are `BurstableGeneralPurpose`, `BurstableMemoryOptimized`, `GeneralPurpose` and `MemoryOptimized`. Defaults to `MemoryOptimized`.
	NodeServerEdition *string `pulumi:"nodeServerEdition"`
	// The storage quota in MB on each worker node. Possible values are `32768`, `65536`, `131072`, `262144`, `524288`, `1048576`, `2097152`, `4194304`, `8388608` and `16777216`.
	NodeStorageQuotaInMb *int `pulumi:"nodeStorageQuotaInMb"`
	// The vCores count on each worker node. Possible values are `1`, `2`, `4`, `8`, `16`, `32`, `64`, `96` and `104`.
	NodeVcores *int `pulumi:"nodeVcores"`
	// The date and time in UTC (ISO8601 format) for the Azure Cosmos DB for PostgreSQL cluster restore. Changing this forces a new resource to be created.
	PointInTimeInUtc *string `pulumi:"pointInTimeInUtc"`
	// The preferred primary availability zone for the Azure Cosmos DB for PostgreSQL cluster.
	PreferredPrimaryZone *string `pulumi:"preferredPrimaryZone"`
	// The name of the Resource Group where the Azure Cosmos DB for PostgreSQL Cluster should exist. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Is shards on coordinator enabled for the Azure Cosmos DB for PostgreSQL cluster.
	ShardsOnCoordinatorEnabled *bool `pulumi:"shardsOnCoordinatorEnabled"`
	// The Azure region of the source Azure Cosmos DB for PostgreSQL cluster for read replica clusters. Changing this forces a new resource to be created.
	SourceLocation *string `pulumi:"sourceLocation"`
	// The resource ID of the source Azure Cosmos DB for PostgreSQL cluster for read replica clusters. Changing this forces a new resource to be created.
	SourceResourceId *string `pulumi:"sourceResourceId"`
	// The major PostgreSQL version on the Azure Cosmos DB for PostgreSQL cluster. Possible values are `11`, `12`, `13`, `14`, `15` and `16`.
	SqlVersion *string `pulumi:"sqlVersion"`
	// A mapping of tags which should be assigned to the Azure Cosmos DB for PostgreSQL Cluster.
	Tags map[string]string `pulumi:"tags"`
}

type PostgresqlClusterState struct {
	// The password of the administrator login. This is required when `sourceResourceId` is not set.
	AdministratorLoginPassword pulumi.StringPtrInput
	// The citus extension version on the Azure Cosmos DB for PostgreSQL Cluster. Possible values are `8.3`, `9.0`, `9.1`, `9.2`, `9.3`, `9.4`, `9.5`, `10.0`, `10.1`, `10.2`, `11.0`, `11.1`, `11.2`, `11.3` and `12.1`.
	CitusVersion pulumi.StringPtrInput
	// Is public access enabled on coordinator? Defaults to `true`.
	CoordinatorPublicIpAccessEnabled pulumi.BoolPtrInput
	// The edition of the coordinator server. Possible values are `BurstableGeneralPurpose`, `BurstableMemoryOptimized`, `GeneralPurpose` and `MemoryOptimized`. Defaults to `GeneralPurpose`.
	CoordinatorServerEdition pulumi.StringPtrInput
	// The coordinator storage allowed for the Azure Cosmos DB for PostgreSQL Cluster. Possible values are `32768`, `65536`, `131072`, `262144`, `524288`, `1048576`, `2097152`, `4194304`, `8388608`, `16777216`, and `33554432`.
	//
	// > **NOTE:** More information on [the types of compute resources available for CosmosDB can be found in the product documentation](https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute)
	CoordinatorStorageQuotaInMb pulumi.IntPtrInput
	// The coordinator vCore count for the Azure Cosmos DB for PostgreSQL Cluster. Possible values are `1`, `2`, `4`, `8`, `16`, `32`, `64` and `96`.
	CoordinatorVcoreCount pulumi.IntPtrInput
	// The earliest restore point time (ISO8601 format) for the Azure Cosmos DB for PostgreSQL Cluster.
	EarliestRestoreTime pulumi.StringPtrInput
	// Is high availability enabled for the Azure Cosmos DB for PostgreSQL cluster? Defaults to `false`.
	HaEnabled pulumi.BoolPtrInput
	// The Azure Region where the Azure Cosmos DB for PostgreSQL Cluster should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// A `maintenanceWindow` block as defined below.
	MaintenanceWindow PostgresqlClusterMaintenanceWindowPtrInput
	// The name which should be used for this Azure Cosmos DB for PostgreSQL Cluster. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The worker node count of the Azure Cosmos DB for PostgreSQL Cluster. Possible value is between `0` and `20` except `1`.
	NodeCount pulumi.IntPtrInput
	// Is public access enabled on worker nodes. Defaults to `false`.
	NodePublicIpAccessEnabled pulumi.BoolPtrInput
	// The edition of the node server. Possible values are `BurstableGeneralPurpose`, `BurstableMemoryOptimized`, `GeneralPurpose` and `MemoryOptimized`. Defaults to `MemoryOptimized`.
	NodeServerEdition pulumi.StringPtrInput
	// The storage quota in MB on each worker node. Possible values are `32768`, `65536`, `131072`, `262144`, `524288`, `1048576`, `2097152`, `4194304`, `8388608` and `16777216`.
	NodeStorageQuotaInMb pulumi.IntPtrInput
	// The vCores count on each worker node. Possible values are `1`, `2`, `4`, `8`, `16`, `32`, `64`, `96` and `104`.
	NodeVcores pulumi.IntPtrInput
	// The date and time in UTC (ISO8601 format) for the Azure Cosmos DB for PostgreSQL cluster restore. Changing this forces a new resource to be created.
	PointInTimeInUtc pulumi.StringPtrInput
	// The preferred primary availability zone for the Azure Cosmos DB for PostgreSQL cluster.
	PreferredPrimaryZone pulumi.StringPtrInput
	// The name of the Resource Group where the Azure Cosmos DB for PostgreSQL Cluster should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// Is shards on coordinator enabled for the Azure Cosmos DB for PostgreSQL cluster.
	ShardsOnCoordinatorEnabled pulumi.BoolPtrInput
	// The Azure region of the source Azure Cosmos DB for PostgreSQL cluster for read replica clusters. Changing this forces a new resource to be created.
	SourceLocation pulumi.StringPtrInput
	// The resource ID of the source Azure Cosmos DB for PostgreSQL cluster for read replica clusters. Changing this forces a new resource to be created.
	SourceResourceId pulumi.StringPtrInput
	// The major PostgreSQL version on the Azure Cosmos DB for PostgreSQL cluster. Possible values are `11`, `12`, `13`, `14`, `15` and `16`.
	SqlVersion pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Azure Cosmos DB for PostgreSQL Cluster.
	Tags pulumi.StringMapInput
}

func (PostgresqlClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresqlClusterState)(nil)).Elem()
}

type postgresqlClusterArgs struct {
	// The password of the administrator login. This is required when `sourceResourceId` is not set.
	AdministratorLoginPassword *string `pulumi:"administratorLoginPassword"`
	// The citus extension version on the Azure Cosmos DB for PostgreSQL Cluster. Possible values are `8.3`, `9.0`, `9.1`, `9.2`, `9.3`, `9.4`, `9.5`, `10.0`, `10.1`, `10.2`, `11.0`, `11.1`, `11.2`, `11.3` and `12.1`.
	CitusVersion *string `pulumi:"citusVersion"`
	// Is public access enabled on coordinator? Defaults to `true`.
	CoordinatorPublicIpAccessEnabled *bool `pulumi:"coordinatorPublicIpAccessEnabled"`
	// The edition of the coordinator server. Possible values are `BurstableGeneralPurpose`, `BurstableMemoryOptimized`, `GeneralPurpose` and `MemoryOptimized`. Defaults to `GeneralPurpose`.
	CoordinatorServerEdition *string `pulumi:"coordinatorServerEdition"`
	// The coordinator storage allowed for the Azure Cosmos DB for PostgreSQL Cluster. Possible values are `32768`, `65536`, `131072`, `262144`, `524288`, `1048576`, `2097152`, `4194304`, `8388608`, `16777216`, and `33554432`.
	//
	// > **NOTE:** More information on [the types of compute resources available for CosmosDB can be found in the product documentation](https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute)
	CoordinatorStorageQuotaInMb *int `pulumi:"coordinatorStorageQuotaInMb"`
	// The coordinator vCore count for the Azure Cosmos DB for PostgreSQL Cluster. Possible values are `1`, `2`, `4`, `8`, `16`, `32`, `64` and `96`.
	CoordinatorVcoreCount *int `pulumi:"coordinatorVcoreCount"`
	// Is high availability enabled for the Azure Cosmos DB for PostgreSQL cluster? Defaults to `false`.
	HaEnabled *bool `pulumi:"haEnabled"`
	// The Azure Region where the Azure Cosmos DB for PostgreSQL Cluster should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// A `maintenanceWindow` block as defined below.
	MaintenanceWindow *PostgresqlClusterMaintenanceWindow `pulumi:"maintenanceWindow"`
	// The name which should be used for this Azure Cosmos DB for PostgreSQL Cluster. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The worker node count of the Azure Cosmos DB for PostgreSQL Cluster. Possible value is between `0` and `20` except `1`.
	NodeCount int `pulumi:"nodeCount"`
	// Is public access enabled on worker nodes. Defaults to `false`.
	NodePublicIpAccessEnabled *bool `pulumi:"nodePublicIpAccessEnabled"`
	// The edition of the node server. Possible values are `BurstableGeneralPurpose`, `BurstableMemoryOptimized`, `GeneralPurpose` and `MemoryOptimized`. Defaults to `MemoryOptimized`.
	NodeServerEdition *string `pulumi:"nodeServerEdition"`
	// The storage quota in MB on each worker node. Possible values are `32768`, `65536`, `131072`, `262144`, `524288`, `1048576`, `2097152`, `4194304`, `8388608` and `16777216`.
	NodeStorageQuotaInMb *int `pulumi:"nodeStorageQuotaInMb"`
	// The vCores count on each worker node. Possible values are `1`, `2`, `4`, `8`, `16`, `32`, `64`, `96` and `104`.
	NodeVcores *int `pulumi:"nodeVcores"`
	// The date and time in UTC (ISO8601 format) for the Azure Cosmos DB for PostgreSQL cluster restore. Changing this forces a new resource to be created.
	PointInTimeInUtc *string `pulumi:"pointInTimeInUtc"`
	// The preferred primary availability zone for the Azure Cosmos DB for PostgreSQL cluster.
	PreferredPrimaryZone *string `pulumi:"preferredPrimaryZone"`
	// The name of the Resource Group where the Azure Cosmos DB for PostgreSQL Cluster should exist. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Is shards on coordinator enabled for the Azure Cosmos DB for PostgreSQL cluster.
	ShardsOnCoordinatorEnabled *bool `pulumi:"shardsOnCoordinatorEnabled"`
	// The Azure region of the source Azure Cosmos DB for PostgreSQL cluster for read replica clusters. Changing this forces a new resource to be created.
	SourceLocation *string `pulumi:"sourceLocation"`
	// The resource ID of the source Azure Cosmos DB for PostgreSQL cluster for read replica clusters. Changing this forces a new resource to be created.
	SourceResourceId *string `pulumi:"sourceResourceId"`
	// The major PostgreSQL version on the Azure Cosmos DB for PostgreSQL cluster. Possible values are `11`, `12`, `13`, `14`, `15` and `16`.
	SqlVersion *string `pulumi:"sqlVersion"`
	// A mapping of tags which should be assigned to the Azure Cosmos DB for PostgreSQL Cluster.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a PostgresqlCluster resource.
type PostgresqlClusterArgs struct {
	// The password of the administrator login. This is required when `sourceResourceId` is not set.
	AdministratorLoginPassword pulumi.StringPtrInput
	// The citus extension version on the Azure Cosmos DB for PostgreSQL Cluster. Possible values are `8.3`, `9.0`, `9.1`, `9.2`, `9.3`, `9.4`, `9.5`, `10.0`, `10.1`, `10.2`, `11.0`, `11.1`, `11.2`, `11.3` and `12.1`.
	CitusVersion pulumi.StringPtrInput
	// Is public access enabled on coordinator? Defaults to `true`.
	CoordinatorPublicIpAccessEnabled pulumi.BoolPtrInput
	// The edition of the coordinator server. Possible values are `BurstableGeneralPurpose`, `BurstableMemoryOptimized`, `GeneralPurpose` and `MemoryOptimized`. Defaults to `GeneralPurpose`.
	CoordinatorServerEdition pulumi.StringPtrInput
	// The coordinator storage allowed for the Azure Cosmos DB for PostgreSQL Cluster. Possible values are `32768`, `65536`, `131072`, `262144`, `524288`, `1048576`, `2097152`, `4194304`, `8388608`, `16777216`, and `33554432`.
	//
	// > **NOTE:** More information on [the types of compute resources available for CosmosDB can be found in the product documentation](https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute)
	CoordinatorStorageQuotaInMb pulumi.IntPtrInput
	// The coordinator vCore count for the Azure Cosmos DB for PostgreSQL Cluster. Possible values are `1`, `2`, `4`, `8`, `16`, `32`, `64` and `96`.
	CoordinatorVcoreCount pulumi.IntPtrInput
	// Is high availability enabled for the Azure Cosmos DB for PostgreSQL cluster? Defaults to `false`.
	HaEnabled pulumi.BoolPtrInput
	// The Azure Region where the Azure Cosmos DB for PostgreSQL Cluster should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// A `maintenanceWindow` block as defined below.
	MaintenanceWindow PostgresqlClusterMaintenanceWindowPtrInput
	// The name which should be used for this Azure Cosmos DB for PostgreSQL Cluster. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The worker node count of the Azure Cosmos DB for PostgreSQL Cluster. Possible value is between `0` and `20` except `1`.
	NodeCount pulumi.IntInput
	// Is public access enabled on worker nodes. Defaults to `false`.
	NodePublicIpAccessEnabled pulumi.BoolPtrInput
	// The edition of the node server. Possible values are `BurstableGeneralPurpose`, `BurstableMemoryOptimized`, `GeneralPurpose` and `MemoryOptimized`. Defaults to `MemoryOptimized`.
	NodeServerEdition pulumi.StringPtrInput
	// The storage quota in MB on each worker node. Possible values are `32768`, `65536`, `131072`, `262144`, `524288`, `1048576`, `2097152`, `4194304`, `8388608` and `16777216`.
	NodeStorageQuotaInMb pulumi.IntPtrInput
	// The vCores count on each worker node. Possible values are `1`, `2`, `4`, `8`, `16`, `32`, `64`, `96` and `104`.
	NodeVcores pulumi.IntPtrInput
	// The date and time in UTC (ISO8601 format) for the Azure Cosmos DB for PostgreSQL cluster restore. Changing this forces a new resource to be created.
	PointInTimeInUtc pulumi.StringPtrInput
	// The preferred primary availability zone for the Azure Cosmos DB for PostgreSQL cluster.
	PreferredPrimaryZone pulumi.StringPtrInput
	// The name of the Resource Group where the Azure Cosmos DB for PostgreSQL Cluster should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// Is shards on coordinator enabled for the Azure Cosmos DB for PostgreSQL cluster.
	ShardsOnCoordinatorEnabled pulumi.BoolPtrInput
	// The Azure region of the source Azure Cosmos DB for PostgreSQL cluster for read replica clusters. Changing this forces a new resource to be created.
	SourceLocation pulumi.StringPtrInput
	// The resource ID of the source Azure Cosmos DB for PostgreSQL cluster for read replica clusters. Changing this forces a new resource to be created.
	SourceResourceId pulumi.StringPtrInput
	// The major PostgreSQL version on the Azure Cosmos DB for PostgreSQL cluster. Possible values are `11`, `12`, `13`, `14`, `15` and `16`.
	SqlVersion pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Azure Cosmos DB for PostgreSQL Cluster.
	Tags pulumi.StringMapInput
}

func (PostgresqlClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresqlClusterArgs)(nil)).Elem()
}

type PostgresqlClusterInput interface {
	pulumi.Input

	ToPostgresqlClusterOutput() PostgresqlClusterOutput
	ToPostgresqlClusterOutputWithContext(ctx context.Context) PostgresqlClusterOutput
}

func (*PostgresqlCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresqlCluster)(nil)).Elem()
}

func (i *PostgresqlCluster) ToPostgresqlClusterOutput() PostgresqlClusterOutput {
	return i.ToPostgresqlClusterOutputWithContext(context.Background())
}

func (i *PostgresqlCluster) ToPostgresqlClusterOutputWithContext(ctx context.Context) PostgresqlClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresqlClusterOutput)
}

// PostgresqlClusterArrayInput is an input type that accepts PostgresqlClusterArray and PostgresqlClusterArrayOutput values.
// You can construct a concrete instance of `PostgresqlClusterArrayInput` via:
//
//	PostgresqlClusterArray{ PostgresqlClusterArgs{...} }
type PostgresqlClusterArrayInput interface {
	pulumi.Input

	ToPostgresqlClusterArrayOutput() PostgresqlClusterArrayOutput
	ToPostgresqlClusterArrayOutputWithContext(context.Context) PostgresqlClusterArrayOutput
}

type PostgresqlClusterArray []PostgresqlClusterInput

func (PostgresqlClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PostgresqlCluster)(nil)).Elem()
}

func (i PostgresqlClusterArray) ToPostgresqlClusterArrayOutput() PostgresqlClusterArrayOutput {
	return i.ToPostgresqlClusterArrayOutputWithContext(context.Background())
}

func (i PostgresqlClusterArray) ToPostgresqlClusterArrayOutputWithContext(ctx context.Context) PostgresqlClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresqlClusterArrayOutput)
}

// PostgresqlClusterMapInput is an input type that accepts PostgresqlClusterMap and PostgresqlClusterMapOutput values.
// You can construct a concrete instance of `PostgresqlClusterMapInput` via:
//
//	PostgresqlClusterMap{ "key": PostgresqlClusterArgs{...} }
type PostgresqlClusterMapInput interface {
	pulumi.Input

	ToPostgresqlClusterMapOutput() PostgresqlClusterMapOutput
	ToPostgresqlClusterMapOutputWithContext(context.Context) PostgresqlClusterMapOutput
}

type PostgresqlClusterMap map[string]PostgresqlClusterInput

func (PostgresqlClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PostgresqlCluster)(nil)).Elem()
}

func (i PostgresqlClusterMap) ToPostgresqlClusterMapOutput() PostgresqlClusterMapOutput {
	return i.ToPostgresqlClusterMapOutputWithContext(context.Background())
}

func (i PostgresqlClusterMap) ToPostgresqlClusterMapOutputWithContext(ctx context.Context) PostgresqlClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresqlClusterMapOutput)
}

type PostgresqlClusterOutput struct{ *pulumi.OutputState }

func (PostgresqlClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresqlCluster)(nil)).Elem()
}

func (o PostgresqlClusterOutput) ToPostgresqlClusterOutput() PostgresqlClusterOutput {
	return o
}

func (o PostgresqlClusterOutput) ToPostgresqlClusterOutputWithContext(ctx context.Context) PostgresqlClusterOutput {
	return o
}

// The password of the administrator login. This is required when `sourceResourceId` is not set.
func (o PostgresqlClusterOutput) AdministratorLoginPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresqlCluster) pulumi.StringPtrOutput { return v.AdministratorLoginPassword }).(pulumi.StringPtrOutput)
}

// The citus extension version on the Azure Cosmos DB for PostgreSQL Cluster. Possible values are `8.3`, `9.0`, `9.1`, `9.2`, `9.3`, `9.4`, `9.5`, `10.0`, `10.1`, `10.2`, `11.0`, `11.1`, `11.2`, `11.3` and `12.1`.
func (o PostgresqlClusterOutput) CitusVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresqlCluster) pulumi.StringOutput { return v.CitusVersion }).(pulumi.StringOutput)
}

// Is public access enabled on coordinator? Defaults to `true`.
func (o PostgresqlClusterOutput) CoordinatorPublicIpAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PostgresqlCluster) pulumi.BoolPtrOutput { return v.CoordinatorPublicIpAccessEnabled }).(pulumi.BoolPtrOutput)
}

// The edition of the coordinator server. Possible values are `BurstableGeneralPurpose`, `BurstableMemoryOptimized`, `GeneralPurpose` and `MemoryOptimized`. Defaults to `GeneralPurpose`.
func (o PostgresqlClusterOutput) CoordinatorServerEdition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresqlCluster) pulumi.StringPtrOutput { return v.CoordinatorServerEdition }).(pulumi.StringPtrOutput)
}

// The coordinator storage allowed for the Azure Cosmos DB for PostgreSQL Cluster. Possible values are `32768`, `65536`, `131072`, `262144`, `524288`, `1048576`, `2097152`, `4194304`, `8388608`, `16777216`, and `33554432`.
//
// > **NOTE:** More information on [the types of compute resources available for CosmosDB can be found in the product documentation](https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute)
func (o PostgresqlClusterOutput) CoordinatorStorageQuotaInMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresqlCluster) pulumi.IntPtrOutput { return v.CoordinatorStorageQuotaInMb }).(pulumi.IntPtrOutput)
}

// The coordinator vCore count for the Azure Cosmos DB for PostgreSQL Cluster. Possible values are `1`, `2`, `4`, `8`, `16`, `32`, `64` and `96`.
func (o PostgresqlClusterOutput) CoordinatorVcoreCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresqlCluster) pulumi.IntPtrOutput { return v.CoordinatorVcoreCount }).(pulumi.IntPtrOutput)
}

// The earliest restore point time (ISO8601 format) for the Azure Cosmos DB for PostgreSQL Cluster.
func (o PostgresqlClusterOutput) EarliestRestoreTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresqlCluster) pulumi.StringOutput { return v.EarliestRestoreTime }).(pulumi.StringOutput)
}

// Is high availability enabled for the Azure Cosmos DB for PostgreSQL cluster? Defaults to `false`.
func (o PostgresqlClusterOutput) HaEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PostgresqlCluster) pulumi.BoolPtrOutput { return v.HaEnabled }).(pulumi.BoolPtrOutput)
}

// The Azure Region where the Azure Cosmos DB for PostgreSQL Cluster should exist. Changing this forces a new resource to be created.
func (o PostgresqlClusterOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresqlCluster) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// A `maintenanceWindow` block as defined below.
func (o PostgresqlClusterOutput) MaintenanceWindow() PostgresqlClusterMaintenanceWindowPtrOutput {
	return o.ApplyT(func(v *PostgresqlCluster) PostgresqlClusterMaintenanceWindowPtrOutput { return v.MaintenanceWindow }).(PostgresqlClusterMaintenanceWindowPtrOutput)
}

// The name which should be used for this Azure Cosmos DB for PostgreSQL Cluster. Changing this forces a new resource to be created.
func (o PostgresqlClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresqlCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The worker node count of the Azure Cosmos DB for PostgreSQL Cluster. Possible value is between `0` and `20` except `1`.
func (o PostgresqlClusterOutput) NodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v *PostgresqlCluster) pulumi.IntOutput { return v.NodeCount }).(pulumi.IntOutput)
}

// Is public access enabled on worker nodes. Defaults to `false`.
func (o PostgresqlClusterOutput) NodePublicIpAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PostgresqlCluster) pulumi.BoolPtrOutput { return v.NodePublicIpAccessEnabled }).(pulumi.BoolPtrOutput)
}

// The edition of the node server. Possible values are `BurstableGeneralPurpose`, `BurstableMemoryOptimized`, `GeneralPurpose` and `MemoryOptimized`. Defaults to `MemoryOptimized`.
func (o PostgresqlClusterOutput) NodeServerEdition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresqlCluster) pulumi.StringPtrOutput { return v.NodeServerEdition }).(pulumi.StringPtrOutput)
}

// The storage quota in MB on each worker node. Possible values are `32768`, `65536`, `131072`, `262144`, `524288`, `1048576`, `2097152`, `4194304`, `8388608` and `16777216`.
func (o PostgresqlClusterOutput) NodeStorageQuotaInMb() pulumi.IntOutput {
	return o.ApplyT(func(v *PostgresqlCluster) pulumi.IntOutput { return v.NodeStorageQuotaInMb }).(pulumi.IntOutput)
}

// The vCores count on each worker node. Possible values are `1`, `2`, `4`, `8`, `16`, `32`, `64`, `96` and `104`.
func (o PostgresqlClusterOutput) NodeVcores() pulumi.IntOutput {
	return o.ApplyT(func(v *PostgresqlCluster) pulumi.IntOutput { return v.NodeVcores }).(pulumi.IntOutput)
}

// The date and time in UTC (ISO8601 format) for the Azure Cosmos DB for PostgreSQL cluster restore. Changing this forces a new resource to be created.
func (o PostgresqlClusterOutput) PointInTimeInUtc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresqlCluster) pulumi.StringPtrOutput { return v.PointInTimeInUtc }).(pulumi.StringPtrOutput)
}

// The preferred primary availability zone for the Azure Cosmos DB for PostgreSQL cluster.
func (o PostgresqlClusterOutput) PreferredPrimaryZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresqlCluster) pulumi.StringPtrOutput { return v.PreferredPrimaryZone }).(pulumi.StringPtrOutput)
}

// The name of the Resource Group where the Azure Cosmos DB for PostgreSQL Cluster should exist. Changing this forces a new resource to be created.
func (o PostgresqlClusterOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresqlCluster) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// Is shards on coordinator enabled for the Azure Cosmos DB for PostgreSQL cluster.
func (o PostgresqlClusterOutput) ShardsOnCoordinatorEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *PostgresqlCluster) pulumi.BoolOutput { return v.ShardsOnCoordinatorEnabled }).(pulumi.BoolOutput)
}

// The Azure region of the source Azure Cosmos DB for PostgreSQL cluster for read replica clusters. Changing this forces a new resource to be created.
func (o PostgresqlClusterOutput) SourceLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresqlCluster) pulumi.StringPtrOutput { return v.SourceLocation }).(pulumi.StringPtrOutput)
}

// The resource ID of the source Azure Cosmos DB for PostgreSQL cluster for read replica clusters. Changing this forces a new resource to be created.
func (o PostgresqlClusterOutput) SourceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresqlCluster) pulumi.StringPtrOutput { return v.SourceResourceId }).(pulumi.StringPtrOutput)
}

// The major PostgreSQL version on the Azure Cosmos DB for PostgreSQL cluster. Possible values are `11`, `12`, `13`, `14`, `15` and `16`.
func (o PostgresqlClusterOutput) SqlVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresqlCluster) pulumi.StringOutput { return v.SqlVersion }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the Azure Cosmos DB for PostgreSQL Cluster.
func (o PostgresqlClusterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostgresqlCluster) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type PostgresqlClusterArrayOutput struct{ *pulumi.OutputState }

func (PostgresqlClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PostgresqlCluster)(nil)).Elem()
}

func (o PostgresqlClusterArrayOutput) ToPostgresqlClusterArrayOutput() PostgresqlClusterArrayOutput {
	return o
}

func (o PostgresqlClusterArrayOutput) ToPostgresqlClusterArrayOutputWithContext(ctx context.Context) PostgresqlClusterArrayOutput {
	return o
}

func (o PostgresqlClusterArrayOutput) Index(i pulumi.IntInput) PostgresqlClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PostgresqlCluster {
		return vs[0].([]*PostgresqlCluster)[vs[1].(int)]
	}).(PostgresqlClusterOutput)
}

type PostgresqlClusterMapOutput struct{ *pulumi.OutputState }

func (PostgresqlClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PostgresqlCluster)(nil)).Elem()
}

func (o PostgresqlClusterMapOutput) ToPostgresqlClusterMapOutput() PostgresqlClusterMapOutput {
	return o
}

func (o PostgresqlClusterMapOutput) ToPostgresqlClusterMapOutputWithContext(ctx context.Context) PostgresqlClusterMapOutput {
	return o
}

func (o PostgresqlClusterMapOutput) MapIndex(k pulumi.StringInput) PostgresqlClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PostgresqlCluster {
		return vs[0].(map[string]*PostgresqlCluster)[vs[1].(string)]
	}).(PostgresqlClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresqlClusterInput)(nil)).Elem(), &PostgresqlCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresqlClusterArrayInput)(nil)).Elem(), PostgresqlClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresqlClusterMapInput)(nil)).Elem(), PostgresqlClusterMap{})
	pulumi.RegisterOutputType(PostgresqlClusterOutput{})
	pulumi.RegisterOutputType(PostgresqlClusterArrayOutput{})
	pulumi.RegisterOutputType(PostgresqlClusterMapOutput{})
}
