// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cosmosdb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Sets a Node Configuration value on Azure Cosmos DB for PostgreSQL Cluster.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/cosmosdb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			examplePostgresqlCluster, err := cosmosdb.NewPostgresqlCluster(ctx, "examplePostgresqlCluster", &cosmosdb.PostgresqlClusterArgs{
//				ResourceGroupName:           exampleResourceGroup.Name,
//				Location:                    exampleResourceGroup.Location,
//				AdministratorLoginPassword:  pulumi.String("H@Sh1CoR3!"),
//				CoordinatorStorageQuotaInMb: pulumi.Int(131072),
//				CoordinatorVcoreCount:       pulumi.Int(2),
//				NodeCount:                   pulumi.Int(2),
//				NodeStorageQuotaInMb:        pulumi.Int(131072),
//				NodeVcores:                  pulumi.Int(2),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cosmosdb.NewPostgresqlNodeConfiguration(ctx, "examplePostgresqlNodeConfiguration", &cosmosdb.PostgresqlNodeConfigurationArgs{
//				ClusterId: examplePostgresqlCluster.ID(),
//				Value:     pulumi.String("on"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Node Configurations on Azure Cosmos DB for PostgreSQL Clusters can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:cosmosdb/postgresqlNodeConfiguration:PostgresqlNodeConfiguration example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DBforPostgreSQL/serverGroupsv2/cluster1/nodeConfigurations/array_nulls
//
// ```
type PostgresqlNodeConfiguration struct {
	pulumi.CustomResourceState

	// The resource ID of the Azure Cosmos DB for PostgreSQL Cluster where we want to change configuration. Changing this forces a new resource to be created.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The name of the Node Configuration on Azure Cosmos DB for PostgreSQL Cluster. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The value of the Node Configuration on Azure Cosmos DB for PostgreSQL Cluster.
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewPostgresqlNodeConfiguration registers a new resource with the given unique name, arguments, and options.
func NewPostgresqlNodeConfiguration(ctx *pulumi.Context,
	name string, args *PostgresqlNodeConfigurationArgs, opts ...pulumi.ResourceOption) (*PostgresqlNodeConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PostgresqlNodeConfiguration
	err := ctx.RegisterResource("azure:cosmosdb/postgresqlNodeConfiguration:PostgresqlNodeConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPostgresqlNodeConfiguration gets an existing PostgresqlNodeConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPostgresqlNodeConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PostgresqlNodeConfigurationState, opts ...pulumi.ResourceOption) (*PostgresqlNodeConfiguration, error) {
	var resource PostgresqlNodeConfiguration
	err := ctx.ReadResource("azure:cosmosdb/postgresqlNodeConfiguration:PostgresqlNodeConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PostgresqlNodeConfiguration resources.
type postgresqlNodeConfigurationState struct {
	// The resource ID of the Azure Cosmos DB for PostgreSQL Cluster where we want to change configuration. Changing this forces a new resource to be created.
	ClusterId *string `pulumi:"clusterId"`
	// The name of the Node Configuration on Azure Cosmos DB for PostgreSQL Cluster. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The value of the Node Configuration on Azure Cosmos DB for PostgreSQL Cluster.
	Value *string `pulumi:"value"`
}

type PostgresqlNodeConfigurationState struct {
	// The resource ID of the Azure Cosmos DB for PostgreSQL Cluster where we want to change configuration. Changing this forces a new resource to be created.
	ClusterId pulumi.StringPtrInput
	// The name of the Node Configuration on Azure Cosmos DB for PostgreSQL Cluster. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The value of the Node Configuration on Azure Cosmos DB for PostgreSQL Cluster.
	Value pulumi.StringPtrInput
}

func (PostgresqlNodeConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresqlNodeConfigurationState)(nil)).Elem()
}

type postgresqlNodeConfigurationArgs struct {
	// The resource ID of the Azure Cosmos DB for PostgreSQL Cluster where we want to change configuration. Changing this forces a new resource to be created.
	ClusterId string `pulumi:"clusterId"`
	// The name of the Node Configuration on Azure Cosmos DB for PostgreSQL Cluster. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The value of the Node Configuration on Azure Cosmos DB for PostgreSQL Cluster.
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a PostgresqlNodeConfiguration resource.
type PostgresqlNodeConfigurationArgs struct {
	// The resource ID of the Azure Cosmos DB for PostgreSQL Cluster where we want to change configuration. Changing this forces a new resource to be created.
	ClusterId pulumi.StringInput
	// The name of the Node Configuration on Azure Cosmos DB for PostgreSQL Cluster. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The value of the Node Configuration on Azure Cosmos DB for PostgreSQL Cluster.
	Value pulumi.StringInput
}

func (PostgresqlNodeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresqlNodeConfigurationArgs)(nil)).Elem()
}

type PostgresqlNodeConfigurationInput interface {
	pulumi.Input

	ToPostgresqlNodeConfigurationOutput() PostgresqlNodeConfigurationOutput
	ToPostgresqlNodeConfigurationOutputWithContext(ctx context.Context) PostgresqlNodeConfigurationOutput
}

func (*PostgresqlNodeConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresqlNodeConfiguration)(nil)).Elem()
}

func (i *PostgresqlNodeConfiguration) ToPostgresqlNodeConfigurationOutput() PostgresqlNodeConfigurationOutput {
	return i.ToPostgresqlNodeConfigurationOutputWithContext(context.Background())
}

func (i *PostgresqlNodeConfiguration) ToPostgresqlNodeConfigurationOutputWithContext(ctx context.Context) PostgresqlNodeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresqlNodeConfigurationOutput)
}

// PostgresqlNodeConfigurationArrayInput is an input type that accepts PostgresqlNodeConfigurationArray and PostgresqlNodeConfigurationArrayOutput values.
// You can construct a concrete instance of `PostgresqlNodeConfigurationArrayInput` via:
//
//	PostgresqlNodeConfigurationArray{ PostgresqlNodeConfigurationArgs{...} }
type PostgresqlNodeConfigurationArrayInput interface {
	pulumi.Input

	ToPostgresqlNodeConfigurationArrayOutput() PostgresqlNodeConfigurationArrayOutput
	ToPostgresqlNodeConfigurationArrayOutputWithContext(context.Context) PostgresqlNodeConfigurationArrayOutput
}

type PostgresqlNodeConfigurationArray []PostgresqlNodeConfigurationInput

func (PostgresqlNodeConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PostgresqlNodeConfiguration)(nil)).Elem()
}

func (i PostgresqlNodeConfigurationArray) ToPostgresqlNodeConfigurationArrayOutput() PostgresqlNodeConfigurationArrayOutput {
	return i.ToPostgresqlNodeConfigurationArrayOutputWithContext(context.Background())
}

func (i PostgresqlNodeConfigurationArray) ToPostgresqlNodeConfigurationArrayOutputWithContext(ctx context.Context) PostgresqlNodeConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresqlNodeConfigurationArrayOutput)
}

// PostgresqlNodeConfigurationMapInput is an input type that accepts PostgresqlNodeConfigurationMap and PostgresqlNodeConfigurationMapOutput values.
// You can construct a concrete instance of `PostgresqlNodeConfigurationMapInput` via:
//
//	PostgresqlNodeConfigurationMap{ "key": PostgresqlNodeConfigurationArgs{...} }
type PostgresqlNodeConfigurationMapInput interface {
	pulumi.Input

	ToPostgresqlNodeConfigurationMapOutput() PostgresqlNodeConfigurationMapOutput
	ToPostgresqlNodeConfigurationMapOutputWithContext(context.Context) PostgresqlNodeConfigurationMapOutput
}

type PostgresqlNodeConfigurationMap map[string]PostgresqlNodeConfigurationInput

func (PostgresqlNodeConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PostgresqlNodeConfiguration)(nil)).Elem()
}

func (i PostgresqlNodeConfigurationMap) ToPostgresqlNodeConfigurationMapOutput() PostgresqlNodeConfigurationMapOutput {
	return i.ToPostgresqlNodeConfigurationMapOutputWithContext(context.Background())
}

func (i PostgresqlNodeConfigurationMap) ToPostgresqlNodeConfigurationMapOutputWithContext(ctx context.Context) PostgresqlNodeConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresqlNodeConfigurationMapOutput)
}

type PostgresqlNodeConfigurationOutput struct{ *pulumi.OutputState }

func (PostgresqlNodeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresqlNodeConfiguration)(nil)).Elem()
}

func (o PostgresqlNodeConfigurationOutput) ToPostgresqlNodeConfigurationOutput() PostgresqlNodeConfigurationOutput {
	return o
}

func (o PostgresqlNodeConfigurationOutput) ToPostgresqlNodeConfigurationOutputWithContext(ctx context.Context) PostgresqlNodeConfigurationOutput {
	return o
}

// The resource ID of the Azure Cosmos DB for PostgreSQL Cluster where we want to change configuration. Changing this forces a new resource to be created.
func (o PostgresqlNodeConfigurationOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresqlNodeConfiguration) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The name of the Node Configuration on Azure Cosmos DB for PostgreSQL Cluster. Changing this forces a new resource to be created.
func (o PostgresqlNodeConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresqlNodeConfiguration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The value of the Node Configuration on Azure Cosmos DB for PostgreSQL Cluster.
func (o PostgresqlNodeConfigurationOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresqlNodeConfiguration) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

type PostgresqlNodeConfigurationArrayOutput struct{ *pulumi.OutputState }

func (PostgresqlNodeConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PostgresqlNodeConfiguration)(nil)).Elem()
}

func (o PostgresqlNodeConfigurationArrayOutput) ToPostgresqlNodeConfigurationArrayOutput() PostgresqlNodeConfigurationArrayOutput {
	return o
}

func (o PostgresqlNodeConfigurationArrayOutput) ToPostgresqlNodeConfigurationArrayOutputWithContext(ctx context.Context) PostgresqlNodeConfigurationArrayOutput {
	return o
}

func (o PostgresqlNodeConfigurationArrayOutput) Index(i pulumi.IntInput) PostgresqlNodeConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PostgresqlNodeConfiguration {
		return vs[0].([]*PostgresqlNodeConfiguration)[vs[1].(int)]
	}).(PostgresqlNodeConfigurationOutput)
}

type PostgresqlNodeConfigurationMapOutput struct{ *pulumi.OutputState }

func (PostgresqlNodeConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PostgresqlNodeConfiguration)(nil)).Elem()
}

func (o PostgresqlNodeConfigurationMapOutput) ToPostgresqlNodeConfigurationMapOutput() PostgresqlNodeConfigurationMapOutput {
	return o
}

func (o PostgresqlNodeConfigurationMapOutput) ToPostgresqlNodeConfigurationMapOutputWithContext(ctx context.Context) PostgresqlNodeConfigurationMapOutput {
	return o
}

func (o PostgresqlNodeConfigurationMapOutput) MapIndex(k pulumi.StringInput) PostgresqlNodeConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PostgresqlNodeConfiguration {
		return vs[0].(map[string]*PostgresqlNodeConfiguration)[vs[1].(string)]
	}).(PostgresqlNodeConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresqlNodeConfigurationInput)(nil)).Elem(), &PostgresqlNodeConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresqlNodeConfigurationArrayInput)(nil)).Elem(), PostgresqlNodeConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresqlNodeConfigurationMapInput)(nil)).Elem(), PostgresqlNodeConfigurationMap{})
	pulumi.RegisterOutputType(PostgresqlNodeConfigurationOutput{})
	pulumi.RegisterOutputType(PostgresqlNodeConfigurationArrayOutput{})
	pulumi.RegisterOutputType(PostgresqlNodeConfigurationMapOutput{})
}
