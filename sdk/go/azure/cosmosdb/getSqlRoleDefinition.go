// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cosmosdb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Cosmos DB SQL Role Definition.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/cosmosdb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cosmosdb.LookupSqlRoleDefinition(ctx, &cosmosdb.LookupSqlRoleDefinitionArgs{
//				AccountName:       "tfex-cosmosdb-sql-role-definition-account-name",
//				ResourceGroupName: "tfex-cosmosdb-sql-role-definition-rg",
//				RoleDefinitionId:  "00000000-0000-0000-0000-000000000000",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSqlRoleDefinition(ctx *pulumi.Context, args *LookupSqlRoleDefinitionArgs, opts ...pulumi.InvokeOption) (*LookupSqlRoleDefinitionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSqlRoleDefinitionResult
	err := ctx.Invoke("azure:cosmosdb/getSqlRoleDefinition:getSqlRoleDefinition", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSqlRoleDefinition.
type LookupSqlRoleDefinitionArgs struct {
	// The name of the Cosmos DB Account.
	AccountName string `pulumi:"accountName"`
	// The name of the Resource Group in which the Cosmos DB SQL Role Definition is created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The GUID as the name of the Cosmos DB SQL Role Definition.
	RoleDefinitionId string `pulumi:"roleDefinitionId"`
}

// A collection of values returned by getSqlRoleDefinition.
type LookupSqlRoleDefinitionResult struct {
	AccountName string `pulumi:"accountName"`
	// A list of fully qualified scopes at or below which Role Assignments may be created using this Cosmos DB SQL Role Definition.
	AssignableScopes []string `pulumi:"assignableScopes"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The role name of the Cosmos DB SQL Role Definition.
	Name string `pulumi:"name"`
	// A `permissions` block as defined below.
	Permissions       []GetSqlRoleDefinitionPermission `pulumi:"permissions"`
	ResourceGroupName string                           `pulumi:"resourceGroupName"`
	RoleDefinitionId  string                           `pulumi:"roleDefinitionId"`
	// The type of the Cosmos DB SQL Role Definition.
	Type string `pulumi:"type"`
}

func LookupSqlRoleDefinitionOutput(ctx *pulumi.Context, args LookupSqlRoleDefinitionOutputArgs, opts ...pulumi.InvokeOption) LookupSqlRoleDefinitionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSqlRoleDefinitionResult, error) {
			args := v.(LookupSqlRoleDefinitionArgs)
			r, err := LookupSqlRoleDefinition(ctx, &args, opts...)
			var s LookupSqlRoleDefinitionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSqlRoleDefinitionResultOutput)
}

// A collection of arguments for invoking getSqlRoleDefinition.
type LookupSqlRoleDefinitionOutputArgs struct {
	// The name of the Cosmos DB Account.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The name of the Resource Group in which the Cosmos DB SQL Role Definition is created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The GUID as the name of the Cosmos DB SQL Role Definition.
	RoleDefinitionId pulumi.StringInput `pulumi:"roleDefinitionId"`
}

func (LookupSqlRoleDefinitionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSqlRoleDefinitionArgs)(nil)).Elem()
}

// A collection of values returned by getSqlRoleDefinition.
type LookupSqlRoleDefinitionResultOutput struct{ *pulumi.OutputState }

func (LookupSqlRoleDefinitionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSqlRoleDefinitionResult)(nil)).Elem()
}

func (o LookupSqlRoleDefinitionResultOutput) ToLookupSqlRoleDefinitionResultOutput() LookupSqlRoleDefinitionResultOutput {
	return o
}

func (o LookupSqlRoleDefinitionResultOutput) ToLookupSqlRoleDefinitionResultOutputWithContext(ctx context.Context) LookupSqlRoleDefinitionResultOutput {
	return o
}

func (o LookupSqlRoleDefinitionResultOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlRoleDefinitionResult) string { return v.AccountName }).(pulumi.StringOutput)
}

// A list of fully qualified scopes at or below which Role Assignments may be created using this Cosmos DB SQL Role Definition.
func (o LookupSqlRoleDefinitionResultOutput) AssignableScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSqlRoleDefinitionResult) []string { return v.AssignableScopes }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSqlRoleDefinitionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlRoleDefinitionResult) string { return v.Id }).(pulumi.StringOutput)
}

// The role name of the Cosmos DB SQL Role Definition.
func (o LookupSqlRoleDefinitionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlRoleDefinitionResult) string { return v.Name }).(pulumi.StringOutput)
}

// A `permissions` block as defined below.
func (o LookupSqlRoleDefinitionResultOutput) Permissions() GetSqlRoleDefinitionPermissionArrayOutput {
	return o.ApplyT(func(v LookupSqlRoleDefinitionResult) []GetSqlRoleDefinitionPermission { return v.Permissions }).(GetSqlRoleDefinitionPermissionArrayOutput)
}

func (o LookupSqlRoleDefinitionResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlRoleDefinitionResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

func (o LookupSqlRoleDefinitionResultOutput) RoleDefinitionId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlRoleDefinitionResult) string { return v.RoleDefinitionId }).(pulumi.StringOutput)
}

// The type of the Cosmos DB SQL Role Definition.
func (o LookupSqlRoleDefinitionResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlRoleDefinitionResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSqlRoleDefinitionResultOutput{})
}
