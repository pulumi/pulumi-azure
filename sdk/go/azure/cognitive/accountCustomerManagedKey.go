// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cognitive

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Customer Managed Key for a Cognitive Services Account.
//
// > **NOTE:** It's possible to define a Customer Managed Key both within the `cognitive.Account` resource via the `customerManagedKey` block and by using the `cognitive.AccountCustomerManagedKey` resource. However it's not possible to use both methods to manage a Customer Managed Key for a Cognitive Account, since there'll be conflicts.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/authorization"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/cognitive"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/keyvault"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := core.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West US"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleUserAssignedIdentity, err := authorization.NewUserAssignedIdentity(ctx, "exampleUserAssignedIdentity", &authorization.UserAssignedIdentityArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := cognitive.NewAccount(ctx, "exampleAccount", &cognitive.AccountArgs{
//				Location:            exampleResourceGroup.Location,
//				ResourceGroupName:   exampleResourceGroup.Name,
//				Kind:                pulumi.String("Face"),
//				SkuName:             pulumi.String("E0"),
//				CustomSubdomainName: pulumi.String("example-account"),
//				Identity: &cognitive.AccountIdentityArgs{
//					Type: pulumi.String("SystemAssigned, UserAssigned"),
//					IdentityIds: pulumi.StringArray{
//						exampleUserAssignedIdentity.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleKeyVault, err := keyvault.NewKeyVault(ctx, "exampleKeyVault", &keyvault.KeyVaultArgs{
//				Location:               exampleResourceGroup.Location,
//				ResourceGroupName:      exampleResourceGroup.Name,
//				TenantId:               *pulumi.String(current.TenantId),
//				SkuName:                pulumi.String("standard"),
//				PurgeProtectionEnabled: pulumi.Bool(true),
//				AccessPolicies: keyvault.KeyVaultAccessPolicyArray{
//					&keyvault.KeyVaultAccessPolicyArgs{
//						TenantId: exampleAccount.Identity.ApplyT(func(identity cognitive.AccountIdentity) (*string, error) {
//							return &identity.TenantId, nil
//						}).(pulumi.StringPtrOutput),
//						ObjectId: exampleAccount.Identity.ApplyT(func(identity cognitive.AccountIdentity) (*string, error) {
//							return &identity.PrincipalId, nil
//						}).(pulumi.StringPtrOutput),
//						KeyPermissions: pulumi.StringArray{
//							pulumi.String("Get"),
//							pulumi.String("Create"),
//							pulumi.String("List"),
//							pulumi.String("Restore"),
//							pulumi.String("Recover"),
//							pulumi.String("UnwrapKey"),
//							pulumi.String("WrapKey"),
//							pulumi.String("Purge"),
//							pulumi.String("Encrypt"),
//							pulumi.String("Decrypt"),
//							pulumi.String("Sign"),
//							pulumi.String("Verify"),
//						},
//						SecretPermissions: pulumi.StringArray{
//							pulumi.String("Get"),
//						},
//					},
//					&keyvault.KeyVaultAccessPolicyArgs{
//						TenantId: *pulumi.String(current.TenantId),
//						ObjectId: *pulumi.String(current.ObjectId),
//						KeyPermissions: pulumi.StringArray{
//							pulumi.String("Get"),
//							pulumi.String("Create"),
//							pulumi.String("Delete"),
//							pulumi.String("List"),
//							pulumi.String("Restore"),
//							pulumi.String("Recover"),
//							pulumi.String("UnwrapKey"),
//							pulumi.String("WrapKey"),
//							pulumi.String("Purge"),
//							pulumi.String("Encrypt"),
//							pulumi.String("Decrypt"),
//							pulumi.String("Sign"),
//							pulumi.String("Verify"),
//							pulumi.String("GetRotationPolicy"),
//						},
//						SecretPermissions: pulumi.StringArray{
//							pulumi.String("Get"),
//						},
//					},
//					&keyvault.KeyVaultAccessPolicyArgs{
//						TenantId: exampleUserAssignedIdentity.TenantId,
//						ObjectId: exampleUserAssignedIdentity.PrincipalId,
//						KeyPermissions: pulumi.StringArray{
//							pulumi.String("Get"),
//							pulumi.String("Create"),
//							pulumi.String("Delete"),
//							pulumi.String("List"),
//							pulumi.String("Restore"),
//							pulumi.String("Recover"),
//							pulumi.String("UnwrapKey"),
//							pulumi.String("WrapKey"),
//							pulumi.String("Purge"),
//							pulumi.String("Encrypt"),
//							pulumi.String("Decrypt"),
//							pulumi.String("Sign"),
//							pulumi.String("Verify"),
//						},
//						SecretPermissions: pulumi.StringArray{
//							pulumi.String("Get"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleKey, err := keyvault.NewKey(ctx, "exampleKey", &keyvault.KeyArgs{
//				KeyVaultId: exampleKeyVault.ID(),
//				KeyType:    pulumi.String("RSA"),
//				KeySize:    pulumi.Int(2048),
//				KeyOpts: pulumi.StringArray{
//					pulumi.String("decrypt"),
//					pulumi.String("encrypt"),
//					pulumi.String("sign"),
//					pulumi.String("unwrapKey"),
//					pulumi.String("verify"),
//					pulumi.String("wrapKey"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cognitive.NewAccountCustomerManagedKey(ctx, "exampleAccountCustomerManagedKey", &cognitive.AccountCustomerManagedKeyArgs{
//				CognitiveAccountId: exampleAccount.ID(),
//				KeyVaultKeyId:      exampleKey.ID(),
//				IdentityClientId:   exampleUserAssignedIdentity.ClientId,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Customer Managed Keys for a Cognitive Account can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:cognitive/accountCustomerManagedKey:AccountCustomerManagedKey example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.CognitiveServices/accounts/account1
//
// ```
type AccountCustomerManagedKey struct {
	pulumi.CustomResourceState

	// The ID of the Cognitive Account. Changing this forces a new resource to be created.
	CognitiveAccountId pulumi.StringOutput `pulumi:"cognitiveAccountId"`
	// The Client ID of the User Assigned Identity that has access to the key. This property only needs to be specified when there're multiple identities attached to the Cognitive Account.
	IdentityClientId pulumi.StringPtrOutput `pulumi:"identityClientId"`
	// The ID of the Key Vault Key which should be used to Encrypt the data in this Cognitive Account.
	KeyVaultKeyId pulumi.StringOutput `pulumi:"keyVaultKeyId"`
}

// NewAccountCustomerManagedKey registers a new resource with the given unique name, arguments, and options.
func NewAccountCustomerManagedKey(ctx *pulumi.Context,
	name string, args *AccountCustomerManagedKeyArgs, opts ...pulumi.ResourceOption) (*AccountCustomerManagedKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CognitiveAccountId == nil {
		return nil, errors.New("invalid value for required argument 'CognitiveAccountId'")
	}
	if args.KeyVaultKeyId == nil {
		return nil, errors.New("invalid value for required argument 'KeyVaultKeyId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccountCustomerManagedKey
	err := ctx.RegisterResource("azure:cognitive/accountCustomerManagedKey:AccountCustomerManagedKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccountCustomerManagedKey gets an existing AccountCustomerManagedKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountCustomerManagedKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountCustomerManagedKeyState, opts ...pulumi.ResourceOption) (*AccountCustomerManagedKey, error) {
	var resource AccountCustomerManagedKey
	err := ctx.ReadResource("azure:cognitive/accountCustomerManagedKey:AccountCustomerManagedKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccountCustomerManagedKey resources.
type accountCustomerManagedKeyState struct {
	// The ID of the Cognitive Account. Changing this forces a new resource to be created.
	CognitiveAccountId *string `pulumi:"cognitiveAccountId"`
	// The Client ID of the User Assigned Identity that has access to the key. This property only needs to be specified when there're multiple identities attached to the Cognitive Account.
	IdentityClientId *string `pulumi:"identityClientId"`
	// The ID of the Key Vault Key which should be used to Encrypt the data in this Cognitive Account.
	KeyVaultKeyId *string `pulumi:"keyVaultKeyId"`
}

type AccountCustomerManagedKeyState struct {
	// The ID of the Cognitive Account. Changing this forces a new resource to be created.
	CognitiveAccountId pulumi.StringPtrInput
	// The Client ID of the User Assigned Identity that has access to the key. This property only needs to be specified when there're multiple identities attached to the Cognitive Account.
	IdentityClientId pulumi.StringPtrInput
	// The ID of the Key Vault Key which should be used to Encrypt the data in this Cognitive Account.
	KeyVaultKeyId pulumi.StringPtrInput
}

func (AccountCustomerManagedKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountCustomerManagedKeyState)(nil)).Elem()
}

type accountCustomerManagedKeyArgs struct {
	// The ID of the Cognitive Account. Changing this forces a new resource to be created.
	CognitiveAccountId string `pulumi:"cognitiveAccountId"`
	// The Client ID of the User Assigned Identity that has access to the key. This property only needs to be specified when there're multiple identities attached to the Cognitive Account.
	IdentityClientId *string `pulumi:"identityClientId"`
	// The ID of the Key Vault Key which should be used to Encrypt the data in this Cognitive Account.
	KeyVaultKeyId string `pulumi:"keyVaultKeyId"`
}

// The set of arguments for constructing a AccountCustomerManagedKey resource.
type AccountCustomerManagedKeyArgs struct {
	// The ID of the Cognitive Account. Changing this forces a new resource to be created.
	CognitiveAccountId pulumi.StringInput
	// The Client ID of the User Assigned Identity that has access to the key. This property only needs to be specified when there're multiple identities attached to the Cognitive Account.
	IdentityClientId pulumi.StringPtrInput
	// The ID of the Key Vault Key which should be used to Encrypt the data in this Cognitive Account.
	KeyVaultKeyId pulumi.StringInput
}

func (AccountCustomerManagedKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountCustomerManagedKeyArgs)(nil)).Elem()
}

type AccountCustomerManagedKeyInput interface {
	pulumi.Input

	ToAccountCustomerManagedKeyOutput() AccountCustomerManagedKeyOutput
	ToAccountCustomerManagedKeyOutputWithContext(ctx context.Context) AccountCustomerManagedKeyOutput
}

func (*AccountCustomerManagedKey) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountCustomerManagedKey)(nil)).Elem()
}

func (i *AccountCustomerManagedKey) ToAccountCustomerManagedKeyOutput() AccountCustomerManagedKeyOutput {
	return i.ToAccountCustomerManagedKeyOutputWithContext(context.Background())
}

func (i *AccountCustomerManagedKey) ToAccountCustomerManagedKeyOutputWithContext(ctx context.Context) AccountCustomerManagedKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountCustomerManagedKeyOutput)
}

// AccountCustomerManagedKeyArrayInput is an input type that accepts AccountCustomerManagedKeyArray and AccountCustomerManagedKeyArrayOutput values.
// You can construct a concrete instance of `AccountCustomerManagedKeyArrayInput` via:
//
//	AccountCustomerManagedKeyArray{ AccountCustomerManagedKeyArgs{...} }
type AccountCustomerManagedKeyArrayInput interface {
	pulumi.Input

	ToAccountCustomerManagedKeyArrayOutput() AccountCustomerManagedKeyArrayOutput
	ToAccountCustomerManagedKeyArrayOutputWithContext(context.Context) AccountCustomerManagedKeyArrayOutput
}

type AccountCustomerManagedKeyArray []AccountCustomerManagedKeyInput

func (AccountCustomerManagedKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountCustomerManagedKey)(nil)).Elem()
}

func (i AccountCustomerManagedKeyArray) ToAccountCustomerManagedKeyArrayOutput() AccountCustomerManagedKeyArrayOutput {
	return i.ToAccountCustomerManagedKeyArrayOutputWithContext(context.Background())
}

func (i AccountCustomerManagedKeyArray) ToAccountCustomerManagedKeyArrayOutputWithContext(ctx context.Context) AccountCustomerManagedKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountCustomerManagedKeyArrayOutput)
}

// AccountCustomerManagedKeyMapInput is an input type that accepts AccountCustomerManagedKeyMap and AccountCustomerManagedKeyMapOutput values.
// You can construct a concrete instance of `AccountCustomerManagedKeyMapInput` via:
//
//	AccountCustomerManagedKeyMap{ "key": AccountCustomerManagedKeyArgs{...} }
type AccountCustomerManagedKeyMapInput interface {
	pulumi.Input

	ToAccountCustomerManagedKeyMapOutput() AccountCustomerManagedKeyMapOutput
	ToAccountCustomerManagedKeyMapOutputWithContext(context.Context) AccountCustomerManagedKeyMapOutput
}

type AccountCustomerManagedKeyMap map[string]AccountCustomerManagedKeyInput

func (AccountCustomerManagedKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountCustomerManagedKey)(nil)).Elem()
}

func (i AccountCustomerManagedKeyMap) ToAccountCustomerManagedKeyMapOutput() AccountCustomerManagedKeyMapOutput {
	return i.ToAccountCustomerManagedKeyMapOutputWithContext(context.Background())
}

func (i AccountCustomerManagedKeyMap) ToAccountCustomerManagedKeyMapOutputWithContext(ctx context.Context) AccountCustomerManagedKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountCustomerManagedKeyMapOutput)
}

type AccountCustomerManagedKeyOutput struct{ *pulumi.OutputState }

func (AccountCustomerManagedKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountCustomerManagedKey)(nil)).Elem()
}

func (o AccountCustomerManagedKeyOutput) ToAccountCustomerManagedKeyOutput() AccountCustomerManagedKeyOutput {
	return o
}

func (o AccountCustomerManagedKeyOutput) ToAccountCustomerManagedKeyOutputWithContext(ctx context.Context) AccountCustomerManagedKeyOutput {
	return o
}

// The ID of the Cognitive Account. Changing this forces a new resource to be created.
func (o AccountCustomerManagedKeyOutput) CognitiveAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountCustomerManagedKey) pulumi.StringOutput { return v.CognitiveAccountId }).(pulumi.StringOutput)
}

// The Client ID of the User Assigned Identity that has access to the key. This property only needs to be specified when there're multiple identities attached to the Cognitive Account.
func (o AccountCustomerManagedKeyOutput) IdentityClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountCustomerManagedKey) pulumi.StringPtrOutput { return v.IdentityClientId }).(pulumi.StringPtrOutput)
}

// The ID of the Key Vault Key which should be used to Encrypt the data in this Cognitive Account.
func (o AccountCustomerManagedKeyOutput) KeyVaultKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountCustomerManagedKey) pulumi.StringOutput { return v.KeyVaultKeyId }).(pulumi.StringOutput)
}

type AccountCustomerManagedKeyArrayOutput struct{ *pulumi.OutputState }

func (AccountCustomerManagedKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountCustomerManagedKey)(nil)).Elem()
}

func (o AccountCustomerManagedKeyArrayOutput) ToAccountCustomerManagedKeyArrayOutput() AccountCustomerManagedKeyArrayOutput {
	return o
}

func (o AccountCustomerManagedKeyArrayOutput) ToAccountCustomerManagedKeyArrayOutputWithContext(ctx context.Context) AccountCustomerManagedKeyArrayOutput {
	return o
}

func (o AccountCustomerManagedKeyArrayOutput) Index(i pulumi.IntInput) AccountCustomerManagedKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccountCustomerManagedKey {
		return vs[0].([]*AccountCustomerManagedKey)[vs[1].(int)]
	}).(AccountCustomerManagedKeyOutput)
}

type AccountCustomerManagedKeyMapOutput struct{ *pulumi.OutputState }

func (AccountCustomerManagedKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountCustomerManagedKey)(nil)).Elem()
}

func (o AccountCustomerManagedKeyMapOutput) ToAccountCustomerManagedKeyMapOutput() AccountCustomerManagedKeyMapOutput {
	return o
}

func (o AccountCustomerManagedKeyMapOutput) ToAccountCustomerManagedKeyMapOutputWithContext(ctx context.Context) AccountCustomerManagedKeyMapOutput {
	return o
}

func (o AccountCustomerManagedKeyMapOutput) MapIndex(k pulumi.StringInput) AccountCustomerManagedKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccountCustomerManagedKey {
		return vs[0].(map[string]*AccountCustomerManagedKey)[vs[1].(string)]
	}).(AccountCustomerManagedKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountCustomerManagedKeyInput)(nil)).Elem(), &AccountCustomerManagedKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountCustomerManagedKeyArrayInput)(nil)).Elem(), AccountCustomerManagedKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountCustomerManagedKeyMapInput)(nil)).Elem(), AccountCustomerManagedKeyMap{})
	pulumi.RegisterOutputType(AccountCustomerManagedKeyOutput{})
	pulumi.RegisterOutputType(AccountCustomerManagedKeyArrayOutput{})
	pulumi.RegisterOutputType(AccountCustomerManagedKeyMapOutput{})
}
