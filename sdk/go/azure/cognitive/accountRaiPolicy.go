// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cognitive

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Cognitive Services Account RAI Policy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/cognitive"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resources"),
//				Location: pulumi.String("East US"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := cognitive.NewAccount(ctx, "example", &cognitive.AccountArgs{
//				Name:              pulumi.String("example-account"),
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//				Kind:              pulumi.String("OpenAI"),
//				SkuName:           pulumi.String("S0"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cognitive.NewAccountRaiPolicy(ctx, "example", &cognitive.AccountRaiPolicyArgs{
//				Name:               pulumi.String("example-rai-policy"),
//				CognitiveAccountId: exampleAccount.ID(),
//				BasePolicyName:     pulumi.String("Microsoft.Default"),
//				ContentFilters: cognitive.AccountRaiPolicyContentFilterArray{
//					&cognitive.AccountRaiPolicyContentFilterArgs{
//						Name:              pulumi.String("Hate"),
//						FilterEnabled:     pulumi.Bool(true),
//						BlockEnabled:      pulumi.Bool(true),
//						SeverityThreshold: pulumi.String("High"),
//						Source:            pulumi.String("Prompt"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This resource uses the following Azure API Providers:
//
// * `Microsoft.CognitiveServices` - 2025-06-01
//
// ## Import
//
// Cognitive Service Account RAI Policies can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:cognitive/accountRaiPolicy:AccountRaiPolicy policy1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.CognitiveServices/accounts/account1/raiPolicies/policy1
// ```
type AccountRaiPolicy struct {
	pulumi.CustomResourceState

	// The name of the base policy to use for this RAI Policy. Changing this forces a new resource to be created.
	BasePolicyName pulumi.StringOutput `pulumi:"basePolicyName"`
	// The ID of the Cognitive Service Account to which this RAI Policy should be associated. Changing this forces a new resource to be created.
	CognitiveAccountId pulumi.StringOutput `pulumi:"cognitiveAccountId"`
	// A `contentFilter` block as defined below.
	ContentFilters AccountRaiPolicyContentFilterArrayOutput `pulumi:"contentFilters"`
	// The mode of the RAI Policy. Possible values are `Default`, `Deferred`, `Blocking` or `Asynchronous_filter`.
	Mode pulumi.StringPtrOutput `pulumi:"mode"`
	// The name of the Cognitive Service Account RAI Policy. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewAccountRaiPolicy registers a new resource with the given unique name, arguments, and options.
func NewAccountRaiPolicy(ctx *pulumi.Context,
	name string, args *AccountRaiPolicyArgs, opts ...pulumi.ResourceOption) (*AccountRaiPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BasePolicyName == nil {
		return nil, errors.New("invalid value for required argument 'BasePolicyName'")
	}
	if args.CognitiveAccountId == nil {
		return nil, errors.New("invalid value for required argument 'CognitiveAccountId'")
	}
	if args.ContentFilters == nil {
		return nil, errors.New("invalid value for required argument 'ContentFilters'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccountRaiPolicy
	err := ctx.RegisterResource("azure:cognitive/accountRaiPolicy:AccountRaiPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccountRaiPolicy gets an existing AccountRaiPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountRaiPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountRaiPolicyState, opts ...pulumi.ResourceOption) (*AccountRaiPolicy, error) {
	var resource AccountRaiPolicy
	err := ctx.ReadResource("azure:cognitive/accountRaiPolicy:AccountRaiPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccountRaiPolicy resources.
type accountRaiPolicyState struct {
	// The name of the base policy to use for this RAI Policy. Changing this forces a new resource to be created.
	BasePolicyName *string `pulumi:"basePolicyName"`
	// The ID of the Cognitive Service Account to which this RAI Policy should be associated. Changing this forces a new resource to be created.
	CognitiveAccountId *string `pulumi:"cognitiveAccountId"`
	// A `contentFilter` block as defined below.
	ContentFilters []AccountRaiPolicyContentFilter `pulumi:"contentFilters"`
	// The mode of the RAI Policy. Possible values are `Default`, `Deferred`, `Blocking` or `Asynchronous_filter`.
	Mode *string `pulumi:"mode"`
	// The name of the Cognitive Service Account RAI Policy. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

type AccountRaiPolicyState struct {
	// The name of the base policy to use for this RAI Policy. Changing this forces a new resource to be created.
	BasePolicyName pulumi.StringPtrInput
	// The ID of the Cognitive Service Account to which this RAI Policy should be associated. Changing this forces a new resource to be created.
	CognitiveAccountId pulumi.StringPtrInput
	// A `contentFilter` block as defined below.
	ContentFilters AccountRaiPolicyContentFilterArrayInput
	// The mode of the RAI Policy. Possible values are `Default`, `Deferred`, `Blocking` or `Asynchronous_filter`.
	Mode pulumi.StringPtrInput
	// The name of the Cognitive Service Account RAI Policy. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
}

func (AccountRaiPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountRaiPolicyState)(nil)).Elem()
}

type accountRaiPolicyArgs struct {
	// The name of the base policy to use for this RAI Policy. Changing this forces a new resource to be created.
	BasePolicyName string `pulumi:"basePolicyName"`
	// The ID of the Cognitive Service Account to which this RAI Policy should be associated. Changing this forces a new resource to be created.
	CognitiveAccountId string `pulumi:"cognitiveAccountId"`
	// A `contentFilter` block as defined below.
	ContentFilters []AccountRaiPolicyContentFilter `pulumi:"contentFilters"`
	// The mode of the RAI Policy. Possible values are `Default`, `Deferred`, `Blocking` or `Asynchronous_filter`.
	Mode *string `pulumi:"mode"`
	// The name of the Cognitive Service Account RAI Policy. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a AccountRaiPolicy resource.
type AccountRaiPolicyArgs struct {
	// The name of the base policy to use for this RAI Policy. Changing this forces a new resource to be created.
	BasePolicyName pulumi.StringInput
	// The ID of the Cognitive Service Account to which this RAI Policy should be associated. Changing this forces a new resource to be created.
	CognitiveAccountId pulumi.StringInput
	// A `contentFilter` block as defined below.
	ContentFilters AccountRaiPolicyContentFilterArrayInput
	// The mode of the RAI Policy. Possible values are `Default`, `Deferred`, `Blocking` or `Asynchronous_filter`.
	Mode pulumi.StringPtrInput
	// The name of the Cognitive Service Account RAI Policy. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
}

func (AccountRaiPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountRaiPolicyArgs)(nil)).Elem()
}

type AccountRaiPolicyInput interface {
	pulumi.Input

	ToAccountRaiPolicyOutput() AccountRaiPolicyOutput
	ToAccountRaiPolicyOutputWithContext(ctx context.Context) AccountRaiPolicyOutput
}

func (*AccountRaiPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountRaiPolicy)(nil)).Elem()
}

func (i *AccountRaiPolicy) ToAccountRaiPolicyOutput() AccountRaiPolicyOutput {
	return i.ToAccountRaiPolicyOutputWithContext(context.Background())
}

func (i *AccountRaiPolicy) ToAccountRaiPolicyOutputWithContext(ctx context.Context) AccountRaiPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountRaiPolicyOutput)
}

// AccountRaiPolicyArrayInput is an input type that accepts AccountRaiPolicyArray and AccountRaiPolicyArrayOutput values.
// You can construct a concrete instance of `AccountRaiPolicyArrayInput` via:
//
//	AccountRaiPolicyArray{ AccountRaiPolicyArgs{...} }
type AccountRaiPolicyArrayInput interface {
	pulumi.Input

	ToAccountRaiPolicyArrayOutput() AccountRaiPolicyArrayOutput
	ToAccountRaiPolicyArrayOutputWithContext(context.Context) AccountRaiPolicyArrayOutput
}

type AccountRaiPolicyArray []AccountRaiPolicyInput

func (AccountRaiPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountRaiPolicy)(nil)).Elem()
}

func (i AccountRaiPolicyArray) ToAccountRaiPolicyArrayOutput() AccountRaiPolicyArrayOutput {
	return i.ToAccountRaiPolicyArrayOutputWithContext(context.Background())
}

func (i AccountRaiPolicyArray) ToAccountRaiPolicyArrayOutputWithContext(ctx context.Context) AccountRaiPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountRaiPolicyArrayOutput)
}

// AccountRaiPolicyMapInput is an input type that accepts AccountRaiPolicyMap and AccountRaiPolicyMapOutput values.
// You can construct a concrete instance of `AccountRaiPolicyMapInput` via:
//
//	AccountRaiPolicyMap{ "key": AccountRaiPolicyArgs{...} }
type AccountRaiPolicyMapInput interface {
	pulumi.Input

	ToAccountRaiPolicyMapOutput() AccountRaiPolicyMapOutput
	ToAccountRaiPolicyMapOutputWithContext(context.Context) AccountRaiPolicyMapOutput
}

type AccountRaiPolicyMap map[string]AccountRaiPolicyInput

func (AccountRaiPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountRaiPolicy)(nil)).Elem()
}

func (i AccountRaiPolicyMap) ToAccountRaiPolicyMapOutput() AccountRaiPolicyMapOutput {
	return i.ToAccountRaiPolicyMapOutputWithContext(context.Background())
}

func (i AccountRaiPolicyMap) ToAccountRaiPolicyMapOutputWithContext(ctx context.Context) AccountRaiPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountRaiPolicyMapOutput)
}

type AccountRaiPolicyOutput struct{ *pulumi.OutputState }

func (AccountRaiPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountRaiPolicy)(nil)).Elem()
}

func (o AccountRaiPolicyOutput) ToAccountRaiPolicyOutput() AccountRaiPolicyOutput {
	return o
}

func (o AccountRaiPolicyOutput) ToAccountRaiPolicyOutputWithContext(ctx context.Context) AccountRaiPolicyOutput {
	return o
}

// The name of the base policy to use for this RAI Policy. Changing this forces a new resource to be created.
func (o AccountRaiPolicyOutput) BasePolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountRaiPolicy) pulumi.StringOutput { return v.BasePolicyName }).(pulumi.StringOutput)
}

// The ID of the Cognitive Service Account to which this RAI Policy should be associated. Changing this forces a new resource to be created.
func (o AccountRaiPolicyOutput) CognitiveAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountRaiPolicy) pulumi.StringOutput { return v.CognitiveAccountId }).(pulumi.StringOutput)
}

// A `contentFilter` block as defined below.
func (o AccountRaiPolicyOutput) ContentFilters() AccountRaiPolicyContentFilterArrayOutput {
	return o.ApplyT(func(v *AccountRaiPolicy) AccountRaiPolicyContentFilterArrayOutput { return v.ContentFilters }).(AccountRaiPolicyContentFilterArrayOutput)
}

// The mode of the RAI Policy. Possible values are `Default`, `Deferred`, `Blocking` or `Asynchronous_filter`.
func (o AccountRaiPolicyOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountRaiPolicy) pulumi.StringPtrOutput { return v.Mode }).(pulumi.StringPtrOutput)
}

// The name of the Cognitive Service Account RAI Policy. Changing this forces a new resource to be created.
func (o AccountRaiPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountRaiPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o AccountRaiPolicyOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AccountRaiPolicy) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type AccountRaiPolicyArrayOutput struct{ *pulumi.OutputState }

func (AccountRaiPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountRaiPolicy)(nil)).Elem()
}

func (o AccountRaiPolicyArrayOutput) ToAccountRaiPolicyArrayOutput() AccountRaiPolicyArrayOutput {
	return o
}

func (o AccountRaiPolicyArrayOutput) ToAccountRaiPolicyArrayOutputWithContext(ctx context.Context) AccountRaiPolicyArrayOutput {
	return o
}

func (o AccountRaiPolicyArrayOutput) Index(i pulumi.IntInput) AccountRaiPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccountRaiPolicy {
		return vs[0].([]*AccountRaiPolicy)[vs[1].(int)]
	}).(AccountRaiPolicyOutput)
}

type AccountRaiPolicyMapOutput struct{ *pulumi.OutputState }

func (AccountRaiPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountRaiPolicy)(nil)).Elem()
}

func (o AccountRaiPolicyMapOutput) ToAccountRaiPolicyMapOutput() AccountRaiPolicyMapOutput {
	return o
}

func (o AccountRaiPolicyMapOutput) ToAccountRaiPolicyMapOutputWithContext(ctx context.Context) AccountRaiPolicyMapOutput {
	return o
}

func (o AccountRaiPolicyMapOutput) MapIndex(k pulumi.StringInput) AccountRaiPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccountRaiPolicy {
		return vs[0].(map[string]*AccountRaiPolicy)[vs[1].(string)]
	}).(AccountRaiPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountRaiPolicyInput)(nil)).Elem(), &AccountRaiPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountRaiPolicyArrayInput)(nil)).Elem(), AccountRaiPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountRaiPolicyMapInput)(nil)).Elem(), AccountRaiPolicyMap{})
	pulumi.RegisterOutputType(AccountRaiPolicyOutput{})
	pulumi.RegisterOutputType(AccountRaiPolicyArrayOutput{})
	pulumi.RegisterOutputType(AccountRaiPolicyMapOutput{})
}
