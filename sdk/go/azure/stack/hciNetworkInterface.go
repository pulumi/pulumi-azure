// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stack

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Azure Stack HCI Network Interface.
//
// ## Import
//
// Azure Stack HCI Network Interfaces can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:stack/hciNetworkInterface:HciNetworkInterface example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.AzureStackHCI/networkInterfaces/ni1
// ```
type HciNetworkInterface struct {
	pulumi.CustomResourceState

	// The ID of the Custom Location where the Azure Stack HCI Network Interface should exist. Changing this forces a new resource to be created.
	CustomLocationId pulumi.StringOutput `pulumi:"customLocationId"`
	// A list of IPv4 addresses of DNS servers available to VMs deployed in the Network Interface. Changing this forces a new resource to be created.
	DnsServers pulumi.StringArrayOutput `pulumi:"dnsServers"`
	// An `ipConfiguration` block as defined below. Changing this forces a new resource to be created.
	IpConfiguration HciNetworkInterfaceIpConfigurationOutput `pulumi:"ipConfiguration"`
	// The Azure Region where the Azure Stack HCI Network Interface should exist. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The MAC address of the Network Interface. Changing this forces a new resource to be created.
	//
	// > **Note:** If `macAddress` is not specified, it will be assigned by the server. If you experience a diff you may need to add this to `ignoreChanges`.
	MacAddress pulumi.StringPtrOutput `pulumi:"macAddress"`
	// The name which should be used for this Azure Stack HCI Network Interface. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Resource Group where the Azure Stack HCI Network Interface should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Azure Stack HCI Network Interface.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewHciNetworkInterface registers a new resource with the given unique name, arguments, and options.
func NewHciNetworkInterface(ctx *pulumi.Context,
	name string, args *HciNetworkInterfaceArgs, opts ...pulumi.ResourceOption) (*HciNetworkInterface, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CustomLocationId == nil {
		return nil, errors.New("invalid value for required argument 'CustomLocationId'")
	}
	if args.IpConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'IpConfiguration'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HciNetworkInterface
	err := ctx.RegisterResource("azure:stack/hciNetworkInterface:HciNetworkInterface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHciNetworkInterface gets an existing HciNetworkInterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHciNetworkInterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HciNetworkInterfaceState, opts ...pulumi.ResourceOption) (*HciNetworkInterface, error) {
	var resource HciNetworkInterface
	err := ctx.ReadResource("azure:stack/hciNetworkInterface:HciNetworkInterface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HciNetworkInterface resources.
type hciNetworkInterfaceState struct {
	// The ID of the Custom Location where the Azure Stack HCI Network Interface should exist. Changing this forces a new resource to be created.
	CustomLocationId *string `pulumi:"customLocationId"`
	// A list of IPv4 addresses of DNS servers available to VMs deployed in the Network Interface. Changing this forces a new resource to be created.
	DnsServers []string `pulumi:"dnsServers"`
	// An `ipConfiguration` block as defined below. Changing this forces a new resource to be created.
	IpConfiguration *HciNetworkInterfaceIpConfiguration `pulumi:"ipConfiguration"`
	// The Azure Region where the Azure Stack HCI Network Interface should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The MAC address of the Network Interface. Changing this forces a new resource to be created.
	//
	// > **Note:** If `macAddress` is not specified, it will be assigned by the server. If you experience a diff you may need to add this to `ignoreChanges`.
	MacAddress *string `pulumi:"macAddress"`
	// The name which should be used for this Azure Stack HCI Network Interface. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Azure Stack HCI Network Interface should exist. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Azure Stack HCI Network Interface.
	Tags map[string]string `pulumi:"tags"`
}

type HciNetworkInterfaceState struct {
	// The ID of the Custom Location where the Azure Stack HCI Network Interface should exist. Changing this forces a new resource to be created.
	CustomLocationId pulumi.StringPtrInput
	// A list of IPv4 addresses of DNS servers available to VMs deployed in the Network Interface. Changing this forces a new resource to be created.
	DnsServers pulumi.StringArrayInput
	// An `ipConfiguration` block as defined below. Changing this forces a new resource to be created.
	IpConfiguration HciNetworkInterfaceIpConfigurationPtrInput
	// The Azure Region where the Azure Stack HCI Network Interface should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The MAC address of the Network Interface. Changing this forces a new resource to be created.
	//
	// > **Note:** If `macAddress` is not specified, it will be assigned by the server. If you experience a diff you may need to add this to `ignoreChanges`.
	MacAddress pulumi.StringPtrInput
	// The name which should be used for this Azure Stack HCI Network Interface. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Azure Stack HCI Network Interface should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Azure Stack HCI Network Interface.
	Tags pulumi.StringMapInput
}

func (HciNetworkInterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*hciNetworkInterfaceState)(nil)).Elem()
}

type hciNetworkInterfaceArgs struct {
	// The ID of the Custom Location where the Azure Stack HCI Network Interface should exist. Changing this forces a new resource to be created.
	CustomLocationId string `pulumi:"customLocationId"`
	// A list of IPv4 addresses of DNS servers available to VMs deployed in the Network Interface. Changing this forces a new resource to be created.
	DnsServers []string `pulumi:"dnsServers"`
	// An `ipConfiguration` block as defined below. Changing this forces a new resource to be created.
	IpConfiguration HciNetworkInterfaceIpConfiguration `pulumi:"ipConfiguration"`
	// The Azure Region where the Azure Stack HCI Network Interface should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The MAC address of the Network Interface. Changing this forces a new resource to be created.
	//
	// > **Note:** If `macAddress` is not specified, it will be assigned by the server. If you experience a diff you may need to add this to `ignoreChanges`.
	MacAddress *string `pulumi:"macAddress"`
	// The name which should be used for this Azure Stack HCI Network Interface. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Azure Stack HCI Network Interface should exist. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Azure Stack HCI Network Interface.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a HciNetworkInterface resource.
type HciNetworkInterfaceArgs struct {
	// The ID of the Custom Location where the Azure Stack HCI Network Interface should exist. Changing this forces a new resource to be created.
	CustomLocationId pulumi.StringInput
	// A list of IPv4 addresses of DNS servers available to VMs deployed in the Network Interface. Changing this forces a new resource to be created.
	DnsServers pulumi.StringArrayInput
	// An `ipConfiguration` block as defined below. Changing this forces a new resource to be created.
	IpConfiguration HciNetworkInterfaceIpConfigurationInput
	// The Azure Region where the Azure Stack HCI Network Interface should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The MAC address of the Network Interface. Changing this forces a new resource to be created.
	//
	// > **Note:** If `macAddress` is not specified, it will be assigned by the server. If you experience a diff you may need to add this to `ignoreChanges`.
	MacAddress pulumi.StringPtrInput
	// The name which should be used for this Azure Stack HCI Network Interface. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Azure Stack HCI Network Interface should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags which should be assigned to the Azure Stack HCI Network Interface.
	Tags pulumi.StringMapInput
}

func (HciNetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hciNetworkInterfaceArgs)(nil)).Elem()
}

type HciNetworkInterfaceInput interface {
	pulumi.Input

	ToHciNetworkInterfaceOutput() HciNetworkInterfaceOutput
	ToHciNetworkInterfaceOutputWithContext(ctx context.Context) HciNetworkInterfaceOutput
}

func (*HciNetworkInterface) ElementType() reflect.Type {
	return reflect.TypeOf((**HciNetworkInterface)(nil)).Elem()
}

func (i *HciNetworkInterface) ToHciNetworkInterfaceOutput() HciNetworkInterfaceOutput {
	return i.ToHciNetworkInterfaceOutputWithContext(context.Background())
}

func (i *HciNetworkInterface) ToHciNetworkInterfaceOutputWithContext(ctx context.Context) HciNetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HciNetworkInterfaceOutput)
}

// HciNetworkInterfaceArrayInput is an input type that accepts HciNetworkInterfaceArray and HciNetworkInterfaceArrayOutput values.
// You can construct a concrete instance of `HciNetworkInterfaceArrayInput` via:
//
//	HciNetworkInterfaceArray{ HciNetworkInterfaceArgs{...} }
type HciNetworkInterfaceArrayInput interface {
	pulumi.Input

	ToHciNetworkInterfaceArrayOutput() HciNetworkInterfaceArrayOutput
	ToHciNetworkInterfaceArrayOutputWithContext(context.Context) HciNetworkInterfaceArrayOutput
}

type HciNetworkInterfaceArray []HciNetworkInterfaceInput

func (HciNetworkInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HciNetworkInterface)(nil)).Elem()
}

func (i HciNetworkInterfaceArray) ToHciNetworkInterfaceArrayOutput() HciNetworkInterfaceArrayOutput {
	return i.ToHciNetworkInterfaceArrayOutputWithContext(context.Background())
}

func (i HciNetworkInterfaceArray) ToHciNetworkInterfaceArrayOutputWithContext(ctx context.Context) HciNetworkInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HciNetworkInterfaceArrayOutput)
}

// HciNetworkInterfaceMapInput is an input type that accepts HciNetworkInterfaceMap and HciNetworkInterfaceMapOutput values.
// You can construct a concrete instance of `HciNetworkInterfaceMapInput` via:
//
//	HciNetworkInterfaceMap{ "key": HciNetworkInterfaceArgs{...} }
type HciNetworkInterfaceMapInput interface {
	pulumi.Input

	ToHciNetworkInterfaceMapOutput() HciNetworkInterfaceMapOutput
	ToHciNetworkInterfaceMapOutputWithContext(context.Context) HciNetworkInterfaceMapOutput
}

type HciNetworkInterfaceMap map[string]HciNetworkInterfaceInput

func (HciNetworkInterfaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HciNetworkInterface)(nil)).Elem()
}

func (i HciNetworkInterfaceMap) ToHciNetworkInterfaceMapOutput() HciNetworkInterfaceMapOutput {
	return i.ToHciNetworkInterfaceMapOutputWithContext(context.Background())
}

func (i HciNetworkInterfaceMap) ToHciNetworkInterfaceMapOutputWithContext(ctx context.Context) HciNetworkInterfaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HciNetworkInterfaceMapOutput)
}

type HciNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (HciNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HciNetworkInterface)(nil)).Elem()
}

func (o HciNetworkInterfaceOutput) ToHciNetworkInterfaceOutput() HciNetworkInterfaceOutput {
	return o
}

func (o HciNetworkInterfaceOutput) ToHciNetworkInterfaceOutputWithContext(ctx context.Context) HciNetworkInterfaceOutput {
	return o
}

// The ID of the Custom Location where the Azure Stack HCI Network Interface should exist. Changing this forces a new resource to be created.
func (o HciNetworkInterfaceOutput) CustomLocationId() pulumi.StringOutput {
	return o.ApplyT(func(v *HciNetworkInterface) pulumi.StringOutput { return v.CustomLocationId }).(pulumi.StringOutput)
}

// A list of IPv4 addresses of DNS servers available to VMs deployed in the Network Interface. Changing this forces a new resource to be created.
func (o HciNetworkInterfaceOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HciNetworkInterface) pulumi.StringArrayOutput { return v.DnsServers }).(pulumi.StringArrayOutput)
}

// An `ipConfiguration` block as defined below. Changing this forces a new resource to be created.
func (o HciNetworkInterfaceOutput) IpConfiguration() HciNetworkInterfaceIpConfigurationOutput {
	return o.ApplyT(func(v *HciNetworkInterface) HciNetworkInterfaceIpConfigurationOutput { return v.IpConfiguration }).(HciNetworkInterfaceIpConfigurationOutput)
}

// The Azure Region where the Azure Stack HCI Network Interface should exist. Changing this forces a new resource to be created.
func (o HciNetworkInterfaceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *HciNetworkInterface) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The MAC address of the Network Interface. Changing this forces a new resource to be created.
//
// > **Note:** If `macAddress` is not specified, it will be assigned by the server. If you experience a diff you may need to add this to `ignoreChanges`.
func (o HciNetworkInterfaceOutput) MacAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HciNetworkInterface) pulumi.StringPtrOutput { return v.MacAddress }).(pulumi.StringPtrOutput)
}

// The name which should be used for this Azure Stack HCI Network Interface. Changing this forces a new resource to be created.
func (o HciNetworkInterfaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HciNetworkInterface) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the Resource Group where the Azure Stack HCI Network Interface should exist. Changing this forces a new resource to be created.
func (o HciNetworkInterfaceOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *HciNetworkInterface) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the Azure Stack HCI Network Interface.
func (o HciNetworkInterfaceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HciNetworkInterface) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type HciNetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (HciNetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HciNetworkInterface)(nil)).Elem()
}

func (o HciNetworkInterfaceArrayOutput) ToHciNetworkInterfaceArrayOutput() HciNetworkInterfaceArrayOutput {
	return o
}

func (o HciNetworkInterfaceArrayOutput) ToHciNetworkInterfaceArrayOutputWithContext(ctx context.Context) HciNetworkInterfaceArrayOutput {
	return o
}

func (o HciNetworkInterfaceArrayOutput) Index(i pulumi.IntInput) HciNetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HciNetworkInterface {
		return vs[0].([]*HciNetworkInterface)[vs[1].(int)]
	}).(HciNetworkInterfaceOutput)
}

type HciNetworkInterfaceMapOutput struct{ *pulumi.OutputState }

func (HciNetworkInterfaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HciNetworkInterface)(nil)).Elem()
}

func (o HciNetworkInterfaceMapOutput) ToHciNetworkInterfaceMapOutput() HciNetworkInterfaceMapOutput {
	return o
}

func (o HciNetworkInterfaceMapOutput) ToHciNetworkInterfaceMapOutputWithContext(ctx context.Context) HciNetworkInterfaceMapOutput {
	return o
}

func (o HciNetworkInterfaceMapOutput) MapIndex(k pulumi.StringInput) HciNetworkInterfaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HciNetworkInterface {
		return vs[0].(map[string]*HciNetworkInterface)[vs[1].(string)]
	}).(HciNetworkInterfaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HciNetworkInterfaceInput)(nil)).Elem(), &HciNetworkInterface{})
	pulumi.RegisterInputType(reflect.TypeOf((*HciNetworkInterfaceArrayInput)(nil)).Elem(), HciNetworkInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HciNetworkInterfaceMapInput)(nil)).Elem(), HciNetworkInterfaceMap{})
	pulumi.RegisterOutputType(HciNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(HciNetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(HciNetworkInterfaceMapOutput{})
}
