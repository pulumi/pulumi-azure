// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stack

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Azure Stack HCI Logical Network.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/stack"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-rg"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = stack.NewHciLogicalNetwork(ctx, "example", &stack.HciLogicalNetworkArgs{
//				Name:              pulumi.String("example-hci-ln"),
//				ResourceGroupName: example.Name,
//				Location:          example.Location,
//				CustomLocationId:  pulumi.String("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.ExtendedLocation/customLocations/cl1"),
//				VirtualSwitchName: pulumi.String("ConvergedSwitch(managementcompute)"),
//				DnsServers: pulumi.StringArray{
//					pulumi.String("10.0.0.7"),
//					pulumi.String("10.0.0.8"),
//				},
//				Subnet: &stack.HciLogicalNetworkSubnetArgs{
//					IpAllocationMethod: pulumi.String("Static"),
//					AddressPrefix:      pulumi.String("10.0.0.0/24"),
//					VlanId:             pulumi.Int(123),
//					Route: map[string]interface{}{
//						"addressPrefix":    "0.0.0.0/0",
//						"nextHopIpAddress": "10.0.0.1",
//					},
//				},
//				Tags: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This resource uses the following Azure API Providers:
//
// * `Microsoft.AzureStackHCI` - 2024-01-01
//
// ## Import
//
// Azure Stack HCI Logical Networks can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:stack/hciLogicalNetwork:HciLogicalNetwork example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.AzureStackHCI/logicalNetworks/ln1
// ```
type HciLogicalNetwork struct {
	pulumi.CustomResourceState

	// The ID of Custom Location where the Azure Stack HCI Logical Network should exist. Changing this forces a new resource to be created.
	CustomLocationId pulumi.StringOutput `pulumi:"customLocationId"`
	// A list of IPv4 addresses of DNS servers available to VMs deployed in the Logical Networks. Changing this forces a new resource to be created.
	DnsServers pulumi.StringArrayOutput `pulumi:"dnsServers"`
	// The Azure Region where the Azure Stack HCI Logical Network should exist. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name which should be used for this Azure Stack HCI Logical Network. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Resource Group where the Azure Stack HCI Logical Network should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A `subnet` block as defined below. Changing this forces a new resource to be created.
	Subnet HciLogicalNetworkSubnetOutput `pulumi:"subnet"`
	// A mapping of tags which should be assigned to the Azure Stack HCI Logical Network.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The name of the virtual switch on the cluster used to associate with the Azure Stack HCI Logical Network. Possible switch names can be retrieved by following this [Azure guide](https://learn.microsoft.com/azure-stack/hci/manage/create-logical-networks?tabs=azurecli#prerequisites). Changing this forces a new resource to be created.
	VirtualSwitchName pulumi.StringOutput `pulumi:"virtualSwitchName"`
}

// NewHciLogicalNetwork registers a new resource with the given unique name, arguments, and options.
func NewHciLogicalNetwork(ctx *pulumi.Context,
	name string, args *HciLogicalNetworkArgs, opts ...pulumi.ResourceOption) (*HciLogicalNetwork, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CustomLocationId == nil {
		return nil, errors.New("invalid value for required argument 'CustomLocationId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Subnet == nil {
		return nil, errors.New("invalid value for required argument 'Subnet'")
	}
	if args.VirtualSwitchName == nil {
		return nil, errors.New("invalid value for required argument 'VirtualSwitchName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HciLogicalNetwork
	err := ctx.RegisterResource("azure:stack/hciLogicalNetwork:HciLogicalNetwork", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHciLogicalNetwork gets an existing HciLogicalNetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHciLogicalNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HciLogicalNetworkState, opts ...pulumi.ResourceOption) (*HciLogicalNetwork, error) {
	var resource HciLogicalNetwork
	err := ctx.ReadResource("azure:stack/hciLogicalNetwork:HciLogicalNetwork", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HciLogicalNetwork resources.
type hciLogicalNetworkState struct {
	// The ID of Custom Location where the Azure Stack HCI Logical Network should exist. Changing this forces a new resource to be created.
	CustomLocationId *string `pulumi:"customLocationId"`
	// A list of IPv4 addresses of DNS servers available to VMs deployed in the Logical Networks. Changing this forces a new resource to be created.
	DnsServers []string `pulumi:"dnsServers"`
	// The Azure Region where the Azure Stack HCI Logical Network should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Azure Stack HCI Logical Network. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Azure Stack HCI Logical Network should exist. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A `subnet` block as defined below. Changing this forces a new resource to be created.
	Subnet *HciLogicalNetworkSubnet `pulumi:"subnet"`
	// A mapping of tags which should be assigned to the Azure Stack HCI Logical Network.
	Tags map[string]string `pulumi:"tags"`
	// The name of the virtual switch on the cluster used to associate with the Azure Stack HCI Logical Network. Possible switch names can be retrieved by following this [Azure guide](https://learn.microsoft.com/azure-stack/hci/manage/create-logical-networks?tabs=azurecli#prerequisites). Changing this forces a new resource to be created.
	VirtualSwitchName *string `pulumi:"virtualSwitchName"`
}

type HciLogicalNetworkState struct {
	// The ID of Custom Location where the Azure Stack HCI Logical Network should exist. Changing this forces a new resource to be created.
	CustomLocationId pulumi.StringPtrInput
	// A list of IPv4 addresses of DNS servers available to VMs deployed in the Logical Networks. Changing this forces a new resource to be created.
	DnsServers pulumi.StringArrayInput
	// The Azure Region where the Azure Stack HCI Logical Network should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Azure Stack HCI Logical Network. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Azure Stack HCI Logical Network should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A `subnet` block as defined below. Changing this forces a new resource to be created.
	Subnet HciLogicalNetworkSubnetPtrInput
	// A mapping of tags which should be assigned to the Azure Stack HCI Logical Network.
	Tags pulumi.StringMapInput
	// The name of the virtual switch on the cluster used to associate with the Azure Stack HCI Logical Network. Possible switch names can be retrieved by following this [Azure guide](https://learn.microsoft.com/azure-stack/hci/manage/create-logical-networks?tabs=azurecli#prerequisites). Changing this forces a new resource to be created.
	VirtualSwitchName pulumi.StringPtrInput
}

func (HciLogicalNetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*hciLogicalNetworkState)(nil)).Elem()
}

type hciLogicalNetworkArgs struct {
	// The ID of Custom Location where the Azure Stack HCI Logical Network should exist. Changing this forces a new resource to be created.
	CustomLocationId string `pulumi:"customLocationId"`
	// A list of IPv4 addresses of DNS servers available to VMs deployed in the Logical Networks. Changing this forces a new resource to be created.
	DnsServers []string `pulumi:"dnsServers"`
	// The Azure Region where the Azure Stack HCI Logical Network should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Azure Stack HCI Logical Network. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Azure Stack HCI Logical Network should exist. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A `subnet` block as defined below. Changing this forces a new resource to be created.
	Subnet HciLogicalNetworkSubnet `pulumi:"subnet"`
	// A mapping of tags which should be assigned to the Azure Stack HCI Logical Network.
	Tags map[string]string `pulumi:"tags"`
	// The name of the virtual switch on the cluster used to associate with the Azure Stack HCI Logical Network. Possible switch names can be retrieved by following this [Azure guide](https://learn.microsoft.com/azure-stack/hci/manage/create-logical-networks?tabs=azurecli#prerequisites). Changing this forces a new resource to be created.
	VirtualSwitchName string `pulumi:"virtualSwitchName"`
}

// The set of arguments for constructing a HciLogicalNetwork resource.
type HciLogicalNetworkArgs struct {
	// The ID of Custom Location where the Azure Stack HCI Logical Network should exist. Changing this forces a new resource to be created.
	CustomLocationId pulumi.StringInput
	// A list of IPv4 addresses of DNS servers available to VMs deployed in the Logical Networks. Changing this forces a new resource to be created.
	DnsServers pulumi.StringArrayInput
	// The Azure Region where the Azure Stack HCI Logical Network should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Azure Stack HCI Logical Network. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Azure Stack HCI Logical Network should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A `subnet` block as defined below. Changing this forces a new resource to be created.
	Subnet HciLogicalNetworkSubnetInput
	// A mapping of tags which should be assigned to the Azure Stack HCI Logical Network.
	Tags pulumi.StringMapInput
	// The name of the virtual switch on the cluster used to associate with the Azure Stack HCI Logical Network. Possible switch names can be retrieved by following this [Azure guide](https://learn.microsoft.com/azure-stack/hci/manage/create-logical-networks?tabs=azurecli#prerequisites). Changing this forces a new resource to be created.
	VirtualSwitchName pulumi.StringInput
}

func (HciLogicalNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hciLogicalNetworkArgs)(nil)).Elem()
}

type HciLogicalNetworkInput interface {
	pulumi.Input

	ToHciLogicalNetworkOutput() HciLogicalNetworkOutput
	ToHciLogicalNetworkOutputWithContext(ctx context.Context) HciLogicalNetworkOutput
}

func (*HciLogicalNetwork) ElementType() reflect.Type {
	return reflect.TypeOf((**HciLogicalNetwork)(nil)).Elem()
}

func (i *HciLogicalNetwork) ToHciLogicalNetworkOutput() HciLogicalNetworkOutput {
	return i.ToHciLogicalNetworkOutputWithContext(context.Background())
}

func (i *HciLogicalNetwork) ToHciLogicalNetworkOutputWithContext(ctx context.Context) HciLogicalNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HciLogicalNetworkOutput)
}

// HciLogicalNetworkArrayInput is an input type that accepts HciLogicalNetworkArray and HciLogicalNetworkArrayOutput values.
// You can construct a concrete instance of `HciLogicalNetworkArrayInput` via:
//
//	HciLogicalNetworkArray{ HciLogicalNetworkArgs{...} }
type HciLogicalNetworkArrayInput interface {
	pulumi.Input

	ToHciLogicalNetworkArrayOutput() HciLogicalNetworkArrayOutput
	ToHciLogicalNetworkArrayOutputWithContext(context.Context) HciLogicalNetworkArrayOutput
}

type HciLogicalNetworkArray []HciLogicalNetworkInput

func (HciLogicalNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HciLogicalNetwork)(nil)).Elem()
}

func (i HciLogicalNetworkArray) ToHciLogicalNetworkArrayOutput() HciLogicalNetworkArrayOutput {
	return i.ToHciLogicalNetworkArrayOutputWithContext(context.Background())
}

func (i HciLogicalNetworkArray) ToHciLogicalNetworkArrayOutputWithContext(ctx context.Context) HciLogicalNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HciLogicalNetworkArrayOutput)
}

// HciLogicalNetworkMapInput is an input type that accepts HciLogicalNetworkMap and HciLogicalNetworkMapOutput values.
// You can construct a concrete instance of `HciLogicalNetworkMapInput` via:
//
//	HciLogicalNetworkMap{ "key": HciLogicalNetworkArgs{...} }
type HciLogicalNetworkMapInput interface {
	pulumi.Input

	ToHciLogicalNetworkMapOutput() HciLogicalNetworkMapOutput
	ToHciLogicalNetworkMapOutputWithContext(context.Context) HciLogicalNetworkMapOutput
}

type HciLogicalNetworkMap map[string]HciLogicalNetworkInput

func (HciLogicalNetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HciLogicalNetwork)(nil)).Elem()
}

func (i HciLogicalNetworkMap) ToHciLogicalNetworkMapOutput() HciLogicalNetworkMapOutput {
	return i.ToHciLogicalNetworkMapOutputWithContext(context.Background())
}

func (i HciLogicalNetworkMap) ToHciLogicalNetworkMapOutputWithContext(ctx context.Context) HciLogicalNetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HciLogicalNetworkMapOutput)
}

type HciLogicalNetworkOutput struct{ *pulumi.OutputState }

func (HciLogicalNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HciLogicalNetwork)(nil)).Elem()
}

func (o HciLogicalNetworkOutput) ToHciLogicalNetworkOutput() HciLogicalNetworkOutput {
	return o
}

func (o HciLogicalNetworkOutput) ToHciLogicalNetworkOutputWithContext(ctx context.Context) HciLogicalNetworkOutput {
	return o
}

// The ID of Custom Location where the Azure Stack HCI Logical Network should exist. Changing this forces a new resource to be created.
func (o HciLogicalNetworkOutput) CustomLocationId() pulumi.StringOutput {
	return o.ApplyT(func(v *HciLogicalNetwork) pulumi.StringOutput { return v.CustomLocationId }).(pulumi.StringOutput)
}

// A list of IPv4 addresses of DNS servers available to VMs deployed in the Logical Networks. Changing this forces a new resource to be created.
func (o HciLogicalNetworkOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HciLogicalNetwork) pulumi.StringArrayOutput { return v.DnsServers }).(pulumi.StringArrayOutput)
}

// The Azure Region where the Azure Stack HCI Logical Network should exist. Changing this forces a new resource to be created.
func (o HciLogicalNetworkOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *HciLogicalNetwork) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name which should be used for this Azure Stack HCI Logical Network. Changing this forces a new resource to be created.
func (o HciLogicalNetworkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HciLogicalNetwork) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the Resource Group where the Azure Stack HCI Logical Network should exist. Changing this forces a new resource to be created.
func (o HciLogicalNetworkOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *HciLogicalNetwork) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A `subnet` block as defined below. Changing this forces a new resource to be created.
func (o HciLogicalNetworkOutput) Subnet() HciLogicalNetworkSubnetOutput {
	return o.ApplyT(func(v *HciLogicalNetwork) HciLogicalNetworkSubnetOutput { return v.Subnet }).(HciLogicalNetworkSubnetOutput)
}

// A mapping of tags which should be assigned to the Azure Stack HCI Logical Network.
func (o HciLogicalNetworkOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HciLogicalNetwork) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The name of the virtual switch on the cluster used to associate with the Azure Stack HCI Logical Network. Possible switch names can be retrieved by following this [Azure guide](https://learn.microsoft.com/azure-stack/hci/manage/create-logical-networks?tabs=azurecli#prerequisites). Changing this forces a new resource to be created.
func (o HciLogicalNetworkOutput) VirtualSwitchName() pulumi.StringOutput {
	return o.ApplyT(func(v *HciLogicalNetwork) pulumi.StringOutput { return v.VirtualSwitchName }).(pulumi.StringOutput)
}

type HciLogicalNetworkArrayOutput struct{ *pulumi.OutputState }

func (HciLogicalNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HciLogicalNetwork)(nil)).Elem()
}

func (o HciLogicalNetworkArrayOutput) ToHciLogicalNetworkArrayOutput() HciLogicalNetworkArrayOutput {
	return o
}

func (o HciLogicalNetworkArrayOutput) ToHciLogicalNetworkArrayOutputWithContext(ctx context.Context) HciLogicalNetworkArrayOutput {
	return o
}

func (o HciLogicalNetworkArrayOutput) Index(i pulumi.IntInput) HciLogicalNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HciLogicalNetwork {
		return vs[0].([]*HciLogicalNetwork)[vs[1].(int)]
	}).(HciLogicalNetworkOutput)
}

type HciLogicalNetworkMapOutput struct{ *pulumi.OutputState }

func (HciLogicalNetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HciLogicalNetwork)(nil)).Elem()
}

func (o HciLogicalNetworkMapOutput) ToHciLogicalNetworkMapOutput() HciLogicalNetworkMapOutput {
	return o
}

func (o HciLogicalNetworkMapOutput) ToHciLogicalNetworkMapOutputWithContext(ctx context.Context) HciLogicalNetworkMapOutput {
	return o
}

func (o HciLogicalNetworkMapOutput) MapIndex(k pulumi.StringInput) HciLogicalNetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HciLogicalNetwork {
		return vs[0].(map[string]*HciLogicalNetwork)[vs[1].(string)]
	}).(HciLogicalNetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HciLogicalNetworkInput)(nil)).Elem(), &HciLogicalNetwork{})
	pulumi.RegisterInputType(reflect.TypeOf((*HciLogicalNetworkArrayInput)(nil)).Elem(), HciLogicalNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HciLogicalNetworkMapInput)(nil)).Elem(), HciLogicalNetworkMap{})
	pulumi.RegisterOutputType(HciLogicalNetworkOutput{})
	pulumi.RegisterOutputType(HciLogicalNetworkArrayOutput{})
	pulumi.RegisterOutputType(HciLogicalNetworkMapOutput{})
}
