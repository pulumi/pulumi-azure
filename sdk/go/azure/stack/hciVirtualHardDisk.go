// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stack

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Azure Stack HCI Virtual Hard Disk.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/stack"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-rg"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleHciStoragePath, err := stack.NewHciStoragePath(ctx, "example", &stack.HciStoragePathArgs{
//				Name:              pulumi.String("example-sp"),
//				ResourceGroupName: example.Name,
//				Location:          example.Location,
//				CustomLocationId:  pulumi.String("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.ExtendedLocation/customLocations/cl1"),
//				Path:              pulumi.String("C:\\ClusterStorage\\UserStorage_2\\sp-example"),
//				Tags: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = stack.NewHciVirtualHardDisk(ctx, "example", &stack.HciVirtualHardDiskArgs{
//				Name:              pulumi.String("example-vhd"),
//				ResourceGroupName: example.Name,
//				Location:          example.Location,
//				CustomLocationId:  pulumi.String("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.ExtendedLocation/customLocations/cl1"),
//				DiskSizeInGb:      pulumi.Int(2),
//				StoragePathId:     exampleHciStoragePath.ID(),
//				Tags: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Azure Stack HCI Virtual Hard Disks can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:stack/hciVirtualHardDisk:HciVirtualHardDisk example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.AzureStackHCI/virtualHardDisks/disk1
// ```
type HciVirtualHardDisk struct {
	pulumi.CustomResourceState

	// The block size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	BlockSizeInBytes pulumi.IntPtrOutput `pulumi:"blockSizeInBytes"`
	// The ID of the Custom Location where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	CustomLocationId pulumi.StringOutput `pulumi:"customLocationId"`
	// The format of the disk file. Possible values are `vhdx` and `vhd`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	DiskFileFormat pulumi.StringPtrOutput `pulumi:"diskFileFormat"`
	// The size of the disk in GB. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	DiskSizeInGb pulumi.IntOutput `pulumi:"diskSizeInGb"`
	// Whether to enable dynamic sizing for the Azure Stack HCI Virtual Hard Disk. Defaults to `false`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	DynamicEnabled pulumi.BoolPtrOutput `pulumi:"dynamicEnabled"`
	// The hypervisor generation of the Azure Stack HCI Virtual Hard Disk. Possible values are `V1` and `V2`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	HypervGeneration pulumi.StringPtrOutput `pulumi:"hypervGeneration"`
	// The Azure Region where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The logical sector size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	LogicalSectorInBytes pulumi.IntPtrOutput `pulumi:"logicalSectorInBytes"`
	// The name which should be used for this Azure Stack HCI Virtual Hard Disk. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The physical sector size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	PhysicalSectorInBytes pulumi.IntPtrOutput `pulumi:"physicalSectorInBytes"`
	// The name of the Resource Group where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The ID of the Azure Stack HCI Storage Path used for this Virtual Hard Disk. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	//
	// > **Note:** If `storagePathId` is not specified, the Virtual Hard Disk will be placed in a high availability Storage Path. If you experience a diff you may need to add this to `ignoreChanges`.
	StoragePathId pulumi.StringPtrOutput `pulumi:"storagePathId"`
	// A mapping of tags which should be assigned to the Azure Stack HCI Virtual Hard Disk.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewHciVirtualHardDisk registers a new resource with the given unique name, arguments, and options.
func NewHciVirtualHardDisk(ctx *pulumi.Context,
	name string, args *HciVirtualHardDiskArgs, opts ...pulumi.ResourceOption) (*HciVirtualHardDisk, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CustomLocationId == nil {
		return nil, errors.New("invalid value for required argument 'CustomLocationId'")
	}
	if args.DiskSizeInGb == nil {
		return nil, errors.New("invalid value for required argument 'DiskSizeInGb'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HciVirtualHardDisk
	err := ctx.RegisterResource("azure:stack/hciVirtualHardDisk:HciVirtualHardDisk", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHciVirtualHardDisk gets an existing HciVirtualHardDisk resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHciVirtualHardDisk(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HciVirtualHardDiskState, opts ...pulumi.ResourceOption) (*HciVirtualHardDisk, error) {
	var resource HciVirtualHardDisk
	err := ctx.ReadResource("azure:stack/hciVirtualHardDisk:HciVirtualHardDisk", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HciVirtualHardDisk resources.
type hciVirtualHardDiskState struct {
	// The block size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	BlockSizeInBytes *int `pulumi:"blockSizeInBytes"`
	// The ID of the Custom Location where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	CustomLocationId *string `pulumi:"customLocationId"`
	// The format of the disk file. Possible values are `vhdx` and `vhd`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	DiskFileFormat *string `pulumi:"diskFileFormat"`
	// The size of the disk in GB. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	DiskSizeInGb *int `pulumi:"diskSizeInGb"`
	// Whether to enable dynamic sizing for the Azure Stack HCI Virtual Hard Disk. Defaults to `false`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	DynamicEnabled *bool `pulumi:"dynamicEnabled"`
	// The hypervisor generation of the Azure Stack HCI Virtual Hard Disk. Possible values are `V1` and `V2`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	HypervGeneration *string `pulumi:"hypervGeneration"`
	// The Azure Region where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	Location *string `pulumi:"location"`
	// The logical sector size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	LogicalSectorInBytes *int `pulumi:"logicalSectorInBytes"`
	// The name which should be used for this Azure Stack HCI Virtual Hard Disk. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	Name *string `pulumi:"name"`
	// The physical sector size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	PhysicalSectorInBytes *int `pulumi:"physicalSectorInBytes"`
	// The name of the Resource Group where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The ID of the Azure Stack HCI Storage Path used for this Virtual Hard Disk. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	//
	// > **Note:** If `storagePathId` is not specified, the Virtual Hard Disk will be placed in a high availability Storage Path. If you experience a diff you may need to add this to `ignoreChanges`.
	StoragePathId *string `pulumi:"storagePathId"`
	// A mapping of tags which should be assigned to the Azure Stack HCI Virtual Hard Disk.
	Tags map[string]string `pulumi:"tags"`
}

type HciVirtualHardDiskState struct {
	// The block size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	BlockSizeInBytes pulumi.IntPtrInput
	// The ID of the Custom Location where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	CustomLocationId pulumi.StringPtrInput
	// The format of the disk file. Possible values are `vhdx` and `vhd`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	DiskFileFormat pulumi.StringPtrInput
	// The size of the disk in GB. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	DiskSizeInGb pulumi.IntPtrInput
	// Whether to enable dynamic sizing for the Azure Stack HCI Virtual Hard Disk. Defaults to `false`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	DynamicEnabled pulumi.BoolPtrInput
	// The hypervisor generation of the Azure Stack HCI Virtual Hard Disk. Possible values are `V1` and `V2`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	HypervGeneration pulumi.StringPtrInput
	// The Azure Region where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	Location pulumi.StringPtrInput
	// The logical sector size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	LogicalSectorInBytes pulumi.IntPtrInput
	// The name which should be used for this Azure Stack HCI Virtual Hard Disk. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	Name pulumi.StringPtrInput
	// The physical sector size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	PhysicalSectorInBytes pulumi.IntPtrInput
	// The name of the Resource Group where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The ID of the Azure Stack HCI Storage Path used for this Virtual Hard Disk. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	//
	// > **Note:** If `storagePathId` is not specified, the Virtual Hard Disk will be placed in a high availability Storage Path. If you experience a diff you may need to add this to `ignoreChanges`.
	StoragePathId pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Azure Stack HCI Virtual Hard Disk.
	Tags pulumi.StringMapInput
}

func (HciVirtualHardDiskState) ElementType() reflect.Type {
	return reflect.TypeOf((*hciVirtualHardDiskState)(nil)).Elem()
}

type hciVirtualHardDiskArgs struct {
	// The block size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	BlockSizeInBytes *int `pulumi:"blockSizeInBytes"`
	// The ID of the Custom Location where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	CustomLocationId string `pulumi:"customLocationId"`
	// The format of the disk file. Possible values are `vhdx` and `vhd`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	DiskFileFormat *string `pulumi:"diskFileFormat"`
	// The size of the disk in GB. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	DiskSizeInGb int `pulumi:"diskSizeInGb"`
	// Whether to enable dynamic sizing for the Azure Stack HCI Virtual Hard Disk. Defaults to `false`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	DynamicEnabled *bool `pulumi:"dynamicEnabled"`
	// The hypervisor generation of the Azure Stack HCI Virtual Hard Disk. Possible values are `V1` and `V2`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	HypervGeneration *string `pulumi:"hypervGeneration"`
	// The Azure Region where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	Location *string `pulumi:"location"`
	// The logical sector size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	LogicalSectorInBytes *int `pulumi:"logicalSectorInBytes"`
	// The name which should be used for this Azure Stack HCI Virtual Hard Disk. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	Name *string `pulumi:"name"`
	// The physical sector size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	PhysicalSectorInBytes *int `pulumi:"physicalSectorInBytes"`
	// The name of the Resource Group where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The ID of the Azure Stack HCI Storage Path used for this Virtual Hard Disk. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	//
	// > **Note:** If `storagePathId` is not specified, the Virtual Hard Disk will be placed in a high availability Storage Path. If you experience a diff you may need to add this to `ignoreChanges`.
	StoragePathId *string `pulumi:"storagePathId"`
	// A mapping of tags which should be assigned to the Azure Stack HCI Virtual Hard Disk.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a HciVirtualHardDisk resource.
type HciVirtualHardDiskArgs struct {
	// The block size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	BlockSizeInBytes pulumi.IntPtrInput
	// The ID of the Custom Location where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	CustomLocationId pulumi.StringInput
	// The format of the disk file. Possible values are `vhdx` and `vhd`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	DiskFileFormat pulumi.StringPtrInput
	// The size of the disk in GB. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	DiskSizeInGb pulumi.IntInput
	// Whether to enable dynamic sizing for the Azure Stack HCI Virtual Hard Disk. Defaults to `false`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	DynamicEnabled pulumi.BoolPtrInput
	// The hypervisor generation of the Azure Stack HCI Virtual Hard Disk. Possible values are `V1` and `V2`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	HypervGeneration pulumi.StringPtrInput
	// The Azure Region where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	Location pulumi.StringPtrInput
	// The logical sector size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	LogicalSectorInBytes pulumi.IntPtrInput
	// The name which should be used for this Azure Stack HCI Virtual Hard Disk. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	Name pulumi.StringPtrInput
	// The physical sector size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	PhysicalSectorInBytes pulumi.IntPtrInput
	// The name of the Resource Group where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	ResourceGroupName pulumi.StringInput
	// The ID of the Azure Stack HCI Storage Path used for this Virtual Hard Disk. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
	//
	// > **Note:** If `storagePathId` is not specified, the Virtual Hard Disk will be placed in a high availability Storage Path. If you experience a diff you may need to add this to `ignoreChanges`.
	StoragePathId pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Azure Stack HCI Virtual Hard Disk.
	Tags pulumi.StringMapInput
}

func (HciVirtualHardDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hciVirtualHardDiskArgs)(nil)).Elem()
}

type HciVirtualHardDiskInput interface {
	pulumi.Input

	ToHciVirtualHardDiskOutput() HciVirtualHardDiskOutput
	ToHciVirtualHardDiskOutputWithContext(ctx context.Context) HciVirtualHardDiskOutput
}

func (*HciVirtualHardDisk) ElementType() reflect.Type {
	return reflect.TypeOf((**HciVirtualHardDisk)(nil)).Elem()
}

func (i *HciVirtualHardDisk) ToHciVirtualHardDiskOutput() HciVirtualHardDiskOutput {
	return i.ToHciVirtualHardDiskOutputWithContext(context.Background())
}

func (i *HciVirtualHardDisk) ToHciVirtualHardDiskOutputWithContext(ctx context.Context) HciVirtualHardDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HciVirtualHardDiskOutput)
}

// HciVirtualHardDiskArrayInput is an input type that accepts HciVirtualHardDiskArray and HciVirtualHardDiskArrayOutput values.
// You can construct a concrete instance of `HciVirtualHardDiskArrayInput` via:
//
//	HciVirtualHardDiskArray{ HciVirtualHardDiskArgs{...} }
type HciVirtualHardDiskArrayInput interface {
	pulumi.Input

	ToHciVirtualHardDiskArrayOutput() HciVirtualHardDiskArrayOutput
	ToHciVirtualHardDiskArrayOutputWithContext(context.Context) HciVirtualHardDiskArrayOutput
}

type HciVirtualHardDiskArray []HciVirtualHardDiskInput

func (HciVirtualHardDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HciVirtualHardDisk)(nil)).Elem()
}

func (i HciVirtualHardDiskArray) ToHciVirtualHardDiskArrayOutput() HciVirtualHardDiskArrayOutput {
	return i.ToHciVirtualHardDiskArrayOutputWithContext(context.Background())
}

func (i HciVirtualHardDiskArray) ToHciVirtualHardDiskArrayOutputWithContext(ctx context.Context) HciVirtualHardDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HciVirtualHardDiskArrayOutput)
}

// HciVirtualHardDiskMapInput is an input type that accepts HciVirtualHardDiskMap and HciVirtualHardDiskMapOutput values.
// You can construct a concrete instance of `HciVirtualHardDiskMapInput` via:
//
//	HciVirtualHardDiskMap{ "key": HciVirtualHardDiskArgs{...} }
type HciVirtualHardDiskMapInput interface {
	pulumi.Input

	ToHciVirtualHardDiskMapOutput() HciVirtualHardDiskMapOutput
	ToHciVirtualHardDiskMapOutputWithContext(context.Context) HciVirtualHardDiskMapOutput
}

type HciVirtualHardDiskMap map[string]HciVirtualHardDiskInput

func (HciVirtualHardDiskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HciVirtualHardDisk)(nil)).Elem()
}

func (i HciVirtualHardDiskMap) ToHciVirtualHardDiskMapOutput() HciVirtualHardDiskMapOutput {
	return i.ToHciVirtualHardDiskMapOutputWithContext(context.Background())
}

func (i HciVirtualHardDiskMap) ToHciVirtualHardDiskMapOutputWithContext(ctx context.Context) HciVirtualHardDiskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HciVirtualHardDiskMapOutput)
}

type HciVirtualHardDiskOutput struct{ *pulumi.OutputState }

func (HciVirtualHardDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HciVirtualHardDisk)(nil)).Elem()
}

func (o HciVirtualHardDiskOutput) ToHciVirtualHardDiskOutput() HciVirtualHardDiskOutput {
	return o
}

func (o HciVirtualHardDiskOutput) ToHciVirtualHardDiskOutputWithContext(ctx context.Context) HciVirtualHardDiskOutput {
	return o
}

// The block size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
func (o HciVirtualHardDiskOutput) BlockSizeInBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HciVirtualHardDisk) pulumi.IntPtrOutput { return v.BlockSizeInBytes }).(pulumi.IntPtrOutput)
}

// The ID of the Custom Location where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
func (o HciVirtualHardDiskOutput) CustomLocationId() pulumi.StringOutput {
	return o.ApplyT(func(v *HciVirtualHardDisk) pulumi.StringOutput { return v.CustomLocationId }).(pulumi.StringOutput)
}

// The format of the disk file. Possible values are `vhdx` and `vhd`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
func (o HciVirtualHardDiskOutput) DiskFileFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HciVirtualHardDisk) pulumi.StringPtrOutput { return v.DiskFileFormat }).(pulumi.StringPtrOutput)
}

// The size of the disk in GB. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
func (o HciVirtualHardDiskOutput) DiskSizeInGb() pulumi.IntOutput {
	return o.ApplyT(func(v *HciVirtualHardDisk) pulumi.IntOutput { return v.DiskSizeInGb }).(pulumi.IntOutput)
}

// Whether to enable dynamic sizing for the Azure Stack HCI Virtual Hard Disk. Defaults to `false`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
func (o HciVirtualHardDiskOutput) DynamicEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HciVirtualHardDisk) pulumi.BoolPtrOutput { return v.DynamicEnabled }).(pulumi.BoolPtrOutput)
}

// The hypervisor generation of the Azure Stack HCI Virtual Hard Disk. Possible values are `V1` and `V2`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
func (o HciVirtualHardDiskOutput) HypervGeneration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HciVirtualHardDisk) pulumi.StringPtrOutput { return v.HypervGeneration }).(pulumi.StringPtrOutput)
}

// The Azure Region where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
func (o HciVirtualHardDiskOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *HciVirtualHardDisk) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The logical sector size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
func (o HciVirtualHardDiskOutput) LogicalSectorInBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HciVirtualHardDisk) pulumi.IntPtrOutput { return v.LogicalSectorInBytes }).(pulumi.IntPtrOutput)
}

// The name which should be used for this Azure Stack HCI Virtual Hard Disk. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
func (o HciVirtualHardDiskOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HciVirtualHardDisk) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The physical sector size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
func (o HciVirtualHardDiskOutput) PhysicalSectorInBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HciVirtualHardDisk) pulumi.IntPtrOutput { return v.PhysicalSectorInBytes }).(pulumi.IntPtrOutput)
}

// The name of the Resource Group where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
func (o HciVirtualHardDiskOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *HciVirtualHardDisk) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The ID of the Azure Stack HCI Storage Path used for this Virtual Hard Disk. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
//
// > **Note:** If `storagePathId` is not specified, the Virtual Hard Disk will be placed in a high availability Storage Path. If you experience a diff you may need to add this to `ignoreChanges`.
func (o HciVirtualHardDiskOutput) StoragePathId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HciVirtualHardDisk) pulumi.StringPtrOutput { return v.StoragePathId }).(pulumi.StringPtrOutput)
}

// A mapping of tags which should be assigned to the Azure Stack HCI Virtual Hard Disk.
func (o HciVirtualHardDiskOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HciVirtualHardDisk) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type HciVirtualHardDiskArrayOutput struct{ *pulumi.OutputState }

func (HciVirtualHardDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HciVirtualHardDisk)(nil)).Elem()
}

func (o HciVirtualHardDiskArrayOutput) ToHciVirtualHardDiskArrayOutput() HciVirtualHardDiskArrayOutput {
	return o
}

func (o HciVirtualHardDiskArrayOutput) ToHciVirtualHardDiskArrayOutputWithContext(ctx context.Context) HciVirtualHardDiskArrayOutput {
	return o
}

func (o HciVirtualHardDiskArrayOutput) Index(i pulumi.IntInput) HciVirtualHardDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HciVirtualHardDisk {
		return vs[0].([]*HciVirtualHardDisk)[vs[1].(int)]
	}).(HciVirtualHardDiskOutput)
}

type HciVirtualHardDiskMapOutput struct{ *pulumi.OutputState }

func (HciVirtualHardDiskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HciVirtualHardDisk)(nil)).Elem()
}

func (o HciVirtualHardDiskMapOutput) ToHciVirtualHardDiskMapOutput() HciVirtualHardDiskMapOutput {
	return o
}

func (o HciVirtualHardDiskMapOutput) ToHciVirtualHardDiskMapOutputWithContext(ctx context.Context) HciVirtualHardDiskMapOutput {
	return o
}

func (o HciVirtualHardDiskMapOutput) MapIndex(k pulumi.StringInput) HciVirtualHardDiskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HciVirtualHardDisk {
		return vs[0].(map[string]*HciVirtualHardDisk)[vs[1].(string)]
	}).(HciVirtualHardDiskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HciVirtualHardDiskInput)(nil)).Elem(), &HciVirtualHardDisk{})
	pulumi.RegisterInputType(reflect.TypeOf((*HciVirtualHardDiskArrayInput)(nil)).Elem(), HciVirtualHardDiskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HciVirtualHardDiskMapInput)(nil)).Elem(), HciVirtualHardDiskMap{})
	pulumi.RegisterOutputType(HciVirtualHardDiskOutput{})
	pulumi.RegisterOutputType(HciVirtualHardDiskArrayOutput{})
	pulumi.RegisterOutputType(HciVirtualHardDiskMapOutput{})
}
