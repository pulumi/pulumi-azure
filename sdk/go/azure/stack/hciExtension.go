// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stack

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Azure Stack HCI Extension.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/stack"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-hci-ext"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = stack.NewHciExtension(ctx, "example", &stack.HciExtensionArgs{
//				Name:                           pulumi.String("AzureMonitorWindowsAgent"),
//				ArcSettingId:                   pulumi.String("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-hci/providers/Microsoft.AzureStackHCI/clusters/hci-cl/arcSettings/default"),
//				Publisher:                      pulumi.String("Microsoft.Azure.Monitor"),
//				Type:                           pulumi.String("MicrosoftMonitoringAgent"),
//				AutoUpgradeMinorVersionEnabled: pulumi.Bool(true),
//				AutomaticUpgradeEnabled:        pulumi.Bool(true),
//				TypeHandlerVersion:             pulumi.String("1.22.0"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Azure Stack HCI Extension can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:stack/hciExtension:HciExtension example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.AzureStackHCI/clusters/cluster1/arcSettings/default/extensions/extension1
// ```
type HciExtension struct {
	pulumi.CustomResourceState

	// The ID of the Azure Stack HCI Cluster Arc Setting. Changing this forces a new resource to be created.
	ArcSettingId pulumi.StringOutput `pulumi:"arcSettingId"`
	// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true. Changing this forces a new resource to be created. Possible values are `true` and `false`. Defaults to `true`.
	AutoUpgradeMinorVersionEnabled pulumi.BoolPtrOutput `pulumi:"autoUpgradeMinorVersionEnabled"`
	// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version available. Possible values are `true` and `false`. Defaults to `true`.
	AutomaticUpgradeEnabled pulumi.BoolPtrOutput `pulumi:"automaticUpgradeEnabled"`
	// The name which should be used for this Azure Stack HCI Extension. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The json formatted protected settings for the extension.
	ProtectedSettings pulumi.StringPtrOutput `pulumi:"protectedSettings"`
	// The name of the extension handler publisher, such as `Microsoft.Azure.Monitor`. Changing this forces a new resource to be created.
	Publisher pulumi.StringOutput `pulumi:"publisher"`
	// The json formatted public settings for the extension.
	Settings pulumi.StringPtrOutput `pulumi:"settings"`
	// Specifies the type of the extension. For example `CustomScriptExtension` or `AzureMonitorLinuxAgent`. Changing this forces a new resource to be created.
	Type pulumi.StringOutput `pulumi:"type"`
	// Specifies the version of the script handler.
	//
	// > **NOTE:** `typeHandlerVersion` cannot be set when `automaticUpgradeEnabled` is set to `true`.
	TypeHandlerVersion pulumi.StringPtrOutput `pulumi:"typeHandlerVersion"`
}

// NewHciExtension registers a new resource with the given unique name, arguments, and options.
func NewHciExtension(ctx *pulumi.Context,
	name string, args *HciExtensionArgs, opts ...pulumi.ResourceOption) (*HciExtension, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ArcSettingId == nil {
		return nil, errors.New("invalid value for required argument 'ArcSettingId'")
	}
	if args.Publisher == nil {
		return nil, errors.New("invalid value for required argument 'Publisher'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.ProtectedSettings != nil {
		args.ProtectedSettings = pulumi.ToSecret(args.ProtectedSettings).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"protectedSettings",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HciExtension
	err := ctx.RegisterResource("azure:stack/hciExtension:HciExtension", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHciExtension gets an existing HciExtension resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHciExtension(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HciExtensionState, opts ...pulumi.ResourceOption) (*HciExtension, error) {
	var resource HciExtension
	err := ctx.ReadResource("azure:stack/hciExtension:HciExtension", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HciExtension resources.
type hciExtensionState struct {
	// The ID of the Azure Stack HCI Cluster Arc Setting. Changing this forces a new resource to be created.
	ArcSettingId *string `pulumi:"arcSettingId"`
	// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true. Changing this forces a new resource to be created. Possible values are `true` and `false`. Defaults to `true`.
	AutoUpgradeMinorVersionEnabled *bool `pulumi:"autoUpgradeMinorVersionEnabled"`
	// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version available. Possible values are `true` and `false`. Defaults to `true`.
	AutomaticUpgradeEnabled *bool `pulumi:"automaticUpgradeEnabled"`
	// The name which should be used for this Azure Stack HCI Extension. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The json formatted protected settings for the extension.
	ProtectedSettings *string `pulumi:"protectedSettings"`
	// The name of the extension handler publisher, such as `Microsoft.Azure.Monitor`. Changing this forces a new resource to be created.
	Publisher *string `pulumi:"publisher"`
	// The json formatted public settings for the extension.
	Settings *string `pulumi:"settings"`
	// Specifies the type of the extension. For example `CustomScriptExtension` or `AzureMonitorLinuxAgent`. Changing this forces a new resource to be created.
	Type *string `pulumi:"type"`
	// Specifies the version of the script handler.
	//
	// > **NOTE:** `typeHandlerVersion` cannot be set when `automaticUpgradeEnabled` is set to `true`.
	TypeHandlerVersion *string `pulumi:"typeHandlerVersion"`
}

type HciExtensionState struct {
	// The ID of the Azure Stack HCI Cluster Arc Setting. Changing this forces a new resource to be created.
	ArcSettingId pulumi.StringPtrInput
	// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true. Changing this forces a new resource to be created. Possible values are `true` and `false`. Defaults to `true`.
	AutoUpgradeMinorVersionEnabled pulumi.BoolPtrInput
	// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version available. Possible values are `true` and `false`. Defaults to `true`.
	AutomaticUpgradeEnabled pulumi.BoolPtrInput
	// The name which should be used for this Azure Stack HCI Extension. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The json formatted protected settings for the extension.
	ProtectedSettings pulumi.StringPtrInput
	// The name of the extension handler publisher, such as `Microsoft.Azure.Monitor`. Changing this forces a new resource to be created.
	Publisher pulumi.StringPtrInput
	// The json formatted public settings for the extension.
	Settings pulumi.StringPtrInput
	// Specifies the type of the extension. For example `CustomScriptExtension` or `AzureMonitorLinuxAgent`. Changing this forces a new resource to be created.
	Type pulumi.StringPtrInput
	// Specifies the version of the script handler.
	//
	// > **NOTE:** `typeHandlerVersion` cannot be set when `automaticUpgradeEnabled` is set to `true`.
	TypeHandlerVersion pulumi.StringPtrInput
}

func (HciExtensionState) ElementType() reflect.Type {
	return reflect.TypeOf((*hciExtensionState)(nil)).Elem()
}

type hciExtensionArgs struct {
	// The ID of the Azure Stack HCI Cluster Arc Setting. Changing this forces a new resource to be created.
	ArcSettingId string `pulumi:"arcSettingId"`
	// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true. Changing this forces a new resource to be created. Possible values are `true` and `false`. Defaults to `true`.
	AutoUpgradeMinorVersionEnabled *bool `pulumi:"autoUpgradeMinorVersionEnabled"`
	// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version available. Possible values are `true` and `false`. Defaults to `true`.
	AutomaticUpgradeEnabled *bool `pulumi:"automaticUpgradeEnabled"`
	// The name which should be used for this Azure Stack HCI Extension. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The json formatted protected settings for the extension.
	ProtectedSettings *string `pulumi:"protectedSettings"`
	// The name of the extension handler publisher, such as `Microsoft.Azure.Monitor`. Changing this forces a new resource to be created.
	Publisher string `pulumi:"publisher"`
	// The json formatted public settings for the extension.
	Settings *string `pulumi:"settings"`
	// Specifies the type of the extension. For example `CustomScriptExtension` or `AzureMonitorLinuxAgent`. Changing this forces a new resource to be created.
	Type string `pulumi:"type"`
	// Specifies the version of the script handler.
	//
	// > **NOTE:** `typeHandlerVersion` cannot be set when `automaticUpgradeEnabled` is set to `true`.
	TypeHandlerVersion *string `pulumi:"typeHandlerVersion"`
}

// The set of arguments for constructing a HciExtension resource.
type HciExtensionArgs struct {
	// The ID of the Azure Stack HCI Cluster Arc Setting. Changing this forces a new resource to be created.
	ArcSettingId pulumi.StringInput
	// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true. Changing this forces a new resource to be created. Possible values are `true` and `false`. Defaults to `true`.
	AutoUpgradeMinorVersionEnabled pulumi.BoolPtrInput
	// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version available. Possible values are `true` and `false`. Defaults to `true`.
	AutomaticUpgradeEnabled pulumi.BoolPtrInput
	// The name which should be used for this Azure Stack HCI Extension. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The json formatted protected settings for the extension.
	ProtectedSettings pulumi.StringPtrInput
	// The name of the extension handler publisher, such as `Microsoft.Azure.Monitor`. Changing this forces a new resource to be created.
	Publisher pulumi.StringInput
	// The json formatted public settings for the extension.
	Settings pulumi.StringPtrInput
	// Specifies the type of the extension. For example `CustomScriptExtension` or `AzureMonitorLinuxAgent`. Changing this forces a new resource to be created.
	Type pulumi.StringInput
	// Specifies the version of the script handler.
	//
	// > **NOTE:** `typeHandlerVersion` cannot be set when `automaticUpgradeEnabled` is set to `true`.
	TypeHandlerVersion pulumi.StringPtrInput
}

func (HciExtensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hciExtensionArgs)(nil)).Elem()
}

type HciExtensionInput interface {
	pulumi.Input

	ToHciExtensionOutput() HciExtensionOutput
	ToHciExtensionOutputWithContext(ctx context.Context) HciExtensionOutput
}

func (*HciExtension) ElementType() reflect.Type {
	return reflect.TypeOf((**HciExtension)(nil)).Elem()
}

func (i *HciExtension) ToHciExtensionOutput() HciExtensionOutput {
	return i.ToHciExtensionOutputWithContext(context.Background())
}

func (i *HciExtension) ToHciExtensionOutputWithContext(ctx context.Context) HciExtensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HciExtensionOutput)
}

// HciExtensionArrayInput is an input type that accepts HciExtensionArray and HciExtensionArrayOutput values.
// You can construct a concrete instance of `HciExtensionArrayInput` via:
//
//	HciExtensionArray{ HciExtensionArgs{...} }
type HciExtensionArrayInput interface {
	pulumi.Input

	ToHciExtensionArrayOutput() HciExtensionArrayOutput
	ToHciExtensionArrayOutputWithContext(context.Context) HciExtensionArrayOutput
}

type HciExtensionArray []HciExtensionInput

func (HciExtensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HciExtension)(nil)).Elem()
}

func (i HciExtensionArray) ToHciExtensionArrayOutput() HciExtensionArrayOutput {
	return i.ToHciExtensionArrayOutputWithContext(context.Background())
}

func (i HciExtensionArray) ToHciExtensionArrayOutputWithContext(ctx context.Context) HciExtensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HciExtensionArrayOutput)
}

// HciExtensionMapInput is an input type that accepts HciExtensionMap and HciExtensionMapOutput values.
// You can construct a concrete instance of `HciExtensionMapInput` via:
//
//	HciExtensionMap{ "key": HciExtensionArgs{...} }
type HciExtensionMapInput interface {
	pulumi.Input

	ToHciExtensionMapOutput() HciExtensionMapOutput
	ToHciExtensionMapOutputWithContext(context.Context) HciExtensionMapOutput
}

type HciExtensionMap map[string]HciExtensionInput

func (HciExtensionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HciExtension)(nil)).Elem()
}

func (i HciExtensionMap) ToHciExtensionMapOutput() HciExtensionMapOutput {
	return i.ToHciExtensionMapOutputWithContext(context.Background())
}

func (i HciExtensionMap) ToHciExtensionMapOutputWithContext(ctx context.Context) HciExtensionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HciExtensionMapOutput)
}

type HciExtensionOutput struct{ *pulumi.OutputState }

func (HciExtensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HciExtension)(nil)).Elem()
}

func (o HciExtensionOutput) ToHciExtensionOutput() HciExtensionOutput {
	return o
}

func (o HciExtensionOutput) ToHciExtensionOutputWithContext(ctx context.Context) HciExtensionOutput {
	return o
}

// The ID of the Azure Stack HCI Cluster Arc Setting. Changing this forces a new resource to be created.
func (o HciExtensionOutput) ArcSettingId() pulumi.StringOutput {
	return o.ApplyT(func(v *HciExtension) pulumi.StringOutput { return v.ArcSettingId }).(pulumi.StringOutput)
}

// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true. Changing this forces a new resource to be created. Possible values are `true` and `false`. Defaults to `true`.
func (o HciExtensionOutput) AutoUpgradeMinorVersionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HciExtension) pulumi.BoolPtrOutput { return v.AutoUpgradeMinorVersionEnabled }).(pulumi.BoolPtrOutput)
}

// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version available. Possible values are `true` and `false`. Defaults to `true`.
func (o HciExtensionOutput) AutomaticUpgradeEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HciExtension) pulumi.BoolPtrOutput { return v.AutomaticUpgradeEnabled }).(pulumi.BoolPtrOutput)
}

// The name which should be used for this Azure Stack HCI Extension. Changing this forces a new resource to be created.
func (o HciExtensionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HciExtension) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The json formatted protected settings for the extension.
func (o HciExtensionOutput) ProtectedSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HciExtension) pulumi.StringPtrOutput { return v.ProtectedSettings }).(pulumi.StringPtrOutput)
}

// The name of the extension handler publisher, such as `Microsoft.Azure.Monitor`. Changing this forces a new resource to be created.
func (o HciExtensionOutput) Publisher() pulumi.StringOutput {
	return o.ApplyT(func(v *HciExtension) pulumi.StringOutput { return v.Publisher }).(pulumi.StringOutput)
}

// The json formatted public settings for the extension.
func (o HciExtensionOutput) Settings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HciExtension) pulumi.StringPtrOutput { return v.Settings }).(pulumi.StringPtrOutput)
}

// Specifies the type of the extension. For example `CustomScriptExtension` or `AzureMonitorLinuxAgent`. Changing this forces a new resource to be created.
func (o HciExtensionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *HciExtension) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Specifies the version of the script handler.
//
// > **NOTE:** `typeHandlerVersion` cannot be set when `automaticUpgradeEnabled` is set to `true`.
func (o HciExtensionOutput) TypeHandlerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HciExtension) pulumi.StringPtrOutput { return v.TypeHandlerVersion }).(pulumi.StringPtrOutput)
}

type HciExtensionArrayOutput struct{ *pulumi.OutputState }

func (HciExtensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HciExtension)(nil)).Elem()
}

func (o HciExtensionArrayOutput) ToHciExtensionArrayOutput() HciExtensionArrayOutput {
	return o
}

func (o HciExtensionArrayOutput) ToHciExtensionArrayOutputWithContext(ctx context.Context) HciExtensionArrayOutput {
	return o
}

func (o HciExtensionArrayOutput) Index(i pulumi.IntInput) HciExtensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HciExtension {
		return vs[0].([]*HciExtension)[vs[1].(int)]
	}).(HciExtensionOutput)
}

type HciExtensionMapOutput struct{ *pulumi.OutputState }

func (HciExtensionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HciExtension)(nil)).Elem()
}

func (o HciExtensionMapOutput) ToHciExtensionMapOutput() HciExtensionMapOutput {
	return o
}

func (o HciExtensionMapOutput) ToHciExtensionMapOutputWithContext(ctx context.Context) HciExtensionMapOutput {
	return o
}

func (o HciExtensionMapOutput) MapIndex(k pulumi.StringInput) HciExtensionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HciExtension {
		return vs[0].(map[string]*HciExtension)[vs[1].(string)]
	}).(HciExtensionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HciExtensionInput)(nil)).Elem(), &HciExtension{})
	pulumi.RegisterInputType(reflect.TypeOf((*HciExtensionArrayInput)(nil)).Elem(), HciExtensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HciExtensionMapInput)(nil)).Elem(), HciExtensionMap{})
	pulumi.RegisterOutputType(HciExtensionOutput{})
	pulumi.RegisterOutputType(HciExtensionArrayOutput{})
	pulumi.RegisterOutputType(HciExtensionMapOutput{})
}
