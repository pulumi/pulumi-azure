// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stack

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Azure Stack HCI Storage Path.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/stack"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-rg"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = stack.NewHciStoragePath(ctx, "example", &stack.HciStoragePathArgs{
//				Name:              pulumi.String("example-sp"),
//				ResourceGroupName: example.Name,
//				Location:          example.Location,
//				CustomLocationId:  pulumi.String("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.ExtendedLocation/customLocations/cl1"),
//				Path:              pulumi.String("C:\\ClusterStorage\\UserStorage_2\\sp-example"),
//				Tags: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This resource uses the following Azure API Providers:
//
// * `Microsoft.AzureStackHCI` - 2024-01-01
//
// ## Import
//
// Azure Stack HCI Storage Paths can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:stack/hciStoragePath:HciStoragePath example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.AzureStackHCI/storageContainers/storage1
// ```
type HciStoragePath struct {
	pulumi.CustomResourceState

	// The ID of Custom Location where the Azure Stack HCI Storage Path should exist. Changing this forces a new resource to be created.
	CustomLocationId pulumi.StringOutput `pulumi:"customLocationId"`
	// The Azure Region where the Azure Stack HCI Storage Path should exist. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name which should be used for this Azure Stack HCI Storage Path. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The file path on the disk to create the Storage Path. Changing this forces a new resource to be created.
	Path pulumi.StringOutput `pulumi:"path"`
	// The name of the Resource Group where the Azure Stack HCI Storage Path should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Azure Stack HCI Storage Path.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewHciStoragePath registers a new resource with the given unique name, arguments, and options.
func NewHciStoragePath(ctx *pulumi.Context,
	name string, args *HciStoragePathArgs, opts ...pulumi.ResourceOption) (*HciStoragePath, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CustomLocationId == nil {
		return nil, errors.New("invalid value for required argument 'CustomLocationId'")
	}
	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HciStoragePath
	err := ctx.RegisterResource("azure:stack/hciStoragePath:HciStoragePath", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHciStoragePath gets an existing HciStoragePath resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHciStoragePath(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HciStoragePathState, opts ...pulumi.ResourceOption) (*HciStoragePath, error) {
	var resource HciStoragePath
	err := ctx.ReadResource("azure:stack/hciStoragePath:HciStoragePath", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HciStoragePath resources.
type hciStoragePathState struct {
	// The ID of Custom Location where the Azure Stack HCI Storage Path should exist. Changing this forces a new resource to be created.
	CustomLocationId *string `pulumi:"customLocationId"`
	// The Azure Region where the Azure Stack HCI Storage Path should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Azure Stack HCI Storage Path. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The file path on the disk to create the Storage Path. Changing this forces a new resource to be created.
	Path *string `pulumi:"path"`
	// The name of the Resource Group where the Azure Stack HCI Storage Path should exist. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Azure Stack HCI Storage Path.
	Tags map[string]string `pulumi:"tags"`
}

type HciStoragePathState struct {
	// The ID of Custom Location where the Azure Stack HCI Storage Path should exist. Changing this forces a new resource to be created.
	CustomLocationId pulumi.StringPtrInput
	// The Azure Region where the Azure Stack HCI Storage Path should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Azure Stack HCI Storage Path. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The file path on the disk to create the Storage Path. Changing this forces a new resource to be created.
	Path pulumi.StringPtrInput
	// The name of the Resource Group where the Azure Stack HCI Storage Path should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Azure Stack HCI Storage Path.
	Tags pulumi.StringMapInput
}

func (HciStoragePathState) ElementType() reflect.Type {
	return reflect.TypeOf((*hciStoragePathState)(nil)).Elem()
}

type hciStoragePathArgs struct {
	// The ID of Custom Location where the Azure Stack HCI Storage Path should exist. Changing this forces a new resource to be created.
	CustomLocationId string `pulumi:"customLocationId"`
	// The Azure Region where the Azure Stack HCI Storage Path should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Azure Stack HCI Storage Path. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The file path on the disk to create the Storage Path. Changing this forces a new resource to be created.
	Path string `pulumi:"path"`
	// The name of the Resource Group where the Azure Stack HCI Storage Path should exist. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Azure Stack HCI Storage Path.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a HciStoragePath resource.
type HciStoragePathArgs struct {
	// The ID of Custom Location where the Azure Stack HCI Storage Path should exist. Changing this forces a new resource to be created.
	CustomLocationId pulumi.StringInput
	// The Azure Region where the Azure Stack HCI Storage Path should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Azure Stack HCI Storage Path. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The file path on the disk to create the Storage Path. Changing this forces a new resource to be created.
	Path pulumi.StringInput
	// The name of the Resource Group where the Azure Stack HCI Storage Path should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags which should be assigned to the Azure Stack HCI Storage Path.
	Tags pulumi.StringMapInput
}

func (HciStoragePathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hciStoragePathArgs)(nil)).Elem()
}

type HciStoragePathInput interface {
	pulumi.Input

	ToHciStoragePathOutput() HciStoragePathOutput
	ToHciStoragePathOutputWithContext(ctx context.Context) HciStoragePathOutput
}

func (*HciStoragePath) ElementType() reflect.Type {
	return reflect.TypeOf((**HciStoragePath)(nil)).Elem()
}

func (i *HciStoragePath) ToHciStoragePathOutput() HciStoragePathOutput {
	return i.ToHciStoragePathOutputWithContext(context.Background())
}

func (i *HciStoragePath) ToHciStoragePathOutputWithContext(ctx context.Context) HciStoragePathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HciStoragePathOutput)
}

// HciStoragePathArrayInput is an input type that accepts HciStoragePathArray and HciStoragePathArrayOutput values.
// You can construct a concrete instance of `HciStoragePathArrayInput` via:
//
//	HciStoragePathArray{ HciStoragePathArgs{...} }
type HciStoragePathArrayInput interface {
	pulumi.Input

	ToHciStoragePathArrayOutput() HciStoragePathArrayOutput
	ToHciStoragePathArrayOutputWithContext(context.Context) HciStoragePathArrayOutput
}

type HciStoragePathArray []HciStoragePathInput

func (HciStoragePathArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HciStoragePath)(nil)).Elem()
}

func (i HciStoragePathArray) ToHciStoragePathArrayOutput() HciStoragePathArrayOutput {
	return i.ToHciStoragePathArrayOutputWithContext(context.Background())
}

func (i HciStoragePathArray) ToHciStoragePathArrayOutputWithContext(ctx context.Context) HciStoragePathArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HciStoragePathArrayOutput)
}

// HciStoragePathMapInput is an input type that accepts HciStoragePathMap and HciStoragePathMapOutput values.
// You can construct a concrete instance of `HciStoragePathMapInput` via:
//
//	HciStoragePathMap{ "key": HciStoragePathArgs{...} }
type HciStoragePathMapInput interface {
	pulumi.Input

	ToHciStoragePathMapOutput() HciStoragePathMapOutput
	ToHciStoragePathMapOutputWithContext(context.Context) HciStoragePathMapOutput
}

type HciStoragePathMap map[string]HciStoragePathInput

func (HciStoragePathMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HciStoragePath)(nil)).Elem()
}

func (i HciStoragePathMap) ToHciStoragePathMapOutput() HciStoragePathMapOutput {
	return i.ToHciStoragePathMapOutputWithContext(context.Background())
}

func (i HciStoragePathMap) ToHciStoragePathMapOutputWithContext(ctx context.Context) HciStoragePathMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HciStoragePathMapOutput)
}

type HciStoragePathOutput struct{ *pulumi.OutputState }

func (HciStoragePathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HciStoragePath)(nil)).Elem()
}

func (o HciStoragePathOutput) ToHciStoragePathOutput() HciStoragePathOutput {
	return o
}

func (o HciStoragePathOutput) ToHciStoragePathOutputWithContext(ctx context.Context) HciStoragePathOutput {
	return o
}

// The ID of Custom Location where the Azure Stack HCI Storage Path should exist. Changing this forces a new resource to be created.
func (o HciStoragePathOutput) CustomLocationId() pulumi.StringOutput {
	return o.ApplyT(func(v *HciStoragePath) pulumi.StringOutput { return v.CustomLocationId }).(pulumi.StringOutput)
}

// The Azure Region where the Azure Stack HCI Storage Path should exist. Changing this forces a new resource to be created.
func (o HciStoragePathOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *HciStoragePath) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name which should be used for this Azure Stack HCI Storage Path. Changing this forces a new resource to be created.
func (o HciStoragePathOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HciStoragePath) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The file path on the disk to create the Storage Path. Changing this forces a new resource to be created.
func (o HciStoragePathOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *HciStoragePath) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

// The name of the Resource Group where the Azure Stack HCI Storage Path should exist. Changing this forces a new resource to be created.
func (o HciStoragePathOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *HciStoragePath) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the Azure Stack HCI Storage Path.
func (o HciStoragePathOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HciStoragePath) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type HciStoragePathArrayOutput struct{ *pulumi.OutputState }

func (HciStoragePathArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HciStoragePath)(nil)).Elem()
}

func (o HciStoragePathArrayOutput) ToHciStoragePathArrayOutput() HciStoragePathArrayOutput {
	return o
}

func (o HciStoragePathArrayOutput) ToHciStoragePathArrayOutputWithContext(ctx context.Context) HciStoragePathArrayOutput {
	return o
}

func (o HciStoragePathArrayOutput) Index(i pulumi.IntInput) HciStoragePathOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HciStoragePath {
		return vs[0].([]*HciStoragePath)[vs[1].(int)]
	}).(HciStoragePathOutput)
}

type HciStoragePathMapOutput struct{ *pulumi.OutputState }

func (HciStoragePathMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HciStoragePath)(nil)).Elem()
}

func (o HciStoragePathMapOutput) ToHciStoragePathMapOutput() HciStoragePathMapOutput {
	return o
}

func (o HciStoragePathMapOutput) ToHciStoragePathMapOutputWithContext(ctx context.Context) HciStoragePathMapOutput {
	return o
}

func (o HciStoragePathMapOutput) MapIndex(k pulumi.StringInput) HciStoragePathOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HciStoragePath {
		return vs[0].(map[string]*HciStoragePath)[vs[1].(string)]
	}).(HciStoragePathOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HciStoragePathInput)(nil)).Elem(), &HciStoragePath{})
	pulumi.RegisterInputType(reflect.TypeOf((*HciStoragePathArrayInput)(nil)).Elem(), HciStoragePathArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HciStoragePathMapInput)(nil)).Elem(), HciStoragePathMap{})
	pulumi.RegisterOutputType(HciStoragePathOutput{})
	pulumi.RegisterOutputType(HciStoragePathArrayOutput{})
	pulumi.RegisterOutputType(HciStoragePathMapOutput{})
}
