// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package notificationhub

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an Authorization Rule associated with a Notification Hub within a Notification Hub Namespace.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/notification_hub_authorization_rule.html.markdown.
type AuthorizationRule struct {
	s *pulumi.ResourceState
}

// NewAuthorizationRule registers a new resource with the given unique name, arguments, and options.
func NewAuthorizationRule(ctx *pulumi.Context,
	name string, args *AuthorizationRuleArgs, opts ...pulumi.ResourceOpt) (*AuthorizationRule, error) {
	if args == nil || args.NamespaceName == nil {
		return nil, errors.New("missing required argument 'NamespaceName'")
	}
	if args == nil || args.NotificationHubName == nil {
		return nil, errors.New("missing required argument 'NotificationHubName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["listen"] = nil
		inputs["manage"] = nil
		inputs["name"] = nil
		inputs["namespaceName"] = nil
		inputs["notificationHubName"] = nil
		inputs["resourceGroupName"] = nil
		inputs["send"] = nil
	} else {
		inputs["listen"] = args.Listen
		inputs["manage"] = args.Manage
		inputs["name"] = args.Name
		inputs["namespaceName"] = args.NamespaceName
		inputs["notificationHubName"] = args.NotificationHubName
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["send"] = args.Send
	}
	inputs["primaryAccessKey"] = nil
	inputs["secondaryAccessKey"] = nil
	s, err := ctx.RegisterResource("azure:notificationhub/authorizationRule:AuthorizationRule", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AuthorizationRule{s: s}, nil
}

// GetAuthorizationRule gets an existing AuthorizationRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthorizationRule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AuthorizationRuleState, opts ...pulumi.ResourceOpt) (*AuthorizationRule, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["listen"] = state.Listen
		inputs["manage"] = state.Manage
		inputs["name"] = state.Name
		inputs["namespaceName"] = state.NamespaceName
		inputs["notificationHubName"] = state.NotificationHubName
		inputs["primaryAccessKey"] = state.PrimaryAccessKey
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["secondaryAccessKey"] = state.SecondaryAccessKey
		inputs["send"] = state.Send
	}
	s, err := ctx.ReadResource("azure:notificationhub/authorizationRule:AuthorizationRule", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AuthorizationRule{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AuthorizationRule) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AuthorizationRule) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Does this Authorization Rule have Listen access to the Notification Hub? Defaults to `false`.
func (r *AuthorizationRule) Listen() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["listen"])
}

// Does this Authorization Rule have Manage access to the Notification Hub? Defaults to `false`.
func (r *AuthorizationRule) Manage() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["manage"])
}

// The name to use for this Authorization Rule. Changing this forces a new resource to be created.
func (r *AuthorizationRule) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The name of the Notification Hub Namespace in which the Notification Hub exists. Changing this forces a new resource to be created.
func (r *AuthorizationRule) NamespaceName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["namespaceName"])
}

// The name of the Notification Hub for which the Authorization Rule should be created. Changing this forces a new resource to be created.
func (r *AuthorizationRule) NotificationHubName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["notificationHubName"])
}

// The Primary Access Key associated with this Authorization Rule.
func (r *AuthorizationRule) PrimaryAccessKey() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["primaryAccessKey"])
}

// The name of the Resource Group in which the Notification Hub Namespace exists. Changing this forces a new resource to be created.
func (r *AuthorizationRule) ResourceGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// The Secondary Access Key associated with this Authorization Rule.
func (r *AuthorizationRule) SecondaryAccessKey() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["secondaryAccessKey"])
}

// Does this Authorization Rule have Send access to the Notification Hub? Defaults to `false`.
func (r *AuthorizationRule) Send() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["send"])
}

// Input properties used for looking up and filtering AuthorizationRule resources.
type AuthorizationRuleState struct {
	// Does this Authorization Rule have Listen access to the Notification Hub? Defaults to `false`.
	Listen interface{}
	// Does this Authorization Rule have Manage access to the Notification Hub? Defaults to `false`.
	Manage interface{}
	// The name to use for this Authorization Rule. Changing this forces a new resource to be created.
	Name interface{}
	// The name of the Notification Hub Namespace in which the Notification Hub exists. Changing this forces a new resource to be created.
	NamespaceName interface{}
	// The name of the Notification Hub for which the Authorization Rule should be created. Changing this forces a new resource to be created.
	NotificationHubName interface{}
	// The Primary Access Key associated with this Authorization Rule.
	PrimaryAccessKey interface{}
	// The name of the Resource Group in which the Notification Hub Namespace exists. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// The Secondary Access Key associated with this Authorization Rule.
	SecondaryAccessKey interface{}
	// Does this Authorization Rule have Send access to the Notification Hub? Defaults to `false`.
	Send interface{}
}

// The set of arguments for constructing a AuthorizationRule resource.
type AuthorizationRuleArgs struct {
	// Does this Authorization Rule have Listen access to the Notification Hub? Defaults to `false`.
	Listen interface{}
	// Does this Authorization Rule have Manage access to the Notification Hub? Defaults to `false`.
	Manage interface{}
	// The name to use for this Authorization Rule. Changing this forces a new resource to be created.
	Name interface{}
	// The name of the Notification Hub Namespace in which the Notification Hub exists. Changing this forces a new resource to be created.
	NamespaceName interface{}
	// The name of the Notification Hub for which the Authorization Rule should be created. Changing this forces a new resource to be created.
	NotificationHubName interface{}
	// The name of the Resource Group in which the Notification Hub Namespace exists. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// Does this Authorization Rule have Send access to the Notification Hub? Defaults to `false`.
	Send interface{}
}
