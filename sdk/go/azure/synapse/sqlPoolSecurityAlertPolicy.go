// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package synapse

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Security Alert Policy for a Synapse SQL Pool.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/synapse"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Location:               exampleResourceGroup.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("LRS"),
//				AccountKind:            pulumi.String("StorageV2"),
//				IsHnsEnabled:           pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			exampleDataLakeGen2Filesystem, err := storage.NewDataLakeGen2Filesystem(ctx, "exampleDataLakeGen2Filesystem", &storage.DataLakeGen2FilesystemArgs{
//				StorageAccountId: exampleAccount.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			exampleWorkspace, err := synapse.NewWorkspace(ctx, "exampleWorkspace", &synapse.WorkspaceArgs{
//				ResourceGroupName:               exampleResourceGroup.Name,
//				Location:                        exampleResourceGroup.Location,
//				StorageDataLakeGen2FilesystemId: exampleDataLakeGen2Filesystem.ID(),
//				SqlAdministratorLogin:           pulumi.String("sqladminuser"),
//				SqlAdministratorLoginPassword:   pulumi.String("H@Sh1CoR3!"),
//				AadAdmin: &synapse.WorkspaceAadAdminTypeArgs{
//					Login:    pulumi.String("AzureAD Admin"),
//					ObjectId: pulumi.String("00000000-0000-0000-0000-000000000000"),
//					TenantId: pulumi.String("00000000-0000-0000-0000-000000000000"),
//				},
//				Identity: &synapse.WorkspaceIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//				Tags: pulumi.StringMap{
//					"Env": pulumi.String("production"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleSqlPool, err := synapse.NewSqlPool(ctx, "exampleSqlPool", &synapse.SqlPoolArgs{
//				SynapseWorkspaceId: exampleWorkspace.ID(),
//				SkuName:            pulumi.String("DW100c"),
//				CreateMode:         pulumi.String("Default"),
//			})
//			if err != nil {
//				return err
//			}
//			auditLogs, err := storage.NewAccount(ctx, "auditLogs", &storage.AccountArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Location:               exampleResourceGroup.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("LRS"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = synapse.NewSqlPoolSecurityAlertPolicy(ctx, "exampleSqlPoolSecurityAlertPolicy", &synapse.SqlPoolSecurityAlertPolicyArgs{
//				SqlPoolId:               exampleSqlPool.ID(),
//				PolicyState:             pulumi.String("Enabled"),
//				StorageEndpoint:         auditLogs.PrimaryBlobEndpoint,
//				StorageAccountAccessKey: auditLogs.PrimaryAccessKey,
//				DisabledAlerts: pulumi.StringArray{
//					pulumi.String("Sql_Injection"),
//					pulumi.String("Data_Exfiltration"),
//				},
//				RetentionDays: pulumi.Int(20),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Synapse SQL Pool Security Alert Policies can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:synapse/sqlPoolSecurityAlertPolicy:SqlPoolSecurityAlertPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Synapse/workspaces/workspace1/sqlPools/sqlPool1/securityAlertPolicies/default
//
// ```
type SqlPoolSecurityAlertPolicy struct {
	pulumi.CustomResourceState

	// Specifies an array of alerts that are disabled. Allowed values are: `Sql_Injection`, `Sql_Injection_Vulnerability`, `Access_Anomaly`, `Data_Exfiltration`, `Unsafe_Action`.
	DisabledAlerts pulumi.StringArrayOutput `pulumi:"disabledAlerts"`
	// Boolean flag which specifies if the alert is sent to the account administrators or not. Defaults to `false`.
	EmailAccountAdminsEnabled pulumi.BoolPtrOutput `pulumi:"emailAccountAdminsEnabled"`
	// Specifies an array of email addresses to which the alert is sent.
	EmailAddresses pulumi.StringArrayOutput `pulumi:"emailAddresses"`
	// Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific SQL pool. Possible values are `Disabled`, `Enabled` and `New`.
	PolicyState pulumi.StringOutput `pulumi:"policyState"`
	// Specifies the number of days to keep in the Threat Detection audit logs. Defaults to `0`.
	RetentionDays pulumi.IntPtrOutput `pulumi:"retentionDays"`
	// Specifies the ID of the Synapse SQL Pool. Changing this forces a new resource to be created.
	SqlPoolId pulumi.StringOutput `pulumi:"sqlPoolId"`
	// Specifies the identifier key of the Threat Detection audit storage account.
	StorageAccountAccessKey pulumi.StringPtrOutput `pulumi:"storageAccountAccessKey"`
	// Specifies the blob storage endpoint (e.g. <https://example.blob.core.windows.net>). This blob storage will hold all Threat Detection audit logs.
	StorageEndpoint pulumi.StringPtrOutput `pulumi:"storageEndpoint"`
}

// NewSqlPoolSecurityAlertPolicy registers a new resource with the given unique name, arguments, and options.
func NewSqlPoolSecurityAlertPolicy(ctx *pulumi.Context,
	name string, args *SqlPoolSecurityAlertPolicyArgs, opts ...pulumi.ResourceOption) (*SqlPoolSecurityAlertPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyState == nil {
		return nil, errors.New("invalid value for required argument 'PolicyState'")
	}
	if args.SqlPoolId == nil {
		return nil, errors.New("invalid value for required argument 'SqlPoolId'")
	}
	if args.StorageAccountAccessKey != nil {
		args.StorageAccountAccessKey = pulumi.ToSecret(args.StorageAccountAccessKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"storageAccountAccessKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SqlPoolSecurityAlertPolicy
	err := ctx.RegisterResource("azure:synapse/sqlPoolSecurityAlertPolicy:SqlPoolSecurityAlertPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlPoolSecurityAlertPolicy gets an existing SqlPoolSecurityAlertPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlPoolSecurityAlertPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlPoolSecurityAlertPolicyState, opts ...pulumi.ResourceOption) (*SqlPoolSecurityAlertPolicy, error) {
	var resource SqlPoolSecurityAlertPolicy
	err := ctx.ReadResource("azure:synapse/sqlPoolSecurityAlertPolicy:SqlPoolSecurityAlertPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlPoolSecurityAlertPolicy resources.
type sqlPoolSecurityAlertPolicyState struct {
	// Specifies an array of alerts that are disabled. Allowed values are: `Sql_Injection`, `Sql_Injection_Vulnerability`, `Access_Anomaly`, `Data_Exfiltration`, `Unsafe_Action`.
	DisabledAlerts []string `pulumi:"disabledAlerts"`
	// Boolean flag which specifies if the alert is sent to the account administrators or not. Defaults to `false`.
	EmailAccountAdminsEnabled *bool `pulumi:"emailAccountAdminsEnabled"`
	// Specifies an array of email addresses to which the alert is sent.
	EmailAddresses []string `pulumi:"emailAddresses"`
	// Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific SQL pool. Possible values are `Disabled`, `Enabled` and `New`.
	PolicyState *string `pulumi:"policyState"`
	// Specifies the number of days to keep in the Threat Detection audit logs. Defaults to `0`.
	RetentionDays *int `pulumi:"retentionDays"`
	// Specifies the ID of the Synapse SQL Pool. Changing this forces a new resource to be created.
	SqlPoolId *string `pulumi:"sqlPoolId"`
	// Specifies the identifier key of the Threat Detection audit storage account.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// Specifies the blob storage endpoint (e.g. <https://example.blob.core.windows.net>). This blob storage will hold all Threat Detection audit logs.
	StorageEndpoint *string `pulumi:"storageEndpoint"`
}

type SqlPoolSecurityAlertPolicyState struct {
	// Specifies an array of alerts that are disabled. Allowed values are: `Sql_Injection`, `Sql_Injection_Vulnerability`, `Access_Anomaly`, `Data_Exfiltration`, `Unsafe_Action`.
	DisabledAlerts pulumi.StringArrayInput
	// Boolean flag which specifies if the alert is sent to the account administrators or not. Defaults to `false`.
	EmailAccountAdminsEnabled pulumi.BoolPtrInput
	// Specifies an array of email addresses to which the alert is sent.
	EmailAddresses pulumi.StringArrayInput
	// Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific SQL pool. Possible values are `Disabled`, `Enabled` and `New`.
	PolicyState pulumi.StringPtrInput
	// Specifies the number of days to keep in the Threat Detection audit logs. Defaults to `0`.
	RetentionDays pulumi.IntPtrInput
	// Specifies the ID of the Synapse SQL Pool. Changing this forces a new resource to be created.
	SqlPoolId pulumi.StringPtrInput
	// Specifies the identifier key of the Threat Detection audit storage account.
	StorageAccountAccessKey pulumi.StringPtrInput
	// Specifies the blob storage endpoint (e.g. <https://example.blob.core.windows.net>). This blob storage will hold all Threat Detection audit logs.
	StorageEndpoint pulumi.StringPtrInput
}

func (SqlPoolSecurityAlertPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlPoolSecurityAlertPolicyState)(nil)).Elem()
}

type sqlPoolSecurityAlertPolicyArgs struct {
	// Specifies an array of alerts that are disabled. Allowed values are: `Sql_Injection`, `Sql_Injection_Vulnerability`, `Access_Anomaly`, `Data_Exfiltration`, `Unsafe_Action`.
	DisabledAlerts []string `pulumi:"disabledAlerts"`
	// Boolean flag which specifies if the alert is sent to the account administrators or not. Defaults to `false`.
	EmailAccountAdminsEnabled *bool `pulumi:"emailAccountAdminsEnabled"`
	// Specifies an array of email addresses to which the alert is sent.
	EmailAddresses []string `pulumi:"emailAddresses"`
	// Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific SQL pool. Possible values are `Disabled`, `Enabled` and `New`.
	PolicyState string `pulumi:"policyState"`
	// Specifies the number of days to keep in the Threat Detection audit logs. Defaults to `0`.
	RetentionDays *int `pulumi:"retentionDays"`
	// Specifies the ID of the Synapse SQL Pool. Changing this forces a new resource to be created.
	SqlPoolId string `pulumi:"sqlPoolId"`
	// Specifies the identifier key of the Threat Detection audit storage account.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// Specifies the blob storage endpoint (e.g. <https://example.blob.core.windows.net>). This blob storage will hold all Threat Detection audit logs.
	StorageEndpoint *string `pulumi:"storageEndpoint"`
}

// The set of arguments for constructing a SqlPoolSecurityAlertPolicy resource.
type SqlPoolSecurityAlertPolicyArgs struct {
	// Specifies an array of alerts that are disabled. Allowed values are: `Sql_Injection`, `Sql_Injection_Vulnerability`, `Access_Anomaly`, `Data_Exfiltration`, `Unsafe_Action`.
	DisabledAlerts pulumi.StringArrayInput
	// Boolean flag which specifies if the alert is sent to the account administrators or not. Defaults to `false`.
	EmailAccountAdminsEnabled pulumi.BoolPtrInput
	// Specifies an array of email addresses to which the alert is sent.
	EmailAddresses pulumi.StringArrayInput
	// Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific SQL pool. Possible values are `Disabled`, `Enabled` and `New`.
	PolicyState pulumi.StringInput
	// Specifies the number of days to keep in the Threat Detection audit logs. Defaults to `0`.
	RetentionDays pulumi.IntPtrInput
	// Specifies the ID of the Synapse SQL Pool. Changing this forces a new resource to be created.
	SqlPoolId pulumi.StringInput
	// Specifies the identifier key of the Threat Detection audit storage account.
	StorageAccountAccessKey pulumi.StringPtrInput
	// Specifies the blob storage endpoint (e.g. <https://example.blob.core.windows.net>). This blob storage will hold all Threat Detection audit logs.
	StorageEndpoint pulumi.StringPtrInput
}

func (SqlPoolSecurityAlertPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlPoolSecurityAlertPolicyArgs)(nil)).Elem()
}

type SqlPoolSecurityAlertPolicyInput interface {
	pulumi.Input

	ToSqlPoolSecurityAlertPolicyOutput() SqlPoolSecurityAlertPolicyOutput
	ToSqlPoolSecurityAlertPolicyOutputWithContext(ctx context.Context) SqlPoolSecurityAlertPolicyOutput
}

func (*SqlPoolSecurityAlertPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlPoolSecurityAlertPolicy)(nil)).Elem()
}

func (i *SqlPoolSecurityAlertPolicy) ToSqlPoolSecurityAlertPolicyOutput() SqlPoolSecurityAlertPolicyOutput {
	return i.ToSqlPoolSecurityAlertPolicyOutputWithContext(context.Background())
}

func (i *SqlPoolSecurityAlertPolicy) ToSqlPoolSecurityAlertPolicyOutputWithContext(ctx context.Context) SqlPoolSecurityAlertPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlPoolSecurityAlertPolicyOutput)
}

// SqlPoolSecurityAlertPolicyArrayInput is an input type that accepts SqlPoolSecurityAlertPolicyArray and SqlPoolSecurityAlertPolicyArrayOutput values.
// You can construct a concrete instance of `SqlPoolSecurityAlertPolicyArrayInput` via:
//
//	SqlPoolSecurityAlertPolicyArray{ SqlPoolSecurityAlertPolicyArgs{...} }
type SqlPoolSecurityAlertPolicyArrayInput interface {
	pulumi.Input

	ToSqlPoolSecurityAlertPolicyArrayOutput() SqlPoolSecurityAlertPolicyArrayOutput
	ToSqlPoolSecurityAlertPolicyArrayOutputWithContext(context.Context) SqlPoolSecurityAlertPolicyArrayOutput
}

type SqlPoolSecurityAlertPolicyArray []SqlPoolSecurityAlertPolicyInput

func (SqlPoolSecurityAlertPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlPoolSecurityAlertPolicy)(nil)).Elem()
}

func (i SqlPoolSecurityAlertPolicyArray) ToSqlPoolSecurityAlertPolicyArrayOutput() SqlPoolSecurityAlertPolicyArrayOutput {
	return i.ToSqlPoolSecurityAlertPolicyArrayOutputWithContext(context.Background())
}

func (i SqlPoolSecurityAlertPolicyArray) ToSqlPoolSecurityAlertPolicyArrayOutputWithContext(ctx context.Context) SqlPoolSecurityAlertPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlPoolSecurityAlertPolicyArrayOutput)
}

// SqlPoolSecurityAlertPolicyMapInput is an input type that accepts SqlPoolSecurityAlertPolicyMap and SqlPoolSecurityAlertPolicyMapOutput values.
// You can construct a concrete instance of `SqlPoolSecurityAlertPolicyMapInput` via:
//
//	SqlPoolSecurityAlertPolicyMap{ "key": SqlPoolSecurityAlertPolicyArgs{...} }
type SqlPoolSecurityAlertPolicyMapInput interface {
	pulumi.Input

	ToSqlPoolSecurityAlertPolicyMapOutput() SqlPoolSecurityAlertPolicyMapOutput
	ToSqlPoolSecurityAlertPolicyMapOutputWithContext(context.Context) SqlPoolSecurityAlertPolicyMapOutput
}

type SqlPoolSecurityAlertPolicyMap map[string]SqlPoolSecurityAlertPolicyInput

func (SqlPoolSecurityAlertPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlPoolSecurityAlertPolicy)(nil)).Elem()
}

func (i SqlPoolSecurityAlertPolicyMap) ToSqlPoolSecurityAlertPolicyMapOutput() SqlPoolSecurityAlertPolicyMapOutput {
	return i.ToSqlPoolSecurityAlertPolicyMapOutputWithContext(context.Background())
}

func (i SqlPoolSecurityAlertPolicyMap) ToSqlPoolSecurityAlertPolicyMapOutputWithContext(ctx context.Context) SqlPoolSecurityAlertPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlPoolSecurityAlertPolicyMapOutput)
}

type SqlPoolSecurityAlertPolicyOutput struct{ *pulumi.OutputState }

func (SqlPoolSecurityAlertPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlPoolSecurityAlertPolicy)(nil)).Elem()
}

func (o SqlPoolSecurityAlertPolicyOutput) ToSqlPoolSecurityAlertPolicyOutput() SqlPoolSecurityAlertPolicyOutput {
	return o
}

func (o SqlPoolSecurityAlertPolicyOutput) ToSqlPoolSecurityAlertPolicyOutputWithContext(ctx context.Context) SqlPoolSecurityAlertPolicyOutput {
	return o
}

// Specifies an array of alerts that are disabled. Allowed values are: `Sql_Injection`, `Sql_Injection_Vulnerability`, `Access_Anomaly`, `Data_Exfiltration`, `Unsafe_Action`.
func (o SqlPoolSecurityAlertPolicyOutput) DisabledAlerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SqlPoolSecurityAlertPolicy) pulumi.StringArrayOutput { return v.DisabledAlerts }).(pulumi.StringArrayOutput)
}

// Boolean flag which specifies if the alert is sent to the account administrators or not. Defaults to `false`.
func (o SqlPoolSecurityAlertPolicyOutput) EmailAccountAdminsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlPoolSecurityAlertPolicy) pulumi.BoolPtrOutput { return v.EmailAccountAdminsEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies an array of email addresses to which the alert is sent.
func (o SqlPoolSecurityAlertPolicyOutput) EmailAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SqlPoolSecurityAlertPolicy) pulumi.StringArrayOutput { return v.EmailAddresses }).(pulumi.StringArrayOutput)
}

// Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific SQL pool. Possible values are `Disabled`, `Enabled` and `New`.
func (o SqlPoolSecurityAlertPolicyOutput) PolicyState() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlPoolSecurityAlertPolicy) pulumi.StringOutput { return v.PolicyState }).(pulumi.StringOutput)
}

// Specifies the number of days to keep in the Threat Detection audit logs. Defaults to `0`.
func (o SqlPoolSecurityAlertPolicyOutput) RetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SqlPoolSecurityAlertPolicy) pulumi.IntPtrOutput { return v.RetentionDays }).(pulumi.IntPtrOutput)
}

// Specifies the ID of the Synapse SQL Pool. Changing this forces a new resource to be created.
func (o SqlPoolSecurityAlertPolicyOutput) SqlPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlPoolSecurityAlertPolicy) pulumi.StringOutput { return v.SqlPoolId }).(pulumi.StringOutput)
}

// Specifies the identifier key of the Threat Detection audit storage account.
func (o SqlPoolSecurityAlertPolicyOutput) StorageAccountAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlPoolSecurityAlertPolicy) pulumi.StringPtrOutput { return v.StorageAccountAccessKey }).(pulumi.StringPtrOutput)
}

// Specifies the blob storage endpoint (e.g. <https://example.blob.core.windows.net>). This blob storage will hold all Threat Detection audit logs.
func (o SqlPoolSecurityAlertPolicyOutput) StorageEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlPoolSecurityAlertPolicy) pulumi.StringPtrOutput { return v.StorageEndpoint }).(pulumi.StringPtrOutput)
}

type SqlPoolSecurityAlertPolicyArrayOutput struct{ *pulumi.OutputState }

func (SqlPoolSecurityAlertPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlPoolSecurityAlertPolicy)(nil)).Elem()
}

func (o SqlPoolSecurityAlertPolicyArrayOutput) ToSqlPoolSecurityAlertPolicyArrayOutput() SqlPoolSecurityAlertPolicyArrayOutput {
	return o
}

func (o SqlPoolSecurityAlertPolicyArrayOutput) ToSqlPoolSecurityAlertPolicyArrayOutputWithContext(ctx context.Context) SqlPoolSecurityAlertPolicyArrayOutput {
	return o
}

func (o SqlPoolSecurityAlertPolicyArrayOutput) Index(i pulumi.IntInput) SqlPoolSecurityAlertPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SqlPoolSecurityAlertPolicy {
		return vs[0].([]*SqlPoolSecurityAlertPolicy)[vs[1].(int)]
	}).(SqlPoolSecurityAlertPolicyOutput)
}

type SqlPoolSecurityAlertPolicyMapOutput struct{ *pulumi.OutputState }

func (SqlPoolSecurityAlertPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlPoolSecurityAlertPolicy)(nil)).Elem()
}

func (o SqlPoolSecurityAlertPolicyMapOutput) ToSqlPoolSecurityAlertPolicyMapOutput() SqlPoolSecurityAlertPolicyMapOutput {
	return o
}

func (o SqlPoolSecurityAlertPolicyMapOutput) ToSqlPoolSecurityAlertPolicyMapOutputWithContext(ctx context.Context) SqlPoolSecurityAlertPolicyMapOutput {
	return o
}

func (o SqlPoolSecurityAlertPolicyMapOutput) MapIndex(k pulumi.StringInput) SqlPoolSecurityAlertPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SqlPoolSecurityAlertPolicy {
		return vs[0].(map[string]*SqlPoolSecurityAlertPolicy)[vs[1].(string)]
	}).(SqlPoolSecurityAlertPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SqlPoolSecurityAlertPolicyInput)(nil)).Elem(), &SqlPoolSecurityAlertPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlPoolSecurityAlertPolicyArrayInput)(nil)).Elem(), SqlPoolSecurityAlertPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlPoolSecurityAlertPolicyMapInput)(nil)).Elem(), SqlPoolSecurityAlertPolicyMap{})
	pulumi.RegisterOutputType(SqlPoolSecurityAlertPolicyOutput{})
	pulumi.RegisterOutputType(SqlPoolSecurityAlertPolicyArrayOutput{})
	pulumi.RegisterOutputType(SqlPoolSecurityAlertPolicyMapOutput{})
}
