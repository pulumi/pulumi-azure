// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package synapse

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SparkPoolAutoPause struct {
	// Number of minutes of idle time before the Spark Pool is automatically paused. Must be between `5` and `10080`.
	DelayInMinutes int `pulumi:"delayInMinutes"`
}

// SparkPoolAutoPauseInput is an input type that accepts SparkPoolAutoPauseArgs and SparkPoolAutoPauseOutput values.
// You can construct a concrete instance of `SparkPoolAutoPauseInput` via:
//
//          SparkPoolAutoPauseArgs{...}
type SparkPoolAutoPauseInput interface {
	pulumi.Input

	ToSparkPoolAutoPauseOutput() SparkPoolAutoPauseOutput
	ToSparkPoolAutoPauseOutputWithContext(context.Context) SparkPoolAutoPauseOutput
}

type SparkPoolAutoPauseArgs struct {
	// Number of minutes of idle time before the Spark Pool is automatically paused. Must be between `5` and `10080`.
	DelayInMinutes pulumi.IntInput `pulumi:"delayInMinutes"`
}

func (SparkPoolAutoPauseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkPoolAutoPause)(nil)).Elem()
}

func (i SparkPoolAutoPauseArgs) ToSparkPoolAutoPauseOutput() SparkPoolAutoPauseOutput {
	return i.ToSparkPoolAutoPauseOutputWithContext(context.Background())
}

func (i SparkPoolAutoPauseArgs) ToSparkPoolAutoPauseOutputWithContext(ctx context.Context) SparkPoolAutoPauseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkPoolAutoPauseOutput)
}

func (i SparkPoolAutoPauseArgs) ToSparkPoolAutoPausePtrOutput() SparkPoolAutoPausePtrOutput {
	return i.ToSparkPoolAutoPausePtrOutputWithContext(context.Background())
}

func (i SparkPoolAutoPauseArgs) ToSparkPoolAutoPausePtrOutputWithContext(ctx context.Context) SparkPoolAutoPausePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkPoolAutoPauseOutput).ToSparkPoolAutoPausePtrOutputWithContext(ctx)
}

// SparkPoolAutoPausePtrInput is an input type that accepts SparkPoolAutoPauseArgs, SparkPoolAutoPausePtr and SparkPoolAutoPausePtrOutput values.
// You can construct a concrete instance of `SparkPoolAutoPausePtrInput` via:
//
//          SparkPoolAutoPauseArgs{...}
//
//  or:
//
//          nil
type SparkPoolAutoPausePtrInput interface {
	pulumi.Input

	ToSparkPoolAutoPausePtrOutput() SparkPoolAutoPausePtrOutput
	ToSparkPoolAutoPausePtrOutputWithContext(context.Context) SparkPoolAutoPausePtrOutput
}

type sparkPoolAutoPausePtrType SparkPoolAutoPauseArgs

func SparkPoolAutoPausePtr(v *SparkPoolAutoPauseArgs) SparkPoolAutoPausePtrInput {
	return (*sparkPoolAutoPausePtrType)(v)
}

func (*sparkPoolAutoPausePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkPoolAutoPause)(nil)).Elem()
}

func (i *sparkPoolAutoPausePtrType) ToSparkPoolAutoPausePtrOutput() SparkPoolAutoPausePtrOutput {
	return i.ToSparkPoolAutoPausePtrOutputWithContext(context.Background())
}

func (i *sparkPoolAutoPausePtrType) ToSparkPoolAutoPausePtrOutputWithContext(ctx context.Context) SparkPoolAutoPausePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkPoolAutoPausePtrOutput)
}

type SparkPoolAutoPauseOutput struct{ *pulumi.OutputState }

func (SparkPoolAutoPauseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkPoolAutoPause)(nil)).Elem()
}

func (o SparkPoolAutoPauseOutput) ToSparkPoolAutoPauseOutput() SparkPoolAutoPauseOutput {
	return o
}

func (o SparkPoolAutoPauseOutput) ToSparkPoolAutoPauseOutputWithContext(ctx context.Context) SparkPoolAutoPauseOutput {
	return o
}

func (o SparkPoolAutoPauseOutput) ToSparkPoolAutoPausePtrOutput() SparkPoolAutoPausePtrOutput {
	return o.ToSparkPoolAutoPausePtrOutputWithContext(context.Background())
}

func (o SparkPoolAutoPauseOutput) ToSparkPoolAutoPausePtrOutputWithContext(ctx context.Context) SparkPoolAutoPausePtrOutput {
	return o.ApplyT(func(v SparkPoolAutoPause) *SparkPoolAutoPause {
		return &v
	}).(SparkPoolAutoPausePtrOutput)
}

// Number of minutes of idle time before the Spark Pool is automatically paused. Must be between `5` and `10080`.
func (o SparkPoolAutoPauseOutput) DelayInMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v SparkPoolAutoPause) int { return v.DelayInMinutes }).(pulumi.IntOutput)
}

type SparkPoolAutoPausePtrOutput struct{ *pulumi.OutputState }

func (SparkPoolAutoPausePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkPoolAutoPause)(nil)).Elem()
}

func (o SparkPoolAutoPausePtrOutput) ToSparkPoolAutoPausePtrOutput() SparkPoolAutoPausePtrOutput {
	return o
}

func (o SparkPoolAutoPausePtrOutput) ToSparkPoolAutoPausePtrOutputWithContext(ctx context.Context) SparkPoolAutoPausePtrOutput {
	return o
}

func (o SparkPoolAutoPausePtrOutput) Elem() SparkPoolAutoPauseOutput {
	return o.ApplyT(func(v *SparkPoolAutoPause) SparkPoolAutoPause { return *v }).(SparkPoolAutoPauseOutput)
}

// Number of minutes of idle time before the Spark Pool is automatically paused. Must be between `5` and `10080`.
func (o SparkPoolAutoPausePtrOutput) DelayInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SparkPoolAutoPause) *int {
		if v == nil {
			return nil
		}
		return &v.DelayInMinutes
	}).(pulumi.IntPtrOutput)
}

type SparkPoolAutoScale struct {
	// The maximum number of nodes the Spark Pool can support. Must be between `3` and `200`.
	MaxNodeCount int `pulumi:"maxNodeCount"`
	// The minimum number of nodes the Spark Pool can support. Must be between `3` and `200`.
	MinNodeCount int `pulumi:"minNodeCount"`
}

// SparkPoolAutoScaleInput is an input type that accepts SparkPoolAutoScaleArgs and SparkPoolAutoScaleOutput values.
// You can construct a concrete instance of `SparkPoolAutoScaleInput` via:
//
//          SparkPoolAutoScaleArgs{...}
type SparkPoolAutoScaleInput interface {
	pulumi.Input

	ToSparkPoolAutoScaleOutput() SparkPoolAutoScaleOutput
	ToSparkPoolAutoScaleOutputWithContext(context.Context) SparkPoolAutoScaleOutput
}

type SparkPoolAutoScaleArgs struct {
	// The maximum number of nodes the Spark Pool can support. Must be between `3` and `200`.
	MaxNodeCount pulumi.IntInput `pulumi:"maxNodeCount"`
	// The minimum number of nodes the Spark Pool can support. Must be between `3` and `200`.
	MinNodeCount pulumi.IntInput `pulumi:"minNodeCount"`
}

func (SparkPoolAutoScaleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkPoolAutoScale)(nil)).Elem()
}

func (i SparkPoolAutoScaleArgs) ToSparkPoolAutoScaleOutput() SparkPoolAutoScaleOutput {
	return i.ToSparkPoolAutoScaleOutputWithContext(context.Background())
}

func (i SparkPoolAutoScaleArgs) ToSparkPoolAutoScaleOutputWithContext(ctx context.Context) SparkPoolAutoScaleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkPoolAutoScaleOutput)
}

func (i SparkPoolAutoScaleArgs) ToSparkPoolAutoScalePtrOutput() SparkPoolAutoScalePtrOutput {
	return i.ToSparkPoolAutoScalePtrOutputWithContext(context.Background())
}

func (i SparkPoolAutoScaleArgs) ToSparkPoolAutoScalePtrOutputWithContext(ctx context.Context) SparkPoolAutoScalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkPoolAutoScaleOutput).ToSparkPoolAutoScalePtrOutputWithContext(ctx)
}

// SparkPoolAutoScalePtrInput is an input type that accepts SparkPoolAutoScaleArgs, SparkPoolAutoScalePtr and SparkPoolAutoScalePtrOutput values.
// You can construct a concrete instance of `SparkPoolAutoScalePtrInput` via:
//
//          SparkPoolAutoScaleArgs{...}
//
//  or:
//
//          nil
type SparkPoolAutoScalePtrInput interface {
	pulumi.Input

	ToSparkPoolAutoScalePtrOutput() SparkPoolAutoScalePtrOutput
	ToSparkPoolAutoScalePtrOutputWithContext(context.Context) SparkPoolAutoScalePtrOutput
}

type sparkPoolAutoScalePtrType SparkPoolAutoScaleArgs

func SparkPoolAutoScalePtr(v *SparkPoolAutoScaleArgs) SparkPoolAutoScalePtrInput {
	return (*sparkPoolAutoScalePtrType)(v)
}

func (*sparkPoolAutoScalePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkPoolAutoScale)(nil)).Elem()
}

func (i *sparkPoolAutoScalePtrType) ToSparkPoolAutoScalePtrOutput() SparkPoolAutoScalePtrOutput {
	return i.ToSparkPoolAutoScalePtrOutputWithContext(context.Background())
}

func (i *sparkPoolAutoScalePtrType) ToSparkPoolAutoScalePtrOutputWithContext(ctx context.Context) SparkPoolAutoScalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkPoolAutoScalePtrOutput)
}

type SparkPoolAutoScaleOutput struct{ *pulumi.OutputState }

func (SparkPoolAutoScaleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkPoolAutoScale)(nil)).Elem()
}

func (o SparkPoolAutoScaleOutput) ToSparkPoolAutoScaleOutput() SparkPoolAutoScaleOutput {
	return o
}

func (o SparkPoolAutoScaleOutput) ToSparkPoolAutoScaleOutputWithContext(ctx context.Context) SparkPoolAutoScaleOutput {
	return o
}

func (o SparkPoolAutoScaleOutput) ToSparkPoolAutoScalePtrOutput() SparkPoolAutoScalePtrOutput {
	return o.ToSparkPoolAutoScalePtrOutputWithContext(context.Background())
}

func (o SparkPoolAutoScaleOutput) ToSparkPoolAutoScalePtrOutputWithContext(ctx context.Context) SparkPoolAutoScalePtrOutput {
	return o.ApplyT(func(v SparkPoolAutoScale) *SparkPoolAutoScale {
		return &v
	}).(SparkPoolAutoScalePtrOutput)
}

// The maximum number of nodes the Spark Pool can support. Must be between `3` and `200`.
func (o SparkPoolAutoScaleOutput) MaxNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v SparkPoolAutoScale) int { return v.MaxNodeCount }).(pulumi.IntOutput)
}

// The minimum number of nodes the Spark Pool can support. Must be between `3` and `200`.
func (o SparkPoolAutoScaleOutput) MinNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v SparkPoolAutoScale) int { return v.MinNodeCount }).(pulumi.IntOutput)
}

type SparkPoolAutoScalePtrOutput struct{ *pulumi.OutputState }

func (SparkPoolAutoScalePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkPoolAutoScale)(nil)).Elem()
}

func (o SparkPoolAutoScalePtrOutput) ToSparkPoolAutoScalePtrOutput() SparkPoolAutoScalePtrOutput {
	return o
}

func (o SparkPoolAutoScalePtrOutput) ToSparkPoolAutoScalePtrOutputWithContext(ctx context.Context) SparkPoolAutoScalePtrOutput {
	return o
}

func (o SparkPoolAutoScalePtrOutput) Elem() SparkPoolAutoScaleOutput {
	return o.ApplyT(func(v *SparkPoolAutoScale) SparkPoolAutoScale { return *v }).(SparkPoolAutoScaleOutput)
}

// The maximum number of nodes the Spark Pool can support. Must be between `3` and `200`.
func (o SparkPoolAutoScalePtrOutput) MaxNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SparkPoolAutoScale) *int {
		if v == nil {
			return nil
		}
		return &v.MaxNodeCount
	}).(pulumi.IntPtrOutput)
}

// The minimum number of nodes the Spark Pool can support. Must be between `3` and `200`.
func (o SparkPoolAutoScalePtrOutput) MinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SparkPoolAutoScale) *int {
		if v == nil {
			return nil
		}
		return &v.MinNodeCount
	}).(pulumi.IntPtrOutput)
}

type SparkPoolLibraryRequirement struct {
	// The content of library requirements.
	Content string `pulumi:"content"`
	// The name of the library requirements file.
	Filename string `pulumi:"filename"`
}

// SparkPoolLibraryRequirementInput is an input type that accepts SparkPoolLibraryRequirementArgs and SparkPoolLibraryRequirementOutput values.
// You can construct a concrete instance of `SparkPoolLibraryRequirementInput` via:
//
//          SparkPoolLibraryRequirementArgs{...}
type SparkPoolLibraryRequirementInput interface {
	pulumi.Input

	ToSparkPoolLibraryRequirementOutput() SparkPoolLibraryRequirementOutput
	ToSparkPoolLibraryRequirementOutputWithContext(context.Context) SparkPoolLibraryRequirementOutput
}

type SparkPoolLibraryRequirementArgs struct {
	// The content of library requirements.
	Content pulumi.StringInput `pulumi:"content"`
	// The name of the library requirements file.
	Filename pulumi.StringInput `pulumi:"filename"`
}

func (SparkPoolLibraryRequirementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkPoolLibraryRequirement)(nil)).Elem()
}

func (i SparkPoolLibraryRequirementArgs) ToSparkPoolLibraryRequirementOutput() SparkPoolLibraryRequirementOutput {
	return i.ToSparkPoolLibraryRequirementOutputWithContext(context.Background())
}

func (i SparkPoolLibraryRequirementArgs) ToSparkPoolLibraryRequirementOutputWithContext(ctx context.Context) SparkPoolLibraryRequirementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkPoolLibraryRequirementOutput)
}

func (i SparkPoolLibraryRequirementArgs) ToSparkPoolLibraryRequirementPtrOutput() SparkPoolLibraryRequirementPtrOutput {
	return i.ToSparkPoolLibraryRequirementPtrOutputWithContext(context.Background())
}

func (i SparkPoolLibraryRequirementArgs) ToSparkPoolLibraryRequirementPtrOutputWithContext(ctx context.Context) SparkPoolLibraryRequirementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkPoolLibraryRequirementOutput).ToSparkPoolLibraryRequirementPtrOutputWithContext(ctx)
}

// SparkPoolLibraryRequirementPtrInput is an input type that accepts SparkPoolLibraryRequirementArgs, SparkPoolLibraryRequirementPtr and SparkPoolLibraryRequirementPtrOutput values.
// You can construct a concrete instance of `SparkPoolLibraryRequirementPtrInput` via:
//
//          SparkPoolLibraryRequirementArgs{...}
//
//  or:
//
//          nil
type SparkPoolLibraryRequirementPtrInput interface {
	pulumi.Input

	ToSparkPoolLibraryRequirementPtrOutput() SparkPoolLibraryRequirementPtrOutput
	ToSparkPoolLibraryRequirementPtrOutputWithContext(context.Context) SparkPoolLibraryRequirementPtrOutput
}

type sparkPoolLibraryRequirementPtrType SparkPoolLibraryRequirementArgs

func SparkPoolLibraryRequirementPtr(v *SparkPoolLibraryRequirementArgs) SparkPoolLibraryRequirementPtrInput {
	return (*sparkPoolLibraryRequirementPtrType)(v)
}

func (*sparkPoolLibraryRequirementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkPoolLibraryRequirement)(nil)).Elem()
}

func (i *sparkPoolLibraryRequirementPtrType) ToSparkPoolLibraryRequirementPtrOutput() SparkPoolLibraryRequirementPtrOutput {
	return i.ToSparkPoolLibraryRequirementPtrOutputWithContext(context.Background())
}

func (i *sparkPoolLibraryRequirementPtrType) ToSparkPoolLibraryRequirementPtrOutputWithContext(ctx context.Context) SparkPoolLibraryRequirementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkPoolLibraryRequirementPtrOutput)
}

type SparkPoolLibraryRequirementOutput struct{ *pulumi.OutputState }

func (SparkPoolLibraryRequirementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkPoolLibraryRequirement)(nil)).Elem()
}

func (o SparkPoolLibraryRequirementOutput) ToSparkPoolLibraryRequirementOutput() SparkPoolLibraryRequirementOutput {
	return o
}

func (o SparkPoolLibraryRequirementOutput) ToSparkPoolLibraryRequirementOutputWithContext(ctx context.Context) SparkPoolLibraryRequirementOutput {
	return o
}

func (o SparkPoolLibraryRequirementOutput) ToSparkPoolLibraryRequirementPtrOutput() SparkPoolLibraryRequirementPtrOutput {
	return o.ToSparkPoolLibraryRequirementPtrOutputWithContext(context.Background())
}

func (o SparkPoolLibraryRequirementOutput) ToSparkPoolLibraryRequirementPtrOutputWithContext(ctx context.Context) SparkPoolLibraryRequirementPtrOutput {
	return o.ApplyT(func(v SparkPoolLibraryRequirement) *SparkPoolLibraryRequirement {
		return &v
	}).(SparkPoolLibraryRequirementPtrOutput)
}

// The content of library requirements.
func (o SparkPoolLibraryRequirementOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v SparkPoolLibraryRequirement) string { return v.Content }).(pulumi.StringOutput)
}

// The name of the library requirements file.
func (o SparkPoolLibraryRequirementOutput) Filename() pulumi.StringOutput {
	return o.ApplyT(func(v SparkPoolLibraryRequirement) string { return v.Filename }).(pulumi.StringOutput)
}

type SparkPoolLibraryRequirementPtrOutput struct{ *pulumi.OutputState }

func (SparkPoolLibraryRequirementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkPoolLibraryRequirement)(nil)).Elem()
}

func (o SparkPoolLibraryRequirementPtrOutput) ToSparkPoolLibraryRequirementPtrOutput() SparkPoolLibraryRequirementPtrOutput {
	return o
}

func (o SparkPoolLibraryRequirementPtrOutput) ToSparkPoolLibraryRequirementPtrOutputWithContext(ctx context.Context) SparkPoolLibraryRequirementPtrOutput {
	return o
}

func (o SparkPoolLibraryRequirementPtrOutput) Elem() SparkPoolLibraryRequirementOutput {
	return o.ApplyT(func(v *SparkPoolLibraryRequirement) SparkPoolLibraryRequirement { return *v }).(SparkPoolLibraryRequirementOutput)
}

// The content of library requirements.
func (o SparkPoolLibraryRequirementPtrOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkPoolLibraryRequirement) *string {
		if v == nil {
			return nil
		}
		return &v.Content
	}).(pulumi.StringPtrOutput)
}

// The name of the library requirements file.
func (o SparkPoolLibraryRequirementPtrOutput) Filename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkPoolLibraryRequirement) *string {
		if v == nil {
			return nil
		}
		return &v.Filename
	}).(pulumi.StringPtrOutput)
}

type SqlPoolRestore struct {
	// Specifies the Snapshot time to restore. Changing this forces a new Synapse Sql Pool to be created.
	PointInTime string `pulumi:"pointInTime"`
	// The ID of the Synapse Sql Pool or Sql Database which is to restore. Changing this forces a new Synapse Sql Pool to be created.
	SourceDatabaseId string `pulumi:"sourceDatabaseId"`
}

// SqlPoolRestoreInput is an input type that accepts SqlPoolRestoreArgs and SqlPoolRestoreOutput values.
// You can construct a concrete instance of `SqlPoolRestoreInput` via:
//
//          SqlPoolRestoreArgs{...}
type SqlPoolRestoreInput interface {
	pulumi.Input

	ToSqlPoolRestoreOutput() SqlPoolRestoreOutput
	ToSqlPoolRestoreOutputWithContext(context.Context) SqlPoolRestoreOutput
}

type SqlPoolRestoreArgs struct {
	// Specifies the Snapshot time to restore. Changing this forces a new Synapse Sql Pool to be created.
	PointInTime pulumi.StringInput `pulumi:"pointInTime"`
	// The ID of the Synapse Sql Pool or Sql Database which is to restore. Changing this forces a new Synapse Sql Pool to be created.
	SourceDatabaseId pulumi.StringInput `pulumi:"sourceDatabaseId"`
}

func (SqlPoolRestoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlPoolRestore)(nil)).Elem()
}

func (i SqlPoolRestoreArgs) ToSqlPoolRestoreOutput() SqlPoolRestoreOutput {
	return i.ToSqlPoolRestoreOutputWithContext(context.Background())
}

func (i SqlPoolRestoreArgs) ToSqlPoolRestoreOutputWithContext(ctx context.Context) SqlPoolRestoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlPoolRestoreOutput)
}

func (i SqlPoolRestoreArgs) ToSqlPoolRestorePtrOutput() SqlPoolRestorePtrOutput {
	return i.ToSqlPoolRestorePtrOutputWithContext(context.Background())
}

func (i SqlPoolRestoreArgs) ToSqlPoolRestorePtrOutputWithContext(ctx context.Context) SqlPoolRestorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlPoolRestoreOutput).ToSqlPoolRestorePtrOutputWithContext(ctx)
}

// SqlPoolRestorePtrInput is an input type that accepts SqlPoolRestoreArgs, SqlPoolRestorePtr and SqlPoolRestorePtrOutput values.
// You can construct a concrete instance of `SqlPoolRestorePtrInput` via:
//
//          SqlPoolRestoreArgs{...}
//
//  or:
//
//          nil
type SqlPoolRestorePtrInput interface {
	pulumi.Input

	ToSqlPoolRestorePtrOutput() SqlPoolRestorePtrOutput
	ToSqlPoolRestorePtrOutputWithContext(context.Context) SqlPoolRestorePtrOutput
}

type sqlPoolRestorePtrType SqlPoolRestoreArgs

func SqlPoolRestorePtr(v *SqlPoolRestoreArgs) SqlPoolRestorePtrInput {
	return (*sqlPoolRestorePtrType)(v)
}

func (*sqlPoolRestorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlPoolRestore)(nil)).Elem()
}

func (i *sqlPoolRestorePtrType) ToSqlPoolRestorePtrOutput() SqlPoolRestorePtrOutput {
	return i.ToSqlPoolRestorePtrOutputWithContext(context.Background())
}

func (i *sqlPoolRestorePtrType) ToSqlPoolRestorePtrOutputWithContext(ctx context.Context) SqlPoolRestorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlPoolRestorePtrOutput)
}

type SqlPoolRestoreOutput struct{ *pulumi.OutputState }

func (SqlPoolRestoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlPoolRestore)(nil)).Elem()
}

func (o SqlPoolRestoreOutput) ToSqlPoolRestoreOutput() SqlPoolRestoreOutput {
	return o
}

func (o SqlPoolRestoreOutput) ToSqlPoolRestoreOutputWithContext(ctx context.Context) SqlPoolRestoreOutput {
	return o
}

func (o SqlPoolRestoreOutput) ToSqlPoolRestorePtrOutput() SqlPoolRestorePtrOutput {
	return o.ToSqlPoolRestorePtrOutputWithContext(context.Background())
}

func (o SqlPoolRestoreOutput) ToSqlPoolRestorePtrOutputWithContext(ctx context.Context) SqlPoolRestorePtrOutput {
	return o.ApplyT(func(v SqlPoolRestore) *SqlPoolRestore {
		return &v
	}).(SqlPoolRestorePtrOutput)
}

// Specifies the Snapshot time to restore. Changing this forces a new Synapse Sql Pool to be created.
func (o SqlPoolRestoreOutput) PointInTime() pulumi.StringOutput {
	return o.ApplyT(func(v SqlPoolRestore) string { return v.PointInTime }).(pulumi.StringOutput)
}

// The ID of the Synapse Sql Pool or Sql Database which is to restore. Changing this forces a new Synapse Sql Pool to be created.
func (o SqlPoolRestoreOutput) SourceDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v SqlPoolRestore) string { return v.SourceDatabaseId }).(pulumi.StringOutput)
}

type SqlPoolRestorePtrOutput struct{ *pulumi.OutputState }

func (SqlPoolRestorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlPoolRestore)(nil)).Elem()
}

func (o SqlPoolRestorePtrOutput) ToSqlPoolRestorePtrOutput() SqlPoolRestorePtrOutput {
	return o
}

func (o SqlPoolRestorePtrOutput) ToSqlPoolRestorePtrOutputWithContext(ctx context.Context) SqlPoolRestorePtrOutput {
	return o
}

func (o SqlPoolRestorePtrOutput) Elem() SqlPoolRestoreOutput {
	return o.ApplyT(func(v *SqlPoolRestore) SqlPoolRestore { return *v }).(SqlPoolRestoreOutput)
}

// Specifies the Snapshot time to restore. Changing this forces a new Synapse Sql Pool to be created.
func (o SqlPoolRestorePtrOutput) PointInTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlPoolRestore) *string {
		if v == nil {
			return nil
		}
		return &v.PointInTime
	}).(pulumi.StringPtrOutput)
}

// The ID of the Synapse Sql Pool or Sql Database which is to restore. Changing this forces a new Synapse Sql Pool to be created.
func (o SqlPoolRestorePtrOutput) SourceDatabaseId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlPoolRestore) *string {
		if v == nil {
			return nil
		}
		return &v.SourceDatabaseId
	}).(pulumi.StringPtrOutput)
}

type WorkspaceAadAdmin struct {
	// The login name of the Azure AD Administrator of this Synapse Workspace.
	Login string `pulumi:"login"`
	// The object id of the Azure AD Administrator of this Synapse Workspace.
	ObjectId string `pulumi:"objectId"`
	// The tenant id of the Azure AD Administrator of this Synapse Workspace.
	TenantId string `pulumi:"tenantId"`
}

// WorkspaceAadAdminInput is an input type that accepts WorkspaceAadAdminArgs and WorkspaceAadAdminOutput values.
// You can construct a concrete instance of `WorkspaceAadAdminInput` via:
//
//          WorkspaceAadAdminArgs{...}
type WorkspaceAadAdminInput interface {
	pulumi.Input

	ToWorkspaceAadAdminOutput() WorkspaceAadAdminOutput
	ToWorkspaceAadAdminOutputWithContext(context.Context) WorkspaceAadAdminOutput
}

type WorkspaceAadAdminArgs struct {
	// The login name of the Azure AD Administrator of this Synapse Workspace.
	Login pulumi.StringInput `pulumi:"login"`
	// The object id of the Azure AD Administrator of this Synapse Workspace.
	ObjectId pulumi.StringInput `pulumi:"objectId"`
	// The tenant id of the Azure AD Administrator of this Synapse Workspace.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (WorkspaceAadAdminArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceAadAdmin)(nil)).Elem()
}

func (i WorkspaceAadAdminArgs) ToWorkspaceAadAdminOutput() WorkspaceAadAdminOutput {
	return i.ToWorkspaceAadAdminOutputWithContext(context.Background())
}

func (i WorkspaceAadAdminArgs) ToWorkspaceAadAdminOutputWithContext(ctx context.Context) WorkspaceAadAdminOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceAadAdminOutput)
}

func (i WorkspaceAadAdminArgs) ToWorkspaceAadAdminPtrOutput() WorkspaceAadAdminPtrOutput {
	return i.ToWorkspaceAadAdminPtrOutputWithContext(context.Background())
}

func (i WorkspaceAadAdminArgs) ToWorkspaceAadAdminPtrOutputWithContext(ctx context.Context) WorkspaceAadAdminPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceAadAdminOutput).ToWorkspaceAadAdminPtrOutputWithContext(ctx)
}

// WorkspaceAadAdminPtrInput is an input type that accepts WorkspaceAadAdminArgs, WorkspaceAadAdminPtr and WorkspaceAadAdminPtrOutput values.
// You can construct a concrete instance of `WorkspaceAadAdminPtrInput` via:
//
//          WorkspaceAadAdminArgs{...}
//
//  or:
//
//          nil
type WorkspaceAadAdminPtrInput interface {
	pulumi.Input

	ToWorkspaceAadAdminPtrOutput() WorkspaceAadAdminPtrOutput
	ToWorkspaceAadAdminPtrOutputWithContext(context.Context) WorkspaceAadAdminPtrOutput
}

type workspaceAadAdminPtrType WorkspaceAadAdminArgs

func WorkspaceAadAdminPtr(v *WorkspaceAadAdminArgs) WorkspaceAadAdminPtrInput {
	return (*workspaceAadAdminPtrType)(v)
}

func (*workspaceAadAdminPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceAadAdmin)(nil)).Elem()
}

func (i *workspaceAadAdminPtrType) ToWorkspaceAadAdminPtrOutput() WorkspaceAadAdminPtrOutput {
	return i.ToWorkspaceAadAdminPtrOutputWithContext(context.Background())
}

func (i *workspaceAadAdminPtrType) ToWorkspaceAadAdminPtrOutputWithContext(ctx context.Context) WorkspaceAadAdminPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceAadAdminPtrOutput)
}

type WorkspaceAadAdminOutput struct{ *pulumi.OutputState }

func (WorkspaceAadAdminOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceAadAdmin)(nil)).Elem()
}

func (o WorkspaceAadAdminOutput) ToWorkspaceAadAdminOutput() WorkspaceAadAdminOutput {
	return o
}

func (o WorkspaceAadAdminOutput) ToWorkspaceAadAdminOutputWithContext(ctx context.Context) WorkspaceAadAdminOutput {
	return o
}

func (o WorkspaceAadAdminOutput) ToWorkspaceAadAdminPtrOutput() WorkspaceAadAdminPtrOutput {
	return o.ToWorkspaceAadAdminPtrOutputWithContext(context.Background())
}

func (o WorkspaceAadAdminOutput) ToWorkspaceAadAdminPtrOutputWithContext(ctx context.Context) WorkspaceAadAdminPtrOutput {
	return o.ApplyT(func(v WorkspaceAadAdmin) *WorkspaceAadAdmin {
		return &v
	}).(WorkspaceAadAdminPtrOutput)
}

// The login name of the Azure AD Administrator of this Synapse Workspace.
func (o WorkspaceAadAdminOutput) Login() pulumi.StringOutput {
	return o.ApplyT(func(v WorkspaceAadAdmin) string { return v.Login }).(pulumi.StringOutput)
}

// The object id of the Azure AD Administrator of this Synapse Workspace.
func (o WorkspaceAadAdminOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v WorkspaceAadAdmin) string { return v.ObjectId }).(pulumi.StringOutput)
}

// The tenant id of the Azure AD Administrator of this Synapse Workspace.
func (o WorkspaceAadAdminOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v WorkspaceAadAdmin) string { return v.TenantId }).(pulumi.StringOutput)
}

type WorkspaceAadAdminPtrOutput struct{ *pulumi.OutputState }

func (WorkspaceAadAdminPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceAadAdmin)(nil)).Elem()
}

func (o WorkspaceAadAdminPtrOutput) ToWorkspaceAadAdminPtrOutput() WorkspaceAadAdminPtrOutput {
	return o
}

func (o WorkspaceAadAdminPtrOutput) ToWorkspaceAadAdminPtrOutputWithContext(ctx context.Context) WorkspaceAadAdminPtrOutput {
	return o
}

func (o WorkspaceAadAdminPtrOutput) Elem() WorkspaceAadAdminOutput {
	return o.ApplyT(func(v *WorkspaceAadAdmin) WorkspaceAadAdmin { return *v }).(WorkspaceAadAdminOutput)
}

// The login name of the Azure AD Administrator of this Synapse Workspace.
func (o WorkspaceAadAdminPtrOutput) Login() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceAadAdmin) *string {
		if v == nil {
			return nil
		}
		return &v.Login
	}).(pulumi.StringPtrOutput)
}

// The object id of the Azure AD Administrator of this Synapse Workspace.
func (o WorkspaceAadAdminPtrOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceAadAdmin) *string {
		if v == nil {
			return nil
		}
		return &v.ObjectId
	}).(pulumi.StringPtrOutput)
}

// The tenant id of the Azure AD Administrator of this Synapse Workspace.
func (o WorkspaceAadAdminPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceAadAdmin) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

type WorkspaceAzureDevopsRepo struct {
	// Specifies the Azure DevOps account name.
	AccountName string `pulumi:"accountName"`
	// Specifies the collaboration branch of the repository to get code from.
	BranchName string `pulumi:"branchName"`
	// Specifies the name of the Azure DevOps project.
	ProjectName string `pulumi:"projectName"`
	// Specifies the name of the git repository.
	RepositoryName string `pulumi:"repositoryName"`
	// Specifies the root folder within the repository. Set to `/` for the top level.
	RootFolder string `pulumi:"rootFolder"`
}

// WorkspaceAzureDevopsRepoInput is an input type that accepts WorkspaceAzureDevopsRepoArgs and WorkspaceAzureDevopsRepoOutput values.
// You can construct a concrete instance of `WorkspaceAzureDevopsRepoInput` via:
//
//          WorkspaceAzureDevopsRepoArgs{...}
type WorkspaceAzureDevopsRepoInput interface {
	pulumi.Input

	ToWorkspaceAzureDevopsRepoOutput() WorkspaceAzureDevopsRepoOutput
	ToWorkspaceAzureDevopsRepoOutputWithContext(context.Context) WorkspaceAzureDevopsRepoOutput
}

type WorkspaceAzureDevopsRepoArgs struct {
	// Specifies the Azure DevOps account name.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// Specifies the collaboration branch of the repository to get code from.
	BranchName pulumi.StringInput `pulumi:"branchName"`
	// Specifies the name of the Azure DevOps project.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// Specifies the name of the git repository.
	RepositoryName pulumi.StringInput `pulumi:"repositoryName"`
	// Specifies the root folder within the repository. Set to `/` for the top level.
	RootFolder pulumi.StringInput `pulumi:"rootFolder"`
}

func (WorkspaceAzureDevopsRepoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceAzureDevopsRepo)(nil)).Elem()
}

func (i WorkspaceAzureDevopsRepoArgs) ToWorkspaceAzureDevopsRepoOutput() WorkspaceAzureDevopsRepoOutput {
	return i.ToWorkspaceAzureDevopsRepoOutputWithContext(context.Background())
}

func (i WorkspaceAzureDevopsRepoArgs) ToWorkspaceAzureDevopsRepoOutputWithContext(ctx context.Context) WorkspaceAzureDevopsRepoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceAzureDevopsRepoOutput)
}

func (i WorkspaceAzureDevopsRepoArgs) ToWorkspaceAzureDevopsRepoPtrOutput() WorkspaceAzureDevopsRepoPtrOutput {
	return i.ToWorkspaceAzureDevopsRepoPtrOutputWithContext(context.Background())
}

func (i WorkspaceAzureDevopsRepoArgs) ToWorkspaceAzureDevopsRepoPtrOutputWithContext(ctx context.Context) WorkspaceAzureDevopsRepoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceAzureDevopsRepoOutput).ToWorkspaceAzureDevopsRepoPtrOutputWithContext(ctx)
}

// WorkspaceAzureDevopsRepoPtrInput is an input type that accepts WorkspaceAzureDevopsRepoArgs, WorkspaceAzureDevopsRepoPtr and WorkspaceAzureDevopsRepoPtrOutput values.
// You can construct a concrete instance of `WorkspaceAzureDevopsRepoPtrInput` via:
//
//          WorkspaceAzureDevopsRepoArgs{...}
//
//  or:
//
//          nil
type WorkspaceAzureDevopsRepoPtrInput interface {
	pulumi.Input

	ToWorkspaceAzureDevopsRepoPtrOutput() WorkspaceAzureDevopsRepoPtrOutput
	ToWorkspaceAzureDevopsRepoPtrOutputWithContext(context.Context) WorkspaceAzureDevopsRepoPtrOutput
}

type workspaceAzureDevopsRepoPtrType WorkspaceAzureDevopsRepoArgs

func WorkspaceAzureDevopsRepoPtr(v *WorkspaceAzureDevopsRepoArgs) WorkspaceAzureDevopsRepoPtrInput {
	return (*workspaceAzureDevopsRepoPtrType)(v)
}

func (*workspaceAzureDevopsRepoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceAzureDevopsRepo)(nil)).Elem()
}

func (i *workspaceAzureDevopsRepoPtrType) ToWorkspaceAzureDevopsRepoPtrOutput() WorkspaceAzureDevopsRepoPtrOutput {
	return i.ToWorkspaceAzureDevopsRepoPtrOutputWithContext(context.Background())
}

func (i *workspaceAzureDevopsRepoPtrType) ToWorkspaceAzureDevopsRepoPtrOutputWithContext(ctx context.Context) WorkspaceAzureDevopsRepoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceAzureDevopsRepoPtrOutput)
}

type WorkspaceAzureDevopsRepoOutput struct{ *pulumi.OutputState }

func (WorkspaceAzureDevopsRepoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceAzureDevopsRepo)(nil)).Elem()
}

func (o WorkspaceAzureDevopsRepoOutput) ToWorkspaceAzureDevopsRepoOutput() WorkspaceAzureDevopsRepoOutput {
	return o
}

func (o WorkspaceAzureDevopsRepoOutput) ToWorkspaceAzureDevopsRepoOutputWithContext(ctx context.Context) WorkspaceAzureDevopsRepoOutput {
	return o
}

func (o WorkspaceAzureDevopsRepoOutput) ToWorkspaceAzureDevopsRepoPtrOutput() WorkspaceAzureDevopsRepoPtrOutput {
	return o.ToWorkspaceAzureDevopsRepoPtrOutputWithContext(context.Background())
}

func (o WorkspaceAzureDevopsRepoOutput) ToWorkspaceAzureDevopsRepoPtrOutputWithContext(ctx context.Context) WorkspaceAzureDevopsRepoPtrOutput {
	return o.ApplyT(func(v WorkspaceAzureDevopsRepo) *WorkspaceAzureDevopsRepo {
		return &v
	}).(WorkspaceAzureDevopsRepoPtrOutput)
}

// Specifies the Azure DevOps account name.
func (o WorkspaceAzureDevopsRepoOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v WorkspaceAzureDevopsRepo) string { return v.AccountName }).(pulumi.StringOutput)
}

// Specifies the collaboration branch of the repository to get code from.
func (o WorkspaceAzureDevopsRepoOutput) BranchName() pulumi.StringOutput {
	return o.ApplyT(func(v WorkspaceAzureDevopsRepo) string { return v.BranchName }).(pulumi.StringOutput)
}

// Specifies the name of the Azure DevOps project.
func (o WorkspaceAzureDevopsRepoOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v WorkspaceAzureDevopsRepo) string { return v.ProjectName }).(pulumi.StringOutput)
}

// Specifies the name of the git repository.
func (o WorkspaceAzureDevopsRepoOutput) RepositoryName() pulumi.StringOutput {
	return o.ApplyT(func(v WorkspaceAzureDevopsRepo) string { return v.RepositoryName }).(pulumi.StringOutput)
}

// Specifies the root folder within the repository. Set to `/` for the top level.
func (o WorkspaceAzureDevopsRepoOutput) RootFolder() pulumi.StringOutput {
	return o.ApplyT(func(v WorkspaceAzureDevopsRepo) string { return v.RootFolder }).(pulumi.StringOutput)
}

type WorkspaceAzureDevopsRepoPtrOutput struct{ *pulumi.OutputState }

func (WorkspaceAzureDevopsRepoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceAzureDevopsRepo)(nil)).Elem()
}

func (o WorkspaceAzureDevopsRepoPtrOutput) ToWorkspaceAzureDevopsRepoPtrOutput() WorkspaceAzureDevopsRepoPtrOutput {
	return o
}

func (o WorkspaceAzureDevopsRepoPtrOutput) ToWorkspaceAzureDevopsRepoPtrOutputWithContext(ctx context.Context) WorkspaceAzureDevopsRepoPtrOutput {
	return o
}

func (o WorkspaceAzureDevopsRepoPtrOutput) Elem() WorkspaceAzureDevopsRepoOutput {
	return o.ApplyT(func(v *WorkspaceAzureDevopsRepo) WorkspaceAzureDevopsRepo { return *v }).(WorkspaceAzureDevopsRepoOutput)
}

// Specifies the Azure DevOps account name.
func (o WorkspaceAzureDevopsRepoPtrOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceAzureDevopsRepo) *string {
		if v == nil {
			return nil
		}
		return &v.AccountName
	}).(pulumi.StringPtrOutput)
}

// Specifies the collaboration branch of the repository to get code from.
func (o WorkspaceAzureDevopsRepoPtrOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceAzureDevopsRepo) *string {
		if v == nil {
			return nil
		}
		return &v.BranchName
	}).(pulumi.StringPtrOutput)
}

// Specifies the name of the Azure DevOps project.
func (o WorkspaceAzureDevopsRepoPtrOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceAzureDevopsRepo) *string {
		if v == nil {
			return nil
		}
		return &v.ProjectName
	}).(pulumi.StringPtrOutput)
}

// Specifies the name of the git repository.
func (o WorkspaceAzureDevopsRepoPtrOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceAzureDevopsRepo) *string {
		if v == nil {
			return nil
		}
		return &v.RepositoryName
	}).(pulumi.StringPtrOutput)
}

// Specifies the root folder within the repository. Set to `/` for the top level.
func (o WorkspaceAzureDevopsRepoPtrOutput) RootFolder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceAzureDevopsRepo) *string {
		if v == nil {
			return nil
		}
		return &v.RootFolder
	}).(pulumi.StringPtrOutput)
}

type WorkspaceGithubRepo struct {
	// Specifies the GitHub account name.
	AccountName string `pulumi:"accountName"`
	// Specifies the collaboration branch of the repository to get code from.
	BranchName string `pulumi:"branchName"`
	// Specifies the GitHub Enterprise host name. For example: https://github.mydomain.com.
	GitUrl *string `pulumi:"gitUrl"`
	// Specifies the name of the git repository.
	RepositoryName string `pulumi:"repositoryName"`
	// Specifies the root folder within the repository. Set to `/` for the top level.
	RootFolder string `pulumi:"rootFolder"`
}

// WorkspaceGithubRepoInput is an input type that accepts WorkspaceGithubRepoArgs and WorkspaceGithubRepoOutput values.
// You can construct a concrete instance of `WorkspaceGithubRepoInput` via:
//
//          WorkspaceGithubRepoArgs{...}
type WorkspaceGithubRepoInput interface {
	pulumi.Input

	ToWorkspaceGithubRepoOutput() WorkspaceGithubRepoOutput
	ToWorkspaceGithubRepoOutputWithContext(context.Context) WorkspaceGithubRepoOutput
}

type WorkspaceGithubRepoArgs struct {
	// Specifies the GitHub account name.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// Specifies the collaboration branch of the repository to get code from.
	BranchName pulumi.StringInput `pulumi:"branchName"`
	// Specifies the GitHub Enterprise host name. For example: https://github.mydomain.com.
	GitUrl pulumi.StringPtrInput `pulumi:"gitUrl"`
	// Specifies the name of the git repository.
	RepositoryName pulumi.StringInput `pulumi:"repositoryName"`
	// Specifies the root folder within the repository. Set to `/` for the top level.
	RootFolder pulumi.StringInput `pulumi:"rootFolder"`
}

func (WorkspaceGithubRepoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceGithubRepo)(nil)).Elem()
}

func (i WorkspaceGithubRepoArgs) ToWorkspaceGithubRepoOutput() WorkspaceGithubRepoOutput {
	return i.ToWorkspaceGithubRepoOutputWithContext(context.Background())
}

func (i WorkspaceGithubRepoArgs) ToWorkspaceGithubRepoOutputWithContext(ctx context.Context) WorkspaceGithubRepoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceGithubRepoOutput)
}

func (i WorkspaceGithubRepoArgs) ToWorkspaceGithubRepoPtrOutput() WorkspaceGithubRepoPtrOutput {
	return i.ToWorkspaceGithubRepoPtrOutputWithContext(context.Background())
}

func (i WorkspaceGithubRepoArgs) ToWorkspaceGithubRepoPtrOutputWithContext(ctx context.Context) WorkspaceGithubRepoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceGithubRepoOutput).ToWorkspaceGithubRepoPtrOutputWithContext(ctx)
}

// WorkspaceGithubRepoPtrInput is an input type that accepts WorkspaceGithubRepoArgs, WorkspaceGithubRepoPtr and WorkspaceGithubRepoPtrOutput values.
// You can construct a concrete instance of `WorkspaceGithubRepoPtrInput` via:
//
//          WorkspaceGithubRepoArgs{...}
//
//  or:
//
//          nil
type WorkspaceGithubRepoPtrInput interface {
	pulumi.Input

	ToWorkspaceGithubRepoPtrOutput() WorkspaceGithubRepoPtrOutput
	ToWorkspaceGithubRepoPtrOutputWithContext(context.Context) WorkspaceGithubRepoPtrOutput
}

type workspaceGithubRepoPtrType WorkspaceGithubRepoArgs

func WorkspaceGithubRepoPtr(v *WorkspaceGithubRepoArgs) WorkspaceGithubRepoPtrInput {
	return (*workspaceGithubRepoPtrType)(v)
}

func (*workspaceGithubRepoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceGithubRepo)(nil)).Elem()
}

func (i *workspaceGithubRepoPtrType) ToWorkspaceGithubRepoPtrOutput() WorkspaceGithubRepoPtrOutput {
	return i.ToWorkspaceGithubRepoPtrOutputWithContext(context.Background())
}

func (i *workspaceGithubRepoPtrType) ToWorkspaceGithubRepoPtrOutputWithContext(ctx context.Context) WorkspaceGithubRepoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceGithubRepoPtrOutput)
}

type WorkspaceGithubRepoOutput struct{ *pulumi.OutputState }

func (WorkspaceGithubRepoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceGithubRepo)(nil)).Elem()
}

func (o WorkspaceGithubRepoOutput) ToWorkspaceGithubRepoOutput() WorkspaceGithubRepoOutput {
	return o
}

func (o WorkspaceGithubRepoOutput) ToWorkspaceGithubRepoOutputWithContext(ctx context.Context) WorkspaceGithubRepoOutput {
	return o
}

func (o WorkspaceGithubRepoOutput) ToWorkspaceGithubRepoPtrOutput() WorkspaceGithubRepoPtrOutput {
	return o.ToWorkspaceGithubRepoPtrOutputWithContext(context.Background())
}

func (o WorkspaceGithubRepoOutput) ToWorkspaceGithubRepoPtrOutputWithContext(ctx context.Context) WorkspaceGithubRepoPtrOutput {
	return o.ApplyT(func(v WorkspaceGithubRepo) *WorkspaceGithubRepo {
		return &v
	}).(WorkspaceGithubRepoPtrOutput)
}

// Specifies the GitHub account name.
func (o WorkspaceGithubRepoOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v WorkspaceGithubRepo) string { return v.AccountName }).(pulumi.StringOutput)
}

// Specifies the collaboration branch of the repository to get code from.
func (o WorkspaceGithubRepoOutput) BranchName() pulumi.StringOutput {
	return o.ApplyT(func(v WorkspaceGithubRepo) string { return v.BranchName }).(pulumi.StringOutput)
}

// Specifies the GitHub Enterprise host name. For example: https://github.mydomain.com.
func (o WorkspaceGithubRepoOutput) GitUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceGithubRepo) *string { return v.GitUrl }).(pulumi.StringPtrOutput)
}

// Specifies the name of the git repository.
func (o WorkspaceGithubRepoOutput) RepositoryName() pulumi.StringOutput {
	return o.ApplyT(func(v WorkspaceGithubRepo) string { return v.RepositoryName }).(pulumi.StringOutput)
}

// Specifies the root folder within the repository. Set to `/` for the top level.
func (o WorkspaceGithubRepoOutput) RootFolder() pulumi.StringOutput {
	return o.ApplyT(func(v WorkspaceGithubRepo) string { return v.RootFolder }).(pulumi.StringOutput)
}

type WorkspaceGithubRepoPtrOutput struct{ *pulumi.OutputState }

func (WorkspaceGithubRepoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceGithubRepo)(nil)).Elem()
}

func (o WorkspaceGithubRepoPtrOutput) ToWorkspaceGithubRepoPtrOutput() WorkspaceGithubRepoPtrOutput {
	return o
}

func (o WorkspaceGithubRepoPtrOutput) ToWorkspaceGithubRepoPtrOutputWithContext(ctx context.Context) WorkspaceGithubRepoPtrOutput {
	return o
}

func (o WorkspaceGithubRepoPtrOutput) Elem() WorkspaceGithubRepoOutput {
	return o.ApplyT(func(v *WorkspaceGithubRepo) WorkspaceGithubRepo { return *v }).(WorkspaceGithubRepoOutput)
}

// Specifies the GitHub account name.
func (o WorkspaceGithubRepoPtrOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceGithubRepo) *string {
		if v == nil {
			return nil
		}
		return &v.AccountName
	}).(pulumi.StringPtrOutput)
}

// Specifies the collaboration branch of the repository to get code from.
func (o WorkspaceGithubRepoPtrOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceGithubRepo) *string {
		if v == nil {
			return nil
		}
		return &v.BranchName
	}).(pulumi.StringPtrOutput)
}

// Specifies the GitHub Enterprise host name. For example: https://github.mydomain.com.
func (o WorkspaceGithubRepoPtrOutput) GitUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceGithubRepo) *string {
		if v == nil {
			return nil
		}
		return v.GitUrl
	}).(pulumi.StringPtrOutput)
}

// Specifies the name of the git repository.
func (o WorkspaceGithubRepoPtrOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceGithubRepo) *string {
		if v == nil {
			return nil
		}
		return &v.RepositoryName
	}).(pulumi.StringPtrOutput)
}

// Specifies the root folder within the repository. Set to `/` for the top level.
func (o WorkspaceGithubRepoPtrOutput) RootFolder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceGithubRepo) *string {
		if v == nil {
			return nil
		}
		return &v.RootFolder
	}).(pulumi.StringPtrOutput)
}

type WorkspaceIdentity struct {
	// The Principal ID for the Service Principal associated with the Managed Service Identity of this Synapse Workspace.
	PrincipalId *string `pulumi:"principalId"`
	// The tenant id of the Azure AD Administrator of this Synapse Workspace.
	TenantId *string `pulumi:"tenantId"`
	// The Identity Type for the Service Principal associated with the Managed Service Identity of this Synapse Workspace.
	Type *string `pulumi:"type"`
}

// WorkspaceIdentityInput is an input type that accepts WorkspaceIdentityArgs and WorkspaceIdentityOutput values.
// You can construct a concrete instance of `WorkspaceIdentityInput` via:
//
//          WorkspaceIdentityArgs{...}
type WorkspaceIdentityInput interface {
	pulumi.Input

	ToWorkspaceIdentityOutput() WorkspaceIdentityOutput
	ToWorkspaceIdentityOutputWithContext(context.Context) WorkspaceIdentityOutput
}

type WorkspaceIdentityArgs struct {
	// The Principal ID for the Service Principal associated with the Managed Service Identity of this Synapse Workspace.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The tenant id of the Azure AD Administrator of this Synapse Workspace.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// The Identity Type for the Service Principal associated with the Managed Service Identity of this Synapse Workspace.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (WorkspaceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceIdentity)(nil)).Elem()
}

func (i WorkspaceIdentityArgs) ToWorkspaceIdentityOutput() WorkspaceIdentityOutput {
	return i.ToWorkspaceIdentityOutputWithContext(context.Background())
}

func (i WorkspaceIdentityArgs) ToWorkspaceIdentityOutputWithContext(ctx context.Context) WorkspaceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceIdentityOutput)
}

// WorkspaceIdentityArrayInput is an input type that accepts WorkspaceIdentityArray and WorkspaceIdentityArrayOutput values.
// You can construct a concrete instance of `WorkspaceIdentityArrayInput` via:
//
//          WorkspaceIdentityArray{ WorkspaceIdentityArgs{...} }
type WorkspaceIdentityArrayInput interface {
	pulumi.Input

	ToWorkspaceIdentityArrayOutput() WorkspaceIdentityArrayOutput
	ToWorkspaceIdentityArrayOutputWithContext(context.Context) WorkspaceIdentityArrayOutput
}

type WorkspaceIdentityArray []WorkspaceIdentityInput

func (WorkspaceIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WorkspaceIdentity)(nil)).Elem()
}

func (i WorkspaceIdentityArray) ToWorkspaceIdentityArrayOutput() WorkspaceIdentityArrayOutput {
	return i.ToWorkspaceIdentityArrayOutputWithContext(context.Background())
}

func (i WorkspaceIdentityArray) ToWorkspaceIdentityArrayOutputWithContext(ctx context.Context) WorkspaceIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceIdentityArrayOutput)
}

type WorkspaceIdentityOutput struct{ *pulumi.OutputState }

func (WorkspaceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceIdentity)(nil)).Elem()
}

func (o WorkspaceIdentityOutput) ToWorkspaceIdentityOutput() WorkspaceIdentityOutput {
	return o
}

func (o WorkspaceIdentityOutput) ToWorkspaceIdentityOutputWithContext(ctx context.Context) WorkspaceIdentityOutput {
	return o
}

// The Principal ID for the Service Principal associated with the Managed Service Identity of this Synapse Workspace.
func (o WorkspaceIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The tenant id of the Azure AD Administrator of this Synapse Workspace.
func (o WorkspaceIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The Identity Type for the Service Principal associated with the Managed Service Identity of this Synapse Workspace.
func (o WorkspaceIdentityOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceIdentity) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type WorkspaceIdentityArrayOutput struct{ *pulumi.OutputState }

func (WorkspaceIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WorkspaceIdentity)(nil)).Elem()
}

func (o WorkspaceIdentityArrayOutput) ToWorkspaceIdentityArrayOutput() WorkspaceIdentityArrayOutput {
	return o
}

func (o WorkspaceIdentityArrayOutput) ToWorkspaceIdentityArrayOutputWithContext(ctx context.Context) WorkspaceIdentityArrayOutput {
	return o
}

func (o WorkspaceIdentityArrayOutput) Index(i pulumi.IntInput) WorkspaceIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WorkspaceIdentity {
		return vs[0].([]WorkspaceIdentity)[vs[1].(int)]
	}).(WorkspaceIdentityOutput)
}

func init() {
	pulumi.RegisterOutputType(SparkPoolAutoPauseOutput{})
	pulumi.RegisterOutputType(SparkPoolAutoPausePtrOutput{})
	pulumi.RegisterOutputType(SparkPoolAutoScaleOutput{})
	pulumi.RegisterOutputType(SparkPoolAutoScalePtrOutput{})
	pulumi.RegisterOutputType(SparkPoolLibraryRequirementOutput{})
	pulumi.RegisterOutputType(SparkPoolLibraryRequirementPtrOutput{})
	pulumi.RegisterOutputType(SqlPoolRestoreOutput{})
	pulumi.RegisterOutputType(SqlPoolRestorePtrOutput{})
	pulumi.RegisterOutputType(WorkspaceAadAdminOutput{})
	pulumi.RegisterOutputType(WorkspaceAadAdminPtrOutput{})
	pulumi.RegisterOutputType(WorkspaceAzureDevopsRepoOutput{})
	pulumi.RegisterOutputType(WorkspaceAzureDevopsRepoPtrOutput{})
	pulumi.RegisterOutputType(WorkspaceGithubRepoOutput{})
	pulumi.RegisterOutputType(WorkspaceGithubRepoPtrOutput{})
	pulumi.RegisterOutputType(WorkspaceIdentityOutput{})
	pulumi.RegisterOutputType(WorkspaceIdentityArrayOutput{})
}
