// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package synapse

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a Synapse SQL Pool Workload Classifier.
//
// ## Import
//
// Synapse SQL Pool Workload Classifiers can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:synapse/sqlPoolWorkloadClassifier:SqlPoolWorkloadClassifier example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Synapse/workspaces/workspace1/sqlPools/sqlPool1/workloadGroups/workloadGroup1/workloadClassifiers/workloadClassifier1
//
// ```
type SqlPoolWorkloadClassifier struct {
	pulumi.CustomResourceState

	// Specifies the session context value that a request can be classified against.
	Context pulumi.StringPtrOutput `pulumi:"context"`
	// The workload classifier end time for classification. It's of the `HH:MM` format in UTC time zone.
	EndTime pulumi.StringPtrOutput `pulumi:"endTime"`
	// The workload classifier importance. The allowed values are `low`, `belowNormal`, `normal`, `aboveNormal` and `high`.
	Importance pulumi.StringPtrOutput `pulumi:"importance"`
	// Specifies the label value that a request can be classified against.
	Label pulumi.StringPtrOutput `pulumi:"label"`
	// The workload classifier member name used to classified against.
	MemberName pulumi.StringOutput `pulumi:"memberName"`
	// The name which should be used for this Synapse SQL Pool Workload Classifier. Changing this forces a new Synapse SQL Pool Workload Classifier to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The workload classifier start time for classification. It's of the `HH:MM` format in UTC time zone.
	StartTime pulumi.StringPtrOutput `pulumi:"startTime"`
	// The ID of the Synapse SQL Pool Workload Group. Changing this forces a new Synapse SQL Pool Workload Classifier to be created.
	WorkloadGroupId pulumi.StringOutput `pulumi:"workloadGroupId"`
}

// NewSqlPoolWorkloadClassifier registers a new resource with the given unique name, arguments, and options.
func NewSqlPoolWorkloadClassifier(ctx *pulumi.Context,
	name string, args *SqlPoolWorkloadClassifierArgs, opts ...pulumi.ResourceOption) (*SqlPoolWorkloadClassifier, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MemberName == nil {
		return nil, errors.New("invalid value for required argument 'MemberName'")
	}
	if args.WorkloadGroupId == nil {
		return nil, errors.New("invalid value for required argument 'WorkloadGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SqlPoolWorkloadClassifier
	err := ctx.RegisterResource("azure:synapse/sqlPoolWorkloadClassifier:SqlPoolWorkloadClassifier", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlPoolWorkloadClassifier gets an existing SqlPoolWorkloadClassifier resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlPoolWorkloadClassifier(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlPoolWorkloadClassifierState, opts ...pulumi.ResourceOption) (*SqlPoolWorkloadClassifier, error) {
	var resource SqlPoolWorkloadClassifier
	err := ctx.ReadResource("azure:synapse/sqlPoolWorkloadClassifier:SqlPoolWorkloadClassifier", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlPoolWorkloadClassifier resources.
type sqlPoolWorkloadClassifierState struct {
	// Specifies the session context value that a request can be classified against.
	Context *string `pulumi:"context"`
	// The workload classifier end time for classification. It's of the `HH:MM` format in UTC time zone.
	EndTime *string `pulumi:"endTime"`
	// The workload classifier importance. The allowed values are `low`, `belowNormal`, `normal`, `aboveNormal` and `high`.
	Importance *string `pulumi:"importance"`
	// Specifies the label value that a request can be classified against.
	Label *string `pulumi:"label"`
	// The workload classifier member name used to classified against.
	MemberName *string `pulumi:"memberName"`
	// The name which should be used for this Synapse SQL Pool Workload Classifier. Changing this forces a new Synapse SQL Pool Workload Classifier to be created.
	Name *string `pulumi:"name"`
	// The workload classifier start time for classification. It's of the `HH:MM` format in UTC time zone.
	StartTime *string `pulumi:"startTime"`
	// The ID of the Synapse SQL Pool Workload Group. Changing this forces a new Synapse SQL Pool Workload Classifier to be created.
	WorkloadGroupId *string `pulumi:"workloadGroupId"`
}

type SqlPoolWorkloadClassifierState struct {
	// Specifies the session context value that a request can be classified against.
	Context pulumi.StringPtrInput
	// The workload classifier end time for classification. It's of the `HH:MM` format in UTC time zone.
	EndTime pulumi.StringPtrInput
	// The workload classifier importance. The allowed values are `low`, `belowNormal`, `normal`, `aboveNormal` and `high`.
	Importance pulumi.StringPtrInput
	// Specifies the label value that a request can be classified against.
	Label pulumi.StringPtrInput
	// The workload classifier member name used to classified against.
	MemberName pulumi.StringPtrInput
	// The name which should be used for this Synapse SQL Pool Workload Classifier. Changing this forces a new Synapse SQL Pool Workload Classifier to be created.
	Name pulumi.StringPtrInput
	// The workload classifier start time for classification. It's of the `HH:MM` format in UTC time zone.
	StartTime pulumi.StringPtrInput
	// The ID of the Synapse SQL Pool Workload Group. Changing this forces a new Synapse SQL Pool Workload Classifier to be created.
	WorkloadGroupId pulumi.StringPtrInput
}

func (SqlPoolWorkloadClassifierState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlPoolWorkloadClassifierState)(nil)).Elem()
}

type sqlPoolWorkloadClassifierArgs struct {
	// Specifies the session context value that a request can be classified against.
	Context *string `pulumi:"context"`
	// The workload classifier end time for classification. It's of the `HH:MM` format in UTC time zone.
	EndTime *string `pulumi:"endTime"`
	// The workload classifier importance. The allowed values are `low`, `belowNormal`, `normal`, `aboveNormal` and `high`.
	Importance *string `pulumi:"importance"`
	// Specifies the label value that a request can be classified against.
	Label *string `pulumi:"label"`
	// The workload classifier member name used to classified against.
	MemberName string `pulumi:"memberName"`
	// The name which should be used for this Synapse SQL Pool Workload Classifier. Changing this forces a new Synapse SQL Pool Workload Classifier to be created.
	Name *string `pulumi:"name"`
	// The workload classifier start time for classification. It's of the `HH:MM` format in UTC time zone.
	StartTime *string `pulumi:"startTime"`
	// The ID of the Synapse SQL Pool Workload Group. Changing this forces a new Synapse SQL Pool Workload Classifier to be created.
	WorkloadGroupId string `pulumi:"workloadGroupId"`
}

// The set of arguments for constructing a SqlPoolWorkloadClassifier resource.
type SqlPoolWorkloadClassifierArgs struct {
	// Specifies the session context value that a request can be classified against.
	Context pulumi.StringPtrInput
	// The workload classifier end time for classification. It's of the `HH:MM` format in UTC time zone.
	EndTime pulumi.StringPtrInput
	// The workload classifier importance. The allowed values are `low`, `belowNormal`, `normal`, `aboveNormal` and `high`.
	Importance pulumi.StringPtrInput
	// Specifies the label value that a request can be classified against.
	Label pulumi.StringPtrInput
	// The workload classifier member name used to classified against.
	MemberName pulumi.StringInput
	// The name which should be used for this Synapse SQL Pool Workload Classifier. Changing this forces a new Synapse SQL Pool Workload Classifier to be created.
	Name pulumi.StringPtrInput
	// The workload classifier start time for classification. It's of the `HH:MM` format in UTC time zone.
	StartTime pulumi.StringPtrInput
	// The ID of the Synapse SQL Pool Workload Group. Changing this forces a new Synapse SQL Pool Workload Classifier to be created.
	WorkloadGroupId pulumi.StringInput
}

func (SqlPoolWorkloadClassifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlPoolWorkloadClassifierArgs)(nil)).Elem()
}

type SqlPoolWorkloadClassifierInput interface {
	pulumi.Input

	ToSqlPoolWorkloadClassifierOutput() SqlPoolWorkloadClassifierOutput
	ToSqlPoolWorkloadClassifierOutputWithContext(ctx context.Context) SqlPoolWorkloadClassifierOutput
}

func (*SqlPoolWorkloadClassifier) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlPoolWorkloadClassifier)(nil)).Elem()
}

func (i *SqlPoolWorkloadClassifier) ToSqlPoolWorkloadClassifierOutput() SqlPoolWorkloadClassifierOutput {
	return i.ToSqlPoolWorkloadClassifierOutputWithContext(context.Background())
}

func (i *SqlPoolWorkloadClassifier) ToSqlPoolWorkloadClassifierOutputWithContext(ctx context.Context) SqlPoolWorkloadClassifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlPoolWorkloadClassifierOutput)
}

func (i *SqlPoolWorkloadClassifier) ToOutput(ctx context.Context) pulumix.Output[*SqlPoolWorkloadClassifier] {
	return pulumix.Output[*SqlPoolWorkloadClassifier]{
		OutputState: i.ToSqlPoolWorkloadClassifierOutputWithContext(ctx).OutputState,
	}
}

// SqlPoolWorkloadClassifierArrayInput is an input type that accepts SqlPoolWorkloadClassifierArray and SqlPoolWorkloadClassifierArrayOutput values.
// You can construct a concrete instance of `SqlPoolWorkloadClassifierArrayInput` via:
//
//	SqlPoolWorkloadClassifierArray{ SqlPoolWorkloadClassifierArgs{...} }
type SqlPoolWorkloadClassifierArrayInput interface {
	pulumi.Input

	ToSqlPoolWorkloadClassifierArrayOutput() SqlPoolWorkloadClassifierArrayOutput
	ToSqlPoolWorkloadClassifierArrayOutputWithContext(context.Context) SqlPoolWorkloadClassifierArrayOutput
}

type SqlPoolWorkloadClassifierArray []SqlPoolWorkloadClassifierInput

func (SqlPoolWorkloadClassifierArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlPoolWorkloadClassifier)(nil)).Elem()
}

func (i SqlPoolWorkloadClassifierArray) ToSqlPoolWorkloadClassifierArrayOutput() SqlPoolWorkloadClassifierArrayOutput {
	return i.ToSqlPoolWorkloadClassifierArrayOutputWithContext(context.Background())
}

func (i SqlPoolWorkloadClassifierArray) ToSqlPoolWorkloadClassifierArrayOutputWithContext(ctx context.Context) SqlPoolWorkloadClassifierArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlPoolWorkloadClassifierArrayOutput)
}

func (i SqlPoolWorkloadClassifierArray) ToOutput(ctx context.Context) pulumix.Output[[]*SqlPoolWorkloadClassifier] {
	return pulumix.Output[[]*SqlPoolWorkloadClassifier]{
		OutputState: i.ToSqlPoolWorkloadClassifierArrayOutputWithContext(ctx).OutputState,
	}
}

// SqlPoolWorkloadClassifierMapInput is an input type that accepts SqlPoolWorkloadClassifierMap and SqlPoolWorkloadClassifierMapOutput values.
// You can construct a concrete instance of `SqlPoolWorkloadClassifierMapInput` via:
//
//	SqlPoolWorkloadClassifierMap{ "key": SqlPoolWorkloadClassifierArgs{...} }
type SqlPoolWorkloadClassifierMapInput interface {
	pulumi.Input

	ToSqlPoolWorkloadClassifierMapOutput() SqlPoolWorkloadClassifierMapOutput
	ToSqlPoolWorkloadClassifierMapOutputWithContext(context.Context) SqlPoolWorkloadClassifierMapOutput
}

type SqlPoolWorkloadClassifierMap map[string]SqlPoolWorkloadClassifierInput

func (SqlPoolWorkloadClassifierMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlPoolWorkloadClassifier)(nil)).Elem()
}

func (i SqlPoolWorkloadClassifierMap) ToSqlPoolWorkloadClassifierMapOutput() SqlPoolWorkloadClassifierMapOutput {
	return i.ToSqlPoolWorkloadClassifierMapOutputWithContext(context.Background())
}

func (i SqlPoolWorkloadClassifierMap) ToSqlPoolWorkloadClassifierMapOutputWithContext(ctx context.Context) SqlPoolWorkloadClassifierMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlPoolWorkloadClassifierMapOutput)
}

func (i SqlPoolWorkloadClassifierMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SqlPoolWorkloadClassifier] {
	return pulumix.Output[map[string]*SqlPoolWorkloadClassifier]{
		OutputState: i.ToSqlPoolWorkloadClassifierMapOutputWithContext(ctx).OutputState,
	}
}

type SqlPoolWorkloadClassifierOutput struct{ *pulumi.OutputState }

func (SqlPoolWorkloadClassifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlPoolWorkloadClassifier)(nil)).Elem()
}

func (o SqlPoolWorkloadClassifierOutput) ToSqlPoolWorkloadClassifierOutput() SqlPoolWorkloadClassifierOutput {
	return o
}

func (o SqlPoolWorkloadClassifierOutput) ToSqlPoolWorkloadClassifierOutputWithContext(ctx context.Context) SqlPoolWorkloadClassifierOutput {
	return o
}

func (o SqlPoolWorkloadClassifierOutput) ToOutput(ctx context.Context) pulumix.Output[*SqlPoolWorkloadClassifier] {
	return pulumix.Output[*SqlPoolWorkloadClassifier]{
		OutputState: o.OutputState,
	}
}

// Specifies the session context value that a request can be classified against.
func (o SqlPoolWorkloadClassifierOutput) Context() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlPoolWorkloadClassifier) pulumi.StringPtrOutput { return v.Context }).(pulumi.StringPtrOutput)
}

// The workload classifier end time for classification. It's of the `HH:MM` format in UTC time zone.
func (o SqlPoolWorkloadClassifierOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlPoolWorkloadClassifier) pulumi.StringPtrOutput { return v.EndTime }).(pulumi.StringPtrOutput)
}

// The workload classifier importance. The allowed values are `low`, `belowNormal`, `normal`, `aboveNormal` and `high`.
func (o SqlPoolWorkloadClassifierOutput) Importance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlPoolWorkloadClassifier) pulumi.StringPtrOutput { return v.Importance }).(pulumi.StringPtrOutput)
}

// Specifies the label value that a request can be classified against.
func (o SqlPoolWorkloadClassifierOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlPoolWorkloadClassifier) pulumi.StringPtrOutput { return v.Label }).(pulumi.StringPtrOutput)
}

// The workload classifier member name used to classified against.
func (o SqlPoolWorkloadClassifierOutput) MemberName() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlPoolWorkloadClassifier) pulumi.StringOutput { return v.MemberName }).(pulumi.StringOutput)
}

// The name which should be used for this Synapse SQL Pool Workload Classifier. Changing this forces a new Synapse SQL Pool Workload Classifier to be created.
func (o SqlPoolWorkloadClassifierOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlPoolWorkloadClassifier) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The workload classifier start time for classification. It's of the `HH:MM` format in UTC time zone.
func (o SqlPoolWorkloadClassifierOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlPoolWorkloadClassifier) pulumi.StringPtrOutput { return v.StartTime }).(pulumi.StringPtrOutput)
}

// The ID of the Synapse SQL Pool Workload Group. Changing this forces a new Synapse SQL Pool Workload Classifier to be created.
func (o SqlPoolWorkloadClassifierOutput) WorkloadGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlPoolWorkloadClassifier) pulumi.StringOutput { return v.WorkloadGroupId }).(pulumi.StringOutput)
}

type SqlPoolWorkloadClassifierArrayOutput struct{ *pulumi.OutputState }

func (SqlPoolWorkloadClassifierArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlPoolWorkloadClassifier)(nil)).Elem()
}

func (o SqlPoolWorkloadClassifierArrayOutput) ToSqlPoolWorkloadClassifierArrayOutput() SqlPoolWorkloadClassifierArrayOutput {
	return o
}

func (o SqlPoolWorkloadClassifierArrayOutput) ToSqlPoolWorkloadClassifierArrayOutputWithContext(ctx context.Context) SqlPoolWorkloadClassifierArrayOutput {
	return o
}

func (o SqlPoolWorkloadClassifierArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SqlPoolWorkloadClassifier] {
	return pulumix.Output[[]*SqlPoolWorkloadClassifier]{
		OutputState: o.OutputState,
	}
}

func (o SqlPoolWorkloadClassifierArrayOutput) Index(i pulumi.IntInput) SqlPoolWorkloadClassifierOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SqlPoolWorkloadClassifier {
		return vs[0].([]*SqlPoolWorkloadClassifier)[vs[1].(int)]
	}).(SqlPoolWorkloadClassifierOutput)
}

type SqlPoolWorkloadClassifierMapOutput struct{ *pulumi.OutputState }

func (SqlPoolWorkloadClassifierMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlPoolWorkloadClassifier)(nil)).Elem()
}

func (o SqlPoolWorkloadClassifierMapOutput) ToSqlPoolWorkloadClassifierMapOutput() SqlPoolWorkloadClassifierMapOutput {
	return o
}

func (o SqlPoolWorkloadClassifierMapOutput) ToSqlPoolWorkloadClassifierMapOutputWithContext(ctx context.Context) SqlPoolWorkloadClassifierMapOutput {
	return o
}

func (o SqlPoolWorkloadClassifierMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SqlPoolWorkloadClassifier] {
	return pulumix.Output[map[string]*SqlPoolWorkloadClassifier]{
		OutputState: o.OutputState,
	}
}

func (o SqlPoolWorkloadClassifierMapOutput) MapIndex(k pulumi.StringInput) SqlPoolWorkloadClassifierOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SqlPoolWorkloadClassifier {
		return vs[0].(map[string]*SqlPoolWorkloadClassifier)[vs[1].(string)]
	}).(SqlPoolWorkloadClassifierOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SqlPoolWorkloadClassifierInput)(nil)).Elem(), &SqlPoolWorkloadClassifier{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlPoolWorkloadClassifierArrayInput)(nil)).Elem(), SqlPoolWorkloadClassifierArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlPoolWorkloadClassifierMapInput)(nil)).Elem(), SqlPoolWorkloadClassifierMap{})
	pulumi.RegisterOutputType(SqlPoolWorkloadClassifierOutput{})
	pulumi.RegisterOutputType(SqlPoolWorkloadClassifierArrayOutput{})
	pulumi.RegisterOutputType(SqlPoolWorkloadClassifierMapOutput{})
}
