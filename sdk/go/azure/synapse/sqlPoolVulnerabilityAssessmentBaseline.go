// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package synapse

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Synapse SQL Pool Vulnerability Assessment Rule Baseline.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/synapse"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("west europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Location:               exampleResourceGroup.Location,
//				AccountKind:            pulumi.String("BlobStorage"),
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("LRS"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleDataLakeGen2Filesystem, err := storage.NewDataLakeGen2Filesystem(ctx, "exampleDataLakeGen2Filesystem", &storage.DataLakeGen2FilesystemArgs{
//				StorageAccountId: exampleAccount.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			exampleWorkspace, err := synapse.NewWorkspace(ctx, "exampleWorkspace", &synapse.WorkspaceArgs{
//				ResourceGroupName:               exampleResourceGroup.Name,
//				Location:                        exampleResourceGroup.Location,
//				StorageDataLakeGen2FilesystemId: exampleDataLakeGen2Filesystem.ID(),
//				SqlAdministratorLogin:           pulumi.String("sqladminuser"),
//				SqlAdministratorLoginPassword:   pulumi.String("H@Sh1CoR3!"),
//				Identity: &synapse.WorkspaceIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleSqlPool, err := synapse.NewSqlPool(ctx, "exampleSqlPool", &synapse.SqlPoolArgs{
//				SynapseWorkspaceId: exampleWorkspace.ID(),
//				SkuName:            pulumi.String("DW100c"),
//				CreateMode:         pulumi.String("Default"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleContainer, err := storage.NewContainer(ctx, "exampleContainer", &storage.ContainerArgs{
//				StorageAccountName:  exampleAccount.Name,
//				ContainerAccessType: pulumi.String("private"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleSqlPoolSecurityAlertPolicy, err := synapse.NewSqlPoolSecurityAlertPolicy(ctx, "exampleSqlPoolSecurityAlertPolicy", &synapse.SqlPoolSecurityAlertPolicyArgs{
//				SqlPoolId:               exampleSqlPool.ID(),
//				PolicyState:             pulumi.String("Enabled"),
//				StorageEndpoint:         exampleAccount.PrimaryBlobEndpoint,
//				StorageAccountAccessKey: exampleAccount.PrimaryAccessKey,
//			})
//			if err != nil {
//				return err
//			}
//			exampleSqlPoolVulnerabilityAssessment, err := synapse.NewSqlPoolVulnerabilityAssessment(ctx, "exampleSqlPoolVulnerabilityAssessment", &synapse.SqlPoolVulnerabilityAssessmentArgs{
//				SqlPoolSecurityAlertPolicyId: exampleSqlPoolSecurityAlertPolicy.ID(),
//				StorageContainerPath: pulumi.All(exampleAccount.PrimaryBlobEndpoint, exampleContainer.Name).ApplyT(func(_args []interface{}) (string, error) {
//					primaryBlobEndpoint := _args[0].(string)
//					name := _args[1].(string)
//					return fmt.Sprintf("%v%v/", primaryBlobEndpoint, name), nil
//				}).(pulumi.StringOutput),
//				StorageAccountAccessKey: exampleAccount.PrimaryAccessKey,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = synapse.NewSqlPoolVulnerabilityAssessmentBaseline(ctx, "exampleSqlPoolVulnerabilityAssessmentBaseline", &synapse.SqlPoolVulnerabilityAssessmentBaselineArgs{
//				RuleName:                         pulumi.String("VA1017"),
//				SqlPoolVulnerabilityAssessmentId: exampleSqlPoolVulnerabilityAssessment.ID(),
//				Baselines: synapse.SqlPoolVulnerabilityAssessmentBaselineBaselineArray{
//					&synapse.SqlPoolVulnerabilityAssessmentBaselineBaselineArgs{
//						Results: pulumi.StringArray{
//							pulumi.String("userA"),
//							pulumi.String("SELECT"),
//						},
//					},
//					&synapse.SqlPoolVulnerabilityAssessmentBaselineBaselineArgs{
//						Results: pulumi.StringArray{
//							pulumi.String("userB"),
//							pulumi.String("SELECT"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Synapse SQL Pool Vulnerability Assessment Rule Baselines can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:synapse/sqlPoolVulnerabilityAssessmentBaseline:SqlPoolVulnerabilityAssessmentBaseline example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Synapse/workspaces/workspace1/sqlPools/sqlPool1/vulnerabilityAssessments/default/rules/rule1/baselines/baseline1
//
// ```
type SqlPoolVulnerabilityAssessmentBaseline struct {
	pulumi.CustomResourceState

	// One or more `baseline` blocks as defined below.
	Baselines SqlPoolVulnerabilityAssessmentBaselineBaselineArrayOutput `pulumi:"baselines"`
	// The name which should be used for this Synapse SQL Pool Vulnerability Assessment Rule Baseline.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the vulnerability assessment rule.
	RuleName pulumi.StringOutput `pulumi:"ruleName"`
	// The ID of the Synapse SQL Pool Vulnerability Assessment. Changing this forces a new Synapse SQL Pool Vulnerability Assessment Rule Baseline to be created.
	SqlPoolVulnerabilityAssessmentId pulumi.StringOutput `pulumi:"sqlPoolVulnerabilityAssessmentId"`
}

// NewSqlPoolVulnerabilityAssessmentBaseline registers a new resource with the given unique name, arguments, and options.
func NewSqlPoolVulnerabilityAssessmentBaseline(ctx *pulumi.Context,
	name string, args *SqlPoolVulnerabilityAssessmentBaselineArgs, opts ...pulumi.ResourceOption) (*SqlPoolVulnerabilityAssessmentBaseline, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RuleName == nil {
		return nil, errors.New("invalid value for required argument 'RuleName'")
	}
	if args.SqlPoolVulnerabilityAssessmentId == nil {
		return nil, errors.New("invalid value for required argument 'SqlPoolVulnerabilityAssessmentId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SqlPoolVulnerabilityAssessmentBaseline
	err := ctx.RegisterResource("azure:synapse/sqlPoolVulnerabilityAssessmentBaseline:SqlPoolVulnerabilityAssessmentBaseline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlPoolVulnerabilityAssessmentBaseline gets an existing SqlPoolVulnerabilityAssessmentBaseline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlPoolVulnerabilityAssessmentBaseline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlPoolVulnerabilityAssessmentBaselineState, opts ...pulumi.ResourceOption) (*SqlPoolVulnerabilityAssessmentBaseline, error) {
	var resource SqlPoolVulnerabilityAssessmentBaseline
	err := ctx.ReadResource("azure:synapse/sqlPoolVulnerabilityAssessmentBaseline:SqlPoolVulnerabilityAssessmentBaseline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlPoolVulnerabilityAssessmentBaseline resources.
type sqlPoolVulnerabilityAssessmentBaselineState struct {
	// One or more `baseline` blocks as defined below.
	Baselines []SqlPoolVulnerabilityAssessmentBaselineBaseline `pulumi:"baselines"`
	// The name which should be used for this Synapse SQL Pool Vulnerability Assessment Rule Baseline.
	Name *string `pulumi:"name"`
	// The ID of the vulnerability assessment rule.
	RuleName *string `pulumi:"ruleName"`
	// The ID of the Synapse SQL Pool Vulnerability Assessment. Changing this forces a new Synapse SQL Pool Vulnerability Assessment Rule Baseline to be created.
	SqlPoolVulnerabilityAssessmentId *string `pulumi:"sqlPoolVulnerabilityAssessmentId"`
}

type SqlPoolVulnerabilityAssessmentBaselineState struct {
	// One or more `baseline` blocks as defined below.
	Baselines SqlPoolVulnerabilityAssessmentBaselineBaselineArrayInput
	// The name which should be used for this Synapse SQL Pool Vulnerability Assessment Rule Baseline.
	Name pulumi.StringPtrInput
	// The ID of the vulnerability assessment rule.
	RuleName pulumi.StringPtrInput
	// The ID of the Synapse SQL Pool Vulnerability Assessment. Changing this forces a new Synapse SQL Pool Vulnerability Assessment Rule Baseline to be created.
	SqlPoolVulnerabilityAssessmentId pulumi.StringPtrInput
}

func (SqlPoolVulnerabilityAssessmentBaselineState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlPoolVulnerabilityAssessmentBaselineState)(nil)).Elem()
}

type sqlPoolVulnerabilityAssessmentBaselineArgs struct {
	// One or more `baseline` blocks as defined below.
	Baselines []SqlPoolVulnerabilityAssessmentBaselineBaseline `pulumi:"baselines"`
	// The name which should be used for this Synapse SQL Pool Vulnerability Assessment Rule Baseline.
	Name *string `pulumi:"name"`
	// The ID of the vulnerability assessment rule.
	RuleName string `pulumi:"ruleName"`
	// The ID of the Synapse SQL Pool Vulnerability Assessment. Changing this forces a new Synapse SQL Pool Vulnerability Assessment Rule Baseline to be created.
	SqlPoolVulnerabilityAssessmentId string `pulumi:"sqlPoolVulnerabilityAssessmentId"`
}

// The set of arguments for constructing a SqlPoolVulnerabilityAssessmentBaseline resource.
type SqlPoolVulnerabilityAssessmentBaselineArgs struct {
	// One or more `baseline` blocks as defined below.
	Baselines SqlPoolVulnerabilityAssessmentBaselineBaselineArrayInput
	// The name which should be used for this Synapse SQL Pool Vulnerability Assessment Rule Baseline.
	Name pulumi.StringPtrInput
	// The ID of the vulnerability assessment rule.
	RuleName pulumi.StringInput
	// The ID of the Synapse SQL Pool Vulnerability Assessment. Changing this forces a new Synapse SQL Pool Vulnerability Assessment Rule Baseline to be created.
	SqlPoolVulnerabilityAssessmentId pulumi.StringInput
}

func (SqlPoolVulnerabilityAssessmentBaselineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlPoolVulnerabilityAssessmentBaselineArgs)(nil)).Elem()
}

type SqlPoolVulnerabilityAssessmentBaselineInput interface {
	pulumi.Input

	ToSqlPoolVulnerabilityAssessmentBaselineOutput() SqlPoolVulnerabilityAssessmentBaselineOutput
	ToSqlPoolVulnerabilityAssessmentBaselineOutputWithContext(ctx context.Context) SqlPoolVulnerabilityAssessmentBaselineOutput
}

func (*SqlPoolVulnerabilityAssessmentBaseline) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlPoolVulnerabilityAssessmentBaseline)(nil)).Elem()
}

func (i *SqlPoolVulnerabilityAssessmentBaseline) ToSqlPoolVulnerabilityAssessmentBaselineOutput() SqlPoolVulnerabilityAssessmentBaselineOutput {
	return i.ToSqlPoolVulnerabilityAssessmentBaselineOutputWithContext(context.Background())
}

func (i *SqlPoolVulnerabilityAssessmentBaseline) ToSqlPoolVulnerabilityAssessmentBaselineOutputWithContext(ctx context.Context) SqlPoolVulnerabilityAssessmentBaselineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlPoolVulnerabilityAssessmentBaselineOutput)
}

// SqlPoolVulnerabilityAssessmentBaselineArrayInput is an input type that accepts SqlPoolVulnerabilityAssessmentBaselineArray and SqlPoolVulnerabilityAssessmentBaselineArrayOutput values.
// You can construct a concrete instance of `SqlPoolVulnerabilityAssessmentBaselineArrayInput` via:
//
//	SqlPoolVulnerabilityAssessmentBaselineArray{ SqlPoolVulnerabilityAssessmentBaselineArgs{...} }
type SqlPoolVulnerabilityAssessmentBaselineArrayInput interface {
	pulumi.Input

	ToSqlPoolVulnerabilityAssessmentBaselineArrayOutput() SqlPoolVulnerabilityAssessmentBaselineArrayOutput
	ToSqlPoolVulnerabilityAssessmentBaselineArrayOutputWithContext(context.Context) SqlPoolVulnerabilityAssessmentBaselineArrayOutput
}

type SqlPoolVulnerabilityAssessmentBaselineArray []SqlPoolVulnerabilityAssessmentBaselineInput

func (SqlPoolVulnerabilityAssessmentBaselineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlPoolVulnerabilityAssessmentBaseline)(nil)).Elem()
}

func (i SqlPoolVulnerabilityAssessmentBaselineArray) ToSqlPoolVulnerabilityAssessmentBaselineArrayOutput() SqlPoolVulnerabilityAssessmentBaselineArrayOutput {
	return i.ToSqlPoolVulnerabilityAssessmentBaselineArrayOutputWithContext(context.Background())
}

func (i SqlPoolVulnerabilityAssessmentBaselineArray) ToSqlPoolVulnerabilityAssessmentBaselineArrayOutputWithContext(ctx context.Context) SqlPoolVulnerabilityAssessmentBaselineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlPoolVulnerabilityAssessmentBaselineArrayOutput)
}

// SqlPoolVulnerabilityAssessmentBaselineMapInput is an input type that accepts SqlPoolVulnerabilityAssessmentBaselineMap and SqlPoolVulnerabilityAssessmentBaselineMapOutput values.
// You can construct a concrete instance of `SqlPoolVulnerabilityAssessmentBaselineMapInput` via:
//
//	SqlPoolVulnerabilityAssessmentBaselineMap{ "key": SqlPoolVulnerabilityAssessmentBaselineArgs{...} }
type SqlPoolVulnerabilityAssessmentBaselineMapInput interface {
	pulumi.Input

	ToSqlPoolVulnerabilityAssessmentBaselineMapOutput() SqlPoolVulnerabilityAssessmentBaselineMapOutput
	ToSqlPoolVulnerabilityAssessmentBaselineMapOutputWithContext(context.Context) SqlPoolVulnerabilityAssessmentBaselineMapOutput
}

type SqlPoolVulnerabilityAssessmentBaselineMap map[string]SqlPoolVulnerabilityAssessmentBaselineInput

func (SqlPoolVulnerabilityAssessmentBaselineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlPoolVulnerabilityAssessmentBaseline)(nil)).Elem()
}

func (i SqlPoolVulnerabilityAssessmentBaselineMap) ToSqlPoolVulnerabilityAssessmentBaselineMapOutput() SqlPoolVulnerabilityAssessmentBaselineMapOutput {
	return i.ToSqlPoolVulnerabilityAssessmentBaselineMapOutputWithContext(context.Background())
}

func (i SqlPoolVulnerabilityAssessmentBaselineMap) ToSqlPoolVulnerabilityAssessmentBaselineMapOutputWithContext(ctx context.Context) SqlPoolVulnerabilityAssessmentBaselineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlPoolVulnerabilityAssessmentBaselineMapOutput)
}

type SqlPoolVulnerabilityAssessmentBaselineOutput struct{ *pulumi.OutputState }

func (SqlPoolVulnerabilityAssessmentBaselineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlPoolVulnerabilityAssessmentBaseline)(nil)).Elem()
}

func (o SqlPoolVulnerabilityAssessmentBaselineOutput) ToSqlPoolVulnerabilityAssessmentBaselineOutput() SqlPoolVulnerabilityAssessmentBaselineOutput {
	return o
}

func (o SqlPoolVulnerabilityAssessmentBaselineOutput) ToSqlPoolVulnerabilityAssessmentBaselineOutputWithContext(ctx context.Context) SqlPoolVulnerabilityAssessmentBaselineOutput {
	return o
}

// One or more `baseline` blocks as defined below.
func (o SqlPoolVulnerabilityAssessmentBaselineOutput) Baselines() SqlPoolVulnerabilityAssessmentBaselineBaselineArrayOutput {
	return o.ApplyT(func(v *SqlPoolVulnerabilityAssessmentBaseline) SqlPoolVulnerabilityAssessmentBaselineBaselineArrayOutput {
		return v.Baselines
	}).(SqlPoolVulnerabilityAssessmentBaselineBaselineArrayOutput)
}

// The name which should be used for this Synapse SQL Pool Vulnerability Assessment Rule Baseline.
func (o SqlPoolVulnerabilityAssessmentBaselineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlPoolVulnerabilityAssessmentBaseline) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the vulnerability assessment rule.
func (o SqlPoolVulnerabilityAssessmentBaselineOutput) RuleName() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlPoolVulnerabilityAssessmentBaseline) pulumi.StringOutput { return v.RuleName }).(pulumi.StringOutput)
}

// The ID of the Synapse SQL Pool Vulnerability Assessment. Changing this forces a new Synapse SQL Pool Vulnerability Assessment Rule Baseline to be created.
func (o SqlPoolVulnerabilityAssessmentBaselineOutput) SqlPoolVulnerabilityAssessmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlPoolVulnerabilityAssessmentBaseline) pulumi.StringOutput {
		return v.SqlPoolVulnerabilityAssessmentId
	}).(pulumi.StringOutput)
}

type SqlPoolVulnerabilityAssessmentBaselineArrayOutput struct{ *pulumi.OutputState }

func (SqlPoolVulnerabilityAssessmentBaselineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlPoolVulnerabilityAssessmentBaseline)(nil)).Elem()
}

func (o SqlPoolVulnerabilityAssessmentBaselineArrayOutput) ToSqlPoolVulnerabilityAssessmentBaselineArrayOutput() SqlPoolVulnerabilityAssessmentBaselineArrayOutput {
	return o
}

func (o SqlPoolVulnerabilityAssessmentBaselineArrayOutput) ToSqlPoolVulnerabilityAssessmentBaselineArrayOutputWithContext(ctx context.Context) SqlPoolVulnerabilityAssessmentBaselineArrayOutput {
	return o
}

func (o SqlPoolVulnerabilityAssessmentBaselineArrayOutput) Index(i pulumi.IntInput) SqlPoolVulnerabilityAssessmentBaselineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SqlPoolVulnerabilityAssessmentBaseline {
		return vs[0].([]*SqlPoolVulnerabilityAssessmentBaseline)[vs[1].(int)]
	}).(SqlPoolVulnerabilityAssessmentBaselineOutput)
}

type SqlPoolVulnerabilityAssessmentBaselineMapOutput struct{ *pulumi.OutputState }

func (SqlPoolVulnerabilityAssessmentBaselineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlPoolVulnerabilityAssessmentBaseline)(nil)).Elem()
}

func (o SqlPoolVulnerabilityAssessmentBaselineMapOutput) ToSqlPoolVulnerabilityAssessmentBaselineMapOutput() SqlPoolVulnerabilityAssessmentBaselineMapOutput {
	return o
}

func (o SqlPoolVulnerabilityAssessmentBaselineMapOutput) ToSqlPoolVulnerabilityAssessmentBaselineMapOutputWithContext(ctx context.Context) SqlPoolVulnerabilityAssessmentBaselineMapOutput {
	return o
}

func (o SqlPoolVulnerabilityAssessmentBaselineMapOutput) MapIndex(k pulumi.StringInput) SqlPoolVulnerabilityAssessmentBaselineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SqlPoolVulnerabilityAssessmentBaseline {
		return vs[0].(map[string]*SqlPoolVulnerabilityAssessmentBaseline)[vs[1].(string)]
	}).(SqlPoolVulnerabilityAssessmentBaselineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SqlPoolVulnerabilityAssessmentBaselineInput)(nil)).Elem(), &SqlPoolVulnerabilityAssessmentBaseline{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlPoolVulnerabilityAssessmentBaselineArrayInput)(nil)).Elem(), SqlPoolVulnerabilityAssessmentBaselineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlPoolVulnerabilityAssessmentBaselineMapInput)(nil)).Elem(), SqlPoolVulnerabilityAssessmentBaselineMap{})
	pulumi.RegisterOutputType(SqlPoolVulnerabilityAssessmentBaselineOutput{})
	pulumi.RegisterOutputType(SqlPoolVulnerabilityAssessmentBaselineArrayOutput{})
	pulumi.RegisterOutputType(SqlPoolVulnerabilityAssessmentBaselineMapOutput{})
}
