// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package synapse

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages the Vulnerability Assessment for a Synapse SQL Pool.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/synapse"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Location:               exampleResourceGroup.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("LRS"),
//				AccountKind:            pulumi.String("StorageV2"),
//				IsHnsEnabled:           pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			exampleContainer, err := storage.NewContainer(ctx, "exampleContainer", &storage.ContainerArgs{
//				StorageAccountName: exampleAccount.Name,
//			})
//			if err != nil {
//				return err
//			}
//			exampleDataLakeGen2Filesystem, err := storage.NewDataLakeGen2Filesystem(ctx, "exampleDataLakeGen2Filesystem", &storage.DataLakeGen2FilesystemArgs{
//				StorageAccountId: exampleAccount.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			exampleWorkspace, err := synapse.NewWorkspace(ctx, "exampleWorkspace", &synapse.WorkspaceArgs{
//				ResourceGroupName:               exampleResourceGroup.Name,
//				Location:                        exampleResourceGroup.Location,
//				StorageDataLakeGen2FilesystemId: exampleDataLakeGen2Filesystem.ID(),
//				SqlAdministratorLogin:           pulumi.String("sqladminuser"),
//				SqlAdministratorLoginPassword:   pulumi.String("H@Sh1CoR3!"),
//				AadAdmin: &synapse.WorkspaceAadAdminTypeArgs{
//					Login:    pulumi.String("AzureAD Admin"),
//					ObjectId: pulumi.String("00000000-0000-0000-0000-000000000000"),
//					TenantId: pulumi.String("00000000-0000-0000-0000-000000000000"),
//				},
//				Identity: &synapse.WorkspaceIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//				Tags: pulumi.StringMap{
//					"Env": pulumi.String("production"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleSqlPool, err := synapse.NewSqlPool(ctx, "exampleSqlPool", &synapse.SqlPoolArgs{
//				SynapseWorkspaceId: exampleWorkspace.ID(),
//				SkuName:            pulumi.String("DW100c"),
//				CreateMode:         pulumi.String("Default"),
//			})
//			if err != nil {
//				return err
//			}
//			auditLogs, err := storage.NewAccount(ctx, "auditLogs", &storage.AccountArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Location:               exampleResourceGroup.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("LRS"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleSqlPoolSecurityAlertPolicy, err := synapse.NewSqlPoolSecurityAlertPolicy(ctx, "exampleSqlPoolSecurityAlertPolicy", &synapse.SqlPoolSecurityAlertPolicyArgs{
//				SqlPoolId:               exampleSqlPool.ID(),
//				PolicyState:             pulumi.String("Enabled"),
//				StorageEndpoint:         auditLogs.PrimaryBlobEndpoint,
//				StorageAccountAccessKey: auditLogs.PrimaryAccessKey,
//				DisabledAlerts: pulumi.StringArray{
//					pulumi.String("Sql_Injection"),
//					pulumi.String("Data_Exfiltration"),
//				},
//				RetentionDays: pulumi.Int(20),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = synapse.NewSqlPoolVulnerabilityAssessment(ctx, "exampleSqlPoolVulnerabilityAssessment", &synapse.SqlPoolVulnerabilityAssessmentArgs{
//				SqlPoolSecurityAlertPolicyId: exampleSqlPoolSecurityAlertPolicy.ID(),
//				StorageContainerPath: pulumi.All(exampleAccount.PrimaryBlobEndpoint, exampleContainer.Name).ApplyT(func(_args []interface{}) (string, error) {
//					primaryBlobEndpoint := _args[0].(string)
//					name := _args[1].(string)
//					return fmt.Sprintf("%v%v/", primaryBlobEndpoint, name), nil
//				}).(pulumi.StringOutput),
//				StorageAccountAccessKey: exampleAccount.PrimaryAccessKey,
//				RecurringScans: &synapse.SqlPoolVulnerabilityAssessmentRecurringScansArgs{
//					Enabled:                        pulumi.Bool(true),
//					EmailSubscriptionAdminsEnabled: pulumi.Bool(true),
//					Emails: pulumi.StringArray{
//						pulumi.String("email@example1.com"),
//						pulumi.String("email@example2.com"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Synapse SQL Pool Vulnerability Assessment can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:synapse/sqlPoolVulnerabilityAssessment:SqlPoolVulnerabilityAssessment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Synapse/workspaces/workspace1/sqlPools/sqlPool1/vulnerabilityAssessments/default
//
// ```
type SqlPoolVulnerabilityAssessment struct {
	pulumi.CustomResourceState

	// The recurring scans settings. The `recurringScans` block supports fields documented below.
	RecurringScans SqlPoolVulnerabilityAssessmentRecurringScansOutput `pulumi:"recurringScans"`
	// The ID of the security alert policy of the Synapse SQL Pool. Changing this forces a new resource to be created.
	SqlPoolSecurityAlertPolicyId pulumi.StringOutput `pulumi:"sqlPoolSecurityAlertPolicyId"`
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.
	StorageAccountAccessKey pulumi.StringPtrOutput `pulumi:"storageAccountAccessKey"`
	// A blob storage container path to hold the scan results (e.g. <https://example.blob.core.windows.net/VaScans/>).
	StorageContainerPath pulumi.StringOutput `pulumi:"storageContainerPath"`
	// A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.
	StorageContainerSasKey pulumi.StringPtrOutput `pulumi:"storageContainerSasKey"`
}

// NewSqlPoolVulnerabilityAssessment registers a new resource with the given unique name, arguments, and options.
func NewSqlPoolVulnerabilityAssessment(ctx *pulumi.Context,
	name string, args *SqlPoolVulnerabilityAssessmentArgs, opts ...pulumi.ResourceOption) (*SqlPoolVulnerabilityAssessment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SqlPoolSecurityAlertPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'SqlPoolSecurityAlertPolicyId'")
	}
	if args.StorageContainerPath == nil {
		return nil, errors.New("invalid value for required argument 'StorageContainerPath'")
	}
	if args.StorageAccountAccessKey != nil {
		args.StorageAccountAccessKey = pulumi.ToSecret(args.StorageAccountAccessKey).(pulumi.StringPtrInput)
	}
	if args.StorageContainerSasKey != nil {
		args.StorageContainerSasKey = pulumi.ToSecret(args.StorageContainerSasKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"storageAccountAccessKey",
		"storageContainerSasKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SqlPoolVulnerabilityAssessment
	err := ctx.RegisterResource("azure:synapse/sqlPoolVulnerabilityAssessment:SqlPoolVulnerabilityAssessment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlPoolVulnerabilityAssessment gets an existing SqlPoolVulnerabilityAssessment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlPoolVulnerabilityAssessment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlPoolVulnerabilityAssessmentState, opts ...pulumi.ResourceOption) (*SqlPoolVulnerabilityAssessment, error) {
	var resource SqlPoolVulnerabilityAssessment
	err := ctx.ReadResource("azure:synapse/sqlPoolVulnerabilityAssessment:SqlPoolVulnerabilityAssessment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlPoolVulnerabilityAssessment resources.
type sqlPoolVulnerabilityAssessmentState struct {
	// The recurring scans settings. The `recurringScans` block supports fields documented below.
	RecurringScans *SqlPoolVulnerabilityAssessmentRecurringScans `pulumi:"recurringScans"`
	// The ID of the security alert policy of the Synapse SQL Pool. Changing this forces a new resource to be created.
	SqlPoolSecurityAlertPolicyId *string `pulumi:"sqlPoolSecurityAlertPolicyId"`
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// A blob storage container path to hold the scan results (e.g. <https://example.blob.core.windows.net/VaScans/>).
	StorageContainerPath *string `pulumi:"storageContainerPath"`
	// A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.
	StorageContainerSasKey *string `pulumi:"storageContainerSasKey"`
}

type SqlPoolVulnerabilityAssessmentState struct {
	// The recurring scans settings. The `recurringScans` block supports fields documented below.
	RecurringScans SqlPoolVulnerabilityAssessmentRecurringScansPtrInput
	// The ID of the security alert policy of the Synapse SQL Pool. Changing this forces a new resource to be created.
	SqlPoolSecurityAlertPolicyId pulumi.StringPtrInput
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.
	StorageAccountAccessKey pulumi.StringPtrInput
	// A blob storage container path to hold the scan results (e.g. <https://example.blob.core.windows.net/VaScans/>).
	StorageContainerPath pulumi.StringPtrInput
	// A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.
	StorageContainerSasKey pulumi.StringPtrInput
}

func (SqlPoolVulnerabilityAssessmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlPoolVulnerabilityAssessmentState)(nil)).Elem()
}

type sqlPoolVulnerabilityAssessmentArgs struct {
	// The recurring scans settings. The `recurringScans` block supports fields documented below.
	RecurringScans *SqlPoolVulnerabilityAssessmentRecurringScans `pulumi:"recurringScans"`
	// The ID of the security alert policy of the Synapse SQL Pool. Changing this forces a new resource to be created.
	SqlPoolSecurityAlertPolicyId string `pulumi:"sqlPoolSecurityAlertPolicyId"`
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// A blob storage container path to hold the scan results (e.g. <https://example.blob.core.windows.net/VaScans/>).
	StorageContainerPath string `pulumi:"storageContainerPath"`
	// A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.
	StorageContainerSasKey *string `pulumi:"storageContainerSasKey"`
}

// The set of arguments for constructing a SqlPoolVulnerabilityAssessment resource.
type SqlPoolVulnerabilityAssessmentArgs struct {
	// The recurring scans settings. The `recurringScans` block supports fields documented below.
	RecurringScans SqlPoolVulnerabilityAssessmentRecurringScansPtrInput
	// The ID of the security alert policy of the Synapse SQL Pool. Changing this forces a new resource to be created.
	SqlPoolSecurityAlertPolicyId pulumi.StringInput
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.
	StorageAccountAccessKey pulumi.StringPtrInput
	// A blob storage container path to hold the scan results (e.g. <https://example.blob.core.windows.net/VaScans/>).
	StorageContainerPath pulumi.StringInput
	// A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.
	StorageContainerSasKey pulumi.StringPtrInput
}

func (SqlPoolVulnerabilityAssessmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlPoolVulnerabilityAssessmentArgs)(nil)).Elem()
}

type SqlPoolVulnerabilityAssessmentInput interface {
	pulumi.Input

	ToSqlPoolVulnerabilityAssessmentOutput() SqlPoolVulnerabilityAssessmentOutput
	ToSqlPoolVulnerabilityAssessmentOutputWithContext(ctx context.Context) SqlPoolVulnerabilityAssessmentOutput
}

func (*SqlPoolVulnerabilityAssessment) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlPoolVulnerabilityAssessment)(nil)).Elem()
}

func (i *SqlPoolVulnerabilityAssessment) ToSqlPoolVulnerabilityAssessmentOutput() SqlPoolVulnerabilityAssessmentOutput {
	return i.ToSqlPoolVulnerabilityAssessmentOutputWithContext(context.Background())
}

func (i *SqlPoolVulnerabilityAssessment) ToSqlPoolVulnerabilityAssessmentOutputWithContext(ctx context.Context) SqlPoolVulnerabilityAssessmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlPoolVulnerabilityAssessmentOutput)
}

// SqlPoolVulnerabilityAssessmentArrayInput is an input type that accepts SqlPoolVulnerabilityAssessmentArray and SqlPoolVulnerabilityAssessmentArrayOutput values.
// You can construct a concrete instance of `SqlPoolVulnerabilityAssessmentArrayInput` via:
//
//	SqlPoolVulnerabilityAssessmentArray{ SqlPoolVulnerabilityAssessmentArgs{...} }
type SqlPoolVulnerabilityAssessmentArrayInput interface {
	pulumi.Input

	ToSqlPoolVulnerabilityAssessmentArrayOutput() SqlPoolVulnerabilityAssessmentArrayOutput
	ToSqlPoolVulnerabilityAssessmentArrayOutputWithContext(context.Context) SqlPoolVulnerabilityAssessmentArrayOutput
}

type SqlPoolVulnerabilityAssessmentArray []SqlPoolVulnerabilityAssessmentInput

func (SqlPoolVulnerabilityAssessmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlPoolVulnerabilityAssessment)(nil)).Elem()
}

func (i SqlPoolVulnerabilityAssessmentArray) ToSqlPoolVulnerabilityAssessmentArrayOutput() SqlPoolVulnerabilityAssessmentArrayOutput {
	return i.ToSqlPoolVulnerabilityAssessmentArrayOutputWithContext(context.Background())
}

func (i SqlPoolVulnerabilityAssessmentArray) ToSqlPoolVulnerabilityAssessmentArrayOutputWithContext(ctx context.Context) SqlPoolVulnerabilityAssessmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlPoolVulnerabilityAssessmentArrayOutput)
}

// SqlPoolVulnerabilityAssessmentMapInput is an input type that accepts SqlPoolVulnerabilityAssessmentMap and SqlPoolVulnerabilityAssessmentMapOutput values.
// You can construct a concrete instance of `SqlPoolVulnerabilityAssessmentMapInput` via:
//
//	SqlPoolVulnerabilityAssessmentMap{ "key": SqlPoolVulnerabilityAssessmentArgs{...} }
type SqlPoolVulnerabilityAssessmentMapInput interface {
	pulumi.Input

	ToSqlPoolVulnerabilityAssessmentMapOutput() SqlPoolVulnerabilityAssessmentMapOutput
	ToSqlPoolVulnerabilityAssessmentMapOutputWithContext(context.Context) SqlPoolVulnerabilityAssessmentMapOutput
}

type SqlPoolVulnerabilityAssessmentMap map[string]SqlPoolVulnerabilityAssessmentInput

func (SqlPoolVulnerabilityAssessmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlPoolVulnerabilityAssessment)(nil)).Elem()
}

func (i SqlPoolVulnerabilityAssessmentMap) ToSqlPoolVulnerabilityAssessmentMapOutput() SqlPoolVulnerabilityAssessmentMapOutput {
	return i.ToSqlPoolVulnerabilityAssessmentMapOutputWithContext(context.Background())
}

func (i SqlPoolVulnerabilityAssessmentMap) ToSqlPoolVulnerabilityAssessmentMapOutputWithContext(ctx context.Context) SqlPoolVulnerabilityAssessmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlPoolVulnerabilityAssessmentMapOutput)
}

type SqlPoolVulnerabilityAssessmentOutput struct{ *pulumi.OutputState }

func (SqlPoolVulnerabilityAssessmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlPoolVulnerabilityAssessment)(nil)).Elem()
}

func (o SqlPoolVulnerabilityAssessmentOutput) ToSqlPoolVulnerabilityAssessmentOutput() SqlPoolVulnerabilityAssessmentOutput {
	return o
}

func (o SqlPoolVulnerabilityAssessmentOutput) ToSqlPoolVulnerabilityAssessmentOutputWithContext(ctx context.Context) SqlPoolVulnerabilityAssessmentOutput {
	return o
}

// The recurring scans settings. The `recurringScans` block supports fields documented below.
func (o SqlPoolVulnerabilityAssessmentOutput) RecurringScans() SqlPoolVulnerabilityAssessmentRecurringScansOutput {
	return o.ApplyT(func(v *SqlPoolVulnerabilityAssessment) SqlPoolVulnerabilityAssessmentRecurringScansOutput {
		return v.RecurringScans
	}).(SqlPoolVulnerabilityAssessmentRecurringScansOutput)
}

// The ID of the security alert policy of the Synapse SQL Pool. Changing this forces a new resource to be created.
func (o SqlPoolVulnerabilityAssessmentOutput) SqlPoolSecurityAlertPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlPoolVulnerabilityAssessment) pulumi.StringOutput { return v.SqlPoolSecurityAlertPolicyId }).(pulumi.StringOutput)
}

// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.
func (o SqlPoolVulnerabilityAssessmentOutput) StorageAccountAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlPoolVulnerabilityAssessment) pulumi.StringPtrOutput { return v.StorageAccountAccessKey }).(pulumi.StringPtrOutput)
}

// A blob storage container path to hold the scan results (e.g. <https://example.blob.core.windows.net/VaScans/>).
func (o SqlPoolVulnerabilityAssessmentOutput) StorageContainerPath() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlPoolVulnerabilityAssessment) pulumi.StringOutput { return v.StorageContainerPath }).(pulumi.StringOutput)
}

// A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.
func (o SqlPoolVulnerabilityAssessmentOutput) StorageContainerSasKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlPoolVulnerabilityAssessment) pulumi.StringPtrOutput { return v.StorageContainerSasKey }).(pulumi.StringPtrOutput)
}

type SqlPoolVulnerabilityAssessmentArrayOutput struct{ *pulumi.OutputState }

func (SqlPoolVulnerabilityAssessmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlPoolVulnerabilityAssessment)(nil)).Elem()
}

func (o SqlPoolVulnerabilityAssessmentArrayOutput) ToSqlPoolVulnerabilityAssessmentArrayOutput() SqlPoolVulnerabilityAssessmentArrayOutput {
	return o
}

func (o SqlPoolVulnerabilityAssessmentArrayOutput) ToSqlPoolVulnerabilityAssessmentArrayOutputWithContext(ctx context.Context) SqlPoolVulnerabilityAssessmentArrayOutput {
	return o
}

func (o SqlPoolVulnerabilityAssessmentArrayOutput) Index(i pulumi.IntInput) SqlPoolVulnerabilityAssessmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SqlPoolVulnerabilityAssessment {
		return vs[0].([]*SqlPoolVulnerabilityAssessment)[vs[1].(int)]
	}).(SqlPoolVulnerabilityAssessmentOutput)
}

type SqlPoolVulnerabilityAssessmentMapOutput struct{ *pulumi.OutputState }

func (SqlPoolVulnerabilityAssessmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlPoolVulnerabilityAssessment)(nil)).Elem()
}

func (o SqlPoolVulnerabilityAssessmentMapOutput) ToSqlPoolVulnerabilityAssessmentMapOutput() SqlPoolVulnerabilityAssessmentMapOutput {
	return o
}

func (o SqlPoolVulnerabilityAssessmentMapOutput) ToSqlPoolVulnerabilityAssessmentMapOutputWithContext(ctx context.Context) SqlPoolVulnerabilityAssessmentMapOutput {
	return o
}

func (o SqlPoolVulnerabilityAssessmentMapOutput) MapIndex(k pulumi.StringInput) SqlPoolVulnerabilityAssessmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SqlPoolVulnerabilityAssessment {
		return vs[0].(map[string]*SqlPoolVulnerabilityAssessment)[vs[1].(string)]
	}).(SqlPoolVulnerabilityAssessmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SqlPoolVulnerabilityAssessmentInput)(nil)).Elem(), &SqlPoolVulnerabilityAssessment{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlPoolVulnerabilityAssessmentArrayInput)(nil)).Elem(), SqlPoolVulnerabilityAssessmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlPoolVulnerabilityAssessmentMapInput)(nil)).Elem(), SqlPoolVulnerabilityAssessmentMap{})
	pulumi.RegisterOutputType(SqlPoolVulnerabilityAssessmentOutput{})
	pulumi.RegisterOutputType(SqlPoolVulnerabilityAssessmentArrayOutput{})
	pulumi.RegisterOutputType(SqlPoolVulnerabilityAssessmentMapOutput{})
}
