// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package synapse

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Synapse Workspace.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/synapse"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Location:               exampleResourceGroup.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("LRS"),
//				AccountKind:            pulumi.String("StorageV2"),
//				IsHnsEnabled:           pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			exampleDataLakeGen2Filesystem, err := storage.NewDataLakeGen2Filesystem(ctx, "exampleDataLakeGen2Filesystem", &storage.DataLakeGen2FilesystemArgs{
//				StorageAccountId: exampleAccount.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = synapse.NewWorkspace(ctx, "exampleWorkspace", &synapse.WorkspaceArgs{
//				ResourceGroupName:               exampleResourceGroup.Name,
//				Location:                        exampleResourceGroup.Location,
//				StorageDataLakeGen2FilesystemId: exampleDataLakeGen2Filesystem.ID(),
//				SqlAdministratorLogin:           pulumi.String("sqladminuser"),
//				SqlAdministratorLoginPassword:   pulumi.String("H@Sh1CoR3!"),
//				AadAdmin: &synapse.WorkspaceAadAdminTypeArgs{
//					Login:    pulumi.String("AzureAD Admin"),
//					ObjectId: pulumi.String("00000000-0000-0000-0000-000000000000"),
//					TenantId: pulumi.String("00000000-0000-0000-0000-000000000000"),
//				},
//				Identity: &synapse.WorkspaceIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//				Tags: pulumi.StringMap{
//					"Env": pulumi.String("production"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Creating A Workspace With Customer Managed Key And Azure AD Admin
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/keyvault"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/synapse"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := core.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Location:               exampleResourceGroup.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("LRS"),
//				AccountKind:            pulumi.String("StorageV2"),
//				IsHnsEnabled:           pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			exampleDataLakeGen2Filesystem, err := storage.NewDataLakeGen2Filesystem(ctx, "exampleDataLakeGen2Filesystem", &storage.DataLakeGen2FilesystemArgs{
//				StorageAccountId: exampleAccount.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			exampleKeyVault, err := keyvault.NewKeyVault(ctx, "exampleKeyVault", &keyvault.KeyVaultArgs{
//				Location:               exampleResourceGroup.Location,
//				ResourceGroupName:      exampleResourceGroup.Name,
//				TenantId:               *pulumi.String(current.TenantId),
//				SkuName:                pulumi.String("standard"),
//				PurgeProtectionEnabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			deployer, err := keyvault.NewAccessPolicy(ctx, "deployer", &keyvault.AccessPolicyArgs{
//				KeyVaultId: exampleKeyVault.ID(),
//				TenantId:   *pulumi.String(current.TenantId),
//				ObjectId:   *pulumi.String(current.ObjectId),
//				KeyPermissions: pulumi.StringArray{
//					pulumi.String("Create"),
//					pulumi.String("Get"),
//					pulumi.String("Delete"),
//					pulumi.String("Purge"),
//					pulumi.String("GetRotationPolicy"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleKey, err := keyvault.NewKey(ctx, "exampleKey", &keyvault.KeyArgs{
//				KeyVaultId: exampleKeyVault.ID(),
//				KeyType:    pulumi.String("RSA"),
//				KeySize:    pulumi.Int(2048),
//				KeyOpts: pulumi.StringArray{
//					pulumi.String("unwrapKey"),
//					pulumi.String("wrapKey"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				deployer,
//			}))
//			if err != nil {
//				return err
//			}
//			exampleWorkspace, err := synapse.NewWorkspace(ctx, "exampleWorkspace", &synapse.WorkspaceArgs{
//				ResourceGroupName:               exampleResourceGroup.Name,
//				Location:                        exampleResourceGroup.Location,
//				StorageDataLakeGen2FilesystemId: exampleDataLakeGen2Filesystem.ID(),
//				SqlAdministratorLogin:           pulumi.String("sqladminuser"),
//				SqlAdministratorLoginPassword:   pulumi.String("H@Sh1CoR3!"),
//				CustomerManagedKey: &synapse.WorkspaceCustomerManagedKeyArgs{
//					KeyVersionlessId: exampleKey.VersionlessId,
//					KeyName:          pulumi.String("enckey"),
//				},
//				Identity: &synapse.WorkspaceIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//				Tags: pulumi.StringMap{
//					"Env": pulumi.String("production"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			workspacePolicy, err := keyvault.NewAccessPolicy(ctx, "workspacePolicy", &keyvault.AccessPolicyArgs{
//				KeyVaultId: exampleKeyVault.ID(),
//				TenantId: exampleWorkspace.Identity.ApplyT(func(identity synapse.WorkspaceIdentity) (*string, error) {
//					return &identity.TenantId, nil
//				}).(pulumi.StringPtrOutput),
//				ObjectId: exampleWorkspace.Identity.ApplyT(func(identity synapse.WorkspaceIdentity) (*string, error) {
//					return &identity.PrincipalId, nil
//				}).(pulumi.StringPtrOutput),
//				KeyPermissions: pulumi.StringArray{
//					pulumi.String("Get"),
//					pulumi.String("WrapKey"),
//					pulumi.String("UnwrapKey"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleWorkspaceKey, err := synapse.NewWorkspaceKey(ctx, "exampleWorkspaceKey", &synapse.WorkspaceKeyArgs{
//				CustomerManagedKeyVersionlessId: exampleKey.VersionlessId,
//				SynapseWorkspaceId:              exampleWorkspace.ID(),
//				Active:                          pulumi.Bool(true),
//				CustomerManagedKeyName:          pulumi.String("enckey"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				workspacePolicy,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = synapse.NewWorkspaceAadAdmin(ctx, "exampleWorkspaceAadAdmin", &synapse.WorkspaceAadAdminArgs{
//				SynapseWorkspaceId: exampleWorkspace.ID(),
//				Login:              pulumi.String("AzureAD Admin"),
//				ObjectId:           pulumi.String("00000000-0000-0000-0000-000000000000"),
//				TenantId:           pulumi.String("00000000-0000-0000-0000-000000000000"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				exampleWorkspaceKey,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Synapse Workspace can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:synapse/workspace:Workspace example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Synapse/workspaces/workspace1
//
// ```
type Workspace struct {
	pulumi.CustomResourceState

	// An `aadAdmin` block as defined below. Conflicts with `customerManagedKey`.
	AadAdmin WorkspaceAadAdminTypeOutput `pulumi:"aadAdmin"`
	// An `azureDevopsRepo` block as defined below.
	AzureDevopsRepo WorkspaceAzureDevopsRepoPtrOutput `pulumi:"azureDevopsRepo"`
	// Is Azure Active Directory Authentication the only way to authenticate with resources inside this synapse Workspace. Defaults to `false`.
	AzureadAuthenticationOnly pulumi.BoolPtrOutput `pulumi:"azureadAuthenticationOnly"`
	// Subnet ID used for computes in workspace Changing this forces a new resource to be created.
	ComputeSubnetId pulumi.StringPtrOutput `pulumi:"computeSubnetId"`
	// A list of Connectivity endpoints for this Synapse Workspace.
	ConnectivityEndpoints pulumi.StringMapOutput `pulumi:"connectivityEndpoints"`
	// A `customerManagedKey` block as defined below. Conflicts with `aadAdmin`.
	CustomerManagedKey WorkspaceCustomerManagedKeyPtrOutput `pulumi:"customerManagedKey"`
	// Is data exfiltration protection enabled in this workspace? If set to `true`, `managedVirtualNetworkEnabled` must also be set to `true`. Changing this forces a new resource to be created.
	DataExfiltrationProtectionEnabled pulumi.BoolPtrOutput `pulumi:"dataExfiltrationProtectionEnabled"`
	// A `githubRepo` block as defined below.
	GithubRepo WorkspaceGithubRepoPtrOutput `pulumi:"githubRepo"`
	// An `identity` block as defined below.
	Identity WorkspaceIdentityPtrOutput `pulumi:"identity"`
	// Allowed AAD Tenant Ids For Linking.
	LinkingAllowedForAadTenantIds pulumi.StringArrayOutput `pulumi:"linkingAllowedForAadTenantIds"`
	// Specifies the Azure Region where the synapse Workspace should exist. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Workspace managed resource group. Changing this forces a new resource to be created.
	ManagedResourceGroupName pulumi.StringOutput `pulumi:"managedResourceGroupName"`
	// Is Virtual Network enabled for all computes in this workspace? Changing this forces a new resource to be created.
	ManagedVirtualNetworkEnabled pulumi.BoolPtrOutput `pulumi:"managedVirtualNetworkEnabled"`
	// Specifies the name which should be used for this synapse Workspace. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Whether public network access is allowed for the Cognitive Account. Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrOutput `pulumi:"publicNetworkAccessEnabled"`
	// The ID of purview account.
	PurviewId pulumi.StringPtrOutput `pulumi:"purviewId"`
	// Specifies the name of the Resource Group where the synapse Workspace should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// An `sqlAadAdmin` block as defined below.
	SqlAadAdmin WorkspaceSqlAadAdminTypeOutput `pulumi:"sqlAadAdmin"`
	// Specifies The login name of the SQL administrator. Changing this forces a new resource to be created. If this is not provided `aadAdmin` or `customerManagedKey` must be provided.
	SqlAdministratorLogin pulumi.StringPtrOutput `pulumi:"sqlAdministratorLogin"`
	// The Password associated with the `sqlAdministratorLogin` for the SQL administrator. If this is not provided `aadAdmin` or `customerManagedKey` must be provided.
	SqlAdministratorLoginPassword pulumi.StringPtrOutput `pulumi:"sqlAdministratorLoginPassword"`
	// Are pipelines (running as workspace's system assigned identity) allowed to access SQL pools?
	SqlIdentityControlEnabled pulumi.BoolPtrOutput `pulumi:"sqlIdentityControlEnabled"`
	// Specifies the ID of storage data lake gen2 filesystem resource. Changing this forces a new resource to be created.
	StorageDataLakeGen2FilesystemId pulumi.StringOutput `pulumi:"storageDataLakeGen2FilesystemId"`
	// A mapping of tags which should be assigned to the Synapse Workspace.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewWorkspace registers a new resource with the given unique name, arguments, and options.
func NewWorkspace(ctx *pulumi.Context,
	name string, args *WorkspaceArgs, opts ...pulumi.ResourceOption) (*Workspace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.StorageDataLakeGen2FilesystemId == nil {
		return nil, errors.New("invalid value for required argument 'StorageDataLakeGen2FilesystemId'")
	}
	if args.SqlAdministratorLoginPassword != nil {
		args.SqlAdministratorLoginPassword = pulumi.ToSecret(args.SqlAdministratorLoginPassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"sqlAdministratorLoginPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Workspace
	err := ctx.RegisterResource("azure:synapse/workspace:Workspace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspace gets an existing Workspace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceState, opts ...pulumi.ResourceOption) (*Workspace, error) {
	var resource Workspace
	err := ctx.ReadResource("azure:synapse/workspace:Workspace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workspace resources.
type workspaceState struct {
	// An `aadAdmin` block as defined below. Conflicts with `customerManagedKey`.
	AadAdmin *WorkspaceAadAdminType `pulumi:"aadAdmin"`
	// An `azureDevopsRepo` block as defined below.
	AzureDevopsRepo *WorkspaceAzureDevopsRepo `pulumi:"azureDevopsRepo"`
	// Is Azure Active Directory Authentication the only way to authenticate with resources inside this synapse Workspace. Defaults to `false`.
	AzureadAuthenticationOnly *bool `pulumi:"azureadAuthenticationOnly"`
	// Subnet ID used for computes in workspace Changing this forces a new resource to be created.
	ComputeSubnetId *string `pulumi:"computeSubnetId"`
	// A list of Connectivity endpoints for this Synapse Workspace.
	ConnectivityEndpoints map[string]string `pulumi:"connectivityEndpoints"`
	// A `customerManagedKey` block as defined below. Conflicts with `aadAdmin`.
	CustomerManagedKey *WorkspaceCustomerManagedKey `pulumi:"customerManagedKey"`
	// Is data exfiltration protection enabled in this workspace? If set to `true`, `managedVirtualNetworkEnabled` must also be set to `true`. Changing this forces a new resource to be created.
	DataExfiltrationProtectionEnabled *bool `pulumi:"dataExfiltrationProtectionEnabled"`
	// A `githubRepo` block as defined below.
	GithubRepo *WorkspaceGithubRepo `pulumi:"githubRepo"`
	// An `identity` block as defined below.
	Identity *WorkspaceIdentity `pulumi:"identity"`
	// Allowed AAD Tenant Ids For Linking.
	LinkingAllowedForAadTenantIds []string `pulumi:"linkingAllowedForAadTenantIds"`
	// Specifies the Azure Region where the synapse Workspace should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Workspace managed resource group. Changing this forces a new resource to be created.
	ManagedResourceGroupName *string `pulumi:"managedResourceGroupName"`
	// Is Virtual Network enabled for all computes in this workspace? Changing this forces a new resource to be created.
	ManagedVirtualNetworkEnabled *bool `pulumi:"managedVirtualNetworkEnabled"`
	// Specifies the name which should be used for this synapse Workspace. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Whether public network access is allowed for the Cognitive Account. Defaults to `true`.
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// The ID of purview account.
	PurviewId *string `pulumi:"purviewId"`
	// Specifies the name of the Resource Group where the synapse Workspace should exist. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// An `sqlAadAdmin` block as defined below.
	SqlAadAdmin *WorkspaceSqlAadAdminType `pulumi:"sqlAadAdmin"`
	// Specifies The login name of the SQL administrator. Changing this forces a new resource to be created. If this is not provided `aadAdmin` or `customerManagedKey` must be provided.
	SqlAdministratorLogin *string `pulumi:"sqlAdministratorLogin"`
	// The Password associated with the `sqlAdministratorLogin` for the SQL administrator. If this is not provided `aadAdmin` or `customerManagedKey` must be provided.
	SqlAdministratorLoginPassword *string `pulumi:"sqlAdministratorLoginPassword"`
	// Are pipelines (running as workspace's system assigned identity) allowed to access SQL pools?
	SqlIdentityControlEnabled *bool `pulumi:"sqlIdentityControlEnabled"`
	// Specifies the ID of storage data lake gen2 filesystem resource. Changing this forces a new resource to be created.
	StorageDataLakeGen2FilesystemId *string `pulumi:"storageDataLakeGen2FilesystemId"`
	// A mapping of tags which should be assigned to the Synapse Workspace.
	Tags map[string]string `pulumi:"tags"`
}

type WorkspaceState struct {
	// An `aadAdmin` block as defined below. Conflicts with `customerManagedKey`.
	AadAdmin WorkspaceAadAdminTypePtrInput
	// An `azureDevopsRepo` block as defined below.
	AzureDevopsRepo WorkspaceAzureDevopsRepoPtrInput
	// Is Azure Active Directory Authentication the only way to authenticate with resources inside this synapse Workspace. Defaults to `false`.
	AzureadAuthenticationOnly pulumi.BoolPtrInput
	// Subnet ID used for computes in workspace Changing this forces a new resource to be created.
	ComputeSubnetId pulumi.StringPtrInput
	// A list of Connectivity endpoints for this Synapse Workspace.
	ConnectivityEndpoints pulumi.StringMapInput
	// A `customerManagedKey` block as defined below. Conflicts with `aadAdmin`.
	CustomerManagedKey WorkspaceCustomerManagedKeyPtrInput
	// Is data exfiltration protection enabled in this workspace? If set to `true`, `managedVirtualNetworkEnabled` must also be set to `true`. Changing this forces a new resource to be created.
	DataExfiltrationProtectionEnabled pulumi.BoolPtrInput
	// A `githubRepo` block as defined below.
	GithubRepo WorkspaceGithubRepoPtrInput
	// An `identity` block as defined below.
	Identity WorkspaceIdentityPtrInput
	// Allowed AAD Tenant Ids For Linking.
	LinkingAllowedForAadTenantIds pulumi.StringArrayInput
	// Specifies the Azure Region where the synapse Workspace should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Workspace managed resource group. Changing this forces a new resource to be created.
	ManagedResourceGroupName pulumi.StringPtrInput
	// Is Virtual Network enabled for all computes in this workspace? Changing this forces a new resource to be created.
	ManagedVirtualNetworkEnabled pulumi.BoolPtrInput
	// Specifies the name which should be used for this synapse Workspace. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Whether public network access is allowed for the Cognitive Account. Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// The ID of purview account.
	PurviewId pulumi.StringPtrInput
	// Specifies the name of the Resource Group where the synapse Workspace should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// An `sqlAadAdmin` block as defined below.
	SqlAadAdmin WorkspaceSqlAadAdminTypePtrInput
	// Specifies The login name of the SQL administrator. Changing this forces a new resource to be created. If this is not provided `aadAdmin` or `customerManagedKey` must be provided.
	SqlAdministratorLogin pulumi.StringPtrInput
	// The Password associated with the `sqlAdministratorLogin` for the SQL administrator. If this is not provided `aadAdmin` or `customerManagedKey` must be provided.
	SqlAdministratorLoginPassword pulumi.StringPtrInput
	// Are pipelines (running as workspace's system assigned identity) allowed to access SQL pools?
	SqlIdentityControlEnabled pulumi.BoolPtrInput
	// Specifies the ID of storage data lake gen2 filesystem resource. Changing this forces a new resource to be created.
	StorageDataLakeGen2FilesystemId pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Synapse Workspace.
	Tags pulumi.StringMapInput
}

func (WorkspaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceState)(nil)).Elem()
}

type workspaceArgs struct {
	// An `aadAdmin` block as defined below. Conflicts with `customerManagedKey`.
	AadAdmin *WorkspaceAadAdminType `pulumi:"aadAdmin"`
	// An `azureDevopsRepo` block as defined below.
	AzureDevopsRepo *WorkspaceAzureDevopsRepo `pulumi:"azureDevopsRepo"`
	// Is Azure Active Directory Authentication the only way to authenticate with resources inside this synapse Workspace. Defaults to `false`.
	AzureadAuthenticationOnly *bool `pulumi:"azureadAuthenticationOnly"`
	// Subnet ID used for computes in workspace Changing this forces a new resource to be created.
	ComputeSubnetId *string `pulumi:"computeSubnetId"`
	// A `customerManagedKey` block as defined below. Conflicts with `aadAdmin`.
	CustomerManagedKey *WorkspaceCustomerManagedKey `pulumi:"customerManagedKey"`
	// Is data exfiltration protection enabled in this workspace? If set to `true`, `managedVirtualNetworkEnabled` must also be set to `true`. Changing this forces a new resource to be created.
	DataExfiltrationProtectionEnabled *bool `pulumi:"dataExfiltrationProtectionEnabled"`
	// A `githubRepo` block as defined below.
	GithubRepo *WorkspaceGithubRepo `pulumi:"githubRepo"`
	// An `identity` block as defined below.
	Identity *WorkspaceIdentity `pulumi:"identity"`
	// Allowed AAD Tenant Ids For Linking.
	LinkingAllowedForAadTenantIds []string `pulumi:"linkingAllowedForAadTenantIds"`
	// Specifies the Azure Region where the synapse Workspace should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Workspace managed resource group. Changing this forces a new resource to be created.
	ManagedResourceGroupName *string `pulumi:"managedResourceGroupName"`
	// Is Virtual Network enabled for all computes in this workspace? Changing this forces a new resource to be created.
	ManagedVirtualNetworkEnabled *bool `pulumi:"managedVirtualNetworkEnabled"`
	// Specifies the name which should be used for this synapse Workspace. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Whether public network access is allowed for the Cognitive Account. Defaults to `true`.
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// The ID of purview account.
	PurviewId *string `pulumi:"purviewId"`
	// Specifies the name of the Resource Group where the synapse Workspace should exist. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// An `sqlAadAdmin` block as defined below.
	SqlAadAdmin *WorkspaceSqlAadAdminType `pulumi:"sqlAadAdmin"`
	// Specifies The login name of the SQL administrator. Changing this forces a new resource to be created. If this is not provided `aadAdmin` or `customerManagedKey` must be provided.
	SqlAdministratorLogin *string `pulumi:"sqlAdministratorLogin"`
	// The Password associated with the `sqlAdministratorLogin` for the SQL administrator. If this is not provided `aadAdmin` or `customerManagedKey` must be provided.
	SqlAdministratorLoginPassword *string `pulumi:"sqlAdministratorLoginPassword"`
	// Are pipelines (running as workspace's system assigned identity) allowed to access SQL pools?
	SqlIdentityControlEnabled *bool `pulumi:"sqlIdentityControlEnabled"`
	// Specifies the ID of storage data lake gen2 filesystem resource. Changing this forces a new resource to be created.
	StorageDataLakeGen2FilesystemId string `pulumi:"storageDataLakeGen2FilesystemId"`
	// A mapping of tags which should be assigned to the Synapse Workspace.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Workspace resource.
type WorkspaceArgs struct {
	// An `aadAdmin` block as defined below. Conflicts with `customerManagedKey`.
	AadAdmin WorkspaceAadAdminTypePtrInput
	// An `azureDevopsRepo` block as defined below.
	AzureDevopsRepo WorkspaceAzureDevopsRepoPtrInput
	// Is Azure Active Directory Authentication the only way to authenticate with resources inside this synapse Workspace. Defaults to `false`.
	AzureadAuthenticationOnly pulumi.BoolPtrInput
	// Subnet ID used for computes in workspace Changing this forces a new resource to be created.
	ComputeSubnetId pulumi.StringPtrInput
	// A `customerManagedKey` block as defined below. Conflicts with `aadAdmin`.
	CustomerManagedKey WorkspaceCustomerManagedKeyPtrInput
	// Is data exfiltration protection enabled in this workspace? If set to `true`, `managedVirtualNetworkEnabled` must also be set to `true`. Changing this forces a new resource to be created.
	DataExfiltrationProtectionEnabled pulumi.BoolPtrInput
	// A `githubRepo` block as defined below.
	GithubRepo WorkspaceGithubRepoPtrInput
	// An `identity` block as defined below.
	Identity WorkspaceIdentityPtrInput
	// Allowed AAD Tenant Ids For Linking.
	LinkingAllowedForAadTenantIds pulumi.StringArrayInput
	// Specifies the Azure Region where the synapse Workspace should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Workspace managed resource group. Changing this forces a new resource to be created.
	ManagedResourceGroupName pulumi.StringPtrInput
	// Is Virtual Network enabled for all computes in this workspace? Changing this forces a new resource to be created.
	ManagedVirtualNetworkEnabled pulumi.BoolPtrInput
	// Specifies the name which should be used for this synapse Workspace. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Whether public network access is allowed for the Cognitive Account. Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// The ID of purview account.
	PurviewId pulumi.StringPtrInput
	// Specifies the name of the Resource Group where the synapse Workspace should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// An `sqlAadAdmin` block as defined below.
	SqlAadAdmin WorkspaceSqlAadAdminTypePtrInput
	// Specifies The login name of the SQL administrator. Changing this forces a new resource to be created. If this is not provided `aadAdmin` or `customerManagedKey` must be provided.
	SqlAdministratorLogin pulumi.StringPtrInput
	// The Password associated with the `sqlAdministratorLogin` for the SQL administrator. If this is not provided `aadAdmin` or `customerManagedKey` must be provided.
	SqlAdministratorLoginPassword pulumi.StringPtrInput
	// Are pipelines (running as workspace's system assigned identity) allowed to access SQL pools?
	SqlIdentityControlEnabled pulumi.BoolPtrInput
	// Specifies the ID of storage data lake gen2 filesystem resource. Changing this forces a new resource to be created.
	StorageDataLakeGen2FilesystemId pulumi.StringInput
	// A mapping of tags which should be assigned to the Synapse Workspace.
	Tags pulumi.StringMapInput
}

func (WorkspaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceArgs)(nil)).Elem()
}

type WorkspaceInput interface {
	pulumi.Input

	ToWorkspaceOutput() WorkspaceOutput
	ToWorkspaceOutputWithContext(ctx context.Context) WorkspaceOutput
}

func (*Workspace) ElementType() reflect.Type {
	return reflect.TypeOf((**Workspace)(nil)).Elem()
}

func (i *Workspace) ToWorkspaceOutput() WorkspaceOutput {
	return i.ToWorkspaceOutputWithContext(context.Background())
}

func (i *Workspace) ToWorkspaceOutputWithContext(ctx context.Context) WorkspaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceOutput)
}

// WorkspaceArrayInput is an input type that accepts WorkspaceArray and WorkspaceArrayOutput values.
// You can construct a concrete instance of `WorkspaceArrayInput` via:
//
//	WorkspaceArray{ WorkspaceArgs{...} }
type WorkspaceArrayInput interface {
	pulumi.Input

	ToWorkspaceArrayOutput() WorkspaceArrayOutput
	ToWorkspaceArrayOutputWithContext(context.Context) WorkspaceArrayOutput
}

type WorkspaceArray []WorkspaceInput

func (WorkspaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Workspace)(nil)).Elem()
}

func (i WorkspaceArray) ToWorkspaceArrayOutput() WorkspaceArrayOutput {
	return i.ToWorkspaceArrayOutputWithContext(context.Background())
}

func (i WorkspaceArray) ToWorkspaceArrayOutputWithContext(ctx context.Context) WorkspaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceArrayOutput)
}

// WorkspaceMapInput is an input type that accepts WorkspaceMap and WorkspaceMapOutput values.
// You can construct a concrete instance of `WorkspaceMapInput` via:
//
//	WorkspaceMap{ "key": WorkspaceArgs{...} }
type WorkspaceMapInput interface {
	pulumi.Input

	ToWorkspaceMapOutput() WorkspaceMapOutput
	ToWorkspaceMapOutputWithContext(context.Context) WorkspaceMapOutput
}

type WorkspaceMap map[string]WorkspaceInput

func (WorkspaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Workspace)(nil)).Elem()
}

func (i WorkspaceMap) ToWorkspaceMapOutput() WorkspaceMapOutput {
	return i.ToWorkspaceMapOutputWithContext(context.Background())
}

func (i WorkspaceMap) ToWorkspaceMapOutputWithContext(ctx context.Context) WorkspaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceMapOutput)
}

type WorkspaceOutput struct{ *pulumi.OutputState }

func (WorkspaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Workspace)(nil)).Elem()
}

func (o WorkspaceOutput) ToWorkspaceOutput() WorkspaceOutput {
	return o
}

func (o WorkspaceOutput) ToWorkspaceOutputWithContext(ctx context.Context) WorkspaceOutput {
	return o
}

// An `aadAdmin` block as defined below. Conflicts with `customerManagedKey`.
func (o WorkspaceOutput) AadAdmin() WorkspaceAadAdminTypeOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceAadAdminTypeOutput { return v.AadAdmin }).(WorkspaceAadAdminTypeOutput)
}

// An `azureDevopsRepo` block as defined below.
func (o WorkspaceOutput) AzureDevopsRepo() WorkspaceAzureDevopsRepoPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceAzureDevopsRepoPtrOutput { return v.AzureDevopsRepo }).(WorkspaceAzureDevopsRepoPtrOutput)
}

// Is Azure Active Directory Authentication the only way to authenticate with resources inside this synapse Workspace. Defaults to `false`.
func (o WorkspaceOutput) AzureadAuthenticationOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Workspace) pulumi.BoolPtrOutput { return v.AzureadAuthenticationOnly }).(pulumi.BoolPtrOutput)
}

// Subnet ID used for computes in workspace Changing this forces a new resource to be created.
func (o WorkspaceOutput) ComputeSubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringPtrOutput { return v.ComputeSubnetId }).(pulumi.StringPtrOutput)
}

// A list of Connectivity endpoints for this Synapse Workspace.
func (o WorkspaceOutput) ConnectivityEndpoints() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringMapOutput { return v.ConnectivityEndpoints }).(pulumi.StringMapOutput)
}

// A `customerManagedKey` block as defined below. Conflicts with `aadAdmin`.
func (o WorkspaceOutput) CustomerManagedKey() WorkspaceCustomerManagedKeyPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceCustomerManagedKeyPtrOutput { return v.CustomerManagedKey }).(WorkspaceCustomerManagedKeyPtrOutput)
}

// Is data exfiltration protection enabled in this workspace? If set to `true`, `managedVirtualNetworkEnabled` must also be set to `true`. Changing this forces a new resource to be created.
func (o WorkspaceOutput) DataExfiltrationProtectionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Workspace) pulumi.BoolPtrOutput { return v.DataExfiltrationProtectionEnabled }).(pulumi.BoolPtrOutput)
}

// A `githubRepo` block as defined below.
func (o WorkspaceOutput) GithubRepo() WorkspaceGithubRepoPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceGithubRepoPtrOutput { return v.GithubRepo }).(WorkspaceGithubRepoPtrOutput)
}

// An `identity` block as defined below.
func (o WorkspaceOutput) Identity() WorkspaceIdentityPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceIdentityPtrOutput { return v.Identity }).(WorkspaceIdentityPtrOutput)
}

// Allowed AAD Tenant Ids For Linking.
func (o WorkspaceOutput) LinkingAllowedForAadTenantIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringArrayOutput { return v.LinkingAllowedForAadTenantIds }).(pulumi.StringArrayOutput)
}

// Specifies the Azure Region where the synapse Workspace should exist. Changing this forces a new resource to be created.
func (o WorkspaceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Workspace managed resource group. Changing this forces a new resource to be created.
func (o WorkspaceOutput) ManagedResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.ManagedResourceGroupName }).(pulumi.StringOutput)
}

// Is Virtual Network enabled for all computes in this workspace? Changing this forces a new resource to be created.
func (o WorkspaceOutput) ManagedVirtualNetworkEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Workspace) pulumi.BoolPtrOutput { return v.ManagedVirtualNetworkEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the name which should be used for this synapse Workspace. Changing this forces a new resource to be created.
func (o WorkspaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Whether public network access is allowed for the Cognitive Account. Defaults to `true`.
func (o WorkspaceOutput) PublicNetworkAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Workspace) pulumi.BoolPtrOutput { return v.PublicNetworkAccessEnabled }).(pulumi.BoolPtrOutput)
}

// The ID of purview account.
func (o WorkspaceOutput) PurviewId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringPtrOutput { return v.PurviewId }).(pulumi.StringPtrOutput)
}

// Specifies the name of the Resource Group where the synapse Workspace should exist. Changing this forces a new resource to be created.
func (o WorkspaceOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// An `sqlAadAdmin` block as defined below.
func (o WorkspaceOutput) SqlAadAdmin() WorkspaceSqlAadAdminTypeOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceSqlAadAdminTypeOutput { return v.SqlAadAdmin }).(WorkspaceSqlAadAdminTypeOutput)
}

// Specifies The login name of the SQL administrator. Changing this forces a new resource to be created. If this is not provided `aadAdmin` or `customerManagedKey` must be provided.
func (o WorkspaceOutput) SqlAdministratorLogin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringPtrOutput { return v.SqlAdministratorLogin }).(pulumi.StringPtrOutput)
}

// The Password associated with the `sqlAdministratorLogin` for the SQL administrator. If this is not provided `aadAdmin` or `customerManagedKey` must be provided.
func (o WorkspaceOutput) SqlAdministratorLoginPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringPtrOutput { return v.SqlAdministratorLoginPassword }).(pulumi.StringPtrOutput)
}

// Are pipelines (running as workspace's system assigned identity) allowed to access SQL pools?
func (o WorkspaceOutput) SqlIdentityControlEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Workspace) pulumi.BoolPtrOutput { return v.SqlIdentityControlEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the ID of storage data lake gen2 filesystem resource. Changing this forces a new resource to be created.
func (o WorkspaceOutput) StorageDataLakeGen2FilesystemId() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.StorageDataLakeGen2FilesystemId }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the Synapse Workspace.
func (o WorkspaceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type WorkspaceArrayOutput struct{ *pulumi.OutputState }

func (WorkspaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Workspace)(nil)).Elem()
}

func (o WorkspaceArrayOutput) ToWorkspaceArrayOutput() WorkspaceArrayOutput {
	return o
}

func (o WorkspaceArrayOutput) ToWorkspaceArrayOutputWithContext(ctx context.Context) WorkspaceArrayOutput {
	return o
}

func (o WorkspaceArrayOutput) Index(i pulumi.IntInput) WorkspaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Workspace {
		return vs[0].([]*Workspace)[vs[1].(int)]
	}).(WorkspaceOutput)
}

type WorkspaceMapOutput struct{ *pulumi.OutputState }

func (WorkspaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Workspace)(nil)).Elem()
}

func (o WorkspaceMapOutput) ToWorkspaceMapOutput() WorkspaceMapOutput {
	return o
}

func (o WorkspaceMapOutput) ToWorkspaceMapOutputWithContext(ctx context.Context) WorkspaceMapOutput {
	return o
}

func (o WorkspaceMapOutput) MapIndex(k pulumi.StringInput) WorkspaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Workspace {
		return vs[0].(map[string]*Workspace)[vs[1].(string)]
	}).(WorkspaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceInput)(nil)).Elem(), &Workspace{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceArrayInput)(nil)).Elem(), WorkspaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceMapInput)(nil)).Elem(), WorkspaceMap{})
	pulumi.RegisterOutputType(WorkspaceOutput{})
	pulumi.RegisterOutputType(WorkspaceArrayOutput{})
	pulumi.RegisterOutputType(WorkspaceMapOutput{})
}
