// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package synapse

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a Synapse Workspace.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/storage"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/synapse"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West Europe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
// 			ResourceGroupName:      exampleResourceGroup.Name,
// 			Location:               exampleResourceGroup.Location,
// 			AccountTier:            pulumi.String("Standard"),
// 			AccountReplicationType: pulumi.String("LRS"),
// 			AccountKind:            pulumi.String("StorageV2"),
// 			IsHnsEnabled:           pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleDataLakeGen2Filesystem, err := storage.NewDataLakeGen2Filesystem(ctx, "exampleDataLakeGen2Filesystem", &storage.DataLakeGen2FilesystemArgs{
// 			StorageAccountId: exampleAccount.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = synapse.NewWorkspace(ctx, "exampleWorkspace", &synapse.WorkspaceArgs{
// 			ResourceGroupName:               exampleResourceGroup.Name,
// 			Location:                        exampleResourceGroup.Location,
// 			StorageDataLakeGen2FilesystemId: exampleDataLakeGen2Filesystem.ID(),
// 			SqlAdministratorLogin:           pulumi.String("sqladminuser"),
// 			SqlAdministratorLoginPassword:   pulumi.String("H@Sh1CoR3!"),
// 			AadAdmin: &synapse.WorkspaceAadAdminArgs{
// 				Login:    pulumi.String("AzureAD Admin"),
// 				ObjectId: pulumi.String("00000000-0000-0000-0000-000000000000"),
// 				TenantId: pulumi.String("00000000-0000-0000-0000-000000000000"),
// 			},
// 			Tags: pulumi.StringMap{
// 				"Env": pulumi.String("production"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Synapse Workspace can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:synapse/workspace:Workspace example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Synapse/workspaces/workspace1
// ```
type Workspace struct {
	pulumi.CustomResourceState

	// An `aadAdmin` block as defined below.
	AadAdmin WorkspaceAadAdminOutput `pulumi:"aadAdmin"`
	// A list of Connectivity endpoints for this Synapse Workspace.
	ConnectivityEndpoints pulumi.StringMapOutput `pulumi:"connectivityEndpoints"`
	// An `identity` block as defined below, which contains the Managed Service Identity information for this Synapse Workspace.
	Identities WorkspaceIdentityArrayOutput `pulumi:"identities"`
	// Specifies the Azure Region where the synapse Workspace should exist. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Workspace managed resource group.
	ManagedResourceGroupName pulumi.StringOutput `pulumi:"managedResourceGroupName"`
	// Is Virtual Network enabled for all computes in this workspace. Changing this forces a new resource to be created.
	ManagedVirtualNetworkEnabled pulumi.BoolPtrOutput `pulumi:"managedVirtualNetworkEnabled"`
	// Specifies the name which should be used for this synapse Workspace. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the name of the Resource Group where the synapse Workspace should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Specifies The Login Name of the SQL administrator. Changing this forces a new resource to be created.
	SqlAdministratorLogin pulumi.StringOutput `pulumi:"sqlAdministratorLogin"`
	// The Password associated with the `sqlAdministratorLogin` for the SQL administrator.
	SqlAdministratorLoginPassword pulumi.StringOutput `pulumi:"sqlAdministratorLoginPassword"`
	// Specifies the ID of storage data lake gen2 filesystem resource. Changing this forces a new resource to be created.
	StorageDataLakeGen2FilesystemId pulumi.StringOutput `pulumi:"storageDataLakeGen2FilesystemId"`
	// A mapping of tags which should be assigned to the Synapse Workspace.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewWorkspace registers a new resource with the given unique name, arguments, and options.
func NewWorkspace(ctx *pulumi.Context,
	name string, args *WorkspaceArgs, opts ...pulumi.ResourceOption) (*Workspace, error) {
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.SqlAdministratorLogin == nil {
		return nil, errors.New("missing required argument 'SqlAdministratorLogin'")
	}
	if args == nil || args.SqlAdministratorLoginPassword == nil {
		return nil, errors.New("missing required argument 'SqlAdministratorLoginPassword'")
	}
	if args == nil || args.StorageDataLakeGen2FilesystemId == nil {
		return nil, errors.New("missing required argument 'StorageDataLakeGen2FilesystemId'")
	}
	if args == nil {
		args = &WorkspaceArgs{}
	}
	var resource Workspace
	err := ctx.RegisterResource("azure:synapse/workspace:Workspace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspace gets an existing Workspace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceState, opts ...pulumi.ResourceOption) (*Workspace, error) {
	var resource Workspace
	err := ctx.ReadResource("azure:synapse/workspace:Workspace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workspace resources.
type workspaceState struct {
	// An `aadAdmin` block as defined below.
	AadAdmin *WorkspaceAadAdmin `pulumi:"aadAdmin"`
	// A list of Connectivity endpoints for this Synapse Workspace.
	ConnectivityEndpoints map[string]string `pulumi:"connectivityEndpoints"`
	// An `identity` block as defined below, which contains the Managed Service Identity information for this Synapse Workspace.
	Identities []WorkspaceIdentity `pulumi:"identities"`
	// Specifies the Azure Region where the synapse Workspace should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Workspace managed resource group.
	ManagedResourceGroupName *string `pulumi:"managedResourceGroupName"`
	// Is Virtual Network enabled for all computes in this workspace. Changing this forces a new resource to be created.
	ManagedVirtualNetworkEnabled *bool `pulumi:"managedVirtualNetworkEnabled"`
	// Specifies the name which should be used for this synapse Workspace. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies the name of the Resource Group where the synapse Workspace should exist. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Specifies The Login Name of the SQL administrator. Changing this forces a new resource to be created.
	SqlAdministratorLogin *string `pulumi:"sqlAdministratorLogin"`
	// The Password associated with the `sqlAdministratorLogin` for the SQL administrator.
	SqlAdministratorLoginPassword *string `pulumi:"sqlAdministratorLoginPassword"`
	// Specifies the ID of storage data lake gen2 filesystem resource. Changing this forces a new resource to be created.
	StorageDataLakeGen2FilesystemId *string `pulumi:"storageDataLakeGen2FilesystemId"`
	// A mapping of tags which should be assigned to the Synapse Workspace.
	Tags map[string]string `pulumi:"tags"`
}

type WorkspaceState struct {
	// An `aadAdmin` block as defined below.
	AadAdmin WorkspaceAadAdminPtrInput
	// A list of Connectivity endpoints for this Synapse Workspace.
	ConnectivityEndpoints pulumi.StringMapInput
	// An `identity` block as defined below, which contains the Managed Service Identity information for this Synapse Workspace.
	Identities WorkspaceIdentityArrayInput
	// Specifies the Azure Region where the synapse Workspace should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Workspace managed resource group.
	ManagedResourceGroupName pulumi.StringPtrInput
	// Is Virtual Network enabled for all computes in this workspace. Changing this forces a new resource to be created.
	ManagedVirtualNetworkEnabled pulumi.BoolPtrInput
	// Specifies the name which should be used for this synapse Workspace. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies the name of the Resource Group where the synapse Workspace should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// Specifies The Login Name of the SQL administrator. Changing this forces a new resource to be created.
	SqlAdministratorLogin pulumi.StringPtrInput
	// The Password associated with the `sqlAdministratorLogin` for the SQL administrator.
	SqlAdministratorLoginPassword pulumi.StringPtrInput
	// Specifies the ID of storage data lake gen2 filesystem resource. Changing this forces a new resource to be created.
	StorageDataLakeGen2FilesystemId pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Synapse Workspace.
	Tags pulumi.StringMapInput
}

func (WorkspaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceState)(nil)).Elem()
}

type workspaceArgs struct {
	// An `aadAdmin` block as defined below.
	AadAdmin *WorkspaceAadAdmin `pulumi:"aadAdmin"`
	// Specifies the Azure Region where the synapse Workspace should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Is Virtual Network enabled for all computes in this workspace. Changing this forces a new resource to be created.
	ManagedVirtualNetworkEnabled *bool `pulumi:"managedVirtualNetworkEnabled"`
	// Specifies the name which should be used for this synapse Workspace. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies the name of the Resource Group where the synapse Workspace should exist. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Specifies The Login Name of the SQL administrator. Changing this forces a new resource to be created.
	SqlAdministratorLogin string `pulumi:"sqlAdministratorLogin"`
	// The Password associated with the `sqlAdministratorLogin` for the SQL administrator.
	SqlAdministratorLoginPassword string `pulumi:"sqlAdministratorLoginPassword"`
	// Specifies the ID of storage data lake gen2 filesystem resource. Changing this forces a new resource to be created.
	StorageDataLakeGen2FilesystemId string `pulumi:"storageDataLakeGen2FilesystemId"`
	// A mapping of tags which should be assigned to the Synapse Workspace.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Workspace resource.
type WorkspaceArgs struct {
	// An `aadAdmin` block as defined below.
	AadAdmin WorkspaceAadAdminPtrInput
	// Specifies the Azure Region where the synapse Workspace should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Is Virtual Network enabled for all computes in this workspace. Changing this forces a new resource to be created.
	ManagedVirtualNetworkEnabled pulumi.BoolPtrInput
	// Specifies the name which should be used for this synapse Workspace. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies the name of the Resource Group where the synapse Workspace should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// Specifies The Login Name of the SQL administrator. Changing this forces a new resource to be created.
	SqlAdministratorLogin pulumi.StringInput
	// The Password associated with the `sqlAdministratorLogin` for the SQL administrator.
	SqlAdministratorLoginPassword pulumi.StringInput
	// Specifies the ID of storage data lake gen2 filesystem resource. Changing this forces a new resource to be created.
	StorageDataLakeGen2FilesystemId pulumi.StringInput
	// A mapping of tags which should be assigned to the Synapse Workspace.
	Tags pulumi.StringMapInput
}

func (WorkspaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceArgs)(nil)).Elem()
}

type WorkspaceInput interface {
	pulumi.Input

	ToWorkspaceOutput() WorkspaceOutput
	ToWorkspaceOutputWithContext(ctx context.Context) WorkspaceOutput
}

func (Workspace) ElementType() reflect.Type {
	return reflect.TypeOf((*Workspace)(nil)).Elem()
}

func (i Workspace) ToWorkspaceOutput() WorkspaceOutput {
	return i.ToWorkspaceOutputWithContext(context.Background())
}

func (i Workspace) ToWorkspaceOutputWithContext(ctx context.Context) WorkspaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceOutput)
}

type WorkspaceOutput struct {
	*pulumi.OutputState
}

func (WorkspaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceOutput)(nil)).Elem()
}

func (o WorkspaceOutput) ToWorkspaceOutput() WorkspaceOutput {
	return o
}

func (o WorkspaceOutput) ToWorkspaceOutputWithContext(ctx context.Context) WorkspaceOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(WorkspaceOutput{})
}
