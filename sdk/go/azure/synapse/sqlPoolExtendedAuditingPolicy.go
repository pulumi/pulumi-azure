// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package synapse

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Synapse SQL Pool Extended Auditing Policy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/synapse"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Location:               exampleResourceGroup.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("LRS"),
//				AccountKind:            pulumi.String("BlobStorage"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleDataLakeGen2Filesystem, err := storage.NewDataLakeGen2Filesystem(ctx, "exampleDataLakeGen2Filesystem", &storage.DataLakeGen2FilesystemArgs{
//				StorageAccountId: exampleAccount.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			exampleWorkspace, err := synapse.NewWorkspace(ctx, "exampleWorkspace", &synapse.WorkspaceArgs{
//				ResourceGroupName:               exampleResourceGroup.Name,
//				Location:                        exampleResourceGroup.Location,
//				StorageDataLakeGen2FilesystemId: exampleDataLakeGen2Filesystem.ID(),
//				SqlAdministratorLogin:           pulumi.String("sqladminuser"),
//				SqlAdministratorLoginPassword:   pulumi.String("H@Sh1CoR3!"),
//				Identity: &synapse.WorkspaceIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleSqlPool, err := synapse.NewSqlPool(ctx, "exampleSqlPool", &synapse.SqlPoolArgs{
//				SynapseWorkspaceId: exampleWorkspace.ID(),
//				SkuName:            pulumi.String("DW100c"),
//				CreateMode:         pulumi.String("Default"),
//			})
//			if err != nil {
//				return err
//			}
//			auditLogs, err := storage.NewAccount(ctx, "auditLogs", &storage.AccountArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Location:               exampleResourceGroup.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("LRS"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = synapse.NewSqlPoolExtendedAuditingPolicy(ctx, "exampleSqlPoolExtendedAuditingPolicy", &synapse.SqlPoolExtendedAuditingPolicyArgs{
//				SqlPoolId:                          exampleSqlPool.ID(),
//				StorageEndpoint:                    auditLogs.PrimaryBlobEndpoint,
//				StorageAccountAccessKey:            auditLogs.PrimaryAccessKey,
//				StorageAccountAccessKeyIsSecondary: pulumi.Bool(false),
//				RetentionInDays:                    pulumi.Int(6),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Synapse SQL Pool Extended Auditing Policys can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:synapse/sqlPoolExtendedAuditingPolicy:SqlPoolExtendedAuditingPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Synapse/workspaces/workspace1/sqlPools/sqlPool1/extendedAuditingSettings/default
//
// ```
type SqlPoolExtendedAuditingPolicy struct {
	pulumi.CustomResourceState

	// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its master database audit events to Azure Monitor. Defaults to `true`.
	LogMonitoringEnabled pulumi.BoolPtrOutput `pulumi:"logMonitoringEnabled"`
	// The number of days to retain logs for in the storage account. Defaults to `0`.
	RetentionInDays pulumi.IntPtrOutput `pulumi:"retentionInDays"`
	// The ID of the Synapse SQL pool to set the extended auditing policy. Changing this forces a new resource to be created.
	SqlPoolId pulumi.StringOutput `pulumi:"sqlPoolId"`
	// The access key to use for the auditing storage account.
	StorageAccountAccessKey pulumi.StringPtrOutput `pulumi:"storageAccountAccessKey"`
	// Is `storageAccountAccessKey` value the storage's secondary key?
	StorageAccountAccessKeyIsSecondary pulumi.BoolPtrOutput `pulumi:"storageAccountAccessKeyIsSecondary"`
	// The blob storage endpoint (e.g. <https://example.blob.core.windows.net>). This blob storage will hold all extended auditing logs.
	StorageEndpoint pulumi.StringPtrOutput `pulumi:"storageEndpoint"`
}

// NewSqlPoolExtendedAuditingPolicy registers a new resource with the given unique name, arguments, and options.
func NewSqlPoolExtendedAuditingPolicy(ctx *pulumi.Context,
	name string, args *SqlPoolExtendedAuditingPolicyArgs, opts ...pulumi.ResourceOption) (*SqlPoolExtendedAuditingPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SqlPoolId == nil {
		return nil, errors.New("invalid value for required argument 'SqlPoolId'")
	}
	if args.StorageAccountAccessKey != nil {
		args.StorageAccountAccessKey = pulumi.ToSecret(args.StorageAccountAccessKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"storageAccountAccessKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SqlPoolExtendedAuditingPolicy
	err := ctx.RegisterResource("azure:synapse/sqlPoolExtendedAuditingPolicy:SqlPoolExtendedAuditingPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlPoolExtendedAuditingPolicy gets an existing SqlPoolExtendedAuditingPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlPoolExtendedAuditingPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlPoolExtendedAuditingPolicyState, opts ...pulumi.ResourceOption) (*SqlPoolExtendedAuditingPolicy, error) {
	var resource SqlPoolExtendedAuditingPolicy
	err := ctx.ReadResource("azure:synapse/sqlPoolExtendedAuditingPolicy:SqlPoolExtendedAuditingPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlPoolExtendedAuditingPolicy resources.
type sqlPoolExtendedAuditingPolicyState struct {
	// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its master database audit events to Azure Monitor. Defaults to `true`.
	LogMonitoringEnabled *bool `pulumi:"logMonitoringEnabled"`
	// The number of days to retain logs for in the storage account. Defaults to `0`.
	RetentionInDays *int `pulumi:"retentionInDays"`
	// The ID of the Synapse SQL pool to set the extended auditing policy. Changing this forces a new resource to be created.
	SqlPoolId *string `pulumi:"sqlPoolId"`
	// The access key to use for the auditing storage account.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// Is `storageAccountAccessKey` value the storage's secondary key?
	StorageAccountAccessKeyIsSecondary *bool `pulumi:"storageAccountAccessKeyIsSecondary"`
	// The blob storage endpoint (e.g. <https://example.blob.core.windows.net>). This blob storage will hold all extended auditing logs.
	StorageEndpoint *string `pulumi:"storageEndpoint"`
}

type SqlPoolExtendedAuditingPolicyState struct {
	// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its master database audit events to Azure Monitor. Defaults to `true`.
	LogMonitoringEnabled pulumi.BoolPtrInput
	// The number of days to retain logs for in the storage account. Defaults to `0`.
	RetentionInDays pulumi.IntPtrInput
	// The ID of the Synapse SQL pool to set the extended auditing policy. Changing this forces a new resource to be created.
	SqlPoolId pulumi.StringPtrInput
	// The access key to use for the auditing storage account.
	StorageAccountAccessKey pulumi.StringPtrInput
	// Is `storageAccountAccessKey` value the storage's secondary key?
	StorageAccountAccessKeyIsSecondary pulumi.BoolPtrInput
	// The blob storage endpoint (e.g. <https://example.blob.core.windows.net>). This blob storage will hold all extended auditing logs.
	StorageEndpoint pulumi.StringPtrInput
}

func (SqlPoolExtendedAuditingPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlPoolExtendedAuditingPolicyState)(nil)).Elem()
}

type sqlPoolExtendedAuditingPolicyArgs struct {
	// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its master database audit events to Azure Monitor. Defaults to `true`.
	LogMonitoringEnabled *bool `pulumi:"logMonitoringEnabled"`
	// The number of days to retain logs for in the storage account. Defaults to `0`.
	RetentionInDays *int `pulumi:"retentionInDays"`
	// The ID of the Synapse SQL pool to set the extended auditing policy. Changing this forces a new resource to be created.
	SqlPoolId string `pulumi:"sqlPoolId"`
	// The access key to use for the auditing storage account.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// Is `storageAccountAccessKey` value the storage's secondary key?
	StorageAccountAccessKeyIsSecondary *bool `pulumi:"storageAccountAccessKeyIsSecondary"`
	// The blob storage endpoint (e.g. <https://example.blob.core.windows.net>). This blob storage will hold all extended auditing logs.
	StorageEndpoint *string `pulumi:"storageEndpoint"`
}

// The set of arguments for constructing a SqlPoolExtendedAuditingPolicy resource.
type SqlPoolExtendedAuditingPolicyArgs struct {
	// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its master database audit events to Azure Monitor. Defaults to `true`.
	LogMonitoringEnabled pulumi.BoolPtrInput
	// The number of days to retain logs for in the storage account. Defaults to `0`.
	RetentionInDays pulumi.IntPtrInput
	// The ID of the Synapse SQL pool to set the extended auditing policy. Changing this forces a new resource to be created.
	SqlPoolId pulumi.StringInput
	// The access key to use for the auditing storage account.
	StorageAccountAccessKey pulumi.StringPtrInput
	// Is `storageAccountAccessKey` value the storage's secondary key?
	StorageAccountAccessKeyIsSecondary pulumi.BoolPtrInput
	// The blob storage endpoint (e.g. <https://example.blob.core.windows.net>). This blob storage will hold all extended auditing logs.
	StorageEndpoint pulumi.StringPtrInput
}

func (SqlPoolExtendedAuditingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlPoolExtendedAuditingPolicyArgs)(nil)).Elem()
}

type SqlPoolExtendedAuditingPolicyInput interface {
	pulumi.Input

	ToSqlPoolExtendedAuditingPolicyOutput() SqlPoolExtendedAuditingPolicyOutput
	ToSqlPoolExtendedAuditingPolicyOutputWithContext(ctx context.Context) SqlPoolExtendedAuditingPolicyOutput
}

func (*SqlPoolExtendedAuditingPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlPoolExtendedAuditingPolicy)(nil)).Elem()
}

func (i *SqlPoolExtendedAuditingPolicy) ToSqlPoolExtendedAuditingPolicyOutput() SqlPoolExtendedAuditingPolicyOutput {
	return i.ToSqlPoolExtendedAuditingPolicyOutputWithContext(context.Background())
}

func (i *SqlPoolExtendedAuditingPolicy) ToSqlPoolExtendedAuditingPolicyOutputWithContext(ctx context.Context) SqlPoolExtendedAuditingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlPoolExtendedAuditingPolicyOutput)
}

// SqlPoolExtendedAuditingPolicyArrayInput is an input type that accepts SqlPoolExtendedAuditingPolicyArray and SqlPoolExtendedAuditingPolicyArrayOutput values.
// You can construct a concrete instance of `SqlPoolExtendedAuditingPolicyArrayInput` via:
//
//	SqlPoolExtendedAuditingPolicyArray{ SqlPoolExtendedAuditingPolicyArgs{...} }
type SqlPoolExtendedAuditingPolicyArrayInput interface {
	pulumi.Input

	ToSqlPoolExtendedAuditingPolicyArrayOutput() SqlPoolExtendedAuditingPolicyArrayOutput
	ToSqlPoolExtendedAuditingPolicyArrayOutputWithContext(context.Context) SqlPoolExtendedAuditingPolicyArrayOutput
}

type SqlPoolExtendedAuditingPolicyArray []SqlPoolExtendedAuditingPolicyInput

func (SqlPoolExtendedAuditingPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlPoolExtendedAuditingPolicy)(nil)).Elem()
}

func (i SqlPoolExtendedAuditingPolicyArray) ToSqlPoolExtendedAuditingPolicyArrayOutput() SqlPoolExtendedAuditingPolicyArrayOutput {
	return i.ToSqlPoolExtendedAuditingPolicyArrayOutputWithContext(context.Background())
}

func (i SqlPoolExtendedAuditingPolicyArray) ToSqlPoolExtendedAuditingPolicyArrayOutputWithContext(ctx context.Context) SqlPoolExtendedAuditingPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlPoolExtendedAuditingPolicyArrayOutput)
}

// SqlPoolExtendedAuditingPolicyMapInput is an input type that accepts SqlPoolExtendedAuditingPolicyMap and SqlPoolExtendedAuditingPolicyMapOutput values.
// You can construct a concrete instance of `SqlPoolExtendedAuditingPolicyMapInput` via:
//
//	SqlPoolExtendedAuditingPolicyMap{ "key": SqlPoolExtendedAuditingPolicyArgs{...} }
type SqlPoolExtendedAuditingPolicyMapInput interface {
	pulumi.Input

	ToSqlPoolExtendedAuditingPolicyMapOutput() SqlPoolExtendedAuditingPolicyMapOutput
	ToSqlPoolExtendedAuditingPolicyMapOutputWithContext(context.Context) SqlPoolExtendedAuditingPolicyMapOutput
}

type SqlPoolExtendedAuditingPolicyMap map[string]SqlPoolExtendedAuditingPolicyInput

func (SqlPoolExtendedAuditingPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlPoolExtendedAuditingPolicy)(nil)).Elem()
}

func (i SqlPoolExtendedAuditingPolicyMap) ToSqlPoolExtendedAuditingPolicyMapOutput() SqlPoolExtendedAuditingPolicyMapOutput {
	return i.ToSqlPoolExtendedAuditingPolicyMapOutputWithContext(context.Background())
}

func (i SqlPoolExtendedAuditingPolicyMap) ToSqlPoolExtendedAuditingPolicyMapOutputWithContext(ctx context.Context) SqlPoolExtendedAuditingPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlPoolExtendedAuditingPolicyMapOutput)
}

type SqlPoolExtendedAuditingPolicyOutput struct{ *pulumi.OutputState }

func (SqlPoolExtendedAuditingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlPoolExtendedAuditingPolicy)(nil)).Elem()
}

func (o SqlPoolExtendedAuditingPolicyOutput) ToSqlPoolExtendedAuditingPolicyOutput() SqlPoolExtendedAuditingPolicyOutput {
	return o
}

func (o SqlPoolExtendedAuditingPolicyOutput) ToSqlPoolExtendedAuditingPolicyOutputWithContext(ctx context.Context) SqlPoolExtendedAuditingPolicyOutput {
	return o
}

// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its master database audit events to Azure Monitor. Defaults to `true`.
func (o SqlPoolExtendedAuditingPolicyOutput) LogMonitoringEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlPoolExtendedAuditingPolicy) pulumi.BoolPtrOutput { return v.LogMonitoringEnabled }).(pulumi.BoolPtrOutput)
}

// The number of days to retain logs for in the storage account. Defaults to `0`.
func (o SqlPoolExtendedAuditingPolicyOutput) RetentionInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SqlPoolExtendedAuditingPolicy) pulumi.IntPtrOutput { return v.RetentionInDays }).(pulumi.IntPtrOutput)
}

// The ID of the Synapse SQL pool to set the extended auditing policy. Changing this forces a new resource to be created.
func (o SqlPoolExtendedAuditingPolicyOutput) SqlPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlPoolExtendedAuditingPolicy) pulumi.StringOutput { return v.SqlPoolId }).(pulumi.StringOutput)
}

// The access key to use for the auditing storage account.
func (o SqlPoolExtendedAuditingPolicyOutput) StorageAccountAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlPoolExtendedAuditingPolicy) pulumi.StringPtrOutput { return v.StorageAccountAccessKey }).(pulumi.StringPtrOutput)
}

// Is `storageAccountAccessKey` value the storage's secondary key?
func (o SqlPoolExtendedAuditingPolicyOutput) StorageAccountAccessKeyIsSecondary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlPoolExtendedAuditingPolicy) pulumi.BoolPtrOutput {
		return v.StorageAccountAccessKeyIsSecondary
	}).(pulumi.BoolPtrOutput)
}

// The blob storage endpoint (e.g. <https://example.blob.core.windows.net>). This blob storage will hold all extended auditing logs.
func (o SqlPoolExtendedAuditingPolicyOutput) StorageEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlPoolExtendedAuditingPolicy) pulumi.StringPtrOutput { return v.StorageEndpoint }).(pulumi.StringPtrOutput)
}

type SqlPoolExtendedAuditingPolicyArrayOutput struct{ *pulumi.OutputState }

func (SqlPoolExtendedAuditingPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlPoolExtendedAuditingPolicy)(nil)).Elem()
}

func (o SqlPoolExtendedAuditingPolicyArrayOutput) ToSqlPoolExtendedAuditingPolicyArrayOutput() SqlPoolExtendedAuditingPolicyArrayOutput {
	return o
}

func (o SqlPoolExtendedAuditingPolicyArrayOutput) ToSqlPoolExtendedAuditingPolicyArrayOutputWithContext(ctx context.Context) SqlPoolExtendedAuditingPolicyArrayOutput {
	return o
}

func (o SqlPoolExtendedAuditingPolicyArrayOutput) Index(i pulumi.IntInput) SqlPoolExtendedAuditingPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SqlPoolExtendedAuditingPolicy {
		return vs[0].([]*SqlPoolExtendedAuditingPolicy)[vs[1].(int)]
	}).(SqlPoolExtendedAuditingPolicyOutput)
}

type SqlPoolExtendedAuditingPolicyMapOutput struct{ *pulumi.OutputState }

func (SqlPoolExtendedAuditingPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlPoolExtendedAuditingPolicy)(nil)).Elem()
}

func (o SqlPoolExtendedAuditingPolicyMapOutput) ToSqlPoolExtendedAuditingPolicyMapOutput() SqlPoolExtendedAuditingPolicyMapOutput {
	return o
}

func (o SqlPoolExtendedAuditingPolicyMapOutput) ToSqlPoolExtendedAuditingPolicyMapOutputWithContext(ctx context.Context) SqlPoolExtendedAuditingPolicyMapOutput {
	return o
}

func (o SqlPoolExtendedAuditingPolicyMapOutput) MapIndex(k pulumi.StringInput) SqlPoolExtendedAuditingPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SqlPoolExtendedAuditingPolicy {
		return vs[0].(map[string]*SqlPoolExtendedAuditingPolicy)[vs[1].(string)]
	}).(SqlPoolExtendedAuditingPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SqlPoolExtendedAuditingPolicyInput)(nil)).Elem(), &SqlPoolExtendedAuditingPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlPoolExtendedAuditingPolicyArrayInput)(nil)).Elem(), SqlPoolExtendedAuditingPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlPoolExtendedAuditingPolicyMapInput)(nil)).Elem(), SqlPoolExtendedAuditingPolicyMap{})
	pulumi.RegisterOutputType(SqlPoolExtendedAuditingPolicyOutput{})
	pulumi.RegisterOutputType(SqlPoolExtendedAuditingPolicyArrayOutput{})
	pulumi.RegisterOutputType(SqlPoolExtendedAuditingPolicyMapOutput{})
}
