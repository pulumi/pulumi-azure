// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package synapse

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Synapse SQL Pool Workload Group.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/synapse"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("west europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Location:               exampleResourceGroup.Location,
//				AccountKind:            pulumi.String("BlobStorage"),
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("LRS"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleDataLakeGen2Filesystem, err := storage.NewDataLakeGen2Filesystem(ctx, "exampleDataLakeGen2Filesystem", &storage.DataLakeGen2FilesystemArgs{
//				StorageAccountId: exampleAccount.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			exampleWorkspace, err := synapse.NewWorkspace(ctx, "exampleWorkspace", &synapse.WorkspaceArgs{
//				ResourceGroupName:               exampleResourceGroup.Name,
//				Location:                        exampleResourceGroup.Location,
//				StorageDataLakeGen2FilesystemId: exampleDataLakeGen2Filesystem.ID(),
//				SqlAdministratorLogin:           pulumi.String("sqladminuser"),
//				SqlAdministratorLoginPassword:   pulumi.String("H@Sh1CoR3!"),
//				Identity: &synapse.WorkspaceIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleSqlPool, err := synapse.NewSqlPool(ctx, "exampleSqlPool", &synapse.SqlPoolArgs{
//				SynapseWorkspaceId: exampleWorkspace.ID(),
//				SkuName:            pulumi.String("DW100c"),
//				CreateMode:         pulumi.String("Default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = synapse.NewSqlPoolWorkloadGroup(ctx, "exampleSqlPoolWorkloadGroup", &synapse.SqlPoolWorkloadGroupArgs{
//				SqlPoolId:                      exampleSqlPool.ID(),
//				Importance:                     pulumi.String("normal"),
//				MaxResourcePercent:             pulumi.Int(100),
//				MinResourcePercent:             pulumi.Int(0),
//				MaxResourcePercentPerRequest:   pulumi.Float64(3),
//				MinResourcePercentPerRequest:   pulumi.Float64(3),
//				QueryExecutionTimeoutInSeconds: pulumi.Int(0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Synapse SQL Pool Workload Groups can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:synapse/sqlPoolWorkloadGroup:SqlPoolWorkloadGroup example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.Synapse/workspaces/workspace1/sqlPools/sqlPool1/workloadGroups/workloadGroup1
//
// ```
type SqlPoolWorkloadGroup struct {
	pulumi.CustomResourceState

	// The workload group importance level. Defaults to `normal`.
	Importance pulumi.StringPtrOutput `pulumi:"importance"`
	// The workload group cap percentage resource.
	MaxResourcePercent pulumi.IntOutput `pulumi:"maxResourcePercent"`
	// The workload group request maximum grant percentage. Defaults to `3`.
	MaxResourcePercentPerRequest pulumi.Float64PtrOutput `pulumi:"maxResourcePercentPerRequest"`
	// The workload group minimum percentage resource.
	MinResourcePercent pulumi.IntOutput `pulumi:"minResourcePercent"`
	// The workload group request minimum grant percentage.
	MinResourcePercentPerRequest pulumi.Float64PtrOutput `pulumi:"minResourcePercentPerRequest"`
	// The name which should be used for this Synapse SQL Pool Workload Group. Changing this forces a new Synapse SQL Pool Workload Group to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The workload group query execution timeout.
	QueryExecutionTimeoutInSeconds pulumi.IntPtrOutput `pulumi:"queryExecutionTimeoutInSeconds"`
	// The ID of the Synapse SQL Pool. Changing this forces a new Synapse SQL Pool Workload Group to be created.
	SqlPoolId pulumi.StringOutput `pulumi:"sqlPoolId"`
}

// NewSqlPoolWorkloadGroup registers a new resource with the given unique name, arguments, and options.
func NewSqlPoolWorkloadGroup(ctx *pulumi.Context,
	name string, args *SqlPoolWorkloadGroupArgs, opts ...pulumi.ResourceOption) (*SqlPoolWorkloadGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MaxResourcePercent == nil {
		return nil, errors.New("invalid value for required argument 'MaxResourcePercent'")
	}
	if args.MinResourcePercent == nil {
		return nil, errors.New("invalid value for required argument 'MinResourcePercent'")
	}
	if args.SqlPoolId == nil {
		return nil, errors.New("invalid value for required argument 'SqlPoolId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SqlPoolWorkloadGroup
	err := ctx.RegisterResource("azure:synapse/sqlPoolWorkloadGroup:SqlPoolWorkloadGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlPoolWorkloadGroup gets an existing SqlPoolWorkloadGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlPoolWorkloadGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlPoolWorkloadGroupState, opts ...pulumi.ResourceOption) (*SqlPoolWorkloadGroup, error) {
	var resource SqlPoolWorkloadGroup
	err := ctx.ReadResource("azure:synapse/sqlPoolWorkloadGroup:SqlPoolWorkloadGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlPoolWorkloadGroup resources.
type sqlPoolWorkloadGroupState struct {
	// The workload group importance level. Defaults to `normal`.
	Importance *string `pulumi:"importance"`
	// The workload group cap percentage resource.
	MaxResourcePercent *int `pulumi:"maxResourcePercent"`
	// The workload group request maximum grant percentage. Defaults to `3`.
	MaxResourcePercentPerRequest *float64 `pulumi:"maxResourcePercentPerRequest"`
	// The workload group minimum percentage resource.
	MinResourcePercent *int `pulumi:"minResourcePercent"`
	// The workload group request minimum grant percentage.
	MinResourcePercentPerRequest *float64 `pulumi:"minResourcePercentPerRequest"`
	// The name which should be used for this Synapse SQL Pool Workload Group. Changing this forces a new Synapse SQL Pool Workload Group to be created.
	Name *string `pulumi:"name"`
	// The workload group query execution timeout.
	QueryExecutionTimeoutInSeconds *int `pulumi:"queryExecutionTimeoutInSeconds"`
	// The ID of the Synapse SQL Pool. Changing this forces a new Synapse SQL Pool Workload Group to be created.
	SqlPoolId *string `pulumi:"sqlPoolId"`
}

type SqlPoolWorkloadGroupState struct {
	// The workload group importance level. Defaults to `normal`.
	Importance pulumi.StringPtrInput
	// The workload group cap percentage resource.
	MaxResourcePercent pulumi.IntPtrInput
	// The workload group request maximum grant percentage. Defaults to `3`.
	MaxResourcePercentPerRequest pulumi.Float64PtrInput
	// The workload group minimum percentage resource.
	MinResourcePercent pulumi.IntPtrInput
	// The workload group request minimum grant percentage.
	MinResourcePercentPerRequest pulumi.Float64PtrInput
	// The name which should be used for this Synapse SQL Pool Workload Group. Changing this forces a new Synapse SQL Pool Workload Group to be created.
	Name pulumi.StringPtrInput
	// The workload group query execution timeout.
	QueryExecutionTimeoutInSeconds pulumi.IntPtrInput
	// The ID of the Synapse SQL Pool. Changing this forces a new Synapse SQL Pool Workload Group to be created.
	SqlPoolId pulumi.StringPtrInput
}

func (SqlPoolWorkloadGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlPoolWorkloadGroupState)(nil)).Elem()
}

type sqlPoolWorkloadGroupArgs struct {
	// The workload group importance level. Defaults to `normal`.
	Importance *string `pulumi:"importance"`
	// The workload group cap percentage resource.
	MaxResourcePercent int `pulumi:"maxResourcePercent"`
	// The workload group request maximum grant percentage. Defaults to `3`.
	MaxResourcePercentPerRequest *float64 `pulumi:"maxResourcePercentPerRequest"`
	// The workload group minimum percentage resource.
	MinResourcePercent int `pulumi:"minResourcePercent"`
	// The workload group request minimum grant percentage.
	MinResourcePercentPerRequest *float64 `pulumi:"minResourcePercentPerRequest"`
	// The name which should be used for this Synapse SQL Pool Workload Group. Changing this forces a new Synapse SQL Pool Workload Group to be created.
	Name *string `pulumi:"name"`
	// The workload group query execution timeout.
	QueryExecutionTimeoutInSeconds *int `pulumi:"queryExecutionTimeoutInSeconds"`
	// The ID of the Synapse SQL Pool. Changing this forces a new Synapse SQL Pool Workload Group to be created.
	SqlPoolId string `pulumi:"sqlPoolId"`
}

// The set of arguments for constructing a SqlPoolWorkloadGroup resource.
type SqlPoolWorkloadGroupArgs struct {
	// The workload group importance level. Defaults to `normal`.
	Importance pulumi.StringPtrInput
	// The workload group cap percentage resource.
	MaxResourcePercent pulumi.IntInput
	// The workload group request maximum grant percentage. Defaults to `3`.
	MaxResourcePercentPerRequest pulumi.Float64PtrInput
	// The workload group minimum percentage resource.
	MinResourcePercent pulumi.IntInput
	// The workload group request minimum grant percentage.
	MinResourcePercentPerRequest pulumi.Float64PtrInput
	// The name which should be used for this Synapse SQL Pool Workload Group. Changing this forces a new Synapse SQL Pool Workload Group to be created.
	Name pulumi.StringPtrInput
	// The workload group query execution timeout.
	QueryExecutionTimeoutInSeconds pulumi.IntPtrInput
	// The ID of the Synapse SQL Pool. Changing this forces a new Synapse SQL Pool Workload Group to be created.
	SqlPoolId pulumi.StringInput
}

func (SqlPoolWorkloadGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlPoolWorkloadGroupArgs)(nil)).Elem()
}

type SqlPoolWorkloadGroupInput interface {
	pulumi.Input

	ToSqlPoolWorkloadGroupOutput() SqlPoolWorkloadGroupOutput
	ToSqlPoolWorkloadGroupOutputWithContext(ctx context.Context) SqlPoolWorkloadGroupOutput
}

func (*SqlPoolWorkloadGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlPoolWorkloadGroup)(nil)).Elem()
}

func (i *SqlPoolWorkloadGroup) ToSqlPoolWorkloadGroupOutput() SqlPoolWorkloadGroupOutput {
	return i.ToSqlPoolWorkloadGroupOutputWithContext(context.Background())
}

func (i *SqlPoolWorkloadGroup) ToSqlPoolWorkloadGroupOutputWithContext(ctx context.Context) SqlPoolWorkloadGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlPoolWorkloadGroupOutput)
}

// SqlPoolWorkloadGroupArrayInput is an input type that accepts SqlPoolWorkloadGroupArray and SqlPoolWorkloadGroupArrayOutput values.
// You can construct a concrete instance of `SqlPoolWorkloadGroupArrayInput` via:
//
//	SqlPoolWorkloadGroupArray{ SqlPoolWorkloadGroupArgs{...} }
type SqlPoolWorkloadGroupArrayInput interface {
	pulumi.Input

	ToSqlPoolWorkloadGroupArrayOutput() SqlPoolWorkloadGroupArrayOutput
	ToSqlPoolWorkloadGroupArrayOutputWithContext(context.Context) SqlPoolWorkloadGroupArrayOutput
}

type SqlPoolWorkloadGroupArray []SqlPoolWorkloadGroupInput

func (SqlPoolWorkloadGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlPoolWorkloadGroup)(nil)).Elem()
}

func (i SqlPoolWorkloadGroupArray) ToSqlPoolWorkloadGroupArrayOutput() SqlPoolWorkloadGroupArrayOutput {
	return i.ToSqlPoolWorkloadGroupArrayOutputWithContext(context.Background())
}

func (i SqlPoolWorkloadGroupArray) ToSqlPoolWorkloadGroupArrayOutputWithContext(ctx context.Context) SqlPoolWorkloadGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlPoolWorkloadGroupArrayOutput)
}

// SqlPoolWorkloadGroupMapInput is an input type that accepts SqlPoolWorkloadGroupMap and SqlPoolWorkloadGroupMapOutput values.
// You can construct a concrete instance of `SqlPoolWorkloadGroupMapInput` via:
//
//	SqlPoolWorkloadGroupMap{ "key": SqlPoolWorkloadGroupArgs{...} }
type SqlPoolWorkloadGroupMapInput interface {
	pulumi.Input

	ToSqlPoolWorkloadGroupMapOutput() SqlPoolWorkloadGroupMapOutput
	ToSqlPoolWorkloadGroupMapOutputWithContext(context.Context) SqlPoolWorkloadGroupMapOutput
}

type SqlPoolWorkloadGroupMap map[string]SqlPoolWorkloadGroupInput

func (SqlPoolWorkloadGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlPoolWorkloadGroup)(nil)).Elem()
}

func (i SqlPoolWorkloadGroupMap) ToSqlPoolWorkloadGroupMapOutput() SqlPoolWorkloadGroupMapOutput {
	return i.ToSqlPoolWorkloadGroupMapOutputWithContext(context.Background())
}

func (i SqlPoolWorkloadGroupMap) ToSqlPoolWorkloadGroupMapOutputWithContext(ctx context.Context) SqlPoolWorkloadGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlPoolWorkloadGroupMapOutput)
}

type SqlPoolWorkloadGroupOutput struct{ *pulumi.OutputState }

func (SqlPoolWorkloadGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlPoolWorkloadGroup)(nil)).Elem()
}

func (o SqlPoolWorkloadGroupOutput) ToSqlPoolWorkloadGroupOutput() SqlPoolWorkloadGroupOutput {
	return o
}

func (o SqlPoolWorkloadGroupOutput) ToSqlPoolWorkloadGroupOutputWithContext(ctx context.Context) SqlPoolWorkloadGroupOutput {
	return o
}

// The workload group importance level. Defaults to `normal`.
func (o SqlPoolWorkloadGroupOutput) Importance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlPoolWorkloadGroup) pulumi.StringPtrOutput { return v.Importance }).(pulumi.StringPtrOutput)
}

// The workload group cap percentage resource.
func (o SqlPoolWorkloadGroupOutput) MaxResourcePercent() pulumi.IntOutput {
	return o.ApplyT(func(v *SqlPoolWorkloadGroup) pulumi.IntOutput { return v.MaxResourcePercent }).(pulumi.IntOutput)
}

// The workload group request maximum grant percentage. Defaults to `3`.
func (o SqlPoolWorkloadGroupOutput) MaxResourcePercentPerRequest() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SqlPoolWorkloadGroup) pulumi.Float64PtrOutput { return v.MaxResourcePercentPerRequest }).(pulumi.Float64PtrOutput)
}

// The workload group minimum percentage resource.
func (o SqlPoolWorkloadGroupOutput) MinResourcePercent() pulumi.IntOutput {
	return o.ApplyT(func(v *SqlPoolWorkloadGroup) pulumi.IntOutput { return v.MinResourcePercent }).(pulumi.IntOutput)
}

// The workload group request minimum grant percentage.
func (o SqlPoolWorkloadGroupOutput) MinResourcePercentPerRequest() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SqlPoolWorkloadGroup) pulumi.Float64PtrOutput { return v.MinResourcePercentPerRequest }).(pulumi.Float64PtrOutput)
}

// The name which should be used for this Synapse SQL Pool Workload Group. Changing this forces a new Synapse SQL Pool Workload Group to be created.
func (o SqlPoolWorkloadGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlPoolWorkloadGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The workload group query execution timeout.
func (o SqlPoolWorkloadGroupOutput) QueryExecutionTimeoutInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SqlPoolWorkloadGroup) pulumi.IntPtrOutput { return v.QueryExecutionTimeoutInSeconds }).(pulumi.IntPtrOutput)
}

// The ID of the Synapse SQL Pool. Changing this forces a new Synapse SQL Pool Workload Group to be created.
func (o SqlPoolWorkloadGroupOutput) SqlPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlPoolWorkloadGroup) pulumi.StringOutput { return v.SqlPoolId }).(pulumi.StringOutput)
}

type SqlPoolWorkloadGroupArrayOutput struct{ *pulumi.OutputState }

func (SqlPoolWorkloadGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlPoolWorkloadGroup)(nil)).Elem()
}

func (o SqlPoolWorkloadGroupArrayOutput) ToSqlPoolWorkloadGroupArrayOutput() SqlPoolWorkloadGroupArrayOutput {
	return o
}

func (o SqlPoolWorkloadGroupArrayOutput) ToSqlPoolWorkloadGroupArrayOutputWithContext(ctx context.Context) SqlPoolWorkloadGroupArrayOutput {
	return o
}

func (o SqlPoolWorkloadGroupArrayOutput) Index(i pulumi.IntInput) SqlPoolWorkloadGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SqlPoolWorkloadGroup {
		return vs[0].([]*SqlPoolWorkloadGroup)[vs[1].(int)]
	}).(SqlPoolWorkloadGroupOutput)
}

type SqlPoolWorkloadGroupMapOutput struct{ *pulumi.OutputState }

func (SqlPoolWorkloadGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlPoolWorkloadGroup)(nil)).Elem()
}

func (o SqlPoolWorkloadGroupMapOutput) ToSqlPoolWorkloadGroupMapOutput() SqlPoolWorkloadGroupMapOutput {
	return o
}

func (o SqlPoolWorkloadGroupMapOutput) ToSqlPoolWorkloadGroupMapOutputWithContext(ctx context.Context) SqlPoolWorkloadGroupMapOutput {
	return o
}

func (o SqlPoolWorkloadGroupMapOutput) MapIndex(k pulumi.StringInput) SqlPoolWorkloadGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SqlPoolWorkloadGroup {
		return vs[0].(map[string]*SqlPoolWorkloadGroup)[vs[1].(string)]
	}).(SqlPoolWorkloadGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SqlPoolWorkloadGroupInput)(nil)).Elem(), &SqlPoolWorkloadGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlPoolWorkloadGroupArrayInput)(nil)).Elem(), SqlPoolWorkloadGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlPoolWorkloadGroupMapInput)(nil)).Elem(), SqlPoolWorkloadGroupMap{})
	pulumi.RegisterOutputType(SqlPoolWorkloadGroupOutput{})
	pulumi.RegisterOutputType(SqlPoolWorkloadGroupArrayOutput{})
	pulumi.RegisterOutputType(SqlPoolWorkloadGroupMapOutput{})
}
