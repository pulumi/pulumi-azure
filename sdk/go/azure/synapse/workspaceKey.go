// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package synapse

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages Synapse Workspace keys
//
// > **Note:** Keys that are actively protecting a workspace cannot be deleted. When the keys resource is deleted, if the key is inactive it will be deleted, if it is active it will not be deleted.
//
// ## Import
//
// Synapse Workspace Keys can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:synapse/workspaceKey:WorkspaceKey example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Synapse/workspaces/workspace1/keys/key1
//
// ```
type WorkspaceKey struct {
	pulumi.CustomResourceState

	// Specifies if the workspace should be encrypted with this key.
	//
	// > **Note:** Only one key can actively encrypt a workspace. When performing a key rotation, setting a new key as the active key will disable existing keys.
	Active pulumi.BoolOutput `pulumi:"active"`
	// Specifies the name of the workspace key. Should match the name of the key in the synapse workspace.
	CustomerManagedKeyName pulumi.StringOutput `pulumi:"customerManagedKeyName"`
	// The Azure Key Vault Key Versionless ID to be used as the Customer Managed Key (CMK) for double encryption
	CustomerManagedKeyVersionlessId pulumi.StringPtrOutput `pulumi:"customerManagedKeyVersionlessId"`
	// The ID of the Synapse Workspace where the encryption key should be configured.
	SynapseWorkspaceId pulumi.StringOutput `pulumi:"synapseWorkspaceId"`
}

// NewWorkspaceKey registers a new resource with the given unique name, arguments, and options.
func NewWorkspaceKey(ctx *pulumi.Context,
	name string, args *WorkspaceKeyArgs, opts ...pulumi.ResourceOption) (*WorkspaceKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Active == nil {
		return nil, errors.New("invalid value for required argument 'Active'")
	}
	if args.CustomerManagedKeyName == nil {
		return nil, errors.New("invalid value for required argument 'CustomerManagedKeyName'")
	}
	if args.SynapseWorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'SynapseWorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkspaceKey
	err := ctx.RegisterResource("azure:synapse/workspaceKey:WorkspaceKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspaceKey gets an existing WorkspaceKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspaceKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceKeyState, opts ...pulumi.ResourceOption) (*WorkspaceKey, error) {
	var resource WorkspaceKey
	err := ctx.ReadResource("azure:synapse/workspaceKey:WorkspaceKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkspaceKey resources.
type workspaceKeyState struct {
	// Specifies if the workspace should be encrypted with this key.
	//
	// > **Note:** Only one key can actively encrypt a workspace. When performing a key rotation, setting a new key as the active key will disable existing keys.
	Active *bool `pulumi:"active"`
	// Specifies the name of the workspace key. Should match the name of the key in the synapse workspace.
	CustomerManagedKeyName *string `pulumi:"customerManagedKeyName"`
	// The Azure Key Vault Key Versionless ID to be used as the Customer Managed Key (CMK) for double encryption
	CustomerManagedKeyVersionlessId *string `pulumi:"customerManagedKeyVersionlessId"`
	// The ID of the Synapse Workspace where the encryption key should be configured.
	SynapseWorkspaceId *string `pulumi:"synapseWorkspaceId"`
}

type WorkspaceKeyState struct {
	// Specifies if the workspace should be encrypted with this key.
	//
	// > **Note:** Only one key can actively encrypt a workspace. When performing a key rotation, setting a new key as the active key will disable existing keys.
	Active pulumi.BoolPtrInput
	// Specifies the name of the workspace key. Should match the name of the key in the synapse workspace.
	CustomerManagedKeyName pulumi.StringPtrInput
	// The Azure Key Vault Key Versionless ID to be used as the Customer Managed Key (CMK) for double encryption
	CustomerManagedKeyVersionlessId pulumi.StringPtrInput
	// The ID of the Synapse Workspace where the encryption key should be configured.
	SynapseWorkspaceId pulumi.StringPtrInput
}

func (WorkspaceKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceKeyState)(nil)).Elem()
}

type workspaceKeyArgs struct {
	// Specifies if the workspace should be encrypted with this key.
	//
	// > **Note:** Only one key can actively encrypt a workspace. When performing a key rotation, setting a new key as the active key will disable existing keys.
	Active bool `pulumi:"active"`
	// Specifies the name of the workspace key. Should match the name of the key in the synapse workspace.
	CustomerManagedKeyName string `pulumi:"customerManagedKeyName"`
	// The Azure Key Vault Key Versionless ID to be used as the Customer Managed Key (CMK) for double encryption
	CustomerManagedKeyVersionlessId *string `pulumi:"customerManagedKeyVersionlessId"`
	// The ID of the Synapse Workspace where the encryption key should be configured.
	SynapseWorkspaceId string `pulumi:"synapseWorkspaceId"`
}

// The set of arguments for constructing a WorkspaceKey resource.
type WorkspaceKeyArgs struct {
	// Specifies if the workspace should be encrypted with this key.
	//
	// > **Note:** Only one key can actively encrypt a workspace. When performing a key rotation, setting a new key as the active key will disable existing keys.
	Active pulumi.BoolInput
	// Specifies the name of the workspace key. Should match the name of the key in the synapse workspace.
	CustomerManagedKeyName pulumi.StringInput
	// The Azure Key Vault Key Versionless ID to be used as the Customer Managed Key (CMK) for double encryption
	CustomerManagedKeyVersionlessId pulumi.StringPtrInput
	// The ID of the Synapse Workspace where the encryption key should be configured.
	SynapseWorkspaceId pulumi.StringInput
}

func (WorkspaceKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceKeyArgs)(nil)).Elem()
}

type WorkspaceKeyInput interface {
	pulumi.Input

	ToWorkspaceKeyOutput() WorkspaceKeyOutput
	ToWorkspaceKeyOutputWithContext(ctx context.Context) WorkspaceKeyOutput
}

func (*WorkspaceKey) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceKey)(nil)).Elem()
}

func (i *WorkspaceKey) ToWorkspaceKeyOutput() WorkspaceKeyOutput {
	return i.ToWorkspaceKeyOutputWithContext(context.Background())
}

func (i *WorkspaceKey) ToWorkspaceKeyOutputWithContext(ctx context.Context) WorkspaceKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceKeyOutput)
}

func (i *WorkspaceKey) ToOutput(ctx context.Context) pulumix.Output[*WorkspaceKey] {
	return pulumix.Output[*WorkspaceKey]{
		OutputState: i.ToWorkspaceKeyOutputWithContext(ctx).OutputState,
	}
}

// WorkspaceKeyArrayInput is an input type that accepts WorkspaceKeyArray and WorkspaceKeyArrayOutput values.
// You can construct a concrete instance of `WorkspaceKeyArrayInput` via:
//
//	WorkspaceKeyArray{ WorkspaceKeyArgs{...} }
type WorkspaceKeyArrayInput interface {
	pulumi.Input

	ToWorkspaceKeyArrayOutput() WorkspaceKeyArrayOutput
	ToWorkspaceKeyArrayOutputWithContext(context.Context) WorkspaceKeyArrayOutput
}

type WorkspaceKeyArray []WorkspaceKeyInput

func (WorkspaceKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkspaceKey)(nil)).Elem()
}

func (i WorkspaceKeyArray) ToWorkspaceKeyArrayOutput() WorkspaceKeyArrayOutput {
	return i.ToWorkspaceKeyArrayOutputWithContext(context.Background())
}

func (i WorkspaceKeyArray) ToWorkspaceKeyArrayOutputWithContext(ctx context.Context) WorkspaceKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceKeyArrayOutput)
}

func (i WorkspaceKeyArray) ToOutput(ctx context.Context) pulumix.Output[[]*WorkspaceKey] {
	return pulumix.Output[[]*WorkspaceKey]{
		OutputState: i.ToWorkspaceKeyArrayOutputWithContext(ctx).OutputState,
	}
}

// WorkspaceKeyMapInput is an input type that accepts WorkspaceKeyMap and WorkspaceKeyMapOutput values.
// You can construct a concrete instance of `WorkspaceKeyMapInput` via:
//
//	WorkspaceKeyMap{ "key": WorkspaceKeyArgs{...} }
type WorkspaceKeyMapInput interface {
	pulumi.Input

	ToWorkspaceKeyMapOutput() WorkspaceKeyMapOutput
	ToWorkspaceKeyMapOutputWithContext(context.Context) WorkspaceKeyMapOutput
}

type WorkspaceKeyMap map[string]WorkspaceKeyInput

func (WorkspaceKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkspaceKey)(nil)).Elem()
}

func (i WorkspaceKeyMap) ToWorkspaceKeyMapOutput() WorkspaceKeyMapOutput {
	return i.ToWorkspaceKeyMapOutputWithContext(context.Background())
}

func (i WorkspaceKeyMap) ToWorkspaceKeyMapOutputWithContext(ctx context.Context) WorkspaceKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceKeyMapOutput)
}

func (i WorkspaceKeyMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*WorkspaceKey] {
	return pulumix.Output[map[string]*WorkspaceKey]{
		OutputState: i.ToWorkspaceKeyMapOutputWithContext(ctx).OutputState,
	}
}

type WorkspaceKeyOutput struct{ *pulumi.OutputState }

func (WorkspaceKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceKey)(nil)).Elem()
}

func (o WorkspaceKeyOutput) ToWorkspaceKeyOutput() WorkspaceKeyOutput {
	return o
}

func (o WorkspaceKeyOutput) ToWorkspaceKeyOutputWithContext(ctx context.Context) WorkspaceKeyOutput {
	return o
}

func (o WorkspaceKeyOutput) ToOutput(ctx context.Context) pulumix.Output[*WorkspaceKey] {
	return pulumix.Output[*WorkspaceKey]{
		OutputState: o.OutputState,
	}
}

// Specifies if the workspace should be encrypted with this key.
//
// > **Note:** Only one key can actively encrypt a workspace. When performing a key rotation, setting a new key as the active key will disable existing keys.
func (o WorkspaceKeyOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v *WorkspaceKey) pulumi.BoolOutput { return v.Active }).(pulumi.BoolOutput)
}

// Specifies the name of the workspace key. Should match the name of the key in the synapse workspace.
func (o WorkspaceKeyOutput) CustomerManagedKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceKey) pulumi.StringOutput { return v.CustomerManagedKeyName }).(pulumi.StringOutput)
}

// The Azure Key Vault Key Versionless ID to be used as the Customer Managed Key (CMK) for double encryption
func (o WorkspaceKeyOutput) CustomerManagedKeyVersionlessId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceKey) pulumi.StringPtrOutput { return v.CustomerManagedKeyVersionlessId }).(pulumi.StringPtrOutput)
}

// The ID of the Synapse Workspace where the encryption key should be configured.
func (o WorkspaceKeyOutput) SynapseWorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceKey) pulumi.StringOutput { return v.SynapseWorkspaceId }).(pulumi.StringOutput)
}

type WorkspaceKeyArrayOutput struct{ *pulumi.OutputState }

func (WorkspaceKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkspaceKey)(nil)).Elem()
}

func (o WorkspaceKeyArrayOutput) ToWorkspaceKeyArrayOutput() WorkspaceKeyArrayOutput {
	return o
}

func (o WorkspaceKeyArrayOutput) ToWorkspaceKeyArrayOutputWithContext(ctx context.Context) WorkspaceKeyArrayOutput {
	return o
}

func (o WorkspaceKeyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*WorkspaceKey] {
	return pulumix.Output[[]*WorkspaceKey]{
		OutputState: o.OutputState,
	}
}

func (o WorkspaceKeyArrayOutput) Index(i pulumi.IntInput) WorkspaceKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkspaceKey {
		return vs[0].([]*WorkspaceKey)[vs[1].(int)]
	}).(WorkspaceKeyOutput)
}

type WorkspaceKeyMapOutput struct{ *pulumi.OutputState }

func (WorkspaceKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkspaceKey)(nil)).Elem()
}

func (o WorkspaceKeyMapOutput) ToWorkspaceKeyMapOutput() WorkspaceKeyMapOutput {
	return o
}

func (o WorkspaceKeyMapOutput) ToWorkspaceKeyMapOutputWithContext(ctx context.Context) WorkspaceKeyMapOutput {
	return o
}

func (o WorkspaceKeyMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*WorkspaceKey] {
	return pulumix.Output[map[string]*WorkspaceKey]{
		OutputState: o.OutputState,
	}
}

func (o WorkspaceKeyMapOutput) MapIndex(k pulumi.StringInput) WorkspaceKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkspaceKey {
		return vs[0].(map[string]*WorkspaceKey)[vs[1].(string)]
	}).(WorkspaceKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceKeyInput)(nil)).Elem(), &WorkspaceKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceKeyArrayInput)(nil)).Elem(), WorkspaceKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceKeyMapInput)(nil)).Elem(), WorkspaceKeyMap{})
	pulumi.RegisterOutputType(WorkspaceKeyOutput{})
	pulumi.RegisterOutputType(WorkspaceKeyArrayOutput{})
	pulumi.RegisterOutputType(WorkspaceKeyMapOutput{})
}
