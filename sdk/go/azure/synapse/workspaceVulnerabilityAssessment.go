// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package synapse

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages the Vulnerability Assessment for a Synapse Workspace.
//
// ## Import
//
// Synapse Workspace Vulnerability Assessment can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:synapse/workspaceVulnerabilityAssessment:WorkspaceVulnerabilityAssessment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Synapse/workspaces/workspace1/vulnerabilityAssessments/default
//
// ```
type WorkspaceVulnerabilityAssessment struct {
	pulumi.CustomResourceState

	// The recurring scans settings. The `recurringScans` block supports fields documented below.
	RecurringScans WorkspaceVulnerabilityAssessmentRecurringScansOutput `pulumi:"recurringScans"`
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.
	StorageAccountAccessKey pulumi.StringPtrOutput `pulumi:"storageAccountAccessKey"`
	// A blob storage container path to hold the scan results (e.g. <https://example.blob.core.windows.net/VaScans/>).
	StorageContainerPath pulumi.StringOutput `pulumi:"storageContainerPath"`
	// A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.
	StorageContainerSasKey pulumi.StringPtrOutput `pulumi:"storageContainerSasKey"`
	// The ID of the security alert policy of the Synapse Workspace. Changing this forces a new resource to be created.
	WorkspaceSecurityAlertPolicyId pulumi.StringOutput `pulumi:"workspaceSecurityAlertPolicyId"`
}

// NewWorkspaceVulnerabilityAssessment registers a new resource with the given unique name, arguments, and options.
func NewWorkspaceVulnerabilityAssessment(ctx *pulumi.Context,
	name string, args *WorkspaceVulnerabilityAssessmentArgs, opts ...pulumi.ResourceOption) (*WorkspaceVulnerabilityAssessment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StorageContainerPath == nil {
		return nil, errors.New("invalid value for required argument 'StorageContainerPath'")
	}
	if args.WorkspaceSecurityAlertPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceSecurityAlertPolicyId'")
	}
	if args.StorageAccountAccessKey != nil {
		args.StorageAccountAccessKey = pulumi.ToSecret(args.StorageAccountAccessKey).(pulumi.StringPtrInput)
	}
	if args.StorageContainerSasKey != nil {
		args.StorageContainerSasKey = pulumi.ToSecret(args.StorageContainerSasKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"storageAccountAccessKey",
		"storageContainerSasKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkspaceVulnerabilityAssessment
	err := ctx.RegisterResource("azure:synapse/workspaceVulnerabilityAssessment:WorkspaceVulnerabilityAssessment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspaceVulnerabilityAssessment gets an existing WorkspaceVulnerabilityAssessment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspaceVulnerabilityAssessment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceVulnerabilityAssessmentState, opts ...pulumi.ResourceOption) (*WorkspaceVulnerabilityAssessment, error) {
	var resource WorkspaceVulnerabilityAssessment
	err := ctx.ReadResource("azure:synapse/workspaceVulnerabilityAssessment:WorkspaceVulnerabilityAssessment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkspaceVulnerabilityAssessment resources.
type workspaceVulnerabilityAssessmentState struct {
	// The recurring scans settings. The `recurringScans` block supports fields documented below.
	RecurringScans *WorkspaceVulnerabilityAssessmentRecurringScans `pulumi:"recurringScans"`
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// A blob storage container path to hold the scan results (e.g. <https://example.blob.core.windows.net/VaScans/>).
	StorageContainerPath *string `pulumi:"storageContainerPath"`
	// A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.
	StorageContainerSasKey *string `pulumi:"storageContainerSasKey"`
	// The ID of the security alert policy of the Synapse Workspace. Changing this forces a new resource to be created.
	WorkspaceSecurityAlertPolicyId *string `pulumi:"workspaceSecurityAlertPolicyId"`
}

type WorkspaceVulnerabilityAssessmentState struct {
	// The recurring scans settings. The `recurringScans` block supports fields documented below.
	RecurringScans WorkspaceVulnerabilityAssessmentRecurringScansPtrInput
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.
	StorageAccountAccessKey pulumi.StringPtrInput
	// A blob storage container path to hold the scan results (e.g. <https://example.blob.core.windows.net/VaScans/>).
	StorageContainerPath pulumi.StringPtrInput
	// A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.
	StorageContainerSasKey pulumi.StringPtrInput
	// The ID of the security alert policy of the Synapse Workspace. Changing this forces a new resource to be created.
	WorkspaceSecurityAlertPolicyId pulumi.StringPtrInput
}

func (WorkspaceVulnerabilityAssessmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceVulnerabilityAssessmentState)(nil)).Elem()
}

type workspaceVulnerabilityAssessmentArgs struct {
	// The recurring scans settings. The `recurringScans` block supports fields documented below.
	RecurringScans *WorkspaceVulnerabilityAssessmentRecurringScans `pulumi:"recurringScans"`
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// A blob storage container path to hold the scan results (e.g. <https://example.blob.core.windows.net/VaScans/>).
	StorageContainerPath string `pulumi:"storageContainerPath"`
	// A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.
	StorageContainerSasKey *string `pulumi:"storageContainerSasKey"`
	// The ID of the security alert policy of the Synapse Workspace. Changing this forces a new resource to be created.
	WorkspaceSecurityAlertPolicyId string `pulumi:"workspaceSecurityAlertPolicyId"`
}

// The set of arguments for constructing a WorkspaceVulnerabilityAssessment resource.
type WorkspaceVulnerabilityAssessmentArgs struct {
	// The recurring scans settings. The `recurringScans` block supports fields documented below.
	RecurringScans WorkspaceVulnerabilityAssessmentRecurringScansPtrInput
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.
	StorageAccountAccessKey pulumi.StringPtrInput
	// A blob storage container path to hold the scan results (e.g. <https://example.blob.core.windows.net/VaScans/>).
	StorageContainerPath pulumi.StringInput
	// A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.
	StorageContainerSasKey pulumi.StringPtrInput
	// The ID of the security alert policy of the Synapse Workspace. Changing this forces a new resource to be created.
	WorkspaceSecurityAlertPolicyId pulumi.StringInput
}

func (WorkspaceVulnerabilityAssessmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceVulnerabilityAssessmentArgs)(nil)).Elem()
}

type WorkspaceVulnerabilityAssessmentInput interface {
	pulumi.Input

	ToWorkspaceVulnerabilityAssessmentOutput() WorkspaceVulnerabilityAssessmentOutput
	ToWorkspaceVulnerabilityAssessmentOutputWithContext(ctx context.Context) WorkspaceVulnerabilityAssessmentOutput
}

func (*WorkspaceVulnerabilityAssessment) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceVulnerabilityAssessment)(nil)).Elem()
}

func (i *WorkspaceVulnerabilityAssessment) ToWorkspaceVulnerabilityAssessmentOutput() WorkspaceVulnerabilityAssessmentOutput {
	return i.ToWorkspaceVulnerabilityAssessmentOutputWithContext(context.Background())
}

func (i *WorkspaceVulnerabilityAssessment) ToWorkspaceVulnerabilityAssessmentOutputWithContext(ctx context.Context) WorkspaceVulnerabilityAssessmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceVulnerabilityAssessmentOutput)
}

func (i *WorkspaceVulnerabilityAssessment) ToOutput(ctx context.Context) pulumix.Output[*WorkspaceVulnerabilityAssessment] {
	return pulumix.Output[*WorkspaceVulnerabilityAssessment]{
		OutputState: i.ToWorkspaceVulnerabilityAssessmentOutputWithContext(ctx).OutputState,
	}
}

// WorkspaceVulnerabilityAssessmentArrayInput is an input type that accepts WorkspaceVulnerabilityAssessmentArray and WorkspaceVulnerabilityAssessmentArrayOutput values.
// You can construct a concrete instance of `WorkspaceVulnerabilityAssessmentArrayInput` via:
//
//	WorkspaceVulnerabilityAssessmentArray{ WorkspaceVulnerabilityAssessmentArgs{...} }
type WorkspaceVulnerabilityAssessmentArrayInput interface {
	pulumi.Input

	ToWorkspaceVulnerabilityAssessmentArrayOutput() WorkspaceVulnerabilityAssessmentArrayOutput
	ToWorkspaceVulnerabilityAssessmentArrayOutputWithContext(context.Context) WorkspaceVulnerabilityAssessmentArrayOutput
}

type WorkspaceVulnerabilityAssessmentArray []WorkspaceVulnerabilityAssessmentInput

func (WorkspaceVulnerabilityAssessmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkspaceVulnerabilityAssessment)(nil)).Elem()
}

func (i WorkspaceVulnerabilityAssessmentArray) ToWorkspaceVulnerabilityAssessmentArrayOutput() WorkspaceVulnerabilityAssessmentArrayOutput {
	return i.ToWorkspaceVulnerabilityAssessmentArrayOutputWithContext(context.Background())
}

func (i WorkspaceVulnerabilityAssessmentArray) ToWorkspaceVulnerabilityAssessmentArrayOutputWithContext(ctx context.Context) WorkspaceVulnerabilityAssessmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceVulnerabilityAssessmentArrayOutput)
}

func (i WorkspaceVulnerabilityAssessmentArray) ToOutput(ctx context.Context) pulumix.Output[[]*WorkspaceVulnerabilityAssessment] {
	return pulumix.Output[[]*WorkspaceVulnerabilityAssessment]{
		OutputState: i.ToWorkspaceVulnerabilityAssessmentArrayOutputWithContext(ctx).OutputState,
	}
}

// WorkspaceVulnerabilityAssessmentMapInput is an input type that accepts WorkspaceVulnerabilityAssessmentMap and WorkspaceVulnerabilityAssessmentMapOutput values.
// You can construct a concrete instance of `WorkspaceVulnerabilityAssessmentMapInput` via:
//
//	WorkspaceVulnerabilityAssessmentMap{ "key": WorkspaceVulnerabilityAssessmentArgs{...} }
type WorkspaceVulnerabilityAssessmentMapInput interface {
	pulumi.Input

	ToWorkspaceVulnerabilityAssessmentMapOutput() WorkspaceVulnerabilityAssessmentMapOutput
	ToWorkspaceVulnerabilityAssessmentMapOutputWithContext(context.Context) WorkspaceVulnerabilityAssessmentMapOutput
}

type WorkspaceVulnerabilityAssessmentMap map[string]WorkspaceVulnerabilityAssessmentInput

func (WorkspaceVulnerabilityAssessmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkspaceVulnerabilityAssessment)(nil)).Elem()
}

func (i WorkspaceVulnerabilityAssessmentMap) ToWorkspaceVulnerabilityAssessmentMapOutput() WorkspaceVulnerabilityAssessmentMapOutput {
	return i.ToWorkspaceVulnerabilityAssessmentMapOutputWithContext(context.Background())
}

func (i WorkspaceVulnerabilityAssessmentMap) ToWorkspaceVulnerabilityAssessmentMapOutputWithContext(ctx context.Context) WorkspaceVulnerabilityAssessmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceVulnerabilityAssessmentMapOutput)
}

func (i WorkspaceVulnerabilityAssessmentMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*WorkspaceVulnerabilityAssessment] {
	return pulumix.Output[map[string]*WorkspaceVulnerabilityAssessment]{
		OutputState: i.ToWorkspaceVulnerabilityAssessmentMapOutputWithContext(ctx).OutputState,
	}
}

type WorkspaceVulnerabilityAssessmentOutput struct{ *pulumi.OutputState }

func (WorkspaceVulnerabilityAssessmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceVulnerabilityAssessment)(nil)).Elem()
}

func (o WorkspaceVulnerabilityAssessmentOutput) ToWorkspaceVulnerabilityAssessmentOutput() WorkspaceVulnerabilityAssessmentOutput {
	return o
}

func (o WorkspaceVulnerabilityAssessmentOutput) ToWorkspaceVulnerabilityAssessmentOutputWithContext(ctx context.Context) WorkspaceVulnerabilityAssessmentOutput {
	return o
}

func (o WorkspaceVulnerabilityAssessmentOutput) ToOutput(ctx context.Context) pulumix.Output[*WorkspaceVulnerabilityAssessment] {
	return pulumix.Output[*WorkspaceVulnerabilityAssessment]{
		OutputState: o.OutputState,
	}
}

// The recurring scans settings. The `recurringScans` block supports fields documented below.
func (o WorkspaceVulnerabilityAssessmentOutput) RecurringScans() WorkspaceVulnerabilityAssessmentRecurringScansOutput {
	return o.ApplyT(func(v *WorkspaceVulnerabilityAssessment) WorkspaceVulnerabilityAssessmentRecurringScansOutput {
		return v.RecurringScans
	}).(WorkspaceVulnerabilityAssessmentRecurringScansOutput)
}

// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.
func (o WorkspaceVulnerabilityAssessmentOutput) StorageAccountAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceVulnerabilityAssessment) pulumi.StringPtrOutput { return v.StorageAccountAccessKey }).(pulumi.StringPtrOutput)
}

// A blob storage container path to hold the scan results (e.g. <https://example.blob.core.windows.net/VaScans/>).
func (o WorkspaceVulnerabilityAssessmentOutput) StorageContainerPath() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceVulnerabilityAssessment) pulumi.StringOutput { return v.StorageContainerPath }).(pulumi.StringOutput)
}

// A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.
func (o WorkspaceVulnerabilityAssessmentOutput) StorageContainerSasKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceVulnerabilityAssessment) pulumi.StringPtrOutput { return v.StorageContainerSasKey }).(pulumi.StringPtrOutput)
}

// The ID of the security alert policy of the Synapse Workspace. Changing this forces a new resource to be created.
func (o WorkspaceVulnerabilityAssessmentOutput) WorkspaceSecurityAlertPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceVulnerabilityAssessment) pulumi.StringOutput { return v.WorkspaceSecurityAlertPolicyId }).(pulumi.StringOutput)
}

type WorkspaceVulnerabilityAssessmentArrayOutput struct{ *pulumi.OutputState }

func (WorkspaceVulnerabilityAssessmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkspaceVulnerabilityAssessment)(nil)).Elem()
}

func (o WorkspaceVulnerabilityAssessmentArrayOutput) ToWorkspaceVulnerabilityAssessmentArrayOutput() WorkspaceVulnerabilityAssessmentArrayOutput {
	return o
}

func (o WorkspaceVulnerabilityAssessmentArrayOutput) ToWorkspaceVulnerabilityAssessmentArrayOutputWithContext(ctx context.Context) WorkspaceVulnerabilityAssessmentArrayOutput {
	return o
}

func (o WorkspaceVulnerabilityAssessmentArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*WorkspaceVulnerabilityAssessment] {
	return pulumix.Output[[]*WorkspaceVulnerabilityAssessment]{
		OutputState: o.OutputState,
	}
}

func (o WorkspaceVulnerabilityAssessmentArrayOutput) Index(i pulumi.IntInput) WorkspaceVulnerabilityAssessmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkspaceVulnerabilityAssessment {
		return vs[0].([]*WorkspaceVulnerabilityAssessment)[vs[1].(int)]
	}).(WorkspaceVulnerabilityAssessmentOutput)
}

type WorkspaceVulnerabilityAssessmentMapOutput struct{ *pulumi.OutputState }

func (WorkspaceVulnerabilityAssessmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkspaceVulnerabilityAssessment)(nil)).Elem()
}

func (o WorkspaceVulnerabilityAssessmentMapOutput) ToWorkspaceVulnerabilityAssessmentMapOutput() WorkspaceVulnerabilityAssessmentMapOutput {
	return o
}

func (o WorkspaceVulnerabilityAssessmentMapOutput) ToWorkspaceVulnerabilityAssessmentMapOutputWithContext(ctx context.Context) WorkspaceVulnerabilityAssessmentMapOutput {
	return o
}

func (o WorkspaceVulnerabilityAssessmentMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*WorkspaceVulnerabilityAssessment] {
	return pulumix.Output[map[string]*WorkspaceVulnerabilityAssessment]{
		OutputState: o.OutputState,
	}
}

func (o WorkspaceVulnerabilityAssessmentMapOutput) MapIndex(k pulumi.StringInput) WorkspaceVulnerabilityAssessmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkspaceVulnerabilityAssessment {
		return vs[0].(map[string]*WorkspaceVulnerabilityAssessment)[vs[1].(string)]
	}).(WorkspaceVulnerabilityAssessmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceVulnerabilityAssessmentInput)(nil)).Elem(), &WorkspaceVulnerabilityAssessment{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceVulnerabilityAssessmentArrayInput)(nil)).Elem(), WorkspaceVulnerabilityAssessmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceVulnerabilityAssessmentMapInput)(nil)).Elem(), WorkspaceVulnerabilityAssessmentMap{})
	pulumi.RegisterOutputType(WorkspaceVulnerabilityAssessmentOutput{})
	pulumi.RegisterOutputType(WorkspaceVulnerabilityAssessmentArrayOutput{})
	pulumi.RegisterOutputType(WorkspaceVulnerabilityAssessmentMapOutput{})
}
