// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fabric

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type CapacitySku struct {
	// The name of the SKU to use for the Fabric Capacity. Possible values are `F2`, `F4`, `F8`, `F16`, `F32`, `F64`, `F128`, `F256`, `F512`, `F1024`, `F2048`.
	Name string `pulumi:"name"`
	// The tier of the SKU to use for the Fabric Capacity. The only possible value is `Fabric`.
	Tier string `pulumi:"tier"`
}

// CapacitySkuInput is an input type that accepts CapacitySkuArgs and CapacitySkuOutput values.
// You can construct a concrete instance of `CapacitySkuInput` via:
//
//	CapacitySkuArgs{...}
type CapacitySkuInput interface {
	pulumi.Input

	ToCapacitySkuOutput() CapacitySkuOutput
	ToCapacitySkuOutputWithContext(context.Context) CapacitySkuOutput
}

type CapacitySkuArgs struct {
	// The name of the SKU to use for the Fabric Capacity. Possible values are `F2`, `F4`, `F8`, `F16`, `F32`, `F64`, `F128`, `F256`, `F512`, `F1024`, `F2048`.
	Name pulumi.StringInput `pulumi:"name"`
	// The tier of the SKU to use for the Fabric Capacity. The only possible value is `Fabric`.
	Tier pulumi.StringInput `pulumi:"tier"`
}

func (CapacitySkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacitySku)(nil)).Elem()
}

func (i CapacitySkuArgs) ToCapacitySkuOutput() CapacitySkuOutput {
	return i.ToCapacitySkuOutputWithContext(context.Background())
}

func (i CapacitySkuArgs) ToCapacitySkuOutputWithContext(ctx context.Context) CapacitySkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacitySkuOutput)
}

func (i CapacitySkuArgs) ToCapacitySkuPtrOutput() CapacitySkuPtrOutput {
	return i.ToCapacitySkuPtrOutputWithContext(context.Background())
}

func (i CapacitySkuArgs) ToCapacitySkuPtrOutputWithContext(ctx context.Context) CapacitySkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacitySkuOutput).ToCapacitySkuPtrOutputWithContext(ctx)
}

// CapacitySkuPtrInput is an input type that accepts CapacitySkuArgs, CapacitySkuPtr and CapacitySkuPtrOutput values.
// You can construct a concrete instance of `CapacitySkuPtrInput` via:
//
//	        CapacitySkuArgs{...}
//
//	or:
//
//	        nil
type CapacitySkuPtrInput interface {
	pulumi.Input

	ToCapacitySkuPtrOutput() CapacitySkuPtrOutput
	ToCapacitySkuPtrOutputWithContext(context.Context) CapacitySkuPtrOutput
}

type capacitySkuPtrType CapacitySkuArgs

func CapacitySkuPtr(v *CapacitySkuArgs) CapacitySkuPtrInput {
	return (*capacitySkuPtrType)(v)
}

func (*capacitySkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacitySku)(nil)).Elem()
}

func (i *capacitySkuPtrType) ToCapacitySkuPtrOutput() CapacitySkuPtrOutput {
	return i.ToCapacitySkuPtrOutputWithContext(context.Background())
}

func (i *capacitySkuPtrType) ToCapacitySkuPtrOutputWithContext(ctx context.Context) CapacitySkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacitySkuPtrOutput)
}

type CapacitySkuOutput struct{ *pulumi.OutputState }

func (CapacitySkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacitySku)(nil)).Elem()
}

func (o CapacitySkuOutput) ToCapacitySkuOutput() CapacitySkuOutput {
	return o
}

func (o CapacitySkuOutput) ToCapacitySkuOutputWithContext(ctx context.Context) CapacitySkuOutput {
	return o
}

func (o CapacitySkuOutput) ToCapacitySkuPtrOutput() CapacitySkuPtrOutput {
	return o.ToCapacitySkuPtrOutputWithContext(context.Background())
}

func (o CapacitySkuOutput) ToCapacitySkuPtrOutputWithContext(ctx context.Context) CapacitySkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CapacitySku) *CapacitySku {
		return &v
	}).(CapacitySkuPtrOutput)
}

// The name of the SKU to use for the Fabric Capacity. Possible values are `F2`, `F4`, `F8`, `F16`, `F32`, `F64`, `F128`, `F256`, `F512`, `F1024`, `F2048`.
func (o CapacitySkuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CapacitySku) string { return v.Name }).(pulumi.StringOutput)
}

// The tier of the SKU to use for the Fabric Capacity. The only possible value is `Fabric`.
func (o CapacitySkuOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v CapacitySku) string { return v.Tier }).(pulumi.StringOutput)
}

type CapacitySkuPtrOutput struct{ *pulumi.OutputState }

func (CapacitySkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacitySku)(nil)).Elem()
}

func (o CapacitySkuPtrOutput) ToCapacitySkuPtrOutput() CapacitySkuPtrOutput {
	return o
}

func (o CapacitySkuPtrOutput) ToCapacitySkuPtrOutputWithContext(ctx context.Context) CapacitySkuPtrOutput {
	return o
}

func (o CapacitySkuPtrOutput) Elem() CapacitySkuOutput {
	return o.ApplyT(func(v *CapacitySku) CapacitySku {
		if v != nil {
			return *v
		}
		var ret CapacitySku
		return ret
	}).(CapacitySkuOutput)
}

// The name of the SKU to use for the Fabric Capacity. Possible values are `F2`, `F4`, `F8`, `F16`, `F32`, `F64`, `F128`, `F256`, `F512`, `F1024`, `F2048`.
func (o CapacitySkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapacitySku) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The tier of the SKU to use for the Fabric Capacity. The only possible value is `Fabric`.
func (o CapacitySkuPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapacitySku) *string {
		if v == nil {
			return nil
		}
		return &v.Tier
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CapacitySkuInput)(nil)).Elem(), CapacitySkuArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapacitySkuPtrInput)(nil)).Elem(), CapacitySkuArgs{})
	pulumi.RegisterOutputType(CapacitySkuOutput{})
	pulumi.RegisterOutputType(CapacitySkuPtrOutput{})
}
