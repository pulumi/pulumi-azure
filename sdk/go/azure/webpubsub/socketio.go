// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package webpubsub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Web PubSub Service for Socket.IO.
//
// ## Import
//
// Web PubSub Service for Socket.IOs can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:webpubsub/socketio:Socketio example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.SignalRService/webPubSub/pubsub1
// ```
type Socketio struct {
	pulumi.CustomResourceState

	// Whether Azure Active Directory authentication is enabled. Defaults to `true`.
	AadAuthEnabled pulumi.BoolPtrOutput `pulumi:"aadAuthEnabled"`
	// The publicly accessible IP address of the Web PubSub Service.
	ExternalIp pulumi.StringOutput `pulumi:"externalIp"`
	// The FQDN of the Web PubSub Service.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// An `identity` block as defined below.
	Identity SocketioIdentityPtrOutput `pulumi:"identity"`
	// Whether the connectivity log category for live trace is enabled. Defaults to `true`.
	LiveTraceConnectivityLogsEnabled pulumi.BoolPtrOutput `pulumi:"liveTraceConnectivityLogsEnabled"`
	// Whether the live trace tool is enabled. Defaults to `true`.
	LiveTraceEnabled pulumi.BoolPtrOutput `pulumi:"liveTraceEnabled"`
	// Whether the HTTP request log category for live trace is enabled. Defaults to `true`.
	LiveTraceHttpRequestLogsEnabled pulumi.BoolPtrOutput `pulumi:"liveTraceHttpRequestLogsEnabled"`
	// Whether the messaging log category for live trace is enabled. Defaults to `true`.
	LiveTraceMessagingLogsEnabled pulumi.BoolPtrOutput `pulumi:"liveTraceMessagingLogsEnabled"`
	// Whether local authentication using an access key is enabled. Defaults to `true`.
	LocalAuthEnabled pulumi.BoolPtrOutput `pulumi:"localAuthEnabled"`
	// The Azure Region where the Web PubSub Service should exist. Changing this forces a new Web PubSub Service to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name which should be used for this Web PubSub Service. Changing this forces a new Web PubSub Service to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The primary access key for the Web PubSub Service.
	PrimaryAccessKey pulumi.StringOutput `pulumi:"primaryAccessKey"`
	// The primary connection string for the Web PubSub Service.
	PrimaryConnectionString pulumi.StringOutput `pulumi:"primaryConnectionString"`
	// Whether public network access is enabled. Defaults to `Enabled`. Possible values are `Enabled` and `Disabled`.
	//
	// > **Note:** `publicNetworkAccess` cannot be set to `Disabled` when `sku` is `Free_F1`.
	PublicNetworkAccess pulumi.StringPtrOutput `pulumi:"publicNetworkAccess"`
	// The publicly accessible port for client-side usage of the Web PubSub Service.
	PublicPort pulumi.IntOutput `pulumi:"publicPort"`
	// The name of the Resource Group where the Web PubSub Service should exist. Changing this forces a new Web PubSub Service to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The secondary access key for the Web PubSub Service.
	SecondaryAccessKey pulumi.StringOutput `pulumi:"secondaryAccessKey"`
	// The secondary connection string for the Web PubSub Service.
	SecondaryConnectionString pulumi.StringOutput `pulumi:"secondaryConnectionString"`
	// The publicly accessible port for server-side usage of the Web PubSub Service.
	ServerPort pulumi.IntOutput `pulumi:"serverPort"`
	// The service mode of this Web PubSub Service. Defaults to `Default`. Possible values are `Default` and `Serverless`.
	ServiceMode pulumi.StringPtrOutput `pulumi:"serviceMode"`
	// The SKU to use for this Web PubSub Service. Possible values are `Free_F1`, `Standard_S1`, `Premium_P1`, and `Premium_P2`.
	Sku SocketioSkuOutput `pulumi:"sku"`
	// A mapping of tags which should be assigned to the Web PubSub Service.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Whether the service should request a client certificate during a TLS handshake. Defaults to `false`.
	//
	// > **Note:** `tlsClientCertEnabled` cannot be set to `true` when `sku` is `Free_F1`.
	TlsClientCertEnabled pulumi.BoolPtrOutput `pulumi:"tlsClientCertEnabled"`
}

// NewSocketio registers a new resource with the given unique name, arguments, and options.
func NewSocketio(ctx *pulumi.Context,
	name string, args *SocketioArgs, opts ...pulumi.ResourceOption) (*Socketio, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Sku == nil {
		return nil, errors.New("invalid value for required argument 'Sku'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"primaryAccessKey",
		"primaryConnectionString",
		"secondaryAccessKey",
		"secondaryConnectionString",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Socketio
	err := ctx.RegisterResource("azure:webpubsub/socketio:Socketio", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSocketio gets an existing Socketio resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSocketio(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SocketioState, opts ...pulumi.ResourceOption) (*Socketio, error) {
	var resource Socketio
	err := ctx.ReadResource("azure:webpubsub/socketio:Socketio", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Socketio resources.
type socketioState struct {
	// Whether Azure Active Directory authentication is enabled. Defaults to `true`.
	AadAuthEnabled *bool `pulumi:"aadAuthEnabled"`
	// The publicly accessible IP address of the Web PubSub Service.
	ExternalIp *string `pulumi:"externalIp"`
	// The FQDN of the Web PubSub Service.
	Hostname *string `pulumi:"hostname"`
	// An `identity` block as defined below.
	Identity *SocketioIdentity `pulumi:"identity"`
	// Whether the connectivity log category for live trace is enabled. Defaults to `true`.
	LiveTraceConnectivityLogsEnabled *bool `pulumi:"liveTraceConnectivityLogsEnabled"`
	// Whether the live trace tool is enabled. Defaults to `true`.
	LiveTraceEnabled *bool `pulumi:"liveTraceEnabled"`
	// Whether the HTTP request log category for live trace is enabled. Defaults to `true`.
	LiveTraceHttpRequestLogsEnabled *bool `pulumi:"liveTraceHttpRequestLogsEnabled"`
	// Whether the messaging log category for live trace is enabled. Defaults to `true`.
	LiveTraceMessagingLogsEnabled *bool `pulumi:"liveTraceMessagingLogsEnabled"`
	// Whether local authentication using an access key is enabled. Defaults to `true`.
	LocalAuthEnabled *bool `pulumi:"localAuthEnabled"`
	// The Azure Region where the Web PubSub Service should exist. Changing this forces a new Web PubSub Service to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Web PubSub Service. Changing this forces a new Web PubSub Service to be created.
	Name *string `pulumi:"name"`
	// The primary access key for the Web PubSub Service.
	PrimaryAccessKey *string `pulumi:"primaryAccessKey"`
	// The primary connection string for the Web PubSub Service.
	PrimaryConnectionString *string `pulumi:"primaryConnectionString"`
	// Whether public network access is enabled. Defaults to `Enabled`. Possible values are `Enabled` and `Disabled`.
	//
	// > **Note:** `publicNetworkAccess` cannot be set to `Disabled` when `sku` is `Free_F1`.
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
	// The publicly accessible port for client-side usage of the Web PubSub Service.
	PublicPort *int `pulumi:"publicPort"`
	// The name of the Resource Group where the Web PubSub Service should exist. Changing this forces a new Web PubSub Service to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The secondary access key for the Web PubSub Service.
	SecondaryAccessKey *string `pulumi:"secondaryAccessKey"`
	// The secondary connection string for the Web PubSub Service.
	SecondaryConnectionString *string `pulumi:"secondaryConnectionString"`
	// The publicly accessible port for server-side usage of the Web PubSub Service.
	ServerPort *int `pulumi:"serverPort"`
	// The service mode of this Web PubSub Service. Defaults to `Default`. Possible values are `Default` and `Serverless`.
	ServiceMode *string `pulumi:"serviceMode"`
	// The SKU to use for this Web PubSub Service. Possible values are `Free_F1`, `Standard_S1`, `Premium_P1`, and `Premium_P2`.
	Sku *SocketioSku `pulumi:"sku"`
	// A mapping of tags which should be assigned to the Web PubSub Service.
	Tags map[string]string `pulumi:"tags"`
	// Whether the service should request a client certificate during a TLS handshake. Defaults to `false`.
	//
	// > **Note:** `tlsClientCertEnabled` cannot be set to `true` when `sku` is `Free_F1`.
	TlsClientCertEnabled *bool `pulumi:"tlsClientCertEnabled"`
}

type SocketioState struct {
	// Whether Azure Active Directory authentication is enabled. Defaults to `true`.
	AadAuthEnabled pulumi.BoolPtrInput
	// The publicly accessible IP address of the Web PubSub Service.
	ExternalIp pulumi.StringPtrInput
	// The FQDN of the Web PubSub Service.
	Hostname pulumi.StringPtrInput
	// An `identity` block as defined below.
	Identity SocketioIdentityPtrInput
	// Whether the connectivity log category for live trace is enabled. Defaults to `true`.
	LiveTraceConnectivityLogsEnabled pulumi.BoolPtrInput
	// Whether the live trace tool is enabled. Defaults to `true`.
	LiveTraceEnabled pulumi.BoolPtrInput
	// Whether the HTTP request log category for live trace is enabled. Defaults to `true`.
	LiveTraceHttpRequestLogsEnabled pulumi.BoolPtrInput
	// Whether the messaging log category for live trace is enabled. Defaults to `true`.
	LiveTraceMessagingLogsEnabled pulumi.BoolPtrInput
	// Whether local authentication using an access key is enabled. Defaults to `true`.
	LocalAuthEnabled pulumi.BoolPtrInput
	// The Azure Region where the Web PubSub Service should exist. Changing this forces a new Web PubSub Service to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Web PubSub Service. Changing this forces a new Web PubSub Service to be created.
	Name pulumi.StringPtrInput
	// The primary access key for the Web PubSub Service.
	PrimaryAccessKey pulumi.StringPtrInput
	// The primary connection string for the Web PubSub Service.
	PrimaryConnectionString pulumi.StringPtrInput
	// Whether public network access is enabled. Defaults to `Enabled`. Possible values are `Enabled` and `Disabled`.
	//
	// > **Note:** `publicNetworkAccess` cannot be set to `Disabled` when `sku` is `Free_F1`.
	PublicNetworkAccess pulumi.StringPtrInput
	// The publicly accessible port for client-side usage of the Web PubSub Service.
	PublicPort pulumi.IntPtrInput
	// The name of the Resource Group where the Web PubSub Service should exist. Changing this forces a new Web PubSub Service to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The secondary access key for the Web PubSub Service.
	SecondaryAccessKey pulumi.StringPtrInput
	// The secondary connection string for the Web PubSub Service.
	SecondaryConnectionString pulumi.StringPtrInput
	// The publicly accessible port for server-side usage of the Web PubSub Service.
	ServerPort pulumi.IntPtrInput
	// The service mode of this Web PubSub Service. Defaults to `Default`. Possible values are `Default` and `Serverless`.
	ServiceMode pulumi.StringPtrInput
	// The SKU to use for this Web PubSub Service. Possible values are `Free_F1`, `Standard_S1`, `Premium_P1`, and `Premium_P2`.
	Sku SocketioSkuPtrInput
	// A mapping of tags which should be assigned to the Web PubSub Service.
	Tags pulumi.StringMapInput
	// Whether the service should request a client certificate during a TLS handshake. Defaults to `false`.
	//
	// > **Note:** `tlsClientCertEnabled` cannot be set to `true` when `sku` is `Free_F1`.
	TlsClientCertEnabled pulumi.BoolPtrInput
}

func (SocketioState) ElementType() reflect.Type {
	return reflect.TypeOf((*socketioState)(nil)).Elem()
}

type socketioArgs struct {
	// Whether Azure Active Directory authentication is enabled. Defaults to `true`.
	AadAuthEnabled *bool `pulumi:"aadAuthEnabled"`
	// An `identity` block as defined below.
	Identity *SocketioIdentity `pulumi:"identity"`
	// Whether the connectivity log category for live trace is enabled. Defaults to `true`.
	LiveTraceConnectivityLogsEnabled *bool `pulumi:"liveTraceConnectivityLogsEnabled"`
	// Whether the live trace tool is enabled. Defaults to `true`.
	LiveTraceEnabled *bool `pulumi:"liveTraceEnabled"`
	// Whether the HTTP request log category for live trace is enabled. Defaults to `true`.
	LiveTraceHttpRequestLogsEnabled *bool `pulumi:"liveTraceHttpRequestLogsEnabled"`
	// Whether the messaging log category for live trace is enabled. Defaults to `true`.
	LiveTraceMessagingLogsEnabled *bool `pulumi:"liveTraceMessagingLogsEnabled"`
	// Whether local authentication using an access key is enabled. Defaults to `true`.
	LocalAuthEnabled *bool `pulumi:"localAuthEnabled"`
	// The Azure Region where the Web PubSub Service should exist. Changing this forces a new Web PubSub Service to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Web PubSub Service. Changing this forces a new Web PubSub Service to be created.
	Name *string `pulumi:"name"`
	// Whether public network access is enabled. Defaults to `Enabled`. Possible values are `Enabled` and `Disabled`.
	//
	// > **Note:** `publicNetworkAccess` cannot be set to `Disabled` when `sku` is `Free_F1`.
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
	// The name of the Resource Group where the Web PubSub Service should exist. Changing this forces a new Web PubSub Service to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The service mode of this Web PubSub Service. Defaults to `Default`. Possible values are `Default` and `Serverless`.
	ServiceMode *string `pulumi:"serviceMode"`
	// The SKU to use for this Web PubSub Service. Possible values are `Free_F1`, `Standard_S1`, `Premium_P1`, and `Premium_P2`.
	Sku SocketioSku `pulumi:"sku"`
	// A mapping of tags which should be assigned to the Web PubSub Service.
	Tags map[string]string `pulumi:"tags"`
	// Whether the service should request a client certificate during a TLS handshake. Defaults to `false`.
	//
	// > **Note:** `tlsClientCertEnabled` cannot be set to `true` when `sku` is `Free_F1`.
	TlsClientCertEnabled *bool `pulumi:"tlsClientCertEnabled"`
}

// The set of arguments for constructing a Socketio resource.
type SocketioArgs struct {
	// Whether Azure Active Directory authentication is enabled. Defaults to `true`.
	AadAuthEnabled pulumi.BoolPtrInput
	// An `identity` block as defined below.
	Identity SocketioIdentityPtrInput
	// Whether the connectivity log category for live trace is enabled. Defaults to `true`.
	LiveTraceConnectivityLogsEnabled pulumi.BoolPtrInput
	// Whether the live trace tool is enabled. Defaults to `true`.
	LiveTraceEnabled pulumi.BoolPtrInput
	// Whether the HTTP request log category for live trace is enabled. Defaults to `true`.
	LiveTraceHttpRequestLogsEnabled pulumi.BoolPtrInput
	// Whether the messaging log category for live trace is enabled. Defaults to `true`.
	LiveTraceMessagingLogsEnabled pulumi.BoolPtrInput
	// Whether local authentication using an access key is enabled. Defaults to `true`.
	LocalAuthEnabled pulumi.BoolPtrInput
	// The Azure Region where the Web PubSub Service should exist. Changing this forces a new Web PubSub Service to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Web PubSub Service. Changing this forces a new Web PubSub Service to be created.
	Name pulumi.StringPtrInput
	// Whether public network access is enabled. Defaults to `Enabled`. Possible values are `Enabled` and `Disabled`.
	//
	// > **Note:** `publicNetworkAccess` cannot be set to `Disabled` when `sku` is `Free_F1`.
	PublicNetworkAccess pulumi.StringPtrInput
	// The name of the Resource Group where the Web PubSub Service should exist. Changing this forces a new Web PubSub Service to be created.
	ResourceGroupName pulumi.StringInput
	// The service mode of this Web PubSub Service. Defaults to `Default`. Possible values are `Default` and `Serverless`.
	ServiceMode pulumi.StringPtrInput
	// The SKU to use for this Web PubSub Service. Possible values are `Free_F1`, `Standard_S1`, `Premium_P1`, and `Premium_P2`.
	Sku SocketioSkuInput
	// A mapping of tags which should be assigned to the Web PubSub Service.
	Tags pulumi.StringMapInput
	// Whether the service should request a client certificate during a TLS handshake. Defaults to `false`.
	//
	// > **Note:** `tlsClientCertEnabled` cannot be set to `true` when `sku` is `Free_F1`.
	TlsClientCertEnabled pulumi.BoolPtrInput
}

func (SocketioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*socketioArgs)(nil)).Elem()
}

type SocketioInput interface {
	pulumi.Input

	ToSocketioOutput() SocketioOutput
	ToSocketioOutputWithContext(ctx context.Context) SocketioOutput
}

func (*Socketio) ElementType() reflect.Type {
	return reflect.TypeOf((**Socketio)(nil)).Elem()
}

func (i *Socketio) ToSocketioOutput() SocketioOutput {
	return i.ToSocketioOutputWithContext(context.Background())
}

func (i *Socketio) ToSocketioOutputWithContext(ctx context.Context) SocketioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SocketioOutput)
}

// SocketioArrayInput is an input type that accepts SocketioArray and SocketioArrayOutput values.
// You can construct a concrete instance of `SocketioArrayInput` via:
//
//	SocketioArray{ SocketioArgs{...} }
type SocketioArrayInput interface {
	pulumi.Input

	ToSocketioArrayOutput() SocketioArrayOutput
	ToSocketioArrayOutputWithContext(context.Context) SocketioArrayOutput
}

type SocketioArray []SocketioInput

func (SocketioArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Socketio)(nil)).Elem()
}

func (i SocketioArray) ToSocketioArrayOutput() SocketioArrayOutput {
	return i.ToSocketioArrayOutputWithContext(context.Background())
}

func (i SocketioArray) ToSocketioArrayOutputWithContext(ctx context.Context) SocketioArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SocketioArrayOutput)
}

// SocketioMapInput is an input type that accepts SocketioMap and SocketioMapOutput values.
// You can construct a concrete instance of `SocketioMapInput` via:
//
//	SocketioMap{ "key": SocketioArgs{...} }
type SocketioMapInput interface {
	pulumi.Input

	ToSocketioMapOutput() SocketioMapOutput
	ToSocketioMapOutputWithContext(context.Context) SocketioMapOutput
}

type SocketioMap map[string]SocketioInput

func (SocketioMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Socketio)(nil)).Elem()
}

func (i SocketioMap) ToSocketioMapOutput() SocketioMapOutput {
	return i.ToSocketioMapOutputWithContext(context.Background())
}

func (i SocketioMap) ToSocketioMapOutputWithContext(ctx context.Context) SocketioMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SocketioMapOutput)
}

type SocketioOutput struct{ *pulumi.OutputState }

func (SocketioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Socketio)(nil)).Elem()
}

func (o SocketioOutput) ToSocketioOutput() SocketioOutput {
	return o
}

func (o SocketioOutput) ToSocketioOutputWithContext(ctx context.Context) SocketioOutput {
	return o
}

// Whether Azure Active Directory authentication is enabled. Defaults to `true`.
func (o SocketioOutput) AadAuthEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Socketio) pulumi.BoolPtrOutput { return v.AadAuthEnabled }).(pulumi.BoolPtrOutput)
}

// The publicly accessible IP address of the Web PubSub Service.
func (o SocketioOutput) ExternalIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Socketio) pulumi.StringOutput { return v.ExternalIp }).(pulumi.StringOutput)
}

// The FQDN of the Web PubSub Service.
func (o SocketioOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *Socketio) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

// An `identity` block as defined below.
func (o SocketioOutput) Identity() SocketioIdentityPtrOutput {
	return o.ApplyT(func(v *Socketio) SocketioIdentityPtrOutput { return v.Identity }).(SocketioIdentityPtrOutput)
}

// Whether the connectivity log category for live trace is enabled. Defaults to `true`.
func (o SocketioOutput) LiveTraceConnectivityLogsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Socketio) pulumi.BoolPtrOutput { return v.LiveTraceConnectivityLogsEnabled }).(pulumi.BoolPtrOutput)
}

// Whether the live trace tool is enabled. Defaults to `true`.
func (o SocketioOutput) LiveTraceEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Socketio) pulumi.BoolPtrOutput { return v.LiveTraceEnabled }).(pulumi.BoolPtrOutput)
}

// Whether the HTTP request log category for live trace is enabled. Defaults to `true`.
func (o SocketioOutput) LiveTraceHttpRequestLogsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Socketio) pulumi.BoolPtrOutput { return v.LiveTraceHttpRequestLogsEnabled }).(pulumi.BoolPtrOutput)
}

// Whether the messaging log category for live trace is enabled. Defaults to `true`.
func (o SocketioOutput) LiveTraceMessagingLogsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Socketio) pulumi.BoolPtrOutput { return v.LiveTraceMessagingLogsEnabled }).(pulumi.BoolPtrOutput)
}

// Whether local authentication using an access key is enabled. Defaults to `true`.
func (o SocketioOutput) LocalAuthEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Socketio) pulumi.BoolPtrOutput { return v.LocalAuthEnabled }).(pulumi.BoolPtrOutput)
}

// The Azure Region where the Web PubSub Service should exist. Changing this forces a new Web PubSub Service to be created.
func (o SocketioOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Socketio) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name which should be used for this Web PubSub Service. Changing this forces a new Web PubSub Service to be created.
func (o SocketioOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Socketio) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The primary access key for the Web PubSub Service.
func (o SocketioOutput) PrimaryAccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Socketio) pulumi.StringOutput { return v.PrimaryAccessKey }).(pulumi.StringOutput)
}

// The primary connection string for the Web PubSub Service.
func (o SocketioOutput) PrimaryConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v *Socketio) pulumi.StringOutput { return v.PrimaryConnectionString }).(pulumi.StringOutput)
}

// Whether public network access is enabled. Defaults to `Enabled`. Possible values are `Enabled` and `Disabled`.
//
// > **Note:** `publicNetworkAccess` cannot be set to `Disabled` when `sku` is `Free_F1`.
func (o SocketioOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Socketio) pulumi.StringPtrOutput { return v.PublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// The publicly accessible port for client-side usage of the Web PubSub Service.
func (o SocketioOutput) PublicPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Socketio) pulumi.IntOutput { return v.PublicPort }).(pulumi.IntOutput)
}

// The name of the Resource Group where the Web PubSub Service should exist. Changing this forces a new Web PubSub Service to be created.
func (o SocketioOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Socketio) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The secondary access key for the Web PubSub Service.
func (o SocketioOutput) SecondaryAccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Socketio) pulumi.StringOutput { return v.SecondaryAccessKey }).(pulumi.StringOutput)
}

// The secondary connection string for the Web PubSub Service.
func (o SocketioOutput) SecondaryConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v *Socketio) pulumi.StringOutput { return v.SecondaryConnectionString }).(pulumi.StringOutput)
}

// The publicly accessible port for server-side usage of the Web PubSub Service.
func (o SocketioOutput) ServerPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Socketio) pulumi.IntOutput { return v.ServerPort }).(pulumi.IntOutput)
}

// The service mode of this Web PubSub Service. Defaults to `Default`. Possible values are `Default` and `Serverless`.
func (o SocketioOutput) ServiceMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Socketio) pulumi.StringPtrOutput { return v.ServiceMode }).(pulumi.StringPtrOutput)
}

// The SKU to use for this Web PubSub Service. Possible values are `Free_F1`, `Standard_S1`, `Premium_P1`, and `Premium_P2`.
func (o SocketioOutput) Sku() SocketioSkuOutput {
	return o.ApplyT(func(v *Socketio) SocketioSkuOutput { return v.Sku }).(SocketioSkuOutput)
}

// A mapping of tags which should be assigned to the Web PubSub Service.
func (o SocketioOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Socketio) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Whether the service should request a client certificate during a TLS handshake. Defaults to `false`.
//
// > **Note:** `tlsClientCertEnabled` cannot be set to `true` when `sku` is `Free_F1`.
func (o SocketioOutput) TlsClientCertEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Socketio) pulumi.BoolPtrOutput { return v.TlsClientCertEnabled }).(pulumi.BoolPtrOutput)
}

type SocketioArrayOutput struct{ *pulumi.OutputState }

func (SocketioArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Socketio)(nil)).Elem()
}

func (o SocketioArrayOutput) ToSocketioArrayOutput() SocketioArrayOutput {
	return o
}

func (o SocketioArrayOutput) ToSocketioArrayOutputWithContext(ctx context.Context) SocketioArrayOutput {
	return o
}

func (o SocketioArrayOutput) Index(i pulumi.IntInput) SocketioOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Socketio {
		return vs[0].([]*Socketio)[vs[1].(int)]
	}).(SocketioOutput)
}

type SocketioMapOutput struct{ *pulumi.OutputState }

func (SocketioMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Socketio)(nil)).Elem()
}

func (o SocketioMapOutput) ToSocketioMapOutput() SocketioMapOutput {
	return o
}

func (o SocketioMapOutput) ToSocketioMapOutputWithContext(ctx context.Context) SocketioMapOutput {
	return o
}

func (o SocketioMapOutput) MapIndex(k pulumi.StringInput) SocketioOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Socketio {
		return vs[0].(map[string]*Socketio)[vs[1].(string)]
	}).(SocketioOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SocketioInput)(nil)).Elem(), &Socketio{})
	pulumi.RegisterInputType(reflect.TypeOf((*SocketioArrayInput)(nil)).Elem(), SocketioArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SocketioMapInput)(nil)).Elem(), SocketioMap{})
	pulumi.RegisterOutputType(SocketioOutput{})
	pulumi.RegisterOutputType(SocketioArrayOutput{})
	pulumi.RegisterOutputType(SocketioMapOutput{})
}
