// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package webpubsub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type HubEventHandler struct {
	// An `auth` block as defined below.
	Auth *HubEventHandlerAuth `pulumi:"auth"`
	// Specifies the list of system events. Supported values are `connect`, `connected` and `disconnected`.
	SystemEvents []string `pulumi:"systemEvents"`
	// The Event Handler URL Template. Two predefined parameters `{hub}` and `{event}` are available to use in the template. The value of the EventHandler URL is dynamically calculated when the client request comes in. Example: `http://example.com/api/{hub}/{event}`.
	UrlTemplate string `pulumi:"urlTemplate"`
	// Specifies the matching event names. There are 3 kind of patterns supported: * `*` matches any event name * `,` Combine multiple events with `,` for example `event1,event2`, it matches event `event1` and `event2` * The single event name, for example `event1`, it matches `event1`.
	UserEventPattern *string `pulumi:"userEventPattern"`
}

// HubEventHandlerInput is an input type that accepts HubEventHandlerArgs and HubEventHandlerOutput values.
// You can construct a concrete instance of `HubEventHandlerInput` via:
//
//	HubEventHandlerArgs{...}
type HubEventHandlerInput interface {
	pulumi.Input

	ToHubEventHandlerOutput() HubEventHandlerOutput
	ToHubEventHandlerOutputWithContext(context.Context) HubEventHandlerOutput
}

type HubEventHandlerArgs struct {
	// An `auth` block as defined below.
	Auth HubEventHandlerAuthPtrInput `pulumi:"auth"`
	// Specifies the list of system events. Supported values are `connect`, `connected` and `disconnected`.
	SystemEvents pulumi.StringArrayInput `pulumi:"systemEvents"`
	// The Event Handler URL Template. Two predefined parameters `{hub}` and `{event}` are available to use in the template. The value of the EventHandler URL is dynamically calculated when the client request comes in. Example: `http://example.com/api/{hub}/{event}`.
	UrlTemplate pulumi.StringInput `pulumi:"urlTemplate"`
	// Specifies the matching event names. There are 3 kind of patterns supported: * `*` matches any event name * `,` Combine multiple events with `,` for example `event1,event2`, it matches event `event1` and `event2` * The single event name, for example `event1`, it matches `event1`.
	UserEventPattern pulumi.StringPtrInput `pulumi:"userEventPattern"`
}

func (HubEventHandlerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HubEventHandler)(nil)).Elem()
}

func (i HubEventHandlerArgs) ToHubEventHandlerOutput() HubEventHandlerOutput {
	return i.ToHubEventHandlerOutputWithContext(context.Background())
}

func (i HubEventHandlerArgs) ToHubEventHandlerOutputWithContext(ctx context.Context) HubEventHandlerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubEventHandlerOutput)
}

// HubEventHandlerArrayInput is an input type that accepts HubEventHandlerArray and HubEventHandlerArrayOutput values.
// You can construct a concrete instance of `HubEventHandlerArrayInput` via:
//
//	HubEventHandlerArray{ HubEventHandlerArgs{...} }
type HubEventHandlerArrayInput interface {
	pulumi.Input

	ToHubEventHandlerArrayOutput() HubEventHandlerArrayOutput
	ToHubEventHandlerArrayOutputWithContext(context.Context) HubEventHandlerArrayOutput
}

type HubEventHandlerArray []HubEventHandlerInput

func (HubEventHandlerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HubEventHandler)(nil)).Elem()
}

func (i HubEventHandlerArray) ToHubEventHandlerArrayOutput() HubEventHandlerArrayOutput {
	return i.ToHubEventHandlerArrayOutputWithContext(context.Background())
}

func (i HubEventHandlerArray) ToHubEventHandlerArrayOutputWithContext(ctx context.Context) HubEventHandlerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubEventHandlerArrayOutput)
}

type HubEventHandlerOutput struct{ *pulumi.OutputState }

func (HubEventHandlerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HubEventHandler)(nil)).Elem()
}

func (o HubEventHandlerOutput) ToHubEventHandlerOutput() HubEventHandlerOutput {
	return o
}

func (o HubEventHandlerOutput) ToHubEventHandlerOutputWithContext(ctx context.Context) HubEventHandlerOutput {
	return o
}

// An `auth` block as defined below.
func (o HubEventHandlerOutput) Auth() HubEventHandlerAuthPtrOutput {
	return o.ApplyT(func(v HubEventHandler) *HubEventHandlerAuth { return v.Auth }).(HubEventHandlerAuthPtrOutput)
}

// Specifies the list of system events. Supported values are `connect`, `connected` and `disconnected`.
func (o HubEventHandlerOutput) SystemEvents() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HubEventHandler) []string { return v.SystemEvents }).(pulumi.StringArrayOutput)
}

// The Event Handler URL Template. Two predefined parameters `{hub}` and `{event}` are available to use in the template. The value of the EventHandler URL is dynamically calculated when the client request comes in. Example: `http://example.com/api/{hub}/{event}`.
func (o HubEventHandlerOutput) UrlTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v HubEventHandler) string { return v.UrlTemplate }).(pulumi.StringOutput)
}

// Specifies the matching event names. There are 3 kind of patterns supported: * `*` matches any event name * `,` Combine multiple events with `,` for example `event1,event2`, it matches event `event1` and `event2` * The single event name, for example `event1`, it matches `event1`.
func (o HubEventHandlerOutput) UserEventPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HubEventHandler) *string { return v.UserEventPattern }).(pulumi.StringPtrOutput)
}

type HubEventHandlerArrayOutput struct{ *pulumi.OutputState }

func (HubEventHandlerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HubEventHandler)(nil)).Elem()
}

func (o HubEventHandlerArrayOutput) ToHubEventHandlerArrayOutput() HubEventHandlerArrayOutput {
	return o
}

func (o HubEventHandlerArrayOutput) ToHubEventHandlerArrayOutputWithContext(ctx context.Context) HubEventHandlerArrayOutput {
	return o
}

func (o HubEventHandlerArrayOutput) Index(i pulumi.IntInput) HubEventHandlerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HubEventHandler {
		return vs[0].([]HubEventHandler)[vs[1].(int)]
	}).(HubEventHandlerOutput)
}

type HubEventHandlerAuth struct {
	// Specify the identity ID of the target resource.
	//
	// > **NOTE:** `managedIdentityId` is required if the auth block is defined
	ManagedIdentityId string `pulumi:"managedIdentityId"`
}

// HubEventHandlerAuthInput is an input type that accepts HubEventHandlerAuthArgs and HubEventHandlerAuthOutput values.
// You can construct a concrete instance of `HubEventHandlerAuthInput` via:
//
//	HubEventHandlerAuthArgs{...}
type HubEventHandlerAuthInput interface {
	pulumi.Input

	ToHubEventHandlerAuthOutput() HubEventHandlerAuthOutput
	ToHubEventHandlerAuthOutputWithContext(context.Context) HubEventHandlerAuthOutput
}

type HubEventHandlerAuthArgs struct {
	// Specify the identity ID of the target resource.
	//
	// > **NOTE:** `managedIdentityId` is required if the auth block is defined
	ManagedIdentityId pulumi.StringInput `pulumi:"managedIdentityId"`
}

func (HubEventHandlerAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HubEventHandlerAuth)(nil)).Elem()
}

func (i HubEventHandlerAuthArgs) ToHubEventHandlerAuthOutput() HubEventHandlerAuthOutput {
	return i.ToHubEventHandlerAuthOutputWithContext(context.Background())
}

func (i HubEventHandlerAuthArgs) ToHubEventHandlerAuthOutputWithContext(ctx context.Context) HubEventHandlerAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubEventHandlerAuthOutput)
}

func (i HubEventHandlerAuthArgs) ToHubEventHandlerAuthPtrOutput() HubEventHandlerAuthPtrOutput {
	return i.ToHubEventHandlerAuthPtrOutputWithContext(context.Background())
}

func (i HubEventHandlerAuthArgs) ToHubEventHandlerAuthPtrOutputWithContext(ctx context.Context) HubEventHandlerAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubEventHandlerAuthOutput).ToHubEventHandlerAuthPtrOutputWithContext(ctx)
}

// HubEventHandlerAuthPtrInput is an input type that accepts HubEventHandlerAuthArgs, HubEventHandlerAuthPtr and HubEventHandlerAuthPtrOutput values.
// You can construct a concrete instance of `HubEventHandlerAuthPtrInput` via:
//
//	        HubEventHandlerAuthArgs{...}
//
//	or:
//
//	        nil
type HubEventHandlerAuthPtrInput interface {
	pulumi.Input

	ToHubEventHandlerAuthPtrOutput() HubEventHandlerAuthPtrOutput
	ToHubEventHandlerAuthPtrOutputWithContext(context.Context) HubEventHandlerAuthPtrOutput
}

type hubEventHandlerAuthPtrType HubEventHandlerAuthArgs

func HubEventHandlerAuthPtr(v *HubEventHandlerAuthArgs) HubEventHandlerAuthPtrInput {
	return (*hubEventHandlerAuthPtrType)(v)
}

func (*hubEventHandlerAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HubEventHandlerAuth)(nil)).Elem()
}

func (i *hubEventHandlerAuthPtrType) ToHubEventHandlerAuthPtrOutput() HubEventHandlerAuthPtrOutput {
	return i.ToHubEventHandlerAuthPtrOutputWithContext(context.Background())
}

func (i *hubEventHandlerAuthPtrType) ToHubEventHandlerAuthPtrOutputWithContext(ctx context.Context) HubEventHandlerAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubEventHandlerAuthPtrOutput)
}

type HubEventHandlerAuthOutput struct{ *pulumi.OutputState }

func (HubEventHandlerAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HubEventHandlerAuth)(nil)).Elem()
}

func (o HubEventHandlerAuthOutput) ToHubEventHandlerAuthOutput() HubEventHandlerAuthOutput {
	return o
}

func (o HubEventHandlerAuthOutput) ToHubEventHandlerAuthOutputWithContext(ctx context.Context) HubEventHandlerAuthOutput {
	return o
}

func (o HubEventHandlerAuthOutput) ToHubEventHandlerAuthPtrOutput() HubEventHandlerAuthPtrOutput {
	return o.ToHubEventHandlerAuthPtrOutputWithContext(context.Background())
}

func (o HubEventHandlerAuthOutput) ToHubEventHandlerAuthPtrOutputWithContext(ctx context.Context) HubEventHandlerAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HubEventHandlerAuth) *HubEventHandlerAuth {
		return &v
	}).(HubEventHandlerAuthPtrOutput)
}

// Specify the identity ID of the target resource.
//
// > **NOTE:** `managedIdentityId` is required if the auth block is defined
func (o HubEventHandlerAuthOutput) ManagedIdentityId() pulumi.StringOutput {
	return o.ApplyT(func(v HubEventHandlerAuth) string { return v.ManagedIdentityId }).(pulumi.StringOutput)
}

type HubEventHandlerAuthPtrOutput struct{ *pulumi.OutputState }

func (HubEventHandlerAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HubEventHandlerAuth)(nil)).Elem()
}

func (o HubEventHandlerAuthPtrOutput) ToHubEventHandlerAuthPtrOutput() HubEventHandlerAuthPtrOutput {
	return o
}

func (o HubEventHandlerAuthPtrOutput) ToHubEventHandlerAuthPtrOutputWithContext(ctx context.Context) HubEventHandlerAuthPtrOutput {
	return o
}

func (o HubEventHandlerAuthPtrOutput) Elem() HubEventHandlerAuthOutput {
	return o.ApplyT(func(v *HubEventHandlerAuth) HubEventHandlerAuth {
		if v != nil {
			return *v
		}
		var ret HubEventHandlerAuth
		return ret
	}).(HubEventHandlerAuthOutput)
}

// Specify the identity ID of the target resource.
//
// > **NOTE:** `managedIdentityId` is required if the auth block is defined
func (o HubEventHandlerAuthPtrOutput) ManagedIdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HubEventHandlerAuth) *string {
		if v == nil {
			return nil
		}
		return &v.ManagedIdentityId
	}).(pulumi.StringPtrOutput)
}

type HubEventListener struct {
	// Specifies the event hub name to receive the events.
	EventhubName string `pulumi:"eventhubName"`
	// Specifies the event hub namespace name to receive the events.
	EventhubNamespaceName string `pulumi:"eventhubNamespaceName"`
	// Specifies the list of system events. Supported values are `connected` and `disconnected`.
	SystemEventNameFilters []string `pulumi:"systemEventNameFilters"`
	// Specifies the list of matching user event names. `["*"]` can be used to match all events.
	UserEventNameFilters []string `pulumi:"userEventNameFilters"`
}

// HubEventListenerInput is an input type that accepts HubEventListenerArgs and HubEventListenerOutput values.
// You can construct a concrete instance of `HubEventListenerInput` via:
//
//	HubEventListenerArgs{...}
type HubEventListenerInput interface {
	pulumi.Input

	ToHubEventListenerOutput() HubEventListenerOutput
	ToHubEventListenerOutputWithContext(context.Context) HubEventListenerOutput
}

type HubEventListenerArgs struct {
	// Specifies the event hub name to receive the events.
	EventhubName pulumi.StringInput `pulumi:"eventhubName"`
	// Specifies the event hub namespace name to receive the events.
	EventhubNamespaceName pulumi.StringInput `pulumi:"eventhubNamespaceName"`
	// Specifies the list of system events. Supported values are `connected` and `disconnected`.
	SystemEventNameFilters pulumi.StringArrayInput `pulumi:"systemEventNameFilters"`
	// Specifies the list of matching user event names. `["*"]` can be used to match all events.
	UserEventNameFilters pulumi.StringArrayInput `pulumi:"userEventNameFilters"`
}

func (HubEventListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HubEventListener)(nil)).Elem()
}

func (i HubEventListenerArgs) ToHubEventListenerOutput() HubEventListenerOutput {
	return i.ToHubEventListenerOutputWithContext(context.Background())
}

func (i HubEventListenerArgs) ToHubEventListenerOutputWithContext(ctx context.Context) HubEventListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubEventListenerOutput)
}

// HubEventListenerArrayInput is an input type that accepts HubEventListenerArray and HubEventListenerArrayOutput values.
// You can construct a concrete instance of `HubEventListenerArrayInput` via:
//
//	HubEventListenerArray{ HubEventListenerArgs{...} }
type HubEventListenerArrayInput interface {
	pulumi.Input

	ToHubEventListenerArrayOutput() HubEventListenerArrayOutput
	ToHubEventListenerArrayOutputWithContext(context.Context) HubEventListenerArrayOutput
}

type HubEventListenerArray []HubEventListenerInput

func (HubEventListenerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HubEventListener)(nil)).Elem()
}

func (i HubEventListenerArray) ToHubEventListenerArrayOutput() HubEventListenerArrayOutput {
	return i.ToHubEventListenerArrayOutputWithContext(context.Background())
}

func (i HubEventListenerArray) ToHubEventListenerArrayOutputWithContext(ctx context.Context) HubEventListenerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubEventListenerArrayOutput)
}

type HubEventListenerOutput struct{ *pulumi.OutputState }

func (HubEventListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HubEventListener)(nil)).Elem()
}

func (o HubEventListenerOutput) ToHubEventListenerOutput() HubEventListenerOutput {
	return o
}

func (o HubEventListenerOutput) ToHubEventListenerOutputWithContext(ctx context.Context) HubEventListenerOutput {
	return o
}

// Specifies the event hub name to receive the events.
func (o HubEventListenerOutput) EventhubName() pulumi.StringOutput {
	return o.ApplyT(func(v HubEventListener) string { return v.EventhubName }).(pulumi.StringOutput)
}

// Specifies the event hub namespace name to receive the events.
func (o HubEventListenerOutput) EventhubNamespaceName() pulumi.StringOutput {
	return o.ApplyT(func(v HubEventListener) string { return v.EventhubNamespaceName }).(pulumi.StringOutput)
}

// Specifies the list of system events. Supported values are `connected` and `disconnected`.
func (o HubEventListenerOutput) SystemEventNameFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HubEventListener) []string { return v.SystemEventNameFilters }).(pulumi.StringArrayOutput)
}

// Specifies the list of matching user event names. `["*"]` can be used to match all events.
func (o HubEventListenerOutput) UserEventNameFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HubEventListener) []string { return v.UserEventNameFilters }).(pulumi.StringArrayOutput)
}

type HubEventListenerArrayOutput struct{ *pulumi.OutputState }

func (HubEventListenerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HubEventListener)(nil)).Elem()
}

func (o HubEventListenerArrayOutput) ToHubEventListenerArrayOutput() HubEventListenerArrayOutput {
	return o
}

func (o HubEventListenerArrayOutput) ToHubEventListenerArrayOutputWithContext(ctx context.Context) HubEventListenerArrayOutput {
	return o
}

func (o HubEventListenerArrayOutput) Index(i pulumi.IntInput) HubEventListenerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HubEventListener {
		return vs[0].([]HubEventListener)[vs[1].(int)]
	}).(HubEventListenerOutput)
}

type NetworkAclPrivateEndpoint struct {
	// The allowed request types for the Private Endpoint Connection. Possible values are `ClientConnection`, `ServerConnection`, `RESTAPI` and `Trace`.
	AllowedRequestTypes []string `pulumi:"allowedRequestTypes"`
	// The denied request types for the Private Endpoint Connection. Possible values are `ClientConnection`, `ServerConnection`, `RESTAPI` and `Trace`.
	//
	// > **NOTE:** When `defaultAction` is `Allow`, `allowedRequestTypes`cannot be set. When `defaultAction` is `Deny`, `deniedRequestTypes`cannot be set.
	DeniedRequestTypes []string `pulumi:"deniedRequestTypes"`
	// The ID of the Private Endpoint which is based on the Web Pubsub service.
	Id string `pulumi:"id"`
}

// NetworkAclPrivateEndpointInput is an input type that accepts NetworkAclPrivateEndpointArgs and NetworkAclPrivateEndpointOutput values.
// You can construct a concrete instance of `NetworkAclPrivateEndpointInput` via:
//
//	NetworkAclPrivateEndpointArgs{...}
type NetworkAclPrivateEndpointInput interface {
	pulumi.Input

	ToNetworkAclPrivateEndpointOutput() NetworkAclPrivateEndpointOutput
	ToNetworkAclPrivateEndpointOutputWithContext(context.Context) NetworkAclPrivateEndpointOutput
}

type NetworkAclPrivateEndpointArgs struct {
	// The allowed request types for the Private Endpoint Connection. Possible values are `ClientConnection`, `ServerConnection`, `RESTAPI` and `Trace`.
	AllowedRequestTypes pulumi.StringArrayInput `pulumi:"allowedRequestTypes"`
	// The denied request types for the Private Endpoint Connection. Possible values are `ClientConnection`, `ServerConnection`, `RESTAPI` and `Trace`.
	//
	// > **NOTE:** When `defaultAction` is `Allow`, `allowedRequestTypes`cannot be set. When `defaultAction` is `Deny`, `deniedRequestTypes`cannot be set.
	DeniedRequestTypes pulumi.StringArrayInput `pulumi:"deniedRequestTypes"`
	// The ID of the Private Endpoint which is based on the Web Pubsub service.
	Id pulumi.StringInput `pulumi:"id"`
}

func (NetworkAclPrivateEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAclPrivateEndpoint)(nil)).Elem()
}

func (i NetworkAclPrivateEndpointArgs) ToNetworkAclPrivateEndpointOutput() NetworkAclPrivateEndpointOutput {
	return i.ToNetworkAclPrivateEndpointOutputWithContext(context.Background())
}

func (i NetworkAclPrivateEndpointArgs) ToNetworkAclPrivateEndpointOutputWithContext(ctx context.Context) NetworkAclPrivateEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclPrivateEndpointOutput)
}

// NetworkAclPrivateEndpointArrayInput is an input type that accepts NetworkAclPrivateEndpointArray and NetworkAclPrivateEndpointArrayOutput values.
// You can construct a concrete instance of `NetworkAclPrivateEndpointArrayInput` via:
//
//	NetworkAclPrivateEndpointArray{ NetworkAclPrivateEndpointArgs{...} }
type NetworkAclPrivateEndpointArrayInput interface {
	pulumi.Input

	ToNetworkAclPrivateEndpointArrayOutput() NetworkAclPrivateEndpointArrayOutput
	ToNetworkAclPrivateEndpointArrayOutputWithContext(context.Context) NetworkAclPrivateEndpointArrayOutput
}

type NetworkAclPrivateEndpointArray []NetworkAclPrivateEndpointInput

func (NetworkAclPrivateEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAclPrivateEndpoint)(nil)).Elem()
}

func (i NetworkAclPrivateEndpointArray) ToNetworkAclPrivateEndpointArrayOutput() NetworkAclPrivateEndpointArrayOutput {
	return i.ToNetworkAclPrivateEndpointArrayOutputWithContext(context.Background())
}

func (i NetworkAclPrivateEndpointArray) ToNetworkAclPrivateEndpointArrayOutputWithContext(ctx context.Context) NetworkAclPrivateEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclPrivateEndpointArrayOutput)
}

type NetworkAclPrivateEndpointOutput struct{ *pulumi.OutputState }

func (NetworkAclPrivateEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAclPrivateEndpoint)(nil)).Elem()
}

func (o NetworkAclPrivateEndpointOutput) ToNetworkAclPrivateEndpointOutput() NetworkAclPrivateEndpointOutput {
	return o
}

func (o NetworkAclPrivateEndpointOutput) ToNetworkAclPrivateEndpointOutputWithContext(ctx context.Context) NetworkAclPrivateEndpointOutput {
	return o
}

// The allowed request types for the Private Endpoint Connection. Possible values are `ClientConnection`, `ServerConnection`, `RESTAPI` and `Trace`.
func (o NetworkAclPrivateEndpointOutput) AllowedRequestTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkAclPrivateEndpoint) []string { return v.AllowedRequestTypes }).(pulumi.StringArrayOutput)
}

// The denied request types for the Private Endpoint Connection. Possible values are `ClientConnection`, `ServerConnection`, `RESTAPI` and `Trace`.
//
// > **NOTE:** When `defaultAction` is `Allow`, `allowedRequestTypes`cannot be set. When `defaultAction` is `Deny`, `deniedRequestTypes`cannot be set.
func (o NetworkAclPrivateEndpointOutput) DeniedRequestTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkAclPrivateEndpoint) []string { return v.DeniedRequestTypes }).(pulumi.StringArrayOutput)
}

// The ID of the Private Endpoint which is based on the Web Pubsub service.
func (o NetworkAclPrivateEndpointOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkAclPrivateEndpoint) string { return v.Id }).(pulumi.StringOutput)
}

type NetworkAclPrivateEndpointArrayOutput struct{ *pulumi.OutputState }

func (NetworkAclPrivateEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAclPrivateEndpoint)(nil)).Elem()
}

func (o NetworkAclPrivateEndpointArrayOutput) ToNetworkAclPrivateEndpointArrayOutput() NetworkAclPrivateEndpointArrayOutput {
	return o
}

func (o NetworkAclPrivateEndpointArrayOutput) ToNetworkAclPrivateEndpointArrayOutputWithContext(ctx context.Context) NetworkAclPrivateEndpointArrayOutput {
	return o
}

func (o NetworkAclPrivateEndpointArrayOutput) Index(i pulumi.IntInput) NetworkAclPrivateEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkAclPrivateEndpoint {
		return vs[0].([]NetworkAclPrivateEndpoint)[vs[1].(int)]
	}).(NetworkAclPrivateEndpointOutput)
}

type NetworkAclPublicNetwork struct {
	// The allowed request types for the public network. Possible values are `ClientConnection`, `ServerConnection`, `RESTAPI` and `Trace`.
	AllowedRequestTypes []string `pulumi:"allowedRequestTypes"`
	// The denied request types for the public network. Possible values are `ClientConnection`, `ServerConnection`, `RESTAPI` and `Trace`.
	//
	// > **NOTE:** When `defaultAction` is `Allow`, `allowedRequestTypes`cannot be set. When `defaultAction` is `Deny`, `deniedRequestTypes`cannot be set.
	DeniedRequestTypes []string `pulumi:"deniedRequestTypes"`
}

// NetworkAclPublicNetworkInput is an input type that accepts NetworkAclPublicNetworkArgs and NetworkAclPublicNetworkOutput values.
// You can construct a concrete instance of `NetworkAclPublicNetworkInput` via:
//
//	NetworkAclPublicNetworkArgs{...}
type NetworkAclPublicNetworkInput interface {
	pulumi.Input

	ToNetworkAclPublicNetworkOutput() NetworkAclPublicNetworkOutput
	ToNetworkAclPublicNetworkOutputWithContext(context.Context) NetworkAclPublicNetworkOutput
}

type NetworkAclPublicNetworkArgs struct {
	// The allowed request types for the public network. Possible values are `ClientConnection`, `ServerConnection`, `RESTAPI` and `Trace`.
	AllowedRequestTypes pulumi.StringArrayInput `pulumi:"allowedRequestTypes"`
	// The denied request types for the public network. Possible values are `ClientConnection`, `ServerConnection`, `RESTAPI` and `Trace`.
	//
	// > **NOTE:** When `defaultAction` is `Allow`, `allowedRequestTypes`cannot be set. When `defaultAction` is `Deny`, `deniedRequestTypes`cannot be set.
	DeniedRequestTypes pulumi.StringArrayInput `pulumi:"deniedRequestTypes"`
}

func (NetworkAclPublicNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAclPublicNetwork)(nil)).Elem()
}

func (i NetworkAclPublicNetworkArgs) ToNetworkAclPublicNetworkOutput() NetworkAclPublicNetworkOutput {
	return i.ToNetworkAclPublicNetworkOutputWithContext(context.Background())
}

func (i NetworkAclPublicNetworkArgs) ToNetworkAclPublicNetworkOutputWithContext(ctx context.Context) NetworkAclPublicNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclPublicNetworkOutput)
}

func (i NetworkAclPublicNetworkArgs) ToNetworkAclPublicNetworkPtrOutput() NetworkAclPublicNetworkPtrOutput {
	return i.ToNetworkAclPublicNetworkPtrOutputWithContext(context.Background())
}

func (i NetworkAclPublicNetworkArgs) ToNetworkAclPublicNetworkPtrOutputWithContext(ctx context.Context) NetworkAclPublicNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclPublicNetworkOutput).ToNetworkAclPublicNetworkPtrOutputWithContext(ctx)
}

// NetworkAclPublicNetworkPtrInput is an input type that accepts NetworkAclPublicNetworkArgs, NetworkAclPublicNetworkPtr and NetworkAclPublicNetworkPtrOutput values.
// You can construct a concrete instance of `NetworkAclPublicNetworkPtrInput` via:
//
//	        NetworkAclPublicNetworkArgs{...}
//
//	or:
//
//	        nil
type NetworkAclPublicNetworkPtrInput interface {
	pulumi.Input

	ToNetworkAclPublicNetworkPtrOutput() NetworkAclPublicNetworkPtrOutput
	ToNetworkAclPublicNetworkPtrOutputWithContext(context.Context) NetworkAclPublicNetworkPtrOutput
}

type networkAclPublicNetworkPtrType NetworkAclPublicNetworkArgs

func NetworkAclPublicNetworkPtr(v *NetworkAclPublicNetworkArgs) NetworkAclPublicNetworkPtrInput {
	return (*networkAclPublicNetworkPtrType)(v)
}

func (*networkAclPublicNetworkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkAclPublicNetwork)(nil)).Elem()
}

func (i *networkAclPublicNetworkPtrType) ToNetworkAclPublicNetworkPtrOutput() NetworkAclPublicNetworkPtrOutput {
	return i.ToNetworkAclPublicNetworkPtrOutputWithContext(context.Background())
}

func (i *networkAclPublicNetworkPtrType) ToNetworkAclPublicNetworkPtrOutputWithContext(ctx context.Context) NetworkAclPublicNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclPublicNetworkPtrOutput)
}

type NetworkAclPublicNetworkOutput struct{ *pulumi.OutputState }

func (NetworkAclPublicNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAclPublicNetwork)(nil)).Elem()
}

func (o NetworkAclPublicNetworkOutput) ToNetworkAclPublicNetworkOutput() NetworkAclPublicNetworkOutput {
	return o
}

func (o NetworkAclPublicNetworkOutput) ToNetworkAclPublicNetworkOutputWithContext(ctx context.Context) NetworkAclPublicNetworkOutput {
	return o
}

func (o NetworkAclPublicNetworkOutput) ToNetworkAclPublicNetworkPtrOutput() NetworkAclPublicNetworkPtrOutput {
	return o.ToNetworkAclPublicNetworkPtrOutputWithContext(context.Background())
}

func (o NetworkAclPublicNetworkOutput) ToNetworkAclPublicNetworkPtrOutputWithContext(ctx context.Context) NetworkAclPublicNetworkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkAclPublicNetwork) *NetworkAclPublicNetwork {
		return &v
	}).(NetworkAclPublicNetworkPtrOutput)
}

// The allowed request types for the public network. Possible values are `ClientConnection`, `ServerConnection`, `RESTAPI` and `Trace`.
func (o NetworkAclPublicNetworkOutput) AllowedRequestTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkAclPublicNetwork) []string { return v.AllowedRequestTypes }).(pulumi.StringArrayOutput)
}

// The denied request types for the public network. Possible values are `ClientConnection`, `ServerConnection`, `RESTAPI` and `Trace`.
//
// > **NOTE:** When `defaultAction` is `Allow`, `allowedRequestTypes`cannot be set. When `defaultAction` is `Deny`, `deniedRequestTypes`cannot be set.
func (o NetworkAclPublicNetworkOutput) DeniedRequestTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkAclPublicNetwork) []string { return v.DeniedRequestTypes }).(pulumi.StringArrayOutput)
}

type NetworkAclPublicNetworkPtrOutput struct{ *pulumi.OutputState }

func (NetworkAclPublicNetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkAclPublicNetwork)(nil)).Elem()
}

func (o NetworkAclPublicNetworkPtrOutput) ToNetworkAclPublicNetworkPtrOutput() NetworkAclPublicNetworkPtrOutput {
	return o
}

func (o NetworkAclPublicNetworkPtrOutput) ToNetworkAclPublicNetworkPtrOutputWithContext(ctx context.Context) NetworkAclPublicNetworkPtrOutput {
	return o
}

func (o NetworkAclPublicNetworkPtrOutput) Elem() NetworkAclPublicNetworkOutput {
	return o.ApplyT(func(v *NetworkAclPublicNetwork) NetworkAclPublicNetwork {
		if v != nil {
			return *v
		}
		var ret NetworkAclPublicNetwork
		return ret
	}).(NetworkAclPublicNetworkOutput)
}

// The allowed request types for the public network. Possible values are `ClientConnection`, `ServerConnection`, `RESTAPI` and `Trace`.
func (o NetworkAclPublicNetworkPtrOutput) AllowedRequestTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkAclPublicNetwork) []string {
		if v == nil {
			return nil
		}
		return v.AllowedRequestTypes
	}).(pulumi.StringArrayOutput)
}

// The denied request types for the public network. Possible values are `ClientConnection`, `ServerConnection`, `RESTAPI` and `Trace`.
//
// > **NOTE:** When `defaultAction` is `Allow`, `allowedRequestTypes`cannot be set. When `defaultAction` is `Deny`, `deniedRequestTypes`cannot be set.
func (o NetworkAclPublicNetworkPtrOutput) DeniedRequestTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkAclPublicNetwork) []string {
		if v == nil {
			return nil
		}
		return v.DeniedRequestTypes
	}).(pulumi.StringArrayOutput)
}

type ServiceIdentity struct {
	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this Web PubSub.
	//
	// > **NOTE:** This is required when `type` is set to `UserAssigned`
	IdentityIds []string `pulumi:"identityIds"`
	// The Principal ID associated with this Managed Service Identity.
	PrincipalId *string `pulumi:"principalId"`
	// The Tenant ID associated with this Managed Service Identity.
	TenantId *string `pulumi:"tenantId"`
	// Specifies the type of Managed Service Identity that should be configured on this Web PubSub. Possible values are `SystemAssigned`, `UserAssigned`.
	Type string `pulumi:"type"`
}

// ServiceIdentityInput is an input type that accepts ServiceIdentityArgs and ServiceIdentityOutput values.
// You can construct a concrete instance of `ServiceIdentityInput` via:
//
//	ServiceIdentityArgs{...}
type ServiceIdentityInput interface {
	pulumi.Input

	ToServiceIdentityOutput() ServiceIdentityOutput
	ToServiceIdentityOutputWithContext(context.Context) ServiceIdentityOutput
}

type ServiceIdentityArgs struct {
	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this Web PubSub.
	//
	// > **NOTE:** This is required when `type` is set to `UserAssigned`
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	// The Principal ID associated with this Managed Service Identity.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The Tenant ID associated with this Managed Service Identity.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// Specifies the type of Managed Service Identity that should be configured on this Web PubSub. Possible values are `SystemAssigned`, `UserAssigned`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServiceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIdentity)(nil)).Elem()
}

func (i ServiceIdentityArgs) ToServiceIdentityOutput() ServiceIdentityOutput {
	return i.ToServiceIdentityOutputWithContext(context.Background())
}

func (i ServiceIdentityArgs) ToServiceIdentityOutputWithContext(ctx context.Context) ServiceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIdentityOutput)
}

func (i ServiceIdentityArgs) ToServiceIdentityPtrOutput() ServiceIdentityPtrOutput {
	return i.ToServiceIdentityPtrOutputWithContext(context.Background())
}

func (i ServiceIdentityArgs) ToServiceIdentityPtrOutputWithContext(ctx context.Context) ServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIdentityOutput).ToServiceIdentityPtrOutputWithContext(ctx)
}

// ServiceIdentityPtrInput is an input type that accepts ServiceIdentityArgs, ServiceIdentityPtr and ServiceIdentityPtrOutput values.
// You can construct a concrete instance of `ServiceIdentityPtrInput` via:
//
//	        ServiceIdentityArgs{...}
//
//	or:
//
//	        nil
type ServiceIdentityPtrInput interface {
	pulumi.Input

	ToServiceIdentityPtrOutput() ServiceIdentityPtrOutput
	ToServiceIdentityPtrOutputWithContext(context.Context) ServiceIdentityPtrOutput
}

type serviceIdentityPtrType ServiceIdentityArgs

func ServiceIdentityPtr(v *ServiceIdentityArgs) ServiceIdentityPtrInput {
	return (*serviceIdentityPtrType)(v)
}

func (*serviceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceIdentity)(nil)).Elem()
}

func (i *serviceIdentityPtrType) ToServiceIdentityPtrOutput() ServiceIdentityPtrOutput {
	return i.ToServiceIdentityPtrOutputWithContext(context.Background())
}

func (i *serviceIdentityPtrType) ToServiceIdentityPtrOutputWithContext(ctx context.Context) ServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIdentityPtrOutput)
}

type ServiceIdentityOutput struct{ *pulumi.OutputState }

func (ServiceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIdentity)(nil)).Elem()
}

func (o ServiceIdentityOutput) ToServiceIdentityOutput() ServiceIdentityOutput {
	return o
}

func (o ServiceIdentityOutput) ToServiceIdentityOutputWithContext(ctx context.Context) ServiceIdentityOutput {
	return o
}

func (o ServiceIdentityOutput) ToServiceIdentityPtrOutput() ServiceIdentityPtrOutput {
	return o.ToServiceIdentityPtrOutputWithContext(context.Background())
}

func (o ServiceIdentityOutput) ToServiceIdentityPtrOutputWithContext(ctx context.Context) ServiceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceIdentity) *ServiceIdentity {
		return &v
	}).(ServiceIdentityPtrOutput)
}

// Specifies a list of User Assigned Managed Identity IDs to be assigned to this Web PubSub.
//
// > **NOTE:** This is required when `type` is set to `UserAssigned`
func (o ServiceIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

// The Principal ID associated with this Managed Service Identity.
func (o ServiceIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The Tenant ID associated with this Managed Service Identity.
func (o ServiceIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this Web PubSub. Possible values are `SystemAssigned`, `UserAssigned`.
func (o ServiceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type ServiceIdentityPtrOutput struct{ *pulumi.OutputState }

func (ServiceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceIdentity)(nil)).Elem()
}

func (o ServiceIdentityPtrOutput) ToServiceIdentityPtrOutput() ServiceIdentityPtrOutput {
	return o
}

func (o ServiceIdentityPtrOutput) ToServiceIdentityPtrOutputWithContext(ctx context.Context) ServiceIdentityPtrOutput {
	return o
}

func (o ServiceIdentityPtrOutput) Elem() ServiceIdentityOutput {
	return o.ApplyT(func(v *ServiceIdentity) ServiceIdentity {
		if v != nil {
			return *v
		}
		var ret ServiceIdentity
		return ret
	}).(ServiceIdentityOutput)
}

// Specifies a list of User Assigned Managed Identity IDs to be assigned to this Web PubSub.
//
// > **NOTE:** This is required when `type` is set to `UserAssigned`
func (o ServiceIdentityPtrOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceIdentity) []string {
		if v == nil {
			return nil
		}
		return v.IdentityIds
	}).(pulumi.StringArrayOutput)
}

// The Principal ID associated with this Managed Service Identity.
func (o ServiceIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The Tenant ID associated with this Managed Service Identity.
func (o ServiceIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this Web PubSub. Possible values are `SystemAssigned`, `UserAssigned`.
func (o ServiceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type ServiceLiveTrace struct {
	// Whether the log category `ConnectivityLogs` is enabled? Defaults to `true`
	ConnectivityLogsEnabled *bool `pulumi:"connectivityLogsEnabled"`
	// Whether the live trace is enabled? Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Whether the log category `HttpRequestLogs` is enabled? Defaults to `true`
	HttpRequestLogsEnabled *bool `pulumi:"httpRequestLogsEnabled"`
	// Whether the log category `MessagingLogs` is enabled? Defaults to `true`
	MessagingLogsEnabled *bool `pulumi:"messagingLogsEnabled"`
}

// ServiceLiveTraceInput is an input type that accepts ServiceLiveTraceArgs and ServiceLiveTraceOutput values.
// You can construct a concrete instance of `ServiceLiveTraceInput` via:
//
//	ServiceLiveTraceArgs{...}
type ServiceLiveTraceInput interface {
	pulumi.Input

	ToServiceLiveTraceOutput() ServiceLiveTraceOutput
	ToServiceLiveTraceOutputWithContext(context.Context) ServiceLiveTraceOutput
}

type ServiceLiveTraceArgs struct {
	// Whether the log category `ConnectivityLogs` is enabled? Defaults to `true`
	ConnectivityLogsEnabled pulumi.BoolPtrInput `pulumi:"connectivityLogsEnabled"`
	// Whether the live trace is enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Whether the log category `HttpRequestLogs` is enabled? Defaults to `true`
	HttpRequestLogsEnabled pulumi.BoolPtrInput `pulumi:"httpRequestLogsEnabled"`
	// Whether the log category `MessagingLogs` is enabled? Defaults to `true`
	MessagingLogsEnabled pulumi.BoolPtrInput `pulumi:"messagingLogsEnabled"`
}

func (ServiceLiveTraceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLiveTrace)(nil)).Elem()
}

func (i ServiceLiveTraceArgs) ToServiceLiveTraceOutput() ServiceLiveTraceOutput {
	return i.ToServiceLiveTraceOutputWithContext(context.Background())
}

func (i ServiceLiveTraceArgs) ToServiceLiveTraceOutputWithContext(ctx context.Context) ServiceLiveTraceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLiveTraceOutput)
}

func (i ServiceLiveTraceArgs) ToServiceLiveTracePtrOutput() ServiceLiveTracePtrOutput {
	return i.ToServiceLiveTracePtrOutputWithContext(context.Background())
}

func (i ServiceLiveTraceArgs) ToServiceLiveTracePtrOutputWithContext(ctx context.Context) ServiceLiveTracePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLiveTraceOutput).ToServiceLiveTracePtrOutputWithContext(ctx)
}

// ServiceLiveTracePtrInput is an input type that accepts ServiceLiveTraceArgs, ServiceLiveTracePtr and ServiceLiveTracePtrOutput values.
// You can construct a concrete instance of `ServiceLiveTracePtrInput` via:
//
//	        ServiceLiveTraceArgs{...}
//
//	or:
//
//	        nil
type ServiceLiveTracePtrInput interface {
	pulumi.Input

	ToServiceLiveTracePtrOutput() ServiceLiveTracePtrOutput
	ToServiceLiveTracePtrOutputWithContext(context.Context) ServiceLiveTracePtrOutput
}

type serviceLiveTracePtrType ServiceLiveTraceArgs

func ServiceLiveTracePtr(v *ServiceLiveTraceArgs) ServiceLiveTracePtrInput {
	return (*serviceLiveTracePtrType)(v)
}

func (*serviceLiveTracePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLiveTrace)(nil)).Elem()
}

func (i *serviceLiveTracePtrType) ToServiceLiveTracePtrOutput() ServiceLiveTracePtrOutput {
	return i.ToServiceLiveTracePtrOutputWithContext(context.Background())
}

func (i *serviceLiveTracePtrType) ToServiceLiveTracePtrOutputWithContext(ctx context.Context) ServiceLiveTracePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLiveTracePtrOutput)
}

type ServiceLiveTraceOutput struct{ *pulumi.OutputState }

func (ServiceLiveTraceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLiveTrace)(nil)).Elem()
}

func (o ServiceLiveTraceOutput) ToServiceLiveTraceOutput() ServiceLiveTraceOutput {
	return o
}

func (o ServiceLiveTraceOutput) ToServiceLiveTraceOutputWithContext(ctx context.Context) ServiceLiveTraceOutput {
	return o
}

func (o ServiceLiveTraceOutput) ToServiceLiveTracePtrOutput() ServiceLiveTracePtrOutput {
	return o.ToServiceLiveTracePtrOutputWithContext(context.Background())
}

func (o ServiceLiveTraceOutput) ToServiceLiveTracePtrOutputWithContext(ctx context.Context) ServiceLiveTracePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceLiveTrace) *ServiceLiveTrace {
		return &v
	}).(ServiceLiveTracePtrOutput)
}

// Whether the log category `ConnectivityLogs` is enabled? Defaults to `true`
func (o ServiceLiveTraceOutput) ConnectivityLogsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceLiveTrace) *bool { return v.ConnectivityLogsEnabled }).(pulumi.BoolPtrOutput)
}

// Whether the live trace is enabled? Defaults to `true`.
func (o ServiceLiveTraceOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceLiveTrace) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Whether the log category `HttpRequestLogs` is enabled? Defaults to `true`
func (o ServiceLiveTraceOutput) HttpRequestLogsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceLiveTrace) *bool { return v.HttpRequestLogsEnabled }).(pulumi.BoolPtrOutput)
}

// Whether the log category `MessagingLogs` is enabled? Defaults to `true`
func (o ServiceLiveTraceOutput) MessagingLogsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceLiveTrace) *bool { return v.MessagingLogsEnabled }).(pulumi.BoolPtrOutput)
}

type ServiceLiveTracePtrOutput struct{ *pulumi.OutputState }

func (ServiceLiveTracePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLiveTrace)(nil)).Elem()
}

func (o ServiceLiveTracePtrOutput) ToServiceLiveTracePtrOutput() ServiceLiveTracePtrOutput {
	return o
}

func (o ServiceLiveTracePtrOutput) ToServiceLiveTracePtrOutputWithContext(ctx context.Context) ServiceLiveTracePtrOutput {
	return o
}

func (o ServiceLiveTracePtrOutput) Elem() ServiceLiveTraceOutput {
	return o.ApplyT(func(v *ServiceLiveTrace) ServiceLiveTrace {
		if v != nil {
			return *v
		}
		var ret ServiceLiveTrace
		return ret
	}).(ServiceLiveTraceOutput)
}

// Whether the log category `ConnectivityLogs` is enabled? Defaults to `true`
func (o ServiceLiveTracePtrOutput) ConnectivityLogsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceLiveTrace) *bool {
		if v == nil {
			return nil
		}
		return v.ConnectivityLogsEnabled
	}).(pulumi.BoolPtrOutput)
}

// Whether the live trace is enabled? Defaults to `true`.
func (o ServiceLiveTracePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceLiveTrace) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Whether the log category `HttpRequestLogs` is enabled? Defaults to `true`
func (o ServiceLiveTracePtrOutput) HttpRequestLogsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceLiveTrace) *bool {
		if v == nil {
			return nil
		}
		return v.HttpRequestLogsEnabled
	}).(pulumi.BoolPtrOutput)
}

// Whether the log category `MessagingLogs` is enabled? Defaults to `true`
func (o ServiceLiveTracePtrOutput) MessagingLogsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceLiveTrace) *bool {
		if v == nil {
			return nil
		}
		return v.MessagingLogsEnabled
	}).(pulumi.BoolPtrOutput)
}

type GetPrivateLinkResourceSharedPrivateLinkResourceType struct {
	// The description of the resource type that has been onboarded to private link service.
	Description string `pulumi:"description"`
	// The  name for the resource that has been onboarded to private link service.
	SubresourceName string `pulumi:"subresourceName"`
}

// GetPrivateLinkResourceSharedPrivateLinkResourceTypeInput is an input type that accepts GetPrivateLinkResourceSharedPrivateLinkResourceTypeArgs and GetPrivateLinkResourceSharedPrivateLinkResourceTypeOutput values.
// You can construct a concrete instance of `GetPrivateLinkResourceSharedPrivateLinkResourceTypeInput` via:
//
//	GetPrivateLinkResourceSharedPrivateLinkResourceTypeArgs{...}
type GetPrivateLinkResourceSharedPrivateLinkResourceTypeInput interface {
	pulumi.Input

	ToGetPrivateLinkResourceSharedPrivateLinkResourceTypeOutput() GetPrivateLinkResourceSharedPrivateLinkResourceTypeOutput
	ToGetPrivateLinkResourceSharedPrivateLinkResourceTypeOutputWithContext(context.Context) GetPrivateLinkResourceSharedPrivateLinkResourceTypeOutput
}

type GetPrivateLinkResourceSharedPrivateLinkResourceTypeArgs struct {
	// The description of the resource type that has been onboarded to private link service.
	Description pulumi.StringInput `pulumi:"description"`
	// The  name for the resource that has been onboarded to private link service.
	SubresourceName pulumi.StringInput `pulumi:"subresourceName"`
}

func (GetPrivateLinkResourceSharedPrivateLinkResourceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateLinkResourceSharedPrivateLinkResourceType)(nil)).Elem()
}

func (i GetPrivateLinkResourceSharedPrivateLinkResourceTypeArgs) ToGetPrivateLinkResourceSharedPrivateLinkResourceTypeOutput() GetPrivateLinkResourceSharedPrivateLinkResourceTypeOutput {
	return i.ToGetPrivateLinkResourceSharedPrivateLinkResourceTypeOutputWithContext(context.Background())
}

func (i GetPrivateLinkResourceSharedPrivateLinkResourceTypeArgs) ToGetPrivateLinkResourceSharedPrivateLinkResourceTypeOutputWithContext(ctx context.Context) GetPrivateLinkResourceSharedPrivateLinkResourceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateLinkResourceSharedPrivateLinkResourceTypeOutput)
}

// GetPrivateLinkResourceSharedPrivateLinkResourceTypeArrayInput is an input type that accepts GetPrivateLinkResourceSharedPrivateLinkResourceTypeArray and GetPrivateLinkResourceSharedPrivateLinkResourceTypeArrayOutput values.
// You can construct a concrete instance of `GetPrivateLinkResourceSharedPrivateLinkResourceTypeArrayInput` via:
//
//	GetPrivateLinkResourceSharedPrivateLinkResourceTypeArray{ GetPrivateLinkResourceSharedPrivateLinkResourceTypeArgs{...} }
type GetPrivateLinkResourceSharedPrivateLinkResourceTypeArrayInput interface {
	pulumi.Input

	ToGetPrivateLinkResourceSharedPrivateLinkResourceTypeArrayOutput() GetPrivateLinkResourceSharedPrivateLinkResourceTypeArrayOutput
	ToGetPrivateLinkResourceSharedPrivateLinkResourceTypeArrayOutputWithContext(context.Context) GetPrivateLinkResourceSharedPrivateLinkResourceTypeArrayOutput
}

type GetPrivateLinkResourceSharedPrivateLinkResourceTypeArray []GetPrivateLinkResourceSharedPrivateLinkResourceTypeInput

func (GetPrivateLinkResourceSharedPrivateLinkResourceTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateLinkResourceSharedPrivateLinkResourceType)(nil)).Elem()
}

func (i GetPrivateLinkResourceSharedPrivateLinkResourceTypeArray) ToGetPrivateLinkResourceSharedPrivateLinkResourceTypeArrayOutput() GetPrivateLinkResourceSharedPrivateLinkResourceTypeArrayOutput {
	return i.ToGetPrivateLinkResourceSharedPrivateLinkResourceTypeArrayOutputWithContext(context.Background())
}

func (i GetPrivateLinkResourceSharedPrivateLinkResourceTypeArray) ToGetPrivateLinkResourceSharedPrivateLinkResourceTypeArrayOutputWithContext(ctx context.Context) GetPrivateLinkResourceSharedPrivateLinkResourceTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateLinkResourceSharedPrivateLinkResourceTypeArrayOutput)
}

type GetPrivateLinkResourceSharedPrivateLinkResourceTypeOutput struct{ *pulumi.OutputState }

func (GetPrivateLinkResourceSharedPrivateLinkResourceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateLinkResourceSharedPrivateLinkResourceType)(nil)).Elem()
}

func (o GetPrivateLinkResourceSharedPrivateLinkResourceTypeOutput) ToGetPrivateLinkResourceSharedPrivateLinkResourceTypeOutput() GetPrivateLinkResourceSharedPrivateLinkResourceTypeOutput {
	return o
}

func (o GetPrivateLinkResourceSharedPrivateLinkResourceTypeOutput) ToGetPrivateLinkResourceSharedPrivateLinkResourceTypeOutputWithContext(ctx context.Context) GetPrivateLinkResourceSharedPrivateLinkResourceTypeOutput {
	return o
}

// The description of the resource type that has been onboarded to private link service.
func (o GetPrivateLinkResourceSharedPrivateLinkResourceTypeOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateLinkResourceSharedPrivateLinkResourceType) string { return v.Description }).(pulumi.StringOutput)
}

// The  name for the resource that has been onboarded to private link service.
func (o GetPrivateLinkResourceSharedPrivateLinkResourceTypeOutput) SubresourceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateLinkResourceSharedPrivateLinkResourceType) string { return v.SubresourceName }).(pulumi.StringOutput)
}

type GetPrivateLinkResourceSharedPrivateLinkResourceTypeArrayOutput struct{ *pulumi.OutputState }

func (GetPrivateLinkResourceSharedPrivateLinkResourceTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateLinkResourceSharedPrivateLinkResourceType)(nil)).Elem()
}

func (o GetPrivateLinkResourceSharedPrivateLinkResourceTypeArrayOutput) ToGetPrivateLinkResourceSharedPrivateLinkResourceTypeArrayOutput() GetPrivateLinkResourceSharedPrivateLinkResourceTypeArrayOutput {
	return o
}

func (o GetPrivateLinkResourceSharedPrivateLinkResourceTypeArrayOutput) ToGetPrivateLinkResourceSharedPrivateLinkResourceTypeArrayOutputWithContext(ctx context.Context) GetPrivateLinkResourceSharedPrivateLinkResourceTypeArrayOutput {
	return o
}

func (o GetPrivateLinkResourceSharedPrivateLinkResourceTypeArrayOutput) Index(i pulumi.IntInput) GetPrivateLinkResourceSharedPrivateLinkResourceTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPrivateLinkResourceSharedPrivateLinkResourceType {
		return vs[0].([]GetPrivateLinkResourceSharedPrivateLinkResourceType)[vs[1].(int)]
	}).(GetPrivateLinkResourceSharedPrivateLinkResourceTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HubEventHandlerInput)(nil)).Elem(), HubEventHandlerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HubEventHandlerArrayInput)(nil)).Elem(), HubEventHandlerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HubEventHandlerAuthInput)(nil)).Elem(), HubEventHandlerAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HubEventHandlerAuthPtrInput)(nil)).Elem(), HubEventHandlerAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HubEventListenerInput)(nil)).Elem(), HubEventListenerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HubEventListenerArrayInput)(nil)).Elem(), HubEventListenerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclPrivateEndpointInput)(nil)).Elem(), NetworkAclPrivateEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclPrivateEndpointArrayInput)(nil)).Elem(), NetworkAclPrivateEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclPublicNetworkInput)(nil)).Elem(), NetworkAclPublicNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclPublicNetworkPtrInput)(nil)).Elem(), NetworkAclPublicNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceIdentityInput)(nil)).Elem(), ServiceIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceIdentityPtrInput)(nil)).Elem(), ServiceIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLiveTraceInput)(nil)).Elem(), ServiceLiveTraceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLiveTracePtrInput)(nil)).Elem(), ServiceLiveTraceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateLinkResourceSharedPrivateLinkResourceTypeInput)(nil)).Elem(), GetPrivateLinkResourceSharedPrivateLinkResourceTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateLinkResourceSharedPrivateLinkResourceTypeArrayInput)(nil)).Elem(), GetPrivateLinkResourceSharedPrivateLinkResourceTypeArray{})
	pulumi.RegisterOutputType(HubEventHandlerOutput{})
	pulumi.RegisterOutputType(HubEventHandlerArrayOutput{})
	pulumi.RegisterOutputType(HubEventHandlerAuthOutput{})
	pulumi.RegisterOutputType(HubEventHandlerAuthPtrOutput{})
	pulumi.RegisterOutputType(HubEventListenerOutput{})
	pulumi.RegisterOutputType(HubEventListenerArrayOutput{})
	pulumi.RegisterOutputType(NetworkAclPrivateEndpointOutput{})
	pulumi.RegisterOutputType(NetworkAclPrivateEndpointArrayOutput{})
	pulumi.RegisterOutputType(NetworkAclPublicNetworkOutput{})
	pulumi.RegisterOutputType(NetworkAclPublicNetworkPtrOutput{})
	pulumi.RegisterOutputType(ServiceIdentityOutput{})
	pulumi.RegisterOutputType(ServiceIdentityPtrOutput{})
	pulumi.RegisterOutputType(ServiceLiveTraceOutput{})
	pulumi.RegisterOutputType(ServiceLiveTracePtrOutput{})
	pulumi.RegisterOutputType(GetPrivateLinkResourceSharedPrivateLinkResourceTypeOutput{})
	pulumi.RegisterOutputType(GetPrivateLinkResourceSharedPrivateLinkResourceTypeArrayOutput{})
}
