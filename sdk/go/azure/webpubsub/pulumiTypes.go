// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package webpubsub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type HubEventHandler struct {
	// An `auth` block as defined below.
	Auth *HubEventHandlerAuth `pulumi:"auth"`
	// Specify the list of system events. Supported values are `connect`, `connected`
	// and `disconnected`.
	SystemEvents []string `pulumi:"systemEvents"`
	// The Event Handler URL Template. Two predefined parameters `{hub}` and `{event}` are
	// available to use in the template. The value of the EventHandler URL is dynamically calculated when the client request
	// comes in. Example: `http://example.com/api/{hub}/{event}`.
	UrlTemplate string `pulumi:"urlTemplate"`
	// Specify the matching event names. There are 3 kind of patterns supported:
	// - `*` matches any event name
	// - `,` Combine multiple events with `,` for example `event1,event2`, it matches event `event1` and `event2`
	// - The single event name, for example `event1`, it matches `event1`.
	UserEventPattern *string `pulumi:"userEventPattern"`
}

// HubEventHandlerInput is an input type that accepts HubEventHandlerArgs and HubEventHandlerOutput values.
// You can construct a concrete instance of `HubEventHandlerInput` via:
//
//          HubEventHandlerArgs{...}
type HubEventHandlerInput interface {
	pulumi.Input

	ToHubEventHandlerOutput() HubEventHandlerOutput
	ToHubEventHandlerOutputWithContext(context.Context) HubEventHandlerOutput
}

type HubEventHandlerArgs struct {
	// An `auth` block as defined below.
	Auth HubEventHandlerAuthPtrInput `pulumi:"auth"`
	// Specify the list of system events. Supported values are `connect`, `connected`
	// and `disconnected`.
	SystemEvents pulumi.StringArrayInput `pulumi:"systemEvents"`
	// The Event Handler URL Template. Two predefined parameters `{hub}` and `{event}` are
	// available to use in the template. The value of the EventHandler URL is dynamically calculated when the client request
	// comes in. Example: `http://example.com/api/{hub}/{event}`.
	UrlTemplate pulumi.StringInput `pulumi:"urlTemplate"`
	// Specify the matching event names. There are 3 kind of patterns supported:
	// - `*` matches any event name
	// - `,` Combine multiple events with `,` for example `event1,event2`, it matches event `event1` and `event2`
	// - The single event name, for example `event1`, it matches `event1`.
	UserEventPattern pulumi.StringPtrInput `pulumi:"userEventPattern"`
}

func (HubEventHandlerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HubEventHandler)(nil)).Elem()
}

func (i HubEventHandlerArgs) ToHubEventHandlerOutput() HubEventHandlerOutput {
	return i.ToHubEventHandlerOutputWithContext(context.Background())
}

func (i HubEventHandlerArgs) ToHubEventHandlerOutputWithContext(ctx context.Context) HubEventHandlerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubEventHandlerOutput)
}

// HubEventHandlerArrayInput is an input type that accepts HubEventHandlerArray and HubEventHandlerArrayOutput values.
// You can construct a concrete instance of `HubEventHandlerArrayInput` via:
//
//          HubEventHandlerArray{ HubEventHandlerArgs{...} }
type HubEventHandlerArrayInput interface {
	pulumi.Input

	ToHubEventHandlerArrayOutput() HubEventHandlerArrayOutput
	ToHubEventHandlerArrayOutputWithContext(context.Context) HubEventHandlerArrayOutput
}

type HubEventHandlerArray []HubEventHandlerInput

func (HubEventHandlerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HubEventHandler)(nil)).Elem()
}

func (i HubEventHandlerArray) ToHubEventHandlerArrayOutput() HubEventHandlerArrayOutput {
	return i.ToHubEventHandlerArrayOutputWithContext(context.Background())
}

func (i HubEventHandlerArray) ToHubEventHandlerArrayOutputWithContext(ctx context.Context) HubEventHandlerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubEventHandlerArrayOutput)
}

type HubEventHandlerOutput struct{ *pulumi.OutputState }

func (HubEventHandlerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HubEventHandler)(nil)).Elem()
}

func (o HubEventHandlerOutput) ToHubEventHandlerOutput() HubEventHandlerOutput {
	return o
}

func (o HubEventHandlerOutput) ToHubEventHandlerOutputWithContext(ctx context.Context) HubEventHandlerOutput {
	return o
}

// An `auth` block as defined below.
func (o HubEventHandlerOutput) Auth() HubEventHandlerAuthPtrOutput {
	return o.ApplyT(func(v HubEventHandler) *HubEventHandlerAuth { return v.Auth }).(HubEventHandlerAuthPtrOutput)
}

// Specify the list of system events. Supported values are `connect`, `connected`
// and `disconnected`.
func (o HubEventHandlerOutput) SystemEvents() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HubEventHandler) []string { return v.SystemEvents }).(pulumi.StringArrayOutput)
}

// The Event Handler URL Template. Two predefined parameters `{hub}` and `{event}` are
// available to use in the template. The value of the EventHandler URL is dynamically calculated when the client request
// comes in. Example: `http://example.com/api/{hub}/{event}`.
func (o HubEventHandlerOutput) UrlTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v HubEventHandler) string { return v.UrlTemplate }).(pulumi.StringOutput)
}

// Specify the matching event names. There are 3 kind of patterns supported:
// - `*` matches any event name
// - `,` Combine multiple events with `,` for example `event1,event2`, it matches event `event1` and `event2`
// - The single event name, for example `event1`, it matches `event1`.
func (o HubEventHandlerOutput) UserEventPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HubEventHandler) *string { return v.UserEventPattern }).(pulumi.StringPtrOutput)
}

type HubEventHandlerArrayOutput struct{ *pulumi.OutputState }

func (HubEventHandlerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HubEventHandler)(nil)).Elem()
}

func (o HubEventHandlerArrayOutput) ToHubEventHandlerArrayOutput() HubEventHandlerArrayOutput {
	return o
}

func (o HubEventHandlerArrayOutput) ToHubEventHandlerArrayOutputWithContext(ctx context.Context) HubEventHandlerArrayOutput {
	return o
}

func (o HubEventHandlerArrayOutput) Index(i pulumi.IntInput) HubEventHandlerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HubEventHandler {
		return vs[0].([]HubEventHandler)[vs[1].(int)]
	}).(HubEventHandlerOutput)
}

type HubEventHandlerAuth struct {
	// Specify the identity ID of the target resource.
	ManagedIdentityId string `pulumi:"managedIdentityId"`
}

// HubEventHandlerAuthInput is an input type that accepts HubEventHandlerAuthArgs and HubEventHandlerAuthOutput values.
// You can construct a concrete instance of `HubEventHandlerAuthInput` via:
//
//          HubEventHandlerAuthArgs{...}
type HubEventHandlerAuthInput interface {
	pulumi.Input

	ToHubEventHandlerAuthOutput() HubEventHandlerAuthOutput
	ToHubEventHandlerAuthOutputWithContext(context.Context) HubEventHandlerAuthOutput
}

type HubEventHandlerAuthArgs struct {
	// Specify the identity ID of the target resource.
	ManagedIdentityId pulumi.StringInput `pulumi:"managedIdentityId"`
}

func (HubEventHandlerAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HubEventHandlerAuth)(nil)).Elem()
}

func (i HubEventHandlerAuthArgs) ToHubEventHandlerAuthOutput() HubEventHandlerAuthOutput {
	return i.ToHubEventHandlerAuthOutputWithContext(context.Background())
}

func (i HubEventHandlerAuthArgs) ToHubEventHandlerAuthOutputWithContext(ctx context.Context) HubEventHandlerAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubEventHandlerAuthOutput)
}

func (i HubEventHandlerAuthArgs) ToHubEventHandlerAuthPtrOutput() HubEventHandlerAuthPtrOutput {
	return i.ToHubEventHandlerAuthPtrOutputWithContext(context.Background())
}

func (i HubEventHandlerAuthArgs) ToHubEventHandlerAuthPtrOutputWithContext(ctx context.Context) HubEventHandlerAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubEventHandlerAuthOutput).ToHubEventHandlerAuthPtrOutputWithContext(ctx)
}

// HubEventHandlerAuthPtrInput is an input type that accepts HubEventHandlerAuthArgs, HubEventHandlerAuthPtr and HubEventHandlerAuthPtrOutput values.
// You can construct a concrete instance of `HubEventHandlerAuthPtrInput` via:
//
//          HubEventHandlerAuthArgs{...}
//
//  or:
//
//          nil
type HubEventHandlerAuthPtrInput interface {
	pulumi.Input

	ToHubEventHandlerAuthPtrOutput() HubEventHandlerAuthPtrOutput
	ToHubEventHandlerAuthPtrOutputWithContext(context.Context) HubEventHandlerAuthPtrOutput
}

type hubEventHandlerAuthPtrType HubEventHandlerAuthArgs

func HubEventHandlerAuthPtr(v *HubEventHandlerAuthArgs) HubEventHandlerAuthPtrInput {
	return (*hubEventHandlerAuthPtrType)(v)
}

func (*hubEventHandlerAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HubEventHandlerAuth)(nil)).Elem()
}

func (i *hubEventHandlerAuthPtrType) ToHubEventHandlerAuthPtrOutput() HubEventHandlerAuthPtrOutput {
	return i.ToHubEventHandlerAuthPtrOutputWithContext(context.Background())
}

func (i *hubEventHandlerAuthPtrType) ToHubEventHandlerAuthPtrOutputWithContext(ctx context.Context) HubEventHandlerAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubEventHandlerAuthPtrOutput)
}

type HubEventHandlerAuthOutput struct{ *pulumi.OutputState }

func (HubEventHandlerAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HubEventHandlerAuth)(nil)).Elem()
}

func (o HubEventHandlerAuthOutput) ToHubEventHandlerAuthOutput() HubEventHandlerAuthOutput {
	return o
}

func (o HubEventHandlerAuthOutput) ToHubEventHandlerAuthOutputWithContext(ctx context.Context) HubEventHandlerAuthOutput {
	return o
}

func (o HubEventHandlerAuthOutput) ToHubEventHandlerAuthPtrOutput() HubEventHandlerAuthPtrOutput {
	return o.ToHubEventHandlerAuthPtrOutputWithContext(context.Background())
}

func (o HubEventHandlerAuthOutput) ToHubEventHandlerAuthPtrOutputWithContext(ctx context.Context) HubEventHandlerAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HubEventHandlerAuth) *HubEventHandlerAuth {
		return &v
	}).(HubEventHandlerAuthPtrOutput)
}

// Specify the identity ID of the target resource.
func (o HubEventHandlerAuthOutput) ManagedIdentityId() pulumi.StringOutput {
	return o.ApplyT(func(v HubEventHandlerAuth) string { return v.ManagedIdentityId }).(pulumi.StringOutput)
}

type HubEventHandlerAuthPtrOutput struct{ *pulumi.OutputState }

func (HubEventHandlerAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HubEventHandlerAuth)(nil)).Elem()
}

func (o HubEventHandlerAuthPtrOutput) ToHubEventHandlerAuthPtrOutput() HubEventHandlerAuthPtrOutput {
	return o
}

func (o HubEventHandlerAuthPtrOutput) ToHubEventHandlerAuthPtrOutputWithContext(ctx context.Context) HubEventHandlerAuthPtrOutput {
	return o
}

func (o HubEventHandlerAuthPtrOutput) Elem() HubEventHandlerAuthOutput {
	return o.ApplyT(func(v *HubEventHandlerAuth) HubEventHandlerAuth {
		if v != nil {
			return *v
		}
		var ret HubEventHandlerAuth
		return ret
	}).(HubEventHandlerAuthOutput)
}

// Specify the identity ID of the target resource.
func (o HubEventHandlerAuthPtrOutput) ManagedIdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HubEventHandlerAuth) *string {
		if v == nil {
			return nil
		}
		return &v.ManagedIdentityId
	}).(pulumi.StringPtrOutput)
}

type ServiceLiveTrace struct {
	// Whether the log category `ConnectivityLogs` is enabled? Defaults to `true`
	ConnectivityLogsEnabled *bool `pulumi:"connectivityLogsEnabled"`
	// Whether the live trace is enabled? Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Whether the log category `HttpRequestLogs` is enabled? Defaults to `true`
	HttpRequestLogsEnabled *bool `pulumi:"httpRequestLogsEnabled"`
	// Whether the log category `MessagingLogs` is enabled? Defaults to `true`
	MessagingLogsEnabled *bool `pulumi:"messagingLogsEnabled"`
}

// ServiceLiveTraceInput is an input type that accepts ServiceLiveTraceArgs and ServiceLiveTraceOutput values.
// You can construct a concrete instance of `ServiceLiveTraceInput` via:
//
//          ServiceLiveTraceArgs{...}
type ServiceLiveTraceInput interface {
	pulumi.Input

	ToServiceLiveTraceOutput() ServiceLiveTraceOutput
	ToServiceLiveTraceOutputWithContext(context.Context) ServiceLiveTraceOutput
}

type ServiceLiveTraceArgs struct {
	// Whether the log category `ConnectivityLogs` is enabled? Defaults to `true`
	ConnectivityLogsEnabled pulumi.BoolPtrInput `pulumi:"connectivityLogsEnabled"`
	// Whether the live trace is enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Whether the log category `HttpRequestLogs` is enabled? Defaults to `true`
	HttpRequestLogsEnabled pulumi.BoolPtrInput `pulumi:"httpRequestLogsEnabled"`
	// Whether the log category `MessagingLogs` is enabled? Defaults to `true`
	MessagingLogsEnabled pulumi.BoolPtrInput `pulumi:"messagingLogsEnabled"`
}

func (ServiceLiveTraceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLiveTrace)(nil)).Elem()
}

func (i ServiceLiveTraceArgs) ToServiceLiveTraceOutput() ServiceLiveTraceOutput {
	return i.ToServiceLiveTraceOutputWithContext(context.Background())
}

func (i ServiceLiveTraceArgs) ToServiceLiveTraceOutputWithContext(ctx context.Context) ServiceLiveTraceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLiveTraceOutput)
}

func (i ServiceLiveTraceArgs) ToServiceLiveTracePtrOutput() ServiceLiveTracePtrOutput {
	return i.ToServiceLiveTracePtrOutputWithContext(context.Background())
}

func (i ServiceLiveTraceArgs) ToServiceLiveTracePtrOutputWithContext(ctx context.Context) ServiceLiveTracePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLiveTraceOutput).ToServiceLiveTracePtrOutputWithContext(ctx)
}

// ServiceLiveTracePtrInput is an input type that accepts ServiceLiveTraceArgs, ServiceLiveTracePtr and ServiceLiveTracePtrOutput values.
// You can construct a concrete instance of `ServiceLiveTracePtrInput` via:
//
//          ServiceLiveTraceArgs{...}
//
//  or:
//
//          nil
type ServiceLiveTracePtrInput interface {
	pulumi.Input

	ToServiceLiveTracePtrOutput() ServiceLiveTracePtrOutput
	ToServiceLiveTracePtrOutputWithContext(context.Context) ServiceLiveTracePtrOutput
}

type serviceLiveTracePtrType ServiceLiveTraceArgs

func ServiceLiveTracePtr(v *ServiceLiveTraceArgs) ServiceLiveTracePtrInput {
	return (*serviceLiveTracePtrType)(v)
}

func (*serviceLiveTracePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLiveTrace)(nil)).Elem()
}

func (i *serviceLiveTracePtrType) ToServiceLiveTracePtrOutput() ServiceLiveTracePtrOutput {
	return i.ToServiceLiveTracePtrOutputWithContext(context.Background())
}

func (i *serviceLiveTracePtrType) ToServiceLiveTracePtrOutputWithContext(ctx context.Context) ServiceLiveTracePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLiveTracePtrOutput)
}

type ServiceLiveTraceOutput struct{ *pulumi.OutputState }

func (ServiceLiveTraceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLiveTrace)(nil)).Elem()
}

func (o ServiceLiveTraceOutput) ToServiceLiveTraceOutput() ServiceLiveTraceOutput {
	return o
}

func (o ServiceLiveTraceOutput) ToServiceLiveTraceOutputWithContext(ctx context.Context) ServiceLiveTraceOutput {
	return o
}

func (o ServiceLiveTraceOutput) ToServiceLiveTracePtrOutput() ServiceLiveTracePtrOutput {
	return o.ToServiceLiveTracePtrOutputWithContext(context.Background())
}

func (o ServiceLiveTraceOutput) ToServiceLiveTracePtrOutputWithContext(ctx context.Context) ServiceLiveTracePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceLiveTrace) *ServiceLiveTrace {
		return &v
	}).(ServiceLiveTracePtrOutput)
}

// Whether the log category `ConnectivityLogs` is enabled? Defaults to `true`
func (o ServiceLiveTraceOutput) ConnectivityLogsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceLiveTrace) *bool { return v.ConnectivityLogsEnabled }).(pulumi.BoolPtrOutput)
}

// Whether the live trace is enabled? Defaults to `true`.
func (o ServiceLiveTraceOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceLiveTrace) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Whether the log category `HttpRequestLogs` is enabled? Defaults to `true`
func (o ServiceLiveTraceOutput) HttpRequestLogsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceLiveTrace) *bool { return v.HttpRequestLogsEnabled }).(pulumi.BoolPtrOutput)
}

// Whether the log category `MessagingLogs` is enabled? Defaults to `true`
func (o ServiceLiveTraceOutput) MessagingLogsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceLiveTrace) *bool { return v.MessagingLogsEnabled }).(pulumi.BoolPtrOutput)
}

type ServiceLiveTracePtrOutput struct{ *pulumi.OutputState }

func (ServiceLiveTracePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLiveTrace)(nil)).Elem()
}

func (o ServiceLiveTracePtrOutput) ToServiceLiveTracePtrOutput() ServiceLiveTracePtrOutput {
	return o
}

func (o ServiceLiveTracePtrOutput) ToServiceLiveTracePtrOutputWithContext(ctx context.Context) ServiceLiveTracePtrOutput {
	return o
}

func (o ServiceLiveTracePtrOutput) Elem() ServiceLiveTraceOutput {
	return o.ApplyT(func(v *ServiceLiveTrace) ServiceLiveTrace {
		if v != nil {
			return *v
		}
		var ret ServiceLiveTrace
		return ret
	}).(ServiceLiveTraceOutput)
}

// Whether the log category `ConnectivityLogs` is enabled? Defaults to `true`
func (o ServiceLiveTracePtrOutput) ConnectivityLogsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceLiveTrace) *bool {
		if v == nil {
			return nil
		}
		return v.ConnectivityLogsEnabled
	}).(pulumi.BoolPtrOutput)
}

// Whether the live trace is enabled? Defaults to `true`.
func (o ServiceLiveTracePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceLiveTrace) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Whether the log category `HttpRequestLogs` is enabled? Defaults to `true`
func (o ServiceLiveTracePtrOutput) HttpRequestLogsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceLiveTrace) *bool {
		if v == nil {
			return nil
		}
		return v.HttpRequestLogsEnabled
	}).(pulumi.BoolPtrOutput)
}

// Whether the log category `MessagingLogs` is enabled? Defaults to `true`
func (o ServiceLiveTracePtrOutput) MessagingLogsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceLiveTrace) *bool {
		if v == nil {
			return nil
		}
		return v.MessagingLogsEnabled
	}).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HubEventHandlerInput)(nil)).Elem(), HubEventHandlerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HubEventHandlerArrayInput)(nil)).Elem(), HubEventHandlerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HubEventHandlerAuthInput)(nil)).Elem(), HubEventHandlerAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HubEventHandlerAuthPtrInput)(nil)).Elem(), HubEventHandlerAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLiveTraceInput)(nil)).Elem(), ServiceLiveTraceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLiveTracePtrInput)(nil)).Elem(), ServiceLiveTraceArgs{})
	pulumi.RegisterOutputType(HubEventHandlerOutput{})
	pulumi.RegisterOutputType(HubEventHandlerArrayOutput{})
	pulumi.RegisterOutputType(HubEventHandlerAuthOutput{})
	pulumi.RegisterOutputType(HubEventHandlerAuthPtrOutput{})
	pulumi.RegisterOutputType(ServiceLiveTraceOutput{})
	pulumi.RegisterOutputType(ServiceLiveTracePtrOutput{})
}
