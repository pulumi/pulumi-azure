// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package webpubsub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages the hub settings for a Web Pubsub.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/authorization"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/webpubsub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("east us"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleUserAssignedIdentity, err := authorization.NewUserAssignedIdentity(ctx, "exampleUserAssignedIdentity", &authorization.UserAssignedIdentityArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//			})
//			if err != nil {
//				return err
//			}
//			exampleService, err := webpubsub.NewService(ctx, "exampleService", &webpubsub.ServiceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku:               pulumi.String("Standard_S1"),
//				Capacity:          pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = webpubsub.NewHub(ctx, "exampleHub", &webpubsub.HubArgs{
//				WebPubsubId: exampleService.ID(),
//				EventHandlers: webpubsub.HubEventHandlerArray{
//					&webpubsub.HubEventHandlerArgs{
//						UrlTemplate:      pulumi.String("https://test.com/api/{hub}/{event}"),
//						UserEventPattern: pulumi.String("*"),
//						SystemEvents: pulumi.StringArray{
//							pulumi.String("connect"),
//							pulumi.String("connected"),
//						},
//					},
//					&webpubsub.HubEventHandlerArgs{
//						UrlTemplate:      pulumi.String("https://test.com/api/{hub}/{event}"),
//						UserEventPattern: pulumi.String("event1, event2"),
//						SystemEvents: pulumi.StringArray{
//							pulumi.String("connected"),
//						},
//						Auth: &webpubsub.HubEventHandlerAuthArgs{
//							ManagedIdentityId: exampleUserAssignedIdentity.ID(),
//						},
//					},
//				},
//				AnonymousConnectionsEnabled: pulumi.Bool(true),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				exampleService,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Web Pubsub Hub can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:webpubsub/hub:Hub example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.SignalRService/webPubSub/webPubSub1/hubs/webPubSubhub1
//
// ```
type Hub struct {
	pulumi.CustomResourceState

	// Is anonymous connections are allowed for this hub? Defaults to `false`.
	// Possible values are `true`, `false`.
	AnonymousConnectionsEnabled pulumi.BoolPtrOutput `pulumi:"anonymousConnectionsEnabled"`
	// An `eventHandler` block as defined below.
	EventHandlers HubEventHandlerArrayOutput `pulumi:"eventHandlers"`
	// The name of the Web Pubsub hub service. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specify the id of the Web Pubsub. Changing this forces a new resource to be created.
	WebPubsubId pulumi.StringOutput `pulumi:"webPubsubId"`
}

// NewHub registers a new resource with the given unique name, arguments, and options.
func NewHub(ctx *pulumi.Context,
	name string, args *HubArgs, opts ...pulumi.ResourceOption) (*Hub, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.WebPubsubId == nil {
		return nil, errors.New("invalid value for required argument 'WebPubsubId'")
	}
	var resource Hub
	err := ctx.RegisterResource("azure:webpubsub/hub:Hub", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHub gets an existing Hub resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHub(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HubState, opts ...pulumi.ResourceOption) (*Hub, error) {
	var resource Hub
	err := ctx.ReadResource("azure:webpubsub/hub:Hub", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Hub resources.
type hubState struct {
	// Is anonymous connections are allowed for this hub? Defaults to `false`.
	// Possible values are `true`, `false`.
	AnonymousConnectionsEnabled *bool `pulumi:"anonymousConnectionsEnabled"`
	// An `eventHandler` block as defined below.
	EventHandlers []HubEventHandler `pulumi:"eventHandlers"`
	// The name of the Web Pubsub hub service. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specify the id of the Web Pubsub. Changing this forces a new resource to be created.
	WebPubsubId *string `pulumi:"webPubsubId"`
}

type HubState struct {
	// Is anonymous connections are allowed for this hub? Defaults to `false`.
	// Possible values are `true`, `false`.
	AnonymousConnectionsEnabled pulumi.BoolPtrInput
	// An `eventHandler` block as defined below.
	EventHandlers HubEventHandlerArrayInput
	// The name of the Web Pubsub hub service. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specify the id of the Web Pubsub. Changing this forces a new resource to be created.
	WebPubsubId pulumi.StringPtrInput
}

func (HubState) ElementType() reflect.Type {
	return reflect.TypeOf((*hubState)(nil)).Elem()
}

type hubArgs struct {
	// Is anonymous connections are allowed for this hub? Defaults to `false`.
	// Possible values are `true`, `false`.
	AnonymousConnectionsEnabled *bool `pulumi:"anonymousConnectionsEnabled"`
	// An `eventHandler` block as defined below.
	EventHandlers []HubEventHandler `pulumi:"eventHandlers"`
	// The name of the Web Pubsub hub service. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specify the id of the Web Pubsub. Changing this forces a new resource to be created.
	WebPubsubId string `pulumi:"webPubsubId"`
}

// The set of arguments for constructing a Hub resource.
type HubArgs struct {
	// Is anonymous connections are allowed for this hub? Defaults to `false`.
	// Possible values are `true`, `false`.
	AnonymousConnectionsEnabled pulumi.BoolPtrInput
	// An `eventHandler` block as defined below.
	EventHandlers HubEventHandlerArrayInput
	// The name of the Web Pubsub hub service. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specify the id of the Web Pubsub. Changing this forces a new resource to be created.
	WebPubsubId pulumi.StringInput
}

func (HubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hubArgs)(nil)).Elem()
}

type HubInput interface {
	pulumi.Input

	ToHubOutput() HubOutput
	ToHubOutputWithContext(ctx context.Context) HubOutput
}

func (*Hub) ElementType() reflect.Type {
	return reflect.TypeOf((**Hub)(nil)).Elem()
}

func (i *Hub) ToHubOutput() HubOutput {
	return i.ToHubOutputWithContext(context.Background())
}

func (i *Hub) ToHubOutputWithContext(ctx context.Context) HubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubOutput)
}

// HubArrayInput is an input type that accepts HubArray and HubArrayOutput values.
// You can construct a concrete instance of `HubArrayInput` via:
//
//	HubArray{ HubArgs{...} }
type HubArrayInput interface {
	pulumi.Input

	ToHubArrayOutput() HubArrayOutput
	ToHubArrayOutputWithContext(context.Context) HubArrayOutput
}

type HubArray []HubInput

func (HubArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Hub)(nil)).Elem()
}

func (i HubArray) ToHubArrayOutput() HubArrayOutput {
	return i.ToHubArrayOutputWithContext(context.Background())
}

func (i HubArray) ToHubArrayOutputWithContext(ctx context.Context) HubArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubArrayOutput)
}

// HubMapInput is an input type that accepts HubMap and HubMapOutput values.
// You can construct a concrete instance of `HubMapInput` via:
//
//	HubMap{ "key": HubArgs{...} }
type HubMapInput interface {
	pulumi.Input

	ToHubMapOutput() HubMapOutput
	ToHubMapOutputWithContext(context.Context) HubMapOutput
}

type HubMap map[string]HubInput

func (HubMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Hub)(nil)).Elem()
}

func (i HubMap) ToHubMapOutput() HubMapOutput {
	return i.ToHubMapOutputWithContext(context.Background())
}

func (i HubMap) ToHubMapOutputWithContext(ctx context.Context) HubMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubMapOutput)
}

type HubOutput struct{ *pulumi.OutputState }

func (HubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hub)(nil)).Elem()
}

func (o HubOutput) ToHubOutput() HubOutput {
	return o
}

func (o HubOutput) ToHubOutputWithContext(ctx context.Context) HubOutput {
	return o
}

// Is anonymous connections are allowed for this hub? Defaults to `false`.
// Possible values are `true`, `false`.
func (o HubOutput) AnonymousConnectionsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Hub) pulumi.BoolPtrOutput { return v.AnonymousConnectionsEnabled }).(pulumi.BoolPtrOutput)
}

// An `eventHandler` block as defined below.
func (o HubOutput) EventHandlers() HubEventHandlerArrayOutput {
	return o.ApplyT(func(v *Hub) HubEventHandlerArrayOutput { return v.EventHandlers }).(HubEventHandlerArrayOutput)
}

// The name of the Web Pubsub hub service. Changing this forces a new resource to be created.
func (o HubOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specify the id of the Web Pubsub. Changing this forces a new resource to be created.
func (o HubOutput) WebPubsubId() pulumi.StringOutput {
	return o.ApplyT(func(v *Hub) pulumi.StringOutput { return v.WebPubsubId }).(pulumi.StringOutput)
}

type HubArrayOutput struct{ *pulumi.OutputState }

func (HubArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Hub)(nil)).Elem()
}

func (o HubArrayOutput) ToHubArrayOutput() HubArrayOutput {
	return o
}

func (o HubArrayOutput) ToHubArrayOutputWithContext(ctx context.Context) HubArrayOutput {
	return o
}

func (o HubArrayOutput) Index(i pulumi.IntInput) HubOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Hub {
		return vs[0].([]*Hub)[vs[1].(int)]
	}).(HubOutput)
}

type HubMapOutput struct{ *pulumi.OutputState }

func (HubMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Hub)(nil)).Elem()
}

func (o HubMapOutput) ToHubMapOutput() HubMapOutput {
	return o
}

func (o HubMapOutput) ToHubMapOutputWithContext(ctx context.Context) HubMapOutput {
	return o
}

func (o HubMapOutput) MapIndex(k pulumi.StringInput) HubOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Hub {
		return vs[0].(map[string]*Hub)[vs[1].(string)]
	}).(HubOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HubInput)(nil)).Elem(), &Hub{})
	pulumi.RegisterInputType(reflect.TypeOf((*HubArrayInput)(nil)).Elem(), HubArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HubMapInput)(nil)).Elem(), HubMap{})
	pulumi.RegisterOutputType(HubOutput{})
	pulumi.RegisterOutputType(HubArrayOutput{})
	pulumi.RegisterOutputType(HubMapOutput{})
}
