// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datalake

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Data Lake Store.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/datalake"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		example, err := datalake.LookupStore(ctx, &datalake.LookupStoreArgs{
// 			Name:              "testdatalake",
// 			ResourceGroupName: "testdatalake",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("dataLakeStoreId", example.Id)
// 		return nil
// 	})
// }
// ```
func LookupStore(ctx *pulumi.Context, args *LookupStoreArgs, opts ...pulumi.InvokeOption) (*LookupStoreResult, error) {
	var rv LookupStoreResult
	err := ctx.Invoke("azure:datalake/getStore:getStore", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStore.
type LookupStoreArgs struct {
	// The name of the Data Lake Store.
	Name string `pulumi:"name"`
	// The Name of the Resource Group where the Data Lake Store exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getStore.
type LookupStoreResult struct {
	// the Encryption State of this Data Lake Store Account, such as `Enabled` or `Disabled`.
	EncryptionState string `pulumi:"encryptionState"`
	// the Encryption Type used for this Data Lake Store Account.
	EncryptionType string `pulumi:"encryptionType"`
	// are Azure Service IP's allowed through the firewall?
	FirewallAllowAzureIps string `pulumi:"firewallAllowAzureIps"`
	// the state of the firewall, such as `Enabled` or `Disabled`.
	FirewallState string `pulumi:"firewallState"`
	// The provider-assigned unique ID for this managed resource.
	Id                string `pulumi:"id"`
	Location          string `pulumi:"location"`
	Name              string `pulumi:"name"`
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the Data Lake Store.
	Tags map[string]string `pulumi:"tags"`
	// Current monthly commitment tier for the account.
	Tier string `pulumi:"tier"`
}

func LookupStoreOutput(ctx *pulumi.Context, args LookupStoreOutputArgs, opts ...pulumi.InvokeOption) LookupStoreResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupStoreResult, error) {
			args := v.(LookupStoreArgs)
			r, err := LookupStore(ctx, &args, opts...)
			return *r, err
		}).(LookupStoreResultOutput)
}

// A collection of arguments for invoking getStore.
type LookupStoreOutputArgs struct {
	// The name of the Data Lake Store.
	Name pulumi.StringInput `pulumi:"name"`
	// The Name of the Resource Group where the Data Lake Store exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupStoreOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStoreArgs)(nil)).Elem()
}

// A collection of values returned by getStore.
type LookupStoreResultOutput struct{ *pulumi.OutputState }

func (LookupStoreResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStoreResult)(nil)).Elem()
}

func (o LookupStoreResultOutput) ToLookupStoreResultOutput() LookupStoreResultOutput {
	return o
}

func (o LookupStoreResultOutput) ToLookupStoreResultOutputWithContext(ctx context.Context) LookupStoreResultOutput {
	return o
}

// the Encryption State of this Data Lake Store Account, such as `Enabled` or `Disabled`.
func (o LookupStoreResultOutput) EncryptionState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStoreResult) string { return v.EncryptionState }).(pulumi.StringOutput)
}

// the Encryption Type used for this Data Lake Store Account.
func (o LookupStoreResultOutput) EncryptionType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStoreResult) string { return v.EncryptionType }).(pulumi.StringOutput)
}

// are Azure Service IP's allowed through the firewall?
func (o LookupStoreResultOutput) FirewallAllowAzureIps() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStoreResult) string { return v.FirewallAllowAzureIps }).(pulumi.StringOutput)
}

// the state of the firewall, such as `Enabled` or `Disabled`.
func (o LookupStoreResultOutput) FirewallState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStoreResult) string { return v.FirewallState }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupStoreResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStoreResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupStoreResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStoreResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o LookupStoreResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStoreResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupStoreResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStoreResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the Data Lake Store.
func (o LookupStoreResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupStoreResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Current monthly commitment tier for the account.
func (o LookupStoreResultOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStoreResult) string { return v.Tier }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupStoreResultOutput{})
}
