// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datalake

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allows you to add, update, or remove an Azure Data Lake Store to a subnet of a virtual network.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/datalake"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/network"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("northeurope"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		vnet, err := network.NewVirtualNetwork(ctx, "vnet", &network.VirtualNetworkArgs{
// 			AddressSpaces: pulumi.StringArray{
// 				pulumi.String("10.7.29.0/29"),
// 			},
// 			Location:          exampleResourceGroup.Location,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		subnet, err := network.NewSubnet(ctx, "subnet", &network.SubnetArgs{
// 			ResourceGroupName:  exampleResourceGroup.Name,
// 			VirtualNetworkName: vnet.Name,
// 			AddressPrefixes: pulumi.StringArray{
// 				pulumi.String("10.7.29.0/29"),
// 			},
// 			ServiceEndpoints: pulumi.StringArray{
// 				pulumi.String("Microsoft.AzureActiveDirectory"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleStore, err := datalake.NewStore(ctx, "exampleStore", &datalake.StoreArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			Location:          exampleResourceGroup.Location,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = datalake.NewStoreVirtualNetworkRule(ctx, "adlsvnetrule", &datalake.StoreVirtualNetworkRuleArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			AccountName:       exampleStore.Name,
// 			SubnetId:          subnet.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Data Lake Store Virtual Network Rules can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:datalake/storeVirtualNetworkRule:StoreVirtualNetworkRule rule1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.DataLakeStore/accounts/myaccount/virtualNetworkRules/vnetrulename
// ```
type StoreVirtualNetworkRule struct {
	pulumi.CustomResourceState

	// The name of the Data Lake Store to which this Data Lake Store virtual network rule will be applied to. Changing this forces a new resource to be created.
	AccountName pulumi.StringOutput `pulumi:"accountName"`
	// The name of the Data Lake Store virtual network rule. Changing this forces a new resource to be created. Cannot be empty and must only contain alphanumeric characters, underscores, periods and hyphens. Cannot start with a period, underscore or hyphen, and cannot end with a period and a hyphen.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the resource group where the Data Lake Store resides. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The ID of the subnet that the Data Lake Store will be connected to.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
}

// NewStoreVirtualNetworkRule registers a new resource with the given unique name, arguments, and options.
func NewStoreVirtualNetworkRule(ctx *pulumi.Context,
	name string, args *StoreVirtualNetworkRuleArgs, opts ...pulumi.ResourceOption) (*StoreVirtualNetworkRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	var resource StoreVirtualNetworkRule
	err := ctx.RegisterResource("azure:datalake/storeVirtualNetworkRule:StoreVirtualNetworkRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStoreVirtualNetworkRule gets an existing StoreVirtualNetworkRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStoreVirtualNetworkRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StoreVirtualNetworkRuleState, opts ...pulumi.ResourceOption) (*StoreVirtualNetworkRule, error) {
	var resource StoreVirtualNetworkRule
	err := ctx.ReadResource("azure:datalake/storeVirtualNetworkRule:StoreVirtualNetworkRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StoreVirtualNetworkRule resources.
type storeVirtualNetworkRuleState struct {
	// The name of the Data Lake Store to which this Data Lake Store virtual network rule will be applied to. Changing this forces a new resource to be created.
	AccountName *string `pulumi:"accountName"`
	// The name of the Data Lake Store virtual network rule. Changing this forces a new resource to be created. Cannot be empty and must only contain alphanumeric characters, underscores, periods and hyphens. Cannot start with a period, underscore or hyphen, and cannot end with a period and a hyphen.
	Name *string `pulumi:"name"`
	// The name of the resource group where the Data Lake Store resides. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The ID of the subnet that the Data Lake Store will be connected to.
	SubnetId *string `pulumi:"subnetId"`
}

type StoreVirtualNetworkRuleState struct {
	// The name of the Data Lake Store to which this Data Lake Store virtual network rule will be applied to. Changing this forces a new resource to be created.
	AccountName pulumi.StringPtrInput
	// The name of the Data Lake Store virtual network rule. Changing this forces a new resource to be created. Cannot be empty and must only contain alphanumeric characters, underscores, periods and hyphens. Cannot start with a period, underscore or hyphen, and cannot end with a period and a hyphen.
	Name pulumi.StringPtrInput
	// The name of the resource group where the Data Lake Store resides. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The ID of the subnet that the Data Lake Store will be connected to.
	SubnetId pulumi.StringPtrInput
}

func (StoreVirtualNetworkRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*storeVirtualNetworkRuleState)(nil)).Elem()
}

type storeVirtualNetworkRuleArgs struct {
	// The name of the Data Lake Store to which this Data Lake Store virtual network rule will be applied to. Changing this forces a new resource to be created.
	AccountName string `pulumi:"accountName"`
	// The name of the Data Lake Store virtual network rule. Changing this forces a new resource to be created. Cannot be empty and must only contain alphanumeric characters, underscores, periods and hyphens. Cannot start with a period, underscore or hyphen, and cannot end with a period and a hyphen.
	Name *string `pulumi:"name"`
	// The name of the resource group where the Data Lake Store resides. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The ID of the subnet that the Data Lake Store will be connected to.
	SubnetId string `pulumi:"subnetId"`
}

// The set of arguments for constructing a StoreVirtualNetworkRule resource.
type StoreVirtualNetworkRuleArgs struct {
	// The name of the Data Lake Store to which this Data Lake Store virtual network rule will be applied to. Changing this forces a new resource to be created.
	AccountName pulumi.StringInput
	// The name of the Data Lake Store virtual network rule. Changing this forces a new resource to be created. Cannot be empty and must only contain alphanumeric characters, underscores, periods and hyphens. Cannot start with a period, underscore or hyphen, and cannot end with a period and a hyphen.
	Name pulumi.StringPtrInput
	// The name of the resource group where the Data Lake Store resides. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// The ID of the subnet that the Data Lake Store will be connected to.
	SubnetId pulumi.StringInput
}

func (StoreVirtualNetworkRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*storeVirtualNetworkRuleArgs)(nil)).Elem()
}

type StoreVirtualNetworkRuleInput interface {
	pulumi.Input

	ToStoreVirtualNetworkRuleOutput() StoreVirtualNetworkRuleOutput
	ToStoreVirtualNetworkRuleOutputWithContext(ctx context.Context) StoreVirtualNetworkRuleOutput
}

func (*StoreVirtualNetworkRule) ElementType() reflect.Type {
	return reflect.TypeOf((*StoreVirtualNetworkRule)(nil))
}

func (i *StoreVirtualNetworkRule) ToStoreVirtualNetworkRuleOutput() StoreVirtualNetworkRuleOutput {
	return i.ToStoreVirtualNetworkRuleOutputWithContext(context.Background())
}

func (i *StoreVirtualNetworkRule) ToStoreVirtualNetworkRuleOutputWithContext(ctx context.Context) StoreVirtualNetworkRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoreVirtualNetworkRuleOutput)
}

func (i *StoreVirtualNetworkRule) ToStoreVirtualNetworkRulePtrOutput() StoreVirtualNetworkRulePtrOutput {
	return i.ToStoreVirtualNetworkRulePtrOutputWithContext(context.Background())
}

func (i *StoreVirtualNetworkRule) ToStoreVirtualNetworkRulePtrOutputWithContext(ctx context.Context) StoreVirtualNetworkRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoreVirtualNetworkRulePtrOutput)
}

type StoreVirtualNetworkRulePtrInput interface {
	pulumi.Input

	ToStoreVirtualNetworkRulePtrOutput() StoreVirtualNetworkRulePtrOutput
	ToStoreVirtualNetworkRulePtrOutputWithContext(ctx context.Context) StoreVirtualNetworkRulePtrOutput
}

type storeVirtualNetworkRulePtrType StoreVirtualNetworkRuleArgs

func (*storeVirtualNetworkRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StoreVirtualNetworkRule)(nil))
}

func (i *storeVirtualNetworkRulePtrType) ToStoreVirtualNetworkRulePtrOutput() StoreVirtualNetworkRulePtrOutput {
	return i.ToStoreVirtualNetworkRulePtrOutputWithContext(context.Background())
}

func (i *storeVirtualNetworkRulePtrType) ToStoreVirtualNetworkRulePtrOutputWithContext(ctx context.Context) StoreVirtualNetworkRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoreVirtualNetworkRulePtrOutput)
}

// StoreVirtualNetworkRuleArrayInput is an input type that accepts StoreVirtualNetworkRuleArray and StoreVirtualNetworkRuleArrayOutput values.
// You can construct a concrete instance of `StoreVirtualNetworkRuleArrayInput` via:
//
//          StoreVirtualNetworkRuleArray{ StoreVirtualNetworkRuleArgs{...} }
type StoreVirtualNetworkRuleArrayInput interface {
	pulumi.Input

	ToStoreVirtualNetworkRuleArrayOutput() StoreVirtualNetworkRuleArrayOutput
	ToStoreVirtualNetworkRuleArrayOutputWithContext(context.Context) StoreVirtualNetworkRuleArrayOutput
}

type StoreVirtualNetworkRuleArray []StoreVirtualNetworkRuleInput

func (StoreVirtualNetworkRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*StoreVirtualNetworkRule)(nil))
}

func (i StoreVirtualNetworkRuleArray) ToStoreVirtualNetworkRuleArrayOutput() StoreVirtualNetworkRuleArrayOutput {
	return i.ToStoreVirtualNetworkRuleArrayOutputWithContext(context.Background())
}

func (i StoreVirtualNetworkRuleArray) ToStoreVirtualNetworkRuleArrayOutputWithContext(ctx context.Context) StoreVirtualNetworkRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoreVirtualNetworkRuleArrayOutput)
}

// StoreVirtualNetworkRuleMapInput is an input type that accepts StoreVirtualNetworkRuleMap and StoreVirtualNetworkRuleMapOutput values.
// You can construct a concrete instance of `StoreVirtualNetworkRuleMapInput` via:
//
//          StoreVirtualNetworkRuleMap{ "key": StoreVirtualNetworkRuleArgs{...} }
type StoreVirtualNetworkRuleMapInput interface {
	pulumi.Input

	ToStoreVirtualNetworkRuleMapOutput() StoreVirtualNetworkRuleMapOutput
	ToStoreVirtualNetworkRuleMapOutputWithContext(context.Context) StoreVirtualNetworkRuleMapOutput
}

type StoreVirtualNetworkRuleMap map[string]StoreVirtualNetworkRuleInput

func (StoreVirtualNetworkRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*StoreVirtualNetworkRule)(nil))
}

func (i StoreVirtualNetworkRuleMap) ToStoreVirtualNetworkRuleMapOutput() StoreVirtualNetworkRuleMapOutput {
	return i.ToStoreVirtualNetworkRuleMapOutputWithContext(context.Background())
}

func (i StoreVirtualNetworkRuleMap) ToStoreVirtualNetworkRuleMapOutputWithContext(ctx context.Context) StoreVirtualNetworkRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoreVirtualNetworkRuleMapOutput)
}

type StoreVirtualNetworkRuleOutput struct {
	*pulumi.OutputState
}

func (StoreVirtualNetworkRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StoreVirtualNetworkRule)(nil))
}

func (o StoreVirtualNetworkRuleOutput) ToStoreVirtualNetworkRuleOutput() StoreVirtualNetworkRuleOutput {
	return o
}

func (o StoreVirtualNetworkRuleOutput) ToStoreVirtualNetworkRuleOutputWithContext(ctx context.Context) StoreVirtualNetworkRuleOutput {
	return o
}

func (o StoreVirtualNetworkRuleOutput) ToStoreVirtualNetworkRulePtrOutput() StoreVirtualNetworkRulePtrOutput {
	return o.ToStoreVirtualNetworkRulePtrOutputWithContext(context.Background())
}

func (o StoreVirtualNetworkRuleOutput) ToStoreVirtualNetworkRulePtrOutputWithContext(ctx context.Context) StoreVirtualNetworkRulePtrOutput {
	return o.ApplyT(func(v StoreVirtualNetworkRule) *StoreVirtualNetworkRule {
		return &v
	}).(StoreVirtualNetworkRulePtrOutput)
}

type StoreVirtualNetworkRulePtrOutput struct {
	*pulumi.OutputState
}

func (StoreVirtualNetworkRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StoreVirtualNetworkRule)(nil))
}

func (o StoreVirtualNetworkRulePtrOutput) ToStoreVirtualNetworkRulePtrOutput() StoreVirtualNetworkRulePtrOutput {
	return o
}

func (o StoreVirtualNetworkRulePtrOutput) ToStoreVirtualNetworkRulePtrOutputWithContext(ctx context.Context) StoreVirtualNetworkRulePtrOutput {
	return o
}

type StoreVirtualNetworkRuleArrayOutput struct{ *pulumi.OutputState }

func (StoreVirtualNetworkRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StoreVirtualNetworkRule)(nil))
}

func (o StoreVirtualNetworkRuleArrayOutput) ToStoreVirtualNetworkRuleArrayOutput() StoreVirtualNetworkRuleArrayOutput {
	return o
}

func (o StoreVirtualNetworkRuleArrayOutput) ToStoreVirtualNetworkRuleArrayOutputWithContext(ctx context.Context) StoreVirtualNetworkRuleArrayOutput {
	return o
}

func (o StoreVirtualNetworkRuleArrayOutput) Index(i pulumi.IntInput) StoreVirtualNetworkRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StoreVirtualNetworkRule {
		return vs[0].([]StoreVirtualNetworkRule)[vs[1].(int)]
	}).(StoreVirtualNetworkRuleOutput)
}

type StoreVirtualNetworkRuleMapOutput struct{ *pulumi.OutputState }

func (StoreVirtualNetworkRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]StoreVirtualNetworkRule)(nil))
}

func (o StoreVirtualNetworkRuleMapOutput) ToStoreVirtualNetworkRuleMapOutput() StoreVirtualNetworkRuleMapOutput {
	return o
}

func (o StoreVirtualNetworkRuleMapOutput) ToStoreVirtualNetworkRuleMapOutputWithContext(ctx context.Context) StoreVirtualNetworkRuleMapOutput {
	return o
}

func (o StoreVirtualNetworkRuleMapOutput) MapIndex(k pulumi.StringInput) StoreVirtualNetworkRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) StoreVirtualNetworkRule {
		return vs[0].(map[string]StoreVirtualNetworkRule)[vs[1].(string)]
	}).(StoreVirtualNetworkRuleOutput)
}

func init() {
	pulumi.RegisterOutputType(StoreVirtualNetworkRuleOutput{})
	pulumi.RegisterOutputType(StoreVirtualNetworkRulePtrOutput{})
	pulumi.RegisterOutputType(StoreVirtualNetworkRuleArrayOutput{})
	pulumi.RegisterOutputType(StoreVirtualNetworkRuleMapOutput{})
}
