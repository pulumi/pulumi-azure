// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package arcmachine

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Arc Machine Automanage Configuration Profile Assignment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/arcmachine"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/automanage"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			// The name of the Arc Machine.
//			arcMachineName := cfg.RequireObject("arcMachineName")
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resources"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			example := exampleResourceGroup.Name.ApplyT(func(name string) (arcmachine.GetResult, error) {
//				return arcmachine.GetResult(interface{}(arcmachine.GetOutput(ctx, arcmachine.GetOutputArgs{
//					Name:              arcMachineName,
//					ResourceGroupName: name,
//				}, nil))), nil
//			}).(arcmachine.GetResultOutput)
//			exampleConfiguration, err := automanage.NewConfiguration(ctx, "example", &automanage.ConfigurationArgs{
//				Name:              pulumi.String("example-configuration"),
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = arcmachine.NewAutomanageConfigurationAssignment(ctx, "example", &arcmachine.AutomanageConfigurationAssignmentArgs{
//				ArcMachineId: pulumi.String(example.ApplyT(func(example arcmachine.GetResult) (*string, error) {
//					return &example.Id, nil
//				}).(pulumi.StringPtrOutput)),
//				ConfigurationId: exampleConfiguration.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Virtual Machine Automanage Configuration Profile Assignment can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:arcmachine/automanageConfigurationAssignment:AutomanageConfigurationAssignment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.HybridCompute/machines/machine1/providers/Microsoft.AutoManage/configurationProfileAssignments/default
// ```
type AutomanageConfigurationAssignment struct {
	pulumi.CustomResourceState

	// The ARM resource ID of the Arc Machine to assign the Automanage Configuration to. Changing this forces a new resource to be created.
	ArcMachineId pulumi.StringOutput `pulumi:"arcMachineId"`
	// The ARM resource ID of the Automanage Configuration to assign to the Virtual Machine. Changing this forces a new resource to be created.
	//
	// > **NOTE:** For a successful creation of this resource, locate "Automanage API Access" app within your Entra ID tenant. Make sure it's granted access to the scope that includes the arc server.
	ConfigurationId pulumi.StringOutput `pulumi:"configurationId"`
}

// NewAutomanageConfigurationAssignment registers a new resource with the given unique name, arguments, and options.
func NewAutomanageConfigurationAssignment(ctx *pulumi.Context,
	name string, args *AutomanageConfigurationAssignmentArgs, opts ...pulumi.ResourceOption) (*AutomanageConfigurationAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ArcMachineId == nil {
		return nil, errors.New("invalid value for required argument 'ArcMachineId'")
	}
	if args.ConfigurationId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigurationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AutomanageConfigurationAssignment
	err := ctx.RegisterResource("azure:arcmachine/automanageConfigurationAssignment:AutomanageConfigurationAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAutomanageConfigurationAssignment gets an existing AutomanageConfigurationAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAutomanageConfigurationAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AutomanageConfigurationAssignmentState, opts ...pulumi.ResourceOption) (*AutomanageConfigurationAssignment, error) {
	var resource AutomanageConfigurationAssignment
	err := ctx.ReadResource("azure:arcmachine/automanageConfigurationAssignment:AutomanageConfigurationAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AutomanageConfigurationAssignment resources.
type automanageConfigurationAssignmentState struct {
	// The ARM resource ID of the Arc Machine to assign the Automanage Configuration to. Changing this forces a new resource to be created.
	ArcMachineId *string `pulumi:"arcMachineId"`
	// The ARM resource ID of the Automanage Configuration to assign to the Virtual Machine. Changing this forces a new resource to be created.
	//
	// > **NOTE:** For a successful creation of this resource, locate "Automanage API Access" app within your Entra ID tenant. Make sure it's granted access to the scope that includes the arc server.
	ConfigurationId *string `pulumi:"configurationId"`
}

type AutomanageConfigurationAssignmentState struct {
	// The ARM resource ID of the Arc Machine to assign the Automanage Configuration to. Changing this forces a new resource to be created.
	ArcMachineId pulumi.StringPtrInput
	// The ARM resource ID of the Automanage Configuration to assign to the Virtual Machine. Changing this forces a new resource to be created.
	//
	// > **NOTE:** For a successful creation of this resource, locate "Automanage API Access" app within your Entra ID tenant. Make sure it's granted access to the scope that includes the arc server.
	ConfigurationId pulumi.StringPtrInput
}

func (AutomanageConfigurationAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*automanageConfigurationAssignmentState)(nil)).Elem()
}

type automanageConfigurationAssignmentArgs struct {
	// The ARM resource ID of the Arc Machine to assign the Automanage Configuration to. Changing this forces a new resource to be created.
	ArcMachineId string `pulumi:"arcMachineId"`
	// The ARM resource ID of the Automanage Configuration to assign to the Virtual Machine. Changing this forces a new resource to be created.
	//
	// > **NOTE:** For a successful creation of this resource, locate "Automanage API Access" app within your Entra ID tenant. Make sure it's granted access to the scope that includes the arc server.
	ConfigurationId string `pulumi:"configurationId"`
}

// The set of arguments for constructing a AutomanageConfigurationAssignment resource.
type AutomanageConfigurationAssignmentArgs struct {
	// The ARM resource ID of the Arc Machine to assign the Automanage Configuration to. Changing this forces a new resource to be created.
	ArcMachineId pulumi.StringInput
	// The ARM resource ID of the Automanage Configuration to assign to the Virtual Machine. Changing this forces a new resource to be created.
	//
	// > **NOTE:** For a successful creation of this resource, locate "Automanage API Access" app within your Entra ID tenant. Make sure it's granted access to the scope that includes the arc server.
	ConfigurationId pulumi.StringInput
}

func (AutomanageConfigurationAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*automanageConfigurationAssignmentArgs)(nil)).Elem()
}

type AutomanageConfigurationAssignmentInput interface {
	pulumi.Input

	ToAutomanageConfigurationAssignmentOutput() AutomanageConfigurationAssignmentOutput
	ToAutomanageConfigurationAssignmentOutputWithContext(ctx context.Context) AutomanageConfigurationAssignmentOutput
}

func (*AutomanageConfigurationAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((**AutomanageConfigurationAssignment)(nil)).Elem()
}

func (i *AutomanageConfigurationAssignment) ToAutomanageConfigurationAssignmentOutput() AutomanageConfigurationAssignmentOutput {
	return i.ToAutomanageConfigurationAssignmentOutputWithContext(context.Background())
}

func (i *AutomanageConfigurationAssignment) ToAutomanageConfigurationAssignmentOutputWithContext(ctx context.Context) AutomanageConfigurationAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomanageConfigurationAssignmentOutput)
}

// AutomanageConfigurationAssignmentArrayInput is an input type that accepts AutomanageConfigurationAssignmentArray and AutomanageConfigurationAssignmentArrayOutput values.
// You can construct a concrete instance of `AutomanageConfigurationAssignmentArrayInput` via:
//
//	AutomanageConfigurationAssignmentArray{ AutomanageConfigurationAssignmentArgs{...} }
type AutomanageConfigurationAssignmentArrayInput interface {
	pulumi.Input

	ToAutomanageConfigurationAssignmentArrayOutput() AutomanageConfigurationAssignmentArrayOutput
	ToAutomanageConfigurationAssignmentArrayOutputWithContext(context.Context) AutomanageConfigurationAssignmentArrayOutput
}

type AutomanageConfigurationAssignmentArray []AutomanageConfigurationAssignmentInput

func (AutomanageConfigurationAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AutomanageConfigurationAssignment)(nil)).Elem()
}

func (i AutomanageConfigurationAssignmentArray) ToAutomanageConfigurationAssignmentArrayOutput() AutomanageConfigurationAssignmentArrayOutput {
	return i.ToAutomanageConfigurationAssignmentArrayOutputWithContext(context.Background())
}

func (i AutomanageConfigurationAssignmentArray) ToAutomanageConfigurationAssignmentArrayOutputWithContext(ctx context.Context) AutomanageConfigurationAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomanageConfigurationAssignmentArrayOutput)
}

// AutomanageConfigurationAssignmentMapInput is an input type that accepts AutomanageConfigurationAssignmentMap and AutomanageConfigurationAssignmentMapOutput values.
// You can construct a concrete instance of `AutomanageConfigurationAssignmentMapInput` via:
//
//	AutomanageConfigurationAssignmentMap{ "key": AutomanageConfigurationAssignmentArgs{...} }
type AutomanageConfigurationAssignmentMapInput interface {
	pulumi.Input

	ToAutomanageConfigurationAssignmentMapOutput() AutomanageConfigurationAssignmentMapOutput
	ToAutomanageConfigurationAssignmentMapOutputWithContext(context.Context) AutomanageConfigurationAssignmentMapOutput
}

type AutomanageConfigurationAssignmentMap map[string]AutomanageConfigurationAssignmentInput

func (AutomanageConfigurationAssignmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AutomanageConfigurationAssignment)(nil)).Elem()
}

func (i AutomanageConfigurationAssignmentMap) ToAutomanageConfigurationAssignmentMapOutput() AutomanageConfigurationAssignmentMapOutput {
	return i.ToAutomanageConfigurationAssignmentMapOutputWithContext(context.Background())
}

func (i AutomanageConfigurationAssignmentMap) ToAutomanageConfigurationAssignmentMapOutputWithContext(ctx context.Context) AutomanageConfigurationAssignmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomanageConfigurationAssignmentMapOutput)
}

type AutomanageConfigurationAssignmentOutput struct{ *pulumi.OutputState }

func (AutomanageConfigurationAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutomanageConfigurationAssignment)(nil)).Elem()
}

func (o AutomanageConfigurationAssignmentOutput) ToAutomanageConfigurationAssignmentOutput() AutomanageConfigurationAssignmentOutput {
	return o
}

func (o AutomanageConfigurationAssignmentOutput) ToAutomanageConfigurationAssignmentOutputWithContext(ctx context.Context) AutomanageConfigurationAssignmentOutput {
	return o
}

// The ARM resource ID of the Arc Machine to assign the Automanage Configuration to. Changing this forces a new resource to be created.
func (o AutomanageConfigurationAssignmentOutput) ArcMachineId() pulumi.StringOutput {
	return o.ApplyT(func(v *AutomanageConfigurationAssignment) pulumi.StringOutput { return v.ArcMachineId }).(pulumi.StringOutput)
}

// The ARM resource ID of the Automanage Configuration to assign to the Virtual Machine. Changing this forces a new resource to be created.
//
// > **NOTE:** For a successful creation of this resource, locate "Automanage API Access" app within your Entra ID tenant. Make sure it's granted access to the scope that includes the arc server.
func (o AutomanageConfigurationAssignmentOutput) ConfigurationId() pulumi.StringOutput {
	return o.ApplyT(func(v *AutomanageConfigurationAssignment) pulumi.StringOutput { return v.ConfigurationId }).(pulumi.StringOutput)
}

type AutomanageConfigurationAssignmentArrayOutput struct{ *pulumi.OutputState }

func (AutomanageConfigurationAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AutomanageConfigurationAssignment)(nil)).Elem()
}

func (o AutomanageConfigurationAssignmentArrayOutput) ToAutomanageConfigurationAssignmentArrayOutput() AutomanageConfigurationAssignmentArrayOutput {
	return o
}

func (o AutomanageConfigurationAssignmentArrayOutput) ToAutomanageConfigurationAssignmentArrayOutputWithContext(ctx context.Context) AutomanageConfigurationAssignmentArrayOutput {
	return o
}

func (o AutomanageConfigurationAssignmentArrayOutput) Index(i pulumi.IntInput) AutomanageConfigurationAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AutomanageConfigurationAssignment {
		return vs[0].([]*AutomanageConfigurationAssignment)[vs[1].(int)]
	}).(AutomanageConfigurationAssignmentOutput)
}

type AutomanageConfigurationAssignmentMapOutput struct{ *pulumi.OutputState }

func (AutomanageConfigurationAssignmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AutomanageConfigurationAssignment)(nil)).Elem()
}

func (o AutomanageConfigurationAssignmentMapOutput) ToAutomanageConfigurationAssignmentMapOutput() AutomanageConfigurationAssignmentMapOutput {
	return o
}

func (o AutomanageConfigurationAssignmentMapOutput) ToAutomanageConfigurationAssignmentMapOutputWithContext(ctx context.Context) AutomanageConfigurationAssignmentMapOutput {
	return o
}

func (o AutomanageConfigurationAssignmentMapOutput) MapIndex(k pulumi.StringInput) AutomanageConfigurationAssignmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AutomanageConfigurationAssignment {
		return vs[0].(map[string]*AutomanageConfigurationAssignment)[vs[1].(string)]
	}).(AutomanageConfigurationAssignmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AutomanageConfigurationAssignmentInput)(nil)).Elem(), &AutomanageConfigurationAssignment{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutomanageConfigurationAssignmentArrayInput)(nil)).Elem(), AutomanageConfigurationAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutomanageConfigurationAssignmentMapInput)(nil)).Elem(), AutomanageConfigurationAssignmentMap{})
	pulumi.RegisterOutputType(AutomanageConfigurationAssignmentOutput{})
	pulumi.RegisterOutputType(AutomanageConfigurationAssignmentArrayOutput{})
	pulumi.RegisterOutputType(AutomanageConfigurationAssignmentMapOutput{})
}
