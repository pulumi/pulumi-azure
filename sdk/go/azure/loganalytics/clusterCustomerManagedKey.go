// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package loganalytics

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a Log Analytics Cluster Customer Managed Key.
//
// ## Import
//
// Log Analytics Cluster Customer Managed Keys can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:loganalytics/clusterCustomerManagedKey:ClusterCustomerManagedKey example /subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/group1/providers/Microsoft.OperationalInsights/clusters/cluster1/CMK
// ```
type ClusterCustomerManagedKey struct {
	pulumi.CustomResourceState

	// The ID of the Key Vault Key to use for encryption.
	KeyVaultKeyId pulumi.StringOutput `pulumi:"keyVaultKeyId"`
	// The ID of the Log Analytics Cluster. Changing this forces a new Log Analytics Cluster Customer Managed Key to be created.
	LogAnalyticsClusterId pulumi.StringOutput `pulumi:"logAnalyticsClusterId"`
}

// NewClusterCustomerManagedKey registers a new resource with the given unique name, arguments, and options.
func NewClusterCustomerManagedKey(ctx *pulumi.Context,
	name string, args *ClusterCustomerManagedKeyArgs, opts ...pulumi.ResourceOption) (*ClusterCustomerManagedKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KeyVaultKeyId == nil {
		return nil, errors.New("invalid value for required argument 'KeyVaultKeyId'")
	}
	if args.LogAnalyticsClusterId == nil {
		return nil, errors.New("invalid value for required argument 'LogAnalyticsClusterId'")
	}
	var resource ClusterCustomerManagedKey
	err := ctx.RegisterResource("azure:loganalytics/clusterCustomerManagedKey:ClusterCustomerManagedKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterCustomerManagedKey gets an existing ClusterCustomerManagedKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterCustomerManagedKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterCustomerManagedKeyState, opts ...pulumi.ResourceOption) (*ClusterCustomerManagedKey, error) {
	var resource ClusterCustomerManagedKey
	err := ctx.ReadResource("azure:loganalytics/clusterCustomerManagedKey:ClusterCustomerManagedKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterCustomerManagedKey resources.
type clusterCustomerManagedKeyState struct {
	// The ID of the Key Vault Key to use for encryption.
	KeyVaultKeyId *string `pulumi:"keyVaultKeyId"`
	// The ID of the Log Analytics Cluster. Changing this forces a new Log Analytics Cluster Customer Managed Key to be created.
	LogAnalyticsClusterId *string `pulumi:"logAnalyticsClusterId"`
}

type ClusterCustomerManagedKeyState struct {
	// The ID of the Key Vault Key to use for encryption.
	KeyVaultKeyId pulumi.StringPtrInput
	// The ID of the Log Analytics Cluster. Changing this forces a new Log Analytics Cluster Customer Managed Key to be created.
	LogAnalyticsClusterId pulumi.StringPtrInput
}

func (ClusterCustomerManagedKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterCustomerManagedKeyState)(nil)).Elem()
}

type clusterCustomerManagedKeyArgs struct {
	// The ID of the Key Vault Key to use for encryption.
	KeyVaultKeyId string `pulumi:"keyVaultKeyId"`
	// The ID of the Log Analytics Cluster. Changing this forces a new Log Analytics Cluster Customer Managed Key to be created.
	LogAnalyticsClusterId string `pulumi:"logAnalyticsClusterId"`
}

// The set of arguments for constructing a ClusterCustomerManagedKey resource.
type ClusterCustomerManagedKeyArgs struct {
	// The ID of the Key Vault Key to use for encryption.
	KeyVaultKeyId pulumi.StringInput
	// The ID of the Log Analytics Cluster. Changing this forces a new Log Analytics Cluster Customer Managed Key to be created.
	LogAnalyticsClusterId pulumi.StringInput
}

func (ClusterCustomerManagedKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterCustomerManagedKeyArgs)(nil)).Elem()
}

type ClusterCustomerManagedKeyInput interface {
	pulumi.Input

	ToClusterCustomerManagedKeyOutput() ClusterCustomerManagedKeyOutput
	ToClusterCustomerManagedKeyOutputWithContext(ctx context.Context) ClusterCustomerManagedKeyOutput
}

func (ClusterCustomerManagedKey) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCustomerManagedKey)(nil)).Elem()
}

func (i ClusterCustomerManagedKey) ToClusterCustomerManagedKeyOutput() ClusterCustomerManagedKeyOutput {
	return i.ToClusterCustomerManagedKeyOutputWithContext(context.Background())
}

func (i ClusterCustomerManagedKey) ToClusterCustomerManagedKeyOutputWithContext(ctx context.Context) ClusterCustomerManagedKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCustomerManagedKeyOutput)
}

type ClusterCustomerManagedKeyOutput struct {
	*pulumi.OutputState
}

func (ClusterCustomerManagedKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCustomerManagedKeyOutput)(nil)).Elem()
}

func (o ClusterCustomerManagedKeyOutput) ToClusterCustomerManagedKeyOutput() ClusterCustomerManagedKeyOutput {
	return o
}

func (o ClusterCustomerManagedKeyOutput) ToClusterCustomerManagedKeyOutputWithContext(ctx context.Context) ClusterCustomerManagedKeyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ClusterCustomerManagedKeyOutput{})
}
