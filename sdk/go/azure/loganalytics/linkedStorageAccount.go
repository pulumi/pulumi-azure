// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package loganalytics

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a Log Analytics Linked Storage Account.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/loganalytics"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/operationalinsights"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/storage"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West Europe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
// 			ResourceGroupName:      exampleResourceGroup.Name,
// 			Location:               exampleResourceGroup.Location,
// 			AccountTier:            pulumi.String("Standard"),
// 			AccountReplicationType: pulumi.String("GRS"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleAnalyticsWorkspace, err := operationalinsights.NewAnalyticsWorkspace(ctx, "exampleAnalyticsWorkspace", &operationalinsights.AnalyticsWorkspaceArgs{
// 			Location:          exampleResourceGroup.Location,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			Sku:               pulumi.String("PerGB2018"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = loganalytics.NewLinkedStorageAccount(ctx, "exampleLinkedStorageAccount", &loganalytics.LinkedStorageAccountArgs{
// 			DataSourceType:      pulumi.String("customlogs"),
// 			ResourceGroupName:   exampleResourceGroup.Name,
// 			WorkspaceResourceId: exampleAnalyticsWorkspace.ID(),
// 			StorageAccountIds: pulumi.StringArray{
// 				exampleAccount.ID(),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Log Analytics Linked Storage Accounts can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:loganalytics/linkedStorageAccount:LinkedStorageAccount example /subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/group1/providers/Microsoft.OperationalInsights/workspaces/workspace1/linkedStorageAccounts/{dataSourceType}
// ```
type LinkedStorageAccount struct {
	pulumi.CustomResourceState

	// The data source type which should be used for this Log Analytics Linked Storage Account. Possible values are "customlogs", "azurewatson", "query", "ingestion" and "alerts". Changing this forces a new Log Analytics Linked Storage Account to be created.
	DataSourceType pulumi.StringOutput `pulumi:"dataSourceType"`
	// The name of the Resource Group where the Log Analytics Linked Storage Account should exist. Changing this forces a new Log Analytics Linked Storage Account to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The storage account resource ids to be linked.
	StorageAccountIds pulumi.StringArrayOutput `pulumi:"storageAccountIds"`
	// The resource ID of the Log Analytics Workspace. Changing this forces a new Log Analytics Linked Storage Account to be created.
	WorkspaceResourceId pulumi.StringOutput `pulumi:"workspaceResourceId"`
}

// NewLinkedStorageAccount registers a new resource with the given unique name, arguments, and options.
func NewLinkedStorageAccount(ctx *pulumi.Context,
	name string, args *LinkedStorageAccountArgs, opts ...pulumi.ResourceOption) (*LinkedStorageAccount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataSourceType == nil {
		return nil, errors.New("invalid value for required argument 'DataSourceType'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.StorageAccountIds == nil {
		return nil, errors.New("invalid value for required argument 'StorageAccountIds'")
	}
	if args.WorkspaceResourceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceResourceId'")
	}
	var resource LinkedStorageAccount
	err := ctx.RegisterResource("azure:loganalytics/linkedStorageAccount:LinkedStorageAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLinkedStorageAccount gets an existing LinkedStorageAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLinkedStorageAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LinkedStorageAccountState, opts ...pulumi.ResourceOption) (*LinkedStorageAccount, error) {
	var resource LinkedStorageAccount
	err := ctx.ReadResource("azure:loganalytics/linkedStorageAccount:LinkedStorageAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LinkedStorageAccount resources.
type linkedStorageAccountState struct {
	// The data source type which should be used for this Log Analytics Linked Storage Account. Possible values are "customlogs", "azurewatson", "query", "ingestion" and "alerts". Changing this forces a new Log Analytics Linked Storage Account to be created.
	DataSourceType *string `pulumi:"dataSourceType"`
	// The name of the Resource Group where the Log Analytics Linked Storage Account should exist. Changing this forces a new Log Analytics Linked Storage Account to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The storage account resource ids to be linked.
	StorageAccountIds []string `pulumi:"storageAccountIds"`
	// The resource ID of the Log Analytics Workspace. Changing this forces a new Log Analytics Linked Storage Account to be created.
	WorkspaceResourceId *string `pulumi:"workspaceResourceId"`
}

type LinkedStorageAccountState struct {
	// The data source type which should be used for this Log Analytics Linked Storage Account. Possible values are "customlogs", "azurewatson", "query", "ingestion" and "alerts". Changing this forces a new Log Analytics Linked Storage Account to be created.
	DataSourceType pulumi.StringPtrInput
	// The name of the Resource Group where the Log Analytics Linked Storage Account should exist. Changing this forces a new Log Analytics Linked Storage Account to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The storage account resource ids to be linked.
	StorageAccountIds pulumi.StringArrayInput
	// The resource ID of the Log Analytics Workspace. Changing this forces a new Log Analytics Linked Storage Account to be created.
	WorkspaceResourceId pulumi.StringPtrInput
}

func (LinkedStorageAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*linkedStorageAccountState)(nil)).Elem()
}

type linkedStorageAccountArgs struct {
	// The data source type which should be used for this Log Analytics Linked Storage Account. Possible values are "customlogs", "azurewatson", "query", "ingestion" and "alerts". Changing this forces a new Log Analytics Linked Storage Account to be created.
	DataSourceType string `pulumi:"dataSourceType"`
	// The name of the Resource Group where the Log Analytics Linked Storage Account should exist. Changing this forces a new Log Analytics Linked Storage Account to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The storage account resource ids to be linked.
	StorageAccountIds []string `pulumi:"storageAccountIds"`
	// The resource ID of the Log Analytics Workspace. Changing this forces a new Log Analytics Linked Storage Account to be created.
	WorkspaceResourceId string `pulumi:"workspaceResourceId"`
}

// The set of arguments for constructing a LinkedStorageAccount resource.
type LinkedStorageAccountArgs struct {
	// The data source type which should be used for this Log Analytics Linked Storage Account. Possible values are "customlogs", "azurewatson", "query", "ingestion" and "alerts". Changing this forces a new Log Analytics Linked Storage Account to be created.
	DataSourceType pulumi.StringInput
	// The name of the Resource Group where the Log Analytics Linked Storage Account should exist. Changing this forces a new Log Analytics Linked Storage Account to be created.
	ResourceGroupName pulumi.StringInput
	// The storage account resource ids to be linked.
	StorageAccountIds pulumi.StringArrayInput
	// The resource ID of the Log Analytics Workspace. Changing this forces a new Log Analytics Linked Storage Account to be created.
	WorkspaceResourceId pulumi.StringInput
}

func (LinkedStorageAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*linkedStorageAccountArgs)(nil)).Elem()
}

type LinkedStorageAccountInput interface {
	pulumi.Input

	ToLinkedStorageAccountOutput() LinkedStorageAccountOutput
	ToLinkedStorageAccountOutputWithContext(ctx context.Context) LinkedStorageAccountOutput
}

func (*LinkedStorageAccount) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedStorageAccount)(nil))
}

func (i *LinkedStorageAccount) ToLinkedStorageAccountOutput() LinkedStorageAccountOutput {
	return i.ToLinkedStorageAccountOutputWithContext(context.Background())
}

func (i *LinkedStorageAccount) ToLinkedStorageAccountOutputWithContext(ctx context.Context) LinkedStorageAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedStorageAccountOutput)
}

func (i *LinkedStorageAccount) ToLinkedStorageAccountPtrOutput() LinkedStorageAccountPtrOutput {
	return i.ToLinkedStorageAccountPtrOutputWithContext(context.Background())
}

func (i *LinkedStorageAccount) ToLinkedStorageAccountPtrOutputWithContext(ctx context.Context) LinkedStorageAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedStorageAccountPtrOutput)
}

type LinkedStorageAccountPtrInput interface {
	pulumi.Input

	ToLinkedStorageAccountPtrOutput() LinkedStorageAccountPtrOutput
	ToLinkedStorageAccountPtrOutputWithContext(ctx context.Context) LinkedStorageAccountPtrOutput
}

type linkedStorageAccountPtrType LinkedStorageAccountArgs

func (*linkedStorageAccountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedStorageAccount)(nil))
}

func (i *linkedStorageAccountPtrType) ToLinkedStorageAccountPtrOutput() LinkedStorageAccountPtrOutput {
	return i.ToLinkedStorageAccountPtrOutputWithContext(context.Background())
}

func (i *linkedStorageAccountPtrType) ToLinkedStorageAccountPtrOutputWithContext(ctx context.Context) LinkedStorageAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedStorageAccountPtrOutput)
}

// LinkedStorageAccountArrayInput is an input type that accepts LinkedStorageAccountArray and LinkedStorageAccountArrayOutput values.
// You can construct a concrete instance of `LinkedStorageAccountArrayInput` via:
//
//          LinkedStorageAccountArray{ LinkedStorageAccountArgs{...} }
type LinkedStorageAccountArrayInput interface {
	pulumi.Input

	ToLinkedStorageAccountArrayOutput() LinkedStorageAccountArrayOutput
	ToLinkedStorageAccountArrayOutputWithContext(context.Context) LinkedStorageAccountArrayOutput
}

type LinkedStorageAccountArray []LinkedStorageAccountInput

func (LinkedStorageAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*LinkedStorageAccount)(nil))
}

func (i LinkedStorageAccountArray) ToLinkedStorageAccountArrayOutput() LinkedStorageAccountArrayOutput {
	return i.ToLinkedStorageAccountArrayOutputWithContext(context.Background())
}

func (i LinkedStorageAccountArray) ToLinkedStorageAccountArrayOutputWithContext(ctx context.Context) LinkedStorageAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedStorageAccountArrayOutput)
}

// LinkedStorageAccountMapInput is an input type that accepts LinkedStorageAccountMap and LinkedStorageAccountMapOutput values.
// You can construct a concrete instance of `LinkedStorageAccountMapInput` via:
//
//          LinkedStorageAccountMap{ "key": LinkedStorageAccountArgs{...} }
type LinkedStorageAccountMapInput interface {
	pulumi.Input

	ToLinkedStorageAccountMapOutput() LinkedStorageAccountMapOutput
	ToLinkedStorageAccountMapOutputWithContext(context.Context) LinkedStorageAccountMapOutput
}

type LinkedStorageAccountMap map[string]LinkedStorageAccountInput

func (LinkedStorageAccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*LinkedStorageAccount)(nil))
}

func (i LinkedStorageAccountMap) ToLinkedStorageAccountMapOutput() LinkedStorageAccountMapOutput {
	return i.ToLinkedStorageAccountMapOutputWithContext(context.Background())
}

func (i LinkedStorageAccountMap) ToLinkedStorageAccountMapOutputWithContext(ctx context.Context) LinkedStorageAccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedStorageAccountMapOutput)
}

type LinkedStorageAccountOutput struct {
	*pulumi.OutputState
}

func (LinkedStorageAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedStorageAccount)(nil))
}

func (o LinkedStorageAccountOutput) ToLinkedStorageAccountOutput() LinkedStorageAccountOutput {
	return o
}

func (o LinkedStorageAccountOutput) ToLinkedStorageAccountOutputWithContext(ctx context.Context) LinkedStorageAccountOutput {
	return o
}

func (o LinkedStorageAccountOutput) ToLinkedStorageAccountPtrOutput() LinkedStorageAccountPtrOutput {
	return o.ToLinkedStorageAccountPtrOutputWithContext(context.Background())
}

func (o LinkedStorageAccountOutput) ToLinkedStorageAccountPtrOutputWithContext(ctx context.Context) LinkedStorageAccountPtrOutput {
	return o.ApplyT(func(v LinkedStorageAccount) *LinkedStorageAccount {
		return &v
	}).(LinkedStorageAccountPtrOutput)
}

type LinkedStorageAccountPtrOutput struct {
	*pulumi.OutputState
}

func (LinkedStorageAccountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedStorageAccount)(nil))
}

func (o LinkedStorageAccountPtrOutput) ToLinkedStorageAccountPtrOutput() LinkedStorageAccountPtrOutput {
	return o
}

func (o LinkedStorageAccountPtrOutput) ToLinkedStorageAccountPtrOutputWithContext(ctx context.Context) LinkedStorageAccountPtrOutput {
	return o
}

type LinkedStorageAccountArrayOutput struct{ *pulumi.OutputState }

func (LinkedStorageAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinkedStorageAccount)(nil))
}

func (o LinkedStorageAccountArrayOutput) ToLinkedStorageAccountArrayOutput() LinkedStorageAccountArrayOutput {
	return o
}

func (o LinkedStorageAccountArrayOutput) ToLinkedStorageAccountArrayOutputWithContext(ctx context.Context) LinkedStorageAccountArrayOutput {
	return o
}

func (o LinkedStorageAccountArrayOutput) Index(i pulumi.IntInput) LinkedStorageAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LinkedStorageAccount {
		return vs[0].([]LinkedStorageAccount)[vs[1].(int)]
	}).(LinkedStorageAccountOutput)
}

type LinkedStorageAccountMapOutput struct{ *pulumi.OutputState }

func (LinkedStorageAccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LinkedStorageAccount)(nil))
}

func (o LinkedStorageAccountMapOutput) ToLinkedStorageAccountMapOutput() LinkedStorageAccountMapOutput {
	return o
}

func (o LinkedStorageAccountMapOutput) ToLinkedStorageAccountMapOutputWithContext(ctx context.Context) LinkedStorageAccountMapOutput {
	return o
}

func (o LinkedStorageAccountMapOutput) MapIndex(k pulumi.StringInput) LinkedStorageAccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) LinkedStorageAccount {
		return vs[0].(map[string]LinkedStorageAccount)[vs[1].(string)]
	}).(LinkedStorageAccountOutput)
}

func init() {
	pulumi.RegisterOutputType(LinkedStorageAccountOutput{})
	pulumi.RegisterOutputType(LinkedStorageAccountPtrOutput{})
	pulumi.RegisterOutputType(LinkedStorageAccountArrayOutput{})
	pulumi.RegisterOutputType(LinkedStorageAccountMapOutput{})
}
