// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package loganalytics

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a Log Analytics (formally Operational Insights) Windows Performance Counter DataSource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/loganalytics"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/operationalinsights"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West Europe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleAnalyticsWorkspace, err := operationalinsights.NewAnalyticsWorkspace(ctx, "exampleAnalyticsWorkspace", &operationalinsights.AnalyticsWorkspaceArgs{
// 			Location:          exampleResourceGroup.Location,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			Sku:               pulumi.String("PerGB2018"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = loganalytics.NewDataSourceWindowsPerformanceCounter(ctx, "exampleDataSourceWindowsPerformanceCounter", &loganalytics.DataSourceWindowsPerformanceCounterArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			WorkspaceName:     exampleAnalyticsWorkspace.Name,
// 			ObjectName:        pulumi.String("CPU"),
// 			InstanceName:      pulumi.String("*"),
// 			CounterName:       pulumi.String("CPU"),
// 			IntervalSeconds:   pulumi.Int(10),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Log Analytics Windows Performance Counter DataSources can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:loganalytics/dataSourceWindowsPerformanceCounter:DataSourceWindowsPerformanceCounter example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.OperationalInsights/workspaces/workspace1/datasources/datasource1
// ```
type DataSourceWindowsPerformanceCounter struct {
	pulumi.CustomResourceState

	// The friendly name of the performance counter.
	CounterName pulumi.StringOutput `pulumi:"counterName"`
	// The name of the virtual machine instance to which the Windows Performance Counter DataSource be applied. Specify a `*` will apply to all instances.
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// The time of sample interval in seconds. Supports values between 10 and 2147483647.
	IntervalSeconds pulumi.IntOutput `pulumi:"intervalSeconds"`
	// The Name which should be used for this Log Analytics Windows Performance Counter DataSource. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The object name of the Log Analytics Windows Performance Counter DataSource.
	ObjectName pulumi.StringOutput `pulumi:"objectName"`
	// The name of the Resource Group where the Log Analytics Windows Performance Counter DataSource should exist. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The name of the Log Analytics Workspace where the Log Analytics Windows Performance Counter DataSource should exist. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
	WorkspaceName pulumi.StringOutput `pulumi:"workspaceName"`
}

// NewDataSourceWindowsPerformanceCounter registers a new resource with the given unique name, arguments, and options.
func NewDataSourceWindowsPerformanceCounter(ctx *pulumi.Context,
	name string, args *DataSourceWindowsPerformanceCounterArgs, opts ...pulumi.ResourceOption) (*DataSourceWindowsPerformanceCounter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CounterName == nil {
		return nil, errors.New("invalid value for required argument 'CounterName'")
	}
	if args.InstanceName == nil {
		return nil, errors.New("invalid value for required argument 'InstanceName'")
	}
	if args.IntervalSeconds == nil {
		return nil, errors.New("invalid value for required argument 'IntervalSeconds'")
	}
	if args.ObjectName == nil {
		return nil, errors.New("invalid value for required argument 'ObjectName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.WorkspaceName == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceName'")
	}
	var resource DataSourceWindowsPerformanceCounter
	err := ctx.RegisterResource("azure:loganalytics/dataSourceWindowsPerformanceCounter:DataSourceWindowsPerformanceCounter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataSourceWindowsPerformanceCounter gets an existing DataSourceWindowsPerformanceCounter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataSourceWindowsPerformanceCounter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataSourceWindowsPerformanceCounterState, opts ...pulumi.ResourceOption) (*DataSourceWindowsPerformanceCounter, error) {
	var resource DataSourceWindowsPerformanceCounter
	err := ctx.ReadResource("azure:loganalytics/dataSourceWindowsPerformanceCounter:DataSourceWindowsPerformanceCounter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataSourceWindowsPerformanceCounter resources.
type dataSourceWindowsPerformanceCounterState struct {
	// The friendly name of the performance counter.
	CounterName *string `pulumi:"counterName"`
	// The name of the virtual machine instance to which the Windows Performance Counter DataSource be applied. Specify a `*` will apply to all instances.
	InstanceName *string `pulumi:"instanceName"`
	// The time of sample interval in seconds. Supports values between 10 and 2147483647.
	IntervalSeconds *int `pulumi:"intervalSeconds"`
	// The Name which should be used for this Log Analytics Windows Performance Counter DataSource. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
	Name *string `pulumi:"name"`
	// The object name of the Log Analytics Windows Performance Counter DataSource.
	ObjectName *string `pulumi:"objectName"`
	// The name of the Resource Group where the Log Analytics Windows Performance Counter DataSource should exist. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The name of the Log Analytics Workspace where the Log Analytics Windows Performance Counter DataSource should exist. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
	WorkspaceName *string `pulumi:"workspaceName"`
}

type DataSourceWindowsPerformanceCounterState struct {
	// The friendly name of the performance counter.
	CounterName pulumi.StringPtrInput
	// The name of the virtual machine instance to which the Windows Performance Counter DataSource be applied. Specify a `*` will apply to all instances.
	InstanceName pulumi.StringPtrInput
	// The time of sample interval in seconds. Supports values between 10 and 2147483647.
	IntervalSeconds pulumi.IntPtrInput
	// The Name which should be used for this Log Analytics Windows Performance Counter DataSource. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
	Name pulumi.StringPtrInput
	// The object name of the Log Analytics Windows Performance Counter DataSource.
	ObjectName pulumi.StringPtrInput
	// The name of the Resource Group where the Log Analytics Windows Performance Counter DataSource should exist. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The name of the Log Analytics Workspace where the Log Analytics Windows Performance Counter DataSource should exist. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
	WorkspaceName pulumi.StringPtrInput
}

func (DataSourceWindowsPerformanceCounterState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSourceWindowsPerformanceCounterState)(nil)).Elem()
}

type dataSourceWindowsPerformanceCounterArgs struct {
	// The friendly name of the performance counter.
	CounterName string `pulumi:"counterName"`
	// The name of the virtual machine instance to which the Windows Performance Counter DataSource be applied. Specify a `*` will apply to all instances.
	InstanceName string `pulumi:"instanceName"`
	// The time of sample interval in seconds. Supports values between 10 and 2147483647.
	IntervalSeconds int `pulumi:"intervalSeconds"`
	// The Name which should be used for this Log Analytics Windows Performance Counter DataSource. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
	Name *string `pulumi:"name"`
	// The object name of the Log Analytics Windows Performance Counter DataSource.
	ObjectName string `pulumi:"objectName"`
	// The name of the Resource Group where the Log Analytics Windows Performance Counter DataSource should exist. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the Log Analytics Workspace where the Log Analytics Windows Performance Counter DataSource should exist. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
	WorkspaceName string `pulumi:"workspaceName"`
}

// The set of arguments for constructing a DataSourceWindowsPerformanceCounter resource.
type DataSourceWindowsPerformanceCounterArgs struct {
	// The friendly name of the performance counter.
	CounterName pulumi.StringInput
	// The name of the virtual machine instance to which the Windows Performance Counter DataSource be applied. Specify a `*` will apply to all instances.
	InstanceName pulumi.StringInput
	// The time of sample interval in seconds. Supports values between 10 and 2147483647.
	IntervalSeconds pulumi.IntInput
	// The Name which should be used for this Log Analytics Windows Performance Counter DataSource. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
	Name pulumi.StringPtrInput
	// The object name of the Log Analytics Windows Performance Counter DataSource.
	ObjectName pulumi.StringInput
	// The name of the Resource Group where the Log Analytics Windows Performance Counter DataSource should exist. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
	ResourceGroupName pulumi.StringInput
	// The name of the Log Analytics Workspace where the Log Analytics Windows Performance Counter DataSource should exist. Changing this forces a new Log Analytics Windows Performance Counter DataSource to be created.
	WorkspaceName pulumi.StringInput
}

func (DataSourceWindowsPerformanceCounterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSourceWindowsPerformanceCounterArgs)(nil)).Elem()
}

type DataSourceWindowsPerformanceCounterInput interface {
	pulumi.Input

	ToDataSourceWindowsPerformanceCounterOutput() DataSourceWindowsPerformanceCounterOutput
	ToDataSourceWindowsPerformanceCounterOutputWithContext(ctx context.Context) DataSourceWindowsPerformanceCounterOutput
}

func (*DataSourceWindowsPerformanceCounter) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceWindowsPerformanceCounter)(nil))
}

func (i *DataSourceWindowsPerformanceCounter) ToDataSourceWindowsPerformanceCounterOutput() DataSourceWindowsPerformanceCounterOutput {
	return i.ToDataSourceWindowsPerformanceCounterOutputWithContext(context.Background())
}

func (i *DataSourceWindowsPerformanceCounter) ToDataSourceWindowsPerformanceCounterOutputWithContext(ctx context.Context) DataSourceWindowsPerformanceCounterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceWindowsPerformanceCounterOutput)
}

func (i *DataSourceWindowsPerformanceCounter) ToDataSourceWindowsPerformanceCounterPtrOutput() DataSourceWindowsPerformanceCounterPtrOutput {
	return i.ToDataSourceWindowsPerformanceCounterPtrOutputWithContext(context.Background())
}

func (i *DataSourceWindowsPerformanceCounter) ToDataSourceWindowsPerformanceCounterPtrOutputWithContext(ctx context.Context) DataSourceWindowsPerformanceCounterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceWindowsPerformanceCounterPtrOutput)
}

type DataSourceWindowsPerformanceCounterPtrInput interface {
	pulumi.Input

	ToDataSourceWindowsPerformanceCounterPtrOutput() DataSourceWindowsPerformanceCounterPtrOutput
	ToDataSourceWindowsPerformanceCounterPtrOutputWithContext(ctx context.Context) DataSourceWindowsPerformanceCounterPtrOutput
}

type dataSourceWindowsPerformanceCounterPtrType DataSourceWindowsPerformanceCounterArgs

func (*dataSourceWindowsPerformanceCounterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceWindowsPerformanceCounter)(nil))
}

func (i *dataSourceWindowsPerformanceCounterPtrType) ToDataSourceWindowsPerformanceCounterPtrOutput() DataSourceWindowsPerformanceCounterPtrOutput {
	return i.ToDataSourceWindowsPerformanceCounterPtrOutputWithContext(context.Background())
}

func (i *dataSourceWindowsPerformanceCounterPtrType) ToDataSourceWindowsPerformanceCounterPtrOutputWithContext(ctx context.Context) DataSourceWindowsPerformanceCounterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceWindowsPerformanceCounterPtrOutput)
}

// DataSourceWindowsPerformanceCounterArrayInput is an input type that accepts DataSourceWindowsPerformanceCounterArray and DataSourceWindowsPerformanceCounterArrayOutput values.
// You can construct a concrete instance of `DataSourceWindowsPerformanceCounterArrayInput` via:
//
//          DataSourceWindowsPerformanceCounterArray{ DataSourceWindowsPerformanceCounterArgs{...} }
type DataSourceWindowsPerformanceCounterArrayInput interface {
	pulumi.Input

	ToDataSourceWindowsPerformanceCounterArrayOutput() DataSourceWindowsPerformanceCounterArrayOutput
	ToDataSourceWindowsPerformanceCounterArrayOutputWithContext(context.Context) DataSourceWindowsPerformanceCounterArrayOutput
}

type DataSourceWindowsPerformanceCounterArray []DataSourceWindowsPerformanceCounterInput

func (DataSourceWindowsPerformanceCounterArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*DataSourceWindowsPerformanceCounter)(nil))
}

func (i DataSourceWindowsPerformanceCounterArray) ToDataSourceWindowsPerformanceCounterArrayOutput() DataSourceWindowsPerformanceCounterArrayOutput {
	return i.ToDataSourceWindowsPerformanceCounterArrayOutputWithContext(context.Background())
}

func (i DataSourceWindowsPerformanceCounterArray) ToDataSourceWindowsPerformanceCounterArrayOutputWithContext(ctx context.Context) DataSourceWindowsPerformanceCounterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceWindowsPerformanceCounterArrayOutput)
}

// DataSourceWindowsPerformanceCounterMapInput is an input type that accepts DataSourceWindowsPerformanceCounterMap and DataSourceWindowsPerformanceCounterMapOutput values.
// You can construct a concrete instance of `DataSourceWindowsPerformanceCounterMapInput` via:
//
//          DataSourceWindowsPerformanceCounterMap{ "key": DataSourceWindowsPerformanceCounterArgs{...} }
type DataSourceWindowsPerformanceCounterMapInput interface {
	pulumi.Input

	ToDataSourceWindowsPerformanceCounterMapOutput() DataSourceWindowsPerformanceCounterMapOutput
	ToDataSourceWindowsPerformanceCounterMapOutputWithContext(context.Context) DataSourceWindowsPerformanceCounterMapOutput
}

type DataSourceWindowsPerformanceCounterMap map[string]DataSourceWindowsPerformanceCounterInput

func (DataSourceWindowsPerformanceCounterMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*DataSourceWindowsPerformanceCounter)(nil))
}

func (i DataSourceWindowsPerformanceCounterMap) ToDataSourceWindowsPerformanceCounterMapOutput() DataSourceWindowsPerformanceCounterMapOutput {
	return i.ToDataSourceWindowsPerformanceCounterMapOutputWithContext(context.Background())
}

func (i DataSourceWindowsPerformanceCounterMap) ToDataSourceWindowsPerformanceCounterMapOutputWithContext(ctx context.Context) DataSourceWindowsPerformanceCounterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceWindowsPerformanceCounterMapOutput)
}

type DataSourceWindowsPerformanceCounterOutput struct {
	*pulumi.OutputState
}

func (DataSourceWindowsPerformanceCounterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceWindowsPerformanceCounter)(nil))
}

func (o DataSourceWindowsPerformanceCounterOutput) ToDataSourceWindowsPerformanceCounterOutput() DataSourceWindowsPerformanceCounterOutput {
	return o
}

func (o DataSourceWindowsPerformanceCounterOutput) ToDataSourceWindowsPerformanceCounterOutputWithContext(ctx context.Context) DataSourceWindowsPerformanceCounterOutput {
	return o
}

func (o DataSourceWindowsPerformanceCounterOutput) ToDataSourceWindowsPerformanceCounterPtrOutput() DataSourceWindowsPerformanceCounterPtrOutput {
	return o.ToDataSourceWindowsPerformanceCounterPtrOutputWithContext(context.Background())
}

func (o DataSourceWindowsPerformanceCounterOutput) ToDataSourceWindowsPerformanceCounterPtrOutputWithContext(ctx context.Context) DataSourceWindowsPerformanceCounterPtrOutput {
	return o.ApplyT(func(v DataSourceWindowsPerformanceCounter) *DataSourceWindowsPerformanceCounter {
		return &v
	}).(DataSourceWindowsPerformanceCounterPtrOutput)
}

type DataSourceWindowsPerformanceCounterPtrOutput struct {
	*pulumi.OutputState
}

func (DataSourceWindowsPerformanceCounterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceWindowsPerformanceCounter)(nil))
}

func (o DataSourceWindowsPerformanceCounterPtrOutput) ToDataSourceWindowsPerformanceCounterPtrOutput() DataSourceWindowsPerformanceCounterPtrOutput {
	return o
}

func (o DataSourceWindowsPerformanceCounterPtrOutput) ToDataSourceWindowsPerformanceCounterPtrOutputWithContext(ctx context.Context) DataSourceWindowsPerformanceCounterPtrOutput {
	return o
}

type DataSourceWindowsPerformanceCounterArrayOutput struct{ *pulumi.OutputState }

func (DataSourceWindowsPerformanceCounterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSourceWindowsPerformanceCounter)(nil))
}

func (o DataSourceWindowsPerformanceCounterArrayOutput) ToDataSourceWindowsPerformanceCounterArrayOutput() DataSourceWindowsPerformanceCounterArrayOutput {
	return o
}

func (o DataSourceWindowsPerformanceCounterArrayOutput) ToDataSourceWindowsPerformanceCounterArrayOutputWithContext(ctx context.Context) DataSourceWindowsPerformanceCounterArrayOutput {
	return o
}

func (o DataSourceWindowsPerformanceCounterArrayOutput) Index(i pulumi.IntInput) DataSourceWindowsPerformanceCounterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSourceWindowsPerformanceCounter {
		return vs[0].([]DataSourceWindowsPerformanceCounter)[vs[1].(int)]
	}).(DataSourceWindowsPerformanceCounterOutput)
}

type DataSourceWindowsPerformanceCounterMapOutput struct{ *pulumi.OutputState }

func (DataSourceWindowsPerformanceCounterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DataSourceWindowsPerformanceCounter)(nil))
}

func (o DataSourceWindowsPerformanceCounterMapOutput) ToDataSourceWindowsPerformanceCounterMapOutput() DataSourceWindowsPerformanceCounterMapOutput {
	return o
}

func (o DataSourceWindowsPerformanceCounterMapOutput) ToDataSourceWindowsPerformanceCounterMapOutputWithContext(ctx context.Context) DataSourceWindowsPerformanceCounterMapOutput {
	return o
}

func (o DataSourceWindowsPerformanceCounterMapOutput) MapIndex(k pulumi.StringInput) DataSourceWindowsPerformanceCounterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DataSourceWindowsPerformanceCounter {
		return vs[0].(map[string]DataSourceWindowsPerformanceCounter)[vs[1].(string)]
	}).(DataSourceWindowsPerformanceCounterOutput)
}

func init() {
	pulumi.RegisterOutputType(DataSourceWindowsPerformanceCounterOutput{})
	pulumi.RegisterOutputType(DataSourceWindowsPerformanceCounterPtrOutput{})
	pulumi.RegisterOutputType(DataSourceWindowsPerformanceCounterArrayOutput{})
	pulumi.RegisterOutputType(DataSourceWindowsPerformanceCounterMapOutput{})
}
