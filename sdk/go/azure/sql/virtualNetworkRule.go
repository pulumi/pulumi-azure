// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sql

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Allows you to add, update, or remove an Azure SQL server to a subnet of a virtual network.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/sql_virtual_network_rule.html.markdown.
type VirtualNetworkRule struct {
	s *pulumi.ResourceState
}

// NewVirtualNetworkRule registers a new resource with the given unique name, arguments, and options.
func NewVirtualNetworkRule(ctx *pulumi.Context,
	name string, args *VirtualNetworkRuleArgs, opts ...pulumi.ResourceOpt) (*VirtualNetworkRule, error) {
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.ServerName == nil {
		return nil, errors.New("missing required argument 'ServerName'")
	}
	if args == nil || args.SubnetId == nil {
		return nil, errors.New("missing required argument 'SubnetId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["ignoreMissingVnetServiceEndpoint"] = nil
		inputs["name"] = nil
		inputs["resourceGroupName"] = nil
		inputs["serverName"] = nil
		inputs["subnetId"] = nil
	} else {
		inputs["ignoreMissingVnetServiceEndpoint"] = args.IgnoreMissingVnetServiceEndpoint
		inputs["name"] = args.Name
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["serverName"] = args.ServerName
		inputs["subnetId"] = args.SubnetId
	}
	s, err := ctx.RegisterResource("azure:sql/virtualNetworkRule:VirtualNetworkRule", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VirtualNetworkRule{s: s}, nil
}

// GetVirtualNetworkRule gets an existing VirtualNetworkRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualNetworkRule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *VirtualNetworkRuleState, opts ...pulumi.ResourceOpt) (*VirtualNetworkRule, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["ignoreMissingVnetServiceEndpoint"] = state.IgnoreMissingVnetServiceEndpoint
		inputs["name"] = state.Name
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["serverName"] = state.ServerName
		inputs["subnetId"] = state.SubnetId
	}
	s, err := ctx.ReadResource("azure:sql/virtualNetworkRule:VirtualNetworkRule", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VirtualNetworkRule{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *VirtualNetworkRule) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *VirtualNetworkRule) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Create the virtual network rule before the subnet has the virtual network service endpoint enabled. The default value is false.
func (r *VirtualNetworkRule) IgnoreMissingVnetServiceEndpoint() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["ignoreMissingVnetServiceEndpoint"])
}

// The name of the SQL virtual network rule. Changing this forces a new resource to be created. Cannot be empty and must only contain alphanumeric characters and hyphens. Cannot start with a number, and cannot start or end with a hyphen.
func (r *VirtualNetworkRule) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The name of the resource group where the SQL server resides. Changing this forces a new resource to be created.
func (r *VirtualNetworkRule) ResourceGroupName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// The name of the SQL Server to which this SQL virtual network rule will be applied to. Changing this forces a new resource to be created.
func (r *VirtualNetworkRule) ServerName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["serverName"])
}

// The ID of the subnet that the SQL server will be connected to.
func (r *VirtualNetworkRule) SubnetId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["subnetId"])
}

// Input properties used for looking up and filtering VirtualNetworkRule resources.
type VirtualNetworkRuleState struct {
	// Create the virtual network rule before the subnet has the virtual network service endpoint enabled. The default value is false.
	IgnoreMissingVnetServiceEndpoint interface{}
	// The name of the SQL virtual network rule. Changing this forces a new resource to be created. Cannot be empty and must only contain alphanumeric characters and hyphens. Cannot start with a number, and cannot start or end with a hyphen.
	Name interface{}
	// The name of the resource group where the SQL server resides. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// The name of the SQL Server to which this SQL virtual network rule will be applied to. Changing this forces a new resource to be created.
	ServerName interface{}
	// The ID of the subnet that the SQL server will be connected to.
	SubnetId interface{}
}

// The set of arguments for constructing a VirtualNetworkRule resource.
type VirtualNetworkRuleArgs struct {
	// Create the virtual network rule before the subnet has the virtual network service endpoint enabled. The default value is false.
	IgnoreMissingVnetServiceEndpoint interface{}
	// The name of the SQL virtual network rule. Changing this forces a new resource to be created. Cannot be empty and must only contain alphanumeric characters and hyphens. Cannot start with a number, and cannot start or end with a hyphen.
	Name interface{}
	// The name of the resource group where the SQL server resides. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// The name of the SQL Server to which this SQL virtual network rule will be applied to. Changing this forces a new resource to be created.
	ServerName interface{}
	// The ID of the subnet that the SQL server will be connected to.
	SubnetId interface{}
}
