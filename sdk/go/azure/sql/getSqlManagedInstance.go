// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing SQL Managed Instance.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/sql"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		example, err := sql.GetSqlManagedInstance(ctx, &sql.GetSqlManagedInstanceArgs{
// 			Name:              "example_mi",
// 			ResourceGroupName: "example-resources",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("sqlInstanceId", example.Id)
// 		return nil
// 	})
// }
// ```
// ## Attribues Reference
//
// * `id` - The SQL Managed Instance ID.
//
// * `fqdn` - The fully qualified domain name of the Azure Managed SQL Instance.
//
// * `location` - Location where the resource exists.
//
// * `skuName` - SKU Name for the SQL Managed Instance.
//
// * `vcores` - Number of cores assigned to your instance.
//
// * `storageSizeInGb` - Maximum storage space for your instance.
//
// * `licenseType` - Type of license the Managed Instance uses.
//
// * `administratorLogin` - The administrator login name for the new server.
//
// * `subnetId` - The subnet resource id that the SQL Managed Instance is associated with.
//
// * `collation` - Specifies how the SQL Managed Instance is collated.
//
// * `publicDataEndpointEnabled` - Is the public data endpoint enabled?
//
// * `minimumTlsVersion` - The Minimum TLS Version.
//
// * `proxyOverride` - How the SQL Managed Instance is accessed.
//
// * `timezoneId` - The TimeZone ID that the SQL Managed Instance is operating in.
//
// * `dnsZonePartnerId` - The ID of the Managed Instance which is sharing the DNS zone.
//
// * `identity` - An `identity` block as defined below.
//
// * `storageAccountType` - Storage account type used to store backups for this SQL Managed Instance.
//
// * `tags` - A mapping of tags assigned to the resource.
//
// ***
//
// The `identity` block exports the following:
//
// * `principalId` - The Principal ID for the Service Principal associated with the Identity of this SQL Managed Instance.
//
// * `tenantId` - The Tenant ID for the Service Principal associated with the Identity of this SQL Managed Instance.
func GetSqlManagedInstance(ctx *pulumi.Context, args *GetSqlManagedInstanceArgs, opts ...pulumi.InvokeOption) (*GetSqlManagedInstanceResult, error) {
	var rv GetSqlManagedInstanceResult
	err := ctx.Invoke("azure:sql/getSqlManagedInstance:getSqlManagedInstance", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSqlManagedInstance.
type GetSqlManagedInstanceArgs struct {
	// The name of the SQL Managed Instance.
	Name string `pulumi:"name"`
	// The name of the Resource Group in which the SQL Managed Instance exists.
	ResourceGroupName string            `pulumi:"resourceGroupName"`
	Tags              map[string]string `pulumi:"tags"`
}

// A collection of values returned by getSqlManagedInstance.
type GetSqlManagedInstanceResult struct {
	AdministratorLogin string `pulumi:"administratorLogin"`
	Collation          string `pulumi:"collation"`
	DnsZonePartnerId   string `pulumi:"dnsZonePartnerId"`
	Fqdn               string `pulumi:"fqdn"`
	// The provider-assigned unique ID for this managed resource.
	Id                        string                          `pulumi:"id"`
	Identities                []GetSqlManagedInstanceIdentity `pulumi:"identities"`
	LicenseType               string                          `pulumi:"licenseType"`
	Location                  string                          `pulumi:"location"`
	MinimumTlsVersion         string                          `pulumi:"minimumTlsVersion"`
	Name                      string                          `pulumi:"name"`
	ProxyOverride             string                          `pulumi:"proxyOverride"`
	PublicDataEndpointEnabled bool                            `pulumi:"publicDataEndpointEnabled"`
	ResourceGroupName         string                          `pulumi:"resourceGroupName"`
	SkuName                   string                          `pulumi:"skuName"`
	StorageAccountType        string                          `pulumi:"storageAccountType"`
	StorageSizeInGb           int                             `pulumi:"storageSizeInGb"`
	SubnetId                  string                          `pulumi:"subnetId"`
	Tags                      map[string]string               `pulumi:"tags"`
	TimezoneId                string                          `pulumi:"timezoneId"`
	Vcores                    int                             `pulumi:"vcores"`
}

func GetSqlManagedInstanceOutput(ctx *pulumi.Context, args GetSqlManagedInstanceOutputArgs, opts ...pulumi.InvokeOption) GetSqlManagedInstanceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSqlManagedInstanceResult, error) {
			args := v.(GetSqlManagedInstanceArgs)
			r, err := GetSqlManagedInstance(ctx, &args, opts...)
			return *r, err
		}).(GetSqlManagedInstanceResultOutput)
}

// A collection of arguments for invoking getSqlManagedInstance.
type GetSqlManagedInstanceOutputArgs struct {
	// The name of the SQL Managed Instance.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Resource Group in which the SQL Managed Instance exists.
	ResourceGroupName pulumi.StringInput    `pulumi:"resourceGroupName"`
	Tags              pulumi.StringMapInput `pulumi:"tags"`
}

func (GetSqlManagedInstanceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSqlManagedInstanceArgs)(nil)).Elem()
}

// A collection of values returned by getSqlManagedInstance.
type GetSqlManagedInstanceResultOutput struct{ *pulumi.OutputState }

func (GetSqlManagedInstanceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSqlManagedInstanceResult)(nil)).Elem()
}

func (o GetSqlManagedInstanceResultOutput) ToGetSqlManagedInstanceResultOutput() GetSqlManagedInstanceResultOutput {
	return o
}

func (o GetSqlManagedInstanceResultOutput) ToGetSqlManagedInstanceResultOutputWithContext(ctx context.Context) GetSqlManagedInstanceResultOutput {
	return o
}

func (o GetSqlManagedInstanceResultOutput) AdministratorLogin() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) string { return v.AdministratorLogin }).(pulumi.StringOutput)
}

func (o GetSqlManagedInstanceResultOutput) Collation() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) string { return v.Collation }).(pulumi.StringOutput)
}

func (o GetSqlManagedInstanceResultOutput) DnsZonePartnerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) string { return v.DnsZonePartnerId }).(pulumi.StringOutput)
}

func (o GetSqlManagedInstanceResultOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) string { return v.Fqdn }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSqlManagedInstanceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetSqlManagedInstanceResultOutput) Identities() GetSqlManagedInstanceIdentityArrayOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) []GetSqlManagedInstanceIdentity { return v.Identities }).(GetSqlManagedInstanceIdentityArrayOutput)
}

func (o GetSqlManagedInstanceResultOutput) LicenseType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) string { return v.LicenseType }).(pulumi.StringOutput)
}

func (o GetSqlManagedInstanceResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o GetSqlManagedInstanceResultOutput) MinimumTlsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) string { return v.MinimumTlsVersion }).(pulumi.StringOutput)
}

func (o GetSqlManagedInstanceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetSqlManagedInstanceResultOutput) ProxyOverride() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) string { return v.ProxyOverride }).(pulumi.StringOutput)
}

func (o GetSqlManagedInstanceResultOutput) PublicDataEndpointEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) bool { return v.PublicDataEndpointEnabled }).(pulumi.BoolOutput)
}

func (o GetSqlManagedInstanceResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

func (o GetSqlManagedInstanceResultOutput) SkuName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) string { return v.SkuName }).(pulumi.StringOutput)
}

func (o GetSqlManagedInstanceResultOutput) StorageAccountType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) string { return v.StorageAccountType }).(pulumi.StringOutput)
}

func (o GetSqlManagedInstanceResultOutput) StorageSizeInGb() pulumi.IntOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) int { return v.StorageSizeInGb }).(pulumi.IntOutput)
}

func (o GetSqlManagedInstanceResultOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) string { return v.SubnetId }).(pulumi.StringOutput)
}

func (o GetSqlManagedInstanceResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func (o GetSqlManagedInstanceResultOutput) TimezoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) string { return v.TimezoneId }).(pulumi.StringOutput)
}

func (o GetSqlManagedInstanceResultOutput) Vcores() pulumi.IntOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) int { return v.Vcores }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSqlManagedInstanceResultOutput{})
}
