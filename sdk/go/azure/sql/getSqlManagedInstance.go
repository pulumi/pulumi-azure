// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing SQL Managed Instance.
//
// > **Note:** The `sql.ManagedInstance` data source is deprecated in version 3.0 of the AzureRM provider and will be removed in version 4.0. Please use the `mssql.ManagedInstance` data source instead.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/sql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := sql.GetSqlManagedInstance(ctx, &sql.GetSqlManagedInstanceArgs{
//				Name:              "example_mi",
//				ResourceGroupName: "example-resources",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("sqlInstanceId", example.Id)
//			return nil
//		})
//	}
//
// ```
func GetSqlManagedInstance(ctx *pulumi.Context, args *GetSqlManagedInstanceArgs, opts ...pulumi.InvokeOption) (*GetSqlManagedInstanceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSqlManagedInstanceResult
	err := ctx.Invoke("azure:sql/getSqlManagedInstance:getSqlManagedInstance", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSqlManagedInstance.
type GetSqlManagedInstanceArgs struct {
	// The name of the SQL Managed Instance.
	Name string `pulumi:"name"`
	// The name of the Resource Group in which the SQL Managed Instance exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags assigned to the resource.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getSqlManagedInstance.
type GetSqlManagedInstanceResult struct {
	// The administrator login name for the new server.
	AdministratorLogin string `pulumi:"administratorLogin"`
	// Specifies how the SQL Managed Instance is collated.
	Collation string `pulumi:"collation"`
	// The ID of the Managed Instance which is sharing the DNS zone.
	DnsZonePartnerId string `pulumi:"dnsZonePartnerId"`
	// The fully qualified domain name of the Azure Managed SQL Instance.
	Fqdn string `pulumi:"fqdn"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// An `identity` block as defined below.
	Identities []GetSqlManagedInstanceIdentity `pulumi:"identities"`
	// Type of license the Managed Instance uses.
	LicenseType string `pulumi:"licenseType"`
	// Location where the resource exists.
	Location string `pulumi:"location"`
	// The Minimum TLS Version.
	MinimumTlsVersion string `pulumi:"minimumTlsVersion"`
	Name              string `pulumi:"name"`
	// How the SQL Managed Instance is accessed.
	ProxyOverride string `pulumi:"proxyOverride"`
	// Is the public data endpoint enabled?
	PublicDataEndpointEnabled bool   `pulumi:"publicDataEndpointEnabled"`
	ResourceGroupName         string `pulumi:"resourceGroupName"`
	// SKU Name for the SQL Managed Instance.
	SkuName string `pulumi:"skuName"`
	// Storage account type used to store backups for this SQL Managed Instance.
	StorageAccountType string `pulumi:"storageAccountType"`
	// Maximum storage space for your instance.
	StorageSizeInGb int `pulumi:"storageSizeInGb"`
	// The subnet resource id that the SQL Managed Instance is associated with.
	SubnetId string `pulumi:"subnetId"`
	// A mapping of tags assigned to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The TimeZone ID that the SQL Managed Instance is operating in.
	TimezoneId string `pulumi:"timezoneId"`
	// Number of cores assigned to your instance.
	Vcores int `pulumi:"vcores"`
}

func GetSqlManagedInstanceOutput(ctx *pulumi.Context, args GetSqlManagedInstanceOutputArgs, opts ...pulumi.InvokeOption) GetSqlManagedInstanceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSqlManagedInstanceResult, error) {
			args := v.(GetSqlManagedInstanceArgs)
			r, err := GetSqlManagedInstance(ctx, &args, opts...)
			var s GetSqlManagedInstanceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetSqlManagedInstanceResultOutput)
}

// A collection of arguments for invoking getSqlManagedInstance.
type GetSqlManagedInstanceOutputArgs struct {
	// The name of the SQL Managed Instance.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Resource Group in which the SQL Managed Instance exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// A mapping of tags assigned to the resource.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetSqlManagedInstanceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSqlManagedInstanceArgs)(nil)).Elem()
}

// A collection of values returned by getSqlManagedInstance.
type GetSqlManagedInstanceResultOutput struct{ *pulumi.OutputState }

func (GetSqlManagedInstanceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSqlManagedInstanceResult)(nil)).Elem()
}

func (o GetSqlManagedInstanceResultOutput) ToGetSqlManagedInstanceResultOutput() GetSqlManagedInstanceResultOutput {
	return o
}

func (o GetSqlManagedInstanceResultOutput) ToGetSqlManagedInstanceResultOutputWithContext(ctx context.Context) GetSqlManagedInstanceResultOutput {
	return o
}

// The administrator login name for the new server.
func (o GetSqlManagedInstanceResultOutput) AdministratorLogin() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) string { return v.AdministratorLogin }).(pulumi.StringOutput)
}

// Specifies how the SQL Managed Instance is collated.
func (o GetSqlManagedInstanceResultOutput) Collation() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) string { return v.Collation }).(pulumi.StringOutput)
}

// The ID of the Managed Instance which is sharing the DNS zone.
func (o GetSqlManagedInstanceResultOutput) DnsZonePartnerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) string { return v.DnsZonePartnerId }).(pulumi.StringOutput)
}

// The fully qualified domain name of the Azure Managed SQL Instance.
func (o GetSqlManagedInstanceResultOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) string { return v.Fqdn }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSqlManagedInstanceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) string { return v.Id }).(pulumi.StringOutput)
}

// An `identity` block as defined below.
func (o GetSqlManagedInstanceResultOutput) Identities() GetSqlManagedInstanceIdentityArrayOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) []GetSqlManagedInstanceIdentity { return v.Identities }).(GetSqlManagedInstanceIdentityArrayOutput)
}

// Type of license the Managed Instance uses.
func (o GetSqlManagedInstanceResultOutput) LicenseType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) string { return v.LicenseType }).(pulumi.StringOutput)
}

// Location where the resource exists.
func (o GetSqlManagedInstanceResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) string { return v.Location }).(pulumi.StringOutput)
}

// The Minimum TLS Version.
func (o GetSqlManagedInstanceResultOutput) MinimumTlsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) string { return v.MinimumTlsVersion }).(pulumi.StringOutput)
}

func (o GetSqlManagedInstanceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) string { return v.Name }).(pulumi.StringOutput)
}

// How the SQL Managed Instance is accessed.
func (o GetSqlManagedInstanceResultOutput) ProxyOverride() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) string { return v.ProxyOverride }).(pulumi.StringOutput)
}

// Is the public data endpoint enabled?
func (o GetSqlManagedInstanceResultOutput) PublicDataEndpointEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) bool { return v.PublicDataEndpointEnabled }).(pulumi.BoolOutput)
}

func (o GetSqlManagedInstanceResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// SKU Name for the SQL Managed Instance.
func (o GetSqlManagedInstanceResultOutput) SkuName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) string { return v.SkuName }).(pulumi.StringOutput)
}

// Storage account type used to store backups for this SQL Managed Instance.
func (o GetSqlManagedInstanceResultOutput) StorageAccountType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) string { return v.StorageAccountType }).(pulumi.StringOutput)
}

// Maximum storage space for your instance.
func (o GetSqlManagedInstanceResultOutput) StorageSizeInGb() pulumi.IntOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) int { return v.StorageSizeInGb }).(pulumi.IntOutput)
}

// The subnet resource id that the SQL Managed Instance is associated with.
func (o GetSqlManagedInstanceResultOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) string { return v.SubnetId }).(pulumi.StringOutput)
}

// A mapping of tags assigned to the resource.
func (o GetSqlManagedInstanceResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The TimeZone ID that the SQL Managed Instance is operating in.
func (o GetSqlManagedInstanceResultOutput) TimezoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) string { return v.TimezoneId }).(pulumi.StringOutput)
}

// Number of cores assigned to your instance.
func (o GetSqlManagedInstanceResultOutput) Vcores() pulumi.IntOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceResult) int { return v.Vcores }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSqlManagedInstanceResultOutput{})
}
