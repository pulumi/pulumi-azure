// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sql

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Allows you to manage an Azure SQL Firewall Rule
type FirewallRule struct {
	s *pulumi.ResourceState
}

// NewFirewallRule registers a new resource with the given unique name, arguments, and options.
func NewFirewallRule(ctx *pulumi.Context,
	name string, args *FirewallRuleArgs, opts ...pulumi.ResourceOpt) (*FirewallRule, error) {
	if args == nil || args.EndIpAddress == nil {
		return nil, errors.New("missing required argument 'EndIpAddress'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.ServerName == nil {
		return nil, errors.New("missing required argument 'ServerName'")
	}
	if args == nil || args.StartIpAddress == nil {
		return nil, errors.New("missing required argument 'StartIpAddress'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["endIpAddress"] = nil
		inputs["name"] = nil
		inputs["resourceGroupName"] = nil
		inputs["serverName"] = nil
		inputs["startIpAddress"] = nil
	} else {
		inputs["endIpAddress"] = args.EndIpAddress
		inputs["name"] = args.Name
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["serverName"] = args.ServerName
		inputs["startIpAddress"] = args.StartIpAddress
	}
	s, err := ctx.RegisterResource("azure:sql/firewallRule:FirewallRule", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &FirewallRule{s: s}, nil
}

// GetFirewallRule gets an existing FirewallRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallRule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *FirewallRuleState, opts ...pulumi.ResourceOpt) (*FirewallRule, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["endIpAddress"] = state.EndIpAddress
		inputs["name"] = state.Name
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["serverName"] = state.ServerName
		inputs["startIpAddress"] = state.StartIpAddress
	}
	s, err := ctx.ReadResource("azure:sql/firewallRule:FirewallRule", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &FirewallRule{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *FirewallRule) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *FirewallRule) ID() *pulumi.IDOutput {
	return r.s.ID
}

// The ending IP address to allow through the firewall for this rule.
func (r *FirewallRule) EndIpAddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["endIpAddress"])
}

// The name of the firewall rule.
func (r *FirewallRule) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The name of the resource group in which to
// create the sql server.
func (r *FirewallRule) ResourceGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// The name of the SQL Server on which to create the Firewall Rule.
func (r *FirewallRule) ServerName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["serverName"])
}

// The starting IP address to allow through the firewall for this rule.
func (r *FirewallRule) StartIpAddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["startIpAddress"])
}

// Input properties used for looking up and filtering FirewallRule resources.
type FirewallRuleState struct {
	// The ending IP address to allow through the firewall for this rule.
	EndIpAddress interface{}
	// The name of the firewall rule.
	Name interface{}
	// The name of the resource group in which to
	// create the sql server.
	ResourceGroupName interface{}
	// The name of the SQL Server on which to create the Firewall Rule.
	ServerName interface{}
	// The starting IP address to allow through the firewall for this rule.
	StartIpAddress interface{}
}

// The set of arguments for constructing a FirewallRule resource.
type FirewallRuleArgs struct {
	// The ending IP address to allow through the firewall for this rule.
	EndIpAddress interface{}
	// The name of the firewall rule.
	Name interface{}
	// The name of the resource group in which to
	// create the sql server.
	ResourceGroupName interface{}
	// The name of the SQL Server on which to create the Firewall Rule.
	ServerName interface{}
	// The starting IP address to allow through the firewall for this rule.
	StartIpAddress interface{}
}
