// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DatabaseExtendedAuditingPolicy struct {
	LogMonitoringEnabled *bool `pulumi:"logMonitoringEnabled"`
	// Specifies the number of days to retain logs for in the storage account.
	RetentionInDays *int `pulumi:"retentionInDays"`
	// Specifies the access key to use for the auditing storage account.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// Specifies whether `storageAccountAccessKey` value is the storage's secondary key.
	StorageAccountAccessKeyIsSecondary *bool `pulumi:"storageAccountAccessKeyIsSecondary"`
	// Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net).
	StorageEndpoint *string `pulumi:"storageEndpoint"`
}

// DatabaseExtendedAuditingPolicyInput is an input type that accepts DatabaseExtendedAuditingPolicyArgs and DatabaseExtendedAuditingPolicyOutput values.
// You can construct a concrete instance of `DatabaseExtendedAuditingPolicyInput` via:
//
//          DatabaseExtendedAuditingPolicyArgs{...}
type DatabaseExtendedAuditingPolicyInput interface {
	pulumi.Input

	ToDatabaseExtendedAuditingPolicyOutput() DatabaseExtendedAuditingPolicyOutput
	ToDatabaseExtendedAuditingPolicyOutputWithContext(context.Context) DatabaseExtendedAuditingPolicyOutput
}

type DatabaseExtendedAuditingPolicyArgs struct {
	LogMonitoringEnabled pulumi.BoolPtrInput `pulumi:"logMonitoringEnabled"`
	// Specifies the number of days to retain logs for in the storage account.
	RetentionInDays pulumi.IntPtrInput `pulumi:"retentionInDays"`
	// Specifies the access key to use for the auditing storage account.
	StorageAccountAccessKey pulumi.StringPtrInput `pulumi:"storageAccountAccessKey"`
	// Specifies whether `storageAccountAccessKey` value is the storage's secondary key.
	StorageAccountAccessKeyIsSecondary pulumi.BoolPtrInput `pulumi:"storageAccountAccessKeyIsSecondary"`
	// Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net).
	StorageEndpoint pulumi.StringPtrInput `pulumi:"storageEndpoint"`
}

func (DatabaseExtendedAuditingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseExtendedAuditingPolicy)(nil)).Elem()
}

func (i DatabaseExtendedAuditingPolicyArgs) ToDatabaseExtendedAuditingPolicyOutput() DatabaseExtendedAuditingPolicyOutput {
	return i.ToDatabaseExtendedAuditingPolicyOutputWithContext(context.Background())
}

func (i DatabaseExtendedAuditingPolicyArgs) ToDatabaseExtendedAuditingPolicyOutputWithContext(ctx context.Context) DatabaseExtendedAuditingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseExtendedAuditingPolicyOutput)
}

func (i DatabaseExtendedAuditingPolicyArgs) ToDatabaseExtendedAuditingPolicyPtrOutput() DatabaseExtendedAuditingPolicyPtrOutput {
	return i.ToDatabaseExtendedAuditingPolicyPtrOutputWithContext(context.Background())
}

func (i DatabaseExtendedAuditingPolicyArgs) ToDatabaseExtendedAuditingPolicyPtrOutputWithContext(ctx context.Context) DatabaseExtendedAuditingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseExtendedAuditingPolicyOutput).ToDatabaseExtendedAuditingPolicyPtrOutputWithContext(ctx)
}

// DatabaseExtendedAuditingPolicyPtrInput is an input type that accepts DatabaseExtendedAuditingPolicyArgs, DatabaseExtendedAuditingPolicyPtr and DatabaseExtendedAuditingPolicyPtrOutput values.
// You can construct a concrete instance of `DatabaseExtendedAuditingPolicyPtrInput` via:
//
//          DatabaseExtendedAuditingPolicyArgs{...}
//
//  or:
//
//          nil
type DatabaseExtendedAuditingPolicyPtrInput interface {
	pulumi.Input

	ToDatabaseExtendedAuditingPolicyPtrOutput() DatabaseExtendedAuditingPolicyPtrOutput
	ToDatabaseExtendedAuditingPolicyPtrOutputWithContext(context.Context) DatabaseExtendedAuditingPolicyPtrOutput
}

type databaseExtendedAuditingPolicyPtrType DatabaseExtendedAuditingPolicyArgs

func DatabaseExtendedAuditingPolicyPtr(v *DatabaseExtendedAuditingPolicyArgs) DatabaseExtendedAuditingPolicyPtrInput {
	return (*databaseExtendedAuditingPolicyPtrType)(v)
}

func (*databaseExtendedAuditingPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseExtendedAuditingPolicy)(nil)).Elem()
}

func (i *databaseExtendedAuditingPolicyPtrType) ToDatabaseExtendedAuditingPolicyPtrOutput() DatabaseExtendedAuditingPolicyPtrOutput {
	return i.ToDatabaseExtendedAuditingPolicyPtrOutputWithContext(context.Background())
}

func (i *databaseExtendedAuditingPolicyPtrType) ToDatabaseExtendedAuditingPolicyPtrOutputWithContext(ctx context.Context) DatabaseExtendedAuditingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseExtendedAuditingPolicyPtrOutput)
}

type DatabaseExtendedAuditingPolicyOutput struct{ *pulumi.OutputState }

func (DatabaseExtendedAuditingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseExtendedAuditingPolicy)(nil)).Elem()
}

func (o DatabaseExtendedAuditingPolicyOutput) ToDatabaseExtendedAuditingPolicyOutput() DatabaseExtendedAuditingPolicyOutput {
	return o
}

func (o DatabaseExtendedAuditingPolicyOutput) ToDatabaseExtendedAuditingPolicyOutputWithContext(ctx context.Context) DatabaseExtendedAuditingPolicyOutput {
	return o
}

func (o DatabaseExtendedAuditingPolicyOutput) ToDatabaseExtendedAuditingPolicyPtrOutput() DatabaseExtendedAuditingPolicyPtrOutput {
	return o.ToDatabaseExtendedAuditingPolicyPtrOutputWithContext(context.Background())
}

func (o DatabaseExtendedAuditingPolicyOutput) ToDatabaseExtendedAuditingPolicyPtrOutputWithContext(ctx context.Context) DatabaseExtendedAuditingPolicyPtrOutput {
	return o.ApplyT(func(v DatabaseExtendedAuditingPolicy) *DatabaseExtendedAuditingPolicy {
		return &v
	}).(DatabaseExtendedAuditingPolicyPtrOutput)
}
func (o DatabaseExtendedAuditingPolicyOutput) LogMonitoringEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatabaseExtendedAuditingPolicy) *bool { return v.LogMonitoringEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the number of days to retain logs for in the storage account.
func (o DatabaseExtendedAuditingPolicyOutput) RetentionInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatabaseExtendedAuditingPolicy) *int { return v.RetentionInDays }).(pulumi.IntPtrOutput)
}

// Specifies the access key to use for the auditing storage account.
func (o DatabaseExtendedAuditingPolicyOutput) StorageAccountAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseExtendedAuditingPolicy) *string { return v.StorageAccountAccessKey }).(pulumi.StringPtrOutput)
}

// Specifies whether `storageAccountAccessKey` value is the storage's secondary key.
func (o DatabaseExtendedAuditingPolicyOutput) StorageAccountAccessKeyIsSecondary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatabaseExtendedAuditingPolicy) *bool { return v.StorageAccountAccessKeyIsSecondary }).(pulumi.BoolPtrOutput)
}

// Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net).
func (o DatabaseExtendedAuditingPolicyOutput) StorageEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseExtendedAuditingPolicy) *string { return v.StorageEndpoint }).(pulumi.StringPtrOutput)
}

type DatabaseExtendedAuditingPolicyPtrOutput struct{ *pulumi.OutputState }

func (DatabaseExtendedAuditingPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseExtendedAuditingPolicy)(nil)).Elem()
}

func (o DatabaseExtendedAuditingPolicyPtrOutput) ToDatabaseExtendedAuditingPolicyPtrOutput() DatabaseExtendedAuditingPolicyPtrOutput {
	return o
}

func (o DatabaseExtendedAuditingPolicyPtrOutput) ToDatabaseExtendedAuditingPolicyPtrOutputWithContext(ctx context.Context) DatabaseExtendedAuditingPolicyPtrOutput {
	return o
}

func (o DatabaseExtendedAuditingPolicyPtrOutput) Elem() DatabaseExtendedAuditingPolicyOutput {
	return o.ApplyT(func(v *DatabaseExtendedAuditingPolicy) DatabaseExtendedAuditingPolicy { return *v }).(DatabaseExtendedAuditingPolicyOutput)
}

func (o DatabaseExtendedAuditingPolicyPtrOutput) LogMonitoringEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseExtendedAuditingPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.LogMonitoringEnabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the number of days to retain logs for in the storage account.
func (o DatabaseExtendedAuditingPolicyPtrOutput) RetentionInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatabaseExtendedAuditingPolicy) *int {
		if v == nil {
			return nil
		}
		return v.RetentionInDays
	}).(pulumi.IntPtrOutput)
}

// Specifies the access key to use for the auditing storage account.
func (o DatabaseExtendedAuditingPolicyPtrOutput) StorageAccountAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseExtendedAuditingPolicy) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountAccessKey
	}).(pulumi.StringPtrOutput)
}

// Specifies whether `storageAccountAccessKey` value is the storage's secondary key.
func (o DatabaseExtendedAuditingPolicyPtrOutput) StorageAccountAccessKeyIsSecondary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseExtendedAuditingPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.StorageAccountAccessKeyIsSecondary
	}).(pulumi.BoolPtrOutput)
}

// Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net).
func (o DatabaseExtendedAuditingPolicyPtrOutput) StorageEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseExtendedAuditingPolicy) *string {
		if v == nil {
			return nil
		}
		return v.StorageEndpoint
	}).(pulumi.StringPtrOutput)
}

type DatabaseImport struct {
	// Specifies the name of the SQL administrator.
	AdministratorLogin string `pulumi:"administratorLogin"`
	// Specifies the password of the SQL administrator.
	AdministratorLoginPassword string `pulumi:"administratorLoginPassword"`
	// Specifies the type of authentication used to access the server. Valid values are `SQL` or `ADPassword`.
	AuthenticationType string `pulumi:"authenticationType"`
	// Specifies the type of import operation being performed. The only allowable value is `Import`.
	OperationMode *string `pulumi:"operationMode"`
	// Specifies the access key for the storage account.
	StorageKey string `pulumi:"storageKey"`
	// Specifies the type of access key for the storage account. Valid values are `StorageAccessKey` or `SharedAccessKey`.
	StorageKeyType string `pulumi:"storageKeyType"`
	// Specifies the blob URI of the .bacpac file.
	StorageUri string `pulumi:"storageUri"`
}

// DatabaseImportInput is an input type that accepts DatabaseImportArgs and DatabaseImportOutput values.
// You can construct a concrete instance of `DatabaseImportInput` via:
//
//          DatabaseImportArgs{...}
type DatabaseImportInput interface {
	pulumi.Input

	ToDatabaseImportOutput() DatabaseImportOutput
	ToDatabaseImportOutputWithContext(context.Context) DatabaseImportOutput
}

type DatabaseImportArgs struct {
	// Specifies the name of the SQL administrator.
	AdministratorLogin pulumi.StringInput `pulumi:"administratorLogin"`
	// Specifies the password of the SQL administrator.
	AdministratorLoginPassword pulumi.StringInput `pulumi:"administratorLoginPassword"`
	// Specifies the type of authentication used to access the server. Valid values are `SQL` or `ADPassword`.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// Specifies the type of import operation being performed. The only allowable value is `Import`.
	OperationMode pulumi.StringPtrInput `pulumi:"operationMode"`
	// Specifies the access key for the storage account.
	StorageKey pulumi.StringInput `pulumi:"storageKey"`
	// Specifies the type of access key for the storage account. Valid values are `StorageAccessKey` or `SharedAccessKey`.
	StorageKeyType pulumi.StringInput `pulumi:"storageKeyType"`
	// Specifies the blob URI of the .bacpac file.
	StorageUri pulumi.StringInput `pulumi:"storageUri"`
}

func (DatabaseImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseImport)(nil)).Elem()
}

func (i DatabaseImportArgs) ToDatabaseImportOutput() DatabaseImportOutput {
	return i.ToDatabaseImportOutputWithContext(context.Background())
}

func (i DatabaseImportArgs) ToDatabaseImportOutputWithContext(ctx context.Context) DatabaseImportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseImportOutput)
}

func (i DatabaseImportArgs) ToDatabaseImportPtrOutput() DatabaseImportPtrOutput {
	return i.ToDatabaseImportPtrOutputWithContext(context.Background())
}

func (i DatabaseImportArgs) ToDatabaseImportPtrOutputWithContext(ctx context.Context) DatabaseImportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseImportOutput).ToDatabaseImportPtrOutputWithContext(ctx)
}

// DatabaseImportPtrInput is an input type that accepts DatabaseImportArgs, DatabaseImportPtr and DatabaseImportPtrOutput values.
// You can construct a concrete instance of `DatabaseImportPtrInput` via:
//
//          DatabaseImportArgs{...}
//
//  or:
//
//          nil
type DatabaseImportPtrInput interface {
	pulumi.Input

	ToDatabaseImportPtrOutput() DatabaseImportPtrOutput
	ToDatabaseImportPtrOutputWithContext(context.Context) DatabaseImportPtrOutput
}

type databaseImportPtrType DatabaseImportArgs

func DatabaseImportPtr(v *DatabaseImportArgs) DatabaseImportPtrInput {
	return (*databaseImportPtrType)(v)
}

func (*databaseImportPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseImport)(nil)).Elem()
}

func (i *databaseImportPtrType) ToDatabaseImportPtrOutput() DatabaseImportPtrOutput {
	return i.ToDatabaseImportPtrOutputWithContext(context.Background())
}

func (i *databaseImportPtrType) ToDatabaseImportPtrOutputWithContext(ctx context.Context) DatabaseImportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseImportPtrOutput)
}

type DatabaseImportOutput struct{ *pulumi.OutputState }

func (DatabaseImportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseImport)(nil)).Elem()
}

func (o DatabaseImportOutput) ToDatabaseImportOutput() DatabaseImportOutput {
	return o
}

func (o DatabaseImportOutput) ToDatabaseImportOutputWithContext(ctx context.Context) DatabaseImportOutput {
	return o
}

func (o DatabaseImportOutput) ToDatabaseImportPtrOutput() DatabaseImportPtrOutput {
	return o.ToDatabaseImportPtrOutputWithContext(context.Background())
}

func (o DatabaseImportOutput) ToDatabaseImportPtrOutputWithContext(ctx context.Context) DatabaseImportPtrOutput {
	return o.ApplyT(func(v DatabaseImport) *DatabaseImport {
		return &v
	}).(DatabaseImportPtrOutput)
}

// Specifies the name of the SQL administrator.
func (o DatabaseImportOutput) AdministratorLogin() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseImport) string { return v.AdministratorLogin }).(pulumi.StringOutput)
}

// Specifies the password of the SQL administrator.
func (o DatabaseImportOutput) AdministratorLoginPassword() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseImport) string { return v.AdministratorLoginPassword }).(pulumi.StringOutput)
}

// Specifies the type of authentication used to access the server. Valid values are `SQL` or `ADPassword`.
func (o DatabaseImportOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseImport) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// Specifies the type of import operation being performed. The only allowable value is `Import`.
func (o DatabaseImportOutput) OperationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseImport) *string { return v.OperationMode }).(pulumi.StringPtrOutput)
}

// Specifies the access key for the storage account.
func (o DatabaseImportOutput) StorageKey() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseImport) string { return v.StorageKey }).(pulumi.StringOutput)
}

// Specifies the type of access key for the storage account. Valid values are `StorageAccessKey` or `SharedAccessKey`.
func (o DatabaseImportOutput) StorageKeyType() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseImport) string { return v.StorageKeyType }).(pulumi.StringOutput)
}

// Specifies the blob URI of the .bacpac file.
func (o DatabaseImportOutput) StorageUri() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseImport) string { return v.StorageUri }).(pulumi.StringOutput)
}

type DatabaseImportPtrOutput struct{ *pulumi.OutputState }

func (DatabaseImportPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseImport)(nil)).Elem()
}

func (o DatabaseImportPtrOutput) ToDatabaseImportPtrOutput() DatabaseImportPtrOutput {
	return o
}

func (o DatabaseImportPtrOutput) ToDatabaseImportPtrOutputWithContext(ctx context.Context) DatabaseImportPtrOutput {
	return o
}

func (o DatabaseImportPtrOutput) Elem() DatabaseImportOutput {
	return o.ApplyT(func(v *DatabaseImport) DatabaseImport { return *v }).(DatabaseImportOutput)
}

// Specifies the name of the SQL administrator.
func (o DatabaseImportPtrOutput) AdministratorLogin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseImport) *string {
		if v == nil {
			return nil
		}
		return &v.AdministratorLogin
	}).(pulumi.StringPtrOutput)
}

// Specifies the password of the SQL administrator.
func (o DatabaseImportPtrOutput) AdministratorLoginPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseImport) *string {
		if v == nil {
			return nil
		}
		return &v.AdministratorLoginPassword
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of authentication used to access the server. Valid values are `SQL` or `ADPassword`.
func (o DatabaseImportPtrOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseImport) *string {
		if v == nil {
			return nil
		}
		return &v.AuthenticationType
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of import operation being performed. The only allowable value is `Import`.
func (o DatabaseImportPtrOutput) OperationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseImport) *string {
		if v == nil {
			return nil
		}
		return v.OperationMode
	}).(pulumi.StringPtrOutput)
}

// Specifies the access key for the storage account.
func (o DatabaseImportPtrOutput) StorageKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseImport) *string {
		if v == nil {
			return nil
		}
		return &v.StorageKey
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of access key for the storage account. Valid values are `StorageAccessKey` or `SharedAccessKey`.
func (o DatabaseImportPtrOutput) StorageKeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseImport) *string {
		if v == nil {
			return nil
		}
		return &v.StorageKeyType
	}).(pulumi.StringPtrOutput)
}

// Specifies the blob URI of the .bacpac file.
func (o DatabaseImportPtrOutput) StorageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseImport) *string {
		if v == nil {
			return nil
		}
		return &v.StorageUri
	}).(pulumi.StringPtrOutput)
}

type DatabaseThreatDetectionPolicy struct {
	// Specifies a list of alerts which should be disabled. Possible values include `Access_Anomaly`, `Sql_Injection` and `Sql_Injection_Vulnerability`.
	DisabledAlerts []string `pulumi:"disabledAlerts"`
	// Should the account administrators be emailed when this alert is triggered?
	EmailAccountAdmins *string `pulumi:"emailAccountAdmins"`
	// A list of email addresses which alerts should be sent to.
	EmailAddresses []string `pulumi:"emailAddresses"`
	// Specifies the number of days to keep in the Threat Detection audit logs.
	RetentionDays *int `pulumi:"retentionDays"`
	// The State of the Policy. Possible values are `Enabled`, `Disabled` or `New`.
	State *string `pulumi:"state"`
	// Specifies the identifier key of the Threat Detection audit storage account. Required if `state` is `Enabled`.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs. Required if `state` is `Enabled`.
	StorageEndpoint *string `pulumi:"storageEndpoint"`
	// Deprecated: This field is now non-functional and thus will be removed in version 3.0 of the Azure Provider
	UseServerDefault *string `pulumi:"useServerDefault"`
}

// DatabaseThreatDetectionPolicyInput is an input type that accepts DatabaseThreatDetectionPolicyArgs and DatabaseThreatDetectionPolicyOutput values.
// You can construct a concrete instance of `DatabaseThreatDetectionPolicyInput` via:
//
//          DatabaseThreatDetectionPolicyArgs{...}
type DatabaseThreatDetectionPolicyInput interface {
	pulumi.Input

	ToDatabaseThreatDetectionPolicyOutput() DatabaseThreatDetectionPolicyOutput
	ToDatabaseThreatDetectionPolicyOutputWithContext(context.Context) DatabaseThreatDetectionPolicyOutput
}

type DatabaseThreatDetectionPolicyArgs struct {
	// Specifies a list of alerts which should be disabled. Possible values include `Access_Anomaly`, `Sql_Injection` and `Sql_Injection_Vulnerability`.
	DisabledAlerts pulumi.StringArrayInput `pulumi:"disabledAlerts"`
	// Should the account administrators be emailed when this alert is triggered?
	EmailAccountAdmins pulumi.StringPtrInput `pulumi:"emailAccountAdmins"`
	// A list of email addresses which alerts should be sent to.
	EmailAddresses pulumi.StringArrayInput `pulumi:"emailAddresses"`
	// Specifies the number of days to keep in the Threat Detection audit logs.
	RetentionDays pulumi.IntPtrInput `pulumi:"retentionDays"`
	// The State of the Policy. Possible values are `Enabled`, `Disabled` or `New`.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Specifies the identifier key of the Threat Detection audit storage account. Required if `state` is `Enabled`.
	StorageAccountAccessKey pulumi.StringPtrInput `pulumi:"storageAccountAccessKey"`
	// Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs. Required if `state` is `Enabled`.
	StorageEndpoint pulumi.StringPtrInput `pulumi:"storageEndpoint"`
	// Deprecated: This field is now non-functional and thus will be removed in version 3.0 of the Azure Provider
	UseServerDefault pulumi.StringPtrInput `pulumi:"useServerDefault"`
}

func (DatabaseThreatDetectionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseThreatDetectionPolicy)(nil)).Elem()
}

func (i DatabaseThreatDetectionPolicyArgs) ToDatabaseThreatDetectionPolicyOutput() DatabaseThreatDetectionPolicyOutput {
	return i.ToDatabaseThreatDetectionPolicyOutputWithContext(context.Background())
}

func (i DatabaseThreatDetectionPolicyArgs) ToDatabaseThreatDetectionPolicyOutputWithContext(ctx context.Context) DatabaseThreatDetectionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseThreatDetectionPolicyOutput)
}

func (i DatabaseThreatDetectionPolicyArgs) ToDatabaseThreatDetectionPolicyPtrOutput() DatabaseThreatDetectionPolicyPtrOutput {
	return i.ToDatabaseThreatDetectionPolicyPtrOutputWithContext(context.Background())
}

func (i DatabaseThreatDetectionPolicyArgs) ToDatabaseThreatDetectionPolicyPtrOutputWithContext(ctx context.Context) DatabaseThreatDetectionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseThreatDetectionPolicyOutput).ToDatabaseThreatDetectionPolicyPtrOutputWithContext(ctx)
}

// DatabaseThreatDetectionPolicyPtrInput is an input type that accepts DatabaseThreatDetectionPolicyArgs, DatabaseThreatDetectionPolicyPtr and DatabaseThreatDetectionPolicyPtrOutput values.
// You can construct a concrete instance of `DatabaseThreatDetectionPolicyPtrInput` via:
//
//          DatabaseThreatDetectionPolicyArgs{...}
//
//  or:
//
//          nil
type DatabaseThreatDetectionPolicyPtrInput interface {
	pulumi.Input

	ToDatabaseThreatDetectionPolicyPtrOutput() DatabaseThreatDetectionPolicyPtrOutput
	ToDatabaseThreatDetectionPolicyPtrOutputWithContext(context.Context) DatabaseThreatDetectionPolicyPtrOutput
}

type databaseThreatDetectionPolicyPtrType DatabaseThreatDetectionPolicyArgs

func DatabaseThreatDetectionPolicyPtr(v *DatabaseThreatDetectionPolicyArgs) DatabaseThreatDetectionPolicyPtrInput {
	return (*databaseThreatDetectionPolicyPtrType)(v)
}

func (*databaseThreatDetectionPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseThreatDetectionPolicy)(nil)).Elem()
}

func (i *databaseThreatDetectionPolicyPtrType) ToDatabaseThreatDetectionPolicyPtrOutput() DatabaseThreatDetectionPolicyPtrOutput {
	return i.ToDatabaseThreatDetectionPolicyPtrOutputWithContext(context.Background())
}

func (i *databaseThreatDetectionPolicyPtrType) ToDatabaseThreatDetectionPolicyPtrOutputWithContext(ctx context.Context) DatabaseThreatDetectionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseThreatDetectionPolicyPtrOutput)
}

type DatabaseThreatDetectionPolicyOutput struct{ *pulumi.OutputState }

func (DatabaseThreatDetectionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseThreatDetectionPolicy)(nil)).Elem()
}

func (o DatabaseThreatDetectionPolicyOutput) ToDatabaseThreatDetectionPolicyOutput() DatabaseThreatDetectionPolicyOutput {
	return o
}

func (o DatabaseThreatDetectionPolicyOutput) ToDatabaseThreatDetectionPolicyOutputWithContext(ctx context.Context) DatabaseThreatDetectionPolicyOutput {
	return o
}

func (o DatabaseThreatDetectionPolicyOutput) ToDatabaseThreatDetectionPolicyPtrOutput() DatabaseThreatDetectionPolicyPtrOutput {
	return o.ToDatabaseThreatDetectionPolicyPtrOutputWithContext(context.Background())
}

func (o DatabaseThreatDetectionPolicyOutput) ToDatabaseThreatDetectionPolicyPtrOutputWithContext(ctx context.Context) DatabaseThreatDetectionPolicyPtrOutput {
	return o.ApplyT(func(v DatabaseThreatDetectionPolicy) *DatabaseThreatDetectionPolicy {
		return &v
	}).(DatabaseThreatDetectionPolicyPtrOutput)
}

// Specifies a list of alerts which should be disabled. Possible values include `Access_Anomaly`, `Sql_Injection` and `Sql_Injection_Vulnerability`.
func (o DatabaseThreatDetectionPolicyOutput) DisabledAlerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabaseThreatDetectionPolicy) []string { return v.DisabledAlerts }).(pulumi.StringArrayOutput)
}

// Should the account administrators be emailed when this alert is triggered?
func (o DatabaseThreatDetectionPolicyOutput) EmailAccountAdmins() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseThreatDetectionPolicy) *string { return v.EmailAccountAdmins }).(pulumi.StringPtrOutput)
}

// A list of email addresses which alerts should be sent to.
func (o DatabaseThreatDetectionPolicyOutput) EmailAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabaseThreatDetectionPolicy) []string { return v.EmailAddresses }).(pulumi.StringArrayOutput)
}

// Specifies the number of days to keep in the Threat Detection audit logs.
func (o DatabaseThreatDetectionPolicyOutput) RetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatabaseThreatDetectionPolicy) *int { return v.RetentionDays }).(pulumi.IntPtrOutput)
}

// The State of the Policy. Possible values are `Enabled`, `Disabled` or `New`.
func (o DatabaseThreatDetectionPolicyOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseThreatDetectionPolicy) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Specifies the identifier key of the Threat Detection audit storage account. Required if `state` is `Enabled`.
func (o DatabaseThreatDetectionPolicyOutput) StorageAccountAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseThreatDetectionPolicy) *string { return v.StorageAccountAccessKey }).(pulumi.StringPtrOutput)
}

// Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs. Required if `state` is `Enabled`.
func (o DatabaseThreatDetectionPolicyOutput) StorageEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseThreatDetectionPolicy) *string { return v.StorageEndpoint }).(pulumi.StringPtrOutput)
}

// Deprecated: This field is now non-functional and thus will be removed in version 3.0 of the Azure Provider
func (o DatabaseThreatDetectionPolicyOutput) UseServerDefault() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseThreatDetectionPolicy) *string { return v.UseServerDefault }).(pulumi.StringPtrOutput)
}

type DatabaseThreatDetectionPolicyPtrOutput struct{ *pulumi.OutputState }

func (DatabaseThreatDetectionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseThreatDetectionPolicy)(nil)).Elem()
}

func (o DatabaseThreatDetectionPolicyPtrOutput) ToDatabaseThreatDetectionPolicyPtrOutput() DatabaseThreatDetectionPolicyPtrOutput {
	return o
}

func (o DatabaseThreatDetectionPolicyPtrOutput) ToDatabaseThreatDetectionPolicyPtrOutputWithContext(ctx context.Context) DatabaseThreatDetectionPolicyPtrOutput {
	return o
}

func (o DatabaseThreatDetectionPolicyPtrOutput) Elem() DatabaseThreatDetectionPolicyOutput {
	return o.ApplyT(func(v *DatabaseThreatDetectionPolicy) DatabaseThreatDetectionPolicy { return *v }).(DatabaseThreatDetectionPolicyOutput)
}

// Specifies a list of alerts which should be disabled. Possible values include `Access_Anomaly`, `Sql_Injection` and `Sql_Injection_Vulnerability`.
func (o DatabaseThreatDetectionPolicyPtrOutput) DisabledAlerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabaseThreatDetectionPolicy) []string {
		if v == nil {
			return nil
		}
		return v.DisabledAlerts
	}).(pulumi.StringArrayOutput)
}

// Should the account administrators be emailed when this alert is triggered?
func (o DatabaseThreatDetectionPolicyPtrOutput) EmailAccountAdmins() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseThreatDetectionPolicy) *string {
		if v == nil {
			return nil
		}
		return v.EmailAccountAdmins
	}).(pulumi.StringPtrOutput)
}

// A list of email addresses which alerts should be sent to.
func (o DatabaseThreatDetectionPolicyPtrOutput) EmailAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabaseThreatDetectionPolicy) []string {
		if v == nil {
			return nil
		}
		return v.EmailAddresses
	}).(pulumi.StringArrayOutput)
}

// Specifies the number of days to keep in the Threat Detection audit logs.
func (o DatabaseThreatDetectionPolicyPtrOutput) RetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatabaseThreatDetectionPolicy) *int {
		if v == nil {
			return nil
		}
		return v.RetentionDays
	}).(pulumi.IntPtrOutput)
}

// The State of the Policy. Possible values are `Enabled`, `Disabled` or `New`.
func (o DatabaseThreatDetectionPolicyPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseThreatDetectionPolicy) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// Specifies the identifier key of the Threat Detection audit storage account. Required if `state` is `Enabled`.
func (o DatabaseThreatDetectionPolicyPtrOutput) StorageAccountAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseThreatDetectionPolicy) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountAccessKey
	}).(pulumi.StringPtrOutput)
}

// Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs. Required if `state` is `Enabled`.
func (o DatabaseThreatDetectionPolicyPtrOutput) StorageEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseThreatDetectionPolicy) *string {
		if v == nil {
			return nil
		}
		return v.StorageEndpoint
	}).(pulumi.StringPtrOutput)
}

// Deprecated: This field is now non-functional and thus will be removed in version 3.0 of the Azure Provider
func (o DatabaseThreatDetectionPolicyPtrOutput) UseServerDefault() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseThreatDetectionPolicy) *string {
		if v == nil {
			return nil
		}
		return v.UseServerDefault
	}).(pulumi.StringPtrOutput)
}

type FailoverGroupPartnerServer struct {
	// the SQL server ID
	Id string `pulumi:"id"`
	// the location of the failover group.
	Location *string `pulumi:"location"`
	// local replication role of the failover group instance.
	Role *string `pulumi:"role"`
}

// FailoverGroupPartnerServerInput is an input type that accepts FailoverGroupPartnerServerArgs and FailoverGroupPartnerServerOutput values.
// You can construct a concrete instance of `FailoverGroupPartnerServerInput` via:
//
//          FailoverGroupPartnerServerArgs{...}
type FailoverGroupPartnerServerInput interface {
	pulumi.Input

	ToFailoverGroupPartnerServerOutput() FailoverGroupPartnerServerOutput
	ToFailoverGroupPartnerServerOutputWithContext(context.Context) FailoverGroupPartnerServerOutput
}

type FailoverGroupPartnerServerArgs struct {
	// the SQL server ID
	Id pulumi.StringInput `pulumi:"id"`
	// the location of the failover group.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// local replication role of the failover group instance.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (FailoverGroupPartnerServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FailoverGroupPartnerServer)(nil)).Elem()
}

func (i FailoverGroupPartnerServerArgs) ToFailoverGroupPartnerServerOutput() FailoverGroupPartnerServerOutput {
	return i.ToFailoverGroupPartnerServerOutputWithContext(context.Background())
}

func (i FailoverGroupPartnerServerArgs) ToFailoverGroupPartnerServerOutputWithContext(ctx context.Context) FailoverGroupPartnerServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupPartnerServerOutput)
}

// FailoverGroupPartnerServerArrayInput is an input type that accepts FailoverGroupPartnerServerArray and FailoverGroupPartnerServerArrayOutput values.
// You can construct a concrete instance of `FailoverGroupPartnerServerArrayInput` via:
//
//          FailoverGroupPartnerServerArray{ FailoverGroupPartnerServerArgs{...} }
type FailoverGroupPartnerServerArrayInput interface {
	pulumi.Input

	ToFailoverGroupPartnerServerArrayOutput() FailoverGroupPartnerServerArrayOutput
	ToFailoverGroupPartnerServerArrayOutputWithContext(context.Context) FailoverGroupPartnerServerArrayOutput
}

type FailoverGroupPartnerServerArray []FailoverGroupPartnerServerInput

func (FailoverGroupPartnerServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FailoverGroupPartnerServer)(nil)).Elem()
}

func (i FailoverGroupPartnerServerArray) ToFailoverGroupPartnerServerArrayOutput() FailoverGroupPartnerServerArrayOutput {
	return i.ToFailoverGroupPartnerServerArrayOutputWithContext(context.Background())
}

func (i FailoverGroupPartnerServerArray) ToFailoverGroupPartnerServerArrayOutputWithContext(ctx context.Context) FailoverGroupPartnerServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupPartnerServerArrayOutput)
}

type FailoverGroupPartnerServerOutput struct{ *pulumi.OutputState }

func (FailoverGroupPartnerServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FailoverGroupPartnerServer)(nil)).Elem()
}

func (o FailoverGroupPartnerServerOutput) ToFailoverGroupPartnerServerOutput() FailoverGroupPartnerServerOutput {
	return o
}

func (o FailoverGroupPartnerServerOutput) ToFailoverGroupPartnerServerOutputWithContext(ctx context.Context) FailoverGroupPartnerServerOutput {
	return o
}

// the SQL server ID
func (o FailoverGroupPartnerServerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v FailoverGroupPartnerServer) string { return v.Id }).(pulumi.StringOutput)
}

// the location of the failover group.
func (o FailoverGroupPartnerServerOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FailoverGroupPartnerServer) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// local replication role of the failover group instance.
func (o FailoverGroupPartnerServerOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FailoverGroupPartnerServer) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type FailoverGroupPartnerServerArrayOutput struct{ *pulumi.OutputState }

func (FailoverGroupPartnerServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FailoverGroupPartnerServer)(nil)).Elem()
}

func (o FailoverGroupPartnerServerArrayOutput) ToFailoverGroupPartnerServerArrayOutput() FailoverGroupPartnerServerArrayOutput {
	return o
}

func (o FailoverGroupPartnerServerArrayOutput) ToFailoverGroupPartnerServerArrayOutputWithContext(ctx context.Context) FailoverGroupPartnerServerArrayOutput {
	return o
}

func (o FailoverGroupPartnerServerArrayOutput) Index(i pulumi.IntInput) FailoverGroupPartnerServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FailoverGroupPartnerServer {
		return vs[0].([]FailoverGroupPartnerServer)[vs[1].(int)]
	}).(FailoverGroupPartnerServerOutput)
}

type FailoverGroupReadWriteEndpointFailoverPolicy struct {
	// Applies only if `mode` is `Automatic`. The grace period in minutes before failover with data loss is attempted
	GraceMinutes *int `pulumi:"graceMinutes"`
	// the failover mode. Possible values are `Manual`, `Automatic`
	Mode string `pulumi:"mode"`
}

// FailoverGroupReadWriteEndpointFailoverPolicyInput is an input type that accepts FailoverGroupReadWriteEndpointFailoverPolicyArgs and FailoverGroupReadWriteEndpointFailoverPolicyOutput values.
// You can construct a concrete instance of `FailoverGroupReadWriteEndpointFailoverPolicyInput` via:
//
//          FailoverGroupReadWriteEndpointFailoverPolicyArgs{...}
type FailoverGroupReadWriteEndpointFailoverPolicyInput interface {
	pulumi.Input

	ToFailoverGroupReadWriteEndpointFailoverPolicyOutput() FailoverGroupReadWriteEndpointFailoverPolicyOutput
	ToFailoverGroupReadWriteEndpointFailoverPolicyOutputWithContext(context.Context) FailoverGroupReadWriteEndpointFailoverPolicyOutput
}

type FailoverGroupReadWriteEndpointFailoverPolicyArgs struct {
	// Applies only if `mode` is `Automatic`. The grace period in minutes before failover with data loss is attempted
	GraceMinutes pulumi.IntPtrInput `pulumi:"graceMinutes"`
	// the failover mode. Possible values are `Manual`, `Automatic`
	Mode pulumi.StringInput `pulumi:"mode"`
}

func (FailoverGroupReadWriteEndpointFailoverPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FailoverGroupReadWriteEndpointFailoverPolicy)(nil)).Elem()
}

func (i FailoverGroupReadWriteEndpointFailoverPolicyArgs) ToFailoverGroupReadWriteEndpointFailoverPolicyOutput() FailoverGroupReadWriteEndpointFailoverPolicyOutput {
	return i.ToFailoverGroupReadWriteEndpointFailoverPolicyOutputWithContext(context.Background())
}

func (i FailoverGroupReadWriteEndpointFailoverPolicyArgs) ToFailoverGroupReadWriteEndpointFailoverPolicyOutputWithContext(ctx context.Context) FailoverGroupReadWriteEndpointFailoverPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupReadWriteEndpointFailoverPolicyOutput)
}

func (i FailoverGroupReadWriteEndpointFailoverPolicyArgs) ToFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput() FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput {
	return i.ToFailoverGroupReadWriteEndpointFailoverPolicyPtrOutputWithContext(context.Background())
}

func (i FailoverGroupReadWriteEndpointFailoverPolicyArgs) ToFailoverGroupReadWriteEndpointFailoverPolicyPtrOutputWithContext(ctx context.Context) FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupReadWriteEndpointFailoverPolicyOutput).ToFailoverGroupReadWriteEndpointFailoverPolicyPtrOutputWithContext(ctx)
}

// FailoverGroupReadWriteEndpointFailoverPolicyPtrInput is an input type that accepts FailoverGroupReadWriteEndpointFailoverPolicyArgs, FailoverGroupReadWriteEndpointFailoverPolicyPtr and FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput values.
// You can construct a concrete instance of `FailoverGroupReadWriteEndpointFailoverPolicyPtrInput` via:
//
//          FailoverGroupReadWriteEndpointFailoverPolicyArgs{...}
//
//  or:
//
//          nil
type FailoverGroupReadWriteEndpointFailoverPolicyPtrInput interface {
	pulumi.Input

	ToFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput() FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput
	ToFailoverGroupReadWriteEndpointFailoverPolicyPtrOutputWithContext(context.Context) FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput
}

type failoverGroupReadWriteEndpointFailoverPolicyPtrType FailoverGroupReadWriteEndpointFailoverPolicyArgs

func FailoverGroupReadWriteEndpointFailoverPolicyPtr(v *FailoverGroupReadWriteEndpointFailoverPolicyArgs) FailoverGroupReadWriteEndpointFailoverPolicyPtrInput {
	return (*failoverGroupReadWriteEndpointFailoverPolicyPtrType)(v)
}

func (*failoverGroupReadWriteEndpointFailoverPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FailoverGroupReadWriteEndpointFailoverPolicy)(nil)).Elem()
}

func (i *failoverGroupReadWriteEndpointFailoverPolicyPtrType) ToFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput() FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput {
	return i.ToFailoverGroupReadWriteEndpointFailoverPolicyPtrOutputWithContext(context.Background())
}

func (i *failoverGroupReadWriteEndpointFailoverPolicyPtrType) ToFailoverGroupReadWriteEndpointFailoverPolicyPtrOutputWithContext(ctx context.Context) FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput)
}

type FailoverGroupReadWriteEndpointFailoverPolicyOutput struct{ *pulumi.OutputState }

func (FailoverGroupReadWriteEndpointFailoverPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FailoverGroupReadWriteEndpointFailoverPolicy)(nil)).Elem()
}

func (o FailoverGroupReadWriteEndpointFailoverPolicyOutput) ToFailoverGroupReadWriteEndpointFailoverPolicyOutput() FailoverGroupReadWriteEndpointFailoverPolicyOutput {
	return o
}

func (o FailoverGroupReadWriteEndpointFailoverPolicyOutput) ToFailoverGroupReadWriteEndpointFailoverPolicyOutputWithContext(ctx context.Context) FailoverGroupReadWriteEndpointFailoverPolicyOutput {
	return o
}

func (o FailoverGroupReadWriteEndpointFailoverPolicyOutput) ToFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput() FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput {
	return o.ToFailoverGroupReadWriteEndpointFailoverPolicyPtrOutputWithContext(context.Background())
}

func (o FailoverGroupReadWriteEndpointFailoverPolicyOutput) ToFailoverGroupReadWriteEndpointFailoverPolicyPtrOutputWithContext(ctx context.Context) FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput {
	return o.ApplyT(func(v FailoverGroupReadWriteEndpointFailoverPolicy) *FailoverGroupReadWriteEndpointFailoverPolicy {
		return &v
	}).(FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput)
}

// Applies only if `mode` is `Automatic`. The grace period in minutes before failover with data loss is attempted
func (o FailoverGroupReadWriteEndpointFailoverPolicyOutput) GraceMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FailoverGroupReadWriteEndpointFailoverPolicy) *int { return v.GraceMinutes }).(pulumi.IntPtrOutput)
}

// the failover mode. Possible values are `Manual`, `Automatic`
func (o FailoverGroupReadWriteEndpointFailoverPolicyOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v FailoverGroupReadWriteEndpointFailoverPolicy) string { return v.Mode }).(pulumi.StringOutput)
}

type FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput struct{ *pulumi.OutputState }

func (FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FailoverGroupReadWriteEndpointFailoverPolicy)(nil)).Elem()
}

func (o FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput) ToFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput() FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput {
	return o
}

func (o FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput) ToFailoverGroupReadWriteEndpointFailoverPolicyPtrOutputWithContext(ctx context.Context) FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput {
	return o
}

func (o FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput) Elem() FailoverGroupReadWriteEndpointFailoverPolicyOutput {
	return o.ApplyT(func(v *FailoverGroupReadWriteEndpointFailoverPolicy) FailoverGroupReadWriteEndpointFailoverPolicy {
		return *v
	}).(FailoverGroupReadWriteEndpointFailoverPolicyOutput)
}

// Applies only if `mode` is `Automatic`. The grace period in minutes before failover with data loss is attempted
func (o FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput) GraceMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FailoverGroupReadWriteEndpointFailoverPolicy) *int {
		if v == nil {
			return nil
		}
		return v.GraceMinutes
	}).(pulumi.IntPtrOutput)
}

// the failover mode. Possible values are `Manual`, `Automatic`
func (o FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FailoverGroupReadWriteEndpointFailoverPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

type FailoverGroupReadonlyEndpointFailoverPolicy struct {
	// Failover policy for the read-only endpoint. Possible values are `Enabled`, and `Disabled`
	Mode string `pulumi:"mode"`
}

// FailoverGroupReadonlyEndpointFailoverPolicyInput is an input type that accepts FailoverGroupReadonlyEndpointFailoverPolicyArgs and FailoverGroupReadonlyEndpointFailoverPolicyOutput values.
// You can construct a concrete instance of `FailoverGroupReadonlyEndpointFailoverPolicyInput` via:
//
//          FailoverGroupReadonlyEndpointFailoverPolicyArgs{...}
type FailoverGroupReadonlyEndpointFailoverPolicyInput interface {
	pulumi.Input

	ToFailoverGroupReadonlyEndpointFailoverPolicyOutput() FailoverGroupReadonlyEndpointFailoverPolicyOutput
	ToFailoverGroupReadonlyEndpointFailoverPolicyOutputWithContext(context.Context) FailoverGroupReadonlyEndpointFailoverPolicyOutput
}

type FailoverGroupReadonlyEndpointFailoverPolicyArgs struct {
	// Failover policy for the read-only endpoint. Possible values are `Enabled`, and `Disabled`
	Mode pulumi.StringInput `pulumi:"mode"`
}

func (FailoverGroupReadonlyEndpointFailoverPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FailoverGroupReadonlyEndpointFailoverPolicy)(nil)).Elem()
}

func (i FailoverGroupReadonlyEndpointFailoverPolicyArgs) ToFailoverGroupReadonlyEndpointFailoverPolicyOutput() FailoverGroupReadonlyEndpointFailoverPolicyOutput {
	return i.ToFailoverGroupReadonlyEndpointFailoverPolicyOutputWithContext(context.Background())
}

func (i FailoverGroupReadonlyEndpointFailoverPolicyArgs) ToFailoverGroupReadonlyEndpointFailoverPolicyOutputWithContext(ctx context.Context) FailoverGroupReadonlyEndpointFailoverPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupReadonlyEndpointFailoverPolicyOutput)
}

func (i FailoverGroupReadonlyEndpointFailoverPolicyArgs) ToFailoverGroupReadonlyEndpointFailoverPolicyPtrOutput() FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput {
	return i.ToFailoverGroupReadonlyEndpointFailoverPolicyPtrOutputWithContext(context.Background())
}

func (i FailoverGroupReadonlyEndpointFailoverPolicyArgs) ToFailoverGroupReadonlyEndpointFailoverPolicyPtrOutputWithContext(ctx context.Context) FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupReadonlyEndpointFailoverPolicyOutput).ToFailoverGroupReadonlyEndpointFailoverPolicyPtrOutputWithContext(ctx)
}

// FailoverGroupReadonlyEndpointFailoverPolicyPtrInput is an input type that accepts FailoverGroupReadonlyEndpointFailoverPolicyArgs, FailoverGroupReadonlyEndpointFailoverPolicyPtr and FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput values.
// You can construct a concrete instance of `FailoverGroupReadonlyEndpointFailoverPolicyPtrInput` via:
//
//          FailoverGroupReadonlyEndpointFailoverPolicyArgs{...}
//
//  or:
//
//          nil
type FailoverGroupReadonlyEndpointFailoverPolicyPtrInput interface {
	pulumi.Input

	ToFailoverGroupReadonlyEndpointFailoverPolicyPtrOutput() FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput
	ToFailoverGroupReadonlyEndpointFailoverPolicyPtrOutputWithContext(context.Context) FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput
}

type failoverGroupReadonlyEndpointFailoverPolicyPtrType FailoverGroupReadonlyEndpointFailoverPolicyArgs

func FailoverGroupReadonlyEndpointFailoverPolicyPtr(v *FailoverGroupReadonlyEndpointFailoverPolicyArgs) FailoverGroupReadonlyEndpointFailoverPolicyPtrInput {
	return (*failoverGroupReadonlyEndpointFailoverPolicyPtrType)(v)
}

func (*failoverGroupReadonlyEndpointFailoverPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FailoverGroupReadonlyEndpointFailoverPolicy)(nil)).Elem()
}

func (i *failoverGroupReadonlyEndpointFailoverPolicyPtrType) ToFailoverGroupReadonlyEndpointFailoverPolicyPtrOutput() FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput {
	return i.ToFailoverGroupReadonlyEndpointFailoverPolicyPtrOutputWithContext(context.Background())
}

func (i *failoverGroupReadonlyEndpointFailoverPolicyPtrType) ToFailoverGroupReadonlyEndpointFailoverPolicyPtrOutputWithContext(ctx context.Context) FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput)
}

type FailoverGroupReadonlyEndpointFailoverPolicyOutput struct{ *pulumi.OutputState }

func (FailoverGroupReadonlyEndpointFailoverPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FailoverGroupReadonlyEndpointFailoverPolicy)(nil)).Elem()
}

func (o FailoverGroupReadonlyEndpointFailoverPolicyOutput) ToFailoverGroupReadonlyEndpointFailoverPolicyOutput() FailoverGroupReadonlyEndpointFailoverPolicyOutput {
	return o
}

func (o FailoverGroupReadonlyEndpointFailoverPolicyOutput) ToFailoverGroupReadonlyEndpointFailoverPolicyOutputWithContext(ctx context.Context) FailoverGroupReadonlyEndpointFailoverPolicyOutput {
	return o
}

func (o FailoverGroupReadonlyEndpointFailoverPolicyOutput) ToFailoverGroupReadonlyEndpointFailoverPolicyPtrOutput() FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput {
	return o.ToFailoverGroupReadonlyEndpointFailoverPolicyPtrOutputWithContext(context.Background())
}

func (o FailoverGroupReadonlyEndpointFailoverPolicyOutput) ToFailoverGroupReadonlyEndpointFailoverPolicyPtrOutputWithContext(ctx context.Context) FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput {
	return o.ApplyT(func(v FailoverGroupReadonlyEndpointFailoverPolicy) *FailoverGroupReadonlyEndpointFailoverPolicy {
		return &v
	}).(FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput)
}

// Failover policy for the read-only endpoint. Possible values are `Enabled`, and `Disabled`
func (o FailoverGroupReadonlyEndpointFailoverPolicyOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v FailoverGroupReadonlyEndpointFailoverPolicy) string { return v.Mode }).(pulumi.StringOutput)
}

type FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput struct{ *pulumi.OutputState }

func (FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FailoverGroupReadonlyEndpointFailoverPolicy)(nil)).Elem()
}

func (o FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput) ToFailoverGroupReadonlyEndpointFailoverPolicyPtrOutput() FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput {
	return o
}

func (o FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput) ToFailoverGroupReadonlyEndpointFailoverPolicyPtrOutputWithContext(ctx context.Context) FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput {
	return o
}

func (o FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput) Elem() FailoverGroupReadonlyEndpointFailoverPolicyOutput {
	return o.ApplyT(func(v *FailoverGroupReadonlyEndpointFailoverPolicy) FailoverGroupReadonlyEndpointFailoverPolicy {
		return *v
	}).(FailoverGroupReadonlyEndpointFailoverPolicyOutput)
}

// Failover policy for the read-only endpoint. Possible values are `Enabled`, and `Disabled`
func (o FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FailoverGroupReadonlyEndpointFailoverPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

type SqlServerExtendedAuditingPolicy struct {
	// (Optional) Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its master database audit events to Azure Monitor.
	LogMonitoringEnabled *bool `pulumi:"logMonitoringEnabled"`
	// (Optional) Specifies the number of days to retain logs for in the storage account.
	RetentionInDays *int `pulumi:"retentionInDays"`
	// (Optional)  Specifies the access key to use for the auditing storage account.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// (Optional) Specifies whether `storageAccountAccessKey` value is the storage's secondary key.
	StorageAccountAccessKeyIsSecondary *bool `pulumi:"storageAccountAccessKeyIsSecondary"`
	// (Optional) Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net).
	StorageEndpoint *string `pulumi:"storageEndpoint"`
}

// SqlServerExtendedAuditingPolicyInput is an input type that accepts SqlServerExtendedAuditingPolicyArgs and SqlServerExtendedAuditingPolicyOutput values.
// You can construct a concrete instance of `SqlServerExtendedAuditingPolicyInput` via:
//
//          SqlServerExtendedAuditingPolicyArgs{...}
type SqlServerExtendedAuditingPolicyInput interface {
	pulumi.Input

	ToSqlServerExtendedAuditingPolicyOutput() SqlServerExtendedAuditingPolicyOutput
	ToSqlServerExtendedAuditingPolicyOutputWithContext(context.Context) SqlServerExtendedAuditingPolicyOutput
}

type SqlServerExtendedAuditingPolicyArgs struct {
	// (Optional) Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its master database audit events to Azure Monitor.
	LogMonitoringEnabled pulumi.BoolPtrInput `pulumi:"logMonitoringEnabled"`
	// (Optional) Specifies the number of days to retain logs for in the storage account.
	RetentionInDays pulumi.IntPtrInput `pulumi:"retentionInDays"`
	// (Optional)  Specifies the access key to use for the auditing storage account.
	StorageAccountAccessKey pulumi.StringPtrInput `pulumi:"storageAccountAccessKey"`
	// (Optional) Specifies whether `storageAccountAccessKey` value is the storage's secondary key.
	StorageAccountAccessKeyIsSecondary pulumi.BoolPtrInput `pulumi:"storageAccountAccessKeyIsSecondary"`
	// (Optional) Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net).
	StorageEndpoint pulumi.StringPtrInput `pulumi:"storageEndpoint"`
}

func (SqlServerExtendedAuditingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerExtendedAuditingPolicy)(nil)).Elem()
}

func (i SqlServerExtendedAuditingPolicyArgs) ToSqlServerExtendedAuditingPolicyOutput() SqlServerExtendedAuditingPolicyOutput {
	return i.ToSqlServerExtendedAuditingPolicyOutputWithContext(context.Background())
}

func (i SqlServerExtendedAuditingPolicyArgs) ToSqlServerExtendedAuditingPolicyOutputWithContext(ctx context.Context) SqlServerExtendedAuditingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerExtendedAuditingPolicyOutput)
}

func (i SqlServerExtendedAuditingPolicyArgs) ToSqlServerExtendedAuditingPolicyPtrOutput() SqlServerExtendedAuditingPolicyPtrOutput {
	return i.ToSqlServerExtendedAuditingPolicyPtrOutputWithContext(context.Background())
}

func (i SqlServerExtendedAuditingPolicyArgs) ToSqlServerExtendedAuditingPolicyPtrOutputWithContext(ctx context.Context) SqlServerExtendedAuditingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerExtendedAuditingPolicyOutput).ToSqlServerExtendedAuditingPolicyPtrOutputWithContext(ctx)
}

// SqlServerExtendedAuditingPolicyPtrInput is an input type that accepts SqlServerExtendedAuditingPolicyArgs, SqlServerExtendedAuditingPolicyPtr and SqlServerExtendedAuditingPolicyPtrOutput values.
// You can construct a concrete instance of `SqlServerExtendedAuditingPolicyPtrInput` via:
//
//          SqlServerExtendedAuditingPolicyArgs{...}
//
//  or:
//
//          nil
type SqlServerExtendedAuditingPolicyPtrInput interface {
	pulumi.Input

	ToSqlServerExtendedAuditingPolicyPtrOutput() SqlServerExtendedAuditingPolicyPtrOutput
	ToSqlServerExtendedAuditingPolicyPtrOutputWithContext(context.Context) SqlServerExtendedAuditingPolicyPtrOutput
}

type sqlServerExtendedAuditingPolicyPtrType SqlServerExtendedAuditingPolicyArgs

func SqlServerExtendedAuditingPolicyPtr(v *SqlServerExtendedAuditingPolicyArgs) SqlServerExtendedAuditingPolicyPtrInput {
	return (*sqlServerExtendedAuditingPolicyPtrType)(v)
}

func (*sqlServerExtendedAuditingPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlServerExtendedAuditingPolicy)(nil)).Elem()
}

func (i *sqlServerExtendedAuditingPolicyPtrType) ToSqlServerExtendedAuditingPolicyPtrOutput() SqlServerExtendedAuditingPolicyPtrOutput {
	return i.ToSqlServerExtendedAuditingPolicyPtrOutputWithContext(context.Background())
}

func (i *sqlServerExtendedAuditingPolicyPtrType) ToSqlServerExtendedAuditingPolicyPtrOutputWithContext(ctx context.Context) SqlServerExtendedAuditingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerExtendedAuditingPolicyPtrOutput)
}

type SqlServerExtendedAuditingPolicyOutput struct{ *pulumi.OutputState }

func (SqlServerExtendedAuditingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerExtendedAuditingPolicy)(nil)).Elem()
}

func (o SqlServerExtendedAuditingPolicyOutput) ToSqlServerExtendedAuditingPolicyOutput() SqlServerExtendedAuditingPolicyOutput {
	return o
}

func (o SqlServerExtendedAuditingPolicyOutput) ToSqlServerExtendedAuditingPolicyOutputWithContext(ctx context.Context) SqlServerExtendedAuditingPolicyOutput {
	return o
}

func (o SqlServerExtendedAuditingPolicyOutput) ToSqlServerExtendedAuditingPolicyPtrOutput() SqlServerExtendedAuditingPolicyPtrOutput {
	return o.ToSqlServerExtendedAuditingPolicyPtrOutputWithContext(context.Background())
}

func (o SqlServerExtendedAuditingPolicyOutput) ToSqlServerExtendedAuditingPolicyPtrOutputWithContext(ctx context.Context) SqlServerExtendedAuditingPolicyPtrOutput {
	return o.ApplyT(func(v SqlServerExtendedAuditingPolicy) *SqlServerExtendedAuditingPolicy {
		return &v
	}).(SqlServerExtendedAuditingPolicyPtrOutput)
}

// (Optional) Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its master database audit events to Azure Monitor.
func (o SqlServerExtendedAuditingPolicyOutput) LogMonitoringEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlServerExtendedAuditingPolicy) *bool { return v.LogMonitoringEnabled }).(pulumi.BoolPtrOutput)
}

// (Optional) Specifies the number of days to retain logs for in the storage account.
func (o SqlServerExtendedAuditingPolicyOutput) RetentionInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SqlServerExtendedAuditingPolicy) *int { return v.RetentionInDays }).(pulumi.IntPtrOutput)
}

// (Optional)  Specifies the access key to use for the auditing storage account.
func (o SqlServerExtendedAuditingPolicyOutput) StorageAccountAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerExtendedAuditingPolicy) *string { return v.StorageAccountAccessKey }).(pulumi.StringPtrOutput)
}

// (Optional) Specifies whether `storageAccountAccessKey` value is the storage's secondary key.
func (o SqlServerExtendedAuditingPolicyOutput) StorageAccountAccessKeyIsSecondary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlServerExtendedAuditingPolicy) *bool { return v.StorageAccountAccessKeyIsSecondary }).(pulumi.BoolPtrOutput)
}

// (Optional) Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net).
func (o SqlServerExtendedAuditingPolicyOutput) StorageEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerExtendedAuditingPolicy) *string { return v.StorageEndpoint }).(pulumi.StringPtrOutput)
}

type SqlServerExtendedAuditingPolicyPtrOutput struct{ *pulumi.OutputState }

func (SqlServerExtendedAuditingPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlServerExtendedAuditingPolicy)(nil)).Elem()
}

func (o SqlServerExtendedAuditingPolicyPtrOutput) ToSqlServerExtendedAuditingPolicyPtrOutput() SqlServerExtendedAuditingPolicyPtrOutput {
	return o
}

func (o SqlServerExtendedAuditingPolicyPtrOutput) ToSqlServerExtendedAuditingPolicyPtrOutputWithContext(ctx context.Context) SqlServerExtendedAuditingPolicyPtrOutput {
	return o
}

func (o SqlServerExtendedAuditingPolicyPtrOutput) Elem() SqlServerExtendedAuditingPolicyOutput {
	return o.ApplyT(func(v *SqlServerExtendedAuditingPolicy) SqlServerExtendedAuditingPolicy { return *v }).(SqlServerExtendedAuditingPolicyOutput)
}

// (Optional) Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its master database audit events to Azure Monitor.
func (o SqlServerExtendedAuditingPolicyPtrOutput) LogMonitoringEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlServerExtendedAuditingPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.LogMonitoringEnabled
	}).(pulumi.BoolPtrOutput)
}

// (Optional) Specifies the number of days to retain logs for in the storage account.
func (o SqlServerExtendedAuditingPolicyPtrOutput) RetentionInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SqlServerExtendedAuditingPolicy) *int {
		if v == nil {
			return nil
		}
		return v.RetentionInDays
	}).(pulumi.IntPtrOutput)
}

// (Optional)  Specifies the access key to use for the auditing storage account.
func (o SqlServerExtendedAuditingPolicyPtrOutput) StorageAccountAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlServerExtendedAuditingPolicy) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountAccessKey
	}).(pulumi.StringPtrOutput)
}

// (Optional) Specifies whether `storageAccountAccessKey` value is the storage's secondary key.
func (o SqlServerExtendedAuditingPolicyPtrOutput) StorageAccountAccessKeyIsSecondary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlServerExtendedAuditingPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.StorageAccountAccessKeyIsSecondary
	}).(pulumi.BoolPtrOutput)
}

// (Optional) Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net).
func (o SqlServerExtendedAuditingPolicyPtrOutput) StorageEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlServerExtendedAuditingPolicy) *string {
		if v == nil {
			return nil
		}
		return v.StorageEndpoint
	}).(pulumi.StringPtrOutput)
}

type SqlServerIdentity struct {
	// The Principal ID for the Service Principal associated with the Identity of this SQL Server.
	PrincipalId *string `pulumi:"principalId"`
	// The Tenant ID for the Service Principal associated with the Identity of this SQL Server.
	TenantId *string `pulumi:"tenantId"`
	// Specifies the identity type of the Microsoft SQL Server. At this time the only allowed value is `SystemAssigned`.
	Type string `pulumi:"type"`
}

// SqlServerIdentityInput is an input type that accepts SqlServerIdentityArgs and SqlServerIdentityOutput values.
// You can construct a concrete instance of `SqlServerIdentityInput` via:
//
//          SqlServerIdentityArgs{...}
type SqlServerIdentityInput interface {
	pulumi.Input

	ToSqlServerIdentityOutput() SqlServerIdentityOutput
	ToSqlServerIdentityOutputWithContext(context.Context) SqlServerIdentityOutput
}

type SqlServerIdentityArgs struct {
	// The Principal ID for the Service Principal associated with the Identity of this SQL Server.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The Tenant ID for the Service Principal associated with the Identity of this SQL Server.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// Specifies the identity type of the Microsoft SQL Server. At this time the only allowed value is `SystemAssigned`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SqlServerIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerIdentity)(nil)).Elem()
}

func (i SqlServerIdentityArgs) ToSqlServerIdentityOutput() SqlServerIdentityOutput {
	return i.ToSqlServerIdentityOutputWithContext(context.Background())
}

func (i SqlServerIdentityArgs) ToSqlServerIdentityOutputWithContext(ctx context.Context) SqlServerIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerIdentityOutput)
}

func (i SqlServerIdentityArgs) ToSqlServerIdentityPtrOutput() SqlServerIdentityPtrOutput {
	return i.ToSqlServerIdentityPtrOutputWithContext(context.Background())
}

func (i SqlServerIdentityArgs) ToSqlServerIdentityPtrOutputWithContext(ctx context.Context) SqlServerIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerIdentityOutput).ToSqlServerIdentityPtrOutputWithContext(ctx)
}

// SqlServerIdentityPtrInput is an input type that accepts SqlServerIdentityArgs, SqlServerIdentityPtr and SqlServerIdentityPtrOutput values.
// You can construct a concrete instance of `SqlServerIdentityPtrInput` via:
//
//          SqlServerIdentityArgs{...}
//
//  or:
//
//          nil
type SqlServerIdentityPtrInput interface {
	pulumi.Input

	ToSqlServerIdentityPtrOutput() SqlServerIdentityPtrOutput
	ToSqlServerIdentityPtrOutputWithContext(context.Context) SqlServerIdentityPtrOutput
}

type sqlServerIdentityPtrType SqlServerIdentityArgs

func SqlServerIdentityPtr(v *SqlServerIdentityArgs) SqlServerIdentityPtrInput {
	return (*sqlServerIdentityPtrType)(v)
}

func (*sqlServerIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlServerIdentity)(nil)).Elem()
}

func (i *sqlServerIdentityPtrType) ToSqlServerIdentityPtrOutput() SqlServerIdentityPtrOutput {
	return i.ToSqlServerIdentityPtrOutputWithContext(context.Background())
}

func (i *sqlServerIdentityPtrType) ToSqlServerIdentityPtrOutputWithContext(ctx context.Context) SqlServerIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerIdentityPtrOutput)
}

type SqlServerIdentityOutput struct{ *pulumi.OutputState }

func (SqlServerIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerIdentity)(nil)).Elem()
}

func (o SqlServerIdentityOutput) ToSqlServerIdentityOutput() SqlServerIdentityOutput {
	return o
}

func (o SqlServerIdentityOutput) ToSqlServerIdentityOutputWithContext(ctx context.Context) SqlServerIdentityOutput {
	return o
}

func (o SqlServerIdentityOutput) ToSqlServerIdentityPtrOutput() SqlServerIdentityPtrOutput {
	return o.ToSqlServerIdentityPtrOutputWithContext(context.Background())
}

func (o SqlServerIdentityOutput) ToSqlServerIdentityPtrOutputWithContext(ctx context.Context) SqlServerIdentityPtrOutput {
	return o.ApplyT(func(v SqlServerIdentity) *SqlServerIdentity {
		return &v
	}).(SqlServerIdentityPtrOutput)
}

// The Principal ID for the Service Principal associated with the Identity of this SQL Server.
func (o SqlServerIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The Tenant ID for the Service Principal associated with the Identity of this SQL Server.
func (o SqlServerIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Specifies the identity type of the Microsoft SQL Server. At this time the only allowed value is `SystemAssigned`.
func (o SqlServerIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlServerIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type SqlServerIdentityPtrOutput struct{ *pulumi.OutputState }

func (SqlServerIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlServerIdentity)(nil)).Elem()
}

func (o SqlServerIdentityPtrOutput) ToSqlServerIdentityPtrOutput() SqlServerIdentityPtrOutput {
	return o
}

func (o SqlServerIdentityPtrOutput) ToSqlServerIdentityPtrOutputWithContext(ctx context.Context) SqlServerIdentityPtrOutput {
	return o
}

func (o SqlServerIdentityPtrOutput) Elem() SqlServerIdentityOutput {
	return o.ApplyT(func(v *SqlServerIdentity) SqlServerIdentity { return *v }).(SqlServerIdentityOutput)
}

// The Principal ID for the Service Principal associated with the Identity of this SQL Server.
func (o SqlServerIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlServerIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The Tenant ID for the Service Principal associated with the Identity of this SQL Server.
func (o SqlServerIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlServerIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Specifies the identity type of the Microsoft SQL Server. At this time the only allowed value is `SystemAssigned`.
func (o SqlServerIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlServerIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type GetServerIdentity struct {
	// The ID of the Principal (Client) in Azure Active Directory.
	PrincipalId string `pulumi:"principalId"`
	// The ID of the Azure Active Directory Tenant.
	TenantId string `pulumi:"tenantId"`
	// The identity type of the SQL Server.
	Type string `pulumi:"type"`
}

// GetServerIdentityInput is an input type that accepts GetServerIdentityArgs and GetServerIdentityOutput values.
// You can construct a concrete instance of `GetServerIdentityInput` via:
//
//          GetServerIdentityArgs{...}
type GetServerIdentityInput interface {
	pulumi.Input

	ToGetServerIdentityOutput() GetServerIdentityOutput
	ToGetServerIdentityOutputWithContext(context.Context) GetServerIdentityOutput
}

type GetServerIdentityArgs struct {
	// The ID of the Principal (Client) in Azure Active Directory.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The ID of the Azure Active Directory Tenant.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The identity type of the SQL Server.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetServerIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerIdentity)(nil)).Elem()
}

func (i GetServerIdentityArgs) ToGetServerIdentityOutput() GetServerIdentityOutput {
	return i.ToGetServerIdentityOutputWithContext(context.Background())
}

func (i GetServerIdentityArgs) ToGetServerIdentityOutputWithContext(ctx context.Context) GetServerIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerIdentityOutput)
}

// GetServerIdentityArrayInput is an input type that accepts GetServerIdentityArray and GetServerIdentityArrayOutput values.
// You can construct a concrete instance of `GetServerIdentityArrayInput` via:
//
//          GetServerIdentityArray{ GetServerIdentityArgs{...} }
type GetServerIdentityArrayInput interface {
	pulumi.Input

	ToGetServerIdentityArrayOutput() GetServerIdentityArrayOutput
	ToGetServerIdentityArrayOutputWithContext(context.Context) GetServerIdentityArrayOutput
}

type GetServerIdentityArray []GetServerIdentityInput

func (GetServerIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerIdentity)(nil)).Elem()
}

func (i GetServerIdentityArray) ToGetServerIdentityArrayOutput() GetServerIdentityArrayOutput {
	return i.ToGetServerIdentityArrayOutputWithContext(context.Background())
}

func (i GetServerIdentityArray) ToGetServerIdentityArrayOutputWithContext(ctx context.Context) GetServerIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerIdentityArrayOutput)
}

type GetServerIdentityOutput struct{ *pulumi.OutputState }

func (GetServerIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerIdentity)(nil)).Elem()
}

func (o GetServerIdentityOutput) ToGetServerIdentityOutput() GetServerIdentityOutput {
	return o
}

func (o GetServerIdentityOutput) ToGetServerIdentityOutputWithContext(ctx context.Context) GetServerIdentityOutput {
	return o
}

// The ID of the Principal (Client) in Azure Active Directory.
func (o GetServerIdentityOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerIdentity) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The ID of the Azure Active Directory Tenant.
func (o GetServerIdentityOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerIdentity) string { return v.TenantId }).(pulumi.StringOutput)
}

// The identity type of the SQL Server.
func (o GetServerIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type GetServerIdentityArrayOutput struct{ *pulumi.OutputState }

func (GetServerIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerIdentity)(nil)).Elem()
}

func (o GetServerIdentityArrayOutput) ToGetServerIdentityArrayOutput() GetServerIdentityArrayOutput {
	return o
}

func (o GetServerIdentityArrayOutput) ToGetServerIdentityArrayOutputWithContext(ctx context.Context) GetServerIdentityArrayOutput {
	return o
}

func (o GetServerIdentityArrayOutput) Index(i pulumi.IntInput) GetServerIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerIdentity {
		return vs[0].([]GetServerIdentity)[vs[1].(int)]
	}).(GetServerIdentityOutput)
}

func init() {
	pulumi.RegisterOutputType(DatabaseExtendedAuditingPolicyOutput{})
	pulumi.RegisterOutputType(DatabaseExtendedAuditingPolicyPtrOutput{})
	pulumi.RegisterOutputType(DatabaseImportOutput{})
	pulumi.RegisterOutputType(DatabaseImportPtrOutput{})
	pulumi.RegisterOutputType(DatabaseThreatDetectionPolicyOutput{})
	pulumi.RegisterOutputType(DatabaseThreatDetectionPolicyPtrOutput{})
	pulumi.RegisterOutputType(FailoverGroupPartnerServerOutput{})
	pulumi.RegisterOutputType(FailoverGroupPartnerServerArrayOutput{})
	pulumi.RegisterOutputType(FailoverGroupReadWriteEndpointFailoverPolicyOutput{})
	pulumi.RegisterOutputType(FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput{})
	pulumi.RegisterOutputType(FailoverGroupReadonlyEndpointFailoverPolicyOutput{})
	pulumi.RegisterOutputType(FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput{})
	pulumi.RegisterOutputType(SqlServerExtendedAuditingPolicyOutput{})
	pulumi.RegisterOutputType(SqlServerExtendedAuditingPolicyPtrOutput{})
	pulumi.RegisterOutputType(SqlServerIdentityOutput{})
	pulumi.RegisterOutputType(SqlServerIdentityPtrOutput{})
	pulumi.RegisterOutputType(GetServerIdentityOutput{})
	pulumi.RegisterOutputType(GetServerIdentityArrayOutput{})
}
