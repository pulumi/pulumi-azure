// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type DatabaseImport struct {
	// Specifies the name of the SQL administrator.
	AdministratorLogin string `pulumi:"administratorLogin"`
	// Specifies the password of the SQL administrator.
	AdministratorLoginPassword string `pulumi:"administratorLoginPassword"`
	// Specifies the type of authentication used to access the server. Valid values are `SQL` or `ADPassword`.
	AuthenticationType string `pulumi:"authenticationType"`
	// Specifies the type of import operation being performed. The only allowable value is `Import`. Defaults to `Import`.
	OperationMode *string `pulumi:"operationMode"`
	// Specifies the access key for the storage account.
	StorageKey string `pulumi:"storageKey"`
	// Specifies the type of access key for the storage account. Valid values are `StorageAccessKey` or `SharedAccessKey`.
	StorageKeyType string `pulumi:"storageKeyType"`
	// Specifies the blob URI of the .bacpac file.
	StorageUri string `pulumi:"storageUri"`
}

// DatabaseImportInput is an input type that accepts DatabaseImportArgs and DatabaseImportOutput values.
// You can construct a concrete instance of `DatabaseImportInput` via:
//
//	DatabaseImportArgs{...}
type DatabaseImportInput interface {
	pulumi.Input

	ToDatabaseImportOutput() DatabaseImportOutput
	ToDatabaseImportOutputWithContext(context.Context) DatabaseImportOutput
}

type DatabaseImportArgs struct {
	// Specifies the name of the SQL administrator.
	AdministratorLogin pulumi.StringInput `pulumi:"administratorLogin"`
	// Specifies the password of the SQL administrator.
	AdministratorLoginPassword pulumi.StringInput `pulumi:"administratorLoginPassword"`
	// Specifies the type of authentication used to access the server. Valid values are `SQL` or `ADPassword`.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// Specifies the type of import operation being performed. The only allowable value is `Import`. Defaults to `Import`.
	OperationMode pulumi.StringPtrInput `pulumi:"operationMode"`
	// Specifies the access key for the storage account.
	StorageKey pulumi.StringInput `pulumi:"storageKey"`
	// Specifies the type of access key for the storage account. Valid values are `StorageAccessKey` or `SharedAccessKey`.
	StorageKeyType pulumi.StringInput `pulumi:"storageKeyType"`
	// Specifies the blob URI of the .bacpac file.
	StorageUri pulumi.StringInput `pulumi:"storageUri"`
}

func (DatabaseImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseImport)(nil)).Elem()
}

func (i DatabaseImportArgs) ToDatabaseImportOutput() DatabaseImportOutput {
	return i.ToDatabaseImportOutputWithContext(context.Background())
}

func (i DatabaseImportArgs) ToDatabaseImportOutputWithContext(ctx context.Context) DatabaseImportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseImportOutput)
}

func (i DatabaseImportArgs) ToDatabaseImportPtrOutput() DatabaseImportPtrOutput {
	return i.ToDatabaseImportPtrOutputWithContext(context.Background())
}

func (i DatabaseImportArgs) ToDatabaseImportPtrOutputWithContext(ctx context.Context) DatabaseImportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseImportOutput).ToDatabaseImportPtrOutputWithContext(ctx)
}

// DatabaseImportPtrInput is an input type that accepts DatabaseImportArgs, DatabaseImportPtr and DatabaseImportPtrOutput values.
// You can construct a concrete instance of `DatabaseImportPtrInput` via:
//
//	        DatabaseImportArgs{...}
//
//	or:
//
//	        nil
type DatabaseImportPtrInput interface {
	pulumi.Input

	ToDatabaseImportPtrOutput() DatabaseImportPtrOutput
	ToDatabaseImportPtrOutputWithContext(context.Context) DatabaseImportPtrOutput
}

type databaseImportPtrType DatabaseImportArgs

func DatabaseImportPtr(v *DatabaseImportArgs) DatabaseImportPtrInput {
	return (*databaseImportPtrType)(v)
}

func (*databaseImportPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseImport)(nil)).Elem()
}

func (i *databaseImportPtrType) ToDatabaseImportPtrOutput() DatabaseImportPtrOutput {
	return i.ToDatabaseImportPtrOutputWithContext(context.Background())
}

func (i *databaseImportPtrType) ToDatabaseImportPtrOutputWithContext(ctx context.Context) DatabaseImportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseImportPtrOutput)
}

type DatabaseImportOutput struct{ *pulumi.OutputState }

func (DatabaseImportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseImport)(nil)).Elem()
}

func (o DatabaseImportOutput) ToDatabaseImportOutput() DatabaseImportOutput {
	return o
}

func (o DatabaseImportOutput) ToDatabaseImportOutputWithContext(ctx context.Context) DatabaseImportOutput {
	return o
}

func (o DatabaseImportOutput) ToDatabaseImportPtrOutput() DatabaseImportPtrOutput {
	return o.ToDatabaseImportPtrOutputWithContext(context.Background())
}

func (o DatabaseImportOutput) ToDatabaseImportPtrOutputWithContext(ctx context.Context) DatabaseImportPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseImport) *DatabaseImport {
		return &v
	}).(DatabaseImportPtrOutput)
}

// Specifies the name of the SQL administrator.
func (o DatabaseImportOutput) AdministratorLogin() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseImport) string { return v.AdministratorLogin }).(pulumi.StringOutput)
}

// Specifies the password of the SQL administrator.
func (o DatabaseImportOutput) AdministratorLoginPassword() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseImport) string { return v.AdministratorLoginPassword }).(pulumi.StringOutput)
}

// Specifies the type of authentication used to access the server. Valid values are `SQL` or `ADPassword`.
func (o DatabaseImportOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseImport) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// Specifies the type of import operation being performed. The only allowable value is `Import`. Defaults to `Import`.
func (o DatabaseImportOutput) OperationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseImport) *string { return v.OperationMode }).(pulumi.StringPtrOutput)
}

// Specifies the access key for the storage account.
func (o DatabaseImportOutput) StorageKey() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseImport) string { return v.StorageKey }).(pulumi.StringOutput)
}

// Specifies the type of access key for the storage account. Valid values are `StorageAccessKey` or `SharedAccessKey`.
func (o DatabaseImportOutput) StorageKeyType() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseImport) string { return v.StorageKeyType }).(pulumi.StringOutput)
}

// Specifies the blob URI of the .bacpac file.
func (o DatabaseImportOutput) StorageUri() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseImport) string { return v.StorageUri }).(pulumi.StringOutput)
}

type DatabaseImportPtrOutput struct{ *pulumi.OutputState }

func (DatabaseImportPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseImport)(nil)).Elem()
}

func (o DatabaseImportPtrOutput) ToDatabaseImportPtrOutput() DatabaseImportPtrOutput {
	return o
}

func (o DatabaseImportPtrOutput) ToDatabaseImportPtrOutputWithContext(ctx context.Context) DatabaseImportPtrOutput {
	return o
}

func (o DatabaseImportPtrOutput) Elem() DatabaseImportOutput {
	return o.ApplyT(func(v *DatabaseImport) DatabaseImport {
		if v != nil {
			return *v
		}
		var ret DatabaseImport
		return ret
	}).(DatabaseImportOutput)
}

// Specifies the name of the SQL administrator.
func (o DatabaseImportPtrOutput) AdministratorLogin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseImport) *string {
		if v == nil {
			return nil
		}
		return &v.AdministratorLogin
	}).(pulumi.StringPtrOutput)
}

// Specifies the password of the SQL administrator.
func (o DatabaseImportPtrOutput) AdministratorLoginPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseImport) *string {
		if v == nil {
			return nil
		}
		return &v.AdministratorLoginPassword
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of authentication used to access the server. Valid values are `SQL` or `ADPassword`.
func (o DatabaseImportPtrOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseImport) *string {
		if v == nil {
			return nil
		}
		return &v.AuthenticationType
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of import operation being performed. The only allowable value is `Import`. Defaults to `Import`.
func (o DatabaseImportPtrOutput) OperationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseImport) *string {
		if v == nil {
			return nil
		}
		return v.OperationMode
	}).(pulumi.StringPtrOutput)
}

// Specifies the access key for the storage account.
func (o DatabaseImportPtrOutput) StorageKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseImport) *string {
		if v == nil {
			return nil
		}
		return &v.StorageKey
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of access key for the storage account. Valid values are `StorageAccessKey` or `SharedAccessKey`.
func (o DatabaseImportPtrOutput) StorageKeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseImport) *string {
		if v == nil {
			return nil
		}
		return &v.StorageKeyType
	}).(pulumi.StringPtrOutput)
}

// Specifies the blob URI of the .bacpac file.
func (o DatabaseImportPtrOutput) StorageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseImport) *string {
		if v == nil {
			return nil
		}
		return &v.StorageUri
	}).(pulumi.StringPtrOutput)
}

type DatabaseThreatDetectionPolicy struct {
	// Specifies a list of alerts which should be disabled. Possible values include `Access_Anomaly`, `Sql_Injection` and `Sql_Injection_Vulnerability`.
	DisabledAlerts []string `pulumi:"disabledAlerts"`
	// Should the account administrators be emailed when this alert is triggered? Possible values are `Disabled` and `Enabled`. Defaults to `Disabled`.
	EmailAccountAdmins *string `pulumi:"emailAccountAdmins"`
	// A list of email addresses which alerts should be sent to.
	EmailAddresses []string `pulumi:"emailAddresses"`
	// Specifies the number of days to keep in the Threat Detection audit logs.
	RetentionDays *int `pulumi:"retentionDays"`
	// The State of the Policy. Possible values are `Enabled`, `Disabled` or `New`. Defaults to `Disabled`.
	State *string `pulumi:"state"`
	// Specifies the identifier key of the Threat Detection audit storage account. Required if `state` is `Enabled`.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// Specifies the blob storage endpoint (e.g. <https://example.blob.core.windows.net>). This blob storage will hold all Threat Detection audit logs. Required if `state` is `Enabled`.
	StorageEndpoint *string `pulumi:"storageEndpoint"`
}

// DatabaseThreatDetectionPolicyInput is an input type that accepts DatabaseThreatDetectionPolicyArgs and DatabaseThreatDetectionPolicyOutput values.
// You can construct a concrete instance of `DatabaseThreatDetectionPolicyInput` via:
//
//	DatabaseThreatDetectionPolicyArgs{...}
type DatabaseThreatDetectionPolicyInput interface {
	pulumi.Input

	ToDatabaseThreatDetectionPolicyOutput() DatabaseThreatDetectionPolicyOutput
	ToDatabaseThreatDetectionPolicyOutputWithContext(context.Context) DatabaseThreatDetectionPolicyOutput
}

type DatabaseThreatDetectionPolicyArgs struct {
	// Specifies a list of alerts which should be disabled. Possible values include `Access_Anomaly`, `Sql_Injection` and `Sql_Injection_Vulnerability`.
	DisabledAlerts pulumi.StringArrayInput `pulumi:"disabledAlerts"`
	// Should the account administrators be emailed when this alert is triggered? Possible values are `Disabled` and `Enabled`. Defaults to `Disabled`.
	EmailAccountAdmins pulumi.StringPtrInput `pulumi:"emailAccountAdmins"`
	// A list of email addresses which alerts should be sent to.
	EmailAddresses pulumi.StringArrayInput `pulumi:"emailAddresses"`
	// Specifies the number of days to keep in the Threat Detection audit logs.
	RetentionDays pulumi.IntPtrInput `pulumi:"retentionDays"`
	// The State of the Policy. Possible values are `Enabled`, `Disabled` or `New`. Defaults to `Disabled`.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Specifies the identifier key of the Threat Detection audit storage account. Required if `state` is `Enabled`.
	StorageAccountAccessKey pulumi.StringPtrInput `pulumi:"storageAccountAccessKey"`
	// Specifies the blob storage endpoint (e.g. <https://example.blob.core.windows.net>). This blob storage will hold all Threat Detection audit logs. Required if `state` is `Enabled`.
	StorageEndpoint pulumi.StringPtrInput `pulumi:"storageEndpoint"`
}

func (DatabaseThreatDetectionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseThreatDetectionPolicy)(nil)).Elem()
}

func (i DatabaseThreatDetectionPolicyArgs) ToDatabaseThreatDetectionPolicyOutput() DatabaseThreatDetectionPolicyOutput {
	return i.ToDatabaseThreatDetectionPolicyOutputWithContext(context.Background())
}

func (i DatabaseThreatDetectionPolicyArgs) ToDatabaseThreatDetectionPolicyOutputWithContext(ctx context.Context) DatabaseThreatDetectionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseThreatDetectionPolicyOutput)
}

func (i DatabaseThreatDetectionPolicyArgs) ToDatabaseThreatDetectionPolicyPtrOutput() DatabaseThreatDetectionPolicyPtrOutput {
	return i.ToDatabaseThreatDetectionPolicyPtrOutputWithContext(context.Background())
}

func (i DatabaseThreatDetectionPolicyArgs) ToDatabaseThreatDetectionPolicyPtrOutputWithContext(ctx context.Context) DatabaseThreatDetectionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseThreatDetectionPolicyOutput).ToDatabaseThreatDetectionPolicyPtrOutputWithContext(ctx)
}

// DatabaseThreatDetectionPolicyPtrInput is an input type that accepts DatabaseThreatDetectionPolicyArgs, DatabaseThreatDetectionPolicyPtr and DatabaseThreatDetectionPolicyPtrOutput values.
// You can construct a concrete instance of `DatabaseThreatDetectionPolicyPtrInput` via:
//
//	        DatabaseThreatDetectionPolicyArgs{...}
//
//	or:
//
//	        nil
type DatabaseThreatDetectionPolicyPtrInput interface {
	pulumi.Input

	ToDatabaseThreatDetectionPolicyPtrOutput() DatabaseThreatDetectionPolicyPtrOutput
	ToDatabaseThreatDetectionPolicyPtrOutputWithContext(context.Context) DatabaseThreatDetectionPolicyPtrOutput
}

type databaseThreatDetectionPolicyPtrType DatabaseThreatDetectionPolicyArgs

func DatabaseThreatDetectionPolicyPtr(v *DatabaseThreatDetectionPolicyArgs) DatabaseThreatDetectionPolicyPtrInput {
	return (*databaseThreatDetectionPolicyPtrType)(v)
}

func (*databaseThreatDetectionPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseThreatDetectionPolicy)(nil)).Elem()
}

func (i *databaseThreatDetectionPolicyPtrType) ToDatabaseThreatDetectionPolicyPtrOutput() DatabaseThreatDetectionPolicyPtrOutput {
	return i.ToDatabaseThreatDetectionPolicyPtrOutputWithContext(context.Background())
}

func (i *databaseThreatDetectionPolicyPtrType) ToDatabaseThreatDetectionPolicyPtrOutputWithContext(ctx context.Context) DatabaseThreatDetectionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseThreatDetectionPolicyPtrOutput)
}

type DatabaseThreatDetectionPolicyOutput struct{ *pulumi.OutputState }

func (DatabaseThreatDetectionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseThreatDetectionPolicy)(nil)).Elem()
}

func (o DatabaseThreatDetectionPolicyOutput) ToDatabaseThreatDetectionPolicyOutput() DatabaseThreatDetectionPolicyOutput {
	return o
}

func (o DatabaseThreatDetectionPolicyOutput) ToDatabaseThreatDetectionPolicyOutputWithContext(ctx context.Context) DatabaseThreatDetectionPolicyOutput {
	return o
}

func (o DatabaseThreatDetectionPolicyOutput) ToDatabaseThreatDetectionPolicyPtrOutput() DatabaseThreatDetectionPolicyPtrOutput {
	return o.ToDatabaseThreatDetectionPolicyPtrOutputWithContext(context.Background())
}

func (o DatabaseThreatDetectionPolicyOutput) ToDatabaseThreatDetectionPolicyPtrOutputWithContext(ctx context.Context) DatabaseThreatDetectionPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseThreatDetectionPolicy) *DatabaseThreatDetectionPolicy {
		return &v
	}).(DatabaseThreatDetectionPolicyPtrOutput)
}

// Specifies a list of alerts which should be disabled. Possible values include `Access_Anomaly`, `Sql_Injection` and `Sql_Injection_Vulnerability`.
func (o DatabaseThreatDetectionPolicyOutput) DisabledAlerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabaseThreatDetectionPolicy) []string { return v.DisabledAlerts }).(pulumi.StringArrayOutput)
}

// Should the account administrators be emailed when this alert is triggered? Possible values are `Disabled` and `Enabled`. Defaults to `Disabled`.
func (o DatabaseThreatDetectionPolicyOutput) EmailAccountAdmins() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseThreatDetectionPolicy) *string { return v.EmailAccountAdmins }).(pulumi.StringPtrOutput)
}

// A list of email addresses which alerts should be sent to.
func (o DatabaseThreatDetectionPolicyOutput) EmailAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabaseThreatDetectionPolicy) []string { return v.EmailAddresses }).(pulumi.StringArrayOutput)
}

// Specifies the number of days to keep in the Threat Detection audit logs.
func (o DatabaseThreatDetectionPolicyOutput) RetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatabaseThreatDetectionPolicy) *int { return v.RetentionDays }).(pulumi.IntPtrOutput)
}

// The State of the Policy. Possible values are `Enabled`, `Disabled` or `New`. Defaults to `Disabled`.
func (o DatabaseThreatDetectionPolicyOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseThreatDetectionPolicy) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Specifies the identifier key of the Threat Detection audit storage account. Required if `state` is `Enabled`.
func (o DatabaseThreatDetectionPolicyOutput) StorageAccountAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseThreatDetectionPolicy) *string { return v.StorageAccountAccessKey }).(pulumi.StringPtrOutput)
}

// Specifies the blob storage endpoint (e.g. <https://example.blob.core.windows.net>). This blob storage will hold all Threat Detection audit logs. Required if `state` is `Enabled`.
func (o DatabaseThreatDetectionPolicyOutput) StorageEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseThreatDetectionPolicy) *string { return v.StorageEndpoint }).(pulumi.StringPtrOutput)
}

type DatabaseThreatDetectionPolicyPtrOutput struct{ *pulumi.OutputState }

func (DatabaseThreatDetectionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseThreatDetectionPolicy)(nil)).Elem()
}

func (o DatabaseThreatDetectionPolicyPtrOutput) ToDatabaseThreatDetectionPolicyPtrOutput() DatabaseThreatDetectionPolicyPtrOutput {
	return o
}

func (o DatabaseThreatDetectionPolicyPtrOutput) ToDatabaseThreatDetectionPolicyPtrOutputWithContext(ctx context.Context) DatabaseThreatDetectionPolicyPtrOutput {
	return o
}

func (o DatabaseThreatDetectionPolicyPtrOutput) Elem() DatabaseThreatDetectionPolicyOutput {
	return o.ApplyT(func(v *DatabaseThreatDetectionPolicy) DatabaseThreatDetectionPolicy {
		if v != nil {
			return *v
		}
		var ret DatabaseThreatDetectionPolicy
		return ret
	}).(DatabaseThreatDetectionPolicyOutput)
}

// Specifies a list of alerts which should be disabled. Possible values include `Access_Anomaly`, `Sql_Injection` and `Sql_Injection_Vulnerability`.
func (o DatabaseThreatDetectionPolicyPtrOutput) DisabledAlerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabaseThreatDetectionPolicy) []string {
		if v == nil {
			return nil
		}
		return v.DisabledAlerts
	}).(pulumi.StringArrayOutput)
}

// Should the account administrators be emailed when this alert is triggered? Possible values are `Disabled` and `Enabled`. Defaults to `Disabled`.
func (o DatabaseThreatDetectionPolicyPtrOutput) EmailAccountAdmins() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseThreatDetectionPolicy) *string {
		if v == nil {
			return nil
		}
		return v.EmailAccountAdmins
	}).(pulumi.StringPtrOutput)
}

// A list of email addresses which alerts should be sent to.
func (o DatabaseThreatDetectionPolicyPtrOutput) EmailAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabaseThreatDetectionPolicy) []string {
		if v == nil {
			return nil
		}
		return v.EmailAddresses
	}).(pulumi.StringArrayOutput)
}

// Specifies the number of days to keep in the Threat Detection audit logs.
func (o DatabaseThreatDetectionPolicyPtrOutput) RetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatabaseThreatDetectionPolicy) *int {
		if v == nil {
			return nil
		}
		return v.RetentionDays
	}).(pulumi.IntPtrOutput)
}

// The State of the Policy. Possible values are `Enabled`, `Disabled` or `New`. Defaults to `Disabled`.
func (o DatabaseThreatDetectionPolicyPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseThreatDetectionPolicy) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// Specifies the identifier key of the Threat Detection audit storage account. Required if `state` is `Enabled`.
func (o DatabaseThreatDetectionPolicyPtrOutput) StorageAccountAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseThreatDetectionPolicy) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountAccessKey
	}).(pulumi.StringPtrOutput)
}

// Specifies the blob storage endpoint (e.g. <https://example.blob.core.windows.net>). This blob storage will hold all Threat Detection audit logs. Required if `state` is `Enabled`.
func (o DatabaseThreatDetectionPolicyPtrOutput) StorageEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseThreatDetectionPolicy) *string {
		if v == nil {
			return nil
		}
		return v.StorageEndpoint
	}).(pulumi.StringPtrOutput)
}

type FailoverGroupPartnerServer struct {
	// the SQL server ID
	Id string `pulumi:"id"`
	// the location of the failover group.
	Location *string `pulumi:"location"`
	// local replication role of the failover group instance.
	Role *string `pulumi:"role"`
}

// FailoverGroupPartnerServerInput is an input type that accepts FailoverGroupPartnerServerArgs and FailoverGroupPartnerServerOutput values.
// You can construct a concrete instance of `FailoverGroupPartnerServerInput` via:
//
//	FailoverGroupPartnerServerArgs{...}
type FailoverGroupPartnerServerInput interface {
	pulumi.Input

	ToFailoverGroupPartnerServerOutput() FailoverGroupPartnerServerOutput
	ToFailoverGroupPartnerServerOutputWithContext(context.Context) FailoverGroupPartnerServerOutput
}

type FailoverGroupPartnerServerArgs struct {
	// the SQL server ID
	Id pulumi.StringInput `pulumi:"id"`
	// the location of the failover group.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// local replication role of the failover group instance.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (FailoverGroupPartnerServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FailoverGroupPartnerServer)(nil)).Elem()
}

func (i FailoverGroupPartnerServerArgs) ToFailoverGroupPartnerServerOutput() FailoverGroupPartnerServerOutput {
	return i.ToFailoverGroupPartnerServerOutputWithContext(context.Background())
}

func (i FailoverGroupPartnerServerArgs) ToFailoverGroupPartnerServerOutputWithContext(ctx context.Context) FailoverGroupPartnerServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupPartnerServerOutput)
}

// FailoverGroupPartnerServerArrayInput is an input type that accepts FailoverGroupPartnerServerArray and FailoverGroupPartnerServerArrayOutput values.
// You can construct a concrete instance of `FailoverGroupPartnerServerArrayInput` via:
//
//	FailoverGroupPartnerServerArray{ FailoverGroupPartnerServerArgs{...} }
type FailoverGroupPartnerServerArrayInput interface {
	pulumi.Input

	ToFailoverGroupPartnerServerArrayOutput() FailoverGroupPartnerServerArrayOutput
	ToFailoverGroupPartnerServerArrayOutputWithContext(context.Context) FailoverGroupPartnerServerArrayOutput
}

type FailoverGroupPartnerServerArray []FailoverGroupPartnerServerInput

func (FailoverGroupPartnerServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FailoverGroupPartnerServer)(nil)).Elem()
}

func (i FailoverGroupPartnerServerArray) ToFailoverGroupPartnerServerArrayOutput() FailoverGroupPartnerServerArrayOutput {
	return i.ToFailoverGroupPartnerServerArrayOutputWithContext(context.Background())
}

func (i FailoverGroupPartnerServerArray) ToFailoverGroupPartnerServerArrayOutputWithContext(ctx context.Context) FailoverGroupPartnerServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupPartnerServerArrayOutput)
}

type FailoverGroupPartnerServerOutput struct{ *pulumi.OutputState }

func (FailoverGroupPartnerServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FailoverGroupPartnerServer)(nil)).Elem()
}

func (o FailoverGroupPartnerServerOutput) ToFailoverGroupPartnerServerOutput() FailoverGroupPartnerServerOutput {
	return o
}

func (o FailoverGroupPartnerServerOutput) ToFailoverGroupPartnerServerOutputWithContext(ctx context.Context) FailoverGroupPartnerServerOutput {
	return o
}

// the SQL server ID
func (o FailoverGroupPartnerServerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v FailoverGroupPartnerServer) string { return v.Id }).(pulumi.StringOutput)
}

// the location of the failover group.
func (o FailoverGroupPartnerServerOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FailoverGroupPartnerServer) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// local replication role of the failover group instance.
func (o FailoverGroupPartnerServerOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FailoverGroupPartnerServer) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type FailoverGroupPartnerServerArrayOutput struct{ *pulumi.OutputState }

func (FailoverGroupPartnerServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FailoverGroupPartnerServer)(nil)).Elem()
}

func (o FailoverGroupPartnerServerArrayOutput) ToFailoverGroupPartnerServerArrayOutput() FailoverGroupPartnerServerArrayOutput {
	return o
}

func (o FailoverGroupPartnerServerArrayOutput) ToFailoverGroupPartnerServerArrayOutputWithContext(ctx context.Context) FailoverGroupPartnerServerArrayOutput {
	return o
}

func (o FailoverGroupPartnerServerArrayOutput) Index(i pulumi.IntInput) FailoverGroupPartnerServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FailoverGroupPartnerServer {
		return vs[0].([]FailoverGroupPartnerServer)[vs[1].(int)]
	}).(FailoverGroupPartnerServerOutput)
}

type FailoverGroupReadWriteEndpointFailoverPolicy struct {
	// Applies only if `mode` is `Automatic`. The grace period in minutes before failover with data loss is attempted
	GraceMinutes *int `pulumi:"graceMinutes"`
	// the failover mode. Possible values are `Manual`, `Automatic`
	Mode string `pulumi:"mode"`
}

// FailoverGroupReadWriteEndpointFailoverPolicyInput is an input type that accepts FailoverGroupReadWriteEndpointFailoverPolicyArgs and FailoverGroupReadWriteEndpointFailoverPolicyOutput values.
// You can construct a concrete instance of `FailoverGroupReadWriteEndpointFailoverPolicyInput` via:
//
//	FailoverGroupReadWriteEndpointFailoverPolicyArgs{...}
type FailoverGroupReadWriteEndpointFailoverPolicyInput interface {
	pulumi.Input

	ToFailoverGroupReadWriteEndpointFailoverPolicyOutput() FailoverGroupReadWriteEndpointFailoverPolicyOutput
	ToFailoverGroupReadWriteEndpointFailoverPolicyOutputWithContext(context.Context) FailoverGroupReadWriteEndpointFailoverPolicyOutput
}

type FailoverGroupReadWriteEndpointFailoverPolicyArgs struct {
	// Applies only if `mode` is `Automatic`. The grace period in minutes before failover with data loss is attempted
	GraceMinutes pulumi.IntPtrInput `pulumi:"graceMinutes"`
	// the failover mode. Possible values are `Manual`, `Automatic`
	Mode pulumi.StringInput `pulumi:"mode"`
}

func (FailoverGroupReadWriteEndpointFailoverPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FailoverGroupReadWriteEndpointFailoverPolicy)(nil)).Elem()
}

func (i FailoverGroupReadWriteEndpointFailoverPolicyArgs) ToFailoverGroupReadWriteEndpointFailoverPolicyOutput() FailoverGroupReadWriteEndpointFailoverPolicyOutput {
	return i.ToFailoverGroupReadWriteEndpointFailoverPolicyOutputWithContext(context.Background())
}

func (i FailoverGroupReadWriteEndpointFailoverPolicyArgs) ToFailoverGroupReadWriteEndpointFailoverPolicyOutputWithContext(ctx context.Context) FailoverGroupReadWriteEndpointFailoverPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupReadWriteEndpointFailoverPolicyOutput)
}

func (i FailoverGroupReadWriteEndpointFailoverPolicyArgs) ToFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput() FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput {
	return i.ToFailoverGroupReadWriteEndpointFailoverPolicyPtrOutputWithContext(context.Background())
}

func (i FailoverGroupReadWriteEndpointFailoverPolicyArgs) ToFailoverGroupReadWriteEndpointFailoverPolicyPtrOutputWithContext(ctx context.Context) FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupReadWriteEndpointFailoverPolicyOutput).ToFailoverGroupReadWriteEndpointFailoverPolicyPtrOutputWithContext(ctx)
}

// FailoverGroupReadWriteEndpointFailoverPolicyPtrInput is an input type that accepts FailoverGroupReadWriteEndpointFailoverPolicyArgs, FailoverGroupReadWriteEndpointFailoverPolicyPtr and FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput values.
// You can construct a concrete instance of `FailoverGroupReadWriteEndpointFailoverPolicyPtrInput` via:
//
//	        FailoverGroupReadWriteEndpointFailoverPolicyArgs{...}
//
//	or:
//
//	        nil
type FailoverGroupReadWriteEndpointFailoverPolicyPtrInput interface {
	pulumi.Input

	ToFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput() FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput
	ToFailoverGroupReadWriteEndpointFailoverPolicyPtrOutputWithContext(context.Context) FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput
}

type failoverGroupReadWriteEndpointFailoverPolicyPtrType FailoverGroupReadWriteEndpointFailoverPolicyArgs

func FailoverGroupReadWriteEndpointFailoverPolicyPtr(v *FailoverGroupReadWriteEndpointFailoverPolicyArgs) FailoverGroupReadWriteEndpointFailoverPolicyPtrInput {
	return (*failoverGroupReadWriteEndpointFailoverPolicyPtrType)(v)
}

func (*failoverGroupReadWriteEndpointFailoverPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FailoverGroupReadWriteEndpointFailoverPolicy)(nil)).Elem()
}

func (i *failoverGroupReadWriteEndpointFailoverPolicyPtrType) ToFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput() FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput {
	return i.ToFailoverGroupReadWriteEndpointFailoverPolicyPtrOutputWithContext(context.Background())
}

func (i *failoverGroupReadWriteEndpointFailoverPolicyPtrType) ToFailoverGroupReadWriteEndpointFailoverPolicyPtrOutputWithContext(ctx context.Context) FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput)
}

type FailoverGroupReadWriteEndpointFailoverPolicyOutput struct{ *pulumi.OutputState }

func (FailoverGroupReadWriteEndpointFailoverPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FailoverGroupReadWriteEndpointFailoverPolicy)(nil)).Elem()
}

func (o FailoverGroupReadWriteEndpointFailoverPolicyOutput) ToFailoverGroupReadWriteEndpointFailoverPolicyOutput() FailoverGroupReadWriteEndpointFailoverPolicyOutput {
	return o
}

func (o FailoverGroupReadWriteEndpointFailoverPolicyOutput) ToFailoverGroupReadWriteEndpointFailoverPolicyOutputWithContext(ctx context.Context) FailoverGroupReadWriteEndpointFailoverPolicyOutput {
	return o
}

func (o FailoverGroupReadWriteEndpointFailoverPolicyOutput) ToFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput() FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput {
	return o.ToFailoverGroupReadWriteEndpointFailoverPolicyPtrOutputWithContext(context.Background())
}

func (o FailoverGroupReadWriteEndpointFailoverPolicyOutput) ToFailoverGroupReadWriteEndpointFailoverPolicyPtrOutputWithContext(ctx context.Context) FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FailoverGroupReadWriteEndpointFailoverPolicy) *FailoverGroupReadWriteEndpointFailoverPolicy {
		return &v
	}).(FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput)
}

// Applies only if `mode` is `Automatic`. The grace period in minutes before failover with data loss is attempted
func (o FailoverGroupReadWriteEndpointFailoverPolicyOutput) GraceMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FailoverGroupReadWriteEndpointFailoverPolicy) *int { return v.GraceMinutes }).(pulumi.IntPtrOutput)
}

// the failover mode. Possible values are `Manual`, `Automatic`
func (o FailoverGroupReadWriteEndpointFailoverPolicyOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v FailoverGroupReadWriteEndpointFailoverPolicy) string { return v.Mode }).(pulumi.StringOutput)
}

type FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput struct{ *pulumi.OutputState }

func (FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FailoverGroupReadWriteEndpointFailoverPolicy)(nil)).Elem()
}

func (o FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput) ToFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput() FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput {
	return o
}

func (o FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput) ToFailoverGroupReadWriteEndpointFailoverPolicyPtrOutputWithContext(ctx context.Context) FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput {
	return o
}

func (o FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput) Elem() FailoverGroupReadWriteEndpointFailoverPolicyOutput {
	return o.ApplyT(func(v *FailoverGroupReadWriteEndpointFailoverPolicy) FailoverGroupReadWriteEndpointFailoverPolicy {
		if v != nil {
			return *v
		}
		var ret FailoverGroupReadWriteEndpointFailoverPolicy
		return ret
	}).(FailoverGroupReadWriteEndpointFailoverPolicyOutput)
}

// Applies only if `mode` is `Automatic`. The grace period in minutes before failover with data loss is attempted
func (o FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput) GraceMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FailoverGroupReadWriteEndpointFailoverPolicy) *int {
		if v == nil {
			return nil
		}
		return v.GraceMinutes
	}).(pulumi.IntPtrOutput)
}

// the failover mode. Possible values are `Manual`, `Automatic`
func (o FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FailoverGroupReadWriteEndpointFailoverPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

type FailoverGroupReadonlyEndpointFailoverPolicy struct {
	// Failover policy for the read-only endpoint. Possible values are `Enabled`, and `Disabled`
	Mode string `pulumi:"mode"`
}

// FailoverGroupReadonlyEndpointFailoverPolicyInput is an input type that accepts FailoverGroupReadonlyEndpointFailoverPolicyArgs and FailoverGroupReadonlyEndpointFailoverPolicyOutput values.
// You can construct a concrete instance of `FailoverGroupReadonlyEndpointFailoverPolicyInput` via:
//
//	FailoverGroupReadonlyEndpointFailoverPolicyArgs{...}
type FailoverGroupReadonlyEndpointFailoverPolicyInput interface {
	pulumi.Input

	ToFailoverGroupReadonlyEndpointFailoverPolicyOutput() FailoverGroupReadonlyEndpointFailoverPolicyOutput
	ToFailoverGroupReadonlyEndpointFailoverPolicyOutputWithContext(context.Context) FailoverGroupReadonlyEndpointFailoverPolicyOutput
}

type FailoverGroupReadonlyEndpointFailoverPolicyArgs struct {
	// Failover policy for the read-only endpoint. Possible values are `Enabled`, and `Disabled`
	Mode pulumi.StringInput `pulumi:"mode"`
}

func (FailoverGroupReadonlyEndpointFailoverPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FailoverGroupReadonlyEndpointFailoverPolicy)(nil)).Elem()
}

func (i FailoverGroupReadonlyEndpointFailoverPolicyArgs) ToFailoverGroupReadonlyEndpointFailoverPolicyOutput() FailoverGroupReadonlyEndpointFailoverPolicyOutput {
	return i.ToFailoverGroupReadonlyEndpointFailoverPolicyOutputWithContext(context.Background())
}

func (i FailoverGroupReadonlyEndpointFailoverPolicyArgs) ToFailoverGroupReadonlyEndpointFailoverPolicyOutputWithContext(ctx context.Context) FailoverGroupReadonlyEndpointFailoverPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupReadonlyEndpointFailoverPolicyOutput)
}

func (i FailoverGroupReadonlyEndpointFailoverPolicyArgs) ToFailoverGroupReadonlyEndpointFailoverPolicyPtrOutput() FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput {
	return i.ToFailoverGroupReadonlyEndpointFailoverPolicyPtrOutputWithContext(context.Background())
}

func (i FailoverGroupReadonlyEndpointFailoverPolicyArgs) ToFailoverGroupReadonlyEndpointFailoverPolicyPtrOutputWithContext(ctx context.Context) FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupReadonlyEndpointFailoverPolicyOutput).ToFailoverGroupReadonlyEndpointFailoverPolicyPtrOutputWithContext(ctx)
}

// FailoverGroupReadonlyEndpointFailoverPolicyPtrInput is an input type that accepts FailoverGroupReadonlyEndpointFailoverPolicyArgs, FailoverGroupReadonlyEndpointFailoverPolicyPtr and FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput values.
// You can construct a concrete instance of `FailoverGroupReadonlyEndpointFailoverPolicyPtrInput` via:
//
//	        FailoverGroupReadonlyEndpointFailoverPolicyArgs{...}
//
//	or:
//
//	        nil
type FailoverGroupReadonlyEndpointFailoverPolicyPtrInput interface {
	pulumi.Input

	ToFailoverGroupReadonlyEndpointFailoverPolicyPtrOutput() FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput
	ToFailoverGroupReadonlyEndpointFailoverPolicyPtrOutputWithContext(context.Context) FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput
}

type failoverGroupReadonlyEndpointFailoverPolicyPtrType FailoverGroupReadonlyEndpointFailoverPolicyArgs

func FailoverGroupReadonlyEndpointFailoverPolicyPtr(v *FailoverGroupReadonlyEndpointFailoverPolicyArgs) FailoverGroupReadonlyEndpointFailoverPolicyPtrInput {
	return (*failoverGroupReadonlyEndpointFailoverPolicyPtrType)(v)
}

func (*failoverGroupReadonlyEndpointFailoverPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FailoverGroupReadonlyEndpointFailoverPolicy)(nil)).Elem()
}

func (i *failoverGroupReadonlyEndpointFailoverPolicyPtrType) ToFailoverGroupReadonlyEndpointFailoverPolicyPtrOutput() FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput {
	return i.ToFailoverGroupReadonlyEndpointFailoverPolicyPtrOutputWithContext(context.Background())
}

func (i *failoverGroupReadonlyEndpointFailoverPolicyPtrType) ToFailoverGroupReadonlyEndpointFailoverPolicyPtrOutputWithContext(ctx context.Context) FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput)
}

type FailoverGroupReadonlyEndpointFailoverPolicyOutput struct{ *pulumi.OutputState }

func (FailoverGroupReadonlyEndpointFailoverPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FailoverGroupReadonlyEndpointFailoverPolicy)(nil)).Elem()
}

func (o FailoverGroupReadonlyEndpointFailoverPolicyOutput) ToFailoverGroupReadonlyEndpointFailoverPolicyOutput() FailoverGroupReadonlyEndpointFailoverPolicyOutput {
	return o
}

func (o FailoverGroupReadonlyEndpointFailoverPolicyOutput) ToFailoverGroupReadonlyEndpointFailoverPolicyOutputWithContext(ctx context.Context) FailoverGroupReadonlyEndpointFailoverPolicyOutput {
	return o
}

func (o FailoverGroupReadonlyEndpointFailoverPolicyOutput) ToFailoverGroupReadonlyEndpointFailoverPolicyPtrOutput() FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput {
	return o.ToFailoverGroupReadonlyEndpointFailoverPolicyPtrOutputWithContext(context.Background())
}

func (o FailoverGroupReadonlyEndpointFailoverPolicyOutput) ToFailoverGroupReadonlyEndpointFailoverPolicyPtrOutputWithContext(ctx context.Context) FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FailoverGroupReadonlyEndpointFailoverPolicy) *FailoverGroupReadonlyEndpointFailoverPolicy {
		return &v
	}).(FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput)
}

// Failover policy for the read-only endpoint. Possible values are `Enabled`, and `Disabled`
func (o FailoverGroupReadonlyEndpointFailoverPolicyOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v FailoverGroupReadonlyEndpointFailoverPolicy) string { return v.Mode }).(pulumi.StringOutput)
}

type FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput struct{ *pulumi.OutputState }

func (FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FailoverGroupReadonlyEndpointFailoverPolicy)(nil)).Elem()
}

func (o FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput) ToFailoverGroupReadonlyEndpointFailoverPolicyPtrOutput() FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput {
	return o
}

func (o FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput) ToFailoverGroupReadonlyEndpointFailoverPolicyPtrOutputWithContext(ctx context.Context) FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput {
	return o
}

func (o FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput) Elem() FailoverGroupReadonlyEndpointFailoverPolicyOutput {
	return o.ApplyT(func(v *FailoverGroupReadonlyEndpointFailoverPolicy) FailoverGroupReadonlyEndpointFailoverPolicy {
		if v != nil {
			return *v
		}
		var ret FailoverGroupReadonlyEndpointFailoverPolicy
		return ret
	}).(FailoverGroupReadonlyEndpointFailoverPolicyOutput)
}

// Failover policy for the read-only endpoint. Possible values are `Enabled`, and `Disabled`
func (o FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FailoverGroupReadonlyEndpointFailoverPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

type ManagedInstanceFailoverGroupPartnerRegion struct {
	// The Azure Region where the SQL Instance Failover Group exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The partner replication role of the SQL Instance Failover Group.
	Role *string `pulumi:"role"`
}

// ManagedInstanceFailoverGroupPartnerRegionInput is an input type that accepts ManagedInstanceFailoverGroupPartnerRegionArgs and ManagedInstanceFailoverGroupPartnerRegionOutput values.
// You can construct a concrete instance of `ManagedInstanceFailoverGroupPartnerRegionInput` via:
//
//	ManagedInstanceFailoverGroupPartnerRegionArgs{...}
type ManagedInstanceFailoverGroupPartnerRegionInput interface {
	pulumi.Input

	ToManagedInstanceFailoverGroupPartnerRegionOutput() ManagedInstanceFailoverGroupPartnerRegionOutput
	ToManagedInstanceFailoverGroupPartnerRegionOutputWithContext(context.Context) ManagedInstanceFailoverGroupPartnerRegionOutput
}

type ManagedInstanceFailoverGroupPartnerRegionArgs struct {
	// The Azure Region where the SQL Instance Failover Group exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The partner replication role of the SQL Instance Failover Group.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (ManagedInstanceFailoverGroupPartnerRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedInstanceFailoverGroupPartnerRegion)(nil)).Elem()
}

func (i ManagedInstanceFailoverGroupPartnerRegionArgs) ToManagedInstanceFailoverGroupPartnerRegionOutput() ManagedInstanceFailoverGroupPartnerRegionOutput {
	return i.ToManagedInstanceFailoverGroupPartnerRegionOutputWithContext(context.Background())
}

func (i ManagedInstanceFailoverGroupPartnerRegionArgs) ToManagedInstanceFailoverGroupPartnerRegionOutputWithContext(ctx context.Context) ManagedInstanceFailoverGroupPartnerRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInstanceFailoverGroupPartnerRegionOutput)
}

// ManagedInstanceFailoverGroupPartnerRegionArrayInput is an input type that accepts ManagedInstanceFailoverGroupPartnerRegionArray and ManagedInstanceFailoverGroupPartnerRegionArrayOutput values.
// You can construct a concrete instance of `ManagedInstanceFailoverGroupPartnerRegionArrayInput` via:
//
//	ManagedInstanceFailoverGroupPartnerRegionArray{ ManagedInstanceFailoverGroupPartnerRegionArgs{...} }
type ManagedInstanceFailoverGroupPartnerRegionArrayInput interface {
	pulumi.Input

	ToManagedInstanceFailoverGroupPartnerRegionArrayOutput() ManagedInstanceFailoverGroupPartnerRegionArrayOutput
	ToManagedInstanceFailoverGroupPartnerRegionArrayOutputWithContext(context.Context) ManagedInstanceFailoverGroupPartnerRegionArrayOutput
}

type ManagedInstanceFailoverGroupPartnerRegionArray []ManagedInstanceFailoverGroupPartnerRegionInput

func (ManagedInstanceFailoverGroupPartnerRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedInstanceFailoverGroupPartnerRegion)(nil)).Elem()
}

func (i ManagedInstanceFailoverGroupPartnerRegionArray) ToManagedInstanceFailoverGroupPartnerRegionArrayOutput() ManagedInstanceFailoverGroupPartnerRegionArrayOutput {
	return i.ToManagedInstanceFailoverGroupPartnerRegionArrayOutputWithContext(context.Background())
}

func (i ManagedInstanceFailoverGroupPartnerRegionArray) ToManagedInstanceFailoverGroupPartnerRegionArrayOutputWithContext(ctx context.Context) ManagedInstanceFailoverGroupPartnerRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInstanceFailoverGroupPartnerRegionArrayOutput)
}

type ManagedInstanceFailoverGroupPartnerRegionOutput struct{ *pulumi.OutputState }

func (ManagedInstanceFailoverGroupPartnerRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedInstanceFailoverGroupPartnerRegion)(nil)).Elem()
}

func (o ManagedInstanceFailoverGroupPartnerRegionOutput) ToManagedInstanceFailoverGroupPartnerRegionOutput() ManagedInstanceFailoverGroupPartnerRegionOutput {
	return o
}

func (o ManagedInstanceFailoverGroupPartnerRegionOutput) ToManagedInstanceFailoverGroupPartnerRegionOutputWithContext(ctx context.Context) ManagedInstanceFailoverGroupPartnerRegionOutput {
	return o
}

// The Azure Region where the SQL Instance Failover Group exists. Changing this forces a new resource to be created.
func (o ManagedInstanceFailoverGroupPartnerRegionOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedInstanceFailoverGroupPartnerRegion) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The partner replication role of the SQL Instance Failover Group.
func (o ManagedInstanceFailoverGroupPartnerRegionOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedInstanceFailoverGroupPartnerRegion) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type ManagedInstanceFailoverGroupPartnerRegionArrayOutput struct{ *pulumi.OutputState }

func (ManagedInstanceFailoverGroupPartnerRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedInstanceFailoverGroupPartnerRegion)(nil)).Elem()
}

func (o ManagedInstanceFailoverGroupPartnerRegionArrayOutput) ToManagedInstanceFailoverGroupPartnerRegionArrayOutput() ManagedInstanceFailoverGroupPartnerRegionArrayOutput {
	return o
}

func (o ManagedInstanceFailoverGroupPartnerRegionArrayOutput) ToManagedInstanceFailoverGroupPartnerRegionArrayOutputWithContext(ctx context.Context) ManagedInstanceFailoverGroupPartnerRegionArrayOutput {
	return o
}

func (o ManagedInstanceFailoverGroupPartnerRegionArrayOutput) Index(i pulumi.IntInput) ManagedInstanceFailoverGroupPartnerRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedInstanceFailoverGroupPartnerRegion {
		return vs[0].([]ManagedInstanceFailoverGroupPartnerRegion)[vs[1].(int)]
	}).(ManagedInstanceFailoverGroupPartnerRegionOutput)
}

type ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicy struct {
	// Applies only if `mode` is `Automatic`. The grace period in minutes before failover with data loss is attempted.
	GraceMinutes *int `pulumi:"graceMinutes"`
	// The failover mode. Possible values are `Manual`, `Automatic`
	Mode string `pulumi:"mode"`
}

// ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyInput is an input type that accepts ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyArgs and ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyOutput values.
// You can construct a concrete instance of `ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyInput` via:
//
//	ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyArgs{...}
type ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyInput interface {
	pulumi.Input

	ToManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyOutput() ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyOutput
	ToManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyOutputWithContext(context.Context) ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyOutput
}

type ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyArgs struct {
	// Applies only if `mode` is `Automatic`. The grace period in minutes before failover with data loss is attempted.
	GraceMinutes pulumi.IntPtrInput `pulumi:"graceMinutes"`
	// The failover mode. Possible values are `Manual`, `Automatic`
	Mode pulumi.StringInput `pulumi:"mode"`
}

func (ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicy)(nil)).Elem()
}

func (i ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyArgs) ToManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyOutput() ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyOutput {
	return i.ToManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyOutputWithContext(context.Background())
}

func (i ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyArgs) ToManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyOutputWithContext(ctx context.Context) ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyOutput)
}

func (i ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyArgs) ToManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput() ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput {
	return i.ToManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutputWithContext(context.Background())
}

func (i ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyArgs) ToManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutputWithContext(ctx context.Context) ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyOutput).ToManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutputWithContext(ctx)
}

// ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrInput is an input type that accepts ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyArgs, ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtr and ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput values.
// You can construct a concrete instance of `ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrInput` via:
//
//	        ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyArgs{...}
//
//	or:
//
//	        nil
type ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrInput interface {
	pulumi.Input

	ToManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput() ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput
	ToManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutputWithContext(context.Context) ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput
}

type managedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrType ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyArgs

func ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtr(v *ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyArgs) ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrInput {
	return (*managedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrType)(v)
}

func (*managedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicy)(nil)).Elem()
}

func (i *managedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrType) ToManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput() ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput {
	return i.ToManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutputWithContext(context.Background())
}

func (i *managedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrType) ToManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutputWithContext(ctx context.Context) ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput)
}

type ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyOutput struct{ *pulumi.OutputState }

func (ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicy)(nil)).Elem()
}

func (o ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyOutput) ToManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyOutput() ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyOutput {
	return o
}

func (o ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyOutput) ToManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyOutputWithContext(ctx context.Context) ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyOutput {
	return o
}

func (o ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyOutput) ToManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput() ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput {
	return o.ToManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutputWithContext(context.Background())
}

func (o ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyOutput) ToManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutputWithContext(ctx context.Context) ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicy) *ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicy {
		return &v
	}).(ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput)
}

// Applies only if `mode` is `Automatic`. The grace period in minutes before failover with data loss is attempted.
func (o ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyOutput) GraceMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicy) *int { return v.GraceMinutes }).(pulumi.IntPtrOutput)
}

// The failover mode. Possible values are `Manual`, `Automatic`
func (o ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicy) string { return v.Mode }).(pulumi.StringOutput)
}

type ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput struct{ *pulumi.OutputState }

func (ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicy)(nil)).Elem()
}

func (o ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput) ToManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput() ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput {
	return o
}

func (o ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput) ToManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutputWithContext(ctx context.Context) ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput {
	return o
}

func (o ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput) Elem() ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyOutput {
	return o.ApplyT(func(v *ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicy) ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicy {
		if v != nil {
			return *v
		}
		var ret ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicy
		return ret
	}).(ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyOutput)
}

// Applies only if `mode` is `Automatic`. The grace period in minutes before failover with data loss is attempted.
func (o ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput) GraceMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicy) *int {
		if v == nil {
			return nil
		}
		return v.GraceMinutes
	}).(pulumi.IntPtrOutput)
}

// The failover mode. Possible values are `Manual`, `Automatic`
func (o ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

type ManagedInstanceIdentity struct {
	// The Principal ID for the Service Principal associated with the Identity of this SQL Managed Instance.
	PrincipalId *string `pulumi:"principalId"`
	// The Tenant ID for the Service Principal associated with the Identity of this SQL Managed Instance.
	TenantId *string `pulumi:"tenantId"`
	// Specifies the type of Managed Service Identity that should be configured on this SQL Managed Instance. The only possible value is `SystemAssigned`.
	Type string `pulumi:"type"`
}

// ManagedInstanceIdentityInput is an input type that accepts ManagedInstanceIdentityArgs and ManagedInstanceIdentityOutput values.
// You can construct a concrete instance of `ManagedInstanceIdentityInput` via:
//
//	ManagedInstanceIdentityArgs{...}
type ManagedInstanceIdentityInput interface {
	pulumi.Input

	ToManagedInstanceIdentityOutput() ManagedInstanceIdentityOutput
	ToManagedInstanceIdentityOutputWithContext(context.Context) ManagedInstanceIdentityOutput
}

type ManagedInstanceIdentityArgs struct {
	// The Principal ID for the Service Principal associated with the Identity of this SQL Managed Instance.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The Tenant ID for the Service Principal associated with the Identity of this SQL Managed Instance.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// Specifies the type of Managed Service Identity that should be configured on this SQL Managed Instance. The only possible value is `SystemAssigned`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ManagedInstanceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedInstanceIdentity)(nil)).Elem()
}

func (i ManagedInstanceIdentityArgs) ToManagedInstanceIdentityOutput() ManagedInstanceIdentityOutput {
	return i.ToManagedInstanceIdentityOutputWithContext(context.Background())
}

func (i ManagedInstanceIdentityArgs) ToManagedInstanceIdentityOutputWithContext(ctx context.Context) ManagedInstanceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInstanceIdentityOutput)
}

func (i ManagedInstanceIdentityArgs) ToManagedInstanceIdentityPtrOutput() ManagedInstanceIdentityPtrOutput {
	return i.ToManagedInstanceIdentityPtrOutputWithContext(context.Background())
}

func (i ManagedInstanceIdentityArgs) ToManagedInstanceIdentityPtrOutputWithContext(ctx context.Context) ManagedInstanceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInstanceIdentityOutput).ToManagedInstanceIdentityPtrOutputWithContext(ctx)
}

// ManagedInstanceIdentityPtrInput is an input type that accepts ManagedInstanceIdentityArgs, ManagedInstanceIdentityPtr and ManagedInstanceIdentityPtrOutput values.
// You can construct a concrete instance of `ManagedInstanceIdentityPtrInput` via:
//
//	        ManagedInstanceIdentityArgs{...}
//
//	or:
//
//	        nil
type ManagedInstanceIdentityPtrInput interface {
	pulumi.Input

	ToManagedInstanceIdentityPtrOutput() ManagedInstanceIdentityPtrOutput
	ToManagedInstanceIdentityPtrOutputWithContext(context.Context) ManagedInstanceIdentityPtrOutput
}

type managedInstanceIdentityPtrType ManagedInstanceIdentityArgs

func ManagedInstanceIdentityPtr(v *ManagedInstanceIdentityArgs) ManagedInstanceIdentityPtrInput {
	return (*managedInstanceIdentityPtrType)(v)
}

func (*managedInstanceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedInstanceIdentity)(nil)).Elem()
}

func (i *managedInstanceIdentityPtrType) ToManagedInstanceIdentityPtrOutput() ManagedInstanceIdentityPtrOutput {
	return i.ToManagedInstanceIdentityPtrOutputWithContext(context.Background())
}

func (i *managedInstanceIdentityPtrType) ToManagedInstanceIdentityPtrOutputWithContext(ctx context.Context) ManagedInstanceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInstanceIdentityPtrOutput)
}

type ManagedInstanceIdentityOutput struct{ *pulumi.OutputState }

func (ManagedInstanceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedInstanceIdentity)(nil)).Elem()
}

func (o ManagedInstanceIdentityOutput) ToManagedInstanceIdentityOutput() ManagedInstanceIdentityOutput {
	return o
}

func (o ManagedInstanceIdentityOutput) ToManagedInstanceIdentityOutputWithContext(ctx context.Context) ManagedInstanceIdentityOutput {
	return o
}

func (o ManagedInstanceIdentityOutput) ToManagedInstanceIdentityPtrOutput() ManagedInstanceIdentityPtrOutput {
	return o.ToManagedInstanceIdentityPtrOutputWithContext(context.Background())
}

func (o ManagedInstanceIdentityOutput) ToManagedInstanceIdentityPtrOutputWithContext(ctx context.Context) ManagedInstanceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedInstanceIdentity) *ManagedInstanceIdentity {
		return &v
	}).(ManagedInstanceIdentityPtrOutput)
}

// The Principal ID for the Service Principal associated with the Identity of this SQL Managed Instance.
func (o ManagedInstanceIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedInstanceIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The Tenant ID for the Service Principal associated with the Identity of this SQL Managed Instance.
func (o ManagedInstanceIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedInstanceIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this SQL Managed Instance. The only possible value is `SystemAssigned`.
func (o ManagedInstanceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedInstanceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type ManagedInstanceIdentityPtrOutput struct{ *pulumi.OutputState }

func (ManagedInstanceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedInstanceIdentity)(nil)).Elem()
}

func (o ManagedInstanceIdentityPtrOutput) ToManagedInstanceIdentityPtrOutput() ManagedInstanceIdentityPtrOutput {
	return o
}

func (o ManagedInstanceIdentityPtrOutput) ToManagedInstanceIdentityPtrOutputWithContext(ctx context.Context) ManagedInstanceIdentityPtrOutput {
	return o
}

func (o ManagedInstanceIdentityPtrOutput) Elem() ManagedInstanceIdentityOutput {
	return o.ApplyT(func(v *ManagedInstanceIdentity) ManagedInstanceIdentity {
		if v != nil {
			return *v
		}
		var ret ManagedInstanceIdentity
		return ret
	}).(ManagedInstanceIdentityOutput)
}

// The Principal ID for the Service Principal associated with the Identity of this SQL Managed Instance.
func (o ManagedInstanceIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedInstanceIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The Tenant ID for the Service Principal associated with the Identity of this SQL Managed Instance.
func (o ManagedInstanceIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedInstanceIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this SQL Managed Instance. The only possible value is `SystemAssigned`.
func (o ManagedInstanceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedInstanceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type SqlServerIdentity struct {
	// The Principal ID for the Service Principal associated with the Identity of this SQL Server.
	PrincipalId *string `pulumi:"principalId"`
	// The Tenant ID for the Service Principal associated with the Identity of this SQL Server.
	TenantId *string `pulumi:"tenantId"`
	// Specifies the type of Managed Service Identity that should be configured on this SQL Server. The only possible value is `SystemAssigned`.
	//
	// > **NOTE:** The assigned `principalId` and `tenantId` can be retrieved after the identity `type` has been set to `SystemAssigned` and the Microsoft SQL Server has been created. More details are available below.
	Type string `pulumi:"type"`
}

// SqlServerIdentityInput is an input type that accepts SqlServerIdentityArgs and SqlServerIdentityOutput values.
// You can construct a concrete instance of `SqlServerIdentityInput` via:
//
//	SqlServerIdentityArgs{...}
type SqlServerIdentityInput interface {
	pulumi.Input

	ToSqlServerIdentityOutput() SqlServerIdentityOutput
	ToSqlServerIdentityOutputWithContext(context.Context) SqlServerIdentityOutput
}

type SqlServerIdentityArgs struct {
	// The Principal ID for the Service Principal associated with the Identity of this SQL Server.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The Tenant ID for the Service Principal associated with the Identity of this SQL Server.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// Specifies the type of Managed Service Identity that should be configured on this SQL Server. The only possible value is `SystemAssigned`.
	//
	// > **NOTE:** The assigned `principalId` and `tenantId` can be retrieved after the identity `type` has been set to `SystemAssigned` and the Microsoft SQL Server has been created. More details are available below.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SqlServerIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerIdentity)(nil)).Elem()
}

func (i SqlServerIdentityArgs) ToSqlServerIdentityOutput() SqlServerIdentityOutput {
	return i.ToSqlServerIdentityOutputWithContext(context.Background())
}

func (i SqlServerIdentityArgs) ToSqlServerIdentityOutputWithContext(ctx context.Context) SqlServerIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerIdentityOutput)
}

func (i SqlServerIdentityArgs) ToSqlServerIdentityPtrOutput() SqlServerIdentityPtrOutput {
	return i.ToSqlServerIdentityPtrOutputWithContext(context.Background())
}

func (i SqlServerIdentityArgs) ToSqlServerIdentityPtrOutputWithContext(ctx context.Context) SqlServerIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerIdentityOutput).ToSqlServerIdentityPtrOutputWithContext(ctx)
}

// SqlServerIdentityPtrInput is an input type that accepts SqlServerIdentityArgs, SqlServerIdentityPtr and SqlServerIdentityPtrOutput values.
// You can construct a concrete instance of `SqlServerIdentityPtrInput` via:
//
//	        SqlServerIdentityArgs{...}
//
//	or:
//
//	        nil
type SqlServerIdentityPtrInput interface {
	pulumi.Input

	ToSqlServerIdentityPtrOutput() SqlServerIdentityPtrOutput
	ToSqlServerIdentityPtrOutputWithContext(context.Context) SqlServerIdentityPtrOutput
}

type sqlServerIdentityPtrType SqlServerIdentityArgs

func SqlServerIdentityPtr(v *SqlServerIdentityArgs) SqlServerIdentityPtrInput {
	return (*sqlServerIdentityPtrType)(v)
}

func (*sqlServerIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlServerIdentity)(nil)).Elem()
}

func (i *sqlServerIdentityPtrType) ToSqlServerIdentityPtrOutput() SqlServerIdentityPtrOutput {
	return i.ToSqlServerIdentityPtrOutputWithContext(context.Background())
}

func (i *sqlServerIdentityPtrType) ToSqlServerIdentityPtrOutputWithContext(ctx context.Context) SqlServerIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerIdentityPtrOutput)
}

type SqlServerIdentityOutput struct{ *pulumi.OutputState }

func (SqlServerIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerIdentity)(nil)).Elem()
}

func (o SqlServerIdentityOutput) ToSqlServerIdentityOutput() SqlServerIdentityOutput {
	return o
}

func (o SqlServerIdentityOutput) ToSqlServerIdentityOutputWithContext(ctx context.Context) SqlServerIdentityOutput {
	return o
}

func (o SqlServerIdentityOutput) ToSqlServerIdentityPtrOutput() SqlServerIdentityPtrOutput {
	return o.ToSqlServerIdentityPtrOutputWithContext(context.Background())
}

func (o SqlServerIdentityOutput) ToSqlServerIdentityPtrOutputWithContext(ctx context.Context) SqlServerIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SqlServerIdentity) *SqlServerIdentity {
		return &v
	}).(SqlServerIdentityPtrOutput)
}

// The Principal ID for the Service Principal associated with the Identity of this SQL Server.
func (o SqlServerIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The Tenant ID for the Service Principal associated with the Identity of this SQL Server.
func (o SqlServerIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this SQL Server. The only possible value is `SystemAssigned`.
//
// > **NOTE:** The assigned `principalId` and `tenantId` can be retrieved after the identity `type` has been set to `SystemAssigned` and the Microsoft SQL Server has been created. More details are available below.
func (o SqlServerIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlServerIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type SqlServerIdentityPtrOutput struct{ *pulumi.OutputState }

func (SqlServerIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlServerIdentity)(nil)).Elem()
}

func (o SqlServerIdentityPtrOutput) ToSqlServerIdentityPtrOutput() SqlServerIdentityPtrOutput {
	return o
}

func (o SqlServerIdentityPtrOutput) ToSqlServerIdentityPtrOutputWithContext(ctx context.Context) SqlServerIdentityPtrOutput {
	return o
}

func (o SqlServerIdentityPtrOutput) Elem() SqlServerIdentityOutput {
	return o.ApplyT(func(v *SqlServerIdentity) SqlServerIdentity {
		if v != nil {
			return *v
		}
		var ret SqlServerIdentity
		return ret
	}).(SqlServerIdentityOutput)
}

// The Principal ID for the Service Principal associated with the Identity of this SQL Server.
func (o SqlServerIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlServerIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The Tenant ID for the Service Principal associated with the Identity of this SQL Server.
func (o SqlServerIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlServerIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this SQL Server. The only possible value is `SystemAssigned`.
//
// > **NOTE:** The assigned `principalId` and `tenantId` can be retrieved after the identity `type` has been set to `SystemAssigned` and the Microsoft SQL Server has been created. More details are available below.
func (o SqlServerIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlServerIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type SqlServerThreatDetectionPolicy struct {
	// Specifies a list of alerts which should be disabled. Possible values include `Access_Anomaly`, `Data_Exfiltration`, `Sql_Injection`, `Sql_Injection_Vulnerability` and `Unsafe_Action"`,.
	DisabledAlerts []string `pulumi:"disabledAlerts"`
	// Should the account administrators be emailed when this alert is triggered?
	EmailAccountAdmins *bool `pulumi:"emailAccountAdmins"`
	// A list of email addresses which alerts should be sent to.
	EmailAddresses []string `pulumi:"emailAddresses"`
	// Specifies the number of days to keep in the Threat Detection audit logs.
	RetentionDays *int `pulumi:"retentionDays"`
	// The State of the Policy. Possible values are `Disabled`, `Enabled` and `New`. Defaults to `Disabled`.
	State *string `pulumi:"state"`
	// Specifies the identifier key of the Threat Detection audit storage account. Required if `state` is `Enabled`.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// Specifies the blob storage endpoint (e.g. <https://example.blob.core.windows.net>). This blob storage will hold all Threat Detection audit logs. Required if `state` is `Enabled`.
	StorageEndpoint *string `pulumi:"storageEndpoint"`
}

// SqlServerThreatDetectionPolicyInput is an input type that accepts SqlServerThreatDetectionPolicyArgs and SqlServerThreatDetectionPolicyOutput values.
// You can construct a concrete instance of `SqlServerThreatDetectionPolicyInput` via:
//
//	SqlServerThreatDetectionPolicyArgs{...}
type SqlServerThreatDetectionPolicyInput interface {
	pulumi.Input

	ToSqlServerThreatDetectionPolicyOutput() SqlServerThreatDetectionPolicyOutput
	ToSqlServerThreatDetectionPolicyOutputWithContext(context.Context) SqlServerThreatDetectionPolicyOutput
}

type SqlServerThreatDetectionPolicyArgs struct {
	// Specifies a list of alerts which should be disabled. Possible values include `Access_Anomaly`, `Data_Exfiltration`, `Sql_Injection`, `Sql_Injection_Vulnerability` and `Unsafe_Action"`,.
	DisabledAlerts pulumi.StringArrayInput `pulumi:"disabledAlerts"`
	// Should the account administrators be emailed when this alert is triggered?
	EmailAccountAdmins pulumi.BoolPtrInput `pulumi:"emailAccountAdmins"`
	// A list of email addresses which alerts should be sent to.
	EmailAddresses pulumi.StringArrayInput `pulumi:"emailAddresses"`
	// Specifies the number of days to keep in the Threat Detection audit logs.
	RetentionDays pulumi.IntPtrInput `pulumi:"retentionDays"`
	// The State of the Policy. Possible values are `Disabled`, `Enabled` and `New`. Defaults to `Disabled`.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Specifies the identifier key of the Threat Detection audit storage account. Required if `state` is `Enabled`.
	StorageAccountAccessKey pulumi.StringPtrInput `pulumi:"storageAccountAccessKey"`
	// Specifies the blob storage endpoint (e.g. <https://example.blob.core.windows.net>). This blob storage will hold all Threat Detection audit logs. Required if `state` is `Enabled`.
	StorageEndpoint pulumi.StringPtrInput `pulumi:"storageEndpoint"`
}

func (SqlServerThreatDetectionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerThreatDetectionPolicy)(nil)).Elem()
}

func (i SqlServerThreatDetectionPolicyArgs) ToSqlServerThreatDetectionPolicyOutput() SqlServerThreatDetectionPolicyOutput {
	return i.ToSqlServerThreatDetectionPolicyOutputWithContext(context.Background())
}

func (i SqlServerThreatDetectionPolicyArgs) ToSqlServerThreatDetectionPolicyOutputWithContext(ctx context.Context) SqlServerThreatDetectionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerThreatDetectionPolicyOutput)
}

func (i SqlServerThreatDetectionPolicyArgs) ToSqlServerThreatDetectionPolicyPtrOutput() SqlServerThreatDetectionPolicyPtrOutput {
	return i.ToSqlServerThreatDetectionPolicyPtrOutputWithContext(context.Background())
}

func (i SqlServerThreatDetectionPolicyArgs) ToSqlServerThreatDetectionPolicyPtrOutputWithContext(ctx context.Context) SqlServerThreatDetectionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerThreatDetectionPolicyOutput).ToSqlServerThreatDetectionPolicyPtrOutputWithContext(ctx)
}

// SqlServerThreatDetectionPolicyPtrInput is an input type that accepts SqlServerThreatDetectionPolicyArgs, SqlServerThreatDetectionPolicyPtr and SqlServerThreatDetectionPolicyPtrOutput values.
// You can construct a concrete instance of `SqlServerThreatDetectionPolicyPtrInput` via:
//
//	        SqlServerThreatDetectionPolicyArgs{...}
//
//	or:
//
//	        nil
type SqlServerThreatDetectionPolicyPtrInput interface {
	pulumi.Input

	ToSqlServerThreatDetectionPolicyPtrOutput() SqlServerThreatDetectionPolicyPtrOutput
	ToSqlServerThreatDetectionPolicyPtrOutputWithContext(context.Context) SqlServerThreatDetectionPolicyPtrOutput
}

type sqlServerThreatDetectionPolicyPtrType SqlServerThreatDetectionPolicyArgs

func SqlServerThreatDetectionPolicyPtr(v *SqlServerThreatDetectionPolicyArgs) SqlServerThreatDetectionPolicyPtrInput {
	return (*sqlServerThreatDetectionPolicyPtrType)(v)
}

func (*sqlServerThreatDetectionPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlServerThreatDetectionPolicy)(nil)).Elem()
}

func (i *sqlServerThreatDetectionPolicyPtrType) ToSqlServerThreatDetectionPolicyPtrOutput() SqlServerThreatDetectionPolicyPtrOutput {
	return i.ToSqlServerThreatDetectionPolicyPtrOutputWithContext(context.Background())
}

func (i *sqlServerThreatDetectionPolicyPtrType) ToSqlServerThreatDetectionPolicyPtrOutputWithContext(ctx context.Context) SqlServerThreatDetectionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerThreatDetectionPolicyPtrOutput)
}

type SqlServerThreatDetectionPolicyOutput struct{ *pulumi.OutputState }

func (SqlServerThreatDetectionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerThreatDetectionPolicy)(nil)).Elem()
}

func (o SqlServerThreatDetectionPolicyOutput) ToSqlServerThreatDetectionPolicyOutput() SqlServerThreatDetectionPolicyOutput {
	return o
}

func (o SqlServerThreatDetectionPolicyOutput) ToSqlServerThreatDetectionPolicyOutputWithContext(ctx context.Context) SqlServerThreatDetectionPolicyOutput {
	return o
}

func (o SqlServerThreatDetectionPolicyOutput) ToSqlServerThreatDetectionPolicyPtrOutput() SqlServerThreatDetectionPolicyPtrOutput {
	return o.ToSqlServerThreatDetectionPolicyPtrOutputWithContext(context.Background())
}

func (o SqlServerThreatDetectionPolicyOutput) ToSqlServerThreatDetectionPolicyPtrOutputWithContext(ctx context.Context) SqlServerThreatDetectionPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SqlServerThreatDetectionPolicy) *SqlServerThreatDetectionPolicy {
		return &v
	}).(SqlServerThreatDetectionPolicyPtrOutput)
}

// Specifies a list of alerts which should be disabled. Possible values include `Access_Anomaly`, `Data_Exfiltration`, `Sql_Injection`, `Sql_Injection_Vulnerability` and `Unsafe_Action"`,.
func (o SqlServerThreatDetectionPolicyOutput) DisabledAlerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SqlServerThreatDetectionPolicy) []string { return v.DisabledAlerts }).(pulumi.StringArrayOutput)
}

// Should the account administrators be emailed when this alert is triggered?
func (o SqlServerThreatDetectionPolicyOutput) EmailAccountAdmins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlServerThreatDetectionPolicy) *bool { return v.EmailAccountAdmins }).(pulumi.BoolPtrOutput)
}

// A list of email addresses which alerts should be sent to.
func (o SqlServerThreatDetectionPolicyOutput) EmailAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SqlServerThreatDetectionPolicy) []string { return v.EmailAddresses }).(pulumi.StringArrayOutput)
}

// Specifies the number of days to keep in the Threat Detection audit logs.
func (o SqlServerThreatDetectionPolicyOutput) RetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SqlServerThreatDetectionPolicy) *int { return v.RetentionDays }).(pulumi.IntPtrOutput)
}

// The State of the Policy. Possible values are `Disabled`, `Enabled` and `New`. Defaults to `Disabled`.
func (o SqlServerThreatDetectionPolicyOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerThreatDetectionPolicy) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Specifies the identifier key of the Threat Detection audit storage account. Required if `state` is `Enabled`.
func (o SqlServerThreatDetectionPolicyOutput) StorageAccountAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerThreatDetectionPolicy) *string { return v.StorageAccountAccessKey }).(pulumi.StringPtrOutput)
}

// Specifies the blob storage endpoint (e.g. <https://example.blob.core.windows.net>). This blob storage will hold all Threat Detection audit logs. Required if `state` is `Enabled`.
func (o SqlServerThreatDetectionPolicyOutput) StorageEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerThreatDetectionPolicy) *string { return v.StorageEndpoint }).(pulumi.StringPtrOutput)
}

type SqlServerThreatDetectionPolicyPtrOutput struct{ *pulumi.OutputState }

func (SqlServerThreatDetectionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlServerThreatDetectionPolicy)(nil)).Elem()
}

func (o SqlServerThreatDetectionPolicyPtrOutput) ToSqlServerThreatDetectionPolicyPtrOutput() SqlServerThreatDetectionPolicyPtrOutput {
	return o
}

func (o SqlServerThreatDetectionPolicyPtrOutput) ToSqlServerThreatDetectionPolicyPtrOutputWithContext(ctx context.Context) SqlServerThreatDetectionPolicyPtrOutput {
	return o
}

func (o SqlServerThreatDetectionPolicyPtrOutput) Elem() SqlServerThreatDetectionPolicyOutput {
	return o.ApplyT(func(v *SqlServerThreatDetectionPolicy) SqlServerThreatDetectionPolicy {
		if v != nil {
			return *v
		}
		var ret SqlServerThreatDetectionPolicy
		return ret
	}).(SqlServerThreatDetectionPolicyOutput)
}

// Specifies a list of alerts which should be disabled. Possible values include `Access_Anomaly`, `Data_Exfiltration`, `Sql_Injection`, `Sql_Injection_Vulnerability` and `Unsafe_Action"`,.
func (o SqlServerThreatDetectionPolicyPtrOutput) DisabledAlerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SqlServerThreatDetectionPolicy) []string {
		if v == nil {
			return nil
		}
		return v.DisabledAlerts
	}).(pulumi.StringArrayOutput)
}

// Should the account administrators be emailed when this alert is triggered?
func (o SqlServerThreatDetectionPolicyPtrOutput) EmailAccountAdmins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlServerThreatDetectionPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.EmailAccountAdmins
	}).(pulumi.BoolPtrOutput)
}

// A list of email addresses which alerts should be sent to.
func (o SqlServerThreatDetectionPolicyPtrOutput) EmailAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SqlServerThreatDetectionPolicy) []string {
		if v == nil {
			return nil
		}
		return v.EmailAddresses
	}).(pulumi.StringArrayOutput)
}

// Specifies the number of days to keep in the Threat Detection audit logs.
func (o SqlServerThreatDetectionPolicyPtrOutput) RetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SqlServerThreatDetectionPolicy) *int {
		if v == nil {
			return nil
		}
		return v.RetentionDays
	}).(pulumi.IntPtrOutput)
}

// The State of the Policy. Possible values are `Disabled`, `Enabled` and `New`. Defaults to `Disabled`.
func (o SqlServerThreatDetectionPolicyPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlServerThreatDetectionPolicy) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// Specifies the identifier key of the Threat Detection audit storage account. Required if `state` is `Enabled`.
func (o SqlServerThreatDetectionPolicyPtrOutput) StorageAccountAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlServerThreatDetectionPolicy) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountAccessKey
	}).(pulumi.StringPtrOutput)
}

// Specifies the blob storage endpoint (e.g. <https://example.blob.core.windows.net>). This blob storage will hold all Threat Detection audit logs. Required if `state` is `Enabled`.
func (o SqlServerThreatDetectionPolicyPtrOutput) StorageEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlServerThreatDetectionPolicy) *string {
		if v == nil {
			return nil
		}
		return v.StorageEndpoint
	}).(pulumi.StringPtrOutput)
}

type GetServerIdentity struct {
	// The Principal ID associated with this Managed Service Identity.
	PrincipalId string `pulumi:"principalId"`
	// The Tenant ID associated with this Managed Service Identity.
	TenantId string `pulumi:"tenantId"`
	// The identity type of this Managed Service Identity.
	Type string `pulumi:"type"`
}

// GetServerIdentityInput is an input type that accepts GetServerIdentityArgs and GetServerIdentityOutput values.
// You can construct a concrete instance of `GetServerIdentityInput` via:
//
//	GetServerIdentityArgs{...}
type GetServerIdentityInput interface {
	pulumi.Input

	ToGetServerIdentityOutput() GetServerIdentityOutput
	ToGetServerIdentityOutputWithContext(context.Context) GetServerIdentityOutput
}

type GetServerIdentityArgs struct {
	// The Principal ID associated with this Managed Service Identity.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The Tenant ID associated with this Managed Service Identity.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The identity type of this Managed Service Identity.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetServerIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerIdentity)(nil)).Elem()
}

func (i GetServerIdentityArgs) ToGetServerIdentityOutput() GetServerIdentityOutput {
	return i.ToGetServerIdentityOutputWithContext(context.Background())
}

func (i GetServerIdentityArgs) ToGetServerIdentityOutputWithContext(ctx context.Context) GetServerIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerIdentityOutput)
}

// GetServerIdentityArrayInput is an input type that accepts GetServerIdentityArray and GetServerIdentityArrayOutput values.
// You can construct a concrete instance of `GetServerIdentityArrayInput` via:
//
//	GetServerIdentityArray{ GetServerIdentityArgs{...} }
type GetServerIdentityArrayInput interface {
	pulumi.Input

	ToGetServerIdentityArrayOutput() GetServerIdentityArrayOutput
	ToGetServerIdentityArrayOutputWithContext(context.Context) GetServerIdentityArrayOutput
}

type GetServerIdentityArray []GetServerIdentityInput

func (GetServerIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerIdentity)(nil)).Elem()
}

func (i GetServerIdentityArray) ToGetServerIdentityArrayOutput() GetServerIdentityArrayOutput {
	return i.ToGetServerIdentityArrayOutputWithContext(context.Background())
}

func (i GetServerIdentityArray) ToGetServerIdentityArrayOutputWithContext(ctx context.Context) GetServerIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerIdentityArrayOutput)
}

type GetServerIdentityOutput struct{ *pulumi.OutputState }

func (GetServerIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerIdentity)(nil)).Elem()
}

func (o GetServerIdentityOutput) ToGetServerIdentityOutput() GetServerIdentityOutput {
	return o
}

func (o GetServerIdentityOutput) ToGetServerIdentityOutputWithContext(ctx context.Context) GetServerIdentityOutput {
	return o
}

// The Principal ID associated with this Managed Service Identity.
func (o GetServerIdentityOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerIdentity) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The Tenant ID associated with this Managed Service Identity.
func (o GetServerIdentityOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerIdentity) string { return v.TenantId }).(pulumi.StringOutput)
}

// The identity type of this Managed Service Identity.
func (o GetServerIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type GetServerIdentityArrayOutput struct{ *pulumi.OutputState }

func (GetServerIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerIdentity)(nil)).Elem()
}

func (o GetServerIdentityArrayOutput) ToGetServerIdentityArrayOutput() GetServerIdentityArrayOutput {
	return o
}

func (o GetServerIdentityArrayOutput) ToGetServerIdentityArrayOutputWithContext(ctx context.Context) GetServerIdentityArrayOutput {
	return o
}

func (o GetServerIdentityArrayOutput) Index(i pulumi.IntInput) GetServerIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerIdentity {
		return vs[0].([]GetServerIdentity)[vs[1].(int)]
	}).(GetServerIdentityOutput)
}

type GetSqlManagedInstanceIdentity struct {
	// The Principal ID for the Service Principal associated with the Identity of this SQL Managed Instance.
	PrincipalId string `pulumi:"principalId"`
	// The Tenant ID for the Service Principal associated with the Identity of this SQL Managed Instance.
	TenantId string `pulumi:"tenantId"`
	Type     string `pulumi:"type"`
}

// GetSqlManagedInstanceIdentityInput is an input type that accepts GetSqlManagedInstanceIdentityArgs and GetSqlManagedInstanceIdentityOutput values.
// You can construct a concrete instance of `GetSqlManagedInstanceIdentityInput` via:
//
//	GetSqlManagedInstanceIdentityArgs{...}
type GetSqlManagedInstanceIdentityInput interface {
	pulumi.Input

	ToGetSqlManagedInstanceIdentityOutput() GetSqlManagedInstanceIdentityOutput
	ToGetSqlManagedInstanceIdentityOutputWithContext(context.Context) GetSqlManagedInstanceIdentityOutput
}

type GetSqlManagedInstanceIdentityArgs struct {
	// The Principal ID for the Service Principal associated with the Identity of this SQL Managed Instance.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The Tenant ID for the Service Principal associated with the Identity of this SQL Managed Instance.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	Type     pulumi.StringInput `pulumi:"type"`
}

func (GetSqlManagedInstanceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSqlManagedInstanceIdentity)(nil)).Elem()
}

func (i GetSqlManagedInstanceIdentityArgs) ToGetSqlManagedInstanceIdentityOutput() GetSqlManagedInstanceIdentityOutput {
	return i.ToGetSqlManagedInstanceIdentityOutputWithContext(context.Background())
}

func (i GetSqlManagedInstanceIdentityArgs) ToGetSqlManagedInstanceIdentityOutputWithContext(ctx context.Context) GetSqlManagedInstanceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSqlManagedInstanceIdentityOutput)
}

// GetSqlManagedInstanceIdentityArrayInput is an input type that accepts GetSqlManagedInstanceIdentityArray and GetSqlManagedInstanceIdentityArrayOutput values.
// You can construct a concrete instance of `GetSqlManagedInstanceIdentityArrayInput` via:
//
//	GetSqlManagedInstanceIdentityArray{ GetSqlManagedInstanceIdentityArgs{...} }
type GetSqlManagedInstanceIdentityArrayInput interface {
	pulumi.Input

	ToGetSqlManagedInstanceIdentityArrayOutput() GetSqlManagedInstanceIdentityArrayOutput
	ToGetSqlManagedInstanceIdentityArrayOutputWithContext(context.Context) GetSqlManagedInstanceIdentityArrayOutput
}

type GetSqlManagedInstanceIdentityArray []GetSqlManagedInstanceIdentityInput

func (GetSqlManagedInstanceIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSqlManagedInstanceIdentity)(nil)).Elem()
}

func (i GetSqlManagedInstanceIdentityArray) ToGetSqlManagedInstanceIdentityArrayOutput() GetSqlManagedInstanceIdentityArrayOutput {
	return i.ToGetSqlManagedInstanceIdentityArrayOutputWithContext(context.Background())
}

func (i GetSqlManagedInstanceIdentityArray) ToGetSqlManagedInstanceIdentityArrayOutputWithContext(ctx context.Context) GetSqlManagedInstanceIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSqlManagedInstanceIdentityArrayOutput)
}

type GetSqlManagedInstanceIdentityOutput struct{ *pulumi.OutputState }

func (GetSqlManagedInstanceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSqlManagedInstanceIdentity)(nil)).Elem()
}

func (o GetSqlManagedInstanceIdentityOutput) ToGetSqlManagedInstanceIdentityOutput() GetSqlManagedInstanceIdentityOutput {
	return o
}

func (o GetSqlManagedInstanceIdentityOutput) ToGetSqlManagedInstanceIdentityOutputWithContext(ctx context.Context) GetSqlManagedInstanceIdentityOutput {
	return o
}

// The Principal ID for the Service Principal associated with the Identity of this SQL Managed Instance.
func (o GetSqlManagedInstanceIdentityOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceIdentity) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The Tenant ID for the Service Principal associated with the Identity of this SQL Managed Instance.
func (o GetSqlManagedInstanceIdentityOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceIdentity) string { return v.TenantId }).(pulumi.StringOutput)
}

func (o GetSqlManagedInstanceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlManagedInstanceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type GetSqlManagedInstanceIdentityArrayOutput struct{ *pulumi.OutputState }

func (GetSqlManagedInstanceIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSqlManagedInstanceIdentity)(nil)).Elem()
}

func (o GetSqlManagedInstanceIdentityArrayOutput) ToGetSqlManagedInstanceIdentityArrayOutput() GetSqlManagedInstanceIdentityArrayOutput {
	return o
}

func (o GetSqlManagedInstanceIdentityArrayOutput) ToGetSqlManagedInstanceIdentityArrayOutputWithContext(ctx context.Context) GetSqlManagedInstanceIdentityArrayOutput {
	return o
}

func (o GetSqlManagedInstanceIdentityArrayOutput) Index(i pulumi.IntInput) GetSqlManagedInstanceIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSqlManagedInstanceIdentity {
		return vs[0].([]GetSqlManagedInstanceIdentity)[vs[1].(int)]
	}).(GetSqlManagedInstanceIdentityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseImportInput)(nil)).Elem(), DatabaseImportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseImportPtrInput)(nil)).Elem(), DatabaseImportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseThreatDetectionPolicyInput)(nil)).Elem(), DatabaseThreatDetectionPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseThreatDetectionPolicyPtrInput)(nil)).Elem(), DatabaseThreatDetectionPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FailoverGroupPartnerServerInput)(nil)).Elem(), FailoverGroupPartnerServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FailoverGroupPartnerServerArrayInput)(nil)).Elem(), FailoverGroupPartnerServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FailoverGroupReadWriteEndpointFailoverPolicyInput)(nil)).Elem(), FailoverGroupReadWriteEndpointFailoverPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FailoverGroupReadWriteEndpointFailoverPolicyPtrInput)(nil)).Elem(), FailoverGroupReadWriteEndpointFailoverPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FailoverGroupReadonlyEndpointFailoverPolicyInput)(nil)).Elem(), FailoverGroupReadonlyEndpointFailoverPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FailoverGroupReadonlyEndpointFailoverPolicyPtrInput)(nil)).Elem(), FailoverGroupReadonlyEndpointFailoverPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedInstanceFailoverGroupPartnerRegionInput)(nil)).Elem(), ManagedInstanceFailoverGroupPartnerRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedInstanceFailoverGroupPartnerRegionArrayInput)(nil)).Elem(), ManagedInstanceFailoverGroupPartnerRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyInput)(nil)).Elem(), ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrInput)(nil)).Elem(), ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedInstanceIdentityInput)(nil)).Elem(), ManagedInstanceIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedInstanceIdentityPtrInput)(nil)).Elem(), ManagedInstanceIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlServerIdentityInput)(nil)).Elem(), SqlServerIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlServerIdentityPtrInput)(nil)).Elem(), SqlServerIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlServerThreatDetectionPolicyInput)(nil)).Elem(), SqlServerThreatDetectionPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlServerThreatDetectionPolicyPtrInput)(nil)).Elem(), SqlServerThreatDetectionPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerIdentityInput)(nil)).Elem(), GetServerIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerIdentityArrayInput)(nil)).Elem(), GetServerIdentityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSqlManagedInstanceIdentityInput)(nil)).Elem(), GetSqlManagedInstanceIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSqlManagedInstanceIdentityArrayInput)(nil)).Elem(), GetSqlManagedInstanceIdentityArray{})
	pulumi.RegisterOutputType(DatabaseImportOutput{})
	pulumi.RegisterOutputType(DatabaseImportPtrOutput{})
	pulumi.RegisterOutputType(DatabaseThreatDetectionPolicyOutput{})
	pulumi.RegisterOutputType(DatabaseThreatDetectionPolicyPtrOutput{})
	pulumi.RegisterOutputType(FailoverGroupPartnerServerOutput{})
	pulumi.RegisterOutputType(FailoverGroupPartnerServerArrayOutput{})
	pulumi.RegisterOutputType(FailoverGroupReadWriteEndpointFailoverPolicyOutput{})
	pulumi.RegisterOutputType(FailoverGroupReadWriteEndpointFailoverPolicyPtrOutput{})
	pulumi.RegisterOutputType(FailoverGroupReadonlyEndpointFailoverPolicyOutput{})
	pulumi.RegisterOutputType(FailoverGroupReadonlyEndpointFailoverPolicyPtrOutput{})
	pulumi.RegisterOutputType(ManagedInstanceFailoverGroupPartnerRegionOutput{})
	pulumi.RegisterOutputType(ManagedInstanceFailoverGroupPartnerRegionArrayOutput{})
	pulumi.RegisterOutputType(ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyOutput{})
	pulumi.RegisterOutputType(ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrOutput{})
	pulumi.RegisterOutputType(ManagedInstanceIdentityOutput{})
	pulumi.RegisterOutputType(ManagedInstanceIdentityPtrOutput{})
	pulumi.RegisterOutputType(SqlServerIdentityOutput{})
	pulumi.RegisterOutputType(SqlServerIdentityPtrOutput{})
	pulumi.RegisterOutputType(SqlServerThreatDetectionPolicyOutput{})
	pulumi.RegisterOutputType(SqlServerThreatDetectionPolicyPtrOutput{})
	pulumi.RegisterOutputType(GetServerIdentityOutput{})
	pulumi.RegisterOutputType(GetServerIdentityArrayOutput{})
	pulumi.RegisterOutputType(GetSqlManagedInstanceIdentityOutput{})
	pulumi.RegisterOutputType(GetSqlManagedInstanceIdentityArrayOutput{})
}
