// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sql

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a SQL Azure Database Server.
// 
// > **Note:** All arguments including the administrator login and password will be stored in the raw state as plain-text.
// [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/sql_server.html.markdown.
type SqlServer struct {
	s *pulumi.ResourceState
}

// NewSqlServer registers a new resource with the given unique name, arguments, and options.
func NewSqlServer(ctx *pulumi.Context,
	name string, args *SqlServerArgs, opts ...pulumi.ResourceOpt) (*SqlServer, error) {
	if args == nil || args.AdministratorLogin == nil {
		return nil, errors.New("missing required argument 'AdministratorLogin'")
	}
	if args == nil || args.AdministratorLoginPassword == nil {
		return nil, errors.New("missing required argument 'AdministratorLoginPassword'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.Version == nil {
		return nil, errors.New("missing required argument 'Version'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["administratorLogin"] = nil
		inputs["administratorLoginPassword"] = nil
		inputs["location"] = nil
		inputs["name"] = nil
		inputs["resourceGroupName"] = nil
		inputs["tags"] = nil
		inputs["version"] = nil
	} else {
		inputs["administratorLogin"] = args.AdministratorLogin
		inputs["administratorLoginPassword"] = args.AdministratorLoginPassword
		inputs["location"] = args.Location
		inputs["name"] = args.Name
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["tags"] = args.Tags
		inputs["version"] = args.Version
	}
	inputs["fullyQualifiedDomainName"] = nil
	s, err := ctx.RegisterResource("azure:sql/sqlServer:SqlServer", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SqlServer{s: s}, nil
}

// GetSqlServer gets an existing SqlServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlServer(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SqlServerState, opts ...pulumi.ResourceOpt) (*SqlServer, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["administratorLogin"] = state.AdministratorLogin
		inputs["administratorLoginPassword"] = state.AdministratorLoginPassword
		inputs["fullyQualifiedDomainName"] = state.FullyQualifiedDomainName
		inputs["location"] = state.Location
		inputs["name"] = state.Name
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["tags"] = state.Tags
		inputs["version"] = state.Version
	}
	s, err := ctx.ReadResource("azure:sql/sqlServer:SqlServer", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SqlServer{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SqlServer) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SqlServer) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The administrator login name for the new server. Changing this forces a new resource to be created.
func (r *SqlServer) AdministratorLogin() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["administratorLogin"])
}

// The password associated with the `administratorLogin` user. Needs to comply with Azure's [Password Policy](https://msdn.microsoft.com/library/ms161959.aspx)
func (r *SqlServer) AdministratorLoginPassword() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["administratorLoginPassword"])
}

// The fully qualified domain name of the Azure SQL Server (e.g. myServerName.database.windows.net)
func (r *SqlServer) FullyQualifiedDomainName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["fullyQualifiedDomainName"])
}

// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
func (r *SqlServer) Location() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["location"])
}

// The name of the SQL Server. This needs to be globally unique within Azure.
func (r *SqlServer) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The name of the resource group in which to create the SQL Server.
func (r *SqlServer) ResourceGroupName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// A mapping of tags to assign to the resource.
func (r *SqlServer) Tags() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["tags"])
}

// The version for the new server. Valid values are: 2.0 (for v11 server) and 12.0 (for v12 server).
func (r *SqlServer) Version() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["version"])
}

// Input properties used for looking up and filtering SqlServer resources.
type SqlServerState struct {
	// The administrator login name for the new server. Changing this forces a new resource to be created.
	AdministratorLogin interface{}
	// The password associated with the `administratorLogin` user. Needs to comply with Azure's [Password Policy](https://msdn.microsoft.com/library/ms161959.aspx)
	AdministratorLoginPassword interface{}
	// The fully qualified domain name of the Azure SQL Server (e.g. myServerName.database.windows.net)
	FullyQualifiedDomainName interface{}
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location interface{}
	// The name of the SQL Server. This needs to be globally unique within Azure.
	Name interface{}
	// The name of the resource group in which to create the SQL Server.
	ResourceGroupName interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// The version for the new server. Valid values are: 2.0 (for v11 server) and 12.0 (for v12 server).
	Version interface{}
}

// The set of arguments for constructing a SqlServer resource.
type SqlServerArgs struct {
	// The administrator login name for the new server. Changing this forces a new resource to be created.
	AdministratorLogin interface{}
	// The password associated with the `administratorLogin` user. Needs to comply with Azure's [Password Policy](https://msdn.microsoft.com/library/ms161959.aspx)
	AdministratorLoginPassword interface{}
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location interface{}
	// The name of the SQL Server. This needs to be globally unique within Azure.
	Name interface{}
	// The name of the resource group in which to create the SQL Server.
	ResourceGroupName interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// The version for the new server. Valid values are: 2.0 (for v11 server) and 12.0 (for v12 server).
	Version interface{}
}
