// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sql

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Create a failover group of databases on a collection of Azure SQL servers.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/sql_failover_group.html.markdown.
type FailoverGroup struct {
	s *pulumi.ResourceState
}

// NewFailoverGroup registers a new resource with the given unique name, arguments, and options.
func NewFailoverGroup(ctx *pulumi.Context,
	name string, args *FailoverGroupArgs, opts ...pulumi.ResourceOpt) (*FailoverGroup, error) {
	if args == nil || args.PartnerServers == nil {
		return nil, errors.New("missing required argument 'PartnerServers'")
	}
	if args == nil || args.ReadWriteEndpointFailoverPolicy == nil {
		return nil, errors.New("missing required argument 'ReadWriteEndpointFailoverPolicy'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.ServerName == nil {
		return nil, errors.New("missing required argument 'ServerName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["databases"] = nil
		inputs["name"] = nil
		inputs["partnerServers"] = nil
		inputs["readWriteEndpointFailoverPolicy"] = nil
		inputs["readonlyEndpointFailoverPolicy"] = nil
		inputs["resourceGroupName"] = nil
		inputs["serverName"] = nil
		inputs["tags"] = nil
	} else {
		inputs["databases"] = args.Databases
		inputs["name"] = args.Name
		inputs["partnerServers"] = args.PartnerServers
		inputs["readWriteEndpointFailoverPolicy"] = args.ReadWriteEndpointFailoverPolicy
		inputs["readonlyEndpointFailoverPolicy"] = args.ReadonlyEndpointFailoverPolicy
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["serverName"] = args.ServerName
		inputs["tags"] = args.Tags
	}
	inputs["location"] = nil
	inputs["role"] = nil
	s, err := ctx.RegisterResource("azure:sql/failoverGroup:FailoverGroup", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &FailoverGroup{s: s}, nil
}

// GetFailoverGroup gets an existing FailoverGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFailoverGroup(ctx *pulumi.Context,
	name string, id pulumi.ID, state *FailoverGroupState, opts ...pulumi.ResourceOpt) (*FailoverGroup, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["databases"] = state.Databases
		inputs["location"] = state.Location
		inputs["name"] = state.Name
		inputs["partnerServers"] = state.PartnerServers
		inputs["readWriteEndpointFailoverPolicy"] = state.ReadWriteEndpointFailoverPolicy
		inputs["readonlyEndpointFailoverPolicy"] = state.ReadonlyEndpointFailoverPolicy
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["role"] = state.Role
		inputs["serverName"] = state.ServerName
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("azure:sql/failoverGroup:FailoverGroup", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &FailoverGroup{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *FailoverGroup) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *FailoverGroup) ID() pulumi.IDOutput {
	return r.s.ID()
}

// A list of database ids to add to the failover group
func (r *FailoverGroup) Databases() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["databases"])
}

// the location of the failover group.
func (r *FailoverGroup) Location() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["location"])
}

// The name of the failover group. Changing this forces a new resource to be created.
func (r *FailoverGroup) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// A list of secondary servers as documented below
func (r *FailoverGroup) PartnerServers() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["partnerServers"])
}

// A read/write policy as documented below
func (r *FailoverGroup) ReadWriteEndpointFailoverPolicy() pulumi.Output {
	return r.s.State["readWriteEndpointFailoverPolicy"]
}

// a read-only policy as documented below
func (r *FailoverGroup) ReadonlyEndpointFailoverPolicy() pulumi.Output {
	return r.s.State["readonlyEndpointFailoverPolicy"]
}

// The name of the resource group containing the SQL server
func (r *FailoverGroup) ResourceGroupName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// local replication role of the failover group instance.
func (r *FailoverGroup) Role() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["role"])
}

// The name of the primary SQL server. Changing this forces a new resource to be created.
func (r *FailoverGroup) ServerName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["serverName"])
}

// A mapping of tags to assign to the resource.
func (r *FailoverGroup) Tags() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering FailoverGroup resources.
type FailoverGroupState struct {
	// A list of database ids to add to the failover group
	Databases interface{}
	// the location of the failover group.
	Location interface{}
	// The name of the failover group. Changing this forces a new resource to be created.
	Name interface{}
	// A list of secondary servers as documented below
	PartnerServers interface{}
	// A read/write policy as documented below
	ReadWriteEndpointFailoverPolicy interface{}
	// a read-only policy as documented below
	ReadonlyEndpointFailoverPolicy interface{}
	// The name of the resource group containing the SQL server
	ResourceGroupName interface{}
	// local replication role of the failover group instance.
	Role interface{}
	// The name of the primary SQL server. Changing this forces a new resource to be created.
	ServerName interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
}

// The set of arguments for constructing a FailoverGroup resource.
type FailoverGroupArgs struct {
	// A list of database ids to add to the failover group
	Databases interface{}
	// The name of the failover group. Changing this forces a new resource to be created.
	Name interface{}
	// A list of secondary servers as documented below
	PartnerServers interface{}
	// A read/write policy as documented below
	ReadWriteEndpointFailoverPolicy interface{}
	// a read-only policy as documented below
	ReadonlyEndpointFailoverPolicy interface{}
	// The name of the resource group containing the SQL server
	ResourceGroupName interface{}
	// The name of the primary SQL server. Changing this forces a new resource to be created.
	ServerName interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
}
