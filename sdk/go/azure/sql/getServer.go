// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing SQL Azure Database Server.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/sql"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		example, err := sql.GetServer(ctx, &sql.GetServerArgs{
// 			Name:              "examplesqlservername",
// 			ResourceGroupName: "example-resources",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("sqlServerId", example.Id)
// 		return nil
// 	})
// }
// ```
func GetServer(ctx *pulumi.Context, args *GetServerArgs, opts ...pulumi.InvokeOption) (*GetServerResult, error) {
	var rv GetServerResult
	err := ctx.Invoke("azure:sql/getServer:getServer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getServer.
type GetServerArgs struct {
	// The name of the SQL Server.
	Name string `pulumi:"name"`
	// Specifies the name of the Resource Group where the SQL Server exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getServer.
type GetServerResult struct {
	// The administrator username of the SQL Server.
	AdministratorLogin string `pulumi:"administratorLogin"`
	// The fully qualified domain name of the SQL Server.
	Fqdn string `pulumi:"fqdn"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// An `identity` block as defined below.
	Identities []GetServerIdentity `pulumi:"identities"`
	// The location of the Resource Group in which the SQL Server exists.
	Location          string `pulumi:"location"`
	Name              string `pulumi:"name"`
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags assigned to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The version of the SQL Server.
	Version string `pulumi:"version"`
}

func GetServerOutput(ctx *pulumi.Context, args GetServerOutputArgs, opts ...pulumi.InvokeOption) GetServerResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetServerResult, error) {
			args := v.(GetServerArgs)
			r, err := GetServer(ctx, &args, opts...)
			return *r, err
		}).(GetServerResultOutput)
}

// A collection of arguments for invoking getServer.
type GetServerOutputArgs struct {
	// The name of the SQL Server.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the name of the Resource Group where the SQL Server exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (GetServerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerArgs)(nil)).Elem()
}

// A collection of values returned by getServer.
type GetServerResultOutput struct{ *pulumi.OutputState }

func (GetServerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerResult)(nil)).Elem()
}

func (o GetServerResultOutput) ToGetServerResultOutput() GetServerResultOutput {
	return o
}

func (o GetServerResultOutput) ToGetServerResultOutputWithContext(ctx context.Context) GetServerResultOutput {
	return o
}

// The administrator username of the SQL Server.
func (o GetServerResultOutput) AdministratorLogin() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerResult) string { return v.AdministratorLogin }).(pulumi.StringOutput)
}

// The fully qualified domain name of the SQL Server.
func (o GetServerResultOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerResult) string { return v.Fqdn }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetServerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerResult) string { return v.Id }).(pulumi.StringOutput)
}

// An `identity` block as defined below.
func (o GetServerResultOutput) Identities() GetServerIdentityArrayOutput {
	return o.ApplyT(func(v GetServerResult) []GetServerIdentity { return v.Identities }).(GetServerIdentityArrayOutput)
}

// The location of the Resource Group in which the SQL Server exists.
func (o GetServerResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o GetServerResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetServerResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags assigned to the resource.
func (o GetServerResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetServerResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The version of the SQL Server.
func (o GetServerResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetServerResultOutput{})
}
