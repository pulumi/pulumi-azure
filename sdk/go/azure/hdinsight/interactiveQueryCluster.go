// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package hdinsight

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a HDInsight Interactive Query Cluster.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/hdinsight"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/storage"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West Europe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
// 			ResourceGroupName:      exampleResourceGroup.Name,
// 			Location:               exampleResourceGroup.Location,
// 			AccountTier:            pulumi.String("Standard"),
// 			AccountReplicationType: pulumi.String("LRS"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleContainer, err := storage.NewContainer(ctx, "exampleContainer", &storage.ContainerArgs{
// 			StorageAccountName:  exampleAccount.Name,
// 			ContainerAccessType: pulumi.String("private"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = hdinsight.NewInteractiveQueryCluster(ctx, "exampleInteractiveQueryCluster", &hdinsight.InteractiveQueryClusterArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			Location:          exampleResourceGroup.Location,
// 			ClusterVersion:    pulumi.String("3.6"),
// 			Tier:              pulumi.String("Standard"),
// 			ComponentVersion: &hdinsight.InteractiveQueryClusterComponentVersionArgs{
// 				InteractiveHive: pulumi.String("2.1"),
// 			},
// 			Gateway: &hdinsight.InteractiveQueryClusterGatewayArgs{
// 				Enabled:  pulumi.Bool(true),
// 				Username: pulumi.String("acctestusrgw"),
// 				Password: pulumi.String("Password!"),
// 			},
// 			StorageAccounts: hdinsight.InteractiveQueryClusterStorageAccountArray{
// 				&hdinsight.InteractiveQueryClusterStorageAccountArgs{
// 					StorageContainerId: exampleContainer.ID(),
// 					StorageAccountKey:  exampleAccount.PrimaryAccessKey,
// 					IsDefault:          pulumi.Bool(true),
// 				},
// 			},
// 			Roles: &hdinsight.InteractiveQueryClusterRolesArgs{
// 				HeadNode: &hdinsight.InteractiveQueryClusterRolesHeadNodeArgs{
// 					VmSize:   pulumi.String("Standard_D13_V2"),
// 					Username: pulumi.String("acctestusrvm"),
// 					Password: pulumi.String("AccTestvdSC4daf986!"),
// 				},
// 				WorkerNode: &hdinsight.InteractiveQueryClusterRolesWorkerNodeArgs{
// 					VmSize:              pulumi.String("Standard_D14_V2"),
// 					Username:            pulumi.String("acctestusrvm"),
// 					Password:            pulumi.String("AccTestvdSC4daf986!"),
// 					TargetInstanceCount: pulumi.Int(3),
// 				},
// 				ZookeeperNode: &hdinsight.InteractiveQueryClusterRolesZookeeperNodeArgs{
// 					VmSize:   pulumi.String("Standard_A4_V2"),
// 					Username: pulumi.String("acctestusrvm"),
// 					Password: pulumi.String("AccTestvdSC4daf986!"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// HDInsight Interactive Query Clusters can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:hdinsight/interactiveQueryCluster:InteractiveQueryCluster example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.HDInsight/clusters/cluster1
// ```
type InteractiveQueryCluster struct {
	pulumi.CustomResourceState

	// Specifies the Version of HDInsights which should be used for this Cluster. Changing this forces a new resource to be created.
	ClusterVersion pulumi.StringOutput `pulumi:"clusterVersion"`
	// A `componentVersion` block as defined below.
	ComponentVersion InteractiveQueryClusterComponentVersionOutput `pulumi:"componentVersion"`
	// A `gateway` block as defined below.
	Gateway InteractiveQueryClusterGatewayOutput `pulumi:"gateway"`
	// The HTTPS Connectivity Endpoint for this HDInsight Interactive Query Cluster.
	HttpsEndpoint pulumi.StringOutput `pulumi:"httpsEndpoint"`
	// Specifies the Azure Region which this HDInsight Interactive Query Cluster should exist. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// A `metastores` block as defined below.
	Metastores InteractiveQueryClusterMetastoresPtrOutput `pulumi:"metastores"`
	// A `monitor` block as defined below.
	Monitor InteractiveQueryClusterMonitorPtrOutput `pulumi:"monitor"`
	// Specifies the name for this HDInsight Interactive Query Cluster. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the name of the Resource Group in which this HDInsight Interactive Query Cluster should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A `roles` block as defined below.
	Roles InteractiveQueryClusterRolesOutput `pulumi:"roles"`
	// The SSH Connectivity Endpoint for this HDInsight Interactive Query Cluster.
	SshEndpoint pulumi.StringOutput `pulumi:"sshEndpoint"`
	// A `storageAccountGen2` block as defined below.
	StorageAccountGen2 InteractiveQueryClusterStorageAccountGen2PtrOutput `pulumi:"storageAccountGen2"`
	// One or more `storageAccount` block as defined below.
	StorageAccounts InteractiveQueryClusterStorageAccountArrayOutput `pulumi:"storageAccounts"`
	// A map of Tags which should be assigned to this HDInsight Interactive Query Cluster.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies the Tier which should be used for this HDInsight Interactive Query Cluster. Possible values are `Standard` or `Premium`. Changing this forces a new resource to be created.
	Tier          pulumi.StringOutput    `pulumi:"tier"`
	TlsMinVersion pulumi.StringPtrOutput `pulumi:"tlsMinVersion"`
}

// NewInteractiveQueryCluster registers a new resource with the given unique name, arguments, and options.
func NewInteractiveQueryCluster(ctx *pulumi.Context,
	name string, args *InteractiveQueryClusterArgs, opts ...pulumi.ResourceOption) (*InteractiveQueryCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterVersion == nil {
		return nil, errors.New("invalid value for required argument 'ClusterVersion'")
	}
	if args.ComponentVersion == nil {
		return nil, errors.New("invalid value for required argument 'ComponentVersion'")
	}
	if args.Gateway == nil {
		return nil, errors.New("invalid value for required argument 'Gateway'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Roles == nil {
		return nil, errors.New("invalid value for required argument 'Roles'")
	}
	if args.Tier == nil {
		return nil, errors.New("invalid value for required argument 'Tier'")
	}
	var resource InteractiveQueryCluster
	err := ctx.RegisterResource("azure:hdinsight/interactiveQueryCluster:InteractiveQueryCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInteractiveQueryCluster gets an existing InteractiveQueryCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInteractiveQueryCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InteractiveQueryClusterState, opts ...pulumi.ResourceOption) (*InteractiveQueryCluster, error) {
	var resource InteractiveQueryCluster
	err := ctx.ReadResource("azure:hdinsight/interactiveQueryCluster:InteractiveQueryCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InteractiveQueryCluster resources.
type interactiveQueryClusterState struct {
	// Specifies the Version of HDInsights which should be used for this Cluster. Changing this forces a new resource to be created.
	ClusterVersion *string `pulumi:"clusterVersion"`
	// A `componentVersion` block as defined below.
	ComponentVersion *InteractiveQueryClusterComponentVersion `pulumi:"componentVersion"`
	// A `gateway` block as defined below.
	Gateway *InteractiveQueryClusterGateway `pulumi:"gateway"`
	// The HTTPS Connectivity Endpoint for this HDInsight Interactive Query Cluster.
	HttpsEndpoint *string `pulumi:"httpsEndpoint"`
	// Specifies the Azure Region which this HDInsight Interactive Query Cluster should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// A `metastores` block as defined below.
	Metastores *InteractiveQueryClusterMetastores `pulumi:"metastores"`
	// A `monitor` block as defined below.
	Monitor *InteractiveQueryClusterMonitor `pulumi:"monitor"`
	// Specifies the name for this HDInsight Interactive Query Cluster. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies the name of the Resource Group in which this HDInsight Interactive Query Cluster should exist. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A `roles` block as defined below.
	Roles *InteractiveQueryClusterRoles `pulumi:"roles"`
	// The SSH Connectivity Endpoint for this HDInsight Interactive Query Cluster.
	SshEndpoint *string `pulumi:"sshEndpoint"`
	// A `storageAccountGen2` block as defined below.
	StorageAccountGen2 *InteractiveQueryClusterStorageAccountGen2 `pulumi:"storageAccountGen2"`
	// One or more `storageAccount` block as defined below.
	StorageAccounts []InteractiveQueryClusterStorageAccount `pulumi:"storageAccounts"`
	// A map of Tags which should be assigned to this HDInsight Interactive Query Cluster.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the Tier which should be used for this HDInsight Interactive Query Cluster. Possible values are `Standard` or `Premium`. Changing this forces a new resource to be created.
	Tier          *string `pulumi:"tier"`
	TlsMinVersion *string `pulumi:"tlsMinVersion"`
}

type InteractiveQueryClusterState struct {
	// Specifies the Version of HDInsights which should be used for this Cluster. Changing this forces a new resource to be created.
	ClusterVersion pulumi.StringPtrInput
	// A `componentVersion` block as defined below.
	ComponentVersion InteractiveQueryClusterComponentVersionPtrInput
	// A `gateway` block as defined below.
	Gateway InteractiveQueryClusterGatewayPtrInput
	// The HTTPS Connectivity Endpoint for this HDInsight Interactive Query Cluster.
	HttpsEndpoint pulumi.StringPtrInput
	// Specifies the Azure Region which this HDInsight Interactive Query Cluster should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// A `metastores` block as defined below.
	Metastores InteractiveQueryClusterMetastoresPtrInput
	// A `monitor` block as defined below.
	Monitor InteractiveQueryClusterMonitorPtrInput
	// Specifies the name for this HDInsight Interactive Query Cluster. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies the name of the Resource Group in which this HDInsight Interactive Query Cluster should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A `roles` block as defined below.
	Roles InteractiveQueryClusterRolesPtrInput
	// The SSH Connectivity Endpoint for this HDInsight Interactive Query Cluster.
	SshEndpoint pulumi.StringPtrInput
	// A `storageAccountGen2` block as defined below.
	StorageAccountGen2 InteractiveQueryClusterStorageAccountGen2PtrInput
	// One or more `storageAccount` block as defined below.
	StorageAccounts InteractiveQueryClusterStorageAccountArrayInput
	// A map of Tags which should be assigned to this HDInsight Interactive Query Cluster.
	Tags pulumi.StringMapInput
	// Specifies the Tier which should be used for this HDInsight Interactive Query Cluster. Possible values are `Standard` or `Premium`. Changing this forces a new resource to be created.
	Tier          pulumi.StringPtrInput
	TlsMinVersion pulumi.StringPtrInput
}

func (InteractiveQueryClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*interactiveQueryClusterState)(nil)).Elem()
}

type interactiveQueryClusterArgs struct {
	// Specifies the Version of HDInsights which should be used for this Cluster. Changing this forces a new resource to be created.
	ClusterVersion string `pulumi:"clusterVersion"`
	// A `componentVersion` block as defined below.
	ComponentVersion InteractiveQueryClusterComponentVersion `pulumi:"componentVersion"`
	// A `gateway` block as defined below.
	Gateway InteractiveQueryClusterGateway `pulumi:"gateway"`
	// Specifies the Azure Region which this HDInsight Interactive Query Cluster should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// A `metastores` block as defined below.
	Metastores *InteractiveQueryClusterMetastores `pulumi:"metastores"`
	// A `monitor` block as defined below.
	Monitor *InteractiveQueryClusterMonitor `pulumi:"monitor"`
	// Specifies the name for this HDInsight Interactive Query Cluster. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies the name of the Resource Group in which this HDInsight Interactive Query Cluster should exist. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A `roles` block as defined below.
	Roles InteractiveQueryClusterRoles `pulumi:"roles"`
	// A `storageAccountGen2` block as defined below.
	StorageAccountGen2 *InteractiveQueryClusterStorageAccountGen2 `pulumi:"storageAccountGen2"`
	// One or more `storageAccount` block as defined below.
	StorageAccounts []InteractiveQueryClusterStorageAccount `pulumi:"storageAccounts"`
	// A map of Tags which should be assigned to this HDInsight Interactive Query Cluster.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the Tier which should be used for this HDInsight Interactive Query Cluster. Possible values are `Standard` or `Premium`. Changing this forces a new resource to be created.
	Tier          string  `pulumi:"tier"`
	TlsMinVersion *string `pulumi:"tlsMinVersion"`
}

// The set of arguments for constructing a InteractiveQueryCluster resource.
type InteractiveQueryClusterArgs struct {
	// Specifies the Version of HDInsights which should be used for this Cluster. Changing this forces a new resource to be created.
	ClusterVersion pulumi.StringInput
	// A `componentVersion` block as defined below.
	ComponentVersion InteractiveQueryClusterComponentVersionInput
	// A `gateway` block as defined below.
	Gateway InteractiveQueryClusterGatewayInput
	// Specifies the Azure Region which this HDInsight Interactive Query Cluster should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// A `metastores` block as defined below.
	Metastores InteractiveQueryClusterMetastoresPtrInput
	// A `monitor` block as defined below.
	Monitor InteractiveQueryClusterMonitorPtrInput
	// Specifies the name for this HDInsight Interactive Query Cluster. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies the name of the Resource Group in which this HDInsight Interactive Query Cluster should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A `roles` block as defined below.
	Roles InteractiveQueryClusterRolesInput
	// A `storageAccountGen2` block as defined below.
	StorageAccountGen2 InteractiveQueryClusterStorageAccountGen2PtrInput
	// One or more `storageAccount` block as defined below.
	StorageAccounts InteractiveQueryClusterStorageAccountArrayInput
	// A map of Tags which should be assigned to this HDInsight Interactive Query Cluster.
	Tags pulumi.StringMapInput
	// Specifies the Tier which should be used for this HDInsight Interactive Query Cluster. Possible values are `Standard` or `Premium`. Changing this forces a new resource to be created.
	Tier          pulumi.StringInput
	TlsMinVersion pulumi.StringPtrInput
}

func (InteractiveQueryClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*interactiveQueryClusterArgs)(nil)).Elem()
}

type InteractiveQueryClusterInput interface {
	pulumi.Input

	ToInteractiveQueryClusterOutput() InteractiveQueryClusterOutput
	ToInteractiveQueryClusterOutputWithContext(ctx context.Context) InteractiveQueryClusterOutput
}

func (*InteractiveQueryCluster) ElementType() reflect.Type {
	return reflect.TypeOf((*InteractiveQueryCluster)(nil))
}

func (i *InteractiveQueryCluster) ToInteractiveQueryClusterOutput() InteractiveQueryClusterOutput {
	return i.ToInteractiveQueryClusterOutputWithContext(context.Background())
}

func (i *InteractiveQueryCluster) ToInteractiveQueryClusterOutputWithContext(ctx context.Context) InteractiveQueryClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InteractiveQueryClusterOutput)
}

func (i *InteractiveQueryCluster) ToInteractiveQueryClusterPtrOutput() InteractiveQueryClusterPtrOutput {
	return i.ToInteractiveQueryClusterPtrOutputWithContext(context.Background())
}

func (i *InteractiveQueryCluster) ToInteractiveQueryClusterPtrOutputWithContext(ctx context.Context) InteractiveQueryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InteractiveQueryClusterPtrOutput)
}

type InteractiveQueryClusterPtrInput interface {
	pulumi.Input

	ToInteractiveQueryClusterPtrOutput() InteractiveQueryClusterPtrOutput
	ToInteractiveQueryClusterPtrOutputWithContext(ctx context.Context) InteractiveQueryClusterPtrOutput
}

type interactiveQueryClusterPtrType InteractiveQueryClusterArgs

func (*interactiveQueryClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InteractiveQueryCluster)(nil))
}

func (i *interactiveQueryClusterPtrType) ToInteractiveQueryClusterPtrOutput() InteractiveQueryClusterPtrOutput {
	return i.ToInteractiveQueryClusterPtrOutputWithContext(context.Background())
}

func (i *interactiveQueryClusterPtrType) ToInteractiveQueryClusterPtrOutputWithContext(ctx context.Context) InteractiveQueryClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InteractiveQueryClusterPtrOutput)
}

// InteractiveQueryClusterArrayInput is an input type that accepts InteractiveQueryClusterArray and InteractiveQueryClusterArrayOutput values.
// You can construct a concrete instance of `InteractiveQueryClusterArrayInput` via:
//
//          InteractiveQueryClusterArray{ InteractiveQueryClusterArgs{...} }
type InteractiveQueryClusterArrayInput interface {
	pulumi.Input

	ToInteractiveQueryClusterArrayOutput() InteractiveQueryClusterArrayOutput
	ToInteractiveQueryClusterArrayOutputWithContext(context.Context) InteractiveQueryClusterArrayOutput
}

type InteractiveQueryClusterArray []InteractiveQueryClusterInput

func (InteractiveQueryClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*InteractiveQueryCluster)(nil))
}

func (i InteractiveQueryClusterArray) ToInteractiveQueryClusterArrayOutput() InteractiveQueryClusterArrayOutput {
	return i.ToInteractiveQueryClusterArrayOutputWithContext(context.Background())
}

func (i InteractiveQueryClusterArray) ToInteractiveQueryClusterArrayOutputWithContext(ctx context.Context) InteractiveQueryClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InteractiveQueryClusterArrayOutput)
}

// InteractiveQueryClusterMapInput is an input type that accepts InteractiveQueryClusterMap and InteractiveQueryClusterMapOutput values.
// You can construct a concrete instance of `InteractiveQueryClusterMapInput` via:
//
//          InteractiveQueryClusterMap{ "key": InteractiveQueryClusterArgs{...} }
type InteractiveQueryClusterMapInput interface {
	pulumi.Input

	ToInteractiveQueryClusterMapOutput() InteractiveQueryClusterMapOutput
	ToInteractiveQueryClusterMapOutputWithContext(context.Context) InteractiveQueryClusterMapOutput
}

type InteractiveQueryClusterMap map[string]InteractiveQueryClusterInput

func (InteractiveQueryClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*InteractiveQueryCluster)(nil))
}

func (i InteractiveQueryClusterMap) ToInteractiveQueryClusterMapOutput() InteractiveQueryClusterMapOutput {
	return i.ToInteractiveQueryClusterMapOutputWithContext(context.Background())
}

func (i InteractiveQueryClusterMap) ToInteractiveQueryClusterMapOutputWithContext(ctx context.Context) InteractiveQueryClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InteractiveQueryClusterMapOutput)
}

type InteractiveQueryClusterOutput struct {
	*pulumi.OutputState
}

func (InteractiveQueryClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InteractiveQueryCluster)(nil))
}

func (o InteractiveQueryClusterOutput) ToInteractiveQueryClusterOutput() InteractiveQueryClusterOutput {
	return o
}

func (o InteractiveQueryClusterOutput) ToInteractiveQueryClusterOutputWithContext(ctx context.Context) InteractiveQueryClusterOutput {
	return o
}

func (o InteractiveQueryClusterOutput) ToInteractiveQueryClusterPtrOutput() InteractiveQueryClusterPtrOutput {
	return o.ToInteractiveQueryClusterPtrOutputWithContext(context.Background())
}

func (o InteractiveQueryClusterOutput) ToInteractiveQueryClusterPtrOutputWithContext(ctx context.Context) InteractiveQueryClusterPtrOutput {
	return o.ApplyT(func(v InteractiveQueryCluster) *InteractiveQueryCluster {
		return &v
	}).(InteractiveQueryClusterPtrOutput)
}

type InteractiveQueryClusterPtrOutput struct {
	*pulumi.OutputState
}

func (InteractiveQueryClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InteractiveQueryCluster)(nil))
}

func (o InteractiveQueryClusterPtrOutput) ToInteractiveQueryClusterPtrOutput() InteractiveQueryClusterPtrOutput {
	return o
}

func (o InteractiveQueryClusterPtrOutput) ToInteractiveQueryClusterPtrOutputWithContext(ctx context.Context) InteractiveQueryClusterPtrOutput {
	return o
}

type InteractiveQueryClusterArrayOutput struct{ *pulumi.OutputState }

func (InteractiveQueryClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InteractiveQueryCluster)(nil))
}

func (o InteractiveQueryClusterArrayOutput) ToInteractiveQueryClusterArrayOutput() InteractiveQueryClusterArrayOutput {
	return o
}

func (o InteractiveQueryClusterArrayOutput) ToInteractiveQueryClusterArrayOutputWithContext(ctx context.Context) InteractiveQueryClusterArrayOutput {
	return o
}

func (o InteractiveQueryClusterArrayOutput) Index(i pulumi.IntInput) InteractiveQueryClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InteractiveQueryCluster {
		return vs[0].([]InteractiveQueryCluster)[vs[1].(int)]
	}).(InteractiveQueryClusterOutput)
}

type InteractiveQueryClusterMapOutput struct{ *pulumi.OutputState }

func (InteractiveQueryClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]InteractiveQueryCluster)(nil))
}

func (o InteractiveQueryClusterMapOutput) ToInteractiveQueryClusterMapOutput() InteractiveQueryClusterMapOutput {
	return o
}

func (o InteractiveQueryClusterMapOutput) ToInteractiveQueryClusterMapOutputWithContext(ctx context.Context) InteractiveQueryClusterMapOutput {
	return o
}

func (o InteractiveQueryClusterMapOutput) MapIndex(k pulumi.StringInput) InteractiveQueryClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) InteractiveQueryCluster {
		return vs[0].(map[string]InteractiveQueryCluster)[vs[1].(string)]
	}).(InteractiveQueryClusterOutput)
}

func init() {
	pulumi.RegisterOutputType(InteractiveQueryClusterOutput{})
	pulumi.RegisterOutputType(InteractiveQueryClusterPtrOutput{})
	pulumi.RegisterOutputType(InteractiveQueryClusterArrayOutput{})
	pulumi.RegisterOutputType(InteractiveQueryClusterMapOutput{})
}
