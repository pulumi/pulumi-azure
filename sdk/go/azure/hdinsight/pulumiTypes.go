// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package hdinsight

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type HBaseClusterComponentVersion struct {
	// The version of HBase which should be used for this HDInsight HBase Cluster. Changing this forces a new resource to be created.
	Hbase string `pulumi:"hbase"`
}

type HBaseClusterComponentVersionInput interface {
	pulumi.Input

	ToHBaseClusterComponentVersionOutput() HBaseClusterComponentVersionOutput
	ToHBaseClusterComponentVersionOutputWithContext(context.Context) HBaseClusterComponentVersionOutput
}

type HBaseClusterComponentVersionArgs struct {
	// The version of HBase which should be used for this HDInsight HBase Cluster. Changing this forces a new resource to be created.
	Hbase pulumi.StringInput `pulumi:"hbase"`
}

func (HBaseClusterComponentVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseClusterComponentVersion)(nil)).Elem()
}

func (i HBaseClusterComponentVersionArgs) ToHBaseClusterComponentVersionOutput() HBaseClusterComponentVersionOutput {
	return i.ToHBaseClusterComponentVersionOutputWithContext(context.Background())
}

func (i HBaseClusterComponentVersionArgs) ToHBaseClusterComponentVersionOutputWithContext(ctx context.Context) HBaseClusterComponentVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HBaseClusterComponentVersionOutput)
}

func (i HBaseClusterComponentVersionArgs) ToHBaseClusterComponentVersionPtrOutput() HBaseClusterComponentVersionPtrOutput {
	return i.ToHBaseClusterComponentVersionPtrOutputWithContext(context.Background())
}

func (i HBaseClusterComponentVersionArgs) ToHBaseClusterComponentVersionPtrOutputWithContext(ctx context.Context) HBaseClusterComponentVersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HBaseClusterComponentVersionOutput).ToHBaseClusterComponentVersionPtrOutputWithContext(ctx)
}

type HBaseClusterComponentVersionPtrInput interface {
	pulumi.Input

	ToHBaseClusterComponentVersionPtrOutput() HBaseClusterComponentVersionPtrOutput
	ToHBaseClusterComponentVersionPtrOutputWithContext(context.Context) HBaseClusterComponentVersionPtrOutput
}

type hbaseClusterComponentVersionPtrType HBaseClusterComponentVersionArgs

func HBaseClusterComponentVersionPtr(v *HBaseClusterComponentVersionArgs) HBaseClusterComponentVersionPtrInput {
	return (*hbaseClusterComponentVersionPtrType)(v)
}

func (*hbaseClusterComponentVersionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HBaseClusterComponentVersion)(nil)).Elem()
}

func (i *hbaseClusterComponentVersionPtrType) ToHBaseClusterComponentVersionPtrOutput() HBaseClusterComponentVersionPtrOutput {
	return i.ToHBaseClusterComponentVersionPtrOutputWithContext(context.Background())
}

func (i *hbaseClusterComponentVersionPtrType) ToHBaseClusterComponentVersionPtrOutputWithContext(ctx context.Context) HBaseClusterComponentVersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HBaseClusterComponentVersionPtrOutput)
}

type HBaseClusterComponentVersionOutput struct{ *pulumi.OutputState }

func (HBaseClusterComponentVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseClusterComponentVersion)(nil)).Elem()
}

func (o HBaseClusterComponentVersionOutput) ToHBaseClusterComponentVersionOutput() HBaseClusterComponentVersionOutput {
	return o
}

func (o HBaseClusterComponentVersionOutput) ToHBaseClusterComponentVersionOutputWithContext(ctx context.Context) HBaseClusterComponentVersionOutput {
	return o
}

func (o HBaseClusterComponentVersionOutput) ToHBaseClusterComponentVersionPtrOutput() HBaseClusterComponentVersionPtrOutput {
	return o.ToHBaseClusterComponentVersionPtrOutputWithContext(context.Background())
}

func (o HBaseClusterComponentVersionOutput) ToHBaseClusterComponentVersionPtrOutputWithContext(ctx context.Context) HBaseClusterComponentVersionPtrOutput {
	return o.ApplyT(func(v HBaseClusterComponentVersion) *HBaseClusterComponentVersion {
		return &v
	}).(HBaseClusterComponentVersionPtrOutput)
}

// The version of HBase which should be used for this HDInsight HBase Cluster. Changing this forces a new resource to be created.
func (o HBaseClusterComponentVersionOutput) Hbase() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseClusterComponentVersion) string { return v.Hbase }).(pulumi.StringOutput)
}

type HBaseClusterComponentVersionPtrOutput struct{ *pulumi.OutputState }

func (HBaseClusterComponentVersionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HBaseClusterComponentVersion)(nil)).Elem()
}

func (o HBaseClusterComponentVersionPtrOutput) ToHBaseClusterComponentVersionPtrOutput() HBaseClusterComponentVersionPtrOutput {
	return o
}

func (o HBaseClusterComponentVersionPtrOutput) ToHBaseClusterComponentVersionPtrOutputWithContext(ctx context.Context) HBaseClusterComponentVersionPtrOutput {
	return o
}

func (o HBaseClusterComponentVersionPtrOutput) Elem() HBaseClusterComponentVersionOutput {
	return o.ApplyT(func(v *HBaseClusterComponentVersion) HBaseClusterComponentVersion { return *v }).(HBaseClusterComponentVersionOutput)
}

// The version of HBase which should be used for this HDInsight HBase Cluster. Changing this forces a new resource to be created.
func (o HBaseClusterComponentVersionPtrOutput) Hbase() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseClusterComponentVersion) string { return v.Hbase }).(pulumi.StringOutput)
}

type HBaseClusterGateway struct {
	// Is the Ambari portal enabled? Changing this forces a new resource to be created.
	Enabled bool `pulumi:"enabled"`
	// The password used for the Ambari Portal. Changing this forces a new resource to be created.
	Password string `pulumi:"password"`
	// The username used for the Ambari Portal. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
}

type HBaseClusterGatewayInput interface {
	pulumi.Input

	ToHBaseClusterGatewayOutput() HBaseClusterGatewayOutput
	ToHBaseClusterGatewayOutputWithContext(context.Context) HBaseClusterGatewayOutput
}

type HBaseClusterGatewayArgs struct {
	// Is the Ambari portal enabled? Changing this forces a new resource to be created.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The password used for the Ambari Portal. Changing this forces a new resource to be created.
	Password pulumi.StringInput `pulumi:"password"`
	// The username used for the Ambari Portal. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
}

func (HBaseClusterGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseClusterGateway)(nil)).Elem()
}

func (i HBaseClusterGatewayArgs) ToHBaseClusterGatewayOutput() HBaseClusterGatewayOutput {
	return i.ToHBaseClusterGatewayOutputWithContext(context.Background())
}

func (i HBaseClusterGatewayArgs) ToHBaseClusterGatewayOutputWithContext(ctx context.Context) HBaseClusterGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HBaseClusterGatewayOutput)
}

func (i HBaseClusterGatewayArgs) ToHBaseClusterGatewayPtrOutput() HBaseClusterGatewayPtrOutput {
	return i.ToHBaseClusterGatewayPtrOutputWithContext(context.Background())
}

func (i HBaseClusterGatewayArgs) ToHBaseClusterGatewayPtrOutputWithContext(ctx context.Context) HBaseClusterGatewayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HBaseClusterGatewayOutput).ToHBaseClusterGatewayPtrOutputWithContext(ctx)
}

type HBaseClusterGatewayPtrInput interface {
	pulumi.Input

	ToHBaseClusterGatewayPtrOutput() HBaseClusterGatewayPtrOutput
	ToHBaseClusterGatewayPtrOutputWithContext(context.Context) HBaseClusterGatewayPtrOutput
}

type hbaseClusterGatewayPtrType HBaseClusterGatewayArgs

func HBaseClusterGatewayPtr(v *HBaseClusterGatewayArgs) HBaseClusterGatewayPtrInput {
	return (*hbaseClusterGatewayPtrType)(v)
}

func (*hbaseClusterGatewayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HBaseClusterGateway)(nil)).Elem()
}

func (i *hbaseClusterGatewayPtrType) ToHBaseClusterGatewayPtrOutput() HBaseClusterGatewayPtrOutput {
	return i.ToHBaseClusterGatewayPtrOutputWithContext(context.Background())
}

func (i *hbaseClusterGatewayPtrType) ToHBaseClusterGatewayPtrOutputWithContext(ctx context.Context) HBaseClusterGatewayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HBaseClusterGatewayPtrOutput)
}

type HBaseClusterGatewayOutput struct{ *pulumi.OutputState }

func (HBaseClusterGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseClusterGateway)(nil)).Elem()
}

func (o HBaseClusterGatewayOutput) ToHBaseClusterGatewayOutput() HBaseClusterGatewayOutput {
	return o
}

func (o HBaseClusterGatewayOutput) ToHBaseClusterGatewayOutputWithContext(ctx context.Context) HBaseClusterGatewayOutput {
	return o
}

func (o HBaseClusterGatewayOutput) ToHBaseClusterGatewayPtrOutput() HBaseClusterGatewayPtrOutput {
	return o.ToHBaseClusterGatewayPtrOutputWithContext(context.Background())
}

func (o HBaseClusterGatewayOutput) ToHBaseClusterGatewayPtrOutputWithContext(ctx context.Context) HBaseClusterGatewayPtrOutput {
	return o.ApplyT(func(v HBaseClusterGateway) *HBaseClusterGateway {
		return &v
	}).(HBaseClusterGatewayPtrOutput)
}

// Is the Ambari portal enabled? Changing this forces a new resource to be created.
func (o HBaseClusterGatewayOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v HBaseClusterGateway) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The password used for the Ambari Portal. Changing this forces a new resource to be created.
func (o HBaseClusterGatewayOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseClusterGateway) string { return v.Password }).(pulumi.StringOutput)
}

// The username used for the Ambari Portal. Changing this forces a new resource to be created.
func (o HBaseClusterGatewayOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseClusterGateway) string { return v.Username }).(pulumi.StringOutput)
}

type HBaseClusterGatewayPtrOutput struct{ *pulumi.OutputState }

func (HBaseClusterGatewayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HBaseClusterGateway)(nil)).Elem()
}

func (o HBaseClusterGatewayPtrOutput) ToHBaseClusterGatewayPtrOutput() HBaseClusterGatewayPtrOutput {
	return o
}

func (o HBaseClusterGatewayPtrOutput) ToHBaseClusterGatewayPtrOutputWithContext(ctx context.Context) HBaseClusterGatewayPtrOutput {
	return o
}

func (o HBaseClusterGatewayPtrOutput) Elem() HBaseClusterGatewayOutput {
	return o.ApplyT(func(v *HBaseClusterGateway) HBaseClusterGateway { return *v }).(HBaseClusterGatewayOutput)
}

// Is the Ambari portal enabled? Changing this forces a new resource to be created.
func (o HBaseClusterGatewayPtrOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v HBaseClusterGateway) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The password used for the Ambari Portal. Changing this forces a new resource to be created.
func (o HBaseClusterGatewayPtrOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseClusterGateway) string { return v.Password }).(pulumi.StringOutput)
}

// The username used for the Ambari Portal. Changing this forces a new resource to be created.
func (o HBaseClusterGatewayPtrOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseClusterGateway) string { return v.Username }).(pulumi.StringOutput)
}

type HBaseClusterRoles struct {
	// A `headNode` block as defined above.
	HeadNode HBaseClusterRolesHeadNode `pulumi:"headNode"`
	// A `workerNode` block as defined below.
	WorkerNode HBaseClusterRolesWorkerNode `pulumi:"workerNode"`
	// A `zookeeperNode` block as defined below.
	ZookeeperNode HBaseClusterRolesZookeeperNode `pulumi:"zookeeperNode"`
}

type HBaseClusterRolesInput interface {
	pulumi.Input

	ToHBaseClusterRolesOutput() HBaseClusterRolesOutput
	ToHBaseClusterRolesOutputWithContext(context.Context) HBaseClusterRolesOutput
}

type HBaseClusterRolesArgs struct {
	// A `headNode` block as defined above.
	HeadNode HBaseClusterRolesHeadNodeInput `pulumi:"headNode"`
	// A `workerNode` block as defined below.
	WorkerNode HBaseClusterRolesWorkerNodeInput `pulumi:"workerNode"`
	// A `zookeeperNode` block as defined below.
	ZookeeperNode HBaseClusterRolesZookeeperNodeInput `pulumi:"zookeeperNode"`
}

func (HBaseClusterRolesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseClusterRoles)(nil)).Elem()
}

func (i HBaseClusterRolesArgs) ToHBaseClusterRolesOutput() HBaseClusterRolesOutput {
	return i.ToHBaseClusterRolesOutputWithContext(context.Background())
}

func (i HBaseClusterRolesArgs) ToHBaseClusterRolesOutputWithContext(ctx context.Context) HBaseClusterRolesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HBaseClusterRolesOutput)
}

func (i HBaseClusterRolesArgs) ToHBaseClusterRolesPtrOutput() HBaseClusterRolesPtrOutput {
	return i.ToHBaseClusterRolesPtrOutputWithContext(context.Background())
}

func (i HBaseClusterRolesArgs) ToHBaseClusterRolesPtrOutputWithContext(ctx context.Context) HBaseClusterRolesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HBaseClusterRolesOutput).ToHBaseClusterRolesPtrOutputWithContext(ctx)
}

type HBaseClusterRolesPtrInput interface {
	pulumi.Input

	ToHBaseClusterRolesPtrOutput() HBaseClusterRolesPtrOutput
	ToHBaseClusterRolesPtrOutputWithContext(context.Context) HBaseClusterRolesPtrOutput
}

type hbaseClusterRolesPtrType HBaseClusterRolesArgs

func HBaseClusterRolesPtr(v *HBaseClusterRolesArgs) HBaseClusterRolesPtrInput {
	return (*hbaseClusterRolesPtrType)(v)
}

func (*hbaseClusterRolesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HBaseClusterRoles)(nil)).Elem()
}

func (i *hbaseClusterRolesPtrType) ToHBaseClusterRolesPtrOutput() HBaseClusterRolesPtrOutput {
	return i.ToHBaseClusterRolesPtrOutputWithContext(context.Background())
}

func (i *hbaseClusterRolesPtrType) ToHBaseClusterRolesPtrOutputWithContext(ctx context.Context) HBaseClusterRolesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HBaseClusterRolesPtrOutput)
}

type HBaseClusterRolesOutput struct{ *pulumi.OutputState }

func (HBaseClusterRolesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseClusterRoles)(nil)).Elem()
}

func (o HBaseClusterRolesOutput) ToHBaseClusterRolesOutput() HBaseClusterRolesOutput {
	return o
}

func (o HBaseClusterRolesOutput) ToHBaseClusterRolesOutputWithContext(ctx context.Context) HBaseClusterRolesOutput {
	return o
}

func (o HBaseClusterRolesOutput) ToHBaseClusterRolesPtrOutput() HBaseClusterRolesPtrOutput {
	return o.ToHBaseClusterRolesPtrOutputWithContext(context.Background())
}

func (o HBaseClusterRolesOutput) ToHBaseClusterRolesPtrOutputWithContext(ctx context.Context) HBaseClusterRolesPtrOutput {
	return o.ApplyT(func(v HBaseClusterRoles) *HBaseClusterRoles {
		return &v
	}).(HBaseClusterRolesPtrOutput)
}

// A `headNode` block as defined above.
func (o HBaseClusterRolesOutput) HeadNode() HBaseClusterRolesHeadNodeOutput {
	return o.ApplyT(func(v HBaseClusterRoles) HBaseClusterRolesHeadNode { return v.HeadNode }).(HBaseClusterRolesHeadNodeOutput)
}

// A `workerNode` block as defined below.
func (o HBaseClusterRolesOutput) WorkerNode() HBaseClusterRolesWorkerNodeOutput {
	return o.ApplyT(func(v HBaseClusterRoles) HBaseClusterRolesWorkerNode { return v.WorkerNode }).(HBaseClusterRolesWorkerNodeOutput)
}

// A `zookeeperNode` block as defined below.
func (o HBaseClusterRolesOutput) ZookeeperNode() HBaseClusterRolesZookeeperNodeOutput {
	return o.ApplyT(func(v HBaseClusterRoles) HBaseClusterRolesZookeeperNode { return v.ZookeeperNode }).(HBaseClusterRolesZookeeperNodeOutput)
}

type HBaseClusterRolesPtrOutput struct{ *pulumi.OutputState }

func (HBaseClusterRolesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HBaseClusterRoles)(nil)).Elem()
}

func (o HBaseClusterRolesPtrOutput) ToHBaseClusterRolesPtrOutput() HBaseClusterRolesPtrOutput {
	return o
}

func (o HBaseClusterRolesPtrOutput) ToHBaseClusterRolesPtrOutputWithContext(ctx context.Context) HBaseClusterRolesPtrOutput {
	return o
}

func (o HBaseClusterRolesPtrOutput) Elem() HBaseClusterRolesOutput {
	return o.ApplyT(func(v *HBaseClusterRoles) HBaseClusterRoles { return *v }).(HBaseClusterRolesOutput)
}

// A `headNode` block as defined above.
func (o HBaseClusterRolesPtrOutput) HeadNode() HBaseClusterRolesHeadNodeOutput {
	return o.ApplyT(func(v HBaseClusterRoles) HBaseClusterRolesHeadNode { return v.HeadNode }).(HBaseClusterRolesHeadNodeOutput)
}

// A `workerNode` block as defined below.
func (o HBaseClusterRolesPtrOutput) WorkerNode() HBaseClusterRolesWorkerNodeOutput {
	return o.ApplyT(func(v HBaseClusterRoles) HBaseClusterRolesWorkerNode { return v.WorkerNode }).(HBaseClusterRolesWorkerNodeOutput)
}

// A `zookeeperNode` block as defined below.
func (o HBaseClusterRolesPtrOutput) ZookeeperNode() HBaseClusterRolesZookeeperNodeOutput {
	return o.ApplyT(func(v HBaseClusterRoles) HBaseClusterRolesZookeeperNode { return v.ZookeeperNode }).(HBaseClusterRolesZookeeperNodeOutput)
}

type HBaseClusterRolesHeadNode struct {
	// The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
	Password *string `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
	SshKeys []string `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId *string `pulumi:"subnetId"`
	// The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
	// The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId *string `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
	VmSize string `pulumi:"vmSize"`
}

type HBaseClusterRolesHeadNodeInput interface {
	pulumi.Input

	ToHBaseClusterRolesHeadNodeOutput() HBaseClusterRolesHeadNodeOutput
	ToHBaseClusterRolesHeadNodeOutputWithContext(context.Context) HBaseClusterRolesHeadNodeOutput
}

type HBaseClusterRolesHeadNodeArgs struct {
	// The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
	SshKeys pulumi.StringArrayInput `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
	// The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId pulumi.StringPtrInput `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
	VmSize pulumi.StringInput `pulumi:"vmSize"`
}

func (HBaseClusterRolesHeadNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseClusterRolesHeadNode)(nil)).Elem()
}

func (i HBaseClusterRolesHeadNodeArgs) ToHBaseClusterRolesHeadNodeOutput() HBaseClusterRolesHeadNodeOutput {
	return i.ToHBaseClusterRolesHeadNodeOutputWithContext(context.Background())
}

func (i HBaseClusterRolesHeadNodeArgs) ToHBaseClusterRolesHeadNodeOutputWithContext(ctx context.Context) HBaseClusterRolesHeadNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HBaseClusterRolesHeadNodeOutput)
}

type HBaseClusterRolesHeadNodeOutput struct{ *pulumi.OutputState }

func (HBaseClusterRolesHeadNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseClusterRolesHeadNode)(nil)).Elem()
}

func (o HBaseClusterRolesHeadNodeOutput) ToHBaseClusterRolesHeadNodeOutput() HBaseClusterRolesHeadNodeOutput {
	return o
}

func (o HBaseClusterRolesHeadNodeOutput) ToHBaseClusterRolesHeadNodeOutputWithContext(ctx context.Context) HBaseClusterRolesHeadNodeOutput {
	return o
}

// The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
func (o HBaseClusterRolesHeadNodeOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HBaseClusterRolesHeadNode) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
func (o HBaseClusterRolesHeadNodeOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HBaseClusterRolesHeadNode) []string { return v.SshKeys }).(pulumi.StringArrayOutput)
}

// The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o HBaseClusterRolesHeadNodeOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HBaseClusterRolesHeadNode) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
func (o HBaseClusterRolesHeadNodeOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseClusterRolesHeadNode) string { return v.Username }).(pulumi.StringOutput)
}

// The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o HBaseClusterRolesHeadNodeOutput) VirtualNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HBaseClusterRolesHeadNode) *string { return v.VirtualNetworkId }).(pulumi.StringPtrOutput)
}

// The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
func (o HBaseClusterRolesHeadNodeOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseClusterRolesHeadNode) string { return v.VmSize }).(pulumi.StringOutput)
}

type HBaseClusterRolesWorkerNode struct {
	// The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
	MinInstanceCount *int `pulumi:"minInstanceCount"`
	// The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
	Password *string `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
	SshKeys []string `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId *string `pulumi:"subnetId"`
	// The number of instances which should be run for the Worker Nodes.
	TargetInstanceCount int `pulumi:"targetInstanceCount"`
	// The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
	// The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId *string `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
	VmSize string `pulumi:"vmSize"`
}

type HBaseClusterRolesWorkerNodeInput interface {
	pulumi.Input

	ToHBaseClusterRolesWorkerNodeOutput() HBaseClusterRolesWorkerNodeOutput
	ToHBaseClusterRolesWorkerNodeOutputWithContext(context.Context) HBaseClusterRolesWorkerNodeOutput
}

type HBaseClusterRolesWorkerNodeArgs struct {
	// The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
	MinInstanceCount pulumi.IntPtrInput `pulumi:"minInstanceCount"`
	// The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
	SshKeys pulumi.StringArrayInput `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// The number of instances which should be run for the Worker Nodes.
	TargetInstanceCount pulumi.IntInput `pulumi:"targetInstanceCount"`
	// The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
	// The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId pulumi.StringPtrInput `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
	VmSize pulumi.StringInput `pulumi:"vmSize"`
}

func (HBaseClusterRolesWorkerNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseClusterRolesWorkerNode)(nil)).Elem()
}

func (i HBaseClusterRolesWorkerNodeArgs) ToHBaseClusterRolesWorkerNodeOutput() HBaseClusterRolesWorkerNodeOutput {
	return i.ToHBaseClusterRolesWorkerNodeOutputWithContext(context.Background())
}

func (i HBaseClusterRolesWorkerNodeArgs) ToHBaseClusterRolesWorkerNodeOutputWithContext(ctx context.Context) HBaseClusterRolesWorkerNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HBaseClusterRolesWorkerNodeOutput)
}

type HBaseClusterRolesWorkerNodeOutput struct{ *pulumi.OutputState }

func (HBaseClusterRolesWorkerNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseClusterRolesWorkerNode)(nil)).Elem()
}

func (o HBaseClusterRolesWorkerNodeOutput) ToHBaseClusterRolesWorkerNodeOutput() HBaseClusterRolesWorkerNodeOutput {
	return o
}

func (o HBaseClusterRolesWorkerNodeOutput) ToHBaseClusterRolesWorkerNodeOutputWithContext(ctx context.Context) HBaseClusterRolesWorkerNodeOutput {
	return o
}

// The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
func (o HBaseClusterRolesWorkerNodeOutput) MinInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HBaseClusterRolesWorkerNode) *int { return v.MinInstanceCount }).(pulumi.IntPtrOutput)
}

// The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
func (o HBaseClusterRolesWorkerNodeOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HBaseClusterRolesWorkerNode) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
func (o HBaseClusterRolesWorkerNodeOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HBaseClusterRolesWorkerNode) []string { return v.SshKeys }).(pulumi.StringArrayOutput)
}

// The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o HBaseClusterRolesWorkerNodeOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HBaseClusterRolesWorkerNode) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The number of instances which should be run for the Worker Nodes.
func (o HBaseClusterRolesWorkerNodeOutput) TargetInstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v HBaseClusterRolesWorkerNode) int { return v.TargetInstanceCount }).(pulumi.IntOutput)
}

// The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
func (o HBaseClusterRolesWorkerNodeOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseClusterRolesWorkerNode) string { return v.Username }).(pulumi.StringOutput)
}

// The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o HBaseClusterRolesWorkerNodeOutput) VirtualNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HBaseClusterRolesWorkerNode) *string { return v.VirtualNetworkId }).(pulumi.StringPtrOutput)
}

// The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
func (o HBaseClusterRolesWorkerNodeOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseClusterRolesWorkerNode) string { return v.VmSize }).(pulumi.StringOutput)
}

type HBaseClusterRolesZookeeperNode struct {
	// The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
	Password *string `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
	SshKeys []string `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId *string `pulumi:"subnetId"`
	// The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
	// The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId *string `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
	VmSize string `pulumi:"vmSize"`
}

type HBaseClusterRolesZookeeperNodeInput interface {
	pulumi.Input

	ToHBaseClusterRolesZookeeperNodeOutput() HBaseClusterRolesZookeeperNodeOutput
	ToHBaseClusterRolesZookeeperNodeOutputWithContext(context.Context) HBaseClusterRolesZookeeperNodeOutput
}

type HBaseClusterRolesZookeeperNodeArgs struct {
	// The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
	SshKeys pulumi.StringArrayInput `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
	// The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId pulumi.StringPtrInput `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
	VmSize pulumi.StringInput `pulumi:"vmSize"`
}

func (HBaseClusterRolesZookeeperNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseClusterRolesZookeeperNode)(nil)).Elem()
}

func (i HBaseClusterRolesZookeeperNodeArgs) ToHBaseClusterRolesZookeeperNodeOutput() HBaseClusterRolesZookeeperNodeOutput {
	return i.ToHBaseClusterRolesZookeeperNodeOutputWithContext(context.Background())
}

func (i HBaseClusterRolesZookeeperNodeArgs) ToHBaseClusterRolesZookeeperNodeOutputWithContext(ctx context.Context) HBaseClusterRolesZookeeperNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HBaseClusterRolesZookeeperNodeOutput)
}

type HBaseClusterRolesZookeeperNodeOutput struct{ *pulumi.OutputState }

func (HBaseClusterRolesZookeeperNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseClusterRolesZookeeperNode)(nil)).Elem()
}

func (o HBaseClusterRolesZookeeperNodeOutput) ToHBaseClusterRolesZookeeperNodeOutput() HBaseClusterRolesZookeeperNodeOutput {
	return o
}

func (o HBaseClusterRolesZookeeperNodeOutput) ToHBaseClusterRolesZookeeperNodeOutputWithContext(ctx context.Context) HBaseClusterRolesZookeeperNodeOutput {
	return o
}

// The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
func (o HBaseClusterRolesZookeeperNodeOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HBaseClusterRolesZookeeperNode) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
func (o HBaseClusterRolesZookeeperNodeOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HBaseClusterRolesZookeeperNode) []string { return v.SshKeys }).(pulumi.StringArrayOutput)
}

// The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o HBaseClusterRolesZookeeperNodeOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HBaseClusterRolesZookeeperNode) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
func (o HBaseClusterRolesZookeeperNodeOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseClusterRolesZookeeperNode) string { return v.Username }).(pulumi.StringOutput)
}

// The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o HBaseClusterRolesZookeeperNodeOutput) VirtualNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HBaseClusterRolesZookeeperNode) *string { return v.VirtualNetworkId }).(pulumi.StringPtrOutput)
}

// The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
func (o HBaseClusterRolesZookeeperNodeOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseClusterRolesZookeeperNode) string { return v.VmSize }).(pulumi.StringOutput)
}

type HBaseClusterStorageAccount struct {
	// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
	IsDefault bool `pulumi:"isDefault"`
	// The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
	StorageAccountKey string `pulumi:"storageAccountKey"`
	// The ID of the Storage Container. Changing this forces a new resource to be created.
	StorageContainerId string `pulumi:"storageContainerId"`
}

type HBaseClusterStorageAccountInput interface {
	pulumi.Input

	ToHBaseClusterStorageAccountOutput() HBaseClusterStorageAccountOutput
	ToHBaseClusterStorageAccountOutputWithContext(context.Context) HBaseClusterStorageAccountOutput
}

type HBaseClusterStorageAccountArgs struct {
	// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
	IsDefault pulumi.BoolInput `pulumi:"isDefault"`
	// The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
	StorageAccountKey pulumi.StringInput `pulumi:"storageAccountKey"`
	// The ID of the Storage Container. Changing this forces a new resource to be created.
	StorageContainerId pulumi.StringInput `pulumi:"storageContainerId"`
}

func (HBaseClusterStorageAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseClusterStorageAccount)(nil)).Elem()
}

func (i HBaseClusterStorageAccountArgs) ToHBaseClusterStorageAccountOutput() HBaseClusterStorageAccountOutput {
	return i.ToHBaseClusterStorageAccountOutputWithContext(context.Background())
}

func (i HBaseClusterStorageAccountArgs) ToHBaseClusterStorageAccountOutputWithContext(ctx context.Context) HBaseClusterStorageAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HBaseClusterStorageAccountOutput)
}

type HBaseClusterStorageAccountArrayInput interface {
	pulumi.Input

	ToHBaseClusterStorageAccountArrayOutput() HBaseClusterStorageAccountArrayOutput
	ToHBaseClusterStorageAccountArrayOutputWithContext(context.Context) HBaseClusterStorageAccountArrayOutput
}

type HBaseClusterStorageAccountArray []HBaseClusterStorageAccountInput

func (HBaseClusterStorageAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HBaseClusterStorageAccount)(nil)).Elem()
}

func (i HBaseClusterStorageAccountArray) ToHBaseClusterStorageAccountArrayOutput() HBaseClusterStorageAccountArrayOutput {
	return i.ToHBaseClusterStorageAccountArrayOutputWithContext(context.Background())
}

func (i HBaseClusterStorageAccountArray) ToHBaseClusterStorageAccountArrayOutputWithContext(ctx context.Context) HBaseClusterStorageAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HBaseClusterStorageAccountArrayOutput)
}

type HBaseClusterStorageAccountOutput struct{ *pulumi.OutputState }

func (HBaseClusterStorageAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseClusterStorageAccount)(nil)).Elem()
}

func (o HBaseClusterStorageAccountOutput) ToHBaseClusterStorageAccountOutput() HBaseClusterStorageAccountOutput {
	return o
}

func (o HBaseClusterStorageAccountOutput) ToHBaseClusterStorageAccountOutputWithContext(ctx context.Context) HBaseClusterStorageAccountOutput {
	return o
}

// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
func (o HBaseClusterStorageAccountOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v HBaseClusterStorageAccount) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
func (o HBaseClusterStorageAccountOutput) StorageAccountKey() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseClusterStorageAccount) string { return v.StorageAccountKey }).(pulumi.StringOutput)
}

// The ID of the Storage Container. Changing this forces a new resource to be created.
func (o HBaseClusterStorageAccountOutput) StorageContainerId() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseClusterStorageAccount) string { return v.StorageContainerId }).(pulumi.StringOutput)
}

type HBaseClusterStorageAccountArrayOutput struct{ *pulumi.OutputState }

func (HBaseClusterStorageAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HBaseClusterStorageAccount)(nil)).Elem()
}

func (o HBaseClusterStorageAccountArrayOutput) ToHBaseClusterStorageAccountArrayOutput() HBaseClusterStorageAccountArrayOutput {
	return o
}

func (o HBaseClusterStorageAccountArrayOutput) ToHBaseClusterStorageAccountArrayOutputWithContext(ctx context.Context) HBaseClusterStorageAccountArrayOutput {
	return o
}

func (o HBaseClusterStorageAccountArrayOutput) Index(i pulumi.IntInput) HBaseClusterStorageAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HBaseClusterStorageAccount {
		return vs[0].([]HBaseClusterStorageAccount)[vs[1].(int)]
	}).(HBaseClusterStorageAccountOutput)
}

type HBaseClusterStorageAccountGen2 struct {
	// The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
	FilesystemId string `pulumi:"filesystemId"`
	// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
	IsDefault bool `pulumi:"isDefault"`
	// The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
	ManagedIdentityResourceId string `pulumi:"managedIdentityResourceId"`
	// The ID of the Storage Account. Changing this forces a new resource to be created.
	StorageResourceId string `pulumi:"storageResourceId"`
}

type HBaseClusterStorageAccountGen2Input interface {
	pulumi.Input

	ToHBaseClusterStorageAccountGen2Output() HBaseClusterStorageAccountGen2Output
	ToHBaseClusterStorageAccountGen2OutputWithContext(context.Context) HBaseClusterStorageAccountGen2Output
}

type HBaseClusterStorageAccountGen2Args struct {
	// The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
	FilesystemId pulumi.StringInput `pulumi:"filesystemId"`
	// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
	IsDefault pulumi.BoolInput `pulumi:"isDefault"`
	// The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
	ManagedIdentityResourceId pulumi.StringInput `pulumi:"managedIdentityResourceId"`
	// The ID of the Storage Account. Changing this forces a new resource to be created.
	StorageResourceId pulumi.StringInput `pulumi:"storageResourceId"`
}

func (HBaseClusterStorageAccountGen2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseClusterStorageAccountGen2)(nil)).Elem()
}

func (i HBaseClusterStorageAccountGen2Args) ToHBaseClusterStorageAccountGen2Output() HBaseClusterStorageAccountGen2Output {
	return i.ToHBaseClusterStorageAccountGen2OutputWithContext(context.Background())
}

func (i HBaseClusterStorageAccountGen2Args) ToHBaseClusterStorageAccountGen2OutputWithContext(ctx context.Context) HBaseClusterStorageAccountGen2Output {
	return pulumi.ToOutputWithContext(ctx, i).(HBaseClusterStorageAccountGen2Output)
}

func (i HBaseClusterStorageAccountGen2Args) ToHBaseClusterStorageAccountGen2PtrOutput() HBaseClusterStorageAccountGen2PtrOutput {
	return i.ToHBaseClusterStorageAccountGen2PtrOutputWithContext(context.Background())
}

func (i HBaseClusterStorageAccountGen2Args) ToHBaseClusterStorageAccountGen2PtrOutputWithContext(ctx context.Context) HBaseClusterStorageAccountGen2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HBaseClusterStorageAccountGen2Output).ToHBaseClusterStorageAccountGen2PtrOutputWithContext(ctx)
}

type HBaseClusterStorageAccountGen2PtrInput interface {
	pulumi.Input

	ToHBaseClusterStorageAccountGen2PtrOutput() HBaseClusterStorageAccountGen2PtrOutput
	ToHBaseClusterStorageAccountGen2PtrOutputWithContext(context.Context) HBaseClusterStorageAccountGen2PtrOutput
}

type hbaseClusterStorageAccountGen2PtrType HBaseClusterStorageAccountGen2Args

func HBaseClusterStorageAccountGen2Ptr(v *HBaseClusterStorageAccountGen2Args) HBaseClusterStorageAccountGen2PtrInput {
	return (*hbaseClusterStorageAccountGen2PtrType)(v)
}

func (*hbaseClusterStorageAccountGen2PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HBaseClusterStorageAccountGen2)(nil)).Elem()
}

func (i *hbaseClusterStorageAccountGen2PtrType) ToHBaseClusterStorageAccountGen2PtrOutput() HBaseClusterStorageAccountGen2PtrOutput {
	return i.ToHBaseClusterStorageAccountGen2PtrOutputWithContext(context.Background())
}

func (i *hbaseClusterStorageAccountGen2PtrType) ToHBaseClusterStorageAccountGen2PtrOutputWithContext(ctx context.Context) HBaseClusterStorageAccountGen2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HBaseClusterStorageAccountGen2PtrOutput)
}

type HBaseClusterStorageAccountGen2Output struct{ *pulumi.OutputState }

func (HBaseClusterStorageAccountGen2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseClusterStorageAccountGen2)(nil)).Elem()
}

func (o HBaseClusterStorageAccountGen2Output) ToHBaseClusterStorageAccountGen2Output() HBaseClusterStorageAccountGen2Output {
	return o
}

func (o HBaseClusterStorageAccountGen2Output) ToHBaseClusterStorageAccountGen2OutputWithContext(ctx context.Context) HBaseClusterStorageAccountGen2Output {
	return o
}

func (o HBaseClusterStorageAccountGen2Output) ToHBaseClusterStorageAccountGen2PtrOutput() HBaseClusterStorageAccountGen2PtrOutput {
	return o.ToHBaseClusterStorageAccountGen2PtrOutputWithContext(context.Background())
}

func (o HBaseClusterStorageAccountGen2Output) ToHBaseClusterStorageAccountGen2PtrOutputWithContext(ctx context.Context) HBaseClusterStorageAccountGen2PtrOutput {
	return o.ApplyT(func(v HBaseClusterStorageAccountGen2) *HBaseClusterStorageAccountGen2 {
		return &v
	}).(HBaseClusterStorageAccountGen2PtrOutput)
}

// The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
func (o HBaseClusterStorageAccountGen2Output) FilesystemId() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseClusterStorageAccountGen2) string { return v.FilesystemId }).(pulumi.StringOutput)
}

// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
func (o HBaseClusterStorageAccountGen2Output) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v HBaseClusterStorageAccountGen2) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
func (o HBaseClusterStorageAccountGen2Output) ManagedIdentityResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseClusterStorageAccountGen2) string { return v.ManagedIdentityResourceId }).(pulumi.StringOutput)
}

// The ID of the Storage Account. Changing this forces a new resource to be created.
func (o HBaseClusterStorageAccountGen2Output) StorageResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseClusterStorageAccountGen2) string { return v.StorageResourceId }).(pulumi.StringOutput)
}

type HBaseClusterStorageAccountGen2PtrOutput struct{ *pulumi.OutputState }

func (HBaseClusterStorageAccountGen2PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HBaseClusterStorageAccountGen2)(nil)).Elem()
}

func (o HBaseClusterStorageAccountGen2PtrOutput) ToHBaseClusterStorageAccountGen2PtrOutput() HBaseClusterStorageAccountGen2PtrOutput {
	return o
}

func (o HBaseClusterStorageAccountGen2PtrOutput) ToHBaseClusterStorageAccountGen2PtrOutputWithContext(ctx context.Context) HBaseClusterStorageAccountGen2PtrOutput {
	return o
}

func (o HBaseClusterStorageAccountGen2PtrOutput) Elem() HBaseClusterStorageAccountGen2Output {
	return o.ApplyT(func(v *HBaseClusterStorageAccountGen2) HBaseClusterStorageAccountGen2 { return *v }).(HBaseClusterStorageAccountGen2Output)
}

// The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
func (o HBaseClusterStorageAccountGen2PtrOutput) FilesystemId() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseClusterStorageAccountGen2) string { return v.FilesystemId }).(pulumi.StringOutput)
}

// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
func (o HBaseClusterStorageAccountGen2PtrOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v HBaseClusterStorageAccountGen2) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
func (o HBaseClusterStorageAccountGen2PtrOutput) ManagedIdentityResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseClusterStorageAccountGen2) string { return v.ManagedIdentityResourceId }).(pulumi.StringOutput)
}

// The ID of the Storage Account. Changing this forces a new resource to be created.
func (o HBaseClusterStorageAccountGen2PtrOutput) StorageResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseClusterStorageAccountGen2) string { return v.StorageResourceId }).(pulumi.StringOutput)
}

type HadoopClusterComponentVersion struct {
	// The version of Hadoop which should be used for this HDInsight Hadoop Cluster. Changing this forces a new resource to be created.
	Hadoop string `pulumi:"hadoop"`
}

type HadoopClusterComponentVersionInput interface {
	pulumi.Input

	ToHadoopClusterComponentVersionOutput() HadoopClusterComponentVersionOutput
	ToHadoopClusterComponentVersionOutputWithContext(context.Context) HadoopClusterComponentVersionOutput
}

type HadoopClusterComponentVersionArgs struct {
	// The version of Hadoop which should be used for this HDInsight Hadoop Cluster. Changing this forces a new resource to be created.
	Hadoop pulumi.StringInput `pulumi:"hadoop"`
}

func (HadoopClusterComponentVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HadoopClusterComponentVersion)(nil)).Elem()
}

func (i HadoopClusterComponentVersionArgs) ToHadoopClusterComponentVersionOutput() HadoopClusterComponentVersionOutput {
	return i.ToHadoopClusterComponentVersionOutputWithContext(context.Background())
}

func (i HadoopClusterComponentVersionArgs) ToHadoopClusterComponentVersionOutputWithContext(ctx context.Context) HadoopClusterComponentVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HadoopClusterComponentVersionOutput)
}

func (i HadoopClusterComponentVersionArgs) ToHadoopClusterComponentVersionPtrOutput() HadoopClusterComponentVersionPtrOutput {
	return i.ToHadoopClusterComponentVersionPtrOutputWithContext(context.Background())
}

func (i HadoopClusterComponentVersionArgs) ToHadoopClusterComponentVersionPtrOutputWithContext(ctx context.Context) HadoopClusterComponentVersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HadoopClusterComponentVersionOutput).ToHadoopClusterComponentVersionPtrOutputWithContext(ctx)
}

type HadoopClusterComponentVersionPtrInput interface {
	pulumi.Input

	ToHadoopClusterComponentVersionPtrOutput() HadoopClusterComponentVersionPtrOutput
	ToHadoopClusterComponentVersionPtrOutputWithContext(context.Context) HadoopClusterComponentVersionPtrOutput
}

type hadoopClusterComponentVersionPtrType HadoopClusterComponentVersionArgs

func HadoopClusterComponentVersionPtr(v *HadoopClusterComponentVersionArgs) HadoopClusterComponentVersionPtrInput {
	return (*hadoopClusterComponentVersionPtrType)(v)
}

func (*hadoopClusterComponentVersionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HadoopClusterComponentVersion)(nil)).Elem()
}

func (i *hadoopClusterComponentVersionPtrType) ToHadoopClusterComponentVersionPtrOutput() HadoopClusterComponentVersionPtrOutput {
	return i.ToHadoopClusterComponentVersionPtrOutputWithContext(context.Background())
}

func (i *hadoopClusterComponentVersionPtrType) ToHadoopClusterComponentVersionPtrOutputWithContext(ctx context.Context) HadoopClusterComponentVersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HadoopClusterComponentVersionPtrOutput)
}

type HadoopClusterComponentVersionOutput struct{ *pulumi.OutputState }

func (HadoopClusterComponentVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HadoopClusterComponentVersion)(nil)).Elem()
}

func (o HadoopClusterComponentVersionOutput) ToHadoopClusterComponentVersionOutput() HadoopClusterComponentVersionOutput {
	return o
}

func (o HadoopClusterComponentVersionOutput) ToHadoopClusterComponentVersionOutputWithContext(ctx context.Context) HadoopClusterComponentVersionOutput {
	return o
}

func (o HadoopClusterComponentVersionOutput) ToHadoopClusterComponentVersionPtrOutput() HadoopClusterComponentVersionPtrOutput {
	return o.ToHadoopClusterComponentVersionPtrOutputWithContext(context.Background())
}

func (o HadoopClusterComponentVersionOutput) ToHadoopClusterComponentVersionPtrOutputWithContext(ctx context.Context) HadoopClusterComponentVersionPtrOutput {
	return o.ApplyT(func(v HadoopClusterComponentVersion) *HadoopClusterComponentVersion {
		return &v
	}).(HadoopClusterComponentVersionPtrOutput)
}

// The version of Hadoop which should be used for this HDInsight Hadoop Cluster. Changing this forces a new resource to be created.
func (o HadoopClusterComponentVersionOutput) Hadoop() pulumi.StringOutput {
	return o.ApplyT(func(v HadoopClusterComponentVersion) string { return v.Hadoop }).(pulumi.StringOutput)
}

type HadoopClusterComponentVersionPtrOutput struct{ *pulumi.OutputState }

func (HadoopClusterComponentVersionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HadoopClusterComponentVersion)(nil)).Elem()
}

func (o HadoopClusterComponentVersionPtrOutput) ToHadoopClusterComponentVersionPtrOutput() HadoopClusterComponentVersionPtrOutput {
	return o
}

func (o HadoopClusterComponentVersionPtrOutput) ToHadoopClusterComponentVersionPtrOutputWithContext(ctx context.Context) HadoopClusterComponentVersionPtrOutput {
	return o
}

func (o HadoopClusterComponentVersionPtrOutput) Elem() HadoopClusterComponentVersionOutput {
	return o.ApplyT(func(v *HadoopClusterComponentVersion) HadoopClusterComponentVersion { return *v }).(HadoopClusterComponentVersionOutput)
}

// The version of Hadoop which should be used for this HDInsight Hadoop Cluster. Changing this forces a new resource to be created.
func (o HadoopClusterComponentVersionPtrOutput) Hadoop() pulumi.StringOutput {
	return o.ApplyT(func(v HadoopClusterComponentVersion) string { return v.Hadoop }).(pulumi.StringOutput)
}

type HadoopClusterGateway struct {
	// Is the Ambari portal enabled? Changing this forces a new resource to be created.
	Enabled bool `pulumi:"enabled"`
	// The password used for the Ambari Portal. Changing this forces a new resource to be created.
	Password string `pulumi:"password"`
	// The username used for the Ambari Portal. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
}

type HadoopClusterGatewayInput interface {
	pulumi.Input

	ToHadoopClusterGatewayOutput() HadoopClusterGatewayOutput
	ToHadoopClusterGatewayOutputWithContext(context.Context) HadoopClusterGatewayOutput
}

type HadoopClusterGatewayArgs struct {
	// Is the Ambari portal enabled? Changing this forces a new resource to be created.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The password used for the Ambari Portal. Changing this forces a new resource to be created.
	Password pulumi.StringInput `pulumi:"password"`
	// The username used for the Ambari Portal. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
}

func (HadoopClusterGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HadoopClusterGateway)(nil)).Elem()
}

func (i HadoopClusterGatewayArgs) ToHadoopClusterGatewayOutput() HadoopClusterGatewayOutput {
	return i.ToHadoopClusterGatewayOutputWithContext(context.Background())
}

func (i HadoopClusterGatewayArgs) ToHadoopClusterGatewayOutputWithContext(ctx context.Context) HadoopClusterGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HadoopClusterGatewayOutput)
}

func (i HadoopClusterGatewayArgs) ToHadoopClusterGatewayPtrOutput() HadoopClusterGatewayPtrOutput {
	return i.ToHadoopClusterGatewayPtrOutputWithContext(context.Background())
}

func (i HadoopClusterGatewayArgs) ToHadoopClusterGatewayPtrOutputWithContext(ctx context.Context) HadoopClusterGatewayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HadoopClusterGatewayOutput).ToHadoopClusterGatewayPtrOutputWithContext(ctx)
}

type HadoopClusterGatewayPtrInput interface {
	pulumi.Input

	ToHadoopClusterGatewayPtrOutput() HadoopClusterGatewayPtrOutput
	ToHadoopClusterGatewayPtrOutputWithContext(context.Context) HadoopClusterGatewayPtrOutput
}

type hadoopClusterGatewayPtrType HadoopClusterGatewayArgs

func HadoopClusterGatewayPtr(v *HadoopClusterGatewayArgs) HadoopClusterGatewayPtrInput {
	return (*hadoopClusterGatewayPtrType)(v)
}

func (*hadoopClusterGatewayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HadoopClusterGateway)(nil)).Elem()
}

func (i *hadoopClusterGatewayPtrType) ToHadoopClusterGatewayPtrOutput() HadoopClusterGatewayPtrOutput {
	return i.ToHadoopClusterGatewayPtrOutputWithContext(context.Background())
}

func (i *hadoopClusterGatewayPtrType) ToHadoopClusterGatewayPtrOutputWithContext(ctx context.Context) HadoopClusterGatewayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HadoopClusterGatewayPtrOutput)
}

type HadoopClusterGatewayOutput struct{ *pulumi.OutputState }

func (HadoopClusterGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HadoopClusterGateway)(nil)).Elem()
}

func (o HadoopClusterGatewayOutput) ToHadoopClusterGatewayOutput() HadoopClusterGatewayOutput {
	return o
}

func (o HadoopClusterGatewayOutput) ToHadoopClusterGatewayOutputWithContext(ctx context.Context) HadoopClusterGatewayOutput {
	return o
}

func (o HadoopClusterGatewayOutput) ToHadoopClusterGatewayPtrOutput() HadoopClusterGatewayPtrOutput {
	return o.ToHadoopClusterGatewayPtrOutputWithContext(context.Background())
}

func (o HadoopClusterGatewayOutput) ToHadoopClusterGatewayPtrOutputWithContext(ctx context.Context) HadoopClusterGatewayPtrOutput {
	return o.ApplyT(func(v HadoopClusterGateway) *HadoopClusterGateway {
		return &v
	}).(HadoopClusterGatewayPtrOutput)
}

// Is the Ambari portal enabled? Changing this forces a new resource to be created.
func (o HadoopClusterGatewayOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v HadoopClusterGateway) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The password used for the Ambari Portal. Changing this forces a new resource to be created.
func (o HadoopClusterGatewayOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v HadoopClusterGateway) string { return v.Password }).(pulumi.StringOutput)
}

// The username used for the Ambari Portal. Changing this forces a new resource to be created.
func (o HadoopClusterGatewayOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v HadoopClusterGateway) string { return v.Username }).(pulumi.StringOutput)
}

type HadoopClusterGatewayPtrOutput struct{ *pulumi.OutputState }

func (HadoopClusterGatewayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HadoopClusterGateway)(nil)).Elem()
}

func (o HadoopClusterGatewayPtrOutput) ToHadoopClusterGatewayPtrOutput() HadoopClusterGatewayPtrOutput {
	return o
}

func (o HadoopClusterGatewayPtrOutput) ToHadoopClusterGatewayPtrOutputWithContext(ctx context.Context) HadoopClusterGatewayPtrOutput {
	return o
}

func (o HadoopClusterGatewayPtrOutput) Elem() HadoopClusterGatewayOutput {
	return o.ApplyT(func(v *HadoopClusterGateway) HadoopClusterGateway { return *v }).(HadoopClusterGatewayOutput)
}

// Is the Ambari portal enabled? Changing this forces a new resource to be created.
func (o HadoopClusterGatewayPtrOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v HadoopClusterGateway) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The password used for the Ambari Portal. Changing this forces a new resource to be created.
func (o HadoopClusterGatewayPtrOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v HadoopClusterGateway) string { return v.Password }).(pulumi.StringOutput)
}

// The username used for the Ambari Portal. Changing this forces a new resource to be created.
func (o HadoopClusterGatewayPtrOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v HadoopClusterGateway) string { return v.Username }).(pulumi.StringOutput)
}

type HadoopClusterRoles struct {
	// A `edgeNode` block as defined below.
	EdgeNode *HadoopClusterRolesEdgeNode `pulumi:"edgeNode"`
	// A `headNode` block as defined above.
	HeadNode HadoopClusterRolesHeadNode `pulumi:"headNode"`
	// A `workerNode` block as defined below.
	WorkerNode HadoopClusterRolesWorkerNode `pulumi:"workerNode"`
	// A `zookeeperNode` block as defined below.
	ZookeeperNode HadoopClusterRolesZookeeperNode `pulumi:"zookeeperNode"`
}

type HadoopClusterRolesInput interface {
	pulumi.Input

	ToHadoopClusterRolesOutput() HadoopClusterRolesOutput
	ToHadoopClusterRolesOutputWithContext(context.Context) HadoopClusterRolesOutput
}

type HadoopClusterRolesArgs struct {
	// A `edgeNode` block as defined below.
	EdgeNode HadoopClusterRolesEdgeNodePtrInput `pulumi:"edgeNode"`
	// A `headNode` block as defined above.
	HeadNode HadoopClusterRolesHeadNodeInput `pulumi:"headNode"`
	// A `workerNode` block as defined below.
	WorkerNode HadoopClusterRolesWorkerNodeInput `pulumi:"workerNode"`
	// A `zookeeperNode` block as defined below.
	ZookeeperNode HadoopClusterRolesZookeeperNodeInput `pulumi:"zookeeperNode"`
}

func (HadoopClusterRolesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HadoopClusterRoles)(nil)).Elem()
}

func (i HadoopClusterRolesArgs) ToHadoopClusterRolesOutput() HadoopClusterRolesOutput {
	return i.ToHadoopClusterRolesOutputWithContext(context.Background())
}

func (i HadoopClusterRolesArgs) ToHadoopClusterRolesOutputWithContext(ctx context.Context) HadoopClusterRolesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HadoopClusterRolesOutput)
}

func (i HadoopClusterRolesArgs) ToHadoopClusterRolesPtrOutput() HadoopClusterRolesPtrOutput {
	return i.ToHadoopClusterRolesPtrOutputWithContext(context.Background())
}

func (i HadoopClusterRolesArgs) ToHadoopClusterRolesPtrOutputWithContext(ctx context.Context) HadoopClusterRolesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HadoopClusterRolesOutput).ToHadoopClusterRolesPtrOutputWithContext(ctx)
}

type HadoopClusterRolesPtrInput interface {
	pulumi.Input

	ToHadoopClusterRolesPtrOutput() HadoopClusterRolesPtrOutput
	ToHadoopClusterRolesPtrOutputWithContext(context.Context) HadoopClusterRolesPtrOutput
}

type hadoopClusterRolesPtrType HadoopClusterRolesArgs

func HadoopClusterRolesPtr(v *HadoopClusterRolesArgs) HadoopClusterRolesPtrInput {
	return (*hadoopClusterRolesPtrType)(v)
}

func (*hadoopClusterRolesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HadoopClusterRoles)(nil)).Elem()
}

func (i *hadoopClusterRolesPtrType) ToHadoopClusterRolesPtrOutput() HadoopClusterRolesPtrOutput {
	return i.ToHadoopClusterRolesPtrOutputWithContext(context.Background())
}

func (i *hadoopClusterRolesPtrType) ToHadoopClusterRolesPtrOutputWithContext(ctx context.Context) HadoopClusterRolesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HadoopClusterRolesPtrOutput)
}

type HadoopClusterRolesOutput struct{ *pulumi.OutputState }

func (HadoopClusterRolesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HadoopClusterRoles)(nil)).Elem()
}

func (o HadoopClusterRolesOutput) ToHadoopClusterRolesOutput() HadoopClusterRolesOutput {
	return o
}

func (o HadoopClusterRolesOutput) ToHadoopClusterRolesOutputWithContext(ctx context.Context) HadoopClusterRolesOutput {
	return o
}

func (o HadoopClusterRolesOutput) ToHadoopClusterRolesPtrOutput() HadoopClusterRolesPtrOutput {
	return o.ToHadoopClusterRolesPtrOutputWithContext(context.Background())
}

func (o HadoopClusterRolesOutput) ToHadoopClusterRolesPtrOutputWithContext(ctx context.Context) HadoopClusterRolesPtrOutput {
	return o.ApplyT(func(v HadoopClusterRoles) *HadoopClusterRoles {
		return &v
	}).(HadoopClusterRolesPtrOutput)
}

// A `edgeNode` block as defined below.
func (o HadoopClusterRolesOutput) EdgeNode() HadoopClusterRolesEdgeNodePtrOutput {
	return o.ApplyT(func(v HadoopClusterRoles) *HadoopClusterRolesEdgeNode { return v.EdgeNode }).(HadoopClusterRolesEdgeNodePtrOutput)
}

// A `headNode` block as defined above.
func (o HadoopClusterRolesOutput) HeadNode() HadoopClusterRolesHeadNodeOutput {
	return o.ApplyT(func(v HadoopClusterRoles) HadoopClusterRolesHeadNode { return v.HeadNode }).(HadoopClusterRolesHeadNodeOutput)
}

// A `workerNode` block as defined below.
func (o HadoopClusterRolesOutput) WorkerNode() HadoopClusterRolesWorkerNodeOutput {
	return o.ApplyT(func(v HadoopClusterRoles) HadoopClusterRolesWorkerNode { return v.WorkerNode }).(HadoopClusterRolesWorkerNodeOutput)
}

// A `zookeeperNode` block as defined below.
func (o HadoopClusterRolesOutput) ZookeeperNode() HadoopClusterRolesZookeeperNodeOutput {
	return o.ApplyT(func(v HadoopClusterRoles) HadoopClusterRolesZookeeperNode { return v.ZookeeperNode }).(HadoopClusterRolesZookeeperNodeOutput)
}

type HadoopClusterRolesPtrOutput struct{ *pulumi.OutputState }

func (HadoopClusterRolesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HadoopClusterRoles)(nil)).Elem()
}

func (o HadoopClusterRolesPtrOutput) ToHadoopClusterRolesPtrOutput() HadoopClusterRolesPtrOutput {
	return o
}

func (o HadoopClusterRolesPtrOutput) ToHadoopClusterRolesPtrOutputWithContext(ctx context.Context) HadoopClusterRolesPtrOutput {
	return o
}

func (o HadoopClusterRolesPtrOutput) Elem() HadoopClusterRolesOutput {
	return o.ApplyT(func(v *HadoopClusterRoles) HadoopClusterRoles { return *v }).(HadoopClusterRolesOutput)
}

// A `edgeNode` block as defined below.
func (o HadoopClusterRolesPtrOutput) EdgeNode() HadoopClusterRolesEdgeNodePtrOutput {
	return o.ApplyT(func(v HadoopClusterRoles) *HadoopClusterRolesEdgeNode { return v.EdgeNode }).(HadoopClusterRolesEdgeNodePtrOutput)
}

// A `headNode` block as defined above.
func (o HadoopClusterRolesPtrOutput) HeadNode() HadoopClusterRolesHeadNodeOutput {
	return o.ApplyT(func(v HadoopClusterRoles) HadoopClusterRolesHeadNode { return v.HeadNode }).(HadoopClusterRolesHeadNodeOutput)
}

// A `workerNode` block as defined below.
func (o HadoopClusterRolesPtrOutput) WorkerNode() HadoopClusterRolesWorkerNodeOutput {
	return o.ApplyT(func(v HadoopClusterRoles) HadoopClusterRolesWorkerNode { return v.WorkerNode }).(HadoopClusterRolesWorkerNodeOutput)
}

// A `zookeeperNode` block as defined below.
func (o HadoopClusterRolesPtrOutput) ZookeeperNode() HadoopClusterRolesZookeeperNodeOutput {
	return o.ApplyT(func(v HadoopClusterRoles) HadoopClusterRolesZookeeperNode { return v.ZookeeperNode }).(HadoopClusterRolesZookeeperNodeOutput)
}

type HadoopClusterRolesEdgeNode struct {
	// A `installScriptAction` block as defined below.
	InstallScriptActions []HadoopClusterRolesEdgeNodeInstallScriptAction `pulumi:"installScriptActions"`
	// The number of instances which should be run for the Worker Nodes.
	TargetInstanceCount int `pulumi:"targetInstanceCount"`
	// The Size of the Virtual Machine which should be used as the Edge Nodes. Changing this forces a new resource to be created.
	VmSize string `pulumi:"vmSize"`
}

type HadoopClusterRolesEdgeNodeInput interface {
	pulumi.Input

	ToHadoopClusterRolesEdgeNodeOutput() HadoopClusterRolesEdgeNodeOutput
	ToHadoopClusterRolesEdgeNodeOutputWithContext(context.Context) HadoopClusterRolesEdgeNodeOutput
}

type HadoopClusterRolesEdgeNodeArgs struct {
	// A `installScriptAction` block as defined below.
	InstallScriptActions HadoopClusterRolesEdgeNodeInstallScriptActionArrayInput `pulumi:"installScriptActions"`
	// The number of instances which should be run for the Worker Nodes.
	TargetInstanceCount pulumi.IntInput `pulumi:"targetInstanceCount"`
	// The Size of the Virtual Machine which should be used as the Edge Nodes. Changing this forces a new resource to be created.
	VmSize pulumi.StringInput `pulumi:"vmSize"`
}

func (HadoopClusterRolesEdgeNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HadoopClusterRolesEdgeNode)(nil)).Elem()
}

func (i HadoopClusterRolesEdgeNodeArgs) ToHadoopClusterRolesEdgeNodeOutput() HadoopClusterRolesEdgeNodeOutput {
	return i.ToHadoopClusterRolesEdgeNodeOutputWithContext(context.Background())
}

func (i HadoopClusterRolesEdgeNodeArgs) ToHadoopClusterRolesEdgeNodeOutputWithContext(ctx context.Context) HadoopClusterRolesEdgeNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HadoopClusterRolesEdgeNodeOutput)
}

func (i HadoopClusterRolesEdgeNodeArgs) ToHadoopClusterRolesEdgeNodePtrOutput() HadoopClusterRolesEdgeNodePtrOutput {
	return i.ToHadoopClusterRolesEdgeNodePtrOutputWithContext(context.Background())
}

func (i HadoopClusterRolesEdgeNodeArgs) ToHadoopClusterRolesEdgeNodePtrOutputWithContext(ctx context.Context) HadoopClusterRolesEdgeNodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HadoopClusterRolesEdgeNodeOutput).ToHadoopClusterRolesEdgeNodePtrOutputWithContext(ctx)
}

type HadoopClusterRolesEdgeNodePtrInput interface {
	pulumi.Input

	ToHadoopClusterRolesEdgeNodePtrOutput() HadoopClusterRolesEdgeNodePtrOutput
	ToHadoopClusterRolesEdgeNodePtrOutputWithContext(context.Context) HadoopClusterRolesEdgeNodePtrOutput
}

type hadoopClusterRolesEdgeNodePtrType HadoopClusterRolesEdgeNodeArgs

func HadoopClusterRolesEdgeNodePtr(v *HadoopClusterRolesEdgeNodeArgs) HadoopClusterRolesEdgeNodePtrInput {
	return (*hadoopClusterRolesEdgeNodePtrType)(v)
}

func (*hadoopClusterRolesEdgeNodePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HadoopClusterRolesEdgeNode)(nil)).Elem()
}

func (i *hadoopClusterRolesEdgeNodePtrType) ToHadoopClusterRolesEdgeNodePtrOutput() HadoopClusterRolesEdgeNodePtrOutput {
	return i.ToHadoopClusterRolesEdgeNodePtrOutputWithContext(context.Background())
}

func (i *hadoopClusterRolesEdgeNodePtrType) ToHadoopClusterRolesEdgeNodePtrOutputWithContext(ctx context.Context) HadoopClusterRolesEdgeNodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HadoopClusterRolesEdgeNodePtrOutput)
}

type HadoopClusterRolesEdgeNodeOutput struct{ *pulumi.OutputState }

func (HadoopClusterRolesEdgeNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HadoopClusterRolesEdgeNode)(nil)).Elem()
}

func (o HadoopClusterRolesEdgeNodeOutput) ToHadoopClusterRolesEdgeNodeOutput() HadoopClusterRolesEdgeNodeOutput {
	return o
}

func (o HadoopClusterRolesEdgeNodeOutput) ToHadoopClusterRolesEdgeNodeOutputWithContext(ctx context.Context) HadoopClusterRolesEdgeNodeOutput {
	return o
}

func (o HadoopClusterRolesEdgeNodeOutput) ToHadoopClusterRolesEdgeNodePtrOutput() HadoopClusterRolesEdgeNodePtrOutput {
	return o.ToHadoopClusterRolesEdgeNodePtrOutputWithContext(context.Background())
}

func (o HadoopClusterRolesEdgeNodeOutput) ToHadoopClusterRolesEdgeNodePtrOutputWithContext(ctx context.Context) HadoopClusterRolesEdgeNodePtrOutput {
	return o.ApplyT(func(v HadoopClusterRolesEdgeNode) *HadoopClusterRolesEdgeNode {
		return &v
	}).(HadoopClusterRolesEdgeNodePtrOutput)
}

// A `installScriptAction` block as defined below.
func (o HadoopClusterRolesEdgeNodeOutput) InstallScriptActions() HadoopClusterRolesEdgeNodeInstallScriptActionArrayOutput {
	return o.ApplyT(func(v HadoopClusterRolesEdgeNode) []HadoopClusterRolesEdgeNodeInstallScriptAction {
		return v.InstallScriptActions
	}).(HadoopClusterRolesEdgeNodeInstallScriptActionArrayOutput)
}

// The number of instances which should be run for the Worker Nodes.
func (o HadoopClusterRolesEdgeNodeOutput) TargetInstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v HadoopClusterRolesEdgeNode) int { return v.TargetInstanceCount }).(pulumi.IntOutput)
}

// The Size of the Virtual Machine which should be used as the Edge Nodes. Changing this forces a new resource to be created.
func (o HadoopClusterRolesEdgeNodeOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v HadoopClusterRolesEdgeNode) string { return v.VmSize }).(pulumi.StringOutput)
}

type HadoopClusterRolesEdgeNodePtrOutput struct{ *pulumi.OutputState }

func (HadoopClusterRolesEdgeNodePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HadoopClusterRolesEdgeNode)(nil)).Elem()
}

func (o HadoopClusterRolesEdgeNodePtrOutput) ToHadoopClusterRolesEdgeNodePtrOutput() HadoopClusterRolesEdgeNodePtrOutput {
	return o
}

func (o HadoopClusterRolesEdgeNodePtrOutput) ToHadoopClusterRolesEdgeNodePtrOutputWithContext(ctx context.Context) HadoopClusterRolesEdgeNodePtrOutput {
	return o
}

func (o HadoopClusterRolesEdgeNodePtrOutput) Elem() HadoopClusterRolesEdgeNodeOutput {
	return o.ApplyT(func(v *HadoopClusterRolesEdgeNode) HadoopClusterRolesEdgeNode { return *v }).(HadoopClusterRolesEdgeNodeOutput)
}

// A `installScriptAction` block as defined below.
func (o HadoopClusterRolesEdgeNodePtrOutput) InstallScriptActions() HadoopClusterRolesEdgeNodeInstallScriptActionArrayOutput {
	return o.ApplyT(func(v HadoopClusterRolesEdgeNode) []HadoopClusterRolesEdgeNodeInstallScriptAction {
		return v.InstallScriptActions
	}).(HadoopClusterRolesEdgeNodeInstallScriptActionArrayOutput)
}

// The number of instances which should be run for the Worker Nodes.
func (o HadoopClusterRolesEdgeNodePtrOutput) TargetInstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v HadoopClusterRolesEdgeNode) int { return v.TargetInstanceCount }).(pulumi.IntOutput)
}

// The Size of the Virtual Machine which should be used as the Edge Nodes. Changing this forces a new resource to be created.
func (o HadoopClusterRolesEdgeNodePtrOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v HadoopClusterRolesEdgeNode) string { return v.VmSize }).(pulumi.StringOutput)
}

type HadoopClusterRolesEdgeNodeInstallScriptAction struct {
	// The name of the install script action. Changing this forces a new resource to be created.
	Name string `pulumi:"name"`
	// The URI pointing to the script to run during the installation of the edge node. Changing this forces a new resource to be created.
	Uri string `pulumi:"uri"`
}

type HadoopClusterRolesEdgeNodeInstallScriptActionInput interface {
	pulumi.Input

	ToHadoopClusterRolesEdgeNodeInstallScriptActionOutput() HadoopClusterRolesEdgeNodeInstallScriptActionOutput
	ToHadoopClusterRolesEdgeNodeInstallScriptActionOutputWithContext(context.Context) HadoopClusterRolesEdgeNodeInstallScriptActionOutput
}

type HadoopClusterRolesEdgeNodeInstallScriptActionArgs struct {
	// The name of the install script action. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The URI pointing to the script to run during the installation of the edge node. Changing this forces a new resource to be created.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (HadoopClusterRolesEdgeNodeInstallScriptActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HadoopClusterRolesEdgeNodeInstallScriptAction)(nil)).Elem()
}

func (i HadoopClusterRolesEdgeNodeInstallScriptActionArgs) ToHadoopClusterRolesEdgeNodeInstallScriptActionOutput() HadoopClusterRolesEdgeNodeInstallScriptActionOutput {
	return i.ToHadoopClusterRolesEdgeNodeInstallScriptActionOutputWithContext(context.Background())
}

func (i HadoopClusterRolesEdgeNodeInstallScriptActionArgs) ToHadoopClusterRolesEdgeNodeInstallScriptActionOutputWithContext(ctx context.Context) HadoopClusterRolesEdgeNodeInstallScriptActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HadoopClusterRolesEdgeNodeInstallScriptActionOutput)
}

type HadoopClusterRolesEdgeNodeInstallScriptActionArrayInput interface {
	pulumi.Input

	ToHadoopClusterRolesEdgeNodeInstallScriptActionArrayOutput() HadoopClusterRolesEdgeNodeInstallScriptActionArrayOutput
	ToHadoopClusterRolesEdgeNodeInstallScriptActionArrayOutputWithContext(context.Context) HadoopClusterRolesEdgeNodeInstallScriptActionArrayOutput
}

type HadoopClusterRolesEdgeNodeInstallScriptActionArray []HadoopClusterRolesEdgeNodeInstallScriptActionInput

func (HadoopClusterRolesEdgeNodeInstallScriptActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HadoopClusterRolesEdgeNodeInstallScriptAction)(nil)).Elem()
}

func (i HadoopClusterRolesEdgeNodeInstallScriptActionArray) ToHadoopClusterRolesEdgeNodeInstallScriptActionArrayOutput() HadoopClusterRolesEdgeNodeInstallScriptActionArrayOutput {
	return i.ToHadoopClusterRolesEdgeNodeInstallScriptActionArrayOutputWithContext(context.Background())
}

func (i HadoopClusterRolesEdgeNodeInstallScriptActionArray) ToHadoopClusterRolesEdgeNodeInstallScriptActionArrayOutputWithContext(ctx context.Context) HadoopClusterRolesEdgeNodeInstallScriptActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HadoopClusterRolesEdgeNodeInstallScriptActionArrayOutput)
}

type HadoopClusterRolesEdgeNodeInstallScriptActionOutput struct{ *pulumi.OutputState }

func (HadoopClusterRolesEdgeNodeInstallScriptActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HadoopClusterRolesEdgeNodeInstallScriptAction)(nil)).Elem()
}

func (o HadoopClusterRolesEdgeNodeInstallScriptActionOutput) ToHadoopClusterRolesEdgeNodeInstallScriptActionOutput() HadoopClusterRolesEdgeNodeInstallScriptActionOutput {
	return o
}

func (o HadoopClusterRolesEdgeNodeInstallScriptActionOutput) ToHadoopClusterRolesEdgeNodeInstallScriptActionOutputWithContext(ctx context.Context) HadoopClusterRolesEdgeNodeInstallScriptActionOutput {
	return o
}

// The name of the install script action. Changing this forces a new resource to be created.
func (o HadoopClusterRolesEdgeNodeInstallScriptActionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v HadoopClusterRolesEdgeNodeInstallScriptAction) string { return v.Name }).(pulumi.StringOutput)
}

// The URI pointing to the script to run during the installation of the edge node. Changing this forces a new resource to be created.
func (o HadoopClusterRolesEdgeNodeInstallScriptActionOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v HadoopClusterRolesEdgeNodeInstallScriptAction) string { return v.Uri }).(pulumi.StringOutput)
}

type HadoopClusterRolesEdgeNodeInstallScriptActionArrayOutput struct{ *pulumi.OutputState }

func (HadoopClusterRolesEdgeNodeInstallScriptActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HadoopClusterRolesEdgeNodeInstallScriptAction)(nil)).Elem()
}

func (o HadoopClusterRolesEdgeNodeInstallScriptActionArrayOutput) ToHadoopClusterRolesEdgeNodeInstallScriptActionArrayOutput() HadoopClusterRolesEdgeNodeInstallScriptActionArrayOutput {
	return o
}

func (o HadoopClusterRolesEdgeNodeInstallScriptActionArrayOutput) ToHadoopClusterRolesEdgeNodeInstallScriptActionArrayOutputWithContext(ctx context.Context) HadoopClusterRolesEdgeNodeInstallScriptActionArrayOutput {
	return o
}

func (o HadoopClusterRolesEdgeNodeInstallScriptActionArrayOutput) Index(i pulumi.IntInput) HadoopClusterRolesEdgeNodeInstallScriptActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HadoopClusterRolesEdgeNodeInstallScriptAction {
		return vs[0].([]HadoopClusterRolesEdgeNodeInstallScriptAction)[vs[1].(int)]
	}).(HadoopClusterRolesEdgeNodeInstallScriptActionOutput)
}

type HadoopClusterRolesHeadNode struct {
	// The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
	Password *string `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
	SshKeys []string `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId *string `pulumi:"subnetId"`
	// The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
	// The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId *string `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
	VmSize string `pulumi:"vmSize"`
}

type HadoopClusterRolesHeadNodeInput interface {
	pulumi.Input

	ToHadoopClusterRolesHeadNodeOutput() HadoopClusterRolesHeadNodeOutput
	ToHadoopClusterRolesHeadNodeOutputWithContext(context.Context) HadoopClusterRolesHeadNodeOutput
}

type HadoopClusterRolesHeadNodeArgs struct {
	// The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
	SshKeys pulumi.StringArrayInput `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
	// The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId pulumi.StringPtrInput `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
	VmSize pulumi.StringInput `pulumi:"vmSize"`
}

func (HadoopClusterRolesHeadNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HadoopClusterRolesHeadNode)(nil)).Elem()
}

func (i HadoopClusterRolesHeadNodeArgs) ToHadoopClusterRolesHeadNodeOutput() HadoopClusterRolesHeadNodeOutput {
	return i.ToHadoopClusterRolesHeadNodeOutputWithContext(context.Background())
}

func (i HadoopClusterRolesHeadNodeArgs) ToHadoopClusterRolesHeadNodeOutputWithContext(ctx context.Context) HadoopClusterRolesHeadNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HadoopClusterRolesHeadNodeOutput)
}

type HadoopClusterRolesHeadNodeOutput struct{ *pulumi.OutputState }

func (HadoopClusterRolesHeadNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HadoopClusterRolesHeadNode)(nil)).Elem()
}

func (o HadoopClusterRolesHeadNodeOutput) ToHadoopClusterRolesHeadNodeOutput() HadoopClusterRolesHeadNodeOutput {
	return o
}

func (o HadoopClusterRolesHeadNodeOutput) ToHadoopClusterRolesHeadNodeOutputWithContext(ctx context.Context) HadoopClusterRolesHeadNodeOutput {
	return o
}

// The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
func (o HadoopClusterRolesHeadNodeOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HadoopClusterRolesHeadNode) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
func (o HadoopClusterRolesHeadNodeOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HadoopClusterRolesHeadNode) []string { return v.SshKeys }).(pulumi.StringArrayOutput)
}

// The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o HadoopClusterRolesHeadNodeOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HadoopClusterRolesHeadNode) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
func (o HadoopClusterRolesHeadNodeOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v HadoopClusterRolesHeadNode) string { return v.Username }).(pulumi.StringOutput)
}

// The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o HadoopClusterRolesHeadNodeOutput) VirtualNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HadoopClusterRolesHeadNode) *string { return v.VirtualNetworkId }).(pulumi.StringPtrOutput)
}

// The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
func (o HadoopClusterRolesHeadNodeOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v HadoopClusterRolesHeadNode) string { return v.VmSize }).(pulumi.StringOutput)
}

type HadoopClusterRolesWorkerNode struct {
	// The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
	MinInstanceCount *int `pulumi:"minInstanceCount"`
	// The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
	Password *string `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
	SshKeys []string `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId *string `pulumi:"subnetId"`
	// The number of instances which should be run for the Worker Nodes.
	TargetInstanceCount int `pulumi:"targetInstanceCount"`
	// The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
	// The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId *string `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
	VmSize string `pulumi:"vmSize"`
}

type HadoopClusterRolesWorkerNodeInput interface {
	pulumi.Input

	ToHadoopClusterRolesWorkerNodeOutput() HadoopClusterRolesWorkerNodeOutput
	ToHadoopClusterRolesWorkerNodeOutputWithContext(context.Context) HadoopClusterRolesWorkerNodeOutput
}

type HadoopClusterRolesWorkerNodeArgs struct {
	// The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
	MinInstanceCount pulumi.IntPtrInput `pulumi:"minInstanceCount"`
	// The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
	SshKeys pulumi.StringArrayInput `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// The number of instances which should be run for the Worker Nodes.
	TargetInstanceCount pulumi.IntInput `pulumi:"targetInstanceCount"`
	// The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
	// The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId pulumi.StringPtrInput `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
	VmSize pulumi.StringInput `pulumi:"vmSize"`
}

func (HadoopClusterRolesWorkerNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HadoopClusterRolesWorkerNode)(nil)).Elem()
}

func (i HadoopClusterRolesWorkerNodeArgs) ToHadoopClusterRolesWorkerNodeOutput() HadoopClusterRolesWorkerNodeOutput {
	return i.ToHadoopClusterRolesWorkerNodeOutputWithContext(context.Background())
}

func (i HadoopClusterRolesWorkerNodeArgs) ToHadoopClusterRolesWorkerNodeOutputWithContext(ctx context.Context) HadoopClusterRolesWorkerNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HadoopClusterRolesWorkerNodeOutput)
}

type HadoopClusterRolesWorkerNodeOutput struct{ *pulumi.OutputState }

func (HadoopClusterRolesWorkerNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HadoopClusterRolesWorkerNode)(nil)).Elem()
}

func (o HadoopClusterRolesWorkerNodeOutput) ToHadoopClusterRolesWorkerNodeOutput() HadoopClusterRolesWorkerNodeOutput {
	return o
}

func (o HadoopClusterRolesWorkerNodeOutput) ToHadoopClusterRolesWorkerNodeOutputWithContext(ctx context.Context) HadoopClusterRolesWorkerNodeOutput {
	return o
}

// The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
func (o HadoopClusterRolesWorkerNodeOutput) MinInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HadoopClusterRolesWorkerNode) *int { return v.MinInstanceCount }).(pulumi.IntPtrOutput)
}

// The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
func (o HadoopClusterRolesWorkerNodeOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HadoopClusterRolesWorkerNode) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
func (o HadoopClusterRolesWorkerNodeOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HadoopClusterRolesWorkerNode) []string { return v.SshKeys }).(pulumi.StringArrayOutput)
}

// The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o HadoopClusterRolesWorkerNodeOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HadoopClusterRolesWorkerNode) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The number of instances which should be run for the Worker Nodes.
func (o HadoopClusterRolesWorkerNodeOutput) TargetInstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v HadoopClusterRolesWorkerNode) int { return v.TargetInstanceCount }).(pulumi.IntOutput)
}

// The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
func (o HadoopClusterRolesWorkerNodeOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v HadoopClusterRolesWorkerNode) string { return v.Username }).(pulumi.StringOutput)
}

// The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o HadoopClusterRolesWorkerNodeOutput) VirtualNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HadoopClusterRolesWorkerNode) *string { return v.VirtualNetworkId }).(pulumi.StringPtrOutput)
}

// The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
func (o HadoopClusterRolesWorkerNodeOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v HadoopClusterRolesWorkerNode) string { return v.VmSize }).(pulumi.StringOutput)
}

type HadoopClusterRolesZookeeperNode struct {
	// The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
	Password *string `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
	SshKeys []string `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId *string `pulumi:"subnetId"`
	// The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
	// The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId *string `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
	VmSize string `pulumi:"vmSize"`
}

type HadoopClusterRolesZookeeperNodeInput interface {
	pulumi.Input

	ToHadoopClusterRolesZookeeperNodeOutput() HadoopClusterRolesZookeeperNodeOutput
	ToHadoopClusterRolesZookeeperNodeOutputWithContext(context.Context) HadoopClusterRolesZookeeperNodeOutput
}

type HadoopClusterRolesZookeeperNodeArgs struct {
	// The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
	SshKeys pulumi.StringArrayInput `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
	// The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId pulumi.StringPtrInput `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
	VmSize pulumi.StringInput `pulumi:"vmSize"`
}

func (HadoopClusterRolesZookeeperNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HadoopClusterRolesZookeeperNode)(nil)).Elem()
}

func (i HadoopClusterRolesZookeeperNodeArgs) ToHadoopClusterRolesZookeeperNodeOutput() HadoopClusterRolesZookeeperNodeOutput {
	return i.ToHadoopClusterRolesZookeeperNodeOutputWithContext(context.Background())
}

func (i HadoopClusterRolesZookeeperNodeArgs) ToHadoopClusterRolesZookeeperNodeOutputWithContext(ctx context.Context) HadoopClusterRolesZookeeperNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HadoopClusterRolesZookeeperNodeOutput)
}

type HadoopClusterRolesZookeeperNodeOutput struct{ *pulumi.OutputState }

func (HadoopClusterRolesZookeeperNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HadoopClusterRolesZookeeperNode)(nil)).Elem()
}

func (o HadoopClusterRolesZookeeperNodeOutput) ToHadoopClusterRolesZookeeperNodeOutput() HadoopClusterRolesZookeeperNodeOutput {
	return o
}

func (o HadoopClusterRolesZookeeperNodeOutput) ToHadoopClusterRolesZookeeperNodeOutputWithContext(ctx context.Context) HadoopClusterRolesZookeeperNodeOutput {
	return o
}

// The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
func (o HadoopClusterRolesZookeeperNodeOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HadoopClusterRolesZookeeperNode) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
func (o HadoopClusterRolesZookeeperNodeOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HadoopClusterRolesZookeeperNode) []string { return v.SshKeys }).(pulumi.StringArrayOutput)
}

// The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o HadoopClusterRolesZookeeperNodeOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HadoopClusterRolesZookeeperNode) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
func (o HadoopClusterRolesZookeeperNodeOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v HadoopClusterRolesZookeeperNode) string { return v.Username }).(pulumi.StringOutput)
}

// The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o HadoopClusterRolesZookeeperNodeOutput) VirtualNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HadoopClusterRolesZookeeperNode) *string { return v.VirtualNetworkId }).(pulumi.StringPtrOutput)
}

// The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
func (o HadoopClusterRolesZookeeperNodeOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v HadoopClusterRolesZookeeperNode) string { return v.VmSize }).(pulumi.StringOutput)
}

type HadoopClusterStorageAccount struct {
	// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
	IsDefault bool `pulumi:"isDefault"`
	// The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
	StorageAccountKey string `pulumi:"storageAccountKey"`
	// The ID of the Storage Container. Changing this forces a new resource to be created.
	StorageContainerId string `pulumi:"storageContainerId"`
}

type HadoopClusterStorageAccountInput interface {
	pulumi.Input

	ToHadoopClusterStorageAccountOutput() HadoopClusterStorageAccountOutput
	ToHadoopClusterStorageAccountOutputWithContext(context.Context) HadoopClusterStorageAccountOutput
}

type HadoopClusterStorageAccountArgs struct {
	// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
	IsDefault pulumi.BoolInput `pulumi:"isDefault"`
	// The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
	StorageAccountKey pulumi.StringInput `pulumi:"storageAccountKey"`
	// The ID of the Storage Container. Changing this forces a new resource to be created.
	StorageContainerId pulumi.StringInput `pulumi:"storageContainerId"`
}

func (HadoopClusterStorageAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HadoopClusterStorageAccount)(nil)).Elem()
}

func (i HadoopClusterStorageAccountArgs) ToHadoopClusterStorageAccountOutput() HadoopClusterStorageAccountOutput {
	return i.ToHadoopClusterStorageAccountOutputWithContext(context.Background())
}

func (i HadoopClusterStorageAccountArgs) ToHadoopClusterStorageAccountOutputWithContext(ctx context.Context) HadoopClusterStorageAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HadoopClusterStorageAccountOutput)
}

type HadoopClusterStorageAccountArrayInput interface {
	pulumi.Input

	ToHadoopClusterStorageAccountArrayOutput() HadoopClusterStorageAccountArrayOutput
	ToHadoopClusterStorageAccountArrayOutputWithContext(context.Context) HadoopClusterStorageAccountArrayOutput
}

type HadoopClusterStorageAccountArray []HadoopClusterStorageAccountInput

func (HadoopClusterStorageAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HadoopClusterStorageAccount)(nil)).Elem()
}

func (i HadoopClusterStorageAccountArray) ToHadoopClusterStorageAccountArrayOutput() HadoopClusterStorageAccountArrayOutput {
	return i.ToHadoopClusterStorageAccountArrayOutputWithContext(context.Background())
}

func (i HadoopClusterStorageAccountArray) ToHadoopClusterStorageAccountArrayOutputWithContext(ctx context.Context) HadoopClusterStorageAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HadoopClusterStorageAccountArrayOutput)
}

type HadoopClusterStorageAccountOutput struct{ *pulumi.OutputState }

func (HadoopClusterStorageAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HadoopClusterStorageAccount)(nil)).Elem()
}

func (o HadoopClusterStorageAccountOutput) ToHadoopClusterStorageAccountOutput() HadoopClusterStorageAccountOutput {
	return o
}

func (o HadoopClusterStorageAccountOutput) ToHadoopClusterStorageAccountOutputWithContext(ctx context.Context) HadoopClusterStorageAccountOutput {
	return o
}

// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
func (o HadoopClusterStorageAccountOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v HadoopClusterStorageAccount) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
func (o HadoopClusterStorageAccountOutput) StorageAccountKey() pulumi.StringOutput {
	return o.ApplyT(func(v HadoopClusterStorageAccount) string { return v.StorageAccountKey }).(pulumi.StringOutput)
}

// The ID of the Storage Container. Changing this forces a new resource to be created.
func (o HadoopClusterStorageAccountOutput) StorageContainerId() pulumi.StringOutput {
	return o.ApplyT(func(v HadoopClusterStorageAccount) string { return v.StorageContainerId }).(pulumi.StringOutput)
}

type HadoopClusterStorageAccountArrayOutput struct{ *pulumi.OutputState }

func (HadoopClusterStorageAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HadoopClusterStorageAccount)(nil)).Elem()
}

func (o HadoopClusterStorageAccountArrayOutput) ToHadoopClusterStorageAccountArrayOutput() HadoopClusterStorageAccountArrayOutput {
	return o
}

func (o HadoopClusterStorageAccountArrayOutput) ToHadoopClusterStorageAccountArrayOutputWithContext(ctx context.Context) HadoopClusterStorageAccountArrayOutput {
	return o
}

func (o HadoopClusterStorageAccountArrayOutput) Index(i pulumi.IntInput) HadoopClusterStorageAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HadoopClusterStorageAccount {
		return vs[0].([]HadoopClusterStorageAccount)[vs[1].(int)]
	}).(HadoopClusterStorageAccountOutput)
}

type HadoopClusterStorageAccountGen2 struct {
	// The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
	FilesystemId string `pulumi:"filesystemId"`
	// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
	IsDefault bool `pulumi:"isDefault"`
	// The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
	ManagedIdentityResourceId string `pulumi:"managedIdentityResourceId"`
	// The ID of the Storage Account. Changing this forces a new resource to be created.
	StorageResourceId string `pulumi:"storageResourceId"`
}

type HadoopClusterStorageAccountGen2Input interface {
	pulumi.Input

	ToHadoopClusterStorageAccountGen2Output() HadoopClusterStorageAccountGen2Output
	ToHadoopClusterStorageAccountGen2OutputWithContext(context.Context) HadoopClusterStorageAccountGen2Output
}

type HadoopClusterStorageAccountGen2Args struct {
	// The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
	FilesystemId pulumi.StringInput `pulumi:"filesystemId"`
	// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
	IsDefault pulumi.BoolInput `pulumi:"isDefault"`
	// The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
	ManagedIdentityResourceId pulumi.StringInput `pulumi:"managedIdentityResourceId"`
	// The ID of the Storage Account. Changing this forces a new resource to be created.
	StorageResourceId pulumi.StringInput `pulumi:"storageResourceId"`
}

func (HadoopClusterStorageAccountGen2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*HadoopClusterStorageAccountGen2)(nil)).Elem()
}

func (i HadoopClusterStorageAccountGen2Args) ToHadoopClusterStorageAccountGen2Output() HadoopClusterStorageAccountGen2Output {
	return i.ToHadoopClusterStorageAccountGen2OutputWithContext(context.Background())
}

func (i HadoopClusterStorageAccountGen2Args) ToHadoopClusterStorageAccountGen2OutputWithContext(ctx context.Context) HadoopClusterStorageAccountGen2Output {
	return pulumi.ToOutputWithContext(ctx, i).(HadoopClusterStorageAccountGen2Output)
}

func (i HadoopClusterStorageAccountGen2Args) ToHadoopClusterStorageAccountGen2PtrOutput() HadoopClusterStorageAccountGen2PtrOutput {
	return i.ToHadoopClusterStorageAccountGen2PtrOutputWithContext(context.Background())
}

func (i HadoopClusterStorageAccountGen2Args) ToHadoopClusterStorageAccountGen2PtrOutputWithContext(ctx context.Context) HadoopClusterStorageAccountGen2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HadoopClusterStorageAccountGen2Output).ToHadoopClusterStorageAccountGen2PtrOutputWithContext(ctx)
}

type HadoopClusterStorageAccountGen2PtrInput interface {
	pulumi.Input

	ToHadoopClusterStorageAccountGen2PtrOutput() HadoopClusterStorageAccountGen2PtrOutput
	ToHadoopClusterStorageAccountGen2PtrOutputWithContext(context.Context) HadoopClusterStorageAccountGen2PtrOutput
}

type hadoopClusterStorageAccountGen2PtrType HadoopClusterStorageAccountGen2Args

func HadoopClusterStorageAccountGen2Ptr(v *HadoopClusterStorageAccountGen2Args) HadoopClusterStorageAccountGen2PtrInput {
	return (*hadoopClusterStorageAccountGen2PtrType)(v)
}

func (*hadoopClusterStorageAccountGen2PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HadoopClusterStorageAccountGen2)(nil)).Elem()
}

func (i *hadoopClusterStorageAccountGen2PtrType) ToHadoopClusterStorageAccountGen2PtrOutput() HadoopClusterStorageAccountGen2PtrOutput {
	return i.ToHadoopClusterStorageAccountGen2PtrOutputWithContext(context.Background())
}

func (i *hadoopClusterStorageAccountGen2PtrType) ToHadoopClusterStorageAccountGen2PtrOutputWithContext(ctx context.Context) HadoopClusterStorageAccountGen2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HadoopClusterStorageAccountGen2PtrOutput)
}

type HadoopClusterStorageAccountGen2Output struct{ *pulumi.OutputState }

func (HadoopClusterStorageAccountGen2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*HadoopClusterStorageAccountGen2)(nil)).Elem()
}

func (o HadoopClusterStorageAccountGen2Output) ToHadoopClusterStorageAccountGen2Output() HadoopClusterStorageAccountGen2Output {
	return o
}

func (o HadoopClusterStorageAccountGen2Output) ToHadoopClusterStorageAccountGen2OutputWithContext(ctx context.Context) HadoopClusterStorageAccountGen2Output {
	return o
}

func (o HadoopClusterStorageAccountGen2Output) ToHadoopClusterStorageAccountGen2PtrOutput() HadoopClusterStorageAccountGen2PtrOutput {
	return o.ToHadoopClusterStorageAccountGen2PtrOutputWithContext(context.Background())
}

func (o HadoopClusterStorageAccountGen2Output) ToHadoopClusterStorageAccountGen2PtrOutputWithContext(ctx context.Context) HadoopClusterStorageAccountGen2PtrOutput {
	return o.ApplyT(func(v HadoopClusterStorageAccountGen2) *HadoopClusterStorageAccountGen2 {
		return &v
	}).(HadoopClusterStorageAccountGen2PtrOutput)
}

// The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
func (o HadoopClusterStorageAccountGen2Output) FilesystemId() pulumi.StringOutput {
	return o.ApplyT(func(v HadoopClusterStorageAccountGen2) string { return v.FilesystemId }).(pulumi.StringOutput)
}

// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
func (o HadoopClusterStorageAccountGen2Output) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v HadoopClusterStorageAccountGen2) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
func (o HadoopClusterStorageAccountGen2Output) ManagedIdentityResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v HadoopClusterStorageAccountGen2) string { return v.ManagedIdentityResourceId }).(pulumi.StringOutput)
}

// The ID of the Storage Account. Changing this forces a new resource to be created.
func (o HadoopClusterStorageAccountGen2Output) StorageResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v HadoopClusterStorageAccountGen2) string { return v.StorageResourceId }).(pulumi.StringOutput)
}

type HadoopClusterStorageAccountGen2PtrOutput struct{ *pulumi.OutputState }

func (HadoopClusterStorageAccountGen2PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HadoopClusterStorageAccountGen2)(nil)).Elem()
}

func (o HadoopClusterStorageAccountGen2PtrOutput) ToHadoopClusterStorageAccountGen2PtrOutput() HadoopClusterStorageAccountGen2PtrOutput {
	return o
}

func (o HadoopClusterStorageAccountGen2PtrOutput) ToHadoopClusterStorageAccountGen2PtrOutputWithContext(ctx context.Context) HadoopClusterStorageAccountGen2PtrOutput {
	return o
}

func (o HadoopClusterStorageAccountGen2PtrOutput) Elem() HadoopClusterStorageAccountGen2Output {
	return o.ApplyT(func(v *HadoopClusterStorageAccountGen2) HadoopClusterStorageAccountGen2 { return *v }).(HadoopClusterStorageAccountGen2Output)
}

// The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
func (o HadoopClusterStorageAccountGen2PtrOutput) FilesystemId() pulumi.StringOutput {
	return o.ApplyT(func(v HadoopClusterStorageAccountGen2) string { return v.FilesystemId }).(pulumi.StringOutput)
}

// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
func (o HadoopClusterStorageAccountGen2PtrOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v HadoopClusterStorageAccountGen2) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
func (o HadoopClusterStorageAccountGen2PtrOutput) ManagedIdentityResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v HadoopClusterStorageAccountGen2) string { return v.ManagedIdentityResourceId }).(pulumi.StringOutput)
}

// The ID of the Storage Account. Changing this forces a new resource to be created.
func (o HadoopClusterStorageAccountGen2PtrOutput) StorageResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v HadoopClusterStorageAccountGen2) string { return v.StorageResourceId }).(pulumi.StringOutput)
}

type InteractiveQueryClusterComponentVersion struct {
	InteractiveHive string `pulumi:"interactiveHive"`
}

type InteractiveQueryClusterComponentVersionInput interface {
	pulumi.Input

	ToInteractiveQueryClusterComponentVersionOutput() InteractiveQueryClusterComponentVersionOutput
	ToInteractiveQueryClusterComponentVersionOutputWithContext(context.Context) InteractiveQueryClusterComponentVersionOutput
}

type InteractiveQueryClusterComponentVersionArgs struct {
	InteractiveHive pulumi.StringInput `pulumi:"interactiveHive"`
}

func (InteractiveQueryClusterComponentVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InteractiveQueryClusterComponentVersion)(nil)).Elem()
}

func (i InteractiveQueryClusterComponentVersionArgs) ToInteractiveQueryClusterComponentVersionOutput() InteractiveQueryClusterComponentVersionOutput {
	return i.ToInteractiveQueryClusterComponentVersionOutputWithContext(context.Background())
}

func (i InteractiveQueryClusterComponentVersionArgs) ToInteractiveQueryClusterComponentVersionOutputWithContext(ctx context.Context) InteractiveQueryClusterComponentVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InteractiveQueryClusterComponentVersionOutput)
}

func (i InteractiveQueryClusterComponentVersionArgs) ToInteractiveQueryClusterComponentVersionPtrOutput() InteractiveQueryClusterComponentVersionPtrOutput {
	return i.ToInteractiveQueryClusterComponentVersionPtrOutputWithContext(context.Background())
}

func (i InteractiveQueryClusterComponentVersionArgs) ToInteractiveQueryClusterComponentVersionPtrOutputWithContext(ctx context.Context) InteractiveQueryClusterComponentVersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InteractiveQueryClusterComponentVersionOutput).ToInteractiveQueryClusterComponentVersionPtrOutputWithContext(ctx)
}

type InteractiveQueryClusterComponentVersionPtrInput interface {
	pulumi.Input

	ToInteractiveQueryClusterComponentVersionPtrOutput() InteractiveQueryClusterComponentVersionPtrOutput
	ToInteractiveQueryClusterComponentVersionPtrOutputWithContext(context.Context) InteractiveQueryClusterComponentVersionPtrOutput
}

type interactiveQueryClusterComponentVersionPtrType InteractiveQueryClusterComponentVersionArgs

func InteractiveQueryClusterComponentVersionPtr(v *InteractiveQueryClusterComponentVersionArgs) InteractiveQueryClusterComponentVersionPtrInput {
	return (*interactiveQueryClusterComponentVersionPtrType)(v)
}

func (*interactiveQueryClusterComponentVersionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InteractiveQueryClusterComponentVersion)(nil)).Elem()
}

func (i *interactiveQueryClusterComponentVersionPtrType) ToInteractiveQueryClusterComponentVersionPtrOutput() InteractiveQueryClusterComponentVersionPtrOutput {
	return i.ToInteractiveQueryClusterComponentVersionPtrOutputWithContext(context.Background())
}

func (i *interactiveQueryClusterComponentVersionPtrType) ToInteractiveQueryClusterComponentVersionPtrOutputWithContext(ctx context.Context) InteractiveQueryClusterComponentVersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InteractiveQueryClusterComponentVersionPtrOutput)
}

type InteractiveQueryClusterComponentVersionOutput struct{ *pulumi.OutputState }

func (InteractiveQueryClusterComponentVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InteractiveQueryClusterComponentVersion)(nil)).Elem()
}

func (o InteractiveQueryClusterComponentVersionOutput) ToInteractiveQueryClusterComponentVersionOutput() InteractiveQueryClusterComponentVersionOutput {
	return o
}

func (o InteractiveQueryClusterComponentVersionOutput) ToInteractiveQueryClusterComponentVersionOutputWithContext(ctx context.Context) InteractiveQueryClusterComponentVersionOutput {
	return o
}

func (o InteractiveQueryClusterComponentVersionOutput) ToInteractiveQueryClusterComponentVersionPtrOutput() InteractiveQueryClusterComponentVersionPtrOutput {
	return o.ToInteractiveQueryClusterComponentVersionPtrOutputWithContext(context.Background())
}

func (o InteractiveQueryClusterComponentVersionOutput) ToInteractiveQueryClusterComponentVersionPtrOutputWithContext(ctx context.Context) InteractiveQueryClusterComponentVersionPtrOutput {
	return o.ApplyT(func(v InteractiveQueryClusterComponentVersion) *InteractiveQueryClusterComponentVersion {
		return &v
	}).(InteractiveQueryClusterComponentVersionPtrOutput)
}
func (o InteractiveQueryClusterComponentVersionOutput) InteractiveHive() pulumi.StringOutput {
	return o.ApplyT(func(v InteractiveQueryClusterComponentVersion) string { return v.InteractiveHive }).(pulumi.StringOutput)
}

type InteractiveQueryClusterComponentVersionPtrOutput struct{ *pulumi.OutputState }

func (InteractiveQueryClusterComponentVersionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InteractiveQueryClusterComponentVersion)(nil)).Elem()
}

func (o InteractiveQueryClusterComponentVersionPtrOutput) ToInteractiveQueryClusterComponentVersionPtrOutput() InteractiveQueryClusterComponentVersionPtrOutput {
	return o
}

func (o InteractiveQueryClusterComponentVersionPtrOutput) ToInteractiveQueryClusterComponentVersionPtrOutputWithContext(ctx context.Context) InteractiveQueryClusterComponentVersionPtrOutput {
	return o
}

func (o InteractiveQueryClusterComponentVersionPtrOutput) Elem() InteractiveQueryClusterComponentVersionOutput {
	return o.ApplyT(func(v *InteractiveQueryClusterComponentVersion) InteractiveQueryClusterComponentVersion { return *v }).(InteractiveQueryClusterComponentVersionOutput)
}

func (o InteractiveQueryClusterComponentVersionPtrOutput) InteractiveHive() pulumi.StringOutput {
	return o.ApplyT(func(v InteractiveQueryClusterComponentVersion) string { return v.InteractiveHive }).(pulumi.StringOutput)
}

type InteractiveQueryClusterGateway struct {
	// Is the Ambari portal enabled? Changing this forces a new resource to be created.
	Enabled bool `pulumi:"enabled"`
	// The password used for the Ambari Portal. Changing this forces a new resource to be created.
	Password string `pulumi:"password"`
	// The username used for the Ambari Portal. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
}

type InteractiveQueryClusterGatewayInput interface {
	pulumi.Input

	ToInteractiveQueryClusterGatewayOutput() InteractiveQueryClusterGatewayOutput
	ToInteractiveQueryClusterGatewayOutputWithContext(context.Context) InteractiveQueryClusterGatewayOutput
}

type InteractiveQueryClusterGatewayArgs struct {
	// Is the Ambari portal enabled? Changing this forces a new resource to be created.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The password used for the Ambari Portal. Changing this forces a new resource to be created.
	Password pulumi.StringInput `pulumi:"password"`
	// The username used for the Ambari Portal. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
}

func (InteractiveQueryClusterGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InteractiveQueryClusterGateway)(nil)).Elem()
}

func (i InteractiveQueryClusterGatewayArgs) ToInteractiveQueryClusterGatewayOutput() InteractiveQueryClusterGatewayOutput {
	return i.ToInteractiveQueryClusterGatewayOutputWithContext(context.Background())
}

func (i InteractiveQueryClusterGatewayArgs) ToInteractiveQueryClusterGatewayOutputWithContext(ctx context.Context) InteractiveQueryClusterGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InteractiveQueryClusterGatewayOutput)
}

func (i InteractiveQueryClusterGatewayArgs) ToInteractiveQueryClusterGatewayPtrOutput() InteractiveQueryClusterGatewayPtrOutput {
	return i.ToInteractiveQueryClusterGatewayPtrOutputWithContext(context.Background())
}

func (i InteractiveQueryClusterGatewayArgs) ToInteractiveQueryClusterGatewayPtrOutputWithContext(ctx context.Context) InteractiveQueryClusterGatewayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InteractiveQueryClusterGatewayOutput).ToInteractiveQueryClusterGatewayPtrOutputWithContext(ctx)
}

type InteractiveQueryClusterGatewayPtrInput interface {
	pulumi.Input

	ToInteractiveQueryClusterGatewayPtrOutput() InteractiveQueryClusterGatewayPtrOutput
	ToInteractiveQueryClusterGatewayPtrOutputWithContext(context.Context) InteractiveQueryClusterGatewayPtrOutput
}

type interactiveQueryClusterGatewayPtrType InteractiveQueryClusterGatewayArgs

func InteractiveQueryClusterGatewayPtr(v *InteractiveQueryClusterGatewayArgs) InteractiveQueryClusterGatewayPtrInput {
	return (*interactiveQueryClusterGatewayPtrType)(v)
}

func (*interactiveQueryClusterGatewayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InteractiveQueryClusterGateway)(nil)).Elem()
}

func (i *interactiveQueryClusterGatewayPtrType) ToInteractiveQueryClusterGatewayPtrOutput() InteractiveQueryClusterGatewayPtrOutput {
	return i.ToInteractiveQueryClusterGatewayPtrOutputWithContext(context.Background())
}

func (i *interactiveQueryClusterGatewayPtrType) ToInteractiveQueryClusterGatewayPtrOutputWithContext(ctx context.Context) InteractiveQueryClusterGatewayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InteractiveQueryClusterGatewayPtrOutput)
}

type InteractiveQueryClusterGatewayOutput struct{ *pulumi.OutputState }

func (InteractiveQueryClusterGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InteractiveQueryClusterGateway)(nil)).Elem()
}

func (o InteractiveQueryClusterGatewayOutput) ToInteractiveQueryClusterGatewayOutput() InteractiveQueryClusterGatewayOutput {
	return o
}

func (o InteractiveQueryClusterGatewayOutput) ToInteractiveQueryClusterGatewayOutputWithContext(ctx context.Context) InteractiveQueryClusterGatewayOutput {
	return o
}

func (o InteractiveQueryClusterGatewayOutput) ToInteractiveQueryClusterGatewayPtrOutput() InteractiveQueryClusterGatewayPtrOutput {
	return o.ToInteractiveQueryClusterGatewayPtrOutputWithContext(context.Background())
}

func (o InteractiveQueryClusterGatewayOutput) ToInteractiveQueryClusterGatewayPtrOutputWithContext(ctx context.Context) InteractiveQueryClusterGatewayPtrOutput {
	return o.ApplyT(func(v InteractiveQueryClusterGateway) *InteractiveQueryClusterGateway {
		return &v
	}).(InteractiveQueryClusterGatewayPtrOutput)
}

// Is the Ambari portal enabled? Changing this forces a new resource to be created.
func (o InteractiveQueryClusterGatewayOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v InteractiveQueryClusterGateway) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The password used for the Ambari Portal. Changing this forces a new resource to be created.
func (o InteractiveQueryClusterGatewayOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v InteractiveQueryClusterGateway) string { return v.Password }).(pulumi.StringOutput)
}

// The username used for the Ambari Portal. Changing this forces a new resource to be created.
func (o InteractiveQueryClusterGatewayOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v InteractiveQueryClusterGateway) string { return v.Username }).(pulumi.StringOutput)
}

type InteractiveQueryClusterGatewayPtrOutput struct{ *pulumi.OutputState }

func (InteractiveQueryClusterGatewayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InteractiveQueryClusterGateway)(nil)).Elem()
}

func (o InteractiveQueryClusterGatewayPtrOutput) ToInteractiveQueryClusterGatewayPtrOutput() InteractiveQueryClusterGatewayPtrOutput {
	return o
}

func (o InteractiveQueryClusterGatewayPtrOutput) ToInteractiveQueryClusterGatewayPtrOutputWithContext(ctx context.Context) InteractiveQueryClusterGatewayPtrOutput {
	return o
}

func (o InteractiveQueryClusterGatewayPtrOutput) Elem() InteractiveQueryClusterGatewayOutput {
	return o.ApplyT(func(v *InteractiveQueryClusterGateway) InteractiveQueryClusterGateway { return *v }).(InteractiveQueryClusterGatewayOutput)
}

// Is the Ambari portal enabled? Changing this forces a new resource to be created.
func (o InteractiveQueryClusterGatewayPtrOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v InteractiveQueryClusterGateway) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The password used for the Ambari Portal. Changing this forces a new resource to be created.
func (o InteractiveQueryClusterGatewayPtrOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v InteractiveQueryClusterGateway) string { return v.Password }).(pulumi.StringOutput)
}

// The username used for the Ambari Portal. Changing this forces a new resource to be created.
func (o InteractiveQueryClusterGatewayPtrOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v InteractiveQueryClusterGateway) string { return v.Username }).(pulumi.StringOutput)
}

type InteractiveQueryClusterRoles struct {
	// A `headNode` block as defined above.
	HeadNode InteractiveQueryClusterRolesHeadNode `pulumi:"headNode"`
	// A `workerNode` block as defined below.
	WorkerNode InteractiveQueryClusterRolesWorkerNode `pulumi:"workerNode"`
	// A `zookeeperNode` block as defined below.
	ZookeeperNode InteractiveQueryClusterRolesZookeeperNode `pulumi:"zookeeperNode"`
}

type InteractiveQueryClusterRolesInput interface {
	pulumi.Input

	ToInteractiveQueryClusterRolesOutput() InteractiveQueryClusterRolesOutput
	ToInteractiveQueryClusterRolesOutputWithContext(context.Context) InteractiveQueryClusterRolesOutput
}

type InteractiveQueryClusterRolesArgs struct {
	// A `headNode` block as defined above.
	HeadNode InteractiveQueryClusterRolesHeadNodeInput `pulumi:"headNode"`
	// A `workerNode` block as defined below.
	WorkerNode InteractiveQueryClusterRolesWorkerNodeInput `pulumi:"workerNode"`
	// A `zookeeperNode` block as defined below.
	ZookeeperNode InteractiveQueryClusterRolesZookeeperNodeInput `pulumi:"zookeeperNode"`
}

func (InteractiveQueryClusterRolesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InteractiveQueryClusterRoles)(nil)).Elem()
}

func (i InteractiveQueryClusterRolesArgs) ToInteractiveQueryClusterRolesOutput() InteractiveQueryClusterRolesOutput {
	return i.ToInteractiveQueryClusterRolesOutputWithContext(context.Background())
}

func (i InteractiveQueryClusterRolesArgs) ToInteractiveQueryClusterRolesOutputWithContext(ctx context.Context) InteractiveQueryClusterRolesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InteractiveQueryClusterRolesOutput)
}

func (i InteractiveQueryClusterRolesArgs) ToInteractiveQueryClusterRolesPtrOutput() InteractiveQueryClusterRolesPtrOutput {
	return i.ToInteractiveQueryClusterRolesPtrOutputWithContext(context.Background())
}

func (i InteractiveQueryClusterRolesArgs) ToInteractiveQueryClusterRolesPtrOutputWithContext(ctx context.Context) InteractiveQueryClusterRolesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InteractiveQueryClusterRolesOutput).ToInteractiveQueryClusterRolesPtrOutputWithContext(ctx)
}

type InteractiveQueryClusterRolesPtrInput interface {
	pulumi.Input

	ToInteractiveQueryClusterRolesPtrOutput() InteractiveQueryClusterRolesPtrOutput
	ToInteractiveQueryClusterRolesPtrOutputWithContext(context.Context) InteractiveQueryClusterRolesPtrOutput
}

type interactiveQueryClusterRolesPtrType InteractiveQueryClusterRolesArgs

func InteractiveQueryClusterRolesPtr(v *InteractiveQueryClusterRolesArgs) InteractiveQueryClusterRolesPtrInput {
	return (*interactiveQueryClusterRolesPtrType)(v)
}

func (*interactiveQueryClusterRolesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InteractiveQueryClusterRoles)(nil)).Elem()
}

func (i *interactiveQueryClusterRolesPtrType) ToInteractiveQueryClusterRolesPtrOutput() InteractiveQueryClusterRolesPtrOutput {
	return i.ToInteractiveQueryClusterRolesPtrOutputWithContext(context.Background())
}

func (i *interactiveQueryClusterRolesPtrType) ToInteractiveQueryClusterRolesPtrOutputWithContext(ctx context.Context) InteractiveQueryClusterRolesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InteractiveQueryClusterRolesPtrOutput)
}

type InteractiveQueryClusterRolesOutput struct{ *pulumi.OutputState }

func (InteractiveQueryClusterRolesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InteractiveQueryClusterRoles)(nil)).Elem()
}

func (o InteractiveQueryClusterRolesOutput) ToInteractiveQueryClusterRolesOutput() InteractiveQueryClusterRolesOutput {
	return o
}

func (o InteractiveQueryClusterRolesOutput) ToInteractiveQueryClusterRolesOutputWithContext(ctx context.Context) InteractiveQueryClusterRolesOutput {
	return o
}

func (o InteractiveQueryClusterRolesOutput) ToInteractiveQueryClusterRolesPtrOutput() InteractiveQueryClusterRolesPtrOutput {
	return o.ToInteractiveQueryClusterRolesPtrOutputWithContext(context.Background())
}

func (o InteractiveQueryClusterRolesOutput) ToInteractiveQueryClusterRolesPtrOutputWithContext(ctx context.Context) InteractiveQueryClusterRolesPtrOutput {
	return o.ApplyT(func(v InteractiveQueryClusterRoles) *InteractiveQueryClusterRoles {
		return &v
	}).(InteractiveQueryClusterRolesPtrOutput)
}

// A `headNode` block as defined above.
func (o InteractiveQueryClusterRolesOutput) HeadNode() InteractiveQueryClusterRolesHeadNodeOutput {
	return o.ApplyT(func(v InteractiveQueryClusterRoles) InteractiveQueryClusterRolesHeadNode { return v.HeadNode }).(InteractiveQueryClusterRolesHeadNodeOutput)
}

// A `workerNode` block as defined below.
func (o InteractiveQueryClusterRolesOutput) WorkerNode() InteractiveQueryClusterRolesWorkerNodeOutput {
	return o.ApplyT(func(v InteractiveQueryClusterRoles) InteractiveQueryClusterRolesWorkerNode { return v.WorkerNode }).(InteractiveQueryClusterRolesWorkerNodeOutput)
}

// A `zookeeperNode` block as defined below.
func (o InteractiveQueryClusterRolesOutput) ZookeeperNode() InteractiveQueryClusterRolesZookeeperNodeOutput {
	return o.ApplyT(func(v InteractiveQueryClusterRoles) InteractiveQueryClusterRolesZookeeperNode {
		return v.ZookeeperNode
	}).(InteractiveQueryClusterRolesZookeeperNodeOutput)
}

type InteractiveQueryClusterRolesPtrOutput struct{ *pulumi.OutputState }

func (InteractiveQueryClusterRolesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InteractiveQueryClusterRoles)(nil)).Elem()
}

func (o InteractiveQueryClusterRolesPtrOutput) ToInteractiveQueryClusterRolesPtrOutput() InteractiveQueryClusterRolesPtrOutput {
	return o
}

func (o InteractiveQueryClusterRolesPtrOutput) ToInteractiveQueryClusterRolesPtrOutputWithContext(ctx context.Context) InteractiveQueryClusterRolesPtrOutput {
	return o
}

func (o InteractiveQueryClusterRolesPtrOutput) Elem() InteractiveQueryClusterRolesOutput {
	return o.ApplyT(func(v *InteractiveQueryClusterRoles) InteractiveQueryClusterRoles { return *v }).(InteractiveQueryClusterRolesOutput)
}

// A `headNode` block as defined above.
func (o InteractiveQueryClusterRolesPtrOutput) HeadNode() InteractiveQueryClusterRolesHeadNodeOutput {
	return o.ApplyT(func(v InteractiveQueryClusterRoles) InteractiveQueryClusterRolesHeadNode { return v.HeadNode }).(InteractiveQueryClusterRolesHeadNodeOutput)
}

// A `workerNode` block as defined below.
func (o InteractiveQueryClusterRolesPtrOutput) WorkerNode() InteractiveQueryClusterRolesWorkerNodeOutput {
	return o.ApplyT(func(v InteractiveQueryClusterRoles) InteractiveQueryClusterRolesWorkerNode { return v.WorkerNode }).(InteractiveQueryClusterRolesWorkerNodeOutput)
}

// A `zookeeperNode` block as defined below.
func (o InteractiveQueryClusterRolesPtrOutput) ZookeeperNode() InteractiveQueryClusterRolesZookeeperNodeOutput {
	return o.ApplyT(func(v InteractiveQueryClusterRoles) InteractiveQueryClusterRolesZookeeperNode {
		return v.ZookeeperNode
	}).(InteractiveQueryClusterRolesZookeeperNodeOutput)
}

type InteractiveQueryClusterRolesHeadNode struct {
	// The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
	Password *string `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
	SshKeys []string `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId *string `pulumi:"subnetId"`
	// The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
	// The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId *string `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
	VmSize string `pulumi:"vmSize"`
}

type InteractiveQueryClusterRolesHeadNodeInput interface {
	pulumi.Input

	ToInteractiveQueryClusterRolesHeadNodeOutput() InteractiveQueryClusterRolesHeadNodeOutput
	ToInteractiveQueryClusterRolesHeadNodeOutputWithContext(context.Context) InteractiveQueryClusterRolesHeadNodeOutput
}

type InteractiveQueryClusterRolesHeadNodeArgs struct {
	// The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
	SshKeys pulumi.StringArrayInput `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
	// The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId pulumi.StringPtrInput `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
	VmSize pulumi.StringInput `pulumi:"vmSize"`
}

func (InteractiveQueryClusterRolesHeadNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InteractiveQueryClusterRolesHeadNode)(nil)).Elem()
}

func (i InteractiveQueryClusterRolesHeadNodeArgs) ToInteractiveQueryClusterRolesHeadNodeOutput() InteractiveQueryClusterRolesHeadNodeOutput {
	return i.ToInteractiveQueryClusterRolesHeadNodeOutputWithContext(context.Background())
}

func (i InteractiveQueryClusterRolesHeadNodeArgs) ToInteractiveQueryClusterRolesHeadNodeOutputWithContext(ctx context.Context) InteractiveQueryClusterRolesHeadNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InteractiveQueryClusterRolesHeadNodeOutput)
}

type InteractiveQueryClusterRolesHeadNodeOutput struct{ *pulumi.OutputState }

func (InteractiveQueryClusterRolesHeadNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InteractiveQueryClusterRolesHeadNode)(nil)).Elem()
}

func (o InteractiveQueryClusterRolesHeadNodeOutput) ToInteractiveQueryClusterRolesHeadNodeOutput() InteractiveQueryClusterRolesHeadNodeOutput {
	return o
}

func (o InteractiveQueryClusterRolesHeadNodeOutput) ToInteractiveQueryClusterRolesHeadNodeOutputWithContext(ctx context.Context) InteractiveQueryClusterRolesHeadNodeOutput {
	return o
}

// The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
func (o InteractiveQueryClusterRolesHeadNodeOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InteractiveQueryClusterRolesHeadNode) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
func (o InteractiveQueryClusterRolesHeadNodeOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InteractiveQueryClusterRolesHeadNode) []string { return v.SshKeys }).(pulumi.StringArrayOutput)
}

// The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o InteractiveQueryClusterRolesHeadNodeOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InteractiveQueryClusterRolesHeadNode) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
func (o InteractiveQueryClusterRolesHeadNodeOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v InteractiveQueryClusterRolesHeadNode) string { return v.Username }).(pulumi.StringOutput)
}

// The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o InteractiveQueryClusterRolesHeadNodeOutput) VirtualNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InteractiveQueryClusterRolesHeadNode) *string { return v.VirtualNetworkId }).(pulumi.StringPtrOutput)
}

// The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
func (o InteractiveQueryClusterRolesHeadNodeOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v InteractiveQueryClusterRolesHeadNode) string { return v.VmSize }).(pulumi.StringOutput)
}

type InteractiveQueryClusterRolesWorkerNode struct {
	// The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
	MinInstanceCount *int `pulumi:"minInstanceCount"`
	// The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
	Password *string `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
	SshKeys []string `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId *string `pulumi:"subnetId"`
	// The number of instances which should be run for the Worker Nodes.
	TargetInstanceCount int `pulumi:"targetInstanceCount"`
	// The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
	// The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId *string `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
	VmSize string `pulumi:"vmSize"`
}

type InteractiveQueryClusterRolesWorkerNodeInput interface {
	pulumi.Input

	ToInteractiveQueryClusterRolesWorkerNodeOutput() InteractiveQueryClusterRolesWorkerNodeOutput
	ToInteractiveQueryClusterRolesWorkerNodeOutputWithContext(context.Context) InteractiveQueryClusterRolesWorkerNodeOutput
}

type InteractiveQueryClusterRolesWorkerNodeArgs struct {
	// The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
	MinInstanceCount pulumi.IntPtrInput `pulumi:"minInstanceCount"`
	// The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
	SshKeys pulumi.StringArrayInput `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// The number of instances which should be run for the Worker Nodes.
	TargetInstanceCount pulumi.IntInput `pulumi:"targetInstanceCount"`
	// The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
	// The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId pulumi.StringPtrInput `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
	VmSize pulumi.StringInput `pulumi:"vmSize"`
}

func (InteractiveQueryClusterRolesWorkerNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InteractiveQueryClusterRolesWorkerNode)(nil)).Elem()
}

func (i InteractiveQueryClusterRolesWorkerNodeArgs) ToInteractiveQueryClusterRolesWorkerNodeOutput() InteractiveQueryClusterRolesWorkerNodeOutput {
	return i.ToInteractiveQueryClusterRolesWorkerNodeOutputWithContext(context.Background())
}

func (i InteractiveQueryClusterRolesWorkerNodeArgs) ToInteractiveQueryClusterRolesWorkerNodeOutputWithContext(ctx context.Context) InteractiveQueryClusterRolesWorkerNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InteractiveQueryClusterRolesWorkerNodeOutput)
}

type InteractiveQueryClusterRolesWorkerNodeOutput struct{ *pulumi.OutputState }

func (InteractiveQueryClusterRolesWorkerNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InteractiveQueryClusterRolesWorkerNode)(nil)).Elem()
}

func (o InteractiveQueryClusterRolesWorkerNodeOutput) ToInteractiveQueryClusterRolesWorkerNodeOutput() InteractiveQueryClusterRolesWorkerNodeOutput {
	return o
}

func (o InteractiveQueryClusterRolesWorkerNodeOutput) ToInteractiveQueryClusterRolesWorkerNodeOutputWithContext(ctx context.Context) InteractiveQueryClusterRolesWorkerNodeOutput {
	return o
}

// The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
func (o InteractiveQueryClusterRolesWorkerNodeOutput) MinInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InteractiveQueryClusterRolesWorkerNode) *int { return v.MinInstanceCount }).(pulumi.IntPtrOutput)
}

// The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
func (o InteractiveQueryClusterRolesWorkerNodeOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InteractiveQueryClusterRolesWorkerNode) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
func (o InteractiveQueryClusterRolesWorkerNodeOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InteractiveQueryClusterRolesWorkerNode) []string { return v.SshKeys }).(pulumi.StringArrayOutput)
}

// The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o InteractiveQueryClusterRolesWorkerNodeOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InteractiveQueryClusterRolesWorkerNode) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The number of instances which should be run for the Worker Nodes.
func (o InteractiveQueryClusterRolesWorkerNodeOutput) TargetInstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v InteractiveQueryClusterRolesWorkerNode) int { return v.TargetInstanceCount }).(pulumi.IntOutput)
}

// The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
func (o InteractiveQueryClusterRolesWorkerNodeOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v InteractiveQueryClusterRolesWorkerNode) string { return v.Username }).(pulumi.StringOutput)
}

// The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o InteractiveQueryClusterRolesWorkerNodeOutput) VirtualNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InteractiveQueryClusterRolesWorkerNode) *string { return v.VirtualNetworkId }).(pulumi.StringPtrOutput)
}

// The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
func (o InteractiveQueryClusterRolesWorkerNodeOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v InteractiveQueryClusterRolesWorkerNode) string { return v.VmSize }).(pulumi.StringOutput)
}

type InteractiveQueryClusterRolesZookeeperNode struct {
	// The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
	Password *string `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
	SshKeys []string `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId *string `pulumi:"subnetId"`
	// The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
	// The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId *string `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
	VmSize string `pulumi:"vmSize"`
}

type InteractiveQueryClusterRolesZookeeperNodeInput interface {
	pulumi.Input

	ToInteractiveQueryClusterRolesZookeeperNodeOutput() InteractiveQueryClusterRolesZookeeperNodeOutput
	ToInteractiveQueryClusterRolesZookeeperNodeOutputWithContext(context.Context) InteractiveQueryClusterRolesZookeeperNodeOutput
}

type InteractiveQueryClusterRolesZookeeperNodeArgs struct {
	// The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
	SshKeys pulumi.StringArrayInput `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
	// The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId pulumi.StringPtrInput `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
	VmSize pulumi.StringInput `pulumi:"vmSize"`
}

func (InteractiveQueryClusterRolesZookeeperNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InteractiveQueryClusterRolesZookeeperNode)(nil)).Elem()
}

func (i InteractiveQueryClusterRolesZookeeperNodeArgs) ToInteractiveQueryClusterRolesZookeeperNodeOutput() InteractiveQueryClusterRolesZookeeperNodeOutput {
	return i.ToInteractiveQueryClusterRolesZookeeperNodeOutputWithContext(context.Background())
}

func (i InteractiveQueryClusterRolesZookeeperNodeArgs) ToInteractiveQueryClusterRolesZookeeperNodeOutputWithContext(ctx context.Context) InteractiveQueryClusterRolesZookeeperNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InteractiveQueryClusterRolesZookeeperNodeOutput)
}

type InteractiveQueryClusterRolesZookeeperNodeOutput struct{ *pulumi.OutputState }

func (InteractiveQueryClusterRolesZookeeperNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InteractiveQueryClusterRolesZookeeperNode)(nil)).Elem()
}

func (o InteractiveQueryClusterRolesZookeeperNodeOutput) ToInteractiveQueryClusterRolesZookeeperNodeOutput() InteractiveQueryClusterRolesZookeeperNodeOutput {
	return o
}

func (o InteractiveQueryClusterRolesZookeeperNodeOutput) ToInteractiveQueryClusterRolesZookeeperNodeOutputWithContext(ctx context.Context) InteractiveQueryClusterRolesZookeeperNodeOutput {
	return o
}

// The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
func (o InteractiveQueryClusterRolesZookeeperNodeOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InteractiveQueryClusterRolesZookeeperNode) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
func (o InteractiveQueryClusterRolesZookeeperNodeOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InteractiveQueryClusterRolesZookeeperNode) []string { return v.SshKeys }).(pulumi.StringArrayOutput)
}

// The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o InteractiveQueryClusterRolesZookeeperNodeOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InteractiveQueryClusterRolesZookeeperNode) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
func (o InteractiveQueryClusterRolesZookeeperNodeOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v InteractiveQueryClusterRolesZookeeperNode) string { return v.Username }).(pulumi.StringOutput)
}

// The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o InteractiveQueryClusterRolesZookeeperNodeOutput) VirtualNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InteractiveQueryClusterRolesZookeeperNode) *string { return v.VirtualNetworkId }).(pulumi.StringPtrOutput)
}

// The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
func (o InteractiveQueryClusterRolesZookeeperNodeOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v InteractiveQueryClusterRolesZookeeperNode) string { return v.VmSize }).(pulumi.StringOutput)
}

type InteractiveQueryClusterStorageAccount struct {
	// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
	IsDefault bool `pulumi:"isDefault"`
	// The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
	StorageAccountKey string `pulumi:"storageAccountKey"`
	// The ID of the Storage Container. Changing this forces a new resource to be created.
	StorageContainerId string `pulumi:"storageContainerId"`
}

type InteractiveQueryClusterStorageAccountInput interface {
	pulumi.Input

	ToInteractiveQueryClusterStorageAccountOutput() InteractiveQueryClusterStorageAccountOutput
	ToInteractiveQueryClusterStorageAccountOutputWithContext(context.Context) InteractiveQueryClusterStorageAccountOutput
}

type InteractiveQueryClusterStorageAccountArgs struct {
	// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
	IsDefault pulumi.BoolInput `pulumi:"isDefault"`
	// The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
	StorageAccountKey pulumi.StringInput `pulumi:"storageAccountKey"`
	// The ID of the Storage Container. Changing this forces a new resource to be created.
	StorageContainerId pulumi.StringInput `pulumi:"storageContainerId"`
}

func (InteractiveQueryClusterStorageAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InteractiveQueryClusterStorageAccount)(nil)).Elem()
}

func (i InteractiveQueryClusterStorageAccountArgs) ToInteractiveQueryClusterStorageAccountOutput() InteractiveQueryClusterStorageAccountOutput {
	return i.ToInteractiveQueryClusterStorageAccountOutputWithContext(context.Background())
}

func (i InteractiveQueryClusterStorageAccountArgs) ToInteractiveQueryClusterStorageAccountOutputWithContext(ctx context.Context) InteractiveQueryClusterStorageAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InteractiveQueryClusterStorageAccountOutput)
}

type InteractiveQueryClusterStorageAccountArrayInput interface {
	pulumi.Input

	ToInteractiveQueryClusterStorageAccountArrayOutput() InteractiveQueryClusterStorageAccountArrayOutput
	ToInteractiveQueryClusterStorageAccountArrayOutputWithContext(context.Context) InteractiveQueryClusterStorageAccountArrayOutput
}

type InteractiveQueryClusterStorageAccountArray []InteractiveQueryClusterStorageAccountInput

func (InteractiveQueryClusterStorageAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InteractiveQueryClusterStorageAccount)(nil)).Elem()
}

func (i InteractiveQueryClusterStorageAccountArray) ToInteractiveQueryClusterStorageAccountArrayOutput() InteractiveQueryClusterStorageAccountArrayOutput {
	return i.ToInteractiveQueryClusterStorageAccountArrayOutputWithContext(context.Background())
}

func (i InteractiveQueryClusterStorageAccountArray) ToInteractiveQueryClusterStorageAccountArrayOutputWithContext(ctx context.Context) InteractiveQueryClusterStorageAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InteractiveQueryClusterStorageAccountArrayOutput)
}

type InteractiveQueryClusterStorageAccountOutput struct{ *pulumi.OutputState }

func (InteractiveQueryClusterStorageAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InteractiveQueryClusterStorageAccount)(nil)).Elem()
}

func (o InteractiveQueryClusterStorageAccountOutput) ToInteractiveQueryClusterStorageAccountOutput() InteractiveQueryClusterStorageAccountOutput {
	return o
}

func (o InteractiveQueryClusterStorageAccountOutput) ToInteractiveQueryClusterStorageAccountOutputWithContext(ctx context.Context) InteractiveQueryClusterStorageAccountOutput {
	return o
}

// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
func (o InteractiveQueryClusterStorageAccountOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v InteractiveQueryClusterStorageAccount) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
func (o InteractiveQueryClusterStorageAccountOutput) StorageAccountKey() pulumi.StringOutput {
	return o.ApplyT(func(v InteractiveQueryClusterStorageAccount) string { return v.StorageAccountKey }).(pulumi.StringOutput)
}

// The ID of the Storage Container. Changing this forces a new resource to be created.
func (o InteractiveQueryClusterStorageAccountOutput) StorageContainerId() pulumi.StringOutput {
	return o.ApplyT(func(v InteractiveQueryClusterStorageAccount) string { return v.StorageContainerId }).(pulumi.StringOutput)
}

type InteractiveQueryClusterStorageAccountArrayOutput struct{ *pulumi.OutputState }

func (InteractiveQueryClusterStorageAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InteractiveQueryClusterStorageAccount)(nil)).Elem()
}

func (o InteractiveQueryClusterStorageAccountArrayOutput) ToInteractiveQueryClusterStorageAccountArrayOutput() InteractiveQueryClusterStorageAccountArrayOutput {
	return o
}

func (o InteractiveQueryClusterStorageAccountArrayOutput) ToInteractiveQueryClusterStorageAccountArrayOutputWithContext(ctx context.Context) InteractiveQueryClusterStorageAccountArrayOutput {
	return o
}

func (o InteractiveQueryClusterStorageAccountArrayOutput) Index(i pulumi.IntInput) InteractiveQueryClusterStorageAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InteractiveQueryClusterStorageAccount {
		return vs[0].([]InteractiveQueryClusterStorageAccount)[vs[1].(int)]
	}).(InteractiveQueryClusterStorageAccountOutput)
}

type InteractiveQueryClusterStorageAccountGen2 struct {
	// The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
	FilesystemId string `pulumi:"filesystemId"`
	// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
	IsDefault bool `pulumi:"isDefault"`
	// The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
	ManagedIdentityResourceId string `pulumi:"managedIdentityResourceId"`
	// The ID of the Storage Account. Changing this forces a new resource to be created.
	StorageResourceId string `pulumi:"storageResourceId"`
}

type InteractiveQueryClusterStorageAccountGen2Input interface {
	pulumi.Input

	ToInteractiveQueryClusterStorageAccountGen2Output() InteractiveQueryClusterStorageAccountGen2Output
	ToInteractiveQueryClusterStorageAccountGen2OutputWithContext(context.Context) InteractiveQueryClusterStorageAccountGen2Output
}

type InteractiveQueryClusterStorageAccountGen2Args struct {
	// The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
	FilesystemId pulumi.StringInput `pulumi:"filesystemId"`
	// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
	IsDefault pulumi.BoolInput `pulumi:"isDefault"`
	// The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
	ManagedIdentityResourceId pulumi.StringInput `pulumi:"managedIdentityResourceId"`
	// The ID of the Storage Account. Changing this forces a new resource to be created.
	StorageResourceId pulumi.StringInput `pulumi:"storageResourceId"`
}

func (InteractiveQueryClusterStorageAccountGen2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*InteractiveQueryClusterStorageAccountGen2)(nil)).Elem()
}

func (i InteractiveQueryClusterStorageAccountGen2Args) ToInteractiveQueryClusterStorageAccountGen2Output() InteractiveQueryClusterStorageAccountGen2Output {
	return i.ToInteractiveQueryClusterStorageAccountGen2OutputWithContext(context.Background())
}

func (i InteractiveQueryClusterStorageAccountGen2Args) ToInteractiveQueryClusterStorageAccountGen2OutputWithContext(ctx context.Context) InteractiveQueryClusterStorageAccountGen2Output {
	return pulumi.ToOutputWithContext(ctx, i).(InteractiveQueryClusterStorageAccountGen2Output)
}

func (i InteractiveQueryClusterStorageAccountGen2Args) ToInteractiveQueryClusterStorageAccountGen2PtrOutput() InteractiveQueryClusterStorageAccountGen2PtrOutput {
	return i.ToInteractiveQueryClusterStorageAccountGen2PtrOutputWithContext(context.Background())
}

func (i InteractiveQueryClusterStorageAccountGen2Args) ToInteractiveQueryClusterStorageAccountGen2PtrOutputWithContext(ctx context.Context) InteractiveQueryClusterStorageAccountGen2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InteractiveQueryClusterStorageAccountGen2Output).ToInteractiveQueryClusterStorageAccountGen2PtrOutputWithContext(ctx)
}

type InteractiveQueryClusterStorageAccountGen2PtrInput interface {
	pulumi.Input

	ToInteractiveQueryClusterStorageAccountGen2PtrOutput() InteractiveQueryClusterStorageAccountGen2PtrOutput
	ToInteractiveQueryClusterStorageAccountGen2PtrOutputWithContext(context.Context) InteractiveQueryClusterStorageAccountGen2PtrOutput
}

type interactiveQueryClusterStorageAccountGen2PtrType InteractiveQueryClusterStorageAccountGen2Args

func InteractiveQueryClusterStorageAccountGen2Ptr(v *InteractiveQueryClusterStorageAccountGen2Args) InteractiveQueryClusterStorageAccountGen2PtrInput {
	return (*interactiveQueryClusterStorageAccountGen2PtrType)(v)
}

func (*interactiveQueryClusterStorageAccountGen2PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InteractiveQueryClusterStorageAccountGen2)(nil)).Elem()
}

func (i *interactiveQueryClusterStorageAccountGen2PtrType) ToInteractiveQueryClusterStorageAccountGen2PtrOutput() InteractiveQueryClusterStorageAccountGen2PtrOutput {
	return i.ToInteractiveQueryClusterStorageAccountGen2PtrOutputWithContext(context.Background())
}

func (i *interactiveQueryClusterStorageAccountGen2PtrType) ToInteractiveQueryClusterStorageAccountGen2PtrOutputWithContext(ctx context.Context) InteractiveQueryClusterStorageAccountGen2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InteractiveQueryClusterStorageAccountGen2PtrOutput)
}

type InteractiveQueryClusterStorageAccountGen2Output struct{ *pulumi.OutputState }

func (InteractiveQueryClusterStorageAccountGen2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*InteractiveQueryClusterStorageAccountGen2)(nil)).Elem()
}

func (o InteractiveQueryClusterStorageAccountGen2Output) ToInteractiveQueryClusterStorageAccountGen2Output() InteractiveQueryClusterStorageAccountGen2Output {
	return o
}

func (o InteractiveQueryClusterStorageAccountGen2Output) ToInteractiveQueryClusterStorageAccountGen2OutputWithContext(ctx context.Context) InteractiveQueryClusterStorageAccountGen2Output {
	return o
}

func (o InteractiveQueryClusterStorageAccountGen2Output) ToInteractiveQueryClusterStorageAccountGen2PtrOutput() InteractiveQueryClusterStorageAccountGen2PtrOutput {
	return o.ToInteractiveQueryClusterStorageAccountGen2PtrOutputWithContext(context.Background())
}

func (o InteractiveQueryClusterStorageAccountGen2Output) ToInteractiveQueryClusterStorageAccountGen2PtrOutputWithContext(ctx context.Context) InteractiveQueryClusterStorageAccountGen2PtrOutput {
	return o.ApplyT(func(v InteractiveQueryClusterStorageAccountGen2) *InteractiveQueryClusterStorageAccountGen2 {
		return &v
	}).(InteractiveQueryClusterStorageAccountGen2PtrOutput)
}

// The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
func (o InteractiveQueryClusterStorageAccountGen2Output) FilesystemId() pulumi.StringOutput {
	return o.ApplyT(func(v InteractiveQueryClusterStorageAccountGen2) string { return v.FilesystemId }).(pulumi.StringOutput)
}

// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
func (o InteractiveQueryClusterStorageAccountGen2Output) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v InteractiveQueryClusterStorageAccountGen2) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
func (o InteractiveQueryClusterStorageAccountGen2Output) ManagedIdentityResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v InteractiveQueryClusterStorageAccountGen2) string { return v.ManagedIdentityResourceId }).(pulumi.StringOutput)
}

// The ID of the Storage Account. Changing this forces a new resource to be created.
func (o InteractiveQueryClusterStorageAccountGen2Output) StorageResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v InteractiveQueryClusterStorageAccountGen2) string { return v.StorageResourceId }).(pulumi.StringOutput)
}

type InteractiveQueryClusterStorageAccountGen2PtrOutput struct{ *pulumi.OutputState }

func (InteractiveQueryClusterStorageAccountGen2PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InteractiveQueryClusterStorageAccountGen2)(nil)).Elem()
}

func (o InteractiveQueryClusterStorageAccountGen2PtrOutput) ToInteractiveQueryClusterStorageAccountGen2PtrOutput() InteractiveQueryClusterStorageAccountGen2PtrOutput {
	return o
}

func (o InteractiveQueryClusterStorageAccountGen2PtrOutput) ToInteractiveQueryClusterStorageAccountGen2PtrOutputWithContext(ctx context.Context) InteractiveQueryClusterStorageAccountGen2PtrOutput {
	return o
}

func (o InteractiveQueryClusterStorageAccountGen2PtrOutput) Elem() InteractiveQueryClusterStorageAccountGen2Output {
	return o.ApplyT(func(v *InteractiveQueryClusterStorageAccountGen2) InteractiveQueryClusterStorageAccountGen2 {
		return *v
	}).(InteractiveQueryClusterStorageAccountGen2Output)
}

// The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
func (o InteractiveQueryClusterStorageAccountGen2PtrOutput) FilesystemId() pulumi.StringOutput {
	return o.ApplyT(func(v InteractiveQueryClusterStorageAccountGen2) string { return v.FilesystemId }).(pulumi.StringOutput)
}

// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
func (o InteractiveQueryClusterStorageAccountGen2PtrOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v InteractiveQueryClusterStorageAccountGen2) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
func (o InteractiveQueryClusterStorageAccountGen2PtrOutput) ManagedIdentityResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v InteractiveQueryClusterStorageAccountGen2) string { return v.ManagedIdentityResourceId }).(pulumi.StringOutput)
}

// The ID of the Storage Account. Changing this forces a new resource to be created.
func (o InteractiveQueryClusterStorageAccountGen2PtrOutput) StorageResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v InteractiveQueryClusterStorageAccountGen2) string { return v.StorageResourceId }).(pulumi.StringOutput)
}

type KafkaClusterComponentVersion struct {
	// The version of Kafka which should be used for this HDInsight Kafka Cluster. Changing this forces a new resource to be created.
	Kafka string `pulumi:"kafka"`
}

type KafkaClusterComponentVersionInput interface {
	pulumi.Input

	ToKafkaClusterComponentVersionOutput() KafkaClusterComponentVersionOutput
	ToKafkaClusterComponentVersionOutputWithContext(context.Context) KafkaClusterComponentVersionOutput
}

type KafkaClusterComponentVersionArgs struct {
	// The version of Kafka which should be used for this HDInsight Kafka Cluster. Changing this forces a new resource to be created.
	Kafka pulumi.StringInput `pulumi:"kafka"`
}

func (KafkaClusterComponentVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClusterComponentVersion)(nil)).Elem()
}

func (i KafkaClusterComponentVersionArgs) ToKafkaClusterComponentVersionOutput() KafkaClusterComponentVersionOutput {
	return i.ToKafkaClusterComponentVersionOutputWithContext(context.Background())
}

func (i KafkaClusterComponentVersionArgs) ToKafkaClusterComponentVersionOutputWithContext(ctx context.Context) KafkaClusterComponentVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterComponentVersionOutput)
}

func (i KafkaClusterComponentVersionArgs) ToKafkaClusterComponentVersionPtrOutput() KafkaClusterComponentVersionPtrOutput {
	return i.ToKafkaClusterComponentVersionPtrOutputWithContext(context.Background())
}

func (i KafkaClusterComponentVersionArgs) ToKafkaClusterComponentVersionPtrOutputWithContext(ctx context.Context) KafkaClusterComponentVersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterComponentVersionOutput).ToKafkaClusterComponentVersionPtrOutputWithContext(ctx)
}

type KafkaClusterComponentVersionPtrInput interface {
	pulumi.Input

	ToKafkaClusterComponentVersionPtrOutput() KafkaClusterComponentVersionPtrOutput
	ToKafkaClusterComponentVersionPtrOutputWithContext(context.Context) KafkaClusterComponentVersionPtrOutput
}

type kafkaClusterComponentVersionPtrType KafkaClusterComponentVersionArgs

func KafkaClusterComponentVersionPtr(v *KafkaClusterComponentVersionArgs) KafkaClusterComponentVersionPtrInput {
	return (*kafkaClusterComponentVersionPtrType)(v)
}

func (*kafkaClusterComponentVersionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaClusterComponentVersion)(nil)).Elem()
}

func (i *kafkaClusterComponentVersionPtrType) ToKafkaClusterComponentVersionPtrOutput() KafkaClusterComponentVersionPtrOutput {
	return i.ToKafkaClusterComponentVersionPtrOutputWithContext(context.Background())
}

func (i *kafkaClusterComponentVersionPtrType) ToKafkaClusterComponentVersionPtrOutputWithContext(ctx context.Context) KafkaClusterComponentVersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterComponentVersionPtrOutput)
}

type KafkaClusterComponentVersionOutput struct{ *pulumi.OutputState }

func (KafkaClusterComponentVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClusterComponentVersion)(nil)).Elem()
}

func (o KafkaClusterComponentVersionOutput) ToKafkaClusterComponentVersionOutput() KafkaClusterComponentVersionOutput {
	return o
}

func (o KafkaClusterComponentVersionOutput) ToKafkaClusterComponentVersionOutputWithContext(ctx context.Context) KafkaClusterComponentVersionOutput {
	return o
}

func (o KafkaClusterComponentVersionOutput) ToKafkaClusterComponentVersionPtrOutput() KafkaClusterComponentVersionPtrOutput {
	return o.ToKafkaClusterComponentVersionPtrOutputWithContext(context.Background())
}

func (o KafkaClusterComponentVersionOutput) ToKafkaClusterComponentVersionPtrOutputWithContext(ctx context.Context) KafkaClusterComponentVersionPtrOutput {
	return o.ApplyT(func(v KafkaClusterComponentVersion) *KafkaClusterComponentVersion {
		return &v
	}).(KafkaClusterComponentVersionPtrOutput)
}

// The version of Kafka which should be used for this HDInsight Kafka Cluster. Changing this forces a new resource to be created.
func (o KafkaClusterComponentVersionOutput) Kafka() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaClusterComponentVersion) string { return v.Kafka }).(pulumi.StringOutput)
}

type KafkaClusterComponentVersionPtrOutput struct{ *pulumi.OutputState }

func (KafkaClusterComponentVersionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaClusterComponentVersion)(nil)).Elem()
}

func (o KafkaClusterComponentVersionPtrOutput) ToKafkaClusterComponentVersionPtrOutput() KafkaClusterComponentVersionPtrOutput {
	return o
}

func (o KafkaClusterComponentVersionPtrOutput) ToKafkaClusterComponentVersionPtrOutputWithContext(ctx context.Context) KafkaClusterComponentVersionPtrOutput {
	return o
}

func (o KafkaClusterComponentVersionPtrOutput) Elem() KafkaClusterComponentVersionOutput {
	return o.ApplyT(func(v *KafkaClusterComponentVersion) KafkaClusterComponentVersion { return *v }).(KafkaClusterComponentVersionOutput)
}

// The version of Kafka which should be used for this HDInsight Kafka Cluster. Changing this forces a new resource to be created.
func (o KafkaClusterComponentVersionPtrOutput) Kafka() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaClusterComponentVersion) string { return v.Kafka }).(pulumi.StringOutput)
}

type KafkaClusterGateway struct {
	// Is the Ambari portal enabled? Changing this forces a new resource to be created.
	Enabled bool `pulumi:"enabled"`
	// The password used for the Ambari Portal. Changing this forces a new resource to be created.
	Password string `pulumi:"password"`
	// The username used for the Ambari Portal. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
}

type KafkaClusterGatewayInput interface {
	pulumi.Input

	ToKafkaClusterGatewayOutput() KafkaClusterGatewayOutput
	ToKafkaClusterGatewayOutputWithContext(context.Context) KafkaClusterGatewayOutput
}

type KafkaClusterGatewayArgs struct {
	// Is the Ambari portal enabled? Changing this forces a new resource to be created.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The password used for the Ambari Portal. Changing this forces a new resource to be created.
	Password pulumi.StringInput `pulumi:"password"`
	// The username used for the Ambari Portal. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
}

func (KafkaClusterGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClusterGateway)(nil)).Elem()
}

func (i KafkaClusterGatewayArgs) ToKafkaClusterGatewayOutput() KafkaClusterGatewayOutput {
	return i.ToKafkaClusterGatewayOutputWithContext(context.Background())
}

func (i KafkaClusterGatewayArgs) ToKafkaClusterGatewayOutputWithContext(ctx context.Context) KafkaClusterGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterGatewayOutput)
}

func (i KafkaClusterGatewayArgs) ToKafkaClusterGatewayPtrOutput() KafkaClusterGatewayPtrOutput {
	return i.ToKafkaClusterGatewayPtrOutputWithContext(context.Background())
}

func (i KafkaClusterGatewayArgs) ToKafkaClusterGatewayPtrOutputWithContext(ctx context.Context) KafkaClusterGatewayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterGatewayOutput).ToKafkaClusterGatewayPtrOutputWithContext(ctx)
}

type KafkaClusterGatewayPtrInput interface {
	pulumi.Input

	ToKafkaClusterGatewayPtrOutput() KafkaClusterGatewayPtrOutput
	ToKafkaClusterGatewayPtrOutputWithContext(context.Context) KafkaClusterGatewayPtrOutput
}

type kafkaClusterGatewayPtrType KafkaClusterGatewayArgs

func KafkaClusterGatewayPtr(v *KafkaClusterGatewayArgs) KafkaClusterGatewayPtrInput {
	return (*kafkaClusterGatewayPtrType)(v)
}

func (*kafkaClusterGatewayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaClusterGateway)(nil)).Elem()
}

func (i *kafkaClusterGatewayPtrType) ToKafkaClusterGatewayPtrOutput() KafkaClusterGatewayPtrOutput {
	return i.ToKafkaClusterGatewayPtrOutputWithContext(context.Background())
}

func (i *kafkaClusterGatewayPtrType) ToKafkaClusterGatewayPtrOutputWithContext(ctx context.Context) KafkaClusterGatewayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterGatewayPtrOutput)
}

type KafkaClusterGatewayOutput struct{ *pulumi.OutputState }

func (KafkaClusterGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClusterGateway)(nil)).Elem()
}

func (o KafkaClusterGatewayOutput) ToKafkaClusterGatewayOutput() KafkaClusterGatewayOutput {
	return o
}

func (o KafkaClusterGatewayOutput) ToKafkaClusterGatewayOutputWithContext(ctx context.Context) KafkaClusterGatewayOutput {
	return o
}

func (o KafkaClusterGatewayOutput) ToKafkaClusterGatewayPtrOutput() KafkaClusterGatewayPtrOutput {
	return o.ToKafkaClusterGatewayPtrOutputWithContext(context.Background())
}

func (o KafkaClusterGatewayOutput) ToKafkaClusterGatewayPtrOutputWithContext(ctx context.Context) KafkaClusterGatewayPtrOutput {
	return o.ApplyT(func(v KafkaClusterGateway) *KafkaClusterGateway {
		return &v
	}).(KafkaClusterGatewayPtrOutput)
}

// Is the Ambari portal enabled? Changing this forces a new resource to be created.
func (o KafkaClusterGatewayOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v KafkaClusterGateway) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The password used for the Ambari Portal. Changing this forces a new resource to be created.
func (o KafkaClusterGatewayOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaClusterGateway) string { return v.Password }).(pulumi.StringOutput)
}

// The username used for the Ambari Portal. Changing this forces a new resource to be created.
func (o KafkaClusterGatewayOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaClusterGateway) string { return v.Username }).(pulumi.StringOutput)
}

type KafkaClusterGatewayPtrOutput struct{ *pulumi.OutputState }

func (KafkaClusterGatewayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaClusterGateway)(nil)).Elem()
}

func (o KafkaClusterGatewayPtrOutput) ToKafkaClusterGatewayPtrOutput() KafkaClusterGatewayPtrOutput {
	return o
}

func (o KafkaClusterGatewayPtrOutput) ToKafkaClusterGatewayPtrOutputWithContext(ctx context.Context) KafkaClusterGatewayPtrOutput {
	return o
}

func (o KafkaClusterGatewayPtrOutput) Elem() KafkaClusterGatewayOutput {
	return o.ApplyT(func(v *KafkaClusterGateway) KafkaClusterGateway { return *v }).(KafkaClusterGatewayOutput)
}

// Is the Ambari portal enabled? Changing this forces a new resource to be created.
func (o KafkaClusterGatewayPtrOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v KafkaClusterGateway) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The password used for the Ambari Portal. Changing this forces a new resource to be created.
func (o KafkaClusterGatewayPtrOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaClusterGateway) string { return v.Password }).(pulumi.StringOutput)
}

// The username used for the Ambari Portal. Changing this forces a new resource to be created.
func (o KafkaClusterGatewayPtrOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaClusterGateway) string { return v.Username }).(pulumi.StringOutput)
}

type KafkaClusterRoles struct {
	// A `headNode` block as defined above.
	HeadNode KafkaClusterRolesHeadNode `pulumi:"headNode"`
	// A `workerNode` block as defined below.
	WorkerNode KafkaClusterRolesWorkerNode `pulumi:"workerNode"`
	// A `zookeeperNode` block as defined below.
	ZookeeperNode KafkaClusterRolesZookeeperNode `pulumi:"zookeeperNode"`
}

type KafkaClusterRolesInput interface {
	pulumi.Input

	ToKafkaClusterRolesOutput() KafkaClusterRolesOutput
	ToKafkaClusterRolesOutputWithContext(context.Context) KafkaClusterRolesOutput
}

type KafkaClusterRolesArgs struct {
	// A `headNode` block as defined above.
	HeadNode KafkaClusterRolesHeadNodeInput `pulumi:"headNode"`
	// A `workerNode` block as defined below.
	WorkerNode KafkaClusterRolesWorkerNodeInput `pulumi:"workerNode"`
	// A `zookeeperNode` block as defined below.
	ZookeeperNode KafkaClusterRolesZookeeperNodeInput `pulumi:"zookeeperNode"`
}

func (KafkaClusterRolesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClusterRoles)(nil)).Elem()
}

func (i KafkaClusterRolesArgs) ToKafkaClusterRolesOutput() KafkaClusterRolesOutput {
	return i.ToKafkaClusterRolesOutputWithContext(context.Background())
}

func (i KafkaClusterRolesArgs) ToKafkaClusterRolesOutputWithContext(ctx context.Context) KafkaClusterRolesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterRolesOutput)
}

func (i KafkaClusterRolesArgs) ToKafkaClusterRolesPtrOutput() KafkaClusterRolesPtrOutput {
	return i.ToKafkaClusterRolesPtrOutputWithContext(context.Background())
}

func (i KafkaClusterRolesArgs) ToKafkaClusterRolesPtrOutputWithContext(ctx context.Context) KafkaClusterRolesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterRolesOutput).ToKafkaClusterRolesPtrOutputWithContext(ctx)
}

type KafkaClusterRolesPtrInput interface {
	pulumi.Input

	ToKafkaClusterRolesPtrOutput() KafkaClusterRolesPtrOutput
	ToKafkaClusterRolesPtrOutputWithContext(context.Context) KafkaClusterRolesPtrOutput
}

type kafkaClusterRolesPtrType KafkaClusterRolesArgs

func KafkaClusterRolesPtr(v *KafkaClusterRolesArgs) KafkaClusterRolesPtrInput {
	return (*kafkaClusterRolesPtrType)(v)
}

func (*kafkaClusterRolesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaClusterRoles)(nil)).Elem()
}

func (i *kafkaClusterRolesPtrType) ToKafkaClusterRolesPtrOutput() KafkaClusterRolesPtrOutput {
	return i.ToKafkaClusterRolesPtrOutputWithContext(context.Background())
}

func (i *kafkaClusterRolesPtrType) ToKafkaClusterRolesPtrOutputWithContext(ctx context.Context) KafkaClusterRolesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterRolesPtrOutput)
}

type KafkaClusterRolesOutput struct{ *pulumi.OutputState }

func (KafkaClusterRolesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClusterRoles)(nil)).Elem()
}

func (o KafkaClusterRolesOutput) ToKafkaClusterRolesOutput() KafkaClusterRolesOutput {
	return o
}

func (o KafkaClusterRolesOutput) ToKafkaClusterRolesOutputWithContext(ctx context.Context) KafkaClusterRolesOutput {
	return o
}

func (o KafkaClusterRolesOutput) ToKafkaClusterRolesPtrOutput() KafkaClusterRolesPtrOutput {
	return o.ToKafkaClusterRolesPtrOutputWithContext(context.Background())
}

func (o KafkaClusterRolesOutput) ToKafkaClusterRolesPtrOutputWithContext(ctx context.Context) KafkaClusterRolesPtrOutput {
	return o.ApplyT(func(v KafkaClusterRoles) *KafkaClusterRoles {
		return &v
	}).(KafkaClusterRolesPtrOutput)
}

// A `headNode` block as defined above.
func (o KafkaClusterRolesOutput) HeadNode() KafkaClusterRolesHeadNodeOutput {
	return o.ApplyT(func(v KafkaClusterRoles) KafkaClusterRolesHeadNode { return v.HeadNode }).(KafkaClusterRolesHeadNodeOutput)
}

// A `workerNode` block as defined below.
func (o KafkaClusterRolesOutput) WorkerNode() KafkaClusterRolesWorkerNodeOutput {
	return o.ApplyT(func(v KafkaClusterRoles) KafkaClusterRolesWorkerNode { return v.WorkerNode }).(KafkaClusterRolesWorkerNodeOutput)
}

// A `zookeeperNode` block as defined below.
func (o KafkaClusterRolesOutput) ZookeeperNode() KafkaClusterRolesZookeeperNodeOutput {
	return o.ApplyT(func(v KafkaClusterRoles) KafkaClusterRolesZookeeperNode { return v.ZookeeperNode }).(KafkaClusterRolesZookeeperNodeOutput)
}

type KafkaClusterRolesPtrOutput struct{ *pulumi.OutputState }

func (KafkaClusterRolesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaClusterRoles)(nil)).Elem()
}

func (o KafkaClusterRolesPtrOutput) ToKafkaClusterRolesPtrOutput() KafkaClusterRolesPtrOutput {
	return o
}

func (o KafkaClusterRolesPtrOutput) ToKafkaClusterRolesPtrOutputWithContext(ctx context.Context) KafkaClusterRolesPtrOutput {
	return o
}

func (o KafkaClusterRolesPtrOutput) Elem() KafkaClusterRolesOutput {
	return o.ApplyT(func(v *KafkaClusterRoles) KafkaClusterRoles { return *v }).(KafkaClusterRolesOutput)
}

// A `headNode` block as defined above.
func (o KafkaClusterRolesPtrOutput) HeadNode() KafkaClusterRolesHeadNodeOutput {
	return o.ApplyT(func(v KafkaClusterRoles) KafkaClusterRolesHeadNode { return v.HeadNode }).(KafkaClusterRolesHeadNodeOutput)
}

// A `workerNode` block as defined below.
func (o KafkaClusterRolesPtrOutput) WorkerNode() KafkaClusterRolesWorkerNodeOutput {
	return o.ApplyT(func(v KafkaClusterRoles) KafkaClusterRolesWorkerNode { return v.WorkerNode }).(KafkaClusterRolesWorkerNodeOutput)
}

// A `zookeeperNode` block as defined below.
func (o KafkaClusterRolesPtrOutput) ZookeeperNode() KafkaClusterRolesZookeeperNodeOutput {
	return o.ApplyT(func(v KafkaClusterRoles) KafkaClusterRolesZookeeperNode { return v.ZookeeperNode }).(KafkaClusterRolesZookeeperNodeOutput)
}

type KafkaClusterRolesHeadNode struct {
	// The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
	Password *string `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
	SshKeys []string `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId *string `pulumi:"subnetId"`
	// The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
	// The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId *string `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
	VmSize string `pulumi:"vmSize"`
}

type KafkaClusterRolesHeadNodeInput interface {
	pulumi.Input

	ToKafkaClusterRolesHeadNodeOutput() KafkaClusterRolesHeadNodeOutput
	ToKafkaClusterRolesHeadNodeOutputWithContext(context.Context) KafkaClusterRolesHeadNodeOutput
}

type KafkaClusterRolesHeadNodeArgs struct {
	// The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
	SshKeys pulumi.StringArrayInput `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
	// The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId pulumi.StringPtrInput `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
	VmSize pulumi.StringInput `pulumi:"vmSize"`
}

func (KafkaClusterRolesHeadNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClusterRolesHeadNode)(nil)).Elem()
}

func (i KafkaClusterRolesHeadNodeArgs) ToKafkaClusterRolesHeadNodeOutput() KafkaClusterRolesHeadNodeOutput {
	return i.ToKafkaClusterRolesHeadNodeOutputWithContext(context.Background())
}

func (i KafkaClusterRolesHeadNodeArgs) ToKafkaClusterRolesHeadNodeOutputWithContext(ctx context.Context) KafkaClusterRolesHeadNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterRolesHeadNodeOutput)
}

type KafkaClusterRolesHeadNodeOutput struct{ *pulumi.OutputState }

func (KafkaClusterRolesHeadNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClusterRolesHeadNode)(nil)).Elem()
}

func (o KafkaClusterRolesHeadNodeOutput) ToKafkaClusterRolesHeadNodeOutput() KafkaClusterRolesHeadNodeOutput {
	return o
}

func (o KafkaClusterRolesHeadNodeOutput) ToKafkaClusterRolesHeadNodeOutputWithContext(ctx context.Context) KafkaClusterRolesHeadNodeOutput {
	return o
}

// The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
func (o KafkaClusterRolesHeadNodeOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaClusterRolesHeadNode) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
func (o KafkaClusterRolesHeadNodeOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KafkaClusterRolesHeadNode) []string { return v.SshKeys }).(pulumi.StringArrayOutput)
}

// The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o KafkaClusterRolesHeadNodeOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaClusterRolesHeadNode) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
func (o KafkaClusterRolesHeadNodeOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaClusterRolesHeadNode) string { return v.Username }).(pulumi.StringOutput)
}

// The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o KafkaClusterRolesHeadNodeOutput) VirtualNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaClusterRolesHeadNode) *string { return v.VirtualNetworkId }).(pulumi.StringPtrOutput)
}

// The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
func (o KafkaClusterRolesHeadNodeOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaClusterRolesHeadNode) string { return v.VmSize }).(pulumi.StringOutput)
}

type KafkaClusterRolesWorkerNode struct {
	// The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
	MinInstanceCount *int `pulumi:"minInstanceCount"`
	// The number of Data Disks which should be assigned to each Worker Node, which can be between 1 and 8. Changing this forces a new resource to be created.
	NumberOfDisksPerNode int `pulumi:"numberOfDisksPerNode"`
	// The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
	Password *string `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
	SshKeys []string `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId *string `pulumi:"subnetId"`
	// The number of instances which should be run for the Worker Nodes.
	TargetInstanceCount int `pulumi:"targetInstanceCount"`
	// The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
	// The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId *string `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
	VmSize string `pulumi:"vmSize"`
}

type KafkaClusterRolesWorkerNodeInput interface {
	pulumi.Input

	ToKafkaClusterRolesWorkerNodeOutput() KafkaClusterRolesWorkerNodeOutput
	ToKafkaClusterRolesWorkerNodeOutputWithContext(context.Context) KafkaClusterRolesWorkerNodeOutput
}

type KafkaClusterRolesWorkerNodeArgs struct {
	// The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
	MinInstanceCount pulumi.IntPtrInput `pulumi:"minInstanceCount"`
	// The number of Data Disks which should be assigned to each Worker Node, which can be between 1 and 8. Changing this forces a new resource to be created.
	NumberOfDisksPerNode pulumi.IntInput `pulumi:"numberOfDisksPerNode"`
	// The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
	SshKeys pulumi.StringArrayInput `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// The number of instances which should be run for the Worker Nodes.
	TargetInstanceCount pulumi.IntInput `pulumi:"targetInstanceCount"`
	// The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
	// The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId pulumi.StringPtrInput `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
	VmSize pulumi.StringInput `pulumi:"vmSize"`
}

func (KafkaClusterRolesWorkerNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClusterRolesWorkerNode)(nil)).Elem()
}

func (i KafkaClusterRolesWorkerNodeArgs) ToKafkaClusterRolesWorkerNodeOutput() KafkaClusterRolesWorkerNodeOutput {
	return i.ToKafkaClusterRolesWorkerNodeOutputWithContext(context.Background())
}

func (i KafkaClusterRolesWorkerNodeArgs) ToKafkaClusterRolesWorkerNodeOutputWithContext(ctx context.Context) KafkaClusterRolesWorkerNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterRolesWorkerNodeOutput)
}

type KafkaClusterRolesWorkerNodeOutput struct{ *pulumi.OutputState }

func (KafkaClusterRolesWorkerNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClusterRolesWorkerNode)(nil)).Elem()
}

func (o KafkaClusterRolesWorkerNodeOutput) ToKafkaClusterRolesWorkerNodeOutput() KafkaClusterRolesWorkerNodeOutput {
	return o
}

func (o KafkaClusterRolesWorkerNodeOutput) ToKafkaClusterRolesWorkerNodeOutputWithContext(ctx context.Context) KafkaClusterRolesWorkerNodeOutput {
	return o
}

// The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
func (o KafkaClusterRolesWorkerNodeOutput) MinInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaClusterRolesWorkerNode) *int { return v.MinInstanceCount }).(pulumi.IntPtrOutput)
}

// The number of Data Disks which should be assigned to each Worker Node, which can be between 1 and 8. Changing this forces a new resource to be created.
func (o KafkaClusterRolesWorkerNodeOutput) NumberOfDisksPerNode() pulumi.IntOutput {
	return o.ApplyT(func(v KafkaClusterRolesWorkerNode) int { return v.NumberOfDisksPerNode }).(pulumi.IntOutput)
}

// The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
func (o KafkaClusterRolesWorkerNodeOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaClusterRolesWorkerNode) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
func (o KafkaClusterRolesWorkerNodeOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KafkaClusterRolesWorkerNode) []string { return v.SshKeys }).(pulumi.StringArrayOutput)
}

// The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o KafkaClusterRolesWorkerNodeOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaClusterRolesWorkerNode) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The number of instances which should be run for the Worker Nodes.
func (o KafkaClusterRolesWorkerNodeOutput) TargetInstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v KafkaClusterRolesWorkerNode) int { return v.TargetInstanceCount }).(pulumi.IntOutput)
}

// The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
func (o KafkaClusterRolesWorkerNodeOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaClusterRolesWorkerNode) string { return v.Username }).(pulumi.StringOutput)
}

// The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o KafkaClusterRolesWorkerNodeOutput) VirtualNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaClusterRolesWorkerNode) *string { return v.VirtualNetworkId }).(pulumi.StringPtrOutput)
}

// The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
func (o KafkaClusterRolesWorkerNodeOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaClusterRolesWorkerNode) string { return v.VmSize }).(pulumi.StringOutput)
}

type KafkaClusterRolesZookeeperNode struct {
	// The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
	Password *string `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
	SshKeys []string `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId *string `pulumi:"subnetId"`
	// The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
	// The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId *string `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
	VmSize string `pulumi:"vmSize"`
}

type KafkaClusterRolesZookeeperNodeInput interface {
	pulumi.Input

	ToKafkaClusterRolesZookeeperNodeOutput() KafkaClusterRolesZookeeperNodeOutput
	ToKafkaClusterRolesZookeeperNodeOutputWithContext(context.Context) KafkaClusterRolesZookeeperNodeOutput
}

type KafkaClusterRolesZookeeperNodeArgs struct {
	// The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
	SshKeys pulumi.StringArrayInput `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
	// The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId pulumi.StringPtrInput `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
	VmSize pulumi.StringInput `pulumi:"vmSize"`
}

func (KafkaClusterRolesZookeeperNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClusterRolesZookeeperNode)(nil)).Elem()
}

func (i KafkaClusterRolesZookeeperNodeArgs) ToKafkaClusterRolesZookeeperNodeOutput() KafkaClusterRolesZookeeperNodeOutput {
	return i.ToKafkaClusterRolesZookeeperNodeOutputWithContext(context.Background())
}

func (i KafkaClusterRolesZookeeperNodeArgs) ToKafkaClusterRolesZookeeperNodeOutputWithContext(ctx context.Context) KafkaClusterRolesZookeeperNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterRolesZookeeperNodeOutput)
}

type KafkaClusterRolesZookeeperNodeOutput struct{ *pulumi.OutputState }

func (KafkaClusterRolesZookeeperNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClusterRolesZookeeperNode)(nil)).Elem()
}

func (o KafkaClusterRolesZookeeperNodeOutput) ToKafkaClusterRolesZookeeperNodeOutput() KafkaClusterRolesZookeeperNodeOutput {
	return o
}

func (o KafkaClusterRolesZookeeperNodeOutput) ToKafkaClusterRolesZookeeperNodeOutputWithContext(ctx context.Context) KafkaClusterRolesZookeeperNodeOutput {
	return o
}

// The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
func (o KafkaClusterRolesZookeeperNodeOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaClusterRolesZookeeperNode) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
func (o KafkaClusterRolesZookeeperNodeOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KafkaClusterRolesZookeeperNode) []string { return v.SshKeys }).(pulumi.StringArrayOutput)
}

// The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o KafkaClusterRolesZookeeperNodeOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaClusterRolesZookeeperNode) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
func (o KafkaClusterRolesZookeeperNodeOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaClusterRolesZookeeperNode) string { return v.Username }).(pulumi.StringOutput)
}

// The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o KafkaClusterRolesZookeeperNodeOutput) VirtualNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaClusterRolesZookeeperNode) *string { return v.VirtualNetworkId }).(pulumi.StringPtrOutput)
}

// The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
func (o KafkaClusterRolesZookeeperNodeOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaClusterRolesZookeeperNode) string { return v.VmSize }).(pulumi.StringOutput)
}

type KafkaClusterStorageAccount struct {
	// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
	IsDefault bool `pulumi:"isDefault"`
	// The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
	StorageAccountKey string `pulumi:"storageAccountKey"`
	// The ID of the Storage Container. Changing this forces a new resource to be created.
	StorageContainerId string `pulumi:"storageContainerId"`
}

type KafkaClusterStorageAccountInput interface {
	pulumi.Input

	ToKafkaClusterStorageAccountOutput() KafkaClusterStorageAccountOutput
	ToKafkaClusterStorageAccountOutputWithContext(context.Context) KafkaClusterStorageAccountOutput
}

type KafkaClusterStorageAccountArgs struct {
	// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
	IsDefault pulumi.BoolInput `pulumi:"isDefault"`
	// The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
	StorageAccountKey pulumi.StringInput `pulumi:"storageAccountKey"`
	// The ID of the Storage Container. Changing this forces a new resource to be created.
	StorageContainerId pulumi.StringInput `pulumi:"storageContainerId"`
}

func (KafkaClusterStorageAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClusterStorageAccount)(nil)).Elem()
}

func (i KafkaClusterStorageAccountArgs) ToKafkaClusterStorageAccountOutput() KafkaClusterStorageAccountOutput {
	return i.ToKafkaClusterStorageAccountOutputWithContext(context.Background())
}

func (i KafkaClusterStorageAccountArgs) ToKafkaClusterStorageAccountOutputWithContext(ctx context.Context) KafkaClusterStorageAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterStorageAccountOutput)
}

type KafkaClusterStorageAccountArrayInput interface {
	pulumi.Input

	ToKafkaClusterStorageAccountArrayOutput() KafkaClusterStorageAccountArrayOutput
	ToKafkaClusterStorageAccountArrayOutputWithContext(context.Context) KafkaClusterStorageAccountArrayOutput
}

type KafkaClusterStorageAccountArray []KafkaClusterStorageAccountInput

func (KafkaClusterStorageAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaClusterStorageAccount)(nil)).Elem()
}

func (i KafkaClusterStorageAccountArray) ToKafkaClusterStorageAccountArrayOutput() KafkaClusterStorageAccountArrayOutput {
	return i.ToKafkaClusterStorageAccountArrayOutputWithContext(context.Background())
}

func (i KafkaClusterStorageAccountArray) ToKafkaClusterStorageAccountArrayOutputWithContext(ctx context.Context) KafkaClusterStorageAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterStorageAccountArrayOutput)
}

type KafkaClusterStorageAccountOutput struct{ *pulumi.OutputState }

func (KafkaClusterStorageAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClusterStorageAccount)(nil)).Elem()
}

func (o KafkaClusterStorageAccountOutput) ToKafkaClusterStorageAccountOutput() KafkaClusterStorageAccountOutput {
	return o
}

func (o KafkaClusterStorageAccountOutput) ToKafkaClusterStorageAccountOutputWithContext(ctx context.Context) KafkaClusterStorageAccountOutput {
	return o
}

// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
func (o KafkaClusterStorageAccountOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v KafkaClusterStorageAccount) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
func (o KafkaClusterStorageAccountOutput) StorageAccountKey() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaClusterStorageAccount) string { return v.StorageAccountKey }).(pulumi.StringOutput)
}

// The ID of the Storage Container. Changing this forces a new resource to be created.
func (o KafkaClusterStorageAccountOutput) StorageContainerId() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaClusterStorageAccount) string { return v.StorageContainerId }).(pulumi.StringOutput)
}

type KafkaClusterStorageAccountArrayOutput struct{ *pulumi.OutputState }

func (KafkaClusterStorageAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaClusterStorageAccount)(nil)).Elem()
}

func (o KafkaClusterStorageAccountArrayOutput) ToKafkaClusterStorageAccountArrayOutput() KafkaClusterStorageAccountArrayOutput {
	return o
}

func (o KafkaClusterStorageAccountArrayOutput) ToKafkaClusterStorageAccountArrayOutputWithContext(ctx context.Context) KafkaClusterStorageAccountArrayOutput {
	return o
}

func (o KafkaClusterStorageAccountArrayOutput) Index(i pulumi.IntInput) KafkaClusterStorageAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KafkaClusterStorageAccount {
		return vs[0].([]KafkaClusterStorageAccount)[vs[1].(int)]
	}).(KafkaClusterStorageAccountOutput)
}

type KafkaClusterStorageAccountGen2 struct {
	// The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
	FilesystemId string `pulumi:"filesystemId"`
	// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
	IsDefault bool `pulumi:"isDefault"`
	// The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
	ManagedIdentityResourceId string `pulumi:"managedIdentityResourceId"`
	// The ID of the Storage Account. Changing this forces a new resource to be created.
	StorageResourceId string `pulumi:"storageResourceId"`
}

type KafkaClusterStorageAccountGen2Input interface {
	pulumi.Input

	ToKafkaClusterStorageAccountGen2Output() KafkaClusterStorageAccountGen2Output
	ToKafkaClusterStorageAccountGen2OutputWithContext(context.Context) KafkaClusterStorageAccountGen2Output
}

type KafkaClusterStorageAccountGen2Args struct {
	// The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
	FilesystemId pulumi.StringInput `pulumi:"filesystemId"`
	// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
	IsDefault pulumi.BoolInput `pulumi:"isDefault"`
	// The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
	ManagedIdentityResourceId pulumi.StringInput `pulumi:"managedIdentityResourceId"`
	// The ID of the Storage Account. Changing this forces a new resource to be created.
	StorageResourceId pulumi.StringInput `pulumi:"storageResourceId"`
}

func (KafkaClusterStorageAccountGen2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClusterStorageAccountGen2)(nil)).Elem()
}

func (i KafkaClusterStorageAccountGen2Args) ToKafkaClusterStorageAccountGen2Output() KafkaClusterStorageAccountGen2Output {
	return i.ToKafkaClusterStorageAccountGen2OutputWithContext(context.Background())
}

func (i KafkaClusterStorageAccountGen2Args) ToKafkaClusterStorageAccountGen2OutputWithContext(ctx context.Context) KafkaClusterStorageAccountGen2Output {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterStorageAccountGen2Output)
}

func (i KafkaClusterStorageAccountGen2Args) ToKafkaClusterStorageAccountGen2PtrOutput() KafkaClusterStorageAccountGen2PtrOutput {
	return i.ToKafkaClusterStorageAccountGen2PtrOutputWithContext(context.Background())
}

func (i KafkaClusterStorageAccountGen2Args) ToKafkaClusterStorageAccountGen2PtrOutputWithContext(ctx context.Context) KafkaClusterStorageAccountGen2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterStorageAccountGen2Output).ToKafkaClusterStorageAccountGen2PtrOutputWithContext(ctx)
}

type KafkaClusterStorageAccountGen2PtrInput interface {
	pulumi.Input

	ToKafkaClusterStorageAccountGen2PtrOutput() KafkaClusterStorageAccountGen2PtrOutput
	ToKafkaClusterStorageAccountGen2PtrOutputWithContext(context.Context) KafkaClusterStorageAccountGen2PtrOutput
}

type kafkaClusterStorageAccountGen2PtrType KafkaClusterStorageAccountGen2Args

func KafkaClusterStorageAccountGen2Ptr(v *KafkaClusterStorageAccountGen2Args) KafkaClusterStorageAccountGen2PtrInput {
	return (*kafkaClusterStorageAccountGen2PtrType)(v)
}

func (*kafkaClusterStorageAccountGen2PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaClusterStorageAccountGen2)(nil)).Elem()
}

func (i *kafkaClusterStorageAccountGen2PtrType) ToKafkaClusterStorageAccountGen2PtrOutput() KafkaClusterStorageAccountGen2PtrOutput {
	return i.ToKafkaClusterStorageAccountGen2PtrOutputWithContext(context.Background())
}

func (i *kafkaClusterStorageAccountGen2PtrType) ToKafkaClusterStorageAccountGen2PtrOutputWithContext(ctx context.Context) KafkaClusterStorageAccountGen2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaClusterStorageAccountGen2PtrOutput)
}

type KafkaClusterStorageAccountGen2Output struct{ *pulumi.OutputState }

func (KafkaClusterStorageAccountGen2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaClusterStorageAccountGen2)(nil)).Elem()
}

func (o KafkaClusterStorageAccountGen2Output) ToKafkaClusterStorageAccountGen2Output() KafkaClusterStorageAccountGen2Output {
	return o
}

func (o KafkaClusterStorageAccountGen2Output) ToKafkaClusterStorageAccountGen2OutputWithContext(ctx context.Context) KafkaClusterStorageAccountGen2Output {
	return o
}

func (o KafkaClusterStorageAccountGen2Output) ToKafkaClusterStorageAccountGen2PtrOutput() KafkaClusterStorageAccountGen2PtrOutput {
	return o.ToKafkaClusterStorageAccountGen2PtrOutputWithContext(context.Background())
}

func (o KafkaClusterStorageAccountGen2Output) ToKafkaClusterStorageAccountGen2PtrOutputWithContext(ctx context.Context) KafkaClusterStorageAccountGen2PtrOutput {
	return o.ApplyT(func(v KafkaClusterStorageAccountGen2) *KafkaClusterStorageAccountGen2 {
		return &v
	}).(KafkaClusterStorageAccountGen2PtrOutput)
}

// The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
func (o KafkaClusterStorageAccountGen2Output) FilesystemId() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaClusterStorageAccountGen2) string { return v.FilesystemId }).(pulumi.StringOutput)
}

// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
func (o KafkaClusterStorageAccountGen2Output) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v KafkaClusterStorageAccountGen2) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
func (o KafkaClusterStorageAccountGen2Output) ManagedIdentityResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaClusterStorageAccountGen2) string { return v.ManagedIdentityResourceId }).(pulumi.StringOutput)
}

// The ID of the Storage Account. Changing this forces a new resource to be created.
func (o KafkaClusterStorageAccountGen2Output) StorageResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaClusterStorageAccountGen2) string { return v.StorageResourceId }).(pulumi.StringOutput)
}

type KafkaClusterStorageAccountGen2PtrOutput struct{ *pulumi.OutputState }

func (KafkaClusterStorageAccountGen2PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaClusterStorageAccountGen2)(nil)).Elem()
}

func (o KafkaClusterStorageAccountGen2PtrOutput) ToKafkaClusterStorageAccountGen2PtrOutput() KafkaClusterStorageAccountGen2PtrOutput {
	return o
}

func (o KafkaClusterStorageAccountGen2PtrOutput) ToKafkaClusterStorageAccountGen2PtrOutputWithContext(ctx context.Context) KafkaClusterStorageAccountGen2PtrOutput {
	return o
}

func (o KafkaClusterStorageAccountGen2PtrOutput) Elem() KafkaClusterStorageAccountGen2Output {
	return o.ApplyT(func(v *KafkaClusterStorageAccountGen2) KafkaClusterStorageAccountGen2 { return *v }).(KafkaClusterStorageAccountGen2Output)
}

// The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
func (o KafkaClusterStorageAccountGen2PtrOutput) FilesystemId() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaClusterStorageAccountGen2) string { return v.FilesystemId }).(pulumi.StringOutput)
}

// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
func (o KafkaClusterStorageAccountGen2PtrOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v KafkaClusterStorageAccountGen2) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
func (o KafkaClusterStorageAccountGen2PtrOutput) ManagedIdentityResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaClusterStorageAccountGen2) string { return v.ManagedIdentityResourceId }).(pulumi.StringOutput)
}

// The ID of the Storage Account. Changing this forces a new resource to be created.
func (o KafkaClusterStorageAccountGen2PtrOutput) StorageResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaClusterStorageAccountGen2) string { return v.StorageResourceId }).(pulumi.StringOutput)
}

type MLServicesClusterGateway struct {
	// Is the Ambari portal enabled? Changing this forces a new resource to be created.
	Enabled bool `pulumi:"enabled"`
	// The password used for the Ambari Portal. Changing this forces a new resource to be created.
	Password string `pulumi:"password"`
	// The username used for the Ambari Portal. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
}

type MLServicesClusterGatewayInput interface {
	pulumi.Input

	ToMLServicesClusterGatewayOutput() MLServicesClusterGatewayOutput
	ToMLServicesClusterGatewayOutputWithContext(context.Context) MLServicesClusterGatewayOutput
}

type MLServicesClusterGatewayArgs struct {
	// Is the Ambari portal enabled? Changing this forces a new resource to be created.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The password used for the Ambari Portal. Changing this forces a new resource to be created.
	Password pulumi.StringInput `pulumi:"password"`
	// The username used for the Ambari Portal. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
}

func (MLServicesClusterGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MLServicesClusterGateway)(nil)).Elem()
}

func (i MLServicesClusterGatewayArgs) ToMLServicesClusterGatewayOutput() MLServicesClusterGatewayOutput {
	return i.ToMLServicesClusterGatewayOutputWithContext(context.Background())
}

func (i MLServicesClusterGatewayArgs) ToMLServicesClusterGatewayOutputWithContext(ctx context.Context) MLServicesClusterGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLServicesClusterGatewayOutput)
}

func (i MLServicesClusterGatewayArgs) ToMLServicesClusterGatewayPtrOutput() MLServicesClusterGatewayPtrOutput {
	return i.ToMLServicesClusterGatewayPtrOutputWithContext(context.Background())
}

func (i MLServicesClusterGatewayArgs) ToMLServicesClusterGatewayPtrOutputWithContext(ctx context.Context) MLServicesClusterGatewayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLServicesClusterGatewayOutput).ToMLServicesClusterGatewayPtrOutputWithContext(ctx)
}

type MLServicesClusterGatewayPtrInput interface {
	pulumi.Input

	ToMLServicesClusterGatewayPtrOutput() MLServicesClusterGatewayPtrOutput
	ToMLServicesClusterGatewayPtrOutputWithContext(context.Context) MLServicesClusterGatewayPtrOutput
}

type mlservicesClusterGatewayPtrType MLServicesClusterGatewayArgs

func MLServicesClusterGatewayPtr(v *MLServicesClusterGatewayArgs) MLServicesClusterGatewayPtrInput {
	return (*mlservicesClusterGatewayPtrType)(v)
}

func (*mlservicesClusterGatewayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MLServicesClusterGateway)(nil)).Elem()
}

func (i *mlservicesClusterGatewayPtrType) ToMLServicesClusterGatewayPtrOutput() MLServicesClusterGatewayPtrOutput {
	return i.ToMLServicesClusterGatewayPtrOutputWithContext(context.Background())
}

func (i *mlservicesClusterGatewayPtrType) ToMLServicesClusterGatewayPtrOutputWithContext(ctx context.Context) MLServicesClusterGatewayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLServicesClusterGatewayPtrOutput)
}

type MLServicesClusterGatewayOutput struct{ *pulumi.OutputState }

func (MLServicesClusterGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLServicesClusterGateway)(nil)).Elem()
}

func (o MLServicesClusterGatewayOutput) ToMLServicesClusterGatewayOutput() MLServicesClusterGatewayOutput {
	return o
}

func (o MLServicesClusterGatewayOutput) ToMLServicesClusterGatewayOutputWithContext(ctx context.Context) MLServicesClusterGatewayOutput {
	return o
}

func (o MLServicesClusterGatewayOutput) ToMLServicesClusterGatewayPtrOutput() MLServicesClusterGatewayPtrOutput {
	return o.ToMLServicesClusterGatewayPtrOutputWithContext(context.Background())
}

func (o MLServicesClusterGatewayOutput) ToMLServicesClusterGatewayPtrOutputWithContext(ctx context.Context) MLServicesClusterGatewayPtrOutput {
	return o.ApplyT(func(v MLServicesClusterGateway) *MLServicesClusterGateway {
		return &v
	}).(MLServicesClusterGatewayPtrOutput)
}

// Is the Ambari portal enabled? Changing this forces a new resource to be created.
func (o MLServicesClusterGatewayOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v MLServicesClusterGateway) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The password used for the Ambari Portal. Changing this forces a new resource to be created.
func (o MLServicesClusterGatewayOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v MLServicesClusterGateway) string { return v.Password }).(pulumi.StringOutput)
}

// The username used for the Ambari Portal. Changing this forces a new resource to be created.
func (o MLServicesClusterGatewayOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v MLServicesClusterGateway) string { return v.Username }).(pulumi.StringOutput)
}

type MLServicesClusterGatewayPtrOutput struct{ *pulumi.OutputState }

func (MLServicesClusterGatewayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MLServicesClusterGateway)(nil)).Elem()
}

func (o MLServicesClusterGatewayPtrOutput) ToMLServicesClusterGatewayPtrOutput() MLServicesClusterGatewayPtrOutput {
	return o
}

func (o MLServicesClusterGatewayPtrOutput) ToMLServicesClusterGatewayPtrOutputWithContext(ctx context.Context) MLServicesClusterGatewayPtrOutput {
	return o
}

func (o MLServicesClusterGatewayPtrOutput) Elem() MLServicesClusterGatewayOutput {
	return o.ApplyT(func(v *MLServicesClusterGateway) MLServicesClusterGateway { return *v }).(MLServicesClusterGatewayOutput)
}

// Is the Ambari portal enabled? Changing this forces a new resource to be created.
func (o MLServicesClusterGatewayPtrOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v MLServicesClusterGateway) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The password used for the Ambari Portal. Changing this forces a new resource to be created.
func (o MLServicesClusterGatewayPtrOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v MLServicesClusterGateway) string { return v.Password }).(pulumi.StringOutput)
}

// The username used for the Ambari Portal. Changing this forces a new resource to be created.
func (o MLServicesClusterGatewayPtrOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v MLServicesClusterGateway) string { return v.Username }).(pulumi.StringOutput)
}

type MLServicesClusterRoles struct {
	// A `edgeNode` block as defined above.
	EdgeNode MLServicesClusterRolesEdgeNode `pulumi:"edgeNode"`
	// A `headNode` block as defined above.
	HeadNode MLServicesClusterRolesHeadNode `pulumi:"headNode"`
	// A `workerNode` block as defined below.
	WorkerNode MLServicesClusterRolesWorkerNode `pulumi:"workerNode"`
	// A `zookeeperNode` block as defined below.
	ZookeeperNode MLServicesClusterRolesZookeeperNode `pulumi:"zookeeperNode"`
}

type MLServicesClusterRolesInput interface {
	pulumi.Input

	ToMLServicesClusterRolesOutput() MLServicesClusterRolesOutput
	ToMLServicesClusterRolesOutputWithContext(context.Context) MLServicesClusterRolesOutput
}

type MLServicesClusterRolesArgs struct {
	// A `edgeNode` block as defined above.
	EdgeNode MLServicesClusterRolesEdgeNodeInput `pulumi:"edgeNode"`
	// A `headNode` block as defined above.
	HeadNode MLServicesClusterRolesHeadNodeInput `pulumi:"headNode"`
	// A `workerNode` block as defined below.
	WorkerNode MLServicesClusterRolesWorkerNodeInput `pulumi:"workerNode"`
	// A `zookeeperNode` block as defined below.
	ZookeeperNode MLServicesClusterRolesZookeeperNodeInput `pulumi:"zookeeperNode"`
}

func (MLServicesClusterRolesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MLServicesClusterRoles)(nil)).Elem()
}

func (i MLServicesClusterRolesArgs) ToMLServicesClusterRolesOutput() MLServicesClusterRolesOutput {
	return i.ToMLServicesClusterRolesOutputWithContext(context.Background())
}

func (i MLServicesClusterRolesArgs) ToMLServicesClusterRolesOutputWithContext(ctx context.Context) MLServicesClusterRolesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLServicesClusterRolesOutput)
}

func (i MLServicesClusterRolesArgs) ToMLServicesClusterRolesPtrOutput() MLServicesClusterRolesPtrOutput {
	return i.ToMLServicesClusterRolesPtrOutputWithContext(context.Background())
}

func (i MLServicesClusterRolesArgs) ToMLServicesClusterRolesPtrOutputWithContext(ctx context.Context) MLServicesClusterRolesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLServicesClusterRolesOutput).ToMLServicesClusterRolesPtrOutputWithContext(ctx)
}

type MLServicesClusterRolesPtrInput interface {
	pulumi.Input

	ToMLServicesClusterRolesPtrOutput() MLServicesClusterRolesPtrOutput
	ToMLServicesClusterRolesPtrOutputWithContext(context.Context) MLServicesClusterRolesPtrOutput
}

type mlservicesClusterRolesPtrType MLServicesClusterRolesArgs

func MLServicesClusterRolesPtr(v *MLServicesClusterRolesArgs) MLServicesClusterRolesPtrInput {
	return (*mlservicesClusterRolesPtrType)(v)
}

func (*mlservicesClusterRolesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MLServicesClusterRoles)(nil)).Elem()
}

func (i *mlservicesClusterRolesPtrType) ToMLServicesClusterRolesPtrOutput() MLServicesClusterRolesPtrOutput {
	return i.ToMLServicesClusterRolesPtrOutputWithContext(context.Background())
}

func (i *mlservicesClusterRolesPtrType) ToMLServicesClusterRolesPtrOutputWithContext(ctx context.Context) MLServicesClusterRolesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLServicesClusterRolesPtrOutput)
}

type MLServicesClusterRolesOutput struct{ *pulumi.OutputState }

func (MLServicesClusterRolesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLServicesClusterRoles)(nil)).Elem()
}

func (o MLServicesClusterRolesOutput) ToMLServicesClusterRolesOutput() MLServicesClusterRolesOutput {
	return o
}

func (o MLServicesClusterRolesOutput) ToMLServicesClusterRolesOutputWithContext(ctx context.Context) MLServicesClusterRolesOutput {
	return o
}

func (o MLServicesClusterRolesOutput) ToMLServicesClusterRolesPtrOutput() MLServicesClusterRolesPtrOutput {
	return o.ToMLServicesClusterRolesPtrOutputWithContext(context.Background())
}

func (o MLServicesClusterRolesOutput) ToMLServicesClusterRolesPtrOutputWithContext(ctx context.Context) MLServicesClusterRolesPtrOutput {
	return o.ApplyT(func(v MLServicesClusterRoles) *MLServicesClusterRoles {
		return &v
	}).(MLServicesClusterRolesPtrOutput)
}

// A `edgeNode` block as defined above.
func (o MLServicesClusterRolesOutput) EdgeNode() MLServicesClusterRolesEdgeNodeOutput {
	return o.ApplyT(func(v MLServicesClusterRoles) MLServicesClusterRolesEdgeNode { return v.EdgeNode }).(MLServicesClusterRolesEdgeNodeOutput)
}

// A `headNode` block as defined above.
func (o MLServicesClusterRolesOutput) HeadNode() MLServicesClusterRolesHeadNodeOutput {
	return o.ApplyT(func(v MLServicesClusterRoles) MLServicesClusterRolesHeadNode { return v.HeadNode }).(MLServicesClusterRolesHeadNodeOutput)
}

// A `workerNode` block as defined below.
func (o MLServicesClusterRolesOutput) WorkerNode() MLServicesClusterRolesWorkerNodeOutput {
	return o.ApplyT(func(v MLServicesClusterRoles) MLServicesClusterRolesWorkerNode { return v.WorkerNode }).(MLServicesClusterRolesWorkerNodeOutput)
}

// A `zookeeperNode` block as defined below.
func (o MLServicesClusterRolesOutput) ZookeeperNode() MLServicesClusterRolesZookeeperNodeOutput {
	return o.ApplyT(func(v MLServicesClusterRoles) MLServicesClusterRolesZookeeperNode { return v.ZookeeperNode }).(MLServicesClusterRolesZookeeperNodeOutput)
}

type MLServicesClusterRolesPtrOutput struct{ *pulumi.OutputState }

func (MLServicesClusterRolesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MLServicesClusterRoles)(nil)).Elem()
}

func (o MLServicesClusterRolesPtrOutput) ToMLServicesClusterRolesPtrOutput() MLServicesClusterRolesPtrOutput {
	return o
}

func (o MLServicesClusterRolesPtrOutput) ToMLServicesClusterRolesPtrOutputWithContext(ctx context.Context) MLServicesClusterRolesPtrOutput {
	return o
}

func (o MLServicesClusterRolesPtrOutput) Elem() MLServicesClusterRolesOutput {
	return o.ApplyT(func(v *MLServicesClusterRoles) MLServicesClusterRoles { return *v }).(MLServicesClusterRolesOutput)
}

// A `edgeNode` block as defined above.
func (o MLServicesClusterRolesPtrOutput) EdgeNode() MLServicesClusterRolesEdgeNodeOutput {
	return o.ApplyT(func(v MLServicesClusterRoles) MLServicesClusterRolesEdgeNode { return v.EdgeNode }).(MLServicesClusterRolesEdgeNodeOutput)
}

// A `headNode` block as defined above.
func (o MLServicesClusterRolesPtrOutput) HeadNode() MLServicesClusterRolesHeadNodeOutput {
	return o.ApplyT(func(v MLServicesClusterRoles) MLServicesClusterRolesHeadNode { return v.HeadNode }).(MLServicesClusterRolesHeadNodeOutput)
}

// A `workerNode` block as defined below.
func (o MLServicesClusterRolesPtrOutput) WorkerNode() MLServicesClusterRolesWorkerNodeOutput {
	return o.ApplyT(func(v MLServicesClusterRoles) MLServicesClusterRolesWorkerNode { return v.WorkerNode }).(MLServicesClusterRolesWorkerNodeOutput)
}

// A `zookeeperNode` block as defined below.
func (o MLServicesClusterRolesPtrOutput) ZookeeperNode() MLServicesClusterRolesZookeeperNodeOutput {
	return o.ApplyT(func(v MLServicesClusterRoles) MLServicesClusterRolesZookeeperNode { return v.ZookeeperNode }).(MLServicesClusterRolesZookeeperNodeOutput)
}

type MLServicesClusterRolesEdgeNode struct {
	// The Password associated with the local administrator for the Edge Node. Changing this forces a new resource to be created.
	Password *string `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Edge Node. Changing this forces a new resource to be created.
	SshKeys []string `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Edge Node should be provisioned within. Changing this forces a new resource to be created.
	SubnetId *string `pulumi:"subnetId"`
	// The Username of the local administrator for the Edge Node. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
	// The ID of the Virtual Network where the Edge Node should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId *string `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Edge Node. Changing this forces a new resource to be created.
	VmSize string `pulumi:"vmSize"`
}

type MLServicesClusterRolesEdgeNodeInput interface {
	pulumi.Input

	ToMLServicesClusterRolesEdgeNodeOutput() MLServicesClusterRolesEdgeNodeOutput
	ToMLServicesClusterRolesEdgeNodeOutputWithContext(context.Context) MLServicesClusterRolesEdgeNodeOutput
}

type MLServicesClusterRolesEdgeNodeArgs struct {
	// The Password associated with the local administrator for the Edge Node. Changing this forces a new resource to be created.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Edge Node. Changing this forces a new resource to be created.
	SshKeys pulumi.StringArrayInput `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Edge Node should be provisioned within. Changing this forces a new resource to be created.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// The Username of the local administrator for the Edge Node. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
	// The ID of the Virtual Network where the Edge Node should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId pulumi.StringPtrInput `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Edge Node. Changing this forces a new resource to be created.
	VmSize pulumi.StringInput `pulumi:"vmSize"`
}

func (MLServicesClusterRolesEdgeNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MLServicesClusterRolesEdgeNode)(nil)).Elem()
}

func (i MLServicesClusterRolesEdgeNodeArgs) ToMLServicesClusterRolesEdgeNodeOutput() MLServicesClusterRolesEdgeNodeOutput {
	return i.ToMLServicesClusterRolesEdgeNodeOutputWithContext(context.Background())
}

func (i MLServicesClusterRolesEdgeNodeArgs) ToMLServicesClusterRolesEdgeNodeOutputWithContext(ctx context.Context) MLServicesClusterRolesEdgeNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLServicesClusterRolesEdgeNodeOutput)
}

type MLServicesClusterRolesEdgeNodeOutput struct{ *pulumi.OutputState }

func (MLServicesClusterRolesEdgeNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLServicesClusterRolesEdgeNode)(nil)).Elem()
}

func (o MLServicesClusterRolesEdgeNodeOutput) ToMLServicesClusterRolesEdgeNodeOutput() MLServicesClusterRolesEdgeNodeOutput {
	return o
}

func (o MLServicesClusterRolesEdgeNodeOutput) ToMLServicesClusterRolesEdgeNodeOutputWithContext(ctx context.Context) MLServicesClusterRolesEdgeNodeOutput {
	return o
}

// The Password associated with the local administrator for the Edge Node. Changing this forces a new resource to be created.
func (o MLServicesClusterRolesEdgeNodeOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLServicesClusterRolesEdgeNode) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// A list of SSH Keys which should be used for the local administrator on the Edge Node. Changing this forces a new resource to be created.
func (o MLServicesClusterRolesEdgeNodeOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MLServicesClusterRolesEdgeNode) []string { return v.SshKeys }).(pulumi.StringArrayOutput)
}

// The ID of the Subnet within the Virtual Network where the Edge Node should be provisioned within. Changing this forces a new resource to be created.
func (o MLServicesClusterRolesEdgeNodeOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLServicesClusterRolesEdgeNode) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The Username of the local administrator for the Edge Node. Changing this forces a new resource to be created.
func (o MLServicesClusterRolesEdgeNodeOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v MLServicesClusterRolesEdgeNode) string { return v.Username }).(pulumi.StringOutput)
}

// The ID of the Virtual Network where the Edge Node should be provisioned within. Changing this forces a new resource to be created.
func (o MLServicesClusterRolesEdgeNodeOutput) VirtualNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLServicesClusterRolesEdgeNode) *string { return v.VirtualNetworkId }).(pulumi.StringPtrOutput)
}

// The Size of the Virtual Machine which should be used as the Edge Node. Changing this forces a new resource to be created.
func (o MLServicesClusterRolesEdgeNodeOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v MLServicesClusterRolesEdgeNode) string { return v.VmSize }).(pulumi.StringOutput)
}

type MLServicesClusterRolesHeadNode struct {
	// The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
	Password *string `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
	SshKeys []string `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId *string `pulumi:"subnetId"`
	// The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
	// The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId *string `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
	VmSize string `pulumi:"vmSize"`
}

type MLServicesClusterRolesHeadNodeInput interface {
	pulumi.Input

	ToMLServicesClusterRolesHeadNodeOutput() MLServicesClusterRolesHeadNodeOutput
	ToMLServicesClusterRolesHeadNodeOutputWithContext(context.Context) MLServicesClusterRolesHeadNodeOutput
}

type MLServicesClusterRolesHeadNodeArgs struct {
	// The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
	SshKeys pulumi.StringArrayInput `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
	// The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId pulumi.StringPtrInput `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
	VmSize pulumi.StringInput `pulumi:"vmSize"`
}

func (MLServicesClusterRolesHeadNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MLServicesClusterRolesHeadNode)(nil)).Elem()
}

func (i MLServicesClusterRolesHeadNodeArgs) ToMLServicesClusterRolesHeadNodeOutput() MLServicesClusterRolesHeadNodeOutput {
	return i.ToMLServicesClusterRolesHeadNodeOutputWithContext(context.Background())
}

func (i MLServicesClusterRolesHeadNodeArgs) ToMLServicesClusterRolesHeadNodeOutputWithContext(ctx context.Context) MLServicesClusterRolesHeadNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLServicesClusterRolesHeadNodeOutput)
}

type MLServicesClusterRolesHeadNodeOutput struct{ *pulumi.OutputState }

func (MLServicesClusterRolesHeadNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLServicesClusterRolesHeadNode)(nil)).Elem()
}

func (o MLServicesClusterRolesHeadNodeOutput) ToMLServicesClusterRolesHeadNodeOutput() MLServicesClusterRolesHeadNodeOutput {
	return o
}

func (o MLServicesClusterRolesHeadNodeOutput) ToMLServicesClusterRolesHeadNodeOutputWithContext(ctx context.Context) MLServicesClusterRolesHeadNodeOutput {
	return o
}

// The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
func (o MLServicesClusterRolesHeadNodeOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLServicesClusterRolesHeadNode) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
func (o MLServicesClusterRolesHeadNodeOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MLServicesClusterRolesHeadNode) []string { return v.SshKeys }).(pulumi.StringArrayOutput)
}

// The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o MLServicesClusterRolesHeadNodeOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLServicesClusterRolesHeadNode) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
func (o MLServicesClusterRolesHeadNodeOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v MLServicesClusterRolesHeadNode) string { return v.Username }).(pulumi.StringOutput)
}

// The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o MLServicesClusterRolesHeadNodeOutput) VirtualNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLServicesClusterRolesHeadNode) *string { return v.VirtualNetworkId }).(pulumi.StringPtrOutput)
}

// The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
func (o MLServicesClusterRolesHeadNodeOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v MLServicesClusterRolesHeadNode) string { return v.VmSize }).(pulumi.StringOutput)
}

type MLServicesClusterRolesWorkerNode struct {
	// The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
	MinInstanceCount *int `pulumi:"minInstanceCount"`
	// The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
	Password *string `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
	SshKeys []string `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId *string `pulumi:"subnetId"`
	// The number of instances which should be run for the Worker Nodes.
	TargetInstanceCount int `pulumi:"targetInstanceCount"`
	// The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
	// The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId *string `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
	VmSize string `pulumi:"vmSize"`
}

type MLServicesClusterRolesWorkerNodeInput interface {
	pulumi.Input

	ToMLServicesClusterRolesWorkerNodeOutput() MLServicesClusterRolesWorkerNodeOutput
	ToMLServicesClusterRolesWorkerNodeOutputWithContext(context.Context) MLServicesClusterRolesWorkerNodeOutput
}

type MLServicesClusterRolesWorkerNodeArgs struct {
	// The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
	MinInstanceCount pulumi.IntPtrInput `pulumi:"minInstanceCount"`
	// The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
	SshKeys pulumi.StringArrayInput `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// The number of instances which should be run for the Worker Nodes.
	TargetInstanceCount pulumi.IntInput `pulumi:"targetInstanceCount"`
	// The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
	// The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId pulumi.StringPtrInput `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
	VmSize pulumi.StringInput `pulumi:"vmSize"`
}

func (MLServicesClusterRolesWorkerNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MLServicesClusterRolesWorkerNode)(nil)).Elem()
}

func (i MLServicesClusterRolesWorkerNodeArgs) ToMLServicesClusterRolesWorkerNodeOutput() MLServicesClusterRolesWorkerNodeOutput {
	return i.ToMLServicesClusterRolesWorkerNodeOutputWithContext(context.Background())
}

func (i MLServicesClusterRolesWorkerNodeArgs) ToMLServicesClusterRolesWorkerNodeOutputWithContext(ctx context.Context) MLServicesClusterRolesWorkerNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLServicesClusterRolesWorkerNodeOutput)
}

type MLServicesClusterRolesWorkerNodeOutput struct{ *pulumi.OutputState }

func (MLServicesClusterRolesWorkerNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLServicesClusterRolesWorkerNode)(nil)).Elem()
}

func (o MLServicesClusterRolesWorkerNodeOutput) ToMLServicesClusterRolesWorkerNodeOutput() MLServicesClusterRolesWorkerNodeOutput {
	return o
}

func (o MLServicesClusterRolesWorkerNodeOutput) ToMLServicesClusterRolesWorkerNodeOutputWithContext(ctx context.Context) MLServicesClusterRolesWorkerNodeOutput {
	return o
}

// The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
func (o MLServicesClusterRolesWorkerNodeOutput) MinInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MLServicesClusterRolesWorkerNode) *int { return v.MinInstanceCount }).(pulumi.IntPtrOutput)
}

// The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
func (o MLServicesClusterRolesWorkerNodeOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLServicesClusterRolesWorkerNode) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
func (o MLServicesClusterRolesWorkerNodeOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MLServicesClusterRolesWorkerNode) []string { return v.SshKeys }).(pulumi.StringArrayOutput)
}

// The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o MLServicesClusterRolesWorkerNodeOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLServicesClusterRolesWorkerNode) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The number of instances which should be run for the Worker Nodes.
func (o MLServicesClusterRolesWorkerNodeOutput) TargetInstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v MLServicesClusterRolesWorkerNode) int { return v.TargetInstanceCount }).(pulumi.IntOutput)
}

// The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
func (o MLServicesClusterRolesWorkerNodeOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v MLServicesClusterRolesWorkerNode) string { return v.Username }).(pulumi.StringOutput)
}

// The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o MLServicesClusterRolesWorkerNodeOutput) VirtualNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLServicesClusterRolesWorkerNode) *string { return v.VirtualNetworkId }).(pulumi.StringPtrOutput)
}

// The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
func (o MLServicesClusterRolesWorkerNodeOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v MLServicesClusterRolesWorkerNode) string { return v.VmSize }).(pulumi.StringOutput)
}

type MLServicesClusterRolesZookeeperNode struct {
	// The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
	Password *string `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
	SshKeys []string `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId *string `pulumi:"subnetId"`
	// The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
	// The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId *string `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
	VmSize string `pulumi:"vmSize"`
}

type MLServicesClusterRolesZookeeperNodeInput interface {
	pulumi.Input

	ToMLServicesClusterRolesZookeeperNodeOutput() MLServicesClusterRolesZookeeperNodeOutput
	ToMLServicesClusterRolesZookeeperNodeOutputWithContext(context.Context) MLServicesClusterRolesZookeeperNodeOutput
}

type MLServicesClusterRolesZookeeperNodeArgs struct {
	// The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
	SshKeys pulumi.StringArrayInput `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
	// The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId pulumi.StringPtrInput `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
	VmSize pulumi.StringInput `pulumi:"vmSize"`
}

func (MLServicesClusterRolesZookeeperNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MLServicesClusterRolesZookeeperNode)(nil)).Elem()
}

func (i MLServicesClusterRolesZookeeperNodeArgs) ToMLServicesClusterRolesZookeeperNodeOutput() MLServicesClusterRolesZookeeperNodeOutput {
	return i.ToMLServicesClusterRolesZookeeperNodeOutputWithContext(context.Background())
}

func (i MLServicesClusterRolesZookeeperNodeArgs) ToMLServicesClusterRolesZookeeperNodeOutputWithContext(ctx context.Context) MLServicesClusterRolesZookeeperNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLServicesClusterRolesZookeeperNodeOutput)
}

type MLServicesClusterRolesZookeeperNodeOutput struct{ *pulumi.OutputState }

func (MLServicesClusterRolesZookeeperNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLServicesClusterRolesZookeeperNode)(nil)).Elem()
}

func (o MLServicesClusterRolesZookeeperNodeOutput) ToMLServicesClusterRolesZookeeperNodeOutput() MLServicesClusterRolesZookeeperNodeOutput {
	return o
}

func (o MLServicesClusterRolesZookeeperNodeOutput) ToMLServicesClusterRolesZookeeperNodeOutputWithContext(ctx context.Context) MLServicesClusterRolesZookeeperNodeOutput {
	return o
}

// The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
func (o MLServicesClusterRolesZookeeperNodeOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLServicesClusterRolesZookeeperNode) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
func (o MLServicesClusterRolesZookeeperNodeOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MLServicesClusterRolesZookeeperNode) []string { return v.SshKeys }).(pulumi.StringArrayOutput)
}

// The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o MLServicesClusterRolesZookeeperNodeOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLServicesClusterRolesZookeeperNode) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
func (o MLServicesClusterRolesZookeeperNodeOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v MLServicesClusterRolesZookeeperNode) string { return v.Username }).(pulumi.StringOutput)
}

// The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o MLServicesClusterRolesZookeeperNodeOutput) VirtualNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLServicesClusterRolesZookeeperNode) *string { return v.VirtualNetworkId }).(pulumi.StringPtrOutput)
}

// The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
func (o MLServicesClusterRolesZookeeperNodeOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v MLServicesClusterRolesZookeeperNode) string { return v.VmSize }).(pulumi.StringOutput)
}

type MLServicesClusterStorageAccount struct {
	// Is this the Default Storage Account for the HDInsight ML Services Cluster? Changing this forces a new resource to be created.
	IsDefault bool `pulumi:"isDefault"`
	// The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
	StorageAccountKey string `pulumi:"storageAccountKey"`
	// The ID of the Storage Container. Changing this forces a new resource to be created.
	StorageContainerId string `pulumi:"storageContainerId"`
}

type MLServicesClusterStorageAccountInput interface {
	pulumi.Input

	ToMLServicesClusterStorageAccountOutput() MLServicesClusterStorageAccountOutput
	ToMLServicesClusterStorageAccountOutputWithContext(context.Context) MLServicesClusterStorageAccountOutput
}

type MLServicesClusterStorageAccountArgs struct {
	// Is this the Default Storage Account for the HDInsight ML Services Cluster? Changing this forces a new resource to be created.
	IsDefault pulumi.BoolInput `pulumi:"isDefault"`
	// The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
	StorageAccountKey pulumi.StringInput `pulumi:"storageAccountKey"`
	// The ID of the Storage Container. Changing this forces a new resource to be created.
	StorageContainerId pulumi.StringInput `pulumi:"storageContainerId"`
}

func (MLServicesClusterStorageAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MLServicesClusterStorageAccount)(nil)).Elem()
}

func (i MLServicesClusterStorageAccountArgs) ToMLServicesClusterStorageAccountOutput() MLServicesClusterStorageAccountOutput {
	return i.ToMLServicesClusterStorageAccountOutputWithContext(context.Background())
}

func (i MLServicesClusterStorageAccountArgs) ToMLServicesClusterStorageAccountOutputWithContext(ctx context.Context) MLServicesClusterStorageAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLServicesClusterStorageAccountOutput)
}

type MLServicesClusterStorageAccountArrayInput interface {
	pulumi.Input

	ToMLServicesClusterStorageAccountArrayOutput() MLServicesClusterStorageAccountArrayOutput
	ToMLServicesClusterStorageAccountArrayOutputWithContext(context.Context) MLServicesClusterStorageAccountArrayOutput
}

type MLServicesClusterStorageAccountArray []MLServicesClusterStorageAccountInput

func (MLServicesClusterStorageAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MLServicesClusterStorageAccount)(nil)).Elem()
}

func (i MLServicesClusterStorageAccountArray) ToMLServicesClusterStorageAccountArrayOutput() MLServicesClusterStorageAccountArrayOutput {
	return i.ToMLServicesClusterStorageAccountArrayOutputWithContext(context.Background())
}

func (i MLServicesClusterStorageAccountArray) ToMLServicesClusterStorageAccountArrayOutputWithContext(ctx context.Context) MLServicesClusterStorageAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLServicesClusterStorageAccountArrayOutput)
}

type MLServicesClusterStorageAccountOutput struct{ *pulumi.OutputState }

func (MLServicesClusterStorageAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLServicesClusterStorageAccount)(nil)).Elem()
}

func (o MLServicesClusterStorageAccountOutput) ToMLServicesClusterStorageAccountOutput() MLServicesClusterStorageAccountOutput {
	return o
}

func (o MLServicesClusterStorageAccountOutput) ToMLServicesClusterStorageAccountOutputWithContext(ctx context.Context) MLServicesClusterStorageAccountOutput {
	return o
}

// Is this the Default Storage Account for the HDInsight ML Services Cluster? Changing this forces a new resource to be created.
func (o MLServicesClusterStorageAccountOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v MLServicesClusterStorageAccount) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
func (o MLServicesClusterStorageAccountOutput) StorageAccountKey() pulumi.StringOutput {
	return o.ApplyT(func(v MLServicesClusterStorageAccount) string { return v.StorageAccountKey }).(pulumi.StringOutput)
}

// The ID of the Storage Container. Changing this forces a new resource to be created.
func (o MLServicesClusterStorageAccountOutput) StorageContainerId() pulumi.StringOutput {
	return o.ApplyT(func(v MLServicesClusterStorageAccount) string { return v.StorageContainerId }).(pulumi.StringOutput)
}

type MLServicesClusterStorageAccountArrayOutput struct{ *pulumi.OutputState }

func (MLServicesClusterStorageAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MLServicesClusterStorageAccount)(nil)).Elem()
}

func (o MLServicesClusterStorageAccountArrayOutput) ToMLServicesClusterStorageAccountArrayOutput() MLServicesClusterStorageAccountArrayOutput {
	return o
}

func (o MLServicesClusterStorageAccountArrayOutput) ToMLServicesClusterStorageAccountArrayOutputWithContext(ctx context.Context) MLServicesClusterStorageAccountArrayOutput {
	return o
}

func (o MLServicesClusterStorageAccountArrayOutput) Index(i pulumi.IntInput) MLServicesClusterStorageAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MLServicesClusterStorageAccount {
		return vs[0].([]MLServicesClusterStorageAccount)[vs[1].(int)]
	}).(MLServicesClusterStorageAccountOutput)
}

type RServerClusterGateway struct {
	// Is the Ambari portal enabled? Changing this forces a new resource to be created.
	Enabled bool `pulumi:"enabled"`
	// The password used for the Ambari Portal. Changing this forces a new resource to be created.
	Password string `pulumi:"password"`
	// The username used for the Ambari Portal. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
}

type RServerClusterGatewayInput interface {
	pulumi.Input

	ToRServerClusterGatewayOutput() RServerClusterGatewayOutput
	ToRServerClusterGatewayOutputWithContext(context.Context) RServerClusterGatewayOutput
}

type RServerClusterGatewayArgs struct {
	// Is the Ambari portal enabled? Changing this forces a new resource to be created.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The password used for the Ambari Portal. Changing this forces a new resource to be created.
	Password pulumi.StringInput `pulumi:"password"`
	// The username used for the Ambari Portal. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
}

func (RServerClusterGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RServerClusterGateway)(nil)).Elem()
}

func (i RServerClusterGatewayArgs) ToRServerClusterGatewayOutput() RServerClusterGatewayOutput {
	return i.ToRServerClusterGatewayOutputWithContext(context.Background())
}

func (i RServerClusterGatewayArgs) ToRServerClusterGatewayOutputWithContext(ctx context.Context) RServerClusterGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RServerClusterGatewayOutput)
}

func (i RServerClusterGatewayArgs) ToRServerClusterGatewayPtrOutput() RServerClusterGatewayPtrOutput {
	return i.ToRServerClusterGatewayPtrOutputWithContext(context.Background())
}

func (i RServerClusterGatewayArgs) ToRServerClusterGatewayPtrOutputWithContext(ctx context.Context) RServerClusterGatewayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RServerClusterGatewayOutput).ToRServerClusterGatewayPtrOutputWithContext(ctx)
}

type RServerClusterGatewayPtrInput interface {
	pulumi.Input

	ToRServerClusterGatewayPtrOutput() RServerClusterGatewayPtrOutput
	ToRServerClusterGatewayPtrOutputWithContext(context.Context) RServerClusterGatewayPtrOutput
}

type rserverClusterGatewayPtrType RServerClusterGatewayArgs

func RServerClusterGatewayPtr(v *RServerClusterGatewayArgs) RServerClusterGatewayPtrInput {
	return (*rserverClusterGatewayPtrType)(v)
}

func (*rserverClusterGatewayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RServerClusterGateway)(nil)).Elem()
}

func (i *rserverClusterGatewayPtrType) ToRServerClusterGatewayPtrOutput() RServerClusterGatewayPtrOutput {
	return i.ToRServerClusterGatewayPtrOutputWithContext(context.Background())
}

func (i *rserverClusterGatewayPtrType) ToRServerClusterGatewayPtrOutputWithContext(ctx context.Context) RServerClusterGatewayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RServerClusterGatewayPtrOutput)
}

type RServerClusterGatewayOutput struct{ *pulumi.OutputState }

func (RServerClusterGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RServerClusterGateway)(nil)).Elem()
}

func (o RServerClusterGatewayOutput) ToRServerClusterGatewayOutput() RServerClusterGatewayOutput {
	return o
}

func (o RServerClusterGatewayOutput) ToRServerClusterGatewayOutputWithContext(ctx context.Context) RServerClusterGatewayOutput {
	return o
}

func (o RServerClusterGatewayOutput) ToRServerClusterGatewayPtrOutput() RServerClusterGatewayPtrOutput {
	return o.ToRServerClusterGatewayPtrOutputWithContext(context.Background())
}

func (o RServerClusterGatewayOutput) ToRServerClusterGatewayPtrOutputWithContext(ctx context.Context) RServerClusterGatewayPtrOutput {
	return o.ApplyT(func(v RServerClusterGateway) *RServerClusterGateway {
		return &v
	}).(RServerClusterGatewayPtrOutput)
}

// Is the Ambari portal enabled? Changing this forces a new resource to be created.
func (o RServerClusterGatewayOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v RServerClusterGateway) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The password used for the Ambari Portal. Changing this forces a new resource to be created.
func (o RServerClusterGatewayOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v RServerClusterGateway) string { return v.Password }).(pulumi.StringOutput)
}

// The username used for the Ambari Portal. Changing this forces a new resource to be created.
func (o RServerClusterGatewayOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v RServerClusterGateway) string { return v.Username }).(pulumi.StringOutput)
}

type RServerClusterGatewayPtrOutput struct{ *pulumi.OutputState }

func (RServerClusterGatewayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RServerClusterGateway)(nil)).Elem()
}

func (o RServerClusterGatewayPtrOutput) ToRServerClusterGatewayPtrOutput() RServerClusterGatewayPtrOutput {
	return o
}

func (o RServerClusterGatewayPtrOutput) ToRServerClusterGatewayPtrOutputWithContext(ctx context.Context) RServerClusterGatewayPtrOutput {
	return o
}

func (o RServerClusterGatewayPtrOutput) Elem() RServerClusterGatewayOutput {
	return o.ApplyT(func(v *RServerClusterGateway) RServerClusterGateway { return *v }).(RServerClusterGatewayOutput)
}

// Is the Ambari portal enabled? Changing this forces a new resource to be created.
func (o RServerClusterGatewayPtrOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v RServerClusterGateway) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The password used for the Ambari Portal. Changing this forces a new resource to be created.
func (o RServerClusterGatewayPtrOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v RServerClusterGateway) string { return v.Password }).(pulumi.StringOutput)
}

// The username used for the Ambari Portal. Changing this forces a new resource to be created.
func (o RServerClusterGatewayPtrOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v RServerClusterGateway) string { return v.Username }).(pulumi.StringOutput)
}

type RServerClusterRoles struct {
	// A `edgeNode` block as defined above.
	EdgeNode RServerClusterRolesEdgeNode `pulumi:"edgeNode"`
	// A `headNode` block as defined above.
	HeadNode RServerClusterRolesHeadNode `pulumi:"headNode"`
	// A `workerNode` block as defined below.
	WorkerNode RServerClusterRolesWorkerNode `pulumi:"workerNode"`
	// A `zookeeperNode` block as defined below.
	ZookeeperNode RServerClusterRolesZookeeperNode `pulumi:"zookeeperNode"`
}

type RServerClusterRolesInput interface {
	pulumi.Input

	ToRServerClusterRolesOutput() RServerClusterRolesOutput
	ToRServerClusterRolesOutputWithContext(context.Context) RServerClusterRolesOutput
}

type RServerClusterRolesArgs struct {
	// A `edgeNode` block as defined above.
	EdgeNode RServerClusterRolesEdgeNodeInput `pulumi:"edgeNode"`
	// A `headNode` block as defined above.
	HeadNode RServerClusterRolesHeadNodeInput `pulumi:"headNode"`
	// A `workerNode` block as defined below.
	WorkerNode RServerClusterRolesWorkerNodeInput `pulumi:"workerNode"`
	// A `zookeeperNode` block as defined below.
	ZookeeperNode RServerClusterRolesZookeeperNodeInput `pulumi:"zookeeperNode"`
}

func (RServerClusterRolesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RServerClusterRoles)(nil)).Elem()
}

func (i RServerClusterRolesArgs) ToRServerClusterRolesOutput() RServerClusterRolesOutput {
	return i.ToRServerClusterRolesOutputWithContext(context.Background())
}

func (i RServerClusterRolesArgs) ToRServerClusterRolesOutputWithContext(ctx context.Context) RServerClusterRolesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RServerClusterRolesOutput)
}

func (i RServerClusterRolesArgs) ToRServerClusterRolesPtrOutput() RServerClusterRolesPtrOutput {
	return i.ToRServerClusterRolesPtrOutputWithContext(context.Background())
}

func (i RServerClusterRolesArgs) ToRServerClusterRolesPtrOutputWithContext(ctx context.Context) RServerClusterRolesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RServerClusterRolesOutput).ToRServerClusterRolesPtrOutputWithContext(ctx)
}

type RServerClusterRolesPtrInput interface {
	pulumi.Input

	ToRServerClusterRolesPtrOutput() RServerClusterRolesPtrOutput
	ToRServerClusterRolesPtrOutputWithContext(context.Context) RServerClusterRolesPtrOutput
}

type rserverClusterRolesPtrType RServerClusterRolesArgs

func RServerClusterRolesPtr(v *RServerClusterRolesArgs) RServerClusterRolesPtrInput {
	return (*rserverClusterRolesPtrType)(v)
}

func (*rserverClusterRolesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RServerClusterRoles)(nil)).Elem()
}

func (i *rserverClusterRolesPtrType) ToRServerClusterRolesPtrOutput() RServerClusterRolesPtrOutput {
	return i.ToRServerClusterRolesPtrOutputWithContext(context.Background())
}

func (i *rserverClusterRolesPtrType) ToRServerClusterRolesPtrOutputWithContext(ctx context.Context) RServerClusterRolesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RServerClusterRolesPtrOutput)
}

type RServerClusterRolesOutput struct{ *pulumi.OutputState }

func (RServerClusterRolesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RServerClusterRoles)(nil)).Elem()
}

func (o RServerClusterRolesOutput) ToRServerClusterRolesOutput() RServerClusterRolesOutput {
	return o
}

func (o RServerClusterRolesOutput) ToRServerClusterRolesOutputWithContext(ctx context.Context) RServerClusterRolesOutput {
	return o
}

func (o RServerClusterRolesOutput) ToRServerClusterRolesPtrOutput() RServerClusterRolesPtrOutput {
	return o.ToRServerClusterRolesPtrOutputWithContext(context.Background())
}

func (o RServerClusterRolesOutput) ToRServerClusterRolesPtrOutputWithContext(ctx context.Context) RServerClusterRolesPtrOutput {
	return o.ApplyT(func(v RServerClusterRoles) *RServerClusterRoles {
		return &v
	}).(RServerClusterRolesPtrOutput)
}

// A `edgeNode` block as defined above.
func (o RServerClusterRolesOutput) EdgeNode() RServerClusterRolesEdgeNodeOutput {
	return o.ApplyT(func(v RServerClusterRoles) RServerClusterRolesEdgeNode { return v.EdgeNode }).(RServerClusterRolesEdgeNodeOutput)
}

// A `headNode` block as defined above.
func (o RServerClusterRolesOutput) HeadNode() RServerClusterRolesHeadNodeOutput {
	return o.ApplyT(func(v RServerClusterRoles) RServerClusterRolesHeadNode { return v.HeadNode }).(RServerClusterRolesHeadNodeOutput)
}

// A `workerNode` block as defined below.
func (o RServerClusterRolesOutput) WorkerNode() RServerClusterRolesWorkerNodeOutput {
	return o.ApplyT(func(v RServerClusterRoles) RServerClusterRolesWorkerNode { return v.WorkerNode }).(RServerClusterRolesWorkerNodeOutput)
}

// A `zookeeperNode` block as defined below.
func (o RServerClusterRolesOutput) ZookeeperNode() RServerClusterRolesZookeeperNodeOutput {
	return o.ApplyT(func(v RServerClusterRoles) RServerClusterRolesZookeeperNode { return v.ZookeeperNode }).(RServerClusterRolesZookeeperNodeOutput)
}

type RServerClusterRolesPtrOutput struct{ *pulumi.OutputState }

func (RServerClusterRolesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RServerClusterRoles)(nil)).Elem()
}

func (o RServerClusterRolesPtrOutput) ToRServerClusterRolesPtrOutput() RServerClusterRolesPtrOutput {
	return o
}

func (o RServerClusterRolesPtrOutput) ToRServerClusterRolesPtrOutputWithContext(ctx context.Context) RServerClusterRolesPtrOutput {
	return o
}

func (o RServerClusterRolesPtrOutput) Elem() RServerClusterRolesOutput {
	return o.ApplyT(func(v *RServerClusterRoles) RServerClusterRoles { return *v }).(RServerClusterRolesOutput)
}

// A `edgeNode` block as defined above.
func (o RServerClusterRolesPtrOutput) EdgeNode() RServerClusterRolesEdgeNodeOutput {
	return o.ApplyT(func(v RServerClusterRoles) RServerClusterRolesEdgeNode { return v.EdgeNode }).(RServerClusterRolesEdgeNodeOutput)
}

// A `headNode` block as defined above.
func (o RServerClusterRolesPtrOutput) HeadNode() RServerClusterRolesHeadNodeOutput {
	return o.ApplyT(func(v RServerClusterRoles) RServerClusterRolesHeadNode { return v.HeadNode }).(RServerClusterRolesHeadNodeOutput)
}

// A `workerNode` block as defined below.
func (o RServerClusterRolesPtrOutput) WorkerNode() RServerClusterRolesWorkerNodeOutput {
	return o.ApplyT(func(v RServerClusterRoles) RServerClusterRolesWorkerNode { return v.WorkerNode }).(RServerClusterRolesWorkerNodeOutput)
}

// A `zookeeperNode` block as defined below.
func (o RServerClusterRolesPtrOutput) ZookeeperNode() RServerClusterRolesZookeeperNodeOutput {
	return o.ApplyT(func(v RServerClusterRoles) RServerClusterRolesZookeeperNode { return v.ZookeeperNode }).(RServerClusterRolesZookeeperNodeOutput)
}

type RServerClusterRolesEdgeNode struct {
	// The Password associated with the local administrator for the Edge Node. Changing this forces a new resource to be created.
	Password *string `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Edge Node. Changing this forces a new resource to be created.
	SshKeys []string `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Edge Node should be provisioned within. Changing this forces a new resource to be created.
	SubnetId *string `pulumi:"subnetId"`
	// The Username of the local administrator for the Edge Node. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
	// The ID of the Virtual Network where the Edge Node should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId *string `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Edge Node. Changing this forces a new resource to be created.
	VmSize string `pulumi:"vmSize"`
}

type RServerClusterRolesEdgeNodeInput interface {
	pulumi.Input

	ToRServerClusterRolesEdgeNodeOutput() RServerClusterRolesEdgeNodeOutput
	ToRServerClusterRolesEdgeNodeOutputWithContext(context.Context) RServerClusterRolesEdgeNodeOutput
}

type RServerClusterRolesEdgeNodeArgs struct {
	// The Password associated with the local administrator for the Edge Node. Changing this forces a new resource to be created.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Edge Node. Changing this forces a new resource to be created.
	SshKeys pulumi.StringArrayInput `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Edge Node should be provisioned within. Changing this forces a new resource to be created.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// The Username of the local administrator for the Edge Node. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
	// The ID of the Virtual Network where the Edge Node should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId pulumi.StringPtrInput `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Edge Node. Changing this forces a new resource to be created.
	VmSize pulumi.StringInput `pulumi:"vmSize"`
}

func (RServerClusterRolesEdgeNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RServerClusterRolesEdgeNode)(nil)).Elem()
}

func (i RServerClusterRolesEdgeNodeArgs) ToRServerClusterRolesEdgeNodeOutput() RServerClusterRolesEdgeNodeOutput {
	return i.ToRServerClusterRolesEdgeNodeOutputWithContext(context.Background())
}

func (i RServerClusterRolesEdgeNodeArgs) ToRServerClusterRolesEdgeNodeOutputWithContext(ctx context.Context) RServerClusterRolesEdgeNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RServerClusterRolesEdgeNodeOutput)
}

type RServerClusterRolesEdgeNodeOutput struct{ *pulumi.OutputState }

func (RServerClusterRolesEdgeNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RServerClusterRolesEdgeNode)(nil)).Elem()
}

func (o RServerClusterRolesEdgeNodeOutput) ToRServerClusterRolesEdgeNodeOutput() RServerClusterRolesEdgeNodeOutput {
	return o
}

func (o RServerClusterRolesEdgeNodeOutput) ToRServerClusterRolesEdgeNodeOutputWithContext(ctx context.Context) RServerClusterRolesEdgeNodeOutput {
	return o
}

// The Password associated with the local administrator for the Edge Node. Changing this forces a new resource to be created.
func (o RServerClusterRolesEdgeNodeOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RServerClusterRolesEdgeNode) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// A list of SSH Keys which should be used for the local administrator on the Edge Node. Changing this forces a new resource to be created.
func (o RServerClusterRolesEdgeNodeOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RServerClusterRolesEdgeNode) []string { return v.SshKeys }).(pulumi.StringArrayOutput)
}

// The ID of the Subnet within the Virtual Network where the Edge Node should be provisioned within. Changing this forces a new resource to be created.
func (o RServerClusterRolesEdgeNodeOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RServerClusterRolesEdgeNode) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The Username of the local administrator for the Edge Node. Changing this forces a new resource to be created.
func (o RServerClusterRolesEdgeNodeOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v RServerClusterRolesEdgeNode) string { return v.Username }).(pulumi.StringOutput)
}

// The ID of the Virtual Network where the Edge Node should be provisioned within. Changing this forces a new resource to be created.
func (o RServerClusterRolesEdgeNodeOutput) VirtualNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RServerClusterRolesEdgeNode) *string { return v.VirtualNetworkId }).(pulumi.StringPtrOutput)
}

// The Size of the Virtual Machine which should be used as the Edge Node. Changing this forces a new resource to be created.
func (o RServerClusterRolesEdgeNodeOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v RServerClusterRolesEdgeNode) string { return v.VmSize }).(pulumi.StringOutput)
}

type RServerClusterRolesHeadNode struct {
	// The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
	Password *string `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
	SshKeys []string `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId *string `pulumi:"subnetId"`
	// The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
	// The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId *string `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
	VmSize string `pulumi:"vmSize"`
}

type RServerClusterRolesHeadNodeInput interface {
	pulumi.Input

	ToRServerClusterRolesHeadNodeOutput() RServerClusterRolesHeadNodeOutput
	ToRServerClusterRolesHeadNodeOutputWithContext(context.Context) RServerClusterRolesHeadNodeOutput
}

type RServerClusterRolesHeadNodeArgs struct {
	// The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
	SshKeys pulumi.StringArrayInput `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
	// The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId pulumi.StringPtrInput `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
	VmSize pulumi.StringInput `pulumi:"vmSize"`
}

func (RServerClusterRolesHeadNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RServerClusterRolesHeadNode)(nil)).Elem()
}

func (i RServerClusterRolesHeadNodeArgs) ToRServerClusterRolesHeadNodeOutput() RServerClusterRolesHeadNodeOutput {
	return i.ToRServerClusterRolesHeadNodeOutputWithContext(context.Background())
}

func (i RServerClusterRolesHeadNodeArgs) ToRServerClusterRolesHeadNodeOutputWithContext(ctx context.Context) RServerClusterRolesHeadNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RServerClusterRolesHeadNodeOutput)
}

type RServerClusterRolesHeadNodeOutput struct{ *pulumi.OutputState }

func (RServerClusterRolesHeadNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RServerClusterRolesHeadNode)(nil)).Elem()
}

func (o RServerClusterRolesHeadNodeOutput) ToRServerClusterRolesHeadNodeOutput() RServerClusterRolesHeadNodeOutput {
	return o
}

func (o RServerClusterRolesHeadNodeOutput) ToRServerClusterRolesHeadNodeOutputWithContext(ctx context.Context) RServerClusterRolesHeadNodeOutput {
	return o
}

// The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
func (o RServerClusterRolesHeadNodeOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RServerClusterRolesHeadNode) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
func (o RServerClusterRolesHeadNodeOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RServerClusterRolesHeadNode) []string { return v.SshKeys }).(pulumi.StringArrayOutput)
}

// The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o RServerClusterRolesHeadNodeOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RServerClusterRolesHeadNode) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
func (o RServerClusterRolesHeadNodeOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v RServerClusterRolesHeadNode) string { return v.Username }).(pulumi.StringOutput)
}

// The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o RServerClusterRolesHeadNodeOutput) VirtualNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RServerClusterRolesHeadNode) *string { return v.VirtualNetworkId }).(pulumi.StringPtrOutput)
}

// The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
func (o RServerClusterRolesHeadNodeOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v RServerClusterRolesHeadNode) string { return v.VmSize }).(pulumi.StringOutput)
}

type RServerClusterRolesWorkerNode struct {
	// The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
	MinInstanceCount *int `pulumi:"minInstanceCount"`
	// The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
	Password *string `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
	SshKeys []string `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId *string `pulumi:"subnetId"`
	// The number of instances which should be run for the Worker Nodes.
	TargetInstanceCount int `pulumi:"targetInstanceCount"`
	// The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
	// The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId *string `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
	VmSize string `pulumi:"vmSize"`
}

type RServerClusterRolesWorkerNodeInput interface {
	pulumi.Input

	ToRServerClusterRolesWorkerNodeOutput() RServerClusterRolesWorkerNodeOutput
	ToRServerClusterRolesWorkerNodeOutputWithContext(context.Context) RServerClusterRolesWorkerNodeOutput
}

type RServerClusterRolesWorkerNodeArgs struct {
	// The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
	MinInstanceCount pulumi.IntPtrInput `pulumi:"minInstanceCount"`
	// The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
	SshKeys pulumi.StringArrayInput `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// The number of instances which should be run for the Worker Nodes.
	TargetInstanceCount pulumi.IntInput `pulumi:"targetInstanceCount"`
	// The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
	// The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId pulumi.StringPtrInput `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
	VmSize pulumi.StringInput `pulumi:"vmSize"`
}

func (RServerClusterRolesWorkerNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RServerClusterRolesWorkerNode)(nil)).Elem()
}

func (i RServerClusterRolesWorkerNodeArgs) ToRServerClusterRolesWorkerNodeOutput() RServerClusterRolesWorkerNodeOutput {
	return i.ToRServerClusterRolesWorkerNodeOutputWithContext(context.Background())
}

func (i RServerClusterRolesWorkerNodeArgs) ToRServerClusterRolesWorkerNodeOutputWithContext(ctx context.Context) RServerClusterRolesWorkerNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RServerClusterRolesWorkerNodeOutput)
}

type RServerClusterRolesWorkerNodeOutput struct{ *pulumi.OutputState }

func (RServerClusterRolesWorkerNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RServerClusterRolesWorkerNode)(nil)).Elem()
}

func (o RServerClusterRolesWorkerNodeOutput) ToRServerClusterRolesWorkerNodeOutput() RServerClusterRolesWorkerNodeOutput {
	return o
}

func (o RServerClusterRolesWorkerNodeOutput) ToRServerClusterRolesWorkerNodeOutputWithContext(ctx context.Context) RServerClusterRolesWorkerNodeOutput {
	return o
}

// The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
func (o RServerClusterRolesWorkerNodeOutput) MinInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RServerClusterRolesWorkerNode) *int { return v.MinInstanceCount }).(pulumi.IntPtrOutput)
}

// The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
func (o RServerClusterRolesWorkerNodeOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RServerClusterRolesWorkerNode) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
func (o RServerClusterRolesWorkerNodeOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RServerClusterRolesWorkerNode) []string { return v.SshKeys }).(pulumi.StringArrayOutput)
}

// The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o RServerClusterRolesWorkerNodeOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RServerClusterRolesWorkerNode) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The number of instances which should be run for the Worker Nodes.
func (o RServerClusterRolesWorkerNodeOutput) TargetInstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v RServerClusterRolesWorkerNode) int { return v.TargetInstanceCount }).(pulumi.IntOutput)
}

// The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
func (o RServerClusterRolesWorkerNodeOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v RServerClusterRolesWorkerNode) string { return v.Username }).(pulumi.StringOutput)
}

// The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o RServerClusterRolesWorkerNodeOutput) VirtualNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RServerClusterRolesWorkerNode) *string { return v.VirtualNetworkId }).(pulumi.StringPtrOutput)
}

// The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
func (o RServerClusterRolesWorkerNodeOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v RServerClusterRolesWorkerNode) string { return v.VmSize }).(pulumi.StringOutput)
}

type RServerClusterRolesZookeeperNode struct {
	// The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
	Password *string `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
	SshKeys []string `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId *string `pulumi:"subnetId"`
	// The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
	// The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId *string `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
	VmSize string `pulumi:"vmSize"`
}

type RServerClusterRolesZookeeperNodeInput interface {
	pulumi.Input

	ToRServerClusterRolesZookeeperNodeOutput() RServerClusterRolesZookeeperNodeOutput
	ToRServerClusterRolesZookeeperNodeOutputWithContext(context.Context) RServerClusterRolesZookeeperNodeOutput
}

type RServerClusterRolesZookeeperNodeArgs struct {
	// The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
	SshKeys pulumi.StringArrayInput `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
	// The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId pulumi.StringPtrInput `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
	VmSize pulumi.StringInput `pulumi:"vmSize"`
}

func (RServerClusterRolesZookeeperNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RServerClusterRolesZookeeperNode)(nil)).Elem()
}

func (i RServerClusterRolesZookeeperNodeArgs) ToRServerClusterRolesZookeeperNodeOutput() RServerClusterRolesZookeeperNodeOutput {
	return i.ToRServerClusterRolesZookeeperNodeOutputWithContext(context.Background())
}

func (i RServerClusterRolesZookeeperNodeArgs) ToRServerClusterRolesZookeeperNodeOutputWithContext(ctx context.Context) RServerClusterRolesZookeeperNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RServerClusterRolesZookeeperNodeOutput)
}

type RServerClusterRolesZookeeperNodeOutput struct{ *pulumi.OutputState }

func (RServerClusterRolesZookeeperNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RServerClusterRolesZookeeperNode)(nil)).Elem()
}

func (o RServerClusterRolesZookeeperNodeOutput) ToRServerClusterRolesZookeeperNodeOutput() RServerClusterRolesZookeeperNodeOutput {
	return o
}

func (o RServerClusterRolesZookeeperNodeOutput) ToRServerClusterRolesZookeeperNodeOutputWithContext(ctx context.Context) RServerClusterRolesZookeeperNodeOutput {
	return o
}

// The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
func (o RServerClusterRolesZookeeperNodeOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RServerClusterRolesZookeeperNode) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
func (o RServerClusterRolesZookeeperNodeOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RServerClusterRolesZookeeperNode) []string { return v.SshKeys }).(pulumi.StringArrayOutput)
}

// The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o RServerClusterRolesZookeeperNodeOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RServerClusterRolesZookeeperNode) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
func (o RServerClusterRolesZookeeperNodeOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v RServerClusterRolesZookeeperNode) string { return v.Username }).(pulumi.StringOutput)
}

// The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o RServerClusterRolesZookeeperNodeOutput) VirtualNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RServerClusterRolesZookeeperNode) *string { return v.VirtualNetworkId }).(pulumi.StringPtrOutput)
}

// The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
func (o RServerClusterRolesZookeeperNodeOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v RServerClusterRolesZookeeperNode) string { return v.VmSize }).(pulumi.StringOutput)
}

type RServerClusterStorageAccount struct {
	// Is this the Default Storage Account for the HDInsight RServer Cluster? Changing this forces a new resource to be created.
	IsDefault bool `pulumi:"isDefault"`
	// The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
	StorageAccountKey string `pulumi:"storageAccountKey"`
	// The ID of the Storage Container. Changing this forces a new resource to be created.
	StorageContainerId string `pulumi:"storageContainerId"`
}

type RServerClusterStorageAccountInput interface {
	pulumi.Input

	ToRServerClusterStorageAccountOutput() RServerClusterStorageAccountOutput
	ToRServerClusterStorageAccountOutputWithContext(context.Context) RServerClusterStorageAccountOutput
}

type RServerClusterStorageAccountArgs struct {
	// Is this the Default Storage Account for the HDInsight RServer Cluster? Changing this forces a new resource to be created.
	IsDefault pulumi.BoolInput `pulumi:"isDefault"`
	// The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
	StorageAccountKey pulumi.StringInput `pulumi:"storageAccountKey"`
	// The ID of the Storage Container. Changing this forces a new resource to be created.
	StorageContainerId pulumi.StringInput `pulumi:"storageContainerId"`
}

func (RServerClusterStorageAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RServerClusterStorageAccount)(nil)).Elem()
}

func (i RServerClusterStorageAccountArgs) ToRServerClusterStorageAccountOutput() RServerClusterStorageAccountOutput {
	return i.ToRServerClusterStorageAccountOutputWithContext(context.Background())
}

func (i RServerClusterStorageAccountArgs) ToRServerClusterStorageAccountOutputWithContext(ctx context.Context) RServerClusterStorageAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RServerClusterStorageAccountOutput)
}

type RServerClusterStorageAccountArrayInput interface {
	pulumi.Input

	ToRServerClusterStorageAccountArrayOutput() RServerClusterStorageAccountArrayOutput
	ToRServerClusterStorageAccountArrayOutputWithContext(context.Context) RServerClusterStorageAccountArrayOutput
}

type RServerClusterStorageAccountArray []RServerClusterStorageAccountInput

func (RServerClusterStorageAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RServerClusterStorageAccount)(nil)).Elem()
}

func (i RServerClusterStorageAccountArray) ToRServerClusterStorageAccountArrayOutput() RServerClusterStorageAccountArrayOutput {
	return i.ToRServerClusterStorageAccountArrayOutputWithContext(context.Background())
}

func (i RServerClusterStorageAccountArray) ToRServerClusterStorageAccountArrayOutputWithContext(ctx context.Context) RServerClusterStorageAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RServerClusterStorageAccountArrayOutput)
}

type RServerClusterStorageAccountOutput struct{ *pulumi.OutputState }

func (RServerClusterStorageAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RServerClusterStorageAccount)(nil)).Elem()
}

func (o RServerClusterStorageAccountOutput) ToRServerClusterStorageAccountOutput() RServerClusterStorageAccountOutput {
	return o
}

func (o RServerClusterStorageAccountOutput) ToRServerClusterStorageAccountOutputWithContext(ctx context.Context) RServerClusterStorageAccountOutput {
	return o
}

// Is this the Default Storage Account for the HDInsight RServer Cluster? Changing this forces a new resource to be created.
func (o RServerClusterStorageAccountOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v RServerClusterStorageAccount) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
func (o RServerClusterStorageAccountOutput) StorageAccountKey() pulumi.StringOutput {
	return o.ApplyT(func(v RServerClusterStorageAccount) string { return v.StorageAccountKey }).(pulumi.StringOutput)
}

// The ID of the Storage Container. Changing this forces a new resource to be created.
func (o RServerClusterStorageAccountOutput) StorageContainerId() pulumi.StringOutput {
	return o.ApplyT(func(v RServerClusterStorageAccount) string { return v.StorageContainerId }).(pulumi.StringOutput)
}

type RServerClusterStorageAccountArrayOutput struct{ *pulumi.OutputState }

func (RServerClusterStorageAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RServerClusterStorageAccount)(nil)).Elem()
}

func (o RServerClusterStorageAccountArrayOutput) ToRServerClusterStorageAccountArrayOutput() RServerClusterStorageAccountArrayOutput {
	return o
}

func (o RServerClusterStorageAccountArrayOutput) ToRServerClusterStorageAccountArrayOutputWithContext(ctx context.Context) RServerClusterStorageAccountArrayOutput {
	return o
}

func (o RServerClusterStorageAccountArrayOutput) Index(i pulumi.IntInput) RServerClusterStorageAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RServerClusterStorageAccount {
		return vs[0].([]RServerClusterStorageAccount)[vs[1].(int)]
	}).(RServerClusterStorageAccountOutput)
}

type SparkClusterComponentVersion struct {
	// The version of Spark which should be used for this HDInsight Spark Cluster. Changing this forces a new resource to be created.
	Spark string `pulumi:"spark"`
}

type SparkClusterComponentVersionInput interface {
	pulumi.Input

	ToSparkClusterComponentVersionOutput() SparkClusterComponentVersionOutput
	ToSparkClusterComponentVersionOutputWithContext(context.Context) SparkClusterComponentVersionOutput
}

type SparkClusterComponentVersionArgs struct {
	// The version of Spark which should be used for this HDInsight Spark Cluster. Changing this forces a new resource to be created.
	Spark pulumi.StringInput `pulumi:"spark"`
}

func (SparkClusterComponentVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkClusterComponentVersion)(nil)).Elem()
}

func (i SparkClusterComponentVersionArgs) ToSparkClusterComponentVersionOutput() SparkClusterComponentVersionOutput {
	return i.ToSparkClusterComponentVersionOutputWithContext(context.Background())
}

func (i SparkClusterComponentVersionArgs) ToSparkClusterComponentVersionOutputWithContext(ctx context.Context) SparkClusterComponentVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkClusterComponentVersionOutput)
}

func (i SparkClusterComponentVersionArgs) ToSparkClusterComponentVersionPtrOutput() SparkClusterComponentVersionPtrOutput {
	return i.ToSparkClusterComponentVersionPtrOutputWithContext(context.Background())
}

func (i SparkClusterComponentVersionArgs) ToSparkClusterComponentVersionPtrOutputWithContext(ctx context.Context) SparkClusterComponentVersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkClusterComponentVersionOutput).ToSparkClusterComponentVersionPtrOutputWithContext(ctx)
}

type SparkClusterComponentVersionPtrInput interface {
	pulumi.Input

	ToSparkClusterComponentVersionPtrOutput() SparkClusterComponentVersionPtrOutput
	ToSparkClusterComponentVersionPtrOutputWithContext(context.Context) SparkClusterComponentVersionPtrOutput
}

type sparkClusterComponentVersionPtrType SparkClusterComponentVersionArgs

func SparkClusterComponentVersionPtr(v *SparkClusterComponentVersionArgs) SparkClusterComponentVersionPtrInput {
	return (*sparkClusterComponentVersionPtrType)(v)
}

func (*sparkClusterComponentVersionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkClusterComponentVersion)(nil)).Elem()
}

func (i *sparkClusterComponentVersionPtrType) ToSparkClusterComponentVersionPtrOutput() SparkClusterComponentVersionPtrOutput {
	return i.ToSparkClusterComponentVersionPtrOutputWithContext(context.Background())
}

func (i *sparkClusterComponentVersionPtrType) ToSparkClusterComponentVersionPtrOutputWithContext(ctx context.Context) SparkClusterComponentVersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkClusterComponentVersionPtrOutput)
}

type SparkClusterComponentVersionOutput struct{ *pulumi.OutputState }

func (SparkClusterComponentVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkClusterComponentVersion)(nil)).Elem()
}

func (o SparkClusterComponentVersionOutput) ToSparkClusterComponentVersionOutput() SparkClusterComponentVersionOutput {
	return o
}

func (o SparkClusterComponentVersionOutput) ToSparkClusterComponentVersionOutputWithContext(ctx context.Context) SparkClusterComponentVersionOutput {
	return o
}

func (o SparkClusterComponentVersionOutput) ToSparkClusterComponentVersionPtrOutput() SparkClusterComponentVersionPtrOutput {
	return o.ToSparkClusterComponentVersionPtrOutputWithContext(context.Background())
}

func (o SparkClusterComponentVersionOutput) ToSparkClusterComponentVersionPtrOutputWithContext(ctx context.Context) SparkClusterComponentVersionPtrOutput {
	return o.ApplyT(func(v SparkClusterComponentVersion) *SparkClusterComponentVersion {
		return &v
	}).(SparkClusterComponentVersionPtrOutput)
}

// The version of Spark which should be used for this HDInsight Spark Cluster. Changing this forces a new resource to be created.
func (o SparkClusterComponentVersionOutput) Spark() pulumi.StringOutput {
	return o.ApplyT(func(v SparkClusterComponentVersion) string { return v.Spark }).(pulumi.StringOutput)
}

type SparkClusterComponentVersionPtrOutput struct{ *pulumi.OutputState }

func (SparkClusterComponentVersionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkClusterComponentVersion)(nil)).Elem()
}

func (o SparkClusterComponentVersionPtrOutput) ToSparkClusterComponentVersionPtrOutput() SparkClusterComponentVersionPtrOutput {
	return o
}

func (o SparkClusterComponentVersionPtrOutput) ToSparkClusterComponentVersionPtrOutputWithContext(ctx context.Context) SparkClusterComponentVersionPtrOutput {
	return o
}

func (o SparkClusterComponentVersionPtrOutput) Elem() SparkClusterComponentVersionOutput {
	return o.ApplyT(func(v *SparkClusterComponentVersion) SparkClusterComponentVersion { return *v }).(SparkClusterComponentVersionOutput)
}

// The version of Spark which should be used for this HDInsight Spark Cluster. Changing this forces a new resource to be created.
func (o SparkClusterComponentVersionPtrOutput) Spark() pulumi.StringOutput {
	return o.ApplyT(func(v SparkClusterComponentVersion) string { return v.Spark }).(pulumi.StringOutput)
}

type SparkClusterGateway struct {
	// Is the Ambari portal enabled? Changing this forces a new resource to be created.
	Enabled bool `pulumi:"enabled"`
	// The password used for the Ambari Portal. Changing this forces a new resource to be created.
	Password string `pulumi:"password"`
	// The username used for the Ambari Portal. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
}

type SparkClusterGatewayInput interface {
	pulumi.Input

	ToSparkClusterGatewayOutput() SparkClusterGatewayOutput
	ToSparkClusterGatewayOutputWithContext(context.Context) SparkClusterGatewayOutput
}

type SparkClusterGatewayArgs struct {
	// Is the Ambari portal enabled? Changing this forces a new resource to be created.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The password used for the Ambari Portal. Changing this forces a new resource to be created.
	Password pulumi.StringInput `pulumi:"password"`
	// The username used for the Ambari Portal. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
}

func (SparkClusterGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkClusterGateway)(nil)).Elem()
}

func (i SparkClusterGatewayArgs) ToSparkClusterGatewayOutput() SparkClusterGatewayOutput {
	return i.ToSparkClusterGatewayOutputWithContext(context.Background())
}

func (i SparkClusterGatewayArgs) ToSparkClusterGatewayOutputWithContext(ctx context.Context) SparkClusterGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkClusterGatewayOutput)
}

func (i SparkClusterGatewayArgs) ToSparkClusterGatewayPtrOutput() SparkClusterGatewayPtrOutput {
	return i.ToSparkClusterGatewayPtrOutputWithContext(context.Background())
}

func (i SparkClusterGatewayArgs) ToSparkClusterGatewayPtrOutputWithContext(ctx context.Context) SparkClusterGatewayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkClusterGatewayOutput).ToSparkClusterGatewayPtrOutputWithContext(ctx)
}

type SparkClusterGatewayPtrInput interface {
	pulumi.Input

	ToSparkClusterGatewayPtrOutput() SparkClusterGatewayPtrOutput
	ToSparkClusterGatewayPtrOutputWithContext(context.Context) SparkClusterGatewayPtrOutput
}

type sparkClusterGatewayPtrType SparkClusterGatewayArgs

func SparkClusterGatewayPtr(v *SparkClusterGatewayArgs) SparkClusterGatewayPtrInput {
	return (*sparkClusterGatewayPtrType)(v)
}

func (*sparkClusterGatewayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkClusterGateway)(nil)).Elem()
}

func (i *sparkClusterGatewayPtrType) ToSparkClusterGatewayPtrOutput() SparkClusterGatewayPtrOutput {
	return i.ToSparkClusterGatewayPtrOutputWithContext(context.Background())
}

func (i *sparkClusterGatewayPtrType) ToSparkClusterGatewayPtrOutputWithContext(ctx context.Context) SparkClusterGatewayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkClusterGatewayPtrOutput)
}

type SparkClusterGatewayOutput struct{ *pulumi.OutputState }

func (SparkClusterGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkClusterGateway)(nil)).Elem()
}

func (o SparkClusterGatewayOutput) ToSparkClusterGatewayOutput() SparkClusterGatewayOutput {
	return o
}

func (o SparkClusterGatewayOutput) ToSparkClusterGatewayOutputWithContext(ctx context.Context) SparkClusterGatewayOutput {
	return o
}

func (o SparkClusterGatewayOutput) ToSparkClusterGatewayPtrOutput() SparkClusterGatewayPtrOutput {
	return o.ToSparkClusterGatewayPtrOutputWithContext(context.Background())
}

func (o SparkClusterGatewayOutput) ToSparkClusterGatewayPtrOutputWithContext(ctx context.Context) SparkClusterGatewayPtrOutput {
	return o.ApplyT(func(v SparkClusterGateway) *SparkClusterGateway {
		return &v
	}).(SparkClusterGatewayPtrOutput)
}

// Is the Ambari portal enabled? Changing this forces a new resource to be created.
func (o SparkClusterGatewayOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v SparkClusterGateway) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The password used for the Ambari Portal. Changing this forces a new resource to be created.
func (o SparkClusterGatewayOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v SparkClusterGateway) string { return v.Password }).(pulumi.StringOutput)
}

// The username used for the Ambari Portal. Changing this forces a new resource to be created.
func (o SparkClusterGatewayOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v SparkClusterGateway) string { return v.Username }).(pulumi.StringOutput)
}

type SparkClusterGatewayPtrOutput struct{ *pulumi.OutputState }

func (SparkClusterGatewayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkClusterGateway)(nil)).Elem()
}

func (o SparkClusterGatewayPtrOutput) ToSparkClusterGatewayPtrOutput() SparkClusterGatewayPtrOutput {
	return o
}

func (o SparkClusterGatewayPtrOutput) ToSparkClusterGatewayPtrOutputWithContext(ctx context.Context) SparkClusterGatewayPtrOutput {
	return o
}

func (o SparkClusterGatewayPtrOutput) Elem() SparkClusterGatewayOutput {
	return o.ApplyT(func(v *SparkClusterGateway) SparkClusterGateway { return *v }).(SparkClusterGatewayOutput)
}

// Is the Ambari portal enabled? Changing this forces a new resource to be created.
func (o SparkClusterGatewayPtrOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v SparkClusterGateway) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The password used for the Ambari Portal. Changing this forces a new resource to be created.
func (o SparkClusterGatewayPtrOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v SparkClusterGateway) string { return v.Password }).(pulumi.StringOutput)
}

// The username used for the Ambari Portal. Changing this forces a new resource to be created.
func (o SparkClusterGatewayPtrOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v SparkClusterGateway) string { return v.Username }).(pulumi.StringOutput)
}

type SparkClusterRoles struct {
	// A `headNode` block as defined above.
	HeadNode SparkClusterRolesHeadNode `pulumi:"headNode"`
	// A `workerNode` block as defined below.
	WorkerNode SparkClusterRolesWorkerNode `pulumi:"workerNode"`
	// A `zookeeperNode` block as defined below.
	ZookeeperNode SparkClusterRolesZookeeperNode `pulumi:"zookeeperNode"`
}

type SparkClusterRolesInput interface {
	pulumi.Input

	ToSparkClusterRolesOutput() SparkClusterRolesOutput
	ToSparkClusterRolesOutputWithContext(context.Context) SparkClusterRolesOutput
}

type SparkClusterRolesArgs struct {
	// A `headNode` block as defined above.
	HeadNode SparkClusterRolesHeadNodeInput `pulumi:"headNode"`
	// A `workerNode` block as defined below.
	WorkerNode SparkClusterRolesWorkerNodeInput `pulumi:"workerNode"`
	// A `zookeeperNode` block as defined below.
	ZookeeperNode SparkClusterRolesZookeeperNodeInput `pulumi:"zookeeperNode"`
}

func (SparkClusterRolesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkClusterRoles)(nil)).Elem()
}

func (i SparkClusterRolesArgs) ToSparkClusterRolesOutput() SparkClusterRolesOutput {
	return i.ToSparkClusterRolesOutputWithContext(context.Background())
}

func (i SparkClusterRolesArgs) ToSparkClusterRolesOutputWithContext(ctx context.Context) SparkClusterRolesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkClusterRolesOutput)
}

func (i SparkClusterRolesArgs) ToSparkClusterRolesPtrOutput() SparkClusterRolesPtrOutput {
	return i.ToSparkClusterRolesPtrOutputWithContext(context.Background())
}

func (i SparkClusterRolesArgs) ToSparkClusterRolesPtrOutputWithContext(ctx context.Context) SparkClusterRolesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkClusterRolesOutput).ToSparkClusterRolesPtrOutputWithContext(ctx)
}

type SparkClusterRolesPtrInput interface {
	pulumi.Input

	ToSparkClusterRolesPtrOutput() SparkClusterRolesPtrOutput
	ToSparkClusterRolesPtrOutputWithContext(context.Context) SparkClusterRolesPtrOutput
}

type sparkClusterRolesPtrType SparkClusterRolesArgs

func SparkClusterRolesPtr(v *SparkClusterRolesArgs) SparkClusterRolesPtrInput {
	return (*sparkClusterRolesPtrType)(v)
}

func (*sparkClusterRolesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkClusterRoles)(nil)).Elem()
}

func (i *sparkClusterRolesPtrType) ToSparkClusterRolesPtrOutput() SparkClusterRolesPtrOutput {
	return i.ToSparkClusterRolesPtrOutputWithContext(context.Background())
}

func (i *sparkClusterRolesPtrType) ToSparkClusterRolesPtrOutputWithContext(ctx context.Context) SparkClusterRolesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkClusterRolesPtrOutput)
}

type SparkClusterRolesOutput struct{ *pulumi.OutputState }

func (SparkClusterRolesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkClusterRoles)(nil)).Elem()
}

func (o SparkClusterRolesOutput) ToSparkClusterRolesOutput() SparkClusterRolesOutput {
	return o
}

func (o SparkClusterRolesOutput) ToSparkClusterRolesOutputWithContext(ctx context.Context) SparkClusterRolesOutput {
	return o
}

func (o SparkClusterRolesOutput) ToSparkClusterRolesPtrOutput() SparkClusterRolesPtrOutput {
	return o.ToSparkClusterRolesPtrOutputWithContext(context.Background())
}

func (o SparkClusterRolesOutput) ToSparkClusterRolesPtrOutputWithContext(ctx context.Context) SparkClusterRolesPtrOutput {
	return o.ApplyT(func(v SparkClusterRoles) *SparkClusterRoles {
		return &v
	}).(SparkClusterRolesPtrOutput)
}

// A `headNode` block as defined above.
func (o SparkClusterRolesOutput) HeadNode() SparkClusterRolesHeadNodeOutput {
	return o.ApplyT(func(v SparkClusterRoles) SparkClusterRolesHeadNode { return v.HeadNode }).(SparkClusterRolesHeadNodeOutput)
}

// A `workerNode` block as defined below.
func (o SparkClusterRolesOutput) WorkerNode() SparkClusterRolesWorkerNodeOutput {
	return o.ApplyT(func(v SparkClusterRoles) SparkClusterRolesWorkerNode { return v.WorkerNode }).(SparkClusterRolesWorkerNodeOutput)
}

// A `zookeeperNode` block as defined below.
func (o SparkClusterRolesOutput) ZookeeperNode() SparkClusterRolesZookeeperNodeOutput {
	return o.ApplyT(func(v SparkClusterRoles) SparkClusterRolesZookeeperNode { return v.ZookeeperNode }).(SparkClusterRolesZookeeperNodeOutput)
}

type SparkClusterRolesPtrOutput struct{ *pulumi.OutputState }

func (SparkClusterRolesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkClusterRoles)(nil)).Elem()
}

func (o SparkClusterRolesPtrOutput) ToSparkClusterRolesPtrOutput() SparkClusterRolesPtrOutput {
	return o
}

func (o SparkClusterRolesPtrOutput) ToSparkClusterRolesPtrOutputWithContext(ctx context.Context) SparkClusterRolesPtrOutput {
	return o
}

func (o SparkClusterRolesPtrOutput) Elem() SparkClusterRolesOutput {
	return o.ApplyT(func(v *SparkClusterRoles) SparkClusterRoles { return *v }).(SparkClusterRolesOutput)
}

// A `headNode` block as defined above.
func (o SparkClusterRolesPtrOutput) HeadNode() SparkClusterRolesHeadNodeOutput {
	return o.ApplyT(func(v SparkClusterRoles) SparkClusterRolesHeadNode { return v.HeadNode }).(SparkClusterRolesHeadNodeOutput)
}

// A `workerNode` block as defined below.
func (o SparkClusterRolesPtrOutput) WorkerNode() SparkClusterRolesWorkerNodeOutput {
	return o.ApplyT(func(v SparkClusterRoles) SparkClusterRolesWorkerNode { return v.WorkerNode }).(SparkClusterRolesWorkerNodeOutput)
}

// A `zookeeperNode` block as defined below.
func (o SparkClusterRolesPtrOutput) ZookeeperNode() SparkClusterRolesZookeeperNodeOutput {
	return o.ApplyT(func(v SparkClusterRoles) SparkClusterRolesZookeeperNode { return v.ZookeeperNode }).(SparkClusterRolesZookeeperNodeOutput)
}

type SparkClusterRolesHeadNode struct {
	// The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
	Password *string `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
	SshKeys []string `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId *string `pulumi:"subnetId"`
	// The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
	// The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId *string `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
	VmSize string `pulumi:"vmSize"`
}

type SparkClusterRolesHeadNodeInput interface {
	pulumi.Input

	ToSparkClusterRolesHeadNodeOutput() SparkClusterRolesHeadNodeOutput
	ToSparkClusterRolesHeadNodeOutputWithContext(context.Context) SparkClusterRolesHeadNodeOutput
}

type SparkClusterRolesHeadNodeArgs struct {
	// The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
	SshKeys pulumi.StringArrayInput `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
	// The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId pulumi.StringPtrInput `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
	VmSize pulumi.StringInput `pulumi:"vmSize"`
}

func (SparkClusterRolesHeadNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkClusterRolesHeadNode)(nil)).Elem()
}

func (i SparkClusterRolesHeadNodeArgs) ToSparkClusterRolesHeadNodeOutput() SparkClusterRolesHeadNodeOutput {
	return i.ToSparkClusterRolesHeadNodeOutputWithContext(context.Background())
}

func (i SparkClusterRolesHeadNodeArgs) ToSparkClusterRolesHeadNodeOutputWithContext(ctx context.Context) SparkClusterRolesHeadNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkClusterRolesHeadNodeOutput)
}

type SparkClusterRolesHeadNodeOutput struct{ *pulumi.OutputState }

func (SparkClusterRolesHeadNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkClusterRolesHeadNode)(nil)).Elem()
}

func (o SparkClusterRolesHeadNodeOutput) ToSparkClusterRolesHeadNodeOutput() SparkClusterRolesHeadNodeOutput {
	return o
}

func (o SparkClusterRolesHeadNodeOutput) ToSparkClusterRolesHeadNodeOutputWithContext(ctx context.Context) SparkClusterRolesHeadNodeOutput {
	return o
}

// The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
func (o SparkClusterRolesHeadNodeOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkClusterRolesHeadNode) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
func (o SparkClusterRolesHeadNodeOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SparkClusterRolesHeadNode) []string { return v.SshKeys }).(pulumi.StringArrayOutput)
}

// The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o SparkClusterRolesHeadNodeOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkClusterRolesHeadNode) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
func (o SparkClusterRolesHeadNodeOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v SparkClusterRolesHeadNode) string { return v.Username }).(pulumi.StringOutput)
}

// The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o SparkClusterRolesHeadNodeOutput) VirtualNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkClusterRolesHeadNode) *string { return v.VirtualNetworkId }).(pulumi.StringPtrOutput)
}

// The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
func (o SparkClusterRolesHeadNodeOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v SparkClusterRolesHeadNode) string { return v.VmSize }).(pulumi.StringOutput)
}

type SparkClusterRolesWorkerNode struct {
	// The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
	MinInstanceCount *int `pulumi:"minInstanceCount"`
	// The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
	Password *string `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
	SshKeys []string `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId *string `pulumi:"subnetId"`
	// The number of instances which should be run for the Worker Nodes.
	TargetInstanceCount int `pulumi:"targetInstanceCount"`
	// The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
	// The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId *string `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
	VmSize string `pulumi:"vmSize"`
}

type SparkClusterRolesWorkerNodeInput interface {
	pulumi.Input

	ToSparkClusterRolesWorkerNodeOutput() SparkClusterRolesWorkerNodeOutput
	ToSparkClusterRolesWorkerNodeOutputWithContext(context.Context) SparkClusterRolesWorkerNodeOutput
}

type SparkClusterRolesWorkerNodeArgs struct {
	// The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
	MinInstanceCount pulumi.IntPtrInput `pulumi:"minInstanceCount"`
	// The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
	SshKeys pulumi.StringArrayInput `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// The number of instances which should be run for the Worker Nodes.
	TargetInstanceCount pulumi.IntInput `pulumi:"targetInstanceCount"`
	// The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
	// The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId pulumi.StringPtrInput `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
	VmSize pulumi.StringInput `pulumi:"vmSize"`
}

func (SparkClusterRolesWorkerNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkClusterRolesWorkerNode)(nil)).Elem()
}

func (i SparkClusterRolesWorkerNodeArgs) ToSparkClusterRolesWorkerNodeOutput() SparkClusterRolesWorkerNodeOutput {
	return i.ToSparkClusterRolesWorkerNodeOutputWithContext(context.Background())
}

func (i SparkClusterRolesWorkerNodeArgs) ToSparkClusterRolesWorkerNodeOutputWithContext(ctx context.Context) SparkClusterRolesWorkerNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkClusterRolesWorkerNodeOutput)
}

type SparkClusterRolesWorkerNodeOutput struct{ *pulumi.OutputState }

func (SparkClusterRolesWorkerNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkClusterRolesWorkerNode)(nil)).Elem()
}

func (o SparkClusterRolesWorkerNodeOutput) ToSparkClusterRolesWorkerNodeOutput() SparkClusterRolesWorkerNodeOutput {
	return o
}

func (o SparkClusterRolesWorkerNodeOutput) ToSparkClusterRolesWorkerNodeOutputWithContext(ctx context.Context) SparkClusterRolesWorkerNodeOutput {
	return o
}

// The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
func (o SparkClusterRolesWorkerNodeOutput) MinInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SparkClusterRolesWorkerNode) *int { return v.MinInstanceCount }).(pulumi.IntPtrOutput)
}

// The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
func (o SparkClusterRolesWorkerNodeOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkClusterRolesWorkerNode) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
func (o SparkClusterRolesWorkerNodeOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SparkClusterRolesWorkerNode) []string { return v.SshKeys }).(pulumi.StringArrayOutput)
}

// The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o SparkClusterRolesWorkerNodeOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkClusterRolesWorkerNode) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The number of instances which should be run for the Worker Nodes.
func (o SparkClusterRolesWorkerNodeOutput) TargetInstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v SparkClusterRolesWorkerNode) int { return v.TargetInstanceCount }).(pulumi.IntOutput)
}

// The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
func (o SparkClusterRolesWorkerNodeOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v SparkClusterRolesWorkerNode) string { return v.Username }).(pulumi.StringOutput)
}

// The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o SparkClusterRolesWorkerNodeOutput) VirtualNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkClusterRolesWorkerNode) *string { return v.VirtualNetworkId }).(pulumi.StringPtrOutput)
}

// The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
func (o SparkClusterRolesWorkerNodeOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v SparkClusterRolesWorkerNode) string { return v.VmSize }).(pulumi.StringOutput)
}

type SparkClusterRolesZookeeperNode struct {
	// The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
	Password *string `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
	SshKeys []string `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId *string `pulumi:"subnetId"`
	// The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
	// The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId *string `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
	VmSize string `pulumi:"vmSize"`
}

type SparkClusterRolesZookeeperNodeInput interface {
	pulumi.Input

	ToSparkClusterRolesZookeeperNodeOutput() SparkClusterRolesZookeeperNodeOutput
	ToSparkClusterRolesZookeeperNodeOutputWithContext(context.Context) SparkClusterRolesZookeeperNodeOutput
}

type SparkClusterRolesZookeeperNodeArgs struct {
	// The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
	SshKeys pulumi.StringArrayInput `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
	// The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId pulumi.StringPtrInput `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
	VmSize pulumi.StringInput `pulumi:"vmSize"`
}

func (SparkClusterRolesZookeeperNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkClusterRolesZookeeperNode)(nil)).Elem()
}

func (i SparkClusterRolesZookeeperNodeArgs) ToSparkClusterRolesZookeeperNodeOutput() SparkClusterRolesZookeeperNodeOutput {
	return i.ToSparkClusterRolesZookeeperNodeOutputWithContext(context.Background())
}

func (i SparkClusterRolesZookeeperNodeArgs) ToSparkClusterRolesZookeeperNodeOutputWithContext(ctx context.Context) SparkClusterRolesZookeeperNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkClusterRolesZookeeperNodeOutput)
}

type SparkClusterRolesZookeeperNodeOutput struct{ *pulumi.OutputState }

func (SparkClusterRolesZookeeperNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkClusterRolesZookeeperNode)(nil)).Elem()
}

func (o SparkClusterRolesZookeeperNodeOutput) ToSparkClusterRolesZookeeperNodeOutput() SparkClusterRolesZookeeperNodeOutput {
	return o
}

func (o SparkClusterRolesZookeeperNodeOutput) ToSparkClusterRolesZookeeperNodeOutputWithContext(ctx context.Context) SparkClusterRolesZookeeperNodeOutput {
	return o
}

// The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
func (o SparkClusterRolesZookeeperNodeOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkClusterRolesZookeeperNode) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
func (o SparkClusterRolesZookeeperNodeOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SparkClusterRolesZookeeperNode) []string { return v.SshKeys }).(pulumi.StringArrayOutput)
}

// The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o SparkClusterRolesZookeeperNodeOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkClusterRolesZookeeperNode) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
func (o SparkClusterRolesZookeeperNodeOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v SparkClusterRolesZookeeperNode) string { return v.Username }).(pulumi.StringOutput)
}

// The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o SparkClusterRolesZookeeperNodeOutput) VirtualNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkClusterRolesZookeeperNode) *string { return v.VirtualNetworkId }).(pulumi.StringPtrOutput)
}

// The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
func (o SparkClusterRolesZookeeperNodeOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v SparkClusterRolesZookeeperNode) string { return v.VmSize }).(pulumi.StringOutput)
}

type SparkClusterStorageAccount struct {
	// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
	IsDefault bool `pulumi:"isDefault"`
	// The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
	StorageAccountKey string `pulumi:"storageAccountKey"`
	// The ID of the Storage Container. Changing this forces a new resource to be created.
	StorageContainerId string `pulumi:"storageContainerId"`
}

type SparkClusterStorageAccountInput interface {
	pulumi.Input

	ToSparkClusterStorageAccountOutput() SparkClusterStorageAccountOutput
	ToSparkClusterStorageAccountOutputWithContext(context.Context) SparkClusterStorageAccountOutput
}

type SparkClusterStorageAccountArgs struct {
	// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
	IsDefault pulumi.BoolInput `pulumi:"isDefault"`
	// The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
	StorageAccountKey pulumi.StringInput `pulumi:"storageAccountKey"`
	// The ID of the Storage Container. Changing this forces a new resource to be created.
	StorageContainerId pulumi.StringInput `pulumi:"storageContainerId"`
}

func (SparkClusterStorageAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkClusterStorageAccount)(nil)).Elem()
}

func (i SparkClusterStorageAccountArgs) ToSparkClusterStorageAccountOutput() SparkClusterStorageAccountOutput {
	return i.ToSparkClusterStorageAccountOutputWithContext(context.Background())
}

func (i SparkClusterStorageAccountArgs) ToSparkClusterStorageAccountOutputWithContext(ctx context.Context) SparkClusterStorageAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkClusterStorageAccountOutput)
}

type SparkClusterStorageAccountArrayInput interface {
	pulumi.Input

	ToSparkClusterStorageAccountArrayOutput() SparkClusterStorageAccountArrayOutput
	ToSparkClusterStorageAccountArrayOutputWithContext(context.Context) SparkClusterStorageAccountArrayOutput
}

type SparkClusterStorageAccountArray []SparkClusterStorageAccountInput

func (SparkClusterStorageAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SparkClusterStorageAccount)(nil)).Elem()
}

func (i SparkClusterStorageAccountArray) ToSparkClusterStorageAccountArrayOutput() SparkClusterStorageAccountArrayOutput {
	return i.ToSparkClusterStorageAccountArrayOutputWithContext(context.Background())
}

func (i SparkClusterStorageAccountArray) ToSparkClusterStorageAccountArrayOutputWithContext(ctx context.Context) SparkClusterStorageAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkClusterStorageAccountArrayOutput)
}

type SparkClusterStorageAccountOutput struct{ *pulumi.OutputState }

func (SparkClusterStorageAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkClusterStorageAccount)(nil)).Elem()
}

func (o SparkClusterStorageAccountOutput) ToSparkClusterStorageAccountOutput() SparkClusterStorageAccountOutput {
	return o
}

func (o SparkClusterStorageAccountOutput) ToSparkClusterStorageAccountOutputWithContext(ctx context.Context) SparkClusterStorageAccountOutput {
	return o
}

// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
func (o SparkClusterStorageAccountOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v SparkClusterStorageAccount) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
func (o SparkClusterStorageAccountOutput) StorageAccountKey() pulumi.StringOutput {
	return o.ApplyT(func(v SparkClusterStorageAccount) string { return v.StorageAccountKey }).(pulumi.StringOutput)
}

// The ID of the Storage Container. Changing this forces a new resource to be created.
func (o SparkClusterStorageAccountOutput) StorageContainerId() pulumi.StringOutput {
	return o.ApplyT(func(v SparkClusterStorageAccount) string { return v.StorageContainerId }).(pulumi.StringOutput)
}

type SparkClusterStorageAccountArrayOutput struct{ *pulumi.OutputState }

func (SparkClusterStorageAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SparkClusterStorageAccount)(nil)).Elem()
}

func (o SparkClusterStorageAccountArrayOutput) ToSparkClusterStorageAccountArrayOutput() SparkClusterStorageAccountArrayOutput {
	return o
}

func (o SparkClusterStorageAccountArrayOutput) ToSparkClusterStorageAccountArrayOutputWithContext(ctx context.Context) SparkClusterStorageAccountArrayOutput {
	return o
}

func (o SparkClusterStorageAccountArrayOutput) Index(i pulumi.IntInput) SparkClusterStorageAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SparkClusterStorageAccount {
		return vs[0].([]SparkClusterStorageAccount)[vs[1].(int)]
	}).(SparkClusterStorageAccountOutput)
}

type SparkClusterStorageAccountGen2 struct {
	// The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
	FilesystemId string `pulumi:"filesystemId"`
	// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
	IsDefault bool `pulumi:"isDefault"`
	// The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
	ManagedIdentityResourceId string `pulumi:"managedIdentityResourceId"`
	// The ID of the Storage Account. Changing this forces a new resource to be created.
	StorageResourceId string `pulumi:"storageResourceId"`
}

type SparkClusterStorageAccountGen2Input interface {
	pulumi.Input

	ToSparkClusterStorageAccountGen2Output() SparkClusterStorageAccountGen2Output
	ToSparkClusterStorageAccountGen2OutputWithContext(context.Context) SparkClusterStorageAccountGen2Output
}

type SparkClusterStorageAccountGen2Args struct {
	// The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
	FilesystemId pulumi.StringInput `pulumi:"filesystemId"`
	// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
	IsDefault pulumi.BoolInput `pulumi:"isDefault"`
	// The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
	ManagedIdentityResourceId pulumi.StringInput `pulumi:"managedIdentityResourceId"`
	// The ID of the Storage Account. Changing this forces a new resource to be created.
	StorageResourceId pulumi.StringInput `pulumi:"storageResourceId"`
}

func (SparkClusterStorageAccountGen2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkClusterStorageAccountGen2)(nil)).Elem()
}

func (i SparkClusterStorageAccountGen2Args) ToSparkClusterStorageAccountGen2Output() SparkClusterStorageAccountGen2Output {
	return i.ToSparkClusterStorageAccountGen2OutputWithContext(context.Background())
}

func (i SparkClusterStorageAccountGen2Args) ToSparkClusterStorageAccountGen2OutputWithContext(ctx context.Context) SparkClusterStorageAccountGen2Output {
	return pulumi.ToOutputWithContext(ctx, i).(SparkClusterStorageAccountGen2Output)
}

func (i SparkClusterStorageAccountGen2Args) ToSparkClusterStorageAccountGen2PtrOutput() SparkClusterStorageAccountGen2PtrOutput {
	return i.ToSparkClusterStorageAccountGen2PtrOutputWithContext(context.Background())
}

func (i SparkClusterStorageAccountGen2Args) ToSparkClusterStorageAccountGen2PtrOutputWithContext(ctx context.Context) SparkClusterStorageAccountGen2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkClusterStorageAccountGen2Output).ToSparkClusterStorageAccountGen2PtrOutputWithContext(ctx)
}

type SparkClusterStorageAccountGen2PtrInput interface {
	pulumi.Input

	ToSparkClusterStorageAccountGen2PtrOutput() SparkClusterStorageAccountGen2PtrOutput
	ToSparkClusterStorageAccountGen2PtrOutputWithContext(context.Context) SparkClusterStorageAccountGen2PtrOutput
}

type sparkClusterStorageAccountGen2PtrType SparkClusterStorageAccountGen2Args

func SparkClusterStorageAccountGen2Ptr(v *SparkClusterStorageAccountGen2Args) SparkClusterStorageAccountGen2PtrInput {
	return (*sparkClusterStorageAccountGen2PtrType)(v)
}

func (*sparkClusterStorageAccountGen2PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkClusterStorageAccountGen2)(nil)).Elem()
}

func (i *sparkClusterStorageAccountGen2PtrType) ToSparkClusterStorageAccountGen2PtrOutput() SparkClusterStorageAccountGen2PtrOutput {
	return i.ToSparkClusterStorageAccountGen2PtrOutputWithContext(context.Background())
}

func (i *sparkClusterStorageAccountGen2PtrType) ToSparkClusterStorageAccountGen2PtrOutputWithContext(ctx context.Context) SparkClusterStorageAccountGen2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkClusterStorageAccountGen2PtrOutput)
}

type SparkClusterStorageAccountGen2Output struct{ *pulumi.OutputState }

func (SparkClusterStorageAccountGen2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkClusterStorageAccountGen2)(nil)).Elem()
}

func (o SparkClusterStorageAccountGen2Output) ToSparkClusterStorageAccountGen2Output() SparkClusterStorageAccountGen2Output {
	return o
}

func (o SparkClusterStorageAccountGen2Output) ToSparkClusterStorageAccountGen2OutputWithContext(ctx context.Context) SparkClusterStorageAccountGen2Output {
	return o
}

func (o SparkClusterStorageAccountGen2Output) ToSparkClusterStorageAccountGen2PtrOutput() SparkClusterStorageAccountGen2PtrOutput {
	return o.ToSparkClusterStorageAccountGen2PtrOutputWithContext(context.Background())
}

func (o SparkClusterStorageAccountGen2Output) ToSparkClusterStorageAccountGen2PtrOutputWithContext(ctx context.Context) SparkClusterStorageAccountGen2PtrOutput {
	return o.ApplyT(func(v SparkClusterStorageAccountGen2) *SparkClusterStorageAccountGen2 {
		return &v
	}).(SparkClusterStorageAccountGen2PtrOutput)
}

// The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
func (o SparkClusterStorageAccountGen2Output) FilesystemId() pulumi.StringOutput {
	return o.ApplyT(func(v SparkClusterStorageAccountGen2) string { return v.FilesystemId }).(pulumi.StringOutput)
}

// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
func (o SparkClusterStorageAccountGen2Output) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v SparkClusterStorageAccountGen2) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
func (o SparkClusterStorageAccountGen2Output) ManagedIdentityResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v SparkClusterStorageAccountGen2) string { return v.ManagedIdentityResourceId }).(pulumi.StringOutput)
}

// The ID of the Storage Account. Changing this forces a new resource to be created.
func (o SparkClusterStorageAccountGen2Output) StorageResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v SparkClusterStorageAccountGen2) string { return v.StorageResourceId }).(pulumi.StringOutput)
}

type SparkClusterStorageAccountGen2PtrOutput struct{ *pulumi.OutputState }

func (SparkClusterStorageAccountGen2PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkClusterStorageAccountGen2)(nil)).Elem()
}

func (o SparkClusterStorageAccountGen2PtrOutput) ToSparkClusterStorageAccountGen2PtrOutput() SparkClusterStorageAccountGen2PtrOutput {
	return o
}

func (o SparkClusterStorageAccountGen2PtrOutput) ToSparkClusterStorageAccountGen2PtrOutputWithContext(ctx context.Context) SparkClusterStorageAccountGen2PtrOutput {
	return o
}

func (o SparkClusterStorageAccountGen2PtrOutput) Elem() SparkClusterStorageAccountGen2Output {
	return o.ApplyT(func(v *SparkClusterStorageAccountGen2) SparkClusterStorageAccountGen2 { return *v }).(SparkClusterStorageAccountGen2Output)
}

// The ID of the Gen2 Filesystem. Changing this forces a new resource to be created.
func (o SparkClusterStorageAccountGen2PtrOutput) FilesystemId() pulumi.StringOutput {
	return o.ApplyT(func(v SparkClusterStorageAccountGen2) string { return v.FilesystemId }).(pulumi.StringOutput)
}

// Is this the Default Storage Account for the HDInsight Hadoop Cluster? Changing this forces a new resource to be created.
func (o SparkClusterStorageAccountGen2PtrOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v SparkClusterStorageAccountGen2) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// The ID of Managed Identity to use for accessing the Gen2 filesystem. Changing this forces a new resource to be created.
func (o SparkClusterStorageAccountGen2PtrOutput) ManagedIdentityResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v SparkClusterStorageAccountGen2) string { return v.ManagedIdentityResourceId }).(pulumi.StringOutput)
}

// The ID of the Storage Account. Changing this forces a new resource to be created.
func (o SparkClusterStorageAccountGen2PtrOutput) StorageResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v SparkClusterStorageAccountGen2) string { return v.StorageResourceId }).(pulumi.StringOutput)
}

type StormClusterComponentVersion struct {
	// The version of Storm which should be used for this HDInsight Storm Cluster. Changing this forces a new resource to be created.
	Storm string `pulumi:"storm"`
}

type StormClusterComponentVersionInput interface {
	pulumi.Input

	ToStormClusterComponentVersionOutput() StormClusterComponentVersionOutput
	ToStormClusterComponentVersionOutputWithContext(context.Context) StormClusterComponentVersionOutput
}

type StormClusterComponentVersionArgs struct {
	// The version of Storm which should be used for this HDInsight Storm Cluster. Changing this forces a new resource to be created.
	Storm pulumi.StringInput `pulumi:"storm"`
}

func (StormClusterComponentVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StormClusterComponentVersion)(nil)).Elem()
}

func (i StormClusterComponentVersionArgs) ToStormClusterComponentVersionOutput() StormClusterComponentVersionOutput {
	return i.ToStormClusterComponentVersionOutputWithContext(context.Background())
}

func (i StormClusterComponentVersionArgs) ToStormClusterComponentVersionOutputWithContext(ctx context.Context) StormClusterComponentVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StormClusterComponentVersionOutput)
}

func (i StormClusterComponentVersionArgs) ToStormClusterComponentVersionPtrOutput() StormClusterComponentVersionPtrOutput {
	return i.ToStormClusterComponentVersionPtrOutputWithContext(context.Background())
}

func (i StormClusterComponentVersionArgs) ToStormClusterComponentVersionPtrOutputWithContext(ctx context.Context) StormClusterComponentVersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StormClusterComponentVersionOutput).ToStormClusterComponentVersionPtrOutputWithContext(ctx)
}

type StormClusterComponentVersionPtrInput interface {
	pulumi.Input

	ToStormClusterComponentVersionPtrOutput() StormClusterComponentVersionPtrOutput
	ToStormClusterComponentVersionPtrOutputWithContext(context.Context) StormClusterComponentVersionPtrOutput
}

type stormClusterComponentVersionPtrType StormClusterComponentVersionArgs

func StormClusterComponentVersionPtr(v *StormClusterComponentVersionArgs) StormClusterComponentVersionPtrInput {
	return (*stormClusterComponentVersionPtrType)(v)
}

func (*stormClusterComponentVersionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StormClusterComponentVersion)(nil)).Elem()
}

func (i *stormClusterComponentVersionPtrType) ToStormClusterComponentVersionPtrOutput() StormClusterComponentVersionPtrOutput {
	return i.ToStormClusterComponentVersionPtrOutputWithContext(context.Background())
}

func (i *stormClusterComponentVersionPtrType) ToStormClusterComponentVersionPtrOutputWithContext(ctx context.Context) StormClusterComponentVersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StormClusterComponentVersionPtrOutput)
}

type StormClusterComponentVersionOutput struct{ *pulumi.OutputState }

func (StormClusterComponentVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StormClusterComponentVersion)(nil)).Elem()
}

func (o StormClusterComponentVersionOutput) ToStormClusterComponentVersionOutput() StormClusterComponentVersionOutput {
	return o
}

func (o StormClusterComponentVersionOutput) ToStormClusterComponentVersionOutputWithContext(ctx context.Context) StormClusterComponentVersionOutput {
	return o
}

func (o StormClusterComponentVersionOutput) ToStormClusterComponentVersionPtrOutput() StormClusterComponentVersionPtrOutput {
	return o.ToStormClusterComponentVersionPtrOutputWithContext(context.Background())
}

func (o StormClusterComponentVersionOutput) ToStormClusterComponentVersionPtrOutputWithContext(ctx context.Context) StormClusterComponentVersionPtrOutput {
	return o.ApplyT(func(v StormClusterComponentVersion) *StormClusterComponentVersion {
		return &v
	}).(StormClusterComponentVersionPtrOutput)
}

// The version of Storm which should be used for this HDInsight Storm Cluster. Changing this forces a new resource to be created.
func (o StormClusterComponentVersionOutput) Storm() pulumi.StringOutput {
	return o.ApplyT(func(v StormClusterComponentVersion) string { return v.Storm }).(pulumi.StringOutput)
}

type StormClusterComponentVersionPtrOutput struct{ *pulumi.OutputState }

func (StormClusterComponentVersionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StormClusterComponentVersion)(nil)).Elem()
}

func (o StormClusterComponentVersionPtrOutput) ToStormClusterComponentVersionPtrOutput() StormClusterComponentVersionPtrOutput {
	return o
}

func (o StormClusterComponentVersionPtrOutput) ToStormClusterComponentVersionPtrOutputWithContext(ctx context.Context) StormClusterComponentVersionPtrOutput {
	return o
}

func (o StormClusterComponentVersionPtrOutput) Elem() StormClusterComponentVersionOutput {
	return o.ApplyT(func(v *StormClusterComponentVersion) StormClusterComponentVersion { return *v }).(StormClusterComponentVersionOutput)
}

// The version of Storm which should be used for this HDInsight Storm Cluster. Changing this forces a new resource to be created.
func (o StormClusterComponentVersionPtrOutput) Storm() pulumi.StringOutput {
	return o.ApplyT(func(v StormClusterComponentVersion) string { return v.Storm }).(pulumi.StringOutput)
}

type StormClusterGateway struct {
	// Is the Ambari portal enabled? Changing this forces a new resource to be created.
	Enabled bool `pulumi:"enabled"`
	// The password used for the Ambari Portal. Changing this forces a new resource to be created.
	Password string `pulumi:"password"`
	// The username used for the Ambari Portal. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
}

type StormClusterGatewayInput interface {
	pulumi.Input

	ToStormClusterGatewayOutput() StormClusterGatewayOutput
	ToStormClusterGatewayOutputWithContext(context.Context) StormClusterGatewayOutput
}

type StormClusterGatewayArgs struct {
	// Is the Ambari portal enabled? Changing this forces a new resource to be created.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The password used for the Ambari Portal. Changing this forces a new resource to be created.
	Password pulumi.StringInput `pulumi:"password"`
	// The username used for the Ambari Portal. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
}

func (StormClusterGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StormClusterGateway)(nil)).Elem()
}

func (i StormClusterGatewayArgs) ToStormClusterGatewayOutput() StormClusterGatewayOutput {
	return i.ToStormClusterGatewayOutputWithContext(context.Background())
}

func (i StormClusterGatewayArgs) ToStormClusterGatewayOutputWithContext(ctx context.Context) StormClusterGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StormClusterGatewayOutput)
}

func (i StormClusterGatewayArgs) ToStormClusterGatewayPtrOutput() StormClusterGatewayPtrOutput {
	return i.ToStormClusterGatewayPtrOutputWithContext(context.Background())
}

func (i StormClusterGatewayArgs) ToStormClusterGatewayPtrOutputWithContext(ctx context.Context) StormClusterGatewayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StormClusterGatewayOutput).ToStormClusterGatewayPtrOutputWithContext(ctx)
}

type StormClusterGatewayPtrInput interface {
	pulumi.Input

	ToStormClusterGatewayPtrOutput() StormClusterGatewayPtrOutput
	ToStormClusterGatewayPtrOutputWithContext(context.Context) StormClusterGatewayPtrOutput
}

type stormClusterGatewayPtrType StormClusterGatewayArgs

func StormClusterGatewayPtr(v *StormClusterGatewayArgs) StormClusterGatewayPtrInput {
	return (*stormClusterGatewayPtrType)(v)
}

func (*stormClusterGatewayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StormClusterGateway)(nil)).Elem()
}

func (i *stormClusterGatewayPtrType) ToStormClusterGatewayPtrOutput() StormClusterGatewayPtrOutput {
	return i.ToStormClusterGatewayPtrOutputWithContext(context.Background())
}

func (i *stormClusterGatewayPtrType) ToStormClusterGatewayPtrOutputWithContext(ctx context.Context) StormClusterGatewayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StormClusterGatewayPtrOutput)
}

type StormClusterGatewayOutput struct{ *pulumi.OutputState }

func (StormClusterGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StormClusterGateway)(nil)).Elem()
}

func (o StormClusterGatewayOutput) ToStormClusterGatewayOutput() StormClusterGatewayOutput {
	return o
}

func (o StormClusterGatewayOutput) ToStormClusterGatewayOutputWithContext(ctx context.Context) StormClusterGatewayOutput {
	return o
}

func (o StormClusterGatewayOutput) ToStormClusterGatewayPtrOutput() StormClusterGatewayPtrOutput {
	return o.ToStormClusterGatewayPtrOutputWithContext(context.Background())
}

func (o StormClusterGatewayOutput) ToStormClusterGatewayPtrOutputWithContext(ctx context.Context) StormClusterGatewayPtrOutput {
	return o.ApplyT(func(v StormClusterGateway) *StormClusterGateway {
		return &v
	}).(StormClusterGatewayPtrOutput)
}

// Is the Ambari portal enabled? Changing this forces a new resource to be created.
func (o StormClusterGatewayOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v StormClusterGateway) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The password used for the Ambari Portal. Changing this forces a new resource to be created.
func (o StormClusterGatewayOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v StormClusterGateway) string { return v.Password }).(pulumi.StringOutput)
}

// The username used for the Ambari Portal. Changing this forces a new resource to be created.
func (o StormClusterGatewayOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v StormClusterGateway) string { return v.Username }).(pulumi.StringOutput)
}

type StormClusterGatewayPtrOutput struct{ *pulumi.OutputState }

func (StormClusterGatewayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StormClusterGateway)(nil)).Elem()
}

func (o StormClusterGatewayPtrOutput) ToStormClusterGatewayPtrOutput() StormClusterGatewayPtrOutput {
	return o
}

func (o StormClusterGatewayPtrOutput) ToStormClusterGatewayPtrOutputWithContext(ctx context.Context) StormClusterGatewayPtrOutput {
	return o
}

func (o StormClusterGatewayPtrOutput) Elem() StormClusterGatewayOutput {
	return o.ApplyT(func(v *StormClusterGateway) StormClusterGateway { return *v }).(StormClusterGatewayOutput)
}

// Is the Ambari portal enabled? Changing this forces a new resource to be created.
func (o StormClusterGatewayPtrOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v StormClusterGateway) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The password used for the Ambari Portal. Changing this forces a new resource to be created.
func (o StormClusterGatewayPtrOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v StormClusterGateway) string { return v.Password }).(pulumi.StringOutput)
}

// The username used for the Ambari Portal. Changing this forces a new resource to be created.
func (o StormClusterGatewayPtrOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v StormClusterGateway) string { return v.Username }).(pulumi.StringOutput)
}

type StormClusterRoles struct {
	// A `headNode` block as defined above.
	HeadNode StormClusterRolesHeadNode `pulumi:"headNode"`
	// A `workerNode` block as defined below.
	WorkerNode StormClusterRolesWorkerNode `pulumi:"workerNode"`
	// A `zookeeperNode` block as defined below.
	ZookeeperNode StormClusterRolesZookeeperNode `pulumi:"zookeeperNode"`
}

type StormClusterRolesInput interface {
	pulumi.Input

	ToStormClusterRolesOutput() StormClusterRolesOutput
	ToStormClusterRolesOutputWithContext(context.Context) StormClusterRolesOutput
}

type StormClusterRolesArgs struct {
	// A `headNode` block as defined above.
	HeadNode StormClusterRolesHeadNodeInput `pulumi:"headNode"`
	// A `workerNode` block as defined below.
	WorkerNode StormClusterRolesWorkerNodeInput `pulumi:"workerNode"`
	// A `zookeeperNode` block as defined below.
	ZookeeperNode StormClusterRolesZookeeperNodeInput `pulumi:"zookeeperNode"`
}

func (StormClusterRolesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StormClusterRoles)(nil)).Elem()
}

func (i StormClusterRolesArgs) ToStormClusterRolesOutput() StormClusterRolesOutput {
	return i.ToStormClusterRolesOutputWithContext(context.Background())
}

func (i StormClusterRolesArgs) ToStormClusterRolesOutputWithContext(ctx context.Context) StormClusterRolesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StormClusterRolesOutput)
}

func (i StormClusterRolesArgs) ToStormClusterRolesPtrOutput() StormClusterRolesPtrOutput {
	return i.ToStormClusterRolesPtrOutputWithContext(context.Background())
}

func (i StormClusterRolesArgs) ToStormClusterRolesPtrOutputWithContext(ctx context.Context) StormClusterRolesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StormClusterRolesOutput).ToStormClusterRolesPtrOutputWithContext(ctx)
}

type StormClusterRolesPtrInput interface {
	pulumi.Input

	ToStormClusterRolesPtrOutput() StormClusterRolesPtrOutput
	ToStormClusterRolesPtrOutputWithContext(context.Context) StormClusterRolesPtrOutput
}

type stormClusterRolesPtrType StormClusterRolesArgs

func StormClusterRolesPtr(v *StormClusterRolesArgs) StormClusterRolesPtrInput {
	return (*stormClusterRolesPtrType)(v)
}

func (*stormClusterRolesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StormClusterRoles)(nil)).Elem()
}

func (i *stormClusterRolesPtrType) ToStormClusterRolesPtrOutput() StormClusterRolesPtrOutput {
	return i.ToStormClusterRolesPtrOutputWithContext(context.Background())
}

func (i *stormClusterRolesPtrType) ToStormClusterRolesPtrOutputWithContext(ctx context.Context) StormClusterRolesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StormClusterRolesPtrOutput)
}

type StormClusterRolesOutput struct{ *pulumi.OutputState }

func (StormClusterRolesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StormClusterRoles)(nil)).Elem()
}

func (o StormClusterRolesOutput) ToStormClusterRolesOutput() StormClusterRolesOutput {
	return o
}

func (o StormClusterRolesOutput) ToStormClusterRolesOutputWithContext(ctx context.Context) StormClusterRolesOutput {
	return o
}

func (o StormClusterRolesOutput) ToStormClusterRolesPtrOutput() StormClusterRolesPtrOutput {
	return o.ToStormClusterRolesPtrOutputWithContext(context.Background())
}

func (o StormClusterRolesOutput) ToStormClusterRolesPtrOutputWithContext(ctx context.Context) StormClusterRolesPtrOutput {
	return o.ApplyT(func(v StormClusterRoles) *StormClusterRoles {
		return &v
	}).(StormClusterRolesPtrOutput)
}

// A `headNode` block as defined above.
func (o StormClusterRolesOutput) HeadNode() StormClusterRolesHeadNodeOutput {
	return o.ApplyT(func(v StormClusterRoles) StormClusterRolesHeadNode { return v.HeadNode }).(StormClusterRolesHeadNodeOutput)
}

// A `workerNode` block as defined below.
func (o StormClusterRolesOutput) WorkerNode() StormClusterRolesWorkerNodeOutput {
	return o.ApplyT(func(v StormClusterRoles) StormClusterRolesWorkerNode { return v.WorkerNode }).(StormClusterRolesWorkerNodeOutput)
}

// A `zookeeperNode` block as defined below.
func (o StormClusterRolesOutput) ZookeeperNode() StormClusterRolesZookeeperNodeOutput {
	return o.ApplyT(func(v StormClusterRoles) StormClusterRolesZookeeperNode { return v.ZookeeperNode }).(StormClusterRolesZookeeperNodeOutput)
}

type StormClusterRolesPtrOutput struct{ *pulumi.OutputState }

func (StormClusterRolesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StormClusterRoles)(nil)).Elem()
}

func (o StormClusterRolesPtrOutput) ToStormClusterRolesPtrOutput() StormClusterRolesPtrOutput {
	return o
}

func (o StormClusterRolesPtrOutput) ToStormClusterRolesPtrOutputWithContext(ctx context.Context) StormClusterRolesPtrOutput {
	return o
}

func (o StormClusterRolesPtrOutput) Elem() StormClusterRolesOutput {
	return o.ApplyT(func(v *StormClusterRoles) StormClusterRoles { return *v }).(StormClusterRolesOutput)
}

// A `headNode` block as defined above.
func (o StormClusterRolesPtrOutput) HeadNode() StormClusterRolesHeadNodeOutput {
	return o.ApplyT(func(v StormClusterRoles) StormClusterRolesHeadNode { return v.HeadNode }).(StormClusterRolesHeadNodeOutput)
}

// A `workerNode` block as defined below.
func (o StormClusterRolesPtrOutput) WorkerNode() StormClusterRolesWorkerNodeOutput {
	return o.ApplyT(func(v StormClusterRoles) StormClusterRolesWorkerNode { return v.WorkerNode }).(StormClusterRolesWorkerNodeOutput)
}

// A `zookeeperNode` block as defined below.
func (o StormClusterRolesPtrOutput) ZookeeperNode() StormClusterRolesZookeeperNodeOutput {
	return o.ApplyT(func(v StormClusterRoles) StormClusterRolesZookeeperNode { return v.ZookeeperNode }).(StormClusterRolesZookeeperNodeOutput)
}

type StormClusterRolesHeadNode struct {
	// The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
	Password *string `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
	SshKeys []string `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId *string `pulumi:"subnetId"`
	// The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
	// The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId *string `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
	VmSize string `pulumi:"vmSize"`
}

type StormClusterRolesHeadNodeInput interface {
	pulumi.Input

	ToStormClusterRolesHeadNodeOutput() StormClusterRolesHeadNodeOutput
	ToStormClusterRolesHeadNodeOutputWithContext(context.Context) StormClusterRolesHeadNodeOutput
}

type StormClusterRolesHeadNodeArgs struct {
	// The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
	SshKeys pulumi.StringArrayInput `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
	// The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId pulumi.StringPtrInput `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
	VmSize pulumi.StringInput `pulumi:"vmSize"`
}

func (StormClusterRolesHeadNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StormClusterRolesHeadNode)(nil)).Elem()
}

func (i StormClusterRolesHeadNodeArgs) ToStormClusterRolesHeadNodeOutput() StormClusterRolesHeadNodeOutput {
	return i.ToStormClusterRolesHeadNodeOutputWithContext(context.Background())
}

func (i StormClusterRolesHeadNodeArgs) ToStormClusterRolesHeadNodeOutputWithContext(ctx context.Context) StormClusterRolesHeadNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StormClusterRolesHeadNodeOutput)
}

type StormClusterRolesHeadNodeOutput struct{ *pulumi.OutputState }

func (StormClusterRolesHeadNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StormClusterRolesHeadNode)(nil)).Elem()
}

func (o StormClusterRolesHeadNodeOutput) ToStormClusterRolesHeadNodeOutput() StormClusterRolesHeadNodeOutput {
	return o
}

func (o StormClusterRolesHeadNodeOutput) ToStormClusterRolesHeadNodeOutputWithContext(ctx context.Context) StormClusterRolesHeadNodeOutput {
	return o
}

// The Password associated with the local administrator for the Head Nodes. Changing this forces a new resource to be created.
func (o StormClusterRolesHeadNodeOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StormClusterRolesHeadNode) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// A list of SSH Keys which should be used for the local administrator on the Head Nodes. Changing this forces a new resource to be created.
func (o StormClusterRolesHeadNodeOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StormClusterRolesHeadNode) []string { return v.SshKeys }).(pulumi.StringArrayOutput)
}

// The ID of the Subnet within the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o StormClusterRolesHeadNodeOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StormClusterRolesHeadNode) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The Username of the local administrator for the Head Nodes. Changing this forces a new resource to be created.
func (o StormClusterRolesHeadNodeOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v StormClusterRolesHeadNode) string { return v.Username }).(pulumi.StringOutput)
}

// The ID of the Virtual Network where the Head Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o StormClusterRolesHeadNodeOutput) VirtualNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StormClusterRolesHeadNode) *string { return v.VirtualNetworkId }).(pulumi.StringPtrOutput)
}

// The Size of the Virtual Machine which should be used as the Head Nodes. Changing this forces a new resource to be created.
func (o StormClusterRolesHeadNodeOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v StormClusterRolesHeadNode) string { return v.VmSize }).(pulumi.StringOutput)
}

type StormClusterRolesWorkerNode struct {
	// The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
	MinInstanceCount *int `pulumi:"minInstanceCount"`
	// The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
	Password *string `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
	SshKeys []string `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId *string `pulumi:"subnetId"`
	// The number of instances which should be run for the Worker Nodes.
	TargetInstanceCount int `pulumi:"targetInstanceCount"`
	// The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
	// The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId *string `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
	VmSize string `pulumi:"vmSize"`
}

type StormClusterRolesWorkerNodeInput interface {
	pulumi.Input

	ToStormClusterRolesWorkerNodeOutput() StormClusterRolesWorkerNodeOutput
	ToStormClusterRolesWorkerNodeOutputWithContext(context.Context) StormClusterRolesWorkerNodeOutput
}

type StormClusterRolesWorkerNodeArgs struct {
	// The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
	MinInstanceCount pulumi.IntPtrInput `pulumi:"minInstanceCount"`
	// The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
	SshKeys pulumi.StringArrayInput `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// The number of instances which should be run for the Worker Nodes.
	TargetInstanceCount pulumi.IntInput `pulumi:"targetInstanceCount"`
	// The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
	// The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId pulumi.StringPtrInput `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
	VmSize pulumi.StringInput `pulumi:"vmSize"`
}

func (StormClusterRolesWorkerNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StormClusterRolesWorkerNode)(nil)).Elem()
}

func (i StormClusterRolesWorkerNodeArgs) ToStormClusterRolesWorkerNodeOutput() StormClusterRolesWorkerNodeOutput {
	return i.ToStormClusterRolesWorkerNodeOutputWithContext(context.Background())
}

func (i StormClusterRolesWorkerNodeArgs) ToStormClusterRolesWorkerNodeOutputWithContext(ctx context.Context) StormClusterRolesWorkerNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StormClusterRolesWorkerNodeOutput)
}

type StormClusterRolesWorkerNodeOutput struct{ *pulumi.OutputState }

func (StormClusterRolesWorkerNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StormClusterRolesWorkerNode)(nil)).Elem()
}

func (o StormClusterRolesWorkerNodeOutput) ToStormClusterRolesWorkerNodeOutput() StormClusterRolesWorkerNodeOutput {
	return o
}

func (o StormClusterRolesWorkerNodeOutput) ToStormClusterRolesWorkerNodeOutputWithContext(ctx context.Context) StormClusterRolesWorkerNodeOutput {
	return o
}

// The minimum number of instances which should be run for the Worker Nodes. Changing this forces a new resource to be created.
func (o StormClusterRolesWorkerNodeOutput) MinInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StormClusterRolesWorkerNode) *int { return v.MinInstanceCount }).(pulumi.IntPtrOutput)
}

// The Password associated with the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
func (o StormClusterRolesWorkerNodeOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StormClusterRolesWorkerNode) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// A list of SSH Keys which should be used for the local administrator on the Worker Nodes. Changing this forces a new resource to be created.
func (o StormClusterRolesWorkerNodeOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StormClusterRolesWorkerNode) []string { return v.SshKeys }).(pulumi.StringArrayOutput)
}

// The ID of the Subnet within the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o StormClusterRolesWorkerNodeOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StormClusterRolesWorkerNode) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The number of instances which should be run for the Worker Nodes.
func (o StormClusterRolesWorkerNodeOutput) TargetInstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v StormClusterRolesWorkerNode) int { return v.TargetInstanceCount }).(pulumi.IntOutput)
}

// The Username of the local administrator for the Worker Nodes. Changing this forces a new resource to be created.
func (o StormClusterRolesWorkerNodeOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v StormClusterRolesWorkerNode) string { return v.Username }).(pulumi.StringOutput)
}

// The ID of the Virtual Network where the Worker Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o StormClusterRolesWorkerNodeOutput) VirtualNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StormClusterRolesWorkerNode) *string { return v.VirtualNetworkId }).(pulumi.StringPtrOutput)
}

// The Size of the Virtual Machine which should be used as the Worker Nodes. Changing this forces a new resource to be created.
func (o StormClusterRolesWorkerNodeOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v StormClusterRolesWorkerNode) string { return v.VmSize }).(pulumi.StringOutput)
}

type StormClusterRolesZookeeperNode struct {
	// The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
	Password *string `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
	SshKeys []string `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId *string `pulumi:"subnetId"`
	// The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
	// The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId *string `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
	VmSize string `pulumi:"vmSize"`
}

type StormClusterRolesZookeeperNodeInput interface {
	pulumi.Input

	ToStormClusterRolesZookeeperNodeOutput() StormClusterRolesZookeeperNodeOutput
	ToStormClusterRolesZookeeperNodeOutputWithContext(context.Context) StormClusterRolesZookeeperNodeOutput
}

type StormClusterRolesZookeeperNodeArgs struct {
	// The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
	SshKeys pulumi.StringArrayInput `pulumi:"sshKeys"`
	// The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
	// The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
	VirtualNetworkId pulumi.StringPtrInput `pulumi:"virtualNetworkId"`
	// The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
	VmSize pulumi.StringInput `pulumi:"vmSize"`
}

func (StormClusterRolesZookeeperNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StormClusterRolesZookeeperNode)(nil)).Elem()
}

func (i StormClusterRolesZookeeperNodeArgs) ToStormClusterRolesZookeeperNodeOutput() StormClusterRolesZookeeperNodeOutput {
	return i.ToStormClusterRolesZookeeperNodeOutputWithContext(context.Background())
}

func (i StormClusterRolesZookeeperNodeArgs) ToStormClusterRolesZookeeperNodeOutputWithContext(ctx context.Context) StormClusterRolesZookeeperNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StormClusterRolesZookeeperNodeOutput)
}

type StormClusterRolesZookeeperNodeOutput struct{ *pulumi.OutputState }

func (StormClusterRolesZookeeperNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StormClusterRolesZookeeperNode)(nil)).Elem()
}

func (o StormClusterRolesZookeeperNodeOutput) ToStormClusterRolesZookeeperNodeOutput() StormClusterRolesZookeeperNodeOutput {
	return o
}

func (o StormClusterRolesZookeeperNodeOutput) ToStormClusterRolesZookeeperNodeOutputWithContext(ctx context.Context) StormClusterRolesZookeeperNodeOutput {
	return o
}

// The Password associated with the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
func (o StormClusterRolesZookeeperNodeOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StormClusterRolesZookeeperNode) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// A list of SSH Keys which should be used for the local administrator on the Zookeeper Nodes. Changing this forces a new resource to be created.
func (o StormClusterRolesZookeeperNodeOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StormClusterRolesZookeeperNode) []string { return v.SshKeys }).(pulumi.StringArrayOutput)
}

// The ID of the Subnet within the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o StormClusterRolesZookeeperNodeOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StormClusterRolesZookeeperNode) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The Username of the local administrator for the Zookeeper Nodes. Changing this forces a new resource to be created.
func (o StormClusterRolesZookeeperNodeOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v StormClusterRolesZookeeperNode) string { return v.Username }).(pulumi.StringOutput)
}

// The ID of the Virtual Network where the Zookeeper Nodes should be provisioned within. Changing this forces a new resource to be created.
func (o StormClusterRolesZookeeperNodeOutput) VirtualNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StormClusterRolesZookeeperNode) *string { return v.VirtualNetworkId }).(pulumi.StringPtrOutput)
}

// The Size of the Virtual Machine which should be used as the Zookeeper Nodes. Changing this forces a new resource to be created.
func (o StormClusterRolesZookeeperNodeOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v StormClusterRolesZookeeperNode) string { return v.VmSize }).(pulumi.StringOutput)
}

type StormClusterStorageAccount struct {
	// Is this the Default Storage Account for the HDInsight Storm Cluster? Changing this forces a new resource to be created.
	IsDefault bool `pulumi:"isDefault"`
	// The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
	StorageAccountKey string `pulumi:"storageAccountKey"`
	// The ID of the Storage Container. Changing this forces a new resource to be created.
	StorageContainerId string `pulumi:"storageContainerId"`
}

type StormClusterStorageAccountInput interface {
	pulumi.Input

	ToStormClusterStorageAccountOutput() StormClusterStorageAccountOutput
	ToStormClusterStorageAccountOutputWithContext(context.Context) StormClusterStorageAccountOutput
}

type StormClusterStorageAccountArgs struct {
	// Is this the Default Storage Account for the HDInsight Storm Cluster? Changing this forces a new resource to be created.
	IsDefault pulumi.BoolInput `pulumi:"isDefault"`
	// The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
	StorageAccountKey pulumi.StringInput `pulumi:"storageAccountKey"`
	// The ID of the Storage Container. Changing this forces a new resource to be created.
	StorageContainerId pulumi.StringInput `pulumi:"storageContainerId"`
}

func (StormClusterStorageAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StormClusterStorageAccount)(nil)).Elem()
}

func (i StormClusterStorageAccountArgs) ToStormClusterStorageAccountOutput() StormClusterStorageAccountOutput {
	return i.ToStormClusterStorageAccountOutputWithContext(context.Background())
}

func (i StormClusterStorageAccountArgs) ToStormClusterStorageAccountOutputWithContext(ctx context.Context) StormClusterStorageAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StormClusterStorageAccountOutput)
}

type StormClusterStorageAccountArrayInput interface {
	pulumi.Input

	ToStormClusterStorageAccountArrayOutput() StormClusterStorageAccountArrayOutput
	ToStormClusterStorageAccountArrayOutputWithContext(context.Context) StormClusterStorageAccountArrayOutput
}

type StormClusterStorageAccountArray []StormClusterStorageAccountInput

func (StormClusterStorageAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StormClusterStorageAccount)(nil)).Elem()
}

func (i StormClusterStorageAccountArray) ToStormClusterStorageAccountArrayOutput() StormClusterStorageAccountArrayOutput {
	return i.ToStormClusterStorageAccountArrayOutputWithContext(context.Background())
}

func (i StormClusterStorageAccountArray) ToStormClusterStorageAccountArrayOutputWithContext(ctx context.Context) StormClusterStorageAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StormClusterStorageAccountArrayOutput)
}

type StormClusterStorageAccountOutput struct{ *pulumi.OutputState }

func (StormClusterStorageAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StormClusterStorageAccount)(nil)).Elem()
}

func (o StormClusterStorageAccountOutput) ToStormClusterStorageAccountOutput() StormClusterStorageAccountOutput {
	return o
}

func (o StormClusterStorageAccountOutput) ToStormClusterStorageAccountOutputWithContext(ctx context.Context) StormClusterStorageAccountOutput {
	return o
}

// Is this the Default Storage Account for the HDInsight Storm Cluster? Changing this forces a new resource to be created.
func (o StormClusterStorageAccountOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v StormClusterStorageAccount) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// The Access Key which should be used to connect to the Storage Account. Changing this forces a new resource to be created.
func (o StormClusterStorageAccountOutput) StorageAccountKey() pulumi.StringOutput {
	return o.ApplyT(func(v StormClusterStorageAccount) string { return v.StorageAccountKey }).(pulumi.StringOutput)
}

// The ID of the Storage Container. Changing this forces a new resource to be created.
func (o StormClusterStorageAccountOutput) StorageContainerId() pulumi.StringOutput {
	return o.ApplyT(func(v StormClusterStorageAccount) string { return v.StorageContainerId }).(pulumi.StringOutput)
}

type StormClusterStorageAccountArrayOutput struct{ *pulumi.OutputState }

func (StormClusterStorageAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StormClusterStorageAccount)(nil)).Elem()
}

func (o StormClusterStorageAccountArrayOutput) ToStormClusterStorageAccountArrayOutput() StormClusterStorageAccountArrayOutput {
	return o
}

func (o StormClusterStorageAccountArrayOutput) ToStormClusterStorageAccountArrayOutputWithContext(ctx context.Context) StormClusterStorageAccountArrayOutput {
	return o
}

func (o StormClusterStorageAccountArrayOutput) Index(i pulumi.IntInput) StormClusterStorageAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StormClusterStorageAccount {
		return vs[0].([]StormClusterStorageAccount)[vs[1].(int)]
	}).(StormClusterStorageAccountOutput)
}

type GetClusterGateway struct {
	// Is the Ambari Portal enabled?
	Enabled bool `pulumi:"enabled"`
	// The password used for the Ambari Portal.
	Password string `pulumi:"password"`
	// The username used for the Ambari Portal.
	Username string `pulumi:"username"`
}

type GetClusterGatewayInput interface {
	pulumi.Input

	ToGetClusterGatewayOutput() GetClusterGatewayOutput
	ToGetClusterGatewayOutputWithContext(context.Context) GetClusterGatewayOutput
}

type GetClusterGatewayArgs struct {
	// Is the Ambari Portal enabled?
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The password used for the Ambari Portal.
	Password pulumi.StringInput `pulumi:"password"`
	// The username used for the Ambari Portal.
	Username pulumi.StringInput `pulumi:"username"`
}

func (GetClusterGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterGateway)(nil)).Elem()
}

func (i GetClusterGatewayArgs) ToGetClusterGatewayOutput() GetClusterGatewayOutput {
	return i.ToGetClusterGatewayOutputWithContext(context.Background())
}

func (i GetClusterGatewayArgs) ToGetClusterGatewayOutputWithContext(ctx context.Context) GetClusterGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterGatewayOutput)
}

type GetClusterGatewayArrayInput interface {
	pulumi.Input

	ToGetClusterGatewayArrayOutput() GetClusterGatewayArrayOutput
	ToGetClusterGatewayArrayOutputWithContext(context.Context) GetClusterGatewayArrayOutput
}

type GetClusterGatewayArray []GetClusterGatewayInput

func (GetClusterGatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterGateway)(nil)).Elem()
}

func (i GetClusterGatewayArray) ToGetClusterGatewayArrayOutput() GetClusterGatewayArrayOutput {
	return i.ToGetClusterGatewayArrayOutputWithContext(context.Background())
}

func (i GetClusterGatewayArray) ToGetClusterGatewayArrayOutputWithContext(ctx context.Context) GetClusterGatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterGatewayArrayOutput)
}

type GetClusterGatewayOutput struct{ *pulumi.OutputState }

func (GetClusterGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterGateway)(nil)).Elem()
}

func (o GetClusterGatewayOutput) ToGetClusterGatewayOutput() GetClusterGatewayOutput {
	return o
}

func (o GetClusterGatewayOutput) ToGetClusterGatewayOutputWithContext(ctx context.Context) GetClusterGatewayOutput {
	return o
}

// Is the Ambari Portal enabled?
func (o GetClusterGatewayOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetClusterGateway) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The password used for the Ambari Portal.
func (o GetClusterGatewayOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterGateway) string { return v.Password }).(pulumi.StringOutput)
}

// The username used for the Ambari Portal.
func (o GetClusterGatewayOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterGateway) string { return v.Username }).(pulumi.StringOutput)
}

type GetClusterGatewayArrayOutput struct{ *pulumi.OutputState }

func (GetClusterGatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterGateway)(nil)).Elem()
}

func (o GetClusterGatewayArrayOutput) ToGetClusterGatewayArrayOutput() GetClusterGatewayArrayOutput {
	return o
}

func (o GetClusterGatewayArrayOutput) ToGetClusterGatewayArrayOutputWithContext(ctx context.Context) GetClusterGatewayArrayOutput {
	return o
}

func (o GetClusterGatewayArrayOutput) Index(i pulumi.IntInput) GetClusterGatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterGateway {
		return vs[0].([]GetClusterGateway)[vs[1].(int)]
	}).(GetClusterGatewayOutput)
}

func init() {
	pulumi.RegisterOutputType(HBaseClusterComponentVersionOutput{})
	pulumi.RegisterOutputType(HBaseClusterComponentVersionPtrOutput{})
	pulumi.RegisterOutputType(HBaseClusterGatewayOutput{})
	pulumi.RegisterOutputType(HBaseClusterGatewayPtrOutput{})
	pulumi.RegisterOutputType(HBaseClusterRolesOutput{})
	pulumi.RegisterOutputType(HBaseClusterRolesPtrOutput{})
	pulumi.RegisterOutputType(HBaseClusterRolesHeadNodeOutput{})
	pulumi.RegisterOutputType(HBaseClusterRolesWorkerNodeOutput{})
	pulumi.RegisterOutputType(HBaseClusterRolesZookeeperNodeOutput{})
	pulumi.RegisterOutputType(HBaseClusterStorageAccountOutput{})
	pulumi.RegisterOutputType(HBaseClusterStorageAccountArrayOutput{})
	pulumi.RegisterOutputType(HBaseClusterStorageAccountGen2Output{})
	pulumi.RegisterOutputType(HBaseClusterStorageAccountGen2PtrOutput{})
	pulumi.RegisterOutputType(HadoopClusterComponentVersionOutput{})
	pulumi.RegisterOutputType(HadoopClusterComponentVersionPtrOutput{})
	pulumi.RegisterOutputType(HadoopClusterGatewayOutput{})
	pulumi.RegisterOutputType(HadoopClusterGatewayPtrOutput{})
	pulumi.RegisterOutputType(HadoopClusterRolesOutput{})
	pulumi.RegisterOutputType(HadoopClusterRolesPtrOutput{})
	pulumi.RegisterOutputType(HadoopClusterRolesEdgeNodeOutput{})
	pulumi.RegisterOutputType(HadoopClusterRolesEdgeNodePtrOutput{})
	pulumi.RegisterOutputType(HadoopClusterRolesEdgeNodeInstallScriptActionOutput{})
	pulumi.RegisterOutputType(HadoopClusterRolesEdgeNodeInstallScriptActionArrayOutput{})
	pulumi.RegisterOutputType(HadoopClusterRolesHeadNodeOutput{})
	pulumi.RegisterOutputType(HadoopClusterRolesWorkerNodeOutput{})
	pulumi.RegisterOutputType(HadoopClusterRolesZookeeperNodeOutput{})
	pulumi.RegisterOutputType(HadoopClusterStorageAccountOutput{})
	pulumi.RegisterOutputType(HadoopClusterStorageAccountArrayOutput{})
	pulumi.RegisterOutputType(HadoopClusterStorageAccountGen2Output{})
	pulumi.RegisterOutputType(HadoopClusterStorageAccountGen2PtrOutput{})
	pulumi.RegisterOutputType(InteractiveQueryClusterComponentVersionOutput{})
	pulumi.RegisterOutputType(InteractiveQueryClusterComponentVersionPtrOutput{})
	pulumi.RegisterOutputType(InteractiveQueryClusterGatewayOutput{})
	pulumi.RegisterOutputType(InteractiveQueryClusterGatewayPtrOutput{})
	pulumi.RegisterOutputType(InteractiveQueryClusterRolesOutput{})
	pulumi.RegisterOutputType(InteractiveQueryClusterRolesPtrOutput{})
	pulumi.RegisterOutputType(InteractiveQueryClusterRolesHeadNodeOutput{})
	pulumi.RegisterOutputType(InteractiveQueryClusterRolesWorkerNodeOutput{})
	pulumi.RegisterOutputType(InteractiveQueryClusterRolesZookeeperNodeOutput{})
	pulumi.RegisterOutputType(InteractiveQueryClusterStorageAccountOutput{})
	pulumi.RegisterOutputType(InteractiveQueryClusterStorageAccountArrayOutput{})
	pulumi.RegisterOutputType(InteractiveQueryClusterStorageAccountGen2Output{})
	pulumi.RegisterOutputType(InteractiveQueryClusterStorageAccountGen2PtrOutput{})
	pulumi.RegisterOutputType(KafkaClusterComponentVersionOutput{})
	pulumi.RegisterOutputType(KafkaClusterComponentVersionPtrOutput{})
	pulumi.RegisterOutputType(KafkaClusterGatewayOutput{})
	pulumi.RegisterOutputType(KafkaClusterGatewayPtrOutput{})
	pulumi.RegisterOutputType(KafkaClusterRolesOutput{})
	pulumi.RegisterOutputType(KafkaClusterRolesPtrOutput{})
	pulumi.RegisterOutputType(KafkaClusterRolesHeadNodeOutput{})
	pulumi.RegisterOutputType(KafkaClusterRolesWorkerNodeOutput{})
	pulumi.RegisterOutputType(KafkaClusterRolesZookeeperNodeOutput{})
	pulumi.RegisterOutputType(KafkaClusterStorageAccountOutput{})
	pulumi.RegisterOutputType(KafkaClusterStorageAccountArrayOutput{})
	pulumi.RegisterOutputType(KafkaClusterStorageAccountGen2Output{})
	pulumi.RegisterOutputType(KafkaClusterStorageAccountGen2PtrOutput{})
	pulumi.RegisterOutputType(MLServicesClusterGatewayOutput{})
	pulumi.RegisterOutputType(MLServicesClusterGatewayPtrOutput{})
	pulumi.RegisterOutputType(MLServicesClusterRolesOutput{})
	pulumi.RegisterOutputType(MLServicesClusterRolesPtrOutput{})
	pulumi.RegisterOutputType(MLServicesClusterRolesEdgeNodeOutput{})
	pulumi.RegisterOutputType(MLServicesClusterRolesHeadNodeOutput{})
	pulumi.RegisterOutputType(MLServicesClusterRolesWorkerNodeOutput{})
	pulumi.RegisterOutputType(MLServicesClusterRolesZookeeperNodeOutput{})
	pulumi.RegisterOutputType(MLServicesClusterStorageAccountOutput{})
	pulumi.RegisterOutputType(MLServicesClusterStorageAccountArrayOutput{})
	pulumi.RegisterOutputType(RServerClusterGatewayOutput{})
	pulumi.RegisterOutputType(RServerClusterGatewayPtrOutput{})
	pulumi.RegisterOutputType(RServerClusterRolesOutput{})
	pulumi.RegisterOutputType(RServerClusterRolesPtrOutput{})
	pulumi.RegisterOutputType(RServerClusterRolesEdgeNodeOutput{})
	pulumi.RegisterOutputType(RServerClusterRolesHeadNodeOutput{})
	pulumi.RegisterOutputType(RServerClusterRolesWorkerNodeOutput{})
	pulumi.RegisterOutputType(RServerClusterRolesZookeeperNodeOutput{})
	pulumi.RegisterOutputType(RServerClusterStorageAccountOutput{})
	pulumi.RegisterOutputType(RServerClusterStorageAccountArrayOutput{})
	pulumi.RegisterOutputType(SparkClusterComponentVersionOutput{})
	pulumi.RegisterOutputType(SparkClusterComponentVersionPtrOutput{})
	pulumi.RegisterOutputType(SparkClusterGatewayOutput{})
	pulumi.RegisterOutputType(SparkClusterGatewayPtrOutput{})
	pulumi.RegisterOutputType(SparkClusterRolesOutput{})
	pulumi.RegisterOutputType(SparkClusterRolesPtrOutput{})
	pulumi.RegisterOutputType(SparkClusterRolesHeadNodeOutput{})
	pulumi.RegisterOutputType(SparkClusterRolesWorkerNodeOutput{})
	pulumi.RegisterOutputType(SparkClusterRolesZookeeperNodeOutput{})
	pulumi.RegisterOutputType(SparkClusterStorageAccountOutput{})
	pulumi.RegisterOutputType(SparkClusterStorageAccountArrayOutput{})
	pulumi.RegisterOutputType(SparkClusterStorageAccountGen2Output{})
	pulumi.RegisterOutputType(SparkClusterStorageAccountGen2PtrOutput{})
	pulumi.RegisterOutputType(StormClusterComponentVersionOutput{})
	pulumi.RegisterOutputType(StormClusterComponentVersionPtrOutput{})
	pulumi.RegisterOutputType(StormClusterGatewayOutput{})
	pulumi.RegisterOutputType(StormClusterGatewayPtrOutput{})
	pulumi.RegisterOutputType(StormClusterRolesOutput{})
	pulumi.RegisterOutputType(StormClusterRolesPtrOutput{})
	pulumi.RegisterOutputType(StormClusterRolesHeadNodeOutput{})
	pulumi.RegisterOutputType(StormClusterRolesWorkerNodeOutput{})
	pulumi.RegisterOutputType(StormClusterRolesZookeeperNodeOutput{})
	pulumi.RegisterOutputType(StormClusterStorageAccountOutput{})
	pulumi.RegisterOutputType(StormClusterStorageAccountArrayOutput{})
	pulumi.RegisterOutputType(GetClusterGatewayOutput{})
	pulumi.RegisterOutputType(GetClusterGatewayArrayOutput{})
}
