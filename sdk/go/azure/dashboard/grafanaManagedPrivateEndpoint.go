// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dashboard

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Dashboard Grafana Managed Private Endpoint.
//
// > **NOTE:** This resource will _not_ approve the managed private endpoint connection on the linked resource. This will need to be done manually via Azure CLI, PowerShell, or AzAPI resources. See here for an example that uses AzAPI.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/dashboard"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/monitoring"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resources"),
//				Location: pulumi.String("Canada Central"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleWorkspace, err := monitoring.NewWorkspace(ctx, "example", &monitoring.WorkspaceArgs{
//				Name:                       pulumi.String("example-mamw"),
//				ResourceGroupName:          example.Name,
//				Location:                   example.Location,
//				PublicNetworkAccessEnabled: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			exampleGrafana, err := dashboard.NewGrafana(ctx, "example", &dashboard.GrafanaArgs{
//				Name:                       pulumi.String("example-dg"),
//				ResourceGroupName:          example.Name,
//				Location:                   example.Location,
//				GrafanaMajorVersion:        pulumi.String("11"),
//				PublicNetworkAccessEnabled: pulumi.Bool(false),
//				AzureMonitorWorkspaceIntegrations: dashboard.GrafanaAzureMonitorWorkspaceIntegrationArray{
//					&dashboard.GrafanaAzureMonitorWorkspaceIntegrationArgs{
//						ResourceId: exampleWorkspace.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dashboard.NewGrafanaManagedPrivateEndpoint(ctx, "example", &dashboard.GrafanaManagedPrivateEndpointArgs{
//				GrafanaId:             exampleGrafana.ID(),
//				Name:                  pulumi.String("example-mpe"),
//				Location:              exampleGrafana.Location,
//				PrivateLinkResourceId: exampleWorkspace.ID(),
//				GroupIds: pulumi.StringArray{
//					pulumi.String("prometheusMetrics"),
//				},
//				PrivateLinkResourceRegion: exampleGrafana.Location,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Dashboard Grafana Managed Private Endpoint Examples can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:dashboard/grafanaManagedPrivateEndpoint:GrafanaManagedPrivateEndpoint example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Dashboard/grafana/workspace1/managedPrivateEndpoints/endpoint1
// ```
type GrafanaManagedPrivateEndpoint struct {
	pulumi.CustomResourceState

	// The id of the associated managed Grafana. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
	GrafanaId pulumi.StringOutput `pulumi:"grafanaId"`
	// Specifies a list of private link group IDs. The value of this will depend on the private link resource to which you are connecting. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
	GroupIds pulumi.StringArrayOutput `pulumi:"groupIds"`
	// The Azure Region where the Dashboard Grafana Managed Private Endpoint should exist. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name which should be used for this Dashboard Grafana Managed Private Endpoint. Must be between 2 and 20 alphanumeric characters or dashes, must begin with letter and end with a letter or number. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the resource to which this Dashboard Grafana Managed Private Endpoint will connect. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
	PrivateLinkResourceId pulumi.StringOutput `pulumi:"privateLinkResourceId"`
	// The region in which to create the private link. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
	PrivateLinkResourceRegion pulumi.StringPtrOutput `pulumi:"privateLinkResourceRegion"`
	// A message to provide in the request which will be seen by approvers.
	RequestMessage pulumi.StringPtrOutput `pulumi:"requestMessage"`
	// A mapping of tags which should be assigned to the Dashboard Grafana Managed Private Endpoint.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewGrafanaManagedPrivateEndpoint registers a new resource with the given unique name, arguments, and options.
func NewGrafanaManagedPrivateEndpoint(ctx *pulumi.Context,
	name string, args *GrafanaManagedPrivateEndpointArgs, opts ...pulumi.ResourceOption) (*GrafanaManagedPrivateEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GrafanaId == nil {
		return nil, errors.New("invalid value for required argument 'GrafanaId'")
	}
	if args.PrivateLinkResourceId == nil {
		return nil, errors.New("invalid value for required argument 'PrivateLinkResourceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GrafanaManagedPrivateEndpoint
	err := ctx.RegisterResource("azure:dashboard/grafanaManagedPrivateEndpoint:GrafanaManagedPrivateEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGrafanaManagedPrivateEndpoint gets an existing GrafanaManagedPrivateEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGrafanaManagedPrivateEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GrafanaManagedPrivateEndpointState, opts ...pulumi.ResourceOption) (*GrafanaManagedPrivateEndpoint, error) {
	var resource GrafanaManagedPrivateEndpoint
	err := ctx.ReadResource("azure:dashboard/grafanaManagedPrivateEndpoint:GrafanaManagedPrivateEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GrafanaManagedPrivateEndpoint resources.
type grafanaManagedPrivateEndpointState struct {
	// The id of the associated managed Grafana. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
	GrafanaId *string `pulumi:"grafanaId"`
	// Specifies a list of private link group IDs. The value of this will depend on the private link resource to which you are connecting. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
	GroupIds []string `pulumi:"groupIds"`
	// The Azure Region where the Dashboard Grafana Managed Private Endpoint should exist. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Dashboard Grafana Managed Private Endpoint. Must be between 2 and 20 alphanumeric characters or dashes, must begin with letter and end with a letter or number. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
	Name *string `pulumi:"name"`
	// The ID of the resource to which this Dashboard Grafana Managed Private Endpoint will connect. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
	PrivateLinkResourceId *string `pulumi:"privateLinkResourceId"`
	// The region in which to create the private link. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
	PrivateLinkResourceRegion *string `pulumi:"privateLinkResourceRegion"`
	// A message to provide in the request which will be seen by approvers.
	RequestMessage *string `pulumi:"requestMessage"`
	// A mapping of tags which should be assigned to the Dashboard Grafana Managed Private Endpoint.
	Tags map[string]string `pulumi:"tags"`
}

type GrafanaManagedPrivateEndpointState struct {
	// The id of the associated managed Grafana. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
	GrafanaId pulumi.StringPtrInput
	// Specifies a list of private link group IDs. The value of this will depend on the private link resource to which you are connecting. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
	GroupIds pulumi.StringArrayInput
	// The Azure Region where the Dashboard Grafana Managed Private Endpoint should exist. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Dashboard Grafana Managed Private Endpoint. Must be between 2 and 20 alphanumeric characters or dashes, must begin with letter and end with a letter or number. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
	Name pulumi.StringPtrInput
	// The ID of the resource to which this Dashboard Grafana Managed Private Endpoint will connect. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
	PrivateLinkResourceId pulumi.StringPtrInput
	// The region in which to create the private link. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
	PrivateLinkResourceRegion pulumi.StringPtrInput
	// A message to provide in the request which will be seen by approvers.
	RequestMessage pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Dashboard Grafana Managed Private Endpoint.
	Tags pulumi.StringMapInput
}

func (GrafanaManagedPrivateEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*grafanaManagedPrivateEndpointState)(nil)).Elem()
}

type grafanaManagedPrivateEndpointArgs struct {
	// The id of the associated managed Grafana. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
	GrafanaId string `pulumi:"grafanaId"`
	// Specifies a list of private link group IDs. The value of this will depend on the private link resource to which you are connecting. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
	GroupIds []string `pulumi:"groupIds"`
	// The Azure Region where the Dashboard Grafana Managed Private Endpoint should exist. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Dashboard Grafana Managed Private Endpoint. Must be between 2 and 20 alphanumeric characters or dashes, must begin with letter and end with a letter or number. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
	Name *string `pulumi:"name"`
	// The ID of the resource to which this Dashboard Grafana Managed Private Endpoint will connect. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
	PrivateLinkResourceId string `pulumi:"privateLinkResourceId"`
	// The region in which to create the private link. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
	PrivateLinkResourceRegion *string `pulumi:"privateLinkResourceRegion"`
	// A message to provide in the request which will be seen by approvers.
	RequestMessage *string `pulumi:"requestMessage"`
	// A mapping of tags which should be assigned to the Dashboard Grafana Managed Private Endpoint.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a GrafanaManagedPrivateEndpoint resource.
type GrafanaManagedPrivateEndpointArgs struct {
	// The id of the associated managed Grafana. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
	GrafanaId pulumi.StringInput
	// Specifies a list of private link group IDs. The value of this will depend on the private link resource to which you are connecting. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
	GroupIds pulumi.StringArrayInput
	// The Azure Region where the Dashboard Grafana Managed Private Endpoint should exist. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Dashboard Grafana Managed Private Endpoint. Must be between 2 and 20 alphanumeric characters or dashes, must begin with letter and end with a letter or number. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
	Name pulumi.StringPtrInput
	// The ID of the resource to which this Dashboard Grafana Managed Private Endpoint will connect. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
	PrivateLinkResourceId pulumi.StringInput
	// The region in which to create the private link. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
	PrivateLinkResourceRegion pulumi.StringPtrInput
	// A message to provide in the request which will be seen by approvers.
	RequestMessage pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Dashboard Grafana Managed Private Endpoint.
	Tags pulumi.StringMapInput
}

func (GrafanaManagedPrivateEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*grafanaManagedPrivateEndpointArgs)(nil)).Elem()
}

type GrafanaManagedPrivateEndpointInput interface {
	pulumi.Input

	ToGrafanaManagedPrivateEndpointOutput() GrafanaManagedPrivateEndpointOutput
	ToGrafanaManagedPrivateEndpointOutputWithContext(ctx context.Context) GrafanaManagedPrivateEndpointOutput
}

func (*GrafanaManagedPrivateEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafanaManagedPrivateEndpoint)(nil)).Elem()
}

func (i *GrafanaManagedPrivateEndpoint) ToGrafanaManagedPrivateEndpointOutput() GrafanaManagedPrivateEndpointOutput {
	return i.ToGrafanaManagedPrivateEndpointOutputWithContext(context.Background())
}

func (i *GrafanaManagedPrivateEndpoint) ToGrafanaManagedPrivateEndpointOutputWithContext(ctx context.Context) GrafanaManagedPrivateEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafanaManagedPrivateEndpointOutput)
}

// GrafanaManagedPrivateEndpointArrayInput is an input type that accepts GrafanaManagedPrivateEndpointArray and GrafanaManagedPrivateEndpointArrayOutput values.
// You can construct a concrete instance of `GrafanaManagedPrivateEndpointArrayInput` via:
//
//	GrafanaManagedPrivateEndpointArray{ GrafanaManagedPrivateEndpointArgs{...} }
type GrafanaManagedPrivateEndpointArrayInput interface {
	pulumi.Input

	ToGrafanaManagedPrivateEndpointArrayOutput() GrafanaManagedPrivateEndpointArrayOutput
	ToGrafanaManagedPrivateEndpointArrayOutputWithContext(context.Context) GrafanaManagedPrivateEndpointArrayOutput
}

type GrafanaManagedPrivateEndpointArray []GrafanaManagedPrivateEndpointInput

func (GrafanaManagedPrivateEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GrafanaManagedPrivateEndpoint)(nil)).Elem()
}

func (i GrafanaManagedPrivateEndpointArray) ToGrafanaManagedPrivateEndpointArrayOutput() GrafanaManagedPrivateEndpointArrayOutput {
	return i.ToGrafanaManagedPrivateEndpointArrayOutputWithContext(context.Background())
}

func (i GrafanaManagedPrivateEndpointArray) ToGrafanaManagedPrivateEndpointArrayOutputWithContext(ctx context.Context) GrafanaManagedPrivateEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafanaManagedPrivateEndpointArrayOutput)
}

// GrafanaManagedPrivateEndpointMapInput is an input type that accepts GrafanaManagedPrivateEndpointMap and GrafanaManagedPrivateEndpointMapOutput values.
// You can construct a concrete instance of `GrafanaManagedPrivateEndpointMapInput` via:
//
//	GrafanaManagedPrivateEndpointMap{ "key": GrafanaManagedPrivateEndpointArgs{...} }
type GrafanaManagedPrivateEndpointMapInput interface {
	pulumi.Input

	ToGrafanaManagedPrivateEndpointMapOutput() GrafanaManagedPrivateEndpointMapOutput
	ToGrafanaManagedPrivateEndpointMapOutputWithContext(context.Context) GrafanaManagedPrivateEndpointMapOutput
}

type GrafanaManagedPrivateEndpointMap map[string]GrafanaManagedPrivateEndpointInput

func (GrafanaManagedPrivateEndpointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GrafanaManagedPrivateEndpoint)(nil)).Elem()
}

func (i GrafanaManagedPrivateEndpointMap) ToGrafanaManagedPrivateEndpointMapOutput() GrafanaManagedPrivateEndpointMapOutput {
	return i.ToGrafanaManagedPrivateEndpointMapOutputWithContext(context.Background())
}

func (i GrafanaManagedPrivateEndpointMap) ToGrafanaManagedPrivateEndpointMapOutputWithContext(ctx context.Context) GrafanaManagedPrivateEndpointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafanaManagedPrivateEndpointMapOutput)
}

type GrafanaManagedPrivateEndpointOutput struct{ *pulumi.OutputState }

func (GrafanaManagedPrivateEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafanaManagedPrivateEndpoint)(nil)).Elem()
}

func (o GrafanaManagedPrivateEndpointOutput) ToGrafanaManagedPrivateEndpointOutput() GrafanaManagedPrivateEndpointOutput {
	return o
}

func (o GrafanaManagedPrivateEndpointOutput) ToGrafanaManagedPrivateEndpointOutputWithContext(ctx context.Context) GrafanaManagedPrivateEndpointOutput {
	return o
}

// The id of the associated managed Grafana. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
func (o GrafanaManagedPrivateEndpointOutput) GrafanaId() pulumi.StringOutput {
	return o.ApplyT(func(v *GrafanaManagedPrivateEndpoint) pulumi.StringOutput { return v.GrafanaId }).(pulumi.StringOutput)
}

// Specifies a list of private link group IDs. The value of this will depend on the private link resource to which you are connecting. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
func (o GrafanaManagedPrivateEndpointOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GrafanaManagedPrivateEndpoint) pulumi.StringArrayOutput { return v.GroupIds }).(pulumi.StringArrayOutput)
}

// The Azure Region where the Dashboard Grafana Managed Private Endpoint should exist. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
func (o GrafanaManagedPrivateEndpointOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *GrafanaManagedPrivateEndpoint) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name which should be used for this Dashboard Grafana Managed Private Endpoint. Must be between 2 and 20 alphanumeric characters or dashes, must begin with letter and end with a letter or number. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
func (o GrafanaManagedPrivateEndpointOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GrafanaManagedPrivateEndpoint) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the resource to which this Dashboard Grafana Managed Private Endpoint will connect. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
func (o GrafanaManagedPrivateEndpointOutput) PrivateLinkResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *GrafanaManagedPrivateEndpoint) pulumi.StringOutput { return v.PrivateLinkResourceId }).(pulumi.StringOutput)
}

// The region in which to create the private link. Changing this forces a new Dashboard Grafana Managed Private Endpoint to be created.
func (o GrafanaManagedPrivateEndpointOutput) PrivateLinkResourceRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrafanaManagedPrivateEndpoint) pulumi.StringPtrOutput { return v.PrivateLinkResourceRegion }).(pulumi.StringPtrOutput)
}

// A message to provide in the request which will be seen by approvers.
func (o GrafanaManagedPrivateEndpointOutput) RequestMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrafanaManagedPrivateEndpoint) pulumi.StringPtrOutput { return v.RequestMessage }).(pulumi.StringPtrOutput)
}

// A mapping of tags which should be assigned to the Dashboard Grafana Managed Private Endpoint.
func (o GrafanaManagedPrivateEndpointOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GrafanaManagedPrivateEndpoint) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type GrafanaManagedPrivateEndpointArrayOutput struct{ *pulumi.OutputState }

func (GrafanaManagedPrivateEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GrafanaManagedPrivateEndpoint)(nil)).Elem()
}

func (o GrafanaManagedPrivateEndpointArrayOutput) ToGrafanaManagedPrivateEndpointArrayOutput() GrafanaManagedPrivateEndpointArrayOutput {
	return o
}

func (o GrafanaManagedPrivateEndpointArrayOutput) ToGrafanaManagedPrivateEndpointArrayOutputWithContext(ctx context.Context) GrafanaManagedPrivateEndpointArrayOutput {
	return o
}

func (o GrafanaManagedPrivateEndpointArrayOutput) Index(i pulumi.IntInput) GrafanaManagedPrivateEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GrafanaManagedPrivateEndpoint {
		return vs[0].([]*GrafanaManagedPrivateEndpoint)[vs[1].(int)]
	}).(GrafanaManagedPrivateEndpointOutput)
}

type GrafanaManagedPrivateEndpointMapOutput struct{ *pulumi.OutputState }

func (GrafanaManagedPrivateEndpointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GrafanaManagedPrivateEndpoint)(nil)).Elem()
}

func (o GrafanaManagedPrivateEndpointMapOutput) ToGrafanaManagedPrivateEndpointMapOutput() GrafanaManagedPrivateEndpointMapOutput {
	return o
}

func (o GrafanaManagedPrivateEndpointMapOutput) ToGrafanaManagedPrivateEndpointMapOutputWithContext(ctx context.Context) GrafanaManagedPrivateEndpointMapOutput {
	return o
}

func (o GrafanaManagedPrivateEndpointMapOutput) MapIndex(k pulumi.StringInput) GrafanaManagedPrivateEndpointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GrafanaManagedPrivateEndpoint {
		return vs[0].(map[string]*GrafanaManagedPrivateEndpoint)[vs[1].(string)]
	}).(GrafanaManagedPrivateEndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GrafanaManagedPrivateEndpointInput)(nil)).Elem(), &GrafanaManagedPrivateEndpoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafanaManagedPrivateEndpointArrayInput)(nil)).Elem(), GrafanaManagedPrivateEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafanaManagedPrivateEndpointMapInput)(nil)).Elem(), GrafanaManagedPrivateEndpointMap{})
	pulumi.RegisterOutputType(GrafanaManagedPrivateEndpointOutput{})
	pulumi.RegisterOutputType(GrafanaManagedPrivateEndpointArrayOutput{})
	pulumi.RegisterOutputType(GrafanaManagedPrivateEndpointMapOutput{})
}
