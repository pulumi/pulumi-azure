// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dashboard

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Dashboard Grafana.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/dashboard"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dashboard.NewGrafana(ctx, "exampleGrafana", &dashboard.GrafanaArgs{
//				ResourceGroupName:              exampleResourceGroup.Name,
//				Location:                       pulumi.String("West Europe"),
//				ApiKeyEnabled:                  pulumi.Bool(true),
//				DeterministicOutboundIpEnabled: pulumi.Bool(true),
//				PublicNetworkAccessEnabled:     pulumi.Bool(false),
//				Identity: &dashboard.GrafanaIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//				Tags: pulumi.StringMap{
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Dashboard Grafana can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:dashboard/grafana:Grafana example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Dashboard/grafana/workspace1
//
// ```
type Grafana struct {
	pulumi.CustomResourceState

	// Whether to enable the api key setting of the Grafana instance. Defaults to `false`.
	ApiKeyEnabled pulumi.BoolPtrOutput `pulumi:"apiKeyEnabled"`
	// Scope for dns deterministic name hash calculation. The only possible value is `TenantReuse`. Defaults to `TenantReuse`.
	AutoGeneratedDomainNameLabelScope pulumi.StringPtrOutput `pulumi:"autoGeneratedDomainNameLabelScope"`
	// A `azureMonitorWorkspaceIntegrations` block as defined below.
	AzureMonitorWorkspaceIntegrations GrafanaAzureMonitorWorkspaceIntegrationArrayOutput `pulumi:"azureMonitorWorkspaceIntegrations"`
	// Whether to enable the Grafana instance to use deterministic outbound IPs. Defaults to `false`.
	DeterministicOutboundIpEnabled pulumi.BoolPtrOutput `pulumi:"deterministicOutboundIpEnabled"`
	// The endpoint of the Grafana instance.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// Which major version of Grafana to deploy. Defaults to `9`. Possible values are `9`, `10`. Changing this forces a new resource to be created.
	GrafanaMajorVersion pulumi.StringPtrOutput `pulumi:"grafanaMajorVersion"`
	// The full Grafana software semantic version deployed.
	GrafanaVersion pulumi.StringOutput `pulumi:"grafanaVersion"`
	// An `identity` block as defined below. Changing this forces a new Dashboard Grafana to be created.
	Identity GrafanaIdentityPtrOutput `pulumi:"identity"`
	// Specifies the Azure Region where the Dashboard Grafana should exist. Changing this forces a new Dashboard Grafana to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name which should be used for this Dashboard Grafana. Changing this forces a new Dashboard Grafana to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of outbound IPs if deterministicOutboundIP is enabled.
	OutboundIps pulumi.StringArrayOutput `pulumi:"outboundIps"`
	// Whether to enable traffic over the public interface. Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrOutput `pulumi:"publicNetworkAccessEnabled"`
	// Specifies the name of the Resource Group where the Dashboard Grafana should exist. Changing this forces a new Dashboard Grafana to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The name of the SKU used for the Grafana instance. The only possible value is `Standard`. Defaults to `Standard`. Changing this forces a new Dashboard Grafana to be created.
	Sku pulumi.StringPtrOutput `pulumi:"sku"`
	// A mapping of tags which should be assigned to the Dashboard Grafana.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Whether to enable the zone redundancy setting of the Grafana instance. Defaults to `false`. Changing this forces a new Dashboard Grafana to be created.
	ZoneRedundancyEnabled pulumi.BoolPtrOutput `pulumi:"zoneRedundancyEnabled"`
}

// NewGrafana registers a new resource with the given unique name, arguments, and options.
func NewGrafana(ctx *pulumi.Context,
	name string, args *GrafanaArgs, opts ...pulumi.ResourceOption) (*Grafana, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Grafana
	err := ctx.RegisterResource("azure:dashboard/grafana:Grafana", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGrafana gets an existing Grafana resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGrafana(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GrafanaState, opts ...pulumi.ResourceOption) (*Grafana, error) {
	var resource Grafana
	err := ctx.ReadResource("azure:dashboard/grafana:Grafana", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Grafana resources.
type grafanaState struct {
	// Whether to enable the api key setting of the Grafana instance. Defaults to `false`.
	ApiKeyEnabled *bool `pulumi:"apiKeyEnabled"`
	// Scope for dns deterministic name hash calculation. The only possible value is `TenantReuse`. Defaults to `TenantReuse`.
	AutoGeneratedDomainNameLabelScope *string `pulumi:"autoGeneratedDomainNameLabelScope"`
	// A `azureMonitorWorkspaceIntegrations` block as defined below.
	AzureMonitorWorkspaceIntegrations []GrafanaAzureMonitorWorkspaceIntegration `pulumi:"azureMonitorWorkspaceIntegrations"`
	// Whether to enable the Grafana instance to use deterministic outbound IPs. Defaults to `false`.
	DeterministicOutboundIpEnabled *bool `pulumi:"deterministicOutboundIpEnabled"`
	// The endpoint of the Grafana instance.
	Endpoint *string `pulumi:"endpoint"`
	// Which major version of Grafana to deploy. Defaults to `9`. Possible values are `9`, `10`. Changing this forces a new resource to be created.
	GrafanaMajorVersion *string `pulumi:"grafanaMajorVersion"`
	// The full Grafana software semantic version deployed.
	GrafanaVersion *string `pulumi:"grafanaVersion"`
	// An `identity` block as defined below. Changing this forces a new Dashboard Grafana to be created.
	Identity *GrafanaIdentity `pulumi:"identity"`
	// Specifies the Azure Region where the Dashboard Grafana should exist. Changing this forces a new Dashboard Grafana to be created.
	Location *string `pulumi:"location"`
	// Specifies the name which should be used for this Dashboard Grafana. Changing this forces a new Dashboard Grafana to be created.
	Name *string `pulumi:"name"`
	// List of outbound IPs if deterministicOutboundIP is enabled.
	OutboundIps []string `pulumi:"outboundIps"`
	// Whether to enable traffic over the public interface. Defaults to `true`.
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// Specifies the name of the Resource Group where the Dashboard Grafana should exist. Changing this forces a new Dashboard Grafana to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The name of the SKU used for the Grafana instance. The only possible value is `Standard`. Defaults to `Standard`. Changing this forces a new Dashboard Grafana to be created.
	Sku *string `pulumi:"sku"`
	// A mapping of tags which should be assigned to the Dashboard Grafana.
	Tags map[string]string `pulumi:"tags"`
	// Whether to enable the zone redundancy setting of the Grafana instance. Defaults to `false`. Changing this forces a new Dashboard Grafana to be created.
	ZoneRedundancyEnabled *bool `pulumi:"zoneRedundancyEnabled"`
}

type GrafanaState struct {
	// Whether to enable the api key setting of the Grafana instance. Defaults to `false`.
	ApiKeyEnabled pulumi.BoolPtrInput
	// Scope for dns deterministic name hash calculation. The only possible value is `TenantReuse`. Defaults to `TenantReuse`.
	AutoGeneratedDomainNameLabelScope pulumi.StringPtrInput
	// A `azureMonitorWorkspaceIntegrations` block as defined below.
	AzureMonitorWorkspaceIntegrations GrafanaAzureMonitorWorkspaceIntegrationArrayInput
	// Whether to enable the Grafana instance to use deterministic outbound IPs. Defaults to `false`.
	DeterministicOutboundIpEnabled pulumi.BoolPtrInput
	// The endpoint of the Grafana instance.
	Endpoint pulumi.StringPtrInput
	// Which major version of Grafana to deploy. Defaults to `9`. Possible values are `9`, `10`. Changing this forces a new resource to be created.
	GrafanaMajorVersion pulumi.StringPtrInput
	// The full Grafana software semantic version deployed.
	GrafanaVersion pulumi.StringPtrInput
	// An `identity` block as defined below. Changing this forces a new Dashboard Grafana to be created.
	Identity GrafanaIdentityPtrInput
	// Specifies the Azure Region where the Dashboard Grafana should exist. Changing this forces a new Dashboard Grafana to be created.
	Location pulumi.StringPtrInput
	// Specifies the name which should be used for this Dashboard Grafana. Changing this forces a new Dashboard Grafana to be created.
	Name pulumi.StringPtrInput
	// List of outbound IPs if deterministicOutboundIP is enabled.
	OutboundIps pulumi.StringArrayInput
	// Whether to enable traffic over the public interface. Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// Specifies the name of the Resource Group where the Dashboard Grafana should exist. Changing this forces a new Dashboard Grafana to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The name of the SKU used for the Grafana instance. The only possible value is `Standard`. Defaults to `Standard`. Changing this forces a new Dashboard Grafana to be created.
	Sku pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Dashboard Grafana.
	Tags pulumi.StringMapInput
	// Whether to enable the zone redundancy setting of the Grafana instance. Defaults to `false`. Changing this forces a new Dashboard Grafana to be created.
	ZoneRedundancyEnabled pulumi.BoolPtrInput
}

func (GrafanaState) ElementType() reflect.Type {
	return reflect.TypeOf((*grafanaState)(nil)).Elem()
}

type grafanaArgs struct {
	// Whether to enable the api key setting of the Grafana instance. Defaults to `false`.
	ApiKeyEnabled *bool `pulumi:"apiKeyEnabled"`
	// Scope for dns deterministic name hash calculation. The only possible value is `TenantReuse`. Defaults to `TenantReuse`.
	AutoGeneratedDomainNameLabelScope *string `pulumi:"autoGeneratedDomainNameLabelScope"`
	// A `azureMonitorWorkspaceIntegrations` block as defined below.
	AzureMonitorWorkspaceIntegrations []GrafanaAzureMonitorWorkspaceIntegration `pulumi:"azureMonitorWorkspaceIntegrations"`
	// Whether to enable the Grafana instance to use deterministic outbound IPs. Defaults to `false`.
	DeterministicOutboundIpEnabled *bool `pulumi:"deterministicOutboundIpEnabled"`
	// Which major version of Grafana to deploy. Defaults to `9`. Possible values are `9`, `10`. Changing this forces a new resource to be created.
	GrafanaMajorVersion *string `pulumi:"grafanaMajorVersion"`
	// An `identity` block as defined below. Changing this forces a new Dashboard Grafana to be created.
	Identity *GrafanaIdentity `pulumi:"identity"`
	// Specifies the Azure Region where the Dashboard Grafana should exist. Changing this forces a new Dashboard Grafana to be created.
	Location *string `pulumi:"location"`
	// Specifies the name which should be used for this Dashboard Grafana. Changing this forces a new Dashboard Grafana to be created.
	Name *string `pulumi:"name"`
	// Whether to enable traffic over the public interface. Defaults to `true`.
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// Specifies the name of the Resource Group where the Dashboard Grafana should exist. Changing this forces a new Dashboard Grafana to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the SKU used for the Grafana instance. The only possible value is `Standard`. Defaults to `Standard`. Changing this forces a new Dashboard Grafana to be created.
	Sku *string `pulumi:"sku"`
	// A mapping of tags which should be assigned to the Dashboard Grafana.
	Tags map[string]string `pulumi:"tags"`
	// Whether to enable the zone redundancy setting of the Grafana instance. Defaults to `false`. Changing this forces a new Dashboard Grafana to be created.
	ZoneRedundancyEnabled *bool `pulumi:"zoneRedundancyEnabled"`
}

// The set of arguments for constructing a Grafana resource.
type GrafanaArgs struct {
	// Whether to enable the api key setting of the Grafana instance. Defaults to `false`.
	ApiKeyEnabled pulumi.BoolPtrInput
	// Scope for dns deterministic name hash calculation. The only possible value is `TenantReuse`. Defaults to `TenantReuse`.
	AutoGeneratedDomainNameLabelScope pulumi.StringPtrInput
	// A `azureMonitorWorkspaceIntegrations` block as defined below.
	AzureMonitorWorkspaceIntegrations GrafanaAzureMonitorWorkspaceIntegrationArrayInput
	// Whether to enable the Grafana instance to use deterministic outbound IPs. Defaults to `false`.
	DeterministicOutboundIpEnabled pulumi.BoolPtrInput
	// Which major version of Grafana to deploy. Defaults to `9`. Possible values are `9`, `10`. Changing this forces a new resource to be created.
	GrafanaMajorVersion pulumi.StringPtrInput
	// An `identity` block as defined below. Changing this forces a new Dashboard Grafana to be created.
	Identity GrafanaIdentityPtrInput
	// Specifies the Azure Region where the Dashboard Grafana should exist. Changing this forces a new Dashboard Grafana to be created.
	Location pulumi.StringPtrInput
	// Specifies the name which should be used for this Dashboard Grafana. Changing this forces a new Dashboard Grafana to be created.
	Name pulumi.StringPtrInput
	// Whether to enable traffic over the public interface. Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// Specifies the name of the Resource Group where the Dashboard Grafana should exist. Changing this forces a new Dashboard Grafana to be created.
	ResourceGroupName pulumi.StringInput
	// The name of the SKU used for the Grafana instance. The only possible value is `Standard`. Defaults to `Standard`. Changing this forces a new Dashboard Grafana to be created.
	Sku pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Dashboard Grafana.
	Tags pulumi.StringMapInput
	// Whether to enable the zone redundancy setting of the Grafana instance. Defaults to `false`. Changing this forces a new Dashboard Grafana to be created.
	ZoneRedundancyEnabled pulumi.BoolPtrInput
}

func (GrafanaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*grafanaArgs)(nil)).Elem()
}

type GrafanaInput interface {
	pulumi.Input

	ToGrafanaOutput() GrafanaOutput
	ToGrafanaOutputWithContext(ctx context.Context) GrafanaOutput
}

func (*Grafana) ElementType() reflect.Type {
	return reflect.TypeOf((**Grafana)(nil)).Elem()
}

func (i *Grafana) ToGrafanaOutput() GrafanaOutput {
	return i.ToGrafanaOutputWithContext(context.Background())
}

func (i *Grafana) ToGrafanaOutputWithContext(ctx context.Context) GrafanaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafanaOutput)
}

// GrafanaArrayInput is an input type that accepts GrafanaArray and GrafanaArrayOutput values.
// You can construct a concrete instance of `GrafanaArrayInput` via:
//
//	GrafanaArray{ GrafanaArgs{...} }
type GrafanaArrayInput interface {
	pulumi.Input

	ToGrafanaArrayOutput() GrafanaArrayOutput
	ToGrafanaArrayOutputWithContext(context.Context) GrafanaArrayOutput
}

type GrafanaArray []GrafanaInput

func (GrafanaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Grafana)(nil)).Elem()
}

func (i GrafanaArray) ToGrafanaArrayOutput() GrafanaArrayOutput {
	return i.ToGrafanaArrayOutputWithContext(context.Background())
}

func (i GrafanaArray) ToGrafanaArrayOutputWithContext(ctx context.Context) GrafanaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafanaArrayOutput)
}

// GrafanaMapInput is an input type that accepts GrafanaMap and GrafanaMapOutput values.
// You can construct a concrete instance of `GrafanaMapInput` via:
//
//	GrafanaMap{ "key": GrafanaArgs{...} }
type GrafanaMapInput interface {
	pulumi.Input

	ToGrafanaMapOutput() GrafanaMapOutput
	ToGrafanaMapOutputWithContext(context.Context) GrafanaMapOutput
}

type GrafanaMap map[string]GrafanaInput

func (GrafanaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Grafana)(nil)).Elem()
}

func (i GrafanaMap) ToGrafanaMapOutput() GrafanaMapOutput {
	return i.ToGrafanaMapOutputWithContext(context.Background())
}

func (i GrafanaMap) ToGrafanaMapOutputWithContext(ctx context.Context) GrafanaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafanaMapOutput)
}

type GrafanaOutput struct{ *pulumi.OutputState }

func (GrafanaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Grafana)(nil)).Elem()
}

func (o GrafanaOutput) ToGrafanaOutput() GrafanaOutput {
	return o
}

func (o GrafanaOutput) ToGrafanaOutputWithContext(ctx context.Context) GrafanaOutput {
	return o
}

// Whether to enable the api key setting of the Grafana instance. Defaults to `false`.
func (o GrafanaOutput) ApiKeyEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Grafana) pulumi.BoolPtrOutput { return v.ApiKeyEnabled }).(pulumi.BoolPtrOutput)
}

// Scope for dns deterministic name hash calculation. The only possible value is `TenantReuse`. Defaults to `TenantReuse`.
func (o GrafanaOutput) AutoGeneratedDomainNameLabelScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Grafana) pulumi.StringPtrOutput { return v.AutoGeneratedDomainNameLabelScope }).(pulumi.StringPtrOutput)
}

// A `azureMonitorWorkspaceIntegrations` block as defined below.
func (o GrafanaOutput) AzureMonitorWorkspaceIntegrations() GrafanaAzureMonitorWorkspaceIntegrationArrayOutput {
	return o.ApplyT(func(v *Grafana) GrafanaAzureMonitorWorkspaceIntegrationArrayOutput {
		return v.AzureMonitorWorkspaceIntegrations
	}).(GrafanaAzureMonitorWorkspaceIntegrationArrayOutput)
}

// Whether to enable the Grafana instance to use deterministic outbound IPs. Defaults to `false`.
func (o GrafanaOutput) DeterministicOutboundIpEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Grafana) pulumi.BoolPtrOutput { return v.DeterministicOutboundIpEnabled }).(pulumi.BoolPtrOutput)
}

// The endpoint of the Grafana instance.
func (o GrafanaOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Grafana) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// Which major version of Grafana to deploy. Defaults to `9`. Possible values are `9`, `10`. Changing this forces a new resource to be created.
func (o GrafanaOutput) GrafanaMajorVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Grafana) pulumi.StringPtrOutput { return v.GrafanaMajorVersion }).(pulumi.StringPtrOutput)
}

// The full Grafana software semantic version deployed.
func (o GrafanaOutput) GrafanaVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Grafana) pulumi.StringOutput { return v.GrafanaVersion }).(pulumi.StringOutput)
}

// An `identity` block as defined below. Changing this forces a new Dashboard Grafana to be created.
func (o GrafanaOutput) Identity() GrafanaIdentityPtrOutput {
	return o.ApplyT(func(v *Grafana) GrafanaIdentityPtrOutput { return v.Identity }).(GrafanaIdentityPtrOutput)
}

// Specifies the Azure Region where the Dashboard Grafana should exist. Changing this forces a new Dashboard Grafana to be created.
func (o GrafanaOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Grafana) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name which should be used for this Dashboard Grafana. Changing this forces a new Dashboard Grafana to be created.
func (o GrafanaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Grafana) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of outbound IPs if deterministicOutboundIP is enabled.
func (o GrafanaOutput) OutboundIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Grafana) pulumi.StringArrayOutput { return v.OutboundIps }).(pulumi.StringArrayOutput)
}

// Whether to enable traffic over the public interface. Defaults to `true`.
func (o GrafanaOutput) PublicNetworkAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Grafana) pulumi.BoolPtrOutput { return v.PublicNetworkAccessEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the name of the Resource Group where the Dashboard Grafana should exist. Changing this forces a new Dashboard Grafana to be created.
func (o GrafanaOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Grafana) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The name of the SKU used for the Grafana instance. The only possible value is `Standard`. Defaults to `Standard`. Changing this forces a new Dashboard Grafana to be created.
func (o GrafanaOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Grafana) pulumi.StringPtrOutput { return v.Sku }).(pulumi.StringPtrOutput)
}

// A mapping of tags which should be assigned to the Dashboard Grafana.
func (o GrafanaOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Grafana) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Whether to enable the zone redundancy setting of the Grafana instance. Defaults to `false`. Changing this forces a new Dashboard Grafana to be created.
func (o GrafanaOutput) ZoneRedundancyEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Grafana) pulumi.BoolPtrOutput { return v.ZoneRedundancyEnabled }).(pulumi.BoolPtrOutput)
}

type GrafanaArrayOutput struct{ *pulumi.OutputState }

func (GrafanaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Grafana)(nil)).Elem()
}

func (o GrafanaArrayOutput) ToGrafanaArrayOutput() GrafanaArrayOutput {
	return o
}

func (o GrafanaArrayOutput) ToGrafanaArrayOutputWithContext(ctx context.Context) GrafanaArrayOutput {
	return o
}

func (o GrafanaArrayOutput) Index(i pulumi.IntInput) GrafanaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Grafana {
		return vs[0].([]*Grafana)[vs[1].(int)]
	}).(GrafanaOutput)
}

type GrafanaMapOutput struct{ *pulumi.OutputState }

func (GrafanaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Grafana)(nil)).Elem()
}

func (o GrafanaMapOutput) ToGrafanaMapOutput() GrafanaMapOutput {
	return o
}

func (o GrafanaMapOutput) ToGrafanaMapOutputWithContext(ctx context.Context) GrafanaMapOutput {
	return o
}

func (o GrafanaMapOutput) MapIndex(k pulumi.StringInput) GrafanaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Grafana {
		return vs[0].(map[string]*Grafana)[vs[1].(string)]
	}).(GrafanaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GrafanaInput)(nil)).Elem(), &Grafana{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafanaArrayInput)(nil)).Elem(), GrafanaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafanaMapInput)(nil)).Elem(), GrafanaMap{})
	pulumi.RegisterOutputType(GrafanaOutput{})
	pulumi.RegisterOutputType(GrafanaArrayOutput{})
	pulumi.RegisterOutputType(GrafanaMapOutput{})
}
