// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dashboard

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a shared dashboard in the Azure Portal.
//
// !> **Note:** The `portal.Dashboard` resource is deprecated in version 3.0 of the AzureRM provider and will be removed in version 4.0. Please use the `portal.PortalDashboard` resource instead.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/portal"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			mdContent := "# Hello all :)"
//			if param := cfg.Get("mdContent"); param != "" {
//				mdContent = param
//			}
//			videoLink := "https://www.youtube.com/watch?v=......"
//			if param := cfg.Get("videoLink"); param != "" {
//				videoLink = param
//			}
//			current, err := core.LookupSubscription(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = portal.NewDashboard(ctx, "my-board", &portal.DashboardArgs{
//				ResourceGroupName: example.Name,
//				Location:          example.Location,
//				Tags: pulumi.StringMap{
//					"source": pulumi.String("managed"),
//				},
//				DashboardProperties: pulumi.String(fmt.Sprintf(`{
//	   "lenses": {
//	        "0": {
//	            "order": 0,
//	            "parts": {
//	                "0": {
//	                    "position": {
//	                        "x": 0,
//	                        "y": 0,
//	                        "rowSpan": 2,
//	                        "colSpan": 3
//	                    },
//	                    "metadata": {
//	                        "inputs": [],
//	                        "type": "Extension/HubsExtension/PartType/MarkdownPart",
//	                        "settings": {
//	                            "content": {
//	                                "settings": {
//	                                    "content": "%v",
//	                                    "subtitle": "",
//	                                    "title": ""
//	                                }
//	                            }
//	                        }
//	                    }
//	                },
//	                "1": {
//	                    "position": {
//	                        "x": 5,
//	                        "y": 0,
//	                        "rowSpan": 4,
//	                        "colSpan": 6
//	                    },
//	                    "metadata": {
//	                        "inputs": [],
//	                        "type": "Extension/HubsExtension/PartType/VideoPart",
//	                        "settings": {
//	                            "content": {
//	                                "settings": {
//	                                    "title": "Important Information",
//	                                    "subtitle": "",
//	                                    "src": "%v",
//	                                    "autoplay": true
//	                                }
//	                            }
//	                        }
//	                    }
//	                },
//	                "2": {
//	                    "position": {
//	                        "x": 0,
//	                        "y": 4,
//	                        "rowSpan": 4,
//	                        "colSpan": 6
//	                    },
//	                    "metadata": {
//	                        "inputs": [
//	                            {
//	                                "name": "ComponentId",
//	                                "value": "/subscriptions/%v/resourceGroups/myRG/providers/microsoft.insights/components/myWebApp"
//	                            }
//	                        ],
//	                        "type": "Extension/AppInsightsExtension/PartType/AppMapGalPt",
//	                        "settings": {},
//	                        "asset": {
//	                            "idInputName": "ComponentId",
//	                            "type": "ApplicationInsights"
//	                        }
//	                    }
//	                }
//	            }
//	        }
//	    },
//	    "metadata": {
//	        "model": {
//	            "timeRange": {
//	                "value": {
//	                    "relative": {
//	                        "duration": 24,
//	                        "timeUnit": 1
//	                    }
//	                },
//	                "type": "MsPortalFx.Composition.Configuration.ValueTypes.TimeRange"
//	            },
//	            "filterLocale": {
//	                "value": "en-us"
//	            },
//	            "filters": {
//	                "value": {
//	                    "MsPortalFx_TimeRange": {
//	                        "model": {
//	                            "format": "utc",
//	                            "granularity": "auto",
//	                            "relative": "24h"
//	                        },
//	                        "displayCache": {
//	                            "name": "UTC Time",
//	                            "value": "Past 24 hours"
//	                        },
//	                        "filteredPartIds": [
//	                            "StartboardPart-UnboundPart-ae44fef5-76b8-46b0-86f0-2b3f47bad1c7"
//	                        ]
//	                    }
//	                }
//	            }
//	        }
//	    }
//	}
//
// `, mdContent, videoLink, current.SubscriptionId)),
//
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// It is recommended to follow the steps outlined
// [here](https://docs.microsoft.com/azure/azure-portal/azure-portal-dashboards-create-programmatically#fetch-the-json-representation-of-the-dashboard) to create a Dashboard in the Portal and extract the relevant JSON to use in this resource. From the extracted JSON, the contents of the `properties: {}` object can used. Variables can be injected as needed - see above example.
//
// ## Import
//
// Dashboards can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:dashboard/dashboard:Dashboard my-board /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Portal/dashboards/00000000-0000-0000-0000-000000000000
//
// ```
//
//	Note the URI in the above sample can be found using the Resource Explorer tool in the Azure Portal.
//
// Deprecated: azure.dashboard.Dashboard has been deprecated in favor of azure.portal.Dashboard
type Dashboard struct {
	pulumi.CustomResourceState

	// JSON data representing dashboard body. See above for details on how to obtain this from the Portal.
	DashboardProperties pulumi.StringOutput `pulumi:"dashboardProperties"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name of the Shared Dashboard. Changing this forces a new resource to be created.
	//
	// > **Note**: You can specify a tag with the key `hidden-title` to set a more user-friendly title for this Dashboard.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the resource group in which to create the dashboard. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewDashboard registers a new resource with the given unique name, arguments, and options.
func NewDashboard(ctx *pulumi.Context,
	name string, args *DashboardArgs, opts ...pulumi.ResourceOption) (*Dashboard, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Dashboard
	err := ctx.RegisterResource("azure:dashboard/dashboard:Dashboard", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDashboard gets an existing Dashboard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboard(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DashboardState, opts ...pulumi.ResourceOption) (*Dashboard, error) {
	var resource Dashboard
	err := ctx.ReadResource("azure:dashboard/dashboard:Dashboard", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dashboard resources.
type dashboardState struct {
	// JSON data representing dashboard body. See above for details on how to obtain this from the Portal.
	DashboardProperties *string `pulumi:"dashboardProperties"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the Shared Dashboard. Changing this forces a new resource to be created.
	//
	// > **Note**: You can specify a tag with the key `hidden-title` to set a more user-friendly title for this Dashboard.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to create the dashboard. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

type DashboardState struct {
	// JSON data representing dashboard body. See above for details on how to obtain this from the Portal.
	DashboardProperties pulumi.StringPtrInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the Shared Dashboard. Changing this forces a new resource to be created.
	//
	// > **Note**: You can specify a tag with the key `hidden-title` to set a more user-friendly title for this Dashboard.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to create the dashboard. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
}

func (DashboardState) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardState)(nil)).Elem()
}

type dashboardArgs struct {
	// JSON data representing dashboard body. See above for details on how to obtain this from the Portal.
	DashboardProperties *string `pulumi:"dashboardProperties"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the Shared Dashboard. Changing this forces a new resource to be created.
	//
	// > **Note**: You can specify a tag with the key `hidden-title` to set a more user-friendly title for this Dashboard.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to create the dashboard. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Dashboard resource.
type DashboardArgs struct {
	// JSON data representing dashboard body. See above for details on how to obtain this from the Portal.
	DashboardProperties pulumi.StringPtrInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the Shared Dashboard. Changing this forces a new resource to be created.
	//
	// > **Note**: You can specify a tag with the key `hidden-title` to set a more user-friendly title for this Dashboard.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to create the dashboard. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
}

func (DashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardArgs)(nil)).Elem()
}

type DashboardInput interface {
	pulumi.Input

	ToDashboardOutput() DashboardOutput
	ToDashboardOutputWithContext(ctx context.Context) DashboardOutput
}

func (*Dashboard) ElementType() reflect.Type {
	return reflect.TypeOf((**Dashboard)(nil)).Elem()
}

func (i *Dashboard) ToDashboardOutput() DashboardOutput {
	return i.ToDashboardOutputWithContext(context.Background())
}

func (i *Dashboard) ToDashboardOutputWithContext(ctx context.Context) DashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardOutput)
}

// DashboardArrayInput is an input type that accepts DashboardArray and DashboardArrayOutput values.
// You can construct a concrete instance of `DashboardArrayInput` via:
//
//	DashboardArray{ DashboardArgs{...} }
type DashboardArrayInput interface {
	pulumi.Input

	ToDashboardArrayOutput() DashboardArrayOutput
	ToDashboardArrayOutputWithContext(context.Context) DashboardArrayOutput
}

type DashboardArray []DashboardInput

func (DashboardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dashboard)(nil)).Elem()
}

func (i DashboardArray) ToDashboardArrayOutput() DashboardArrayOutput {
	return i.ToDashboardArrayOutputWithContext(context.Background())
}

func (i DashboardArray) ToDashboardArrayOutputWithContext(ctx context.Context) DashboardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardArrayOutput)
}

// DashboardMapInput is an input type that accepts DashboardMap and DashboardMapOutput values.
// You can construct a concrete instance of `DashboardMapInput` via:
//
//	DashboardMap{ "key": DashboardArgs{...} }
type DashboardMapInput interface {
	pulumi.Input

	ToDashboardMapOutput() DashboardMapOutput
	ToDashboardMapOutputWithContext(context.Context) DashboardMapOutput
}

type DashboardMap map[string]DashboardInput

func (DashboardMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dashboard)(nil)).Elem()
}

func (i DashboardMap) ToDashboardMapOutput() DashboardMapOutput {
	return i.ToDashboardMapOutputWithContext(context.Background())
}

func (i DashboardMap) ToDashboardMapOutputWithContext(ctx context.Context) DashboardMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardMapOutput)
}

type DashboardOutput struct{ *pulumi.OutputState }

func (DashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Dashboard)(nil)).Elem()
}

func (o DashboardOutput) ToDashboardOutput() DashboardOutput {
	return o
}

func (o DashboardOutput) ToDashboardOutputWithContext(ctx context.Context) DashboardOutput {
	return o
}

// JSON data representing dashboard body. See above for details on how to obtain this from the Portal.
func (o DashboardOutput) DashboardProperties() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.DashboardProperties }).(pulumi.StringOutput)
}

// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
func (o DashboardOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name of the Shared Dashboard. Changing this forces a new resource to be created.
//
// > **Note**: You can specify a tag with the key `hidden-title` to set a more user-friendly title for this Dashboard.
func (o DashboardOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the resource group in which to create the dashboard. Changing this forces a new resource to be created.
func (o DashboardOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o DashboardOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type DashboardArrayOutput struct{ *pulumi.OutputState }

func (DashboardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dashboard)(nil)).Elem()
}

func (o DashboardArrayOutput) ToDashboardArrayOutput() DashboardArrayOutput {
	return o
}

func (o DashboardArrayOutput) ToDashboardArrayOutputWithContext(ctx context.Context) DashboardArrayOutput {
	return o
}

func (o DashboardArrayOutput) Index(i pulumi.IntInput) DashboardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Dashboard {
		return vs[0].([]*Dashboard)[vs[1].(int)]
	}).(DashboardOutput)
}

type DashboardMapOutput struct{ *pulumi.OutputState }

func (DashboardMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dashboard)(nil)).Elem()
}

func (o DashboardMapOutput) ToDashboardMapOutput() DashboardMapOutput {
	return o
}

func (o DashboardMapOutput) ToDashboardMapOutputWithContext(ctx context.Context) DashboardMapOutput {
	return o
}

func (o DashboardMapOutput) MapIndex(k pulumi.StringInput) DashboardOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Dashboard {
		return vs[0].(map[string]*Dashboard)[vs[1].(string)]
	}).(DashboardOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardInput)(nil)).Elem(), &Dashboard{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardArrayInput)(nil)).Elem(), DashboardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardMapInput)(nil)).Elem(), DashboardMap{})
	pulumi.RegisterOutputType(DashboardOutput{})
	pulumi.RegisterOutputType(DashboardArrayOutput{})
	pulumi.RegisterOutputType(DashboardMapOutput{})
}
