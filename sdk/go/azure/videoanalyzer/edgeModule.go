// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package videoanalyzer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a Video Analyzer Edge Module.
//
// !> Video Analyzer (Preview) is now Deprecated and will be Retired on 2022-11-30 - as such the `videoanalyzer.EdgeModule` resource is deprecated and will be removed in v4.0 of the AzureRM Provider.
//
// ## Import
//
// Video Analyzer Edge Module can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:videoanalyzer/edgeModule:EdgeModule edge /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Media/videoAnalyzers/analyzer1/edgeModules/edge1
//
// ```
type EdgeModule struct {
	pulumi.CustomResourceState

	// Specifies the name of the Video Analyzer Edge Module. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the resource group in which to create the Video Analyzer Edge Module. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The name of the Video Analyzer in which to create the Edge Module. Changing this forces a new resource to be created.
	VideoAnalyzerName pulumi.StringOutput `pulumi:"videoAnalyzerName"`
}

// NewEdgeModule registers a new resource with the given unique name, arguments, and options.
func NewEdgeModule(ctx *pulumi.Context,
	name string, args *EdgeModuleArgs, opts ...pulumi.ResourceOption) (*EdgeModule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.VideoAnalyzerName == nil {
		return nil, errors.New("invalid value for required argument 'VideoAnalyzerName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EdgeModule
	err := ctx.RegisterResource("azure:videoanalyzer/edgeModule:EdgeModule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEdgeModule gets an existing EdgeModule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEdgeModule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EdgeModuleState, opts ...pulumi.ResourceOption) (*EdgeModule, error) {
	var resource EdgeModule
	err := ctx.ReadResource("azure:videoanalyzer/edgeModule:EdgeModule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EdgeModule resources.
type edgeModuleState struct {
	// Specifies the name of the Video Analyzer Edge Module. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to create the Video Analyzer Edge Module. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The name of the Video Analyzer in which to create the Edge Module. Changing this forces a new resource to be created.
	VideoAnalyzerName *string `pulumi:"videoAnalyzerName"`
}

type EdgeModuleState struct {
	// Specifies the name of the Video Analyzer Edge Module. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to create the Video Analyzer Edge Module. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The name of the Video Analyzer in which to create the Edge Module. Changing this forces a new resource to be created.
	VideoAnalyzerName pulumi.StringPtrInput
}

func (EdgeModuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*edgeModuleState)(nil)).Elem()
}

type edgeModuleArgs struct {
	// Specifies the name of the Video Analyzer Edge Module. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to create the Video Analyzer Edge Module. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the Video Analyzer in which to create the Edge Module. Changing this forces a new resource to be created.
	VideoAnalyzerName string `pulumi:"videoAnalyzerName"`
}

// The set of arguments for constructing a EdgeModule resource.
type EdgeModuleArgs struct {
	// Specifies the name of the Video Analyzer Edge Module. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to create the Video Analyzer Edge Module. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// The name of the Video Analyzer in which to create the Edge Module. Changing this forces a new resource to be created.
	VideoAnalyzerName pulumi.StringInput
}

func (EdgeModuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*edgeModuleArgs)(nil)).Elem()
}

type EdgeModuleInput interface {
	pulumi.Input

	ToEdgeModuleOutput() EdgeModuleOutput
	ToEdgeModuleOutputWithContext(ctx context.Context) EdgeModuleOutput
}

func (*EdgeModule) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeModule)(nil)).Elem()
}

func (i *EdgeModule) ToEdgeModuleOutput() EdgeModuleOutput {
	return i.ToEdgeModuleOutputWithContext(context.Background())
}

func (i *EdgeModule) ToEdgeModuleOutputWithContext(ctx context.Context) EdgeModuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeModuleOutput)
}

func (i *EdgeModule) ToOutput(ctx context.Context) pulumix.Output[*EdgeModule] {
	return pulumix.Output[*EdgeModule]{
		OutputState: i.ToEdgeModuleOutputWithContext(ctx).OutputState,
	}
}

// EdgeModuleArrayInput is an input type that accepts EdgeModuleArray and EdgeModuleArrayOutput values.
// You can construct a concrete instance of `EdgeModuleArrayInput` via:
//
//	EdgeModuleArray{ EdgeModuleArgs{...} }
type EdgeModuleArrayInput interface {
	pulumi.Input

	ToEdgeModuleArrayOutput() EdgeModuleArrayOutput
	ToEdgeModuleArrayOutputWithContext(context.Context) EdgeModuleArrayOutput
}

type EdgeModuleArray []EdgeModuleInput

func (EdgeModuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EdgeModule)(nil)).Elem()
}

func (i EdgeModuleArray) ToEdgeModuleArrayOutput() EdgeModuleArrayOutput {
	return i.ToEdgeModuleArrayOutputWithContext(context.Background())
}

func (i EdgeModuleArray) ToEdgeModuleArrayOutputWithContext(ctx context.Context) EdgeModuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeModuleArrayOutput)
}

func (i EdgeModuleArray) ToOutput(ctx context.Context) pulumix.Output[[]*EdgeModule] {
	return pulumix.Output[[]*EdgeModule]{
		OutputState: i.ToEdgeModuleArrayOutputWithContext(ctx).OutputState,
	}
}

// EdgeModuleMapInput is an input type that accepts EdgeModuleMap and EdgeModuleMapOutput values.
// You can construct a concrete instance of `EdgeModuleMapInput` via:
//
//	EdgeModuleMap{ "key": EdgeModuleArgs{...} }
type EdgeModuleMapInput interface {
	pulumi.Input

	ToEdgeModuleMapOutput() EdgeModuleMapOutput
	ToEdgeModuleMapOutputWithContext(context.Context) EdgeModuleMapOutput
}

type EdgeModuleMap map[string]EdgeModuleInput

func (EdgeModuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EdgeModule)(nil)).Elem()
}

func (i EdgeModuleMap) ToEdgeModuleMapOutput() EdgeModuleMapOutput {
	return i.ToEdgeModuleMapOutputWithContext(context.Background())
}

func (i EdgeModuleMap) ToEdgeModuleMapOutputWithContext(ctx context.Context) EdgeModuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeModuleMapOutput)
}

func (i EdgeModuleMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*EdgeModule] {
	return pulumix.Output[map[string]*EdgeModule]{
		OutputState: i.ToEdgeModuleMapOutputWithContext(ctx).OutputState,
	}
}

type EdgeModuleOutput struct{ *pulumi.OutputState }

func (EdgeModuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeModule)(nil)).Elem()
}

func (o EdgeModuleOutput) ToEdgeModuleOutput() EdgeModuleOutput {
	return o
}

func (o EdgeModuleOutput) ToEdgeModuleOutputWithContext(ctx context.Context) EdgeModuleOutput {
	return o
}

func (o EdgeModuleOutput) ToOutput(ctx context.Context) pulumix.Output[*EdgeModule] {
	return pulumix.Output[*EdgeModule]{
		OutputState: o.OutputState,
	}
}

// Specifies the name of the Video Analyzer Edge Module. Changing this forces a new resource to be created.
func (o EdgeModuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeModule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the resource group in which to create the Video Analyzer Edge Module. Changing this forces a new resource to be created.
func (o EdgeModuleOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeModule) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The name of the Video Analyzer in which to create the Edge Module. Changing this forces a new resource to be created.
func (o EdgeModuleOutput) VideoAnalyzerName() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeModule) pulumi.StringOutput { return v.VideoAnalyzerName }).(pulumi.StringOutput)
}

type EdgeModuleArrayOutput struct{ *pulumi.OutputState }

func (EdgeModuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EdgeModule)(nil)).Elem()
}

func (o EdgeModuleArrayOutput) ToEdgeModuleArrayOutput() EdgeModuleArrayOutput {
	return o
}

func (o EdgeModuleArrayOutput) ToEdgeModuleArrayOutputWithContext(ctx context.Context) EdgeModuleArrayOutput {
	return o
}

func (o EdgeModuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*EdgeModule] {
	return pulumix.Output[[]*EdgeModule]{
		OutputState: o.OutputState,
	}
}

func (o EdgeModuleArrayOutput) Index(i pulumi.IntInput) EdgeModuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EdgeModule {
		return vs[0].([]*EdgeModule)[vs[1].(int)]
	}).(EdgeModuleOutput)
}

type EdgeModuleMapOutput struct{ *pulumi.OutputState }

func (EdgeModuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EdgeModule)(nil)).Elem()
}

func (o EdgeModuleMapOutput) ToEdgeModuleMapOutput() EdgeModuleMapOutput {
	return o
}

func (o EdgeModuleMapOutput) ToEdgeModuleMapOutputWithContext(ctx context.Context) EdgeModuleMapOutput {
	return o
}

func (o EdgeModuleMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*EdgeModule] {
	return pulumix.Output[map[string]*EdgeModule]{
		OutputState: o.OutputState,
	}
}

func (o EdgeModuleMapOutput) MapIndex(k pulumi.StringInput) EdgeModuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EdgeModule {
		return vs[0].(map[string]*EdgeModule)[vs[1].(string)]
	}).(EdgeModuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeModuleInput)(nil)).Elem(), &EdgeModule{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeModuleArrayInput)(nil)).Elem(), EdgeModuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeModuleMapInput)(nil)).Elem(), EdgeModuleMap{})
	pulumi.RegisterOutputType(EdgeModuleOutput{})
	pulumi.RegisterOutputType(EdgeModuleArrayOutput{})
	pulumi.RegisterOutputType(EdgeModuleMapOutput{})
}
