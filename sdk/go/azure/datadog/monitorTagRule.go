// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages TagRules on the datadog Monitor.
//
// ## Example Usage
// ### Adding TagRules on monitor
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/datadog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West US 2"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleMonitor, err := datadog.NewMonitor(ctx, "exampleMonitor", &datadog.MonitorArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				DatadogOrganization: &datadog.MonitorDatadogOrganizationArgs{
//					ApiKey:         pulumi.String("XXXX"),
//					ApplicationKey: pulumi.String("XXXX"),
//				},
//				User: &datadog.MonitorUserArgs{
//					Name:  pulumi.String("Example"),
//					Email: pulumi.String("abc@xyz.com"),
//				},
//				SkuName: pulumi.String("Linked"),
//				Identity: &datadog.MonitorIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = datadog.NewMonitorTagRule(ctx, "exampleMonitorTagRule", &datadog.MonitorTagRuleArgs{
//				DatadogMonitorId: exampleMonitor.ID(),
//				Logs: datadog.MonitorTagRuleLogArray{
//					&datadog.MonitorTagRuleLogArgs{
//						SubscriptionLogEnabled: pulumi.Bool(true),
//					},
//				},
//				Metrics: datadog.MonitorTagRuleMetricArray{
//					&datadog.MonitorTagRuleMetricArgs{
//						Filters: datadog.MonitorTagRuleMetricFilterArray{
//							&datadog.MonitorTagRuleMetricFilterArgs{
//								Name:   pulumi.String("Test"),
//								Value:  pulumi.String("Logs"),
//								Action: pulumi.String("Include"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Tag Rules on the Datadog Monitor can be imported using the `tag rule resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:datadog/monitorTagRule:MonitorTagRule example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Datadog/monitors/monitor1/tagRules/default
//
// ```
type MonitorTagRule struct {
	pulumi.CustomResourceState

	// The Datadog Monitor Id which should be used for this Datadog Monitor Tag Rule. Changing this forces a new Datadog Monitor Tag Rule to be created.
	DatadogMonitorId pulumi.StringOutput `pulumi:"datadogMonitorId"`
	// A `log` block as defined below.
	Logs MonitorTagRuleLogArrayOutput `pulumi:"logs"`
	// A `metric` block as defined below.
	Metrics MonitorTagRuleMetricArrayOutput `pulumi:"metrics"`
	// The name of the Tag Rules configuration. The allowed value is `default`. Defaults to `default`.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewMonitorTagRule registers a new resource with the given unique name, arguments, and options.
func NewMonitorTagRule(ctx *pulumi.Context,
	name string, args *MonitorTagRuleArgs, opts ...pulumi.ResourceOption) (*MonitorTagRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatadogMonitorId == nil {
		return nil, errors.New("invalid value for required argument 'DatadogMonitorId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MonitorTagRule
	err := ctx.RegisterResource("azure:datadog/monitorTagRule:MonitorTagRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitorTagRule gets an existing MonitorTagRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitorTagRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitorTagRuleState, opts ...pulumi.ResourceOption) (*MonitorTagRule, error) {
	var resource MonitorTagRule
	err := ctx.ReadResource("azure:datadog/monitorTagRule:MonitorTagRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MonitorTagRule resources.
type monitorTagRuleState struct {
	// The Datadog Monitor Id which should be used for this Datadog Monitor Tag Rule. Changing this forces a new Datadog Monitor Tag Rule to be created.
	DatadogMonitorId *string `pulumi:"datadogMonitorId"`
	// A `log` block as defined below.
	Logs []MonitorTagRuleLog `pulumi:"logs"`
	// A `metric` block as defined below.
	Metrics []MonitorTagRuleMetric `pulumi:"metrics"`
	// The name of the Tag Rules configuration. The allowed value is `default`. Defaults to `default`.
	Name *string `pulumi:"name"`
}

type MonitorTagRuleState struct {
	// The Datadog Monitor Id which should be used for this Datadog Monitor Tag Rule. Changing this forces a new Datadog Monitor Tag Rule to be created.
	DatadogMonitorId pulumi.StringPtrInput
	// A `log` block as defined below.
	Logs MonitorTagRuleLogArrayInput
	// A `metric` block as defined below.
	Metrics MonitorTagRuleMetricArrayInput
	// The name of the Tag Rules configuration. The allowed value is `default`. Defaults to `default`.
	Name pulumi.StringPtrInput
}

func (MonitorTagRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitorTagRuleState)(nil)).Elem()
}

type monitorTagRuleArgs struct {
	// The Datadog Monitor Id which should be used for this Datadog Monitor Tag Rule. Changing this forces a new Datadog Monitor Tag Rule to be created.
	DatadogMonitorId string `pulumi:"datadogMonitorId"`
	// A `log` block as defined below.
	Logs []MonitorTagRuleLog `pulumi:"logs"`
	// A `metric` block as defined below.
	Metrics []MonitorTagRuleMetric `pulumi:"metrics"`
	// The name of the Tag Rules configuration. The allowed value is `default`. Defaults to `default`.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a MonitorTagRule resource.
type MonitorTagRuleArgs struct {
	// The Datadog Monitor Id which should be used for this Datadog Monitor Tag Rule. Changing this forces a new Datadog Monitor Tag Rule to be created.
	DatadogMonitorId pulumi.StringInput
	// A `log` block as defined below.
	Logs MonitorTagRuleLogArrayInput
	// A `metric` block as defined below.
	Metrics MonitorTagRuleMetricArrayInput
	// The name of the Tag Rules configuration. The allowed value is `default`. Defaults to `default`.
	Name pulumi.StringPtrInput
}

func (MonitorTagRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitorTagRuleArgs)(nil)).Elem()
}

type MonitorTagRuleInput interface {
	pulumi.Input

	ToMonitorTagRuleOutput() MonitorTagRuleOutput
	ToMonitorTagRuleOutputWithContext(ctx context.Context) MonitorTagRuleOutput
}

func (*MonitorTagRule) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTagRule)(nil)).Elem()
}

func (i *MonitorTagRule) ToMonitorTagRuleOutput() MonitorTagRuleOutput {
	return i.ToMonitorTagRuleOutputWithContext(context.Background())
}

func (i *MonitorTagRule) ToMonitorTagRuleOutputWithContext(ctx context.Context) MonitorTagRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTagRuleOutput)
}

func (i *MonitorTagRule) ToOutput(ctx context.Context) pulumix.Output[*MonitorTagRule] {
	return pulumix.Output[*MonitorTagRule]{
		OutputState: i.ToMonitorTagRuleOutputWithContext(ctx).OutputState,
	}
}

// MonitorTagRuleArrayInput is an input type that accepts MonitorTagRuleArray and MonitorTagRuleArrayOutput values.
// You can construct a concrete instance of `MonitorTagRuleArrayInput` via:
//
//	MonitorTagRuleArray{ MonitorTagRuleArgs{...} }
type MonitorTagRuleArrayInput interface {
	pulumi.Input

	ToMonitorTagRuleArrayOutput() MonitorTagRuleArrayOutput
	ToMonitorTagRuleArrayOutputWithContext(context.Context) MonitorTagRuleArrayOutput
}

type MonitorTagRuleArray []MonitorTagRuleInput

func (MonitorTagRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MonitorTagRule)(nil)).Elem()
}

func (i MonitorTagRuleArray) ToMonitorTagRuleArrayOutput() MonitorTagRuleArrayOutput {
	return i.ToMonitorTagRuleArrayOutputWithContext(context.Background())
}

func (i MonitorTagRuleArray) ToMonitorTagRuleArrayOutputWithContext(ctx context.Context) MonitorTagRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTagRuleArrayOutput)
}

func (i MonitorTagRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]*MonitorTagRule] {
	return pulumix.Output[[]*MonitorTagRule]{
		OutputState: i.ToMonitorTagRuleArrayOutputWithContext(ctx).OutputState,
	}
}

// MonitorTagRuleMapInput is an input type that accepts MonitorTagRuleMap and MonitorTagRuleMapOutput values.
// You can construct a concrete instance of `MonitorTagRuleMapInput` via:
//
//	MonitorTagRuleMap{ "key": MonitorTagRuleArgs{...} }
type MonitorTagRuleMapInput interface {
	pulumi.Input

	ToMonitorTagRuleMapOutput() MonitorTagRuleMapOutput
	ToMonitorTagRuleMapOutputWithContext(context.Context) MonitorTagRuleMapOutput
}

type MonitorTagRuleMap map[string]MonitorTagRuleInput

func (MonitorTagRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MonitorTagRule)(nil)).Elem()
}

func (i MonitorTagRuleMap) ToMonitorTagRuleMapOutput() MonitorTagRuleMapOutput {
	return i.ToMonitorTagRuleMapOutputWithContext(context.Background())
}

func (i MonitorTagRuleMap) ToMonitorTagRuleMapOutputWithContext(ctx context.Context) MonitorTagRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTagRuleMapOutput)
}

func (i MonitorTagRuleMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*MonitorTagRule] {
	return pulumix.Output[map[string]*MonitorTagRule]{
		OutputState: i.ToMonitorTagRuleMapOutputWithContext(ctx).OutputState,
	}
}

type MonitorTagRuleOutput struct{ *pulumi.OutputState }

func (MonitorTagRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTagRule)(nil)).Elem()
}

func (o MonitorTagRuleOutput) ToMonitorTagRuleOutput() MonitorTagRuleOutput {
	return o
}

func (o MonitorTagRuleOutput) ToMonitorTagRuleOutputWithContext(ctx context.Context) MonitorTagRuleOutput {
	return o
}

func (o MonitorTagRuleOutput) ToOutput(ctx context.Context) pulumix.Output[*MonitorTagRule] {
	return pulumix.Output[*MonitorTagRule]{
		OutputState: o.OutputState,
	}
}

// The Datadog Monitor Id which should be used for this Datadog Monitor Tag Rule. Changing this forces a new Datadog Monitor Tag Rule to be created.
func (o MonitorTagRuleOutput) DatadogMonitorId() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitorTagRule) pulumi.StringOutput { return v.DatadogMonitorId }).(pulumi.StringOutput)
}

// A `log` block as defined below.
func (o MonitorTagRuleOutput) Logs() MonitorTagRuleLogArrayOutput {
	return o.ApplyT(func(v *MonitorTagRule) MonitorTagRuleLogArrayOutput { return v.Logs }).(MonitorTagRuleLogArrayOutput)
}

// A `metric` block as defined below.
func (o MonitorTagRuleOutput) Metrics() MonitorTagRuleMetricArrayOutput {
	return o.ApplyT(func(v *MonitorTagRule) MonitorTagRuleMetricArrayOutput { return v.Metrics }).(MonitorTagRuleMetricArrayOutput)
}

// The name of the Tag Rules configuration. The allowed value is `default`. Defaults to `default`.
func (o MonitorTagRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitorTagRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type MonitorTagRuleArrayOutput struct{ *pulumi.OutputState }

func (MonitorTagRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MonitorTagRule)(nil)).Elem()
}

func (o MonitorTagRuleArrayOutput) ToMonitorTagRuleArrayOutput() MonitorTagRuleArrayOutput {
	return o
}

func (o MonitorTagRuleArrayOutput) ToMonitorTagRuleArrayOutputWithContext(ctx context.Context) MonitorTagRuleArrayOutput {
	return o
}

func (o MonitorTagRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*MonitorTagRule] {
	return pulumix.Output[[]*MonitorTagRule]{
		OutputState: o.OutputState,
	}
}

func (o MonitorTagRuleArrayOutput) Index(i pulumi.IntInput) MonitorTagRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MonitorTagRule {
		return vs[0].([]*MonitorTagRule)[vs[1].(int)]
	}).(MonitorTagRuleOutput)
}

type MonitorTagRuleMapOutput struct{ *pulumi.OutputState }

func (MonitorTagRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MonitorTagRule)(nil)).Elem()
}

func (o MonitorTagRuleMapOutput) ToMonitorTagRuleMapOutput() MonitorTagRuleMapOutput {
	return o
}

func (o MonitorTagRuleMapOutput) ToMonitorTagRuleMapOutputWithContext(ctx context.Context) MonitorTagRuleMapOutput {
	return o
}

func (o MonitorTagRuleMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*MonitorTagRule] {
	return pulumix.Output[map[string]*MonitorTagRule]{
		OutputState: o.OutputState,
	}
}

func (o MonitorTagRuleMapOutput) MapIndex(k pulumi.StringInput) MonitorTagRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MonitorTagRule {
		return vs[0].(map[string]*MonitorTagRule)[vs[1].(string)]
	}).(MonitorTagRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTagRuleInput)(nil)).Elem(), &MonitorTagRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTagRuleArrayInput)(nil)).Elem(), MonitorTagRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTagRuleMapInput)(nil)).Elem(), MonitorTagRuleMap{})
	pulumi.RegisterOutputType(MonitorTagRuleOutput{})
	pulumi.RegisterOutputType(MonitorTagRuleArrayOutput{})
	pulumi.RegisterOutputType(MonitorTagRuleMapOutput{})
}
