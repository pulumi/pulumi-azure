// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type MonitorDatadogOrganization struct {
	// Api key associated to the Datadog organization. Changing this forces a new Datadog Monitor to be created.
	ApiKey string `pulumi:"apiKey"`
	// Application key associated to the Datadog organization. Changing this forces a new Datadog Monitor to be created.
	ApplicationKey string `pulumi:"applicationKey"`
	// The ID of the enterprise_app. Changing this forces a new resource to be created.
	EnterpriseAppId *string `pulumi:"enterpriseAppId"`
	// The ID of the Datadog Monitor.
	Id *string `pulumi:"id"`
	// The auth code used to linking to an existing Datadog organization. Changing this forces a new Datadog Monitor to be created.
	LinkingAuthCode *string `pulumi:"linkingAuthCode"`
	// The ID of the linking_client. Changing this forces a new Datadog Monitor to be created.
	LinkingClientId *string `pulumi:"linkingClientId"`
	// The name of the user that will be associated with the Datadog Monitor. Changing this forces a new Datadog Monitor to be created.
	Name *string `pulumi:"name"`
	// The redirect uri for linking. Changing this forces a new Datadog Monitor to be created.
	RedirectUri *string `pulumi:"redirectUri"`
}

// MonitorDatadogOrganizationInput is an input type that accepts MonitorDatadogOrganizationArgs and MonitorDatadogOrganizationOutput values.
// You can construct a concrete instance of `MonitorDatadogOrganizationInput` via:
//
//	MonitorDatadogOrganizationArgs{...}
type MonitorDatadogOrganizationInput interface {
	pulumi.Input

	ToMonitorDatadogOrganizationOutput() MonitorDatadogOrganizationOutput
	ToMonitorDatadogOrganizationOutputWithContext(context.Context) MonitorDatadogOrganizationOutput
}

type MonitorDatadogOrganizationArgs struct {
	// Api key associated to the Datadog organization. Changing this forces a new Datadog Monitor to be created.
	ApiKey pulumi.StringInput `pulumi:"apiKey"`
	// Application key associated to the Datadog organization. Changing this forces a new Datadog Monitor to be created.
	ApplicationKey pulumi.StringInput `pulumi:"applicationKey"`
	// The ID of the enterprise_app. Changing this forces a new resource to be created.
	EnterpriseAppId pulumi.StringPtrInput `pulumi:"enterpriseAppId"`
	// The ID of the Datadog Monitor.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The auth code used to linking to an existing Datadog organization. Changing this forces a new Datadog Monitor to be created.
	LinkingAuthCode pulumi.StringPtrInput `pulumi:"linkingAuthCode"`
	// The ID of the linking_client. Changing this forces a new Datadog Monitor to be created.
	LinkingClientId pulumi.StringPtrInput `pulumi:"linkingClientId"`
	// The name of the user that will be associated with the Datadog Monitor. Changing this forces a new Datadog Monitor to be created.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The redirect uri for linking. Changing this forces a new Datadog Monitor to be created.
	RedirectUri pulumi.StringPtrInput `pulumi:"redirectUri"`
}

func (MonitorDatadogOrganizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorDatadogOrganization)(nil)).Elem()
}

func (i MonitorDatadogOrganizationArgs) ToMonitorDatadogOrganizationOutput() MonitorDatadogOrganizationOutput {
	return i.ToMonitorDatadogOrganizationOutputWithContext(context.Background())
}

func (i MonitorDatadogOrganizationArgs) ToMonitorDatadogOrganizationOutputWithContext(ctx context.Context) MonitorDatadogOrganizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorDatadogOrganizationOutput)
}

func (i MonitorDatadogOrganizationArgs) ToMonitorDatadogOrganizationPtrOutput() MonitorDatadogOrganizationPtrOutput {
	return i.ToMonitorDatadogOrganizationPtrOutputWithContext(context.Background())
}

func (i MonitorDatadogOrganizationArgs) ToMonitorDatadogOrganizationPtrOutputWithContext(ctx context.Context) MonitorDatadogOrganizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorDatadogOrganizationOutput).ToMonitorDatadogOrganizationPtrOutputWithContext(ctx)
}

// MonitorDatadogOrganizationPtrInput is an input type that accepts MonitorDatadogOrganizationArgs, MonitorDatadogOrganizationPtr and MonitorDatadogOrganizationPtrOutput values.
// You can construct a concrete instance of `MonitorDatadogOrganizationPtrInput` via:
//
//	        MonitorDatadogOrganizationArgs{...}
//
//	or:
//
//	        nil
type MonitorDatadogOrganizationPtrInput interface {
	pulumi.Input

	ToMonitorDatadogOrganizationPtrOutput() MonitorDatadogOrganizationPtrOutput
	ToMonitorDatadogOrganizationPtrOutputWithContext(context.Context) MonitorDatadogOrganizationPtrOutput
}

type monitorDatadogOrganizationPtrType MonitorDatadogOrganizationArgs

func MonitorDatadogOrganizationPtr(v *MonitorDatadogOrganizationArgs) MonitorDatadogOrganizationPtrInput {
	return (*monitorDatadogOrganizationPtrType)(v)
}

func (*monitorDatadogOrganizationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorDatadogOrganization)(nil)).Elem()
}

func (i *monitorDatadogOrganizationPtrType) ToMonitorDatadogOrganizationPtrOutput() MonitorDatadogOrganizationPtrOutput {
	return i.ToMonitorDatadogOrganizationPtrOutputWithContext(context.Background())
}

func (i *monitorDatadogOrganizationPtrType) ToMonitorDatadogOrganizationPtrOutputWithContext(ctx context.Context) MonitorDatadogOrganizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorDatadogOrganizationPtrOutput)
}

type MonitorDatadogOrganizationOutput struct{ *pulumi.OutputState }

func (MonitorDatadogOrganizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorDatadogOrganization)(nil)).Elem()
}

func (o MonitorDatadogOrganizationOutput) ToMonitorDatadogOrganizationOutput() MonitorDatadogOrganizationOutput {
	return o
}

func (o MonitorDatadogOrganizationOutput) ToMonitorDatadogOrganizationOutputWithContext(ctx context.Context) MonitorDatadogOrganizationOutput {
	return o
}

func (o MonitorDatadogOrganizationOutput) ToMonitorDatadogOrganizationPtrOutput() MonitorDatadogOrganizationPtrOutput {
	return o.ToMonitorDatadogOrganizationPtrOutputWithContext(context.Background())
}

func (o MonitorDatadogOrganizationOutput) ToMonitorDatadogOrganizationPtrOutputWithContext(ctx context.Context) MonitorDatadogOrganizationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorDatadogOrganization) *MonitorDatadogOrganization {
		return &v
	}).(MonitorDatadogOrganizationPtrOutput)
}

// Api key associated to the Datadog organization. Changing this forces a new Datadog Monitor to be created.
func (o MonitorDatadogOrganizationOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorDatadogOrganization) string { return v.ApiKey }).(pulumi.StringOutput)
}

// Application key associated to the Datadog organization. Changing this forces a new Datadog Monitor to be created.
func (o MonitorDatadogOrganizationOutput) ApplicationKey() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorDatadogOrganization) string { return v.ApplicationKey }).(pulumi.StringOutput)
}

// The ID of the enterprise_app. Changing this forces a new resource to be created.
func (o MonitorDatadogOrganizationOutput) EnterpriseAppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorDatadogOrganization) *string { return v.EnterpriseAppId }).(pulumi.StringPtrOutput)
}

// The ID of the Datadog Monitor.
func (o MonitorDatadogOrganizationOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorDatadogOrganization) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The auth code used to linking to an existing Datadog organization. Changing this forces a new Datadog Monitor to be created.
func (o MonitorDatadogOrganizationOutput) LinkingAuthCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorDatadogOrganization) *string { return v.LinkingAuthCode }).(pulumi.StringPtrOutput)
}

// The ID of the linking_client. Changing this forces a new Datadog Monitor to be created.
func (o MonitorDatadogOrganizationOutput) LinkingClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorDatadogOrganization) *string { return v.LinkingClientId }).(pulumi.StringPtrOutput)
}

// The name of the user that will be associated with the Datadog Monitor. Changing this forces a new Datadog Monitor to be created.
func (o MonitorDatadogOrganizationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorDatadogOrganization) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The redirect uri for linking. Changing this forces a new Datadog Monitor to be created.
func (o MonitorDatadogOrganizationOutput) RedirectUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorDatadogOrganization) *string { return v.RedirectUri }).(pulumi.StringPtrOutput)
}

type MonitorDatadogOrganizationPtrOutput struct{ *pulumi.OutputState }

func (MonitorDatadogOrganizationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorDatadogOrganization)(nil)).Elem()
}

func (o MonitorDatadogOrganizationPtrOutput) ToMonitorDatadogOrganizationPtrOutput() MonitorDatadogOrganizationPtrOutput {
	return o
}

func (o MonitorDatadogOrganizationPtrOutput) ToMonitorDatadogOrganizationPtrOutputWithContext(ctx context.Context) MonitorDatadogOrganizationPtrOutput {
	return o
}

func (o MonitorDatadogOrganizationPtrOutput) Elem() MonitorDatadogOrganizationOutput {
	return o.ApplyT(func(v *MonitorDatadogOrganization) MonitorDatadogOrganization {
		if v != nil {
			return *v
		}
		var ret MonitorDatadogOrganization
		return ret
	}).(MonitorDatadogOrganizationOutput)
}

// Api key associated to the Datadog organization. Changing this forces a new Datadog Monitor to be created.
func (o MonitorDatadogOrganizationPtrOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorDatadogOrganization) *string {
		if v == nil {
			return nil
		}
		return &v.ApiKey
	}).(pulumi.StringPtrOutput)
}

// Application key associated to the Datadog organization. Changing this forces a new Datadog Monitor to be created.
func (o MonitorDatadogOrganizationPtrOutput) ApplicationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorDatadogOrganization) *string {
		if v == nil {
			return nil
		}
		return &v.ApplicationKey
	}).(pulumi.StringPtrOutput)
}

// The ID of the enterprise_app. Changing this forces a new resource to be created.
func (o MonitorDatadogOrganizationPtrOutput) EnterpriseAppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorDatadogOrganization) *string {
		if v == nil {
			return nil
		}
		return v.EnterpriseAppId
	}).(pulumi.StringPtrOutput)
}

// The ID of the Datadog Monitor.
func (o MonitorDatadogOrganizationPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorDatadogOrganization) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The auth code used to linking to an existing Datadog organization. Changing this forces a new Datadog Monitor to be created.
func (o MonitorDatadogOrganizationPtrOutput) LinkingAuthCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorDatadogOrganization) *string {
		if v == nil {
			return nil
		}
		return v.LinkingAuthCode
	}).(pulumi.StringPtrOutput)
}

// The ID of the linking_client. Changing this forces a new Datadog Monitor to be created.
func (o MonitorDatadogOrganizationPtrOutput) LinkingClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorDatadogOrganization) *string {
		if v == nil {
			return nil
		}
		return v.LinkingClientId
	}).(pulumi.StringPtrOutput)
}

// The name of the user that will be associated with the Datadog Monitor. Changing this forces a new Datadog Monitor to be created.
func (o MonitorDatadogOrganizationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorDatadogOrganization) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The redirect uri for linking. Changing this forces a new Datadog Monitor to be created.
func (o MonitorDatadogOrganizationPtrOutput) RedirectUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorDatadogOrganization) *string {
		if v == nil {
			return nil
		}
		return v.RedirectUri
	}).(pulumi.StringPtrOutput)
}

type MonitorIdentity struct {
	// The Principal ID for the Service Principal associated with the Identity of this Datadog Monitor.
	PrincipalId *string `pulumi:"principalId"`
	// The Tenant ID for the Service Principal associated with the Identity of this Datadog Monitor.
	TenantId *string `pulumi:"tenantId"`
	// Specifies the identity type of the Datadog Monitor. At this time the only allowed value is `SystemAssigned`.
	//
	// > **NOTE:** The assigned `principalId` and `tenantId` can be retrieved after the identity `type` has been set to `SystemAssigned` and the Datadog Monitor has been created. More details are available below.
	Type string `pulumi:"type"`
}

// MonitorIdentityInput is an input type that accepts MonitorIdentityArgs and MonitorIdentityOutput values.
// You can construct a concrete instance of `MonitorIdentityInput` via:
//
//	MonitorIdentityArgs{...}
type MonitorIdentityInput interface {
	pulumi.Input

	ToMonitorIdentityOutput() MonitorIdentityOutput
	ToMonitorIdentityOutputWithContext(context.Context) MonitorIdentityOutput
}

type MonitorIdentityArgs struct {
	// The Principal ID for the Service Principal associated with the Identity of this Datadog Monitor.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The Tenant ID for the Service Principal associated with the Identity of this Datadog Monitor.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// Specifies the identity type of the Datadog Monitor. At this time the only allowed value is `SystemAssigned`.
	//
	// > **NOTE:** The assigned `principalId` and `tenantId` can be retrieved after the identity `type` has been set to `SystemAssigned` and the Datadog Monitor has been created. More details are available below.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MonitorIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorIdentity)(nil)).Elem()
}

func (i MonitorIdentityArgs) ToMonitorIdentityOutput() MonitorIdentityOutput {
	return i.ToMonitorIdentityOutputWithContext(context.Background())
}

func (i MonitorIdentityArgs) ToMonitorIdentityOutputWithContext(ctx context.Context) MonitorIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorIdentityOutput)
}

func (i MonitorIdentityArgs) ToMonitorIdentityPtrOutput() MonitorIdentityPtrOutput {
	return i.ToMonitorIdentityPtrOutputWithContext(context.Background())
}

func (i MonitorIdentityArgs) ToMonitorIdentityPtrOutputWithContext(ctx context.Context) MonitorIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorIdentityOutput).ToMonitorIdentityPtrOutputWithContext(ctx)
}

// MonitorIdentityPtrInput is an input type that accepts MonitorIdentityArgs, MonitorIdentityPtr and MonitorIdentityPtrOutput values.
// You can construct a concrete instance of `MonitorIdentityPtrInput` via:
//
//	        MonitorIdentityArgs{...}
//
//	or:
//
//	        nil
type MonitorIdentityPtrInput interface {
	pulumi.Input

	ToMonitorIdentityPtrOutput() MonitorIdentityPtrOutput
	ToMonitorIdentityPtrOutputWithContext(context.Context) MonitorIdentityPtrOutput
}

type monitorIdentityPtrType MonitorIdentityArgs

func MonitorIdentityPtr(v *MonitorIdentityArgs) MonitorIdentityPtrInput {
	return (*monitorIdentityPtrType)(v)
}

func (*monitorIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorIdentity)(nil)).Elem()
}

func (i *monitorIdentityPtrType) ToMonitorIdentityPtrOutput() MonitorIdentityPtrOutput {
	return i.ToMonitorIdentityPtrOutputWithContext(context.Background())
}

func (i *monitorIdentityPtrType) ToMonitorIdentityPtrOutputWithContext(ctx context.Context) MonitorIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorIdentityPtrOutput)
}

type MonitorIdentityOutput struct{ *pulumi.OutputState }

func (MonitorIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorIdentity)(nil)).Elem()
}

func (o MonitorIdentityOutput) ToMonitorIdentityOutput() MonitorIdentityOutput {
	return o
}

func (o MonitorIdentityOutput) ToMonitorIdentityOutputWithContext(ctx context.Context) MonitorIdentityOutput {
	return o
}

func (o MonitorIdentityOutput) ToMonitorIdentityPtrOutput() MonitorIdentityPtrOutput {
	return o.ToMonitorIdentityPtrOutputWithContext(context.Background())
}

func (o MonitorIdentityOutput) ToMonitorIdentityPtrOutputWithContext(ctx context.Context) MonitorIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorIdentity) *MonitorIdentity {
		return &v
	}).(MonitorIdentityPtrOutput)
}

// The Principal ID for the Service Principal associated with the Identity of this Datadog Monitor.
func (o MonitorIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The Tenant ID for the Service Principal associated with the Identity of this Datadog Monitor.
func (o MonitorIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Specifies the identity type of the Datadog Monitor. At this time the only allowed value is `SystemAssigned`.
//
// > **NOTE:** The assigned `principalId` and `tenantId` can be retrieved after the identity `type` has been set to `SystemAssigned` and the Datadog Monitor has been created. More details are available below.
func (o MonitorIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type MonitorIdentityPtrOutput struct{ *pulumi.OutputState }

func (MonitorIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorIdentity)(nil)).Elem()
}

func (o MonitorIdentityPtrOutput) ToMonitorIdentityPtrOutput() MonitorIdentityPtrOutput {
	return o
}

func (o MonitorIdentityPtrOutput) ToMonitorIdentityPtrOutputWithContext(ctx context.Context) MonitorIdentityPtrOutput {
	return o
}

func (o MonitorIdentityPtrOutput) Elem() MonitorIdentityOutput {
	return o.ApplyT(func(v *MonitorIdentity) MonitorIdentity {
		if v != nil {
			return *v
		}
		var ret MonitorIdentity
		return ret
	}).(MonitorIdentityOutput)
}

// The Principal ID for the Service Principal associated with the Identity of this Datadog Monitor.
func (o MonitorIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The Tenant ID for the Service Principal associated with the Identity of this Datadog Monitor.
func (o MonitorIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Specifies the identity type of the Datadog Monitor. At this time the only allowed value is `SystemAssigned`.
//
// > **NOTE:** The assigned `principalId` and `tenantId` can be retrieved after the identity `type` has been set to `SystemAssigned` and the Datadog Monitor has been created. More details are available below.
func (o MonitorIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type MonitorTagRuleLog struct {
	// Whether AAD logs should be sent for the Monitor resource?
	AadLogEnabled *bool `pulumi:"aadLogEnabled"`
	// A `filter` block as defined below.
	//
	// > **NOTE:** List of filtering tags to be used for capturing logs. This only takes effect if `resourceLogEnabled` flag is enabled. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
	Filters []MonitorTagRuleLogFilter `pulumi:"filters"`
	// Whether Azure resource logs should be sent for the Monitor resource?
	ResourceLogEnabled *bool `pulumi:"resourceLogEnabled"`
	// Whether Azure subscription logs should be sent for the Monitor resource?
	SubscriptionLogEnabled *bool `pulumi:"subscriptionLogEnabled"`
}

// MonitorTagRuleLogInput is an input type that accepts MonitorTagRuleLogArgs and MonitorTagRuleLogOutput values.
// You can construct a concrete instance of `MonitorTagRuleLogInput` via:
//
//	MonitorTagRuleLogArgs{...}
type MonitorTagRuleLogInput interface {
	pulumi.Input

	ToMonitorTagRuleLogOutput() MonitorTagRuleLogOutput
	ToMonitorTagRuleLogOutputWithContext(context.Context) MonitorTagRuleLogOutput
}

type MonitorTagRuleLogArgs struct {
	// Whether AAD logs should be sent for the Monitor resource?
	AadLogEnabled pulumi.BoolPtrInput `pulumi:"aadLogEnabled"`
	// A `filter` block as defined below.
	//
	// > **NOTE:** List of filtering tags to be used for capturing logs. This only takes effect if `resourceLogEnabled` flag is enabled. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
	Filters MonitorTagRuleLogFilterArrayInput `pulumi:"filters"`
	// Whether Azure resource logs should be sent for the Monitor resource?
	ResourceLogEnabled pulumi.BoolPtrInput `pulumi:"resourceLogEnabled"`
	// Whether Azure subscription logs should be sent for the Monitor resource?
	SubscriptionLogEnabled pulumi.BoolPtrInput `pulumi:"subscriptionLogEnabled"`
}

func (MonitorTagRuleLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTagRuleLog)(nil)).Elem()
}

func (i MonitorTagRuleLogArgs) ToMonitorTagRuleLogOutput() MonitorTagRuleLogOutput {
	return i.ToMonitorTagRuleLogOutputWithContext(context.Background())
}

func (i MonitorTagRuleLogArgs) ToMonitorTagRuleLogOutputWithContext(ctx context.Context) MonitorTagRuleLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTagRuleLogOutput)
}

// MonitorTagRuleLogArrayInput is an input type that accepts MonitorTagRuleLogArray and MonitorTagRuleLogArrayOutput values.
// You can construct a concrete instance of `MonitorTagRuleLogArrayInput` via:
//
//	MonitorTagRuleLogArray{ MonitorTagRuleLogArgs{...} }
type MonitorTagRuleLogArrayInput interface {
	pulumi.Input

	ToMonitorTagRuleLogArrayOutput() MonitorTagRuleLogArrayOutput
	ToMonitorTagRuleLogArrayOutputWithContext(context.Context) MonitorTagRuleLogArrayOutput
}

type MonitorTagRuleLogArray []MonitorTagRuleLogInput

func (MonitorTagRuleLogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitorTagRuleLog)(nil)).Elem()
}

func (i MonitorTagRuleLogArray) ToMonitorTagRuleLogArrayOutput() MonitorTagRuleLogArrayOutput {
	return i.ToMonitorTagRuleLogArrayOutputWithContext(context.Background())
}

func (i MonitorTagRuleLogArray) ToMonitorTagRuleLogArrayOutputWithContext(ctx context.Context) MonitorTagRuleLogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTagRuleLogArrayOutput)
}

type MonitorTagRuleLogOutput struct{ *pulumi.OutputState }

func (MonitorTagRuleLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTagRuleLog)(nil)).Elem()
}

func (o MonitorTagRuleLogOutput) ToMonitorTagRuleLogOutput() MonitorTagRuleLogOutput {
	return o
}

func (o MonitorTagRuleLogOutput) ToMonitorTagRuleLogOutputWithContext(ctx context.Context) MonitorTagRuleLogOutput {
	return o
}

// Whether AAD logs should be sent for the Monitor resource?
func (o MonitorTagRuleLogOutput) AadLogEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MonitorTagRuleLog) *bool { return v.AadLogEnabled }).(pulumi.BoolPtrOutput)
}

// A `filter` block as defined below.
//
// > **NOTE:** List of filtering tags to be used for capturing logs. This only takes effect if `resourceLogEnabled` flag is enabled. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
func (o MonitorTagRuleLogOutput) Filters() MonitorTagRuleLogFilterArrayOutput {
	return o.ApplyT(func(v MonitorTagRuleLog) []MonitorTagRuleLogFilter { return v.Filters }).(MonitorTagRuleLogFilterArrayOutput)
}

// Whether Azure resource logs should be sent for the Monitor resource?
func (o MonitorTagRuleLogOutput) ResourceLogEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MonitorTagRuleLog) *bool { return v.ResourceLogEnabled }).(pulumi.BoolPtrOutput)
}

// Whether Azure subscription logs should be sent for the Monitor resource?
func (o MonitorTagRuleLogOutput) SubscriptionLogEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MonitorTagRuleLog) *bool { return v.SubscriptionLogEnabled }).(pulumi.BoolPtrOutput)
}

type MonitorTagRuleLogArrayOutput struct{ *pulumi.OutputState }

func (MonitorTagRuleLogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitorTagRuleLog)(nil)).Elem()
}

func (o MonitorTagRuleLogArrayOutput) ToMonitorTagRuleLogArrayOutput() MonitorTagRuleLogArrayOutput {
	return o
}

func (o MonitorTagRuleLogArrayOutput) ToMonitorTagRuleLogArrayOutputWithContext(ctx context.Context) MonitorTagRuleLogArrayOutput {
	return o
}

func (o MonitorTagRuleLogArrayOutput) Index(i pulumi.IntInput) MonitorTagRuleLogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MonitorTagRuleLog {
		return vs[0].([]MonitorTagRuleLog)[vs[1].(int)]
	}).(MonitorTagRuleLogOutput)
}

type MonitorTagRuleLogFilter struct {
	// Allowed values Include or Exclude.
	Action string `pulumi:"action"`
	// Name of the Tag.
	Name string `pulumi:"name"`
	// Value of the Tag.
	Value string `pulumi:"value"`
}

// MonitorTagRuleLogFilterInput is an input type that accepts MonitorTagRuleLogFilterArgs and MonitorTagRuleLogFilterOutput values.
// You can construct a concrete instance of `MonitorTagRuleLogFilterInput` via:
//
//	MonitorTagRuleLogFilterArgs{...}
type MonitorTagRuleLogFilterInput interface {
	pulumi.Input

	ToMonitorTagRuleLogFilterOutput() MonitorTagRuleLogFilterOutput
	ToMonitorTagRuleLogFilterOutputWithContext(context.Context) MonitorTagRuleLogFilterOutput
}

type MonitorTagRuleLogFilterArgs struct {
	// Allowed values Include or Exclude.
	Action pulumi.StringInput `pulumi:"action"`
	// Name of the Tag.
	Name pulumi.StringInput `pulumi:"name"`
	// Value of the Tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (MonitorTagRuleLogFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTagRuleLogFilter)(nil)).Elem()
}

func (i MonitorTagRuleLogFilterArgs) ToMonitorTagRuleLogFilterOutput() MonitorTagRuleLogFilterOutput {
	return i.ToMonitorTagRuleLogFilterOutputWithContext(context.Background())
}

func (i MonitorTagRuleLogFilterArgs) ToMonitorTagRuleLogFilterOutputWithContext(ctx context.Context) MonitorTagRuleLogFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTagRuleLogFilterOutput)
}

// MonitorTagRuleLogFilterArrayInput is an input type that accepts MonitorTagRuleLogFilterArray and MonitorTagRuleLogFilterArrayOutput values.
// You can construct a concrete instance of `MonitorTagRuleLogFilterArrayInput` via:
//
//	MonitorTagRuleLogFilterArray{ MonitorTagRuleLogFilterArgs{...} }
type MonitorTagRuleLogFilterArrayInput interface {
	pulumi.Input

	ToMonitorTagRuleLogFilterArrayOutput() MonitorTagRuleLogFilterArrayOutput
	ToMonitorTagRuleLogFilterArrayOutputWithContext(context.Context) MonitorTagRuleLogFilterArrayOutput
}

type MonitorTagRuleLogFilterArray []MonitorTagRuleLogFilterInput

func (MonitorTagRuleLogFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitorTagRuleLogFilter)(nil)).Elem()
}

func (i MonitorTagRuleLogFilterArray) ToMonitorTagRuleLogFilterArrayOutput() MonitorTagRuleLogFilterArrayOutput {
	return i.ToMonitorTagRuleLogFilterArrayOutputWithContext(context.Background())
}

func (i MonitorTagRuleLogFilterArray) ToMonitorTagRuleLogFilterArrayOutputWithContext(ctx context.Context) MonitorTagRuleLogFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTagRuleLogFilterArrayOutput)
}

type MonitorTagRuleLogFilterOutput struct{ *pulumi.OutputState }

func (MonitorTagRuleLogFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTagRuleLogFilter)(nil)).Elem()
}

func (o MonitorTagRuleLogFilterOutput) ToMonitorTagRuleLogFilterOutput() MonitorTagRuleLogFilterOutput {
	return o
}

func (o MonitorTagRuleLogFilterOutput) ToMonitorTagRuleLogFilterOutputWithContext(ctx context.Context) MonitorTagRuleLogFilterOutput {
	return o
}

// Allowed values Include or Exclude.
func (o MonitorTagRuleLogFilterOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorTagRuleLogFilter) string { return v.Action }).(pulumi.StringOutput)
}

// Name of the Tag.
func (o MonitorTagRuleLogFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorTagRuleLogFilter) string { return v.Name }).(pulumi.StringOutput)
}

// Value of the Tag.
func (o MonitorTagRuleLogFilterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorTagRuleLogFilter) string { return v.Value }).(pulumi.StringOutput)
}

type MonitorTagRuleLogFilterArrayOutput struct{ *pulumi.OutputState }

func (MonitorTagRuleLogFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitorTagRuleLogFilter)(nil)).Elem()
}

func (o MonitorTagRuleLogFilterArrayOutput) ToMonitorTagRuleLogFilterArrayOutput() MonitorTagRuleLogFilterArrayOutput {
	return o
}

func (o MonitorTagRuleLogFilterArrayOutput) ToMonitorTagRuleLogFilterArrayOutputWithContext(ctx context.Context) MonitorTagRuleLogFilterArrayOutput {
	return o
}

func (o MonitorTagRuleLogFilterArrayOutput) Index(i pulumi.IntInput) MonitorTagRuleLogFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MonitorTagRuleLogFilter {
		return vs[0].([]MonitorTagRuleLogFilter)[vs[1].(int)]
	}).(MonitorTagRuleLogFilterOutput)
}

type MonitorTagRuleMetric struct {
	// A `filter` block as defined below.
	//
	// > **NOTE:** List of filtering tags to be used for capturing metrics. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
	Filters []MonitorTagRuleMetricFilter `pulumi:"filters"`
}

// MonitorTagRuleMetricInput is an input type that accepts MonitorTagRuleMetricArgs and MonitorTagRuleMetricOutput values.
// You can construct a concrete instance of `MonitorTagRuleMetricInput` via:
//
//	MonitorTagRuleMetricArgs{...}
type MonitorTagRuleMetricInput interface {
	pulumi.Input

	ToMonitorTagRuleMetricOutput() MonitorTagRuleMetricOutput
	ToMonitorTagRuleMetricOutputWithContext(context.Context) MonitorTagRuleMetricOutput
}

type MonitorTagRuleMetricArgs struct {
	// A `filter` block as defined below.
	//
	// > **NOTE:** List of filtering tags to be used for capturing metrics. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
	Filters MonitorTagRuleMetricFilterArrayInput `pulumi:"filters"`
}

func (MonitorTagRuleMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTagRuleMetric)(nil)).Elem()
}

func (i MonitorTagRuleMetricArgs) ToMonitorTagRuleMetricOutput() MonitorTagRuleMetricOutput {
	return i.ToMonitorTagRuleMetricOutputWithContext(context.Background())
}

func (i MonitorTagRuleMetricArgs) ToMonitorTagRuleMetricOutputWithContext(ctx context.Context) MonitorTagRuleMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTagRuleMetricOutput)
}

// MonitorTagRuleMetricArrayInput is an input type that accepts MonitorTagRuleMetricArray and MonitorTagRuleMetricArrayOutput values.
// You can construct a concrete instance of `MonitorTagRuleMetricArrayInput` via:
//
//	MonitorTagRuleMetricArray{ MonitorTagRuleMetricArgs{...} }
type MonitorTagRuleMetricArrayInput interface {
	pulumi.Input

	ToMonitorTagRuleMetricArrayOutput() MonitorTagRuleMetricArrayOutput
	ToMonitorTagRuleMetricArrayOutputWithContext(context.Context) MonitorTagRuleMetricArrayOutput
}

type MonitorTagRuleMetricArray []MonitorTagRuleMetricInput

func (MonitorTagRuleMetricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitorTagRuleMetric)(nil)).Elem()
}

func (i MonitorTagRuleMetricArray) ToMonitorTagRuleMetricArrayOutput() MonitorTagRuleMetricArrayOutput {
	return i.ToMonitorTagRuleMetricArrayOutputWithContext(context.Background())
}

func (i MonitorTagRuleMetricArray) ToMonitorTagRuleMetricArrayOutputWithContext(ctx context.Context) MonitorTagRuleMetricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTagRuleMetricArrayOutput)
}

type MonitorTagRuleMetricOutput struct{ *pulumi.OutputState }

func (MonitorTagRuleMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTagRuleMetric)(nil)).Elem()
}

func (o MonitorTagRuleMetricOutput) ToMonitorTagRuleMetricOutput() MonitorTagRuleMetricOutput {
	return o
}

func (o MonitorTagRuleMetricOutput) ToMonitorTagRuleMetricOutputWithContext(ctx context.Context) MonitorTagRuleMetricOutput {
	return o
}

// A `filter` block as defined below.
//
// > **NOTE:** List of filtering tags to be used for capturing metrics. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
func (o MonitorTagRuleMetricOutput) Filters() MonitorTagRuleMetricFilterArrayOutput {
	return o.ApplyT(func(v MonitorTagRuleMetric) []MonitorTagRuleMetricFilter { return v.Filters }).(MonitorTagRuleMetricFilterArrayOutput)
}

type MonitorTagRuleMetricArrayOutput struct{ *pulumi.OutputState }

func (MonitorTagRuleMetricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitorTagRuleMetric)(nil)).Elem()
}

func (o MonitorTagRuleMetricArrayOutput) ToMonitorTagRuleMetricArrayOutput() MonitorTagRuleMetricArrayOutput {
	return o
}

func (o MonitorTagRuleMetricArrayOutput) ToMonitorTagRuleMetricArrayOutputWithContext(ctx context.Context) MonitorTagRuleMetricArrayOutput {
	return o
}

func (o MonitorTagRuleMetricArrayOutput) Index(i pulumi.IntInput) MonitorTagRuleMetricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MonitorTagRuleMetric {
		return vs[0].([]MonitorTagRuleMetric)[vs[1].(int)]
	}).(MonitorTagRuleMetricOutput)
}

type MonitorTagRuleMetricFilter struct {
	// Allowed values Include or Exclude.
	Action string `pulumi:"action"`
	// Name of the Tag.
	Name string `pulumi:"name"`
	// Value of the Tag.
	Value string `pulumi:"value"`
}

// MonitorTagRuleMetricFilterInput is an input type that accepts MonitorTagRuleMetricFilterArgs and MonitorTagRuleMetricFilterOutput values.
// You can construct a concrete instance of `MonitorTagRuleMetricFilterInput` via:
//
//	MonitorTagRuleMetricFilterArgs{...}
type MonitorTagRuleMetricFilterInput interface {
	pulumi.Input

	ToMonitorTagRuleMetricFilterOutput() MonitorTagRuleMetricFilterOutput
	ToMonitorTagRuleMetricFilterOutputWithContext(context.Context) MonitorTagRuleMetricFilterOutput
}

type MonitorTagRuleMetricFilterArgs struct {
	// Allowed values Include or Exclude.
	Action pulumi.StringInput `pulumi:"action"`
	// Name of the Tag.
	Name pulumi.StringInput `pulumi:"name"`
	// Value of the Tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (MonitorTagRuleMetricFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTagRuleMetricFilter)(nil)).Elem()
}

func (i MonitorTagRuleMetricFilterArgs) ToMonitorTagRuleMetricFilterOutput() MonitorTagRuleMetricFilterOutput {
	return i.ToMonitorTagRuleMetricFilterOutputWithContext(context.Background())
}

func (i MonitorTagRuleMetricFilterArgs) ToMonitorTagRuleMetricFilterOutputWithContext(ctx context.Context) MonitorTagRuleMetricFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTagRuleMetricFilterOutput)
}

// MonitorTagRuleMetricFilterArrayInput is an input type that accepts MonitorTagRuleMetricFilterArray and MonitorTagRuleMetricFilterArrayOutput values.
// You can construct a concrete instance of `MonitorTagRuleMetricFilterArrayInput` via:
//
//	MonitorTagRuleMetricFilterArray{ MonitorTagRuleMetricFilterArgs{...} }
type MonitorTagRuleMetricFilterArrayInput interface {
	pulumi.Input

	ToMonitorTagRuleMetricFilterArrayOutput() MonitorTagRuleMetricFilterArrayOutput
	ToMonitorTagRuleMetricFilterArrayOutputWithContext(context.Context) MonitorTagRuleMetricFilterArrayOutput
}

type MonitorTagRuleMetricFilterArray []MonitorTagRuleMetricFilterInput

func (MonitorTagRuleMetricFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitorTagRuleMetricFilter)(nil)).Elem()
}

func (i MonitorTagRuleMetricFilterArray) ToMonitorTagRuleMetricFilterArrayOutput() MonitorTagRuleMetricFilterArrayOutput {
	return i.ToMonitorTagRuleMetricFilterArrayOutputWithContext(context.Background())
}

func (i MonitorTagRuleMetricFilterArray) ToMonitorTagRuleMetricFilterArrayOutputWithContext(ctx context.Context) MonitorTagRuleMetricFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTagRuleMetricFilterArrayOutput)
}

type MonitorTagRuleMetricFilterOutput struct{ *pulumi.OutputState }

func (MonitorTagRuleMetricFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTagRuleMetricFilter)(nil)).Elem()
}

func (o MonitorTagRuleMetricFilterOutput) ToMonitorTagRuleMetricFilterOutput() MonitorTagRuleMetricFilterOutput {
	return o
}

func (o MonitorTagRuleMetricFilterOutput) ToMonitorTagRuleMetricFilterOutputWithContext(ctx context.Context) MonitorTagRuleMetricFilterOutput {
	return o
}

// Allowed values Include or Exclude.
func (o MonitorTagRuleMetricFilterOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorTagRuleMetricFilter) string { return v.Action }).(pulumi.StringOutput)
}

// Name of the Tag.
func (o MonitorTagRuleMetricFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorTagRuleMetricFilter) string { return v.Name }).(pulumi.StringOutput)
}

// Value of the Tag.
func (o MonitorTagRuleMetricFilterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorTagRuleMetricFilter) string { return v.Value }).(pulumi.StringOutput)
}

type MonitorTagRuleMetricFilterArrayOutput struct{ *pulumi.OutputState }

func (MonitorTagRuleMetricFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitorTagRuleMetricFilter)(nil)).Elem()
}

func (o MonitorTagRuleMetricFilterArrayOutput) ToMonitorTagRuleMetricFilterArrayOutput() MonitorTagRuleMetricFilterArrayOutput {
	return o
}

func (o MonitorTagRuleMetricFilterArrayOutput) ToMonitorTagRuleMetricFilterArrayOutputWithContext(ctx context.Context) MonitorTagRuleMetricFilterArrayOutput {
	return o
}

func (o MonitorTagRuleMetricFilterArrayOutput) Index(i pulumi.IntInput) MonitorTagRuleMetricFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MonitorTagRuleMetricFilter {
		return vs[0].([]MonitorTagRuleMetricFilter)[vs[1].(int)]
	}).(MonitorTagRuleMetricFilterOutput)
}

type MonitorUser struct {
	// Email of the user used by Datadog for contacting them if needed. Changing this forces a new Datadog Monitor to be created.
	Email string `pulumi:"email"`
	// The name which should be used for this user_info. Changing this forces a new resource to be created.
	Name string `pulumi:"name"`
	// Phone number of the user used by Datadog for contacting them if needed. Changing this forces a new resource to be created.
	PhoneNumber *string `pulumi:"phoneNumber"`
}

// MonitorUserInput is an input type that accepts MonitorUserArgs and MonitorUserOutput values.
// You can construct a concrete instance of `MonitorUserInput` via:
//
//	MonitorUserArgs{...}
type MonitorUserInput interface {
	pulumi.Input

	ToMonitorUserOutput() MonitorUserOutput
	ToMonitorUserOutputWithContext(context.Context) MonitorUserOutput
}

type MonitorUserArgs struct {
	// Email of the user used by Datadog for contacting them if needed. Changing this forces a new Datadog Monitor to be created.
	Email pulumi.StringInput `pulumi:"email"`
	// The name which should be used for this user_info. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// Phone number of the user used by Datadog for contacting them if needed. Changing this forces a new resource to be created.
	PhoneNumber pulumi.StringPtrInput `pulumi:"phoneNumber"`
}

func (MonitorUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorUser)(nil)).Elem()
}

func (i MonitorUserArgs) ToMonitorUserOutput() MonitorUserOutput {
	return i.ToMonitorUserOutputWithContext(context.Background())
}

func (i MonitorUserArgs) ToMonitorUserOutputWithContext(ctx context.Context) MonitorUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorUserOutput)
}

func (i MonitorUserArgs) ToMonitorUserPtrOutput() MonitorUserPtrOutput {
	return i.ToMonitorUserPtrOutputWithContext(context.Background())
}

func (i MonitorUserArgs) ToMonitorUserPtrOutputWithContext(ctx context.Context) MonitorUserPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorUserOutput).ToMonitorUserPtrOutputWithContext(ctx)
}

// MonitorUserPtrInput is an input type that accepts MonitorUserArgs, MonitorUserPtr and MonitorUserPtrOutput values.
// You can construct a concrete instance of `MonitorUserPtrInput` via:
//
//	        MonitorUserArgs{...}
//
//	or:
//
//	        nil
type MonitorUserPtrInput interface {
	pulumi.Input

	ToMonitorUserPtrOutput() MonitorUserPtrOutput
	ToMonitorUserPtrOutputWithContext(context.Context) MonitorUserPtrOutput
}

type monitorUserPtrType MonitorUserArgs

func MonitorUserPtr(v *MonitorUserArgs) MonitorUserPtrInput {
	return (*monitorUserPtrType)(v)
}

func (*monitorUserPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorUser)(nil)).Elem()
}

func (i *monitorUserPtrType) ToMonitorUserPtrOutput() MonitorUserPtrOutput {
	return i.ToMonitorUserPtrOutputWithContext(context.Background())
}

func (i *monitorUserPtrType) ToMonitorUserPtrOutputWithContext(ctx context.Context) MonitorUserPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorUserPtrOutput)
}

type MonitorUserOutput struct{ *pulumi.OutputState }

func (MonitorUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorUser)(nil)).Elem()
}

func (o MonitorUserOutput) ToMonitorUserOutput() MonitorUserOutput {
	return o
}

func (o MonitorUserOutput) ToMonitorUserOutputWithContext(ctx context.Context) MonitorUserOutput {
	return o
}

func (o MonitorUserOutput) ToMonitorUserPtrOutput() MonitorUserPtrOutput {
	return o.ToMonitorUserPtrOutputWithContext(context.Background())
}

func (o MonitorUserOutput) ToMonitorUserPtrOutputWithContext(ctx context.Context) MonitorUserPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorUser) *MonitorUser {
		return &v
	}).(MonitorUserPtrOutput)
}

// Email of the user used by Datadog for contacting them if needed. Changing this forces a new Datadog Monitor to be created.
func (o MonitorUserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorUser) string { return v.Email }).(pulumi.StringOutput)
}

// The name which should be used for this user_info. Changing this forces a new resource to be created.
func (o MonitorUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorUser) string { return v.Name }).(pulumi.StringOutput)
}

// Phone number of the user used by Datadog for contacting them if needed. Changing this forces a new resource to be created.
func (o MonitorUserOutput) PhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorUser) *string { return v.PhoneNumber }).(pulumi.StringPtrOutput)
}

type MonitorUserPtrOutput struct{ *pulumi.OutputState }

func (MonitorUserPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorUser)(nil)).Elem()
}

func (o MonitorUserPtrOutput) ToMonitorUserPtrOutput() MonitorUserPtrOutput {
	return o
}

func (o MonitorUserPtrOutput) ToMonitorUserPtrOutputWithContext(ctx context.Context) MonitorUserPtrOutput {
	return o
}

func (o MonitorUserPtrOutput) Elem() MonitorUserOutput {
	return o.ApplyT(func(v *MonitorUser) MonitorUser {
		if v != nil {
			return *v
		}
		var ret MonitorUser
		return ret
	}).(MonitorUserOutput)
}

// Email of the user used by Datadog for contacting them if needed. Changing this forces a new Datadog Monitor to be created.
func (o MonitorUserPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorUser) *string {
		if v == nil {
			return nil
		}
		return &v.Email
	}).(pulumi.StringPtrOutput)
}

// The name which should be used for this user_info. Changing this forces a new resource to be created.
func (o MonitorUserPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorUser) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Phone number of the user used by Datadog for contacting them if needed. Changing this forces a new resource to be created.
func (o MonitorUserPtrOutput) PhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorUser) *string {
		if v == nil {
			return nil
		}
		return v.PhoneNumber
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorDatadogOrganizationInput)(nil)).Elem(), MonitorDatadogOrganizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorDatadogOrganizationPtrInput)(nil)).Elem(), MonitorDatadogOrganizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorIdentityInput)(nil)).Elem(), MonitorIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorIdentityPtrInput)(nil)).Elem(), MonitorIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTagRuleLogInput)(nil)).Elem(), MonitorTagRuleLogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTagRuleLogArrayInput)(nil)).Elem(), MonitorTagRuleLogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTagRuleLogFilterInput)(nil)).Elem(), MonitorTagRuleLogFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTagRuleLogFilterArrayInput)(nil)).Elem(), MonitorTagRuleLogFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTagRuleMetricInput)(nil)).Elem(), MonitorTagRuleMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTagRuleMetricArrayInput)(nil)).Elem(), MonitorTagRuleMetricArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTagRuleMetricFilterInput)(nil)).Elem(), MonitorTagRuleMetricFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTagRuleMetricFilterArrayInput)(nil)).Elem(), MonitorTagRuleMetricFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorUserInput)(nil)).Elem(), MonitorUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorUserPtrInput)(nil)).Elem(), MonitorUserArgs{})
	pulumi.RegisterOutputType(MonitorDatadogOrganizationOutput{})
	pulumi.RegisterOutputType(MonitorDatadogOrganizationPtrOutput{})
	pulumi.RegisterOutputType(MonitorIdentityOutput{})
	pulumi.RegisterOutputType(MonitorIdentityPtrOutput{})
	pulumi.RegisterOutputType(MonitorTagRuleLogOutput{})
	pulumi.RegisterOutputType(MonitorTagRuleLogArrayOutput{})
	pulumi.RegisterOutputType(MonitorTagRuleLogFilterOutput{})
	pulumi.RegisterOutputType(MonitorTagRuleLogFilterArrayOutput{})
	pulumi.RegisterOutputType(MonitorTagRuleMetricOutput{})
	pulumi.RegisterOutputType(MonitorTagRuleMetricArrayOutput{})
	pulumi.RegisterOutputType(MonitorTagRuleMetricFilterOutput{})
	pulumi.RegisterOutputType(MonitorTagRuleMetricFilterArrayOutput{})
	pulumi.RegisterOutputType(MonitorUserOutput{})
	pulumi.RegisterOutputType(MonitorUserPtrOutput{})
}
