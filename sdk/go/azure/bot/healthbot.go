// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bot

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Healthbot Service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/bot"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = bot.NewHealthbot(ctx, "exampleHealthbot", &bot.HealthbotArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				SkuName:           pulumi.String("F0"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Healthbot Service can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:bot/healthbot:Healthbot example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.HealthBot/healthBots/bot1
//
// ```
type Healthbot struct {
	pulumi.CustomResourceState

	// The management portal url.
	BotManagementPortalUrl pulumi.StringOutput `pulumi:"botManagementPortalUrl"`
	// Specifies The Azure Region where the resource exists. Changing this force a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies The name of the Healthbot Service resource. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies The name of the Resource Group in which to create the Healthbot Service. changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The name which should be used for the SKU of the service. Possible values are `C0`, `F0` and `S1`.
	SkuName pulumi.StringOutput `pulumi:"skuName"`
	// A mapping of tags which should be assigned to the service.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewHealthbot registers a new resource with the given unique name, arguments, and options.
func NewHealthbot(ctx *pulumi.Context,
	name string, args *HealthbotArgs, opts ...pulumi.ResourceOption) (*Healthbot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SkuName == nil {
		return nil, errors.New("invalid value for required argument 'SkuName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Healthbot
	err := ctx.RegisterResource("azure:bot/healthbot:Healthbot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHealthbot gets an existing Healthbot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHealthbot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HealthbotState, opts ...pulumi.ResourceOption) (*Healthbot, error) {
	var resource Healthbot
	err := ctx.ReadResource("azure:bot/healthbot:Healthbot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Healthbot resources.
type healthbotState struct {
	// The management portal url.
	BotManagementPortalUrl *string `pulumi:"botManagementPortalUrl"`
	// Specifies The Azure Region where the resource exists. Changing this force a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies The name of the Healthbot Service resource. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies The name of the Resource Group in which to create the Healthbot Service. changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The name which should be used for the SKU of the service. Possible values are `C0`, `F0` and `S1`.
	SkuName *string `pulumi:"skuName"`
	// A mapping of tags which should be assigned to the service.
	Tags map[string]string `pulumi:"tags"`
}

type HealthbotState struct {
	// The management portal url.
	BotManagementPortalUrl pulumi.StringPtrInput
	// Specifies The Azure Region where the resource exists. Changing this force a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies The name of the Healthbot Service resource. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies The name of the Resource Group in which to create the Healthbot Service. changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The name which should be used for the SKU of the service. Possible values are `C0`, `F0` and `S1`.
	SkuName pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the service.
	Tags pulumi.StringMapInput
}

func (HealthbotState) ElementType() reflect.Type {
	return reflect.TypeOf((*healthbotState)(nil)).Elem()
}

type healthbotArgs struct {
	// Specifies The Azure Region where the resource exists. Changing this force a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies The name of the Healthbot Service resource. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies The name of the Resource Group in which to create the Healthbot Service. changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name which should be used for the SKU of the service. Possible values are `C0`, `F0` and `S1`.
	SkuName string `pulumi:"skuName"`
	// A mapping of tags which should be assigned to the service.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Healthbot resource.
type HealthbotArgs struct {
	// Specifies The Azure Region where the resource exists. Changing this force a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies The name of the Healthbot Service resource. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies The name of the Resource Group in which to create the Healthbot Service. changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// The name which should be used for the SKU of the service. Possible values are `C0`, `F0` and `S1`.
	SkuName pulumi.StringInput
	// A mapping of tags which should be assigned to the service.
	Tags pulumi.StringMapInput
}

func (HealthbotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*healthbotArgs)(nil)).Elem()
}

type HealthbotInput interface {
	pulumi.Input

	ToHealthbotOutput() HealthbotOutput
	ToHealthbotOutputWithContext(ctx context.Context) HealthbotOutput
}

func (*Healthbot) ElementType() reflect.Type {
	return reflect.TypeOf((**Healthbot)(nil)).Elem()
}

func (i *Healthbot) ToHealthbotOutput() HealthbotOutput {
	return i.ToHealthbotOutputWithContext(context.Background())
}

func (i *Healthbot) ToHealthbotOutputWithContext(ctx context.Context) HealthbotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthbotOutput)
}

// HealthbotArrayInput is an input type that accepts HealthbotArray and HealthbotArrayOutput values.
// You can construct a concrete instance of `HealthbotArrayInput` via:
//
//	HealthbotArray{ HealthbotArgs{...} }
type HealthbotArrayInput interface {
	pulumi.Input

	ToHealthbotArrayOutput() HealthbotArrayOutput
	ToHealthbotArrayOutputWithContext(context.Context) HealthbotArrayOutput
}

type HealthbotArray []HealthbotInput

func (HealthbotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Healthbot)(nil)).Elem()
}

func (i HealthbotArray) ToHealthbotArrayOutput() HealthbotArrayOutput {
	return i.ToHealthbotArrayOutputWithContext(context.Background())
}

func (i HealthbotArray) ToHealthbotArrayOutputWithContext(ctx context.Context) HealthbotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthbotArrayOutput)
}

// HealthbotMapInput is an input type that accepts HealthbotMap and HealthbotMapOutput values.
// You can construct a concrete instance of `HealthbotMapInput` via:
//
//	HealthbotMap{ "key": HealthbotArgs{...} }
type HealthbotMapInput interface {
	pulumi.Input

	ToHealthbotMapOutput() HealthbotMapOutput
	ToHealthbotMapOutputWithContext(context.Context) HealthbotMapOutput
}

type HealthbotMap map[string]HealthbotInput

func (HealthbotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Healthbot)(nil)).Elem()
}

func (i HealthbotMap) ToHealthbotMapOutput() HealthbotMapOutput {
	return i.ToHealthbotMapOutputWithContext(context.Background())
}

func (i HealthbotMap) ToHealthbotMapOutputWithContext(ctx context.Context) HealthbotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthbotMapOutput)
}

type HealthbotOutput struct{ *pulumi.OutputState }

func (HealthbotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Healthbot)(nil)).Elem()
}

func (o HealthbotOutput) ToHealthbotOutput() HealthbotOutput {
	return o
}

func (o HealthbotOutput) ToHealthbotOutputWithContext(ctx context.Context) HealthbotOutput {
	return o
}

// The management portal url.
func (o HealthbotOutput) BotManagementPortalUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Healthbot) pulumi.StringOutput { return v.BotManagementPortalUrl }).(pulumi.StringOutput)
}

// Specifies The Azure Region where the resource exists. Changing this force a new resource to be created.
func (o HealthbotOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Healthbot) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies The name of the Healthbot Service resource. Changing this forces a new resource to be created.
func (o HealthbotOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Healthbot) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies The name of the Resource Group in which to create the Healthbot Service. changing this forces a new resource to be created.
func (o HealthbotOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Healthbot) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The name which should be used for the SKU of the service. Possible values are `C0`, `F0` and `S1`.
func (o HealthbotOutput) SkuName() pulumi.StringOutput {
	return o.ApplyT(func(v *Healthbot) pulumi.StringOutput { return v.SkuName }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the service.
func (o HealthbotOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Healthbot) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type HealthbotArrayOutput struct{ *pulumi.OutputState }

func (HealthbotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Healthbot)(nil)).Elem()
}

func (o HealthbotArrayOutput) ToHealthbotArrayOutput() HealthbotArrayOutput {
	return o
}

func (o HealthbotArrayOutput) ToHealthbotArrayOutputWithContext(ctx context.Context) HealthbotArrayOutput {
	return o
}

func (o HealthbotArrayOutput) Index(i pulumi.IntInput) HealthbotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Healthbot {
		return vs[0].([]*Healthbot)[vs[1].(int)]
	}).(HealthbotOutput)
}

type HealthbotMapOutput struct{ *pulumi.OutputState }

func (HealthbotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Healthbot)(nil)).Elem()
}

func (o HealthbotMapOutput) ToHealthbotMapOutput() HealthbotMapOutput {
	return o
}

func (o HealthbotMapOutput) ToHealthbotMapOutputWithContext(ctx context.Context) HealthbotMapOutput {
	return o
}

func (o HealthbotMapOutput) MapIndex(k pulumi.StringInput) HealthbotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Healthbot {
		return vs[0].(map[string]*Healthbot)[vs[1].(string)]
	}).(HealthbotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HealthbotInput)(nil)).Elem(), &Healthbot{})
	pulumi.RegisterInputType(reflect.TypeOf((*HealthbotArrayInput)(nil)).Elem(), HealthbotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HealthbotMapInput)(nil)).Elem(), HealthbotMap{})
	pulumi.RegisterOutputType(HealthbotOutput{})
	pulumi.RegisterOutputType(HealthbotArrayOutput{})
	pulumi.RegisterOutputType(HealthbotMapOutput{})
}
