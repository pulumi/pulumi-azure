// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package bot

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Healthbot struct {
	pulumi.CustomResourceState

	BotManagementPortalUrl pulumi.StringOutput    `pulumi:"botManagementPortalUrl"`
	Location               pulumi.StringOutput    `pulumi:"location"`
	Name                   pulumi.StringOutput    `pulumi:"name"`
	ResourceGroupName      pulumi.StringOutput    `pulumi:"resourceGroupName"`
	SkuName                pulumi.StringOutput    `pulumi:"skuName"`
	Tags                   pulumi.StringMapOutput `pulumi:"tags"`
}

// NewHealthbot registers a new resource with the given unique name, arguments, and options.
func NewHealthbot(ctx *pulumi.Context,
	name string, args *HealthbotArgs, opts ...pulumi.ResourceOption) (*Healthbot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SkuName == nil {
		return nil, errors.New("invalid value for required argument 'SkuName'")
	}
	var resource Healthbot
	err := ctx.RegisterResource("azure:bot/healthbot:Healthbot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHealthbot gets an existing Healthbot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHealthbot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HealthbotState, opts ...pulumi.ResourceOption) (*Healthbot, error) {
	var resource Healthbot
	err := ctx.ReadResource("azure:bot/healthbot:Healthbot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Healthbot resources.
type healthbotState struct {
	BotManagementPortalUrl *string           `pulumi:"botManagementPortalUrl"`
	Location               *string           `pulumi:"location"`
	Name                   *string           `pulumi:"name"`
	ResourceGroupName      *string           `pulumi:"resourceGroupName"`
	SkuName                *string           `pulumi:"skuName"`
	Tags                   map[string]string `pulumi:"tags"`
}

type HealthbotState struct {
	BotManagementPortalUrl pulumi.StringPtrInput
	Location               pulumi.StringPtrInput
	Name                   pulumi.StringPtrInput
	ResourceGroupName      pulumi.StringPtrInput
	SkuName                pulumi.StringPtrInput
	Tags                   pulumi.StringMapInput
}

func (HealthbotState) ElementType() reflect.Type {
	return reflect.TypeOf((*healthbotState)(nil)).Elem()
}

type healthbotArgs struct {
	Location          *string           `pulumi:"location"`
	Name              *string           `pulumi:"name"`
	ResourceGroupName string            `pulumi:"resourceGroupName"`
	SkuName           string            `pulumi:"skuName"`
	Tags              map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Healthbot resource.
type HealthbotArgs struct {
	Location          pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	ResourceGroupName pulumi.StringInput
	SkuName           pulumi.StringInput
	Tags              pulumi.StringMapInput
}

func (HealthbotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*healthbotArgs)(nil)).Elem()
}

type HealthbotInput interface {
	pulumi.Input

	ToHealthbotOutput() HealthbotOutput
	ToHealthbotOutputWithContext(ctx context.Context) HealthbotOutput
}

func (*Healthbot) ElementType() reflect.Type {
	return reflect.TypeOf((**Healthbot)(nil)).Elem()
}

func (i *Healthbot) ToHealthbotOutput() HealthbotOutput {
	return i.ToHealthbotOutputWithContext(context.Background())
}

func (i *Healthbot) ToHealthbotOutputWithContext(ctx context.Context) HealthbotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthbotOutput)
}

// HealthbotArrayInput is an input type that accepts HealthbotArray and HealthbotArrayOutput values.
// You can construct a concrete instance of `HealthbotArrayInput` via:
//
//          HealthbotArray{ HealthbotArgs{...} }
type HealthbotArrayInput interface {
	pulumi.Input

	ToHealthbotArrayOutput() HealthbotArrayOutput
	ToHealthbotArrayOutputWithContext(context.Context) HealthbotArrayOutput
}

type HealthbotArray []HealthbotInput

func (HealthbotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Healthbot)(nil)).Elem()
}

func (i HealthbotArray) ToHealthbotArrayOutput() HealthbotArrayOutput {
	return i.ToHealthbotArrayOutputWithContext(context.Background())
}

func (i HealthbotArray) ToHealthbotArrayOutputWithContext(ctx context.Context) HealthbotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthbotArrayOutput)
}

// HealthbotMapInput is an input type that accepts HealthbotMap and HealthbotMapOutput values.
// You can construct a concrete instance of `HealthbotMapInput` via:
//
//          HealthbotMap{ "key": HealthbotArgs{...} }
type HealthbotMapInput interface {
	pulumi.Input

	ToHealthbotMapOutput() HealthbotMapOutput
	ToHealthbotMapOutputWithContext(context.Context) HealthbotMapOutput
}

type HealthbotMap map[string]HealthbotInput

func (HealthbotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Healthbot)(nil)).Elem()
}

func (i HealthbotMap) ToHealthbotMapOutput() HealthbotMapOutput {
	return i.ToHealthbotMapOutputWithContext(context.Background())
}

func (i HealthbotMap) ToHealthbotMapOutputWithContext(ctx context.Context) HealthbotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthbotMapOutput)
}

type HealthbotOutput struct{ *pulumi.OutputState }

func (HealthbotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Healthbot)(nil)).Elem()
}

func (o HealthbotOutput) ToHealthbotOutput() HealthbotOutput {
	return o
}

func (o HealthbotOutput) ToHealthbotOutputWithContext(ctx context.Context) HealthbotOutput {
	return o
}

type HealthbotArrayOutput struct{ *pulumi.OutputState }

func (HealthbotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Healthbot)(nil)).Elem()
}

func (o HealthbotArrayOutput) ToHealthbotArrayOutput() HealthbotArrayOutput {
	return o
}

func (o HealthbotArrayOutput) ToHealthbotArrayOutputWithContext(ctx context.Context) HealthbotArrayOutput {
	return o
}

func (o HealthbotArrayOutput) Index(i pulumi.IntInput) HealthbotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Healthbot {
		return vs[0].([]*Healthbot)[vs[1].(int)]
	}).(HealthbotOutput)
}

type HealthbotMapOutput struct{ *pulumi.OutputState }

func (HealthbotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Healthbot)(nil)).Elem()
}

func (o HealthbotMapOutput) ToHealthbotMapOutput() HealthbotMapOutput {
	return o
}

func (o HealthbotMapOutput) ToHealthbotMapOutputWithContext(ctx context.Context) HealthbotMapOutput {
	return o
}

func (o HealthbotMapOutput) MapIndex(k pulumi.StringInput) HealthbotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Healthbot {
		return vs[0].(map[string]*Healthbot)[vs[1].(string)]
	}).(HealthbotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HealthbotInput)(nil)).Elem(), &Healthbot{})
	pulumi.RegisterInputType(reflect.TypeOf((*HealthbotArrayInput)(nil)).Elem(), HealthbotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HealthbotMapInput)(nil)).Elem(), HealthbotMap{})
	pulumi.RegisterOutputType(HealthbotOutput{})
	pulumi.RegisterOutputType(HealthbotArrayOutput{})
	pulumi.RegisterOutputType(HealthbotMapOutput{})
}
