// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bot

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Line integration for a Bot Channel
//
// > **Note** A bot can only have a single Line Channel associated with it.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/bot"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := core.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleChannelsRegistration, err := bot.NewChannelsRegistration(ctx, "exampleChannelsRegistration", &bot.ChannelsRegistrationArgs{
//				Location:          pulumi.String("global"),
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku:               pulumi.String("F0"),
//				MicrosoftAppId:    *pulumi.String(current.ClientId),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = bot.NewChannelLine(ctx, "exampleChannelLine", &bot.ChannelLineArgs{
//				BotName:           exampleChannelsRegistration.Name,
//				Location:          exampleChannelsRegistration.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				LineChannels: bot.ChannelLineLineChannelArray{
//					&bot.ChannelLineLineChannelArgs{
//						AccessToken: pulumi.String("asdfdsdfTYUIOIoj1231hkjhk"),
//						Secret:      pulumi.String("aagfdgfd123567"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The Line Integration for a Bot Channel can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:bot/channelLine:ChannelLine example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.BotService/botServices/botService1/channels/LineChannel
//
// ```
type ChannelLine struct {
	pulumi.CustomResourceState

	// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
	BotName pulumi.StringOutput `pulumi:"botName"`
	// One or more `lineChannel` blocks as defined below.
	LineChannels ChannelLineLineChannelArrayOutput `pulumi:"lineChannels"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource group where the Line Channel should be created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
}

// NewChannelLine registers a new resource with the given unique name, arguments, and options.
func NewChannelLine(ctx *pulumi.Context,
	name string, args *ChannelLineArgs, opts ...pulumi.ResourceOption) (*ChannelLine, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BotName == nil {
		return nil, errors.New("invalid value for required argument 'BotName'")
	}
	if args.LineChannels == nil {
		return nil, errors.New("invalid value for required argument 'LineChannels'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ChannelLine
	err := ctx.RegisterResource("azure:bot/channelLine:ChannelLine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChannelLine gets an existing ChannelLine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChannelLine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChannelLineState, opts ...pulumi.ResourceOption) (*ChannelLine, error) {
	var resource ChannelLine
	err := ctx.ReadResource("azure:bot/channelLine:ChannelLine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ChannelLine resources.
type channelLineState struct {
	// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
	BotName *string `pulumi:"botName"`
	// One or more `lineChannel` blocks as defined below.
	LineChannels []ChannelLineLineChannel `pulumi:"lineChannels"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name of the resource group where the Line Channel should be created. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
}

type ChannelLineState struct {
	// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
	BotName pulumi.StringPtrInput
	// One or more `lineChannel` blocks as defined below.
	LineChannels ChannelLineLineChannelArrayInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name of the resource group where the Line Channel should be created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
}

func (ChannelLineState) ElementType() reflect.Type {
	return reflect.TypeOf((*channelLineState)(nil)).Elem()
}

type channelLineArgs struct {
	// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
	BotName string `pulumi:"botName"`
	// One or more `lineChannel` blocks as defined below.
	LineChannels []ChannelLineLineChannel `pulumi:"lineChannels"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name of the resource group where the Line Channel should be created. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a ChannelLine resource.
type ChannelLineArgs struct {
	// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
	BotName pulumi.StringInput
	// One or more `lineChannel` blocks as defined below.
	LineChannels ChannelLineLineChannelArrayInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name of the resource group where the Line Channel should be created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
}

func (ChannelLineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*channelLineArgs)(nil)).Elem()
}

type ChannelLineInput interface {
	pulumi.Input

	ToChannelLineOutput() ChannelLineOutput
	ToChannelLineOutputWithContext(ctx context.Context) ChannelLineOutput
}

func (*ChannelLine) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelLine)(nil)).Elem()
}

func (i *ChannelLine) ToChannelLineOutput() ChannelLineOutput {
	return i.ToChannelLineOutputWithContext(context.Background())
}

func (i *ChannelLine) ToChannelLineOutputWithContext(ctx context.Context) ChannelLineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelLineOutput)
}

// ChannelLineArrayInput is an input type that accepts ChannelLineArray and ChannelLineArrayOutput values.
// You can construct a concrete instance of `ChannelLineArrayInput` via:
//
//	ChannelLineArray{ ChannelLineArgs{...} }
type ChannelLineArrayInput interface {
	pulumi.Input

	ToChannelLineArrayOutput() ChannelLineArrayOutput
	ToChannelLineArrayOutputWithContext(context.Context) ChannelLineArrayOutput
}

type ChannelLineArray []ChannelLineInput

func (ChannelLineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ChannelLine)(nil)).Elem()
}

func (i ChannelLineArray) ToChannelLineArrayOutput() ChannelLineArrayOutput {
	return i.ToChannelLineArrayOutputWithContext(context.Background())
}

func (i ChannelLineArray) ToChannelLineArrayOutputWithContext(ctx context.Context) ChannelLineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelLineArrayOutput)
}

// ChannelLineMapInput is an input type that accepts ChannelLineMap and ChannelLineMapOutput values.
// You can construct a concrete instance of `ChannelLineMapInput` via:
//
//	ChannelLineMap{ "key": ChannelLineArgs{...} }
type ChannelLineMapInput interface {
	pulumi.Input

	ToChannelLineMapOutput() ChannelLineMapOutput
	ToChannelLineMapOutputWithContext(context.Context) ChannelLineMapOutput
}

type ChannelLineMap map[string]ChannelLineInput

func (ChannelLineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ChannelLine)(nil)).Elem()
}

func (i ChannelLineMap) ToChannelLineMapOutput() ChannelLineMapOutput {
	return i.ToChannelLineMapOutputWithContext(context.Background())
}

func (i ChannelLineMap) ToChannelLineMapOutputWithContext(ctx context.Context) ChannelLineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelLineMapOutput)
}

type ChannelLineOutput struct{ *pulumi.OutputState }

func (ChannelLineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelLine)(nil)).Elem()
}

func (o ChannelLineOutput) ToChannelLineOutput() ChannelLineOutput {
	return o
}

func (o ChannelLineOutput) ToChannelLineOutputWithContext(ctx context.Context) ChannelLineOutput {
	return o
}

// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
func (o ChannelLineOutput) BotName() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelLine) pulumi.StringOutput { return v.BotName }).(pulumi.StringOutput)
}

// One or more `lineChannel` blocks as defined below.
func (o ChannelLineOutput) LineChannels() ChannelLineLineChannelArrayOutput {
	return o.ApplyT(func(v *ChannelLine) ChannelLineLineChannelArrayOutput { return v.LineChannels }).(ChannelLineLineChannelArrayOutput)
}

// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
func (o ChannelLineOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelLine) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource group where the Line Channel should be created. Changing this forces a new resource to be created.
func (o ChannelLineOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelLine) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

type ChannelLineArrayOutput struct{ *pulumi.OutputState }

func (ChannelLineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ChannelLine)(nil)).Elem()
}

func (o ChannelLineArrayOutput) ToChannelLineArrayOutput() ChannelLineArrayOutput {
	return o
}

func (o ChannelLineArrayOutput) ToChannelLineArrayOutputWithContext(ctx context.Context) ChannelLineArrayOutput {
	return o
}

func (o ChannelLineArrayOutput) Index(i pulumi.IntInput) ChannelLineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ChannelLine {
		return vs[0].([]*ChannelLine)[vs[1].(int)]
	}).(ChannelLineOutput)
}

type ChannelLineMapOutput struct{ *pulumi.OutputState }

func (ChannelLineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ChannelLine)(nil)).Elem()
}

func (o ChannelLineMapOutput) ToChannelLineMapOutput() ChannelLineMapOutput {
	return o
}

func (o ChannelLineMapOutput) ToChannelLineMapOutputWithContext(ctx context.Context) ChannelLineMapOutput {
	return o
}

func (o ChannelLineMapOutput) MapIndex(k pulumi.StringInput) ChannelLineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ChannelLine {
		return vs[0].(map[string]*ChannelLine)[vs[1].(string)]
	}).(ChannelLineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelLineInput)(nil)).Elem(), &ChannelLine{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelLineArrayInput)(nil)).Elem(), ChannelLineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelLineMapInput)(nil)).Elem(), ChannelLineMap{})
	pulumi.RegisterOutputType(ChannelLineOutput{})
	pulumi.RegisterOutputType(ChannelLineArrayOutput{})
	pulumi.RegisterOutputType(ChannelLineMapOutput{})
}
