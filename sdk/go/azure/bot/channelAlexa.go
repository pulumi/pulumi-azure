// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bot

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Alexa integration for a Bot Channel
//
// > **Note** A bot can only have a single Alexa Channel associated with it.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/bot"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := core.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleChannelsRegistration, err := bot.NewChannelsRegistration(ctx, "exampleChannelsRegistration", &bot.ChannelsRegistrationArgs{
//				Location:          pulumi.String("global"),
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku:               pulumi.String("F0"),
//				MicrosoftAppId:    *pulumi.String(current.ClientId),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = bot.NewChannelAlexa(ctx, "exampleChannelAlexa", &bot.ChannelAlexaArgs{
//				BotName:           exampleChannelsRegistration.Name,
//				Location:          exampleChannelsRegistration.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				SkillId:           pulumi.String("amzn1.ask.skill.00000000-0000-0000-0000-000000000000"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The Alexa Integration for a Bot Channel can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:bot/channelAlexa:ChannelAlexa example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.BotService/botServices/botService1/channels/AlexaChannel
//
// ```
type ChannelAlexa struct {
	pulumi.CustomResourceState

	// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
	BotName pulumi.StringOutput `pulumi:"botName"`
	// The supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource group where the Alexa Channel should be created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The Alexa skill ID for the Alexa Channel.
	SkillId pulumi.StringOutput `pulumi:"skillId"`
}

// NewChannelAlexa registers a new resource with the given unique name, arguments, and options.
func NewChannelAlexa(ctx *pulumi.Context,
	name string, args *ChannelAlexaArgs, opts ...pulumi.ResourceOption) (*ChannelAlexa, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BotName == nil {
		return nil, errors.New("invalid value for required argument 'BotName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SkillId == nil {
		return nil, errors.New("invalid value for required argument 'SkillId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ChannelAlexa
	err := ctx.RegisterResource("azure:bot/channelAlexa:ChannelAlexa", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChannelAlexa gets an existing ChannelAlexa resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChannelAlexa(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChannelAlexaState, opts ...pulumi.ResourceOption) (*ChannelAlexa, error) {
	var resource ChannelAlexa
	err := ctx.ReadResource("azure:bot/channelAlexa:ChannelAlexa", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ChannelAlexa resources.
type channelAlexaState struct {
	// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
	BotName *string `pulumi:"botName"`
	// The supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name of the resource group where the Alexa Channel should be created. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The Alexa skill ID for the Alexa Channel.
	SkillId *string `pulumi:"skillId"`
}

type ChannelAlexaState struct {
	// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
	BotName pulumi.StringPtrInput
	// The supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name of the resource group where the Alexa Channel should be created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The Alexa skill ID for the Alexa Channel.
	SkillId pulumi.StringPtrInput
}

func (ChannelAlexaState) ElementType() reflect.Type {
	return reflect.TypeOf((*channelAlexaState)(nil)).Elem()
}

type channelAlexaArgs struct {
	// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
	BotName string `pulumi:"botName"`
	// The supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name of the resource group where the Alexa Channel should be created. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The Alexa skill ID for the Alexa Channel.
	SkillId string `pulumi:"skillId"`
}

// The set of arguments for constructing a ChannelAlexa resource.
type ChannelAlexaArgs struct {
	// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
	BotName pulumi.StringInput
	// The supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name of the resource group where the Alexa Channel should be created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// The Alexa skill ID for the Alexa Channel.
	SkillId pulumi.StringInput
}

func (ChannelAlexaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*channelAlexaArgs)(nil)).Elem()
}

type ChannelAlexaInput interface {
	pulumi.Input

	ToChannelAlexaOutput() ChannelAlexaOutput
	ToChannelAlexaOutputWithContext(ctx context.Context) ChannelAlexaOutput
}

func (*ChannelAlexa) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelAlexa)(nil)).Elem()
}

func (i *ChannelAlexa) ToChannelAlexaOutput() ChannelAlexaOutput {
	return i.ToChannelAlexaOutputWithContext(context.Background())
}

func (i *ChannelAlexa) ToChannelAlexaOutputWithContext(ctx context.Context) ChannelAlexaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelAlexaOutput)
}

// ChannelAlexaArrayInput is an input type that accepts ChannelAlexaArray and ChannelAlexaArrayOutput values.
// You can construct a concrete instance of `ChannelAlexaArrayInput` via:
//
//	ChannelAlexaArray{ ChannelAlexaArgs{...} }
type ChannelAlexaArrayInput interface {
	pulumi.Input

	ToChannelAlexaArrayOutput() ChannelAlexaArrayOutput
	ToChannelAlexaArrayOutputWithContext(context.Context) ChannelAlexaArrayOutput
}

type ChannelAlexaArray []ChannelAlexaInput

func (ChannelAlexaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ChannelAlexa)(nil)).Elem()
}

func (i ChannelAlexaArray) ToChannelAlexaArrayOutput() ChannelAlexaArrayOutput {
	return i.ToChannelAlexaArrayOutputWithContext(context.Background())
}

func (i ChannelAlexaArray) ToChannelAlexaArrayOutputWithContext(ctx context.Context) ChannelAlexaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelAlexaArrayOutput)
}

// ChannelAlexaMapInput is an input type that accepts ChannelAlexaMap and ChannelAlexaMapOutput values.
// You can construct a concrete instance of `ChannelAlexaMapInput` via:
//
//	ChannelAlexaMap{ "key": ChannelAlexaArgs{...} }
type ChannelAlexaMapInput interface {
	pulumi.Input

	ToChannelAlexaMapOutput() ChannelAlexaMapOutput
	ToChannelAlexaMapOutputWithContext(context.Context) ChannelAlexaMapOutput
}

type ChannelAlexaMap map[string]ChannelAlexaInput

func (ChannelAlexaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ChannelAlexa)(nil)).Elem()
}

func (i ChannelAlexaMap) ToChannelAlexaMapOutput() ChannelAlexaMapOutput {
	return i.ToChannelAlexaMapOutputWithContext(context.Background())
}

func (i ChannelAlexaMap) ToChannelAlexaMapOutputWithContext(ctx context.Context) ChannelAlexaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelAlexaMapOutput)
}

type ChannelAlexaOutput struct{ *pulumi.OutputState }

func (ChannelAlexaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelAlexa)(nil)).Elem()
}

func (o ChannelAlexaOutput) ToChannelAlexaOutput() ChannelAlexaOutput {
	return o
}

func (o ChannelAlexaOutput) ToChannelAlexaOutputWithContext(ctx context.Context) ChannelAlexaOutput {
	return o
}

// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
func (o ChannelAlexaOutput) BotName() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelAlexa) pulumi.StringOutput { return v.BotName }).(pulumi.StringOutput)
}

// The supported Azure location where the resource exists. Changing this forces a new resource to be created.
func (o ChannelAlexaOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelAlexa) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource group where the Alexa Channel should be created. Changing this forces a new resource to be created.
func (o ChannelAlexaOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelAlexa) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The Alexa skill ID for the Alexa Channel.
func (o ChannelAlexaOutput) SkillId() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelAlexa) pulumi.StringOutput { return v.SkillId }).(pulumi.StringOutput)
}

type ChannelAlexaArrayOutput struct{ *pulumi.OutputState }

func (ChannelAlexaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ChannelAlexa)(nil)).Elem()
}

func (o ChannelAlexaArrayOutput) ToChannelAlexaArrayOutput() ChannelAlexaArrayOutput {
	return o
}

func (o ChannelAlexaArrayOutput) ToChannelAlexaArrayOutputWithContext(ctx context.Context) ChannelAlexaArrayOutput {
	return o
}

func (o ChannelAlexaArrayOutput) Index(i pulumi.IntInput) ChannelAlexaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ChannelAlexa {
		return vs[0].([]*ChannelAlexa)[vs[1].(int)]
	}).(ChannelAlexaOutput)
}

type ChannelAlexaMapOutput struct{ *pulumi.OutputState }

func (ChannelAlexaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ChannelAlexa)(nil)).Elem()
}

func (o ChannelAlexaMapOutput) ToChannelAlexaMapOutput() ChannelAlexaMapOutput {
	return o
}

func (o ChannelAlexaMapOutput) ToChannelAlexaMapOutputWithContext(ctx context.Context) ChannelAlexaMapOutput {
	return o
}

func (o ChannelAlexaMapOutput) MapIndex(k pulumi.StringInput) ChannelAlexaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ChannelAlexa {
		return vs[0].(map[string]*ChannelAlexa)[vs[1].(string)]
	}).(ChannelAlexaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelAlexaInput)(nil)).Elem(), &ChannelAlexa{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelAlexaArrayInput)(nil)).Elem(), ChannelAlexaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelAlexaMapInput)(nil)).Elem(), ChannelAlexaMap{})
	pulumi.RegisterOutputType(ChannelAlexaOutput{})
	pulumi.RegisterOutputType(ChannelAlexaArrayOutput{})
	pulumi.RegisterOutputType(ChannelAlexaMapOutput{})
}
