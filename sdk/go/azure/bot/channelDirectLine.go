// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bot

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Directline integration for a Bot Channel
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/bot"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := core.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleChannelsRegistration, err := bot.NewChannelsRegistration(ctx, "exampleChannelsRegistration", &bot.ChannelsRegistrationArgs{
//				Location:          pulumi.String("global"),
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku:               pulumi.String("F0"),
//				MicrosoftAppId:    *pulumi.String(current.ClientId),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = bot.NewChannelDirectLine(ctx, "exampleChannelDirectLine", &bot.ChannelDirectLineArgs{
//				BotName:           exampleChannelsRegistration.Name,
//				Location:          exampleChannelsRegistration.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sites: bot.ChannelDirectLineSiteArray{
//					&bot.ChannelDirectLineSiteArgs{
//						Name:    pulumi.String("default"),
//						Enabled: pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The Directline Channel for a Bot can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:bot/channelDirectLine:ChannelDirectLine example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.BotService/botServices/example/channels/DirectlineChannel
//
// ```
type ChannelDirectLine struct {
	pulumi.CustomResourceState

	// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
	BotName pulumi.StringOutput `pulumi:"botName"`
	// The supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource group in which to create the Bot Channel. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A site represents a client application that you want to connect to your bot. One or more `site` blocks as defined below.
	Sites ChannelDirectLineSiteArrayOutput `pulumi:"sites"`
}

// NewChannelDirectLine registers a new resource with the given unique name, arguments, and options.
func NewChannelDirectLine(ctx *pulumi.Context,
	name string, args *ChannelDirectLineArgs, opts ...pulumi.ResourceOption) (*ChannelDirectLine, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BotName == nil {
		return nil, errors.New("invalid value for required argument 'BotName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Sites == nil {
		return nil, errors.New("invalid value for required argument 'Sites'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ChannelDirectLine
	err := ctx.RegisterResource("azure:bot/channelDirectLine:ChannelDirectLine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChannelDirectLine gets an existing ChannelDirectLine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChannelDirectLine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChannelDirectLineState, opts ...pulumi.ResourceOption) (*ChannelDirectLine, error) {
	var resource ChannelDirectLine
	err := ctx.ReadResource("azure:bot/channelDirectLine:ChannelDirectLine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ChannelDirectLine resources.
type channelDirectLineState struct {
	// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
	BotName *string `pulumi:"botName"`
	// The supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name of the resource group in which to create the Bot Channel. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A site represents a client application that you want to connect to your bot. One or more `site` blocks as defined below.
	Sites []ChannelDirectLineSite `pulumi:"sites"`
}

type ChannelDirectLineState struct {
	// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
	BotName pulumi.StringPtrInput
	// The supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name of the resource group in which to create the Bot Channel. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A site represents a client application that you want to connect to your bot. One or more `site` blocks as defined below.
	Sites ChannelDirectLineSiteArrayInput
}

func (ChannelDirectLineState) ElementType() reflect.Type {
	return reflect.TypeOf((*channelDirectLineState)(nil)).Elem()
}

type channelDirectLineArgs struct {
	// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
	BotName string `pulumi:"botName"`
	// The supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name of the resource group in which to create the Bot Channel. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A site represents a client application that you want to connect to your bot. One or more `site` blocks as defined below.
	Sites []ChannelDirectLineSite `pulumi:"sites"`
}

// The set of arguments for constructing a ChannelDirectLine resource.
type ChannelDirectLineArgs struct {
	// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
	BotName pulumi.StringInput
	// The supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name of the resource group in which to create the Bot Channel. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A site represents a client application that you want to connect to your bot. One or more `site` blocks as defined below.
	Sites ChannelDirectLineSiteArrayInput
}

func (ChannelDirectLineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*channelDirectLineArgs)(nil)).Elem()
}

type ChannelDirectLineInput interface {
	pulumi.Input

	ToChannelDirectLineOutput() ChannelDirectLineOutput
	ToChannelDirectLineOutputWithContext(ctx context.Context) ChannelDirectLineOutput
}

func (*ChannelDirectLine) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelDirectLine)(nil)).Elem()
}

func (i *ChannelDirectLine) ToChannelDirectLineOutput() ChannelDirectLineOutput {
	return i.ToChannelDirectLineOutputWithContext(context.Background())
}

func (i *ChannelDirectLine) ToChannelDirectLineOutputWithContext(ctx context.Context) ChannelDirectLineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelDirectLineOutput)
}

// ChannelDirectLineArrayInput is an input type that accepts ChannelDirectLineArray and ChannelDirectLineArrayOutput values.
// You can construct a concrete instance of `ChannelDirectLineArrayInput` via:
//
//	ChannelDirectLineArray{ ChannelDirectLineArgs{...} }
type ChannelDirectLineArrayInput interface {
	pulumi.Input

	ToChannelDirectLineArrayOutput() ChannelDirectLineArrayOutput
	ToChannelDirectLineArrayOutputWithContext(context.Context) ChannelDirectLineArrayOutput
}

type ChannelDirectLineArray []ChannelDirectLineInput

func (ChannelDirectLineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ChannelDirectLine)(nil)).Elem()
}

func (i ChannelDirectLineArray) ToChannelDirectLineArrayOutput() ChannelDirectLineArrayOutput {
	return i.ToChannelDirectLineArrayOutputWithContext(context.Background())
}

func (i ChannelDirectLineArray) ToChannelDirectLineArrayOutputWithContext(ctx context.Context) ChannelDirectLineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelDirectLineArrayOutput)
}

// ChannelDirectLineMapInput is an input type that accepts ChannelDirectLineMap and ChannelDirectLineMapOutput values.
// You can construct a concrete instance of `ChannelDirectLineMapInput` via:
//
//	ChannelDirectLineMap{ "key": ChannelDirectLineArgs{...} }
type ChannelDirectLineMapInput interface {
	pulumi.Input

	ToChannelDirectLineMapOutput() ChannelDirectLineMapOutput
	ToChannelDirectLineMapOutputWithContext(context.Context) ChannelDirectLineMapOutput
}

type ChannelDirectLineMap map[string]ChannelDirectLineInput

func (ChannelDirectLineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ChannelDirectLine)(nil)).Elem()
}

func (i ChannelDirectLineMap) ToChannelDirectLineMapOutput() ChannelDirectLineMapOutput {
	return i.ToChannelDirectLineMapOutputWithContext(context.Background())
}

func (i ChannelDirectLineMap) ToChannelDirectLineMapOutputWithContext(ctx context.Context) ChannelDirectLineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelDirectLineMapOutput)
}

type ChannelDirectLineOutput struct{ *pulumi.OutputState }

func (ChannelDirectLineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelDirectLine)(nil)).Elem()
}

func (o ChannelDirectLineOutput) ToChannelDirectLineOutput() ChannelDirectLineOutput {
	return o
}

func (o ChannelDirectLineOutput) ToChannelDirectLineOutputWithContext(ctx context.Context) ChannelDirectLineOutput {
	return o
}

// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
func (o ChannelDirectLineOutput) BotName() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelDirectLine) pulumi.StringOutput { return v.BotName }).(pulumi.StringOutput)
}

// The supported Azure location where the resource exists. Changing this forces a new resource to be created.
func (o ChannelDirectLineOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelDirectLine) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource group in which to create the Bot Channel. Changing this forces a new resource to be created.
func (o ChannelDirectLineOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelDirectLine) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A site represents a client application that you want to connect to your bot. One or more `site` blocks as defined below.
func (o ChannelDirectLineOutput) Sites() ChannelDirectLineSiteArrayOutput {
	return o.ApplyT(func(v *ChannelDirectLine) ChannelDirectLineSiteArrayOutput { return v.Sites }).(ChannelDirectLineSiteArrayOutput)
}

type ChannelDirectLineArrayOutput struct{ *pulumi.OutputState }

func (ChannelDirectLineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ChannelDirectLine)(nil)).Elem()
}

func (o ChannelDirectLineArrayOutput) ToChannelDirectLineArrayOutput() ChannelDirectLineArrayOutput {
	return o
}

func (o ChannelDirectLineArrayOutput) ToChannelDirectLineArrayOutputWithContext(ctx context.Context) ChannelDirectLineArrayOutput {
	return o
}

func (o ChannelDirectLineArrayOutput) Index(i pulumi.IntInput) ChannelDirectLineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ChannelDirectLine {
		return vs[0].([]*ChannelDirectLine)[vs[1].(int)]
	}).(ChannelDirectLineOutput)
}

type ChannelDirectLineMapOutput struct{ *pulumi.OutputState }

func (ChannelDirectLineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ChannelDirectLine)(nil)).Elem()
}

func (o ChannelDirectLineMapOutput) ToChannelDirectLineMapOutput() ChannelDirectLineMapOutput {
	return o
}

func (o ChannelDirectLineMapOutput) ToChannelDirectLineMapOutputWithContext(ctx context.Context) ChannelDirectLineMapOutput {
	return o
}

func (o ChannelDirectLineMapOutput) MapIndex(k pulumi.StringInput) ChannelDirectLineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ChannelDirectLine {
		return vs[0].(map[string]*ChannelDirectLine)[vs[1].(string)]
	}).(ChannelDirectLineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelDirectLineInput)(nil)).Elem(), &ChannelDirectLine{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelDirectLineArrayInput)(nil)).Elem(), ChannelDirectLineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelDirectLineMapInput)(nil)).Elem(), ChannelDirectLineMap{})
	pulumi.RegisterOutputType(ChannelDirectLineOutput{})
	pulumi.RegisterOutputType(ChannelDirectLineArrayOutput{})
	pulumi.RegisterOutputType(ChannelDirectLineMapOutput{})
}
