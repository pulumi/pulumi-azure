// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bot

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a SMS integration for a Bot Channel
//
// > **Note** A bot can only have a single SMS Channel associated with it.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/bot"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := core.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleChannelsRegistration, err := bot.NewChannelsRegistration(ctx, "exampleChannelsRegistration", &bot.ChannelsRegistrationArgs{
//				Location:          pulumi.String("global"),
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku:               pulumi.String("F0"),
//				MicrosoftAppId:    *pulumi.String(current.ClientId),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = bot.NewChannelSms(ctx, "exampleChannelSms", &bot.ChannelSmsArgs{
//				BotName:                     exampleChannelsRegistration.Name,
//				Location:                    exampleChannelsRegistration.Location,
//				ResourceGroupName:           exampleResourceGroup.Name,
//				SmsChannelAccountSecurityId: pulumi.String("BG61f7cf5157f439b084e98256409c2815"),
//				SmsChannelAuthToken:         pulumi.String("jh8980432610052ed4e29565c5e232f"),
//				PhoneNumber:                 pulumi.String("+12313803556"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The SMS Integration for a Bot Channel can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:bot/channelSms:ChannelSms example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.BotService/botServices/botService1/channels/SmsChannel
//
// ```
type ChannelSms struct {
	pulumi.CustomResourceState

	// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
	BotName pulumi.StringOutput `pulumi:"botName"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The phone number for the SMS Channel.
	PhoneNumber pulumi.StringOutput `pulumi:"phoneNumber"`
	// The name of the resource group where the SMS Channel should be created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The account security identifier (SID) for the SMS Channel.
	SmsChannelAccountSecurityId pulumi.StringOutput `pulumi:"smsChannelAccountSecurityId"`
	// The authorization token for the SMS Channel.
	SmsChannelAuthToken pulumi.StringOutput `pulumi:"smsChannelAuthToken"`
}

// NewChannelSms registers a new resource with the given unique name, arguments, and options.
func NewChannelSms(ctx *pulumi.Context,
	name string, args *ChannelSmsArgs, opts ...pulumi.ResourceOption) (*ChannelSms, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BotName == nil {
		return nil, errors.New("invalid value for required argument 'BotName'")
	}
	if args.PhoneNumber == nil {
		return nil, errors.New("invalid value for required argument 'PhoneNumber'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SmsChannelAccountSecurityId == nil {
		return nil, errors.New("invalid value for required argument 'SmsChannelAccountSecurityId'")
	}
	if args.SmsChannelAuthToken == nil {
		return nil, errors.New("invalid value for required argument 'SmsChannelAuthToken'")
	}
	if args.SmsChannelAuthToken != nil {
		args.SmsChannelAuthToken = pulumi.ToSecret(args.SmsChannelAuthToken).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"smsChannelAuthToken",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ChannelSms
	err := ctx.RegisterResource("azure:bot/channelSms:ChannelSms", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChannelSms gets an existing ChannelSms resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChannelSms(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChannelSmsState, opts ...pulumi.ResourceOption) (*ChannelSms, error) {
	var resource ChannelSms
	err := ctx.ReadResource("azure:bot/channelSms:ChannelSms", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ChannelSms resources.
type channelSmsState struct {
	// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
	BotName *string `pulumi:"botName"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The phone number for the SMS Channel.
	PhoneNumber *string `pulumi:"phoneNumber"`
	// The name of the resource group where the SMS Channel should be created. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The account security identifier (SID) for the SMS Channel.
	SmsChannelAccountSecurityId *string `pulumi:"smsChannelAccountSecurityId"`
	// The authorization token for the SMS Channel.
	SmsChannelAuthToken *string `pulumi:"smsChannelAuthToken"`
}

type ChannelSmsState struct {
	// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
	BotName pulumi.StringPtrInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The phone number for the SMS Channel.
	PhoneNumber pulumi.StringPtrInput
	// The name of the resource group where the SMS Channel should be created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The account security identifier (SID) for the SMS Channel.
	SmsChannelAccountSecurityId pulumi.StringPtrInput
	// The authorization token for the SMS Channel.
	SmsChannelAuthToken pulumi.StringPtrInput
}

func (ChannelSmsState) ElementType() reflect.Type {
	return reflect.TypeOf((*channelSmsState)(nil)).Elem()
}

type channelSmsArgs struct {
	// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
	BotName string `pulumi:"botName"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The phone number for the SMS Channel.
	PhoneNumber string `pulumi:"phoneNumber"`
	// The name of the resource group where the SMS Channel should be created. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The account security identifier (SID) for the SMS Channel.
	SmsChannelAccountSecurityId string `pulumi:"smsChannelAccountSecurityId"`
	// The authorization token for the SMS Channel.
	SmsChannelAuthToken string `pulumi:"smsChannelAuthToken"`
}

// The set of arguments for constructing a ChannelSms resource.
type ChannelSmsArgs struct {
	// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
	BotName pulumi.StringInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The phone number for the SMS Channel.
	PhoneNumber pulumi.StringInput
	// The name of the resource group where the SMS Channel should be created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// The account security identifier (SID) for the SMS Channel.
	SmsChannelAccountSecurityId pulumi.StringInput
	// The authorization token for the SMS Channel.
	SmsChannelAuthToken pulumi.StringInput
}

func (ChannelSmsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*channelSmsArgs)(nil)).Elem()
}

type ChannelSmsInput interface {
	pulumi.Input

	ToChannelSmsOutput() ChannelSmsOutput
	ToChannelSmsOutputWithContext(ctx context.Context) ChannelSmsOutput
}

func (*ChannelSms) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelSms)(nil)).Elem()
}

func (i *ChannelSms) ToChannelSmsOutput() ChannelSmsOutput {
	return i.ToChannelSmsOutputWithContext(context.Background())
}

func (i *ChannelSms) ToChannelSmsOutputWithContext(ctx context.Context) ChannelSmsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelSmsOutput)
}

// ChannelSmsArrayInput is an input type that accepts ChannelSmsArray and ChannelSmsArrayOutput values.
// You can construct a concrete instance of `ChannelSmsArrayInput` via:
//
//	ChannelSmsArray{ ChannelSmsArgs{...} }
type ChannelSmsArrayInput interface {
	pulumi.Input

	ToChannelSmsArrayOutput() ChannelSmsArrayOutput
	ToChannelSmsArrayOutputWithContext(context.Context) ChannelSmsArrayOutput
}

type ChannelSmsArray []ChannelSmsInput

func (ChannelSmsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ChannelSms)(nil)).Elem()
}

func (i ChannelSmsArray) ToChannelSmsArrayOutput() ChannelSmsArrayOutput {
	return i.ToChannelSmsArrayOutputWithContext(context.Background())
}

func (i ChannelSmsArray) ToChannelSmsArrayOutputWithContext(ctx context.Context) ChannelSmsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelSmsArrayOutput)
}

// ChannelSmsMapInput is an input type that accepts ChannelSmsMap and ChannelSmsMapOutput values.
// You can construct a concrete instance of `ChannelSmsMapInput` via:
//
//	ChannelSmsMap{ "key": ChannelSmsArgs{...} }
type ChannelSmsMapInput interface {
	pulumi.Input

	ToChannelSmsMapOutput() ChannelSmsMapOutput
	ToChannelSmsMapOutputWithContext(context.Context) ChannelSmsMapOutput
}

type ChannelSmsMap map[string]ChannelSmsInput

func (ChannelSmsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ChannelSms)(nil)).Elem()
}

func (i ChannelSmsMap) ToChannelSmsMapOutput() ChannelSmsMapOutput {
	return i.ToChannelSmsMapOutputWithContext(context.Background())
}

func (i ChannelSmsMap) ToChannelSmsMapOutputWithContext(ctx context.Context) ChannelSmsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelSmsMapOutput)
}

type ChannelSmsOutput struct{ *pulumi.OutputState }

func (ChannelSmsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelSms)(nil)).Elem()
}

func (o ChannelSmsOutput) ToChannelSmsOutput() ChannelSmsOutput {
	return o
}

func (o ChannelSmsOutput) ToChannelSmsOutputWithContext(ctx context.Context) ChannelSmsOutput {
	return o
}

// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
func (o ChannelSmsOutput) BotName() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelSms) pulumi.StringOutput { return v.BotName }).(pulumi.StringOutput)
}

// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
func (o ChannelSmsOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelSms) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The phone number for the SMS Channel.
func (o ChannelSmsOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelSms) pulumi.StringOutput { return v.PhoneNumber }).(pulumi.StringOutput)
}

// The name of the resource group where the SMS Channel should be created. Changing this forces a new resource to be created.
func (o ChannelSmsOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelSms) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The account security identifier (SID) for the SMS Channel.
func (o ChannelSmsOutput) SmsChannelAccountSecurityId() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelSms) pulumi.StringOutput { return v.SmsChannelAccountSecurityId }).(pulumi.StringOutput)
}

// The authorization token for the SMS Channel.
func (o ChannelSmsOutput) SmsChannelAuthToken() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelSms) pulumi.StringOutput { return v.SmsChannelAuthToken }).(pulumi.StringOutput)
}

type ChannelSmsArrayOutput struct{ *pulumi.OutputState }

func (ChannelSmsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ChannelSms)(nil)).Elem()
}

func (o ChannelSmsArrayOutput) ToChannelSmsArrayOutput() ChannelSmsArrayOutput {
	return o
}

func (o ChannelSmsArrayOutput) ToChannelSmsArrayOutputWithContext(ctx context.Context) ChannelSmsArrayOutput {
	return o
}

func (o ChannelSmsArrayOutput) Index(i pulumi.IntInput) ChannelSmsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ChannelSms {
		return vs[0].([]*ChannelSms)[vs[1].(int)]
	}).(ChannelSmsOutput)
}

type ChannelSmsMapOutput struct{ *pulumi.OutputState }

func (ChannelSmsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ChannelSms)(nil)).Elem()
}

func (o ChannelSmsMapOutput) ToChannelSmsMapOutput() ChannelSmsMapOutput {
	return o
}

func (o ChannelSmsMapOutput) ToChannelSmsMapOutputWithContext(ctx context.Context) ChannelSmsMapOutput {
	return o
}

func (o ChannelSmsMapOutput) MapIndex(k pulumi.StringInput) ChannelSmsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ChannelSms {
		return vs[0].(map[string]*ChannelSms)[vs[1].(string)]
	}).(ChannelSmsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelSmsInput)(nil)).Elem(), &ChannelSms{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelSmsArrayInput)(nil)).Elem(), ChannelSmsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelSmsMapInput)(nil)).Elem(), ChannelSmsMap{})
	pulumi.RegisterOutputType(ChannelSmsOutput{})
	pulumi.RegisterOutputType(ChannelSmsArrayOutput{})
	pulumi.RegisterOutputType(ChannelSmsMapOutput{})
}
