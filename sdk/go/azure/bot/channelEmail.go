// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package bot

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Email integration for a Bot Channel
//
// > **Note** A bot can only have a single Email Channel associated with it.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/bot_channel_email.markdown.
type ChannelEmail struct {
	pulumi.CustomResourceState

	// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
	BotName pulumi.StringOutput `pulumi:"botName"`
	// The email address that the Bot will authenticate with.
	EmailAddress pulumi.StringOutput `pulumi:"emailAddress"`
	// The email password that the Bot will authenticate with.
	EmailPassword pulumi.StringOutput `pulumi:"emailPassword"`
	// The supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource group in which to create the Bot Channel. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
}

// NewChannelEmail registers a new resource with the given unique name, arguments, and options.
func NewChannelEmail(ctx *pulumi.Context,
	name string, args *ChannelEmailArgs, opts ...pulumi.ResourceOption) (*ChannelEmail, error) {
	if args == nil || args.BotName == nil {
		return nil, errors.New("missing required argument 'BotName'")
	}
	if args == nil || args.EmailAddress == nil {
		return nil, errors.New("missing required argument 'EmailAddress'")
	}
	if args == nil || args.EmailPassword == nil {
		return nil, errors.New("missing required argument 'EmailPassword'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &ChannelEmailArgs{}
	}
	var resource ChannelEmail
	err := ctx.RegisterResource("azure:bot/channelEmail:ChannelEmail", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChannelEmail gets an existing ChannelEmail resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChannelEmail(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChannelEmailState, opts ...pulumi.ResourceOption) (*ChannelEmail, error) {
	var resource ChannelEmail
	err := ctx.ReadResource("azure:bot/channelEmail:ChannelEmail", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ChannelEmail resources.
type channelEmailState struct {
	// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
	BotName *string `pulumi:"botName"`
	// The email address that the Bot will authenticate with.
	EmailAddress *string `pulumi:"emailAddress"`
	// The email password that the Bot will authenticate with.
	EmailPassword *string `pulumi:"emailPassword"`
	// The supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name of the resource group in which to create the Bot Channel. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
}

type ChannelEmailState struct {
	// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
	BotName pulumi.StringPtrInput
	// The email address that the Bot will authenticate with.
	EmailAddress pulumi.StringPtrInput
	// The email password that the Bot will authenticate with.
	EmailPassword pulumi.StringPtrInput
	// The supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name of the resource group in which to create the Bot Channel. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
}

func (ChannelEmailState) ElementType() reflect.Type {
	return reflect.TypeOf((*channelEmailState)(nil)).Elem()
}

type channelEmailArgs struct {
	// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
	BotName string `pulumi:"botName"`
	// The email address that the Bot will authenticate with.
	EmailAddress string `pulumi:"emailAddress"`
	// The email password that the Bot will authenticate with.
	EmailPassword string `pulumi:"emailPassword"`
	// The supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name of the resource group in which to create the Bot Channel. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a ChannelEmail resource.
type ChannelEmailArgs struct {
	// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
	BotName pulumi.StringInput
	// The email address that the Bot will authenticate with.
	EmailAddress pulumi.StringInput
	// The email password that the Bot will authenticate with.
	EmailPassword pulumi.StringInput
	// The supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name of the resource group in which to create the Bot Channel. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
}

func (ChannelEmailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*channelEmailArgs)(nil)).Elem()
}

