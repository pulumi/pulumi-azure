// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package hpc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CacheAccessPolicyAccessRule struct {
	// The access level for this rule. Possible values are: `rw`, `ro`, `no`.
	Access string `pulumi:"access"`
	// The anonymous GID used when `rootSquashEnabled` is `true`.
	AnonymousGid *int `pulumi:"anonymousGid"`
	// The anonymous UID used when `rootSquashEnabled` is `true`.
	AnonymousUid *int `pulumi:"anonymousUid"`
	// The filter applied to the `scope` for this rule. The filter's format depends on its scope: `default` scope matches all clients and has no filter value; `network` scope takes a CIDR format; `host` takes an IP address or fully qualified domain name. If a client does not match any filter rule and there is no default rule, access is denied.
	Filter *string `pulumi:"filter"`
	// Whether to enable [root squash](https://docs.microsoft.com/en-us/azure/hpc-cache/access-policies#root-squash)? Defaults to `false`.
	RootSquashEnabled *bool `pulumi:"rootSquashEnabled"`
	// The scope of this rule. The `scope` and (potentially) the `filter` determine which clients match the rule. Possible values are: `default`, `network`, `host`.
	Scope string `pulumi:"scope"`
	// Whether allow access to subdirectories under the root export? Defaults to `false`.
	SubmountAccessEnabled *bool `pulumi:"submountAccessEnabled"`
	// Whether [SUID](https://docs.microsoft.com/en-us/azure/hpc-cache/access-policies#suid) is allowed? Defaults to `false`.
	SuidEnabled *bool `pulumi:"suidEnabled"`
}

// CacheAccessPolicyAccessRuleInput is an input type that accepts CacheAccessPolicyAccessRuleArgs and CacheAccessPolicyAccessRuleOutput values.
// You can construct a concrete instance of `CacheAccessPolicyAccessRuleInput` via:
//
//          CacheAccessPolicyAccessRuleArgs{...}
type CacheAccessPolicyAccessRuleInput interface {
	pulumi.Input

	ToCacheAccessPolicyAccessRuleOutput() CacheAccessPolicyAccessRuleOutput
	ToCacheAccessPolicyAccessRuleOutputWithContext(context.Context) CacheAccessPolicyAccessRuleOutput
}

type CacheAccessPolicyAccessRuleArgs struct {
	// The access level for this rule. Possible values are: `rw`, `ro`, `no`.
	Access pulumi.StringInput `pulumi:"access"`
	// The anonymous GID used when `rootSquashEnabled` is `true`.
	AnonymousGid pulumi.IntPtrInput `pulumi:"anonymousGid"`
	// The anonymous UID used when `rootSquashEnabled` is `true`.
	AnonymousUid pulumi.IntPtrInput `pulumi:"anonymousUid"`
	// The filter applied to the `scope` for this rule. The filter's format depends on its scope: `default` scope matches all clients and has no filter value; `network` scope takes a CIDR format; `host` takes an IP address or fully qualified domain name. If a client does not match any filter rule and there is no default rule, access is denied.
	Filter pulumi.StringPtrInput `pulumi:"filter"`
	// Whether to enable [root squash](https://docs.microsoft.com/en-us/azure/hpc-cache/access-policies#root-squash)? Defaults to `false`.
	RootSquashEnabled pulumi.BoolPtrInput `pulumi:"rootSquashEnabled"`
	// The scope of this rule. The `scope` and (potentially) the `filter` determine which clients match the rule. Possible values are: `default`, `network`, `host`.
	Scope pulumi.StringInput `pulumi:"scope"`
	// Whether allow access to subdirectories under the root export? Defaults to `false`.
	SubmountAccessEnabled pulumi.BoolPtrInput `pulumi:"submountAccessEnabled"`
	// Whether [SUID](https://docs.microsoft.com/en-us/azure/hpc-cache/access-policies#suid) is allowed? Defaults to `false`.
	SuidEnabled pulumi.BoolPtrInput `pulumi:"suidEnabled"`
}

func (CacheAccessPolicyAccessRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheAccessPolicyAccessRule)(nil)).Elem()
}

func (i CacheAccessPolicyAccessRuleArgs) ToCacheAccessPolicyAccessRuleOutput() CacheAccessPolicyAccessRuleOutput {
	return i.ToCacheAccessPolicyAccessRuleOutputWithContext(context.Background())
}

func (i CacheAccessPolicyAccessRuleArgs) ToCacheAccessPolicyAccessRuleOutputWithContext(ctx context.Context) CacheAccessPolicyAccessRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheAccessPolicyAccessRuleOutput)
}

// CacheAccessPolicyAccessRuleArrayInput is an input type that accepts CacheAccessPolicyAccessRuleArray and CacheAccessPolicyAccessRuleArrayOutput values.
// You can construct a concrete instance of `CacheAccessPolicyAccessRuleArrayInput` via:
//
//          CacheAccessPolicyAccessRuleArray{ CacheAccessPolicyAccessRuleArgs{...} }
type CacheAccessPolicyAccessRuleArrayInput interface {
	pulumi.Input

	ToCacheAccessPolicyAccessRuleArrayOutput() CacheAccessPolicyAccessRuleArrayOutput
	ToCacheAccessPolicyAccessRuleArrayOutputWithContext(context.Context) CacheAccessPolicyAccessRuleArrayOutput
}

type CacheAccessPolicyAccessRuleArray []CacheAccessPolicyAccessRuleInput

func (CacheAccessPolicyAccessRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CacheAccessPolicyAccessRule)(nil)).Elem()
}

func (i CacheAccessPolicyAccessRuleArray) ToCacheAccessPolicyAccessRuleArrayOutput() CacheAccessPolicyAccessRuleArrayOutput {
	return i.ToCacheAccessPolicyAccessRuleArrayOutputWithContext(context.Background())
}

func (i CacheAccessPolicyAccessRuleArray) ToCacheAccessPolicyAccessRuleArrayOutputWithContext(ctx context.Context) CacheAccessPolicyAccessRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheAccessPolicyAccessRuleArrayOutput)
}

type CacheAccessPolicyAccessRuleOutput struct{ *pulumi.OutputState }

func (CacheAccessPolicyAccessRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheAccessPolicyAccessRule)(nil)).Elem()
}

func (o CacheAccessPolicyAccessRuleOutput) ToCacheAccessPolicyAccessRuleOutput() CacheAccessPolicyAccessRuleOutput {
	return o
}

func (o CacheAccessPolicyAccessRuleOutput) ToCacheAccessPolicyAccessRuleOutputWithContext(ctx context.Context) CacheAccessPolicyAccessRuleOutput {
	return o
}

// The access level for this rule. Possible values are: `rw`, `ro`, `no`.
func (o CacheAccessPolicyAccessRuleOutput) Access() pulumi.StringOutput {
	return o.ApplyT(func(v CacheAccessPolicyAccessRule) string { return v.Access }).(pulumi.StringOutput)
}

// The anonymous GID used when `rootSquashEnabled` is `true`.
func (o CacheAccessPolicyAccessRuleOutput) AnonymousGid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheAccessPolicyAccessRule) *int { return v.AnonymousGid }).(pulumi.IntPtrOutput)
}

// The anonymous UID used when `rootSquashEnabled` is `true`.
func (o CacheAccessPolicyAccessRuleOutput) AnonymousUid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheAccessPolicyAccessRule) *int { return v.AnonymousUid }).(pulumi.IntPtrOutput)
}

// The filter applied to the `scope` for this rule. The filter's format depends on its scope: `default` scope matches all clients and has no filter value; `network` scope takes a CIDR format; `host` takes an IP address or fully qualified domain name. If a client does not match any filter rule and there is no default rule, access is denied.
func (o CacheAccessPolicyAccessRuleOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheAccessPolicyAccessRule) *string { return v.Filter }).(pulumi.StringPtrOutput)
}

// Whether to enable [root squash](https://docs.microsoft.com/en-us/azure/hpc-cache/access-policies#root-squash)? Defaults to `false`.
func (o CacheAccessPolicyAccessRuleOutput) RootSquashEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheAccessPolicyAccessRule) *bool { return v.RootSquashEnabled }).(pulumi.BoolPtrOutput)
}

// The scope of this rule. The `scope` and (potentially) the `filter` determine which clients match the rule. Possible values are: `default`, `network`, `host`.
func (o CacheAccessPolicyAccessRuleOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v CacheAccessPolicyAccessRule) string { return v.Scope }).(pulumi.StringOutput)
}

// Whether allow access to subdirectories under the root export? Defaults to `false`.
func (o CacheAccessPolicyAccessRuleOutput) SubmountAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheAccessPolicyAccessRule) *bool { return v.SubmountAccessEnabled }).(pulumi.BoolPtrOutput)
}

// Whether [SUID](https://docs.microsoft.com/en-us/azure/hpc-cache/access-policies#suid) is allowed? Defaults to `false`.
func (o CacheAccessPolicyAccessRuleOutput) SuidEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheAccessPolicyAccessRule) *bool { return v.SuidEnabled }).(pulumi.BoolPtrOutput)
}

type CacheAccessPolicyAccessRuleArrayOutput struct{ *pulumi.OutputState }

func (CacheAccessPolicyAccessRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CacheAccessPolicyAccessRule)(nil)).Elem()
}

func (o CacheAccessPolicyAccessRuleArrayOutput) ToCacheAccessPolicyAccessRuleArrayOutput() CacheAccessPolicyAccessRuleArrayOutput {
	return o
}

func (o CacheAccessPolicyAccessRuleArrayOutput) ToCacheAccessPolicyAccessRuleArrayOutputWithContext(ctx context.Context) CacheAccessPolicyAccessRuleArrayOutput {
	return o
}

func (o CacheAccessPolicyAccessRuleArrayOutput) Index(i pulumi.IntInput) CacheAccessPolicyAccessRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CacheAccessPolicyAccessRule {
		return vs[0].([]CacheAccessPolicyAccessRule)[vs[1].(int)]
	}).(CacheAccessPolicyAccessRuleOutput)
}

type CacheDefaultAccessPolicy struct {
	// One to three `accessRule` blocks as defined above.
	AccessRules []CacheDefaultAccessPolicyAccessRule `pulumi:"accessRules"`
}

// CacheDefaultAccessPolicyInput is an input type that accepts CacheDefaultAccessPolicyArgs and CacheDefaultAccessPolicyOutput values.
// You can construct a concrete instance of `CacheDefaultAccessPolicyInput` via:
//
//          CacheDefaultAccessPolicyArgs{...}
type CacheDefaultAccessPolicyInput interface {
	pulumi.Input

	ToCacheDefaultAccessPolicyOutput() CacheDefaultAccessPolicyOutput
	ToCacheDefaultAccessPolicyOutputWithContext(context.Context) CacheDefaultAccessPolicyOutput
}

type CacheDefaultAccessPolicyArgs struct {
	// One to three `accessRule` blocks as defined above.
	AccessRules CacheDefaultAccessPolicyAccessRuleArrayInput `pulumi:"accessRules"`
}

func (CacheDefaultAccessPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheDefaultAccessPolicy)(nil)).Elem()
}

func (i CacheDefaultAccessPolicyArgs) ToCacheDefaultAccessPolicyOutput() CacheDefaultAccessPolicyOutput {
	return i.ToCacheDefaultAccessPolicyOutputWithContext(context.Background())
}

func (i CacheDefaultAccessPolicyArgs) ToCacheDefaultAccessPolicyOutputWithContext(ctx context.Context) CacheDefaultAccessPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheDefaultAccessPolicyOutput)
}

func (i CacheDefaultAccessPolicyArgs) ToCacheDefaultAccessPolicyPtrOutput() CacheDefaultAccessPolicyPtrOutput {
	return i.ToCacheDefaultAccessPolicyPtrOutputWithContext(context.Background())
}

func (i CacheDefaultAccessPolicyArgs) ToCacheDefaultAccessPolicyPtrOutputWithContext(ctx context.Context) CacheDefaultAccessPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheDefaultAccessPolicyOutput).ToCacheDefaultAccessPolicyPtrOutputWithContext(ctx)
}

// CacheDefaultAccessPolicyPtrInput is an input type that accepts CacheDefaultAccessPolicyArgs, CacheDefaultAccessPolicyPtr and CacheDefaultAccessPolicyPtrOutput values.
// You can construct a concrete instance of `CacheDefaultAccessPolicyPtrInput` via:
//
//          CacheDefaultAccessPolicyArgs{...}
//
//  or:
//
//          nil
type CacheDefaultAccessPolicyPtrInput interface {
	pulumi.Input

	ToCacheDefaultAccessPolicyPtrOutput() CacheDefaultAccessPolicyPtrOutput
	ToCacheDefaultAccessPolicyPtrOutputWithContext(context.Context) CacheDefaultAccessPolicyPtrOutput
}

type cacheDefaultAccessPolicyPtrType CacheDefaultAccessPolicyArgs

func CacheDefaultAccessPolicyPtr(v *CacheDefaultAccessPolicyArgs) CacheDefaultAccessPolicyPtrInput {
	return (*cacheDefaultAccessPolicyPtrType)(v)
}

func (*cacheDefaultAccessPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheDefaultAccessPolicy)(nil)).Elem()
}

func (i *cacheDefaultAccessPolicyPtrType) ToCacheDefaultAccessPolicyPtrOutput() CacheDefaultAccessPolicyPtrOutput {
	return i.ToCacheDefaultAccessPolicyPtrOutputWithContext(context.Background())
}

func (i *cacheDefaultAccessPolicyPtrType) ToCacheDefaultAccessPolicyPtrOutputWithContext(ctx context.Context) CacheDefaultAccessPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheDefaultAccessPolicyPtrOutput)
}

type CacheDefaultAccessPolicyOutput struct{ *pulumi.OutputState }

func (CacheDefaultAccessPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheDefaultAccessPolicy)(nil)).Elem()
}

func (o CacheDefaultAccessPolicyOutput) ToCacheDefaultAccessPolicyOutput() CacheDefaultAccessPolicyOutput {
	return o
}

func (o CacheDefaultAccessPolicyOutput) ToCacheDefaultAccessPolicyOutputWithContext(ctx context.Context) CacheDefaultAccessPolicyOutput {
	return o
}

func (o CacheDefaultAccessPolicyOutput) ToCacheDefaultAccessPolicyPtrOutput() CacheDefaultAccessPolicyPtrOutput {
	return o.ToCacheDefaultAccessPolicyPtrOutputWithContext(context.Background())
}

func (o CacheDefaultAccessPolicyOutput) ToCacheDefaultAccessPolicyPtrOutputWithContext(ctx context.Context) CacheDefaultAccessPolicyPtrOutput {
	return o.ApplyT(func(v CacheDefaultAccessPolicy) *CacheDefaultAccessPolicy {
		return &v
	}).(CacheDefaultAccessPolicyPtrOutput)
}

// One to three `accessRule` blocks as defined above.
func (o CacheDefaultAccessPolicyOutput) AccessRules() CacheDefaultAccessPolicyAccessRuleArrayOutput {
	return o.ApplyT(func(v CacheDefaultAccessPolicy) []CacheDefaultAccessPolicyAccessRule { return v.AccessRules }).(CacheDefaultAccessPolicyAccessRuleArrayOutput)
}

type CacheDefaultAccessPolicyPtrOutput struct{ *pulumi.OutputState }

func (CacheDefaultAccessPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheDefaultAccessPolicy)(nil)).Elem()
}

func (o CacheDefaultAccessPolicyPtrOutput) ToCacheDefaultAccessPolicyPtrOutput() CacheDefaultAccessPolicyPtrOutput {
	return o
}

func (o CacheDefaultAccessPolicyPtrOutput) ToCacheDefaultAccessPolicyPtrOutputWithContext(ctx context.Context) CacheDefaultAccessPolicyPtrOutput {
	return o
}

func (o CacheDefaultAccessPolicyPtrOutput) Elem() CacheDefaultAccessPolicyOutput {
	return o.ApplyT(func(v *CacheDefaultAccessPolicy) CacheDefaultAccessPolicy { return *v }).(CacheDefaultAccessPolicyOutput)
}

// One to three `accessRule` blocks as defined above.
func (o CacheDefaultAccessPolicyPtrOutput) AccessRules() CacheDefaultAccessPolicyAccessRuleArrayOutput {
	return o.ApplyT(func(v *CacheDefaultAccessPolicy) []CacheDefaultAccessPolicyAccessRule {
		if v == nil {
			return nil
		}
		return v.AccessRules
	}).(CacheDefaultAccessPolicyAccessRuleArrayOutput)
}

type CacheDefaultAccessPolicyAccessRule struct {
	// The access level for this rule. Possible values are: `rw`, `ro`, `no`.
	Access string `pulumi:"access"`
	// The anonymous GID used when `rootSquashEnabled` is `true`.
	AnonymousGid *int `pulumi:"anonymousGid"`
	// The anonymous UID used when `rootSquashEnabled` is `true`.
	AnonymousUid *int `pulumi:"anonymousUid"`
	// The filter applied to the `scope` for this rule. The filter's format depends on its scope: `default` scope matches all clients and has no filter value; `network` scope takes a CIDR format; `host` takes an IP address or fully qualified domain name. If a client does not match any filter rule and there is no default rule, access is denied.
	Filter *string `pulumi:"filter"`
	// Whether to enable [root squash](https://docs.microsoft.com/en-us/azure/hpc-cache/access-policies#root-squash)? Defaults to `false`.
	RootSquashEnabled *bool `pulumi:"rootSquashEnabled"`
	// The scope of this rule. The `scope` and (potentially) the `filter` determine which clients match the rule. Possible values are: `default`, `network`, `host`.
	Scope string `pulumi:"scope"`
	// Whether allow access to subdirectories under the root export? Defaults to `false`.
	SubmountAccessEnabled *bool `pulumi:"submountAccessEnabled"`
	// Whether [SUID](https://docs.microsoft.com/en-us/azure/hpc-cache/access-policies#suid) is allowed? Defaults to `false`.
	SuidEnabled *bool `pulumi:"suidEnabled"`
}

// CacheDefaultAccessPolicyAccessRuleInput is an input type that accepts CacheDefaultAccessPolicyAccessRuleArgs and CacheDefaultAccessPolicyAccessRuleOutput values.
// You can construct a concrete instance of `CacheDefaultAccessPolicyAccessRuleInput` via:
//
//          CacheDefaultAccessPolicyAccessRuleArgs{...}
type CacheDefaultAccessPolicyAccessRuleInput interface {
	pulumi.Input

	ToCacheDefaultAccessPolicyAccessRuleOutput() CacheDefaultAccessPolicyAccessRuleOutput
	ToCacheDefaultAccessPolicyAccessRuleOutputWithContext(context.Context) CacheDefaultAccessPolicyAccessRuleOutput
}

type CacheDefaultAccessPolicyAccessRuleArgs struct {
	// The access level for this rule. Possible values are: `rw`, `ro`, `no`.
	Access pulumi.StringInput `pulumi:"access"`
	// The anonymous GID used when `rootSquashEnabled` is `true`.
	AnonymousGid pulumi.IntPtrInput `pulumi:"anonymousGid"`
	// The anonymous UID used when `rootSquashEnabled` is `true`.
	AnonymousUid pulumi.IntPtrInput `pulumi:"anonymousUid"`
	// The filter applied to the `scope` for this rule. The filter's format depends on its scope: `default` scope matches all clients and has no filter value; `network` scope takes a CIDR format; `host` takes an IP address or fully qualified domain name. If a client does not match any filter rule and there is no default rule, access is denied.
	Filter pulumi.StringPtrInput `pulumi:"filter"`
	// Whether to enable [root squash](https://docs.microsoft.com/en-us/azure/hpc-cache/access-policies#root-squash)? Defaults to `false`.
	RootSquashEnabled pulumi.BoolPtrInput `pulumi:"rootSquashEnabled"`
	// The scope of this rule. The `scope` and (potentially) the `filter` determine which clients match the rule. Possible values are: `default`, `network`, `host`.
	Scope pulumi.StringInput `pulumi:"scope"`
	// Whether allow access to subdirectories under the root export? Defaults to `false`.
	SubmountAccessEnabled pulumi.BoolPtrInput `pulumi:"submountAccessEnabled"`
	// Whether [SUID](https://docs.microsoft.com/en-us/azure/hpc-cache/access-policies#suid) is allowed? Defaults to `false`.
	SuidEnabled pulumi.BoolPtrInput `pulumi:"suidEnabled"`
}

func (CacheDefaultAccessPolicyAccessRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheDefaultAccessPolicyAccessRule)(nil)).Elem()
}

func (i CacheDefaultAccessPolicyAccessRuleArgs) ToCacheDefaultAccessPolicyAccessRuleOutput() CacheDefaultAccessPolicyAccessRuleOutput {
	return i.ToCacheDefaultAccessPolicyAccessRuleOutputWithContext(context.Background())
}

func (i CacheDefaultAccessPolicyAccessRuleArgs) ToCacheDefaultAccessPolicyAccessRuleOutputWithContext(ctx context.Context) CacheDefaultAccessPolicyAccessRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheDefaultAccessPolicyAccessRuleOutput)
}

// CacheDefaultAccessPolicyAccessRuleArrayInput is an input type that accepts CacheDefaultAccessPolicyAccessRuleArray and CacheDefaultAccessPolicyAccessRuleArrayOutput values.
// You can construct a concrete instance of `CacheDefaultAccessPolicyAccessRuleArrayInput` via:
//
//          CacheDefaultAccessPolicyAccessRuleArray{ CacheDefaultAccessPolicyAccessRuleArgs{...} }
type CacheDefaultAccessPolicyAccessRuleArrayInput interface {
	pulumi.Input

	ToCacheDefaultAccessPolicyAccessRuleArrayOutput() CacheDefaultAccessPolicyAccessRuleArrayOutput
	ToCacheDefaultAccessPolicyAccessRuleArrayOutputWithContext(context.Context) CacheDefaultAccessPolicyAccessRuleArrayOutput
}

type CacheDefaultAccessPolicyAccessRuleArray []CacheDefaultAccessPolicyAccessRuleInput

func (CacheDefaultAccessPolicyAccessRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CacheDefaultAccessPolicyAccessRule)(nil)).Elem()
}

func (i CacheDefaultAccessPolicyAccessRuleArray) ToCacheDefaultAccessPolicyAccessRuleArrayOutput() CacheDefaultAccessPolicyAccessRuleArrayOutput {
	return i.ToCacheDefaultAccessPolicyAccessRuleArrayOutputWithContext(context.Background())
}

func (i CacheDefaultAccessPolicyAccessRuleArray) ToCacheDefaultAccessPolicyAccessRuleArrayOutputWithContext(ctx context.Context) CacheDefaultAccessPolicyAccessRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheDefaultAccessPolicyAccessRuleArrayOutput)
}

type CacheDefaultAccessPolicyAccessRuleOutput struct{ *pulumi.OutputState }

func (CacheDefaultAccessPolicyAccessRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheDefaultAccessPolicyAccessRule)(nil)).Elem()
}

func (o CacheDefaultAccessPolicyAccessRuleOutput) ToCacheDefaultAccessPolicyAccessRuleOutput() CacheDefaultAccessPolicyAccessRuleOutput {
	return o
}

func (o CacheDefaultAccessPolicyAccessRuleOutput) ToCacheDefaultAccessPolicyAccessRuleOutputWithContext(ctx context.Context) CacheDefaultAccessPolicyAccessRuleOutput {
	return o
}

// The access level for this rule. Possible values are: `rw`, `ro`, `no`.
func (o CacheDefaultAccessPolicyAccessRuleOutput) Access() pulumi.StringOutput {
	return o.ApplyT(func(v CacheDefaultAccessPolicyAccessRule) string { return v.Access }).(pulumi.StringOutput)
}

// The anonymous GID used when `rootSquashEnabled` is `true`.
func (o CacheDefaultAccessPolicyAccessRuleOutput) AnonymousGid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheDefaultAccessPolicyAccessRule) *int { return v.AnonymousGid }).(pulumi.IntPtrOutput)
}

// The anonymous UID used when `rootSquashEnabled` is `true`.
func (o CacheDefaultAccessPolicyAccessRuleOutput) AnonymousUid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheDefaultAccessPolicyAccessRule) *int { return v.AnonymousUid }).(pulumi.IntPtrOutput)
}

// The filter applied to the `scope` for this rule. The filter's format depends on its scope: `default` scope matches all clients and has no filter value; `network` scope takes a CIDR format; `host` takes an IP address or fully qualified domain name. If a client does not match any filter rule and there is no default rule, access is denied.
func (o CacheDefaultAccessPolicyAccessRuleOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheDefaultAccessPolicyAccessRule) *string { return v.Filter }).(pulumi.StringPtrOutput)
}

// Whether to enable [root squash](https://docs.microsoft.com/en-us/azure/hpc-cache/access-policies#root-squash)? Defaults to `false`.
func (o CacheDefaultAccessPolicyAccessRuleOutput) RootSquashEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheDefaultAccessPolicyAccessRule) *bool { return v.RootSquashEnabled }).(pulumi.BoolPtrOutput)
}

// The scope of this rule. The `scope` and (potentially) the `filter` determine which clients match the rule. Possible values are: `default`, `network`, `host`.
func (o CacheDefaultAccessPolicyAccessRuleOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v CacheDefaultAccessPolicyAccessRule) string { return v.Scope }).(pulumi.StringOutput)
}

// Whether allow access to subdirectories under the root export? Defaults to `false`.
func (o CacheDefaultAccessPolicyAccessRuleOutput) SubmountAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheDefaultAccessPolicyAccessRule) *bool { return v.SubmountAccessEnabled }).(pulumi.BoolPtrOutput)
}

// Whether [SUID](https://docs.microsoft.com/en-us/azure/hpc-cache/access-policies#suid) is allowed? Defaults to `false`.
func (o CacheDefaultAccessPolicyAccessRuleOutput) SuidEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheDefaultAccessPolicyAccessRule) *bool { return v.SuidEnabled }).(pulumi.BoolPtrOutput)
}

type CacheDefaultAccessPolicyAccessRuleArrayOutput struct{ *pulumi.OutputState }

func (CacheDefaultAccessPolicyAccessRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CacheDefaultAccessPolicyAccessRule)(nil)).Elem()
}

func (o CacheDefaultAccessPolicyAccessRuleArrayOutput) ToCacheDefaultAccessPolicyAccessRuleArrayOutput() CacheDefaultAccessPolicyAccessRuleArrayOutput {
	return o
}

func (o CacheDefaultAccessPolicyAccessRuleArrayOutput) ToCacheDefaultAccessPolicyAccessRuleArrayOutputWithContext(ctx context.Context) CacheDefaultAccessPolicyAccessRuleArrayOutput {
	return o
}

func (o CacheDefaultAccessPolicyAccessRuleArrayOutput) Index(i pulumi.IntInput) CacheDefaultAccessPolicyAccessRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CacheDefaultAccessPolicyAccessRule {
		return vs[0].([]CacheDefaultAccessPolicyAccessRule)[vs[1].(int)]
	}).(CacheDefaultAccessPolicyAccessRuleOutput)
}

type CacheDirectoryActiveDirectory struct {
	// The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server.
	CacheNetbiosName string `pulumi:"cacheNetbiosName"`
	// The primary DNS IP address used to resolve the Active Directory domain controller's FQDN.
	DnsPrimaryIp string `pulumi:"dnsPrimaryIp"`
	// The secondary DNS IP address used to resolve the Active Directory domain controller's FQDN.
	DnsSecondaryIp *string `pulumi:"dnsSecondaryIp"`
	// The fully qualified domain name of the Active Directory domain controller.
	DomainName string `pulumi:"domainName"`
	// The Active Directory domain's NetBIOS name.
	DomainNetbiosName string `pulumi:"domainNetbiosName"`
	// The password of the Active Directory domain administrator.
	Password string `pulumi:"password"`
	// The username of the Active Directory domain administrator.
	Username string `pulumi:"username"`
}

// CacheDirectoryActiveDirectoryInput is an input type that accepts CacheDirectoryActiveDirectoryArgs and CacheDirectoryActiveDirectoryOutput values.
// You can construct a concrete instance of `CacheDirectoryActiveDirectoryInput` via:
//
//          CacheDirectoryActiveDirectoryArgs{...}
type CacheDirectoryActiveDirectoryInput interface {
	pulumi.Input

	ToCacheDirectoryActiveDirectoryOutput() CacheDirectoryActiveDirectoryOutput
	ToCacheDirectoryActiveDirectoryOutputWithContext(context.Context) CacheDirectoryActiveDirectoryOutput
}

type CacheDirectoryActiveDirectoryArgs struct {
	// The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server.
	CacheNetbiosName pulumi.StringInput `pulumi:"cacheNetbiosName"`
	// The primary DNS IP address used to resolve the Active Directory domain controller's FQDN.
	DnsPrimaryIp pulumi.StringInput `pulumi:"dnsPrimaryIp"`
	// The secondary DNS IP address used to resolve the Active Directory domain controller's FQDN.
	DnsSecondaryIp pulumi.StringPtrInput `pulumi:"dnsSecondaryIp"`
	// The fully qualified domain name of the Active Directory domain controller.
	DomainName pulumi.StringInput `pulumi:"domainName"`
	// The Active Directory domain's NetBIOS name.
	DomainNetbiosName pulumi.StringInput `pulumi:"domainNetbiosName"`
	// The password of the Active Directory domain administrator.
	Password pulumi.StringInput `pulumi:"password"`
	// The username of the Active Directory domain administrator.
	Username pulumi.StringInput `pulumi:"username"`
}

func (CacheDirectoryActiveDirectoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheDirectoryActiveDirectory)(nil)).Elem()
}

func (i CacheDirectoryActiveDirectoryArgs) ToCacheDirectoryActiveDirectoryOutput() CacheDirectoryActiveDirectoryOutput {
	return i.ToCacheDirectoryActiveDirectoryOutputWithContext(context.Background())
}

func (i CacheDirectoryActiveDirectoryArgs) ToCacheDirectoryActiveDirectoryOutputWithContext(ctx context.Context) CacheDirectoryActiveDirectoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheDirectoryActiveDirectoryOutput)
}

func (i CacheDirectoryActiveDirectoryArgs) ToCacheDirectoryActiveDirectoryPtrOutput() CacheDirectoryActiveDirectoryPtrOutput {
	return i.ToCacheDirectoryActiveDirectoryPtrOutputWithContext(context.Background())
}

func (i CacheDirectoryActiveDirectoryArgs) ToCacheDirectoryActiveDirectoryPtrOutputWithContext(ctx context.Context) CacheDirectoryActiveDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheDirectoryActiveDirectoryOutput).ToCacheDirectoryActiveDirectoryPtrOutputWithContext(ctx)
}

// CacheDirectoryActiveDirectoryPtrInput is an input type that accepts CacheDirectoryActiveDirectoryArgs, CacheDirectoryActiveDirectoryPtr and CacheDirectoryActiveDirectoryPtrOutput values.
// You can construct a concrete instance of `CacheDirectoryActiveDirectoryPtrInput` via:
//
//          CacheDirectoryActiveDirectoryArgs{...}
//
//  or:
//
//          nil
type CacheDirectoryActiveDirectoryPtrInput interface {
	pulumi.Input

	ToCacheDirectoryActiveDirectoryPtrOutput() CacheDirectoryActiveDirectoryPtrOutput
	ToCacheDirectoryActiveDirectoryPtrOutputWithContext(context.Context) CacheDirectoryActiveDirectoryPtrOutput
}

type cacheDirectoryActiveDirectoryPtrType CacheDirectoryActiveDirectoryArgs

func CacheDirectoryActiveDirectoryPtr(v *CacheDirectoryActiveDirectoryArgs) CacheDirectoryActiveDirectoryPtrInput {
	return (*cacheDirectoryActiveDirectoryPtrType)(v)
}

func (*cacheDirectoryActiveDirectoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheDirectoryActiveDirectory)(nil)).Elem()
}

func (i *cacheDirectoryActiveDirectoryPtrType) ToCacheDirectoryActiveDirectoryPtrOutput() CacheDirectoryActiveDirectoryPtrOutput {
	return i.ToCacheDirectoryActiveDirectoryPtrOutputWithContext(context.Background())
}

func (i *cacheDirectoryActiveDirectoryPtrType) ToCacheDirectoryActiveDirectoryPtrOutputWithContext(ctx context.Context) CacheDirectoryActiveDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheDirectoryActiveDirectoryPtrOutput)
}

type CacheDirectoryActiveDirectoryOutput struct{ *pulumi.OutputState }

func (CacheDirectoryActiveDirectoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheDirectoryActiveDirectory)(nil)).Elem()
}

func (o CacheDirectoryActiveDirectoryOutput) ToCacheDirectoryActiveDirectoryOutput() CacheDirectoryActiveDirectoryOutput {
	return o
}

func (o CacheDirectoryActiveDirectoryOutput) ToCacheDirectoryActiveDirectoryOutputWithContext(ctx context.Context) CacheDirectoryActiveDirectoryOutput {
	return o
}

func (o CacheDirectoryActiveDirectoryOutput) ToCacheDirectoryActiveDirectoryPtrOutput() CacheDirectoryActiveDirectoryPtrOutput {
	return o.ToCacheDirectoryActiveDirectoryPtrOutputWithContext(context.Background())
}

func (o CacheDirectoryActiveDirectoryOutput) ToCacheDirectoryActiveDirectoryPtrOutputWithContext(ctx context.Context) CacheDirectoryActiveDirectoryPtrOutput {
	return o.ApplyT(func(v CacheDirectoryActiveDirectory) *CacheDirectoryActiveDirectory {
		return &v
	}).(CacheDirectoryActiveDirectoryPtrOutput)
}

// The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server.
func (o CacheDirectoryActiveDirectoryOutput) CacheNetbiosName() pulumi.StringOutput {
	return o.ApplyT(func(v CacheDirectoryActiveDirectory) string { return v.CacheNetbiosName }).(pulumi.StringOutput)
}

// The primary DNS IP address used to resolve the Active Directory domain controller's FQDN.
func (o CacheDirectoryActiveDirectoryOutput) DnsPrimaryIp() pulumi.StringOutput {
	return o.ApplyT(func(v CacheDirectoryActiveDirectory) string { return v.DnsPrimaryIp }).(pulumi.StringOutput)
}

// The secondary DNS IP address used to resolve the Active Directory domain controller's FQDN.
func (o CacheDirectoryActiveDirectoryOutput) DnsSecondaryIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheDirectoryActiveDirectory) *string { return v.DnsSecondaryIp }).(pulumi.StringPtrOutput)
}

// The fully qualified domain name of the Active Directory domain controller.
func (o CacheDirectoryActiveDirectoryOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v CacheDirectoryActiveDirectory) string { return v.DomainName }).(pulumi.StringOutput)
}

// The Active Directory domain's NetBIOS name.
func (o CacheDirectoryActiveDirectoryOutput) DomainNetbiosName() pulumi.StringOutput {
	return o.ApplyT(func(v CacheDirectoryActiveDirectory) string { return v.DomainNetbiosName }).(pulumi.StringOutput)
}

// The password of the Active Directory domain administrator.
func (o CacheDirectoryActiveDirectoryOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v CacheDirectoryActiveDirectory) string { return v.Password }).(pulumi.StringOutput)
}

// The username of the Active Directory domain administrator.
func (o CacheDirectoryActiveDirectoryOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v CacheDirectoryActiveDirectory) string { return v.Username }).(pulumi.StringOutput)
}

type CacheDirectoryActiveDirectoryPtrOutput struct{ *pulumi.OutputState }

func (CacheDirectoryActiveDirectoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheDirectoryActiveDirectory)(nil)).Elem()
}

func (o CacheDirectoryActiveDirectoryPtrOutput) ToCacheDirectoryActiveDirectoryPtrOutput() CacheDirectoryActiveDirectoryPtrOutput {
	return o
}

func (o CacheDirectoryActiveDirectoryPtrOutput) ToCacheDirectoryActiveDirectoryPtrOutputWithContext(ctx context.Context) CacheDirectoryActiveDirectoryPtrOutput {
	return o
}

func (o CacheDirectoryActiveDirectoryPtrOutput) Elem() CacheDirectoryActiveDirectoryOutput {
	return o.ApplyT(func(v *CacheDirectoryActiveDirectory) CacheDirectoryActiveDirectory { return *v }).(CacheDirectoryActiveDirectoryOutput)
}

// The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server.
func (o CacheDirectoryActiveDirectoryPtrOutput) CacheNetbiosName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheDirectoryActiveDirectory) *string {
		if v == nil {
			return nil
		}
		return &v.CacheNetbiosName
	}).(pulumi.StringPtrOutput)
}

// The primary DNS IP address used to resolve the Active Directory domain controller's FQDN.
func (o CacheDirectoryActiveDirectoryPtrOutput) DnsPrimaryIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheDirectoryActiveDirectory) *string {
		if v == nil {
			return nil
		}
		return &v.DnsPrimaryIp
	}).(pulumi.StringPtrOutput)
}

// The secondary DNS IP address used to resolve the Active Directory domain controller's FQDN.
func (o CacheDirectoryActiveDirectoryPtrOutput) DnsSecondaryIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheDirectoryActiveDirectory) *string {
		if v == nil {
			return nil
		}
		return v.DnsSecondaryIp
	}).(pulumi.StringPtrOutput)
}

// The fully qualified domain name of the Active Directory domain controller.
func (o CacheDirectoryActiveDirectoryPtrOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheDirectoryActiveDirectory) *string {
		if v == nil {
			return nil
		}
		return &v.DomainName
	}).(pulumi.StringPtrOutput)
}

// The Active Directory domain's NetBIOS name.
func (o CacheDirectoryActiveDirectoryPtrOutput) DomainNetbiosName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheDirectoryActiveDirectory) *string {
		if v == nil {
			return nil
		}
		return &v.DomainNetbiosName
	}).(pulumi.StringPtrOutput)
}

// The password of the Active Directory domain administrator.
func (o CacheDirectoryActiveDirectoryPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheDirectoryActiveDirectory) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// The username of the Active Directory domain administrator.
func (o CacheDirectoryActiveDirectoryPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheDirectoryActiveDirectory) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type CacheDirectoryFlatFile struct {
	// The URI of the file containing group information (`/etc/group` file format in Unix-like OS).
	GroupFileUri string `pulumi:"groupFileUri"`
	// The URI of the file containing user information (`/etc/passwd` file format in Unix-like OS).
	PasswordFileUri string `pulumi:"passwordFileUri"`
}

// CacheDirectoryFlatFileInput is an input type that accepts CacheDirectoryFlatFileArgs and CacheDirectoryFlatFileOutput values.
// You can construct a concrete instance of `CacheDirectoryFlatFileInput` via:
//
//          CacheDirectoryFlatFileArgs{...}
type CacheDirectoryFlatFileInput interface {
	pulumi.Input

	ToCacheDirectoryFlatFileOutput() CacheDirectoryFlatFileOutput
	ToCacheDirectoryFlatFileOutputWithContext(context.Context) CacheDirectoryFlatFileOutput
}

type CacheDirectoryFlatFileArgs struct {
	// The URI of the file containing group information (`/etc/group` file format in Unix-like OS).
	GroupFileUri pulumi.StringInput `pulumi:"groupFileUri"`
	// The URI of the file containing user information (`/etc/passwd` file format in Unix-like OS).
	PasswordFileUri pulumi.StringInput `pulumi:"passwordFileUri"`
}

func (CacheDirectoryFlatFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheDirectoryFlatFile)(nil)).Elem()
}

func (i CacheDirectoryFlatFileArgs) ToCacheDirectoryFlatFileOutput() CacheDirectoryFlatFileOutput {
	return i.ToCacheDirectoryFlatFileOutputWithContext(context.Background())
}

func (i CacheDirectoryFlatFileArgs) ToCacheDirectoryFlatFileOutputWithContext(ctx context.Context) CacheDirectoryFlatFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheDirectoryFlatFileOutput)
}

func (i CacheDirectoryFlatFileArgs) ToCacheDirectoryFlatFilePtrOutput() CacheDirectoryFlatFilePtrOutput {
	return i.ToCacheDirectoryFlatFilePtrOutputWithContext(context.Background())
}

func (i CacheDirectoryFlatFileArgs) ToCacheDirectoryFlatFilePtrOutputWithContext(ctx context.Context) CacheDirectoryFlatFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheDirectoryFlatFileOutput).ToCacheDirectoryFlatFilePtrOutputWithContext(ctx)
}

// CacheDirectoryFlatFilePtrInput is an input type that accepts CacheDirectoryFlatFileArgs, CacheDirectoryFlatFilePtr and CacheDirectoryFlatFilePtrOutput values.
// You can construct a concrete instance of `CacheDirectoryFlatFilePtrInput` via:
//
//          CacheDirectoryFlatFileArgs{...}
//
//  or:
//
//          nil
type CacheDirectoryFlatFilePtrInput interface {
	pulumi.Input

	ToCacheDirectoryFlatFilePtrOutput() CacheDirectoryFlatFilePtrOutput
	ToCacheDirectoryFlatFilePtrOutputWithContext(context.Context) CacheDirectoryFlatFilePtrOutput
}

type cacheDirectoryFlatFilePtrType CacheDirectoryFlatFileArgs

func CacheDirectoryFlatFilePtr(v *CacheDirectoryFlatFileArgs) CacheDirectoryFlatFilePtrInput {
	return (*cacheDirectoryFlatFilePtrType)(v)
}

func (*cacheDirectoryFlatFilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheDirectoryFlatFile)(nil)).Elem()
}

func (i *cacheDirectoryFlatFilePtrType) ToCacheDirectoryFlatFilePtrOutput() CacheDirectoryFlatFilePtrOutput {
	return i.ToCacheDirectoryFlatFilePtrOutputWithContext(context.Background())
}

func (i *cacheDirectoryFlatFilePtrType) ToCacheDirectoryFlatFilePtrOutputWithContext(ctx context.Context) CacheDirectoryFlatFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheDirectoryFlatFilePtrOutput)
}

type CacheDirectoryFlatFileOutput struct{ *pulumi.OutputState }

func (CacheDirectoryFlatFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheDirectoryFlatFile)(nil)).Elem()
}

func (o CacheDirectoryFlatFileOutput) ToCacheDirectoryFlatFileOutput() CacheDirectoryFlatFileOutput {
	return o
}

func (o CacheDirectoryFlatFileOutput) ToCacheDirectoryFlatFileOutputWithContext(ctx context.Context) CacheDirectoryFlatFileOutput {
	return o
}

func (o CacheDirectoryFlatFileOutput) ToCacheDirectoryFlatFilePtrOutput() CacheDirectoryFlatFilePtrOutput {
	return o.ToCacheDirectoryFlatFilePtrOutputWithContext(context.Background())
}

func (o CacheDirectoryFlatFileOutput) ToCacheDirectoryFlatFilePtrOutputWithContext(ctx context.Context) CacheDirectoryFlatFilePtrOutput {
	return o.ApplyT(func(v CacheDirectoryFlatFile) *CacheDirectoryFlatFile {
		return &v
	}).(CacheDirectoryFlatFilePtrOutput)
}

// The URI of the file containing group information (`/etc/group` file format in Unix-like OS).
func (o CacheDirectoryFlatFileOutput) GroupFileUri() pulumi.StringOutput {
	return o.ApplyT(func(v CacheDirectoryFlatFile) string { return v.GroupFileUri }).(pulumi.StringOutput)
}

// The URI of the file containing user information (`/etc/passwd` file format in Unix-like OS).
func (o CacheDirectoryFlatFileOutput) PasswordFileUri() pulumi.StringOutput {
	return o.ApplyT(func(v CacheDirectoryFlatFile) string { return v.PasswordFileUri }).(pulumi.StringOutput)
}

type CacheDirectoryFlatFilePtrOutput struct{ *pulumi.OutputState }

func (CacheDirectoryFlatFilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheDirectoryFlatFile)(nil)).Elem()
}

func (o CacheDirectoryFlatFilePtrOutput) ToCacheDirectoryFlatFilePtrOutput() CacheDirectoryFlatFilePtrOutput {
	return o
}

func (o CacheDirectoryFlatFilePtrOutput) ToCacheDirectoryFlatFilePtrOutputWithContext(ctx context.Context) CacheDirectoryFlatFilePtrOutput {
	return o
}

func (o CacheDirectoryFlatFilePtrOutput) Elem() CacheDirectoryFlatFileOutput {
	return o.ApplyT(func(v *CacheDirectoryFlatFile) CacheDirectoryFlatFile { return *v }).(CacheDirectoryFlatFileOutput)
}

// The URI of the file containing group information (`/etc/group` file format in Unix-like OS).
func (o CacheDirectoryFlatFilePtrOutput) GroupFileUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheDirectoryFlatFile) *string {
		if v == nil {
			return nil
		}
		return &v.GroupFileUri
	}).(pulumi.StringPtrOutput)
}

// The URI of the file containing user information (`/etc/passwd` file format in Unix-like OS).
func (o CacheDirectoryFlatFilePtrOutput) PasswordFileUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheDirectoryFlatFile) *string {
		if v == nil {
			return nil
		}
		return &v.PasswordFileUri
	}).(pulumi.StringPtrOutput)
}

type CacheDirectoryLdap struct {
	// The base distinguished name (DN) for the LDAP domain.
	BaseDn string `pulumi:"baseDn"`
	// A `bind` block as defined above.
	Bind *CacheDirectoryLdapBind `pulumi:"bind"`
	// The URI of the CA certificate to validate the LDAP secure connection.
	CertificateValidationUri *string `pulumi:"certificateValidationUri"`
	// Whether the certificate should be automatically downloaded. This can be set to `true` only when `certificateValidationUri` is provided. Defaults to `false`.
	DownloadCertificateAutomatically *bool `pulumi:"downloadCertificateAutomatically"`
	// Whether the LDAP connection should be encrypted? Defaults to `false`.
	Encrypted *bool `pulumi:"encrypted"`
	// The FQDN or IP address of the LDAP server.
	Server string `pulumi:"server"`
}

// CacheDirectoryLdapInput is an input type that accepts CacheDirectoryLdapArgs and CacheDirectoryLdapOutput values.
// You can construct a concrete instance of `CacheDirectoryLdapInput` via:
//
//          CacheDirectoryLdapArgs{...}
type CacheDirectoryLdapInput interface {
	pulumi.Input

	ToCacheDirectoryLdapOutput() CacheDirectoryLdapOutput
	ToCacheDirectoryLdapOutputWithContext(context.Context) CacheDirectoryLdapOutput
}

type CacheDirectoryLdapArgs struct {
	// The base distinguished name (DN) for the LDAP domain.
	BaseDn pulumi.StringInput `pulumi:"baseDn"`
	// A `bind` block as defined above.
	Bind CacheDirectoryLdapBindPtrInput `pulumi:"bind"`
	// The URI of the CA certificate to validate the LDAP secure connection.
	CertificateValidationUri pulumi.StringPtrInput `pulumi:"certificateValidationUri"`
	// Whether the certificate should be automatically downloaded. This can be set to `true` only when `certificateValidationUri` is provided. Defaults to `false`.
	DownloadCertificateAutomatically pulumi.BoolPtrInput `pulumi:"downloadCertificateAutomatically"`
	// Whether the LDAP connection should be encrypted? Defaults to `false`.
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// The FQDN or IP address of the LDAP server.
	Server pulumi.StringInput `pulumi:"server"`
}

func (CacheDirectoryLdapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheDirectoryLdap)(nil)).Elem()
}

func (i CacheDirectoryLdapArgs) ToCacheDirectoryLdapOutput() CacheDirectoryLdapOutput {
	return i.ToCacheDirectoryLdapOutputWithContext(context.Background())
}

func (i CacheDirectoryLdapArgs) ToCacheDirectoryLdapOutputWithContext(ctx context.Context) CacheDirectoryLdapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheDirectoryLdapOutput)
}

func (i CacheDirectoryLdapArgs) ToCacheDirectoryLdapPtrOutput() CacheDirectoryLdapPtrOutput {
	return i.ToCacheDirectoryLdapPtrOutputWithContext(context.Background())
}

func (i CacheDirectoryLdapArgs) ToCacheDirectoryLdapPtrOutputWithContext(ctx context.Context) CacheDirectoryLdapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheDirectoryLdapOutput).ToCacheDirectoryLdapPtrOutputWithContext(ctx)
}

// CacheDirectoryLdapPtrInput is an input type that accepts CacheDirectoryLdapArgs, CacheDirectoryLdapPtr and CacheDirectoryLdapPtrOutput values.
// You can construct a concrete instance of `CacheDirectoryLdapPtrInput` via:
//
//          CacheDirectoryLdapArgs{...}
//
//  or:
//
//          nil
type CacheDirectoryLdapPtrInput interface {
	pulumi.Input

	ToCacheDirectoryLdapPtrOutput() CacheDirectoryLdapPtrOutput
	ToCacheDirectoryLdapPtrOutputWithContext(context.Context) CacheDirectoryLdapPtrOutput
}

type cacheDirectoryLdapPtrType CacheDirectoryLdapArgs

func CacheDirectoryLdapPtr(v *CacheDirectoryLdapArgs) CacheDirectoryLdapPtrInput {
	return (*cacheDirectoryLdapPtrType)(v)
}

func (*cacheDirectoryLdapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheDirectoryLdap)(nil)).Elem()
}

func (i *cacheDirectoryLdapPtrType) ToCacheDirectoryLdapPtrOutput() CacheDirectoryLdapPtrOutput {
	return i.ToCacheDirectoryLdapPtrOutputWithContext(context.Background())
}

func (i *cacheDirectoryLdapPtrType) ToCacheDirectoryLdapPtrOutputWithContext(ctx context.Context) CacheDirectoryLdapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheDirectoryLdapPtrOutput)
}

type CacheDirectoryLdapOutput struct{ *pulumi.OutputState }

func (CacheDirectoryLdapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheDirectoryLdap)(nil)).Elem()
}

func (o CacheDirectoryLdapOutput) ToCacheDirectoryLdapOutput() CacheDirectoryLdapOutput {
	return o
}

func (o CacheDirectoryLdapOutput) ToCacheDirectoryLdapOutputWithContext(ctx context.Context) CacheDirectoryLdapOutput {
	return o
}

func (o CacheDirectoryLdapOutput) ToCacheDirectoryLdapPtrOutput() CacheDirectoryLdapPtrOutput {
	return o.ToCacheDirectoryLdapPtrOutputWithContext(context.Background())
}

func (o CacheDirectoryLdapOutput) ToCacheDirectoryLdapPtrOutputWithContext(ctx context.Context) CacheDirectoryLdapPtrOutput {
	return o.ApplyT(func(v CacheDirectoryLdap) *CacheDirectoryLdap {
		return &v
	}).(CacheDirectoryLdapPtrOutput)
}

// The base distinguished name (DN) for the LDAP domain.
func (o CacheDirectoryLdapOutput) BaseDn() pulumi.StringOutput {
	return o.ApplyT(func(v CacheDirectoryLdap) string { return v.BaseDn }).(pulumi.StringOutput)
}

// A `bind` block as defined above.
func (o CacheDirectoryLdapOutput) Bind() CacheDirectoryLdapBindPtrOutput {
	return o.ApplyT(func(v CacheDirectoryLdap) *CacheDirectoryLdapBind { return v.Bind }).(CacheDirectoryLdapBindPtrOutput)
}

// The URI of the CA certificate to validate the LDAP secure connection.
func (o CacheDirectoryLdapOutput) CertificateValidationUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheDirectoryLdap) *string { return v.CertificateValidationUri }).(pulumi.StringPtrOutput)
}

// Whether the certificate should be automatically downloaded. This can be set to `true` only when `certificateValidationUri` is provided. Defaults to `false`.
func (o CacheDirectoryLdapOutput) DownloadCertificateAutomatically() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheDirectoryLdap) *bool { return v.DownloadCertificateAutomatically }).(pulumi.BoolPtrOutput)
}

// Whether the LDAP connection should be encrypted? Defaults to `false`.
func (o CacheDirectoryLdapOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheDirectoryLdap) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// The FQDN or IP address of the LDAP server.
func (o CacheDirectoryLdapOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v CacheDirectoryLdap) string { return v.Server }).(pulumi.StringOutput)
}

type CacheDirectoryLdapPtrOutput struct{ *pulumi.OutputState }

func (CacheDirectoryLdapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheDirectoryLdap)(nil)).Elem()
}

func (o CacheDirectoryLdapPtrOutput) ToCacheDirectoryLdapPtrOutput() CacheDirectoryLdapPtrOutput {
	return o
}

func (o CacheDirectoryLdapPtrOutput) ToCacheDirectoryLdapPtrOutputWithContext(ctx context.Context) CacheDirectoryLdapPtrOutput {
	return o
}

func (o CacheDirectoryLdapPtrOutput) Elem() CacheDirectoryLdapOutput {
	return o.ApplyT(func(v *CacheDirectoryLdap) CacheDirectoryLdap { return *v }).(CacheDirectoryLdapOutput)
}

// The base distinguished name (DN) for the LDAP domain.
func (o CacheDirectoryLdapPtrOutput) BaseDn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheDirectoryLdap) *string {
		if v == nil {
			return nil
		}
		return &v.BaseDn
	}).(pulumi.StringPtrOutput)
}

// A `bind` block as defined above.
func (o CacheDirectoryLdapPtrOutput) Bind() CacheDirectoryLdapBindPtrOutput {
	return o.ApplyT(func(v *CacheDirectoryLdap) *CacheDirectoryLdapBind {
		if v == nil {
			return nil
		}
		return v.Bind
	}).(CacheDirectoryLdapBindPtrOutput)
}

// The URI of the CA certificate to validate the LDAP secure connection.
func (o CacheDirectoryLdapPtrOutput) CertificateValidationUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheDirectoryLdap) *string {
		if v == nil {
			return nil
		}
		return v.CertificateValidationUri
	}).(pulumi.StringPtrOutput)
}

// Whether the certificate should be automatically downloaded. This can be set to `true` only when `certificateValidationUri` is provided. Defaults to `false`.
func (o CacheDirectoryLdapPtrOutput) DownloadCertificateAutomatically() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheDirectoryLdap) *bool {
		if v == nil {
			return nil
		}
		return v.DownloadCertificateAutomatically
	}).(pulumi.BoolPtrOutput)
}

// Whether the LDAP connection should be encrypted? Defaults to `false`.
func (o CacheDirectoryLdapPtrOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheDirectoryLdap) *bool {
		if v == nil {
			return nil
		}
		return v.Encrypted
	}).(pulumi.BoolPtrOutput)
}

// The FQDN or IP address of the LDAP server.
func (o CacheDirectoryLdapPtrOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheDirectoryLdap) *string {
		if v == nil {
			return nil
		}
		return &v.Server
	}).(pulumi.StringPtrOutput)
}

type CacheDirectoryLdapBind struct {
	// The Bind Distinguished Name (DN) identity to be used in the secure LDAP connection.
	Dn string `pulumi:"dn"`
	// The Bind password to be used in the secure LDAP connection.
	Password string `pulumi:"password"`
}

// CacheDirectoryLdapBindInput is an input type that accepts CacheDirectoryLdapBindArgs and CacheDirectoryLdapBindOutput values.
// You can construct a concrete instance of `CacheDirectoryLdapBindInput` via:
//
//          CacheDirectoryLdapBindArgs{...}
type CacheDirectoryLdapBindInput interface {
	pulumi.Input

	ToCacheDirectoryLdapBindOutput() CacheDirectoryLdapBindOutput
	ToCacheDirectoryLdapBindOutputWithContext(context.Context) CacheDirectoryLdapBindOutput
}

type CacheDirectoryLdapBindArgs struct {
	// The Bind Distinguished Name (DN) identity to be used in the secure LDAP connection.
	Dn pulumi.StringInput `pulumi:"dn"`
	// The Bind password to be used in the secure LDAP connection.
	Password pulumi.StringInput `pulumi:"password"`
}

func (CacheDirectoryLdapBindArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheDirectoryLdapBind)(nil)).Elem()
}

func (i CacheDirectoryLdapBindArgs) ToCacheDirectoryLdapBindOutput() CacheDirectoryLdapBindOutput {
	return i.ToCacheDirectoryLdapBindOutputWithContext(context.Background())
}

func (i CacheDirectoryLdapBindArgs) ToCacheDirectoryLdapBindOutputWithContext(ctx context.Context) CacheDirectoryLdapBindOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheDirectoryLdapBindOutput)
}

func (i CacheDirectoryLdapBindArgs) ToCacheDirectoryLdapBindPtrOutput() CacheDirectoryLdapBindPtrOutput {
	return i.ToCacheDirectoryLdapBindPtrOutputWithContext(context.Background())
}

func (i CacheDirectoryLdapBindArgs) ToCacheDirectoryLdapBindPtrOutputWithContext(ctx context.Context) CacheDirectoryLdapBindPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheDirectoryLdapBindOutput).ToCacheDirectoryLdapBindPtrOutputWithContext(ctx)
}

// CacheDirectoryLdapBindPtrInput is an input type that accepts CacheDirectoryLdapBindArgs, CacheDirectoryLdapBindPtr and CacheDirectoryLdapBindPtrOutput values.
// You can construct a concrete instance of `CacheDirectoryLdapBindPtrInput` via:
//
//          CacheDirectoryLdapBindArgs{...}
//
//  or:
//
//          nil
type CacheDirectoryLdapBindPtrInput interface {
	pulumi.Input

	ToCacheDirectoryLdapBindPtrOutput() CacheDirectoryLdapBindPtrOutput
	ToCacheDirectoryLdapBindPtrOutputWithContext(context.Context) CacheDirectoryLdapBindPtrOutput
}

type cacheDirectoryLdapBindPtrType CacheDirectoryLdapBindArgs

func CacheDirectoryLdapBindPtr(v *CacheDirectoryLdapBindArgs) CacheDirectoryLdapBindPtrInput {
	return (*cacheDirectoryLdapBindPtrType)(v)
}

func (*cacheDirectoryLdapBindPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheDirectoryLdapBind)(nil)).Elem()
}

func (i *cacheDirectoryLdapBindPtrType) ToCacheDirectoryLdapBindPtrOutput() CacheDirectoryLdapBindPtrOutput {
	return i.ToCacheDirectoryLdapBindPtrOutputWithContext(context.Background())
}

func (i *cacheDirectoryLdapBindPtrType) ToCacheDirectoryLdapBindPtrOutputWithContext(ctx context.Context) CacheDirectoryLdapBindPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheDirectoryLdapBindPtrOutput)
}

type CacheDirectoryLdapBindOutput struct{ *pulumi.OutputState }

func (CacheDirectoryLdapBindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheDirectoryLdapBind)(nil)).Elem()
}

func (o CacheDirectoryLdapBindOutput) ToCacheDirectoryLdapBindOutput() CacheDirectoryLdapBindOutput {
	return o
}

func (o CacheDirectoryLdapBindOutput) ToCacheDirectoryLdapBindOutputWithContext(ctx context.Context) CacheDirectoryLdapBindOutput {
	return o
}

func (o CacheDirectoryLdapBindOutput) ToCacheDirectoryLdapBindPtrOutput() CacheDirectoryLdapBindPtrOutput {
	return o.ToCacheDirectoryLdapBindPtrOutputWithContext(context.Background())
}

func (o CacheDirectoryLdapBindOutput) ToCacheDirectoryLdapBindPtrOutputWithContext(ctx context.Context) CacheDirectoryLdapBindPtrOutput {
	return o.ApplyT(func(v CacheDirectoryLdapBind) *CacheDirectoryLdapBind {
		return &v
	}).(CacheDirectoryLdapBindPtrOutput)
}

// The Bind Distinguished Name (DN) identity to be used in the secure LDAP connection.
func (o CacheDirectoryLdapBindOutput) Dn() pulumi.StringOutput {
	return o.ApplyT(func(v CacheDirectoryLdapBind) string { return v.Dn }).(pulumi.StringOutput)
}

// The Bind password to be used in the secure LDAP connection.
func (o CacheDirectoryLdapBindOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v CacheDirectoryLdapBind) string { return v.Password }).(pulumi.StringOutput)
}

type CacheDirectoryLdapBindPtrOutput struct{ *pulumi.OutputState }

func (CacheDirectoryLdapBindPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheDirectoryLdapBind)(nil)).Elem()
}

func (o CacheDirectoryLdapBindPtrOutput) ToCacheDirectoryLdapBindPtrOutput() CacheDirectoryLdapBindPtrOutput {
	return o
}

func (o CacheDirectoryLdapBindPtrOutput) ToCacheDirectoryLdapBindPtrOutputWithContext(ctx context.Context) CacheDirectoryLdapBindPtrOutput {
	return o
}

func (o CacheDirectoryLdapBindPtrOutput) Elem() CacheDirectoryLdapBindOutput {
	return o.ApplyT(func(v *CacheDirectoryLdapBind) CacheDirectoryLdapBind { return *v }).(CacheDirectoryLdapBindOutput)
}

// The Bind Distinguished Name (DN) identity to be used in the secure LDAP connection.
func (o CacheDirectoryLdapBindPtrOutput) Dn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheDirectoryLdapBind) *string {
		if v == nil {
			return nil
		}
		return &v.Dn
	}).(pulumi.StringPtrOutput)
}

// The Bind password to be used in the secure LDAP connection.
func (o CacheDirectoryLdapBindPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheDirectoryLdapBind) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

type CacheDns struct {
	// The DNS search domain for the HPC Cache.
	SearchDomain *string `pulumi:"searchDomain"`
	// A list of DNS servers for the HPC Cache. At most three IP(s) are allowed to set.
	Servers []string `pulumi:"servers"`
}

// CacheDnsInput is an input type that accepts CacheDnsArgs and CacheDnsOutput values.
// You can construct a concrete instance of `CacheDnsInput` via:
//
//          CacheDnsArgs{...}
type CacheDnsInput interface {
	pulumi.Input

	ToCacheDnsOutput() CacheDnsOutput
	ToCacheDnsOutputWithContext(context.Context) CacheDnsOutput
}

type CacheDnsArgs struct {
	// The DNS search domain for the HPC Cache.
	SearchDomain pulumi.StringPtrInput `pulumi:"searchDomain"`
	// A list of DNS servers for the HPC Cache. At most three IP(s) are allowed to set.
	Servers pulumi.StringArrayInput `pulumi:"servers"`
}

func (CacheDnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheDns)(nil)).Elem()
}

func (i CacheDnsArgs) ToCacheDnsOutput() CacheDnsOutput {
	return i.ToCacheDnsOutputWithContext(context.Background())
}

func (i CacheDnsArgs) ToCacheDnsOutputWithContext(ctx context.Context) CacheDnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheDnsOutput)
}

func (i CacheDnsArgs) ToCacheDnsPtrOutput() CacheDnsPtrOutput {
	return i.ToCacheDnsPtrOutputWithContext(context.Background())
}

func (i CacheDnsArgs) ToCacheDnsPtrOutputWithContext(ctx context.Context) CacheDnsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheDnsOutput).ToCacheDnsPtrOutputWithContext(ctx)
}

// CacheDnsPtrInput is an input type that accepts CacheDnsArgs, CacheDnsPtr and CacheDnsPtrOutput values.
// You can construct a concrete instance of `CacheDnsPtrInput` via:
//
//          CacheDnsArgs{...}
//
//  or:
//
//          nil
type CacheDnsPtrInput interface {
	pulumi.Input

	ToCacheDnsPtrOutput() CacheDnsPtrOutput
	ToCacheDnsPtrOutputWithContext(context.Context) CacheDnsPtrOutput
}

type cacheDnsPtrType CacheDnsArgs

func CacheDnsPtr(v *CacheDnsArgs) CacheDnsPtrInput {
	return (*cacheDnsPtrType)(v)
}

func (*cacheDnsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheDns)(nil)).Elem()
}

func (i *cacheDnsPtrType) ToCacheDnsPtrOutput() CacheDnsPtrOutput {
	return i.ToCacheDnsPtrOutputWithContext(context.Background())
}

func (i *cacheDnsPtrType) ToCacheDnsPtrOutputWithContext(ctx context.Context) CacheDnsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheDnsPtrOutput)
}

type CacheDnsOutput struct{ *pulumi.OutputState }

func (CacheDnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheDns)(nil)).Elem()
}

func (o CacheDnsOutput) ToCacheDnsOutput() CacheDnsOutput {
	return o
}

func (o CacheDnsOutput) ToCacheDnsOutputWithContext(ctx context.Context) CacheDnsOutput {
	return o
}

func (o CacheDnsOutput) ToCacheDnsPtrOutput() CacheDnsPtrOutput {
	return o.ToCacheDnsPtrOutputWithContext(context.Background())
}

func (o CacheDnsOutput) ToCacheDnsPtrOutputWithContext(ctx context.Context) CacheDnsPtrOutput {
	return o.ApplyT(func(v CacheDns) *CacheDns {
		return &v
	}).(CacheDnsPtrOutput)
}

// The DNS search domain for the HPC Cache.
func (o CacheDnsOutput) SearchDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheDns) *string { return v.SearchDomain }).(pulumi.StringPtrOutput)
}

// A list of DNS servers for the HPC Cache. At most three IP(s) are allowed to set.
func (o CacheDnsOutput) Servers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CacheDns) []string { return v.Servers }).(pulumi.StringArrayOutput)
}

type CacheDnsPtrOutput struct{ *pulumi.OutputState }

func (CacheDnsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheDns)(nil)).Elem()
}

func (o CacheDnsPtrOutput) ToCacheDnsPtrOutput() CacheDnsPtrOutput {
	return o
}

func (o CacheDnsPtrOutput) ToCacheDnsPtrOutputWithContext(ctx context.Context) CacheDnsPtrOutput {
	return o
}

func (o CacheDnsPtrOutput) Elem() CacheDnsOutput {
	return o.ApplyT(func(v *CacheDns) CacheDns { return *v }).(CacheDnsOutput)
}

// The DNS search domain for the HPC Cache.
func (o CacheDnsPtrOutput) SearchDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheDns) *string {
		if v == nil {
			return nil
		}
		return v.SearchDomain
	}).(pulumi.StringPtrOutput)
}

// A list of DNS servers for the HPC Cache. At most three IP(s) are allowed to set.
func (o CacheDnsPtrOutput) Servers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CacheDns) []string {
		if v == nil {
			return nil
		}
		return v.Servers
	}).(pulumi.StringArrayOutput)
}

type CacheNfsTargetNamespaceJunction struct {
	// The name of the access policy applied to this target. Defaults to `default`.
	AccessPolicyName *string `pulumi:"accessPolicyName"`
	// The client-facing file path of this NFS target within the HPC Cache NFS Target.
	NamespacePath string `pulumi:"namespacePath"`
	// The NFS export of this NFS target within the HPC Cache NFS Target.
	NfsExport string `pulumi:"nfsExport"`
	// The relative subdirectory path from the `nfsExport` to map to the `namespacePath`. Defaults to `""`, in which case the whole `nfsExport` is exported.
	TargetPath *string `pulumi:"targetPath"`
}

// CacheNfsTargetNamespaceJunctionInput is an input type that accepts CacheNfsTargetNamespaceJunctionArgs and CacheNfsTargetNamespaceJunctionOutput values.
// You can construct a concrete instance of `CacheNfsTargetNamespaceJunctionInput` via:
//
//          CacheNfsTargetNamespaceJunctionArgs{...}
type CacheNfsTargetNamespaceJunctionInput interface {
	pulumi.Input

	ToCacheNfsTargetNamespaceJunctionOutput() CacheNfsTargetNamespaceJunctionOutput
	ToCacheNfsTargetNamespaceJunctionOutputWithContext(context.Context) CacheNfsTargetNamespaceJunctionOutput
}

type CacheNfsTargetNamespaceJunctionArgs struct {
	// The name of the access policy applied to this target. Defaults to `default`.
	AccessPolicyName pulumi.StringPtrInput `pulumi:"accessPolicyName"`
	// The client-facing file path of this NFS target within the HPC Cache NFS Target.
	NamespacePath pulumi.StringInput `pulumi:"namespacePath"`
	// The NFS export of this NFS target within the HPC Cache NFS Target.
	NfsExport pulumi.StringInput `pulumi:"nfsExport"`
	// The relative subdirectory path from the `nfsExport` to map to the `namespacePath`. Defaults to `""`, in which case the whole `nfsExport` is exported.
	TargetPath pulumi.StringPtrInput `pulumi:"targetPath"`
}

func (CacheNfsTargetNamespaceJunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheNfsTargetNamespaceJunction)(nil)).Elem()
}

func (i CacheNfsTargetNamespaceJunctionArgs) ToCacheNfsTargetNamespaceJunctionOutput() CacheNfsTargetNamespaceJunctionOutput {
	return i.ToCacheNfsTargetNamespaceJunctionOutputWithContext(context.Background())
}

func (i CacheNfsTargetNamespaceJunctionArgs) ToCacheNfsTargetNamespaceJunctionOutputWithContext(ctx context.Context) CacheNfsTargetNamespaceJunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheNfsTargetNamespaceJunctionOutput)
}

// CacheNfsTargetNamespaceJunctionArrayInput is an input type that accepts CacheNfsTargetNamespaceJunctionArray and CacheNfsTargetNamespaceJunctionArrayOutput values.
// You can construct a concrete instance of `CacheNfsTargetNamespaceJunctionArrayInput` via:
//
//          CacheNfsTargetNamespaceJunctionArray{ CacheNfsTargetNamespaceJunctionArgs{...} }
type CacheNfsTargetNamespaceJunctionArrayInput interface {
	pulumi.Input

	ToCacheNfsTargetNamespaceJunctionArrayOutput() CacheNfsTargetNamespaceJunctionArrayOutput
	ToCacheNfsTargetNamespaceJunctionArrayOutputWithContext(context.Context) CacheNfsTargetNamespaceJunctionArrayOutput
}

type CacheNfsTargetNamespaceJunctionArray []CacheNfsTargetNamespaceJunctionInput

func (CacheNfsTargetNamespaceJunctionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CacheNfsTargetNamespaceJunction)(nil)).Elem()
}

func (i CacheNfsTargetNamespaceJunctionArray) ToCacheNfsTargetNamespaceJunctionArrayOutput() CacheNfsTargetNamespaceJunctionArrayOutput {
	return i.ToCacheNfsTargetNamespaceJunctionArrayOutputWithContext(context.Background())
}

func (i CacheNfsTargetNamespaceJunctionArray) ToCacheNfsTargetNamespaceJunctionArrayOutputWithContext(ctx context.Context) CacheNfsTargetNamespaceJunctionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheNfsTargetNamespaceJunctionArrayOutput)
}

type CacheNfsTargetNamespaceJunctionOutput struct{ *pulumi.OutputState }

func (CacheNfsTargetNamespaceJunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheNfsTargetNamespaceJunction)(nil)).Elem()
}

func (o CacheNfsTargetNamespaceJunctionOutput) ToCacheNfsTargetNamespaceJunctionOutput() CacheNfsTargetNamespaceJunctionOutput {
	return o
}

func (o CacheNfsTargetNamespaceJunctionOutput) ToCacheNfsTargetNamespaceJunctionOutputWithContext(ctx context.Context) CacheNfsTargetNamespaceJunctionOutput {
	return o
}

// The name of the access policy applied to this target. Defaults to `default`.
func (o CacheNfsTargetNamespaceJunctionOutput) AccessPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheNfsTargetNamespaceJunction) *string { return v.AccessPolicyName }).(pulumi.StringPtrOutput)
}

// The client-facing file path of this NFS target within the HPC Cache NFS Target.
func (o CacheNfsTargetNamespaceJunctionOutput) NamespacePath() pulumi.StringOutput {
	return o.ApplyT(func(v CacheNfsTargetNamespaceJunction) string { return v.NamespacePath }).(pulumi.StringOutput)
}

// The NFS export of this NFS target within the HPC Cache NFS Target.
func (o CacheNfsTargetNamespaceJunctionOutput) NfsExport() pulumi.StringOutput {
	return o.ApplyT(func(v CacheNfsTargetNamespaceJunction) string { return v.NfsExport }).(pulumi.StringOutput)
}

// The relative subdirectory path from the `nfsExport` to map to the `namespacePath`. Defaults to `""`, in which case the whole `nfsExport` is exported.
func (o CacheNfsTargetNamespaceJunctionOutput) TargetPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheNfsTargetNamespaceJunction) *string { return v.TargetPath }).(pulumi.StringPtrOutput)
}

type CacheNfsTargetNamespaceJunctionArrayOutput struct{ *pulumi.OutputState }

func (CacheNfsTargetNamespaceJunctionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CacheNfsTargetNamespaceJunction)(nil)).Elem()
}

func (o CacheNfsTargetNamespaceJunctionArrayOutput) ToCacheNfsTargetNamespaceJunctionArrayOutput() CacheNfsTargetNamespaceJunctionArrayOutput {
	return o
}

func (o CacheNfsTargetNamespaceJunctionArrayOutput) ToCacheNfsTargetNamespaceJunctionArrayOutputWithContext(ctx context.Context) CacheNfsTargetNamespaceJunctionArrayOutput {
	return o
}

func (o CacheNfsTargetNamespaceJunctionArrayOutput) Index(i pulumi.IntInput) CacheNfsTargetNamespaceJunctionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CacheNfsTargetNamespaceJunction {
		return vs[0].([]CacheNfsTargetNamespaceJunction)[vs[1].(int)]
	}).(CacheNfsTargetNamespaceJunctionOutput)
}

func init() {
	pulumi.RegisterOutputType(CacheAccessPolicyAccessRuleOutput{})
	pulumi.RegisterOutputType(CacheAccessPolicyAccessRuleArrayOutput{})
	pulumi.RegisterOutputType(CacheDefaultAccessPolicyOutput{})
	pulumi.RegisterOutputType(CacheDefaultAccessPolicyPtrOutput{})
	pulumi.RegisterOutputType(CacheDefaultAccessPolicyAccessRuleOutput{})
	pulumi.RegisterOutputType(CacheDefaultAccessPolicyAccessRuleArrayOutput{})
	pulumi.RegisterOutputType(CacheDirectoryActiveDirectoryOutput{})
	pulumi.RegisterOutputType(CacheDirectoryActiveDirectoryPtrOutput{})
	pulumi.RegisterOutputType(CacheDirectoryFlatFileOutput{})
	pulumi.RegisterOutputType(CacheDirectoryFlatFilePtrOutput{})
	pulumi.RegisterOutputType(CacheDirectoryLdapOutput{})
	pulumi.RegisterOutputType(CacheDirectoryLdapPtrOutput{})
	pulumi.RegisterOutputType(CacheDirectoryLdapBindOutput{})
	pulumi.RegisterOutputType(CacheDirectoryLdapBindPtrOutput{})
	pulumi.RegisterOutputType(CacheDnsOutput{})
	pulumi.RegisterOutputType(CacheDnsPtrOutput{})
	pulumi.RegisterOutputType(CacheNfsTargetNamespaceJunctionOutput{})
	pulumi.RegisterOutputType(CacheNfsTargetNamespaceJunctionArrayOutput{})
}
