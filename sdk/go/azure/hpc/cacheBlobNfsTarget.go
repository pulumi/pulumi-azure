// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Blob NFSv3 Target within a HPC Cache.
//
// > **NOTE:**: By request of the service team the provider no longer automatically registering the `Microsoft.StorageCache` Resource Provider for this resource. To register it you can run `az provider register --namespace 'Microsoft.StorageCache'`.
//
// > **NOTE:**: This resource depends on the NFSv3 enabled Storage Account, which has some prerequisites need to meet. Please checkout: <https://docs.microsoft.com/azure/storage/blobs/network-file-system-protocol-support-how-to?tabs=azure-powershell>.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/authorization"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/hpc"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func notImplemented(message string) pulumi.AnyOutput {
//		panic(message)
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-rg"),
//				Location: pulumi.String("west europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "example", &network.VirtualNetworkArgs{
//				Name: pulumi.String("example-vnet"),
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			exampleSubnet, err := network.NewSubnet(ctx, "example", &network.SubnetArgs{
//				Name:               pulumi.String("example-subnet"),
//				ResourceGroupName:  exampleResourceGroup.Name,
//				VirtualNetworkName: exampleVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.0.2.0/24"),
//				},
//				ServiceEndpoints: pulumi.StringArray{
//					pulumi.String("Microsoft.Storage"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			example, err := azuread.LookupServicePrincipal(ctx, &azuread.LookupServicePrincipalArgs{
//				DisplayName: pulumi.StringRef("HPC Cache Resource Provider"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "example", &storage.AccountArgs{
//				Name:                   pulumi.String("examplestorageaccount"),
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Location:               exampleResourceGroup.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountKind:            pulumi.String("StorageV2"),
//				AccountReplicationType: pulumi.String("LRS"),
//				IsHnsEnabled:           pulumi.Bool(true),
//				Nfsv3Enabled:           pulumi.Bool(true),
//				EnableHttpsTrafficOnly: pulumi.Bool(false),
//				NetworkRules: &storage.AccountNetworkRulesTypeArgs{
//					DefaultAction: pulumi.String("Deny"),
//					VirtualNetworkSubnetIds: pulumi.StringArray{
//						exampleSubnet.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Due to https://github.com/hashicorp/terraform-provider-azurerm/issues/2977 and the fact
//			// that the NFSv3 enabled storage account can't allow public network access - otherwise the NFSv3 protocol will fail,
//			// we have to use the ARM template to deploy the storage container as a workaround.
//			// Once the issue above got resolved, we can instead use the azurerm_storage_container resource.
//			_, err = core.NewResourceGroupTemplateDeployment(ctx, "storage-containers", &core.ResourceGroupTemplateDeploymentArgs{
//				Name:              pulumi.String("example-deployment"),
//				ResourceGroupName: exampleAccount.ResourceGroupName,
//				DeploymentMode:    pulumi.String("Incremental"),
//				ParametersContent: pulumi.All(exampleAccount.Location, exampleAccount.Name).ApplyT(func(_args []interface{}) (string, error) {
//					location := _args[0].(string)
//					name := _args[1].(string)
//					var _zero string
//					tmpJSON0, err := json.Marshal(map[string]interface{}{
//						"location": map[string]interface{}{
//							"value": location,
//						},
//						"storageAccountName": map[string]interface{}{
//							"value": name,
//						},
//						"containerName": map[string]interface{}{
//							"value": "example-container",
//						},
//					})
//					if err != nil {
//						return _zero, err
//					}
//					json0 := string(tmpJSON0)
//					return json0, nil
//				}).(pulumi.StringOutput),
//				TemplateContent: pulumi.String(`{
//	  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
//	  "contentVersion": "1.0.0.0",
//	  "parameters": {
//	    "storageAccountName": {
//	      "type": "String"
//	    },
//	    "containerName": {
//	      "type": "String"
//	    },
//	    "location": {
//	      "type": "String"
//	    }
//	  },
//	  "resources": [
//	    {
//	      "type": "Microsoft.Storage/storageAccounts",
//	      "apiVersion": "2019-06-01",
//	      "name": "[parameters('storageAccountName')]",
//	      "location": "[parameters('location')]",
//	      "sku": {
//	        "name": "Standard_LRS",
//	        "tier": "Standard"
//	      },
//	      "kind": "StorageV2",
//	      "properties": {
//	        "accessTier": "Hot"
//	      },
//	      "resources": [
//	        {
//	          "type": "blobServices/containers",
//	          "apiVersion": "2019-06-01",
//	          "name": "[concat('default/', parameters('containerName'))]",
//	          "dependsOn": [
//	            "[parameters('storageAccountName')]"
//	          ]
//	        }
//	      ]
//	    }
//	  ],
//
//	  "outputs": {
//	    "id": {
//	      "type": "String",
//	      "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), 'default', parameters('containerName'))]"
//	    }
//	  }
//	}
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			_, err = authorization.NewAssignment(ctx, "example_storage_account_contrib", &authorization.AssignmentArgs{
//				Scope:              exampleAccount.ID(),
//				RoleDefinitionName: pulumi.String("Storage Account Contributor"),
//				PrincipalId:        pulumi.String(example.ObjectId),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = authorization.NewAssignment(ctx, "example_storage_blob_data_contrib", &authorization.AssignmentArgs{
//				Scope:              exampleAccount.ID(),
//				RoleDefinitionName: pulumi.String("Storage Blob Data Contributor"),
//				PrincipalId:        pulumi.String(example.ObjectId),
//			})
//			if err != nil {
//				return err
//			}
//			exampleCache, err := hpc.NewCache(ctx, "example", &hpc.CacheArgs{
//				Name:              pulumi.String("example-hpc-cache"),
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				CacheSizeInGb:     pulumi.Int(3072),
//				SubnetId:          exampleSubnet.ID(),
//				SkuName:           pulumi.String("Standard_2G"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = hpc.NewCacheBlobNfsTarget(ctx, "example", &hpc.CacheBlobNfsTargetArgs{
//				Name:               pulumi.String("example-hpc-target"),
//				ResourceGroupName:  exampleResourceGroup.Name,
//				CacheName:          exampleCache.Name,
//				StorageContainerId: notImplemented("jsondecode(azurerm_resource_group_template_deployment.storage-containers.output_content)").Id.Value,
//				NamespacePath:      pulumi.String("/p1"),
//				UsageModel:         pulumi.String("READ_HEAVY_INFREQ"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// HPC Cache Blob NFS Targets can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:hpc/cacheBlobNfsTarget:CacheBlobNfsTarget example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.StorageCache/caches/cache1/storageTargets/target1
// ```
type CacheBlobNfsTarget struct {
	pulumi.CustomResourceState

	// The name of the access policy applied to this target. Defaults to `default`.
	AccessPolicyName pulumi.StringPtrOutput `pulumi:"accessPolicyName"`
	// The name of the HPC Cache, which the HPC Cache Blob NFS Target will be added to. Changing this forces a new HPC Cache Blob NFS Target to be created.
	CacheName pulumi.StringOutput `pulumi:"cacheName"`
	// The name which should be used for this HPC Cache Blob NFS Target. Changing this forces a new HPC Cache Blob NFS Target to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The client-facing file path of the HPC Cache Blob NFS Target.
	NamespacePath pulumi.StringOutput `pulumi:"namespacePath"`
	// The name of the Resource Group where the HPC Cache Blob NFS Target should exist. Changing this forces a new HPC Cache Blob NFS Target to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The Resource Manager ID of the Storage Container used as the HPC Cache Blob NFS Target. Changing this forces a new resource to be created.
	//
	// > **Note:** This is the Resource Manager ID of the Storage Container, rather than the regular ID - and can be accessed on the `storage.Container` Data Source/Resource as `resourceManagerId`.
	StorageContainerId pulumi.StringOutput `pulumi:"storageContainerId"`
	// The type of usage of the HPC Cache Blob NFS Target. Possible values are: `READ_HEAVY_INFREQ`, `READ_HEAVY_CHECK_180`, `READ_ONLY`, `READ_WRITE`, `WRITE_WORKLOAD_15`, `WRITE_AROUND`, `WRITE_WORKLOAD_CHECK_30`, `WRITE_WORKLOAD_CHECK_60` and `WRITE_WORKLOAD_CLOUDWS`.
	UsageModel pulumi.StringOutput `pulumi:"usageModel"`
	// The amount of time the cache waits before it checks the back-end storage for file updates. Possible values are between `1` and `31536000`.
	VerificationTimerInSeconds pulumi.IntPtrOutput `pulumi:"verificationTimerInSeconds"`
	// The amount of time the cache waits after the last file change before it copies the changed file to back-end storage. Possible values are between `1` and `31536000`.
	WriteBackTimerInSeconds pulumi.IntPtrOutput `pulumi:"writeBackTimerInSeconds"`
}

// NewCacheBlobNfsTarget registers a new resource with the given unique name, arguments, and options.
func NewCacheBlobNfsTarget(ctx *pulumi.Context,
	name string, args *CacheBlobNfsTargetArgs, opts ...pulumi.ResourceOption) (*CacheBlobNfsTarget, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CacheName == nil {
		return nil, errors.New("invalid value for required argument 'CacheName'")
	}
	if args.NamespacePath == nil {
		return nil, errors.New("invalid value for required argument 'NamespacePath'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.StorageContainerId == nil {
		return nil, errors.New("invalid value for required argument 'StorageContainerId'")
	}
	if args.UsageModel == nil {
		return nil, errors.New("invalid value for required argument 'UsageModel'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CacheBlobNfsTarget
	err := ctx.RegisterResource("azure:hpc/cacheBlobNfsTarget:CacheBlobNfsTarget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCacheBlobNfsTarget gets an existing CacheBlobNfsTarget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCacheBlobNfsTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CacheBlobNfsTargetState, opts ...pulumi.ResourceOption) (*CacheBlobNfsTarget, error) {
	var resource CacheBlobNfsTarget
	err := ctx.ReadResource("azure:hpc/cacheBlobNfsTarget:CacheBlobNfsTarget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CacheBlobNfsTarget resources.
type cacheBlobNfsTargetState struct {
	// The name of the access policy applied to this target. Defaults to `default`.
	AccessPolicyName *string `pulumi:"accessPolicyName"`
	// The name of the HPC Cache, which the HPC Cache Blob NFS Target will be added to. Changing this forces a new HPC Cache Blob NFS Target to be created.
	CacheName *string `pulumi:"cacheName"`
	// The name which should be used for this HPC Cache Blob NFS Target. Changing this forces a new HPC Cache Blob NFS Target to be created.
	Name *string `pulumi:"name"`
	// The client-facing file path of the HPC Cache Blob NFS Target.
	NamespacePath *string `pulumi:"namespacePath"`
	// The name of the Resource Group where the HPC Cache Blob NFS Target should exist. Changing this forces a new HPC Cache Blob NFS Target to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The Resource Manager ID of the Storage Container used as the HPC Cache Blob NFS Target. Changing this forces a new resource to be created.
	//
	// > **Note:** This is the Resource Manager ID of the Storage Container, rather than the regular ID - and can be accessed on the `storage.Container` Data Source/Resource as `resourceManagerId`.
	StorageContainerId *string `pulumi:"storageContainerId"`
	// The type of usage of the HPC Cache Blob NFS Target. Possible values are: `READ_HEAVY_INFREQ`, `READ_HEAVY_CHECK_180`, `READ_ONLY`, `READ_WRITE`, `WRITE_WORKLOAD_15`, `WRITE_AROUND`, `WRITE_WORKLOAD_CHECK_30`, `WRITE_WORKLOAD_CHECK_60` and `WRITE_WORKLOAD_CLOUDWS`.
	UsageModel *string `pulumi:"usageModel"`
	// The amount of time the cache waits before it checks the back-end storage for file updates. Possible values are between `1` and `31536000`.
	VerificationTimerInSeconds *int `pulumi:"verificationTimerInSeconds"`
	// The amount of time the cache waits after the last file change before it copies the changed file to back-end storage. Possible values are between `1` and `31536000`.
	WriteBackTimerInSeconds *int `pulumi:"writeBackTimerInSeconds"`
}

type CacheBlobNfsTargetState struct {
	// The name of the access policy applied to this target. Defaults to `default`.
	AccessPolicyName pulumi.StringPtrInput
	// The name of the HPC Cache, which the HPC Cache Blob NFS Target will be added to. Changing this forces a new HPC Cache Blob NFS Target to be created.
	CacheName pulumi.StringPtrInput
	// The name which should be used for this HPC Cache Blob NFS Target. Changing this forces a new HPC Cache Blob NFS Target to be created.
	Name pulumi.StringPtrInput
	// The client-facing file path of the HPC Cache Blob NFS Target.
	NamespacePath pulumi.StringPtrInput
	// The name of the Resource Group where the HPC Cache Blob NFS Target should exist. Changing this forces a new HPC Cache Blob NFS Target to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The Resource Manager ID of the Storage Container used as the HPC Cache Blob NFS Target. Changing this forces a new resource to be created.
	//
	// > **Note:** This is the Resource Manager ID of the Storage Container, rather than the regular ID - and can be accessed on the `storage.Container` Data Source/Resource as `resourceManagerId`.
	StorageContainerId pulumi.StringPtrInput
	// The type of usage of the HPC Cache Blob NFS Target. Possible values are: `READ_HEAVY_INFREQ`, `READ_HEAVY_CHECK_180`, `READ_ONLY`, `READ_WRITE`, `WRITE_WORKLOAD_15`, `WRITE_AROUND`, `WRITE_WORKLOAD_CHECK_30`, `WRITE_WORKLOAD_CHECK_60` and `WRITE_WORKLOAD_CLOUDWS`.
	UsageModel pulumi.StringPtrInput
	// The amount of time the cache waits before it checks the back-end storage for file updates. Possible values are between `1` and `31536000`.
	VerificationTimerInSeconds pulumi.IntPtrInput
	// The amount of time the cache waits after the last file change before it copies the changed file to back-end storage. Possible values are between `1` and `31536000`.
	WriteBackTimerInSeconds pulumi.IntPtrInput
}

func (CacheBlobNfsTargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*cacheBlobNfsTargetState)(nil)).Elem()
}

type cacheBlobNfsTargetArgs struct {
	// The name of the access policy applied to this target. Defaults to `default`.
	AccessPolicyName *string `pulumi:"accessPolicyName"`
	// The name of the HPC Cache, which the HPC Cache Blob NFS Target will be added to. Changing this forces a new HPC Cache Blob NFS Target to be created.
	CacheName string `pulumi:"cacheName"`
	// The name which should be used for this HPC Cache Blob NFS Target. Changing this forces a new HPC Cache Blob NFS Target to be created.
	Name *string `pulumi:"name"`
	// The client-facing file path of the HPC Cache Blob NFS Target.
	NamespacePath string `pulumi:"namespacePath"`
	// The name of the Resource Group where the HPC Cache Blob NFS Target should exist. Changing this forces a new HPC Cache Blob NFS Target to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The Resource Manager ID of the Storage Container used as the HPC Cache Blob NFS Target. Changing this forces a new resource to be created.
	//
	// > **Note:** This is the Resource Manager ID of the Storage Container, rather than the regular ID - and can be accessed on the `storage.Container` Data Source/Resource as `resourceManagerId`.
	StorageContainerId string `pulumi:"storageContainerId"`
	// The type of usage of the HPC Cache Blob NFS Target. Possible values are: `READ_HEAVY_INFREQ`, `READ_HEAVY_CHECK_180`, `READ_ONLY`, `READ_WRITE`, `WRITE_WORKLOAD_15`, `WRITE_AROUND`, `WRITE_WORKLOAD_CHECK_30`, `WRITE_WORKLOAD_CHECK_60` and `WRITE_WORKLOAD_CLOUDWS`.
	UsageModel string `pulumi:"usageModel"`
	// The amount of time the cache waits before it checks the back-end storage for file updates. Possible values are between `1` and `31536000`.
	VerificationTimerInSeconds *int `pulumi:"verificationTimerInSeconds"`
	// The amount of time the cache waits after the last file change before it copies the changed file to back-end storage. Possible values are between `1` and `31536000`.
	WriteBackTimerInSeconds *int `pulumi:"writeBackTimerInSeconds"`
}

// The set of arguments for constructing a CacheBlobNfsTarget resource.
type CacheBlobNfsTargetArgs struct {
	// The name of the access policy applied to this target. Defaults to `default`.
	AccessPolicyName pulumi.StringPtrInput
	// The name of the HPC Cache, which the HPC Cache Blob NFS Target will be added to. Changing this forces a new HPC Cache Blob NFS Target to be created.
	CacheName pulumi.StringInput
	// The name which should be used for this HPC Cache Blob NFS Target. Changing this forces a new HPC Cache Blob NFS Target to be created.
	Name pulumi.StringPtrInput
	// The client-facing file path of the HPC Cache Blob NFS Target.
	NamespacePath pulumi.StringInput
	// The name of the Resource Group where the HPC Cache Blob NFS Target should exist. Changing this forces a new HPC Cache Blob NFS Target to be created.
	ResourceGroupName pulumi.StringInput
	// The Resource Manager ID of the Storage Container used as the HPC Cache Blob NFS Target. Changing this forces a new resource to be created.
	//
	// > **Note:** This is the Resource Manager ID of the Storage Container, rather than the regular ID - and can be accessed on the `storage.Container` Data Source/Resource as `resourceManagerId`.
	StorageContainerId pulumi.StringInput
	// The type of usage of the HPC Cache Blob NFS Target. Possible values are: `READ_HEAVY_INFREQ`, `READ_HEAVY_CHECK_180`, `READ_ONLY`, `READ_WRITE`, `WRITE_WORKLOAD_15`, `WRITE_AROUND`, `WRITE_WORKLOAD_CHECK_30`, `WRITE_WORKLOAD_CHECK_60` and `WRITE_WORKLOAD_CLOUDWS`.
	UsageModel pulumi.StringInput
	// The amount of time the cache waits before it checks the back-end storage for file updates. Possible values are between `1` and `31536000`.
	VerificationTimerInSeconds pulumi.IntPtrInput
	// The amount of time the cache waits after the last file change before it copies the changed file to back-end storage. Possible values are between `1` and `31536000`.
	WriteBackTimerInSeconds pulumi.IntPtrInput
}

func (CacheBlobNfsTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cacheBlobNfsTargetArgs)(nil)).Elem()
}

type CacheBlobNfsTargetInput interface {
	pulumi.Input

	ToCacheBlobNfsTargetOutput() CacheBlobNfsTargetOutput
	ToCacheBlobNfsTargetOutputWithContext(ctx context.Context) CacheBlobNfsTargetOutput
}

func (*CacheBlobNfsTarget) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheBlobNfsTarget)(nil)).Elem()
}

func (i *CacheBlobNfsTarget) ToCacheBlobNfsTargetOutput() CacheBlobNfsTargetOutput {
	return i.ToCacheBlobNfsTargetOutputWithContext(context.Background())
}

func (i *CacheBlobNfsTarget) ToCacheBlobNfsTargetOutputWithContext(ctx context.Context) CacheBlobNfsTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheBlobNfsTargetOutput)
}

// CacheBlobNfsTargetArrayInput is an input type that accepts CacheBlobNfsTargetArray and CacheBlobNfsTargetArrayOutput values.
// You can construct a concrete instance of `CacheBlobNfsTargetArrayInput` via:
//
//	CacheBlobNfsTargetArray{ CacheBlobNfsTargetArgs{...} }
type CacheBlobNfsTargetArrayInput interface {
	pulumi.Input

	ToCacheBlobNfsTargetArrayOutput() CacheBlobNfsTargetArrayOutput
	ToCacheBlobNfsTargetArrayOutputWithContext(context.Context) CacheBlobNfsTargetArrayOutput
}

type CacheBlobNfsTargetArray []CacheBlobNfsTargetInput

func (CacheBlobNfsTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CacheBlobNfsTarget)(nil)).Elem()
}

func (i CacheBlobNfsTargetArray) ToCacheBlobNfsTargetArrayOutput() CacheBlobNfsTargetArrayOutput {
	return i.ToCacheBlobNfsTargetArrayOutputWithContext(context.Background())
}

func (i CacheBlobNfsTargetArray) ToCacheBlobNfsTargetArrayOutputWithContext(ctx context.Context) CacheBlobNfsTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheBlobNfsTargetArrayOutput)
}

// CacheBlobNfsTargetMapInput is an input type that accepts CacheBlobNfsTargetMap and CacheBlobNfsTargetMapOutput values.
// You can construct a concrete instance of `CacheBlobNfsTargetMapInput` via:
//
//	CacheBlobNfsTargetMap{ "key": CacheBlobNfsTargetArgs{...} }
type CacheBlobNfsTargetMapInput interface {
	pulumi.Input

	ToCacheBlobNfsTargetMapOutput() CacheBlobNfsTargetMapOutput
	ToCacheBlobNfsTargetMapOutputWithContext(context.Context) CacheBlobNfsTargetMapOutput
}

type CacheBlobNfsTargetMap map[string]CacheBlobNfsTargetInput

func (CacheBlobNfsTargetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CacheBlobNfsTarget)(nil)).Elem()
}

func (i CacheBlobNfsTargetMap) ToCacheBlobNfsTargetMapOutput() CacheBlobNfsTargetMapOutput {
	return i.ToCacheBlobNfsTargetMapOutputWithContext(context.Background())
}

func (i CacheBlobNfsTargetMap) ToCacheBlobNfsTargetMapOutputWithContext(ctx context.Context) CacheBlobNfsTargetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheBlobNfsTargetMapOutput)
}

type CacheBlobNfsTargetOutput struct{ *pulumi.OutputState }

func (CacheBlobNfsTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheBlobNfsTarget)(nil)).Elem()
}

func (o CacheBlobNfsTargetOutput) ToCacheBlobNfsTargetOutput() CacheBlobNfsTargetOutput {
	return o
}

func (o CacheBlobNfsTargetOutput) ToCacheBlobNfsTargetOutputWithContext(ctx context.Context) CacheBlobNfsTargetOutput {
	return o
}

// The name of the access policy applied to this target. Defaults to `default`.
func (o CacheBlobNfsTargetOutput) AccessPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheBlobNfsTarget) pulumi.StringPtrOutput { return v.AccessPolicyName }).(pulumi.StringPtrOutput)
}

// The name of the HPC Cache, which the HPC Cache Blob NFS Target will be added to. Changing this forces a new HPC Cache Blob NFS Target to be created.
func (o CacheBlobNfsTargetOutput) CacheName() pulumi.StringOutput {
	return o.ApplyT(func(v *CacheBlobNfsTarget) pulumi.StringOutput { return v.CacheName }).(pulumi.StringOutput)
}

// The name which should be used for this HPC Cache Blob NFS Target. Changing this forces a new HPC Cache Blob NFS Target to be created.
func (o CacheBlobNfsTargetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CacheBlobNfsTarget) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The client-facing file path of the HPC Cache Blob NFS Target.
func (o CacheBlobNfsTargetOutput) NamespacePath() pulumi.StringOutput {
	return o.ApplyT(func(v *CacheBlobNfsTarget) pulumi.StringOutput { return v.NamespacePath }).(pulumi.StringOutput)
}

// The name of the Resource Group where the HPC Cache Blob NFS Target should exist. Changing this forces a new HPC Cache Blob NFS Target to be created.
func (o CacheBlobNfsTargetOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *CacheBlobNfsTarget) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The Resource Manager ID of the Storage Container used as the HPC Cache Blob NFS Target. Changing this forces a new resource to be created.
//
// > **Note:** This is the Resource Manager ID of the Storage Container, rather than the regular ID - and can be accessed on the `storage.Container` Data Source/Resource as `resourceManagerId`.
func (o CacheBlobNfsTargetOutput) StorageContainerId() pulumi.StringOutput {
	return o.ApplyT(func(v *CacheBlobNfsTarget) pulumi.StringOutput { return v.StorageContainerId }).(pulumi.StringOutput)
}

// The type of usage of the HPC Cache Blob NFS Target. Possible values are: `READ_HEAVY_INFREQ`, `READ_HEAVY_CHECK_180`, `READ_ONLY`, `READ_WRITE`, `WRITE_WORKLOAD_15`, `WRITE_AROUND`, `WRITE_WORKLOAD_CHECK_30`, `WRITE_WORKLOAD_CHECK_60` and `WRITE_WORKLOAD_CLOUDWS`.
func (o CacheBlobNfsTargetOutput) UsageModel() pulumi.StringOutput {
	return o.ApplyT(func(v *CacheBlobNfsTarget) pulumi.StringOutput { return v.UsageModel }).(pulumi.StringOutput)
}

// The amount of time the cache waits before it checks the back-end storage for file updates. Possible values are between `1` and `31536000`.
func (o CacheBlobNfsTargetOutput) VerificationTimerInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CacheBlobNfsTarget) pulumi.IntPtrOutput { return v.VerificationTimerInSeconds }).(pulumi.IntPtrOutput)
}

// The amount of time the cache waits after the last file change before it copies the changed file to back-end storage. Possible values are between `1` and `31536000`.
func (o CacheBlobNfsTargetOutput) WriteBackTimerInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CacheBlobNfsTarget) pulumi.IntPtrOutput { return v.WriteBackTimerInSeconds }).(pulumi.IntPtrOutput)
}

type CacheBlobNfsTargetArrayOutput struct{ *pulumi.OutputState }

func (CacheBlobNfsTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CacheBlobNfsTarget)(nil)).Elem()
}

func (o CacheBlobNfsTargetArrayOutput) ToCacheBlobNfsTargetArrayOutput() CacheBlobNfsTargetArrayOutput {
	return o
}

func (o CacheBlobNfsTargetArrayOutput) ToCacheBlobNfsTargetArrayOutputWithContext(ctx context.Context) CacheBlobNfsTargetArrayOutput {
	return o
}

func (o CacheBlobNfsTargetArrayOutput) Index(i pulumi.IntInput) CacheBlobNfsTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CacheBlobNfsTarget {
		return vs[0].([]*CacheBlobNfsTarget)[vs[1].(int)]
	}).(CacheBlobNfsTargetOutput)
}

type CacheBlobNfsTargetMapOutput struct{ *pulumi.OutputState }

func (CacheBlobNfsTargetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CacheBlobNfsTarget)(nil)).Elem()
}

func (o CacheBlobNfsTargetMapOutput) ToCacheBlobNfsTargetMapOutput() CacheBlobNfsTargetMapOutput {
	return o
}

func (o CacheBlobNfsTargetMapOutput) ToCacheBlobNfsTargetMapOutputWithContext(ctx context.Context) CacheBlobNfsTargetMapOutput {
	return o
}

func (o CacheBlobNfsTargetMapOutput) MapIndex(k pulumi.StringInput) CacheBlobNfsTargetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CacheBlobNfsTarget {
		return vs[0].(map[string]*CacheBlobNfsTarget)[vs[1].(string)]
	}).(CacheBlobNfsTargetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CacheBlobNfsTargetInput)(nil)).Elem(), &CacheBlobNfsTarget{})
	pulumi.RegisterInputType(reflect.TypeOf((*CacheBlobNfsTargetArrayInput)(nil)).Elem(), CacheBlobNfsTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CacheBlobNfsTargetMapInput)(nil)).Elem(), CacheBlobNfsTargetMap{})
	pulumi.RegisterOutputType(CacheBlobNfsTargetOutput{})
	pulumi.RegisterOutputType(CacheBlobNfsTargetArrayOutput{})
	pulumi.RegisterOutputType(CacheBlobNfsTargetMapOutput{})
}
