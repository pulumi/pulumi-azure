// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package orbital

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a Spacecraft.
//
// ## Import
//
// Spacecraft can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:orbital/spacecraft:Spacecraft example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Orbital/spacecrafts/spacecraft1
//
// ```
type Spacecraft struct {
	pulumi.CustomResourceState

	// A `links` block as defined below. Changing this forces a new resource to be created.
	Links SpacecraftLinkArrayOutput `pulumi:"links"`
	// The location where the Spacecraft exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the Spacecraft. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// NORAD ID of the Spacecraft.
	NoradId pulumi.StringOutput `pulumi:"noradId"`
	// The name of the Resource Group where the Spacecraft exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Title of the two line elements (TLE).
	TitleLine pulumi.StringOutput `pulumi:"titleLine"`
	// A list of the two line elements (TLE), the first string being the first of the TLE, the second string being the second line of the TLE. Changing this forces a new resource to be created.
	TwoLineElements pulumi.StringArrayOutput `pulumi:"twoLineElements"`
}

// NewSpacecraft registers a new resource with the given unique name, arguments, and options.
func NewSpacecraft(ctx *pulumi.Context,
	name string, args *SpacecraftArgs, opts ...pulumi.ResourceOption) (*Spacecraft, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Links == nil {
		return nil, errors.New("invalid value for required argument 'Links'")
	}
	if args.NoradId == nil {
		return nil, errors.New("invalid value for required argument 'NoradId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.TitleLine == nil {
		return nil, errors.New("invalid value for required argument 'TitleLine'")
	}
	if args.TwoLineElements == nil {
		return nil, errors.New("invalid value for required argument 'TwoLineElements'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Spacecraft
	err := ctx.RegisterResource("azure:orbital/spacecraft:Spacecraft", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpacecraft gets an existing Spacecraft resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpacecraft(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpacecraftState, opts ...pulumi.ResourceOption) (*Spacecraft, error) {
	var resource Spacecraft
	err := ctx.ReadResource("azure:orbital/spacecraft:Spacecraft", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Spacecraft resources.
type spacecraftState struct {
	// A `links` block as defined below. Changing this forces a new resource to be created.
	Links []SpacecraftLink `pulumi:"links"`
	// The location where the Spacecraft exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name of the Spacecraft. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// NORAD ID of the Spacecraft.
	NoradId *string `pulumi:"noradId"`
	// The name of the Resource Group where the Spacecraft exists. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Title of the two line elements (TLE).
	TitleLine *string `pulumi:"titleLine"`
	// A list of the two line elements (TLE), the first string being the first of the TLE, the second string being the second line of the TLE. Changing this forces a new resource to be created.
	TwoLineElements []string `pulumi:"twoLineElements"`
}

type SpacecraftState struct {
	// A `links` block as defined below. Changing this forces a new resource to be created.
	Links SpacecraftLinkArrayInput
	// The location where the Spacecraft exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name of the Spacecraft. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// NORAD ID of the Spacecraft.
	NoradId pulumi.StringPtrInput
	// The name of the Resource Group where the Spacecraft exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// Title of the two line elements (TLE).
	TitleLine pulumi.StringPtrInput
	// A list of the two line elements (TLE), the first string being the first of the TLE, the second string being the second line of the TLE. Changing this forces a new resource to be created.
	TwoLineElements pulumi.StringArrayInput
}

func (SpacecraftState) ElementType() reflect.Type {
	return reflect.TypeOf((*spacecraftState)(nil)).Elem()
}

type spacecraftArgs struct {
	// A `links` block as defined below. Changing this forces a new resource to be created.
	Links []SpacecraftLink `pulumi:"links"`
	// The location where the Spacecraft exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name of the Spacecraft. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// NORAD ID of the Spacecraft.
	NoradId string `pulumi:"noradId"`
	// The name of the Resource Group where the Spacecraft exists. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Title of the two line elements (TLE).
	TitleLine string `pulumi:"titleLine"`
	// A list of the two line elements (TLE), the first string being the first of the TLE, the second string being the second line of the TLE. Changing this forces a new resource to be created.
	TwoLineElements []string `pulumi:"twoLineElements"`
}

// The set of arguments for constructing a Spacecraft resource.
type SpacecraftArgs struct {
	// A `links` block as defined below. Changing this forces a new resource to be created.
	Links SpacecraftLinkArrayInput
	// The location where the Spacecraft exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name of the Spacecraft. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// NORAD ID of the Spacecraft.
	NoradId pulumi.StringInput
	// The name of the Resource Group where the Spacecraft exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// Title of the two line elements (TLE).
	TitleLine pulumi.StringInput
	// A list of the two line elements (TLE), the first string being the first of the TLE, the second string being the second line of the TLE. Changing this forces a new resource to be created.
	TwoLineElements pulumi.StringArrayInput
}

func (SpacecraftArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*spacecraftArgs)(nil)).Elem()
}

type SpacecraftInput interface {
	pulumi.Input

	ToSpacecraftOutput() SpacecraftOutput
	ToSpacecraftOutputWithContext(ctx context.Context) SpacecraftOutput
}

func (*Spacecraft) ElementType() reflect.Type {
	return reflect.TypeOf((**Spacecraft)(nil)).Elem()
}

func (i *Spacecraft) ToSpacecraftOutput() SpacecraftOutput {
	return i.ToSpacecraftOutputWithContext(context.Background())
}

func (i *Spacecraft) ToSpacecraftOutputWithContext(ctx context.Context) SpacecraftOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpacecraftOutput)
}

func (i *Spacecraft) ToOutput(ctx context.Context) pulumix.Output[*Spacecraft] {
	return pulumix.Output[*Spacecraft]{
		OutputState: i.ToSpacecraftOutputWithContext(ctx).OutputState,
	}
}

// SpacecraftArrayInput is an input type that accepts SpacecraftArray and SpacecraftArrayOutput values.
// You can construct a concrete instance of `SpacecraftArrayInput` via:
//
//	SpacecraftArray{ SpacecraftArgs{...} }
type SpacecraftArrayInput interface {
	pulumi.Input

	ToSpacecraftArrayOutput() SpacecraftArrayOutput
	ToSpacecraftArrayOutputWithContext(context.Context) SpacecraftArrayOutput
}

type SpacecraftArray []SpacecraftInput

func (SpacecraftArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Spacecraft)(nil)).Elem()
}

func (i SpacecraftArray) ToSpacecraftArrayOutput() SpacecraftArrayOutput {
	return i.ToSpacecraftArrayOutputWithContext(context.Background())
}

func (i SpacecraftArray) ToSpacecraftArrayOutputWithContext(ctx context.Context) SpacecraftArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpacecraftArrayOutput)
}

func (i SpacecraftArray) ToOutput(ctx context.Context) pulumix.Output[[]*Spacecraft] {
	return pulumix.Output[[]*Spacecraft]{
		OutputState: i.ToSpacecraftArrayOutputWithContext(ctx).OutputState,
	}
}

// SpacecraftMapInput is an input type that accepts SpacecraftMap and SpacecraftMapOutput values.
// You can construct a concrete instance of `SpacecraftMapInput` via:
//
//	SpacecraftMap{ "key": SpacecraftArgs{...} }
type SpacecraftMapInput interface {
	pulumi.Input

	ToSpacecraftMapOutput() SpacecraftMapOutput
	ToSpacecraftMapOutputWithContext(context.Context) SpacecraftMapOutput
}

type SpacecraftMap map[string]SpacecraftInput

func (SpacecraftMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Spacecraft)(nil)).Elem()
}

func (i SpacecraftMap) ToSpacecraftMapOutput() SpacecraftMapOutput {
	return i.ToSpacecraftMapOutputWithContext(context.Background())
}

func (i SpacecraftMap) ToSpacecraftMapOutputWithContext(ctx context.Context) SpacecraftMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpacecraftMapOutput)
}

func (i SpacecraftMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Spacecraft] {
	return pulumix.Output[map[string]*Spacecraft]{
		OutputState: i.ToSpacecraftMapOutputWithContext(ctx).OutputState,
	}
}

type SpacecraftOutput struct{ *pulumi.OutputState }

func (SpacecraftOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Spacecraft)(nil)).Elem()
}

func (o SpacecraftOutput) ToSpacecraftOutput() SpacecraftOutput {
	return o
}

func (o SpacecraftOutput) ToSpacecraftOutputWithContext(ctx context.Context) SpacecraftOutput {
	return o
}

func (o SpacecraftOutput) ToOutput(ctx context.Context) pulumix.Output[*Spacecraft] {
	return pulumix.Output[*Spacecraft]{
		OutputState: o.OutputState,
	}
}

// A `links` block as defined below. Changing this forces a new resource to be created.
func (o SpacecraftOutput) Links() SpacecraftLinkArrayOutput {
	return o.ApplyT(func(v *Spacecraft) SpacecraftLinkArrayOutput { return v.Links }).(SpacecraftLinkArrayOutput)
}

// The location where the Spacecraft exists. Changing this forces a new resource to be created.
func (o SpacecraftOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Spacecraft) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the Spacecraft. Changing this forces a new resource to be created.
func (o SpacecraftOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Spacecraft) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// NORAD ID of the Spacecraft.
func (o SpacecraftOutput) NoradId() pulumi.StringOutput {
	return o.ApplyT(func(v *Spacecraft) pulumi.StringOutput { return v.NoradId }).(pulumi.StringOutput)
}

// The name of the Resource Group where the Spacecraft exists. Changing this forces a new resource to be created.
func (o SpacecraftOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Spacecraft) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o SpacecraftOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Spacecraft) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Title of the two line elements (TLE).
func (o SpacecraftOutput) TitleLine() pulumi.StringOutput {
	return o.ApplyT(func(v *Spacecraft) pulumi.StringOutput { return v.TitleLine }).(pulumi.StringOutput)
}

// A list of the two line elements (TLE), the first string being the first of the TLE, the second string being the second line of the TLE. Changing this forces a new resource to be created.
func (o SpacecraftOutput) TwoLineElements() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Spacecraft) pulumi.StringArrayOutput { return v.TwoLineElements }).(pulumi.StringArrayOutput)
}

type SpacecraftArrayOutput struct{ *pulumi.OutputState }

func (SpacecraftArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Spacecraft)(nil)).Elem()
}

func (o SpacecraftArrayOutput) ToSpacecraftArrayOutput() SpacecraftArrayOutput {
	return o
}

func (o SpacecraftArrayOutput) ToSpacecraftArrayOutputWithContext(ctx context.Context) SpacecraftArrayOutput {
	return o
}

func (o SpacecraftArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Spacecraft] {
	return pulumix.Output[[]*Spacecraft]{
		OutputState: o.OutputState,
	}
}

func (o SpacecraftArrayOutput) Index(i pulumi.IntInput) SpacecraftOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Spacecraft {
		return vs[0].([]*Spacecraft)[vs[1].(int)]
	}).(SpacecraftOutput)
}

type SpacecraftMapOutput struct{ *pulumi.OutputState }

func (SpacecraftMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Spacecraft)(nil)).Elem()
}

func (o SpacecraftMapOutput) ToSpacecraftMapOutput() SpacecraftMapOutput {
	return o
}

func (o SpacecraftMapOutput) ToSpacecraftMapOutputWithContext(ctx context.Context) SpacecraftMapOutput {
	return o
}

func (o SpacecraftMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Spacecraft] {
	return pulumix.Output[map[string]*Spacecraft]{
		OutputState: o.OutputState,
	}
}

func (o SpacecraftMapOutput) MapIndex(k pulumi.StringInput) SpacecraftOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Spacecraft {
		return vs[0].(map[string]*Spacecraft)[vs[1].(string)]
	}).(SpacecraftOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SpacecraftInput)(nil)).Elem(), &Spacecraft{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpacecraftArrayInput)(nil)).Elem(), SpacecraftArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpacecraftMapInput)(nil)).Elem(), SpacecraftMap{})
	pulumi.RegisterOutputType(SpacecraftOutput{})
	pulumi.RegisterOutputType(SpacecraftArrayOutput{})
	pulumi.RegisterOutputType(SpacecraftMapOutput{})
}
