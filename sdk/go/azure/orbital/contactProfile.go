// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package orbital

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a Contact profile.
//
// ## Import
//
// Contact profile can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:orbital/contactProfile:ContactProfile example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Orbital/contactProfiles/contactProfile1
//
// ```
type ContactProfile struct {
	pulumi.CustomResourceState

	// Auto-tracking configurations for a spacecraft. Possible values are `disabled`, `xBand` and `sBand`.
	AutoTracking pulumi.StringOutput `pulumi:"autoTracking"`
	// ARM resource identifier of the Event Hub used for telemetry. Requires granting Orbital Resource Provider the rights to send telemetry into the hub.
	EventHubUri pulumi.StringPtrOutput `pulumi:"eventHubUri"`
	// A list of spacecraft links. A `links` block as defined below. Changing this forces a new resource to be created.
	Links ContactProfileLinkArrayOutput `pulumi:"links"`
	// The location where the contact profile exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Maximum elevation of the antenna during the contact in decimal degrees.
	MinimumElevationDegrees pulumi.Float64PtrOutput `pulumi:"minimumElevationDegrees"`
	// Minimum viable contact duration in ISO 8601 format. Used for listing the available contacts with a spacecraft at a given ground station.
	MinimumVariableContactDuration pulumi.StringOutput `pulumi:"minimumVariableContactDuration"`
	// The name of the contact profile. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// ARM resource identifier of the subnet delegated to the Microsoft.Orbital/orbitalGateways. Needs to be at least a class C subnet, and should not have any IP created in it. Changing this forces a new resource to be created.
	NetworkConfigurationSubnetId pulumi.StringOutput `pulumi:"networkConfigurationSubnetId"`
	// The name of the Resource Group where the contact profile exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewContactProfile registers a new resource with the given unique name, arguments, and options.
func NewContactProfile(ctx *pulumi.Context,
	name string, args *ContactProfileArgs, opts ...pulumi.ResourceOption) (*ContactProfile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutoTracking == nil {
		return nil, errors.New("invalid value for required argument 'AutoTracking'")
	}
	if args.Links == nil {
		return nil, errors.New("invalid value for required argument 'Links'")
	}
	if args.MinimumVariableContactDuration == nil {
		return nil, errors.New("invalid value for required argument 'MinimumVariableContactDuration'")
	}
	if args.NetworkConfigurationSubnetId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkConfigurationSubnetId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ContactProfile
	err := ctx.RegisterResource("azure:orbital/contactProfile:ContactProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContactProfile gets an existing ContactProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContactProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContactProfileState, opts ...pulumi.ResourceOption) (*ContactProfile, error) {
	var resource ContactProfile
	err := ctx.ReadResource("azure:orbital/contactProfile:ContactProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContactProfile resources.
type contactProfileState struct {
	// Auto-tracking configurations for a spacecraft. Possible values are `disabled`, `xBand` and `sBand`.
	AutoTracking *string `pulumi:"autoTracking"`
	// ARM resource identifier of the Event Hub used for telemetry. Requires granting Orbital Resource Provider the rights to send telemetry into the hub.
	EventHubUri *string `pulumi:"eventHubUri"`
	// A list of spacecraft links. A `links` block as defined below. Changing this forces a new resource to be created.
	Links []ContactProfileLink `pulumi:"links"`
	// The location where the contact profile exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Maximum elevation of the antenna during the contact in decimal degrees.
	MinimumElevationDegrees *float64 `pulumi:"minimumElevationDegrees"`
	// Minimum viable contact duration in ISO 8601 format. Used for listing the available contacts with a spacecraft at a given ground station.
	MinimumVariableContactDuration *string `pulumi:"minimumVariableContactDuration"`
	// The name of the contact profile. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// ARM resource identifier of the subnet delegated to the Microsoft.Orbital/orbitalGateways. Needs to be at least a class C subnet, and should not have any IP created in it. Changing this forces a new resource to be created.
	NetworkConfigurationSubnetId *string `pulumi:"networkConfigurationSubnetId"`
	// The name of the Resource Group where the contact profile exists. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

type ContactProfileState struct {
	// Auto-tracking configurations for a spacecraft. Possible values are `disabled`, `xBand` and `sBand`.
	AutoTracking pulumi.StringPtrInput
	// ARM resource identifier of the Event Hub used for telemetry. Requires granting Orbital Resource Provider the rights to send telemetry into the hub.
	EventHubUri pulumi.StringPtrInput
	// A list of spacecraft links. A `links` block as defined below. Changing this forces a new resource to be created.
	Links ContactProfileLinkArrayInput
	// The location where the contact profile exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Maximum elevation of the antenna during the contact in decimal degrees.
	MinimumElevationDegrees pulumi.Float64PtrInput
	// Minimum viable contact duration in ISO 8601 format. Used for listing the available contacts with a spacecraft at a given ground station.
	MinimumVariableContactDuration pulumi.StringPtrInput
	// The name of the contact profile. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// ARM resource identifier of the subnet delegated to the Microsoft.Orbital/orbitalGateways. Needs to be at least a class C subnet, and should not have any IP created in it. Changing this forces a new resource to be created.
	NetworkConfigurationSubnetId pulumi.StringPtrInput
	// The name of the Resource Group where the contact profile exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
}

func (ContactProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*contactProfileState)(nil)).Elem()
}

type contactProfileArgs struct {
	// Auto-tracking configurations for a spacecraft. Possible values are `disabled`, `xBand` and `sBand`.
	AutoTracking string `pulumi:"autoTracking"`
	// ARM resource identifier of the Event Hub used for telemetry. Requires granting Orbital Resource Provider the rights to send telemetry into the hub.
	EventHubUri *string `pulumi:"eventHubUri"`
	// A list of spacecraft links. A `links` block as defined below. Changing this forces a new resource to be created.
	Links []ContactProfileLink `pulumi:"links"`
	// The location where the contact profile exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Maximum elevation of the antenna during the contact in decimal degrees.
	MinimumElevationDegrees *float64 `pulumi:"minimumElevationDegrees"`
	// Minimum viable contact duration in ISO 8601 format. Used for listing the available contacts with a spacecraft at a given ground station.
	MinimumVariableContactDuration string `pulumi:"minimumVariableContactDuration"`
	// The name of the contact profile. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// ARM resource identifier of the subnet delegated to the Microsoft.Orbital/orbitalGateways. Needs to be at least a class C subnet, and should not have any IP created in it. Changing this forces a new resource to be created.
	NetworkConfigurationSubnetId string `pulumi:"networkConfigurationSubnetId"`
	// The name of the Resource Group where the contact profile exists. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ContactProfile resource.
type ContactProfileArgs struct {
	// Auto-tracking configurations for a spacecraft. Possible values are `disabled`, `xBand` and `sBand`.
	AutoTracking pulumi.StringInput
	// ARM resource identifier of the Event Hub used for telemetry. Requires granting Orbital Resource Provider the rights to send telemetry into the hub.
	EventHubUri pulumi.StringPtrInput
	// A list of spacecraft links. A `links` block as defined below. Changing this forces a new resource to be created.
	Links ContactProfileLinkArrayInput
	// The location where the contact profile exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Maximum elevation of the antenna during the contact in decimal degrees.
	MinimumElevationDegrees pulumi.Float64PtrInput
	// Minimum viable contact duration in ISO 8601 format. Used for listing the available contacts with a spacecraft at a given ground station.
	MinimumVariableContactDuration pulumi.StringInput
	// The name of the contact profile. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// ARM resource identifier of the subnet delegated to the Microsoft.Orbital/orbitalGateways. Needs to be at least a class C subnet, and should not have any IP created in it. Changing this forces a new resource to be created.
	NetworkConfigurationSubnetId pulumi.StringInput
	// The name of the Resource Group where the contact profile exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
}

func (ContactProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*contactProfileArgs)(nil)).Elem()
}

type ContactProfileInput interface {
	pulumi.Input

	ToContactProfileOutput() ContactProfileOutput
	ToContactProfileOutputWithContext(ctx context.Context) ContactProfileOutput
}

func (*ContactProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactProfile)(nil)).Elem()
}

func (i *ContactProfile) ToContactProfileOutput() ContactProfileOutput {
	return i.ToContactProfileOutputWithContext(context.Background())
}

func (i *ContactProfile) ToContactProfileOutputWithContext(ctx context.Context) ContactProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactProfileOutput)
}

func (i *ContactProfile) ToOutput(ctx context.Context) pulumix.Output[*ContactProfile] {
	return pulumix.Output[*ContactProfile]{
		OutputState: i.ToContactProfileOutputWithContext(ctx).OutputState,
	}
}

// ContactProfileArrayInput is an input type that accepts ContactProfileArray and ContactProfileArrayOutput values.
// You can construct a concrete instance of `ContactProfileArrayInput` via:
//
//	ContactProfileArray{ ContactProfileArgs{...} }
type ContactProfileArrayInput interface {
	pulumi.Input

	ToContactProfileArrayOutput() ContactProfileArrayOutput
	ToContactProfileArrayOutputWithContext(context.Context) ContactProfileArrayOutput
}

type ContactProfileArray []ContactProfileInput

func (ContactProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContactProfile)(nil)).Elem()
}

func (i ContactProfileArray) ToContactProfileArrayOutput() ContactProfileArrayOutput {
	return i.ToContactProfileArrayOutputWithContext(context.Background())
}

func (i ContactProfileArray) ToContactProfileArrayOutputWithContext(ctx context.Context) ContactProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactProfileArrayOutput)
}

func (i ContactProfileArray) ToOutput(ctx context.Context) pulumix.Output[[]*ContactProfile] {
	return pulumix.Output[[]*ContactProfile]{
		OutputState: i.ToContactProfileArrayOutputWithContext(ctx).OutputState,
	}
}

// ContactProfileMapInput is an input type that accepts ContactProfileMap and ContactProfileMapOutput values.
// You can construct a concrete instance of `ContactProfileMapInput` via:
//
//	ContactProfileMap{ "key": ContactProfileArgs{...} }
type ContactProfileMapInput interface {
	pulumi.Input

	ToContactProfileMapOutput() ContactProfileMapOutput
	ToContactProfileMapOutputWithContext(context.Context) ContactProfileMapOutput
}

type ContactProfileMap map[string]ContactProfileInput

func (ContactProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContactProfile)(nil)).Elem()
}

func (i ContactProfileMap) ToContactProfileMapOutput() ContactProfileMapOutput {
	return i.ToContactProfileMapOutputWithContext(context.Background())
}

func (i ContactProfileMap) ToContactProfileMapOutputWithContext(ctx context.Context) ContactProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactProfileMapOutput)
}

func (i ContactProfileMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ContactProfile] {
	return pulumix.Output[map[string]*ContactProfile]{
		OutputState: i.ToContactProfileMapOutputWithContext(ctx).OutputState,
	}
}

type ContactProfileOutput struct{ *pulumi.OutputState }

func (ContactProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactProfile)(nil)).Elem()
}

func (o ContactProfileOutput) ToContactProfileOutput() ContactProfileOutput {
	return o
}

func (o ContactProfileOutput) ToContactProfileOutputWithContext(ctx context.Context) ContactProfileOutput {
	return o
}

func (o ContactProfileOutput) ToOutput(ctx context.Context) pulumix.Output[*ContactProfile] {
	return pulumix.Output[*ContactProfile]{
		OutputState: o.OutputState,
	}
}

// Auto-tracking configurations for a spacecraft. Possible values are `disabled`, `xBand` and `sBand`.
func (o ContactProfileOutput) AutoTracking() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactProfile) pulumi.StringOutput { return v.AutoTracking }).(pulumi.StringOutput)
}

// ARM resource identifier of the Event Hub used for telemetry. Requires granting Orbital Resource Provider the rights to send telemetry into the hub.
func (o ContactProfileOutput) EventHubUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactProfile) pulumi.StringPtrOutput { return v.EventHubUri }).(pulumi.StringPtrOutput)
}

// A list of spacecraft links. A `links` block as defined below. Changing this forces a new resource to be created.
func (o ContactProfileOutput) Links() ContactProfileLinkArrayOutput {
	return o.ApplyT(func(v *ContactProfile) ContactProfileLinkArrayOutput { return v.Links }).(ContactProfileLinkArrayOutput)
}

// The location where the contact profile exists. Changing this forces a new resource to be created.
func (o ContactProfileOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactProfile) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Maximum elevation of the antenna during the contact in decimal degrees.
func (o ContactProfileOutput) MinimumElevationDegrees() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ContactProfile) pulumi.Float64PtrOutput { return v.MinimumElevationDegrees }).(pulumi.Float64PtrOutput)
}

// Minimum viable contact duration in ISO 8601 format. Used for listing the available contacts with a spacecraft at a given ground station.
func (o ContactProfileOutput) MinimumVariableContactDuration() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactProfile) pulumi.StringOutput { return v.MinimumVariableContactDuration }).(pulumi.StringOutput)
}

// The name of the contact profile. Changing this forces a new resource to be created.
func (o ContactProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ARM resource identifier of the subnet delegated to the Microsoft.Orbital/orbitalGateways. Needs to be at least a class C subnet, and should not have any IP created in it. Changing this forces a new resource to be created.
func (o ContactProfileOutput) NetworkConfigurationSubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactProfile) pulumi.StringOutput { return v.NetworkConfigurationSubnetId }).(pulumi.StringOutput)
}

// The name of the Resource Group where the contact profile exists. Changing this forces a new resource to be created.
func (o ContactProfileOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactProfile) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o ContactProfileOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ContactProfile) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type ContactProfileArrayOutput struct{ *pulumi.OutputState }

func (ContactProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContactProfile)(nil)).Elem()
}

func (o ContactProfileArrayOutput) ToContactProfileArrayOutput() ContactProfileArrayOutput {
	return o
}

func (o ContactProfileArrayOutput) ToContactProfileArrayOutputWithContext(ctx context.Context) ContactProfileArrayOutput {
	return o
}

func (o ContactProfileArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ContactProfile] {
	return pulumix.Output[[]*ContactProfile]{
		OutputState: o.OutputState,
	}
}

func (o ContactProfileArrayOutput) Index(i pulumi.IntInput) ContactProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ContactProfile {
		return vs[0].([]*ContactProfile)[vs[1].(int)]
	}).(ContactProfileOutput)
}

type ContactProfileMapOutput struct{ *pulumi.OutputState }

func (ContactProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContactProfile)(nil)).Elem()
}

func (o ContactProfileMapOutput) ToContactProfileMapOutput() ContactProfileMapOutput {
	return o
}

func (o ContactProfileMapOutput) ToContactProfileMapOutputWithContext(ctx context.Context) ContactProfileMapOutput {
	return o
}

func (o ContactProfileMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ContactProfile] {
	return pulumix.Output[map[string]*ContactProfile]{
		OutputState: o.OutputState,
	}
}

func (o ContactProfileMapOutput) MapIndex(k pulumi.StringInput) ContactProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ContactProfile {
		return vs[0].(map[string]*ContactProfile)[vs[1].(string)]
	}).(ContactProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContactProfileInput)(nil)).Elem(), &ContactProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactProfileArrayInput)(nil)).Elem(), ContactProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactProfileMapInput)(nil)).Elem(), ContactProfileMap{})
	pulumi.RegisterOutputType(ContactProfileOutput{})
	pulumi.RegisterOutputType(ContactProfileArrayOutput{})
	pulumi.RegisterOutputType(ContactProfileMapOutput{})
}
