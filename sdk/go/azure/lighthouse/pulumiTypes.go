// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package lighthouse

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DefinitionAuthorization struct {
	// The display name of the security group/service principal/user that would be assigned permissions to the projected subscription.
	PrincipalDisplayName *string `pulumi:"principalDisplayName"`
	// Principal ID of the security group/service principal/user that would be assigned permissions to the projected subscription.
	PrincipalId string `pulumi:"principalId"`
	// The role definition identifier. This role will define the permissions that are granted to the principal. This cannot be an `Owner` role.
	RoleDefinitionId string `pulumi:"roleDefinitionId"`
}

// DefinitionAuthorizationInput is an input type that accepts DefinitionAuthorizationArgs and DefinitionAuthorizationOutput values.
// You can construct a concrete instance of `DefinitionAuthorizationInput` via:
//
//          DefinitionAuthorizationArgs{...}
type DefinitionAuthorizationInput interface {
	pulumi.Input

	ToDefinitionAuthorizationOutput() DefinitionAuthorizationOutput
	ToDefinitionAuthorizationOutputWithContext(context.Context) DefinitionAuthorizationOutput
}

type DefinitionAuthorizationArgs struct {
	// The display name of the security group/service principal/user that would be assigned permissions to the projected subscription.
	PrincipalDisplayName pulumi.StringPtrInput `pulumi:"principalDisplayName"`
	// Principal ID of the security group/service principal/user that would be assigned permissions to the projected subscription.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The role definition identifier. This role will define the permissions that are granted to the principal. This cannot be an `Owner` role.
	RoleDefinitionId pulumi.StringInput `pulumi:"roleDefinitionId"`
}

func (DefinitionAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DefinitionAuthorization)(nil)).Elem()
}

func (i DefinitionAuthorizationArgs) ToDefinitionAuthorizationOutput() DefinitionAuthorizationOutput {
	return i.ToDefinitionAuthorizationOutputWithContext(context.Background())
}

func (i DefinitionAuthorizationArgs) ToDefinitionAuthorizationOutputWithContext(ctx context.Context) DefinitionAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefinitionAuthorizationOutput)
}

// DefinitionAuthorizationArrayInput is an input type that accepts DefinitionAuthorizationArray and DefinitionAuthorizationArrayOutput values.
// You can construct a concrete instance of `DefinitionAuthorizationArrayInput` via:
//
//          DefinitionAuthorizationArray{ DefinitionAuthorizationArgs{...} }
type DefinitionAuthorizationArrayInput interface {
	pulumi.Input

	ToDefinitionAuthorizationArrayOutput() DefinitionAuthorizationArrayOutput
	ToDefinitionAuthorizationArrayOutputWithContext(context.Context) DefinitionAuthorizationArrayOutput
}

type DefinitionAuthorizationArray []DefinitionAuthorizationInput

func (DefinitionAuthorizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DefinitionAuthorization)(nil)).Elem()
}

func (i DefinitionAuthorizationArray) ToDefinitionAuthorizationArrayOutput() DefinitionAuthorizationArrayOutput {
	return i.ToDefinitionAuthorizationArrayOutputWithContext(context.Background())
}

func (i DefinitionAuthorizationArray) ToDefinitionAuthorizationArrayOutputWithContext(ctx context.Context) DefinitionAuthorizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefinitionAuthorizationArrayOutput)
}

type DefinitionAuthorizationOutput struct{ *pulumi.OutputState }

func (DefinitionAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefinitionAuthorization)(nil)).Elem()
}

func (o DefinitionAuthorizationOutput) ToDefinitionAuthorizationOutput() DefinitionAuthorizationOutput {
	return o
}

func (o DefinitionAuthorizationOutput) ToDefinitionAuthorizationOutputWithContext(ctx context.Context) DefinitionAuthorizationOutput {
	return o
}

// The display name of the security group/service principal/user that would be assigned permissions to the projected subscription.
func (o DefinitionAuthorizationOutput) PrincipalDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefinitionAuthorization) *string { return v.PrincipalDisplayName }).(pulumi.StringPtrOutput)
}

// Principal ID of the security group/service principal/user that would be assigned permissions to the projected subscription.
func (o DefinitionAuthorizationOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v DefinitionAuthorization) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The role definition identifier. This role will define the permissions that are granted to the principal. This cannot be an `Owner` role.
func (o DefinitionAuthorizationOutput) RoleDefinitionId() pulumi.StringOutput {
	return o.ApplyT(func(v DefinitionAuthorization) string { return v.RoleDefinitionId }).(pulumi.StringOutput)
}

type DefinitionAuthorizationArrayOutput struct{ *pulumi.OutputState }

func (DefinitionAuthorizationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DefinitionAuthorization)(nil)).Elem()
}

func (o DefinitionAuthorizationArrayOutput) ToDefinitionAuthorizationArrayOutput() DefinitionAuthorizationArrayOutput {
	return o
}

func (o DefinitionAuthorizationArrayOutput) ToDefinitionAuthorizationArrayOutputWithContext(ctx context.Context) DefinitionAuthorizationArrayOutput {
	return o
}

func (o DefinitionAuthorizationArrayOutput) Index(i pulumi.IntInput) DefinitionAuthorizationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DefinitionAuthorization {
		return vs[0].([]DefinitionAuthorization)[vs[1].(int)]
	}).(DefinitionAuthorizationOutput)
}

func init() {
	pulumi.RegisterOutputType(DefinitionAuthorizationOutput{})
	pulumi.RegisterOutputType(DefinitionAuthorizationArrayOutput{})
}
