// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package costmanagement

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an Azure Cost Management Scheduled Action.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/costmanagement"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := costmanagement.NewScheduledAction(ctx, "example", &costmanagement.ScheduledActionArgs{
//				DisplayName:        pulumi.String("Report Last 6 Months"),
//				EmailAddressSender: pulumi.String("platformteam@test.com"),
//				EmailAddresses: pulumi.StringArray{
//					pulumi.String("example@example.com"),
//				},
//				EmailSubject: pulumi.String("Cost Management Report"),
//				EndDate:      pulumi.String("2023-02-02T00:00:00Z"),
//				Frequency:    pulumi.String("Daily"),
//				Message:      pulumi.String("Hi all, take a look at last 6 months spending!"),
//				StartDate:    pulumi.String("2023-01-02T00:00:00Z"),
//				ViewId:       pulumi.String("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.CostManagement/views/ms:CostByService"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Azure Cost Management Scheduled Actions can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:costmanagement/scheduledAction:ScheduledAction example /subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.CostManagement/scheduledActions/scheduledaction1
//
// ```
type ScheduledAction struct {
	pulumi.CustomResourceState

	// UTC day on which cost analysis data will be emailed. Must be between `1` and `31`. This property is applicable when `frequency` is `Monthly`.
	DayOfMonth pulumi.IntPtrOutput `pulumi:"dayOfMonth"`
	// Specifies a list of day names on which cost analysis data will be emailed. This property is applicable when frequency is `Weekly` or `Monthly`. Possible values are `Friday`, `Monday`, `Saturday`, `Sunday`, `Thursday`, `Tuesday` and `Wednesday`.
	DaysOfWeeks pulumi.StringArrayOutput `pulumi:"daysOfWeeks"`
	// User visible input name of the Cost Management Scheduled Action.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Email address of the point of contact that should get the unsubscribe requests of Scheduled Action notification emails.
	EmailAddressSender pulumi.StringOutput `pulumi:"emailAddressSender"`
	// Specifies a list of email addresses that will receive the Scheduled Action.
	EmailAddresses pulumi.StringArrayOutput `pulumi:"emailAddresses"`
	// Subject of the email. Length is limited to 70 characters.
	EmailSubject pulumi.StringOutput `pulumi:"emailSubject"`
	// The end date and time of the Scheduled Action (UTC).
	EndDate pulumi.StringOutput `pulumi:"endDate"`
	// Frequency of the schedule. Possible values are `Daily`, `Monthly` and `Weekly`. Value `Monthly` requires either `weeksOfMonth` and `daysOfWeek` or `dayOfMonth` to be specified. Value `Weekly` requires `daysOfWeek` to be specified.
	Frequency pulumi.StringOutput `pulumi:"frequency"`
	// UTC time at which cost analysis data will be emailed. Must be between `0` and `23`.
	HourOfDay pulumi.IntPtrOutput `pulumi:"hourOfDay"`
	// Message to be added in the email. Length is limited to 250 characters.
	Message pulumi.StringPtrOutput `pulumi:"message"`
	// The name which should be used for this Azure Cost Management Scheduled Action. Changing this forces a new Azure Cost Management Scheduled Action to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The start date and time of the Scheduled Action (UTC).
	StartDate pulumi.StringOutput `pulumi:"startDate"`
	// The ID of the Cost Management View that is used by the Scheduled Action. Changing this forces a new resource to be created.
	ViewId pulumi.StringOutput `pulumi:"viewId"`
	// Specifies a list of weeks in which cost analysis data will be emailed. This property is applicable when `frequency` is `Monthly` and used in combination with `daysOfWeek`. Possible values are `First`, `Fourth`, `Last`, `Second` and `Third`.
	WeeksOfMonths pulumi.StringArrayOutput `pulumi:"weeksOfMonths"`
}

// NewScheduledAction registers a new resource with the given unique name, arguments, and options.
func NewScheduledAction(ctx *pulumi.Context,
	name string, args *ScheduledActionArgs, opts ...pulumi.ResourceOption) (*ScheduledAction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.EmailAddressSender == nil {
		return nil, errors.New("invalid value for required argument 'EmailAddressSender'")
	}
	if args.EmailAddresses == nil {
		return nil, errors.New("invalid value for required argument 'EmailAddresses'")
	}
	if args.EmailSubject == nil {
		return nil, errors.New("invalid value for required argument 'EmailSubject'")
	}
	if args.EndDate == nil {
		return nil, errors.New("invalid value for required argument 'EndDate'")
	}
	if args.Frequency == nil {
		return nil, errors.New("invalid value for required argument 'Frequency'")
	}
	if args.StartDate == nil {
		return nil, errors.New("invalid value for required argument 'StartDate'")
	}
	if args.ViewId == nil {
		return nil, errors.New("invalid value for required argument 'ViewId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ScheduledAction
	err := ctx.RegisterResource("azure:costmanagement/scheduledAction:ScheduledAction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScheduledAction gets an existing ScheduledAction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScheduledAction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScheduledActionState, opts ...pulumi.ResourceOption) (*ScheduledAction, error) {
	var resource ScheduledAction
	err := ctx.ReadResource("azure:costmanagement/scheduledAction:ScheduledAction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScheduledAction resources.
type scheduledActionState struct {
	// UTC day on which cost analysis data will be emailed. Must be between `1` and `31`. This property is applicable when `frequency` is `Monthly`.
	DayOfMonth *int `pulumi:"dayOfMonth"`
	// Specifies a list of day names on which cost analysis data will be emailed. This property is applicable when frequency is `Weekly` or `Monthly`. Possible values are `Friday`, `Monday`, `Saturday`, `Sunday`, `Thursday`, `Tuesday` and `Wednesday`.
	DaysOfWeeks []string `pulumi:"daysOfWeeks"`
	// User visible input name of the Cost Management Scheduled Action.
	DisplayName *string `pulumi:"displayName"`
	// Email address of the point of contact that should get the unsubscribe requests of Scheduled Action notification emails.
	EmailAddressSender *string `pulumi:"emailAddressSender"`
	// Specifies a list of email addresses that will receive the Scheduled Action.
	EmailAddresses []string `pulumi:"emailAddresses"`
	// Subject of the email. Length is limited to 70 characters.
	EmailSubject *string `pulumi:"emailSubject"`
	// The end date and time of the Scheduled Action (UTC).
	EndDate *string `pulumi:"endDate"`
	// Frequency of the schedule. Possible values are `Daily`, `Monthly` and `Weekly`. Value `Monthly` requires either `weeksOfMonth` and `daysOfWeek` or `dayOfMonth` to be specified. Value `Weekly` requires `daysOfWeek` to be specified.
	Frequency *string `pulumi:"frequency"`
	// UTC time at which cost analysis data will be emailed. Must be between `0` and `23`.
	HourOfDay *int `pulumi:"hourOfDay"`
	// Message to be added in the email. Length is limited to 250 characters.
	Message *string `pulumi:"message"`
	// The name which should be used for this Azure Cost Management Scheduled Action. Changing this forces a new Azure Cost Management Scheduled Action to be created.
	Name *string `pulumi:"name"`
	// The start date and time of the Scheduled Action (UTC).
	StartDate *string `pulumi:"startDate"`
	// The ID of the Cost Management View that is used by the Scheduled Action. Changing this forces a new resource to be created.
	ViewId *string `pulumi:"viewId"`
	// Specifies a list of weeks in which cost analysis data will be emailed. This property is applicable when `frequency` is `Monthly` and used in combination with `daysOfWeek`. Possible values are `First`, `Fourth`, `Last`, `Second` and `Third`.
	WeeksOfMonths []string `pulumi:"weeksOfMonths"`
}

type ScheduledActionState struct {
	// UTC day on which cost analysis data will be emailed. Must be between `1` and `31`. This property is applicable when `frequency` is `Monthly`.
	DayOfMonth pulumi.IntPtrInput
	// Specifies a list of day names on which cost analysis data will be emailed. This property is applicable when frequency is `Weekly` or `Monthly`. Possible values are `Friday`, `Monday`, `Saturday`, `Sunday`, `Thursday`, `Tuesday` and `Wednesday`.
	DaysOfWeeks pulumi.StringArrayInput
	// User visible input name of the Cost Management Scheduled Action.
	DisplayName pulumi.StringPtrInput
	// Email address of the point of contact that should get the unsubscribe requests of Scheduled Action notification emails.
	EmailAddressSender pulumi.StringPtrInput
	// Specifies a list of email addresses that will receive the Scheduled Action.
	EmailAddresses pulumi.StringArrayInput
	// Subject of the email. Length is limited to 70 characters.
	EmailSubject pulumi.StringPtrInput
	// The end date and time of the Scheduled Action (UTC).
	EndDate pulumi.StringPtrInput
	// Frequency of the schedule. Possible values are `Daily`, `Monthly` and `Weekly`. Value `Monthly` requires either `weeksOfMonth` and `daysOfWeek` or `dayOfMonth` to be specified. Value `Weekly` requires `daysOfWeek` to be specified.
	Frequency pulumi.StringPtrInput
	// UTC time at which cost analysis data will be emailed. Must be between `0` and `23`.
	HourOfDay pulumi.IntPtrInput
	// Message to be added in the email. Length is limited to 250 characters.
	Message pulumi.StringPtrInput
	// The name which should be used for this Azure Cost Management Scheduled Action. Changing this forces a new Azure Cost Management Scheduled Action to be created.
	Name pulumi.StringPtrInput
	// The start date and time of the Scheduled Action (UTC).
	StartDate pulumi.StringPtrInput
	// The ID of the Cost Management View that is used by the Scheduled Action. Changing this forces a new resource to be created.
	ViewId pulumi.StringPtrInput
	// Specifies a list of weeks in which cost analysis data will be emailed. This property is applicable when `frequency` is `Monthly` and used in combination with `daysOfWeek`. Possible values are `First`, `Fourth`, `Last`, `Second` and `Third`.
	WeeksOfMonths pulumi.StringArrayInput
}

func (ScheduledActionState) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduledActionState)(nil)).Elem()
}

type scheduledActionArgs struct {
	// UTC day on which cost analysis data will be emailed. Must be between `1` and `31`. This property is applicable when `frequency` is `Monthly`.
	DayOfMonth *int `pulumi:"dayOfMonth"`
	// Specifies a list of day names on which cost analysis data will be emailed. This property is applicable when frequency is `Weekly` or `Monthly`. Possible values are `Friday`, `Monday`, `Saturday`, `Sunday`, `Thursday`, `Tuesday` and `Wednesday`.
	DaysOfWeeks []string `pulumi:"daysOfWeeks"`
	// User visible input name of the Cost Management Scheduled Action.
	DisplayName string `pulumi:"displayName"`
	// Email address of the point of contact that should get the unsubscribe requests of Scheduled Action notification emails.
	EmailAddressSender string `pulumi:"emailAddressSender"`
	// Specifies a list of email addresses that will receive the Scheduled Action.
	EmailAddresses []string `pulumi:"emailAddresses"`
	// Subject of the email. Length is limited to 70 characters.
	EmailSubject string `pulumi:"emailSubject"`
	// The end date and time of the Scheduled Action (UTC).
	EndDate string `pulumi:"endDate"`
	// Frequency of the schedule. Possible values are `Daily`, `Monthly` and `Weekly`. Value `Monthly` requires either `weeksOfMonth` and `daysOfWeek` or `dayOfMonth` to be specified. Value `Weekly` requires `daysOfWeek` to be specified.
	Frequency string `pulumi:"frequency"`
	// UTC time at which cost analysis data will be emailed. Must be between `0` and `23`.
	HourOfDay *int `pulumi:"hourOfDay"`
	// Message to be added in the email. Length is limited to 250 characters.
	Message *string `pulumi:"message"`
	// The name which should be used for this Azure Cost Management Scheduled Action. Changing this forces a new Azure Cost Management Scheduled Action to be created.
	Name *string `pulumi:"name"`
	// The start date and time of the Scheduled Action (UTC).
	StartDate string `pulumi:"startDate"`
	// The ID of the Cost Management View that is used by the Scheduled Action. Changing this forces a new resource to be created.
	ViewId string `pulumi:"viewId"`
	// Specifies a list of weeks in which cost analysis data will be emailed. This property is applicable when `frequency` is `Monthly` and used in combination with `daysOfWeek`. Possible values are `First`, `Fourth`, `Last`, `Second` and `Third`.
	WeeksOfMonths []string `pulumi:"weeksOfMonths"`
}

// The set of arguments for constructing a ScheduledAction resource.
type ScheduledActionArgs struct {
	// UTC day on which cost analysis data will be emailed. Must be between `1` and `31`. This property is applicable when `frequency` is `Monthly`.
	DayOfMonth pulumi.IntPtrInput
	// Specifies a list of day names on which cost analysis data will be emailed. This property is applicable when frequency is `Weekly` or `Monthly`. Possible values are `Friday`, `Monday`, `Saturday`, `Sunday`, `Thursday`, `Tuesday` and `Wednesday`.
	DaysOfWeeks pulumi.StringArrayInput
	// User visible input name of the Cost Management Scheduled Action.
	DisplayName pulumi.StringInput
	// Email address of the point of contact that should get the unsubscribe requests of Scheduled Action notification emails.
	EmailAddressSender pulumi.StringInput
	// Specifies a list of email addresses that will receive the Scheduled Action.
	EmailAddresses pulumi.StringArrayInput
	// Subject of the email. Length is limited to 70 characters.
	EmailSubject pulumi.StringInput
	// The end date and time of the Scheduled Action (UTC).
	EndDate pulumi.StringInput
	// Frequency of the schedule. Possible values are `Daily`, `Monthly` and `Weekly`. Value `Monthly` requires either `weeksOfMonth` and `daysOfWeek` or `dayOfMonth` to be specified. Value `Weekly` requires `daysOfWeek` to be specified.
	Frequency pulumi.StringInput
	// UTC time at which cost analysis data will be emailed. Must be between `0` and `23`.
	HourOfDay pulumi.IntPtrInput
	// Message to be added in the email. Length is limited to 250 characters.
	Message pulumi.StringPtrInput
	// The name which should be used for this Azure Cost Management Scheduled Action. Changing this forces a new Azure Cost Management Scheduled Action to be created.
	Name pulumi.StringPtrInput
	// The start date and time of the Scheduled Action (UTC).
	StartDate pulumi.StringInput
	// The ID of the Cost Management View that is used by the Scheduled Action. Changing this forces a new resource to be created.
	ViewId pulumi.StringInput
	// Specifies a list of weeks in which cost analysis data will be emailed. This property is applicable when `frequency` is `Monthly` and used in combination with `daysOfWeek`. Possible values are `First`, `Fourth`, `Last`, `Second` and `Third`.
	WeeksOfMonths pulumi.StringArrayInput
}

func (ScheduledActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduledActionArgs)(nil)).Elem()
}

type ScheduledActionInput interface {
	pulumi.Input

	ToScheduledActionOutput() ScheduledActionOutput
	ToScheduledActionOutputWithContext(ctx context.Context) ScheduledActionOutput
}

func (*ScheduledAction) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledAction)(nil)).Elem()
}

func (i *ScheduledAction) ToScheduledActionOutput() ScheduledActionOutput {
	return i.ToScheduledActionOutputWithContext(context.Background())
}

func (i *ScheduledAction) ToScheduledActionOutputWithContext(ctx context.Context) ScheduledActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledActionOutput)
}

func (i *ScheduledAction) ToOutput(ctx context.Context) pulumix.Output[*ScheduledAction] {
	return pulumix.Output[*ScheduledAction]{
		OutputState: i.ToScheduledActionOutputWithContext(ctx).OutputState,
	}
}

// ScheduledActionArrayInput is an input type that accepts ScheduledActionArray and ScheduledActionArrayOutput values.
// You can construct a concrete instance of `ScheduledActionArrayInput` via:
//
//	ScheduledActionArray{ ScheduledActionArgs{...} }
type ScheduledActionArrayInput interface {
	pulumi.Input

	ToScheduledActionArrayOutput() ScheduledActionArrayOutput
	ToScheduledActionArrayOutputWithContext(context.Context) ScheduledActionArrayOutput
}

type ScheduledActionArray []ScheduledActionInput

func (ScheduledActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScheduledAction)(nil)).Elem()
}

func (i ScheduledActionArray) ToScheduledActionArrayOutput() ScheduledActionArrayOutput {
	return i.ToScheduledActionArrayOutputWithContext(context.Background())
}

func (i ScheduledActionArray) ToScheduledActionArrayOutputWithContext(ctx context.Context) ScheduledActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledActionArrayOutput)
}

func (i ScheduledActionArray) ToOutput(ctx context.Context) pulumix.Output[[]*ScheduledAction] {
	return pulumix.Output[[]*ScheduledAction]{
		OutputState: i.ToScheduledActionArrayOutputWithContext(ctx).OutputState,
	}
}

// ScheduledActionMapInput is an input type that accepts ScheduledActionMap and ScheduledActionMapOutput values.
// You can construct a concrete instance of `ScheduledActionMapInput` via:
//
//	ScheduledActionMap{ "key": ScheduledActionArgs{...} }
type ScheduledActionMapInput interface {
	pulumi.Input

	ToScheduledActionMapOutput() ScheduledActionMapOutput
	ToScheduledActionMapOutputWithContext(context.Context) ScheduledActionMapOutput
}

type ScheduledActionMap map[string]ScheduledActionInput

func (ScheduledActionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScheduledAction)(nil)).Elem()
}

func (i ScheduledActionMap) ToScheduledActionMapOutput() ScheduledActionMapOutput {
	return i.ToScheduledActionMapOutputWithContext(context.Background())
}

func (i ScheduledActionMap) ToScheduledActionMapOutputWithContext(ctx context.Context) ScheduledActionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledActionMapOutput)
}

func (i ScheduledActionMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ScheduledAction] {
	return pulumix.Output[map[string]*ScheduledAction]{
		OutputState: i.ToScheduledActionMapOutputWithContext(ctx).OutputState,
	}
}

type ScheduledActionOutput struct{ *pulumi.OutputState }

func (ScheduledActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledAction)(nil)).Elem()
}

func (o ScheduledActionOutput) ToScheduledActionOutput() ScheduledActionOutput {
	return o
}

func (o ScheduledActionOutput) ToScheduledActionOutputWithContext(ctx context.Context) ScheduledActionOutput {
	return o
}

func (o ScheduledActionOutput) ToOutput(ctx context.Context) pulumix.Output[*ScheduledAction] {
	return pulumix.Output[*ScheduledAction]{
		OutputState: o.OutputState,
	}
}

// UTC day on which cost analysis data will be emailed. Must be between `1` and `31`. This property is applicable when `frequency` is `Monthly`.
func (o ScheduledActionOutput) DayOfMonth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScheduledAction) pulumi.IntPtrOutput { return v.DayOfMonth }).(pulumi.IntPtrOutput)
}

// Specifies a list of day names on which cost analysis data will be emailed. This property is applicable when frequency is `Weekly` or `Monthly`. Possible values are `Friday`, `Monday`, `Saturday`, `Sunday`, `Thursday`, `Tuesday` and `Wednesday`.
func (o ScheduledActionOutput) DaysOfWeeks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScheduledAction) pulumi.StringArrayOutput { return v.DaysOfWeeks }).(pulumi.StringArrayOutput)
}

// User visible input name of the Cost Management Scheduled Action.
func (o ScheduledActionOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledAction) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Email address of the point of contact that should get the unsubscribe requests of Scheduled Action notification emails.
func (o ScheduledActionOutput) EmailAddressSender() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledAction) pulumi.StringOutput { return v.EmailAddressSender }).(pulumi.StringOutput)
}

// Specifies a list of email addresses that will receive the Scheduled Action.
func (o ScheduledActionOutput) EmailAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScheduledAction) pulumi.StringArrayOutput { return v.EmailAddresses }).(pulumi.StringArrayOutput)
}

// Subject of the email. Length is limited to 70 characters.
func (o ScheduledActionOutput) EmailSubject() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledAction) pulumi.StringOutput { return v.EmailSubject }).(pulumi.StringOutput)
}

// The end date and time of the Scheduled Action (UTC).
func (o ScheduledActionOutput) EndDate() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledAction) pulumi.StringOutput { return v.EndDate }).(pulumi.StringOutput)
}

// Frequency of the schedule. Possible values are `Daily`, `Monthly` and `Weekly`. Value `Monthly` requires either `weeksOfMonth` and `daysOfWeek` or `dayOfMonth` to be specified. Value `Weekly` requires `daysOfWeek` to be specified.
func (o ScheduledActionOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledAction) pulumi.StringOutput { return v.Frequency }).(pulumi.StringOutput)
}

// UTC time at which cost analysis data will be emailed. Must be between `0` and `23`.
func (o ScheduledActionOutput) HourOfDay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScheduledAction) pulumi.IntPtrOutput { return v.HourOfDay }).(pulumi.IntPtrOutput)
}

// Message to be added in the email. Length is limited to 250 characters.
func (o ScheduledActionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduledAction) pulumi.StringPtrOutput { return v.Message }).(pulumi.StringPtrOutput)
}

// The name which should be used for this Azure Cost Management Scheduled Action. Changing this forces a new Azure Cost Management Scheduled Action to be created.
func (o ScheduledActionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledAction) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The start date and time of the Scheduled Action (UTC).
func (o ScheduledActionOutput) StartDate() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledAction) pulumi.StringOutput { return v.StartDate }).(pulumi.StringOutput)
}

// The ID of the Cost Management View that is used by the Scheduled Action. Changing this forces a new resource to be created.
func (o ScheduledActionOutput) ViewId() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledAction) pulumi.StringOutput { return v.ViewId }).(pulumi.StringOutput)
}

// Specifies a list of weeks in which cost analysis data will be emailed. This property is applicable when `frequency` is `Monthly` and used in combination with `daysOfWeek`. Possible values are `First`, `Fourth`, `Last`, `Second` and `Third`.
func (o ScheduledActionOutput) WeeksOfMonths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScheduledAction) pulumi.StringArrayOutput { return v.WeeksOfMonths }).(pulumi.StringArrayOutput)
}

type ScheduledActionArrayOutput struct{ *pulumi.OutputState }

func (ScheduledActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScheduledAction)(nil)).Elem()
}

func (o ScheduledActionArrayOutput) ToScheduledActionArrayOutput() ScheduledActionArrayOutput {
	return o
}

func (o ScheduledActionArrayOutput) ToScheduledActionArrayOutputWithContext(ctx context.Context) ScheduledActionArrayOutput {
	return o
}

func (o ScheduledActionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ScheduledAction] {
	return pulumix.Output[[]*ScheduledAction]{
		OutputState: o.OutputState,
	}
}

func (o ScheduledActionArrayOutput) Index(i pulumi.IntInput) ScheduledActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ScheduledAction {
		return vs[0].([]*ScheduledAction)[vs[1].(int)]
	}).(ScheduledActionOutput)
}

type ScheduledActionMapOutput struct{ *pulumi.OutputState }

func (ScheduledActionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScheduledAction)(nil)).Elem()
}

func (o ScheduledActionMapOutput) ToScheduledActionMapOutput() ScheduledActionMapOutput {
	return o
}

func (o ScheduledActionMapOutput) ToScheduledActionMapOutputWithContext(ctx context.Context) ScheduledActionMapOutput {
	return o
}

func (o ScheduledActionMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ScheduledAction] {
	return pulumix.Output[map[string]*ScheduledAction]{
		OutputState: o.OutputState,
	}
}

func (o ScheduledActionMapOutput) MapIndex(k pulumi.StringInput) ScheduledActionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ScheduledAction {
		return vs[0].(map[string]*ScheduledAction)[vs[1].(string)]
	}).(ScheduledActionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledActionInput)(nil)).Elem(), &ScheduledAction{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledActionArrayInput)(nil)).Elem(), ScheduledActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledActionMapInput)(nil)).Elem(), ScheduledActionMap{})
	pulumi.RegisterOutputType(ScheduledActionOutput{})
	pulumi.RegisterOutputType(ScheduledActionArrayOutput{})
	pulumi.RegisterOutputType(ScheduledActionMapOutput{})
}
