// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an IotHub Enrichment
//
// > **NOTE:** Enrichment can be defined either directly on the `iot.IoTHub` resource, or using the `iot.Enrichment` resources - but the two cannot be used together. If both are used against the same IoTHub, spurious changes will occur.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/iot"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/storage"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West Europe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
// 			ResourceGroupName:      exampleResourceGroup.Name,
// 			Location:               exampleResourceGroup.Location,
// 			AccountTier:            pulumi.String("Standard"),
// 			AccountReplicationType: pulumi.String("LRS"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleContainer, err := storage.NewContainer(ctx, "exampleContainer", &storage.ContainerArgs{
// 			StorageAccountName:  exampleAccount.Name,
// 			ContainerAccessType: pulumi.String("private"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleIoTHub, err := iot.NewIoTHub(ctx, "exampleIoTHub", &iot.IoTHubArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			Location:          exampleResourceGroup.Location,
// 			Sku: &iot.IoTHubSkuArgs{
// 				Name:     pulumi.String("S1"),
// 				Capacity: pulumi.Int(1),
// 			},
// 			Tags: pulumi.StringMap{
// 				"purpose": pulumi.String("testing"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleEndpointStorageContainer, err := iot.NewEndpointStorageContainer(ctx, "exampleEndpointStorageContainer", &iot.EndpointStorageContainerArgs{
// 			ResourceGroupName:       exampleResourceGroup.Name,
// 			IothubName:              exampleIoTHub.Name,
// 			ConnectionString:        exampleAccount.PrimaryBlobConnectionString,
// 			BatchFrequencyInSeconds: pulumi.Int(60),
// 			MaxChunkSizeInBytes:     pulumi.Int(10485760),
// 			ContainerName:           exampleContainer.Name,
// 			Encoding:                pulumi.String("Avro"),
// 			FileNameFormat:          pulumi.String("{iothub}/{partition}_{YYYY}_{MM}_{DD}_{HH}_{mm}"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = iot.NewRoute(ctx, "exampleRoute", &iot.RouteArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			IothubName:        exampleIoTHub.Name,
// 			Source:            pulumi.String("DeviceMessages"),
// 			Condition:         pulumi.String("true"),
// 			EndpointNames: pulumi.String{
// 				exampleEndpointStorageContainer.Name,
// 			},
// 			Enabled: pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = iot.NewEnrichment(ctx, "exampleEnrichment", &iot.EnrichmentArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			IothubName:        exampleIoTHub.Name,
// 			Key:               pulumi.String("example"),
// 			Value:             pulumi.String("my value"),
// 			EndpointNames: pulumi.StringArray{
// 				exampleEndpointStorageContainer.Name,
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// IoTHub Enrichment can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:iot/enrichment:Enrichment enrichment1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Devices/IotHubs/hub1/Enrichments/enrichment1
// ```
type Enrichment struct {
	pulumi.CustomResourceState

	// The list of endpoints which will be enriched.
	EndpointNames pulumi.StringArrayOutput `pulumi:"endpointNames"`
	IothubName    pulumi.StringOutput      `pulumi:"iothubName"`
	// The key of the enrichment.
	Key               pulumi.StringOutput `pulumi:"key"`
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The value of the enrichment. Value can be any static string, the name of the IoT hub sending the message (use `$iothubname`) or information from the device twin (ex: `$twin.tags.latitude`)
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewEnrichment registers a new resource with the given unique name, arguments, and options.
func NewEnrichment(ctx *pulumi.Context,
	name string, args *EnrichmentArgs, opts ...pulumi.ResourceOption) (*Enrichment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EndpointNames == nil {
		return nil, errors.New("invalid value for required argument 'EndpointNames'")
	}
	if args.IothubName == nil {
		return nil, errors.New("invalid value for required argument 'IothubName'")
	}
	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	var resource Enrichment
	err := ctx.RegisterResource("azure:iot/enrichment:Enrichment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnrichment gets an existing Enrichment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnrichment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnrichmentState, opts ...pulumi.ResourceOption) (*Enrichment, error) {
	var resource Enrichment
	err := ctx.ReadResource("azure:iot/enrichment:Enrichment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Enrichment resources.
type enrichmentState struct {
	// The list of endpoints which will be enriched.
	EndpointNames []string `pulumi:"endpointNames"`
	IothubName    *string  `pulumi:"iothubName"`
	// The key of the enrichment.
	Key               *string `pulumi:"key"`
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The value of the enrichment. Value can be any static string, the name of the IoT hub sending the message (use `$iothubname`) or information from the device twin (ex: `$twin.tags.latitude`)
	Value *string `pulumi:"value"`
}

type EnrichmentState struct {
	// The list of endpoints which will be enriched.
	EndpointNames pulumi.StringArrayInput
	IothubName    pulumi.StringPtrInput
	// The key of the enrichment.
	Key               pulumi.StringPtrInput
	ResourceGroupName pulumi.StringPtrInput
	// The value of the enrichment. Value can be any static string, the name of the IoT hub sending the message (use `$iothubname`) or information from the device twin (ex: `$twin.tags.latitude`)
	Value pulumi.StringPtrInput
}

func (EnrichmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*enrichmentState)(nil)).Elem()
}

type enrichmentArgs struct {
	// The list of endpoints which will be enriched.
	EndpointNames []string `pulumi:"endpointNames"`
	IothubName    string   `pulumi:"iothubName"`
	// The key of the enrichment.
	Key               string `pulumi:"key"`
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The value of the enrichment. Value can be any static string, the name of the IoT hub sending the message (use `$iothubname`) or information from the device twin (ex: `$twin.tags.latitude`)
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a Enrichment resource.
type EnrichmentArgs struct {
	// The list of endpoints which will be enriched.
	EndpointNames pulumi.StringArrayInput
	IothubName    pulumi.StringInput
	// The key of the enrichment.
	Key               pulumi.StringInput
	ResourceGroupName pulumi.StringInput
	// The value of the enrichment. Value can be any static string, the name of the IoT hub sending the message (use `$iothubname`) or information from the device twin (ex: `$twin.tags.latitude`)
	Value pulumi.StringInput
}

func (EnrichmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*enrichmentArgs)(nil)).Elem()
}

type EnrichmentInput interface {
	pulumi.Input

	ToEnrichmentOutput() EnrichmentOutput
	ToEnrichmentOutputWithContext(ctx context.Context) EnrichmentOutput
}

func (*Enrichment) ElementType() reflect.Type {
	return reflect.TypeOf((*Enrichment)(nil))
}

func (i *Enrichment) ToEnrichmentOutput() EnrichmentOutput {
	return i.ToEnrichmentOutputWithContext(context.Background())
}

func (i *Enrichment) ToEnrichmentOutputWithContext(ctx context.Context) EnrichmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnrichmentOutput)
}

func (i *Enrichment) ToEnrichmentPtrOutput() EnrichmentPtrOutput {
	return i.ToEnrichmentPtrOutputWithContext(context.Background())
}

func (i *Enrichment) ToEnrichmentPtrOutputWithContext(ctx context.Context) EnrichmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnrichmentPtrOutput)
}

type EnrichmentPtrInput interface {
	pulumi.Input

	ToEnrichmentPtrOutput() EnrichmentPtrOutput
	ToEnrichmentPtrOutputWithContext(ctx context.Context) EnrichmentPtrOutput
}

type enrichmentPtrType EnrichmentArgs

func (*enrichmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Enrichment)(nil))
}

func (i *enrichmentPtrType) ToEnrichmentPtrOutput() EnrichmentPtrOutput {
	return i.ToEnrichmentPtrOutputWithContext(context.Background())
}

func (i *enrichmentPtrType) ToEnrichmentPtrOutputWithContext(ctx context.Context) EnrichmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnrichmentPtrOutput)
}

// EnrichmentArrayInput is an input type that accepts EnrichmentArray and EnrichmentArrayOutput values.
// You can construct a concrete instance of `EnrichmentArrayInput` via:
//
//          EnrichmentArray{ EnrichmentArgs{...} }
type EnrichmentArrayInput interface {
	pulumi.Input

	ToEnrichmentArrayOutput() EnrichmentArrayOutput
	ToEnrichmentArrayOutputWithContext(context.Context) EnrichmentArrayOutput
}

type EnrichmentArray []EnrichmentInput

func (EnrichmentArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Enrichment)(nil))
}

func (i EnrichmentArray) ToEnrichmentArrayOutput() EnrichmentArrayOutput {
	return i.ToEnrichmentArrayOutputWithContext(context.Background())
}

func (i EnrichmentArray) ToEnrichmentArrayOutputWithContext(ctx context.Context) EnrichmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnrichmentArrayOutput)
}

// EnrichmentMapInput is an input type that accepts EnrichmentMap and EnrichmentMapOutput values.
// You can construct a concrete instance of `EnrichmentMapInput` via:
//
//          EnrichmentMap{ "key": EnrichmentArgs{...} }
type EnrichmentMapInput interface {
	pulumi.Input

	ToEnrichmentMapOutput() EnrichmentMapOutput
	ToEnrichmentMapOutputWithContext(context.Context) EnrichmentMapOutput
}

type EnrichmentMap map[string]EnrichmentInput

func (EnrichmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Enrichment)(nil))
}

func (i EnrichmentMap) ToEnrichmentMapOutput() EnrichmentMapOutput {
	return i.ToEnrichmentMapOutputWithContext(context.Background())
}

func (i EnrichmentMap) ToEnrichmentMapOutputWithContext(ctx context.Context) EnrichmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnrichmentMapOutput)
}

type EnrichmentOutput struct {
	*pulumi.OutputState
}

func (EnrichmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Enrichment)(nil))
}

func (o EnrichmentOutput) ToEnrichmentOutput() EnrichmentOutput {
	return o
}

func (o EnrichmentOutput) ToEnrichmentOutputWithContext(ctx context.Context) EnrichmentOutput {
	return o
}

func (o EnrichmentOutput) ToEnrichmentPtrOutput() EnrichmentPtrOutput {
	return o.ToEnrichmentPtrOutputWithContext(context.Background())
}

func (o EnrichmentOutput) ToEnrichmentPtrOutputWithContext(ctx context.Context) EnrichmentPtrOutput {
	return o.ApplyT(func(v Enrichment) *Enrichment {
		return &v
	}).(EnrichmentPtrOutput)
}

type EnrichmentPtrOutput struct {
	*pulumi.OutputState
}

func (EnrichmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Enrichment)(nil))
}

func (o EnrichmentPtrOutput) ToEnrichmentPtrOutput() EnrichmentPtrOutput {
	return o
}

func (o EnrichmentPtrOutput) ToEnrichmentPtrOutputWithContext(ctx context.Context) EnrichmentPtrOutput {
	return o
}

type EnrichmentArrayOutput struct{ *pulumi.OutputState }

func (EnrichmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Enrichment)(nil))
}

func (o EnrichmentArrayOutput) ToEnrichmentArrayOutput() EnrichmentArrayOutput {
	return o
}

func (o EnrichmentArrayOutput) ToEnrichmentArrayOutputWithContext(ctx context.Context) EnrichmentArrayOutput {
	return o
}

func (o EnrichmentArrayOutput) Index(i pulumi.IntInput) EnrichmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Enrichment {
		return vs[0].([]Enrichment)[vs[1].(int)]
	}).(EnrichmentOutput)
}

type EnrichmentMapOutput struct{ *pulumi.OutputState }

func (EnrichmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Enrichment)(nil))
}

func (o EnrichmentMapOutput) ToEnrichmentMapOutput() EnrichmentMapOutput {
	return o
}

func (o EnrichmentMapOutput) ToEnrichmentMapOutputWithContext(ctx context.Context) EnrichmentMapOutput {
	return o
}

func (o EnrichmentMapOutput) MapIndex(k pulumi.StringInput) EnrichmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Enrichment {
		return vs[0].(map[string]Enrichment)[vs[1].(string)]
	}).(EnrichmentOutput)
}

func init() {
	pulumi.RegisterOutputType(EnrichmentOutput{})
	pulumi.RegisterOutputType(EnrichmentPtrOutput{})
	pulumi.RegisterOutputType(EnrichmentArrayOutput{})
	pulumi.RegisterOutputType(EnrichmentMapOutput{})
}
