// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an IotHub EventHub Endpoint
//
// > **NOTE:** Endpoints can be defined either directly on the `iot.IoTHub` resource, or using the `azurerm_iothub_endpoint_*` resources - but the two ways of defining the endpoints cannot be used together. If both are used against the same IoTHub, spurious changes will occur. Also, defining a `azurerm_iothub_endpoint_*` resource and another endpoint of a different type directly on the `iot.IoTHub` resource is not supported.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/eventhub"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/iot"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleEventHubNamespace, err := eventhub.NewEventHubNamespace(ctx, "exampleEventHubNamespace", &eventhub.EventHubNamespaceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku:               pulumi.String("Basic"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleEventHub, err := eventhub.NewEventHub(ctx, "exampleEventHub", &eventhub.EventHubArgs{
//				NamespaceName:     exampleEventHubNamespace.Name,
//				ResourceGroupName: exampleResourceGroup.Name,
//				PartitionCount:    pulumi.Int(2),
//				MessageRetention:  pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAuthorizationRule, err := eventhub.NewAuthorizationRule(ctx, "exampleAuthorizationRule", &eventhub.AuthorizationRuleArgs{
//				NamespaceName:     exampleEventHubNamespace.Name,
//				EventhubName:      exampleEventHub.Name,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Listen:            pulumi.Bool(false),
//				Send:              pulumi.Bool(true),
//				Manage:            pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			exampleIoTHub, err := iot.NewIoTHub(ctx, "exampleIoTHub", &iot.IoTHubArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				Sku: &iot.IoTHubSkuArgs{
//					Name:     pulumi.String("B1"),
//					Capacity: pulumi.Int(1),
//				},
//				Tags: pulumi.StringMap{
//					"purpose": pulumi.String("example"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = iot.NewEndpointEventhub(ctx, "exampleEndpointEventhub", &iot.EndpointEventhubArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				IothubId:          exampleIoTHub.ID(),
//				ConnectionString:  exampleAuthorizationRule.PrimaryConnectionString,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// IoTHub EventHub Endpoint can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:iot/endpointEventhub:EndpointEventhub eventhub1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Devices/iotHubs/hub1/endpoints/eventhub_endpoint1
//
// ```
type EndpointEventhub struct {
	pulumi.CustomResourceState

	// Type used to authenticate against the Event Hub endpoint. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
	AuthenticationType pulumi.StringPtrOutput `pulumi:"authenticationType"`
	// The connection string for the endpoint. This attribute can only be specified and is mandatory when `authenticationType` is `keyBased`.
	ConnectionString pulumi.StringPtrOutput `pulumi:"connectionString"`
	// URI of the Event Hubs Namespace endpoint. This attribute can only be specified and is mandatory when `authenticationType` is `identityBased`.
	EndpointUri pulumi.StringPtrOutput `pulumi:"endpointUri"`
	// Name of the Event Hub. This attribute can only be specified and is mandatory when `authenticationType` is `identityBased`.
	EntityPath pulumi.StringPtrOutput `pulumi:"entityPath"`
	// ID of the User Managed Identity used to authenticate against the Event Hub endpoint.
	//
	// > **NOTE:** `identityId` can only be specified when `authenticationType` is `identityBased`. It must be one of the `identityIds` of the Iot Hub. If not specified when `authenticationType` is `identityBased`, System Assigned Managed Identity of the Iot Hub will be used.
	IdentityId pulumi.StringPtrOutput `pulumi:"identityId"`
	// The IoTHub ID for the endpoint. Changing this forces a new resource to be created.
	IothubId pulumi.StringOutput `pulumi:"iothubId"`
	// The name of the endpoint. The name must be unique across endpoint types. The following names are reserved: `events`, `operationsMonitoringEvents`, `fileNotifications` and `$default`. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the resource group under which the Event Hub has been created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
}

// NewEndpointEventhub registers a new resource with the given unique name, arguments, and options.
func NewEndpointEventhub(ctx *pulumi.Context,
	name string, args *EndpointEventhubArgs, opts ...pulumi.ResourceOption) (*EndpointEventhub, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IothubId == nil {
		return nil, errors.New("invalid value for required argument 'IothubId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ConnectionString != nil {
		args.ConnectionString = pulumi.ToSecret(args.ConnectionString).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"connectionString",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EndpointEventhub
	err := ctx.RegisterResource("azure:iot/endpointEventhub:EndpointEventhub", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEndpointEventhub gets an existing EndpointEventhub resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEndpointEventhub(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EndpointEventhubState, opts ...pulumi.ResourceOption) (*EndpointEventhub, error) {
	var resource EndpointEventhub
	err := ctx.ReadResource("azure:iot/endpointEventhub:EndpointEventhub", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EndpointEventhub resources.
type endpointEventhubState struct {
	// Type used to authenticate against the Event Hub endpoint. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The connection string for the endpoint. This attribute can only be specified and is mandatory when `authenticationType` is `keyBased`.
	ConnectionString *string `pulumi:"connectionString"`
	// URI of the Event Hubs Namespace endpoint. This attribute can only be specified and is mandatory when `authenticationType` is `identityBased`.
	EndpointUri *string `pulumi:"endpointUri"`
	// Name of the Event Hub. This attribute can only be specified and is mandatory when `authenticationType` is `identityBased`.
	EntityPath *string `pulumi:"entityPath"`
	// ID of the User Managed Identity used to authenticate against the Event Hub endpoint.
	//
	// > **NOTE:** `identityId` can only be specified when `authenticationType` is `identityBased`. It must be one of the `identityIds` of the Iot Hub. If not specified when `authenticationType` is `identityBased`, System Assigned Managed Identity of the Iot Hub will be used.
	IdentityId *string `pulumi:"identityId"`
	// The IoTHub ID for the endpoint. Changing this forces a new resource to be created.
	IothubId *string `pulumi:"iothubId"`
	// The name of the endpoint. The name must be unique across endpoint types. The following names are reserved: `events`, `operationsMonitoringEvents`, `fileNotifications` and `$default`. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group under which the Event Hub has been created. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
}

type EndpointEventhubState struct {
	// Type used to authenticate against the Event Hub endpoint. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
	AuthenticationType pulumi.StringPtrInput
	// The connection string for the endpoint. This attribute can only be specified and is mandatory when `authenticationType` is `keyBased`.
	ConnectionString pulumi.StringPtrInput
	// URI of the Event Hubs Namespace endpoint. This attribute can only be specified and is mandatory when `authenticationType` is `identityBased`.
	EndpointUri pulumi.StringPtrInput
	// Name of the Event Hub. This attribute can only be specified and is mandatory when `authenticationType` is `identityBased`.
	EntityPath pulumi.StringPtrInput
	// ID of the User Managed Identity used to authenticate against the Event Hub endpoint.
	//
	// > **NOTE:** `identityId` can only be specified when `authenticationType` is `identityBased`. It must be one of the `identityIds` of the Iot Hub. If not specified when `authenticationType` is `identityBased`, System Assigned Managed Identity of the Iot Hub will be used.
	IdentityId pulumi.StringPtrInput
	// The IoTHub ID for the endpoint. Changing this forces a new resource to be created.
	IothubId pulumi.StringPtrInput
	// The name of the endpoint. The name must be unique across endpoint types. The following names are reserved: `events`, `operationsMonitoringEvents`, `fileNotifications` and `$default`. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group under which the Event Hub has been created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
}

func (EndpointEventhubState) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointEventhubState)(nil)).Elem()
}

type endpointEventhubArgs struct {
	// Type used to authenticate against the Event Hub endpoint. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The connection string for the endpoint. This attribute can only be specified and is mandatory when `authenticationType` is `keyBased`.
	ConnectionString *string `pulumi:"connectionString"`
	// URI of the Event Hubs Namespace endpoint. This attribute can only be specified and is mandatory when `authenticationType` is `identityBased`.
	EndpointUri *string `pulumi:"endpointUri"`
	// Name of the Event Hub. This attribute can only be specified and is mandatory when `authenticationType` is `identityBased`.
	EntityPath *string `pulumi:"entityPath"`
	// ID of the User Managed Identity used to authenticate against the Event Hub endpoint.
	//
	// > **NOTE:** `identityId` can only be specified when `authenticationType` is `identityBased`. It must be one of the `identityIds` of the Iot Hub. If not specified when `authenticationType` is `identityBased`, System Assigned Managed Identity of the Iot Hub will be used.
	IdentityId *string `pulumi:"identityId"`
	// The IoTHub ID for the endpoint. Changing this forces a new resource to be created.
	IothubId string `pulumi:"iothubId"`
	// The name of the endpoint. The name must be unique across endpoint types. The following names are reserved: `events`, `operationsMonitoringEvents`, `fileNotifications` and `$default`. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group under which the Event Hub has been created. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a EndpointEventhub resource.
type EndpointEventhubArgs struct {
	// Type used to authenticate against the Event Hub endpoint. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
	AuthenticationType pulumi.StringPtrInput
	// The connection string for the endpoint. This attribute can only be specified and is mandatory when `authenticationType` is `keyBased`.
	ConnectionString pulumi.StringPtrInput
	// URI of the Event Hubs Namespace endpoint. This attribute can only be specified and is mandatory when `authenticationType` is `identityBased`.
	EndpointUri pulumi.StringPtrInput
	// Name of the Event Hub. This attribute can only be specified and is mandatory when `authenticationType` is `identityBased`.
	EntityPath pulumi.StringPtrInput
	// ID of the User Managed Identity used to authenticate against the Event Hub endpoint.
	//
	// > **NOTE:** `identityId` can only be specified when `authenticationType` is `identityBased`. It must be one of the `identityIds` of the Iot Hub. If not specified when `authenticationType` is `identityBased`, System Assigned Managed Identity of the Iot Hub will be used.
	IdentityId pulumi.StringPtrInput
	// The IoTHub ID for the endpoint. Changing this forces a new resource to be created.
	IothubId pulumi.StringInput
	// The name of the endpoint. The name must be unique across endpoint types. The following names are reserved: `events`, `operationsMonitoringEvents`, `fileNotifications` and `$default`. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group under which the Event Hub has been created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
}

func (EndpointEventhubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointEventhubArgs)(nil)).Elem()
}

type EndpointEventhubInput interface {
	pulumi.Input

	ToEndpointEventhubOutput() EndpointEventhubOutput
	ToEndpointEventhubOutputWithContext(ctx context.Context) EndpointEventhubOutput
}

func (*EndpointEventhub) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointEventhub)(nil)).Elem()
}

func (i *EndpointEventhub) ToEndpointEventhubOutput() EndpointEventhubOutput {
	return i.ToEndpointEventhubOutputWithContext(context.Background())
}

func (i *EndpointEventhub) ToEndpointEventhubOutputWithContext(ctx context.Context) EndpointEventhubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointEventhubOutput)
}

// EndpointEventhubArrayInput is an input type that accepts EndpointEventhubArray and EndpointEventhubArrayOutput values.
// You can construct a concrete instance of `EndpointEventhubArrayInput` via:
//
//	EndpointEventhubArray{ EndpointEventhubArgs{...} }
type EndpointEventhubArrayInput interface {
	pulumi.Input

	ToEndpointEventhubArrayOutput() EndpointEventhubArrayOutput
	ToEndpointEventhubArrayOutputWithContext(context.Context) EndpointEventhubArrayOutput
}

type EndpointEventhubArray []EndpointEventhubInput

func (EndpointEventhubArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EndpointEventhub)(nil)).Elem()
}

func (i EndpointEventhubArray) ToEndpointEventhubArrayOutput() EndpointEventhubArrayOutput {
	return i.ToEndpointEventhubArrayOutputWithContext(context.Background())
}

func (i EndpointEventhubArray) ToEndpointEventhubArrayOutputWithContext(ctx context.Context) EndpointEventhubArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointEventhubArrayOutput)
}

// EndpointEventhubMapInput is an input type that accepts EndpointEventhubMap and EndpointEventhubMapOutput values.
// You can construct a concrete instance of `EndpointEventhubMapInput` via:
//
//	EndpointEventhubMap{ "key": EndpointEventhubArgs{...} }
type EndpointEventhubMapInput interface {
	pulumi.Input

	ToEndpointEventhubMapOutput() EndpointEventhubMapOutput
	ToEndpointEventhubMapOutputWithContext(context.Context) EndpointEventhubMapOutput
}

type EndpointEventhubMap map[string]EndpointEventhubInput

func (EndpointEventhubMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EndpointEventhub)(nil)).Elem()
}

func (i EndpointEventhubMap) ToEndpointEventhubMapOutput() EndpointEventhubMapOutput {
	return i.ToEndpointEventhubMapOutputWithContext(context.Background())
}

func (i EndpointEventhubMap) ToEndpointEventhubMapOutputWithContext(ctx context.Context) EndpointEventhubMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointEventhubMapOutput)
}

type EndpointEventhubOutput struct{ *pulumi.OutputState }

func (EndpointEventhubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointEventhub)(nil)).Elem()
}

func (o EndpointEventhubOutput) ToEndpointEventhubOutput() EndpointEventhubOutput {
	return o
}

func (o EndpointEventhubOutput) ToEndpointEventhubOutputWithContext(ctx context.Context) EndpointEventhubOutput {
	return o
}

// Type used to authenticate against the Event Hub endpoint. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
func (o EndpointEventhubOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointEventhub) pulumi.StringPtrOutput { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The connection string for the endpoint. This attribute can only be specified and is mandatory when `authenticationType` is `keyBased`.
func (o EndpointEventhubOutput) ConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointEventhub) pulumi.StringPtrOutput { return v.ConnectionString }).(pulumi.StringPtrOutput)
}

// URI of the Event Hubs Namespace endpoint. This attribute can only be specified and is mandatory when `authenticationType` is `identityBased`.
func (o EndpointEventhubOutput) EndpointUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointEventhub) pulumi.StringPtrOutput { return v.EndpointUri }).(pulumi.StringPtrOutput)
}

// Name of the Event Hub. This attribute can only be specified and is mandatory when `authenticationType` is `identityBased`.
func (o EndpointEventhubOutput) EntityPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointEventhub) pulumi.StringPtrOutput { return v.EntityPath }).(pulumi.StringPtrOutput)
}

// ID of the User Managed Identity used to authenticate against the Event Hub endpoint.
//
// > **NOTE:** `identityId` can only be specified when `authenticationType` is `identityBased`. It must be one of the `identityIds` of the Iot Hub. If not specified when `authenticationType` is `identityBased`, System Assigned Managed Identity of the Iot Hub will be used.
func (o EndpointEventhubOutput) IdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointEventhub) pulumi.StringPtrOutput { return v.IdentityId }).(pulumi.StringPtrOutput)
}

// The IoTHub ID for the endpoint. Changing this forces a new resource to be created.
func (o EndpointEventhubOutput) IothubId() pulumi.StringOutput {
	return o.ApplyT(func(v *EndpointEventhub) pulumi.StringOutput { return v.IothubId }).(pulumi.StringOutput)
}

// The name of the endpoint. The name must be unique across endpoint types. The following names are reserved: `events`, `operationsMonitoringEvents`, `fileNotifications` and `$default`. Changing this forces a new resource to be created.
func (o EndpointEventhubOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EndpointEventhub) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the resource group under which the Event Hub has been created. Changing this forces a new resource to be created.
func (o EndpointEventhubOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *EndpointEventhub) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

type EndpointEventhubArrayOutput struct{ *pulumi.OutputState }

func (EndpointEventhubArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EndpointEventhub)(nil)).Elem()
}

func (o EndpointEventhubArrayOutput) ToEndpointEventhubArrayOutput() EndpointEventhubArrayOutput {
	return o
}

func (o EndpointEventhubArrayOutput) ToEndpointEventhubArrayOutputWithContext(ctx context.Context) EndpointEventhubArrayOutput {
	return o
}

func (o EndpointEventhubArrayOutput) Index(i pulumi.IntInput) EndpointEventhubOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EndpointEventhub {
		return vs[0].([]*EndpointEventhub)[vs[1].(int)]
	}).(EndpointEventhubOutput)
}

type EndpointEventhubMapOutput struct{ *pulumi.OutputState }

func (EndpointEventhubMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EndpointEventhub)(nil)).Elem()
}

func (o EndpointEventhubMapOutput) ToEndpointEventhubMapOutput() EndpointEventhubMapOutput {
	return o
}

func (o EndpointEventhubMapOutput) ToEndpointEventhubMapOutputWithContext(ctx context.Context) EndpointEventhubMapOutput {
	return o
}

func (o EndpointEventhubMapOutput) MapIndex(k pulumi.StringInput) EndpointEventhubOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EndpointEventhub {
		return vs[0].(map[string]*EndpointEventhub)[vs[1].(string)]
	}).(EndpointEventhubOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointEventhubInput)(nil)).Elem(), &EndpointEventhub{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointEventhubArrayInput)(nil)).Elem(), EndpointEventhubArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointEventhubMapInput)(nil)).Elem(), EndpointEventhubMap{})
	pulumi.RegisterOutputType(EndpointEventhubOutput{})
	pulumi.RegisterOutputType(EndpointEventhubArrayOutput{})
	pulumi.RegisterOutputType(EndpointEventhubMapOutput{})
}
