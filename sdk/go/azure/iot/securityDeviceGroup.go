// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Iot Security Device Group.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/iot"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West Europe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleIoTHub, err := iot.NewIoTHub(ctx, "exampleIoTHub", &iot.IoTHubArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			Location:          exampleResourceGroup.Location,
// 			Sku: &iot.IoTHubSkuArgs{
// 				Name:     pulumi.String("S1"),
// 				Capacity: pulumi.Int(1),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleSecuritySolution, err := iot.NewSecuritySolution(ctx, "exampleSecuritySolution", &iot.SecuritySolutionArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			Location:          exampleResourceGroup.Location,
// 			DisplayName:       pulumi.String("Iot Security Solution"),
// 			IothubIds: pulumi.StringArray{
// 				exampleIoTHub.ID(),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = iot.NewSecurityDeviceGroup(ctx, "exampleSecurityDeviceGroup", &iot.SecurityDeviceGroupArgs{
// 			IothubId: exampleIoTHub.ID(),
// 			AllowRule: &iot.SecurityDeviceGroupAllowRuleArgs{
// 				ConnectionToIpNotAlloweds: pulumi.StringArray{
// 					pulumi.String("10.0.0.0/24"),
// 				},
// 			},
// 			RangeRules: iot.SecurityDeviceGroupRangeRuleArray{
// 				&iot.SecurityDeviceGroupRangeRuleArgs{
// 					Type:     pulumi.String("ActiveConnectionsNotInAllowedRange"),
// 					Min:      pulumi.Int(0),
// 					Max:      pulumi.Int(30),
// 					Duration: pulumi.String("PT5M"),
// 				},
// 			},
// 		}, pulumi.DependsOn([]pulumi.Resource{
// 			exampleSecuritySolution,
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Iot Security Device Group can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:iot/securityDeviceGroup:SecurityDeviceGroup example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.Devices/iotHubs/hub1/providers/Microsoft.Security/deviceSecurityGroups/group1
// ```
type SecurityDeviceGroup struct {
	pulumi.CustomResourceState

	// an `allowRule` blocks as defined below.
	AllowRule SecurityDeviceGroupAllowRulePtrOutput `pulumi:"allowRule"`
	// The ID of the IoT Hub which to link the Security Device Group to. Changing this forces a new resource to be created.
	IothubId pulumi.StringOutput `pulumi:"iothubId"`
	// Specifies the name of the Device Security Group. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// One or more `rangeRule` blocks as defined below.
	RangeRules SecurityDeviceGroupRangeRuleArrayOutput `pulumi:"rangeRules"`
}

// NewSecurityDeviceGroup registers a new resource with the given unique name, arguments, and options.
func NewSecurityDeviceGroup(ctx *pulumi.Context,
	name string, args *SecurityDeviceGroupArgs, opts ...pulumi.ResourceOption) (*SecurityDeviceGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IothubId == nil {
		return nil, errors.New("invalid value for required argument 'IothubId'")
	}
	var resource SecurityDeviceGroup
	err := ctx.RegisterResource("azure:iot/securityDeviceGroup:SecurityDeviceGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityDeviceGroup gets an existing SecurityDeviceGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityDeviceGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityDeviceGroupState, opts ...pulumi.ResourceOption) (*SecurityDeviceGroup, error) {
	var resource SecurityDeviceGroup
	err := ctx.ReadResource("azure:iot/securityDeviceGroup:SecurityDeviceGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityDeviceGroup resources.
type securityDeviceGroupState struct {
	// an `allowRule` blocks as defined below.
	AllowRule *SecurityDeviceGroupAllowRule `pulumi:"allowRule"`
	// The ID of the IoT Hub which to link the Security Device Group to. Changing this forces a new resource to be created.
	IothubId *string `pulumi:"iothubId"`
	// Specifies the name of the Device Security Group. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// One or more `rangeRule` blocks as defined below.
	RangeRules []SecurityDeviceGroupRangeRule `pulumi:"rangeRules"`
}

type SecurityDeviceGroupState struct {
	// an `allowRule` blocks as defined below.
	AllowRule SecurityDeviceGroupAllowRulePtrInput
	// The ID of the IoT Hub which to link the Security Device Group to. Changing this forces a new resource to be created.
	IothubId pulumi.StringPtrInput
	// Specifies the name of the Device Security Group. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// One or more `rangeRule` blocks as defined below.
	RangeRules SecurityDeviceGroupRangeRuleArrayInput
}

func (SecurityDeviceGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityDeviceGroupState)(nil)).Elem()
}

type securityDeviceGroupArgs struct {
	// an `allowRule` blocks as defined below.
	AllowRule *SecurityDeviceGroupAllowRule `pulumi:"allowRule"`
	// The ID of the IoT Hub which to link the Security Device Group to. Changing this forces a new resource to be created.
	IothubId string `pulumi:"iothubId"`
	// Specifies the name of the Device Security Group. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// One or more `rangeRule` blocks as defined below.
	RangeRules []SecurityDeviceGroupRangeRule `pulumi:"rangeRules"`
}

// The set of arguments for constructing a SecurityDeviceGroup resource.
type SecurityDeviceGroupArgs struct {
	// an `allowRule` blocks as defined below.
	AllowRule SecurityDeviceGroupAllowRulePtrInput
	// The ID of the IoT Hub which to link the Security Device Group to. Changing this forces a new resource to be created.
	IothubId pulumi.StringInput
	// Specifies the name of the Device Security Group. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// One or more `rangeRule` blocks as defined below.
	RangeRules SecurityDeviceGroupRangeRuleArrayInput
}

func (SecurityDeviceGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityDeviceGroupArgs)(nil)).Elem()
}

type SecurityDeviceGroupInput interface {
	pulumi.Input

	ToSecurityDeviceGroupOutput() SecurityDeviceGroupOutput
	ToSecurityDeviceGroupOutputWithContext(ctx context.Context) SecurityDeviceGroupOutput
}

func (*SecurityDeviceGroup) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityDeviceGroup)(nil))
}

func (i *SecurityDeviceGroup) ToSecurityDeviceGroupOutput() SecurityDeviceGroupOutput {
	return i.ToSecurityDeviceGroupOutputWithContext(context.Background())
}

func (i *SecurityDeviceGroup) ToSecurityDeviceGroupOutputWithContext(ctx context.Context) SecurityDeviceGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityDeviceGroupOutput)
}

func (i *SecurityDeviceGroup) ToSecurityDeviceGroupPtrOutput() SecurityDeviceGroupPtrOutput {
	return i.ToSecurityDeviceGroupPtrOutputWithContext(context.Background())
}

func (i *SecurityDeviceGroup) ToSecurityDeviceGroupPtrOutputWithContext(ctx context.Context) SecurityDeviceGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityDeviceGroupPtrOutput)
}

type SecurityDeviceGroupPtrInput interface {
	pulumi.Input

	ToSecurityDeviceGroupPtrOutput() SecurityDeviceGroupPtrOutput
	ToSecurityDeviceGroupPtrOutputWithContext(ctx context.Context) SecurityDeviceGroupPtrOutput
}

type securityDeviceGroupPtrType SecurityDeviceGroupArgs

func (*securityDeviceGroupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityDeviceGroup)(nil))
}

func (i *securityDeviceGroupPtrType) ToSecurityDeviceGroupPtrOutput() SecurityDeviceGroupPtrOutput {
	return i.ToSecurityDeviceGroupPtrOutputWithContext(context.Background())
}

func (i *securityDeviceGroupPtrType) ToSecurityDeviceGroupPtrOutputWithContext(ctx context.Context) SecurityDeviceGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityDeviceGroupPtrOutput)
}

// SecurityDeviceGroupArrayInput is an input type that accepts SecurityDeviceGroupArray and SecurityDeviceGroupArrayOutput values.
// You can construct a concrete instance of `SecurityDeviceGroupArrayInput` via:
//
//          SecurityDeviceGroupArray{ SecurityDeviceGroupArgs{...} }
type SecurityDeviceGroupArrayInput interface {
	pulumi.Input

	ToSecurityDeviceGroupArrayOutput() SecurityDeviceGroupArrayOutput
	ToSecurityDeviceGroupArrayOutputWithContext(context.Context) SecurityDeviceGroupArrayOutput
}

type SecurityDeviceGroupArray []SecurityDeviceGroupInput

func (SecurityDeviceGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*SecurityDeviceGroup)(nil))
}

func (i SecurityDeviceGroupArray) ToSecurityDeviceGroupArrayOutput() SecurityDeviceGroupArrayOutput {
	return i.ToSecurityDeviceGroupArrayOutputWithContext(context.Background())
}

func (i SecurityDeviceGroupArray) ToSecurityDeviceGroupArrayOutputWithContext(ctx context.Context) SecurityDeviceGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityDeviceGroupArrayOutput)
}

// SecurityDeviceGroupMapInput is an input type that accepts SecurityDeviceGroupMap and SecurityDeviceGroupMapOutput values.
// You can construct a concrete instance of `SecurityDeviceGroupMapInput` via:
//
//          SecurityDeviceGroupMap{ "key": SecurityDeviceGroupArgs{...} }
type SecurityDeviceGroupMapInput interface {
	pulumi.Input

	ToSecurityDeviceGroupMapOutput() SecurityDeviceGroupMapOutput
	ToSecurityDeviceGroupMapOutputWithContext(context.Context) SecurityDeviceGroupMapOutput
}

type SecurityDeviceGroupMap map[string]SecurityDeviceGroupInput

func (SecurityDeviceGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*SecurityDeviceGroup)(nil))
}

func (i SecurityDeviceGroupMap) ToSecurityDeviceGroupMapOutput() SecurityDeviceGroupMapOutput {
	return i.ToSecurityDeviceGroupMapOutputWithContext(context.Background())
}

func (i SecurityDeviceGroupMap) ToSecurityDeviceGroupMapOutputWithContext(ctx context.Context) SecurityDeviceGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityDeviceGroupMapOutput)
}

type SecurityDeviceGroupOutput struct {
	*pulumi.OutputState
}

func (SecurityDeviceGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityDeviceGroup)(nil))
}

func (o SecurityDeviceGroupOutput) ToSecurityDeviceGroupOutput() SecurityDeviceGroupOutput {
	return o
}

func (o SecurityDeviceGroupOutput) ToSecurityDeviceGroupOutputWithContext(ctx context.Context) SecurityDeviceGroupOutput {
	return o
}

func (o SecurityDeviceGroupOutput) ToSecurityDeviceGroupPtrOutput() SecurityDeviceGroupPtrOutput {
	return o.ToSecurityDeviceGroupPtrOutputWithContext(context.Background())
}

func (o SecurityDeviceGroupOutput) ToSecurityDeviceGroupPtrOutputWithContext(ctx context.Context) SecurityDeviceGroupPtrOutput {
	return o.ApplyT(func(v SecurityDeviceGroup) *SecurityDeviceGroup {
		return &v
	}).(SecurityDeviceGroupPtrOutput)
}

type SecurityDeviceGroupPtrOutput struct {
	*pulumi.OutputState
}

func (SecurityDeviceGroupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityDeviceGroup)(nil))
}

func (o SecurityDeviceGroupPtrOutput) ToSecurityDeviceGroupPtrOutput() SecurityDeviceGroupPtrOutput {
	return o
}

func (o SecurityDeviceGroupPtrOutput) ToSecurityDeviceGroupPtrOutputWithContext(ctx context.Context) SecurityDeviceGroupPtrOutput {
	return o
}

type SecurityDeviceGroupArrayOutput struct{ *pulumi.OutputState }

func (SecurityDeviceGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityDeviceGroup)(nil))
}

func (o SecurityDeviceGroupArrayOutput) ToSecurityDeviceGroupArrayOutput() SecurityDeviceGroupArrayOutput {
	return o
}

func (o SecurityDeviceGroupArrayOutput) ToSecurityDeviceGroupArrayOutputWithContext(ctx context.Context) SecurityDeviceGroupArrayOutput {
	return o
}

func (o SecurityDeviceGroupArrayOutput) Index(i pulumi.IntInput) SecurityDeviceGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecurityDeviceGroup {
		return vs[0].([]SecurityDeviceGroup)[vs[1].(int)]
	}).(SecurityDeviceGroupOutput)
}

type SecurityDeviceGroupMapOutput struct{ *pulumi.OutputState }

func (SecurityDeviceGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SecurityDeviceGroup)(nil))
}

func (o SecurityDeviceGroupMapOutput) ToSecurityDeviceGroupMapOutput() SecurityDeviceGroupMapOutput {
	return o
}

func (o SecurityDeviceGroupMapOutput) ToSecurityDeviceGroupMapOutputWithContext(ctx context.Context) SecurityDeviceGroupMapOutput {
	return o
}

func (o SecurityDeviceGroupMapOutput) MapIndex(k pulumi.StringInput) SecurityDeviceGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SecurityDeviceGroup {
		return vs[0].(map[string]SecurityDeviceGroup)[vs[1].(string)]
	}).(SecurityDeviceGroupOutput)
}

func init() {
	pulumi.RegisterOutputType(SecurityDeviceGroupOutput{})
	pulumi.RegisterOutputType(SecurityDeviceGroupPtrOutput{})
	pulumi.RegisterOutputType(SecurityDeviceGroupArrayOutput{})
	pulumi.RegisterOutputType(SecurityDeviceGroupMapOutput{})
}
