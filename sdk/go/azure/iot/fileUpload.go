// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages the File Upload of an IoT Hub.
//
// > **NOTE:** File upload can be defined either directly on the `iot.IoTHub` resource, or using the `iot.FileUpload` resource - but the two cannot be used together. If both are used against the same IoTHub, spurious changes will occur.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/iot"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Location:               exampleResourceGroup.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("LRS"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleContainer, err := storage.NewContainer(ctx, "exampleContainer", &storage.ContainerArgs{
//				StorageAccountName:  exampleAccount.Name,
//				ContainerAccessType: pulumi.String("private"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleIoTHub, err := iot.NewIoTHub(ctx, "exampleIoTHub", &iot.IoTHubArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				Sku: &iot.IoTHubSkuArgs{
//					Name:     pulumi.String("S1"),
//					Capacity: pulumi.Int(1),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = iot.NewFileUpload(ctx, "exampleFileUpload", &iot.FileUploadArgs{
//				IothubId:         exampleIoTHub.ID(),
//				ConnectionString: exampleAccount.PrimaryBlobConnectionString,
//				ContainerName:    exampleContainer.Name,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// IoT Hub File Uploads can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:iot/fileUpload:FileUpload example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Devices/iotHubs/hub1
//
// ```
type FileUpload struct {
	pulumi.CustomResourceState

	// The type used to authenticate against the storage account. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
	AuthenticationType pulumi.StringPtrOutput `pulumi:"authenticationType"`
	// The connection string for the Azure Storage account to which files are uploaded.
	ConnectionString pulumi.StringOutput `pulumi:"connectionString"`
	// The name of the root container where the files should be uploaded to. The container need not exist but should be creatable using the `connectionString` specified.
	ContainerName pulumi.StringOutput `pulumi:"containerName"`
	// The period of time for which a file upload notification message is available to consume before it expires, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 1 minute and 48 hours. Defaults to `PT1H`.
	DefaultTtl pulumi.StringPtrOutput `pulumi:"defaultTtl"`
	// The ID of the User Managed Identity used to authenticate against the storage account.
	//
	// > **NOTE:** `identityId` can only be specified when `authenticationType` is `identityBased`. It must be one of the `identityIds` of the IoT Hub. If `identityId` is omitted when `authenticationType` is `identityBased`, then the System-Assigned Managed Identity of the IoT Hub will be used.
	IdentityId pulumi.StringPtrOutput `pulumi:"identityId"`
	// The ID of the IoT Hub. Changing this forces a new IoT Hub to be created.
	IothubId pulumi.StringOutput `pulumi:"iothubId"`
	// The lock duration for the file upload notifications queue, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 5 and 300 seconds. Defaults to `PT1M`.
	LockDuration pulumi.StringPtrOutput `pulumi:"lockDuration"`
	// The number of times the IoT Hub attempts to deliver a file upload notification message. Defaults to `10`.
	MaxDeliveryCount pulumi.IntPtrOutput `pulumi:"maxDeliveryCount"`
	// Used to specify whether file notifications are sent to IoT Hub on upload. Defaults to `false`.
	NotificationsEnabled pulumi.BoolPtrOutput `pulumi:"notificationsEnabled"`
	// The period of time for which the SAS URI generated by IoT Hub for file upload is valid, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 1 minute and 24 hours. Defaults to `PT1H`.
	SasTtl pulumi.StringPtrOutput `pulumi:"sasTtl"`
}

// NewFileUpload registers a new resource with the given unique name, arguments, and options.
func NewFileUpload(ctx *pulumi.Context,
	name string, args *FileUploadArgs, opts ...pulumi.ResourceOption) (*FileUpload, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionString == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionString'")
	}
	if args.ContainerName == nil {
		return nil, errors.New("invalid value for required argument 'ContainerName'")
	}
	if args.IothubId == nil {
		return nil, errors.New("invalid value for required argument 'IothubId'")
	}
	if args.ConnectionString != nil {
		args.ConnectionString = pulumi.ToSecret(args.ConnectionString).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"connectionString",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FileUpload
	err := ctx.RegisterResource("azure:iot/fileUpload:FileUpload", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFileUpload gets an existing FileUpload resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFileUpload(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FileUploadState, opts ...pulumi.ResourceOption) (*FileUpload, error) {
	var resource FileUpload
	err := ctx.ReadResource("azure:iot/fileUpload:FileUpload", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FileUpload resources.
type fileUploadState struct {
	// The type used to authenticate against the storage account. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The connection string for the Azure Storage account to which files are uploaded.
	ConnectionString *string `pulumi:"connectionString"`
	// The name of the root container where the files should be uploaded to. The container need not exist but should be creatable using the `connectionString` specified.
	ContainerName *string `pulumi:"containerName"`
	// The period of time for which a file upload notification message is available to consume before it expires, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 1 minute and 48 hours. Defaults to `PT1H`.
	DefaultTtl *string `pulumi:"defaultTtl"`
	// The ID of the User Managed Identity used to authenticate against the storage account.
	//
	// > **NOTE:** `identityId` can only be specified when `authenticationType` is `identityBased`. It must be one of the `identityIds` of the IoT Hub. If `identityId` is omitted when `authenticationType` is `identityBased`, then the System-Assigned Managed Identity of the IoT Hub will be used.
	IdentityId *string `pulumi:"identityId"`
	// The ID of the IoT Hub. Changing this forces a new IoT Hub to be created.
	IothubId *string `pulumi:"iothubId"`
	// The lock duration for the file upload notifications queue, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 5 and 300 seconds. Defaults to `PT1M`.
	LockDuration *string `pulumi:"lockDuration"`
	// The number of times the IoT Hub attempts to deliver a file upload notification message. Defaults to `10`.
	MaxDeliveryCount *int `pulumi:"maxDeliveryCount"`
	// Used to specify whether file notifications are sent to IoT Hub on upload. Defaults to `false`.
	NotificationsEnabled *bool `pulumi:"notificationsEnabled"`
	// The period of time for which the SAS URI generated by IoT Hub for file upload is valid, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 1 minute and 24 hours. Defaults to `PT1H`.
	SasTtl *string `pulumi:"sasTtl"`
}

type FileUploadState struct {
	// The type used to authenticate against the storage account. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
	AuthenticationType pulumi.StringPtrInput
	// The connection string for the Azure Storage account to which files are uploaded.
	ConnectionString pulumi.StringPtrInput
	// The name of the root container where the files should be uploaded to. The container need not exist but should be creatable using the `connectionString` specified.
	ContainerName pulumi.StringPtrInput
	// The period of time for which a file upload notification message is available to consume before it expires, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 1 minute and 48 hours. Defaults to `PT1H`.
	DefaultTtl pulumi.StringPtrInput
	// The ID of the User Managed Identity used to authenticate against the storage account.
	//
	// > **NOTE:** `identityId` can only be specified when `authenticationType` is `identityBased`. It must be one of the `identityIds` of the IoT Hub. If `identityId` is omitted when `authenticationType` is `identityBased`, then the System-Assigned Managed Identity of the IoT Hub will be used.
	IdentityId pulumi.StringPtrInput
	// The ID of the IoT Hub. Changing this forces a new IoT Hub to be created.
	IothubId pulumi.StringPtrInput
	// The lock duration for the file upload notifications queue, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 5 and 300 seconds. Defaults to `PT1M`.
	LockDuration pulumi.StringPtrInput
	// The number of times the IoT Hub attempts to deliver a file upload notification message. Defaults to `10`.
	MaxDeliveryCount pulumi.IntPtrInput
	// Used to specify whether file notifications are sent to IoT Hub on upload. Defaults to `false`.
	NotificationsEnabled pulumi.BoolPtrInput
	// The period of time for which the SAS URI generated by IoT Hub for file upload is valid, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 1 minute and 24 hours. Defaults to `PT1H`.
	SasTtl pulumi.StringPtrInput
}

func (FileUploadState) ElementType() reflect.Type {
	return reflect.TypeOf((*fileUploadState)(nil)).Elem()
}

type fileUploadArgs struct {
	// The type used to authenticate against the storage account. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The connection string for the Azure Storage account to which files are uploaded.
	ConnectionString string `pulumi:"connectionString"`
	// The name of the root container where the files should be uploaded to. The container need not exist but should be creatable using the `connectionString` specified.
	ContainerName string `pulumi:"containerName"`
	// The period of time for which a file upload notification message is available to consume before it expires, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 1 minute and 48 hours. Defaults to `PT1H`.
	DefaultTtl *string `pulumi:"defaultTtl"`
	// The ID of the User Managed Identity used to authenticate against the storage account.
	//
	// > **NOTE:** `identityId` can only be specified when `authenticationType` is `identityBased`. It must be one of the `identityIds` of the IoT Hub. If `identityId` is omitted when `authenticationType` is `identityBased`, then the System-Assigned Managed Identity of the IoT Hub will be used.
	IdentityId *string `pulumi:"identityId"`
	// The ID of the IoT Hub. Changing this forces a new IoT Hub to be created.
	IothubId string `pulumi:"iothubId"`
	// The lock duration for the file upload notifications queue, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 5 and 300 seconds. Defaults to `PT1M`.
	LockDuration *string `pulumi:"lockDuration"`
	// The number of times the IoT Hub attempts to deliver a file upload notification message. Defaults to `10`.
	MaxDeliveryCount *int `pulumi:"maxDeliveryCount"`
	// Used to specify whether file notifications are sent to IoT Hub on upload. Defaults to `false`.
	NotificationsEnabled *bool `pulumi:"notificationsEnabled"`
	// The period of time for which the SAS URI generated by IoT Hub for file upload is valid, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 1 minute and 24 hours. Defaults to `PT1H`.
	SasTtl *string `pulumi:"sasTtl"`
}

// The set of arguments for constructing a FileUpload resource.
type FileUploadArgs struct {
	// The type used to authenticate against the storage account. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
	AuthenticationType pulumi.StringPtrInput
	// The connection string for the Azure Storage account to which files are uploaded.
	ConnectionString pulumi.StringInput
	// The name of the root container where the files should be uploaded to. The container need not exist but should be creatable using the `connectionString` specified.
	ContainerName pulumi.StringInput
	// The period of time for which a file upload notification message is available to consume before it expires, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 1 minute and 48 hours. Defaults to `PT1H`.
	DefaultTtl pulumi.StringPtrInput
	// The ID of the User Managed Identity used to authenticate against the storage account.
	//
	// > **NOTE:** `identityId` can only be specified when `authenticationType` is `identityBased`. It must be one of the `identityIds` of the IoT Hub. If `identityId` is omitted when `authenticationType` is `identityBased`, then the System-Assigned Managed Identity of the IoT Hub will be used.
	IdentityId pulumi.StringPtrInput
	// The ID of the IoT Hub. Changing this forces a new IoT Hub to be created.
	IothubId pulumi.StringInput
	// The lock duration for the file upload notifications queue, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 5 and 300 seconds. Defaults to `PT1M`.
	LockDuration pulumi.StringPtrInput
	// The number of times the IoT Hub attempts to deliver a file upload notification message. Defaults to `10`.
	MaxDeliveryCount pulumi.IntPtrInput
	// Used to specify whether file notifications are sent to IoT Hub on upload. Defaults to `false`.
	NotificationsEnabled pulumi.BoolPtrInput
	// The period of time for which the SAS URI generated by IoT Hub for file upload is valid, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 1 minute and 24 hours. Defaults to `PT1H`.
	SasTtl pulumi.StringPtrInput
}

func (FileUploadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fileUploadArgs)(nil)).Elem()
}

type FileUploadInput interface {
	pulumi.Input

	ToFileUploadOutput() FileUploadOutput
	ToFileUploadOutputWithContext(ctx context.Context) FileUploadOutput
}

func (*FileUpload) ElementType() reflect.Type {
	return reflect.TypeOf((**FileUpload)(nil)).Elem()
}

func (i *FileUpload) ToFileUploadOutput() FileUploadOutput {
	return i.ToFileUploadOutputWithContext(context.Background())
}

func (i *FileUpload) ToFileUploadOutputWithContext(ctx context.Context) FileUploadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileUploadOutput)
}

// FileUploadArrayInput is an input type that accepts FileUploadArray and FileUploadArrayOutput values.
// You can construct a concrete instance of `FileUploadArrayInput` via:
//
//	FileUploadArray{ FileUploadArgs{...} }
type FileUploadArrayInput interface {
	pulumi.Input

	ToFileUploadArrayOutput() FileUploadArrayOutput
	ToFileUploadArrayOutputWithContext(context.Context) FileUploadArrayOutput
}

type FileUploadArray []FileUploadInput

func (FileUploadArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FileUpload)(nil)).Elem()
}

func (i FileUploadArray) ToFileUploadArrayOutput() FileUploadArrayOutput {
	return i.ToFileUploadArrayOutputWithContext(context.Background())
}

func (i FileUploadArray) ToFileUploadArrayOutputWithContext(ctx context.Context) FileUploadArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileUploadArrayOutput)
}

// FileUploadMapInput is an input type that accepts FileUploadMap and FileUploadMapOutput values.
// You can construct a concrete instance of `FileUploadMapInput` via:
//
//	FileUploadMap{ "key": FileUploadArgs{...} }
type FileUploadMapInput interface {
	pulumi.Input

	ToFileUploadMapOutput() FileUploadMapOutput
	ToFileUploadMapOutputWithContext(context.Context) FileUploadMapOutput
}

type FileUploadMap map[string]FileUploadInput

func (FileUploadMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FileUpload)(nil)).Elem()
}

func (i FileUploadMap) ToFileUploadMapOutput() FileUploadMapOutput {
	return i.ToFileUploadMapOutputWithContext(context.Background())
}

func (i FileUploadMap) ToFileUploadMapOutputWithContext(ctx context.Context) FileUploadMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileUploadMapOutput)
}

type FileUploadOutput struct{ *pulumi.OutputState }

func (FileUploadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileUpload)(nil)).Elem()
}

func (o FileUploadOutput) ToFileUploadOutput() FileUploadOutput {
	return o
}

func (o FileUploadOutput) ToFileUploadOutputWithContext(ctx context.Context) FileUploadOutput {
	return o
}

// The type used to authenticate against the storage account. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
func (o FileUploadOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileUpload) pulumi.StringPtrOutput { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The connection string for the Azure Storage account to which files are uploaded.
func (o FileUploadOutput) ConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v *FileUpload) pulumi.StringOutput { return v.ConnectionString }).(pulumi.StringOutput)
}

// The name of the root container where the files should be uploaded to. The container need not exist but should be creatable using the `connectionString` specified.
func (o FileUploadOutput) ContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v *FileUpload) pulumi.StringOutput { return v.ContainerName }).(pulumi.StringOutput)
}

// The period of time for which a file upload notification message is available to consume before it expires, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 1 minute and 48 hours. Defaults to `PT1H`.
func (o FileUploadOutput) DefaultTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileUpload) pulumi.StringPtrOutput { return v.DefaultTtl }).(pulumi.StringPtrOutput)
}

// The ID of the User Managed Identity used to authenticate against the storage account.
//
// > **NOTE:** `identityId` can only be specified when `authenticationType` is `identityBased`. It must be one of the `identityIds` of the IoT Hub. If `identityId` is omitted when `authenticationType` is `identityBased`, then the System-Assigned Managed Identity of the IoT Hub will be used.
func (o FileUploadOutput) IdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileUpload) pulumi.StringPtrOutput { return v.IdentityId }).(pulumi.StringPtrOutput)
}

// The ID of the IoT Hub. Changing this forces a new IoT Hub to be created.
func (o FileUploadOutput) IothubId() pulumi.StringOutput {
	return o.ApplyT(func(v *FileUpload) pulumi.StringOutput { return v.IothubId }).(pulumi.StringOutput)
}

// The lock duration for the file upload notifications queue, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 5 and 300 seconds. Defaults to `PT1M`.
func (o FileUploadOutput) LockDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileUpload) pulumi.StringPtrOutput { return v.LockDuration }).(pulumi.StringPtrOutput)
}

// The number of times the IoT Hub attempts to deliver a file upload notification message. Defaults to `10`.
func (o FileUploadOutput) MaxDeliveryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FileUpload) pulumi.IntPtrOutput { return v.MaxDeliveryCount }).(pulumi.IntPtrOutput)
}

// Used to specify whether file notifications are sent to IoT Hub on upload. Defaults to `false`.
func (o FileUploadOutput) NotificationsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FileUpload) pulumi.BoolPtrOutput { return v.NotificationsEnabled }).(pulumi.BoolPtrOutput)
}

// The period of time for which the SAS URI generated by IoT Hub for file upload is valid, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 1 minute and 24 hours. Defaults to `PT1H`.
func (o FileUploadOutput) SasTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileUpload) pulumi.StringPtrOutput { return v.SasTtl }).(pulumi.StringPtrOutput)
}

type FileUploadArrayOutput struct{ *pulumi.OutputState }

func (FileUploadArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FileUpload)(nil)).Elem()
}

func (o FileUploadArrayOutput) ToFileUploadArrayOutput() FileUploadArrayOutput {
	return o
}

func (o FileUploadArrayOutput) ToFileUploadArrayOutputWithContext(ctx context.Context) FileUploadArrayOutput {
	return o
}

func (o FileUploadArrayOutput) Index(i pulumi.IntInput) FileUploadOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FileUpload {
		return vs[0].([]*FileUpload)[vs[1].(int)]
	}).(FileUploadOutput)
}

type FileUploadMapOutput struct{ *pulumi.OutputState }

func (FileUploadMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FileUpload)(nil)).Elem()
}

func (o FileUploadMapOutput) ToFileUploadMapOutput() FileUploadMapOutput {
	return o
}

func (o FileUploadMapOutput) ToFileUploadMapOutputWithContext(ctx context.Context) FileUploadMapOutput {
	return o
}

func (o FileUploadMapOutput) MapIndex(k pulumi.StringInput) FileUploadOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FileUpload {
		return vs[0].(map[string]*FileUpload)[vs[1].(string)]
	}).(FileUploadOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FileUploadInput)(nil)).Elem(), &FileUpload{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileUploadArrayInput)(nil)).Elem(), FileUploadArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileUploadMapInput)(nil)).Elem(), FileUploadMap{})
	pulumi.RegisterOutputType(FileUploadOutput{})
	pulumi.RegisterOutputType(FileUploadArrayOutput{})
	pulumi.RegisterOutputType(FileUploadMapOutput{})
}
