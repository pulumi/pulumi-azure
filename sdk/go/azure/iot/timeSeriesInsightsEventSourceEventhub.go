// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Azure IoT Time Series Insights EventHub Event Source.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/eventhub"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/iot"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleEventHubNamespace, err := eventhub.NewEventHubNamespace(ctx, "exampleEventHubNamespace", &eventhub.EventHubNamespaceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku:               pulumi.String("Standard"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleEventHub, err := eventhub.NewEventHub(ctx, "exampleEventHub", &eventhub.EventHubArgs{
//				NamespaceName:     exampleEventHubNamespace.Name,
//				ResourceGroupName: exampleResourceGroup.Name,
//				PartitionCount:    pulumi.Int(2),
//				MessageRetention:  pulumi.Int(7),
//			})
//			if err != nil {
//				return err
//			}
//			exampleConsumerGroup, err := eventhub.NewConsumerGroup(ctx, "exampleConsumerGroup", &eventhub.ConsumerGroupArgs{
//				NamespaceName:     exampleEventHubNamespace.Name,
//				EventhubName:      exampleEventHub.Name,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			exampleAuthorizationRule, err := eventhub.NewAuthorizationRule(ctx, "exampleAuthorizationRule", &eventhub.AuthorizationRuleArgs{
//				NamespaceName:     exampleEventHubNamespace.Name,
//				EventhubName:      exampleEventHub.Name,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Listen:            pulumi.Bool(true),
//				Send:              pulumi.Bool(false),
//				Manage:            pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
//				Location:               exampleResourceGroup.Location,
//				ResourceGroupName:      exampleResourceGroup.Name,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("LRS"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleTimeSeriesInsightsGen2Environment, err := iot.NewTimeSeriesInsightsGen2Environment(ctx, "exampleTimeSeriesInsightsGen2Environment", &iot.TimeSeriesInsightsGen2EnvironmentArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				SkuName:           pulumi.String("L1"),
//				IdProperties: pulumi.StringArray{
//					pulumi.String("id"),
//				},
//				Storage: &iot.TimeSeriesInsightsGen2EnvironmentStorageArgs{
//					Name: exampleAccount.Name,
//					Key:  exampleAccount.PrimaryAccessKey,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = iot.NewTimeSeriesInsightsEventSourceEventhub(ctx, "exampleTimeSeriesInsightsEventSourceEventhub", &iot.TimeSeriesInsightsEventSourceEventhubArgs{
//				Location:              exampleResourceGroup.Location,
//				EnvironmentId:         exampleTimeSeriesInsightsGen2Environment.ID(),
//				EventhubName:          exampleEventHub.Name,
//				NamespaceName:         exampleEventHubNamespace.Name,
//				SharedAccessKey:       exampleAuthorizationRule.PrimaryKey,
//				SharedAccessKeyName:   exampleAuthorizationRule.Name,
//				ConsumerGroupName:     exampleConsumerGroup.Name,
//				EventSourceResourceId: exampleEventHub.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Azure IoT Time Series Insights EventHub Event Source can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:iot/timeSeriesInsightsEventSourceEventhub:TimeSeriesInsightsEventSourceEventhub example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.TimeSeriesInsights/environments/environment1/eventSources/example
//
// ```
type TimeSeriesInsightsEventSourceEventhub struct {
	pulumi.CustomResourceState

	// Specifies the name of the EventHub Consumer Group that holds the partitions from which events will be read.
	ConsumerGroupName pulumi.StringOutput `pulumi:"consumerGroupName"`
	// Specifies the id of the IoT Time Series Insights Environment that the Event Source should be associated with. Changing this forces a new resource to created.
	EnvironmentId pulumi.StringOutput `pulumi:"environmentId"`
	// Specifies the resource id where events will be coming from.
	EventSourceResourceId pulumi.StringOutput `pulumi:"eventSourceResourceId"`
	// Specifies the name of the EventHub which will be associated with this resource.
	EventhubName pulumi.StringOutput `pulumi:"eventhubName"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name of the Azure IoT Time Series Insights EventHub Event Source. Changing this forces a new resource to be created. Must be globally unique.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the EventHub Namespace name.
	NamespaceName pulumi.StringOutput `pulumi:"namespaceName"`
	// Specifies the value of the Shared Access Policy key that grants the Time Series Insights service read access to the EventHub.
	SharedAccessKey pulumi.StringOutput `pulumi:"sharedAccessKey"`
	// Specifies the name of the Shared Access key that grants the Event Source access to the EventHub.
	SharedAccessKeyName pulumi.StringOutput `pulumi:"sharedAccessKeyName"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies the value that will be used as the event source's timestamp. This value defaults to the event creation time.
	TimestampPropertyName pulumi.StringOutput `pulumi:"timestampPropertyName"`
}

// NewTimeSeriesInsightsEventSourceEventhub registers a new resource with the given unique name, arguments, and options.
func NewTimeSeriesInsightsEventSourceEventhub(ctx *pulumi.Context,
	name string, args *TimeSeriesInsightsEventSourceEventhubArgs, opts ...pulumi.ResourceOption) (*TimeSeriesInsightsEventSourceEventhub, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConsumerGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ConsumerGroupName'")
	}
	if args.EnvironmentId == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentId'")
	}
	if args.EventSourceResourceId == nil {
		return nil, errors.New("invalid value for required argument 'EventSourceResourceId'")
	}
	if args.EventhubName == nil {
		return nil, errors.New("invalid value for required argument 'EventhubName'")
	}
	if args.NamespaceName == nil {
		return nil, errors.New("invalid value for required argument 'NamespaceName'")
	}
	if args.SharedAccessKey == nil {
		return nil, errors.New("invalid value for required argument 'SharedAccessKey'")
	}
	if args.SharedAccessKeyName == nil {
		return nil, errors.New("invalid value for required argument 'SharedAccessKeyName'")
	}
	if args.SharedAccessKey != nil {
		args.SharedAccessKey = pulumi.ToSecret(args.SharedAccessKey).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"sharedAccessKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TimeSeriesInsightsEventSourceEventhub
	err := ctx.RegisterResource("azure:iot/timeSeriesInsightsEventSourceEventhub:TimeSeriesInsightsEventSourceEventhub", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTimeSeriesInsightsEventSourceEventhub gets an existing TimeSeriesInsightsEventSourceEventhub resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTimeSeriesInsightsEventSourceEventhub(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TimeSeriesInsightsEventSourceEventhubState, opts ...pulumi.ResourceOption) (*TimeSeriesInsightsEventSourceEventhub, error) {
	var resource TimeSeriesInsightsEventSourceEventhub
	err := ctx.ReadResource("azure:iot/timeSeriesInsightsEventSourceEventhub:TimeSeriesInsightsEventSourceEventhub", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TimeSeriesInsightsEventSourceEventhub resources.
type timeSeriesInsightsEventSourceEventhubState struct {
	// Specifies the name of the EventHub Consumer Group that holds the partitions from which events will be read.
	ConsumerGroupName *string `pulumi:"consumerGroupName"`
	// Specifies the id of the IoT Time Series Insights Environment that the Event Source should be associated with. Changing this forces a new resource to created.
	EnvironmentId *string `pulumi:"environmentId"`
	// Specifies the resource id where events will be coming from.
	EventSourceResourceId *string `pulumi:"eventSourceResourceId"`
	// Specifies the name of the EventHub which will be associated with this resource.
	EventhubName *string `pulumi:"eventhubName"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the Azure IoT Time Series Insights EventHub Event Source. Changing this forces a new resource to be created. Must be globally unique.
	Name *string `pulumi:"name"`
	// Specifies the EventHub Namespace name.
	NamespaceName *string `pulumi:"namespaceName"`
	// Specifies the value of the Shared Access Policy key that grants the Time Series Insights service read access to the EventHub.
	SharedAccessKey *string `pulumi:"sharedAccessKey"`
	// Specifies the name of the Shared Access key that grants the Event Source access to the EventHub.
	SharedAccessKeyName *string `pulumi:"sharedAccessKeyName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the value that will be used as the event source's timestamp. This value defaults to the event creation time.
	TimestampPropertyName *string `pulumi:"timestampPropertyName"`
}

type TimeSeriesInsightsEventSourceEventhubState struct {
	// Specifies the name of the EventHub Consumer Group that holds the partitions from which events will be read.
	ConsumerGroupName pulumi.StringPtrInput
	// Specifies the id of the IoT Time Series Insights Environment that the Event Source should be associated with. Changing this forces a new resource to created.
	EnvironmentId pulumi.StringPtrInput
	// Specifies the resource id where events will be coming from.
	EventSourceResourceId pulumi.StringPtrInput
	// Specifies the name of the EventHub which will be associated with this resource.
	EventhubName pulumi.StringPtrInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the Azure IoT Time Series Insights EventHub Event Source. Changing this forces a new resource to be created. Must be globally unique.
	Name pulumi.StringPtrInput
	// Specifies the EventHub Namespace name.
	NamespaceName pulumi.StringPtrInput
	// Specifies the value of the Shared Access Policy key that grants the Time Series Insights service read access to the EventHub.
	SharedAccessKey pulumi.StringPtrInput
	// Specifies the name of the Shared Access key that grants the Event Source access to the EventHub.
	SharedAccessKeyName pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// Specifies the value that will be used as the event source's timestamp. This value defaults to the event creation time.
	TimestampPropertyName pulumi.StringPtrInput
}

func (TimeSeriesInsightsEventSourceEventhubState) ElementType() reflect.Type {
	return reflect.TypeOf((*timeSeriesInsightsEventSourceEventhubState)(nil)).Elem()
}

type timeSeriesInsightsEventSourceEventhubArgs struct {
	// Specifies the name of the EventHub Consumer Group that holds the partitions from which events will be read.
	ConsumerGroupName string `pulumi:"consumerGroupName"`
	// Specifies the id of the IoT Time Series Insights Environment that the Event Source should be associated with. Changing this forces a new resource to created.
	EnvironmentId string `pulumi:"environmentId"`
	// Specifies the resource id where events will be coming from.
	EventSourceResourceId string `pulumi:"eventSourceResourceId"`
	// Specifies the name of the EventHub which will be associated with this resource.
	EventhubName string `pulumi:"eventhubName"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the Azure IoT Time Series Insights EventHub Event Source. Changing this forces a new resource to be created. Must be globally unique.
	Name *string `pulumi:"name"`
	// Specifies the EventHub Namespace name.
	NamespaceName string `pulumi:"namespaceName"`
	// Specifies the value of the Shared Access Policy key that grants the Time Series Insights service read access to the EventHub.
	SharedAccessKey string `pulumi:"sharedAccessKey"`
	// Specifies the name of the Shared Access key that grants the Event Source access to the EventHub.
	SharedAccessKeyName string `pulumi:"sharedAccessKeyName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the value that will be used as the event source's timestamp. This value defaults to the event creation time.
	TimestampPropertyName *string `pulumi:"timestampPropertyName"`
}

// The set of arguments for constructing a TimeSeriesInsightsEventSourceEventhub resource.
type TimeSeriesInsightsEventSourceEventhubArgs struct {
	// Specifies the name of the EventHub Consumer Group that holds the partitions from which events will be read.
	ConsumerGroupName pulumi.StringInput
	// Specifies the id of the IoT Time Series Insights Environment that the Event Source should be associated with. Changing this forces a new resource to created.
	EnvironmentId pulumi.StringInput
	// Specifies the resource id where events will be coming from.
	EventSourceResourceId pulumi.StringInput
	// Specifies the name of the EventHub which will be associated with this resource.
	EventhubName pulumi.StringInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the Azure IoT Time Series Insights EventHub Event Source. Changing this forces a new resource to be created. Must be globally unique.
	Name pulumi.StringPtrInput
	// Specifies the EventHub Namespace name.
	NamespaceName pulumi.StringInput
	// Specifies the value of the Shared Access Policy key that grants the Time Series Insights service read access to the EventHub.
	SharedAccessKey pulumi.StringInput
	// Specifies the name of the Shared Access key that grants the Event Source access to the EventHub.
	SharedAccessKeyName pulumi.StringInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// Specifies the value that will be used as the event source's timestamp. This value defaults to the event creation time.
	TimestampPropertyName pulumi.StringPtrInput
}

func (TimeSeriesInsightsEventSourceEventhubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*timeSeriesInsightsEventSourceEventhubArgs)(nil)).Elem()
}

type TimeSeriesInsightsEventSourceEventhubInput interface {
	pulumi.Input

	ToTimeSeriesInsightsEventSourceEventhubOutput() TimeSeriesInsightsEventSourceEventhubOutput
	ToTimeSeriesInsightsEventSourceEventhubOutputWithContext(ctx context.Context) TimeSeriesInsightsEventSourceEventhubOutput
}

func (*TimeSeriesInsightsEventSourceEventhub) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeSeriesInsightsEventSourceEventhub)(nil)).Elem()
}

func (i *TimeSeriesInsightsEventSourceEventhub) ToTimeSeriesInsightsEventSourceEventhubOutput() TimeSeriesInsightsEventSourceEventhubOutput {
	return i.ToTimeSeriesInsightsEventSourceEventhubOutputWithContext(context.Background())
}

func (i *TimeSeriesInsightsEventSourceEventhub) ToTimeSeriesInsightsEventSourceEventhubOutputWithContext(ctx context.Context) TimeSeriesInsightsEventSourceEventhubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeSeriesInsightsEventSourceEventhubOutput)
}

// TimeSeriesInsightsEventSourceEventhubArrayInput is an input type that accepts TimeSeriesInsightsEventSourceEventhubArray and TimeSeriesInsightsEventSourceEventhubArrayOutput values.
// You can construct a concrete instance of `TimeSeriesInsightsEventSourceEventhubArrayInput` via:
//
//	TimeSeriesInsightsEventSourceEventhubArray{ TimeSeriesInsightsEventSourceEventhubArgs{...} }
type TimeSeriesInsightsEventSourceEventhubArrayInput interface {
	pulumi.Input

	ToTimeSeriesInsightsEventSourceEventhubArrayOutput() TimeSeriesInsightsEventSourceEventhubArrayOutput
	ToTimeSeriesInsightsEventSourceEventhubArrayOutputWithContext(context.Context) TimeSeriesInsightsEventSourceEventhubArrayOutput
}

type TimeSeriesInsightsEventSourceEventhubArray []TimeSeriesInsightsEventSourceEventhubInput

func (TimeSeriesInsightsEventSourceEventhubArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TimeSeriesInsightsEventSourceEventhub)(nil)).Elem()
}

func (i TimeSeriesInsightsEventSourceEventhubArray) ToTimeSeriesInsightsEventSourceEventhubArrayOutput() TimeSeriesInsightsEventSourceEventhubArrayOutput {
	return i.ToTimeSeriesInsightsEventSourceEventhubArrayOutputWithContext(context.Background())
}

func (i TimeSeriesInsightsEventSourceEventhubArray) ToTimeSeriesInsightsEventSourceEventhubArrayOutputWithContext(ctx context.Context) TimeSeriesInsightsEventSourceEventhubArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeSeriesInsightsEventSourceEventhubArrayOutput)
}

// TimeSeriesInsightsEventSourceEventhubMapInput is an input type that accepts TimeSeriesInsightsEventSourceEventhubMap and TimeSeriesInsightsEventSourceEventhubMapOutput values.
// You can construct a concrete instance of `TimeSeriesInsightsEventSourceEventhubMapInput` via:
//
//	TimeSeriesInsightsEventSourceEventhubMap{ "key": TimeSeriesInsightsEventSourceEventhubArgs{...} }
type TimeSeriesInsightsEventSourceEventhubMapInput interface {
	pulumi.Input

	ToTimeSeriesInsightsEventSourceEventhubMapOutput() TimeSeriesInsightsEventSourceEventhubMapOutput
	ToTimeSeriesInsightsEventSourceEventhubMapOutputWithContext(context.Context) TimeSeriesInsightsEventSourceEventhubMapOutput
}

type TimeSeriesInsightsEventSourceEventhubMap map[string]TimeSeriesInsightsEventSourceEventhubInput

func (TimeSeriesInsightsEventSourceEventhubMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TimeSeriesInsightsEventSourceEventhub)(nil)).Elem()
}

func (i TimeSeriesInsightsEventSourceEventhubMap) ToTimeSeriesInsightsEventSourceEventhubMapOutput() TimeSeriesInsightsEventSourceEventhubMapOutput {
	return i.ToTimeSeriesInsightsEventSourceEventhubMapOutputWithContext(context.Background())
}

func (i TimeSeriesInsightsEventSourceEventhubMap) ToTimeSeriesInsightsEventSourceEventhubMapOutputWithContext(ctx context.Context) TimeSeriesInsightsEventSourceEventhubMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeSeriesInsightsEventSourceEventhubMapOutput)
}

type TimeSeriesInsightsEventSourceEventhubOutput struct{ *pulumi.OutputState }

func (TimeSeriesInsightsEventSourceEventhubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeSeriesInsightsEventSourceEventhub)(nil)).Elem()
}

func (o TimeSeriesInsightsEventSourceEventhubOutput) ToTimeSeriesInsightsEventSourceEventhubOutput() TimeSeriesInsightsEventSourceEventhubOutput {
	return o
}

func (o TimeSeriesInsightsEventSourceEventhubOutput) ToTimeSeriesInsightsEventSourceEventhubOutputWithContext(ctx context.Context) TimeSeriesInsightsEventSourceEventhubOutput {
	return o
}

// Specifies the name of the EventHub Consumer Group that holds the partitions from which events will be read.
func (o TimeSeriesInsightsEventSourceEventhubOutput) ConsumerGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *TimeSeriesInsightsEventSourceEventhub) pulumi.StringOutput { return v.ConsumerGroupName }).(pulumi.StringOutput)
}

// Specifies the id of the IoT Time Series Insights Environment that the Event Source should be associated with. Changing this forces a new resource to created.
func (o TimeSeriesInsightsEventSourceEventhubOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *TimeSeriesInsightsEventSourceEventhub) pulumi.StringOutput { return v.EnvironmentId }).(pulumi.StringOutput)
}

// Specifies the resource id where events will be coming from.
func (o TimeSeriesInsightsEventSourceEventhubOutput) EventSourceResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *TimeSeriesInsightsEventSourceEventhub) pulumi.StringOutput { return v.EventSourceResourceId }).(pulumi.StringOutput)
}

// Specifies the name of the EventHub which will be associated with this resource.
func (o TimeSeriesInsightsEventSourceEventhubOutput) EventhubName() pulumi.StringOutput {
	return o.ApplyT(func(v *TimeSeriesInsightsEventSourceEventhub) pulumi.StringOutput { return v.EventhubName }).(pulumi.StringOutput)
}

// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
func (o TimeSeriesInsightsEventSourceEventhubOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *TimeSeriesInsightsEventSourceEventhub) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name of the Azure IoT Time Series Insights EventHub Event Source. Changing this forces a new resource to be created. Must be globally unique.
func (o TimeSeriesInsightsEventSourceEventhubOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TimeSeriesInsightsEventSourceEventhub) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the EventHub Namespace name.
func (o TimeSeriesInsightsEventSourceEventhubOutput) NamespaceName() pulumi.StringOutput {
	return o.ApplyT(func(v *TimeSeriesInsightsEventSourceEventhub) pulumi.StringOutput { return v.NamespaceName }).(pulumi.StringOutput)
}

// Specifies the value of the Shared Access Policy key that grants the Time Series Insights service read access to the EventHub.
func (o TimeSeriesInsightsEventSourceEventhubOutput) SharedAccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *TimeSeriesInsightsEventSourceEventhub) pulumi.StringOutput { return v.SharedAccessKey }).(pulumi.StringOutput)
}

// Specifies the name of the Shared Access key that grants the Event Source access to the EventHub.
func (o TimeSeriesInsightsEventSourceEventhubOutput) SharedAccessKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v *TimeSeriesInsightsEventSourceEventhub) pulumi.StringOutput { return v.SharedAccessKeyName }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o TimeSeriesInsightsEventSourceEventhubOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TimeSeriesInsightsEventSourceEventhub) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the value that will be used as the event source's timestamp. This value defaults to the event creation time.
func (o TimeSeriesInsightsEventSourceEventhubOutput) TimestampPropertyName() pulumi.StringOutput {
	return o.ApplyT(func(v *TimeSeriesInsightsEventSourceEventhub) pulumi.StringOutput { return v.TimestampPropertyName }).(pulumi.StringOutput)
}

type TimeSeriesInsightsEventSourceEventhubArrayOutput struct{ *pulumi.OutputState }

func (TimeSeriesInsightsEventSourceEventhubArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TimeSeriesInsightsEventSourceEventhub)(nil)).Elem()
}

func (o TimeSeriesInsightsEventSourceEventhubArrayOutput) ToTimeSeriesInsightsEventSourceEventhubArrayOutput() TimeSeriesInsightsEventSourceEventhubArrayOutput {
	return o
}

func (o TimeSeriesInsightsEventSourceEventhubArrayOutput) ToTimeSeriesInsightsEventSourceEventhubArrayOutputWithContext(ctx context.Context) TimeSeriesInsightsEventSourceEventhubArrayOutput {
	return o
}

func (o TimeSeriesInsightsEventSourceEventhubArrayOutput) Index(i pulumi.IntInput) TimeSeriesInsightsEventSourceEventhubOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TimeSeriesInsightsEventSourceEventhub {
		return vs[0].([]*TimeSeriesInsightsEventSourceEventhub)[vs[1].(int)]
	}).(TimeSeriesInsightsEventSourceEventhubOutput)
}

type TimeSeriesInsightsEventSourceEventhubMapOutput struct{ *pulumi.OutputState }

func (TimeSeriesInsightsEventSourceEventhubMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TimeSeriesInsightsEventSourceEventhub)(nil)).Elem()
}

func (o TimeSeriesInsightsEventSourceEventhubMapOutput) ToTimeSeriesInsightsEventSourceEventhubMapOutput() TimeSeriesInsightsEventSourceEventhubMapOutput {
	return o
}

func (o TimeSeriesInsightsEventSourceEventhubMapOutput) ToTimeSeriesInsightsEventSourceEventhubMapOutputWithContext(ctx context.Context) TimeSeriesInsightsEventSourceEventhubMapOutput {
	return o
}

func (o TimeSeriesInsightsEventSourceEventhubMapOutput) MapIndex(k pulumi.StringInput) TimeSeriesInsightsEventSourceEventhubOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TimeSeriesInsightsEventSourceEventhub {
		return vs[0].(map[string]*TimeSeriesInsightsEventSourceEventhub)[vs[1].(string)]
	}).(TimeSeriesInsightsEventSourceEventhubOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TimeSeriesInsightsEventSourceEventhubInput)(nil)).Elem(), &TimeSeriesInsightsEventSourceEventhub{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeSeriesInsightsEventSourceEventhubArrayInput)(nil)).Elem(), TimeSeriesInsightsEventSourceEventhubArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeSeriesInsightsEventSourceEventhubMapInput)(nil)).Elem(), TimeSeriesInsightsEventSourceEventhubMap{})
	pulumi.RegisterOutputType(TimeSeriesInsightsEventSourceEventhubOutput{})
	pulumi.RegisterOutputType(TimeSeriesInsightsEventSourceEventhubArrayOutput{})
	pulumi.RegisterOutputType(TimeSeriesInsightsEventSourceEventhubMapOutput{})
}
