// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package search

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Search Service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/search"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resources"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_ = search.LookupServiceOutput(ctx, search.GetServiceOutputArgs{
//				Name:              pulumi.String("example-search-service"),
//				ResourceGroupName: exampleResourceGroup.Name,
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func LookupService(ctx *pulumi.Context, args *LookupServiceArgs, opts ...pulumi.InvokeOption) (*LookupServiceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupServiceResult
	err := ctx.Invoke("azure:search/getService:getService", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getService.
type LookupServiceArgs struct {
	// The Name of the Search Service.
	Name string `pulumi:"name"`
	// The name of the Resource Group where the Search Service exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getService.
type LookupServiceResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// An `identity` block as defined below.
	Identities []GetServiceIdentity `pulumi:"identities"`
	// The name of this Query Key.
	Name string `pulumi:"name"`
	// The number of partitions which have been created.
	PartitionCount int `pulumi:"partitionCount"`
	// The Primary Key used for Search Service Administration.
	PrimaryKey string `pulumi:"primaryKey"`
	// Whether or not public network access is enabled for this resource.
	PublicNetworkAccessEnabled bool `pulumi:"publicNetworkAccessEnabled"`
	// A `queryKeys` block as defined below.
	QueryKeys []GetServiceQueryKey `pulumi:"queryKeys"`
	// The number of replica's which have been created.
	ReplicaCount      int    `pulumi:"replicaCount"`
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The Secondary Key used for Search Service Administration.
	SecondaryKey string `pulumi:"secondaryKey"`
	// A mapping of tags assigned to the resource.
	Tags map[string]string `pulumi:"tags"`
}

func LookupServiceOutput(ctx *pulumi.Context, args LookupServiceOutputArgs, opts ...pulumi.InvokeOption) LookupServiceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupServiceResultOutput, error) {
			args := v.(LookupServiceArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupServiceResult
			secret, err := ctx.InvokePackageRaw("azure:search/getService:getService", args, &rv, "", opts...)
			if err != nil {
				return LookupServiceResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupServiceResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupServiceResultOutput), nil
			}
			return output, nil
		}).(LookupServiceResultOutput)
}

// A collection of arguments for invoking getService.
type LookupServiceOutputArgs struct {
	// The Name of the Search Service.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Resource Group where the Search Service exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupServiceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServiceArgs)(nil)).Elem()
}

// A collection of values returned by getService.
type LookupServiceResultOutput struct{ *pulumi.OutputState }

func (LookupServiceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServiceResult)(nil)).Elem()
}

func (o LookupServiceResultOutput) ToLookupServiceResultOutput() LookupServiceResultOutput {
	return o
}

func (o LookupServiceResultOutput) ToLookupServiceResultOutputWithContext(ctx context.Context) LookupServiceResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupServiceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceResult) string { return v.Id }).(pulumi.StringOutput)
}

// An `identity` block as defined below.
func (o LookupServiceResultOutput) Identities() GetServiceIdentityArrayOutput {
	return o.ApplyT(func(v LookupServiceResult) []GetServiceIdentity { return v.Identities }).(GetServiceIdentityArrayOutput)
}

// The name of this Query Key.
func (o LookupServiceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceResult) string { return v.Name }).(pulumi.StringOutput)
}

// The number of partitions which have been created.
func (o LookupServiceResultOutput) PartitionCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupServiceResult) int { return v.PartitionCount }).(pulumi.IntOutput)
}

// The Primary Key used for Search Service Administration.
func (o LookupServiceResultOutput) PrimaryKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceResult) string { return v.PrimaryKey }).(pulumi.StringOutput)
}

// Whether or not public network access is enabled for this resource.
func (o LookupServiceResultOutput) PublicNetworkAccessEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupServiceResult) bool { return v.PublicNetworkAccessEnabled }).(pulumi.BoolOutput)
}

// A `queryKeys` block as defined below.
func (o LookupServiceResultOutput) QueryKeys() GetServiceQueryKeyArrayOutput {
	return o.ApplyT(func(v LookupServiceResult) []GetServiceQueryKey { return v.QueryKeys }).(GetServiceQueryKeyArrayOutput)
}

// The number of replica's which have been created.
func (o LookupServiceResultOutput) ReplicaCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupServiceResult) int { return v.ReplicaCount }).(pulumi.IntOutput)
}

func (o LookupServiceResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The Secondary Key used for Search Service Administration.
func (o LookupServiceResultOutput) SecondaryKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceResult) string { return v.SecondaryKey }).(pulumi.StringOutput)
}

// A mapping of tags assigned to the resource.
func (o LookupServiceResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupServiceResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupServiceResultOutput{})
}
