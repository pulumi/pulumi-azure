// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package search

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Allows you to manage an Azure Search Service.
type Service struct {
	s *pulumi.ResourceState
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOpt) (*Service, error) {
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.Sku == nil {
		return nil, errors.New("missing required argument 'Sku'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["location"] = nil
		inputs["name"] = nil
		inputs["partitionCount"] = nil
		inputs["replicaCount"] = nil
		inputs["resourceGroupName"] = nil
		inputs["sku"] = nil
		inputs["tags"] = nil
	} else {
		inputs["location"] = args.Location
		inputs["name"] = args.Name
		inputs["partitionCount"] = args.PartitionCount
		inputs["replicaCount"] = args.ReplicaCount
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["sku"] = args.Sku
		inputs["tags"] = args.Tags
	}
	inputs["primaryKey"] = nil
	inputs["secondaryKey"] = nil
	s, err := ctx.RegisterResource("azure:search/service:Service", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Service{s: s}, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ServiceState, opts ...pulumi.ResourceOpt) (*Service, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["location"] = state.Location
		inputs["name"] = state.Name
		inputs["partitionCount"] = state.PartitionCount
		inputs["primaryKey"] = state.PrimaryKey
		inputs["replicaCount"] = state.ReplicaCount
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["secondaryKey"] = state.SecondaryKey
		inputs["sku"] = state.Sku
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("azure:search/service:Service", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Service{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Service) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Service) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
func (r *Service) Location() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["location"])
}

// The name of the Search Service. Changing this forces a new resource to be created.
func (r *Service) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Default is 1. Valid values include 1, 2, 3, 4, 6, or 12. Valid only when `sku` is `standard`. Changing this forces a new resource to be created.
func (r *Service) PartitionCount() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["partitionCount"])
}

// The Search Service Administration primary key.
func (r *Service) PrimaryKey() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["primaryKey"])
}

// Default is 1. Valid values include 1 through 12. Valid only when `sku` is `standard`. Changing this forces a new resource to be created.
func (r *Service) ReplicaCount() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["replicaCount"])
}

// The name of the resource group in which to create the Search Service. Changing this forces a new resource to be created.
func (r *Service) ResourceGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// The Search Service Administration secondary key.
func (r *Service) SecondaryKey() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["secondaryKey"])
}

// Valid values are `free` and `standard`. `standard2` and `standard3` are also valid, but can only be used when it's enabled on the backend by Microsoft support. `free` provisions the service in shared clusters. `standard` provisions the service in dedicated clusters.  Changing this forces a new resource to be created.
func (r *Service) Sku() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sku"])
}

// A mapping of tags to assign to the resource. Changing this forces a new resource to be created.
func (r *Service) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering Service resources.
type ServiceState struct {
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location interface{}
	// The name of the Search Service. Changing this forces a new resource to be created.
	Name interface{}
	// Default is 1. Valid values include 1, 2, 3, 4, 6, or 12. Valid only when `sku` is `standard`. Changing this forces a new resource to be created.
	PartitionCount interface{}
	// The Search Service Administration primary key.
	PrimaryKey interface{}
	// Default is 1. Valid values include 1 through 12. Valid only when `sku` is `standard`. Changing this forces a new resource to be created.
	ReplicaCount interface{}
	// The name of the resource group in which to create the Search Service. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// The Search Service Administration secondary key.
	SecondaryKey interface{}
	// Valid values are `free` and `standard`. `standard2` and `standard3` are also valid, but can only be used when it's enabled on the backend by Microsoft support. `free` provisions the service in shared clusters. `standard` provisions the service in dedicated clusters.  Changing this forces a new resource to be created.
	Sku interface{}
	// A mapping of tags to assign to the resource. Changing this forces a new resource to be created.
	Tags interface{}
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location interface{}
	// The name of the Search Service. Changing this forces a new resource to be created.
	Name interface{}
	// Default is 1. Valid values include 1, 2, 3, 4, 6, or 12. Valid only when `sku` is `standard`. Changing this forces a new resource to be created.
	PartitionCount interface{}
	// Default is 1. Valid values include 1 through 12. Valid only when `sku` is `standard`. Changing this forces a new resource to be created.
	ReplicaCount interface{}
	// The name of the resource group in which to create the Search Service. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// Valid values are `free` and `standard`. `standard2` and `standard3` are also valid, but can only be used when it's enabled on the backend by Microsoft support. `free` provisions the service in shared clusters. `standard` provisions the service in dedicated clusters.  Changing this forces a new resource to be created.
	Sku interface{}
	// A mapping of tags to assign to the resource. Changing this forces a new resource to be created.
	Tags interface{}
}
