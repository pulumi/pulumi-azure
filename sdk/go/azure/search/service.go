// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package search

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Search Service.
//
// ## Example Usage
// ### Supporting API Keys)
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/search"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = search.NewService(ctx, "exampleService", &search.ServiceArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				Sku:               pulumi.String("standard"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Using Both AzureAD And API Keys)
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/search"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = search.NewService(ctx, "exampleService", &search.ServiceArgs{
//				ResourceGroupName:          exampleResourceGroup.Name,
//				Location:                   exampleResourceGroup.Location,
//				Sku:                        pulumi.String("standard"),
//				LocalAuthenticationEnabled: pulumi.Bool(true),
//				AuthenticationFailureMode:  pulumi.String("http403"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Supporting Only AzureAD Authentication)
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/search"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = search.NewService(ctx, "exampleService", &search.ServiceArgs{
//				ResourceGroupName:          exampleResourceGroup.Name,
//				Location:                   exampleResourceGroup.Location,
//				Sku:                        pulumi.String("standard"),
//				LocalAuthenticationEnabled: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Search Services can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:search/service:Service example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Search/searchServices/service1
//
// ```
type Service struct {
	pulumi.CustomResourceState

	// Specifies a list of inbound IPv4 or CIDRs that are allowed to access the Search Service. If the incoming IP request is from an IP address which is not included in the `allowedIps` it will be blocked by the Search Services firewall.
	//
	// > **NOTE:** The `allowedIps` are only applied if the `publicNetworkAccessEnabled` field has been set to `true`, else all traffic over the public interface will be rejected, even if the `allowedIps` field has been defined. When the `publicNetworkAccessEnabled` field has been set to `false` the private endpoint connections are the only allowed access point to the Search Service.
	AllowedIps pulumi.StringArrayOutput `pulumi:"allowedIps"`
	// Specifies the response that the Search Service should return for requests that fail authentication. Possible values include `http401WithBearerChallenge` or `http403`.
	//
	// > **NOTE:** `authenticationFailureMode` can only be configured when using `localAuthenticationEnabled` is set to `true` - which when set together specifies that both API Keys and AzureAD Authentication should be supported.
	AuthenticationFailureMode pulumi.StringPtrOutput `pulumi:"authenticationFailureMode"`
	// Specifies whether the Search Service should enforce that non-customer resources are encrypted. Defaults to `false`.
	CustomerManagedKeyEnforcementEnabled pulumi.BoolPtrOutput `pulumi:"customerManagedKeyEnforcementEnabled"`
	// Specifies the Hosting Mode, which allows for High Density partitions (that allow for up to 1000 indexes) should be supported. Possible values are `highDensity` or `default`. Defaults to `default`. Changing this forces a new Search Service to be created.
	//
	// > **NOTE:** `hostingMode` can only be configured when `sku` is set to `standard3`.
	HostingMode pulumi.StringPtrOutput `pulumi:"hostingMode"`
	// An `identity` block as defined below.
	Identity ServiceIdentityPtrOutput `pulumi:"identity"`
	// Specifies whether the Search Service allows authenticating using API Keys? Defaults to `true`.
	LocalAuthenticationEnabled pulumi.BoolPtrOutput `pulumi:"localAuthenticationEnabled"`
	// The Azure Region where the Search Service should exist. Changing this forces a new Search Service to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The Name which should be used for this Search Service. Changing this forces a new Search Service to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the number of partitions which should be created. This field cannot be set when using a `free` or `basic` sku ([see the Microsoft documentation](https://learn.microsoft.com/azure/search/search-sku-tier)). Possible values include `1`, `2`, `3`, `4`, `6`, or `12`. Defaults to `1`.
	//
	// > **NOTE:** when `hostingMode` is set to `highDensity` the maximum number of partitions allowed is `3`.
	PartitionCount pulumi.IntPtrOutput `pulumi:"partitionCount"`
	// The Primary Key used for Search Service Administration.
	PrimaryKey pulumi.StringOutput `pulumi:"primaryKey"`
	// Specifies whether Public Network Access is allowed for this resource. Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrOutput `pulumi:"publicNetworkAccessEnabled"`
	// A `queryKeys` block as defined below.
	QueryKeys ServiceQueryKeyArrayOutput `pulumi:"queryKeys"`
	// Specifies the number of Replica's which should be created for this Search Service. This field cannot be set when using a `free` sku ([see the Microsoft documentation](https://learn.microsoft.com/azure/search/search-sku-tier)).
	ReplicaCount pulumi.IntPtrOutput `pulumi:"replicaCount"`
	// The name of the Resource Group where the Search Service should exist. Changing this forces a new Search Service to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The Secondary Key used for Search Service Administration.
	SecondaryKey pulumi.StringOutput `pulumi:"secondaryKey"`
	// Specifies the Semantic Search SKU which should be used for this Search Service. Possible values include `free` and `standard`.
	//
	// > **NOTE:** The `semanticSearchSku` cannot be defined if your Search Services `sku` is set to `free`. The Semantic Search feature is only available in certain regions, please see the [product documentation](https://learn.microsoft.com/azure/search/semantic-search-overview#availability-and-pricing) for more information.
	SemanticSearchSku pulumi.StringPtrOutput `pulumi:"semanticSearchSku"`
	// The SKU which should be used for this Search Service. Possible values include `basic`, `free`, `standard`, `standard2`, `standard3`, `storageOptimizedL1` and `storageOptimizedL2`. Changing this forces a new Search Service to be created.
	//
	// > The `basic` and `free` SKUs provision the Search Service in a Shared Cluster - the `standard` SKUs use a Dedicated Cluster.
	//
	// > **NOTE:** The SKUs `standard2`, `standard3`, `storageOptimizedL1` and `storageOptimizedL2` are only available by submitting a quota increase request to Microsoft. Please see the [product documentation](https://learn.microsoft.com/azure/azure-resource-manager/troubleshooting/error-resource-quota?tabs=azure-cli) on how to submit a quota increase request.
	Sku pulumi.StringOutput `pulumi:"sku"`
	// Specifies a mapping of tags which should be assigned to this Search Service.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Sku == nil {
		return nil, errors.New("invalid value for required argument 'Sku'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"primaryKey",
		"secondaryKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Service
	err := ctx.RegisterResource("azure:search/service:Service", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("azure:search/service:Service", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type serviceState struct {
	// Specifies a list of inbound IPv4 or CIDRs that are allowed to access the Search Service. If the incoming IP request is from an IP address which is not included in the `allowedIps` it will be blocked by the Search Services firewall.
	//
	// > **NOTE:** The `allowedIps` are only applied if the `publicNetworkAccessEnabled` field has been set to `true`, else all traffic over the public interface will be rejected, even if the `allowedIps` field has been defined. When the `publicNetworkAccessEnabled` field has been set to `false` the private endpoint connections are the only allowed access point to the Search Service.
	AllowedIps []string `pulumi:"allowedIps"`
	// Specifies the response that the Search Service should return for requests that fail authentication. Possible values include `http401WithBearerChallenge` or `http403`.
	//
	// > **NOTE:** `authenticationFailureMode` can only be configured when using `localAuthenticationEnabled` is set to `true` - which when set together specifies that both API Keys and AzureAD Authentication should be supported.
	AuthenticationFailureMode *string `pulumi:"authenticationFailureMode"`
	// Specifies whether the Search Service should enforce that non-customer resources are encrypted. Defaults to `false`.
	CustomerManagedKeyEnforcementEnabled *bool `pulumi:"customerManagedKeyEnforcementEnabled"`
	// Specifies the Hosting Mode, which allows for High Density partitions (that allow for up to 1000 indexes) should be supported. Possible values are `highDensity` or `default`. Defaults to `default`. Changing this forces a new Search Service to be created.
	//
	// > **NOTE:** `hostingMode` can only be configured when `sku` is set to `standard3`.
	HostingMode *string `pulumi:"hostingMode"`
	// An `identity` block as defined below.
	Identity *ServiceIdentity `pulumi:"identity"`
	// Specifies whether the Search Service allows authenticating using API Keys? Defaults to `true`.
	LocalAuthenticationEnabled *bool `pulumi:"localAuthenticationEnabled"`
	// The Azure Region where the Search Service should exist. Changing this forces a new Search Service to be created.
	Location *string `pulumi:"location"`
	// The Name which should be used for this Search Service. Changing this forces a new Search Service to be created.
	Name *string `pulumi:"name"`
	// Specifies the number of partitions which should be created. This field cannot be set when using a `free` or `basic` sku ([see the Microsoft documentation](https://learn.microsoft.com/azure/search/search-sku-tier)). Possible values include `1`, `2`, `3`, `4`, `6`, or `12`. Defaults to `1`.
	//
	// > **NOTE:** when `hostingMode` is set to `highDensity` the maximum number of partitions allowed is `3`.
	PartitionCount *int `pulumi:"partitionCount"`
	// The Primary Key used for Search Service Administration.
	PrimaryKey *string `pulumi:"primaryKey"`
	// Specifies whether Public Network Access is allowed for this resource. Defaults to `true`.
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// A `queryKeys` block as defined below.
	QueryKeys []ServiceQueryKey `pulumi:"queryKeys"`
	// Specifies the number of Replica's which should be created for this Search Service. This field cannot be set when using a `free` sku ([see the Microsoft documentation](https://learn.microsoft.com/azure/search/search-sku-tier)).
	ReplicaCount *int `pulumi:"replicaCount"`
	// The name of the Resource Group where the Search Service should exist. Changing this forces a new Search Service to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The Secondary Key used for Search Service Administration.
	SecondaryKey *string `pulumi:"secondaryKey"`
	// Specifies the Semantic Search SKU which should be used for this Search Service. Possible values include `free` and `standard`.
	//
	// > **NOTE:** The `semanticSearchSku` cannot be defined if your Search Services `sku` is set to `free`. The Semantic Search feature is only available in certain regions, please see the [product documentation](https://learn.microsoft.com/azure/search/semantic-search-overview#availability-and-pricing) for more information.
	SemanticSearchSku *string `pulumi:"semanticSearchSku"`
	// The SKU which should be used for this Search Service. Possible values include `basic`, `free`, `standard`, `standard2`, `standard3`, `storageOptimizedL1` and `storageOptimizedL2`. Changing this forces a new Search Service to be created.
	//
	// > The `basic` and `free` SKUs provision the Search Service in a Shared Cluster - the `standard` SKUs use a Dedicated Cluster.
	//
	// > **NOTE:** The SKUs `standard2`, `standard3`, `storageOptimizedL1` and `storageOptimizedL2` are only available by submitting a quota increase request to Microsoft. Please see the [product documentation](https://learn.microsoft.com/azure/azure-resource-manager/troubleshooting/error-resource-quota?tabs=azure-cli) on how to submit a quota increase request.
	Sku *string `pulumi:"sku"`
	// Specifies a mapping of tags which should be assigned to this Search Service.
	Tags map[string]string `pulumi:"tags"`
}

type ServiceState struct {
	// Specifies a list of inbound IPv4 or CIDRs that are allowed to access the Search Service. If the incoming IP request is from an IP address which is not included in the `allowedIps` it will be blocked by the Search Services firewall.
	//
	// > **NOTE:** The `allowedIps` are only applied if the `publicNetworkAccessEnabled` field has been set to `true`, else all traffic over the public interface will be rejected, even if the `allowedIps` field has been defined. When the `publicNetworkAccessEnabled` field has been set to `false` the private endpoint connections are the only allowed access point to the Search Service.
	AllowedIps pulumi.StringArrayInput
	// Specifies the response that the Search Service should return for requests that fail authentication. Possible values include `http401WithBearerChallenge` or `http403`.
	//
	// > **NOTE:** `authenticationFailureMode` can only be configured when using `localAuthenticationEnabled` is set to `true` - which when set together specifies that both API Keys and AzureAD Authentication should be supported.
	AuthenticationFailureMode pulumi.StringPtrInput
	// Specifies whether the Search Service should enforce that non-customer resources are encrypted. Defaults to `false`.
	CustomerManagedKeyEnforcementEnabled pulumi.BoolPtrInput
	// Specifies the Hosting Mode, which allows for High Density partitions (that allow for up to 1000 indexes) should be supported. Possible values are `highDensity` or `default`. Defaults to `default`. Changing this forces a new Search Service to be created.
	//
	// > **NOTE:** `hostingMode` can only be configured when `sku` is set to `standard3`.
	HostingMode pulumi.StringPtrInput
	// An `identity` block as defined below.
	Identity ServiceIdentityPtrInput
	// Specifies whether the Search Service allows authenticating using API Keys? Defaults to `true`.
	LocalAuthenticationEnabled pulumi.BoolPtrInput
	// The Azure Region where the Search Service should exist. Changing this forces a new Search Service to be created.
	Location pulumi.StringPtrInput
	// The Name which should be used for this Search Service. Changing this forces a new Search Service to be created.
	Name pulumi.StringPtrInput
	// Specifies the number of partitions which should be created. This field cannot be set when using a `free` or `basic` sku ([see the Microsoft documentation](https://learn.microsoft.com/azure/search/search-sku-tier)). Possible values include `1`, `2`, `3`, `4`, `6`, or `12`. Defaults to `1`.
	//
	// > **NOTE:** when `hostingMode` is set to `highDensity` the maximum number of partitions allowed is `3`.
	PartitionCount pulumi.IntPtrInput
	// The Primary Key used for Search Service Administration.
	PrimaryKey pulumi.StringPtrInput
	// Specifies whether Public Network Access is allowed for this resource. Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// A `queryKeys` block as defined below.
	QueryKeys ServiceQueryKeyArrayInput
	// Specifies the number of Replica's which should be created for this Search Service. This field cannot be set when using a `free` sku ([see the Microsoft documentation](https://learn.microsoft.com/azure/search/search-sku-tier)).
	ReplicaCount pulumi.IntPtrInput
	// The name of the Resource Group where the Search Service should exist. Changing this forces a new Search Service to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The Secondary Key used for Search Service Administration.
	SecondaryKey pulumi.StringPtrInput
	// Specifies the Semantic Search SKU which should be used for this Search Service. Possible values include `free` and `standard`.
	//
	// > **NOTE:** The `semanticSearchSku` cannot be defined if your Search Services `sku` is set to `free`. The Semantic Search feature is only available in certain regions, please see the [product documentation](https://learn.microsoft.com/azure/search/semantic-search-overview#availability-and-pricing) for more information.
	SemanticSearchSku pulumi.StringPtrInput
	// The SKU which should be used for this Search Service. Possible values include `basic`, `free`, `standard`, `standard2`, `standard3`, `storageOptimizedL1` and `storageOptimizedL2`. Changing this forces a new Search Service to be created.
	//
	// > The `basic` and `free` SKUs provision the Search Service in a Shared Cluster - the `standard` SKUs use a Dedicated Cluster.
	//
	// > **NOTE:** The SKUs `standard2`, `standard3`, `storageOptimizedL1` and `storageOptimizedL2` are only available by submitting a quota increase request to Microsoft. Please see the [product documentation](https://learn.microsoft.com/azure/azure-resource-manager/troubleshooting/error-resource-quota?tabs=azure-cli) on how to submit a quota increase request.
	Sku pulumi.StringPtrInput
	// Specifies a mapping of tags which should be assigned to this Search Service.
	Tags pulumi.StringMapInput
}

func (ServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceState)(nil)).Elem()
}

type serviceArgs struct {
	// Specifies a list of inbound IPv4 or CIDRs that are allowed to access the Search Service. If the incoming IP request is from an IP address which is not included in the `allowedIps` it will be blocked by the Search Services firewall.
	//
	// > **NOTE:** The `allowedIps` are only applied if the `publicNetworkAccessEnabled` field has been set to `true`, else all traffic over the public interface will be rejected, even if the `allowedIps` field has been defined. When the `publicNetworkAccessEnabled` field has been set to `false` the private endpoint connections are the only allowed access point to the Search Service.
	AllowedIps []string `pulumi:"allowedIps"`
	// Specifies the response that the Search Service should return for requests that fail authentication. Possible values include `http401WithBearerChallenge` or `http403`.
	//
	// > **NOTE:** `authenticationFailureMode` can only be configured when using `localAuthenticationEnabled` is set to `true` - which when set together specifies that both API Keys and AzureAD Authentication should be supported.
	AuthenticationFailureMode *string `pulumi:"authenticationFailureMode"`
	// Specifies whether the Search Service should enforce that non-customer resources are encrypted. Defaults to `false`.
	CustomerManagedKeyEnforcementEnabled *bool `pulumi:"customerManagedKeyEnforcementEnabled"`
	// Specifies the Hosting Mode, which allows for High Density partitions (that allow for up to 1000 indexes) should be supported. Possible values are `highDensity` or `default`. Defaults to `default`. Changing this forces a new Search Service to be created.
	//
	// > **NOTE:** `hostingMode` can only be configured when `sku` is set to `standard3`.
	HostingMode *string `pulumi:"hostingMode"`
	// An `identity` block as defined below.
	Identity *ServiceIdentity `pulumi:"identity"`
	// Specifies whether the Search Service allows authenticating using API Keys? Defaults to `true`.
	LocalAuthenticationEnabled *bool `pulumi:"localAuthenticationEnabled"`
	// The Azure Region where the Search Service should exist. Changing this forces a new Search Service to be created.
	Location *string `pulumi:"location"`
	// The Name which should be used for this Search Service. Changing this forces a new Search Service to be created.
	Name *string `pulumi:"name"`
	// Specifies the number of partitions which should be created. This field cannot be set when using a `free` or `basic` sku ([see the Microsoft documentation](https://learn.microsoft.com/azure/search/search-sku-tier)). Possible values include `1`, `2`, `3`, `4`, `6`, or `12`. Defaults to `1`.
	//
	// > **NOTE:** when `hostingMode` is set to `highDensity` the maximum number of partitions allowed is `3`.
	PartitionCount *int `pulumi:"partitionCount"`
	// Specifies whether Public Network Access is allowed for this resource. Defaults to `true`.
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// Specifies the number of Replica's which should be created for this Search Service. This field cannot be set when using a `free` sku ([see the Microsoft documentation](https://learn.microsoft.com/azure/search/search-sku-tier)).
	ReplicaCount *int `pulumi:"replicaCount"`
	// The name of the Resource Group where the Search Service should exist. Changing this forces a new Search Service to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Specifies the Semantic Search SKU which should be used for this Search Service. Possible values include `free` and `standard`.
	//
	// > **NOTE:** The `semanticSearchSku` cannot be defined if your Search Services `sku` is set to `free`. The Semantic Search feature is only available in certain regions, please see the [product documentation](https://learn.microsoft.com/azure/search/semantic-search-overview#availability-and-pricing) for more information.
	SemanticSearchSku *string `pulumi:"semanticSearchSku"`
	// The SKU which should be used for this Search Service. Possible values include `basic`, `free`, `standard`, `standard2`, `standard3`, `storageOptimizedL1` and `storageOptimizedL2`. Changing this forces a new Search Service to be created.
	//
	// > The `basic` and `free` SKUs provision the Search Service in a Shared Cluster - the `standard` SKUs use a Dedicated Cluster.
	//
	// > **NOTE:** The SKUs `standard2`, `standard3`, `storageOptimizedL1` and `storageOptimizedL2` are only available by submitting a quota increase request to Microsoft. Please see the [product documentation](https://learn.microsoft.com/azure/azure-resource-manager/troubleshooting/error-resource-quota?tabs=azure-cli) on how to submit a quota increase request.
	Sku string `pulumi:"sku"`
	// Specifies a mapping of tags which should be assigned to this Search Service.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	// Specifies a list of inbound IPv4 or CIDRs that are allowed to access the Search Service. If the incoming IP request is from an IP address which is not included in the `allowedIps` it will be blocked by the Search Services firewall.
	//
	// > **NOTE:** The `allowedIps` are only applied if the `publicNetworkAccessEnabled` field has been set to `true`, else all traffic over the public interface will be rejected, even if the `allowedIps` field has been defined. When the `publicNetworkAccessEnabled` field has been set to `false` the private endpoint connections are the only allowed access point to the Search Service.
	AllowedIps pulumi.StringArrayInput
	// Specifies the response that the Search Service should return for requests that fail authentication. Possible values include `http401WithBearerChallenge` or `http403`.
	//
	// > **NOTE:** `authenticationFailureMode` can only be configured when using `localAuthenticationEnabled` is set to `true` - which when set together specifies that both API Keys and AzureAD Authentication should be supported.
	AuthenticationFailureMode pulumi.StringPtrInput
	// Specifies whether the Search Service should enforce that non-customer resources are encrypted. Defaults to `false`.
	CustomerManagedKeyEnforcementEnabled pulumi.BoolPtrInput
	// Specifies the Hosting Mode, which allows for High Density partitions (that allow for up to 1000 indexes) should be supported. Possible values are `highDensity` or `default`. Defaults to `default`. Changing this forces a new Search Service to be created.
	//
	// > **NOTE:** `hostingMode` can only be configured when `sku` is set to `standard3`.
	HostingMode pulumi.StringPtrInput
	// An `identity` block as defined below.
	Identity ServiceIdentityPtrInput
	// Specifies whether the Search Service allows authenticating using API Keys? Defaults to `true`.
	LocalAuthenticationEnabled pulumi.BoolPtrInput
	// The Azure Region where the Search Service should exist. Changing this forces a new Search Service to be created.
	Location pulumi.StringPtrInput
	// The Name which should be used for this Search Service. Changing this forces a new Search Service to be created.
	Name pulumi.StringPtrInput
	// Specifies the number of partitions which should be created. This field cannot be set when using a `free` or `basic` sku ([see the Microsoft documentation](https://learn.microsoft.com/azure/search/search-sku-tier)). Possible values include `1`, `2`, `3`, `4`, `6`, or `12`. Defaults to `1`.
	//
	// > **NOTE:** when `hostingMode` is set to `highDensity` the maximum number of partitions allowed is `3`.
	PartitionCount pulumi.IntPtrInput
	// Specifies whether Public Network Access is allowed for this resource. Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// Specifies the number of Replica's which should be created for this Search Service. This field cannot be set when using a `free` sku ([see the Microsoft documentation](https://learn.microsoft.com/azure/search/search-sku-tier)).
	ReplicaCount pulumi.IntPtrInput
	// The name of the Resource Group where the Search Service should exist. Changing this forces a new Search Service to be created.
	ResourceGroupName pulumi.StringInput
	// Specifies the Semantic Search SKU which should be used for this Search Service. Possible values include `free` and `standard`.
	//
	// > **NOTE:** The `semanticSearchSku` cannot be defined if your Search Services `sku` is set to `free`. The Semantic Search feature is only available in certain regions, please see the [product documentation](https://learn.microsoft.com/azure/search/semantic-search-overview#availability-and-pricing) for more information.
	SemanticSearchSku pulumi.StringPtrInput
	// The SKU which should be used for this Search Service. Possible values include `basic`, `free`, `standard`, `standard2`, `standard3`, `storageOptimizedL1` and `storageOptimizedL2`. Changing this forces a new Search Service to be created.
	//
	// > The `basic` and `free` SKUs provision the Search Service in a Shared Cluster - the `standard` SKUs use a Dedicated Cluster.
	//
	// > **NOTE:** The SKUs `standard2`, `standard3`, `storageOptimizedL1` and `storageOptimizedL2` are only available by submitting a quota increase request to Microsoft. Please see the [product documentation](https://learn.microsoft.com/azure/azure-resource-manager/troubleshooting/error-resource-quota?tabs=azure-cli) on how to submit a quota increase request.
	Sku pulumi.StringInput
	// Specifies a mapping of tags which should be assigned to this Search Service.
	Tags pulumi.StringMapInput
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceArgs)(nil)).Elem()
}

type ServiceInput interface {
	pulumi.Input

	ToServiceOutput() ServiceOutput
	ToServiceOutputWithContext(ctx context.Context) ServiceOutput
}

func (*Service) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (i *Service) ToServiceOutput() ServiceOutput {
	return i.ToServiceOutputWithContext(context.Background())
}

func (i *Service) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOutput)
}

// ServiceArrayInput is an input type that accepts ServiceArray and ServiceArrayOutput values.
// You can construct a concrete instance of `ServiceArrayInput` via:
//
//	ServiceArray{ ServiceArgs{...} }
type ServiceArrayInput interface {
	pulumi.Input

	ToServiceArrayOutput() ServiceArrayOutput
	ToServiceArrayOutputWithContext(context.Context) ServiceArrayOutput
}

type ServiceArray []ServiceInput

func (ServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Service)(nil)).Elem()
}

func (i ServiceArray) ToServiceArrayOutput() ServiceArrayOutput {
	return i.ToServiceArrayOutputWithContext(context.Background())
}

func (i ServiceArray) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceArrayOutput)
}

// ServiceMapInput is an input type that accepts ServiceMap and ServiceMapOutput values.
// You can construct a concrete instance of `ServiceMapInput` via:
//
//	ServiceMap{ "key": ServiceArgs{...} }
type ServiceMapInput interface {
	pulumi.Input

	ToServiceMapOutput() ServiceMapOutput
	ToServiceMapOutputWithContext(context.Context) ServiceMapOutput
}

type ServiceMap map[string]ServiceInput

func (ServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Service)(nil)).Elem()
}

func (i ServiceMap) ToServiceMapOutput() ServiceMapOutput {
	return i.ToServiceMapOutputWithContext(context.Background())
}

func (i ServiceMap) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMapOutput)
}

type ServiceOutput struct{ *pulumi.OutputState }

func (ServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (o ServiceOutput) ToServiceOutput() ServiceOutput {
	return o
}

func (o ServiceOutput) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return o
}

// Specifies a list of inbound IPv4 or CIDRs that are allowed to access the Search Service. If the incoming IP request is from an IP address which is not included in the `allowedIps` it will be blocked by the Search Services firewall.
//
// > **NOTE:** The `allowedIps` are only applied if the `publicNetworkAccessEnabled` field has been set to `true`, else all traffic over the public interface will be rejected, even if the `allowedIps` field has been defined. When the `publicNetworkAccessEnabled` field has been set to `false` the private endpoint connections are the only allowed access point to the Search Service.
func (o ServiceOutput) AllowedIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Service) pulumi.StringArrayOutput { return v.AllowedIps }).(pulumi.StringArrayOutput)
}

// Specifies the response that the Search Service should return for requests that fail authentication. Possible values include `http401WithBearerChallenge` or `http403`.
//
// > **NOTE:** `authenticationFailureMode` can only be configured when using `localAuthenticationEnabled` is set to `true` - which when set together specifies that both API Keys and AzureAD Authentication should be supported.
func (o ServiceOutput) AuthenticationFailureMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.AuthenticationFailureMode }).(pulumi.StringPtrOutput)
}

// Specifies whether the Search Service should enforce that non-customer resources are encrypted. Defaults to `false`.
func (o ServiceOutput) CustomerManagedKeyEnforcementEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.BoolPtrOutput { return v.CustomerManagedKeyEnforcementEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the Hosting Mode, which allows for High Density partitions (that allow for up to 1000 indexes) should be supported. Possible values are `highDensity` or `default`. Defaults to `default`. Changing this forces a new Search Service to be created.
//
// > **NOTE:** `hostingMode` can only be configured when `sku` is set to `standard3`.
func (o ServiceOutput) HostingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.HostingMode }).(pulumi.StringPtrOutput)
}

// An `identity` block as defined below.
func (o ServiceOutput) Identity() ServiceIdentityPtrOutput {
	return o.ApplyT(func(v *Service) ServiceIdentityPtrOutput { return v.Identity }).(ServiceIdentityPtrOutput)
}

// Specifies whether the Search Service allows authenticating using API Keys? Defaults to `true`.
func (o ServiceOutput) LocalAuthenticationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.BoolPtrOutput { return v.LocalAuthenticationEnabled }).(pulumi.BoolPtrOutput)
}

// The Azure Region where the Search Service should exist. Changing this forces a new Search Service to be created.
func (o ServiceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The Name which should be used for this Search Service. Changing this forces a new Search Service to be created.
func (o ServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the number of partitions which should be created. This field cannot be set when using a `free` or `basic` sku ([see the Microsoft documentation](https://learn.microsoft.com/azure/search/search-sku-tier)). Possible values include `1`, `2`, `3`, `4`, `6`, or `12`. Defaults to `1`.
//
// > **NOTE:** when `hostingMode` is set to `highDensity` the maximum number of partitions allowed is `3`.
func (o ServiceOutput) PartitionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.IntPtrOutput { return v.PartitionCount }).(pulumi.IntPtrOutput)
}

// The Primary Key used for Search Service Administration.
func (o ServiceOutput) PrimaryKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.PrimaryKey }).(pulumi.StringOutput)
}

// Specifies whether Public Network Access is allowed for this resource. Defaults to `true`.
func (o ServiceOutput) PublicNetworkAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.BoolPtrOutput { return v.PublicNetworkAccessEnabled }).(pulumi.BoolPtrOutput)
}

// A `queryKeys` block as defined below.
func (o ServiceOutput) QueryKeys() ServiceQueryKeyArrayOutput {
	return o.ApplyT(func(v *Service) ServiceQueryKeyArrayOutput { return v.QueryKeys }).(ServiceQueryKeyArrayOutput)
}

// Specifies the number of Replica's which should be created for this Search Service. This field cannot be set when using a `free` sku ([see the Microsoft documentation](https://learn.microsoft.com/azure/search/search-sku-tier)).
func (o ServiceOutput) ReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.IntPtrOutput { return v.ReplicaCount }).(pulumi.IntPtrOutput)
}

// The name of the Resource Group where the Search Service should exist. Changing this forces a new Search Service to be created.
func (o ServiceOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The Secondary Key used for Search Service Administration.
func (o ServiceOutput) SecondaryKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.SecondaryKey }).(pulumi.StringOutput)
}

// Specifies the Semantic Search SKU which should be used for this Search Service. Possible values include `free` and `standard`.
//
// > **NOTE:** The `semanticSearchSku` cannot be defined if your Search Services `sku` is set to `free`. The Semantic Search feature is only available in certain regions, please see the [product documentation](https://learn.microsoft.com/azure/search/semantic-search-overview#availability-and-pricing) for more information.
func (o ServiceOutput) SemanticSearchSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.SemanticSearchSku }).(pulumi.StringPtrOutput)
}

// The SKU which should be used for this Search Service. Possible values include `basic`, `free`, `standard`, `standard2`, `standard3`, `storageOptimizedL1` and `storageOptimizedL2`. Changing this forces a new Search Service to be created.
//
// > The `basic` and `free` SKUs provision the Search Service in a Shared Cluster - the `standard` SKUs use a Dedicated Cluster.
//
// > **NOTE:** The SKUs `standard2`, `standard3`, `storageOptimizedL1` and `storageOptimizedL2` are only available by submitting a quota increase request to Microsoft. Please see the [product documentation](https://learn.microsoft.com/azure/azure-resource-manager/troubleshooting/error-resource-quota?tabs=azure-cli) on how to submit a quota increase request.
func (o ServiceOutput) Sku() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Sku }).(pulumi.StringOutput)
}

// Specifies a mapping of tags which should be assigned to this Search Service.
func (o ServiceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Service) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type ServiceArrayOutput struct{ *pulumi.OutputState }

func (ServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Service)(nil)).Elem()
}

func (o ServiceArrayOutput) ToServiceArrayOutput() ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) Index(i pulumi.IntInput) ServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Service {
		return vs[0].([]*Service)[vs[1].(int)]
	}).(ServiceOutput)
}

type ServiceMapOutput struct{ *pulumi.OutputState }

func (ServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Service)(nil)).Elem()
}

func (o ServiceMapOutput) ToServiceMapOutput() ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) MapIndex(k pulumi.StringInput) ServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Service {
		return vs[0].(map[string]*Service)[vs[1].(string)]
	}).(ServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceInput)(nil)).Elem(), &Service{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceArrayInput)(nil)).Elem(), ServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceMapInput)(nil)).Elem(), ServiceMap{})
	pulumi.RegisterOutputType(ServiceOutput{})
	pulumi.RegisterOutputType(ServiceArrayOutput{})
	pulumi.RegisterOutputType(ServiceMapOutput{})
}
