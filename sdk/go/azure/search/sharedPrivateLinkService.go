// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package search

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages the Shared Private Link Service for an Azure Search Service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/search"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testResourceGroup, err := core.NewResourceGroup(ctx, "testResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("east us"),
//			})
//			if err != nil {
//				return err
//			}
//			testService, err := search.NewService(ctx, "testService", &search.ServiceArgs{
//				ResourceGroupName: testResourceGroup.Name,
//				Location:          testResourceGroup.Location,
//				Sku:               pulumi.String("standard"),
//			})
//			if err != nil {
//				return err
//			}
//			testAccount, err := storage.NewAccount(ctx, "testAccount", &storage.AccountArgs{
//				ResourceGroupName:      testResourceGroup.Name,
//				Location:               testResourceGroup.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("LRS"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = search.NewSharedPrivateLinkService(ctx, "testSharedPrivateLinkService", &search.SharedPrivateLinkServiceArgs{
//				SearchServiceId:  testService.ID(),
//				SubresourceName:  pulumi.String("blob"),
//				TargetResourceId: testAccount.ID(),
//				RequestMessage:   pulumi.String("please approve"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Azure Search Shared Private Link Resource can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:search/sharedPrivateLinkService:SharedPrivateLinkService example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Search/searchServices/service1/sharedPrivateLinkResources/resource1
//
// ```
type SharedPrivateLinkService struct {
	pulumi.CustomResourceState

	// Specify the name of the Azure Search Shared Private Link Resource. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specify the request message for requesting approval of the Shared Private Link Enabled Remote Resource.
	RequestMessage pulumi.StringPtrOutput `pulumi:"requestMessage"`
	// Specify the id of the Azure Search Service. Changing this forces a new resource to be created.
	SearchServiceId pulumi.StringOutput `pulumi:"searchServiceId"`
	// The status of a private endpoint connection. Possible values are Pending, Approved, Rejected or Disconnected.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specify the sub resource name which the Azure Search Private Endpoint is able to connect to. Changing this forces a new resource to be created.
	SubresourceName pulumi.StringOutput `pulumi:"subresourceName"`
	// Specify the ID of the Shared Private Link Enabled Remote Resource which this Azure Search Private Endpoint should be connected to. Changing this forces a new resource to be created.
	//
	// > **NOTE:** The sub resource name should match with the type of the target resource id that's being specified.
	TargetResourceId pulumi.StringOutput `pulumi:"targetResourceId"`
}

// NewSharedPrivateLinkService registers a new resource with the given unique name, arguments, and options.
func NewSharedPrivateLinkService(ctx *pulumi.Context,
	name string, args *SharedPrivateLinkServiceArgs, opts ...pulumi.ResourceOption) (*SharedPrivateLinkService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SearchServiceId == nil {
		return nil, errors.New("invalid value for required argument 'SearchServiceId'")
	}
	if args.SubresourceName == nil {
		return nil, errors.New("invalid value for required argument 'SubresourceName'")
	}
	if args.TargetResourceId == nil {
		return nil, errors.New("invalid value for required argument 'TargetResourceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SharedPrivateLinkService
	err := ctx.RegisterResource("azure:search/sharedPrivateLinkService:SharedPrivateLinkService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSharedPrivateLinkService gets an existing SharedPrivateLinkService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSharedPrivateLinkService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SharedPrivateLinkServiceState, opts ...pulumi.ResourceOption) (*SharedPrivateLinkService, error) {
	var resource SharedPrivateLinkService
	err := ctx.ReadResource("azure:search/sharedPrivateLinkService:SharedPrivateLinkService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SharedPrivateLinkService resources.
type sharedPrivateLinkServiceState struct {
	// Specify the name of the Azure Search Shared Private Link Resource. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specify the request message for requesting approval of the Shared Private Link Enabled Remote Resource.
	RequestMessage *string `pulumi:"requestMessage"`
	// Specify the id of the Azure Search Service. Changing this forces a new resource to be created.
	SearchServiceId *string `pulumi:"searchServiceId"`
	// The status of a private endpoint connection. Possible values are Pending, Approved, Rejected or Disconnected.
	Status *string `pulumi:"status"`
	// Specify the sub resource name which the Azure Search Private Endpoint is able to connect to. Changing this forces a new resource to be created.
	SubresourceName *string `pulumi:"subresourceName"`
	// Specify the ID of the Shared Private Link Enabled Remote Resource which this Azure Search Private Endpoint should be connected to. Changing this forces a new resource to be created.
	//
	// > **NOTE:** The sub resource name should match with the type of the target resource id that's being specified.
	TargetResourceId *string `pulumi:"targetResourceId"`
}

type SharedPrivateLinkServiceState struct {
	// Specify the name of the Azure Search Shared Private Link Resource. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specify the request message for requesting approval of the Shared Private Link Enabled Remote Resource.
	RequestMessage pulumi.StringPtrInput
	// Specify the id of the Azure Search Service. Changing this forces a new resource to be created.
	SearchServiceId pulumi.StringPtrInput
	// The status of a private endpoint connection. Possible values are Pending, Approved, Rejected or Disconnected.
	Status pulumi.StringPtrInput
	// Specify the sub resource name which the Azure Search Private Endpoint is able to connect to. Changing this forces a new resource to be created.
	SubresourceName pulumi.StringPtrInput
	// Specify the ID of the Shared Private Link Enabled Remote Resource which this Azure Search Private Endpoint should be connected to. Changing this forces a new resource to be created.
	//
	// > **NOTE:** The sub resource name should match with the type of the target resource id that's being specified.
	TargetResourceId pulumi.StringPtrInput
}

func (SharedPrivateLinkServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*sharedPrivateLinkServiceState)(nil)).Elem()
}

type sharedPrivateLinkServiceArgs struct {
	// Specify the name of the Azure Search Shared Private Link Resource. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specify the request message for requesting approval of the Shared Private Link Enabled Remote Resource.
	RequestMessage *string `pulumi:"requestMessage"`
	// Specify the id of the Azure Search Service. Changing this forces a new resource to be created.
	SearchServiceId string `pulumi:"searchServiceId"`
	// Specify the sub resource name which the Azure Search Private Endpoint is able to connect to. Changing this forces a new resource to be created.
	SubresourceName string `pulumi:"subresourceName"`
	// Specify the ID of the Shared Private Link Enabled Remote Resource which this Azure Search Private Endpoint should be connected to. Changing this forces a new resource to be created.
	//
	// > **NOTE:** The sub resource name should match with the type of the target resource id that's being specified.
	TargetResourceId string `pulumi:"targetResourceId"`
}

// The set of arguments for constructing a SharedPrivateLinkService resource.
type SharedPrivateLinkServiceArgs struct {
	// Specify the name of the Azure Search Shared Private Link Resource. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specify the request message for requesting approval of the Shared Private Link Enabled Remote Resource.
	RequestMessage pulumi.StringPtrInput
	// Specify the id of the Azure Search Service. Changing this forces a new resource to be created.
	SearchServiceId pulumi.StringInput
	// Specify the sub resource name which the Azure Search Private Endpoint is able to connect to. Changing this forces a new resource to be created.
	SubresourceName pulumi.StringInput
	// Specify the ID of the Shared Private Link Enabled Remote Resource which this Azure Search Private Endpoint should be connected to. Changing this forces a new resource to be created.
	//
	// > **NOTE:** The sub resource name should match with the type of the target resource id that's being specified.
	TargetResourceId pulumi.StringInput
}

func (SharedPrivateLinkServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sharedPrivateLinkServiceArgs)(nil)).Elem()
}

type SharedPrivateLinkServiceInput interface {
	pulumi.Input

	ToSharedPrivateLinkServiceOutput() SharedPrivateLinkServiceOutput
	ToSharedPrivateLinkServiceOutputWithContext(ctx context.Context) SharedPrivateLinkServiceOutput
}

func (*SharedPrivateLinkService) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedPrivateLinkService)(nil)).Elem()
}

func (i *SharedPrivateLinkService) ToSharedPrivateLinkServiceOutput() SharedPrivateLinkServiceOutput {
	return i.ToSharedPrivateLinkServiceOutputWithContext(context.Background())
}

func (i *SharedPrivateLinkService) ToSharedPrivateLinkServiceOutputWithContext(ctx context.Context) SharedPrivateLinkServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedPrivateLinkServiceOutput)
}

// SharedPrivateLinkServiceArrayInput is an input type that accepts SharedPrivateLinkServiceArray and SharedPrivateLinkServiceArrayOutput values.
// You can construct a concrete instance of `SharedPrivateLinkServiceArrayInput` via:
//
//	SharedPrivateLinkServiceArray{ SharedPrivateLinkServiceArgs{...} }
type SharedPrivateLinkServiceArrayInput interface {
	pulumi.Input

	ToSharedPrivateLinkServiceArrayOutput() SharedPrivateLinkServiceArrayOutput
	ToSharedPrivateLinkServiceArrayOutputWithContext(context.Context) SharedPrivateLinkServiceArrayOutput
}

type SharedPrivateLinkServiceArray []SharedPrivateLinkServiceInput

func (SharedPrivateLinkServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SharedPrivateLinkService)(nil)).Elem()
}

func (i SharedPrivateLinkServiceArray) ToSharedPrivateLinkServiceArrayOutput() SharedPrivateLinkServiceArrayOutput {
	return i.ToSharedPrivateLinkServiceArrayOutputWithContext(context.Background())
}

func (i SharedPrivateLinkServiceArray) ToSharedPrivateLinkServiceArrayOutputWithContext(ctx context.Context) SharedPrivateLinkServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedPrivateLinkServiceArrayOutput)
}

// SharedPrivateLinkServiceMapInput is an input type that accepts SharedPrivateLinkServiceMap and SharedPrivateLinkServiceMapOutput values.
// You can construct a concrete instance of `SharedPrivateLinkServiceMapInput` via:
//
//	SharedPrivateLinkServiceMap{ "key": SharedPrivateLinkServiceArgs{...} }
type SharedPrivateLinkServiceMapInput interface {
	pulumi.Input

	ToSharedPrivateLinkServiceMapOutput() SharedPrivateLinkServiceMapOutput
	ToSharedPrivateLinkServiceMapOutputWithContext(context.Context) SharedPrivateLinkServiceMapOutput
}

type SharedPrivateLinkServiceMap map[string]SharedPrivateLinkServiceInput

func (SharedPrivateLinkServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SharedPrivateLinkService)(nil)).Elem()
}

func (i SharedPrivateLinkServiceMap) ToSharedPrivateLinkServiceMapOutput() SharedPrivateLinkServiceMapOutput {
	return i.ToSharedPrivateLinkServiceMapOutputWithContext(context.Background())
}

func (i SharedPrivateLinkServiceMap) ToSharedPrivateLinkServiceMapOutputWithContext(ctx context.Context) SharedPrivateLinkServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedPrivateLinkServiceMapOutput)
}

type SharedPrivateLinkServiceOutput struct{ *pulumi.OutputState }

func (SharedPrivateLinkServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedPrivateLinkService)(nil)).Elem()
}

func (o SharedPrivateLinkServiceOutput) ToSharedPrivateLinkServiceOutput() SharedPrivateLinkServiceOutput {
	return o
}

func (o SharedPrivateLinkServiceOutput) ToSharedPrivateLinkServiceOutputWithContext(ctx context.Context) SharedPrivateLinkServiceOutput {
	return o
}

// Specify the name of the Azure Search Shared Private Link Resource. Changing this forces a new resource to be created.
func (o SharedPrivateLinkServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedPrivateLinkService) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specify the request message for requesting approval of the Shared Private Link Enabled Remote Resource.
func (o SharedPrivateLinkServiceOutput) RequestMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SharedPrivateLinkService) pulumi.StringPtrOutput { return v.RequestMessage }).(pulumi.StringPtrOutput)
}

// Specify the id of the Azure Search Service. Changing this forces a new resource to be created.
func (o SharedPrivateLinkServiceOutput) SearchServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedPrivateLinkService) pulumi.StringOutput { return v.SearchServiceId }).(pulumi.StringOutput)
}

// The status of a private endpoint connection. Possible values are Pending, Approved, Rejected or Disconnected.
func (o SharedPrivateLinkServiceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedPrivateLinkService) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specify the sub resource name which the Azure Search Private Endpoint is able to connect to. Changing this forces a new resource to be created.
func (o SharedPrivateLinkServiceOutput) SubresourceName() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedPrivateLinkService) pulumi.StringOutput { return v.SubresourceName }).(pulumi.StringOutput)
}

// Specify the ID of the Shared Private Link Enabled Remote Resource which this Azure Search Private Endpoint should be connected to. Changing this forces a new resource to be created.
//
// > **NOTE:** The sub resource name should match with the type of the target resource id that's being specified.
func (o SharedPrivateLinkServiceOutput) TargetResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedPrivateLinkService) pulumi.StringOutput { return v.TargetResourceId }).(pulumi.StringOutput)
}

type SharedPrivateLinkServiceArrayOutput struct{ *pulumi.OutputState }

func (SharedPrivateLinkServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SharedPrivateLinkService)(nil)).Elem()
}

func (o SharedPrivateLinkServiceArrayOutput) ToSharedPrivateLinkServiceArrayOutput() SharedPrivateLinkServiceArrayOutput {
	return o
}

func (o SharedPrivateLinkServiceArrayOutput) ToSharedPrivateLinkServiceArrayOutputWithContext(ctx context.Context) SharedPrivateLinkServiceArrayOutput {
	return o
}

func (o SharedPrivateLinkServiceArrayOutput) Index(i pulumi.IntInput) SharedPrivateLinkServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SharedPrivateLinkService {
		return vs[0].([]*SharedPrivateLinkService)[vs[1].(int)]
	}).(SharedPrivateLinkServiceOutput)
}

type SharedPrivateLinkServiceMapOutput struct{ *pulumi.OutputState }

func (SharedPrivateLinkServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SharedPrivateLinkService)(nil)).Elem()
}

func (o SharedPrivateLinkServiceMapOutput) ToSharedPrivateLinkServiceMapOutput() SharedPrivateLinkServiceMapOutput {
	return o
}

func (o SharedPrivateLinkServiceMapOutput) ToSharedPrivateLinkServiceMapOutputWithContext(ctx context.Context) SharedPrivateLinkServiceMapOutput {
	return o
}

func (o SharedPrivateLinkServiceMapOutput) MapIndex(k pulumi.StringInput) SharedPrivateLinkServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SharedPrivateLinkService {
		return vs[0].(map[string]*SharedPrivateLinkService)[vs[1].(string)]
	}).(SharedPrivateLinkServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SharedPrivateLinkServiceInput)(nil)).Elem(), &SharedPrivateLinkService{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedPrivateLinkServiceArrayInput)(nil)).Elem(), SharedPrivateLinkServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedPrivateLinkServiceMapInput)(nil)).Elem(), SharedPrivateLinkServiceMap{})
	pulumi.RegisterOutputType(SharedPrivateLinkServiceOutput{})
	pulumi.RegisterOutputType(SharedPrivateLinkServiceArrayOutput{})
	pulumi.RegisterOutputType(SharedPrivateLinkServiceMapOutput{})
}
