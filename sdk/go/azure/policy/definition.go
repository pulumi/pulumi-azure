// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package policy

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a policy rule definition on a management group or your provider subscription.
//
// Policy definitions do not take effect until they are assigned to a scope using a Policy Assignment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/policy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := policy.NewDefinition(ctx, "policy", &policy.DefinitionArgs{
//				DisplayName: pulumi.String("acceptance test policy definition"),
//				Metadata:    pulumi.String("    {\n    \"category\": \"General\"\n    }\n\n\n"),
//				Mode:        pulumi.String("Indexed"),
//				Parameters: pulumi.String(` {
//	    "allowedLocations": {
//	      "type": "Array",
//	      "metadata": {
//	        "description": "The list of allowed locations for resources.",
//	        "displayName": "Allowed locations",
//	        "strongType": "location"
//	      }
//	    }
//	  }
//
// `),
//
//				PolicyRule: pulumi.String(` {
//	    "if": {
//	      "not": {
//	        "field": "location",
//	        "in": "[parameters('allowedLocations')]"
//	      }
//	    },
//	    "then": {
//	      "effect": "audit"
//	    }
//	  }
//
// `),
//
//				PolicyType: pulumi.String("Custom"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Policy Definitions can be imported using the `policy name`, e.g.
//
// ```sh
//
//	$ pulumi import azure:policy/definition:Definition examplePolicy /subscriptions/<SUBSCRIPTION_ID>/providers/Microsoft.Authorization/policyDefinitions/<POLICY_NAME>
//
// ```
//
//	or
//
// ```sh
//
//	$ pulumi import azure:policy/definition:Definition examplePolicy /providers/Microsoft.Management/managementgroups/<MANGAGEMENT_GROUP_ID>/providers/Microsoft.Authorization/policyDefinitions/<POLICY_NAME>
//
// ```
type Definition struct {
	pulumi.CustomResourceState

	// The description of the policy definition.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The display name of the policy definition.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The id of the Management Group where this policy should be defined. Changing this forces a new resource to be created.
	ManagementGroupId pulumi.StringPtrOutput `pulumi:"managementGroupId"`
	// The metadata for the policy definition. This is a JSON string representing additional metadata that should be stored with the policy definition.
	Metadata pulumi.StringOutput `pulumi:"metadata"`
	// The policy resource manager mode that allows you to specify which resource types will be evaluated. Possible values are `All`, `Indexed`, `Microsoft.ContainerService.Data`, `Microsoft.CustomerLockbox.Data`, `Microsoft.DataCatalog.Data`, `Microsoft.KeyVault.Data`, `Microsoft.Kubernetes.Data`, `Microsoft.MachineLearningServices.Data`, `Microsoft.Network.Data` and `Microsoft.Synapse.Data`.
	//
	// > **Note:** Other resource provider modes only support built-in policy definitions but may later become available in custom definitions, these include; `Microsoft.ContainerService.Data`, `Microsoft.CustomerLockbox.Data`, `Microsoft.DataCatalog.Data`, `Microsoft.KeyVault.Data`, `Microsoft.Kubernetes.Data`, `Microsoft.MachineLearningServices.Data`, `Microsoft.Network.Data` and `Microsoft.Synapse.Data`. [See here](https://docs.microsoft.com/en-us/azure/governance/policy/concepts/definition-structure#resource-provider-modes) for more details.
	Mode pulumi.StringOutput `pulumi:"mode"`
	// The name of the policy definition. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Parameters for the policy definition. This field is a JSON string that allows you to parameterize your policy definition.
	Parameters pulumi.StringPtrOutput `pulumi:"parameters"`
	// The policy rule for the policy definition. This is a JSON string representing the rule that contains an if and a then block.
	PolicyRule pulumi.StringPtrOutput `pulumi:"policyRule"`
	// The policy type. Possible values are `BuiltIn`, `Custom`, `NotSpecified` and `Static`. Changing this forces a new resource to be created.
	PolicyType pulumi.StringOutput `pulumi:"policyType"`
	// A list of role definition id extracted from `policyRule` required for remediation.
	RoleDefinitionIds pulumi.StringArrayOutput `pulumi:"roleDefinitionIds"`
}

// NewDefinition registers a new resource with the given unique name, arguments, and options.
func NewDefinition(ctx *pulumi.Context,
	name string, args *DefinitionArgs, opts ...pulumi.ResourceOption) (*Definition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Mode == nil {
		return nil, errors.New("invalid value for required argument 'Mode'")
	}
	if args.PolicyType == nil {
		return nil, errors.New("invalid value for required argument 'PolicyType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Definition
	err := ctx.RegisterResource("azure:policy/definition:Definition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDefinition gets an existing Definition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DefinitionState, opts ...pulumi.ResourceOption) (*Definition, error) {
	var resource Definition
	err := ctx.ReadResource("azure:policy/definition:Definition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Definition resources.
type definitionState struct {
	// The description of the policy definition.
	Description *string `pulumi:"description"`
	// The display name of the policy definition.
	DisplayName *string `pulumi:"displayName"`
	// The id of the Management Group where this policy should be defined. Changing this forces a new resource to be created.
	ManagementGroupId *string `pulumi:"managementGroupId"`
	// The metadata for the policy definition. This is a JSON string representing additional metadata that should be stored with the policy definition.
	Metadata *string `pulumi:"metadata"`
	// The policy resource manager mode that allows you to specify which resource types will be evaluated. Possible values are `All`, `Indexed`, `Microsoft.ContainerService.Data`, `Microsoft.CustomerLockbox.Data`, `Microsoft.DataCatalog.Data`, `Microsoft.KeyVault.Data`, `Microsoft.Kubernetes.Data`, `Microsoft.MachineLearningServices.Data`, `Microsoft.Network.Data` and `Microsoft.Synapse.Data`.
	//
	// > **Note:** Other resource provider modes only support built-in policy definitions but may later become available in custom definitions, these include; `Microsoft.ContainerService.Data`, `Microsoft.CustomerLockbox.Data`, `Microsoft.DataCatalog.Data`, `Microsoft.KeyVault.Data`, `Microsoft.Kubernetes.Data`, `Microsoft.MachineLearningServices.Data`, `Microsoft.Network.Data` and `Microsoft.Synapse.Data`. [See here](https://docs.microsoft.com/en-us/azure/governance/policy/concepts/definition-structure#resource-provider-modes) for more details.
	Mode *string `pulumi:"mode"`
	// The name of the policy definition. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Parameters for the policy definition. This field is a JSON string that allows you to parameterize your policy definition.
	Parameters *string `pulumi:"parameters"`
	// The policy rule for the policy definition. This is a JSON string representing the rule that contains an if and a then block.
	PolicyRule *string `pulumi:"policyRule"`
	// The policy type. Possible values are `BuiltIn`, `Custom`, `NotSpecified` and `Static`. Changing this forces a new resource to be created.
	PolicyType *string `pulumi:"policyType"`
	// A list of role definition id extracted from `policyRule` required for remediation.
	RoleDefinitionIds []string `pulumi:"roleDefinitionIds"`
}

type DefinitionState struct {
	// The description of the policy definition.
	Description pulumi.StringPtrInput
	// The display name of the policy definition.
	DisplayName pulumi.StringPtrInput
	// The id of the Management Group where this policy should be defined. Changing this forces a new resource to be created.
	ManagementGroupId pulumi.StringPtrInput
	// The metadata for the policy definition. This is a JSON string representing additional metadata that should be stored with the policy definition.
	Metadata pulumi.StringPtrInput
	// The policy resource manager mode that allows you to specify which resource types will be evaluated. Possible values are `All`, `Indexed`, `Microsoft.ContainerService.Data`, `Microsoft.CustomerLockbox.Data`, `Microsoft.DataCatalog.Data`, `Microsoft.KeyVault.Data`, `Microsoft.Kubernetes.Data`, `Microsoft.MachineLearningServices.Data`, `Microsoft.Network.Data` and `Microsoft.Synapse.Data`.
	//
	// > **Note:** Other resource provider modes only support built-in policy definitions but may later become available in custom definitions, these include; `Microsoft.ContainerService.Data`, `Microsoft.CustomerLockbox.Data`, `Microsoft.DataCatalog.Data`, `Microsoft.KeyVault.Data`, `Microsoft.Kubernetes.Data`, `Microsoft.MachineLearningServices.Data`, `Microsoft.Network.Data` and `Microsoft.Synapse.Data`. [See here](https://docs.microsoft.com/en-us/azure/governance/policy/concepts/definition-structure#resource-provider-modes) for more details.
	Mode pulumi.StringPtrInput
	// The name of the policy definition. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Parameters for the policy definition. This field is a JSON string that allows you to parameterize your policy definition.
	Parameters pulumi.StringPtrInput
	// The policy rule for the policy definition. This is a JSON string representing the rule that contains an if and a then block.
	PolicyRule pulumi.StringPtrInput
	// The policy type. Possible values are `BuiltIn`, `Custom`, `NotSpecified` and `Static`. Changing this forces a new resource to be created.
	PolicyType pulumi.StringPtrInput
	// A list of role definition id extracted from `policyRule` required for remediation.
	RoleDefinitionIds pulumi.StringArrayInput
}

func (DefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*definitionState)(nil)).Elem()
}

type definitionArgs struct {
	// The description of the policy definition.
	Description *string `pulumi:"description"`
	// The display name of the policy definition.
	DisplayName string `pulumi:"displayName"`
	// The id of the Management Group where this policy should be defined. Changing this forces a new resource to be created.
	ManagementGroupId *string `pulumi:"managementGroupId"`
	// The metadata for the policy definition. This is a JSON string representing additional metadata that should be stored with the policy definition.
	Metadata *string `pulumi:"metadata"`
	// The policy resource manager mode that allows you to specify which resource types will be evaluated. Possible values are `All`, `Indexed`, `Microsoft.ContainerService.Data`, `Microsoft.CustomerLockbox.Data`, `Microsoft.DataCatalog.Data`, `Microsoft.KeyVault.Data`, `Microsoft.Kubernetes.Data`, `Microsoft.MachineLearningServices.Data`, `Microsoft.Network.Data` and `Microsoft.Synapse.Data`.
	//
	// > **Note:** Other resource provider modes only support built-in policy definitions but may later become available in custom definitions, these include; `Microsoft.ContainerService.Data`, `Microsoft.CustomerLockbox.Data`, `Microsoft.DataCatalog.Data`, `Microsoft.KeyVault.Data`, `Microsoft.Kubernetes.Data`, `Microsoft.MachineLearningServices.Data`, `Microsoft.Network.Data` and `Microsoft.Synapse.Data`. [See here](https://docs.microsoft.com/en-us/azure/governance/policy/concepts/definition-structure#resource-provider-modes) for more details.
	Mode string `pulumi:"mode"`
	// The name of the policy definition. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Parameters for the policy definition. This field is a JSON string that allows you to parameterize your policy definition.
	Parameters *string `pulumi:"parameters"`
	// The policy rule for the policy definition. This is a JSON string representing the rule that contains an if and a then block.
	PolicyRule *string `pulumi:"policyRule"`
	// The policy type. Possible values are `BuiltIn`, `Custom`, `NotSpecified` and `Static`. Changing this forces a new resource to be created.
	PolicyType string `pulumi:"policyType"`
}

// The set of arguments for constructing a Definition resource.
type DefinitionArgs struct {
	// The description of the policy definition.
	Description pulumi.StringPtrInput
	// The display name of the policy definition.
	DisplayName pulumi.StringInput
	// The id of the Management Group where this policy should be defined. Changing this forces a new resource to be created.
	ManagementGroupId pulumi.StringPtrInput
	// The metadata for the policy definition. This is a JSON string representing additional metadata that should be stored with the policy definition.
	Metadata pulumi.StringPtrInput
	// The policy resource manager mode that allows you to specify which resource types will be evaluated. Possible values are `All`, `Indexed`, `Microsoft.ContainerService.Data`, `Microsoft.CustomerLockbox.Data`, `Microsoft.DataCatalog.Data`, `Microsoft.KeyVault.Data`, `Microsoft.Kubernetes.Data`, `Microsoft.MachineLearningServices.Data`, `Microsoft.Network.Data` and `Microsoft.Synapse.Data`.
	//
	// > **Note:** Other resource provider modes only support built-in policy definitions but may later become available in custom definitions, these include; `Microsoft.ContainerService.Data`, `Microsoft.CustomerLockbox.Data`, `Microsoft.DataCatalog.Data`, `Microsoft.KeyVault.Data`, `Microsoft.Kubernetes.Data`, `Microsoft.MachineLearningServices.Data`, `Microsoft.Network.Data` and `Microsoft.Synapse.Data`. [See here](https://docs.microsoft.com/en-us/azure/governance/policy/concepts/definition-structure#resource-provider-modes) for more details.
	Mode pulumi.StringInput
	// The name of the policy definition. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Parameters for the policy definition. This field is a JSON string that allows you to parameterize your policy definition.
	Parameters pulumi.StringPtrInput
	// The policy rule for the policy definition. This is a JSON string representing the rule that contains an if and a then block.
	PolicyRule pulumi.StringPtrInput
	// The policy type. Possible values are `BuiltIn`, `Custom`, `NotSpecified` and `Static`. Changing this forces a new resource to be created.
	PolicyType pulumi.StringInput
}

func (DefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*definitionArgs)(nil)).Elem()
}

type DefinitionInput interface {
	pulumi.Input

	ToDefinitionOutput() DefinitionOutput
	ToDefinitionOutputWithContext(ctx context.Context) DefinitionOutput
}

func (*Definition) ElementType() reflect.Type {
	return reflect.TypeOf((**Definition)(nil)).Elem()
}

func (i *Definition) ToDefinitionOutput() DefinitionOutput {
	return i.ToDefinitionOutputWithContext(context.Background())
}

func (i *Definition) ToDefinitionOutputWithContext(ctx context.Context) DefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefinitionOutput)
}

// DefinitionArrayInput is an input type that accepts DefinitionArray and DefinitionArrayOutput values.
// You can construct a concrete instance of `DefinitionArrayInput` via:
//
//	DefinitionArray{ DefinitionArgs{...} }
type DefinitionArrayInput interface {
	pulumi.Input

	ToDefinitionArrayOutput() DefinitionArrayOutput
	ToDefinitionArrayOutputWithContext(context.Context) DefinitionArrayOutput
}

type DefinitionArray []DefinitionInput

func (DefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Definition)(nil)).Elem()
}

func (i DefinitionArray) ToDefinitionArrayOutput() DefinitionArrayOutput {
	return i.ToDefinitionArrayOutputWithContext(context.Background())
}

func (i DefinitionArray) ToDefinitionArrayOutputWithContext(ctx context.Context) DefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefinitionArrayOutput)
}

// DefinitionMapInput is an input type that accepts DefinitionMap and DefinitionMapOutput values.
// You can construct a concrete instance of `DefinitionMapInput` via:
//
//	DefinitionMap{ "key": DefinitionArgs{...} }
type DefinitionMapInput interface {
	pulumi.Input

	ToDefinitionMapOutput() DefinitionMapOutput
	ToDefinitionMapOutputWithContext(context.Context) DefinitionMapOutput
}

type DefinitionMap map[string]DefinitionInput

func (DefinitionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Definition)(nil)).Elem()
}

func (i DefinitionMap) ToDefinitionMapOutput() DefinitionMapOutput {
	return i.ToDefinitionMapOutputWithContext(context.Background())
}

func (i DefinitionMap) ToDefinitionMapOutputWithContext(ctx context.Context) DefinitionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefinitionMapOutput)
}

type DefinitionOutput struct{ *pulumi.OutputState }

func (DefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Definition)(nil)).Elem()
}

func (o DefinitionOutput) ToDefinitionOutput() DefinitionOutput {
	return o
}

func (o DefinitionOutput) ToDefinitionOutputWithContext(ctx context.Context) DefinitionOutput {
	return o
}

// The description of the policy definition.
func (o DefinitionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Definition) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name of the policy definition.
func (o DefinitionOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Definition) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The id of the Management Group where this policy should be defined. Changing this forces a new resource to be created.
func (o DefinitionOutput) ManagementGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Definition) pulumi.StringPtrOutput { return v.ManagementGroupId }).(pulumi.StringPtrOutput)
}

// The metadata for the policy definition. This is a JSON string representing additional metadata that should be stored with the policy definition.
func (o DefinitionOutput) Metadata() pulumi.StringOutput {
	return o.ApplyT(func(v *Definition) pulumi.StringOutput { return v.Metadata }).(pulumi.StringOutput)
}

// The policy resource manager mode that allows you to specify which resource types will be evaluated. Possible values are `All`, `Indexed`, `Microsoft.ContainerService.Data`, `Microsoft.CustomerLockbox.Data`, `Microsoft.DataCatalog.Data`, `Microsoft.KeyVault.Data`, `Microsoft.Kubernetes.Data`, `Microsoft.MachineLearningServices.Data`, `Microsoft.Network.Data` and `Microsoft.Synapse.Data`.
//
// > **Note:** Other resource provider modes only support built-in policy definitions but may later become available in custom definitions, these include; `Microsoft.ContainerService.Data`, `Microsoft.CustomerLockbox.Data`, `Microsoft.DataCatalog.Data`, `Microsoft.KeyVault.Data`, `Microsoft.Kubernetes.Data`, `Microsoft.MachineLearningServices.Data`, `Microsoft.Network.Data` and `Microsoft.Synapse.Data`. [See here](https://docs.microsoft.com/en-us/azure/governance/policy/concepts/definition-structure#resource-provider-modes) for more details.
func (o DefinitionOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *Definition) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// The name of the policy definition. Changing this forces a new resource to be created.
func (o DefinitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Definition) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Parameters for the policy definition. This field is a JSON string that allows you to parameterize your policy definition.
func (o DefinitionOutput) Parameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Definition) pulumi.StringPtrOutput { return v.Parameters }).(pulumi.StringPtrOutput)
}

// The policy rule for the policy definition. This is a JSON string representing the rule that contains an if and a then block.
func (o DefinitionOutput) PolicyRule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Definition) pulumi.StringPtrOutput { return v.PolicyRule }).(pulumi.StringPtrOutput)
}

// The policy type. Possible values are `BuiltIn`, `Custom`, `NotSpecified` and `Static`. Changing this forces a new resource to be created.
func (o DefinitionOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v *Definition) pulumi.StringOutput { return v.PolicyType }).(pulumi.StringOutput)
}

// A list of role definition id extracted from `policyRule` required for remediation.
func (o DefinitionOutput) RoleDefinitionIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Definition) pulumi.StringArrayOutput { return v.RoleDefinitionIds }).(pulumi.StringArrayOutput)
}

type DefinitionArrayOutput struct{ *pulumi.OutputState }

func (DefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Definition)(nil)).Elem()
}

func (o DefinitionArrayOutput) ToDefinitionArrayOutput() DefinitionArrayOutput {
	return o
}

func (o DefinitionArrayOutput) ToDefinitionArrayOutputWithContext(ctx context.Context) DefinitionArrayOutput {
	return o
}

func (o DefinitionArrayOutput) Index(i pulumi.IntInput) DefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Definition {
		return vs[0].([]*Definition)[vs[1].(int)]
	}).(DefinitionOutput)
}

type DefinitionMapOutput struct{ *pulumi.OutputState }

func (DefinitionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Definition)(nil)).Elem()
}

func (o DefinitionMapOutput) ToDefinitionMapOutput() DefinitionMapOutput {
	return o
}

func (o DefinitionMapOutput) ToDefinitionMapOutputWithContext(ctx context.Context) DefinitionMapOutput {
	return o
}

func (o DefinitionMapOutput) MapIndex(k pulumi.StringInput) DefinitionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Definition {
		return vs[0].(map[string]*Definition)[vs[1].(string)]
	}).(DefinitionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DefinitionInput)(nil)).Elem(), &Definition{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefinitionArrayInput)(nil)).Elem(), DefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefinitionMapInput)(nil)).Elem(), DefinitionMap{})
	pulumi.RegisterOutputType(DefinitionOutput{})
	pulumi.RegisterOutputType(DefinitionArrayOutput{})
	pulumi.RegisterOutputType(DefinitionMapOutput{})
}
