// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package policy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about a Policy Definition, both custom and built in. Retrieves Policy Definitions from your current subscription by default.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/policy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := policy.GetPolicyDefintion(ctx, &policy.GetPolicyDefintionArgs{
//				DisplayName: pulumi.StringRef("Allowed resource types"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("id", example.Id)
//			return nil
//		})
//	}
//
// ```
func GetPolicyDefintion(ctx *pulumi.Context, args *GetPolicyDefintionArgs, opts ...pulumi.InvokeOption) (*GetPolicyDefintionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetPolicyDefintionResult
	err := ctx.Invoke("azure:policy/getPolicyDefintion:getPolicyDefintion", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPolicyDefintion.
type GetPolicyDefintionArgs struct {
	// Specifies the display name of the Policy Definition. Conflicts with `name`.
	//
	// > **NOTE** Looking up policies by `displayName` is not recommended by the Azure Policy team as the property is not unique nor immutable. As such errors may occur when there are multiple policy definitions with same display name or the display name is changed. To avoid these types of errors you may wish to use the `name` property instead.
	DisplayName *string `pulumi:"displayName"`
	// Only retrieve Policy Definitions from this Management Group.
	ManagementGroupName *string `pulumi:"managementGroupName"`
	// Specifies the name of the Policy Definition. Conflicts with `displayName`.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getPolicyDefintion.
type GetPolicyDefintionResult struct {
	// The Description of the Policy.
	Description string `pulumi:"description"`
	DisplayName string `pulumi:"displayName"`
	// The provider-assigned unique ID for this managed resource.
	Id                  string  `pulumi:"id"`
	ManagementGroupName *string `pulumi:"managementGroupName"`
	// Any Metadata defined in the Policy.
	Metadata string `pulumi:"metadata"`
	// The Mode of the Policy.
	Mode string `pulumi:"mode"`
	Name string `pulumi:"name"`
	// Any Parameters defined in the Policy.
	Parameters string `pulumi:"parameters"`
	// The Rule as defined (in JSON) in the Policy.
	PolicyRule string `pulumi:"policyRule"`
	// The Type of the Policy. Possible values are `BuiltIn`, `Custom` and `NotSpecified`.
	PolicyType string `pulumi:"policyType"`
	// A list of role definition id extracted from `policyRule` required for remediation.
	RoleDefinitionIds []string `pulumi:"roleDefinitionIds"`
	// The Type of Policy.
	Type string `pulumi:"type"`
}

func GetPolicyDefintionOutput(ctx *pulumi.Context, args GetPolicyDefintionOutputArgs, opts ...pulumi.InvokeOption) GetPolicyDefintionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetPolicyDefintionResult, error) {
			args := v.(GetPolicyDefintionArgs)
			r, err := GetPolicyDefintion(ctx, &args, opts...)
			var s GetPolicyDefintionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetPolicyDefintionResultOutput)
}

// A collection of arguments for invoking getPolicyDefintion.
type GetPolicyDefintionOutputArgs struct {
	// Specifies the display name of the Policy Definition. Conflicts with `name`.
	//
	// > **NOTE** Looking up policies by `displayName` is not recommended by the Azure Policy team as the property is not unique nor immutable. As such errors may occur when there are multiple policy definitions with same display name or the display name is changed. To avoid these types of errors you may wish to use the `name` property instead.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Only retrieve Policy Definitions from this Management Group.
	ManagementGroupName pulumi.StringPtrInput `pulumi:"managementGroupName"`
	// Specifies the name of the Policy Definition. Conflicts with `displayName`.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GetPolicyDefintionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyDefintionArgs)(nil)).Elem()
}

// A collection of values returned by getPolicyDefintion.
type GetPolicyDefintionResultOutput struct{ *pulumi.OutputState }

func (GetPolicyDefintionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyDefintionResult)(nil)).Elem()
}

func (o GetPolicyDefintionResultOutput) ToGetPolicyDefintionResultOutput() GetPolicyDefintionResultOutput {
	return o
}

func (o GetPolicyDefintionResultOutput) ToGetPolicyDefintionResultOutputWithContext(ctx context.Context) GetPolicyDefintionResultOutput {
	return o
}

// The Description of the Policy.
func (o GetPolicyDefintionResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyDefintionResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetPolicyDefintionResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyDefintionResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetPolicyDefintionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyDefintionResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetPolicyDefintionResultOutput) ManagementGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPolicyDefintionResult) *string { return v.ManagementGroupName }).(pulumi.StringPtrOutput)
}

// Any Metadata defined in the Policy.
func (o GetPolicyDefintionResultOutput) Metadata() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyDefintionResult) string { return v.Metadata }).(pulumi.StringOutput)
}

// The Mode of the Policy.
func (o GetPolicyDefintionResultOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyDefintionResult) string { return v.Mode }).(pulumi.StringOutput)
}

func (o GetPolicyDefintionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyDefintionResult) string { return v.Name }).(pulumi.StringOutput)
}

// Any Parameters defined in the Policy.
func (o GetPolicyDefintionResultOutput) Parameters() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyDefintionResult) string { return v.Parameters }).(pulumi.StringOutput)
}

// The Rule as defined (in JSON) in the Policy.
func (o GetPolicyDefintionResultOutput) PolicyRule() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyDefintionResult) string { return v.PolicyRule }).(pulumi.StringOutput)
}

// The Type of the Policy. Possible values are `BuiltIn`, `Custom` and `NotSpecified`.
func (o GetPolicyDefintionResultOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyDefintionResult) string { return v.PolicyType }).(pulumi.StringOutput)
}

// A list of role definition id extracted from `policyRule` required for remediation.
func (o GetPolicyDefintionResultOutput) RoleDefinitionIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPolicyDefintionResult) []string { return v.RoleDefinitionIds }).(pulumi.StringArrayOutput)
}

// The Type of Policy.
func (o GetPolicyDefintionResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyDefintionResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetPolicyDefintionResultOutput{})
}
