// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package policy

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Applies a Configuration Policy to a Virtual Machine.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/compute"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/network"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/policy"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West Europe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "exampleVirtualNetwork", &network.VirtualNetworkArgs{
// 			Location:          exampleResourceGroup.Location,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			AddressSpaces: pulumi.StringArray{
// 				pulumi.String("10.0.0.0/16"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleSubnet, err := network.NewSubnet(ctx, "exampleSubnet", &network.SubnetArgs{
// 			ResourceGroupName:  exampleResourceGroup.Name,
// 			VirtualNetworkName: exampleVirtualNetwork.Name,
// 			AddressPrefixes: pulumi.StringArray{
// 				pulumi.String("10.0.2.0/24"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleNetworkInterface, err := network.NewNetworkInterface(ctx, "exampleNetworkInterface", &network.NetworkInterfaceArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			Location:          exampleResourceGroup.Location,
// 			IpConfigurations: network.NetworkInterfaceIpConfigurationArray{
// 				&network.NetworkInterfaceIpConfigurationArgs{
// 					Name:                       pulumi.String("internal"),
// 					SubnetId:                   exampleSubnet.ID(),
// 					PrivateIpAddressAllocation: pulumi.String("Dynamic"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleWindowsVirtualMachine, err := compute.NewWindowsVirtualMachine(ctx, "exampleWindowsVirtualMachine", &compute.WindowsVirtualMachineArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			Location:          exampleResourceGroup.Location,
// 			Size:              pulumi.String("Standard_F2"),
// 			AdminUsername:     pulumi.String("adminuser"),
// 			AdminPassword:     pulumi.String(fmt.Sprintf("%v%v%v%v", "P@", "$", "$", "w0rd1234!")),
// 			NetworkInterfaceIds: pulumi.StringArray{
// 				exampleNetworkInterface.ID(),
// 			},
// 			Identity: &compute.WindowsVirtualMachineIdentityArgs{
// 				Type: pulumi.String("SystemAssigned"),
// 			},
// 			OsDisk: &compute.WindowsVirtualMachineOsDiskArgs{
// 				Caching:            pulumi.String("ReadWrite"),
// 				StorageAccountType: pulumi.String("Standard_LRS"),
// 			},
// 			SourceImageReference: &compute.WindowsVirtualMachineSourceImageReferenceArgs{
// 				Publisher: pulumi.String("MicrosoftWindowsServer"),
// 				Offer:     pulumi.String("WindowsServer"),
// 				Sku:       pulumi.String("2019-Datacenter"),
// 				Version:   pulumi.String("latest"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = compute.NewExtension(ctx, "exampleExtension", &compute.ExtensionArgs{
// 			VirtualMachineId:        exampleWindowsVirtualMachine.ID(),
// 			Publisher:               pulumi.String("Microsoft.GuestConfiguration"),
// 			Type:                    pulumi.String("ConfigurationforWindows"),
// 			TypeHandlerVersion:      pulumi.String("1.0"),
// 			AutoUpgradeMinorVersion: pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = policy.NewVirtualMachineConfigurationAssignment(ctx, "exampleVirtualMachineConfigurationAssignment", &policy.VirtualMachineConfigurationAssignmentArgs{
// 			Location:         exampleWindowsVirtualMachine.Location,
// 			VirtualMachineId: exampleWindowsVirtualMachine.ID(),
// 			Configuration: &policy.VirtualMachineConfigurationAssignmentConfigurationArgs{
// 				Name:    pulumi.String("AzureWindowsBaseline"),
// 				Version: pulumi.String("1.*"),
// 				Parameters: policy.VirtualMachineConfigurationAssignmentConfigurationParameterArray{
// 					&policy.VirtualMachineConfigurationAssignmentConfigurationParameterArgs{
// 						Name:  pulumi.String("Minimum Password Length;ExpectedValue"),
// 						Value: pulumi.String("16"),
// 					},
// 					&policy.VirtualMachineConfigurationAssignmentConfigurationParameterArgs{
// 						Name:  pulumi.String("Minimum Password Age;ExpectedValue"),
// 						Value: pulumi.String("0"),
// 					},
// 					&policy.VirtualMachineConfigurationAssignmentConfigurationParameterArgs{
// 						Name:  pulumi.String("Maximum Password Age;ExpectedValue"),
// 						Value: pulumi.String("30,45"),
// 					},
// 					&policy.VirtualMachineConfigurationAssignmentConfigurationParameterArgs{
// 						Name:  pulumi.String("Enforce Password History;ExpectedValue"),
// 						Value: pulumi.String("10"),
// 					},
// 					&policy.VirtualMachineConfigurationAssignmentConfigurationParameterArgs{
// 						Name:  pulumi.String("Password Must Meet Complexity Requirements;ExpectedValue"),
// 						Value: pulumi.String("1"),
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Policy Virtual Machine Configuration Assignments can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:policy/virtualMachineConfigurationAssignment:VirtualMachineConfigurationAssignment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Compute/virtualMachines/vm1/providers/Microsoft.GuestConfiguration/guestConfigurationAssignments/assignment1
// ```
type VirtualMachineConfigurationAssignment struct {
	pulumi.CustomResourceState

	// A `configuration` block as defined below.
	Configuration VirtualMachineConfigurationAssignmentConfigurationOutput `pulumi:"configuration"`
	// The Azure location where the Policy Virtual Machine Configuration Assignment should exist. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the Policy Virtual Machine Configuration Assignment. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The resource ID of the Policy Virtual Machine which this Guest Configuration Assignment should apply to. Changing this forces a new resource to be created.
	VirtualMachineId pulumi.StringOutput `pulumi:"virtualMachineId"`
}

// NewVirtualMachineConfigurationAssignment registers a new resource with the given unique name, arguments, and options.
func NewVirtualMachineConfigurationAssignment(ctx *pulumi.Context,
	name string, args *VirtualMachineConfigurationAssignmentArgs, opts ...pulumi.ResourceOption) (*VirtualMachineConfigurationAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.VirtualMachineId == nil {
		return nil, errors.New("invalid value for required argument 'VirtualMachineId'")
	}
	var resource VirtualMachineConfigurationAssignment
	err := ctx.RegisterResource("azure:policy/virtualMachineConfigurationAssignment:VirtualMachineConfigurationAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualMachineConfigurationAssignment gets an existing VirtualMachineConfigurationAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualMachineConfigurationAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualMachineConfigurationAssignmentState, opts ...pulumi.ResourceOption) (*VirtualMachineConfigurationAssignment, error) {
	var resource VirtualMachineConfigurationAssignment
	err := ctx.ReadResource("azure:policy/virtualMachineConfigurationAssignment:VirtualMachineConfigurationAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualMachineConfigurationAssignment resources.
type virtualMachineConfigurationAssignmentState struct {
	// A `configuration` block as defined below.
	Configuration *VirtualMachineConfigurationAssignmentConfiguration `pulumi:"configuration"`
	// The Azure location where the Policy Virtual Machine Configuration Assignment should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name of the Policy Virtual Machine Configuration Assignment. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The resource ID of the Policy Virtual Machine which this Guest Configuration Assignment should apply to. Changing this forces a new resource to be created.
	VirtualMachineId *string `pulumi:"virtualMachineId"`
}

type VirtualMachineConfigurationAssignmentState struct {
	// A `configuration` block as defined below.
	Configuration VirtualMachineConfigurationAssignmentConfigurationPtrInput
	// The Azure location where the Policy Virtual Machine Configuration Assignment should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name of the Policy Virtual Machine Configuration Assignment. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The resource ID of the Policy Virtual Machine which this Guest Configuration Assignment should apply to. Changing this forces a new resource to be created.
	VirtualMachineId pulumi.StringPtrInput
}

func (VirtualMachineConfigurationAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMachineConfigurationAssignmentState)(nil)).Elem()
}

type virtualMachineConfigurationAssignmentArgs struct {
	// A `configuration` block as defined below.
	Configuration VirtualMachineConfigurationAssignmentConfiguration `pulumi:"configuration"`
	// The Azure location where the Policy Virtual Machine Configuration Assignment should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name of the Policy Virtual Machine Configuration Assignment. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The resource ID of the Policy Virtual Machine which this Guest Configuration Assignment should apply to. Changing this forces a new resource to be created.
	VirtualMachineId string `pulumi:"virtualMachineId"`
}

// The set of arguments for constructing a VirtualMachineConfigurationAssignment resource.
type VirtualMachineConfigurationAssignmentArgs struct {
	// A `configuration` block as defined below.
	Configuration VirtualMachineConfigurationAssignmentConfigurationInput
	// The Azure location where the Policy Virtual Machine Configuration Assignment should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name of the Policy Virtual Machine Configuration Assignment. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The resource ID of the Policy Virtual Machine which this Guest Configuration Assignment should apply to. Changing this forces a new resource to be created.
	VirtualMachineId pulumi.StringInput
}

func (VirtualMachineConfigurationAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMachineConfigurationAssignmentArgs)(nil)).Elem()
}

type VirtualMachineConfigurationAssignmentInput interface {
	pulumi.Input

	ToVirtualMachineConfigurationAssignmentOutput() VirtualMachineConfigurationAssignmentOutput
	ToVirtualMachineConfigurationAssignmentOutputWithContext(ctx context.Context) VirtualMachineConfigurationAssignmentOutput
}

func (*VirtualMachineConfigurationAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineConfigurationAssignment)(nil))
}

func (i *VirtualMachineConfigurationAssignment) ToVirtualMachineConfigurationAssignmentOutput() VirtualMachineConfigurationAssignmentOutput {
	return i.ToVirtualMachineConfigurationAssignmentOutputWithContext(context.Background())
}

func (i *VirtualMachineConfigurationAssignment) ToVirtualMachineConfigurationAssignmentOutputWithContext(ctx context.Context) VirtualMachineConfigurationAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineConfigurationAssignmentOutput)
}

func (i *VirtualMachineConfigurationAssignment) ToVirtualMachineConfigurationAssignmentPtrOutput() VirtualMachineConfigurationAssignmentPtrOutput {
	return i.ToVirtualMachineConfigurationAssignmentPtrOutputWithContext(context.Background())
}

func (i *VirtualMachineConfigurationAssignment) ToVirtualMachineConfigurationAssignmentPtrOutputWithContext(ctx context.Context) VirtualMachineConfigurationAssignmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineConfigurationAssignmentPtrOutput)
}

type VirtualMachineConfigurationAssignmentPtrInput interface {
	pulumi.Input

	ToVirtualMachineConfigurationAssignmentPtrOutput() VirtualMachineConfigurationAssignmentPtrOutput
	ToVirtualMachineConfigurationAssignmentPtrOutputWithContext(ctx context.Context) VirtualMachineConfigurationAssignmentPtrOutput
}

type virtualMachineConfigurationAssignmentPtrType VirtualMachineConfigurationAssignmentArgs

func (*virtualMachineConfigurationAssignmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineConfigurationAssignment)(nil))
}

func (i *virtualMachineConfigurationAssignmentPtrType) ToVirtualMachineConfigurationAssignmentPtrOutput() VirtualMachineConfigurationAssignmentPtrOutput {
	return i.ToVirtualMachineConfigurationAssignmentPtrOutputWithContext(context.Background())
}

func (i *virtualMachineConfigurationAssignmentPtrType) ToVirtualMachineConfigurationAssignmentPtrOutputWithContext(ctx context.Context) VirtualMachineConfigurationAssignmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineConfigurationAssignmentPtrOutput)
}

// VirtualMachineConfigurationAssignmentArrayInput is an input type that accepts VirtualMachineConfigurationAssignmentArray and VirtualMachineConfigurationAssignmentArrayOutput values.
// You can construct a concrete instance of `VirtualMachineConfigurationAssignmentArrayInput` via:
//
//          VirtualMachineConfigurationAssignmentArray{ VirtualMachineConfigurationAssignmentArgs{...} }
type VirtualMachineConfigurationAssignmentArrayInput interface {
	pulumi.Input

	ToVirtualMachineConfigurationAssignmentArrayOutput() VirtualMachineConfigurationAssignmentArrayOutput
	ToVirtualMachineConfigurationAssignmentArrayOutputWithContext(context.Context) VirtualMachineConfigurationAssignmentArrayOutput
}

type VirtualMachineConfigurationAssignmentArray []VirtualMachineConfigurationAssignmentInput

func (VirtualMachineConfigurationAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*VirtualMachineConfigurationAssignment)(nil))
}

func (i VirtualMachineConfigurationAssignmentArray) ToVirtualMachineConfigurationAssignmentArrayOutput() VirtualMachineConfigurationAssignmentArrayOutput {
	return i.ToVirtualMachineConfigurationAssignmentArrayOutputWithContext(context.Background())
}

func (i VirtualMachineConfigurationAssignmentArray) ToVirtualMachineConfigurationAssignmentArrayOutputWithContext(ctx context.Context) VirtualMachineConfigurationAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineConfigurationAssignmentArrayOutput)
}

// VirtualMachineConfigurationAssignmentMapInput is an input type that accepts VirtualMachineConfigurationAssignmentMap and VirtualMachineConfigurationAssignmentMapOutput values.
// You can construct a concrete instance of `VirtualMachineConfigurationAssignmentMapInput` via:
//
//          VirtualMachineConfigurationAssignmentMap{ "key": VirtualMachineConfigurationAssignmentArgs{...} }
type VirtualMachineConfigurationAssignmentMapInput interface {
	pulumi.Input

	ToVirtualMachineConfigurationAssignmentMapOutput() VirtualMachineConfigurationAssignmentMapOutput
	ToVirtualMachineConfigurationAssignmentMapOutputWithContext(context.Context) VirtualMachineConfigurationAssignmentMapOutput
}

type VirtualMachineConfigurationAssignmentMap map[string]VirtualMachineConfigurationAssignmentInput

func (VirtualMachineConfigurationAssignmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*VirtualMachineConfigurationAssignment)(nil))
}

func (i VirtualMachineConfigurationAssignmentMap) ToVirtualMachineConfigurationAssignmentMapOutput() VirtualMachineConfigurationAssignmentMapOutput {
	return i.ToVirtualMachineConfigurationAssignmentMapOutputWithContext(context.Background())
}

func (i VirtualMachineConfigurationAssignmentMap) ToVirtualMachineConfigurationAssignmentMapOutputWithContext(ctx context.Context) VirtualMachineConfigurationAssignmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineConfigurationAssignmentMapOutput)
}

type VirtualMachineConfigurationAssignmentOutput struct {
	*pulumi.OutputState
}

func (VirtualMachineConfigurationAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineConfigurationAssignment)(nil))
}

func (o VirtualMachineConfigurationAssignmentOutput) ToVirtualMachineConfigurationAssignmentOutput() VirtualMachineConfigurationAssignmentOutput {
	return o
}

func (o VirtualMachineConfigurationAssignmentOutput) ToVirtualMachineConfigurationAssignmentOutputWithContext(ctx context.Context) VirtualMachineConfigurationAssignmentOutput {
	return o
}

func (o VirtualMachineConfigurationAssignmentOutput) ToVirtualMachineConfigurationAssignmentPtrOutput() VirtualMachineConfigurationAssignmentPtrOutput {
	return o.ToVirtualMachineConfigurationAssignmentPtrOutputWithContext(context.Background())
}

func (o VirtualMachineConfigurationAssignmentOutput) ToVirtualMachineConfigurationAssignmentPtrOutputWithContext(ctx context.Context) VirtualMachineConfigurationAssignmentPtrOutput {
	return o.ApplyT(func(v VirtualMachineConfigurationAssignment) *VirtualMachineConfigurationAssignment {
		return &v
	}).(VirtualMachineConfigurationAssignmentPtrOutput)
}

type VirtualMachineConfigurationAssignmentPtrOutput struct {
	*pulumi.OutputState
}

func (VirtualMachineConfigurationAssignmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineConfigurationAssignment)(nil))
}

func (o VirtualMachineConfigurationAssignmentPtrOutput) ToVirtualMachineConfigurationAssignmentPtrOutput() VirtualMachineConfigurationAssignmentPtrOutput {
	return o
}

func (o VirtualMachineConfigurationAssignmentPtrOutput) ToVirtualMachineConfigurationAssignmentPtrOutputWithContext(ctx context.Context) VirtualMachineConfigurationAssignmentPtrOutput {
	return o
}

type VirtualMachineConfigurationAssignmentArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineConfigurationAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineConfigurationAssignment)(nil))
}

func (o VirtualMachineConfigurationAssignmentArrayOutput) ToVirtualMachineConfigurationAssignmentArrayOutput() VirtualMachineConfigurationAssignmentArrayOutput {
	return o
}

func (o VirtualMachineConfigurationAssignmentArrayOutput) ToVirtualMachineConfigurationAssignmentArrayOutputWithContext(ctx context.Context) VirtualMachineConfigurationAssignmentArrayOutput {
	return o
}

func (o VirtualMachineConfigurationAssignmentArrayOutput) Index(i pulumi.IntInput) VirtualMachineConfigurationAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineConfigurationAssignment {
		return vs[0].([]VirtualMachineConfigurationAssignment)[vs[1].(int)]
	}).(VirtualMachineConfigurationAssignmentOutput)
}

type VirtualMachineConfigurationAssignmentMapOutput struct{ *pulumi.OutputState }

func (VirtualMachineConfigurationAssignmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VirtualMachineConfigurationAssignment)(nil))
}

func (o VirtualMachineConfigurationAssignmentMapOutput) ToVirtualMachineConfigurationAssignmentMapOutput() VirtualMachineConfigurationAssignmentMapOutput {
	return o
}

func (o VirtualMachineConfigurationAssignmentMapOutput) ToVirtualMachineConfigurationAssignmentMapOutputWithContext(ctx context.Context) VirtualMachineConfigurationAssignmentMapOutput {
	return o
}

func (o VirtualMachineConfigurationAssignmentMapOutput) MapIndex(k pulumi.StringInput) VirtualMachineConfigurationAssignmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) VirtualMachineConfigurationAssignment {
		return vs[0].(map[string]VirtualMachineConfigurationAssignment)[vs[1].(string)]
	}).(VirtualMachineConfigurationAssignmentOutput)
}

func init() {
	pulumi.RegisterOutputType(VirtualMachineConfigurationAssignmentOutput{})
	pulumi.RegisterOutputType(VirtualMachineConfigurationAssignmentPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineConfigurationAssignmentArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineConfigurationAssignmentMapOutput{})
}
