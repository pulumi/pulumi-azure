// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package logicapps

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Logic App Standard instance.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/logicapps"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := logicapps.LookupStandard(ctx, &logicapps.LookupStandardArgs{
//				Name:              "example-logic-app",
//				ResourceGroupName: "example-rg",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("id", example.Id)
//			return nil
//		})
//	}
//
// ```
func LookupStandard(ctx *pulumi.Context, args *LookupStandardArgs, opts ...pulumi.InvokeOption) (*LookupStandardResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupStandardResult
	err := ctx.Invoke("azure:logicapps/getStandard:getStandard", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStandard.
type LookupStandardArgs struct {
	// The name of the Logic App.
	Name string `pulumi:"name"`
	// The name of the Resource Group where the Logic App exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A `siteConfig` object as defined below.
	SiteConfig *GetStandardSiteConfig `pulumi:"siteConfig"`
}

// A collection of values returned by getStandard.
type LookupStandardResult struct {
	// The ID of the App Service Plan.
	AppServicePlanId string `pulumi:"appServicePlanId"`
	// A map of key-value pairs for [App Settings](https://docs.microsoft.com/azure/azure-functions/functions-app-settings) and custom values.
	AppSettings map[string]string `pulumi:"appSettings"`
	// Controls the allowed range for bundle versions.
	BundleVersion string `pulumi:"bundleVersion"`
	// Should the Logic App send session affinity cookies, which route client requests in the same session to the same instance.
	ClientAffinityEnabled bool `pulumi:"clientAffinityEnabled"`
	// The mode of the Logic App's client certificates requirement for incoming requests.
	ClientCertificateMode string `pulumi:"clientCertificateMode"`
	// A `connectionString` block as defined below.
	ConnectionStrings []GetStandardConnectionString `pulumi:"connectionStrings"`
	// The custom domain verification of the Logic App.
	CustomDomainVerificationId string `pulumi:"customDomainVerificationId"`
	// The default hostname of the Logic App.
	DefaultHostname string `pulumi:"defaultHostname"`
	// Whether the Logic App is enabled.
	Enabled bool `pulumi:"enabled"`
	// Whether the default FTP basic authentication publishing profile is enabled.
	FtpPublishBasicAuthenticationEnabled bool `pulumi:"ftpPublishBasicAuthenticationEnabled"`
	// Whether the Logic App can only be accessed via HTTPS.
	HttpsOnly bool `pulumi:"httpsOnly"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// An `identity` block as defined below.
	Identities []GetStandardIdentity `pulumi:"identities"`
	// The kind of the Logic App.
	Kind string `pulumi:"kind"`
	// The Azure location where the Logic App Standard exists.
	Location string `pulumi:"location"`
	// The name for this IP Restriction.
	Name string `pulumi:"name"`
	// The outbound IP addresses of the Logic App.
	OutboundIpAddresses string `pulumi:"outboundIpAddresses"`
	// The possible outbound IP addresses of the Logic App.
	PossibleOutboundIpAddresses string `pulumi:"possibleOutboundIpAddresses"`
	// Whether Public Network Access should be enabled or not.
	PublicNetworkAccess string `pulumi:"publicNetworkAccess"`
	ResourceGroupName   string `pulumi:"resourceGroupName"`
	// Whether the default SCM basic authentication publishing profile is enabled.
	ScmPublishBasicAuthenticationEnabled bool `pulumi:"scmPublishBasicAuthenticationEnabled"`
	// A `siteConfig` object as defined below.
	SiteConfig GetStandardSiteConfig `pulumi:"siteConfig"`
	// A `siteCredential` block as defined below, which contains the site-level credentials used to publish to this Logic App.
	SiteCredentials []GetStandardSiteCredential `pulumi:"siteCredentials"`
	// The access key which will be used to access the backend storage account for the Logic App.
	StorageAccountAccessKey string `pulumi:"storageAccountAccessKey"`
	// The backend storage account name which will be used by this Logic App (e.g. for Stateful workflows data).
	StorageAccountName string `pulumi:"storageAccountName"`
	// The name of the share used by the logic app.
	StorageAccountShareName string `pulumi:"storageAccountShareName"`
	// A mapping of tags assigned to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Whether the logic app should use the bundled extension package.
	UseExtensionBundle bool `pulumi:"useExtensionBundle"`
	// The runtime version associated with the Logic App.
	Version string `pulumi:"version"`
	// The Virtual Network Subnet ID used for this IP Restriction.
	VirtualNetworkSubnetId string `pulumi:"virtualNetworkSubnetId"`
}

func LookupStandardOutput(ctx *pulumi.Context, args LookupStandardOutputArgs, opts ...pulumi.InvokeOption) LookupStandardResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupStandardResultOutput, error) {
			args := v.(LookupStandardArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure:logicapps/getStandard:getStandard", args, LookupStandardResultOutput{}, options).(LookupStandardResultOutput), nil
		}).(LookupStandardResultOutput)
}

// A collection of arguments for invoking getStandard.
type LookupStandardOutputArgs struct {
	// The name of the Logic App.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Resource Group where the Logic App exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// A `siteConfig` object as defined below.
	SiteConfig GetStandardSiteConfigPtrInput `pulumi:"siteConfig"`
}

func (LookupStandardOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStandardArgs)(nil)).Elem()
}

// A collection of values returned by getStandard.
type LookupStandardResultOutput struct{ *pulumi.OutputState }

func (LookupStandardResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStandardResult)(nil)).Elem()
}

func (o LookupStandardResultOutput) ToLookupStandardResultOutput() LookupStandardResultOutput {
	return o
}

func (o LookupStandardResultOutput) ToLookupStandardResultOutputWithContext(ctx context.Context) LookupStandardResultOutput {
	return o
}

// The ID of the App Service Plan.
func (o LookupStandardResultOutput) AppServicePlanId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStandardResult) string { return v.AppServicePlanId }).(pulumi.StringOutput)
}

// A map of key-value pairs for [App Settings](https://docs.microsoft.com/azure/azure-functions/functions-app-settings) and custom values.
func (o LookupStandardResultOutput) AppSettings() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupStandardResult) map[string]string { return v.AppSettings }).(pulumi.StringMapOutput)
}

// Controls the allowed range for bundle versions.
func (o LookupStandardResultOutput) BundleVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStandardResult) string { return v.BundleVersion }).(pulumi.StringOutput)
}

// Should the Logic App send session affinity cookies, which route client requests in the same session to the same instance.
func (o LookupStandardResultOutput) ClientAffinityEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupStandardResult) bool { return v.ClientAffinityEnabled }).(pulumi.BoolOutput)
}

// The mode of the Logic App's client certificates requirement for incoming requests.
func (o LookupStandardResultOutput) ClientCertificateMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStandardResult) string { return v.ClientCertificateMode }).(pulumi.StringOutput)
}

// A `connectionString` block as defined below.
func (o LookupStandardResultOutput) ConnectionStrings() GetStandardConnectionStringArrayOutput {
	return o.ApplyT(func(v LookupStandardResult) []GetStandardConnectionString { return v.ConnectionStrings }).(GetStandardConnectionStringArrayOutput)
}

// The custom domain verification of the Logic App.
func (o LookupStandardResultOutput) CustomDomainVerificationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStandardResult) string { return v.CustomDomainVerificationId }).(pulumi.StringOutput)
}

// The default hostname of the Logic App.
func (o LookupStandardResultOutput) DefaultHostname() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStandardResult) string { return v.DefaultHostname }).(pulumi.StringOutput)
}

// Whether the Logic App is enabled.
func (o LookupStandardResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupStandardResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Whether the default FTP basic authentication publishing profile is enabled.
func (o LookupStandardResultOutput) FtpPublishBasicAuthenticationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupStandardResult) bool { return v.FtpPublishBasicAuthenticationEnabled }).(pulumi.BoolOutput)
}

// Whether the Logic App can only be accessed via HTTPS.
func (o LookupStandardResultOutput) HttpsOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupStandardResult) bool { return v.HttpsOnly }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupStandardResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStandardResult) string { return v.Id }).(pulumi.StringOutput)
}

// An `identity` block as defined below.
func (o LookupStandardResultOutput) Identities() GetStandardIdentityArrayOutput {
	return o.ApplyT(func(v LookupStandardResult) []GetStandardIdentity { return v.Identities }).(GetStandardIdentityArrayOutput)
}

// The kind of the Logic App.
func (o LookupStandardResultOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStandardResult) string { return v.Kind }).(pulumi.StringOutput)
}

// The Azure location where the Logic App Standard exists.
func (o LookupStandardResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStandardResult) string { return v.Location }).(pulumi.StringOutput)
}

// The name for this IP Restriction.
func (o LookupStandardResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStandardResult) string { return v.Name }).(pulumi.StringOutput)
}

// The outbound IP addresses of the Logic App.
func (o LookupStandardResultOutput) OutboundIpAddresses() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStandardResult) string { return v.OutboundIpAddresses }).(pulumi.StringOutput)
}

// The possible outbound IP addresses of the Logic App.
func (o LookupStandardResultOutput) PossibleOutboundIpAddresses() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStandardResult) string { return v.PossibleOutboundIpAddresses }).(pulumi.StringOutput)
}

// Whether Public Network Access should be enabled or not.
func (o LookupStandardResultOutput) PublicNetworkAccess() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStandardResult) string { return v.PublicNetworkAccess }).(pulumi.StringOutput)
}

func (o LookupStandardResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStandardResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// Whether the default SCM basic authentication publishing profile is enabled.
func (o LookupStandardResultOutput) ScmPublishBasicAuthenticationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupStandardResult) bool { return v.ScmPublishBasicAuthenticationEnabled }).(pulumi.BoolOutput)
}

// A `siteConfig` object as defined below.
func (o LookupStandardResultOutput) SiteConfig() GetStandardSiteConfigOutput {
	return o.ApplyT(func(v LookupStandardResult) GetStandardSiteConfig { return v.SiteConfig }).(GetStandardSiteConfigOutput)
}

// A `siteCredential` block as defined below, which contains the site-level credentials used to publish to this Logic App.
func (o LookupStandardResultOutput) SiteCredentials() GetStandardSiteCredentialArrayOutput {
	return o.ApplyT(func(v LookupStandardResult) []GetStandardSiteCredential { return v.SiteCredentials }).(GetStandardSiteCredentialArrayOutput)
}

// The access key which will be used to access the backend storage account for the Logic App.
func (o LookupStandardResultOutput) StorageAccountAccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStandardResult) string { return v.StorageAccountAccessKey }).(pulumi.StringOutput)
}

// The backend storage account name which will be used by this Logic App (e.g. for Stateful workflows data).
func (o LookupStandardResultOutput) StorageAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStandardResult) string { return v.StorageAccountName }).(pulumi.StringOutput)
}

// The name of the share used by the logic app.
func (o LookupStandardResultOutput) StorageAccountShareName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStandardResult) string { return v.StorageAccountShareName }).(pulumi.StringOutput)
}

// A mapping of tags assigned to the resource.
func (o LookupStandardResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupStandardResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Whether the logic app should use the bundled extension package.
func (o LookupStandardResultOutput) UseExtensionBundle() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupStandardResult) bool { return v.UseExtensionBundle }).(pulumi.BoolOutput)
}

// The runtime version associated with the Logic App.
func (o LookupStandardResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStandardResult) string { return v.Version }).(pulumi.StringOutput)
}

// The Virtual Network Subnet ID used for this IP Restriction.
func (o LookupStandardResultOutput) VirtualNetworkSubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStandardResult) string { return v.VirtualNetworkSubnetId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupStandardResultOutput{})
}
