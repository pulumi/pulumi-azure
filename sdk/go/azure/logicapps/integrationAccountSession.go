// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package logicapps

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Logic App Integration Account Session.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/logicapps"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleIntegrationAccount, err := logicapps.NewIntegrationAccount(ctx, "exampleIntegrationAccount", &logicapps.IntegrationAccountArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				SkuName:           pulumi.String("Basic"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = logicapps.NewIntegrationAccountSession(ctx, "exampleIntegrationAccountSession", &logicapps.IntegrationAccountSessionArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				IntegrationAccountName: exampleIntegrationAccount.Name,
//				Content:                pulumi.String(" {\n       \"controlNumber\": \"1234\"\n    }\n"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Logic App Integration Account Sessions can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:logicapps/integrationAccountSession:IntegrationAccountSession example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Logic/integrationAccounts/account1/sessions/session1
//
// ```
type IntegrationAccountSession struct {
	pulumi.CustomResourceState

	// The content of the Logic App Integration Account Session.
	Content pulumi.StringOutput `pulumi:"content"`
	// The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Session to be created.
	IntegrationAccountName pulumi.StringOutput `pulumi:"integrationAccountName"`
	// The name which should be used for this Logic App Integration Account Session. Changing this forces a new Logic App Integration Account Session to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Resource Group where the Logic App Integration Account Session should exist. Changing this forces a new Logic App Integration Account Session to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
}

// NewIntegrationAccountSession registers a new resource with the given unique name, arguments, and options.
func NewIntegrationAccountSession(ctx *pulumi.Context,
	name string, args *IntegrationAccountSessionArgs, opts ...pulumi.ResourceOption) (*IntegrationAccountSession, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.IntegrationAccountName == nil {
		return nil, errors.New("invalid value for required argument 'IntegrationAccountName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IntegrationAccountSession
	err := ctx.RegisterResource("azure:logicapps/integrationAccountSession:IntegrationAccountSession", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationAccountSession gets an existing IntegrationAccountSession resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationAccountSession(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationAccountSessionState, opts ...pulumi.ResourceOption) (*IntegrationAccountSession, error) {
	var resource IntegrationAccountSession
	err := ctx.ReadResource("azure:logicapps/integrationAccountSession:IntegrationAccountSession", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationAccountSession resources.
type integrationAccountSessionState struct {
	// The content of the Logic App Integration Account Session.
	Content *string `pulumi:"content"`
	// The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Session to be created.
	IntegrationAccountName *string `pulumi:"integrationAccountName"`
	// The name which should be used for this Logic App Integration Account Session. Changing this forces a new Logic App Integration Account Session to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Logic App Integration Account Session should exist. Changing this forces a new Logic App Integration Account Session to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
}

type IntegrationAccountSessionState struct {
	// The content of the Logic App Integration Account Session.
	Content pulumi.StringPtrInput
	// The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Session to be created.
	IntegrationAccountName pulumi.StringPtrInput
	// The name which should be used for this Logic App Integration Account Session. Changing this forces a new Logic App Integration Account Session to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Logic App Integration Account Session should exist. Changing this forces a new Logic App Integration Account Session to be created.
	ResourceGroupName pulumi.StringPtrInput
}

func (IntegrationAccountSessionState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationAccountSessionState)(nil)).Elem()
}

type integrationAccountSessionArgs struct {
	// The content of the Logic App Integration Account Session.
	Content string `pulumi:"content"`
	// The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Session to be created.
	IntegrationAccountName string `pulumi:"integrationAccountName"`
	// The name which should be used for this Logic App Integration Account Session. Changing this forces a new Logic App Integration Account Session to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Logic App Integration Account Session should exist. Changing this forces a new Logic App Integration Account Session to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a IntegrationAccountSession resource.
type IntegrationAccountSessionArgs struct {
	// The content of the Logic App Integration Account Session.
	Content pulumi.StringInput
	// The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Session to be created.
	IntegrationAccountName pulumi.StringInput
	// The name which should be used for this Logic App Integration Account Session. Changing this forces a new Logic App Integration Account Session to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Logic App Integration Account Session should exist. Changing this forces a new Logic App Integration Account Session to be created.
	ResourceGroupName pulumi.StringInput
}

func (IntegrationAccountSessionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationAccountSessionArgs)(nil)).Elem()
}

type IntegrationAccountSessionInput interface {
	pulumi.Input

	ToIntegrationAccountSessionOutput() IntegrationAccountSessionOutput
	ToIntegrationAccountSessionOutputWithContext(ctx context.Context) IntegrationAccountSessionOutput
}

func (*IntegrationAccountSession) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationAccountSession)(nil)).Elem()
}

func (i *IntegrationAccountSession) ToIntegrationAccountSessionOutput() IntegrationAccountSessionOutput {
	return i.ToIntegrationAccountSessionOutputWithContext(context.Background())
}

func (i *IntegrationAccountSession) ToIntegrationAccountSessionOutputWithContext(ctx context.Context) IntegrationAccountSessionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountSessionOutput)
}

// IntegrationAccountSessionArrayInput is an input type that accepts IntegrationAccountSessionArray and IntegrationAccountSessionArrayOutput values.
// You can construct a concrete instance of `IntegrationAccountSessionArrayInput` via:
//
//	IntegrationAccountSessionArray{ IntegrationAccountSessionArgs{...} }
type IntegrationAccountSessionArrayInput interface {
	pulumi.Input

	ToIntegrationAccountSessionArrayOutput() IntegrationAccountSessionArrayOutput
	ToIntegrationAccountSessionArrayOutputWithContext(context.Context) IntegrationAccountSessionArrayOutput
}

type IntegrationAccountSessionArray []IntegrationAccountSessionInput

func (IntegrationAccountSessionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationAccountSession)(nil)).Elem()
}

func (i IntegrationAccountSessionArray) ToIntegrationAccountSessionArrayOutput() IntegrationAccountSessionArrayOutput {
	return i.ToIntegrationAccountSessionArrayOutputWithContext(context.Background())
}

func (i IntegrationAccountSessionArray) ToIntegrationAccountSessionArrayOutputWithContext(ctx context.Context) IntegrationAccountSessionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountSessionArrayOutput)
}

// IntegrationAccountSessionMapInput is an input type that accepts IntegrationAccountSessionMap and IntegrationAccountSessionMapOutput values.
// You can construct a concrete instance of `IntegrationAccountSessionMapInput` via:
//
//	IntegrationAccountSessionMap{ "key": IntegrationAccountSessionArgs{...} }
type IntegrationAccountSessionMapInput interface {
	pulumi.Input

	ToIntegrationAccountSessionMapOutput() IntegrationAccountSessionMapOutput
	ToIntegrationAccountSessionMapOutputWithContext(context.Context) IntegrationAccountSessionMapOutput
}

type IntegrationAccountSessionMap map[string]IntegrationAccountSessionInput

func (IntegrationAccountSessionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationAccountSession)(nil)).Elem()
}

func (i IntegrationAccountSessionMap) ToIntegrationAccountSessionMapOutput() IntegrationAccountSessionMapOutput {
	return i.ToIntegrationAccountSessionMapOutputWithContext(context.Background())
}

func (i IntegrationAccountSessionMap) ToIntegrationAccountSessionMapOutputWithContext(ctx context.Context) IntegrationAccountSessionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountSessionMapOutput)
}

type IntegrationAccountSessionOutput struct{ *pulumi.OutputState }

func (IntegrationAccountSessionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationAccountSession)(nil)).Elem()
}

func (o IntegrationAccountSessionOutput) ToIntegrationAccountSessionOutput() IntegrationAccountSessionOutput {
	return o
}

func (o IntegrationAccountSessionOutput) ToIntegrationAccountSessionOutputWithContext(ctx context.Context) IntegrationAccountSessionOutput {
	return o
}

// The content of the Logic App Integration Account Session.
func (o IntegrationAccountSessionOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationAccountSession) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Session to be created.
func (o IntegrationAccountSessionOutput) IntegrationAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationAccountSession) pulumi.StringOutput { return v.IntegrationAccountName }).(pulumi.StringOutput)
}

// The name which should be used for this Logic App Integration Account Session. Changing this forces a new Logic App Integration Account Session to be created.
func (o IntegrationAccountSessionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationAccountSession) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the Resource Group where the Logic App Integration Account Session should exist. Changing this forces a new Logic App Integration Account Session to be created.
func (o IntegrationAccountSessionOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationAccountSession) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

type IntegrationAccountSessionArrayOutput struct{ *pulumi.OutputState }

func (IntegrationAccountSessionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationAccountSession)(nil)).Elem()
}

func (o IntegrationAccountSessionArrayOutput) ToIntegrationAccountSessionArrayOutput() IntegrationAccountSessionArrayOutput {
	return o
}

func (o IntegrationAccountSessionArrayOutput) ToIntegrationAccountSessionArrayOutputWithContext(ctx context.Context) IntegrationAccountSessionArrayOutput {
	return o
}

func (o IntegrationAccountSessionArrayOutput) Index(i pulumi.IntInput) IntegrationAccountSessionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IntegrationAccountSession {
		return vs[0].([]*IntegrationAccountSession)[vs[1].(int)]
	}).(IntegrationAccountSessionOutput)
}

type IntegrationAccountSessionMapOutput struct{ *pulumi.OutputState }

func (IntegrationAccountSessionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationAccountSession)(nil)).Elem()
}

func (o IntegrationAccountSessionMapOutput) ToIntegrationAccountSessionMapOutput() IntegrationAccountSessionMapOutput {
	return o
}

func (o IntegrationAccountSessionMapOutput) ToIntegrationAccountSessionMapOutputWithContext(ctx context.Context) IntegrationAccountSessionMapOutput {
	return o
}

func (o IntegrationAccountSessionMapOutput) MapIndex(k pulumi.StringInput) IntegrationAccountSessionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IntegrationAccountSession {
		return vs[0].(map[string]*IntegrationAccountSession)[vs[1].(string)]
	}).(IntegrationAccountSessionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationAccountSessionInput)(nil)).Elem(), &IntegrationAccountSession{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationAccountSessionArrayInput)(nil)).Elem(), IntegrationAccountSessionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationAccountSessionMapInput)(nil)).Elem(), IntegrationAccountSessionMap{})
	pulumi.RegisterOutputType(IntegrationAccountSessionOutput{})
	pulumi.RegisterOutputType(IntegrationAccountSessionArrayOutput{})
	pulumi.RegisterOutputType(IntegrationAccountSessionMapOutput{})
}
