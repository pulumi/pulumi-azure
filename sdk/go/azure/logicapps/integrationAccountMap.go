// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package logicapps

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Logic App Integration Account Map.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"os"
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/logicapps"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func readFileOrPanic(path string) pulumi.StringPtrInput {
//		data, err := os.ReadFile(path)
//		if err != nil {
//			panic(err.Error())
//		}
//		return pulumi.String(string(data))
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleIntegrationAccount, err := logicapps.NewIntegrationAccount(ctx, "exampleIntegrationAccount", &logicapps.IntegrationAccountArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				SkuName:           pulumi.String("Standard"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = logicapps.NewIntegrationAccountMap(ctx, "exampleIntegrationAccountMap", &logicapps.IntegrationAccountMapArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				IntegrationAccountName: exampleIntegrationAccount.Name,
//				MapType:                pulumi.String("Xslt"),
//				Content:                readFileOrPanic("testdata/integration_account_map_content.xsd"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Logic App Integration Account Maps can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:logicapps/integrationAccountMap:IntegrationAccountMap example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Logic/integrationAccounts/account1/maps/map1
//
// ```
type IntegrationAccountMapResource struct {
	pulumi.CustomResourceState

	// The content of the Logic App Integration Account Map.
	Content pulumi.StringOutput `pulumi:"content"`
	// The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Map to be created.
	IntegrationAccountName pulumi.StringOutput `pulumi:"integrationAccountName"`
	// The type of the Logic App Integration Account Map. Possible values are `Liquid`, `NotSpecified`, `Xslt`, `Xslt30` and `Xslt20`.
	MapType pulumi.StringOutput `pulumi:"mapType"`
	// The metadata of the Logic App Integration Account Map.
	Metadata pulumi.StringMapOutput `pulumi:"metadata"`
	// The name which should be used for this Logic App Integration Account Map. Changing this forces a new Logic App Integration Account Map to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Resource Group where the Logic App Integration Account Map should exist. Changing this forces a new Logic App Integration Account Map to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
}

// NewIntegrationAccountMapResource registers a new resource with the given unique name, arguments, and options.
func NewIntegrationAccountMapResource(ctx *pulumi.Context,
	name string, args *IntegrationAccountMapResourceArgs, opts ...pulumi.ResourceOption) (*IntegrationAccountMapResource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.IntegrationAccountName == nil {
		return nil, errors.New("invalid value for required argument 'IntegrationAccountName'")
	}
	if args.MapType == nil {
		return nil, errors.New("invalid value for required argument 'MapType'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IntegrationAccountMapResource
	err := ctx.RegisterResource("azure:logicapps/integrationAccountMap:IntegrationAccountMap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationAccountMapResource gets an existing IntegrationAccountMapResource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationAccountMapResource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationAccountMapResourceState, opts ...pulumi.ResourceOption) (*IntegrationAccountMapResource, error) {
	var resource IntegrationAccountMapResource
	err := ctx.ReadResource("azure:logicapps/integrationAccountMap:IntegrationAccountMap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationAccountMapResource resources.
type integrationAccountMapResourceState struct {
	// The content of the Logic App Integration Account Map.
	Content *string `pulumi:"content"`
	// The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Map to be created.
	IntegrationAccountName *string `pulumi:"integrationAccountName"`
	// The type of the Logic App Integration Account Map. Possible values are `Liquid`, `NotSpecified`, `Xslt`, `Xslt30` and `Xslt20`.
	MapType *string `pulumi:"mapType"`
	// The metadata of the Logic App Integration Account Map.
	Metadata map[string]string `pulumi:"metadata"`
	// The name which should be used for this Logic App Integration Account Map. Changing this forces a new Logic App Integration Account Map to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Logic App Integration Account Map should exist. Changing this forces a new Logic App Integration Account Map to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
}

type IntegrationAccountMapResourceState struct {
	// The content of the Logic App Integration Account Map.
	Content pulumi.StringPtrInput
	// The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Map to be created.
	IntegrationAccountName pulumi.StringPtrInput
	// The type of the Logic App Integration Account Map. Possible values are `Liquid`, `NotSpecified`, `Xslt`, `Xslt30` and `Xslt20`.
	MapType pulumi.StringPtrInput
	// The metadata of the Logic App Integration Account Map.
	Metadata pulumi.StringMapInput
	// The name which should be used for this Logic App Integration Account Map. Changing this forces a new Logic App Integration Account Map to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Logic App Integration Account Map should exist. Changing this forces a new Logic App Integration Account Map to be created.
	ResourceGroupName pulumi.StringPtrInput
}

func (IntegrationAccountMapResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationAccountMapResourceState)(nil)).Elem()
}

type integrationAccountMapResourceArgs struct {
	// The content of the Logic App Integration Account Map.
	Content string `pulumi:"content"`
	// The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Map to be created.
	IntegrationAccountName string `pulumi:"integrationAccountName"`
	// The type of the Logic App Integration Account Map. Possible values are `Liquid`, `NotSpecified`, `Xslt`, `Xslt30` and `Xslt20`.
	MapType string `pulumi:"mapType"`
	// The metadata of the Logic App Integration Account Map.
	Metadata map[string]string `pulumi:"metadata"`
	// The name which should be used for this Logic App Integration Account Map. Changing this forces a new Logic App Integration Account Map to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Logic App Integration Account Map should exist. Changing this forces a new Logic App Integration Account Map to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a IntegrationAccountMapResource resource.
type IntegrationAccountMapResourceArgs struct {
	// The content of the Logic App Integration Account Map.
	Content pulumi.StringInput
	// The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Map to be created.
	IntegrationAccountName pulumi.StringInput
	// The type of the Logic App Integration Account Map. Possible values are `Liquid`, `NotSpecified`, `Xslt`, `Xslt30` and `Xslt20`.
	MapType pulumi.StringInput
	// The metadata of the Logic App Integration Account Map.
	Metadata pulumi.StringMapInput
	// The name which should be used for this Logic App Integration Account Map. Changing this forces a new Logic App Integration Account Map to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Logic App Integration Account Map should exist. Changing this forces a new Logic App Integration Account Map to be created.
	ResourceGroupName pulumi.StringInput
}

func (IntegrationAccountMapResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationAccountMapResourceArgs)(nil)).Elem()
}

type IntegrationAccountMapResourceInput interface {
	pulumi.Input

	ToIntegrationAccountMapResourceOutput() IntegrationAccountMapResourceOutput
	ToIntegrationAccountMapResourceOutputWithContext(ctx context.Context) IntegrationAccountMapResourceOutput
}

func (*IntegrationAccountMapResource) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationAccountMapResource)(nil)).Elem()
}

func (i *IntegrationAccountMapResource) ToIntegrationAccountMapResourceOutput() IntegrationAccountMapResourceOutput {
	return i.ToIntegrationAccountMapResourceOutputWithContext(context.Background())
}

func (i *IntegrationAccountMapResource) ToIntegrationAccountMapResourceOutputWithContext(ctx context.Context) IntegrationAccountMapResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountMapResourceOutput)
}

// IntegrationAccountMapResourceArrayInput is an input type that accepts IntegrationAccountMapResourceArray and IntegrationAccountMapResourceArrayOutput values.
// You can construct a concrete instance of `IntegrationAccountMapResourceArrayInput` via:
//
//	IntegrationAccountMapResourceArray{ IntegrationAccountMapResourceArgs{...} }
type IntegrationAccountMapResourceArrayInput interface {
	pulumi.Input

	ToIntegrationAccountMapResourceArrayOutput() IntegrationAccountMapResourceArrayOutput
	ToIntegrationAccountMapResourceArrayOutputWithContext(context.Context) IntegrationAccountMapResourceArrayOutput
}

type IntegrationAccountMapResourceArray []IntegrationAccountMapResourceInput

func (IntegrationAccountMapResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationAccountMapResource)(nil)).Elem()
}

func (i IntegrationAccountMapResourceArray) ToIntegrationAccountMapResourceArrayOutput() IntegrationAccountMapResourceArrayOutput {
	return i.ToIntegrationAccountMapResourceArrayOutputWithContext(context.Background())
}

func (i IntegrationAccountMapResourceArray) ToIntegrationAccountMapResourceArrayOutputWithContext(ctx context.Context) IntegrationAccountMapResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountMapResourceArrayOutput)
}

// IntegrationAccountMapResourceMapInput is an input type that accepts IntegrationAccountMapResourceMap and IntegrationAccountMapResourceMapOutput values.
// You can construct a concrete instance of `IntegrationAccountMapResourceMapInput` via:
//
//	IntegrationAccountMapResourceMap{ "key": IntegrationAccountMapResourceArgs{...} }
type IntegrationAccountMapResourceMapInput interface {
	pulumi.Input

	ToIntegrationAccountMapResourceMapOutput() IntegrationAccountMapResourceMapOutput
	ToIntegrationAccountMapResourceMapOutputWithContext(context.Context) IntegrationAccountMapResourceMapOutput
}

type IntegrationAccountMapResourceMap map[string]IntegrationAccountMapResourceInput

func (IntegrationAccountMapResourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationAccountMapResource)(nil)).Elem()
}

func (i IntegrationAccountMapResourceMap) ToIntegrationAccountMapResourceMapOutput() IntegrationAccountMapResourceMapOutput {
	return i.ToIntegrationAccountMapResourceMapOutputWithContext(context.Background())
}

func (i IntegrationAccountMapResourceMap) ToIntegrationAccountMapResourceMapOutputWithContext(ctx context.Context) IntegrationAccountMapResourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountMapResourceMapOutput)
}

type IntegrationAccountMapResourceOutput struct{ *pulumi.OutputState }

func (IntegrationAccountMapResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationAccountMapResource)(nil)).Elem()
}

func (o IntegrationAccountMapResourceOutput) ToIntegrationAccountMapResourceOutput() IntegrationAccountMapResourceOutput {
	return o
}

func (o IntegrationAccountMapResourceOutput) ToIntegrationAccountMapResourceOutputWithContext(ctx context.Context) IntegrationAccountMapResourceOutput {
	return o
}

// The content of the Logic App Integration Account Map.
func (o IntegrationAccountMapResourceOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationAccountMapResource) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Map to be created.
func (o IntegrationAccountMapResourceOutput) IntegrationAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationAccountMapResource) pulumi.StringOutput { return v.IntegrationAccountName }).(pulumi.StringOutput)
}

// The type of the Logic App Integration Account Map. Possible values are `Liquid`, `NotSpecified`, `Xslt`, `Xslt30` and `Xslt20`.
func (o IntegrationAccountMapResourceOutput) MapType() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationAccountMapResource) pulumi.StringOutput { return v.MapType }).(pulumi.StringOutput)
}

// The metadata of the Logic App Integration Account Map.
func (o IntegrationAccountMapResourceOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *IntegrationAccountMapResource) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

// The name which should be used for this Logic App Integration Account Map. Changing this forces a new Logic App Integration Account Map to be created.
func (o IntegrationAccountMapResourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationAccountMapResource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the Resource Group where the Logic App Integration Account Map should exist. Changing this forces a new Logic App Integration Account Map to be created.
func (o IntegrationAccountMapResourceOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationAccountMapResource) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

type IntegrationAccountMapResourceArrayOutput struct{ *pulumi.OutputState }

func (IntegrationAccountMapResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationAccountMapResource)(nil)).Elem()
}

func (o IntegrationAccountMapResourceArrayOutput) ToIntegrationAccountMapResourceArrayOutput() IntegrationAccountMapResourceArrayOutput {
	return o
}

func (o IntegrationAccountMapResourceArrayOutput) ToIntegrationAccountMapResourceArrayOutputWithContext(ctx context.Context) IntegrationAccountMapResourceArrayOutput {
	return o
}

func (o IntegrationAccountMapResourceArrayOutput) Index(i pulumi.IntInput) IntegrationAccountMapResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IntegrationAccountMapResource {
		return vs[0].([]*IntegrationAccountMapResource)[vs[1].(int)]
	}).(IntegrationAccountMapResourceOutput)
}

type IntegrationAccountMapResourceMapOutput struct{ *pulumi.OutputState }

func (IntegrationAccountMapResourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationAccountMapResource)(nil)).Elem()
}

func (o IntegrationAccountMapResourceMapOutput) ToIntegrationAccountMapResourceMapOutput() IntegrationAccountMapResourceMapOutput {
	return o
}

func (o IntegrationAccountMapResourceMapOutput) ToIntegrationAccountMapResourceMapOutputWithContext(ctx context.Context) IntegrationAccountMapResourceMapOutput {
	return o
}

func (o IntegrationAccountMapResourceMapOutput) MapIndex(k pulumi.StringInput) IntegrationAccountMapResourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IntegrationAccountMapResource {
		return vs[0].(map[string]*IntegrationAccountMapResource)[vs[1].(string)]
	}).(IntegrationAccountMapResourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationAccountMapResourceInput)(nil)).Elem(), &IntegrationAccountMapResource{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationAccountMapResourceArrayInput)(nil)).Elem(), IntegrationAccountMapResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationAccountMapResourceMapInput)(nil)).Elem(), IntegrationAccountMapResourceMap{})
	pulumi.RegisterOutputType(IntegrationAccountMapResourceOutput{})
	pulumi.RegisterOutputType(IntegrationAccountMapResourceArrayOutput{})
	pulumi.RegisterOutputType(IntegrationAccountMapResourceMapOutput{})
}
