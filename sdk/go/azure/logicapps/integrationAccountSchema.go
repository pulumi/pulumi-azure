// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package logicapps

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Logic App Integration Account Schema.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"os"
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/logicapps"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func readFileOrPanic(path string) pulumi.StringPtrInput {
//		data, err := os.ReadFile(path)
//		if err != nil {
//			panic(err.Error())
//		}
//		return pulumi.String(string(data))
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleIntegrationAccount, err := logicapps.NewIntegrationAccount(ctx, "exampleIntegrationAccount", &logicapps.IntegrationAccountArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				SkuName:           pulumi.String("Basic"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = logicapps.NewIntegrationAccountSchema(ctx, "exampleIntegrationAccountSchema", &logicapps.IntegrationAccountSchemaArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				IntegrationAccountName: exampleIntegrationAccount.Name,
//				Content:                readFileOrPanic("testdata/integration_account_schema_content.xsd"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Logic App Integration Account Schemas can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:logicapps/integrationAccountSchema:IntegrationAccountSchema example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Logic/integrationAccounts/account1/schemas/schema1
//
// ```
type IntegrationAccountSchema struct {
	pulumi.CustomResourceState

	// The content of the Logic App Integration Account Schema.
	Content pulumi.StringOutput `pulumi:"content"`
	// The file name of the Logic App Integration Account Schema.
	FileName pulumi.StringPtrOutput `pulumi:"fileName"`
	// The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Schema to be created.
	IntegrationAccountName pulumi.StringOutput `pulumi:"integrationAccountName"`
	// The metadata of the Logic App Integration Account Schema.
	Metadata pulumi.StringPtrOutput `pulumi:"metadata"`
	// The name which should be used for this Logic App Integration Account Schema. Changing this forces a new Logic App Integration Account Schema to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Resource Group where the Logic App Integration Account Schema should exist. Changing this forces a new Logic App Integration Account Schema to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
}

// NewIntegrationAccountSchema registers a new resource with the given unique name, arguments, and options.
func NewIntegrationAccountSchema(ctx *pulumi.Context,
	name string, args *IntegrationAccountSchemaArgs, opts ...pulumi.ResourceOption) (*IntegrationAccountSchema, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.IntegrationAccountName == nil {
		return nil, errors.New("invalid value for required argument 'IntegrationAccountName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IntegrationAccountSchema
	err := ctx.RegisterResource("azure:logicapps/integrationAccountSchema:IntegrationAccountSchema", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationAccountSchema gets an existing IntegrationAccountSchema resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationAccountSchema(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationAccountSchemaState, opts ...pulumi.ResourceOption) (*IntegrationAccountSchema, error) {
	var resource IntegrationAccountSchema
	err := ctx.ReadResource("azure:logicapps/integrationAccountSchema:IntegrationAccountSchema", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationAccountSchema resources.
type integrationAccountSchemaState struct {
	// The content of the Logic App Integration Account Schema.
	Content *string `pulumi:"content"`
	// The file name of the Logic App Integration Account Schema.
	FileName *string `pulumi:"fileName"`
	// The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Schema to be created.
	IntegrationAccountName *string `pulumi:"integrationAccountName"`
	// The metadata of the Logic App Integration Account Schema.
	Metadata *string `pulumi:"metadata"`
	// The name which should be used for this Logic App Integration Account Schema. Changing this forces a new Logic App Integration Account Schema to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Logic App Integration Account Schema should exist. Changing this forces a new Logic App Integration Account Schema to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
}

type IntegrationAccountSchemaState struct {
	// The content of the Logic App Integration Account Schema.
	Content pulumi.StringPtrInput
	// The file name of the Logic App Integration Account Schema.
	FileName pulumi.StringPtrInput
	// The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Schema to be created.
	IntegrationAccountName pulumi.StringPtrInput
	// The metadata of the Logic App Integration Account Schema.
	Metadata pulumi.StringPtrInput
	// The name which should be used for this Logic App Integration Account Schema. Changing this forces a new Logic App Integration Account Schema to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Logic App Integration Account Schema should exist. Changing this forces a new Logic App Integration Account Schema to be created.
	ResourceGroupName pulumi.StringPtrInput
}

func (IntegrationAccountSchemaState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationAccountSchemaState)(nil)).Elem()
}

type integrationAccountSchemaArgs struct {
	// The content of the Logic App Integration Account Schema.
	Content string `pulumi:"content"`
	// The file name of the Logic App Integration Account Schema.
	FileName *string `pulumi:"fileName"`
	// The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Schema to be created.
	IntegrationAccountName string `pulumi:"integrationAccountName"`
	// The metadata of the Logic App Integration Account Schema.
	Metadata *string `pulumi:"metadata"`
	// The name which should be used for this Logic App Integration Account Schema. Changing this forces a new Logic App Integration Account Schema to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Logic App Integration Account Schema should exist. Changing this forces a new Logic App Integration Account Schema to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a IntegrationAccountSchema resource.
type IntegrationAccountSchemaArgs struct {
	// The content of the Logic App Integration Account Schema.
	Content pulumi.StringInput
	// The file name of the Logic App Integration Account Schema.
	FileName pulumi.StringPtrInput
	// The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Schema to be created.
	IntegrationAccountName pulumi.StringInput
	// The metadata of the Logic App Integration Account Schema.
	Metadata pulumi.StringPtrInput
	// The name which should be used for this Logic App Integration Account Schema. Changing this forces a new Logic App Integration Account Schema to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Logic App Integration Account Schema should exist. Changing this forces a new Logic App Integration Account Schema to be created.
	ResourceGroupName pulumi.StringInput
}

func (IntegrationAccountSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationAccountSchemaArgs)(nil)).Elem()
}

type IntegrationAccountSchemaInput interface {
	pulumi.Input

	ToIntegrationAccountSchemaOutput() IntegrationAccountSchemaOutput
	ToIntegrationAccountSchemaOutputWithContext(ctx context.Context) IntegrationAccountSchemaOutput
}

func (*IntegrationAccountSchema) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationAccountSchema)(nil)).Elem()
}

func (i *IntegrationAccountSchema) ToIntegrationAccountSchemaOutput() IntegrationAccountSchemaOutput {
	return i.ToIntegrationAccountSchemaOutputWithContext(context.Background())
}

func (i *IntegrationAccountSchema) ToIntegrationAccountSchemaOutputWithContext(ctx context.Context) IntegrationAccountSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountSchemaOutput)
}

// IntegrationAccountSchemaArrayInput is an input type that accepts IntegrationAccountSchemaArray and IntegrationAccountSchemaArrayOutput values.
// You can construct a concrete instance of `IntegrationAccountSchemaArrayInput` via:
//
//	IntegrationAccountSchemaArray{ IntegrationAccountSchemaArgs{...} }
type IntegrationAccountSchemaArrayInput interface {
	pulumi.Input

	ToIntegrationAccountSchemaArrayOutput() IntegrationAccountSchemaArrayOutput
	ToIntegrationAccountSchemaArrayOutputWithContext(context.Context) IntegrationAccountSchemaArrayOutput
}

type IntegrationAccountSchemaArray []IntegrationAccountSchemaInput

func (IntegrationAccountSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationAccountSchema)(nil)).Elem()
}

func (i IntegrationAccountSchemaArray) ToIntegrationAccountSchemaArrayOutput() IntegrationAccountSchemaArrayOutput {
	return i.ToIntegrationAccountSchemaArrayOutputWithContext(context.Background())
}

func (i IntegrationAccountSchemaArray) ToIntegrationAccountSchemaArrayOutputWithContext(ctx context.Context) IntegrationAccountSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountSchemaArrayOutput)
}

// IntegrationAccountSchemaMapInput is an input type that accepts IntegrationAccountSchemaMap and IntegrationAccountSchemaMapOutput values.
// You can construct a concrete instance of `IntegrationAccountSchemaMapInput` via:
//
//	IntegrationAccountSchemaMap{ "key": IntegrationAccountSchemaArgs{...} }
type IntegrationAccountSchemaMapInput interface {
	pulumi.Input

	ToIntegrationAccountSchemaMapOutput() IntegrationAccountSchemaMapOutput
	ToIntegrationAccountSchemaMapOutputWithContext(context.Context) IntegrationAccountSchemaMapOutput
}

type IntegrationAccountSchemaMap map[string]IntegrationAccountSchemaInput

func (IntegrationAccountSchemaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationAccountSchema)(nil)).Elem()
}

func (i IntegrationAccountSchemaMap) ToIntegrationAccountSchemaMapOutput() IntegrationAccountSchemaMapOutput {
	return i.ToIntegrationAccountSchemaMapOutputWithContext(context.Background())
}

func (i IntegrationAccountSchemaMap) ToIntegrationAccountSchemaMapOutputWithContext(ctx context.Context) IntegrationAccountSchemaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountSchemaMapOutput)
}

type IntegrationAccountSchemaOutput struct{ *pulumi.OutputState }

func (IntegrationAccountSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationAccountSchema)(nil)).Elem()
}

func (o IntegrationAccountSchemaOutput) ToIntegrationAccountSchemaOutput() IntegrationAccountSchemaOutput {
	return o
}

func (o IntegrationAccountSchemaOutput) ToIntegrationAccountSchemaOutputWithContext(ctx context.Context) IntegrationAccountSchemaOutput {
	return o
}

// The content of the Logic App Integration Account Schema.
func (o IntegrationAccountSchemaOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationAccountSchema) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// The file name of the Logic App Integration Account Schema.
func (o IntegrationAccountSchemaOutput) FileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationAccountSchema) pulumi.StringPtrOutput { return v.FileName }).(pulumi.StringPtrOutput)
}

// The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Schema to be created.
func (o IntegrationAccountSchemaOutput) IntegrationAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationAccountSchema) pulumi.StringOutput { return v.IntegrationAccountName }).(pulumi.StringOutput)
}

// The metadata of the Logic App Integration Account Schema.
func (o IntegrationAccountSchemaOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationAccountSchema) pulumi.StringPtrOutput { return v.Metadata }).(pulumi.StringPtrOutput)
}

// The name which should be used for this Logic App Integration Account Schema. Changing this forces a new Logic App Integration Account Schema to be created.
func (o IntegrationAccountSchemaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationAccountSchema) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the Resource Group where the Logic App Integration Account Schema should exist. Changing this forces a new Logic App Integration Account Schema to be created.
func (o IntegrationAccountSchemaOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationAccountSchema) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

type IntegrationAccountSchemaArrayOutput struct{ *pulumi.OutputState }

func (IntegrationAccountSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationAccountSchema)(nil)).Elem()
}

func (o IntegrationAccountSchemaArrayOutput) ToIntegrationAccountSchemaArrayOutput() IntegrationAccountSchemaArrayOutput {
	return o
}

func (o IntegrationAccountSchemaArrayOutput) ToIntegrationAccountSchemaArrayOutputWithContext(ctx context.Context) IntegrationAccountSchemaArrayOutput {
	return o
}

func (o IntegrationAccountSchemaArrayOutput) Index(i pulumi.IntInput) IntegrationAccountSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IntegrationAccountSchema {
		return vs[0].([]*IntegrationAccountSchema)[vs[1].(int)]
	}).(IntegrationAccountSchemaOutput)
}

type IntegrationAccountSchemaMapOutput struct{ *pulumi.OutputState }

func (IntegrationAccountSchemaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationAccountSchema)(nil)).Elem()
}

func (o IntegrationAccountSchemaMapOutput) ToIntegrationAccountSchemaMapOutput() IntegrationAccountSchemaMapOutput {
	return o
}

func (o IntegrationAccountSchemaMapOutput) ToIntegrationAccountSchemaMapOutputWithContext(ctx context.Context) IntegrationAccountSchemaMapOutput {
	return o
}

func (o IntegrationAccountSchemaMapOutput) MapIndex(k pulumi.StringInput) IntegrationAccountSchemaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IntegrationAccountSchema {
		return vs[0].(map[string]*IntegrationAccountSchema)[vs[1].(string)]
	}).(IntegrationAccountSchemaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationAccountSchemaInput)(nil)).Elem(), &IntegrationAccountSchema{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationAccountSchemaArrayInput)(nil)).Elem(), IntegrationAccountSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationAccountSchemaMapInput)(nil)).Elem(), IntegrationAccountSchemaMap{})
	pulumi.RegisterOutputType(IntegrationAccountSchemaOutput{})
	pulumi.RegisterOutputType(IntegrationAccountSchemaArrayOutput{})
	pulumi.RegisterOutputType(IntegrationAccountSchemaMapOutput{})
}
