// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package logicapps

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Recurrence Trigger within a Logic App Workflow
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/logic_app_trigger_recurrence.html.markdown.
type TriggerRecurrence struct {
	s *pulumi.ResourceState
}

// NewTriggerRecurrence registers a new resource with the given unique name, arguments, and options.
func NewTriggerRecurrence(ctx *pulumi.Context,
	name string, args *TriggerRecurrenceArgs, opts ...pulumi.ResourceOpt) (*TriggerRecurrence, error) {
	if args == nil || args.Frequency == nil {
		return nil, errors.New("missing required argument 'Frequency'")
	}
	if args == nil || args.Interval == nil {
		return nil, errors.New("missing required argument 'Interval'")
	}
	if args == nil || args.LogicAppId == nil {
		return nil, errors.New("missing required argument 'LogicAppId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["frequency"] = nil
		inputs["interval"] = nil
		inputs["logicAppId"] = nil
		inputs["name"] = nil
	} else {
		inputs["frequency"] = args.Frequency
		inputs["interval"] = args.Interval
		inputs["logicAppId"] = args.LogicAppId
		inputs["name"] = args.Name
	}
	s, err := ctx.RegisterResource("azure:logicapps/triggerRecurrence:TriggerRecurrence", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &TriggerRecurrence{s: s}, nil
}

// GetTriggerRecurrence gets an existing TriggerRecurrence resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTriggerRecurrence(ctx *pulumi.Context,
	name string, id pulumi.ID, state *TriggerRecurrenceState, opts ...pulumi.ResourceOpt) (*TriggerRecurrence, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["frequency"] = state.Frequency
		inputs["interval"] = state.Interval
		inputs["logicAppId"] = state.LogicAppId
		inputs["name"] = state.Name
	}
	s, err := ctx.ReadResource("azure:logicapps/triggerRecurrence:TriggerRecurrence", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &TriggerRecurrence{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *TriggerRecurrence) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *TriggerRecurrence) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Specifies the Frequency at which this Trigger should be run. Possible values include `Month`, `Week`, `Day`, `Hour`, `Minute` and `Second`.
func (r *TriggerRecurrence) Frequency() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["frequency"])
}

// Specifies interval used for the Frequency, for example a value of `4` for `interval` and `hour` for `frequency` would run the Trigger every 4 hours.
func (r *TriggerRecurrence) Interval() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["interval"])
}

// Specifies the ID of the Logic App Workflow. Changing this forces a new resource to be created.
func (r *TriggerRecurrence) LogicAppId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["logicAppId"])
}

// Specifies the name of the Recurrence Triggers to be created within the Logic App Workflow. Changing this forces a new resource to be created.
func (r *TriggerRecurrence) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Input properties used for looking up and filtering TriggerRecurrence resources.
type TriggerRecurrenceState struct {
	// Specifies the Frequency at which this Trigger should be run. Possible values include `Month`, `Week`, `Day`, `Hour`, `Minute` and `Second`.
	Frequency interface{}
	// Specifies interval used for the Frequency, for example a value of `4` for `interval` and `hour` for `frequency` would run the Trigger every 4 hours.
	Interval interface{}
	// Specifies the ID of the Logic App Workflow. Changing this forces a new resource to be created.
	LogicAppId interface{}
	// Specifies the name of the Recurrence Triggers to be created within the Logic App Workflow. Changing this forces a new resource to be created.
	Name interface{}
}

// The set of arguments for constructing a TriggerRecurrence resource.
type TriggerRecurrenceArgs struct {
	// Specifies the Frequency at which this Trigger should be run. Possible values include `Month`, `Week`, `Day`, `Hour`, `Minute` and `Second`.
	Frequency interface{}
	// Specifies interval used for the Frequency, for example a value of `4` for `interval` and `hour` for `frequency` would run the Trigger every 4 hours.
	Interval interface{}
	// Specifies the ID of the Logic App Workflow. Changing this forces a new resource to be created.
	LogicAppId interface{}
	// Specifies the name of the Recurrence Triggers to be created within the Logic App Workflow. Changing this forces a new resource to be created.
	Name interface{}
}
