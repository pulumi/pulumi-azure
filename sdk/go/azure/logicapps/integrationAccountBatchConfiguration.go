// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package logicapps

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Logic App Integration Account Batch Configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/logicapps"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleIntegrationAccount, err := logicapps.NewIntegrationAccount(ctx, "exampleIntegrationAccount", &logicapps.IntegrationAccountArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				SkuName:           pulumi.String("Standard"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = logicapps.NewIntegrationAccountBatchConfiguration(ctx, "exampleIntegrationAccountBatchConfiguration", &logicapps.IntegrationAccountBatchConfigurationArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				IntegrationAccountName: exampleIntegrationAccount.Name,
//				BatchGroupName:         pulumi.String("TestBatchGroup"),
//				ReleaseCriteria: &logicapps.IntegrationAccountBatchConfigurationReleaseCriteriaArgs{
//					MessageCount: pulumi.Int(80),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Logic App Integration Account Batch Configurations can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:logicapps/integrationAccountBatchConfiguration:IntegrationAccountBatchConfiguration example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Logic/integrationAccounts/account1/batchConfigurations/batchConfiguration1
//
// ```
type IntegrationAccountBatchConfiguration struct {
	pulumi.CustomResourceState

	// The batch group name of the Logic App Integration Batch Configuration. Changing this forces a new resource to be created.
	BatchGroupName pulumi.StringOutput `pulumi:"batchGroupName"`
	// The name of the Logic App Integration Account. Changing this forces a new resource to be created.
	IntegrationAccountName pulumi.StringOutput `pulumi:"integrationAccountName"`
	// A JSON mapping of any Metadata for this Logic App Integration Account Batch Configuration.
	Metadata pulumi.StringMapOutput `pulumi:"metadata"`
	// The name which should be used for this Logic App Integration Account Batch Configuration. Only Alphanumeric characters allowed. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A `releaseCriteria` block as documented below, which is used to select the criteria to meet before processing each batch.
	ReleaseCriteria IntegrationAccountBatchConfigurationReleaseCriteriaOutput `pulumi:"releaseCriteria"`
	// The name of the Resource Group where the Logic App Integration Account Batch Configuration should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
}

// NewIntegrationAccountBatchConfiguration registers a new resource with the given unique name, arguments, and options.
func NewIntegrationAccountBatchConfiguration(ctx *pulumi.Context,
	name string, args *IntegrationAccountBatchConfigurationArgs, opts ...pulumi.ResourceOption) (*IntegrationAccountBatchConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BatchGroupName == nil {
		return nil, errors.New("invalid value for required argument 'BatchGroupName'")
	}
	if args.IntegrationAccountName == nil {
		return nil, errors.New("invalid value for required argument 'IntegrationAccountName'")
	}
	if args.ReleaseCriteria == nil {
		return nil, errors.New("invalid value for required argument 'ReleaseCriteria'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IntegrationAccountBatchConfiguration
	err := ctx.RegisterResource("azure:logicapps/integrationAccountBatchConfiguration:IntegrationAccountBatchConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationAccountBatchConfiguration gets an existing IntegrationAccountBatchConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationAccountBatchConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationAccountBatchConfigurationState, opts ...pulumi.ResourceOption) (*IntegrationAccountBatchConfiguration, error) {
	var resource IntegrationAccountBatchConfiguration
	err := ctx.ReadResource("azure:logicapps/integrationAccountBatchConfiguration:IntegrationAccountBatchConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationAccountBatchConfiguration resources.
type integrationAccountBatchConfigurationState struct {
	// The batch group name of the Logic App Integration Batch Configuration. Changing this forces a new resource to be created.
	BatchGroupName *string `pulumi:"batchGroupName"`
	// The name of the Logic App Integration Account. Changing this forces a new resource to be created.
	IntegrationAccountName *string `pulumi:"integrationAccountName"`
	// A JSON mapping of any Metadata for this Logic App Integration Account Batch Configuration.
	Metadata map[string]string `pulumi:"metadata"`
	// The name which should be used for this Logic App Integration Account Batch Configuration. Only Alphanumeric characters allowed. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A `releaseCriteria` block as documented below, which is used to select the criteria to meet before processing each batch.
	ReleaseCriteria *IntegrationAccountBatchConfigurationReleaseCriteria `pulumi:"releaseCriteria"`
	// The name of the Resource Group where the Logic App Integration Account Batch Configuration should exist. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
}

type IntegrationAccountBatchConfigurationState struct {
	// The batch group name of the Logic App Integration Batch Configuration. Changing this forces a new resource to be created.
	BatchGroupName pulumi.StringPtrInput
	// The name of the Logic App Integration Account. Changing this forces a new resource to be created.
	IntegrationAccountName pulumi.StringPtrInput
	// A JSON mapping of any Metadata for this Logic App Integration Account Batch Configuration.
	Metadata pulumi.StringMapInput
	// The name which should be used for this Logic App Integration Account Batch Configuration. Only Alphanumeric characters allowed. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A `releaseCriteria` block as documented below, which is used to select the criteria to meet before processing each batch.
	ReleaseCriteria IntegrationAccountBatchConfigurationReleaseCriteriaPtrInput
	// The name of the Resource Group where the Logic App Integration Account Batch Configuration should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
}

func (IntegrationAccountBatchConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationAccountBatchConfigurationState)(nil)).Elem()
}

type integrationAccountBatchConfigurationArgs struct {
	// The batch group name of the Logic App Integration Batch Configuration. Changing this forces a new resource to be created.
	BatchGroupName string `pulumi:"batchGroupName"`
	// The name of the Logic App Integration Account. Changing this forces a new resource to be created.
	IntegrationAccountName string `pulumi:"integrationAccountName"`
	// A JSON mapping of any Metadata for this Logic App Integration Account Batch Configuration.
	Metadata map[string]string `pulumi:"metadata"`
	// The name which should be used for this Logic App Integration Account Batch Configuration. Only Alphanumeric characters allowed. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A `releaseCriteria` block as documented below, which is used to select the criteria to meet before processing each batch.
	ReleaseCriteria IntegrationAccountBatchConfigurationReleaseCriteria `pulumi:"releaseCriteria"`
	// The name of the Resource Group where the Logic App Integration Account Batch Configuration should exist. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a IntegrationAccountBatchConfiguration resource.
type IntegrationAccountBatchConfigurationArgs struct {
	// The batch group name of the Logic App Integration Batch Configuration. Changing this forces a new resource to be created.
	BatchGroupName pulumi.StringInput
	// The name of the Logic App Integration Account. Changing this forces a new resource to be created.
	IntegrationAccountName pulumi.StringInput
	// A JSON mapping of any Metadata for this Logic App Integration Account Batch Configuration.
	Metadata pulumi.StringMapInput
	// The name which should be used for this Logic App Integration Account Batch Configuration. Only Alphanumeric characters allowed. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A `releaseCriteria` block as documented below, which is used to select the criteria to meet before processing each batch.
	ReleaseCriteria IntegrationAccountBatchConfigurationReleaseCriteriaInput
	// The name of the Resource Group where the Logic App Integration Account Batch Configuration should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
}

func (IntegrationAccountBatchConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationAccountBatchConfigurationArgs)(nil)).Elem()
}

type IntegrationAccountBatchConfigurationInput interface {
	pulumi.Input

	ToIntegrationAccountBatchConfigurationOutput() IntegrationAccountBatchConfigurationOutput
	ToIntegrationAccountBatchConfigurationOutputWithContext(ctx context.Context) IntegrationAccountBatchConfigurationOutput
}

func (*IntegrationAccountBatchConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationAccountBatchConfiguration)(nil)).Elem()
}

func (i *IntegrationAccountBatchConfiguration) ToIntegrationAccountBatchConfigurationOutput() IntegrationAccountBatchConfigurationOutput {
	return i.ToIntegrationAccountBatchConfigurationOutputWithContext(context.Background())
}

func (i *IntegrationAccountBatchConfiguration) ToIntegrationAccountBatchConfigurationOutputWithContext(ctx context.Context) IntegrationAccountBatchConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountBatchConfigurationOutput)
}

// IntegrationAccountBatchConfigurationArrayInput is an input type that accepts IntegrationAccountBatchConfigurationArray and IntegrationAccountBatchConfigurationArrayOutput values.
// You can construct a concrete instance of `IntegrationAccountBatchConfigurationArrayInput` via:
//
//	IntegrationAccountBatchConfigurationArray{ IntegrationAccountBatchConfigurationArgs{...} }
type IntegrationAccountBatchConfigurationArrayInput interface {
	pulumi.Input

	ToIntegrationAccountBatchConfigurationArrayOutput() IntegrationAccountBatchConfigurationArrayOutput
	ToIntegrationAccountBatchConfigurationArrayOutputWithContext(context.Context) IntegrationAccountBatchConfigurationArrayOutput
}

type IntegrationAccountBatchConfigurationArray []IntegrationAccountBatchConfigurationInput

func (IntegrationAccountBatchConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationAccountBatchConfiguration)(nil)).Elem()
}

func (i IntegrationAccountBatchConfigurationArray) ToIntegrationAccountBatchConfigurationArrayOutput() IntegrationAccountBatchConfigurationArrayOutput {
	return i.ToIntegrationAccountBatchConfigurationArrayOutputWithContext(context.Background())
}

func (i IntegrationAccountBatchConfigurationArray) ToIntegrationAccountBatchConfigurationArrayOutputWithContext(ctx context.Context) IntegrationAccountBatchConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountBatchConfigurationArrayOutput)
}

// IntegrationAccountBatchConfigurationMapInput is an input type that accepts IntegrationAccountBatchConfigurationMap and IntegrationAccountBatchConfigurationMapOutput values.
// You can construct a concrete instance of `IntegrationAccountBatchConfigurationMapInput` via:
//
//	IntegrationAccountBatchConfigurationMap{ "key": IntegrationAccountBatchConfigurationArgs{...} }
type IntegrationAccountBatchConfigurationMapInput interface {
	pulumi.Input

	ToIntegrationAccountBatchConfigurationMapOutput() IntegrationAccountBatchConfigurationMapOutput
	ToIntegrationAccountBatchConfigurationMapOutputWithContext(context.Context) IntegrationAccountBatchConfigurationMapOutput
}

type IntegrationAccountBatchConfigurationMap map[string]IntegrationAccountBatchConfigurationInput

func (IntegrationAccountBatchConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationAccountBatchConfiguration)(nil)).Elem()
}

func (i IntegrationAccountBatchConfigurationMap) ToIntegrationAccountBatchConfigurationMapOutput() IntegrationAccountBatchConfigurationMapOutput {
	return i.ToIntegrationAccountBatchConfigurationMapOutputWithContext(context.Background())
}

func (i IntegrationAccountBatchConfigurationMap) ToIntegrationAccountBatchConfigurationMapOutputWithContext(ctx context.Context) IntegrationAccountBatchConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountBatchConfigurationMapOutput)
}

type IntegrationAccountBatchConfigurationOutput struct{ *pulumi.OutputState }

func (IntegrationAccountBatchConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationAccountBatchConfiguration)(nil)).Elem()
}

func (o IntegrationAccountBatchConfigurationOutput) ToIntegrationAccountBatchConfigurationOutput() IntegrationAccountBatchConfigurationOutput {
	return o
}

func (o IntegrationAccountBatchConfigurationOutput) ToIntegrationAccountBatchConfigurationOutputWithContext(ctx context.Context) IntegrationAccountBatchConfigurationOutput {
	return o
}

// The batch group name of the Logic App Integration Batch Configuration. Changing this forces a new resource to be created.
func (o IntegrationAccountBatchConfigurationOutput) BatchGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationAccountBatchConfiguration) pulumi.StringOutput { return v.BatchGroupName }).(pulumi.StringOutput)
}

// The name of the Logic App Integration Account. Changing this forces a new resource to be created.
func (o IntegrationAccountBatchConfigurationOutput) IntegrationAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationAccountBatchConfiguration) pulumi.StringOutput { return v.IntegrationAccountName }).(pulumi.StringOutput)
}

// A JSON mapping of any Metadata for this Logic App Integration Account Batch Configuration.
func (o IntegrationAccountBatchConfigurationOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *IntegrationAccountBatchConfiguration) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

// The name which should be used for this Logic App Integration Account Batch Configuration. Only Alphanumeric characters allowed. Changing this forces a new resource to be created.
func (o IntegrationAccountBatchConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationAccountBatchConfiguration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A `releaseCriteria` block as documented below, which is used to select the criteria to meet before processing each batch.
func (o IntegrationAccountBatchConfigurationOutput) ReleaseCriteria() IntegrationAccountBatchConfigurationReleaseCriteriaOutput {
	return o.ApplyT(func(v *IntegrationAccountBatchConfiguration) IntegrationAccountBatchConfigurationReleaseCriteriaOutput {
		return v.ReleaseCriteria
	}).(IntegrationAccountBatchConfigurationReleaseCriteriaOutput)
}

// The name of the Resource Group where the Logic App Integration Account Batch Configuration should exist. Changing this forces a new resource to be created.
func (o IntegrationAccountBatchConfigurationOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationAccountBatchConfiguration) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

type IntegrationAccountBatchConfigurationArrayOutput struct{ *pulumi.OutputState }

func (IntegrationAccountBatchConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationAccountBatchConfiguration)(nil)).Elem()
}

func (o IntegrationAccountBatchConfigurationArrayOutput) ToIntegrationAccountBatchConfigurationArrayOutput() IntegrationAccountBatchConfigurationArrayOutput {
	return o
}

func (o IntegrationAccountBatchConfigurationArrayOutput) ToIntegrationAccountBatchConfigurationArrayOutputWithContext(ctx context.Context) IntegrationAccountBatchConfigurationArrayOutput {
	return o
}

func (o IntegrationAccountBatchConfigurationArrayOutput) Index(i pulumi.IntInput) IntegrationAccountBatchConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IntegrationAccountBatchConfiguration {
		return vs[0].([]*IntegrationAccountBatchConfiguration)[vs[1].(int)]
	}).(IntegrationAccountBatchConfigurationOutput)
}

type IntegrationAccountBatchConfigurationMapOutput struct{ *pulumi.OutputState }

func (IntegrationAccountBatchConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationAccountBatchConfiguration)(nil)).Elem()
}

func (o IntegrationAccountBatchConfigurationMapOutput) ToIntegrationAccountBatchConfigurationMapOutput() IntegrationAccountBatchConfigurationMapOutput {
	return o
}

func (o IntegrationAccountBatchConfigurationMapOutput) ToIntegrationAccountBatchConfigurationMapOutputWithContext(ctx context.Context) IntegrationAccountBatchConfigurationMapOutput {
	return o
}

func (o IntegrationAccountBatchConfigurationMapOutput) MapIndex(k pulumi.StringInput) IntegrationAccountBatchConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IntegrationAccountBatchConfiguration {
		return vs[0].(map[string]*IntegrationAccountBatchConfiguration)[vs[1].(string)]
	}).(IntegrationAccountBatchConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationAccountBatchConfigurationInput)(nil)).Elem(), &IntegrationAccountBatchConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationAccountBatchConfigurationArrayInput)(nil)).Elem(), IntegrationAccountBatchConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationAccountBatchConfigurationMapInput)(nil)).Elem(), IntegrationAccountBatchConfigurationMap{})
	pulumi.RegisterOutputType(IntegrationAccountBatchConfigurationOutput{})
	pulumi.RegisterOutputType(IntegrationAccountBatchConfigurationArrayOutput{})
	pulumi.RegisterOutputType(IntegrationAccountBatchConfigurationMapOutput{})
}
