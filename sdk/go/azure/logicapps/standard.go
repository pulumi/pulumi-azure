// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package logicapps

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Logic App (Standard / Single Tenant)
//
// ## Example Usage
// ### With App Service Plan)
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/appservice"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/logicapps"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Location:               exampleResourceGroup.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("LRS"),
//			})
//			if err != nil {
//				return err
//			}
//			examplePlan, err := appservice.NewPlan(ctx, "examplePlan", &appservice.PlanArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Kind:              pulumi.Any("elastic"),
//				Sku: &appservice.PlanSkuArgs{
//					Tier: pulumi.String("WorkflowStandard"),
//					Size: pulumi.String("WS1"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = logicapps.NewStandard(ctx, "exampleStandard", &logicapps.StandardArgs{
//				Location:                exampleResourceGroup.Location,
//				ResourceGroupName:       exampleResourceGroup.Name,
//				AppServicePlanId:        examplePlan.ID(),
//				StorageAccountName:      exampleAccount.Name,
//				StorageAccountAccessKey: exampleAccount.PrimaryAccessKey,
//				AppSettings: pulumi.StringMap{
//					"FUNCTIONS_WORKER_RUNTIME":     pulumi.String("node"),
//					"WEBSITE_NODE_DEFAULT_VERSION": pulumi.String("~18"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### For Container Mode)
//
// > **Note:** You must set `appservice.Plan` `kind` to `Linux` and `reserved` to `true` when used with `linuxFxVersion`
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/appservice"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/logicapps"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Location:               exampleResourceGroup.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("LRS"),
//			})
//			if err != nil {
//				return err
//			}
//			examplePlan, err := appservice.NewPlan(ctx, "examplePlan", &appservice.PlanArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Kind:              pulumi.Any("Linux"),
//				Reserved:          pulumi.Bool(true),
//				Sku: &appservice.PlanSkuArgs{
//					Tier: pulumi.String("WorkflowStandard"),
//					Size: pulumi.String("WS1"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = logicapps.NewStandard(ctx, "exampleStandard", &logicapps.StandardArgs{
//				Location:                exampleResourceGroup.Location,
//				ResourceGroupName:       exampleResourceGroup.Name,
//				AppServicePlanId:        examplePlan.ID(),
//				StorageAccountName:      exampleAccount.Name,
//				StorageAccountAccessKey: exampleAccount.PrimaryAccessKey,
//				SiteConfig: &logicapps.StandardSiteConfigArgs{
//					LinuxFxVersion: pulumi.String("DOCKER|mcr.microsoft.com/azure-functions/dotnet:3.0-appservice"),
//				},
//				AppSettings: pulumi.StringMap{
//					"DOCKER_REGISTRY_SERVER_URL":      pulumi.String("https://<server-name>.azurecr.io"),
//					"DOCKER_REGISTRY_SERVER_USERNAME": pulumi.String("username"),
//					"DOCKER_REGISTRY_SERVER_PASSWORD": pulumi.String("password"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Logic Apps can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:logicapps/standard:Standard logicapp1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Web/sites/logicapp1
//
// ```
type Standard struct {
	pulumi.CustomResourceState

	// The ID of the App Service Plan within which to create this Logic App
	AppServicePlanId pulumi.StringOutput `pulumi:"appServicePlanId"`
	// A map of key-value pairs for [App Settings](https://docs.microsoft.com/azure/azure-functions/functions-app-settings) and custom values.
	//
	// > **NOTE:** There are a number of application settings that will be managed for you by this resource type and *shouldn't* be configured separately as part of the appSettings you specify.  `AzureWebJobsStorage` is filled based on `storageAccountName` and `storageAccountAccessKey`. `WEBSITE_CONTENTSHARE` is detailed below. `FUNCTIONS_EXTENSION_VERSION` is filled based on `version`. `APP_KIND` is set to workflowApp and `AzureFunctionsJobHost__extensionBundle__id` and `AzureFunctionsJobHost__extensionBundle__version` are set as detailed below.
	AppSettings pulumi.StringMapOutput `pulumi:"appSettings"`
	// If `useExtensionBundle` then controls the allowed range for bundle versions. Defaults to `[1.*, 2.0.0)`.
	BundleVersion pulumi.StringPtrOutput `pulumi:"bundleVersion"`
	// Should the Logic App send session affinity cookies, which route client requests in the same session to the same instance?
	ClientAffinityEnabled pulumi.BoolOutput `pulumi:"clientAffinityEnabled"`
	// The mode of the Logic App's client certificates requirement for incoming requests. Possible values are `Required` and `Optional`.
	ClientCertificateMode pulumi.StringPtrOutput `pulumi:"clientCertificateMode"`
	// An `connectionString` block as defined below.
	ConnectionStrings StandardConnectionStringArrayOutput `pulumi:"connectionStrings"`
	// An identifier used by App Service to perform domain ownership verification via DNS TXT record.
	CustomDomainVerificationId pulumi.StringOutput `pulumi:"customDomainVerificationId"`
	// The default hostname associated with the Logic App - such as `mysite.azurewebsites.net`
	DefaultHostname pulumi.StringOutput `pulumi:"defaultHostname"`
	// Is the Logic App enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Can the Logic App only be accessed via HTTPS? Defaults to `false`.
	HttpsOnly pulumi.BoolPtrOutput `pulumi:"httpsOnly"`
	// An `identity` block as defined below.
	Identity StandardIdentityPtrOutput `pulumi:"identity"`
	// The Logic App kind - will be `functionapp,workflowapp`
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name of the Logic App Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`
	OutboundIpAddresses pulumi.StringOutput `pulumi:"outboundIpAddresses"`
	// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outboundIpAddresses`.
	PossibleOutboundIpAddresses pulumi.StringOutput `pulumi:"possibleOutboundIpAddresses"`
	// The name of the resource group in which to create the Logic App. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A `siteConfig` object as defined below.
	SiteConfig StandardSiteConfigOutput `pulumi:"siteConfig"`
	// A `siteCredential` block as defined below, which contains the site-level credentials used to publish to this App Service.
	SiteCredentials StandardSiteCredentialArrayOutput `pulumi:"siteCredentials"`
	// The access key which will be used to access the backend storage account for the Logic App
	StorageAccountAccessKey pulumi.StringOutput `pulumi:"storageAccountAccessKey"`
	// The backend storage account name which will be used by this Logic App (e.g. for Stateful workflows data). Changing this forces a new resource to be created.
	StorageAccountName      pulumi.StringOutput `pulumi:"storageAccountName"`
	StorageAccountShareName pulumi.StringOutput `pulumi:"storageAccountShareName"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Should the logic app use the bundled extension package? If true, then application settings for `AzureFunctionsJobHost__extensionBundle__id` and `AzureFunctionsJobHost__extensionBundle__version` will be created. Defaults to `true`.
	UseExtensionBundle pulumi.BoolPtrOutput `pulumi:"useExtensionBundle"`
	// The runtime version associated with the Logic App. Defaults to `~3`.
	//
	// > **Note:**  Logic App version `3.x` will be out of support from December 3 2022. For more details refer [Logic Apps Standard Support for Functions Runtime V4](https://azure.microsoft.com/en-us/updates/logic-apps-standard-support-for-functions-runtime-v4/)
	Version                pulumi.StringPtrOutput `pulumi:"version"`
	VirtualNetworkSubnetId pulumi.StringPtrOutput `pulumi:"virtualNetworkSubnetId"`
}

// NewStandard registers a new resource with the given unique name, arguments, and options.
func NewStandard(ctx *pulumi.Context,
	name string, args *StandardArgs, opts ...pulumi.ResourceOption) (*Standard, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppServicePlanId == nil {
		return nil, errors.New("invalid value for required argument 'AppServicePlanId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.StorageAccountAccessKey == nil {
		return nil, errors.New("invalid value for required argument 'StorageAccountAccessKey'")
	}
	if args.StorageAccountName == nil {
		return nil, errors.New("invalid value for required argument 'StorageAccountName'")
	}
	if args.StorageAccountAccessKey != nil {
		args.StorageAccountAccessKey = pulumi.ToSecret(args.StorageAccountAccessKey).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"storageAccountAccessKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Standard
	err := ctx.RegisterResource("azure:logicapps/standard:Standard", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStandard gets an existing Standard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStandard(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StandardState, opts ...pulumi.ResourceOption) (*Standard, error) {
	var resource Standard
	err := ctx.ReadResource("azure:logicapps/standard:Standard", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Standard resources.
type standardState struct {
	// The ID of the App Service Plan within which to create this Logic App
	AppServicePlanId *string `pulumi:"appServicePlanId"`
	// A map of key-value pairs for [App Settings](https://docs.microsoft.com/azure/azure-functions/functions-app-settings) and custom values.
	//
	// > **NOTE:** There are a number of application settings that will be managed for you by this resource type and *shouldn't* be configured separately as part of the appSettings you specify.  `AzureWebJobsStorage` is filled based on `storageAccountName` and `storageAccountAccessKey`. `WEBSITE_CONTENTSHARE` is detailed below. `FUNCTIONS_EXTENSION_VERSION` is filled based on `version`. `APP_KIND` is set to workflowApp and `AzureFunctionsJobHost__extensionBundle__id` and `AzureFunctionsJobHost__extensionBundle__version` are set as detailed below.
	AppSettings map[string]string `pulumi:"appSettings"`
	// If `useExtensionBundle` then controls the allowed range for bundle versions. Defaults to `[1.*, 2.0.0)`.
	BundleVersion *string `pulumi:"bundleVersion"`
	// Should the Logic App send session affinity cookies, which route client requests in the same session to the same instance?
	ClientAffinityEnabled *bool `pulumi:"clientAffinityEnabled"`
	// The mode of the Logic App's client certificates requirement for incoming requests. Possible values are `Required` and `Optional`.
	ClientCertificateMode *string `pulumi:"clientCertificateMode"`
	// An `connectionString` block as defined below.
	ConnectionStrings []StandardConnectionString `pulumi:"connectionStrings"`
	// An identifier used by App Service to perform domain ownership verification via DNS TXT record.
	CustomDomainVerificationId *string `pulumi:"customDomainVerificationId"`
	// The default hostname associated with the Logic App - such as `mysite.azurewebsites.net`
	DefaultHostname *string `pulumi:"defaultHostname"`
	// Is the Logic App enabled? Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Can the Logic App only be accessed via HTTPS? Defaults to `false`.
	HttpsOnly *bool `pulumi:"httpsOnly"`
	// An `identity` block as defined below.
	Identity *StandardIdentity `pulumi:"identity"`
	// The Logic App kind - will be `functionapp,workflowapp`
	Kind *string `pulumi:"kind"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the Logic App Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`
	OutboundIpAddresses *string `pulumi:"outboundIpAddresses"`
	// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outboundIpAddresses`.
	PossibleOutboundIpAddresses *string `pulumi:"possibleOutboundIpAddresses"`
	// The name of the resource group in which to create the Logic App. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A `siteConfig` object as defined below.
	SiteConfig *StandardSiteConfig `pulumi:"siteConfig"`
	// A `siteCredential` block as defined below, which contains the site-level credentials used to publish to this App Service.
	SiteCredentials []StandardSiteCredential `pulumi:"siteCredentials"`
	// The access key which will be used to access the backend storage account for the Logic App
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// The backend storage account name which will be used by this Logic App (e.g. for Stateful workflows data). Changing this forces a new resource to be created.
	StorageAccountName      *string `pulumi:"storageAccountName"`
	StorageAccountShareName *string `pulumi:"storageAccountShareName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Should the logic app use the bundled extension package? If true, then application settings for `AzureFunctionsJobHost__extensionBundle__id` and `AzureFunctionsJobHost__extensionBundle__version` will be created. Defaults to `true`.
	UseExtensionBundle *bool `pulumi:"useExtensionBundle"`
	// The runtime version associated with the Logic App. Defaults to `~3`.
	//
	// > **Note:**  Logic App version `3.x` will be out of support from December 3 2022. For more details refer [Logic Apps Standard Support for Functions Runtime V4](https://azure.microsoft.com/en-us/updates/logic-apps-standard-support-for-functions-runtime-v4/)
	Version                *string `pulumi:"version"`
	VirtualNetworkSubnetId *string `pulumi:"virtualNetworkSubnetId"`
}

type StandardState struct {
	// The ID of the App Service Plan within which to create this Logic App
	AppServicePlanId pulumi.StringPtrInput
	// A map of key-value pairs for [App Settings](https://docs.microsoft.com/azure/azure-functions/functions-app-settings) and custom values.
	//
	// > **NOTE:** There are a number of application settings that will be managed for you by this resource type and *shouldn't* be configured separately as part of the appSettings you specify.  `AzureWebJobsStorage` is filled based on `storageAccountName` and `storageAccountAccessKey`. `WEBSITE_CONTENTSHARE` is detailed below. `FUNCTIONS_EXTENSION_VERSION` is filled based on `version`. `APP_KIND` is set to workflowApp and `AzureFunctionsJobHost__extensionBundle__id` and `AzureFunctionsJobHost__extensionBundle__version` are set as detailed below.
	AppSettings pulumi.StringMapInput
	// If `useExtensionBundle` then controls the allowed range for bundle versions. Defaults to `[1.*, 2.0.0)`.
	BundleVersion pulumi.StringPtrInput
	// Should the Logic App send session affinity cookies, which route client requests in the same session to the same instance?
	ClientAffinityEnabled pulumi.BoolPtrInput
	// The mode of the Logic App's client certificates requirement for incoming requests. Possible values are `Required` and `Optional`.
	ClientCertificateMode pulumi.StringPtrInput
	// An `connectionString` block as defined below.
	ConnectionStrings StandardConnectionStringArrayInput
	// An identifier used by App Service to perform domain ownership verification via DNS TXT record.
	CustomDomainVerificationId pulumi.StringPtrInput
	// The default hostname associated with the Logic App - such as `mysite.azurewebsites.net`
	DefaultHostname pulumi.StringPtrInput
	// Is the Logic App enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// Can the Logic App only be accessed via HTTPS? Defaults to `false`.
	HttpsOnly pulumi.BoolPtrInput
	// An `identity` block as defined below.
	Identity StandardIdentityPtrInput
	// The Logic App kind - will be `functionapp,workflowapp`
	Kind pulumi.StringPtrInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the Logic App Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`
	OutboundIpAddresses pulumi.StringPtrInput
	// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outboundIpAddresses`.
	PossibleOutboundIpAddresses pulumi.StringPtrInput
	// The name of the resource group in which to create the Logic App. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A `siteConfig` object as defined below.
	SiteConfig StandardSiteConfigPtrInput
	// A `siteCredential` block as defined below, which contains the site-level credentials used to publish to this App Service.
	SiteCredentials StandardSiteCredentialArrayInput
	// The access key which will be used to access the backend storage account for the Logic App
	StorageAccountAccessKey pulumi.StringPtrInput
	// The backend storage account name which will be used by this Logic App (e.g. for Stateful workflows data). Changing this forces a new resource to be created.
	StorageAccountName      pulumi.StringPtrInput
	StorageAccountShareName pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// Should the logic app use the bundled extension package? If true, then application settings for `AzureFunctionsJobHost__extensionBundle__id` and `AzureFunctionsJobHost__extensionBundle__version` will be created. Defaults to `true`.
	UseExtensionBundle pulumi.BoolPtrInput
	// The runtime version associated with the Logic App. Defaults to `~3`.
	//
	// > **Note:**  Logic App version `3.x` will be out of support from December 3 2022. For more details refer [Logic Apps Standard Support for Functions Runtime V4](https://azure.microsoft.com/en-us/updates/logic-apps-standard-support-for-functions-runtime-v4/)
	Version                pulumi.StringPtrInput
	VirtualNetworkSubnetId pulumi.StringPtrInput
}

func (StandardState) ElementType() reflect.Type {
	return reflect.TypeOf((*standardState)(nil)).Elem()
}

type standardArgs struct {
	// The ID of the App Service Plan within which to create this Logic App
	AppServicePlanId string `pulumi:"appServicePlanId"`
	// A map of key-value pairs for [App Settings](https://docs.microsoft.com/azure/azure-functions/functions-app-settings) and custom values.
	//
	// > **NOTE:** There are a number of application settings that will be managed for you by this resource type and *shouldn't* be configured separately as part of the appSettings you specify.  `AzureWebJobsStorage` is filled based on `storageAccountName` and `storageAccountAccessKey`. `WEBSITE_CONTENTSHARE` is detailed below. `FUNCTIONS_EXTENSION_VERSION` is filled based on `version`. `APP_KIND` is set to workflowApp and `AzureFunctionsJobHost__extensionBundle__id` and `AzureFunctionsJobHost__extensionBundle__version` are set as detailed below.
	AppSettings map[string]string `pulumi:"appSettings"`
	// If `useExtensionBundle` then controls the allowed range for bundle versions. Defaults to `[1.*, 2.0.0)`.
	BundleVersion *string `pulumi:"bundleVersion"`
	// Should the Logic App send session affinity cookies, which route client requests in the same session to the same instance?
	ClientAffinityEnabled *bool `pulumi:"clientAffinityEnabled"`
	// The mode of the Logic App's client certificates requirement for incoming requests. Possible values are `Required` and `Optional`.
	ClientCertificateMode *string `pulumi:"clientCertificateMode"`
	// An `connectionString` block as defined below.
	ConnectionStrings []StandardConnectionString `pulumi:"connectionStrings"`
	// Is the Logic App enabled? Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Can the Logic App only be accessed via HTTPS? Defaults to `false`.
	HttpsOnly *bool `pulumi:"httpsOnly"`
	// An `identity` block as defined below.
	Identity *StandardIdentity `pulumi:"identity"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the Logic App Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to create the Logic App. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A `siteConfig` object as defined below.
	SiteConfig *StandardSiteConfig `pulumi:"siteConfig"`
	// The access key which will be used to access the backend storage account for the Logic App
	StorageAccountAccessKey string `pulumi:"storageAccountAccessKey"`
	// The backend storage account name which will be used by this Logic App (e.g. for Stateful workflows data). Changing this forces a new resource to be created.
	StorageAccountName      string  `pulumi:"storageAccountName"`
	StorageAccountShareName *string `pulumi:"storageAccountShareName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Should the logic app use the bundled extension package? If true, then application settings for `AzureFunctionsJobHost__extensionBundle__id` and `AzureFunctionsJobHost__extensionBundle__version` will be created. Defaults to `true`.
	UseExtensionBundle *bool `pulumi:"useExtensionBundle"`
	// The runtime version associated with the Logic App. Defaults to `~3`.
	//
	// > **Note:**  Logic App version `3.x` will be out of support from December 3 2022. For more details refer [Logic Apps Standard Support for Functions Runtime V4](https://azure.microsoft.com/en-us/updates/logic-apps-standard-support-for-functions-runtime-v4/)
	Version                *string `pulumi:"version"`
	VirtualNetworkSubnetId *string `pulumi:"virtualNetworkSubnetId"`
}

// The set of arguments for constructing a Standard resource.
type StandardArgs struct {
	// The ID of the App Service Plan within which to create this Logic App
	AppServicePlanId pulumi.StringInput
	// A map of key-value pairs for [App Settings](https://docs.microsoft.com/azure/azure-functions/functions-app-settings) and custom values.
	//
	// > **NOTE:** There are a number of application settings that will be managed for you by this resource type and *shouldn't* be configured separately as part of the appSettings you specify.  `AzureWebJobsStorage` is filled based on `storageAccountName` and `storageAccountAccessKey`. `WEBSITE_CONTENTSHARE` is detailed below. `FUNCTIONS_EXTENSION_VERSION` is filled based on `version`. `APP_KIND` is set to workflowApp and `AzureFunctionsJobHost__extensionBundle__id` and `AzureFunctionsJobHost__extensionBundle__version` are set as detailed below.
	AppSettings pulumi.StringMapInput
	// If `useExtensionBundle` then controls the allowed range for bundle versions. Defaults to `[1.*, 2.0.0)`.
	BundleVersion pulumi.StringPtrInput
	// Should the Logic App send session affinity cookies, which route client requests in the same session to the same instance?
	ClientAffinityEnabled pulumi.BoolPtrInput
	// The mode of the Logic App's client certificates requirement for incoming requests. Possible values are `Required` and `Optional`.
	ClientCertificateMode pulumi.StringPtrInput
	// An `connectionString` block as defined below.
	ConnectionStrings StandardConnectionStringArrayInput
	// Is the Logic App enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// Can the Logic App only be accessed via HTTPS? Defaults to `false`.
	HttpsOnly pulumi.BoolPtrInput
	// An `identity` block as defined below.
	Identity StandardIdentityPtrInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the Logic App Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to create the Logic App. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A `siteConfig` object as defined below.
	SiteConfig StandardSiteConfigPtrInput
	// The access key which will be used to access the backend storage account for the Logic App
	StorageAccountAccessKey pulumi.StringInput
	// The backend storage account name which will be used by this Logic App (e.g. for Stateful workflows data). Changing this forces a new resource to be created.
	StorageAccountName      pulumi.StringInput
	StorageAccountShareName pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// Should the logic app use the bundled extension package? If true, then application settings for `AzureFunctionsJobHost__extensionBundle__id` and `AzureFunctionsJobHost__extensionBundle__version` will be created. Defaults to `true`.
	UseExtensionBundle pulumi.BoolPtrInput
	// The runtime version associated with the Logic App. Defaults to `~3`.
	//
	// > **Note:**  Logic App version `3.x` will be out of support from December 3 2022. For more details refer [Logic Apps Standard Support for Functions Runtime V4](https://azure.microsoft.com/en-us/updates/logic-apps-standard-support-for-functions-runtime-v4/)
	Version                pulumi.StringPtrInput
	VirtualNetworkSubnetId pulumi.StringPtrInput
}

func (StandardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*standardArgs)(nil)).Elem()
}

type StandardInput interface {
	pulumi.Input

	ToStandardOutput() StandardOutput
	ToStandardOutputWithContext(ctx context.Context) StandardOutput
}

func (*Standard) ElementType() reflect.Type {
	return reflect.TypeOf((**Standard)(nil)).Elem()
}

func (i *Standard) ToStandardOutput() StandardOutput {
	return i.ToStandardOutputWithContext(context.Background())
}

func (i *Standard) ToStandardOutputWithContext(ctx context.Context) StandardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardOutput)
}

// StandardArrayInput is an input type that accepts StandardArray and StandardArrayOutput values.
// You can construct a concrete instance of `StandardArrayInput` via:
//
//	StandardArray{ StandardArgs{...} }
type StandardArrayInput interface {
	pulumi.Input

	ToStandardArrayOutput() StandardArrayOutput
	ToStandardArrayOutputWithContext(context.Context) StandardArrayOutput
}

type StandardArray []StandardInput

func (StandardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Standard)(nil)).Elem()
}

func (i StandardArray) ToStandardArrayOutput() StandardArrayOutput {
	return i.ToStandardArrayOutputWithContext(context.Background())
}

func (i StandardArray) ToStandardArrayOutputWithContext(ctx context.Context) StandardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardArrayOutput)
}

// StandardMapInput is an input type that accepts StandardMap and StandardMapOutput values.
// You can construct a concrete instance of `StandardMapInput` via:
//
//	StandardMap{ "key": StandardArgs{...} }
type StandardMapInput interface {
	pulumi.Input

	ToStandardMapOutput() StandardMapOutput
	ToStandardMapOutputWithContext(context.Context) StandardMapOutput
}

type StandardMap map[string]StandardInput

func (StandardMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Standard)(nil)).Elem()
}

func (i StandardMap) ToStandardMapOutput() StandardMapOutput {
	return i.ToStandardMapOutputWithContext(context.Background())
}

func (i StandardMap) ToStandardMapOutputWithContext(ctx context.Context) StandardMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardMapOutput)
}

type StandardOutput struct{ *pulumi.OutputState }

func (StandardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Standard)(nil)).Elem()
}

func (o StandardOutput) ToStandardOutput() StandardOutput {
	return o
}

func (o StandardOutput) ToStandardOutputWithContext(ctx context.Context) StandardOutput {
	return o
}

// The ID of the App Service Plan within which to create this Logic App
func (o StandardOutput) AppServicePlanId() pulumi.StringOutput {
	return o.ApplyT(func(v *Standard) pulumi.StringOutput { return v.AppServicePlanId }).(pulumi.StringOutput)
}

// A map of key-value pairs for [App Settings](https://docs.microsoft.com/azure/azure-functions/functions-app-settings) and custom values.
//
// > **NOTE:** There are a number of application settings that will be managed for you by this resource type and *shouldn't* be configured separately as part of the appSettings you specify.  `AzureWebJobsStorage` is filled based on `storageAccountName` and `storageAccountAccessKey`. `WEBSITE_CONTENTSHARE` is detailed below. `FUNCTIONS_EXTENSION_VERSION` is filled based on `version`. `APP_KIND` is set to workflowApp and `AzureFunctionsJobHost__extensionBundle__id` and `AzureFunctionsJobHost__extensionBundle__version` are set as detailed below.
func (o StandardOutput) AppSettings() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Standard) pulumi.StringMapOutput { return v.AppSettings }).(pulumi.StringMapOutput)
}

// If `useExtensionBundle` then controls the allowed range for bundle versions. Defaults to `[1.*, 2.0.0)`.
func (o StandardOutput) BundleVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Standard) pulumi.StringPtrOutput { return v.BundleVersion }).(pulumi.StringPtrOutput)
}

// Should the Logic App send session affinity cookies, which route client requests in the same session to the same instance?
func (o StandardOutput) ClientAffinityEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Standard) pulumi.BoolOutput { return v.ClientAffinityEnabled }).(pulumi.BoolOutput)
}

// The mode of the Logic App's client certificates requirement for incoming requests. Possible values are `Required` and `Optional`.
func (o StandardOutput) ClientCertificateMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Standard) pulumi.StringPtrOutput { return v.ClientCertificateMode }).(pulumi.StringPtrOutput)
}

// An `connectionString` block as defined below.
func (o StandardOutput) ConnectionStrings() StandardConnectionStringArrayOutput {
	return o.ApplyT(func(v *Standard) StandardConnectionStringArrayOutput { return v.ConnectionStrings }).(StandardConnectionStringArrayOutput)
}

// An identifier used by App Service to perform domain ownership verification via DNS TXT record.
func (o StandardOutput) CustomDomainVerificationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Standard) pulumi.StringOutput { return v.CustomDomainVerificationId }).(pulumi.StringOutput)
}

// The default hostname associated with the Logic App - such as `mysite.azurewebsites.net`
func (o StandardOutput) DefaultHostname() pulumi.StringOutput {
	return o.ApplyT(func(v *Standard) pulumi.StringOutput { return v.DefaultHostname }).(pulumi.StringOutput)
}

// Is the Logic App enabled? Defaults to `true`.
func (o StandardOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Standard) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Can the Logic App only be accessed via HTTPS? Defaults to `false`.
func (o StandardOutput) HttpsOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Standard) pulumi.BoolPtrOutput { return v.HttpsOnly }).(pulumi.BoolPtrOutput)
}

// An `identity` block as defined below.
func (o StandardOutput) Identity() StandardIdentityPtrOutput {
	return o.ApplyT(func(v *Standard) StandardIdentityPtrOutput { return v.Identity }).(StandardIdentityPtrOutput)
}

// The Logic App kind - will be `functionapp,workflowapp`
func (o StandardOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *Standard) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
func (o StandardOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Standard) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name of the Logic App Changing this forces a new resource to be created.
func (o StandardOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Standard) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`
func (o StandardOutput) OutboundIpAddresses() pulumi.StringOutput {
	return o.ApplyT(func(v *Standard) pulumi.StringOutput { return v.OutboundIpAddresses }).(pulumi.StringOutput)
}

// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outboundIpAddresses`.
func (o StandardOutput) PossibleOutboundIpAddresses() pulumi.StringOutput {
	return o.ApplyT(func(v *Standard) pulumi.StringOutput { return v.PossibleOutboundIpAddresses }).(pulumi.StringOutput)
}

// The name of the resource group in which to create the Logic App. Changing this forces a new resource to be created.
func (o StandardOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Standard) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A `siteConfig` object as defined below.
func (o StandardOutput) SiteConfig() StandardSiteConfigOutput {
	return o.ApplyT(func(v *Standard) StandardSiteConfigOutput { return v.SiteConfig }).(StandardSiteConfigOutput)
}

// A `siteCredential` block as defined below, which contains the site-level credentials used to publish to this App Service.
func (o StandardOutput) SiteCredentials() StandardSiteCredentialArrayOutput {
	return o.ApplyT(func(v *Standard) StandardSiteCredentialArrayOutput { return v.SiteCredentials }).(StandardSiteCredentialArrayOutput)
}

// The access key which will be used to access the backend storage account for the Logic App
func (o StandardOutput) StorageAccountAccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Standard) pulumi.StringOutput { return v.StorageAccountAccessKey }).(pulumi.StringOutput)
}

// The backend storage account name which will be used by this Logic App (e.g. for Stateful workflows data). Changing this forces a new resource to be created.
func (o StandardOutput) StorageAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v *Standard) pulumi.StringOutput { return v.StorageAccountName }).(pulumi.StringOutput)
}

func (o StandardOutput) StorageAccountShareName() pulumi.StringOutput {
	return o.ApplyT(func(v *Standard) pulumi.StringOutput { return v.StorageAccountShareName }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o StandardOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Standard) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Should the logic app use the bundled extension package? If true, then application settings for `AzureFunctionsJobHost__extensionBundle__id` and `AzureFunctionsJobHost__extensionBundle__version` will be created. Defaults to `true`.
func (o StandardOutput) UseExtensionBundle() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Standard) pulumi.BoolPtrOutput { return v.UseExtensionBundle }).(pulumi.BoolPtrOutput)
}

// The runtime version associated with the Logic App. Defaults to `~3`.
//
// > **Note:**  Logic App version `3.x` will be out of support from December 3 2022. For more details refer [Logic Apps Standard Support for Functions Runtime V4](https://azure.microsoft.com/en-us/updates/logic-apps-standard-support-for-functions-runtime-v4/)
func (o StandardOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Standard) pulumi.StringPtrOutput { return v.Version }).(pulumi.StringPtrOutput)
}

func (o StandardOutput) VirtualNetworkSubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Standard) pulumi.StringPtrOutput { return v.VirtualNetworkSubnetId }).(pulumi.StringPtrOutput)
}

type StandardArrayOutput struct{ *pulumi.OutputState }

func (StandardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Standard)(nil)).Elem()
}

func (o StandardArrayOutput) ToStandardArrayOutput() StandardArrayOutput {
	return o
}

func (o StandardArrayOutput) ToStandardArrayOutputWithContext(ctx context.Context) StandardArrayOutput {
	return o
}

func (o StandardArrayOutput) Index(i pulumi.IntInput) StandardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Standard {
		return vs[0].([]*Standard)[vs[1].(int)]
	}).(StandardOutput)
}

type StandardMapOutput struct{ *pulumi.OutputState }

func (StandardMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Standard)(nil)).Elem()
}

func (o StandardMapOutput) ToStandardMapOutput() StandardMapOutput {
	return o
}

func (o StandardMapOutput) ToStandardMapOutputWithContext(ctx context.Context) StandardMapOutput {
	return o
}

func (o StandardMapOutput) MapIndex(k pulumi.StringInput) StandardOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Standard {
		return vs[0].(map[string]*Standard)[vs[1].(string)]
	}).(StandardOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StandardInput)(nil)).Elem(), &Standard{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardArrayInput)(nil)).Elem(), StandardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardMapInput)(nil)).Elem(), StandardMap{})
	pulumi.RegisterOutputType(StandardOutput{})
	pulumi.RegisterOutputType(StandardArrayOutput{})
	pulumi.RegisterOutputType(StandardMapOutput{})
}
