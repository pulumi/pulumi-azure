// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package logicapps

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Logic App Integration Account Partner.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/logicapps"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West Europe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleIntegrationAccount, err := logicapps.NewIntegrationAccount(ctx, "exampleIntegrationAccount", &logicapps.IntegrationAccountArgs{
// 			Location:          exampleResourceGroup.Location,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			SkuName:           pulumi.String("Standard"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = logicapps.NewIntegrationAccountPartner(ctx, "exampleIntegrationAccountPartner", &logicapps.IntegrationAccountPartnerArgs{
// 			ResourceGroupName:      exampleResourceGroup.Name,
// 			IntegrationAccountName: exampleIntegrationAccount.Name,
// 			BusinessIdentities: logicapps.IntegrationAccountPartnerBusinessIdentityArray{
// 				&logicapps.IntegrationAccountPartnerBusinessIdentityArgs{
// 					Qualifier: pulumi.String("ZZ"),
// 					Value:     pulumi.String("AA"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Logic App Integration Account Partners can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:logicapps/integrationAccountPartner:IntegrationAccountPartner example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Logic/integrationAccounts/account1/partners/partner1
// ```
type IntegrationAccountPartner struct {
	pulumi.CustomResourceState

	// A `businessIdentity` block as documented below.
	BusinessIdentities IntegrationAccountPartnerBusinessIdentityArrayOutput `pulumi:"businessIdentities"`
	// The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Partner to be created.
	IntegrationAccountName pulumi.StringOutput `pulumi:"integrationAccountName"`
	// A JSON mapping of any Metadata for this Logic App Integration Account Partner.
	Metadata pulumi.StringPtrOutput `pulumi:"metadata"`
	// The name which should be used for this Logic App Integration Account Partner. Changing this forces a new Logic App Integration Account Partner to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Resource Group where the Logic App Integration Account Partner should exist. Changing this forces a new Logic App Integration Account Partner to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
}

// NewIntegrationAccountPartner registers a new resource with the given unique name, arguments, and options.
func NewIntegrationAccountPartner(ctx *pulumi.Context,
	name string, args *IntegrationAccountPartnerArgs, opts ...pulumi.ResourceOption) (*IntegrationAccountPartner, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BusinessIdentities == nil {
		return nil, errors.New("invalid value for required argument 'BusinessIdentities'")
	}
	if args.IntegrationAccountName == nil {
		return nil, errors.New("invalid value for required argument 'IntegrationAccountName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	var resource IntegrationAccountPartner
	err := ctx.RegisterResource("azure:logicapps/integrationAccountPartner:IntegrationAccountPartner", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationAccountPartner gets an existing IntegrationAccountPartner resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationAccountPartner(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationAccountPartnerState, opts ...pulumi.ResourceOption) (*IntegrationAccountPartner, error) {
	var resource IntegrationAccountPartner
	err := ctx.ReadResource("azure:logicapps/integrationAccountPartner:IntegrationAccountPartner", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationAccountPartner resources.
type integrationAccountPartnerState struct {
	// A `businessIdentity` block as documented below.
	BusinessIdentities []IntegrationAccountPartnerBusinessIdentity `pulumi:"businessIdentities"`
	// The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Partner to be created.
	IntegrationAccountName *string `pulumi:"integrationAccountName"`
	// A JSON mapping of any Metadata for this Logic App Integration Account Partner.
	Metadata *string `pulumi:"metadata"`
	// The name which should be used for this Logic App Integration Account Partner. Changing this forces a new Logic App Integration Account Partner to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Logic App Integration Account Partner should exist. Changing this forces a new Logic App Integration Account Partner to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
}

type IntegrationAccountPartnerState struct {
	// A `businessIdentity` block as documented below.
	BusinessIdentities IntegrationAccountPartnerBusinessIdentityArrayInput
	// The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Partner to be created.
	IntegrationAccountName pulumi.StringPtrInput
	// A JSON mapping of any Metadata for this Logic App Integration Account Partner.
	Metadata pulumi.StringPtrInput
	// The name which should be used for this Logic App Integration Account Partner. Changing this forces a new Logic App Integration Account Partner to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Logic App Integration Account Partner should exist. Changing this forces a new Logic App Integration Account Partner to be created.
	ResourceGroupName pulumi.StringPtrInput
}

func (IntegrationAccountPartnerState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationAccountPartnerState)(nil)).Elem()
}

type integrationAccountPartnerArgs struct {
	// A `businessIdentity` block as documented below.
	BusinessIdentities []IntegrationAccountPartnerBusinessIdentity `pulumi:"businessIdentities"`
	// The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Partner to be created.
	IntegrationAccountName string `pulumi:"integrationAccountName"`
	// A JSON mapping of any Metadata for this Logic App Integration Account Partner.
	Metadata *string `pulumi:"metadata"`
	// The name which should be used for this Logic App Integration Account Partner. Changing this forces a new Logic App Integration Account Partner to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Logic App Integration Account Partner should exist. Changing this forces a new Logic App Integration Account Partner to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a IntegrationAccountPartner resource.
type IntegrationAccountPartnerArgs struct {
	// A `businessIdentity` block as documented below.
	BusinessIdentities IntegrationAccountPartnerBusinessIdentityArrayInput
	// The name of the Logic App Integration Account. Changing this forces a new Logic App Integration Account Partner to be created.
	IntegrationAccountName pulumi.StringInput
	// A JSON mapping of any Metadata for this Logic App Integration Account Partner.
	Metadata pulumi.StringPtrInput
	// The name which should be used for this Logic App Integration Account Partner. Changing this forces a new Logic App Integration Account Partner to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Logic App Integration Account Partner should exist. Changing this forces a new Logic App Integration Account Partner to be created.
	ResourceGroupName pulumi.StringInput
}

func (IntegrationAccountPartnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationAccountPartnerArgs)(nil)).Elem()
}

type IntegrationAccountPartnerInput interface {
	pulumi.Input

	ToIntegrationAccountPartnerOutput() IntegrationAccountPartnerOutput
	ToIntegrationAccountPartnerOutputWithContext(ctx context.Context) IntegrationAccountPartnerOutput
}

func (*IntegrationAccountPartner) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationAccountPartner)(nil))
}

func (i *IntegrationAccountPartner) ToIntegrationAccountPartnerOutput() IntegrationAccountPartnerOutput {
	return i.ToIntegrationAccountPartnerOutputWithContext(context.Background())
}

func (i *IntegrationAccountPartner) ToIntegrationAccountPartnerOutputWithContext(ctx context.Context) IntegrationAccountPartnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountPartnerOutput)
}

func (i *IntegrationAccountPartner) ToIntegrationAccountPartnerPtrOutput() IntegrationAccountPartnerPtrOutput {
	return i.ToIntegrationAccountPartnerPtrOutputWithContext(context.Background())
}

func (i *IntegrationAccountPartner) ToIntegrationAccountPartnerPtrOutputWithContext(ctx context.Context) IntegrationAccountPartnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountPartnerPtrOutput)
}

type IntegrationAccountPartnerPtrInput interface {
	pulumi.Input

	ToIntegrationAccountPartnerPtrOutput() IntegrationAccountPartnerPtrOutput
	ToIntegrationAccountPartnerPtrOutputWithContext(ctx context.Context) IntegrationAccountPartnerPtrOutput
}

type integrationAccountPartnerPtrType IntegrationAccountPartnerArgs

func (*integrationAccountPartnerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationAccountPartner)(nil))
}

func (i *integrationAccountPartnerPtrType) ToIntegrationAccountPartnerPtrOutput() IntegrationAccountPartnerPtrOutput {
	return i.ToIntegrationAccountPartnerPtrOutputWithContext(context.Background())
}

func (i *integrationAccountPartnerPtrType) ToIntegrationAccountPartnerPtrOutputWithContext(ctx context.Context) IntegrationAccountPartnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountPartnerPtrOutput)
}

// IntegrationAccountPartnerArrayInput is an input type that accepts IntegrationAccountPartnerArray and IntegrationAccountPartnerArrayOutput values.
// You can construct a concrete instance of `IntegrationAccountPartnerArrayInput` via:
//
//          IntegrationAccountPartnerArray{ IntegrationAccountPartnerArgs{...} }
type IntegrationAccountPartnerArrayInput interface {
	pulumi.Input

	ToIntegrationAccountPartnerArrayOutput() IntegrationAccountPartnerArrayOutput
	ToIntegrationAccountPartnerArrayOutputWithContext(context.Context) IntegrationAccountPartnerArrayOutput
}

type IntegrationAccountPartnerArray []IntegrationAccountPartnerInput

func (IntegrationAccountPartnerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationAccountPartner)(nil)).Elem()
}

func (i IntegrationAccountPartnerArray) ToIntegrationAccountPartnerArrayOutput() IntegrationAccountPartnerArrayOutput {
	return i.ToIntegrationAccountPartnerArrayOutputWithContext(context.Background())
}

func (i IntegrationAccountPartnerArray) ToIntegrationAccountPartnerArrayOutputWithContext(ctx context.Context) IntegrationAccountPartnerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountPartnerArrayOutput)
}

// IntegrationAccountPartnerMapInput is an input type that accepts IntegrationAccountPartnerMap and IntegrationAccountPartnerMapOutput values.
// You can construct a concrete instance of `IntegrationAccountPartnerMapInput` via:
//
//          IntegrationAccountPartnerMap{ "key": IntegrationAccountPartnerArgs{...} }
type IntegrationAccountPartnerMapInput interface {
	pulumi.Input

	ToIntegrationAccountPartnerMapOutput() IntegrationAccountPartnerMapOutput
	ToIntegrationAccountPartnerMapOutputWithContext(context.Context) IntegrationAccountPartnerMapOutput
}

type IntegrationAccountPartnerMap map[string]IntegrationAccountPartnerInput

func (IntegrationAccountPartnerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationAccountPartner)(nil)).Elem()
}

func (i IntegrationAccountPartnerMap) ToIntegrationAccountPartnerMapOutput() IntegrationAccountPartnerMapOutput {
	return i.ToIntegrationAccountPartnerMapOutputWithContext(context.Background())
}

func (i IntegrationAccountPartnerMap) ToIntegrationAccountPartnerMapOutputWithContext(ctx context.Context) IntegrationAccountPartnerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountPartnerMapOutput)
}

type IntegrationAccountPartnerOutput struct{ *pulumi.OutputState }

func (IntegrationAccountPartnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationAccountPartner)(nil))
}

func (o IntegrationAccountPartnerOutput) ToIntegrationAccountPartnerOutput() IntegrationAccountPartnerOutput {
	return o
}

func (o IntegrationAccountPartnerOutput) ToIntegrationAccountPartnerOutputWithContext(ctx context.Context) IntegrationAccountPartnerOutput {
	return o
}

func (o IntegrationAccountPartnerOutput) ToIntegrationAccountPartnerPtrOutput() IntegrationAccountPartnerPtrOutput {
	return o.ToIntegrationAccountPartnerPtrOutputWithContext(context.Background())
}

func (o IntegrationAccountPartnerOutput) ToIntegrationAccountPartnerPtrOutputWithContext(ctx context.Context) IntegrationAccountPartnerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IntegrationAccountPartner) *IntegrationAccountPartner {
		return &v
	}).(IntegrationAccountPartnerPtrOutput)
}

type IntegrationAccountPartnerPtrOutput struct{ *pulumi.OutputState }

func (IntegrationAccountPartnerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationAccountPartner)(nil))
}

func (o IntegrationAccountPartnerPtrOutput) ToIntegrationAccountPartnerPtrOutput() IntegrationAccountPartnerPtrOutput {
	return o
}

func (o IntegrationAccountPartnerPtrOutput) ToIntegrationAccountPartnerPtrOutputWithContext(ctx context.Context) IntegrationAccountPartnerPtrOutput {
	return o
}

func (o IntegrationAccountPartnerPtrOutput) Elem() IntegrationAccountPartnerOutput {
	return o.ApplyT(func(v *IntegrationAccountPartner) IntegrationAccountPartner {
		if v != nil {
			return *v
		}
		var ret IntegrationAccountPartner
		return ret
	}).(IntegrationAccountPartnerOutput)
}

type IntegrationAccountPartnerArrayOutput struct{ *pulumi.OutputState }

func (IntegrationAccountPartnerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationAccountPartner)(nil))
}

func (o IntegrationAccountPartnerArrayOutput) ToIntegrationAccountPartnerArrayOutput() IntegrationAccountPartnerArrayOutput {
	return o
}

func (o IntegrationAccountPartnerArrayOutput) ToIntegrationAccountPartnerArrayOutputWithContext(ctx context.Context) IntegrationAccountPartnerArrayOutput {
	return o
}

func (o IntegrationAccountPartnerArrayOutput) Index(i pulumi.IntInput) IntegrationAccountPartnerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntegrationAccountPartner {
		return vs[0].([]IntegrationAccountPartner)[vs[1].(int)]
	}).(IntegrationAccountPartnerOutput)
}

type IntegrationAccountPartnerMapOutput struct{ *pulumi.OutputState }

func (IntegrationAccountPartnerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]IntegrationAccountPartner)(nil))
}

func (o IntegrationAccountPartnerMapOutput) ToIntegrationAccountPartnerMapOutput() IntegrationAccountPartnerMapOutput {
	return o
}

func (o IntegrationAccountPartnerMapOutput) ToIntegrationAccountPartnerMapOutputWithContext(ctx context.Context) IntegrationAccountPartnerMapOutput {
	return o
}

func (o IntegrationAccountPartnerMapOutput) MapIndex(k pulumi.StringInput) IntegrationAccountPartnerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) IntegrationAccountPartner {
		return vs[0].(map[string]IntegrationAccountPartner)[vs[1].(string)]
	}).(IntegrationAccountPartnerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationAccountPartnerInput)(nil)).Elem(), &IntegrationAccountPartner{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationAccountPartnerPtrInput)(nil)).Elem(), &IntegrationAccountPartner{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationAccountPartnerArrayInput)(nil)).Elem(), IntegrationAccountPartnerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationAccountPartnerMapInput)(nil)).Elem(), IntegrationAccountPartnerMap{})
	pulumi.RegisterOutputType(IntegrationAccountPartnerOutput{})
	pulumi.RegisterOutputType(IntegrationAccountPartnerPtrOutput{})
	pulumi.RegisterOutputType(IntegrationAccountPartnerArrayOutput{})
	pulumi.RegisterOutputType(IntegrationAccountPartnerMapOutput{})
}
