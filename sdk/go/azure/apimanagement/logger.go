// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a Logger within an API Management Service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/apimanagement"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/appinsights"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West US"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleInsights, err := appinsights.NewInsights(ctx, "exampleInsights", &appinsights.InsightsArgs{
// 			Location:          exampleResourceGroup.Location,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			ApplicationType:   pulumi.String("other"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleService, err := apimanagement.NewService(ctx, "exampleService", &apimanagement.ServiceArgs{
// 			Location:          exampleResourceGroup.Location,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			PublisherName:     pulumi.String("My Company"),
// 			PublisherEmail:    pulumi.String("company@exmaple.com"),
// 			SkuName:           pulumi.String("Developer_1"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = apimanagement.NewLogger(ctx, "exampleLogger", &apimanagement.LoggerArgs{
// 			ApiManagementName: exampleService.Name,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			ApplicationInsights: &apimanagement.LoggerApplicationInsightsArgs{
// 				InstrumentationKey: exampleInsights.InstrumentationKey,
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// API Management Loggers can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:apimanagement/logger:Logger example /subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/example-rg/Microsoft.ApiManagement/service/example-apim/loggers/example-logger
// ```
type Logger struct {
	pulumi.CustomResourceState

	// The name of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringOutput `pulumi:"apiManagementName"`
	// An `applicationInsights` block as documented below.
	ApplicationInsights LoggerApplicationInsightsPtrOutput `pulumi:"applicationInsights"`
	// Specifies whether records should be buffered in the Logger prior to publishing. Defaults to `true`.
	Buffered pulumi.BoolPtrOutput `pulumi:"buffered"`
	// A description of this Logger.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// An `eventhub` block as documented below.
	Eventhub LoggerEventhubPtrOutput `pulumi:"eventhub"`
	// The name of this Logger, which must be unique within the API Management Service. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
}

// NewLogger registers a new resource with the given unique name, arguments, and options.
func NewLogger(ctx *pulumi.Context,
	name string, args *LoggerArgs, opts ...pulumi.ResourceOption) (*Logger, error) {
	if args == nil || args.ApiManagementName == nil {
		return nil, errors.New("missing required argument 'ApiManagementName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &LoggerArgs{}
	}
	var resource Logger
	err := ctx.RegisterResource("azure:apimanagement/logger:Logger", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogger gets an existing Logger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoggerState, opts ...pulumi.ResourceOption) (*Logger, error) {
	var resource Logger
	err := ctx.ReadResource("azure:apimanagement/logger:Logger", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Logger resources.
type loggerState struct {
	// The name of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementName *string `pulumi:"apiManagementName"`
	// An `applicationInsights` block as documented below.
	ApplicationInsights *LoggerApplicationInsights `pulumi:"applicationInsights"`
	// Specifies whether records should be buffered in the Logger prior to publishing. Defaults to `true`.
	Buffered *bool `pulumi:"buffered"`
	// A description of this Logger.
	Description *string `pulumi:"description"`
	// An `eventhub` block as documented below.
	Eventhub *LoggerEventhub `pulumi:"eventhub"`
	// The name of this Logger, which must be unique within the API Management Service. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
}

type LoggerState struct {
	// The name of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringPtrInput
	// An `applicationInsights` block as documented below.
	ApplicationInsights LoggerApplicationInsightsPtrInput
	// Specifies whether records should be buffered in the Logger prior to publishing. Defaults to `true`.
	Buffered pulumi.BoolPtrInput
	// A description of this Logger.
	Description pulumi.StringPtrInput
	// An `eventhub` block as documented below.
	Eventhub LoggerEventhubPtrInput
	// The name of this Logger, which must be unique within the API Management Service. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
}

func (LoggerState) ElementType() reflect.Type {
	return reflect.TypeOf((*loggerState)(nil)).Elem()
}

type loggerArgs struct {
	// The name of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementName string `pulumi:"apiManagementName"`
	// An `applicationInsights` block as documented below.
	ApplicationInsights *LoggerApplicationInsights `pulumi:"applicationInsights"`
	// Specifies whether records should be buffered in the Logger prior to publishing. Defaults to `true`.
	Buffered *bool `pulumi:"buffered"`
	// A description of this Logger.
	Description *string `pulumi:"description"`
	// An `eventhub` block as documented below.
	Eventhub *LoggerEventhub `pulumi:"eventhub"`
	// The name of this Logger, which must be unique within the API Management Service. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a Logger resource.
type LoggerArgs struct {
	// The name of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringInput
	// An `applicationInsights` block as documented below.
	ApplicationInsights LoggerApplicationInsightsPtrInput
	// Specifies whether records should be buffered in the Logger prior to publishing. Defaults to `true`.
	Buffered pulumi.BoolPtrInput
	// A description of this Logger.
	Description pulumi.StringPtrInput
	// An `eventhub` block as documented below.
	Eventhub LoggerEventhubPtrInput
	// The name of this Logger, which must be unique within the API Management Service. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
}

func (LoggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loggerArgs)(nil)).Elem()
}

type LoggerInput interface {
	pulumi.Input

	ToLoggerOutput() LoggerOutput
	ToLoggerOutputWithContext(ctx context.Context) LoggerOutput
}

func (Logger) ElementType() reflect.Type {
	return reflect.TypeOf((*Logger)(nil)).Elem()
}

func (i Logger) ToLoggerOutput() LoggerOutput {
	return i.ToLoggerOutputWithContext(context.Background())
}

func (i Logger) ToLoggerOutputWithContext(ctx context.Context) LoggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggerOutput)
}

type LoggerOutput struct {
	*pulumi.OutputState
}

func (LoggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggerOutput)(nil)).Elem()
}

func (o LoggerOutput) ToLoggerOutput() LoggerOutput {
	return o
}

func (o LoggerOutput) ToLoggerOutputWithContext(ctx context.Context) LoggerOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(LoggerOutput{})
}
