// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Logger within an API Management Service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/apimanagement"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/appinsights"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleInsights, err := appinsights.NewInsights(ctx, "exampleInsights", &appinsights.InsightsArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				ApplicationType:   pulumi.String("other"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleService, err := apimanagement.NewService(ctx, "exampleService", &apimanagement.ServiceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				PublisherName:     pulumi.String("My Company"),
//				PublisherEmail:    pulumi.String("company@exmaple.com"),
//				SkuName:           pulumi.String("Developer_1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = apimanagement.NewLogger(ctx, "exampleLogger", &apimanagement.LoggerArgs{
//				ApiManagementName: exampleService.Name,
//				ResourceGroupName: exampleResourceGroup.Name,
//				ResourceId:        exampleInsights.ID(),
//				ApplicationInsights: &apimanagement.LoggerApplicationInsightsArgs{
//					InstrumentationKey: exampleInsights.InstrumentationKey,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// API Management Loggers can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:apimanagement/logger:Logger example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-rg/providers/Microsoft.ApiManagement/service/example-apim/loggers/example-logger
//
// ```
type Logger struct {
	pulumi.CustomResourceState

	// The name of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringOutput `pulumi:"apiManagementName"`
	// An `applicationInsights` block as documented below. Changing this forces a new resource to be created.
	ApplicationInsights LoggerApplicationInsightsPtrOutput `pulumi:"applicationInsights"`
	// Specifies whether records should be buffered in the Logger prior to publishing. Defaults to `true`.
	Buffered pulumi.BoolPtrOutput `pulumi:"buffered"`
	// A description of this Logger.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// An `eventhub` block as documented below. Changing this forces a new resource to be created.
	Eventhub LoggerEventhubPtrOutput `pulumi:"eventhub"`
	// The name of this Logger, which must be unique within the API Management Service. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The target resource id which will be linked in the API-Management portal page. Changing this forces a new resource to be created.
	ResourceId pulumi.StringPtrOutput `pulumi:"resourceId"`
}

// NewLogger registers a new resource with the given unique name, arguments, and options.
func NewLogger(ctx *pulumi.Context,
	name string, args *LoggerArgs, opts ...pulumi.ResourceOption) (*Logger, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiManagementName == nil {
		return nil, errors.New("invalid value for required argument 'ApiManagementName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Logger
	err := ctx.RegisterResource("azure:apimanagement/logger:Logger", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogger gets an existing Logger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoggerState, opts ...pulumi.ResourceOption) (*Logger, error) {
	var resource Logger
	err := ctx.ReadResource("azure:apimanagement/logger:Logger", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Logger resources.
type loggerState struct {
	// The name of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementName *string `pulumi:"apiManagementName"`
	// An `applicationInsights` block as documented below. Changing this forces a new resource to be created.
	ApplicationInsights *LoggerApplicationInsights `pulumi:"applicationInsights"`
	// Specifies whether records should be buffered in the Logger prior to publishing. Defaults to `true`.
	Buffered *bool `pulumi:"buffered"`
	// A description of this Logger.
	Description *string `pulumi:"description"`
	// An `eventhub` block as documented below. Changing this forces a new resource to be created.
	Eventhub *LoggerEventhub `pulumi:"eventhub"`
	// The name of this Logger, which must be unique within the API Management Service. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The target resource id which will be linked in the API-Management portal page. Changing this forces a new resource to be created.
	ResourceId *string `pulumi:"resourceId"`
}

type LoggerState struct {
	// The name of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringPtrInput
	// An `applicationInsights` block as documented below. Changing this forces a new resource to be created.
	ApplicationInsights LoggerApplicationInsightsPtrInput
	// Specifies whether records should be buffered in the Logger prior to publishing. Defaults to `true`.
	Buffered pulumi.BoolPtrInput
	// A description of this Logger.
	Description pulumi.StringPtrInput
	// An `eventhub` block as documented below. Changing this forces a new resource to be created.
	Eventhub LoggerEventhubPtrInput
	// The name of this Logger, which must be unique within the API Management Service. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The target resource id which will be linked in the API-Management portal page. Changing this forces a new resource to be created.
	ResourceId pulumi.StringPtrInput
}

func (LoggerState) ElementType() reflect.Type {
	return reflect.TypeOf((*loggerState)(nil)).Elem()
}

type loggerArgs struct {
	// The name of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementName string `pulumi:"apiManagementName"`
	// An `applicationInsights` block as documented below. Changing this forces a new resource to be created.
	ApplicationInsights *LoggerApplicationInsights `pulumi:"applicationInsights"`
	// Specifies whether records should be buffered in the Logger prior to publishing. Defaults to `true`.
	Buffered *bool `pulumi:"buffered"`
	// A description of this Logger.
	Description *string `pulumi:"description"`
	// An `eventhub` block as documented below. Changing this forces a new resource to be created.
	Eventhub *LoggerEventhub `pulumi:"eventhub"`
	// The name of this Logger, which must be unique within the API Management Service. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The target resource id which will be linked in the API-Management portal page. Changing this forces a new resource to be created.
	ResourceId *string `pulumi:"resourceId"`
}

// The set of arguments for constructing a Logger resource.
type LoggerArgs struct {
	// The name of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringInput
	// An `applicationInsights` block as documented below. Changing this forces a new resource to be created.
	ApplicationInsights LoggerApplicationInsightsPtrInput
	// Specifies whether records should be buffered in the Logger prior to publishing. Defaults to `true`.
	Buffered pulumi.BoolPtrInput
	// A description of this Logger.
	Description pulumi.StringPtrInput
	// An `eventhub` block as documented below. Changing this forces a new resource to be created.
	Eventhub LoggerEventhubPtrInput
	// The name of this Logger, which must be unique within the API Management Service. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// The target resource id which will be linked in the API-Management portal page. Changing this forces a new resource to be created.
	ResourceId pulumi.StringPtrInput
}

func (LoggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loggerArgs)(nil)).Elem()
}

type LoggerInput interface {
	pulumi.Input

	ToLoggerOutput() LoggerOutput
	ToLoggerOutputWithContext(ctx context.Context) LoggerOutput
}

func (*Logger) ElementType() reflect.Type {
	return reflect.TypeOf((**Logger)(nil)).Elem()
}

func (i *Logger) ToLoggerOutput() LoggerOutput {
	return i.ToLoggerOutputWithContext(context.Background())
}

func (i *Logger) ToLoggerOutputWithContext(ctx context.Context) LoggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggerOutput)
}

// LoggerArrayInput is an input type that accepts LoggerArray and LoggerArrayOutput values.
// You can construct a concrete instance of `LoggerArrayInput` via:
//
//	LoggerArray{ LoggerArgs{...} }
type LoggerArrayInput interface {
	pulumi.Input

	ToLoggerArrayOutput() LoggerArrayOutput
	ToLoggerArrayOutputWithContext(context.Context) LoggerArrayOutput
}

type LoggerArray []LoggerInput

func (LoggerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Logger)(nil)).Elem()
}

func (i LoggerArray) ToLoggerArrayOutput() LoggerArrayOutput {
	return i.ToLoggerArrayOutputWithContext(context.Background())
}

func (i LoggerArray) ToLoggerArrayOutputWithContext(ctx context.Context) LoggerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggerArrayOutput)
}

// LoggerMapInput is an input type that accepts LoggerMap and LoggerMapOutput values.
// You can construct a concrete instance of `LoggerMapInput` via:
//
//	LoggerMap{ "key": LoggerArgs{...} }
type LoggerMapInput interface {
	pulumi.Input

	ToLoggerMapOutput() LoggerMapOutput
	ToLoggerMapOutputWithContext(context.Context) LoggerMapOutput
}

type LoggerMap map[string]LoggerInput

func (LoggerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Logger)(nil)).Elem()
}

func (i LoggerMap) ToLoggerMapOutput() LoggerMapOutput {
	return i.ToLoggerMapOutputWithContext(context.Background())
}

func (i LoggerMap) ToLoggerMapOutputWithContext(ctx context.Context) LoggerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggerMapOutput)
}

type LoggerOutput struct{ *pulumi.OutputState }

func (LoggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Logger)(nil)).Elem()
}

func (o LoggerOutput) ToLoggerOutput() LoggerOutput {
	return o
}

func (o LoggerOutput) ToLoggerOutputWithContext(ctx context.Context) LoggerOutput {
	return o
}

// The name of the API Management Service. Changing this forces a new resource to be created.
func (o LoggerOutput) ApiManagementName() pulumi.StringOutput {
	return o.ApplyT(func(v *Logger) pulumi.StringOutput { return v.ApiManagementName }).(pulumi.StringOutput)
}

// An `applicationInsights` block as documented below. Changing this forces a new resource to be created.
func (o LoggerOutput) ApplicationInsights() LoggerApplicationInsightsPtrOutput {
	return o.ApplyT(func(v *Logger) LoggerApplicationInsightsPtrOutput { return v.ApplicationInsights }).(LoggerApplicationInsightsPtrOutput)
}

// Specifies whether records should be buffered in the Logger prior to publishing. Defaults to `true`.
func (o LoggerOutput) Buffered() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Logger) pulumi.BoolPtrOutput { return v.Buffered }).(pulumi.BoolPtrOutput)
}

// A description of this Logger.
func (o LoggerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Logger) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// An `eventhub` block as documented below. Changing this forces a new resource to be created.
func (o LoggerOutput) Eventhub() LoggerEventhubPtrOutput {
	return o.ApplyT(func(v *Logger) LoggerEventhubPtrOutput { return v.Eventhub }).(LoggerEventhubPtrOutput)
}

// The name of this Logger, which must be unique within the API Management Service. Changing this forces a new resource to be created.
func (o LoggerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Logger) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
func (o LoggerOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Logger) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The target resource id which will be linked in the API-Management portal page. Changing this forces a new resource to be created.
func (o LoggerOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Logger) pulumi.StringPtrOutput { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type LoggerArrayOutput struct{ *pulumi.OutputState }

func (LoggerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Logger)(nil)).Elem()
}

func (o LoggerArrayOutput) ToLoggerArrayOutput() LoggerArrayOutput {
	return o
}

func (o LoggerArrayOutput) ToLoggerArrayOutputWithContext(ctx context.Context) LoggerArrayOutput {
	return o
}

func (o LoggerArrayOutput) Index(i pulumi.IntInput) LoggerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Logger {
		return vs[0].([]*Logger)[vs[1].(int)]
	}).(LoggerOutput)
}

type LoggerMapOutput struct{ *pulumi.OutputState }

func (LoggerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Logger)(nil)).Elem()
}

func (o LoggerMapOutput) ToLoggerMapOutput() LoggerMapOutput {
	return o
}

func (o LoggerMapOutput) ToLoggerMapOutputWithContext(ctx context.Context) LoggerMapOutput {
	return o
}

func (o LoggerMapOutput) MapIndex(k pulumi.StringInput) LoggerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Logger {
		return vs[0].(map[string]*Logger)[vs[1].(string)]
	}).(LoggerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoggerInput)(nil)).Elem(), &Logger{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggerArrayInput)(nil)).Elem(), LoggerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggerMapInput)(nil)).Elem(), LoggerMap{})
	pulumi.RegisterOutputType(LoggerOutput{})
	pulumi.RegisterOutputType(LoggerArrayOutput{})
	pulumi.RegisterOutputType(LoggerMapOutput{})
}
