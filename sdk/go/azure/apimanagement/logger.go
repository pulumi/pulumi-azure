// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Logger within an API Management Service.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/api_management_logger.html.markdown.
type Logger struct {
	s *pulumi.ResourceState
}

// NewLogger registers a new resource with the given unique name, arguments, and options.
func NewLogger(ctx *pulumi.Context,
	name string, args *LoggerArgs, opts ...pulumi.ResourceOpt) (*Logger, error) {
	if args == nil || args.ApiManagementName == nil {
		return nil, errors.New("missing required argument 'ApiManagementName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["apiManagementName"] = nil
		inputs["applicationInsights"] = nil
		inputs["buffered"] = nil
		inputs["description"] = nil
		inputs["eventhub"] = nil
		inputs["name"] = nil
		inputs["resourceGroupName"] = nil
	} else {
		inputs["apiManagementName"] = args.ApiManagementName
		inputs["applicationInsights"] = args.ApplicationInsights
		inputs["buffered"] = args.Buffered
		inputs["description"] = args.Description
		inputs["eventhub"] = args.Eventhub
		inputs["name"] = args.Name
		inputs["resourceGroupName"] = args.ResourceGroupName
	}
	s, err := ctx.RegisterResource("azure:apimanagement/logger:Logger", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Logger{s: s}, nil
}

// GetLogger gets an existing Logger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogger(ctx *pulumi.Context,
	name string, id pulumi.ID, state *LoggerState, opts ...pulumi.ResourceOpt) (*Logger, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["apiManagementName"] = state.ApiManagementName
		inputs["applicationInsights"] = state.ApplicationInsights
		inputs["buffered"] = state.Buffered
		inputs["description"] = state.Description
		inputs["eventhub"] = state.Eventhub
		inputs["name"] = state.Name
		inputs["resourceGroupName"] = state.ResourceGroupName
	}
	s, err := ctx.ReadResource("azure:apimanagement/logger:Logger", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Logger{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Logger) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Logger) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The name of the API Management Service. Changing this forces a new resource to be created.
func (r *Logger) ApiManagementName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["apiManagementName"])
}

// An `applicationInsights` block as documented below.
func (r *Logger) ApplicationInsights() pulumi.Output {
	return r.s.State["applicationInsights"]
}

// Specifies whether records should be buffered in the Logger prior to publishing. Defaults to `true`.
func (r *Logger) Buffered() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["buffered"])
}

// A description of this Logger.
func (r *Logger) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// An `eventhub` block as documented below.
func (r *Logger) Eventhub() pulumi.Output {
	return r.s.State["eventhub"]
}

// The name of this Logger, which must be unique within the API Management Service. Changing this forces a new resource to be created.
func (r *Logger) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
func (r *Logger) ResourceGroupName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// Input properties used for looking up and filtering Logger resources.
type LoggerState struct {
	// The name of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementName interface{}
	// An `applicationInsights` block as documented below.
	ApplicationInsights interface{}
	// Specifies whether records should be buffered in the Logger prior to publishing. Defaults to `true`.
	Buffered interface{}
	// A description of this Logger.
	Description interface{}
	// An `eventhub` block as documented below.
	Eventhub interface{}
	// The name of this Logger, which must be unique within the API Management Service. Changing this forces a new resource to be created.
	Name interface{}
	// The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
}

// The set of arguments for constructing a Logger resource.
type LoggerArgs struct {
	// The name of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementName interface{}
	// An `applicationInsights` block as documented below.
	ApplicationInsights interface{}
	// Specifies whether records should be buffered in the Logger prior to publishing. Defaults to `true`.
	Buffered interface{}
	// A description of this Logger.
	Description interface{}
	// An `eventhub` block as documented below.
	Eventhub interface{}
	// The name of this Logger, which must be unique within the API Management Service. Changing this forces a new resource to be created.
	Name interface{}
	// The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
}
