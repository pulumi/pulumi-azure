// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a API Management Notification Recipient User.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/apimanagement"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleService, err := apimanagement.NewService(ctx, "exampleService", &apimanagement.ServiceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				PublisherName:     pulumi.String("My Company"),
//				PublisherEmail:    pulumi.String("company@terraform.io"),
//				SkuName:           pulumi.String("Developer_1"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleUser, err := apimanagement.NewUser(ctx, "exampleUser", &apimanagement.UserArgs{
//				UserId:            pulumi.String("123"),
//				ApiManagementName: exampleService.Name,
//				ResourceGroupName: exampleResourceGroup.Name,
//				FirstName:         pulumi.String("Example"),
//				LastName:          pulumi.String("User"),
//				Email:             pulumi.String("foo@bar.com"),
//				State:             pulumi.String("active"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = apimanagement.NewNotificationRecipientUser(ctx, "exampleNotificationRecipientUser", &apimanagement.NotificationRecipientUserArgs{
//				ApiManagementId:  exampleService.ID(),
//				NotificationType: pulumi.String("AccountClosedPublisher"),
//				UserId:           exampleUser.UserId,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// API Management Notification Recipient Users can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:apimanagement/notificationRecipientUser:NotificationRecipientUser example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.ApiManagement/service/service1/notifications/notificationName1/recipientUsers/userid1
//
// ```
type NotificationRecipientUser struct {
	pulumi.CustomResourceState

	// The ID of the API Management Service from which to create this Notification Recipient User. Changing this forces a new API Management Notification Recipient User to be created.
	ApiManagementId pulumi.StringOutput `pulumi:"apiManagementId"`
	// The Notification Name to be received. Changing this forces a new API Management Notification Recipient User to be created. Possible values are `AccountClosedPublisher`, `BCC`, `NewApplicationNotificationMessage`, `NewIssuePublisherNotificationMessage`, `PurchasePublisherNotificationMessage`, `QuotaLimitApproachingPublisherNotificationMessage`, and `RequestPublisherNotificationMessage`.
	NotificationType pulumi.StringOutput `pulumi:"notificationType"`
	// The recipient user ID. Changing this forces a new API Management Notification Recipient User to be created.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewNotificationRecipientUser registers a new resource with the given unique name, arguments, and options.
func NewNotificationRecipientUser(ctx *pulumi.Context,
	name string, args *NotificationRecipientUserArgs, opts ...pulumi.ResourceOption) (*NotificationRecipientUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiManagementId == nil {
		return nil, errors.New("invalid value for required argument 'ApiManagementId'")
	}
	if args.NotificationType == nil {
		return nil, errors.New("invalid value for required argument 'NotificationType'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NotificationRecipientUser
	err := ctx.RegisterResource("azure:apimanagement/notificationRecipientUser:NotificationRecipientUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotificationRecipientUser gets an existing NotificationRecipientUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotificationRecipientUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotificationRecipientUserState, opts ...pulumi.ResourceOption) (*NotificationRecipientUser, error) {
	var resource NotificationRecipientUser
	err := ctx.ReadResource("azure:apimanagement/notificationRecipientUser:NotificationRecipientUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NotificationRecipientUser resources.
type notificationRecipientUserState struct {
	// The ID of the API Management Service from which to create this Notification Recipient User. Changing this forces a new API Management Notification Recipient User to be created.
	ApiManagementId *string `pulumi:"apiManagementId"`
	// The Notification Name to be received. Changing this forces a new API Management Notification Recipient User to be created. Possible values are `AccountClosedPublisher`, `BCC`, `NewApplicationNotificationMessage`, `NewIssuePublisherNotificationMessage`, `PurchasePublisherNotificationMessage`, `QuotaLimitApproachingPublisherNotificationMessage`, and `RequestPublisherNotificationMessage`.
	NotificationType *string `pulumi:"notificationType"`
	// The recipient user ID. Changing this forces a new API Management Notification Recipient User to be created.
	UserId *string `pulumi:"userId"`
}

type NotificationRecipientUserState struct {
	// The ID of the API Management Service from which to create this Notification Recipient User. Changing this forces a new API Management Notification Recipient User to be created.
	ApiManagementId pulumi.StringPtrInput
	// The Notification Name to be received. Changing this forces a new API Management Notification Recipient User to be created. Possible values are `AccountClosedPublisher`, `BCC`, `NewApplicationNotificationMessage`, `NewIssuePublisherNotificationMessage`, `PurchasePublisherNotificationMessage`, `QuotaLimitApproachingPublisherNotificationMessage`, and `RequestPublisherNotificationMessage`.
	NotificationType pulumi.StringPtrInput
	// The recipient user ID. Changing this forces a new API Management Notification Recipient User to be created.
	UserId pulumi.StringPtrInput
}

func (NotificationRecipientUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationRecipientUserState)(nil)).Elem()
}

type notificationRecipientUserArgs struct {
	// The ID of the API Management Service from which to create this Notification Recipient User. Changing this forces a new API Management Notification Recipient User to be created.
	ApiManagementId string `pulumi:"apiManagementId"`
	// The Notification Name to be received. Changing this forces a new API Management Notification Recipient User to be created. Possible values are `AccountClosedPublisher`, `BCC`, `NewApplicationNotificationMessage`, `NewIssuePublisherNotificationMessage`, `PurchasePublisherNotificationMessage`, `QuotaLimitApproachingPublisherNotificationMessage`, and `RequestPublisherNotificationMessage`.
	NotificationType string `pulumi:"notificationType"`
	// The recipient user ID. Changing this forces a new API Management Notification Recipient User to be created.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a NotificationRecipientUser resource.
type NotificationRecipientUserArgs struct {
	// The ID of the API Management Service from which to create this Notification Recipient User. Changing this forces a new API Management Notification Recipient User to be created.
	ApiManagementId pulumi.StringInput
	// The Notification Name to be received. Changing this forces a new API Management Notification Recipient User to be created. Possible values are `AccountClosedPublisher`, `BCC`, `NewApplicationNotificationMessage`, `NewIssuePublisherNotificationMessage`, `PurchasePublisherNotificationMessage`, `QuotaLimitApproachingPublisherNotificationMessage`, and `RequestPublisherNotificationMessage`.
	NotificationType pulumi.StringInput
	// The recipient user ID. Changing this forces a new API Management Notification Recipient User to be created.
	UserId pulumi.StringInput
}

func (NotificationRecipientUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationRecipientUserArgs)(nil)).Elem()
}

type NotificationRecipientUserInput interface {
	pulumi.Input

	ToNotificationRecipientUserOutput() NotificationRecipientUserOutput
	ToNotificationRecipientUserOutputWithContext(ctx context.Context) NotificationRecipientUserOutput
}

func (*NotificationRecipientUser) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationRecipientUser)(nil)).Elem()
}

func (i *NotificationRecipientUser) ToNotificationRecipientUserOutput() NotificationRecipientUserOutput {
	return i.ToNotificationRecipientUserOutputWithContext(context.Background())
}

func (i *NotificationRecipientUser) ToNotificationRecipientUserOutputWithContext(ctx context.Context) NotificationRecipientUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationRecipientUserOutput)
}

// NotificationRecipientUserArrayInput is an input type that accepts NotificationRecipientUserArray and NotificationRecipientUserArrayOutput values.
// You can construct a concrete instance of `NotificationRecipientUserArrayInput` via:
//
//	NotificationRecipientUserArray{ NotificationRecipientUserArgs{...} }
type NotificationRecipientUserArrayInput interface {
	pulumi.Input

	ToNotificationRecipientUserArrayOutput() NotificationRecipientUserArrayOutput
	ToNotificationRecipientUserArrayOutputWithContext(context.Context) NotificationRecipientUserArrayOutput
}

type NotificationRecipientUserArray []NotificationRecipientUserInput

func (NotificationRecipientUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotificationRecipientUser)(nil)).Elem()
}

func (i NotificationRecipientUserArray) ToNotificationRecipientUserArrayOutput() NotificationRecipientUserArrayOutput {
	return i.ToNotificationRecipientUserArrayOutputWithContext(context.Background())
}

func (i NotificationRecipientUserArray) ToNotificationRecipientUserArrayOutputWithContext(ctx context.Context) NotificationRecipientUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationRecipientUserArrayOutput)
}

// NotificationRecipientUserMapInput is an input type that accepts NotificationRecipientUserMap and NotificationRecipientUserMapOutput values.
// You can construct a concrete instance of `NotificationRecipientUserMapInput` via:
//
//	NotificationRecipientUserMap{ "key": NotificationRecipientUserArgs{...} }
type NotificationRecipientUserMapInput interface {
	pulumi.Input

	ToNotificationRecipientUserMapOutput() NotificationRecipientUserMapOutput
	ToNotificationRecipientUserMapOutputWithContext(context.Context) NotificationRecipientUserMapOutput
}

type NotificationRecipientUserMap map[string]NotificationRecipientUserInput

func (NotificationRecipientUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotificationRecipientUser)(nil)).Elem()
}

func (i NotificationRecipientUserMap) ToNotificationRecipientUserMapOutput() NotificationRecipientUserMapOutput {
	return i.ToNotificationRecipientUserMapOutputWithContext(context.Background())
}

func (i NotificationRecipientUserMap) ToNotificationRecipientUserMapOutputWithContext(ctx context.Context) NotificationRecipientUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationRecipientUserMapOutput)
}

type NotificationRecipientUserOutput struct{ *pulumi.OutputState }

func (NotificationRecipientUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationRecipientUser)(nil)).Elem()
}

func (o NotificationRecipientUserOutput) ToNotificationRecipientUserOutput() NotificationRecipientUserOutput {
	return o
}

func (o NotificationRecipientUserOutput) ToNotificationRecipientUserOutputWithContext(ctx context.Context) NotificationRecipientUserOutput {
	return o
}

// The ID of the API Management Service from which to create this Notification Recipient User. Changing this forces a new API Management Notification Recipient User to be created.
func (o NotificationRecipientUserOutput) ApiManagementId() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationRecipientUser) pulumi.StringOutput { return v.ApiManagementId }).(pulumi.StringOutput)
}

// The Notification Name to be received. Changing this forces a new API Management Notification Recipient User to be created. Possible values are `AccountClosedPublisher`, `BCC`, `NewApplicationNotificationMessage`, `NewIssuePublisherNotificationMessage`, `PurchasePublisherNotificationMessage`, `QuotaLimitApproachingPublisherNotificationMessage`, and `RequestPublisherNotificationMessage`.
func (o NotificationRecipientUserOutput) NotificationType() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationRecipientUser) pulumi.StringOutput { return v.NotificationType }).(pulumi.StringOutput)
}

// The recipient user ID. Changing this forces a new API Management Notification Recipient User to be created.
func (o NotificationRecipientUserOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationRecipientUser) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type NotificationRecipientUserArrayOutput struct{ *pulumi.OutputState }

func (NotificationRecipientUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotificationRecipientUser)(nil)).Elem()
}

func (o NotificationRecipientUserArrayOutput) ToNotificationRecipientUserArrayOutput() NotificationRecipientUserArrayOutput {
	return o
}

func (o NotificationRecipientUserArrayOutput) ToNotificationRecipientUserArrayOutputWithContext(ctx context.Context) NotificationRecipientUserArrayOutput {
	return o
}

func (o NotificationRecipientUserArrayOutput) Index(i pulumi.IntInput) NotificationRecipientUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NotificationRecipientUser {
		return vs[0].([]*NotificationRecipientUser)[vs[1].(int)]
	}).(NotificationRecipientUserOutput)
}

type NotificationRecipientUserMapOutput struct{ *pulumi.OutputState }

func (NotificationRecipientUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotificationRecipientUser)(nil)).Elem()
}

func (o NotificationRecipientUserMapOutput) ToNotificationRecipientUserMapOutput() NotificationRecipientUserMapOutput {
	return o
}

func (o NotificationRecipientUserMapOutput) ToNotificationRecipientUserMapOutputWithContext(ctx context.Context) NotificationRecipientUserMapOutput {
	return o
}

func (o NotificationRecipientUserMapOutput) MapIndex(k pulumi.StringInput) NotificationRecipientUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NotificationRecipientUser {
		return vs[0].(map[string]*NotificationRecipientUser)[vs[1].(string)]
	}).(NotificationRecipientUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationRecipientUserInput)(nil)).Elem(), &NotificationRecipientUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationRecipientUserArrayInput)(nil)).Elem(), NotificationRecipientUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationRecipientUserMapInput)(nil)).Elem(), NotificationRecipientUserMap{})
	pulumi.RegisterOutputType(NotificationRecipientUserOutput{})
	pulumi.RegisterOutputType(NotificationRecipientUserArrayOutput{})
	pulumi.RegisterOutputType(NotificationRecipientUserMapOutput{})
}
