// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages the Assignment of an API Management API Tag to an API.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/apimanagement"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleService := apimanagement.LookupServiceOutput(ctx, apimanagement.GetServiceOutputArgs{
//				Name:              pulumi.String("example-apim"),
//				ResourceGroupName: exampleResourceGroup.Name,
//			}, nil)
//			exampleApi, err := apimanagement.NewApi(ctx, "exampleApi", &apimanagement.ApiArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				ApiManagementName: exampleService.ApplyT(func(exampleService apimanagement.GetServiceResult) (*string, error) {
//					return &exampleService.Name, nil
//				}).(pulumi.StringPtrOutput),
//				Revision: pulumi.String("1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = apimanagement.NewTag(ctx, "exampleTag", &apimanagement.TagArgs{
//				ApiManagementId: exampleService.ApplyT(func(exampleService apimanagement.GetServiceResult) (*string, error) {
//					return &exampleService.Id, nil
//				}).(pulumi.StringPtrOutput),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = apimanagement.NewApiTag(ctx, "exampleApiTag", &apimanagement.ApiTagArgs{
//				ApiId: exampleApi.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// API Management API Tags can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:apimanagement/apiTag:ApiTag example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.ApiManagement/service/service1/apis/api1/tags/tag1
//
// ```
type ApiTag struct {
	pulumi.CustomResourceState

	// The ID of the API Management API. Changing this forces a new API Management API Tag to be created.
	ApiId pulumi.StringOutput `pulumi:"apiId"`
	// The name of the tag. It must be known in the API Management instance. Changing this forces a new API Management API Tag to be created.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewApiTag registers a new resource with the given unique name, arguments, and options.
func NewApiTag(ctx *pulumi.Context,
	name string, args *ApiTagArgs, opts ...pulumi.ResourceOption) (*ApiTag, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApiTag
	err := ctx.RegisterResource("azure:apimanagement/apiTag:ApiTag", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApiTag gets an existing ApiTag resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApiTag(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiTagState, opts ...pulumi.ResourceOption) (*ApiTag, error) {
	var resource ApiTag
	err := ctx.ReadResource("azure:apimanagement/apiTag:ApiTag", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApiTag resources.
type apiTagState struct {
	// The ID of the API Management API. Changing this forces a new API Management API Tag to be created.
	ApiId *string `pulumi:"apiId"`
	// The name of the tag. It must be known in the API Management instance. Changing this forces a new API Management API Tag to be created.
	Name *string `pulumi:"name"`
}

type ApiTagState struct {
	// The ID of the API Management API. Changing this forces a new API Management API Tag to be created.
	ApiId pulumi.StringPtrInput
	// The name of the tag. It must be known in the API Management instance. Changing this forces a new API Management API Tag to be created.
	Name pulumi.StringPtrInput
}

func (ApiTagState) ElementType() reflect.Type {
	return reflect.TypeOf((*apiTagState)(nil)).Elem()
}

type apiTagArgs struct {
	// The ID of the API Management API. Changing this forces a new API Management API Tag to be created.
	ApiId string `pulumi:"apiId"`
	// The name of the tag. It must be known in the API Management instance. Changing this forces a new API Management API Tag to be created.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a ApiTag resource.
type ApiTagArgs struct {
	// The ID of the API Management API. Changing this forces a new API Management API Tag to be created.
	ApiId pulumi.StringInput
	// The name of the tag. It must be known in the API Management instance. Changing this forces a new API Management API Tag to be created.
	Name pulumi.StringPtrInput
}

func (ApiTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apiTagArgs)(nil)).Elem()
}

type ApiTagInput interface {
	pulumi.Input

	ToApiTagOutput() ApiTagOutput
	ToApiTagOutputWithContext(ctx context.Context) ApiTagOutput
}

func (*ApiTag) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiTag)(nil)).Elem()
}

func (i *ApiTag) ToApiTagOutput() ApiTagOutput {
	return i.ToApiTagOutputWithContext(context.Background())
}

func (i *ApiTag) ToApiTagOutputWithContext(ctx context.Context) ApiTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiTagOutput)
}

// ApiTagArrayInput is an input type that accepts ApiTagArray and ApiTagArrayOutput values.
// You can construct a concrete instance of `ApiTagArrayInput` via:
//
//	ApiTagArray{ ApiTagArgs{...} }
type ApiTagArrayInput interface {
	pulumi.Input

	ToApiTagArrayOutput() ApiTagArrayOutput
	ToApiTagArrayOutputWithContext(context.Context) ApiTagArrayOutput
}

type ApiTagArray []ApiTagInput

func (ApiTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiTag)(nil)).Elem()
}

func (i ApiTagArray) ToApiTagArrayOutput() ApiTagArrayOutput {
	return i.ToApiTagArrayOutputWithContext(context.Background())
}

func (i ApiTagArray) ToApiTagArrayOutputWithContext(ctx context.Context) ApiTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiTagArrayOutput)
}

// ApiTagMapInput is an input type that accepts ApiTagMap and ApiTagMapOutput values.
// You can construct a concrete instance of `ApiTagMapInput` via:
//
//	ApiTagMap{ "key": ApiTagArgs{...} }
type ApiTagMapInput interface {
	pulumi.Input

	ToApiTagMapOutput() ApiTagMapOutput
	ToApiTagMapOutputWithContext(context.Context) ApiTagMapOutput
}

type ApiTagMap map[string]ApiTagInput

func (ApiTagMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiTag)(nil)).Elem()
}

func (i ApiTagMap) ToApiTagMapOutput() ApiTagMapOutput {
	return i.ToApiTagMapOutputWithContext(context.Background())
}

func (i ApiTagMap) ToApiTagMapOutputWithContext(ctx context.Context) ApiTagMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiTagMapOutput)
}

type ApiTagOutput struct{ *pulumi.OutputState }

func (ApiTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiTag)(nil)).Elem()
}

func (o ApiTagOutput) ToApiTagOutput() ApiTagOutput {
	return o
}

func (o ApiTagOutput) ToApiTagOutputWithContext(ctx context.Context) ApiTagOutput {
	return o
}

// The ID of the API Management API. Changing this forces a new API Management API Tag to be created.
func (o ApiTagOutput) ApiId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiTag) pulumi.StringOutput { return v.ApiId }).(pulumi.StringOutput)
}

// The name of the tag. It must be known in the API Management instance. Changing this forces a new API Management API Tag to be created.
func (o ApiTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiTag) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type ApiTagArrayOutput struct{ *pulumi.OutputState }

func (ApiTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiTag)(nil)).Elem()
}

func (o ApiTagArrayOutput) ToApiTagArrayOutput() ApiTagArrayOutput {
	return o
}

func (o ApiTagArrayOutput) ToApiTagArrayOutputWithContext(ctx context.Context) ApiTagArrayOutput {
	return o
}

func (o ApiTagArrayOutput) Index(i pulumi.IntInput) ApiTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApiTag {
		return vs[0].([]*ApiTag)[vs[1].(int)]
	}).(ApiTagOutput)
}

type ApiTagMapOutput struct{ *pulumi.OutputState }

func (ApiTagMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiTag)(nil)).Elem()
}

func (o ApiTagMapOutput) ToApiTagMapOutput() ApiTagMapOutput {
	return o
}

func (o ApiTagMapOutput) ToApiTagMapOutputWithContext(ctx context.Context) ApiTagMapOutput {
	return o
}

func (o ApiTagMapOutput) MapIndex(k pulumi.StringInput) ApiTagOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApiTag {
		return vs[0].(map[string]*ApiTag)[vs[1].(string)]
	}).(ApiTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApiTagInput)(nil)).Elem(), &ApiTag{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiTagArrayInput)(nil)).Elem(), ApiTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiTagMapInput)(nil)).Elem(), ApiTagMap{})
	pulumi.RegisterOutputType(ApiTagOutput{})
	pulumi.RegisterOutputType(ApiTagArrayOutput{})
	pulumi.RegisterOutputType(ApiTagMapOutput{})
}
