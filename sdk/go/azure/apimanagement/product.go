// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an API Management Product.
type Product struct {
	s *pulumi.ResourceState
}

// NewProduct registers a new resource with the given unique name, arguments, and options.
func NewProduct(ctx *pulumi.Context,
	name string, args *ProductArgs, opts ...pulumi.ResourceOpt) (*Product, error) {
	if args == nil || args.ApiManagementName == nil {
		return nil, errors.New("missing required argument 'ApiManagementName'")
	}
	if args == nil || args.DisplayName == nil {
		return nil, errors.New("missing required argument 'DisplayName'")
	}
	if args == nil || args.ProductId == nil {
		return nil, errors.New("missing required argument 'ProductId'")
	}
	if args == nil || args.Published == nil {
		return nil, errors.New("missing required argument 'Published'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.SubscriptionRequired == nil {
		return nil, errors.New("missing required argument 'SubscriptionRequired'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["apiManagementName"] = nil
		inputs["approvalRequired"] = nil
		inputs["description"] = nil
		inputs["displayName"] = nil
		inputs["productId"] = nil
		inputs["published"] = nil
		inputs["resourceGroupName"] = nil
		inputs["subscriptionRequired"] = nil
		inputs["subscriptionsLimit"] = nil
		inputs["terms"] = nil
	} else {
		inputs["apiManagementName"] = args.ApiManagementName
		inputs["approvalRequired"] = args.ApprovalRequired
		inputs["description"] = args.Description
		inputs["displayName"] = args.DisplayName
		inputs["productId"] = args.ProductId
		inputs["published"] = args.Published
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["subscriptionRequired"] = args.SubscriptionRequired
		inputs["subscriptionsLimit"] = args.SubscriptionsLimit
		inputs["terms"] = args.Terms
	}
	s, err := ctx.RegisterResource("azure:apimanagement/product:Product", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Product{s: s}, nil
}

// GetProduct gets an existing Product resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProduct(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ProductState, opts ...pulumi.ResourceOpt) (*Product, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["apiManagementName"] = state.ApiManagementName
		inputs["approvalRequired"] = state.ApprovalRequired
		inputs["description"] = state.Description
		inputs["displayName"] = state.DisplayName
		inputs["productId"] = state.ProductId
		inputs["published"] = state.Published
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["subscriptionRequired"] = state.SubscriptionRequired
		inputs["subscriptionsLimit"] = state.SubscriptionsLimit
		inputs["terms"] = state.Terms
	}
	s, err := ctx.ReadResource("azure:apimanagement/product:Product", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Product{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Product) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Product) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The name of the API Management Service. Changing this forces a new resource to be created.
func (r *Product) ApiManagementName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["apiManagementName"])
}

// Do subscribers need to be approved prior to being able to use the Product?
func (r *Product) ApprovalRequired() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["approvalRequired"])
}

// A description of this Product, which may include HTML formatting tags.
func (r *Product) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The Display Name for this API Management Product.
func (r *Product) DisplayName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["displayName"])
}

// The Identifier for this Product, which must be unique within the API Management Service. Changing this forces a new resource to be created.
func (r *Product) ProductId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["productId"])
}

// Is this Product Published?
func (r *Product) Published() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["published"])
}

// The name of the Resource Group in which the API Management Service should be exist. Changing this forces a new resource to be created.
func (r *Product) ResourceGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// Is a Subscription required to access API's included in this Product?
func (r *Product) SubscriptionRequired() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["subscriptionRequired"])
}

// The number of subscriptions a user can have to this Product at the same time.
func (r *Product) SubscriptionsLimit() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["subscriptionsLimit"])
}

// The Terms and Conditions for this Product, which must be accepted by Developers before they can begin the Subscription process.
func (r *Product) Terms() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["terms"])
}

// Input properties used for looking up and filtering Product resources.
type ProductState struct {
	// The name of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementName interface{}
	// Do subscribers need to be approved prior to being able to use the Product?
	ApprovalRequired interface{}
	// A description of this Product, which may include HTML formatting tags.
	Description interface{}
	// The Display Name for this API Management Product.
	DisplayName interface{}
	// The Identifier for this Product, which must be unique within the API Management Service. Changing this forces a new resource to be created.
	ProductId interface{}
	// Is this Product Published?
	Published interface{}
	// The name of the Resource Group in which the API Management Service should be exist. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// Is a Subscription required to access API's included in this Product?
	SubscriptionRequired interface{}
	// The number of subscriptions a user can have to this Product at the same time.
	SubscriptionsLimit interface{}
	// The Terms and Conditions for this Product, which must be accepted by Developers before they can begin the Subscription process.
	Terms interface{}
}

// The set of arguments for constructing a Product resource.
type ProductArgs struct {
	// The name of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementName interface{}
	// Do subscribers need to be approved prior to being able to use the Product?
	ApprovalRequired interface{}
	// A description of this Product, which may include HTML formatting tags.
	Description interface{}
	// The Display Name for this API Management Product.
	DisplayName interface{}
	// The Identifier for this Product, which must be unique within the API Management Service. Changing this forces a new resource to be created.
	ProductId interface{}
	// Is this Product Published?
	Published interface{}
	// The name of the Resource Group in which the API Management Service should be exist. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// Is a Subscription required to access API's included in this Product?
	SubscriptionRequired interface{}
	// The number of subscriptions a user can have to this Product at the same time.
	SubscriptionsLimit interface{}
	// The Terms and Conditions for this Product, which must be accepted by Developers before they can begin the Subscription process.
	Terms interface{}
}
