// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an API Management Product.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/apimanagement"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleService, err := apimanagement.NewService(ctx, "exampleService", &apimanagement.ServiceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				PublisherName:     pulumi.String("My Company"),
//				PublisherEmail:    pulumi.String("company@exmaple.com"),
//				SkuName:           pulumi.String("Developer_1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = apimanagement.NewProduct(ctx, "exampleProduct", &apimanagement.ProductArgs{
//				ProductId:            pulumi.String("test-product"),
//				ApiManagementName:    exampleService.Name,
//				ResourceGroupName:    exampleResourceGroup.Name,
//				DisplayName:          pulumi.String("Test Product"),
//				SubscriptionRequired: pulumi.Bool(true),
//				ApprovalRequired:     pulumi.Bool(true),
//				Published:            pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// API Management Products can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:apimanagement/product:Product example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ApiManagement/service/instance1/products/myproduct
//
// ```
type Product struct {
	pulumi.CustomResourceState

	// The name of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringOutput `pulumi:"apiManagementName"`
	// Do subscribers need to be approved prior to being able to use the Product?
	//
	// > **NOTE:** `approvalRequired` can only be set when `subscriptionRequired` is set to `true`.
	ApprovalRequired pulumi.BoolPtrOutput `pulumi:"approvalRequired"`
	// A description of this Product, which may include HTML formatting tags.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The Display Name for this API Management Product.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The Identifier for this Product, which must be unique within the API Management Service. Changing this forces a new resource to be created.
	ProductId pulumi.StringOutput `pulumi:"productId"`
	// Is this Product Published?
	Published pulumi.BoolOutput `pulumi:"published"`
	// The name of the Resource Group in which the API Management Service should be exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Is a Subscription required to access API's included in this Product? Defaults to `true`.
	SubscriptionRequired pulumi.BoolPtrOutput `pulumi:"subscriptionRequired"`
	// The number of subscriptions a user can have to this Product at the same time.
	//
	// > **NOTE:** `subscriptionsLimit` can only be set when `subscriptionRequired` is set to `true`.
	SubscriptionsLimit pulumi.IntPtrOutput `pulumi:"subscriptionsLimit"`
	// The Terms and Conditions for this Product, which must be accepted by Developers before they can begin the Subscription process.
	Terms pulumi.StringPtrOutput `pulumi:"terms"`
}

// NewProduct registers a new resource with the given unique name, arguments, and options.
func NewProduct(ctx *pulumi.Context,
	name string, args *ProductArgs, opts ...pulumi.ResourceOption) (*Product, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiManagementName == nil {
		return nil, errors.New("invalid value for required argument 'ApiManagementName'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.ProductId == nil {
		return nil, errors.New("invalid value for required argument 'ProductId'")
	}
	if args.Published == nil {
		return nil, errors.New("invalid value for required argument 'Published'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Product
	err := ctx.RegisterResource("azure:apimanagement/product:Product", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProduct gets an existing Product resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProduct(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProductState, opts ...pulumi.ResourceOption) (*Product, error) {
	var resource Product
	err := ctx.ReadResource("azure:apimanagement/product:Product", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Product resources.
type productState struct {
	// The name of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementName *string `pulumi:"apiManagementName"`
	// Do subscribers need to be approved prior to being able to use the Product?
	//
	// > **NOTE:** `approvalRequired` can only be set when `subscriptionRequired` is set to `true`.
	ApprovalRequired *bool `pulumi:"approvalRequired"`
	// A description of this Product, which may include HTML formatting tags.
	Description *string `pulumi:"description"`
	// The Display Name for this API Management Product.
	DisplayName *string `pulumi:"displayName"`
	// The Identifier for this Product, which must be unique within the API Management Service. Changing this forces a new resource to be created.
	ProductId *string `pulumi:"productId"`
	// Is this Product Published?
	Published *bool `pulumi:"published"`
	// The name of the Resource Group in which the API Management Service should be exist. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Is a Subscription required to access API's included in this Product? Defaults to `true`.
	SubscriptionRequired *bool `pulumi:"subscriptionRequired"`
	// The number of subscriptions a user can have to this Product at the same time.
	//
	// > **NOTE:** `subscriptionsLimit` can only be set when `subscriptionRequired` is set to `true`.
	SubscriptionsLimit *int `pulumi:"subscriptionsLimit"`
	// The Terms and Conditions for this Product, which must be accepted by Developers before they can begin the Subscription process.
	Terms *string `pulumi:"terms"`
}

type ProductState struct {
	// The name of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringPtrInput
	// Do subscribers need to be approved prior to being able to use the Product?
	//
	// > **NOTE:** `approvalRequired` can only be set when `subscriptionRequired` is set to `true`.
	ApprovalRequired pulumi.BoolPtrInput
	// A description of this Product, which may include HTML formatting tags.
	Description pulumi.StringPtrInput
	// The Display Name for this API Management Product.
	DisplayName pulumi.StringPtrInput
	// The Identifier for this Product, which must be unique within the API Management Service. Changing this forces a new resource to be created.
	ProductId pulumi.StringPtrInput
	// Is this Product Published?
	Published pulumi.BoolPtrInput
	// The name of the Resource Group in which the API Management Service should be exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// Is a Subscription required to access API's included in this Product? Defaults to `true`.
	SubscriptionRequired pulumi.BoolPtrInput
	// The number of subscriptions a user can have to this Product at the same time.
	//
	// > **NOTE:** `subscriptionsLimit` can only be set when `subscriptionRequired` is set to `true`.
	SubscriptionsLimit pulumi.IntPtrInput
	// The Terms and Conditions for this Product, which must be accepted by Developers before they can begin the Subscription process.
	Terms pulumi.StringPtrInput
}

func (ProductState) ElementType() reflect.Type {
	return reflect.TypeOf((*productState)(nil)).Elem()
}

type productArgs struct {
	// The name of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementName string `pulumi:"apiManagementName"`
	// Do subscribers need to be approved prior to being able to use the Product?
	//
	// > **NOTE:** `approvalRequired` can only be set when `subscriptionRequired` is set to `true`.
	ApprovalRequired *bool `pulumi:"approvalRequired"`
	// A description of this Product, which may include HTML formatting tags.
	Description *string `pulumi:"description"`
	// The Display Name for this API Management Product.
	DisplayName string `pulumi:"displayName"`
	// The Identifier for this Product, which must be unique within the API Management Service. Changing this forces a new resource to be created.
	ProductId string `pulumi:"productId"`
	// Is this Product Published?
	Published bool `pulumi:"published"`
	// The name of the Resource Group in which the API Management Service should be exist. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Is a Subscription required to access API's included in this Product? Defaults to `true`.
	SubscriptionRequired *bool `pulumi:"subscriptionRequired"`
	// The number of subscriptions a user can have to this Product at the same time.
	//
	// > **NOTE:** `subscriptionsLimit` can only be set when `subscriptionRequired` is set to `true`.
	SubscriptionsLimit *int `pulumi:"subscriptionsLimit"`
	// The Terms and Conditions for this Product, which must be accepted by Developers before they can begin the Subscription process.
	Terms *string `pulumi:"terms"`
}

// The set of arguments for constructing a Product resource.
type ProductArgs struct {
	// The name of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringInput
	// Do subscribers need to be approved prior to being able to use the Product?
	//
	// > **NOTE:** `approvalRequired` can only be set when `subscriptionRequired` is set to `true`.
	ApprovalRequired pulumi.BoolPtrInput
	// A description of this Product, which may include HTML formatting tags.
	Description pulumi.StringPtrInput
	// The Display Name for this API Management Product.
	DisplayName pulumi.StringInput
	// The Identifier for this Product, which must be unique within the API Management Service. Changing this forces a new resource to be created.
	ProductId pulumi.StringInput
	// Is this Product Published?
	Published pulumi.BoolInput
	// The name of the Resource Group in which the API Management Service should be exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// Is a Subscription required to access API's included in this Product? Defaults to `true`.
	SubscriptionRequired pulumi.BoolPtrInput
	// The number of subscriptions a user can have to this Product at the same time.
	//
	// > **NOTE:** `subscriptionsLimit` can only be set when `subscriptionRequired` is set to `true`.
	SubscriptionsLimit pulumi.IntPtrInput
	// The Terms and Conditions for this Product, which must be accepted by Developers before they can begin the Subscription process.
	Terms pulumi.StringPtrInput
}

func (ProductArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*productArgs)(nil)).Elem()
}

type ProductInput interface {
	pulumi.Input

	ToProductOutput() ProductOutput
	ToProductOutputWithContext(ctx context.Context) ProductOutput
}

func (*Product) ElementType() reflect.Type {
	return reflect.TypeOf((**Product)(nil)).Elem()
}

func (i *Product) ToProductOutput() ProductOutput {
	return i.ToProductOutputWithContext(context.Background())
}

func (i *Product) ToProductOutputWithContext(ctx context.Context) ProductOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductOutput)
}

// ProductArrayInput is an input type that accepts ProductArray and ProductArrayOutput values.
// You can construct a concrete instance of `ProductArrayInput` via:
//
//	ProductArray{ ProductArgs{...} }
type ProductArrayInput interface {
	pulumi.Input

	ToProductArrayOutput() ProductArrayOutput
	ToProductArrayOutputWithContext(context.Context) ProductArrayOutput
}

type ProductArray []ProductInput

func (ProductArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Product)(nil)).Elem()
}

func (i ProductArray) ToProductArrayOutput() ProductArrayOutput {
	return i.ToProductArrayOutputWithContext(context.Background())
}

func (i ProductArray) ToProductArrayOutputWithContext(ctx context.Context) ProductArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductArrayOutput)
}

// ProductMapInput is an input type that accepts ProductMap and ProductMapOutput values.
// You can construct a concrete instance of `ProductMapInput` via:
//
//	ProductMap{ "key": ProductArgs{...} }
type ProductMapInput interface {
	pulumi.Input

	ToProductMapOutput() ProductMapOutput
	ToProductMapOutputWithContext(context.Context) ProductMapOutput
}

type ProductMap map[string]ProductInput

func (ProductMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Product)(nil)).Elem()
}

func (i ProductMap) ToProductMapOutput() ProductMapOutput {
	return i.ToProductMapOutputWithContext(context.Background())
}

func (i ProductMap) ToProductMapOutputWithContext(ctx context.Context) ProductMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductMapOutput)
}

type ProductOutput struct{ *pulumi.OutputState }

func (ProductOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Product)(nil)).Elem()
}

func (o ProductOutput) ToProductOutput() ProductOutput {
	return o
}

func (o ProductOutput) ToProductOutputWithContext(ctx context.Context) ProductOutput {
	return o
}

// The name of the API Management Service. Changing this forces a new resource to be created.
func (o ProductOutput) ApiManagementName() pulumi.StringOutput {
	return o.ApplyT(func(v *Product) pulumi.StringOutput { return v.ApiManagementName }).(pulumi.StringOutput)
}

// Do subscribers need to be approved prior to being able to use the Product?
//
// > **NOTE:** `approvalRequired` can only be set when `subscriptionRequired` is set to `true`.
func (o ProductOutput) ApprovalRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Product) pulumi.BoolPtrOutput { return v.ApprovalRequired }).(pulumi.BoolPtrOutput)
}

// A description of this Product, which may include HTML formatting tags.
func (o ProductOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Product) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The Display Name for this API Management Product.
func (o ProductOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Product) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The Identifier for this Product, which must be unique within the API Management Service. Changing this forces a new resource to be created.
func (o ProductOutput) ProductId() pulumi.StringOutput {
	return o.ApplyT(func(v *Product) pulumi.StringOutput { return v.ProductId }).(pulumi.StringOutput)
}

// Is this Product Published?
func (o ProductOutput) Published() pulumi.BoolOutput {
	return o.ApplyT(func(v *Product) pulumi.BoolOutput { return v.Published }).(pulumi.BoolOutput)
}

// The name of the Resource Group in which the API Management Service should be exist. Changing this forces a new resource to be created.
func (o ProductOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Product) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// Is a Subscription required to access API's included in this Product? Defaults to `true`.
func (o ProductOutput) SubscriptionRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Product) pulumi.BoolPtrOutput { return v.SubscriptionRequired }).(pulumi.BoolPtrOutput)
}

// The number of subscriptions a user can have to this Product at the same time.
//
// > **NOTE:** `subscriptionsLimit` can only be set when `subscriptionRequired` is set to `true`.
func (o ProductOutput) SubscriptionsLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Product) pulumi.IntPtrOutput { return v.SubscriptionsLimit }).(pulumi.IntPtrOutput)
}

// The Terms and Conditions for this Product, which must be accepted by Developers before they can begin the Subscription process.
func (o ProductOutput) Terms() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Product) pulumi.StringPtrOutput { return v.Terms }).(pulumi.StringPtrOutput)
}

type ProductArrayOutput struct{ *pulumi.OutputState }

func (ProductArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Product)(nil)).Elem()
}

func (o ProductArrayOutput) ToProductArrayOutput() ProductArrayOutput {
	return o
}

func (o ProductArrayOutput) ToProductArrayOutputWithContext(ctx context.Context) ProductArrayOutput {
	return o
}

func (o ProductArrayOutput) Index(i pulumi.IntInput) ProductOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Product {
		return vs[0].([]*Product)[vs[1].(int)]
	}).(ProductOutput)
}

type ProductMapOutput struct{ *pulumi.OutputState }

func (ProductMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Product)(nil)).Elem()
}

func (o ProductMapOutput) ToProductMapOutput() ProductMapOutput {
	return o
}

func (o ProductMapOutput) ToProductMapOutputWithContext(ctx context.Context) ProductMapOutput {
	return o
}

func (o ProductMapOutput) MapIndex(k pulumi.StringInput) ProductOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Product {
		return vs[0].(map[string]*Product)[vs[1].(string)]
	}).(ProductOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProductInput)(nil)).Elem(), &Product{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProductArrayInput)(nil)).Elem(), ProductArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProductMapInput)(nil)).Elem(), ProductMap{})
	pulumi.RegisterOutputType(ProductOutput{})
	pulumi.RegisterOutputType(ProductArrayOutput{})
	pulumi.RegisterOutputType(ProductMapOutput{})
}
