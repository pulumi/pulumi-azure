// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Certificate within an API Management Service.
//
// ## Example Usage
// ### With Base64 Certificate)
//
// ```go
// package main
//
// import (
//
//	"encoding/base64"
//	"os"
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/apimanagement"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func filebase64OrPanic(path string) pulumi.StringPtrInput {
//		if fileData, err := os.ReadFile(path); err == nil {
//			return pulumi.String(base64.StdEncoding.EncodeToString(fileData[:]))
//		} else {
//			panic(err.Error())
//		}
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleService, err := apimanagement.NewService(ctx, "exampleService", &apimanagement.ServiceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				PublisherName:     pulumi.String("My Company"),
//				PublisherEmail:    pulumi.String("company@exmaple.com"),
//				SkuName:           pulumi.String("Developer_1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = apimanagement.NewCertificate(ctx, "exampleCertificate", &apimanagement.CertificateArgs{
//				ApiManagementName: exampleService.Name,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Data:              filebase64OrPanic("example.pfx"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### With Key Vault Certificate)
//
// ```go
// package main
//
// import (
//
//	"encoding/base64"
//	"os"
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/apimanagement"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/keyvault"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func filebase64OrPanic(path string) pulumi.StringPtrInput {
//		if fileData, err := os.ReadFile(path); err == nil {
//			return pulumi.String(base64.StdEncoding.EncodeToString(fileData[:]))
//		} else {
//			panic(err.Error())
//		}
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := core.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleService, err := apimanagement.NewService(ctx, "exampleService", &apimanagement.ServiceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				PublisherName:     pulumi.String("My Company"),
//				PublisherEmail:    pulumi.String("company@terraform.io"),
//				SkuName:           pulumi.String("Developer_1"),
//				Identity: &apimanagement.ServiceIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleKeyVault, err := keyvault.NewKeyVault(ctx, "exampleKeyVault", &keyvault.KeyVaultArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				TenantId:          *pulumi.String(current.TenantId),
//				SkuName:           pulumi.String("standard"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = keyvault.NewAccessPolicy(ctx, "exampleAccessPolicy", &keyvault.AccessPolicyArgs{
//				KeyVaultId: exampleKeyVault.ID(),
//				TenantId: exampleService.Identity.ApplyT(func(identity apimanagement.ServiceIdentity) (*string, error) {
//					return &identity.TenantId, nil
//				}).(pulumi.StringPtrOutput),
//				ObjectId: exampleService.Identity.ApplyT(func(identity apimanagement.ServiceIdentity) (*string, error) {
//					return &identity.PrincipalId, nil
//				}).(pulumi.StringPtrOutput),
//				SecretPermissions: pulumi.StringArray{
//					pulumi.String("Get"),
//				},
//				CertificatePermissions: pulumi.StringArray{
//					pulumi.String("Get"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleCertificate, err := keyvault.NewCertificate(ctx, "exampleCertificate", &keyvault.CertificateArgs{
//				KeyVaultId: exampleKeyVault.ID(),
//				Certificate: &keyvault.CertificateCertificateArgs{
//					Contents: filebase64OrPanic("example_cert.pfx"),
//					Password: pulumi.String("terraform"),
//				},
//				CertificatePolicy: &keyvault.CertificateCertificatePolicyArgs{
//					IssuerParameters: &keyvault.CertificateCertificatePolicyIssuerParametersArgs{
//						Name: pulumi.String("Self"),
//					},
//					KeyProperties: &keyvault.CertificateCertificatePolicyKeyPropertiesArgs{
//						Exportable: pulumi.Bool(true),
//						KeySize:    pulumi.Int(2048),
//						KeyType:    pulumi.String("RSA"),
//						ReuseKey:   pulumi.Bool(false),
//					},
//					SecretProperties: &keyvault.CertificateCertificatePolicySecretPropertiesArgs{
//						ContentType: pulumi.String("application/x-pkcs12"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = apimanagement.NewCertificate(ctx, "exampleApimanagement/certificateCertificate", &apimanagement.CertificateArgs{
//				ApiManagementName: exampleService.Name,
//				ResourceGroupName: exampleResourceGroup.Name,
//				KeyVaultSecretId:  exampleCertificate.SecretId,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// API Management Certificates can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:apimanagement/certificate:Certificate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ApiManagement/service/instance1/certificates/certificate1
//
// ```
type Certificate struct {
	pulumi.CustomResourceState

	// The Name of the API Management Service where this Service should be created. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringOutput `pulumi:"apiManagementName"`
	// The base-64 encoded certificate data, which must be a PFX file.
	Data pulumi.StringPtrOutput `pulumi:"data"`
	// The Expiration Date of this Certificate, formatted as an RFC3339 string.
	Expiration pulumi.StringOutput `pulumi:"expiration"`
	// The Client ID of the User Assigned Managed Identity to use for retrieving certificate.
	//
	// > **NOTE:** If not specified, will use System Assigned identity of the API Management Service.
	KeyVaultIdentityClientId pulumi.StringPtrOutput `pulumi:"keyVaultIdentityClientId"`
	// The ID of the Key Vault Secret containing the SSL Certificate, which must be of the type `application/x-pkcs12`.
	//
	// > **NOTE:** Setting this field requires the `identity` block to be specified in API Management Service, since this identity is used to retrieve the Key Vault Certificate. Possible values are versioned or versionless secret ID. Auto-updating the Certificate from the Key Vault requires that Secret version isn't specified.
	KeyVaultSecretId pulumi.StringPtrOutput `pulumi:"keyVaultSecretId"`
	// The name of the API Management Certificate. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The password used for this certificate.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
	//
	// > **NOTE:** Either `data` or `keyVaultSecretId` must be specified - but not both.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The Subject of this Certificate.
	Subject pulumi.StringOutput `pulumi:"subject"`
	// The Thumbprint of this Certificate.
	Thumbprint pulumi.StringOutput `pulumi:"thumbprint"`
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOption) (*Certificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiManagementName == nil {
		return nil, errors.New("invalid value for required argument 'ApiManagementName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Data != nil {
		args.Data = pulumi.ToSecret(args.Data).(pulumi.StringPtrInput)
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"data",
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Certificate
	err := ctx.RegisterResource("azure:apimanagement/certificate:Certificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateState, opts ...pulumi.ResourceOption) (*Certificate, error) {
	var resource Certificate
	err := ctx.ReadResource("azure:apimanagement/certificate:Certificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certificate resources.
type certificateState struct {
	// The Name of the API Management Service where this Service should be created. Changing this forces a new resource to be created.
	ApiManagementName *string `pulumi:"apiManagementName"`
	// The base-64 encoded certificate data, which must be a PFX file.
	Data *string `pulumi:"data"`
	// The Expiration Date of this Certificate, formatted as an RFC3339 string.
	Expiration *string `pulumi:"expiration"`
	// The Client ID of the User Assigned Managed Identity to use for retrieving certificate.
	//
	// > **NOTE:** If not specified, will use System Assigned identity of the API Management Service.
	KeyVaultIdentityClientId *string `pulumi:"keyVaultIdentityClientId"`
	// The ID of the Key Vault Secret containing the SSL Certificate, which must be of the type `application/x-pkcs12`.
	//
	// > **NOTE:** Setting this field requires the `identity` block to be specified in API Management Service, since this identity is used to retrieve the Key Vault Certificate. Possible values are versioned or versionless secret ID. Auto-updating the Certificate from the Key Vault requires that Secret version isn't specified.
	KeyVaultSecretId *string `pulumi:"keyVaultSecretId"`
	// The name of the API Management Certificate. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The password used for this certificate.
	Password *string `pulumi:"password"`
	// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
	//
	// > **NOTE:** Either `data` or `keyVaultSecretId` must be specified - but not both.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The Subject of this Certificate.
	Subject *string `pulumi:"subject"`
	// The Thumbprint of this Certificate.
	Thumbprint *string `pulumi:"thumbprint"`
}

type CertificateState struct {
	// The Name of the API Management Service where this Service should be created. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringPtrInput
	// The base-64 encoded certificate data, which must be a PFX file.
	Data pulumi.StringPtrInput
	// The Expiration Date of this Certificate, formatted as an RFC3339 string.
	Expiration pulumi.StringPtrInput
	// The Client ID of the User Assigned Managed Identity to use for retrieving certificate.
	//
	// > **NOTE:** If not specified, will use System Assigned identity of the API Management Service.
	KeyVaultIdentityClientId pulumi.StringPtrInput
	// The ID of the Key Vault Secret containing the SSL Certificate, which must be of the type `application/x-pkcs12`.
	//
	// > **NOTE:** Setting this field requires the `identity` block to be specified in API Management Service, since this identity is used to retrieve the Key Vault Certificate. Possible values are versioned or versionless secret ID. Auto-updating the Certificate from the Key Vault requires that Secret version isn't specified.
	KeyVaultSecretId pulumi.StringPtrInput
	// The name of the API Management Certificate. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The password used for this certificate.
	Password pulumi.StringPtrInput
	// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
	//
	// > **NOTE:** Either `data` or `keyVaultSecretId` must be specified - but not both.
	ResourceGroupName pulumi.StringPtrInput
	// The Subject of this Certificate.
	Subject pulumi.StringPtrInput
	// The Thumbprint of this Certificate.
	Thumbprint pulumi.StringPtrInput
}

func (CertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateState)(nil)).Elem()
}

type certificateArgs struct {
	// The Name of the API Management Service where this Service should be created. Changing this forces a new resource to be created.
	ApiManagementName string `pulumi:"apiManagementName"`
	// The base-64 encoded certificate data, which must be a PFX file.
	Data *string `pulumi:"data"`
	// The Client ID of the User Assigned Managed Identity to use for retrieving certificate.
	//
	// > **NOTE:** If not specified, will use System Assigned identity of the API Management Service.
	KeyVaultIdentityClientId *string `pulumi:"keyVaultIdentityClientId"`
	// The ID of the Key Vault Secret containing the SSL Certificate, which must be of the type `application/x-pkcs12`.
	//
	// > **NOTE:** Setting this field requires the `identity` block to be specified in API Management Service, since this identity is used to retrieve the Key Vault Certificate. Possible values are versioned or versionless secret ID. Auto-updating the Certificate from the Key Vault requires that Secret version isn't specified.
	KeyVaultSecretId *string `pulumi:"keyVaultSecretId"`
	// The name of the API Management Certificate. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The password used for this certificate.
	Password *string `pulumi:"password"`
	// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
	//
	// > **NOTE:** Either `data` or `keyVaultSecretId` must be specified - but not both.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	// The Name of the API Management Service where this Service should be created. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringInput
	// The base-64 encoded certificate data, which must be a PFX file.
	Data pulumi.StringPtrInput
	// The Client ID of the User Assigned Managed Identity to use for retrieving certificate.
	//
	// > **NOTE:** If not specified, will use System Assigned identity of the API Management Service.
	KeyVaultIdentityClientId pulumi.StringPtrInput
	// The ID of the Key Vault Secret containing the SSL Certificate, which must be of the type `application/x-pkcs12`.
	//
	// > **NOTE:** Setting this field requires the `identity` block to be specified in API Management Service, since this identity is used to retrieve the Key Vault Certificate. Possible values are versioned or versionless secret ID. Auto-updating the Certificate from the Key Vault requires that Secret version isn't specified.
	KeyVaultSecretId pulumi.StringPtrInput
	// The name of the API Management Certificate. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The password used for this certificate.
	Password pulumi.StringPtrInput
	// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
	//
	// > **NOTE:** Either `data` or `keyVaultSecretId` must be specified - but not both.
	ResourceGroupName pulumi.StringInput
}

func (CertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateArgs)(nil)).Elem()
}

type CertificateInput interface {
	pulumi.Input

	ToCertificateOutput() CertificateOutput
	ToCertificateOutputWithContext(ctx context.Context) CertificateOutput
}

func (*Certificate) ElementType() reflect.Type {
	return reflect.TypeOf((**Certificate)(nil)).Elem()
}

func (i *Certificate) ToCertificateOutput() CertificateOutput {
	return i.ToCertificateOutputWithContext(context.Background())
}

func (i *Certificate) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateOutput)
}

// CertificateArrayInput is an input type that accepts CertificateArray and CertificateArrayOutput values.
// You can construct a concrete instance of `CertificateArrayInput` via:
//
//	CertificateArray{ CertificateArgs{...} }
type CertificateArrayInput interface {
	pulumi.Input

	ToCertificateArrayOutput() CertificateArrayOutput
	ToCertificateArrayOutputWithContext(context.Context) CertificateArrayOutput
}

type CertificateArray []CertificateInput

func (CertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Certificate)(nil)).Elem()
}

func (i CertificateArray) ToCertificateArrayOutput() CertificateArrayOutput {
	return i.ToCertificateArrayOutputWithContext(context.Background())
}

func (i CertificateArray) ToCertificateArrayOutputWithContext(ctx context.Context) CertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateArrayOutput)
}

// CertificateMapInput is an input type that accepts CertificateMap and CertificateMapOutput values.
// You can construct a concrete instance of `CertificateMapInput` via:
//
//	CertificateMap{ "key": CertificateArgs{...} }
type CertificateMapInput interface {
	pulumi.Input

	ToCertificateMapOutput() CertificateMapOutput
	ToCertificateMapOutputWithContext(context.Context) CertificateMapOutput
}

type CertificateMap map[string]CertificateInput

func (CertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Certificate)(nil)).Elem()
}

func (i CertificateMap) ToCertificateMapOutput() CertificateMapOutput {
	return i.ToCertificateMapOutputWithContext(context.Background())
}

func (i CertificateMap) ToCertificateMapOutputWithContext(ctx context.Context) CertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateMapOutput)
}

type CertificateOutput struct{ *pulumi.OutputState }

func (CertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Certificate)(nil)).Elem()
}

func (o CertificateOutput) ToCertificateOutput() CertificateOutput {
	return o
}

func (o CertificateOutput) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return o
}

// The Name of the API Management Service where this Service should be created. Changing this forces a new resource to be created.
func (o CertificateOutput) ApiManagementName() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.ApiManagementName }).(pulumi.StringOutput)
}

// The base-64 encoded certificate data, which must be a PFX file.
func (o CertificateOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringPtrOutput { return v.Data }).(pulumi.StringPtrOutput)
}

// The Expiration Date of this Certificate, formatted as an RFC3339 string.
func (o CertificateOutput) Expiration() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.Expiration }).(pulumi.StringOutput)
}

// The Client ID of the User Assigned Managed Identity to use for retrieving certificate.
//
// > **NOTE:** If not specified, will use System Assigned identity of the API Management Service.
func (o CertificateOutput) KeyVaultIdentityClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringPtrOutput { return v.KeyVaultIdentityClientId }).(pulumi.StringPtrOutput)
}

// The ID of the Key Vault Secret containing the SSL Certificate, which must be of the type `application/x-pkcs12`.
//
// > **NOTE:** Setting this field requires the `identity` block to be specified in API Management Service, since this identity is used to retrieve the Key Vault Certificate. Possible values are versioned or versionless secret ID. Auto-updating the Certificate from the Key Vault requires that Secret version isn't specified.
func (o CertificateOutput) KeyVaultSecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringPtrOutput { return v.KeyVaultSecretId }).(pulumi.StringPtrOutput)
}

// The name of the API Management Certificate. Changing this forces a new resource to be created.
func (o CertificateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The password used for this certificate.
func (o CertificateOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
//
// > **NOTE:** Either `data` or `keyVaultSecretId` must be specified - but not both.
func (o CertificateOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The Subject of this Certificate.
func (o CertificateOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.Subject }).(pulumi.StringOutput)
}

// The Thumbprint of this Certificate.
func (o CertificateOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.Thumbprint }).(pulumi.StringOutput)
}

type CertificateArrayOutput struct{ *pulumi.OutputState }

func (CertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Certificate)(nil)).Elem()
}

func (o CertificateArrayOutput) ToCertificateArrayOutput() CertificateArrayOutput {
	return o
}

func (o CertificateArrayOutput) ToCertificateArrayOutputWithContext(ctx context.Context) CertificateArrayOutput {
	return o
}

func (o CertificateArrayOutput) Index(i pulumi.IntInput) CertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Certificate {
		return vs[0].([]*Certificate)[vs[1].(int)]
	}).(CertificateOutput)
}

type CertificateMapOutput struct{ *pulumi.OutputState }

func (CertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Certificate)(nil)).Elem()
}

func (o CertificateMapOutput) ToCertificateMapOutput() CertificateMapOutput {
	return o
}

func (o CertificateMapOutput) ToCertificateMapOutputWithContext(ctx context.Context) CertificateMapOutput {
	return o
}

func (o CertificateMapOutput) MapIndex(k pulumi.StringInput) CertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Certificate {
		return vs[0].(map[string]*Certificate)[vs[1].(string)]
	}).(CertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateInput)(nil)).Elem(), &Certificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateArrayInput)(nil)).Elem(), CertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateMapInput)(nil)).Elem(), CertificateMap{})
	pulumi.RegisterOutputType(CertificateOutput{})
	pulumi.RegisterOutputType(CertificateArrayOutput{})
	pulumi.RegisterOutputType(CertificateMapOutput{})
}
