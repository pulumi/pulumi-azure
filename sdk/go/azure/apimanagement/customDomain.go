// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a API Management Custom Domain.
//
// ## Disclaimers
//
// > **Note:** It's possible to define Custom Domains both within the `apimanagement.Service` resource via the `hostnameConfigurations` block and by using this resource. However it's not possible to use both methods to manage Custom Domains within an API Management Service, since there will be conflicts.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/apimanagement"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/keyvault"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West US"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleService, err := apimanagement.NewService(ctx, "exampleService", &apimanagement.ServiceArgs{
// 			Location:          pulumi.Any(azurerm_resource_group.Test.Location),
// 			ResourceGroupName: pulumi.Any(azurerm_resource_group.Test.Name),
// 			PublisherName:     pulumi.String("pub1"),
// 			PublisherEmail:    pulumi.String("pub1@email.com"),
// 			SkuName:           pulumi.String("Developer_1"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = keyvault.NewCertificate(ctx, "exampleCertificate", &keyvault.CertificateArgs{
// 			KeyVaultId: pulumi.Any(azurerm_key_vault.Test.Id),
// 			CertificatePolicy: &keyvault.CertificateCertificatePolicyArgs{
// 				IssuerParameters: &keyvault.CertificateCertificatePolicyIssuerParametersArgs{
// 					Name: pulumi.String("Self"),
// 				},
// 				KeyProperties: &keyvault.CertificateCertificatePolicyKeyPropertiesArgs{
// 					Exportable: pulumi.Bool(true),
// 					KeySize:    pulumi.Int(2048),
// 					KeyType:    pulumi.String("RSA"),
// 					ReuseKey:   pulumi.Bool(true),
// 				},
// 				LifetimeActions: keyvault.CertificateCertificatePolicyLifetimeActionArray{
// 					&keyvault.CertificateCertificatePolicyLifetimeActionArgs{
// 						Action: &keyvault.CertificateCertificatePolicyLifetimeActionActionArgs{
// 							ActionType: pulumi.String("AutoRenew"),
// 						},
// 						Trigger: &keyvault.CertificateCertificatePolicyLifetimeActionTriggerArgs{
// 							DaysBeforeExpiry: pulumi.Int(30),
// 						},
// 					},
// 				},
// 				SecretProperties: &keyvault.CertificateCertificatePolicySecretPropertiesArgs{
// 					ContentType: pulumi.String("application/x-pkcs12"),
// 				},
// 				X509CertificateProperties: &keyvault.CertificateCertificatePolicyX509CertificatePropertiesArgs{
// 					KeyUsages: pulumi.StringArray{
// 						pulumi.String("cRLSign"),
// 						pulumi.String("dataEncipherment"),
// 						pulumi.String("digitalSignature"),
// 						pulumi.String("keyAgreement"),
// 						pulumi.String("keyCertSign"),
// 						pulumi.String("keyEncipherment"),
// 					},
// 					Subject:          pulumi.String("CN=api.example.com"),
// 					ValidityInMonths: pulumi.Int(12),
// 					SubjectAlternativeNames: &keyvault.CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs{
// 						DnsNames: pulumi.StringArray{
// 							pulumi.String("api.example.com"),
// 							pulumi.String("portal.example.com"),
// 						},
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = apimanagement.NewCustomDomain(ctx, "exampleCustomDomain", &apimanagement.CustomDomainArgs{
// 			ApiManagementId: exampleService.ID(),
// 			Proxies: apimanagement.CustomDomainProxyArray{
// 				&apimanagement.CustomDomainProxyArgs{
// 					HostName:   pulumi.String("api.example.com"),
// 					KeyVaultId: pulumi.Any(azurerm_key_vault_certificate.Test.Secret_id),
// 				},
// 			},
// 			DeveloperPortals: apimanagement.CustomDomainDeveloperPortalArray{
// 				&apimanagement.CustomDomainDeveloperPortalArgs{
// 					HostName:   pulumi.String("portal.example.com"),
// 					KeyVaultId: pulumi.Any(azurerm_key_vault_certificate.Test.Secret_id),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// API Management Custom Domains can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:apimanagement/customDomain:CustomDomain example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ApiManagement/service/instance1/customDomains/default
// ```
type CustomDomain struct {
	pulumi.CustomResourceState

	// The ID of the API Management service for which to configure Custom Domains. Changing this forces a new API Management Custom Domain resource to be created.
	ApiManagementId pulumi.StringOutput `pulumi:"apiManagementId"`
	// One or more `developerPortal` blocks as defined below.
	DeveloperPortals CustomDomainDeveloperPortalArrayOutput `pulumi:"developerPortals"`
	// One or more `management` blocks as defined below.
	Managements CustomDomainManagementArrayOutput `pulumi:"managements"`
	// One or more `portal` blocks as defined below.
	Portals CustomDomainPortalArrayOutput `pulumi:"portals"`
	// One or more `proxy` blocks as defined below.
	Proxies CustomDomainProxyArrayOutput `pulumi:"proxies"`
	// One or more `scm` blocks as defined below.
	Scms CustomDomainScmArrayOutput `pulumi:"scms"`
}

// NewCustomDomain registers a new resource with the given unique name, arguments, and options.
func NewCustomDomain(ctx *pulumi.Context,
	name string, args *CustomDomainArgs, opts ...pulumi.ResourceOption) (*CustomDomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiManagementId == nil {
		return nil, errors.New("invalid value for required argument 'ApiManagementId'")
	}
	var resource CustomDomain
	err := ctx.RegisterResource("azure:apimanagement/customDomain:CustomDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCustomDomain gets an existing CustomDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCustomDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CustomDomainState, opts ...pulumi.ResourceOption) (*CustomDomain, error) {
	var resource CustomDomain
	err := ctx.ReadResource("azure:apimanagement/customDomain:CustomDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CustomDomain resources.
type customDomainState struct {
	// The ID of the API Management service for which to configure Custom Domains. Changing this forces a new API Management Custom Domain resource to be created.
	ApiManagementId *string `pulumi:"apiManagementId"`
	// One or more `developerPortal` blocks as defined below.
	DeveloperPortals []CustomDomainDeveloperPortal `pulumi:"developerPortals"`
	// One or more `management` blocks as defined below.
	Managements []CustomDomainManagement `pulumi:"managements"`
	// One or more `portal` blocks as defined below.
	Portals []CustomDomainPortal `pulumi:"portals"`
	// One or more `proxy` blocks as defined below.
	Proxies []CustomDomainProxy `pulumi:"proxies"`
	// One or more `scm` blocks as defined below.
	Scms []CustomDomainScm `pulumi:"scms"`
}

type CustomDomainState struct {
	// The ID of the API Management service for which to configure Custom Domains. Changing this forces a new API Management Custom Domain resource to be created.
	ApiManagementId pulumi.StringPtrInput
	// One or more `developerPortal` blocks as defined below.
	DeveloperPortals CustomDomainDeveloperPortalArrayInput
	// One or more `management` blocks as defined below.
	Managements CustomDomainManagementArrayInput
	// One or more `portal` blocks as defined below.
	Portals CustomDomainPortalArrayInput
	// One or more `proxy` blocks as defined below.
	Proxies CustomDomainProxyArrayInput
	// One or more `scm` blocks as defined below.
	Scms CustomDomainScmArrayInput
}

func (CustomDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*customDomainState)(nil)).Elem()
}

type customDomainArgs struct {
	// The ID of the API Management service for which to configure Custom Domains. Changing this forces a new API Management Custom Domain resource to be created.
	ApiManagementId string `pulumi:"apiManagementId"`
	// One or more `developerPortal` blocks as defined below.
	DeveloperPortals []CustomDomainDeveloperPortal `pulumi:"developerPortals"`
	// One or more `management` blocks as defined below.
	Managements []CustomDomainManagement `pulumi:"managements"`
	// One or more `portal` blocks as defined below.
	Portals []CustomDomainPortal `pulumi:"portals"`
	// One or more `proxy` blocks as defined below.
	Proxies []CustomDomainProxy `pulumi:"proxies"`
	// One or more `scm` blocks as defined below.
	Scms []CustomDomainScm `pulumi:"scms"`
}

// The set of arguments for constructing a CustomDomain resource.
type CustomDomainArgs struct {
	// The ID of the API Management service for which to configure Custom Domains. Changing this forces a new API Management Custom Domain resource to be created.
	ApiManagementId pulumi.StringInput
	// One or more `developerPortal` blocks as defined below.
	DeveloperPortals CustomDomainDeveloperPortalArrayInput
	// One or more `management` blocks as defined below.
	Managements CustomDomainManagementArrayInput
	// One or more `portal` blocks as defined below.
	Portals CustomDomainPortalArrayInput
	// One or more `proxy` blocks as defined below.
	Proxies CustomDomainProxyArrayInput
	// One or more `scm` blocks as defined below.
	Scms CustomDomainScmArrayInput
}

func (CustomDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*customDomainArgs)(nil)).Elem()
}

type CustomDomainInput interface {
	pulumi.Input

	ToCustomDomainOutput() CustomDomainOutput
	ToCustomDomainOutputWithContext(ctx context.Context) CustomDomainOutput
}

func (CustomDomain) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDomain)(nil)).Elem()
}

func (i CustomDomain) ToCustomDomainOutput() CustomDomainOutput {
	return i.ToCustomDomainOutputWithContext(context.Background())
}

func (i CustomDomain) ToCustomDomainOutputWithContext(ctx context.Context) CustomDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDomainOutput)
}

type CustomDomainOutput struct {
	*pulumi.OutputState
}

func (CustomDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDomainOutput)(nil)).Elem()
}

func (o CustomDomainOutput) ToCustomDomainOutput() CustomDomainOutput {
	return o
}

func (o CustomDomainOutput) ToCustomDomainOutputWithContext(ctx context.Context) CustomDomainOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(CustomDomainOutput{})
}
