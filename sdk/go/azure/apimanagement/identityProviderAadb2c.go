// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an API Management Azure AD B2C Identity Provider.
//
// ## Import
//
// API Management Azure AD B2C Identity Providers can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:apimanagement/identityProviderAadb2c:IdentityProviderAadb2c example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ApiManagement/service1/identityProviders/AadB2C
// ```
type IdentityProviderAadb2c struct {
	pulumi.CustomResourceState

	// The allowed AAD tenant, usually your B2C tenant domain.
	AllowedTenant pulumi.StringOutput `pulumi:"allowedTenant"`
	// The Name of the API Management Service where this AAD Identity Provider should be created. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringOutput `pulumi:"apiManagementName"`
	// OpenID Connect discovery endpoint hostname, usually your b2clogin.com domain.
	Authority pulumi.StringOutput `pulumi:"authority"`
	// Client ID of the Application in your B2C tenant.
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// Client secret of the Application in your B2C tenant.
	ClientSecret pulumi.StringOutput `pulumi:"clientSecret"`
	// Password reset Policy Name.
	PasswordResetPolicy pulumi.StringPtrOutput `pulumi:"passwordResetPolicy"`
	// Profile editing Policy Name.
	ProfileEditingPolicy pulumi.StringPtrOutput `pulumi:"profileEditingPolicy"`
	// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Signin Policy Name.
	SigninPolicy pulumi.StringOutput `pulumi:"signinPolicy"`
	// The tenant to use instead of Common when logging into Active Directory, usually your B2C tenant domain.
	SigninTenant pulumi.StringOutput `pulumi:"signinTenant"`
	// Signup Policy Name.
	SignupPolicy pulumi.StringOutput `pulumi:"signupPolicy"`
}

// NewIdentityProviderAadb2c registers a new resource with the given unique name, arguments, and options.
func NewIdentityProviderAadb2c(ctx *pulumi.Context,
	name string, args *IdentityProviderAadb2cArgs, opts ...pulumi.ResourceOption) (*IdentityProviderAadb2c, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AllowedTenant == nil {
		return nil, errors.New("invalid value for required argument 'AllowedTenant'")
	}
	if args.ApiManagementName == nil {
		return nil, errors.New("invalid value for required argument 'ApiManagementName'")
	}
	if args.Authority == nil {
		return nil, errors.New("invalid value for required argument 'Authority'")
	}
	if args.ClientId == nil {
		return nil, errors.New("invalid value for required argument 'ClientId'")
	}
	if args.ClientSecret == nil {
		return nil, errors.New("invalid value for required argument 'ClientSecret'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SigninPolicy == nil {
		return nil, errors.New("invalid value for required argument 'SigninPolicy'")
	}
	if args.SigninTenant == nil {
		return nil, errors.New("invalid value for required argument 'SigninTenant'")
	}
	if args.SignupPolicy == nil {
		return nil, errors.New("invalid value for required argument 'SignupPolicy'")
	}
	var resource IdentityProviderAadb2c
	err := ctx.RegisterResource("azure:apimanagement/identityProviderAadb2c:IdentityProviderAadb2c", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityProviderAadb2c gets an existing IdentityProviderAadb2c resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityProviderAadb2c(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityProviderAadb2cState, opts ...pulumi.ResourceOption) (*IdentityProviderAadb2c, error) {
	var resource IdentityProviderAadb2c
	err := ctx.ReadResource("azure:apimanagement/identityProviderAadb2c:IdentityProviderAadb2c", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityProviderAadb2c resources.
type identityProviderAadb2cState struct {
	// The allowed AAD tenant, usually your B2C tenant domain.
	AllowedTenant *string `pulumi:"allowedTenant"`
	// The Name of the API Management Service where this AAD Identity Provider should be created. Changing this forces a new resource to be created.
	ApiManagementName *string `pulumi:"apiManagementName"`
	// OpenID Connect discovery endpoint hostname, usually your b2clogin.com domain.
	Authority *string `pulumi:"authority"`
	// Client ID of the Application in your B2C tenant.
	ClientId *string `pulumi:"clientId"`
	// Client secret of the Application in your B2C tenant.
	ClientSecret *string `pulumi:"clientSecret"`
	// Password reset Policy Name.
	PasswordResetPolicy *string `pulumi:"passwordResetPolicy"`
	// Profile editing Policy Name.
	ProfileEditingPolicy *string `pulumi:"profileEditingPolicy"`
	// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Signin Policy Name.
	SigninPolicy *string `pulumi:"signinPolicy"`
	// The tenant to use instead of Common when logging into Active Directory, usually your B2C tenant domain.
	SigninTenant *string `pulumi:"signinTenant"`
	// Signup Policy Name.
	SignupPolicy *string `pulumi:"signupPolicy"`
}

type IdentityProviderAadb2cState struct {
	// The allowed AAD tenant, usually your B2C tenant domain.
	AllowedTenant pulumi.StringPtrInput
	// The Name of the API Management Service where this AAD Identity Provider should be created. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringPtrInput
	// OpenID Connect discovery endpoint hostname, usually your b2clogin.com domain.
	Authority pulumi.StringPtrInput
	// Client ID of the Application in your B2C tenant.
	ClientId pulumi.StringPtrInput
	// Client secret of the Application in your B2C tenant.
	ClientSecret pulumi.StringPtrInput
	// Password reset Policy Name.
	PasswordResetPolicy pulumi.StringPtrInput
	// Profile editing Policy Name.
	ProfileEditingPolicy pulumi.StringPtrInput
	// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// Signin Policy Name.
	SigninPolicy pulumi.StringPtrInput
	// The tenant to use instead of Common when logging into Active Directory, usually your B2C tenant domain.
	SigninTenant pulumi.StringPtrInput
	// Signup Policy Name.
	SignupPolicy pulumi.StringPtrInput
}

func (IdentityProviderAadb2cState) ElementType() reflect.Type {
	return reflect.TypeOf((*identityProviderAadb2cState)(nil)).Elem()
}

type identityProviderAadb2cArgs struct {
	// The allowed AAD tenant, usually your B2C tenant domain.
	AllowedTenant string `pulumi:"allowedTenant"`
	// The Name of the API Management Service where this AAD Identity Provider should be created. Changing this forces a new resource to be created.
	ApiManagementName string `pulumi:"apiManagementName"`
	// OpenID Connect discovery endpoint hostname, usually your b2clogin.com domain.
	Authority string `pulumi:"authority"`
	// Client ID of the Application in your B2C tenant.
	ClientId string `pulumi:"clientId"`
	// Client secret of the Application in your B2C tenant.
	ClientSecret string `pulumi:"clientSecret"`
	// Password reset Policy Name.
	PasswordResetPolicy *string `pulumi:"passwordResetPolicy"`
	// Profile editing Policy Name.
	ProfileEditingPolicy *string `pulumi:"profileEditingPolicy"`
	// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Signin Policy Name.
	SigninPolicy string `pulumi:"signinPolicy"`
	// The tenant to use instead of Common when logging into Active Directory, usually your B2C tenant domain.
	SigninTenant string `pulumi:"signinTenant"`
	// Signup Policy Name.
	SignupPolicy string `pulumi:"signupPolicy"`
}

// The set of arguments for constructing a IdentityProviderAadb2c resource.
type IdentityProviderAadb2cArgs struct {
	// The allowed AAD tenant, usually your B2C tenant domain.
	AllowedTenant pulumi.StringInput
	// The Name of the API Management Service where this AAD Identity Provider should be created. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringInput
	// OpenID Connect discovery endpoint hostname, usually your b2clogin.com domain.
	Authority pulumi.StringInput
	// Client ID of the Application in your B2C tenant.
	ClientId pulumi.StringInput
	// Client secret of the Application in your B2C tenant.
	ClientSecret pulumi.StringInput
	// Password reset Policy Name.
	PasswordResetPolicy pulumi.StringPtrInput
	// Profile editing Policy Name.
	ProfileEditingPolicy pulumi.StringPtrInput
	// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// Signin Policy Name.
	SigninPolicy pulumi.StringInput
	// The tenant to use instead of Common when logging into Active Directory, usually your B2C tenant domain.
	SigninTenant pulumi.StringInput
	// Signup Policy Name.
	SignupPolicy pulumi.StringInput
}

func (IdentityProviderAadb2cArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identityProviderAadb2cArgs)(nil)).Elem()
}

type IdentityProviderAadb2cInput interface {
	pulumi.Input

	ToIdentityProviderAadb2cOutput() IdentityProviderAadb2cOutput
	ToIdentityProviderAadb2cOutputWithContext(ctx context.Context) IdentityProviderAadb2cOutput
}

func (*IdentityProviderAadb2c) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityProviderAadb2c)(nil))
}

func (i *IdentityProviderAadb2c) ToIdentityProviderAadb2cOutput() IdentityProviderAadb2cOutput {
	return i.ToIdentityProviderAadb2cOutputWithContext(context.Background())
}

func (i *IdentityProviderAadb2c) ToIdentityProviderAadb2cOutputWithContext(ctx context.Context) IdentityProviderAadb2cOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProviderAadb2cOutput)
}

func (i *IdentityProviderAadb2c) ToIdentityProviderAadb2cPtrOutput() IdentityProviderAadb2cPtrOutput {
	return i.ToIdentityProviderAadb2cPtrOutputWithContext(context.Background())
}

func (i *IdentityProviderAadb2c) ToIdentityProviderAadb2cPtrOutputWithContext(ctx context.Context) IdentityProviderAadb2cPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProviderAadb2cPtrOutput)
}

type IdentityProviderAadb2cPtrInput interface {
	pulumi.Input

	ToIdentityProviderAadb2cPtrOutput() IdentityProviderAadb2cPtrOutput
	ToIdentityProviderAadb2cPtrOutputWithContext(ctx context.Context) IdentityProviderAadb2cPtrOutput
}

type identityProviderAadb2cPtrType IdentityProviderAadb2cArgs

func (*identityProviderAadb2cPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProviderAadb2c)(nil))
}

func (i *identityProviderAadb2cPtrType) ToIdentityProviderAadb2cPtrOutput() IdentityProviderAadb2cPtrOutput {
	return i.ToIdentityProviderAadb2cPtrOutputWithContext(context.Background())
}

func (i *identityProviderAadb2cPtrType) ToIdentityProviderAadb2cPtrOutputWithContext(ctx context.Context) IdentityProviderAadb2cPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProviderAadb2cPtrOutput)
}

// IdentityProviderAadb2cArrayInput is an input type that accepts IdentityProviderAadb2cArray and IdentityProviderAadb2cArrayOutput values.
// You can construct a concrete instance of `IdentityProviderAadb2cArrayInput` via:
//
//          IdentityProviderAadb2cArray{ IdentityProviderAadb2cArgs{...} }
type IdentityProviderAadb2cArrayInput interface {
	pulumi.Input

	ToIdentityProviderAadb2cArrayOutput() IdentityProviderAadb2cArrayOutput
	ToIdentityProviderAadb2cArrayOutputWithContext(context.Context) IdentityProviderAadb2cArrayOutput
}

type IdentityProviderAadb2cArray []IdentityProviderAadb2cInput

func (IdentityProviderAadb2cArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*IdentityProviderAadb2c)(nil))
}

func (i IdentityProviderAadb2cArray) ToIdentityProviderAadb2cArrayOutput() IdentityProviderAadb2cArrayOutput {
	return i.ToIdentityProviderAadb2cArrayOutputWithContext(context.Background())
}

func (i IdentityProviderAadb2cArray) ToIdentityProviderAadb2cArrayOutputWithContext(ctx context.Context) IdentityProviderAadb2cArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProviderAadb2cArrayOutput)
}

// IdentityProviderAadb2cMapInput is an input type that accepts IdentityProviderAadb2cMap and IdentityProviderAadb2cMapOutput values.
// You can construct a concrete instance of `IdentityProviderAadb2cMapInput` via:
//
//          IdentityProviderAadb2cMap{ "key": IdentityProviderAadb2cArgs{...} }
type IdentityProviderAadb2cMapInput interface {
	pulumi.Input

	ToIdentityProviderAadb2cMapOutput() IdentityProviderAadb2cMapOutput
	ToIdentityProviderAadb2cMapOutputWithContext(context.Context) IdentityProviderAadb2cMapOutput
}

type IdentityProviderAadb2cMap map[string]IdentityProviderAadb2cInput

func (IdentityProviderAadb2cMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*IdentityProviderAadb2c)(nil))
}

func (i IdentityProviderAadb2cMap) ToIdentityProviderAadb2cMapOutput() IdentityProviderAadb2cMapOutput {
	return i.ToIdentityProviderAadb2cMapOutputWithContext(context.Background())
}

func (i IdentityProviderAadb2cMap) ToIdentityProviderAadb2cMapOutputWithContext(ctx context.Context) IdentityProviderAadb2cMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProviderAadb2cMapOutput)
}

type IdentityProviderAadb2cOutput struct {
	*pulumi.OutputState
}

func (IdentityProviderAadb2cOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityProviderAadb2c)(nil))
}

func (o IdentityProviderAadb2cOutput) ToIdentityProviderAadb2cOutput() IdentityProviderAadb2cOutput {
	return o
}

func (o IdentityProviderAadb2cOutput) ToIdentityProviderAadb2cOutputWithContext(ctx context.Context) IdentityProviderAadb2cOutput {
	return o
}

func (o IdentityProviderAadb2cOutput) ToIdentityProviderAadb2cPtrOutput() IdentityProviderAadb2cPtrOutput {
	return o.ToIdentityProviderAadb2cPtrOutputWithContext(context.Background())
}

func (o IdentityProviderAadb2cOutput) ToIdentityProviderAadb2cPtrOutputWithContext(ctx context.Context) IdentityProviderAadb2cPtrOutput {
	return o.ApplyT(func(v IdentityProviderAadb2c) *IdentityProviderAadb2c {
		return &v
	}).(IdentityProviderAadb2cPtrOutput)
}

type IdentityProviderAadb2cPtrOutput struct {
	*pulumi.OutputState
}

func (IdentityProviderAadb2cPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProviderAadb2c)(nil))
}

func (o IdentityProviderAadb2cPtrOutput) ToIdentityProviderAadb2cPtrOutput() IdentityProviderAadb2cPtrOutput {
	return o
}

func (o IdentityProviderAadb2cPtrOutput) ToIdentityProviderAadb2cPtrOutputWithContext(ctx context.Context) IdentityProviderAadb2cPtrOutput {
	return o
}

type IdentityProviderAadb2cArrayOutput struct{ *pulumi.OutputState }

func (IdentityProviderAadb2cArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdentityProviderAadb2c)(nil))
}

func (o IdentityProviderAadb2cArrayOutput) ToIdentityProviderAadb2cArrayOutput() IdentityProviderAadb2cArrayOutput {
	return o
}

func (o IdentityProviderAadb2cArrayOutput) ToIdentityProviderAadb2cArrayOutputWithContext(ctx context.Context) IdentityProviderAadb2cArrayOutput {
	return o
}

func (o IdentityProviderAadb2cArrayOutput) Index(i pulumi.IntInput) IdentityProviderAadb2cOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IdentityProviderAadb2c {
		return vs[0].([]IdentityProviderAadb2c)[vs[1].(int)]
	}).(IdentityProviderAadb2cOutput)
}

type IdentityProviderAadb2cMapOutput struct{ *pulumi.OutputState }

func (IdentityProviderAadb2cMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]IdentityProviderAadb2c)(nil))
}

func (o IdentityProviderAadb2cMapOutput) ToIdentityProviderAadb2cMapOutput() IdentityProviderAadb2cMapOutput {
	return o
}

func (o IdentityProviderAadb2cMapOutput) ToIdentityProviderAadb2cMapOutputWithContext(ctx context.Context) IdentityProviderAadb2cMapOutput {
	return o
}

func (o IdentityProviderAadb2cMapOutput) MapIndex(k pulumi.StringInput) IdentityProviderAadb2cOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) IdentityProviderAadb2c {
		return vs[0].(map[string]IdentityProviderAadb2c)[vs[1].(string)]
	}).(IdentityProviderAadb2cOutput)
}

func init() {
	pulumi.RegisterOutputType(IdentityProviderAadb2cOutput{})
	pulumi.RegisterOutputType(IdentityProviderAadb2cPtrOutput{})
	pulumi.RegisterOutputType(IdentityProviderAadb2cArrayOutput{})
	pulumi.RegisterOutputType(IdentityProviderAadb2cMapOutput{})
}
