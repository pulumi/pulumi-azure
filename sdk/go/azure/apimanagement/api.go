// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages an API within an API Management Service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/apimanagement"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West Europe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleService, err := apimanagement.NewService(ctx, "exampleService", &apimanagement.ServiceArgs{
// 			Location:          exampleResourceGroup.Location,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			PublisherName:     pulumi.String("My Company"),
// 			PublisherEmail:    pulumi.String("company@exmaple.com"),
// 			SkuName:           pulumi.String("Developer_1"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = apimanagement.NewApi(ctx, "exampleApi", &apimanagement.ApiArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			ApiManagementName: exampleService.Name,
// 			Revision:          pulumi.String("1"),
// 			DisplayName:       pulumi.String("Example API"),
// 			Path:              pulumi.String("example"),
// 			Protocols: pulumi.StringArray{
// 				pulumi.String("https"),
// 			},
// 			Import: &apimanagement.ApiImportArgs{
// 				ContentFormat: pulumi.String("swagger-link-json"),
// 				ContentValue:  pulumi.String("http://conferenceapi.azurewebsites.net/?format=json"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// API Management API's can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:apimanagement/api:Api example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ApiManagement/service/instance1/apis/api1
// ```
type Api struct {
	pulumi.CustomResourceState

	// The Name of the API Management Service where this API should be created. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringOutput `pulumi:"apiManagementName"`
	// A description of the API Management API, which may include HTML formatting tags.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The display name of the API.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// A `import` block as documented below.
	Import ApiImportPtrOutput `pulumi:"import"`
	// Is this the current API Revision?
	IsCurrent pulumi.BoolOutput `pulumi:"isCurrent"`
	// Is this API Revision online/accessible via the Gateway?
	IsOnline pulumi.BoolOutput `pulumi:"isOnline"`
	// The name of the API Management API. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// An `oauth2Authorization` block as documented below.
	Oauth2Authorization ApiOauth2AuthorizationPtrOutput `pulumi:"oauth2Authorization"`
	// An `openidAuthentication` block as documented below.
	OpenidAuthentication ApiOpenidAuthenticationPtrOutput `pulumi:"openidAuthentication"`
	// The Path for this API Management API, which is a relative URL which uniquely identifies this API and all of its resource paths within the API Management Service.
	Path pulumi.StringOutput `pulumi:"path"`
	// A list of protocols the operations in this API can be invoked. Possible values are `http` and `https`.
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// The Name of the Resource Group where the API Management API exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The Revision which used for this API.
	Revision pulumi.StringOutput `pulumi:"revision"`
	// Absolute URL of the backend service implementing this API.
	ServiceUrl pulumi.StringOutput `pulumi:"serviceUrl"`
	// Should this API expose a SOAP frontend, rather than a HTTP frontend? Defaults to `false`.
	SoapPassThrough pulumi.BoolPtrOutput `pulumi:"soapPassThrough"`
	// A `subscriptionKeyParameterNames` block as documented below.
	SubscriptionKeyParameterNames ApiSubscriptionKeyParameterNamesOutput `pulumi:"subscriptionKeyParameterNames"`
	// Should this API require a subscription key?
	SubscriptionRequired pulumi.BoolPtrOutput `pulumi:"subscriptionRequired"`
	// The Version number of this API, if this API is versioned.
	Version pulumi.StringOutput `pulumi:"version"`
	// The ID of the Version Set which this API is associated with.
	VersionSetId pulumi.StringOutput `pulumi:"versionSetId"`
}

// NewApi registers a new resource with the given unique name, arguments, and options.
func NewApi(ctx *pulumi.Context,
	name string, args *ApiArgs, opts ...pulumi.ResourceOption) (*Api, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiManagementName == nil {
		return nil, errors.New("invalid value for required argument 'ApiManagementName'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	if args.Protocols == nil {
		return nil, errors.New("invalid value for required argument 'Protocols'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Revision == nil {
		return nil, errors.New("invalid value for required argument 'Revision'")
	}
	var resource Api
	err := ctx.RegisterResource("azure:apimanagement/api:Api", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApi gets an existing Api resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApi(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiState, opts ...pulumi.ResourceOption) (*Api, error) {
	var resource Api
	err := ctx.ReadResource("azure:apimanagement/api:Api", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Api resources.
type apiState struct {
	// The Name of the API Management Service where this API should be created. Changing this forces a new resource to be created.
	ApiManagementName *string `pulumi:"apiManagementName"`
	// A description of the API Management API, which may include HTML formatting tags.
	Description *string `pulumi:"description"`
	// The display name of the API.
	DisplayName *string `pulumi:"displayName"`
	// A `import` block as documented below.
	Import *ApiImport `pulumi:"import"`
	// Is this the current API Revision?
	IsCurrent *bool `pulumi:"isCurrent"`
	// Is this API Revision online/accessible via the Gateway?
	IsOnline *bool `pulumi:"isOnline"`
	// The name of the API Management API. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// An `oauth2Authorization` block as documented below.
	Oauth2Authorization *ApiOauth2Authorization `pulumi:"oauth2Authorization"`
	// An `openidAuthentication` block as documented below.
	OpenidAuthentication *ApiOpenidAuthentication `pulumi:"openidAuthentication"`
	// The Path for this API Management API, which is a relative URL which uniquely identifies this API and all of its resource paths within the API Management Service.
	Path *string `pulumi:"path"`
	// A list of protocols the operations in this API can be invoked. Possible values are `http` and `https`.
	Protocols []string `pulumi:"protocols"`
	// The Name of the Resource Group where the API Management API exists. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The Revision which used for this API.
	Revision *string `pulumi:"revision"`
	// Absolute URL of the backend service implementing this API.
	ServiceUrl *string `pulumi:"serviceUrl"`
	// Should this API expose a SOAP frontend, rather than a HTTP frontend? Defaults to `false`.
	SoapPassThrough *bool `pulumi:"soapPassThrough"`
	// A `subscriptionKeyParameterNames` block as documented below.
	SubscriptionKeyParameterNames *ApiSubscriptionKeyParameterNames `pulumi:"subscriptionKeyParameterNames"`
	// Should this API require a subscription key?
	SubscriptionRequired *bool `pulumi:"subscriptionRequired"`
	// The Version number of this API, if this API is versioned.
	Version *string `pulumi:"version"`
	// The ID of the Version Set which this API is associated with.
	VersionSetId *string `pulumi:"versionSetId"`
}

type ApiState struct {
	// The Name of the API Management Service where this API should be created. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringPtrInput
	// A description of the API Management API, which may include HTML formatting tags.
	Description pulumi.StringPtrInput
	// The display name of the API.
	DisplayName pulumi.StringPtrInput
	// A `import` block as documented below.
	Import ApiImportPtrInput
	// Is this the current API Revision?
	IsCurrent pulumi.BoolPtrInput
	// Is this API Revision online/accessible via the Gateway?
	IsOnline pulumi.BoolPtrInput
	// The name of the API Management API. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// An `oauth2Authorization` block as documented below.
	Oauth2Authorization ApiOauth2AuthorizationPtrInput
	// An `openidAuthentication` block as documented below.
	OpenidAuthentication ApiOpenidAuthenticationPtrInput
	// The Path for this API Management API, which is a relative URL which uniquely identifies this API and all of its resource paths within the API Management Service.
	Path pulumi.StringPtrInput
	// A list of protocols the operations in this API can be invoked. Possible values are `http` and `https`.
	Protocols pulumi.StringArrayInput
	// The Name of the Resource Group where the API Management API exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The Revision which used for this API.
	Revision pulumi.StringPtrInput
	// Absolute URL of the backend service implementing this API.
	ServiceUrl pulumi.StringPtrInput
	// Should this API expose a SOAP frontend, rather than a HTTP frontend? Defaults to `false`.
	SoapPassThrough pulumi.BoolPtrInput
	// A `subscriptionKeyParameterNames` block as documented below.
	SubscriptionKeyParameterNames ApiSubscriptionKeyParameterNamesPtrInput
	// Should this API require a subscription key?
	SubscriptionRequired pulumi.BoolPtrInput
	// The Version number of this API, if this API is versioned.
	Version pulumi.StringPtrInput
	// The ID of the Version Set which this API is associated with.
	VersionSetId pulumi.StringPtrInput
}

func (ApiState) ElementType() reflect.Type {
	return reflect.TypeOf((*apiState)(nil)).Elem()
}

type apiArgs struct {
	// The Name of the API Management Service where this API should be created. Changing this forces a new resource to be created.
	ApiManagementName string `pulumi:"apiManagementName"`
	// A description of the API Management API, which may include HTML formatting tags.
	Description *string `pulumi:"description"`
	// The display name of the API.
	DisplayName string `pulumi:"displayName"`
	// A `import` block as documented below.
	Import *ApiImport `pulumi:"import"`
	// The name of the API Management API. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// An `oauth2Authorization` block as documented below.
	Oauth2Authorization *ApiOauth2Authorization `pulumi:"oauth2Authorization"`
	// An `openidAuthentication` block as documented below.
	OpenidAuthentication *ApiOpenidAuthentication `pulumi:"openidAuthentication"`
	// The Path for this API Management API, which is a relative URL which uniquely identifies this API and all of its resource paths within the API Management Service.
	Path string `pulumi:"path"`
	// A list of protocols the operations in this API can be invoked. Possible values are `http` and `https`.
	Protocols []string `pulumi:"protocols"`
	// The Name of the Resource Group where the API Management API exists. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The Revision which used for this API.
	Revision string `pulumi:"revision"`
	// Absolute URL of the backend service implementing this API.
	ServiceUrl *string `pulumi:"serviceUrl"`
	// Should this API expose a SOAP frontend, rather than a HTTP frontend? Defaults to `false`.
	SoapPassThrough *bool `pulumi:"soapPassThrough"`
	// A `subscriptionKeyParameterNames` block as documented below.
	SubscriptionKeyParameterNames *ApiSubscriptionKeyParameterNames `pulumi:"subscriptionKeyParameterNames"`
	// Should this API require a subscription key?
	SubscriptionRequired *bool `pulumi:"subscriptionRequired"`
	// The Version number of this API, if this API is versioned.
	Version *string `pulumi:"version"`
	// The ID of the Version Set which this API is associated with.
	VersionSetId *string `pulumi:"versionSetId"`
}

// The set of arguments for constructing a Api resource.
type ApiArgs struct {
	// The Name of the API Management Service where this API should be created. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringInput
	// A description of the API Management API, which may include HTML formatting tags.
	Description pulumi.StringPtrInput
	// The display name of the API.
	DisplayName pulumi.StringInput
	// A `import` block as documented below.
	Import ApiImportPtrInput
	// The name of the API Management API. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// An `oauth2Authorization` block as documented below.
	Oauth2Authorization ApiOauth2AuthorizationPtrInput
	// An `openidAuthentication` block as documented below.
	OpenidAuthentication ApiOpenidAuthenticationPtrInput
	// The Path for this API Management API, which is a relative URL which uniquely identifies this API and all of its resource paths within the API Management Service.
	Path pulumi.StringInput
	// A list of protocols the operations in this API can be invoked. Possible values are `http` and `https`.
	Protocols pulumi.StringArrayInput
	// The Name of the Resource Group where the API Management API exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// The Revision which used for this API.
	Revision pulumi.StringInput
	// Absolute URL of the backend service implementing this API.
	ServiceUrl pulumi.StringPtrInput
	// Should this API expose a SOAP frontend, rather than a HTTP frontend? Defaults to `false`.
	SoapPassThrough pulumi.BoolPtrInput
	// A `subscriptionKeyParameterNames` block as documented below.
	SubscriptionKeyParameterNames ApiSubscriptionKeyParameterNamesPtrInput
	// Should this API require a subscription key?
	SubscriptionRequired pulumi.BoolPtrInput
	// The Version number of this API, if this API is versioned.
	Version pulumi.StringPtrInput
	// The ID of the Version Set which this API is associated with.
	VersionSetId pulumi.StringPtrInput
}

func (ApiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apiArgs)(nil)).Elem()
}

type ApiInput interface {
	pulumi.Input

	ToApiOutput() ApiOutput
	ToApiOutputWithContext(ctx context.Context) ApiOutput
}

func (*Api) ElementType() reflect.Type {
	return reflect.TypeOf((*Api)(nil))
}

func (i *Api) ToApiOutput() ApiOutput {
	return i.ToApiOutputWithContext(context.Background())
}

func (i *Api) ToApiOutputWithContext(ctx context.Context) ApiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiOutput)
}

func (i *Api) ToApiPtrOutput() ApiPtrOutput {
	return i.ToApiPtrOutputWithContext(context.Background())
}

func (i *Api) ToApiPtrOutputWithContext(ctx context.Context) ApiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiPtrOutput)
}

type ApiPtrInput interface {
	pulumi.Input

	ToApiPtrOutput() ApiPtrOutput
	ToApiPtrOutputWithContext(ctx context.Context) ApiPtrOutput
}

type apiPtrType ApiArgs

func (*apiPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Api)(nil))
}

func (i *apiPtrType) ToApiPtrOutput() ApiPtrOutput {
	return i.ToApiPtrOutputWithContext(context.Background())
}

func (i *apiPtrType) ToApiPtrOutputWithContext(ctx context.Context) ApiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiPtrOutput)
}

// ApiArrayInput is an input type that accepts ApiArray and ApiArrayOutput values.
// You can construct a concrete instance of `ApiArrayInput` via:
//
//          ApiArray{ ApiArgs{...} }
type ApiArrayInput interface {
	pulumi.Input

	ToApiArrayOutput() ApiArrayOutput
	ToApiArrayOutputWithContext(context.Context) ApiArrayOutput
}

type ApiArray []ApiInput

func (ApiArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Api)(nil))
}

func (i ApiArray) ToApiArrayOutput() ApiArrayOutput {
	return i.ToApiArrayOutputWithContext(context.Background())
}

func (i ApiArray) ToApiArrayOutputWithContext(ctx context.Context) ApiArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiArrayOutput)
}

// ApiMapInput is an input type that accepts ApiMap and ApiMapOutput values.
// You can construct a concrete instance of `ApiMapInput` via:
//
//          ApiMap{ "key": ApiArgs{...} }
type ApiMapInput interface {
	pulumi.Input

	ToApiMapOutput() ApiMapOutput
	ToApiMapOutputWithContext(context.Context) ApiMapOutput
}

type ApiMap map[string]ApiInput

func (ApiMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Api)(nil))
}

func (i ApiMap) ToApiMapOutput() ApiMapOutput {
	return i.ToApiMapOutputWithContext(context.Background())
}

func (i ApiMap) ToApiMapOutputWithContext(ctx context.Context) ApiMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiMapOutput)
}

type ApiOutput struct {
	*pulumi.OutputState
}

func (ApiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Api)(nil))
}

func (o ApiOutput) ToApiOutput() ApiOutput {
	return o
}

func (o ApiOutput) ToApiOutputWithContext(ctx context.Context) ApiOutput {
	return o
}

func (o ApiOutput) ToApiPtrOutput() ApiPtrOutput {
	return o.ToApiPtrOutputWithContext(context.Background())
}

func (o ApiOutput) ToApiPtrOutputWithContext(ctx context.Context) ApiPtrOutput {
	return o.ApplyT(func(v Api) *Api {
		return &v
	}).(ApiPtrOutput)
}

type ApiPtrOutput struct {
	*pulumi.OutputState
}

func (ApiPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Api)(nil))
}

func (o ApiPtrOutput) ToApiPtrOutput() ApiPtrOutput {
	return o
}

func (o ApiPtrOutput) ToApiPtrOutputWithContext(ctx context.Context) ApiPtrOutput {
	return o
}

type ApiArrayOutput struct{ *pulumi.OutputState }

func (ApiArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Api)(nil))
}

func (o ApiArrayOutput) ToApiArrayOutput() ApiArrayOutput {
	return o
}

func (o ApiArrayOutput) ToApiArrayOutputWithContext(ctx context.Context) ApiArrayOutput {
	return o
}

func (o ApiArrayOutput) Index(i pulumi.IntInput) ApiOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Api {
		return vs[0].([]Api)[vs[1].(int)]
	}).(ApiOutput)
}

type ApiMapOutput struct{ *pulumi.OutputState }

func (ApiMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Api)(nil))
}

func (o ApiMapOutput) ToApiMapOutput() ApiMapOutput {
	return o
}

func (o ApiMapOutput) ToApiMapOutputWithContext(ctx context.Context) ApiMapOutput {
	return o
}

func (o ApiMapOutput) MapIndex(k pulumi.StringInput) ApiOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Api {
		return vs[0].(map[string]Api)[vs[1].(string)]
	}).(ApiOutput)
}

func init() {
	pulumi.RegisterOutputType(ApiOutput{})
	pulumi.RegisterOutputType(ApiPtrOutput{})
	pulumi.RegisterOutputType(ApiArrayOutput{})
	pulumi.RegisterOutputType(ApiMapOutput{})
}
