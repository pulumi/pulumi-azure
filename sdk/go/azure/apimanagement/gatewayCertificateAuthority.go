// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an API Management Gateway Certificate Authority.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/base64"
//	"os"
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/apimanagement"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func filebase64OrPanic(path string) pulumi.StringPtrInput {
//		if fileData, err := os.ReadFile(path); err == nil {
//			return pulumi.String(base64.StdEncoding.EncodeToString(fileData[:]))
//		} else {
//			panic(err.Error())
//		}
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleService, err := apimanagement.NewService(ctx, "exampleService", &apimanagement.ServiceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				PublisherName:     pulumi.String("pub1"),
//				PublisherEmail:    pulumi.String("pub1@email.com"),
//				SkuName:           pulumi.String("Consumption_0"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleGateway, err := apimanagement.NewGateway(ctx, "exampleGateway", &apimanagement.GatewayArgs{
//				ApiManagementId: exampleService.ID(),
//				Description:     pulumi.String("Example API Management gateway"),
//				LocationData: &apimanagement.GatewayLocationDataArgs{
//					Name:     pulumi.String("example name"),
//					City:     pulumi.String("example city"),
//					District: pulumi.String("example district"),
//					Region:   pulumi.String("example region"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleCertificate, err := apimanagement.NewCertificate(ctx, "exampleCertificate", &apimanagement.CertificateArgs{
//				ApiManagementName: exampleService.Name,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Data:              filebase64OrPanic("example.pfx"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = apimanagement.NewGatewayCertificateAuthority(ctx, "exampleGatewayCertificateAuthority", &apimanagement.GatewayCertificateAuthorityArgs{
//				ApiManagementId: exampleService.ID(),
//				CertificateName: exampleCertificate.Name,
//				GatewayName:     exampleGateway.Name,
//				IsTrusted:       pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// API Management Gateway Certificate Authority can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:apimanagement/gatewayCertificateAuthority:GatewayCertificateAuthority example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.ApiManagement/service/service1/gateways/gateway1/certificateAuthorities/cert1
//
// ```
type GatewayCertificateAuthority struct {
	pulumi.CustomResourceState

	// The ID of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementId pulumi.StringOutput `pulumi:"apiManagementId"`
	// The name of the API Management Certificate. Changing this forces a new resource to be created.
	CertificateName pulumi.StringOutput `pulumi:"certificateName"`
	// The name of the API Management Gateway. Changing this forces a new resource to be created.
	GatewayName pulumi.StringOutput `pulumi:"gatewayName"`
	// Whether the API Management Gateway Certificate Authority is trusted.
	IsTrusted pulumi.BoolPtrOutput `pulumi:"isTrusted"`
}

// NewGatewayCertificateAuthority registers a new resource with the given unique name, arguments, and options.
func NewGatewayCertificateAuthority(ctx *pulumi.Context,
	name string, args *GatewayCertificateAuthorityArgs, opts ...pulumi.ResourceOption) (*GatewayCertificateAuthority, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiManagementId == nil {
		return nil, errors.New("invalid value for required argument 'ApiManagementId'")
	}
	if args.CertificateName == nil {
		return nil, errors.New("invalid value for required argument 'CertificateName'")
	}
	if args.GatewayName == nil {
		return nil, errors.New("invalid value for required argument 'GatewayName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayCertificateAuthority
	err := ctx.RegisterResource("azure:apimanagement/gatewayCertificateAuthority:GatewayCertificateAuthority", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayCertificateAuthority gets an existing GatewayCertificateAuthority resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayCertificateAuthority(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayCertificateAuthorityState, opts ...pulumi.ResourceOption) (*GatewayCertificateAuthority, error) {
	var resource GatewayCertificateAuthority
	err := ctx.ReadResource("azure:apimanagement/gatewayCertificateAuthority:GatewayCertificateAuthority", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayCertificateAuthority resources.
type gatewayCertificateAuthorityState struct {
	// The ID of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementId *string `pulumi:"apiManagementId"`
	// The name of the API Management Certificate. Changing this forces a new resource to be created.
	CertificateName *string `pulumi:"certificateName"`
	// The name of the API Management Gateway. Changing this forces a new resource to be created.
	GatewayName *string `pulumi:"gatewayName"`
	// Whether the API Management Gateway Certificate Authority is trusted.
	IsTrusted *bool `pulumi:"isTrusted"`
}

type GatewayCertificateAuthorityState struct {
	// The ID of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementId pulumi.StringPtrInput
	// The name of the API Management Certificate. Changing this forces a new resource to be created.
	CertificateName pulumi.StringPtrInput
	// The name of the API Management Gateway. Changing this forces a new resource to be created.
	GatewayName pulumi.StringPtrInput
	// Whether the API Management Gateway Certificate Authority is trusted.
	IsTrusted pulumi.BoolPtrInput
}

func (GatewayCertificateAuthorityState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayCertificateAuthorityState)(nil)).Elem()
}

type gatewayCertificateAuthorityArgs struct {
	// The ID of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementId string `pulumi:"apiManagementId"`
	// The name of the API Management Certificate. Changing this forces a new resource to be created.
	CertificateName string `pulumi:"certificateName"`
	// The name of the API Management Gateway. Changing this forces a new resource to be created.
	GatewayName string `pulumi:"gatewayName"`
	// Whether the API Management Gateway Certificate Authority is trusted.
	IsTrusted *bool `pulumi:"isTrusted"`
}

// The set of arguments for constructing a GatewayCertificateAuthority resource.
type GatewayCertificateAuthorityArgs struct {
	// The ID of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementId pulumi.StringInput
	// The name of the API Management Certificate. Changing this forces a new resource to be created.
	CertificateName pulumi.StringInput
	// The name of the API Management Gateway. Changing this forces a new resource to be created.
	GatewayName pulumi.StringInput
	// Whether the API Management Gateway Certificate Authority is trusted.
	IsTrusted pulumi.BoolPtrInput
}

func (GatewayCertificateAuthorityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayCertificateAuthorityArgs)(nil)).Elem()
}

type GatewayCertificateAuthorityInput interface {
	pulumi.Input

	ToGatewayCertificateAuthorityOutput() GatewayCertificateAuthorityOutput
	ToGatewayCertificateAuthorityOutputWithContext(ctx context.Context) GatewayCertificateAuthorityOutput
}

func (*GatewayCertificateAuthority) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayCertificateAuthority)(nil)).Elem()
}

func (i *GatewayCertificateAuthority) ToGatewayCertificateAuthorityOutput() GatewayCertificateAuthorityOutput {
	return i.ToGatewayCertificateAuthorityOutputWithContext(context.Background())
}

func (i *GatewayCertificateAuthority) ToGatewayCertificateAuthorityOutputWithContext(ctx context.Context) GatewayCertificateAuthorityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayCertificateAuthorityOutput)
}

// GatewayCertificateAuthorityArrayInput is an input type that accepts GatewayCertificateAuthorityArray and GatewayCertificateAuthorityArrayOutput values.
// You can construct a concrete instance of `GatewayCertificateAuthorityArrayInput` via:
//
//	GatewayCertificateAuthorityArray{ GatewayCertificateAuthorityArgs{...} }
type GatewayCertificateAuthorityArrayInput interface {
	pulumi.Input

	ToGatewayCertificateAuthorityArrayOutput() GatewayCertificateAuthorityArrayOutput
	ToGatewayCertificateAuthorityArrayOutputWithContext(context.Context) GatewayCertificateAuthorityArrayOutput
}

type GatewayCertificateAuthorityArray []GatewayCertificateAuthorityInput

func (GatewayCertificateAuthorityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayCertificateAuthority)(nil)).Elem()
}

func (i GatewayCertificateAuthorityArray) ToGatewayCertificateAuthorityArrayOutput() GatewayCertificateAuthorityArrayOutput {
	return i.ToGatewayCertificateAuthorityArrayOutputWithContext(context.Background())
}

func (i GatewayCertificateAuthorityArray) ToGatewayCertificateAuthorityArrayOutputWithContext(ctx context.Context) GatewayCertificateAuthorityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayCertificateAuthorityArrayOutput)
}

// GatewayCertificateAuthorityMapInput is an input type that accepts GatewayCertificateAuthorityMap and GatewayCertificateAuthorityMapOutput values.
// You can construct a concrete instance of `GatewayCertificateAuthorityMapInput` via:
//
//	GatewayCertificateAuthorityMap{ "key": GatewayCertificateAuthorityArgs{...} }
type GatewayCertificateAuthorityMapInput interface {
	pulumi.Input

	ToGatewayCertificateAuthorityMapOutput() GatewayCertificateAuthorityMapOutput
	ToGatewayCertificateAuthorityMapOutputWithContext(context.Context) GatewayCertificateAuthorityMapOutput
}

type GatewayCertificateAuthorityMap map[string]GatewayCertificateAuthorityInput

func (GatewayCertificateAuthorityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayCertificateAuthority)(nil)).Elem()
}

func (i GatewayCertificateAuthorityMap) ToGatewayCertificateAuthorityMapOutput() GatewayCertificateAuthorityMapOutput {
	return i.ToGatewayCertificateAuthorityMapOutputWithContext(context.Background())
}

func (i GatewayCertificateAuthorityMap) ToGatewayCertificateAuthorityMapOutputWithContext(ctx context.Context) GatewayCertificateAuthorityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayCertificateAuthorityMapOutput)
}

type GatewayCertificateAuthorityOutput struct{ *pulumi.OutputState }

func (GatewayCertificateAuthorityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayCertificateAuthority)(nil)).Elem()
}

func (o GatewayCertificateAuthorityOutput) ToGatewayCertificateAuthorityOutput() GatewayCertificateAuthorityOutput {
	return o
}

func (o GatewayCertificateAuthorityOutput) ToGatewayCertificateAuthorityOutputWithContext(ctx context.Context) GatewayCertificateAuthorityOutput {
	return o
}

// The ID of the API Management Service. Changing this forces a new resource to be created.
func (o GatewayCertificateAuthorityOutput) ApiManagementId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayCertificateAuthority) pulumi.StringOutput { return v.ApiManagementId }).(pulumi.StringOutput)
}

// The name of the API Management Certificate. Changing this forces a new resource to be created.
func (o GatewayCertificateAuthorityOutput) CertificateName() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayCertificateAuthority) pulumi.StringOutput { return v.CertificateName }).(pulumi.StringOutput)
}

// The name of the API Management Gateway. Changing this forces a new resource to be created.
func (o GatewayCertificateAuthorityOutput) GatewayName() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayCertificateAuthority) pulumi.StringOutput { return v.GatewayName }).(pulumi.StringOutput)
}

// Whether the API Management Gateway Certificate Authority is trusted.
func (o GatewayCertificateAuthorityOutput) IsTrusted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewayCertificateAuthority) pulumi.BoolPtrOutput { return v.IsTrusted }).(pulumi.BoolPtrOutput)
}

type GatewayCertificateAuthorityArrayOutput struct{ *pulumi.OutputState }

func (GatewayCertificateAuthorityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayCertificateAuthority)(nil)).Elem()
}

func (o GatewayCertificateAuthorityArrayOutput) ToGatewayCertificateAuthorityArrayOutput() GatewayCertificateAuthorityArrayOutput {
	return o
}

func (o GatewayCertificateAuthorityArrayOutput) ToGatewayCertificateAuthorityArrayOutputWithContext(ctx context.Context) GatewayCertificateAuthorityArrayOutput {
	return o
}

func (o GatewayCertificateAuthorityArrayOutput) Index(i pulumi.IntInput) GatewayCertificateAuthorityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayCertificateAuthority {
		return vs[0].([]*GatewayCertificateAuthority)[vs[1].(int)]
	}).(GatewayCertificateAuthorityOutput)
}

type GatewayCertificateAuthorityMapOutput struct{ *pulumi.OutputState }

func (GatewayCertificateAuthorityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayCertificateAuthority)(nil)).Elem()
}

func (o GatewayCertificateAuthorityMapOutput) ToGatewayCertificateAuthorityMapOutput() GatewayCertificateAuthorityMapOutput {
	return o
}

func (o GatewayCertificateAuthorityMapOutput) ToGatewayCertificateAuthorityMapOutputWithContext(ctx context.Context) GatewayCertificateAuthorityMapOutput {
	return o
}

func (o GatewayCertificateAuthorityMapOutput) MapIndex(k pulumi.StringInput) GatewayCertificateAuthorityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayCertificateAuthority {
		return vs[0].(map[string]*GatewayCertificateAuthority)[vs[1].(string)]
	}).(GatewayCertificateAuthorityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayCertificateAuthorityInput)(nil)).Elem(), &GatewayCertificateAuthority{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayCertificateAuthorityArrayInput)(nil)).Elem(), GatewayCertificateAuthorityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayCertificateAuthorityMapInput)(nil)).Elem(), GatewayCertificateAuthorityMap{})
	pulumi.RegisterOutputType(GatewayCertificateAuthorityOutput{})
	pulumi.RegisterOutputType(GatewayCertificateAuthorityArrayOutput{})
	pulumi.RegisterOutputType(GatewayCertificateAuthorityMapOutput{})
}
