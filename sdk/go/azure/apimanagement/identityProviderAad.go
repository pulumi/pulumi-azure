// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages an API Management AAD Identity Provider.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/apimanagement"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West Europe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleService, err := apimanagement.NewService(ctx, "exampleService", &apimanagement.ServiceArgs{
// 			Location:          exampleResourceGroup.Location,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			PublisherName:     pulumi.String("My Company"),
// 			PublisherEmail:    pulumi.String("company@mycompany.io"),
// 			SkuName:           pulumi.String("Developer_1"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = apimanagement.NewIdentityProviderAad(ctx, "exampleIdentityProviderAad", &apimanagement.IdentityProviderAadArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			ApiManagementName: exampleService.Name,
// 			ClientId:          pulumi.String("00000000-0000-0000-0000-000000000000"),
// 			ClientSecret:      pulumi.String("00000000000000000000000000000000"),
// 			AllowedTenants: pulumi.StringArray{
// 				pulumi.String("00000000-0000-0000-0000-000000000000"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// API Management AAD Identity Provider can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:apimanagement/identityProviderAad:IdentityProviderAad example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ApiManagement/service/instance1/identityProviders/aad
// ```
type IdentityProviderAad struct {
	pulumi.CustomResourceState

	// List of allowed AAD Tenants.
	AllowedTenants pulumi.StringArrayOutput `pulumi:"allowedTenants"`
	// The Name of the API Management Service where this AAD Identity Provider should be created. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringOutput `pulumi:"apiManagementName"`
	// Client Id of the Application in the AAD Identity Provider.
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// Client secret of the Application in the AAD Identity Provider.
	ClientSecret pulumi.StringOutput `pulumi:"clientSecret"`
	// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The AAD Tenant to use instead of Common when logging into Active Directory
	SigninTenant pulumi.StringPtrOutput `pulumi:"signinTenant"`
}

// NewIdentityProviderAad registers a new resource with the given unique name, arguments, and options.
func NewIdentityProviderAad(ctx *pulumi.Context,
	name string, args *IdentityProviderAadArgs, opts ...pulumi.ResourceOption) (*IdentityProviderAad, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AllowedTenants == nil {
		return nil, errors.New("invalid value for required argument 'AllowedTenants'")
	}
	if args.ApiManagementName == nil {
		return nil, errors.New("invalid value for required argument 'ApiManagementName'")
	}
	if args.ClientId == nil {
		return nil, errors.New("invalid value for required argument 'ClientId'")
	}
	if args.ClientSecret == nil {
		return nil, errors.New("invalid value for required argument 'ClientSecret'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	var resource IdentityProviderAad
	err := ctx.RegisterResource("azure:apimanagement/identityProviderAad:IdentityProviderAad", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityProviderAad gets an existing IdentityProviderAad resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityProviderAad(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityProviderAadState, opts ...pulumi.ResourceOption) (*IdentityProviderAad, error) {
	var resource IdentityProviderAad
	err := ctx.ReadResource("azure:apimanagement/identityProviderAad:IdentityProviderAad", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityProviderAad resources.
type identityProviderAadState struct {
	// List of allowed AAD Tenants.
	AllowedTenants []string `pulumi:"allowedTenants"`
	// The Name of the API Management Service where this AAD Identity Provider should be created. Changing this forces a new resource to be created.
	ApiManagementName *string `pulumi:"apiManagementName"`
	// Client Id of the Application in the AAD Identity Provider.
	ClientId *string `pulumi:"clientId"`
	// Client secret of the Application in the AAD Identity Provider.
	ClientSecret *string `pulumi:"clientSecret"`
	// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The AAD Tenant to use instead of Common when logging into Active Directory
	SigninTenant *string `pulumi:"signinTenant"`
}

type IdentityProviderAadState struct {
	// List of allowed AAD Tenants.
	AllowedTenants pulumi.StringArrayInput
	// The Name of the API Management Service where this AAD Identity Provider should be created. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringPtrInput
	// Client Id of the Application in the AAD Identity Provider.
	ClientId pulumi.StringPtrInput
	// Client secret of the Application in the AAD Identity Provider.
	ClientSecret pulumi.StringPtrInput
	// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The AAD Tenant to use instead of Common when logging into Active Directory
	SigninTenant pulumi.StringPtrInput
}

func (IdentityProviderAadState) ElementType() reflect.Type {
	return reflect.TypeOf((*identityProviderAadState)(nil)).Elem()
}

type identityProviderAadArgs struct {
	// List of allowed AAD Tenants.
	AllowedTenants []string `pulumi:"allowedTenants"`
	// The Name of the API Management Service where this AAD Identity Provider should be created. Changing this forces a new resource to be created.
	ApiManagementName string `pulumi:"apiManagementName"`
	// Client Id of the Application in the AAD Identity Provider.
	ClientId string `pulumi:"clientId"`
	// Client secret of the Application in the AAD Identity Provider.
	ClientSecret string `pulumi:"clientSecret"`
	// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The AAD Tenant to use instead of Common when logging into Active Directory
	SigninTenant *string `pulumi:"signinTenant"`
}

// The set of arguments for constructing a IdentityProviderAad resource.
type IdentityProviderAadArgs struct {
	// List of allowed AAD Tenants.
	AllowedTenants pulumi.StringArrayInput
	// The Name of the API Management Service where this AAD Identity Provider should be created. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringInput
	// Client Id of the Application in the AAD Identity Provider.
	ClientId pulumi.StringInput
	// Client secret of the Application in the AAD Identity Provider.
	ClientSecret pulumi.StringInput
	// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// The AAD Tenant to use instead of Common when logging into Active Directory
	SigninTenant pulumi.StringPtrInput
}

func (IdentityProviderAadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identityProviderAadArgs)(nil)).Elem()
}

type IdentityProviderAadInput interface {
	pulumi.Input

	ToIdentityProviderAadOutput() IdentityProviderAadOutput
	ToIdentityProviderAadOutputWithContext(ctx context.Context) IdentityProviderAadOutput
}

func (*IdentityProviderAad) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityProviderAad)(nil))
}

func (i *IdentityProviderAad) ToIdentityProviderAadOutput() IdentityProviderAadOutput {
	return i.ToIdentityProviderAadOutputWithContext(context.Background())
}

func (i *IdentityProviderAad) ToIdentityProviderAadOutputWithContext(ctx context.Context) IdentityProviderAadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProviderAadOutput)
}

func (i *IdentityProviderAad) ToIdentityProviderAadPtrOutput() IdentityProviderAadPtrOutput {
	return i.ToIdentityProviderAadPtrOutputWithContext(context.Background())
}

func (i *IdentityProviderAad) ToIdentityProviderAadPtrOutputWithContext(ctx context.Context) IdentityProviderAadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProviderAadPtrOutput)
}

type IdentityProviderAadPtrInput interface {
	pulumi.Input

	ToIdentityProviderAadPtrOutput() IdentityProviderAadPtrOutput
	ToIdentityProviderAadPtrOutputWithContext(ctx context.Context) IdentityProviderAadPtrOutput
}

type identityProviderAadPtrType IdentityProviderAadArgs

func (*identityProviderAadPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProviderAad)(nil))
}

func (i *identityProviderAadPtrType) ToIdentityProviderAadPtrOutput() IdentityProviderAadPtrOutput {
	return i.ToIdentityProviderAadPtrOutputWithContext(context.Background())
}

func (i *identityProviderAadPtrType) ToIdentityProviderAadPtrOutputWithContext(ctx context.Context) IdentityProviderAadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProviderAadPtrOutput)
}

// IdentityProviderAadArrayInput is an input type that accepts IdentityProviderAadArray and IdentityProviderAadArrayOutput values.
// You can construct a concrete instance of `IdentityProviderAadArrayInput` via:
//
//          IdentityProviderAadArray{ IdentityProviderAadArgs{...} }
type IdentityProviderAadArrayInput interface {
	pulumi.Input

	ToIdentityProviderAadArrayOutput() IdentityProviderAadArrayOutput
	ToIdentityProviderAadArrayOutputWithContext(context.Context) IdentityProviderAadArrayOutput
}

type IdentityProviderAadArray []IdentityProviderAadInput

func (IdentityProviderAadArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*IdentityProviderAad)(nil))
}

func (i IdentityProviderAadArray) ToIdentityProviderAadArrayOutput() IdentityProviderAadArrayOutput {
	return i.ToIdentityProviderAadArrayOutputWithContext(context.Background())
}

func (i IdentityProviderAadArray) ToIdentityProviderAadArrayOutputWithContext(ctx context.Context) IdentityProviderAadArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProviderAadArrayOutput)
}

// IdentityProviderAadMapInput is an input type that accepts IdentityProviderAadMap and IdentityProviderAadMapOutput values.
// You can construct a concrete instance of `IdentityProviderAadMapInput` via:
//
//          IdentityProviderAadMap{ "key": IdentityProviderAadArgs{...} }
type IdentityProviderAadMapInput interface {
	pulumi.Input

	ToIdentityProviderAadMapOutput() IdentityProviderAadMapOutput
	ToIdentityProviderAadMapOutputWithContext(context.Context) IdentityProviderAadMapOutput
}

type IdentityProviderAadMap map[string]IdentityProviderAadInput

func (IdentityProviderAadMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*IdentityProviderAad)(nil))
}

func (i IdentityProviderAadMap) ToIdentityProviderAadMapOutput() IdentityProviderAadMapOutput {
	return i.ToIdentityProviderAadMapOutputWithContext(context.Background())
}

func (i IdentityProviderAadMap) ToIdentityProviderAadMapOutputWithContext(ctx context.Context) IdentityProviderAadMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProviderAadMapOutput)
}

type IdentityProviderAadOutput struct {
	*pulumi.OutputState
}

func (IdentityProviderAadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityProviderAad)(nil))
}

func (o IdentityProviderAadOutput) ToIdentityProviderAadOutput() IdentityProviderAadOutput {
	return o
}

func (o IdentityProviderAadOutput) ToIdentityProviderAadOutputWithContext(ctx context.Context) IdentityProviderAadOutput {
	return o
}

func (o IdentityProviderAadOutput) ToIdentityProviderAadPtrOutput() IdentityProviderAadPtrOutput {
	return o.ToIdentityProviderAadPtrOutputWithContext(context.Background())
}

func (o IdentityProviderAadOutput) ToIdentityProviderAadPtrOutputWithContext(ctx context.Context) IdentityProviderAadPtrOutput {
	return o.ApplyT(func(v IdentityProviderAad) *IdentityProviderAad {
		return &v
	}).(IdentityProviderAadPtrOutput)
}

type IdentityProviderAadPtrOutput struct {
	*pulumi.OutputState
}

func (IdentityProviderAadPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProviderAad)(nil))
}

func (o IdentityProviderAadPtrOutput) ToIdentityProviderAadPtrOutput() IdentityProviderAadPtrOutput {
	return o
}

func (o IdentityProviderAadPtrOutput) ToIdentityProviderAadPtrOutputWithContext(ctx context.Context) IdentityProviderAadPtrOutput {
	return o
}

type IdentityProviderAadArrayOutput struct{ *pulumi.OutputState }

func (IdentityProviderAadArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdentityProviderAad)(nil))
}

func (o IdentityProviderAadArrayOutput) ToIdentityProviderAadArrayOutput() IdentityProviderAadArrayOutput {
	return o
}

func (o IdentityProviderAadArrayOutput) ToIdentityProviderAadArrayOutputWithContext(ctx context.Context) IdentityProviderAadArrayOutput {
	return o
}

func (o IdentityProviderAadArrayOutput) Index(i pulumi.IntInput) IdentityProviderAadOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IdentityProviderAad {
		return vs[0].([]IdentityProviderAad)[vs[1].(int)]
	}).(IdentityProviderAadOutput)
}

type IdentityProviderAadMapOutput struct{ *pulumi.OutputState }

func (IdentityProviderAadMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]IdentityProviderAad)(nil))
}

func (o IdentityProviderAadMapOutput) ToIdentityProviderAadMapOutput() IdentityProviderAadMapOutput {
	return o
}

func (o IdentityProviderAadMapOutput) ToIdentityProviderAadMapOutputWithContext(ctx context.Context) IdentityProviderAadMapOutput {
	return o
}

func (o IdentityProviderAadMapOutput) MapIndex(k pulumi.StringInput) IdentityProviderAadOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) IdentityProviderAad {
		return vs[0].(map[string]IdentityProviderAad)[vs[1].(string)]
	}).(IdentityProviderAadOutput)
}

func init() {
	pulumi.RegisterOutputType(IdentityProviderAadOutput{})
	pulumi.RegisterOutputType(IdentityProviderAadPtrOutput{})
	pulumi.RegisterOutputType(IdentityProviderAadArrayOutput{})
	pulumi.RegisterOutputType(IdentityProviderAadMapOutput{})
}
