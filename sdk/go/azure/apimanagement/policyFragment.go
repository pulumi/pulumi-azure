// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Api Management Policy Fragment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/apimanagement"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resources"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleService, err := apimanagement.NewService(ctx, "example", &apimanagement.ServiceArgs{
//				Name:              pulumi.String("example-apim"),
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//				PublisherName:     pulumi.String("pub1"),
//				PublisherEmail:    pulumi.String("pub1@email.com"),
//				SkuName:           pulumi.String("Developer_1"),
//			})
//			if err != nil {
//				return err
//			}
//			invokeFile, err := std.File(ctx, &std.FileArgs{
//				Input: "policy-fragment-1.xml",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = apimanagement.NewPolicyFragment(ctx, "example", &apimanagement.PolicyFragmentArgs{
//				ApiManagementId: exampleService.ID(),
//				Name:            pulumi.String("example-policy-fragment"),
//				Format:          pulumi.String("xml"),
//				Value:           pulumi.String(invokeFile.Result),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Api Management Policy Fragments can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:apimanagement/policyFragment:PolicyFragment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.ApiManagement/service/instance1/policyFragments/policyFragment1
// ```
type PolicyFragment struct {
	pulumi.CustomResourceState

	// The id of the API Management Service. Changing this forces a new Api Management Policy Fragment to be created.
	ApiManagementId pulumi.StringOutput `pulumi:"apiManagementId"`
	// The description for the Policy Fragment.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The format of the Policy Fragment. Possible values are `xml` or `rawxml`. Default is `xml`.
	//
	// > **NOTE:** The `value` property will be updated to reflect the corresponding format when `format` is updated.
	Format pulumi.StringPtrOutput `pulumi:"format"`
	// The name which should be used for this Api Management Policy Fragment. Changing this forces a new Api Management Policy Fragment to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The value of the Policy Fragment.
	//
	// > **NOTE:** Be aware of the two format possibilities. If the `value` is not applied and continues to cause a diff the format could be wrong.
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewPolicyFragment registers a new resource with the given unique name, arguments, and options.
func NewPolicyFragment(ctx *pulumi.Context,
	name string, args *PolicyFragmentArgs, opts ...pulumi.ResourceOption) (*PolicyFragment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiManagementId == nil {
		return nil, errors.New("invalid value for required argument 'ApiManagementId'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicyFragment
	err := ctx.RegisterResource("azure:apimanagement/policyFragment:PolicyFragment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyFragment gets an existing PolicyFragment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyFragment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyFragmentState, opts ...pulumi.ResourceOption) (*PolicyFragment, error) {
	var resource PolicyFragment
	err := ctx.ReadResource("azure:apimanagement/policyFragment:PolicyFragment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyFragment resources.
type policyFragmentState struct {
	// The id of the API Management Service. Changing this forces a new Api Management Policy Fragment to be created.
	ApiManagementId *string `pulumi:"apiManagementId"`
	// The description for the Policy Fragment.
	Description *string `pulumi:"description"`
	// The format of the Policy Fragment. Possible values are `xml` or `rawxml`. Default is `xml`.
	//
	// > **NOTE:** The `value` property will be updated to reflect the corresponding format when `format` is updated.
	Format *string `pulumi:"format"`
	// The name which should be used for this Api Management Policy Fragment. Changing this forces a new Api Management Policy Fragment to be created.
	Name *string `pulumi:"name"`
	// The value of the Policy Fragment.
	//
	// > **NOTE:** Be aware of the two format possibilities. If the `value` is not applied and continues to cause a diff the format could be wrong.
	Value *string `pulumi:"value"`
}

type PolicyFragmentState struct {
	// The id of the API Management Service. Changing this forces a new Api Management Policy Fragment to be created.
	ApiManagementId pulumi.StringPtrInput
	// The description for the Policy Fragment.
	Description pulumi.StringPtrInput
	// The format of the Policy Fragment. Possible values are `xml` or `rawxml`. Default is `xml`.
	//
	// > **NOTE:** The `value` property will be updated to reflect the corresponding format when `format` is updated.
	Format pulumi.StringPtrInput
	// The name which should be used for this Api Management Policy Fragment. Changing this forces a new Api Management Policy Fragment to be created.
	Name pulumi.StringPtrInput
	// The value of the Policy Fragment.
	//
	// > **NOTE:** Be aware of the two format possibilities. If the `value` is not applied and continues to cause a diff the format could be wrong.
	Value pulumi.StringPtrInput
}

func (PolicyFragmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyFragmentState)(nil)).Elem()
}

type policyFragmentArgs struct {
	// The id of the API Management Service. Changing this forces a new Api Management Policy Fragment to be created.
	ApiManagementId string `pulumi:"apiManagementId"`
	// The description for the Policy Fragment.
	Description *string `pulumi:"description"`
	// The format of the Policy Fragment. Possible values are `xml` or `rawxml`. Default is `xml`.
	//
	// > **NOTE:** The `value` property will be updated to reflect the corresponding format when `format` is updated.
	Format *string `pulumi:"format"`
	// The name which should be used for this Api Management Policy Fragment. Changing this forces a new Api Management Policy Fragment to be created.
	Name *string `pulumi:"name"`
	// The value of the Policy Fragment.
	//
	// > **NOTE:** Be aware of the two format possibilities. If the `value` is not applied and continues to cause a diff the format could be wrong.
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a PolicyFragment resource.
type PolicyFragmentArgs struct {
	// The id of the API Management Service. Changing this forces a new Api Management Policy Fragment to be created.
	ApiManagementId pulumi.StringInput
	// The description for the Policy Fragment.
	Description pulumi.StringPtrInput
	// The format of the Policy Fragment. Possible values are `xml` or `rawxml`. Default is `xml`.
	//
	// > **NOTE:** The `value` property will be updated to reflect the corresponding format when `format` is updated.
	Format pulumi.StringPtrInput
	// The name which should be used for this Api Management Policy Fragment. Changing this forces a new Api Management Policy Fragment to be created.
	Name pulumi.StringPtrInput
	// The value of the Policy Fragment.
	//
	// > **NOTE:** Be aware of the two format possibilities. If the `value` is not applied and continues to cause a diff the format could be wrong.
	Value pulumi.StringInput
}

func (PolicyFragmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyFragmentArgs)(nil)).Elem()
}

type PolicyFragmentInput interface {
	pulumi.Input

	ToPolicyFragmentOutput() PolicyFragmentOutput
	ToPolicyFragmentOutputWithContext(ctx context.Context) PolicyFragmentOutput
}

func (*PolicyFragment) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyFragment)(nil)).Elem()
}

func (i *PolicyFragment) ToPolicyFragmentOutput() PolicyFragmentOutput {
	return i.ToPolicyFragmentOutputWithContext(context.Background())
}

func (i *PolicyFragment) ToPolicyFragmentOutputWithContext(ctx context.Context) PolicyFragmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyFragmentOutput)
}

// PolicyFragmentArrayInput is an input type that accepts PolicyFragmentArray and PolicyFragmentArrayOutput values.
// You can construct a concrete instance of `PolicyFragmentArrayInput` via:
//
//	PolicyFragmentArray{ PolicyFragmentArgs{...} }
type PolicyFragmentArrayInput interface {
	pulumi.Input

	ToPolicyFragmentArrayOutput() PolicyFragmentArrayOutput
	ToPolicyFragmentArrayOutputWithContext(context.Context) PolicyFragmentArrayOutput
}

type PolicyFragmentArray []PolicyFragmentInput

func (PolicyFragmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyFragment)(nil)).Elem()
}

func (i PolicyFragmentArray) ToPolicyFragmentArrayOutput() PolicyFragmentArrayOutput {
	return i.ToPolicyFragmentArrayOutputWithContext(context.Background())
}

func (i PolicyFragmentArray) ToPolicyFragmentArrayOutputWithContext(ctx context.Context) PolicyFragmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyFragmentArrayOutput)
}

// PolicyFragmentMapInput is an input type that accepts PolicyFragmentMap and PolicyFragmentMapOutput values.
// You can construct a concrete instance of `PolicyFragmentMapInput` via:
//
//	PolicyFragmentMap{ "key": PolicyFragmentArgs{...} }
type PolicyFragmentMapInput interface {
	pulumi.Input

	ToPolicyFragmentMapOutput() PolicyFragmentMapOutput
	ToPolicyFragmentMapOutputWithContext(context.Context) PolicyFragmentMapOutput
}

type PolicyFragmentMap map[string]PolicyFragmentInput

func (PolicyFragmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyFragment)(nil)).Elem()
}

func (i PolicyFragmentMap) ToPolicyFragmentMapOutput() PolicyFragmentMapOutput {
	return i.ToPolicyFragmentMapOutputWithContext(context.Background())
}

func (i PolicyFragmentMap) ToPolicyFragmentMapOutputWithContext(ctx context.Context) PolicyFragmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyFragmentMapOutput)
}

type PolicyFragmentOutput struct{ *pulumi.OutputState }

func (PolicyFragmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyFragment)(nil)).Elem()
}

func (o PolicyFragmentOutput) ToPolicyFragmentOutput() PolicyFragmentOutput {
	return o
}

func (o PolicyFragmentOutput) ToPolicyFragmentOutputWithContext(ctx context.Context) PolicyFragmentOutput {
	return o
}

// The id of the API Management Service. Changing this forces a new Api Management Policy Fragment to be created.
func (o PolicyFragmentOutput) ApiManagementId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyFragment) pulumi.StringOutput { return v.ApiManagementId }).(pulumi.StringOutput)
}

// The description for the Policy Fragment.
func (o PolicyFragmentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyFragment) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The format of the Policy Fragment. Possible values are `xml` or `rawxml`. Default is `xml`.
//
// > **NOTE:** The `value` property will be updated to reflect the corresponding format when `format` is updated.
func (o PolicyFragmentOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyFragment) pulumi.StringPtrOutput { return v.Format }).(pulumi.StringPtrOutput)
}

// The name which should be used for this Api Management Policy Fragment. Changing this forces a new Api Management Policy Fragment to be created.
func (o PolicyFragmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyFragment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The value of the Policy Fragment.
//
// > **NOTE:** Be aware of the two format possibilities. If the `value` is not applied and continues to cause a diff the format could be wrong.
func (o PolicyFragmentOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyFragment) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

type PolicyFragmentArrayOutput struct{ *pulumi.OutputState }

func (PolicyFragmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyFragment)(nil)).Elem()
}

func (o PolicyFragmentArrayOutput) ToPolicyFragmentArrayOutput() PolicyFragmentArrayOutput {
	return o
}

func (o PolicyFragmentArrayOutput) ToPolicyFragmentArrayOutputWithContext(ctx context.Context) PolicyFragmentArrayOutput {
	return o
}

func (o PolicyFragmentArrayOutput) Index(i pulumi.IntInput) PolicyFragmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicyFragment {
		return vs[0].([]*PolicyFragment)[vs[1].(int)]
	}).(PolicyFragmentOutput)
}

type PolicyFragmentMapOutput struct{ *pulumi.OutputState }

func (PolicyFragmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyFragment)(nil)).Elem()
}

func (o PolicyFragmentMapOutput) ToPolicyFragmentMapOutput() PolicyFragmentMapOutput {
	return o
}

func (o PolicyFragmentMapOutput) ToPolicyFragmentMapOutputWithContext(ctx context.Context) PolicyFragmentMapOutput {
	return o
}

func (o PolicyFragmentMapOutput) MapIndex(k pulumi.StringInput) PolicyFragmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicyFragment {
		return vs[0].(map[string]*PolicyFragment)[vs[1].(string)]
	}).(PolicyFragmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyFragmentInput)(nil)).Elem(), &PolicyFragment{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyFragmentArrayInput)(nil)).Elem(), PolicyFragmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyFragmentMapInput)(nil)).Elem(), PolicyFragmentMap{})
	pulumi.RegisterOutputType(PolicyFragmentOutput{})
	pulumi.RegisterOutputType(PolicyFragmentArrayOutput{})
	pulumi.RegisterOutputType(PolicyFragmentMapOutput{})
}
