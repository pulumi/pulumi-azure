// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an API Management Gateway Host Name Configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/base64"
//	"os"
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/apimanagement"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func filebase64OrPanic(path string) pulumi.StringPtrInput {
//		if fileData, err := os.ReadFile(path); err == nil {
//			return pulumi.String(base64.StdEncoding.EncodeToString(fileData[:]))
//		} else {
//			panic(err.Error())
//		}
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleService, err := apimanagement.NewService(ctx, "exampleService", &apimanagement.ServiceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				PublisherName:     pulumi.String("pub1"),
//				PublisherEmail:    pulumi.String("pub1@email.com"),
//				SkuName:           pulumi.String("Consumption_0"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleGateway, err := apimanagement.NewGateway(ctx, "exampleGateway", &apimanagement.GatewayArgs{
//				ApiManagementId: exampleService.ID(),
//				Description:     pulumi.String("Example API Management gateway"),
//				LocationData: &apimanagement.GatewayLocationDataArgs{
//					Name:     pulumi.String("example name"),
//					City:     pulumi.String("example city"),
//					District: pulumi.String("example district"),
//					Region:   pulumi.String("example region"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleCertificate, err := apimanagement.NewCertificate(ctx, "exampleCertificate", &apimanagement.CertificateArgs{
//				ApiManagementName: exampleService.Name,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Data:              filebase64OrPanic("example.pfx"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = apimanagement.NewGatewayHostNameConfiguration(ctx, "exampleGatewayHostNameConfiguration", &apimanagement.GatewayHostNameConfigurationArgs{
//				ApiManagementId:                 exampleService.ID(),
//				GatewayName:                     exampleGateway.Name,
//				CertificateId:                   exampleCertificate.ID(),
//				HostName:                        pulumi.String("example-host-name"),
//				RequestClientCertificateEnabled: pulumi.Bool(true),
//				Http2Enabled:                    pulumi.Bool(true),
//				Tls10Enabled:                    pulumi.Bool(true),
//				Tls11Enabled:                    pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// API Management Gateway Host Name Configuration can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:apimanagement/gatewayHostNameConfiguration:GatewayHostNameConfiguration example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.ApiManagement/service/service1/gateways/gateway1/hostnameConfigurations/hc1
//
// ```
type GatewayHostNameConfiguration struct {
	pulumi.CustomResourceState

	// The ID of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementId pulumi.StringOutput `pulumi:"apiManagementId"`
	// The certificate ID to be used for TLS connection establishment.
	CertificateId pulumi.StringOutput `pulumi:"certificateId"`
	// The name of the API Management Gateway. Changing this forces a new resource to be created.
	GatewayName pulumi.StringOutput `pulumi:"gatewayName"`
	// The host name to use for the API Management Gateway Host Name Configuration.
	HostName pulumi.StringOutput `pulumi:"hostName"`
	// Whether HTTP/2.0 is supported. Defaults to `true`.
	Http2Enabled pulumi.BoolPtrOutput `pulumi:"http2Enabled"`
	// The name of the API Management Gateway Host Name Configuration. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Whether the API Management Gateway requests a client certificate.
	RequestClientCertificateEnabled pulumi.BoolPtrOutput `pulumi:"requestClientCertificateEnabled"`
	// Whether TLS 1.0 is supported.
	Tls10Enabled pulumi.BoolPtrOutput `pulumi:"tls10Enabled"`
	// Whether TLS 1.1 is supported.
	Tls11Enabled pulumi.BoolPtrOutput `pulumi:"tls11Enabled"`
}

// NewGatewayHostNameConfiguration registers a new resource with the given unique name, arguments, and options.
func NewGatewayHostNameConfiguration(ctx *pulumi.Context,
	name string, args *GatewayHostNameConfigurationArgs, opts ...pulumi.ResourceOption) (*GatewayHostNameConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiManagementId == nil {
		return nil, errors.New("invalid value for required argument 'ApiManagementId'")
	}
	if args.CertificateId == nil {
		return nil, errors.New("invalid value for required argument 'CertificateId'")
	}
	if args.GatewayName == nil {
		return nil, errors.New("invalid value for required argument 'GatewayName'")
	}
	if args.HostName == nil {
		return nil, errors.New("invalid value for required argument 'HostName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayHostNameConfiguration
	err := ctx.RegisterResource("azure:apimanagement/gatewayHostNameConfiguration:GatewayHostNameConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayHostNameConfiguration gets an existing GatewayHostNameConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayHostNameConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayHostNameConfigurationState, opts ...pulumi.ResourceOption) (*GatewayHostNameConfiguration, error) {
	var resource GatewayHostNameConfiguration
	err := ctx.ReadResource("azure:apimanagement/gatewayHostNameConfiguration:GatewayHostNameConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayHostNameConfiguration resources.
type gatewayHostNameConfigurationState struct {
	// The ID of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementId *string `pulumi:"apiManagementId"`
	// The certificate ID to be used for TLS connection establishment.
	CertificateId *string `pulumi:"certificateId"`
	// The name of the API Management Gateway. Changing this forces a new resource to be created.
	GatewayName *string `pulumi:"gatewayName"`
	// The host name to use for the API Management Gateway Host Name Configuration.
	HostName *string `pulumi:"hostName"`
	// Whether HTTP/2.0 is supported. Defaults to `true`.
	Http2Enabled *bool `pulumi:"http2Enabled"`
	// The name of the API Management Gateway Host Name Configuration. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Whether the API Management Gateway requests a client certificate.
	RequestClientCertificateEnabled *bool `pulumi:"requestClientCertificateEnabled"`
	// Whether TLS 1.0 is supported.
	Tls10Enabled *bool `pulumi:"tls10Enabled"`
	// Whether TLS 1.1 is supported.
	Tls11Enabled *bool `pulumi:"tls11Enabled"`
}

type GatewayHostNameConfigurationState struct {
	// The ID of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementId pulumi.StringPtrInput
	// The certificate ID to be used for TLS connection establishment.
	CertificateId pulumi.StringPtrInput
	// The name of the API Management Gateway. Changing this forces a new resource to be created.
	GatewayName pulumi.StringPtrInput
	// The host name to use for the API Management Gateway Host Name Configuration.
	HostName pulumi.StringPtrInput
	// Whether HTTP/2.0 is supported. Defaults to `true`.
	Http2Enabled pulumi.BoolPtrInput
	// The name of the API Management Gateway Host Name Configuration. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Whether the API Management Gateway requests a client certificate.
	RequestClientCertificateEnabled pulumi.BoolPtrInput
	// Whether TLS 1.0 is supported.
	Tls10Enabled pulumi.BoolPtrInput
	// Whether TLS 1.1 is supported.
	Tls11Enabled pulumi.BoolPtrInput
}

func (GatewayHostNameConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayHostNameConfigurationState)(nil)).Elem()
}

type gatewayHostNameConfigurationArgs struct {
	// The ID of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementId string `pulumi:"apiManagementId"`
	// The certificate ID to be used for TLS connection establishment.
	CertificateId string `pulumi:"certificateId"`
	// The name of the API Management Gateway. Changing this forces a new resource to be created.
	GatewayName string `pulumi:"gatewayName"`
	// The host name to use for the API Management Gateway Host Name Configuration.
	HostName string `pulumi:"hostName"`
	// Whether HTTP/2.0 is supported. Defaults to `true`.
	Http2Enabled *bool `pulumi:"http2Enabled"`
	// The name of the API Management Gateway Host Name Configuration. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Whether the API Management Gateway requests a client certificate.
	RequestClientCertificateEnabled *bool `pulumi:"requestClientCertificateEnabled"`
	// Whether TLS 1.0 is supported.
	Tls10Enabled *bool `pulumi:"tls10Enabled"`
	// Whether TLS 1.1 is supported.
	Tls11Enabled *bool `pulumi:"tls11Enabled"`
}

// The set of arguments for constructing a GatewayHostNameConfiguration resource.
type GatewayHostNameConfigurationArgs struct {
	// The ID of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementId pulumi.StringInput
	// The certificate ID to be used for TLS connection establishment.
	CertificateId pulumi.StringInput
	// The name of the API Management Gateway. Changing this forces a new resource to be created.
	GatewayName pulumi.StringInput
	// The host name to use for the API Management Gateway Host Name Configuration.
	HostName pulumi.StringInput
	// Whether HTTP/2.0 is supported. Defaults to `true`.
	Http2Enabled pulumi.BoolPtrInput
	// The name of the API Management Gateway Host Name Configuration. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Whether the API Management Gateway requests a client certificate.
	RequestClientCertificateEnabled pulumi.BoolPtrInput
	// Whether TLS 1.0 is supported.
	Tls10Enabled pulumi.BoolPtrInput
	// Whether TLS 1.1 is supported.
	Tls11Enabled pulumi.BoolPtrInput
}

func (GatewayHostNameConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayHostNameConfigurationArgs)(nil)).Elem()
}

type GatewayHostNameConfigurationInput interface {
	pulumi.Input

	ToGatewayHostNameConfigurationOutput() GatewayHostNameConfigurationOutput
	ToGatewayHostNameConfigurationOutputWithContext(ctx context.Context) GatewayHostNameConfigurationOutput
}

func (*GatewayHostNameConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayHostNameConfiguration)(nil)).Elem()
}

func (i *GatewayHostNameConfiguration) ToGatewayHostNameConfigurationOutput() GatewayHostNameConfigurationOutput {
	return i.ToGatewayHostNameConfigurationOutputWithContext(context.Background())
}

func (i *GatewayHostNameConfiguration) ToGatewayHostNameConfigurationOutputWithContext(ctx context.Context) GatewayHostNameConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayHostNameConfigurationOutput)
}

// GatewayHostNameConfigurationArrayInput is an input type that accepts GatewayHostNameConfigurationArray and GatewayHostNameConfigurationArrayOutput values.
// You can construct a concrete instance of `GatewayHostNameConfigurationArrayInput` via:
//
//	GatewayHostNameConfigurationArray{ GatewayHostNameConfigurationArgs{...} }
type GatewayHostNameConfigurationArrayInput interface {
	pulumi.Input

	ToGatewayHostNameConfigurationArrayOutput() GatewayHostNameConfigurationArrayOutput
	ToGatewayHostNameConfigurationArrayOutputWithContext(context.Context) GatewayHostNameConfigurationArrayOutput
}

type GatewayHostNameConfigurationArray []GatewayHostNameConfigurationInput

func (GatewayHostNameConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayHostNameConfiguration)(nil)).Elem()
}

func (i GatewayHostNameConfigurationArray) ToGatewayHostNameConfigurationArrayOutput() GatewayHostNameConfigurationArrayOutput {
	return i.ToGatewayHostNameConfigurationArrayOutputWithContext(context.Background())
}

func (i GatewayHostNameConfigurationArray) ToGatewayHostNameConfigurationArrayOutputWithContext(ctx context.Context) GatewayHostNameConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayHostNameConfigurationArrayOutput)
}

// GatewayHostNameConfigurationMapInput is an input type that accepts GatewayHostNameConfigurationMap and GatewayHostNameConfigurationMapOutput values.
// You can construct a concrete instance of `GatewayHostNameConfigurationMapInput` via:
//
//	GatewayHostNameConfigurationMap{ "key": GatewayHostNameConfigurationArgs{...} }
type GatewayHostNameConfigurationMapInput interface {
	pulumi.Input

	ToGatewayHostNameConfigurationMapOutput() GatewayHostNameConfigurationMapOutput
	ToGatewayHostNameConfigurationMapOutputWithContext(context.Context) GatewayHostNameConfigurationMapOutput
}

type GatewayHostNameConfigurationMap map[string]GatewayHostNameConfigurationInput

func (GatewayHostNameConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayHostNameConfiguration)(nil)).Elem()
}

func (i GatewayHostNameConfigurationMap) ToGatewayHostNameConfigurationMapOutput() GatewayHostNameConfigurationMapOutput {
	return i.ToGatewayHostNameConfigurationMapOutputWithContext(context.Background())
}

func (i GatewayHostNameConfigurationMap) ToGatewayHostNameConfigurationMapOutputWithContext(ctx context.Context) GatewayHostNameConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayHostNameConfigurationMapOutput)
}

type GatewayHostNameConfigurationOutput struct{ *pulumi.OutputState }

func (GatewayHostNameConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayHostNameConfiguration)(nil)).Elem()
}

func (o GatewayHostNameConfigurationOutput) ToGatewayHostNameConfigurationOutput() GatewayHostNameConfigurationOutput {
	return o
}

func (o GatewayHostNameConfigurationOutput) ToGatewayHostNameConfigurationOutputWithContext(ctx context.Context) GatewayHostNameConfigurationOutput {
	return o
}

// The ID of the API Management Service. Changing this forces a new resource to be created.
func (o GatewayHostNameConfigurationOutput) ApiManagementId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayHostNameConfiguration) pulumi.StringOutput { return v.ApiManagementId }).(pulumi.StringOutput)
}

// The certificate ID to be used for TLS connection establishment.
func (o GatewayHostNameConfigurationOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayHostNameConfiguration) pulumi.StringOutput { return v.CertificateId }).(pulumi.StringOutput)
}

// The name of the API Management Gateway. Changing this forces a new resource to be created.
func (o GatewayHostNameConfigurationOutput) GatewayName() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayHostNameConfiguration) pulumi.StringOutput { return v.GatewayName }).(pulumi.StringOutput)
}

// The host name to use for the API Management Gateway Host Name Configuration.
func (o GatewayHostNameConfigurationOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayHostNameConfiguration) pulumi.StringOutput { return v.HostName }).(pulumi.StringOutput)
}

// Whether HTTP/2.0 is supported. Defaults to `true`.
func (o GatewayHostNameConfigurationOutput) Http2Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewayHostNameConfiguration) pulumi.BoolPtrOutput { return v.Http2Enabled }).(pulumi.BoolPtrOutput)
}

// The name of the API Management Gateway Host Name Configuration. Changing this forces a new resource to be created.
func (o GatewayHostNameConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayHostNameConfiguration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Whether the API Management Gateway requests a client certificate.
func (o GatewayHostNameConfigurationOutput) RequestClientCertificateEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewayHostNameConfiguration) pulumi.BoolPtrOutput { return v.RequestClientCertificateEnabled }).(pulumi.BoolPtrOutput)
}

// Whether TLS 1.0 is supported.
func (o GatewayHostNameConfigurationOutput) Tls10Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewayHostNameConfiguration) pulumi.BoolPtrOutput { return v.Tls10Enabled }).(pulumi.BoolPtrOutput)
}

// Whether TLS 1.1 is supported.
func (o GatewayHostNameConfigurationOutput) Tls11Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewayHostNameConfiguration) pulumi.BoolPtrOutput { return v.Tls11Enabled }).(pulumi.BoolPtrOutput)
}

type GatewayHostNameConfigurationArrayOutput struct{ *pulumi.OutputState }

func (GatewayHostNameConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayHostNameConfiguration)(nil)).Elem()
}

func (o GatewayHostNameConfigurationArrayOutput) ToGatewayHostNameConfigurationArrayOutput() GatewayHostNameConfigurationArrayOutput {
	return o
}

func (o GatewayHostNameConfigurationArrayOutput) ToGatewayHostNameConfigurationArrayOutputWithContext(ctx context.Context) GatewayHostNameConfigurationArrayOutput {
	return o
}

func (o GatewayHostNameConfigurationArrayOutput) Index(i pulumi.IntInput) GatewayHostNameConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayHostNameConfiguration {
		return vs[0].([]*GatewayHostNameConfiguration)[vs[1].(int)]
	}).(GatewayHostNameConfigurationOutput)
}

type GatewayHostNameConfigurationMapOutput struct{ *pulumi.OutputState }

func (GatewayHostNameConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayHostNameConfiguration)(nil)).Elem()
}

func (o GatewayHostNameConfigurationMapOutput) ToGatewayHostNameConfigurationMapOutput() GatewayHostNameConfigurationMapOutput {
	return o
}

func (o GatewayHostNameConfigurationMapOutput) ToGatewayHostNameConfigurationMapOutputWithContext(ctx context.Context) GatewayHostNameConfigurationMapOutput {
	return o
}

func (o GatewayHostNameConfigurationMapOutput) MapIndex(k pulumi.StringInput) GatewayHostNameConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayHostNameConfiguration {
		return vs[0].(map[string]*GatewayHostNameConfiguration)[vs[1].(string)]
	}).(GatewayHostNameConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayHostNameConfigurationInput)(nil)).Elem(), &GatewayHostNameConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayHostNameConfigurationArrayInput)(nil)).Elem(), GatewayHostNameConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayHostNameConfigurationMapInput)(nil)).Elem(), GatewayHostNameConfigurationMap{})
	pulumi.RegisterOutputType(GatewayHostNameConfigurationOutput{})
	pulumi.RegisterOutputType(GatewayHostNameConfigurationArrayOutput{})
	pulumi.RegisterOutputType(GatewayHostNameConfigurationMapOutput{})
}
