// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a API Management API Release.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/apimanagement"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleService, err := apimanagement.NewService(ctx, "exampleService", &apimanagement.ServiceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				PublisherName:     pulumi.String("My Company"),
//				PublisherEmail:    pulumi.String("company@terraform.io"),
//				SkuName:           pulumi.String("Developer_1"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleApi, err := apimanagement.NewApi(ctx, "exampleApi", &apimanagement.ApiArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				ApiManagementName: exampleService.Name,
//				Revision:          pulumi.String("1"),
//				DisplayName:       pulumi.String("Example API"),
//				Path:              pulumi.String("example"),
//				Protocols: pulumi.StringArray{
//					pulumi.String("https"),
//				},
//				Import: &apimanagement.ApiImportArgs{
//					ContentFormat: pulumi.String("swagger-link-json"),
//					ContentValue:  pulumi.String("http://conferenceapi.azurewebsites.net/?format=json"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = apimanagement.NewApiRelease(ctx, "exampleApiRelease", &apimanagement.ApiReleaseArgs{
//				ApiId: exampleApi.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// API Management API Releases can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:apimanagement/apiRelease:ApiRelease example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.ApiManagement/service/service1/apis/api1/releases/release1
//
// ```
type ApiRelease struct {
	pulumi.CustomResourceState

	// The ID of the API Management API. Changing this forces a new API Management API Release to be created.
	ApiId pulumi.StringOutput `pulumi:"apiId"`
	// The name which should be used for this API Management API Release. Changing this forces a new API Management API Release to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Release Notes.
	Notes pulumi.StringPtrOutput `pulumi:"notes"`
}

// NewApiRelease registers a new resource with the given unique name, arguments, and options.
func NewApiRelease(ctx *pulumi.Context,
	name string, args *ApiReleaseArgs, opts ...pulumi.ResourceOption) (*ApiRelease, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApiRelease
	err := ctx.RegisterResource("azure:apimanagement/apiRelease:ApiRelease", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApiRelease gets an existing ApiRelease resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApiRelease(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiReleaseState, opts ...pulumi.ResourceOption) (*ApiRelease, error) {
	var resource ApiRelease
	err := ctx.ReadResource("azure:apimanagement/apiRelease:ApiRelease", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApiRelease resources.
type apiReleaseState struct {
	// The ID of the API Management API. Changing this forces a new API Management API Release to be created.
	ApiId *string `pulumi:"apiId"`
	// The name which should be used for this API Management API Release. Changing this forces a new API Management API Release to be created.
	Name *string `pulumi:"name"`
	// The Release Notes.
	Notes *string `pulumi:"notes"`
}

type ApiReleaseState struct {
	// The ID of the API Management API. Changing this forces a new API Management API Release to be created.
	ApiId pulumi.StringPtrInput
	// The name which should be used for this API Management API Release. Changing this forces a new API Management API Release to be created.
	Name pulumi.StringPtrInput
	// The Release Notes.
	Notes pulumi.StringPtrInput
}

func (ApiReleaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*apiReleaseState)(nil)).Elem()
}

type apiReleaseArgs struct {
	// The ID of the API Management API. Changing this forces a new API Management API Release to be created.
	ApiId string `pulumi:"apiId"`
	// The name which should be used for this API Management API Release. Changing this forces a new API Management API Release to be created.
	Name *string `pulumi:"name"`
	// The Release Notes.
	Notes *string `pulumi:"notes"`
}

// The set of arguments for constructing a ApiRelease resource.
type ApiReleaseArgs struct {
	// The ID of the API Management API. Changing this forces a new API Management API Release to be created.
	ApiId pulumi.StringInput
	// The name which should be used for this API Management API Release. Changing this forces a new API Management API Release to be created.
	Name pulumi.StringPtrInput
	// The Release Notes.
	Notes pulumi.StringPtrInput
}

func (ApiReleaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apiReleaseArgs)(nil)).Elem()
}

type ApiReleaseInput interface {
	pulumi.Input

	ToApiReleaseOutput() ApiReleaseOutput
	ToApiReleaseOutputWithContext(ctx context.Context) ApiReleaseOutput
}

func (*ApiRelease) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiRelease)(nil)).Elem()
}

func (i *ApiRelease) ToApiReleaseOutput() ApiReleaseOutput {
	return i.ToApiReleaseOutputWithContext(context.Background())
}

func (i *ApiRelease) ToApiReleaseOutputWithContext(ctx context.Context) ApiReleaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiReleaseOutput)
}

// ApiReleaseArrayInput is an input type that accepts ApiReleaseArray and ApiReleaseArrayOutput values.
// You can construct a concrete instance of `ApiReleaseArrayInput` via:
//
//	ApiReleaseArray{ ApiReleaseArgs{...} }
type ApiReleaseArrayInput interface {
	pulumi.Input

	ToApiReleaseArrayOutput() ApiReleaseArrayOutput
	ToApiReleaseArrayOutputWithContext(context.Context) ApiReleaseArrayOutput
}

type ApiReleaseArray []ApiReleaseInput

func (ApiReleaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiRelease)(nil)).Elem()
}

func (i ApiReleaseArray) ToApiReleaseArrayOutput() ApiReleaseArrayOutput {
	return i.ToApiReleaseArrayOutputWithContext(context.Background())
}

func (i ApiReleaseArray) ToApiReleaseArrayOutputWithContext(ctx context.Context) ApiReleaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiReleaseArrayOutput)
}

// ApiReleaseMapInput is an input type that accepts ApiReleaseMap and ApiReleaseMapOutput values.
// You can construct a concrete instance of `ApiReleaseMapInput` via:
//
//	ApiReleaseMap{ "key": ApiReleaseArgs{...} }
type ApiReleaseMapInput interface {
	pulumi.Input

	ToApiReleaseMapOutput() ApiReleaseMapOutput
	ToApiReleaseMapOutputWithContext(context.Context) ApiReleaseMapOutput
}

type ApiReleaseMap map[string]ApiReleaseInput

func (ApiReleaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiRelease)(nil)).Elem()
}

func (i ApiReleaseMap) ToApiReleaseMapOutput() ApiReleaseMapOutput {
	return i.ToApiReleaseMapOutputWithContext(context.Background())
}

func (i ApiReleaseMap) ToApiReleaseMapOutputWithContext(ctx context.Context) ApiReleaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiReleaseMapOutput)
}

type ApiReleaseOutput struct{ *pulumi.OutputState }

func (ApiReleaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiRelease)(nil)).Elem()
}

func (o ApiReleaseOutput) ToApiReleaseOutput() ApiReleaseOutput {
	return o
}

func (o ApiReleaseOutput) ToApiReleaseOutputWithContext(ctx context.Context) ApiReleaseOutput {
	return o
}

// The ID of the API Management API. Changing this forces a new API Management API Release to be created.
func (o ApiReleaseOutput) ApiId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiRelease) pulumi.StringOutput { return v.ApiId }).(pulumi.StringOutput)
}

// The name which should be used for this API Management API Release. Changing this forces a new API Management API Release to be created.
func (o ApiReleaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiRelease) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Release Notes.
func (o ApiReleaseOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiRelease) pulumi.StringPtrOutput { return v.Notes }).(pulumi.StringPtrOutput)
}

type ApiReleaseArrayOutput struct{ *pulumi.OutputState }

func (ApiReleaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiRelease)(nil)).Elem()
}

func (o ApiReleaseArrayOutput) ToApiReleaseArrayOutput() ApiReleaseArrayOutput {
	return o
}

func (o ApiReleaseArrayOutput) ToApiReleaseArrayOutputWithContext(ctx context.Context) ApiReleaseArrayOutput {
	return o
}

func (o ApiReleaseArrayOutput) Index(i pulumi.IntInput) ApiReleaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApiRelease {
		return vs[0].([]*ApiRelease)[vs[1].(int)]
	}).(ApiReleaseOutput)
}

type ApiReleaseMapOutput struct{ *pulumi.OutputState }

func (ApiReleaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiRelease)(nil)).Elem()
}

func (o ApiReleaseMapOutput) ToApiReleaseMapOutput() ApiReleaseMapOutput {
	return o
}

func (o ApiReleaseMapOutput) ToApiReleaseMapOutputWithContext(ctx context.Context) ApiReleaseMapOutput {
	return o
}

func (o ApiReleaseMapOutput) MapIndex(k pulumi.StringInput) ApiReleaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApiRelease {
		return vs[0].(map[string]*ApiRelease)[vs[1].(string)]
	}).(ApiReleaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApiReleaseInput)(nil)).Elem(), &ApiRelease{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiReleaseArrayInput)(nil)).Elem(), ApiReleaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiReleaseMapInput)(nil)).Elem(), ApiReleaseMap{})
	pulumi.RegisterOutputType(ApiReleaseOutput{})
	pulumi.RegisterOutputType(ApiReleaseArrayOutput{})
	pulumi.RegisterOutputType(ApiReleaseMapOutput{})
}
