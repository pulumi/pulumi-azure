// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing API Management User.
func LookupUser(ctx *pulumi.Context, args *LookupUserArgs, opts ...pulumi.InvokeOption) (*LookupUserResult, error) {
	var rv LookupUserResult
	err := ctx.Invoke("azure:apimanagement/getUser:getUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUser.
type LookupUserArgs struct {
	// The Name of the API Management Service in which this User exists.
	ApiManagementName string `pulumi:"apiManagementName"`
	// The Name of the Resource Group in which the API Management Service exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The Identifier for the User.
	UserId string `pulumi:"userId"`
}

// A collection of values returned by getUser.
type LookupUserResult struct {
	ApiManagementName string `pulumi:"apiManagementName"`
	// The Email Address used for this User.
	Email string `pulumi:"email"`
	// The First Name for the User.
	FirstName string `pulumi:"firstName"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The Last Name for the User.
	LastName string `pulumi:"lastName"`
	// Any notes about this User.
	Note              string `pulumi:"note"`
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The current state of this User, for example `active`, `blocked` or `pending`.
	State  string `pulumi:"state"`
	UserId string `pulumi:"userId"`
}

func LookupUserOutput(ctx *pulumi.Context, args LookupUserOutputArgs, opts ...pulumi.InvokeOption) LookupUserResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupUserResult, error) {
			args := v.(LookupUserArgs)
			r, err := LookupUser(ctx, &args, opts...)
			return *r, err
		}).(LookupUserResultOutput)
}

// A collection of arguments for invoking getUser.
type LookupUserOutputArgs struct {
	// The Name of the API Management Service in which this User exists.
	ApiManagementName pulumi.StringInput `pulumi:"apiManagementName"`
	// The Name of the Resource Group in which the API Management Service exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The Identifier for the User.
	UserId pulumi.StringInput `pulumi:"userId"`
}

func (LookupUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserArgs)(nil)).Elem()
}

// A collection of values returned by getUser.
type LookupUserResultOutput struct{ *pulumi.OutputState }

func (LookupUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserResult)(nil)).Elem()
}

func (o LookupUserResultOutput) ToLookupUserResultOutput() LookupUserResultOutput {
	return o
}

func (o LookupUserResultOutput) ToLookupUserResultOutputWithContext(ctx context.Context) LookupUserResultOutput {
	return o
}

func (o LookupUserResultOutput) ApiManagementName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.ApiManagementName }).(pulumi.StringOutput)
}

// The Email Address used for this User.
func (o LookupUserResultOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Email }).(pulumi.StringOutput)
}

// The First Name for the User.
func (o LookupUserResultOutput) FirstName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.FirstName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Id }).(pulumi.StringOutput)
}

// The Last Name for the User.
func (o LookupUserResultOutput) LastName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.LastName }).(pulumi.StringOutput)
}

// Any notes about this User.
func (o LookupUserResultOutput) Note() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Note }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The current state of this User, for example `active`, `blocked` or `pending`.
func (o LookupUserResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.State }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.UserId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserResultOutput{})
}
