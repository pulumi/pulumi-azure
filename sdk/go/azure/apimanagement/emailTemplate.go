// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a API Management Email Template.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/apimanagement"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleService, err := apimanagement.NewService(ctx, "exampleService", &apimanagement.ServiceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				PublisherName:     pulumi.String("My Company"),
//				PublisherEmail:    pulumi.String("company@terraform.io"),
//				SkuName:           pulumi.String("Developer_1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = apimanagement.NewEmailTemplate(ctx, "exampleEmailTemplate", &apimanagement.EmailTemplateArgs{
//				TemplateName:      pulumi.String("ConfirmSignUpIdentityDefault"),
//				ResourceGroupName: exampleResourceGroup.Name,
//				ApiManagementName: exampleService.Name,
//				Subject:           pulumi.String("Customized confirmation email for your new $OrganizationName API account"),
//				Body: pulumi.String(`<!DOCTYPE html >
//
// <html>
// <head>
//
//	<meta charset="UTF-8" />
//	<title>Customized Letter Title</title>
//
// </head>
// <body>
//
//	<p style="font-size:12pt;font-family:'Segoe UI'">Dear $DevFirstName $DevLastName,</p>
//
// </body>
// </html>
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// API Management Email Templates can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:apimanagement/emailTemplate:EmailTemplate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.ApiManagement/service/instance1/templates/template1
//
// ```
type EmailTemplate struct {
	pulumi.CustomResourceState

	// The name of the API Management Service in which the Email Template should exist. Changing this forces a new API Management Email Template to be created.
	ApiManagementName pulumi.StringOutput `pulumi:"apiManagementName"`
	// The body of the Email. Its format has to be a well-formed HTML document.
	//
	// > **NOTE:** In `subject` and `body` predefined parameters can be used. The available parameters depend on the template. Schema to use a parameter: `$` followed by the `parameter.name` - `$<parameter.name>`. The available parameters can be seen in the Notification templates section of the API-Management Service instance within the Azure Portal.
	Body pulumi.StringOutput `pulumi:"body"`
	// The description of the Email Template.
	Description pulumi.StringOutput `pulumi:"description"`
	// The name of the Resource Group where the API Management Email Template should exist. Changing this forces a new API Management Email Template to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The subject of the Email.
	Subject pulumi.StringOutput `pulumi:"subject"`
	// The name of the Email Template. Possible values are `AccountClosedDeveloper`, `ApplicationApprovedNotificationMessage`, `ConfirmSignUpIdentityDefault`, `EmailChangeIdentityDefault`, `InviteUserNotificationMessage`, `NewCommentNotificationMessage`, `NewDeveloperNotificationMessage`, `NewIssueNotificationMessage`, `PasswordResetByAdminNotificationMessage`, `PasswordResetIdentityDefault`, `PurchaseDeveloperNotificationMessage`, `QuotaLimitApproachingDeveloperNotificationMessage`, `RejectDeveloperNotificationMessage`, `RequestDeveloperNotificationMessage`. Changing this forces a new API Management Email Template to be created.
	TemplateName pulumi.StringOutput `pulumi:"templateName"`
	// The title of the Email Template.
	Title pulumi.StringOutput `pulumi:"title"`
}

// NewEmailTemplate registers a new resource with the given unique name, arguments, and options.
func NewEmailTemplate(ctx *pulumi.Context,
	name string, args *EmailTemplateArgs, opts ...pulumi.ResourceOption) (*EmailTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiManagementName == nil {
		return nil, errors.New("invalid value for required argument 'ApiManagementName'")
	}
	if args.Body == nil {
		return nil, errors.New("invalid value for required argument 'Body'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Subject == nil {
		return nil, errors.New("invalid value for required argument 'Subject'")
	}
	if args.TemplateName == nil {
		return nil, errors.New("invalid value for required argument 'TemplateName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EmailTemplate
	err := ctx.RegisterResource("azure:apimanagement/emailTemplate:EmailTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEmailTemplate gets an existing EmailTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEmailTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EmailTemplateState, opts ...pulumi.ResourceOption) (*EmailTemplate, error) {
	var resource EmailTemplate
	err := ctx.ReadResource("azure:apimanagement/emailTemplate:EmailTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EmailTemplate resources.
type emailTemplateState struct {
	// The name of the API Management Service in which the Email Template should exist. Changing this forces a new API Management Email Template to be created.
	ApiManagementName *string `pulumi:"apiManagementName"`
	// The body of the Email. Its format has to be a well-formed HTML document.
	//
	// > **NOTE:** In `subject` and `body` predefined parameters can be used. The available parameters depend on the template. Schema to use a parameter: `$` followed by the `parameter.name` - `$<parameter.name>`. The available parameters can be seen in the Notification templates section of the API-Management Service instance within the Azure Portal.
	Body *string `pulumi:"body"`
	// The description of the Email Template.
	Description *string `pulumi:"description"`
	// The name of the Resource Group where the API Management Email Template should exist. Changing this forces a new API Management Email Template to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The subject of the Email.
	Subject *string `pulumi:"subject"`
	// The name of the Email Template. Possible values are `AccountClosedDeveloper`, `ApplicationApprovedNotificationMessage`, `ConfirmSignUpIdentityDefault`, `EmailChangeIdentityDefault`, `InviteUserNotificationMessage`, `NewCommentNotificationMessage`, `NewDeveloperNotificationMessage`, `NewIssueNotificationMessage`, `PasswordResetByAdminNotificationMessage`, `PasswordResetIdentityDefault`, `PurchaseDeveloperNotificationMessage`, `QuotaLimitApproachingDeveloperNotificationMessage`, `RejectDeveloperNotificationMessage`, `RequestDeveloperNotificationMessage`. Changing this forces a new API Management Email Template to be created.
	TemplateName *string `pulumi:"templateName"`
	// The title of the Email Template.
	Title *string `pulumi:"title"`
}

type EmailTemplateState struct {
	// The name of the API Management Service in which the Email Template should exist. Changing this forces a new API Management Email Template to be created.
	ApiManagementName pulumi.StringPtrInput
	// The body of the Email. Its format has to be a well-formed HTML document.
	//
	// > **NOTE:** In `subject` and `body` predefined parameters can be used. The available parameters depend on the template. Schema to use a parameter: `$` followed by the `parameter.name` - `$<parameter.name>`. The available parameters can be seen in the Notification templates section of the API-Management Service instance within the Azure Portal.
	Body pulumi.StringPtrInput
	// The description of the Email Template.
	Description pulumi.StringPtrInput
	// The name of the Resource Group where the API Management Email Template should exist. Changing this forces a new API Management Email Template to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The subject of the Email.
	Subject pulumi.StringPtrInput
	// The name of the Email Template. Possible values are `AccountClosedDeveloper`, `ApplicationApprovedNotificationMessage`, `ConfirmSignUpIdentityDefault`, `EmailChangeIdentityDefault`, `InviteUserNotificationMessage`, `NewCommentNotificationMessage`, `NewDeveloperNotificationMessage`, `NewIssueNotificationMessage`, `PasswordResetByAdminNotificationMessage`, `PasswordResetIdentityDefault`, `PurchaseDeveloperNotificationMessage`, `QuotaLimitApproachingDeveloperNotificationMessage`, `RejectDeveloperNotificationMessage`, `RequestDeveloperNotificationMessage`. Changing this forces a new API Management Email Template to be created.
	TemplateName pulumi.StringPtrInput
	// The title of the Email Template.
	Title pulumi.StringPtrInput
}

func (EmailTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*emailTemplateState)(nil)).Elem()
}

type emailTemplateArgs struct {
	// The name of the API Management Service in which the Email Template should exist. Changing this forces a new API Management Email Template to be created.
	ApiManagementName string `pulumi:"apiManagementName"`
	// The body of the Email. Its format has to be a well-formed HTML document.
	//
	// > **NOTE:** In `subject` and `body` predefined parameters can be used. The available parameters depend on the template. Schema to use a parameter: `$` followed by the `parameter.name` - `$<parameter.name>`. The available parameters can be seen in the Notification templates section of the API-Management Service instance within the Azure Portal.
	Body string `pulumi:"body"`
	// The name of the Resource Group where the API Management Email Template should exist. Changing this forces a new API Management Email Template to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The subject of the Email.
	Subject string `pulumi:"subject"`
	// The name of the Email Template. Possible values are `AccountClosedDeveloper`, `ApplicationApprovedNotificationMessage`, `ConfirmSignUpIdentityDefault`, `EmailChangeIdentityDefault`, `InviteUserNotificationMessage`, `NewCommentNotificationMessage`, `NewDeveloperNotificationMessage`, `NewIssueNotificationMessage`, `PasswordResetByAdminNotificationMessage`, `PasswordResetIdentityDefault`, `PurchaseDeveloperNotificationMessage`, `QuotaLimitApproachingDeveloperNotificationMessage`, `RejectDeveloperNotificationMessage`, `RequestDeveloperNotificationMessage`. Changing this forces a new API Management Email Template to be created.
	TemplateName string `pulumi:"templateName"`
}

// The set of arguments for constructing a EmailTemplate resource.
type EmailTemplateArgs struct {
	// The name of the API Management Service in which the Email Template should exist. Changing this forces a new API Management Email Template to be created.
	ApiManagementName pulumi.StringInput
	// The body of the Email. Its format has to be a well-formed HTML document.
	//
	// > **NOTE:** In `subject` and `body` predefined parameters can be used. The available parameters depend on the template. Schema to use a parameter: `$` followed by the `parameter.name` - `$<parameter.name>`. The available parameters can be seen in the Notification templates section of the API-Management Service instance within the Azure Portal.
	Body pulumi.StringInput
	// The name of the Resource Group where the API Management Email Template should exist. Changing this forces a new API Management Email Template to be created.
	ResourceGroupName pulumi.StringInput
	// The subject of the Email.
	Subject pulumi.StringInput
	// The name of the Email Template. Possible values are `AccountClosedDeveloper`, `ApplicationApprovedNotificationMessage`, `ConfirmSignUpIdentityDefault`, `EmailChangeIdentityDefault`, `InviteUserNotificationMessage`, `NewCommentNotificationMessage`, `NewDeveloperNotificationMessage`, `NewIssueNotificationMessage`, `PasswordResetByAdminNotificationMessage`, `PasswordResetIdentityDefault`, `PurchaseDeveloperNotificationMessage`, `QuotaLimitApproachingDeveloperNotificationMessage`, `RejectDeveloperNotificationMessage`, `RequestDeveloperNotificationMessage`. Changing this forces a new API Management Email Template to be created.
	TemplateName pulumi.StringInput
}

func (EmailTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*emailTemplateArgs)(nil)).Elem()
}

type EmailTemplateInput interface {
	pulumi.Input

	ToEmailTemplateOutput() EmailTemplateOutput
	ToEmailTemplateOutputWithContext(ctx context.Context) EmailTemplateOutput
}

func (*EmailTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailTemplate)(nil)).Elem()
}

func (i *EmailTemplate) ToEmailTemplateOutput() EmailTemplateOutput {
	return i.ToEmailTemplateOutputWithContext(context.Background())
}

func (i *EmailTemplate) ToEmailTemplateOutputWithContext(ctx context.Context) EmailTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailTemplateOutput)
}

// EmailTemplateArrayInput is an input type that accepts EmailTemplateArray and EmailTemplateArrayOutput values.
// You can construct a concrete instance of `EmailTemplateArrayInput` via:
//
//	EmailTemplateArray{ EmailTemplateArgs{...} }
type EmailTemplateArrayInput interface {
	pulumi.Input

	ToEmailTemplateArrayOutput() EmailTemplateArrayOutput
	ToEmailTemplateArrayOutputWithContext(context.Context) EmailTemplateArrayOutput
}

type EmailTemplateArray []EmailTemplateInput

func (EmailTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailTemplate)(nil)).Elem()
}

func (i EmailTemplateArray) ToEmailTemplateArrayOutput() EmailTemplateArrayOutput {
	return i.ToEmailTemplateArrayOutputWithContext(context.Background())
}

func (i EmailTemplateArray) ToEmailTemplateArrayOutputWithContext(ctx context.Context) EmailTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailTemplateArrayOutput)
}

// EmailTemplateMapInput is an input type that accepts EmailTemplateMap and EmailTemplateMapOutput values.
// You can construct a concrete instance of `EmailTemplateMapInput` via:
//
//	EmailTemplateMap{ "key": EmailTemplateArgs{...} }
type EmailTemplateMapInput interface {
	pulumi.Input

	ToEmailTemplateMapOutput() EmailTemplateMapOutput
	ToEmailTemplateMapOutputWithContext(context.Context) EmailTemplateMapOutput
}

type EmailTemplateMap map[string]EmailTemplateInput

func (EmailTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailTemplate)(nil)).Elem()
}

func (i EmailTemplateMap) ToEmailTemplateMapOutput() EmailTemplateMapOutput {
	return i.ToEmailTemplateMapOutputWithContext(context.Background())
}

func (i EmailTemplateMap) ToEmailTemplateMapOutputWithContext(ctx context.Context) EmailTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailTemplateMapOutput)
}

type EmailTemplateOutput struct{ *pulumi.OutputState }

func (EmailTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailTemplate)(nil)).Elem()
}

func (o EmailTemplateOutput) ToEmailTemplateOutput() EmailTemplateOutput {
	return o
}

func (o EmailTemplateOutput) ToEmailTemplateOutputWithContext(ctx context.Context) EmailTemplateOutput {
	return o
}

// The name of the API Management Service in which the Email Template should exist. Changing this forces a new API Management Email Template to be created.
func (o EmailTemplateOutput) ApiManagementName() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailTemplate) pulumi.StringOutput { return v.ApiManagementName }).(pulumi.StringOutput)
}

// The body of the Email. Its format has to be a well-formed HTML document.
//
// > **NOTE:** In `subject` and `body` predefined parameters can be used. The available parameters depend on the template. Schema to use a parameter: `$` followed by the `parameter.name` - `$<parameter.name>`. The available parameters can be seen in the Notification templates section of the API-Management Service instance within the Azure Portal.
func (o EmailTemplateOutput) Body() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailTemplate) pulumi.StringOutput { return v.Body }).(pulumi.StringOutput)
}

// The description of the Email Template.
func (o EmailTemplateOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailTemplate) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The name of the Resource Group where the API Management Email Template should exist. Changing this forces a new API Management Email Template to be created.
func (o EmailTemplateOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailTemplate) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The subject of the Email.
func (o EmailTemplateOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailTemplate) pulumi.StringOutput { return v.Subject }).(pulumi.StringOutput)
}

// The name of the Email Template. Possible values are `AccountClosedDeveloper`, `ApplicationApprovedNotificationMessage`, `ConfirmSignUpIdentityDefault`, `EmailChangeIdentityDefault`, `InviteUserNotificationMessage`, `NewCommentNotificationMessage`, `NewDeveloperNotificationMessage`, `NewIssueNotificationMessage`, `PasswordResetByAdminNotificationMessage`, `PasswordResetIdentityDefault`, `PurchaseDeveloperNotificationMessage`, `QuotaLimitApproachingDeveloperNotificationMessage`, `RejectDeveloperNotificationMessage`, `RequestDeveloperNotificationMessage`. Changing this forces a new API Management Email Template to be created.
func (o EmailTemplateOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailTemplate) pulumi.StringOutput { return v.TemplateName }).(pulumi.StringOutput)
}

// The title of the Email Template.
func (o EmailTemplateOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailTemplate) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

type EmailTemplateArrayOutput struct{ *pulumi.OutputState }

func (EmailTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailTemplate)(nil)).Elem()
}

func (o EmailTemplateArrayOutput) ToEmailTemplateArrayOutput() EmailTemplateArrayOutput {
	return o
}

func (o EmailTemplateArrayOutput) ToEmailTemplateArrayOutputWithContext(ctx context.Context) EmailTemplateArrayOutput {
	return o
}

func (o EmailTemplateArrayOutput) Index(i pulumi.IntInput) EmailTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EmailTemplate {
		return vs[0].([]*EmailTemplate)[vs[1].(int)]
	}).(EmailTemplateOutput)
}

type EmailTemplateMapOutput struct{ *pulumi.OutputState }

func (EmailTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailTemplate)(nil)).Elem()
}

func (o EmailTemplateMapOutput) ToEmailTemplateMapOutput() EmailTemplateMapOutput {
	return o
}

func (o EmailTemplateMapOutput) ToEmailTemplateMapOutputWithContext(ctx context.Context) EmailTemplateMapOutput {
	return o
}

func (o EmailTemplateMapOutput) MapIndex(k pulumi.StringInput) EmailTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EmailTemplate {
		return vs[0].(map[string]*EmailTemplate)[vs[1].(string)]
	}).(EmailTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EmailTemplateInput)(nil)).Elem(), &EmailTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailTemplateArrayInput)(nil)).Elem(), EmailTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailTemplateMapInput)(nil)).Elem(), EmailTemplateMap{})
	pulumi.RegisterOutputType(EmailTemplateOutput{})
	pulumi.RegisterOutputType(EmailTemplateArrayOutput{})
	pulumi.RegisterOutputType(EmailTemplateMapOutput{})
}
