// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Authorization Server within an API Management Service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/apimanagement"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleService, err := apimanagement.LookupService(ctx, &apimanagement.LookupServiceArgs{
//				Name:              "search-api",
//				ResourceGroupName: "search-service",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = apimanagement.NewAuthorizationServer(ctx, "exampleAuthorizationServer", &apimanagement.AuthorizationServerArgs{
//				ApiManagementName:          *pulumi.String(exampleService.Name),
//				ResourceGroupName:          *pulumi.String(exampleService.ResourceGroupName),
//				DisplayName:                pulumi.String("Test Server"),
//				AuthorizationEndpoint:      pulumi.String("https://example.mydomain.com/client/authorize"),
//				ClientId:                   pulumi.String("42424242-4242-4242-4242-424242424242"),
//				ClientRegistrationEndpoint: pulumi.String("https://example.mydomain.com/client/register"),
//				GrantTypes: pulumi.StringArray{
//					pulumi.String("authorizationCode"),
//				},
//				AuthorizationMethods: pulumi.StringArray{
//					pulumi.String("GET"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// API Management Authorization Servers can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:apimanagement/authorizationServer:AuthorizationServer example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.ApiManagement/service/service1/authorizationServers/server1
//
// ```
type AuthorizationServer struct {
	pulumi.CustomResourceState

	// The name of the API Management Service in which this Authorization Server should be created. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringOutput `pulumi:"apiManagementName"`
	// The OAUTH Authorization Endpoint.
	AuthorizationEndpoint pulumi.StringOutput `pulumi:"authorizationEndpoint"`
	// The HTTP Verbs supported by the Authorization Endpoint. Possible values are `DELETE`, `GET`, `HEAD`, `OPTIONS`, `PATCH`, `POST`, `PUT` and `TRACE`.
	//
	// > **NOTE:** `GET` must always be present.
	AuthorizationMethods pulumi.StringArrayOutput `pulumi:"authorizationMethods"`
	// The mechanism by which Access Tokens are passed to the API. Possible values are `authorizationHeader` and `query`.
	BearerTokenSendingMethods pulumi.StringArrayOutput `pulumi:"bearerTokenSendingMethods"`
	// The Authentication Methods supported by the Token endpoint of this Authorization Server.. Possible values are `Basic` and `Body`.
	ClientAuthenticationMethods pulumi.StringArrayOutput `pulumi:"clientAuthenticationMethods"`
	// The Client/App ID registered with this Authorization Server.
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// The URI of page where Client/App Registration is performed for this Authorization Server.
	ClientRegistrationEndpoint pulumi.StringOutput `pulumi:"clientRegistrationEndpoint"`
	// The Client/App Secret registered with this Authorization Server.
	ClientSecret pulumi.StringPtrOutput `pulumi:"clientSecret"`
	// The Default Scope used when requesting an Access Token, specified as a string containing space-delimited values.
	DefaultScope pulumi.StringPtrOutput `pulumi:"defaultScope"`
	// A description of the Authorization Server, which may contain HTML formatting tags.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The user-friendly name of this Authorization Server.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Form of Authorization Grants required when requesting an Access Token. Possible values are `authorizationCode`, `clientCredentials`, `implicit` and `resourceOwnerPassword`.
	GrantTypes pulumi.StringArrayOutput `pulumi:"grantTypes"`
	// The name of this Authorization Server. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The password associated with the Resource Owner.
	//
	// > **NOTE:** This can only be specified when `grantType` includes `resourceOwnerPassword`.
	ResourceOwnerPassword pulumi.StringPtrOutput `pulumi:"resourceOwnerPassword"`
	// The username associated with the Resource Owner.
	//
	// > **NOTE:** This can only be specified when `grantType` includes `resourceOwnerPassword`.
	ResourceOwnerUsername pulumi.StringPtrOutput `pulumi:"resourceOwnerUsername"`
	// Does this Authorization Server support State? If this is set to `true` the client may use the state parameter to raise protocol security.
	SupportState pulumi.BoolPtrOutput `pulumi:"supportState"`
	// A `tokenBodyParameter` block as defined below.
	TokenBodyParameters AuthorizationServerTokenBodyParameterArrayOutput `pulumi:"tokenBodyParameters"`
	// The OAUTH Token Endpoint.
	TokenEndpoint pulumi.StringPtrOutput `pulumi:"tokenEndpoint"`
}

// NewAuthorizationServer registers a new resource with the given unique name, arguments, and options.
func NewAuthorizationServer(ctx *pulumi.Context,
	name string, args *AuthorizationServerArgs, opts ...pulumi.ResourceOption) (*AuthorizationServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiManagementName == nil {
		return nil, errors.New("invalid value for required argument 'ApiManagementName'")
	}
	if args.AuthorizationEndpoint == nil {
		return nil, errors.New("invalid value for required argument 'AuthorizationEndpoint'")
	}
	if args.AuthorizationMethods == nil {
		return nil, errors.New("invalid value for required argument 'AuthorizationMethods'")
	}
	if args.ClientId == nil {
		return nil, errors.New("invalid value for required argument 'ClientId'")
	}
	if args.ClientRegistrationEndpoint == nil {
		return nil, errors.New("invalid value for required argument 'ClientRegistrationEndpoint'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.GrantTypes == nil {
		return nil, errors.New("invalid value for required argument 'GrantTypes'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ClientSecret != nil {
		args.ClientSecret = pulumi.ToSecret(args.ClientSecret).(pulumi.StringPtrInput)
	}
	if args.ResourceOwnerPassword != nil {
		args.ResourceOwnerPassword = pulumi.ToSecret(args.ResourceOwnerPassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"clientSecret",
		"resourceOwnerPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AuthorizationServer
	err := ctx.RegisterResource("azure:apimanagement/authorizationServer:AuthorizationServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthorizationServer gets an existing AuthorizationServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthorizationServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthorizationServerState, opts ...pulumi.ResourceOption) (*AuthorizationServer, error) {
	var resource AuthorizationServer
	err := ctx.ReadResource("azure:apimanagement/authorizationServer:AuthorizationServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthorizationServer resources.
type authorizationServerState struct {
	// The name of the API Management Service in which this Authorization Server should be created. Changing this forces a new resource to be created.
	ApiManagementName *string `pulumi:"apiManagementName"`
	// The OAUTH Authorization Endpoint.
	AuthorizationEndpoint *string `pulumi:"authorizationEndpoint"`
	// The HTTP Verbs supported by the Authorization Endpoint. Possible values are `DELETE`, `GET`, `HEAD`, `OPTIONS`, `PATCH`, `POST`, `PUT` and `TRACE`.
	//
	// > **NOTE:** `GET` must always be present.
	AuthorizationMethods []string `pulumi:"authorizationMethods"`
	// The mechanism by which Access Tokens are passed to the API. Possible values are `authorizationHeader` and `query`.
	BearerTokenSendingMethods []string `pulumi:"bearerTokenSendingMethods"`
	// The Authentication Methods supported by the Token endpoint of this Authorization Server.. Possible values are `Basic` and `Body`.
	ClientAuthenticationMethods []string `pulumi:"clientAuthenticationMethods"`
	// The Client/App ID registered with this Authorization Server.
	ClientId *string `pulumi:"clientId"`
	// The URI of page where Client/App Registration is performed for this Authorization Server.
	ClientRegistrationEndpoint *string `pulumi:"clientRegistrationEndpoint"`
	// The Client/App Secret registered with this Authorization Server.
	ClientSecret *string `pulumi:"clientSecret"`
	// The Default Scope used when requesting an Access Token, specified as a string containing space-delimited values.
	DefaultScope *string `pulumi:"defaultScope"`
	// A description of the Authorization Server, which may contain HTML formatting tags.
	Description *string `pulumi:"description"`
	// The user-friendly name of this Authorization Server.
	DisplayName *string `pulumi:"displayName"`
	// Form of Authorization Grants required when requesting an Access Token. Possible values are `authorizationCode`, `clientCredentials`, `implicit` and `resourceOwnerPassword`.
	GrantTypes []string `pulumi:"grantTypes"`
	// The name of this Authorization Server. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The password associated with the Resource Owner.
	//
	// > **NOTE:** This can only be specified when `grantType` includes `resourceOwnerPassword`.
	ResourceOwnerPassword *string `pulumi:"resourceOwnerPassword"`
	// The username associated with the Resource Owner.
	//
	// > **NOTE:** This can only be specified when `grantType` includes `resourceOwnerPassword`.
	ResourceOwnerUsername *string `pulumi:"resourceOwnerUsername"`
	// Does this Authorization Server support State? If this is set to `true` the client may use the state parameter to raise protocol security.
	SupportState *bool `pulumi:"supportState"`
	// A `tokenBodyParameter` block as defined below.
	TokenBodyParameters []AuthorizationServerTokenBodyParameter `pulumi:"tokenBodyParameters"`
	// The OAUTH Token Endpoint.
	TokenEndpoint *string `pulumi:"tokenEndpoint"`
}

type AuthorizationServerState struct {
	// The name of the API Management Service in which this Authorization Server should be created. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringPtrInput
	// The OAUTH Authorization Endpoint.
	AuthorizationEndpoint pulumi.StringPtrInput
	// The HTTP Verbs supported by the Authorization Endpoint. Possible values are `DELETE`, `GET`, `HEAD`, `OPTIONS`, `PATCH`, `POST`, `PUT` and `TRACE`.
	//
	// > **NOTE:** `GET` must always be present.
	AuthorizationMethods pulumi.StringArrayInput
	// The mechanism by which Access Tokens are passed to the API. Possible values are `authorizationHeader` and `query`.
	BearerTokenSendingMethods pulumi.StringArrayInput
	// The Authentication Methods supported by the Token endpoint of this Authorization Server.. Possible values are `Basic` and `Body`.
	ClientAuthenticationMethods pulumi.StringArrayInput
	// The Client/App ID registered with this Authorization Server.
	ClientId pulumi.StringPtrInput
	// The URI of page where Client/App Registration is performed for this Authorization Server.
	ClientRegistrationEndpoint pulumi.StringPtrInput
	// The Client/App Secret registered with this Authorization Server.
	ClientSecret pulumi.StringPtrInput
	// The Default Scope used when requesting an Access Token, specified as a string containing space-delimited values.
	DefaultScope pulumi.StringPtrInput
	// A description of the Authorization Server, which may contain HTML formatting tags.
	Description pulumi.StringPtrInput
	// The user-friendly name of this Authorization Server.
	DisplayName pulumi.StringPtrInput
	// Form of Authorization Grants required when requesting an Access Token. Possible values are `authorizationCode`, `clientCredentials`, `implicit` and `resourceOwnerPassword`.
	GrantTypes pulumi.StringArrayInput
	// The name of this Authorization Server. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The password associated with the Resource Owner.
	//
	// > **NOTE:** This can only be specified when `grantType` includes `resourceOwnerPassword`.
	ResourceOwnerPassword pulumi.StringPtrInput
	// The username associated with the Resource Owner.
	//
	// > **NOTE:** This can only be specified when `grantType` includes `resourceOwnerPassword`.
	ResourceOwnerUsername pulumi.StringPtrInput
	// Does this Authorization Server support State? If this is set to `true` the client may use the state parameter to raise protocol security.
	SupportState pulumi.BoolPtrInput
	// A `tokenBodyParameter` block as defined below.
	TokenBodyParameters AuthorizationServerTokenBodyParameterArrayInput
	// The OAUTH Token Endpoint.
	TokenEndpoint pulumi.StringPtrInput
}

func (AuthorizationServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizationServerState)(nil)).Elem()
}

type authorizationServerArgs struct {
	// The name of the API Management Service in which this Authorization Server should be created. Changing this forces a new resource to be created.
	ApiManagementName string `pulumi:"apiManagementName"`
	// The OAUTH Authorization Endpoint.
	AuthorizationEndpoint string `pulumi:"authorizationEndpoint"`
	// The HTTP Verbs supported by the Authorization Endpoint. Possible values are `DELETE`, `GET`, `HEAD`, `OPTIONS`, `PATCH`, `POST`, `PUT` and `TRACE`.
	//
	// > **NOTE:** `GET` must always be present.
	AuthorizationMethods []string `pulumi:"authorizationMethods"`
	// The mechanism by which Access Tokens are passed to the API. Possible values are `authorizationHeader` and `query`.
	BearerTokenSendingMethods []string `pulumi:"bearerTokenSendingMethods"`
	// The Authentication Methods supported by the Token endpoint of this Authorization Server.. Possible values are `Basic` and `Body`.
	ClientAuthenticationMethods []string `pulumi:"clientAuthenticationMethods"`
	// The Client/App ID registered with this Authorization Server.
	ClientId string `pulumi:"clientId"`
	// The URI of page where Client/App Registration is performed for this Authorization Server.
	ClientRegistrationEndpoint string `pulumi:"clientRegistrationEndpoint"`
	// The Client/App Secret registered with this Authorization Server.
	ClientSecret *string `pulumi:"clientSecret"`
	// The Default Scope used when requesting an Access Token, specified as a string containing space-delimited values.
	DefaultScope *string `pulumi:"defaultScope"`
	// A description of the Authorization Server, which may contain HTML formatting tags.
	Description *string `pulumi:"description"`
	// The user-friendly name of this Authorization Server.
	DisplayName string `pulumi:"displayName"`
	// Form of Authorization Grants required when requesting an Access Token. Possible values are `authorizationCode`, `clientCredentials`, `implicit` and `resourceOwnerPassword`.
	GrantTypes []string `pulumi:"grantTypes"`
	// The name of this Authorization Server. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The password associated with the Resource Owner.
	//
	// > **NOTE:** This can only be specified when `grantType` includes `resourceOwnerPassword`.
	ResourceOwnerPassword *string `pulumi:"resourceOwnerPassword"`
	// The username associated with the Resource Owner.
	//
	// > **NOTE:** This can only be specified when `grantType` includes `resourceOwnerPassword`.
	ResourceOwnerUsername *string `pulumi:"resourceOwnerUsername"`
	// Does this Authorization Server support State? If this is set to `true` the client may use the state parameter to raise protocol security.
	SupportState *bool `pulumi:"supportState"`
	// A `tokenBodyParameter` block as defined below.
	TokenBodyParameters []AuthorizationServerTokenBodyParameter `pulumi:"tokenBodyParameters"`
	// The OAUTH Token Endpoint.
	TokenEndpoint *string `pulumi:"tokenEndpoint"`
}

// The set of arguments for constructing a AuthorizationServer resource.
type AuthorizationServerArgs struct {
	// The name of the API Management Service in which this Authorization Server should be created. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringInput
	// The OAUTH Authorization Endpoint.
	AuthorizationEndpoint pulumi.StringInput
	// The HTTP Verbs supported by the Authorization Endpoint. Possible values are `DELETE`, `GET`, `HEAD`, `OPTIONS`, `PATCH`, `POST`, `PUT` and `TRACE`.
	//
	// > **NOTE:** `GET` must always be present.
	AuthorizationMethods pulumi.StringArrayInput
	// The mechanism by which Access Tokens are passed to the API. Possible values are `authorizationHeader` and `query`.
	BearerTokenSendingMethods pulumi.StringArrayInput
	// The Authentication Methods supported by the Token endpoint of this Authorization Server.. Possible values are `Basic` and `Body`.
	ClientAuthenticationMethods pulumi.StringArrayInput
	// The Client/App ID registered with this Authorization Server.
	ClientId pulumi.StringInput
	// The URI of page where Client/App Registration is performed for this Authorization Server.
	ClientRegistrationEndpoint pulumi.StringInput
	// The Client/App Secret registered with this Authorization Server.
	ClientSecret pulumi.StringPtrInput
	// The Default Scope used when requesting an Access Token, specified as a string containing space-delimited values.
	DefaultScope pulumi.StringPtrInput
	// A description of the Authorization Server, which may contain HTML formatting tags.
	Description pulumi.StringPtrInput
	// The user-friendly name of this Authorization Server.
	DisplayName pulumi.StringInput
	// Form of Authorization Grants required when requesting an Access Token. Possible values are `authorizationCode`, `clientCredentials`, `implicit` and `resourceOwnerPassword`.
	GrantTypes pulumi.StringArrayInput
	// The name of this Authorization Server. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// The password associated with the Resource Owner.
	//
	// > **NOTE:** This can only be specified when `grantType` includes `resourceOwnerPassword`.
	ResourceOwnerPassword pulumi.StringPtrInput
	// The username associated with the Resource Owner.
	//
	// > **NOTE:** This can only be specified when `grantType` includes `resourceOwnerPassword`.
	ResourceOwnerUsername pulumi.StringPtrInput
	// Does this Authorization Server support State? If this is set to `true` the client may use the state parameter to raise protocol security.
	SupportState pulumi.BoolPtrInput
	// A `tokenBodyParameter` block as defined below.
	TokenBodyParameters AuthorizationServerTokenBodyParameterArrayInput
	// The OAUTH Token Endpoint.
	TokenEndpoint pulumi.StringPtrInput
}

func (AuthorizationServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizationServerArgs)(nil)).Elem()
}

type AuthorizationServerInput interface {
	pulumi.Input

	ToAuthorizationServerOutput() AuthorizationServerOutput
	ToAuthorizationServerOutputWithContext(ctx context.Context) AuthorizationServerOutput
}

func (*AuthorizationServer) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationServer)(nil)).Elem()
}

func (i *AuthorizationServer) ToAuthorizationServerOutput() AuthorizationServerOutput {
	return i.ToAuthorizationServerOutputWithContext(context.Background())
}

func (i *AuthorizationServer) ToAuthorizationServerOutputWithContext(ctx context.Context) AuthorizationServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationServerOutput)
}

// AuthorizationServerArrayInput is an input type that accepts AuthorizationServerArray and AuthorizationServerArrayOutput values.
// You can construct a concrete instance of `AuthorizationServerArrayInput` via:
//
//	AuthorizationServerArray{ AuthorizationServerArgs{...} }
type AuthorizationServerArrayInput interface {
	pulumi.Input

	ToAuthorizationServerArrayOutput() AuthorizationServerArrayOutput
	ToAuthorizationServerArrayOutputWithContext(context.Context) AuthorizationServerArrayOutput
}

type AuthorizationServerArray []AuthorizationServerInput

func (AuthorizationServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthorizationServer)(nil)).Elem()
}

func (i AuthorizationServerArray) ToAuthorizationServerArrayOutput() AuthorizationServerArrayOutput {
	return i.ToAuthorizationServerArrayOutputWithContext(context.Background())
}

func (i AuthorizationServerArray) ToAuthorizationServerArrayOutputWithContext(ctx context.Context) AuthorizationServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationServerArrayOutput)
}

// AuthorizationServerMapInput is an input type that accepts AuthorizationServerMap and AuthorizationServerMapOutput values.
// You can construct a concrete instance of `AuthorizationServerMapInput` via:
//
//	AuthorizationServerMap{ "key": AuthorizationServerArgs{...} }
type AuthorizationServerMapInput interface {
	pulumi.Input

	ToAuthorizationServerMapOutput() AuthorizationServerMapOutput
	ToAuthorizationServerMapOutputWithContext(context.Context) AuthorizationServerMapOutput
}

type AuthorizationServerMap map[string]AuthorizationServerInput

func (AuthorizationServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthorizationServer)(nil)).Elem()
}

func (i AuthorizationServerMap) ToAuthorizationServerMapOutput() AuthorizationServerMapOutput {
	return i.ToAuthorizationServerMapOutputWithContext(context.Background())
}

func (i AuthorizationServerMap) ToAuthorizationServerMapOutputWithContext(ctx context.Context) AuthorizationServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationServerMapOutput)
}

type AuthorizationServerOutput struct{ *pulumi.OutputState }

func (AuthorizationServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationServer)(nil)).Elem()
}

func (o AuthorizationServerOutput) ToAuthorizationServerOutput() AuthorizationServerOutput {
	return o
}

func (o AuthorizationServerOutput) ToAuthorizationServerOutputWithContext(ctx context.Context) AuthorizationServerOutput {
	return o
}

// The name of the API Management Service in which this Authorization Server should be created. Changing this forces a new resource to be created.
func (o AuthorizationServerOutput) ApiManagementName() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthorizationServer) pulumi.StringOutput { return v.ApiManagementName }).(pulumi.StringOutput)
}

// The OAUTH Authorization Endpoint.
func (o AuthorizationServerOutput) AuthorizationEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthorizationServer) pulumi.StringOutput { return v.AuthorizationEndpoint }).(pulumi.StringOutput)
}

// The HTTP Verbs supported by the Authorization Endpoint. Possible values are `DELETE`, `GET`, `HEAD`, `OPTIONS`, `PATCH`, `POST`, `PUT` and `TRACE`.
//
// > **NOTE:** `GET` must always be present.
func (o AuthorizationServerOutput) AuthorizationMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthorizationServer) pulumi.StringArrayOutput { return v.AuthorizationMethods }).(pulumi.StringArrayOutput)
}

// The mechanism by which Access Tokens are passed to the API. Possible values are `authorizationHeader` and `query`.
func (o AuthorizationServerOutput) BearerTokenSendingMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthorizationServer) pulumi.StringArrayOutput { return v.BearerTokenSendingMethods }).(pulumi.StringArrayOutput)
}

// The Authentication Methods supported by the Token endpoint of this Authorization Server.. Possible values are `Basic` and `Body`.
func (o AuthorizationServerOutput) ClientAuthenticationMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthorizationServer) pulumi.StringArrayOutput { return v.ClientAuthenticationMethods }).(pulumi.StringArrayOutput)
}

// The Client/App ID registered with this Authorization Server.
func (o AuthorizationServerOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthorizationServer) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

// The URI of page where Client/App Registration is performed for this Authorization Server.
func (o AuthorizationServerOutput) ClientRegistrationEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthorizationServer) pulumi.StringOutput { return v.ClientRegistrationEndpoint }).(pulumi.StringOutput)
}

// The Client/App Secret registered with this Authorization Server.
func (o AuthorizationServerOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationServer) pulumi.StringPtrOutput { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// The Default Scope used when requesting an Access Token, specified as a string containing space-delimited values.
func (o AuthorizationServerOutput) DefaultScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationServer) pulumi.StringPtrOutput { return v.DefaultScope }).(pulumi.StringPtrOutput)
}

// A description of the Authorization Server, which may contain HTML formatting tags.
func (o AuthorizationServerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationServer) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The user-friendly name of this Authorization Server.
func (o AuthorizationServerOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthorizationServer) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Form of Authorization Grants required when requesting an Access Token. Possible values are `authorizationCode`, `clientCredentials`, `implicit` and `resourceOwnerPassword`.
func (o AuthorizationServerOutput) GrantTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthorizationServer) pulumi.StringArrayOutput { return v.GrantTypes }).(pulumi.StringArrayOutput)
}

// The name of this Authorization Server. Changing this forces a new resource to be created.
func (o AuthorizationServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthorizationServer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
func (o AuthorizationServerOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthorizationServer) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The password associated with the Resource Owner.
//
// > **NOTE:** This can only be specified when `grantType` includes `resourceOwnerPassword`.
func (o AuthorizationServerOutput) ResourceOwnerPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationServer) pulumi.StringPtrOutput { return v.ResourceOwnerPassword }).(pulumi.StringPtrOutput)
}

// The username associated with the Resource Owner.
//
// > **NOTE:** This can only be specified when `grantType` includes `resourceOwnerPassword`.
func (o AuthorizationServerOutput) ResourceOwnerUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationServer) pulumi.StringPtrOutput { return v.ResourceOwnerUsername }).(pulumi.StringPtrOutput)
}

// Does this Authorization Server support State? If this is set to `true` the client may use the state parameter to raise protocol security.
func (o AuthorizationServerOutput) SupportState() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthorizationServer) pulumi.BoolPtrOutput { return v.SupportState }).(pulumi.BoolPtrOutput)
}

// A `tokenBodyParameter` block as defined below.
func (o AuthorizationServerOutput) TokenBodyParameters() AuthorizationServerTokenBodyParameterArrayOutput {
	return o.ApplyT(func(v *AuthorizationServer) AuthorizationServerTokenBodyParameterArrayOutput {
		return v.TokenBodyParameters
	}).(AuthorizationServerTokenBodyParameterArrayOutput)
}

// The OAUTH Token Endpoint.
func (o AuthorizationServerOutput) TokenEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationServer) pulumi.StringPtrOutput { return v.TokenEndpoint }).(pulumi.StringPtrOutput)
}

type AuthorizationServerArrayOutput struct{ *pulumi.OutputState }

func (AuthorizationServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthorizationServer)(nil)).Elem()
}

func (o AuthorizationServerArrayOutput) ToAuthorizationServerArrayOutput() AuthorizationServerArrayOutput {
	return o
}

func (o AuthorizationServerArrayOutput) ToAuthorizationServerArrayOutputWithContext(ctx context.Context) AuthorizationServerArrayOutput {
	return o
}

func (o AuthorizationServerArrayOutput) Index(i pulumi.IntInput) AuthorizationServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AuthorizationServer {
		return vs[0].([]*AuthorizationServer)[vs[1].(int)]
	}).(AuthorizationServerOutput)
}

type AuthorizationServerMapOutput struct{ *pulumi.OutputState }

func (AuthorizationServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthorizationServer)(nil)).Elem()
}

func (o AuthorizationServerMapOutput) ToAuthorizationServerMapOutput() AuthorizationServerMapOutput {
	return o
}

func (o AuthorizationServerMapOutput) ToAuthorizationServerMapOutputWithContext(ctx context.Context) AuthorizationServerMapOutput {
	return o
}

func (o AuthorizationServerMapOutput) MapIndex(k pulumi.StringInput) AuthorizationServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AuthorizationServer {
		return vs[0].(map[string]*AuthorizationServer)[vs[1].(string)]
	}).(AuthorizationServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationServerInput)(nil)).Elem(), &AuthorizationServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationServerArrayInput)(nil)).Elem(), AuthorizationServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationServerMapInput)(nil)).Elem(), AuthorizationServerMap{})
	pulumi.RegisterOutputType(AuthorizationServerOutput{})
	pulumi.RegisterOutputType(AuthorizationServerArrayOutput{})
	pulumi.RegisterOutputType(AuthorizationServerMapOutput{})
}
