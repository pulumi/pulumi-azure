// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an API Management Microsoft Identity Provider.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/apimanagement"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleService, err := apimanagement.NewService(ctx, "exampleService", &apimanagement.ServiceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				PublisherName:     pulumi.String("My Company"),
//				PublisherEmail:    pulumi.String("company@mycompany.io"),
//				SkuName:           pulumi.String("Developer_1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = apimanagement.NewIdentityProviderMicrosoft(ctx, "exampleIdentityProviderMicrosoft", &apimanagement.IdentityProviderMicrosoftArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				ApiManagementName: exampleService.Name,
//				ClientId:          pulumi.String("00000000-0000-0000-0000-000000000000"),
//				ClientSecret:      pulumi.String("00000000000000000000000000000000"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// API Management Microsoft Identity Provider can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:apimanagement/identityProviderMicrosoft:IdentityProviderMicrosoft example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ApiManagement/service/instance1/identityProviders/microsoft
//
// ```
type IdentityProviderMicrosoft struct {
	pulumi.CustomResourceState

	// The Name of the API Management Service where this Microsoft Identity Provider should be created. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringOutput `pulumi:"apiManagementName"`
	// Client Id of the Azure AD Application.
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// Client secret of the Azure AD Application.
	ClientSecret pulumi.StringOutput `pulumi:"clientSecret"`
	// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
}

// NewIdentityProviderMicrosoft registers a new resource with the given unique name, arguments, and options.
func NewIdentityProviderMicrosoft(ctx *pulumi.Context,
	name string, args *IdentityProviderMicrosoftArgs, opts ...pulumi.ResourceOption) (*IdentityProviderMicrosoft, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiManagementName == nil {
		return nil, errors.New("invalid value for required argument 'ApiManagementName'")
	}
	if args.ClientId == nil {
		return nil, errors.New("invalid value for required argument 'ClientId'")
	}
	if args.ClientSecret == nil {
		return nil, errors.New("invalid value for required argument 'ClientSecret'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ClientSecret != nil {
		args.ClientSecret = pulumi.ToSecret(args.ClientSecret).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"clientSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IdentityProviderMicrosoft
	err := ctx.RegisterResource("azure:apimanagement/identityProviderMicrosoft:IdentityProviderMicrosoft", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityProviderMicrosoft gets an existing IdentityProviderMicrosoft resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityProviderMicrosoft(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityProviderMicrosoftState, opts ...pulumi.ResourceOption) (*IdentityProviderMicrosoft, error) {
	var resource IdentityProviderMicrosoft
	err := ctx.ReadResource("azure:apimanagement/identityProviderMicrosoft:IdentityProviderMicrosoft", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityProviderMicrosoft resources.
type identityProviderMicrosoftState struct {
	// The Name of the API Management Service where this Microsoft Identity Provider should be created. Changing this forces a new resource to be created.
	ApiManagementName *string `pulumi:"apiManagementName"`
	// Client Id of the Azure AD Application.
	ClientId *string `pulumi:"clientId"`
	// Client secret of the Azure AD Application.
	ClientSecret *string `pulumi:"clientSecret"`
	// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
}

type IdentityProviderMicrosoftState struct {
	// The Name of the API Management Service where this Microsoft Identity Provider should be created. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringPtrInput
	// Client Id of the Azure AD Application.
	ClientId pulumi.StringPtrInput
	// Client secret of the Azure AD Application.
	ClientSecret pulumi.StringPtrInput
	// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
}

func (IdentityProviderMicrosoftState) ElementType() reflect.Type {
	return reflect.TypeOf((*identityProviderMicrosoftState)(nil)).Elem()
}

type identityProviderMicrosoftArgs struct {
	// The Name of the API Management Service where this Microsoft Identity Provider should be created. Changing this forces a new resource to be created.
	ApiManagementName string `pulumi:"apiManagementName"`
	// Client Id of the Azure AD Application.
	ClientId string `pulumi:"clientId"`
	// Client secret of the Azure AD Application.
	ClientSecret string `pulumi:"clientSecret"`
	// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a IdentityProviderMicrosoft resource.
type IdentityProviderMicrosoftArgs struct {
	// The Name of the API Management Service where this Microsoft Identity Provider should be created. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringInput
	// Client Id of the Azure AD Application.
	ClientId pulumi.StringInput
	// Client secret of the Azure AD Application.
	ClientSecret pulumi.StringInput
	// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
}

func (IdentityProviderMicrosoftArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identityProviderMicrosoftArgs)(nil)).Elem()
}

type IdentityProviderMicrosoftInput interface {
	pulumi.Input

	ToIdentityProviderMicrosoftOutput() IdentityProviderMicrosoftOutput
	ToIdentityProviderMicrosoftOutputWithContext(ctx context.Context) IdentityProviderMicrosoftOutput
}

func (*IdentityProviderMicrosoft) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProviderMicrosoft)(nil)).Elem()
}

func (i *IdentityProviderMicrosoft) ToIdentityProviderMicrosoftOutput() IdentityProviderMicrosoftOutput {
	return i.ToIdentityProviderMicrosoftOutputWithContext(context.Background())
}

func (i *IdentityProviderMicrosoft) ToIdentityProviderMicrosoftOutputWithContext(ctx context.Context) IdentityProviderMicrosoftOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProviderMicrosoftOutput)
}

// IdentityProviderMicrosoftArrayInput is an input type that accepts IdentityProviderMicrosoftArray and IdentityProviderMicrosoftArrayOutput values.
// You can construct a concrete instance of `IdentityProviderMicrosoftArrayInput` via:
//
//	IdentityProviderMicrosoftArray{ IdentityProviderMicrosoftArgs{...} }
type IdentityProviderMicrosoftArrayInput interface {
	pulumi.Input

	ToIdentityProviderMicrosoftArrayOutput() IdentityProviderMicrosoftArrayOutput
	ToIdentityProviderMicrosoftArrayOutputWithContext(context.Context) IdentityProviderMicrosoftArrayOutput
}

type IdentityProviderMicrosoftArray []IdentityProviderMicrosoftInput

func (IdentityProviderMicrosoftArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityProviderMicrosoft)(nil)).Elem()
}

func (i IdentityProviderMicrosoftArray) ToIdentityProviderMicrosoftArrayOutput() IdentityProviderMicrosoftArrayOutput {
	return i.ToIdentityProviderMicrosoftArrayOutputWithContext(context.Background())
}

func (i IdentityProviderMicrosoftArray) ToIdentityProviderMicrosoftArrayOutputWithContext(ctx context.Context) IdentityProviderMicrosoftArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProviderMicrosoftArrayOutput)
}

// IdentityProviderMicrosoftMapInput is an input type that accepts IdentityProviderMicrosoftMap and IdentityProviderMicrosoftMapOutput values.
// You can construct a concrete instance of `IdentityProviderMicrosoftMapInput` via:
//
//	IdentityProviderMicrosoftMap{ "key": IdentityProviderMicrosoftArgs{...} }
type IdentityProviderMicrosoftMapInput interface {
	pulumi.Input

	ToIdentityProviderMicrosoftMapOutput() IdentityProviderMicrosoftMapOutput
	ToIdentityProviderMicrosoftMapOutputWithContext(context.Context) IdentityProviderMicrosoftMapOutput
}

type IdentityProviderMicrosoftMap map[string]IdentityProviderMicrosoftInput

func (IdentityProviderMicrosoftMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityProviderMicrosoft)(nil)).Elem()
}

func (i IdentityProviderMicrosoftMap) ToIdentityProviderMicrosoftMapOutput() IdentityProviderMicrosoftMapOutput {
	return i.ToIdentityProviderMicrosoftMapOutputWithContext(context.Background())
}

func (i IdentityProviderMicrosoftMap) ToIdentityProviderMicrosoftMapOutputWithContext(ctx context.Context) IdentityProviderMicrosoftMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProviderMicrosoftMapOutput)
}

type IdentityProviderMicrosoftOutput struct{ *pulumi.OutputState }

func (IdentityProviderMicrosoftOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProviderMicrosoft)(nil)).Elem()
}

func (o IdentityProviderMicrosoftOutput) ToIdentityProviderMicrosoftOutput() IdentityProviderMicrosoftOutput {
	return o
}

func (o IdentityProviderMicrosoftOutput) ToIdentityProviderMicrosoftOutputWithContext(ctx context.Context) IdentityProviderMicrosoftOutput {
	return o
}

// The Name of the API Management Service where this Microsoft Identity Provider should be created. Changing this forces a new resource to be created.
func (o IdentityProviderMicrosoftOutput) ApiManagementName() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityProviderMicrosoft) pulumi.StringOutput { return v.ApiManagementName }).(pulumi.StringOutput)
}

// Client Id of the Azure AD Application.
func (o IdentityProviderMicrosoftOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityProviderMicrosoft) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

// Client secret of the Azure AD Application.
func (o IdentityProviderMicrosoftOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityProviderMicrosoft) pulumi.StringOutput { return v.ClientSecret }).(pulumi.StringOutput)
}

// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
func (o IdentityProviderMicrosoftOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityProviderMicrosoft) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

type IdentityProviderMicrosoftArrayOutput struct{ *pulumi.OutputState }

func (IdentityProviderMicrosoftArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityProviderMicrosoft)(nil)).Elem()
}

func (o IdentityProviderMicrosoftArrayOutput) ToIdentityProviderMicrosoftArrayOutput() IdentityProviderMicrosoftArrayOutput {
	return o
}

func (o IdentityProviderMicrosoftArrayOutput) ToIdentityProviderMicrosoftArrayOutputWithContext(ctx context.Context) IdentityProviderMicrosoftArrayOutput {
	return o
}

func (o IdentityProviderMicrosoftArrayOutput) Index(i pulumi.IntInput) IdentityProviderMicrosoftOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IdentityProviderMicrosoft {
		return vs[0].([]*IdentityProviderMicrosoft)[vs[1].(int)]
	}).(IdentityProviderMicrosoftOutput)
}

type IdentityProviderMicrosoftMapOutput struct{ *pulumi.OutputState }

func (IdentityProviderMicrosoftMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityProviderMicrosoft)(nil)).Elem()
}

func (o IdentityProviderMicrosoftMapOutput) ToIdentityProviderMicrosoftMapOutput() IdentityProviderMicrosoftMapOutput {
	return o
}

func (o IdentityProviderMicrosoftMapOutput) ToIdentityProviderMicrosoftMapOutputWithContext(ctx context.Context) IdentityProviderMicrosoftMapOutput {
	return o
}

func (o IdentityProviderMicrosoftMapOutput) MapIndex(k pulumi.StringInput) IdentityProviderMicrosoftOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IdentityProviderMicrosoft {
		return vs[0].(map[string]*IdentityProviderMicrosoft)[vs[1].(string)]
	}).(IdentityProviderMicrosoftOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityProviderMicrosoftInput)(nil)).Elem(), &IdentityProviderMicrosoft{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityProviderMicrosoftArrayInput)(nil)).Elem(), IdentityProviderMicrosoftArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityProviderMicrosoftMapInput)(nil)).Elem(), IdentityProviderMicrosoftMap{})
	pulumi.RegisterOutputType(IdentityProviderMicrosoftOutput{})
	pulumi.RegisterOutputType(IdentityProviderMicrosoftArrayOutput{})
	pulumi.RegisterOutputType(IdentityProviderMicrosoftMapOutput{})
}
