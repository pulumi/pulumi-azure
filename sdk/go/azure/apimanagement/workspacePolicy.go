// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an API Management Workspace Policy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/apimanagement"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resources"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleService, err := apimanagement.NewService(ctx, "example", &apimanagement.ServiceArgs{
//				Name:              pulumi.String("example-apimanagement"),
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//				PublisherName:     pulumi.String("pub1"),
//				PublisherEmail:    pulumi.String("pub1@email.com"),
//				SkuName:           pulumi.String("Premium_1"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleWorkspace, err := apimanagement.NewWorkspace(ctx, "example", &apimanagement.WorkspaceArgs{
//				Name:            pulumi.String("example-workspace"),
//				ApiManagementId: exampleService.ID(),
//				DisplayName:     pulumi.String("my workspace"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = apimanagement.NewWorkspacePolicy(ctx, "example", &apimanagement.WorkspacePolicyArgs{
//				ApiManagementWorkspaceId: exampleWorkspace.ID(),
//				XmlContent: pulumi.String(`<policies>
//	  <inbound>
//	    <find-and-replace from="abc" to="xyz" />
//	  </inbound>
//
// </policies>
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This resource uses the following Azure API Providers:
//
// * `Microsoft.ApiManagement` - 2024-05-01
//
// ## Import
//
// API Management Workspace Policies can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:apimanagement/workspacePolicy:WorkspacePolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.ApiManagement/service/service1/workspaces/workspace1
// ```
type WorkspacePolicy struct {
	pulumi.CustomResourceState

	// Specifies the ID of the API Management Workspace. Changing this forces a new resource to be created.
	ApiManagementWorkspaceId pulumi.StringOutput `pulumi:"apiManagementWorkspaceId"`
	// Specifies the API Management Workspace Policy as an XML string.
	XmlContent pulumi.StringOutput `pulumi:"xmlContent"`
	// Specifies a publicly accessible URL to a policy XML document.
	//
	// > **Note:** Exactly one of `xmlContent` or `xmlLink` must be specified.
	XmlLink pulumi.StringPtrOutput `pulumi:"xmlLink"`
}

// NewWorkspacePolicy registers a new resource with the given unique name, arguments, and options.
func NewWorkspacePolicy(ctx *pulumi.Context,
	name string, args *WorkspacePolicyArgs, opts ...pulumi.ResourceOption) (*WorkspacePolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiManagementWorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'ApiManagementWorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkspacePolicy
	err := ctx.RegisterResource("azure:apimanagement/workspacePolicy:WorkspacePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspacePolicy gets an existing WorkspacePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspacePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspacePolicyState, opts ...pulumi.ResourceOption) (*WorkspacePolicy, error) {
	var resource WorkspacePolicy
	err := ctx.ReadResource("azure:apimanagement/workspacePolicy:WorkspacePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkspacePolicy resources.
type workspacePolicyState struct {
	// Specifies the ID of the API Management Workspace. Changing this forces a new resource to be created.
	ApiManagementWorkspaceId *string `pulumi:"apiManagementWorkspaceId"`
	// Specifies the API Management Workspace Policy as an XML string.
	XmlContent *string `pulumi:"xmlContent"`
	// Specifies a publicly accessible URL to a policy XML document.
	//
	// > **Note:** Exactly one of `xmlContent` or `xmlLink` must be specified.
	XmlLink *string `pulumi:"xmlLink"`
}

type WorkspacePolicyState struct {
	// Specifies the ID of the API Management Workspace. Changing this forces a new resource to be created.
	ApiManagementWorkspaceId pulumi.StringPtrInput
	// Specifies the API Management Workspace Policy as an XML string.
	XmlContent pulumi.StringPtrInput
	// Specifies a publicly accessible URL to a policy XML document.
	//
	// > **Note:** Exactly one of `xmlContent` or `xmlLink` must be specified.
	XmlLink pulumi.StringPtrInput
}

func (WorkspacePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspacePolicyState)(nil)).Elem()
}

type workspacePolicyArgs struct {
	// Specifies the ID of the API Management Workspace. Changing this forces a new resource to be created.
	ApiManagementWorkspaceId string `pulumi:"apiManagementWorkspaceId"`
	// Specifies the API Management Workspace Policy as an XML string.
	XmlContent *string `pulumi:"xmlContent"`
	// Specifies a publicly accessible URL to a policy XML document.
	//
	// > **Note:** Exactly one of `xmlContent` or `xmlLink` must be specified.
	XmlLink *string `pulumi:"xmlLink"`
}

// The set of arguments for constructing a WorkspacePolicy resource.
type WorkspacePolicyArgs struct {
	// Specifies the ID of the API Management Workspace. Changing this forces a new resource to be created.
	ApiManagementWorkspaceId pulumi.StringInput
	// Specifies the API Management Workspace Policy as an XML string.
	XmlContent pulumi.StringPtrInput
	// Specifies a publicly accessible URL to a policy XML document.
	//
	// > **Note:** Exactly one of `xmlContent` or `xmlLink` must be specified.
	XmlLink pulumi.StringPtrInput
}

func (WorkspacePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspacePolicyArgs)(nil)).Elem()
}

type WorkspacePolicyInput interface {
	pulumi.Input

	ToWorkspacePolicyOutput() WorkspacePolicyOutput
	ToWorkspacePolicyOutputWithContext(ctx context.Context) WorkspacePolicyOutput
}

func (*WorkspacePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspacePolicy)(nil)).Elem()
}

func (i *WorkspacePolicy) ToWorkspacePolicyOutput() WorkspacePolicyOutput {
	return i.ToWorkspacePolicyOutputWithContext(context.Background())
}

func (i *WorkspacePolicy) ToWorkspacePolicyOutputWithContext(ctx context.Context) WorkspacePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspacePolicyOutput)
}

// WorkspacePolicyArrayInput is an input type that accepts WorkspacePolicyArray and WorkspacePolicyArrayOutput values.
// You can construct a concrete instance of `WorkspacePolicyArrayInput` via:
//
//	WorkspacePolicyArray{ WorkspacePolicyArgs{...} }
type WorkspacePolicyArrayInput interface {
	pulumi.Input

	ToWorkspacePolicyArrayOutput() WorkspacePolicyArrayOutput
	ToWorkspacePolicyArrayOutputWithContext(context.Context) WorkspacePolicyArrayOutput
}

type WorkspacePolicyArray []WorkspacePolicyInput

func (WorkspacePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkspacePolicy)(nil)).Elem()
}

func (i WorkspacePolicyArray) ToWorkspacePolicyArrayOutput() WorkspacePolicyArrayOutput {
	return i.ToWorkspacePolicyArrayOutputWithContext(context.Background())
}

func (i WorkspacePolicyArray) ToWorkspacePolicyArrayOutputWithContext(ctx context.Context) WorkspacePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspacePolicyArrayOutput)
}

// WorkspacePolicyMapInput is an input type that accepts WorkspacePolicyMap and WorkspacePolicyMapOutput values.
// You can construct a concrete instance of `WorkspacePolicyMapInput` via:
//
//	WorkspacePolicyMap{ "key": WorkspacePolicyArgs{...} }
type WorkspacePolicyMapInput interface {
	pulumi.Input

	ToWorkspacePolicyMapOutput() WorkspacePolicyMapOutput
	ToWorkspacePolicyMapOutputWithContext(context.Context) WorkspacePolicyMapOutput
}

type WorkspacePolicyMap map[string]WorkspacePolicyInput

func (WorkspacePolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkspacePolicy)(nil)).Elem()
}

func (i WorkspacePolicyMap) ToWorkspacePolicyMapOutput() WorkspacePolicyMapOutput {
	return i.ToWorkspacePolicyMapOutputWithContext(context.Background())
}

func (i WorkspacePolicyMap) ToWorkspacePolicyMapOutputWithContext(ctx context.Context) WorkspacePolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspacePolicyMapOutput)
}

type WorkspacePolicyOutput struct{ *pulumi.OutputState }

func (WorkspacePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspacePolicy)(nil)).Elem()
}

func (o WorkspacePolicyOutput) ToWorkspacePolicyOutput() WorkspacePolicyOutput {
	return o
}

func (o WorkspacePolicyOutput) ToWorkspacePolicyOutputWithContext(ctx context.Context) WorkspacePolicyOutput {
	return o
}

// Specifies the ID of the API Management Workspace. Changing this forces a new resource to be created.
func (o WorkspacePolicyOutput) ApiManagementWorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspacePolicy) pulumi.StringOutput { return v.ApiManagementWorkspaceId }).(pulumi.StringOutput)
}

// Specifies the API Management Workspace Policy as an XML string.
func (o WorkspacePolicyOutput) XmlContent() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspacePolicy) pulumi.StringOutput { return v.XmlContent }).(pulumi.StringOutput)
}

// Specifies a publicly accessible URL to a policy XML document.
//
// > **Note:** Exactly one of `xmlContent` or `xmlLink` must be specified.
func (o WorkspacePolicyOutput) XmlLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspacePolicy) pulumi.StringPtrOutput { return v.XmlLink }).(pulumi.StringPtrOutput)
}

type WorkspacePolicyArrayOutput struct{ *pulumi.OutputState }

func (WorkspacePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkspacePolicy)(nil)).Elem()
}

func (o WorkspacePolicyArrayOutput) ToWorkspacePolicyArrayOutput() WorkspacePolicyArrayOutput {
	return o
}

func (o WorkspacePolicyArrayOutput) ToWorkspacePolicyArrayOutputWithContext(ctx context.Context) WorkspacePolicyArrayOutput {
	return o
}

func (o WorkspacePolicyArrayOutput) Index(i pulumi.IntInput) WorkspacePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkspacePolicy {
		return vs[0].([]*WorkspacePolicy)[vs[1].(int)]
	}).(WorkspacePolicyOutput)
}

type WorkspacePolicyMapOutput struct{ *pulumi.OutputState }

func (WorkspacePolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkspacePolicy)(nil)).Elem()
}

func (o WorkspacePolicyMapOutput) ToWorkspacePolicyMapOutput() WorkspacePolicyMapOutput {
	return o
}

func (o WorkspacePolicyMapOutput) ToWorkspacePolicyMapOutputWithContext(ctx context.Context) WorkspacePolicyMapOutput {
	return o
}

func (o WorkspacePolicyMapOutput) MapIndex(k pulumi.StringInput) WorkspacePolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkspacePolicy {
		return vs[0].(map[string]*WorkspacePolicy)[vs[1].(string)]
	}).(WorkspacePolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspacePolicyInput)(nil)).Elem(), &WorkspacePolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspacePolicyArrayInput)(nil)).Elem(), WorkspacePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspacePolicyMapInput)(nil)).Elem(), WorkspacePolicyMap{})
	pulumi.RegisterOutputType(WorkspacePolicyOutput{})
	pulumi.RegisterOutputType(WorkspacePolicyArrayOutput{})
	pulumi.RegisterOutputType(WorkspacePolicyMapOutput{})
}
