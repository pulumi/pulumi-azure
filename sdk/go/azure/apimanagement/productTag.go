// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an API Management Product tag
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/apimanagement"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleService, err := apimanagement.NewService(ctx, "exampleService", &apimanagement.ServiceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				PublisherName:     pulumi.String("My Company"),
//				PublisherEmail:    pulumi.String("company@terraform.io"),
//				SkuName:           pulumi.String("Developer_1"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleProduct, err := apimanagement.NewProduct(ctx, "exampleProduct", &apimanagement.ProductArgs{
//				ProductId:            pulumi.String("test-product"),
//				ApiManagementName:    exampleService.Name,
//				ResourceGroupName:    exampleResourceGroup.Name,
//				DisplayName:          pulumi.String("Test Product"),
//				SubscriptionRequired: pulumi.Bool(true),
//				ApprovalRequired:     pulumi.Bool(true),
//				Published:            pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = apimanagement.NewTag(ctx, "exampleTag", &apimanagement.TagArgs{
//				ApiManagementId: exampleService.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = apimanagement.NewProductTag(ctx, "exampleProductTag", &apimanagement.ProductTagArgs{
//				ApiManagementProductId: exampleProduct.ProductId,
//				ApiManagementName:      exampleService.Name,
//				ResourceGroupName:      exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// API Management Products can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:apimanagement/productTag:ProductTag example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ApiManagement/service/instance1/products/myproduct/tags/mytag
//
// ```
type ProductTag struct {
	pulumi.CustomResourceState

	// The name of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringOutput `pulumi:"apiManagementName"`
	// The name of the API Management product. Changing this forces a new resource to be created.
	ApiManagementProductId pulumi.StringOutput `pulumi:"apiManagementProductId"`
	// The name which should be used for this API Management Tag. Changing this forces a new API Management Tag to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Resource Group in which the API Management Service should be exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
}

// NewProductTag registers a new resource with the given unique name, arguments, and options.
func NewProductTag(ctx *pulumi.Context,
	name string, args *ProductTagArgs, opts ...pulumi.ResourceOption) (*ProductTag, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiManagementName == nil {
		return nil, errors.New("invalid value for required argument 'ApiManagementName'")
	}
	if args.ApiManagementProductId == nil {
		return nil, errors.New("invalid value for required argument 'ApiManagementProductId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProductTag
	err := ctx.RegisterResource("azure:apimanagement/productTag:ProductTag", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProductTag gets an existing ProductTag resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProductTag(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProductTagState, opts ...pulumi.ResourceOption) (*ProductTag, error) {
	var resource ProductTag
	err := ctx.ReadResource("azure:apimanagement/productTag:ProductTag", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProductTag resources.
type productTagState struct {
	// The name of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementName *string `pulumi:"apiManagementName"`
	// The name of the API Management product. Changing this forces a new resource to be created.
	ApiManagementProductId *string `pulumi:"apiManagementProductId"`
	// The name which should be used for this API Management Tag. Changing this forces a new API Management Tag to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group in which the API Management Service should be exist. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
}

type ProductTagState struct {
	// The name of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringPtrInput
	// The name of the API Management product. Changing this forces a new resource to be created.
	ApiManagementProductId pulumi.StringPtrInput
	// The name which should be used for this API Management Tag. Changing this forces a new API Management Tag to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group in which the API Management Service should be exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
}

func (ProductTagState) ElementType() reflect.Type {
	return reflect.TypeOf((*productTagState)(nil)).Elem()
}

type productTagArgs struct {
	// The name of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementName string `pulumi:"apiManagementName"`
	// The name of the API Management product. Changing this forces a new resource to be created.
	ApiManagementProductId string `pulumi:"apiManagementProductId"`
	// The name which should be used for this API Management Tag. Changing this forces a new API Management Tag to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group in which the API Management Service should be exist. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a ProductTag resource.
type ProductTagArgs struct {
	// The name of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringInput
	// The name of the API Management product. Changing this forces a new resource to be created.
	ApiManagementProductId pulumi.StringInput
	// The name which should be used for this API Management Tag. Changing this forces a new API Management Tag to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group in which the API Management Service should be exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
}

func (ProductTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*productTagArgs)(nil)).Elem()
}

type ProductTagInput interface {
	pulumi.Input

	ToProductTagOutput() ProductTagOutput
	ToProductTagOutputWithContext(ctx context.Context) ProductTagOutput
}

func (*ProductTag) ElementType() reflect.Type {
	return reflect.TypeOf((**ProductTag)(nil)).Elem()
}

func (i *ProductTag) ToProductTagOutput() ProductTagOutput {
	return i.ToProductTagOutputWithContext(context.Background())
}

func (i *ProductTag) ToProductTagOutputWithContext(ctx context.Context) ProductTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductTagOutput)
}

// ProductTagArrayInput is an input type that accepts ProductTagArray and ProductTagArrayOutput values.
// You can construct a concrete instance of `ProductTagArrayInput` via:
//
//	ProductTagArray{ ProductTagArgs{...} }
type ProductTagArrayInput interface {
	pulumi.Input

	ToProductTagArrayOutput() ProductTagArrayOutput
	ToProductTagArrayOutputWithContext(context.Context) ProductTagArrayOutput
}

type ProductTagArray []ProductTagInput

func (ProductTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProductTag)(nil)).Elem()
}

func (i ProductTagArray) ToProductTagArrayOutput() ProductTagArrayOutput {
	return i.ToProductTagArrayOutputWithContext(context.Background())
}

func (i ProductTagArray) ToProductTagArrayOutputWithContext(ctx context.Context) ProductTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductTagArrayOutput)
}

// ProductTagMapInput is an input type that accepts ProductTagMap and ProductTagMapOutput values.
// You can construct a concrete instance of `ProductTagMapInput` via:
//
//	ProductTagMap{ "key": ProductTagArgs{...} }
type ProductTagMapInput interface {
	pulumi.Input

	ToProductTagMapOutput() ProductTagMapOutput
	ToProductTagMapOutputWithContext(context.Context) ProductTagMapOutput
}

type ProductTagMap map[string]ProductTagInput

func (ProductTagMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProductTag)(nil)).Elem()
}

func (i ProductTagMap) ToProductTagMapOutput() ProductTagMapOutput {
	return i.ToProductTagMapOutputWithContext(context.Background())
}

func (i ProductTagMap) ToProductTagMapOutputWithContext(ctx context.Context) ProductTagMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductTagMapOutput)
}

type ProductTagOutput struct{ *pulumi.OutputState }

func (ProductTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProductTag)(nil)).Elem()
}

func (o ProductTagOutput) ToProductTagOutput() ProductTagOutput {
	return o
}

func (o ProductTagOutput) ToProductTagOutputWithContext(ctx context.Context) ProductTagOutput {
	return o
}

// The name of the API Management Service. Changing this forces a new resource to be created.
func (o ProductTagOutput) ApiManagementName() pulumi.StringOutput {
	return o.ApplyT(func(v *ProductTag) pulumi.StringOutput { return v.ApiManagementName }).(pulumi.StringOutput)
}

// The name of the API Management product. Changing this forces a new resource to be created.
func (o ProductTagOutput) ApiManagementProductId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProductTag) pulumi.StringOutput { return v.ApiManagementProductId }).(pulumi.StringOutput)
}

// The name which should be used for this API Management Tag. Changing this forces a new API Management Tag to be created.
func (o ProductTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ProductTag) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the Resource Group in which the API Management Service should be exist. Changing this forces a new resource to be created.
func (o ProductTagOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ProductTag) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

type ProductTagArrayOutput struct{ *pulumi.OutputState }

func (ProductTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProductTag)(nil)).Elem()
}

func (o ProductTagArrayOutput) ToProductTagArrayOutput() ProductTagArrayOutput {
	return o
}

func (o ProductTagArrayOutput) ToProductTagArrayOutputWithContext(ctx context.Context) ProductTagArrayOutput {
	return o
}

func (o ProductTagArrayOutput) Index(i pulumi.IntInput) ProductTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProductTag {
		return vs[0].([]*ProductTag)[vs[1].(int)]
	}).(ProductTagOutput)
}

type ProductTagMapOutput struct{ *pulumi.OutputState }

func (ProductTagMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProductTag)(nil)).Elem()
}

func (o ProductTagMapOutput) ToProductTagMapOutput() ProductTagMapOutput {
	return o
}

func (o ProductTagMapOutput) ToProductTagMapOutputWithContext(ctx context.Context) ProductTagMapOutput {
	return o
}

func (o ProductTagMapOutput) MapIndex(k pulumi.StringInput) ProductTagOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProductTag {
		return vs[0].(map[string]*ProductTag)[vs[1].(string)]
	}).(ProductTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProductTagInput)(nil)).Elem(), &ProductTag{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProductTagArrayInput)(nil)).Elem(), ProductTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProductTagMapInput)(nil)).Elem(), ProductTagMap{})
	pulumi.RegisterOutputType(ProductTagOutput{})
	pulumi.RegisterOutputType(ProductTagArrayOutput{})
	pulumi.RegisterOutputType(ProductTagMapOutput{})
}
