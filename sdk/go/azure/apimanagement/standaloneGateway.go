// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Azure API Management Standalone Gateway.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/apimanagement"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resources"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "example", &network.VirtualNetworkArgs{
//				Name:              pulumi.String("example-network"),
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleSubnet, err := network.NewSubnet(ctx, "example", &network.SubnetArgs{
//				Name:               pulumi.String("example-subnet"),
//				ResourceGroupName:  example.Name,
//				VirtualNetworkName: exampleVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.0.1.0/24"),
//				},
//				Delegations: network.SubnetDelegationArray{
//					&network.SubnetDelegationArgs{
//						Name: pulumi.String("apim-delegation"),
//						ServiceDelegation: &network.SubnetDelegationServiceDelegationArgs{
//							Name: pulumi.String("Microsoft.Web/serverFarms"),
//							Actions: pulumi.StringArray{
//								pulumi.String("Microsoft.Network/virtualNetworks/subnets/action"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = apimanagement.NewStandaloneGateway(ctx, "example", &apimanagement.StandaloneGatewayArgs{
//				Name:               pulumi.String("example-gateway-flexible"),
//				ResourceGroupName:  example.Name,
//				Location:           example.Location,
//				VirtualNetworkType: pulumi.String("External"),
//				BackendSubnetId:    exampleSubnet.ID(),
//				Sku: &apimanagement.StandaloneGatewaySkuArgs{
//					Capacity: pulumi.Int(1),
//					Name:     pulumi.String("WorkspaceGatewayPremium"),
//				},
//				Tags: pulumi.StringMap{
//					"Hello": pulumi.String("World"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This resource uses the following Azure API Providers:
//
// * `Microsoft.ApiManagement` - 2024-05-01
//
// ## Import
//
// API Management Standalone Gateway can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:apimanagement/standaloneGateway:StandaloneGateway example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.ApiManagement/gateways/gateway1
// ```
type StandaloneGateway struct {
	pulumi.CustomResourceState

	// Specifies the subnet ID in which the backend systems are hosted. Changing this forces a new resource to be created.
	BackendSubnetId pulumi.StringPtrOutput `pulumi:"backendSubnetId"`
	// Specifies the Azure Region where the API Management Standalone Gateway should exist. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name which should be used for this API Management Standalone Gateway. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the name of the Resource Group where the API Management Standalone Gateway should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A `sku` block as defined below.
	Sku StandaloneGatewaySkuOutput `pulumi:"sku"`
	// A mapping of tags which should be assigned to the API Management Standalone Gateway. Changing this forces a new resource to be created.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies the type of VPN in which API Management gateway needs to be configured. Possible values are `External` and `Internal`. Changing this forces a new resource to be created.
	VirtualNetworkType pulumi.StringPtrOutput `pulumi:"virtualNetworkType"`
}

// NewStandaloneGateway registers a new resource with the given unique name, arguments, and options.
func NewStandaloneGateway(ctx *pulumi.Context,
	name string, args *StandaloneGatewayArgs, opts ...pulumi.ResourceOption) (*StandaloneGateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Sku == nil {
		return nil, errors.New("invalid value for required argument 'Sku'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StandaloneGateway
	err := ctx.RegisterResource("azure:apimanagement/standaloneGateway:StandaloneGateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStandaloneGateway gets an existing StandaloneGateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStandaloneGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StandaloneGatewayState, opts ...pulumi.ResourceOption) (*StandaloneGateway, error) {
	var resource StandaloneGateway
	err := ctx.ReadResource("azure:apimanagement/standaloneGateway:StandaloneGateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StandaloneGateway resources.
type standaloneGatewayState struct {
	// Specifies the subnet ID in which the backend systems are hosted. Changing this forces a new resource to be created.
	BackendSubnetId *string `pulumi:"backendSubnetId"`
	// Specifies the Azure Region where the API Management Standalone Gateway should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name which should be used for this API Management Standalone Gateway. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies the name of the Resource Group where the API Management Standalone Gateway should exist. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A `sku` block as defined below.
	Sku *StandaloneGatewaySku `pulumi:"sku"`
	// A mapping of tags which should be assigned to the API Management Standalone Gateway. Changing this forces a new resource to be created.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the type of VPN in which API Management gateway needs to be configured. Possible values are `External` and `Internal`. Changing this forces a new resource to be created.
	VirtualNetworkType *string `pulumi:"virtualNetworkType"`
}

type StandaloneGatewayState struct {
	// Specifies the subnet ID in which the backend systems are hosted. Changing this forces a new resource to be created.
	BackendSubnetId pulumi.StringPtrInput
	// Specifies the Azure Region where the API Management Standalone Gateway should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name which should be used for this API Management Standalone Gateway. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies the name of the Resource Group where the API Management Standalone Gateway should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A `sku` block as defined below.
	Sku StandaloneGatewaySkuPtrInput
	// A mapping of tags which should be assigned to the API Management Standalone Gateway. Changing this forces a new resource to be created.
	Tags pulumi.StringMapInput
	// Specifies the type of VPN in which API Management gateway needs to be configured. Possible values are `External` and `Internal`. Changing this forces a new resource to be created.
	VirtualNetworkType pulumi.StringPtrInput
}

func (StandaloneGatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*standaloneGatewayState)(nil)).Elem()
}

type standaloneGatewayArgs struct {
	// Specifies the subnet ID in which the backend systems are hosted. Changing this forces a new resource to be created.
	BackendSubnetId *string `pulumi:"backendSubnetId"`
	// Specifies the Azure Region where the API Management Standalone Gateway should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name which should be used for this API Management Standalone Gateway. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies the name of the Resource Group where the API Management Standalone Gateway should exist. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A `sku` block as defined below.
	Sku StandaloneGatewaySku `pulumi:"sku"`
	// A mapping of tags which should be assigned to the API Management Standalone Gateway. Changing this forces a new resource to be created.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the type of VPN in which API Management gateway needs to be configured. Possible values are `External` and `Internal`. Changing this forces a new resource to be created.
	VirtualNetworkType *string `pulumi:"virtualNetworkType"`
}

// The set of arguments for constructing a StandaloneGateway resource.
type StandaloneGatewayArgs struct {
	// Specifies the subnet ID in which the backend systems are hosted. Changing this forces a new resource to be created.
	BackendSubnetId pulumi.StringPtrInput
	// Specifies the Azure Region where the API Management Standalone Gateway should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name which should be used for this API Management Standalone Gateway. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies the name of the Resource Group where the API Management Standalone Gateway should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A `sku` block as defined below.
	Sku StandaloneGatewaySkuInput
	// A mapping of tags which should be assigned to the API Management Standalone Gateway. Changing this forces a new resource to be created.
	Tags pulumi.StringMapInput
	// Specifies the type of VPN in which API Management gateway needs to be configured. Possible values are `External` and `Internal`. Changing this forces a new resource to be created.
	VirtualNetworkType pulumi.StringPtrInput
}

func (StandaloneGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*standaloneGatewayArgs)(nil)).Elem()
}

type StandaloneGatewayInput interface {
	pulumi.Input

	ToStandaloneGatewayOutput() StandaloneGatewayOutput
	ToStandaloneGatewayOutputWithContext(ctx context.Context) StandaloneGatewayOutput
}

func (*StandaloneGateway) ElementType() reflect.Type {
	return reflect.TypeOf((**StandaloneGateway)(nil)).Elem()
}

func (i *StandaloneGateway) ToStandaloneGatewayOutput() StandaloneGatewayOutput {
	return i.ToStandaloneGatewayOutputWithContext(context.Background())
}

func (i *StandaloneGateway) ToStandaloneGatewayOutputWithContext(ctx context.Context) StandaloneGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandaloneGatewayOutput)
}

// StandaloneGatewayArrayInput is an input type that accepts StandaloneGatewayArray and StandaloneGatewayArrayOutput values.
// You can construct a concrete instance of `StandaloneGatewayArrayInput` via:
//
//	StandaloneGatewayArray{ StandaloneGatewayArgs{...} }
type StandaloneGatewayArrayInput interface {
	pulumi.Input

	ToStandaloneGatewayArrayOutput() StandaloneGatewayArrayOutput
	ToStandaloneGatewayArrayOutputWithContext(context.Context) StandaloneGatewayArrayOutput
}

type StandaloneGatewayArray []StandaloneGatewayInput

func (StandaloneGatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StandaloneGateway)(nil)).Elem()
}

func (i StandaloneGatewayArray) ToStandaloneGatewayArrayOutput() StandaloneGatewayArrayOutput {
	return i.ToStandaloneGatewayArrayOutputWithContext(context.Background())
}

func (i StandaloneGatewayArray) ToStandaloneGatewayArrayOutputWithContext(ctx context.Context) StandaloneGatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandaloneGatewayArrayOutput)
}

// StandaloneGatewayMapInput is an input type that accepts StandaloneGatewayMap and StandaloneGatewayMapOutput values.
// You can construct a concrete instance of `StandaloneGatewayMapInput` via:
//
//	StandaloneGatewayMap{ "key": StandaloneGatewayArgs{...} }
type StandaloneGatewayMapInput interface {
	pulumi.Input

	ToStandaloneGatewayMapOutput() StandaloneGatewayMapOutput
	ToStandaloneGatewayMapOutputWithContext(context.Context) StandaloneGatewayMapOutput
}

type StandaloneGatewayMap map[string]StandaloneGatewayInput

func (StandaloneGatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StandaloneGateway)(nil)).Elem()
}

func (i StandaloneGatewayMap) ToStandaloneGatewayMapOutput() StandaloneGatewayMapOutput {
	return i.ToStandaloneGatewayMapOutputWithContext(context.Background())
}

func (i StandaloneGatewayMap) ToStandaloneGatewayMapOutputWithContext(ctx context.Context) StandaloneGatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandaloneGatewayMapOutput)
}

type StandaloneGatewayOutput struct{ *pulumi.OutputState }

func (StandaloneGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StandaloneGateway)(nil)).Elem()
}

func (o StandaloneGatewayOutput) ToStandaloneGatewayOutput() StandaloneGatewayOutput {
	return o
}

func (o StandaloneGatewayOutput) ToStandaloneGatewayOutputWithContext(ctx context.Context) StandaloneGatewayOutput {
	return o
}

// Specifies the subnet ID in which the backend systems are hosted. Changing this forces a new resource to be created.
func (o StandaloneGatewayOutput) BackendSubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StandaloneGateway) pulumi.StringPtrOutput { return v.BackendSubnetId }).(pulumi.StringPtrOutput)
}

// Specifies the Azure Region where the API Management Standalone Gateway should exist. Changing this forces a new resource to be created.
func (o StandaloneGatewayOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *StandaloneGateway) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name which should be used for this API Management Standalone Gateway. Changing this forces a new resource to be created.
func (o StandaloneGatewayOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StandaloneGateway) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the name of the Resource Group where the API Management Standalone Gateway should exist. Changing this forces a new resource to be created.
func (o StandaloneGatewayOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *StandaloneGateway) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A `sku` block as defined below.
func (o StandaloneGatewayOutput) Sku() StandaloneGatewaySkuOutput {
	return o.ApplyT(func(v *StandaloneGateway) StandaloneGatewaySkuOutput { return v.Sku }).(StandaloneGatewaySkuOutput)
}

// A mapping of tags which should be assigned to the API Management Standalone Gateway. Changing this forces a new resource to be created.
func (o StandaloneGatewayOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StandaloneGateway) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the type of VPN in which API Management gateway needs to be configured. Possible values are `External` and `Internal`. Changing this forces a new resource to be created.
func (o StandaloneGatewayOutput) VirtualNetworkType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StandaloneGateway) pulumi.StringPtrOutput { return v.VirtualNetworkType }).(pulumi.StringPtrOutput)
}

type StandaloneGatewayArrayOutput struct{ *pulumi.OutputState }

func (StandaloneGatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StandaloneGateway)(nil)).Elem()
}

func (o StandaloneGatewayArrayOutput) ToStandaloneGatewayArrayOutput() StandaloneGatewayArrayOutput {
	return o
}

func (o StandaloneGatewayArrayOutput) ToStandaloneGatewayArrayOutputWithContext(ctx context.Context) StandaloneGatewayArrayOutput {
	return o
}

func (o StandaloneGatewayArrayOutput) Index(i pulumi.IntInput) StandaloneGatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StandaloneGateway {
		return vs[0].([]*StandaloneGateway)[vs[1].(int)]
	}).(StandaloneGatewayOutput)
}

type StandaloneGatewayMapOutput struct{ *pulumi.OutputState }

func (StandaloneGatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StandaloneGateway)(nil)).Elem()
}

func (o StandaloneGatewayMapOutput) ToStandaloneGatewayMapOutput() StandaloneGatewayMapOutput {
	return o
}

func (o StandaloneGatewayMapOutput) ToStandaloneGatewayMapOutputWithContext(ctx context.Context) StandaloneGatewayMapOutput {
	return o
}

func (o StandaloneGatewayMapOutput) MapIndex(k pulumi.StringInput) StandaloneGatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StandaloneGateway {
		return vs[0].(map[string]*StandaloneGateway)[vs[1].(string)]
	}).(StandaloneGatewayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StandaloneGatewayInput)(nil)).Elem(), &StandaloneGateway{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandaloneGatewayArrayInput)(nil)).Elem(), StandaloneGatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandaloneGatewayMapInput)(nil)).Elem(), StandaloneGatewayMap{})
	pulumi.RegisterOutputType(StandaloneGatewayOutput{})
	pulumi.RegisterOutputType(StandaloneGatewayArrayOutput{})
	pulumi.RegisterOutputType(StandaloneGatewayMapOutput{})
}
