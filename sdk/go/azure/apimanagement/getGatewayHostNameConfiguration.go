// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing API Management Gateway Host Configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/apimanagement"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleService, err := apimanagement.LookupService(ctx, &apimanagement.LookupServiceArgs{
//				Name:              "example-apim",
//				ResourceGroupName: "example-resources",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleGateway, err := apimanagement.LookupGateway(ctx, &apimanagement.LookupGatewayArgs{
//				Name:            "example-gateway",
//				ApiManagementId: data.Azurerm_api_management.Main.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleGatewayHostNameConfiguration, err := apimanagement.LookupGatewayHostNameConfiguration(ctx, &apimanagement.LookupGatewayHostNameConfigurationArgs{
//				Name:            "example-host-configuration",
//				ApiManagementId: exampleService.Id,
//				GatewayName:     exampleGateway.Name,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("hostName", exampleGatewayHostNameConfiguration.HostName)
//			return nil
//		})
//	}
//
// ```
func LookupGatewayHostNameConfiguration(ctx *pulumi.Context, args *LookupGatewayHostNameConfigurationArgs, opts ...pulumi.InvokeOption) (*LookupGatewayHostNameConfigurationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupGatewayHostNameConfigurationResult
	err := ctx.Invoke("azure:apimanagement/getGatewayHostNameConfiguration:getGatewayHostNameConfiguration", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGatewayHostNameConfiguration.
type LookupGatewayHostNameConfigurationArgs struct {
	// The ID of the API Management Service.
	ApiManagementId string `pulumi:"apiManagementId"`
	// The name of the API Management Gateway.
	// *
	GatewayName string `pulumi:"gatewayName"`
	// The name of the API Management Gateway Host Name Configuration.
	Name string `pulumi:"name"`
}

// A collection of values returned by getGatewayHostNameConfiguration.
type LookupGatewayHostNameConfigurationResult struct {
	ApiManagementId string `pulumi:"apiManagementId"`
	// The ID of the certificate used for TLS connection establishment.
	CertificateId string `pulumi:"certificateId"`
	GatewayName   string `pulumi:"gatewayName"`
	// The host name used for the API Management Gateway Host Name Configuration.
	HostName string `pulumi:"hostName"`
	// Whether HTTP/2.0 is supported.
	Http2Enabled bool `pulumi:"http2Enabled"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// Whether the API Management Gateway requests a client certificate.
	RequestClientCertificateEnabled bool `pulumi:"requestClientCertificateEnabled"`
	// Whether TLS 1.0 is supported.
	Tls10Enabled bool `pulumi:"tls10Enabled"`
	// Whether TLS 1.1 is supported.
	Tls11Enabled bool `pulumi:"tls11Enabled"`
}

func LookupGatewayHostNameConfigurationOutput(ctx *pulumi.Context, args LookupGatewayHostNameConfigurationOutputArgs, opts ...pulumi.InvokeOption) LookupGatewayHostNameConfigurationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupGatewayHostNameConfigurationResult, error) {
			args := v.(LookupGatewayHostNameConfigurationArgs)
			r, err := LookupGatewayHostNameConfiguration(ctx, &args, opts...)
			var s LookupGatewayHostNameConfigurationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupGatewayHostNameConfigurationResultOutput)
}

// A collection of arguments for invoking getGatewayHostNameConfiguration.
type LookupGatewayHostNameConfigurationOutputArgs struct {
	// The ID of the API Management Service.
	ApiManagementId pulumi.StringInput `pulumi:"apiManagementId"`
	// The name of the API Management Gateway.
	// *
	GatewayName pulumi.StringInput `pulumi:"gatewayName"`
	// The name of the API Management Gateway Host Name Configuration.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupGatewayHostNameConfigurationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGatewayHostNameConfigurationArgs)(nil)).Elem()
}

// A collection of values returned by getGatewayHostNameConfiguration.
type LookupGatewayHostNameConfigurationResultOutput struct{ *pulumi.OutputState }

func (LookupGatewayHostNameConfigurationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGatewayHostNameConfigurationResult)(nil)).Elem()
}

func (o LookupGatewayHostNameConfigurationResultOutput) ToLookupGatewayHostNameConfigurationResultOutput() LookupGatewayHostNameConfigurationResultOutput {
	return o
}

func (o LookupGatewayHostNameConfigurationResultOutput) ToLookupGatewayHostNameConfigurationResultOutputWithContext(ctx context.Context) LookupGatewayHostNameConfigurationResultOutput {
	return o
}

func (o LookupGatewayHostNameConfigurationResultOutput) ApiManagementId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGatewayHostNameConfigurationResult) string { return v.ApiManagementId }).(pulumi.StringOutput)
}

// The ID of the certificate used for TLS connection establishment.
func (o LookupGatewayHostNameConfigurationResultOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGatewayHostNameConfigurationResult) string { return v.CertificateId }).(pulumi.StringOutput)
}

func (o LookupGatewayHostNameConfigurationResultOutput) GatewayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGatewayHostNameConfigurationResult) string { return v.GatewayName }).(pulumi.StringOutput)
}

// The host name used for the API Management Gateway Host Name Configuration.
func (o LookupGatewayHostNameConfigurationResultOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGatewayHostNameConfigurationResult) string { return v.HostName }).(pulumi.StringOutput)
}

// Whether HTTP/2.0 is supported.
func (o LookupGatewayHostNameConfigurationResultOutput) Http2Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupGatewayHostNameConfigurationResult) bool { return v.Http2Enabled }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupGatewayHostNameConfigurationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGatewayHostNameConfigurationResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupGatewayHostNameConfigurationResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGatewayHostNameConfigurationResult) string { return v.Name }).(pulumi.StringOutput)
}

// Whether the API Management Gateway requests a client certificate.
func (o LookupGatewayHostNameConfigurationResultOutput) RequestClientCertificateEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupGatewayHostNameConfigurationResult) bool { return v.RequestClientCertificateEnabled }).(pulumi.BoolOutput)
}

// Whether TLS 1.0 is supported.
func (o LookupGatewayHostNameConfigurationResultOutput) Tls10Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupGatewayHostNameConfigurationResult) bool { return v.Tls10Enabled }).(pulumi.BoolOutput)
}

// Whether TLS 1.1 is supported.
func (o LookupGatewayHostNameConfigurationResultOutput) Tls11Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupGatewayHostNameConfigurationResult) bool { return v.Tls11Enabled }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGatewayHostNameConfigurationResultOutput{})
}
