// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an API Management User.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/api_management_user.html.markdown.
type User struct {
	s *pulumi.ResourceState
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOpt) (*User, error) {
	if args == nil || args.ApiManagementName == nil {
		return nil, errors.New("missing required argument 'ApiManagementName'")
	}
	if args == nil || args.Email == nil {
		return nil, errors.New("missing required argument 'Email'")
	}
	if args == nil || args.FirstName == nil {
		return nil, errors.New("missing required argument 'FirstName'")
	}
	if args == nil || args.LastName == nil {
		return nil, errors.New("missing required argument 'LastName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.UserId == nil {
		return nil, errors.New("missing required argument 'UserId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["apiManagementName"] = nil
		inputs["confirmation"] = nil
		inputs["email"] = nil
		inputs["firstName"] = nil
		inputs["lastName"] = nil
		inputs["note"] = nil
		inputs["password"] = nil
		inputs["resourceGroupName"] = nil
		inputs["state"] = nil
		inputs["userId"] = nil
	} else {
		inputs["apiManagementName"] = args.ApiManagementName
		inputs["confirmation"] = args.Confirmation
		inputs["email"] = args.Email
		inputs["firstName"] = args.FirstName
		inputs["lastName"] = args.LastName
		inputs["note"] = args.Note
		inputs["password"] = args.Password
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["state"] = args.State
		inputs["userId"] = args.UserId
	}
	s, err := ctx.RegisterResource("azure:apimanagement/user:User", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &User{s: s}, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.ID, state *UserState, opts ...pulumi.ResourceOpt) (*User, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["apiManagementName"] = state.ApiManagementName
		inputs["confirmation"] = state.Confirmation
		inputs["email"] = state.Email
		inputs["firstName"] = state.FirstName
		inputs["lastName"] = state.LastName
		inputs["note"] = state.Note
		inputs["password"] = state.Password
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["state"] = state.State
		inputs["userId"] = state.UserId
	}
	s, err := ctx.ReadResource("azure:apimanagement/user:User", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &User{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *User) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *User) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The name of the API Management Service in which the User should be created. Changing this forces a new resource to be created.
func (r *User) ApiManagementName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["apiManagementName"])
}

// The kind of confirmation email which will be sent to this user. Possible values are `invite` and `signup`. Changing this forces a new resource to be created.
func (r *User) Confirmation() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["confirmation"])
}

// The email address associated with this user.
func (r *User) Email() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["email"])
}

// The first name for this user.
func (r *User) FirstName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["firstName"])
}

// The last name for this user.
func (r *User) LastName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["lastName"])
}

// A note about this user.
func (r *User) Note() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["note"])
}

// The password associated with this user.
func (r *User) Password() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["password"])
}

// The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
func (r *User) ResourceGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// The state of this user. Possible values are `active`, `blocked` and `pending`.
func (r *User) State() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["state"])
}

// The Identifier for this User, which must be unique within the API Management Service. Changing this forces a new resource to be created.
func (r *User) UserId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["userId"])
}

// Input properties used for looking up and filtering User resources.
type UserState struct {
	// The name of the API Management Service in which the User should be created. Changing this forces a new resource to be created.
	ApiManagementName interface{}
	// The kind of confirmation email which will be sent to this user. Possible values are `invite` and `signup`. Changing this forces a new resource to be created.
	Confirmation interface{}
	// The email address associated with this user.
	Email interface{}
	// The first name for this user.
	FirstName interface{}
	// The last name for this user.
	LastName interface{}
	// A note about this user.
	Note interface{}
	// The password associated with this user.
	Password interface{}
	// The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// The state of this user. Possible values are `active`, `blocked` and `pending`.
	State interface{}
	// The Identifier for this User, which must be unique within the API Management Service. Changing this forces a new resource to be created.
	UserId interface{}
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// The name of the API Management Service in which the User should be created. Changing this forces a new resource to be created.
	ApiManagementName interface{}
	// The kind of confirmation email which will be sent to this user. Possible values are `invite` and `signup`. Changing this forces a new resource to be created.
	Confirmation interface{}
	// The email address associated with this user.
	Email interface{}
	// The first name for this user.
	FirstName interface{}
	// The last name for this user.
	LastName interface{}
	// A note about this user.
	Note interface{}
	// The password associated with this user.
	Password interface{}
	// The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// The state of this user. Possible values are `active`, `blocked` and `pending`.
	State interface{}
	// The Identifier for this User, which must be unique within the API Management Service. Changing this forces a new resource to be created.
	UserId interface{}
}
