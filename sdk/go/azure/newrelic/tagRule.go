// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package newrelic

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Azure Native New Relic Tag Rule.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/newrelic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("East US"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleMonitor, err := newrelic.NewMonitor(ctx, "exampleMonitor", &newrelic.MonitorArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				Plan: &newrelic.MonitorPlanArgs{
//					EffectiveDate: pulumi.String("2023-06-06T00:00:00Z"),
//				},
//				User: &newrelic.MonitorUserArgs{
//					Email:       pulumi.String("user@example.com"),
//					FirstName:   pulumi.String("Example"),
//					LastName:    pulumi.String("User"),
//					PhoneNumber: pulumi.String("+12313803556"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = newrelic.NewTagRule(ctx, "exampleTagRule", &newrelic.TagRuleArgs{
//				MonitorId:                      exampleMonitor.ID(),
//				AzureActiveDirectoryLogEnabled: pulumi.Bool(true),
//				ActivityLogEnabled:             pulumi.Bool(true),
//				MetricEnabled:                  pulumi.Bool(true),
//				SubscriptionLogEnabled:         pulumi.Bool(true),
//				LogTagFilters: newrelic.TagRuleLogTagFilterArray{
//					&newrelic.TagRuleLogTagFilterArgs{
//						Name:   pulumi.String("key"),
//						Action: pulumi.String("Include"),
//						Value:  pulumi.String("value"),
//					},
//				},
//				MetricTagFilters: newrelic.TagRuleMetricTagFilterArray{
//					&newrelic.TagRuleMetricTagFilterArgs{
//						Name:   pulumi.String("key"),
//						Action: pulumi.String("Exclude"),
//						Value:  pulumi.String("value"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Azure Native New Relic Tag Rule can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:newrelic/tagRule:TagRule example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/NewRelic.Observability/monitors/monitor1/tagRules/ruleSet1
//
// ```
type TagRule struct {
	pulumi.CustomResourceState

	// Whether activity logs from Azure resources should be sent for the Monitor resource. Defaults to `false`.
	ActivityLogEnabled pulumi.BoolPtrOutput `pulumi:"activityLogEnabled"`
	// Whether Azure Active Directory logs should be sent for the Monitor resource. Defaults to `false`.
	AzureActiveDirectoryLogEnabled pulumi.BoolPtrOutput `pulumi:"azureActiveDirectoryLogEnabled"`
	// A `logTagFilter` block as defined below.
	LogTagFilters TagRuleLogTagFilterArrayOutput `pulumi:"logTagFilters"`
	// Whether metrics should be sent for the Monitor resource. Defaults to `false`.
	MetricEnabled pulumi.BoolPtrOutput `pulumi:"metricEnabled"`
	// A `metricTagFilter` block as defined below.
	MetricTagFilters TagRuleMetricTagFilterArrayOutput `pulumi:"metricTagFilters"`
	// Specifies the ID of the New Relic Monitor this Tag Rule should be created within. Changing this forces a new Azure Native New Relic Tag Rule to be created.
	MonitorId pulumi.StringOutput `pulumi:"monitorId"`
	// Whether subscription logs should be sent for the Monitor resource. Defaults to `false`.
	SubscriptionLogEnabled pulumi.BoolPtrOutput `pulumi:"subscriptionLogEnabled"`
}

// NewTagRule registers a new resource with the given unique name, arguments, and options.
func NewTagRule(ctx *pulumi.Context,
	name string, args *TagRuleArgs, opts ...pulumi.ResourceOption) (*TagRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MonitorId == nil {
		return nil, errors.New("invalid value for required argument 'MonitorId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TagRule
	err := ctx.RegisterResource("azure:newrelic/tagRule:TagRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTagRule gets an existing TagRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTagRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TagRuleState, opts ...pulumi.ResourceOption) (*TagRule, error) {
	var resource TagRule
	err := ctx.ReadResource("azure:newrelic/tagRule:TagRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TagRule resources.
type tagRuleState struct {
	// Whether activity logs from Azure resources should be sent for the Monitor resource. Defaults to `false`.
	ActivityLogEnabled *bool `pulumi:"activityLogEnabled"`
	// Whether Azure Active Directory logs should be sent for the Monitor resource. Defaults to `false`.
	AzureActiveDirectoryLogEnabled *bool `pulumi:"azureActiveDirectoryLogEnabled"`
	// A `logTagFilter` block as defined below.
	LogTagFilters []TagRuleLogTagFilter `pulumi:"logTagFilters"`
	// Whether metrics should be sent for the Monitor resource. Defaults to `false`.
	MetricEnabled *bool `pulumi:"metricEnabled"`
	// A `metricTagFilter` block as defined below.
	MetricTagFilters []TagRuleMetricTagFilter `pulumi:"metricTagFilters"`
	// Specifies the ID of the New Relic Monitor this Tag Rule should be created within. Changing this forces a new Azure Native New Relic Tag Rule to be created.
	MonitorId *string `pulumi:"monitorId"`
	// Whether subscription logs should be sent for the Monitor resource. Defaults to `false`.
	SubscriptionLogEnabled *bool `pulumi:"subscriptionLogEnabled"`
}

type TagRuleState struct {
	// Whether activity logs from Azure resources should be sent for the Monitor resource. Defaults to `false`.
	ActivityLogEnabled pulumi.BoolPtrInput
	// Whether Azure Active Directory logs should be sent for the Monitor resource. Defaults to `false`.
	AzureActiveDirectoryLogEnabled pulumi.BoolPtrInput
	// A `logTagFilter` block as defined below.
	LogTagFilters TagRuleLogTagFilterArrayInput
	// Whether metrics should be sent for the Monitor resource. Defaults to `false`.
	MetricEnabled pulumi.BoolPtrInput
	// A `metricTagFilter` block as defined below.
	MetricTagFilters TagRuleMetricTagFilterArrayInput
	// Specifies the ID of the New Relic Monitor this Tag Rule should be created within. Changing this forces a new Azure Native New Relic Tag Rule to be created.
	MonitorId pulumi.StringPtrInput
	// Whether subscription logs should be sent for the Monitor resource. Defaults to `false`.
	SubscriptionLogEnabled pulumi.BoolPtrInput
}

func (TagRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*tagRuleState)(nil)).Elem()
}

type tagRuleArgs struct {
	// Whether activity logs from Azure resources should be sent for the Monitor resource. Defaults to `false`.
	ActivityLogEnabled *bool `pulumi:"activityLogEnabled"`
	// Whether Azure Active Directory logs should be sent for the Monitor resource. Defaults to `false`.
	AzureActiveDirectoryLogEnabled *bool `pulumi:"azureActiveDirectoryLogEnabled"`
	// A `logTagFilter` block as defined below.
	LogTagFilters []TagRuleLogTagFilter `pulumi:"logTagFilters"`
	// Whether metrics should be sent for the Monitor resource. Defaults to `false`.
	MetricEnabled *bool `pulumi:"metricEnabled"`
	// A `metricTagFilter` block as defined below.
	MetricTagFilters []TagRuleMetricTagFilter `pulumi:"metricTagFilters"`
	// Specifies the ID of the New Relic Monitor this Tag Rule should be created within. Changing this forces a new Azure Native New Relic Tag Rule to be created.
	MonitorId string `pulumi:"monitorId"`
	// Whether subscription logs should be sent for the Monitor resource. Defaults to `false`.
	SubscriptionLogEnabled *bool `pulumi:"subscriptionLogEnabled"`
}

// The set of arguments for constructing a TagRule resource.
type TagRuleArgs struct {
	// Whether activity logs from Azure resources should be sent for the Monitor resource. Defaults to `false`.
	ActivityLogEnabled pulumi.BoolPtrInput
	// Whether Azure Active Directory logs should be sent for the Monitor resource. Defaults to `false`.
	AzureActiveDirectoryLogEnabled pulumi.BoolPtrInput
	// A `logTagFilter` block as defined below.
	LogTagFilters TagRuleLogTagFilterArrayInput
	// Whether metrics should be sent for the Monitor resource. Defaults to `false`.
	MetricEnabled pulumi.BoolPtrInput
	// A `metricTagFilter` block as defined below.
	MetricTagFilters TagRuleMetricTagFilterArrayInput
	// Specifies the ID of the New Relic Monitor this Tag Rule should be created within. Changing this forces a new Azure Native New Relic Tag Rule to be created.
	MonitorId pulumi.StringInput
	// Whether subscription logs should be sent for the Monitor resource. Defaults to `false`.
	SubscriptionLogEnabled pulumi.BoolPtrInput
}

func (TagRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tagRuleArgs)(nil)).Elem()
}

type TagRuleInput interface {
	pulumi.Input

	ToTagRuleOutput() TagRuleOutput
	ToTagRuleOutputWithContext(ctx context.Context) TagRuleOutput
}

func (*TagRule) ElementType() reflect.Type {
	return reflect.TypeOf((**TagRule)(nil)).Elem()
}

func (i *TagRule) ToTagRuleOutput() TagRuleOutput {
	return i.ToTagRuleOutputWithContext(context.Background())
}

func (i *TagRule) ToTagRuleOutputWithContext(ctx context.Context) TagRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagRuleOutput)
}

// TagRuleArrayInput is an input type that accepts TagRuleArray and TagRuleArrayOutput values.
// You can construct a concrete instance of `TagRuleArrayInput` via:
//
//	TagRuleArray{ TagRuleArgs{...} }
type TagRuleArrayInput interface {
	pulumi.Input

	ToTagRuleArrayOutput() TagRuleArrayOutput
	ToTagRuleArrayOutputWithContext(context.Context) TagRuleArrayOutput
}

type TagRuleArray []TagRuleInput

func (TagRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TagRule)(nil)).Elem()
}

func (i TagRuleArray) ToTagRuleArrayOutput() TagRuleArrayOutput {
	return i.ToTagRuleArrayOutputWithContext(context.Background())
}

func (i TagRuleArray) ToTagRuleArrayOutputWithContext(ctx context.Context) TagRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagRuleArrayOutput)
}

// TagRuleMapInput is an input type that accepts TagRuleMap and TagRuleMapOutput values.
// You can construct a concrete instance of `TagRuleMapInput` via:
//
//	TagRuleMap{ "key": TagRuleArgs{...} }
type TagRuleMapInput interface {
	pulumi.Input

	ToTagRuleMapOutput() TagRuleMapOutput
	ToTagRuleMapOutputWithContext(context.Context) TagRuleMapOutput
}

type TagRuleMap map[string]TagRuleInput

func (TagRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TagRule)(nil)).Elem()
}

func (i TagRuleMap) ToTagRuleMapOutput() TagRuleMapOutput {
	return i.ToTagRuleMapOutputWithContext(context.Background())
}

func (i TagRuleMap) ToTagRuleMapOutputWithContext(ctx context.Context) TagRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagRuleMapOutput)
}

type TagRuleOutput struct{ *pulumi.OutputState }

func (TagRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TagRule)(nil)).Elem()
}

func (o TagRuleOutput) ToTagRuleOutput() TagRuleOutput {
	return o
}

func (o TagRuleOutput) ToTagRuleOutputWithContext(ctx context.Context) TagRuleOutput {
	return o
}

// Whether activity logs from Azure resources should be sent for the Monitor resource. Defaults to `false`.
func (o TagRuleOutput) ActivityLogEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TagRule) pulumi.BoolPtrOutput { return v.ActivityLogEnabled }).(pulumi.BoolPtrOutput)
}

// Whether Azure Active Directory logs should be sent for the Monitor resource. Defaults to `false`.
func (o TagRuleOutput) AzureActiveDirectoryLogEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TagRule) pulumi.BoolPtrOutput { return v.AzureActiveDirectoryLogEnabled }).(pulumi.BoolPtrOutput)
}

// A `logTagFilter` block as defined below.
func (o TagRuleOutput) LogTagFilters() TagRuleLogTagFilterArrayOutput {
	return o.ApplyT(func(v *TagRule) TagRuleLogTagFilterArrayOutput { return v.LogTagFilters }).(TagRuleLogTagFilterArrayOutput)
}

// Whether metrics should be sent for the Monitor resource. Defaults to `false`.
func (o TagRuleOutput) MetricEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TagRule) pulumi.BoolPtrOutput { return v.MetricEnabled }).(pulumi.BoolPtrOutput)
}

// A `metricTagFilter` block as defined below.
func (o TagRuleOutput) MetricTagFilters() TagRuleMetricTagFilterArrayOutput {
	return o.ApplyT(func(v *TagRule) TagRuleMetricTagFilterArrayOutput { return v.MetricTagFilters }).(TagRuleMetricTagFilterArrayOutput)
}

// Specifies the ID of the New Relic Monitor this Tag Rule should be created within. Changing this forces a new Azure Native New Relic Tag Rule to be created.
func (o TagRuleOutput) MonitorId() pulumi.StringOutput {
	return o.ApplyT(func(v *TagRule) pulumi.StringOutput { return v.MonitorId }).(pulumi.StringOutput)
}

// Whether subscription logs should be sent for the Monitor resource. Defaults to `false`.
func (o TagRuleOutput) SubscriptionLogEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TagRule) pulumi.BoolPtrOutput { return v.SubscriptionLogEnabled }).(pulumi.BoolPtrOutput)
}

type TagRuleArrayOutput struct{ *pulumi.OutputState }

func (TagRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TagRule)(nil)).Elem()
}

func (o TagRuleArrayOutput) ToTagRuleArrayOutput() TagRuleArrayOutput {
	return o
}

func (o TagRuleArrayOutput) ToTagRuleArrayOutputWithContext(ctx context.Context) TagRuleArrayOutput {
	return o
}

func (o TagRuleArrayOutput) Index(i pulumi.IntInput) TagRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TagRule {
		return vs[0].([]*TagRule)[vs[1].(int)]
	}).(TagRuleOutput)
}

type TagRuleMapOutput struct{ *pulumi.OutputState }

func (TagRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TagRule)(nil)).Elem()
}

func (o TagRuleMapOutput) ToTagRuleMapOutput() TagRuleMapOutput {
	return o
}

func (o TagRuleMapOutput) ToTagRuleMapOutputWithContext(ctx context.Context) TagRuleMapOutput {
	return o
}

func (o TagRuleMapOutput) MapIndex(k pulumi.StringInput) TagRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TagRule {
		return vs[0].(map[string]*TagRule)[vs[1].(string)]
	}).(TagRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TagRuleInput)(nil)).Elem(), &TagRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagRuleArrayInput)(nil)).Elem(), TagRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagRuleMapInput)(nil)).Elem(), TagRuleMap{})
	pulumi.RegisterOutputType(TagRuleOutput{})
	pulumi.RegisterOutputType(TagRuleArrayOutput{})
	pulumi.RegisterOutputType(TagRuleMapOutput{})
}
