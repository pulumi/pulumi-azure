// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package newrelic

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Azure Native New Relic Monitor.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/newrelic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("East US"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = newrelic.NewMonitor(ctx, "exampleMonitor", &newrelic.MonitorArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				Plan: &newrelic.MonitorPlanArgs{
//					EffectiveDate: pulumi.String("2023-06-06T00:00:00Z"),
//				},
//				User: &newrelic.MonitorUserArgs{
//					Email:       pulumi.String("user@example.com"),
//					FirstName:   pulumi.String("Example"),
//					LastName:    pulumi.String("User"),
//					PhoneNumber: pulumi.String("+12313803556"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Azure Native New Relic Monitor can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:newrelic/monitor:Monitor example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/NewRelic.Observability/monitors/monitor1
//
// ```
type Monitor struct {
	pulumi.CustomResourceState

	// Specifies the source of account creation. Possible values are `LIFTR` and `NEWRELIC`. Defaults to `LIFTR`. Changing this forces a new Azure Native New Relic Monitor to be created.
	AccountCreationSource pulumi.StringPtrOutput `pulumi:"accountCreationSource"`
	// Specifies the account id. Changing this forces a new Azure Native New Relic Monitor to be created.
	//
	// > **NOTE:** The value of `accountId` must come from an Azure Native New Relic Monitor instance of another different subscription.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Specifies the ingestion key of account. Changing this forces a new Azure Native New Relic Monitor to be created.
	IngestionKey pulumi.StringPtrOutput `pulumi:"ingestionKey"`
	// Specifies the Azure Region where the Azure Native New Relic Monitor should exist. Changing this forces a new Azure Native New Relic Monitor to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name which should be used for this Azure Native New Relic Monitor. Changing this forces a new Azure Native New Relic Monitor to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the source of org creation. Possible values are `LIFTR` and `NEWRELIC`. Defaults to `LIFTR`. Changing this forces a new Azure Native New Relic Monitor to be created.
	OrgCreationSource pulumi.StringPtrOutput `pulumi:"orgCreationSource"`
	// Specifies the organization id. Changing this forces a new Azure Native New Relic Monitor to be created.
	//
	// > **NOTE:** The value of `organizationId` must come from an Azure Native New Relic Monitor instance of another different subscription.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// A `plan` block as defined below. Changing this forces a new Azure Native New Relic Monitor to be created.
	Plan MonitorPlanOutput `pulumi:"plan"`
	// Specifies the name of the Resource Group where the Azure Native New Relic Monitor should exist. Changing this forces a new Azure Native New Relic Monitor to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A `user` block as defined below. Changing this forces a new Azure Native New Relic Monitor to be created.
	User MonitorUserOutput `pulumi:"user"`
	// Specifies the user id. Changing this forces a new Azure Native New Relic Monitor to be created.
	UserId pulumi.StringPtrOutput `pulumi:"userId"`
}

// NewMonitor registers a new resource with the given unique name, arguments, and options.
func NewMonitor(ctx *pulumi.Context,
	name string, args *MonitorArgs, opts ...pulumi.ResourceOption) (*Monitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Plan == nil {
		return nil, errors.New("invalid value for required argument 'Plan'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.User == nil {
		return nil, errors.New("invalid value for required argument 'User'")
	}
	if args.IngestionKey != nil {
		args.IngestionKey = pulumi.ToSecret(args.IngestionKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"ingestionKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Monitor
	err := ctx.RegisterResource("azure:newrelic/monitor:Monitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitor gets an existing Monitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitorState, opts ...pulumi.ResourceOption) (*Monitor, error) {
	var resource Monitor
	err := ctx.ReadResource("azure:newrelic/monitor:Monitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Monitor resources.
type monitorState struct {
	// Specifies the source of account creation. Possible values are `LIFTR` and `NEWRELIC`. Defaults to `LIFTR`. Changing this forces a new Azure Native New Relic Monitor to be created.
	AccountCreationSource *string `pulumi:"accountCreationSource"`
	// Specifies the account id. Changing this forces a new Azure Native New Relic Monitor to be created.
	//
	// > **NOTE:** The value of `accountId` must come from an Azure Native New Relic Monitor instance of another different subscription.
	AccountId *string `pulumi:"accountId"`
	// Specifies the ingestion key of account. Changing this forces a new Azure Native New Relic Monitor to be created.
	IngestionKey *string `pulumi:"ingestionKey"`
	// Specifies the Azure Region where the Azure Native New Relic Monitor should exist. Changing this forces a new Azure Native New Relic Monitor to be created.
	Location *string `pulumi:"location"`
	// Specifies the name which should be used for this Azure Native New Relic Monitor. Changing this forces a new Azure Native New Relic Monitor to be created.
	Name *string `pulumi:"name"`
	// Specifies the source of org creation. Possible values are `LIFTR` and `NEWRELIC`. Defaults to `LIFTR`. Changing this forces a new Azure Native New Relic Monitor to be created.
	OrgCreationSource *string `pulumi:"orgCreationSource"`
	// Specifies the organization id. Changing this forces a new Azure Native New Relic Monitor to be created.
	//
	// > **NOTE:** The value of `organizationId` must come from an Azure Native New Relic Monitor instance of another different subscription.
	OrganizationId *string `pulumi:"organizationId"`
	// A `plan` block as defined below. Changing this forces a new Azure Native New Relic Monitor to be created.
	Plan *MonitorPlan `pulumi:"plan"`
	// Specifies the name of the Resource Group where the Azure Native New Relic Monitor should exist. Changing this forces a new Azure Native New Relic Monitor to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A `user` block as defined below. Changing this forces a new Azure Native New Relic Monitor to be created.
	User *MonitorUser `pulumi:"user"`
	// Specifies the user id. Changing this forces a new Azure Native New Relic Monitor to be created.
	UserId *string `pulumi:"userId"`
}

type MonitorState struct {
	// Specifies the source of account creation. Possible values are `LIFTR` and `NEWRELIC`. Defaults to `LIFTR`. Changing this forces a new Azure Native New Relic Monitor to be created.
	AccountCreationSource pulumi.StringPtrInput
	// Specifies the account id. Changing this forces a new Azure Native New Relic Monitor to be created.
	//
	// > **NOTE:** The value of `accountId` must come from an Azure Native New Relic Monitor instance of another different subscription.
	AccountId pulumi.StringPtrInput
	// Specifies the ingestion key of account. Changing this forces a new Azure Native New Relic Monitor to be created.
	IngestionKey pulumi.StringPtrInput
	// Specifies the Azure Region where the Azure Native New Relic Monitor should exist. Changing this forces a new Azure Native New Relic Monitor to be created.
	Location pulumi.StringPtrInput
	// Specifies the name which should be used for this Azure Native New Relic Monitor. Changing this forces a new Azure Native New Relic Monitor to be created.
	Name pulumi.StringPtrInput
	// Specifies the source of org creation. Possible values are `LIFTR` and `NEWRELIC`. Defaults to `LIFTR`. Changing this forces a new Azure Native New Relic Monitor to be created.
	OrgCreationSource pulumi.StringPtrInput
	// Specifies the organization id. Changing this forces a new Azure Native New Relic Monitor to be created.
	//
	// > **NOTE:** The value of `organizationId` must come from an Azure Native New Relic Monitor instance of another different subscription.
	OrganizationId pulumi.StringPtrInput
	// A `plan` block as defined below. Changing this forces a new Azure Native New Relic Monitor to be created.
	Plan MonitorPlanPtrInput
	// Specifies the name of the Resource Group where the Azure Native New Relic Monitor should exist. Changing this forces a new Azure Native New Relic Monitor to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A `user` block as defined below. Changing this forces a new Azure Native New Relic Monitor to be created.
	User MonitorUserPtrInput
	// Specifies the user id. Changing this forces a new Azure Native New Relic Monitor to be created.
	UserId pulumi.StringPtrInput
}

func (MonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitorState)(nil)).Elem()
}

type monitorArgs struct {
	// Specifies the source of account creation. Possible values are `LIFTR` and `NEWRELIC`. Defaults to `LIFTR`. Changing this forces a new Azure Native New Relic Monitor to be created.
	AccountCreationSource *string `pulumi:"accountCreationSource"`
	// Specifies the account id. Changing this forces a new Azure Native New Relic Monitor to be created.
	//
	// > **NOTE:** The value of `accountId` must come from an Azure Native New Relic Monitor instance of another different subscription.
	AccountId *string `pulumi:"accountId"`
	// Specifies the ingestion key of account. Changing this forces a new Azure Native New Relic Monitor to be created.
	IngestionKey *string `pulumi:"ingestionKey"`
	// Specifies the Azure Region where the Azure Native New Relic Monitor should exist. Changing this forces a new Azure Native New Relic Monitor to be created.
	Location *string `pulumi:"location"`
	// Specifies the name which should be used for this Azure Native New Relic Monitor. Changing this forces a new Azure Native New Relic Monitor to be created.
	Name *string `pulumi:"name"`
	// Specifies the source of org creation. Possible values are `LIFTR` and `NEWRELIC`. Defaults to `LIFTR`. Changing this forces a new Azure Native New Relic Monitor to be created.
	OrgCreationSource *string `pulumi:"orgCreationSource"`
	// Specifies the organization id. Changing this forces a new Azure Native New Relic Monitor to be created.
	//
	// > **NOTE:** The value of `organizationId` must come from an Azure Native New Relic Monitor instance of another different subscription.
	OrganizationId *string `pulumi:"organizationId"`
	// A `plan` block as defined below. Changing this forces a new Azure Native New Relic Monitor to be created.
	Plan MonitorPlan `pulumi:"plan"`
	// Specifies the name of the Resource Group where the Azure Native New Relic Monitor should exist. Changing this forces a new Azure Native New Relic Monitor to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A `user` block as defined below. Changing this forces a new Azure Native New Relic Monitor to be created.
	User MonitorUser `pulumi:"user"`
	// Specifies the user id. Changing this forces a new Azure Native New Relic Monitor to be created.
	UserId *string `pulumi:"userId"`
}

// The set of arguments for constructing a Monitor resource.
type MonitorArgs struct {
	// Specifies the source of account creation. Possible values are `LIFTR` and `NEWRELIC`. Defaults to `LIFTR`. Changing this forces a new Azure Native New Relic Monitor to be created.
	AccountCreationSource pulumi.StringPtrInput
	// Specifies the account id. Changing this forces a new Azure Native New Relic Monitor to be created.
	//
	// > **NOTE:** The value of `accountId` must come from an Azure Native New Relic Monitor instance of another different subscription.
	AccountId pulumi.StringPtrInput
	// Specifies the ingestion key of account. Changing this forces a new Azure Native New Relic Monitor to be created.
	IngestionKey pulumi.StringPtrInput
	// Specifies the Azure Region where the Azure Native New Relic Monitor should exist. Changing this forces a new Azure Native New Relic Monitor to be created.
	Location pulumi.StringPtrInput
	// Specifies the name which should be used for this Azure Native New Relic Monitor. Changing this forces a new Azure Native New Relic Monitor to be created.
	Name pulumi.StringPtrInput
	// Specifies the source of org creation. Possible values are `LIFTR` and `NEWRELIC`. Defaults to `LIFTR`. Changing this forces a new Azure Native New Relic Monitor to be created.
	OrgCreationSource pulumi.StringPtrInput
	// Specifies the organization id. Changing this forces a new Azure Native New Relic Monitor to be created.
	//
	// > **NOTE:** The value of `organizationId` must come from an Azure Native New Relic Monitor instance of another different subscription.
	OrganizationId pulumi.StringPtrInput
	// A `plan` block as defined below. Changing this forces a new Azure Native New Relic Monitor to be created.
	Plan MonitorPlanInput
	// Specifies the name of the Resource Group where the Azure Native New Relic Monitor should exist. Changing this forces a new Azure Native New Relic Monitor to be created.
	ResourceGroupName pulumi.StringInput
	// A `user` block as defined below. Changing this forces a new Azure Native New Relic Monitor to be created.
	User MonitorUserInput
	// Specifies the user id. Changing this forces a new Azure Native New Relic Monitor to be created.
	UserId pulumi.StringPtrInput
}

func (MonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitorArgs)(nil)).Elem()
}

type MonitorInput interface {
	pulumi.Input

	ToMonitorOutput() MonitorOutput
	ToMonitorOutputWithContext(ctx context.Context) MonitorOutput
}

func (*Monitor) ElementType() reflect.Type {
	return reflect.TypeOf((**Monitor)(nil)).Elem()
}

func (i *Monitor) ToMonitorOutput() MonitorOutput {
	return i.ToMonitorOutputWithContext(context.Background())
}

func (i *Monitor) ToMonitorOutputWithContext(ctx context.Context) MonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorOutput)
}

// MonitorArrayInput is an input type that accepts MonitorArray and MonitorArrayOutput values.
// You can construct a concrete instance of `MonitorArrayInput` via:
//
//	MonitorArray{ MonitorArgs{...} }
type MonitorArrayInput interface {
	pulumi.Input

	ToMonitorArrayOutput() MonitorArrayOutput
	ToMonitorArrayOutputWithContext(context.Context) MonitorArrayOutput
}

type MonitorArray []MonitorInput

func (MonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Monitor)(nil)).Elem()
}

func (i MonitorArray) ToMonitorArrayOutput() MonitorArrayOutput {
	return i.ToMonitorArrayOutputWithContext(context.Background())
}

func (i MonitorArray) ToMonitorArrayOutputWithContext(ctx context.Context) MonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorArrayOutput)
}

// MonitorMapInput is an input type that accepts MonitorMap and MonitorMapOutput values.
// You can construct a concrete instance of `MonitorMapInput` via:
//
//	MonitorMap{ "key": MonitorArgs{...} }
type MonitorMapInput interface {
	pulumi.Input

	ToMonitorMapOutput() MonitorMapOutput
	ToMonitorMapOutputWithContext(context.Context) MonitorMapOutput
}

type MonitorMap map[string]MonitorInput

func (MonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Monitor)(nil)).Elem()
}

func (i MonitorMap) ToMonitorMapOutput() MonitorMapOutput {
	return i.ToMonitorMapOutputWithContext(context.Background())
}

func (i MonitorMap) ToMonitorMapOutputWithContext(ctx context.Context) MonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorMapOutput)
}

type MonitorOutput struct{ *pulumi.OutputState }

func (MonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Monitor)(nil)).Elem()
}

func (o MonitorOutput) ToMonitorOutput() MonitorOutput {
	return o
}

func (o MonitorOutput) ToMonitorOutputWithContext(ctx context.Context) MonitorOutput {
	return o
}

// Specifies the source of account creation. Possible values are `LIFTR` and `NEWRELIC`. Defaults to `LIFTR`. Changing this forces a new Azure Native New Relic Monitor to be created.
func (o MonitorOutput) AccountCreationSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringPtrOutput { return v.AccountCreationSource }).(pulumi.StringPtrOutput)
}

// Specifies the account id. Changing this forces a new Azure Native New Relic Monitor to be created.
//
// > **NOTE:** The value of `accountId` must come from an Azure Native New Relic Monitor instance of another different subscription.
func (o MonitorOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Specifies the ingestion key of account. Changing this forces a new Azure Native New Relic Monitor to be created.
func (o MonitorOutput) IngestionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringPtrOutput { return v.IngestionKey }).(pulumi.StringPtrOutput)
}

// Specifies the Azure Region where the Azure Native New Relic Monitor should exist. Changing this forces a new Azure Native New Relic Monitor to be created.
func (o MonitorOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name which should be used for this Azure Native New Relic Monitor. Changing this forces a new Azure Native New Relic Monitor to be created.
func (o MonitorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the source of org creation. Possible values are `LIFTR` and `NEWRELIC`. Defaults to `LIFTR`. Changing this forces a new Azure Native New Relic Monitor to be created.
func (o MonitorOutput) OrgCreationSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringPtrOutput { return v.OrgCreationSource }).(pulumi.StringPtrOutput)
}

// Specifies the organization id. Changing this forces a new Azure Native New Relic Monitor to be created.
//
// > **NOTE:** The value of `organizationId` must come from an Azure Native New Relic Monitor instance of another different subscription.
func (o MonitorOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// A `plan` block as defined below. Changing this forces a new Azure Native New Relic Monitor to be created.
func (o MonitorOutput) Plan() MonitorPlanOutput {
	return o.ApplyT(func(v *Monitor) MonitorPlanOutput { return v.Plan }).(MonitorPlanOutput)
}

// Specifies the name of the Resource Group where the Azure Native New Relic Monitor should exist. Changing this forces a new Azure Native New Relic Monitor to be created.
func (o MonitorOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A `user` block as defined below. Changing this forces a new Azure Native New Relic Monitor to be created.
func (o MonitorOutput) User() MonitorUserOutput {
	return o.ApplyT(func(v *Monitor) MonitorUserOutput { return v.User }).(MonitorUserOutput)
}

// Specifies the user id. Changing this forces a new Azure Native New Relic Monitor to be created.
func (o MonitorOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringPtrOutput { return v.UserId }).(pulumi.StringPtrOutput)
}

type MonitorArrayOutput struct{ *pulumi.OutputState }

func (MonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Monitor)(nil)).Elem()
}

func (o MonitorArrayOutput) ToMonitorArrayOutput() MonitorArrayOutput {
	return o
}

func (o MonitorArrayOutput) ToMonitorArrayOutputWithContext(ctx context.Context) MonitorArrayOutput {
	return o
}

func (o MonitorArrayOutput) Index(i pulumi.IntInput) MonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Monitor {
		return vs[0].([]*Monitor)[vs[1].(int)]
	}).(MonitorOutput)
}

type MonitorMapOutput struct{ *pulumi.OutputState }

func (MonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Monitor)(nil)).Elem()
}

func (o MonitorMapOutput) ToMonitorMapOutput() MonitorMapOutput {
	return o
}

func (o MonitorMapOutput) ToMonitorMapOutputWithContext(ctx context.Context) MonitorMapOutput {
	return o
}

func (o MonitorMapOutput) MapIndex(k pulumi.StringInput) MonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Monitor {
		return vs[0].(map[string]*Monitor)[vs[1].(string)]
	}).(MonitorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorInput)(nil)).Elem(), &Monitor{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorArrayInput)(nil)).Elem(), MonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorMapInput)(nil)).Elem(), MonitorMap{})
	pulumi.RegisterOutputType(MonitorOutput{})
	pulumi.RegisterOutputType(MonitorArrayOutput{})
	pulumi.RegisterOutputType(MonitorMapOutput{})
}
