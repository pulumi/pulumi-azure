// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package config

import (
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
)

var _ = internal.GetEnvOrDefault

// The Azure DevOps Pipeline Service Connection ID.
func GetAdoPipelineServiceConnectionId(ctx *pulumi.Context) string {
	return config.Get(ctx, "azure:adoPipelineServiceConnectionId")
}
func GetAuxiliaryTenantIds(ctx *pulumi.Context) string {
	return config.Get(ctx, "azure:auxiliaryTenantIds")
}

// Base64 encoded PKCS#12 certificate bundle to use when authenticating as a Service Principal using a Client Certificate
func GetClientCertificate(ctx *pulumi.Context) string {
	return config.Get(ctx, "azure:clientCertificate")
}

// The password associated with the Client Certificate. For use when authenticating as a Service Principal using a Client
// Certificate
func GetClientCertificatePassword(ctx *pulumi.Context) string {
	return config.Get(ctx, "azure:clientCertificatePassword")
}

// The path to the Client Certificate associated with the Service Principal for use when authenticating as a Service
// Principal using a Client Certificate.
func GetClientCertificatePath(ctx *pulumi.Context) string {
	return config.Get(ctx, "azure:clientCertificatePath")
}

// The Client ID which should be used.
func GetClientId(ctx *pulumi.Context) string {
	return config.Get(ctx, "azure:clientId")
}

// The path to a file containing the Client ID which should be used.
func GetClientIdFilePath(ctx *pulumi.Context) string {
	return config.Get(ctx, "azure:clientIdFilePath")
}

// The Client Secret which should be used. For use When authenticating as a Service Principal using a Client Secret.
func GetClientSecret(ctx *pulumi.Context) string {
	return config.Get(ctx, "azure:clientSecret")
}

// The path to a file containing the Client Secret which should be used. For use When authenticating as a Service Principal
// using a Client Secret.
func GetClientSecretFilePath(ctx *pulumi.Context) string {
	return config.Get(ctx, "azure:clientSecretFilePath")
}

// This will disable the x-ms-correlation-request-id header.
func GetDisableCorrelationRequestId(ctx *pulumi.Context) bool {
	return config.GetBool(ctx, "azure:disableCorrelationRequestId")
}
func GetDisableTerraformPartnerId(ctx *pulumi.Context) bool {
	return config.GetBool(ctx, "azure:disableTerraformPartnerId")
}

// The Cloud Environment which should be used. Possible values are public, usgovernment, and china. Defaults to public. Not
// used and should not be specified when `metadataHost` is specified.
func GetEnvironment(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "azure:environment")
	if err == nil {
		return v
	}
	var value string
	if d := internal.GetEnvOrDefault("public", nil, "AZURE_ENVIRONMENT", "ARM_ENVIRONMENT"); d != nil {
		value = d.(string)
	}
	return value
}
func GetFeatures(ctx *pulumi.Context) string {
	return config.Get(ctx, "azure:features")
}
func GetLocation(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "azure:location")
	if err == nil {
		return v
	}
	var value string
	if d := internal.GetEnvOrDefault(nil, nil, "ARM_LOCATION"); d != nil {
		value = d.(string)
	}
	return value
}

// The Hostname which should be used for the Azure Metadata Service.
func GetMetadataHost(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "azure:metadataHost")
	if err == nil {
		return v
	}
	var value string
	if d := internal.GetEnvOrDefault(nil, nil, "ARM_METADATA_HOSTNAME"); d != nil {
		value = d.(string)
	}
	return value
}

// The path to a custom endpoint for Managed Service Identity - in most circumstances this should be detected
// automatically.
func GetMsiEndpoint(ctx *pulumi.Context) string {
	return config.Get(ctx, "azure:msiEndpoint")
}

// The bearer token for the request to the OIDC provider. For use when authenticating as a Service Principal using OpenID
// Connect.
func GetOidcRequestToken(ctx *pulumi.Context) string {
	return config.Get(ctx, "azure:oidcRequestToken")
}

// The URL for the OIDC provider from which to request an ID token. For use when authenticating as a Service Principal
// using OpenID Connect.
func GetOidcRequestUrl(ctx *pulumi.Context) string {
	return config.Get(ctx, "azure:oidcRequestUrl")
}

// The OIDC ID token for use when authenticating as a Service Principal using OpenID Connect.
func GetOidcToken(ctx *pulumi.Context) string {
	return config.Get(ctx, "azure:oidcToken")
}

// The path to a file containing an OIDC ID token for use when authenticating as a Service Principal using OpenID Connect.
func GetOidcTokenFilePath(ctx *pulumi.Context) string {
	return config.Get(ctx, "azure:oidcTokenFilePath")
}

// A GUID/UUID that is registered with Microsoft to facilitate partner resource usage attribution.
func GetPartnerId(ctx *pulumi.Context) string {
	return config.Get(ctx, "azure:partnerId")
}

// The set of Resource Providers which should be automatically registered for the subscription.
func GetResourceProviderRegistrations(ctx *pulumi.Context) string {
	return config.Get(ctx, "azure:resourceProviderRegistrations")
}

// A list of Resource Providers to explicitly register for the subscription, in addition to those specified by the
// `resourceProviderRegistrations` property.
func GetResourceProvidersToRegisters(ctx *pulumi.Context) string {
	return config.Get(ctx, "azure:resourceProvidersToRegisters")
}

// Should the AzureRM Provider skip registering all of the Resource Providers that it supports, if they're not already
// registered?
//
// Deprecated: This property is deprecated and will be removed in v5.0 of the AzureRM provider. Please use the `resourceProviderRegistrations` property instead.
func GetSkipProviderRegistration(ctx *pulumi.Context) bool {
	v, err := config.TryBool(ctx, "azure:skipProviderRegistration")
	if err == nil {
		return v
	}
	var value bool
	if d := internal.GetEnvOrDefault(false, internal.ParseEnvBool, "ARM_SKIP_PROVIDER_REGISTRATION"); d != nil {
		value = d.(bool)
	}
	return value
}

// Should the AzureRM Provider use Azure AD Authentication when accessing the Storage Data Plane APIs?
func GetStorageUseAzuread(ctx *pulumi.Context) bool {
	v, err := config.TryBool(ctx, "azure:storageUseAzuread")
	if err == nil {
		return v
	}
	var value bool
	if d := internal.GetEnvOrDefault(false, internal.ParseEnvBool, "ARM_STORAGE_USE_AZUREAD"); d != nil {
		value = d.(bool)
	}
	return value
}

// The Subscription ID which should be used.
func GetSubscriptionId(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "azure:subscriptionId")
	if err == nil {
		return v
	}
	var value string
	if d := internal.GetEnvOrDefault("", nil, "ARM_SUBSCRIPTION_ID"); d != nil {
		value = d.(string)
	}
	return value
}

// The Tenant ID which should be used.
func GetTenantId(ctx *pulumi.Context) string {
	return config.Get(ctx, "azure:tenantId")
}

// Allow Azure AKS Workload Identity to be used for Authentication.
func GetUseAksWorkloadIdentity(ctx *pulumi.Context) bool {
	return config.GetBool(ctx, "azure:useAksWorkloadIdentity")
}

// Allow Azure CLI to be used for Authentication.
func GetUseCli(ctx *pulumi.Context) bool {
	return config.GetBool(ctx, "azure:useCli")
}

// Allow Managed Service Identity to be used for Authentication.
func GetUseMsi(ctx *pulumi.Context) bool {
	return config.GetBool(ctx, "azure:useMsi")
}

// Allow OpenID Connect to be used for authentication
func GetUseOidc(ctx *pulumi.Context) bool {
	return config.GetBool(ctx, "azure:useOidc")
}
