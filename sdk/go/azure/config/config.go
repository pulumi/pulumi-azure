// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package config

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
	"github.com/pulumi/pulumi/sdk/go/pulumi/config"
)

// The password associated with the Client Certificate. For use when authenticating as a Service Principal using a Client
// Certificate
func GetClientCertificatePassword(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "azure:clientCertificatePassword")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault("", nil, "ARM_CLIENT_CERTIFICATE_PASSWORD").(string); ok {
		return dv
	}
	return v
}

// The path to the Client Certificate associated with the Service Principal for use when authenticating as a Service
// Principal using a Client Certificate.
func GetClientCertificatePath(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "azure:clientCertificatePath")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault("", nil, "ARM_CLIENT_CERTIFICATE_PATH").(string); ok {
		return dv
	}
	return v
}

// The Client ID which should be used.
func GetClientId(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "azure:clientId")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault("", nil, "ARM_CLIENT_ID").(string); ok {
		return dv
	}
	return v
}

// The Client Secret which should be used. For use When authenticating as a Service Principal using a Client Secret.
func GetClientSecret(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "azure:clientSecret")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault("", nil, "ARM_CLIENT_SECRET").(string); ok {
		return dv
	}
	return v
}

// This will disable the x-ms-correlation-request-id header.
func GetDisableCorrelationRequestId(ctx *pulumi.Context) bool {
	return config.GetBool(ctx, "azure:disableCorrelationRequestId")
}

// The Cloud Environment which should be used. Possible values are public, usgovernment, german, and china. Defaults to
// public.
func GetEnvironment(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "azure:environment")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault("public", nil, "ARM_ENVIRONMENT").(string); ok {
		return dv
	}
	return v
}

// The path to a custom endpoint for Managed Service Identity - in most circumstances this should be detected
// automatically.
func GetMsiEndpoint(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "azure:msiEndpoint")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault("", nil, "ARM_MSI_ENDPOINT").(string); ok {
		return dv
	}
	return v
}

// A GUID/UUID that is registered with Microsoft to facilitate partner resource usage attribution.
func GetPartnerId(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "azure:partnerId")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault("", nil, "ARM_PARTNER_ID").(string); ok {
		return dv
	}
	return v
}

// This will cause the AzureRM Provider to skip verifying the credentials being used are valid.
func GetSkipCredentialsValidation(ctx *pulumi.Context) bool {
	v, err := config.TryBool(ctx, "azure:skipCredentialsValidation")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault(false, parseEnvBool, "ARM_SKIP_CREDENTIALS_VALIDATION").(bool); ok {
		return dv
	}
	return v
}

// Should the AzureRM Provider skip registering all of the Resource Providers that it supports, if they're not already
// registered?
func GetSkipProviderRegistration(ctx *pulumi.Context) bool {
	v, err := config.TryBool(ctx, "azure:skipProviderRegistration")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault(false, parseEnvBool, "ARM_SKIP_PROVIDER_REGISTRATION").(bool); ok {
		return dv
	}
	return v
}

// The Subscription ID which should be used.
func GetSubscriptionId(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "azure:subscriptionId")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault("", nil, "ARM_SUBSCRIPTION_ID").(string); ok {
		return dv
	}
	return v
}

// The Tenant ID which should be used.
func GetTenantId(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "azure:tenantId")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault("", nil, "ARM_TENANT_ID").(string); ok {
		return dv
	}
	return v
}

// Allowed Managed Service Identity be used for Authentication.
func GetUseMsi(ctx *pulumi.Context) bool {
	v, err := config.TryBool(ctx, "azure:useMsi")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault(false, parseEnvBool, "ARM_USE_MSI").(bool); ok {
		return dv
	}
	return v
}

func GetLocation(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "azure:location")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault("", nil, "ARM_LOCATION").(string); ok {
		return dv
	}
	return v
}
