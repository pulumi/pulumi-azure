// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pim

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information on a role policy for an Azure Management Group, Subscription, Resource Group or resource.
//
// ## Example Usage
//
// ### Resource Group
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/authorization"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/pim"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.LookupResourceGroup(ctx, &core.LookupResourceGroupArgs{
//				Name: "example-rg",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = authorization.LookupRoleDefinition(ctx, &authorization.LookupRoleDefinitionArgs{
//				Name:  pulumi.StringRef("Contributor"),
//				Scope: pulumi.StringRef(example.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = pim.LookupRoleManagementPolicy(ctx, &pim.LookupRoleManagementPolicyArgs{
//				Scope:            test.Id,
//				RoleDefinitionId: contributor.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Management Group
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/authorization"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/management"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/pim"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := management.LookupGroup(ctx, &management.LookupGroupArgs{
//				Name: pulumi.StringRef("example-group"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			mgContributor, err := authorization.LookupRoleDefinition(ctx, &authorization.LookupRoleDefinitionArgs{
//				Name:  pulumi.StringRef("Contributor"),
//				Scope: pulumi.StringRef(exampleAzurermManagementGroup.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = pim.LookupRoleManagementPolicy(ctx, &pim.LookupRoleManagementPolicyArgs{
//				Scope:            example.Id,
//				RoleDefinitionId: mgContributor.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupRoleManagementPolicy(ctx *pulumi.Context, args *LookupRoleManagementPolicyArgs, opts ...pulumi.InvokeOption) (*LookupRoleManagementPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRoleManagementPolicyResult
	err := ctx.Invoke("azure:pim/getRoleManagementPolicy:getRoleManagementPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRoleManagementPolicy.
type LookupRoleManagementPolicyArgs struct {
	// The scoped Role Definition ID of the role for which this policy applies.
	RoleDefinitionId string `pulumi:"roleDefinitionId"`
	// The scope to which this Role Management Policy applies. Can refer to a management group, a subscription, a resource group or a resource.
	Scope string `pulumi:"scope"`
}

// A collection of values returned by getRoleManagementPolicy.
type LookupRoleManagementPolicyResult struct {
	// An `activationRules` block as defined below.
	ActivationRules []GetRoleManagementPolicyActivationRule `pulumi:"activationRules"`
	// An `activeAssignmentRules` block as defined below.
	ActiveAssignmentRules []GetRoleManagementPolicyActiveAssignmentRule `pulumi:"activeAssignmentRules"`
	// (String) The description of this policy.
	Description string `pulumi:"description"`
	// An `eligibleAssignmentRules` block as defined below.
	EligibleAssignmentRules []GetRoleManagementPolicyEligibleAssignmentRule `pulumi:"eligibleAssignmentRules"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// (String) The name of this policy, which is typically a UUID and may change over time.
	Name string `pulumi:"name"`
	// A `notificationRules` block as defined below.
	NotificationRules []GetRoleManagementPolicyNotificationRule `pulumi:"notificationRules"`
	RoleDefinitionId  string                                    `pulumi:"roleDefinitionId"`
	Scope             string                                    `pulumi:"scope"`
}

func LookupRoleManagementPolicyOutput(ctx *pulumi.Context, args LookupRoleManagementPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupRoleManagementPolicyResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupRoleManagementPolicyResultOutput, error) {
			args := v.(LookupRoleManagementPolicyArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupRoleManagementPolicyResult
			secret, deps, err := ctx.InvokePackageRawWithDeps("azure:pim/getRoleManagementPolicy:getRoleManagementPolicy", args, &rv, "", opts...)
			if err != nil {
				return LookupRoleManagementPolicyResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupRoleManagementPolicyResultOutput)
			output = pulumi.OutputWithDependencies(ctx.Context(), output, deps...).(LookupRoleManagementPolicyResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupRoleManagementPolicyResultOutput), nil
			}
			return output, nil
		}).(LookupRoleManagementPolicyResultOutput)
}

// A collection of arguments for invoking getRoleManagementPolicy.
type LookupRoleManagementPolicyOutputArgs struct {
	// The scoped Role Definition ID of the role for which this policy applies.
	RoleDefinitionId pulumi.StringInput `pulumi:"roleDefinitionId"`
	// The scope to which this Role Management Policy applies. Can refer to a management group, a subscription, a resource group or a resource.
	Scope pulumi.StringInput `pulumi:"scope"`
}

func (LookupRoleManagementPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRoleManagementPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getRoleManagementPolicy.
type LookupRoleManagementPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupRoleManagementPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRoleManagementPolicyResult)(nil)).Elem()
}

func (o LookupRoleManagementPolicyResultOutput) ToLookupRoleManagementPolicyResultOutput() LookupRoleManagementPolicyResultOutput {
	return o
}

func (o LookupRoleManagementPolicyResultOutput) ToLookupRoleManagementPolicyResultOutputWithContext(ctx context.Context) LookupRoleManagementPolicyResultOutput {
	return o
}

// An `activationRules` block as defined below.
func (o LookupRoleManagementPolicyResultOutput) ActivationRules() GetRoleManagementPolicyActivationRuleArrayOutput {
	return o.ApplyT(func(v LookupRoleManagementPolicyResult) []GetRoleManagementPolicyActivationRule {
		return v.ActivationRules
	}).(GetRoleManagementPolicyActivationRuleArrayOutput)
}

// An `activeAssignmentRules` block as defined below.
func (o LookupRoleManagementPolicyResultOutput) ActiveAssignmentRules() GetRoleManagementPolicyActiveAssignmentRuleArrayOutput {
	return o.ApplyT(func(v LookupRoleManagementPolicyResult) []GetRoleManagementPolicyActiveAssignmentRule {
		return v.ActiveAssignmentRules
	}).(GetRoleManagementPolicyActiveAssignmentRuleArrayOutput)
}

// (String) The description of this policy.
func (o LookupRoleManagementPolicyResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRoleManagementPolicyResult) string { return v.Description }).(pulumi.StringOutput)
}

// An `eligibleAssignmentRules` block as defined below.
func (o LookupRoleManagementPolicyResultOutput) EligibleAssignmentRules() GetRoleManagementPolicyEligibleAssignmentRuleArrayOutput {
	return o.ApplyT(func(v LookupRoleManagementPolicyResult) []GetRoleManagementPolicyEligibleAssignmentRule {
		return v.EligibleAssignmentRules
	}).(GetRoleManagementPolicyEligibleAssignmentRuleArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRoleManagementPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRoleManagementPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

// (String) The name of this policy, which is typically a UUID and may change over time.
func (o LookupRoleManagementPolicyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRoleManagementPolicyResult) string { return v.Name }).(pulumi.StringOutput)
}

// A `notificationRules` block as defined below.
func (o LookupRoleManagementPolicyResultOutput) NotificationRules() GetRoleManagementPolicyNotificationRuleArrayOutput {
	return o.ApplyT(func(v LookupRoleManagementPolicyResult) []GetRoleManagementPolicyNotificationRule {
		return v.NotificationRules
	}).(GetRoleManagementPolicyNotificationRuleArrayOutput)
}

func (o LookupRoleManagementPolicyResultOutput) RoleDefinitionId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRoleManagementPolicyResult) string { return v.RoleDefinitionId }).(pulumi.StringOutput)
}

func (o LookupRoleManagementPolicyResultOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRoleManagementPolicyResult) string { return v.Scope }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRoleManagementPolicyResultOutput{})
}
