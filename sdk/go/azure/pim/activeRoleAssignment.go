// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pim

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Pim Active Role Assignment.
//
// ## Example Usage
// ### Subscription)
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/authorization"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/pim"
//	"github.com/pulumi/pulumi-time/sdk/go/time"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			primary, err := core.LookupSubscription(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			exampleClientConfig, err := core.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			exampleRoleDefinition, err := authorization.LookupRoleDefinition(ctx, &authorization.LookupRoleDefinitionArgs{
//				Name: pulumi.StringRef("Reader"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleStatic, err := time.NewStatic(ctx, "exampleStatic", nil)
//			if err != nil {
//				return err
//			}
//			_, err = pim.NewActiveRoleAssignment(ctx, "exampleActiveRoleAssignment", &pim.ActiveRoleAssignmentArgs{
//				Scope:            *pulumi.String(primary.Id),
//				RoleDefinitionId: pulumi.String(fmt.Sprintf("%v%v", primary.Id, exampleRoleDefinition.Id)),
//				PrincipalId:      *pulumi.String(exampleClientConfig.ObjectId),
//				Schedule: &pim.ActiveRoleAssignmentScheduleArgs{
//					StartDateTime: exampleStatic.Rfc3339,
//					Expiration: &pim.ActiveRoleAssignmentScheduleExpirationArgs{
//						DurationHours: pulumi.Int(8),
//					},
//				},
//				Justification: pulumi.String("Expiration Duration Set"),
//				Ticket: &pim.ActiveRoleAssignmentTicketArgs{
//					Number: pulumi.String("1"),
//					System: pulumi.String("example ticket system"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Management Group)
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/authorization"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/management"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/pim"
//	"github.com/pulumi/pulumi-time/sdk/go/time"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleClientConfig, err := core.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			exampleRoleDefinition, err := authorization.LookupRoleDefinition(ctx, &authorization.LookupRoleDefinitionArgs{
//				Name: pulumi.StringRef("Reader"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleGroup, err := management.NewGroup(ctx, "exampleGroup", nil)
//			if err != nil {
//				return err
//			}
//			exampleStatic, err := time.NewStatic(ctx, "exampleStatic", nil)
//			if err != nil {
//				return err
//			}
//			_, err = pim.NewActiveRoleAssignment(ctx, "exampleActiveRoleAssignment", &pim.ActiveRoleAssignmentArgs{
//				Scope:            exampleGroup.ID(),
//				RoleDefinitionId: *pulumi.String(exampleRoleDefinition.Id),
//				PrincipalId:      *pulumi.String(exampleClientConfig.ObjectId),
//				Schedule: &pim.ActiveRoleAssignmentScheduleArgs{
//					StartDateTime: exampleStatic.Rfc3339,
//					Expiration: &pim.ActiveRoleAssignmentScheduleExpirationArgs{
//						DurationHours: pulumi.Int(8),
//					},
//				},
//				Justification: pulumi.String("Expiration Duration Set"),
//				Ticket: &pim.ActiveRoleAssignmentTicketArgs{
//					Number: pulumi.String("1"),
//					System: pulumi.String("example ticket system"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Pim Active Role Assignments can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:pim/activeRoleAssignment:ActiveRoleAssignment example /subscriptions/00000000-0000-0000-0000-000000000000|/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Authorization/roleDefinitions/00000000-0000-0000-0000-000000000000|00000000-0000-0000-0000-000000000000
//
// ```
type ActiveRoleAssignment struct {
	pulumi.CustomResourceState

	// The justification of the role assignment. Changing this forces a new Pim Active Role Assignment to be created.
	Justification pulumi.StringPtrOutput `pulumi:"justification"`
	// The principal id. Changing this forces a new Pim Active Role Assignment to be created.
	PrincipalId pulumi.StringOutput `pulumi:"principalId"`
	// The type of principal.
	PrincipalType pulumi.StringOutput `pulumi:"principalType"`
	// The role definition id. Changing this forces a new Pim Active Role Assignment to be created.
	RoleDefinitionId pulumi.StringOutput `pulumi:"roleDefinitionId"`
	// A `schedule` block as defined below. Changing this forces a new Pim Active Role Assignment to be created.
	Schedule ActiveRoleAssignmentSchedulePtrOutput `pulumi:"schedule"`
	// The scope. Changing this forces a new Pim Active Role Assignment to be created.
	Scope pulumi.StringOutput `pulumi:"scope"`
	// A `ticket` block as defined below. Changing this forces a new Pim Active Role Assignment to be created.
	Ticket ActiveRoleAssignmentTicketPtrOutput `pulumi:"ticket"`
}

// NewActiveRoleAssignment registers a new resource with the given unique name, arguments, and options.
func NewActiveRoleAssignment(ctx *pulumi.Context,
	name string, args *ActiveRoleAssignmentArgs, opts ...pulumi.ResourceOption) (*ActiveRoleAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PrincipalId == nil {
		return nil, errors.New("invalid value for required argument 'PrincipalId'")
	}
	if args.RoleDefinitionId == nil {
		return nil, errors.New("invalid value for required argument 'RoleDefinitionId'")
	}
	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ActiveRoleAssignment
	err := ctx.RegisterResource("azure:pim/activeRoleAssignment:ActiveRoleAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetActiveRoleAssignment gets an existing ActiveRoleAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetActiveRoleAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ActiveRoleAssignmentState, opts ...pulumi.ResourceOption) (*ActiveRoleAssignment, error) {
	var resource ActiveRoleAssignment
	err := ctx.ReadResource("azure:pim/activeRoleAssignment:ActiveRoleAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ActiveRoleAssignment resources.
type activeRoleAssignmentState struct {
	// The justification of the role assignment. Changing this forces a new Pim Active Role Assignment to be created.
	Justification *string `pulumi:"justification"`
	// The principal id. Changing this forces a new Pim Active Role Assignment to be created.
	PrincipalId *string `pulumi:"principalId"`
	// The type of principal.
	PrincipalType *string `pulumi:"principalType"`
	// The role definition id. Changing this forces a new Pim Active Role Assignment to be created.
	RoleDefinitionId *string `pulumi:"roleDefinitionId"`
	// A `schedule` block as defined below. Changing this forces a new Pim Active Role Assignment to be created.
	Schedule *ActiveRoleAssignmentSchedule `pulumi:"schedule"`
	// The scope. Changing this forces a new Pim Active Role Assignment to be created.
	Scope *string `pulumi:"scope"`
	// A `ticket` block as defined below. Changing this forces a new Pim Active Role Assignment to be created.
	Ticket *ActiveRoleAssignmentTicket `pulumi:"ticket"`
}

type ActiveRoleAssignmentState struct {
	// The justification of the role assignment. Changing this forces a new Pim Active Role Assignment to be created.
	Justification pulumi.StringPtrInput
	// The principal id. Changing this forces a new Pim Active Role Assignment to be created.
	PrincipalId pulumi.StringPtrInput
	// The type of principal.
	PrincipalType pulumi.StringPtrInput
	// The role definition id. Changing this forces a new Pim Active Role Assignment to be created.
	RoleDefinitionId pulumi.StringPtrInput
	// A `schedule` block as defined below. Changing this forces a new Pim Active Role Assignment to be created.
	Schedule ActiveRoleAssignmentSchedulePtrInput
	// The scope. Changing this forces a new Pim Active Role Assignment to be created.
	Scope pulumi.StringPtrInput
	// A `ticket` block as defined below. Changing this forces a new Pim Active Role Assignment to be created.
	Ticket ActiveRoleAssignmentTicketPtrInput
}

func (ActiveRoleAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*activeRoleAssignmentState)(nil)).Elem()
}

type activeRoleAssignmentArgs struct {
	// The justification of the role assignment. Changing this forces a new Pim Active Role Assignment to be created.
	Justification *string `pulumi:"justification"`
	// The principal id. Changing this forces a new Pim Active Role Assignment to be created.
	PrincipalId string `pulumi:"principalId"`
	// The role definition id. Changing this forces a new Pim Active Role Assignment to be created.
	RoleDefinitionId string `pulumi:"roleDefinitionId"`
	// A `schedule` block as defined below. Changing this forces a new Pim Active Role Assignment to be created.
	Schedule *ActiveRoleAssignmentSchedule `pulumi:"schedule"`
	// The scope. Changing this forces a new Pim Active Role Assignment to be created.
	Scope string `pulumi:"scope"`
	// A `ticket` block as defined below. Changing this forces a new Pim Active Role Assignment to be created.
	Ticket *ActiveRoleAssignmentTicket `pulumi:"ticket"`
}

// The set of arguments for constructing a ActiveRoleAssignment resource.
type ActiveRoleAssignmentArgs struct {
	// The justification of the role assignment. Changing this forces a new Pim Active Role Assignment to be created.
	Justification pulumi.StringPtrInput
	// The principal id. Changing this forces a new Pim Active Role Assignment to be created.
	PrincipalId pulumi.StringInput
	// The role definition id. Changing this forces a new Pim Active Role Assignment to be created.
	RoleDefinitionId pulumi.StringInput
	// A `schedule` block as defined below. Changing this forces a new Pim Active Role Assignment to be created.
	Schedule ActiveRoleAssignmentSchedulePtrInput
	// The scope. Changing this forces a new Pim Active Role Assignment to be created.
	Scope pulumi.StringInput
	// A `ticket` block as defined below. Changing this forces a new Pim Active Role Assignment to be created.
	Ticket ActiveRoleAssignmentTicketPtrInput
}

func (ActiveRoleAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*activeRoleAssignmentArgs)(nil)).Elem()
}

type ActiveRoleAssignmentInput interface {
	pulumi.Input

	ToActiveRoleAssignmentOutput() ActiveRoleAssignmentOutput
	ToActiveRoleAssignmentOutputWithContext(ctx context.Context) ActiveRoleAssignmentOutput
}

func (*ActiveRoleAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((**ActiveRoleAssignment)(nil)).Elem()
}

func (i *ActiveRoleAssignment) ToActiveRoleAssignmentOutput() ActiveRoleAssignmentOutput {
	return i.ToActiveRoleAssignmentOutputWithContext(context.Background())
}

func (i *ActiveRoleAssignment) ToActiveRoleAssignmentOutputWithContext(ctx context.Context) ActiveRoleAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveRoleAssignmentOutput)
}

// ActiveRoleAssignmentArrayInput is an input type that accepts ActiveRoleAssignmentArray and ActiveRoleAssignmentArrayOutput values.
// You can construct a concrete instance of `ActiveRoleAssignmentArrayInput` via:
//
//	ActiveRoleAssignmentArray{ ActiveRoleAssignmentArgs{...} }
type ActiveRoleAssignmentArrayInput interface {
	pulumi.Input

	ToActiveRoleAssignmentArrayOutput() ActiveRoleAssignmentArrayOutput
	ToActiveRoleAssignmentArrayOutputWithContext(context.Context) ActiveRoleAssignmentArrayOutput
}

type ActiveRoleAssignmentArray []ActiveRoleAssignmentInput

func (ActiveRoleAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActiveRoleAssignment)(nil)).Elem()
}

func (i ActiveRoleAssignmentArray) ToActiveRoleAssignmentArrayOutput() ActiveRoleAssignmentArrayOutput {
	return i.ToActiveRoleAssignmentArrayOutputWithContext(context.Background())
}

func (i ActiveRoleAssignmentArray) ToActiveRoleAssignmentArrayOutputWithContext(ctx context.Context) ActiveRoleAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveRoleAssignmentArrayOutput)
}

// ActiveRoleAssignmentMapInput is an input type that accepts ActiveRoleAssignmentMap and ActiveRoleAssignmentMapOutput values.
// You can construct a concrete instance of `ActiveRoleAssignmentMapInput` via:
//
//	ActiveRoleAssignmentMap{ "key": ActiveRoleAssignmentArgs{...} }
type ActiveRoleAssignmentMapInput interface {
	pulumi.Input

	ToActiveRoleAssignmentMapOutput() ActiveRoleAssignmentMapOutput
	ToActiveRoleAssignmentMapOutputWithContext(context.Context) ActiveRoleAssignmentMapOutput
}

type ActiveRoleAssignmentMap map[string]ActiveRoleAssignmentInput

func (ActiveRoleAssignmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActiveRoleAssignment)(nil)).Elem()
}

func (i ActiveRoleAssignmentMap) ToActiveRoleAssignmentMapOutput() ActiveRoleAssignmentMapOutput {
	return i.ToActiveRoleAssignmentMapOutputWithContext(context.Background())
}

func (i ActiveRoleAssignmentMap) ToActiveRoleAssignmentMapOutputWithContext(ctx context.Context) ActiveRoleAssignmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveRoleAssignmentMapOutput)
}

type ActiveRoleAssignmentOutput struct{ *pulumi.OutputState }

func (ActiveRoleAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActiveRoleAssignment)(nil)).Elem()
}

func (o ActiveRoleAssignmentOutput) ToActiveRoleAssignmentOutput() ActiveRoleAssignmentOutput {
	return o
}

func (o ActiveRoleAssignmentOutput) ToActiveRoleAssignmentOutputWithContext(ctx context.Context) ActiveRoleAssignmentOutput {
	return o
}

// The justification of the role assignment. Changing this forces a new Pim Active Role Assignment to be created.
func (o ActiveRoleAssignmentOutput) Justification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActiveRoleAssignment) pulumi.StringPtrOutput { return v.Justification }).(pulumi.StringPtrOutput)
}

// The principal id. Changing this forces a new Pim Active Role Assignment to be created.
func (o ActiveRoleAssignmentOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveRoleAssignment) pulumi.StringOutput { return v.PrincipalId }).(pulumi.StringOutput)
}

// The type of principal.
func (o ActiveRoleAssignmentOutput) PrincipalType() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveRoleAssignment) pulumi.StringOutput { return v.PrincipalType }).(pulumi.StringOutput)
}

// The role definition id. Changing this forces a new Pim Active Role Assignment to be created.
func (o ActiveRoleAssignmentOutput) RoleDefinitionId() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveRoleAssignment) pulumi.StringOutput { return v.RoleDefinitionId }).(pulumi.StringOutput)
}

// A `schedule` block as defined below. Changing this forces a new Pim Active Role Assignment to be created.
func (o ActiveRoleAssignmentOutput) Schedule() ActiveRoleAssignmentSchedulePtrOutput {
	return o.ApplyT(func(v *ActiveRoleAssignment) ActiveRoleAssignmentSchedulePtrOutput { return v.Schedule }).(ActiveRoleAssignmentSchedulePtrOutput)
}

// The scope. Changing this forces a new Pim Active Role Assignment to be created.
func (o ActiveRoleAssignmentOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *ActiveRoleAssignment) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

// A `ticket` block as defined below. Changing this forces a new Pim Active Role Assignment to be created.
func (o ActiveRoleAssignmentOutput) Ticket() ActiveRoleAssignmentTicketPtrOutput {
	return o.ApplyT(func(v *ActiveRoleAssignment) ActiveRoleAssignmentTicketPtrOutput { return v.Ticket }).(ActiveRoleAssignmentTicketPtrOutput)
}

type ActiveRoleAssignmentArrayOutput struct{ *pulumi.OutputState }

func (ActiveRoleAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActiveRoleAssignment)(nil)).Elem()
}

func (o ActiveRoleAssignmentArrayOutput) ToActiveRoleAssignmentArrayOutput() ActiveRoleAssignmentArrayOutput {
	return o
}

func (o ActiveRoleAssignmentArrayOutput) ToActiveRoleAssignmentArrayOutputWithContext(ctx context.Context) ActiveRoleAssignmentArrayOutput {
	return o
}

func (o ActiveRoleAssignmentArrayOutput) Index(i pulumi.IntInput) ActiveRoleAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ActiveRoleAssignment {
		return vs[0].([]*ActiveRoleAssignment)[vs[1].(int)]
	}).(ActiveRoleAssignmentOutput)
}

type ActiveRoleAssignmentMapOutput struct{ *pulumi.OutputState }

func (ActiveRoleAssignmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActiveRoleAssignment)(nil)).Elem()
}

func (o ActiveRoleAssignmentMapOutput) ToActiveRoleAssignmentMapOutput() ActiveRoleAssignmentMapOutput {
	return o
}

func (o ActiveRoleAssignmentMapOutput) ToActiveRoleAssignmentMapOutputWithContext(ctx context.Context) ActiveRoleAssignmentMapOutput {
	return o
}

func (o ActiveRoleAssignmentMapOutput) MapIndex(k pulumi.StringInput) ActiveRoleAssignmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ActiveRoleAssignment {
		return vs[0].(map[string]*ActiveRoleAssignment)[vs[1].(string)]
	}).(ActiveRoleAssignmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveRoleAssignmentInput)(nil)).Elem(), &ActiveRoleAssignment{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveRoleAssignmentArrayInput)(nil)).Elem(), ActiveRoleAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActiveRoleAssignmentMapInput)(nil)).Elem(), ActiveRoleAssignmentMap{})
	pulumi.RegisterOutputType(ActiveRoleAssignmentOutput{})
	pulumi.RegisterOutputType(ActiveRoleAssignmentArrayOutput{})
	pulumi.RegisterOutputType(ActiveRoleAssignmentMapOutput{})
}
