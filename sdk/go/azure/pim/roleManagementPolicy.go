// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pim

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage a role policy for an Azure Management Group, Subscription, Resource Group or resource.
//
// ## Example Usage
//
// ### Resource Group
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/authorization"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/pim"
//	"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-rg"),
//				Location: pulumi.String("East US"),
//			})
//			if err != nil {
//				return err
//			}
//			_ = authorization.LookupRoleDefinitionOutput(ctx, authorization.GetRoleDefinitionOutputArgs{
//				Name:  pulumi.String("Contributor"),
//				Scope: example.ID(),
//			}, nil)
//			approvers, err := azuread.LookupGroup(ctx, &azuread.LookupGroupArgs{
//				DisplayName: pulumi.StringRef("Example Approver Group"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = pim.NewRoleManagementPolicy(ctx, "example", &pim.RoleManagementPolicyArgs{
//				Scope:            pulumi.Any(test.Id),
//				RoleDefinitionId: pulumi.Any(contributor.Id),
//				ActiveAssignmentRules: &pim.RoleManagementPolicyActiveAssignmentRulesArgs{
//					ExpireAfter: pulumi.String("P365D"),
//				},
//				EligibleAssignmentRules: &pim.RoleManagementPolicyEligibleAssignmentRulesArgs{
//					ExpirationRequired: pulumi.Bool(false),
//				},
//				ActivationRules: &pim.RoleManagementPolicyActivationRulesArgs{
//					MaximumDuration: pulumi.String("PT1H"),
//					RequireApproval: pulumi.Bool(true),
//					ApprovalStage: &pim.RoleManagementPolicyActivationRulesApprovalStageArgs{
//						PrimaryApprovers: pim.RoleManagementPolicyActivationRulesApprovalStagePrimaryApproverArray{
//							&pim.RoleManagementPolicyActivationRulesApprovalStagePrimaryApproverArgs{
//								ObjectId: pulumi.String(approvers.ObjectId),
//								Type:     pulumi.String("Group"),
//							},
//						},
//					},
//				},
//				NotificationRules: &pim.RoleManagementPolicyNotificationRulesArgs{
//					EligibleAssignments: &pim.RoleManagementPolicyNotificationRulesEligibleAssignmentsArgs{
//						ApproverNotifications: &pim.RoleManagementPolicyNotificationRulesEligibleAssignmentsApproverNotificationsArgs{
//							NotificationLevel: pulumi.String("Critical"),
//							DefaultRecipients: pulumi.Bool(false),
//							AdditionalRecipients: pulumi.StringArray{
//								pulumi.String("someone@example.com"),
//							},
//						},
//					},
//					EligibleActivations: &pim.RoleManagementPolicyNotificationRulesEligibleActivationsArgs{
//						AssigneeNotifications: &pim.RoleManagementPolicyNotificationRulesEligibleActivationsAssigneeNotificationsArgs{
//							NotificationLevel: pulumi.String("All"),
//							DefaultRecipients: pulumi.Bool(true),
//							AdditionalRecipients: pulumi.StringArray{
//								pulumi.String("someone.else@example.com"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Management Group
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/authorization"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/management"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/pim"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := management.NewGroup(ctx, "example", &management.GroupArgs{
//				Name: pulumi.String("example-group"),
//			})
//			if err != nil {
//				return err
//			}
//			mgContributor := authorization.LookupRoleDefinitionOutput(ctx, authorization.GetRoleDefinitionOutputArgs{
//				Name:  pulumi.String("Contributor"),
//				Scope: example.ID(),
//			}, nil)
//			_, err = pim.NewRoleManagementPolicy(ctx, "example", &pim.RoleManagementPolicyArgs{
//				Scope: example.ID(),
//				RoleDefinitionId: pulumi.String(mgContributor.ApplyT(func(mgContributor authorization.GetRoleDefinitionResult) (*string, error) {
//					return &mgContributor.Id, nil
//				}).(pulumi.StringPtrOutput)),
//				EligibleAssignmentRules: &pim.RoleManagementPolicyEligibleAssignmentRulesArgs{
//					ExpirationRequired: pulumi.Bool(false),
//				},
//				ActiveAssignmentRules: &pim.RoleManagementPolicyActiveAssignmentRulesArgs{
//					ExpireAfter: pulumi.String("P90D"),
//				},
//				ActivationRules: &pim.RoleManagementPolicyActivationRulesArgs{
//					MaximumDuration: pulumi.String("PT1H"),
//					RequireApproval: pulumi.Bool(true),
//				},
//				NotificationRules: &pim.RoleManagementPolicyNotificationRulesArgs{
//					ActiveAssignments: &pim.RoleManagementPolicyNotificationRulesActiveAssignmentsArgs{
//						AdminNotifications: &pim.RoleManagementPolicyNotificationRulesActiveAssignmentsAdminNotificationsArgs{
//							NotificationLevel: pulumi.String("Critical"),
//							DefaultRecipients: pulumi.Bool(false),
//							AdditionalRecipients: pulumi.StringArray{
//								pulumi.String("someone@example.com"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This resource uses the following Azure API Providers:
//
// * `Microsoft.Authorization`: 2020-10-01
//
// ## Import
//
// Because these policies are created automatically by Azure, they will auto-import on first use. They can be imported using the `resource id` of the role definition, combined with the scope id, e.g.
//
// ```sh
// $ pulumi import azure:pim/roleManagementPolicy:RoleManagementPolicy example "/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Authorization/roleDefinitions/00000000-0000-0000-0000-000000000000|<scope>"
// ```
type RoleManagementPolicy struct {
	pulumi.CustomResourceState

	// An `activationRules` block as defined below.
	ActivationRules RoleManagementPolicyActivationRulesOutput `pulumi:"activationRules"`
	// An `activeAssignmentRules` block as defined below.
	ActiveAssignmentRules RoleManagementPolicyActiveAssignmentRulesOutput `pulumi:"activeAssignmentRules"`
	// (String) The description of this policy.
	Description pulumi.StringOutput `pulumi:"description"`
	// An `eligibleAssignmentRules` block as defined below.
	EligibleAssignmentRules RoleManagementPolicyEligibleAssignmentRulesOutput `pulumi:"eligibleAssignmentRules"`
	// (String) The name of this policy, which is typically a UUID and may change over time.
	Name pulumi.StringOutput `pulumi:"name"`
	// A `notificationRules` block as defined below.
	NotificationRules RoleManagementPolicyNotificationRulesOutput `pulumi:"notificationRules"`
	// The scoped Role Definition ID of the role for which this policy will apply. Changing this forces a new resource to be created.
	RoleDefinitionId pulumi.StringOutput `pulumi:"roleDefinitionId"`
	// The scope to which this Role Management Policy will apply. Can refer to a management group, a subscription, a resource group or a resource. Changing this forces a new resource to be created.
	Scope pulumi.StringOutput `pulumi:"scope"`
}

// NewRoleManagementPolicy registers a new resource with the given unique name, arguments, and options.
func NewRoleManagementPolicy(ctx *pulumi.Context,
	name string, args *RoleManagementPolicyArgs, opts ...pulumi.ResourceOption) (*RoleManagementPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RoleDefinitionId == nil {
		return nil, errors.New("invalid value for required argument 'RoleDefinitionId'")
	}
	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RoleManagementPolicy
	err := ctx.RegisterResource("azure:pim/roleManagementPolicy:RoleManagementPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoleManagementPolicy gets an existing RoleManagementPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoleManagementPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoleManagementPolicyState, opts ...pulumi.ResourceOption) (*RoleManagementPolicy, error) {
	var resource RoleManagementPolicy
	err := ctx.ReadResource("azure:pim/roleManagementPolicy:RoleManagementPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoleManagementPolicy resources.
type roleManagementPolicyState struct {
	// An `activationRules` block as defined below.
	ActivationRules *RoleManagementPolicyActivationRules `pulumi:"activationRules"`
	// An `activeAssignmentRules` block as defined below.
	ActiveAssignmentRules *RoleManagementPolicyActiveAssignmentRules `pulumi:"activeAssignmentRules"`
	// (String) The description of this policy.
	Description *string `pulumi:"description"`
	// An `eligibleAssignmentRules` block as defined below.
	EligibleAssignmentRules *RoleManagementPolicyEligibleAssignmentRules `pulumi:"eligibleAssignmentRules"`
	// (String) The name of this policy, which is typically a UUID and may change over time.
	Name *string `pulumi:"name"`
	// A `notificationRules` block as defined below.
	NotificationRules *RoleManagementPolicyNotificationRules `pulumi:"notificationRules"`
	// The scoped Role Definition ID of the role for which this policy will apply. Changing this forces a new resource to be created.
	RoleDefinitionId *string `pulumi:"roleDefinitionId"`
	// The scope to which this Role Management Policy will apply. Can refer to a management group, a subscription, a resource group or a resource. Changing this forces a new resource to be created.
	Scope *string `pulumi:"scope"`
}

type RoleManagementPolicyState struct {
	// An `activationRules` block as defined below.
	ActivationRules RoleManagementPolicyActivationRulesPtrInput
	// An `activeAssignmentRules` block as defined below.
	ActiveAssignmentRules RoleManagementPolicyActiveAssignmentRulesPtrInput
	// (String) The description of this policy.
	Description pulumi.StringPtrInput
	// An `eligibleAssignmentRules` block as defined below.
	EligibleAssignmentRules RoleManagementPolicyEligibleAssignmentRulesPtrInput
	// (String) The name of this policy, which is typically a UUID and may change over time.
	Name pulumi.StringPtrInput
	// A `notificationRules` block as defined below.
	NotificationRules RoleManagementPolicyNotificationRulesPtrInput
	// The scoped Role Definition ID of the role for which this policy will apply. Changing this forces a new resource to be created.
	RoleDefinitionId pulumi.StringPtrInput
	// The scope to which this Role Management Policy will apply. Can refer to a management group, a subscription, a resource group or a resource. Changing this forces a new resource to be created.
	Scope pulumi.StringPtrInput
}

func (RoleManagementPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*roleManagementPolicyState)(nil)).Elem()
}

type roleManagementPolicyArgs struct {
	// An `activationRules` block as defined below.
	ActivationRules *RoleManagementPolicyActivationRules `pulumi:"activationRules"`
	// An `activeAssignmentRules` block as defined below.
	ActiveAssignmentRules *RoleManagementPolicyActiveAssignmentRules `pulumi:"activeAssignmentRules"`
	// An `eligibleAssignmentRules` block as defined below.
	EligibleAssignmentRules *RoleManagementPolicyEligibleAssignmentRules `pulumi:"eligibleAssignmentRules"`
	// A `notificationRules` block as defined below.
	NotificationRules *RoleManagementPolicyNotificationRules `pulumi:"notificationRules"`
	// The scoped Role Definition ID of the role for which this policy will apply. Changing this forces a new resource to be created.
	RoleDefinitionId string `pulumi:"roleDefinitionId"`
	// The scope to which this Role Management Policy will apply. Can refer to a management group, a subscription, a resource group or a resource. Changing this forces a new resource to be created.
	Scope string `pulumi:"scope"`
}

// The set of arguments for constructing a RoleManagementPolicy resource.
type RoleManagementPolicyArgs struct {
	// An `activationRules` block as defined below.
	ActivationRules RoleManagementPolicyActivationRulesPtrInput
	// An `activeAssignmentRules` block as defined below.
	ActiveAssignmentRules RoleManagementPolicyActiveAssignmentRulesPtrInput
	// An `eligibleAssignmentRules` block as defined below.
	EligibleAssignmentRules RoleManagementPolicyEligibleAssignmentRulesPtrInput
	// A `notificationRules` block as defined below.
	NotificationRules RoleManagementPolicyNotificationRulesPtrInput
	// The scoped Role Definition ID of the role for which this policy will apply. Changing this forces a new resource to be created.
	RoleDefinitionId pulumi.StringInput
	// The scope to which this Role Management Policy will apply. Can refer to a management group, a subscription, a resource group or a resource. Changing this forces a new resource to be created.
	Scope pulumi.StringInput
}

func (RoleManagementPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roleManagementPolicyArgs)(nil)).Elem()
}

type RoleManagementPolicyInput interface {
	pulumi.Input

	ToRoleManagementPolicyOutput() RoleManagementPolicyOutput
	ToRoleManagementPolicyOutputWithContext(ctx context.Context) RoleManagementPolicyOutput
}

func (*RoleManagementPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleManagementPolicy)(nil)).Elem()
}

func (i *RoleManagementPolicy) ToRoleManagementPolicyOutput() RoleManagementPolicyOutput {
	return i.ToRoleManagementPolicyOutputWithContext(context.Background())
}

func (i *RoleManagementPolicy) ToRoleManagementPolicyOutputWithContext(ctx context.Context) RoleManagementPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyOutput)
}

// RoleManagementPolicyArrayInput is an input type that accepts RoleManagementPolicyArray and RoleManagementPolicyArrayOutput values.
// You can construct a concrete instance of `RoleManagementPolicyArrayInput` via:
//
//	RoleManagementPolicyArray{ RoleManagementPolicyArgs{...} }
type RoleManagementPolicyArrayInput interface {
	pulumi.Input

	ToRoleManagementPolicyArrayOutput() RoleManagementPolicyArrayOutput
	ToRoleManagementPolicyArrayOutputWithContext(context.Context) RoleManagementPolicyArrayOutput
}

type RoleManagementPolicyArray []RoleManagementPolicyInput

func (RoleManagementPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoleManagementPolicy)(nil)).Elem()
}

func (i RoleManagementPolicyArray) ToRoleManagementPolicyArrayOutput() RoleManagementPolicyArrayOutput {
	return i.ToRoleManagementPolicyArrayOutputWithContext(context.Background())
}

func (i RoleManagementPolicyArray) ToRoleManagementPolicyArrayOutputWithContext(ctx context.Context) RoleManagementPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyArrayOutput)
}

// RoleManagementPolicyMapInput is an input type that accepts RoleManagementPolicyMap and RoleManagementPolicyMapOutput values.
// You can construct a concrete instance of `RoleManagementPolicyMapInput` via:
//
//	RoleManagementPolicyMap{ "key": RoleManagementPolicyArgs{...} }
type RoleManagementPolicyMapInput interface {
	pulumi.Input

	ToRoleManagementPolicyMapOutput() RoleManagementPolicyMapOutput
	ToRoleManagementPolicyMapOutputWithContext(context.Context) RoleManagementPolicyMapOutput
}

type RoleManagementPolicyMap map[string]RoleManagementPolicyInput

func (RoleManagementPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoleManagementPolicy)(nil)).Elem()
}

func (i RoleManagementPolicyMap) ToRoleManagementPolicyMapOutput() RoleManagementPolicyMapOutput {
	return i.ToRoleManagementPolicyMapOutputWithContext(context.Background())
}

func (i RoleManagementPolicyMap) ToRoleManagementPolicyMapOutputWithContext(ctx context.Context) RoleManagementPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyMapOutput)
}

type RoleManagementPolicyOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleManagementPolicy)(nil)).Elem()
}

func (o RoleManagementPolicyOutput) ToRoleManagementPolicyOutput() RoleManagementPolicyOutput {
	return o
}

func (o RoleManagementPolicyOutput) ToRoleManagementPolicyOutputWithContext(ctx context.Context) RoleManagementPolicyOutput {
	return o
}

// An `activationRules` block as defined below.
func (o RoleManagementPolicyOutput) ActivationRules() RoleManagementPolicyActivationRulesOutput {
	return o.ApplyT(func(v *RoleManagementPolicy) RoleManagementPolicyActivationRulesOutput { return v.ActivationRules }).(RoleManagementPolicyActivationRulesOutput)
}

// An `activeAssignmentRules` block as defined below.
func (o RoleManagementPolicyOutput) ActiveAssignmentRules() RoleManagementPolicyActiveAssignmentRulesOutput {
	return o.ApplyT(func(v *RoleManagementPolicy) RoleManagementPolicyActiveAssignmentRulesOutput {
		return v.ActiveAssignmentRules
	}).(RoleManagementPolicyActiveAssignmentRulesOutput)
}

// (String) The description of this policy.
func (o RoleManagementPolicyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleManagementPolicy) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// An `eligibleAssignmentRules` block as defined below.
func (o RoleManagementPolicyOutput) EligibleAssignmentRules() RoleManagementPolicyEligibleAssignmentRulesOutput {
	return o.ApplyT(func(v *RoleManagementPolicy) RoleManagementPolicyEligibleAssignmentRulesOutput {
		return v.EligibleAssignmentRules
	}).(RoleManagementPolicyEligibleAssignmentRulesOutput)
}

// (String) The name of this policy, which is typically a UUID and may change over time.
func (o RoleManagementPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleManagementPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A `notificationRules` block as defined below.
func (o RoleManagementPolicyOutput) NotificationRules() RoleManagementPolicyNotificationRulesOutput {
	return o.ApplyT(func(v *RoleManagementPolicy) RoleManagementPolicyNotificationRulesOutput { return v.NotificationRules }).(RoleManagementPolicyNotificationRulesOutput)
}

// The scoped Role Definition ID of the role for which this policy will apply. Changing this forces a new resource to be created.
func (o RoleManagementPolicyOutput) RoleDefinitionId() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleManagementPolicy) pulumi.StringOutput { return v.RoleDefinitionId }).(pulumi.StringOutput)
}

// The scope to which this Role Management Policy will apply. Can refer to a management group, a subscription, a resource group or a resource. Changing this forces a new resource to be created.
func (o RoleManagementPolicyOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleManagementPolicy) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

type RoleManagementPolicyArrayOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoleManagementPolicy)(nil)).Elem()
}

func (o RoleManagementPolicyArrayOutput) ToRoleManagementPolicyArrayOutput() RoleManagementPolicyArrayOutput {
	return o
}

func (o RoleManagementPolicyArrayOutput) ToRoleManagementPolicyArrayOutputWithContext(ctx context.Context) RoleManagementPolicyArrayOutput {
	return o
}

func (o RoleManagementPolicyArrayOutput) Index(i pulumi.IntInput) RoleManagementPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RoleManagementPolicy {
		return vs[0].([]*RoleManagementPolicy)[vs[1].(int)]
	}).(RoleManagementPolicyOutput)
}

type RoleManagementPolicyMapOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoleManagementPolicy)(nil)).Elem()
}

func (o RoleManagementPolicyMapOutput) ToRoleManagementPolicyMapOutput() RoleManagementPolicyMapOutput {
	return o
}

func (o RoleManagementPolicyMapOutput) ToRoleManagementPolicyMapOutputWithContext(ctx context.Context) RoleManagementPolicyMapOutput {
	return o
}

func (o RoleManagementPolicyMapOutput) MapIndex(k pulumi.StringInput) RoleManagementPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RoleManagementPolicy {
		return vs[0].(map[string]*RoleManagementPolicy)[vs[1].(string)]
	}).(RoleManagementPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoleManagementPolicyInput)(nil)).Elem(), &RoleManagementPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleManagementPolicyArrayInput)(nil)).Elem(), RoleManagementPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleManagementPolicyMapInput)(nil)).Elem(), RoleManagementPolicyMap{})
	pulumi.RegisterOutputType(RoleManagementPolicyOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyArrayOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyMapOutput{})
}
