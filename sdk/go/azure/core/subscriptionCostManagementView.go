// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package core

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Azure Cost Management View for a Subscription.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := core.NewSubscriptionCostManagementView(ctx, "example", &core.SubscriptionCostManagementViewArgs{
//				Accumulated: pulumi.Bool(false),
//				ChartType:   pulumi.String("StackedColumn"),
//				Dataset: &core.SubscriptionCostManagementViewDatasetArgs{
//					Aggregations: core.SubscriptionCostManagementViewDatasetAggregationArray{
//						&core.SubscriptionCostManagementViewDatasetAggregationArgs{
//							ColumnName: pulumi.String("Cost"),
//							Name:       pulumi.String("totalCost"),
//						},
//					},
//					Granularity: pulumi.String("Monthly"),
//				},
//				DisplayName:    pulumi.String("Cost View per Month"),
//				ReportType:     pulumi.String("Usage"),
//				SubscriptionId: pulumi.String("/subscription/00000000-0000-0000-0000-000000000000"),
//				Timeframe:      pulumi.String("MonthToDate"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Cost Management View for a Subscriptions can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:core/subscriptionCostManagementView:SubscriptionCostManagementView example /subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.CostManagement/views/costmanagementview
//
// ```
type SubscriptionCostManagementView struct {
	pulumi.CustomResourceState

	// Whether the costs data in the Cost Management View are accumulated over time. Changing this forces a new Cost Management View for a Subscription to be created.
	Accumulated pulumi.BoolOutput `pulumi:"accumulated"`
	// Chart type of the main view in Cost Analysis. Possible values are `Area`, `GroupedColumn`, `Line`, `StackedColumn` and `Table`.
	ChartType pulumi.StringOutput `pulumi:"chartType"`
	// A `dataset` block as defined below.
	Dataset SubscriptionCostManagementViewDatasetOutput `pulumi:"dataset"`
	// User visible input name of the Cost Management View.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// One or more `kpi` blocks as defined below, to show in Cost Analysis UI.
	Kpis SubscriptionCostManagementViewKpiArrayOutput `pulumi:"kpis"`
	// The name which should be used for this Cost Management View for a Subscription. Changing this forces a new Cost Management View for a Subscription to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// One or more `pivot` blocks as defined below, containing the configuration of 3 sub-views in the Cost Analysis UI. Non table views should have three pivots.
	Pivots SubscriptionCostManagementViewPivotArrayOutput `pulumi:"pivots"`
	// The type of the report. The only possible value is `Usage`.
	ReportType pulumi.StringOutput `pulumi:"reportType"`
	// The ID of the Subscription this View is scoped to. Changing this forces a new Cost Management View for a Subscription to be created.
	SubscriptionId pulumi.StringOutput `pulumi:"subscriptionId"`
	// The time frame for pulling data for the report. Possible values are `Custom`, `MonthToDate`, `WeekToDate` and `YearToDate`.
	Timeframe pulumi.StringOutput `pulumi:"timeframe"`
}

// NewSubscriptionCostManagementView registers a new resource with the given unique name, arguments, and options.
func NewSubscriptionCostManagementView(ctx *pulumi.Context,
	name string, args *SubscriptionCostManagementViewArgs, opts ...pulumi.ResourceOption) (*SubscriptionCostManagementView, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Accumulated == nil {
		return nil, errors.New("invalid value for required argument 'Accumulated'")
	}
	if args.ChartType == nil {
		return nil, errors.New("invalid value for required argument 'ChartType'")
	}
	if args.Dataset == nil {
		return nil, errors.New("invalid value for required argument 'Dataset'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.ReportType == nil {
		return nil, errors.New("invalid value for required argument 'ReportType'")
	}
	if args.SubscriptionId == nil {
		return nil, errors.New("invalid value for required argument 'SubscriptionId'")
	}
	if args.Timeframe == nil {
		return nil, errors.New("invalid value for required argument 'Timeframe'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SubscriptionCostManagementView
	err := ctx.RegisterResource("azure:core/subscriptionCostManagementView:SubscriptionCostManagementView", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubscriptionCostManagementView gets an existing SubscriptionCostManagementView resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubscriptionCostManagementView(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubscriptionCostManagementViewState, opts ...pulumi.ResourceOption) (*SubscriptionCostManagementView, error) {
	var resource SubscriptionCostManagementView
	err := ctx.ReadResource("azure:core/subscriptionCostManagementView:SubscriptionCostManagementView", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubscriptionCostManagementView resources.
type subscriptionCostManagementViewState struct {
	// Whether the costs data in the Cost Management View are accumulated over time. Changing this forces a new Cost Management View for a Subscription to be created.
	Accumulated *bool `pulumi:"accumulated"`
	// Chart type of the main view in Cost Analysis. Possible values are `Area`, `GroupedColumn`, `Line`, `StackedColumn` and `Table`.
	ChartType *string `pulumi:"chartType"`
	// A `dataset` block as defined below.
	Dataset *SubscriptionCostManagementViewDataset `pulumi:"dataset"`
	// User visible input name of the Cost Management View.
	DisplayName *string `pulumi:"displayName"`
	// One or more `kpi` blocks as defined below, to show in Cost Analysis UI.
	Kpis []SubscriptionCostManagementViewKpi `pulumi:"kpis"`
	// The name which should be used for this Cost Management View for a Subscription. Changing this forces a new Cost Management View for a Subscription to be created.
	Name *string `pulumi:"name"`
	// One or more `pivot` blocks as defined below, containing the configuration of 3 sub-views in the Cost Analysis UI. Non table views should have three pivots.
	Pivots []SubscriptionCostManagementViewPivot `pulumi:"pivots"`
	// The type of the report. The only possible value is `Usage`.
	ReportType *string `pulumi:"reportType"`
	// The ID of the Subscription this View is scoped to. Changing this forces a new Cost Management View for a Subscription to be created.
	SubscriptionId *string `pulumi:"subscriptionId"`
	// The time frame for pulling data for the report. Possible values are `Custom`, `MonthToDate`, `WeekToDate` and `YearToDate`.
	Timeframe *string `pulumi:"timeframe"`
}

type SubscriptionCostManagementViewState struct {
	// Whether the costs data in the Cost Management View are accumulated over time. Changing this forces a new Cost Management View for a Subscription to be created.
	Accumulated pulumi.BoolPtrInput
	// Chart type of the main view in Cost Analysis. Possible values are `Area`, `GroupedColumn`, `Line`, `StackedColumn` and `Table`.
	ChartType pulumi.StringPtrInput
	// A `dataset` block as defined below.
	Dataset SubscriptionCostManagementViewDatasetPtrInput
	// User visible input name of the Cost Management View.
	DisplayName pulumi.StringPtrInput
	// One or more `kpi` blocks as defined below, to show in Cost Analysis UI.
	Kpis SubscriptionCostManagementViewKpiArrayInput
	// The name which should be used for this Cost Management View for a Subscription. Changing this forces a new Cost Management View for a Subscription to be created.
	Name pulumi.StringPtrInput
	// One or more `pivot` blocks as defined below, containing the configuration of 3 sub-views in the Cost Analysis UI. Non table views should have three pivots.
	Pivots SubscriptionCostManagementViewPivotArrayInput
	// The type of the report. The only possible value is `Usage`.
	ReportType pulumi.StringPtrInput
	// The ID of the Subscription this View is scoped to. Changing this forces a new Cost Management View for a Subscription to be created.
	SubscriptionId pulumi.StringPtrInput
	// The time frame for pulling data for the report. Possible values are `Custom`, `MonthToDate`, `WeekToDate` and `YearToDate`.
	Timeframe pulumi.StringPtrInput
}

func (SubscriptionCostManagementViewState) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionCostManagementViewState)(nil)).Elem()
}

type subscriptionCostManagementViewArgs struct {
	// Whether the costs data in the Cost Management View are accumulated over time. Changing this forces a new Cost Management View for a Subscription to be created.
	Accumulated bool `pulumi:"accumulated"`
	// Chart type of the main view in Cost Analysis. Possible values are `Area`, `GroupedColumn`, `Line`, `StackedColumn` and `Table`.
	ChartType string `pulumi:"chartType"`
	// A `dataset` block as defined below.
	Dataset SubscriptionCostManagementViewDataset `pulumi:"dataset"`
	// User visible input name of the Cost Management View.
	DisplayName string `pulumi:"displayName"`
	// One or more `kpi` blocks as defined below, to show in Cost Analysis UI.
	Kpis []SubscriptionCostManagementViewKpi `pulumi:"kpis"`
	// The name which should be used for this Cost Management View for a Subscription. Changing this forces a new Cost Management View for a Subscription to be created.
	Name *string `pulumi:"name"`
	// One or more `pivot` blocks as defined below, containing the configuration of 3 sub-views in the Cost Analysis UI. Non table views should have three pivots.
	Pivots []SubscriptionCostManagementViewPivot `pulumi:"pivots"`
	// The type of the report. The only possible value is `Usage`.
	ReportType string `pulumi:"reportType"`
	// The ID of the Subscription this View is scoped to. Changing this forces a new Cost Management View for a Subscription to be created.
	SubscriptionId string `pulumi:"subscriptionId"`
	// The time frame for pulling data for the report. Possible values are `Custom`, `MonthToDate`, `WeekToDate` and `YearToDate`.
	Timeframe string `pulumi:"timeframe"`
}

// The set of arguments for constructing a SubscriptionCostManagementView resource.
type SubscriptionCostManagementViewArgs struct {
	// Whether the costs data in the Cost Management View are accumulated over time. Changing this forces a new Cost Management View for a Subscription to be created.
	Accumulated pulumi.BoolInput
	// Chart type of the main view in Cost Analysis. Possible values are `Area`, `GroupedColumn`, `Line`, `StackedColumn` and `Table`.
	ChartType pulumi.StringInput
	// A `dataset` block as defined below.
	Dataset SubscriptionCostManagementViewDatasetInput
	// User visible input name of the Cost Management View.
	DisplayName pulumi.StringInput
	// One or more `kpi` blocks as defined below, to show in Cost Analysis UI.
	Kpis SubscriptionCostManagementViewKpiArrayInput
	// The name which should be used for this Cost Management View for a Subscription. Changing this forces a new Cost Management View for a Subscription to be created.
	Name pulumi.StringPtrInput
	// One or more `pivot` blocks as defined below, containing the configuration of 3 sub-views in the Cost Analysis UI. Non table views should have three pivots.
	Pivots SubscriptionCostManagementViewPivotArrayInput
	// The type of the report. The only possible value is `Usage`.
	ReportType pulumi.StringInput
	// The ID of the Subscription this View is scoped to. Changing this forces a new Cost Management View for a Subscription to be created.
	SubscriptionId pulumi.StringInput
	// The time frame for pulling data for the report. Possible values are `Custom`, `MonthToDate`, `WeekToDate` and `YearToDate`.
	Timeframe pulumi.StringInput
}

func (SubscriptionCostManagementViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionCostManagementViewArgs)(nil)).Elem()
}

type SubscriptionCostManagementViewInput interface {
	pulumi.Input

	ToSubscriptionCostManagementViewOutput() SubscriptionCostManagementViewOutput
	ToSubscriptionCostManagementViewOutputWithContext(ctx context.Context) SubscriptionCostManagementViewOutput
}

func (*SubscriptionCostManagementView) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionCostManagementView)(nil)).Elem()
}

func (i *SubscriptionCostManagementView) ToSubscriptionCostManagementViewOutput() SubscriptionCostManagementViewOutput {
	return i.ToSubscriptionCostManagementViewOutputWithContext(context.Background())
}

func (i *SubscriptionCostManagementView) ToSubscriptionCostManagementViewOutputWithContext(ctx context.Context) SubscriptionCostManagementViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionCostManagementViewOutput)
}

// SubscriptionCostManagementViewArrayInput is an input type that accepts SubscriptionCostManagementViewArray and SubscriptionCostManagementViewArrayOutput values.
// You can construct a concrete instance of `SubscriptionCostManagementViewArrayInput` via:
//
//	SubscriptionCostManagementViewArray{ SubscriptionCostManagementViewArgs{...} }
type SubscriptionCostManagementViewArrayInput interface {
	pulumi.Input

	ToSubscriptionCostManagementViewArrayOutput() SubscriptionCostManagementViewArrayOutput
	ToSubscriptionCostManagementViewArrayOutputWithContext(context.Context) SubscriptionCostManagementViewArrayOutput
}

type SubscriptionCostManagementViewArray []SubscriptionCostManagementViewInput

func (SubscriptionCostManagementViewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubscriptionCostManagementView)(nil)).Elem()
}

func (i SubscriptionCostManagementViewArray) ToSubscriptionCostManagementViewArrayOutput() SubscriptionCostManagementViewArrayOutput {
	return i.ToSubscriptionCostManagementViewArrayOutputWithContext(context.Background())
}

func (i SubscriptionCostManagementViewArray) ToSubscriptionCostManagementViewArrayOutputWithContext(ctx context.Context) SubscriptionCostManagementViewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionCostManagementViewArrayOutput)
}

// SubscriptionCostManagementViewMapInput is an input type that accepts SubscriptionCostManagementViewMap and SubscriptionCostManagementViewMapOutput values.
// You can construct a concrete instance of `SubscriptionCostManagementViewMapInput` via:
//
//	SubscriptionCostManagementViewMap{ "key": SubscriptionCostManagementViewArgs{...} }
type SubscriptionCostManagementViewMapInput interface {
	pulumi.Input

	ToSubscriptionCostManagementViewMapOutput() SubscriptionCostManagementViewMapOutput
	ToSubscriptionCostManagementViewMapOutputWithContext(context.Context) SubscriptionCostManagementViewMapOutput
}

type SubscriptionCostManagementViewMap map[string]SubscriptionCostManagementViewInput

func (SubscriptionCostManagementViewMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubscriptionCostManagementView)(nil)).Elem()
}

func (i SubscriptionCostManagementViewMap) ToSubscriptionCostManagementViewMapOutput() SubscriptionCostManagementViewMapOutput {
	return i.ToSubscriptionCostManagementViewMapOutputWithContext(context.Background())
}

func (i SubscriptionCostManagementViewMap) ToSubscriptionCostManagementViewMapOutputWithContext(ctx context.Context) SubscriptionCostManagementViewMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionCostManagementViewMapOutput)
}

type SubscriptionCostManagementViewOutput struct{ *pulumi.OutputState }

func (SubscriptionCostManagementViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionCostManagementView)(nil)).Elem()
}

func (o SubscriptionCostManagementViewOutput) ToSubscriptionCostManagementViewOutput() SubscriptionCostManagementViewOutput {
	return o
}

func (o SubscriptionCostManagementViewOutput) ToSubscriptionCostManagementViewOutputWithContext(ctx context.Context) SubscriptionCostManagementViewOutput {
	return o
}

// Whether the costs data in the Cost Management View are accumulated over time. Changing this forces a new Cost Management View for a Subscription to be created.
func (o SubscriptionCostManagementViewOutput) Accumulated() pulumi.BoolOutput {
	return o.ApplyT(func(v *SubscriptionCostManagementView) pulumi.BoolOutput { return v.Accumulated }).(pulumi.BoolOutput)
}

// Chart type of the main view in Cost Analysis. Possible values are `Area`, `GroupedColumn`, `Line`, `StackedColumn` and `Table`.
func (o SubscriptionCostManagementViewOutput) ChartType() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionCostManagementView) pulumi.StringOutput { return v.ChartType }).(pulumi.StringOutput)
}

// A `dataset` block as defined below.
func (o SubscriptionCostManagementViewOutput) Dataset() SubscriptionCostManagementViewDatasetOutput {
	return o.ApplyT(func(v *SubscriptionCostManagementView) SubscriptionCostManagementViewDatasetOutput { return v.Dataset }).(SubscriptionCostManagementViewDatasetOutput)
}

// User visible input name of the Cost Management View.
func (o SubscriptionCostManagementViewOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionCostManagementView) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// One or more `kpi` blocks as defined below, to show in Cost Analysis UI.
func (o SubscriptionCostManagementViewOutput) Kpis() SubscriptionCostManagementViewKpiArrayOutput {
	return o.ApplyT(func(v *SubscriptionCostManagementView) SubscriptionCostManagementViewKpiArrayOutput { return v.Kpis }).(SubscriptionCostManagementViewKpiArrayOutput)
}

// The name which should be used for this Cost Management View for a Subscription. Changing this forces a new Cost Management View for a Subscription to be created.
func (o SubscriptionCostManagementViewOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionCostManagementView) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// One or more `pivot` blocks as defined below, containing the configuration of 3 sub-views in the Cost Analysis UI. Non table views should have three pivots.
func (o SubscriptionCostManagementViewOutput) Pivots() SubscriptionCostManagementViewPivotArrayOutput {
	return o.ApplyT(func(v *SubscriptionCostManagementView) SubscriptionCostManagementViewPivotArrayOutput {
		return v.Pivots
	}).(SubscriptionCostManagementViewPivotArrayOutput)
}

// The type of the report. The only possible value is `Usage`.
func (o SubscriptionCostManagementViewOutput) ReportType() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionCostManagementView) pulumi.StringOutput { return v.ReportType }).(pulumi.StringOutput)
}

// The ID of the Subscription this View is scoped to. Changing this forces a new Cost Management View for a Subscription to be created.
func (o SubscriptionCostManagementViewOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionCostManagementView) pulumi.StringOutput { return v.SubscriptionId }).(pulumi.StringOutput)
}

// The time frame for pulling data for the report. Possible values are `Custom`, `MonthToDate`, `WeekToDate` and `YearToDate`.
func (o SubscriptionCostManagementViewOutput) Timeframe() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionCostManagementView) pulumi.StringOutput { return v.Timeframe }).(pulumi.StringOutput)
}

type SubscriptionCostManagementViewArrayOutput struct{ *pulumi.OutputState }

func (SubscriptionCostManagementViewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubscriptionCostManagementView)(nil)).Elem()
}

func (o SubscriptionCostManagementViewArrayOutput) ToSubscriptionCostManagementViewArrayOutput() SubscriptionCostManagementViewArrayOutput {
	return o
}

func (o SubscriptionCostManagementViewArrayOutput) ToSubscriptionCostManagementViewArrayOutputWithContext(ctx context.Context) SubscriptionCostManagementViewArrayOutput {
	return o
}

func (o SubscriptionCostManagementViewArrayOutput) Index(i pulumi.IntInput) SubscriptionCostManagementViewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SubscriptionCostManagementView {
		return vs[0].([]*SubscriptionCostManagementView)[vs[1].(int)]
	}).(SubscriptionCostManagementViewOutput)
}

type SubscriptionCostManagementViewMapOutput struct{ *pulumi.OutputState }

func (SubscriptionCostManagementViewMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubscriptionCostManagementView)(nil)).Elem()
}

func (o SubscriptionCostManagementViewMapOutput) ToSubscriptionCostManagementViewMapOutput() SubscriptionCostManagementViewMapOutput {
	return o
}

func (o SubscriptionCostManagementViewMapOutput) ToSubscriptionCostManagementViewMapOutputWithContext(ctx context.Context) SubscriptionCostManagementViewMapOutput {
	return o
}

func (o SubscriptionCostManagementViewMapOutput) MapIndex(k pulumi.StringInput) SubscriptionCostManagementViewOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SubscriptionCostManagementView {
		return vs[0].(map[string]*SubscriptionCostManagementView)[vs[1].(string)]
	}).(SubscriptionCostManagementViewOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionCostManagementViewInput)(nil)).Elem(), &SubscriptionCostManagementView{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionCostManagementViewArrayInput)(nil)).Elem(), SubscriptionCostManagementViewArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionCostManagementViewMapInput)(nil)).Elem(), SubscriptionCostManagementViewMap{})
	pulumi.RegisterOutputType(SubscriptionCostManagementViewOutput{})
	pulumi.RegisterOutputType(SubscriptionCostManagementViewArrayOutput{})
	pulumi.RegisterOutputType(SubscriptionCostManagementViewMapOutput{})
}
