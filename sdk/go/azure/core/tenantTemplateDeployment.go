// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package core

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Tenant Template Deployments can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:core/tenantTemplateDeployment:TenantTemplateDeployment example /providers/Microsoft.Resources/deployments/deploy1
// ```
type TenantTemplateDeployment struct {
	pulumi.CustomResourceState

	// The Debug Level which should be used for this Resource Group Template Deployment. Possible values are `none`, `requestContent`, `responseContent` and `requestContent, responseContent`.
	DebugLevel pulumi.StringPtrOutput `pulumi:"debugLevel"`
	// The Azure Region where the Template should exist. Changing this forces a new Template to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name which should be used for this Template. Changing this forces a new Template to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The JSON Content of the Outputs of the ARM Template Deployment.
	OutputContent pulumi.StringOutput `pulumi:"outputContent"`
	// The contents of the ARM Template parameters file - containing a JSON list of parameters.
	ParametersContent pulumi.StringOutput `pulumi:"parametersContent"`
	// A mapping of tags which should be assigned to the Template.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The contents of the ARM Template which should be deployed into this Resource Group. Cannot be specified with `templateSpecVersionId`.
	TemplateContent pulumi.StringOutput `pulumi:"templateContent"`
	// The ID of the Template Spec Version to deploy. Cannot be specified with `templateContent`.
	TemplateSpecVersionId pulumi.StringPtrOutput `pulumi:"templateSpecVersionId"`
}

// NewTenantTemplateDeployment registers a new resource with the given unique name, arguments, and options.
func NewTenantTemplateDeployment(ctx *pulumi.Context,
	name string, args *TenantTemplateDeploymentArgs, opts ...pulumi.ResourceOption) (*TenantTemplateDeployment, error) {
	if args == nil {
		args = &TenantTemplateDeploymentArgs{}
	}

	var resource TenantTemplateDeployment
	err := ctx.RegisterResource("azure:core/tenantTemplateDeployment:TenantTemplateDeployment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTenantTemplateDeployment gets an existing TenantTemplateDeployment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTenantTemplateDeployment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TenantTemplateDeploymentState, opts ...pulumi.ResourceOption) (*TenantTemplateDeployment, error) {
	var resource TenantTemplateDeployment
	err := ctx.ReadResource("azure:core/tenantTemplateDeployment:TenantTemplateDeployment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TenantTemplateDeployment resources.
type tenantTemplateDeploymentState struct {
	// The Debug Level which should be used for this Resource Group Template Deployment. Possible values are `none`, `requestContent`, `responseContent` and `requestContent, responseContent`.
	DebugLevel *string `pulumi:"debugLevel"`
	// The Azure Region where the Template should exist. Changing this forces a new Template to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Template. Changing this forces a new Template to be created.
	Name *string `pulumi:"name"`
	// The JSON Content of the Outputs of the ARM Template Deployment.
	OutputContent *string `pulumi:"outputContent"`
	// The contents of the ARM Template parameters file - containing a JSON list of parameters.
	ParametersContent *string `pulumi:"parametersContent"`
	// A mapping of tags which should be assigned to the Template.
	Tags map[string]string `pulumi:"tags"`
	// The contents of the ARM Template which should be deployed into this Resource Group. Cannot be specified with `templateSpecVersionId`.
	TemplateContent *string `pulumi:"templateContent"`
	// The ID of the Template Spec Version to deploy. Cannot be specified with `templateContent`.
	TemplateSpecVersionId *string `pulumi:"templateSpecVersionId"`
}

type TenantTemplateDeploymentState struct {
	// The Debug Level which should be used for this Resource Group Template Deployment. Possible values are `none`, `requestContent`, `responseContent` and `requestContent, responseContent`.
	DebugLevel pulumi.StringPtrInput
	// The Azure Region where the Template should exist. Changing this forces a new Template to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Template. Changing this forces a new Template to be created.
	Name pulumi.StringPtrInput
	// The JSON Content of the Outputs of the ARM Template Deployment.
	OutputContent pulumi.StringPtrInput
	// The contents of the ARM Template parameters file - containing a JSON list of parameters.
	ParametersContent pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Template.
	Tags pulumi.StringMapInput
	// The contents of the ARM Template which should be deployed into this Resource Group. Cannot be specified with `templateSpecVersionId`.
	TemplateContent pulumi.StringPtrInput
	// The ID of the Template Spec Version to deploy. Cannot be specified with `templateContent`.
	TemplateSpecVersionId pulumi.StringPtrInput
}

func (TenantTemplateDeploymentState) ElementType() reflect.Type {
	return reflect.TypeOf((*tenantTemplateDeploymentState)(nil)).Elem()
}

type tenantTemplateDeploymentArgs struct {
	// The Debug Level which should be used for this Resource Group Template Deployment. Possible values are `none`, `requestContent`, `responseContent` and `requestContent, responseContent`.
	DebugLevel *string `pulumi:"debugLevel"`
	// The Azure Region where the Template should exist. Changing this forces a new Template to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Template. Changing this forces a new Template to be created.
	Name *string `pulumi:"name"`
	// The contents of the ARM Template parameters file - containing a JSON list of parameters.
	ParametersContent *string `pulumi:"parametersContent"`
	// A mapping of tags which should be assigned to the Template.
	Tags map[string]string `pulumi:"tags"`
	// The contents of the ARM Template which should be deployed into this Resource Group. Cannot be specified with `templateSpecVersionId`.
	TemplateContent *string `pulumi:"templateContent"`
	// The ID of the Template Spec Version to deploy. Cannot be specified with `templateContent`.
	TemplateSpecVersionId *string `pulumi:"templateSpecVersionId"`
}

// The set of arguments for constructing a TenantTemplateDeployment resource.
type TenantTemplateDeploymentArgs struct {
	// The Debug Level which should be used for this Resource Group Template Deployment. Possible values are `none`, `requestContent`, `responseContent` and `requestContent, responseContent`.
	DebugLevel pulumi.StringPtrInput
	// The Azure Region where the Template should exist. Changing this forces a new Template to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Template. Changing this forces a new Template to be created.
	Name pulumi.StringPtrInput
	// The contents of the ARM Template parameters file - containing a JSON list of parameters.
	ParametersContent pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Template.
	Tags pulumi.StringMapInput
	// The contents of the ARM Template which should be deployed into this Resource Group. Cannot be specified with `templateSpecVersionId`.
	TemplateContent pulumi.StringPtrInput
	// The ID of the Template Spec Version to deploy. Cannot be specified with `templateContent`.
	TemplateSpecVersionId pulumi.StringPtrInput
}

func (TenantTemplateDeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tenantTemplateDeploymentArgs)(nil)).Elem()
}

type TenantTemplateDeploymentInput interface {
	pulumi.Input

	ToTenantTemplateDeploymentOutput() TenantTemplateDeploymentOutput
	ToTenantTemplateDeploymentOutputWithContext(ctx context.Context) TenantTemplateDeploymentOutput
}

func (*TenantTemplateDeployment) ElementType() reflect.Type {
	return reflect.TypeOf((*TenantTemplateDeployment)(nil))
}

func (i *TenantTemplateDeployment) ToTenantTemplateDeploymentOutput() TenantTemplateDeploymentOutput {
	return i.ToTenantTemplateDeploymentOutputWithContext(context.Background())
}

func (i *TenantTemplateDeployment) ToTenantTemplateDeploymentOutputWithContext(ctx context.Context) TenantTemplateDeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantTemplateDeploymentOutput)
}

func (i *TenantTemplateDeployment) ToTenantTemplateDeploymentPtrOutput() TenantTemplateDeploymentPtrOutput {
	return i.ToTenantTemplateDeploymentPtrOutputWithContext(context.Background())
}

func (i *TenantTemplateDeployment) ToTenantTemplateDeploymentPtrOutputWithContext(ctx context.Context) TenantTemplateDeploymentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantTemplateDeploymentPtrOutput)
}

type TenantTemplateDeploymentPtrInput interface {
	pulumi.Input

	ToTenantTemplateDeploymentPtrOutput() TenantTemplateDeploymentPtrOutput
	ToTenantTemplateDeploymentPtrOutputWithContext(ctx context.Context) TenantTemplateDeploymentPtrOutput
}

type tenantTemplateDeploymentPtrType TenantTemplateDeploymentArgs

func (*tenantTemplateDeploymentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TenantTemplateDeployment)(nil))
}

func (i *tenantTemplateDeploymentPtrType) ToTenantTemplateDeploymentPtrOutput() TenantTemplateDeploymentPtrOutput {
	return i.ToTenantTemplateDeploymentPtrOutputWithContext(context.Background())
}

func (i *tenantTemplateDeploymentPtrType) ToTenantTemplateDeploymentPtrOutputWithContext(ctx context.Context) TenantTemplateDeploymentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantTemplateDeploymentPtrOutput)
}

// TenantTemplateDeploymentArrayInput is an input type that accepts TenantTemplateDeploymentArray and TenantTemplateDeploymentArrayOutput values.
// You can construct a concrete instance of `TenantTemplateDeploymentArrayInput` via:
//
//          TenantTemplateDeploymentArray{ TenantTemplateDeploymentArgs{...} }
type TenantTemplateDeploymentArrayInput interface {
	pulumi.Input

	ToTenantTemplateDeploymentArrayOutput() TenantTemplateDeploymentArrayOutput
	ToTenantTemplateDeploymentArrayOutputWithContext(context.Context) TenantTemplateDeploymentArrayOutput
}

type TenantTemplateDeploymentArray []TenantTemplateDeploymentInput

func (TenantTemplateDeploymentArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*TenantTemplateDeployment)(nil))
}

func (i TenantTemplateDeploymentArray) ToTenantTemplateDeploymentArrayOutput() TenantTemplateDeploymentArrayOutput {
	return i.ToTenantTemplateDeploymentArrayOutputWithContext(context.Background())
}

func (i TenantTemplateDeploymentArray) ToTenantTemplateDeploymentArrayOutputWithContext(ctx context.Context) TenantTemplateDeploymentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantTemplateDeploymentArrayOutput)
}

// TenantTemplateDeploymentMapInput is an input type that accepts TenantTemplateDeploymentMap and TenantTemplateDeploymentMapOutput values.
// You can construct a concrete instance of `TenantTemplateDeploymentMapInput` via:
//
//          TenantTemplateDeploymentMap{ "key": TenantTemplateDeploymentArgs{...} }
type TenantTemplateDeploymentMapInput interface {
	pulumi.Input

	ToTenantTemplateDeploymentMapOutput() TenantTemplateDeploymentMapOutput
	ToTenantTemplateDeploymentMapOutputWithContext(context.Context) TenantTemplateDeploymentMapOutput
}

type TenantTemplateDeploymentMap map[string]TenantTemplateDeploymentInput

func (TenantTemplateDeploymentMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*TenantTemplateDeployment)(nil))
}

func (i TenantTemplateDeploymentMap) ToTenantTemplateDeploymentMapOutput() TenantTemplateDeploymentMapOutput {
	return i.ToTenantTemplateDeploymentMapOutputWithContext(context.Background())
}

func (i TenantTemplateDeploymentMap) ToTenantTemplateDeploymentMapOutputWithContext(ctx context.Context) TenantTemplateDeploymentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantTemplateDeploymentMapOutput)
}

type TenantTemplateDeploymentOutput struct {
	*pulumi.OutputState
}

func (TenantTemplateDeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TenantTemplateDeployment)(nil))
}

func (o TenantTemplateDeploymentOutput) ToTenantTemplateDeploymentOutput() TenantTemplateDeploymentOutput {
	return o
}

func (o TenantTemplateDeploymentOutput) ToTenantTemplateDeploymentOutputWithContext(ctx context.Context) TenantTemplateDeploymentOutput {
	return o
}

func (o TenantTemplateDeploymentOutput) ToTenantTemplateDeploymentPtrOutput() TenantTemplateDeploymentPtrOutput {
	return o.ToTenantTemplateDeploymentPtrOutputWithContext(context.Background())
}

func (o TenantTemplateDeploymentOutput) ToTenantTemplateDeploymentPtrOutputWithContext(ctx context.Context) TenantTemplateDeploymentPtrOutput {
	return o.ApplyT(func(v TenantTemplateDeployment) *TenantTemplateDeployment {
		return &v
	}).(TenantTemplateDeploymentPtrOutput)
}

type TenantTemplateDeploymentPtrOutput struct {
	*pulumi.OutputState
}

func (TenantTemplateDeploymentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TenantTemplateDeployment)(nil))
}

func (o TenantTemplateDeploymentPtrOutput) ToTenantTemplateDeploymentPtrOutput() TenantTemplateDeploymentPtrOutput {
	return o
}

func (o TenantTemplateDeploymentPtrOutput) ToTenantTemplateDeploymentPtrOutputWithContext(ctx context.Context) TenantTemplateDeploymentPtrOutput {
	return o
}

type TenantTemplateDeploymentArrayOutput struct{ *pulumi.OutputState }

func (TenantTemplateDeploymentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TenantTemplateDeployment)(nil))
}

func (o TenantTemplateDeploymentArrayOutput) ToTenantTemplateDeploymentArrayOutput() TenantTemplateDeploymentArrayOutput {
	return o
}

func (o TenantTemplateDeploymentArrayOutput) ToTenantTemplateDeploymentArrayOutputWithContext(ctx context.Context) TenantTemplateDeploymentArrayOutput {
	return o
}

func (o TenantTemplateDeploymentArrayOutput) Index(i pulumi.IntInput) TenantTemplateDeploymentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TenantTemplateDeployment {
		return vs[0].([]TenantTemplateDeployment)[vs[1].(int)]
	}).(TenantTemplateDeploymentOutput)
}

type TenantTemplateDeploymentMapOutput struct{ *pulumi.OutputState }

func (TenantTemplateDeploymentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]TenantTemplateDeployment)(nil))
}

func (o TenantTemplateDeploymentMapOutput) ToTenantTemplateDeploymentMapOutput() TenantTemplateDeploymentMapOutput {
	return o
}

func (o TenantTemplateDeploymentMapOutput) ToTenantTemplateDeploymentMapOutputWithContext(ctx context.Context) TenantTemplateDeploymentMapOutput {
	return o
}

func (o TenantTemplateDeploymentMapOutput) MapIndex(k pulumi.StringInput) TenantTemplateDeploymentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) TenantTemplateDeployment {
		return vs[0].(map[string]TenantTemplateDeployment)[vs[1].(string)]
	}).(TenantTemplateDeploymentOutput)
}

func init() {
	pulumi.RegisterOutputType(TenantTemplateDeploymentOutput{})
	pulumi.RegisterOutputType(TenantTemplateDeploymentPtrOutput{})
	pulumi.RegisterOutputType(TenantTemplateDeploymentArrayOutput{})
	pulumi.RegisterOutputType(TenantTemplateDeploymentMapOutput{})
}
