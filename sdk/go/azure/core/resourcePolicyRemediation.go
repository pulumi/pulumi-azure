// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package core

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Azure Resource Policy Remediation.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/policy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West US"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "exampleVirtualNetwork", &network.VirtualNetworkArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleDefinition, err := policy.NewDefinition(ctx, "exampleDefinition", &policy.DefinitionArgs{
//				PolicyType:  pulumi.String("Custom"),
//				Mode:        pulumi.String("All"),
//				DisplayName: pulumi.String("my-policy-definition"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = core.NewResourcePolicyAssignment(ctx, "exampleResourcePolicyAssignment", &core.ResourcePolicyAssignmentArgs{
//				ResourceId:         exampleVirtualNetwork.ID(),
//				PolicyDefinitionId: exampleDefinition.ID(),
//				Parameters: exampleResourceGroup.Location.ApplyT(func(location string) (pulumi.String, error) {
//					var _zero pulumi.String
//					tmpJSON0, err := json.Marshal(map[string]interface{}{
//						"listOfAllowedLocations": map[string]interface{}{
//							"value": []string{
//								location,
//								"East US",
//							},
//						},
//					})
//					if err != nil {
//						return _zero, err
//					}
//					json0 := string(tmpJSON0)
//					return pulumi.String(json0), nil
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			exampleResourceGroupPolicyAssignment, err := core.NewResourceGroupPolicyAssignment(ctx, "exampleResourceGroupPolicyAssignment", &core.ResourceGroupPolicyAssignmentArgs{
//				ResourceGroupId:    exampleResourceGroup.ID(),
//				PolicyDefinitionId: exampleDefinition.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = core.NewResourcePolicyRemediation(ctx, "exampleResourcePolicyRemediation", &core.ResourcePolicyRemediationArgs{
//				ResourceId:         exampleVirtualNetwork.ID(),
//				PolicyAssignmentId: exampleResourceGroupPolicyAssignment.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Policy Remediations can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:core/resourcePolicyRemediation:ResourcePolicyRemediation example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Compute/virtualMachines/vm1/providers/Microsoft.PolicyInsights/remediations/remediation1
//
// ```
type ResourcePolicyRemediation struct {
	pulumi.CustomResourceState

	// A number between 0.0 to 1.0 representing the percentage failure threshold. The remediation will fail if the percentage of failed remediation operations (i.e. failed deployments) exceeds this threshold.
	FailurePercentage pulumi.Float64PtrOutput `pulumi:"failurePercentage"`
	// A list of the resource locations that will be remediated.
	LocationFilters pulumi.StringArrayOutput `pulumi:"locationFilters"`
	// The name of the Policy Remediation. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Determines how many resources to remediate at any given time. Can be used to increase or reduce the pace of the remediation. If not provided, the default parallel deployments value is used.
	ParallelDeployments pulumi.IntPtrOutput `pulumi:"parallelDeployments"`
	// The ID of the Policy Assignment that should be remediated.
	PolicyAssignmentId pulumi.StringOutput `pulumi:"policyAssignmentId"`
	// The unique ID for the policy definition within the policy set definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
	//
	// > **Note:** This property has been deprecated and will be removed in version 4.0 of the provider in favour of `policyDefinitionReferenceId`.
	//
	// Deprecated: `policy_definition_id` will be removed in version 4.0 of the AzureRM Provider in favour of `policy_definition_reference_id`.
	PolicyDefinitionId pulumi.StringPtrOutput `pulumi:"policyDefinitionId"`
	// The unique ID for the policy definition reference within the policy set definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
	PolicyDefinitionReferenceId pulumi.StringPtrOutput `pulumi:"policyDefinitionReferenceId"`
	// Determines the max number of resources that can be remediated by the remediation job. If not provided, the default resource count is used.
	ResourceCount pulumi.IntPtrOutput `pulumi:"resourceCount"`
	// The way that resources to remediate are discovered. Possible values are `ExistingNonCompliant`, `ReEvaluateCompliance`. Defaults to `ExistingNonCompliant`.
	ResourceDiscoveryMode pulumi.StringPtrOutput `pulumi:"resourceDiscoveryMode"`
	// The Resource ID at which the Policy Remediation should be applied. Changing this forces a new resource to be created.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
}

// NewResourcePolicyRemediation registers a new resource with the given unique name, arguments, and options.
func NewResourcePolicyRemediation(ctx *pulumi.Context,
	name string, args *ResourcePolicyRemediationArgs, opts ...pulumi.ResourceOption) (*ResourcePolicyRemediation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyAssignmentId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyAssignmentId'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourcePolicyRemediation
	err := ctx.RegisterResource("azure:core/resourcePolicyRemediation:ResourcePolicyRemediation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourcePolicyRemediation gets an existing ResourcePolicyRemediation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourcePolicyRemediation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourcePolicyRemediationState, opts ...pulumi.ResourceOption) (*ResourcePolicyRemediation, error) {
	var resource ResourcePolicyRemediation
	err := ctx.ReadResource("azure:core/resourcePolicyRemediation:ResourcePolicyRemediation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourcePolicyRemediation resources.
type resourcePolicyRemediationState struct {
	// A number between 0.0 to 1.0 representing the percentage failure threshold. The remediation will fail if the percentage of failed remediation operations (i.e. failed deployments) exceeds this threshold.
	FailurePercentage *float64 `pulumi:"failurePercentage"`
	// A list of the resource locations that will be remediated.
	LocationFilters []string `pulumi:"locationFilters"`
	// The name of the Policy Remediation. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Determines how many resources to remediate at any given time. Can be used to increase or reduce the pace of the remediation. If not provided, the default parallel deployments value is used.
	ParallelDeployments *int `pulumi:"parallelDeployments"`
	// The ID of the Policy Assignment that should be remediated.
	PolicyAssignmentId *string `pulumi:"policyAssignmentId"`
	// The unique ID for the policy definition within the policy set definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
	//
	// > **Note:** This property has been deprecated and will be removed in version 4.0 of the provider in favour of `policyDefinitionReferenceId`.
	//
	// Deprecated: `policy_definition_id` will be removed in version 4.0 of the AzureRM Provider in favour of `policy_definition_reference_id`.
	PolicyDefinitionId *string `pulumi:"policyDefinitionId"`
	// The unique ID for the policy definition reference within the policy set definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
	PolicyDefinitionReferenceId *string `pulumi:"policyDefinitionReferenceId"`
	// Determines the max number of resources that can be remediated by the remediation job. If not provided, the default resource count is used.
	ResourceCount *int `pulumi:"resourceCount"`
	// The way that resources to remediate are discovered. Possible values are `ExistingNonCompliant`, `ReEvaluateCompliance`. Defaults to `ExistingNonCompliant`.
	ResourceDiscoveryMode *string `pulumi:"resourceDiscoveryMode"`
	// The Resource ID at which the Policy Remediation should be applied. Changing this forces a new resource to be created.
	ResourceId *string `pulumi:"resourceId"`
}

type ResourcePolicyRemediationState struct {
	// A number between 0.0 to 1.0 representing the percentage failure threshold. The remediation will fail if the percentage of failed remediation operations (i.e. failed deployments) exceeds this threshold.
	FailurePercentage pulumi.Float64PtrInput
	// A list of the resource locations that will be remediated.
	LocationFilters pulumi.StringArrayInput
	// The name of the Policy Remediation. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Determines how many resources to remediate at any given time. Can be used to increase or reduce the pace of the remediation. If not provided, the default parallel deployments value is used.
	ParallelDeployments pulumi.IntPtrInput
	// The ID of the Policy Assignment that should be remediated.
	PolicyAssignmentId pulumi.StringPtrInput
	// The unique ID for the policy definition within the policy set definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
	//
	// > **Note:** This property has been deprecated and will be removed in version 4.0 of the provider in favour of `policyDefinitionReferenceId`.
	//
	// Deprecated: `policy_definition_id` will be removed in version 4.0 of the AzureRM Provider in favour of `policy_definition_reference_id`.
	PolicyDefinitionId pulumi.StringPtrInput
	// The unique ID for the policy definition reference within the policy set definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
	PolicyDefinitionReferenceId pulumi.StringPtrInput
	// Determines the max number of resources that can be remediated by the remediation job. If not provided, the default resource count is used.
	ResourceCount pulumi.IntPtrInput
	// The way that resources to remediate are discovered. Possible values are `ExistingNonCompliant`, `ReEvaluateCompliance`. Defaults to `ExistingNonCompliant`.
	ResourceDiscoveryMode pulumi.StringPtrInput
	// The Resource ID at which the Policy Remediation should be applied. Changing this forces a new resource to be created.
	ResourceId pulumi.StringPtrInput
}

func (ResourcePolicyRemediationState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourcePolicyRemediationState)(nil)).Elem()
}

type resourcePolicyRemediationArgs struct {
	// A number between 0.0 to 1.0 representing the percentage failure threshold. The remediation will fail if the percentage of failed remediation operations (i.e. failed deployments) exceeds this threshold.
	FailurePercentage *float64 `pulumi:"failurePercentage"`
	// A list of the resource locations that will be remediated.
	LocationFilters []string `pulumi:"locationFilters"`
	// The name of the Policy Remediation. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Determines how many resources to remediate at any given time. Can be used to increase or reduce the pace of the remediation. If not provided, the default parallel deployments value is used.
	ParallelDeployments *int `pulumi:"parallelDeployments"`
	// The ID of the Policy Assignment that should be remediated.
	PolicyAssignmentId string `pulumi:"policyAssignmentId"`
	// The unique ID for the policy definition within the policy set definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
	//
	// > **Note:** This property has been deprecated and will be removed in version 4.0 of the provider in favour of `policyDefinitionReferenceId`.
	//
	// Deprecated: `policy_definition_id` will be removed in version 4.0 of the AzureRM Provider in favour of `policy_definition_reference_id`.
	PolicyDefinitionId *string `pulumi:"policyDefinitionId"`
	// The unique ID for the policy definition reference within the policy set definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
	PolicyDefinitionReferenceId *string `pulumi:"policyDefinitionReferenceId"`
	// Determines the max number of resources that can be remediated by the remediation job. If not provided, the default resource count is used.
	ResourceCount *int `pulumi:"resourceCount"`
	// The way that resources to remediate are discovered. Possible values are `ExistingNonCompliant`, `ReEvaluateCompliance`. Defaults to `ExistingNonCompliant`.
	ResourceDiscoveryMode *string `pulumi:"resourceDiscoveryMode"`
	// The Resource ID at which the Policy Remediation should be applied. Changing this forces a new resource to be created.
	ResourceId string `pulumi:"resourceId"`
}

// The set of arguments for constructing a ResourcePolicyRemediation resource.
type ResourcePolicyRemediationArgs struct {
	// A number between 0.0 to 1.0 representing the percentage failure threshold. The remediation will fail if the percentage of failed remediation operations (i.e. failed deployments) exceeds this threshold.
	FailurePercentage pulumi.Float64PtrInput
	// A list of the resource locations that will be remediated.
	LocationFilters pulumi.StringArrayInput
	// The name of the Policy Remediation. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Determines how many resources to remediate at any given time. Can be used to increase or reduce the pace of the remediation. If not provided, the default parallel deployments value is used.
	ParallelDeployments pulumi.IntPtrInput
	// The ID of the Policy Assignment that should be remediated.
	PolicyAssignmentId pulumi.StringInput
	// The unique ID for the policy definition within the policy set definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
	//
	// > **Note:** This property has been deprecated and will be removed in version 4.0 of the provider in favour of `policyDefinitionReferenceId`.
	//
	// Deprecated: `policy_definition_id` will be removed in version 4.0 of the AzureRM Provider in favour of `policy_definition_reference_id`.
	PolicyDefinitionId pulumi.StringPtrInput
	// The unique ID for the policy definition reference within the policy set definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
	PolicyDefinitionReferenceId pulumi.StringPtrInput
	// Determines the max number of resources that can be remediated by the remediation job. If not provided, the default resource count is used.
	ResourceCount pulumi.IntPtrInput
	// The way that resources to remediate are discovered. Possible values are `ExistingNonCompliant`, `ReEvaluateCompliance`. Defaults to `ExistingNonCompliant`.
	ResourceDiscoveryMode pulumi.StringPtrInput
	// The Resource ID at which the Policy Remediation should be applied. Changing this forces a new resource to be created.
	ResourceId pulumi.StringInput
}

func (ResourcePolicyRemediationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourcePolicyRemediationArgs)(nil)).Elem()
}

type ResourcePolicyRemediationInput interface {
	pulumi.Input

	ToResourcePolicyRemediationOutput() ResourcePolicyRemediationOutput
	ToResourcePolicyRemediationOutputWithContext(ctx context.Context) ResourcePolicyRemediationOutput
}

func (*ResourcePolicyRemediation) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyRemediation)(nil)).Elem()
}

func (i *ResourcePolicyRemediation) ToResourcePolicyRemediationOutput() ResourcePolicyRemediationOutput {
	return i.ToResourcePolicyRemediationOutputWithContext(context.Background())
}

func (i *ResourcePolicyRemediation) ToResourcePolicyRemediationOutputWithContext(ctx context.Context) ResourcePolicyRemediationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyRemediationOutput)
}

// ResourcePolicyRemediationArrayInput is an input type that accepts ResourcePolicyRemediationArray and ResourcePolicyRemediationArrayOutput values.
// You can construct a concrete instance of `ResourcePolicyRemediationArrayInput` via:
//
//	ResourcePolicyRemediationArray{ ResourcePolicyRemediationArgs{...} }
type ResourcePolicyRemediationArrayInput interface {
	pulumi.Input

	ToResourcePolicyRemediationArrayOutput() ResourcePolicyRemediationArrayOutput
	ToResourcePolicyRemediationArrayOutputWithContext(context.Context) ResourcePolicyRemediationArrayOutput
}

type ResourcePolicyRemediationArray []ResourcePolicyRemediationInput

func (ResourcePolicyRemediationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourcePolicyRemediation)(nil)).Elem()
}

func (i ResourcePolicyRemediationArray) ToResourcePolicyRemediationArrayOutput() ResourcePolicyRemediationArrayOutput {
	return i.ToResourcePolicyRemediationArrayOutputWithContext(context.Background())
}

func (i ResourcePolicyRemediationArray) ToResourcePolicyRemediationArrayOutputWithContext(ctx context.Context) ResourcePolicyRemediationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyRemediationArrayOutput)
}

// ResourcePolicyRemediationMapInput is an input type that accepts ResourcePolicyRemediationMap and ResourcePolicyRemediationMapOutput values.
// You can construct a concrete instance of `ResourcePolicyRemediationMapInput` via:
//
//	ResourcePolicyRemediationMap{ "key": ResourcePolicyRemediationArgs{...} }
type ResourcePolicyRemediationMapInput interface {
	pulumi.Input

	ToResourcePolicyRemediationMapOutput() ResourcePolicyRemediationMapOutput
	ToResourcePolicyRemediationMapOutputWithContext(context.Context) ResourcePolicyRemediationMapOutput
}

type ResourcePolicyRemediationMap map[string]ResourcePolicyRemediationInput

func (ResourcePolicyRemediationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourcePolicyRemediation)(nil)).Elem()
}

func (i ResourcePolicyRemediationMap) ToResourcePolicyRemediationMapOutput() ResourcePolicyRemediationMapOutput {
	return i.ToResourcePolicyRemediationMapOutputWithContext(context.Background())
}

func (i ResourcePolicyRemediationMap) ToResourcePolicyRemediationMapOutputWithContext(ctx context.Context) ResourcePolicyRemediationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyRemediationMapOutput)
}

type ResourcePolicyRemediationOutput struct{ *pulumi.OutputState }

func (ResourcePolicyRemediationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyRemediation)(nil)).Elem()
}

func (o ResourcePolicyRemediationOutput) ToResourcePolicyRemediationOutput() ResourcePolicyRemediationOutput {
	return o
}

func (o ResourcePolicyRemediationOutput) ToResourcePolicyRemediationOutputWithContext(ctx context.Context) ResourcePolicyRemediationOutput {
	return o
}

// A number between 0.0 to 1.0 representing the percentage failure threshold. The remediation will fail if the percentage of failed remediation operations (i.e. failed deployments) exceeds this threshold.
func (o ResourcePolicyRemediationOutput) FailurePercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ResourcePolicyRemediation) pulumi.Float64PtrOutput { return v.FailurePercentage }).(pulumi.Float64PtrOutput)
}

// A list of the resource locations that will be remediated.
func (o ResourcePolicyRemediationOutput) LocationFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourcePolicyRemediation) pulumi.StringArrayOutput { return v.LocationFilters }).(pulumi.StringArrayOutput)
}

// The name of the Policy Remediation. Changing this forces a new resource to be created.
func (o ResourcePolicyRemediationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcePolicyRemediation) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Determines how many resources to remediate at any given time. Can be used to increase or reduce the pace of the remediation. If not provided, the default parallel deployments value is used.
func (o ResourcePolicyRemediationOutput) ParallelDeployments() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyRemediation) pulumi.IntPtrOutput { return v.ParallelDeployments }).(pulumi.IntPtrOutput)
}

// The ID of the Policy Assignment that should be remediated.
func (o ResourcePolicyRemediationOutput) PolicyAssignmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcePolicyRemediation) pulumi.StringOutput { return v.PolicyAssignmentId }).(pulumi.StringOutput)
}

// The unique ID for the policy definition within the policy set definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
//
// > **Note:** This property has been deprecated and will be removed in version 4.0 of the provider in favour of `policyDefinitionReferenceId`.
//
// Deprecated: `policy_definition_id` will be removed in version 4.0 of the AzureRM Provider in favour of `policy_definition_reference_id`.
func (o ResourcePolicyRemediationOutput) PolicyDefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyRemediation) pulumi.StringPtrOutput { return v.PolicyDefinitionId }).(pulumi.StringPtrOutput)
}

// The unique ID for the policy definition reference within the policy set definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
func (o ResourcePolicyRemediationOutput) PolicyDefinitionReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyRemediation) pulumi.StringPtrOutput { return v.PolicyDefinitionReferenceId }).(pulumi.StringPtrOutput)
}

// Determines the max number of resources that can be remediated by the remediation job. If not provided, the default resource count is used.
func (o ResourcePolicyRemediationOutput) ResourceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyRemediation) pulumi.IntPtrOutput { return v.ResourceCount }).(pulumi.IntPtrOutput)
}

// The way that resources to remediate are discovered. Possible values are `ExistingNonCompliant`, `ReEvaluateCompliance`. Defaults to `ExistingNonCompliant`.
func (o ResourcePolicyRemediationOutput) ResourceDiscoveryMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyRemediation) pulumi.StringPtrOutput { return v.ResourceDiscoveryMode }).(pulumi.StringPtrOutput)
}

// The Resource ID at which the Policy Remediation should be applied. Changing this forces a new resource to be created.
func (o ResourcePolicyRemediationOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcePolicyRemediation) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

type ResourcePolicyRemediationArrayOutput struct{ *pulumi.OutputState }

func (ResourcePolicyRemediationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourcePolicyRemediation)(nil)).Elem()
}

func (o ResourcePolicyRemediationArrayOutput) ToResourcePolicyRemediationArrayOutput() ResourcePolicyRemediationArrayOutput {
	return o
}

func (o ResourcePolicyRemediationArrayOutput) ToResourcePolicyRemediationArrayOutputWithContext(ctx context.Context) ResourcePolicyRemediationArrayOutput {
	return o
}

func (o ResourcePolicyRemediationArrayOutput) Index(i pulumi.IntInput) ResourcePolicyRemediationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourcePolicyRemediation {
		return vs[0].([]*ResourcePolicyRemediation)[vs[1].(int)]
	}).(ResourcePolicyRemediationOutput)
}

type ResourcePolicyRemediationMapOutput struct{ *pulumi.OutputState }

func (ResourcePolicyRemediationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourcePolicyRemediation)(nil)).Elem()
}

func (o ResourcePolicyRemediationMapOutput) ToResourcePolicyRemediationMapOutput() ResourcePolicyRemediationMapOutput {
	return o
}

func (o ResourcePolicyRemediationMapOutput) ToResourcePolicyRemediationMapOutputWithContext(ctx context.Context) ResourcePolicyRemediationMapOutput {
	return o
}

func (o ResourcePolicyRemediationMapOutput) MapIndex(k pulumi.StringInput) ResourcePolicyRemediationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourcePolicyRemediation {
		return vs[0].(map[string]*ResourcePolicyRemediation)[vs[1].(string)]
	}).(ResourcePolicyRemediationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourcePolicyRemediationInput)(nil)).Elem(), &ResourcePolicyRemediation{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourcePolicyRemediationArrayInput)(nil)).Elem(), ResourcePolicyRemediationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourcePolicyRemediationMapInput)(nil)).Elem(), ResourcePolicyRemediationMap{})
	pulumi.RegisterOutputType(ResourcePolicyRemediationOutput{})
	pulumi.RegisterOutputType(ResourcePolicyRemediationArrayOutput{})
	pulumi.RegisterOutputType(ResourcePolicyRemediationMapOutput{})
}
