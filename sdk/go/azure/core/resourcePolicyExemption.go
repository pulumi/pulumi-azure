// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package core

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Resource Policy Exemption.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/policy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("westus"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "exampleVirtualNetwork", &network.VirtualNetworkArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			examplePolicySetDefinition, err := policy.LookupPolicySetDefinition(ctx, &policy.LookupPolicySetDefinitionArgs{
//				DisplayName: pulumi.StringRef("Audit machines with insecure password security settings"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleResourcePolicyAssignment, err := core.NewResourcePolicyAssignment(ctx, "exampleResourcePolicyAssignment", &core.ResourcePolicyAssignmentArgs{
//				ResourceId:         exampleVirtualNetwork.ID(),
//				PolicyDefinitionId: *pulumi.String(examplePolicySetDefinition.Id),
//				Location:           exampleResourceGroup.Location,
//				Identity: &core.ResourcePolicyAssignmentIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = core.NewResourcePolicyExemption(ctx, "exampleResourcePolicyExemption", &core.ResourcePolicyExemptionArgs{
//				ResourceId:         exampleResourcePolicyAssignment.ResourceId,
//				PolicyAssignmentId: exampleResourcePolicyAssignment.ID(),
//				ExemptionCategory:  pulumi.String("Mitigated"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Policy Exemptions can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:core/resourcePolicyExemption:ResourcePolicyExemption exemption1 /subscriptions/00000000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.Authorization/policyExemptions/exemption1
//
// ```
type ResourcePolicyExemption struct {
	pulumi.CustomResourceState

	// A description to use for this Policy Exemption.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A friendly display name to use for this Policy Exemption.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// The category of this policy exemption. Possible values are `Waiver` and `Mitigated`.
	ExemptionCategory pulumi.StringOutput `pulumi:"exemptionCategory"`
	// The expiration date and time in UTC ISO 8601 format of this policy exemption.
	ExpiresOn pulumi.StringPtrOutput `pulumi:"expiresOn"`
	// The metadata for this policy exemption. This is a JSON string representing additional metadata that should be stored with the policy exemption.
	Metadata pulumi.StringOutput `pulumi:"metadata"`
	// The name of the Policy Exemption. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Policy Assignment to be exempted at the specified Scope. Changing this forces a new resource to be created.
	PolicyAssignmentId pulumi.StringOutput `pulumi:"policyAssignmentId"`
	// The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
	PolicyDefinitionReferenceIds pulumi.StringArrayOutput `pulumi:"policyDefinitionReferenceIds"`
	// The Resource ID where the Policy Exemption should be applied. Changing this forces a new resource to be created.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
}

// NewResourcePolicyExemption registers a new resource with the given unique name, arguments, and options.
func NewResourcePolicyExemption(ctx *pulumi.Context,
	name string, args *ResourcePolicyExemptionArgs, opts ...pulumi.ResourceOption) (*ResourcePolicyExemption, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExemptionCategory == nil {
		return nil, errors.New("invalid value for required argument 'ExemptionCategory'")
	}
	if args.PolicyAssignmentId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyAssignmentId'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourcePolicyExemption
	err := ctx.RegisterResource("azure:core/resourcePolicyExemption:ResourcePolicyExemption", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourcePolicyExemption gets an existing ResourcePolicyExemption resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourcePolicyExemption(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourcePolicyExemptionState, opts ...pulumi.ResourceOption) (*ResourcePolicyExemption, error) {
	var resource ResourcePolicyExemption
	err := ctx.ReadResource("azure:core/resourcePolicyExemption:ResourcePolicyExemption", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourcePolicyExemption resources.
type resourcePolicyExemptionState struct {
	// A description to use for this Policy Exemption.
	Description *string `pulumi:"description"`
	// A friendly display name to use for this Policy Exemption.
	DisplayName *string `pulumi:"displayName"`
	// The category of this policy exemption. Possible values are `Waiver` and `Mitigated`.
	ExemptionCategory *string `pulumi:"exemptionCategory"`
	// The expiration date and time in UTC ISO 8601 format of this policy exemption.
	ExpiresOn *string `pulumi:"expiresOn"`
	// The metadata for this policy exemption. This is a JSON string representing additional metadata that should be stored with the policy exemption.
	Metadata *string `pulumi:"metadata"`
	// The name of the Policy Exemption. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The ID of the Policy Assignment to be exempted at the specified Scope. Changing this forces a new resource to be created.
	PolicyAssignmentId *string `pulumi:"policyAssignmentId"`
	// The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
	PolicyDefinitionReferenceIds []string `pulumi:"policyDefinitionReferenceIds"`
	// The Resource ID where the Policy Exemption should be applied. Changing this forces a new resource to be created.
	ResourceId *string `pulumi:"resourceId"`
}

type ResourcePolicyExemptionState struct {
	// A description to use for this Policy Exemption.
	Description pulumi.StringPtrInput
	// A friendly display name to use for this Policy Exemption.
	DisplayName pulumi.StringPtrInput
	// The category of this policy exemption. Possible values are `Waiver` and `Mitigated`.
	ExemptionCategory pulumi.StringPtrInput
	// The expiration date and time in UTC ISO 8601 format of this policy exemption.
	ExpiresOn pulumi.StringPtrInput
	// The metadata for this policy exemption. This is a JSON string representing additional metadata that should be stored with the policy exemption.
	Metadata pulumi.StringPtrInput
	// The name of the Policy Exemption. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The ID of the Policy Assignment to be exempted at the specified Scope. Changing this forces a new resource to be created.
	PolicyAssignmentId pulumi.StringPtrInput
	// The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
	PolicyDefinitionReferenceIds pulumi.StringArrayInput
	// The Resource ID where the Policy Exemption should be applied. Changing this forces a new resource to be created.
	ResourceId pulumi.StringPtrInput
}

func (ResourcePolicyExemptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourcePolicyExemptionState)(nil)).Elem()
}

type resourcePolicyExemptionArgs struct {
	// A description to use for this Policy Exemption.
	Description *string `pulumi:"description"`
	// A friendly display name to use for this Policy Exemption.
	DisplayName *string `pulumi:"displayName"`
	// The category of this policy exemption. Possible values are `Waiver` and `Mitigated`.
	ExemptionCategory string `pulumi:"exemptionCategory"`
	// The expiration date and time in UTC ISO 8601 format of this policy exemption.
	ExpiresOn *string `pulumi:"expiresOn"`
	// The metadata for this policy exemption. This is a JSON string representing additional metadata that should be stored with the policy exemption.
	Metadata *string `pulumi:"metadata"`
	// The name of the Policy Exemption. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The ID of the Policy Assignment to be exempted at the specified Scope. Changing this forces a new resource to be created.
	PolicyAssignmentId string `pulumi:"policyAssignmentId"`
	// The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
	PolicyDefinitionReferenceIds []string `pulumi:"policyDefinitionReferenceIds"`
	// The Resource ID where the Policy Exemption should be applied. Changing this forces a new resource to be created.
	ResourceId string `pulumi:"resourceId"`
}

// The set of arguments for constructing a ResourcePolicyExemption resource.
type ResourcePolicyExemptionArgs struct {
	// A description to use for this Policy Exemption.
	Description pulumi.StringPtrInput
	// A friendly display name to use for this Policy Exemption.
	DisplayName pulumi.StringPtrInput
	// The category of this policy exemption. Possible values are `Waiver` and `Mitigated`.
	ExemptionCategory pulumi.StringInput
	// The expiration date and time in UTC ISO 8601 format of this policy exemption.
	ExpiresOn pulumi.StringPtrInput
	// The metadata for this policy exemption. This is a JSON string representing additional metadata that should be stored with the policy exemption.
	Metadata pulumi.StringPtrInput
	// The name of the Policy Exemption. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The ID of the Policy Assignment to be exempted at the specified Scope. Changing this forces a new resource to be created.
	PolicyAssignmentId pulumi.StringInput
	// The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
	PolicyDefinitionReferenceIds pulumi.StringArrayInput
	// The Resource ID where the Policy Exemption should be applied. Changing this forces a new resource to be created.
	ResourceId pulumi.StringInput
}

func (ResourcePolicyExemptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourcePolicyExemptionArgs)(nil)).Elem()
}

type ResourcePolicyExemptionInput interface {
	pulumi.Input

	ToResourcePolicyExemptionOutput() ResourcePolicyExemptionOutput
	ToResourcePolicyExemptionOutputWithContext(ctx context.Context) ResourcePolicyExemptionOutput
}

func (*ResourcePolicyExemption) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyExemption)(nil)).Elem()
}

func (i *ResourcePolicyExemption) ToResourcePolicyExemptionOutput() ResourcePolicyExemptionOutput {
	return i.ToResourcePolicyExemptionOutputWithContext(context.Background())
}

func (i *ResourcePolicyExemption) ToResourcePolicyExemptionOutputWithContext(ctx context.Context) ResourcePolicyExemptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyExemptionOutput)
}

// ResourcePolicyExemptionArrayInput is an input type that accepts ResourcePolicyExemptionArray and ResourcePolicyExemptionArrayOutput values.
// You can construct a concrete instance of `ResourcePolicyExemptionArrayInput` via:
//
//	ResourcePolicyExemptionArray{ ResourcePolicyExemptionArgs{...} }
type ResourcePolicyExemptionArrayInput interface {
	pulumi.Input

	ToResourcePolicyExemptionArrayOutput() ResourcePolicyExemptionArrayOutput
	ToResourcePolicyExemptionArrayOutputWithContext(context.Context) ResourcePolicyExemptionArrayOutput
}

type ResourcePolicyExemptionArray []ResourcePolicyExemptionInput

func (ResourcePolicyExemptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourcePolicyExemption)(nil)).Elem()
}

func (i ResourcePolicyExemptionArray) ToResourcePolicyExemptionArrayOutput() ResourcePolicyExemptionArrayOutput {
	return i.ToResourcePolicyExemptionArrayOutputWithContext(context.Background())
}

func (i ResourcePolicyExemptionArray) ToResourcePolicyExemptionArrayOutputWithContext(ctx context.Context) ResourcePolicyExemptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyExemptionArrayOutput)
}

// ResourcePolicyExemptionMapInput is an input type that accepts ResourcePolicyExemptionMap and ResourcePolicyExemptionMapOutput values.
// You can construct a concrete instance of `ResourcePolicyExemptionMapInput` via:
//
//	ResourcePolicyExemptionMap{ "key": ResourcePolicyExemptionArgs{...} }
type ResourcePolicyExemptionMapInput interface {
	pulumi.Input

	ToResourcePolicyExemptionMapOutput() ResourcePolicyExemptionMapOutput
	ToResourcePolicyExemptionMapOutputWithContext(context.Context) ResourcePolicyExemptionMapOutput
}

type ResourcePolicyExemptionMap map[string]ResourcePolicyExemptionInput

func (ResourcePolicyExemptionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourcePolicyExemption)(nil)).Elem()
}

func (i ResourcePolicyExemptionMap) ToResourcePolicyExemptionMapOutput() ResourcePolicyExemptionMapOutput {
	return i.ToResourcePolicyExemptionMapOutputWithContext(context.Background())
}

func (i ResourcePolicyExemptionMap) ToResourcePolicyExemptionMapOutputWithContext(ctx context.Context) ResourcePolicyExemptionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyExemptionMapOutput)
}

type ResourcePolicyExemptionOutput struct{ *pulumi.OutputState }

func (ResourcePolicyExemptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyExemption)(nil)).Elem()
}

func (o ResourcePolicyExemptionOutput) ToResourcePolicyExemptionOutput() ResourcePolicyExemptionOutput {
	return o
}

func (o ResourcePolicyExemptionOutput) ToResourcePolicyExemptionOutputWithContext(ctx context.Context) ResourcePolicyExemptionOutput {
	return o
}

// A description to use for this Policy Exemption.
func (o ResourcePolicyExemptionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyExemption) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A friendly display name to use for this Policy Exemption.
func (o ResourcePolicyExemptionOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyExemption) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The category of this policy exemption. Possible values are `Waiver` and `Mitigated`.
func (o ResourcePolicyExemptionOutput) ExemptionCategory() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcePolicyExemption) pulumi.StringOutput { return v.ExemptionCategory }).(pulumi.StringOutput)
}

// The expiration date and time in UTC ISO 8601 format of this policy exemption.
func (o ResourcePolicyExemptionOutput) ExpiresOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyExemption) pulumi.StringPtrOutput { return v.ExpiresOn }).(pulumi.StringPtrOutput)
}

// The metadata for this policy exemption. This is a JSON string representing additional metadata that should be stored with the policy exemption.
func (o ResourcePolicyExemptionOutput) Metadata() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcePolicyExemption) pulumi.StringOutput { return v.Metadata }).(pulumi.StringOutput)
}

// The name of the Policy Exemption. Changing this forces a new resource to be created.
func (o ResourcePolicyExemptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcePolicyExemption) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Policy Assignment to be exempted at the specified Scope. Changing this forces a new resource to be created.
func (o ResourcePolicyExemptionOutput) PolicyAssignmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcePolicyExemption) pulumi.StringOutput { return v.PolicyAssignmentId }).(pulumi.StringOutput)
}

// The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
func (o ResourcePolicyExemptionOutput) PolicyDefinitionReferenceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourcePolicyExemption) pulumi.StringArrayOutput { return v.PolicyDefinitionReferenceIds }).(pulumi.StringArrayOutput)
}

// The Resource ID where the Policy Exemption should be applied. Changing this forces a new resource to be created.
func (o ResourcePolicyExemptionOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcePolicyExemption) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

type ResourcePolicyExemptionArrayOutput struct{ *pulumi.OutputState }

func (ResourcePolicyExemptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourcePolicyExemption)(nil)).Elem()
}

func (o ResourcePolicyExemptionArrayOutput) ToResourcePolicyExemptionArrayOutput() ResourcePolicyExemptionArrayOutput {
	return o
}

func (o ResourcePolicyExemptionArrayOutput) ToResourcePolicyExemptionArrayOutputWithContext(ctx context.Context) ResourcePolicyExemptionArrayOutput {
	return o
}

func (o ResourcePolicyExemptionArrayOutput) Index(i pulumi.IntInput) ResourcePolicyExemptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourcePolicyExemption {
		return vs[0].([]*ResourcePolicyExemption)[vs[1].(int)]
	}).(ResourcePolicyExemptionOutput)
}

type ResourcePolicyExemptionMapOutput struct{ *pulumi.OutputState }

func (ResourcePolicyExemptionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourcePolicyExemption)(nil)).Elem()
}

func (o ResourcePolicyExemptionMapOutput) ToResourcePolicyExemptionMapOutput() ResourcePolicyExemptionMapOutput {
	return o
}

func (o ResourcePolicyExemptionMapOutput) ToResourcePolicyExemptionMapOutputWithContext(ctx context.Context) ResourcePolicyExemptionMapOutput {
	return o
}

func (o ResourcePolicyExemptionMapOutput) MapIndex(k pulumi.StringInput) ResourcePolicyExemptionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourcePolicyExemption {
		return vs[0].(map[string]*ResourcePolicyExemption)[vs[1].(string)]
	}).(ResourcePolicyExemptionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourcePolicyExemptionInput)(nil)).Elem(), &ResourcePolicyExemption{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourcePolicyExemptionArrayInput)(nil)).Elem(), ResourcePolicyExemptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourcePolicyExemptionMapInput)(nil)).Elem(), ResourcePolicyExemptionMap{})
	pulumi.RegisterOutputType(ResourcePolicyExemptionOutput{})
	pulumi.RegisterOutputType(ResourcePolicyExemptionArrayOutput{})
	pulumi.RegisterOutputType(ResourcePolicyExemptionMapOutput{})
}
