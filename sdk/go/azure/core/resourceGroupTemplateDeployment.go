// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package core

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Resource Group Template Deployment.
//
// > **Note:** This resource will automatically attempt to delete resources deployed by the ARM Template when it is deleted. This behavior can be disabled in the provider `features` block by setting the `deleteNestedItemsDuringDeletion` field to `false` within the `templateDeployment` block.
//
// ## Import
//
// Resource Group Template Deployments can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:core/resourceGroupTemplateDeployment:ResourceGroupTemplateDeployment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Resources/deployments/template1
//
// ```
type ResourceGroupTemplateDeployment struct {
	pulumi.CustomResourceState

	// The Debug Level which should be used for this Resource Group Template Deployment. Possible values are `none`, `requestContent`, `responseContent` and `requestContent, responseContent`.
	DebugLevel pulumi.StringPtrOutput `pulumi:"debugLevel"`
	// The Deployment Mode for this Resource Group Template Deployment. Possible values are `Complete` (where resources in the Resource Group not specified in the ARM Template will be destroyed) and `Incremental` (where resources are additive only).
	//
	// > **Note:** If `deploymentMode` is set to `Complete` then resources within this Resource Group which are not defined in the ARM Template will be deleted.
	DeploymentMode pulumi.StringOutput `pulumi:"deploymentMode"`
	// The name which should be used for this Resource Group Template Deployment. Changing this forces a new Resource Group Template Deployment to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The JSON Content of the Outputs of the ARM Template Deployment.
	OutputContent pulumi.StringOutput `pulumi:"outputContent"`
	// The contents of the ARM Template parameters file - containing a JSON list of parameters.
	//
	// > An example of how to pass variables into an ARM Template can be seen in the example.
	ParametersContent pulumi.StringOutput `pulumi:"parametersContent"`
	// The name of the Resource Group where the Resource Group Template Deployment should exist. Changing this forces a new Resource Group Template Deployment to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Resource Group Template Deployment.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The contents of the ARM Template which should be deployed into this Resource Group. Cannot be specified with `templateSpecVersionId`.
	TemplateContent pulumi.StringOutput `pulumi:"templateContent"`
	// The ID of the Template Spec Version to deploy. Cannot be specified with `templateContent`.
	TemplateSpecVersionId pulumi.StringPtrOutput `pulumi:"templateSpecVersionId"`
}

// NewResourceGroupTemplateDeployment registers a new resource with the given unique name, arguments, and options.
func NewResourceGroupTemplateDeployment(ctx *pulumi.Context,
	name string, args *ResourceGroupTemplateDeploymentArgs, opts ...pulumi.ResourceOption) (*ResourceGroupTemplateDeployment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeploymentMode == nil {
		return nil, errors.New("invalid value for required argument 'DeploymentMode'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourceGroupTemplateDeployment
	err := ctx.RegisterResource("azure:core/resourceGroupTemplateDeployment:ResourceGroupTemplateDeployment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceGroupTemplateDeployment gets an existing ResourceGroupTemplateDeployment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceGroupTemplateDeployment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceGroupTemplateDeploymentState, opts ...pulumi.ResourceOption) (*ResourceGroupTemplateDeployment, error) {
	var resource ResourceGroupTemplateDeployment
	err := ctx.ReadResource("azure:core/resourceGroupTemplateDeployment:ResourceGroupTemplateDeployment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceGroupTemplateDeployment resources.
type resourceGroupTemplateDeploymentState struct {
	// The Debug Level which should be used for this Resource Group Template Deployment. Possible values are `none`, `requestContent`, `responseContent` and `requestContent, responseContent`.
	DebugLevel *string `pulumi:"debugLevel"`
	// The Deployment Mode for this Resource Group Template Deployment. Possible values are `Complete` (where resources in the Resource Group not specified in the ARM Template will be destroyed) and `Incremental` (where resources are additive only).
	//
	// > **Note:** If `deploymentMode` is set to `Complete` then resources within this Resource Group which are not defined in the ARM Template will be deleted.
	DeploymentMode *string `pulumi:"deploymentMode"`
	// The name which should be used for this Resource Group Template Deployment. Changing this forces a new Resource Group Template Deployment to be created.
	Name *string `pulumi:"name"`
	// The JSON Content of the Outputs of the ARM Template Deployment.
	OutputContent *string `pulumi:"outputContent"`
	// The contents of the ARM Template parameters file - containing a JSON list of parameters.
	//
	// > An example of how to pass variables into an ARM Template can be seen in the example.
	ParametersContent *string `pulumi:"parametersContent"`
	// The name of the Resource Group where the Resource Group Template Deployment should exist. Changing this forces a new Resource Group Template Deployment to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Resource Group Template Deployment.
	Tags map[string]string `pulumi:"tags"`
	// The contents of the ARM Template which should be deployed into this Resource Group. Cannot be specified with `templateSpecVersionId`.
	TemplateContent *string `pulumi:"templateContent"`
	// The ID of the Template Spec Version to deploy. Cannot be specified with `templateContent`.
	TemplateSpecVersionId *string `pulumi:"templateSpecVersionId"`
}

type ResourceGroupTemplateDeploymentState struct {
	// The Debug Level which should be used for this Resource Group Template Deployment. Possible values are `none`, `requestContent`, `responseContent` and `requestContent, responseContent`.
	DebugLevel pulumi.StringPtrInput
	// The Deployment Mode for this Resource Group Template Deployment. Possible values are `Complete` (where resources in the Resource Group not specified in the ARM Template will be destroyed) and `Incremental` (where resources are additive only).
	//
	// > **Note:** If `deploymentMode` is set to `Complete` then resources within this Resource Group which are not defined in the ARM Template will be deleted.
	DeploymentMode pulumi.StringPtrInput
	// The name which should be used for this Resource Group Template Deployment. Changing this forces a new Resource Group Template Deployment to be created.
	Name pulumi.StringPtrInput
	// The JSON Content of the Outputs of the ARM Template Deployment.
	OutputContent pulumi.StringPtrInput
	// The contents of the ARM Template parameters file - containing a JSON list of parameters.
	//
	// > An example of how to pass variables into an ARM Template can be seen in the example.
	ParametersContent pulumi.StringPtrInput
	// The name of the Resource Group where the Resource Group Template Deployment should exist. Changing this forces a new Resource Group Template Deployment to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Resource Group Template Deployment.
	Tags pulumi.StringMapInput
	// The contents of the ARM Template which should be deployed into this Resource Group. Cannot be specified with `templateSpecVersionId`.
	TemplateContent pulumi.StringPtrInput
	// The ID of the Template Spec Version to deploy. Cannot be specified with `templateContent`.
	TemplateSpecVersionId pulumi.StringPtrInput
}

func (ResourceGroupTemplateDeploymentState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceGroupTemplateDeploymentState)(nil)).Elem()
}

type resourceGroupTemplateDeploymentArgs struct {
	// The Debug Level which should be used for this Resource Group Template Deployment. Possible values are `none`, `requestContent`, `responseContent` and `requestContent, responseContent`.
	DebugLevel *string `pulumi:"debugLevel"`
	// The Deployment Mode for this Resource Group Template Deployment. Possible values are `Complete` (where resources in the Resource Group not specified in the ARM Template will be destroyed) and `Incremental` (where resources are additive only).
	//
	// > **Note:** If `deploymentMode` is set to `Complete` then resources within this Resource Group which are not defined in the ARM Template will be deleted.
	DeploymentMode string `pulumi:"deploymentMode"`
	// The name which should be used for this Resource Group Template Deployment. Changing this forces a new Resource Group Template Deployment to be created.
	Name *string `pulumi:"name"`
	// The contents of the ARM Template parameters file - containing a JSON list of parameters.
	//
	// > An example of how to pass variables into an ARM Template can be seen in the example.
	ParametersContent *string `pulumi:"parametersContent"`
	// The name of the Resource Group where the Resource Group Template Deployment should exist. Changing this forces a new Resource Group Template Deployment to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Resource Group Template Deployment.
	Tags map[string]string `pulumi:"tags"`
	// The contents of the ARM Template which should be deployed into this Resource Group. Cannot be specified with `templateSpecVersionId`.
	TemplateContent *string `pulumi:"templateContent"`
	// The ID of the Template Spec Version to deploy. Cannot be specified with `templateContent`.
	TemplateSpecVersionId *string `pulumi:"templateSpecVersionId"`
}

// The set of arguments for constructing a ResourceGroupTemplateDeployment resource.
type ResourceGroupTemplateDeploymentArgs struct {
	// The Debug Level which should be used for this Resource Group Template Deployment. Possible values are `none`, `requestContent`, `responseContent` and `requestContent, responseContent`.
	DebugLevel pulumi.StringPtrInput
	// The Deployment Mode for this Resource Group Template Deployment. Possible values are `Complete` (where resources in the Resource Group not specified in the ARM Template will be destroyed) and `Incremental` (where resources are additive only).
	//
	// > **Note:** If `deploymentMode` is set to `Complete` then resources within this Resource Group which are not defined in the ARM Template will be deleted.
	DeploymentMode pulumi.StringInput
	// The name which should be used for this Resource Group Template Deployment. Changing this forces a new Resource Group Template Deployment to be created.
	Name pulumi.StringPtrInput
	// The contents of the ARM Template parameters file - containing a JSON list of parameters.
	//
	// > An example of how to pass variables into an ARM Template can be seen in the example.
	ParametersContent pulumi.StringPtrInput
	// The name of the Resource Group where the Resource Group Template Deployment should exist. Changing this forces a new Resource Group Template Deployment to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags which should be assigned to the Resource Group Template Deployment.
	Tags pulumi.StringMapInput
	// The contents of the ARM Template which should be deployed into this Resource Group. Cannot be specified with `templateSpecVersionId`.
	TemplateContent pulumi.StringPtrInput
	// The ID of the Template Spec Version to deploy. Cannot be specified with `templateContent`.
	TemplateSpecVersionId pulumi.StringPtrInput
}

func (ResourceGroupTemplateDeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceGroupTemplateDeploymentArgs)(nil)).Elem()
}

type ResourceGroupTemplateDeploymentInput interface {
	pulumi.Input

	ToResourceGroupTemplateDeploymentOutput() ResourceGroupTemplateDeploymentOutput
	ToResourceGroupTemplateDeploymentOutputWithContext(ctx context.Context) ResourceGroupTemplateDeploymentOutput
}

func (*ResourceGroupTemplateDeployment) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceGroupTemplateDeployment)(nil)).Elem()
}

func (i *ResourceGroupTemplateDeployment) ToResourceGroupTemplateDeploymentOutput() ResourceGroupTemplateDeploymentOutput {
	return i.ToResourceGroupTemplateDeploymentOutputWithContext(context.Background())
}

func (i *ResourceGroupTemplateDeployment) ToResourceGroupTemplateDeploymentOutputWithContext(ctx context.Context) ResourceGroupTemplateDeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGroupTemplateDeploymentOutput)
}

// ResourceGroupTemplateDeploymentArrayInput is an input type that accepts ResourceGroupTemplateDeploymentArray and ResourceGroupTemplateDeploymentArrayOutput values.
// You can construct a concrete instance of `ResourceGroupTemplateDeploymentArrayInput` via:
//
//	ResourceGroupTemplateDeploymentArray{ ResourceGroupTemplateDeploymentArgs{...} }
type ResourceGroupTemplateDeploymentArrayInput interface {
	pulumi.Input

	ToResourceGroupTemplateDeploymentArrayOutput() ResourceGroupTemplateDeploymentArrayOutput
	ToResourceGroupTemplateDeploymentArrayOutputWithContext(context.Context) ResourceGroupTemplateDeploymentArrayOutput
}

type ResourceGroupTemplateDeploymentArray []ResourceGroupTemplateDeploymentInput

func (ResourceGroupTemplateDeploymentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceGroupTemplateDeployment)(nil)).Elem()
}

func (i ResourceGroupTemplateDeploymentArray) ToResourceGroupTemplateDeploymentArrayOutput() ResourceGroupTemplateDeploymentArrayOutput {
	return i.ToResourceGroupTemplateDeploymentArrayOutputWithContext(context.Background())
}

func (i ResourceGroupTemplateDeploymentArray) ToResourceGroupTemplateDeploymentArrayOutputWithContext(ctx context.Context) ResourceGroupTemplateDeploymentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGroupTemplateDeploymentArrayOutput)
}

// ResourceGroupTemplateDeploymentMapInput is an input type that accepts ResourceGroupTemplateDeploymentMap and ResourceGroupTemplateDeploymentMapOutput values.
// You can construct a concrete instance of `ResourceGroupTemplateDeploymentMapInput` via:
//
//	ResourceGroupTemplateDeploymentMap{ "key": ResourceGroupTemplateDeploymentArgs{...} }
type ResourceGroupTemplateDeploymentMapInput interface {
	pulumi.Input

	ToResourceGroupTemplateDeploymentMapOutput() ResourceGroupTemplateDeploymentMapOutput
	ToResourceGroupTemplateDeploymentMapOutputWithContext(context.Context) ResourceGroupTemplateDeploymentMapOutput
}

type ResourceGroupTemplateDeploymentMap map[string]ResourceGroupTemplateDeploymentInput

func (ResourceGroupTemplateDeploymentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceGroupTemplateDeployment)(nil)).Elem()
}

func (i ResourceGroupTemplateDeploymentMap) ToResourceGroupTemplateDeploymentMapOutput() ResourceGroupTemplateDeploymentMapOutput {
	return i.ToResourceGroupTemplateDeploymentMapOutputWithContext(context.Background())
}

func (i ResourceGroupTemplateDeploymentMap) ToResourceGroupTemplateDeploymentMapOutputWithContext(ctx context.Context) ResourceGroupTemplateDeploymentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGroupTemplateDeploymentMapOutput)
}

type ResourceGroupTemplateDeploymentOutput struct{ *pulumi.OutputState }

func (ResourceGroupTemplateDeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceGroupTemplateDeployment)(nil)).Elem()
}

func (o ResourceGroupTemplateDeploymentOutput) ToResourceGroupTemplateDeploymentOutput() ResourceGroupTemplateDeploymentOutput {
	return o
}

func (o ResourceGroupTemplateDeploymentOutput) ToResourceGroupTemplateDeploymentOutputWithContext(ctx context.Context) ResourceGroupTemplateDeploymentOutput {
	return o
}

// The Debug Level which should be used for this Resource Group Template Deployment. Possible values are `none`, `requestContent`, `responseContent` and `requestContent, responseContent`.
func (o ResourceGroupTemplateDeploymentOutput) DebugLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGroupTemplateDeployment) pulumi.StringPtrOutput { return v.DebugLevel }).(pulumi.StringPtrOutput)
}

// The Deployment Mode for this Resource Group Template Deployment. Possible values are `Complete` (where resources in the Resource Group not specified in the ARM Template will be destroyed) and `Incremental` (where resources are additive only).
//
// > **Note:** If `deploymentMode` is set to `Complete` then resources within this Resource Group which are not defined in the ARM Template will be deleted.
func (o ResourceGroupTemplateDeploymentOutput) DeploymentMode() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceGroupTemplateDeployment) pulumi.StringOutput { return v.DeploymentMode }).(pulumi.StringOutput)
}

// The name which should be used for this Resource Group Template Deployment. Changing this forces a new Resource Group Template Deployment to be created.
func (o ResourceGroupTemplateDeploymentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceGroupTemplateDeployment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The JSON Content of the Outputs of the ARM Template Deployment.
func (o ResourceGroupTemplateDeploymentOutput) OutputContent() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceGroupTemplateDeployment) pulumi.StringOutput { return v.OutputContent }).(pulumi.StringOutput)
}

// The contents of the ARM Template parameters file - containing a JSON list of parameters.
//
// > An example of how to pass variables into an ARM Template can be seen in the example.
func (o ResourceGroupTemplateDeploymentOutput) ParametersContent() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceGroupTemplateDeployment) pulumi.StringOutput { return v.ParametersContent }).(pulumi.StringOutput)
}

// The name of the Resource Group where the Resource Group Template Deployment should exist. Changing this forces a new Resource Group Template Deployment to be created.
func (o ResourceGroupTemplateDeploymentOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceGroupTemplateDeployment) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the Resource Group Template Deployment.
func (o ResourceGroupTemplateDeploymentOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceGroupTemplateDeployment) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The contents of the ARM Template which should be deployed into this Resource Group. Cannot be specified with `templateSpecVersionId`.
func (o ResourceGroupTemplateDeploymentOutput) TemplateContent() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceGroupTemplateDeployment) pulumi.StringOutput { return v.TemplateContent }).(pulumi.StringOutput)
}

// The ID of the Template Spec Version to deploy. Cannot be specified with `templateContent`.
func (o ResourceGroupTemplateDeploymentOutput) TemplateSpecVersionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGroupTemplateDeployment) pulumi.StringPtrOutput { return v.TemplateSpecVersionId }).(pulumi.StringPtrOutput)
}

type ResourceGroupTemplateDeploymentArrayOutput struct{ *pulumi.OutputState }

func (ResourceGroupTemplateDeploymentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceGroupTemplateDeployment)(nil)).Elem()
}

func (o ResourceGroupTemplateDeploymentArrayOutput) ToResourceGroupTemplateDeploymentArrayOutput() ResourceGroupTemplateDeploymentArrayOutput {
	return o
}

func (o ResourceGroupTemplateDeploymentArrayOutput) ToResourceGroupTemplateDeploymentArrayOutputWithContext(ctx context.Context) ResourceGroupTemplateDeploymentArrayOutput {
	return o
}

func (o ResourceGroupTemplateDeploymentArrayOutput) Index(i pulumi.IntInput) ResourceGroupTemplateDeploymentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourceGroupTemplateDeployment {
		return vs[0].([]*ResourceGroupTemplateDeployment)[vs[1].(int)]
	}).(ResourceGroupTemplateDeploymentOutput)
}

type ResourceGroupTemplateDeploymentMapOutput struct{ *pulumi.OutputState }

func (ResourceGroupTemplateDeploymentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceGroupTemplateDeployment)(nil)).Elem()
}

func (o ResourceGroupTemplateDeploymentMapOutput) ToResourceGroupTemplateDeploymentMapOutput() ResourceGroupTemplateDeploymentMapOutput {
	return o
}

func (o ResourceGroupTemplateDeploymentMapOutput) ToResourceGroupTemplateDeploymentMapOutputWithContext(ctx context.Context) ResourceGroupTemplateDeploymentMapOutput {
	return o
}

func (o ResourceGroupTemplateDeploymentMapOutput) MapIndex(k pulumi.StringInput) ResourceGroupTemplateDeploymentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourceGroupTemplateDeployment {
		return vs[0].(map[string]*ResourceGroupTemplateDeployment)[vs[1].(string)]
	}).(ResourceGroupTemplateDeploymentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceGroupTemplateDeploymentInput)(nil)).Elem(), &ResourceGroupTemplateDeployment{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceGroupTemplateDeploymentArrayInput)(nil)).Elem(), ResourceGroupTemplateDeploymentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceGroupTemplateDeploymentMapInput)(nil)).Elem(), ResourceGroupTemplateDeploymentMap{})
	pulumi.RegisterOutputType(ResourceGroupTemplateDeploymentOutput{})
	pulumi.RegisterOutputType(ResourceGroupTemplateDeploymentArrayOutput{})
	pulumi.RegisterOutputType(ResourceGroupTemplateDeploymentMapOutput{})
}
