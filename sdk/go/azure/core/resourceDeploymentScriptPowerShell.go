// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package core

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Resource Deployment Script of Azure PowerShell.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/authorization"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleUserAssignedIdentity, err := authorization.NewUserAssignedIdentity(ctx, "exampleUserAssignedIdentity", &authorization.UserAssignedIdentityArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = core.NewResourceDeploymentScriptPowerShell(ctx, "exampleResourceDeploymentScriptPowerShell", &core.ResourceDeploymentScriptPowerShellArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          pulumi.String("West Europe"),
//				Version:           pulumi.String("8.3"),
//				RetentionInterval: pulumi.String("P1D"),
//				CommandLine:       pulumi.String("-name \"John Dole\""),
//				CleanupPreference: pulumi.String("OnSuccess"),
//				ForceUpdateTag:    pulumi.String("1"),
//				Timeout:           pulumi.String("PT30M"),
//				ScriptContent: pulumi.String(`          param([string] $name)
//	            $output = 'Hello {0}.' -f $name
//	            Write-Output $output
//	            $DeploymentScriptOutputs = @{}
//	            $DeploymentScriptOutputs['text'] = $output
//
// `),
//
//				Identity: &core.ResourceDeploymentScriptPowerShellIdentityArgs{
//					Type: pulumi.String("UserAssigned"),
//					IdentityIds: pulumi.StringArray{
//						exampleUserAssignedIdentity.ID(),
//					},
//				},
//				Tags: pulumi.StringMap{
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Resource Deployment Script can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:core/resourceDeploymentScriptPowerShell:ResourceDeploymentScriptPowerShell example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Resources/deploymentScripts/script1
//
// ```
type ResourceDeploymentScriptPowerShell struct {
	pulumi.CustomResourceState

	// Specifies the cleanup preference when the script execution gets in a terminal state. Possible values are `Always`, `OnExpiration`, `OnSuccess`. Defaults to `Always`. Changing this forces a new Resource Deployment Script to be created.
	CleanupPreference pulumi.StringPtrOutput `pulumi:"cleanupPreference"`
	// Command line arguments to pass to the script. Changing this forces a new Resource Deployment Script to be created.
	CommandLine pulumi.StringPtrOutput `pulumi:"commandLine"`
	// A `container` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	Container ResourceDeploymentScriptPowerShellContainerPtrOutput `pulumi:"container"`
	// An `environmentVariable` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	EnvironmentVariables ResourceDeploymentScriptPowerShellEnvironmentVariableArrayOutput `pulumi:"environmentVariables"`
	// Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. Changing this forces a new Resource Deployment Script to be created.
	ForceUpdateTag pulumi.StringPtrOutput `pulumi:"forceUpdateTag"`
	// An `identity` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	Identity ResourceDeploymentScriptPowerShellIdentityPtrOutput `pulumi:"identity"`
	// Specifies the Azure Region where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name which should be used for this Resource Deployment Script. The name length must be from 1 to 260 characters. The name can only contain alphanumeric, underscore, parentheses, hyphen and period, and it cannot end with a period. Changing this forces a new Resource Deployment Script to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of script outputs.
	Outputs pulumi.StringOutput `pulumi:"outputs"`
	// Uri for the script. This is the entry point for the external script. Changing this forces a new Resource Deployment Script to be created.
	PrimaryScriptUri pulumi.StringPtrOutput `pulumi:"primaryScriptUri"`
	// Specifies the name of the Resource Group where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. The time duration should be between `1` hour and `26` hours (inclusive) and should be specified in ISO 8601 format. Changing this forces a new Resource Deployment Script to be created.
	RetentionInterval pulumi.StringOutput `pulumi:"retentionInterval"`
	// Script body. Changing this forces a new Resource Deployment Script to be created.
	ScriptContent pulumi.StringPtrOutput `pulumi:"scriptContent"`
	// A `storageAccount` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	StorageAccount ResourceDeploymentScriptPowerShellStorageAccountPtrOutput `pulumi:"storageAccount"`
	// Supporting files for the external script. Changing this forces a new Resource Deployment Script to be created.
	SupportingScriptUris pulumi.StringArrayOutput `pulumi:"supportingScriptUris"`
	// A mapping of tags which should be assigned to the Resource Deployment Script.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Maximum allowed script execution time specified in ISO 8601 format. Needs to be greater than 0 and smaller than 1 day. Defaults to `P1D`. Changing this forces a new Resource Deployment Script to be created.
	Timeout pulumi.StringPtrOutput `pulumi:"timeout"`
	// Specifies the version of the Azure PowerShell that should be used in the format `X.Y` (e.g. `9.7`). A canonical list of versions [is available from the Microsoft Container Registry API](https://mcr.microsoft.com/v2/azure-powershell/tags/list). Changing this forces a new Resource Deployment Script to be created.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewResourceDeploymentScriptPowerShell registers a new resource with the given unique name, arguments, and options.
func NewResourceDeploymentScriptPowerShell(ctx *pulumi.Context,
	name string, args *ResourceDeploymentScriptPowerShellArgs, opts ...pulumi.ResourceOption) (*ResourceDeploymentScriptPowerShell, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.RetentionInterval == nil {
		return nil, errors.New("invalid value for required argument 'RetentionInterval'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourceDeploymentScriptPowerShell
	err := ctx.RegisterResource("azure:core/resourceDeploymentScriptPowerShell:ResourceDeploymentScriptPowerShell", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceDeploymentScriptPowerShell gets an existing ResourceDeploymentScriptPowerShell resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceDeploymentScriptPowerShell(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceDeploymentScriptPowerShellState, opts ...pulumi.ResourceOption) (*ResourceDeploymentScriptPowerShell, error) {
	var resource ResourceDeploymentScriptPowerShell
	err := ctx.ReadResource("azure:core/resourceDeploymentScriptPowerShell:ResourceDeploymentScriptPowerShell", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceDeploymentScriptPowerShell resources.
type resourceDeploymentScriptPowerShellState struct {
	// Specifies the cleanup preference when the script execution gets in a terminal state. Possible values are `Always`, `OnExpiration`, `OnSuccess`. Defaults to `Always`. Changing this forces a new Resource Deployment Script to be created.
	CleanupPreference *string `pulumi:"cleanupPreference"`
	// Command line arguments to pass to the script. Changing this forces a new Resource Deployment Script to be created.
	CommandLine *string `pulumi:"commandLine"`
	// A `container` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	Container *ResourceDeploymentScriptPowerShellContainer `pulumi:"container"`
	// An `environmentVariable` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	EnvironmentVariables []ResourceDeploymentScriptPowerShellEnvironmentVariable `pulumi:"environmentVariables"`
	// Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. Changing this forces a new Resource Deployment Script to be created.
	ForceUpdateTag *string `pulumi:"forceUpdateTag"`
	// An `identity` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	Identity *ResourceDeploymentScriptPowerShellIdentity `pulumi:"identity"`
	// Specifies the Azure Region where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
	Location *string `pulumi:"location"`
	// Specifies the name which should be used for this Resource Deployment Script. The name length must be from 1 to 260 characters. The name can only contain alphanumeric, underscore, parentheses, hyphen and period, and it cannot end with a period. Changing this forces a new Resource Deployment Script to be created.
	Name *string `pulumi:"name"`
	// List of script outputs.
	Outputs *string `pulumi:"outputs"`
	// Uri for the script. This is the entry point for the external script. Changing this forces a new Resource Deployment Script to be created.
	PrimaryScriptUri *string `pulumi:"primaryScriptUri"`
	// Specifies the name of the Resource Group where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. The time duration should be between `1` hour and `26` hours (inclusive) and should be specified in ISO 8601 format. Changing this forces a new Resource Deployment Script to be created.
	RetentionInterval *string `pulumi:"retentionInterval"`
	// Script body. Changing this forces a new Resource Deployment Script to be created.
	ScriptContent *string `pulumi:"scriptContent"`
	// A `storageAccount` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	StorageAccount *ResourceDeploymentScriptPowerShellStorageAccount `pulumi:"storageAccount"`
	// Supporting files for the external script. Changing this forces a new Resource Deployment Script to be created.
	SupportingScriptUris []string `pulumi:"supportingScriptUris"`
	// A mapping of tags which should be assigned to the Resource Deployment Script.
	Tags map[string]string `pulumi:"tags"`
	// Maximum allowed script execution time specified in ISO 8601 format. Needs to be greater than 0 and smaller than 1 day. Defaults to `P1D`. Changing this forces a new Resource Deployment Script to be created.
	Timeout *string `pulumi:"timeout"`
	// Specifies the version of the Azure PowerShell that should be used in the format `X.Y` (e.g. `9.7`). A canonical list of versions [is available from the Microsoft Container Registry API](https://mcr.microsoft.com/v2/azure-powershell/tags/list). Changing this forces a new Resource Deployment Script to be created.
	Version *string `pulumi:"version"`
}

type ResourceDeploymentScriptPowerShellState struct {
	// Specifies the cleanup preference when the script execution gets in a terminal state. Possible values are `Always`, `OnExpiration`, `OnSuccess`. Defaults to `Always`. Changing this forces a new Resource Deployment Script to be created.
	CleanupPreference pulumi.StringPtrInput
	// Command line arguments to pass to the script. Changing this forces a new Resource Deployment Script to be created.
	CommandLine pulumi.StringPtrInput
	// A `container` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	Container ResourceDeploymentScriptPowerShellContainerPtrInput
	// An `environmentVariable` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	EnvironmentVariables ResourceDeploymentScriptPowerShellEnvironmentVariableArrayInput
	// Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. Changing this forces a new Resource Deployment Script to be created.
	ForceUpdateTag pulumi.StringPtrInput
	// An `identity` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	Identity ResourceDeploymentScriptPowerShellIdentityPtrInput
	// Specifies the Azure Region where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
	Location pulumi.StringPtrInput
	// Specifies the name which should be used for this Resource Deployment Script. The name length must be from 1 to 260 characters. The name can only contain alphanumeric, underscore, parentheses, hyphen and period, and it cannot end with a period. Changing this forces a new Resource Deployment Script to be created.
	Name pulumi.StringPtrInput
	// List of script outputs.
	Outputs pulumi.StringPtrInput
	// Uri for the script. This is the entry point for the external script. Changing this forces a new Resource Deployment Script to be created.
	PrimaryScriptUri pulumi.StringPtrInput
	// Specifies the name of the Resource Group where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
	ResourceGroupName pulumi.StringPtrInput
	// Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. The time duration should be between `1` hour and `26` hours (inclusive) and should be specified in ISO 8601 format. Changing this forces a new Resource Deployment Script to be created.
	RetentionInterval pulumi.StringPtrInput
	// Script body. Changing this forces a new Resource Deployment Script to be created.
	ScriptContent pulumi.StringPtrInput
	// A `storageAccount` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	StorageAccount ResourceDeploymentScriptPowerShellStorageAccountPtrInput
	// Supporting files for the external script. Changing this forces a new Resource Deployment Script to be created.
	SupportingScriptUris pulumi.StringArrayInput
	// A mapping of tags which should be assigned to the Resource Deployment Script.
	Tags pulumi.StringMapInput
	// Maximum allowed script execution time specified in ISO 8601 format. Needs to be greater than 0 and smaller than 1 day. Defaults to `P1D`. Changing this forces a new Resource Deployment Script to be created.
	Timeout pulumi.StringPtrInput
	// Specifies the version of the Azure PowerShell that should be used in the format `X.Y` (e.g. `9.7`). A canonical list of versions [is available from the Microsoft Container Registry API](https://mcr.microsoft.com/v2/azure-powershell/tags/list). Changing this forces a new Resource Deployment Script to be created.
	Version pulumi.StringPtrInput
}

func (ResourceDeploymentScriptPowerShellState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceDeploymentScriptPowerShellState)(nil)).Elem()
}

type resourceDeploymentScriptPowerShellArgs struct {
	// Specifies the cleanup preference when the script execution gets in a terminal state. Possible values are `Always`, `OnExpiration`, `OnSuccess`. Defaults to `Always`. Changing this forces a new Resource Deployment Script to be created.
	CleanupPreference *string `pulumi:"cleanupPreference"`
	// Command line arguments to pass to the script. Changing this forces a new Resource Deployment Script to be created.
	CommandLine *string `pulumi:"commandLine"`
	// A `container` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	Container *ResourceDeploymentScriptPowerShellContainer `pulumi:"container"`
	// An `environmentVariable` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	EnvironmentVariables []ResourceDeploymentScriptPowerShellEnvironmentVariable `pulumi:"environmentVariables"`
	// Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. Changing this forces a new Resource Deployment Script to be created.
	ForceUpdateTag *string `pulumi:"forceUpdateTag"`
	// An `identity` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	Identity *ResourceDeploymentScriptPowerShellIdentity `pulumi:"identity"`
	// Specifies the Azure Region where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
	Location *string `pulumi:"location"`
	// Specifies the name which should be used for this Resource Deployment Script. The name length must be from 1 to 260 characters. The name can only contain alphanumeric, underscore, parentheses, hyphen and period, and it cannot end with a period. Changing this forces a new Resource Deployment Script to be created.
	Name *string `pulumi:"name"`
	// Uri for the script. This is the entry point for the external script. Changing this forces a new Resource Deployment Script to be created.
	PrimaryScriptUri *string `pulumi:"primaryScriptUri"`
	// Specifies the name of the Resource Group where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. The time duration should be between `1` hour and `26` hours (inclusive) and should be specified in ISO 8601 format. Changing this forces a new Resource Deployment Script to be created.
	RetentionInterval string `pulumi:"retentionInterval"`
	// Script body. Changing this forces a new Resource Deployment Script to be created.
	ScriptContent *string `pulumi:"scriptContent"`
	// A `storageAccount` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	StorageAccount *ResourceDeploymentScriptPowerShellStorageAccount `pulumi:"storageAccount"`
	// Supporting files for the external script. Changing this forces a new Resource Deployment Script to be created.
	SupportingScriptUris []string `pulumi:"supportingScriptUris"`
	// A mapping of tags which should be assigned to the Resource Deployment Script.
	Tags map[string]string `pulumi:"tags"`
	// Maximum allowed script execution time specified in ISO 8601 format. Needs to be greater than 0 and smaller than 1 day. Defaults to `P1D`. Changing this forces a new Resource Deployment Script to be created.
	Timeout *string `pulumi:"timeout"`
	// Specifies the version of the Azure PowerShell that should be used in the format `X.Y` (e.g. `9.7`). A canonical list of versions [is available from the Microsoft Container Registry API](https://mcr.microsoft.com/v2/azure-powershell/tags/list). Changing this forces a new Resource Deployment Script to be created.
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a ResourceDeploymentScriptPowerShell resource.
type ResourceDeploymentScriptPowerShellArgs struct {
	// Specifies the cleanup preference when the script execution gets in a terminal state. Possible values are `Always`, `OnExpiration`, `OnSuccess`. Defaults to `Always`. Changing this forces a new Resource Deployment Script to be created.
	CleanupPreference pulumi.StringPtrInput
	// Command line arguments to pass to the script. Changing this forces a new Resource Deployment Script to be created.
	CommandLine pulumi.StringPtrInput
	// A `container` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	Container ResourceDeploymentScriptPowerShellContainerPtrInput
	// An `environmentVariable` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	EnvironmentVariables ResourceDeploymentScriptPowerShellEnvironmentVariableArrayInput
	// Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. Changing this forces a new Resource Deployment Script to be created.
	ForceUpdateTag pulumi.StringPtrInput
	// An `identity` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	Identity ResourceDeploymentScriptPowerShellIdentityPtrInput
	// Specifies the Azure Region where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
	Location pulumi.StringPtrInput
	// Specifies the name which should be used for this Resource Deployment Script. The name length must be from 1 to 260 characters. The name can only contain alphanumeric, underscore, parentheses, hyphen and period, and it cannot end with a period. Changing this forces a new Resource Deployment Script to be created.
	Name pulumi.StringPtrInput
	// Uri for the script. This is the entry point for the external script. Changing this forces a new Resource Deployment Script to be created.
	PrimaryScriptUri pulumi.StringPtrInput
	// Specifies the name of the Resource Group where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
	ResourceGroupName pulumi.StringInput
	// Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. The time duration should be between `1` hour and `26` hours (inclusive) and should be specified in ISO 8601 format. Changing this forces a new Resource Deployment Script to be created.
	RetentionInterval pulumi.StringInput
	// Script body. Changing this forces a new Resource Deployment Script to be created.
	ScriptContent pulumi.StringPtrInput
	// A `storageAccount` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	StorageAccount ResourceDeploymentScriptPowerShellStorageAccountPtrInput
	// Supporting files for the external script. Changing this forces a new Resource Deployment Script to be created.
	SupportingScriptUris pulumi.StringArrayInput
	// A mapping of tags which should be assigned to the Resource Deployment Script.
	Tags pulumi.StringMapInput
	// Maximum allowed script execution time specified in ISO 8601 format. Needs to be greater than 0 and smaller than 1 day. Defaults to `P1D`. Changing this forces a new Resource Deployment Script to be created.
	Timeout pulumi.StringPtrInput
	// Specifies the version of the Azure PowerShell that should be used in the format `X.Y` (e.g. `9.7`). A canonical list of versions [is available from the Microsoft Container Registry API](https://mcr.microsoft.com/v2/azure-powershell/tags/list). Changing this forces a new Resource Deployment Script to be created.
	Version pulumi.StringInput
}

func (ResourceDeploymentScriptPowerShellArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceDeploymentScriptPowerShellArgs)(nil)).Elem()
}

type ResourceDeploymentScriptPowerShellInput interface {
	pulumi.Input

	ToResourceDeploymentScriptPowerShellOutput() ResourceDeploymentScriptPowerShellOutput
	ToResourceDeploymentScriptPowerShellOutputWithContext(ctx context.Context) ResourceDeploymentScriptPowerShellOutput
}

func (*ResourceDeploymentScriptPowerShell) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceDeploymentScriptPowerShell)(nil)).Elem()
}

func (i *ResourceDeploymentScriptPowerShell) ToResourceDeploymentScriptPowerShellOutput() ResourceDeploymentScriptPowerShellOutput {
	return i.ToResourceDeploymentScriptPowerShellOutputWithContext(context.Background())
}

func (i *ResourceDeploymentScriptPowerShell) ToResourceDeploymentScriptPowerShellOutputWithContext(ctx context.Context) ResourceDeploymentScriptPowerShellOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDeploymentScriptPowerShellOutput)
}

// ResourceDeploymentScriptPowerShellArrayInput is an input type that accepts ResourceDeploymentScriptPowerShellArray and ResourceDeploymentScriptPowerShellArrayOutput values.
// You can construct a concrete instance of `ResourceDeploymentScriptPowerShellArrayInput` via:
//
//	ResourceDeploymentScriptPowerShellArray{ ResourceDeploymentScriptPowerShellArgs{...} }
type ResourceDeploymentScriptPowerShellArrayInput interface {
	pulumi.Input

	ToResourceDeploymentScriptPowerShellArrayOutput() ResourceDeploymentScriptPowerShellArrayOutput
	ToResourceDeploymentScriptPowerShellArrayOutputWithContext(context.Context) ResourceDeploymentScriptPowerShellArrayOutput
}

type ResourceDeploymentScriptPowerShellArray []ResourceDeploymentScriptPowerShellInput

func (ResourceDeploymentScriptPowerShellArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceDeploymentScriptPowerShell)(nil)).Elem()
}

func (i ResourceDeploymentScriptPowerShellArray) ToResourceDeploymentScriptPowerShellArrayOutput() ResourceDeploymentScriptPowerShellArrayOutput {
	return i.ToResourceDeploymentScriptPowerShellArrayOutputWithContext(context.Background())
}

func (i ResourceDeploymentScriptPowerShellArray) ToResourceDeploymentScriptPowerShellArrayOutputWithContext(ctx context.Context) ResourceDeploymentScriptPowerShellArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDeploymentScriptPowerShellArrayOutput)
}

// ResourceDeploymentScriptPowerShellMapInput is an input type that accepts ResourceDeploymentScriptPowerShellMap and ResourceDeploymentScriptPowerShellMapOutput values.
// You can construct a concrete instance of `ResourceDeploymentScriptPowerShellMapInput` via:
//
//	ResourceDeploymentScriptPowerShellMap{ "key": ResourceDeploymentScriptPowerShellArgs{...} }
type ResourceDeploymentScriptPowerShellMapInput interface {
	pulumi.Input

	ToResourceDeploymentScriptPowerShellMapOutput() ResourceDeploymentScriptPowerShellMapOutput
	ToResourceDeploymentScriptPowerShellMapOutputWithContext(context.Context) ResourceDeploymentScriptPowerShellMapOutput
}

type ResourceDeploymentScriptPowerShellMap map[string]ResourceDeploymentScriptPowerShellInput

func (ResourceDeploymentScriptPowerShellMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceDeploymentScriptPowerShell)(nil)).Elem()
}

func (i ResourceDeploymentScriptPowerShellMap) ToResourceDeploymentScriptPowerShellMapOutput() ResourceDeploymentScriptPowerShellMapOutput {
	return i.ToResourceDeploymentScriptPowerShellMapOutputWithContext(context.Background())
}

func (i ResourceDeploymentScriptPowerShellMap) ToResourceDeploymentScriptPowerShellMapOutputWithContext(ctx context.Context) ResourceDeploymentScriptPowerShellMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDeploymentScriptPowerShellMapOutput)
}

type ResourceDeploymentScriptPowerShellOutput struct{ *pulumi.OutputState }

func (ResourceDeploymentScriptPowerShellOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceDeploymentScriptPowerShell)(nil)).Elem()
}

func (o ResourceDeploymentScriptPowerShellOutput) ToResourceDeploymentScriptPowerShellOutput() ResourceDeploymentScriptPowerShellOutput {
	return o
}

func (o ResourceDeploymentScriptPowerShellOutput) ToResourceDeploymentScriptPowerShellOutputWithContext(ctx context.Context) ResourceDeploymentScriptPowerShellOutput {
	return o
}

// Specifies the cleanup preference when the script execution gets in a terminal state. Possible values are `Always`, `OnExpiration`, `OnSuccess`. Defaults to `Always`. Changing this forces a new Resource Deployment Script to be created.
func (o ResourceDeploymentScriptPowerShellOutput) CleanupPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptPowerShell) pulumi.StringPtrOutput { return v.CleanupPreference }).(pulumi.StringPtrOutput)
}

// Command line arguments to pass to the script. Changing this forces a new Resource Deployment Script to be created.
func (o ResourceDeploymentScriptPowerShellOutput) CommandLine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptPowerShell) pulumi.StringPtrOutput { return v.CommandLine }).(pulumi.StringPtrOutput)
}

// A `container` block as defined below. Changing this forces a new Resource Deployment Script to be created.
func (o ResourceDeploymentScriptPowerShellOutput) Container() ResourceDeploymentScriptPowerShellContainerPtrOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptPowerShell) ResourceDeploymentScriptPowerShellContainerPtrOutput {
		return v.Container
	}).(ResourceDeploymentScriptPowerShellContainerPtrOutput)
}

// An `environmentVariable` block as defined below. Changing this forces a new Resource Deployment Script to be created.
func (o ResourceDeploymentScriptPowerShellOutput) EnvironmentVariables() ResourceDeploymentScriptPowerShellEnvironmentVariableArrayOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptPowerShell) ResourceDeploymentScriptPowerShellEnvironmentVariableArrayOutput {
		return v.EnvironmentVariables
	}).(ResourceDeploymentScriptPowerShellEnvironmentVariableArrayOutput)
}

// Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. Changing this forces a new Resource Deployment Script to be created.
func (o ResourceDeploymentScriptPowerShellOutput) ForceUpdateTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptPowerShell) pulumi.StringPtrOutput { return v.ForceUpdateTag }).(pulumi.StringPtrOutput)
}

// An `identity` block as defined below. Changing this forces a new Resource Deployment Script to be created.
func (o ResourceDeploymentScriptPowerShellOutput) Identity() ResourceDeploymentScriptPowerShellIdentityPtrOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptPowerShell) ResourceDeploymentScriptPowerShellIdentityPtrOutput {
		return v.Identity
	}).(ResourceDeploymentScriptPowerShellIdentityPtrOutput)
}

// Specifies the Azure Region where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
func (o ResourceDeploymentScriptPowerShellOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptPowerShell) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name which should be used for this Resource Deployment Script. The name length must be from 1 to 260 characters. The name can only contain alphanumeric, underscore, parentheses, hyphen and period, and it cannot end with a period. Changing this forces a new Resource Deployment Script to be created.
func (o ResourceDeploymentScriptPowerShellOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptPowerShell) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of script outputs.
func (o ResourceDeploymentScriptPowerShellOutput) Outputs() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptPowerShell) pulumi.StringOutput { return v.Outputs }).(pulumi.StringOutput)
}

// Uri for the script. This is the entry point for the external script. Changing this forces a new Resource Deployment Script to be created.
func (o ResourceDeploymentScriptPowerShellOutput) PrimaryScriptUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptPowerShell) pulumi.StringPtrOutput { return v.PrimaryScriptUri }).(pulumi.StringPtrOutput)
}

// Specifies the name of the Resource Group where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
func (o ResourceDeploymentScriptPowerShellOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptPowerShell) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. The time duration should be between `1` hour and `26` hours (inclusive) and should be specified in ISO 8601 format. Changing this forces a new Resource Deployment Script to be created.
func (o ResourceDeploymentScriptPowerShellOutput) RetentionInterval() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptPowerShell) pulumi.StringOutput { return v.RetentionInterval }).(pulumi.StringOutput)
}

// Script body. Changing this forces a new Resource Deployment Script to be created.
func (o ResourceDeploymentScriptPowerShellOutput) ScriptContent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptPowerShell) pulumi.StringPtrOutput { return v.ScriptContent }).(pulumi.StringPtrOutput)
}

// A `storageAccount` block as defined below. Changing this forces a new Resource Deployment Script to be created.
func (o ResourceDeploymentScriptPowerShellOutput) StorageAccount() ResourceDeploymentScriptPowerShellStorageAccountPtrOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptPowerShell) ResourceDeploymentScriptPowerShellStorageAccountPtrOutput {
		return v.StorageAccount
	}).(ResourceDeploymentScriptPowerShellStorageAccountPtrOutput)
}

// Supporting files for the external script. Changing this forces a new Resource Deployment Script to be created.
func (o ResourceDeploymentScriptPowerShellOutput) SupportingScriptUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptPowerShell) pulumi.StringArrayOutput { return v.SupportingScriptUris }).(pulumi.StringArrayOutput)
}

// A mapping of tags which should be assigned to the Resource Deployment Script.
func (o ResourceDeploymentScriptPowerShellOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptPowerShell) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Maximum allowed script execution time specified in ISO 8601 format. Needs to be greater than 0 and smaller than 1 day. Defaults to `P1D`. Changing this forces a new Resource Deployment Script to be created.
func (o ResourceDeploymentScriptPowerShellOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptPowerShell) pulumi.StringPtrOutput { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Specifies the version of the Azure PowerShell that should be used in the format `X.Y` (e.g. `9.7`). A canonical list of versions [is available from the Microsoft Container Registry API](https://mcr.microsoft.com/v2/azure-powershell/tags/list). Changing this forces a new Resource Deployment Script to be created.
func (o ResourceDeploymentScriptPowerShellOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptPowerShell) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type ResourceDeploymentScriptPowerShellArrayOutput struct{ *pulumi.OutputState }

func (ResourceDeploymentScriptPowerShellArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceDeploymentScriptPowerShell)(nil)).Elem()
}

func (o ResourceDeploymentScriptPowerShellArrayOutput) ToResourceDeploymentScriptPowerShellArrayOutput() ResourceDeploymentScriptPowerShellArrayOutput {
	return o
}

func (o ResourceDeploymentScriptPowerShellArrayOutput) ToResourceDeploymentScriptPowerShellArrayOutputWithContext(ctx context.Context) ResourceDeploymentScriptPowerShellArrayOutput {
	return o
}

func (o ResourceDeploymentScriptPowerShellArrayOutput) Index(i pulumi.IntInput) ResourceDeploymentScriptPowerShellOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourceDeploymentScriptPowerShell {
		return vs[0].([]*ResourceDeploymentScriptPowerShell)[vs[1].(int)]
	}).(ResourceDeploymentScriptPowerShellOutput)
}

type ResourceDeploymentScriptPowerShellMapOutput struct{ *pulumi.OutputState }

func (ResourceDeploymentScriptPowerShellMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceDeploymentScriptPowerShell)(nil)).Elem()
}

func (o ResourceDeploymentScriptPowerShellMapOutput) ToResourceDeploymentScriptPowerShellMapOutput() ResourceDeploymentScriptPowerShellMapOutput {
	return o
}

func (o ResourceDeploymentScriptPowerShellMapOutput) ToResourceDeploymentScriptPowerShellMapOutputWithContext(ctx context.Context) ResourceDeploymentScriptPowerShellMapOutput {
	return o
}

func (o ResourceDeploymentScriptPowerShellMapOutput) MapIndex(k pulumi.StringInput) ResourceDeploymentScriptPowerShellOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourceDeploymentScriptPowerShell {
		return vs[0].(map[string]*ResourceDeploymentScriptPowerShell)[vs[1].(string)]
	}).(ResourceDeploymentScriptPowerShellOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDeploymentScriptPowerShellInput)(nil)).Elem(), &ResourceDeploymentScriptPowerShell{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDeploymentScriptPowerShellArrayInput)(nil)).Elem(), ResourceDeploymentScriptPowerShellArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDeploymentScriptPowerShellMapInput)(nil)).Elem(), ResourceDeploymentScriptPowerShellMap{})
	pulumi.RegisterOutputType(ResourceDeploymentScriptPowerShellOutput{})
	pulumi.RegisterOutputType(ResourceDeploymentScriptPowerShellArrayOutput{})
	pulumi.RegisterOutputType(ResourceDeploymentScriptPowerShellMapOutput{})
}
