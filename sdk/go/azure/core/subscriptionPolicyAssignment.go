// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package core

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Subscription Policy Assignment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/policy"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := core.LookupSubscription(ctx, nil, nil)
// 		if err != nil {
// 			return err
// 		}
// 		exampleDefinition, err := policy.NewDefinition(ctx, "exampleDefinition", &policy.DefinitionArgs{
// 			PolicyType: pulumi.String("Custom"),
// 			Mode:       pulumi.String("All"),
// 			PolicyRule: pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v", "	{\n", "    \"if\": {\n", "      \"not\": {\n", "        \"field\": \"location\",\n", "        \"equals\": \"westeurope\"\n", "      }\n", "    },\n", "    \"then\": {\n", "      \"effect\": \"Deny\"\n", "    }\n", "  }\n")),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = core.NewSubscriptionPolicyAssignment(ctx, "exampleSubscriptionPolicyAssignment", &core.SubscriptionPolicyAssignmentArgs{
// 			PolicyDefinitionId: exampleDefinition.ID(),
// 			SubscriptionId:     pulumi.Any(azurerm_subscription.Current.Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Subscription Policy Assignments can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:core/subscriptionPolicyAssignment:SubscriptionPolicyAssignment example /subscriptions/00000000-0000-0000-000000000000/providers/Microsoft.Authorization/policyAssignments/assignment1
// ```
type SubscriptionPolicyAssignment struct {
	pulumi.CustomResourceState

	// A description which should be used for this Policy Assignment.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The Display Name for this Policy Assignment.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Specifies if this Policy should be enforced or not?
	Enforce pulumi.BoolPtrOutput `pulumi:"enforce"`
	// An `identity` block as defined below.
	Identity SubscriptionPolicyAssignmentIdentityPtrOutput `pulumi:"identity"`
	// The Azure Region where the Policy Assignment should exist. Changing this forces a new Policy Assignment to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// A JSON mapping of any Metadata for this Policy.
	Metadata pulumi.StringOutput `pulumi:"metadata"`
	// The name which should be used for this Policy Assignment. Changing this forces a new Policy Assignment to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// One or more `nonComplianceMessage` blocks as defined below.
	NonComplianceMessages SubscriptionPolicyAssignmentNonComplianceMessageArrayOutput `pulumi:"nonComplianceMessages"`
	// Specifies a list of Resource Scopes (for example a Subscription, or a Resource Group) within this Management Group which are excluded from this Policy.
	NotScopes pulumi.StringArrayOutput `pulumi:"notScopes"`
	// A JSON mapping of any Parameters for this Policy. Changing this forces a new Management Group Policy Assignment to be created.
	Parameters pulumi.StringPtrOutput `pulumi:"parameters"`
	// The ID of the Policy Definition or Policy Definition Set. Changing this forces a new Policy Assignment to be created.
	PolicyDefinitionId pulumi.StringOutput `pulumi:"policyDefinitionId"`
	// The ID of the Subscription where this Policy Assignment should be created. Changing this forces a new Policy Assignment to be created.
	SubscriptionId pulumi.StringOutput `pulumi:"subscriptionId"`
}

// NewSubscriptionPolicyAssignment registers a new resource with the given unique name, arguments, and options.
func NewSubscriptionPolicyAssignment(ctx *pulumi.Context,
	name string, args *SubscriptionPolicyAssignmentArgs, opts ...pulumi.ResourceOption) (*SubscriptionPolicyAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyDefinitionId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyDefinitionId'")
	}
	if args.SubscriptionId == nil {
		return nil, errors.New("invalid value for required argument 'SubscriptionId'")
	}
	var resource SubscriptionPolicyAssignment
	err := ctx.RegisterResource("azure:core/subscriptionPolicyAssignment:SubscriptionPolicyAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubscriptionPolicyAssignment gets an existing SubscriptionPolicyAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubscriptionPolicyAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubscriptionPolicyAssignmentState, opts ...pulumi.ResourceOption) (*SubscriptionPolicyAssignment, error) {
	var resource SubscriptionPolicyAssignment
	err := ctx.ReadResource("azure:core/subscriptionPolicyAssignment:SubscriptionPolicyAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubscriptionPolicyAssignment resources.
type subscriptionPolicyAssignmentState struct {
	// A description which should be used for this Policy Assignment.
	Description *string `pulumi:"description"`
	// The Display Name for this Policy Assignment.
	DisplayName *string `pulumi:"displayName"`
	// Specifies if this Policy should be enforced or not?
	Enforce *bool `pulumi:"enforce"`
	// An `identity` block as defined below.
	Identity *SubscriptionPolicyAssignmentIdentity `pulumi:"identity"`
	// The Azure Region where the Policy Assignment should exist. Changing this forces a new Policy Assignment to be created.
	Location *string `pulumi:"location"`
	// A JSON mapping of any Metadata for this Policy.
	Metadata *string `pulumi:"metadata"`
	// The name which should be used for this Policy Assignment. Changing this forces a new Policy Assignment to be created.
	Name *string `pulumi:"name"`
	// One or more `nonComplianceMessage` blocks as defined below.
	NonComplianceMessages []SubscriptionPolicyAssignmentNonComplianceMessage `pulumi:"nonComplianceMessages"`
	// Specifies a list of Resource Scopes (for example a Subscription, or a Resource Group) within this Management Group which are excluded from this Policy.
	NotScopes []string `pulumi:"notScopes"`
	// A JSON mapping of any Parameters for this Policy. Changing this forces a new Management Group Policy Assignment to be created.
	Parameters *string `pulumi:"parameters"`
	// The ID of the Policy Definition or Policy Definition Set. Changing this forces a new Policy Assignment to be created.
	PolicyDefinitionId *string `pulumi:"policyDefinitionId"`
	// The ID of the Subscription where this Policy Assignment should be created. Changing this forces a new Policy Assignment to be created.
	SubscriptionId *string `pulumi:"subscriptionId"`
}

type SubscriptionPolicyAssignmentState struct {
	// A description which should be used for this Policy Assignment.
	Description pulumi.StringPtrInput
	// The Display Name for this Policy Assignment.
	DisplayName pulumi.StringPtrInput
	// Specifies if this Policy should be enforced or not?
	Enforce pulumi.BoolPtrInput
	// An `identity` block as defined below.
	Identity SubscriptionPolicyAssignmentIdentityPtrInput
	// The Azure Region where the Policy Assignment should exist. Changing this forces a new Policy Assignment to be created.
	Location pulumi.StringPtrInput
	// A JSON mapping of any Metadata for this Policy.
	Metadata pulumi.StringPtrInput
	// The name which should be used for this Policy Assignment. Changing this forces a new Policy Assignment to be created.
	Name pulumi.StringPtrInput
	// One or more `nonComplianceMessage` blocks as defined below.
	NonComplianceMessages SubscriptionPolicyAssignmentNonComplianceMessageArrayInput
	// Specifies a list of Resource Scopes (for example a Subscription, or a Resource Group) within this Management Group which are excluded from this Policy.
	NotScopes pulumi.StringArrayInput
	// A JSON mapping of any Parameters for this Policy. Changing this forces a new Management Group Policy Assignment to be created.
	Parameters pulumi.StringPtrInput
	// The ID of the Policy Definition or Policy Definition Set. Changing this forces a new Policy Assignment to be created.
	PolicyDefinitionId pulumi.StringPtrInput
	// The ID of the Subscription where this Policy Assignment should be created. Changing this forces a new Policy Assignment to be created.
	SubscriptionId pulumi.StringPtrInput
}

func (SubscriptionPolicyAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionPolicyAssignmentState)(nil)).Elem()
}

type subscriptionPolicyAssignmentArgs struct {
	// A description which should be used for this Policy Assignment.
	Description *string `pulumi:"description"`
	// The Display Name for this Policy Assignment.
	DisplayName *string `pulumi:"displayName"`
	// Specifies if this Policy should be enforced or not?
	Enforce *bool `pulumi:"enforce"`
	// An `identity` block as defined below.
	Identity *SubscriptionPolicyAssignmentIdentity `pulumi:"identity"`
	// The Azure Region where the Policy Assignment should exist. Changing this forces a new Policy Assignment to be created.
	Location *string `pulumi:"location"`
	// A JSON mapping of any Metadata for this Policy.
	Metadata *string `pulumi:"metadata"`
	// The name which should be used for this Policy Assignment. Changing this forces a new Policy Assignment to be created.
	Name *string `pulumi:"name"`
	// One or more `nonComplianceMessage` blocks as defined below.
	NonComplianceMessages []SubscriptionPolicyAssignmentNonComplianceMessage `pulumi:"nonComplianceMessages"`
	// Specifies a list of Resource Scopes (for example a Subscription, or a Resource Group) within this Management Group which are excluded from this Policy.
	NotScopes []string `pulumi:"notScopes"`
	// A JSON mapping of any Parameters for this Policy. Changing this forces a new Management Group Policy Assignment to be created.
	Parameters *string `pulumi:"parameters"`
	// The ID of the Policy Definition or Policy Definition Set. Changing this forces a new Policy Assignment to be created.
	PolicyDefinitionId string `pulumi:"policyDefinitionId"`
	// The ID of the Subscription where this Policy Assignment should be created. Changing this forces a new Policy Assignment to be created.
	SubscriptionId string `pulumi:"subscriptionId"`
}

// The set of arguments for constructing a SubscriptionPolicyAssignment resource.
type SubscriptionPolicyAssignmentArgs struct {
	// A description which should be used for this Policy Assignment.
	Description pulumi.StringPtrInput
	// The Display Name for this Policy Assignment.
	DisplayName pulumi.StringPtrInput
	// Specifies if this Policy should be enforced or not?
	Enforce pulumi.BoolPtrInput
	// An `identity` block as defined below.
	Identity SubscriptionPolicyAssignmentIdentityPtrInput
	// The Azure Region where the Policy Assignment should exist. Changing this forces a new Policy Assignment to be created.
	Location pulumi.StringPtrInput
	// A JSON mapping of any Metadata for this Policy.
	Metadata pulumi.StringPtrInput
	// The name which should be used for this Policy Assignment. Changing this forces a new Policy Assignment to be created.
	Name pulumi.StringPtrInput
	// One or more `nonComplianceMessage` blocks as defined below.
	NonComplianceMessages SubscriptionPolicyAssignmentNonComplianceMessageArrayInput
	// Specifies a list of Resource Scopes (for example a Subscription, or a Resource Group) within this Management Group which are excluded from this Policy.
	NotScopes pulumi.StringArrayInput
	// A JSON mapping of any Parameters for this Policy. Changing this forces a new Management Group Policy Assignment to be created.
	Parameters pulumi.StringPtrInput
	// The ID of the Policy Definition or Policy Definition Set. Changing this forces a new Policy Assignment to be created.
	PolicyDefinitionId pulumi.StringInput
	// The ID of the Subscription where this Policy Assignment should be created. Changing this forces a new Policy Assignment to be created.
	SubscriptionId pulumi.StringInput
}

func (SubscriptionPolicyAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionPolicyAssignmentArgs)(nil)).Elem()
}

type SubscriptionPolicyAssignmentInput interface {
	pulumi.Input

	ToSubscriptionPolicyAssignmentOutput() SubscriptionPolicyAssignmentOutput
	ToSubscriptionPolicyAssignmentOutputWithContext(ctx context.Context) SubscriptionPolicyAssignmentOutput
}

func (*SubscriptionPolicyAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionPolicyAssignment)(nil)).Elem()
}

func (i *SubscriptionPolicyAssignment) ToSubscriptionPolicyAssignmentOutput() SubscriptionPolicyAssignmentOutput {
	return i.ToSubscriptionPolicyAssignmentOutputWithContext(context.Background())
}

func (i *SubscriptionPolicyAssignment) ToSubscriptionPolicyAssignmentOutputWithContext(ctx context.Context) SubscriptionPolicyAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionPolicyAssignmentOutput)
}

// SubscriptionPolicyAssignmentArrayInput is an input type that accepts SubscriptionPolicyAssignmentArray and SubscriptionPolicyAssignmentArrayOutput values.
// You can construct a concrete instance of `SubscriptionPolicyAssignmentArrayInput` via:
//
//          SubscriptionPolicyAssignmentArray{ SubscriptionPolicyAssignmentArgs{...} }
type SubscriptionPolicyAssignmentArrayInput interface {
	pulumi.Input

	ToSubscriptionPolicyAssignmentArrayOutput() SubscriptionPolicyAssignmentArrayOutput
	ToSubscriptionPolicyAssignmentArrayOutputWithContext(context.Context) SubscriptionPolicyAssignmentArrayOutput
}

type SubscriptionPolicyAssignmentArray []SubscriptionPolicyAssignmentInput

func (SubscriptionPolicyAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubscriptionPolicyAssignment)(nil)).Elem()
}

func (i SubscriptionPolicyAssignmentArray) ToSubscriptionPolicyAssignmentArrayOutput() SubscriptionPolicyAssignmentArrayOutput {
	return i.ToSubscriptionPolicyAssignmentArrayOutputWithContext(context.Background())
}

func (i SubscriptionPolicyAssignmentArray) ToSubscriptionPolicyAssignmentArrayOutputWithContext(ctx context.Context) SubscriptionPolicyAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionPolicyAssignmentArrayOutput)
}

// SubscriptionPolicyAssignmentMapInput is an input type that accepts SubscriptionPolicyAssignmentMap and SubscriptionPolicyAssignmentMapOutput values.
// You can construct a concrete instance of `SubscriptionPolicyAssignmentMapInput` via:
//
//          SubscriptionPolicyAssignmentMap{ "key": SubscriptionPolicyAssignmentArgs{...} }
type SubscriptionPolicyAssignmentMapInput interface {
	pulumi.Input

	ToSubscriptionPolicyAssignmentMapOutput() SubscriptionPolicyAssignmentMapOutput
	ToSubscriptionPolicyAssignmentMapOutputWithContext(context.Context) SubscriptionPolicyAssignmentMapOutput
}

type SubscriptionPolicyAssignmentMap map[string]SubscriptionPolicyAssignmentInput

func (SubscriptionPolicyAssignmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubscriptionPolicyAssignment)(nil)).Elem()
}

func (i SubscriptionPolicyAssignmentMap) ToSubscriptionPolicyAssignmentMapOutput() SubscriptionPolicyAssignmentMapOutput {
	return i.ToSubscriptionPolicyAssignmentMapOutputWithContext(context.Background())
}

func (i SubscriptionPolicyAssignmentMap) ToSubscriptionPolicyAssignmentMapOutputWithContext(ctx context.Context) SubscriptionPolicyAssignmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionPolicyAssignmentMapOutput)
}

type SubscriptionPolicyAssignmentOutput struct{ *pulumi.OutputState }

func (SubscriptionPolicyAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionPolicyAssignment)(nil)).Elem()
}

func (o SubscriptionPolicyAssignmentOutput) ToSubscriptionPolicyAssignmentOutput() SubscriptionPolicyAssignmentOutput {
	return o
}

func (o SubscriptionPolicyAssignmentOutput) ToSubscriptionPolicyAssignmentOutputWithContext(ctx context.Context) SubscriptionPolicyAssignmentOutput {
	return o
}

type SubscriptionPolicyAssignmentArrayOutput struct{ *pulumi.OutputState }

func (SubscriptionPolicyAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubscriptionPolicyAssignment)(nil)).Elem()
}

func (o SubscriptionPolicyAssignmentArrayOutput) ToSubscriptionPolicyAssignmentArrayOutput() SubscriptionPolicyAssignmentArrayOutput {
	return o
}

func (o SubscriptionPolicyAssignmentArrayOutput) ToSubscriptionPolicyAssignmentArrayOutputWithContext(ctx context.Context) SubscriptionPolicyAssignmentArrayOutput {
	return o
}

func (o SubscriptionPolicyAssignmentArrayOutput) Index(i pulumi.IntInput) SubscriptionPolicyAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SubscriptionPolicyAssignment {
		return vs[0].([]*SubscriptionPolicyAssignment)[vs[1].(int)]
	}).(SubscriptionPolicyAssignmentOutput)
}

type SubscriptionPolicyAssignmentMapOutput struct{ *pulumi.OutputState }

func (SubscriptionPolicyAssignmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubscriptionPolicyAssignment)(nil)).Elem()
}

func (o SubscriptionPolicyAssignmentMapOutput) ToSubscriptionPolicyAssignmentMapOutput() SubscriptionPolicyAssignmentMapOutput {
	return o
}

func (o SubscriptionPolicyAssignmentMapOutput) ToSubscriptionPolicyAssignmentMapOutputWithContext(ctx context.Context) SubscriptionPolicyAssignmentMapOutput {
	return o
}

func (o SubscriptionPolicyAssignmentMapOutput) MapIndex(k pulumi.StringInput) SubscriptionPolicyAssignmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SubscriptionPolicyAssignment {
		return vs[0].(map[string]*SubscriptionPolicyAssignment)[vs[1].(string)]
	}).(SubscriptionPolicyAssignmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionPolicyAssignmentInput)(nil)).Elem(), &SubscriptionPolicyAssignment{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionPolicyAssignmentArrayInput)(nil)).Elem(), SubscriptionPolicyAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionPolicyAssignmentMapInput)(nil)).Elem(), SubscriptionPolicyAssignmentMap{})
	pulumi.RegisterOutputType(SubscriptionPolicyAssignmentOutput{})
	pulumi.RegisterOutputType(SubscriptionPolicyAssignmentArrayOutput{})
	pulumi.RegisterOutputType(SubscriptionPolicyAssignmentMapOutput{})
}
