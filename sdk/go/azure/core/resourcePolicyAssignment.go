// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package core

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Policy Assignment to a Resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/policy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleVirtualNetwork, err := network.LookupVirtualNetwork(ctx, &network.LookupVirtualNetworkArgs{
//				Name:              "production",
//				ResourceGroupName: "networking",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleDefinition, err := policy.NewDefinition(ctx, "exampleDefinition", &policy.DefinitionArgs{
//				PolicyType:  pulumi.String("Custom"),
//				Mode:        pulumi.String("All"),
//				DisplayName: pulumi.String("my-policy-definition"),
//				PolicyRule: pulumi.String(` {
//	    "if": {
//	      "not": {
//	        "field": "location",
//	        "equals": "westeurope"
//	      }
//	    },
//	    "then": {
//	      "effect": "Deny"
//	    }
//	  }
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			_, err = core.NewResourcePolicyAssignment(ctx, "exampleResourcePolicyAssignment", &core.ResourcePolicyAssignmentArgs{
//				ResourceId:         *pulumi.String(exampleVirtualNetwork.Id),
//				PolicyDefinitionId: exampleDefinition.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Resource Policy Assignments can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:core/resourcePolicyAssignment:ResourcePolicyAssignment example "{resource}/providers/Microsoft.Authorization/policyAssignments/assignment1"
//
// ```
//
//	where `{resource}` is a Resource ID in the form `/subscriptions/00000000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/virtualNetworks/network1`.
type ResourcePolicyAssignment struct {
	pulumi.CustomResourceState

	// A description which should be used for this Policy Assignment.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The Display Name for this Policy Assignment.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Specifies if this Policy should be enforced or not? Defaults to `true`.
	Enforce pulumi.BoolPtrOutput `pulumi:"enforce"`
	// An `identity` block as defined below.
	//
	// > **Note:** The `location` field must also be specified when `identity` is specified.
	Identity ResourcePolicyAssignmentIdentityPtrOutput `pulumi:"identity"`
	// The Azure Region where the Policy Assignment should exist. Changing this forces a new Policy Assignment to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// A JSON mapping of any Metadata for this Policy.
	Metadata pulumi.StringOutput `pulumi:"metadata"`
	// The name which should be used for this Policy Assignment. Changing this forces a new Resource Policy Assignment to be created. Cannot exceed 64 characters in length.
	Name pulumi.StringOutput `pulumi:"name"`
	// One or more `nonComplianceMessage` blocks as defined below.
	NonComplianceMessages ResourcePolicyAssignmentNonComplianceMessageArrayOutput `pulumi:"nonComplianceMessages"`
	// Specifies a list of Resource Scopes (for example a Subscription, or a Resource Group) within this Management Group which are excluded from this Policy.
	NotScopes pulumi.StringArrayOutput `pulumi:"notScopes"`
	// One or more `overrides` blocks as defined below. More detail about `overrides` and `resourceSelectors` see [policy assignment structure](https://learn.microsoft.com/en-us/azure/governance/policy/concepts/assignment-structure#resource-selectors-preview)
	Overrides ResourcePolicyAssignmentOverrideArrayOutput `pulumi:"overrides"`
	// A JSON mapping of any Parameters for this Policy.
	Parameters pulumi.StringPtrOutput `pulumi:"parameters"`
	// The ID of the Policy Definition or Policy Definition Set. Changing this forces a new Policy Assignment to be created.
	PolicyDefinitionId pulumi.StringOutput `pulumi:"policyDefinitionId"`
	// The ID of the Resource (or Resource Scope) where this should be applied. Changing this forces a new Resource Policy Assignment to be created.
	//
	// > To create a Policy Assignment at a Management Group use the `management.GroupPolicyAssignment` resource, for a Resource Group use the `core.ResourceGroupPolicyAssignment` and for a Subscription use the `core.SubscriptionPolicyAssignment` resource.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// One or more `resourceSelectors` blocks as defined below to filter polices by resource properties.
	ResourceSelectors ResourcePolicyAssignmentResourceSelectorArrayOutput `pulumi:"resourceSelectors"`
}

// NewResourcePolicyAssignment registers a new resource with the given unique name, arguments, and options.
func NewResourcePolicyAssignment(ctx *pulumi.Context,
	name string, args *ResourcePolicyAssignmentArgs, opts ...pulumi.ResourceOption) (*ResourcePolicyAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyDefinitionId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyDefinitionId'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourcePolicyAssignment
	err := ctx.RegisterResource("azure:core/resourcePolicyAssignment:ResourcePolicyAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourcePolicyAssignment gets an existing ResourcePolicyAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourcePolicyAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourcePolicyAssignmentState, opts ...pulumi.ResourceOption) (*ResourcePolicyAssignment, error) {
	var resource ResourcePolicyAssignment
	err := ctx.ReadResource("azure:core/resourcePolicyAssignment:ResourcePolicyAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourcePolicyAssignment resources.
type resourcePolicyAssignmentState struct {
	// A description which should be used for this Policy Assignment.
	Description *string `pulumi:"description"`
	// The Display Name for this Policy Assignment.
	DisplayName *string `pulumi:"displayName"`
	// Specifies if this Policy should be enforced or not? Defaults to `true`.
	Enforce *bool `pulumi:"enforce"`
	// An `identity` block as defined below.
	//
	// > **Note:** The `location` field must also be specified when `identity` is specified.
	Identity *ResourcePolicyAssignmentIdentity `pulumi:"identity"`
	// The Azure Region where the Policy Assignment should exist. Changing this forces a new Policy Assignment to be created.
	Location *string `pulumi:"location"`
	// A JSON mapping of any Metadata for this Policy.
	Metadata *string `pulumi:"metadata"`
	// The name which should be used for this Policy Assignment. Changing this forces a new Resource Policy Assignment to be created. Cannot exceed 64 characters in length.
	Name *string `pulumi:"name"`
	// One or more `nonComplianceMessage` blocks as defined below.
	NonComplianceMessages []ResourcePolicyAssignmentNonComplianceMessage `pulumi:"nonComplianceMessages"`
	// Specifies a list of Resource Scopes (for example a Subscription, or a Resource Group) within this Management Group which are excluded from this Policy.
	NotScopes []string `pulumi:"notScopes"`
	// One or more `overrides` blocks as defined below. More detail about `overrides` and `resourceSelectors` see [policy assignment structure](https://learn.microsoft.com/en-us/azure/governance/policy/concepts/assignment-structure#resource-selectors-preview)
	Overrides []ResourcePolicyAssignmentOverride `pulumi:"overrides"`
	// A JSON mapping of any Parameters for this Policy.
	Parameters *string `pulumi:"parameters"`
	// The ID of the Policy Definition or Policy Definition Set. Changing this forces a new Policy Assignment to be created.
	PolicyDefinitionId *string `pulumi:"policyDefinitionId"`
	// The ID of the Resource (or Resource Scope) where this should be applied. Changing this forces a new Resource Policy Assignment to be created.
	//
	// > To create a Policy Assignment at a Management Group use the `management.GroupPolicyAssignment` resource, for a Resource Group use the `core.ResourceGroupPolicyAssignment` and for a Subscription use the `core.SubscriptionPolicyAssignment` resource.
	ResourceId *string `pulumi:"resourceId"`
	// One or more `resourceSelectors` blocks as defined below to filter polices by resource properties.
	ResourceSelectors []ResourcePolicyAssignmentResourceSelector `pulumi:"resourceSelectors"`
}

type ResourcePolicyAssignmentState struct {
	// A description which should be used for this Policy Assignment.
	Description pulumi.StringPtrInput
	// The Display Name for this Policy Assignment.
	DisplayName pulumi.StringPtrInput
	// Specifies if this Policy should be enforced or not? Defaults to `true`.
	Enforce pulumi.BoolPtrInput
	// An `identity` block as defined below.
	//
	// > **Note:** The `location` field must also be specified when `identity` is specified.
	Identity ResourcePolicyAssignmentIdentityPtrInput
	// The Azure Region where the Policy Assignment should exist. Changing this forces a new Policy Assignment to be created.
	Location pulumi.StringPtrInput
	// A JSON mapping of any Metadata for this Policy.
	Metadata pulumi.StringPtrInput
	// The name which should be used for this Policy Assignment. Changing this forces a new Resource Policy Assignment to be created. Cannot exceed 64 characters in length.
	Name pulumi.StringPtrInput
	// One or more `nonComplianceMessage` blocks as defined below.
	NonComplianceMessages ResourcePolicyAssignmentNonComplianceMessageArrayInput
	// Specifies a list of Resource Scopes (for example a Subscription, or a Resource Group) within this Management Group which are excluded from this Policy.
	NotScopes pulumi.StringArrayInput
	// One or more `overrides` blocks as defined below. More detail about `overrides` and `resourceSelectors` see [policy assignment structure](https://learn.microsoft.com/en-us/azure/governance/policy/concepts/assignment-structure#resource-selectors-preview)
	Overrides ResourcePolicyAssignmentOverrideArrayInput
	// A JSON mapping of any Parameters for this Policy.
	Parameters pulumi.StringPtrInput
	// The ID of the Policy Definition or Policy Definition Set. Changing this forces a new Policy Assignment to be created.
	PolicyDefinitionId pulumi.StringPtrInput
	// The ID of the Resource (or Resource Scope) where this should be applied. Changing this forces a new Resource Policy Assignment to be created.
	//
	// > To create a Policy Assignment at a Management Group use the `management.GroupPolicyAssignment` resource, for a Resource Group use the `core.ResourceGroupPolicyAssignment` and for a Subscription use the `core.SubscriptionPolicyAssignment` resource.
	ResourceId pulumi.StringPtrInput
	// One or more `resourceSelectors` blocks as defined below to filter polices by resource properties.
	ResourceSelectors ResourcePolicyAssignmentResourceSelectorArrayInput
}

func (ResourcePolicyAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourcePolicyAssignmentState)(nil)).Elem()
}

type resourcePolicyAssignmentArgs struct {
	// A description which should be used for this Policy Assignment.
	Description *string `pulumi:"description"`
	// The Display Name for this Policy Assignment.
	DisplayName *string `pulumi:"displayName"`
	// Specifies if this Policy should be enforced or not? Defaults to `true`.
	Enforce *bool `pulumi:"enforce"`
	// An `identity` block as defined below.
	//
	// > **Note:** The `location` field must also be specified when `identity` is specified.
	Identity *ResourcePolicyAssignmentIdentity `pulumi:"identity"`
	// The Azure Region where the Policy Assignment should exist. Changing this forces a new Policy Assignment to be created.
	Location *string `pulumi:"location"`
	// A JSON mapping of any Metadata for this Policy.
	Metadata *string `pulumi:"metadata"`
	// The name which should be used for this Policy Assignment. Changing this forces a new Resource Policy Assignment to be created. Cannot exceed 64 characters in length.
	Name *string `pulumi:"name"`
	// One or more `nonComplianceMessage` blocks as defined below.
	NonComplianceMessages []ResourcePolicyAssignmentNonComplianceMessage `pulumi:"nonComplianceMessages"`
	// Specifies a list of Resource Scopes (for example a Subscription, or a Resource Group) within this Management Group which are excluded from this Policy.
	NotScopes []string `pulumi:"notScopes"`
	// One or more `overrides` blocks as defined below. More detail about `overrides` and `resourceSelectors` see [policy assignment structure](https://learn.microsoft.com/en-us/azure/governance/policy/concepts/assignment-structure#resource-selectors-preview)
	Overrides []ResourcePolicyAssignmentOverride `pulumi:"overrides"`
	// A JSON mapping of any Parameters for this Policy.
	Parameters *string `pulumi:"parameters"`
	// The ID of the Policy Definition or Policy Definition Set. Changing this forces a new Policy Assignment to be created.
	PolicyDefinitionId string `pulumi:"policyDefinitionId"`
	// The ID of the Resource (or Resource Scope) where this should be applied. Changing this forces a new Resource Policy Assignment to be created.
	//
	// > To create a Policy Assignment at a Management Group use the `management.GroupPolicyAssignment` resource, for a Resource Group use the `core.ResourceGroupPolicyAssignment` and for a Subscription use the `core.SubscriptionPolicyAssignment` resource.
	ResourceId string `pulumi:"resourceId"`
	// One or more `resourceSelectors` blocks as defined below to filter polices by resource properties.
	ResourceSelectors []ResourcePolicyAssignmentResourceSelector `pulumi:"resourceSelectors"`
}

// The set of arguments for constructing a ResourcePolicyAssignment resource.
type ResourcePolicyAssignmentArgs struct {
	// A description which should be used for this Policy Assignment.
	Description pulumi.StringPtrInput
	// The Display Name for this Policy Assignment.
	DisplayName pulumi.StringPtrInput
	// Specifies if this Policy should be enforced or not? Defaults to `true`.
	Enforce pulumi.BoolPtrInput
	// An `identity` block as defined below.
	//
	// > **Note:** The `location` field must also be specified when `identity` is specified.
	Identity ResourcePolicyAssignmentIdentityPtrInput
	// The Azure Region where the Policy Assignment should exist. Changing this forces a new Policy Assignment to be created.
	Location pulumi.StringPtrInput
	// A JSON mapping of any Metadata for this Policy.
	Metadata pulumi.StringPtrInput
	// The name which should be used for this Policy Assignment. Changing this forces a new Resource Policy Assignment to be created. Cannot exceed 64 characters in length.
	Name pulumi.StringPtrInput
	// One or more `nonComplianceMessage` blocks as defined below.
	NonComplianceMessages ResourcePolicyAssignmentNonComplianceMessageArrayInput
	// Specifies a list of Resource Scopes (for example a Subscription, or a Resource Group) within this Management Group which are excluded from this Policy.
	NotScopes pulumi.StringArrayInput
	// One or more `overrides` blocks as defined below. More detail about `overrides` and `resourceSelectors` see [policy assignment structure](https://learn.microsoft.com/en-us/azure/governance/policy/concepts/assignment-structure#resource-selectors-preview)
	Overrides ResourcePolicyAssignmentOverrideArrayInput
	// A JSON mapping of any Parameters for this Policy.
	Parameters pulumi.StringPtrInput
	// The ID of the Policy Definition or Policy Definition Set. Changing this forces a new Policy Assignment to be created.
	PolicyDefinitionId pulumi.StringInput
	// The ID of the Resource (or Resource Scope) where this should be applied. Changing this forces a new Resource Policy Assignment to be created.
	//
	// > To create a Policy Assignment at a Management Group use the `management.GroupPolicyAssignment` resource, for a Resource Group use the `core.ResourceGroupPolicyAssignment` and for a Subscription use the `core.SubscriptionPolicyAssignment` resource.
	ResourceId pulumi.StringInput
	// One or more `resourceSelectors` blocks as defined below to filter polices by resource properties.
	ResourceSelectors ResourcePolicyAssignmentResourceSelectorArrayInput
}

func (ResourcePolicyAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourcePolicyAssignmentArgs)(nil)).Elem()
}

type ResourcePolicyAssignmentInput interface {
	pulumi.Input

	ToResourcePolicyAssignmentOutput() ResourcePolicyAssignmentOutput
	ToResourcePolicyAssignmentOutputWithContext(ctx context.Context) ResourcePolicyAssignmentOutput
}

func (*ResourcePolicyAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyAssignment)(nil)).Elem()
}

func (i *ResourcePolicyAssignment) ToResourcePolicyAssignmentOutput() ResourcePolicyAssignmentOutput {
	return i.ToResourcePolicyAssignmentOutputWithContext(context.Background())
}

func (i *ResourcePolicyAssignment) ToResourcePolicyAssignmentOutputWithContext(ctx context.Context) ResourcePolicyAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyAssignmentOutput)
}

// ResourcePolicyAssignmentArrayInput is an input type that accepts ResourcePolicyAssignmentArray and ResourcePolicyAssignmentArrayOutput values.
// You can construct a concrete instance of `ResourcePolicyAssignmentArrayInput` via:
//
//	ResourcePolicyAssignmentArray{ ResourcePolicyAssignmentArgs{...} }
type ResourcePolicyAssignmentArrayInput interface {
	pulumi.Input

	ToResourcePolicyAssignmentArrayOutput() ResourcePolicyAssignmentArrayOutput
	ToResourcePolicyAssignmentArrayOutputWithContext(context.Context) ResourcePolicyAssignmentArrayOutput
}

type ResourcePolicyAssignmentArray []ResourcePolicyAssignmentInput

func (ResourcePolicyAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourcePolicyAssignment)(nil)).Elem()
}

func (i ResourcePolicyAssignmentArray) ToResourcePolicyAssignmentArrayOutput() ResourcePolicyAssignmentArrayOutput {
	return i.ToResourcePolicyAssignmentArrayOutputWithContext(context.Background())
}

func (i ResourcePolicyAssignmentArray) ToResourcePolicyAssignmentArrayOutputWithContext(ctx context.Context) ResourcePolicyAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyAssignmentArrayOutput)
}

// ResourcePolicyAssignmentMapInput is an input type that accepts ResourcePolicyAssignmentMap and ResourcePolicyAssignmentMapOutput values.
// You can construct a concrete instance of `ResourcePolicyAssignmentMapInput` via:
//
//	ResourcePolicyAssignmentMap{ "key": ResourcePolicyAssignmentArgs{...} }
type ResourcePolicyAssignmentMapInput interface {
	pulumi.Input

	ToResourcePolicyAssignmentMapOutput() ResourcePolicyAssignmentMapOutput
	ToResourcePolicyAssignmentMapOutputWithContext(context.Context) ResourcePolicyAssignmentMapOutput
}

type ResourcePolicyAssignmentMap map[string]ResourcePolicyAssignmentInput

func (ResourcePolicyAssignmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourcePolicyAssignment)(nil)).Elem()
}

func (i ResourcePolicyAssignmentMap) ToResourcePolicyAssignmentMapOutput() ResourcePolicyAssignmentMapOutput {
	return i.ToResourcePolicyAssignmentMapOutputWithContext(context.Background())
}

func (i ResourcePolicyAssignmentMap) ToResourcePolicyAssignmentMapOutputWithContext(ctx context.Context) ResourcePolicyAssignmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyAssignmentMapOutput)
}

type ResourcePolicyAssignmentOutput struct{ *pulumi.OutputState }

func (ResourcePolicyAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyAssignment)(nil)).Elem()
}

func (o ResourcePolicyAssignmentOutput) ToResourcePolicyAssignmentOutput() ResourcePolicyAssignmentOutput {
	return o
}

func (o ResourcePolicyAssignmentOutput) ToResourcePolicyAssignmentOutputWithContext(ctx context.Context) ResourcePolicyAssignmentOutput {
	return o
}

// A description which should be used for this Policy Assignment.
func (o ResourcePolicyAssignmentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyAssignment) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The Display Name for this Policy Assignment.
func (o ResourcePolicyAssignmentOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyAssignment) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Specifies if this Policy should be enforced or not? Defaults to `true`.
func (o ResourcePolicyAssignmentOutput) Enforce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyAssignment) pulumi.BoolPtrOutput { return v.Enforce }).(pulumi.BoolPtrOutput)
}

// An `identity` block as defined below.
//
// > **Note:** The `location` field must also be specified when `identity` is specified.
func (o ResourcePolicyAssignmentOutput) Identity() ResourcePolicyAssignmentIdentityPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyAssignment) ResourcePolicyAssignmentIdentityPtrOutput { return v.Identity }).(ResourcePolicyAssignmentIdentityPtrOutput)
}

// The Azure Region where the Policy Assignment should exist. Changing this forces a new Policy Assignment to be created.
func (o ResourcePolicyAssignmentOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcePolicyAssignment) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// A JSON mapping of any Metadata for this Policy.
func (o ResourcePolicyAssignmentOutput) Metadata() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcePolicyAssignment) pulumi.StringOutput { return v.Metadata }).(pulumi.StringOutput)
}

// The name which should be used for this Policy Assignment. Changing this forces a new Resource Policy Assignment to be created. Cannot exceed 64 characters in length.
func (o ResourcePolicyAssignmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcePolicyAssignment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// One or more `nonComplianceMessage` blocks as defined below.
func (o ResourcePolicyAssignmentOutput) NonComplianceMessages() ResourcePolicyAssignmentNonComplianceMessageArrayOutput {
	return o.ApplyT(func(v *ResourcePolicyAssignment) ResourcePolicyAssignmentNonComplianceMessageArrayOutput {
		return v.NonComplianceMessages
	}).(ResourcePolicyAssignmentNonComplianceMessageArrayOutput)
}

// Specifies a list of Resource Scopes (for example a Subscription, or a Resource Group) within this Management Group which are excluded from this Policy.
func (o ResourcePolicyAssignmentOutput) NotScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourcePolicyAssignment) pulumi.StringArrayOutput { return v.NotScopes }).(pulumi.StringArrayOutput)
}

// One or more `overrides` blocks as defined below. More detail about `overrides` and `resourceSelectors` see [policy assignment structure](https://learn.microsoft.com/en-us/azure/governance/policy/concepts/assignment-structure#resource-selectors-preview)
func (o ResourcePolicyAssignmentOutput) Overrides() ResourcePolicyAssignmentOverrideArrayOutput {
	return o.ApplyT(func(v *ResourcePolicyAssignment) ResourcePolicyAssignmentOverrideArrayOutput { return v.Overrides }).(ResourcePolicyAssignmentOverrideArrayOutput)
}

// A JSON mapping of any Parameters for this Policy.
func (o ResourcePolicyAssignmentOutput) Parameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyAssignment) pulumi.StringPtrOutput { return v.Parameters }).(pulumi.StringPtrOutput)
}

// The ID of the Policy Definition or Policy Definition Set. Changing this forces a new Policy Assignment to be created.
func (o ResourcePolicyAssignmentOutput) PolicyDefinitionId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcePolicyAssignment) pulumi.StringOutput { return v.PolicyDefinitionId }).(pulumi.StringOutput)
}

// The ID of the Resource (or Resource Scope) where this should be applied. Changing this forces a new Resource Policy Assignment to be created.
//
// > To create a Policy Assignment at a Management Group use the `management.GroupPolicyAssignment` resource, for a Resource Group use the `core.ResourceGroupPolicyAssignment` and for a Subscription use the `core.SubscriptionPolicyAssignment` resource.
func (o ResourcePolicyAssignmentOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcePolicyAssignment) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// One or more `resourceSelectors` blocks as defined below to filter polices by resource properties.
func (o ResourcePolicyAssignmentOutput) ResourceSelectors() ResourcePolicyAssignmentResourceSelectorArrayOutput {
	return o.ApplyT(func(v *ResourcePolicyAssignment) ResourcePolicyAssignmentResourceSelectorArrayOutput {
		return v.ResourceSelectors
	}).(ResourcePolicyAssignmentResourceSelectorArrayOutput)
}

type ResourcePolicyAssignmentArrayOutput struct{ *pulumi.OutputState }

func (ResourcePolicyAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourcePolicyAssignment)(nil)).Elem()
}

func (o ResourcePolicyAssignmentArrayOutput) ToResourcePolicyAssignmentArrayOutput() ResourcePolicyAssignmentArrayOutput {
	return o
}

func (o ResourcePolicyAssignmentArrayOutput) ToResourcePolicyAssignmentArrayOutputWithContext(ctx context.Context) ResourcePolicyAssignmentArrayOutput {
	return o
}

func (o ResourcePolicyAssignmentArrayOutput) Index(i pulumi.IntInput) ResourcePolicyAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourcePolicyAssignment {
		return vs[0].([]*ResourcePolicyAssignment)[vs[1].(int)]
	}).(ResourcePolicyAssignmentOutput)
}

type ResourcePolicyAssignmentMapOutput struct{ *pulumi.OutputState }

func (ResourcePolicyAssignmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourcePolicyAssignment)(nil)).Elem()
}

func (o ResourcePolicyAssignmentMapOutput) ToResourcePolicyAssignmentMapOutput() ResourcePolicyAssignmentMapOutput {
	return o
}

func (o ResourcePolicyAssignmentMapOutput) ToResourcePolicyAssignmentMapOutputWithContext(ctx context.Context) ResourcePolicyAssignmentMapOutput {
	return o
}

func (o ResourcePolicyAssignmentMapOutput) MapIndex(k pulumi.StringInput) ResourcePolicyAssignmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourcePolicyAssignment {
		return vs[0].(map[string]*ResourcePolicyAssignment)[vs[1].(string)]
	}).(ResourcePolicyAssignmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourcePolicyAssignmentInput)(nil)).Elem(), &ResourcePolicyAssignment{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourcePolicyAssignmentArrayInput)(nil)).Elem(), ResourcePolicyAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourcePolicyAssignmentMapInput)(nil)).Elem(), ResourcePolicyAssignmentMap{})
	pulumi.RegisterOutputType(ResourcePolicyAssignmentOutput{})
	pulumi.RegisterOutputType(ResourcePolicyAssignmentArrayOutput{})
	pulumi.RegisterOutputType(ResourcePolicyAssignmentMapOutput{})
}
