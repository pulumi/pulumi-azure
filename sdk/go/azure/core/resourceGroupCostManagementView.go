// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package core

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Azure Cost Management View for a Resource Group.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = core.NewResourceGroupCostManagementView(ctx, "exampleResourceGroupCostManagementView", &core.ResourceGroupCostManagementViewArgs{
//				DisplayName:     pulumi.String("Cost View per Month"),
//				ChartType:       pulumi.String("StackedColumn"),
//				Accumulated:     pulumi.Bool(false),
//				ResourceGroupId: exampleResourceGroup.ID(),
//				ReportType:      pulumi.String("Usage"),
//				Timeframe:       pulumi.String("MonthToDate"),
//				Dataset: &core.ResourceGroupCostManagementViewDatasetArgs{
//					Granularity: pulumi.String("Monthly"),
//					Aggregations: core.ResourceGroupCostManagementViewDatasetAggregationArray{
//						&core.ResourceGroupCostManagementViewDatasetAggregationArgs{
//							Name:       pulumi.String("totalCost"),
//							ColumnName: pulumi.String("Cost"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Cost Management View for a Resource Groups can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:core/resourceGroupCostManagementView:ResourceGroupCostManagementView example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.CostManagement/views/costmanagementview
//
// ```
type ResourceGroupCostManagementView struct {
	pulumi.CustomResourceState

	// Whether the costs data in the Cost Management View are accumulated over time. Changing this forces a new Cost Management View for a Resource Group to be created.
	Accumulated pulumi.BoolOutput `pulumi:"accumulated"`
	// Chart type of the main view in Cost Analysis. Possible values are `Area`, `GroupedColumn`, `Line`, `StackedColumn` and `Table`.
	ChartType pulumi.StringOutput `pulumi:"chartType"`
	// A `dataset` block as defined below.
	Dataset ResourceGroupCostManagementViewDatasetOutput `pulumi:"dataset"`
	// User visible input name of the Cost Management View.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// One or more `kpi` blocks as defined below, to show in Cost Analysis UI.
	Kpis ResourceGroupCostManagementViewKpiArrayOutput `pulumi:"kpis"`
	// The name which should be used for this Cost Management View for a Resource Group. Changing this forces a new Cost Management View for a Resource Group to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// One or more `pivot` blocks as defined below, containing the configuration of 3 sub-views in the Cost Analysis UI. Non table views should have three pivots.
	Pivots ResourceGroupCostManagementViewPivotArrayOutput `pulumi:"pivots"`
	// The type of the report. The only possible value is `Usage`.
	ReportType pulumi.StringOutput `pulumi:"reportType"`
	// The ID of the Resource Group this View is scoped to. Changing this forces a new Cost Management View for a Resource Group to be created.
	ResourceGroupId pulumi.StringOutput `pulumi:"resourceGroupId"`
	// The time frame for pulling data for the report. Possible values are `Custom`, `MonthToDate`, `WeekToDate` and `YearToDate`.
	Timeframe pulumi.StringOutput `pulumi:"timeframe"`
}

// NewResourceGroupCostManagementView registers a new resource with the given unique name, arguments, and options.
func NewResourceGroupCostManagementView(ctx *pulumi.Context,
	name string, args *ResourceGroupCostManagementViewArgs, opts ...pulumi.ResourceOption) (*ResourceGroupCostManagementView, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Accumulated == nil {
		return nil, errors.New("invalid value for required argument 'Accumulated'")
	}
	if args.ChartType == nil {
		return nil, errors.New("invalid value for required argument 'ChartType'")
	}
	if args.Dataset == nil {
		return nil, errors.New("invalid value for required argument 'Dataset'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.ReportType == nil {
		return nil, errors.New("invalid value for required argument 'ReportType'")
	}
	if args.ResourceGroupId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupId'")
	}
	if args.Timeframe == nil {
		return nil, errors.New("invalid value for required argument 'Timeframe'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourceGroupCostManagementView
	err := ctx.RegisterResource("azure:core/resourceGroupCostManagementView:ResourceGroupCostManagementView", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceGroupCostManagementView gets an existing ResourceGroupCostManagementView resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceGroupCostManagementView(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceGroupCostManagementViewState, opts ...pulumi.ResourceOption) (*ResourceGroupCostManagementView, error) {
	var resource ResourceGroupCostManagementView
	err := ctx.ReadResource("azure:core/resourceGroupCostManagementView:ResourceGroupCostManagementView", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceGroupCostManagementView resources.
type resourceGroupCostManagementViewState struct {
	// Whether the costs data in the Cost Management View are accumulated over time. Changing this forces a new Cost Management View for a Resource Group to be created.
	Accumulated *bool `pulumi:"accumulated"`
	// Chart type of the main view in Cost Analysis. Possible values are `Area`, `GroupedColumn`, `Line`, `StackedColumn` and `Table`.
	ChartType *string `pulumi:"chartType"`
	// A `dataset` block as defined below.
	Dataset *ResourceGroupCostManagementViewDataset `pulumi:"dataset"`
	// User visible input name of the Cost Management View.
	DisplayName *string `pulumi:"displayName"`
	// One or more `kpi` blocks as defined below, to show in Cost Analysis UI.
	Kpis []ResourceGroupCostManagementViewKpi `pulumi:"kpis"`
	// The name which should be used for this Cost Management View for a Resource Group. Changing this forces a new Cost Management View for a Resource Group to be created.
	Name *string `pulumi:"name"`
	// One or more `pivot` blocks as defined below, containing the configuration of 3 sub-views in the Cost Analysis UI. Non table views should have three pivots.
	Pivots []ResourceGroupCostManagementViewPivot `pulumi:"pivots"`
	// The type of the report. The only possible value is `Usage`.
	ReportType *string `pulumi:"reportType"`
	// The ID of the Resource Group this View is scoped to. Changing this forces a new Cost Management View for a Resource Group to be created.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
	// The time frame for pulling data for the report. Possible values are `Custom`, `MonthToDate`, `WeekToDate` and `YearToDate`.
	Timeframe *string `pulumi:"timeframe"`
}

type ResourceGroupCostManagementViewState struct {
	// Whether the costs data in the Cost Management View are accumulated over time. Changing this forces a new Cost Management View for a Resource Group to be created.
	Accumulated pulumi.BoolPtrInput
	// Chart type of the main view in Cost Analysis. Possible values are `Area`, `GroupedColumn`, `Line`, `StackedColumn` and `Table`.
	ChartType pulumi.StringPtrInput
	// A `dataset` block as defined below.
	Dataset ResourceGroupCostManagementViewDatasetPtrInput
	// User visible input name of the Cost Management View.
	DisplayName pulumi.StringPtrInput
	// One or more `kpi` blocks as defined below, to show in Cost Analysis UI.
	Kpis ResourceGroupCostManagementViewKpiArrayInput
	// The name which should be used for this Cost Management View for a Resource Group. Changing this forces a new Cost Management View for a Resource Group to be created.
	Name pulumi.StringPtrInput
	// One or more `pivot` blocks as defined below, containing the configuration of 3 sub-views in the Cost Analysis UI. Non table views should have three pivots.
	Pivots ResourceGroupCostManagementViewPivotArrayInput
	// The type of the report. The only possible value is `Usage`.
	ReportType pulumi.StringPtrInput
	// The ID of the Resource Group this View is scoped to. Changing this forces a new Cost Management View for a Resource Group to be created.
	ResourceGroupId pulumi.StringPtrInput
	// The time frame for pulling data for the report. Possible values are `Custom`, `MonthToDate`, `WeekToDate` and `YearToDate`.
	Timeframe pulumi.StringPtrInput
}

func (ResourceGroupCostManagementViewState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceGroupCostManagementViewState)(nil)).Elem()
}

type resourceGroupCostManagementViewArgs struct {
	// Whether the costs data in the Cost Management View are accumulated over time. Changing this forces a new Cost Management View for a Resource Group to be created.
	Accumulated bool `pulumi:"accumulated"`
	// Chart type of the main view in Cost Analysis. Possible values are `Area`, `GroupedColumn`, `Line`, `StackedColumn` and `Table`.
	ChartType string `pulumi:"chartType"`
	// A `dataset` block as defined below.
	Dataset ResourceGroupCostManagementViewDataset `pulumi:"dataset"`
	// User visible input name of the Cost Management View.
	DisplayName string `pulumi:"displayName"`
	// One or more `kpi` blocks as defined below, to show in Cost Analysis UI.
	Kpis []ResourceGroupCostManagementViewKpi `pulumi:"kpis"`
	// The name which should be used for this Cost Management View for a Resource Group. Changing this forces a new Cost Management View for a Resource Group to be created.
	Name *string `pulumi:"name"`
	// One or more `pivot` blocks as defined below, containing the configuration of 3 sub-views in the Cost Analysis UI. Non table views should have three pivots.
	Pivots []ResourceGroupCostManagementViewPivot `pulumi:"pivots"`
	// The type of the report. The only possible value is `Usage`.
	ReportType string `pulumi:"reportType"`
	// The ID of the Resource Group this View is scoped to. Changing this forces a new Cost Management View for a Resource Group to be created.
	ResourceGroupId string `pulumi:"resourceGroupId"`
	// The time frame for pulling data for the report. Possible values are `Custom`, `MonthToDate`, `WeekToDate` and `YearToDate`.
	Timeframe string `pulumi:"timeframe"`
}

// The set of arguments for constructing a ResourceGroupCostManagementView resource.
type ResourceGroupCostManagementViewArgs struct {
	// Whether the costs data in the Cost Management View are accumulated over time. Changing this forces a new Cost Management View for a Resource Group to be created.
	Accumulated pulumi.BoolInput
	// Chart type of the main view in Cost Analysis. Possible values are `Area`, `GroupedColumn`, `Line`, `StackedColumn` and `Table`.
	ChartType pulumi.StringInput
	// A `dataset` block as defined below.
	Dataset ResourceGroupCostManagementViewDatasetInput
	// User visible input name of the Cost Management View.
	DisplayName pulumi.StringInput
	// One or more `kpi` blocks as defined below, to show in Cost Analysis UI.
	Kpis ResourceGroupCostManagementViewKpiArrayInput
	// The name which should be used for this Cost Management View for a Resource Group. Changing this forces a new Cost Management View for a Resource Group to be created.
	Name pulumi.StringPtrInput
	// One or more `pivot` blocks as defined below, containing the configuration of 3 sub-views in the Cost Analysis UI. Non table views should have three pivots.
	Pivots ResourceGroupCostManagementViewPivotArrayInput
	// The type of the report. The only possible value is `Usage`.
	ReportType pulumi.StringInput
	// The ID of the Resource Group this View is scoped to. Changing this forces a new Cost Management View for a Resource Group to be created.
	ResourceGroupId pulumi.StringInput
	// The time frame for pulling data for the report. Possible values are `Custom`, `MonthToDate`, `WeekToDate` and `YearToDate`.
	Timeframe pulumi.StringInput
}

func (ResourceGroupCostManagementViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceGroupCostManagementViewArgs)(nil)).Elem()
}

type ResourceGroupCostManagementViewInput interface {
	pulumi.Input

	ToResourceGroupCostManagementViewOutput() ResourceGroupCostManagementViewOutput
	ToResourceGroupCostManagementViewOutputWithContext(ctx context.Context) ResourceGroupCostManagementViewOutput
}

func (*ResourceGroupCostManagementView) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceGroupCostManagementView)(nil)).Elem()
}

func (i *ResourceGroupCostManagementView) ToResourceGroupCostManagementViewOutput() ResourceGroupCostManagementViewOutput {
	return i.ToResourceGroupCostManagementViewOutputWithContext(context.Background())
}

func (i *ResourceGroupCostManagementView) ToResourceGroupCostManagementViewOutputWithContext(ctx context.Context) ResourceGroupCostManagementViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGroupCostManagementViewOutput)
}

// ResourceGroupCostManagementViewArrayInput is an input type that accepts ResourceGroupCostManagementViewArray and ResourceGroupCostManagementViewArrayOutput values.
// You can construct a concrete instance of `ResourceGroupCostManagementViewArrayInput` via:
//
//	ResourceGroupCostManagementViewArray{ ResourceGroupCostManagementViewArgs{...} }
type ResourceGroupCostManagementViewArrayInput interface {
	pulumi.Input

	ToResourceGroupCostManagementViewArrayOutput() ResourceGroupCostManagementViewArrayOutput
	ToResourceGroupCostManagementViewArrayOutputWithContext(context.Context) ResourceGroupCostManagementViewArrayOutput
}

type ResourceGroupCostManagementViewArray []ResourceGroupCostManagementViewInput

func (ResourceGroupCostManagementViewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceGroupCostManagementView)(nil)).Elem()
}

func (i ResourceGroupCostManagementViewArray) ToResourceGroupCostManagementViewArrayOutput() ResourceGroupCostManagementViewArrayOutput {
	return i.ToResourceGroupCostManagementViewArrayOutputWithContext(context.Background())
}

func (i ResourceGroupCostManagementViewArray) ToResourceGroupCostManagementViewArrayOutputWithContext(ctx context.Context) ResourceGroupCostManagementViewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGroupCostManagementViewArrayOutput)
}

// ResourceGroupCostManagementViewMapInput is an input type that accepts ResourceGroupCostManagementViewMap and ResourceGroupCostManagementViewMapOutput values.
// You can construct a concrete instance of `ResourceGroupCostManagementViewMapInput` via:
//
//	ResourceGroupCostManagementViewMap{ "key": ResourceGroupCostManagementViewArgs{...} }
type ResourceGroupCostManagementViewMapInput interface {
	pulumi.Input

	ToResourceGroupCostManagementViewMapOutput() ResourceGroupCostManagementViewMapOutput
	ToResourceGroupCostManagementViewMapOutputWithContext(context.Context) ResourceGroupCostManagementViewMapOutput
}

type ResourceGroupCostManagementViewMap map[string]ResourceGroupCostManagementViewInput

func (ResourceGroupCostManagementViewMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceGroupCostManagementView)(nil)).Elem()
}

func (i ResourceGroupCostManagementViewMap) ToResourceGroupCostManagementViewMapOutput() ResourceGroupCostManagementViewMapOutput {
	return i.ToResourceGroupCostManagementViewMapOutputWithContext(context.Background())
}

func (i ResourceGroupCostManagementViewMap) ToResourceGroupCostManagementViewMapOutputWithContext(ctx context.Context) ResourceGroupCostManagementViewMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGroupCostManagementViewMapOutput)
}

type ResourceGroupCostManagementViewOutput struct{ *pulumi.OutputState }

func (ResourceGroupCostManagementViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceGroupCostManagementView)(nil)).Elem()
}

func (o ResourceGroupCostManagementViewOutput) ToResourceGroupCostManagementViewOutput() ResourceGroupCostManagementViewOutput {
	return o
}

func (o ResourceGroupCostManagementViewOutput) ToResourceGroupCostManagementViewOutputWithContext(ctx context.Context) ResourceGroupCostManagementViewOutput {
	return o
}

// Whether the costs data in the Cost Management View are accumulated over time. Changing this forces a new Cost Management View for a Resource Group to be created.
func (o ResourceGroupCostManagementViewOutput) Accumulated() pulumi.BoolOutput {
	return o.ApplyT(func(v *ResourceGroupCostManagementView) pulumi.BoolOutput { return v.Accumulated }).(pulumi.BoolOutput)
}

// Chart type of the main view in Cost Analysis. Possible values are `Area`, `GroupedColumn`, `Line`, `StackedColumn` and `Table`.
func (o ResourceGroupCostManagementViewOutput) ChartType() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceGroupCostManagementView) pulumi.StringOutput { return v.ChartType }).(pulumi.StringOutput)
}

// A `dataset` block as defined below.
func (o ResourceGroupCostManagementViewOutput) Dataset() ResourceGroupCostManagementViewDatasetOutput {
	return o.ApplyT(func(v *ResourceGroupCostManagementView) ResourceGroupCostManagementViewDatasetOutput {
		return v.Dataset
	}).(ResourceGroupCostManagementViewDatasetOutput)
}

// User visible input name of the Cost Management View.
func (o ResourceGroupCostManagementViewOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceGroupCostManagementView) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// One or more `kpi` blocks as defined below, to show in Cost Analysis UI.
func (o ResourceGroupCostManagementViewOutput) Kpis() ResourceGroupCostManagementViewKpiArrayOutput {
	return o.ApplyT(func(v *ResourceGroupCostManagementView) ResourceGroupCostManagementViewKpiArrayOutput { return v.Kpis }).(ResourceGroupCostManagementViewKpiArrayOutput)
}

// The name which should be used for this Cost Management View for a Resource Group. Changing this forces a new Cost Management View for a Resource Group to be created.
func (o ResourceGroupCostManagementViewOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceGroupCostManagementView) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// One or more `pivot` blocks as defined below, containing the configuration of 3 sub-views in the Cost Analysis UI. Non table views should have three pivots.
func (o ResourceGroupCostManagementViewOutput) Pivots() ResourceGroupCostManagementViewPivotArrayOutput {
	return o.ApplyT(func(v *ResourceGroupCostManagementView) ResourceGroupCostManagementViewPivotArrayOutput {
		return v.Pivots
	}).(ResourceGroupCostManagementViewPivotArrayOutput)
}

// The type of the report. The only possible value is `Usage`.
func (o ResourceGroupCostManagementViewOutput) ReportType() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceGroupCostManagementView) pulumi.StringOutput { return v.ReportType }).(pulumi.StringOutput)
}

// The ID of the Resource Group this View is scoped to. Changing this forces a new Cost Management View for a Resource Group to be created.
func (o ResourceGroupCostManagementViewOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceGroupCostManagementView) pulumi.StringOutput { return v.ResourceGroupId }).(pulumi.StringOutput)
}

// The time frame for pulling data for the report. Possible values are `Custom`, `MonthToDate`, `WeekToDate` and `YearToDate`.
func (o ResourceGroupCostManagementViewOutput) Timeframe() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceGroupCostManagementView) pulumi.StringOutput { return v.Timeframe }).(pulumi.StringOutput)
}

type ResourceGroupCostManagementViewArrayOutput struct{ *pulumi.OutputState }

func (ResourceGroupCostManagementViewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceGroupCostManagementView)(nil)).Elem()
}

func (o ResourceGroupCostManagementViewArrayOutput) ToResourceGroupCostManagementViewArrayOutput() ResourceGroupCostManagementViewArrayOutput {
	return o
}

func (o ResourceGroupCostManagementViewArrayOutput) ToResourceGroupCostManagementViewArrayOutputWithContext(ctx context.Context) ResourceGroupCostManagementViewArrayOutput {
	return o
}

func (o ResourceGroupCostManagementViewArrayOutput) Index(i pulumi.IntInput) ResourceGroupCostManagementViewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourceGroupCostManagementView {
		return vs[0].([]*ResourceGroupCostManagementView)[vs[1].(int)]
	}).(ResourceGroupCostManagementViewOutput)
}

type ResourceGroupCostManagementViewMapOutput struct{ *pulumi.OutputState }

func (ResourceGroupCostManagementViewMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceGroupCostManagementView)(nil)).Elem()
}

func (o ResourceGroupCostManagementViewMapOutput) ToResourceGroupCostManagementViewMapOutput() ResourceGroupCostManagementViewMapOutput {
	return o
}

func (o ResourceGroupCostManagementViewMapOutput) ToResourceGroupCostManagementViewMapOutputWithContext(ctx context.Context) ResourceGroupCostManagementViewMapOutput {
	return o
}

func (o ResourceGroupCostManagementViewMapOutput) MapIndex(k pulumi.StringInput) ResourceGroupCostManagementViewOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourceGroupCostManagementView {
		return vs[0].(map[string]*ResourceGroupCostManagementView)[vs[1].(string)]
	}).(ResourceGroupCostManagementViewOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceGroupCostManagementViewInput)(nil)).Elem(), &ResourceGroupCostManagementView{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceGroupCostManagementViewArrayInput)(nil)).Elem(), ResourceGroupCostManagementViewArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceGroupCostManagementViewMapInput)(nil)).Elem(), ResourceGroupCostManagementViewMap{})
	pulumi.RegisterOutputType(ResourceGroupCostManagementViewOutput{})
	pulumi.RegisterOutputType(ResourceGroupCostManagementViewArrayOutput{})
	pulumi.RegisterOutputType(ResourceGroupCostManagementViewMapOutput{})
}
