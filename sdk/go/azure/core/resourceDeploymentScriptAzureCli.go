// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package core

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Resource Deployment Script of Azure Cli.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/authorization"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleUserAssignedIdentity, err := authorization.NewUserAssignedIdentity(ctx, "exampleUserAssignedIdentity", &authorization.UserAssignedIdentityArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = core.NewResourceDeploymentScriptAzureCli(ctx, "exampleResourceDeploymentScriptAzureCli", &core.ResourceDeploymentScriptAzureCliArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          pulumi.String("West Europe"),
//				Version:           pulumi.String("2.40.0"),
//				RetentionInterval: pulumi.String("P1D"),
//				CommandLine:       pulumi.String("'foo' 'bar'"),
//				CleanupPreference: pulumi.String("OnSuccess"),
//				ForceUpdateTag:    pulumi.String("1"),
//				Timeout:           pulumi.String("PT30M"),
//				ScriptContent:     pulumi.String("            echo \"{\\\"name\\\":{\\\"displayName\\\":\\\"$1 $2\\\"}}\" > $AZ_SCRIPTS_OUTPUT_PATH\n"),
//				Identity: &core.ResourceDeploymentScriptAzureCliIdentityArgs{
//					Type: pulumi.String("UserAssigned"),
//					IdentityIds: pulumi.StringArray{
//						exampleUserAssignedIdentity.ID(),
//					},
//				},
//				Tags: pulumi.StringMap{
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Resource Deployment Script can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:core/resourceDeploymentScriptAzureCli:ResourceDeploymentScriptAzureCli example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Resources/deploymentScripts/script1
//
// ```
type ResourceDeploymentScriptAzureCli struct {
	pulumi.CustomResourceState

	// Specifies the cleanup preference when the script execution gets in a terminal state. Possible values are `Always`, `OnExpiration`, `OnSuccess`. Defaults to `Always`. Changing this forces a new Resource Deployment Script to be created.
	CleanupPreference pulumi.StringPtrOutput `pulumi:"cleanupPreference"`
	// Command line arguments to pass to the script. Changing this forces a new Resource Deployment Script to be created.
	CommandLine pulumi.StringPtrOutput `pulumi:"commandLine"`
	// A `container` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	Container ResourceDeploymentScriptAzureCliContainerPtrOutput `pulumi:"container"`
	// An `environmentVariable` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	EnvironmentVariables ResourceDeploymentScriptAzureCliEnvironmentVariableArrayOutput `pulumi:"environmentVariables"`
	// Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. Changing this forces a new Resource Deployment Script to be created.
	ForceUpdateTag pulumi.StringPtrOutput `pulumi:"forceUpdateTag"`
	// An `identity` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	Identity ResourceDeploymentScriptAzureCliIdentityPtrOutput `pulumi:"identity"`
	// Specifies the Azure Region where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name which should be used for this Resource Deployment Script. The name length must be from 1 to 260 characters. The name can only contain alphanumeric, underscore, parentheses, hyphen and period, and it cannot end with a period. Changing this forces a new Resource Deployment Script to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of script outputs.
	Outputs pulumi.StringOutput `pulumi:"outputs"`
	// Uri for the script. This is the entry point for the external script. Changing this forces a new Resource Deployment Script to be created.
	PrimaryScriptUri pulumi.StringPtrOutput `pulumi:"primaryScriptUri"`
	// Specifies the name of the Resource Group where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. The time duration should be between `1` hour and `26` hours (inclusive) and should be specified in ISO 8601 format. Changing this forces a new Resource Deployment Script to be created.
	RetentionInterval pulumi.StringOutput `pulumi:"retentionInterval"`
	// Script body. Changing this forces a new Resource Deployment Script to be created.
	ScriptContent pulumi.StringPtrOutput `pulumi:"scriptContent"`
	// A `storageAccount` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	StorageAccount ResourceDeploymentScriptAzureCliStorageAccountPtrOutput `pulumi:"storageAccount"`
	// Supporting files for the external script. Changing this forces a new Resource Deployment Script to be created.
	SupportingScriptUris pulumi.StringArrayOutput `pulumi:"supportingScriptUris"`
	// A mapping of tags which should be assigned to the Resource Deployment Script.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Maximum allowed script execution time specified in ISO 8601 format. Needs to be greater than 0 and smaller than 1 day. Defaults to `P1D`. Changing this forces a new Resource Deployment Script to be created.
	Timeout pulumi.StringPtrOutput `pulumi:"timeout"`
	// Specifies the version of the Azure CLI that should be used in the format `X.Y.Z` (e.g. `2.30.0`). A canonical list of versions [is available from the Microsoft Container Registry API](https://mcr.microsoft.com/v2/azure-cli/tags/list). Changing this forces a new Resource Deployment Script to be created.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewResourceDeploymentScriptAzureCli registers a new resource with the given unique name, arguments, and options.
func NewResourceDeploymentScriptAzureCli(ctx *pulumi.Context,
	name string, args *ResourceDeploymentScriptAzureCliArgs, opts ...pulumi.ResourceOption) (*ResourceDeploymentScriptAzureCli, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.RetentionInterval == nil {
		return nil, errors.New("invalid value for required argument 'RetentionInterval'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourceDeploymentScriptAzureCli
	err := ctx.RegisterResource("azure:core/resourceDeploymentScriptAzureCli:ResourceDeploymentScriptAzureCli", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceDeploymentScriptAzureCli gets an existing ResourceDeploymentScriptAzureCli resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceDeploymentScriptAzureCli(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceDeploymentScriptAzureCliState, opts ...pulumi.ResourceOption) (*ResourceDeploymentScriptAzureCli, error) {
	var resource ResourceDeploymentScriptAzureCli
	err := ctx.ReadResource("azure:core/resourceDeploymentScriptAzureCli:ResourceDeploymentScriptAzureCli", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceDeploymentScriptAzureCli resources.
type resourceDeploymentScriptAzureCliState struct {
	// Specifies the cleanup preference when the script execution gets in a terminal state. Possible values are `Always`, `OnExpiration`, `OnSuccess`. Defaults to `Always`. Changing this forces a new Resource Deployment Script to be created.
	CleanupPreference *string `pulumi:"cleanupPreference"`
	// Command line arguments to pass to the script. Changing this forces a new Resource Deployment Script to be created.
	CommandLine *string `pulumi:"commandLine"`
	// A `container` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	Container *ResourceDeploymentScriptAzureCliContainer `pulumi:"container"`
	// An `environmentVariable` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	EnvironmentVariables []ResourceDeploymentScriptAzureCliEnvironmentVariable `pulumi:"environmentVariables"`
	// Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. Changing this forces a new Resource Deployment Script to be created.
	ForceUpdateTag *string `pulumi:"forceUpdateTag"`
	// An `identity` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	Identity *ResourceDeploymentScriptAzureCliIdentity `pulumi:"identity"`
	// Specifies the Azure Region where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
	Location *string `pulumi:"location"`
	// Specifies the name which should be used for this Resource Deployment Script. The name length must be from 1 to 260 characters. The name can only contain alphanumeric, underscore, parentheses, hyphen and period, and it cannot end with a period. Changing this forces a new Resource Deployment Script to be created.
	Name *string `pulumi:"name"`
	// List of script outputs.
	Outputs *string `pulumi:"outputs"`
	// Uri for the script. This is the entry point for the external script. Changing this forces a new Resource Deployment Script to be created.
	PrimaryScriptUri *string `pulumi:"primaryScriptUri"`
	// Specifies the name of the Resource Group where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. The time duration should be between `1` hour and `26` hours (inclusive) and should be specified in ISO 8601 format. Changing this forces a new Resource Deployment Script to be created.
	RetentionInterval *string `pulumi:"retentionInterval"`
	// Script body. Changing this forces a new Resource Deployment Script to be created.
	ScriptContent *string `pulumi:"scriptContent"`
	// A `storageAccount` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	StorageAccount *ResourceDeploymentScriptAzureCliStorageAccount `pulumi:"storageAccount"`
	// Supporting files for the external script. Changing this forces a new Resource Deployment Script to be created.
	SupportingScriptUris []string `pulumi:"supportingScriptUris"`
	// A mapping of tags which should be assigned to the Resource Deployment Script.
	Tags map[string]string `pulumi:"tags"`
	// Maximum allowed script execution time specified in ISO 8601 format. Needs to be greater than 0 and smaller than 1 day. Defaults to `P1D`. Changing this forces a new Resource Deployment Script to be created.
	Timeout *string `pulumi:"timeout"`
	// Specifies the version of the Azure CLI that should be used in the format `X.Y.Z` (e.g. `2.30.0`). A canonical list of versions [is available from the Microsoft Container Registry API](https://mcr.microsoft.com/v2/azure-cli/tags/list). Changing this forces a new Resource Deployment Script to be created.
	Version *string `pulumi:"version"`
}

type ResourceDeploymentScriptAzureCliState struct {
	// Specifies the cleanup preference when the script execution gets in a terminal state. Possible values are `Always`, `OnExpiration`, `OnSuccess`. Defaults to `Always`. Changing this forces a new Resource Deployment Script to be created.
	CleanupPreference pulumi.StringPtrInput
	// Command line arguments to pass to the script. Changing this forces a new Resource Deployment Script to be created.
	CommandLine pulumi.StringPtrInput
	// A `container` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	Container ResourceDeploymentScriptAzureCliContainerPtrInput
	// An `environmentVariable` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	EnvironmentVariables ResourceDeploymentScriptAzureCliEnvironmentVariableArrayInput
	// Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. Changing this forces a new Resource Deployment Script to be created.
	ForceUpdateTag pulumi.StringPtrInput
	// An `identity` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	Identity ResourceDeploymentScriptAzureCliIdentityPtrInput
	// Specifies the Azure Region where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
	Location pulumi.StringPtrInput
	// Specifies the name which should be used for this Resource Deployment Script. The name length must be from 1 to 260 characters. The name can only contain alphanumeric, underscore, parentheses, hyphen and period, and it cannot end with a period. Changing this forces a new Resource Deployment Script to be created.
	Name pulumi.StringPtrInput
	// List of script outputs.
	Outputs pulumi.StringPtrInput
	// Uri for the script. This is the entry point for the external script. Changing this forces a new Resource Deployment Script to be created.
	PrimaryScriptUri pulumi.StringPtrInput
	// Specifies the name of the Resource Group where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
	ResourceGroupName pulumi.StringPtrInput
	// Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. The time duration should be between `1` hour and `26` hours (inclusive) and should be specified in ISO 8601 format. Changing this forces a new Resource Deployment Script to be created.
	RetentionInterval pulumi.StringPtrInput
	// Script body. Changing this forces a new Resource Deployment Script to be created.
	ScriptContent pulumi.StringPtrInput
	// A `storageAccount` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	StorageAccount ResourceDeploymentScriptAzureCliStorageAccountPtrInput
	// Supporting files for the external script. Changing this forces a new Resource Deployment Script to be created.
	SupportingScriptUris pulumi.StringArrayInput
	// A mapping of tags which should be assigned to the Resource Deployment Script.
	Tags pulumi.StringMapInput
	// Maximum allowed script execution time specified in ISO 8601 format. Needs to be greater than 0 and smaller than 1 day. Defaults to `P1D`. Changing this forces a new Resource Deployment Script to be created.
	Timeout pulumi.StringPtrInput
	// Specifies the version of the Azure CLI that should be used in the format `X.Y.Z` (e.g. `2.30.0`). A canonical list of versions [is available from the Microsoft Container Registry API](https://mcr.microsoft.com/v2/azure-cli/tags/list). Changing this forces a new Resource Deployment Script to be created.
	Version pulumi.StringPtrInput
}

func (ResourceDeploymentScriptAzureCliState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceDeploymentScriptAzureCliState)(nil)).Elem()
}

type resourceDeploymentScriptAzureCliArgs struct {
	// Specifies the cleanup preference when the script execution gets in a terminal state. Possible values are `Always`, `OnExpiration`, `OnSuccess`. Defaults to `Always`. Changing this forces a new Resource Deployment Script to be created.
	CleanupPreference *string `pulumi:"cleanupPreference"`
	// Command line arguments to pass to the script. Changing this forces a new Resource Deployment Script to be created.
	CommandLine *string `pulumi:"commandLine"`
	// A `container` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	Container *ResourceDeploymentScriptAzureCliContainer `pulumi:"container"`
	// An `environmentVariable` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	EnvironmentVariables []ResourceDeploymentScriptAzureCliEnvironmentVariable `pulumi:"environmentVariables"`
	// Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. Changing this forces a new Resource Deployment Script to be created.
	ForceUpdateTag *string `pulumi:"forceUpdateTag"`
	// An `identity` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	Identity *ResourceDeploymentScriptAzureCliIdentity `pulumi:"identity"`
	// Specifies the Azure Region where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
	Location *string `pulumi:"location"`
	// Specifies the name which should be used for this Resource Deployment Script. The name length must be from 1 to 260 characters. The name can only contain alphanumeric, underscore, parentheses, hyphen and period, and it cannot end with a period. Changing this forces a new Resource Deployment Script to be created.
	Name *string `pulumi:"name"`
	// Uri for the script. This is the entry point for the external script. Changing this forces a new Resource Deployment Script to be created.
	PrimaryScriptUri *string `pulumi:"primaryScriptUri"`
	// Specifies the name of the Resource Group where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. The time duration should be between `1` hour and `26` hours (inclusive) and should be specified in ISO 8601 format. Changing this forces a new Resource Deployment Script to be created.
	RetentionInterval string `pulumi:"retentionInterval"`
	// Script body. Changing this forces a new Resource Deployment Script to be created.
	ScriptContent *string `pulumi:"scriptContent"`
	// A `storageAccount` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	StorageAccount *ResourceDeploymentScriptAzureCliStorageAccount `pulumi:"storageAccount"`
	// Supporting files for the external script. Changing this forces a new Resource Deployment Script to be created.
	SupportingScriptUris []string `pulumi:"supportingScriptUris"`
	// A mapping of tags which should be assigned to the Resource Deployment Script.
	Tags map[string]string `pulumi:"tags"`
	// Maximum allowed script execution time specified in ISO 8601 format. Needs to be greater than 0 and smaller than 1 day. Defaults to `P1D`. Changing this forces a new Resource Deployment Script to be created.
	Timeout *string `pulumi:"timeout"`
	// Specifies the version of the Azure CLI that should be used in the format `X.Y.Z` (e.g. `2.30.0`). A canonical list of versions [is available from the Microsoft Container Registry API](https://mcr.microsoft.com/v2/azure-cli/tags/list). Changing this forces a new Resource Deployment Script to be created.
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a ResourceDeploymentScriptAzureCli resource.
type ResourceDeploymentScriptAzureCliArgs struct {
	// Specifies the cleanup preference when the script execution gets in a terminal state. Possible values are `Always`, `OnExpiration`, `OnSuccess`. Defaults to `Always`. Changing this forces a new Resource Deployment Script to be created.
	CleanupPreference pulumi.StringPtrInput
	// Command line arguments to pass to the script. Changing this forces a new Resource Deployment Script to be created.
	CommandLine pulumi.StringPtrInput
	// A `container` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	Container ResourceDeploymentScriptAzureCliContainerPtrInput
	// An `environmentVariable` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	EnvironmentVariables ResourceDeploymentScriptAzureCliEnvironmentVariableArrayInput
	// Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. Changing this forces a new Resource Deployment Script to be created.
	ForceUpdateTag pulumi.StringPtrInput
	// An `identity` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	Identity ResourceDeploymentScriptAzureCliIdentityPtrInput
	// Specifies the Azure Region where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
	Location pulumi.StringPtrInput
	// Specifies the name which should be used for this Resource Deployment Script. The name length must be from 1 to 260 characters. The name can only contain alphanumeric, underscore, parentheses, hyphen and period, and it cannot end with a period. Changing this forces a new Resource Deployment Script to be created.
	Name pulumi.StringPtrInput
	// Uri for the script. This is the entry point for the external script. Changing this forces a new Resource Deployment Script to be created.
	PrimaryScriptUri pulumi.StringPtrInput
	// Specifies the name of the Resource Group where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
	ResourceGroupName pulumi.StringInput
	// Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. The time duration should be between `1` hour and `26` hours (inclusive) and should be specified in ISO 8601 format. Changing this forces a new Resource Deployment Script to be created.
	RetentionInterval pulumi.StringInput
	// Script body. Changing this forces a new Resource Deployment Script to be created.
	ScriptContent pulumi.StringPtrInput
	// A `storageAccount` block as defined below. Changing this forces a new Resource Deployment Script to be created.
	StorageAccount ResourceDeploymentScriptAzureCliStorageAccountPtrInput
	// Supporting files for the external script. Changing this forces a new Resource Deployment Script to be created.
	SupportingScriptUris pulumi.StringArrayInput
	// A mapping of tags which should be assigned to the Resource Deployment Script.
	Tags pulumi.StringMapInput
	// Maximum allowed script execution time specified in ISO 8601 format. Needs to be greater than 0 and smaller than 1 day. Defaults to `P1D`. Changing this forces a new Resource Deployment Script to be created.
	Timeout pulumi.StringPtrInput
	// Specifies the version of the Azure CLI that should be used in the format `X.Y.Z` (e.g. `2.30.0`). A canonical list of versions [is available from the Microsoft Container Registry API](https://mcr.microsoft.com/v2/azure-cli/tags/list). Changing this forces a new Resource Deployment Script to be created.
	Version pulumi.StringInput
}

func (ResourceDeploymentScriptAzureCliArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceDeploymentScriptAzureCliArgs)(nil)).Elem()
}

type ResourceDeploymentScriptAzureCliInput interface {
	pulumi.Input

	ToResourceDeploymentScriptAzureCliOutput() ResourceDeploymentScriptAzureCliOutput
	ToResourceDeploymentScriptAzureCliOutputWithContext(ctx context.Context) ResourceDeploymentScriptAzureCliOutput
}

func (*ResourceDeploymentScriptAzureCli) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceDeploymentScriptAzureCli)(nil)).Elem()
}

func (i *ResourceDeploymentScriptAzureCli) ToResourceDeploymentScriptAzureCliOutput() ResourceDeploymentScriptAzureCliOutput {
	return i.ToResourceDeploymentScriptAzureCliOutputWithContext(context.Background())
}

func (i *ResourceDeploymentScriptAzureCli) ToResourceDeploymentScriptAzureCliOutputWithContext(ctx context.Context) ResourceDeploymentScriptAzureCliOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDeploymentScriptAzureCliOutput)
}

// ResourceDeploymentScriptAzureCliArrayInput is an input type that accepts ResourceDeploymentScriptAzureCliArray and ResourceDeploymentScriptAzureCliArrayOutput values.
// You can construct a concrete instance of `ResourceDeploymentScriptAzureCliArrayInput` via:
//
//	ResourceDeploymentScriptAzureCliArray{ ResourceDeploymentScriptAzureCliArgs{...} }
type ResourceDeploymentScriptAzureCliArrayInput interface {
	pulumi.Input

	ToResourceDeploymentScriptAzureCliArrayOutput() ResourceDeploymentScriptAzureCliArrayOutput
	ToResourceDeploymentScriptAzureCliArrayOutputWithContext(context.Context) ResourceDeploymentScriptAzureCliArrayOutput
}

type ResourceDeploymentScriptAzureCliArray []ResourceDeploymentScriptAzureCliInput

func (ResourceDeploymentScriptAzureCliArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceDeploymentScriptAzureCli)(nil)).Elem()
}

func (i ResourceDeploymentScriptAzureCliArray) ToResourceDeploymentScriptAzureCliArrayOutput() ResourceDeploymentScriptAzureCliArrayOutput {
	return i.ToResourceDeploymentScriptAzureCliArrayOutputWithContext(context.Background())
}

func (i ResourceDeploymentScriptAzureCliArray) ToResourceDeploymentScriptAzureCliArrayOutputWithContext(ctx context.Context) ResourceDeploymentScriptAzureCliArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDeploymentScriptAzureCliArrayOutput)
}

// ResourceDeploymentScriptAzureCliMapInput is an input type that accepts ResourceDeploymentScriptAzureCliMap and ResourceDeploymentScriptAzureCliMapOutput values.
// You can construct a concrete instance of `ResourceDeploymentScriptAzureCliMapInput` via:
//
//	ResourceDeploymentScriptAzureCliMap{ "key": ResourceDeploymentScriptAzureCliArgs{...} }
type ResourceDeploymentScriptAzureCliMapInput interface {
	pulumi.Input

	ToResourceDeploymentScriptAzureCliMapOutput() ResourceDeploymentScriptAzureCliMapOutput
	ToResourceDeploymentScriptAzureCliMapOutputWithContext(context.Context) ResourceDeploymentScriptAzureCliMapOutput
}

type ResourceDeploymentScriptAzureCliMap map[string]ResourceDeploymentScriptAzureCliInput

func (ResourceDeploymentScriptAzureCliMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceDeploymentScriptAzureCli)(nil)).Elem()
}

func (i ResourceDeploymentScriptAzureCliMap) ToResourceDeploymentScriptAzureCliMapOutput() ResourceDeploymentScriptAzureCliMapOutput {
	return i.ToResourceDeploymentScriptAzureCliMapOutputWithContext(context.Background())
}

func (i ResourceDeploymentScriptAzureCliMap) ToResourceDeploymentScriptAzureCliMapOutputWithContext(ctx context.Context) ResourceDeploymentScriptAzureCliMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDeploymentScriptAzureCliMapOutput)
}

type ResourceDeploymentScriptAzureCliOutput struct{ *pulumi.OutputState }

func (ResourceDeploymentScriptAzureCliOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceDeploymentScriptAzureCli)(nil)).Elem()
}

func (o ResourceDeploymentScriptAzureCliOutput) ToResourceDeploymentScriptAzureCliOutput() ResourceDeploymentScriptAzureCliOutput {
	return o
}

func (o ResourceDeploymentScriptAzureCliOutput) ToResourceDeploymentScriptAzureCliOutputWithContext(ctx context.Context) ResourceDeploymentScriptAzureCliOutput {
	return o
}

// Specifies the cleanup preference when the script execution gets in a terminal state. Possible values are `Always`, `OnExpiration`, `OnSuccess`. Defaults to `Always`. Changing this forces a new Resource Deployment Script to be created.
func (o ResourceDeploymentScriptAzureCliOutput) CleanupPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptAzureCli) pulumi.StringPtrOutput { return v.CleanupPreference }).(pulumi.StringPtrOutput)
}

// Command line arguments to pass to the script. Changing this forces a new Resource Deployment Script to be created.
func (o ResourceDeploymentScriptAzureCliOutput) CommandLine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptAzureCli) pulumi.StringPtrOutput { return v.CommandLine }).(pulumi.StringPtrOutput)
}

// A `container` block as defined below. Changing this forces a new Resource Deployment Script to be created.
func (o ResourceDeploymentScriptAzureCliOutput) Container() ResourceDeploymentScriptAzureCliContainerPtrOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptAzureCli) ResourceDeploymentScriptAzureCliContainerPtrOutput {
		return v.Container
	}).(ResourceDeploymentScriptAzureCliContainerPtrOutput)
}

// An `environmentVariable` block as defined below. Changing this forces a new Resource Deployment Script to be created.
func (o ResourceDeploymentScriptAzureCliOutput) EnvironmentVariables() ResourceDeploymentScriptAzureCliEnvironmentVariableArrayOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptAzureCli) ResourceDeploymentScriptAzureCliEnvironmentVariableArrayOutput {
		return v.EnvironmentVariables
	}).(ResourceDeploymentScriptAzureCliEnvironmentVariableArrayOutput)
}

// Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID. Changing this forces a new Resource Deployment Script to be created.
func (o ResourceDeploymentScriptAzureCliOutput) ForceUpdateTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptAzureCli) pulumi.StringPtrOutput { return v.ForceUpdateTag }).(pulumi.StringPtrOutput)
}

// An `identity` block as defined below. Changing this forces a new Resource Deployment Script to be created.
func (o ResourceDeploymentScriptAzureCliOutput) Identity() ResourceDeploymentScriptAzureCliIdentityPtrOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptAzureCli) ResourceDeploymentScriptAzureCliIdentityPtrOutput {
		return v.Identity
	}).(ResourceDeploymentScriptAzureCliIdentityPtrOutput)
}

// Specifies the Azure Region where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
func (o ResourceDeploymentScriptAzureCliOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptAzureCli) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name which should be used for this Resource Deployment Script. The name length must be from 1 to 260 characters. The name can only contain alphanumeric, underscore, parentheses, hyphen and period, and it cannot end with a period. Changing this forces a new Resource Deployment Script to be created.
func (o ResourceDeploymentScriptAzureCliOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptAzureCli) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of script outputs.
func (o ResourceDeploymentScriptAzureCliOutput) Outputs() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptAzureCli) pulumi.StringOutput { return v.Outputs }).(pulumi.StringOutput)
}

// Uri for the script. This is the entry point for the external script. Changing this forces a new Resource Deployment Script to be created.
func (o ResourceDeploymentScriptAzureCliOutput) PrimaryScriptUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptAzureCli) pulumi.StringPtrOutput { return v.PrimaryScriptUri }).(pulumi.StringPtrOutput)
}

// Specifies the name of the Resource Group where the Resource Deployment Script should exist. Changing this forces a new Resource Deployment Script to be created.
func (o ResourceDeploymentScriptAzureCliOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptAzureCli) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. The time duration should be between `1` hour and `26` hours (inclusive) and should be specified in ISO 8601 format. Changing this forces a new Resource Deployment Script to be created.
func (o ResourceDeploymentScriptAzureCliOutput) RetentionInterval() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptAzureCli) pulumi.StringOutput { return v.RetentionInterval }).(pulumi.StringOutput)
}

// Script body. Changing this forces a new Resource Deployment Script to be created.
func (o ResourceDeploymentScriptAzureCliOutput) ScriptContent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptAzureCli) pulumi.StringPtrOutput { return v.ScriptContent }).(pulumi.StringPtrOutput)
}

// A `storageAccount` block as defined below. Changing this forces a new Resource Deployment Script to be created.
func (o ResourceDeploymentScriptAzureCliOutput) StorageAccount() ResourceDeploymentScriptAzureCliStorageAccountPtrOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptAzureCli) ResourceDeploymentScriptAzureCliStorageAccountPtrOutput {
		return v.StorageAccount
	}).(ResourceDeploymentScriptAzureCliStorageAccountPtrOutput)
}

// Supporting files for the external script. Changing this forces a new Resource Deployment Script to be created.
func (o ResourceDeploymentScriptAzureCliOutput) SupportingScriptUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptAzureCli) pulumi.StringArrayOutput { return v.SupportingScriptUris }).(pulumi.StringArrayOutput)
}

// A mapping of tags which should be assigned to the Resource Deployment Script.
func (o ResourceDeploymentScriptAzureCliOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptAzureCli) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Maximum allowed script execution time specified in ISO 8601 format. Needs to be greater than 0 and smaller than 1 day. Defaults to `P1D`. Changing this forces a new Resource Deployment Script to be created.
func (o ResourceDeploymentScriptAzureCliOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptAzureCli) pulumi.StringPtrOutput { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Specifies the version of the Azure CLI that should be used in the format `X.Y.Z` (e.g. `2.30.0`). A canonical list of versions [is available from the Microsoft Container Registry API](https://mcr.microsoft.com/v2/azure-cli/tags/list). Changing this forces a new Resource Deployment Script to be created.
func (o ResourceDeploymentScriptAzureCliOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceDeploymentScriptAzureCli) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type ResourceDeploymentScriptAzureCliArrayOutput struct{ *pulumi.OutputState }

func (ResourceDeploymentScriptAzureCliArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceDeploymentScriptAzureCli)(nil)).Elem()
}

func (o ResourceDeploymentScriptAzureCliArrayOutput) ToResourceDeploymentScriptAzureCliArrayOutput() ResourceDeploymentScriptAzureCliArrayOutput {
	return o
}

func (o ResourceDeploymentScriptAzureCliArrayOutput) ToResourceDeploymentScriptAzureCliArrayOutputWithContext(ctx context.Context) ResourceDeploymentScriptAzureCliArrayOutput {
	return o
}

func (o ResourceDeploymentScriptAzureCliArrayOutput) Index(i pulumi.IntInput) ResourceDeploymentScriptAzureCliOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourceDeploymentScriptAzureCli {
		return vs[0].([]*ResourceDeploymentScriptAzureCli)[vs[1].(int)]
	}).(ResourceDeploymentScriptAzureCliOutput)
}

type ResourceDeploymentScriptAzureCliMapOutput struct{ *pulumi.OutputState }

func (ResourceDeploymentScriptAzureCliMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceDeploymentScriptAzureCli)(nil)).Elem()
}

func (o ResourceDeploymentScriptAzureCliMapOutput) ToResourceDeploymentScriptAzureCliMapOutput() ResourceDeploymentScriptAzureCliMapOutput {
	return o
}

func (o ResourceDeploymentScriptAzureCliMapOutput) ToResourceDeploymentScriptAzureCliMapOutputWithContext(ctx context.Context) ResourceDeploymentScriptAzureCliMapOutput {
	return o
}

func (o ResourceDeploymentScriptAzureCliMapOutput) MapIndex(k pulumi.StringInput) ResourceDeploymentScriptAzureCliOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourceDeploymentScriptAzureCli {
		return vs[0].(map[string]*ResourceDeploymentScriptAzureCli)[vs[1].(string)]
	}).(ResourceDeploymentScriptAzureCliOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDeploymentScriptAzureCliInput)(nil)).Elem(), &ResourceDeploymentScriptAzureCli{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDeploymentScriptAzureCliArrayInput)(nil)).Elem(), ResourceDeploymentScriptAzureCliArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDeploymentScriptAzureCliMapInput)(nil)).Elem(), ResourceDeploymentScriptAzureCliMap{})
	pulumi.RegisterOutputType(ResourceDeploymentScriptAzureCliOutput{})
	pulumi.RegisterOutputType(ResourceDeploymentScriptAzureCliArrayOutput{})
	pulumi.RegisterOutputType(ResourceDeploymentScriptAzureCliMapOutput{})
}
