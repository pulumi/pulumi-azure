// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package core

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Azure Resource Group Policy Remediation.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/policy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleDefinition, err := policy.NewDefinition(ctx, "exampleDefinition", &policy.DefinitionArgs{
//				PolicyType:  pulumi.String("Custom"),
//				Mode:        pulumi.String("All"),
//				DisplayName: pulumi.String("my-policy-definition"),
//				PolicyRule: pulumi.String(`    {
//	    "if": {
//	      "not": {
//	        "field": "location",
//	        "in": "[parameters('allowedLocations')]"
//	      }
//	    },
//	    "then": {
//	      "effect": "audit"
//	    }
//	  }
//
// `),
//
//				Parameters: pulumi.String(`    {
//	    "allowedLocations": {
//	      "type": "Array",
//	      "metadata": {
//	        "description": "The list of allowed locations for resources.",
//	        "displayName": "Allowed locations",
//	        "strongType": "location"
//	      }
//	    }
//	  }
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			exampleResourceGroupPolicyAssignment, err := core.NewResourceGroupPolicyAssignment(ctx, "exampleResourceGroupPolicyAssignment", &core.ResourceGroupPolicyAssignmentArgs{
//				ResourceGroupId:    exampleResourceGroup.ID(),
//				PolicyDefinitionId: exampleDefinition.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = core.NewResourceGroupPolicyRemediation(ctx, "exampleResourceGroupPolicyRemediation", &core.ResourceGroupPolicyRemediationArgs{
//				ResourceGroupId:    exampleResourceGroup.ID(),
//				PolicyAssignmentId: exampleResourceGroupPolicyAssignment.ID(),
//				LocationFilters: pulumi.StringArray{
//					pulumi.String("West Europe"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Policy Remediations can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:core/resourceGroupPolicyRemediation:ResourceGroupPolicyRemediation example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.PolicyInsights/remediations/remediation1
//
// ```
type ResourceGroupPolicyRemediation struct {
	pulumi.CustomResourceState

	// A number between 0.0 to 1.0 representing the percentage failure threshold. The remediation will fail if the percentage of failed remediation operations (i.e. failed deployments) exceeds this threshold.
	FailurePercentage pulumi.Float64PtrOutput `pulumi:"failurePercentage"`
	// A list of the resource locations that will be remediated.
	LocationFilters pulumi.StringArrayOutput `pulumi:"locationFilters"`
	// The name of the Policy Remediation. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Determines how many resources to remediate at any given time. Can be used to increase or reduce the pace of the remediation. If not provided, the default parallel deployments value is used.
	ParallelDeployments pulumi.IntPtrOutput `pulumi:"parallelDeployments"`
	// The ID of the Policy Assignment that should be remediated.
	PolicyAssignmentId pulumi.StringOutput `pulumi:"policyAssignmentId"`
	// The unique ID for the policy definition within the policy set definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
	//
	// > **Note:** This property has been deprecated and will be removed in version 4.0 of the provider in favour of `policyDefinitionReferenceId`.
	//
	// Deprecated: `policy_definition_id` will be removed in version 4.0 of the AzureRM Provider in favour of `policy_definition_reference_id`.
	PolicyDefinitionId pulumi.StringPtrOutput `pulumi:"policyDefinitionId"`
	// The unique ID for the policy definition reference within the policy set definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
	PolicyDefinitionReferenceId pulumi.StringPtrOutput `pulumi:"policyDefinitionReferenceId"`
	// Determines the max number of resources that can be remediated by the remediation job. If not provided, the default resource count is used.
	ResourceCount pulumi.IntPtrOutput `pulumi:"resourceCount"`
	// The way that resources to remediate are discovered. Possible values are `ExistingNonCompliant`, `ReEvaluateCompliance`. Defaults to `ExistingNonCompliant`.
	ResourceDiscoveryMode pulumi.StringPtrOutput `pulumi:"resourceDiscoveryMode"`
	// The Resource Group ID at which the Policy Remediation should be applied. Changing this forces a new resource to be created.
	ResourceGroupId pulumi.StringOutput `pulumi:"resourceGroupId"`
}

// NewResourceGroupPolicyRemediation registers a new resource with the given unique name, arguments, and options.
func NewResourceGroupPolicyRemediation(ctx *pulumi.Context,
	name string, args *ResourceGroupPolicyRemediationArgs, opts ...pulumi.ResourceOption) (*ResourceGroupPolicyRemediation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyAssignmentId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyAssignmentId'")
	}
	if args.ResourceGroupId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourceGroupPolicyRemediation
	err := ctx.RegisterResource("azure:core/resourceGroupPolicyRemediation:ResourceGroupPolicyRemediation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceGroupPolicyRemediation gets an existing ResourceGroupPolicyRemediation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceGroupPolicyRemediation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceGroupPolicyRemediationState, opts ...pulumi.ResourceOption) (*ResourceGroupPolicyRemediation, error) {
	var resource ResourceGroupPolicyRemediation
	err := ctx.ReadResource("azure:core/resourceGroupPolicyRemediation:ResourceGroupPolicyRemediation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceGroupPolicyRemediation resources.
type resourceGroupPolicyRemediationState struct {
	// A number between 0.0 to 1.0 representing the percentage failure threshold. The remediation will fail if the percentage of failed remediation operations (i.e. failed deployments) exceeds this threshold.
	FailurePercentage *float64 `pulumi:"failurePercentage"`
	// A list of the resource locations that will be remediated.
	LocationFilters []string `pulumi:"locationFilters"`
	// The name of the Policy Remediation. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Determines how many resources to remediate at any given time. Can be used to increase or reduce the pace of the remediation. If not provided, the default parallel deployments value is used.
	ParallelDeployments *int `pulumi:"parallelDeployments"`
	// The ID of the Policy Assignment that should be remediated.
	PolicyAssignmentId *string `pulumi:"policyAssignmentId"`
	// The unique ID for the policy definition within the policy set definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
	//
	// > **Note:** This property has been deprecated and will be removed in version 4.0 of the provider in favour of `policyDefinitionReferenceId`.
	//
	// Deprecated: `policy_definition_id` will be removed in version 4.0 of the AzureRM Provider in favour of `policy_definition_reference_id`.
	PolicyDefinitionId *string `pulumi:"policyDefinitionId"`
	// The unique ID for the policy definition reference within the policy set definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
	PolicyDefinitionReferenceId *string `pulumi:"policyDefinitionReferenceId"`
	// Determines the max number of resources that can be remediated by the remediation job. If not provided, the default resource count is used.
	ResourceCount *int `pulumi:"resourceCount"`
	// The way that resources to remediate are discovered. Possible values are `ExistingNonCompliant`, `ReEvaluateCompliance`. Defaults to `ExistingNonCompliant`.
	ResourceDiscoveryMode *string `pulumi:"resourceDiscoveryMode"`
	// The Resource Group ID at which the Policy Remediation should be applied. Changing this forces a new resource to be created.
	ResourceGroupId *string `pulumi:"resourceGroupId"`
}

type ResourceGroupPolicyRemediationState struct {
	// A number between 0.0 to 1.0 representing the percentage failure threshold. The remediation will fail if the percentage of failed remediation operations (i.e. failed deployments) exceeds this threshold.
	FailurePercentage pulumi.Float64PtrInput
	// A list of the resource locations that will be remediated.
	LocationFilters pulumi.StringArrayInput
	// The name of the Policy Remediation. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Determines how many resources to remediate at any given time. Can be used to increase or reduce the pace of the remediation. If not provided, the default parallel deployments value is used.
	ParallelDeployments pulumi.IntPtrInput
	// The ID of the Policy Assignment that should be remediated.
	PolicyAssignmentId pulumi.StringPtrInput
	// The unique ID for the policy definition within the policy set definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
	//
	// > **Note:** This property has been deprecated and will be removed in version 4.0 of the provider in favour of `policyDefinitionReferenceId`.
	//
	// Deprecated: `policy_definition_id` will be removed in version 4.0 of the AzureRM Provider in favour of `policy_definition_reference_id`.
	PolicyDefinitionId pulumi.StringPtrInput
	// The unique ID for the policy definition reference within the policy set definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
	PolicyDefinitionReferenceId pulumi.StringPtrInput
	// Determines the max number of resources that can be remediated by the remediation job. If not provided, the default resource count is used.
	ResourceCount pulumi.IntPtrInput
	// The way that resources to remediate are discovered. Possible values are `ExistingNonCompliant`, `ReEvaluateCompliance`. Defaults to `ExistingNonCompliant`.
	ResourceDiscoveryMode pulumi.StringPtrInput
	// The Resource Group ID at which the Policy Remediation should be applied. Changing this forces a new resource to be created.
	ResourceGroupId pulumi.StringPtrInput
}

func (ResourceGroupPolicyRemediationState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceGroupPolicyRemediationState)(nil)).Elem()
}

type resourceGroupPolicyRemediationArgs struct {
	// A number between 0.0 to 1.0 representing the percentage failure threshold. The remediation will fail if the percentage of failed remediation operations (i.e. failed deployments) exceeds this threshold.
	FailurePercentage *float64 `pulumi:"failurePercentage"`
	// A list of the resource locations that will be remediated.
	LocationFilters []string `pulumi:"locationFilters"`
	// The name of the Policy Remediation. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Determines how many resources to remediate at any given time. Can be used to increase or reduce the pace of the remediation. If not provided, the default parallel deployments value is used.
	ParallelDeployments *int `pulumi:"parallelDeployments"`
	// The ID of the Policy Assignment that should be remediated.
	PolicyAssignmentId string `pulumi:"policyAssignmentId"`
	// The unique ID for the policy definition within the policy set definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
	//
	// > **Note:** This property has been deprecated and will be removed in version 4.0 of the provider in favour of `policyDefinitionReferenceId`.
	//
	// Deprecated: `policy_definition_id` will be removed in version 4.0 of the AzureRM Provider in favour of `policy_definition_reference_id`.
	PolicyDefinitionId *string `pulumi:"policyDefinitionId"`
	// The unique ID for the policy definition reference within the policy set definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
	PolicyDefinitionReferenceId *string `pulumi:"policyDefinitionReferenceId"`
	// Determines the max number of resources that can be remediated by the remediation job. If not provided, the default resource count is used.
	ResourceCount *int `pulumi:"resourceCount"`
	// The way that resources to remediate are discovered. Possible values are `ExistingNonCompliant`, `ReEvaluateCompliance`. Defaults to `ExistingNonCompliant`.
	ResourceDiscoveryMode *string `pulumi:"resourceDiscoveryMode"`
	// The Resource Group ID at which the Policy Remediation should be applied. Changing this forces a new resource to be created.
	ResourceGroupId string `pulumi:"resourceGroupId"`
}

// The set of arguments for constructing a ResourceGroupPolicyRemediation resource.
type ResourceGroupPolicyRemediationArgs struct {
	// A number between 0.0 to 1.0 representing the percentage failure threshold. The remediation will fail if the percentage of failed remediation operations (i.e. failed deployments) exceeds this threshold.
	FailurePercentage pulumi.Float64PtrInput
	// A list of the resource locations that will be remediated.
	LocationFilters pulumi.StringArrayInput
	// The name of the Policy Remediation. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Determines how many resources to remediate at any given time. Can be used to increase or reduce the pace of the remediation. If not provided, the default parallel deployments value is used.
	ParallelDeployments pulumi.IntPtrInput
	// The ID of the Policy Assignment that should be remediated.
	PolicyAssignmentId pulumi.StringInput
	// The unique ID for the policy definition within the policy set definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
	//
	// > **Note:** This property has been deprecated and will be removed in version 4.0 of the provider in favour of `policyDefinitionReferenceId`.
	//
	// Deprecated: `policy_definition_id` will be removed in version 4.0 of the AzureRM Provider in favour of `policy_definition_reference_id`.
	PolicyDefinitionId pulumi.StringPtrInput
	// The unique ID for the policy definition reference within the policy set definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
	PolicyDefinitionReferenceId pulumi.StringPtrInput
	// Determines the max number of resources that can be remediated by the remediation job. If not provided, the default resource count is used.
	ResourceCount pulumi.IntPtrInput
	// The way that resources to remediate are discovered. Possible values are `ExistingNonCompliant`, `ReEvaluateCompliance`. Defaults to `ExistingNonCompliant`.
	ResourceDiscoveryMode pulumi.StringPtrInput
	// The Resource Group ID at which the Policy Remediation should be applied. Changing this forces a new resource to be created.
	ResourceGroupId pulumi.StringInput
}

func (ResourceGroupPolicyRemediationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceGroupPolicyRemediationArgs)(nil)).Elem()
}

type ResourceGroupPolicyRemediationInput interface {
	pulumi.Input

	ToResourceGroupPolicyRemediationOutput() ResourceGroupPolicyRemediationOutput
	ToResourceGroupPolicyRemediationOutputWithContext(ctx context.Context) ResourceGroupPolicyRemediationOutput
}

func (*ResourceGroupPolicyRemediation) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceGroupPolicyRemediation)(nil)).Elem()
}

func (i *ResourceGroupPolicyRemediation) ToResourceGroupPolicyRemediationOutput() ResourceGroupPolicyRemediationOutput {
	return i.ToResourceGroupPolicyRemediationOutputWithContext(context.Background())
}

func (i *ResourceGroupPolicyRemediation) ToResourceGroupPolicyRemediationOutputWithContext(ctx context.Context) ResourceGroupPolicyRemediationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGroupPolicyRemediationOutput)
}

// ResourceGroupPolicyRemediationArrayInput is an input type that accepts ResourceGroupPolicyRemediationArray and ResourceGroupPolicyRemediationArrayOutput values.
// You can construct a concrete instance of `ResourceGroupPolicyRemediationArrayInput` via:
//
//	ResourceGroupPolicyRemediationArray{ ResourceGroupPolicyRemediationArgs{...} }
type ResourceGroupPolicyRemediationArrayInput interface {
	pulumi.Input

	ToResourceGroupPolicyRemediationArrayOutput() ResourceGroupPolicyRemediationArrayOutput
	ToResourceGroupPolicyRemediationArrayOutputWithContext(context.Context) ResourceGroupPolicyRemediationArrayOutput
}

type ResourceGroupPolicyRemediationArray []ResourceGroupPolicyRemediationInput

func (ResourceGroupPolicyRemediationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceGroupPolicyRemediation)(nil)).Elem()
}

func (i ResourceGroupPolicyRemediationArray) ToResourceGroupPolicyRemediationArrayOutput() ResourceGroupPolicyRemediationArrayOutput {
	return i.ToResourceGroupPolicyRemediationArrayOutputWithContext(context.Background())
}

func (i ResourceGroupPolicyRemediationArray) ToResourceGroupPolicyRemediationArrayOutputWithContext(ctx context.Context) ResourceGroupPolicyRemediationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGroupPolicyRemediationArrayOutput)
}

// ResourceGroupPolicyRemediationMapInput is an input type that accepts ResourceGroupPolicyRemediationMap and ResourceGroupPolicyRemediationMapOutput values.
// You can construct a concrete instance of `ResourceGroupPolicyRemediationMapInput` via:
//
//	ResourceGroupPolicyRemediationMap{ "key": ResourceGroupPolicyRemediationArgs{...} }
type ResourceGroupPolicyRemediationMapInput interface {
	pulumi.Input

	ToResourceGroupPolicyRemediationMapOutput() ResourceGroupPolicyRemediationMapOutput
	ToResourceGroupPolicyRemediationMapOutputWithContext(context.Context) ResourceGroupPolicyRemediationMapOutput
}

type ResourceGroupPolicyRemediationMap map[string]ResourceGroupPolicyRemediationInput

func (ResourceGroupPolicyRemediationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceGroupPolicyRemediation)(nil)).Elem()
}

func (i ResourceGroupPolicyRemediationMap) ToResourceGroupPolicyRemediationMapOutput() ResourceGroupPolicyRemediationMapOutput {
	return i.ToResourceGroupPolicyRemediationMapOutputWithContext(context.Background())
}

func (i ResourceGroupPolicyRemediationMap) ToResourceGroupPolicyRemediationMapOutputWithContext(ctx context.Context) ResourceGroupPolicyRemediationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGroupPolicyRemediationMapOutput)
}

type ResourceGroupPolicyRemediationOutput struct{ *pulumi.OutputState }

func (ResourceGroupPolicyRemediationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceGroupPolicyRemediation)(nil)).Elem()
}

func (o ResourceGroupPolicyRemediationOutput) ToResourceGroupPolicyRemediationOutput() ResourceGroupPolicyRemediationOutput {
	return o
}

func (o ResourceGroupPolicyRemediationOutput) ToResourceGroupPolicyRemediationOutputWithContext(ctx context.Context) ResourceGroupPolicyRemediationOutput {
	return o
}

// A number between 0.0 to 1.0 representing the percentage failure threshold. The remediation will fail if the percentage of failed remediation operations (i.e. failed deployments) exceeds this threshold.
func (o ResourceGroupPolicyRemediationOutput) FailurePercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ResourceGroupPolicyRemediation) pulumi.Float64PtrOutput { return v.FailurePercentage }).(pulumi.Float64PtrOutput)
}

// A list of the resource locations that will be remediated.
func (o ResourceGroupPolicyRemediationOutput) LocationFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourceGroupPolicyRemediation) pulumi.StringArrayOutput { return v.LocationFilters }).(pulumi.StringArrayOutput)
}

// The name of the Policy Remediation. Changing this forces a new resource to be created.
func (o ResourceGroupPolicyRemediationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceGroupPolicyRemediation) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Determines how many resources to remediate at any given time. Can be used to increase or reduce the pace of the remediation. If not provided, the default parallel deployments value is used.
func (o ResourceGroupPolicyRemediationOutput) ParallelDeployments() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceGroupPolicyRemediation) pulumi.IntPtrOutput { return v.ParallelDeployments }).(pulumi.IntPtrOutput)
}

// The ID of the Policy Assignment that should be remediated.
func (o ResourceGroupPolicyRemediationOutput) PolicyAssignmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceGroupPolicyRemediation) pulumi.StringOutput { return v.PolicyAssignmentId }).(pulumi.StringOutput)
}

// The unique ID for the policy definition within the policy set definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
//
// > **Note:** This property has been deprecated and will be removed in version 4.0 of the provider in favour of `policyDefinitionReferenceId`.
//
// Deprecated: `policy_definition_id` will be removed in version 4.0 of the AzureRM Provider in favour of `policy_definition_reference_id`.
func (o ResourceGroupPolicyRemediationOutput) PolicyDefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGroupPolicyRemediation) pulumi.StringPtrOutput { return v.PolicyDefinitionId }).(pulumi.StringPtrOutput)
}

// The unique ID for the policy definition reference within the policy set definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
func (o ResourceGroupPolicyRemediationOutput) PolicyDefinitionReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGroupPolicyRemediation) pulumi.StringPtrOutput { return v.PolicyDefinitionReferenceId }).(pulumi.StringPtrOutput)
}

// Determines the max number of resources that can be remediated by the remediation job. If not provided, the default resource count is used.
func (o ResourceGroupPolicyRemediationOutput) ResourceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceGroupPolicyRemediation) pulumi.IntPtrOutput { return v.ResourceCount }).(pulumi.IntPtrOutput)
}

// The way that resources to remediate are discovered. Possible values are `ExistingNonCompliant`, `ReEvaluateCompliance`. Defaults to `ExistingNonCompliant`.
func (o ResourceGroupPolicyRemediationOutput) ResourceDiscoveryMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGroupPolicyRemediation) pulumi.StringPtrOutput { return v.ResourceDiscoveryMode }).(pulumi.StringPtrOutput)
}

// The Resource Group ID at which the Policy Remediation should be applied. Changing this forces a new resource to be created.
func (o ResourceGroupPolicyRemediationOutput) ResourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceGroupPolicyRemediation) pulumi.StringOutput { return v.ResourceGroupId }).(pulumi.StringOutput)
}

type ResourceGroupPolicyRemediationArrayOutput struct{ *pulumi.OutputState }

func (ResourceGroupPolicyRemediationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceGroupPolicyRemediation)(nil)).Elem()
}

func (o ResourceGroupPolicyRemediationArrayOutput) ToResourceGroupPolicyRemediationArrayOutput() ResourceGroupPolicyRemediationArrayOutput {
	return o
}

func (o ResourceGroupPolicyRemediationArrayOutput) ToResourceGroupPolicyRemediationArrayOutputWithContext(ctx context.Context) ResourceGroupPolicyRemediationArrayOutput {
	return o
}

func (o ResourceGroupPolicyRemediationArrayOutput) Index(i pulumi.IntInput) ResourceGroupPolicyRemediationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourceGroupPolicyRemediation {
		return vs[0].([]*ResourceGroupPolicyRemediation)[vs[1].(int)]
	}).(ResourceGroupPolicyRemediationOutput)
}

type ResourceGroupPolicyRemediationMapOutput struct{ *pulumi.OutputState }

func (ResourceGroupPolicyRemediationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceGroupPolicyRemediation)(nil)).Elem()
}

func (o ResourceGroupPolicyRemediationMapOutput) ToResourceGroupPolicyRemediationMapOutput() ResourceGroupPolicyRemediationMapOutput {
	return o
}

func (o ResourceGroupPolicyRemediationMapOutput) ToResourceGroupPolicyRemediationMapOutputWithContext(ctx context.Context) ResourceGroupPolicyRemediationMapOutput {
	return o
}

func (o ResourceGroupPolicyRemediationMapOutput) MapIndex(k pulumi.StringInput) ResourceGroupPolicyRemediationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourceGroupPolicyRemediation {
		return vs[0].(map[string]*ResourceGroupPolicyRemediation)[vs[1].(string)]
	}).(ResourceGroupPolicyRemediationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceGroupPolicyRemediationInput)(nil)).Elem(), &ResourceGroupPolicyRemediation{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceGroupPolicyRemediationArrayInput)(nil)).Elem(), ResourceGroupPolicyRemediationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceGroupPolicyRemediationMapInput)(nil)).Elem(), ResourceGroupPolicyRemediationMap{})
	pulumi.RegisterOutputType(ResourceGroupPolicyRemediationOutput{})
	pulumi.RegisterOutputType(ResourceGroupPolicyRemediationArrayOutput{})
	pulumi.RegisterOutputType(ResourceGroupPolicyRemediationMapOutput{})
}
