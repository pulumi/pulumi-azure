// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package core

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about all the Subscriptions currently available.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/core"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		available, err := core.GetSubscriptions(ctx, nil, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("availableSubscriptions", available.Subscriptions)
// 		ctx.Export("firstAvailableSubscriptionDisplayName", available.Subscriptions[0].DisplayName)
// 		return nil
// 	})
// }
// ```
func GetSubscriptions(ctx *pulumi.Context, args *GetSubscriptionsArgs, opts ...pulumi.InvokeOption) (*GetSubscriptionsResult, error) {
	var rv GetSubscriptionsResult
	err := ctx.Invoke("azure:core/getSubscriptions:getSubscriptions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSubscriptions.
type GetSubscriptionsArgs struct {
	// A case-insensitive value which must be contained within the `displayName` field, used to filter the results
	DisplayNameContains *string `pulumi:"displayNameContains"`
	// A case-insensitive prefix which can be used to filter on the `displayName` field
	DisplayNamePrefix *string `pulumi:"displayNamePrefix"`
}

// A collection of values returned by getSubscriptions.
type GetSubscriptionsResult struct {
	DisplayNameContains *string `pulumi:"displayNameContains"`
	DisplayNamePrefix   *string `pulumi:"displayNamePrefix"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// One or more `subscription` blocks as defined below.
	Subscriptions []GetSubscriptionsSubscription `pulumi:"subscriptions"`
}

func GetSubscriptionsOutput(ctx *pulumi.Context, args GetSubscriptionsOutputArgs, opts ...pulumi.InvokeOption) GetSubscriptionsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSubscriptionsResult, error) {
			args := v.(GetSubscriptionsArgs)
			r, err := GetSubscriptions(ctx, &args, opts...)
			return *r, err
		}).(GetSubscriptionsResultOutput)
}

// A collection of arguments for invoking getSubscriptions.
type GetSubscriptionsOutputArgs struct {
	// A case-insensitive value which must be contained within the `displayName` field, used to filter the results
	DisplayNameContains pulumi.StringPtrInput `pulumi:"displayNameContains"`
	// A case-insensitive prefix which can be used to filter on the `displayName` field
	DisplayNamePrefix pulumi.StringPtrInput `pulumi:"displayNamePrefix"`
}

func (GetSubscriptionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionsArgs)(nil)).Elem()
}

// A collection of values returned by getSubscriptions.
type GetSubscriptionsResultOutput struct{ *pulumi.OutputState }

func (GetSubscriptionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubscriptionsResult)(nil)).Elem()
}

func (o GetSubscriptionsResultOutput) ToGetSubscriptionsResultOutput() GetSubscriptionsResultOutput {
	return o
}

func (o GetSubscriptionsResultOutput) ToGetSubscriptionsResultOutputWithContext(ctx context.Context) GetSubscriptionsResultOutput {
	return o
}

func (o GetSubscriptionsResultOutput) DisplayNameContains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSubscriptionsResult) *string { return v.DisplayNameContains }).(pulumi.StringPtrOutput)
}

func (o GetSubscriptionsResultOutput) DisplayNamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSubscriptionsResult) *string { return v.DisplayNamePrefix }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSubscriptionsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubscriptionsResult) string { return v.Id }).(pulumi.StringOutput)
}

// One or more `subscription` blocks as defined below.
func (o GetSubscriptionsResultOutput) Subscriptions() GetSubscriptionsSubscriptionArrayOutput {
	return o.ApplyT(func(v GetSubscriptionsResult) []GetSubscriptionsSubscription { return v.Subscriptions }).(GetSubscriptionsSubscriptionArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSubscriptionsResultOutput{})
}
