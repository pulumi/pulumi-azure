// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package core

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Subscription Policy Exemption.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/policy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleSubscription, err := core.LookupSubscription(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			examplePolicySetDefinition, err := policy.LookupPolicySetDefinition(ctx, &policy.LookupPolicySetDefinitionArgs{
//				DisplayName: pulumi.StringRef("Audit machines with insecure password security settings"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleSubscriptionPolicyAssignment, err := core.NewSubscriptionPolicyAssignment(ctx, "exampleSubscriptionPolicyAssignment", &core.SubscriptionPolicyAssignmentArgs{
//				SubscriptionId:     *pulumi.String(exampleSubscription.Id),
//				PolicyDefinitionId: *pulumi.String(examplePolicySetDefinition.Id),
//				Location:           pulumi.String("westus"),
//				Identity: &core.SubscriptionPolicyAssignmentIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = core.NewSubscriptionPolicyExemption(ctx, "exampleSubscriptionPolicyExemption", &core.SubscriptionPolicyExemptionArgs{
//				SubscriptionId:     *pulumi.String(exampleSubscription.Id),
//				PolicyAssignmentId: exampleSubscriptionPolicyAssignment.ID(),
//				ExemptionCategory:  pulumi.String("Mitigated"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Policy Exemptions can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:core/subscriptionPolicyExemption:SubscriptionPolicyExemption exemption1 /subscriptions/00000000-0000-0000-000000000000/providers/Microsoft.Authorization/policyExemptions/exemption1
//
// ```
type SubscriptionPolicyExemption struct {
	pulumi.CustomResourceState

	// A description to use for this Policy Exemption.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A friendly display name to use for this Policy Exemption.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// The category of this policy exemption. Possible values are `Waiver` and `Mitigated`.
	ExemptionCategory pulumi.StringOutput `pulumi:"exemptionCategory"`
	// The expiration date and time in UTC ISO 8601 format of this policy exemption.
	ExpiresOn pulumi.StringPtrOutput `pulumi:"expiresOn"`
	// The metadata for this policy exemption. This is a JSON string representing additional metadata that should be stored with the policy exemption.
	Metadata pulumi.StringOutput `pulumi:"metadata"`
	// The name of the Policy Exemption. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Policy Assignment to be exempted at the specified Scope. Changing this forces a new resource to be created.
	PolicyAssignmentId pulumi.StringOutput `pulumi:"policyAssignmentId"`
	// The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
	PolicyDefinitionReferenceIds pulumi.StringArrayOutput `pulumi:"policyDefinitionReferenceIds"`
	// The Subscription ID where the Policy Exemption should be applied. Changing this forces a new resource to be created.
	SubscriptionId pulumi.StringOutput `pulumi:"subscriptionId"`
}

// NewSubscriptionPolicyExemption registers a new resource with the given unique name, arguments, and options.
func NewSubscriptionPolicyExemption(ctx *pulumi.Context,
	name string, args *SubscriptionPolicyExemptionArgs, opts ...pulumi.ResourceOption) (*SubscriptionPolicyExemption, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExemptionCategory == nil {
		return nil, errors.New("invalid value for required argument 'ExemptionCategory'")
	}
	if args.PolicyAssignmentId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyAssignmentId'")
	}
	if args.SubscriptionId == nil {
		return nil, errors.New("invalid value for required argument 'SubscriptionId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SubscriptionPolicyExemption
	err := ctx.RegisterResource("azure:core/subscriptionPolicyExemption:SubscriptionPolicyExemption", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubscriptionPolicyExemption gets an existing SubscriptionPolicyExemption resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubscriptionPolicyExemption(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubscriptionPolicyExemptionState, opts ...pulumi.ResourceOption) (*SubscriptionPolicyExemption, error) {
	var resource SubscriptionPolicyExemption
	err := ctx.ReadResource("azure:core/subscriptionPolicyExemption:SubscriptionPolicyExemption", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubscriptionPolicyExemption resources.
type subscriptionPolicyExemptionState struct {
	// A description to use for this Policy Exemption.
	Description *string `pulumi:"description"`
	// A friendly display name to use for this Policy Exemption.
	DisplayName *string `pulumi:"displayName"`
	// The category of this policy exemption. Possible values are `Waiver` and `Mitigated`.
	ExemptionCategory *string `pulumi:"exemptionCategory"`
	// The expiration date and time in UTC ISO 8601 format of this policy exemption.
	ExpiresOn *string `pulumi:"expiresOn"`
	// The metadata for this policy exemption. This is a JSON string representing additional metadata that should be stored with the policy exemption.
	Metadata *string `pulumi:"metadata"`
	// The name of the Policy Exemption. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The ID of the Policy Assignment to be exempted at the specified Scope. Changing this forces a new resource to be created.
	PolicyAssignmentId *string `pulumi:"policyAssignmentId"`
	// The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
	PolicyDefinitionReferenceIds []string `pulumi:"policyDefinitionReferenceIds"`
	// The Subscription ID where the Policy Exemption should be applied. Changing this forces a new resource to be created.
	SubscriptionId *string `pulumi:"subscriptionId"`
}

type SubscriptionPolicyExemptionState struct {
	// A description to use for this Policy Exemption.
	Description pulumi.StringPtrInput
	// A friendly display name to use for this Policy Exemption.
	DisplayName pulumi.StringPtrInput
	// The category of this policy exemption. Possible values are `Waiver` and `Mitigated`.
	ExemptionCategory pulumi.StringPtrInput
	// The expiration date and time in UTC ISO 8601 format of this policy exemption.
	ExpiresOn pulumi.StringPtrInput
	// The metadata for this policy exemption. This is a JSON string representing additional metadata that should be stored with the policy exemption.
	Metadata pulumi.StringPtrInput
	// The name of the Policy Exemption. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The ID of the Policy Assignment to be exempted at the specified Scope. Changing this forces a new resource to be created.
	PolicyAssignmentId pulumi.StringPtrInput
	// The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
	PolicyDefinitionReferenceIds pulumi.StringArrayInput
	// The Subscription ID where the Policy Exemption should be applied. Changing this forces a new resource to be created.
	SubscriptionId pulumi.StringPtrInput
}

func (SubscriptionPolicyExemptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionPolicyExemptionState)(nil)).Elem()
}

type subscriptionPolicyExemptionArgs struct {
	// A description to use for this Policy Exemption.
	Description *string `pulumi:"description"`
	// A friendly display name to use for this Policy Exemption.
	DisplayName *string `pulumi:"displayName"`
	// The category of this policy exemption. Possible values are `Waiver` and `Mitigated`.
	ExemptionCategory string `pulumi:"exemptionCategory"`
	// The expiration date and time in UTC ISO 8601 format of this policy exemption.
	ExpiresOn *string `pulumi:"expiresOn"`
	// The metadata for this policy exemption. This is a JSON string representing additional metadata that should be stored with the policy exemption.
	Metadata *string `pulumi:"metadata"`
	// The name of the Policy Exemption. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The ID of the Policy Assignment to be exempted at the specified Scope. Changing this forces a new resource to be created.
	PolicyAssignmentId string `pulumi:"policyAssignmentId"`
	// The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
	PolicyDefinitionReferenceIds []string `pulumi:"policyDefinitionReferenceIds"`
	// The Subscription ID where the Policy Exemption should be applied. Changing this forces a new resource to be created.
	SubscriptionId string `pulumi:"subscriptionId"`
}

// The set of arguments for constructing a SubscriptionPolicyExemption resource.
type SubscriptionPolicyExemptionArgs struct {
	// A description to use for this Policy Exemption.
	Description pulumi.StringPtrInput
	// A friendly display name to use for this Policy Exemption.
	DisplayName pulumi.StringPtrInput
	// The category of this policy exemption. Possible values are `Waiver` and `Mitigated`.
	ExemptionCategory pulumi.StringInput
	// The expiration date and time in UTC ISO 8601 format of this policy exemption.
	ExpiresOn pulumi.StringPtrInput
	// The metadata for this policy exemption. This is a JSON string representing additional metadata that should be stored with the policy exemption.
	Metadata pulumi.StringPtrInput
	// The name of the Policy Exemption. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The ID of the Policy Assignment to be exempted at the specified Scope. Changing this forces a new resource to be created.
	PolicyAssignmentId pulumi.StringInput
	// The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
	PolicyDefinitionReferenceIds pulumi.StringArrayInput
	// The Subscription ID where the Policy Exemption should be applied. Changing this forces a new resource to be created.
	SubscriptionId pulumi.StringInput
}

func (SubscriptionPolicyExemptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionPolicyExemptionArgs)(nil)).Elem()
}

type SubscriptionPolicyExemptionInput interface {
	pulumi.Input

	ToSubscriptionPolicyExemptionOutput() SubscriptionPolicyExemptionOutput
	ToSubscriptionPolicyExemptionOutputWithContext(ctx context.Context) SubscriptionPolicyExemptionOutput
}

func (*SubscriptionPolicyExemption) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionPolicyExemption)(nil)).Elem()
}

func (i *SubscriptionPolicyExemption) ToSubscriptionPolicyExemptionOutput() SubscriptionPolicyExemptionOutput {
	return i.ToSubscriptionPolicyExemptionOutputWithContext(context.Background())
}

func (i *SubscriptionPolicyExemption) ToSubscriptionPolicyExemptionOutputWithContext(ctx context.Context) SubscriptionPolicyExemptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionPolicyExemptionOutput)
}

// SubscriptionPolicyExemptionArrayInput is an input type that accepts SubscriptionPolicyExemptionArray and SubscriptionPolicyExemptionArrayOutput values.
// You can construct a concrete instance of `SubscriptionPolicyExemptionArrayInput` via:
//
//	SubscriptionPolicyExemptionArray{ SubscriptionPolicyExemptionArgs{...} }
type SubscriptionPolicyExemptionArrayInput interface {
	pulumi.Input

	ToSubscriptionPolicyExemptionArrayOutput() SubscriptionPolicyExemptionArrayOutput
	ToSubscriptionPolicyExemptionArrayOutputWithContext(context.Context) SubscriptionPolicyExemptionArrayOutput
}

type SubscriptionPolicyExemptionArray []SubscriptionPolicyExemptionInput

func (SubscriptionPolicyExemptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubscriptionPolicyExemption)(nil)).Elem()
}

func (i SubscriptionPolicyExemptionArray) ToSubscriptionPolicyExemptionArrayOutput() SubscriptionPolicyExemptionArrayOutput {
	return i.ToSubscriptionPolicyExemptionArrayOutputWithContext(context.Background())
}

func (i SubscriptionPolicyExemptionArray) ToSubscriptionPolicyExemptionArrayOutputWithContext(ctx context.Context) SubscriptionPolicyExemptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionPolicyExemptionArrayOutput)
}

// SubscriptionPolicyExemptionMapInput is an input type that accepts SubscriptionPolicyExemptionMap and SubscriptionPolicyExemptionMapOutput values.
// You can construct a concrete instance of `SubscriptionPolicyExemptionMapInput` via:
//
//	SubscriptionPolicyExemptionMap{ "key": SubscriptionPolicyExemptionArgs{...} }
type SubscriptionPolicyExemptionMapInput interface {
	pulumi.Input

	ToSubscriptionPolicyExemptionMapOutput() SubscriptionPolicyExemptionMapOutput
	ToSubscriptionPolicyExemptionMapOutputWithContext(context.Context) SubscriptionPolicyExemptionMapOutput
}

type SubscriptionPolicyExemptionMap map[string]SubscriptionPolicyExemptionInput

func (SubscriptionPolicyExemptionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubscriptionPolicyExemption)(nil)).Elem()
}

func (i SubscriptionPolicyExemptionMap) ToSubscriptionPolicyExemptionMapOutput() SubscriptionPolicyExemptionMapOutput {
	return i.ToSubscriptionPolicyExemptionMapOutputWithContext(context.Background())
}

func (i SubscriptionPolicyExemptionMap) ToSubscriptionPolicyExemptionMapOutputWithContext(ctx context.Context) SubscriptionPolicyExemptionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionPolicyExemptionMapOutput)
}

type SubscriptionPolicyExemptionOutput struct{ *pulumi.OutputState }

func (SubscriptionPolicyExemptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionPolicyExemption)(nil)).Elem()
}

func (o SubscriptionPolicyExemptionOutput) ToSubscriptionPolicyExemptionOutput() SubscriptionPolicyExemptionOutput {
	return o
}

func (o SubscriptionPolicyExemptionOutput) ToSubscriptionPolicyExemptionOutputWithContext(ctx context.Context) SubscriptionPolicyExemptionOutput {
	return o
}

// A description to use for this Policy Exemption.
func (o SubscriptionPolicyExemptionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionPolicyExemption) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A friendly display name to use for this Policy Exemption.
func (o SubscriptionPolicyExemptionOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionPolicyExemption) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The category of this policy exemption. Possible values are `Waiver` and `Mitigated`.
func (o SubscriptionPolicyExemptionOutput) ExemptionCategory() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionPolicyExemption) pulumi.StringOutput { return v.ExemptionCategory }).(pulumi.StringOutput)
}

// The expiration date and time in UTC ISO 8601 format of this policy exemption.
func (o SubscriptionPolicyExemptionOutput) ExpiresOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionPolicyExemption) pulumi.StringPtrOutput { return v.ExpiresOn }).(pulumi.StringPtrOutput)
}

// The metadata for this policy exemption. This is a JSON string representing additional metadata that should be stored with the policy exemption.
func (o SubscriptionPolicyExemptionOutput) Metadata() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionPolicyExemption) pulumi.StringOutput { return v.Metadata }).(pulumi.StringOutput)
}

// The name of the Policy Exemption. Changing this forces a new resource to be created.
func (o SubscriptionPolicyExemptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionPolicyExemption) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Policy Assignment to be exempted at the specified Scope. Changing this forces a new resource to be created.
func (o SubscriptionPolicyExemptionOutput) PolicyAssignmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionPolicyExemption) pulumi.StringOutput { return v.PolicyAssignmentId }).(pulumi.StringOutput)
}

// The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
func (o SubscriptionPolicyExemptionOutput) PolicyDefinitionReferenceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SubscriptionPolicyExemption) pulumi.StringArrayOutput { return v.PolicyDefinitionReferenceIds }).(pulumi.StringArrayOutput)
}

// The Subscription ID where the Policy Exemption should be applied. Changing this forces a new resource to be created.
func (o SubscriptionPolicyExemptionOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionPolicyExemption) pulumi.StringOutput { return v.SubscriptionId }).(pulumi.StringOutput)
}

type SubscriptionPolicyExemptionArrayOutput struct{ *pulumi.OutputState }

func (SubscriptionPolicyExemptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubscriptionPolicyExemption)(nil)).Elem()
}

func (o SubscriptionPolicyExemptionArrayOutput) ToSubscriptionPolicyExemptionArrayOutput() SubscriptionPolicyExemptionArrayOutput {
	return o
}

func (o SubscriptionPolicyExemptionArrayOutput) ToSubscriptionPolicyExemptionArrayOutputWithContext(ctx context.Context) SubscriptionPolicyExemptionArrayOutput {
	return o
}

func (o SubscriptionPolicyExemptionArrayOutput) Index(i pulumi.IntInput) SubscriptionPolicyExemptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SubscriptionPolicyExemption {
		return vs[0].([]*SubscriptionPolicyExemption)[vs[1].(int)]
	}).(SubscriptionPolicyExemptionOutput)
}

type SubscriptionPolicyExemptionMapOutput struct{ *pulumi.OutputState }

func (SubscriptionPolicyExemptionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubscriptionPolicyExemption)(nil)).Elem()
}

func (o SubscriptionPolicyExemptionMapOutput) ToSubscriptionPolicyExemptionMapOutput() SubscriptionPolicyExemptionMapOutput {
	return o
}

func (o SubscriptionPolicyExemptionMapOutput) ToSubscriptionPolicyExemptionMapOutputWithContext(ctx context.Context) SubscriptionPolicyExemptionMapOutput {
	return o
}

func (o SubscriptionPolicyExemptionMapOutput) MapIndex(k pulumi.StringInput) SubscriptionPolicyExemptionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SubscriptionPolicyExemption {
		return vs[0].(map[string]*SubscriptionPolicyExemption)[vs[1].(string)]
	}).(SubscriptionPolicyExemptionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionPolicyExemptionInput)(nil)).Elem(), &SubscriptionPolicyExemption{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionPolicyExemptionArrayInput)(nil)).Elem(), SubscriptionPolicyExemptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionPolicyExemptionMapInput)(nil)).Elem(), SubscriptionPolicyExemptionMap{})
	pulumi.RegisterOutputType(SubscriptionPolicyExemptionOutput{})
	pulumi.RegisterOutputType(SubscriptionPolicyExemptionArrayOutput{})
	pulumi.RegisterOutputType(SubscriptionPolicyExemptionMapOutput{})
}
