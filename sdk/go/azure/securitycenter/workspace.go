// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package securitycenter

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages the subscription's Security Center Workspace.
// 
// ~> **NOTE:** Owner access permission is required.
// 
// ~> **NOTE:** The subscription's pricing model can not be `Free` for this to have any affect.
type Workspace struct {
	s *pulumi.ResourceState
}

// NewWorkspace registers a new resource with the given unique name, arguments, and options.
func NewWorkspace(ctx *pulumi.Context,
	name string, args *WorkspaceArgs, opts ...pulumi.ResourceOpt) (*Workspace, error) {
	if args == nil || args.Scope == nil {
		return nil, errors.New("missing required argument 'Scope'")
	}
	if args == nil || args.WorkspaceId == nil {
		return nil, errors.New("missing required argument 'WorkspaceId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["scope"] = nil
		inputs["workspaceId"] = nil
	} else {
		inputs["scope"] = args.Scope
		inputs["workspaceId"] = args.WorkspaceId
	}
	s, err := ctx.RegisterResource("azure:securitycenter/workspace:Workspace", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Workspace{s: s}, nil
}

// GetWorkspace gets an existing Workspace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspace(ctx *pulumi.Context,
	name string, id pulumi.ID, state *WorkspaceState, opts ...pulumi.ResourceOpt) (*Workspace, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["scope"] = state.Scope
		inputs["workspaceId"] = state.WorkspaceId
	}
	s, err := ctx.ReadResource("azure:securitycenter/workspace:Workspace", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Workspace{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Workspace) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Workspace) ID() *pulumi.IDOutput {
	return r.s.ID
}

// The scope of VMs to send their security data to the desired workspace, unless overridden by a setting with more specific scope.
func (r *Workspace) Scope() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["scope"])
}

// The resource ID of the log analytics workspace to save the data in.
func (r *Workspace) WorkspaceId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["workspaceId"])
}

// Input properties used for looking up and filtering Workspace resources.
type WorkspaceState struct {
	// The scope of VMs to send their security data to the desired workspace, unless overridden by a setting with more specific scope.
	Scope interface{}
	// The resource ID of the log analytics workspace to save the data in.
	WorkspaceId interface{}
}

// The set of arguments for constructing a Workspace resource.
type WorkspaceArgs struct {
	// The scope of VMs to send their security data to the desired workspace, unless overridden by a setting with more specific scope.
	Scope interface{}
	// The resource ID of the log analytics workspace to save the data in.
	WorkspaceId interface{}
}
