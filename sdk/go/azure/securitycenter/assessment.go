// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securitycenter

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages the Security Center Assessment for Azure Security Center.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"os"
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/compute"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/securitycenter"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func readFileOrPanic(path string) pulumi.StringPtrInput {
//		data, err := os.ReadFile(path)
//		if err != nil {
//			panic(err.Error())
//		}
//		return pulumi.String(string(data))
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "exampleVirtualNetwork", &network.VirtualNetworkArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			internal, err := network.NewSubnet(ctx, "internal", &network.SubnetArgs{
//				ResourceGroupName:  exampleResourceGroup.Name,
//				VirtualNetworkName: exampleVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.0.2.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleLinuxVirtualMachineScaleSet, err := compute.NewLinuxVirtualMachineScaleSet(ctx, "exampleLinuxVirtualMachineScaleSet", &compute.LinuxVirtualMachineScaleSetArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				Sku:               pulumi.String("Standard_F2"),
//				Instances:         pulumi.Int(1),
//				AdminUsername:     pulumi.String("adminuser"),
//				AdminSshKeys: compute.LinuxVirtualMachineScaleSetAdminSshKeyArray{
//					&compute.LinuxVirtualMachineScaleSetAdminSshKeyArgs{
//						Username:  pulumi.String("adminuser"),
//						PublicKey: readFileOrPanic("~/.ssh/id_rsa.pub"),
//					},
//				},
//				SourceImageReference: &compute.LinuxVirtualMachineScaleSetSourceImageReferenceArgs{
//					Publisher: pulumi.String("Canonical"),
//					Offer:     pulumi.String("0001-com-ubuntu-server-jammy"),
//					Sku:       pulumi.String("22_04-lts"),
//					Version:   pulumi.String("latest"),
//				},
//				OsDisk: &compute.LinuxVirtualMachineScaleSetOsDiskArgs{
//					StorageAccountType: pulumi.String("Standard_LRS"),
//					Caching:            pulumi.String("ReadWrite"),
//				},
//				NetworkInterfaces: compute.LinuxVirtualMachineScaleSetNetworkInterfaceArray{
//					&compute.LinuxVirtualMachineScaleSetNetworkInterfaceArgs{
//						Name:    pulumi.String("example"),
//						Primary: pulumi.Bool(true),
//						IpConfigurations: compute.LinuxVirtualMachineScaleSetNetworkInterfaceIpConfigurationArray{
//							&compute.LinuxVirtualMachineScaleSetNetworkInterfaceIpConfigurationArgs{
//								Name:     pulumi.String("internal"),
//								Primary:  pulumi.Bool(true),
//								SubnetId: internal.ID(),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleAssessmentPolicy, err := securitycenter.NewAssessmentPolicy(ctx, "exampleAssessmentPolicy", &securitycenter.AssessmentPolicyArgs{
//				DisplayName: pulumi.String("Test Display Name"),
//				Severity:    pulumi.String("Medium"),
//				Description: pulumi.String("Test Description"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = securitycenter.NewAssessment(ctx, "exampleAssessment", &securitycenter.AssessmentArgs{
//				AssessmentPolicyId: exampleAssessmentPolicy.ID(),
//				TargetResourceId:   exampleLinuxVirtualMachineScaleSet.ID(),
//				Status: &securitycenter.AssessmentStatusArgs{
//					Code: pulumi.String("Healthy"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Security Assessment can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:securitycenter/assessment:Assessment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/providers/Microsoft.Security/assessments/00000000-0000-0000-0000-000000000000
//
// ```
type Assessment struct {
	pulumi.CustomResourceState

	// A map of additional data to associate with the assessment.
	AdditionalData pulumi.StringMapOutput `pulumi:"additionalData"`
	// The ID of the security Assessment policy to apply to this resource. Changing this forces a new security Assessment to be created.
	AssessmentPolicyId pulumi.StringOutput `pulumi:"assessmentPolicyId"`
	// A `status` block as defined below.
	Status AssessmentStatusOutput `pulumi:"status"`
	// The ID of the target resource. Changing this forces a new security Assessment to be created.
	TargetResourceId pulumi.StringOutput `pulumi:"targetResourceId"`
}

// NewAssessment registers a new resource with the given unique name, arguments, and options.
func NewAssessment(ctx *pulumi.Context,
	name string, args *AssessmentArgs, opts ...pulumi.ResourceOption) (*Assessment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AssessmentPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'AssessmentPolicyId'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	if args.TargetResourceId == nil {
		return nil, errors.New("invalid value for required argument 'TargetResourceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Assessment
	err := ctx.RegisterResource("azure:securitycenter/assessment:Assessment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssessment gets an existing Assessment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssessment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssessmentState, opts ...pulumi.ResourceOption) (*Assessment, error) {
	var resource Assessment
	err := ctx.ReadResource("azure:securitycenter/assessment:Assessment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Assessment resources.
type assessmentState struct {
	// A map of additional data to associate with the assessment.
	AdditionalData map[string]string `pulumi:"additionalData"`
	// The ID of the security Assessment policy to apply to this resource. Changing this forces a new security Assessment to be created.
	AssessmentPolicyId *string `pulumi:"assessmentPolicyId"`
	// A `status` block as defined below.
	Status *AssessmentStatus `pulumi:"status"`
	// The ID of the target resource. Changing this forces a new security Assessment to be created.
	TargetResourceId *string `pulumi:"targetResourceId"`
}

type AssessmentState struct {
	// A map of additional data to associate with the assessment.
	AdditionalData pulumi.StringMapInput
	// The ID of the security Assessment policy to apply to this resource. Changing this forces a new security Assessment to be created.
	AssessmentPolicyId pulumi.StringPtrInput
	// A `status` block as defined below.
	Status AssessmentStatusPtrInput
	// The ID of the target resource. Changing this forces a new security Assessment to be created.
	TargetResourceId pulumi.StringPtrInput
}

func (AssessmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*assessmentState)(nil)).Elem()
}

type assessmentArgs struct {
	// A map of additional data to associate with the assessment.
	AdditionalData map[string]string `pulumi:"additionalData"`
	// The ID of the security Assessment policy to apply to this resource. Changing this forces a new security Assessment to be created.
	AssessmentPolicyId string `pulumi:"assessmentPolicyId"`
	// A `status` block as defined below.
	Status AssessmentStatus `pulumi:"status"`
	// The ID of the target resource. Changing this forces a new security Assessment to be created.
	TargetResourceId string `pulumi:"targetResourceId"`
}

// The set of arguments for constructing a Assessment resource.
type AssessmentArgs struct {
	// A map of additional data to associate with the assessment.
	AdditionalData pulumi.StringMapInput
	// The ID of the security Assessment policy to apply to this resource. Changing this forces a new security Assessment to be created.
	AssessmentPolicyId pulumi.StringInput
	// A `status` block as defined below.
	Status AssessmentStatusInput
	// The ID of the target resource. Changing this forces a new security Assessment to be created.
	TargetResourceId pulumi.StringInput
}

func (AssessmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assessmentArgs)(nil)).Elem()
}

type AssessmentInput interface {
	pulumi.Input

	ToAssessmentOutput() AssessmentOutput
	ToAssessmentOutputWithContext(ctx context.Context) AssessmentOutput
}

func (*Assessment) ElementType() reflect.Type {
	return reflect.TypeOf((**Assessment)(nil)).Elem()
}

func (i *Assessment) ToAssessmentOutput() AssessmentOutput {
	return i.ToAssessmentOutputWithContext(context.Background())
}

func (i *Assessment) ToAssessmentOutputWithContext(ctx context.Context) AssessmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentOutput)
}

// AssessmentArrayInput is an input type that accepts AssessmentArray and AssessmentArrayOutput values.
// You can construct a concrete instance of `AssessmentArrayInput` via:
//
//	AssessmentArray{ AssessmentArgs{...} }
type AssessmentArrayInput interface {
	pulumi.Input

	ToAssessmentArrayOutput() AssessmentArrayOutput
	ToAssessmentArrayOutputWithContext(context.Context) AssessmentArrayOutput
}

type AssessmentArray []AssessmentInput

func (AssessmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Assessment)(nil)).Elem()
}

func (i AssessmentArray) ToAssessmentArrayOutput() AssessmentArrayOutput {
	return i.ToAssessmentArrayOutputWithContext(context.Background())
}

func (i AssessmentArray) ToAssessmentArrayOutputWithContext(ctx context.Context) AssessmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentArrayOutput)
}

// AssessmentMapInput is an input type that accepts AssessmentMap and AssessmentMapOutput values.
// You can construct a concrete instance of `AssessmentMapInput` via:
//
//	AssessmentMap{ "key": AssessmentArgs{...} }
type AssessmentMapInput interface {
	pulumi.Input

	ToAssessmentMapOutput() AssessmentMapOutput
	ToAssessmentMapOutputWithContext(context.Context) AssessmentMapOutput
}

type AssessmentMap map[string]AssessmentInput

func (AssessmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Assessment)(nil)).Elem()
}

func (i AssessmentMap) ToAssessmentMapOutput() AssessmentMapOutput {
	return i.ToAssessmentMapOutputWithContext(context.Background())
}

func (i AssessmentMap) ToAssessmentMapOutputWithContext(ctx context.Context) AssessmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentMapOutput)
}

type AssessmentOutput struct{ *pulumi.OutputState }

func (AssessmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Assessment)(nil)).Elem()
}

func (o AssessmentOutput) ToAssessmentOutput() AssessmentOutput {
	return o
}

func (o AssessmentOutput) ToAssessmentOutputWithContext(ctx context.Context) AssessmentOutput {
	return o
}

// A map of additional data to associate with the assessment.
func (o AssessmentOutput) AdditionalData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Assessment) pulumi.StringMapOutput { return v.AdditionalData }).(pulumi.StringMapOutput)
}

// The ID of the security Assessment policy to apply to this resource. Changing this forces a new security Assessment to be created.
func (o AssessmentOutput) AssessmentPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Assessment) pulumi.StringOutput { return v.AssessmentPolicyId }).(pulumi.StringOutput)
}

// A `status` block as defined below.
func (o AssessmentOutput) Status() AssessmentStatusOutput {
	return o.ApplyT(func(v *Assessment) AssessmentStatusOutput { return v.Status }).(AssessmentStatusOutput)
}

// The ID of the target resource. Changing this forces a new security Assessment to be created.
func (o AssessmentOutput) TargetResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Assessment) pulumi.StringOutput { return v.TargetResourceId }).(pulumi.StringOutput)
}

type AssessmentArrayOutput struct{ *pulumi.OutputState }

func (AssessmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Assessment)(nil)).Elem()
}

func (o AssessmentArrayOutput) ToAssessmentArrayOutput() AssessmentArrayOutput {
	return o
}

func (o AssessmentArrayOutput) ToAssessmentArrayOutputWithContext(ctx context.Context) AssessmentArrayOutput {
	return o
}

func (o AssessmentArrayOutput) Index(i pulumi.IntInput) AssessmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Assessment {
		return vs[0].([]*Assessment)[vs[1].(int)]
	}).(AssessmentOutput)
}

type AssessmentMapOutput struct{ *pulumi.OutputState }

func (AssessmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Assessment)(nil)).Elem()
}

func (o AssessmentMapOutput) ToAssessmentMapOutput() AssessmentMapOutput {
	return o
}

func (o AssessmentMapOutput) ToAssessmentMapOutputWithContext(ctx context.Context) AssessmentMapOutput {
	return o
}

func (o AssessmentMapOutput) MapIndex(k pulumi.StringInput) AssessmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Assessment {
		return vs[0].(map[string]*Assessment)[vs[1].(string)]
	}).(AssessmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AssessmentInput)(nil)).Elem(), &Assessment{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssessmentArrayInput)(nil)).Elem(), AssessmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssessmentMapInput)(nil)).Elem(), AssessmentMap{})
	pulumi.RegisterOutputType(AssessmentOutput{})
	pulumi.RegisterOutputType(AssessmentArrayOutput{})
	pulumi.RegisterOutputType(AssessmentMapOutput{})
}
