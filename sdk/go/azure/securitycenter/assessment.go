// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package securitycenter

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages the Security Center Assessment for Azure Security Center.
//
// ## Import
//
// Security Assessment can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:securitycenter/assessment:Assessment example /subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resGroup1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/providers/Microsoft.Security/assessments/00000000-0000-0000-0000-000000000000
// ```
type Assessment struct {
	pulumi.CustomResourceState

	// A map of additional data to associate with the assessment.
	AdditionalData pulumi.StringMapOutput `pulumi:"additionalData"`
	// The ID of the security Assessment policy to apply to this resource. Changing this forces a new security Assessment to be created.
	AssessmentPolicyId pulumi.StringOutput `pulumi:"assessmentPolicyId"`
	// A `status` block as defined below.
	Status AssessmentStatusOutput `pulumi:"status"`
	// The ID of the target resource. Changing this forces a new security Assessment to be created.
	TargetResourceId pulumi.StringOutput `pulumi:"targetResourceId"`
}

// NewAssessment registers a new resource with the given unique name, arguments, and options.
func NewAssessment(ctx *pulumi.Context,
	name string, args *AssessmentArgs, opts ...pulumi.ResourceOption) (*Assessment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AssessmentPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'AssessmentPolicyId'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	if args.TargetResourceId == nil {
		return nil, errors.New("invalid value for required argument 'TargetResourceId'")
	}
	var resource Assessment
	err := ctx.RegisterResource("azure:securitycenter/assessment:Assessment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssessment gets an existing Assessment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssessment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssessmentState, opts ...pulumi.ResourceOption) (*Assessment, error) {
	var resource Assessment
	err := ctx.ReadResource("azure:securitycenter/assessment:Assessment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Assessment resources.
type assessmentState struct {
	// A map of additional data to associate with the assessment.
	AdditionalData map[string]string `pulumi:"additionalData"`
	// The ID of the security Assessment policy to apply to this resource. Changing this forces a new security Assessment to be created.
	AssessmentPolicyId *string `pulumi:"assessmentPolicyId"`
	// A `status` block as defined below.
	Status *AssessmentStatus `pulumi:"status"`
	// The ID of the target resource. Changing this forces a new security Assessment to be created.
	TargetResourceId *string `pulumi:"targetResourceId"`
}

type AssessmentState struct {
	// A map of additional data to associate with the assessment.
	AdditionalData pulumi.StringMapInput
	// The ID of the security Assessment policy to apply to this resource. Changing this forces a new security Assessment to be created.
	AssessmentPolicyId pulumi.StringPtrInput
	// A `status` block as defined below.
	Status AssessmentStatusPtrInput
	// The ID of the target resource. Changing this forces a new security Assessment to be created.
	TargetResourceId pulumi.StringPtrInput
}

func (AssessmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*assessmentState)(nil)).Elem()
}

type assessmentArgs struct {
	// A map of additional data to associate with the assessment.
	AdditionalData map[string]string `pulumi:"additionalData"`
	// The ID of the security Assessment policy to apply to this resource. Changing this forces a new security Assessment to be created.
	AssessmentPolicyId string `pulumi:"assessmentPolicyId"`
	// A `status` block as defined below.
	Status AssessmentStatus `pulumi:"status"`
	// The ID of the target resource. Changing this forces a new security Assessment to be created.
	TargetResourceId string `pulumi:"targetResourceId"`
}

// The set of arguments for constructing a Assessment resource.
type AssessmentArgs struct {
	// A map of additional data to associate with the assessment.
	AdditionalData pulumi.StringMapInput
	// The ID of the security Assessment policy to apply to this resource. Changing this forces a new security Assessment to be created.
	AssessmentPolicyId pulumi.StringInput
	// A `status` block as defined below.
	Status AssessmentStatusInput
	// The ID of the target resource. Changing this forces a new security Assessment to be created.
	TargetResourceId pulumi.StringInput
}

func (AssessmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assessmentArgs)(nil)).Elem()
}

type AssessmentInput interface {
	pulumi.Input

	ToAssessmentOutput() AssessmentOutput
	ToAssessmentOutputWithContext(ctx context.Context) AssessmentOutput
}

func (*Assessment) ElementType() reflect.Type {
	return reflect.TypeOf((*Assessment)(nil))
}

func (i *Assessment) ToAssessmentOutput() AssessmentOutput {
	return i.ToAssessmentOutputWithContext(context.Background())
}

func (i *Assessment) ToAssessmentOutputWithContext(ctx context.Context) AssessmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentOutput)
}

func (i *Assessment) ToAssessmentPtrOutput() AssessmentPtrOutput {
	return i.ToAssessmentPtrOutputWithContext(context.Background())
}

func (i *Assessment) ToAssessmentPtrOutputWithContext(ctx context.Context) AssessmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentPtrOutput)
}

type AssessmentPtrInput interface {
	pulumi.Input

	ToAssessmentPtrOutput() AssessmentPtrOutput
	ToAssessmentPtrOutputWithContext(ctx context.Context) AssessmentPtrOutput
}

type assessmentPtrType AssessmentArgs

func (*assessmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Assessment)(nil))
}

func (i *assessmentPtrType) ToAssessmentPtrOutput() AssessmentPtrOutput {
	return i.ToAssessmentPtrOutputWithContext(context.Background())
}

func (i *assessmentPtrType) ToAssessmentPtrOutputWithContext(ctx context.Context) AssessmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentPtrOutput)
}

// AssessmentArrayInput is an input type that accepts AssessmentArray and AssessmentArrayOutput values.
// You can construct a concrete instance of `AssessmentArrayInput` via:
//
//          AssessmentArray{ AssessmentArgs{...} }
type AssessmentArrayInput interface {
	pulumi.Input

	ToAssessmentArrayOutput() AssessmentArrayOutput
	ToAssessmentArrayOutputWithContext(context.Context) AssessmentArrayOutput
}

type AssessmentArray []AssessmentInput

func (AssessmentArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Assessment)(nil))
}

func (i AssessmentArray) ToAssessmentArrayOutput() AssessmentArrayOutput {
	return i.ToAssessmentArrayOutputWithContext(context.Background())
}

func (i AssessmentArray) ToAssessmentArrayOutputWithContext(ctx context.Context) AssessmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentArrayOutput)
}

// AssessmentMapInput is an input type that accepts AssessmentMap and AssessmentMapOutput values.
// You can construct a concrete instance of `AssessmentMapInput` via:
//
//          AssessmentMap{ "key": AssessmentArgs{...} }
type AssessmentMapInput interface {
	pulumi.Input

	ToAssessmentMapOutput() AssessmentMapOutput
	ToAssessmentMapOutputWithContext(context.Context) AssessmentMapOutput
}

type AssessmentMap map[string]AssessmentInput

func (AssessmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Assessment)(nil))
}

func (i AssessmentMap) ToAssessmentMapOutput() AssessmentMapOutput {
	return i.ToAssessmentMapOutputWithContext(context.Background())
}

func (i AssessmentMap) ToAssessmentMapOutputWithContext(ctx context.Context) AssessmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentMapOutput)
}

type AssessmentOutput struct {
	*pulumi.OutputState
}

func (AssessmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Assessment)(nil))
}

func (o AssessmentOutput) ToAssessmentOutput() AssessmentOutput {
	return o
}

func (o AssessmentOutput) ToAssessmentOutputWithContext(ctx context.Context) AssessmentOutput {
	return o
}

func (o AssessmentOutput) ToAssessmentPtrOutput() AssessmentPtrOutput {
	return o.ToAssessmentPtrOutputWithContext(context.Background())
}

func (o AssessmentOutput) ToAssessmentPtrOutputWithContext(ctx context.Context) AssessmentPtrOutput {
	return o.ApplyT(func(v Assessment) *Assessment {
		return &v
	}).(AssessmentPtrOutput)
}

type AssessmentPtrOutput struct {
	*pulumi.OutputState
}

func (AssessmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Assessment)(nil))
}

func (o AssessmentPtrOutput) ToAssessmentPtrOutput() AssessmentPtrOutput {
	return o
}

func (o AssessmentPtrOutput) ToAssessmentPtrOutputWithContext(ctx context.Context) AssessmentPtrOutput {
	return o
}

type AssessmentArrayOutput struct{ *pulumi.OutputState }

func (AssessmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Assessment)(nil))
}

func (o AssessmentArrayOutput) ToAssessmentArrayOutput() AssessmentArrayOutput {
	return o
}

func (o AssessmentArrayOutput) ToAssessmentArrayOutputWithContext(ctx context.Context) AssessmentArrayOutput {
	return o
}

func (o AssessmentArrayOutput) Index(i pulumi.IntInput) AssessmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Assessment {
		return vs[0].([]Assessment)[vs[1].(int)]
	}).(AssessmentOutput)
}

type AssessmentMapOutput struct{ *pulumi.OutputState }

func (AssessmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Assessment)(nil))
}

func (o AssessmentMapOutput) ToAssessmentMapOutput() AssessmentMapOutput {
	return o
}

func (o AssessmentMapOutput) ToAssessmentMapOutputWithContext(ctx context.Context) AssessmentMapOutput {
	return o
}

func (o AssessmentMapOutput) MapIndex(k pulumi.StringInput) AssessmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Assessment {
		return vs[0].(map[string]Assessment)[vs[1].(string)]
	}).(AssessmentOutput)
}

func init() {
	pulumi.RegisterOutputType(AssessmentOutput{})
	pulumi.RegisterOutputType(AssessmentPtrOutput{})
	pulumi.RegisterOutputType(AssessmentArrayOutput{})
	pulumi.RegisterOutputType(AssessmentMapOutput{})
}
