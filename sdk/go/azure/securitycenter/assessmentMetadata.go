// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package securitycenter

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages the Security Center Assessment Metadata for Azure Security Center.
//
// > **NOTE:** This resource has been deprecated in favour of the `securitycenter.AssessmentPolicy` resource and will be removed in the next major version of the AzureRM Provider. The new resource shares the same fields as this one, and information on migrating across can be found in this guide.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/securitycenter"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := securitycenter.NewAssessmentMetadata(ctx, "example", &securitycenter.AssessmentMetadataArgs{
// 			Description: pulumi.String("Test Description"),
// 			DisplayName: pulumi.String("Test Display Name"),
// 			Severity:    pulumi.String("Medium"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Security Assessments Metadata can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:securitycenter/assessmentMetadata:AssessmentMetadata example /subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Security/assessmentMetadata/metadata1
// ```
type AssessmentMetadata struct {
	pulumi.CustomResourceState

	// The description of the Security Center Assessment.
	Description pulumi.StringOutput `pulumi:"description"`
	// The user-friendly display name of the Security Center Assessment.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The implementation effort which is used to remediate the Security Center Assessment. Possible values are `Low`, `Moderate` and `High`.
	ImplementationEffort pulumi.StringPtrOutput `pulumi:"implementationEffort"`
	// The GUID as the name of the Security Center Assessment Metadata.
	Name pulumi.StringOutput `pulumi:"name"`
	// The description which is used to mitigate the security issue.
	RemediationDescription pulumi.StringPtrOutput `pulumi:"remediationDescription"`
	// The severity level of the Security Center Assessment. Possible values are `Low`, `Medium` and `High`. Defaults to `Medium`.
	Severity pulumi.StringPtrOutput `pulumi:"severity"`
	// A list of the threat impacts for the Security Center Assessment. Possible values are `AccountBreach`, `DataExfiltration`, `DataSpillage`, `DenialOfService`, `ElevationOfPrivilege`, `MaliciousInsider`, `MissingCoverage` and `ThreatResistance`.
	Threats pulumi.StringArrayOutput `pulumi:"threats"`
	// The user impact of the Security Center Assessment. Possible values are `Low`, `Moderate` and `High`.
	UserImpact pulumi.StringPtrOutput `pulumi:"userImpact"`
}

// NewAssessmentMetadata registers a new resource with the given unique name, arguments, and options.
func NewAssessmentMetadata(ctx *pulumi.Context,
	name string, args *AssessmentMetadataArgs, opts ...pulumi.ResourceOption) (*AssessmentMetadata, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	var resource AssessmentMetadata
	err := ctx.RegisterResource("azure:securitycenter/assessmentMetadata:AssessmentMetadata", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssessmentMetadata gets an existing AssessmentMetadata resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssessmentMetadata(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssessmentMetadataState, opts ...pulumi.ResourceOption) (*AssessmentMetadata, error) {
	var resource AssessmentMetadata
	err := ctx.ReadResource("azure:securitycenter/assessmentMetadata:AssessmentMetadata", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AssessmentMetadata resources.
type assessmentMetadataState struct {
	// The description of the Security Center Assessment.
	Description *string `pulumi:"description"`
	// The user-friendly display name of the Security Center Assessment.
	DisplayName *string `pulumi:"displayName"`
	// The implementation effort which is used to remediate the Security Center Assessment. Possible values are `Low`, `Moderate` and `High`.
	ImplementationEffort *string `pulumi:"implementationEffort"`
	// The GUID as the name of the Security Center Assessment Metadata.
	Name *string `pulumi:"name"`
	// The description which is used to mitigate the security issue.
	RemediationDescription *string `pulumi:"remediationDescription"`
	// The severity level of the Security Center Assessment. Possible values are `Low`, `Medium` and `High`. Defaults to `Medium`.
	Severity *string `pulumi:"severity"`
	// A list of the threat impacts for the Security Center Assessment. Possible values are `AccountBreach`, `DataExfiltration`, `DataSpillage`, `DenialOfService`, `ElevationOfPrivilege`, `MaliciousInsider`, `MissingCoverage` and `ThreatResistance`.
	Threats []string `pulumi:"threats"`
	// The user impact of the Security Center Assessment. Possible values are `Low`, `Moderate` and `High`.
	UserImpact *string `pulumi:"userImpact"`
}

type AssessmentMetadataState struct {
	// The description of the Security Center Assessment.
	Description pulumi.StringPtrInput
	// The user-friendly display name of the Security Center Assessment.
	DisplayName pulumi.StringPtrInput
	// The implementation effort which is used to remediate the Security Center Assessment. Possible values are `Low`, `Moderate` and `High`.
	ImplementationEffort pulumi.StringPtrInput
	// The GUID as the name of the Security Center Assessment Metadata.
	Name pulumi.StringPtrInput
	// The description which is used to mitigate the security issue.
	RemediationDescription pulumi.StringPtrInput
	// The severity level of the Security Center Assessment. Possible values are `Low`, `Medium` and `High`. Defaults to `Medium`.
	Severity pulumi.StringPtrInput
	// A list of the threat impacts for the Security Center Assessment. Possible values are `AccountBreach`, `DataExfiltration`, `DataSpillage`, `DenialOfService`, `ElevationOfPrivilege`, `MaliciousInsider`, `MissingCoverage` and `ThreatResistance`.
	Threats pulumi.StringArrayInput
	// The user impact of the Security Center Assessment. Possible values are `Low`, `Moderate` and `High`.
	UserImpact pulumi.StringPtrInput
}

func (AssessmentMetadataState) ElementType() reflect.Type {
	return reflect.TypeOf((*assessmentMetadataState)(nil)).Elem()
}

type assessmentMetadataArgs struct {
	// The description of the Security Center Assessment.
	Description string `pulumi:"description"`
	// The user-friendly display name of the Security Center Assessment.
	DisplayName string `pulumi:"displayName"`
	// The implementation effort which is used to remediate the Security Center Assessment. Possible values are `Low`, `Moderate` and `High`.
	ImplementationEffort *string `pulumi:"implementationEffort"`
	// The description which is used to mitigate the security issue.
	RemediationDescription *string `pulumi:"remediationDescription"`
	// The severity level of the Security Center Assessment. Possible values are `Low`, `Medium` and `High`. Defaults to `Medium`.
	Severity *string `pulumi:"severity"`
	// A list of the threat impacts for the Security Center Assessment. Possible values are `AccountBreach`, `DataExfiltration`, `DataSpillage`, `DenialOfService`, `ElevationOfPrivilege`, `MaliciousInsider`, `MissingCoverage` and `ThreatResistance`.
	Threats []string `pulumi:"threats"`
	// The user impact of the Security Center Assessment. Possible values are `Low`, `Moderate` and `High`.
	UserImpact *string `pulumi:"userImpact"`
}

// The set of arguments for constructing a AssessmentMetadata resource.
type AssessmentMetadataArgs struct {
	// The description of the Security Center Assessment.
	Description pulumi.StringInput
	// The user-friendly display name of the Security Center Assessment.
	DisplayName pulumi.StringInput
	// The implementation effort which is used to remediate the Security Center Assessment. Possible values are `Low`, `Moderate` and `High`.
	ImplementationEffort pulumi.StringPtrInput
	// The description which is used to mitigate the security issue.
	RemediationDescription pulumi.StringPtrInput
	// The severity level of the Security Center Assessment. Possible values are `Low`, `Medium` and `High`. Defaults to `Medium`.
	Severity pulumi.StringPtrInput
	// A list of the threat impacts for the Security Center Assessment. Possible values are `AccountBreach`, `DataExfiltration`, `DataSpillage`, `DenialOfService`, `ElevationOfPrivilege`, `MaliciousInsider`, `MissingCoverage` and `ThreatResistance`.
	Threats pulumi.StringArrayInput
	// The user impact of the Security Center Assessment. Possible values are `Low`, `Moderate` and `High`.
	UserImpact pulumi.StringPtrInput
}

func (AssessmentMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assessmentMetadataArgs)(nil)).Elem()
}

type AssessmentMetadataInput interface {
	pulumi.Input

	ToAssessmentMetadataOutput() AssessmentMetadataOutput
	ToAssessmentMetadataOutputWithContext(ctx context.Context) AssessmentMetadataOutput
}

func (*AssessmentMetadata) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentMetadata)(nil))
}

func (i *AssessmentMetadata) ToAssessmentMetadataOutput() AssessmentMetadataOutput {
	return i.ToAssessmentMetadataOutputWithContext(context.Background())
}

func (i *AssessmentMetadata) ToAssessmentMetadataOutputWithContext(ctx context.Context) AssessmentMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentMetadataOutput)
}

func (i *AssessmentMetadata) ToAssessmentMetadataPtrOutput() AssessmentMetadataPtrOutput {
	return i.ToAssessmentMetadataPtrOutputWithContext(context.Background())
}

func (i *AssessmentMetadata) ToAssessmentMetadataPtrOutputWithContext(ctx context.Context) AssessmentMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentMetadataPtrOutput)
}

type AssessmentMetadataPtrInput interface {
	pulumi.Input

	ToAssessmentMetadataPtrOutput() AssessmentMetadataPtrOutput
	ToAssessmentMetadataPtrOutputWithContext(ctx context.Context) AssessmentMetadataPtrOutput
}

type assessmentMetadataPtrType AssessmentMetadataArgs

func (*assessmentMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentMetadata)(nil))
}

func (i *assessmentMetadataPtrType) ToAssessmentMetadataPtrOutput() AssessmentMetadataPtrOutput {
	return i.ToAssessmentMetadataPtrOutputWithContext(context.Background())
}

func (i *assessmentMetadataPtrType) ToAssessmentMetadataPtrOutputWithContext(ctx context.Context) AssessmentMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentMetadataPtrOutput)
}

// AssessmentMetadataArrayInput is an input type that accepts AssessmentMetadataArray and AssessmentMetadataArrayOutput values.
// You can construct a concrete instance of `AssessmentMetadataArrayInput` via:
//
//          AssessmentMetadataArray{ AssessmentMetadataArgs{...} }
type AssessmentMetadataArrayInput interface {
	pulumi.Input

	ToAssessmentMetadataArrayOutput() AssessmentMetadataArrayOutput
	ToAssessmentMetadataArrayOutputWithContext(context.Context) AssessmentMetadataArrayOutput
}

type AssessmentMetadataArray []AssessmentMetadataInput

func (AssessmentMetadataArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*AssessmentMetadata)(nil))
}

func (i AssessmentMetadataArray) ToAssessmentMetadataArrayOutput() AssessmentMetadataArrayOutput {
	return i.ToAssessmentMetadataArrayOutputWithContext(context.Background())
}

func (i AssessmentMetadataArray) ToAssessmentMetadataArrayOutputWithContext(ctx context.Context) AssessmentMetadataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentMetadataArrayOutput)
}

// AssessmentMetadataMapInput is an input type that accepts AssessmentMetadataMap and AssessmentMetadataMapOutput values.
// You can construct a concrete instance of `AssessmentMetadataMapInput` via:
//
//          AssessmentMetadataMap{ "key": AssessmentMetadataArgs{...} }
type AssessmentMetadataMapInput interface {
	pulumi.Input

	ToAssessmentMetadataMapOutput() AssessmentMetadataMapOutput
	ToAssessmentMetadataMapOutputWithContext(context.Context) AssessmentMetadataMapOutput
}

type AssessmentMetadataMap map[string]AssessmentMetadataInput

func (AssessmentMetadataMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*AssessmentMetadata)(nil))
}

func (i AssessmentMetadataMap) ToAssessmentMetadataMapOutput() AssessmentMetadataMapOutput {
	return i.ToAssessmentMetadataMapOutputWithContext(context.Background())
}

func (i AssessmentMetadataMap) ToAssessmentMetadataMapOutputWithContext(ctx context.Context) AssessmentMetadataMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentMetadataMapOutput)
}

type AssessmentMetadataOutput struct {
	*pulumi.OutputState
}

func (AssessmentMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentMetadata)(nil))
}

func (o AssessmentMetadataOutput) ToAssessmentMetadataOutput() AssessmentMetadataOutput {
	return o
}

func (o AssessmentMetadataOutput) ToAssessmentMetadataOutputWithContext(ctx context.Context) AssessmentMetadataOutput {
	return o
}

func (o AssessmentMetadataOutput) ToAssessmentMetadataPtrOutput() AssessmentMetadataPtrOutput {
	return o.ToAssessmentMetadataPtrOutputWithContext(context.Background())
}

func (o AssessmentMetadataOutput) ToAssessmentMetadataPtrOutputWithContext(ctx context.Context) AssessmentMetadataPtrOutput {
	return o.ApplyT(func(v AssessmentMetadata) *AssessmentMetadata {
		return &v
	}).(AssessmentMetadataPtrOutput)
}

type AssessmentMetadataPtrOutput struct {
	*pulumi.OutputState
}

func (AssessmentMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentMetadata)(nil))
}

func (o AssessmentMetadataPtrOutput) ToAssessmentMetadataPtrOutput() AssessmentMetadataPtrOutput {
	return o
}

func (o AssessmentMetadataPtrOutput) ToAssessmentMetadataPtrOutputWithContext(ctx context.Context) AssessmentMetadataPtrOutput {
	return o
}

type AssessmentMetadataArrayOutput struct{ *pulumi.OutputState }

func (AssessmentMetadataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssessmentMetadata)(nil))
}

func (o AssessmentMetadataArrayOutput) ToAssessmentMetadataArrayOutput() AssessmentMetadataArrayOutput {
	return o
}

func (o AssessmentMetadataArrayOutput) ToAssessmentMetadataArrayOutputWithContext(ctx context.Context) AssessmentMetadataArrayOutput {
	return o
}

func (o AssessmentMetadataArrayOutput) Index(i pulumi.IntInput) AssessmentMetadataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssessmentMetadata {
		return vs[0].([]AssessmentMetadata)[vs[1].(int)]
	}).(AssessmentMetadataOutput)
}

type AssessmentMetadataMapOutput struct{ *pulumi.OutputState }

func (AssessmentMetadataMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AssessmentMetadata)(nil))
}

func (o AssessmentMetadataMapOutput) ToAssessmentMetadataMapOutput() AssessmentMetadataMapOutput {
	return o
}

func (o AssessmentMetadataMapOutput) ToAssessmentMetadataMapOutputWithContext(ctx context.Context) AssessmentMetadataMapOutput {
	return o
}

func (o AssessmentMetadataMapOutput) MapIndex(k pulumi.StringInput) AssessmentMetadataOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AssessmentMetadata {
		return vs[0].(map[string]AssessmentMetadata)[vs[1].(string)]
	}).(AssessmentMetadataOutput)
}

func init() {
	pulumi.RegisterOutputType(AssessmentMetadataOutput{})
	pulumi.RegisterOutputType(AssessmentMetadataPtrOutput{})
	pulumi.RegisterOutputType(AssessmentMetadataArrayOutput{})
	pulumi.RegisterOutputType(AssessmentMetadataMapOutput{})
}
