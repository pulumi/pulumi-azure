// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package securitycenter

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages the subscription's Security Center Contact.
// 
// ~> **NOTE:** Owner access permission is required. 
type Contact struct {
	s *pulumi.ResourceState
}

// NewContact registers a new resource with the given unique name, arguments, and options.
func NewContact(ctx *pulumi.Context,
	name string, args *ContactArgs, opts ...pulumi.ResourceOpt) (*Contact, error) {
	if args == nil || args.AlertNotifications == nil {
		return nil, errors.New("missing required argument 'AlertNotifications'")
	}
	if args == nil || args.AlertsToAdmins == nil {
		return nil, errors.New("missing required argument 'AlertsToAdmins'")
	}
	if args == nil || args.Email == nil {
		return nil, errors.New("missing required argument 'Email'")
	}
	if args == nil || args.Phone == nil {
		return nil, errors.New("missing required argument 'Phone'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["alertNotifications"] = nil
		inputs["alertsToAdmins"] = nil
		inputs["email"] = nil
		inputs["phone"] = nil
	} else {
		inputs["alertNotifications"] = args.AlertNotifications
		inputs["alertsToAdmins"] = args.AlertsToAdmins
		inputs["email"] = args.Email
		inputs["phone"] = args.Phone
	}
	s, err := ctx.RegisterResource("azure:securitycenter/contact:Contact", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Contact{s: s}, nil
}

// GetContact gets an existing Contact resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContact(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ContactState, opts ...pulumi.ResourceOpt) (*Contact, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["alertNotifications"] = state.AlertNotifications
		inputs["alertsToAdmins"] = state.AlertsToAdmins
		inputs["email"] = state.Email
		inputs["phone"] = state.Phone
	}
	s, err := ctx.ReadResource("azure:securitycenter/contact:Contact", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Contact{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Contact) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Contact) ID() *pulumi.IDOutput {
	return r.s.ID
}

// Whether to send security alerts notifications to the security contact.
func (r *Contact) AlertNotifications() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["alertNotifications"])
}

// Whether to send security alerts notifications to subscription admins.
func (r *Contact) AlertsToAdmins() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["alertsToAdmins"])
}

// The email of the Security Center Contact.
func (r *Contact) Email() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["email"])
}

// The phone number of the Security Center Contact.
func (r *Contact) Phone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["phone"])
}

// Input properties used for looking up and filtering Contact resources.
type ContactState struct {
	// Whether to send security alerts notifications to the security contact.
	AlertNotifications interface{}
	// Whether to send security alerts notifications to subscription admins.
	AlertsToAdmins interface{}
	// The email of the Security Center Contact.
	Email interface{}
	// The phone number of the Security Center Contact.
	Phone interface{}
}

// The set of arguments for constructing a Contact resource.
type ContactArgs struct {
	// Whether to send security alerts notifications to the security contact.
	AlertNotifications interface{}
	// Whether to send security alerts notifications to subscription admins.
	AlertsToAdmins interface{}
	// The email of the Security Center Contact.
	Email interface{}
	// The phone number of the Security Center Contact.
	Phone interface{}
}
