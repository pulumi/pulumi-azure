// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package securitycenter

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AssessmentStatus struct {
	// Specifies the cause of the assessment status.
	Cause *string `pulumi:"cause"`
	// Specifies the programmatic code of the assessment status. Possible values are `Healthy`, `Unhealthy` and `NotApplicable`.
	Code string `pulumi:"code"`
	// Specifies the human readable description of the assessment status.
	Description *string `pulumi:"description"`
}

// AssessmentStatusInput is an input type that accepts AssessmentStatusArgs and AssessmentStatusOutput values.
// You can construct a concrete instance of `AssessmentStatusInput` via:
//
//          AssessmentStatusArgs{...}
type AssessmentStatusInput interface {
	pulumi.Input

	ToAssessmentStatusOutput() AssessmentStatusOutput
	ToAssessmentStatusOutputWithContext(context.Context) AssessmentStatusOutput
}

type AssessmentStatusArgs struct {
	// Specifies the cause of the assessment status.
	Cause pulumi.StringPtrInput `pulumi:"cause"`
	// Specifies the programmatic code of the assessment status. Possible values are `Healthy`, `Unhealthy` and `NotApplicable`.
	Code pulumi.StringInput `pulumi:"code"`
	// Specifies the human readable description of the assessment status.
	Description pulumi.StringPtrInput `pulumi:"description"`
}

func (AssessmentStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentStatus)(nil)).Elem()
}

func (i AssessmentStatusArgs) ToAssessmentStatusOutput() AssessmentStatusOutput {
	return i.ToAssessmentStatusOutputWithContext(context.Background())
}

func (i AssessmentStatusArgs) ToAssessmentStatusOutputWithContext(ctx context.Context) AssessmentStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentStatusOutput)
}

func (i AssessmentStatusArgs) ToAssessmentStatusPtrOutput() AssessmentStatusPtrOutput {
	return i.ToAssessmentStatusPtrOutputWithContext(context.Background())
}

func (i AssessmentStatusArgs) ToAssessmentStatusPtrOutputWithContext(ctx context.Context) AssessmentStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentStatusOutput).ToAssessmentStatusPtrOutputWithContext(ctx)
}

// AssessmentStatusPtrInput is an input type that accepts AssessmentStatusArgs, AssessmentStatusPtr and AssessmentStatusPtrOutput values.
// You can construct a concrete instance of `AssessmentStatusPtrInput` via:
//
//          AssessmentStatusArgs{...}
//
//  or:
//
//          nil
type AssessmentStatusPtrInput interface {
	pulumi.Input

	ToAssessmentStatusPtrOutput() AssessmentStatusPtrOutput
	ToAssessmentStatusPtrOutputWithContext(context.Context) AssessmentStatusPtrOutput
}

type assessmentStatusPtrType AssessmentStatusArgs

func AssessmentStatusPtr(v *AssessmentStatusArgs) AssessmentStatusPtrInput {
	return (*assessmentStatusPtrType)(v)
}

func (*assessmentStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentStatus)(nil)).Elem()
}

func (i *assessmentStatusPtrType) ToAssessmentStatusPtrOutput() AssessmentStatusPtrOutput {
	return i.ToAssessmentStatusPtrOutputWithContext(context.Background())
}

func (i *assessmentStatusPtrType) ToAssessmentStatusPtrOutputWithContext(ctx context.Context) AssessmentStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentStatusPtrOutput)
}

type AssessmentStatusOutput struct{ *pulumi.OutputState }

func (AssessmentStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentStatus)(nil)).Elem()
}

func (o AssessmentStatusOutput) ToAssessmentStatusOutput() AssessmentStatusOutput {
	return o
}

func (o AssessmentStatusOutput) ToAssessmentStatusOutputWithContext(ctx context.Context) AssessmentStatusOutput {
	return o
}

func (o AssessmentStatusOutput) ToAssessmentStatusPtrOutput() AssessmentStatusPtrOutput {
	return o.ToAssessmentStatusPtrOutputWithContext(context.Background())
}

func (o AssessmentStatusOutput) ToAssessmentStatusPtrOutputWithContext(ctx context.Context) AssessmentStatusPtrOutput {
	return o.ApplyT(func(v AssessmentStatus) *AssessmentStatus {
		return &v
	}).(AssessmentStatusPtrOutput)
}

// Specifies the cause of the assessment status.
func (o AssessmentStatusOutput) Cause() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssessmentStatus) *string { return v.Cause }).(pulumi.StringPtrOutput)
}

// Specifies the programmatic code of the assessment status. Possible values are `Healthy`, `Unhealthy` and `NotApplicable`.
func (o AssessmentStatusOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v AssessmentStatus) string { return v.Code }).(pulumi.StringOutput)
}

// Specifies the human readable description of the assessment status.
func (o AssessmentStatusOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssessmentStatus) *string { return v.Description }).(pulumi.StringPtrOutput)
}

type AssessmentStatusPtrOutput struct{ *pulumi.OutputState }

func (AssessmentStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentStatus)(nil)).Elem()
}

func (o AssessmentStatusPtrOutput) ToAssessmentStatusPtrOutput() AssessmentStatusPtrOutput {
	return o
}

func (o AssessmentStatusPtrOutput) ToAssessmentStatusPtrOutputWithContext(ctx context.Context) AssessmentStatusPtrOutput {
	return o
}

func (o AssessmentStatusPtrOutput) Elem() AssessmentStatusOutput {
	return o.ApplyT(func(v *AssessmentStatus) AssessmentStatus { return *v }).(AssessmentStatusOutput)
}

// Specifies the cause of the assessment status.
func (o AssessmentStatusPtrOutput) Cause() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssessmentStatus) *string {
		if v == nil {
			return nil
		}
		return v.Cause
	}).(pulumi.StringPtrOutput)
}

// Specifies the programmatic code of the assessment status. Possible values are `Healthy`, `Unhealthy` and `NotApplicable`.
func (o AssessmentStatusPtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssessmentStatus) *string {
		if v == nil {
			return nil
		}
		return &v.Code
	}).(pulumi.StringPtrOutput)
}

// Specifies the human readable description of the assessment status.
func (o AssessmentStatusPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssessmentStatus) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

type AutomationAction struct {
	// A connection string to send data to the target Event Hub namespace, this should include a key with send permissions.
	ConnectionString *string `pulumi:"connectionString"`
	// The resource id of the target Logic App, Event Hub namespace or Log Analytics workspace.
	ResourceId string `pulumi:"resourceId"`
	// The callback URL to trigger the Logic App that will receive and process data sent by this automation. This can be found in the Azure Portal under "See trigger history"
	TriggerUrl *string `pulumi:"triggerUrl"`
	// Type of Azure resource to send data to. Must be set to one of: `LogicApp`, `EventHub` or `LogAnalytics`.
	Type string `pulumi:"type"`
}

// AutomationActionInput is an input type that accepts AutomationActionArgs and AutomationActionOutput values.
// You can construct a concrete instance of `AutomationActionInput` via:
//
//          AutomationActionArgs{...}
type AutomationActionInput interface {
	pulumi.Input

	ToAutomationActionOutput() AutomationActionOutput
	ToAutomationActionOutputWithContext(context.Context) AutomationActionOutput
}

type AutomationActionArgs struct {
	// A connection string to send data to the target Event Hub namespace, this should include a key with send permissions.
	ConnectionString pulumi.StringPtrInput `pulumi:"connectionString"`
	// The resource id of the target Logic App, Event Hub namespace or Log Analytics workspace.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// The callback URL to trigger the Logic App that will receive and process data sent by this automation. This can be found in the Azure Portal under "See trigger history"
	TriggerUrl pulumi.StringPtrInput `pulumi:"triggerUrl"`
	// Type of Azure resource to send data to. Must be set to one of: `LogicApp`, `EventHub` or `LogAnalytics`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AutomationActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationAction)(nil)).Elem()
}

func (i AutomationActionArgs) ToAutomationActionOutput() AutomationActionOutput {
	return i.ToAutomationActionOutputWithContext(context.Background())
}

func (i AutomationActionArgs) ToAutomationActionOutputWithContext(ctx context.Context) AutomationActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationActionOutput)
}

// AutomationActionArrayInput is an input type that accepts AutomationActionArray and AutomationActionArrayOutput values.
// You can construct a concrete instance of `AutomationActionArrayInput` via:
//
//          AutomationActionArray{ AutomationActionArgs{...} }
type AutomationActionArrayInput interface {
	pulumi.Input

	ToAutomationActionArrayOutput() AutomationActionArrayOutput
	ToAutomationActionArrayOutputWithContext(context.Context) AutomationActionArrayOutput
}

type AutomationActionArray []AutomationActionInput

func (AutomationActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationAction)(nil)).Elem()
}

func (i AutomationActionArray) ToAutomationActionArrayOutput() AutomationActionArrayOutput {
	return i.ToAutomationActionArrayOutputWithContext(context.Background())
}

func (i AutomationActionArray) ToAutomationActionArrayOutputWithContext(ctx context.Context) AutomationActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationActionArrayOutput)
}

type AutomationActionOutput struct{ *pulumi.OutputState }

func (AutomationActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationAction)(nil)).Elem()
}

func (o AutomationActionOutput) ToAutomationActionOutput() AutomationActionOutput {
	return o
}

func (o AutomationActionOutput) ToAutomationActionOutputWithContext(ctx context.Context) AutomationActionOutput {
	return o
}

// A connection string to send data to the target Event Hub namespace, this should include a key with send permissions.
func (o AutomationActionOutput) ConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationAction) *string { return v.ConnectionString }).(pulumi.StringPtrOutput)
}

// The resource id of the target Logic App, Event Hub namespace or Log Analytics workspace.
func (o AutomationActionOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationAction) string { return v.ResourceId }).(pulumi.StringOutput)
}

// The callback URL to trigger the Logic App that will receive and process data sent by this automation. This can be found in the Azure Portal under "See trigger history"
func (o AutomationActionOutput) TriggerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationAction) *string { return v.TriggerUrl }).(pulumi.StringPtrOutput)
}

// Type of Azure resource to send data to. Must be set to one of: `LogicApp`, `EventHub` or `LogAnalytics`.
func (o AutomationActionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationAction) string { return v.Type }).(pulumi.StringOutput)
}

type AutomationActionArrayOutput struct{ *pulumi.OutputState }

func (AutomationActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationAction)(nil)).Elem()
}

func (o AutomationActionArrayOutput) ToAutomationActionArrayOutput() AutomationActionArrayOutput {
	return o
}

func (o AutomationActionArrayOutput) ToAutomationActionArrayOutputWithContext(ctx context.Context) AutomationActionArrayOutput {
	return o
}

func (o AutomationActionArrayOutput) Index(i pulumi.IntInput) AutomationActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutomationAction {
		return vs[0].([]AutomationAction)[vs[1].(int)]
	}).(AutomationActionOutput)
}

type AutomationSource struct {
	// Type of data that will trigger this automation. Must be one of `Alerts`, `Assessments`, `SecureScoreControls`, `SecureScores` or `SubAssessments`. Note. assessments are also referred to as recommendations
	EventSource string `pulumi:"eventSource"`
	// A set of rules which evaluate upon event and data interception. This is defined in one or more `ruleSet` blocks as defined below.
	RuleSets []AutomationSourceRuleSet `pulumi:"ruleSets"`
}

// AutomationSourceInput is an input type that accepts AutomationSourceArgs and AutomationSourceOutput values.
// You can construct a concrete instance of `AutomationSourceInput` via:
//
//          AutomationSourceArgs{...}
type AutomationSourceInput interface {
	pulumi.Input

	ToAutomationSourceOutput() AutomationSourceOutput
	ToAutomationSourceOutputWithContext(context.Context) AutomationSourceOutput
}

type AutomationSourceArgs struct {
	// Type of data that will trigger this automation. Must be one of `Alerts`, `Assessments`, `SecureScoreControls`, `SecureScores` or `SubAssessments`. Note. assessments are also referred to as recommendations
	EventSource pulumi.StringInput `pulumi:"eventSource"`
	// A set of rules which evaluate upon event and data interception. This is defined in one or more `ruleSet` blocks as defined below.
	RuleSets AutomationSourceRuleSetArrayInput `pulumi:"ruleSets"`
}

func (AutomationSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationSource)(nil)).Elem()
}

func (i AutomationSourceArgs) ToAutomationSourceOutput() AutomationSourceOutput {
	return i.ToAutomationSourceOutputWithContext(context.Background())
}

func (i AutomationSourceArgs) ToAutomationSourceOutputWithContext(ctx context.Context) AutomationSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationSourceOutput)
}

// AutomationSourceArrayInput is an input type that accepts AutomationSourceArray and AutomationSourceArrayOutput values.
// You can construct a concrete instance of `AutomationSourceArrayInput` via:
//
//          AutomationSourceArray{ AutomationSourceArgs{...} }
type AutomationSourceArrayInput interface {
	pulumi.Input

	ToAutomationSourceArrayOutput() AutomationSourceArrayOutput
	ToAutomationSourceArrayOutputWithContext(context.Context) AutomationSourceArrayOutput
}

type AutomationSourceArray []AutomationSourceInput

func (AutomationSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationSource)(nil)).Elem()
}

func (i AutomationSourceArray) ToAutomationSourceArrayOutput() AutomationSourceArrayOutput {
	return i.ToAutomationSourceArrayOutputWithContext(context.Background())
}

func (i AutomationSourceArray) ToAutomationSourceArrayOutputWithContext(ctx context.Context) AutomationSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationSourceArrayOutput)
}

type AutomationSourceOutput struct{ *pulumi.OutputState }

func (AutomationSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationSource)(nil)).Elem()
}

func (o AutomationSourceOutput) ToAutomationSourceOutput() AutomationSourceOutput {
	return o
}

func (o AutomationSourceOutput) ToAutomationSourceOutputWithContext(ctx context.Context) AutomationSourceOutput {
	return o
}

// Type of data that will trigger this automation. Must be one of `Alerts`, `Assessments`, `SecureScoreControls`, `SecureScores` or `SubAssessments`. Note. assessments are also referred to as recommendations
func (o AutomationSourceOutput) EventSource() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationSource) string { return v.EventSource }).(pulumi.StringOutput)
}

// A set of rules which evaluate upon event and data interception. This is defined in one or more `ruleSet` blocks as defined below.
func (o AutomationSourceOutput) RuleSets() AutomationSourceRuleSetArrayOutput {
	return o.ApplyT(func(v AutomationSource) []AutomationSourceRuleSet { return v.RuleSets }).(AutomationSourceRuleSetArrayOutput)
}

type AutomationSourceArrayOutput struct{ *pulumi.OutputState }

func (AutomationSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationSource)(nil)).Elem()
}

func (o AutomationSourceArrayOutput) ToAutomationSourceArrayOutput() AutomationSourceArrayOutput {
	return o
}

func (o AutomationSourceArrayOutput) ToAutomationSourceArrayOutputWithContext(ctx context.Context) AutomationSourceArrayOutput {
	return o
}

func (o AutomationSourceArrayOutput) Index(i pulumi.IntInput) AutomationSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutomationSource {
		return vs[0].([]AutomationSource)[vs[1].(int)]
	}).(AutomationSourceOutput)
}

type AutomationSourceRuleSet struct {
	// One or more `rule` blocks as defined below.
	Rules []AutomationSourceRuleSetRule `pulumi:"rules"`
}

// AutomationSourceRuleSetInput is an input type that accepts AutomationSourceRuleSetArgs and AutomationSourceRuleSetOutput values.
// You can construct a concrete instance of `AutomationSourceRuleSetInput` via:
//
//          AutomationSourceRuleSetArgs{...}
type AutomationSourceRuleSetInput interface {
	pulumi.Input

	ToAutomationSourceRuleSetOutput() AutomationSourceRuleSetOutput
	ToAutomationSourceRuleSetOutputWithContext(context.Context) AutomationSourceRuleSetOutput
}

type AutomationSourceRuleSetArgs struct {
	// One or more `rule` blocks as defined below.
	Rules AutomationSourceRuleSetRuleArrayInput `pulumi:"rules"`
}

func (AutomationSourceRuleSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationSourceRuleSet)(nil)).Elem()
}

func (i AutomationSourceRuleSetArgs) ToAutomationSourceRuleSetOutput() AutomationSourceRuleSetOutput {
	return i.ToAutomationSourceRuleSetOutputWithContext(context.Background())
}

func (i AutomationSourceRuleSetArgs) ToAutomationSourceRuleSetOutputWithContext(ctx context.Context) AutomationSourceRuleSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationSourceRuleSetOutput)
}

// AutomationSourceRuleSetArrayInput is an input type that accepts AutomationSourceRuleSetArray and AutomationSourceRuleSetArrayOutput values.
// You can construct a concrete instance of `AutomationSourceRuleSetArrayInput` via:
//
//          AutomationSourceRuleSetArray{ AutomationSourceRuleSetArgs{...} }
type AutomationSourceRuleSetArrayInput interface {
	pulumi.Input

	ToAutomationSourceRuleSetArrayOutput() AutomationSourceRuleSetArrayOutput
	ToAutomationSourceRuleSetArrayOutputWithContext(context.Context) AutomationSourceRuleSetArrayOutput
}

type AutomationSourceRuleSetArray []AutomationSourceRuleSetInput

func (AutomationSourceRuleSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationSourceRuleSet)(nil)).Elem()
}

func (i AutomationSourceRuleSetArray) ToAutomationSourceRuleSetArrayOutput() AutomationSourceRuleSetArrayOutput {
	return i.ToAutomationSourceRuleSetArrayOutputWithContext(context.Background())
}

func (i AutomationSourceRuleSetArray) ToAutomationSourceRuleSetArrayOutputWithContext(ctx context.Context) AutomationSourceRuleSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationSourceRuleSetArrayOutput)
}

type AutomationSourceRuleSetOutput struct{ *pulumi.OutputState }

func (AutomationSourceRuleSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationSourceRuleSet)(nil)).Elem()
}

func (o AutomationSourceRuleSetOutput) ToAutomationSourceRuleSetOutput() AutomationSourceRuleSetOutput {
	return o
}

func (o AutomationSourceRuleSetOutput) ToAutomationSourceRuleSetOutputWithContext(ctx context.Context) AutomationSourceRuleSetOutput {
	return o
}

// One or more `rule` blocks as defined below.
func (o AutomationSourceRuleSetOutput) Rules() AutomationSourceRuleSetRuleArrayOutput {
	return o.ApplyT(func(v AutomationSourceRuleSet) []AutomationSourceRuleSetRule { return v.Rules }).(AutomationSourceRuleSetRuleArrayOutput)
}

type AutomationSourceRuleSetArrayOutput struct{ *pulumi.OutputState }

func (AutomationSourceRuleSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationSourceRuleSet)(nil)).Elem()
}

func (o AutomationSourceRuleSetArrayOutput) ToAutomationSourceRuleSetArrayOutput() AutomationSourceRuleSetArrayOutput {
	return o
}

func (o AutomationSourceRuleSetArrayOutput) ToAutomationSourceRuleSetArrayOutputWithContext(ctx context.Context) AutomationSourceRuleSetArrayOutput {
	return o
}

func (o AutomationSourceRuleSetArrayOutput) Index(i pulumi.IntInput) AutomationSourceRuleSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutomationSourceRuleSet {
		return vs[0].([]AutomationSourceRuleSet)[vs[1].(int)]
	}).(AutomationSourceRuleSetOutput)
}

type AutomationSourceRuleSetRule struct {
	// A value that will be compared with the value in `propertyPath`.
	ExpectedValue string `pulumi:"expectedValue"`
	// The comparison operator to use, must be one of: `Contains`, `EndsWith`, `Equals`, `GreaterThan`, `GreaterThanOrEqualTo`, `LesserThan`, `LesserThanOrEqualTo`, `NotEquals`, `StartsWith`
	Operator string `pulumi:"operator"`
	// The JPath of the entity model property that should be checked.
	PropertyPath string `pulumi:"propertyPath"`
	// The data type of the compared operands, must be one of: `Integer`, `String`, `Boolean` or `Number`.
	PropertyType string `pulumi:"propertyType"`
}

// AutomationSourceRuleSetRuleInput is an input type that accepts AutomationSourceRuleSetRuleArgs and AutomationSourceRuleSetRuleOutput values.
// You can construct a concrete instance of `AutomationSourceRuleSetRuleInput` via:
//
//          AutomationSourceRuleSetRuleArgs{...}
type AutomationSourceRuleSetRuleInput interface {
	pulumi.Input

	ToAutomationSourceRuleSetRuleOutput() AutomationSourceRuleSetRuleOutput
	ToAutomationSourceRuleSetRuleOutputWithContext(context.Context) AutomationSourceRuleSetRuleOutput
}

type AutomationSourceRuleSetRuleArgs struct {
	// A value that will be compared with the value in `propertyPath`.
	ExpectedValue pulumi.StringInput `pulumi:"expectedValue"`
	// The comparison operator to use, must be one of: `Contains`, `EndsWith`, `Equals`, `GreaterThan`, `GreaterThanOrEqualTo`, `LesserThan`, `LesserThanOrEqualTo`, `NotEquals`, `StartsWith`
	Operator pulumi.StringInput `pulumi:"operator"`
	// The JPath of the entity model property that should be checked.
	PropertyPath pulumi.StringInput `pulumi:"propertyPath"`
	// The data type of the compared operands, must be one of: `Integer`, `String`, `Boolean` or `Number`.
	PropertyType pulumi.StringInput `pulumi:"propertyType"`
}

func (AutomationSourceRuleSetRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationSourceRuleSetRule)(nil)).Elem()
}

func (i AutomationSourceRuleSetRuleArgs) ToAutomationSourceRuleSetRuleOutput() AutomationSourceRuleSetRuleOutput {
	return i.ToAutomationSourceRuleSetRuleOutputWithContext(context.Background())
}

func (i AutomationSourceRuleSetRuleArgs) ToAutomationSourceRuleSetRuleOutputWithContext(ctx context.Context) AutomationSourceRuleSetRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationSourceRuleSetRuleOutput)
}

// AutomationSourceRuleSetRuleArrayInput is an input type that accepts AutomationSourceRuleSetRuleArray and AutomationSourceRuleSetRuleArrayOutput values.
// You can construct a concrete instance of `AutomationSourceRuleSetRuleArrayInput` via:
//
//          AutomationSourceRuleSetRuleArray{ AutomationSourceRuleSetRuleArgs{...} }
type AutomationSourceRuleSetRuleArrayInput interface {
	pulumi.Input

	ToAutomationSourceRuleSetRuleArrayOutput() AutomationSourceRuleSetRuleArrayOutput
	ToAutomationSourceRuleSetRuleArrayOutputWithContext(context.Context) AutomationSourceRuleSetRuleArrayOutput
}

type AutomationSourceRuleSetRuleArray []AutomationSourceRuleSetRuleInput

func (AutomationSourceRuleSetRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationSourceRuleSetRule)(nil)).Elem()
}

func (i AutomationSourceRuleSetRuleArray) ToAutomationSourceRuleSetRuleArrayOutput() AutomationSourceRuleSetRuleArrayOutput {
	return i.ToAutomationSourceRuleSetRuleArrayOutputWithContext(context.Background())
}

func (i AutomationSourceRuleSetRuleArray) ToAutomationSourceRuleSetRuleArrayOutputWithContext(ctx context.Context) AutomationSourceRuleSetRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationSourceRuleSetRuleArrayOutput)
}

type AutomationSourceRuleSetRuleOutput struct{ *pulumi.OutputState }

func (AutomationSourceRuleSetRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationSourceRuleSetRule)(nil)).Elem()
}

func (o AutomationSourceRuleSetRuleOutput) ToAutomationSourceRuleSetRuleOutput() AutomationSourceRuleSetRuleOutput {
	return o
}

func (o AutomationSourceRuleSetRuleOutput) ToAutomationSourceRuleSetRuleOutputWithContext(ctx context.Context) AutomationSourceRuleSetRuleOutput {
	return o
}

// A value that will be compared with the value in `propertyPath`.
func (o AutomationSourceRuleSetRuleOutput) ExpectedValue() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationSourceRuleSetRule) string { return v.ExpectedValue }).(pulumi.StringOutput)
}

// The comparison operator to use, must be one of: `Contains`, `EndsWith`, `Equals`, `GreaterThan`, `GreaterThanOrEqualTo`, `LesserThan`, `LesserThanOrEqualTo`, `NotEquals`, `StartsWith`
func (o AutomationSourceRuleSetRuleOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationSourceRuleSetRule) string { return v.Operator }).(pulumi.StringOutput)
}

// The JPath of the entity model property that should be checked.
func (o AutomationSourceRuleSetRuleOutput) PropertyPath() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationSourceRuleSetRule) string { return v.PropertyPath }).(pulumi.StringOutput)
}

// The data type of the compared operands, must be one of: `Integer`, `String`, `Boolean` or `Number`.
func (o AutomationSourceRuleSetRuleOutput) PropertyType() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationSourceRuleSetRule) string { return v.PropertyType }).(pulumi.StringOutput)
}

type AutomationSourceRuleSetRuleArrayOutput struct{ *pulumi.OutputState }

func (AutomationSourceRuleSetRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationSourceRuleSetRule)(nil)).Elem()
}

func (o AutomationSourceRuleSetRuleArrayOutput) ToAutomationSourceRuleSetRuleArrayOutput() AutomationSourceRuleSetRuleArrayOutput {
	return o
}

func (o AutomationSourceRuleSetRuleArrayOutput) ToAutomationSourceRuleSetRuleArrayOutputWithContext(ctx context.Context) AutomationSourceRuleSetRuleArrayOutput {
	return o
}

func (o AutomationSourceRuleSetRuleArrayOutput) Index(i pulumi.IntInput) AutomationSourceRuleSetRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutomationSourceRuleSetRule {
		return vs[0].([]AutomationSourceRuleSetRule)[vs[1].(int)]
	}).(AutomationSourceRuleSetRuleOutput)
}

func init() {
	pulumi.RegisterOutputType(AssessmentStatusOutput{})
	pulumi.RegisterOutputType(AssessmentStatusPtrOutput{})
	pulumi.RegisterOutputType(AutomationActionOutput{})
	pulumi.RegisterOutputType(AutomationActionArrayOutput{})
	pulumi.RegisterOutputType(AutomationSourceOutput{})
	pulumi.RegisterOutputType(AutomationSourceArrayOutput{})
	pulumi.RegisterOutputType(AutomationSourceRuleSetOutput{})
	pulumi.RegisterOutputType(AutomationSourceRuleSetArrayOutput{})
	pulumi.RegisterOutputType(AutomationSourceRuleSetRuleOutput{})
	pulumi.RegisterOutputType(AutomationSourceRuleSetRuleArrayOutput{})
}
