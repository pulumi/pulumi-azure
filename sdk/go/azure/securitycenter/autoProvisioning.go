// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package securitycenter

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Enables or disables the Security Center Auto Provisioning feature for the subscription
//
// > **NOTE:** There is no resource name required, it will always be "default"
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/securitycenter"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := securitycenter.NewAutoProvisioning(ctx, "example", &securitycenter.AutoProvisioningArgs{
// 			AutoProvision: pulumi.String("On"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Security Center Auto Provisioning can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:securitycenter/autoProvisioning:AutoProvisioning example /subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Security/autoProvisioningSettings/default
// ```
type AutoProvisioning struct {
	pulumi.CustomResourceState

	// Should the security agent be automatically provisioned on Virtual Machines in this subscription? Possible values are `On` (to install the security agent automatically, if it's missing) or `Off` (to not install the security agent automatically).
	AutoProvision pulumi.StringOutput `pulumi:"autoProvision"`
}

// NewAutoProvisioning registers a new resource with the given unique name, arguments, and options.
func NewAutoProvisioning(ctx *pulumi.Context,
	name string, args *AutoProvisioningArgs, opts ...pulumi.ResourceOption) (*AutoProvisioning, error) {
	if args == nil || args.AutoProvision == nil {
		return nil, errors.New("missing required argument 'AutoProvision'")
	}
	if args == nil {
		args = &AutoProvisioningArgs{}
	}
	var resource AutoProvisioning
	err := ctx.RegisterResource("azure:securitycenter/autoProvisioning:AutoProvisioning", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAutoProvisioning gets an existing AutoProvisioning resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAutoProvisioning(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AutoProvisioningState, opts ...pulumi.ResourceOption) (*AutoProvisioning, error) {
	var resource AutoProvisioning
	err := ctx.ReadResource("azure:securitycenter/autoProvisioning:AutoProvisioning", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AutoProvisioning resources.
type autoProvisioningState struct {
	// Should the security agent be automatically provisioned on Virtual Machines in this subscription? Possible values are `On` (to install the security agent automatically, if it's missing) or `Off` (to not install the security agent automatically).
	AutoProvision *string `pulumi:"autoProvision"`
}

type AutoProvisioningState struct {
	// Should the security agent be automatically provisioned on Virtual Machines in this subscription? Possible values are `On` (to install the security agent automatically, if it's missing) or `Off` (to not install the security agent automatically).
	AutoProvision pulumi.StringPtrInput
}

func (AutoProvisioningState) ElementType() reflect.Type {
	return reflect.TypeOf((*autoProvisioningState)(nil)).Elem()
}

type autoProvisioningArgs struct {
	// Should the security agent be automatically provisioned on Virtual Machines in this subscription? Possible values are `On` (to install the security agent automatically, if it's missing) or `Off` (to not install the security agent automatically).
	AutoProvision string `pulumi:"autoProvision"`
}

// The set of arguments for constructing a AutoProvisioning resource.
type AutoProvisioningArgs struct {
	// Should the security agent be automatically provisioned on Virtual Machines in this subscription? Possible values are `On` (to install the security agent automatically, if it's missing) or `Off` (to not install the security agent automatically).
	AutoProvision pulumi.StringInput
}

func (AutoProvisioningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*autoProvisioningArgs)(nil)).Elem()
}

type AutoProvisioningInput interface {
	pulumi.Input

	ToAutoProvisioningOutput() AutoProvisioningOutput
	ToAutoProvisioningOutputWithContext(ctx context.Context) AutoProvisioningOutput
}

func (AutoProvisioning) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoProvisioning)(nil)).Elem()
}

func (i AutoProvisioning) ToAutoProvisioningOutput() AutoProvisioningOutput {
	return i.ToAutoProvisioningOutputWithContext(context.Background())
}

func (i AutoProvisioning) ToAutoProvisioningOutputWithContext(ctx context.Context) AutoProvisioningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoProvisioningOutput)
}

type AutoProvisioningOutput struct {
	*pulumi.OutputState
}

func (AutoProvisioningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoProvisioningOutput)(nil)).Elem()
}

func (o AutoProvisioningOutput) ToAutoProvisioningOutput() AutoProvisioningOutput {
	return o
}

func (o AutoProvisioningOutput) ToAutoProvisioningOutputWithContext(ctx context.Context) AutoProvisioningOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AutoProvisioningOutput{})
}
