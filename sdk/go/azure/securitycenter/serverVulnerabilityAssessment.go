// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package securitycenter

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Azure Server Vulnerability Assessment (Qualys) to a VM.
//
// > **NOTE** This resource has been deprecated in favour of the `securitycenter.ServerVulnerabilityAssessmentVirtualMachine` resource and will be removed in v4.0 of the AzureRM Provider.
//
// > **NOTE** Azure Defender has to be enabled on the subscription in order for this resource to work.
// See this [documentation](https://docs.microsoft.com/azure/security-center/security-center-get-started) to get started.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/compute"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/securitycenter"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "exampleVirtualNetwork", &network.VirtualNetworkArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("192.168.1.0/24"),
//				},
//				Location: exampleResourceGroup.Location,
//			})
//			if err != nil {
//				return err
//			}
//			exampleSubnet, err := network.NewSubnet(ctx, "exampleSubnet", &network.SubnetArgs{
//				ResourceGroupName:  exampleResourceGroup.Name,
//				VirtualNetworkName: exampleVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("192.168.1.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleNetworkInterface, err := network.NewNetworkInterface(ctx, "exampleNetworkInterface", &network.NetworkInterfaceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				IpConfigurations: network.NetworkInterfaceIpConfigurationArray{
//					&network.NetworkInterfaceIpConfigurationArgs{
//						Name:                       pulumi.String("vm-example"),
//						SubnetId:                   exampleSubnet.ID(),
//						PrivateIpAddressAllocation: pulumi.String("Dynamic"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleLinuxVirtualMachine, err := compute.NewLinuxVirtualMachine(ctx, "exampleLinuxVirtualMachine", &compute.LinuxVirtualMachineArgs{
//				Location:                      exampleResourceGroup.Location,
//				ResourceGroupName:             exampleResourceGroup.Name,
//				Size:                          pulumi.String("Standard_B1s"),
//				AdminUsername:                 pulumi.String("testadmin"),
//				AdminPassword:                 pulumi.String("Password1234!"),
//				DisablePasswordAuthentication: pulumi.Bool(false),
//				SourceImageReference: &compute.LinuxVirtualMachineSourceImageReferenceArgs{
//					Publisher: pulumi.String("Canonical"),
//					Offer:     pulumi.String("0001-com-ubuntu-server-jammy"),
//					Sku:       pulumi.String("22_04-lts"),
//					Version:   pulumi.String("latest"),
//				},
//				OsDisk: &compute.LinuxVirtualMachineOsDiskArgs{
//					Caching:            pulumi.String("ReadWrite"),
//					StorageAccountType: pulumi.String("Standard_LRS"),
//				},
//				NetworkInterfaceIds: pulumi.StringArray{
//					exampleNetworkInterface.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = securitycenter.NewServerVulnerabilityAssessment(ctx, "exampleServerVulnerabilityAssessment", &securitycenter.ServerVulnerabilityAssessmentArgs{
//				VirtualMachineId: exampleLinuxVirtualMachine.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Server Vulnerability Assessments can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:securitycenter/serverVulnerabilityAssessment:ServerVulnerabilityAssessment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resource-group-name/providers/Microsoft.Compute/virtualMachines/vm-name/providers/Microsoft.Security/serverVulnerabilityAssessments/Default
//
// ```
//
//	or
//
// ```sh
//
//	$ pulumi import azure:securitycenter/serverVulnerabilityAssessment:ServerVulnerabilityAssessment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resource-group-name/providers/Microsoft.HybridCompute/machines/machine-name/providers/Microsoft.Security/serverVulnerabilityAssessments/Default
//
// ```
type ServerVulnerabilityAssessment struct {
	pulumi.CustomResourceState

	// The ID of the Azure ARC server to be monitored by vulnerability assessment. Changing this forces a new resource to be created.
	//
	// > **NOTE:** One of either `virtualMachineId` or `hybridMachineId` must be set.
	HybridMachineId pulumi.StringPtrOutput `pulumi:"hybridMachineId"`
	// The ID of the virtual machine to be monitored by vulnerability assessment. Changing this forces a new resource to be created.
	//
	// > **NOTE:** One of either `virtualMachineId` or `hybridMachineId` must be set.
	VirtualMachineId pulumi.StringPtrOutput `pulumi:"virtualMachineId"`
}

// NewServerVulnerabilityAssessment registers a new resource with the given unique name, arguments, and options.
func NewServerVulnerabilityAssessment(ctx *pulumi.Context,
	name string, args *ServerVulnerabilityAssessmentArgs, opts ...pulumi.ResourceOption) (*ServerVulnerabilityAssessment, error) {
	if args == nil {
		args = &ServerVulnerabilityAssessmentArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerVulnerabilityAssessment
	err := ctx.RegisterResource("azure:securitycenter/serverVulnerabilityAssessment:ServerVulnerabilityAssessment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerVulnerabilityAssessment gets an existing ServerVulnerabilityAssessment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerVulnerabilityAssessment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerVulnerabilityAssessmentState, opts ...pulumi.ResourceOption) (*ServerVulnerabilityAssessment, error) {
	var resource ServerVulnerabilityAssessment
	err := ctx.ReadResource("azure:securitycenter/serverVulnerabilityAssessment:ServerVulnerabilityAssessment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerVulnerabilityAssessment resources.
type serverVulnerabilityAssessmentState struct {
	// The ID of the Azure ARC server to be monitored by vulnerability assessment. Changing this forces a new resource to be created.
	//
	// > **NOTE:** One of either `virtualMachineId` or `hybridMachineId` must be set.
	HybridMachineId *string `pulumi:"hybridMachineId"`
	// The ID of the virtual machine to be monitored by vulnerability assessment. Changing this forces a new resource to be created.
	//
	// > **NOTE:** One of either `virtualMachineId` or `hybridMachineId` must be set.
	VirtualMachineId *string `pulumi:"virtualMachineId"`
}

type ServerVulnerabilityAssessmentState struct {
	// The ID of the Azure ARC server to be monitored by vulnerability assessment. Changing this forces a new resource to be created.
	//
	// > **NOTE:** One of either `virtualMachineId` or `hybridMachineId` must be set.
	HybridMachineId pulumi.StringPtrInput
	// The ID of the virtual machine to be monitored by vulnerability assessment. Changing this forces a new resource to be created.
	//
	// > **NOTE:** One of either `virtualMachineId` or `hybridMachineId` must be set.
	VirtualMachineId pulumi.StringPtrInput
}

func (ServerVulnerabilityAssessmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverVulnerabilityAssessmentState)(nil)).Elem()
}

type serverVulnerabilityAssessmentArgs struct {
	// The ID of the Azure ARC server to be monitored by vulnerability assessment. Changing this forces a new resource to be created.
	//
	// > **NOTE:** One of either `virtualMachineId` or `hybridMachineId` must be set.
	HybridMachineId *string `pulumi:"hybridMachineId"`
	// The ID of the virtual machine to be monitored by vulnerability assessment. Changing this forces a new resource to be created.
	//
	// > **NOTE:** One of either `virtualMachineId` or `hybridMachineId` must be set.
	VirtualMachineId *string `pulumi:"virtualMachineId"`
}

// The set of arguments for constructing a ServerVulnerabilityAssessment resource.
type ServerVulnerabilityAssessmentArgs struct {
	// The ID of the Azure ARC server to be monitored by vulnerability assessment. Changing this forces a new resource to be created.
	//
	// > **NOTE:** One of either `virtualMachineId` or `hybridMachineId` must be set.
	HybridMachineId pulumi.StringPtrInput
	// The ID of the virtual machine to be monitored by vulnerability assessment. Changing this forces a new resource to be created.
	//
	// > **NOTE:** One of either `virtualMachineId` or `hybridMachineId` must be set.
	VirtualMachineId pulumi.StringPtrInput
}

func (ServerVulnerabilityAssessmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverVulnerabilityAssessmentArgs)(nil)).Elem()
}

type ServerVulnerabilityAssessmentInput interface {
	pulumi.Input

	ToServerVulnerabilityAssessmentOutput() ServerVulnerabilityAssessmentOutput
	ToServerVulnerabilityAssessmentOutputWithContext(ctx context.Context) ServerVulnerabilityAssessmentOutput
}

func (*ServerVulnerabilityAssessment) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerVulnerabilityAssessment)(nil)).Elem()
}

func (i *ServerVulnerabilityAssessment) ToServerVulnerabilityAssessmentOutput() ServerVulnerabilityAssessmentOutput {
	return i.ToServerVulnerabilityAssessmentOutputWithContext(context.Background())
}

func (i *ServerVulnerabilityAssessment) ToServerVulnerabilityAssessmentOutputWithContext(ctx context.Context) ServerVulnerabilityAssessmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerVulnerabilityAssessmentOutput)
}

// ServerVulnerabilityAssessmentArrayInput is an input type that accepts ServerVulnerabilityAssessmentArray and ServerVulnerabilityAssessmentArrayOutput values.
// You can construct a concrete instance of `ServerVulnerabilityAssessmentArrayInput` via:
//
//	ServerVulnerabilityAssessmentArray{ ServerVulnerabilityAssessmentArgs{...} }
type ServerVulnerabilityAssessmentArrayInput interface {
	pulumi.Input

	ToServerVulnerabilityAssessmentArrayOutput() ServerVulnerabilityAssessmentArrayOutput
	ToServerVulnerabilityAssessmentArrayOutputWithContext(context.Context) ServerVulnerabilityAssessmentArrayOutput
}

type ServerVulnerabilityAssessmentArray []ServerVulnerabilityAssessmentInput

func (ServerVulnerabilityAssessmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerVulnerabilityAssessment)(nil)).Elem()
}

func (i ServerVulnerabilityAssessmentArray) ToServerVulnerabilityAssessmentArrayOutput() ServerVulnerabilityAssessmentArrayOutput {
	return i.ToServerVulnerabilityAssessmentArrayOutputWithContext(context.Background())
}

func (i ServerVulnerabilityAssessmentArray) ToServerVulnerabilityAssessmentArrayOutputWithContext(ctx context.Context) ServerVulnerabilityAssessmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerVulnerabilityAssessmentArrayOutput)
}

// ServerVulnerabilityAssessmentMapInput is an input type that accepts ServerVulnerabilityAssessmentMap and ServerVulnerabilityAssessmentMapOutput values.
// You can construct a concrete instance of `ServerVulnerabilityAssessmentMapInput` via:
//
//	ServerVulnerabilityAssessmentMap{ "key": ServerVulnerabilityAssessmentArgs{...} }
type ServerVulnerabilityAssessmentMapInput interface {
	pulumi.Input

	ToServerVulnerabilityAssessmentMapOutput() ServerVulnerabilityAssessmentMapOutput
	ToServerVulnerabilityAssessmentMapOutputWithContext(context.Context) ServerVulnerabilityAssessmentMapOutput
}

type ServerVulnerabilityAssessmentMap map[string]ServerVulnerabilityAssessmentInput

func (ServerVulnerabilityAssessmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerVulnerabilityAssessment)(nil)).Elem()
}

func (i ServerVulnerabilityAssessmentMap) ToServerVulnerabilityAssessmentMapOutput() ServerVulnerabilityAssessmentMapOutput {
	return i.ToServerVulnerabilityAssessmentMapOutputWithContext(context.Background())
}

func (i ServerVulnerabilityAssessmentMap) ToServerVulnerabilityAssessmentMapOutputWithContext(ctx context.Context) ServerVulnerabilityAssessmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerVulnerabilityAssessmentMapOutput)
}

type ServerVulnerabilityAssessmentOutput struct{ *pulumi.OutputState }

func (ServerVulnerabilityAssessmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerVulnerabilityAssessment)(nil)).Elem()
}

func (o ServerVulnerabilityAssessmentOutput) ToServerVulnerabilityAssessmentOutput() ServerVulnerabilityAssessmentOutput {
	return o
}

func (o ServerVulnerabilityAssessmentOutput) ToServerVulnerabilityAssessmentOutputWithContext(ctx context.Context) ServerVulnerabilityAssessmentOutput {
	return o
}

// The ID of the Azure ARC server to be monitored by vulnerability assessment. Changing this forces a new resource to be created.
//
// > **NOTE:** One of either `virtualMachineId` or `hybridMachineId` must be set.
func (o ServerVulnerabilityAssessmentOutput) HybridMachineId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerVulnerabilityAssessment) pulumi.StringPtrOutput { return v.HybridMachineId }).(pulumi.StringPtrOutput)
}

// The ID of the virtual machine to be monitored by vulnerability assessment. Changing this forces a new resource to be created.
//
// > **NOTE:** One of either `virtualMachineId` or `hybridMachineId` must be set.
func (o ServerVulnerabilityAssessmentOutput) VirtualMachineId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerVulnerabilityAssessment) pulumi.StringPtrOutput { return v.VirtualMachineId }).(pulumi.StringPtrOutput)
}

type ServerVulnerabilityAssessmentArrayOutput struct{ *pulumi.OutputState }

func (ServerVulnerabilityAssessmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerVulnerabilityAssessment)(nil)).Elem()
}

func (o ServerVulnerabilityAssessmentArrayOutput) ToServerVulnerabilityAssessmentArrayOutput() ServerVulnerabilityAssessmentArrayOutput {
	return o
}

func (o ServerVulnerabilityAssessmentArrayOutput) ToServerVulnerabilityAssessmentArrayOutputWithContext(ctx context.Context) ServerVulnerabilityAssessmentArrayOutput {
	return o
}

func (o ServerVulnerabilityAssessmentArrayOutput) Index(i pulumi.IntInput) ServerVulnerabilityAssessmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServerVulnerabilityAssessment {
		return vs[0].([]*ServerVulnerabilityAssessment)[vs[1].(int)]
	}).(ServerVulnerabilityAssessmentOutput)
}

type ServerVulnerabilityAssessmentMapOutput struct{ *pulumi.OutputState }

func (ServerVulnerabilityAssessmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerVulnerabilityAssessment)(nil)).Elem()
}

func (o ServerVulnerabilityAssessmentMapOutput) ToServerVulnerabilityAssessmentMapOutput() ServerVulnerabilityAssessmentMapOutput {
	return o
}

func (o ServerVulnerabilityAssessmentMapOutput) ToServerVulnerabilityAssessmentMapOutputWithContext(ctx context.Context) ServerVulnerabilityAssessmentMapOutput {
	return o
}

func (o ServerVulnerabilityAssessmentMapOutput) MapIndex(k pulumi.StringInput) ServerVulnerabilityAssessmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServerVulnerabilityAssessment {
		return vs[0].(map[string]*ServerVulnerabilityAssessment)[vs[1].(string)]
	}).(ServerVulnerabilityAssessmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerVulnerabilityAssessmentInput)(nil)).Elem(), &ServerVulnerabilityAssessment{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerVulnerabilityAssessmentArrayInput)(nil)).Elem(), ServerVulnerabilityAssessmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerVulnerabilityAssessmentMapInput)(nil)).Elem(), ServerVulnerabilityAssessmentMap{})
	pulumi.RegisterOutputType(ServerVulnerabilityAssessmentOutput{})
	pulumi.RegisterOutputType(ServerVulnerabilityAssessmentArrayOutput{})
	pulumi.RegisterOutputType(ServerVulnerabilityAssessmentMapOutput{})
}
