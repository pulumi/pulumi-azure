// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azure

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The provider type for the azurerm package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	// The password associated with the Client Certificate. For use when authenticating as a Service Principal using a Client
	// Certificate
	ClientCertificatePassword pulumi.StringPtrOutput `pulumi:"clientCertificatePassword"`
	// The path to the Client Certificate associated with the Service Principal for use when authenticating as a Service
	// Principal using a Client Certificate.
	ClientCertificatePath pulumi.StringPtrOutput `pulumi:"clientCertificatePath"`
	// The Client ID which should be used.
	ClientId pulumi.StringPtrOutput `pulumi:"clientId"`
	// The Client Secret which should be used. For use When authenticating as a Service Principal using a Client Secret.
	ClientSecret pulumi.StringPtrOutput `pulumi:"clientSecret"`
	// The Cloud Environment which should be used. Possible values are public, usgovernment, and china. Defaults to public.
	Environment pulumi.StringPtrOutput `pulumi:"environment"`
	// The Hostname which should be used for the Azure Metadata Service.
	MetadataHost pulumi.StringPtrOutput `pulumi:"metadataHost"`
	// The path to a custom endpoint for Managed Service Identity - in most circumstances this should be detected
	// automatically.
	MsiEndpoint pulumi.StringPtrOutput `pulumi:"msiEndpoint"`
	// A GUID/UUID that is registered with Microsoft to facilitate partner resource usage attribution.
	PartnerId pulumi.StringPtrOutput `pulumi:"partnerId"`
	// The Subscription ID which should be used.
	SubscriptionId pulumi.StringPtrOutput `pulumi:"subscriptionId"`
	// The Tenant ID which should be used.
	TenantId pulumi.StringPtrOutput `pulumi:"tenantId"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}

	if isZero(args.Environment) {
		args.Environment = pulumi.StringPtr(getEnvOrDefault("public", nil, "AZURE_ENVIRONMENT", "ARM_ENVIRONMENT").(string))
	}
	if isZero(args.MetadataHost) {
		args.MetadataHost = pulumi.StringPtr(getEnvOrDefault("", nil, "ARM_METADATA_HOSTNAME").(string))
	}
	if isZero(args.SkipProviderRegistration) {
		args.SkipProviderRegistration = pulumi.BoolPtr(getEnvOrDefault(false, parseEnvBool, "ARM_SKIP_PROVIDER_REGISTRATION").(bool))
	}
	if isZero(args.StorageUseAzuread) {
		args.StorageUseAzuread = pulumi.BoolPtr(getEnvOrDefault(false, parseEnvBool, "ARM_STORAGE_USE_AZUREAD").(bool))
	}
	if isZero(args.SubscriptionId) {
		args.SubscriptionId = pulumi.StringPtr(getEnvOrDefault("", nil, "ARM_SUBSCRIPTION_ID").(string))
	}
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:azure", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	AuxiliaryTenantIds []string `pulumi:"auxiliaryTenantIds"`
	// The password associated with the Client Certificate. For use when authenticating as a Service Principal using a Client
	// Certificate
	ClientCertificatePassword *string `pulumi:"clientCertificatePassword"`
	// The path to the Client Certificate associated with the Service Principal for use when authenticating as a Service
	// Principal using a Client Certificate.
	ClientCertificatePath *string `pulumi:"clientCertificatePath"`
	// The Client ID which should be used.
	ClientId *string `pulumi:"clientId"`
	// The Client Secret which should be used. For use When authenticating as a Service Principal using a Client Secret.
	ClientSecret *string `pulumi:"clientSecret"`
	// This will disable the x-ms-correlation-request-id header.
	DisableCorrelationRequestId *bool `pulumi:"disableCorrelationRequestId"`
	// This will disable the Terraform Partner ID which is used if a custom `partner_id` isn't specified.
	DisableTerraformPartnerId *bool `pulumi:"disableTerraformPartnerId"`
	// The Cloud Environment which should be used. Possible values are public, usgovernment, and china. Defaults to public.
	Environment *string           `pulumi:"environment"`
	Features    *ProviderFeatures `pulumi:"features"`
	// The Hostname which should be used for the Azure Metadata Service.
	MetadataHost *string `pulumi:"metadataHost"`
	// The path to a custom endpoint for Managed Service Identity - in most circumstances this should be detected
	// automatically.
	MsiEndpoint *string `pulumi:"msiEndpoint"`
	// A GUID/UUID that is registered with Microsoft to facilitate partner resource usage attribution.
	PartnerId *string `pulumi:"partnerId"`
	// Should the AzureRM Provider skip registering all of the Resource Providers that it supports, if they're not already
	// registered?
	SkipProviderRegistration *bool `pulumi:"skipProviderRegistration"`
	// Should the AzureRM Provider use AzureAD to access the Storage Data Plane API's?
	StorageUseAzuread *bool `pulumi:"storageUseAzuread"`
	// The Subscription ID which should be used.
	SubscriptionId *string `pulumi:"subscriptionId"`
	// The Tenant ID which should be used.
	TenantId *string `pulumi:"tenantId"`
	// Allowed Managed Service Identity be used for Authentication.
	UseMsi *bool `pulumi:"useMsi"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	AuxiliaryTenantIds pulumi.StringArrayInput
	// The password associated with the Client Certificate. For use when authenticating as a Service Principal using a Client
	// Certificate
	ClientCertificatePassword pulumi.StringPtrInput
	// The path to the Client Certificate associated with the Service Principal for use when authenticating as a Service
	// Principal using a Client Certificate.
	ClientCertificatePath pulumi.StringPtrInput
	// The Client ID which should be used.
	ClientId pulumi.StringPtrInput
	// The Client Secret which should be used. For use When authenticating as a Service Principal using a Client Secret.
	ClientSecret pulumi.StringPtrInput
	// This will disable the x-ms-correlation-request-id header.
	DisableCorrelationRequestId pulumi.BoolPtrInput
	// This will disable the Terraform Partner ID which is used if a custom `partner_id` isn't specified.
	DisableTerraformPartnerId pulumi.BoolPtrInput
	// The Cloud Environment which should be used. Possible values are public, usgovernment, and china. Defaults to public.
	Environment pulumi.StringPtrInput
	Features    ProviderFeaturesPtrInput
	// The Hostname which should be used for the Azure Metadata Service.
	MetadataHost pulumi.StringPtrInput
	// The path to a custom endpoint for Managed Service Identity - in most circumstances this should be detected
	// automatically.
	MsiEndpoint pulumi.StringPtrInput
	// A GUID/UUID that is registered with Microsoft to facilitate partner resource usage attribution.
	PartnerId pulumi.StringPtrInput
	// Should the AzureRM Provider skip registering all of the Resource Providers that it supports, if they're not already
	// registered?
	SkipProviderRegistration pulumi.BoolPtrInput
	// Should the AzureRM Provider use AzureAD to access the Storage Data Plane API's?
	StorageUseAzuread pulumi.BoolPtrInput
	// The Subscription ID which should be used.
	SubscriptionId pulumi.StringPtrInput
	// The Tenant ID which should be used.
	TenantId pulumi.StringPtrInput
	// Allowed Managed Service Identity be used for Authentication.
	UseMsi pulumi.BoolPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

// The password associated with the Client Certificate. For use when authenticating as a Service Principal using a Client
// Certificate
func (o ProviderOutput) ClientCertificatePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ClientCertificatePassword }).(pulumi.StringPtrOutput)
}

// The path to the Client Certificate associated with the Service Principal for use when authenticating as a Service
// Principal using a Client Certificate.
func (o ProviderOutput) ClientCertificatePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ClientCertificatePath }).(pulumi.StringPtrOutput)
}

// The Client ID which should be used.
func (o ProviderOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The Client Secret which should be used. For use When authenticating as a Service Principal using a Client Secret.
func (o ProviderOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// The Cloud Environment which should be used. Possible values are public, usgovernment, and china. Defaults to public.
func (o ProviderOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Environment }).(pulumi.StringPtrOutput)
}

// The Hostname which should be used for the Azure Metadata Service.
func (o ProviderOutput) MetadataHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.MetadataHost }).(pulumi.StringPtrOutput)
}

// The path to a custom endpoint for Managed Service Identity - in most circumstances this should be detected
// automatically.
func (o ProviderOutput) MsiEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.MsiEndpoint }).(pulumi.StringPtrOutput)
}

// A GUID/UUID that is registered with Microsoft to facilitate partner resource usage attribution.
func (o ProviderOutput) PartnerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.PartnerId }).(pulumi.StringPtrOutput)
}

// The Subscription ID which should be used.
func (o ProviderOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

// The Tenant ID which should be used.
func (o ProviderOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.TenantId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
}
