// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devtest

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages automated startup and shutdown schedules for Azure Dev Test Lab.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/devtest"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleLab, err := devtest.NewLab(ctx, "exampleLab", &devtest.LabArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = devtest.NewSchedule(ctx, "exampleSchedule", &devtest.ScheduleArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				LabName:           exampleLab.Name,
//				WeeklyRecurrence: &devtest.ScheduleWeeklyRecurrenceArgs{
//					Time: pulumi.String("1100"),
//					WeekDays: pulumi.StringArray{
//						pulumi.String("Monday"),
//						pulumi.String("Tuesday"),
//					},
//				},
//				TimeZoneId:           pulumi.String("Pacific Standard Time"),
//				TaskType:             pulumi.String("LabVmsStartupTask"),
//				NotificationSettings: nil,
//				Tags: pulumi.StringMap{
//					"environment": pulumi.String("Production"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DevTest Schedule's can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:devtest/schedule:Schedule example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.DevTestLab/labs/myDevTestLab/schedules/labvmautostart
//
// ```
type Schedule struct {
	pulumi.CustomResourceState

	// The properties of a daily schedule. If the schedule occurs once each day of the week, specify the daily recurrence. A `dailyRecurrence` block as defined below.
	DailyRecurrence ScheduleDailyRecurrencePtrOutput `pulumi:"dailyRecurrence"`
	// The properties of an hourly schedule. If the schedule occurs multiple times a day, specify the hourly recurrence. A `hourlyRecurrence` block as defined below.
	HourlyRecurrence ScheduleHourlyRecurrencePtrOutput `pulumi:"hourlyRecurrence"`
	// The name of the dev test lab. Changing this forces a new resource to be created.
	LabName pulumi.StringOutput `pulumi:"labName"`
	// The location where the schedule is created. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the dev test lab schedule. Valid value for name depends on the `taskType`. For instance for taskType `LabVmsStartupTask` the name needs to be `LabVmAutoStart`. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The notification setting of a schedule. A `notificationSettings` block as defined below.
	NotificationSettings ScheduleNotificationSettingsOutput `pulumi:"notificationSettings"`
	// The name of the resource group in which to create the dev test lab schedule. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The status of this schedule. Possible values are `Enabled` and `Disabled`. Defaults to `Disabled`.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The task type of the schedule. Possible values include `LabVmsShutdownTask` and `LabVmAutoStart`.
	TaskType pulumi.StringOutput `pulumi:"taskType"`
	// The time zone ID (e.g. Pacific Standard time).
	TimeZoneId pulumi.StringOutput `pulumi:"timeZoneId"`
	// The properties of a weekly schedule. If the schedule occurs only some days of the week, specify the weekly recurrence. A `weeklyRecurrence` block as defined below.
	WeeklyRecurrence ScheduleWeeklyRecurrencePtrOutput `pulumi:"weeklyRecurrence"`
}

// NewSchedule registers a new resource with the given unique name, arguments, and options.
func NewSchedule(ctx *pulumi.Context,
	name string, args *ScheduleArgs, opts ...pulumi.ResourceOption) (*Schedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LabName == nil {
		return nil, errors.New("invalid value for required argument 'LabName'")
	}
	if args.NotificationSettings == nil {
		return nil, errors.New("invalid value for required argument 'NotificationSettings'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.TaskType == nil {
		return nil, errors.New("invalid value for required argument 'TaskType'")
	}
	if args.TimeZoneId == nil {
		return nil, errors.New("invalid value for required argument 'TimeZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Schedule
	err := ctx.RegisterResource("azure:devtest/schedule:Schedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchedule gets an existing Schedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScheduleState, opts ...pulumi.ResourceOption) (*Schedule, error) {
	var resource Schedule
	err := ctx.ReadResource("azure:devtest/schedule:Schedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Schedule resources.
type scheduleState struct {
	// The properties of a daily schedule. If the schedule occurs once each day of the week, specify the daily recurrence. A `dailyRecurrence` block as defined below.
	DailyRecurrence *ScheduleDailyRecurrence `pulumi:"dailyRecurrence"`
	// The properties of an hourly schedule. If the schedule occurs multiple times a day, specify the hourly recurrence. A `hourlyRecurrence` block as defined below.
	HourlyRecurrence *ScheduleHourlyRecurrence `pulumi:"hourlyRecurrence"`
	// The name of the dev test lab. Changing this forces a new resource to be created.
	LabName *string `pulumi:"labName"`
	// The location where the schedule is created. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name of the dev test lab schedule. Valid value for name depends on the `taskType`. For instance for taskType `LabVmsStartupTask` the name needs to be `LabVmAutoStart`. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The notification setting of a schedule. A `notificationSettings` block as defined below.
	NotificationSettings *ScheduleNotificationSettings `pulumi:"notificationSettings"`
	// The name of the resource group in which to create the dev test lab schedule. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The status of this schedule. Possible values are `Enabled` and `Disabled`. Defaults to `Disabled`.
	Status *string `pulumi:"status"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The task type of the schedule. Possible values include `LabVmsShutdownTask` and `LabVmAutoStart`.
	TaskType *string `pulumi:"taskType"`
	// The time zone ID (e.g. Pacific Standard time).
	TimeZoneId *string `pulumi:"timeZoneId"`
	// The properties of a weekly schedule. If the schedule occurs only some days of the week, specify the weekly recurrence. A `weeklyRecurrence` block as defined below.
	WeeklyRecurrence *ScheduleWeeklyRecurrence `pulumi:"weeklyRecurrence"`
}

type ScheduleState struct {
	// The properties of a daily schedule. If the schedule occurs once each day of the week, specify the daily recurrence. A `dailyRecurrence` block as defined below.
	DailyRecurrence ScheduleDailyRecurrencePtrInput
	// The properties of an hourly schedule. If the schedule occurs multiple times a day, specify the hourly recurrence. A `hourlyRecurrence` block as defined below.
	HourlyRecurrence ScheduleHourlyRecurrencePtrInput
	// The name of the dev test lab. Changing this forces a new resource to be created.
	LabName pulumi.StringPtrInput
	// The location where the schedule is created. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name of the dev test lab schedule. Valid value for name depends on the `taskType`. For instance for taskType `LabVmsStartupTask` the name needs to be `LabVmAutoStart`. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The notification setting of a schedule. A `notificationSettings` block as defined below.
	NotificationSettings ScheduleNotificationSettingsPtrInput
	// The name of the resource group in which to create the dev test lab schedule. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The status of this schedule. Possible values are `Enabled` and `Disabled`. Defaults to `Disabled`.
	Status pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// The task type of the schedule. Possible values include `LabVmsShutdownTask` and `LabVmAutoStart`.
	TaskType pulumi.StringPtrInput
	// The time zone ID (e.g. Pacific Standard time).
	TimeZoneId pulumi.StringPtrInput
	// The properties of a weekly schedule. If the schedule occurs only some days of the week, specify the weekly recurrence. A `weeklyRecurrence` block as defined below.
	WeeklyRecurrence ScheduleWeeklyRecurrencePtrInput
}

func (ScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduleState)(nil)).Elem()
}

type scheduleArgs struct {
	// The properties of a daily schedule. If the schedule occurs once each day of the week, specify the daily recurrence. A `dailyRecurrence` block as defined below.
	DailyRecurrence *ScheduleDailyRecurrence `pulumi:"dailyRecurrence"`
	// The properties of an hourly schedule. If the schedule occurs multiple times a day, specify the hourly recurrence. A `hourlyRecurrence` block as defined below.
	HourlyRecurrence *ScheduleHourlyRecurrence `pulumi:"hourlyRecurrence"`
	// The name of the dev test lab. Changing this forces a new resource to be created.
	LabName string `pulumi:"labName"`
	// The location where the schedule is created. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name of the dev test lab schedule. Valid value for name depends on the `taskType`. For instance for taskType `LabVmsStartupTask` the name needs to be `LabVmAutoStart`. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The notification setting of a schedule. A `notificationSettings` block as defined below.
	NotificationSettings ScheduleNotificationSettings `pulumi:"notificationSettings"`
	// The name of the resource group in which to create the dev test lab schedule. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The status of this schedule. Possible values are `Enabled` and `Disabled`. Defaults to `Disabled`.
	Status *string `pulumi:"status"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The task type of the schedule. Possible values include `LabVmsShutdownTask` and `LabVmAutoStart`.
	TaskType string `pulumi:"taskType"`
	// The time zone ID (e.g. Pacific Standard time).
	TimeZoneId string `pulumi:"timeZoneId"`
	// The properties of a weekly schedule. If the schedule occurs only some days of the week, specify the weekly recurrence. A `weeklyRecurrence` block as defined below.
	WeeklyRecurrence *ScheduleWeeklyRecurrence `pulumi:"weeklyRecurrence"`
}

// The set of arguments for constructing a Schedule resource.
type ScheduleArgs struct {
	// The properties of a daily schedule. If the schedule occurs once each day of the week, specify the daily recurrence. A `dailyRecurrence` block as defined below.
	DailyRecurrence ScheduleDailyRecurrencePtrInput
	// The properties of an hourly schedule. If the schedule occurs multiple times a day, specify the hourly recurrence. A `hourlyRecurrence` block as defined below.
	HourlyRecurrence ScheduleHourlyRecurrencePtrInput
	// The name of the dev test lab. Changing this forces a new resource to be created.
	LabName pulumi.StringInput
	// The location where the schedule is created. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name of the dev test lab schedule. Valid value for name depends on the `taskType`. For instance for taskType `LabVmsStartupTask` the name needs to be `LabVmAutoStart`. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The notification setting of a schedule. A `notificationSettings` block as defined below.
	NotificationSettings ScheduleNotificationSettingsInput
	// The name of the resource group in which to create the dev test lab schedule. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// The status of this schedule. Possible values are `Enabled` and `Disabled`. Defaults to `Disabled`.
	Status pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// The task type of the schedule. Possible values include `LabVmsShutdownTask` and `LabVmAutoStart`.
	TaskType pulumi.StringInput
	// The time zone ID (e.g. Pacific Standard time).
	TimeZoneId pulumi.StringInput
	// The properties of a weekly schedule. If the schedule occurs only some days of the week, specify the weekly recurrence. A `weeklyRecurrence` block as defined below.
	WeeklyRecurrence ScheduleWeeklyRecurrencePtrInput
}

func (ScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduleArgs)(nil)).Elem()
}

type ScheduleInput interface {
	pulumi.Input

	ToScheduleOutput() ScheduleOutput
	ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput
}

func (*Schedule) ElementType() reflect.Type {
	return reflect.TypeOf((**Schedule)(nil)).Elem()
}

func (i *Schedule) ToScheduleOutput() ScheduleOutput {
	return i.ToScheduleOutputWithContext(context.Background())
}

func (i *Schedule) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleOutput)
}

func (i *Schedule) ToOutput(ctx context.Context) pulumix.Output[*Schedule] {
	return pulumix.Output[*Schedule]{
		OutputState: i.ToScheduleOutputWithContext(ctx).OutputState,
	}
}

// ScheduleArrayInput is an input type that accepts ScheduleArray and ScheduleArrayOutput values.
// You can construct a concrete instance of `ScheduleArrayInput` via:
//
//	ScheduleArray{ ScheduleArgs{...} }
type ScheduleArrayInput interface {
	pulumi.Input

	ToScheduleArrayOutput() ScheduleArrayOutput
	ToScheduleArrayOutputWithContext(context.Context) ScheduleArrayOutput
}

type ScheduleArray []ScheduleInput

func (ScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Schedule)(nil)).Elem()
}

func (i ScheduleArray) ToScheduleArrayOutput() ScheduleArrayOutput {
	return i.ToScheduleArrayOutputWithContext(context.Background())
}

func (i ScheduleArray) ToScheduleArrayOutputWithContext(ctx context.Context) ScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleArrayOutput)
}

func (i ScheduleArray) ToOutput(ctx context.Context) pulumix.Output[[]*Schedule] {
	return pulumix.Output[[]*Schedule]{
		OutputState: i.ToScheduleArrayOutputWithContext(ctx).OutputState,
	}
}

// ScheduleMapInput is an input type that accepts ScheduleMap and ScheduleMapOutput values.
// You can construct a concrete instance of `ScheduleMapInput` via:
//
//	ScheduleMap{ "key": ScheduleArgs{...} }
type ScheduleMapInput interface {
	pulumi.Input

	ToScheduleMapOutput() ScheduleMapOutput
	ToScheduleMapOutputWithContext(context.Context) ScheduleMapOutput
}

type ScheduleMap map[string]ScheduleInput

func (ScheduleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Schedule)(nil)).Elem()
}

func (i ScheduleMap) ToScheduleMapOutput() ScheduleMapOutput {
	return i.ToScheduleMapOutputWithContext(context.Background())
}

func (i ScheduleMap) ToScheduleMapOutputWithContext(ctx context.Context) ScheduleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleMapOutput)
}

func (i ScheduleMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Schedule] {
	return pulumix.Output[map[string]*Schedule]{
		OutputState: i.ToScheduleMapOutputWithContext(ctx).OutputState,
	}
}

type ScheduleOutput struct{ *pulumi.OutputState }

func (ScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Schedule)(nil)).Elem()
}

func (o ScheduleOutput) ToScheduleOutput() ScheduleOutput {
	return o
}

func (o ScheduleOutput) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return o
}

func (o ScheduleOutput) ToOutput(ctx context.Context) pulumix.Output[*Schedule] {
	return pulumix.Output[*Schedule]{
		OutputState: o.OutputState,
	}
}

// The properties of a daily schedule. If the schedule occurs once each day of the week, specify the daily recurrence. A `dailyRecurrence` block as defined below.
func (o ScheduleOutput) DailyRecurrence() ScheduleDailyRecurrencePtrOutput {
	return o.ApplyT(func(v *Schedule) ScheduleDailyRecurrencePtrOutput { return v.DailyRecurrence }).(ScheduleDailyRecurrencePtrOutput)
}

// The properties of an hourly schedule. If the schedule occurs multiple times a day, specify the hourly recurrence. A `hourlyRecurrence` block as defined below.
func (o ScheduleOutput) HourlyRecurrence() ScheduleHourlyRecurrencePtrOutput {
	return o.ApplyT(func(v *Schedule) ScheduleHourlyRecurrencePtrOutput { return v.HourlyRecurrence }).(ScheduleHourlyRecurrencePtrOutput)
}

// The name of the dev test lab. Changing this forces a new resource to be created.
func (o ScheduleOutput) LabName() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.LabName }).(pulumi.StringOutput)
}

// The location where the schedule is created. Changing this forces a new resource to be created.
func (o ScheduleOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the dev test lab schedule. Valid value for name depends on the `taskType`. For instance for taskType `LabVmsStartupTask` the name needs to be `LabVmAutoStart`. Changing this forces a new resource to be created.
func (o ScheduleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The notification setting of a schedule. A `notificationSettings` block as defined below.
func (o ScheduleOutput) NotificationSettings() ScheduleNotificationSettingsOutput {
	return o.ApplyT(func(v *Schedule) ScheduleNotificationSettingsOutput { return v.NotificationSettings }).(ScheduleNotificationSettingsOutput)
}

// The name of the resource group in which to create the dev test lab schedule. Changing this forces a new resource to be created.
func (o ScheduleOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The status of this schedule. Possible values are `Enabled` and `Disabled`. Defaults to `Disabled`.
func (o ScheduleOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// A mapping of tags to assign to the resource.
func (o ScheduleOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The task type of the schedule. Possible values include `LabVmsShutdownTask` and `LabVmAutoStart`.
func (o ScheduleOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.TaskType }).(pulumi.StringOutput)
}

// The time zone ID (e.g. Pacific Standard time).
func (o ScheduleOutput) TimeZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.TimeZoneId }).(pulumi.StringOutput)
}

// The properties of a weekly schedule. If the schedule occurs only some days of the week, specify the weekly recurrence. A `weeklyRecurrence` block as defined below.
func (o ScheduleOutput) WeeklyRecurrence() ScheduleWeeklyRecurrencePtrOutput {
	return o.ApplyT(func(v *Schedule) ScheduleWeeklyRecurrencePtrOutput { return v.WeeklyRecurrence }).(ScheduleWeeklyRecurrencePtrOutput)
}

type ScheduleArrayOutput struct{ *pulumi.OutputState }

func (ScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Schedule)(nil)).Elem()
}

func (o ScheduleArrayOutput) ToScheduleArrayOutput() ScheduleArrayOutput {
	return o
}

func (o ScheduleArrayOutput) ToScheduleArrayOutputWithContext(ctx context.Context) ScheduleArrayOutput {
	return o
}

func (o ScheduleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Schedule] {
	return pulumix.Output[[]*Schedule]{
		OutputState: o.OutputState,
	}
}

func (o ScheduleArrayOutput) Index(i pulumi.IntInput) ScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Schedule {
		return vs[0].([]*Schedule)[vs[1].(int)]
	}).(ScheduleOutput)
}

type ScheduleMapOutput struct{ *pulumi.OutputState }

func (ScheduleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Schedule)(nil)).Elem()
}

func (o ScheduleMapOutput) ToScheduleMapOutput() ScheduleMapOutput {
	return o
}

func (o ScheduleMapOutput) ToScheduleMapOutputWithContext(ctx context.Context) ScheduleMapOutput {
	return o
}

func (o ScheduleMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Schedule] {
	return pulumix.Output[map[string]*Schedule]{
		OutputState: o.OutputState,
	}
}

func (o ScheduleMapOutput) MapIndex(k pulumi.StringInput) ScheduleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Schedule {
		return vs[0].(map[string]*Schedule)[vs[1].(string)]
	}).(ScheduleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleInput)(nil)).Elem(), &Schedule{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleArrayInput)(nil)).Elem(), ScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleMapInput)(nil)).Elem(), ScheduleMap{})
	pulumi.RegisterOutputType(ScheduleOutput{})
	pulumi.RegisterOutputType(ScheduleArrayOutput{})
	pulumi.RegisterOutputType(ScheduleMapOutput{})
}
