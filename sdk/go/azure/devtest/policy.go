// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package devtest

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Policy within a Dev Test Policy Set.
type Policy struct {
	s *pulumi.ResourceState
}

// NewPolicy registers a new resource with the given unique name, arguments, and options.
func NewPolicy(ctx *pulumi.Context,
	name string, args *PolicyArgs, opts ...pulumi.ResourceOpt) (*Policy, error) {
	if args == nil || args.EvaluatorType == nil {
		return nil, errors.New("missing required argument 'EvaluatorType'")
	}
	if args == nil || args.LabName == nil {
		return nil, errors.New("missing required argument 'LabName'")
	}
	if args == nil || args.PolicySetName == nil {
		return nil, errors.New("missing required argument 'PolicySetName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.Threshold == nil {
		return nil, errors.New("missing required argument 'Threshold'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["evaluatorType"] = nil
		inputs["factData"] = nil
		inputs["labName"] = nil
		inputs["name"] = nil
		inputs["policySetName"] = nil
		inputs["resourceGroupName"] = nil
		inputs["tags"] = nil
		inputs["threshold"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["evaluatorType"] = args.EvaluatorType
		inputs["factData"] = args.FactData
		inputs["labName"] = args.LabName
		inputs["name"] = args.Name
		inputs["policySetName"] = args.PolicySetName
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["tags"] = args.Tags
		inputs["threshold"] = args.Threshold
	}
	s, err := ctx.RegisterResource("azure:devtest/policy:Policy", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Policy{s: s}, nil
}

// GetPolicy gets an existing Policy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicy(ctx *pulumi.Context,
	name string, id pulumi.ID, state *PolicyState, opts ...pulumi.ResourceOpt) (*Policy, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["evaluatorType"] = state.EvaluatorType
		inputs["factData"] = state.FactData
		inputs["labName"] = state.LabName
		inputs["name"] = state.Name
		inputs["policySetName"] = state.PolicySetName
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["tags"] = state.Tags
		inputs["threshold"] = state.Threshold
	}
	s, err := ctx.ReadResource("azure:devtest/policy:Policy", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Policy{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Policy) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Policy) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// A description for the Policy.
func (r *Policy) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The Evaluation Type used for this Policy. Possible values include: 'AllowedValuesPolicy', 'MaxValuePolicy'. Changing this forces a new resource to be created.
func (r *Policy) EvaluatorType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["evaluatorType"])
}

// The Fact Data for this Policy.
func (r *Policy) FactData() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["factData"])
}

// Specifies the name of the Dev Test Lab in which the Policy should be created. Changing this forces a new resource to be created.
func (r *Policy) LabName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["labName"])
}

// Specifies the name of the Dev Test Policy. Possible values are `GalleryImage`, `LabPremiumVmCount`, `LabTargetCost`, `LabVmCount`, `LabVmSize`, `UserOwnedLabPremiumVmCount`, `UserOwnedLabVmCount` and `UserOwnedLabVmCountInSubnet`. Changing this forces a new resource to be created.
func (r *Policy) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Specifies the name of the Policy Set within the Dev Test Lab where this policy should be created. Changing this forces a new resource to be created.
func (r *Policy) PolicySetName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["policySetName"])
}

// The name of the resource group in which the Dev Test Lab resource exists. Changing this forces a new resource to be created.
func (r *Policy) ResourceGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// A mapping of tags to assign to the resource.
func (r *Policy) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// The Threshold for this Policy.
func (r *Policy) Threshold() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["threshold"])
}

// Input properties used for looking up and filtering Policy resources.
type PolicyState struct {
	// A description for the Policy.
	Description interface{}
	// The Evaluation Type used for this Policy. Possible values include: 'AllowedValuesPolicy', 'MaxValuePolicy'. Changing this forces a new resource to be created.
	EvaluatorType interface{}
	// The Fact Data for this Policy.
	FactData interface{}
	// Specifies the name of the Dev Test Lab in which the Policy should be created. Changing this forces a new resource to be created.
	LabName interface{}
	// Specifies the name of the Dev Test Policy. Possible values are `GalleryImage`, `LabPremiumVmCount`, `LabTargetCost`, `LabVmCount`, `LabVmSize`, `UserOwnedLabPremiumVmCount`, `UserOwnedLabVmCount` and `UserOwnedLabVmCountInSubnet`. Changing this forces a new resource to be created.
	Name interface{}
	// Specifies the name of the Policy Set within the Dev Test Lab where this policy should be created. Changing this forces a new resource to be created.
	PolicySetName interface{}
	// The name of the resource group in which the Dev Test Lab resource exists. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// The Threshold for this Policy.
	Threshold interface{}
}

// The set of arguments for constructing a Policy resource.
type PolicyArgs struct {
	// A description for the Policy.
	Description interface{}
	// The Evaluation Type used for this Policy. Possible values include: 'AllowedValuesPolicy', 'MaxValuePolicy'. Changing this forces a new resource to be created.
	EvaluatorType interface{}
	// The Fact Data for this Policy.
	FactData interface{}
	// Specifies the name of the Dev Test Lab in which the Policy should be created. Changing this forces a new resource to be created.
	LabName interface{}
	// Specifies the name of the Dev Test Policy. Possible values are `GalleryImage`, `LabPremiumVmCount`, `LabTargetCost`, `LabVmCount`, `LabVmSize`, `UserOwnedLabPremiumVmCount`, `UserOwnedLabVmCount` and `UserOwnedLabVmCountInSubnet`. Changing this forces a new resource to be created.
	Name interface{}
	// Specifies the name of the Policy Set within the Dev Test Lab where this policy should be created. Changing this forces a new resource to be created.
	PolicySetName interface{}
	// The name of the resource group in which the Dev Test Lab resource exists. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// The Threshold for this Policy.
	Threshold interface{}
}
