// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package devtest

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GlobalVMShutdownScheduleNotificationSettings struct {
	// Whether to enable pre-shutdown notifications. Possible values are `true` and `false`. Defaults to `false`
	Enabled bool `pulumi:"enabled"`
	// Time in minutes between 15 and 120 before a shutdown event at which a notification will be sent. Defaults to `30`.
	TimeInMinutes *int `pulumi:"timeInMinutes"`
	// The webhook URL to which the notification will be sent. Required if `enabled` is `true`. Optional otherwise.
	WebhookUrl *string `pulumi:"webhookUrl"`
}

// GlobalVMShutdownScheduleNotificationSettingsInput is an input type that accepts GlobalVMShutdownScheduleNotificationSettingsArgs and GlobalVMShutdownScheduleNotificationSettingsOutput values.
// You can construct a concrete instance of `GlobalVMShutdownScheduleNotificationSettingsInput` via:
//
//          GlobalVMShutdownScheduleNotificationSettingsArgs{...}
type GlobalVMShutdownScheduleNotificationSettingsInput interface {
	pulumi.Input

	ToGlobalVMShutdownScheduleNotificationSettingsOutput() GlobalVMShutdownScheduleNotificationSettingsOutput
	ToGlobalVMShutdownScheduleNotificationSettingsOutputWithContext(context.Context) GlobalVMShutdownScheduleNotificationSettingsOutput
}

type GlobalVMShutdownScheduleNotificationSettingsArgs struct {
	// Whether to enable pre-shutdown notifications. Possible values are `true` and `false`. Defaults to `false`
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Time in minutes between 15 and 120 before a shutdown event at which a notification will be sent. Defaults to `30`.
	TimeInMinutes pulumi.IntPtrInput `pulumi:"timeInMinutes"`
	// The webhook URL to which the notification will be sent. Required if `enabled` is `true`. Optional otherwise.
	WebhookUrl pulumi.StringPtrInput `pulumi:"webhookUrl"`
}

func (GlobalVMShutdownScheduleNotificationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalVMShutdownScheduleNotificationSettings)(nil)).Elem()
}

func (i GlobalVMShutdownScheduleNotificationSettingsArgs) ToGlobalVMShutdownScheduleNotificationSettingsOutput() GlobalVMShutdownScheduleNotificationSettingsOutput {
	return i.ToGlobalVMShutdownScheduleNotificationSettingsOutputWithContext(context.Background())
}

func (i GlobalVMShutdownScheduleNotificationSettingsArgs) ToGlobalVMShutdownScheduleNotificationSettingsOutputWithContext(ctx context.Context) GlobalVMShutdownScheduleNotificationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalVMShutdownScheduleNotificationSettingsOutput)
}

func (i GlobalVMShutdownScheduleNotificationSettingsArgs) ToGlobalVMShutdownScheduleNotificationSettingsPtrOutput() GlobalVMShutdownScheduleNotificationSettingsPtrOutput {
	return i.ToGlobalVMShutdownScheduleNotificationSettingsPtrOutputWithContext(context.Background())
}

func (i GlobalVMShutdownScheduleNotificationSettingsArgs) ToGlobalVMShutdownScheduleNotificationSettingsPtrOutputWithContext(ctx context.Context) GlobalVMShutdownScheduleNotificationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalVMShutdownScheduleNotificationSettingsOutput).ToGlobalVMShutdownScheduleNotificationSettingsPtrOutputWithContext(ctx)
}

// GlobalVMShutdownScheduleNotificationSettingsPtrInput is an input type that accepts GlobalVMShutdownScheduleNotificationSettingsArgs, GlobalVMShutdownScheduleNotificationSettingsPtr and GlobalVMShutdownScheduleNotificationSettingsPtrOutput values.
// You can construct a concrete instance of `GlobalVMShutdownScheduleNotificationSettingsPtrInput` via:
//
//          GlobalVMShutdownScheduleNotificationSettingsArgs{...}
//
//  or:
//
//          nil
type GlobalVMShutdownScheduleNotificationSettingsPtrInput interface {
	pulumi.Input

	ToGlobalVMShutdownScheduleNotificationSettingsPtrOutput() GlobalVMShutdownScheduleNotificationSettingsPtrOutput
	ToGlobalVMShutdownScheduleNotificationSettingsPtrOutputWithContext(context.Context) GlobalVMShutdownScheduleNotificationSettingsPtrOutput
}

type globalVMShutdownScheduleNotificationSettingsPtrType GlobalVMShutdownScheduleNotificationSettingsArgs

func GlobalVMShutdownScheduleNotificationSettingsPtr(v *GlobalVMShutdownScheduleNotificationSettingsArgs) GlobalVMShutdownScheduleNotificationSettingsPtrInput {
	return (*globalVMShutdownScheduleNotificationSettingsPtrType)(v)
}

func (*globalVMShutdownScheduleNotificationSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalVMShutdownScheduleNotificationSettings)(nil)).Elem()
}

func (i *globalVMShutdownScheduleNotificationSettingsPtrType) ToGlobalVMShutdownScheduleNotificationSettingsPtrOutput() GlobalVMShutdownScheduleNotificationSettingsPtrOutput {
	return i.ToGlobalVMShutdownScheduleNotificationSettingsPtrOutputWithContext(context.Background())
}

func (i *globalVMShutdownScheduleNotificationSettingsPtrType) ToGlobalVMShutdownScheduleNotificationSettingsPtrOutputWithContext(ctx context.Context) GlobalVMShutdownScheduleNotificationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalVMShutdownScheduleNotificationSettingsPtrOutput)
}

type GlobalVMShutdownScheduleNotificationSettingsOutput struct{ *pulumi.OutputState }

func (GlobalVMShutdownScheduleNotificationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalVMShutdownScheduleNotificationSettings)(nil)).Elem()
}

func (o GlobalVMShutdownScheduleNotificationSettingsOutput) ToGlobalVMShutdownScheduleNotificationSettingsOutput() GlobalVMShutdownScheduleNotificationSettingsOutput {
	return o
}

func (o GlobalVMShutdownScheduleNotificationSettingsOutput) ToGlobalVMShutdownScheduleNotificationSettingsOutputWithContext(ctx context.Context) GlobalVMShutdownScheduleNotificationSettingsOutput {
	return o
}

func (o GlobalVMShutdownScheduleNotificationSettingsOutput) ToGlobalVMShutdownScheduleNotificationSettingsPtrOutput() GlobalVMShutdownScheduleNotificationSettingsPtrOutput {
	return o.ToGlobalVMShutdownScheduleNotificationSettingsPtrOutputWithContext(context.Background())
}

func (o GlobalVMShutdownScheduleNotificationSettingsOutput) ToGlobalVMShutdownScheduleNotificationSettingsPtrOutputWithContext(ctx context.Context) GlobalVMShutdownScheduleNotificationSettingsPtrOutput {
	return o.ApplyT(func(v GlobalVMShutdownScheduleNotificationSettings) *GlobalVMShutdownScheduleNotificationSettings {
		return &v
	}).(GlobalVMShutdownScheduleNotificationSettingsPtrOutput)
}

// Whether to enable pre-shutdown notifications. Possible values are `true` and `false`. Defaults to `false`
func (o GlobalVMShutdownScheduleNotificationSettingsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GlobalVMShutdownScheduleNotificationSettings) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Time in minutes between 15 and 120 before a shutdown event at which a notification will be sent. Defaults to `30`.
func (o GlobalVMShutdownScheduleNotificationSettingsOutput) TimeInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalVMShutdownScheduleNotificationSettings) *int { return v.TimeInMinutes }).(pulumi.IntPtrOutput)
}

// The webhook URL to which the notification will be sent. Required if `enabled` is `true`. Optional otherwise.
func (o GlobalVMShutdownScheduleNotificationSettingsOutput) WebhookUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalVMShutdownScheduleNotificationSettings) *string { return v.WebhookUrl }).(pulumi.StringPtrOutput)
}

type GlobalVMShutdownScheduleNotificationSettingsPtrOutput struct{ *pulumi.OutputState }

func (GlobalVMShutdownScheduleNotificationSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalVMShutdownScheduleNotificationSettings)(nil)).Elem()
}

func (o GlobalVMShutdownScheduleNotificationSettingsPtrOutput) ToGlobalVMShutdownScheduleNotificationSettingsPtrOutput() GlobalVMShutdownScheduleNotificationSettingsPtrOutput {
	return o
}

func (o GlobalVMShutdownScheduleNotificationSettingsPtrOutput) ToGlobalVMShutdownScheduleNotificationSettingsPtrOutputWithContext(ctx context.Context) GlobalVMShutdownScheduleNotificationSettingsPtrOutput {
	return o
}

func (o GlobalVMShutdownScheduleNotificationSettingsPtrOutput) Elem() GlobalVMShutdownScheduleNotificationSettingsOutput {
	return o.ApplyT(func(v *GlobalVMShutdownScheduleNotificationSettings) GlobalVMShutdownScheduleNotificationSettings {
		return *v
	}).(GlobalVMShutdownScheduleNotificationSettingsOutput)
}

// Whether to enable pre-shutdown notifications. Possible values are `true` and `false`. Defaults to `false`
func (o GlobalVMShutdownScheduleNotificationSettingsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GlobalVMShutdownScheduleNotificationSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Time in minutes between 15 and 120 before a shutdown event at which a notification will be sent. Defaults to `30`.
func (o GlobalVMShutdownScheduleNotificationSettingsPtrOutput) TimeInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalVMShutdownScheduleNotificationSettings) *int {
		if v == nil {
			return nil
		}
		return v.TimeInMinutes
	}).(pulumi.IntPtrOutput)
}

// The webhook URL to which the notification will be sent. Required if `enabled` is `true`. Optional otherwise.
func (o GlobalVMShutdownScheduleNotificationSettingsPtrOutput) WebhookUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalVMShutdownScheduleNotificationSettings) *string {
		if v == nil {
			return nil
		}
		return v.WebhookUrl
	}).(pulumi.StringPtrOutput)
}

type LinuxVirtualMachineGalleryImageReference struct {
	// The Offer of the Gallery Image. Changing this forces a new resource to be created.
	Offer string `pulumi:"offer"`
	// The Publisher of the Gallery Image. Changing this forces a new resource to be created.
	Publisher string `pulumi:"publisher"`
	// The SKU of the Gallery Image. Changing this forces a new resource to be created.
	Sku string `pulumi:"sku"`
	// The Version of the Gallery Image. Changing this forces a new resource to be created.
	Version string `pulumi:"version"`
}

// LinuxVirtualMachineGalleryImageReferenceInput is an input type that accepts LinuxVirtualMachineGalleryImageReferenceArgs and LinuxVirtualMachineGalleryImageReferenceOutput values.
// You can construct a concrete instance of `LinuxVirtualMachineGalleryImageReferenceInput` via:
//
//          LinuxVirtualMachineGalleryImageReferenceArgs{...}
type LinuxVirtualMachineGalleryImageReferenceInput interface {
	pulumi.Input

	ToLinuxVirtualMachineGalleryImageReferenceOutput() LinuxVirtualMachineGalleryImageReferenceOutput
	ToLinuxVirtualMachineGalleryImageReferenceOutputWithContext(context.Context) LinuxVirtualMachineGalleryImageReferenceOutput
}

type LinuxVirtualMachineGalleryImageReferenceArgs struct {
	// The Offer of the Gallery Image. Changing this forces a new resource to be created.
	Offer pulumi.StringInput `pulumi:"offer"`
	// The Publisher of the Gallery Image. Changing this forces a new resource to be created.
	Publisher pulumi.StringInput `pulumi:"publisher"`
	// The SKU of the Gallery Image. Changing this forces a new resource to be created.
	Sku pulumi.StringInput `pulumi:"sku"`
	// The Version of the Gallery Image. Changing this forces a new resource to be created.
	Version pulumi.StringInput `pulumi:"version"`
}

func (LinuxVirtualMachineGalleryImageReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxVirtualMachineGalleryImageReference)(nil)).Elem()
}

func (i LinuxVirtualMachineGalleryImageReferenceArgs) ToLinuxVirtualMachineGalleryImageReferenceOutput() LinuxVirtualMachineGalleryImageReferenceOutput {
	return i.ToLinuxVirtualMachineGalleryImageReferenceOutputWithContext(context.Background())
}

func (i LinuxVirtualMachineGalleryImageReferenceArgs) ToLinuxVirtualMachineGalleryImageReferenceOutputWithContext(ctx context.Context) LinuxVirtualMachineGalleryImageReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxVirtualMachineGalleryImageReferenceOutput)
}

func (i LinuxVirtualMachineGalleryImageReferenceArgs) ToLinuxVirtualMachineGalleryImageReferencePtrOutput() LinuxVirtualMachineGalleryImageReferencePtrOutput {
	return i.ToLinuxVirtualMachineGalleryImageReferencePtrOutputWithContext(context.Background())
}

func (i LinuxVirtualMachineGalleryImageReferenceArgs) ToLinuxVirtualMachineGalleryImageReferencePtrOutputWithContext(ctx context.Context) LinuxVirtualMachineGalleryImageReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxVirtualMachineGalleryImageReferenceOutput).ToLinuxVirtualMachineGalleryImageReferencePtrOutputWithContext(ctx)
}

// LinuxVirtualMachineGalleryImageReferencePtrInput is an input type that accepts LinuxVirtualMachineGalleryImageReferenceArgs, LinuxVirtualMachineGalleryImageReferencePtr and LinuxVirtualMachineGalleryImageReferencePtrOutput values.
// You can construct a concrete instance of `LinuxVirtualMachineGalleryImageReferencePtrInput` via:
//
//          LinuxVirtualMachineGalleryImageReferenceArgs{...}
//
//  or:
//
//          nil
type LinuxVirtualMachineGalleryImageReferencePtrInput interface {
	pulumi.Input

	ToLinuxVirtualMachineGalleryImageReferencePtrOutput() LinuxVirtualMachineGalleryImageReferencePtrOutput
	ToLinuxVirtualMachineGalleryImageReferencePtrOutputWithContext(context.Context) LinuxVirtualMachineGalleryImageReferencePtrOutput
}

type linuxVirtualMachineGalleryImageReferencePtrType LinuxVirtualMachineGalleryImageReferenceArgs

func LinuxVirtualMachineGalleryImageReferencePtr(v *LinuxVirtualMachineGalleryImageReferenceArgs) LinuxVirtualMachineGalleryImageReferencePtrInput {
	return (*linuxVirtualMachineGalleryImageReferencePtrType)(v)
}

func (*linuxVirtualMachineGalleryImageReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxVirtualMachineGalleryImageReference)(nil)).Elem()
}

func (i *linuxVirtualMachineGalleryImageReferencePtrType) ToLinuxVirtualMachineGalleryImageReferencePtrOutput() LinuxVirtualMachineGalleryImageReferencePtrOutput {
	return i.ToLinuxVirtualMachineGalleryImageReferencePtrOutputWithContext(context.Background())
}

func (i *linuxVirtualMachineGalleryImageReferencePtrType) ToLinuxVirtualMachineGalleryImageReferencePtrOutputWithContext(ctx context.Context) LinuxVirtualMachineGalleryImageReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxVirtualMachineGalleryImageReferencePtrOutput)
}

type LinuxVirtualMachineGalleryImageReferenceOutput struct{ *pulumi.OutputState }

func (LinuxVirtualMachineGalleryImageReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxVirtualMachineGalleryImageReference)(nil)).Elem()
}

func (o LinuxVirtualMachineGalleryImageReferenceOutput) ToLinuxVirtualMachineGalleryImageReferenceOutput() LinuxVirtualMachineGalleryImageReferenceOutput {
	return o
}

func (o LinuxVirtualMachineGalleryImageReferenceOutput) ToLinuxVirtualMachineGalleryImageReferenceOutputWithContext(ctx context.Context) LinuxVirtualMachineGalleryImageReferenceOutput {
	return o
}

func (o LinuxVirtualMachineGalleryImageReferenceOutput) ToLinuxVirtualMachineGalleryImageReferencePtrOutput() LinuxVirtualMachineGalleryImageReferencePtrOutput {
	return o.ToLinuxVirtualMachineGalleryImageReferencePtrOutputWithContext(context.Background())
}

func (o LinuxVirtualMachineGalleryImageReferenceOutput) ToLinuxVirtualMachineGalleryImageReferencePtrOutputWithContext(ctx context.Context) LinuxVirtualMachineGalleryImageReferencePtrOutput {
	return o.ApplyT(func(v LinuxVirtualMachineGalleryImageReference) *LinuxVirtualMachineGalleryImageReference {
		return &v
	}).(LinuxVirtualMachineGalleryImageReferencePtrOutput)
}

// The Offer of the Gallery Image. Changing this forces a new resource to be created.
func (o LinuxVirtualMachineGalleryImageReferenceOutput) Offer() pulumi.StringOutput {
	return o.ApplyT(func(v LinuxVirtualMachineGalleryImageReference) string { return v.Offer }).(pulumi.StringOutput)
}

// The Publisher of the Gallery Image. Changing this forces a new resource to be created.
func (o LinuxVirtualMachineGalleryImageReferenceOutput) Publisher() pulumi.StringOutput {
	return o.ApplyT(func(v LinuxVirtualMachineGalleryImageReference) string { return v.Publisher }).(pulumi.StringOutput)
}

// The SKU of the Gallery Image. Changing this forces a new resource to be created.
func (o LinuxVirtualMachineGalleryImageReferenceOutput) Sku() pulumi.StringOutput {
	return o.ApplyT(func(v LinuxVirtualMachineGalleryImageReference) string { return v.Sku }).(pulumi.StringOutput)
}

// The Version of the Gallery Image. Changing this forces a new resource to be created.
func (o LinuxVirtualMachineGalleryImageReferenceOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v LinuxVirtualMachineGalleryImageReference) string { return v.Version }).(pulumi.StringOutput)
}

type LinuxVirtualMachineGalleryImageReferencePtrOutput struct{ *pulumi.OutputState }

func (LinuxVirtualMachineGalleryImageReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxVirtualMachineGalleryImageReference)(nil)).Elem()
}

func (o LinuxVirtualMachineGalleryImageReferencePtrOutput) ToLinuxVirtualMachineGalleryImageReferencePtrOutput() LinuxVirtualMachineGalleryImageReferencePtrOutput {
	return o
}

func (o LinuxVirtualMachineGalleryImageReferencePtrOutput) ToLinuxVirtualMachineGalleryImageReferencePtrOutputWithContext(ctx context.Context) LinuxVirtualMachineGalleryImageReferencePtrOutput {
	return o
}

func (o LinuxVirtualMachineGalleryImageReferencePtrOutput) Elem() LinuxVirtualMachineGalleryImageReferenceOutput {
	return o.ApplyT(func(v *LinuxVirtualMachineGalleryImageReference) LinuxVirtualMachineGalleryImageReference { return *v }).(LinuxVirtualMachineGalleryImageReferenceOutput)
}

// The Offer of the Gallery Image. Changing this forces a new resource to be created.
func (o LinuxVirtualMachineGalleryImageReferencePtrOutput) Offer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxVirtualMachineGalleryImageReference) *string {
		if v == nil {
			return nil
		}
		return &v.Offer
	}).(pulumi.StringPtrOutput)
}

// The Publisher of the Gallery Image. Changing this forces a new resource to be created.
func (o LinuxVirtualMachineGalleryImageReferencePtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxVirtualMachineGalleryImageReference) *string {
		if v == nil {
			return nil
		}
		return &v.Publisher
	}).(pulumi.StringPtrOutput)
}

// The SKU of the Gallery Image. Changing this forces a new resource to be created.
func (o LinuxVirtualMachineGalleryImageReferencePtrOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxVirtualMachineGalleryImageReference) *string {
		if v == nil {
			return nil
		}
		return &v.Sku
	}).(pulumi.StringPtrOutput)
}

// The Version of the Gallery Image. Changing this forces a new resource to be created.
func (o LinuxVirtualMachineGalleryImageReferencePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxVirtualMachineGalleryImageReference) *string {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(pulumi.StringPtrOutput)
}

type LinuxVirtualMachineInboundNatRule struct {
	// The Backend Port associated with this NAT Rule. Changing this forces a new resource to be created.
	BackendPort int `pulumi:"backendPort"`
	// The frontend port associated with this Inbound NAT Rule.
	FrontendPort *int `pulumi:"frontendPort"`
	// The Protocol used for this NAT Rule. Possible values are `Tcp` and `Udp`. Changing this forces a new resource to be created.
	Protocol string `pulumi:"protocol"`
}

// LinuxVirtualMachineInboundNatRuleInput is an input type that accepts LinuxVirtualMachineInboundNatRuleArgs and LinuxVirtualMachineInboundNatRuleOutput values.
// You can construct a concrete instance of `LinuxVirtualMachineInboundNatRuleInput` via:
//
//          LinuxVirtualMachineInboundNatRuleArgs{...}
type LinuxVirtualMachineInboundNatRuleInput interface {
	pulumi.Input

	ToLinuxVirtualMachineInboundNatRuleOutput() LinuxVirtualMachineInboundNatRuleOutput
	ToLinuxVirtualMachineInboundNatRuleOutputWithContext(context.Context) LinuxVirtualMachineInboundNatRuleOutput
}

type LinuxVirtualMachineInboundNatRuleArgs struct {
	// The Backend Port associated with this NAT Rule. Changing this forces a new resource to be created.
	BackendPort pulumi.IntInput `pulumi:"backendPort"`
	// The frontend port associated with this Inbound NAT Rule.
	FrontendPort pulumi.IntPtrInput `pulumi:"frontendPort"`
	// The Protocol used for this NAT Rule. Possible values are `Tcp` and `Udp`. Changing this forces a new resource to be created.
	Protocol pulumi.StringInput `pulumi:"protocol"`
}

func (LinuxVirtualMachineInboundNatRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxVirtualMachineInboundNatRule)(nil)).Elem()
}

func (i LinuxVirtualMachineInboundNatRuleArgs) ToLinuxVirtualMachineInboundNatRuleOutput() LinuxVirtualMachineInboundNatRuleOutput {
	return i.ToLinuxVirtualMachineInboundNatRuleOutputWithContext(context.Background())
}

func (i LinuxVirtualMachineInboundNatRuleArgs) ToLinuxVirtualMachineInboundNatRuleOutputWithContext(ctx context.Context) LinuxVirtualMachineInboundNatRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxVirtualMachineInboundNatRuleOutput)
}

// LinuxVirtualMachineInboundNatRuleArrayInput is an input type that accepts LinuxVirtualMachineInboundNatRuleArray and LinuxVirtualMachineInboundNatRuleArrayOutput values.
// You can construct a concrete instance of `LinuxVirtualMachineInboundNatRuleArrayInput` via:
//
//          LinuxVirtualMachineInboundNatRuleArray{ LinuxVirtualMachineInboundNatRuleArgs{...} }
type LinuxVirtualMachineInboundNatRuleArrayInput interface {
	pulumi.Input

	ToLinuxVirtualMachineInboundNatRuleArrayOutput() LinuxVirtualMachineInboundNatRuleArrayOutput
	ToLinuxVirtualMachineInboundNatRuleArrayOutputWithContext(context.Context) LinuxVirtualMachineInboundNatRuleArrayOutput
}

type LinuxVirtualMachineInboundNatRuleArray []LinuxVirtualMachineInboundNatRuleInput

func (LinuxVirtualMachineInboundNatRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinuxVirtualMachineInboundNatRule)(nil)).Elem()
}

func (i LinuxVirtualMachineInboundNatRuleArray) ToLinuxVirtualMachineInboundNatRuleArrayOutput() LinuxVirtualMachineInboundNatRuleArrayOutput {
	return i.ToLinuxVirtualMachineInboundNatRuleArrayOutputWithContext(context.Background())
}

func (i LinuxVirtualMachineInboundNatRuleArray) ToLinuxVirtualMachineInboundNatRuleArrayOutputWithContext(ctx context.Context) LinuxVirtualMachineInboundNatRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxVirtualMachineInboundNatRuleArrayOutput)
}

type LinuxVirtualMachineInboundNatRuleOutput struct{ *pulumi.OutputState }

func (LinuxVirtualMachineInboundNatRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxVirtualMachineInboundNatRule)(nil)).Elem()
}

func (o LinuxVirtualMachineInboundNatRuleOutput) ToLinuxVirtualMachineInboundNatRuleOutput() LinuxVirtualMachineInboundNatRuleOutput {
	return o
}

func (o LinuxVirtualMachineInboundNatRuleOutput) ToLinuxVirtualMachineInboundNatRuleOutputWithContext(ctx context.Context) LinuxVirtualMachineInboundNatRuleOutput {
	return o
}

// The Backend Port associated with this NAT Rule. Changing this forces a new resource to be created.
func (o LinuxVirtualMachineInboundNatRuleOutput) BackendPort() pulumi.IntOutput {
	return o.ApplyT(func(v LinuxVirtualMachineInboundNatRule) int { return v.BackendPort }).(pulumi.IntOutput)
}

// The frontend port associated with this Inbound NAT Rule.
func (o LinuxVirtualMachineInboundNatRuleOutput) FrontendPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LinuxVirtualMachineInboundNatRule) *int { return v.FrontendPort }).(pulumi.IntPtrOutput)
}

// The Protocol used for this NAT Rule. Possible values are `Tcp` and `Udp`. Changing this forces a new resource to be created.
func (o LinuxVirtualMachineInboundNatRuleOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v LinuxVirtualMachineInboundNatRule) string { return v.Protocol }).(pulumi.StringOutput)
}

type LinuxVirtualMachineInboundNatRuleArrayOutput struct{ *pulumi.OutputState }

func (LinuxVirtualMachineInboundNatRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinuxVirtualMachineInboundNatRule)(nil)).Elem()
}

func (o LinuxVirtualMachineInboundNatRuleArrayOutput) ToLinuxVirtualMachineInboundNatRuleArrayOutput() LinuxVirtualMachineInboundNatRuleArrayOutput {
	return o
}

func (o LinuxVirtualMachineInboundNatRuleArrayOutput) ToLinuxVirtualMachineInboundNatRuleArrayOutputWithContext(ctx context.Context) LinuxVirtualMachineInboundNatRuleArrayOutput {
	return o
}

func (o LinuxVirtualMachineInboundNatRuleArrayOutput) Index(i pulumi.IntInput) LinuxVirtualMachineInboundNatRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LinuxVirtualMachineInboundNatRule {
		return vs[0].([]LinuxVirtualMachineInboundNatRule)[vs[1].(int)]
	}).(LinuxVirtualMachineInboundNatRuleOutput)
}

type ScheduleDailyRecurrence struct {
	// The time each day when the schedule takes effect.
	Time string `pulumi:"time"`
}

// ScheduleDailyRecurrenceInput is an input type that accepts ScheduleDailyRecurrenceArgs and ScheduleDailyRecurrenceOutput values.
// You can construct a concrete instance of `ScheduleDailyRecurrenceInput` via:
//
//          ScheduleDailyRecurrenceArgs{...}
type ScheduleDailyRecurrenceInput interface {
	pulumi.Input

	ToScheduleDailyRecurrenceOutput() ScheduleDailyRecurrenceOutput
	ToScheduleDailyRecurrenceOutputWithContext(context.Context) ScheduleDailyRecurrenceOutput
}

type ScheduleDailyRecurrenceArgs struct {
	// The time each day when the schedule takes effect.
	Time pulumi.StringInput `pulumi:"time"`
}

func (ScheduleDailyRecurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleDailyRecurrence)(nil)).Elem()
}

func (i ScheduleDailyRecurrenceArgs) ToScheduleDailyRecurrenceOutput() ScheduleDailyRecurrenceOutput {
	return i.ToScheduleDailyRecurrenceOutputWithContext(context.Background())
}

func (i ScheduleDailyRecurrenceArgs) ToScheduleDailyRecurrenceOutputWithContext(ctx context.Context) ScheduleDailyRecurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleDailyRecurrenceOutput)
}

func (i ScheduleDailyRecurrenceArgs) ToScheduleDailyRecurrencePtrOutput() ScheduleDailyRecurrencePtrOutput {
	return i.ToScheduleDailyRecurrencePtrOutputWithContext(context.Background())
}

func (i ScheduleDailyRecurrenceArgs) ToScheduleDailyRecurrencePtrOutputWithContext(ctx context.Context) ScheduleDailyRecurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleDailyRecurrenceOutput).ToScheduleDailyRecurrencePtrOutputWithContext(ctx)
}

// ScheduleDailyRecurrencePtrInput is an input type that accepts ScheduleDailyRecurrenceArgs, ScheduleDailyRecurrencePtr and ScheduleDailyRecurrencePtrOutput values.
// You can construct a concrete instance of `ScheduleDailyRecurrencePtrInput` via:
//
//          ScheduleDailyRecurrenceArgs{...}
//
//  or:
//
//          nil
type ScheduleDailyRecurrencePtrInput interface {
	pulumi.Input

	ToScheduleDailyRecurrencePtrOutput() ScheduleDailyRecurrencePtrOutput
	ToScheduleDailyRecurrencePtrOutputWithContext(context.Context) ScheduleDailyRecurrencePtrOutput
}

type scheduleDailyRecurrencePtrType ScheduleDailyRecurrenceArgs

func ScheduleDailyRecurrencePtr(v *ScheduleDailyRecurrenceArgs) ScheduleDailyRecurrencePtrInput {
	return (*scheduleDailyRecurrencePtrType)(v)
}

func (*scheduleDailyRecurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleDailyRecurrence)(nil)).Elem()
}

func (i *scheduleDailyRecurrencePtrType) ToScheduleDailyRecurrencePtrOutput() ScheduleDailyRecurrencePtrOutput {
	return i.ToScheduleDailyRecurrencePtrOutputWithContext(context.Background())
}

func (i *scheduleDailyRecurrencePtrType) ToScheduleDailyRecurrencePtrOutputWithContext(ctx context.Context) ScheduleDailyRecurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleDailyRecurrencePtrOutput)
}

type ScheduleDailyRecurrenceOutput struct{ *pulumi.OutputState }

func (ScheduleDailyRecurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleDailyRecurrence)(nil)).Elem()
}

func (o ScheduleDailyRecurrenceOutput) ToScheduleDailyRecurrenceOutput() ScheduleDailyRecurrenceOutput {
	return o
}

func (o ScheduleDailyRecurrenceOutput) ToScheduleDailyRecurrenceOutputWithContext(ctx context.Context) ScheduleDailyRecurrenceOutput {
	return o
}

func (o ScheduleDailyRecurrenceOutput) ToScheduleDailyRecurrencePtrOutput() ScheduleDailyRecurrencePtrOutput {
	return o.ToScheduleDailyRecurrencePtrOutputWithContext(context.Background())
}

func (o ScheduleDailyRecurrenceOutput) ToScheduleDailyRecurrencePtrOutputWithContext(ctx context.Context) ScheduleDailyRecurrencePtrOutput {
	return o.ApplyT(func(v ScheduleDailyRecurrence) *ScheduleDailyRecurrence {
		return &v
	}).(ScheduleDailyRecurrencePtrOutput)
}

// The time each day when the schedule takes effect.
func (o ScheduleDailyRecurrenceOutput) Time() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleDailyRecurrence) string { return v.Time }).(pulumi.StringOutput)
}

type ScheduleDailyRecurrencePtrOutput struct{ *pulumi.OutputState }

func (ScheduleDailyRecurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleDailyRecurrence)(nil)).Elem()
}

func (o ScheduleDailyRecurrencePtrOutput) ToScheduleDailyRecurrencePtrOutput() ScheduleDailyRecurrencePtrOutput {
	return o
}

func (o ScheduleDailyRecurrencePtrOutput) ToScheduleDailyRecurrencePtrOutputWithContext(ctx context.Context) ScheduleDailyRecurrencePtrOutput {
	return o
}

func (o ScheduleDailyRecurrencePtrOutput) Elem() ScheduleDailyRecurrenceOutput {
	return o.ApplyT(func(v *ScheduleDailyRecurrence) ScheduleDailyRecurrence { return *v }).(ScheduleDailyRecurrenceOutput)
}

// The time each day when the schedule takes effect.
func (o ScheduleDailyRecurrencePtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleDailyRecurrence) *string {
		if v == nil {
			return nil
		}
		return &v.Time
	}).(pulumi.StringPtrOutput)
}

type ScheduleHourlyRecurrence struct {
	Minute int `pulumi:"minute"`
}

// ScheduleHourlyRecurrenceInput is an input type that accepts ScheduleHourlyRecurrenceArgs and ScheduleHourlyRecurrenceOutput values.
// You can construct a concrete instance of `ScheduleHourlyRecurrenceInput` via:
//
//          ScheduleHourlyRecurrenceArgs{...}
type ScheduleHourlyRecurrenceInput interface {
	pulumi.Input

	ToScheduleHourlyRecurrenceOutput() ScheduleHourlyRecurrenceOutput
	ToScheduleHourlyRecurrenceOutputWithContext(context.Context) ScheduleHourlyRecurrenceOutput
}

type ScheduleHourlyRecurrenceArgs struct {
	Minute pulumi.IntInput `pulumi:"minute"`
}

func (ScheduleHourlyRecurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleHourlyRecurrence)(nil)).Elem()
}

func (i ScheduleHourlyRecurrenceArgs) ToScheduleHourlyRecurrenceOutput() ScheduleHourlyRecurrenceOutput {
	return i.ToScheduleHourlyRecurrenceOutputWithContext(context.Background())
}

func (i ScheduleHourlyRecurrenceArgs) ToScheduleHourlyRecurrenceOutputWithContext(ctx context.Context) ScheduleHourlyRecurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleHourlyRecurrenceOutput)
}

func (i ScheduleHourlyRecurrenceArgs) ToScheduleHourlyRecurrencePtrOutput() ScheduleHourlyRecurrencePtrOutput {
	return i.ToScheduleHourlyRecurrencePtrOutputWithContext(context.Background())
}

func (i ScheduleHourlyRecurrenceArgs) ToScheduleHourlyRecurrencePtrOutputWithContext(ctx context.Context) ScheduleHourlyRecurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleHourlyRecurrenceOutput).ToScheduleHourlyRecurrencePtrOutputWithContext(ctx)
}

// ScheduleHourlyRecurrencePtrInput is an input type that accepts ScheduleHourlyRecurrenceArgs, ScheduleHourlyRecurrencePtr and ScheduleHourlyRecurrencePtrOutput values.
// You can construct a concrete instance of `ScheduleHourlyRecurrencePtrInput` via:
//
//          ScheduleHourlyRecurrenceArgs{...}
//
//  or:
//
//          nil
type ScheduleHourlyRecurrencePtrInput interface {
	pulumi.Input

	ToScheduleHourlyRecurrencePtrOutput() ScheduleHourlyRecurrencePtrOutput
	ToScheduleHourlyRecurrencePtrOutputWithContext(context.Context) ScheduleHourlyRecurrencePtrOutput
}

type scheduleHourlyRecurrencePtrType ScheduleHourlyRecurrenceArgs

func ScheduleHourlyRecurrencePtr(v *ScheduleHourlyRecurrenceArgs) ScheduleHourlyRecurrencePtrInput {
	return (*scheduleHourlyRecurrencePtrType)(v)
}

func (*scheduleHourlyRecurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleHourlyRecurrence)(nil)).Elem()
}

func (i *scheduleHourlyRecurrencePtrType) ToScheduleHourlyRecurrencePtrOutput() ScheduleHourlyRecurrencePtrOutput {
	return i.ToScheduleHourlyRecurrencePtrOutputWithContext(context.Background())
}

func (i *scheduleHourlyRecurrencePtrType) ToScheduleHourlyRecurrencePtrOutputWithContext(ctx context.Context) ScheduleHourlyRecurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleHourlyRecurrencePtrOutput)
}

type ScheduleHourlyRecurrenceOutput struct{ *pulumi.OutputState }

func (ScheduleHourlyRecurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleHourlyRecurrence)(nil)).Elem()
}

func (o ScheduleHourlyRecurrenceOutput) ToScheduleHourlyRecurrenceOutput() ScheduleHourlyRecurrenceOutput {
	return o
}

func (o ScheduleHourlyRecurrenceOutput) ToScheduleHourlyRecurrenceOutputWithContext(ctx context.Context) ScheduleHourlyRecurrenceOutput {
	return o
}

func (o ScheduleHourlyRecurrenceOutput) ToScheduleHourlyRecurrencePtrOutput() ScheduleHourlyRecurrencePtrOutput {
	return o.ToScheduleHourlyRecurrencePtrOutputWithContext(context.Background())
}

func (o ScheduleHourlyRecurrenceOutput) ToScheduleHourlyRecurrencePtrOutputWithContext(ctx context.Context) ScheduleHourlyRecurrencePtrOutput {
	return o.ApplyT(func(v ScheduleHourlyRecurrence) *ScheduleHourlyRecurrence {
		return &v
	}).(ScheduleHourlyRecurrencePtrOutput)
}
func (o ScheduleHourlyRecurrenceOutput) Minute() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduleHourlyRecurrence) int { return v.Minute }).(pulumi.IntOutput)
}

type ScheduleHourlyRecurrencePtrOutput struct{ *pulumi.OutputState }

func (ScheduleHourlyRecurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleHourlyRecurrence)(nil)).Elem()
}

func (o ScheduleHourlyRecurrencePtrOutput) ToScheduleHourlyRecurrencePtrOutput() ScheduleHourlyRecurrencePtrOutput {
	return o
}

func (o ScheduleHourlyRecurrencePtrOutput) ToScheduleHourlyRecurrencePtrOutputWithContext(ctx context.Context) ScheduleHourlyRecurrencePtrOutput {
	return o
}

func (o ScheduleHourlyRecurrencePtrOutput) Elem() ScheduleHourlyRecurrenceOutput {
	return o.ApplyT(func(v *ScheduleHourlyRecurrence) ScheduleHourlyRecurrence { return *v }).(ScheduleHourlyRecurrenceOutput)
}

func (o ScheduleHourlyRecurrencePtrOutput) Minute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScheduleHourlyRecurrence) *int {
		if v == nil {
			return nil
		}
		return &v.Minute
	}).(pulumi.IntPtrOutput)
}

type ScheduleNotificationSettings struct {
	// The status of the notification. Possible values are `Enabled` and `Disabled`. Defaults to `Disabled`
	Status *string `pulumi:"status"`
	// Time in minutes before event at which notification will be sent.
	TimeInMinutes *int `pulumi:"timeInMinutes"`
	// The webhook URL to which the notification will be sent.
	WebhookUrl *string `pulumi:"webhookUrl"`
}

// ScheduleNotificationSettingsInput is an input type that accepts ScheduleNotificationSettingsArgs and ScheduleNotificationSettingsOutput values.
// You can construct a concrete instance of `ScheduleNotificationSettingsInput` via:
//
//          ScheduleNotificationSettingsArgs{...}
type ScheduleNotificationSettingsInput interface {
	pulumi.Input

	ToScheduleNotificationSettingsOutput() ScheduleNotificationSettingsOutput
	ToScheduleNotificationSettingsOutputWithContext(context.Context) ScheduleNotificationSettingsOutput
}

type ScheduleNotificationSettingsArgs struct {
	// The status of the notification. Possible values are `Enabled` and `Disabled`. Defaults to `Disabled`
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Time in minutes before event at which notification will be sent.
	TimeInMinutes pulumi.IntPtrInput `pulumi:"timeInMinutes"`
	// The webhook URL to which the notification will be sent.
	WebhookUrl pulumi.StringPtrInput `pulumi:"webhookUrl"`
}

func (ScheduleNotificationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleNotificationSettings)(nil)).Elem()
}

func (i ScheduleNotificationSettingsArgs) ToScheduleNotificationSettingsOutput() ScheduleNotificationSettingsOutput {
	return i.ToScheduleNotificationSettingsOutputWithContext(context.Background())
}

func (i ScheduleNotificationSettingsArgs) ToScheduleNotificationSettingsOutputWithContext(ctx context.Context) ScheduleNotificationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleNotificationSettingsOutput)
}

func (i ScheduleNotificationSettingsArgs) ToScheduleNotificationSettingsPtrOutput() ScheduleNotificationSettingsPtrOutput {
	return i.ToScheduleNotificationSettingsPtrOutputWithContext(context.Background())
}

func (i ScheduleNotificationSettingsArgs) ToScheduleNotificationSettingsPtrOutputWithContext(ctx context.Context) ScheduleNotificationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleNotificationSettingsOutput).ToScheduleNotificationSettingsPtrOutputWithContext(ctx)
}

// ScheduleNotificationSettingsPtrInput is an input type that accepts ScheduleNotificationSettingsArgs, ScheduleNotificationSettingsPtr and ScheduleNotificationSettingsPtrOutput values.
// You can construct a concrete instance of `ScheduleNotificationSettingsPtrInput` via:
//
//          ScheduleNotificationSettingsArgs{...}
//
//  or:
//
//          nil
type ScheduleNotificationSettingsPtrInput interface {
	pulumi.Input

	ToScheduleNotificationSettingsPtrOutput() ScheduleNotificationSettingsPtrOutput
	ToScheduleNotificationSettingsPtrOutputWithContext(context.Context) ScheduleNotificationSettingsPtrOutput
}

type scheduleNotificationSettingsPtrType ScheduleNotificationSettingsArgs

func ScheduleNotificationSettingsPtr(v *ScheduleNotificationSettingsArgs) ScheduleNotificationSettingsPtrInput {
	return (*scheduleNotificationSettingsPtrType)(v)
}

func (*scheduleNotificationSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleNotificationSettings)(nil)).Elem()
}

func (i *scheduleNotificationSettingsPtrType) ToScheduleNotificationSettingsPtrOutput() ScheduleNotificationSettingsPtrOutput {
	return i.ToScheduleNotificationSettingsPtrOutputWithContext(context.Background())
}

func (i *scheduleNotificationSettingsPtrType) ToScheduleNotificationSettingsPtrOutputWithContext(ctx context.Context) ScheduleNotificationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleNotificationSettingsPtrOutput)
}

type ScheduleNotificationSettingsOutput struct{ *pulumi.OutputState }

func (ScheduleNotificationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleNotificationSettings)(nil)).Elem()
}

func (o ScheduleNotificationSettingsOutput) ToScheduleNotificationSettingsOutput() ScheduleNotificationSettingsOutput {
	return o
}

func (o ScheduleNotificationSettingsOutput) ToScheduleNotificationSettingsOutputWithContext(ctx context.Context) ScheduleNotificationSettingsOutput {
	return o
}

func (o ScheduleNotificationSettingsOutput) ToScheduleNotificationSettingsPtrOutput() ScheduleNotificationSettingsPtrOutput {
	return o.ToScheduleNotificationSettingsPtrOutputWithContext(context.Background())
}

func (o ScheduleNotificationSettingsOutput) ToScheduleNotificationSettingsPtrOutputWithContext(ctx context.Context) ScheduleNotificationSettingsPtrOutput {
	return o.ApplyT(func(v ScheduleNotificationSettings) *ScheduleNotificationSettings {
		return &v
	}).(ScheduleNotificationSettingsPtrOutput)
}

// The status of the notification. Possible values are `Enabled` and `Disabled`. Defaults to `Disabled`
func (o ScheduleNotificationSettingsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleNotificationSettings) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Time in minutes before event at which notification will be sent.
func (o ScheduleNotificationSettingsOutput) TimeInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScheduleNotificationSettings) *int { return v.TimeInMinutes }).(pulumi.IntPtrOutput)
}

// The webhook URL to which the notification will be sent.
func (o ScheduleNotificationSettingsOutput) WebhookUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleNotificationSettings) *string { return v.WebhookUrl }).(pulumi.StringPtrOutput)
}

type ScheduleNotificationSettingsPtrOutput struct{ *pulumi.OutputState }

func (ScheduleNotificationSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleNotificationSettings)(nil)).Elem()
}

func (o ScheduleNotificationSettingsPtrOutput) ToScheduleNotificationSettingsPtrOutput() ScheduleNotificationSettingsPtrOutput {
	return o
}

func (o ScheduleNotificationSettingsPtrOutput) ToScheduleNotificationSettingsPtrOutputWithContext(ctx context.Context) ScheduleNotificationSettingsPtrOutput {
	return o
}

func (o ScheduleNotificationSettingsPtrOutput) Elem() ScheduleNotificationSettingsOutput {
	return o.ApplyT(func(v *ScheduleNotificationSettings) ScheduleNotificationSettings { return *v }).(ScheduleNotificationSettingsOutput)
}

// The status of the notification. Possible values are `Enabled` and `Disabled`. Defaults to `Disabled`
func (o ScheduleNotificationSettingsPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleNotificationSettings) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Time in minutes before event at which notification will be sent.
func (o ScheduleNotificationSettingsPtrOutput) TimeInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScheduleNotificationSettings) *int {
		if v == nil {
			return nil
		}
		return v.TimeInMinutes
	}).(pulumi.IntPtrOutput)
}

// The webhook URL to which the notification will be sent.
func (o ScheduleNotificationSettingsPtrOutput) WebhookUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleNotificationSettings) *string {
		if v == nil {
			return nil
		}
		return v.WebhookUrl
	}).(pulumi.StringPtrOutput)
}

type ScheduleWeeklyRecurrence struct {
	// The time when the schedule takes effect.
	Time string `pulumi:"time"`
	// A list of days that this schedule takes effect . Possible values include `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday` and `Sunday`.
	WeekDays []string `pulumi:"weekDays"`
}

// ScheduleWeeklyRecurrenceInput is an input type that accepts ScheduleWeeklyRecurrenceArgs and ScheduleWeeklyRecurrenceOutput values.
// You can construct a concrete instance of `ScheduleWeeklyRecurrenceInput` via:
//
//          ScheduleWeeklyRecurrenceArgs{...}
type ScheduleWeeklyRecurrenceInput interface {
	pulumi.Input

	ToScheduleWeeklyRecurrenceOutput() ScheduleWeeklyRecurrenceOutput
	ToScheduleWeeklyRecurrenceOutputWithContext(context.Context) ScheduleWeeklyRecurrenceOutput
}

type ScheduleWeeklyRecurrenceArgs struct {
	// The time when the schedule takes effect.
	Time pulumi.StringInput `pulumi:"time"`
	// A list of days that this schedule takes effect . Possible values include `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday` and `Sunday`.
	WeekDays pulumi.StringArrayInput `pulumi:"weekDays"`
}

func (ScheduleWeeklyRecurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleWeeklyRecurrence)(nil)).Elem()
}

func (i ScheduleWeeklyRecurrenceArgs) ToScheduleWeeklyRecurrenceOutput() ScheduleWeeklyRecurrenceOutput {
	return i.ToScheduleWeeklyRecurrenceOutputWithContext(context.Background())
}

func (i ScheduleWeeklyRecurrenceArgs) ToScheduleWeeklyRecurrenceOutputWithContext(ctx context.Context) ScheduleWeeklyRecurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleWeeklyRecurrenceOutput)
}

func (i ScheduleWeeklyRecurrenceArgs) ToScheduleWeeklyRecurrencePtrOutput() ScheduleWeeklyRecurrencePtrOutput {
	return i.ToScheduleWeeklyRecurrencePtrOutputWithContext(context.Background())
}

func (i ScheduleWeeklyRecurrenceArgs) ToScheduleWeeklyRecurrencePtrOutputWithContext(ctx context.Context) ScheduleWeeklyRecurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleWeeklyRecurrenceOutput).ToScheduleWeeklyRecurrencePtrOutputWithContext(ctx)
}

// ScheduleWeeklyRecurrencePtrInput is an input type that accepts ScheduleWeeklyRecurrenceArgs, ScheduleWeeklyRecurrencePtr and ScheduleWeeklyRecurrencePtrOutput values.
// You can construct a concrete instance of `ScheduleWeeklyRecurrencePtrInput` via:
//
//          ScheduleWeeklyRecurrenceArgs{...}
//
//  or:
//
//          nil
type ScheduleWeeklyRecurrencePtrInput interface {
	pulumi.Input

	ToScheduleWeeklyRecurrencePtrOutput() ScheduleWeeklyRecurrencePtrOutput
	ToScheduleWeeklyRecurrencePtrOutputWithContext(context.Context) ScheduleWeeklyRecurrencePtrOutput
}

type scheduleWeeklyRecurrencePtrType ScheduleWeeklyRecurrenceArgs

func ScheduleWeeklyRecurrencePtr(v *ScheduleWeeklyRecurrenceArgs) ScheduleWeeklyRecurrencePtrInput {
	return (*scheduleWeeklyRecurrencePtrType)(v)
}

func (*scheduleWeeklyRecurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleWeeklyRecurrence)(nil)).Elem()
}

func (i *scheduleWeeklyRecurrencePtrType) ToScheduleWeeklyRecurrencePtrOutput() ScheduleWeeklyRecurrencePtrOutput {
	return i.ToScheduleWeeklyRecurrencePtrOutputWithContext(context.Background())
}

func (i *scheduleWeeklyRecurrencePtrType) ToScheduleWeeklyRecurrencePtrOutputWithContext(ctx context.Context) ScheduleWeeklyRecurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleWeeklyRecurrencePtrOutput)
}

type ScheduleWeeklyRecurrenceOutput struct{ *pulumi.OutputState }

func (ScheduleWeeklyRecurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleWeeklyRecurrence)(nil)).Elem()
}

func (o ScheduleWeeklyRecurrenceOutput) ToScheduleWeeklyRecurrenceOutput() ScheduleWeeklyRecurrenceOutput {
	return o
}

func (o ScheduleWeeklyRecurrenceOutput) ToScheduleWeeklyRecurrenceOutputWithContext(ctx context.Context) ScheduleWeeklyRecurrenceOutput {
	return o
}

func (o ScheduleWeeklyRecurrenceOutput) ToScheduleWeeklyRecurrencePtrOutput() ScheduleWeeklyRecurrencePtrOutput {
	return o.ToScheduleWeeklyRecurrencePtrOutputWithContext(context.Background())
}

func (o ScheduleWeeklyRecurrenceOutput) ToScheduleWeeklyRecurrencePtrOutputWithContext(ctx context.Context) ScheduleWeeklyRecurrencePtrOutput {
	return o.ApplyT(func(v ScheduleWeeklyRecurrence) *ScheduleWeeklyRecurrence {
		return &v
	}).(ScheduleWeeklyRecurrencePtrOutput)
}

// The time when the schedule takes effect.
func (o ScheduleWeeklyRecurrenceOutput) Time() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleWeeklyRecurrence) string { return v.Time }).(pulumi.StringOutput)
}

// A list of days that this schedule takes effect . Possible values include `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday` and `Sunday`.
func (o ScheduleWeeklyRecurrenceOutput) WeekDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScheduleWeeklyRecurrence) []string { return v.WeekDays }).(pulumi.StringArrayOutput)
}

type ScheduleWeeklyRecurrencePtrOutput struct{ *pulumi.OutputState }

func (ScheduleWeeklyRecurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleWeeklyRecurrence)(nil)).Elem()
}

func (o ScheduleWeeklyRecurrencePtrOutput) ToScheduleWeeklyRecurrencePtrOutput() ScheduleWeeklyRecurrencePtrOutput {
	return o
}

func (o ScheduleWeeklyRecurrencePtrOutput) ToScheduleWeeklyRecurrencePtrOutputWithContext(ctx context.Context) ScheduleWeeklyRecurrencePtrOutput {
	return o
}

func (o ScheduleWeeklyRecurrencePtrOutput) Elem() ScheduleWeeklyRecurrenceOutput {
	return o.ApplyT(func(v *ScheduleWeeklyRecurrence) ScheduleWeeklyRecurrence { return *v }).(ScheduleWeeklyRecurrenceOutput)
}

// The time when the schedule takes effect.
func (o ScheduleWeeklyRecurrencePtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleWeeklyRecurrence) *string {
		if v == nil {
			return nil
		}
		return &v.Time
	}).(pulumi.StringPtrOutput)
}

// A list of days that this schedule takes effect . Possible values include `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday` and `Sunday`.
func (o ScheduleWeeklyRecurrencePtrOutput) WeekDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScheduleWeeklyRecurrence) []string {
		if v == nil {
			return nil
		}
		return v.WeekDays
	}).(pulumi.StringArrayOutput)
}

type VirtualNetworkSubnet struct {
	// Specifies the name of the Dev Test Virtual Network. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Can this subnet be used for creating Virtual Machines? Possible values are `Allow`, `Default` and `Deny`.
	UseInVirtualMachineCreation *string `pulumi:"useInVirtualMachineCreation"`
	// Can Virtual Machines in this Subnet use Public IP Addresses? Possible values are `Allow`, `Default` and `Deny`.
	UsePublicIpAddress *string `pulumi:"usePublicIpAddress"`
}

// VirtualNetworkSubnetInput is an input type that accepts VirtualNetworkSubnetArgs and VirtualNetworkSubnetOutput values.
// You can construct a concrete instance of `VirtualNetworkSubnetInput` via:
//
//          VirtualNetworkSubnetArgs{...}
type VirtualNetworkSubnetInput interface {
	pulumi.Input

	ToVirtualNetworkSubnetOutput() VirtualNetworkSubnetOutput
	ToVirtualNetworkSubnetOutputWithContext(context.Context) VirtualNetworkSubnetOutput
}

type VirtualNetworkSubnetArgs struct {
	// Specifies the name of the Dev Test Virtual Network. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Can this subnet be used for creating Virtual Machines? Possible values are `Allow`, `Default` and `Deny`.
	UseInVirtualMachineCreation pulumi.StringPtrInput `pulumi:"useInVirtualMachineCreation"`
	// Can Virtual Machines in this Subnet use Public IP Addresses? Possible values are `Allow`, `Default` and `Deny`.
	UsePublicIpAddress pulumi.StringPtrInput `pulumi:"usePublicIpAddress"`
}

func (VirtualNetworkSubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkSubnet)(nil)).Elem()
}

func (i VirtualNetworkSubnetArgs) ToVirtualNetworkSubnetOutput() VirtualNetworkSubnetOutput {
	return i.ToVirtualNetworkSubnetOutputWithContext(context.Background())
}

func (i VirtualNetworkSubnetArgs) ToVirtualNetworkSubnetOutputWithContext(ctx context.Context) VirtualNetworkSubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkSubnetOutput)
}

func (i VirtualNetworkSubnetArgs) ToVirtualNetworkSubnetPtrOutput() VirtualNetworkSubnetPtrOutput {
	return i.ToVirtualNetworkSubnetPtrOutputWithContext(context.Background())
}

func (i VirtualNetworkSubnetArgs) ToVirtualNetworkSubnetPtrOutputWithContext(ctx context.Context) VirtualNetworkSubnetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkSubnetOutput).ToVirtualNetworkSubnetPtrOutputWithContext(ctx)
}

// VirtualNetworkSubnetPtrInput is an input type that accepts VirtualNetworkSubnetArgs, VirtualNetworkSubnetPtr and VirtualNetworkSubnetPtrOutput values.
// You can construct a concrete instance of `VirtualNetworkSubnetPtrInput` via:
//
//          VirtualNetworkSubnetArgs{...}
//
//  or:
//
//          nil
type VirtualNetworkSubnetPtrInput interface {
	pulumi.Input

	ToVirtualNetworkSubnetPtrOutput() VirtualNetworkSubnetPtrOutput
	ToVirtualNetworkSubnetPtrOutputWithContext(context.Context) VirtualNetworkSubnetPtrOutput
}

type virtualNetworkSubnetPtrType VirtualNetworkSubnetArgs

func VirtualNetworkSubnetPtr(v *VirtualNetworkSubnetArgs) VirtualNetworkSubnetPtrInput {
	return (*virtualNetworkSubnetPtrType)(v)
}

func (*virtualNetworkSubnetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNetworkSubnet)(nil)).Elem()
}

func (i *virtualNetworkSubnetPtrType) ToVirtualNetworkSubnetPtrOutput() VirtualNetworkSubnetPtrOutput {
	return i.ToVirtualNetworkSubnetPtrOutputWithContext(context.Background())
}

func (i *virtualNetworkSubnetPtrType) ToVirtualNetworkSubnetPtrOutputWithContext(ctx context.Context) VirtualNetworkSubnetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkSubnetPtrOutput)
}

type VirtualNetworkSubnetOutput struct{ *pulumi.OutputState }

func (VirtualNetworkSubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkSubnet)(nil)).Elem()
}

func (o VirtualNetworkSubnetOutput) ToVirtualNetworkSubnetOutput() VirtualNetworkSubnetOutput {
	return o
}

func (o VirtualNetworkSubnetOutput) ToVirtualNetworkSubnetOutputWithContext(ctx context.Context) VirtualNetworkSubnetOutput {
	return o
}

func (o VirtualNetworkSubnetOutput) ToVirtualNetworkSubnetPtrOutput() VirtualNetworkSubnetPtrOutput {
	return o.ToVirtualNetworkSubnetPtrOutputWithContext(context.Background())
}

func (o VirtualNetworkSubnetOutput) ToVirtualNetworkSubnetPtrOutputWithContext(ctx context.Context) VirtualNetworkSubnetPtrOutput {
	return o.ApplyT(func(v VirtualNetworkSubnet) *VirtualNetworkSubnet {
		return &v
	}).(VirtualNetworkSubnetPtrOutput)
}

// Specifies the name of the Dev Test Virtual Network. Changing this forces a new resource to be created.
func (o VirtualNetworkSubnetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualNetworkSubnet) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Can this subnet be used for creating Virtual Machines? Possible values are `Allow`, `Default` and `Deny`.
func (o VirtualNetworkSubnetOutput) UseInVirtualMachineCreation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualNetworkSubnet) *string { return v.UseInVirtualMachineCreation }).(pulumi.StringPtrOutput)
}

// Can Virtual Machines in this Subnet use Public IP Addresses? Possible values are `Allow`, `Default` and `Deny`.
func (o VirtualNetworkSubnetOutput) UsePublicIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualNetworkSubnet) *string { return v.UsePublicIpAddress }).(pulumi.StringPtrOutput)
}

type VirtualNetworkSubnetPtrOutput struct{ *pulumi.OutputState }

func (VirtualNetworkSubnetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNetworkSubnet)(nil)).Elem()
}

func (o VirtualNetworkSubnetPtrOutput) ToVirtualNetworkSubnetPtrOutput() VirtualNetworkSubnetPtrOutput {
	return o
}

func (o VirtualNetworkSubnetPtrOutput) ToVirtualNetworkSubnetPtrOutputWithContext(ctx context.Context) VirtualNetworkSubnetPtrOutput {
	return o
}

func (o VirtualNetworkSubnetPtrOutput) Elem() VirtualNetworkSubnetOutput {
	return o.ApplyT(func(v *VirtualNetworkSubnet) VirtualNetworkSubnet { return *v }).(VirtualNetworkSubnetOutput)
}

// Specifies the name of the Dev Test Virtual Network. Changing this forces a new resource to be created.
func (o VirtualNetworkSubnetPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualNetworkSubnet) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Can this subnet be used for creating Virtual Machines? Possible values are `Allow`, `Default` and `Deny`.
func (o VirtualNetworkSubnetPtrOutput) UseInVirtualMachineCreation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualNetworkSubnet) *string {
		if v == nil {
			return nil
		}
		return v.UseInVirtualMachineCreation
	}).(pulumi.StringPtrOutput)
}

// Can Virtual Machines in this Subnet use Public IP Addresses? Possible values are `Allow`, `Default` and `Deny`.
func (o VirtualNetworkSubnetPtrOutput) UsePublicIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualNetworkSubnet) *string {
		if v == nil {
			return nil
		}
		return v.UsePublicIpAddress
	}).(pulumi.StringPtrOutput)
}

type WindowsVirtualMachineGalleryImageReference struct {
	// The Offer of the Gallery Image. Changing this forces a new resource to be created.
	Offer string `pulumi:"offer"`
	// The Publisher of the Gallery Image. Changing this forces a new resource to be created.
	Publisher string `pulumi:"publisher"`
	// The SKU of the Gallery Image. Changing this forces a new resource to be created.
	Sku string `pulumi:"sku"`
	// The Version of the Gallery Image. Changing this forces a new resource to be created.
	Version string `pulumi:"version"`
}

// WindowsVirtualMachineGalleryImageReferenceInput is an input type that accepts WindowsVirtualMachineGalleryImageReferenceArgs and WindowsVirtualMachineGalleryImageReferenceOutput values.
// You can construct a concrete instance of `WindowsVirtualMachineGalleryImageReferenceInput` via:
//
//          WindowsVirtualMachineGalleryImageReferenceArgs{...}
type WindowsVirtualMachineGalleryImageReferenceInput interface {
	pulumi.Input

	ToWindowsVirtualMachineGalleryImageReferenceOutput() WindowsVirtualMachineGalleryImageReferenceOutput
	ToWindowsVirtualMachineGalleryImageReferenceOutputWithContext(context.Context) WindowsVirtualMachineGalleryImageReferenceOutput
}

type WindowsVirtualMachineGalleryImageReferenceArgs struct {
	// The Offer of the Gallery Image. Changing this forces a new resource to be created.
	Offer pulumi.StringInput `pulumi:"offer"`
	// The Publisher of the Gallery Image. Changing this forces a new resource to be created.
	Publisher pulumi.StringInput `pulumi:"publisher"`
	// The SKU of the Gallery Image. Changing this forces a new resource to be created.
	Sku pulumi.StringInput `pulumi:"sku"`
	// The Version of the Gallery Image. Changing this forces a new resource to be created.
	Version pulumi.StringInput `pulumi:"version"`
}

func (WindowsVirtualMachineGalleryImageReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsVirtualMachineGalleryImageReference)(nil)).Elem()
}

func (i WindowsVirtualMachineGalleryImageReferenceArgs) ToWindowsVirtualMachineGalleryImageReferenceOutput() WindowsVirtualMachineGalleryImageReferenceOutput {
	return i.ToWindowsVirtualMachineGalleryImageReferenceOutputWithContext(context.Background())
}

func (i WindowsVirtualMachineGalleryImageReferenceArgs) ToWindowsVirtualMachineGalleryImageReferenceOutputWithContext(ctx context.Context) WindowsVirtualMachineGalleryImageReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsVirtualMachineGalleryImageReferenceOutput)
}

func (i WindowsVirtualMachineGalleryImageReferenceArgs) ToWindowsVirtualMachineGalleryImageReferencePtrOutput() WindowsVirtualMachineGalleryImageReferencePtrOutput {
	return i.ToWindowsVirtualMachineGalleryImageReferencePtrOutputWithContext(context.Background())
}

func (i WindowsVirtualMachineGalleryImageReferenceArgs) ToWindowsVirtualMachineGalleryImageReferencePtrOutputWithContext(ctx context.Context) WindowsVirtualMachineGalleryImageReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsVirtualMachineGalleryImageReferenceOutput).ToWindowsVirtualMachineGalleryImageReferencePtrOutputWithContext(ctx)
}

// WindowsVirtualMachineGalleryImageReferencePtrInput is an input type that accepts WindowsVirtualMachineGalleryImageReferenceArgs, WindowsVirtualMachineGalleryImageReferencePtr and WindowsVirtualMachineGalleryImageReferencePtrOutput values.
// You can construct a concrete instance of `WindowsVirtualMachineGalleryImageReferencePtrInput` via:
//
//          WindowsVirtualMachineGalleryImageReferenceArgs{...}
//
//  or:
//
//          nil
type WindowsVirtualMachineGalleryImageReferencePtrInput interface {
	pulumi.Input

	ToWindowsVirtualMachineGalleryImageReferencePtrOutput() WindowsVirtualMachineGalleryImageReferencePtrOutput
	ToWindowsVirtualMachineGalleryImageReferencePtrOutputWithContext(context.Context) WindowsVirtualMachineGalleryImageReferencePtrOutput
}

type windowsVirtualMachineGalleryImageReferencePtrType WindowsVirtualMachineGalleryImageReferenceArgs

func WindowsVirtualMachineGalleryImageReferencePtr(v *WindowsVirtualMachineGalleryImageReferenceArgs) WindowsVirtualMachineGalleryImageReferencePtrInput {
	return (*windowsVirtualMachineGalleryImageReferencePtrType)(v)
}

func (*windowsVirtualMachineGalleryImageReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsVirtualMachineGalleryImageReference)(nil)).Elem()
}

func (i *windowsVirtualMachineGalleryImageReferencePtrType) ToWindowsVirtualMachineGalleryImageReferencePtrOutput() WindowsVirtualMachineGalleryImageReferencePtrOutput {
	return i.ToWindowsVirtualMachineGalleryImageReferencePtrOutputWithContext(context.Background())
}

func (i *windowsVirtualMachineGalleryImageReferencePtrType) ToWindowsVirtualMachineGalleryImageReferencePtrOutputWithContext(ctx context.Context) WindowsVirtualMachineGalleryImageReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsVirtualMachineGalleryImageReferencePtrOutput)
}

type WindowsVirtualMachineGalleryImageReferenceOutput struct{ *pulumi.OutputState }

func (WindowsVirtualMachineGalleryImageReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsVirtualMachineGalleryImageReference)(nil)).Elem()
}

func (o WindowsVirtualMachineGalleryImageReferenceOutput) ToWindowsVirtualMachineGalleryImageReferenceOutput() WindowsVirtualMachineGalleryImageReferenceOutput {
	return o
}

func (o WindowsVirtualMachineGalleryImageReferenceOutput) ToWindowsVirtualMachineGalleryImageReferenceOutputWithContext(ctx context.Context) WindowsVirtualMachineGalleryImageReferenceOutput {
	return o
}

func (o WindowsVirtualMachineGalleryImageReferenceOutput) ToWindowsVirtualMachineGalleryImageReferencePtrOutput() WindowsVirtualMachineGalleryImageReferencePtrOutput {
	return o.ToWindowsVirtualMachineGalleryImageReferencePtrOutputWithContext(context.Background())
}

func (o WindowsVirtualMachineGalleryImageReferenceOutput) ToWindowsVirtualMachineGalleryImageReferencePtrOutputWithContext(ctx context.Context) WindowsVirtualMachineGalleryImageReferencePtrOutput {
	return o.ApplyT(func(v WindowsVirtualMachineGalleryImageReference) *WindowsVirtualMachineGalleryImageReference {
		return &v
	}).(WindowsVirtualMachineGalleryImageReferencePtrOutput)
}

// The Offer of the Gallery Image. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineGalleryImageReferenceOutput) Offer() pulumi.StringOutput {
	return o.ApplyT(func(v WindowsVirtualMachineGalleryImageReference) string { return v.Offer }).(pulumi.StringOutput)
}

// The Publisher of the Gallery Image. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineGalleryImageReferenceOutput) Publisher() pulumi.StringOutput {
	return o.ApplyT(func(v WindowsVirtualMachineGalleryImageReference) string { return v.Publisher }).(pulumi.StringOutput)
}

// The SKU of the Gallery Image. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineGalleryImageReferenceOutput) Sku() pulumi.StringOutput {
	return o.ApplyT(func(v WindowsVirtualMachineGalleryImageReference) string { return v.Sku }).(pulumi.StringOutput)
}

// The Version of the Gallery Image. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineGalleryImageReferenceOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v WindowsVirtualMachineGalleryImageReference) string { return v.Version }).(pulumi.StringOutput)
}

type WindowsVirtualMachineGalleryImageReferencePtrOutput struct{ *pulumi.OutputState }

func (WindowsVirtualMachineGalleryImageReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsVirtualMachineGalleryImageReference)(nil)).Elem()
}

func (o WindowsVirtualMachineGalleryImageReferencePtrOutput) ToWindowsVirtualMachineGalleryImageReferencePtrOutput() WindowsVirtualMachineGalleryImageReferencePtrOutput {
	return o
}

func (o WindowsVirtualMachineGalleryImageReferencePtrOutput) ToWindowsVirtualMachineGalleryImageReferencePtrOutputWithContext(ctx context.Context) WindowsVirtualMachineGalleryImageReferencePtrOutput {
	return o
}

func (o WindowsVirtualMachineGalleryImageReferencePtrOutput) Elem() WindowsVirtualMachineGalleryImageReferenceOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineGalleryImageReference) WindowsVirtualMachineGalleryImageReference {
		return *v
	}).(WindowsVirtualMachineGalleryImageReferenceOutput)
}

// The Offer of the Gallery Image. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineGalleryImageReferencePtrOutput) Offer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineGalleryImageReference) *string {
		if v == nil {
			return nil
		}
		return &v.Offer
	}).(pulumi.StringPtrOutput)
}

// The Publisher of the Gallery Image. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineGalleryImageReferencePtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineGalleryImageReference) *string {
		if v == nil {
			return nil
		}
		return &v.Publisher
	}).(pulumi.StringPtrOutput)
}

// The SKU of the Gallery Image. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineGalleryImageReferencePtrOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineGalleryImageReference) *string {
		if v == nil {
			return nil
		}
		return &v.Sku
	}).(pulumi.StringPtrOutput)
}

// The Version of the Gallery Image. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineGalleryImageReferencePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineGalleryImageReference) *string {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(pulumi.StringPtrOutput)
}

type WindowsVirtualMachineInboundNatRule struct {
	// The Backend Port associated with this NAT Rule. Changing this forces a new resource to be created.
	BackendPort int `pulumi:"backendPort"`
	// The frontend port associated with this Inbound NAT Rule.
	FrontendPort *int `pulumi:"frontendPort"`
	// The Protocol used for this NAT Rule. Possible values are `Tcp` and `Udp`. Changing this forces a new resource to be created.
	Protocol string `pulumi:"protocol"`
}

// WindowsVirtualMachineInboundNatRuleInput is an input type that accepts WindowsVirtualMachineInboundNatRuleArgs and WindowsVirtualMachineInboundNatRuleOutput values.
// You can construct a concrete instance of `WindowsVirtualMachineInboundNatRuleInput` via:
//
//          WindowsVirtualMachineInboundNatRuleArgs{...}
type WindowsVirtualMachineInboundNatRuleInput interface {
	pulumi.Input

	ToWindowsVirtualMachineInboundNatRuleOutput() WindowsVirtualMachineInboundNatRuleOutput
	ToWindowsVirtualMachineInboundNatRuleOutputWithContext(context.Context) WindowsVirtualMachineInboundNatRuleOutput
}

type WindowsVirtualMachineInboundNatRuleArgs struct {
	// The Backend Port associated with this NAT Rule. Changing this forces a new resource to be created.
	BackendPort pulumi.IntInput `pulumi:"backendPort"`
	// The frontend port associated with this Inbound NAT Rule.
	FrontendPort pulumi.IntPtrInput `pulumi:"frontendPort"`
	// The Protocol used for this NAT Rule. Possible values are `Tcp` and `Udp`. Changing this forces a new resource to be created.
	Protocol pulumi.StringInput `pulumi:"protocol"`
}

func (WindowsVirtualMachineInboundNatRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsVirtualMachineInboundNatRule)(nil)).Elem()
}

func (i WindowsVirtualMachineInboundNatRuleArgs) ToWindowsVirtualMachineInboundNatRuleOutput() WindowsVirtualMachineInboundNatRuleOutput {
	return i.ToWindowsVirtualMachineInboundNatRuleOutputWithContext(context.Background())
}

func (i WindowsVirtualMachineInboundNatRuleArgs) ToWindowsVirtualMachineInboundNatRuleOutputWithContext(ctx context.Context) WindowsVirtualMachineInboundNatRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsVirtualMachineInboundNatRuleOutput)
}

// WindowsVirtualMachineInboundNatRuleArrayInput is an input type that accepts WindowsVirtualMachineInboundNatRuleArray and WindowsVirtualMachineInboundNatRuleArrayOutput values.
// You can construct a concrete instance of `WindowsVirtualMachineInboundNatRuleArrayInput` via:
//
//          WindowsVirtualMachineInboundNatRuleArray{ WindowsVirtualMachineInboundNatRuleArgs{...} }
type WindowsVirtualMachineInboundNatRuleArrayInput interface {
	pulumi.Input

	ToWindowsVirtualMachineInboundNatRuleArrayOutput() WindowsVirtualMachineInboundNatRuleArrayOutput
	ToWindowsVirtualMachineInboundNatRuleArrayOutputWithContext(context.Context) WindowsVirtualMachineInboundNatRuleArrayOutput
}

type WindowsVirtualMachineInboundNatRuleArray []WindowsVirtualMachineInboundNatRuleInput

func (WindowsVirtualMachineInboundNatRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WindowsVirtualMachineInboundNatRule)(nil)).Elem()
}

func (i WindowsVirtualMachineInboundNatRuleArray) ToWindowsVirtualMachineInboundNatRuleArrayOutput() WindowsVirtualMachineInboundNatRuleArrayOutput {
	return i.ToWindowsVirtualMachineInboundNatRuleArrayOutputWithContext(context.Background())
}

func (i WindowsVirtualMachineInboundNatRuleArray) ToWindowsVirtualMachineInboundNatRuleArrayOutputWithContext(ctx context.Context) WindowsVirtualMachineInboundNatRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsVirtualMachineInboundNatRuleArrayOutput)
}

type WindowsVirtualMachineInboundNatRuleOutput struct{ *pulumi.OutputState }

func (WindowsVirtualMachineInboundNatRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsVirtualMachineInboundNatRule)(nil)).Elem()
}

func (o WindowsVirtualMachineInboundNatRuleOutput) ToWindowsVirtualMachineInboundNatRuleOutput() WindowsVirtualMachineInboundNatRuleOutput {
	return o
}

func (o WindowsVirtualMachineInboundNatRuleOutput) ToWindowsVirtualMachineInboundNatRuleOutputWithContext(ctx context.Context) WindowsVirtualMachineInboundNatRuleOutput {
	return o
}

// The Backend Port associated with this NAT Rule. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineInboundNatRuleOutput) BackendPort() pulumi.IntOutput {
	return o.ApplyT(func(v WindowsVirtualMachineInboundNatRule) int { return v.BackendPort }).(pulumi.IntOutput)
}

// The frontend port associated with this Inbound NAT Rule.
func (o WindowsVirtualMachineInboundNatRuleOutput) FrontendPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WindowsVirtualMachineInboundNatRule) *int { return v.FrontendPort }).(pulumi.IntPtrOutput)
}

// The Protocol used for this NAT Rule. Possible values are `Tcp` and `Udp`. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineInboundNatRuleOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v WindowsVirtualMachineInboundNatRule) string { return v.Protocol }).(pulumi.StringOutput)
}

type WindowsVirtualMachineInboundNatRuleArrayOutput struct{ *pulumi.OutputState }

func (WindowsVirtualMachineInboundNatRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WindowsVirtualMachineInboundNatRule)(nil)).Elem()
}

func (o WindowsVirtualMachineInboundNatRuleArrayOutput) ToWindowsVirtualMachineInboundNatRuleArrayOutput() WindowsVirtualMachineInboundNatRuleArrayOutput {
	return o
}

func (o WindowsVirtualMachineInboundNatRuleArrayOutput) ToWindowsVirtualMachineInboundNatRuleArrayOutputWithContext(ctx context.Context) WindowsVirtualMachineInboundNatRuleArrayOutput {
	return o
}

func (o WindowsVirtualMachineInboundNatRuleArrayOutput) Index(i pulumi.IntInput) WindowsVirtualMachineInboundNatRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WindowsVirtualMachineInboundNatRule {
		return vs[0].([]WindowsVirtualMachineInboundNatRule)[vs[1].(int)]
	}).(WindowsVirtualMachineInboundNatRuleOutput)
}

type GetVirtualNetworkAllowedSubnet struct {
	// Indicates if this subnet allows public IP addresses. Possible values are `Allow`, `Default` and `Deny`.
	AllowPublicIp string `pulumi:"allowPublicIp"`
	// The name of the subnet.
	LabSubnetName string `pulumi:"labSubnetName"`
	// The resource identifier for the subnet.
	ResourceId string `pulumi:"resourceId"`
}

// GetVirtualNetworkAllowedSubnetInput is an input type that accepts GetVirtualNetworkAllowedSubnetArgs and GetVirtualNetworkAllowedSubnetOutput values.
// You can construct a concrete instance of `GetVirtualNetworkAllowedSubnetInput` via:
//
//          GetVirtualNetworkAllowedSubnetArgs{...}
type GetVirtualNetworkAllowedSubnetInput interface {
	pulumi.Input

	ToGetVirtualNetworkAllowedSubnetOutput() GetVirtualNetworkAllowedSubnetOutput
	ToGetVirtualNetworkAllowedSubnetOutputWithContext(context.Context) GetVirtualNetworkAllowedSubnetOutput
}

type GetVirtualNetworkAllowedSubnetArgs struct {
	// Indicates if this subnet allows public IP addresses. Possible values are `Allow`, `Default` and `Deny`.
	AllowPublicIp pulumi.StringInput `pulumi:"allowPublicIp"`
	// The name of the subnet.
	LabSubnetName pulumi.StringInput `pulumi:"labSubnetName"`
	// The resource identifier for the subnet.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
}

func (GetVirtualNetworkAllowedSubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNetworkAllowedSubnet)(nil)).Elem()
}

func (i GetVirtualNetworkAllowedSubnetArgs) ToGetVirtualNetworkAllowedSubnetOutput() GetVirtualNetworkAllowedSubnetOutput {
	return i.ToGetVirtualNetworkAllowedSubnetOutputWithContext(context.Background())
}

func (i GetVirtualNetworkAllowedSubnetArgs) ToGetVirtualNetworkAllowedSubnetOutputWithContext(ctx context.Context) GetVirtualNetworkAllowedSubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNetworkAllowedSubnetOutput)
}

// GetVirtualNetworkAllowedSubnetArrayInput is an input type that accepts GetVirtualNetworkAllowedSubnetArray and GetVirtualNetworkAllowedSubnetArrayOutput values.
// You can construct a concrete instance of `GetVirtualNetworkAllowedSubnetArrayInput` via:
//
//          GetVirtualNetworkAllowedSubnetArray{ GetVirtualNetworkAllowedSubnetArgs{...} }
type GetVirtualNetworkAllowedSubnetArrayInput interface {
	pulumi.Input

	ToGetVirtualNetworkAllowedSubnetArrayOutput() GetVirtualNetworkAllowedSubnetArrayOutput
	ToGetVirtualNetworkAllowedSubnetArrayOutputWithContext(context.Context) GetVirtualNetworkAllowedSubnetArrayOutput
}

type GetVirtualNetworkAllowedSubnetArray []GetVirtualNetworkAllowedSubnetInput

func (GetVirtualNetworkAllowedSubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVirtualNetworkAllowedSubnet)(nil)).Elem()
}

func (i GetVirtualNetworkAllowedSubnetArray) ToGetVirtualNetworkAllowedSubnetArrayOutput() GetVirtualNetworkAllowedSubnetArrayOutput {
	return i.ToGetVirtualNetworkAllowedSubnetArrayOutputWithContext(context.Background())
}

func (i GetVirtualNetworkAllowedSubnetArray) ToGetVirtualNetworkAllowedSubnetArrayOutputWithContext(ctx context.Context) GetVirtualNetworkAllowedSubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNetworkAllowedSubnetArrayOutput)
}

type GetVirtualNetworkAllowedSubnetOutput struct{ *pulumi.OutputState }

func (GetVirtualNetworkAllowedSubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNetworkAllowedSubnet)(nil)).Elem()
}

func (o GetVirtualNetworkAllowedSubnetOutput) ToGetVirtualNetworkAllowedSubnetOutput() GetVirtualNetworkAllowedSubnetOutput {
	return o
}

func (o GetVirtualNetworkAllowedSubnetOutput) ToGetVirtualNetworkAllowedSubnetOutputWithContext(ctx context.Context) GetVirtualNetworkAllowedSubnetOutput {
	return o
}

// Indicates if this subnet allows public IP addresses. Possible values are `Allow`, `Default` and `Deny`.
func (o GetVirtualNetworkAllowedSubnetOutput) AllowPublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualNetworkAllowedSubnet) string { return v.AllowPublicIp }).(pulumi.StringOutput)
}

// The name of the subnet.
func (o GetVirtualNetworkAllowedSubnetOutput) LabSubnetName() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualNetworkAllowedSubnet) string { return v.LabSubnetName }).(pulumi.StringOutput)
}

// The resource identifier for the subnet.
func (o GetVirtualNetworkAllowedSubnetOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualNetworkAllowedSubnet) string { return v.ResourceId }).(pulumi.StringOutput)
}

type GetVirtualNetworkAllowedSubnetArrayOutput struct{ *pulumi.OutputState }

func (GetVirtualNetworkAllowedSubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVirtualNetworkAllowedSubnet)(nil)).Elem()
}

func (o GetVirtualNetworkAllowedSubnetArrayOutput) ToGetVirtualNetworkAllowedSubnetArrayOutput() GetVirtualNetworkAllowedSubnetArrayOutput {
	return o
}

func (o GetVirtualNetworkAllowedSubnetArrayOutput) ToGetVirtualNetworkAllowedSubnetArrayOutputWithContext(ctx context.Context) GetVirtualNetworkAllowedSubnetArrayOutput {
	return o
}

func (o GetVirtualNetworkAllowedSubnetArrayOutput) Index(i pulumi.IntInput) GetVirtualNetworkAllowedSubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVirtualNetworkAllowedSubnet {
		return vs[0].([]GetVirtualNetworkAllowedSubnet)[vs[1].(int)]
	}).(GetVirtualNetworkAllowedSubnetOutput)
}

type GetVirtualNetworkSubnetOverride struct {
	// The name of the subnet.
	LabSubnetName string `pulumi:"labSubnetName"`
	// The resource identifier for the subnet.
	ResourceId string `pulumi:"resourceId"`
	// Indicates if the subnet can be used for VM creation.  Possible values are `Allow`, `Default` and `Deny`.
	UseInVmCreationPermission    string `pulumi:"useInVmCreationPermission"`
	UsePublicIpAddressPermission string `pulumi:"usePublicIpAddressPermission"`
	// The virtual network pool associated with this subnet.
	VirtualNetworkPoolName string `pulumi:"virtualNetworkPoolName"`
}

// GetVirtualNetworkSubnetOverrideInput is an input type that accepts GetVirtualNetworkSubnetOverrideArgs and GetVirtualNetworkSubnetOverrideOutput values.
// You can construct a concrete instance of `GetVirtualNetworkSubnetOverrideInput` via:
//
//          GetVirtualNetworkSubnetOverrideArgs{...}
type GetVirtualNetworkSubnetOverrideInput interface {
	pulumi.Input

	ToGetVirtualNetworkSubnetOverrideOutput() GetVirtualNetworkSubnetOverrideOutput
	ToGetVirtualNetworkSubnetOverrideOutputWithContext(context.Context) GetVirtualNetworkSubnetOverrideOutput
}

type GetVirtualNetworkSubnetOverrideArgs struct {
	// The name of the subnet.
	LabSubnetName pulumi.StringInput `pulumi:"labSubnetName"`
	// The resource identifier for the subnet.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// Indicates if the subnet can be used for VM creation.  Possible values are `Allow`, `Default` and `Deny`.
	UseInVmCreationPermission    pulumi.StringInput `pulumi:"useInVmCreationPermission"`
	UsePublicIpAddressPermission pulumi.StringInput `pulumi:"usePublicIpAddressPermission"`
	// The virtual network pool associated with this subnet.
	VirtualNetworkPoolName pulumi.StringInput `pulumi:"virtualNetworkPoolName"`
}

func (GetVirtualNetworkSubnetOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNetworkSubnetOverride)(nil)).Elem()
}

func (i GetVirtualNetworkSubnetOverrideArgs) ToGetVirtualNetworkSubnetOverrideOutput() GetVirtualNetworkSubnetOverrideOutput {
	return i.ToGetVirtualNetworkSubnetOverrideOutputWithContext(context.Background())
}

func (i GetVirtualNetworkSubnetOverrideArgs) ToGetVirtualNetworkSubnetOverrideOutputWithContext(ctx context.Context) GetVirtualNetworkSubnetOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNetworkSubnetOverrideOutput)
}

// GetVirtualNetworkSubnetOverrideArrayInput is an input type that accepts GetVirtualNetworkSubnetOverrideArray and GetVirtualNetworkSubnetOverrideArrayOutput values.
// You can construct a concrete instance of `GetVirtualNetworkSubnetOverrideArrayInput` via:
//
//          GetVirtualNetworkSubnetOverrideArray{ GetVirtualNetworkSubnetOverrideArgs{...} }
type GetVirtualNetworkSubnetOverrideArrayInput interface {
	pulumi.Input

	ToGetVirtualNetworkSubnetOverrideArrayOutput() GetVirtualNetworkSubnetOverrideArrayOutput
	ToGetVirtualNetworkSubnetOverrideArrayOutputWithContext(context.Context) GetVirtualNetworkSubnetOverrideArrayOutput
}

type GetVirtualNetworkSubnetOverrideArray []GetVirtualNetworkSubnetOverrideInput

func (GetVirtualNetworkSubnetOverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVirtualNetworkSubnetOverride)(nil)).Elem()
}

func (i GetVirtualNetworkSubnetOverrideArray) ToGetVirtualNetworkSubnetOverrideArrayOutput() GetVirtualNetworkSubnetOverrideArrayOutput {
	return i.ToGetVirtualNetworkSubnetOverrideArrayOutputWithContext(context.Background())
}

func (i GetVirtualNetworkSubnetOverrideArray) ToGetVirtualNetworkSubnetOverrideArrayOutputWithContext(ctx context.Context) GetVirtualNetworkSubnetOverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVirtualNetworkSubnetOverrideArrayOutput)
}

type GetVirtualNetworkSubnetOverrideOutput struct{ *pulumi.OutputState }

func (GetVirtualNetworkSubnetOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualNetworkSubnetOverride)(nil)).Elem()
}

func (o GetVirtualNetworkSubnetOverrideOutput) ToGetVirtualNetworkSubnetOverrideOutput() GetVirtualNetworkSubnetOverrideOutput {
	return o
}

func (o GetVirtualNetworkSubnetOverrideOutput) ToGetVirtualNetworkSubnetOverrideOutputWithContext(ctx context.Context) GetVirtualNetworkSubnetOverrideOutput {
	return o
}

// The name of the subnet.
func (o GetVirtualNetworkSubnetOverrideOutput) LabSubnetName() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualNetworkSubnetOverride) string { return v.LabSubnetName }).(pulumi.StringOutput)
}

// The resource identifier for the subnet.
func (o GetVirtualNetworkSubnetOverrideOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualNetworkSubnetOverride) string { return v.ResourceId }).(pulumi.StringOutput)
}

// Indicates if the subnet can be used for VM creation.  Possible values are `Allow`, `Default` and `Deny`.
func (o GetVirtualNetworkSubnetOverrideOutput) UseInVmCreationPermission() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualNetworkSubnetOverride) string { return v.UseInVmCreationPermission }).(pulumi.StringOutput)
}

func (o GetVirtualNetworkSubnetOverrideOutput) UsePublicIpAddressPermission() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualNetworkSubnetOverride) string { return v.UsePublicIpAddressPermission }).(pulumi.StringOutput)
}

// The virtual network pool associated with this subnet.
func (o GetVirtualNetworkSubnetOverrideOutput) VirtualNetworkPoolName() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualNetworkSubnetOverride) string { return v.VirtualNetworkPoolName }).(pulumi.StringOutput)
}

type GetVirtualNetworkSubnetOverrideArrayOutput struct{ *pulumi.OutputState }

func (GetVirtualNetworkSubnetOverrideArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVirtualNetworkSubnetOverride)(nil)).Elem()
}

func (o GetVirtualNetworkSubnetOverrideArrayOutput) ToGetVirtualNetworkSubnetOverrideArrayOutput() GetVirtualNetworkSubnetOverrideArrayOutput {
	return o
}

func (o GetVirtualNetworkSubnetOverrideArrayOutput) ToGetVirtualNetworkSubnetOverrideArrayOutputWithContext(ctx context.Context) GetVirtualNetworkSubnetOverrideArrayOutput {
	return o
}

func (o GetVirtualNetworkSubnetOverrideArrayOutput) Index(i pulumi.IntInput) GetVirtualNetworkSubnetOverrideOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVirtualNetworkSubnetOverride {
		return vs[0].([]GetVirtualNetworkSubnetOverride)[vs[1].(int)]
	}).(GetVirtualNetworkSubnetOverrideOutput)
}

func init() {
	pulumi.RegisterOutputType(GlobalVMShutdownScheduleNotificationSettingsOutput{})
	pulumi.RegisterOutputType(GlobalVMShutdownScheduleNotificationSettingsPtrOutput{})
	pulumi.RegisterOutputType(LinuxVirtualMachineGalleryImageReferenceOutput{})
	pulumi.RegisterOutputType(LinuxVirtualMachineGalleryImageReferencePtrOutput{})
	pulumi.RegisterOutputType(LinuxVirtualMachineInboundNatRuleOutput{})
	pulumi.RegisterOutputType(LinuxVirtualMachineInboundNatRuleArrayOutput{})
	pulumi.RegisterOutputType(ScheduleDailyRecurrenceOutput{})
	pulumi.RegisterOutputType(ScheduleDailyRecurrencePtrOutput{})
	pulumi.RegisterOutputType(ScheduleHourlyRecurrenceOutput{})
	pulumi.RegisterOutputType(ScheduleHourlyRecurrencePtrOutput{})
	pulumi.RegisterOutputType(ScheduleNotificationSettingsOutput{})
	pulumi.RegisterOutputType(ScheduleNotificationSettingsPtrOutput{})
	pulumi.RegisterOutputType(ScheduleWeeklyRecurrenceOutput{})
	pulumi.RegisterOutputType(ScheduleWeeklyRecurrencePtrOutput{})
	pulumi.RegisterOutputType(VirtualNetworkSubnetOutput{})
	pulumi.RegisterOutputType(VirtualNetworkSubnetPtrOutput{})
	pulumi.RegisterOutputType(WindowsVirtualMachineGalleryImageReferenceOutput{})
	pulumi.RegisterOutputType(WindowsVirtualMachineGalleryImageReferencePtrOutput{})
	pulumi.RegisterOutputType(WindowsVirtualMachineInboundNatRuleOutput{})
	pulumi.RegisterOutputType(WindowsVirtualMachineInboundNatRuleArrayOutput{})
	pulumi.RegisterOutputType(GetVirtualNetworkAllowedSubnetOutput{})
	pulumi.RegisterOutputType(GetVirtualNetworkAllowedSubnetArrayOutput{})
	pulumi.RegisterOutputType(GetVirtualNetworkSubnetOverrideOutput{})
	pulumi.RegisterOutputType(GetVirtualNetworkSubnetOverrideArrayOutput{})
}
