// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aifoundry

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type HubEncryption struct {
	// The Key Vault URI to access the encryption key.
	KeyId string `pulumi:"keyId"`
	// The Key Vault ID where the customer owned encryption key exists.
	KeyVaultId string `pulumi:"keyVaultId"`
	// The user assigned identity ID that has access to the encryption key.
	//
	// > **Note:** `userAssignedIdentityId` must be set when`identity.type` is `UserAssigned` in order for the service to find the assigned permissions.
	UserAssignedIdentityId *string `pulumi:"userAssignedIdentityId"`
}

// HubEncryptionInput is an input type that accepts HubEncryptionArgs and HubEncryptionOutput values.
// You can construct a concrete instance of `HubEncryptionInput` via:
//
//	HubEncryptionArgs{...}
type HubEncryptionInput interface {
	pulumi.Input

	ToHubEncryptionOutput() HubEncryptionOutput
	ToHubEncryptionOutputWithContext(context.Context) HubEncryptionOutput
}

type HubEncryptionArgs struct {
	// The Key Vault URI to access the encryption key.
	KeyId pulumi.StringInput `pulumi:"keyId"`
	// The Key Vault ID where the customer owned encryption key exists.
	KeyVaultId pulumi.StringInput `pulumi:"keyVaultId"`
	// The user assigned identity ID that has access to the encryption key.
	//
	// > **Note:** `userAssignedIdentityId` must be set when`identity.type` is `UserAssigned` in order for the service to find the assigned permissions.
	UserAssignedIdentityId pulumi.StringPtrInput `pulumi:"userAssignedIdentityId"`
}

func (HubEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HubEncryption)(nil)).Elem()
}

func (i HubEncryptionArgs) ToHubEncryptionOutput() HubEncryptionOutput {
	return i.ToHubEncryptionOutputWithContext(context.Background())
}

func (i HubEncryptionArgs) ToHubEncryptionOutputWithContext(ctx context.Context) HubEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubEncryptionOutput)
}

func (i HubEncryptionArgs) ToHubEncryptionPtrOutput() HubEncryptionPtrOutput {
	return i.ToHubEncryptionPtrOutputWithContext(context.Background())
}

func (i HubEncryptionArgs) ToHubEncryptionPtrOutputWithContext(ctx context.Context) HubEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubEncryptionOutput).ToHubEncryptionPtrOutputWithContext(ctx)
}

// HubEncryptionPtrInput is an input type that accepts HubEncryptionArgs, HubEncryptionPtr and HubEncryptionPtrOutput values.
// You can construct a concrete instance of `HubEncryptionPtrInput` via:
//
//	        HubEncryptionArgs{...}
//
//	or:
//
//	        nil
type HubEncryptionPtrInput interface {
	pulumi.Input

	ToHubEncryptionPtrOutput() HubEncryptionPtrOutput
	ToHubEncryptionPtrOutputWithContext(context.Context) HubEncryptionPtrOutput
}

type hubEncryptionPtrType HubEncryptionArgs

func HubEncryptionPtr(v *HubEncryptionArgs) HubEncryptionPtrInput {
	return (*hubEncryptionPtrType)(v)
}

func (*hubEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HubEncryption)(nil)).Elem()
}

func (i *hubEncryptionPtrType) ToHubEncryptionPtrOutput() HubEncryptionPtrOutput {
	return i.ToHubEncryptionPtrOutputWithContext(context.Background())
}

func (i *hubEncryptionPtrType) ToHubEncryptionPtrOutputWithContext(ctx context.Context) HubEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubEncryptionPtrOutput)
}

type HubEncryptionOutput struct{ *pulumi.OutputState }

func (HubEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HubEncryption)(nil)).Elem()
}

func (o HubEncryptionOutput) ToHubEncryptionOutput() HubEncryptionOutput {
	return o
}

func (o HubEncryptionOutput) ToHubEncryptionOutputWithContext(ctx context.Context) HubEncryptionOutput {
	return o
}

func (o HubEncryptionOutput) ToHubEncryptionPtrOutput() HubEncryptionPtrOutput {
	return o.ToHubEncryptionPtrOutputWithContext(context.Background())
}

func (o HubEncryptionOutput) ToHubEncryptionPtrOutputWithContext(ctx context.Context) HubEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HubEncryption) *HubEncryption {
		return &v
	}).(HubEncryptionPtrOutput)
}

// The Key Vault URI to access the encryption key.
func (o HubEncryptionOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v HubEncryption) string { return v.KeyId }).(pulumi.StringOutput)
}

// The Key Vault ID where the customer owned encryption key exists.
func (o HubEncryptionOutput) KeyVaultId() pulumi.StringOutput {
	return o.ApplyT(func(v HubEncryption) string { return v.KeyVaultId }).(pulumi.StringOutput)
}

// The user assigned identity ID that has access to the encryption key.
//
// > **Note:** `userAssignedIdentityId` must be set when`identity.type` is `UserAssigned` in order for the service to find the assigned permissions.
func (o HubEncryptionOutput) UserAssignedIdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HubEncryption) *string { return v.UserAssignedIdentityId }).(pulumi.StringPtrOutput)
}

type HubEncryptionPtrOutput struct{ *pulumi.OutputState }

func (HubEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HubEncryption)(nil)).Elem()
}

func (o HubEncryptionPtrOutput) ToHubEncryptionPtrOutput() HubEncryptionPtrOutput {
	return o
}

func (o HubEncryptionPtrOutput) ToHubEncryptionPtrOutputWithContext(ctx context.Context) HubEncryptionPtrOutput {
	return o
}

func (o HubEncryptionPtrOutput) Elem() HubEncryptionOutput {
	return o.ApplyT(func(v *HubEncryption) HubEncryption {
		if v != nil {
			return *v
		}
		var ret HubEncryption
		return ret
	}).(HubEncryptionOutput)
}

// The Key Vault URI to access the encryption key.
func (o HubEncryptionPtrOutput) KeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HubEncryption) *string {
		if v == nil {
			return nil
		}
		return &v.KeyId
	}).(pulumi.StringPtrOutput)
}

// The Key Vault ID where the customer owned encryption key exists.
func (o HubEncryptionPtrOutput) KeyVaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HubEncryption) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVaultId
	}).(pulumi.StringPtrOutput)
}

// The user assigned identity ID that has access to the encryption key.
//
// > **Note:** `userAssignedIdentityId` must be set when`identity.type` is `UserAssigned` in order for the service to find the assigned permissions.
func (o HubEncryptionPtrOutput) UserAssignedIdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HubEncryption) *string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentityId
	}).(pulumi.StringPtrOutput)
}

type HubIdentity struct {
	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this AI Foundry Hub.
	//
	// > **Note:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
	IdentityIds []string `pulumi:"identityIds"`
	// The Principal ID associated with this Managed Service Identity.
	PrincipalId *string `pulumi:"principalId"`
	// The Tenant ID associated with this Managed Service Identity.
	TenantId *string `pulumi:"tenantId"`
	// Specifies the type of Managed Service Identity that should be configured on this AI Foundry Hub. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both).
	Type string `pulumi:"type"`
}

// HubIdentityInput is an input type that accepts HubIdentityArgs and HubIdentityOutput values.
// You can construct a concrete instance of `HubIdentityInput` via:
//
//	HubIdentityArgs{...}
type HubIdentityInput interface {
	pulumi.Input

	ToHubIdentityOutput() HubIdentityOutput
	ToHubIdentityOutputWithContext(context.Context) HubIdentityOutput
}

type HubIdentityArgs struct {
	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this AI Foundry Hub.
	//
	// > **Note:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	// The Principal ID associated with this Managed Service Identity.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The Tenant ID associated with this Managed Service Identity.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// Specifies the type of Managed Service Identity that should be configured on this AI Foundry Hub. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both).
	Type pulumi.StringInput `pulumi:"type"`
}

func (HubIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HubIdentity)(nil)).Elem()
}

func (i HubIdentityArgs) ToHubIdentityOutput() HubIdentityOutput {
	return i.ToHubIdentityOutputWithContext(context.Background())
}

func (i HubIdentityArgs) ToHubIdentityOutputWithContext(ctx context.Context) HubIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubIdentityOutput)
}

func (i HubIdentityArgs) ToHubIdentityPtrOutput() HubIdentityPtrOutput {
	return i.ToHubIdentityPtrOutputWithContext(context.Background())
}

func (i HubIdentityArgs) ToHubIdentityPtrOutputWithContext(ctx context.Context) HubIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubIdentityOutput).ToHubIdentityPtrOutputWithContext(ctx)
}

// HubIdentityPtrInput is an input type that accepts HubIdentityArgs, HubIdentityPtr and HubIdentityPtrOutput values.
// You can construct a concrete instance of `HubIdentityPtrInput` via:
//
//	        HubIdentityArgs{...}
//
//	or:
//
//	        nil
type HubIdentityPtrInput interface {
	pulumi.Input

	ToHubIdentityPtrOutput() HubIdentityPtrOutput
	ToHubIdentityPtrOutputWithContext(context.Context) HubIdentityPtrOutput
}

type hubIdentityPtrType HubIdentityArgs

func HubIdentityPtr(v *HubIdentityArgs) HubIdentityPtrInput {
	return (*hubIdentityPtrType)(v)
}

func (*hubIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HubIdentity)(nil)).Elem()
}

func (i *hubIdentityPtrType) ToHubIdentityPtrOutput() HubIdentityPtrOutput {
	return i.ToHubIdentityPtrOutputWithContext(context.Background())
}

func (i *hubIdentityPtrType) ToHubIdentityPtrOutputWithContext(ctx context.Context) HubIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubIdentityPtrOutput)
}

type HubIdentityOutput struct{ *pulumi.OutputState }

func (HubIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HubIdentity)(nil)).Elem()
}

func (o HubIdentityOutput) ToHubIdentityOutput() HubIdentityOutput {
	return o
}

func (o HubIdentityOutput) ToHubIdentityOutputWithContext(ctx context.Context) HubIdentityOutput {
	return o
}

func (o HubIdentityOutput) ToHubIdentityPtrOutput() HubIdentityPtrOutput {
	return o.ToHubIdentityPtrOutputWithContext(context.Background())
}

func (o HubIdentityOutput) ToHubIdentityPtrOutputWithContext(ctx context.Context) HubIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HubIdentity) *HubIdentity {
		return &v
	}).(HubIdentityPtrOutput)
}

// Specifies a list of User Assigned Managed Identity IDs to be assigned to this AI Foundry Hub.
//
// > **Note:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
func (o HubIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HubIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

// The Principal ID associated with this Managed Service Identity.
func (o HubIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HubIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The Tenant ID associated with this Managed Service Identity.
func (o HubIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HubIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this AI Foundry Hub. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both).
func (o HubIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HubIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type HubIdentityPtrOutput struct{ *pulumi.OutputState }

func (HubIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HubIdentity)(nil)).Elem()
}

func (o HubIdentityPtrOutput) ToHubIdentityPtrOutput() HubIdentityPtrOutput {
	return o
}

func (o HubIdentityPtrOutput) ToHubIdentityPtrOutputWithContext(ctx context.Context) HubIdentityPtrOutput {
	return o
}

func (o HubIdentityPtrOutput) Elem() HubIdentityOutput {
	return o.ApplyT(func(v *HubIdentity) HubIdentity {
		if v != nil {
			return *v
		}
		var ret HubIdentity
		return ret
	}).(HubIdentityOutput)
}

// Specifies a list of User Assigned Managed Identity IDs to be assigned to this AI Foundry Hub.
//
// > **Note:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
func (o HubIdentityPtrOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HubIdentity) []string {
		if v == nil {
			return nil
		}
		return v.IdentityIds
	}).(pulumi.StringArrayOutput)
}

// The Principal ID associated with this Managed Service Identity.
func (o HubIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HubIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The Tenant ID associated with this Managed Service Identity.
func (o HubIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HubIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this AI Foundry Hub. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both).
func (o HubIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HubIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type HubManagedNetwork struct {
	// The isolation mode of the AI Foundry Hub. Possible values are `Disabled`, `AllowOnlyApprovedOutbound`, and `AllowInternetOutbound`.
	IsolationMode *string `pulumi:"isolationMode"`
}

// HubManagedNetworkInput is an input type that accepts HubManagedNetworkArgs and HubManagedNetworkOutput values.
// You can construct a concrete instance of `HubManagedNetworkInput` via:
//
//	HubManagedNetworkArgs{...}
type HubManagedNetworkInput interface {
	pulumi.Input

	ToHubManagedNetworkOutput() HubManagedNetworkOutput
	ToHubManagedNetworkOutputWithContext(context.Context) HubManagedNetworkOutput
}

type HubManagedNetworkArgs struct {
	// The isolation mode of the AI Foundry Hub. Possible values are `Disabled`, `AllowOnlyApprovedOutbound`, and `AllowInternetOutbound`.
	IsolationMode pulumi.StringPtrInput `pulumi:"isolationMode"`
}

func (HubManagedNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HubManagedNetwork)(nil)).Elem()
}

func (i HubManagedNetworkArgs) ToHubManagedNetworkOutput() HubManagedNetworkOutput {
	return i.ToHubManagedNetworkOutputWithContext(context.Background())
}

func (i HubManagedNetworkArgs) ToHubManagedNetworkOutputWithContext(ctx context.Context) HubManagedNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubManagedNetworkOutput)
}

func (i HubManagedNetworkArgs) ToHubManagedNetworkPtrOutput() HubManagedNetworkPtrOutput {
	return i.ToHubManagedNetworkPtrOutputWithContext(context.Background())
}

func (i HubManagedNetworkArgs) ToHubManagedNetworkPtrOutputWithContext(ctx context.Context) HubManagedNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubManagedNetworkOutput).ToHubManagedNetworkPtrOutputWithContext(ctx)
}

// HubManagedNetworkPtrInput is an input type that accepts HubManagedNetworkArgs, HubManagedNetworkPtr and HubManagedNetworkPtrOutput values.
// You can construct a concrete instance of `HubManagedNetworkPtrInput` via:
//
//	        HubManagedNetworkArgs{...}
//
//	or:
//
//	        nil
type HubManagedNetworkPtrInput interface {
	pulumi.Input

	ToHubManagedNetworkPtrOutput() HubManagedNetworkPtrOutput
	ToHubManagedNetworkPtrOutputWithContext(context.Context) HubManagedNetworkPtrOutput
}

type hubManagedNetworkPtrType HubManagedNetworkArgs

func HubManagedNetworkPtr(v *HubManagedNetworkArgs) HubManagedNetworkPtrInput {
	return (*hubManagedNetworkPtrType)(v)
}

func (*hubManagedNetworkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HubManagedNetwork)(nil)).Elem()
}

func (i *hubManagedNetworkPtrType) ToHubManagedNetworkPtrOutput() HubManagedNetworkPtrOutput {
	return i.ToHubManagedNetworkPtrOutputWithContext(context.Background())
}

func (i *hubManagedNetworkPtrType) ToHubManagedNetworkPtrOutputWithContext(ctx context.Context) HubManagedNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubManagedNetworkPtrOutput)
}

type HubManagedNetworkOutput struct{ *pulumi.OutputState }

func (HubManagedNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HubManagedNetwork)(nil)).Elem()
}

func (o HubManagedNetworkOutput) ToHubManagedNetworkOutput() HubManagedNetworkOutput {
	return o
}

func (o HubManagedNetworkOutput) ToHubManagedNetworkOutputWithContext(ctx context.Context) HubManagedNetworkOutput {
	return o
}

func (o HubManagedNetworkOutput) ToHubManagedNetworkPtrOutput() HubManagedNetworkPtrOutput {
	return o.ToHubManagedNetworkPtrOutputWithContext(context.Background())
}

func (o HubManagedNetworkOutput) ToHubManagedNetworkPtrOutputWithContext(ctx context.Context) HubManagedNetworkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HubManagedNetwork) *HubManagedNetwork {
		return &v
	}).(HubManagedNetworkPtrOutput)
}

// The isolation mode of the AI Foundry Hub. Possible values are `Disabled`, `AllowOnlyApprovedOutbound`, and `AllowInternetOutbound`.
func (o HubManagedNetworkOutput) IsolationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HubManagedNetwork) *string { return v.IsolationMode }).(pulumi.StringPtrOutput)
}

type HubManagedNetworkPtrOutput struct{ *pulumi.OutputState }

func (HubManagedNetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HubManagedNetwork)(nil)).Elem()
}

func (o HubManagedNetworkPtrOutput) ToHubManagedNetworkPtrOutput() HubManagedNetworkPtrOutput {
	return o
}

func (o HubManagedNetworkPtrOutput) ToHubManagedNetworkPtrOutputWithContext(ctx context.Context) HubManagedNetworkPtrOutput {
	return o
}

func (o HubManagedNetworkPtrOutput) Elem() HubManagedNetworkOutput {
	return o.ApplyT(func(v *HubManagedNetwork) HubManagedNetwork {
		if v != nil {
			return *v
		}
		var ret HubManagedNetwork
		return ret
	}).(HubManagedNetworkOutput)
}

// The isolation mode of the AI Foundry Hub. Possible values are `Disabled`, `AllowOnlyApprovedOutbound`, and `AllowInternetOutbound`.
func (o HubManagedNetworkPtrOutput) IsolationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HubManagedNetwork) *string {
		if v == nil {
			return nil
		}
		return v.IsolationMode
	}).(pulumi.StringPtrOutput)
}

type ProjectIdentity struct {
	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this AI Foundry Project.
	//
	// > **Note:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
	IdentityIds []string `pulumi:"identityIds"`
	// The Principal ID associated with this Managed Service Identity.
	PrincipalId *string `pulumi:"principalId"`
	// The Tenant ID associated with this Managed Service Identity.
	TenantId *string `pulumi:"tenantId"`
	// Specifies the type of Managed Service Identity that should be configured on this AI Foundry Project. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both).
	Type string `pulumi:"type"`
}

// ProjectIdentityInput is an input type that accepts ProjectIdentityArgs and ProjectIdentityOutput values.
// You can construct a concrete instance of `ProjectIdentityInput` via:
//
//	ProjectIdentityArgs{...}
type ProjectIdentityInput interface {
	pulumi.Input

	ToProjectIdentityOutput() ProjectIdentityOutput
	ToProjectIdentityOutputWithContext(context.Context) ProjectIdentityOutput
}

type ProjectIdentityArgs struct {
	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this AI Foundry Project.
	//
	// > **Note:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	// The Principal ID associated with this Managed Service Identity.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The Tenant ID associated with this Managed Service Identity.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// Specifies the type of Managed Service Identity that should be configured on this AI Foundry Project. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both).
	Type pulumi.StringInput `pulumi:"type"`
}

func (ProjectIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectIdentity)(nil)).Elem()
}

func (i ProjectIdentityArgs) ToProjectIdentityOutput() ProjectIdentityOutput {
	return i.ToProjectIdentityOutputWithContext(context.Background())
}

func (i ProjectIdentityArgs) ToProjectIdentityOutputWithContext(ctx context.Context) ProjectIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIdentityOutput)
}

func (i ProjectIdentityArgs) ToProjectIdentityPtrOutput() ProjectIdentityPtrOutput {
	return i.ToProjectIdentityPtrOutputWithContext(context.Background())
}

func (i ProjectIdentityArgs) ToProjectIdentityPtrOutputWithContext(ctx context.Context) ProjectIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIdentityOutput).ToProjectIdentityPtrOutputWithContext(ctx)
}

// ProjectIdentityPtrInput is an input type that accepts ProjectIdentityArgs, ProjectIdentityPtr and ProjectIdentityPtrOutput values.
// You can construct a concrete instance of `ProjectIdentityPtrInput` via:
//
//	        ProjectIdentityArgs{...}
//
//	or:
//
//	        nil
type ProjectIdentityPtrInput interface {
	pulumi.Input

	ToProjectIdentityPtrOutput() ProjectIdentityPtrOutput
	ToProjectIdentityPtrOutputWithContext(context.Context) ProjectIdentityPtrOutput
}

type projectIdentityPtrType ProjectIdentityArgs

func ProjectIdentityPtr(v *ProjectIdentityArgs) ProjectIdentityPtrInput {
	return (*projectIdentityPtrType)(v)
}

func (*projectIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIdentity)(nil)).Elem()
}

func (i *projectIdentityPtrType) ToProjectIdentityPtrOutput() ProjectIdentityPtrOutput {
	return i.ToProjectIdentityPtrOutputWithContext(context.Background())
}

func (i *projectIdentityPtrType) ToProjectIdentityPtrOutputWithContext(ctx context.Context) ProjectIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectIdentityPtrOutput)
}

type ProjectIdentityOutput struct{ *pulumi.OutputState }

func (ProjectIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectIdentity)(nil)).Elem()
}

func (o ProjectIdentityOutput) ToProjectIdentityOutput() ProjectIdentityOutput {
	return o
}

func (o ProjectIdentityOutput) ToProjectIdentityOutputWithContext(ctx context.Context) ProjectIdentityOutput {
	return o
}

func (o ProjectIdentityOutput) ToProjectIdentityPtrOutput() ProjectIdentityPtrOutput {
	return o.ToProjectIdentityPtrOutputWithContext(context.Background())
}

func (o ProjectIdentityOutput) ToProjectIdentityPtrOutputWithContext(ctx context.Context) ProjectIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectIdentity) *ProjectIdentity {
		return &v
	}).(ProjectIdentityPtrOutput)
}

// Specifies a list of User Assigned Managed Identity IDs to be assigned to this AI Foundry Project.
//
// > **Note:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
func (o ProjectIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

// The Principal ID associated with this Managed Service Identity.
func (o ProjectIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The Tenant ID associated with this Managed Service Identity.
func (o ProjectIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this AI Foundry Project. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both).
func (o ProjectIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type ProjectIdentityPtrOutput struct{ *pulumi.OutputState }

func (ProjectIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectIdentity)(nil)).Elem()
}

func (o ProjectIdentityPtrOutput) ToProjectIdentityPtrOutput() ProjectIdentityPtrOutput {
	return o
}

func (o ProjectIdentityPtrOutput) ToProjectIdentityPtrOutputWithContext(ctx context.Context) ProjectIdentityPtrOutput {
	return o
}

func (o ProjectIdentityPtrOutput) Elem() ProjectIdentityOutput {
	return o.ApplyT(func(v *ProjectIdentity) ProjectIdentity {
		if v != nil {
			return *v
		}
		var ret ProjectIdentity
		return ret
	}).(ProjectIdentityOutput)
}

// Specifies a list of User Assigned Managed Identity IDs to be assigned to this AI Foundry Project.
//
// > **Note:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
func (o ProjectIdentityPtrOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectIdentity) []string {
		if v == nil {
			return nil
		}
		return v.IdentityIds
	}).(pulumi.StringArrayOutput)
}

// The Principal ID associated with this Managed Service Identity.
func (o ProjectIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The Tenant ID associated with this Managed Service Identity.
func (o ProjectIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this AI Foundry Project. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both).
func (o ProjectIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HubEncryptionInput)(nil)).Elem(), HubEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HubEncryptionPtrInput)(nil)).Elem(), HubEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HubIdentityInput)(nil)).Elem(), HubIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HubIdentityPtrInput)(nil)).Elem(), HubIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HubManagedNetworkInput)(nil)).Elem(), HubManagedNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HubManagedNetworkPtrInput)(nil)).Elem(), HubManagedNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIdentityInput)(nil)).Elem(), ProjectIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectIdentityPtrInput)(nil)).Elem(), ProjectIdentityArgs{})
	pulumi.RegisterOutputType(HubEncryptionOutput{})
	pulumi.RegisterOutputType(HubEncryptionPtrOutput{})
	pulumi.RegisterOutputType(HubIdentityOutput{})
	pulumi.RegisterOutputType(HubIdentityPtrOutput{})
	pulumi.RegisterOutputType(HubManagedNetworkOutput{})
	pulumi.RegisterOutputType(HubManagedNetworkPtrOutput{})
	pulumi.RegisterOutputType(ProjectIdentityOutput{})
	pulumi.RegisterOutputType(ProjectIdentityPtrOutput{})
}
