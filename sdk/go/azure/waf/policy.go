// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package waf

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Azure Web Application Firewall Policy instance.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/web_application_firewall_policy.html.markdown.
type Policy struct {
	s *pulumi.ResourceState
}

// NewPolicy registers a new resource with the given unique name, arguments, and options.
func NewPolicy(ctx *pulumi.Context,
	name string, args *PolicyArgs, opts ...pulumi.ResourceOpt) (*Policy, error) {
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["customRules"] = nil
		inputs["location"] = nil
		inputs["name"] = nil
		inputs["policySettings"] = nil
		inputs["resourceGroupName"] = nil
		inputs["tags"] = nil
	} else {
		inputs["customRules"] = args.CustomRules
		inputs["location"] = args.Location
		inputs["name"] = args.Name
		inputs["policySettings"] = args.PolicySettings
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["tags"] = args.Tags
	}
	s, err := ctx.RegisterResource("azure:waf/policy:Policy", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Policy{s: s}, nil
}

// GetPolicy gets an existing Policy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicy(ctx *pulumi.Context,
	name string, id pulumi.ID, state *PolicyState, opts ...pulumi.ResourceOpt) (*Policy, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["customRules"] = state.CustomRules
		inputs["location"] = state.Location
		inputs["name"] = state.Name
		inputs["policySettings"] = state.PolicySettings
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("azure:waf/policy:Policy", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Policy{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Policy) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Policy) ID() pulumi.IDOutput {
	return r.s.ID()
}

// One or more `customRule` blocks as defined below.
func (r *Policy) CustomRules() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["customRules"])
}

// Resource location. Changing this forces a new resource to be created.
func (r *Policy) Location() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["location"])
}

// The name of the policy. Changing this forces a new resource to be created.
func (r *Policy) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// A `policySetting` block as defined below.
func (r *Policy) PolicySettings() pulumi.Output {
	return r.s.State["policySettings"]
}

// The name of the resource group. Changing this forces a new resource to be created.
func (r *Policy) ResourceGroupName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// A mapping of tags to assign to the Web Application Firewall Policy.
func (r *Policy) Tags() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering Policy resources.
type PolicyState struct {
	// One or more `customRule` blocks as defined below.
	CustomRules interface{}
	// Resource location. Changing this forces a new resource to be created.
	Location interface{}
	// The name of the policy. Changing this forces a new resource to be created.
	Name interface{}
	// A `policySetting` block as defined below.
	PolicySettings interface{}
	// The name of the resource group. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// A mapping of tags to assign to the Web Application Firewall Policy.
	Tags interface{}
}

// The set of arguments for constructing a Policy resource.
type PolicyArgs struct {
	// One or more `customRule` blocks as defined below.
	CustomRules interface{}
	// Resource location. Changing this forces a new resource to be created.
	Location interface{}
	// The name of the policy. Changing this forces a new resource to be created.
	Name interface{}
	// A `policySetting` block as defined below.
	PolicySettings interface{}
	// The name of the resource group. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// A mapping of tags to assign to the Web Application Firewall Policy.
	Tags interface{}
}
