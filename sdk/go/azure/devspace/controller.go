// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package devspace

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Import
//
// DevSpace Controller's can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:devspace/controller:Controller controller1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DevSpaces/controllers/controller1Name
// ```
type Controller struct {
	pulumi.CustomResourceState

	// DNS name for accessing DataPlane services.
	DataPlaneFqdn pulumi.StringOutput `pulumi:"dataPlaneFqdn"`
	// The host suffix for the DevSpace Controller.
	HostSuffix pulumi.StringOutput `pulumi:"hostSuffix"`
	// Specifies the supported location where the DevSpace Controller should exist. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name of the DevSpace Controller. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the resource group under which the DevSpace Controller resource has to be created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Specifies the SKU Name for this DevSpace Controller. Possible values are `S1`.
	SkuName pulumi.StringOutput `pulumi:"skuName"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Base64 encoding of `kubeConfigRaw` of Azure Kubernetes Service cluster. Changing this forces a new resource to be created.
	TargetContainerHostCredentialsBase64 pulumi.StringOutput `pulumi:"targetContainerHostCredentialsBase64"`
	// The resource id of Azure Kubernetes Service cluster. Changing this forces a new resource to be created.
	TargetContainerHostResourceId pulumi.StringOutput `pulumi:"targetContainerHostResourceId"`
}

// NewController registers a new resource with the given unique name, arguments, and options.
func NewController(ctx *pulumi.Context,
	name string, args *ControllerArgs, opts ...pulumi.ResourceOption) (*Controller, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SkuName == nil {
		return nil, errors.New("invalid value for required argument 'SkuName'")
	}
	if args.TargetContainerHostCredentialsBase64 == nil {
		return nil, errors.New("invalid value for required argument 'TargetContainerHostCredentialsBase64'")
	}
	if args.TargetContainerHostResourceId == nil {
		return nil, errors.New("invalid value for required argument 'TargetContainerHostResourceId'")
	}
	var resource Controller
	err := ctx.RegisterResource("azure:devspace/controller:Controller", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetController gets an existing Controller resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetController(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ControllerState, opts ...pulumi.ResourceOption) (*Controller, error) {
	var resource Controller
	err := ctx.ReadResource("azure:devspace/controller:Controller", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Controller resources.
type controllerState struct {
	// DNS name for accessing DataPlane services.
	DataPlaneFqdn *string `pulumi:"dataPlaneFqdn"`
	// The host suffix for the DevSpace Controller.
	HostSuffix *string `pulumi:"hostSuffix"`
	// Specifies the supported location where the DevSpace Controller should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the DevSpace Controller. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group under which the DevSpace Controller resource has to be created. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Specifies the SKU Name for this DevSpace Controller. Possible values are `S1`.
	SkuName *string `pulumi:"skuName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Base64 encoding of `kubeConfigRaw` of Azure Kubernetes Service cluster. Changing this forces a new resource to be created.
	TargetContainerHostCredentialsBase64 *string `pulumi:"targetContainerHostCredentialsBase64"`
	// The resource id of Azure Kubernetes Service cluster. Changing this forces a new resource to be created.
	TargetContainerHostResourceId *string `pulumi:"targetContainerHostResourceId"`
}

type ControllerState struct {
	// DNS name for accessing DataPlane services.
	DataPlaneFqdn pulumi.StringPtrInput
	// The host suffix for the DevSpace Controller.
	HostSuffix pulumi.StringPtrInput
	// Specifies the supported location where the DevSpace Controller should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the DevSpace Controller. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group under which the DevSpace Controller resource has to be created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// Specifies the SKU Name for this DevSpace Controller. Possible values are `S1`.
	SkuName pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// Base64 encoding of `kubeConfigRaw` of Azure Kubernetes Service cluster. Changing this forces a new resource to be created.
	TargetContainerHostCredentialsBase64 pulumi.StringPtrInput
	// The resource id of Azure Kubernetes Service cluster. Changing this forces a new resource to be created.
	TargetContainerHostResourceId pulumi.StringPtrInput
}

func (ControllerState) ElementType() reflect.Type {
	return reflect.TypeOf((*controllerState)(nil)).Elem()
}

type controllerArgs struct {
	// Specifies the supported location where the DevSpace Controller should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the DevSpace Controller. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group under which the DevSpace Controller resource has to be created. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Specifies the SKU Name for this DevSpace Controller. Possible values are `S1`.
	SkuName string `pulumi:"skuName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Base64 encoding of `kubeConfigRaw` of Azure Kubernetes Service cluster. Changing this forces a new resource to be created.
	TargetContainerHostCredentialsBase64 string `pulumi:"targetContainerHostCredentialsBase64"`
	// The resource id of Azure Kubernetes Service cluster. Changing this forces a new resource to be created.
	TargetContainerHostResourceId string `pulumi:"targetContainerHostResourceId"`
}

// The set of arguments for constructing a Controller resource.
type ControllerArgs struct {
	// Specifies the supported location where the DevSpace Controller should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the DevSpace Controller. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group under which the DevSpace Controller resource has to be created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// Specifies the SKU Name for this DevSpace Controller. Possible values are `S1`.
	SkuName pulumi.StringInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// Base64 encoding of `kubeConfigRaw` of Azure Kubernetes Service cluster. Changing this forces a new resource to be created.
	TargetContainerHostCredentialsBase64 pulumi.StringInput
	// The resource id of Azure Kubernetes Service cluster. Changing this forces a new resource to be created.
	TargetContainerHostResourceId pulumi.StringInput
}

func (ControllerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*controllerArgs)(nil)).Elem()
}

type ControllerInput interface {
	pulumi.Input

	ToControllerOutput() ControllerOutput
	ToControllerOutputWithContext(ctx context.Context) ControllerOutput
}

func (*Controller) ElementType() reflect.Type {
	return reflect.TypeOf((*Controller)(nil))
}

func (i *Controller) ToControllerOutput() ControllerOutput {
	return i.ToControllerOutputWithContext(context.Background())
}

func (i *Controller) ToControllerOutputWithContext(ctx context.Context) ControllerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerOutput)
}

func (i *Controller) ToControllerPtrOutput() ControllerPtrOutput {
	return i.ToControllerPtrOutputWithContext(context.Background())
}

func (i *Controller) ToControllerPtrOutputWithContext(ctx context.Context) ControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerPtrOutput)
}

type ControllerPtrInput interface {
	pulumi.Input

	ToControllerPtrOutput() ControllerPtrOutput
	ToControllerPtrOutputWithContext(ctx context.Context) ControllerPtrOutput
}

type controllerPtrType ControllerArgs

func (*controllerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Controller)(nil))
}

func (i *controllerPtrType) ToControllerPtrOutput() ControllerPtrOutput {
	return i.ToControllerPtrOutputWithContext(context.Background())
}

func (i *controllerPtrType) ToControllerPtrOutputWithContext(ctx context.Context) ControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerPtrOutput)
}

// ControllerArrayInput is an input type that accepts ControllerArray and ControllerArrayOutput values.
// You can construct a concrete instance of `ControllerArrayInput` via:
//
//          ControllerArray{ ControllerArgs{...} }
type ControllerArrayInput interface {
	pulumi.Input

	ToControllerArrayOutput() ControllerArrayOutput
	ToControllerArrayOutputWithContext(context.Context) ControllerArrayOutput
}

type ControllerArray []ControllerInput

func (ControllerArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Controller)(nil))
}

func (i ControllerArray) ToControllerArrayOutput() ControllerArrayOutput {
	return i.ToControllerArrayOutputWithContext(context.Background())
}

func (i ControllerArray) ToControllerArrayOutputWithContext(ctx context.Context) ControllerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerArrayOutput)
}

// ControllerMapInput is an input type that accepts ControllerMap and ControllerMapOutput values.
// You can construct a concrete instance of `ControllerMapInput` via:
//
//          ControllerMap{ "key": ControllerArgs{...} }
type ControllerMapInput interface {
	pulumi.Input

	ToControllerMapOutput() ControllerMapOutput
	ToControllerMapOutputWithContext(context.Context) ControllerMapOutput
}

type ControllerMap map[string]ControllerInput

func (ControllerMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Controller)(nil))
}

func (i ControllerMap) ToControllerMapOutput() ControllerMapOutput {
	return i.ToControllerMapOutputWithContext(context.Background())
}

func (i ControllerMap) ToControllerMapOutputWithContext(ctx context.Context) ControllerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerMapOutput)
}

type ControllerOutput struct {
	*pulumi.OutputState
}

func (ControllerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Controller)(nil))
}

func (o ControllerOutput) ToControllerOutput() ControllerOutput {
	return o
}

func (o ControllerOutput) ToControllerOutputWithContext(ctx context.Context) ControllerOutput {
	return o
}

func (o ControllerOutput) ToControllerPtrOutput() ControllerPtrOutput {
	return o.ToControllerPtrOutputWithContext(context.Background())
}

func (o ControllerOutput) ToControllerPtrOutputWithContext(ctx context.Context) ControllerPtrOutput {
	return o.ApplyT(func(v Controller) *Controller {
		return &v
	}).(ControllerPtrOutput)
}

type ControllerPtrOutput struct {
	*pulumi.OutputState
}

func (ControllerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Controller)(nil))
}

func (o ControllerPtrOutput) ToControllerPtrOutput() ControllerPtrOutput {
	return o
}

func (o ControllerPtrOutput) ToControllerPtrOutputWithContext(ctx context.Context) ControllerPtrOutput {
	return o
}

type ControllerArrayOutput struct{ *pulumi.OutputState }

func (ControllerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Controller)(nil))
}

func (o ControllerArrayOutput) ToControllerArrayOutput() ControllerArrayOutput {
	return o
}

func (o ControllerArrayOutput) ToControllerArrayOutputWithContext(ctx context.Context) ControllerArrayOutput {
	return o
}

func (o ControllerArrayOutput) Index(i pulumi.IntInput) ControllerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Controller {
		return vs[0].([]Controller)[vs[1].(int)]
	}).(ControllerOutput)
}

type ControllerMapOutput struct{ *pulumi.OutputState }

func (ControllerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Controller)(nil))
}

func (o ControllerMapOutput) ToControllerMapOutput() ControllerMapOutput {
	return o
}

func (o ControllerMapOutput) ToControllerMapOutputWithContext(ctx context.Context) ControllerMapOutput {
	return o
}

func (o ControllerMapOutput) MapIndex(k pulumi.StringInput) ControllerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Controller {
		return vs[0].(map[string]Controller)[vs[1].(string)]
	}).(ControllerOutput)
}

func init() {
	pulumi.RegisterOutputType(ControllerOutput{})
	pulumi.RegisterOutputType(ControllerPtrOutput{})
	pulumi.RegisterOutputType(ControllerArrayOutput{})
	pulumi.RegisterOutputType(ControllerMapOutput{})
}
