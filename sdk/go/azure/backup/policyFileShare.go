// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Azure File Share Backup Policy within a Recovery Services vault.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/backup"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/recoveryservices"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVault, err := recoveryservices.NewVault(ctx, "exampleVault", &recoveryservices.VaultArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku:               pulumi.String("Standard"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = backup.NewPolicyFileShare(ctx, "policy", &backup.PolicyFileShareArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				RecoveryVaultName: exampleVault.Name,
//				Timezone:          pulumi.String("UTC"),
//				Backup: &backup.PolicyFileShareBackupArgs{
//					Frequency: pulumi.String("Daily"),
//					Time:      pulumi.String("23:00"),
//				},
//				RetentionDaily: &backup.PolicyFileShareRetentionDailyArgs{
//					Count: pulumi.Int(10),
//				},
//				RetentionWeekly: &backup.PolicyFileShareRetentionWeeklyArgs{
//					Count: pulumi.Int(7),
//					Weekdays: pulumi.StringArray{
//						pulumi.String("Sunday"),
//						pulumi.String("Wednesday"),
//						pulumi.String("Friday"),
//						pulumi.String("Saturday"),
//					},
//				},
//				RetentionMonthly: &backup.PolicyFileShareRetentionMonthlyArgs{
//					Count: pulumi.Int(7),
//					Weekdays: pulumi.StringArray{
//						pulumi.String("Sunday"),
//						pulumi.String("Wednesday"),
//					},
//					Weeks: pulumi.StringArray{
//						pulumi.String("First"),
//						pulumi.String("Last"),
//					},
//				},
//				RetentionYearly: &backup.PolicyFileShareRetentionYearlyArgs{
//					Count: pulumi.Int(7),
//					Weekdays: pulumi.StringArray{
//						pulumi.String("Sunday"),
//					},
//					Weeks: pulumi.StringArray{
//						pulumi.String("Last"),
//					},
//					Months: pulumi.StringArray{
//						pulumi.String("January"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Azure File Share Backup Policies can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:backup/policyFileShare:PolicyFileShare policy1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.RecoveryServices/vaults/example-recovery-vault/backupPolicies/policy1
//
// ```
type PolicyFileShare struct {
	pulumi.CustomResourceState

	// Configures the Policy backup frequency and times as documented in the `backup` block below.
	Backup PolicyFileShareBackupOutput `pulumi:"backup"`
	// Specifies the name of the policy. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the name of the Recovery Services Vault to use. Changing this forces a new resource to be created.
	RecoveryVaultName pulumi.StringOutput `pulumi:"recoveryVaultName"`
	// The name of the resource group in which to create the policy. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Configures the policy daily retention as documented in the `retentionDaily` block below.
	RetentionDaily PolicyFileShareRetentionDailyOutput `pulumi:"retentionDaily"`
	// Configures the policy monthly retention as documented in the `retentionMonthly` block below.
	RetentionMonthly PolicyFileShareRetentionMonthlyPtrOutput `pulumi:"retentionMonthly"`
	// Configures the policy weekly retention as documented in the `retentionWeekly` block below.
	RetentionWeekly PolicyFileShareRetentionWeeklyPtrOutput `pulumi:"retentionWeekly"`
	// Configures the policy yearly retention as documented in the `retentionYearly` block below.
	RetentionYearly PolicyFileShareRetentionYearlyPtrOutput `pulumi:"retentionYearly"`
	// Specifies the timezone. [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/). Defaults to `UTC`
	//
	// > **NOTE:** The maximum number of snapshots that Azure Files can retain is 200. If your combined snapshot count exceeds 200 based on your retention policies, it will result in an error. See [this](https://docs.microsoft.com/azure/backup/backup-azure-files-faq#what-is-the-maximum-retention-i-can-configure-for-backups) article for more information.
	Timezone pulumi.StringPtrOutput `pulumi:"timezone"`
}

// NewPolicyFileShare registers a new resource with the given unique name, arguments, and options.
func NewPolicyFileShare(ctx *pulumi.Context,
	name string, args *PolicyFileShareArgs, opts ...pulumi.ResourceOption) (*PolicyFileShare, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Backup == nil {
		return nil, errors.New("invalid value for required argument 'Backup'")
	}
	if args.RecoveryVaultName == nil {
		return nil, errors.New("invalid value for required argument 'RecoveryVaultName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.RetentionDaily == nil {
		return nil, errors.New("invalid value for required argument 'RetentionDaily'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicyFileShare
	err := ctx.RegisterResource("azure:backup/policyFileShare:PolicyFileShare", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyFileShare gets an existing PolicyFileShare resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyFileShare(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyFileShareState, opts ...pulumi.ResourceOption) (*PolicyFileShare, error) {
	var resource PolicyFileShare
	err := ctx.ReadResource("azure:backup/policyFileShare:PolicyFileShare", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyFileShare resources.
type policyFileShareState struct {
	// Configures the Policy backup frequency and times as documented in the `backup` block below.
	Backup *PolicyFileShareBackup `pulumi:"backup"`
	// Specifies the name of the policy. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies the name of the Recovery Services Vault to use. Changing this forces a new resource to be created.
	RecoveryVaultName *string `pulumi:"recoveryVaultName"`
	// The name of the resource group in which to create the policy. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Configures the policy daily retention as documented in the `retentionDaily` block below.
	RetentionDaily *PolicyFileShareRetentionDaily `pulumi:"retentionDaily"`
	// Configures the policy monthly retention as documented in the `retentionMonthly` block below.
	RetentionMonthly *PolicyFileShareRetentionMonthly `pulumi:"retentionMonthly"`
	// Configures the policy weekly retention as documented in the `retentionWeekly` block below.
	RetentionWeekly *PolicyFileShareRetentionWeekly `pulumi:"retentionWeekly"`
	// Configures the policy yearly retention as documented in the `retentionYearly` block below.
	RetentionYearly *PolicyFileShareRetentionYearly `pulumi:"retentionYearly"`
	// Specifies the timezone. [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/). Defaults to `UTC`
	//
	// > **NOTE:** The maximum number of snapshots that Azure Files can retain is 200. If your combined snapshot count exceeds 200 based on your retention policies, it will result in an error. See [this](https://docs.microsoft.com/azure/backup/backup-azure-files-faq#what-is-the-maximum-retention-i-can-configure-for-backups) article for more information.
	Timezone *string `pulumi:"timezone"`
}

type PolicyFileShareState struct {
	// Configures the Policy backup frequency and times as documented in the `backup` block below.
	Backup PolicyFileShareBackupPtrInput
	// Specifies the name of the policy. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies the name of the Recovery Services Vault to use. Changing this forces a new resource to be created.
	RecoveryVaultName pulumi.StringPtrInput
	// The name of the resource group in which to create the policy. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// Configures the policy daily retention as documented in the `retentionDaily` block below.
	RetentionDaily PolicyFileShareRetentionDailyPtrInput
	// Configures the policy monthly retention as documented in the `retentionMonthly` block below.
	RetentionMonthly PolicyFileShareRetentionMonthlyPtrInput
	// Configures the policy weekly retention as documented in the `retentionWeekly` block below.
	RetentionWeekly PolicyFileShareRetentionWeeklyPtrInput
	// Configures the policy yearly retention as documented in the `retentionYearly` block below.
	RetentionYearly PolicyFileShareRetentionYearlyPtrInput
	// Specifies the timezone. [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/). Defaults to `UTC`
	//
	// > **NOTE:** The maximum number of snapshots that Azure Files can retain is 200. If your combined snapshot count exceeds 200 based on your retention policies, it will result in an error. See [this](https://docs.microsoft.com/azure/backup/backup-azure-files-faq#what-is-the-maximum-retention-i-can-configure-for-backups) article for more information.
	Timezone pulumi.StringPtrInput
}

func (PolicyFileShareState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyFileShareState)(nil)).Elem()
}

type policyFileShareArgs struct {
	// Configures the Policy backup frequency and times as documented in the `backup` block below.
	Backup PolicyFileShareBackup `pulumi:"backup"`
	// Specifies the name of the policy. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies the name of the Recovery Services Vault to use. Changing this forces a new resource to be created.
	RecoveryVaultName string `pulumi:"recoveryVaultName"`
	// The name of the resource group in which to create the policy. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Configures the policy daily retention as documented in the `retentionDaily` block below.
	RetentionDaily PolicyFileShareRetentionDaily `pulumi:"retentionDaily"`
	// Configures the policy monthly retention as documented in the `retentionMonthly` block below.
	RetentionMonthly *PolicyFileShareRetentionMonthly `pulumi:"retentionMonthly"`
	// Configures the policy weekly retention as documented in the `retentionWeekly` block below.
	RetentionWeekly *PolicyFileShareRetentionWeekly `pulumi:"retentionWeekly"`
	// Configures the policy yearly retention as documented in the `retentionYearly` block below.
	RetentionYearly *PolicyFileShareRetentionYearly `pulumi:"retentionYearly"`
	// Specifies the timezone. [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/). Defaults to `UTC`
	//
	// > **NOTE:** The maximum number of snapshots that Azure Files can retain is 200. If your combined snapshot count exceeds 200 based on your retention policies, it will result in an error. See [this](https://docs.microsoft.com/azure/backup/backup-azure-files-faq#what-is-the-maximum-retention-i-can-configure-for-backups) article for more information.
	Timezone *string `pulumi:"timezone"`
}

// The set of arguments for constructing a PolicyFileShare resource.
type PolicyFileShareArgs struct {
	// Configures the Policy backup frequency and times as documented in the `backup` block below.
	Backup PolicyFileShareBackupInput
	// Specifies the name of the policy. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies the name of the Recovery Services Vault to use. Changing this forces a new resource to be created.
	RecoveryVaultName pulumi.StringInput
	// The name of the resource group in which to create the policy. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// Configures the policy daily retention as documented in the `retentionDaily` block below.
	RetentionDaily PolicyFileShareRetentionDailyInput
	// Configures the policy monthly retention as documented in the `retentionMonthly` block below.
	RetentionMonthly PolicyFileShareRetentionMonthlyPtrInput
	// Configures the policy weekly retention as documented in the `retentionWeekly` block below.
	RetentionWeekly PolicyFileShareRetentionWeeklyPtrInput
	// Configures the policy yearly retention as documented in the `retentionYearly` block below.
	RetentionYearly PolicyFileShareRetentionYearlyPtrInput
	// Specifies the timezone. [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/). Defaults to `UTC`
	//
	// > **NOTE:** The maximum number of snapshots that Azure Files can retain is 200. If your combined snapshot count exceeds 200 based on your retention policies, it will result in an error. See [this](https://docs.microsoft.com/azure/backup/backup-azure-files-faq#what-is-the-maximum-retention-i-can-configure-for-backups) article for more information.
	Timezone pulumi.StringPtrInput
}

func (PolicyFileShareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyFileShareArgs)(nil)).Elem()
}

type PolicyFileShareInput interface {
	pulumi.Input

	ToPolicyFileShareOutput() PolicyFileShareOutput
	ToPolicyFileShareOutputWithContext(ctx context.Context) PolicyFileShareOutput
}

func (*PolicyFileShare) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyFileShare)(nil)).Elem()
}

func (i *PolicyFileShare) ToPolicyFileShareOutput() PolicyFileShareOutput {
	return i.ToPolicyFileShareOutputWithContext(context.Background())
}

func (i *PolicyFileShare) ToPolicyFileShareOutputWithContext(ctx context.Context) PolicyFileShareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyFileShareOutput)
}

// PolicyFileShareArrayInput is an input type that accepts PolicyFileShareArray and PolicyFileShareArrayOutput values.
// You can construct a concrete instance of `PolicyFileShareArrayInput` via:
//
//	PolicyFileShareArray{ PolicyFileShareArgs{...} }
type PolicyFileShareArrayInput interface {
	pulumi.Input

	ToPolicyFileShareArrayOutput() PolicyFileShareArrayOutput
	ToPolicyFileShareArrayOutputWithContext(context.Context) PolicyFileShareArrayOutput
}

type PolicyFileShareArray []PolicyFileShareInput

func (PolicyFileShareArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyFileShare)(nil)).Elem()
}

func (i PolicyFileShareArray) ToPolicyFileShareArrayOutput() PolicyFileShareArrayOutput {
	return i.ToPolicyFileShareArrayOutputWithContext(context.Background())
}

func (i PolicyFileShareArray) ToPolicyFileShareArrayOutputWithContext(ctx context.Context) PolicyFileShareArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyFileShareArrayOutput)
}

// PolicyFileShareMapInput is an input type that accepts PolicyFileShareMap and PolicyFileShareMapOutput values.
// You can construct a concrete instance of `PolicyFileShareMapInput` via:
//
//	PolicyFileShareMap{ "key": PolicyFileShareArgs{...} }
type PolicyFileShareMapInput interface {
	pulumi.Input

	ToPolicyFileShareMapOutput() PolicyFileShareMapOutput
	ToPolicyFileShareMapOutputWithContext(context.Context) PolicyFileShareMapOutput
}

type PolicyFileShareMap map[string]PolicyFileShareInput

func (PolicyFileShareMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyFileShare)(nil)).Elem()
}

func (i PolicyFileShareMap) ToPolicyFileShareMapOutput() PolicyFileShareMapOutput {
	return i.ToPolicyFileShareMapOutputWithContext(context.Background())
}

func (i PolicyFileShareMap) ToPolicyFileShareMapOutputWithContext(ctx context.Context) PolicyFileShareMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyFileShareMapOutput)
}

type PolicyFileShareOutput struct{ *pulumi.OutputState }

func (PolicyFileShareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyFileShare)(nil)).Elem()
}

func (o PolicyFileShareOutput) ToPolicyFileShareOutput() PolicyFileShareOutput {
	return o
}

func (o PolicyFileShareOutput) ToPolicyFileShareOutputWithContext(ctx context.Context) PolicyFileShareOutput {
	return o
}

// Configures the Policy backup frequency and times as documented in the `backup` block below.
func (o PolicyFileShareOutput) Backup() PolicyFileShareBackupOutput {
	return o.ApplyT(func(v *PolicyFileShare) PolicyFileShareBackupOutput { return v.Backup }).(PolicyFileShareBackupOutput)
}

// Specifies the name of the policy. Changing this forces a new resource to be created.
func (o PolicyFileShareOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyFileShare) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the name of the Recovery Services Vault to use. Changing this forces a new resource to be created.
func (o PolicyFileShareOutput) RecoveryVaultName() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyFileShare) pulumi.StringOutput { return v.RecoveryVaultName }).(pulumi.StringOutput)
}

// The name of the resource group in which to create the policy. Changing this forces a new resource to be created.
func (o PolicyFileShareOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyFileShare) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// Configures the policy daily retention as documented in the `retentionDaily` block below.
func (o PolicyFileShareOutput) RetentionDaily() PolicyFileShareRetentionDailyOutput {
	return o.ApplyT(func(v *PolicyFileShare) PolicyFileShareRetentionDailyOutput { return v.RetentionDaily }).(PolicyFileShareRetentionDailyOutput)
}

// Configures the policy monthly retention as documented in the `retentionMonthly` block below.
func (o PolicyFileShareOutput) RetentionMonthly() PolicyFileShareRetentionMonthlyPtrOutput {
	return o.ApplyT(func(v *PolicyFileShare) PolicyFileShareRetentionMonthlyPtrOutput { return v.RetentionMonthly }).(PolicyFileShareRetentionMonthlyPtrOutput)
}

// Configures the policy weekly retention as documented in the `retentionWeekly` block below.
func (o PolicyFileShareOutput) RetentionWeekly() PolicyFileShareRetentionWeeklyPtrOutput {
	return o.ApplyT(func(v *PolicyFileShare) PolicyFileShareRetentionWeeklyPtrOutput { return v.RetentionWeekly }).(PolicyFileShareRetentionWeeklyPtrOutput)
}

// Configures the policy yearly retention as documented in the `retentionYearly` block below.
func (o PolicyFileShareOutput) RetentionYearly() PolicyFileShareRetentionYearlyPtrOutput {
	return o.ApplyT(func(v *PolicyFileShare) PolicyFileShareRetentionYearlyPtrOutput { return v.RetentionYearly }).(PolicyFileShareRetentionYearlyPtrOutput)
}

// Specifies the timezone. [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/). Defaults to `UTC`
//
// > **NOTE:** The maximum number of snapshots that Azure Files can retain is 200. If your combined snapshot count exceeds 200 based on your retention policies, it will result in an error. See [this](https://docs.microsoft.com/azure/backup/backup-azure-files-faq#what-is-the-maximum-retention-i-can-configure-for-backups) article for more information.
func (o PolicyFileShareOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyFileShare) pulumi.StringPtrOutput { return v.Timezone }).(pulumi.StringPtrOutput)
}

type PolicyFileShareArrayOutput struct{ *pulumi.OutputState }

func (PolicyFileShareArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyFileShare)(nil)).Elem()
}

func (o PolicyFileShareArrayOutput) ToPolicyFileShareArrayOutput() PolicyFileShareArrayOutput {
	return o
}

func (o PolicyFileShareArrayOutput) ToPolicyFileShareArrayOutputWithContext(ctx context.Context) PolicyFileShareArrayOutput {
	return o
}

func (o PolicyFileShareArrayOutput) Index(i pulumi.IntInput) PolicyFileShareOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicyFileShare {
		return vs[0].([]*PolicyFileShare)[vs[1].(int)]
	}).(PolicyFileShareOutput)
}

type PolicyFileShareMapOutput struct{ *pulumi.OutputState }

func (PolicyFileShareMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyFileShare)(nil)).Elem()
}

func (o PolicyFileShareMapOutput) ToPolicyFileShareMapOutput() PolicyFileShareMapOutput {
	return o
}

func (o PolicyFileShareMapOutput) ToPolicyFileShareMapOutputWithContext(ctx context.Context) PolicyFileShareMapOutput {
	return o
}

func (o PolicyFileShareMapOutput) MapIndex(k pulumi.StringInput) PolicyFileShareOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicyFileShare {
		return vs[0].(map[string]*PolicyFileShare)[vs[1].(string)]
	}).(PolicyFileShareOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyFileShareInput)(nil)).Elem(), &PolicyFileShare{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyFileShareArrayInput)(nil)).Elem(), PolicyFileShareArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyFileShareMapInput)(nil)).Elem(), PolicyFileShareMap{})
	pulumi.RegisterOutputType(PolicyFileShareOutput{})
	pulumi.RegisterOutputType(PolicyFileShareArrayOutput{})
	pulumi.RegisterOutputType(PolicyFileShareMapOutput{})
}
