// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Azure VM Workload Backup Policy within a Recovery Services vault.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/backup"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/recoveryservices"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVault, err := recoveryservices.NewVault(ctx, "exampleVault", &recoveryservices.VaultArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku:               pulumi.String("Standard"),
//				SoftDeleteEnabled: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = backup.NewPolicyVMWorkload(ctx, "examplePolicyVMWorkload", &backup.PolicyVMWorkloadArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				RecoveryVaultName: exampleVault.Name,
//				WorkloadType:      pulumi.String("SQLDataBase"),
//				Settings: &backup.PolicyVMWorkloadSettingsArgs{
//					TimeZone:           pulumi.String("UTC"),
//					CompressionEnabled: pulumi.Bool(false),
//				},
//				ProtectionPolicies: backup.PolicyVMWorkloadProtectionPolicyArray{
//					&backup.PolicyVMWorkloadProtectionPolicyArgs{
//						PolicyType: pulumi.String("Full"),
//						Backup: &backup.PolicyVMWorkloadProtectionPolicyBackupArgs{
//							Frequency: pulumi.String("Daily"),
//							Time:      pulumi.String("15:00"),
//						},
//						RetentionDaily: &backup.PolicyVMWorkloadProtectionPolicyRetentionDailyArgs{
//							Count: pulumi.Int(8),
//						},
//					},
//					&backup.PolicyVMWorkloadProtectionPolicyArgs{
//						PolicyType: pulumi.String("Log"),
//						Backup: &backup.PolicyVMWorkloadProtectionPolicyBackupArgs{
//							FrequencyInMinutes: pulumi.Int(15),
//						},
//						SimpleRetention: &backup.PolicyVMWorkloadProtectionPolicySimpleRetentionArgs{
//							Count: pulumi.Int(8),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Azure VM Workload Backup Policies can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:backup/policyVMWorkload:PolicyVMWorkload policy1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.RecoveryServices/vaults/vault1/backupPolicies/policy1
//
// ```
type PolicyVMWorkload struct {
	pulumi.CustomResourceState

	// The name of the VM Workload Backup Policy. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// One or more `protectionPolicy` blocks as defined below.
	ProtectionPolicies PolicyVMWorkloadProtectionPolicyArrayOutput `pulumi:"protectionPolicies"`
	// The name of the Recovery Services Vault to use. Changing this forces a new resource to be created.
	RecoveryVaultName pulumi.StringOutput `pulumi:"recoveryVaultName"`
	// The name of the resource group in which to create the VM Workload Backup Policy. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A `settings` block as defined below.
	Settings PolicyVMWorkloadSettingsOutput `pulumi:"settings"`
	// The VM Workload type for the Backup Policy. Possible values are `SQLDataBase` and `SAPHanaDatabase`. Changing this forces a new resource to be created.
	WorkloadType pulumi.StringOutput `pulumi:"workloadType"`
}

// NewPolicyVMWorkload registers a new resource with the given unique name, arguments, and options.
func NewPolicyVMWorkload(ctx *pulumi.Context,
	name string, args *PolicyVMWorkloadArgs, opts ...pulumi.ResourceOption) (*PolicyVMWorkload, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProtectionPolicies == nil {
		return nil, errors.New("invalid value for required argument 'ProtectionPolicies'")
	}
	if args.RecoveryVaultName == nil {
		return nil, errors.New("invalid value for required argument 'RecoveryVaultName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Settings == nil {
		return nil, errors.New("invalid value for required argument 'Settings'")
	}
	if args.WorkloadType == nil {
		return nil, errors.New("invalid value for required argument 'WorkloadType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicyVMWorkload
	err := ctx.RegisterResource("azure:backup/policyVMWorkload:PolicyVMWorkload", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyVMWorkload gets an existing PolicyVMWorkload resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyVMWorkload(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyVMWorkloadState, opts ...pulumi.ResourceOption) (*PolicyVMWorkload, error) {
	var resource PolicyVMWorkload
	err := ctx.ReadResource("azure:backup/policyVMWorkload:PolicyVMWorkload", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyVMWorkload resources.
type policyVMWorkloadState struct {
	// The name of the VM Workload Backup Policy. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// One or more `protectionPolicy` blocks as defined below.
	ProtectionPolicies []PolicyVMWorkloadProtectionPolicy `pulumi:"protectionPolicies"`
	// The name of the Recovery Services Vault to use. Changing this forces a new resource to be created.
	RecoveryVaultName *string `pulumi:"recoveryVaultName"`
	// The name of the resource group in which to create the VM Workload Backup Policy. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A `settings` block as defined below.
	Settings *PolicyVMWorkloadSettings `pulumi:"settings"`
	// The VM Workload type for the Backup Policy. Possible values are `SQLDataBase` and `SAPHanaDatabase`. Changing this forces a new resource to be created.
	WorkloadType *string `pulumi:"workloadType"`
}

type PolicyVMWorkloadState struct {
	// The name of the VM Workload Backup Policy. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// One or more `protectionPolicy` blocks as defined below.
	ProtectionPolicies PolicyVMWorkloadProtectionPolicyArrayInput
	// The name of the Recovery Services Vault to use. Changing this forces a new resource to be created.
	RecoveryVaultName pulumi.StringPtrInput
	// The name of the resource group in which to create the VM Workload Backup Policy. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A `settings` block as defined below.
	Settings PolicyVMWorkloadSettingsPtrInput
	// The VM Workload type for the Backup Policy. Possible values are `SQLDataBase` and `SAPHanaDatabase`. Changing this forces a new resource to be created.
	WorkloadType pulumi.StringPtrInput
}

func (PolicyVMWorkloadState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyVMWorkloadState)(nil)).Elem()
}

type policyVMWorkloadArgs struct {
	// The name of the VM Workload Backup Policy. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// One or more `protectionPolicy` blocks as defined below.
	ProtectionPolicies []PolicyVMWorkloadProtectionPolicy `pulumi:"protectionPolicies"`
	// The name of the Recovery Services Vault to use. Changing this forces a new resource to be created.
	RecoveryVaultName string `pulumi:"recoveryVaultName"`
	// The name of the resource group in which to create the VM Workload Backup Policy. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A `settings` block as defined below.
	Settings PolicyVMWorkloadSettings `pulumi:"settings"`
	// The VM Workload type for the Backup Policy. Possible values are `SQLDataBase` and `SAPHanaDatabase`. Changing this forces a new resource to be created.
	WorkloadType string `pulumi:"workloadType"`
}

// The set of arguments for constructing a PolicyVMWorkload resource.
type PolicyVMWorkloadArgs struct {
	// The name of the VM Workload Backup Policy. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// One or more `protectionPolicy` blocks as defined below.
	ProtectionPolicies PolicyVMWorkloadProtectionPolicyArrayInput
	// The name of the Recovery Services Vault to use. Changing this forces a new resource to be created.
	RecoveryVaultName pulumi.StringInput
	// The name of the resource group in which to create the VM Workload Backup Policy. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A `settings` block as defined below.
	Settings PolicyVMWorkloadSettingsInput
	// The VM Workload type for the Backup Policy. Possible values are `SQLDataBase` and `SAPHanaDatabase`. Changing this forces a new resource to be created.
	WorkloadType pulumi.StringInput
}

func (PolicyVMWorkloadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyVMWorkloadArgs)(nil)).Elem()
}

type PolicyVMWorkloadInput interface {
	pulumi.Input

	ToPolicyVMWorkloadOutput() PolicyVMWorkloadOutput
	ToPolicyVMWorkloadOutputWithContext(ctx context.Context) PolicyVMWorkloadOutput
}

func (*PolicyVMWorkload) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyVMWorkload)(nil)).Elem()
}

func (i *PolicyVMWorkload) ToPolicyVMWorkloadOutput() PolicyVMWorkloadOutput {
	return i.ToPolicyVMWorkloadOutputWithContext(context.Background())
}

func (i *PolicyVMWorkload) ToPolicyVMWorkloadOutputWithContext(ctx context.Context) PolicyVMWorkloadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMWorkloadOutput)
}

// PolicyVMWorkloadArrayInput is an input type that accepts PolicyVMWorkloadArray and PolicyVMWorkloadArrayOutput values.
// You can construct a concrete instance of `PolicyVMWorkloadArrayInput` via:
//
//	PolicyVMWorkloadArray{ PolicyVMWorkloadArgs{...} }
type PolicyVMWorkloadArrayInput interface {
	pulumi.Input

	ToPolicyVMWorkloadArrayOutput() PolicyVMWorkloadArrayOutput
	ToPolicyVMWorkloadArrayOutputWithContext(context.Context) PolicyVMWorkloadArrayOutput
}

type PolicyVMWorkloadArray []PolicyVMWorkloadInput

func (PolicyVMWorkloadArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyVMWorkload)(nil)).Elem()
}

func (i PolicyVMWorkloadArray) ToPolicyVMWorkloadArrayOutput() PolicyVMWorkloadArrayOutput {
	return i.ToPolicyVMWorkloadArrayOutputWithContext(context.Background())
}

func (i PolicyVMWorkloadArray) ToPolicyVMWorkloadArrayOutputWithContext(ctx context.Context) PolicyVMWorkloadArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMWorkloadArrayOutput)
}

// PolicyVMWorkloadMapInput is an input type that accepts PolicyVMWorkloadMap and PolicyVMWorkloadMapOutput values.
// You can construct a concrete instance of `PolicyVMWorkloadMapInput` via:
//
//	PolicyVMWorkloadMap{ "key": PolicyVMWorkloadArgs{...} }
type PolicyVMWorkloadMapInput interface {
	pulumi.Input

	ToPolicyVMWorkloadMapOutput() PolicyVMWorkloadMapOutput
	ToPolicyVMWorkloadMapOutputWithContext(context.Context) PolicyVMWorkloadMapOutput
}

type PolicyVMWorkloadMap map[string]PolicyVMWorkloadInput

func (PolicyVMWorkloadMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyVMWorkload)(nil)).Elem()
}

func (i PolicyVMWorkloadMap) ToPolicyVMWorkloadMapOutput() PolicyVMWorkloadMapOutput {
	return i.ToPolicyVMWorkloadMapOutputWithContext(context.Background())
}

func (i PolicyVMWorkloadMap) ToPolicyVMWorkloadMapOutputWithContext(ctx context.Context) PolicyVMWorkloadMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMWorkloadMapOutput)
}

type PolicyVMWorkloadOutput struct{ *pulumi.OutputState }

func (PolicyVMWorkloadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyVMWorkload)(nil)).Elem()
}

func (o PolicyVMWorkloadOutput) ToPolicyVMWorkloadOutput() PolicyVMWorkloadOutput {
	return o
}

func (o PolicyVMWorkloadOutput) ToPolicyVMWorkloadOutputWithContext(ctx context.Context) PolicyVMWorkloadOutput {
	return o
}

// The name of the VM Workload Backup Policy. Changing this forces a new resource to be created.
func (o PolicyVMWorkloadOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyVMWorkload) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// One or more `protectionPolicy` blocks as defined below.
func (o PolicyVMWorkloadOutput) ProtectionPolicies() PolicyVMWorkloadProtectionPolicyArrayOutput {
	return o.ApplyT(func(v *PolicyVMWorkload) PolicyVMWorkloadProtectionPolicyArrayOutput { return v.ProtectionPolicies }).(PolicyVMWorkloadProtectionPolicyArrayOutput)
}

// The name of the Recovery Services Vault to use. Changing this forces a new resource to be created.
func (o PolicyVMWorkloadOutput) RecoveryVaultName() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyVMWorkload) pulumi.StringOutput { return v.RecoveryVaultName }).(pulumi.StringOutput)
}

// The name of the resource group in which to create the VM Workload Backup Policy. Changing this forces a new resource to be created.
func (o PolicyVMWorkloadOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyVMWorkload) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A `settings` block as defined below.
func (o PolicyVMWorkloadOutput) Settings() PolicyVMWorkloadSettingsOutput {
	return o.ApplyT(func(v *PolicyVMWorkload) PolicyVMWorkloadSettingsOutput { return v.Settings }).(PolicyVMWorkloadSettingsOutput)
}

// The VM Workload type for the Backup Policy. Possible values are `SQLDataBase` and `SAPHanaDatabase`. Changing this forces a new resource to be created.
func (o PolicyVMWorkloadOutput) WorkloadType() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyVMWorkload) pulumi.StringOutput { return v.WorkloadType }).(pulumi.StringOutput)
}

type PolicyVMWorkloadArrayOutput struct{ *pulumi.OutputState }

func (PolicyVMWorkloadArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyVMWorkload)(nil)).Elem()
}

func (o PolicyVMWorkloadArrayOutput) ToPolicyVMWorkloadArrayOutput() PolicyVMWorkloadArrayOutput {
	return o
}

func (o PolicyVMWorkloadArrayOutput) ToPolicyVMWorkloadArrayOutputWithContext(ctx context.Context) PolicyVMWorkloadArrayOutput {
	return o
}

func (o PolicyVMWorkloadArrayOutput) Index(i pulumi.IntInput) PolicyVMWorkloadOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicyVMWorkload {
		return vs[0].([]*PolicyVMWorkload)[vs[1].(int)]
	}).(PolicyVMWorkloadOutput)
}

type PolicyVMWorkloadMapOutput struct{ *pulumi.OutputState }

func (PolicyVMWorkloadMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyVMWorkload)(nil)).Elem()
}

func (o PolicyVMWorkloadMapOutput) ToPolicyVMWorkloadMapOutput() PolicyVMWorkloadMapOutput {
	return o
}

func (o PolicyVMWorkloadMapOutput) ToPolicyVMWorkloadMapOutputWithContext(ctx context.Context) PolicyVMWorkloadMapOutput {
	return o
}

func (o PolicyVMWorkloadMapOutput) MapIndex(k pulumi.StringInput) PolicyVMWorkloadOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicyVMWorkload {
		return vs[0].(map[string]*PolicyVMWorkload)[vs[1].(string)]
	}).(PolicyVMWorkloadOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyVMWorkloadInput)(nil)).Elem(), &PolicyVMWorkload{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyVMWorkloadArrayInput)(nil)).Elem(), PolicyVMWorkloadArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyVMWorkloadMapInput)(nil)).Elem(), PolicyVMWorkloadMap{})
	pulumi.RegisterOutputType(PolicyVMWorkloadOutput{})
	pulumi.RegisterOutputType(PolicyVMWorkloadArrayOutput{})
	pulumi.RegisterOutputType(PolicyVMWorkloadMapOutput{})
}
