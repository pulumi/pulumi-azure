// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type PolicyFileShareBackup struct {
	// Sets the backup frequency. Possible values are `Daily` and `Hourly`.
	//
	// > **NOTE:** This argument is made available for consistency with VM backup policies and to allow for potential future support of weekly backups
	Frequency string `pulumi:"frequency"`
	// A `hourly` block defined as below. This is required when `frequency` is set to `Hourly`.
	Hourly *PolicyFileShareBackupHourly `pulumi:"hourly"`
	// The time of day to perform the backup in 24-hour format. Times must be either on the hour or half hour (e.g. 12:00, 12:30, 13:00, etc.)
	//
	// > **NOTE:** `time` is required when `frequency` is set to `Daily`.
	Time *string `pulumi:"time"`
}

// PolicyFileShareBackupInput is an input type that accepts PolicyFileShareBackupArgs and PolicyFileShareBackupOutput values.
// You can construct a concrete instance of `PolicyFileShareBackupInput` via:
//
//	PolicyFileShareBackupArgs{...}
type PolicyFileShareBackupInput interface {
	pulumi.Input

	ToPolicyFileShareBackupOutput() PolicyFileShareBackupOutput
	ToPolicyFileShareBackupOutputWithContext(context.Context) PolicyFileShareBackupOutput
}

type PolicyFileShareBackupArgs struct {
	// Sets the backup frequency. Possible values are `Daily` and `Hourly`.
	//
	// > **NOTE:** This argument is made available for consistency with VM backup policies and to allow for potential future support of weekly backups
	Frequency pulumi.StringInput `pulumi:"frequency"`
	// A `hourly` block defined as below. This is required when `frequency` is set to `Hourly`.
	Hourly PolicyFileShareBackupHourlyPtrInput `pulumi:"hourly"`
	// The time of day to perform the backup in 24-hour format. Times must be either on the hour or half hour (e.g. 12:00, 12:30, 13:00, etc.)
	//
	// > **NOTE:** `time` is required when `frequency` is set to `Daily`.
	Time pulumi.StringPtrInput `pulumi:"time"`
}

func (PolicyFileShareBackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyFileShareBackup)(nil)).Elem()
}

func (i PolicyFileShareBackupArgs) ToPolicyFileShareBackupOutput() PolicyFileShareBackupOutput {
	return i.ToPolicyFileShareBackupOutputWithContext(context.Background())
}

func (i PolicyFileShareBackupArgs) ToPolicyFileShareBackupOutputWithContext(ctx context.Context) PolicyFileShareBackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyFileShareBackupOutput)
}

func (i PolicyFileShareBackupArgs) ToOutput(ctx context.Context) pulumix.Output[PolicyFileShareBackup] {
	return pulumix.Output[PolicyFileShareBackup]{
		OutputState: i.ToPolicyFileShareBackupOutputWithContext(ctx).OutputState,
	}
}

func (i PolicyFileShareBackupArgs) ToPolicyFileShareBackupPtrOutput() PolicyFileShareBackupPtrOutput {
	return i.ToPolicyFileShareBackupPtrOutputWithContext(context.Background())
}

func (i PolicyFileShareBackupArgs) ToPolicyFileShareBackupPtrOutputWithContext(ctx context.Context) PolicyFileShareBackupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyFileShareBackupOutput).ToPolicyFileShareBackupPtrOutputWithContext(ctx)
}

// PolicyFileShareBackupPtrInput is an input type that accepts PolicyFileShareBackupArgs, PolicyFileShareBackupPtr and PolicyFileShareBackupPtrOutput values.
// You can construct a concrete instance of `PolicyFileShareBackupPtrInput` via:
//
//	        PolicyFileShareBackupArgs{...}
//
//	or:
//
//	        nil
type PolicyFileShareBackupPtrInput interface {
	pulumi.Input

	ToPolicyFileShareBackupPtrOutput() PolicyFileShareBackupPtrOutput
	ToPolicyFileShareBackupPtrOutputWithContext(context.Context) PolicyFileShareBackupPtrOutput
}

type policyFileShareBackupPtrType PolicyFileShareBackupArgs

func PolicyFileShareBackupPtr(v *PolicyFileShareBackupArgs) PolicyFileShareBackupPtrInput {
	return (*policyFileShareBackupPtrType)(v)
}

func (*policyFileShareBackupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyFileShareBackup)(nil)).Elem()
}

func (i *policyFileShareBackupPtrType) ToPolicyFileShareBackupPtrOutput() PolicyFileShareBackupPtrOutput {
	return i.ToPolicyFileShareBackupPtrOutputWithContext(context.Background())
}

func (i *policyFileShareBackupPtrType) ToPolicyFileShareBackupPtrOutputWithContext(ctx context.Context) PolicyFileShareBackupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyFileShareBackupPtrOutput)
}

func (i *policyFileShareBackupPtrType) ToOutput(ctx context.Context) pulumix.Output[*PolicyFileShareBackup] {
	return pulumix.Output[*PolicyFileShareBackup]{
		OutputState: i.ToPolicyFileShareBackupPtrOutputWithContext(ctx).OutputState,
	}
}

type PolicyFileShareBackupOutput struct{ *pulumi.OutputState }

func (PolicyFileShareBackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyFileShareBackup)(nil)).Elem()
}

func (o PolicyFileShareBackupOutput) ToPolicyFileShareBackupOutput() PolicyFileShareBackupOutput {
	return o
}

func (o PolicyFileShareBackupOutput) ToPolicyFileShareBackupOutputWithContext(ctx context.Context) PolicyFileShareBackupOutput {
	return o
}

func (o PolicyFileShareBackupOutput) ToPolicyFileShareBackupPtrOutput() PolicyFileShareBackupPtrOutput {
	return o.ToPolicyFileShareBackupPtrOutputWithContext(context.Background())
}

func (o PolicyFileShareBackupOutput) ToPolicyFileShareBackupPtrOutputWithContext(ctx context.Context) PolicyFileShareBackupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyFileShareBackup) *PolicyFileShareBackup {
		return &v
	}).(PolicyFileShareBackupPtrOutput)
}

func (o PolicyFileShareBackupOutput) ToOutput(ctx context.Context) pulumix.Output[PolicyFileShareBackup] {
	return pulumix.Output[PolicyFileShareBackup]{
		OutputState: o.OutputState,
	}
}

// Sets the backup frequency. Possible values are `Daily` and `Hourly`.
//
// > **NOTE:** This argument is made available for consistency with VM backup policies and to allow for potential future support of weekly backups
func (o PolicyFileShareBackupOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyFileShareBackup) string { return v.Frequency }).(pulumi.StringOutput)
}

// A `hourly` block defined as below. This is required when `frequency` is set to `Hourly`.
func (o PolicyFileShareBackupOutput) Hourly() PolicyFileShareBackupHourlyPtrOutput {
	return o.ApplyT(func(v PolicyFileShareBackup) *PolicyFileShareBackupHourly { return v.Hourly }).(PolicyFileShareBackupHourlyPtrOutput)
}

// The time of day to perform the backup in 24-hour format. Times must be either on the hour or half hour (e.g. 12:00, 12:30, 13:00, etc.)
//
// > **NOTE:** `time` is required when `frequency` is set to `Daily`.
func (o PolicyFileShareBackupOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyFileShareBackup) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type PolicyFileShareBackupPtrOutput struct{ *pulumi.OutputState }

func (PolicyFileShareBackupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyFileShareBackup)(nil)).Elem()
}

func (o PolicyFileShareBackupPtrOutput) ToPolicyFileShareBackupPtrOutput() PolicyFileShareBackupPtrOutput {
	return o
}

func (o PolicyFileShareBackupPtrOutput) ToPolicyFileShareBackupPtrOutputWithContext(ctx context.Context) PolicyFileShareBackupPtrOutput {
	return o
}

func (o PolicyFileShareBackupPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PolicyFileShareBackup] {
	return pulumix.Output[*PolicyFileShareBackup]{
		OutputState: o.OutputState,
	}
}

func (o PolicyFileShareBackupPtrOutput) Elem() PolicyFileShareBackupOutput {
	return o.ApplyT(func(v *PolicyFileShareBackup) PolicyFileShareBackup {
		if v != nil {
			return *v
		}
		var ret PolicyFileShareBackup
		return ret
	}).(PolicyFileShareBackupOutput)
}

// Sets the backup frequency. Possible values are `Daily` and `Hourly`.
//
// > **NOTE:** This argument is made available for consistency with VM backup policies and to allow for potential future support of weekly backups
func (o PolicyFileShareBackupPtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyFileShareBackup) *string {
		if v == nil {
			return nil
		}
		return &v.Frequency
	}).(pulumi.StringPtrOutput)
}

// A `hourly` block defined as below. This is required when `frequency` is set to `Hourly`.
func (o PolicyFileShareBackupPtrOutput) Hourly() PolicyFileShareBackupHourlyPtrOutput {
	return o.ApplyT(func(v *PolicyFileShareBackup) *PolicyFileShareBackupHourly {
		if v == nil {
			return nil
		}
		return v.Hourly
	}).(PolicyFileShareBackupHourlyPtrOutput)
}

// The time of day to perform the backup in 24-hour format. Times must be either on the hour or half hour (e.g. 12:00, 12:30, 13:00, etc.)
//
// > **NOTE:** `time` is required when `frequency` is set to `Daily`.
func (o PolicyFileShareBackupPtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyFileShareBackup) *string {
		if v == nil {
			return nil
		}
		return v.Time
	}).(pulumi.StringPtrOutput)
}

type PolicyFileShareBackupHourly struct {
	// Specifies the interval at which backup needs to be triggered. Possible values are `4`, `6`, `8` and `12`.
	Interval int `pulumi:"interval"`
	// Specifies the start time of the hourly backup. The time format should be in 24-hour format. Times must be either on the hour or half hour (e.g. 12:00, 12:30, 13:00, etc.).
	StartTime string `pulumi:"startTime"`
	// Species the duration of the backup window in hours. Details could be found [here](https://learn.microsoft.com/en-us/azure/backup/backup-azure-files-faq#what-does-the-duration-attribute-in-azure-files-backup-policy-signify-).
	WindowDuration int `pulumi:"windowDuration"`
}

// PolicyFileShareBackupHourlyInput is an input type that accepts PolicyFileShareBackupHourlyArgs and PolicyFileShareBackupHourlyOutput values.
// You can construct a concrete instance of `PolicyFileShareBackupHourlyInput` via:
//
//	PolicyFileShareBackupHourlyArgs{...}
type PolicyFileShareBackupHourlyInput interface {
	pulumi.Input

	ToPolicyFileShareBackupHourlyOutput() PolicyFileShareBackupHourlyOutput
	ToPolicyFileShareBackupHourlyOutputWithContext(context.Context) PolicyFileShareBackupHourlyOutput
}

type PolicyFileShareBackupHourlyArgs struct {
	// Specifies the interval at which backup needs to be triggered. Possible values are `4`, `6`, `8` and `12`.
	Interval pulumi.IntInput `pulumi:"interval"`
	// Specifies the start time of the hourly backup. The time format should be in 24-hour format. Times must be either on the hour or half hour (e.g. 12:00, 12:30, 13:00, etc.).
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// Species the duration of the backup window in hours. Details could be found [here](https://learn.microsoft.com/en-us/azure/backup/backup-azure-files-faq#what-does-the-duration-attribute-in-azure-files-backup-policy-signify-).
	WindowDuration pulumi.IntInput `pulumi:"windowDuration"`
}

func (PolicyFileShareBackupHourlyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyFileShareBackupHourly)(nil)).Elem()
}

func (i PolicyFileShareBackupHourlyArgs) ToPolicyFileShareBackupHourlyOutput() PolicyFileShareBackupHourlyOutput {
	return i.ToPolicyFileShareBackupHourlyOutputWithContext(context.Background())
}

func (i PolicyFileShareBackupHourlyArgs) ToPolicyFileShareBackupHourlyOutputWithContext(ctx context.Context) PolicyFileShareBackupHourlyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyFileShareBackupHourlyOutput)
}

func (i PolicyFileShareBackupHourlyArgs) ToOutput(ctx context.Context) pulumix.Output[PolicyFileShareBackupHourly] {
	return pulumix.Output[PolicyFileShareBackupHourly]{
		OutputState: i.ToPolicyFileShareBackupHourlyOutputWithContext(ctx).OutputState,
	}
}

func (i PolicyFileShareBackupHourlyArgs) ToPolicyFileShareBackupHourlyPtrOutput() PolicyFileShareBackupHourlyPtrOutput {
	return i.ToPolicyFileShareBackupHourlyPtrOutputWithContext(context.Background())
}

func (i PolicyFileShareBackupHourlyArgs) ToPolicyFileShareBackupHourlyPtrOutputWithContext(ctx context.Context) PolicyFileShareBackupHourlyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyFileShareBackupHourlyOutput).ToPolicyFileShareBackupHourlyPtrOutputWithContext(ctx)
}

// PolicyFileShareBackupHourlyPtrInput is an input type that accepts PolicyFileShareBackupHourlyArgs, PolicyFileShareBackupHourlyPtr and PolicyFileShareBackupHourlyPtrOutput values.
// You can construct a concrete instance of `PolicyFileShareBackupHourlyPtrInput` via:
//
//	        PolicyFileShareBackupHourlyArgs{...}
//
//	or:
//
//	        nil
type PolicyFileShareBackupHourlyPtrInput interface {
	pulumi.Input

	ToPolicyFileShareBackupHourlyPtrOutput() PolicyFileShareBackupHourlyPtrOutput
	ToPolicyFileShareBackupHourlyPtrOutputWithContext(context.Context) PolicyFileShareBackupHourlyPtrOutput
}

type policyFileShareBackupHourlyPtrType PolicyFileShareBackupHourlyArgs

func PolicyFileShareBackupHourlyPtr(v *PolicyFileShareBackupHourlyArgs) PolicyFileShareBackupHourlyPtrInput {
	return (*policyFileShareBackupHourlyPtrType)(v)
}

func (*policyFileShareBackupHourlyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyFileShareBackupHourly)(nil)).Elem()
}

func (i *policyFileShareBackupHourlyPtrType) ToPolicyFileShareBackupHourlyPtrOutput() PolicyFileShareBackupHourlyPtrOutput {
	return i.ToPolicyFileShareBackupHourlyPtrOutputWithContext(context.Background())
}

func (i *policyFileShareBackupHourlyPtrType) ToPolicyFileShareBackupHourlyPtrOutputWithContext(ctx context.Context) PolicyFileShareBackupHourlyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyFileShareBackupHourlyPtrOutput)
}

func (i *policyFileShareBackupHourlyPtrType) ToOutput(ctx context.Context) pulumix.Output[*PolicyFileShareBackupHourly] {
	return pulumix.Output[*PolicyFileShareBackupHourly]{
		OutputState: i.ToPolicyFileShareBackupHourlyPtrOutputWithContext(ctx).OutputState,
	}
}

type PolicyFileShareBackupHourlyOutput struct{ *pulumi.OutputState }

func (PolicyFileShareBackupHourlyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyFileShareBackupHourly)(nil)).Elem()
}

func (o PolicyFileShareBackupHourlyOutput) ToPolicyFileShareBackupHourlyOutput() PolicyFileShareBackupHourlyOutput {
	return o
}

func (o PolicyFileShareBackupHourlyOutput) ToPolicyFileShareBackupHourlyOutputWithContext(ctx context.Context) PolicyFileShareBackupHourlyOutput {
	return o
}

func (o PolicyFileShareBackupHourlyOutput) ToPolicyFileShareBackupHourlyPtrOutput() PolicyFileShareBackupHourlyPtrOutput {
	return o.ToPolicyFileShareBackupHourlyPtrOutputWithContext(context.Background())
}

func (o PolicyFileShareBackupHourlyOutput) ToPolicyFileShareBackupHourlyPtrOutputWithContext(ctx context.Context) PolicyFileShareBackupHourlyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyFileShareBackupHourly) *PolicyFileShareBackupHourly {
		return &v
	}).(PolicyFileShareBackupHourlyPtrOutput)
}

func (o PolicyFileShareBackupHourlyOutput) ToOutput(ctx context.Context) pulumix.Output[PolicyFileShareBackupHourly] {
	return pulumix.Output[PolicyFileShareBackupHourly]{
		OutputState: o.OutputState,
	}
}

// Specifies the interval at which backup needs to be triggered. Possible values are `4`, `6`, `8` and `12`.
func (o PolicyFileShareBackupHourlyOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v PolicyFileShareBackupHourly) int { return v.Interval }).(pulumi.IntOutput)
}

// Specifies the start time of the hourly backup. The time format should be in 24-hour format. Times must be either on the hour or half hour (e.g. 12:00, 12:30, 13:00, etc.).
func (o PolicyFileShareBackupHourlyOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyFileShareBackupHourly) string { return v.StartTime }).(pulumi.StringOutput)
}

// Species the duration of the backup window in hours. Details could be found [here](https://learn.microsoft.com/en-us/azure/backup/backup-azure-files-faq#what-does-the-duration-attribute-in-azure-files-backup-policy-signify-).
func (o PolicyFileShareBackupHourlyOutput) WindowDuration() pulumi.IntOutput {
	return o.ApplyT(func(v PolicyFileShareBackupHourly) int { return v.WindowDuration }).(pulumi.IntOutput)
}

type PolicyFileShareBackupHourlyPtrOutput struct{ *pulumi.OutputState }

func (PolicyFileShareBackupHourlyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyFileShareBackupHourly)(nil)).Elem()
}

func (o PolicyFileShareBackupHourlyPtrOutput) ToPolicyFileShareBackupHourlyPtrOutput() PolicyFileShareBackupHourlyPtrOutput {
	return o
}

func (o PolicyFileShareBackupHourlyPtrOutput) ToPolicyFileShareBackupHourlyPtrOutputWithContext(ctx context.Context) PolicyFileShareBackupHourlyPtrOutput {
	return o
}

func (o PolicyFileShareBackupHourlyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PolicyFileShareBackupHourly] {
	return pulumix.Output[*PolicyFileShareBackupHourly]{
		OutputState: o.OutputState,
	}
}

func (o PolicyFileShareBackupHourlyPtrOutput) Elem() PolicyFileShareBackupHourlyOutput {
	return o.ApplyT(func(v *PolicyFileShareBackupHourly) PolicyFileShareBackupHourly {
		if v != nil {
			return *v
		}
		var ret PolicyFileShareBackupHourly
		return ret
	}).(PolicyFileShareBackupHourlyOutput)
}

// Specifies the interval at which backup needs to be triggered. Possible values are `4`, `6`, `8` and `12`.
func (o PolicyFileShareBackupHourlyPtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyFileShareBackupHourly) *int {
		if v == nil {
			return nil
		}
		return &v.Interval
	}).(pulumi.IntPtrOutput)
}

// Specifies the start time of the hourly backup. The time format should be in 24-hour format. Times must be either on the hour or half hour (e.g. 12:00, 12:30, 13:00, etc.).
func (o PolicyFileShareBackupHourlyPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyFileShareBackupHourly) *string {
		if v == nil {
			return nil
		}
		return &v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Species the duration of the backup window in hours. Details could be found [here](https://learn.microsoft.com/en-us/azure/backup/backup-azure-files-faq#what-does-the-duration-attribute-in-azure-files-backup-policy-signify-).
func (o PolicyFileShareBackupHourlyPtrOutput) WindowDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyFileShareBackupHourly) *int {
		if v == nil {
			return nil
		}
		return &v.WindowDuration
	}).(pulumi.IntPtrOutput)
}

type PolicyFileShareRetentionDaily struct {
	// The number of daily backups to keep. Must be between `1` and `200` (inclusive)
	Count int `pulumi:"count"`
}

// PolicyFileShareRetentionDailyInput is an input type that accepts PolicyFileShareRetentionDailyArgs and PolicyFileShareRetentionDailyOutput values.
// You can construct a concrete instance of `PolicyFileShareRetentionDailyInput` via:
//
//	PolicyFileShareRetentionDailyArgs{...}
type PolicyFileShareRetentionDailyInput interface {
	pulumi.Input

	ToPolicyFileShareRetentionDailyOutput() PolicyFileShareRetentionDailyOutput
	ToPolicyFileShareRetentionDailyOutputWithContext(context.Context) PolicyFileShareRetentionDailyOutput
}

type PolicyFileShareRetentionDailyArgs struct {
	// The number of daily backups to keep. Must be between `1` and `200` (inclusive)
	Count pulumi.IntInput `pulumi:"count"`
}

func (PolicyFileShareRetentionDailyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyFileShareRetentionDaily)(nil)).Elem()
}

func (i PolicyFileShareRetentionDailyArgs) ToPolicyFileShareRetentionDailyOutput() PolicyFileShareRetentionDailyOutput {
	return i.ToPolicyFileShareRetentionDailyOutputWithContext(context.Background())
}

func (i PolicyFileShareRetentionDailyArgs) ToPolicyFileShareRetentionDailyOutputWithContext(ctx context.Context) PolicyFileShareRetentionDailyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyFileShareRetentionDailyOutput)
}

func (i PolicyFileShareRetentionDailyArgs) ToOutput(ctx context.Context) pulumix.Output[PolicyFileShareRetentionDaily] {
	return pulumix.Output[PolicyFileShareRetentionDaily]{
		OutputState: i.ToPolicyFileShareRetentionDailyOutputWithContext(ctx).OutputState,
	}
}

func (i PolicyFileShareRetentionDailyArgs) ToPolicyFileShareRetentionDailyPtrOutput() PolicyFileShareRetentionDailyPtrOutput {
	return i.ToPolicyFileShareRetentionDailyPtrOutputWithContext(context.Background())
}

func (i PolicyFileShareRetentionDailyArgs) ToPolicyFileShareRetentionDailyPtrOutputWithContext(ctx context.Context) PolicyFileShareRetentionDailyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyFileShareRetentionDailyOutput).ToPolicyFileShareRetentionDailyPtrOutputWithContext(ctx)
}

// PolicyFileShareRetentionDailyPtrInput is an input type that accepts PolicyFileShareRetentionDailyArgs, PolicyFileShareRetentionDailyPtr and PolicyFileShareRetentionDailyPtrOutput values.
// You can construct a concrete instance of `PolicyFileShareRetentionDailyPtrInput` via:
//
//	        PolicyFileShareRetentionDailyArgs{...}
//
//	or:
//
//	        nil
type PolicyFileShareRetentionDailyPtrInput interface {
	pulumi.Input

	ToPolicyFileShareRetentionDailyPtrOutput() PolicyFileShareRetentionDailyPtrOutput
	ToPolicyFileShareRetentionDailyPtrOutputWithContext(context.Context) PolicyFileShareRetentionDailyPtrOutput
}

type policyFileShareRetentionDailyPtrType PolicyFileShareRetentionDailyArgs

func PolicyFileShareRetentionDailyPtr(v *PolicyFileShareRetentionDailyArgs) PolicyFileShareRetentionDailyPtrInput {
	return (*policyFileShareRetentionDailyPtrType)(v)
}

func (*policyFileShareRetentionDailyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyFileShareRetentionDaily)(nil)).Elem()
}

func (i *policyFileShareRetentionDailyPtrType) ToPolicyFileShareRetentionDailyPtrOutput() PolicyFileShareRetentionDailyPtrOutput {
	return i.ToPolicyFileShareRetentionDailyPtrOutputWithContext(context.Background())
}

func (i *policyFileShareRetentionDailyPtrType) ToPolicyFileShareRetentionDailyPtrOutputWithContext(ctx context.Context) PolicyFileShareRetentionDailyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyFileShareRetentionDailyPtrOutput)
}

func (i *policyFileShareRetentionDailyPtrType) ToOutput(ctx context.Context) pulumix.Output[*PolicyFileShareRetentionDaily] {
	return pulumix.Output[*PolicyFileShareRetentionDaily]{
		OutputState: i.ToPolicyFileShareRetentionDailyPtrOutputWithContext(ctx).OutputState,
	}
}

type PolicyFileShareRetentionDailyOutput struct{ *pulumi.OutputState }

func (PolicyFileShareRetentionDailyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyFileShareRetentionDaily)(nil)).Elem()
}

func (o PolicyFileShareRetentionDailyOutput) ToPolicyFileShareRetentionDailyOutput() PolicyFileShareRetentionDailyOutput {
	return o
}

func (o PolicyFileShareRetentionDailyOutput) ToPolicyFileShareRetentionDailyOutputWithContext(ctx context.Context) PolicyFileShareRetentionDailyOutput {
	return o
}

func (o PolicyFileShareRetentionDailyOutput) ToPolicyFileShareRetentionDailyPtrOutput() PolicyFileShareRetentionDailyPtrOutput {
	return o.ToPolicyFileShareRetentionDailyPtrOutputWithContext(context.Background())
}

func (o PolicyFileShareRetentionDailyOutput) ToPolicyFileShareRetentionDailyPtrOutputWithContext(ctx context.Context) PolicyFileShareRetentionDailyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyFileShareRetentionDaily) *PolicyFileShareRetentionDaily {
		return &v
	}).(PolicyFileShareRetentionDailyPtrOutput)
}

func (o PolicyFileShareRetentionDailyOutput) ToOutput(ctx context.Context) pulumix.Output[PolicyFileShareRetentionDaily] {
	return pulumix.Output[PolicyFileShareRetentionDaily]{
		OutputState: o.OutputState,
	}
}

// The number of daily backups to keep. Must be between `1` and `200` (inclusive)
func (o PolicyFileShareRetentionDailyOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v PolicyFileShareRetentionDaily) int { return v.Count }).(pulumi.IntOutput)
}

type PolicyFileShareRetentionDailyPtrOutput struct{ *pulumi.OutputState }

func (PolicyFileShareRetentionDailyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyFileShareRetentionDaily)(nil)).Elem()
}

func (o PolicyFileShareRetentionDailyPtrOutput) ToPolicyFileShareRetentionDailyPtrOutput() PolicyFileShareRetentionDailyPtrOutput {
	return o
}

func (o PolicyFileShareRetentionDailyPtrOutput) ToPolicyFileShareRetentionDailyPtrOutputWithContext(ctx context.Context) PolicyFileShareRetentionDailyPtrOutput {
	return o
}

func (o PolicyFileShareRetentionDailyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PolicyFileShareRetentionDaily] {
	return pulumix.Output[*PolicyFileShareRetentionDaily]{
		OutputState: o.OutputState,
	}
}

func (o PolicyFileShareRetentionDailyPtrOutput) Elem() PolicyFileShareRetentionDailyOutput {
	return o.ApplyT(func(v *PolicyFileShareRetentionDaily) PolicyFileShareRetentionDaily {
		if v != nil {
			return *v
		}
		var ret PolicyFileShareRetentionDaily
		return ret
	}).(PolicyFileShareRetentionDailyOutput)
}

// The number of daily backups to keep. Must be between `1` and `200` (inclusive)
func (o PolicyFileShareRetentionDailyPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyFileShareRetentionDaily) *int {
		if v == nil {
			return nil
		}
		return &v.Count
	}).(pulumi.IntPtrOutput)
}

type PolicyFileShareRetentionMonthly struct {
	// The number of monthly backups to keep. Must be between `1` and `120`
	Count int `pulumi:"count"`
	// The days of the month to retain backups of. Must be between `1` and `31`.
	Days []int `pulumi:"days"`
	// Including the last day of the month, default to `false`.
	//
	// > **NOTE:**: Either `weekdays` and `weeks` or `days` and `includeLastDays` must be specified.
	IncludeLastDays *bool `pulumi:"includeLastDays"`
	// The weekday backups to retain . Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
	Weekdays []string `pulumi:"weekdays"`
	// The weeks of the month to retain backups of. Must be one of `First`, `Second`, `Third`, `Fourth`, `Last`.
	Weeks []string `pulumi:"weeks"`
}

// PolicyFileShareRetentionMonthlyInput is an input type that accepts PolicyFileShareRetentionMonthlyArgs and PolicyFileShareRetentionMonthlyOutput values.
// You can construct a concrete instance of `PolicyFileShareRetentionMonthlyInput` via:
//
//	PolicyFileShareRetentionMonthlyArgs{...}
type PolicyFileShareRetentionMonthlyInput interface {
	pulumi.Input

	ToPolicyFileShareRetentionMonthlyOutput() PolicyFileShareRetentionMonthlyOutput
	ToPolicyFileShareRetentionMonthlyOutputWithContext(context.Context) PolicyFileShareRetentionMonthlyOutput
}

type PolicyFileShareRetentionMonthlyArgs struct {
	// The number of monthly backups to keep. Must be between `1` and `120`
	Count pulumi.IntInput `pulumi:"count"`
	// The days of the month to retain backups of. Must be between `1` and `31`.
	Days pulumi.IntArrayInput `pulumi:"days"`
	// Including the last day of the month, default to `false`.
	//
	// > **NOTE:**: Either `weekdays` and `weeks` or `days` and `includeLastDays` must be specified.
	IncludeLastDays pulumi.BoolPtrInput `pulumi:"includeLastDays"`
	// The weekday backups to retain . Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
	Weekdays pulumi.StringArrayInput `pulumi:"weekdays"`
	// The weeks of the month to retain backups of. Must be one of `First`, `Second`, `Third`, `Fourth`, `Last`.
	Weeks pulumi.StringArrayInput `pulumi:"weeks"`
}

func (PolicyFileShareRetentionMonthlyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyFileShareRetentionMonthly)(nil)).Elem()
}

func (i PolicyFileShareRetentionMonthlyArgs) ToPolicyFileShareRetentionMonthlyOutput() PolicyFileShareRetentionMonthlyOutput {
	return i.ToPolicyFileShareRetentionMonthlyOutputWithContext(context.Background())
}

func (i PolicyFileShareRetentionMonthlyArgs) ToPolicyFileShareRetentionMonthlyOutputWithContext(ctx context.Context) PolicyFileShareRetentionMonthlyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyFileShareRetentionMonthlyOutput)
}

func (i PolicyFileShareRetentionMonthlyArgs) ToOutput(ctx context.Context) pulumix.Output[PolicyFileShareRetentionMonthly] {
	return pulumix.Output[PolicyFileShareRetentionMonthly]{
		OutputState: i.ToPolicyFileShareRetentionMonthlyOutputWithContext(ctx).OutputState,
	}
}

func (i PolicyFileShareRetentionMonthlyArgs) ToPolicyFileShareRetentionMonthlyPtrOutput() PolicyFileShareRetentionMonthlyPtrOutput {
	return i.ToPolicyFileShareRetentionMonthlyPtrOutputWithContext(context.Background())
}

func (i PolicyFileShareRetentionMonthlyArgs) ToPolicyFileShareRetentionMonthlyPtrOutputWithContext(ctx context.Context) PolicyFileShareRetentionMonthlyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyFileShareRetentionMonthlyOutput).ToPolicyFileShareRetentionMonthlyPtrOutputWithContext(ctx)
}

// PolicyFileShareRetentionMonthlyPtrInput is an input type that accepts PolicyFileShareRetentionMonthlyArgs, PolicyFileShareRetentionMonthlyPtr and PolicyFileShareRetentionMonthlyPtrOutput values.
// You can construct a concrete instance of `PolicyFileShareRetentionMonthlyPtrInput` via:
//
//	        PolicyFileShareRetentionMonthlyArgs{...}
//
//	or:
//
//	        nil
type PolicyFileShareRetentionMonthlyPtrInput interface {
	pulumi.Input

	ToPolicyFileShareRetentionMonthlyPtrOutput() PolicyFileShareRetentionMonthlyPtrOutput
	ToPolicyFileShareRetentionMonthlyPtrOutputWithContext(context.Context) PolicyFileShareRetentionMonthlyPtrOutput
}

type policyFileShareRetentionMonthlyPtrType PolicyFileShareRetentionMonthlyArgs

func PolicyFileShareRetentionMonthlyPtr(v *PolicyFileShareRetentionMonthlyArgs) PolicyFileShareRetentionMonthlyPtrInput {
	return (*policyFileShareRetentionMonthlyPtrType)(v)
}

func (*policyFileShareRetentionMonthlyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyFileShareRetentionMonthly)(nil)).Elem()
}

func (i *policyFileShareRetentionMonthlyPtrType) ToPolicyFileShareRetentionMonthlyPtrOutput() PolicyFileShareRetentionMonthlyPtrOutput {
	return i.ToPolicyFileShareRetentionMonthlyPtrOutputWithContext(context.Background())
}

func (i *policyFileShareRetentionMonthlyPtrType) ToPolicyFileShareRetentionMonthlyPtrOutputWithContext(ctx context.Context) PolicyFileShareRetentionMonthlyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyFileShareRetentionMonthlyPtrOutput)
}

func (i *policyFileShareRetentionMonthlyPtrType) ToOutput(ctx context.Context) pulumix.Output[*PolicyFileShareRetentionMonthly] {
	return pulumix.Output[*PolicyFileShareRetentionMonthly]{
		OutputState: i.ToPolicyFileShareRetentionMonthlyPtrOutputWithContext(ctx).OutputState,
	}
}

type PolicyFileShareRetentionMonthlyOutput struct{ *pulumi.OutputState }

func (PolicyFileShareRetentionMonthlyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyFileShareRetentionMonthly)(nil)).Elem()
}

func (o PolicyFileShareRetentionMonthlyOutput) ToPolicyFileShareRetentionMonthlyOutput() PolicyFileShareRetentionMonthlyOutput {
	return o
}

func (o PolicyFileShareRetentionMonthlyOutput) ToPolicyFileShareRetentionMonthlyOutputWithContext(ctx context.Context) PolicyFileShareRetentionMonthlyOutput {
	return o
}

func (o PolicyFileShareRetentionMonthlyOutput) ToPolicyFileShareRetentionMonthlyPtrOutput() PolicyFileShareRetentionMonthlyPtrOutput {
	return o.ToPolicyFileShareRetentionMonthlyPtrOutputWithContext(context.Background())
}

func (o PolicyFileShareRetentionMonthlyOutput) ToPolicyFileShareRetentionMonthlyPtrOutputWithContext(ctx context.Context) PolicyFileShareRetentionMonthlyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyFileShareRetentionMonthly) *PolicyFileShareRetentionMonthly {
		return &v
	}).(PolicyFileShareRetentionMonthlyPtrOutput)
}

func (o PolicyFileShareRetentionMonthlyOutput) ToOutput(ctx context.Context) pulumix.Output[PolicyFileShareRetentionMonthly] {
	return pulumix.Output[PolicyFileShareRetentionMonthly]{
		OutputState: o.OutputState,
	}
}

// The number of monthly backups to keep. Must be between `1` and `120`
func (o PolicyFileShareRetentionMonthlyOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v PolicyFileShareRetentionMonthly) int { return v.Count }).(pulumi.IntOutput)
}

// The days of the month to retain backups of. Must be between `1` and `31`.
func (o PolicyFileShareRetentionMonthlyOutput) Days() pulumi.IntArrayOutput {
	return o.ApplyT(func(v PolicyFileShareRetentionMonthly) []int { return v.Days }).(pulumi.IntArrayOutput)
}

// Including the last day of the month, default to `false`.
//
// > **NOTE:**: Either `weekdays` and `weeks` or `days` and `includeLastDays` must be specified.
func (o PolicyFileShareRetentionMonthlyOutput) IncludeLastDays() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyFileShareRetentionMonthly) *bool { return v.IncludeLastDays }).(pulumi.BoolPtrOutput)
}

// The weekday backups to retain . Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
func (o PolicyFileShareRetentionMonthlyOutput) Weekdays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyFileShareRetentionMonthly) []string { return v.Weekdays }).(pulumi.StringArrayOutput)
}

// The weeks of the month to retain backups of. Must be one of `First`, `Second`, `Third`, `Fourth`, `Last`.
func (o PolicyFileShareRetentionMonthlyOutput) Weeks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyFileShareRetentionMonthly) []string { return v.Weeks }).(pulumi.StringArrayOutput)
}

type PolicyFileShareRetentionMonthlyPtrOutput struct{ *pulumi.OutputState }

func (PolicyFileShareRetentionMonthlyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyFileShareRetentionMonthly)(nil)).Elem()
}

func (o PolicyFileShareRetentionMonthlyPtrOutput) ToPolicyFileShareRetentionMonthlyPtrOutput() PolicyFileShareRetentionMonthlyPtrOutput {
	return o
}

func (o PolicyFileShareRetentionMonthlyPtrOutput) ToPolicyFileShareRetentionMonthlyPtrOutputWithContext(ctx context.Context) PolicyFileShareRetentionMonthlyPtrOutput {
	return o
}

func (o PolicyFileShareRetentionMonthlyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PolicyFileShareRetentionMonthly] {
	return pulumix.Output[*PolicyFileShareRetentionMonthly]{
		OutputState: o.OutputState,
	}
}

func (o PolicyFileShareRetentionMonthlyPtrOutput) Elem() PolicyFileShareRetentionMonthlyOutput {
	return o.ApplyT(func(v *PolicyFileShareRetentionMonthly) PolicyFileShareRetentionMonthly {
		if v != nil {
			return *v
		}
		var ret PolicyFileShareRetentionMonthly
		return ret
	}).(PolicyFileShareRetentionMonthlyOutput)
}

// The number of monthly backups to keep. Must be between `1` and `120`
func (o PolicyFileShareRetentionMonthlyPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyFileShareRetentionMonthly) *int {
		if v == nil {
			return nil
		}
		return &v.Count
	}).(pulumi.IntPtrOutput)
}

// The days of the month to retain backups of. Must be between `1` and `31`.
func (o PolicyFileShareRetentionMonthlyPtrOutput) Days() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *PolicyFileShareRetentionMonthly) []int {
		if v == nil {
			return nil
		}
		return v.Days
	}).(pulumi.IntArrayOutput)
}

// Including the last day of the month, default to `false`.
//
// > **NOTE:**: Either `weekdays` and `weeks` or `days` and `includeLastDays` must be specified.
func (o PolicyFileShareRetentionMonthlyPtrOutput) IncludeLastDays() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PolicyFileShareRetentionMonthly) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeLastDays
	}).(pulumi.BoolPtrOutput)
}

// The weekday backups to retain . Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
func (o PolicyFileShareRetentionMonthlyPtrOutput) Weekdays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyFileShareRetentionMonthly) []string {
		if v == nil {
			return nil
		}
		return v.Weekdays
	}).(pulumi.StringArrayOutput)
}

// The weeks of the month to retain backups of. Must be one of `First`, `Second`, `Third`, `Fourth`, `Last`.
func (o PolicyFileShareRetentionMonthlyPtrOutput) Weeks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyFileShareRetentionMonthly) []string {
		if v == nil {
			return nil
		}
		return v.Weeks
	}).(pulumi.StringArrayOutput)
}

type PolicyFileShareRetentionWeekly struct {
	// The number of daily backups to keep. Must be between `1` and `200` (inclusive)
	Count int `pulumi:"count"`
	// The weekday backups to retain. Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
	Weekdays []string `pulumi:"weekdays"`
}

// PolicyFileShareRetentionWeeklyInput is an input type that accepts PolicyFileShareRetentionWeeklyArgs and PolicyFileShareRetentionWeeklyOutput values.
// You can construct a concrete instance of `PolicyFileShareRetentionWeeklyInput` via:
//
//	PolicyFileShareRetentionWeeklyArgs{...}
type PolicyFileShareRetentionWeeklyInput interface {
	pulumi.Input

	ToPolicyFileShareRetentionWeeklyOutput() PolicyFileShareRetentionWeeklyOutput
	ToPolicyFileShareRetentionWeeklyOutputWithContext(context.Context) PolicyFileShareRetentionWeeklyOutput
}

type PolicyFileShareRetentionWeeklyArgs struct {
	// The number of daily backups to keep. Must be between `1` and `200` (inclusive)
	Count pulumi.IntInput `pulumi:"count"`
	// The weekday backups to retain. Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
	Weekdays pulumi.StringArrayInput `pulumi:"weekdays"`
}

func (PolicyFileShareRetentionWeeklyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyFileShareRetentionWeekly)(nil)).Elem()
}

func (i PolicyFileShareRetentionWeeklyArgs) ToPolicyFileShareRetentionWeeklyOutput() PolicyFileShareRetentionWeeklyOutput {
	return i.ToPolicyFileShareRetentionWeeklyOutputWithContext(context.Background())
}

func (i PolicyFileShareRetentionWeeklyArgs) ToPolicyFileShareRetentionWeeklyOutputWithContext(ctx context.Context) PolicyFileShareRetentionWeeklyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyFileShareRetentionWeeklyOutput)
}

func (i PolicyFileShareRetentionWeeklyArgs) ToOutput(ctx context.Context) pulumix.Output[PolicyFileShareRetentionWeekly] {
	return pulumix.Output[PolicyFileShareRetentionWeekly]{
		OutputState: i.ToPolicyFileShareRetentionWeeklyOutputWithContext(ctx).OutputState,
	}
}

func (i PolicyFileShareRetentionWeeklyArgs) ToPolicyFileShareRetentionWeeklyPtrOutput() PolicyFileShareRetentionWeeklyPtrOutput {
	return i.ToPolicyFileShareRetentionWeeklyPtrOutputWithContext(context.Background())
}

func (i PolicyFileShareRetentionWeeklyArgs) ToPolicyFileShareRetentionWeeklyPtrOutputWithContext(ctx context.Context) PolicyFileShareRetentionWeeklyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyFileShareRetentionWeeklyOutput).ToPolicyFileShareRetentionWeeklyPtrOutputWithContext(ctx)
}

// PolicyFileShareRetentionWeeklyPtrInput is an input type that accepts PolicyFileShareRetentionWeeklyArgs, PolicyFileShareRetentionWeeklyPtr and PolicyFileShareRetentionWeeklyPtrOutput values.
// You can construct a concrete instance of `PolicyFileShareRetentionWeeklyPtrInput` via:
//
//	        PolicyFileShareRetentionWeeklyArgs{...}
//
//	or:
//
//	        nil
type PolicyFileShareRetentionWeeklyPtrInput interface {
	pulumi.Input

	ToPolicyFileShareRetentionWeeklyPtrOutput() PolicyFileShareRetentionWeeklyPtrOutput
	ToPolicyFileShareRetentionWeeklyPtrOutputWithContext(context.Context) PolicyFileShareRetentionWeeklyPtrOutput
}

type policyFileShareRetentionWeeklyPtrType PolicyFileShareRetentionWeeklyArgs

func PolicyFileShareRetentionWeeklyPtr(v *PolicyFileShareRetentionWeeklyArgs) PolicyFileShareRetentionWeeklyPtrInput {
	return (*policyFileShareRetentionWeeklyPtrType)(v)
}

func (*policyFileShareRetentionWeeklyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyFileShareRetentionWeekly)(nil)).Elem()
}

func (i *policyFileShareRetentionWeeklyPtrType) ToPolicyFileShareRetentionWeeklyPtrOutput() PolicyFileShareRetentionWeeklyPtrOutput {
	return i.ToPolicyFileShareRetentionWeeklyPtrOutputWithContext(context.Background())
}

func (i *policyFileShareRetentionWeeklyPtrType) ToPolicyFileShareRetentionWeeklyPtrOutputWithContext(ctx context.Context) PolicyFileShareRetentionWeeklyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyFileShareRetentionWeeklyPtrOutput)
}

func (i *policyFileShareRetentionWeeklyPtrType) ToOutput(ctx context.Context) pulumix.Output[*PolicyFileShareRetentionWeekly] {
	return pulumix.Output[*PolicyFileShareRetentionWeekly]{
		OutputState: i.ToPolicyFileShareRetentionWeeklyPtrOutputWithContext(ctx).OutputState,
	}
}

type PolicyFileShareRetentionWeeklyOutput struct{ *pulumi.OutputState }

func (PolicyFileShareRetentionWeeklyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyFileShareRetentionWeekly)(nil)).Elem()
}

func (o PolicyFileShareRetentionWeeklyOutput) ToPolicyFileShareRetentionWeeklyOutput() PolicyFileShareRetentionWeeklyOutput {
	return o
}

func (o PolicyFileShareRetentionWeeklyOutput) ToPolicyFileShareRetentionWeeklyOutputWithContext(ctx context.Context) PolicyFileShareRetentionWeeklyOutput {
	return o
}

func (o PolicyFileShareRetentionWeeklyOutput) ToPolicyFileShareRetentionWeeklyPtrOutput() PolicyFileShareRetentionWeeklyPtrOutput {
	return o.ToPolicyFileShareRetentionWeeklyPtrOutputWithContext(context.Background())
}

func (o PolicyFileShareRetentionWeeklyOutput) ToPolicyFileShareRetentionWeeklyPtrOutputWithContext(ctx context.Context) PolicyFileShareRetentionWeeklyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyFileShareRetentionWeekly) *PolicyFileShareRetentionWeekly {
		return &v
	}).(PolicyFileShareRetentionWeeklyPtrOutput)
}

func (o PolicyFileShareRetentionWeeklyOutput) ToOutput(ctx context.Context) pulumix.Output[PolicyFileShareRetentionWeekly] {
	return pulumix.Output[PolicyFileShareRetentionWeekly]{
		OutputState: o.OutputState,
	}
}

// The number of daily backups to keep. Must be between `1` and `200` (inclusive)
func (o PolicyFileShareRetentionWeeklyOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v PolicyFileShareRetentionWeekly) int { return v.Count }).(pulumi.IntOutput)
}

// The weekday backups to retain. Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
func (o PolicyFileShareRetentionWeeklyOutput) Weekdays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyFileShareRetentionWeekly) []string { return v.Weekdays }).(pulumi.StringArrayOutput)
}

type PolicyFileShareRetentionWeeklyPtrOutput struct{ *pulumi.OutputState }

func (PolicyFileShareRetentionWeeklyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyFileShareRetentionWeekly)(nil)).Elem()
}

func (o PolicyFileShareRetentionWeeklyPtrOutput) ToPolicyFileShareRetentionWeeklyPtrOutput() PolicyFileShareRetentionWeeklyPtrOutput {
	return o
}

func (o PolicyFileShareRetentionWeeklyPtrOutput) ToPolicyFileShareRetentionWeeklyPtrOutputWithContext(ctx context.Context) PolicyFileShareRetentionWeeklyPtrOutput {
	return o
}

func (o PolicyFileShareRetentionWeeklyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PolicyFileShareRetentionWeekly] {
	return pulumix.Output[*PolicyFileShareRetentionWeekly]{
		OutputState: o.OutputState,
	}
}

func (o PolicyFileShareRetentionWeeklyPtrOutput) Elem() PolicyFileShareRetentionWeeklyOutput {
	return o.ApplyT(func(v *PolicyFileShareRetentionWeekly) PolicyFileShareRetentionWeekly {
		if v != nil {
			return *v
		}
		var ret PolicyFileShareRetentionWeekly
		return ret
	}).(PolicyFileShareRetentionWeeklyOutput)
}

// The number of daily backups to keep. Must be between `1` and `200` (inclusive)
func (o PolicyFileShareRetentionWeeklyPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyFileShareRetentionWeekly) *int {
		if v == nil {
			return nil
		}
		return &v.Count
	}).(pulumi.IntPtrOutput)
}

// The weekday backups to retain. Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
func (o PolicyFileShareRetentionWeeklyPtrOutput) Weekdays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyFileShareRetentionWeekly) []string {
		if v == nil {
			return nil
		}
		return v.Weekdays
	}).(pulumi.StringArrayOutput)
}

type PolicyFileShareRetentionYearly struct {
	// The number of yearly backups to keep. Must be between `1` and `10`
	Count int `pulumi:"count"`
	// The days of the month to retain backups of. Must be between `1` and `31`.
	Days []int `pulumi:"days"`
	// Including the last day of the month, default to `false`.
	//
	// > **NOTE:**: Either `weekdays` and `weeks` or `days` and `includeLastDays` must be specified.
	IncludeLastDays *bool `pulumi:"includeLastDays"`
	// The months of the year to retain backups of. Must be one of `January`, `February`, `March`, `April`, `May`, `June`, `July`, `Augest`, `September`, `October`, `November` and `December`.
	Months []string `pulumi:"months"`
	// The weekday backups to retain . Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
	Weekdays []string `pulumi:"weekdays"`
	// The weeks of the month to retain backups of. Must be one of `First`, `Second`, `Third`, `Fourth`, `Last`.
	Weeks []string `pulumi:"weeks"`
}

// PolicyFileShareRetentionYearlyInput is an input type that accepts PolicyFileShareRetentionYearlyArgs and PolicyFileShareRetentionYearlyOutput values.
// You can construct a concrete instance of `PolicyFileShareRetentionYearlyInput` via:
//
//	PolicyFileShareRetentionYearlyArgs{...}
type PolicyFileShareRetentionYearlyInput interface {
	pulumi.Input

	ToPolicyFileShareRetentionYearlyOutput() PolicyFileShareRetentionYearlyOutput
	ToPolicyFileShareRetentionYearlyOutputWithContext(context.Context) PolicyFileShareRetentionYearlyOutput
}

type PolicyFileShareRetentionYearlyArgs struct {
	// The number of yearly backups to keep. Must be between `1` and `10`
	Count pulumi.IntInput `pulumi:"count"`
	// The days of the month to retain backups of. Must be between `1` and `31`.
	Days pulumi.IntArrayInput `pulumi:"days"`
	// Including the last day of the month, default to `false`.
	//
	// > **NOTE:**: Either `weekdays` and `weeks` or `days` and `includeLastDays` must be specified.
	IncludeLastDays pulumi.BoolPtrInput `pulumi:"includeLastDays"`
	// The months of the year to retain backups of. Must be one of `January`, `February`, `March`, `April`, `May`, `June`, `July`, `Augest`, `September`, `October`, `November` and `December`.
	Months pulumi.StringArrayInput `pulumi:"months"`
	// The weekday backups to retain . Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
	Weekdays pulumi.StringArrayInput `pulumi:"weekdays"`
	// The weeks of the month to retain backups of. Must be one of `First`, `Second`, `Third`, `Fourth`, `Last`.
	Weeks pulumi.StringArrayInput `pulumi:"weeks"`
}

func (PolicyFileShareRetentionYearlyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyFileShareRetentionYearly)(nil)).Elem()
}

func (i PolicyFileShareRetentionYearlyArgs) ToPolicyFileShareRetentionYearlyOutput() PolicyFileShareRetentionYearlyOutput {
	return i.ToPolicyFileShareRetentionYearlyOutputWithContext(context.Background())
}

func (i PolicyFileShareRetentionYearlyArgs) ToPolicyFileShareRetentionYearlyOutputWithContext(ctx context.Context) PolicyFileShareRetentionYearlyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyFileShareRetentionYearlyOutput)
}

func (i PolicyFileShareRetentionYearlyArgs) ToOutput(ctx context.Context) pulumix.Output[PolicyFileShareRetentionYearly] {
	return pulumix.Output[PolicyFileShareRetentionYearly]{
		OutputState: i.ToPolicyFileShareRetentionYearlyOutputWithContext(ctx).OutputState,
	}
}

func (i PolicyFileShareRetentionYearlyArgs) ToPolicyFileShareRetentionYearlyPtrOutput() PolicyFileShareRetentionYearlyPtrOutput {
	return i.ToPolicyFileShareRetentionYearlyPtrOutputWithContext(context.Background())
}

func (i PolicyFileShareRetentionYearlyArgs) ToPolicyFileShareRetentionYearlyPtrOutputWithContext(ctx context.Context) PolicyFileShareRetentionYearlyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyFileShareRetentionYearlyOutput).ToPolicyFileShareRetentionYearlyPtrOutputWithContext(ctx)
}

// PolicyFileShareRetentionYearlyPtrInput is an input type that accepts PolicyFileShareRetentionYearlyArgs, PolicyFileShareRetentionYearlyPtr and PolicyFileShareRetentionYearlyPtrOutput values.
// You can construct a concrete instance of `PolicyFileShareRetentionYearlyPtrInput` via:
//
//	        PolicyFileShareRetentionYearlyArgs{...}
//
//	or:
//
//	        nil
type PolicyFileShareRetentionYearlyPtrInput interface {
	pulumi.Input

	ToPolicyFileShareRetentionYearlyPtrOutput() PolicyFileShareRetentionYearlyPtrOutput
	ToPolicyFileShareRetentionYearlyPtrOutputWithContext(context.Context) PolicyFileShareRetentionYearlyPtrOutput
}

type policyFileShareRetentionYearlyPtrType PolicyFileShareRetentionYearlyArgs

func PolicyFileShareRetentionYearlyPtr(v *PolicyFileShareRetentionYearlyArgs) PolicyFileShareRetentionYearlyPtrInput {
	return (*policyFileShareRetentionYearlyPtrType)(v)
}

func (*policyFileShareRetentionYearlyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyFileShareRetentionYearly)(nil)).Elem()
}

func (i *policyFileShareRetentionYearlyPtrType) ToPolicyFileShareRetentionYearlyPtrOutput() PolicyFileShareRetentionYearlyPtrOutput {
	return i.ToPolicyFileShareRetentionYearlyPtrOutputWithContext(context.Background())
}

func (i *policyFileShareRetentionYearlyPtrType) ToPolicyFileShareRetentionYearlyPtrOutputWithContext(ctx context.Context) PolicyFileShareRetentionYearlyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyFileShareRetentionYearlyPtrOutput)
}

func (i *policyFileShareRetentionYearlyPtrType) ToOutput(ctx context.Context) pulumix.Output[*PolicyFileShareRetentionYearly] {
	return pulumix.Output[*PolicyFileShareRetentionYearly]{
		OutputState: i.ToPolicyFileShareRetentionYearlyPtrOutputWithContext(ctx).OutputState,
	}
}

type PolicyFileShareRetentionYearlyOutput struct{ *pulumi.OutputState }

func (PolicyFileShareRetentionYearlyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyFileShareRetentionYearly)(nil)).Elem()
}

func (o PolicyFileShareRetentionYearlyOutput) ToPolicyFileShareRetentionYearlyOutput() PolicyFileShareRetentionYearlyOutput {
	return o
}

func (o PolicyFileShareRetentionYearlyOutput) ToPolicyFileShareRetentionYearlyOutputWithContext(ctx context.Context) PolicyFileShareRetentionYearlyOutput {
	return o
}

func (o PolicyFileShareRetentionYearlyOutput) ToPolicyFileShareRetentionYearlyPtrOutput() PolicyFileShareRetentionYearlyPtrOutput {
	return o.ToPolicyFileShareRetentionYearlyPtrOutputWithContext(context.Background())
}

func (o PolicyFileShareRetentionYearlyOutput) ToPolicyFileShareRetentionYearlyPtrOutputWithContext(ctx context.Context) PolicyFileShareRetentionYearlyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyFileShareRetentionYearly) *PolicyFileShareRetentionYearly {
		return &v
	}).(PolicyFileShareRetentionYearlyPtrOutput)
}

func (o PolicyFileShareRetentionYearlyOutput) ToOutput(ctx context.Context) pulumix.Output[PolicyFileShareRetentionYearly] {
	return pulumix.Output[PolicyFileShareRetentionYearly]{
		OutputState: o.OutputState,
	}
}

// The number of yearly backups to keep. Must be between `1` and `10`
func (o PolicyFileShareRetentionYearlyOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v PolicyFileShareRetentionYearly) int { return v.Count }).(pulumi.IntOutput)
}

// The days of the month to retain backups of. Must be between `1` and `31`.
func (o PolicyFileShareRetentionYearlyOutput) Days() pulumi.IntArrayOutput {
	return o.ApplyT(func(v PolicyFileShareRetentionYearly) []int { return v.Days }).(pulumi.IntArrayOutput)
}

// Including the last day of the month, default to `false`.
//
// > **NOTE:**: Either `weekdays` and `weeks` or `days` and `includeLastDays` must be specified.
func (o PolicyFileShareRetentionYearlyOutput) IncludeLastDays() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyFileShareRetentionYearly) *bool { return v.IncludeLastDays }).(pulumi.BoolPtrOutput)
}

// The months of the year to retain backups of. Must be one of `January`, `February`, `March`, `April`, `May`, `June`, `July`, `Augest`, `September`, `October`, `November` and `December`.
func (o PolicyFileShareRetentionYearlyOutput) Months() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyFileShareRetentionYearly) []string { return v.Months }).(pulumi.StringArrayOutput)
}

// The weekday backups to retain . Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
func (o PolicyFileShareRetentionYearlyOutput) Weekdays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyFileShareRetentionYearly) []string { return v.Weekdays }).(pulumi.StringArrayOutput)
}

// The weeks of the month to retain backups of. Must be one of `First`, `Second`, `Third`, `Fourth`, `Last`.
func (o PolicyFileShareRetentionYearlyOutput) Weeks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyFileShareRetentionYearly) []string { return v.Weeks }).(pulumi.StringArrayOutput)
}

type PolicyFileShareRetentionYearlyPtrOutput struct{ *pulumi.OutputState }

func (PolicyFileShareRetentionYearlyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyFileShareRetentionYearly)(nil)).Elem()
}

func (o PolicyFileShareRetentionYearlyPtrOutput) ToPolicyFileShareRetentionYearlyPtrOutput() PolicyFileShareRetentionYearlyPtrOutput {
	return o
}

func (o PolicyFileShareRetentionYearlyPtrOutput) ToPolicyFileShareRetentionYearlyPtrOutputWithContext(ctx context.Context) PolicyFileShareRetentionYearlyPtrOutput {
	return o
}

func (o PolicyFileShareRetentionYearlyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PolicyFileShareRetentionYearly] {
	return pulumix.Output[*PolicyFileShareRetentionYearly]{
		OutputState: o.OutputState,
	}
}

func (o PolicyFileShareRetentionYearlyPtrOutput) Elem() PolicyFileShareRetentionYearlyOutput {
	return o.ApplyT(func(v *PolicyFileShareRetentionYearly) PolicyFileShareRetentionYearly {
		if v != nil {
			return *v
		}
		var ret PolicyFileShareRetentionYearly
		return ret
	}).(PolicyFileShareRetentionYearlyOutput)
}

// The number of yearly backups to keep. Must be between `1` and `10`
func (o PolicyFileShareRetentionYearlyPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyFileShareRetentionYearly) *int {
		if v == nil {
			return nil
		}
		return &v.Count
	}).(pulumi.IntPtrOutput)
}

// The days of the month to retain backups of. Must be between `1` and `31`.
func (o PolicyFileShareRetentionYearlyPtrOutput) Days() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *PolicyFileShareRetentionYearly) []int {
		if v == nil {
			return nil
		}
		return v.Days
	}).(pulumi.IntArrayOutput)
}

// Including the last day of the month, default to `false`.
//
// > **NOTE:**: Either `weekdays` and `weeks` or `days` and `includeLastDays` must be specified.
func (o PolicyFileShareRetentionYearlyPtrOutput) IncludeLastDays() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PolicyFileShareRetentionYearly) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeLastDays
	}).(pulumi.BoolPtrOutput)
}

// The months of the year to retain backups of. Must be one of `January`, `February`, `March`, `April`, `May`, `June`, `July`, `Augest`, `September`, `October`, `November` and `December`.
func (o PolicyFileShareRetentionYearlyPtrOutput) Months() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyFileShareRetentionYearly) []string {
		if v == nil {
			return nil
		}
		return v.Months
	}).(pulumi.StringArrayOutput)
}

// The weekday backups to retain . Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
func (o PolicyFileShareRetentionYearlyPtrOutput) Weekdays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyFileShareRetentionYearly) []string {
		if v == nil {
			return nil
		}
		return v.Weekdays
	}).(pulumi.StringArrayOutput)
}

// The weeks of the month to retain backups of. Must be one of `First`, `Second`, `Third`, `Fourth`, `Last`.
func (o PolicyFileShareRetentionYearlyPtrOutput) Weeks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyFileShareRetentionYearly) []string {
		if v == nil {
			return nil
		}
		return v.Weeks
	}).(pulumi.StringArrayOutput)
}

type PolicyVMBackup struct {
	// Sets the backup frequency. Possible values are `Hourly`, `Daily` and `Weekly`.
	Frequency string `pulumi:"frequency"`
	// Duration of the backup window in hours. Possible values are between `4` and `24` This is used when `frequency` is `Hourly`.
	//
	// > **NOTE:** `hourDuration` must be multiplier of `hourInterval`
	HourDuration *int `pulumi:"hourDuration"`
	// Interval in hour at which backup is triggered. Possible values are `4`, `6`, `8` and `12`. This is used when `frequency` is `Hourly`.
	HourInterval *int `pulumi:"hourInterval"`
	// The time of day to perform the backup in 24hour format.
	Time string `pulumi:"time"`
	// The days of the week to perform backups on. Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`. This is used when `frequency` is `Weekly`.
	Weekdays []string `pulumi:"weekdays"`
}

// PolicyVMBackupInput is an input type that accepts PolicyVMBackupArgs and PolicyVMBackupOutput values.
// You can construct a concrete instance of `PolicyVMBackupInput` via:
//
//	PolicyVMBackupArgs{...}
type PolicyVMBackupInput interface {
	pulumi.Input

	ToPolicyVMBackupOutput() PolicyVMBackupOutput
	ToPolicyVMBackupOutputWithContext(context.Context) PolicyVMBackupOutput
}

type PolicyVMBackupArgs struct {
	// Sets the backup frequency. Possible values are `Hourly`, `Daily` and `Weekly`.
	Frequency pulumi.StringInput `pulumi:"frequency"`
	// Duration of the backup window in hours. Possible values are between `4` and `24` This is used when `frequency` is `Hourly`.
	//
	// > **NOTE:** `hourDuration` must be multiplier of `hourInterval`
	HourDuration pulumi.IntPtrInput `pulumi:"hourDuration"`
	// Interval in hour at which backup is triggered. Possible values are `4`, `6`, `8` and `12`. This is used when `frequency` is `Hourly`.
	HourInterval pulumi.IntPtrInput `pulumi:"hourInterval"`
	// The time of day to perform the backup in 24hour format.
	Time pulumi.StringInput `pulumi:"time"`
	// The days of the week to perform backups on. Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`. This is used when `frequency` is `Weekly`.
	Weekdays pulumi.StringArrayInput `pulumi:"weekdays"`
}

func (PolicyVMBackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyVMBackup)(nil)).Elem()
}

func (i PolicyVMBackupArgs) ToPolicyVMBackupOutput() PolicyVMBackupOutput {
	return i.ToPolicyVMBackupOutputWithContext(context.Background())
}

func (i PolicyVMBackupArgs) ToPolicyVMBackupOutputWithContext(ctx context.Context) PolicyVMBackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMBackupOutput)
}

func (i PolicyVMBackupArgs) ToOutput(ctx context.Context) pulumix.Output[PolicyVMBackup] {
	return pulumix.Output[PolicyVMBackup]{
		OutputState: i.ToPolicyVMBackupOutputWithContext(ctx).OutputState,
	}
}

func (i PolicyVMBackupArgs) ToPolicyVMBackupPtrOutput() PolicyVMBackupPtrOutput {
	return i.ToPolicyVMBackupPtrOutputWithContext(context.Background())
}

func (i PolicyVMBackupArgs) ToPolicyVMBackupPtrOutputWithContext(ctx context.Context) PolicyVMBackupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMBackupOutput).ToPolicyVMBackupPtrOutputWithContext(ctx)
}

// PolicyVMBackupPtrInput is an input type that accepts PolicyVMBackupArgs, PolicyVMBackupPtr and PolicyVMBackupPtrOutput values.
// You can construct a concrete instance of `PolicyVMBackupPtrInput` via:
//
//	        PolicyVMBackupArgs{...}
//
//	or:
//
//	        nil
type PolicyVMBackupPtrInput interface {
	pulumi.Input

	ToPolicyVMBackupPtrOutput() PolicyVMBackupPtrOutput
	ToPolicyVMBackupPtrOutputWithContext(context.Context) PolicyVMBackupPtrOutput
}

type policyVMBackupPtrType PolicyVMBackupArgs

func PolicyVMBackupPtr(v *PolicyVMBackupArgs) PolicyVMBackupPtrInput {
	return (*policyVMBackupPtrType)(v)
}

func (*policyVMBackupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyVMBackup)(nil)).Elem()
}

func (i *policyVMBackupPtrType) ToPolicyVMBackupPtrOutput() PolicyVMBackupPtrOutput {
	return i.ToPolicyVMBackupPtrOutputWithContext(context.Background())
}

func (i *policyVMBackupPtrType) ToPolicyVMBackupPtrOutputWithContext(ctx context.Context) PolicyVMBackupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMBackupPtrOutput)
}

func (i *policyVMBackupPtrType) ToOutput(ctx context.Context) pulumix.Output[*PolicyVMBackup] {
	return pulumix.Output[*PolicyVMBackup]{
		OutputState: i.ToPolicyVMBackupPtrOutputWithContext(ctx).OutputState,
	}
}

type PolicyVMBackupOutput struct{ *pulumi.OutputState }

func (PolicyVMBackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyVMBackup)(nil)).Elem()
}

func (o PolicyVMBackupOutput) ToPolicyVMBackupOutput() PolicyVMBackupOutput {
	return o
}

func (o PolicyVMBackupOutput) ToPolicyVMBackupOutputWithContext(ctx context.Context) PolicyVMBackupOutput {
	return o
}

func (o PolicyVMBackupOutput) ToPolicyVMBackupPtrOutput() PolicyVMBackupPtrOutput {
	return o.ToPolicyVMBackupPtrOutputWithContext(context.Background())
}

func (o PolicyVMBackupOutput) ToPolicyVMBackupPtrOutputWithContext(ctx context.Context) PolicyVMBackupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyVMBackup) *PolicyVMBackup {
		return &v
	}).(PolicyVMBackupPtrOutput)
}

func (o PolicyVMBackupOutput) ToOutput(ctx context.Context) pulumix.Output[PolicyVMBackup] {
	return pulumix.Output[PolicyVMBackup]{
		OutputState: o.OutputState,
	}
}

// Sets the backup frequency. Possible values are `Hourly`, `Daily` and `Weekly`.
func (o PolicyVMBackupOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyVMBackup) string { return v.Frequency }).(pulumi.StringOutput)
}

// Duration of the backup window in hours. Possible values are between `4` and `24` This is used when `frequency` is `Hourly`.
//
// > **NOTE:** `hourDuration` must be multiplier of `hourInterval`
func (o PolicyVMBackupOutput) HourDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PolicyVMBackup) *int { return v.HourDuration }).(pulumi.IntPtrOutput)
}

// Interval in hour at which backup is triggered. Possible values are `4`, `6`, `8` and `12`. This is used when `frequency` is `Hourly`.
func (o PolicyVMBackupOutput) HourInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PolicyVMBackup) *int { return v.HourInterval }).(pulumi.IntPtrOutput)
}

// The time of day to perform the backup in 24hour format.
func (o PolicyVMBackupOutput) Time() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyVMBackup) string { return v.Time }).(pulumi.StringOutput)
}

// The days of the week to perform backups on. Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`. This is used when `frequency` is `Weekly`.
func (o PolicyVMBackupOutput) Weekdays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyVMBackup) []string { return v.Weekdays }).(pulumi.StringArrayOutput)
}

type PolicyVMBackupPtrOutput struct{ *pulumi.OutputState }

func (PolicyVMBackupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyVMBackup)(nil)).Elem()
}

func (o PolicyVMBackupPtrOutput) ToPolicyVMBackupPtrOutput() PolicyVMBackupPtrOutput {
	return o
}

func (o PolicyVMBackupPtrOutput) ToPolicyVMBackupPtrOutputWithContext(ctx context.Context) PolicyVMBackupPtrOutput {
	return o
}

func (o PolicyVMBackupPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PolicyVMBackup] {
	return pulumix.Output[*PolicyVMBackup]{
		OutputState: o.OutputState,
	}
}

func (o PolicyVMBackupPtrOutput) Elem() PolicyVMBackupOutput {
	return o.ApplyT(func(v *PolicyVMBackup) PolicyVMBackup {
		if v != nil {
			return *v
		}
		var ret PolicyVMBackup
		return ret
	}).(PolicyVMBackupOutput)
}

// Sets the backup frequency. Possible values are `Hourly`, `Daily` and `Weekly`.
func (o PolicyVMBackupPtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyVMBackup) *string {
		if v == nil {
			return nil
		}
		return &v.Frequency
	}).(pulumi.StringPtrOutput)
}

// Duration of the backup window in hours. Possible values are between `4` and `24` This is used when `frequency` is `Hourly`.
//
// > **NOTE:** `hourDuration` must be multiplier of `hourInterval`
func (o PolicyVMBackupPtrOutput) HourDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyVMBackup) *int {
		if v == nil {
			return nil
		}
		return v.HourDuration
	}).(pulumi.IntPtrOutput)
}

// Interval in hour at which backup is triggered. Possible values are `4`, `6`, `8` and `12`. This is used when `frequency` is `Hourly`.
func (o PolicyVMBackupPtrOutput) HourInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyVMBackup) *int {
		if v == nil {
			return nil
		}
		return v.HourInterval
	}).(pulumi.IntPtrOutput)
}

// The time of day to perform the backup in 24hour format.
func (o PolicyVMBackupPtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyVMBackup) *string {
		if v == nil {
			return nil
		}
		return &v.Time
	}).(pulumi.StringPtrOutput)
}

// The days of the week to perform backups on. Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`. This is used when `frequency` is `Weekly`.
func (o PolicyVMBackupPtrOutput) Weekdays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyVMBackup) []string {
		if v == nil {
			return nil
		}
		return v.Weekdays
	}).(pulumi.StringArrayOutput)
}

type PolicyVMInstantRestoreResourceGroup struct {
	// The prefix for the `instantRestoreResourceGroup` name.
	Prefix string `pulumi:"prefix"`
	// The suffix for the `instantRestoreResourceGroup` name.
	Suffix *string `pulumi:"suffix"`
}

// PolicyVMInstantRestoreResourceGroupInput is an input type that accepts PolicyVMInstantRestoreResourceGroupArgs and PolicyVMInstantRestoreResourceGroupOutput values.
// You can construct a concrete instance of `PolicyVMInstantRestoreResourceGroupInput` via:
//
//	PolicyVMInstantRestoreResourceGroupArgs{...}
type PolicyVMInstantRestoreResourceGroupInput interface {
	pulumi.Input

	ToPolicyVMInstantRestoreResourceGroupOutput() PolicyVMInstantRestoreResourceGroupOutput
	ToPolicyVMInstantRestoreResourceGroupOutputWithContext(context.Context) PolicyVMInstantRestoreResourceGroupOutput
}

type PolicyVMInstantRestoreResourceGroupArgs struct {
	// The prefix for the `instantRestoreResourceGroup` name.
	Prefix pulumi.StringInput `pulumi:"prefix"`
	// The suffix for the `instantRestoreResourceGroup` name.
	Suffix pulumi.StringPtrInput `pulumi:"suffix"`
}

func (PolicyVMInstantRestoreResourceGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyVMInstantRestoreResourceGroup)(nil)).Elem()
}

func (i PolicyVMInstantRestoreResourceGroupArgs) ToPolicyVMInstantRestoreResourceGroupOutput() PolicyVMInstantRestoreResourceGroupOutput {
	return i.ToPolicyVMInstantRestoreResourceGroupOutputWithContext(context.Background())
}

func (i PolicyVMInstantRestoreResourceGroupArgs) ToPolicyVMInstantRestoreResourceGroupOutputWithContext(ctx context.Context) PolicyVMInstantRestoreResourceGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMInstantRestoreResourceGroupOutput)
}

func (i PolicyVMInstantRestoreResourceGroupArgs) ToOutput(ctx context.Context) pulumix.Output[PolicyVMInstantRestoreResourceGroup] {
	return pulumix.Output[PolicyVMInstantRestoreResourceGroup]{
		OutputState: i.ToPolicyVMInstantRestoreResourceGroupOutputWithContext(ctx).OutputState,
	}
}

func (i PolicyVMInstantRestoreResourceGroupArgs) ToPolicyVMInstantRestoreResourceGroupPtrOutput() PolicyVMInstantRestoreResourceGroupPtrOutput {
	return i.ToPolicyVMInstantRestoreResourceGroupPtrOutputWithContext(context.Background())
}

func (i PolicyVMInstantRestoreResourceGroupArgs) ToPolicyVMInstantRestoreResourceGroupPtrOutputWithContext(ctx context.Context) PolicyVMInstantRestoreResourceGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMInstantRestoreResourceGroupOutput).ToPolicyVMInstantRestoreResourceGroupPtrOutputWithContext(ctx)
}

// PolicyVMInstantRestoreResourceGroupPtrInput is an input type that accepts PolicyVMInstantRestoreResourceGroupArgs, PolicyVMInstantRestoreResourceGroupPtr and PolicyVMInstantRestoreResourceGroupPtrOutput values.
// You can construct a concrete instance of `PolicyVMInstantRestoreResourceGroupPtrInput` via:
//
//	        PolicyVMInstantRestoreResourceGroupArgs{...}
//
//	or:
//
//	        nil
type PolicyVMInstantRestoreResourceGroupPtrInput interface {
	pulumi.Input

	ToPolicyVMInstantRestoreResourceGroupPtrOutput() PolicyVMInstantRestoreResourceGroupPtrOutput
	ToPolicyVMInstantRestoreResourceGroupPtrOutputWithContext(context.Context) PolicyVMInstantRestoreResourceGroupPtrOutput
}

type policyVMInstantRestoreResourceGroupPtrType PolicyVMInstantRestoreResourceGroupArgs

func PolicyVMInstantRestoreResourceGroupPtr(v *PolicyVMInstantRestoreResourceGroupArgs) PolicyVMInstantRestoreResourceGroupPtrInput {
	return (*policyVMInstantRestoreResourceGroupPtrType)(v)
}

func (*policyVMInstantRestoreResourceGroupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyVMInstantRestoreResourceGroup)(nil)).Elem()
}

func (i *policyVMInstantRestoreResourceGroupPtrType) ToPolicyVMInstantRestoreResourceGroupPtrOutput() PolicyVMInstantRestoreResourceGroupPtrOutput {
	return i.ToPolicyVMInstantRestoreResourceGroupPtrOutputWithContext(context.Background())
}

func (i *policyVMInstantRestoreResourceGroupPtrType) ToPolicyVMInstantRestoreResourceGroupPtrOutputWithContext(ctx context.Context) PolicyVMInstantRestoreResourceGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMInstantRestoreResourceGroupPtrOutput)
}

func (i *policyVMInstantRestoreResourceGroupPtrType) ToOutput(ctx context.Context) pulumix.Output[*PolicyVMInstantRestoreResourceGroup] {
	return pulumix.Output[*PolicyVMInstantRestoreResourceGroup]{
		OutputState: i.ToPolicyVMInstantRestoreResourceGroupPtrOutputWithContext(ctx).OutputState,
	}
}

type PolicyVMInstantRestoreResourceGroupOutput struct{ *pulumi.OutputState }

func (PolicyVMInstantRestoreResourceGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyVMInstantRestoreResourceGroup)(nil)).Elem()
}

func (o PolicyVMInstantRestoreResourceGroupOutput) ToPolicyVMInstantRestoreResourceGroupOutput() PolicyVMInstantRestoreResourceGroupOutput {
	return o
}

func (o PolicyVMInstantRestoreResourceGroupOutput) ToPolicyVMInstantRestoreResourceGroupOutputWithContext(ctx context.Context) PolicyVMInstantRestoreResourceGroupOutput {
	return o
}

func (o PolicyVMInstantRestoreResourceGroupOutput) ToPolicyVMInstantRestoreResourceGroupPtrOutput() PolicyVMInstantRestoreResourceGroupPtrOutput {
	return o.ToPolicyVMInstantRestoreResourceGroupPtrOutputWithContext(context.Background())
}

func (o PolicyVMInstantRestoreResourceGroupOutput) ToPolicyVMInstantRestoreResourceGroupPtrOutputWithContext(ctx context.Context) PolicyVMInstantRestoreResourceGroupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyVMInstantRestoreResourceGroup) *PolicyVMInstantRestoreResourceGroup {
		return &v
	}).(PolicyVMInstantRestoreResourceGroupPtrOutput)
}

func (o PolicyVMInstantRestoreResourceGroupOutput) ToOutput(ctx context.Context) pulumix.Output[PolicyVMInstantRestoreResourceGroup] {
	return pulumix.Output[PolicyVMInstantRestoreResourceGroup]{
		OutputState: o.OutputState,
	}
}

// The prefix for the `instantRestoreResourceGroup` name.
func (o PolicyVMInstantRestoreResourceGroupOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyVMInstantRestoreResourceGroup) string { return v.Prefix }).(pulumi.StringOutput)
}

// The suffix for the `instantRestoreResourceGroup` name.
func (o PolicyVMInstantRestoreResourceGroupOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyVMInstantRestoreResourceGroup) *string { return v.Suffix }).(pulumi.StringPtrOutput)
}

type PolicyVMInstantRestoreResourceGroupPtrOutput struct{ *pulumi.OutputState }

func (PolicyVMInstantRestoreResourceGroupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyVMInstantRestoreResourceGroup)(nil)).Elem()
}

func (o PolicyVMInstantRestoreResourceGroupPtrOutput) ToPolicyVMInstantRestoreResourceGroupPtrOutput() PolicyVMInstantRestoreResourceGroupPtrOutput {
	return o
}

func (o PolicyVMInstantRestoreResourceGroupPtrOutput) ToPolicyVMInstantRestoreResourceGroupPtrOutputWithContext(ctx context.Context) PolicyVMInstantRestoreResourceGroupPtrOutput {
	return o
}

func (o PolicyVMInstantRestoreResourceGroupPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PolicyVMInstantRestoreResourceGroup] {
	return pulumix.Output[*PolicyVMInstantRestoreResourceGroup]{
		OutputState: o.OutputState,
	}
}

func (o PolicyVMInstantRestoreResourceGroupPtrOutput) Elem() PolicyVMInstantRestoreResourceGroupOutput {
	return o.ApplyT(func(v *PolicyVMInstantRestoreResourceGroup) PolicyVMInstantRestoreResourceGroup {
		if v != nil {
			return *v
		}
		var ret PolicyVMInstantRestoreResourceGroup
		return ret
	}).(PolicyVMInstantRestoreResourceGroupOutput)
}

// The prefix for the `instantRestoreResourceGroup` name.
func (o PolicyVMInstantRestoreResourceGroupPtrOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyVMInstantRestoreResourceGroup) *string {
		if v == nil {
			return nil
		}
		return &v.Prefix
	}).(pulumi.StringPtrOutput)
}

// The suffix for the `instantRestoreResourceGroup` name.
func (o PolicyVMInstantRestoreResourceGroupPtrOutput) Suffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyVMInstantRestoreResourceGroup) *string {
		if v == nil {
			return nil
		}
		return v.Suffix
	}).(pulumi.StringPtrOutput)
}

type PolicyVMRetentionDaily struct {
	// The number of daily backups to keep. Must be between `7` and `9999`.
	//
	// > **Note:** Azure previously allows this field to be set to a minimum of 1 (day) - but for new resources/to update this value on existing Backup Policies - this value must now be at least 7 (days).
	Count int `pulumi:"count"`
}

// PolicyVMRetentionDailyInput is an input type that accepts PolicyVMRetentionDailyArgs and PolicyVMRetentionDailyOutput values.
// You can construct a concrete instance of `PolicyVMRetentionDailyInput` via:
//
//	PolicyVMRetentionDailyArgs{...}
type PolicyVMRetentionDailyInput interface {
	pulumi.Input

	ToPolicyVMRetentionDailyOutput() PolicyVMRetentionDailyOutput
	ToPolicyVMRetentionDailyOutputWithContext(context.Context) PolicyVMRetentionDailyOutput
}

type PolicyVMRetentionDailyArgs struct {
	// The number of daily backups to keep. Must be between `7` and `9999`.
	//
	// > **Note:** Azure previously allows this field to be set to a minimum of 1 (day) - but for new resources/to update this value on existing Backup Policies - this value must now be at least 7 (days).
	Count pulumi.IntInput `pulumi:"count"`
}

func (PolicyVMRetentionDailyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyVMRetentionDaily)(nil)).Elem()
}

func (i PolicyVMRetentionDailyArgs) ToPolicyVMRetentionDailyOutput() PolicyVMRetentionDailyOutput {
	return i.ToPolicyVMRetentionDailyOutputWithContext(context.Background())
}

func (i PolicyVMRetentionDailyArgs) ToPolicyVMRetentionDailyOutputWithContext(ctx context.Context) PolicyVMRetentionDailyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMRetentionDailyOutput)
}

func (i PolicyVMRetentionDailyArgs) ToOutput(ctx context.Context) pulumix.Output[PolicyVMRetentionDaily] {
	return pulumix.Output[PolicyVMRetentionDaily]{
		OutputState: i.ToPolicyVMRetentionDailyOutputWithContext(ctx).OutputState,
	}
}

func (i PolicyVMRetentionDailyArgs) ToPolicyVMRetentionDailyPtrOutput() PolicyVMRetentionDailyPtrOutput {
	return i.ToPolicyVMRetentionDailyPtrOutputWithContext(context.Background())
}

func (i PolicyVMRetentionDailyArgs) ToPolicyVMRetentionDailyPtrOutputWithContext(ctx context.Context) PolicyVMRetentionDailyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMRetentionDailyOutput).ToPolicyVMRetentionDailyPtrOutputWithContext(ctx)
}

// PolicyVMRetentionDailyPtrInput is an input type that accepts PolicyVMRetentionDailyArgs, PolicyVMRetentionDailyPtr and PolicyVMRetentionDailyPtrOutput values.
// You can construct a concrete instance of `PolicyVMRetentionDailyPtrInput` via:
//
//	        PolicyVMRetentionDailyArgs{...}
//
//	or:
//
//	        nil
type PolicyVMRetentionDailyPtrInput interface {
	pulumi.Input

	ToPolicyVMRetentionDailyPtrOutput() PolicyVMRetentionDailyPtrOutput
	ToPolicyVMRetentionDailyPtrOutputWithContext(context.Context) PolicyVMRetentionDailyPtrOutput
}

type policyVMRetentionDailyPtrType PolicyVMRetentionDailyArgs

func PolicyVMRetentionDailyPtr(v *PolicyVMRetentionDailyArgs) PolicyVMRetentionDailyPtrInput {
	return (*policyVMRetentionDailyPtrType)(v)
}

func (*policyVMRetentionDailyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyVMRetentionDaily)(nil)).Elem()
}

func (i *policyVMRetentionDailyPtrType) ToPolicyVMRetentionDailyPtrOutput() PolicyVMRetentionDailyPtrOutput {
	return i.ToPolicyVMRetentionDailyPtrOutputWithContext(context.Background())
}

func (i *policyVMRetentionDailyPtrType) ToPolicyVMRetentionDailyPtrOutputWithContext(ctx context.Context) PolicyVMRetentionDailyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMRetentionDailyPtrOutput)
}

func (i *policyVMRetentionDailyPtrType) ToOutput(ctx context.Context) pulumix.Output[*PolicyVMRetentionDaily] {
	return pulumix.Output[*PolicyVMRetentionDaily]{
		OutputState: i.ToPolicyVMRetentionDailyPtrOutputWithContext(ctx).OutputState,
	}
}

type PolicyVMRetentionDailyOutput struct{ *pulumi.OutputState }

func (PolicyVMRetentionDailyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyVMRetentionDaily)(nil)).Elem()
}

func (o PolicyVMRetentionDailyOutput) ToPolicyVMRetentionDailyOutput() PolicyVMRetentionDailyOutput {
	return o
}

func (o PolicyVMRetentionDailyOutput) ToPolicyVMRetentionDailyOutputWithContext(ctx context.Context) PolicyVMRetentionDailyOutput {
	return o
}

func (o PolicyVMRetentionDailyOutput) ToPolicyVMRetentionDailyPtrOutput() PolicyVMRetentionDailyPtrOutput {
	return o.ToPolicyVMRetentionDailyPtrOutputWithContext(context.Background())
}

func (o PolicyVMRetentionDailyOutput) ToPolicyVMRetentionDailyPtrOutputWithContext(ctx context.Context) PolicyVMRetentionDailyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyVMRetentionDaily) *PolicyVMRetentionDaily {
		return &v
	}).(PolicyVMRetentionDailyPtrOutput)
}

func (o PolicyVMRetentionDailyOutput) ToOutput(ctx context.Context) pulumix.Output[PolicyVMRetentionDaily] {
	return pulumix.Output[PolicyVMRetentionDaily]{
		OutputState: o.OutputState,
	}
}

// The number of daily backups to keep. Must be between `7` and `9999`.
//
// > **Note:** Azure previously allows this field to be set to a minimum of 1 (day) - but for new resources/to update this value on existing Backup Policies - this value must now be at least 7 (days).
func (o PolicyVMRetentionDailyOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v PolicyVMRetentionDaily) int { return v.Count }).(pulumi.IntOutput)
}

type PolicyVMRetentionDailyPtrOutput struct{ *pulumi.OutputState }

func (PolicyVMRetentionDailyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyVMRetentionDaily)(nil)).Elem()
}

func (o PolicyVMRetentionDailyPtrOutput) ToPolicyVMRetentionDailyPtrOutput() PolicyVMRetentionDailyPtrOutput {
	return o
}

func (o PolicyVMRetentionDailyPtrOutput) ToPolicyVMRetentionDailyPtrOutputWithContext(ctx context.Context) PolicyVMRetentionDailyPtrOutput {
	return o
}

func (o PolicyVMRetentionDailyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PolicyVMRetentionDaily] {
	return pulumix.Output[*PolicyVMRetentionDaily]{
		OutputState: o.OutputState,
	}
}

func (o PolicyVMRetentionDailyPtrOutput) Elem() PolicyVMRetentionDailyOutput {
	return o.ApplyT(func(v *PolicyVMRetentionDaily) PolicyVMRetentionDaily {
		if v != nil {
			return *v
		}
		var ret PolicyVMRetentionDaily
		return ret
	}).(PolicyVMRetentionDailyOutput)
}

// The number of daily backups to keep. Must be between `7` and `9999`.
//
// > **Note:** Azure previously allows this field to be set to a minimum of 1 (day) - but for new resources/to update this value on existing Backup Policies - this value must now be at least 7 (days).
func (o PolicyVMRetentionDailyPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyVMRetentionDaily) *int {
		if v == nil {
			return nil
		}
		return &v.Count
	}).(pulumi.IntPtrOutput)
}

type PolicyVMRetentionMonthly struct {
	// The number of monthly backups to keep. Must be between `1` and `9999`
	Count int `pulumi:"count"`
	// The days of the month to retain backups of. Must be between `1` and `31`.
	Days []int `pulumi:"days"`
	// Including the last day of the month, default to `false`.
	//
	// > **NOTE:**: Either `weekdays` and `weeks` or `days` and `includeLastDays` must be specified.
	IncludeLastDays *bool `pulumi:"includeLastDays"`
	// The weekday backups to retain . Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
	Weekdays []string `pulumi:"weekdays"`
	// The weeks of the month to retain backups of. Must be one of `First`, `Second`, `Third`, `Fourth`, `Last`.
	Weeks []string `pulumi:"weeks"`
}

// PolicyVMRetentionMonthlyInput is an input type that accepts PolicyVMRetentionMonthlyArgs and PolicyVMRetentionMonthlyOutput values.
// You can construct a concrete instance of `PolicyVMRetentionMonthlyInput` via:
//
//	PolicyVMRetentionMonthlyArgs{...}
type PolicyVMRetentionMonthlyInput interface {
	pulumi.Input

	ToPolicyVMRetentionMonthlyOutput() PolicyVMRetentionMonthlyOutput
	ToPolicyVMRetentionMonthlyOutputWithContext(context.Context) PolicyVMRetentionMonthlyOutput
}

type PolicyVMRetentionMonthlyArgs struct {
	// The number of monthly backups to keep. Must be between `1` and `9999`
	Count pulumi.IntInput `pulumi:"count"`
	// The days of the month to retain backups of. Must be between `1` and `31`.
	Days pulumi.IntArrayInput `pulumi:"days"`
	// Including the last day of the month, default to `false`.
	//
	// > **NOTE:**: Either `weekdays` and `weeks` or `days` and `includeLastDays` must be specified.
	IncludeLastDays pulumi.BoolPtrInput `pulumi:"includeLastDays"`
	// The weekday backups to retain . Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
	Weekdays pulumi.StringArrayInput `pulumi:"weekdays"`
	// The weeks of the month to retain backups of. Must be one of `First`, `Second`, `Third`, `Fourth`, `Last`.
	Weeks pulumi.StringArrayInput `pulumi:"weeks"`
}

func (PolicyVMRetentionMonthlyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyVMRetentionMonthly)(nil)).Elem()
}

func (i PolicyVMRetentionMonthlyArgs) ToPolicyVMRetentionMonthlyOutput() PolicyVMRetentionMonthlyOutput {
	return i.ToPolicyVMRetentionMonthlyOutputWithContext(context.Background())
}

func (i PolicyVMRetentionMonthlyArgs) ToPolicyVMRetentionMonthlyOutputWithContext(ctx context.Context) PolicyVMRetentionMonthlyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMRetentionMonthlyOutput)
}

func (i PolicyVMRetentionMonthlyArgs) ToOutput(ctx context.Context) pulumix.Output[PolicyVMRetentionMonthly] {
	return pulumix.Output[PolicyVMRetentionMonthly]{
		OutputState: i.ToPolicyVMRetentionMonthlyOutputWithContext(ctx).OutputState,
	}
}

func (i PolicyVMRetentionMonthlyArgs) ToPolicyVMRetentionMonthlyPtrOutput() PolicyVMRetentionMonthlyPtrOutput {
	return i.ToPolicyVMRetentionMonthlyPtrOutputWithContext(context.Background())
}

func (i PolicyVMRetentionMonthlyArgs) ToPolicyVMRetentionMonthlyPtrOutputWithContext(ctx context.Context) PolicyVMRetentionMonthlyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMRetentionMonthlyOutput).ToPolicyVMRetentionMonthlyPtrOutputWithContext(ctx)
}

// PolicyVMRetentionMonthlyPtrInput is an input type that accepts PolicyVMRetentionMonthlyArgs, PolicyVMRetentionMonthlyPtr and PolicyVMRetentionMonthlyPtrOutput values.
// You can construct a concrete instance of `PolicyVMRetentionMonthlyPtrInput` via:
//
//	        PolicyVMRetentionMonthlyArgs{...}
//
//	or:
//
//	        nil
type PolicyVMRetentionMonthlyPtrInput interface {
	pulumi.Input

	ToPolicyVMRetentionMonthlyPtrOutput() PolicyVMRetentionMonthlyPtrOutput
	ToPolicyVMRetentionMonthlyPtrOutputWithContext(context.Context) PolicyVMRetentionMonthlyPtrOutput
}

type policyVMRetentionMonthlyPtrType PolicyVMRetentionMonthlyArgs

func PolicyVMRetentionMonthlyPtr(v *PolicyVMRetentionMonthlyArgs) PolicyVMRetentionMonthlyPtrInput {
	return (*policyVMRetentionMonthlyPtrType)(v)
}

func (*policyVMRetentionMonthlyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyVMRetentionMonthly)(nil)).Elem()
}

func (i *policyVMRetentionMonthlyPtrType) ToPolicyVMRetentionMonthlyPtrOutput() PolicyVMRetentionMonthlyPtrOutput {
	return i.ToPolicyVMRetentionMonthlyPtrOutputWithContext(context.Background())
}

func (i *policyVMRetentionMonthlyPtrType) ToPolicyVMRetentionMonthlyPtrOutputWithContext(ctx context.Context) PolicyVMRetentionMonthlyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMRetentionMonthlyPtrOutput)
}

func (i *policyVMRetentionMonthlyPtrType) ToOutput(ctx context.Context) pulumix.Output[*PolicyVMRetentionMonthly] {
	return pulumix.Output[*PolicyVMRetentionMonthly]{
		OutputState: i.ToPolicyVMRetentionMonthlyPtrOutputWithContext(ctx).OutputState,
	}
}

type PolicyVMRetentionMonthlyOutput struct{ *pulumi.OutputState }

func (PolicyVMRetentionMonthlyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyVMRetentionMonthly)(nil)).Elem()
}

func (o PolicyVMRetentionMonthlyOutput) ToPolicyVMRetentionMonthlyOutput() PolicyVMRetentionMonthlyOutput {
	return o
}

func (o PolicyVMRetentionMonthlyOutput) ToPolicyVMRetentionMonthlyOutputWithContext(ctx context.Context) PolicyVMRetentionMonthlyOutput {
	return o
}

func (o PolicyVMRetentionMonthlyOutput) ToPolicyVMRetentionMonthlyPtrOutput() PolicyVMRetentionMonthlyPtrOutput {
	return o.ToPolicyVMRetentionMonthlyPtrOutputWithContext(context.Background())
}

func (o PolicyVMRetentionMonthlyOutput) ToPolicyVMRetentionMonthlyPtrOutputWithContext(ctx context.Context) PolicyVMRetentionMonthlyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyVMRetentionMonthly) *PolicyVMRetentionMonthly {
		return &v
	}).(PolicyVMRetentionMonthlyPtrOutput)
}

func (o PolicyVMRetentionMonthlyOutput) ToOutput(ctx context.Context) pulumix.Output[PolicyVMRetentionMonthly] {
	return pulumix.Output[PolicyVMRetentionMonthly]{
		OutputState: o.OutputState,
	}
}

// The number of monthly backups to keep. Must be between `1` and `9999`
func (o PolicyVMRetentionMonthlyOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v PolicyVMRetentionMonthly) int { return v.Count }).(pulumi.IntOutput)
}

// The days of the month to retain backups of. Must be between `1` and `31`.
func (o PolicyVMRetentionMonthlyOutput) Days() pulumi.IntArrayOutput {
	return o.ApplyT(func(v PolicyVMRetentionMonthly) []int { return v.Days }).(pulumi.IntArrayOutput)
}

// Including the last day of the month, default to `false`.
//
// > **NOTE:**: Either `weekdays` and `weeks` or `days` and `includeLastDays` must be specified.
func (o PolicyVMRetentionMonthlyOutput) IncludeLastDays() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyVMRetentionMonthly) *bool { return v.IncludeLastDays }).(pulumi.BoolPtrOutput)
}

// The weekday backups to retain . Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
func (o PolicyVMRetentionMonthlyOutput) Weekdays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyVMRetentionMonthly) []string { return v.Weekdays }).(pulumi.StringArrayOutput)
}

// The weeks of the month to retain backups of. Must be one of `First`, `Second`, `Third`, `Fourth`, `Last`.
func (o PolicyVMRetentionMonthlyOutput) Weeks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyVMRetentionMonthly) []string { return v.Weeks }).(pulumi.StringArrayOutput)
}

type PolicyVMRetentionMonthlyPtrOutput struct{ *pulumi.OutputState }

func (PolicyVMRetentionMonthlyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyVMRetentionMonthly)(nil)).Elem()
}

func (o PolicyVMRetentionMonthlyPtrOutput) ToPolicyVMRetentionMonthlyPtrOutput() PolicyVMRetentionMonthlyPtrOutput {
	return o
}

func (o PolicyVMRetentionMonthlyPtrOutput) ToPolicyVMRetentionMonthlyPtrOutputWithContext(ctx context.Context) PolicyVMRetentionMonthlyPtrOutput {
	return o
}

func (o PolicyVMRetentionMonthlyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PolicyVMRetentionMonthly] {
	return pulumix.Output[*PolicyVMRetentionMonthly]{
		OutputState: o.OutputState,
	}
}

func (o PolicyVMRetentionMonthlyPtrOutput) Elem() PolicyVMRetentionMonthlyOutput {
	return o.ApplyT(func(v *PolicyVMRetentionMonthly) PolicyVMRetentionMonthly {
		if v != nil {
			return *v
		}
		var ret PolicyVMRetentionMonthly
		return ret
	}).(PolicyVMRetentionMonthlyOutput)
}

// The number of monthly backups to keep. Must be between `1` and `9999`
func (o PolicyVMRetentionMonthlyPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyVMRetentionMonthly) *int {
		if v == nil {
			return nil
		}
		return &v.Count
	}).(pulumi.IntPtrOutput)
}

// The days of the month to retain backups of. Must be between `1` and `31`.
func (o PolicyVMRetentionMonthlyPtrOutput) Days() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *PolicyVMRetentionMonthly) []int {
		if v == nil {
			return nil
		}
		return v.Days
	}).(pulumi.IntArrayOutput)
}

// Including the last day of the month, default to `false`.
//
// > **NOTE:**: Either `weekdays` and `weeks` or `days` and `includeLastDays` must be specified.
func (o PolicyVMRetentionMonthlyPtrOutput) IncludeLastDays() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PolicyVMRetentionMonthly) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeLastDays
	}).(pulumi.BoolPtrOutput)
}

// The weekday backups to retain . Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
func (o PolicyVMRetentionMonthlyPtrOutput) Weekdays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyVMRetentionMonthly) []string {
		if v == nil {
			return nil
		}
		return v.Weekdays
	}).(pulumi.StringArrayOutput)
}

// The weeks of the month to retain backups of. Must be one of `First`, `Second`, `Third`, `Fourth`, `Last`.
func (o PolicyVMRetentionMonthlyPtrOutput) Weeks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyVMRetentionMonthly) []string {
		if v == nil {
			return nil
		}
		return v.Weeks
	}).(pulumi.StringArrayOutput)
}

type PolicyVMRetentionWeekly struct {
	// The number of weekly backups to keep. Must be between `1` and `9999`
	Count int `pulumi:"count"`
	// The weekday backups to retain. Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
	Weekdays []string `pulumi:"weekdays"`
}

// PolicyVMRetentionWeeklyInput is an input type that accepts PolicyVMRetentionWeeklyArgs and PolicyVMRetentionWeeklyOutput values.
// You can construct a concrete instance of `PolicyVMRetentionWeeklyInput` via:
//
//	PolicyVMRetentionWeeklyArgs{...}
type PolicyVMRetentionWeeklyInput interface {
	pulumi.Input

	ToPolicyVMRetentionWeeklyOutput() PolicyVMRetentionWeeklyOutput
	ToPolicyVMRetentionWeeklyOutputWithContext(context.Context) PolicyVMRetentionWeeklyOutput
}

type PolicyVMRetentionWeeklyArgs struct {
	// The number of weekly backups to keep. Must be between `1` and `9999`
	Count pulumi.IntInput `pulumi:"count"`
	// The weekday backups to retain. Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
	Weekdays pulumi.StringArrayInput `pulumi:"weekdays"`
}

func (PolicyVMRetentionWeeklyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyVMRetentionWeekly)(nil)).Elem()
}

func (i PolicyVMRetentionWeeklyArgs) ToPolicyVMRetentionWeeklyOutput() PolicyVMRetentionWeeklyOutput {
	return i.ToPolicyVMRetentionWeeklyOutputWithContext(context.Background())
}

func (i PolicyVMRetentionWeeklyArgs) ToPolicyVMRetentionWeeklyOutputWithContext(ctx context.Context) PolicyVMRetentionWeeklyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMRetentionWeeklyOutput)
}

func (i PolicyVMRetentionWeeklyArgs) ToOutput(ctx context.Context) pulumix.Output[PolicyVMRetentionWeekly] {
	return pulumix.Output[PolicyVMRetentionWeekly]{
		OutputState: i.ToPolicyVMRetentionWeeklyOutputWithContext(ctx).OutputState,
	}
}

func (i PolicyVMRetentionWeeklyArgs) ToPolicyVMRetentionWeeklyPtrOutput() PolicyVMRetentionWeeklyPtrOutput {
	return i.ToPolicyVMRetentionWeeklyPtrOutputWithContext(context.Background())
}

func (i PolicyVMRetentionWeeklyArgs) ToPolicyVMRetentionWeeklyPtrOutputWithContext(ctx context.Context) PolicyVMRetentionWeeklyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMRetentionWeeklyOutput).ToPolicyVMRetentionWeeklyPtrOutputWithContext(ctx)
}

// PolicyVMRetentionWeeklyPtrInput is an input type that accepts PolicyVMRetentionWeeklyArgs, PolicyVMRetentionWeeklyPtr and PolicyVMRetentionWeeklyPtrOutput values.
// You can construct a concrete instance of `PolicyVMRetentionWeeklyPtrInput` via:
//
//	        PolicyVMRetentionWeeklyArgs{...}
//
//	or:
//
//	        nil
type PolicyVMRetentionWeeklyPtrInput interface {
	pulumi.Input

	ToPolicyVMRetentionWeeklyPtrOutput() PolicyVMRetentionWeeklyPtrOutput
	ToPolicyVMRetentionWeeklyPtrOutputWithContext(context.Context) PolicyVMRetentionWeeklyPtrOutput
}

type policyVMRetentionWeeklyPtrType PolicyVMRetentionWeeklyArgs

func PolicyVMRetentionWeeklyPtr(v *PolicyVMRetentionWeeklyArgs) PolicyVMRetentionWeeklyPtrInput {
	return (*policyVMRetentionWeeklyPtrType)(v)
}

func (*policyVMRetentionWeeklyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyVMRetentionWeekly)(nil)).Elem()
}

func (i *policyVMRetentionWeeklyPtrType) ToPolicyVMRetentionWeeklyPtrOutput() PolicyVMRetentionWeeklyPtrOutput {
	return i.ToPolicyVMRetentionWeeklyPtrOutputWithContext(context.Background())
}

func (i *policyVMRetentionWeeklyPtrType) ToPolicyVMRetentionWeeklyPtrOutputWithContext(ctx context.Context) PolicyVMRetentionWeeklyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMRetentionWeeklyPtrOutput)
}

func (i *policyVMRetentionWeeklyPtrType) ToOutput(ctx context.Context) pulumix.Output[*PolicyVMRetentionWeekly] {
	return pulumix.Output[*PolicyVMRetentionWeekly]{
		OutputState: i.ToPolicyVMRetentionWeeklyPtrOutputWithContext(ctx).OutputState,
	}
}

type PolicyVMRetentionWeeklyOutput struct{ *pulumi.OutputState }

func (PolicyVMRetentionWeeklyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyVMRetentionWeekly)(nil)).Elem()
}

func (o PolicyVMRetentionWeeklyOutput) ToPolicyVMRetentionWeeklyOutput() PolicyVMRetentionWeeklyOutput {
	return o
}

func (o PolicyVMRetentionWeeklyOutput) ToPolicyVMRetentionWeeklyOutputWithContext(ctx context.Context) PolicyVMRetentionWeeklyOutput {
	return o
}

func (o PolicyVMRetentionWeeklyOutput) ToPolicyVMRetentionWeeklyPtrOutput() PolicyVMRetentionWeeklyPtrOutput {
	return o.ToPolicyVMRetentionWeeklyPtrOutputWithContext(context.Background())
}

func (o PolicyVMRetentionWeeklyOutput) ToPolicyVMRetentionWeeklyPtrOutputWithContext(ctx context.Context) PolicyVMRetentionWeeklyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyVMRetentionWeekly) *PolicyVMRetentionWeekly {
		return &v
	}).(PolicyVMRetentionWeeklyPtrOutput)
}

func (o PolicyVMRetentionWeeklyOutput) ToOutput(ctx context.Context) pulumix.Output[PolicyVMRetentionWeekly] {
	return pulumix.Output[PolicyVMRetentionWeekly]{
		OutputState: o.OutputState,
	}
}

// The number of weekly backups to keep. Must be between `1` and `9999`
func (o PolicyVMRetentionWeeklyOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v PolicyVMRetentionWeekly) int { return v.Count }).(pulumi.IntOutput)
}

// The weekday backups to retain. Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
func (o PolicyVMRetentionWeeklyOutput) Weekdays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyVMRetentionWeekly) []string { return v.Weekdays }).(pulumi.StringArrayOutput)
}

type PolicyVMRetentionWeeklyPtrOutput struct{ *pulumi.OutputState }

func (PolicyVMRetentionWeeklyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyVMRetentionWeekly)(nil)).Elem()
}

func (o PolicyVMRetentionWeeklyPtrOutput) ToPolicyVMRetentionWeeklyPtrOutput() PolicyVMRetentionWeeklyPtrOutput {
	return o
}

func (o PolicyVMRetentionWeeklyPtrOutput) ToPolicyVMRetentionWeeklyPtrOutputWithContext(ctx context.Context) PolicyVMRetentionWeeklyPtrOutput {
	return o
}

func (o PolicyVMRetentionWeeklyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PolicyVMRetentionWeekly] {
	return pulumix.Output[*PolicyVMRetentionWeekly]{
		OutputState: o.OutputState,
	}
}

func (o PolicyVMRetentionWeeklyPtrOutput) Elem() PolicyVMRetentionWeeklyOutput {
	return o.ApplyT(func(v *PolicyVMRetentionWeekly) PolicyVMRetentionWeekly {
		if v != nil {
			return *v
		}
		var ret PolicyVMRetentionWeekly
		return ret
	}).(PolicyVMRetentionWeeklyOutput)
}

// The number of weekly backups to keep. Must be between `1` and `9999`
func (o PolicyVMRetentionWeeklyPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyVMRetentionWeekly) *int {
		if v == nil {
			return nil
		}
		return &v.Count
	}).(pulumi.IntPtrOutput)
}

// The weekday backups to retain. Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
func (o PolicyVMRetentionWeeklyPtrOutput) Weekdays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyVMRetentionWeekly) []string {
		if v == nil {
			return nil
		}
		return v.Weekdays
	}).(pulumi.StringArrayOutput)
}

type PolicyVMRetentionYearly struct {
	// The number of yearly backups to keep. Must be between `1` and `9999`
	Count int `pulumi:"count"`
	// The days of the month to retain backups of. Must be between `1` and `31`.
	Days []int `pulumi:"days"`
	// Including the last day of the month, default to `false`.
	//
	// > **NOTE:**: Either `weekdays` and `weeks` or `days` and `includeLastDays` must be specified.
	IncludeLastDays *bool `pulumi:"includeLastDays"`
	// The months of the year to retain backups of. Must be one of `January`, `February`, `March`, `April`, `May`, `June`, `July`, `August`, `September`, `October`, `November` and `December`.
	Months []string `pulumi:"months"`
	// The weekday backups to retain . Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
	Weekdays []string `pulumi:"weekdays"`
	// The weeks of the month to retain backups of. Must be one of `First`, `Second`, `Third`, `Fourth`, `Last`.
	Weeks []string `pulumi:"weeks"`
}

// PolicyVMRetentionYearlyInput is an input type that accepts PolicyVMRetentionYearlyArgs and PolicyVMRetentionYearlyOutput values.
// You can construct a concrete instance of `PolicyVMRetentionYearlyInput` via:
//
//	PolicyVMRetentionYearlyArgs{...}
type PolicyVMRetentionYearlyInput interface {
	pulumi.Input

	ToPolicyVMRetentionYearlyOutput() PolicyVMRetentionYearlyOutput
	ToPolicyVMRetentionYearlyOutputWithContext(context.Context) PolicyVMRetentionYearlyOutput
}

type PolicyVMRetentionYearlyArgs struct {
	// The number of yearly backups to keep. Must be between `1` and `9999`
	Count pulumi.IntInput `pulumi:"count"`
	// The days of the month to retain backups of. Must be between `1` and `31`.
	Days pulumi.IntArrayInput `pulumi:"days"`
	// Including the last day of the month, default to `false`.
	//
	// > **NOTE:**: Either `weekdays` and `weeks` or `days` and `includeLastDays` must be specified.
	IncludeLastDays pulumi.BoolPtrInput `pulumi:"includeLastDays"`
	// The months of the year to retain backups of. Must be one of `January`, `February`, `March`, `April`, `May`, `June`, `July`, `August`, `September`, `October`, `November` and `December`.
	Months pulumi.StringArrayInput `pulumi:"months"`
	// The weekday backups to retain . Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
	Weekdays pulumi.StringArrayInput `pulumi:"weekdays"`
	// The weeks of the month to retain backups of. Must be one of `First`, `Second`, `Third`, `Fourth`, `Last`.
	Weeks pulumi.StringArrayInput `pulumi:"weeks"`
}

func (PolicyVMRetentionYearlyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyVMRetentionYearly)(nil)).Elem()
}

func (i PolicyVMRetentionYearlyArgs) ToPolicyVMRetentionYearlyOutput() PolicyVMRetentionYearlyOutput {
	return i.ToPolicyVMRetentionYearlyOutputWithContext(context.Background())
}

func (i PolicyVMRetentionYearlyArgs) ToPolicyVMRetentionYearlyOutputWithContext(ctx context.Context) PolicyVMRetentionYearlyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMRetentionYearlyOutput)
}

func (i PolicyVMRetentionYearlyArgs) ToOutput(ctx context.Context) pulumix.Output[PolicyVMRetentionYearly] {
	return pulumix.Output[PolicyVMRetentionYearly]{
		OutputState: i.ToPolicyVMRetentionYearlyOutputWithContext(ctx).OutputState,
	}
}

func (i PolicyVMRetentionYearlyArgs) ToPolicyVMRetentionYearlyPtrOutput() PolicyVMRetentionYearlyPtrOutput {
	return i.ToPolicyVMRetentionYearlyPtrOutputWithContext(context.Background())
}

func (i PolicyVMRetentionYearlyArgs) ToPolicyVMRetentionYearlyPtrOutputWithContext(ctx context.Context) PolicyVMRetentionYearlyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMRetentionYearlyOutput).ToPolicyVMRetentionYearlyPtrOutputWithContext(ctx)
}

// PolicyVMRetentionYearlyPtrInput is an input type that accepts PolicyVMRetentionYearlyArgs, PolicyVMRetentionYearlyPtr and PolicyVMRetentionYearlyPtrOutput values.
// You can construct a concrete instance of `PolicyVMRetentionYearlyPtrInput` via:
//
//	        PolicyVMRetentionYearlyArgs{...}
//
//	or:
//
//	        nil
type PolicyVMRetentionYearlyPtrInput interface {
	pulumi.Input

	ToPolicyVMRetentionYearlyPtrOutput() PolicyVMRetentionYearlyPtrOutput
	ToPolicyVMRetentionYearlyPtrOutputWithContext(context.Context) PolicyVMRetentionYearlyPtrOutput
}

type policyVMRetentionYearlyPtrType PolicyVMRetentionYearlyArgs

func PolicyVMRetentionYearlyPtr(v *PolicyVMRetentionYearlyArgs) PolicyVMRetentionYearlyPtrInput {
	return (*policyVMRetentionYearlyPtrType)(v)
}

func (*policyVMRetentionYearlyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyVMRetentionYearly)(nil)).Elem()
}

func (i *policyVMRetentionYearlyPtrType) ToPolicyVMRetentionYearlyPtrOutput() PolicyVMRetentionYearlyPtrOutput {
	return i.ToPolicyVMRetentionYearlyPtrOutputWithContext(context.Background())
}

func (i *policyVMRetentionYearlyPtrType) ToPolicyVMRetentionYearlyPtrOutputWithContext(ctx context.Context) PolicyVMRetentionYearlyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMRetentionYearlyPtrOutput)
}

func (i *policyVMRetentionYearlyPtrType) ToOutput(ctx context.Context) pulumix.Output[*PolicyVMRetentionYearly] {
	return pulumix.Output[*PolicyVMRetentionYearly]{
		OutputState: i.ToPolicyVMRetentionYearlyPtrOutputWithContext(ctx).OutputState,
	}
}

type PolicyVMRetentionYearlyOutput struct{ *pulumi.OutputState }

func (PolicyVMRetentionYearlyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyVMRetentionYearly)(nil)).Elem()
}

func (o PolicyVMRetentionYearlyOutput) ToPolicyVMRetentionYearlyOutput() PolicyVMRetentionYearlyOutput {
	return o
}

func (o PolicyVMRetentionYearlyOutput) ToPolicyVMRetentionYearlyOutputWithContext(ctx context.Context) PolicyVMRetentionYearlyOutput {
	return o
}

func (o PolicyVMRetentionYearlyOutput) ToPolicyVMRetentionYearlyPtrOutput() PolicyVMRetentionYearlyPtrOutput {
	return o.ToPolicyVMRetentionYearlyPtrOutputWithContext(context.Background())
}

func (o PolicyVMRetentionYearlyOutput) ToPolicyVMRetentionYearlyPtrOutputWithContext(ctx context.Context) PolicyVMRetentionYearlyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyVMRetentionYearly) *PolicyVMRetentionYearly {
		return &v
	}).(PolicyVMRetentionYearlyPtrOutput)
}

func (o PolicyVMRetentionYearlyOutput) ToOutput(ctx context.Context) pulumix.Output[PolicyVMRetentionYearly] {
	return pulumix.Output[PolicyVMRetentionYearly]{
		OutputState: o.OutputState,
	}
}

// The number of yearly backups to keep. Must be between `1` and `9999`
func (o PolicyVMRetentionYearlyOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v PolicyVMRetentionYearly) int { return v.Count }).(pulumi.IntOutput)
}

// The days of the month to retain backups of. Must be between `1` and `31`.
func (o PolicyVMRetentionYearlyOutput) Days() pulumi.IntArrayOutput {
	return o.ApplyT(func(v PolicyVMRetentionYearly) []int { return v.Days }).(pulumi.IntArrayOutput)
}

// Including the last day of the month, default to `false`.
//
// > **NOTE:**: Either `weekdays` and `weeks` or `days` and `includeLastDays` must be specified.
func (o PolicyVMRetentionYearlyOutput) IncludeLastDays() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyVMRetentionYearly) *bool { return v.IncludeLastDays }).(pulumi.BoolPtrOutput)
}

// The months of the year to retain backups of. Must be one of `January`, `February`, `March`, `April`, `May`, `June`, `July`, `August`, `September`, `October`, `November` and `December`.
func (o PolicyVMRetentionYearlyOutput) Months() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyVMRetentionYearly) []string { return v.Months }).(pulumi.StringArrayOutput)
}

// The weekday backups to retain . Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
func (o PolicyVMRetentionYearlyOutput) Weekdays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyVMRetentionYearly) []string { return v.Weekdays }).(pulumi.StringArrayOutput)
}

// The weeks of the month to retain backups of. Must be one of `First`, `Second`, `Third`, `Fourth`, `Last`.
func (o PolicyVMRetentionYearlyOutput) Weeks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyVMRetentionYearly) []string { return v.Weeks }).(pulumi.StringArrayOutput)
}

type PolicyVMRetentionYearlyPtrOutput struct{ *pulumi.OutputState }

func (PolicyVMRetentionYearlyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyVMRetentionYearly)(nil)).Elem()
}

func (o PolicyVMRetentionYearlyPtrOutput) ToPolicyVMRetentionYearlyPtrOutput() PolicyVMRetentionYearlyPtrOutput {
	return o
}

func (o PolicyVMRetentionYearlyPtrOutput) ToPolicyVMRetentionYearlyPtrOutputWithContext(ctx context.Context) PolicyVMRetentionYearlyPtrOutput {
	return o
}

func (o PolicyVMRetentionYearlyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PolicyVMRetentionYearly] {
	return pulumix.Output[*PolicyVMRetentionYearly]{
		OutputState: o.OutputState,
	}
}

func (o PolicyVMRetentionYearlyPtrOutput) Elem() PolicyVMRetentionYearlyOutput {
	return o.ApplyT(func(v *PolicyVMRetentionYearly) PolicyVMRetentionYearly {
		if v != nil {
			return *v
		}
		var ret PolicyVMRetentionYearly
		return ret
	}).(PolicyVMRetentionYearlyOutput)
}

// The number of yearly backups to keep. Must be between `1` and `9999`
func (o PolicyVMRetentionYearlyPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyVMRetentionYearly) *int {
		if v == nil {
			return nil
		}
		return &v.Count
	}).(pulumi.IntPtrOutput)
}

// The days of the month to retain backups of. Must be between `1` and `31`.
func (o PolicyVMRetentionYearlyPtrOutput) Days() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *PolicyVMRetentionYearly) []int {
		if v == nil {
			return nil
		}
		return v.Days
	}).(pulumi.IntArrayOutput)
}

// Including the last day of the month, default to `false`.
//
// > **NOTE:**: Either `weekdays` and `weeks` or `days` and `includeLastDays` must be specified.
func (o PolicyVMRetentionYearlyPtrOutput) IncludeLastDays() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PolicyVMRetentionYearly) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeLastDays
	}).(pulumi.BoolPtrOutput)
}

// The months of the year to retain backups of. Must be one of `January`, `February`, `March`, `April`, `May`, `June`, `July`, `August`, `September`, `October`, `November` and `December`.
func (o PolicyVMRetentionYearlyPtrOutput) Months() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyVMRetentionYearly) []string {
		if v == nil {
			return nil
		}
		return v.Months
	}).(pulumi.StringArrayOutput)
}

// The weekday backups to retain . Must be one of `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
func (o PolicyVMRetentionYearlyPtrOutput) Weekdays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyVMRetentionYearly) []string {
		if v == nil {
			return nil
		}
		return v.Weekdays
	}).(pulumi.StringArrayOutput)
}

// The weeks of the month to retain backups of. Must be one of `First`, `Second`, `Third`, `Fourth`, `Last`.
func (o PolicyVMRetentionYearlyPtrOutput) Weeks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyVMRetentionYearly) []string {
		if v == nil {
			return nil
		}
		return v.Weeks
	}).(pulumi.StringArrayOutput)
}

type PolicyVMWorkloadProtectionPolicy struct {
	// A `backup` block as defined below.
	Backup PolicyVMWorkloadProtectionPolicyBackup `pulumi:"backup"`
	// The type of the VM Workload Backup Policy. Possible values are `Differential`, `Full`, `Incremental` and `Log`.
	PolicyType string `pulumi:"policyType"`
	// A `retentionDaily` block as defined below.
	RetentionDaily *PolicyVMWorkloadProtectionPolicyRetentionDaily `pulumi:"retentionDaily"`
	// A `retentionMonthly` block as defined below.
	RetentionMonthly *PolicyVMWorkloadProtectionPolicyRetentionMonthly `pulumi:"retentionMonthly"`
	// A `retentionWeekly` block as defined below.
	RetentionWeekly *PolicyVMWorkloadProtectionPolicyRetentionWeekly `pulumi:"retentionWeekly"`
	// A `retentionYearly` block as defined below.
	RetentionYearly *PolicyVMWorkloadProtectionPolicyRetentionYearly `pulumi:"retentionYearly"`
	// A `simpleRetention` block as defined below.
	SimpleRetention *PolicyVMWorkloadProtectionPolicySimpleRetention `pulumi:"simpleRetention"`
}

// PolicyVMWorkloadProtectionPolicyInput is an input type that accepts PolicyVMWorkloadProtectionPolicyArgs and PolicyVMWorkloadProtectionPolicyOutput values.
// You can construct a concrete instance of `PolicyVMWorkloadProtectionPolicyInput` via:
//
//	PolicyVMWorkloadProtectionPolicyArgs{...}
type PolicyVMWorkloadProtectionPolicyInput interface {
	pulumi.Input

	ToPolicyVMWorkloadProtectionPolicyOutput() PolicyVMWorkloadProtectionPolicyOutput
	ToPolicyVMWorkloadProtectionPolicyOutputWithContext(context.Context) PolicyVMWorkloadProtectionPolicyOutput
}

type PolicyVMWorkloadProtectionPolicyArgs struct {
	// A `backup` block as defined below.
	Backup PolicyVMWorkloadProtectionPolicyBackupInput `pulumi:"backup"`
	// The type of the VM Workload Backup Policy. Possible values are `Differential`, `Full`, `Incremental` and `Log`.
	PolicyType pulumi.StringInput `pulumi:"policyType"`
	// A `retentionDaily` block as defined below.
	RetentionDaily PolicyVMWorkloadProtectionPolicyRetentionDailyPtrInput `pulumi:"retentionDaily"`
	// A `retentionMonthly` block as defined below.
	RetentionMonthly PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrInput `pulumi:"retentionMonthly"`
	// A `retentionWeekly` block as defined below.
	RetentionWeekly PolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrInput `pulumi:"retentionWeekly"`
	// A `retentionYearly` block as defined below.
	RetentionYearly PolicyVMWorkloadProtectionPolicyRetentionYearlyPtrInput `pulumi:"retentionYearly"`
	// A `simpleRetention` block as defined below.
	SimpleRetention PolicyVMWorkloadProtectionPolicySimpleRetentionPtrInput `pulumi:"simpleRetention"`
}

func (PolicyVMWorkloadProtectionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyVMWorkloadProtectionPolicy)(nil)).Elem()
}

func (i PolicyVMWorkloadProtectionPolicyArgs) ToPolicyVMWorkloadProtectionPolicyOutput() PolicyVMWorkloadProtectionPolicyOutput {
	return i.ToPolicyVMWorkloadProtectionPolicyOutputWithContext(context.Background())
}

func (i PolicyVMWorkloadProtectionPolicyArgs) ToPolicyVMWorkloadProtectionPolicyOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMWorkloadProtectionPolicyOutput)
}

func (i PolicyVMWorkloadProtectionPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[PolicyVMWorkloadProtectionPolicy] {
	return pulumix.Output[PolicyVMWorkloadProtectionPolicy]{
		OutputState: i.ToPolicyVMWorkloadProtectionPolicyOutputWithContext(ctx).OutputState,
	}
}

// PolicyVMWorkloadProtectionPolicyArrayInput is an input type that accepts PolicyVMWorkloadProtectionPolicyArray and PolicyVMWorkloadProtectionPolicyArrayOutput values.
// You can construct a concrete instance of `PolicyVMWorkloadProtectionPolicyArrayInput` via:
//
//	PolicyVMWorkloadProtectionPolicyArray{ PolicyVMWorkloadProtectionPolicyArgs{...} }
type PolicyVMWorkloadProtectionPolicyArrayInput interface {
	pulumi.Input

	ToPolicyVMWorkloadProtectionPolicyArrayOutput() PolicyVMWorkloadProtectionPolicyArrayOutput
	ToPolicyVMWorkloadProtectionPolicyArrayOutputWithContext(context.Context) PolicyVMWorkloadProtectionPolicyArrayOutput
}

type PolicyVMWorkloadProtectionPolicyArray []PolicyVMWorkloadProtectionPolicyInput

func (PolicyVMWorkloadProtectionPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyVMWorkloadProtectionPolicy)(nil)).Elem()
}

func (i PolicyVMWorkloadProtectionPolicyArray) ToPolicyVMWorkloadProtectionPolicyArrayOutput() PolicyVMWorkloadProtectionPolicyArrayOutput {
	return i.ToPolicyVMWorkloadProtectionPolicyArrayOutputWithContext(context.Background())
}

func (i PolicyVMWorkloadProtectionPolicyArray) ToPolicyVMWorkloadProtectionPolicyArrayOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMWorkloadProtectionPolicyArrayOutput)
}

func (i PolicyVMWorkloadProtectionPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]PolicyVMWorkloadProtectionPolicy] {
	return pulumix.Output[[]PolicyVMWorkloadProtectionPolicy]{
		OutputState: i.ToPolicyVMWorkloadProtectionPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

type PolicyVMWorkloadProtectionPolicyOutput struct{ *pulumi.OutputState }

func (PolicyVMWorkloadProtectionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyVMWorkloadProtectionPolicy)(nil)).Elem()
}

func (o PolicyVMWorkloadProtectionPolicyOutput) ToPolicyVMWorkloadProtectionPolicyOutput() PolicyVMWorkloadProtectionPolicyOutput {
	return o
}

func (o PolicyVMWorkloadProtectionPolicyOutput) ToPolicyVMWorkloadProtectionPolicyOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicyOutput {
	return o
}

func (o PolicyVMWorkloadProtectionPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[PolicyVMWorkloadProtectionPolicy] {
	return pulumix.Output[PolicyVMWorkloadProtectionPolicy]{
		OutputState: o.OutputState,
	}
}

// A `backup` block as defined below.
func (o PolicyVMWorkloadProtectionPolicyOutput) Backup() PolicyVMWorkloadProtectionPolicyBackupOutput {
	return o.ApplyT(func(v PolicyVMWorkloadProtectionPolicy) PolicyVMWorkloadProtectionPolicyBackup { return v.Backup }).(PolicyVMWorkloadProtectionPolicyBackupOutput)
}

// The type of the VM Workload Backup Policy. Possible values are `Differential`, `Full`, `Incremental` and `Log`.
func (o PolicyVMWorkloadProtectionPolicyOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyVMWorkloadProtectionPolicy) string { return v.PolicyType }).(pulumi.StringOutput)
}

// A `retentionDaily` block as defined below.
func (o PolicyVMWorkloadProtectionPolicyOutput) RetentionDaily() PolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutput {
	return o.ApplyT(func(v PolicyVMWorkloadProtectionPolicy) *PolicyVMWorkloadProtectionPolicyRetentionDaily {
		return v.RetentionDaily
	}).(PolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutput)
}

// A `retentionMonthly` block as defined below.
func (o PolicyVMWorkloadProtectionPolicyOutput) RetentionMonthly() PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutput {
	return o.ApplyT(func(v PolicyVMWorkloadProtectionPolicy) *PolicyVMWorkloadProtectionPolicyRetentionMonthly {
		return v.RetentionMonthly
	}).(PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutput)
}

// A `retentionWeekly` block as defined below.
func (o PolicyVMWorkloadProtectionPolicyOutput) RetentionWeekly() PolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutput {
	return o.ApplyT(func(v PolicyVMWorkloadProtectionPolicy) *PolicyVMWorkloadProtectionPolicyRetentionWeekly {
		return v.RetentionWeekly
	}).(PolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutput)
}

// A `retentionYearly` block as defined below.
func (o PolicyVMWorkloadProtectionPolicyOutput) RetentionYearly() PolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutput {
	return o.ApplyT(func(v PolicyVMWorkloadProtectionPolicy) *PolicyVMWorkloadProtectionPolicyRetentionYearly {
		return v.RetentionYearly
	}).(PolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutput)
}

// A `simpleRetention` block as defined below.
func (o PolicyVMWorkloadProtectionPolicyOutput) SimpleRetention() PolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutput {
	return o.ApplyT(func(v PolicyVMWorkloadProtectionPolicy) *PolicyVMWorkloadProtectionPolicySimpleRetention {
		return v.SimpleRetention
	}).(PolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutput)
}

type PolicyVMWorkloadProtectionPolicyArrayOutput struct{ *pulumi.OutputState }

func (PolicyVMWorkloadProtectionPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyVMWorkloadProtectionPolicy)(nil)).Elem()
}

func (o PolicyVMWorkloadProtectionPolicyArrayOutput) ToPolicyVMWorkloadProtectionPolicyArrayOutput() PolicyVMWorkloadProtectionPolicyArrayOutput {
	return o
}

func (o PolicyVMWorkloadProtectionPolicyArrayOutput) ToPolicyVMWorkloadProtectionPolicyArrayOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicyArrayOutput {
	return o
}

func (o PolicyVMWorkloadProtectionPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PolicyVMWorkloadProtectionPolicy] {
	return pulumix.Output[[]PolicyVMWorkloadProtectionPolicy]{
		OutputState: o.OutputState,
	}
}

func (o PolicyVMWorkloadProtectionPolicyArrayOutput) Index(i pulumi.IntInput) PolicyVMWorkloadProtectionPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyVMWorkloadProtectionPolicy {
		return vs[0].([]PolicyVMWorkloadProtectionPolicy)[vs[1].(int)]
	}).(PolicyVMWorkloadProtectionPolicyOutput)
}

type PolicyVMWorkloadProtectionPolicyBackup struct {
	// The backup frequency for the VM Workload Backup Policy. Possible values are `Daily` and `Weekly`.
	Frequency *string `pulumi:"frequency"`
	// The backup frequency in minutes for the VM Workload Backup Policy. Possible values are `15`, `30`, `60`, `120`, `240`, `480`, `720` and `1440`.
	FrequencyInMinutes *int `pulumi:"frequencyInMinutes"`
	// The time of day to perform the backup in 24hour format.
	Time *string `pulumi:"time"`
	// The days of the week to perform backups on. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`. This is used when `frequency` is `Weekly`.
	Weekdays []string `pulumi:"weekdays"`
}

// PolicyVMWorkloadProtectionPolicyBackupInput is an input type that accepts PolicyVMWorkloadProtectionPolicyBackupArgs and PolicyVMWorkloadProtectionPolicyBackupOutput values.
// You can construct a concrete instance of `PolicyVMWorkloadProtectionPolicyBackupInput` via:
//
//	PolicyVMWorkloadProtectionPolicyBackupArgs{...}
type PolicyVMWorkloadProtectionPolicyBackupInput interface {
	pulumi.Input

	ToPolicyVMWorkloadProtectionPolicyBackupOutput() PolicyVMWorkloadProtectionPolicyBackupOutput
	ToPolicyVMWorkloadProtectionPolicyBackupOutputWithContext(context.Context) PolicyVMWorkloadProtectionPolicyBackupOutput
}

type PolicyVMWorkloadProtectionPolicyBackupArgs struct {
	// The backup frequency for the VM Workload Backup Policy. Possible values are `Daily` and `Weekly`.
	Frequency pulumi.StringPtrInput `pulumi:"frequency"`
	// The backup frequency in minutes for the VM Workload Backup Policy. Possible values are `15`, `30`, `60`, `120`, `240`, `480`, `720` and `1440`.
	FrequencyInMinutes pulumi.IntPtrInput `pulumi:"frequencyInMinutes"`
	// The time of day to perform the backup in 24hour format.
	Time pulumi.StringPtrInput `pulumi:"time"`
	// The days of the week to perform backups on. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`. This is used when `frequency` is `Weekly`.
	Weekdays pulumi.StringArrayInput `pulumi:"weekdays"`
}

func (PolicyVMWorkloadProtectionPolicyBackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyVMWorkloadProtectionPolicyBackup)(nil)).Elem()
}

func (i PolicyVMWorkloadProtectionPolicyBackupArgs) ToPolicyVMWorkloadProtectionPolicyBackupOutput() PolicyVMWorkloadProtectionPolicyBackupOutput {
	return i.ToPolicyVMWorkloadProtectionPolicyBackupOutputWithContext(context.Background())
}

func (i PolicyVMWorkloadProtectionPolicyBackupArgs) ToPolicyVMWorkloadProtectionPolicyBackupOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicyBackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMWorkloadProtectionPolicyBackupOutput)
}

func (i PolicyVMWorkloadProtectionPolicyBackupArgs) ToOutput(ctx context.Context) pulumix.Output[PolicyVMWorkloadProtectionPolicyBackup] {
	return pulumix.Output[PolicyVMWorkloadProtectionPolicyBackup]{
		OutputState: i.ToPolicyVMWorkloadProtectionPolicyBackupOutputWithContext(ctx).OutputState,
	}
}

type PolicyVMWorkloadProtectionPolicyBackupOutput struct{ *pulumi.OutputState }

func (PolicyVMWorkloadProtectionPolicyBackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyVMWorkloadProtectionPolicyBackup)(nil)).Elem()
}

func (o PolicyVMWorkloadProtectionPolicyBackupOutput) ToPolicyVMWorkloadProtectionPolicyBackupOutput() PolicyVMWorkloadProtectionPolicyBackupOutput {
	return o
}

func (o PolicyVMWorkloadProtectionPolicyBackupOutput) ToPolicyVMWorkloadProtectionPolicyBackupOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicyBackupOutput {
	return o
}

func (o PolicyVMWorkloadProtectionPolicyBackupOutput) ToOutput(ctx context.Context) pulumix.Output[PolicyVMWorkloadProtectionPolicyBackup] {
	return pulumix.Output[PolicyVMWorkloadProtectionPolicyBackup]{
		OutputState: o.OutputState,
	}
}

// The backup frequency for the VM Workload Backup Policy. Possible values are `Daily` and `Weekly`.
func (o PolicyVMWorkloadProtectionPolicyBackupOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyVMWorkloadProtectionPolicyBackup) *string { return v.Frequency }).(pulumi.StringPtrOutput)
}

// The backup frequency in minutes for the VM Workload Backup Policy. Possible values are `15`, `30`, `60`, `120`, `240`, `480`, `720` and `1440`.
func (o PolicyVMWorkloadProtectionPolicyBackupOutput) FrequencyInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PolicyVMWorkloadProtectionPolicyBackup) *int { return v.FrequencyInMinutes }).(pulumi.IntPtrOutput)
}

// The time of day to perform the backup in 24hour format.
func (o PolicyVMWorkloadProtectionPolicyBackupOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyVMWorkloadProtectionPolicyBackup) *string { return v.Time }).(pulumi.StringPtrOutput)
}

// The days of the week to perform backups on. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`. This is used when `frequency` is `Weekly`.
func (o PolicyVMWorkloadProtectionPolicyBackupOutput) Weekdays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyVMWorkloadProtectionPolicyBackup) []string { return v.Weekdays }).(pulumi.StringArrayOutput)
}

type PolicyVMWorkloadProtectionPolicyRetentionDaily struct {
	// The number of daily backups to keep. Possible values are between `7` and `9999`.
	Count int `pulumi:"count"`
}

// PolicyVMWorkloadProtectionPolicyRetentionDailyInput is an input type that accepts PolicyVMWorkloadProtectionPolicyRetentionDailyArgs and PolicyVMWorkloadProtectionPolicyRetentionDailyOutput values.
// You can construct a concrete instance of `PolicyVMWorkloadProtectionPolicyRetentionDailyInput` via:
//
//	PolicyVMWorkloadProtectionPolicyRetentionDailyArgs{...}
type PolicyVMWorkloadProtectionPolicyRetentionDailyInput interface {
	pulumi.Input

	ToPolicyVMWorkloadProtectionPolicyRetentionDailyOutput() PolicyVMWorkloadProtectionPolicyRetentionDailyOutput
	ToPolicyVMWorkloadProtectionPolicyRetentionDailyOutputWithContext(context.Context) PolicyVMWorkloadProtectionPolicyRetentionDailyOutput
}

type PolicyVMWorkloadProtectionPolicyRetentionDailyArgs struct {
	// The number of daily backups to keep. Possible values are between `7` and `9999`.
	Count pulumi.IntInput `pulumi:"count"`
}

func (PolicyVMWorkloadProtectionPolicyRetentionDailyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyVMWorkloadProtectionPolicyRetentionDaily)(nil)).Elem()
}

func (i PolicyVMWorkloadProtectionPolicyRetentionDailyArgs) ToPolicyVMWorkloadProtectionPolicyRetentionDailyOutput() PolicyVMWorkloadProtectionPolicyRetentionDailyOutput {
	return i.ToPolicyVMWorkloadProtectionPolicyRetentionDailyOutputWithContext(context.Background())
}

func (i PolicyVMWorkloadProtectionPolicyRetentionDailyArgs) ToPolicyVMWorkloadProtectionPolicyRetentionDailyOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicyRetentionDailyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMWorkloadProtectionPolicyRetentionDailyOutput)
}

func (i PolicyVMWorkloadProtectionPolicyRetentionDailyArgs) ToOutput(ctx context.Context) pulumix.Output[PolicyVMWorkloadProtectionPolicyRetentionDaily] {
	return pulumix.Output[PolicyVMWorkloadProtectionPolicyRetentionDaily]{
		OutputState: i.ToPolicyVMWorkloadProtectionPolicyRetentionDailyOutputWithContext(ctx).OutputState,
	}
}

func (i PolicyVMWorkloadProtectionPolicyRetentionDailyArgs) ToPolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutput() PolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutput {
	return i.ToPolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutputWithContext(context.Background())
}

func (i PolicyVMWorkloadProtectionPolicyRetentionDailyArgs) ToPolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMWorkloadProtectionPolicyRetentionDailyOutput).ToPolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutputWithContext(ctx)
}

// PolicyVMWorkloadProtectionPolicyRetentionDailyPtrInput is an input type that accepts PolicyVMWorkloadProtectionPolicyRetentionDailyArgs, PolicyVMWorkloadProtectionPolicyRetentionDailyPtr and PolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutput values.
// You can construct a concrete instance of `PolicyVMWorkloadProtectionPolicyRetentionDailyPtrInput` via:
//
//	        PolicyVMWorkloadProtectionPolicyRetentionDailyArgs{...}
//
//	or:
//
//	        nil
type PolicyVMWorkloadProtectionPolicyRetentionDailyPtrInput interface {
	pulumi.Input

	ToPolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutput() PolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutput
	ToPolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutputWithContext(context.Context) PolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutput
}

type policyVMWorkloadProtectionPolicyRetentionDailyPtrType PolicyVMWorkloadProtectionPolicyRetentionDailyArgs

func PolicyVMWorkloadProtectionPolicyRetentionDailyPtr(v *PolicyVMWorkloadProtectionPolicyRetentionDailyArgs) PolicyVMWorkloadProtectionPolicyRetentionDailyPtrInput {
	return (*policyVMWorkloadProtectionPolicyRetentionDailyPtrType)(v)
}

func (*policyVMWorkloadProtectionPolicyRetentionDailyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyVMWorkloadProtectionPolicyRetentionDaily)(nil)).Elem()
}

func (i *policyVMWorkloadProtectionPolicyRetentionDailyPtrType) ToPolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutput() PolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutput {
	return i.ToPolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutputWithContext(context.Background())
}

func (i *policyVMWorkloadProtectionPolicyRetentionDailyPtrType) ToPolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutput)
}

func (i *policyVMWorkloadProtectionPolicyRetentionDailyPtrType) ToOutput(ctx context.Context) pulumix.Output[*PolicyVMWorkloadProtectionPolicyRetentionDaily] {
	return pulumix.Output[*PolicyVMWorkloadProtectionPolicyRetentionDaily]{
		OutputState: i.ToPolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutputWithContext(ctx).OutputState,
	}
}

type PolicyVMWorkloadProtectionPolicyRetentionDailyOutput struct{ *pulumi.OutputState }

func (PolicyVMWorkloadProtectionPolicyRetentionDailyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyVMWorkloadProtectionPolicyRetentionDaily)(nil)).Elem()
}

func (o PolicyVMWorkloadProtectionPolicyRetentionDailyOutput) ToPolicyVMWorkloadProtectionPolicyRetentionDailyOutput() PolicyVMWorkloadProtectionPolicyRetentionDailyOutput {
	return o
}

func (o PolicyVMWorkloadProtectionPolicyRetentionDailyOutput) ToPolicyVMWorkloadProtectionPolicyRetentionDailyOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicyRetentionDailyOutput {
	return o
}

func (o PolicyVMWorkloadProtectionPolicyRetentionDailyOutput) ToPolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutput() PolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutput {
	return o.ToPolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutputWithContext(context.Background())
}

func (o PolicyVMWorkloadProtectionPolicyRetentionDailyOutput) ToPolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyVMWorkloadProtectionPolicyRetentionDaily) *PolicyVMWorkloadProtectionPolicyRetentionDaily {
		return &v
	}).(PolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutput)
}

func (o PolicyVMWorkloadProtectionPolicyRetentionDailyOutput) ToOutput(ctx context.Context) pulumix.Output[PolicyVMWorkloadProtectionPolicyRetentionDaily] {
	return pulumix.Output[PolicyVMWorkloadProtectionPolicyRetentionDaily]{
		OutputState: o.OutputState,
	}
}

// The number of daily backups to keep. Possible values are between `7` and `9999`.
func (o PolicyVMWorkloadProtectionPolicyRetentionDailyOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v PolicyVMWorkloadProtectionPolicyRetentionDaily) int { return v.Count }).(pulumi.IntOutput)
}

type PolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutput struct{ *pulumi.OutputState }

func (PolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyVMWorkloadProtectionPolicyRetentionDaily)(nil)).Elem()
}

func (o PolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutput) ToPolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutput() PolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutput {
	return o
}

func (o PolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutput) ToPolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutput {
	return o
}

func (o PolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PolicyVMWorkloadProtectionPolicyRetentionDaily] {
	return pulumix.Output[*PolicyVMWorkloadProtectionPolicyRetentionDaily]{
		OutputState: o.OutputState,
	}
}

func (o PolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutput) Elem() PolicyVMWorkloadProtectionPolicyRetentionDailyOutput {
	return o.ApplyT(func(v *PolicyVMWorkloadProtectionPolicyRetentionDaily) PolicyVMWorkloadProtectionPolicyRetentionDaily {
		if v != nil {
			return *v
		}
		var ret PolicyVMWorkloadProtectionPolicyRetentionDaily
		return ret
	}).(PolicyVMWorkloadProtectionPolicyRetentionDailyOutput)
}

// The number of daily backups to keep. Possible values are between `7` and `9999`.
func (o PolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyVMWorkloadProtectionPolicyRetentionDaily) *int {
		if v == nil {
			return nil
		}
		return &v.Count
	}).(pulumi.IntPtrOutput)
}

type PolicyVMWorkloadProtectionPolicyRetentionMonthly struct {
	// The number of monthly backups to keep. Must be between `1` and `1188`.
	Count int `pulumi:"count"`
	// The retention schedule format type for monthly retention policy. Possible values are `Daily` and `Weekly`.
	FormatType string `pulumi:"formatType"`
	// The monthday backups to retain. Possible values are between `0` and `28`.
	Monthdays []int `pulumi:"monthdays"`
	// The weekday backups to retain. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
	Weekdays []string `pulumi:"weekdays"`
	// The weeks of the month to retain backups of. Possible values are `First`, `Second`, `Third`, `Fourth` and `Last`.
	Weeks []string `pulumi:"weeks"`
}

// PolicyVMWorkloadProtectionPolicyRetentionMonthlyInput is an input type that accepts PolicyVMWorkloadProtectionPolicyRetentionMonthlyArgs and PolicyVMWorkloadProtectionPolicyRetentionMonthlyOutput values.
// You can construct a concrete instance of `PolicyVMWorkloadProtectionPolicyRetentionMonthlyInput` via:
//
//	PolicyVMWorkloadProtectionPolicyRetentionMonthlyArgs{...}
type PolicyVMWorkloadProtectionPolicyRetentionMonthlyInput interface {
	pulumi.Input

	ToPolicyVMWorkloadProtectionPolicyRetentionMonthlyOutput() PolicyVMWorkloadProtectionPolicyRetentionMonthlyOutput
	ToPolicyVMWorkloadProtectionPolicyRetentionMonthlyOutputWithContext(context.Context) PolicyVMWorkloadProtectionPolicyRetentionMonthlyOutput
}

type PolicyVMWorkloadProtectionPolicyRetentionMonthlyArgs struct {
	// The number of monthly backups to keep. Must be between `1` and `1188`.
	Count pulumi.IntInput `pulumi:"count"`
	// The retention schedule format type for monthly retention policy. Possible values are `Daily` and `Weekly`.
	FormatType pulumi.StringInput `pulumi:"formatType"`
	// The monthday backups to retain. Possible values are between `0` and `28`.
	Monthdays pulumi.IntArrayInput `pulumi:"monthdays"`
	// The weekday backups to retain. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
	Weekdays pulumi.StringArrayInput `pulumi:"weekdays"`
	// The weeks of the month to retain backups of. Possible values are `First`, `Second`, `Third`, `Fourth` and `Last`.
	Weeks pulumi.StringArrayInput `pulumi:"weeks"`
}

func (PolicyVMWorkloadProtectionPolicyRetentionMonthlyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyVMWorkloadProtectionPolicyRetentionMonthly)(nil)).Elem()
}

func (i PolicyVMWorkloadProtectionPolicyRetentionMonthlyArgs) ToPolicyVMWorkloadProtectionPolicyRetentionMonthlyOutput() PolicyVMWorkloadProtectionPolicyRetentionMonthlyOutput {
	return i.ToPolicyVMWorkloadProtectionPolicyRetentionMonthlyOutputWithContext(context.Background())
}

func (i PolicyVMWorkloadProtectionPolicyRetentionMonthlyArgs) ToPolicyVMWorkloadProtectionPolicyRetentionMonthlyOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicyRetentionMonthlyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMWorkloadProtectionPolicyRetentionMonthlyOutput)
}

func (i PolicyVMWorkloadProtectionPolicyRetentionMonthlyArgs) ToOutput(ctx context.Context) pulumix.Output[PolicyVMWorkloadProtectionPolicyRetentionMonthly] {
	return pulumix.Output[PolicyVMWorkloadProtectionPolicyRetentionMonthly]{
		OutputState: i.ToPolicyVMWorkloadProtectionPolicyRetentionMonthlyOutputWithContext(ctx).OutputState,
	}
}

func (i PolicyVMWorkloadProtectionPolicyRetentionMonthlyArgs) ToPolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutput() PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutput {
	return i.ToPolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutputWithContext(context.Background())
}

func (i PolicyVMWorkloadProtectionPolicyRetentionMonthlyArgs) ToPolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMWorkloadProtectionPolicyRetentionMonthlyOutput).ToPolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutputWithContext(ctx)
}

// PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrInput is an input type that accepts PolicyVMWorkloadProtectionPolicyRetentionMonthlyArgs, PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtr and PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutput values.
// You can construct a concrete instance of `PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrInput` via:
//
//	        PolicyVMWorkloadProtectionPolicyRetentionMonthlyArgs{...}
//
//	or:
//
//	        nil
type PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrInput interface {
	pulumi.Input

	ToPolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutput() PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutput
	ToPolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutputWithContext(context.Context) PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutput
}

type policyVMWorkloadProtectionPolicyRetentionMonthlyPtrType PolicyVMWorkloadProtectionPolicyRetentionMonthlyArgs

func PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtr(v *PolicyVMWorkloadProtectionPolicyRetentionMonthlyArgs) PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrInput {
	return (*policyVMWorkloadProtectionPolicyRetentionMonthlyPtrType)(v)
}

func (*policyVMWorkloadProtectionPolicyRetentionMonthlyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyVMWorkloadProtectionPolicyRetentionMonthly)(nil)).Elem()
}

func (i *policyVMWorkloadProtectionPolicyRetentionMonthlyPtrType) ToPolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutput() PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutput {
	return i.ToPolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutputWithContext(context.Background())
}

func (i *policyVMWorkloadProtectionPolicyRetentionMonthlyPtrType) ToPolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutput)
}

func (i *policyVMWorkloadProtectionPolicyRetentionMonthlyPtrType) ToOutput(ctx context.Context) pulumix.Output[*PolicyVMWorkloadProtectionPolicyRetentionMonthly] {
	return pulumix.Output[*PolicyVMWorkloadProtectionPolicyRetentionMonthly]{
		OutputState: i.ToPolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutputWithContext(ctx).OutputState,
	}
}

type PolicyVMWorkloadProtectionPolicyRetentionMonthlyOutput struct{ *pulumi.OutputState }

func (PolicyVMWorkloadProtectionPolicyRetentionMonthlyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyVMWorkloadProtectionPolicyRetentionMonthly)(nil)).Elem()
}

func (o PolicyVMWorkloadProtectionPolicyRetentionMonthlyOutput) ToPolicyVMWorkloadProtectionPolicyRetentionMonthlyOutput() PolicyVMWorkloadProtectionPolicyRetentionMonthlyOutput {
	return o
}

func (o PolicyVMWorkloadProtectionPolicyRetentionMonthlyOutput) ToPolicyVMWorkloadProtectionPolicyRetentionMonthlyOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicyRetentionMonthlyOutput {
	return o
}

func (o PolicyVMWorkloadProtectionPolicyRetentionMonthlyOutput) ToPolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutput() PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutput {
	return o.ToPolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutputWithContext(context.Background())
}

func (o PolicyVMWorkloadProtectionPolicyRetentionMonthlyOutput) ToPolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyVMWorkloadProtectionPolicyRetentionMonthly) *PolicyVMWorkloadProtectionPolicyRetentionMonthly {
		return &v
	}).(PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutput)
}

func (o PolicyVMWorkloadProtectionPolicyRetentionMonthlyOutput) ToOutput(ctx context.Context) pulumix.Output[PolicyVMWorkloadProtectionPolicyRetentionMonthly] {
	return pulumix.Output[PolicyVMWorkloadProtectionPolicyRetentionMonthly]{
		OutputState: o.OutputState,
	}
}

// The number of monthly backups to keep. Must be between `1` and `1188`.
func (o PolicyVMWorkloadProtectionPolicyRetentionMonthlyOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v PolicyVMWorkloadProtectionPolicyRetentionMonthly) int { return v.Count }).(pulumi.IntOutput)
}

// The retention schedule format type for monthly retention policy. Possible values are `Daily` and `Weekly`.
func (o PolicyVMWorkloadProtectionPolicyRetentionMonthlyOutput) FormatType() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyVMWorkloadProtectionPolicyRetentionMonthly) string { return v.FormatType }).(pulumi.StringOutput)
}

// The monthday backups to retain. Possible values are between `0` and `28`.
func (o PolicyVMWorkloadProtectionPolicyRetentionMonthlyOutput) Monthdays() pulumi.IntArrayOutput {
	return o.ApplyT(func(v PolicyVMWorkloadProtectionPolicyRetentionMonthly) []int { return v.Monthdays }).(pulumi.IntArrayOutput)
}

// The weekday backups to retain. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
func (o PolicyVMWorkloadProtectionPolicyRetentionMonthlyOutput) Weekdays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyVMWorkloadProtectionPolicyRetentionMonthly) []string { return v.Weekdays }).(pulumi.StringArrayOutput)
}

// The weeks of the month to retain backups of. Possible values are `First`, `Second`, `Third`, `Fourth` and `Last`.
func (o PolicyVMWorkloadProtectionPolicyRetentionMonthlyOutput) Weeks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyVMWorkloadProtectionPolicyRetentionMonthly) []string { return v.Weeks }).(pulumi.StringArrayOutput)
}

type PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutput struct{ *pulumi.OutputState }

func (PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyVMWorkloadProtectionPolicyRetentionMonthly)(nil)).Elem()
}

func (o PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutput) ToPolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutput() PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutput {
	return o
}

func (o PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutput) ToPolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutput {
	return o
}

func (o PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PolicyVMWorkloadProtectionPolicyRetentionMonthly] {
	return pulumix.Output[*PolicyVMWorkloadProtectionPolicyRetentionMonthly]{
		OutputState: o.OutputState,
	}
}

func (o PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutput) Elem() PolicyVMWorkloadProtectionPolicyRetentionMonthlyOutput {
	return o.ApplyT(func(v *PolicyVMWorkloadProtectionPolicyRetentionMonthly) PolicyVMWorkloadProtectionPolicyRetentionMonthly {
		if v != nil {
			return *v
		}
		var ret PolicyVMWorkloadProtectionPolicyRetentionMonthly
		return ret
	}).(PolicyVMWorkloadProtectionPolicyRetentionMonthlyOutput)
}

// The number of monthly backups to keep. Must be between `1` and `1188`.
func (o PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyVMWorkloadProtectionPolicyRetentionMonthly) *int {
		if v == nil {
			return nil
		}
		return &v.Count
	}).(pulumi.IntPtrOutput)
}

// The retention schedule format type for monthly retention policy. Possible values are `Daily` and `Weekly`.
func (o PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutput) FormatType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyVMWorkloadProtectionPolicyRetentionMonthly) *string {
		if v == nil {
			return nil
		}
		return &v.FormatType
	}).(pulumi.StringPtrOutput)
}

// The monthday backups to retain. Possible values are between `0` and `28`.
func (o PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutput) Monthdays() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *PolicyVMWorkloadProtectionPolicyRetentionMonthly) []int {
		if v == nil {
			return nil
		}
		return v.Monthdays
	}).(pulumi.IntArrayOutput)
}

// The weekday backups to retain. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
func (o PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutput) Weekdays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyVMWorkloadProtectionPolicyRetentionMonthly) []string {
		if v == nil {
			return nil
		}
		return v.Weekdays
	}).(pulumi.StringArrayOutput)
}

// The weeks of the month to retain backups of. Possible values are `First`, `Second`, `Third`, `Fourth` and `Last`.
func (o PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutput) Weeks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyVMWorkloadProtectionPolicyRetentionMonthly) []string {
		if v == nil {
			return nil
		}
		return v.Weeks
	}).(pulumi.StringArrayOutput)
}

type PolicyVMWorkloadProtectionPolicyRetentionWeekly struct {
	// The number of weekly backups to keep. Possible values are between `1` and `5163`.
	Count int `pulumi:"count"`
	// The weekday backups to retain. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
	Weekdays []string `pulumi:"weekdays"`
}

// PolicyVMWorkloadProtectionPolicyRetentionWeeklyInput is an input type that accepts PolicyVMWorkloadProtectionPolicyRetentionWeeklyArgs and PolicyVMWorkloadProtectionPolicyRetentionWeeklyOutput values.
// You can construct a concrete instance of `PolicyVMWorkloadProtectionPolicyRetentionWeeklyInput` via:
//
//	PolicyVMWorkloadProtectionPolicyRetentionWeeklyArgs{...}
type PolicyVMWorkloadProtectionPolicyRetentionWeeklyInput interface {
	pulumi.Input

	ToPolicyVMWorkloadProtectionPolicyRetentionWeeklyOutput() PolicyVMWorkloadProtectionPolicyRetentionWeeklyOutput
	ToPolicyVMWorkloadProtectionPolicyRetentionWeeklyOutputWithContext(context.Context) PolicyVMWorkloadProtectionPolicyRetentionWeeklyOutput
}

type PolicyVMWorkloadProtectionPolicyRetentionWeeklyArgs struct {
	// The number of weekly backups to keep. Possible values are between `1` and `5163`.
	Count pulumi.IntInput `pulumi:"count"`
	// The weekday backups to retain. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
	Weekdays pulumi.StringArrayInput `pulumi:"weekdays"`
}

func (PolicyVMWorkloadProtectionPolicyRetentionWeeklyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyVMWorkloadProtectionPolicyRetentionWeekly)(nil)).Elem()
}

func (i PolicyVMWorkloadProtectionPolicyRetentionWeeklyArgs) ToPolicyVMWorkloadProtectionPolicyRetentionWeeklyOutput() PolicyVMWorkloadProtectionPolicyRetentionWeeklyOutput {
	return i.ToPolicyVMWorkloadProtectionPolicyRetentionWeeklyOutputWithContext(context.Background())
}

func (i PolicyVMWorkloadProtectionPolicyRetentionWeeklyArgs) ToPolicyVMWorkloadProtectionPolicyRetentionWeeklyOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicyRetentionWeeklyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMWorkloadProtectionPolicyRetentionWeeklyOutput)
}

func (i PolicyVMWorkloadProtectionPolicyRetentionWeeklyArgs) ToOutput(ctx context.Context) pulumix.Output[PolicyVMWorkloadProtectionPolicyRetentionWeekly] {
	return pulumix.Output[PolicyVMWorkloadProtectionPolicyRetentionWeekly]{
		OutputState: i.ToPolicyVMWorkloadProtectionPolicyRetentionWeeklyOutputWithContext(ctx).OutputState,
	}
}

func (i PolicyVMWorkloadProtectionPolicyRetentionWeeklyArgs) ToPolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutput() PolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutput {
	return i.ToPolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutputWithContext(context.Background())
}

func (i PolicyVMWorkloadProtectionPolicyRetentionWeeklyArgs) ToPolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMWorkloadProtectionPolicyRetentionWeeklyOutput).ToPolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutputWithContext(ctx)
}

// PolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrInput is an input type that accepts PolicyVMWorkloadProtectionPolicyRetentionWeeklyArgs, PolicyVMWorkloadProtectionPolicyRetentionWeeklyPtr and PolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutput values.
// You can construct a concrete instance of `PolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrInput` via:
//
//	        PolicyVMWorkloadProtectionPolicyRetentionWeeklyArgs{...}
//
//	or:
//
//	        nil
type PolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrInput interface {
	pulumi.Input

	ToPolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutput() PolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutput
	ToPolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutputWithContext(context.Context) PolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutput
}

type policyVMWorkloadProtectionPolicyRetentionWeeklyPtrType PolicyVMWorkloadProtectionPolicyRetentionWeeklyArgs

func PolicyVMWorkloadProtectionPolicyRetentionWeeklyPtr(v *PolicyVMWorkloadProtectionPolicyRetentionWeeklyArgs) PolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrInput {
	return (*policyVMWorkloadProtectionPolicyRetentionWeeklyPtrType)(v)
}

func (*policyVMWorkloadProtectionPolicyRetentionWeeklyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyVMWorkloadProtectionPolicyRetentionWeekly)(nil)).Elem()
}

func (i *policyVMWorkloadProtectionPolicyRetentionWeeklyPtrType) ToPolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutput() PolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutput {
	return i.ToPolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutputWithContext(context.Background())
}

func (i *policyVMWorkloadProtectionPolicyRetentionWeeklyPtrType) ToPolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutput)
}

func (i *policyVMWorkloadProtectionPolicyRetentionWeeklyPtrType) ToOutput(ctx context.Context) pulumix.Output[*PolicyVMWorkloadProtectionPolicyRetentionWeekly] {
	return pulumix.Output[*PolicyVMWorkloadProtectionPolicyRetentionWeekly]{
		OutputState: i.ToPolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutputWithContext(ctx).OutputState,
	}
}

type PolicyVMWorkloadProtectionPolicyRetentionWeeklyOutput struct{ *pulumi.OutputState }

func (PolicyVMWorkloadProtectionPolicyRetentionWeeklyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyVMWorkloadProtectionPolicyRetentionWeekly)(nil)).Elem()
}

func (o PolicyVMWorkloadProtectionPolicyRetentionWeeklyOutput) ToPolicyVMWorkloadProtectionPolicyRetentionWeeklyOutput() PolicyVMWorkloadProtectionPolicyRetentionWeeklyOutput {
	return o
}

func (o PolicyVMWorkloadProtectionPolicyRetentionWeeklyOutput) ToPolicyVMWorkloadProtectionPolicyRetentionWeeklyOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicyRetentionWeeklyOutput {
	return o
}

func (o PolicyVMWorkloadProtectionPolicyRetentionWeeklyOutput) ToPolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutput() PolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutput {
	return o.ToPolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutputWithContext(context.Background())
}

func (o PolicyVMWorkloadProtectionPolicyRetentionWeeklyOutput) ToPolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyVMWorkloadProtectionPolicyRetentionWeekly) *PolicyVMWorkloadProtectionPolicyRetentionWeekly {
		return &v
	}).(PolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutput)
}

func (o PolicyVMWorkloadProtectionPolicyRetentionWeeklyOutput) ToOutput(ctx context.Context) pulumix.Output[PolicyVMWorkloadProtectionPolicyRetentionWeekly] {
	return pulumix.Output[PolicyVMWorkloadProtectionPolicyRetentionWeekly]{
		OutputState: o.OutputState,
	}
}

// The number of weekly backups to keep. Possible values are between `1` and `5163`.
func (o PolicyVMWorkloadProtectionPolicyRetentionWeeklyOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v PolicyVMWorkloadProtectionPolicyRetentionWeekly) int { return v.Count }).(pulumi.IntOutput)
}

// The weekday backups to retain. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
func (o PolicyVMWorkloadProtectionPolicyRetentionWeeklyOutput) Weekdays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyVMWorkloadProtectionPolicyRetentionWeekly) []string { return v.Weekdays }).(pulumi.StringArrayOutput)
}

type PolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutput struct{ *pulumi.OutputState }

func (PolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyVMWorkloadProtectionPolicyRetentionWeekly)(nil)).Elem()
}

func (o PolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutput) ToPolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutput() PolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutput {
	return o
}

func (o PolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutput) ToPolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutput {
	return o
}

func (o PolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PolicyVMWorkloadProtectionPolicyRetentionWeekly] {
	return pulumix.Output[*PolicyVMWorkloadProtectionPolicyRetentionWeekly]{
		OutputState: o.OutputState,
	}
}

func (o PolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutput) Elem() PolicyVMWorkloadProtectionPolicyRetentionWeeklyOutput {
	return o.ApplyT(func(v *PolicyVMWorkloadProtectionPolicyRetentionWeekly) PolicyVMWorkloadProtectionPolicyRetentionWeekly {
		if v != nil {
			return *v
		}
		var ret PolicyVMWorkloadProtectionPolicyRetentionWeekly
		return ret
	}).(PolicyVMWorkloadProtectionPolicyRetentionWeeklyOutput)
}

// The number of weekly backups to keep. Possible values are between `1` and `5163`.
func (o PolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyVMWorkloadProtectionPolicyRetentionWeekly) *int {
		if v == nil {
			return nil
		}
		return &v.Count
	}).(pulumi.IntPtrOutput)
}

// The weekday backups to retain. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
func (o PolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutput) Weekdays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyVMWorkloadProtectionPolicyRetentionWeekly) []string {
		if v == nil {
			return nil
		}
		return v.Weekdays
	}).(pulumi.StringArrayOutput)
}

type PolicyVMWorkloadProtectionPolicyRetentionYearly struct {
	// The number of yearly backups to keep. Possible values are between `1` and `99`
	Count int `pulumi:"count"`
	// The retention schedule format type for yearly retention policy. Possible values are `Daily` and `Weekly`.
	FormatType string `pulumi:"formatType"`
	// The monthday backups to retain. Possible values are between `0` and `28`.
	Monthdays []int `pulumi:"monthdays"`
	// The months of the year to retain backups of. Possible values are `January`, `February`, `March`, `April`, `May`, `June`, `July`, `August`, `September`, `October`, `November` and `December`.
	Months []string `pulumi:"months"`
	// The weekday backups to retain. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
	Weekdays []string `pulumi:"weekdays"`
	// The weeks of the month to retain backups of. Possible values are `First`, `Second`, `Third`, `Fourth`, `Last`.
	Weeks []string `pulumi:"weeks"`
}

// PolicyVMWorkloadProtectionPolicyRetentionYearlyInput is an input type that accepts PolicyVMWorkloadProtectionPolicyRetentionYearlyArgs and PolicyVMWorkloadProtectionPolicyRetentionYearlyOutput values.
// You can construct a concrete instance of `PolicyVMWorkloadProtectionPolicyRetentionYearlyInput` via:
//
//	PolicyVMWorkloadProtectionPolicyRetentionYearlyArgs{...}
type PolicyVMWorkloadProtectionPolicyRetentionYearlyInput interface {
	pulumi.Input

	ToPolicyVMWorkloadProtectionPolicyRetentionYearlyOutput() PolicyVMWorkloadProtectionPolicyRetentionYearlyOutput
	ToPolicyVMWorkloadProtectionPolicyRetentionYearlyOutputWithContext(context.Context) PolicyVMWorkloadProtectionPolicyRetentionYearlyOutput
}

type PolicyVMWorkloadProtectionPolicyRetentionYearlyArgs struct {
	// The number of yearly backups to keep. Possible values are between `1` and `99`
	Count pulumi.IntInput `pulumi:"count"`
	// The retention schedule format type for yearly retention policy. Possible values are `Daily` and `Weekly`.
	FormatType pulumi.StringInput `pulumi:"formatType"`
	// The monthday backups to retain. Possible values are between `0` and `28`.
	Monthdays pulumi.IntArrayInput `pulumi:"monthdays"`
	// The months of the year to retain backups of. Possible values are `January`, `February`, `March`, `April`, `May`, `June`, `July`, `August`, `September`, `October`, `November` and `December`.
	Months pulumi.StringArrayInput `pulumi:"months"`
	// The weekday backups to retain. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
	Weekdays pulumi.StringArrayInput `pulumi:"weekdays"`
	// The weeks of the month to retain backups of. Possible values are `First`, `Second`, `Third`, `Fourth`, `Last`.
	Weeks pulumi.StringArrayInput `pulumi:"weeks"`
}

func (PolicyVMWorkloadProtectionPolicyRetentionYearlyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyVMWorkloadProtectionPolicyRetentionYearly)(nil)).Elem()
}

func (i PolicyVMWorkloadProtectionPolicyRetentionYearlyArgs) ToPolicyVMWorkloadProtectionPolicyRetentionYearlyOutput() PolicyVMWorkloadProtectionPolicyRetentionYearlyOutput {
	return i.ToPolicyVMWorkloadProtectionPolicyRetentionYearlyOutputWithContext(context.Background())
}

func (i PolicyVMWorkloadProtectionPolicyRetentionYearlyArgs) ToPolicyVMWorkloadProtectionPolicyRetentionYearlyOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicyRetentionYearlyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMWorkloadProtectionPolicyRetentionYearlyOutput)
}

func (i PolicyVMWorkloadProtectionPolicyRetentionYearlyArgs) ToOutput(ctx context.Context) pulumix.Output[PolicyVMWorkloadProtectionPolicyRetentionYearly] {
	return pulumix.Output[PolicyVMWorkloadProtectionPolicyRetentionYearly]{
		OutputState: i.ToPolicyVMWorkloadProtectionPolicyRetentionYearlyOutputWithContext(ctx).OutputState,
	}
}

func (i PolicyVMWorkloadProtectionPolicyRetentionYearlyArgs) ToPolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutput() PolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutput {
	return i.ToPolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutputWithContext(context.Background())
}

func (i PolicyVMWorkloadProtectionPolicyRetentionYearlyArgs) ToPolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMWorkloadProtectionPolicyRetentionYearlyOutput).ToPolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutputWithContext(ctx)
}

// PolicyVMWorkloadProtectionPolicyRetentionYearlyPtrInput is an input type that accepts PolicyVMWorkloadProtectionPolicyRetentionYearlyArgs, PolicyVMWorkloadProtectionPolicyRetentionYearlyPtr and PolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutput values.
// You can construct a concrete instance of `PolicyVMWorkloadProtectionPolicyRetentionYearlyPtrInput` via:
//
//	        PolicyVMWorkloadProtectionPolicyRetentionYearlyArgs{...}
//
//	or:
//
//	        nil
type PolicyVMWorkloadProtectionPolicyRetentionYearlyPtrInput interface {
	pulumi.Input

	ToPolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutput() PolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutput
	ToPolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutputWithContext(context.Context) PolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutput
}

type policyVMWorkloadProtectionPolicyRetentionYearlyPtrType PolicyVMWorkloadProtectionPolicyRetentionYearlyArgs

func PolicyVMWorkloadProtectionPolicyRetentionYearlyPtr(v *PolicyVMWorkloadProtectionPolicyRetentionYearlyArgs) PolicyVMWorkloadProtectionPolicyRetentionYearlyPtrInput {
	return (*policyVMWorkloadProtectionPolicyRetentionYearlyPtrType)(v)
}

func (*policyVMWorkloadProtectionPolicyRetentionYearlyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyVMWorkloadProtectionPolicyRetentionYearly)(nil)).Elem()
}

func (i *policyVMWorkloadProtectionPolicyRetentionYearlyPtrType) ToPolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutput() PolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutput {
	return i.ToPolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutputWithContext(context.Background())
}

func (i *policyVMWorkloadProtectionPolicyRetentionYearlyPtrType) ToPolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutput)
}

func (i *policyVMWorkloadProtectionPolicyRetentionYearlyPtrType) ToOutput(ctx context.Context) pulumix.Output[*PolicyVMWorkloadProtectionPolicyRetentionYearly] {
	return pulumix.Output[*PolicyVMWorkloadProtectionPolicyRetentionYearly]{
		OutputState: i.ToPolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutputWithContext(ctx).OutputState,
	}
}

type PolicyVMWorkloadProtectionPolicyRetentionYearlyOutput struct{ *pulumi.OutputState }

func (PolicyVMWorkloadProtectionPolicyRetentionYearlyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyVMWorkloadProtectionPolicyRetentionYearly)(nil)).Elem()
}

func (o PolicyVMWorkloadProtectionPolicyRetentionYearlyOutput) ToPolicyVMWorkloadProtectionPolicyRetentionYearlyOutput() PolicyVMWorkloadProtectionPolicyRetentionYearlyOutput {
	return o
}

func (o PolicyVMWorkloadProtectionPolicyRetentionYearlyOutput) ToPolicyVMWorkloadProtectionPolicyRetentionYearlyOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicyRetentionYearlyOutput {
	return o
}

func (o PolicyVMWorkloadProtectionPolicyRetentionYearlyOutput) ToPolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutput() PolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutput {
	return o.ToPolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutputWithContext(context.Background())
}

func (o PolicyVMWorkloadProtectionPolicyRetentionYearlyOutput) ToPolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyVMWorkloadProtectionPolicyRetentionYearly) *PolicyVMWorkloadProtectionPolicyRetentionYearly {
		return &v
	}).(PolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutput)
}

func (o PolicyVMWorkloadProtectionPolicyRetentionYearlyOutput) ToOutput(ctx context.Context) pulumix.Output[PolicyVMWorkloadProtectionPolicyRetentionYearly] {
	return pulumix.Output[PolicyVMWorkloadProtectionPolicyRetentionYearly]{
		OutputState: o.OutputState,
	}
}

// The number of yearly backups to keep. Possible values are between `1` and `99`
func (o PolicyVMWorkloadProtectionPolicyRetentionYearlyOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v PolicyVMWorkloadProtectionPolicyRetentionYearly) int { return v.Count }).(pulumi.IntOutput)
}

// The retention schedule format type for yearly retention policy. Possible values are `Daily` and `Weekly`.
func (o PolicyVMWorkloadProtectionPolicyRetentionYearlyOutput) FormatType() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyVMWorkloadProtectionPolicyRetentionYearly) string { return v.FormatType }).(pulumi.StringOutput)
}

// The monthday backups to retain. Possible values are between `0` and `28`.
func (o PolicyVMWorkloadProtectionPolicyRetentionYearlyOutput) Monthdays() pulumi.IntArrayOutput {
	return o.ApplyT(func(v PolicyVMWorkloadProtectionPolicyRetentionYearly) []int { return v.Monthdays }).(pulumi.IntArrayOutput)
}

// The months of the year to retain backups of. Possible values are `January`, `February`, `March`, `April`, `May`, `June`, `July`, `August`, `September`, `October`, `November` and `December`.
func (o PolicyVMWorkloadProtectionPolicyRetentionYearlyOutput) Months() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyVMWorkloadProtectionPolicyRetentionYearly) []string { return v.Months }).(pulumi.StringArrayOutput)
}

// The weekday backups to retain. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
func (o PolicyVMWorkloadProtectionPolicyRetentionYearlyOutput) Weekdays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyVMWorkloadProtectionPolicyRetentionYearly) []string { return v.Weekdays }).(pulumi.StringArrayOutput)
}

// The weeks of the month to retain backups of. Possible values are `First`, `Second`, `Third`, `Fourth`, `Last`.
func (o PolicyVMWorkloadProtectionPolicyRetentionYearlyOutput) Weeks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyVMWorkloadProtectionPolicyRetentionYearly) []string { return v.Weeks }).(pulumi.StringArrayOutput)
}

type PolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutput struct{ *pulumi.OutputState }

func (PolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyVMWorkloadProtectionPolicyRetentionYearly)(nil)).Elem()
}

func (o PolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutput) ToPolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutput() PolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutput {
	return o
}

func (o PolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutput) ToPolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutput {
	return o
}

func (o PolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PolicyVMWorkloadProtectionPolicyRetentionYearly] {
	return pulumix.Output[*PolicyVMWorkloadProtectionPolicyRetentionYearly]{
		OutputState: o.OutputState,
	}
}

func (o PolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutput) Elem() PolicyVMWorkloadProtectionPolicyRetentionYearlyOutput {
	return o.ApplyT(func(v *PolicyVMWorkloadProtectionPolicyRetentionYearly) PolicyVMWorkloadProtectionPolicyRetentionYearly {
		if v != nil {
			return *v
		}
		var ret PolicyVMWorkloadProtectionPolicyRetentionYearly
		return ret
	}).(PolicyVMWorkloadProtectionPolicyRetentionYearlyOutput)
}

// The number of yearly backups to keep. Possible values are between `1` and `99`
func (o PolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyVMWorkloadProtectionPolicyRetentionYearly) *int {
		if v == nil {
			return nil
		}
		return &v.Count
	}).(pulumi.IntPtrOutput)
}

// The retention schedule format type for yearly retention policy. Possible values are `Daily` and `Weekly`.
func (o PolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutput) FormatType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyVMWorkloadProtectionPolicyRetentionYearly) *string {
		if v == nil {
			return nil
		}
		return &v.FormatType
	}).(pulumi.StringPtrOutput)
}

// The monthday backups to retain. Possible values are between `0` and `28`.
func (o PolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutput) Monthdays() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *PolicyVMWorkloadProtectionPolicyRetentionYearly) []int {
		if v == nil {
			return nil
		}
		return v.Monthdays
	}).(pulumi.IntArrayOutput)
}

// The months of the year to retain backups of. Possible values are `January`, `February`, `March`, `April`, `May`, `June`, `July`, `August`, `September`, `October`, `November` and `December`.
func (o PolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutput) Months() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyVMWorkloadProtectionPolicyRetentionYearly) []string {
		if v == nil {
			return nil
		}
		return v.Months
	}).(pulumi.StringArrayOutput)
}

// The weekday backups to retain. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` or `Saturday`.
func (o PolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutput) Weekdays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyVMWorkloadProtectionPolicyRetentionYearly) []string {
		if v == nil {
			return nil
		}
		return v.Weekdays
	}).(pulumi.StringArrayOutput)
}

// The weeks of the month to retain backups of. Possible values are `First`, `Second`, `Third`, `Fourth`, `Last`.
func (o PolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutput) Weeks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyVMWorkloadProtectionPolicyRetentionYearly) []string {
		if v == nil {
			return nil
		}
		return v.Weeks
	}).(pulumi.StringArrayOutput)
}

type PolicyVMWorkloadProtectionPolicySimpleRetention struct {
	// The count that is used to count retention duration with duration type `Days`. Possible values are between `7` and `35`.
	Count int `pulumi:"count"`
}

// PolicyVMWorkloadProtectionPolicySimpleRetentionInput is an input type that accepts PolicyVMWorkloadProtectionPolicySimpleRetentionArgs and PolicyVMWorkloadProtectionPolicySimpleRetentionOutput values.
// You can construct a concrete instance of `PolicyVMWorkloadProtectionPolicySimpleRetentionInput` via:
//
//	PolicyVMWorkloadProtectionPolicySimpleRetentionArgs{...}
type PolicyVMWorkloadProtectionPolicySimpleRetentionInput interface {
	pulumi.Input

	ToPolicyVMWorkloadProtectionPolicySimpleRetentionOutput() PolicyVMWorkloadProtectionPolicySimpleRetentionOutput
	ToPolicyVMWorkloadProtectionPolicySimpleRetentionOutputWithContext(context.Context) PolicyVMWorkloadProtectionPolicySimpleRetentionOutput
}

type PolicyVMWorkloadProtectionPolicySimpleRetentionArgs struct {
	// The count that is used to count retention duration with duration type `Days`. Possible values are between `7` and `35`.
	Count pulumi.IntInput `pulumi:"count"`
}

func (PolicyVMWorkloadProtectionPolicySimpleRetentionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyVMWorkloadProtectionPolicySimpleRetention)(nil)).Elem()
}

func (i PolicyVMWorkloadProtectionPolicySimpleRetentionArgs) ToPolicyVMWorkloadProtectionPolicySimpleRetentionOutput() PolicyVMWorkloadProtectionPolicySimpleRetentionOutput {
	return i.ToPolicyVMWorkloadProtectionPolicySimpleRetentionOutputWithContext(context.Background())
}

func (i PolicyVMWorkloadProtectionPolicySimpleRetentionArgs) ToPolicyVMWorkloadProtectionPolicySimpleRetentionOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicySimpleRetentionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMWorkloadProtectionPolicySimpleRetentionOutput)
}

func (i PolicyVMWorkloadProtectionPolicySimpleRetentionArgs) ToOutput(ctx context.Context) pulumix.Output[PolicyVMWorkloadProtectionPolicySimpleRetention] {
	return pulumix.Output[PolicyVMWorkloadProtectionPolicySimpleRetention]{
		OutputState: i.ToPolicyVMWorkloadProtectionPolicySimpleRetentionOutputWithContext(ctx).OutputState,
	}
}

func (i PolicyVMWorkloadProtectionPolicySimpleRetentionArgs) ToPolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutput() PolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutput {
	return i.ToPolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutputWithContext(context.Background())
}

func (i PolicyVMWorkloadProtectionPolicySimpleRetentionArgs) ToPolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMWorkloadProtectionPolicySimpleRetentionOutput).ToPolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutputWithContext(ctx)
}

// PolicyVMWorkloadProtectionPolicySimpleRetentionPtrInput is an input type that accepts PolicyVMWorkloadProtectionPolicySimpleRetentionArgs, PolicyVMWorkloadProtectionPolicySimpleRetentionPtr and PolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutput values.
// You can construct a concrete instance of `PolicyVMWorkloadProtectionPolicySimpleRetentionPtrInput` via:
//
//	        PolicyVMWorkloadProtectionPolicySimpleRetentionArgs{...}
//
//	or:
//
//	        nil
type PolicyVMWorkloadProtectionPolicySimpleRetentionPtrInput interface {
	pulumi.Input

	ToPolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutput() PolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutput
	ToPolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutputWithContext(context.Context) PolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutput
}

type policyVMWorkloadProtectionPolicySimpleRetentionPtrType PolicyVMWorkloadProtectionPolicySimpleRetentionArgs

func PolicyVMWorkloadProtectionPolicySimpleRetentionPtr(v *PolicyVMWorkloadProtectionPolicySimpleRetentionArgs) PolicyVMWorkloadProtectionPolicySimpleRetentionPtrInput {
	return (*policyVMWorkloadProtectionPolicySimpleRetentionPtrType)(v)
}

func (*policyVMWorkloadProtectionPolicySimpleRetentionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyVMWorkloadProtectionPolicySimpleRetention)(nil)).Elem()
}

func (i *policyVMWorkloadProtectionPolicySimpleRetentionPtrType) ToPolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutput() PolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutput {
	return i.ToPolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutputWithContext(context.Background())
}

func (i *policyVMWorkloadProtectionPolicySimpleRetentionPtrType) ToPolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutput)
}

func (i *policyVMWorkloadProtectionPolicySimpleRetentionPtrType) ToOutput(ctx context.Context) pulumix.Output[*PolicyVMWorkloadProtectionPolicySimpleRetention] {
	return pulumix.Output[*PolicyVMWorkloadProtectionPolicySimpleRetention]{
		OutputState: i.ToPolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutputWithContext(ctx).OutputState,
	}
}

type PolicyVMWorkloadProtectionPolicySimpleRetentionOutput struct{ *pulumi.OutputState }

func (PolicyVMWorkloadProtectionPolicySimpleRetentionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyVMWorkloadProtectionPolicySimpleRetention)(nil)).Elem()
}

func (o PolicyVMWorkloadProtectionPolicySimpleRetentionOutput) ToPolicyVMWorkloadProtectionPolicySimpleRetentionOutput() PolicyVMWorkloadProtectionPolicySimpleRetentionOutput {
	return o
}

func (o PolicyVMWorkloadProtectionPolicySimpleRetentionOutput) ToPolicyVMWorkloadProtectionPolicySimpleRetentionOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicySimpleRetentionOutput {
	return o
}

func (o PolicyVMWorkloadProtectionPolicySimpleRetentionOutput) ToPolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutput() PolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutput {
	return o.ToPolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutputWithContext(context.Background())
}

func (o PolicyVMWorkloadProtectionPolicySimpleRetentionOutput) ToPolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyVMWorkloadProtectionPolicySimpleRetention) *PolicyVMWorkloadProtectionPolicySimpleRetention {
		return &v
	}).(PolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutput)
}

func (o PolicyVMWorkloadProtectionPolicySimpleRetentionOutput) ToOutput(ctx context.Context) pulumix.Output[PolicyVMWorkloadProtectionPolicySimpleRetention] {
	return pulumix.Output[PolicyVMWorkloadProtectionPolicySimpleRetention]{
		OutputState: o.OutputState,
	}
}

// The count that is used to count retention duration with duration type `Days`. Possible values are between `7` and `35`.
func (o PolicyVMWorkloadProtectionPolicySimpleRetentionOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v PolicyVMWorkloadProtectionPolicySimpleRetention) int { return v.Count }).(pulumi.IntOutput)
}

type PolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutput struct{ *pulumi.OutputState }

func (PolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyVMWorkloadProtectionPolicySimpleRetention)(nil)).Elem()
}

func (o PolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutput) ToPolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutput() PolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutput {
	return o
}

func (o PolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutput) ToPolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutputWithContext(ctx context.Context) PolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutput {
	return o
}

func (o PolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PolicyVMWorkloadProtectionPolicySimpleRetention] {
	return pulumix.Output[*PolicyVMWorkloadProtectionPolicySimpleRetention]{
		OutputState: o.OutputState,
	}
}

func (o PolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutput) Elem() PolicyVMWorkloadProtectionPolicySimpleRetentionOutput {
	return o.ApplyT(func(v *PolicyVMWorkloadProtectionPolicySimpleRetention) PolicyVMWorkloadProtectionPolicySimpleRetention {
		if v != nil {
			return *v
		}
		var ret PolicyVMWorkloadProtectionPolicySimpleRetention
		return ret
	}).(PolicyVMWorkloadProtectionPolicySimpleRetentionOutput)
}

// The count that is used to count retention duration with duration type `Days`. Possible values are between `7` and `35`.
func (o PolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyVMWorkloadProtectionPolicySimpleRetention) *int {
		if v == nil {
			return nil
		}
		return &v.Count
	}).(pulumi.IntPtrOutput)
}

type PolicyVMWorkloadSettings struct {
	// The compression setting for the VM Workload Backup Policy. Defaults to `false`.
	CompressionEnabled *bool `pulumi:"compressionEnabled"`
	// The timezone for the VM Workload Backup Policy. [The possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
	TimeZone string `pulumi:"timeZone"`
}

// PolicyVMWorkloadSettingsInput is an input type that accepts PolicyVMWorkloadSettingsArgs and PolicyVMWorkloadSettingsOutput values.
// You can construct a concrete instance of `PolicyVMWorkloadSettingsInput` via:
//
//	PolicyVMWorkloadSettingsArgs{...}
type PolicyVMWorkloadSettingsInput interface {
	pulumi.Input

	ToPolicyVMWorkloadSettingsOutput() PolicyVMWorkloadSettingsOutput
	ToPolicyVMWorkloadSettingsOutputWithContext(context.Context) PolicyVMWorkloadSettingsOutput
}

type PolicyVMWorkloadSettingsArgs struct {
	// The compression setting for the VM Workload Backup Policy. Defaults to `false`.
	CompressionEnabled pulumi.BoolPtrInput `pulumi:"compressionEnabled"`
	// The timezone for the VM Workload Backup Policy. [The possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
	TimeZone pulumi.StringInput `pulumi:"timeZone"`
}

func (PolicyVMWorkloadSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyVMWorkloadSettings)(nil)).Elem()
}

func (i PolicyVMWorkloadSettingsArgs) ToPolicyVMWorkloadSettingsOutput() PolicyVMWorkloadSettingsOutput {
	return i.ToPolicyVMWorkloadSettingsOutputWithContext(context.Background())
}

func (i PolicyVMWorkloadSettingsArgs) ToPolicyVMWorkloadSettingsOutputWithContext(ctx context.Context) PolicyVMWorkloadSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMWorkloadSettingsOutput)
}

func (i PolicyVMWorkloadSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[PolicyVMWorkloadSettings] {
	return pulumix.Output[PolicyVMWorkloadSettings]{
		OutputState: i.ToPolicyVMWorkloadSettingsOutputWithContext(ctx).OutputState,
	}
}

func (i PolicyVMWorkloadSettingsArgs) ToPolicyVMWorkloadSettingsPtrOutput() PolicyVMWorkloadSettingsPtrOutput {
	return i.ToPolicyVMWorkloadSettingsPtrOutputWithContext(context.Background())
}

func (i PolicyVMWorkloadSettingsArgs) ToPolicyVMWorkloadSettingsPtrOutputWithContext(ctx context.Context) PolicyVMWorkloadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMWorkloadSettingsOutput).ToPolicyVMWorkloadSettingsPtrOutputWithContext(ctx)
}

// PolicyVMWorkloadSettingsPtrInput is an input type that accepts PolicyVMWorkloadSettingsArgs, PolicyVMWorkloadSettingsPtr and PolicyVMWorkloadSettingsPtrOutput values.
// You can construct a concrete instance of `PolicyVMWorkloadSettingsPtrInput` via:
//
//	        PolicyVMWorkloadSettingsArgs{...}
//
//	or:
//
//	        nil
type PolicyVMWorkloadSettingsPtrInput interface {
	pulumi.Input

	ToPolicyVMWorkloadSettingsPtrOutput() PolicyVMWorkloadSettingsPtrOutput
	ToPolicyVMWorkloadSettingsPtrOutputWithContext(context.Context) PolicyVMWorkloadSettingsPtrOutput
}

type policyVMWorkloadSettingsPtrType PolicyVMWorkloadSettingsArgs

func PolicyVMWorkloadSettingsPtr(v *PolicyVMWorkloadSettingsArgs) PolicyVMWorkloadSettingsPtrInput {
	return (*policyVMWorkloadSettingsPtrType)(v)
}

func (*policyVMWorkloadSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyVMWorkloadSettings)(nil)).Elem()
}

func (i *policyVMWorkloadSettingsPtrType) ToPolicyVMWorkloadSettingsPtrOutput() PolicyVMWorkloadSettingsPtrOutput {
	return i.ToPolicyVMWorkloadSettingsPtrOutputWithContext(context.Background())
}

func (i *policyVMWorkloadSettingsPtrType) ToPolicyVMWorkloadSettingsPtrOutputWithContext(ctx context.Context) PolicyVMWorkloadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVMWorkloadSettingsPtrOutput)
}

func (i *policyVMWorkloadSettingsPtrType) ToOutput(ctx context.Context) pulumix.Output[*PolicyVMWorkloadSettings] {
	return pulumix.Output[*PolicyVMWorkloadSettings]{
		OutputState: i.ToPolicyVMWorkloadSettingsPtrOutputWithContext(ctx).OutputState,
	}
}

type PolicyVMWorkloadSettingsOutput struct{ *pulumi.OutputState }

func (PolicyVMWorkloadSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyVMWorkloadSettings)(nil)).Elem()
}

func (o PolicyVMWorkloadSettingsOutput) ToPolicyVMWorkloadSettingsOutput() PolicyVMWorkloadSettingsOutput {
	return o
}

func (o PolicyVMWorkloadSettingsOutput) ToPolicyVMWorkloadSettingsOutputWithContext(ctx context.Context) PolicyVMWorkloadSettingsOutput {
	return o
}

func (o PolicyVMWorkloadSettingsOutput) ToPolicyVMWorkloadSettingsPtrOutput() PolicyVMWorkloadSettingsPtrOutput {
	return o.ToPolicyVMWorkloadSettingsPtrOutputWithContext(context.Background())
}

func (o PolicyVMWorkloadSettingsOutput) ToPolicyVMWorkloadSettingsPtrOutputWithContext(ctx context.Context) PolicyVMWorkloadSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyVMWorkloadSettings) *PolicyVMWorkloadSettings {
		return &v
	}).(PolicyVMWorkloadSettingsPtrOutput)
}

func (o PolicyVMWorkloadSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[PolicyVMWorkloadSettings] {
	return pulumix.Output[PolicyVMWorkloadSettings]{
		OutputState: o.OutputState,
	}
}

// The compression setting for the VM Workload Backup Policy. Defaults to `false`.
func (o PolicyVMWorkloadSettingsOutput) CompressionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyVMWorkloadSettings) *bool { return v.CompressionEnabled }).(pulumi.BoolPtrOutput)
}

// The timezone for the VM Workload Backup Policy. [The possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
func (o PolicyVMWorkloadSettingsOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyVMWorkloadSettings) string { return v.TimeZone }).(pulumi.StringOutput)
}

type PolicyVMWorkloadSettingsPtrOutput struct{ *pulumi.OutputState }

func (PolicyVMWorkloadSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyVMWorkloadSettings)(nil)).Elem()
}

func (o PolicyVMWorkloadSettingsPtrOutput) ToPolicyVMWorkloadSettingsPtrOutput() PolicyVMWorkloadSettingsPtrOutput {
	return o
}

func (o PolicyVMWorkloadSettingsPtrOutput) ToPolicyVMWorkloadSettingsPtrOutputWithContext(ctx context.Context) PolicyVMWorkloadSettingsPtrOutput {
	return o
}

func (o PolicyVMWorkloadSettingsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PolicyVMWorkloadSettings] {
	return pulumix.Output[*PolicyVMWorkloadSettings]{
		OutputState: o.OutputState,
	}
}

func (o PolicyVMWorkloadSettingsPtrOutput) Elem() PolicyVMWorkloadSettingsOutput {
	return o.ApplyT(func(v *PolicyVMWorkloadSettings) PolicyVMWorkloadSettings {
		if v != nil {
			return *v
		}
		var ret PolicyVMWorkloadSettings
		return ret
	}).(PolicyVMWorkloadSettingsOutput)
}

// The compression setting for the VM Workload Backup Policy. Defaults to `false`.
func (o PolicyVMWorkloadSettingsPtrOutput) CompressionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PolicyVMWorkloadSettings) *bool {
		if v == nil {
			return nil
		}
		return v.CompressionEnabled
	}).(pulumi.BoolPtrOutput)
}

// The timezone for the VM Workload Backup Policy. [The possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
func (o PolicyVMWorkloadSettingsPtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyVMWorkloadSettings) *string {
		if v == nil {
			return nil
		}
		return &v.TimeZone
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyFileShareBackupInput)(nil)).Elem(), PolicyFileShareBackupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyFileShareBackupPtrInput)(nil)).Elem(), PolicyFileShareBackupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyFileShareBackupHourlyInput)(nil)).Elem(), PolicyFileShareBackupHourlyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyFileShareBackupHourlyPtrInput)(nil)).Elem(), PolicyFileShareBackupHourlyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyFileShareRetentionDailyInput)(nil)).Elem(), PolicyFileShareRetentionDailyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyFileShareRetentionDailyPtrInput)(nil)).Elem(), PolicyFileShareRetentionDailyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyFileShareRetentionMonthlyInput)(nil)).Elem(), PolicyFileShareRetentionMonthlyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyFileShareRetentionMonthlyPtrInput)(nil)).Elem(), PolicyFileShareRetentionMonthlyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyFileShareRetentionWeeklyInput)(nil)).Elem(), PolicyFileShareRetentionWeeklyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyFileShareRetentionWeeklyPtrInput)(nil)).Elem(), PolicyFileShareRetentionWeeklyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyFileShareRetentionYearlyInput)(nil)).Elem(), PolicyFileShareRetentionYearlyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyFileShareRetentionYearlyPtrInput)(nil)).Elem(), PolicyFileShareRetentionYearlyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyVMBackupInput)(nil)).Elem(), PolicyVMBackupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyVMBackupPtrInput)(nil)).Elem(), PolicyVMBackupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyVMInstantRestoreResourceGroupInput)(nil)).Elem(), PolicyVMInstantRestoreResourceGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyVMInstantRestoreResourceGroupPtrInput)(nil)).Elem(), PolicyVMInstantRestoreResourceGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyVMRetentionDailyInput)(nil)).Elem(), PolicyVMRetentionDailyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyVMRetentionDailyPtrInput)(nil)).Elem(), PolicyVMRetentionDailyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyVMRetentionMonthlyInput)(nil)).Elem(), PolicyVMRetentionMonthlyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyVMRetentionMonthlyPtrInput)(nil)).Elem(), PolicyVMRetentionMonthlyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyVMRetentionWeeklyInput)(nil)).Elem(), PolicyVMRetentionWeeklyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyVMRetentionWeeklyPtrInput)(nil)).Elem(), PolicyVMRetentionWeeklyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyVMRetentionYearlyInput)(nil)).Elem(), PolicyVMRetentionYearlyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyVMRetentionYearlyPtrInput)(nil)).Elem(), PolicyVMRetentionYearlyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyVMWorkloadProtectionPolicyInput)(nil)).Elem(), PolicyVMWorkloadProtectionPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyVMWorkloadProtectionPolicyArrayInput)(nil)).Elem(), PolicyVMWorkloadProtectionPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyVMWorkloadProtectionPolicyBackupInput)(nil)).Elem(), PolicyVMWorkloadProtectionPolicyBackupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyVMWorkloadProtectionPolicyRetentionDailyInput)(nil)).Elem(), PolicyVMWorkloadProtectionPolicyRetentionDailyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyVMWorkloadProtectionPolicyRetentionDailyPtrInput)(nil)).Elem(), PolicyVMWorkloadProtectionPolicyRetentionDailyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyVMWorkloadProtectionPolicyRetentionMonthlyInput)(nil)).Elem(), PolicyVMWorkloadProtectionPolicyRetentionMonthlyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrInput)(nil)).Elem(), PolicyVMWorkloadProtectionPolicyRetentionMonthlyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyVMWorkloadProtectionPolicyRetentionWeeklyInput)(nil)).Elem(), PolicyVMWorkloadProtectionPolicyRetentionWeeklyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrInput)(nil)).Elem(), PolicyVMWorkloadProtectionPolicyRetentionWeeklyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyVMWorkloadProtectionPolicyRetentionYearlyInput)(nil)).Elem(), PolicyVMWorkloadProtectionPolicyRetentionYearlyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyVMWorkloadProtectionPolicyRetentionYearlyPtrInput)(nil)).Elem(), PolicyVMWorkloadProtectionPolicyRetentionYearlyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyVMWorkloadProtectionPolicySimpleRetentionInput)(nil)).Elem(), PolicyVMWorkloadProtectionPolicySimpleRetentionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyVMWorkloadProtectionPolicySimpleRetentionPtrInput)(nil)).Elem(), PolicyVMWorkloadProtectionPolicySimpleRetentionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyVMWorkloadSettingsInput)(nil)).Elem(), PolicyVMWorkloadSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyVMWorkloadSettingsPtrInput)(nil)).Elem(), PolicyVMWorkloadSettingsArgs{})
	pulumi.RegisterOutputType(PolicyFileShareBackupOutput{})
	pulumi.RegisterOutputType(PolicyFileShareBackupPtrOutput{})
	pulumi.RegisterOutputType(PolicyFileShareBackupHourlyOutput{})
	pulumi.RegisterOutputType(PolicyFileShareBackupHourlyPtrOutput{})
	pulumi.RegisterOutputType(PolicyFileShareRetentionDailyOutput{})
	pulumi.RegisterOutputType(PolicyFileShareRetentionDailyPtrOutput{})
	pulumi.RegisterOutputType(PolicyFileShareRetentionMonthlyOutput{})
	pulumi.RegisterOutputType(PolicyFileShareRetentionMonthlyPtrOutput{})
	pulumi.RegisterOutputType(PolicyFileShareRetentionWeeklyOutput{})
	pulumi.RegisterOutputType(PolicyFileShareRetentionWeeklyPtrOutput{})
	pulumi.RegisterOutputType(PolicyFileShareRetentionYearlyOutput{})
	pulumi.RegisterOutputType(PolicyFileShareRetentionYearlyPtrOutput{})
	pulumi.RegisterOutputType(PolicyVMBackupOutput{})
	pulumi.RegisterOutputType(PolicyVMBackupPtrOutput{})
	pulumi.RegisterOutputType(PolicyVMInstantRestoreResourceGroupOutput{})
	pulumi.RegisterOutputType(PolicyVMInstantRestoreResourceGroupPtrOutput{})
	pulumi.RegisterOutputType(PolicyVMRetentionDailyOutput{})
	pulumi.RegisterOutputType(PolicyVMRetentionDailyPtrOutput{})
	pulumi.RegisterOutputType(PolicyVMRetentionMonthlyOutput{})
	pulumi.RegisterOutputType(PolicyVMRetentionMonthlyPtrOutput{})
	pulumi.RegisterOutputType(PolicyVMRetentionWeeklyOutput{})
	pulumi.RegisterOutputType(PolicyVMRetentionWeeklyPtrOutput{})
	pulumi.RegisterOutputType(PolicyVMRetentionYearlyOutput{})
	pulumi.RegisterOutputType(PolicyVMRetentionYearlyPtrOutput{})
	pulumi.RegisterOutputType(PolicyVMWorkloadProtectionPolicyOutput{})
	pulumi.RegisterOutputType(PolicyVMWorkloadProtectionPolicyArrayOutput{})
	pulumi.RegisterOutputType(PolicyVMWorkloadProtectionPolicyBackupOutput{})
	pulumi.RegisterOutputType(PolicyVMWorkloadProtectionPolicyRetentionDailyOutput{})
	pulumi.RegisterOutputType(PolicyVMWorkloadProtectionPolicyRetentionDailyPtrOutput{})
	pulumi.RegisterOutputType(PolicyVMWorkloadProtectionPolicyRetentionMonthlyOutput{})
	pulumi.RegisterOutputType(PolicyVMWorkloadProtectionPolicyRetentionMonthlyPtrOutput{})
	pulumi.RegisterOutputType(PolicyVMWorkloadProtectionPolicyRetentionWeeklyOutput{})
	pulumi.RegisterOutputType(PolicyVMWorkloadProtectionPolicyRetentionWeeklyPtrOutput{})
	pulumi.RegisterOutputType(PolicyVMWorkloadProtectionPolicyRetentionYearlyOutput{})
	pulumi.RegisterOutputType(PolicyVMWorkloadProtectionPolicyRetentionYearlyPtrOutput{})
	pulumi.RegisterOutputType(PolicyVMWorkloadProtectionPolicySimpleRetentionOutput{})
	pulumi.RegisterOutputType(PolicyVMWorkloadProtectionPolicySimpleRetentionPtrOutput{})
	pulumi.RegisterOutputType(PolicyVMWorkloadSettingsOutput{})
	pulumi.RegisterOutputType(PolicyVMWorkloadSettingsPtrOutput{})
}
