// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package postgresql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allows you to set a user or group as the AD administrator for a PostgreSQL Flexible Server.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/postgresql"
//	"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := core.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			exampleServicePrincipal, err := azuread.LookupServicePrincipal(ctx, &azuread.LookupServicePrincipalArgs{
//				ObjectId: pulumi.StringRef(current.ObjectId),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleFlexibleServer, err := postgresql.NewFlexibleServer(ctx, "exampleFlexibleServer", &postgresql.FlexibleServerArgs{
//				ResourceGroupName:     exampleResourceGroup.Name,
//				Location:              exampleResourceGroup.Location,
//				AdministratorLogin:    pulumi.String("adminTerraform"),
//				AdministratorPassword: pulumi.String("QAZwsx123"),
//				StorageMb:             pulumi.Int(32768),
//				Version:               pulumi.String("12"),
//				SkuName:               pulumi.String("GP_Standard_D2s_v3"),
//				Zone:                  pulumi.String("2"),
//				Authentication: &postgresql.FlexibleServerAuthenticationArgs{
//					ActiveDirectoryAuthEnabled: pulumi.Bool(true),
//					TenantId:                   *pulumi.String(current.TenantId),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = postgresql.NewFlexibleServerActiveDirectoryAdministrator(ctx, "exampleFlexibleServerActiveDirectoryAdministrator", &postgresql.FlexibleServerActiveDirectoryAdministratorArgs{
//				ServerName:        exampleFlexibleServer.Name,
//				ResourceGroupName: exampleResourceGroup.Name,
//				TenantId:          *pulumi.String(current.TenantId),
//				ObjectId:          *pulumi.String(exampleServicePrincipal.ObjectId),
//				PrincipalName:     *pulumi.String(exampleServicePrincipal.DisplayName),
//				PrincipalType:     pulumi.String("ServicePrincipal"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// A PostgreSQL Flexible Server Active Directory Administrator can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:postgresql/flexibleServerActiveDirectoryAdministrator:FlexibleServerActiveDirectoryAdministrator example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/myserver/administrators/objectId
//
// ```
type FlexibleServerActiveDirectoryAdministrator struct {
	pulumi.CustomResourceState

	// The object ID of a user, service principal or security group in the Azure Active Directory tenant set as the Flexible Server Admin. Changing this forces a new resource to be created.
	ObjectId pulumi.StringOutput `pulumi:"objectId"`
	// The name of Azure Active Directory principal. Changing this forces a new resource to be created.
	PrincipalName pulumi.StringOutput `pulumi:"principalName"`
	// The type of Azure Active Directory principal. Possible values are `Group`, `ServicePrincipal` and `User`. Changing this forces a new resource to be created.
	PrincipalType pulumi.StringOutput `pulumi:"principalType"`
	// The name of the resource group for the PostgreSQL Server. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The name of the PostgreSQL Flexible Server on which to set the administrator. Changing this forces a new resource to be created.
	ServerName pulumi.StringOutput `pulumi:"serverName"`
	// The Azure Tenant ID. Changing this forces a new resource to be created.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewFlexibleServerActiveDirectoryAdministrator registers a new resource with the given unique name, arguments, and options.
func NewFlexibleServerActiveDirectoryAdministrator(ctx *pulumi.Context,
	name string, args *FlexibleServerActiveDirectoryAdministratorArgs, opts ...pulumi.ResourceOption) (*FlexibleServerActiveDirectoryAdministrator, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ObjectId == nil {
		return nil, errors.New("invalid value for required argument 'ObjectId'")
	}
	if args.PrincipalName == nil {
		return nil, errors.New("invalid value for required argument 'PrincipalName'")
	}
	if args.PrincipalType == nil {
		return nil, errors.New("invalid value for required argument 'PrincipalType'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServerName == nil {
		return nil, errors.New("invalid value for required argument 'ServerName'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FlexibleServerActiveDirectoryAdministrator
	err := ctx.RegisterResource("azure:postgresql/flexibleServerActiveDirectoryAdministrator:FlexibleServerActiveDirectoryAdministrator", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFlexibleServerActiveDirectoryAdministrator gets an existing FlexibleServerActiveDirectoryAdministrator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFlexibleServerActiveDirectoryAdministrator(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FlexibleServerActiveDirectoryAdministratorState, opts ...pulumi.ResourceOption) (*FlexibleServerActiveDirectoryAdministrator, error) {
	var resource FlexibleServerActiveDirectoryAdministrator
	err := ctx.ReadResource("azure:postgresql/flexibleServerActiveDirectoryAdministrator:FlexibleServerActiveDirectoryAdministrator", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FlexibleServerActiveDirectoryAdministrator resources.
type flexibleServerActiveDirectoryAdministratorState struct {
	// The object ID of a user, service principal or security group in the Azure Active Directory tenant set as the Flexible Server Admin. Changing this forces a new resource to be created.
	ObjectId *string `pulumi:"objectId"`
	// The name of Azure Active Directory principal. Changing this forces a new resource to be created.
	PrincipalName *string `pulumi:"principalName"`
	// The type of Azure Active Directory principal. Possible values are `Group`, `ServicePrincipal` and `User`. Changing this forces a new resource to be created.
	PrincipalType *string `pulumi:"principalType"`
	// The name of the resource group for the PostgreSQL Server. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The name of the PostgreSQL Flexible Server on which to set the administrator. Changing this forces a new resource to be created.
	ServerName *string `pulumi:"serverName"`
	// The Azure Tenant ID. Changing this forces a new resource to be created.
	TenantId *string `pulumi:"tenantId"`
}

type FlexibleServerActiveDirectoryAdministratorState struct {
	// The object ID of a user, service principal or security group in the Azure Active Directory tenant set as the Flexible Server Admin. Changing this forces a new resource to be created.
	ObjectId pulumi.StringPtrInput
	// The name of Azure Active Directory principal. Changing this forces a new resource to be created.
	PrincipalName pulumi.StringPtrInput
	// The type of Azure Active Directory principal. Possible values are `Group`, `ServicePrincipal` and `User`. Changing this forces a new resource to be created.
	PrincipalType pulumi.StringPtrInput
	// The name of the resource group for the PostgreSQL Server. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The name of the PostgreSQL Flexible Server on which to set the administrator. Changing this forces a new resource to be created.
	ServerName pulumi.StringPtrInput
	// The Azure Tenant ID. Changing this forces a new resource to be created.
	TenantId pulumi.StringPtrInput
}

func (FlexibleServerActiveDirectoryAdministratorState) ElementType() reflect.Type {
	return reflect.TypeOf((*flexibleServerActiveDirectoryAdministratorState)(nil)).Elem()
}

type flexibleServerActiveDirectoryAdministratorArgs struct {
	// The object ID of a user, service principal or security group in the Azure Active Directory tenant set as the Flexible Server Admin. Changing this forces a new resource to be created.
	ObjectId string `pulumi:"objectId"`
	// The name of Azure Active Directory principal. Changing this forces a new resource to be created.
	PrincipalName string `pulumi:"principalName"`
	// The type of Azure Active Directory principal. Possible values are `Group`, `ServicePrincipal` and `User`. Changing this forces a new resource to be created.
	PrincipalType string `pulumi:"principalType"`
	// The name of the resource group for the PostgreSQL Server. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the PostgreSQL Flexible Server on which to set the administrator. Changing this forces a new resource to be created.
	ServerName string `pulumi:"serverName"`
	// The Azure Tenant ID. Changing this forces a new resource to be created.
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a FlexibleServerActiveDirectoryAdministrator resource.
type FlexibleServerActiveDirectoryAdministratorArgs struct {
	// The object ID of a user, service principal or security group in the Azure Active Directory tenant set as the Flexible Server Admin. Changing this forces a new resource to be created.
	ObjectId pulumi.StringInput
	// The name of Azure Active Directory principal. Changing this forces a new resource to be created.
	PrincipalName pulumi.StringInput
	// The type of Azure Active Directory principal. Possible values are `Group`, `ServicePrincipal` and `User`. Changing this forces a new resource to be created.
	PrincipalType pulumi.StringInput
	// The name of the resource group for the PostgreSQL Server. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// The name of the PostgreSQL Flexible Server on which to set the administrator. Changing this forces a new resource to be created.
	ServerName pulumi.StringInput
	// The Azure Tenant ID. Changing this forces a new resource to be created.
	TenantId pulumi.StringInput
}

func (FlexibleServerActiveDirectoryAdministratorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*flexibleServerActiveDirectoryAdministratorArgs)(nil)).Elem()
}

type FlexibleServerActiveDirectoryAdministratorInput interface {
	pulumi.Input

	ToFlexibleServerActiveDirectoryAdministratorOutput() FlexibleServerActiveDirectoryAdministratorOutput
	ToFlexibleServerActiveDirectoryAdministratorOutputWithContext(ctx context.Context) FlexibleServerActiveDirectoryAdministratorOutput
}

func (*FlexibleServerActiveDirectoryAdministrator) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexibleServerActiveDirectoryAdministrator)(nil)).Elem()
}

func (i *FlexibleServerActiveDirectoryAdministrator) ToFlexibleServerActiveDirectoryAdministratorOutput() FlexibleServerActiveDirectoryAdministratorOutput {
	return i.ToFlexibleServerActiveDirectoryAdministratorOutputWithContext(context.Background())
}

func (i *FlexibleServerActiveDirectoryAdministrator) ToFlexibleServerActiveDirectoryAdministratorOutputWithContext(ctx context.Context) FlexibleServerActiveDirectoryAdministratorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleServerActiveDirectoryAdministratorOutput)
}

// FlexibleServerActiveDirectoryAdministratorArrayInput is an input type that accepts FlexibleServerActiveDirectoryAdministratorArray and FlexibleServerActiveDirectoryAdministratorArrayOutput values.
// You can construct a concrete instance of `FlexibleServerActiveDirectoryAdministratorArrayInput` via:
//
//	FlexibleServerActiveDirectoryAdministratorArray{ FlexibleServerActiveDirectoryAdministratorArgs{...} }
type FlexibleServerActiveDirectoryAdministratorArrayInput interface {
	pulumi.Input

	ToFlexibleServerActiveDirectoryAdministratorArrayOutput() FlexibleServerActiveDirectoryAdministratorArrayOutput
	ToFlexibleServerActiveDirectoryAdministratorArrayOutputWithContext(context.Context) FlexibleServerActiveDirectoryAdministratorArrayOutput
}

type FlexibleServerActiveDirectoryAdministratorArray []FlexibleServerActiveDirectoryAdministratorInput

func (FlexibleServerActiveDirectoryAdministratorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlexibleServerActiveDirectoryAdministrator)(nil)).Elem()
}

func (i FlexibleServerActiveDirectoryAdministratorArray) ToFlexibleServerActiveDirectoryAdministratorArrayOutput() FlexibleServerActiveDirectoryAdministratorArrayOutput {
	return i.ToFlexibleServerActiveDirectoryAdministratorArrayOutputWithContext(context.Background())
}

func (i FlexibleServerActiveDirectoryAdministratorArray) ToFlexibleServerActiveDirectoryAdministratorArrayOutputWithContext(ctx context.Context) FlexibleServerActiveDirectoryAdministratorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleServerActiveDirectoryAdministratorArrayOutput)
}

// FlexibleServerActiveDirectoryAdministratorMapInput is an input type that accepts FlexibleServerActiveDirectoryAdministratorMap and FlexibleServerActiveDirectoryAdministratorMapOutput values.
// You can construct a concrete instance of `FlexibleServerActiveDirectoryAdministratorMapInput` via:
//
//	FlexibleServerActiveDirectoryAdministratorMap{ "key": FlexibleServerActiveDirectoryAdministratorArgs{...} }
type FlexibleServerActiveDirectoryAdministratorMapInput interface {
	pulumi.Input

	ToFlexibleServerActiveDirectoryAdministratorMapOutput() FlexibleServerActiveDirectoryAdministratorMapOutput
	ToFlexibleServerActiveDirectoryAdministratorMapOutputWithContext(context.Context) FlexibleServerActiveDirectoryAdministratorMapOutput
}

type FlexibleServerActiveDirectoryAdministratorMap map[string]FlexibleServerActiveDirectoryAdministratorInput

func (FlexibleServerActiveDirectoryAdministratorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlexibleServerActiveDirectoryAdministrator)(nil)).Elem()
}

func (i FlexibleServerActiveDirectoryAdministratorMap) ToFlexibleServerActiveDirectoryAdministratorMapOutput() FlexibleServerActiveDirectoryAdministratorMapOutput {
	return i.ToFlexibleServerActiveDirectoryAdministratorMapOutputWithContext(context.Background())
}

func (i FlexibleServerActiveDirectoryAdministratorMap) ToFlexibleServerActiveDirectoryAdministratorMapOutputWithContext(ctx context.Context) FlexibleServerActiveDirectoryAdministratorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleServerActiveDirectoryAdministratorMapOutput)
}

type FlexibleServerActiveDirectoryAdministratorOutput struct{ *pulumi.OutputState }

func (FlexibleServerActiveDirectoryAdministratorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexibleServerActiveDirectoryAdministrator)(nil)).Elem()
}

func (o FlexibleServerActiveDirectoryAdministratorOutput) ToFlexibleServerActiveDirectoryAdministratorOutput() FlexibleServerActiveDirectoryAdministratorOutput {
	return o
}

func (o FlexibleServerActiveDirectoryAdministratorOutput) ToFlexibleServerActiveDirectoryAdministratorOutputWithContext(ctx context.Context) FlexibleServerActiveDirectoryAdministratorOutput {
	return o
}

// The object ID of a user, service principal or security group in the Azure Active Directory tenant set as the Flexible Server Admin. Changing this forces a new resource to be created.
func (o FlexibleServerActiveDirectoryAdministratorOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleServerActiveDirectoryAdministrator) pulumi.StringOutput { return v.ObjectId }).(pulumi.StringOutput)
}

// The name of Azure Active Directory principal. Changing this forces a new resource to be created.
func (o FlexibleServerActiveDirectoryAdministratorOutput) PrincipalName() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleServerActiveDirectoryAdministrator) pulumi.StringOutput { return v.PrincipalName }).(pulumi.StringOutput)
}

// The type of Azure Active Directory principal. Possible values are `Group`, `ServicePrincipal` and `User`. Changing this forces a new resource to be created.
func (o FlexibleServerActiveDirectoryAdministratorOutput) PrincipalType() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleServerActiveDirectoryAdministrator) pulumi.StringOutput { return v.PrincipalType }).(pulumi.StringOutput)
}

// The name of the resource group for the PostgreSQL Server. Changing this forces a new resource to be created.
func (o FlexibleServerActiveDirectoryAdministratorOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleServerActiveDirectoryAdministrator) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The name of the PostgreSQL Flexible Server on which to set the administrator. Changing this forces a new resource to be created.
func (o FlexibleServerActiveDirectoryAdministratorOutput) ServerName() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleServerActiveDirectoryAdministrator) pulumi.StringOutput { return v.ServerName }).(pulumi.StringOutput)
}

// The Azure Tenant ID. Changing this forces a new resource to be created.
func (o FlexibleServerActiveDirectoryAdministratorOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleServerActiveDirectoryAdministrator) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type FlexibleServerActiveDirectoryAdministratorArrayOutput struct{ *pulumi.OutputState }

func (FlexibleServerActiveDirectoryAdministratorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlexibleServerActiveDirectoryAdministrator)(nil)).Elem()
}

func (o FlexibleServerActiveDirectoryAdministratorArrayOutput) ToFlexibleServerActiveDirectoryAdministratorArrayOutput() FlexibleServerActiveDirectoryAdministratorArrayOutput {
	return o
}

func (o FlexibleServerActiveDirectoryAdministratorArrayOutput) ToFlexibleServerActiveDirectoryAdministratorArrayOutputWithContext(ctx context.Context) FlexibleServerActiveDirectoryAdministratorArrayOutput {
	return o
}

func (o FlexibleServerActiveDirectoryAdministratorArrayOutput) Index(i pulumi.IntInput) FlexibleServerActiveDirectoryAdministratorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FlexibleServerActiveDirectoryAdministrator {
		return vs[0].([]*FlexibleServerActiveDirectoryAdministrator)[vs[1].(int)]
	}).(FlexibleServerActiveDirectoryAdministratorOutput)
}

type FlexibleServerActiveDirectoryAdministratorMapOutput struct{ *pulumi.OutputState }

func (FlexibleServerActiveDirectoryAdministratorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlexibleServerActiveDirectoryAdministrator)(nil)).Elem()
}

func (o FlexibleServerActiveDirectoryAdministratorMapOutput) ToFlexibleServerActiveDirectoryAdministratorMapOutput() FlexibleServerActiveDirectoryAdministratorMapOutput {
	return o
}

func (o FlexibleServerActiveDirectoryAdministratorMapOutput) ToFlexibleServerActiveDirectoryAdministratorMapOutputWithContext(ctx context.Context) FlexibleServerActiveDirectoryAdministratorMapOutput {
	return o
}

func (o FlexibleServerActiveDirectoryAdministratorMapOutput) MapIndex(k pulumi.StringInput) FlexibleServerActiveDirectoryAdministratorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FlexibleServerActiveDirectoryAdministrator {
		return vs[0].(map[string]*FlexibleServerActiveDirectoryAdministrator)[vs[1].(string)]
	}).(FlexibleServerActiveDirectoryAdministratorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleServerActiveDirectoryAdministratorInput)(nil)).Elem(), &FlexibleServerActiveDirectoryAdministrator{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleServerActiveDirectoryAdministratorArrayInput)(nil)).Elem(), FlexibleServerActiveDirectoryAdministratorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleServerActiveDirectoryAdministratorMapInput)(nil)).Elem(), FlexibleServerActiveDirectoryAdministratorMap{})
	pulumi.RegisterOutputType(FlexibleServerActiveDirectoryAdministratorOutput{})
	pulumi.RegisterOutputType(FlexibleServerActiveDirectoryAdministratorArrayOutput{})
	pulumi.RegisterOutputType(FlexibleServerActiveDirectoryAdministratorMapOutput{})
}
