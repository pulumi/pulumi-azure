// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package postgresql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allows you to create a Virtual Endpoint associated with a Postgres Flexible Replica.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/postgresql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resources"),
//				Location: pulumi.String("East US"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleFlexibleServer, err := postgresql.NewFlexibleServer(ctx, "example", &postgresql.FlexibleServerArgs{
//				Name:                       pulumi.String("example"),
//				ResourceGroupName:          example.Name,
//				Location:                   example.Location,
//				Version:                    pulumi.String("16"),
//				PublicNetworkAccessEnabled: pulumi.Bool(false),
//				AdministratorLogin:         pulumi.String("psqladmin"),
//				AdministratorPassword:      pulumi.String("H@Sh1CoR3!"),
//				Zone:                       pulumi.String("1"),
//				StorageMb:                  pulumi.Int(32768),
//				StorageTier:                pulumi.String("P30"),
//				SkuName:                    pulumi.String("GP_Standard_D2ads_v5"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleReplica, err := postgresql.NewFlexibleServer(ctx, "example_replica", &postgresql.FlexibleServerArgs{
//				Name:                       pulumi.String("example-replica"),
//				ResourceGroupName:          exampleFlexibleServer.ResourceGroupName,
//				Location:                   exampleFlexibleServer.Location,
//				CreateMode:                 pulumi.String("Replica"),
//				SourceServerId:             exampleFlexibleServer.ID(),
//				Version:                    pulumi.String("16"),
//				PublicNetworkAccessEnabled: pulumi.Bool(false),
//				Zone:                       pulumi.String("1"),
//				StorageMb:                  pulumi.Int(32768),
//				StorageTier:                pulumi.String("P30"),
//				SkuName:                    pulumi.String("GP_Standard_D2ads_v5"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = postgresql.NewFlexibleServerVirtualEndpoint(ctx, "example", &postgresql.FlexibleServerVirtualEndpointArgs{
//				Name:            pulumi.String("example-endpoint-1"),
//				SourceServerId:  exampleFlexibleServer.ID(),
//				ReplicaServerId: exampleReplica.ID(),
//				Type:            pulumi.String("ReadWrite"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// > **Note:** If creating multiple replicas, an error can occur if virtual endpoints are created before all replicas have been completed. To avoid this error, use a `dependsOn` property on `postgresql.FlexibleServerVirtualEndpoint` that references all Postgres Flexible Server Replicas.
//
// ## Import
//
// A PostgreSQL Flexible Virtual Endpoint can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:postgresql/flexibleServerVirtualEndpoint:FlexibleServerVirtualEndpoint example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DBforPostgreSQL/flexibleServers/server1/virtualEndpoints/endpoint1
// ```
type FlexibleServerVirtualEndpoint struct {
	pulumi.CustomResourceState

	// The name of the Virtual Endpoint
	Name pulumi.StringOutput `pulumi:"name"`
	// The Resource ID of the *Replica* Postgres Flexible Server this should be associated with
	ReplicaServerId pulumi.StringOutput `pulumi:"replicaServerId"`
	// The Resource ID of the *Source* Postgres Flexible Server this should be associated with.
	SourceServerId pulumi.StringOutput `pulumi:"sourceServerId"`
	// The type of Virtual Endpoint. Currently only `ReadWrite` is supported.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewFlexibleServerVirtualEndpoint registers a new resource with the given unique name, arguments, and options.
func NewFlexibleServerVirtualEndpoint(ctx *pulumi.Context,
	name string, args *FlexibleServerVirtualEndpointArgs, opts ...pulumi.ResourceOption) (*FlexibleServerVirtualEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ReplicaServerId == nil {
		return nil, errors.New("invalid value for required argument 'ReplicaServerId'")
	}
	if args.SourceServerId == nil {
		return nil, errors.New("invalid value for required argument 'SourceServerId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FlexibleServerVirtualEndpoint
	err := ctx.RegisterResource("azure:postgresql/flexibleServerVirtualEndpoint:FlexibleServerVirtualEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFlexibleServerVirtualEndpoint gets an existing FlexibleServerVirtualEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFlexibleServerVirtualEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FlexibleServerVirtualEndpointState, opts ...pulumi.ResourceOption) (*FlexibleServerVirtualEndpoint, error) {
	var resource FlexibleServerVirtualEndpoint
	err := ctx.ReadResource("azure:postgresql/flexibleServerVirtualEndpoint:FlexibleServerVirtualEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FlexibleServerVirtualEndpoint resources.
type flexibleServerVirtualEndpointState struct {
	// The name of the Virtual Endpoint
	Name *string `pulumi:"name"`
	// The Resource ID of the *Replica* Postgres Flexible Server this should be associated with
	ReplicaServerId *string `pulumi:"replicaServerId"`
	// The Resource ID of the *Source* Postgres Flexible Server this should be associated with.
	SourceServerId *string `pulumi:"sourceServerId"`
	// The type of Virtual Endpoint. Currently only `ReadWrite` is supported.
	Type *string `pulumi:"type"`
}

type FlexibleServerVirtualEndpointState struct {
	// The name of the Virtual Endpoint
	Name pulumi.StringPtrInput
	// The Resource ID of the *Replica* Postgres Flexible Server this should be associated with
	ReplicaServerId pulumi.StringPtrInput
	// The Resource ID of the *Source* Postgres Flexible Server this should be associated with.
	SourceServerId pulumi.StringPtrInput
	// The type of Virtual Endpoint. Currently only `ReadWrite` is supported.
	Type pulumi.StringPtrInput
}

func (FlexibleServerVirtualEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*flexibleServerVirtualEndpointState)(nil)).Elem()
}

type flexibleServerVirtualEndpointArgs struct {
	// The name of the Virtual Endpoint
	Name *string `pulumi:"name"`
	// The Resource ID of the *Replica* Postgres Flexible Server this should be associated with
	ReplicaServerId string `pulumi:"replicaServerId"`
	// The Resource ID of the *Source* Postgres Flexible Server this should be associated with.
	SourceServerId string `pulumi:"sourceServerId"`
	// The type of Virtual Endpoint. Currently only `ReadWrite` is supported.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a FlexibleServerVirtualEndpoint resource.
type FlexibleServerVirtualEndpointArgs struct {
	// The name of the Virtual Endpoint
	Name pulumi.StringPtrInput
	// The Resource ID of the *Replica* Postgres Flexible Server this should be associated with
	ReplicaServerId pulumi.StringInput
	// The Resource ID of the *Source* Postgres Flexible Server this should be associated with.
	SourceServerId pulumi.StringInput
	// The type of Virtual Endpoint. Currently only `ReadWrite` is supported.
	Type pulumi.StringInput
}

func (FlexibleServerVirtualEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*flexibleServerVirtualEndpointArgs)(nil)).Elem()
}

type FlexibleServerVirtualEndpointInput interface {
	pulumi.Input

	ToFlexibleServerVirtualEndpointOutput() FlexibleServerVirtualEndpointOutput
	ToFlexibleServerVirtualEndpointOutputWithContext(ctx context.Context) FlexibleServerVirtualEndpointOutput
}

func (*FlexibleServerVirtualEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexibleServerVirtualEndpoint)(nil)).Elem()
}

func (i *FlexibleServerVirtualEndpoint) ToFlexibleServerVirtualEndpointOutput() FlexibleServerVirtualEndpointOutput {
	return i.ToFlexibleServerVirtualEndpointOutputWithContext(context.Background())
}

func (i *FlexibleServerVirtualEndpoint) ToFlexibleServerVirtualEndpointOutputWithContext(ctx context.Context) FlexibleServerVirtualEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleServerVirtualEndpointOutput)
}

// FlexibleServerVirtualEndpointArrayInput is an input type that accepts FlexibleServerVirtualEndpointArray and FlexibleServerVirtualEndpointArrayOutput values.
// You can construct a concrete instance of `FlexibleServerVirtualEndpointArrayInput` via:
//
//	FlexibleServerVirtualEndpointArray{ FlexibleServerVirtualEndpointArgs{...} }
type FlexibleServerVirtualEndpointArrayInput interface {
	pulumi.Input

	ToFlexibleServerVirtualEndpointArrayOutput() FlexibleServerVirtualEndpointArrayOutput
	ToFlexibleServerVirtualEndpointArrayOutputWithContext(context.Context) FlexibleServerVirtualEndpointArrayOutput
}

type FlexibleServerVirtualEndpointArray []FlexibleServerVirtualEndpointInput

func (FlexibleServerVirtualEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlexibleServerVirtualEndpoint)(nil)).Elem()
}

func (i FlexibleServerVirtualEndpointArray) ToFlexibleServerVirtualEndpointArrayOutput() FlexibleServerVirtualEndpointArrayOutput {
	return i.ToFlexibleServerVirtualEndpointArrayOutputWithContext(context.Background())
}

func (i FlexibleServerVirtualEndpointArray) ToFlexibleServerVirtualEndpointArrayOutputWithContext(ctx context.Context) FlexibleServerVirtualEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleServerVirtualEndpointArrayOutput)
}

// FlexibleServerVirtualEndpointMapInput is an input type that accepts FlexibleServerVirtualEndpointMap and FlexibleServerVirtualEndpointMapOutput values.
// You can construct a concrete instance of `FlexibleServerVirtualEndpointMapInput` via:
//
//	FlexibleServerVirtualEndpointMap{ "key": FlexibleServerVirtualEndpointArgs{...} }
type FlexibleServerVirtualEndpointMapInput interface {
	pulumi.Input

	ToFlexibleServerVirtualEndpointMapOutput() FlexibleServerVirtualEndpointMapOutput
	ToFlexibleServerVirtualEndpointMapOutputWithContext(context.Context) FlexibleServerVirtualEndpointMapOutput
}

type FlexibleServerVirtualEndpointMap map[string]FlexibleServerVirtualEndpointInput

func (FlexibleServerVirtualEndpointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlexibleServerVirtualEndpoint)(nil)).Elem()
}

func (i FlexibleServerVirtualEndpointMap) ToFlexibleServerVirtualEndpointMapOutput() FlexibleServerVirtualEndpointMapOutput {
	return i.ToFlexibleServerVirtualEndpointMapOutputWithContext(context.Background())
}

func (i FlexibleServerVirtualEndpointMap) ToFlexibleServerVirtualEndpointMapOutputWithContext(ctx context.Context) FlexibleServerVirtualEndpointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleServerVirtualEndpointMapOutput)
}

type FlexibleServerVirtualEndpointOutput struct{ *pulumi.OutputState }

func (FlexibleServerVirtualEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexibleServerVirtualEndpoint)(nil)).Elem()
}

func (o FlexibleServerVirtualEndpointOutput) ToFlexibleServerVirtualEndpointOutput() FlexibleServerVirtualEndpointOutput {
	return o
}

func (o FlexibleServerVirtualEndpointOutput) ToFlexibleServerVirtualEndpointOutputWithContext(ctx context.Context) FlexibleServerVirtualEndpointOutput {
	return o
}

// The name of the Virtual Endpoint
func (o FlexibleServerVirtualEndpointOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleServerVirtualEndpoint) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Resource ID of the *Replica* Postgres Flexible Server this should be associated with
func (o FlexibleServerVirtualEndpointOutput) ReplicaServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleServerVirtualEndpoint) pulumi.StringOutput { return v.ReplicaServerId }).(pulumi.StringOutput)
}

// The Resource ID of the *Source* Postgres Flexible Server this should be associated with.
func (o FlexibleServerVirtualEndpointOutput) SourceServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleServerVirtualEndpoint) pulumi.StringOutput { return v.SourceServerId }).(pulumi.StringOutput)
}

// The type of Virtual Endpoint. Currently only `ReadWrite` is supported.
func (o FlexibleServerVirtualEndpointOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleServerVirtualEndpoint) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type FlexibleServerVirtualEndpointArrayOutput struct{ *pulumi.OutputState }

func (FlexibleServerVirtualEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlexibleServerVirtualEndpoint)(nil)).Elem()
}

func (o FlexibleServerVirtualEndpointArrayOutput) ToFlexibleServerVirtualEndpointArrayOutput() FlexibleServerVirtualEndpointArrayOutput {
	return o
}

func (o FlexibleServerVirtualEndpointArrayOutput) ToFlexibleServerVirtualEndpointArrayOutputWithContext(ctx context.Context) FlexibleServerVirtualEndpointArrayOutput {
	return o
}

func (o FlexibleServerVirtualEndpointArrayOutput) Index(i pulumi.IntInput) FlexibleServerVirtualEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FlexibleServerVirtualEndpoint {
		return vs[0].([]*FlexibleServerVirtualEndpoint)[vs[1].(int)]
	}).(FlexibleServerVirtualEndpointOutput)
}

type FlexibleServerVirtualEndpointMapOutput struct{ *pulumi.OutputState }

func (FlexibleServerVirtualEndpointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlexibleServerVirtualEndpoint)(nil)).Elem()
}

func (o FlexibleServerVirtualEndpointMapOutput) ToFlexibleServerVirtualEndpointMapOutput() FlexibleServerVirtualEndpointMapOutput {
	return o
}

func (o FlexibleServerVirtualEndpointMapOutput) ToFlexibleServerVirtualEndpointMapOutputWithContext(ctx context.Context) FlexibleServerVirtualEndpointMapOutput {
	return o
}

func (o FlexibleServerVirtualEndpointMapOutput) MapIndex(k pulumi.StringInput) FlexibleServerVirtualEndpointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FlexibleServerVirtualEndpoint {
		return vs[0].(map[string]*FlexibleServerVirtualEndpoint)[vs[1].(string)]
	}).(FlexibleServerVirtualEndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleServerVirtualEndpointInput)(nil)).Elem(), &FlexibleServerVirtualEndpoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleServerVirtualEndpointArrayInput)(nil)).Elem(), FlexibleServerVirtualEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleServerVirtualEndpointMapInput)(nil)).Elem(), FlexibleServerVirtualEndpointMap{})
	pulumi.RegisterOutputType(FlexibleServerVirtualEndpointOutput{})
	pulumi.RegisterOutputType(FlexibleServerVirtualEndpointArrayOutput{})
	pulumi.RegisterOutputType(FlexibleServerVirtualEndpointMapOutput{})
}
