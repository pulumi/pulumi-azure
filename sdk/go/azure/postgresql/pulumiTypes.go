// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package postgresql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type FlexibleServerAuthentication struct {
	// Whether or not Active Directory authentication is allowed to access the PostgreSQL Flexible Server. Defaults to `false`.
	ActiveDirectoryAuthEnabled *bool `pulumi:"activeDirectoryAuthEnabled"`
	// Whether or not password authentication is allowed to access the PostgreSQL Flexible Server. Defaults to `true`.
	PasswordAuthEnabled *bool `pulumi:"passwordAuthEnabled"`
	// The Tenant ID of the Azure Active Directory which is used by the Active Directory authentication. `activeDirectoryAuthEnabled` must be set to `true`.
	//
	// > **Note:** Setting `activeDirectoryAuthEnabled` to `true` requires a Service Principal for the Postgres Flexible Server. For more details see [this document](https://learn.microsoft.com/en-us/azure/postgresql/flexible-server/how-to-configure-sign-in-azure-ad-authentication).
	//
	// > **Note:** `tenantId` is required when `activeDirectoryAuthEnabled` is set to `true`. And it should not be specified when `activeDirectoryAuthEnabled` is set to `false`
	TenantId *string `pulumi:"tenantId"`
}

// FlexibleServerAuthenticationInput is an input type that accepts FlexibleServerAuthenticationArgs and FlexibleServerAuthenticationOutput values.
// You can construct a concrete instance of `FlexibleServerAuthenticationInput` via:
//
//	FlexibleServerAuthenticationArgs{...}
type FlexibleServerAuthenticationInput interface {
	pulumi.Input

	ToFlexibleServerAuthenticationOutput() FlexibleServerAuthenticationOutput
	ToFlexibleServerAuthenticationOutputWithContext(context.Context) FlexibleServerAuthenticationOutput
}

type FlexibleServerAuthenticationArgs struct {
	// Whether or not Active Directory authentication is allowed to access the PostgreSQL Flexible Server. Defaults to `false`.
	ActiveDirectoryAuthEnabled pulumi.BoolPtrInput `pulumi:"activeDirectoryAuthEnabled"`
	// Whether or not password authentication is allowed to access the PostgreSQL Flexible Server. Defaults to `true`.
	PasswordAuthEnabled pulumi.BoolPtrInput `pulumi:"passwordAuthEnabled"`
	// The Tenant ID of the Azure Active Directory which is used by the Active Directory authentication. `activeDirectoryAuthEnabled` must be set to `true`.
	//
	// > **Note:** Setting `activeDirectoryAuthEnabled` to `true` requires a Service Principal for the Postgres Flexible Server. For more details see [this document](https://learn.microsoft.com/en-us/azure/postgresql/flexible-server/how-to-configure-sign-in-azure-ad-authentication).
	//
	// > **Note:** `tenantId` is required when `activeDirectoryAuthEnabled` is set to `true`. And it should not be specified when `activeDirectoryAuthEnabled` is set to `false`
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
}

func (FlexibleServerAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlexibleServerAuthentication)(nil)).Elem()
}

func (i FlexibleServerAuthenticationArgs) ToFlexibleServerAuthenticationOutput() FlexibleServerAuthenticationOutput {
	return i.ToFlexibleServerAuthenticationOutputWithContext(context.Background())
}

func (i FlexibleServerAuthenticationArgs) ToFlexibleServerAuthenticationOutputWithContext(ctx context.Context) FlexibleServerAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleServerAuthenticationOutput)
}

func (i FlexibleServerAuthenticationArgs) ToFlexibleServerAuthenticationPtrOutput() FlexibleServerAuthenticationPtrOutput {
	return i.ToFlexibleServerAuthenticationPtrOutputWithContext(context.Background())
}

func (i FlexibleServerAuthenticationArgs) ToFlexibleServerAuthenticationPtrOutputWithContext(ctx context.Context) FlexibleServerAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleServerAuthenticationOutput).ToFlexibleServerAuthenticationPtrOutputWithContext(ctx)
}

// FlexibleServerAuthenticationPtrInput is an input type that accepts FlexibleServerAuthenticationArgs, FlexibleServerAuthenticationPtr and FlexibleServerAuthenticationPtrOutput values.
// You can construct a concrete instance of `FlexibleServerAuthenticationPtrInput` via:
//
//	        FlexibleServerAuthenticationArgs{...}
//
//	or:
//
//	        nil
type FlexibleServerAuthenticationPtrInput interface {
	pulumi.Input

	ToFlexibleServerAuthenticationPtrOutput() FlexibleServerAuthenticationPtrOutput
	ToFlexibleServerAuthenticationPtrOutputWithContext(context.Context) FlexibleServerAuthenticationPtrOutput
}

type flexibleServerAuthenticationPtrType FlexibleServerAuthenticationArgs

func FlexibleServerAuthenticationPtr(v *FlexibleServerAuthenticationArgs) FlexibleServerAuthenticationPtrInput {
	return (*flexibleServerAuthenticationPtrType)(v)
}

func (*flexibleServerAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexibleServerAuthentication)(nil)).Elem()
}

func (i *flexibleServerAuthenticationPtrType) ToFlexibleServerAuthenticationPtrOutput() FlexibleServerAuthenticationPtrOutput {
	return i.ToFlexibleServerAuthenticationPtrOutputWithContext(context.Background())
}

func (i *flexibleServerAuthenticationPtrType) ToFlexibleServerAuthenticationPtrOutputWithContext(ctx context.Context) FlexibleServerAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleServerAuthenticationPtrOutput)
}

type FlexibleServerAuthenticationOutput struct{ *pulumi.OutputState }

func (FlexibleServerAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlexibleServerAuthentication)(nil)).Elem()
}

func (o FlexibleServerAuthenticationOutput) ToFlexibleServerAuthenticationOutput() FlexibleServerAuthenticationOutput {
	return o
}

func (o FlexibleServerAuthenticationOutput) ToFlexibleServerAuthenticationOutputWithContext(ctx context.Context) FlexibleServerAuthenticationOutput {
	return o
}

func (o FlexibleServerAuthenticationOutput) ToFlexibleServerAuthenticationPtrOutput() FlexibleServerAuthenticationPtrOutput {
	return o.ToFlexibleServerAuthenticationPtrOutputWithContext(context.Background())
}

func (o FlexibleServerAuthenticationOutput) ToFlexibleServerAuthenticationPtrOutputWithContext(ctx context.Context) FlexibleServerAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlexibleServerAuthentication) *FlexibleServerAuthentication {
		return &v
	}).(FlexibleServerAuthenticationPtrOutput)
}

// Whether or not Active Directory authentication is allowed to access the PostgreSQL Flexible Server. Defaults to `false`.
func (o FlexibleServerAuthenticationOutput) ActiveDirectoryAuthEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FlexibleServerAuthentication) *bool { return v.ActiveDirectoryAuthEnabled }).(pulumi.BoolPtrOutput)
}

// Whether or not password authentication is allowed to access the PostgreSQL Flexible Server. Defaults to `true`.
func (o FlexibleServerAuthenticationOutput) PasswordAuthEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FlexibleServerAuthentication) *bool { return v.PasswordAuthEnabled }).(pulumi.BoolPtrOutput)
}

// The Tenant ID of the Azure Active Directory which is used by the Active Directory authentication. `activeDirectoryAuthEnabled` must be set to `true`.
//
// > **Note:** Setting `activeDirectoryAuthEnabled` to `true` requires a Service Principal for the Postgres Flexible Server. For more details see [this document](https://learn.microsoft.com/en-us/azure/postgresql/flexible-server/how-to-configure-sign-in-azure-ad-authentication).
//
// > **Note:** `tenantId` is required when `activeDirectoryAuthEnabled` is set to `true`. And it should not be specified when `activeDirectoryAuthEnabled` is set to `false`
func (o FlexibleServerAuthenticationOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlexibleServerAuthentication) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type FlexibleServerAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (FlexibleServerAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexibleServerAuthentication)(nil)).Elem()
}

func (o FlexibleServerAuthenticationPtrOutput) ToFlexibleServerAuthenticationPtrOutput() FlexibleServerAuthenticationPtrOutput {
	return o
}

func (o FlexibleServerAuthenticationPtrOutput) ToFlexibleServerAuthenticationPtrOutputWithContext(ctx context.Context) FlexibleServerAuthenticationPtrOutput {
	return o
}

func (o FlexibleServerAuthenticationPtrOutput) Elem() FlexibleServerAuthenticationOutput {
	return o.ApplyT(func(v *FlexibleServerAuthentication) FlexibleServerAuthentication {
		if v != nil {
			return *v
		}
		var ret FlexibleServerAuthentication
		return ret
	}).(FlexibleServerAuthenticationOutput)
}

// Whether or not Active Directory authentication is allowed to access the PostgreSQL Flexible Server. Defaults to `false`.
func (o FlexibleServerAuthenticationPtrOutput) ActiveDirectoryAuthEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FlexibleServerAuthentication) *bool {
		if v == nil {
			return nil
		}
		return v.ActiveDirectoryAuthEnabled
	}).(pulumi.BoolPtrOutput)
}

// Whether or not password authentication is allowed to access the PostgreSQL Flexible Server. Defaults to `true`.
func (o FlexibleServerAuthenticationPtrOutput) PasswordAuthEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FlexibleServerAuthentication) *bool {
		if v == nil {
			return nil
		}
		return v.PasswordAuthEnabled
	}).(pulumi.BoolPtrOutput)
}

// The Tenant ID of the Azure Active Directory which is used by the Active Directory authentication. `activeDirectoryAuthEnabled` must be set to `true`.
//
// > **Note:** Setting `activeDirectoryAuthEnabled` to `true` requires a Service Principal for the Postgres Flexible Server. For more details see [this document](https://learn.microsoft.com/en-us/azure/postgresql/flexible-server/how-to-configure-sign-in-azure-ad-authentication).
//
// > **Note:** `tenantId` is required when `activeDirectoryAuthEnabled` is set to `true`. And it should not be specified when `activeDirectoryAuthEnabled` is set to `false`
func (o FlexibleServerAuthenticationPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlexibleServerAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

type FlexibleServerCustomerManagedKey struct {
	// The ID of the geo backup Key Vault Key. It can't cross region and need Customer Managed Key in same region as geo backup.
	GeoBackupKeyVaultKeyId *string `pulumi:"geoBackupKeyVaultKeyId"`
	// The geo backup user managed identity id for a Customer Managed Key. Should be added with `identityIds`. It can't cross region and need identity in same region as geo backup.
	//
	// > **NOTE:** `primaryUserAssignedIdentityId` or `geoBackupUserAssignedIdentityId` is required when `type` is set to `UserAssigned`.
	GeoBackupUserAssignedIdentityId *string `pulumi:"geoBackupUserAssignedIdentityId"`
	// The ID of the Key Vault Key.
	KeyVaultKeyId *string `pulumi:"keyVaultKeyId"`
	// Specifies the primary user managed identity id for a Customer Managed Key. Should be added with `identityIds`.
	PrimaryUserAssignedIdentityId *string `pulumi:"primaryUserAssignedIdentityId"`
}

// FlexibleServerCustomerManagedKeyInput is an input type that accepts FlexibleServerCustomerManagedKeyArgs and FlexibleServerCustomerManagedKeyOutput values.
// You can construct a concrete instance of `FlexibleServerCustomerManagedKeyInput` via:
//
//	FlexibleServerCustomerManagedKeyArgs{...}
type FlexibleServerCustomerManagedKeyInput interface {
	pulumi.Input

	ToFlexibleServerCustomerManagedKeyOutput() FlexibleServerCustomerManagedKeyOutput
	ToFlexibleServerCustomerManagedKeyOutputWithContext(context.Context) FlexibleServerCustomerManagedKeyOutput
}

type FlexibleServerCustomerManagedKeyArgs struct {
	// The ID of the geo backup Key Vault Key. It can't cross region and need Customer Managed Key in same region as geo backup.
	GeoBackupKeyVaultKeyId pulumi.StringPtrInput `pulumi:"geoBackupKeyVaultKeyId"`
	// The geo backup user managed identity id for a Customer Managed Key. Should be added with `identityIds`. It can't cross region and need identity in same region as geo backup.
	//
	// > **NOTE:** `primaryUserAssignedIdentityId` or `geoBackupUserAssignedIdentityId` is required when `type` is set to `UserAssigned`.
	GeoBackupUserAssignedIdentityId pulumi.StringPtrInput `pulumi:"geoBackupUserAssignedIdentityId"`
	// The ID of the Key Vault Key.
	KeyVaultKeyId pulumi.StringPtrInput `pulumi:"keyVaultKeyId"`
	// Specifies the primary user managed identity id for a Customer Managed Key. Should be added with `identityIds`.
	PrimaryUserAssignedIdentityId pulumi.StringPtrInput `pulumi:"primaryUserAssignedIdentityId"`
}

func (FlexibleServerCustomerManagedKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlexibleServerCustomerManagedKey)(nil)).Elem()
}

func (i FlexibleServerCustomerManagedKeyArgs) ToFlexibleServerCustomerManagedKeyOutput() FlexibleServerCustomerManagedKeyOutput {
	return i.ToFlexibleServerCustomerManagedKeyOutputWithContext(context.Background())
}

func (i FlexibleServerCustomerManagedKeyArgs) ToFlexibleServerCustomerManagedKeyOutputWithContext(ctx context.Context) FlexibleServerCustomerManagedKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleServerCustomerManagedKeyOutput)
}

func (i FlexibleServerCustomerManagedKeyArgs) ToFlexibleServerCustomerManagedKeyPtrOutput() FlexibleServerCustomerManagedKeyPtrOutput {
	return i.ToFlexibleServerCustomerManagedKeyPtrOutputWithContext(context.Background())
}

func (i FlexibleServerCustomerManagedKeyArgs) ToFlexibleServerCustomerManagedKeyPtrOutputWithContext(ctx context.Context) FlexibleServerCustomerManagedKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleServerCustomerManagedKeyOutput).ToFlexibleServerCustomerManagedKeyPtrOutputWithContext(ctx)
}

// FlexibleServerCustomerManagedKeyPtrInput is an input type that accepts FlexibleServerCustomerManagedKeyArgs, FlexibleServerCustomerManagedKeyPtr and FlexibleServerCustomerManagedKeyPtrOutput values.
// You can construct a concrete instance of `FlexibleServerCustomerManagedKeyPtrInput` via:
//
//	        FlexibleServerCustomerManagedKeyArgs{...}
//
//	or:
//
//	        nil
type FlexibleServerCustomerManagedKeyPtrInput interface {
	pulumi.Input

	ToFlexibleServerCustomerManagedKeyPtrOutput() FlexibleServerCustomerManagedKeyPtrOutput
	ToFlexibleServerCustomerManagedKeyPtrOutputWithContext(context.Context) FlexibleServerCustomerManagedKeyPtrOutput
}

type flexibleServerCustomerManagedKeyPtrType FlexibleServerCustomerManagedKeyArgs

func FlexibleServerCustomerManagedKeyPtr(v *FlexibleServerCustomerManagedKeyArgs) FlexibleServerCustomerManagedKeyPtrInput {
	return (*flexibleServerCustomerManagedKeyPtrType)(v)
}

func (*flexibleServerCustomerManagedKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexibleServerCustomerManagedKey)(nil)).Elem()
}

func (i *flexibleServerCustomerManagedKeyPtrType) ToFlexibleServerCustomerManagedKeyPtrOutput() FlexibleServerCustomerManagedKeyPtrOutput {
	return i.ToFlexibleServerCustomerManagedKeyPtrOutputWithContext(context.Background())
}

func (i *flexibleServerCustomerManagedKeyPtrType) ToFlexibleServerCustomerManagedKeyPtrOutputWithContext(ctx context.Context) FlexibleServerCustomerManagedKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleServerCustomerManagedKeyPtrOutput)
}

type FlexibleServerCustomerManagedKeyOutput struct{ *pulumi.OutputState }

func (FlexibleServerCustomerManagedKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlexibleServerCustomerManagedKey)(nil)).Elem()
}

func (o FlexibleServerCustomerManagedKeyOutput) ToFlexibleServerCustomerManagedKeyOutput() FlexibleServerCustomerManagedKeyOutput {
	return o
}

func (o FlexibleServerCustomerManagedKeyOutput) ToFlexibleServerCustomerManagedKeyOutputWithContext(ctx context.Context) FlexibleServerCustomerManagedKeyOutput {
	return o
}

func (o FlexibleServerCustomerManagedKeyOutput) ToFlexibleServerCustomerManagedKeyPtrOutput() FlexibleServerCustomerManagedKeyPtrOutput {
	return o.ToFlexibleServerCustomerManagedKeyPtrOutputWithContext(context.Background())
}

func (o FlexibleServerCustomerManagedKeyOutput) ToFlexibleServerCustomerManagedKeyPtrOutputWithContext(ctx context.Context) FlexibleServerCustomerManagedKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlexibleServerCustomerManagedKey) *FlexibleServerCustomerManagedKey {
		return &v
	}).(FlexibleServerCustomerManagedKeyPtrOutput)
}

// The ID of the geo backup Key Vault Key. It can't cross region and need Customer Managed Key in same region as geo backup.
func (o FlexibleServerCustomerManagedKeyOutput) GeoBackupKeyVaultKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlexibleServerCustomerManagedKey) *string { return v.GeoBackupKeyVaultKeyId }).(pulumi.StringPtrOutput)
}

// The geo backup user managed identity id for a Customer Managed Key. Should be added with `identityIds`. It can't cross region and need identity in same region as geo backup.
//
// > **NOTE:** `primaryUserAssignedIdentityId` or `geoBackupUserAssignedIdentityId` is required when `type` is set to `UserAssigned`.
func (o FlexibleServerCustomerManagedKeyOutput) GeoBackupUserAssignedIdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlexibleServerCustomerManagedKey) *string { return v.GeoBackupUserAssignedIdentityId }).(pulumi.StringPtrOutput)
}

// The ID of the Key Vault Key.
func (o FlexibleServerCustomerManagedKeyOutput) KeyVaultKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlexibleServerCustomerManagedKey) *string { return v.KeyVaultKeyId }).(pulumi.StringPtrOutput)
}

// Specifies the primary user managed identity id for a Customer Managed Key. Should be added with `identityIds`.
func (o FlexibleServerCustomerManagedKeyOutput) PrimaryUserAssignedIdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlexibleServerCustomerManagedKey) *string { return v.PrimaryUserAssignedIdentityId }).(pulumi.StringPtrOutput)
}

type FlexibleServerCustomerManagedKeyPtrOutput struct{ *pulumi.OutputState }

func (FlexibleServerCustomerManagedKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexibleServerCustomerManagedKey)(nil)).Elem()
}

func (o FlexibleServerCustomerManagedKeyPtrOutput) ToFlexibleServerCustomerManagedKeyPtrOutput() FlexibleServerCustomerManagedKeyPtrOutput {
	return o
}

func (o FlexibleServerCustomerManagedKeyPtrOutput) ToFlexibleServerCustomerManagedKeyPtrOutputWithContext(ctx context.Context) FlexibleServerCustomerManagedKeyPtrOutput {
	return o
}

func (o FlexibleServerCustomerManagedKeyPtrOutput) Elem() FlexibleServerCustomerManagedKeyOutput {
	return o.ApplyT(func(v *FlexibleServerCustomerManagedKey) FlexibleServerCustomerManagedKey {
		if v != nil {
			return *v
		}
		var ret FlexibleServerCustomerManagedKey
		return ret
	}).(FlexibleServerCustomerManagedKeyOutput)
}

// The ID of the geo backup Key Vault Key. It can't cross region and need Customer Managed Key in same region as geo backup.
func (o FlexibleServerCustomerManagedKeyPtrOutput) GeoBackupKeyVaultKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlexibleServerCustomerManagedKey) *string {
		if v == nil {
			return nil
		}
		return v.GeoBackupKeyVaultKeyId
	}).(pulumi.StringPtrOutput)
}

// The geo backup user managed identity id for a Customer Managed Key. Should be added with `identityIds`. It can't cross region and need identity in same region as geo backup.
//
// > **NOTE:** `primaryUserAssignedIdentityId` or `geoBackupUserAssignedIdentityId` is required when `type` is set to `UserAssigned`.
func (o FlexibleServerCustomerManagedKeyPtrOutput) GeoBackupUserAssignedIdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlexibleServerCustomerManagedKey) *string {
		if v == nil {
			return nil
		}
		return v.GeoBackupUserAssignedIdentityId
	}).(pulumi.StringPtrOutput)
}

// The ID of the Key Vault Key.
func (o FlexibleServerCustomerManagedKeyPtrOutput) KeyVaultKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlexibleServerCustomerManagedKey) *string {
		if v == nil {
			return nil
		}
		return v.KeyVaultKeyId
	}).(pulumi.StringPtrOutput)
}

// Specifies the primary user managed identity id for a Customer Managed Key. Should be added with `identityIds`.
func (o FlexibleServerCustomerManagedKeyPtrOutput) PrimaryUserAssignedIdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlexibleServerCustomerManagedKey) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryUserAssignedIdentityId
	}).(pulumi.StringPtrOutput)
}

type FlexibleServerHighAvailability struct {
	// The high availability mode for the PostgreSQL Flexible Server. Possible value are `SameZone` or `ZoneRedundant`.
	Mode                    string  `pulumi:"mode"`
	StandbyAvailabilityZone *string `pulumi:"standbyAvailabilityZone"`
}

// FlexibleServerHighAvailabilityInput is an input type that accepts FlexibleServerHighAvailabilityArgs and FlexibleServerHighAvailabilityOutput values.
// You can construct a concrete instance of `FlexibleServerHighAvailabilityInput` via:
//
//	FlexibleServerHighAvailabilityArgs{...}
type FlexibleServerHighAvailabilityInput interface {
	pulumi.Input

	ToFlexibleServerHighAvailabilityOutput() FlexibleServerHighAvailabilityOutput
	ToFlexibleServerHighAvailabilityOutputWithContext(context.Context) FlexibleServerHighAvailabilityOutput
}

type FlexibleServerHighAvailabilityArgs struct {
	// The high availability mode for the PostgreSQL Flexible Server. Possible value are `SameZone` or `ZoneRedundant`.
	Mode                    pulumi.StringInput    `pulumi:"mode"`
	StandbyAvailabilityZone pulumi.StringPtrInput `pulumi:"standbyAvailabilityZone"`
}

func (FlexibleServerHighAvailabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlexibleServerHighAvailability)(nil)).Elem()
}

func (i FlexibleServerHighAvailabilityArgs) ToFlexibleServerHighAvailabilityOutput() FlexibleServerHighAvailabilityOutput {
	return i.ToFlexibleServerHighAvailabilityOutputWithContext(context.Background())
}

func (i FlexibleServerHighAvailabilityArgs) ToFlexibleServerHighAvailabilityOutputWithContext(ctx context.Context) FlexibleServerHighAvailabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleServerHighAvailabilityOutput)
}

func (i FlexibleServerHighAvailabilityArgs) ToFlexibleServerHighAvailabilityPtrOutput() FlexibleServerHighAvailabilityPtrOutput {
	return i.ToFlexibleServerHighAvailabilityPtrOutputWithContext(context.Background())
}

func (i FlexibleServerHighAvailabilityArgs) ToFlexibleServerHighAvailabilityPtrOutputWithContext(ctx context.Context) FlexibleServerHighAvailabilityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleServerHighAvailabilityOutput).ToFlexibleServerHighAvailabilityPtrOutputWithContext(ctx)
}

// FlexibleServerHighAvailabilityPtrInput is an input type that accepts FlexibleServerHighAvailabilityArgs, FlexibleServerHighAvailabilityPtr and FlexibleServerHighAvailabilityPtrOutput values.
// You can construct a concrete instance of `FlexibleServerHighAvailabilityPtrInput` via:
//
//	        FlexibleServerHighAvailabilityArgs{...}
//
//	or:
//
//	        nil
type FlexibleServerHighAvailabilityPtrInput interface {
	pulumi.Input

	ToFlexibleServerHighAvailabilityPtrOutput() FlexibleServerHighAvailabilityPtrOutput
	ToFlexibleServerHighAvailabilityPtrOutputWithContext(context.Context) FlexibleServerHighAvailabilityPtrOutput
}

type flexibleServerHighAvailabilityPtrType FlexibleServerHighAvailabilityArgs

func FlexibleServerHighAvailabilityPtr(v *FlexibleServerHighAvailabilityArgs) FlexibleServerHighAvailabilityPtrInput {
	return (*flexibleServerHighAvailabilityPtrType)(v)
}

func (*flexibleServerHighAvailabilityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexibleServerHighAvailability)(nil)).Elem()
}

func (i *flexibleServerHighAvailabilityPtrType) ToFlexibleServerHighAvailabilityPtrOutput() FlexibleServerHighAvailabilityPtrOutput {
	return i.ToFlexibleServerHighAvailabilityPtrOutputWithContext(context.Background())
}

func (i *flexibleServerHighAvailabilityPtrType) ToFlexibleServerHighAvailabilityPtrOutputWithContext(ctx context.Context) FlexibleServerHighAvailabilityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleServerHighAvailabilityPtrOutput)
}

type FlexibleServerHighAvailabilityOutput struct{ *pulumi.OutputState }

func (FlexibleServerHighAvailabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlexibleServerHighAvailability)(nil)).Elem()
}

func (o FlexibleServerHighAvailabilityOutput) ToFlexibleServerHighAvailabilityOutput() FlexibleServerHighAvailabilityOutput {
	return o
}

func (o FlexibleServerHighAvailabilityOutput) ToFlexibleServerHighAvailabilityOutputWithContext(ctx context.Context) FlexibleServerHighAvailabilityOutput {
	return o
}

func (o FlexibleServerHighAvailabilityOutput) ToFlexibleServerHighAvailabilityPtrOutput() FlexibleServerHighAvailabilityPtrOutput {
	return o.ToFlexibleServerHighAvailabilityPtrOutputWithContext(context.Background())
}

func (o FlexibleServerHighAvailabilityOutput) ToFlexibleServerHighAvailabilityPtrOutputWithContext(ctx context.Context) FlexibleServerHighAvailabilityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlexibleServerHighAvailability) *FlexibleServerHighAvailability {
		return &v
	}).(FlexibleServerHighAvailabilityPtrOutput)
}

// The high availability mode for the PostgreSQL Flexible Server. Possible value are `SameZone` or `ZoneRedundant`.
func (o FlexibleServerHighAvailabilityOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v FlexibleServerHighAvailability) string { return v.Mode }).(pulumi.StringOutput)
}

func (o FlexibleServerHighAvailabilityOutput) StandbyAvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlexibleServerHighAvailability) *string { return v.StandbyAvailabilityZone }).(pulumi.StringPtrOutput)
}

type FlexibleServerHighAvailabilityPtrOutput struct{ *pulumi.OutputState }

func (FlexibleServerHighAvailabilityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexibleServerHighAvailability)(nil)).Elem()
}

func (o FlexibleServerHighAvailabilityPtrOutput) ToFlexibleServerHighAvailabilityPtrOutput() FlexibleServerHighAvailabilityPtrOutput {
	return o
}

func (o FlexibleServerHighAvailabilityPtrOutput) ToFlexibleServerHighAvailabilityPtrOutputWithContext(ctx context.Context) FlexibleServerHighAvailabilityPtrOutput {
	return o
}

func (o FlexibleServerHighAvailabilityPtrOutput) Elem() FlexibleServerHighAvailabilityOutput {
	return o.ApplyT(func(v *FlexibleServerHighAvailability) FlexibleServerHighAvailability {
		if v != nil {
			return *v
		}
		var ret FlexibleServerHighAvailability
		return ret
	}).(FlexibleServerHighAvailabilityOutput)
}

// The high availability mode for the PostgreSQL Flexible Server. Possible value are `SameZone` or `ZoneRedundant`.
func (o FlexibleServerHighAvailabilityPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlexibleServerHighAvailability) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

func (o FlexibleServerHighAvailabilityPtrOutput) StandbyAvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlexibleServerHighAvailability) *string {
		if v == nil {
			return nil
		}
		return v.StandbyAvailabilityZone
	}).(pulumi.StringPtrOutput)
}

type FlexibleServerIdentity struct {
	// A list of User Assigned Managed Identity IDs to be assigned to this PostgreSQL Flexible Server. Required if used together with `customerManagedKey` block.
	IdentityIds []string `pulumi:"identityIds"`
	// Specifies the type of Managed Service Identity that should be configured on this PostgreSQL Flexible Server. The only possible value is `UserAssigned`.
	Type string `pulumi:"type"`
}

// FlexibleServerIdentityInput is an input type that accepts FlexibleServerIdentityArgs and FlexibleServerIdentityOutput values.
// You can construct a concrete instance of `FlexibleServerIdentityInput` via:
//
//	FlexibleServerIdentityArgs{...}
type FlexibleServerIdentityInput interface {
	pulumi.Input

	ToFlexibleServerIdentityOutput() FlexibleServerIdentityOutput
	ToFlexibleServerIdentityOutputWithContext(context.Context) FlexibleServerIdentityOutput
}

type FlexibleServerIdentityArgs struct {
	// A list of User Assigned Managed Identity IDs to be assigned to this PostgreSQL Flexible Server. Required if used together with `customerManagedKey` block.
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	// Specifies the type of Managed Service Identity that should be configured on this PostgreSQL Flexible Server. The only possible value is `UserAssigned`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FlexibleServerIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlexibleServerIdentity)(nil)).Elem()
}

func (i FlexibleServerIdentityArgs) ToFlexibleServerIdentityOutput() FlexibleServerIdentityOutput {
	return i.ToFlexibleServerIdentityOutputWithContext(context.Background())
}

func (i FlexibleServerIdentityArgs) ToFlexibleServerIdentityOutputWithContext(ctx context.Context) FlexibleServerIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleServerIdentityOutput)
}

func (i FlexibleServerIdentityArgs) ToFlexibleServerIdentityPtrOutput() FlexibleServerIdentityPtrOutput {
	return i.ToFlexibleServerIdentityPtrOutputWithContext(context.Background())
}

func (i FlexibleServerIdentityArgs) ToFlexibleServerIdentityPtrOutputWithContext(ctx context.Context) FlexibleServerIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleServerIdentityOutput).ToFlexibleServerIdentityPtrOutputWithContext(ctx)
}

// FlexibleServerIdentityPtrInput is an input type that accepts FlexibleServerIdentityArgs, FlexibleServerIdentityPtr and FlexibleServerIdentityPtrOutput values.
// You can construct a concrete instance of `FlexibleServerIdentityPtrInput` via:
//
//	        FlexibleServerIdentityArgs{...}
//
//	or:
//
//	        nil
type FlexibleServerIdentityPtrInput interface {
	pulumi.Input

	ToFlexibleServerIdentityPtrOutput() FlexibleServerIdentityPtrOutput
	ToFlexibleServerIdentityPtrOutputWithContext(context.Context) FlexibleServerIdentityPtrOutput
}

type flexibleServerIdentityPtrType FlexibleServerIdentityArgs

func FlexibleServerIdentityPtr(v *FlexibleServerIdentityArgs) FlexibleServerIdentityPtrInput {
	return (*flexibleServerIdentityPtrType)(v)
}

func (*flexibleServerIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexibleServerIdentity)(nil)).Elem()
}

func (i *flexibleServerIdentityPtrType) ToFlexibleServerIdentityPtrOutput() FlexibleServerIdentityPtrOutput {
	return i.ToFlexibleServerIdentityPtrOutputWithContext(context.Background())
}

func (i *flexibleServerIdentityPtrType) ToFlexibleServerIdentityPtrOutputWithContext(ctx context.Context) FlexibleServerIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleServerIdentityPtrOutput)
}

type FlexibleServerIdentityOutput struct{ *pulumi.OutputState }

func (FlexibleServerIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlexibleServerIdentity)(nil)).Elem()
}

func (o FlexibleServerIdentityOutput) ToFlexibleServerIdentityOutput() FlexibleServerIdentityOutput {
	return o
}

func (o FlexibleServerIdentityOutput) ToFlexibleServerIdentityOutputWithContext(ctx context.Context) FlexibleServerIdentityOutput {
	return o
}

func (o FlexibleServerIdentityOutput) ToFlexibleServerIdentityPtrOutput() FlexibleServerIdentityPtrOutput {
	return o.ToFlexibleServerIdentityPtrOutputWithContext(context.Background())
}

func (o FlexibleServerIdentityOutput) ToFlexibleServerIdentityPtrOutputWithContext(ctx context.Context) FlexibleServerIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlexibleServerIdentity) *FlexibleServerIdentity {
		return &v
	}).(FlexibleServerIdentityPtrOutput)
}

// A list of User Assigned Managed Identity IDs to be assigned to this PostgreSQL Flexible Server. Required if used together with `customerManagedKey` block.
func (o FlexibleServerIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FlexibleServerIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this PostgreSQL Flexible Server. The only possible value is `UserAssigned`.
func (o FlexibleServerIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FlexibleServerIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type FlexibleServerIdentityPtrOutput struct{ *pulumi.OutputState }

func (FlexibleServerIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexibleServerIdentity)(nil)).Elem()
}

func (o FlexibleServerIdentityPtrOutput) ToFlexibleServerIdentityPtrOutput() FlexibleServerIdentityPtrOutput {
	return o
}

func (o FlexibleServerIdentityPtrOutput) ToFlexibleServerIdentityPtrOutputWithContext(ctx context.Context) FlexibleServerIdentityPtrOutput {
	return o
}

func (o FlexibleServerIdentityPtrOutput) Elem() FlexibleServerIdentityOutput {
	return o.ApplyT(func(v *FlexibleServerIdentity) FlexibleServerIdentity {
		if v != nil {
			return *v
		}
		var ret FlexibleServerIdentity
		return ret
	}).(FlexibleServerIdentityOutput)
}

// A list of User Assigned Managed Identity IDs to be assigned to this PostgreSQL Flexible Server. Required if used together with `customerManagedKey` block.
func (o FlexibleServerIdentityPtrOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FlexibleServerIdentity) []string {
		if v == nil {
			return nil
		}
		return v.IdentityIds
	}).(pulumi.StringArrayOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this PostgreSQL Flexible Server. The only possible value is `UserAssigned`.
func (o FlexibleServerIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlexibleServerIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type FlexibleServerMaintenanceWindow struct {
	// The day of week for maintenance window, where the week starts on a Sunday, i.e. Sunday = `0`, Monday = `1`. Defaults to `0`.
	DayOfWeek *int `pulumi:"dayOfWeek"`
	// The start hour for maintenance window. Defaults to `0`.
	StartHour *int `pulumi:"startHour"`
	// The start minute for maintenance window. Defaults to `0`.
	StartMinute *int `pulumi:"startMinute"`
}

// FlexibleServerMaintenanceWindowInput is an input type that accepts FlexibleServerMaintenanceWindowArgs and FlexibleServerMaintenanceWindowOutput values.
// You can construct a concrete instance of `FlexibleServerMaintenanceWindowInput` via:
//
//	FlexibleServerMaintenanceWindowArgs{...}
type FlexibleServerMaintenanceWindowInput interface {
	pulumi.Input

	ToFlexibleServerMaintenanceWindowOutput() FlexibleServerMaintenanceWindowOutput
	ToFlexibleServerMaintenanceWindowOutputWithContext(context.Context) FlexibleServerMaintenanceWindowOutput
}

type FlexibleServerMaintenanceWindowArgs struct {
	// The day of week for maintenance window, where the week starts on a Sunday, i.e. Sunday = `0`, Monday = `1`. Defaults to `0`.
	DayOfWeek pulumi.IntPtrInput `pulumi:"dayOfWeek"`
	// The start hour for maintenance window. Defaults to `0`.
	StartHour pulumi.IntPtrInput `pulumi:"startHour"`
	// The start minute for maintenance window. Defaults to `0`.
	StartMinute pulumi.IntPtrInput `pulumi:"startMinute"`
}

func (FlexibleServerMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlexibleServerMaintenanceWindow)(nil)).Elem()
}

func (i FlexibleServerMaintenanceWindowArgs) ToFlexibleServerMaintenanceWindowOutput() FlexibleServerMaintenanceWindowOutput {
	return i.ToFlexibleServerMaintenanceWindowOutputWithContext(context.Background())
}

func (i FlexibleServerMaintenanceWindowArgs) ToFlexibleServerMaintenanceWindowOutputWithContext(ctx context.Context) FlexibleServerMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleServerMaintenanceWindowOutput)
}

func (i FlexibleServerMaintenanceWindowArgs) ToFlexibleServerMaintenanceWindowPtrOutput() FlexibleServerMaintenanceWindowPtrOutput {
	return i.ToFlexibleServerMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i FlexibleServerMaintenanceWindowArgs) ToFlexibleServerMaintenanceWindowPtrOutputWithContext(ctx context.Context) FlexibleServerMaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleServerMaintenanceWindowOutput).ToFlexibleServerMaintenanceWindowPtrOutputWithContext(ctx)
}

// FlexibleServerMaintenanceWindowPtrInput is an input type that accepts FlexibleServerMaintenanceWindowArgs, FlexibleServerMaintenanceWindowPtr and FlexibleServerMaintenanceWindowPtrOutput values.
// You can construct a concrete instance of `FlexibleServerMaintenanceWindowPtrInput` via:
//
//	        FlexibleServerMaintenanceWindowArgs{...}
//
//	or:
//
//	        nil
type FlexibleServerMaintenanceWindowPtrInput interface {
	pulumi.Input

	ToFlexibleServerMaintenanceWindowPtrOutput() FlexibleServerMaintenanceWindowPtrOutput
	ToFlexibleServerMaintenanceWindowPtrOutputWithContext(context.Context) FlexibleServerMaintenanceWindowPtrOutput
}

type flexibleServerMaintenanceWindowPtrType FlexibleServerMaintenanceWindowArgs

func FlexibleServerMaintenanceWindowPtr(v *FlexibleServerMaintenanceWindowArgs) FlexibleServerMaintenanceWindowPtrInput {
	return (*flexibleServerMaintenanceWindowPtrType)(v)
}

func (*flexibleServerMaintenanceWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexibleServerMaintenanceWindow)(nil)).Elem()
}

func (i *flexibleServerMaintenanceWindowPtrType) ToFlexibleServerMaintenanceWindowPtrOutput() FlexibleServerMaintenanceWindowPtrOutput {
	return i.ToFlexibleServerMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i *flexibleServerMaintenanceWindowPtrType) ToFlexibleServerMaintenanceWindowPtrOutputWithContext(ctx context.Context) FlexibleServerMaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleServerMaintenanceWindowPtrOutput)
}

type FlexibleServerMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (FlexibleServerMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlexibleServerMaintenanceWindow)(nil)).Elem()
}

func (o FlexibleServerMaintenanceWindowOutput) ToFlexibleServerMaintenanceWindowOutput() FlexibleServerMaintenanceWindowOutput {
	return o
}

func (o FlexibleServerMaintenanceWindowOutput) ToFlexibleServerMaintenanceWindowOutputWithContext(ctx context.Context) FlexibleServerMaintenanceWindowOutput {
	return o
}

func (o FlexibleServerMaintenanceWindowOutput) ToFlexibleServerMaintenanceWindowPtrOutput() FlexibleServerMaintenanceWindowPtrOutput {
	return o.ToFlexibleServerMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (o FlexibleServerMaintenanceWindowOutput) ToFlexibleServerMaintenanceWindowPtrOutputWithContext(ctx context.Context) FlexibleServerMaintenanceWindowPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlexibleServerMaintenanceWindow) *FlexibleServerMaintenanceWindow {
		return &v
	}).(FlexibleServerMaintenanceWindowPtrOutput)
}

// The day of week for maintenance window, where the week starts on a Sunday, i.e. Sunday = `0`, Monday = `1`. Defaults to `0`.
func (o FlexibleServerMaintenanceWindowOutput) DayOfWeek() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlexibleServerMaintenanceWindow) *int { return v.DayOfWeek }).(pulumi.IntPtrOutput)
}

// The start hour for maintenance window. Defaults to `0`.
func (o FlexibleServerMaintenanceWindowOutput) StartHour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlexibleServerMaintenanceWindow) *int { return v.StartHour }).(pulumi.IntPtrOutput)
}

// The start minute for maintenance window. Defaults to `0`.
func (o FlexibleServerMaintenanceWindowOutput) StartMinute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlexibleServerMaintenanceWindow) *int { return v.StartMinute }).(pulumi.IntPtrOutput)
}

type FlexibleServerMaintenanceWindowPtrOutput struct{ *pulumi.OutputState }

func (FlexibleServerMaintenanceWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexibleServerMaintenanceWindow)(nil)).Elem()
}

func (o FlexibleServerMaintenanceWindowPtrOutput) ToFlexibleServerMaintenanceWindowPtrOutput() FlexibleServerMaintenanceWindowPtrOutput {
	return o
}

func (o FlexibleServerMaintenanceWindowPtrOutput) ToFlexibleServerMaintenanceWindowPtrOutputWithContext(ctx context.Context) FlexibleServerMaintenanceWindowPtrOutput {
	return o
}

func (o FlexibleServerMaintenanceWindowPtrOutput) Elem() FlexibleServerMaintenanceWindowOutput {
	return o.ApplyT(func(v *FlexibleServerMaintenanceWindow) FlexibleServerMaintenanceWindow {
		if v != nil {
			return *v
		}
		var ret FlexibleServerMaintenanceWindow
		return ret
	}).(FlexibleServerMaintenanceWindowOutput)
}

// The day of week for maintenance window, where the week starts on a Sunday, i.e. Sunday = `0`, Monday = `1`. Defaults to `0`.
func (o FlexibleServerMaintenanceWindowPtrOutput) DayOfWeek() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlexibleServerMaintenanceWindow) *int {
		if v == nil {
			return nil
		}
		return v.DayOfWeek
	}).(pulumi.IntPtrOutput)
}

// The start hour for maintenance window. Defaults to `0`.
func (o FlexibleServerMaintenanceWindowPtrOutput) StartHour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlexibleServerMaintenanceWindow) *int {
		if v == nil {
			return nil
		}
		return v.StartHour
	}).(pulumi.IntPtrOutput)
}

// The start minute for maintenance window. Defaults to `0`.
func (o FlexibleServerMaintenanceWindowPtrOutput) StartMinute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlexibleServerMaintenanceWindow) *int {
		if v == nil {
			return nil
		}
		return v.StartMinute
	}).(pulumi.IntPtrOutput)
}

type ServerIdentity struct {
	// The Principal ID associated with this Managed Service Identity.
	PrincipalId *string `pulumi:"principalId"`
	// The Tenant ID associated with this Managed Service Identity.
	TenantId *string `pulumi:"tenantId"`
	// Specifies the type of Managed Service Identity that should be configured on this PostgreSQL Server. The only possible value is `SystemAssigned`.
	Type string `pulumi:"type"`
}

// ServerIdentityInput is an input type that accepts ServerIdentityArgs and ServerIdentityOutput values.
// You can construct a concrete instance of `ServerIdentityInput` via:
//
//	ServerIdentityArgs{...}
type ServerIdentityInput interface {
	pulumi.Input

	ToServerIdentityOutput() ServerIdentityOutput
	ToServerIdentityOutputWithContext(context.Context) ServerIdentityOutput
}

type ServerIdentityArgs struct {
	// The Principal ID associated with this Managed Service Identity.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The Tenant ID associated with this Managed Service Identity.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// Specifies the type of Managed Service Identity that should be configured on this PostgreSQL Server. The only possible value is `SystemAssigned`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServerIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerIdentity)(nil)).Elem()
}

func (i ServerIdentityArgs) ToServerIdentityOutput() ServerIdentityOutput {
	return i.ToServerIdentityOutputWithContext(context.Background())
}

func (i ServerIdentityArgs) ToServerIdentityOutputWithContext(ctx context.Context) ServerIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerIdentityOutput)
}

func (i ServerIdentityArgs) ToServerIdentityPtrOutput() ServerIdentityPtrOutput {
	return i.ToServerIdentityPtrOutputWithContext(context.Background())
}

func (i ServerIdentityArgs) ToServerIdentityPtrOutputWithContext(ctx context.Context) ServerIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerIdentityOutput).ToServerIdentityPtrOutputWithContext(ctx)
}

// ServerIdentityPtrInput is an input type that accepts ServerIdentityArgs, ServerIdentityPtr and ServerIdentityPtrOutput values.
// You can construct a concrete instance of `ServerIdentityPtrInput` via:
//
//	        ServerIdentityArgs{...}
//
//	or:
//
//	        nil
type ServerIdentityPtrInput interface {
	pulumi.Input

	ToServerIdentityPtrOutput() ServerIdentityPtrOutput
	ToServerIdentityPtrOutputWithContext(context.Context) ServerIdentityPtrOutput
}

type serverIdentityPtrType ServerIdentityArgs

func ServerIdentityPtr(v *ServerIdentityArgs) ServerIdentityPtrInput {
	return (*serverIdentityPtrType)(v)
}

func (*serverIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerIdentity)(nil)).Elem()
}

func (i *serverIdentityPtrType) ToServerIdentityPtrOutput() ServerIdentityPtrOutput {
	return i.ToServerIdentityPtrOutputWithContext(context.Background())
}

func (i *serverIdentityPtrType) ToServerIdentityPtrOutputWithContext(ctx context.Context) ServerIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerIdentityPtrOutput)
}

type ServerIdentityOutput struct{ *pulumi.OutputState }

func (ServerIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerIdentity)(nil)).Elem()
}

func (o ServerIdentityOutput) ToServerIdentityOutput() ServerIdentityOutput {
	return o
}

func (o ServerIdentityOutput) ToServerIdentityOutputWithContext(ctx context.Context) ServerIdentityOutput {
	return o
}

func (o ServerIdentityOutput) ToServerIdentityPtrOutput() ServerIdentityPtrOutput {
	return o.ToServerIdentityPtrOutputWithContext(context.Background())
}

func (o ServerIdentityOutput) ToServerIdentityPtrOutputWithContext(ctx context.Context) ServerIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerIdentity) *ServerIdentity {
		return &v
	}).(ServerIdentityPtrOutput)
}

// The Principal ID associated with this Managed Service Identity.
func (o ServerIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The Tenant ID associated with this Managed Service Identity.
func (o ServerIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this PostgreSQL Server. The only possible value is `SystemAssigned`.
func (o ServerIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServerIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type ServerIdentityPtrOutput struct{ *pulumi.OutputState }

func (ServerIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerIdentity)(nil)).Elem()
}

func (o ServerIdentityPtrOutput) ToServerIdentityPtrOutput() ServerIdentityPtrOutput {
	return o
}

func (o ServerIdentityPtrOutput) ToServerIdentityPtrOutputWithContext(ctx context.Context) ServerIdentityPtrOutput {
	return o
}

func (o ServerIdentityPtrOutput) Elem() ServerIdentityOutput {
	return o.ApplyT(func(v *ServerIdentity) ServerIdentity {
		if v != nil {
			return *v
		}
		var ret ServerIdentity
		return ret
	}).(ServerIdentityOutput)
}

// The Principal ID associated with this Managed Service Identity.
func (o ServerIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The Tenant ID associated with this Managed Service Identity.
func (o ServerIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this PostgreSQL Server. The only possible value is `SystemAssigned`.
func (o ServerIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type ServerThreatDetectionPolicy struct {
	// Specifies a list of alerts which should be disabled. Possible values are `Sql_Injection`, `Sql_Injection_Vulnerability`, `Access_Anomaly`, `Data_Exfiltration` and `Unsafe_Action`.
	DisabledAlerts []string `pulumi:"disabledAlerts"`
	// Should the account administrators be emailed when this alert is triggered?
	EmailAccountAdmins *bool `pulumi:"emailAccountAdmins"`
	// A list of email addresses which alerts should be sent to.
	EmailAddresses []string `pulumi:"emailAddresses"`
	// Is the policy enabled?
	Enabled *bool `pulumi:"enabled"`
	// Specifies the number of days to keep in the Threat Detection audit logs.
	RetentionDays *int `pulumi:"retentionDays"`
	// Specifies the identifier key of the Threat Detection audit storage account.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// Specifies the blob storage endpoint (e.g. <https://example.blob.core.windows.net>). This blob storage will hold all Threat Detection audit logs.
	StorageEndpoint *string `pulumi:"storageEndpoint"`
}

// ServerThreatDetectionPolicyInput is an input type that accepts ServerThreatDetectionPolicyArgs and ServerThreatDetectionPolicyOutput values.
// You can construct a concrete instance of `ServerThreatDetectionPolicyInput` via:
//
//	ServerThreatDetectionPolicyArgs{...}
type ServerThreatDetectionPolicyInput interface {
	pulumi.Input

	ToServerThreatDetectionPolicyOutput() ServerThreatDetectionPolicyOutput
	ToServerThreatDetectionPolicyOutputWithContext(context.Context) ServerThreatDetectionPolicyOutput
}

type ServerThreatDetectionPolicyArgs struct {
	// Specifies a list of alerts which should be disabled. Possible values are `Sql_Injection`, `Sql_Injection_Vulnerability`, `Access_Anomaly`, `Data_Exfiltration` and `Unsafe_Action`.
	DisabledAlerts pulumi.StringArrayInput `pulumi:"disabledAlerts"`
	// Should the account administrators be emailed when this alert is triggered?
	EmailAccountAdmins pulumi.BoolPtrInput `pulumi:"emailAccountAdmins"`
	// A list of email addresses which alerts should be sent to.
	EmailAddresses pulumi.StringArrayInput `pulumi:"emailAddresses"`
	// Is the policy enabled?
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Specifies the number of days to keep in the Threat Detection audit logs.
	RetentionDays pulumi.IntPtrInput `pulumi:"retentionDays"`
	// Specifies the identifier key of the Threat Detection audit storage account.
	StorageAccountAccessKey pulumi.StringPtrInput `pulumi:"storageAccountAccessKey"`
	// Specifies the blob storage endpoint (e.g. <https://example.blob.core.windows.net>). This blob storage will hold all Threat Detection audit logs.
	StorageEndpoint pulumi.StringPtrInput `pulumi:"storageEndpoint"`
}

func (ServerThreatDetectionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerThreatDetectionPolicy)(nil)).Elem()
}

func (i ServerThreatDetectionPolicyArgs) ToServerThreatDetectionPolicyOutput() ServerThreatDetectionPolicyOutput {
	return i.ToServerThreatDetectionPolicyOutputWithContext(context.Background())
}

func (i ServerThreatDetectionPolicyArgs) ToServerThreatDetectionPolicyOutputWithContext(ctx context.Context) ServerThreatDetectionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerThreatDetectionPolicyOutput)
}

func (i ServerThreatDetectionPolicyArgs) ToServerThreatDetectionPolicyPtrOutput() ServerThreatDetectionPolicyPtrOutput {
	return i.ToServerThreatDetectionPolicyPtrOutputWithContext(context.Background())
}

func (i ServerThreatDetectionPolicyArgs) ToServerThreatDetectionPolicyPtrOutputWithContext(ctx context.Context) ServerThreatDetectionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerThreatDetectionPolicyOutput).ToServerThreatDetectionPolicyPtrOutputWithContext(ctx)
}

// ServerThreatDetectionPolicyPtrInput is an input type that accepts ServerThreatDetectionPolicyArgs, ServerThreatDetectionPolicyPtr and ServerThreatDetectionPolicyPtrOutput values.
// You can construct a concrete instance of `ServerThreatDetectionPolicyPtrInput` via:
//
//	        ServerThreatDetectionPolicyArgs{...}
//
//	or:
//
//	        nil
type ServerThreatDetectionPolicyPtrInput interface {
	pulumi.Input

	ToServerThreatDetectionPolicyPtrOutput() ServerThreatDetectionPolicyPtrOutput
	ToServerThreatDetectionPolicyPtrOutputWithContext(context.Context) ServerThreatDetectionPolicyPtrOutput
}

type serverThreatDetectionPolicyPtrType ServerThreatDetectionPolicyArgs

func ServerThreatDetectionPolicyPtr(v *ServerThreatDetectionPolicyArgs) ServerThreatDetectionPolicyPtrInput {
	return (*serverThreatDetectionPolicyPtrType)(v)
}

func (*serverThreatDetectionPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerThreatDetectionPolicy)(nil)).Elem()
}

func (i *serverThreatDetectionPolicyPtrType) ToServerThreatDetectionPolicyPtrOutput() ServerThreatDetectionPolicyPtrOutput {
	return i.ToServerThreatDetectionPolicyPtrOutputWithContext(context.Background())
}

func (i *serverThreatDetectionPolicyPtrType) ToServerThreatDetectionPolicyPtrOutputWithContext(ctx context.Context) ServerThreatDetectionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerThreatDetectionPolicyPtrOutput)
}

type ServerThreatDetectionPolicyOutput struct{ *pulumi.OutputState }

func (ServerThreatDetectionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerThreatDetectionPolicy)(nil)).Elem()
}

func (o ServerThreatDetectionPolicyOutput) ToServerThreatDetectionPolicyOutput() ServerThreatDetectionPolicyOutput {
	return o
}

func (o ServerThreatDetectionPolicyOutput) ToServerThreatDetectionPolicyOutputWithContext(ctx context.Context) ServerThreatDetectionPolicyOutput {
	return o
}

func (o ServerThreatDetectionPolicyOutput) ToServerThreatDetectionPolicyPtrOutput() ServerThreatDetectionPolicyPtrOutput {
	return o.ToServerThreatDetectionPolicyPtrOutputWithContext(context.Background())
}

func (o ServerThreatDetectionPolicyOutput) ToServerThreatDetectionPolicyPtrOutputWithContext(ctx context.Context) ServerThreatDetectionPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerThreatDetectionPolicy) *ServerThreatDetectionPolicy {
		return &v
	}).(ServerThreatDetectionPolicyPtrOutput)
}

// Specifies a list of alerts which should be disabled. Possible values are `Sql_Injection`, `Sql_Injection_Vulnerability`, `Access_Anomaly`, `Data_Exfiltration` and `Unsafe_Action`.
func (o ServerThreatDetectionPolicyOutput) DisabledAlerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServerThreatDetectionPolicy) []string { return v.DisabledAlerts }).(pulumi.StringArrayOutput)
}

// Should the account administrators be emailed when this alert is triggered?
func (o ServerThreatDetectionPolicyOutput) EmailAccountAdmins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServerThreatDetectionPolicy) *bool { return v.EmailAccountAdmins }).(pulumi.BoolPtrOutput)
}

// A list of email addresses which alerts should be sent to.
func (o ServerThreatDetectionPolicyOutput) EmailAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServerThreatDetectionPolicy) []string { return v.EmailAddresses }).(pulumi.StringArrayOutput)
}

// Is the policy enabled?
func (o ServerThreatDetectionPolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServerThreatDetectionPolicy) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Specifies the number of days to keep in the Threat Detection audit logs.
func (o ServerThreatDetectionPolicyOutput) RetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerThreatDetectionPolicy) *int { return v.RetentionDays }).(pulumi.IntPtrOutput)
}

// Specifies the identifier key of the Threat Detection audit storage account.
func (o ServerThreatDetectionPolicyOutput) StorageAccountAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerThreatDetectionPolicy) *string { return v.StorageAccountAccessKey }).(pulumi.StringPtrOutput)
}

// Specifies the blob storage endpoint (e.g. <https://example.blob.core.windows.net>). This blob storage will hold all Threat Detection audit logs.
func (o ServerThreatDetectionPolicyOutput) StorageEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerThreatDetectionPolicy) *string { return v.StorageEndpoint }).(pulumi.StringPtrOutput)
}

type ServerThreatDetectionPolicyPtrOutput struct{ *pulumi.OutputState }

func (ServerThreatDetectionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerThreatDetectionPolicy)(nil)).Elem()
}

func (o ServerThreatDetectionPolicyPtrOutput) ToServerThreatDetectionPolicyPtrOutput() ServerThreatDetectionPolicyPtrOutput {
	return o
}

func (o ServerThreatDetectionPolicyPtrOutput) ToServerThreatDetectionPolicyPtrOutputWithContext(ctx context.Context) ServerThreatDetectionPolicyPtrOutput {
	return o
}

func (o ServerThreatDetectionPolicyPtrOutput) Elem() ServerThreatDetectionPolicyOutput {
	return o.ApplyT(func(v *ServerThreatDetectionPolicy) ServerThreatDetectionPolicy {
		if v != nil {
			return *v
		}
		var ret ServerThreatDetectionPolicy
		return ret
	}).(ServerThreatDetectionPolicyOutput)
}

// Specifies a list of alerts which should be disabled. Possible values are `Sql_Injection`, `Sql_Injection_Vulnerability`, `Access_Anomaly`, `Data_Exfiltration` and `Unsafe_Action`.
func (o ServerThreatDetectionPolicyPtrOutput) DisabledAlerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServerThreatDetectionPolicy) []string {
		if v == nil {
			return nil
		}
		return v.DisabledAlerts
	}).(pulumi.StringArrayOutput)
}

// Should the account administrators be emailed when this alert is triggered?
func (o ServerThreatDetectionPolicyPtrOutput) EmailAccountAdmins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerThreatDetectionPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.EmailAccountAdmins
	}).(pulumi.BoolPtrOutput)
}

// A list of email addresses which alerts should be sent to.
func (o ServerThreatDetectionPolicyPtrOutput) EmailAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServerThreatDetectionPolicy) []string {
		if v == nil {
			return nil
		}
		return v.EmailAddresses
	}).(pulumi.StringArrayOutput)
}

// Is the policy enabled?
func (o ServerThreatDetectionPolicyPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerThreatDetectionPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the number of days to keep in the Threat Detection audit logs.
func (o ServerThreatDetectionPolicyPtrOutput) RetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerThreatDetectionPolicy) *int {
		if v == nil {
			return nil
		}
		return v.RetentionDays
	}).(pulumi.IntPtrOutput)
}

// Specifies the identifier key of the Threat Detection audit storage account.
func (o ServerThreatDetectionPolicyPtrOutput) StorageAccountAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerThreatDetectionPolicy) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountAccessKey
	}).(pulumi.StringPtrOutput)
}

// Specifies the blob storage endpoint (e.g. <https://example.blob.core.windows.net>). This blob storage will hold all Threat Detection audit logs.
func (o ServerThreatDetectionPolicyPtrOutput) StorageEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerThreatDetectionPolicy) *string {
		if v == nil {
			return nil
		}
		return v.StorageEndpoint
	}).(pulumi.StringPtrOutput)
}

type GetServerIdentity struct {
	// The ID of the System Managed Service Principal assigned to the PostgreSQL Server.
	PrincipalId string `pulumi:"principalId"`
	// The ID of the Tenant of the System Managed Service Principal assigned to the PostgreSQL Server.
	TenantId string `pulumi:"tenantId"`
	// The identity type of the Managed Identity assigned to the PostgreSQL Server.
	Type string `pulumi:"type"`
}

// GetServerIdentityInput is an input type that accepts GetServerIdentityArgs and GetServerIdentityOutput values.
// You can construct a concrete instance of `GetServerIdentityInput` via:
//
//	GetServerIdentityArgs{...}
type GetServerIdentityInput interface {
	pulumi.Input

	ToGetServerIdentityOutput() GetServerIdentityOutput
	ToGetServerIdentityOutputWithContext(context.Context) GetServerIdentityOutput
}

type GetServerIdentityArgs struct {
	// The ID of the System Managed Service Principal assigned to the PostgreSQL Server.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The ID of the Tenant of the System Managed Service Principal assigned to the PostgreSQL Server.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The identity type of the Managed Identity assigned to the PostgreSQL Server.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetServerIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerIdentity)(nil)).Elem()
}

func (i GetServerIdentityArgs) ToGetServerIdentityOutput() GetServerIdentityOutput {
	return i.ToGetServerIdentityOutputWithContext(context.Background())
}

func (i GetServerIdentityArgs) ToGetServerIdentityOutputWithContext(ctx context.Context) GetServerIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerIdentityOutput)
}

// GetServerIdentityArrayInput is an input type that accepts GetServerIdentityArray and GetServerIdentityArrayOutput values.
// You can construct a concrete instance of `GetServerIdentityArrayInput` via:
//
//	GetServerIdentityArray{ GetServerIdentityArgs{...} }
type GetServerIdentityArrayInput interface {
	pulumi.Input

	ToGetServerIdentityArrayOutput() GetServerIdentityArrayOutput
	ToGetServerIdentityArrayOutputWithContext(context.Context) GetServerIdentityArrayOutput
}

type GetServerIdentityArray []GetServerIdentityInput

func (GetServerIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerIdentity)(nil)).Elem()
}

func (i GetServerIdentityArray) ToGetServerIdentityArrayOutput() GetServerIdentityArrayOutput {
	return i.ToGetServerIdentityArrayOutputWithContext(context.Background())
}

func (i GetServerIdentityArray) ToGetServerIdentityArrayOutputWithContext(ctx context.Context) GetServerIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerIdentityArrayOutput)
}

type GetServerIdentityOutput struct{ *pulumi.OutputState }

func (GetServerIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerIdentity)(nil)).Elem()
}

func (o GetServerIdentityOutput) ToGetServerIdentityOutput() GetServerIdentityOutput {
	return o
}

func (o GetServerIdentityOutput) ToGetServerIdentityOutputWithContext(ctx context.Context) GetServerIdentityOutput {
	return o
}

// The ID of the System Managed Service Principal assigned to the PostgreSQL Server.
func (o GetServerIdentityOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerIdentity) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The ID of the Tenant of the System Managed Service Principal assigned to the PostgreSQL Server.
func (o GetServerIdentityOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerIdentity) string { return v.TenantId }).(pulumi.StringOutput)
}

// The identity type of the Managed Identity assigned to the PostgreSQL Server.
func (o GetServerIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type GetServerIdentityArrayOutput struct{ *pulumi.OutputState }

func (GetServerIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerIdentity)(nil)).Elem()
}

func (o GetServerIdentityArrayOutput) ToGetServerIdentityArrayOutput() GetServerIdentityArrayOutput {
	return o
}

func (o GetServerIdentityArrayOutput) ToGetServerIdentityArrayOutputWithContext(ctx context.Context) GetServerIdentityArrayOutput {
	return o
}

func (o GetServerIdentityArrayOutput) Index(i pulumi.IntInput) GetServerIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerIdentity {
		return vs[0].([]GetServerIdentity)[vs[1].(int)]
	}).(GetServerIdentityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleServerAuthenticationInput)(nil)).Elem(), FlexibleServerAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleServerAuthenticationPtrInput)(nil)).Elem(), FlexibleServerAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleServerCustomerManagedKeyInput)(nil)).Elem(), FlexibleServerCustomerManagedKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleServerCustomerManagedKeyPtrInput)(nil)).Elem(), FlexibleServerCustomerManagedKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleServerHighAvailabilityInput)(nil)).Elem(), FlexibleServerHighAvailabilityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleServerHighAvailabilityPtrInput)(nil)).Elem(), FlexibleServerHighAvailabilityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleServerIdentityInput)(nil)).Elem(), FlexibleServerIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleServerIdentityPtrInput)(nil)).Elem(), FlexibleServerIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleServerMaintenanceWindowInput)(nil)).Elem(), FlexibleServerMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleServerMaintenanceWindowPtrInput)(nil)).Elem(), FlexibleServerMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerIdentityInput)(nil)).Elem(), ServerIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerIdentityPtrInput)(nil)).Elem(), ServerIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerThreatDetectionPolicyInput)(nil)).Elem(), ServerThreatDetectionPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerThreatDetectionPolicyPtrInput)(nil)).Elem(), ServerThreatDetectionPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerIdentityInput)(nil)).Elem(), GetServerIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerIdentityArrayInput)(nil)).Elem(), GetServerIdentityArray{})
	pulumi.RegisterOutputType(FlexibleServerAuthenticationOutput{})
	pulumi.RegisterOutputType(FlexibleServerAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(FlexibleServerCustomerManagedKeyOutput{})
	pulumi.RegisterOutputType(FlexibleServerCustomerManagedKeyPtrOutput{})
	pulumi.RegisterOutputType(FlexibleServerHighAvailabilityOutput{})
	pulumi.RegisterOutputType(FlexibleServerHighAvailabilityPtrOutput{})
	pulumi.RegisterOutputType(FlexibleServerIdentityOutput{})
	pulumi.RegisterOutputType(FlexibleServerIdentityPtrOutput{})
	pulumi.RegisterOutputType(FlexibleServerMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(FlexibleServerMaintenanceWindowPtrOutput{})
	pulumi.RegisterOutputType(ServerIdentityOutput{})
	pulumi.RegisterOutputType(ServerIdentityPtrOutput{})
	pulumi.RegisterOutputType(ServerThreatDetectionPolicyOutput{})
	pulumi.RegisterOutputType(ServerThreatDetectionPolicyPtrOutput{})
	pulumi.RegisterOutputType(GetServerIdentityOutput{})
	pulumi.RegisterOutputType(GetServerIdentityArrayOutput{})
}
