// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package proximity

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a proximity placement group for virtual machines, virtual machine scale sets and availability sets.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/proximity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = proximity.NewPlacementGroup(ctx, "examplePlacementGroup", &proximity.PlacementGroupArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Tags: pulumi.StringMap{
//					"environment": pulumi.String("Production"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Proximity Placement Groups can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:proximity/placementGroup:PlacementGroup example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-rg/providers/Microsoft.Compute/proximityPlacementGroups/example-ppg
//
// ```
type PlacementGroup struct {
	pulumi.CustomResourceState

	// Specifies the supported sizes of Virtual Machines that can be created in the Proximity Placement Group. Possible values are `Basic_A4`, `Basic_A1`, `Basic_A3`, `Basic_A2`, `Basic_A0`, `Standard_A8`, `Standard_A8_v2`, `Standard_A8m_v2`, `Standard_A5`, `Standard_A4`, `Standard_A4_v2`, `Standard_A4m_v2`, `Standard_A9`, `Standard_A1`, `Standard_A11`, `Standard_A1_v2`, `Standard_A10`, `Standard_A7`, `Standard_A6`, `Standard_A3`, `Standard_A2`, `Standard_A2_v2`, `Standard_A2m_v2`, `Standard_A0`, `Standard_B8ms`, `Standard_B4ms`, `Standard_B1ms`, `Standard_B1s`, `Standard_B2ms`, `Standard_B2s`, `Standard_D8_v3`, `Standard_D8s_v3`, `Standard_D5_v2`, `Standard_D4`, `Standard_D4_v3`, `Standard_D4_v2`, `Standard_D4s_v3`, `Standard_D1`, `Standard_D15_v2`, `Standard_D14`, `Standard_D14_v2`, `Standard_D11`, `Standard_D11_v2`, `Standard_D16_v3`, `Standard_D16s_v3`, `Standard_D13`, `Standard_D13_v2`, `Standard_D12`, `Standard_D12_v2`, `Standard_D1_v2`, `Standard_DS5_v2`, `Standard_DS4`, `Standard_DS4_v2`, `Standard_DS1`, `Standard_DS15_v2`, `Standard_DS14`, `Standard_DS14-8_v2`, `Standard_DS14-4_v2`, `Standard_DS14_v2`, `Standard_DS11`, `Standard_DS11_v2`, `Standard_DS13`, `Standard_DS13-4_v2`, `Standard_DS13-2_v2`, `Standard_DS13_v2`, `Standard_DS12`, `Standard_DS12_v2`, `Standard_DS1_v2`, `Standard_DS3`, `Standard_DS3_v2`, `Standard_DS2`, `Standard_DS2_v2`, `Standard_D64_v3`, `Standard_D64s_v3`, `Standard_D3`, `Standard_D32_v3`, `Standard_D32s_v3`, `Standard_D3_v2`, `Standard_D2`, `Standard_D2_v3`, `Standard_D2_v2`, `Standard_D2s_v3`, `Standard_E8_v3`, `Standard_E8s_v3`, `Standard_E4_v3`, `Standard_E4s_v3`, `Standard_E16_v3`, `Standard_E16s_v3`, `Standard_E64-16s_v3`, `Standard_E64-32s_v3`, `Standard_E64_v3`, `Standard_E64s_v3`, `Standard_E32-8s_v3`, `Standard_E32-16_v3`, `Standard_E32_v3`, `Standard_E32s_v3`, `Standard_E2_v3`, `Standard_E2s_v3`, `Standard_F8`, `Standard_F8s`, `Standard_F8s_v2`, `Standard_F4`, `Standard_F4s`, `Standard_F4s_v2`, `Standard_F1`, `Standard_F16`, `Standard_F16s`, `Standard_F16s_v2`, `Standard_F1s`, `Standard_F72s_v2`, `Standard_F64s_v2`, `Standard_F32s_v2`, `Standard_F2`, `Standard_F2s`, `Standard_F2s_v2`, `Standard_G5`, `Standard_G4`, `Standard_G1`, `Standard_GS5`, `Standard_GS5-8`, `Standard_GS5-16`, `Standard_GS4`, `Standard_GS4-8`, `Standard_GS4-4`, `Standard_GS1`, `Standard_GS3`, `Standard_GS2`, `Standard_G3`, `Standard_G2`, `Standard_H8`, `Standard_H8m`, `Standard_H16`, `Standard_H16m`, `Standard_H16mr`, `Standard_H16r`, `Standard_L8s`, `Standard_L4s`, `Standard_L16s`, `Standard_L32s`, `Standard_M128-64ms`, `Standard_M128-32ms`, `Standard_M128ms`, `Standard_M128s`, `Standard_M64-16ms`, `Standard_M64-32ms`, `Standard_M64ms`, `Standard_M64s`, `Standard_NC12`, `Standard_NC12s_v3`, `Standard_NC12s_v2`, `Standard_NC6`, `Standard_NC6s_v3`, `Standard_NC6s_v2`, `Standard_NC24`, `Standard_NC24r`, `Standard_NC24rs_v3`, `Standard_NC24rs_v2`, `Standard_NC24s_v3`, `Standard_NC24s_v2`, `Standard_ND12s`, `Standard_ND6s`, `Standard_ND24rs`, `Standard_ND24s`, `Standard_NV12`, `Standard_NV6` and `Standard_NV24`.
	AllowedVmSizes pulumi.StringArrayOutput `pulumi:"allowedVmSizes"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name of the proximity placement group. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the resource group in which to create the availability set. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies the supported zone of the Proximity Placement Group. Changing this forces a new resource to be created.
	Zone pulumi.StringPtrOutput `pulumi:"zone"`
}

// NewPlacementGroup registers a new resource with the given unique name, arguments, and options.
func NewPlacementGroup(ctx *pulumi.Context,
	name string, args *PlacementGroupArgs, opts ...pulumi.ResourceOption) (*PlacementGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	var resource PlacementGroup
	err := ctx.RegisterResource("azure:proximity/placementGroup:PlacementGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlacementGroup gets an existing PlacementGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlacementGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PlacementGroupState, opts ...pulumi.ResourceOption) (*PlacementGroup, error) {
	var resource PlacementGroup
	err := ctx.ReadResource("azure:proximity/placementGroup:PlacementGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PlacementGroup resources.
type placementGroupState struct {
	// Specifies the supported sizes of Virtual Machines that can be created in the Proximity Placement Group. Possible values are `Basic_A4`, `Basic_A1`, `Basic_A3`, `Basic_A2`, `Basic_A0`, `Standard_A8`, `Standard_A8_v2`, `Standard_A8m_v2`, `Standard_A5`, `Standard_A4`, `Standard_A4_v2`, `Standard_A4m_v2`, `Standard_A9`, `Standard_A1`, `Standard_A11`, `Standard_A1_v2`, `Standard_A10`, `Standard_A7`, `Standard_A6`, `Standard_A3`, `Standard_A2`, `Standard_A2_v2`, `Standard_A2m_v2`, `Standard_A0`, `Standard_B8ms`, `Standard_B4ms`, `Standard_B1ms`, `Standard_B1s`, `Standard_B2ms`, `Standard_B2s`, `Standard_D8_v3`, `Standard_D8s_v3`, `Standard_D5_v2`, `Standard_D4`, `Standard_D4_v3`, `Standard_D4_v2`, `Standard_D4s_v3`, `Standard_D1`, `Standard_D15_v2`, `Standard_D14`, `Standard_D14_v2`, `Standard_D11`, `Standard_D11_v2`, `Standard_D16_v3`, `Standard_D16s_v3`, `Standard_D13`, `Standard_D13_v2`, `Standard_D12`, `Standard_D12_v2`, `Standard_D1_v2`, `Standard_DS5_v2`, `Standard_DS4`, `Standard_DS4_v2`, `Standard_DS1`, `Standard_DS15_v2`, `Standard_DS14`, `Standard_DS14-8_v2`, `Standard_DS14-4_v2`, `Standard_DS14_v2`, `Standard_DS11`, `Standard_DS11_v2`, `Standard_DS13`, `Standard_DS13-4_v2`, `Standard_DS13-2_v2`, `Standard_DS13_v2`, `Standard_DS12`, `Standard_DS12_v2`, `Standard_DS1_v2`, `Standard_DS3`, `Standard_DS3_v2`, `Standard_DS2`, `Standard_DS2_v2`, `Standard_D64_v3`, `Standard_D64s_v3`, `Standard_D3`, `Standard_D32_v3`, `Standard_D32s_v3`, `Standard_D3_v2`, `Standard_D2`, `Standard_D2_v3`, `Standard_D2_v2`, `Standard_D2s_v3`, `Standard_E8_v3`, `Standard_E8s_v3`, `Standard_E4_v3`, `Standard_E4s_v3`, `Standard_E16_v3`, `Standard_E16s_v3`, `Standard_E64-16s_v3`, `Standard_E64-32s_v3`, `Standard_E64_v3`, `Standard_E64s_v3`, `Standard_E32-8s_v3`, `Standard_E32-16_v3`, `Standard_E32_v3`, `Standard_E32s_v3`, `Standard_E2_v3`, `Standard_E2s_v3`, `Standard_F8`, `Standard_F8s`, `Standard_F8s_v2`, `Standard_F4`, `Standard_F4s`, `Standard_F4s_v2`, `Standard_F1`, `Standard_F16`, `Standard_F16s`, `Standard_F16s_v2`, `Standard_F1s`, `Standard_F72s_v2`, `Standard_F64s_v2`, `Standard_F32s_v2`, `Standard_F2`, `Standard_F2s`, `Standard_F2s_v2`, `Standard_G5`, `Standard_G4`, `Standard_G1`, `Standard_GS5`, `Standard_GS5-8`, `Standard_GS5-16`, `Standard_GS4`, `Standard_GS4-8`, `Standard_GS4-4`, `Standard_GS1`, `Standard_GS3`, `Standard_GS2`, `Standard_G3`, `Standard_G2`, `Standard_H8`, `Standard_H8m`, `Standard_H16`, `Standard_H16m`, `Standard_H16mr`, `Standard_H16r`, `Standard_L8s`, `Standard_L4s`, `Standard_L16s`, `Standard_L32s`, `Standard_M128-64ms`, `Standard_M128-32ms`, `Standard_M128ms`, `Standard_M128s`, `Standard_M64-16ms`, `Standard_M64-32ms`, `Standard_M64ms`, `Standard_M64s`, `Standard_NC12`, `Standard_NC12s_v3`, `Standard_NC12s_v2`, `Standard_NC6`, `Standard_NC6s_v3`, `Standard_NC6s_v2`, `Standard_NC24`, `Standard_NC24r`, `Standard_NC24rs_v3`, `Standard_NC24rs_v2`, `Standard_NC24s_v3`, `Standard_NC24s_v2`, `Standard_ND12s`, `Standard_ND6s`, `Standard_ND24rs`, `Standard_ND24s`, `Standard_NV12`, `Standard_NV6` and `Standard_NV24`.
	AllowedVmSizes []string `pulumi:"allowedVmSizes"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the proximity placement group. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to create the availability set. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the supported zone of the Proximity Placement Group. Changing this forces a new resource to be created.
	Zone *string `pulumi:"zone"`
}

type PlacementGroupState struct {
	// Specifies the supported sizes of Virtual Machines that can be created in the Proximity Placement Group. Possible values are `Basic_A4`, `Basic_A1`, `Basic_A3`, `Basic_A2`, `Basic_A0`, `Standard_A8`, `Standard_A8_v2`, `Standard_A8m_v2`, `Standard_A5`, `Standard_A4`, `Standard_A4_v2`, `Standard_A4m_v2`, `Standard_A9`, `Standard_A1`, `Standard_A11`, `Standard_A1_v2`, `Standard_A10`, `Standard_A7`, `Standard_A6`, `Standard_A3`, `Standard_A2`, `Standard_A2_v2`, `Standard_A2m_v2`, `Standard_A0`, `Standard_B8ms`, `Standard_B4ms`, `Standard_B1ms`, `Standard_B1s`, `Standard_B2ms`, `Standard_B2s`, `Standard_D8_v3`, `Standard_D8s_v3`, `Standard_D5_v2`, `Standard_D4`, `Standard_D4_v3`, `Standard_D4_v2`, `Standard_D4s_v3`, `Standard_D1`, `Standard_D15_v2`, `Standard_D14`, `Standard_D14_v2`, `Standard_D11`, `Standard_D11_v2`, `Standard_D16_v3`, `Standard_D16s_v3`, `Standard_D13`, `Standard_D13_v2`, `Standard_D12`, `Standard_D12_v2`, `Standard_D1_v2`, `Standard_DS5_v2`, `Standard_DS4`, `Standard_DS4_v2`, `Standard_DS1`, `Standard_DS15_v2`, `Standard_DS14`, `Standard_DS14-8_v2`, `Standard_DS14-4_v2`, `Standard_DS14_v2`, `Standard_DS11`, `Standard_DS11_v2`, `Standard_DS13`, `Standard_DS13-4_v2`, `Standard_DS13-2_v2`, `Standard_DS13_v2`, `Standard_DS12`, `Standard_DS12_v2`, `Standard_DS1_v2`, `Standard_DS3`, `Standard_DS3_v2`, `Standard_DS2`, `Standard_DS2_v2`, `Standard_D64_v3`, `Standard_D64s_v3`, `Standard_D3`, `Standard_D32_v3`, `Standard_D32s_v3`, `Standard_D3_v2`, `Standard_D2`, `Standard_D2_v3`, `Standard_D2_v2`, `Standard_D2s_v3`, `Standard_E8_v3`, `Standard_E8s_v3`, `Standard_E4_v3`, `Standard_E4s_v3`, `Standard_E16_v3`, `Standard_E16s_v3`, `Standard_E64-16s_v3`, `Standard_E64-32s_v3`, `Standard_E64_v3`, `Standard_E64s_v3`, `Standard_E32-8s_v3`, `Standard_E32-16_v3`, `Standard_E32_v3`, `Standard_E32s_v3`, `Standard_E2_v3`, `Standard_E2s_v3`, `Standard_F8`, `Standard_F8s`, `Standard_F8s_v2`, `Standard_F4`, `Standard_F4s`, `Standard_F4s_v2`, `Standard_F1`, `Standard_F16`, `Standard_F16s`, `Standard_F16s_v2`, `Standard_F1s`, `Standard_F72s_v2`, `Standard_F64s_v2`, `Standard_F32s_v2`, `Standard_F2`, `Standard_F2s`, `Standard_F2s_v2`, `Standard_G5`, `Standard_G4`, `Standard_G1`, `Standard_GS5`, `Standard_GS5-8`, `Standard_GS5-16`, `Standard_GS4`, `Standard_GS4-8`, `Standard_GS4-4`, `Standard_GS1`, `Standard_GS3`, `Standard_GS2`, `Standard_G3`, `Standard_G2`, `Standard_H8`, `Standard_H8m`, `Standard_H16`, `Standard_H16m`, `Standard_H16mr`, `Standard_H16r`, `Standard_L8s`, `Standard_L4s`, `Standard_L16s`, `Standard_L32s`, `Standard_M128-64ms`, `Standard_M128-32ms`, `Standard_M128ms`, `Standard_M128s`, `Standard_M64-16ms`, `Standard_M64-32ms`, `Standard_M64ms`, `Standard_M64s`, `Standard_NC12`, `Standard_NC12s_v3`, `Standard_NC12s_v2`, `Standard_NC6`, `Standard_NC6s_v3`, `Standard_NC6s_v2`, `Standard_NC24`, `Standard_NC24r`, `Standard_NC24rs_v3`, `Standard_NC24rs_v2`, `Standard_NC24s_v3`, `Standard_NC24s_v2`, `Standard_ND12s`, `Standard_ND6s`, `Standard_ND24rs`, `Standard_ND24s`, `Standard_NV12`, `Standard_NV6` and `Standard_NV24`.
	AllowedVmSizes pulumi.StringArrayInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the proximity placement group. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to create the availability set. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// Specifies the supported zone of the Proximity Placement Group. Changing this forces a new resource to be created.
	Zone pulumi.StringPtrInput
}

func (PlacementGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*placementGroupState)(nil)).Elem()
}

type placementGroupArgs struct {
	// Specifies the supported sizes of Virtual Machines that can be created in the Proximity Placement Group. Possible values are `Basic_A4`, `Basic_A1`, `Basic_A3`, `Basic_A2`, `Basic_A0`, `Standard_A8`, `Standard_A8_v2`, `Standard_A8m_v2`, `Standard_A5`, `Standard_A4`, `Standard_A4_v2`, `Standard_A4m_v2`, `Standard_A9`, `Standard_A1`, `Standard_A11`, `Standard_A1_v2`, `Standard_A10`, `Standard_A7`, `Standard_A6`, `Standard_A3`, `Standard_A2`, `Standard_A2_v2`, `Standard_A2m_v2`, `Standard_A0`, `Standard_B8ms`, `Standard_B4ms`, `Standard_B1ms`, `Standard_B1s`, `Standard_B2ms`, `Standard_B2s`, `Standard_D8_v3`, `Standard_D8s_v3`, `Standard_D5_v2`, `Standard_D4`, `Standard_D4_v3`, `Standard_D4_v2`, `Standard_D4s_v3`, `Standard_D1`, `Standard_D15_v2`, `Standard_D14`, `Standard_D14_v2`, `Standard_D11`, `Standard_D11_v2`, `Standard_D16_v3`, `Standard_D16s_v3`, `Standard_D13`, `Standard_D13_v2`, `Standard_D12`, `Standard_D12_v2`, `Standard_D1_v2`, `Standard_DS5_v2`, `Standard_DS4`, `Standard_DS4_v2`, `Standard_DS1`, `Standard_DS15_v2`, `Standard_DS14`, `Standard_DS14-8_v2`, `Standard_DS14-4_v2`, `Standard_DS14_v2`, `Standard_DS11`, `Standard_DS11_v2`, `Standard_DS13`, `Standard_DS13-4_v2`, `Standard_DS13-2_v2`, `Standard_DS13_v2`, `Standard_DS12`, `Standard_DS12_v2`, `Standard_DS1_v2`, `Standard_DS3`, `Standard_DS3_v2`, `Standard_DS2`, `Standard_DS2_v2`, `Standard_D64_v3`, `Standard_D64s_v3`, `Standard_D3`, `Standard_D32_v3`, `Standard_D32s_v3`, `Standard_D3_v2`, `Standard_D2`, `Standard_D2_v3`, `Standard_D2_v2`, `Standard_D2s_v3`, `Standard_E8_v3`, `Standard_E8s_v3`, `Standard_E4_v3`, `Standard_E4s_v3`, `Standard_E16_v3`, `Standard_E16s_v3`, `Standard_E64-16s_v3`, `Standard_E64-32s_v3`, `Standard_E64_v3`, `Standard_E64s_v3`, `Standard_E32-8s_v3`, `Standard_E32-16_v3`, `Standard_E32_v3`, `Standard_E32s_v3`, `Standard_E2_v3`, `Standard_E2s_v3`, `Standard_F8`, `Standard_F8s`, `Standard_F8s_v2`, `Standard_F4`, `Standard_F4s`, `Standard_F4s_v2`, `Standard_F1`, `Standard_F16`, `Standard_F16s`, `Standard_F16s_v2`, `Standard_F1s`, `Standard_F72s_v2`, `Standard_F64s_v2`, `Standard_F32s_v2`, `Standard_F2`, `Standard_F2s`, `Standard_F2s_v2`, `Standard_G5`, `Standard_G4`, `Standard_G1`, `Standard_GS5`, `Standard_GS5-8`, `Standard_GS5-16`, `Standard_GS4`, `Standard_GS4-8`, `Standard_GS4-4`, `Standard_GS1`, `Standard_GS3`, `Standard_GS2`, `Standard_G3`, `Standard_G2`, `Standard_H8`, `Standard_H8m`, `Standard_H16`, `Standard_H16m`, `Standard_H16mr`, `Standard_H16r`, `Standard_L8s`, `Standard_L4s`, `Standard_L16s`, `Standard_L32s`, `Standard_M128-64ms`, `Standard_M128-32ms`, `Standard_M128ms`, `Standard_M128s`, `Standard_M64-16ms`, `Standard_M64-32ms`, `Standard_M64ms`, `Standard_M64s`, `Standard_NC12`, `Standard_NC12s_v3`, `Standard_NC12s_v2`, `Standard_NC6`, `Standard_NC6s_v3`, `Standard_NC6s_v2`, `Standard_NC24`, `Standard_NC24r`, `Standard_NC24rs_v3`, `Standard_NC24rs_v2`, `Standard_NC24s_v3`, `Standard_NC24s_v2`, `Standard_ND12s`, `Standard_ND6s`, `Standard_ND24rs`, `Standard_ND24s`, `Standard_NV12`, `Standard_NV6` and `Standard_NV24`.
	AllowedVmSizes []string `pulumi:"allowedVmSizes"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the proximity placement group. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to create the availability set. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the supported zone of the Proximity Placement Group. Changing this forces a new resource to be created.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a PlacementGroup resource.
type PlacementGroupArgs struct {
	// Specifies the supported sizes of Virtual Machines that can be created in the Proximity Placement Group. Possible values are `Basic_A4`, `Basic_A1`, `Basic_A3`, `Basic_A2`, `Basic_A0`, `Standard_A8`, `Standard_A8_v2`, `Standard_A8m_v2`, `Standard_A5`, `Standard_A4`, `Standard_A4_v2`, `Standard_A4m_v2`, `Standard_A9`, `Standard_A1`, `Standard_A11`, `Standard_A1_v2`, `Standard_A10`, `Standard_A7`, `Standard_A6`, `Standard_A3`, `Standard_A2`, `Standard_A2_v2`, `Standard_A2m_v2`, `Standard_A0`, `Standard_B8ms`, `Standard_B4ms`, `Standard_B1ms`, `Standard_B1s`, `Standard_B2ms`, `Standard_B2s`, `Standard_D8_v3`, `Standard_D8s_v3`, `Standard_D5_v2`, `Standard_D4`, `Standard_D4_v3`, `Standard_D4_v2`, `Standard_D4s_v3`, `Standard_D1`, `Standard_D15_v2`, `Standard_D14`, `Standard_D14_v2`, `Standard_D11`, `Standard_D11_v2`, `Standard_D16_v3`, `Standard_D16s_v3`, `Standard_D13`, `Standard_D13_v2`, `Standard_D12`, `Standard_D12_v2`, `Standard_D1_v2`, `Standard_DS5_v2`, `Standard_DS4`, `Standard_DS4_v2`, `Standard_DS1`, `Standard_DS15_v2`, `Standard_DS14`, `Standard_DS14-8_v2`, `Standard_DS14-4_v2`, `Standard_DS14_v2`, `Standard_DS11`, `Standard_DS11_v2`, `Standard_DS13`, `Standard_DS13-4_v2`, `Standard_DS13-2_v2`, `Standard_DS13_v2`, `Standard_DS12`, `Standard_DS12_v2`, `Standard_DS1_v2`, `Standard_DS3`, `Standard_DS3_v2`, `Standard_DS2`, `Standard_DS2_v2`, `Standard_D64_v3`, `Standard_D64s_v3`, `Standard_D3`, `Standard_D32_v3`, `Standard_D32s_v3`, `Standard_D3_v2`, `Standard_D2`, `Standard_D2_v3`, `Standard_D2_v2`, `Standard_D2s_v3`, `Standard_E8_v3`, `Standard_E8s_v3`, `Standard_E4_v3`, `Standard_E4s_v3`, `Standard_E16_v3`, `Standard_E16s_v3`, `Standard_E64-16s_v3`, `Standard_E64-32s_v3`, `Standard_E64_v3`, `Standard_E64s_v3`, `Standard_E32-8s_v3`, `Standard_E32-16_v3`, `Standard_E32_v3`, `Standard_E32s_v3`, `Standard_E2_v3`, `Standard_E2s_v3`, `Standard_F8`, `Standard_F8s`, `Standard_F8s_v2`, `Standard_F4`, `Standard_F4s`, `Standard_F4s_v2`, `Standard_F1`, `Standard_F16`, `Standard_F16s`, `Standard_F16s_v2`, `Standard_F1s`, `Standard_F72s_v2`, `Standard_F64s_v2`, `Standard_F32s_v2`, `Standard_F2`, `Standard_F2s`, `Standard_F2s_v2`, `Standard_G5`, `Standard_G4`, `Standard_G1`, `Standard_GS5`, `Standard_GS5-8`, `Standard_GS5-16`, `Standard_GS4`, `Standard_GS4-8`, `Standard_GS4-4`, `Standard_GS1`, `Standard_GS3`, `Standard_GS2`, `Standard_G3`, `Standard_G2`, `Standard_H8`, `Standard_H8m`, `Standard_H16`, `Standard_H16m`, `Standard_H16mr`, `Standard_H16r`, `Standard_L8s`, `Standard_L4s`, `Standard_L16s`, `Standard_L32s`, `Standard_M128-64ms`, `Standard_M128-32ms`, `Standard_M128ms`, `Standard_M128s`, `Standard_M64-16ms`, `Standard_M64-32ms`, `Standard_M64ms`, `Standard_M64s`, `Standard_NC12`, `Standard_NC12s_v3`, `Standard_NC12s_v2`, `Standard_NC6`, `Standard_NC6s_v3`, `Standard_NC6s_v2`, `Standard_NC24`, `Standard_NC24r`, `Standard_NC24rs_v3`, `Standard_NC24rs_v2`, `Standard_NC24s_v3`, `Standard_NC24s_v2`, `Standard_ND12s`, `Standard_ND6s`, `Standard_ND24rs`, `Standard_ND24s`, `Standard_NV12`, `Standard_NV6` and `Standard_NV24`.
	AllowedVmSizes pulumi.StringArrayInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the proximity placement group. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to create the availability set. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// Specifies the supported zone of the Proximity Placement Group. Changing this forces a new resource to be created.
	Zone pulumi.StringPtrInput
}

func (PlacementGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*placementGroupArgs)(nil)).Elem()
}

type PlacementGroupInput interface {
	pulumi.Input

	ToPlacementGroupOutput() PlacementGroupOutput
	ToPlacementGroupOutputWithContext(ctx context.Context) PlacementGroupOutput
}

func (*PlacementGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**PlacementGroup)(nil)).Elem()
}

func (i *PlacementGroup) ToPlacementGroupOutput() PlacementGroupOutput {
	return i.ToPlacementGroupOutputWithContext(context.Background())
}

func (i *PlacementGroup) ToPlacementGroupOutputWithContext(ctx context.Context) PlacementGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlacementGroupOutput)
}

// PlacementGroupArrayInput is an input type that accepts PlacementGroupArray and PlacementGroupArrayOutput values.
// You can construct a concrete instance of `PlacementGroupArrayInput` via:
//
//	PlacementGroupArray{ PlacementGroupArgs{...} }
type PlacementGroupArrayInput interface {
	pulumi.Input

	ToPlacementGroupArrayOutput() PlacementGroupArrayOutput
	ToPlacementGroupArrayOutputWithContext(context.Context) PlacementGroupArrayOutput
}

type PlacementGroupArray []PlacementGroupInput

func (PlacementGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PlacementGroup)(nil)).Elem()
}

func (i PlacementGroupArray) ToPlacementGroupArrayOutput() PlacementGroupArrayOutput {
	return i.ToPlacementGroupArrayOutputWithContext(context.Background())
}

func (i PlacementGroupArray) ToPlacementGroupArrayOutputWithContext(ctx context.Context) PlacementGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlacementGroupArrayOutput)
}

// PlacementGroupMapInput is an input type that accepts PlacementGroupMap and PlacementGroupMapOutput values.
// You can construct a concrete instance of `PlacementGroupMapInput` via:
//
//	PlacementGroupMap{ "key": PlacementGroupArgs{...} }
type PlacementGroupMapInput interface {
	pulumi.Input

	ToPlacementGroupMapOutput() PlacementGroupMapOutput
	ToPlacementGroupMapOutputWithContext(context.Context) PlacementGroupMapOutput
}

type PlacementGroupMap map[string]PlacementGroupInput

func (PlacementGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PlacementGroup)(nil)).Elem()
}

func (i PlacementGroupMap) ToPlacementGroupMapOutput() PlacementGroupMapOutput {
	return i.ToPlacementGroupMapOutputWithContext(context.Background())
}

func (i PlacementGroupMap) ToPlacementGroupMapOutputWithContext(ctx context.Context) PlacementGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlacementGroupMapOutput)
}

type PlacementGroupOutput struct{ *pulumi.OutputState }

func (PlacementGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlacementGroup)(nil)).Elem()
}

func (o PlacementGroupOutput) ToPlacementGroupOutput() PlacementGroupOutput {
	return o
}

func (o PlacementGroupOutput) ToPlacementGroupOutputWithContext(ctx context.Context) PlacementGroupOutput {
	return o
}

// Specifies the supported sizes of Virtual Machines that can be created in the Proximity Placement Group. Possible values are `Basic_A4`, `Basic_A1`, `Basic_A3`, `Basic_A2`, `Basic_A0`, `Standard_A8`, `Standard_A8_v2`, `Standard_A8m_v2`, `Standard_A5`, `Standard_A4`, `Standard_A4_v2`, `Standard_A4m_v2`, `Standard_A9`, `Standard_A1`, `Standard_A11`, `Standard_A1_v2`, `Standard_A10`, `Standard_A7`, `Standard_A6`, `Standard_A3`, `Standard_A2`, `Standard_A2_v2`, `Standard_A2m_v2`, `Standard_A0`, `Standard_B8ms`, `Standard_B4ms`, `Standard_B1ms`, `Standard_B1s`, `Standard_B2ms`, `Standard_B2s`, `Standard_D8_v3`, `Standard_D8s_v3`, `Standard_D5_v2`, `Standard_D4`, `Standard_D4_v3`, `Standard_D4_v2`, `Standard_D4s_v3`, `Standard_D1`, `Standard_D15_v2`, `Standard_D14`, `Standard_D14_v2`, `Standard_D11`, `Standard_D11_v2`, `Standard_D16_v3`, `Standard_D16s_v3`, `Standard_D13`, `Standard_D13_v2`, `Standard_D12`, `Standard_D12_v2`, `Standard_D1_v2`, `Standard_DS5_v2`, `Standard_DS4`, `Standard_DS4_v2`, `Standard_DS1`, `Standard_DS15_v2`, `Standard_DS14`, `Standard_DS14-8_v2`, `Standard_DS14-4_v2`, `Standard_DS14_v2`, `Standard_DS11`, `Standard_DS11_v2`, `Standard_DS13`, `Standard_DS13-4_v2`, `Standard_DS13-2_v2`, `Standard_DS13_v2`, `Standard_DS12`, `Standard_DS12_v2`, `Standard_DS1_v2`, `Standard_DS3`, `Standard_DS3_v2`, `Standard_DS2`, `Standard_DS2_v2`, `Standard_D64_v3`, `Standard_D64s_v3`, `Standard_D3`, `Standard_D32_v3`, `Standard_D32s_v3`, `Standard_D3_v2`, `Standard_D2`, `Standard_D2_v3`, `Standard_D2_v2`, `Standard_D2s_v3`, `Standard_E8_v3`, `Standard_E8s_v3`, `Standard_E4_v3`, `Standard_E4s_v3`, `Standard_E16_v3`, `Standard_E16s_v3`, `Standard_E64-16s_v3`, `Standard_E64-32s_v3`, `Standard_E64_v3`, `Standard_E64s_v3`, `Standard_E32-8s_v3`, `Standard_E32-16_v3`, `Standard_E32_v3`, `Standard_E32s_v3`, `Standard_E2_v3`, `Standard_E2s_v3`, `Standard_F8`, `Standard_F8s`, `Standard_F8s_v2`, `Standard_F4`, `Standard_F4s`, `Standard_F4s_v2`, `Standard_F1`, `Standard_F16`, `Standard_F16s`, `Standard_F16s_v2`, `Standard_F1s`, `Standard_F72s_v2`, `Standard_F64s_v2`, `Standard_F32s_v2`, `Standard_F2`, `Standard_F2s`, `Standard_F2s_v2`, `Standard_G5`, `Standard_G4`, `Standard_G1`, `Standard_GS5`, `Standard_GS5-8`, `Standard_GS5-16`, `Standard_GS4`, `Standard_GS4-8`, `Standard_GS4-4`, `Standard_GS1`, `Standard_GS3`, `Standard_GS2`, `Standard_G3`, `Standard_G2`, `Standard_H8`, `Standard_H8m`, `Standard_H16`, `Standard_H16m`, `Standard_H16mr`, `Standard_H16r`, `Standard_L8s`, `Standard_L4s`, `Standard_L16s`, `Standard_L32s`, `Standard_M128-64ms`, `Standard_M128-32ms`, `Standard_M128ms`, `Standard_M128s`, `Standard_M64-16ms`, `Standard_M64-32ms`, `Standard_M64ms`, `Standard_M64s`, `Standard_NC12`, `Standard_NC12s_v3`, `Standard_NC12s_v2`, `Standard_NC6`, `Standard_NC6s_v3`, `Standard_NC6s_v2`, `Standard_NC24`, `Standard_NC24r`, `Standard_NC24rs_v3`, `Standard_NC24rs_v2`, `Standard_NC24s_v3`, `Standard_NC24s_v2`, `Standard_ND12s`, `Standard_ND6s`, `Standard_ND24rs`, `Standard_ND24s`, `Standard_NV12`, `Standard_NV6` and `Standard_NV24`.
func (o PlacementGroupOutput) AllowedVmSizes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PlacementGroup) pulumi.StringArrayOutput { return v.AllowedVmSizes }).(pulumi.StringArrayOutput)
}

// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
func (o PlacementGroupOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *PlacementGroup) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name of the proximity placement group. Changing this forces a new resource to be created.
func (o PlacementGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PlacementGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the resource group in which to create the availability set. Changing this forces a new resource to be created.
func (o PlacementGroupOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *PlacementGroup) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o PlacementGroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PlacementGroup) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the supported zone of the Proximity Placement Group. Changing this forces a new resource to be created.
func (o PlacementGroupOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlacementGroup) pulumi.StringPtrOutput { return v.Zone }).(pulumi.StringPtrOutput)
}

type PlacementGroupArrayOutput struct{ *pulumi.OutputState }

func (PlacementGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PlacementGroup)(nil)).Elem()
}

func (o PlacementGroupArrayOutput) ToPlacementGroupArrayOutput() PlacementGroupArrayOutput {
	return o
}

func (o PlacementGroupArrayOutput) ToPlacementGroupArrayOutputWithContext(ctx context.Context) PlacementGroupArrayOutput {
	return o
}

func (o PlacementGroupArrayOutput) Index(i pulumi.IntInput) PlacementGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PlacementGroup {
		return vs[0].([]*PlacementGroup)[vs[1].(int)]
	}).(PlacementGroupOutput)
}

type PlacementGroupMapOutput struct{ *pulumi.OutputState }

func (PlacementGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PlacementGroup)(nil)).Elem()
}

func (o PlacementGroupMapOutput) ToPlacementGroupMapOutput() PlacementGroupMapOutput {
	return o
}

func (o PlacementGroupMapOutput) ToPlacementGroupMapOutputWithContext(ctx context.Context) PlacementGroupMapOutput {
	return o
}

func (o PlacementGroupMapOutput) MapIndex(k pulumi.StringInput) PlacementGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PlacementGroup {
		return vs[0].(map[string]*PlacementGroup)[vs[1].(string)]
	}).(PlacementGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PlacementGroupInput)(nil)).Elem(), &PlacementGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlacementGroupArrayInput)(nil)).Elem(), PlacementGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlacementGroupMapInput)(nil)).Elem(), PlacementGroupMap{})
	pulumi.RegisterOutputType(PlacementGroupOutput{})
	pulumi.RegisterOutputType(PlacementGroupArrayOutput{})
	pulumi.RegisterOutputType(PlacementGroupMapOutput{})
}
