// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a Windows Virtual Machine.
//
// ## Disclaimers
//
// > **Note** This provider will automatically remove the OS Disk by default - this behaviour can be configured using the `features` setting within the Provider block.
//
// > **Note** All arguments including the administrator login and password will be stored in the raw state as plain-text.
//
// > **Note** This resource does not support Unmanaged Disks. If you need to use Unmanaged Disks you can continue to use the `compute.VirtualMachine` resource instead.
//
// > **Note** This resource does not support attaching existing OS Disks. You can instead capture an image of the OS Disk or continue to use the `compute.VirtualMachine` resource instead.
//
// > In this release there's a known issue where the `publicIpAddress` and `publicIpAddresses` fields may not be fully populated for Dynamic Public IP's.
//
// ## Example Usage
//
// This example provisions a basic Windows Virtual Machine on an internal network.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/compute"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "exampleVirtualNetwork", &network.VirtualNetworkArgs{
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			exampleSubnet, err := network.NewSubnet(ctx, "exampleSubnet", &network.SubnetArgs{
//				ResourceGroupName:  exampleResourceGroup.Name,
//				VirtualNetworkName: exampleVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.0.2.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleNetworkInterface, err := network.NewNetworkInterface(ctx, "exampleNetworkInterface", &network.NetworkInterfaceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				IpConfigurations: network.NetworkInterfaceIpConfigurationArray{
//					&network.NetworkInterfaceIpConfigurationArgs{
//						Name:                       pulumi.String("internal"),
//						SubnetId:                   exampleSubnet.ID(),
//						PrivateIpAddressAllocation: pulumi.String("Dynamic"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewWindowsVirtualMachine(ctx, "exampleWindowsVirtualMachine", &compute.WindowsVirtualMachineArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				Size:              pulumi.String("Standard_F2"),
//				AdminUsername:     pulumi.String("adminuser"),
//				AdminPassword:     pulumi.String("P@$$w0rd1234!"),
//				NetworkInterfaceIds: pulumi.StringArray{
//					exampleNetworkInterface.ID(),
//				},
//				OsDisk: &compute.WindowsVirtualMachineOsDiskArgs{
//					Caching:            pulumi.String("ReadWrite"),
//					StorageAccountType: pulumi.String("Standard_LRS"),
//				},
//				SourceImageReference: &compute.WindowsVirtualMachineSourceImageReferenceArgs{
//					Publisher: pulumi.String("MicrosoftWindowsServer"),
//					Offer:     pulumi.String("WindowsServer"),
//					Sku:       pulumi.String("2016-Datacenter"),
//					Version:   pulumi.String("latest"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Windows Virtual Machines can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:compute/windowsVirtualMachine:WindowsVirtualMachine example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Compute/virtualMachines/machine1
//
// ```
type WindowsVirtualMachine struct {
	pulumi.CustomResourceState

	// A `additionalCapabilities` block as defined below.
	AdditionalCapabilities WindowsVirtualMachineAdditionalCapabilitiesPtrOutput `pulumi:"additionalCapabilities"`
	// One or more `additionalUnattendContent` blocks as defined below. Changing this forces a new resource to be created.
	AdditionalUnattendContents WindowsVirtualMachineAdditionalUnattendContentArrayOutput `pulumi:"additionalUnattendContents"`
	// The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
	AdminPassword pulumi.StringOutput `pulumi:"adminPassword"`
	// The username of the local administrator used for the Virtual Machine. Changing this forces a new resource to be created.
	AdminUsername pulumi.StringOutput `pulumi:"adminUsername"`
	// Should Extension Operations be allowed on this Virtual Machine? Defaults to `true`.
	AllowExtensionOperations pulumi.BoolPtrOutput `pulumi:"allowExtensionOperations"`
	// Specifies the ID of the Availability Set in which the Virtual Machine should exist. Changing this forces a new resource to be created.
	AvailabilitySetId pulumi.StringPtrOutput `pulumi:"availabilitySetId"`
	// A `bootDiagnostics` block as defined below.
	BootDiagnostics WindowsVirtualMachineBootDiagnosticsPtrOutput `pulumi:"bootDiagnostics"`
	// Specifies whether to skip platform scheduled patching when a user schedule is associated with the VM. Defaults to `false`.
	//
	// > **NOTE:** `bypassPlatformSafetyChecksOnUserScheduleEnabled` can only be set to `true` when `patchMode` is set to `AutomaticByPlatform`.
	BypassPlatformSafetyChecksOnUserScheduleEnabled pulumi.BoolPtrOutput `pulumi:"bypassPlatformSafetyChecksOnUserScheduleEnabled"`
	// Specifies the ID of the Capacity Reservation Group which the Virtual Machine should be allocated to.
	//
	// > **NOTE:** `capacityReservationGroupId` cannot be used with `availabilitySetId` or `proximityPlacementGroupId`
	CapacityReservationGroupId pulumi.StringPtrOutput `pulumi:"capacityReservationGroupId"`
	// Specifies the Hostname which should be used for this Virtual Machine. If unspecified this defaults to the value for the `name` field. If the value of the `name` field is not a valid `computerName`, then you must specify `computerName`. Changing this forces a new resource to be created.
	ComputerName pulumi.StringOutput `pulumi:"computerName"`
	// The Base64-Encoded Custom Data which should be used for this Virtual Machine. Changing this forces a new resource to be created.
	CustomData pulumi.StringPtrOutput `pulumi:"customData"`
	// The ID of a Dedicated Host Group that this Windows Virtual Machine should be run within. Conflicts with `dedicatedHostId`.
	DedicatedHostGroupId pulumi.StringPtrOutput `pulumi:"dedicatedHostGroupId"`
	// The ID of a Dedicated Host where this machine should be run on. Conflicts with `dedicatedHostGroupId`.
	DedicatedHostId pulumi.StringPtrOutput `pulumi:"dedicatedHostId"`
	// Specifies the Edge Zone within the Azure Region where this Windows Virtual Machine should exist. Changing this forces a new Windows Virtual Machine to be created.
	EdgeZone pulumi.StringPtrOutput `pulumi:"edgeZone"`
	// Specifies if Automatic Updates are Enabled for the Windows Virtual Machine. Changing this forces a new resource to be created. Defaults to `true`.
	EnableAutomaticUpdates pulumi.BoolPtrOutput `pulumi:"enableAutomaticUpdates"`
	// Should all of the disks (including the temp disk) attached to this Virtual Machine be encrypted by enabling Encryption at Host?
	EncryptionAtHostEnabled pulumi.BoolPtrOutput `pulumi:"encryptionAtHostEnabled"`
	// Specifies what should happen when the Virtual Machine is evicted for price reasons when using a Spot instance. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** This can only be configured when `priority` is set to `Spot`.
	EvictionPolicy pulumi.StringPtrOutput `pulumi:"evictionPolicy"`
	// Specifies the duration allocated for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. Defaults to `PT1H30M`.
	ExtensionsTimeBudget pulumi.StringPtrOutput `pulumi:"extensionsTimeBudget"`
	// One or more `galleryApplication` blocks as defined below.
	GalleryApplications WindowsVirtualMachineGalleryApplicationArrayOutput `pulumi:"galleryApplications"`
	HotpatchingEnabled  pulumi.BoolPtrOutput                               `pulumi:"hotpatchingEnabled"`
	// An `identity` block as defined below.
	Identity WindowsVirtualMachineIdentityPtrOutput `pulumi:"identity"`
	// Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/windows-server/get-started/azure-hybrid-benefit)) which should be used for this Virtual Machine. Possible values are `None`, `Windows_Client` and `Windows_Server`.
	LicenseType pulumi.StringPtrOutput `pulumi:"licenseType"`
	// The Azure location where the Windows Virtual Machine should exist. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The maximum price you're willing to pay for this Virtual Machine, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machine will be evicted using the `evictionPolicy`. Defaults to `-1`, which means that the Virtual Machine should not be evicted for price reasons.
	//
	// > **NOTE:** This can only be configured when `priority` is set to `Spot`.
	MaxBidPrice pulumi.Float64PtrOutput `pulumi:"maxBidPrice"`
	// The name of the Windows Virtual Machine. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// . A list of Network Interface IDs which should be attached to this Virtual Machine. The first Network Interface ID in this list will be the Primary Network Interface on the Virtual Machine.
	NetworkInterfaceIds pulumi.StringArrayOutput `pulumi:"networkInterfaceIds"`
	// A `osDisk` block as defined below.
	OsDisk WindowsVirtualMachineOsDiskOutput `pulumi:"osDisk"`
	// Specifies the mode of VM Guest Patching for the Virtual Machine. Possible values are `AutomaticByPlatform` or `ImageDefault`. Defaults to `ImageDefault`.
	//
	// > **NOTE:** If the `patchAssessmentMode` is set to `AutomaticByPlatform` then the `provisionVmAgent` field must be set to `true`.
	PatchAssessmentMode pulumi.StringPtrOutput `pulumi:"patchAssessmentMode"`
	// Specifies the mode of in-guest patching to this Windows Virtual Machine. Possible values are `Manual`, `AutomaticByOS` and `AutomaticByPlatform`. Defaults to `AutomaticByOS`. For more information on patch modes please see the [product documentation](https://docs.microsoft.com/azure/virtual-machines/automatic-vm-guest-patching#patch-orchestration-modes).
	//
	// > **NOTE:** If `patchMode` is set to `AutomaticByPlatform` then `provisionVmAgent` must also be set to `true`. If the Virtual Machine is using a hotpatching enabled image the `patchMode` must always be set to `AutomaticByPlatform`.
	PatchMode pulumi.StringPtrOutput `pulumi:"patchMode"`
	// A `plan` block as defined below. Changing this forces a new resource to be created.
	Plan WindowsVirtualMachinePlanPtrOutput `pulumi:"plan"`
	// Specifies the Platform Fault Domain in which this Windows Virtual Machine should be created. Defaults to `-1`, which means this will be automatically assigned to a fault domain that best maintains balance across the available fault domains. Changing this forces a new Windows Virtual Machine to be created.
	PlatformFaultDomain pulumi.IntPtrOutput `pulumi:"platformFaultDomain"`
	// Specifies the priority of this Virtual Machine. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this forces a new resource to be created.
	Priority pulumi.StringPtrOutput `pulumi:"priority"`
	// The Primary Private IP Address assigned to this Virtual Machine.
	PrivateIpAddress pulumi.StringOutput `pulumi:"privateIpAddress"`
	// A list of Private IP Addresses assigned to this Virtual Machine.
	PrivateIpAddresses pulumi.StringArrayOutput `pulumi:"privateIpAddresses"`
	// Should the Azure VM Agent be provisioned on this Virtual Machine? Defaults to `true`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** If `provisionVmAgent` is set to `false` then `allowExtensionOperations` must also be set to `false`.
	ProvisionVmAgent pulumi.BoolPtrOutput `pulumi:"provisionVmAgent"`
	// The ID of the Proximity Placement Group which the Virtual Machine should be assigned to.
	ProximityPlacementGroupId pulumi.StringPtrOutput `pulumi:"proximityPlacementGroupId"`
	// The Primary Public IP Address assigned to this Virtual Machine.
	PublicIpAddress pulumi.StringOutput `pulumi:"publicIpAddress"`
	// A list of the Public IP Addresses assigned to this Virtual Machine.
	PublicIpAddresses pulumi.StringArrayOutput `pulumi:"publicIpAddresses"`
	// Specifies the reboot setting for platform scheduled patching. Possible values are `Always`, `IfRequired` and `Never`.
	//
	// > **NOTE:** `rebootSetting` can only be set when `patchMode` is set to `AutomaticByPlatform`.
	RebootSetting pulumi.StringPtrOutput `pulumi:"rebootSetting"`
	// The name of the Resource Group in which the Windows Virtual Machine should be exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// One or more `secret` blocks as defined below.
	Secrets WindowsVirtualMachineSecretArrayOutput `pulumi:"secrets"`
	// Specifies if Secure Boot and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
	SecureBootEnabled pulumi.BoolPtrOutput `pulumi:"secureBootEnabled"`
	// The SKU which should be used for this Virtual Machine, such as `Standard_F2`.
	Size pulumi.StringOutput `pulumi:"size"`
	// The ID of the Image which this Virtual Machine should be created from. Changing this forces a new resource to be created. Possible Image ID types include `Image ID`s, `Shared Image ID`s, `Shared Image Version ID`s, `Community Gallery Image ID`s, `Community Gallery Image Version ID`s, `Shared Gallery Image ID`s and `Shared Gallery Image Version ID`s.
	//
	// > **NOTE:** One of either `sourceImageId` or `sourceImageReference` must be set.
	SourceImageId pulumi.StringPtrOutput `pulumi:"sourceImageId"`
	// A `sourceImageReference` block as defined below. Changing this forces a new resource to be created.
	//
	// > **NOTE:** One of either `sourceImageId` or `sourceImageReference` must be set.
	SourceImageReference WindowsVirtualMachineSourceImageReferencePtrOutput `pulumi:"sourceImageReference"`
	// A mapping of tags which should be assigned to this Virtual Machine.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A `terminationNotification` block as defined below.
	TerminationNotification WindowsVirtualMachineTerminationNotificationOutput `pulumi:"terminationNotification"`
	// Specifies the Time Zone which should be used by the Virtual Machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/). Changing this forces a new resource to be created.
	Timezone pulumi.StringPtrOutput `pulumi:"timezone"`
	// The Base64-Encoded User Data which should be used for this Virtual Machine.
	UserData pulumi.StringPtrOutput `pulumi:"userData"`
	// A 128-bit identifier which uniquely identifies this Virtual Machine.
	VirtualMachineId pulumi.StringOutput `pulumi:"virtualMachineId"`
	// Specifies the Orchestrated Virtual Machine Scale Set that this Virtual Machine should be created within. Changing this forces a new resource to be created.
	//
	// > **NOTE:** Orchestrated Virtual Machine Scale Sets can be provisioned using [the `compute.OrchestratedVirtualMachineScaleSet` resource](https://www.terraform.io/docs/providers/azurerm/r/orchestrated_virtual_machine_scale_set.html).
	VirtualMachineScaleSetId pulumi.StringPtrOutput `pulumi:"virtualMachineScaleSetId"`
	// Specifies if vTPM (virtual Trusted Platform Module) and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
	VtpmEnabled pulumi.BoolPtrOutput `pulumi:"vtpmEnabled"`
	// One or more `winrmListener` blocks as defined below. Changing this forces a new resource to be created.
	WinrmListeners WindowsVirtualMachineWinrmListenerArrayOutput `pulumi:"winrmListeners"`
	// * `zones` - (Optional) Specifies the Availability Zone in which this Windows Virtual Machine should be located. Changing this forces a new Windows Virtual Machine to be created.
	Zone pulumi.StringPtrOutput `pulumi:"zone"`
}

// NewWindowsVirtualMachine registers a new resource with the given unique name, arguments, and options.
func NewWindowsVirtualMachine(ctx *pulumi.Context,
	name string, args *WindowsVirtualMachineArgs, opts ...pulumi.ResourceOption) (*WindowsVirtualMachine, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminPassword == nil {
		return nil, errors.New("invalid value for required argument 'AdminPassword'")
	}
	if args.AdminUsername == nil {
		return nil, errors.New("invalid value for required argument 'AdminUsername'")
	}
	if args.NetworkInterfaceIds == nil {
		return nil, errors.New("invalid value for required argument 'NetworkInterfaceIds'")
	}
	if args.OsDisk == nil {
		return nil, errors.New("invalid value for required argument 'OsDisk'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	if args.AdminPassword != nil {
		args.AdminPassword = pulumi.ToSecret(args.AdminPassword).(pulumi.StringInput)
	}
	if args.CustomData != nil {
		args.CustomData = pulumi.ToSecret(args.CustomData).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"adminPassword",
		"customData",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WindowsVirtualMachine
	err := ctx.RegisterResource("azure:compute/windowsVirtualMachine:WindowsVirtualMachine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWindowsVirtualMachine gets an existing WindowsVirtualMachine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWindowsVirtualMachine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WindowsVirtualMachineState, opts ...pulumi.ResourceOption) (*WindowsVirtualMachine, error) {
	var resource WindowsVirtualMachine
	err := ctx.ReadResource("azure:compute/windowsVirtualMachine:WindowsVirtualMachine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WindowsVirtualMachine resources.
type windowsVirtualMachineState struct {
	// A `additionalCapabilities` block as defined below.
	AdditionalCapabilities *WindowsVirtualMachineAdditionalCapabilities `pulumi:"additionalCapabilities"`
	// One or more `additionalUnattendContent` blocks as defined below. Changing this forces a new resource to be created.
	AdditionalUnattendContents []WindowsVirtualMachineAdditionalUnattendContent `pulumi:"additionalUnattendContents"`
	// The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
	AdminPassword *string `pulumi:"adminPassword"`
	// The username of the local administrator used for the Virtual Machine. Changing this forces a new resource to be created.
	AdminUsername *string `pulumi:"adminUsername"`
	// Should Extension Operations be allowed on this Virtual Machine? Defaults to `true`.
	AllowExtensionOperations *bool `pulumi:"allowExtensionOperations"`
	// Specifies the ID of the Availability Set in which the Virtual Machine should exist. Changing this forces a new resource to be created.
	AvailabilitySetId *string `pulumi:"availabilitySetId"`
	// A `bootDiagnostics` block as defined below.
	BootDiagnostics *WindowsVirtualMachineBootDiagnostics `pulumi:"bootDiagnostics"`
	// Specifies whether to skip platform scheduled patching when a user schedule is associated with the VM. Defaults to `false`.
	//
	// > **NOTE:** `bypassPlatformSafetyChecksOnUserScheduleEnabled` can only be set to `true` when `patchMode` is set to `AutomaticByPlatform`.
	BypassPlatformSafetyChecksOnUserScheduleEnabled *bool `pulumi:"bypassPlatformSafetyChecksOnUserScheduleEnabled"`
	// Specifies the ID of the Capacity Reservation Group which the Virtual Machine should be allocated to.
	//
	// > **NOTE:** `capacityReservationGroupId` cannot be used with `availabilitySetId` or `proximityPlacementGroupId`
	CapacityReservationGroupId *string `pulumi:"capacityReservationGroupId"`
	// Specifies the Hostname which should be used for this Virtual Machine. If unspecified this defaults to the value for the `name` field. If the value of the `name` field is not a valid `computerName`, then you must specify `computerName`. Changing this forces a new resource to be created.
	ComputerName *string `pulumi:"computerName"`
	// The Base64-Encoded Custom Data which should be used for this Virtual Machine. Changing this forces a new resource to be created.
	CustomData *string `pulumi:"customData"`
	// The ID of a Dedicated Host Group that this Windows Virtual Machine should be run within. Conflicts with `dedicatedHostId`.
	DedicatedHostGroupId *string `pulumi:"dedicatedHostGroupId"`
	// The ID of a Dedicated Host where this machine should be run on. Conflicts with `dedicatedHostGroupId`.
	DedicatedHostId *string `pulumi:"dedicatedHostId"`
	// Specifies the Edge Zone within the Azure Region where this Windows Virtual Machine should exist. Changing this forces a new Windows Virtual Machine to be created.
	EdgeZone *string `pulumi:"edgeZone"`
	// Specifies if Automatic Updates are Enabled for the Windows Virtual Machine. Changing this forces a new resource to be created. Defaults to `true`.
	EnableAutomaticUpdates *bool `pulumi:"enableAutomaticUpdates"`
	// Should all of the disks (including the temp disk) attached to this Virtual Machine be encrypted by enabling Encryption at Host?
	EncryptionAtHostEnabled *bool `pulumi:"encryptionAtHostEnabled"`
	// Specifies what should happen when the Virtual Machine is evicted for price reasons when using a Spot instance. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** This can only be configured when `priority` is set to `Spot`.
	EvictionPolicy *string `pulumi:"evictionPolicy"`
	// Specifies the duration allocated for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. Defaults to `PT1H30M`.
	ExtensionsTimeBudget *string `pulumi:"extensionsTimeBudget"`
	// One or more `galleryApplication` blocks as defined below.
	GalleryApplications []WindowsVirtualMachineGalleryApplication `pulumi:"galleryApplications"`
	HotpatchingEnabled  *bool                                     `pulumi:"hotpatchingEnabled"`
	// An `identity` block as defined below.
	Identity *WindowsVirtualMachineIdentity `pulumi:"identity"`
	// Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/windows-server/get-started/azure-hybrid-benefit)) which should be used for this Virtual Machine. Possible values are `None`, `Windows_Client` and `Windows_Server`.
	LicenseType *string `pulumi:"licenseType"`
	// The Azure location where the Windows Virtual Machine should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The maximum price you're willing to pay for this Virtual Machine, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machine will be evicted using the `evictionPolicy`. Defaults to `-1`, which means that the Virtual Machine should not be evicted for price reasons.
	//
	// > **NOTE:** This can only be configured when `priority` is set to `Spot`.
	MaxBidPrice *float64 `pulumi:"maxBidPrice"`
	// The name of the Windows Virtual Machine. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// . A list of Network Interface IDs which should be attached to this Virtual Machine. The first Network Interface ID in this list will be the Primary Network Interface on the Virtual Machine.
	NetworkInterfaceIds []string `pulumi:"networkInterfaceIds"`
	// A `osDisk` block as defined below.
	OsDisk *WindowsVirtualMachineOsDisk `pulumi:"osDisk"`
	// Specifies the mode of VM Guest Patching for the Virtual Machine. Possible values are `AutomaticByPlatform` or `ImageDefault`. Defaults to `ImageDefault`.
	//
	// > **NOTE:** If the `patchAssessmentMode` is set to `AutomaticByPlatform` then the `provisionVmAgent` field must be set to `true`.
	PatchAssessmentMode *string `pulumi:"patchAssessmentMode"`
	// Specifies the mode of in-guest patching to this Windows Virtual Machine. Possible values are `Manual`, `AutomaticByOS` and `AutomaticByPlatform`. Defaults to `AutomaticByOS`. For more information on patch modes please see the [product documentation](https://docs.microsoft.com/azure/virtual-machines/automatic-vm-guest-patching#patch-orchestration-modes).
	//
	// > **NOTE:** If `patchMode` is set to `AutomaticByPlatform` then `provisionVmAgent` must also be set to `true`. If the Virtual Machine is using a hotpatching enabled image the `patchMode` must always be set to `AutomaticByPlatform`.
	PatchMode *string `pulumi:"patchMode"`
	// A `plan` block as defined below. Changing this forces a new resource to be created.
	Plan *WindowsVirtualMachinePlan `pulumi:"plan"`
	// Specifies the Platform Fault Domain in which this Windows Virtual Machine should be created. Defaults to `-1`, which means this will be automatically assigned to a fault domain that best maintains balance across the available fault domains. Changing this forces a new Windows Virtual Machine to be created.
	PlatformFaultDomain *int `pulumi:"platformFaultDomain"`
	// Specifies the priority of this Virtual Machine. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this forces a new resource to be created.
	Priority *string `pulumi:"priority"`
	// The Primary Private IP Address assigned to this Virtual Machine.
	PrivateIpAddress *string `pulumi:"privateIpAddress"`
	// A list of Private IP Addresses assigned to this Virtual Machine.
	PrivateIpAddresses []string `pulumi:"privateIpAddresses"`
	// Should the Azure VM Agent be provisioned on this Virtual Machine? Defaults to `true`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** If `provisionVmAgent` is set to `false` then `allowExtensionOperations` must also be set to `false`.
	ProvisionVmAgent *bool `pulumi:"provisionVmAgent"`
	// The ID of the Proximity Placement Group which the Virtual Machine should be assigned to.
	ProximityPlacementGroupId *string `pulumi:"proximityPlacementGroupId"`
	// The Primary Public IP Address assigned to this Virtual Machine.
	PublicIpAddress *string `pulumi:"publicIpAddress"`
	// A list of the Public IP Addresses assigned to this Virtual Machine.
	PublicIpAddresses []string `pulumi:"publicIpAddresses"`
	// Specifies the reboot setting for platform scheduled patching. Possible values are `Always`, `IfRequired` and `Never`.
	//
	// > **NOTE:** `rebootSetting` can only be set when `patchMode` is set to `AutomaticByPlatform`.
	RebootSetting *string `pulumi:"rebootSetting"`
	// The name of the Resource Group in which the Windows Virtual Machine should be exist. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// One or more `secret` blocks as defined below.
	Secrets []WindowsVirtualMachineSecret `pulumi:"secrets"`
	// Specifies if Secure Boot and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
	SecureBootEnabled *bool `pulumi:"secureBootEnabled"`
	// The SKU which should be used for this Virtual Machine, such as `Standard_F2`.
	Size *string `pulumi:"size"`
	// The ID of the Image which this Virtual Machine should be created from. Changing this forces a new resource to be created. Possible Image ID types include `Image ID`s, `Shared Image ID`s, `Shared Image Version ID`s, `Community Gallery Image ID`s, `Community Gallery Image Version ID`s, `Shared Gallery Image ID`s and `Shared Gallery Image Version ID`s.
	//
	// > **NOTE:** One of either `sourceImageId` or `sourceImageReference` must be set.
	SourceImageId *string `pulumi:"sourceImageId"`
	// A `sourceImageReference` block as defined below. Changing this forces a new resource to be created.
	//
	// > **NOTE:** One of either `sourceImageId` or `sourceImageReference` must be set.
	SourceImageReference *WindowsVirtualMachineSourceImageReference `pulumi:"sourceImageReference"`
	// A mapping of tags which should be assigned to this Virtual Machine.
	Tags map[string]string `pulumi:"tags"`
	// A `terminationNotification` block as defined below.
	TerminationNotification *WindowsVirtualMachineTerminationNotification `pulumi:"terminationNotification"`
	// Specifies the Time Zone which should be used by the Virtual Machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/). Changing this forces a new resource to be created.
	Timezone *string `pulumi:"timezone"`
	// The Base64-Encoded User Data which should be used for this Virtual Machine.
	UserData *string `pulumi:"userData"`
	// A 128-bit identifier which uniquely identifies this Virtual Machine.
	VirtualMachineId *string `pulumi:"virtualMachineId"`
	// Specifies the Orchestrated Virtual Machine Scale Set that this Virtual Machine should be created within. Changing this forces a new resource to be created.
	//
	// > **NOTE:** Orchestrated Virtual Machine Scale Sets can be provisioned using [the `compute.OrchestratedVirtualMachineScaleSet` resource](https://www.terraform.io/docs/providers/azurerm/r/orchestrated_virtual_machine_scale_set.html).
	VirtualMachineScaleSetId *string `pulumi:"virtualMachineScaleSetId"`
	// Specifies if vTPM (virtual Trusted Platform Module) and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
	VtpmEnabled *bool `pulumi:"vtpmEnabled"`
	// One or more `winrmListener` blocks as defined below. Changing this forces a new resource to be created.
	WinrmListeners []WindowsVirtualMachineWinrmListener `pulumi:"winrmListeners"`
	// * `zones` - (Optional) Specifies the Availability Zone in which this Windows Virtual Machine should be located. Changing this forces a new Windows Virtual Machine to be created.
	Zone *string `pulumi:"zone"`
}

type WindowsVirtualMachineState struct {
	// A `additionalCapabilities` block as defined below.
	AdditionalCapabilities WindowsVirtualMachineAdditionalCapabilitiesPtrInput
	// One or more `additionalUnattendContent` blocks as defined below. Changing this forces a new resource to be created.
	AdditionalUnattendContents WindowsVirtualMachineAdditionalUnattendContentArrayInput
	// The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
	AdminPassword pulumi.StringPtrInput
	// The username of the local administrator used for the Virtual Machine. Changing this forces a new resource to be created.
	AdminUsername pulumi.StringPtrInput
	// Should Extension Operations be allowed on this Virtual Machine? Defaults to `true`.
	AllowExtensionOperations pulumi.BoolPtrInput
	// Specifies the ID of the Availability Set in which the Virtual Machine should exist. Changing this forces a new resource to be created.
	AvailabilitySetId pulumi.StringPtrInput
	// A `bootDiagnostics` block as defined below.
	BootDiagnostics WindowsVirtualMachineBootDiagnosticsPtrInput
	// Specifies whether to skip platform scheduled patching when a user schedule is associated with the VM. Defaults to `false`.
	//
	// > **NOTE:** `bypassPlatformSafetyChecksOnUserScheduleEnabled` can only be set to `true` when `patchMode` is set to `AutomaticByPlatform`.
	BypassPlatformSafetyChecksOnUserScheduleEnabled pulumi.BoolPtrInput
	// Specifies the ID of the Capacity Reservation Group which the Virtual Machine should be allocated to.
	//
	// > **NOTE:** `capacityReservationGroupId` cannot be used with `availabilitySetId` or `proximityPlacementGroupId`
	CapacityReservationGroupId pulumi.StringPtrInput
	// Specifies the Hostname which should be used for this Virtual Machine. If unspecified this defaults to the value for the `name` field. If the value of the `name` field is not a valid `computerName`, then you must specify `computerName`. Changing this forces a new resource to be created.
	ComputerName pulumi.StringPtrInput
	// The Base64-Encoded Custom Data which should be used for this Virtual Machine. Changing this forces a new resource to be created.
	CustomData pulumi.StringPtrInput
	// The ID of a Dedicated Host Group that this Windows Virtual Machine should be run within. Conflicts with `dedicatedHostId`.
	DedicatedHostGroupId pulumi.StringPtrInput
	// The ID of a Dedicated Host where this machine should be run on. Conflicts with `dedicatedHostGroupId`.
	DedicatedHostId pulumi.StringPtrInput
	// Specifies the Edge Zone within the Azure Region where this Windows Virtual Machine should exist. Changing this forces a new Windows Virtual Machine to be created.
	EdgeZone pulumi.StringPtrInput
	// Specifies if Automatic Updates are Enabled for the Windows Virtual Machine. Changing this forces a new resource to be created. Defaults to `true`.
	EnableAutomaticUpdates pulumi.BoolPtrInput
	// Should all of the disks (including the temp disk) attached to this Virtual Machine be encrypted by enabling Encryption at Host?
	EncryptionAtHostEnabled pulumi.BoolPtrInput
	// Specifies what should happen when the Virtual Machine is evicted for price reasons when using a Spot instance. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** This can only be configured when `priority` is set to `Spot`.
	EvictionPolicy pulumi.StringPtrInput
	// Specifies the duration allocated for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. Defaults to `PT1H30M`.
	ExtensionsTimeBudget pulumi.StringPtrInput
	// One or more `galleryApplication` blocks as defined below.
	GalleryApplications WindowsVirtualMachineGalleryApplicationArrayInput
	HotpatchingEnabled  pulumi.BoolPtrInput
	// An `identity` block as defined below.
	Identity WindowsVirtualMachineIdentityPtrInput
	// Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/windows-server/get-started/azure-hybrid-benefit)) which should be used for this Virtual Machine. Possible values are `None`, `Windows_Client` and `Windows_Server`.
	LicenseType pulumi.StringPtrInput
	// The Azure location where the Windows Virtual Machine should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The maximum price you're willing to pay for this Virtual Machine, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machine will be evicted using the `evictionPolicy`. Defaults to `-1`, which means that the Virtual Machine should not be evicted for price reasons.
	//
	// > **NOTE:** This can only be configured when `priority` is set to `Spot`.
	MaxBidPrice pulumi.Float64PtrInput
	// The name of the Windows Virtual Machine. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// . A list of Network Interface IDs which should be attached to this Virtual Machine. The first Network Interface ID in this list will be the Primary Network Interface on the Virtual Machine.
	NetworkInterfaceIds pulumi.StringArrayInput
	// A `osDisk` block as defined below.
	OsDisk WindowsVirtualMachineOsDiskPtrInput
	// Specifies the mode of VM Guest Patching for the Virtual Machine. Possible values are `AutomaticByPlatform` or `ImageDefault`. Defaults to `ImageDefault`.
	//
	// > **NOTE:** If the `patchAssessmentMode` is set to `AutomaticByPlatform` then the `provisionVmAgent` field must be set to `true`.
	PatchAssessmentMode pulumi.StringPtrInput
	// Specifies the mode of in-guest patching to this Windows Virtual Machine. Possible values are `Manual`, `AutomaticByOS` and `AutomaticByPlatform`. Defaults to `AutomaticByOS`. For more information on patch modes please see the [product documentation](https://docs.microsoft.com/azure/virtual-machines/automatic-vm-guest-patching#patch-orchestration-modes).
	//
	// > **NOTE:** If `patchMode` is set to `AutomaticByPlatform` then `provisionVmAgent` must also be set to `true`. If the Virtual Machine is using a hotpatching enabled image the `patchMode` must always be set to `AutomaticByPlatform`.
	PatchMode pulumi.StringPtrInput
	// A `plan` block as defined below. Changing this forces a new resource to be created.
	Plan WindowsVirtualMachinePlanPtrInput
	// Specifies the Platform Fault Domain in which this Windows Virtual Machine should be created. Defaults to `-1`, which means this will be automatically assigned to a fault domain that best maintains balance across the available fault domains. Changing this forces a new Windows Virtual Machine to be created.
	PlatformFaultDomain pulumi.IntPtrInput
	// Specifies the priority of this Virtual Machine. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this forces a new resource to be created.
	Priority pulumi.StringPtrInput
	// The Primary Private IP Address assigned to this Virtual Machine.
	PrivateIpAddress pulumi.StringPtrInput
	// A list of Private IP Addresses assigned to this Virtual Machine.
	PrivateIpAddresses pulumi.StringArrayInput
	// Should the Azure VM Agent be provisioned on this Virtual Machine? Defaults to `true`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** If `provisionVmAgent` is set to `false` then `allowExtensionOperations` must also be set to `false`.
	ProvisionVmAgent pulumi.BoolPtrInput
	// The ID of the Proximity Placement Group which the Virtual Machine should be assigned to.
	ProximityPlacementGroupId pulumi.StringPtrInput
	// The Primary Public IP Address assigned to this Virtual Machine.
	PublicIpAddress pulumi.StringPtrInput
	// A list of the Public IP Addresses assigned to this Virtual Machine.
	PublicIpAddresses pulumi.StringArrayInput
	// Specifies the reboot setting for platform scheduled patching. Possible values are `Always`, `IfRequired` and `Never`.
	//
	// > **NOTE:** `rebootSetting` can only be set when `patchMode` is set to `AutomaticByPlatform`.
	RebootSetting pulumi.StringPtrInput
	// The name of the Resource Group in which the Windows Virtual Machine should be exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// One or more `secret` blocks as defined below.
	Secrets WindowsVirtualMachineSecretArrayInput
	// Specifies if Secure Boot and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
	SecureBootEnabled pulumi.BoolPtrInput
	// The SKU which should be used for this Virtual Machine, such as `Standard_F2`.
	Size pulumi.StringPtrInput
	// The ID of the Image which this Virtual Machine should be created from. Changing this forces a new resource to be created. Possible Image ID types include `Image ID`s, `Shared Image ID`s, `Shared Image Version ID`s, `Community Gallery Image ID`s, `Community Gallery Image Version ID`s, `Shared Gallery Image ID`s and `Shared Gallery Image Version ID`s.
	//
	// > **NOTE:** One of either `sourceImageId` or `sourceImageReference` must be set.
	SourceImageId pulumi.StringPtrInput
	// A `sourceImageReference` block as defined below. Changing this forces a new resource to be created.
	//
	// > **NOTE:** One of either `sourceImageId` or `sourceImageReference` must be set.
	SourceImageReference WindowsVirtualMachineSourceImageReferencePtrInput
	// A mapping of tags which should be assigned to this Virtual Machine.
	Tags pulumi.StringMapInput
	// A `terminationNotification` block as defined below.
	TerminationNotification WindowsVirtualMachineTerminationNotificationPtrInput
	// Specifies the Time Zone which should be used by the Virtual Machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/). Changing this forces a new resource to be created.
	Timezone pulumi.StringPtrInput
	// The Base64-Encoded User Data which should be used for this Virtual Machine.
	UserData pulumi.StringPtrInput
	// A 128-bit identifier which uniquely identifies this Virtual Machine.
	VirtualMachineId pulumi.StringPtrInput
	// Specifies the Orchestrated Virtual Machine Scale Set that this Virtual Machine should be created within. Changing this forces a new resource to be created.
	//
	// > **NOTE:** Orchestrated Virtual Machine Scale Sets can be provisioned using [the `compute.OrchestratedVirtualMachineScaleSet` resource](https://www.terraform.io/docs/providers/azurerm/r/orchestrated_virtual_machine_scale_set.html).
	VirtualMachineScaleSetId pulumi.StringPtrInput
	// Specifies if vTPM (virtual Trusted Platform Module) and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
	VtpmEnabled pulumi.BoolPtrInput
	// One or more `winrmListener` blocks as defined below. Changing this forces a new resource to be created.
	WinrmListeners WindowsVirtualMachineWinrmListenerArrayInput
	// * `zones` - (Optional) Specifies the Availability Zone in which this Windows Virtual Machine should be located. Changing this forces a new Windows Virtual Machine to be created.
	Zone pulumi.StringPtrInput
}

func (WindowsVirtualMachineState) ElementType() reflect.Type {
	return reflect.TypeOf((*windowsVirtualMachineState)(nil)).Elem()
}

type windowsVirtualMachineArgs struct {
	// A `additionalCapabilities` block as defined below.
	AdditionalCapabilities *WindowsVirtualMachineAdditionalCapabilities `pulumi:"additionalCapabilities"`
	// One or more `additionalUnattendContent` blocks as defined below. Changing this forces a new resource to be created.
	AdditionalUnattendContents []WindowsVirtualMachineAdditionalUnattendContent `pulumi:"additionalUnattendContents"`
	// The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
	AdminPassword string `pulumi:"adminPassword"`
	// The username of the local administrator used for the Virtual Machine. Changing this forces a new resource to be created.
	AdminUsername string `pulumi:"adminUsername"`
	// Should Extension Operations be allowed on this Virtual Machine? Defaults to `true`.
	AllowExtensionOperations *bool `pulumi:"allowExtensionOperations"`
	// Specifies the ID of the Availability Set in which the Virtual Machine should exist. Changing this forces a new resource to be created.
	AvailabilitySetId *string `pulumi:"availabilitySetId"`
	// A `bootDiagnostics` block as defined below.
	BootDiagnostics *WindowsVirtualMachineBootDiagnostics `pulumi:"bootDiagnostics"`
	// Specifies whether to skip platform scheduled patching when a user schedule is associated with the VM. Defaults to `false`.
	//
	// > **NOTE:** `bypassPlatformSafetyChecksOnUserScheduleEnabled` can only be set to `true` when `patchMode` is set to `AutomaticByPlatform`.
	BypassPlatformSafetyChecksOnUserScheduleEnabled *bool `pulumi:"bypassPlatformSafetyChecksOnUserScheduleEnabled"`
	// Specifies the ID of the Capacity Reservation Group which the Virtual Machine should be allocated to.
	//
	// > **NOTE:** `capacityReservationGroupId` cannot be used with `availabilitySetId` or `proximityPlacementGroupId`
	CapacityReservationGroupId *string `pulumi:"capacityReservationGroupId"`
	// Specifies the Hostname which should be used for this Virtual Machine. If unspecified this defaults to the value for the `name` field. If the value of the `name` field is not a valid `computerName`, then you must specify `computerName`. Changing this forces a new resource to be created.
	ComputerName *string `pulumi:"computerName"`
	// The Base64-Encoded Custom Data which should be used for this Virtual Machine. Changing this forces a new resource to be created.
	CustomData *string `pulumi:"customData"`
	// The ID of a Dedicated Host Group that this Windows Virtual Machine should be run within. Conflicts with `dedicatedHostId`.
	DedicatedHostGroupId *string `pulumi:"dedicatedHostGroupId"`
	// The ID of a Dedicated Host where this machine should be run on. Conflicts with `dedicatedHostGroupId`.
	DedicatedHostId *string `pulumi:"dedicatedHostId"`
	// Specifies the Edge Zone within the Azure Region where this Windows Virtual Machine should exist. Changing this forces a new Windows Virtual Machine to be created.
	EdgeZone *string `pulumi:"edgeZone"`
	// Specifies if Automatic Updates are Enabled for the Windows Virtual Machine. Changing this forces a new resource to be created. Defaults to `true`.
	EnableAutomaticUpdates *bool `pulumi:"enableAutomaticUpdates"`
	// Should all of the disks (including the temp disk) attached to this Virtual Machine be encrypted by enabling Encryption at Host?
	EncryptionAtHostEnabled *bool `pulumi:"encryptionAtHostEnabled"`
	// Specifies what should happen when the Virtual Machine is evicted for price reasons when using a Spot instance. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** This can only be configured when `priority` is set to `Spot`.
	EvictionPolicy *string `pulumi:"evictionPolicy"`
	// Specifies the duration allocated for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. Defaults to `PT1H30M`.
	ExtensionsTimeBudget *string `pulumi:"extensionsTimeBudget"`
	// One or more `galleryApplication` blocks as defined below.
	GalleryApplications []WindowsVirtualMachineGalleryApplication `pulumi:"galleryApplications"`
	HotpatchingEnabled  *bool                                     `pulumi:"hotpatchingEnabled"`
	// An `identity` block as defined below.
	Identity *WindowsVirtualMachineIdentity `pulumi:"identity"`
	// Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/windows-server/get-started/azure-hybrid-benefit)) which should be used for this Virtual Machine. Possible values are `None`, `Windows_Client` and `Windows_Server`.
	LicenseType *string `pulumi:"licenseType"`
	// The Azure location where the Windows Virtual Machine should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The maximum price you're willing to pay for this Virtual Machine, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machine will be evicted using the `evictionPolicy`. Defaults to `-1`, which means that the Virtual Machine should not be evicted for price reasons.
	//
	// > **NOTE:** This can only be configured when `priority` is set to `Spot`.
	MaxBidPrice *float64 `pulumi:"maxBidPrice"`
	// The name of the Windows Virtual Machine. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// . A list of Network Interface IDs which should be attached to this Virtual Machine. The first Network Interface ID in this list will be the Primary Network Interface on the Virtual Machine.
	NetworkInterfaceIds []string `pulumi:"networkInterfaceIds"`
	// A `osDisk` block as defined below.
	OsDisk WindowsVirtualMachineOsDisk `pulumi:"osDisk"`
	// Specifies the mode of VM Guest Patching for the Virtual Machine. Possible values are `AutomaticByPlatform` or `ImageDefault`. Defaults to `ImageDefault`.
	//
	// > **NOTE:** If the `patchAssessmentMode` is set to `AutomaticByPlatform` then the `provisionVmAgent` field must be set to `true`.
	PatchAssessmentMode *string `pulumi:"patchAssessmentMode"`
	// Specifies the mode of in-guest patching to this Windows Virtual Machine. Possible values are `Manual`, `AutomaticByOS` and `AutomaticByPlatform`. Defaults to `AutomaticByOS`. For more information on patch modes please see the [product documentation](https://docs.microsoft.com/azure/virtual-machines/automatic-vm-guest-patching#patch-orchestration-modes).
	//
	// > **NOTE:** If `patchMode` is set to `AutomaticByPlatform` then `provisionVmAgent` must also be set to `true`. If the Virtual Machine is using a hotpatching enabled image the `patchMode` must always be set to `AutomaticByPlatform`.
	PatchMode *string `pulumi:"patchMode"`
	// A `plan` block as defined below. Changing this forces a new resource to be created.
	Plan *WindowsVirtualMachinePlan `pulumi:"plan"`
	// Specifies the Platform Fault Domain in which this Windows Virtual Machine should be created. Defaults to `-1`, which means this will be automatically assigned to a fault domain that best maintains balance across the available fault domains. Changing this forces a new Windows Virtual Machine to be created.
	PlatformFaultDomain *int `pulumi:"platformFaultDomain"`
	// Specifies the priority of this Virtual Machine. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this forces a new resource to be created.
	Priority *string `pulumi:"priority"`
	// Should the Azure VM Agent be provisioned on this Virtual Machine? Defaults to `true`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** If `provisionVmAgent` is set to `false` then `allowExtensionOperations` must also be set to `false`.
	ProvisionVmAgent *bool `pulumi:"provisionVmAgent"`
	// The ID of the Proximity Placement Group which the Virtual Machine should be assigned to.
	ProximityPlacementGroupId *string `pulumi:"proximityPlacementGroupId"`
	// Specifies the reboot setting for platform scheduled patching. Possible values are `Always`, `IfRequired` and `Never`.
	//
	// > **NOTE:** `rebootSetting` can only be set when `patchMode` is set to `AutomaticByPlatform`.
	RebootSetting *string `pulumi:"rebootSetting"`
	// The name of the Resource Group in which the Windows Virtual Machine should be exist. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// One or more `secret` blocks as defined below.
	Secrets []WindowsVirtualMachineSecret `pulumi:"secrets"`
	// Specifies if Secure Boot and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
	SecureBootEnabled *bool `pulumi:"secureBootEnabled"`
	// The SKU which should be used for this Virtual Machine, such as `Standard_F2`.
	Size string `pulumi:"size"`
	// The ID of the Image which this Virtual Machine should be created from. Changing this forces a new resource to be created. Possible Image ID types include `Image ID`s, `Shared Image ID`s, `Shared Image Version ID`s, `Community Gallery Image ID`s, `Community Gallery Image Version ID`s, `Shared Gallery Image ID`s and `Shared Gallery Image Version ID`s.
	//
	// > **NOTE:** One of either `sourceImageId` or `sourceImageReference` must be set.
	SourceImageId *string `pulumi:"sourceImageId"`
	// A `sourceImageReference` block as defined below. Changing this forces a new resource to be created.
	//
	// > **NOTE:** One of either `sourceImageId` or `sourceImageReference` must be set.
	SourceImageReference *WindowsVirtualMachineSourceImageReference `pulumi:"sourceImageReference"`
	// A mapping of tags which should be assigned to this Virtual Machine.
	Tags map[string]string `pulumi:"tags"`
	// A `terminationNotification` block as defined below.
	TerminationNotification *WindowsVirtualMachineTerminationNotification `pulumi:"terminationNotification"`
	// Specifies the Time Zone which should be used by the Virtual Machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/). Changing this forces a new resource to be created.
	Timezone *string `pulumi:"timezone"`
	// The Base64-Encoded User Data which should be used for this Virtual Machine.
	UserData *string `pulumi:"userData"`
	// Specifies the Orchestrated Virtual Machine Scale Set that this Virtual Machine should be created within. Changing this forces a new resource to be created.
	//
	// > **NOTE:** Orchestrated Virtual Machine Scale Sets can be provisioned using [the `compute.OrchestratedVirtualMachineScaleSet` resource](https://www.terraform.io/docs/providers/azurerm/r/orchestrated_virtual_machine_scale_set.html).
	VirtualMachineScaleSetId *string `pulumi:"virtualMachineScaleSetId"`
	// Specifies if vTPM (virtual Trusted Platform Module) and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
	VtpmEnabled *bool `pulumi:"vtpmEnabled"`
	// One or more `winrmListener` blocks as defined below. Changing this forces a new resource to be created.
	WinrmListeners []WindowsVirtualMachineWinrmListener `pulumi:"winrmListeners"`
	// * `zones` - (Optional) Specifies the Availability Zone in which this Windows Virtual Machine should be located. Changing this forces a new Windows Virtual Machine to be created.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a WindowsVirtualMachine resource.
type WindowsVirtualMachineArgs struct {
	// A `additionalCapabilities` block as defined below.
	AdditionalCapabilities WindowsVirtualMachineAdditionalCapabilitiesPtrInput
	// One or more `additionalUnattendContent` blocks as defined below. Changing this forces a new resource to be created.
	AdditionalUnattendContents WindowsVirtualMachineAdditionalUnattendContentArrayInput
	// The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
	AdminPassword pulumi.StringInput
	// The username of the local administrator used for the Virtual Machine. Changing this forces a new resource to be created.
	AdminUsername pulumi.StringInput
	// Should Extension Operations be allowed on this Virtual Machine? Defaults to `true`.
	AllowExtensionOperations pulumi.BoolPtrInput
	// Specifies the ID of the Availability Set in which the Virtual Machine should exist. Changing this forces a new resource to be created.
	AvailabilitySetId pulumi.StringPtrInput
	// A `bootDiagnostics` block as defined below.
	BootDiagnostics WindowsVirtualMachineBootDiagnosticsPtrInput
	// Specifies whether to skip platform scheduled patching when a user schedule is associated with the VM. Defaults to `false`.
	//
	// > **NOTE:** `bypassPlatformSafetyChecksOnUserScheduleEnabled` can only be set to `true` when `patchMode` is set to `AutomaticByPlatform`.
	BypassPlatformSafetyChecksOnUserScheduleEnabled pulumi.BoolPtrInput
	// Specifies the ID of the Capacity Reservation Group which the Virtual Machine should be allocated to.
	//
	// > **NOTE:** `capacityReservationGroupId` cannot be used with `availabilitySetId` or `proximityPlacementGroupId`
	CapacityReservationGroupId pulumi.StringPtrInput
	// Specifies the Hostname which should be used for this Virtual Machine. If unspecified this defaults to the value for the `name` field. If the value of the `name` field is not a valid `computerName`, then you must specify `computerName`. Changing this forces a new resource to be created.
	ComputerName pulumi.StringPtrInput
	// The Base64-Encoded Custom Data which should be used for this Virtual Machine. Changing this forces a new resource to be created.
	CustomData pulumi.StringPtrInput
	// The ID of a Dedicated Host Group that this Windows Virtual Machine should be run within. Conflicts with `dedicatedHostId`.
	DedicatedHostGroupId pulumi.StringPtrInput
	// The ID of a Dedicated Host where this machine should be run on. Conflicts with `dedicatedHostGroupId`.
	DedicatedHostId pulumi.StringPtrInput
	// Specifies the Edge Zone within the Azure Region where this Windows Virtual Machine should exist. Changing this forces a new Windows Virtual Machine to be created.
	EdgeZone pulumi.StringPtrInput
	// Specifies if Automatic Updates are Enabled for the Windows Virtual Machine. Changing this forces a new resource to be created. Defaults to `true`.
	EnableAutomaticUpdates pulumi.BoolPtrInput
	// Should all of the disks (including the temp disk) attached to this Virtual Machine be encrypted by enabling Encryption at Host?
	EncryptionAtHostEnabled pulumi.BoolPtrInput
	// Specifies what should happen when the Virtual Machine is evicted for price reasons when using a Spot instance. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** This can only be configured when `priority` is set to `Spot`.
	EvictionPolicy pulumi.StringPtrInput
	// Specifies the duration allocated for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. Defaults to `PT1H30M`.
	ExtensionsTimeBudget pulumi.StringPtrInput
	// One or more `galleryApplication` blocks as defined below.
	GalleryApplications WindowsVirtualMachineGalleryApplicationArrayInput
	HotpatchingEnabled  pulumi.BoolPtrInput
	// An `identity` block as defined below.
	Identity WindowsVirtualMachineIdentityPtrInput
	// Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/windows-server/get-started/azure-hybrid-benefit)) which should be used for this Virtual Machine. Possible values are `None`, `Windows_Client` and `Windows_Server`.
	LicenseType pulumi.StringPtrInput
	// The Azure location where the Windows Virtual Machine should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The maximum price you're willing to pay for this Virtual Machine, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machine will be evicted using the `evictionPolicy`. Defaults to `-1`, which means that the Virtual Machine should not be evicted for price reasons.
	//
	// > **NOTE:** This can only be configured when `priority` is set to `Spot`.
	MaxBidPrice pulumi.Float64PtrInput
	// The name of the Windows Virtual Machine. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// . A list of Network Interface IDs which should be attached to this Virtual Machine. The first Network Interface ID in this list will be the Primary Network Interface on the Virtual Machine.
	NetworkInterfaceIds pulumi.StringArrayInput
	// A `osDisk` block as defined below.
	OsDisk WindowsVirtualMachineOsDiskInput
	// Specifies the mode of VM Guest Patching for the Virtual Machine. Possible values are `AutomaticByPlatform` or `ImageDefault`. Defaults to `ImageDefault`.
	//
	// > **NOTE:** If the `patchAssessmentMode` is set to `AutomaticByPlatform` then the `provisionVmAgent` field must be set to `true`.
	PatchAssessmentMode pulumi.StringPtrInput
	// Specifies the mode of in-guest patching to this Windows Virtual Machine. Possible values are `Manual`, `AutomaticByOS` and `AutomaticByPlatform`. Defaults to `AutomaticByOS`. For more information on patch modes please see the [product documentation](https://docs.microsoft.com/azure/virtual-machines/automatic-vm-guest-patching#patch-orchestration-modes).
	//
	// > **NOTE:** If `patchMode` is set to `AutomaticByPlatform` then `provisionVmAgent` must also be set to `true`. If the Virtual Machine is using a hotpatching enabled image the `patchMode` must always be set to `AutomaticByPlatform`.
	PatchMode pulumi.StringPtrInput
	// A `plan` block as defined below. Changing this forces a new resource to be created.
	Plan WindowsVirtualMachinePlanPtrInput
	// Specifies the Platform Fault Domain in which this Windows Virtual Machine should be created. Defaults to `-1`, which means this will be automatically assigned to a fault domain that best maintains balance across the available fault domains. Changing this forces a new Windows Virtual Machine to be created.
	PlatformFaultDomain pulumi.IntPtrInput
	// Specifies the priority of this Virtual Machine. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this forces a new resource to be created.
	Priority pulumi.StringPtrInput
	// Should the Azure VM Agent be provisioned on this Virtual Machine? Defaults to `true`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** If `provisionVmAgent` is set to `false` then `allowExtensionOperations` must also be set to `false`.
	ProvisionVmAgent pulumi.BoolPtrInput
	// The ID of the Proximity Placement Group which the Virtual Machine should be assigned to.
	ProximityPlacementGroupId pulumi.StringPtrInput
	// Specifies the reboot setting for platform scheduled patching. Possible values are `Always`, `IfRequired` and `Never`.
	//
	// > **NOTE:** `rebootSetting` can only be set when `patchMode` is set to `AutomaticByPlatform`.
	RebootSetting pulumi.StringPtrInput
	// The name of the Resource Group in which the Windows Virtual Machine should be exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// One or more `secret` blocks as defined below.
	Secrets WindowsVirtualMachineSecretArrayInput
	// Specifies if Secure Boot and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
	SecureBootEnabled pulumi.BoolPtrInput
	// The SKU which should be used for this Virtual Machine, such as `Standard_F2`.
	Size pulumi.StringInput
	// The ID of the Image which this Virtual Machine should be created from. Changing this forces a new resource to be created. Possible Image ID types include `Image ID`s, `Shared Image ID`s, `Shared Image Version ID`s, `Community Gallery Image ID`s, `Community Gallery Image Version ID`s, `Shared Gallery Image ID`s and `Shared Gallery Image Version ID`s.
	//
	// > **NOTE:** One of either `sourceImageId` or `sourceImageReference` must be set.
	SourceImageId pulumi.StringPtrInput
	// A `sourceImageReference` block as defined below. Changing this forces a new resource to be created.
	//
	// > **NOTE:** One of either `sourceImageId` or `sourceImageReference` must be set.
	SourceImageReference WindowsVirtualMachineSourceImageReferencePtrInput
	// A mapping of tags which should be assigned to this Virtual Machine.
	Tags pulumi.StringMapInput
	// A `terminationNotification` block as defined below.
	TerminationNotification WindowsVirtualMachineTerminationNotificationPtrInput
	// Specifies the Time Zone which should be used by the Virtual Machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/). Changing this forces a new resource to be created.
	Timezone pulumi.StringPtrInput
	// The Base64-Encoded User Data which should be used for this Virtual Machine.
	UserData pulumi.StringPtrInput
	// Specifies the Orchestrated Virtual Machine Scale Set that this Virtual Machine should be created within. Changing this forces a new resource to be created.
	//
	// > **NOTE:** Orchestrated Virtual Machine Scale Sets can be provisioned using [the `compute.OrchestratedVirtualMachineScaleSet` resource](https://www.terraform.io/docs/providers/azurerm/r/orchestrated_virtual_machine_scale_set.html).
	VirtualMachineScaleSetId pulumi.StringPtrInput
	// Specifies if vTPM (virtual Trusted Platform Module) and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
	VtpmEnabled pulumi.BoolPtrInput
	// One or more `winrmListener` blocks as defined below. Changing this forces a new resource to be created.
	WinrmListeners WindowsVirtualMachineWinrmListenerArrayInput
	// * `zones` - (Optional) Specifies the Availability Zone in which this Windows Virtual Machine should be located. Changing this forces a new Windows Virtual Machine to be created.
	Zone pulumi.StringPtrInput
}

func (WindowsVirtualMachineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*windowsVirtualMachineArgs)(nil)).Elem()
}

type WindowsVirtualMachineInput interface {
	pulumi.Input

	ToWindowsVirtualMachineOutput() WindowsVirtualMachineOutput
	ToWindowsVirtualMachineOutputWithContext(ctx context.Context) WindowsVirtualMachineOutput
}

func (*WindowsVirtualMachine) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsVirtualMachine)(nil)).Elem()
}

func (i *WindowsVirtualMachine) ToWindowsVirtualMachineOutput() WindowsVirtualMachineOutput {
	return i.ToWindowsVirtualMachineOutputWithContext(context.Background())
}

func (i *WindowsVirtualMachine) ToWindowsVirtualMachineOutputWithContext(ctx context.Context) WindowsVirtualMachineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsVirtualMachineOutput)
}

func (i *WindowsVirtualMachine) ToOutput(ctx context.Context) pulumix.Output[*WindowsVirtualMachine] {
	return pulumix.Output[*WindowsVirtualMachine]{
		OutputState: i.ToWindowsVirtualMachineOutputWithContext(ctx).OutputState,
	}
}

// WindowsVirtualMachineArrayInput is an input type that accepts WindowsVirtualMachineArray and WindowsVirtualMachineArrayOutput values.
// You can construct a concrete instance of `WindowsVirtualMachineArrayInput` via:
//
//	WindowsVirtualMachineArray{ WindowsVirtualMachineArgs{...} }
type WindowsVirtualMachineArrayInput interface {
	pulumi.Input

	ToWindowsVirtualMachineArrayOutput() WindowsVirtualMachineArrayOutput
	ToWindowsVirtualMachineArrayOutputWithContext(context.Context) WindowsVirtualMachineArrayOutput
}

type WindowsVirtualMachineArray []WindowsVirtualMachineInput

func (WindowsVirtualMachineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WindowsVirtualMachine)(nil)).Elem()
}

func (i WindowsVirtualMachineArray) ToWindowsVirtualMachineArrayOutput() WindowsVirtualMachineArrayOutput {
	return i.ToWindowsVirtualMachineArrayOutputWithContext(context.Background())
}

func (i WindowsVirtualMachineArray) ToWindowsVirtualMachineArrayOutputWithContext(ctx context.Context) WindowsVirtualMachineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsVirtualMachineArrayOutput)
}

func (i WindowsVirtualMachineArray) ToOutput(ctx context.Context) pulumix.Output[[]*WindowsVirtualMachine] {
	return pulumix.Output[[]*WindowsVirtualMachine]{
		OutputState: i.ToWindowsVirtualMachineArrayOutputWithContext(ctx).OutputState,
	}
}

// WindowsVirtualMachineMapInput is an input type that accepts WindowsVirtualMachineMap and WindowsVirtualMachineMapOutput values.
// You can construct a concrete instance of `WindowsVirtualMachineMapInput` via:
//
//	WindowsVirtualMachineMap{ "key": WindowsVirtualMachineArgs{...} }
type WindowsVirtualMachineMapInput interface {
	pulumi.Input

	ToWindowsVirtualMachineMapOutput() WindowsVirtualMachineMapOutput
	ToWindowsVirtualMachineMapOutputWithContext(context.Context) WindowsVirtualMachineMapOutput
}

type WindowsVirtualMachineMap map[string]WindowsVirtualMachineInput

func (WindowsVirtualMachineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WindowsVirtualMachine)(nil)).Elem()
}

func (i WindowsVirtualMachineMap) ToWindowsVirtualMachineMapOutput() WindowsVirtualMachineMapOutput {
	return i.ToWindowsVirtualMachineMapOutputWithContext(context.Background())
}

func (i WindowsVirtualMachineMap) ToWindowsVirtualMachineMapOutputWithContext(ctx context.Context) WindowsVirtualMachineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsVirtualMachineMapOutput)
}

func (i WindowsVirtualMachineMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*WindowsVirtualMachine] {
	return pulumix.Output[map[string]*WindowsVirtualMachine]{
		OutputState: i.ToWindowsVirtualMachineMapOutputWithContext(ctx).OutputState,
	}
}

type WindowsVirtualMachineOutput struct{ *pulumi.OutputState }

func (WindowsVirtualMachineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsVirtualMachine)(nil)).Elem()
}

func (o WindowsVirtualMachineOutput) ToWindowsVirtualMachineOutput() WindowsVirtualMachineOutput {
	return o
}

func (o WindowsVirtualMachineOutput) ToWindowsVirtualMachineOutputWithContext(ctx context.Context) WindowsVirtualMachineOutput {
	return o
}

func (o WindowsVirtualMachineOutput) ToOutput(ctx context.Context) pulumix.Output[*WindowsVirtualMachine] {
	return pulumix.Output[*WindowsVirtualMachine]{
		OutputState: o.OutputState,
	}
}

// A `additionalCapabilities` block as defined below.
func (o WindowsVirtualMachineOutput) AdditionalCapabilities() WindowsVirtualMachineAdditionalCapabilitiesPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) WindowsVirtualMachineAdditionalCapabilitiesPtrOutput {
		return v.AdditionalCapabilities
	}).(WindowsVirtualMachineAdditionalCapabilitiesPtrOutput)
}

// One or more `additionalUnattendContent` blocks as defined below. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineOutput) AdditionalUnattendContents() WindowsVirtualMachineAdditionalUnattendContentArrayOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) WindowsVirtualMachineAdditionalUnattendContentArrayOutput {
		return v.AdditionalUnattendContents
	}).(WindowsVirtualMachineAdditionalUnattendContentArrayOutput)
}

// The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineOutput) AdminPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.StringOutput { return v.AdminPassword }).(pulumi.StringOutput)
}

// The username of the local administrator used for the Virtual Machine. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineOutput) AdminUsername() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.StringOutput { return v.AdminUsername }).(pulumi.StringOutput)
}

// Should Extension Operations be allowed on this Virtual Machine? Defaults to `true`.
func (o WindowsVirtualMachineOutput) AllowExtensionOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.BoolPtrOutput { return v.AllowExtensionOperations }).(pulumi.BoolPtrOutput)
}

// Specifies the ID of the Availability Set in which the Virtual Machine should exist. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineOutput) AvailabilitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.StringPtrOutput { return v.AvailabilitySetId }).(pulumi.StringPtrOutput)
}

// A `bootDiagnostics` block as defined below.
func (o WindowsVirtualMachineOutput) BootDiagnostics() WindowsVirtualMachineBootDiagnosticsPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) WindowsVirtualMachineBootDiagnosticsPtrOutput { return v.BootDiagnostics }).(WindowsVirtualMachineBootDiagnosticsPtrOutput)
}

// Specifies whether to skip platform scheduled patching when a user schedule is associated with the VM. Defaults to `false`.
//
// > **NOTE:** `bypassPlatformSafetyChecksOnUserScheduleEnabled` can only be set to `true` when `patchMode` is set to `AutomaticByPlatform`.
func (o WindowsVirtualMachineOutput) BypassPlatformSafetyChecksOnUserScheduleEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.BoolPtrOutput {
		return v.BypassPlatformSafetyChecksOnUserScheduleEnabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the ID of the Capacity Reservation Group which the Virtual Machine should be allocated to.
//
// > **NOTE:** `capacityReservationGroupId` cannot be used with `availabilitySetId` or `proximityPlacementGroupId`
func (o WindowsVirtualMachineOutput) CapacityReservationGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.StringPtrOutput { return v.CapacityReservationGroupId }).(pulumi.StringPtrOutput)
}

// Specifies the Hostname which should be used for this Virtual Machine. If unspecified this defaults to the value for the `name` field. If the value of the `name` field is not a valid `computerName`, then you must specify `computerName`. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineOutput) ComputerName() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.StringOutput { return v.ComputerName }).(pulumi.StringOutput)
}

// The Base64-Encoded Custom Data which should be used for this Virtual Machine. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineOutput) CustomData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.StringPtrOutput { return v.CustomData }).(pulumi.StringPtrOutput)
}

// The ID of a Dedicated Host Group that this Windows Virtual Machine should be run within. Conflicts with `dedicatedHostId`.
func (o WindowsVirtualMachineOutput) DedicatedHostGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.StringPtrOutput { return v.DedicatedHostGroupId }).(pulumi.StringPtrOutput)
}

// The ID of a Dedicated Host where this machine should be run on. Conflicts with `dedicatedHostGroupId`.
func (o WindowsVirtualMachineOutput) DedicatedHostId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.StringPtrOutput { return v.DedicatedHostId }).(pulumi.StringPtrOutput)
}

// Specifies the Edge Zone within the Azure Region where this Windows Virtual Machine should exist. Changing this forces a new Windows Virtual Machine to be created.
func (o WindowsVirtualMachineOutput) EdgeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.StringPtrOutput { return v.EdgeZone }).(pulumi.StringPtrOutput)
}

// Specifies if Automatic Updates are Enabled for the Windows Virtual Machine. Changing this forces a new resource to be created. Defaults to `true`.
func (o WindowsVirtualMachineOutput) EnableAutomaticUpdates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.BoolPtrOutput { return v.EnableAutomaticUpdates }).(pulumi.BoolPtrOutput)
}

// Should all of the disks (including the temp disk) attached to this Virtual Machine be encrypted by enabling Encryption at Host?
func (o WindowsVirtualMachineOutput) EncryptionAtHostEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.BoolPtrOutput { return v.EncryptionAtHostEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies what should happen when the Virtual Machine is evicted for price reasons when using a Spot instance. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
//
// > **NOTE:** This can only be configured when `priority` is set to `Spot`.
func (o WindowsVirtualMachineOutput) EvictionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.StringPtrOutput { return v.EvictionPolicy }).(pulumi.StringPtrOutput)
}

// Specifies the duration allocated for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. Defaults to `PT1H30M`.
func (o WindowsVirtualMachineOutput) ExtensionsTimeBudget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.StringPtrOutput { return v.ExtensionsTimeBudget }).(pulumi.StringPtrOutput)
}

// One or more `galleryApplication` blocks as defined below.
func (o WindowsVirtualMachineOutput) GalleryApplications() WindowsVirtualMachineGalleryApplicationArrayOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) WindowsVirtualMachineGalleryApplicationArrayOutput {
		return v.GalleryApplications
	}).(WindowsVirtualMachineGalleryApplicationArrayOutput)
}

func (o WindowsVirtualMachineOutput) HotpatchingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.BoolPtrOutput { return v.HotpatchingEnabled }).(pulumi.BoolPtrOutput)
}

// An `identity` block as defined below.
func (o WindowsVirtualMachineOutput) Identity() WindowsVirtualMachineIdentityPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) WindowsVirtualMachineIdentityPtrOutput { return v.Identity }).(WindowsVirtualMachineIdentityPtrOutput)
}

// Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/windows-server/get-started/azure-hybrid-benefit)) which should be used for this Virtual Machine. Possible values are `None`, `Windows_Client` and `Windows_Server`.
func (o WindowsVirtualMachineOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.StringPtrOutput { return v.LicenseType }).(pulumi.StringPtrOutput)
}

// The Azure location where the Windows Virtual Machine should exist. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The maximum price you're willing to pay for this Virtual Machine, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machine will be evicted using the `evictionPolicy`. Defaults to `-1`, which means that the Virtual Machine should not be evicted for price reasons.
//
// > **NOTE:** This can only be configured when `priority` is set to `Spot`.
func (o WindowsVirtualMachineOutput) MaxBidPrice() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.Float64PtrOutput { return v.MaxBidPrice }).(pulumi.Float64PtrOutput)
}

// The name of the Windows Virtual Machine. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// . A list of Network Interface IDs which should be attached to this Virtual Machine. The first Network Interface ID in this list will be the Primary Network Interface on the Virtual Machine.
func (o WindowsVirtualMachineOutput) NetworkInterfaceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.StringArrayOutput { return v.NetworkInterfaceIds }).(pulumi.StringArrayOutput)
}

// A `osDisk` block as defined below.
func (o WindowsVirtualMachineOutput) OsDisk() WindowsVirtualMachineOsDiskOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) WindowsVirtualMachineOsDiskOutput { return v.OsDisk }).(WindowsVirtualMachineOsDiskOutput)
}

// Specifies the mode of VM Guest Patching for the Virtual Machine. Possible values are `AutomaticByPlatform` or `ImageDefault`. Defaults to `ImageDefault`.
//
// > **NOTE:** If the `patchAssessmentMode` is set to `AutomaticByPlatform` then the `provisionVmAgent` field must be set to `true`.
func (o WindowsVirtualMachineOutput) PatchAssessmentMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.StringPtrOutput { return v.PatchAssessmentMode }).(pulumi.StringPtrOutput)
}

// Specifies the mode of in-guest patching to this Windows Virtual Machine. Possible values are `Manual`, `AutomaticByOS` and `AutomaticByPlatform`. Defaults to `AutomaticByOS`. For more information on patch modes please see the [product documentation](https://docs.microsoft.com/azure/virtual-machines/automatic-vm-guest-patching#patch-orchestration-modes).
//
// > **NOTE:** If `patchMode` is set to `AutomaticByPlatform` then `provisionVmAgent` must also be set to `true`. If the Virtual Machine is using a hotpatching enabled image the `patchMode` must always be set to `AutomaticByPlatform`.
func (o WindowsVirtualMachineOutput) PatchMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.StringPtrOutput { return v.PatchMode }).(pulumi.StringPtrOutput)
}

// A `plan` block as defined below. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineOutput) Plan() WindowsVirtualMachinePlanPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) WindowsVirtualMachinePlanPtrOutput { return v.Plan }).(WindowsVirtualMachinePlanPtrOutput)
}

// Specifies the Platform Fault Domain in which this Windows Virtual Machine should be created. Defaults to `-1`, which means this will be automatically assigned to a fault domain that best maintains balance across the available fault domains. Changing this forces a new Windows Virtual Machine to be created.
func (o WindowsVirtualMachineOutput) PlatformFaultDomain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.IntPtrOutput { return v.PlatformFaultDomain }).(pulumi.IntPtrOutput)
}

// Specifies the priority of this Virtual Machine. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.StringPtrOutput { return v.Priority }).(pulumi.StringPtrOutput)
}

// The Primary Private IP Address assigned to this Virtual Machine.
func (o WindowsVirtualMachineOutput) PrivateIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.StringOutput { return v.PrivateIpAddress }).(pulumi.StringOutput)
}

// A list of Private IP Addresses assigned to this Virtual Machine.
func (o WindowsVirtualMachineOutput) PrivateIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.StringArrayOutput { return v.PrivateIpAddresses }).(pulumi.StringArrayOutput)
}

// Should the Azure VM Agent be provisioned on this Virtual Machine? Defaults to `true`. Changing this forces a new resource to be created.
//
// > **NOTE:** If `provisionVmAgent` is set to `false` then `allowExtensionOperations` must also be set to `false`.
func (o WindowsVirtualMachineOutput) ProvisionVmAgent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.BoolPtrOutput { return v.ProvisionVmAgent }).(pulumi.BoolPtrOutput)
}

// The ID of the Proximity Placement Group which the Virtual Machine should be assigned to.
func (o WindowsVirtualMachineOutput) ProximityPlacementGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.StringPtrOutput { return v.ProximityPlacementGroupId }).(pulumi.StringPtrOutput)
}

// The Primary Public IP Address assigned to this Virtual Machine.
func (o WindowsVirtualMachineOutput) PublicIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.StringOutput { return v.PublicIpAddress }).(pulumi.StringOutput)
}

// A list of the Public IP Addresses assigned to this Virtual Machine.
func (o WindowsVirtualMachineOutput) PublicIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.StringArrayOutput { return v.PublicIpAddresses }).(pulumi.StringArrayOutput)
}

// Specifies the reboot setting for platform scheduled patching. Possible values are `Always`, `IfRequired` and `Never`.
//
// > **NOTE:** `rebootSetting` can only be set when `patchMode` is set to `AutomaticByPlatform`.
func (o WindowsVirtualMachineOutput) RebootSetting() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.StringPtrOutput { return v.RebootSetting }).(pulumi.StringPtrOutput)
}

// The name of the Resource Group in which the Windows Virtual Machine should be exist. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// One or more `secret` blocks as defined below.
func (o WindowsVirtualMachineOutput) Secrets() WindowsVirtualMachineSecretArrayOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) WindowsVirtualMachineSecretArrayOutput { return v.Secrets }).(WindowsVirtualMachineSecretArrayOutput)
}

// Specifies if Secure Boot and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineOutput) SecureBootEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.BoolPtrOutput { return v.SecureBootEnabled }).(pulumi.BoolPtrOutput)
}

// The SKU which should be used for this Virtual Machine, such as `Standard_F2`.
func (o WindowsVirtualMachineOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.StringOutput { return v.Size }).(pulumi.StringOutput)
}

// The ID of the Image which this Virtual Machine should be created from. Changing this forces a new resource to be created. Possible Image ID types include `Image ID`s, `Shared Image ID`s, `Shared Image Version ID`s, `Community Gallery Image ID`s, `Community Gallery Image Version ID`s, `Shared Gallery Image ID`s and `Shared Gallery Image Version ID`s.
//
// > **NOTE:** One of either `sourceImageId` or `sourceImageReference` must be set.
func (o WindowsVirtualMachineOutput) SourceImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.StringPtrOutput { return v.SourceImageId }).(pulumi.StringPtrOutput)
}

// A `sourceImageReference` block as defined below. Changing this forces a new resource to be created.
//
// > **NOTE:** One of either `sourceImageId` or `sourceImageReference` must be set.
func (o WindowsVirtualMachineOutput) SourceImageReference() WindowsVirtualMachineSourceImageReferencePtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) WindowsVirtualMachineSourceImageReferencePtrOutput {
		return v.SourceImageReference
	}).(WindowsVirtualMachineSourceImageReferencePtrOutput)
}

// A mapping of tags which should be assigned to this Virtual Machine.
func (o WindowsVirtualMachineOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A `terminationNotification` block as defined below.
func (o WindowsVirtualMachineOutput) TerminationNotification() WindowsVirtualMachineTerminationNotificationOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) WindowsVirtualMachineTerminationNotificationOutput {
		return v.TerminationNotification
	}).(WindowsVirtualMachineTerminationNotificationOutput)
}

// Specifies the Time Zone which should be used by the Virtual Machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/). Changing this forces a new resource to be created.
func (o WindowsVirtualMachineOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.StringPtrOutput { return v.Timezone }).(pulumi.StringPtrOutput)
}

// The Base64-Encoded User Data which should be used for this Virtual Machine.
func (o WindowsVirtualMachineOutput) UserData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.StringPtrOutput { return v.UserData }).(pulumi.StringPtrOutput)
}

// A 128-bit identifier which uniquely identifies this Virtual Machine.
func (o WindowsVirtualMachineOutput) VirtualMachineId() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.StringOutput { return v.VirtualMachineId }).(pulumi.StringOutput)
}

// Specifies the Orchestrated Virtual Machine Scale Set that this Virtual Machine should be created within. Changing this forces a new resource to be created.
//
// > **NOTE:** Orchestrated Virtual Machine Scale Sets can be provisioned using [the `compute.OrchestratedVirtualMachineScaleSet` resource](https://www.terraform.io/docs/providers/azurerm/r/orchestrated_virtual_machine_scale_set.html).
func (o WindowsVirtualMachineOutput) VirtualMachineScaleSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.StringPtrOutput { return v.VirtualMachineScaleSetId }).(pulumi.StringPtrOutput)
}

// Specifies if vTPM (virtual Trusted Platform Module) and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineOutput) VtpmEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.BoolPtrOutput { return v.VtpmEnabled }).(pulumi.BoolPtrOutput)
}

// One or more `winrmListener` blocks as defined below. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineOutput) WinrmListeners() WindowsVirtualMachineWinrmListenerArrayOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) WindowsVirtualMachineWinrmListenerArrayOutput { return v.WinrmListeners }).(WindowsVirtualMachineWinrmListenerArrayOutput)
}

// * `zones` - (Optional) Specifies the Availability Zone in which this Windows Virtual Machine should be located. Changing this forces a new Windows Virtual Machine to be created.
func (o WindowsVirtualMachineOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachine) pulumi.StringPtrOutput { return v.Zone }).(pulumi.StringPtrOutput)
}

type WindowsVirtualMachineArrayOutput struct{ *pulumi.OutputState }

func (WindowsVirtualMachineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WindowsVirtualMachine)(nil)).Elem()
}

func (o WindowsVirtualMachineArrayOutput) ToWindowsVirtualMachineArrayOutput() WindowsVirtualMachineArrayOutput {
	return o
}

func (o WindowsVirtualMachineArrayOutput) ToWindowsVirtualMachineArrayOutputWithContext(ctx context.Context) WindowsVirtualMachineArrayOutput {
	return o
}

func (o WindowsVirtualMachineArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*WindowsVirtualMachine] {
	return pulumix.Output[[]*WindowsVirtualMachine]{
		OutputState: o.OutputState,
	}
}

func (o WindowsVirtualMachineArrayOutput) Index(i pulumi.IntInput) WindowsVirtualMachineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WindowsVirtualMachine {
		return vs[0].([]*WindowsVirtualMachine)[vs[1].(int)]
	}).(WindowsVirtualMachineOutput)
}

type WindowsVirtualMachineMapOutput struct{ *pulumi.OutputState }

func (WindowsVirtualMachineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WindowsVirtualMachine)(nil)).Elem()
}

func (o WindowsVirtualMachineMapOutput) ToWindowsVirtualMachineMapOutput() WindowsVirtualMachineMapOutput {
	return o
}

func (o WindowsVirtualMachineMapOutput) ToWindowsVirtualMachineMapOutputWithContext(ctx context.Context) WindowsVirtualMachineMapOutput {
	return o
}

func (o WindowsVirtualMachineMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*WindowsVirtualMachine] {
	return pulumix.Output[map[string]*WindowsVirtualMachine]{
		OutputState: o.OutputState,
	}
}

func (o WindowsVirtualMachineMapOutput) MapIndex(k pulumi.StringInput) WindowsVirtualMachineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WindowsVirtualMachine {
		return vs[0].(map[string]*WindowsVirtualMachine)[vs[1].(string)]
	}).(WindowsVirtualMachineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WindowsVirtualMachineInput)(nil)).Elem(), &WindowsVirtualMachine{})
	pulumi.RegisterInputType(reflect.TypeOf((*WindowsVirtualMachineArrayInput)(nil)).Elem(), WindowsVirtualMachineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WindowsVirtualMachineMapInput)(nil)).Elem(), WindowsVirtualMachineMap{})
	pulumi.RegisterOutputType(WindowsVirtualMachineOutput{})
	pulumi.RegisterOutputType(WindowsVirtualMachineArrayOutput{})
	pulumi.RegisterOutputType(WindowsVirtualMachineMapOutput{})
}
