// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a new Virtual Machine Extension to provide post deployment configuration
// and run automated tasks.
// 
// ~> **Please Note:** The CustomScript extensions for Linux & Windows require that the `commandToExecute` returns a `0` exit code to be classified as successfully deployed. You can achieve this by appending `exit 0` to the end of your `commandToExecute`.
type Extension struct {
	s *pulumi.ResourceState
}

// NewExtension registers a new resource with the given unique name, arguments, and options.
func NewExtension(ctx *pulumi.Context,
	name string, args *ExtensionArgs, opts ...pulumi.ResourceOpt) (*Extension, error) {
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	if args == nil || args.Publisher == nil {
		return nil, errors.New("missing required argument 'Publisher'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil || args.TypeHandlerVersion == nil {
		return nil, errors.New("missing required argument 'TypeHandlerVersion'")
	}
	if args == nil || args.VirtualMachineName == nil {
		return nil, errors.New("missing required argument 'VirtualMachineName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["autoUpgradeMinorVersion"] = nil
		inputs["location"] = nil
		inputs["name"] = nil
		inputs["protectedSettings"] = nil
		inputs["publisher"] = nil
		inputs["resourceGroupName"] = nil
		inputs["settings"] = nil
		inputs["tags"] = nil
		inputs["type"] = nil
		inputs["typeHandlerVersion"] = nil
		inputs["virtualMachineName"] = nil
	} else {
		inputs["autoUpgradeMinorVersion"] = args.AutoUpgradeMinorVersion
		inputs["location"] = args.Location
		inputs["name"] = args.Name
		inputs["protectedSettings"] = args.ProtectedSettings
		inputs["publisher"] = args.Publisher
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["settings"] = args.Settings
		inputs["tags"] = args.Tags
		inputs["type"] = args.Type
		inputs["typeHandlerVersion"] = args.TypeHandlerVersion
		inputs["virtualMachineName"] = args.VirtualMachineName
	}
	s, err := ctx.RegisterResource("azure:compute/extension:Extension", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Extension{s: s}, nil
}

// GetExtension gets an existing Extension resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExtension(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ExtensionState, opts ...pulumi.ResourceOpt) (*Extension, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["autoUpgradeMinorVersion"] = state.AutoUpgradeMinorVersion
		inputs["location"] = state.Location
		inputs["name"] = state.Name
		inputs["protectedSettings"] = state.ProtectedSettings
		inputs["publisher"] = state.Publisher
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["settings"] = state.Settings
		inputs["tags"] = state.Tags
		inputs["type"] = state.Type
		inputs["typeHandlerVersion"] = state.TypeHandlerVersion
		inputs["virtualMachineName"] = state.VirtualMachineName
	}
	s, err := ctx.ReadResource("azure:compute/extension:Extension", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Extension{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Extension) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Extension) ID() *pulumi.IDOutput {
	return r.s.ID
}

// Specifies if the platform deploys
// the latest minor version update to the `type_handler_version` specified.
func (r *Extension) AutoUpgradeMinorVersion() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["autoUpgradeMinorVersion"])
}

// The location where the extension is created. Changing
// this forces a new resource to be created.
func (r *Extension) Location() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["location"])
}

// The name of the virtual machine extension peering. Changing
// this forces a new resource to be created.
func (r *Extension) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The protected_settings passed to the
// extension, like settings, these are specified as a JSON object in a string.
func (r *Extension) ProtectedSettings() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["protectedSettings"])
}

// The publisher of the extension, available publishers
// can be found by using the Azure CLI.
func (r *Extension) Publisher() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["publisher"])
}

// The name of the resource group in which to
// create the virtual network. Changing this forces a new resource to be
// created.
func (r *Extension) ResourceGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// The settings passed to the extension, these are
// specified as a JSON object in a string.
func (r *Extension) Settings() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["settings"])
}

func (r *Extension) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// The type of extension, available types for a publisher can
// be found using the Azure CLI.
func (r *Extension) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// Specifies the version of the extension to
// use, available versions can be found using the Azure CLI.
func (r *Extension) TypeHandlerVersion() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["typeHandlerVersion"])
}

// The name of the virtual machine. Changing
// this forces a new resource to be created.
func (r *Extension) VirtualMachineName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["virtualMachineName"])
}

// Input properties used for looking up and filtering Extension resources.
type ExtensionState struct {
	// Specifies if the platform deploys
	// the latest minor version update to the `type_handler_version` specified.
	AutoUpgradeMinorVersion interface{}
	// The location where the extension is created. Changing
	// this forces a new resource to be created.
	Location interface{}
	// The name of the virtual machine extension peering. Changing
	// this forces a new resource to be created.
	Name interface{}
	// The protected_settings passed to the
	// extension, like settings, these are specified as a JSON object in a string.
	ProtectedSettings interface{}
	// The publisher of the extension, available publishers
	// can be found by using the Azure CLI.
	Publisher interface{}
	// The name of the resource group in which to
	// create the virtual network. Changing this forces a new resource to be
	// created.
	ResourceGroupName interface{}
	// The settings passed to the extension, these are
	// specified as a JSON object in a string.
	Settings interface{}
	Tags interface{}
	// The type of extension, available types for a publisher can
	// be found using the Azure CLI.
	Type interface{}
	// Specifies the version of the extension to
	// use, available versions can be found using the Azure CLI.
	TypeHandlerVersion interface{}
	// The name of the virtual machine. Changing
	// this forces a new resource to be created.
	VirtualMachineName interface{}
}

// The set of arguments for constructing a Extension resource.
type ExtensionArgs struct {
	// Specifies if the platform deploys
	// the latest minor version update to the `type_handler_version` specified.
	AutoUpgradeMinorVersion interface{}
	// The location where the extension is created. Changing
	// this forces a new resource to be created.
	Location interface{}
	// The name of the virtual machine extension peering. Changing
	// this forces a new resource to be created.
	Name interface{}
	// The protected_settings passed to the
	// extension, like settings, these are specified as a JSON object in a string.
	ProtectedSettings interface{}
	// The publisher of the extension, available publishers
	// can be found by using the Azure CLI.
	Publisher interface{}
	// The name of the resource group in which to
	// create the virtual network. Changing this forces a new resource to be
	// created.
	ResourceGroupName interface{}
	// The settings passed to the extension, these are
	// specified as a JSON object in a string.
	Settings interface{}
	Tags interface{}
	// The type of extension, available types for a publisher can
	// be found using the Azure CLI.
	Type interface{}
	// Specifies the version of the extension to
	// use, available versions can be found using the Azure CLI.
	TypeHandlerVersion interface{}
	// The name of the virtual machine. Changing
	// this forces a new resource to be created.
	VirtualMachineName interface{}
}
