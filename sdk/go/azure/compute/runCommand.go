// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Virtual Machine Run Command.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/authorization"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/compute"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "exampleVirtualNetwork", &network.VirtualNetworkArgs{
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			exampleSubnet, err := network.NewSubnet(ctx, "exampleSubnet", &network.SubnetArgs{
//				ResourceGroupName:  exampleResourceGroup.Name,
//				VirtualNetworkName: exampleVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.0.2.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleNetworkInterface, err := network.NewNetworkInterface(ctx, "exampleNetworkInterface", &network.NetworkInterfaceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				IpConfigurations: network.NetworkInterfaceIpConfigurationArray{
//					&network.NetworkInterfaceIpConfigurationArgs{
//						Name:                       pulumi.String("internal"),
//						SubnetId:                   exampleSubnet.ID(),
//						PrivateIpAddressAllocation: pulumi.String("Dynamic"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleUserAssignedIdentity, err := authorization.NewUserAssignedIdentity(ctx, "exampleUserAssignedIdentity", &authorization.UserAssignedIdentityArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//			})
//			if err != nil {
//				return err
//			}
//			exampleLinuxVirtualMachine, err := compute.NewLinuxVirtualMachine(ctx, "exampleLinuxVirtualMachine", &compute.LinuxVirtualMachineArgs{
//				ResourceGroupName:             exampleResourceGroup.Name,
//				Location:                      exampleResourceGroup.Location,
//				Size:                          pulumi.String("Standard_B2s"),
//				AdminUsername:                 pulumi.String("adminuser"),
//				AdminPassword:                 pulumi.String("P@$$w0rd1234!"),
//				DisablePasswordAuthentication: pulumi.Bool(false),
//				NetworkInterfaceIds: pulumi.StringArray{
//					exampleNetworkInterface.ID(),
//				},
//				OsDisk: &compute.LinuxVirtualMachineOsDiskArgs{
//					Caching:            pulumi.String("ReadWrite"),
//					StorageAccountType: pulumi.String("Premium_LRS"),
//				},
//				SourceImageReference: &compute.LinuxVirtualMachineSourceImageReferenceArgs{
//					Publisher: pulumi.String("Canonical"),
//					Offer:     pulumi.String("0001-com-ubuntu-server-jammy"),
//					Sku:       pulumi.String("22_04-lts"),
//					Version:   pulumi.String("latest"),
//				},
//				Identity: &compute.LinuxVirtualMachineIdentityArgs{
//					Type: pulumi.String("SystemAssigned, UserAssigned"),
//					IdentityIds: pulumi.StringArray{
//						exampleUserAssignedIdentity.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Location:               exampleResourceGroup.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("LRS"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAssignment, err := authorization.NewAssignment(ctx, "exampleAssignment", &authorization.AssignmentArgs{
//				Scope:              exampleAccount.ID(),
//				RoleDefinitionName: pulumi.String("Storage Blob Data Contributor"),
//				PrincipalId:        exampleUserAssignedIdentity.PrincipalId,
//			})
//			if err != nil {
//				return err
//			}
//			exampleContainer, err := storage.NewContainer(ctx, "exampleContainer", &storage.ContainerArgs{
//				StorageAccountName:  exampleAccount.Name,
//				ContainerAccessType: pulumi.String("blob"),
//			})
//			if err != nil {
//				return err
//			}
//			example1, err := storage.NewBlob(ctx, "example1", &storage.BlobArgs{
//				StorageAccountName:   exampleAccount.Name,
//				StorageContainerName: exampleContainer.Name,
//				Type:                 pulumi.String("Block"),
//				SourceContent:        pulumi.String("echo 'hello world'"),
//			})
//			if err != nil {
//				return err
//			}
//			example2Blob, err := storage.NewBlob(ctx, "example2Blob", &storage.BlobArgs{
//				StorageAccountName:   exampleAccount.Name,
//				StorageContainerName: exampleContainer.Name,
//				Type:                 pulumi.String("Append"),
//			})
//			if err != nil {
//				return err
//			}
//			example3Blob, err := storage.NewBlob(ctx, "example3Blob", &storage.BlobArgs{
//				StorageAccountName:   exampleAccount.Name,
//				StorageContainerName: exampleContainer.Name,
//				Type:                 pulumi.String("Append"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccountSAS := storage.GetAccountSASOutput(ctx, storage.GetAccountSASOutputArgs{
//				ConnectionString: exampleAccount.PrimaryConnectionString,
//				HttpsOnly:        pulumi.Bool(true),
//				SignedVersion:    pulumi.String("2019-10-10"),
//				Start:            pulumi.String("2023-04-01T00:00:00Z"),
//				Expiry:           pulumi.String("2024-04-01T00:00:00Z"),
//				ResourceTypes: &storage.GetAccountSASResourceTypesArgs{
//					Service:   pulumi.Bool(false),
//					Container: pulumi.Bool(false),
//					Object:    pulumi.Bool(true),
//				},
//				Services: &storage.GetAccountSASServicesArgs{
//					Blob:  pulumi.Bool(true),
//					Queue: pulumi.Bool(false),
//					Table: pulumi.Bool(false),
//					File:  pulumi.Bool(false),
//				},
//				Permissions: &storage.GetAccountSASPermissionsArgs{
//					Read:    pulumi.Bool(true),
//					Write:   pulumi.Bool(true),
//					Delete:  pulumi.Bool(false),
//					List:    pulumi.Bool(false),
//					Add:     pulumi.Bool(true),
//					Create:  pulumi.Bool(true),
//					Update:  pulumi.Bool(false),
//					Process: pulumi.Bool(false),
//					Tag:     pulumi.Bool(false),
//					Filter:  pulumi.Bool(false),
//				},
//			}, nil)
//			_, err = compute.NewRunCommand(ctx, "exampleRunCommand", &compute.RunCommandArgs{
//				Location:         exampleResourceGroup.Location,
//				VirtualMachineId: exampleLinuxVirtualMachine.ID(),
//				Source: &compute.RunCommandSourceArgs{
//					Script: pulumi.String("echo 'hello world'"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewRunCommand(ctx, "example2RunCommand", &compute.RunCommandArgs{
//				Location:         exampleResourceGroup.Location,
//				VirtualMachineId: exampleLinuxVirtualMachine.ID(),
//				OutputBlobUri:    example2Blob.ID(),
//				ErrorBlobUri:     example3Blob.ID(),
//				RunAsPassword:    pulumi.String("P@$$w0rd1234!"),
//				RunAsUser:        pulumi.String("adminuser"),
//				Source: &compute.RunCommandSourceArgs{
//					ScriptUri: example1.ID(),
//					ScriptUriManagedIdentity: &compute.RunCommandSourceScriptUriManagedIdentityArgs{
//						ClientId: exampleUserAssignedIdentity.ClientId,
//					},
//				},
//				ErrorBlobManagedIdentity: &compute.RunCommandErrorBlobManagedIdentityArgs{
//					ClientId: exampleUserAssignedIdentity.ClientId,
//				},
//				OutputBlobManagedIdentity: &compute.RunCommandOutputBlobManagedIdentityArgs{
//					ClientId: exampleUserAssignedIdentity.ClientId,
//				},
//				Parameters: compute.RunCommandParameterArray{
//					&compute.RunCommandParameterArgs{
//						Name:  pulumi.String("examplev1"),
//						Value: pulumi.String("val1"),
//					},
//				},
//				ProtectedParameters: compute.RunCommandProtectedParameterArray{
//					&compute.RunCommandProtectedParameterArgs{
//						Name:  pulumi.String("examplev2"),
//						Value: pulumi.String("val2"),
//					},
//				},
//				Tags: pulumi.StringMap{
//					"environment": pulumi.String("terraform-examples"),
//					"some_key":    pulumi.String("some-value"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				exampleAssignment,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewRunCommand(ctx, "example3RunCommand", &compute.RunCommandArgs{
//				Location:         exampleResourceGroup.Location,
//				VirtualMachineId: exampleLinuxVirtualMachine.ID(),
//				RunAsPassword:    pulumi.String("P@$$w0rd1234!"),
//				RunAsUser:        pulumi.String("adminuser"),
//				ErrorBlobUri: pulumi.All(example3Blob.ID(), exampleAccountSAS).ApplyT(func(_args []interface{}) (string, error) {
//					id := _args[0].(string)
//					exampleAccountSAS := _args[1].(storage.GetAccountSASResult)
//					return fmt.Sprintf("%v%v", id, exampleAccountSAS.Sas), nil
//				}).(pulumi.StringOutput),
//				OutputBlobUri: pulumi.All(example2Blob.ID(), exampleAccountSAS).ApplyT(func(_args []interface{}) (string, error) {
//					id := _args[0].(string)
//					exampleAccountSAS := _args[1].(storage.GetAccountSASResult)
//					return fmt.Sprintf("%v%v", id, exampleAccountSAS.Sas), nil
//				}).(pulumi.StringOutput),
//				Source: &compute.RunCommandSourceArgs{
//					ScriptUri: pulumi.All(example1.ID(), exampleAccountSAS).ApplyT(func(_args []interface{}) (string, error) {
//						id := _args[0].(string)
//						exampleAccountSAS := _args[1].(storage.GetAccountSASResult)
//						return fmt.Sprintf("%v%v", id, exampleAccountSAS.Sas), nil
//					}).(pulumi.StringOutput),
//				},
//				Parameters: compute.RunCommandParameterArray{
//					&compute.RunCommandParameterArgs{
//						Name:  pulumi.String("example-vm1"),
//						Value: pulumi.String("val1"),
//					},
//				},
//				Tags: pulumi.StringMap{
//					"environment": pulumi.String("terraform-example-s"),
//					"some_key":    pulumi.String("some-value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// An existing Virtual Machine Run Command can be imported into Terraform using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:compute/runCommand:RunCommand example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Compute/virtualMachines/vm1/runCommands/rc1
//
// ```
type RunCommand struct {
	pulumi.CustomResourceState

	// An `errorBlobManagedIdentity` block as defined below. User-assigned managed Identity that has access to errorBlobUri storage blob.
	ErrorBlobManagedIdentity RunCommandErrorBlobManagedIdentityPtrOutput `pulumi:"errorBlobManagedIdentity"`
	// Specifies the Azure storage blob where script error stream will be uploaded.
	ErrorBlobUri  pulumi.StringPtrOutput            `pulumi:"errorBlobUri"`
	InstanceViews RunCommandInstanceViewArrayOutput `pulumi:"instanceViews"`
	// The Azure Region where the Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name of this Virtual Machine Run Command. Changing this forces a new Virtual Machine Run Command to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// An `outputBlobManagedIdentity` block as defined below. User-assigned managed Identity that has access to outputBlobUri storage blob.
	OutputBlobManagedIdentity RunCommandOutputBlobManagedIdentityPtrOutput `pulumi:"outputBlobManagedIdentity"`
	// Specifies the Azure storage blob where script output stream will be uploaded. It can be basic blob URI with SAS token.
	OutputBlobUri pulumi.StringPtrOutput `pulumi:"outputBlobUri"`
	// A list of `parameter` blocks as defined below. The parameters used by the script.
	Parameters RunCommandParameterArrayOutput `pulumi:"parameters"`
	// A list of `protectedParameter` blocks as defined below. The protected parameters used by the script.
	ProtectedParameters RunCommandProtectedParameterArrayOutput `pulumi:"protectedParameters"`
	// Specifies the user account password on the VM when executing the Virtual Machine Run Command.
	RunAsPassword pulumi.StringPtrOutput `pulumi:"runAsPassword"`
	// Specifies the user account on the VM when executing the Virtual Machine Run Command.
	RunAsUser pulumi.StringPtrOutput `pulumi:"runAsUser"`
	// A `source` block as defined below. The source of the run command script.
	Source RunCommandSourceOutput `pulumi:"source"`
	// A mapping of tags which should be assigned to the Virtual Machine Run Command.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies the Virtual Machine ID within which this Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
	VirtualMachineId pulumi.StringOutput `pulumi:"virtualMachineId"`
}

// NewRunCommand registers a new resource with the given unique name, arguments, and options.
func NewRunCommand(ctx *pulumi.Context,
	name string, args *RunCommandArgs, opts ...pulumi.ResourceOption) (*RunCommand, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	if args.VirtualMachineId == nil {
		return nil, errors.New("invalid value for required argument 'VirtualMachineId'")
	}
	if args.ErrorBlobManagedIdentity != nil {
		args.ErrorBlobManagedIdentity = pulumi.ToSecret(args.ErrorBlobManagedIdentity).(RunCommandErrorBlobManagedIdentityPtrInput)
	}
	if args.OutputBlobManagedIdentity != nil {
		args.OutputBlobManagedIdentity = pulumi.ToSecret(args.OutputBlobManagedIdentity).(RunCommandOutputBlobManagedIdentityPtrInput)
	}
	if args.ProtectedParameters != nil {
		args.ProtectedParameters = pulumi.ToSecret(args.ProtectedParameters).(RunCommandProtectedParameterArrayInput)
	}
	if args.RunAsPassword != nil {
		args.RunAsPassword = pulumi.ToSecret(args.RunAsPassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"errorBlobManagedIdentity",
		"outputBlobManagedIdentity",
		"protectedParameters",
		"runAsPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RunCommand
	err := ctx.RegisterResource("azure:compute/runCommand:RunCommand", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRunCommand gets an existing RunCommand resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRunCommand(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RunCommandState, opts ...pulumi.ResourceOption) (*RunCommand, error) {
	var resource RunCommand
	err := ctx.ReadResource("azure:compute/runCommand:RunCommand", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RunCommand resources.
type runCommandState struct {
	// An `errorBlobManagedIdentity` block as defined below. User-assigned managed Identity that has access to errorBlobUri storage blob.
	ErrorBlobManagedIdentity *RunCommandErrorBlobManagedIdentity `pulumi:"errorBlobManagedIdentity"`
	// Specifies the Azure storage blob where script error stream will be uploaded.
	ErrorBlobUri  *string                  `pulumi:"errorBlobUri"`
	InstanceViews []RunCommandInstanceView `pulumi:"instanceViews"`
	// The Azure Region where the Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of this Virtual Machine Run Command. Changing this forces a new Virtual Machine Run Command to be created.
	Name *string `pulumi:"name"`
	// An `outputBlobManagedIdentity` block as defined below. User-assigned managed Identity that has access to outputBlobUri storage blob.
	OutputBlobManagedIdentity *RunCommandOutputBlobManagedIdentity `pulumi:"outputBlobManagedIdentity"`
	// Specifies the Azure storage blob where script output stream will be uploaded. It can be basic blob URI with SAS token.
	OutputBlobUri *string `pulumi:"outputBlobUri"`
	// A list of `parameter` blocks as defined below. The parameters used by the script.
	Parameters []RunCommandParameter `pulumi:"parameters"`
	// A list of `protectedParameter` blocks as defined below. The protected parameters used by the script.
	ProtectedParameters []RunCommandProtectedParameter `pulumi:"protectedParameters"`
	// Specifies the user account password on the VM when executing the Virtual Machine Run Command.
	RunAsPassword *string `pulumi:"runAsPassword"`
	// Specifies the user account on the VM when executing the Virtual Machine Run Command.
	RunAsUser *string `pulumi:"runAsUser"`
	// A `source` block as defined below. The source of the run command script.
	Source *RunCommandSource `pulumi:"source"`
	// A mapping of tags which should be assigned to the Virtual Machine Run Command.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the Virtual Machine ID within which this Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
	VirtualMachineId *string `pulumi:"virtualMachineId"`
}

type RunCommandState struct {
	// An `errorBlobManagedIdentity` block as defined below. User-assigned managed Identity that has access to errorBlobUri storage blob.
	ErrorBlobManagedIdentity RunCommandErrorBlobManagedIdentityPtrInput
	// Specifies the Azure storage blob where script error stream will be uploaded.
	ErrorBlobUri  pulumi.StringPtrInput
	InstanceViews RunCommandInstanceViewArrayInput
	// The Azure Region where the Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of this Virtual Machine Run Command. Changing this forces a new Virtual Machine Run Command to be created.
	Name pulumi.StringPtrInput
	// An `outputBlobManagedIdentity` block as defined below. User-assigned managed Identity that has access to outputBlobUri storage blob.
	OutputBlobManagedIdentity RunCommandOutputBlobManagedIdentityPtrInput
	// Specifies the Azure storage blob where script output stream will be uploaded. It can be basic blob URI with SAS token.
	OutputBlobUri pulumi.StringPtrInput
	// A list of `parameter` blocks as defined below. The parameters used by the script.
	Parameters RunCommandParameterArrayInput
	// A list of `protectedParameter` blocks as defined below. The protected parameters used by the script.
	ProtectedParameters RunCommandProtectedParameterArrayInput
	// Specifies the user account password on the VM when executing the Virtual Machine Run Command.
	RunAsPassword pulumi.StringPtrInput
	// Specifies the user account on the VM when executing the Virtual Machine Run Command.
	RunAsUser pulumi.StringPtrInput
	// A `source` block as defined below. The source of the run command script.
	Source RunCommandSourcePtrInput
	// A mapping of tags which should be assigned to the Virtual Machine Run Command.
	Tags pulumi.StringMapInput
	// Specifies the Virtual Machine ID within which this Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
	VirtualMachineId pulumi.StringPtrInput
}

func (RunCommandState) ElementType() reflect.Type {
	return reflect.TypeOf((*runCommandState)(nil)).Elem()
}

type runCommandArgs struct {
	// An `errorBlobManagedIdentity` block as defined below. User-assigned managed Identity that has access to errorBlobUri storage blob.
	ErrorBlobManagedIdentity *RunCommandErrorBlobManagedIdentity `pulumi:"errorBlobManagedIdentity"`
	// Specifies the Azure storage blob where script error stream will be uploaded.
	ErrorBlobUri *string `pulumi:"errorBlobUri"`
	// The Azure Region where the Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of this Virtual Machine Run Command. Changing this forces a new Virtual Machine Run Command to be created.
	Name *string `pulumi:"name"`
	// An `outputBlobManagedIdentity` block as defined below. User-assigned managed Identity that has access to outputBlobUri storage blob.
	OutputBlobManagedIdentity *RunCommandOutputBlobManagedIdentity `pulumi:"outputBlobManagedIdentity"`
	// Specifies the Azure storage blob where script output stream will be uploaded. It can be basic blob URI with SAS token.
	OutputBlobUri *string `pulumi:"outputBlobUri"`
	// A list of `parameter` blocks as defined below. The parameters used by the script.
	Parameters []RunCommandParameter `pulumi:"parameters"`
	// A list of `protectedParameter` blocks as defined below. The protected parameters used by the script.
	ProtectedParameters []RunCommandProtectedParameter `pulumi:"protectedParameters"`
	// Specifies the user account password on the VM when executing the Virtual Machine Run Command.
	RunAsPassword *string `pulumi:"runAsPassword"`
	// Specifies the user account on the VM when executing the Virtual Machine Run Command.
	RunAsUser *string `pulumi:"runAsUser"`
	// A `source` block as defined below. The source of the run command script.
	Source RunCommandSource `pulumi:"source"`
	// A mapping of tags which should be assigned to the Virtual Machine Run Command.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the Virtual Machine ID within which this Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
	VirtualMachineId string `pulumi:"virtualMachineId"`
}

// The set of arguments for constructing a RunCommand resource.
type RunCommandArgs struct {
	// An `errorBlobManagedIdentity` block as defined below. User-assigned managed Identity that has access to errorBlobUri storage blob.
	ErrorBlobManagedIdentity RunCommandErrorBlobManagedIdentityPtrInput
	// Specifies the Azure storage blob where script error stream will be uploaded.
	ErrorBlobUri pulumi.StringPtrInput
	// The Azure Region where the Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of this Virtual Machine Run Command. Changing this forces a new Virtual Machine Run Command to be created.
	Name pulumi.StringPtrInput
	// An `outputBlobManagedIdentity` block as defined below. User-assigned managed Identity that has access to outputBlobUri storage blob.
	OutputBlobManagedIdentity RunCommandOutputBlobManagedIdentityPtrInput
	// Specifies the Azure storage blob where script output stream will be uploaded. It can be basic blob URI with SAS token.
	OutputBlobUri pulumi.StringPtrInput
	// A list of `parameter` blocks as defined below. The parameters used by the script.
	Parameters RunCommandParameterArrayInput
	// A list of `protectedParameter` blocks as defined below. The protected parameters used by the script.
	ProtectedParameters RunCommandProtectedParameterArrayInput
	// Specifies the user account password on the VM when executing the Virtual Machine Run Command.
	RunAsPassword pulumi.StringPtrInput
	// Specifies the user account on the VM when executing the Virtual Machine Run Command.
	RunAsUser pulumi.StringPtrInput
	// A `source` block as defined below. The source of the run command script.
	Source RunCommandSourceInput
	// A mapping of tags which should be assigned to the Virtual Machine Run Command.
	Tags pulumi.StringMapInput
	// Specifies the Virtual Machine ID within which this Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
	VirtualMachineId pulumi.StringInput
}

func (RunCommandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*runCommandArgs)(nil)).Elem()
}

type RunCommandInput interface {
	pulumi.Input

	ToRunCommandOutput() RunCommandOutput
	ToRunCommandOutputWithContext(ctx context.Context) RunCommandOutput
}

func (*RunCommand) ElementType() reflect.Type {
	return reflect.TypeOf((**RunCommand)(nil)).Elem()
}

func (i *RunCommand) ToRunCommandOutput() RunCommandOutput {
	return i.ToRunCommandOutputWithContext(context.Background())
}

func (i *RunCommand) ToRunCommandOutputWithContext(ctx context.Context) RunCommandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunCommandOutput)
}

// RunCommandArrayInput is an input type that accepts RunCommandArray and RunCommandArrayOutput values.
// You can construct a concrete instance of `RunCommandArrayInput` via:
//
//	RunCommandArray{ RunCommandArgs{...} }
type RunCommandArrayInput interface {
	pulumi.Input

	ToRunCommandArrayOutput() RunCommandArrayOutput
	ToRunCommandArrayOutputWithContext(context.Context) RunCommandArrayOutput
}

type RunCommandArray []RunCommandInput

func (RunCommandArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RunCommand)(nil)).Elem()
}

func (i RunCommandArray) ToRunCommandArrayOutput() RunCommandArrayOutput {
	return i.ToRunCommandArrayOutputWithContext(context.Background())
}

func (i RunCommandArray) ToRunCommandArrayOutputWithContext(ctx context.Context) RunCommandArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunCommandArrayOutput)
}

// RunCommandMapInput is an input type that accepts RunCommandMap and RunCommandMapOutput values.
// You can construct a concrete instance of `RunCommandMapInput` via:
//
//	RunCommandMap{ "key": RunCommandArgs{...} }
type RunCommandMapInput interface {
	pulumi.Input

	ToRunCommandMapOutput() RunCommandMapOutput
	ToRunCommandMapOutputWithContext(context.Context) RunCommandMapOutput
}

type RunCommandMap map[string]RunCommandInput

func (RunCommandMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RunCommand)(nil)).Elem()
}

func (i RunCommandMap) ToRunCommandMapOutput() RunCommandMapOutput {
	return i.ToRunCommandMapOutputWithContext(context.Background())
}

func (i RunCommandMap) ToRunCommandMapOutputWithContext(ctx context.Context) RunCommandMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunCommandMapOutput)
}

type RunCommandOutput struct{ *pulumi.OutputState }

func (RunCommandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RunCommand)(nil)).Elem()
}

func (o RunCommandOutput) ToRunCommandOutput() RunCommandOutput {
	return o
}

func (o RunCommandOutput) ToRunCommandOutputWithContext(ctx context.Context) RunCommandOutput {
	return o
}

// An `errorBlobManagedIdentity` block as defined below. User-assigned managed Identity that has access to errorBlobUri storage blob.
func (o RunCommandOutput) ErrorBlobManagedIdentity() RunCommandErrorBlobManagedIdentityPtrOutput {
	return o.ApplyT(func(v *RunCommand) RunCommandErrorBlobManagedIdentityPtrOutput { return v.ErrorBlobManagedIdentity }).(RunCommandErrorBlobManagedIdentityPtrOutput)
}

// Specifies the Azure storage blob where script error stream will be uploaded.
func (o RunCommandOutput) ErrorBlobUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RunCommand) pulumi.StringPtrOutput { return v.ErrorBlobUri }).(pulumi.StringPtrOutput)
}

func (o RunCommandOutput) InstanceViews() RunCommandInstanceViewArrayOutput {
	return o.ApplyT(func(v *RunCommand) RunCommandInstanceViewArrayOutput { return v.InstanceViews }).(RunCommandInstanceViewArrayOutput)
}

// The Azure Region where the Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
func (o RunCommandOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *RunCommand) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name of this Virtual Machine Run Command. Changing this forces a new Virtual Machine Run Command to be created.
func (o RunCommandOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RunCommand) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// An `outputBlobManagedIdentity` block as defined below. User-assigned managed Identity that has access to outputBlobUri storage blob.
func (o RunCommandOutput) OutputBlobManagedIdentity() RunCommandOutputBlobManagedIdentityPtrOutput {
	return o.ApplyT(func(v *RunCommand) RunCommandOutputBlobManagedIdentityPtrOutput { return v.OutputBlobManagedIdentity }).(RunCommandOutputBlobManagedIdentityPtrOutput)
}

// Specifies the Azure storage blob where script output stream will be uploaded. It can be basic blob URI with SAS token.
func (o RunCommandOutput) OutputBlobUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RunCommand) pulumi.StringPtrOutput { return v.OutputBlobUri }).(pulumi.StringPtrOutput)
}

// A list of `parameter` blocks as defined below. The parameters used by the script.
func (o RunCommandOutput) Parameters() RunCommandParameterArrayOutput {
	return o.ApplyT(func(v *RunCommand) RunCommandParameterArrayOutput { return v.Parameters }).(RunCommandParameterArrayOutput)
}

// A list of `protectedParameter` blocks as defined below. The protected parameters used by the script.
func (o RunCommandOutput) ProtectedParameters() RunCommandProtectedParameterArrayOutput {
	return o.ApplyT(func(v *RunCommand) RunCommandProtectedParameterArrayOutput { return v.ProtectedParameters }).(RunCommandProtectedParameterArrayOutput)
}

// Specifies the user account password on the VM when executing the Virtual Machine Run Command.
func (o RunCommandOutput) RunAsPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RunCommand) pulumi.StringPtrOutput { return v.RunAsPassword }).(pulumi.StringPtrOutput)
}

// Specifies the user account on the VM when executing the Virtual Machine Run Command.
func (o RunCommandOutput) RunAsUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RunCommand) pulumi.StringPtrOutput { return v.RunAsUser }).(pulumi.StringPtrOutput)
}

// A `source` block as defined below. The source of the run command script.
func (o RunCommandOutput) Source() RunCommandSourceOutput {
	return o.ApplyT(func(v *RunCommand) RunCommandSourceOutput { return v.Source }).(RunCommandSourceOutput)
}

// A mapping of tags which should be assigned to the Virtual Machine Run Command.
func (o RunCommandOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RunCommand) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the Virtual Machine ID within which this Virtual Machine Run Command should exist. Changing this forces a new Virtual Machine Run Command to be created.
func (o RunCommandOutput) VirtualMachineId() pulumi.StringOutput {
	return o.ApplyT(func(v *RunCommand) pulumi.StringOutput { return v.VirtualMachineId }).(pulumi.StringOutput)
}

type RunCommandArrayOutput struct{ *pulumi.OutputState }

func (RunCommandArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RunCommand)(nil)).Elem()
}

func (o RunCommandArrayOutput) ToRunCommandArrayOutput() RunCommandArrayOutput {
	return o
}

func (o RunCommandArrayOutput) ToRunCommandArrayOutputWithContext(ctx context.Context) RunCommandArrayOutput {
	return o
}

func (o RunCommandArrayOutput) Index(i pulumi.IntInput) RunCommandOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RunCommand {
		return vs[0].([]*RunCommand)[vs[1].(int)]
	}).(RunCommandOutput)
}

type RunCommandMapOutput struct{ *pulumi.OutputState }

func (RunCommandMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RunCommand)(nil)).Elem()
}

func (o RunCommandMapOutput) ToRunCommandMapOutput() RunCommandMapOutput {
	return o
}

func (o RunCommandMapOutput) ToRunCommandMapOutputWithContext(ctx context.Context) RunCommandMapOutput {
	return o
}

func (o RunCommandMapOutput) MapIndex(k pulumi.StringInput) RunCommandOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RunCommand {
		return vs[0].(map[string]*RunCommand)[vs[1].(string)]
	}).(RunCommandOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RunCommandInput)(nil)).Elem(), &RunCommand{})
	pulumi.RegisterInputType(reflect.TypeOf((*RunCommandArrayInput)(nil)).Elem(), RunCommandArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RunCommandMapInput)(nil)).Elem(), RunCommandMap{})
	pulumi.RegisterOutputType(RunCommandOutput{})
	pulumi.RegisterOutputType(RunCommandArrayOutput{})
	pulumi.RegisterOutputType(RunCommandMapOutput{})
}
