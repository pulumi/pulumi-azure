// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a managed disk.
//
// ## Example Usage
// ### With Create Empty
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/compute"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewManagedDisk(ctx, "exampleManagedDisk", &compute.ManagedDiskArgs{
//				Location:           exampleResourceGroup.Location,
//				ResourceGroupName:  exampleResourceGroup.Name,
//				StorageAccountType: pulumi.String("Standard_LRS"),
//				CreateOption:       pulumi.String("Empty"),
//				DiskSizeGb:         pulumi.Int(1),
//				Tags: pulumi.StringMap{
//					"environment": pulumi.String("staging"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### With Create Copy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/compute"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			source, err := compute.NewManagedDisk(ctx, "source", &compute.ManagedDiskArgs{
//				Location:           example.Location,
//				ResourceGroupName:  example.Name,
//				StorageAccountType: pulumi.String("Standard_LRS"),
//				CreateOption:       pulumi.String("Empty"),
//				DiskSizeGb:         pulumi.Int(1),
//				Tags: pulumi.StringMap{
//					"environment": pulumi.String("staging"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewManagedDisk(ctx, "copy", &compute.ManagedDiskArgs{
//				Location:           example.Location,
//				ResourceGroupName:  example.Name,
//				StorageAccountType: pulumi.String("Standard_LRS"),
//				CreateOption:       pulumi.String("Copy"),
//				SourceResourceId:   source.ID(),
//				DiskSizeGb:         pulumi.Int(1),
//				Tags: pulumi.StringMap{
//					"environment": pulumi.String("staging"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Managed Disks can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:compute/managedDisk:ManagedDisk example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Compute/disks/manageddisk1
//
// ```
type ManagedDisk struct {
	pulumi.CustomResourceState

	// The method to use when creating the managed disk. Changing this forces a new resource to be created. Possible values include:
	CreateOption pulumi.StringOutput `pulumi:"createOption"`
	// The ID of the disk access resource for using private endpoints on disks.
	//
	// > **Note:** `diskAccessId` is only supported when `networkAccessPolicy` is set to `AllowPrivate`.
	DiskAccessId pulumi.StringPtrOutput `pulumi:"diskAccessId"`
	// The ID of a Disk Encryption Set which should be used to encrypt this Managed Disk. Conflicts with `secureVmDiskEncryptionSetId`.
	//
	// > **NOTE:** The Disk Encryption Set must have the `Reader` Role Assignment scoped on the Key Vault - in addition to an Access Policy to the Key Vault
	//
	// > **NOTE:** Disk Encryption Sets are in Public Preview in a limited set of regions
	DiskEncryptionSetId pulumi.StringPtrOutput `pulumi:"diskEncryptionSetId"`
	// The number of IOPS allowed across all VMs mounting the shared disk as read-only; only settable for UltraSSD disks and PremiumV2 disks with shared disk enabled. One operation can transfer between 4k and 256k bytes.
	DiskIopsReadOnly pulumi.IntOutput `pulumi:"diskIopsReadOnly"`
	// The number of IOPS allowed for this disk; only settable for UltraSSD disks and PremiumV2 disks. One operation can transfer between 4k and 256k bytes.
	DiskIopsReadWrite pulumi.IntOutput `pulumi:"diskIopsReadWrite"`
	// The bandwidth allowed across all VMs mounting the shared disk as read-only; only settable for UltraSSD disks and PremiumV2 disks with shared disk enabled. MBps means millions of bytes per second.
	DiskMbpsReadOnly pulumi.IntOutput `pulumi:"diskMbpsReadOnly"`
	// The bandwidth allowed for this disk; only settable for UltraSSD disks and PremiumV2 disks. MBps means millions of bytes per second.
	DiskMbpsReadWrite pulumi.IntOutput `pulumi:"diskMbpsReadWrite"`
	DiskSizeGb        pulumi.IntOutput `pulumi:"diskSizeGb"`
	// Specifies the Edge Zone within the Azure Region where this Managed Disk should exist. Changing this forces a new Managed Disk to be created.
	EdgeZone pulumi.StringPtrOutput `pulumi:"edgeZone"`
	// A `encryptionSettings` block as defined below.
	//
	// > **NOTE:** Removing `encryptionSettings` forces a new resource to be created.
	EncryptionSettings ManagedDiskEncryptionSettingsPtrOutput `pulumi:"encryptionSettings"`
	// ID of a Gallery Image Version to copy when `createOption` is `FromImage`. This field cannot be specified if imageReferenceId is specified. Changing this forces a new resource to be created.
	GalleryImageReferenceId pulumi.StringPtrOutput `pulumi:"galleryImageReferenceId"`
	// The HyperV Generation of the Disk when the source of an `Import` or `Copy` operation targets a source that contains an operating system. Possible values are `V1` and `V2`. For `ImportSecure` it must be set to `V2`. Changing this forces a new resource to be created.
	HyperVGeneration pulumi.StringPtrOutput `pulumi:"hyperVGeneration"`
	// ID of an existing platform/marketplace disk image to copy when `createOption` is `FromImage`. This field cannot be specified if galleryImageReferenceId is specified. Changing this forces a new resource to be created.
	ImageReferenceId pulumi.StringPtrOutput `pulumi:"imageReferenceId"`
	// Specified the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Logical Sector Size. Possible values are: `512` and `4096`. Defaults to `4096`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** Setting logical sector size is supported only with `UltraSSD_LRS` disks and `PremiumV2_LRS` disks.
	LogicalSectorSize pulumi.IntOutput `pulumi:"logicalSectorSize"`
	// The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time.
	//
	// > **Note:** Premium SSD maxShares limit: `P15` and `P20` disks: 2. `P30`,`P40`,`P50` disks: 5. `P60`,`P70`,`P80` disks: 10. For ultra disks the `maxShares` minimum value is 1 and the maximum is 5.
	MaxShares pulumi.IntOutput `pulumi:"maxShares"`
	// Specifies the name of the Managed Disk. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Policy for accessing the disk via network. Allowed values are `AllowAll`, `AllowPrivate`, and `DenyAll`.
	NetworkAccessPolicy pulumi.StringPtrOutput `pulumi:"networkAccessPolicy"`
	// Specifies if On-Demand Bursting is enabled for the Managed Disk.
	//
	// > **Note:** Credit-Based Bursting is enabled by default on all eligible disks. More information on [Credit-Based and On-Demand Bursting can be found in the documentation](https://docs.microsoft.com/azure/virtual-machines/disk-bursting#disk-level-bursting).
	OnDemandBurstingEnabled pulumi.BoolPtrOutput `pulumi:"onDemandBurstingEnabled"`
	// Specifies whether this Managed Disk should be optimized for frequent disk attachments (where a disk is attached/detached more than 5 times in a day). Defaults to `false`.
	//
	// > **Note:** Setting `optimizedFrequentAttachEnabled` to `true` causes the disks to not align with the fault domain of the Virtual Machine, which can have operational implications.
	OptimizedFrequentAttachEnabled pulumi.BoolPtrOutput `pulumi:"optimizedFrequentAttachEnabled"`
	// Specify a value when the source of an `Import`, `ImportSecure` or `Copy` operation targets a source that contains an operating system. Valid values are `Linux` or `Windows`.
	OsType pulumi.StringPtrOutput `pulumi:"osType"`
	// Specifies whether Performance Plus is enabled for this Managed Disk. Defaults to `false`. Changing this forces a new resource to be created.
	//
	// > **Note:** `performancePlusEnabled` can only be set to `true` when using a Managed Disk with an Ultra SSD.
	PerformancePlusEnabled pulumi.BoolPtrOutput `pulumi:"performancePlusEnabled"`
	// Whether it is allowed to access the disk via public network. Defaults to `true`.
	//
	// For more information on managed disks, such as sizing options and pricing, please check out the [Azure Documentation](https://docs.microsoft.com/azure/storage/storage-managed-disks-overview).
	PublicNetworkAccessEnabled pulumi.BoolPtrOutput `pulumi:"publicNetworkAccessEnabled"`
	// The name of the Resource Group where the Managed Disk should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The ID of the Disk Encryption Set which should be used to Encrypt this OS Disk when the Virtual Machine is a Confidential VM. Conflicts with `diskEncryptionSetId`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** `secureVmDiskEncryptionSetId` can only be specified when `securityType` is set to `ConfidentialVM_DiskEncryptedWithCustomerKey`.
	SecureVmDiskEncryptionSetId pulumi.StringPtrOutput `pulumi:"secureVmDiskEncryptionSetId"`
	// Security Type of the Managed Disk when it is used for a Confidential VM. Possible values are `ConfidentialVM_VMGuestStateOnlyEncryptedWithPlatformKey`, `ConfidentialVM_DiskEncryptedWithPlatformKey` and `ConfidentialVM_DiskEncryptedWithCustomerKey`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** When `securityType` is set to `ConfidentialVM_DiskEncryptedWithCustomerKey` the value of `createOption` must be one of `FromImage` or `ImportSecure`.
	//
	// > **NOTE:** `securityType` cannot be specified when `trustedLaunchEnabled` is set to true.
	//
	// > **NOTE:** `secureVmDiskEncryptionSetId` must be specified when `securityType` is set to `ConfidentialVM_DiskEncryptedWithCustomerKey`.
	SecurityType pulumi.StringPtrOutput `pulumi:"securityType"`
	// The ID of an existing Managed Disk or Snapshot to copy when `createOption` is `Copy` or the recovery point to restore when `createOption` is `Restore`. Changing this forces a new resource to be created.
	SourceResourceId pulumi.StringPtrOutput `pulumi:"sourceResourceId"`
	// URI to a valid VHD file to be used when `createOption` is `Import` or `ImportSecure`. Changing this forces a new resource to be created.
	SourceUri pulumi.StringOutput `pulumi:"sourceUri"`
	// The ID of the Storage Account where the `sourceUri` is located. Required when `createOption` is set to `Import` or `ImportSecure`. Changing this forces a new resource to be created.
	StorageAccountId pulumi.StringPtrOutput `pulumi:"storageAccountId"`
	// The type of storage to use for the managed disk. Possible values are `Standard_LRS`, `StandardSSD_ZRS`, `Premium_LRS`, `PremiumV2_LRS`, `Premium_ZRS`, `StandardSSD_LRS` or `UltraSSD_LRS`.
	//
	// > **Note:** Azure Ultra Disk Storage is only available in a region that support availability zones and can only enabled on the following VM series: `ESv3`, `DSv3`, `FSv3`, `LSv2`, `M` and `Mv2`. For more information see the `Azure Ultra Disk Storage` [product documentation](https://docs.microsoft.com/azure/virtual-machines/windows/disks-enable-ultra-ssd).
	StorageAccountType pulumi.StringOutput `pulumi:"storageAccountType"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	Tier pulumi.StringOutput    `pulumi:"tier"`
	// Specifies if Trusted Launch is enabled for the Managed Disk. Changing this forces a new resource to be created.
	//
	// > **Note:** Trusted Launch can only be enabled when `createOption` is `FromImage` or `Import`.
	TrustedLaunchEnabled pulumi.BoolPtrOutput `pulumi:"trustedLaunchEnabled"`
	// Specifies the size of the managed disk to create in bytes. Required when `createOption` is `Upload`. The value must be equal to the source disk to be copied in bytes. Source disk size could be calculated with `ls -l` or `wc -c`. More information can be found at [Copy a managed disk](https://learn.microsoft.com/en-us/azure/virtual-machines/linux/disks-upload-vhd-to-managed-disk-cli#copy-a-managed-disk). Changing this forces a new resource to be created.
	UploadSizeBytes pulumi.IntPtrOutput `pulumi:"uploadSizeBytes"`
	// Specifies the Availability Zone in which this Managed Disk should be located. Changing this property forces a new resource to be created.
	//
	// > **Note:** Availability Zones are [only supported in select regions at this time](https://docs.microsoft.com/azure/availability-zones/az-overview).
	Zone pulumi.StringPtrOutput `pulumi:"zone"`
}

// NewManagedDisk registers a new resource with the given unique name, arguments, and options.
func NewManagedDisk(ctx *pulumi.Context,
	name string, args *ManagedDiskArgs, opts ...pulumi.ResourceOption) (*ManagedDisk, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CreateOption == nil {
		return nil, errors.New("invalid value for required argument 'CreateOption'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.StorageAccountType == nil {
		return nil, errors.New("invalid value for required argument 'StorageAccountType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManagedDisk
	err := ctx.RegisterResource("azure:compute/managedDisk:ManagedDisk", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedDisk gets an existing ManagedDisk resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedDisk(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedDiskState, opts ...pulumi.ResourceOption) (*ManagedDisk, error) {
	var resource ManagedDisk
	err := ctx.ReadResource("azure:compute/managedDisk:ManagedDisk", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedDisk resources.
type managedDiskState struct {
	// The method to use when creating the managed disk. Changing this forces a new resource to be created. Possible values include:
	CreateOption *string `pulumi:"createOption"`
	// The ID of the disk access resource for using private endpoints on disks.
	//
	// > **Note:** `diskAccessId` is only supported when `networkAccessPolicy` is set to `AllowPrivate`.
	DiskAccessId *string `pulumi:"diskAccessId"`
	// The ID of a Disk Encryption Set which should be used to encrypt this Managed Disk. Conflicts with `secureVmDiskEncryptionSetId`.
	//
	// > **NOTE:** The Disk Encryption Set must have the `Reader` Role Assignment scoped on the Key Vault - in addition to an Access Policy to the Key Vault
	//
	// > **NOTE:** Disk Encryption Sets are in Public Preview in a limited set of regions
	DiskEncryptionSetId *string `pulumi:"diskEncryptionSetId"`
	// The number of IOPS allowed across all VMs mounting the shared disk as read-only; only settable for UltraSSD disks and PremiumV2 disks with shared disk enabled. One operation can transfer between 4k and 256k bytes.
	DiskIopsReadOnly *int `pulumi:"diskIopsReadOnly"`
	// The number of IOPS allowed for this disk; only settable for UltraSSD disks and PremiumV2 disks. One operation can transfer between 4k and 256k bytes.
	DiskIopsReadWrite *int `pulumi:"diskIopsReadWrite"`
	// The bandwidth allowed across all VMs mounting the shared disk as read-only; only settable for UltraSSD disks and PremiumV2 disks with shared disk enabled. MBps means millions of bytes per second.
	DiskMbpsReadOnly *int `pulumi:"diskMbpsReadOnly"`
	// The bandwidth allowed for this disk; only settable for UltraSSD disks and PremiumV2 disks. MBps means millions of bytes per second.
	DiskMbpsReadWrite *int `pulumi:"diskMbpsReadWrite"`
	DiskSizeGb        *int `pulumi:"diskSizeGb"`
	// Specifies the Edge Zone within the Azure Region where this Managed Disk should exist. Changing this forces a new Managed Disk to be created.
	EdgeZone *string `pulumi:"edgeZone"`
	// A `encryptionSettings` block as defined below.
	//
	// > **NOTE:** Removing `encryptionSettings` forces a new resource to be created.
	EncryptionSettings *ManagedDiskEncryptionSettings `pulumi:"encryptionSettings"`
	// ID of a Gallery Image Version to copy when `createOption` is `FromImage`. This field cannot be specified if imageReferenceId is specified. Changing this forces a new resource to be created.
	GalleryImageReferenceId *string `pulumi:"galleryImageReferenceId"`
	// The HyperV Generation of the Disk when the source of an `Import` or `Copy` operation targets a source that contains an operating system. Possible values are `V1` and `V2`. For `ImportSecure` it must be set to `V2`. Changing this forces a new resource to be created.
	HyperVGeneration *string `pulumi:"hyperVGeneration"`
	// ID of an existing platform/marketplace disk image to copy when `createOption` is `FromImage`. This field cannot be specified if galleryImageReferenceId is specified. Changing this forces a new resource to be created.
	ImageReferenceId *string `pulumi:"imageReferenceId"`
	// Specified the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Logical Sector Size. Possible values are: `512` and `4096`. Defaults to `4096`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** Setting logical sector size is supported only with `UltraSSD_LRS` disks and `PremiumV2_LRS` disks.
	LogicalSectorSize *int `pulumi:"logicalSectorSize"`
	// The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time.
	//
	// > **Note:** Premium SSD maxShares limit: `P15` and `P20` disks: 2. `P30`,`P40`,`P50` disks: 5. `P60`,`P70`,`P80` disks: 10. For ultra disks the `maxShares` minimum value is 1 and the maximum is 5.
	MaxShares *int `pulumi:"maxShares"`
	// Specifies the name of the Managed Disk. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Policy for accessing the disk via network. Allowed values are `AllowAll`, `AllowPrivate`, and `DenyAll`.
	NetworkAccessPolicy *string `pulumi:"networkAccessPolicy"`
	// Specifies if On-Demand Bursting is enabled for the Managed Disk.
	//
	// > **Note:** Credit-Based Bursting is enabled by default on all eligible disks. More information on [Credit-Based and On-Demand Bursting can be found in the documentation](https://docs.microsoft.com/azure/virtual-machines/disk-bursting#disk-level-bursting).
	OnDemandBurstingEnabled *bool `pulumi:"onDemandBurstingEnabled"`
	// Specifies whether this Managed Disk should be optimized for frequent disk attachments (where a disk is attached/detached more than 5 times in a day). Defaults to `false`.
	//
	// > **Note:** Setting `optimizedFrequentAttachEnabled` to `true` causes the disks to not align with the fault domain of the Virtual Machine, which can have operational implications.
	OptimizedFrequentAttachEnabled *bool `pulumi:"optimizedFrequentAttachEnabled"`
	// Specify a value when the source of an `Import`, `ImportSecure` or `Copy` operation targets a source that contains an operating system. Valid values are `Linux` or `Windows`.
	OsType *string `pulumi:"osType"`
	// Specifies whether Performance Plus is enabled for this Managed Disk. Defaults to `false`. Changing this forces a new resource to be created.
	//
	// > **Note:** `performancePlusEnabled` can only be set to `true` when using a Managed Disk with an Ultra SSD.
	PerformancePlusEnabled *bool `pulumi:"performancePlusEnabled"`
	// Whether it is allowed to access the disk via public network. Defaults to `true`.
	//
	// For more information on managed disks, such as sizing options and pricing, please check out the [Azure Documentation](https://docs.microsoft.com/azure/storage/storage-managed-disks-overview).
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// The name of the Resource Group where the Managed Disk should exist. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The ID of the Disk Encryption Set which should be used to Encrypt this OS Disk when the Virtual Machine is a Confidential VM. Conflicts with `diskEncryptionSetId`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** `secureVmDiskEncryptionSetId` can only be specified when `securityType` is set to `ConfidentialVM_DiskEncryptedWithCustomerKey`.
	SecureVmDiskEncryptionSetId *string `pulumi:"secureVmDiskEncryptionSetId"`
	// Security Type of the Managed Disk when it is used for a Confidential VM. Possible values are `ConfidentialVM_VMGuestStateOnlyEncryptedWithPlatformKey`, `ConfidentialVM_DiskEncryptedWithPlatformKey` and `ConfidentialVM_DiskEncryptedWithCustomerKey`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** When `securityType` is set to `ConfidentialVM_DiskEncryptedWithCustomerKey` the value of `createOption` must be one of `FromImage` or `ImportSecure`.
	//
	// > **NOTE:** `securityType` cannot be specified when `trustedLaunchEnabled` is set to true.
	//
	// > **NOTE:** `secureVmDiskEncryptionSetId` must be specified when `securityType` is set to `ConfidentialVM_DiskEncryptedWithCustomerKey`.
	SecurityType *string `pulumi:"securityType"`
	// The ID of an existing Managed Disk or Snapshot to copy when `createOption` is `Copy` or the recovery point to restore when `createOption` is `Restore`. Changing this forces a new resource to be created.
	SourceResourceId *string `pulumi:"sourceResourceId"`
	// URI to a valid VHD file to be used when `createOption` is `Import` or `ImportSecure`. Changing this forces a new resource to be created.
	SourceUri *string `pulumi:"sourceUri"`
	// The ID of the Storage Account where the `sourceUri` is located. Required when `createOption` is set to `Import` or `ImportSecure`. Changing this forces a new resource to be created.
	StorageAccountId *string `pulumi:"storageAccountId"`
	// The type of storage to use for the managed disk. Possible values are `Standard_LRS`, `StandardSSD_ZRS`, `Premium_LRS`, `PremiumV2_LRS`, `Premium_ZRS`, `StandardSSD_LRS` or `UltraSSD_LRS`.
	//
	// > **Note:** Azure Ultra Disk Storage is only available in a region that support availability zones and can only enabled on the following VM series: `ESv3`, `DSv3`, `FSv3`, `LSv2`, `M` and `Mv2`. For more information see the `Azure Ultra Disk Storage` [product documentation](https://docs.microsoft.com/azure/virtual-machines/windows/disks-enable-ultra-ssd).
	StorageAccountType *string `pulumi:"storageAccountType"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	Tier *string           `pulumi:"tier"`
	// Specifies if Trusted Launch is enabled for the Managed Disk. Changing this forces a new resource to be created.
	//
	// > **Note:** Trusted Launch can only be enabled when `createOption` is `FromImage` or `Import`.
	TrustedLaunchEnabled *bool `pulumi:"trustedLaunchEnabled"`
	// Specifies the size of the managed disk to create in bytes. Required when `createOption` is `Upload`. The value must be equal to the source disk to be copied in bytes. Source disk size could be calculated with `ls -l` or `wc -c`. More information can be found at [Copy a managed disk](https://learn.microsoft.com/en-us/azure/virtual-machines/linux/disks-upload-vhd-to-managed-disk-cli#copy-a-managed-disk). Changing this forces a new resource to be created.
	UploadSizeBytes *int `pulumi:"uploadSizeBytes"`
	// Specifies the Availability Zone in which this Managed Disk should be located. Changing this property forces a new resource to be created.
	//
	// > **Note:** Availability Zones are [only supported in select regions at this time](https://docs.microsoft.com/azure/availability-zones/az-overview).
	Zone *string `pulumi:"zone"`
}

type ManagedDiskState struct {
	// The method to use when creating the managed disk. Changing this forces a new resource to be created. Possible values include:
	CreateOption pulumi.StringPtrInput
	// The ID of the disk access resource for using private endpoints on disks.
	//
	// > **Note:** `diskAccessId` is only supported when `networkAccessPolicy` is set to `AllowPrivate`.
	DiskAccessId pulumi.StringPtrInput
	// The ID of a Disk Encryption Set which should be used to encrypt this Managed Disk. Conflicts with `secureVmDiskEncryptionSetId`.
	//
	// > **NOTE:** The Disk Encryption Set must have the `Reader` Role Assignment scoped on the Key Vault - in addition to an Access Policy to the Key Vault
	//
	// > **NOTE:** Disk Encryption Sets are in Public Preview in a limited set of regions
	DiskEncryptionSetId pulumi.StringPtrInput
	// The number of IOPS allowed across all VMs mounting the shared disk as read-only; only settable for UltraSSD disks and PremiumV2 disks with shared disk enabled. One operation can transfer between 4k and 256k bytes.
	DiskIopsReadOnly pulumi.IntPtrInput
	// The number of IOPS allowed for this disk; only settable for UltraSSD disks and PremiumV2 disks. One operation can transfer between 4k and 256k bytes.
	DiskIopsReadWrite pulumi.IntPtrInput
	// The bandwidth allowed across all VMs mounting the shared disk as read-only; only settable for UltraSSD disks and PremiumV2 disks with shared disk enabled. MBps means millions of bytes per second.
	DiskMbpsReadOnly pulumi.IntPtrInput
	// The bandwidth allowed for this disk; only settable for UltraSSD disks and PremiumV2 disks. MBps means millions of bytes per second.
	DiskMbpsReadWrite pulumi.IntPtrInput
	DiskSizeGb        pulumi.IntPtrInput
	// Specifies the Edge Zone within the Azure Region where this Managed Disk should exist. Changing this forces a new Managed Disk to be created.
	EdgeZone pulumi.StringPtrInput
	// A `encryptionSettings` block as defined below.
	//
	// > **NOTE:** Removing `encryptionSettings` forces a new resource to be created.
	EncryptionSettings ManagedDiskEncryptionSettingsPtrInput
	// ID of a Gallery Image Version to copy when `createOption` is `FromImage`. This field cannot be specified if imageReferenceId is specified. Changing this forces a new resource to be created.
	GalleryImageReferenceId pulumi.StringPtrInput
	// The HyperV Generation of the Disk when the source of an `Import` or `Copy` operation targets a source that contains an operating system. Possible values are `V1` and `V2`. For `ImportSecure` it must be set to `V2`. Changing this forces a new resource to be created.
	HyperVGeneration pulumi.StringPtrInput
	// ID of an existing platform/marketplace disk image to copy when `createOption` is `FromImage`. This field cannot be specified if galleryImageReferenceId is specified. Changing this forces a new resource to be created.
	ImageReferenceId pulumi.StringPtrInput
	// Specified the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Logical Sector Size. Possible values are: `512` and `4096`. Defaults to `4096`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** Setting logical sector size is supported only with `UltraSSD_LRS` disks and `PremiumV2_LRS` disks.
	LogicalSectorSize pulumi.IntPtrInput
	// The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time.
	//
	// > **Note:** Premium SSD maxShares limit: `P15` and `P20` disks: 2. `P30`,`P40`,`P50` disks: 5. `P60`,`P70`,`P80` disks: 10. For ultra disks the `maxShares` minimum value is 1 and the maximum is 5.
	MaxShares pulumi.IntPtrInput
	// Specifies the name of the Managed Disk. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Policy for accessing the disk via network. Allowed values are `AllowAll`, `AllowPrivate`, and `DenyAll`.
	NetworkAccessPolicy pulumi.StringPtrInput
	// Specifies if On-Demand Bursting is enabled for the Managed Disk.
	//
	// > **Note:** Credit-Based Bursting is enabled by default on all eligible disks. More information on [Credit-Based and On-Demand Bursting can be found in the documentation](https://docs.microsoft.com/azure/virtual-machines/disk-bursting#disk-level-bursting).
	OnDemandBurstingEnabled pulumi.BoolPtrInput
	// Specifies whether this Managed Disk should be optimized for frequent disk attachments (where a disk is attached/detached more than 5 times in a day). Defaults to `false`.
	//
	// > **Note:** Setting `optimizedFrequentAttachEnabled` to `true` causes the disks to not align with the fault domain of the Virtual Machine, which can have operational implications.
	OptimizedFrequentAttachEnabled pulumi.BoolPtrInput
	// Specify a value when the source of an `Import`, `ImportSecure` or `Copy` operation targets a source that contains an operating system. Valid values are `Linux` or `Windows`.
	OsType pulumi.StringPtrInput
	// Specifies whether Performance Plus is enabled for this Managed Disk. Defaults to `false`. Changing this forces a new resource to be created.
	//
	// > **Note:** `performancePlusEnabled` can only be set to `true` when using a Managed Disk with an Ultra SSD.
	PerformancePlusEnabled pulumi.BoolPtrInput
	// Whether it is allowed to access the disk via public network. Defaults to `true`.
	//
	// For more information on managed disks, such as sizing options and pricing, please check out the [Azure Documentation](https://docs.microsoft.com/azure/storage/storage-managed-disks-overview).
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// The name of the Resource Group where the Managed Disk should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The ID of the Disk Encryption Set which should be used to Encrypt this OS Disk when the Virtual Machine is a Confidential VM. Conflicts with `diskEncryptionSetId`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** `secureVmDiskEncryptionSetId` can only be specified when `securityType` is set to `ConfidentialVM_DiskEncryptedWithCustomerKey`.
	SecureVmDiskEncryptionSetId pulumi.StringPtrInput
	// Security Type of the Managed Disk when it is used for a Confidential VM. Possible values are `ConfidentialVM_VMGuestStateOnlyEncryptedWithPlatformKey`, `ConfidentialVM_DiskEncryptedWithPlatformKey` and `ConfidentialVM_DiskEncryptedWithCustomerKey`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** When `securityType` is set to `ConfidentialVM_DiskEncryptedWithCustomerKey` the value of `createOption` must be one of `FromImage` or `ImportSecure`.
	//
	// > **NOTE:** `securityType` cannot be specified when `trustedLaunchEnabled` is set to true.
	//
	// > **NOTE:** `secureVmDiskEncryptionSetId` must be specified when `securityType` is set to `ConfidentialVM_DiskEncryptedWithCustomerKey`.
	SecurityType pulumi.StringPtrInput
	// The ID of an existing Managed Disk or Snapshot to copy when `createOption` is `Copy` or the recovery point to restore when `createOption` is `Restore`. Changing this forces a new resource to be created.
	SourceResourceId pulumi.StringPtrInput
	// URI to a valid VHD file to be used when `createOption` is `Import` or `ImportSecure`. Changing this forces a new resource to be created.
	SourceUri pulumi.StringPtrInput
	// The ID of the Storage Account where the `sourceUri` is located. Required when `createOption` is set to `Import` or `ImportSecure`. Changing this forces a new resource to be created.
	StorageAccountId pulumi.StringPtrInput
	// The type of storage to use for the managed disk. Possible values are `Standard_LRS`, `StandardSSD_ZRS`, `Premium_LRS`, `PremiumV2_LRS`, `Premium_ZRS`, `StandardSSD_LRS` or `UltraSSD_LRS`.
	//
	// > **Note:** Azure Ultra Disk Storage is only available in a region that support availability zones and can only enabled on the following VM series: `ESv3`, `DSv3`, `FSv3`, `LSv2`, `M` and `Mv2`. For more information see the `Azure Ultra Disk Storage` [product documentation](https://docs.microsoft.com/azure/virtual-machines/windows/disks-enable-ultra-ssd).
	StorageAccountType pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	Tier pulumi.StringPtrInput
	// Specifies if Trusted Launch is enabled for the Managed Disk. Changing this forces a new resource to be created.
	//
	// > **Note:** Trusted Launch can only be enabled when `createOption` is `FromImage` or `Import`.
	TrustedLaunchEnabled pulumi.BoolPtrInput
	// Specifies the size of the managed disk to create in bytes. Required when `createOption` is `Upload`. The value must be equal to the source disk to be copied in bytes. Source disk size could be calculated with `ls -l` or `wc -c`. More information can be found at [Copy a managed disk](https://learn.microsoft.com/en-us/azure/virtual-machines/linux/disks-upload-vhd-to-managed-disk-cli#copy-a-managed-disk). Changing this forces a new resource to be created.
	UploadSizeBytes pulumi.IntPtrInput
	// Specifies the Availability Zone in which this Managed Disk should be located. Changing this property forces a new resource to be created.
	//
	// > **Note:** Availability Zones are [only supported in select regions at this time](https://docs.microsoft.com/azure/availability-zones/az-overview).
	Zone pulumi.StringPtrInput
}

func (ManagedDiskState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedDiskState)(nil)).Elem()
}

type managedDiskArgs struct {
	// The method to use when creating the managed disk. Changing this forces a new resource to be created. Possible values include:
	CreateOption string `pulumi:"createOption"`
	// The ID of the disk access resource for using private endpoints on disks.
	//
	// > **Note:** `diskAccessId` is only supported when `networkAccessPolicy` is set to `AllowPrivate`.
	DiskAccessId *string `pulumi:"diskAccessId"`
	// The ID of a Disk Encryption Set which should be used to encrypt this Managed Disk. Conflicts with `secureVmDiskEncryptionSetId`.
	//
	// > **NOTE:** The Disk Encryption Set must have the `Reader` Role Assignment scoped on the Key Vault - in addition to an Access Policy to the Key Vault
	//
	// > **NOTE:** Disk Encryption Sets are in Public Preview in a limited set of regions
	DiskEncryptionSetId *string `pulumi:"diskEncryptionSetId"`
	// The number of IOPS allowed across all VMs mounting the shared disk as read-only; only settable for UltraSSD disks and PremiumV2 disks with shared disk enabled. One operation can transfer between 4k and 256k bytes.
	DiskIopsReadOnly *int `pulumi:"diskIopsReadOnly"`
	// The number of IOPS allowed for this disk; only settable for UltraSSD disks and PremiumV2 disks. One operation can transfer between 4k and 256k bytes.
	DiskIopsReadWrite *int `pulumi:"diskIopsReadWrite"`
	// The bandwidth allowed across all VMs mounting the shared disk as read-only; only settable for UltraSSD disks and PremiumV2 disks with shared disk enabled. MBps means millions of bytes per second.
	DiskMbpsReadOnly *int `pulumi:"diskMbpsReadOnly"`
	// The bandwidth allowed for this disk; only settable for UltraSSD disks and PremiumV2 disks. MBps means millions of bytes per second.
	DiskMbpsReadWrite *int `pulumi:"diskMbpsReadWrite"`
	DiskSizeGb        *int `pulumi:"diskSizeGb"`
	// Specifies the Edge Zone within the Azure Region where this Managed Disk should exist. Changing this forces a new Managed Disk to be created.
	EdgeZone *string `pulumi:"edgeZone"`
	// A `encryptionSettings` block as defined below.
	//
	// > **NOTE:** Removing `encryptionSettings` forces a new resource to be created.
	EncryptionSettings *ManagedDiskEncryptionSettings `pulumi:"encryptionSettings"`
	// ID of a Gallery Image Version to copy when `createOption` is `FromImage`. This field cannot be specified if imageReferenceId is specified. Changing this forces a new resource to be created.
	GalleryImageReferenceId *string `pulumi:"galleryImageReferenceId"`
	// The HyperV Generation of the Disk when the source of an `Import` or `Copy` operation targets a source that contains an operating system. Possible values are `V1` and `V2`. For `ImportSecure` it must be set to `V2`. Changing this forces a new resource to be created.
	HyperVGeneration *string `pulumi:"hyperVGeneration"`
	// ID of an existing platform/marketplace disk image to copy when `createOption` is `FromImage`. This field cannot be specified if galleryImageReferenceId is specified. Changing this forces a new resource to be created.
	ImageReferenceId *string `pulumi:"imageReferenceId"`
	// Specified the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Logical Sector Size. Possible values are: `512` and `4096`. Defaults to `4096`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** Setting logical sector size is supported only with `UltraSSD_LRS` disks and `PremiumV2_LRS` disks.
	LogicalSectorSize *int `pulumi:"logicalSectorSize"`
	// The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time.
	//
	// > **Note:** Premium SSD maxShares limit: `P15` and `P20` disks: 2. `P30`,`P40`,`P50` disks: 5. `P60`,`P70`,`P80` disks: 10. For ultra disks the `maxShares` minimum value is 1 and the maximum is 5.
	MaxShares *int `pulumi:"maxShares"`
	// Specifies the name of the Managed Disk. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Policy for accessing the disk via network. Allowed values are `AllowAll`, `AllowPrivate`, and `DenyAll`.
	NetworkAccessPolicy *string `pulumi:"networkAccessPolicy"`
	// Specifies if On-Demand Bursting is enabled for the Managed Disk.
	//
	// > **Note:** Credit-Based Bursting is enabled by default on all eligible disks. More information on [Credit-Based and On-Demand Bursting can be found in the documentation](https://docs.microsoft.com/azure/virtual-machines/disk-bursting#disk-level-bursting).
	OnDemandBurstingEnabled *bool `pulumi:"onDemandBurstingEnabled"`
	// Specifies whether this Managed Disk should be optimized for frequent disk attachments (where a disk is attached/detached more than 5 times in a day). Defaults to `false`.
	//
	// > **Note:** Setting `optimizedFrequentAttachEnabled` to `true` causes the disks to not align with the fault domain of the Virtual Machine, which can have operational implications.
	OptimizedFrequentAttachEnabled *bool `pulumi:"optimizedFrequentAttachEnabled"`
	// Specify a value when the source of an `Import`, `ImportSecure` or `Copy` operation targets a source that contains an operating system. Valid values are `Linux` or `Windows`.
	OsType *string `pulumi:"osType"`
	// Specifies whether Performance Plus is enabled for this Managed Disk. Defaults to `false`. Changing this forces a new resource to be created.
	//
	// > **Note:** `performancePlusEnabled` can only be set to `true` when using a Managed Disk with an Ultra SSD.
	PerformancePlusEnabled *bool `pulumi:"performancePlusEnabled"`
	// Whether it is allowed to access the disk via public network. Defaults to `true`.
	//
	// For more information on managed disks, such as sizing options and pricing, please check out the [Azure Documentation](https://docs.microsoft.com/azure/storage/storage-managed-disks-overview).
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// The name of the Resource Group where the Managed Disk should exist. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The ID of the Disk Encryption Set which should be used to Encrypt this OS Disk when the Virtual Machine is a Confidential VM. Conflicts with `diskEncryptionSetId`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** `secureVmDiskEncryptionSetId` can only be specified when `securityType` is set to `ConfidentialVM_DiskEncryptedWithCustomerKey`.
	SecureVmDiskEncryptionSetId *string `pulumi:"secureVmDiskEncryptionSetId"`
	// Security Type of the Managed Disk when it is used for a Confidential VM. Possible values are `ConfidentialVM_VMGuestStateOnlyEncryptedWithPlatformKey`, `ConfidentialVM_DiskEncryptedWithPlatformKey` and `ConfidentialVM_DiskEncryptedWithCustomerKey`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** When `securityType` is set to `ConfidentialVM_DiskEncryptedWithCustomerKey` the value of `createOption` must be one of `FromImage` or `ImportSecure`.
	//
	// > **NOTE:** `securityType` cannot be specified when `trustedLaunchEnabled` is set to true.
	//
	// > **NOTE:** `secureVmDiskEncryptionSetId` must be specified when `securityType` is set to `ConfidentialVM_DiskEncryptedWithCustomerKey`.
	SecurityType *string `pulumi:"securityType"`
	// The ID of an existing Managed Disk or Snapshot to copy when `createOption` is `Copy` or the recovery point to restore when `createOption` is `Restore`. Changing this forces a new resource to be created.
	SourceResourceId *string `pulumi:"sourceResourceId"`
	// URI to a valid VHD file to be used when `createOption` is `Import` or `ImportSecure`. Changing this forces a new resource to be created.
	SourceUri *string `pulumi:"sourceUri"`
	// The ID of the Storage Account where the `sourceUri` is located. Required when `createOption` is set to `Import` or `ImportSecure`. Changing this forces a new resource to be created.
	StorageAccountId *string `pulumi:"storageAccountId"`
	// The type of storage to use for the managed disk. Possible values are `Standard_LRS`, `StandardSSD_ZRS`, `Premium_LRS`, `PremiumV2_LRS`, `Premium_ZRS`, `StandardSSD_LRS` or `UltraSSD_LRS`.
	//
	// > **Note:** Azure Ultra Disk Storage is only available in a region that support availability zones and can only enabled on the following VM series: `ESv3`, `DSv3`, `FSv3`, `LSv2`, `M` and `Mv2`. For more information see the `Azure Ultra Disk Storage` [product documentation](https://docs.microsoft.com/azure/virtual-machines/windows/disks-enable-ultra-ssd).
	StorageAccountType string `pulumi:"storageAccountType"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	Tier *string           `pulumi:"tier"`
	// Specifies if Trusted Launch is enabled for the Managed Disk. Changing this forces a new resource to be created.
	//
	// > **Note:** Trusted Launch can only be enabled when `createOption` is `FromImage` or `Import`.
	TrustedLaunchEnabled *bool `pulumi:"trustedLaunchEnabled"`
	// Specifies the size of the managed disk to create in bytes. Required when `createOption` is `Upload`. The value must be equal to the source disk to be copied in bytes. Source disk size could be calculated with `ls -l` or `wc -c`. More information can be found at [Copy a managed disk](https://learn.microsoft.com/en-us/azure/virtual-machines/linux/disks-upload-vhd-to-managed-disk-cli#copy-a-managed-disk). Changing this forces a new resource to be created.
	UploadSizeBytes *int `pulumi:"uploadSizeBytes"`
	// Specifies the Availability Zone in which this Managed Disk should be located. Changing this property forces a new resource to be created.
	//
	// > **Note:** Availability Zones are [only supported in select regions at this time](https://docs.microsoft.com/azure/availability-zones/az-overview).
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a ManagedDisk resource.
type ManagedDiskArgs struct {
	// The method to use when creating the managed disk. Changing this forces a new resource to be created. Possible values include:
	CreateOption pulumi.StringInput
	// The ID of the disk access resource for using private endpoints on disks.
	//
	// > **Note:** `diskAccessId` is only supported when `networkAccessPolicy` is set to `AllowPrivate`.
	DiskAccessId pulumi.StringPtrInput
	// The ID of a Disk Encryption Set which should be used to encrypt this Managed Disk. Conflicts with `secureVmDiskEncryptionSetId`.
	//
	// > **NOTE:** The Disk Encryption Set must have the `Reader` Role Assignment scoped on the Key Vault - in addition to an Access Policy to the Key Vault
	//
	// > **NOTE:** Disk Encryption Sets are in Public Preview in a limited set of regions
	DiskEncryptionSetId pulumi.StringPtrInput
	// The number of IOPS allowed across all VMs mounting the shared disk as read-only; only settable for UltraSSD disks and PremiumV2 disks with shared disk enabled. One operation can transfer between 4k and 256k bytes.
	DiskIopsReadOnly pulumi.IntPtrInput
	// The number of IOPS allowed for this disk; only settable for UltraSSD disks and PremiumV2 disks. One operation can transfer between 4k and 256k bytes.
	DiskIopsReadWrite pulumi.IntPtrInput
	// The bandwidth allowed across all VMs mounting the shared disk as read-only; only settable for UltraSSD disks and PremiumV2 disks with shared disk enabled. MBps means millions of bytes per second.
	DiskMbpsReadOnly pulumi.IntPtrInput
	// The bandwidth allowed for this disk; only settable for UltraSSD disks and PremiumV2 disks. MBps means millions of bytes per second.
	DiskMbpsReadWrite pulumi.IntPtrInput
	DiskSizeGb        pulumi.IntPtrInput
	// Specifies the Edge Zone within the Azure Region where this Managed Disk should exist. Changing this forces a new Managed Disk to be created.
	EdgeZone pulumi.StringPtrInput
	// A `encryptionSettings` block as defined below.
	//
	// > **NOTE:** Removing `encryptionSettings` forces a new resource to be created.
	EncryptionSettings ManagedDiskEncryptionSettingsPtrInput
	// ID of a Gallery Image Version to copy when `createOption` is `FromImage`. This field cannot be specified if imageReferenceId is specified. Changing this forces a new resource to be created.
	GalleryImageReferenceId pulumi.StringPtrInput
	// The HyperV Generation of the Disk when the source of an `Import` or `Copy` operation targets a source that contains an operating system. Possible values are `V1` and `V2`. For `ImportSecure` it must be set to `V2`. Changing this forces a new resource to be created.
	HyperVGeneration pulumi.StringPtrInput
	// ID of an existing platform/marketplace disk image to copy when `createOption` is `FromImage`. This field cannot be specified if galleryImageReferenceId is specified. Changing this forces a new resource to be created.
	ImageReferenceId pulumi.StringPtrInput
	// Specified the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Logical Sector Size. Possible values are: `512` and `4096`. Defaults to `4096`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** Setting logical sector size is supported only with `UltraSSD_LRS` disks and `PremiumV2_LRS` disks.
	LogicalSectorSize pulumi.IntPtrInput
	// The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time.
	//
	// > **Note:** Premium SSD maxShares limit: `P15` and `P20` disks: 2. `P30`,`P40`,`P50` disks: 5. `P60`,`P70`,`P80` disks: 10. For ultra disks the `maxShares` minimum value is 1 and the maximum is 5.
	MaxShares pulumi.IntPtrInput
	// Specifies the name of the Managed Disk. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Policy for accessing the disk via network. Allowed values are `AllowAll`, `AllowPrivate`, and `DenyAll`.
	NetworkAccessPolicy pulumi.StringPtrInput
	// Specifies if On-Demand Bursting is enabled for the Managed Disk.
	//
	// > **Note:** Credit-Based Bursting is enabled by default on all eligible disks. More information on [Credit-Based and On-Demand Bursting can be found in the documentation](https://docs.microsoft.com/azure/virtual-machines/disk-bursting#disk-level-bursting).
	OnDemandBurstingEnabled pulumi.BoolPtrInput
	// Specifies whether this Managed Disk should be optimized for frequent disk attachments (where a disk is attached/detached more than 5 times in a day). Defaults to `false`.
	//
	// > **Note:** Setting `optimizedFrequentAttachEnabled` to `true` causes the disks to not align with the fault domain of the Virtual Machine, which can have operational implications.
	OptimizedFrequentAttachEnabled pulumi.BoolPtrInput
	// Specify a value when the source of an `Import`, `ImportSecure` or `Copy` operation targets a source that contains an operating system. Valid values are `Linux` or `Windows`.
	OsType pulumi.StringPtrInput
	// Specifies whether Performance Plus is enabled for this Managed Disk. Defaults to `false`. Changing this forces a new resource to be created.
	//
	// > **Note:** `performancePlusEnabled` can only be set to `true` when using a Managed Disk with an Ultra SSD.
	PerformancePlusEnabled pulumi.BoolPtrInput
	// Whether it is allowed to access the disk via public network. Defaults to `true`.
	//
	// For more information on managed disks, such as sizing options and pricing, please check out the [Azure Documentation](https://docs.microsoft.com/azure/storage/storage-managed-disks-overview).
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// The name of the Resource Group where the Managed Disk should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// The ID of the Disk Encryption Set which should be used to Encrypt this OS Disk when the Virtual Machine is a Confidential VM. Conflicts with `diskEncryptionSetId`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** `secureVmDiskEncryptionSetId` can only be specified when `securityType` is set to `ConfidentialVM_DiskEncryptedWithCustomerKey`.
	SecureVmDiskEncryptionSetId pulumi.StringPtrInput
	// Security Type of the Managed Disk when it is used for a Confidential VM. Possible values are `ConfidentialVM_VMGuestStateOnlyEncryptedWithPlatformKey`, `ConfidentialVM_DiskEncryptedWithPlatformKey` and `ConfidentialVM_DiskEncryptedWithCustomerKey`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** When `securityType` is set to `ConfidentialVM_DiskEncryptedWithCustomerKey` the value of `createOption` must be one of `FromImage` or `ImportSecure`.
	//
	// > **NOTE:** `securityType` cannot be specified when `trustedLaunchEnabled` is set to true.
	//
	// > **NOTE:** `secureVmDiskEncryptionSetId` must be specified when `securityType` is set to `ConfidentialVM_DiskEncryptedWithCustomerKey`.
	SecurityType pulumi.StringPtrInput
	// The ID of an existing Managed Disk or Snapshot to copy when `createOption` is `Copy` or the recovery point to restore when `createOption` is `Restore`. Changing this forces a new resource to be created.
	SourceResourceId pulumi.StringPtrInput
	// URI to a valid VHD file to be used when `createOption` is `Import` or `ImportSecure`. Changing this forces a new resource to be created.
	SourceUri pulumi.StringPtrInput
	// The ID of the Storage Account where the `sourceUri` is located. Required when `createOption` is set to `Import` or `ImportSecure`. Changing this forces a new resource to be created.
	StorageAccountId pulumi.StringPtrInput
	// The type of storage to use for the managed disk. Possible values are `Standard_LRS`, `StandardSSD_ZRS`, `Premium_LRS`, `PremiumV2_LRS`, `Premium_ZRS`, `StandardSSD_LRS` or `UltraSSD_LRS`.
	//
	// > **Note:** Azure Ultra Disk Storage is only available in a region that support availability zones and can only enabled on the following VM series: `ESv3`, `DSv3`, `FSv3`, `LSv2`, `M` and `Mv2`. For more information see the `Azure Ultra Disk Storage` [product documentation](https://docs.microsoft.com/azure/virtual-machines/windows/disks-enable-ultra-ssd).
	StorageAccountType pulumi.StringInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	Tier pulumi.StringPtrInput
	// Specifies if Trusted Launch is enabled for the Managed Disk. Changing this forces a new resource to be created.
	//
	// > **Note:** Trusted Launch can only be enabled when `createOption` is `FromImage` or `Import`.
	TrustedLaunchEnabled pulumi.BoolPtrInput
	// Specifies the size of the managed disk to create in bytes. Required when `createOption` is `Upload`. The value must be equal to the source disk to be copied in bytes. Source disk size could be calculated with `ls -l` or `wc -c`. More information can be found at [Copy a managed disk](https://learn.microsoft.com/en-us/azure/virtual-machines/linux/disks-upload-vhd-to-managed-disk-cli#copy-a-managed-disk). Changing this forces a new resource to be created.
	UploadSizeBytes pulumi.IntPtrInput
	// Specifies the Availability Zone in which this Managed Disk should be located. Changing this property forces a new resource to be created.
	//
	// > **Note:** Availability Zones are [only supported in select regions at this time](https://docs.microsoft.com/azure/availability-zones/az-overview).
	Zone pulumi.StringPtrInput
}

func (ManagedDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedDiskArgs)(nil)).Elem()
}

type ManagedDiskInput interface {
	pulumi.Input

	ToManagedDiskOutput() ManagedDiskOutput
	ToManagedDiskOutputWithContext(ctx context.Context) ManagedDiskOutput
}

func (*ManagedDisk) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedDisk)(nil)).Elem()
}

func (i *ManagedDisk) ToManagedDiskOutput() ManagedDiskOutput {
	return i.ToManagedDiskOutputWithContext(context.Background())
}

func (i *ManagedDisk) ToManagedDiskOutputWithContext(ctx context.Context) ManagedDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedDiskOutput)
}

// ManagedDiskArrayInput is an input type that accepts ManagedDiskArray and ManagedDiskArrayOutput values.
// You can construct a concrete instance of `ManagedDiskArrayInput` via:
//
//	ManagedDiskArray{ ManagedDiskArgs{...} }
type ManagedDiskArrayInput interface {
	pulumi.Input

	ToManagedDiskArrayOutput() ManagedDiskArrayOutput
	ToManagedDiskArrayOutputWithContext(context.Context) ManagedDiskArrayOutput
}

type ManagedDiskArray []ManagedDiskInput

func (ManagedDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedDisk)(nil)).Elem()
}

func (i ManagedDiskArray) ToManagedDiskArrayOutput() ManagedDiskArrayOutput {
	return i.ToManagedDiskArrayOutputWithContext(context.Background())
}

func (i ManagedDiskArray) ToManagedDiskArrayOutputWithContext(ctx context.Context) ManagedDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedDiskArrayOutput)
}

// ManagedDiskMapInput is an input type that accepts ManagedDiskMap and ManagedDiskMapOutput values.
// You can construct a concrete instance of `ManagedDiskMapInput` via:
//
//	ManagedDiskMap{ "key": ManagedDiskArgs{...} }
type ManagedDiskMapInput interface {
	pulumi.Input

	ToManagedDiskMapOutput() ManagedDiskMapOutput
	ToManagedDiskMapOutputWithContext(context.Context) ManagedDiskMapOutput
}

type ManagedDiskMap map[string]ManagedDiskInput

func (ManagedDiskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedDisk)(nil)).Elem()
}

func (i ManagedDiskMap) ToManagedDiskMapOutput() ManagedDiskMapOutput {
	return i.ToManagedDiskMapOutputWithContext(context.Background())
}

func (i ManagedDiskMap) ToManagedDiskMapOutputWithContext(ctx context.Context) ManagedDiskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedDiskMapOutput)
}

type ManagedDiskOutput struct{ *pulumi.OutputState }

func (ManagedDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedDisk)(nil)).Elem()
}

func (o ManagedDiskOutput) ToManagedDiskOutput() ManagedDiskOutput {
	return o
}

func (o ManagedDiskOutput) ToManagedDiskOutputWithContext(ctx context.Context) ManagedDiskOutput {
	return o
}

// The method to use when creating the managed disk. Changing this forces a new resource to be created. Possible values include:
func (o ManagedDiskOutput) CreateOption() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDisk) pulumi.StringOutput { return v.CreateOption }).(pulumi.StringOutput)
}

// The ID of the disk access resource for using private endpoints on disks.
//
// > **Note:** `diskAccessId` is only supported when `networkAccessPolicy` is set to `AllowPrivate`.
func (o ManagedDiskOutput) DiskAccessId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedDisk) pulumi.StringPtrOutput { return v.DiskAccessId }).(pulumi.StringPtrOutput)
}

// The ID of a Disk Encryption Set which should be used to encrypt this Managed Disk. Conflicts with `secureVmDiskEncryptionSetId`.
//
// > **NOTE:** The Disk Encryption Set must have the `Reader` Role Assignment scoped on the Key Vault - in addition to an Access Policy to the Key Vault
//
// > **NOTE:** Disk Encryption Sets are in Public Preview in a limited set of regions
func (o ManagedDiskOutput) DiskEncryptionSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedDisk) pulumi.StringPtrOutput { return v.DiskEncryptionSetId }).(pulumi.StringPtrOutput)
}

// The number of IOPS allowed across all VMs mounting the shared disk as read-only; only settable for UltraSSD disks and PremiumV2 disks with shared disk enabled. One operation can transfer between 4k and 256k bytes.
func (o ManagedDiskOutput) DiskIopsReadOnly() pulumi.IntOutput {
	return o.ApplyT(func(v *ManagedDisk) pulumi.IntOutput { return v.DiskIopsReadOnly }).(pulumi.IntOutput)
}

// The number of IOPS allowed for this disk; only settable for UltraSSD disks and PremiumV2 disks. One operation can transfer between 4k and 256k bytes.
func (o ManagedDiskOutput) DiskIopsReadWrite() pulumi.IntOutput {
	return o.ApplyT(func(v *ManagedDisk) pulumi.IntOutput { return v.DiskIopsReadWrite }).(pulumi.IntOutput)
}

// The bandwidth allowed across all VMs mounting the shared disk as read-only; only settable for UltraSSD disks and PremiumV2 disks with shared disk enabled. MBps means millions of bytes per second.
func (o ManagedDiskOutput) DiskMbpsReadOnly() pulumi.IntOutput {
	return o.ApplyT(func(v *ManagedDisk) pulumi.IntOutput { return v.DiskMbpsReadOnly }).(pulumi.IntOutput)
}

// The bandwidth allowed for this disk; only settable for UltraSSD disks and PremiumV2 disks. MBps means millions of bytes per second.
func (o ManagedDiskOutput) DiskMbpsReadWrite() pulumi.IntOutput {
	return o.ApplyT(func(v *ManagedDisk) pulumi.IntOutput { return v.DiskMbpsReadWrite }).(pulumi.IntOutput)
}

func (o ManagedDiskOutput) DiskSizeGb() pulumi.IntOutput {
	return o.ApplyT(func(v *ManagedDisk) pulumi.IntOutput { return v.DiskSizeGb }).(pulumi.IntOutput)
}

// Specifies the Edge Zone within the Azure Region where this Managed Disk should exist. Changing this forces a new Managed Disk to be created.
func (o ManagedDiskOutput) EdgeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedDisk) pulumi.StringPtrOutput { return v.EdgeZone }).(pulumi.StringPtrOutput)
}

// A `encryptionSettings` block as defined below.
//
// > **NOTE:** Removing `encryptionSettings` forces a new resource to be created.
func (o ManagedDiskOutput) EncryptionSettings() ManagedDiskEncryptionSettingsPtrOutput {
	return o.ApplyT(func(v *ManagedDisk) ManagedDiskEncryptionSettingsPtrOutput { return v.EncryptionSettings }).(ManagedDiskEncryptionSettingsPtrOutput)
}

// ID of a Gallery Image Version to copy when `createOption` is `FromImage`. This field cannot be specified if imageReferenceId is specified. Changing this forces a new resource to be created.
func (o ManagedDiskOutput) GalleryImageReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedDisk) pulumi.StringPtrOutput { return v.GalleryImageReferenceId }).(pulumi.StringPtrOutput)
}

// The HyperV Generation of the Disk when the source of an `Import` or `Copy` operation targets a source that contains an operating system. Possible values are `V1` and `V2`. For `ImportSecure` it must be set to `V2`. Changing this forces a new resource to be created.
func (o ManagedDiskOutput) HyperVGeneration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedDisk) pulumi.StringPtrOutput { return v.HyperVGeneration }).(pulumi.StringPtrOutput)
}

// ID of an existing platform/marketplace disk image to copy when `createOption` is `FromImage`. This field cannot be specified if galleryImageReferenceId is specified. Changing this forces a new resource to be created.
func (o ManagedDiskOutput) ImageReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedDisk) pulumi.StringPtrOutput { return v.ImageReferenceId }).(pulumi.StringPtrOutput)
}

// Specified the supported Azure location where the resource exists. Changing this forces a new resource to be created.
func (o ManagedDiskOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDisk) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Logical Sector Size. Possible values are: `512` and `4096`. Defaults to `4096`. Changing this forces a new resource to be created.
//
// > **NOTE:** Setting logical sector size is supported only with `UltraSSD_LRS` disks and `PremiumV2_LRS` disks.
func (o ManagedDiskOutput) LogicalSectorSize() pulumi.IntOutput {
	return o.ApplyT(func(v *ManagedDisk) pulumi.IntOutput { return v.LogicalSectorSize }).(pulumi.IntOutput)
}

// The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time.
//
// > **Note:** Premium SSD maxShares limit: `P15` and `P20` disks: 2. `P30`,`P40`,`P50` disks: 5. `P60`,`P70`,`P80` disks: 10. For ultra disks the `maxShares` minimum value is 1 and the maximum is 5.
func (o ManagedDiskOutput) MaxShares() pulumi.IntOutput {
	return o.ApplyT(func(v *ManagedDisk) pulumi.IntOutput { return v.MaxShares }).(pulumi.IntOutput)
}

// Specifies the name of the Managed Disk. Changing this forces a new resource to be created.
func (o ManagedDiskOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDisk) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Policy for accessing the disk via network. Allowed values are `AllowAll`, `AllowPrivate`, and `DenyAll`.
func (o ManagedDiskOutput) NetworkAccessPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedDisk) pulumi.StringPtrOutput { return v.NetworkAccessPolicy }).(pulumi.StringPtrOutput)
}

// Specifies if On-Demand Bursting is enabled for the Managed Disk.
//
// > **Note:** Credit-Based Bursting is enabled by default on all eligible disks. More information on [Credit-Based and On-Demand Bursting can be found in the documentation](https://docs.microsoft.com/azure/virtual-machines/disk-bursting#disk-level-bursting).
func (o ManagedDiskOutput) OnDemandBurstingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedDisk) pulumi.BoolPtrOutput { return v.OnDemandBurstingEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies whether this Managed Disk should be optimized for frequent disk attachments (where a disk is attached/detached more than 5 times in a day). Defaults to `false`.
//
// > **Note:** Setting `optimizedFrequentAttachEnabled` to `true` causes the disks to not align with the fault domain of the Virtual Machine, which can have operational implications.
func (o ManagedDiskOutput) OptimizedFrequentAttachEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedDisk) pulumi.BoolPtrOutput { return v.OptimizedFrequentAttachEnabled }).(pulumi.BoolPtrOutput)
}

// Specify a value when the source of an `Import`, `ImportSecure` or `Copy` operation targets a source that contains an operating system. Valid values are `Linux` or `Windows`.
func (o ManagedDiskOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedDisk) pulumi.StringPtrOutput { return v.OsType }).(pulumi.StringPtrOutput)
}

// Specifies whether Performance Plus is enabled for this Managed Disk. Defaults to `false`. Changing this forces a new resource to be created.
//
// > **Note:** `performancePlusEnabled` can only be set to `true` when using a Managed Disk with an Ultra SSD.
func (o ManagedDiskOutput) PerformancePlusEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedDisk) pulumi.BoolPtrOutput { return v.PerformancePlusEnabled }).(pulumi.BoolPtrOutput)
}

// Whether it is allowed to access the disk via public network. Defaults to `true`.
//
// For more information on managed disks, such as sizing options and pricing, please check out the [Azure Documentation](https://docs.microsoft.com/azure/storage/storage-managed-disks-overview).
func (o ManagedDiskOutput) PublicNetworkAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedDisk) pulumi.BoolPtrOutput { return v.PublicNetworkAccessEnabled }).(pulumi.BoolPtrOutput)
}

// The name of the Resource Group where the Managed Disk should exist. Changing this forces a new resource to be created.
func (o ManagedDiskOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDisk) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The ID of the Disk Encryption Set which should be used to Encrypt this OS Disk when the Virtual Machine is a Confidential VM. Conflicts with `diskEncryptionSetId`. Changing this forces a new resource to be created.
//
// > **NOTE:** `secureVmDiskEncryptionSetId` can only be specified when `securityType` is set to `ConfidentialVM_DiskEncryptedWithCustomerKey`.
func (o ManagedDiskOutput) SecureVmDiskEncryptionSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedDisk) pulumi.StringPtrOutput { return v.SecureVmDiskEncryptionSetId }).(pulumi.StringPtrOutput)
}

// Security Type of the Managed Disk when it is used for a Confidential VM. Possible values are `ConfidentialVM_VMGuestStateOnlyEncryptedWithPlatformKey`, `ConfidentialVM_DiskEncryptedWithPlatformKey` and `ConfidentialVM_DiskEncryptedWithCustomerKey`. Changing this forces a new resource to be created.
//
// > **NOTE:** When `securityType` is set to `ConfidentialVM_DiskEncryptedWithCustomerKey` the value of `createOption` must be one of `FromImage` or `ImportSecure`.
//
// > **NOTE:** `securityType` cannot be specified when `trustedLaunchEnabled` is set to true.
//
// > **NOTE:** `secureVmDiskEncryptionSetId` must be specified when `securityType` is set to `ConfidentialVM_DiskEncryptedWithCustomerKey`.
func (o ManagedDiskOutput) SecurityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedDisk) pulumi.StringPtrOutput { return v.SecurityType }).(pulumi.StringPtrOutput)
}

// The ID of an existing Managed Disk or Snapshot to copy when `createOption` is `Copy` or the recovery point to restore when `createOption` is `Restore`. Changing this forces a new resource to be created.
func (o ManagedDiskOutput) SourceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedDisk) pulumi.StringPtrOutput { return v.SourceResourceId }).(pulumi.StringPtrOutput)
}

// URI to a valid VHD file to be used when `createOption` is `Import` or `ImportSecure`. Changing this forces a new resource to be created.
func (o ManagedDiskOutput) SourceUri() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDisk) pulumi.StringOutput { return v.SourceUri }).(pulumi.StringOutput)
}

// The ID of the Storage Account where the `sourceUri` is located. Required when `createOption` is set to `Import` or `ImportSecure`. Changing this forces a new resource to be created.
func (o ManagedDiskOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedDisk) pulumi.StringPtrOutput { return v.StorageAccountId }).(pulumi.StringPtrOutput)
}

// The type of storage to use for the managed disk. Possible values are `Standard_LRS`, `StandardSSD_ZRS`, `Premium_LRS`, `PremiumV2_LRS`, `Premium_ZRS`, `StandardSSD_LRS` or `UltraSSD_LRS`.
//
// > **Note:** Azure Ultra Disk Storage is only available in a region that support availability zones and can only enabled on the following VM series: `ESv3`, `DSv3`, `FSv3`, `LSv2`, `M` and `Mv2`. For more information see the `Azure Ultra Disk Storage` [product documentation](https://docs.microsoft.com/azure/virtual-machines/windows/disks-enable-ultra-ssd).
func (o ManagedDiskOutput) StorageAccountType() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDisk) pulumi.StringOutput { return v.StorageAccountType }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o ManagedDiskOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ManagedDisk) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ManagedDiskOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDisk) pulumi.StringOutput { return v.Tier }).(pulumi.StringOutput)
}

// Specifies if Trusted Launch is enabled for the Managed Disk. Changing this forces a new resource to be created.
//
// > **Note:** Trusted Launch can only be enabled when `createOption` is `FromImage` or `Import`.
func (o ManagedDiskOutput) TrustedLaunchEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedDisk) pulumi.BoolPtrOutput { return v.TrustedLaunchEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the size of the managed disk to create in bytes. Required when `createOption` is `Upload`. The value must be equal to the source disk to be copied in bytes. Source disk size could be calculated with `ls -l` or `wc -c`. More information can be found at [Copy a managed disk](https://learn.microsoft.com/en-us/azure/virtual-machines/linux/disks-upload-vhd-to-managed-disk-cli#copy-a-managed-disk). Changing this forces a new resource to be created.
func (o ManagedDiskOutput) UploadSizeBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManagedDisk) pulumi.IntPtrOutput { return v.UploadSizeBytes }).(pulumi.IntPtrOutput)
}

// Specifies the Availability Zone in which this Managed Disk should be located. Changing this property forces a new resource to be created.
//
// > **Note:** Availability Zones are [only supported in select regions at this time](https://docs.microsoft.com/azure/availability-zones/az-overview).
func (o ManagedDiskOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedDisk) pulumi.StringPtrOutput { return v.Zone }).(pulumi.StringPtrOutput)
}

type ManagedDiskArrayOutput struct{ *pulumi.OutputState }

func (ManagedDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedDisk)(nil)).Elem()
}

func (o ManagedDiskArrayOutput) ToManagedDiskArrayOutput() ManagedDiskArrayOutput {
	return o
}

func (o ManagedDiskArrayOutput) ToManagedDiskArrayOutputWithContext(ctx context.Context) ManagedDiskArrayOutput {
	return o
}

func (o ManagedDiskArrayOutput) Index(i pulumi.IntInput) ManagedDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManagedDisk {
		return vs[0].([]*ManagedDisk)[vs[1].(int)]
	}).(ManagedDiskOutput)
}

type ManagedDiskMapOutput struct{ *pulumi.OutputState }

func (ManagedDiskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedDisk)(nil)).Elem()
}

func (o ManagedDiskMapOutput) ToManagedDiskMapOutput() ManagedDiskMapOutput {
	return o
}

func (o ManagedDiskMapOutput) ToManagedDiskMapOutputWithContext(ctx context.Context) ManagedDiskMapOutput {
	return o
}

func (o ManagedDiskMapOutput) MapIndex(k pulumi.StringInput) ManagedDiskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManagedDisk {
		return vs[0].(map[string]*ManagedDisk)[vs[1].(string)]
	}).(ManagedDiskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedDiskInput)(nil)).Elem(), &ManagedDisk{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedDiskArrayInput)(nil)).Elem(), ManagedDiskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedDiskMapInput)(nil)).Elem(), ManagedDiskMap{})
	pulumi.RegisterOutputType(ManagedDiskOutput{})
	pulumi.RegisterOutputType(ManagedDiskArrayOutput{})
	pulumi.RegisterOutputType(ManagedDiskMapOutput{})
}
