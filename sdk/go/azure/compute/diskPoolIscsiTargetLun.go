// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an iSCSI Target lun.
//
// ## Import
//
// iSCSI Target Luns can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:compute/diskPoolIscsiTargetLun:DiskPoolIscsiTargetLun example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/example-resource-group/providers/Microsoft.StoragePool/diskPools/diskPoolValue/iscsiTargets/iscsiTargetValue/lun|/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Compute/disks/disk1
//
// ```
type DiskPoolIscsiTargetLun struct {
	pulumi.CustomResourceState

	// The ID of the `compute.DiskPoolManagedDiskAttachment`. Changing this forces a new iSCSI Target LUN to be created.
	DiskPoolManagedDiskAttachmentId pulumi.StringOutput `pulumi:"diskPoolManagedDiskAttachmentId"`
	// The ID of the iSCSI Target. Changing this forces a new iSCSI Target LUN to be created.
	IscsiTargetId pulumi.StringOutput `pulumi:"iscsiTargetId"`
	// The Logical Unit Number of the iSCSI Target LUN.
	Lun pulumi.IntOutput `pulumi:"lun"`
	// User defined name for iSCSI LUN. Supported characters include uppercase letters, lowercase letters, numbers, periods, underscores or hyphens. Name should end with an alphanumeric character. The length must be between `1` and `90`. Changing this forces a new iSCSI Target LUN to be created.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewDiskPoolIscsiTargetLun registers a new resource with the given unique name, arguments, and options.
func NewDiskPoolIscsiTargetLun(ctx *pulumi.Context,
	name string, args *DiskPoolIscsiTargetLunArgs, opts ...pulumi.ResourceOption) (*DiskPoolIscsiTargetLun, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DiskPoolManagedDiskAttachmentId == nil {
		return nil, errors.New("invalid value for required argument 'DiskPoolManagedDiskAttachmentId'")
	}
	if args.IscsiTargetId == nil {
		return nil, errors.New("invalid value for required argument 'IscsiTargetId'")
	}
	var resource DiskPoolIscsiTargetLun
	err := ctx.RegisterResource("azure:compute/diskPoolIscsiTargetLun:DiskPoolIscsiTargetLun", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDiskPoolIscsiTargetLun gets an existing DiskPoolIscsiTargetLun resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDiskPoolIscsiTargetLun(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DiskPoolIscsiTargetLunState, opts ...pulumi.ResourceOption) (*DiskPoolIscsiTargetLun, error) {
	var resource DiskPoolIscsiTargetLun
	err := ctx.ReadResource("azure:compute/diskPoolIscsiTargetLun:DiskPoolIscsiTargetLun", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DiskPoolIscsiTargetLun resources.
type diskPoolIscsiTargetLunState struct {
	// The ID of the `compute.DiskPoolManagedDiskAttachment`. Changing this forces a new iSCSI Target LUN to be created.
	DiskPoolManagedDiskAttachmentId *string `pulumi:"diskPoolManagedDiskAttachmentId"`
	// The ID of the iSCSI Target. Changing this forces a new iSCSI Target LUN to be created.
	IscsiTargetId *string `pulumi:"iscsiTargetId"`
	// The Logical Unit Number of the iSCSI Target LUN.
	Lun *int `pulumi:"lun"`
	// User defined name for iSCSI LUN. Supported characters include uppercase letters, lowercase letters, numbers, periods, underscores or hyphens. Name should end with an alphanumeric character. The length must be between `1` and `90`. Changing this forces a new iSCSI Target LUN to be created.
	Name *string `pulumi:"name"`
}

type DiskPoolIscsiTargetLunState struct {
	// The ID of the `compute.DiskPoolManagedDiskAttachment`. Changing this forces a new iSCSI Target LUN to be created.
	DiskPoolManagedDiskAttachmentId pulumi.StringPtrInput
	// The ID of the iSCSI Target. Changing this forces a new iSCSI Target LUN to be created.
	IscsiTargetId pulumi.StringPtrInput
	// The Logical Unit Number of the iSCSI Target LUN.
	Lun pulumi.IntPtrInput
	// User defined name for iSCSI LUN. Supported characters include uppercase letters, lowercase letters, numbers, periods, underscores or hyphens. Name should end with an alphanumeric character. The length must be between `1` and `90`. Changing this forces a new iSCSI Target LUN to be created.
	Name pulumi.StringPtrInput
}

func (DiskPoolIscsiTargetLunState) ElementType() reflect.Type {
	return reflect.TypeOf((*diskPoolIscsiTargetLunState)(nil)).Elem()
}

type diskPoolIscsiTargetLunArgs struct {
	// The ID of the `compute.DiskPoolManagedDiskAttachment`. Changing this forces a new iSCSI Target LUN to be created.
	DiskPoolManagedDiskAttachmentId string `pulumi:"diskPoolManagedDiskAttachmentId"`
	// The ID of the iSCSI Target. Changing this forces a new iSCSI Target LUN to be created.
	IscsiTargetId string `pulumi:"iscsiTargetId"`
	// User defined name for iSCSI LUN. Supported characters include uppercase letters, lowercase letters, numbers, periods, underscores or hyphens. Name should end with an alphanumeric character. The length must be between `1` and `90`. Changing this forces a new iSCSI Target LUN to be created.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a DiskPoolIscsiTargetLun resource.
type DiskPoolIscsiTargetLunArgs struct {
	// The ID of the `compute.DiskPoolManagedDiskAttachment`. Changing this forces a new iSCSI Target LUN to be created.
	DiskPoolManagedDiskAttachmentId pulumi.StringInput
	// The ID of the iSCSI Target. Changing this forces a new iSCSI Target LUN to be created.
	IscsiTargetId pulumi.StringInput
	// User defined name for iSCSI LUN. Supported characters include uppercase letters, lowercase letters, numbers, periods, underscores or hyphens. Name should end with an alphanumeric character. The length must be between `1` and `90`. Changing this forces a new iSCSI Target LUN to be created.
	Name pulumi.StringPtrInput
}

func (DiskPoolIscsiTargetLunArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*diskPoolIscsiTargetLunArgs)(nil)).Elem()
}

type DiskPoolIscsiTargetLunInput interface {
	pulumi.Input

	ToDiskPoolIscsiTargetLunOutput() DiskPoolIscsiTargetLunOutput
	ToDiskPoolIscsiTargetLunOutputWithContext(ctx context.Context) DiskPoolIscsiTargetLunOutput
}

func (*DiskPoolIscsiTargetLun) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskPoolIscsiTargetLun)(nil)).Elem()
}

func (i *DiskPoolIscsiTargetLun) ToDiskPoolIscsiTargetLunOutput() DiskPoolIscsiTargetLunOutput {
	return i.ToDiskPoolIscsiTargetLunOutputWithContext(context.Background())
}

func (i *DiskPoolIscsiTargetLun) ToDiskPoolIscsiTargetLunOutputWithContext(ctx context.Context) DiskPoolIscsiTargetLunOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskPoolIscsiTargetLunOutput)
}

// DiskPoolIscsiTargetLunArrayInput is an input type that accepts DiskPoolIscsiTargetLunArray and DiskPoolIscsiTargetLunArrayOutput values.
// You can construct a concrete instance of `DiskPoolIscsiTargetLunArrayInput` via:
//
//	DiskPoolIscsiTargetLunArray{ DiskPoolIscsiTargetLunArgs{...} }
type DiskPoolIscsiTargetLunArrayInput interface {
	pulumi.Input

	ToDiskPoolIscsiTargetLunArrayOutput() DiskPoolIscsiTargetLunArrayOutput
	ToDiskPoolIscsiTargetLunArrayOutputWithContext(context.Context) DiskPoolIscsiTargetLunArrayOutput
}

type DiskPoolIscsiTargetLunArray []DiskPoolIscsiTargetLunInput

func (DiskPoolIscsiTargetLunArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DiskPoolIscsiTargetLun)(nil)).Elem()
}

func (i DiskPoolIscsiTargetLunArray) ToDiskPoolIscsiTargetLunArrayOutput() DiskPoolIscsiTargetLunArrayOutput {
	return i.ToDiskPoolIscsiTargetLunArrayOutputWithContext(context.Background())
}

func (i DiskPoolIscsiTargetLunArray) ToDiskPoolIscsiTargetLunArrayOutputWithContext(ctx context.Context) DiskPoolIscsiTargetLunArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskPoolIscsiTargetLunArrayOutput)
}

// DiskPoolIscsiTargetLunMapInput is an input type that accepts DiskPoolIscsiTargetLunMap and DiskPoolIscsiTargetLunMapOutput values.
// You can construct a concrete instance of `DiskPoolIscsiTargetLunMapInput` via:
//
//	DiskPoolIscsiTargetLunMap{ "key": DiskPoolIscsiTargetLunArgs{...} }
type DiskPoolIscsiTargetLunMapInput interface {
	pulumi.Input

	ToDiskPoolIscsiTargetLunMapOutput() DiskPoolIscsiTargetLunMapOutput
	ToDiskPoolIscsiTargetLunMapOutputWithContext(context.Context) DiskPoolIscsiTargetLunMapOutput
}

type DiskPoolIscsiTargetLunMap map[string]DiskPoolIscsiTargetLunInput

func (DiskPoolIscsiTargetLunMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DiskPoolIscsiTargetLun)(nil)).Elem()
}

func (i DiskPoolIscsiTargetLunMap) ToDiskPoolIscsiTargetLunMapOutput() DiskPoolIscsiTargetLunMapOutput {
	return i.ToDiskPoolIscsiTargetLunMapOutputWithContext(context.Background())
}

func (i DiskPoolIscsiTargetLunMap) ToDiskPoolIscsiTargetLunMapOutputWithContext(ctx context.Context) DiskPoolIscsiTargetLunMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskPoolIscsiTargetLunMapOutput)
}

type DiskPoolIscsiTargetLunOutput struct{ *pulumi.OutputState }

func (DiskPoolIscsiTargetLunOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskPoolIscsiTargetLun)(nil)).Elem()
}

func (o DiskPoolIscsiTargetLunOutput) ToDiskPoolIscsiTargetLunOutput() DiskPoolIscsiTargetLunOutput {
	return o
}

func (o DiskPoolIscsiTargetLunOutput) ToDiskPoolIscsiTargetLunOutputWithContext(ctx context.Context) DiskPoolIscsiTargetLunOutput {
	return o
}

// The ID of the `compute.DiskPoolManagedDiskAttachment`. Changing this forces a new iSCSI Target LUN to be created.
func (o DiskPoolIscsiTargetLunOutput) DiskPoolManagedDiskAttachmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *DiskPoolIscsiTargetLun) pulumi.StringOutput { return v.DiskPoolManagedDiskAttachmentId }).(pulumi.StringOutput)
}

// The ID of the iSCSI Target. Changing this forces a new iSCSI Target LUN to be created.
func (o DiskPoolIscsiTargetLunOutput) IscsiTargetId() pulumi.StringOutput {
	return o.ApplyT(func(v *DiskPoolIscsiTargetLun) pulumi.StringOutput { return v.IscsiTargetId }).(pulumi.StringOutput)
}

// The Logical Unit Number of the iSCSI Target LUN.
func (o DiskPoolIscsiTargetLunOutput) Lun() pulumi.IntOutput {
	return o.ApplyT(func(v *DiskPoolIscsiTargetLun) pulumi.IntOutput { return v.Lun }).(pulumi.IntOutput)
}

// User defined name for iSCSI LUN. Supported characters include uppercase letters, lowercase letters, numbers, periods, underscores or hyphens. Name should end with an alphanumeric character. The length must be between `1` and `90`. Changing this forces a new iSCSI Target LUN to be created.
func (o DiskPoolIscsiTargetLunOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DiskPoolIscsiTargetLun) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type DiskPoolIscsiTargetLunArrayOutput struct{ *pulumi.OutputState }

func (DiskPoolIscsiTargetLunArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DiskPoolIscsiTargetLun)(nil)).Elem()
}

func (o DiskPoolIscsiTargetLunArrayOutput) ToDiskPoolIscsiTargetLunArrayOutput() DiskPoolIscsiTargetLunArrayOutput {
	return o
}

func (o DiskPoolIscsiTargetLunArrayOutput) ToDiskPoolIscsiTargetLunArrayOutputWithContext(ctx context.Context) DiskPoolIscsiTargetLunArrayOutput {
	return o
}

func (o DiskPoolIscsiTargetLunArrayOutput) Index(i pulumi.IntInput) DiskPoolIscsiTargetLunOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DiskPoolIscsiTargetLun {
		return vs[0].([]*DiskPoolIscsiTargetLun)[vs[1].(int)]
	}).(DiskPoolIscsiTargetLunOutput)
}

type DiskPoolIscsiTargetLunMapOutput struct{ *pulumi.OutputState }

func (DiskPoolIscsiTargetLunMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DiskPoolIscsiTargetLun)(nil)).Elem()
}

func (o DiskPoolIscsiTargetLunMapOutput) ToDiskPoolIscsiTargetLunMapOutput() DiskPoolIscsiTargetLunMapOutput {
	return o
}

func (o DiskPoolIscsiTargetLunMapOutput) ToDiskPoolIscsiTargetLunMapOutputWithContext(ctx context.Context) DiskPoolIscsiTargetLunMapOutput {
	return o
}

func (o DiskPoolIscsiTargetLunMapOutput) MapIndex(k pulumi.StringInput) DiskPoolIscsiTargetLunOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DiskPoolIscsiTargetLun {
		return vs[0].(map[string]*DiskPoolIscsiTargetLun)[vs[1].(string)]
	}).(DiskPoolIscsiTargetLunOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DiskPoolIscsiTargetLunInput)(nil)).Elem(), &DiskPoolIscsiTargetLun{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiskPoolIscsiTargetLunArrayInput)(nil)).Elem(), DiskPoolIscsiTargetLunArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiskPoolIscsiTargetLunMapInput)(nil)).Elem(), DiskPoolIscsiTargetLunMap{})
	pulumi.RegisterOutputType(DiskPoolIscsiTargetLunOutput{})
	pulumi.RegisterOutputType(DiskPoolIscsiTargetLunArrayOutput{})
	pulumi.RegisterOutputType(DiskPoolIscsiTargetLunMapOutput{})
}
