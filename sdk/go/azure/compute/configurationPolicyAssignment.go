// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > **NOTE:** This resource has been deprecated in favour of the `policy.VirtualMachineConfigurationAssignment` resource and will be removed in the next major version of the AzureRM Provider. The new resource shares the same fields as this one, information on migrating can be found in this guide.
//
// Applies a Configuration Policy to a Virtual Machine.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/compute"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/network"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West Europe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "exampleVirtualNetwork", &network.VirtualNetworkArgs{
// 			Location:          exampleResourceGroup.Location,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			AddressSpaces: pulumi.StringArray{
// 				pulumi.String("10.0.0.0/16"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleSubnet, err := network.NewSubnet(ctx, "exampleSubnet", &network.SubnetArgs{
// 			ResourceGroupName:  exampleResourceGroup.Name,
// 			VirtualNetworkName: exampleVirtualNetwork.Name,
// 			AddressPrefixes: pulumi.StringArray{
// 				pulumi.String("10.0.2.0/24"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleNetworkInterface, err := network.NewNetworkInterface(ctx, "exampleNetworkInterface", &network.NetworkInterfaceArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			Location:          exampleResourceGroup.Location,
// 			IpConfigurations: network.NetworkInterfaceIpConfigurationArray{
// 				&network.NetworkInterfaceIpConfigurationArgs{
// 					Name:                       pulumi.String("internal"),
// 					SubnetId:                   exampleSubnet.ID(),
// 					PrivateIpAddressAllocation: pulumi.String("Dynamic"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleWindowsVirtualMachine, err := compute.NewWindowsVirtualMachine(ctx, "exampleWindowsVirtualMachine", &compute.WindowsVirtualMachineArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			Location:          exampleResourceGroup.Location,
// 			Size:              pulumi.String("Standard_F2"),
// 			AdminUsername:     pulumi.String("adminuser"),
// 			AdminPassword:     pulumi.String(fmt.Sprintf("%v%v%v%v", "P@", "$", "$", "w0rd1234!")),
// 			NetworkInterfaceIds: pulumi.StringArray{
// 				exampleNetworkInterface.ID(),
// 			},
// 			Identity: &compute.WindowsVirtualMachineIdentityArgs{
// 				Type: pulumi.String("SystemAssigned"),
// 			},
// 			OsDisk: &compute.WindowsVirtualMachineOsDiskArgs{
// 				Caching:            pulumi.String("ReadWrite"),
// 				StorageAccountType: pulumi.String("Standard_LRS"),
// 			},
// 			SourceImageReference: &compute.WindowsVirtualMachineSourceImageReferenceArgs{
// 				Publisher: pulumi.String("MicrosoftWindowsServer"),
// 				Offer:     pulumi.String("WindowsServer"),
// 				Sku:       pulumi.String("2019-Datacenter"),
// 				Version:   pulumi.String("latest"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = compute.NewExtension(ctx, "exampleExtension", &compute.ExtensionArgs{
// 			VirtualMachineId:        exampleWindowsVirtualMachine.ID(),
// 			Publisher:               pulumi.String("Microsoft.GuestConfiguration"),
// 			Type:                    pulumi.String("ConfigurationforWindows"),
// 			TypeHandlerVersion:      pulumi.String("1.0"),
// 			AutoUpgradeMinorVersion: pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = compute.NewConfigurationPolicyAssignment(ctx, "exampleConfigurationPolicyAssignment", &compute.ConfigurationPolicyAssignmentArgs{
// 			Location:         exampleWindowsVirtualMachine.Location,
// 			VirtualMachineId: exampleWindowsVirtualMachine.ID(),
// 			Configuration: &compute.ConfigurationPolicyAssignmentConfigurationArgs{
// 				Name:    pulumi.String("AzureWindowsBaseline"),
// 				Version: pulumi.String("1.*"),
// 				Parameters: compute.ConfigurationPolicyAssignmentConfigurationParameterArray{
// 					&compute.ConfigurationPolicyAssignmentConfigurationParameterArgs{
// 						Name:  pulumi.String("Minimum Password Length;ExpectedValue"),
// 						Value: pulumi.String("16"),
// 					},
// 					&compute.ConfigurationPolicyAssignmentConfigurationParameterArgs{
// 						Name:  pulumi.String("Minimum Password Age;ExpectedValue"),
// 						Value: pulumi.String("0"),
// 					},
// 					&compute.ConfigurationPolicyAssignmentConfigurationParameterArgs{
// 						Name:  pulumi.String("Maximum Password Age;ExpectedValue"),
// 						Value: pulumi.String("30,45"),
// 					},
// 					&compute.ConfigurationPolicyAssignmentConfigurationParameterArgs{
// 						Name:  pulumi.String("Enforce Password History;ExpectedValue"),
// 						Value: pulumi.String("10"),
// 					},
// 					&compute.ConfigurationPolicyAssignmentConfigurationParameterArgs{
// 						Name:  pulumi.String("Password Must Meet Complexity Requirements;ExpectedValue"),
// 						Value: pulumi.String("1"),
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Virtual Machine Configuration Policy Assignments can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:compute/configurationPolicyAssignment:ConfigurationPolicyAssignment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Compute/virtualMachines/vm1/providers/Microsoft.GuestConfiguration/guestConfigurationAssignments/assignment1
// ```
type ConfigurationPolicyAssignment struct {
	pulumi.CustomResourceState

	// A `configuration` block as defined below.
	Configuration ConfigurationPolicyAssignmentConfigurationOutput `pulumi:"configuration"`
	// The Azure location where the Virtual Machine Configuration Policy Assignment should exist. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the Virtual Machine Configuration Policy Assignment. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The resource ID of the Virtual Machine which this Guest Configuration Assignment should apply to. Changing this forces a new resource to be created.
	VirtualMachineId pulumi.StringOutput `pulumi:"virtualMachineId"`
}

// NewConfigurationPolicyAssignment registers a new resource with the given unique name, arguments, and options.
func NewConfigurationPolicyAssignment(ctx *pulumi.Context,
	name string, args *ConfigurationPolicyAssignmentArgs, opts ...pulumi.ResourceOption) (*ConfigurationPolicyAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.VirtualMachineId == nil {
		return nil, errors.New("invalid value for required argument 'VirtualMachineId'")
	}
	var resource ConfigurationPolicyAssignment
	err := ctx.RegisterResource("azure:compute/configurationPolicyAssignment:ConfigurationPolicyAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigurationPolicyAssignment gets an existing ConfigurationPolicyAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigurationPolicyAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigurationPolicyAssignmentState, opts ...pulumi.ResourceOption) (*ConfigurationPolicyAssignment, error) {
	var resource ConfigurationPolicyAssignment
	err := ctx.ReadResource("azure:compute/configurationPolicyAssignment:ConfigurationPolicyAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigurationPolicyAssignment resources.
type configurationPolicyAssignmentState struct {
	// A `configuration` block as defined below.
	Configuration *ConfigurationPolicyAssignmentConfiguration `pulumi:"configuration"`
	// The Azure location where the Virtual Machine Configuration Policy Assignment should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name of the Virtual Machine Configuration Policy Assignment. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The resource ID of the Virtual Machine which this Guest Configuration Assignment should apply to. Changing this forces a new resource to be created.
	VirtualMachineId *string `pulumi:"virtualMachineId"`
}

type ConfigurationPolicyAssignmentState struct {
	// A `configuration` block as defined below.
	Configuration ConfigurationPolicyAssignmentConfigurationPtrInput
	// The Azure location where the Virtual Machine Configuration Policy Assignment should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name of the Virtual Machine Configuration Policy Assignment. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The resource ID of the Virtual Machine which this Guest Configuration Assignment should apply to. Changing this forces a new resource to be created.
	VirtualMachineId pulumi.StringPtrInput
}

func (ConfigurationPolicyAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationPolicyAssignmentState)(nil)).Elem()
}

type configurationPolicyAssignmentArgs struct {
	// A `configuration` block as defined below.
	Configuration ConfigurationPolicyAssignmentConfiguration `pulumi:"configuration"`
	// The Azure location where the Virtual Machine Configuration Policy Assignment should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name of the Virtual Machine Configuration Policy Assignment. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The resource ID of the Virtual Machine which this Guest Configuration Assignment should apply to. Changing this forces a new resource to be created.
	VirtualMachineId string `pulumi:"virtualMachineId"`
}

// The set of arguments for constructing a ConfigurationPolicyAssignment resource.
type ConfigurationPolicyAssignmentArgs struct {
	// A `configuration` block as defined below.
	Configuration ConfigurationPolicyAssignmentConfigurationInput
	// The Azure location where the Virtual Machine Configuration Policy Assignment should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name of the Virtual Machine Configuration Policy Assignment. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The resource ID of the Virtual Machine which this Guest Configuration Assignment should apply to. Changing this forces a new resource to be created.
	VirtualMachineId pulumi.StringInput
}

func (ConfigurationPolicyAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationPolicyAssignmentArgs)(nil)).Elem()
}

type ConfigurationPolicyAssignmentInput interface {
	pulumi.Input

	ToConfigurationPolicyAssignmentOutput() ConfigurationPolicyAssignmentOutput
	ToConfigurationPolicyAssignmentOutputWithContext(ctx context.Context) ConfigurationPolicyAssignmentOutput
}

func (*ConfigurationPolicyAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationPolicyAssignment)(nil)).Elem()
}

func (i *ConfigurationPolicyAssignment) ToConfigurationPolicyAssignmentOutput() ConfigurationPolicyAssignmentOutput {
	return i.ToConfigurationPolicyAssignmentOutputWithContext(context.Background())
}

func (i *ConfigurationPolicyAssignment) ToConfigurationPolicyAssignmentOutputWithContext(ctx context.Context) ConfigurationPolicyAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationPolicyAssignmentOutput)
}

// ConfigurationPolicyAssignmentArrayInput is an input type that accepts ConfigurationPolicyAssignmentArray and ConfigurationPolicyAssignmentArrayOutput values.
// You can construct a concrete instance of `ConfigurationPolicyAssignmentArrayInput` via:
//
//          ConfigurationPolicyAssignmentArray{ ConfigurationPolicyAssignmentArgs{...} }
type ConfigurationPolicyAssignmentArrayInput interface {
	pulumi.Input

	ToConfigurationPolicyAssignmentArrayOutput() ConfigurationPolicyAssignmentArrayOutput
	ToConfigurationPolicyAssignmentArrayOutputWithContext(context.Context) ConfigurationPolicyAssignmentArrayOutput
}

type ConfigurationPolicyAssignmentArray []ConfigurationPolicyAssignmentInput

func (ConfigurationPolicyAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigurationPolicyAssignment)(nil)).Elem()
}

func (i ConfigurationPolicyAssignmentArray) ToConfigurationPolicyAssignmentArrayOutput() ConfigurationPolicyAssignmentArrayOutput {
	return i.ToConfigurationPolicyAssignmentArrayOutputWithContext(context.Background())
}

func (i ConfigurationPolicyAssignmentArray) ToConfigurationPolicyAssignmentArrayOutputWithContext(ctx context.Context) ConfigurationPolicyAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationPolicyAssignmentArrayOutput)
}

// ConfigurationPolicyAssignmentMapInput is an input type that accepts ConfigurationPolicyAssignmentMap and ConfigurationPolicyAssignmentMapOutput values.
// You can construct a concrete instance of `ConfigurationPolicyAssignmentMapInput` via:
//
//          ConfigurationPolicyAssignmentMap{ "key": ConfigurationPolicyAssignmentArgs{...} }
type ConfigurationPolicyAssignmentMapInput interface {
	pulumi.Input

	ToConfigurationPolicyAssignmentMapOutput() ConfigurationPolicyAssignmentMapOutput
	ToConfigurationPolicyAssignmentMapOutputWithContext(context.Context) ConfigurationPolicyAssignmentMapOutput
}

type ConfigurationPolicyAssignmentMap map[string]ConfigurationPolicyAssignmentInput

func (ConfigurationPolicyAssignmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigurationPolicyAssignment)(nil)).Elem()
}

func (i ConfigurationPolicyAssignmentMap) ToConfigurationPolicyAssignmentMapOutput() ConfigurationPolicyAssignmentMapOutput {
	return i.ToConfigurationPolicyAssignmentMapOutputWithContext(context.Background())
}

func (i ConfigurationPolicyAssignmentMap) ToConfigurationPolicyAssignmentMapOutputWithContext(ctx context.Context) ConfigurationPolicyAssignmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationPolicyAssignmentMapOutput)
}

type ConfigurationPolicyAssignmentOutput struct{ *pulumi.OutputState }

func (ConfigurationPolicyAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationPolicyAssignment)(nil)).Elem()
}

func (o ConfigurationPolicyAssignmentOutput) ToConfigurationPolicyAssignmentOutput() ConfigurationPolicyAssignmentOutput {
	return o
}

func (o ConfigurationPolicyAssignmentOutput) ToConfigurationPolicyAssignmentOutputWithContext(ctx context.Context) ConfigurationPolicyAssignmentOutput {
	return o
}

type ConfigurationPolicyAssignmentArrayOutput struct{ *pulumi.OutputState }

func (ConfigurationPolicyAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigurationPolicyAssignment)(nil)).Elem()
}

func (o ConfigurationPolicyAssignmentArrayOutput) ToConfigurationPolicyAssignmentArrayOutput() ConfigurationPolicyAssignmentArrayOutput {
	return o
}

func (o ConfigurationPolicyAssignmentArrayOutput) ToConfigurationPolicyAssignmentArrayOutputWithContext(ctx context.Context) ConfigurationPolicyAssignmentArrayOutput {
	return o
}

func (o ConfigurationPolicyAssignmentArrayOutput) Index(i pulumi.IntInput) ConfigurationPolicyAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConfigurationPolicyAssignment {
		return vs[0].([]*ConfigurationPolicyAssignment)[vs[1].(int)]
	}).(ConfigurationPolicyAssignmentOutput)
}

type ConfigurationPolicyAssignmentMapOutput struct{ *pulumi.OutputState }

func (ConfigurationPolicyAssignmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigurationPolicyAssignment)(nil)).Elem()
}

func (o ConfigurationPolicyAssignmentMapOutput) ToConfigurationPolicyAssignmentMapOutput() ConfigurationPolicyAssignmentMapOutput {
	return o
}

func (o ConfigurationPolicyAssignmentMapOutput) ToConfigurationPolicyAssignmentMapOutputWithContext(ctx context.Context) ConfigurationPolicyAssignmentMapOutput {
	return o
}

func (o ConfigurationPolicyAssignmentMapOutput) MapIndex(k pulumi.StringInput) ConfigurationPolicyAssignmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConfigurationPolicyAssignment {
		return vs[0].(map[string]*ConfigurationPolicyAssignment)[vs[1].(string)]
	}).(ConfigurationPolicyAssignmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationPolicyAssignmentInput)(nil)).Elem(), &ConfigurationPolicyAssignment{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationPolicyAssignmentArrayInput)(nil)).Elem(), ConfigurationPolicyAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationPolicyAssignmentMapInput)(nil)).Elem(), ConfigurationPolicyAssignmentMap{})
	pulumi.RegisterOutputType(ConfigurationPolicyAssignmentOutput{})
	pulumi.RegisterOutputType(ConfigurationPolicyAssignmentArrayOutput{})
	pulumi.RegisterOutputType(ConfigurationPolicyAssignmentMapOutput{})
}
