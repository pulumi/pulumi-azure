// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a Disk Pool Managed Disk Attachment.
//
// !> **Note:** Azure are officially [halting](https://learn.microsoft.com/en-us/azure/azure-vmware/attach-disk-pools-to-azure-vmware-solution-hosts?tabs=azure-cli) the preview of Azure Disk Pools, and it **will not** be made generally available. New customers will not be able to register the Microsoft.StoragePool resource provider on their subscription and deploy new Disk Pools. Existing subscriptions registered with Microsoft.StoragePool may continue to deploy and manage disk pools for the time being.
//
// > **Note:** Must be either a premium SSD, standard SSD, or an ultra disk in the same region and availability zone as the disk pool.
//
// > **Note:** Ultra disks must have a disk sector size of 512 bytes.
//
// > **Note:** Must be a shared disk, with a maxShares value of two or greater.
//
// > **Note:** You must provide the StoragePool resource provider RBAC permissions to the disks that will be added to the disk pool.
//
// ## Import
//
// Disks Pool Managed Disk Attachments can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:compute/diskPoolManagedDiskAttachment:DiskPoolManagedDiskAttachment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.StoragePool/diskPools/storagePool1/managedDisks|/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.Compute/disks/disk1
//
// ```
type DiskPoolManagedDiskAttachment struct {
	pulumi.CustomResourceState

	// The ID of the Disk Pool. Changing this forces a new Disk Pool Managed Disk Attachment to be created.
	DiskPoolId pulumi.StringOutput `pulumi:"diskPoolId"`
	// The ID of the Managed Disk. Changing this forces a new Disks Pool Managed Disk Attachment to be created.
	ManagedDiskId pulumi.StringOutput `pulumi:"managedDiskId"`
}

// NewDiskPoolManagedDiskAttachment registers a new resource with the given unique name, arguments, and options.
func NewDiskPoolManagedDiskAttachment(ctx *pulumi.Context,
	name string, args *DiskPoolManagedDiskAttachmentArgs, opts ...pulumi.ResourceOption) (*DiskPoolManagedDiskAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DiskPoolId == nil {
		return nil, errors.New("invalid value for required argument 'DiskPoolId'")
	}
	if args.ManagedDiskId == nil {
		return nil, errors.New("invalid value for required argument 'ManagedDiskId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DiskPoolManagedDiskAttachment
	err := ctx.RegisterResource("azure:compute/diskPoolManagedDiskAttachment:DiskPoolManagedDiskAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDiskPoolManagedDiskAttachment gets an existing DiskPoolManagedDiskAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDiskPoolManagedDiskAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DiskPoolManagedDiskAttachmentState, opts ...pulumi.ResourceOption) (*DiskPoolManagedDiskAttachment, error) {
	var resource DiskPoolManagedDiskAttachment
	err := ctx.ReadResource("azure:compute/diskPoolManagedDiskAttachment:DiskPoolManagedDiskAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DiskPoolManagedDiskAttachment resources.
type diskPoolManagedDiskAttachmentState struct {
	// The ID of the Disk Pool. Changing this forces a new Disk Pool Managed Disk Attachment to be created.
	DiskPoolId *string `pulumi:"diskPoolId"`
	// The ID of the Managed Disk. Changing this forces a new Disks Pool Managed Disk Attachment to be created.
	ManagedDiskId *string `pulumi:"managedDiskId"`
}

type DiskPoolManagedDiskAttachmentState struct {
	// The ID of the Disk Pool. Changing this forces a new Disk Pool Managed Disk Attachment to be created.
	DiskPoolId pulumi.StringPtrInput
	// The ID of the Managed Disk. Changing this forces a new Disks Pool Managed Disk Attachment to be created.
	ManagedDiskId pulumi.StringPtrInput
}

func (DiskPoolManagedDiskAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*diskPoolManagedDiskAttachmentState)(nil)).Elem()
}

type diskPoolManagedDiskAttachmentArgs struct {
	// The ID of the Disk Pool. Changing this forces a new Disk Pool Managed Disk Attachment to be created.
	DiskPoolId string `pulumi:"diskPoolId"`
	// The ID of the Managed Disk. Changing this forces a new Disks Pool Managed Disk Attachment to be created.
	ManagedDiskId string `pulumi:"managedDiskId"`
}

// The set of arguments for constructing a DiskPoolManagedDiskAttachment resource.
type DiskPoolManagedDiskAttachmentArgs struct {
	// The ID of the Disk Pool. Changing this forces a new Disk Pool Managed Disk Attachment to be created.
	DiskPoolId pulumi.StringInput
	// The ID of the Managed Disk. Changing this forces a new Disks Pool Managed Disk Attachment to be created.
	ManagedDiskId pulumi.StringInput
}

func (DiskPoolManagedDiskAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*diskPoolManagedDiskAttachmentArgs)(nil)).Elem()
}

type DiskPoolManagedDiskAttachmentInput interface {
	pulumi.Input

	ToDiskPoolManagedDiskAttachmentOutput() DiskPoolManagedDiskAttachmentOutput
	ToDiskPoolManagedDiskAttachmentOutputWithContext(ctx context.Context) DiskPoolManagedDiskAttachmentOutput
}

func (*DiskPoolManagedDiskAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskPoolManagedDiskAttachment)(nil)).Elem()
}

func (i *DiskPoolManagedDiskAttachment) ToDiskPoolManagedDiskAttachmentOutput() DiskPoolManagedDiskAttachmentOutput {
	return i.ToDiskPoolManagedDiskAttachmentOutputWithContext(context.Background())
}

func (i *DiskPoolManagedDiskAttachment) ToDiskPoolManagedDiskAttachmentOutputWithContext(ctx context.Context) DiskPoolManagedDiskAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskPoolManagedDiskAttachmentOutput)
}

func (i *DiskPoolManagedDiskAttachment) ToOutput(ctx context.Context) pulumix.Output[*DiskPoolManagedDiskAttachment] {
	return pulumix.Output[*DiskPoolManagedDiskAttachment]{
		OutputState: i.ToDiskPoolManagedDiskAttachmentOutputWithContext(ctx).OutputState,
	}
}

// DiskPoolManagedDiskAttachmentArrayInput is an input type that accepts DiskPoolManagedDiskAttachmentArray and DiskPoolManagedDiskAttachmentArrayOutput values.
// You can construct a concrete instance of `DiskPoolManagedDiskAttachmentArrayInput` via:
//
//	DiskPoolManagedDiskAttachmentArray{ DiskPoolManagedDiskAttachmentArgs{...} }
type DiskPoolManagedDiskAttachmentArrayInput interface {
	pulumi.Input

	ToDiskPoolManagedDiskAttachmentArrayOutput() DiskPoolManagedDiskAttachmentArrayOutput
	ToDiskPoolManagedDiskAttachmentArrayOutputWithContext(context.Context) DiskPoolManagedDiskAttachmentArrayOutput
}

type DiskPoolManagedDiskAttachmentArray []DiskPoolManagedDiskAttachmentInput

func (DiskPoolManagedDiskAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DiskPoolManagedDiskAttachment)(nil)).Elem()
}

func (i DiskPoolManagedDiskAttachmentArray) ToDiskPoolManagedDiskAttachmentArrayOutput() DiskPoolManagedDiskAttachmentArrayOutput {
	return i.ToDiskPoolManagedDiskAttachmentArrayOutputWithContext(context.Background())
}

func (i DiskPoolManagedDiskAttachmentArray) ToDiskPoolManagedDiskAttachmentArrayOutputWithContext(ctx context.Context) DiskPoolManagedDiskAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskPoolManagedDiskAttachmentArrayOutput)
}

func (i DiskPoolManagedDiskAttachmentArray) ToOutput(ctx context.Context) pulumix.Output[[]*DiskPoolManagedDiskAttachment] {
	return pulumix.Output[[]*DiskPoolManagedDiskAttachment]{
		OutputState: i.ToDiskPoolManagedDiskAttachmentArrayOutputWithContext(ctx).OutputState,
	}
}

// DiskPoolManagedDiskAttachmentMapInput is an input type that accepts DiskPoolManagedDiskAttachmentMap and DiskPoolManagedDiskAttachmentMapOutput values.
// You can construct a concrete instance of `DiskPoolManagedDiskAttachmentMapInput` via:
//
//	DiskPoolManagedDiskAttachmentMap{ "key": DiskPoolManagedDiskAttachmentArgs{...} }
type DiskPoolManagedDiskAttachmentMapInput interface {
	pulumi.Input

	ToDiskPoolManagedDiskAttachmentMapOutput() DiskPoolManagedDiskAttachmentMapOutput
	ToDiskPoolManagedDiskAttachmentMapOutputWithContext(context.Context) DiskPoolManagedDiskAttachmentMapOutput
}

type DiskPoolManagedDiskAttachmentMap map[string]DiskPoolManagedDiskAttachmentInput

func (DiskPoolManagedDiskAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DiskPoolManagedDiskAttachment)(nil)).Elem()
}

func (i DiskPoolManagedDiskAttachmentMap) ToDiskPoolManagedDiskAttachmentMapOutput() DiskPoolManagedDiskAttachmentMapOutput {
	return i.ToDiskPoolManagedDiskAttachmentMapOutputWithContext(context.Background())
}

func (i DiskPoolManagedDiskAttachmentMap) ToDiskPoolManagedDiskAttachmentMapOutputWithContext(ctx context.Context) DiskPoolManagedDiskAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskPoolManagedDiskAttachmentMapOutput)
}

func (i DiskPoolManagedDiskAttachmentMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*DiskPoolManagedDiskAttachment] {
	return pulumix.Output[map[string]*DiskPoolManagedDiskAttachment]{
		OutputState: i.ToDiskPoolManagedDiskAttachmentMapOutputWithContext(ctx).OutputState,
	}
}

type DiskPoolManagedDiskAttachmentOutput struct{ *pulumi.OutputState }

func (DiskPoolManagedDiskAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskPoolManagedDiskAttachment)(nil)).Elem()
}

func (o DiskPoolManagedDiskAttachmentOutput) ToDiskPoolManagedDiskAttachmentOutput() DiskPoolManagedDiskAttachmentOutput {
	return o
}

func (o DiskPoolManagedDiskAttachmentOutput) ToDiskPoolManagedDiskAttachmentOutputWithContext(ctx context.Context) DiskPoolManagedDiskAttachmentOutput {
	return o
}

func (o DiskPoolManagedDiskAttachmentOutput) ToOutput(ctx context.Context) pulumix.Output[*DiskPoolManagedDiskAttachment] {
	return pulumix.Output[*DiskPoolManagedDiskAttachment]{
		OutputState: o.OutputState,
	}
}

// The ID of the Disk Pool. Changing this forces a new Disk Pool Managed Disk Attachment to be created.
func (o DiskPoolManagedDiskAttachmentOutput) DiskPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *DiskPoolManagedDiskAttachment) pulumi.StringOutput { return v.DiskPoolId }).(pulumi.StringOutput)
}

// The ID of the Managed Disk. Changing this forces a new Disks Pool Managed Disk Attachment to be created.
func (o DiskPoolManagedDiskAttachmentOutput) ManagedDiskId() pulumi.StringOutput {
	return o.ApplyT(func(v *DiskPoolManagedDiskAttachment) pulumi.StringOutput { return v.ManagedDiskId }).(pulumi.StringOutput)
}

type DiskPoolManagedDiskAttachmentArrayOutput struct{ *pulumi.OutputState }

func (DiskPoolManagedDiskAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DiskPoolManagedDiskAttachment)(nil)).Elem()
}

func (o DiskPoolManagedDiskAttachmentArrayOutput) ToDiskPoolManagedDiskAttachmentArrayOutput() DiskPoolManagedDiskAttachmentArrayOutput {
	return o
}

func (o DiskPoolManagedDiskAttachmentArrayOutput) ToDiskPoolManagedDiskAttachmentArrayOutputWithContext(ctx context.Context) DiskPoolManagedDiskAttachmentArrayOutput {
	return o
}

func (o DiskPoolManagedDiskAttachmentArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*DiskPoolManagedDiskAttachment] {
	return pulumix.Output[[]*DiskPoolManagedDiskAttachment]{
		OutputState: o.OutputState,
	}
}

func (o DiskPoolManagedDiskAttachmentArrayOutput) Index(i pulumi.IntInput) DiskPoolManagedDiskAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DiskPoolManagedDiskAttachment {
		return vs[0].([]*DiskPoolManagedDiskAttachment)[vs[1].(int)]
	}).(DiskPoolManagedDiskAttachmentOutput)
}

type DiskPoolManagedDiskAttachmentMapOutput struct{ *pulumi.OutputState }

func (DiskPoolManagedDiskAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DiskPoolManagedDiskAttachment)(nil)).Elem()
}

func (o DiskPoolManagedDiskAttachmentMapOutput) ToDiskPoolManagedDiskAttachmentMapOutput() DiskPoolManagedDiskAttachmentMapOutput {
	return o
}

func (o DiskPoolManagedDiskAttachmentMapOutput) ToDiskPoolManagedDiskAttachmentMapOutputWithContext(ctx context.Context) DiskPoolManagedDiskAttachmentMapOutput {
	return o
}

func (o DiskPoolManagedDiskAttachmentMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*DiskPoolManagedDiskAttachment] {
	return pulumix.Output[map[string]*DiskPoolManagedDiskAttachment]{
		OutputState: o.OutputState,
	}
}

func (o DiskPoolManagedDiskAttachmentMapOutput) MapIndex(k pulumi.StringInput) DiskPoolManagedDiskAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DiskPoolManagedDiskAttachment {
		return vs[0].(map[string]*DiskPoolManagedDiskAttachment)[vs[1].(string)]
	}).(DiskPoolManagedDiskAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DiskPoolManagedDiskAttachmentInput)(nil)).Elem(), &DiskPoolManagedDiskAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiskPoolManagedDiskAttachmentArrayInput)(nil)).Elem(), DiskPoolManagedDiskAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiskPoolManagedDiskAttachmentMapInput)(nil)).Elem(), DiskPoolManagedDiskAttachmentMap{})
	pulumi.RegisterOutputType(DiskPoolManagedDiskAttachmentOutput{})
	pulumi.RegisterOutputType(DiskPoolManagedDiskAttachmentArrayOutput{})
	pulumi.RegisterOutputType(DiskPoolManagedDiskAttachmentMapOutput{})
}
