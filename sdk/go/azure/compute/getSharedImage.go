// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Shared Image within a Shared Image Gallery.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/compute"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := compute.LookupSharedImage(ctx, &compute.LookupSharedImageArgs{
// 			GalleryName:       "my-image-gallery",
// 			Name:              "my-image",
// 			ResourceGroupName: "example-resources",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupSharedImage(ctx *pulumi.Context, args *LookupSharedImageArgs, opts ...pulumi.InvokeOption) (*LookupSharedImageResult, error) {
	var rv LookupSharedImageResult
	err := ctx.Invoke("azure:compute/getSharedImage:getSharedImage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSharedImage.
type LookupSharedImageArgs struct {
	// The name of the Shared Image Gallery in which the Shared Image exists.
	GalleryName string `pulumi:"galleryName"`
	// The name of the Shared Image.
	Name string `pulumi:"name"`
	// The name of the Resource Group in which the Shared Image Gallery exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getSharedImage.
type LookupSharedImageResult struct {
	// The description of this Shared Image.
	Description string `pulumi:"description"`
	// The End User Licence Agreement for the Shared Image.
	Eula        string `pulumi:"eula"`
	GalleryName string `pulumi:"galleryName"`
	// The generation of HyperV that the Virtual Machine used to create the Shared Image is based on.
	HyperVGeneration string `pulumi:"hyperVGeneration"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// An `identifier` block as defined below.
	Identifiers []GetSharedImageIdentifier `pulumi:"identifiers"`
	// The supported Azure location where the Shared Image Gallery exists.
	Location string `pulumi:"location"`
	Name     string `pulumi:"name"`
	// The type of Operating System present in this Shared Image.
	OsType string `pulumi:"osType"`
	// The URI containing the Privacy Statement for this Shared Image.
	PrivacyStatementUri string `pulumi:"privacyStatementUri"`
	// The URI containing the Release Notes for this Shared Image.
	ReleaseNoteUri    string `pulumi:"releaseNoteUri"`
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Specifies that the Operating System used inside this Image has not been Generalized (for example, `sysprep` on Windows has not been run).
	Specialized bool `pulumi:"specialized"`
	// A mapping of tags assigned to the Shared Image.
	Tags map[string]string `pulumi:"tags"`
}

func LookupSharedImageOutput(ctx *pulumi.Context, args LookupSharedImageOutputArgs, opts ...pulumi.InvokeOption) LookupSharedImageResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSharedImageResult, error) {
			args := v.(LookupSharedImageArgs)
			r, err := LookupSharedImage(ctx, &args, opts...)
			return *r, err
		}).(LookupSharedImageResultOutput)
}

// A collection of arguments for invoking getSharedImage.
type LookupSharedImageOutputArgs struct {
	// The name of the Shared Image Gallery in which the Shared Image exists.
	GalleryName pulumi.StringInput `pulumi:"galleryName"`
	// The name of the Shared Image.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Resource Group in which the Shared Image Gallery exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupSharedImageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSharedImageArgs)(nil)).Elem()
}

// A collection of values returned by getSharedImage.
type LookupSharedImageResultOutput struct{ *pulumi.OutputState }

func (LookupSharedImageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSharedImageResult)(nil)).Elem()
}

func (o LookupSharedImageResultOutput) ToLookupSharedImageResultOutput() LookupSharedImageResultOutput {
	return o
}

func (o LookupSharedImageResultOutput) ToLookupSharedImageResultOutputWithContext(ctx context.Context) LookupSharedImageResultOutput {
	return o
}

// The description of this Shared Image.
func (o LookupSharedImageResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSharedImageResult) string { return v.Description }).(pulumi.StringOutput)
}

// The End User Licence Agreement for the Shared Image.
func (o LookupSharedImageResultOutput) Eula() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSharedImageResult) string { return v.Eula }).(pulumi.StringOutput)
}

func (o LookupSharedImageResultOutput) GalleryName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSharedImageResult) string { return v.GalleryName }).(pulumi.StringOutput)
}

// The generation of HyperV that the Virtual Machine used to create the Shared Image is based on.
func (o LookupSharedImageResultOutput) HyperVGeneration() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSharedImageResult) string { return v.HyperVGeneration }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSharedImageResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSharedImageResult) string { return v.Id }).(pulumi.StringOutput)
}

// An `identifier` block as defined below.
func (o LookupSharedImageResultOutput) Identifiers() GetSharedImageIdentifierArrayOutput {
	return o.ApplyT(func(v LookupSharedImageResult) []GetSharedImageIdentifier { return v.Identifiers }).(GetSharedImageIdentifierArrayOutput)
}

// The supported Azure location where the Shared Image Gallery exists.
func (o LookupSharedImageResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSharedImageResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o LookupSharedImageResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSharedImageResult) string { return v.Name }).(pulumi.StringOutput)
}

// The type of Operating System present in this Shared Image.
func (o LookupSharedImageResultOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSharedImageResult) string { return v.OsType }).(pulumi.StringOutput)
}

// The URI containing the Privacy Statement for this Shared Image.
func (o LookupSharedImageResultOutput) PrivacyStatementUri() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSharedImageResult) string { return v.PrivacyStatementUri }).(pulumi.StringOutput)
}

// The URI containing the Release Notes for this Shared Image.
func (o LookupSharedImageResultOutput) ReleaseNoteUri() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSharedImageResult) string { return v.ReleaseNoteUri }).(pulumi.StringOutput)
}

func (o LookupSharedImageResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSharedImageResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// Specifies that the Operating System used inside this Image has not been Generalized (for example, `sysprep` on Windows has not been run).
func (o LookupSharedImageResultOutput) Specialized() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSharedImageResult) bool { return v.Specialized }).(pulumi.BoolOutput)
}

// A mapping of tags assigned to the Shared Image.
func (o LookupSharedImageResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSharedImageResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSharedImageResultOutput{})
}
