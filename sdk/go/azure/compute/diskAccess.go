// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a Disk Access.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/compute"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := compute.NewDiskAccess(ctx, "example", &compute.DiskAccessArgs{
// 			Location:          pulumi.String("West Europe"),
// 			ResourceGroupName: pulumi.String("example"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Disk Access resource can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:compute/diskAccess:DiskAccess example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Compute/diskAccesses/diskAccess1
// ```
type DiskAccess struct {
	pulumi.CustomResourceState

	// The Azure Region where the Disk Access should exist. Changing this forces a new Disk to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name which should be used for this Disk Access. Changing this forces a new Disk Access to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Resource Group where the Disk Access should exist. Changing this forces a new Disk Access to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Disk Access.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewDiskAccess registers a new resource with the given unique name, arguments, and options.
func NewDiskAccess(ctx *pulumi.Context,
	name string, args *DiskAccessArgs, opts ...pulumi.ResourceOption) (*DiskAccess, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	var resource DiskAccess
	err := ctx.RegisterResource("azure:compute/diskAccess:DiskAccess", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDiskAccess gets an existing DiskAccess resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDiskAccess(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DiskAccessState, opts ...pulumi.ResourceOption) (*DiskAccess, error) {
	var resource DiskAccess
	err := ctx.ReadResource("azure:compute/diskAccess:DiskAccess", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DiskAccess resources.
type diskAccessState struct {
	// The Azure Region where the Disk Access should exist. Changing this forces a new Disk to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Disk Access. Changing this forces a new Disk Access to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Disk Access should exist. Changing this forces a new Disk Access to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Disk Access.
	Tags map[string]string `pulumi:"tags"`
}

type DiskAccessState struct {
	// The Azure Region where the Disk Access should exist. Changing this forces a new Disk to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Disk Access. Changing this forces a new Disk Access to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Disk Access should exist. Changing this forces a new Disk Access to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Disk Access.
	Tags pulumi.StringMapInput
}

func (DiskAccessState) ElementType() reflect.Type {
	return reflect.TypeOf((*diskAccessState)(nil)).Elem()
}

type diskAccessArgs struct {
	// The Azure Region where the Disk Access should exist. Changing this forces a new Disk to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Disk Access. Changing this forces a new Disk Access to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Disk Access should exist. Changing this forces a new Disk Access to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Disk Access.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a DiskAccess resource.
type DiskAccessArgs struct {
	// The Azure Region where the Disk Access should exist. Changing this forces a new Disk to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Disk Access. Changing this forces a new Disk Access to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Disk Access should exist. Changing this forces a new Disk Access to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags which should be assigned to the Disk Access.
	Tags pulumi.StringMapInput
}

func (DiskAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*diskAccessArgs)(nil)).Elem()
}

type DiskAccessInput interface {
	pulumi.Input

	ToDiskAccessOutput() DiskAccessOutput
	ToDiskAccessOutputWithContext(ctx context.Context) DiskAccessOutput
}

func (DiskAccess) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskAccess)(nil)).Elem()
}

func (i DiskAccess) ToDiskAccessOutput() DiskAccessOutput {
	return i.ToDiskAccessOutputWithContext(context.Background())
}

func (i DiskAccess) ToDiskAccessOutputWithContext(ctx context.Context) DiskAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskAccessOutput)
}

type DiskAccessOutput struct {
	*pulumi.OutputState
}

func (DiskAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskAccessOutput)(nil)).Elem()
}

func (o DiskAccessOutput) ToDiskAccessOutput() DiskAccessOutput {
	return o
}

func (o DiskAccessOutput) ToDiskAccessOutputWithContext(ctx context.Context) DiskAccessOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(DiskAccessOutput{})
}
