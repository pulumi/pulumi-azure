// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an Orchestrated Virtual Machine Scale Set.
//
// ## Disclaimers
//
// > **NOTE:** As of the **v2.86.0** (November 19, 2021) release of the provider this resource will only create Virtual Machine Scale Sets with the **Flexible** Orchestration Mode.
//
// > **NOTE:** All arguments including the administrator login and password will be stored in the raw state as plain-text. [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/compute"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewOrchestratedVirtualMachineScaleSet(ctx, "exampleOrchestratedVirtualMachineScaleSet", &compute.OrchestratedVirtualMachineScaleSetArgs{
//				Location:                 exampleResourceGroup.Location,
//				ResourceGroupName:        exampleResourceGroup.Name,
//				PlatformFaultDomainCount: pulumi.Int(1),
//				Zones: pulumi.StringArray{
//					pulumi.String("1"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// An Orchestrated Virtual Machine Scale Set can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:compute/orchestratedVirtualMachineScaleSet:OrchestratedVirtualMachineScaleSet example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Compute/virtualMachineScaleSets/scaleset1
//
// ```
type OrchestratedVirtualMachineScaleSet struct {
	pulumi.CustomResourceState

	// An `additionalCapabilities` block as defined below.
	AdditionalCapabilities OrchestratedVirtualMachineScaleSetAdditionalCapabilitiesPtrOutput `pulumi:"additionalCapabilities"`
	// An `automaticInstanceRepair` block as defined below.
	//
	// > **NOTE:** To enable the `automaticInstanceRepair`, the Orchestrated Virtual Machine Scale Set must have a valid `healthProbeId` or an [Application Health Extension](https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-health-extension).
	AutomaticInstanceRepair OrchestratedVirtualMachineScaleSetAutomaticInstanceRepairOutput `pulumi:"automaticInstanceRepair"`
	// A `bootDiagnostics` block as defined below.
	BootDiagnostics OrchestratedVirtualMachineScaleSetBootDiagnosticsPtrOutput `pulumi:"bootDiagnostics"`
	// Specifies the ID of the Capacity Reservation Group which the Virtual Machine Scale Set should be allocated to. Changing this forces a new resource to be created.
	//
	// > **NOTE:** `capacityReservationGroupId` cannot be specified with `proximityPlacementGroupId`
	//
	// > **NOTE:** If `capacityReservationGroupId` is specified the `singlePlacementGroup` must be set to `false`.
	CapacityReservationGroupId pulumi.StringPtrOutput `pulumi:"capacityReservationGroupId"`
	// One or more `dataDisk` blocks as defined below.
	DataDisks OrchestratedVirtualMachineScaleSetDataDiskArrayOutput `pulumi:"dataDisks"`
	// Should disks attached to this Virtual Machine Scale Set be encrypted by enabling Encryption at Host?
	EncryptionAtHostEnabled pulumi.BoolPtrOutput `pulumi:"encryptionAtHostEnabled"`
	// The Policy which should be used Virtual Machines are Evicted from the Scale Set. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
	EvictionPolicy pulumi.StringPtrOutput `pulumi:"evictionPolicy"`
	// Should extension operations be allowed on the Virtual Machine Scale Set? Possible values are `true` or `false`. Defaults to `true`. Changing this forces a new Orchestrated Virtual Machine Scale Set to be created.
	//
	// > **NOTE:** `extensionOperationsEnabled` may only be set to `false` if there are no extensions defined in the `extension` field.
	ExtensionOperationsEnabled pulumi.BoolOutput `pulumi:"extensionOperationsEnabled"`
	// One or more `extension` blocks as defined below
	Extensions OrchestratedVirtualMachineScaleSetExtensionArrayOutput `pulumi:"extensions"`
	// Specifies the time alloted for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. Defaults to `PT1H30M`.
	ExtensionsTimeBudget pulumi.StringPtrOutput `pulumi:"extensionsTimeBudget"`
	// An `identity` block as defined below.
	Identity OrchestratedVirtualMachineScaleSetIdentityPtrOutput `pulumi:"identity"`
	// The number of Virtual Machines in the Orcestrated Virtual Machine Scale Set.
	Instances pulumi.IntOutput `pulumi:"instances"`
	// Specifies the type of on-premise license (also known as Azure Hybrid Use Benefit) which should be used for this Orchestrated Virtual Machine Scale Set. Possible values are `None`, `Windows_Client` and `Windows_Server`.
	LicenseType pulumi.StringPtrOutput `pulumi:"licenseType"`
	// The Azure location where the Orchestrated Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The maximum price you're willing to pay for each Orchestrated Virtual Machine in this Scale Set, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machines in the Scale Set will be evicted using the eviction_policy. Defaults to `-1`, which means that each Virtual Machine in the Orchestrated Scale Set should not be evicted for price reasons.
	MaxBidPrice pulumi.Float64PtrOutput `pulumi:"maxBidPrice"`
	// The name of the Orchestrated Virtual Machine Scale Set. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// One or more `networkInterface` blocks as defined below.
	NetworkInterfaces OrchestratedVirtualMachineScaleSetNetworkInterfaceArrayOutput `pulumi:"networkInterfaces"`
	// An `osDisk` block as defined below.
	OsDisk OrchestratedVirtualMachineScaleSetOsDiskPtrOutput `pulumi:"osDisk"`
	// An `osProfile` block as defined below.
	OsProfile OrchestratedVirtualMachineScaleSetOsProfilePtrOutput `pulumi:"osProfile"`
	// A `plan` block as documented below. Changing this forces a new resource to be created.
	Plan OrchestratedVirtualMachineScaleSetPlanPtrOutput `pulumi:"plan"`
	// Specifies the number of fault domains that are used by this Orchestrated Virtual Machine Scale Set. Changing this forces a new resource to be created.
	//
	// > **NOTE:** The number of Fault Domains varies depending on which Azure Region you're using - a list can be found [here](https://github.com/MicrosoftDocs/azure-docs/blob/master/includes/managed-disks-common-fault-domain-region-list.md).
	PlatformFaultDomainCount pulumi.IntOutput `pulumi:"platformFaultDomainCount"`
	// The Priority of this Orchestrated Virtual Machine Scale Set. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this value forces a new resource.
	Priority pulumi.StringPtrOutput `pulumi:"priority"`
	// a `priorityMix` block as defined below
	PriorityMix OrchestratedVirtualMachineScaleSetPriorityMixPtrOutput `pulumi:"priorityMix"`
	// The ID of the Proximity Placement Group which the Orchestrated Virtual Machine should be assigned to. Changing this forces a new resource to be created.
	ProximityPlacementGroupId pulumi.StringPtrOutput `pulumi:"proximityPlacementGroupId"`
	// The name of the Resource Group in which the Orchestrated Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Should this Virtual Machine Scale Set be limited to a Single Placement Group, which means the number of instances will be capped at 100 Virtual Machines. Possible values are `true` or `false`.
	SinglePlacementGroup pulumi.BoolOutput `pulumi:"singlePlacementGroup"`
	// The `name` of the SKU to be used by this Orcestrated Virtual Machine Scale Set. Valid values include: any of the [General purpose](https://docs.microsoft.com/azure/virtual-machines/sizes-general), [Compute optimized](https://docs.microsoft.com/azure/virtual-machines/sizes-compute), [Memory optimized](https://docs.microsoft.com/azure/virtual-machines/sizes-memory), [Storage optimized](https://docs.microsoft.com/azure/virtual-machines/sizes-storage), [GPU optimized](https://docs.microsoft.com/azure/virtual-machines/sizes-gpu), [FPGA optimized](https://docs.microsoft.com/azure/virtual-machines/sizes-field-programmable-gate-arrays), [High performance](https://docs.microsoft.com/azure/virtual-machines/sizes-hpc), or [Previous generation](https://docs.microsoft.com/azure/virtual-machines/sizes-previous-gen) virtual machine SKUs.
	SkuName pulumi.StringPtrOutput `pulumi:"skuName"`
	// The ID of an Image which each Virtual Machine in this Scale Set should be based on. Possible Image ID types include `Image ID`s, `Shared Image ID`s, `Shared Image Version ID`s, `Community Gallery Image ID`s, `Community Gallery Image Version ID`s, `Shared Gallery Image ID`s and `Shared Gallery Image Version ID`s.
	SourceImageId pulumi.StringPtrOutput `pulumi:"sourceImageId"`
	// A `sourceImageReference` block as defined below.
	SourceImageReference OrchestratedVirtualMachineScaleSetSourceImageReferencePtrOutput `pulumi:"sourceImageReference"`
	// A mapping of tags which should be assigned to this Orchestrated Virtual Machine Scale Set.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A `terminationNotification` block as defined below.
	TerminationNotification OrchestratedVirtualMachineScaleSetTerminationNotificationOutput `pulumi:"terminationNotification"`
	// The Unique ID for the Orchestrated Virtual Machine Scale Set.
	UniqueId pulumi.StringOutput `pulumi:"uniqueId"`
	// The Base64-Encoded User Data which should be used for this Virtual Machine Scale Set.
	UserDataBase64 pulumi.StringPtrOutput `pulumi:"userDataBase64"`
	// Should the Virtual Machines in this Scale Set be strictly evenly distributed across Availability Zones? Defaults to `false`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** This can only be set to `true` when one or more `zones` are configured.
	ZoneBalance pulumi.BoolPtrOutput `pulumi:"zoneBalance"`
	// Specifies a list of Availability Zones in which this Orchestrated Virtual Machine should be located. Changing this forces a new Orchestrated Virtual Machine to be created.
	//
	// > **NOTE:** Due to a limitation of the Azure API at this time only one Availability Zone can be defined.
	Zones pulumi.StringArrayOutput `pulumi:"zones"`
}

// NewOrchestratedVirtualMachineScaleSet registers a new resource with the given unique name, arguments, and options.
func NewOrchestratedVirtualMachineScaleSet(ctx *pulumi.Context,
	name string, args *OrchestratedVirtualMachineScaleSetArgs, opts ...pulumi.ResourceOption) (*OrchestratedVirtualMachineScaleSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PlatformFaultDomainCount == nil {
		return nil, errors.New("invalid value for required argument 'PlatformFaultDomainCount'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.UserDataBase64 != nil {
		args.UserDataBase64 = pulumi.ToSecret(args.UserDataBase64).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"userDataBase64",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OrchestratedVirtualMachineScaleSet
	err := ctx.RegisterResource("azure:compute/orchestratedVirtualMachineScaleSet:OrchestratedVirtualMachineScaleSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrchestratedVirtualMachineScaleSet gets an existing OrchestratedVirtualMachineScaleSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrchestratedVirtualMachineScaleSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrchestratedVirtualMachineScaleSetState, opts ...pulumi.ResourceOption) (*OrchestratedVirtualMachineScaleSet, error) {
	var resource OrchestratedVirtualMachineScaleSet
	err := ctx.ReadResource("azure:compute/orchestratedVirtualMachineScaleSet:OrchestratedVirtualMachineScaleSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrchestratedVirtualMachineScaleSet resources.
type orchestratedVirtualMachineScaleSetState struct {
	// An `additionalCapabilities` block as defined below.
	AdditionalCapabilities *OrchestratedVirtualMachineScaleSetAdditionalCapabilities `pulumi:"additionalCapabilities"`
	// An `automaticInstanceRepair` block as defined below.
	//
	// > **NOTE:** To enable the `automaticInstanceRepair`, the Orchestrated Virtual Machine Scale Set must have a valid `healthProbeId` or an [Application Health Extension](https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-health-extension).
	AutomaticInstanceRepair *OrchestratedVirtualMachineScaleSetAutomaticInstanceRepair `pulumi:"automaticInstanceRepair"`
	// A `bootDiagnostics` block as defined below.
	BootDiagnostics *OrchestratedVirtualMachineScaleSetBootDiagnostics `pulumi:"bootDiagnostics"`
	// Specifies the ID of the Capacity Reservation Group which the Virtual Machine Scale Set should be allocated to. Changing this forces a new resource to be created.
	//
	// > **NOTE:** `capacityReservationGroupId` cannot be specified with `proximityPlacementGroupId`
	//
	// > **NOTE:** If `capacityReservationGroupId` is specified the `singlePlacementGroup` must be set to `false`.
	CapacityReservationGroupId *string `pulumi:"capacityReservationGroupId"`
	// One or more `dataDisk` blocks as defined below.
	DataDisks []OrchestratedVirtualMachineScaleSetDataDisk `pulumi:"dataDisks"`
	// Should disks attached to this Virtual Machine Scale Set be encrypted by enabling Encryption at Host?
	EncryptionAtHostEnabled *bool `pulumi:"encryptionAtHostEnabled"`
	// The Policy which should be used Virtual Machines are Evicted from the Scale Set. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
	EvictionPolicy *string `pulumi:"evictionPolicy"`
	// Should extension operations be allowed on the Virtual Machine Scale Set? Possible values are `true` or `false`. Defaults to `true`. Changing this forces a new Orchestrated Virtual Machine Scale Set to be created.
	//
	// > **NOTE:** `extensionOperationsEnabled` may only be set to `false` if there are no extensions defined in the `extension` field.
	ExtensionOperationsEnabled *bool `pulumi:"extensionOperationsEnabled"`
	// One or more `extension` blocks as defined below
	Extensions []OrchestratedVirtualMachineScaleSetExtension `pulumi:"extensions"`
	// Specifies the time alloted for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. Defaults to `PT1H30M`.
	ExtensionsTimeBudget *string `pulumi:"extensionsTimeBudget"`
	// An `identity` block as defined below.
	Identity *OrchestratedVirtualMachineScaleSetIdentity `pulumi:"identity"`
	// The number of Virtual Machines in the Orcestrated Virtual Machine Scale Set.
	Instances *int `pulumi:"instances"`
	// Specifies the type of on-premise license (also known as Azure Hybrid Use Benefit) which should be used for this Orchestrated Virtual Machine Scale Set. Possible values are `None`, `Windows_Client` and `Windows_Server`.
	LicenseType *string `pulumi:"licenseType"`
	// The Azure location where the Orchestrated Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The maximum price you're willing to pay for each Orchestrated Virtual Machine in this Scale Set, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machines in the Scale Set will be evicted using the eviction_policy. Defaults to `-1`, which means that each Virtual Machine in the Orchestrated Scale Set should not be evicted for price reasons.
	MaxBidPrice *float64 `pulumi:"maxBidPrice"`
	// The name of the Orchestrated Virtual Machine Scale Set. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// One or more `networkInterface` blocks as defined below.
	NetworkInterfaces []OrchestratedVirtualMachineScaleSetNetworkInterface `pulumi:"networkInterfaces"`
	// An `osDisk` block as defined below.
	OsDisk *OrchestratedVirtualMachineScaleSetOsDisk `pulumi:"osDisk"`
	// An `osProfile` block as defined below.
	OsProfile *OrchestratedVirtualMachineScaleSetOsProfile `pulumi:"osProfile"`
	// A `plan` block as documented below. Changing this forces a new resource to be created.
	Plan *OrchestratedVirtualMachineScaleSetPlan `pulumi:"plan"`
	// Specifies the number of fault domains that are used by this Orchestrated Virtual Machine Scale Set. Changing this forces a new resource to be created.
	//
	// > **NOTE:** The number of Fault Domains varies depending on which Azure Region you're using - a list can be found [here](https://github.com/MicrosoftDocs/azure-docs/blob/master/includes/managed-disks-common-fault-domain-region-list.md).
	PlatformFaultDomainCount *int `pulumi:"platformFaultDomainCount"`
	// The Priority of this Orchestrated Virtual Machine Scale Set. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this value forces a new resource.
	Priority *string `pulumi:"priority"`
	// a `priorityMix` block as defined below
	PriorityMix *OrchestratedVirtualMachineScaleSetPriorityMix `pulumi:"priorityMix"`
	// The ID of the Proximity Placement Group which the Orchestrated Virtual Machine should be assigned to. Changing this forces a new resource to be created.
	ProximityPlacementGroupId *string `pulumi:"proximityPlacementGroupId"`
	// The name of the Resource Group in which the Orchestrated Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Should this Virtual Machine Scale Set be limited to a Single Placement Group, which means the number of instances will be capped at 100 Virtual Machines. Possible values are `true` or `false`.
	SinglePlacementGroup *bool `pulumi:"singlePlacementGroup"`
	// The `name` of the SKU to be used by this Orcestrated Virtual Machine Scale Set. Valid values include: any of the [General purpose](https://docs.microsoft.com/azure/virtual-machines/sizes-general), [Compute optimized](https://docs.microsoft.com/azure/virtual-machines/sizes-compute), [Memory optimized](https://docs.microsoft.com/azure/virtual-machines/sizes-memory), [Storage optimized](https://docs.microsoft.com/azure/virtual-machines/sizes-storage), [GPU optimized](https://docs.microsoft.com/azure/virtual-machines/sizes-gpu), [FPGA optimized](https://docs.microsoft.com/azure/virtual-machines/sizes-field-programmable-gate-arrays), [High performance](https://docs.microsoft.com/azure/virtual-machines/sizes-hpc), or [Previous generation](https://docs.microsoft.com/azure/virtual-machines/sizes-previous-gen) virtual machine SKUs.
	SkuName *string `pulumi:"skuName"`
	// The ID of an Image which each Virtual Machine in this Scale Set should be based on. Possible Image ID types include `Image ID`s, `Shared Image ID`s, `Shared Image Version ID`s, `Community Gallery Image ID`s, `Community Gallery Image Version ID`s, `Shared Gallery Image ID`s and `Shared Gallery Image Version ID`s.
	SourceImageId *string `pulumi:"sourceImageId"`
	// A `sourceImageReference` block as defined below.
	SourceImageReference *OrchestratedVirtualMachineScaleSetSourceImageReference `pulumi:"sourceImageReference"`
	// A mapping of tags which should be assigned to this Orchestrated Virtual Machine Scale Set.
	Tags map[string]string `pulumi:"tags"`
	// A `terminationNotification` block as defined below.
	TerminationNotification *OrchestratedVirtualMachineScaleSetTerminationNotification `pulumi:"terminationNotification"`
	// The Unique ID for the Orchestrated Virtual Machine Scale Set.
	UniqueId *string `pulumi:"uniqueId"`
	// The Base64-Encoded User Data which should be used for this Virtual Machine Scale Set.
	UserDataBase64 *string `pulumi:"userDataBase64"`
	// Should the Virtual Machines in this Scale Set be strictly evenly distributed across Availability Zones? Defaults to `false`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** This can only be set to `true` when one or more `zones` are configured.
	ZoneBalance *bool `pulumi:"zoneBalance"`
	// Specifies a list of Availability Zones in which this Orchestrated Virtual Machine should be located. Changing this forces a new Orchestrated Virtual Machine to be created.
	//
	// > **NOTE:** Due to a limitation of the Azure API at this time only one Availability Zone can be defined.
	Zones []string `pulumi:"zones"`
}

type OrchestratedVirtualMachineScaleSetState struct {
	// An `additionalCapabilities` block as defined below.
	AdditionalCapabilities OrchestratedVirtualMachineScaleSetAdditionalCapabilitiesPtrInput
	// An `automaticInstanceRepair` block as defined below.
	//
	// > **NOTE:** To enable the `automaticInstanceRepair`, the Orchestrated Virtual Machine Scale Set must have a valid `healthProbeId` or an [Application Health Extension](https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-health-extension).
	AutomaticInstanceRepair OrchestratedVirtualMachineScaleSetAutomaticInstanceRepairPtrInput
	// A `bootDiagnostics` block as defined below.
	BootDiagnostics OrchestratedVirtualMachineScaleSetBootDiagnosticsPtrInput
	// Specifies the ID of the Capacity Reservation Group which the Virtual Machine Scale Set should be allocated to. Changing this forces a new resource to be created.
	//
	// > **NOTE:** `capacityReservationGroupId` cannot be specified with `proximityPlacementGroupId`
	//
	// > **NOTE:** If `capacityReservationGroupId` is specified the `singlePlacementGroup` must be set to `false`.
	CapacityReservationGroupId pulumi.StringPtrInput
	// One or more `dataDisk` blocks as defined below.
	DataDisks OrchestratedVirtualMachineScaleSetDataDiskArrayInput
	// Should disks attached to this Virtual Machine Scale Set be encrypted by enabling Encryption at Host?
	EncryptionAtHostEnabled pulumi.BoolPtrInput
	// The Policy which should be used Virtual Machines are Evicted from the Scale Set. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
	EvictionPolicy pulumi.StringPtrInput
	// Should extension operations be allowed on the Virtual Machine Scale Set? Possible values are `true` or `false`. Defaults to `true`. Changing this forces a new Orchestrated Virtual Machine Scale Set to be created.
	//
	// > **NOTE:** `extensionOperationsEnabled` may only be set to `false` if there are no extensions defined in the `extension` field.
	ExtensionOperationsEnabled pulumi.BoolPtrInput
	// One or more `extension` blocks as defined below
	Extensions OrchestratedVirtualMachineScaleSetExtensionArrayInput
	// Specifies the time alloted for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. Defaults to `PT1H30M`.
	ExtensionsTimeBudget pulumi.StringPtrInput
	// An `identity` block as defined below.
	Identity OrchestratedVirtualMachineScaleSetIdentityPtrInput
	// The number of Virtual Machines in the Orcestrated Virtual Machine Scale Set.
	Instances pulumi.IntPtrInput
	// Specifies the type of on-premise license (also known as Azure Hybrid Use Benefit) which should be used for this Orchestrated Virtual Machine Scale Set. Possible values are `None`, `Windows_Client` and `Windows_Server`.
	LicenseType pulumi.StringPtrInput
	// The Azure location where the Orchestrated Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The maximum price you're willing to pay for each Orchestrated Virtual Machine in this Scale Set, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machines in the Scale Set will be evicted using the eviction_policy. Defaults to `-1`, which means that each Virtual Machine in the Orchestrated Scale Set should not be evicted for price reasons.
	MaxBidPrice pulumi.Float64PtrInput
	// The name of the Orchestrated Virtual Machine Scale Set. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// One or more `networkInterface` blocks as defined below.
	NetworkInterfaces OrchestratedVirtualMachineScaleSetNetworkInterfaceArrayInput
	// An `osDisk` block as defined below.
	OsDisk OrchestratedVirtualMachineScaleSetOsDiskPtrInput
	// An `osProfile` block as defined below.
	OsProfile OrchestratedVirtualMachineScaleSetOsProfilePtrInput
	// A `plan` block as documented below. Changing this forces a new resource to be created.
	Plan OrchestratedVirtualMachineScaleSetPlanPtrInput
	// Specifies the number of fault domains that are used by this Orchestrated Virtual Machine Scale Set. Changing this forces a new resource to be created.
	//
	// > **NOTE:** The number of Fault Domains varies depending on which Azure Region you're using - a list can be found [here](https://github.com/MicrosoftDocs/azure-docs/blob/master/includes/managed-disks-common-fault-domain-region-list.md).
	PlatformFaultDomainCount pulumi.IntPtrInput
	// The Priority of this Orchestrated Virtual Machine Scale Set. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this value forces a new resource.
	Priority pulumi.StringPtrInput
	// a `priorityMix` block as defined below
	PriorityMix OrchestratedVirtualMachineScaleSetPriorityMixPtrInput
	// The ID of the Proximity Placement Group which the Orchestrated Virtual Machine should be assigned to. Changing this forces a new resource to be created.
	ProximityPlacementGroupId pulumi.StringPtrInput
	// The name of the Resource Group in which the Orchestrated Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// Should this Virtual Machine Scale Set be limited to a Single Placement Group, which means the number of instances will be capped at 100 Virtual Machines. Possible values are `true` or `false`.
	SinglePlacementGroup pulumi.BoolPtrInput
	// The `name` of the SKU to be used by this Orcestrated Virtual Machine Scale Set. Valid values include: any of the [General purpose](https://docs.microsoft.com/azure/virtual-machines/sizes-general), [Compute optimized](https://docs.microsoft.com/azure/virtual-machines/sizes-compute), [Memory optimized](https://docs.microsoft.com/azure/virtual-machines/sizes-memory), [Storage optimized](https://docs.microsoft.com/azure/virtual-machines/sizes-storage), [GPU optimized](https://docs.microsoft.com/azure/virtual-machines/sizes-gpu), [FPGA optimized](https://docs.microsoft.com/azure/virtual-machines/sizes-field-programmable-gate-arrays), [High performance](https://docs.microsoft.com/azure/virtual-machines/sizes-hpc), or [Previous generation](https://docs.microsoft.com/azure/virtual-machines/sizes-previous-gen) virtual machine SKUs.
	SkuName pulumi.StringPtrInput
	// The ID of an Image which each Virtual Machine in this Scale Set should be based on. Possible Image ID types include `Image ID`s, `Shared Image ID`s, `Shared Image Version ID`s, `Community Gallery Image ID`s, `Community Gallery Image Version ID`s, `Shared Gallery Image ID`s and `Shared Gallery Image Version ID`s.
	SourceImageId pulumi.StringPtrInput
	// A `sourceImageReference` block as defined below.
	SourceImageReference OrchestratedVirtualMachineScaleSetSourceImageReferencePtrInput
	// A mapping of tags which should be assigned to this Orchestrated Virtual Machine Scale Set.
	Tags pulumi.StringMapInput
	// A `terminationNotification` block as defined below.
	TerminationNotification OrchestratedVirtualMachineScaleSetTerminationNotificationPtrInput
	// The Unique ID for the Orchestrated Virtual Machine Scale Set.
	UniqueId pulumi.StringPtrInput
	// The Base64-Encoded User Data which should be used for this Virtual Machine Scale Set.
	UserDataBase64 pulumi.StringPtrInput
	// Should the Virtual Machines in this Scale Set be strictly evenly distributed across Availability Zones? Defaults to `false`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** This can only be set to `true` when one or more `zones` are configured.
	ZoneBalance pulumi.BoolPtrInput
	// Specifies a list of Availability Zones in which this Orchestrated Virtual Machine should be located. Changing this forces a new Orchestrated Virtual Machine to be created.
	//
	// > **NOTE:** Due to a limitation of the Azure API at this time only one Availability Zone can be defined.
	Zones pulumi.StringArrayInput
}

func (OrchestratedVirtualMachineScaleSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*orchestratedVirtualMachineScaleSetState)(nil)).Elem()
}

type orchestratedVirtualMachineScaleSetArgs struct {
	// An `additionalCapabilities` block as defined below.
	AdditionalCapabilities *OrchestratedVirtualMachineScaleSetAdditionalCapabilities `pulumi:"additionalCapabilities"`
	// An `automaticInstanceRepair` block as defined below.
	//
	// > **NOTE:** To enable the `automaticInstanceRepair`, the Orchestrated Virtual Machine Scale Set must have a valid `healthProbeId` or an [Application Health Extension](https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-health-extension).
	AutomaticInstanceRepair *OrchestratedVirtualMachineScaleSetAutomaticInstanceRepair `pulumi:"automaticInstanceRepair"`
	// A `bootDiagnostics` block as defined below.
	BootDiagnostics *OrchestratedVirtualMachineScaleSetBootDiagnostics `pulumi:"bootDiagnostics"`
	// Specifies the ID of the Capacity Reservation Group which the Virtual Machine Scale Set should be allocated to. Changing this forces a new resource to be created.
	//
	// > **NOTE:** `capacityReservationGroupId` cannot be specified with `proximityPlacementGroupId`
	//
	// > **NOTE:** If `capacityReservationGroupId` is specified the `singlePlacementGroup` must be set to `false`.
	CapacityReservationGroupId *string `pulumi:"capacityReservationGroupId"`
	// One or more `dataDisk` blocks as defined below.
	DataDisks []OrchestratedVirtualMachineScaleSetDataDisk `pulumi:"dataDisks"`
	// Should disks attached to this Virtual Machine Scale Set be encrypted by enabling Encryption at Host?
	EncryptionAtHostEnabled *bool `pulumi:"encryptionAtHostEnabled"`
	// The Policy which should be used Virtual Machines are Evicted from the Scale Set. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
	EvictionPolicy *string `pulumi:"evictionPolicy"`
	// Should extension operations be allowed on the Virtual Machine Scale Set? Possible values are `true` or `false`. Defaults to `true`. Changing this forces a new Orchestrated Virtual Machine Scale Set to be created.
	//
	// > **NOTE:** `extensionOperationsEnabled` may only be set to `false` if there are no extensions defined in the `extension` field.
	ExtensionOperationsEnabled *bool `pulumi:"extensionOperationsEnabled"`
	// One or more `extension` blocks as defined below
	Extensions []OrchestratedVirtualMachineScaleSetExtension `pulumi:"extensions"`
	// Specifies the time alloted for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. Defaults to `PT1H30M`.
	ExtensionsTimeBudget *string `pulumi:"extensionsTimeBudget"`
	// An `identity` block as defined below.
	Identity *OrchestratedVirtualMachineScaleSetIdentity `pulumi:"identity"`
	// The number of Virtual Machines in the Orcestrated Virtual Machine Scale Set.
	Instances *int `pulumi:"instances"`
	// Specifies the type of on-premise license (also known as Azure Hybrid Use Benefit) which should be used for this Orchestrated Virtual Machine Scale Set. Possible values are `None`, `Windows_Client` and `Windows_Server`.
	LicenseType *string `pulumi:"licenseType"`
	// The Azure location where the Orchestrated Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The maximum price you're willing to pay for each Orchestrated Virtual Machine in this Scale Set, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machines in the Scale Set will be evicted using the eviction_policy. Defaults to `-1`, which means that each Virtual Machine in the Orchestrated Scale Set should not be evicted for price reasons.
	MaxBidPrice *float64 `pulumi:"maxBidPrice"`
	// The name of the Orchestrated Virtual Machine Scale Set. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// One or more `networkInterface` blocks as defined below.
	NetworkInterfaces []OrchestratedVirtualMachineScaleSetNetworkInterface `pulumi:"networkInterfaces"`
	// An `osDisk` block as defined below.
	OsDisk *OrchestratedVirtualMachineScaleSetOsDisk `pulumi:"osDisk"`
	// An `osProfile` block as defined below.
	OsProfile *OrchestratedVirtualMachineScaleSetOsProfile `pulumi:"osProfile"`
	// A `plan` block as documented below. Changing this forces a new resource to be created.
	Plan *OrchestratedVirtualMachineScaleSetPlan `pulumi:"plan"`
	// Specifies the number of fault domains that are used by this Orchestrated Virtual Machine Scale Set. Changing this forces a new resource to be created.
	//
	// > **NOTE:** The number of Fault Domains varies depending on which Azure Region you're using - a list can be found [here](https://github.com/MicrosoftDocs/azure-docs/blob/master/includes/managed-disks-common-fault-domain-region-list.md).
	PlatformFaultDomainCount int `pulumi:"platformFaultDomainCount"`
	// The Priority of this Orchestrated Virtual Machine Scale Set. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this value forces a new resource.
	Priority *string `pulumi:"priority"`
	// a `priorityMix` block as defined below
	PriorityMix *OrchestratedVirtualMachineScaleSetPriorityMix `pulumi:"priorityMix"`
	// The ID of the Proximity Placement Group which the Orchestrated Virtual Machine should be assigned to. Changing this forces a new resource to be created.
	ProximityPlacementGroupId *string `pulumi:"proximityPlacementGroupId"`
	// The name of the Resource Group in which the Orchestrated Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Should this Virtual Machine Scale Set be limited to a Single Placement Group, which means the number of instances will be capped at 100 Virtual Machines. Possible values are `true` or `false`.
	SinglePlacementGroup *bool `pulumi:"singlePlacementGroup"`
	// The `name` of the SKU to be used by this Orcestrated Virtual Machine Scale Set. Valid values include: any of the [General purpose](https://docs.microsoft.com/azure/virtual-machines/sizes-general), [Compute optimized](https://docs.microsoft.com/azure/virtual-machines/sizes-compute), [Memory optimized](https://docs.microsoft.com/azure/virtual-machines/sizes-memory), [Storage optimized](https://docs.microsoft.com/azure/virtual-machines/sizes-storage), [GPU optimized](https://docs.microsoft.com/azure/virtual-machines/sizes-gpu), [FPGA optimized](https://docs.microsoft.com/azure/virtual-machines/sizes-field-programmable-gate-arrays), [High performance](https://docs.microsoft.com/azure/virtual-machines/sizes-hpc), or [Previous generation](https://docs.microsoft.com/azure/virtual-machines/sizes-previous-gen) virtual machine SKUs.
	SkuName *string `pulumi:"skuName"`
	// The ID of an Image which each Virtual Machine in this Scale Set should be based on. Possible Image ID types include `Image ID`s, `Shared Image ID`s, `Shared Image Version ID`s, `Community Gallery Image ID`s, `Community Gallery Image Version ID`s, `Shared Gallery Image ID`s and `Shared Gallery Image Version ID`s.
	SourceImageId *string `pulumi:"sourceImageId"`
	// A `sourceImageReference` block as defined below.
	SourceImageReference *OrchestratedVirtualMachineScaleSetSourceImageReference `pulumi:"sourceImageReference"`
	// A mapping of tags which should be assigned to this Orchestrated Virtual Machine Scale Set.
	Tags map[string]string `pulumi:"tags"`
	// A `terminationNotification` block as defined below.
	TerminationNotification *OrchestratedVirtualMachineScaleSetTerminationNotification `pulumi:"terminationNotification"`
	// The Base64-Encoded User Data which should be used for this Virtual Machine Scale Set.
	UserDataBase64 *string `pulumi:"userDataBase64"`
	// Should the Virtual Machines in this Scale Set be strictly evenly distributed across Availability Zones? Defaults to `false`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** This can only be set to `true` when one or more `zones` are configured.
	ZoneBalance *bool `pulumi:"zoneBalance"`
	// Specifies a list of Availability Zones in which this Orchestrated Virtual Machine should be located. Changing this forces a new Orchestrated Virtual Machine to be created.
	//
	// > **NOTE:** Due to a limitation of the Azure API at this time only one Availability Zone can be defined.
	Zones []string `pulumi:"zones"`
}

// The set of arguments for constructing a OrchestratedVirtualMachineScaleSet resource.
type OrchestratedVirtualMachineScaleSetArgs struct {
	// An `additionalCapabilities` block as defined below.
	AdditionalCapabilities OrchestratedVirtualMachineScaleSetAdditionalCapabilitiesPtrInput
	// An `automaticInstanceRepair` block as defined below.
	//
	// > **NOTE:** To enable the `automaticInstanceRepair`, the Orchestrated Virtual Machine Scale Set must have a valid `healthProbeId` or an [Application Health Extension](https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-health-extension).
	AutomaticInstanceRepair OrchestratedVirtualMachineScaleSetAutomaticInstanceRepairPtrInput
	// A `bootDiagnostics` block as defined below.
	BootDiagnostics OrchestratedVirtualMachineScaleSetBootDiagnosticsPtrInput
	// Specifies the ID of the Capacity Reservation Group which the Virtual Machine Scale Set should be allocated to. Changing this forces a new resource to be created.
	//
	// > **NOTE:** `capacityReservationGroupId` cannot be specified with `proximityPlacementGroupId`
	//
	// > **NOTE:** If `capacityReservationGroupId` is specified the `singlePlacementGroup` must be set to `false`.
	CapacityReservationGroupId pulumi.StringPtrInput
	// One or more `dataDisk` blocks as defined below.
	DataDisks OrchestratedVirtualMachineScaleSetDataDiskArrayInput
	// Should disks attached to this Virtual Machine Scale Set be encrypted by enabling Encryption at Host?
	EncryptionAtHostEnabled pulumi.BoolPtrInput
	// The Policy which should be used Virtual Machines are Evicted from the Scale Set. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
	EvictionPolicy pulumi.StringPtrInput
	// Should extension operations be allowed on the Virtual Machine Scale Set? Possible values are `true` or `false`. Defaults to `true`. Changing this forces a new Orchestrated Virtual Machine Scale Set to be created.
	//
	// > **NOTE:** `extensionOperationsEnabled` may only be set to `false` if there are no extensions defined in the `extension` field.
	ExtensionOperationsEnabled pulumi.BoolPtrInput
	// One or more `extension` blocks as defined below
	Extensions OrchestratedVirtualMachineScaleSetExtensionArrayInput
	// Specifies the time alloted for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. Defaults to `PT1H30M`.
	ExtensionsTimeBudget pulumi.StringPtrInput
	// An `identity` block as defined below.
	Identity OrchestratedVirtualMachineScaleSetIdentityPtrInput
	// The number of Virtual Machines in the Orcestrated Virtual Machine Scale Set.
	Instances pulumi.IntPtrInput
	// Specifies the type of on-premise license (also known as Azure Hybrid Use Benefit) which should be used for this Orchestrated Virtual Machine Scale Set. Possible values are `None`, `Windows_Client` and `Windows_Server`.
	LicenseType pulumi.StringPtrInput
	// The Azure location where the Orchestrated Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The maximum price you're willing to pay for each Orchestrated Virtual Machine in this Scale Set, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machines in the Scale Set will be evicted using the eviction_policy. Defaults to `-1`, which means that each Virtual Machine in the Orchestrated Scale Set should not be evicted for price reasons.
	MaxBidPrice pulumi.Float64PtrInput
	// The name of the Orchestrated Virtual Machine Scale Set. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// One or more `networkInterface` blocks as defined below.
	NetworkInterfaces OrchestratedVirtualMachineScaleSetNetworkInterfaceArrayInput
	// An `osDisk` block as defined below.
	OsDisk OrchestratedVirtualMachineScaleSetOsDiskPtrInput
	// An `osProfile` block as defined below.
	OsProfile OrchestratedVirtualMachineScaleSetOsProfilePtrInput
	// A `plan` block as documented below. Changing this forces a new resource to be created.
	Plan OrchestratedVirtualMachineScaleSetPlanPtrInput
	// Specifies the number of fault domains that are used by this Orchestrated Virtual Machine Scale Set. Changing this forces a new resource to be created.
	//
	// > **NOTE:** The number of Fault Domains varies depending on which Azure Region you're using - a list can be found [here](https://github.com/MicrosoftDocs/azure-docs/blob/master/includes/managed-disks-common-fault-domain-region-list.md).
	PlatformFaultDomainCount pulumi.IntInput
	// The Priority of this Orchestrated Virtual Machine Scale Set. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this value forces a new resource.
	Priority pulumi.StringPtrInput
	// a `priorityMix` block as defined below
	PriorityMix OrchestratedVirtualMachineScaleSetPriorityMixPtrInput
	// The ID of the Proximity Placement Group which the Orchestrated Virtual Machine should be assigned to. Changing this forces a new resource to be created.
	ProximityPlacementGroupId pulumi.StringPtrInput
	// The name of the Resource Group in which the Orchestrated Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// Should this Virtual Machine Scale Set be limited to a Single Placement Group, which means the number of instances will be capped at 100 Virtual Machines. Possible values are `true` or `false`.
	SinglePlacementGroup pulumi.BoolPtrInput
	// The `name` of the SKU to be used by this Orcestrated Virtual Machine Scale Set. Valid values include: any of the [General purpose](https://docs.microsoft.com/azure/virtual-machines/sizes-general), [Compute optimized](https://docs.microsoft.com/azure/virtual-machines/sizes-compute), [Memory optimized](https://docs.microsoft.com/azure/virtual-machines/sizes-memory), [Storage optimized](https://docs.microsoft.com/azure/virtual-machines/sizes-storage), [GPU optimized](https://docs.microsoft.com/azure/virtual-machines/sizes-gpu), [FPGA optimized](https://docs.microsoft.com/azure/virtual-machines/sizes-field-programmable-gate-arrays), [High performance](https://docs.microsoft.com/azure/virtual-machines/sizes-hpc), or [Previous generation](https://docs.microsoft.com/azure/virtual-machines/sizes-previous-gen) virtual machine SKUs.
	SkuName pulumi.StringPtrInput
	// The ID of an Image which each Virtual Machine in this Scale Set should be based on. Possible Image ID types include `Image ID`s, `Shared Image ID`s, `Shared Image Version ID`s, `Community Gallery Image ID`s, `Community Gallery Image Version ID`s, `Shared Gallery Image ID`s and `Shared Gallery Image Version ID`s.
	SourceImageId pulumi.StringPtrInput
	// A `sourceImageReference` block as defined below.
	SourceImageReference OrchestratedVirtualMachineScaleSetSourceImageReferencePtrInput
	// A mapping of tags which should be assigned to this Orchestrated Virtual Machine Scale Set.
	Tags pulumi.StringMapInput
	// A `terminationNotification` block as defined below.
	TerminationNotification OrchestratedVirtualMachineScaleSetTerminationNotificationPtrInput
	// The Base64-Encoded User Data which should be used for this Virtual Machine Scale Set.
	UserDataBase64 pulumi.StringPtrInput
	// Should the Virtual Machines in this Scale Set be strictly evenly distributed across Availability Zones? Defaults to `false`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** This can only be set to `true` when one or more `zones` are configured.
	ZoneBalance pulumi.BoolPtrInput
	// Specifies a list of Availability Zones in which this Orchestrated Virtual Machine should be located. Changing this forces a new Orchestrated Virtual Machine to be created.
	//
	// > **NOTE:** Due to a limitation of the Azure API at this time only one Availability Zone can be defined.
	Zones pulumi.StringArrayInput
}

func (OrchestratedVirtualMachineScaleSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*orchestratedVirtualMachineScaleSetArgs)(nil)).Elem()
}

type OrchestratedVirtualMachineScaleSetInput interface {
	pulumi.Input

	ToOrchestratedVirtualMachineScaleSetOutput() OrchestratedVirtualMachineScaleSetOutput
	ToOrchestratedVirtualMachineScaleSetOutputWithContext(ctx context.Context) OrchestratedVirtualMachineScaleSetOutput
}

func (*OrchestratedVirtualMachineScaleSet) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratedVirtualMachineScaleSet)(nil)).Elem()
}

func (i *OrchestratedVirtualMachineScaleSet) ToOrchestratedVirtualMachineScaleSetOutput() OrchestratedVirtualMachineScaleSetOutput {
	return i.ToOrchestratedVirtualMachineScaleSetOutputWithContext(context.Background())
}

func (i *OrchestratedVirtualMachineScaleSet) ToOrchestratedVirtualMachineScaleSetOutputWithContext(ctx context.Context) OrchestratedVirtualMachineScaleSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratedVirtualMachineScaleSetOutput)
}

func (i *OrchestratedVirtualMachineScaleSet) ToOutput(ctx context.Context) pulumix.Output[*OrchestratedVirtualMachineScaleSet] {
	return pulumix.Output[*OrchestratedVirtualMachineScaleSet]{
		OutputState: i.ToOrchestratedVirtualMachineScaleSetOutputWithContext(ctx).OutputState,
	}
}

// OrchestratedVirtualMachineScaleSetArrayInput is an input type that accepts OrchestratedVirtualMachineScaleSetArray and OrchestratedVirtualMachineScaleSetArrayOutput values.
// You can construct a concrete instance of `OrchestratedVirtualMachineScaleSetArrayInput` via:
//
//	OrchestratedVirtualMachineScaleSetArray{ OrchestratedVirtualMachineScaleSetArgs{...} }
type OrchestratedVirtualMachineScaleSetArrayInput interface {
	pulumi.Input

	ToOrchestratedVirtualMachineScaleSetArrayOutput() OrchestratedVirtualMachineScaleSetArrayOutput
	ToOrchestratedVirtualMachineScaleSetArrayOutputWithContext(context.Context) OrchestratedVirtualMachineScaleSetArrayOutput
}

type OrchestratedVirtualMachineScaleSetArray []OrchestratedVirtualMachineScaleSetInput

func (OrchestratedVirtualMachineScaleSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrchestratedVirtualMachineScaleSet)(nil)).Elem()
}

func (i OrchestratedVirtualMachineScaleSetArray) ToOrchestratedVirtualMachineScaleSetArrayOutput() OrchestratedVirtualMachineScaleSetArrayOutput {
	return i.ToOrchestratedVirtualMachineScaleSetArrayOutputWithContext(context.Background())
}

func (i OrchestratedVirtualMachineScaleSetArray) ToOrchestratedVirtualMachineScaleSetArrayOutputWithContext(ctx context.Context) OrchestratedVirtualMachineScaleSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratedVirtualMachineScaleSetArrayOutput)
}

func (i OrchestratedVirtualMachineScaleSetArray) ToOutput(ctx context.Context) pulumix.Output[[]*OrchestratedVirtualMachineScaleSet] {
	return pulumix.Output[[]*OrchestratedVirtualMachineScaleSet]{
		OutputState: i.ToOrchestratedVirtualMachineScaleSetArrayOutputWithContext(ctx).OutputState,
	}
}

// OrchestratedVirtualMachineScaleSetMapInput is an input type that accepts OrchestratedVirtualMachineScaleSetMap and OrchestratedVirtualMachineScaleSetMapOutput values.
// You can construct a concrete instance of `OrchestratedVirtualMachineScaleSetMapInput` via:
//
//	OrchestratedVirtualMachineScaleSetMap{ "key": OrchestratedVirtualMachineScaleSetArgs{...} }
type OrchestratedVirtualMachineScaleSetMapInput interface {
	pulumi.Input

	ToOrchestratedVirtualMachineScaleSetMapOutput() OrchestratedVirtualMachineScaleSetMapOutput
	ToOrchestratedVirtualMachineScaleSetMapOutputWithContext(context.Context) OrchestratedVirtualMachineScaleSetMapOutput
}

type OrchestratedVirtualMachineScaleSetMap map[string]OrchestratedVirtualMachineScaleSetInput

func (OrchestratedVirtualMachineScaleSetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrchestratedVirtualMachineScaleSet)(nil)).Elem()
}

func (i OrchestratedVirtualMachineScaleSetMap) ToOrchestratedVirtualMachineScaleSetMapOutput() OrchestratedVirtualMachineScaleSetMapOutput {
	return i.ToOrchestratedVirtualMachineScaleSetMapOutputWithContext(context.Background())
}

func (i OrchestratedVirtualMachineScaleSetMap) ToOrchestratedVirtualMachineScaleSetMapOutputWithContext(ctx context.Context) OrchestratedVirtualMachineScaleSetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratedVirtualMachineScaleSetMapOutput)
}

func (i OrchestratedVirtualMachineScaleSetMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*OrchestratedVirtualMachineScaleSet] {
	return pulumix.Output[map[string]*OrchestratedVirtualMachineScaleSet]{
		OutputState: i.ToOrchestratedVirtualMachineScaleSetMapOutputWithContext(ctx).OutputState,
	}
}

type OrchestratedVirtualMachineScaleSetOutput struct{ *pulumi.OutputState }

func (OrchestratedVirtualMachineScaleSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratedVirtualMachineScaleSet)(nil)).Elem()
}

func (o OrchestratedVirtualMachineScaleSetOutput) ToOrchestratedVirtualMachineScaleSetOutput() OrchestratedVirtualMachineScaleSetOutput {
	return o
}

func (o OrchestratedVirtualMachineScaleSetOutput) ToOrchestratedVirtualMachineScaleSetOutputWithContext(ctx context.Context) OrchestratedVirtualMachineScaleSetOutput {
	return o
}

func (o OrchestratedVirtualMachineScaleSetOutput) ToOutput(ctx context.Context) pulumix.Output[*OrchestratedVirtualMachineScaleSet] {
	return pulumix.Output[*OrchestratedVirtualMachineScaleSet]{
		OutputState: o.OutputState,
	}
}

// An `additionalCapabilities` block as defined below.
func (o OrchestratedVirtualMachineScaleSetOutput) AdditionalCapabilities() OrchestratedVirtualMachineScaleSetAdditionalCapabilitiesPtrOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) OrchestratedVirtualMachineScaleSetAdditionalCapabilitiesPtrOutput {
		return v.AdditionalCapabilities
	}).(OrchestratedVirtualMachineScaleSetAdditionalCapabilitiesPtrOutput)
}

// An `automaticInstanceRepair` block as defined below.
//
// > **NOTE:** To enable the `automaticInstanceRepair`, the Orchestrated Virtual Machine Scale Set must have a valid `healthProbeId` or an [Application Health Extension](https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-health-extension).
func (o OrchestratedVirtualMachineScaleSetOutput) AutomaticInstanceRepair() OrchestratedVirtualMachineScaleSetAutomaticInstanceRepairOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) OrchestratedVirtualMachineScaleSetAutomaticInstanceRepairOutput {
		return v.AutomaticInstanceRepair
	}).(OrchestratedVirtualMachineScaleSetAutomaticInstanceRepairOutput)
}

// A `bootDiagnostics` block as defined below.
func (o OrchestratedVirtualMachineScaleSetOutput) BootDiagnostics() OrchestratedVirtualMachineScaleSetBootDiagnosticsPtrOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) OrchestratedVirtualMachineScaleSetBootDiagnosticsPtrOutput {
		return v.BootDiagnostics
	}).(OrchestratedVirtualMachineScaleSetBootDiagnosticsPtrOutput)
}

// Specifies the ID of the Capacity Reservation Group which the Virtual Machine Scale Set should be allocated to. Changing this forces a new resource to be created.
//
// > **NOTE:** `capacityReservationGroupId` cannot be specified with `proximityPlacementGroupId`
//
// > **NOTE:** If `capacityReservationGroupId` is specified the `singlePlacementGroup` must be set to `false`.
func (o OrchestratedVirtualMachineScaleSetOutput) CapacityReservationGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) pulumi.StringPtrOutput {
		return v.CapacityReservationGroupId
	}).(pulumi.StringPtrOutput)
}

// One or more `dataDisk` blocks as defined below.
func (o OrchestratedVirtualMachineScaleSetOutput) DataDisks() OrchestratedVirtualMachineScaleSetDataDiskArrayOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) OrchestratedVirtualMachineScaleSetDataDiskArrayOutput {
		return v.DataDisks
	}).(OrchestratedVirtualMachineScaleSetDataDiskArrayOutput)
}

// Should disks attached to this Virtual Machine Scale Set be encrypted by enabling Encryption at Host?
func (o OrchestratedVirtualMachineScaleSetOutput) EncryptionAtHostEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) pulumi.BoolPtrOutput { return v.EncryptionAtHostEnabled }).(pulumi.BoolPtrOutput)
}

// The Policy which should be used Virtual Machines are Evicted from the Scale Set. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
func (o OrchestratedVirtualMachineScaleSetOutput) EvictionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) pulumi.StringPtrOutput { return v.EvictionPolicy }).(pulumi.StringPtrOutput)
}

// Should extension operations be allowed on the Virtual Machine Scale Set? Possible values are `true` or `false`. Defaults to `true`. Changing this forces a new Orchestrated Virtual Machine Scale Set to be created.
//
// > **NOTE:** `extensionOperationsEnabled` may only be set to `false` if there are no extensions defined in the `extension` field.
func (o OrchestratedVirtualMachineScaleSetOutput) ExtensionOperationsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) pulumi.BoolOutput { return v.ExtensionOperationsEnabled }).(pulumi.BoolOutput)
}

// One or more `extension` blocks as defined below
func (o OrchestratedVirtualMachineScaleSetOutput) Extensions() OrchestratedVirtualMachineScaleSetExtensionArrayOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) OrchestratedVirtualMachineScaleSetExtensionArrayOutput {
		return v.Extensions
	}).(OrchestratedVirtualMachineScaleSetExtensionArrayOutput)
}

// Specifies the time alloted for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. Defaults to `PT1H30M`.
func (o OrchestratedVirtualMachineScaleSetOutput) ExtensionsTimeBudget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) pulumi.StringPtrOutput { return v.ExtensionsTimeBudget }).(pulumi.StringPtrOutput)
}

// An `identity` block as defined below.
func (o OrchestratedVirtualMachineScaleSetOutput) Identity() OrchestratedVirtualMachineScaleSetIdentityPtrOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) OrchestratedVirtualMachineScaleSetIdentityPtrOutput {
		return v.Identity
	}).(OrchestratedVirtualMachineScaleSetIdentityPtrOutput)
}

// The number of Virtual Machines in the Orcestrated Virtual Machine Scale Set.
func (o OrchestratedVirtualMachineScaleSetOutput) Instances() pulumi.IntOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) pulumi.IntOutput { return v.Instances }).(pulumi.IntOutput)
}

// Specifies the type of on-premise license (also known as Azure Hybrid Use Benefit) which should be used for this Orchestrated Virtual Machine Scale Set. Possible values are `None`, `Windows_Client` and `Windows_Server`.
func (o OrchestratedVirtualMachineScaleSetOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) pulumi.StringPtrOutput { return v.LicenseType }).(pulumi.StringPtrOutput)
}

// The Azure location where the Orchestrated Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
func (o OrchestratedVirtualMachineScaleSetOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The maximum price you're willing to pay for each Orchestrated Virtual Machine in this Scale Set, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machines in the Scale Set will be evicted using the eviction_policy. Defaults to `-1`, which means that each Virtual Machine in the Orchestrated Scale Set should not be evicted for price reasons.
func (o OrchestratedVirtualMachineScaleSetOutput) MaxBidPrice() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) pulumi.Float64PtrOutput { return v.MaxBidPrice }).(pulumi.Float64PtrOutput)
}

// The name of the Orchestrated Virtual Machine Scale Set. Changing this forces a new resource to be created.
func (o OrchestratedVirtualMachineScaleSetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// One or more `networkInterface` blocks as defined below.
func (o OrchestratedVirtualMachineScaleSetOutput) NetworkInterfaces() OrchestratedVirtualMachineScaleSetNetworkInterfaceArrayOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) OrchestratedVirtualMachineScaleSetNetworkInterfaceArrayOutput {
		return v.NetworkInterfaces
	}).(OrchestratedVirtualMachineScaleSetNetworkInterfaceArrayOutput)
}

// An `osDisk` block as defined below.
func (o OrchestratedVirtualMachineScaleSetOutput) OsDisk() OrchestratedVirtualMachineScaleSetOsDiskPtrOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) OrchestratedVirtualMachineScaleSetOsDiskPtrOutput {
		return v.OsDisk
	}).(OrchestratedVirtualMachineScaleSetOsDiskPtrOutput)
}

// An `osProfile` block as defined below.
func (o OrchestratedVirtualMachineScaleSetOutput) OsProfile() OrchestratedVirtualMachineScaleSetOsProfilePtrOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) OrchestratedVirtualMachineScaleSetOsProfilePtrOutput {
		return v.OsProfile
	}).(OrchestratedVirtualMachineScaleSetOsProfilePtrOutput)
}

// A `plan` block as documented below. Changing this forces a new resource to be created.
func (o OrchestratedVirtualMachineScaleSetOutput) Plan() OrchestratedVirtualMachineScaleSetPlanPtrOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) OrchestratedVirtualMachineScaleSetPlanPtrOutput {
		return v.Plan
	}).(OrchestratedVirtualMachineScaleSetPlanPtrOutput)
}

// Specifies the number of fault domains that are used by this Orchestrated Virtual Machine Scale Set. Changing this forces a new resource to be created.
//
// > **NOTE:** The number of Fault Domains varies depending on which Azure Region you're using - a list can be found [here](https://github.com/MicrosoftDocs/azure-docs/blob/master/includes/managed-disks-common-fault-domain-region-list.md).
func (o OrchestratedVirtualMachineScaleSetOutput) PlatformFaultDomainCount() pulumi.IntOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) pulumi.IntOutput { return v.PlatformFaultDomainCount }).(pulumi.IntOutput)
}

// The Priority of this Orchestrated Virtual Machine Scale Set. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this value forces a new resource.
func (o OrchestratedVirtualMachineScaleSetOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) pulumi.StringPtrOutput { return v.Priority }).(pulumi.StringPtrOutput)
}

// a `priorityMix` block as defined below
func (o OrchestratedVirtualMachineScaleSetOutput) PriorityMix() OrchestratedVirtualMachineScaleSetPriorityMixPtrOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) OrchestratedVirtualMachineScaleSetPriorityMixPtrOutput {
		return v.PriorityMix
	}).(OrchestratedVirtualMachineScaleSetPriorityMixPtrOutput)
}

// The ID of the Proximity Placement Group which the Orchestrated Virtual Machine should be assigned to. Changing this forces a new resource to be created.
func (o OrchestratedVirtualMachineScaleSetOutput) ProximityPlacementGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) pulumi.StringPtrOutput { return v.ProximityPlacementGroupId }).(pulumi.StringPtrOutput)
}

// The name of the Resource Group in which the Orchestrated Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
func (o OrchestratedVirtualMachineScaleSetOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// Should this Virtual Machine Scale Set be limited to a Single Placement Group, which means the number of instances will be capped at 100 Virtual Machines. Possible values are `true` or `false`.
func (o OrchestratedVirtualMachineScaleSetOutput) SinglePlacementGroup() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) pulumi.BoolOutput { return v.SinglePlacementGroup }).(pulumi.BoolOutput)
}

// The `name` of the SKU to be used by this Orcestrated Virtual Machine Scale Set. Valid values include: any of the [General purpose](https://docs.microsoft.com/azure/virtual-machines/sizes-general), [Compute optimized](https://docs.microsoft.com/azure/virtual-machines/sizes-compute), [Memory optimized](https://docs.microsoft.com/azure/virtual-machines/sizes-memory), [Storage optimized](https://docs.microsoft.com/azure/virtual-machines/sizes-storage), [GPU optimized](https://docs.microsoft.com/azure/virtual-machines/sizes-gpu), [FPGA optimized](https://docs.microsoft.com/azure/virtual-machines/sizes-field-programmable-gate-arrays), [High performance](https://docs.microsoft.com/azure/virtual-machines/sizes-hpc), or [Previous generation](https://docs.microsoft.com/azure/virtual-machines/sizes-previous-gen) virtual machine SKUs.
func (o OrchestratedVirtualMachineScaleSetOutput) SkuName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) pulumi.StringPtrOutput { return v.SkuName }).(pulumi.StringPtrOutput)
}

// The ID of an Image which each Virtual Machine in this Scale Set should be based on. Possible Image ID types include `Image ID`s, `Shared Image ID`s, `Shared Image Version ID`s, `Community Gallery Image ID`s, `Community Gallery Image Version ID`s, `Shared Gallery Image ID`s and `Shared Gallery Image Version ID`s.
func (o OrchestratedVirtualMachineScaleSetOutput) SourceImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) pulumi.StringPtrOutput { return v.SourceImageId }).(pulumi.StringPtrOutput)
}

// A `sourceImageReference` block as defined below.
func (o OrchestratedVirtualMachineScaleSetOutput) SourceImageReference() OrchestratedVirtualMachineScaleSetSourceImageReferencePtrOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) OrchestratedVirtualMachineScaleSetSourceImageReferencePtrOutput {
		return v.SourceImageReference
	}).(OrchestratedVirtualMachineScaleSetSourceImageReferencePtrOutput)
}

// A mapping of tags which should be assigned to this Orchestrated Virtual Machine Scale Set.
func (o OrchestratedVirtualMachineScaleSetOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A `terminationNotification` block as defined below.
func (o OrchestratedVirtualMachineScaleSetOutput) TerminationNotification() OrchestratedVirtualMachineScaleSetTerminationNotificationOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) OrchestratedVirtualMachineScaleSetTerminationNotificationOutput {
		return v.TerminationNotification
	}).(OrchestratedVirtualMachineScaleSetTerminationNotificationOutput)
}

// The Unique ID for the Orchestrated Virtual Machine Scale Set.
func (o OrchestratedVirtualMachineScaleSetOutput) UniqueId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) pulumi.StringOutput { return v.UniqueId }).(pulumi.StringOutput)
}

// The Base64-Encoded User Data which should be used for this Virtual Machine Scale Set.
func (o OrchestratedVirtualMachineScaleSetOutput) UserDataBase64() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) pulumi.StringPtrOutput { return v.UserDataBase64 }).(pulumi.StringPtrOutput)
}

// Should the Virtual Machines in this Scale Set be strictly evenly distributed across Availability Zones? Defaults to `false`. Changing this forces a new resource to be created.
//
// > **NOTE:** This can only be set to `true` when one or more `zones` are configured.
func (o OrchestratedVirtualMachineScaleSetOutput) ZoneBalance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) pulumi.BoolPtrOutput { return v.ZoneBalance }).(pulumi.BoolPtrOutput)
}

// Specifies a list of Availability Zones in which this Orchestrated Virtual Machine should be located. Changing this forces a new Orchestrated Virtual Machine to be created.
//
// > **NOTE:** Due to a limitation of the Azure API at this time only one Availability Zone can be defined.
func (o OrchestratedVirtualMachineScaleSetOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OrchestratedVirtualMachineScaleSet) pulumi.StringArrayOutput { return v.Zones }).(pulumi.StringArrayOutput)
}

type OrchestratedVirtualMachineScaleSetArrayOutput struct{ *pulumi.OutputState }

func (OrchestratedVirtualMachineScaleSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrchestratedVirtualMachineScaleSet)(nil)).Elem()
}

func (o OrchestratedVirtualMachineScaleSetArrayOutput) ToOrchestratedVirtualMachineScaleSetArrayOutput() OrchestratedVirtualMachineScaleSetArrayOutput {
	return o
}

func (o OrchestratedVirtualMachineScaleSetArrayOutput) ToOrchestratedVirtualMachineScaleSetArrayOutputWithContext(ctx context.Context) OrchestratedVirtualMachineScaleSetArrayOutput {
	return o
}

func (o OrchestratedVirtualMachineScaleSetArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*OrchestratedVirtualMachineScaleSet] {
	return pulumix.Output[[]*OrchestratedVirtualMachineScaleSet]{
		OutputState: o.OutputState,
	}
}

func (o OrchestratedVirtualMachineScaleSetArrayOutput) Index(i pulumi.IntInput) OrchestratedVirtualMachineScaleSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrchestratedVirtualMachineScaleSet {
		return vs[0].([]*OrchestratedVirtualMachineScaleSet)[vs[1].(int)]
	}).(OrchestratedVirtualMachineScaleSetOutput)
}

type OrchestratedVirtualMachineScaleSetMapOutput struct{ *pulumi.OutputState }

func (OrchestratedVirtualMachineScaleSetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrchestratedVirtualMachineScaleSet)(nil)).Elem()
}

func (o OrchestratedVirtualMachineScaleSetMapOutput) ToOrchestratedVirtualMachineScaleSetMapOutput() OrchestratedVirtualMachineScaleSetMapOutput {
	return o
}

func (o OrchestratedVirtualMachineScaleSetMapOutput) ToOrchestratedVirtualMachineScaleSetMapOutputWithContext(ctx context.Context) OrchestratedVirtualMachineScaleSetMapOutput {
	return o
}

func (o OrchestratedVirtualMachineScaleSetMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*OrchestratedVirtualMachineScaleSet] {
	return pulumix.Output[map[string]*OrchestratedVirtualMachineScaleSet]{
		OutputState: o.OutputState,
	}
}

func (o OrchestratedVirtualMachineScaleSetMapOutput) MapIndex(k pulumi.StringInput) OrchestratedVirtualMachineScaleSetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrchestratedVirtualMachineScaleSet {
		return vs[0].(map[string]*OrchestratedVirtualMachineScaleSet)[vs[1].(string)]
	}).(OrchestratedVirtualMachineScaleSetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrchestratedVirtualMachineScaleSetInput)(nil)).Elem(), &OrchestratedVirtualMachineScaleSet{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrchestratedVirtualMachineScaleSetArrayInput)(nil)).Elem(), OrchestratedVirtualMachineScaleSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrchestratedVirtualMachineScaleSetMapInput)(nil)).Elem(), OrchestratedVirtualMachineScaleSetMap{})
	pulumi.RegisterOutputType(OrchestratedVirtualMachineScaleSetOutput{})
	pulumi.RegisterOutputType(OrchestratedVirtualMachineScaleSetArrayOutput{})
	pulumi.RegisterOutputType(OrchestratedVirtualMachineScaleSetMapOutput{})
}
