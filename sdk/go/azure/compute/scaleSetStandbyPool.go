// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Standby Pool for Virtual Machine Scale Sets.
// > **Note:** please follow the prerequisites mentioned in this [article](https://learn.microsoft.com/azure/virtual-machine-scale-sets/standby-pools-create?tabs=portal#prerequisites) before using this resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/compute"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resources"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleOrchestratedVirtualMachineScaleSet, err := compute.NewOrchestratedVirtualMachineScaleSet(ctx, "example", &compute.OrchestratedVirtualMachineScaleSetArgs{
//				Name:                     pulumi.String("example-ovmss"),
//				Location:                 example.Location,
//				ResourceGroupName:        example.Name,
//				PlatformFaultDomainCount: pulumi.Int(1),
//				Zones: pulumi.StringArray{
//					pulumi.String("1"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewScaleSetStandbyPool(ctx, "example", &compute.ScaleSetStandbyPoolArgs{
//				Name:                             pulumi.String("example-spsvmp"),
//				ResourceGroupName:                example.Name,
//				Location:                         pulumi.String("West Europe"),
//				AttachedVirtualMachineScaleSetId: exampleOrchestratedVirtualMachineScaleSet.ID(),
//				VirtualMachineState:              pulumi.String("Running"),
//				ElasticityProfile: &compute.ScaleSetStandbyPoolElasticityProfileArgs{
//					MaxReadyCapacity: pulumi.Int(10),
//					MinReadyCapacity: pulumi.Int(5),
//				},
//				Tags: pulumi.StringMap{
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This resource uses the following Azure API Providers:
//
// * `Microsoft.StandbyPool`: 2025-03-01
//
// ## Import
//
// Standby Pool can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:compute/scaleSetStandbyPool:ScaleSetStandbyPool example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.StandbyPool/standbyVirtualMachinePools/standbyVirtualMachinePool1
// ```
type ScaleSetStandbyPool struct {
	pulumi.CustomResourceState

	// Specifies the fully qualified resource ID of a virtual machine scale set the pool is attached to.
	AttachedVirtualMachineScaleSetId pulumi.StringOutput `pulumi:"attachedVirtualMachineScaleSetId"`
	// An `elasticityProfile` block as defined below.
	ElasticityProfile ScaleSetStandbyPoolElasticityProfileOutput `pulumi:"elasticityProfile"`
	// Specifies the Azure Region where the Standby Pool should exist. Changing this forces a new Standby Pool to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name which should be used for this Standby Pool. Changing this forces a new Standby Pool to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the name of the Resource Group where the Standby Pool should exist. Changing this forces a new Standby Pool to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Standby Pool.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies the desired state of virtual machines in the pool. Possible values are `Running` and `Deallocated`.
	VirtualMachineState pulumi.StringOutput `pulumi:"virtualMachineState"`
}

// NewScaleSetStandbyPool registers a new resource with the given unique name, arguments, and options.
func NewScaleSetStandbyPool(ctx *pulumi.Context,
	name string, args *ScaleSetStandbyPoolArgs, opts ...pulumi.ResourceOption) (*ScaleSetStandbyPool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AttachedVirtualMachineScaleSetId == nil {
		return nil, errors.New("invalid value for required argument 'AttachedVirtualMachineScaleSetId'")
	}
	if args.ElasticityProfile == nil {
		return nil, errors.New("invalid value for required argument 'ElasticityProfile'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.VirtualMachineState == nil {
		return nil, errors.New("invalid value for required argument 'VirtualMachineState'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ScaleSetStandbyPool
	err := ctx.RegisterResource("azure:compute/scaleSetStandbyPool:ScaleSetStandbyPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScaleSetStandbyPool gets an existing ScaleSetStandbyPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScaleSetStandbyPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScaleSetStandbyPoolState, opts ...pulumi.ResourceOption) (*ScaleSetStandbyPool, error) {
	var resource ScaleSetStandbyPool
	err := ctx.ReadResource("azure:compute/scaleSetStandbyPool:ScaleSetStandbyPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScaleSetStandbyPool resources.
type scaleSetStandbyPoolState struct {
	// Specifies the fully qualified resource ID of a virtual machine scale set the pool is attached to.
	AttachedVirtualMachineScaleSetId *string `pulumi:"attachedVirtualMachineScaleSetId"`
	// An `elasticityProfile` block as defined below.
	ElasticityProfile *ScaleSetStandbyPoolElasticityProfile `pulumi:"elasticityProfile"`
	// Specifies the Azure Region where the Standby Pool should exist. Changing this forces a new Standby Pool to be created.
	Location *string `pulumi:"location"`
	// Specifies the name which should be used for this Standby Pool. Changing this forces a new Standby Pool to be created.
	Name *string `pulumi:"name"`
	// Specifies the name of the Resource Group where the Standby Pool should exist. Changing this forces a new Standby Pool to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Standby Pool.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the desired state of virtual machines in the pool. Possible values are `Running` and `Deallocated`.
	VirtualMachineState *string `pulumi:"virtualMachineState"`
}

type ScaleSetStandbyPoolState struct {
	// Specifies the fully qualified resource ID of a virtual machine scale set the pool is attached to.
	AttachedVirtualMachineScaleSetId pulumi.StringPtrInput
	// An `elasticityProfile` block as defined below.
	ElasticityProfile ScaleSetStandbyPoolElasticityProfilePtrInput
	// Specifies the Azure Region where the Standby Pool should exist. Changing this forces a new Standby Pool to be created.
	Location pulumi.StringPtrInput
	// Specifies the name which should be used for this Standby Pool. Changing this forces a new Standby Pool to be created.
	Name pulumi.StringPtrInput
	// Specifies the name of the Resource Group where the Standby Pool should exist. Changing this forces a new Standby Pool to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Standby Pool.
	Tags pulumi.StringMapInput
	// Specifies the desired state of virtual machines in the pool. Possible values are `Running` and `Deallocated`.
	VirtualMachineState pulumi.StringPtrInput
}

func (ScaleSetStandbyPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*scaleSetStandbyPoolState)(nil)).Elem()
}

type scaleSetStandbyPoolArgs struct {
	// Specifies the fully qualified resource ID of a virtual machine scale set the pool is attached to.
	AttachedVirtualMachineScaleSetId string `pulumi:"attachedVirtualMachineScaleSetId"`
	// An `elasticityProfile` block as defined below.
	ElasticityProfile ScaleSetStandbyPoolElasticityProfile `pulumi:"elasticityProfile"`
	// Specifies the Azure Region where the Standby Pool should exist. Changing this forces a new Standby Pool to be created.
	Location *string `pulumi:"location"`
	// Specifies the name which should be used for this Standby Pool. Changing this forces a new Standby Pool to be created.
	Name *string `pulumi:"name"`
	// Specifies the name of the Resource Group where the Standby Pool should exist. Changing this forces a new Standby Pool to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Standby Pool.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the desired state of virtual machines in the pool. Possible values are `Running` and `Deallocated`.
	VirtualMachineState string `pulumi:"virtualMachineState"`
}

// The set of arguments for constructing a ScaleSetStandbyPool resource.
type ScaleSetStandbyPoolArgs struct {
	// Specifies the fully qualified resource ID of a virtual machine scale set the pool is attached to.
	AttachedVirtualMachineScaleSetId pulumi.StringInput
	// An `elasticityProfile` block as defined below.
	ElasticityProfile ScaleSetStandbyPoolElasticityProfileInput
	// Specifies the Azure Region where the Standby Pool should exist. Changing this forces a new Standby Pool to be created.
	Location pulumi.StringPtrInput
	// Specifies the name which should be used for this Standby Pool. Changing this forces a new Standby Pool to be created.
	Name pulumi.StringPtrInput
	// Specifies the name of the Resource Group where the Standby Pool should exist. Changing this forces a new Standby Pool to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags which should be assigned to the Standby Pool.
	Tags pulumi.StringMapInput
	// Specifies the desired state of virtual machines in the pool. Possible values are `Running` and `Deallocated`.
	VirtualMachineState pulumi.StringInput
}

func (ScaleSetStandbyPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scaleSetStandbyPoolArgs)(nil)).Elem()
}

type ScaleSetStandbyPoolInput interface {
	pulumi.Input

	ToScaleSetStandbyPoolOutput() ScaleSetStandbyPoolOutput
	ToScaleSetStandbyPoolOutputWithContext(ctx context.Context) ScaleSetStandbyPoolOutput
}

func (*ScaleSetStandbyPool) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSetStandbyPool)(nil)).Elem()
}

func (i *ScaleSetStandbyPool) ToScaleSetStandbyPoolOutput() ScaleSetStandbyPoolOutput {
	return i.ToScaleSetStandbyPoolOutputWithContext(context.Background())
}

func (i *ScaleSetStandbyPool) ToScaleSetStandbyPoolOutputWithContext(ctx context.Context) ScaleSetStandbyPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSetStandbyPoolOutput)
}

// ScaleSetStandbyPoolArrayInput is an input type that accepts ScaleSetStandbyPoolArray and ScaleSetStandbyPoolArrayOutput values.
// You can construct a concrete instance of `ScaleSetStandbyPoolArrayInput` via:
//
//	ScaleSetStandbyPoolArray{ ScaleSetStandbyPoolArgs{...} }
type ScaleSetStandbyPoolArrayInput interface {
	pulumi.Input

	ToScaleSetStandbyPoolArrayOutput() ScaleSetStandbyPoolArrayOutput
	ToScaleSetStandbyPoolArrayOutputWithContext(context.Context) ScaleSetStandbyPoolArrayOutput
}

type ScaleSetStandbyPoolArray []ScaleSetStandbyPoolInput

func (ScaleSetStandbyPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScaleSetStandbyPool)(nil)).Elem()
}

func (i ScaleSetStandbyPoolArray) ToScaleSetStandbyPoolArrayOutput() ScaleSetStandbyPoolArrayOutput {
	return i.ToScaleSetStandbyPoolArrayOutputWithContext(context.Background())
}

func (i ScaleSetStandbyPoolArray) ToScaleSetStandbyPoolArrayOutputWithContext(ctx context.Context) ScaleSetStandbyPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSetStandbyPoolArrayOutput)
}

// ScaleSetStandbyPoolMapInput is an input type that accepts ScaleSetStandbyPoolMap and ScaleSetStandbyPoolMapOutput values.
// You can construct a concrete instance of `ScaleSetStandbyPoolMapInput` via:
//
//	ScaleSetStandbyPoolMap{ "key": ScaleSetStandbyPoolArgs{...} }
type ScaleSetStandbyPoolMapInput interface {
	pulumi.Input

	ToScaleSetStandbyPoolMapOutput() ScaleSetStandbyPoolMapOutput
	ToScaleSetStandbyPoolMapOutputWithContext(context.Context) ScaleSetStandbyPoolMapOutput
}

type ScaleSetStandbyPoolMap map[string]ScaleSetStandbyPoolInput

func (ScaleSetStandbyPoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScaleSetStandbyPool)(nil)).Elem()
}

func (i ScaleSetStandbyPoolMap) ToScaleSetStandbyPoolMapOutput() ScaleSetStandbyPoolMapOutput {
	return i.ToScaleSetStandbyPoolMapOutputWithContext(context.Background())
}

func (i ScaleSetStandbyPoolMap) ToScaleSetStandbyPoolMapOutputWithContext(ctx context.Context) ScaleSetStandbyPoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSetStandbyPoolMapOutput)
}

type ScaleSetStandbyPoolOutput struct{ *pulumi.OutputState }

func (ScaleSetStandbyPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSetStandbyPool)(nil)).Elem()
}

func (o ScaleSetStandbyPoolOutput) ToScaleSetStandbyPoolOutput() ScaleSetStandbyPoolOutput {
	return o
}

func (o ScaleSetStandbyPoolOutput) ToScaleSetStandbyPoolOutputWithContext(ctx context.Context) ScaleSetStandbyPoolOutput {
	return o
}

// Specifies the fully qualified resource ID of a virtual machine scale set the pool is attached to.
func (o ScaleSetStandbyPoolOutput) AttachedVirtualMachineScaleSetId() pulumi.StringOutput {
	return o.ApplyT(func(v *ScaleSetStandbyPool) pulumi.StringOutput { return v.AttachedVirtualMachineScaleSetId }).(pulumi.StringOutput)
}

// An `elasticityProfile` block as defined below.
func (o ScaleSetStandbyPoolOutput) ElasticityProfile() ScaleSetStandbyPoolElasticityProfileOutput {
	return o.ApplyT(func(v *ScaleSetStandbyPool) ScaleSetStandbyPoolElasticityProfileOutput { return v.ElasticityProfile }).(ScaleSetStandbyPoolElasticityProfileOutput)
}

// Specifies the Azure Region where the Standby Pool should exist. Changing this forces a new Standby Pool to be created.
func (o ScaleSetStandbyPoolOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ScaleSetStandbyPool) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name which should be used for this Standby Pool. Changing this forces a new Standby Pool to be created.
func (o ScaleSetStandbyPoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ScaleSetStandbyPool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the name of the Resource Group where the Standby Pool should exist. Changing this forces a new Standby Pool to be created.
func (o ScaleSetStandbyPoolOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ScaleSetStandbyPool) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the Standby Pool.
func (o ScaleSetStandbyPoolOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ScaleSetStandbyPool) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the desired state of virtual machines in the pool. Possible values are `Running` and `Deallocated`.
func (o ScaleSetStandbyPoolOutput) VirtualMachineState() pulumi.StringOutput {
	return o.ApplyT(func(v *ScaleSetStandbyPool) pulumi.StringOutput { return v.VirtualMachineState }).(pulumi.StringOutput)
}

type ScaleSetStandbyPoolArrayOutput struct{ *pulumi.OutputState }

func (ScaleSetStandbyPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScaleSetStandbyPool)(nil)).Elem()
}

func (o ScaleSetStandbyPoolArrayOutput) ToScaleSetStandbyPoolArrayOutput() ScaleSetStandbyPoolArrayOutput {
	return o
}

func (o ScaleSetStandbyPoolArrayOutput) ToScaleSetStandbyPoolArrayOutputWithContext(ctx context.Context) ScaleSetStandbyPoolArrayOutput {
	return o
}

func (o ScaleSetStandbyPoolArrayOutput) Index(i pulumi.IntInput) ScaleSetStandbyPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ScaleSetStandbyPool {
		return vs[0].([]*ScaleSetStandbyPool)[vs[1].(int)]
	}).(ScaleSetStandbyPoolOutput)
}

type ScaleSetStandbyPoolMapOutput struct{ *pulumi.OutputState }

func (ScaleSetStandbyPoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScaleSetStandbyPool)(nil)).Elem()
}

func (o ScaleSetStandbyPoolMapOutput) ToScaleSetStandbyPoolMapOutput() ScaleSetStandbyPoolMapOutput {
	return o
}

func (o ScaleSetStandbyPoolMapOutput) ToScaleSetStandbyPoolMapOutputWithContext(ctx context.Context) ScaleSetStandbyPoolMapOutput {
	return o
}

func (o ScaleSetStandbyPoolMapOutput) MapIndex(k pulumi.StringInput) ScaleSetStandbyPoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ScaleSetStandbyPool {
		return vs[0].(map[string]*ScaleSetStandbyPool)[vs[1].(string)]
	}).(ScaleSetStandbyPoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleSetStandbyPoolInput)(nil)).Elem(), &ScaleSetStandbyPool{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleSetStandbyPoolArrayInput)(nil)).Elem(), ScaleSetStandbyPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleSetStandbyPoolMapInput)(nil)).Elem(), ScaleSetStandbyPoolMap{})
	pulumi.RegisterOutputType(ScaleSetStandbyPoolOutput{})
	pulumi.RegisterOutputType(ScaleSetStandbyPoolArrayOutput{})
	pulumi.RegisterOutputType(ScaleSetStandbyPoolMapOutput{})
}
