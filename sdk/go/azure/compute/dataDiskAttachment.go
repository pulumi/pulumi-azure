// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages attaching a Disk to a Virtual Machine.
//
// > **NOTE:** Data Disks can be attached either directly on the `compute.VirtualMachine` resource, or using the `compute.DataDiskAttachment` resource - but the two cannot be used together. If both are used against the same Virtual Machine, spurious changes will occur.
//
// > **Please Note:** only Managed Disks are supported via this separate resource, Unmanaged Disks can be attached using the `storageDataDisk` block in the `compute.VirtualMachine` resource.
//
// ## Import
//
// Virtual Machines Data Disk Attachments can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:compute/dataDiskAttachment:DataDiskAttachment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Compute/virtualMachines/machine1/dataDisks/disk1
//
// ```
type DataDiskAttachment struct {
	pulumi.CustomResourceState

	// Specifies the caching requirements for this Data Disk. Possible values include `None`, `ReadOnly` and `ReadWrite`.
	Caching pulumi.StringOutput `pulumi:"caching"`
	// The Create Option of the Data Disk, such as `Empty` or `Attach`. Defaults to `Attach`. Changing this forces a new resource to be created.
	CreateOption pulumi.StringPtrOutput `pulumi:"createOption"`
	// The Logical Unit Number of the Data Disk, which needs to be unique within the Virtual Machine. Changing this forces a new resource to be created.
	Lun pulumi.IntOutput `pulumi:"lun"`
	// The ID of an existing Managed Disk which should be attached. Changing this forces a new resource to be created.
	ManagedDiskId pulumi.StringOutput `pulumi:"managedDiskId"`
	// The ID of the Virtual Machine to which the Data Disk should be attached. Changing this forces a new resource to be created.
	VirtualMachineId pulumi.StringOutput `pulumi:"virtualMachineId"`
	// Specifies if Write Accelerator is enabled on the disk. This can only be enabled on `Premium_LRS` managed disks with no caching and [M-Series VMs](https://docs.microsoft.com/azure/virtual-machines/workloads/sap/how-to-enable-write-accelerator). Defaults to `false`.
	WriteAcceleratorEnabled pulumi.BoolPtrOutput `pulumi:"writeAcceleratorEnabled"`
}

// NewDataDiskAttachment registers a new resource with the given unique name, arguments, and options.
func NewDataDiskAttachment(ctx *pulumi.Context,
	name string, args *DataDiskAttachmentArgs, opts ...pulumi.ResourceOption) (*DataDiskAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Caching == nil {
		return nil, errors.New("invalid value for required argument 'Caching'")
	}
	if args.Lun == nil {
		return nil, errors.New("invalid value for required argument 'Lun'")
	}
	if args.ManagedDiskId == nil {
		return nil, errors.New("invalid value for required argument 'ManagedDiskId'")
	}
	if args.VirtualMachineId == nil {
		return nil, errors.New("invalid value for required argument 'VirtualMachineId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataDiskAttachment
	err := ctx.RegisterResource("azure:compute/dataDiskAttachment:DataDiskAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataDiskAttachment gets an existing DataDiskAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataDiskAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataDiskAttachmentState, opts ...pulumi.ResourceOption) (*DataDiskAttachment, error) {
	var resource DataDiskAttachment
	err := ctx.ReadResource("azure:compute/dataDiskAttachment:DataDiskAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataDiskAttachment resources.
type dataDiskAttachmentState struct {
	// Specifies the caching requirements for this Data Disk. Possible values include `None`, `ReadOnly` and `ReadWrite`.
	Caching *string `pulumi:"caching"`
	// The Create Option of the Data Disk, such as `Empty` or `Attach`. Defaults to `Attach`. Changing this forces a new resource to be created.
	CreateOption *string `pulumi:"createOption"`
	// The Logical Unit Number of the Data Disk, which needs to be unique within the Virtual Machine. Changing this forces a new resource to be created.
	Lun *int `pulumi:"lun"`
	// The ID of an existing Managed Disk which should be attached. Changing this forces a new resource to be created.
	ManagedDiskId *string `pulumi:"managedDiskId"`
	// The ID of the Virtual Machine to which the Data Disk should be attached. Changing this forces a new resource to be created.
	VirtualMachineId *string `pulumi:"virtualMachineId"`
	// Specifies if Write Accelerator is enabled on the disk. This can only be enabled on `Premium_LRS` managed disks with no caching and [M-Series VMs](https://docs.microsoft.com/azure/virtual-machines/workloads/sap/how-to-enable-write-accelerator). Defaults to `false`.
	WriteAcceleratorEnabled *bool `pulumi:"writeAcceleratorEnabled"`
}

type DataDiskAttachmentState struct {
	// Specifies the caching requirements for this Data Disk. Possible values include `None`, `ReadOnly` and `ReadWrite`.
	Caching pulumi.StringPtrInput
	// The Create Option of the Data Disk, such as `Empty` or `Attach`. Defaults to `Attach`. Changing this forces a new resource to be created.
	CreateOption pulumi.StringPtrInput
	// The Logical Unit Number of the Data Disk, which needs to be unique within the Virtual Machine. Changing this forces a new resource to be created.
	Lun pulumi.IntPtrInput
	// The ID of an existing Managed Disk which should be attached. Changing this forces a new resource to be created.
	ManagedDiskId pulumi.StringPtrInput
	// The ID of the Virtual Machine to which the Data Disk should be attached. Changing this forces a new resource to be created.
	VirtualMachineId pulumi.StringPtrInput
	// Specifies if Write Accelerator is enabled on the disk. This can only be enabled on `Premium_LRS` managed disks with no caching and [M-Series VMs](https://docs.microsoft.com/azure/virtual-machines/workloads/sap/how-to-enable-write-accelerator). Defaults to `false`.
	WriteAcceleratorEnabled pulumi.BoolPtrInput
}

func (DataDiskAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataDiskAttachmentState)(nil)).Elem()
}

type dataDiskAttachmentArgs struct {
	// Specifies the caching requirements for this Data Disk. Possible values include `None`, `ReadOnly` and `ReadWrite`.
	Caching string `pulumi:"caching"`
	// The Create Option of the Data Disk, such as `Empty` or `Attach`. Defaults to `Attach`. Changing this forces a new resource to be created.
	CreateOption *string `pulumi:"createOption"`
	// The Logical Unit Number of the Data Disk, which needs to be unique within the Virtual Machine. Changing this forces a new resource to be created.
	Lun int `pulumi:"lun"`
	// The ID of an existing Managed Disk which should be attached. Changing this forces a new resource to be created.
	ManagedDiskId string `pulumi:"managedDiskId"`
	// The ID of the Virtual Machine to which the Data Disk should be attached. Changing this forces a new resource to be created.
	VirtualMachineId string `pulumi:"virtualMachineId"`
	// Specifies if Write Accelerator is enabled on the disk. This can only be enabled on `Premium_LRS` managed disks with no caching and [M-Series VMs](https://docs.microsoft.com/azure/virtual-machines/workloads/sap/how-to-enable-write-accelerator). Defaults to `false`.
	WriteAcceleratorEnabled *bool `pulumi:"writeAcceleratorEnabled"`
}

// The set of arguments for constructing a DataDiskAttachment resource.
type DataDiskAttachmentArgs struct {
	// Specifies the caching requirements for this Data Disk. Possible values include `None`, `ReadOnly` and `ReadWrite`.
	Caching pulumi.StringInput
	// The Create Option of the Data Disk, such as `Empty` or `Attach`. Defaults to `Attach`. Changing this forces a new resource to be created.
	CreateOption pulumi.StringPtrInput
	// The Logical Unit Number of the Data Disk, which needs to be unique within the Virtual Machine. Changing this forces a new resource to be created.
	Lun pulumi.IntInput
	// The ID of an existing Managed Disk which should be attached. Changing this forces a new resource to be created.
	ManagedDiskId pulumi.StringInput
	// The ID of the Virtual Machine to which the Data Disk should be attached. Changing this forces a new resource to be created.
	VirtualMachineId pulumi.StringInput
	// Specifies if Write Accelerator is enabled on the disk. This can only be enabled on `Premium_LRS` managed disks with no caching and [M-Series VMs](https://docs.microsoft.com/azure/virtual-machines/workloads/sap/how-to-enable-write-accelerator). Defaults to `false`.
	WriteAcceleratorEnabled pulumi.BoolPtrInput
}

func (DataDiskAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataDiskAttachmentArgs)(nil)).Elem()
}

type DataDiskAttachmentInput interface {
	pulumi.Input

	ToDataDiskAttachmentOutput() DataDiskAttachmentOutput
	ToDataDiskAttachmentOutputWithContext(ctx context.Context) DataDiskAttachmentOutput
}

func (*DataDiskAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**DataDiskAttachment)(nil)).Elem()
}

func (i *DataDiskAttachment) ToDataDiskAttachmentOutput() DataDiskAttachmentOutput {
	return i.ToDataDiskAttachmentOutputWithContext(context.Background())
}

func (i *DataDiskAttachment) ToDataDiskAttachmentOutputWithContext(ctx context.Context) DataDiskAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDiskAttachmentOutput)
}

func (i *DataDiskAttachment) ToOutput(ctx context.Context) pulumix.Output[*DataDiskAttachment] {
	return pulumix.Output[*DataDiskAttachment]{
		OutputState: i.ToDataDiskAttachmentOutputWithContext(ctx).OutputState,
	}
}

// DataDiskAttachmentArrayInput is an input type that accepts DataDiskAttachmentArray and DataDiskAttachmentArrayOutput values.
// You can construct a concrete instance of `DataDiskAttachmentArrayInput` via:
//
//	DataDiskAttachmentArray{ DataDiskAttachmentArgs{...} }
type DataDiskAttachmentArrayInput interface {
	pulumi.Input

	ToDataDiskAttachmentArrayOutput() DataDiskAttachmentArrayOutput
	ToDataDiskAttachmentArrayOutputWithContext(context.Context) DataDiskAttachmentArrayOutput
}

type DataDiskAttachmentArray []DataDiskAttachmentInput

func (DataDiskAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataDiskAttachment)(nil)).Elem()
}

func (i DataDiskAttachmentArray) ToDataDiskAttachmentArrayOutput() DataDiskAttachmentArrayOutput {
	return i.ToDataDiskAttachmentArrayOutputWithContext(context.Background())
}

func (i DataDiskAttachmentArray) ToDataDiskAttachmentArrayOutputWithContext(ctx context.Context) DataDiskAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDiskAttachmentArrayOutput)
}

func (i DataDiskAttachmentArray) ToOutput(ctx context.Context) pulumix.Output[[]*DataDiskAttachment] {
	return pulumix.Output[[]*DataDiskAttachment]{
		OutputState: i.ToDataDiskAttachmentArrayOutputWithContext(ctx).OutputState,
	}
}

// DataDiskAttachmentMapInput is an input type that accepts DataDiskAttachmentMap and DataDiskAttachmentMapOutput values.
// You can construct a concrete instance of `DataDiskAttachmentMapInput` via:
//
//	DataDiskAttachmentMap{ "key": DataDiskAttachmentArgs{...} }
type DataDiskAttachmentMapInput interface {
	pulumi.Input

	ToDataDiskAttachmentMapOutput() DataDiskAttachmentMapOutput
	ToDataDiskAttachmentMapOutputWithContext(context.Context) DataDiskAttachmentMapOutput
}

type DataDiskAttachmentMap map[string]DataDiskAttachmentInput

func (DataDiskAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataDiskAttachment)(nil)).Elem()
}

func (i DataDiskAttachmentMap) ToDataDiskAttachmentMapOutput() DataDiskAttachmentMapOutput {
	return i.ToDataDiskAttachmentMapOutputWithContext(context.Background())
}

func (i DataDiskAttachmentMap) ToDataDiskAttachmentMapOutputWithContext(ctx context.Context) DataDiskAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDiskAttachmentMapOutput)
}

func (i DataDiskAttachmentMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*DataDiskAttachment] {
	return pulumix.Output[map[string]*DataDiskAttachment]{
		OutputState: i.ToDataDiskAttachmentMapOutputWithContext(ctx).OutputState,
	}
}

type DataDiskAttachmentOutput struct{ *pulumi.OutputState }

func (DataDiskAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataDiskAttachment)(nil)).Elem()
}

func (o DataDiskAttachmentOutput) ToDataDiskAttachmentOutput() DataDiskAttachmentOutput {
	return o
}

func (o DataDiskAttachmentOutput) ToDataDiskAttachmentOutputWithContext(ctx context.Context) DataDiskAttachmentOutput {
	return o
}

func (o DataDiskAttachmentOutput) ToOutput(ctx context.Context) pulumix.Output[*DataDiskAttachment] {
	return pulumix.Output[*DataDiskAttachment]{
		OutputState: o.OutputState,
	}
}

// Specifies the caching requirements for this Data Disk. Possible values include `None`, `ReadOnly` and `ReadWrite`.
func (o DataDiskAttachmentOutput) Caching() pulumi.StringOutput {
	return o.ApplyT(func(v *DataDiskAttachment) pulumi.StringOutput { return v.Caching }).(pulumi.StringOutput)
}

// The Create Option of the Data Disk, such as `Empty` or `Attach`. Defaults to `Attach`. Changing this forces a new resource to be created.
func (o DataDiskAttachmentOutput) CreateOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataDiskAttachment) pulumi.StringPtrOutput { return v.CreateOption }).(pulumi.StringPtrOutput)
}

// The Logical Unit Number of the Data Disk, which needs to be unique within the Virtual Machine. Changing this forces a new resource to be created.
func (o DataDiskAttachmentOutput) Lun() pulumi.IntOutput {
	return o.ApplyT(func(v *DataDiskAttachment) pulumi.IntOutput { return v.Lun }).(pulumi.IntOutput)
}

// The ID of an existing Managed Disk which should be attached. Changing this forces a new resource to be created.
func (o DataDiskAttachmentOutput) ManagedDiskId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataDiskAttachment) pulumi.StringOutput { return v.ManagedDiskId }).(pulumi.StringOutput)
}

// The ID of the Virtual Machine to which the Data Disk should be attached. Changing this forces a new resource to be created.
func (o DataDiskAttachmentOutput) VirtualMachineId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataDiskAttachment) pulumi.StringOutput { return v.VirtualMachineId }).(pulumi.StringOutput)
}

// Specifies if Write Accelerator is enabled on the disk. This can only be enabled on `Premium_LRS` managed disks with no caching and [M-Series VMs](https://docs.microsoft.com/azure/virtual-machines/workloads/sap/how-to-enable-write-accelerator). Defaults to `false`.
func (o DataDiskAttachmentOutput) WriteAcceleratorEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataDiskAttachment) pulumi.BoolPtrOutput { return v.WriteAcceleratorEnabled }).(pulumi.BoolPtrOutput)
}

type DataDiskAttachmentArrayOutput struct{ *pulumi.OutputState }

func (DataDiskAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataDiskAttachment)(nil)).Elem()
}

func (o DataDiskAttachmentArrayOutput) ToDataDiskAttachmentArrayOutput() DataDiskAttachmentArrayOutput {
	return o
}

func (o DataDiskAttachmentArrayOutput) ToDataDiskAttachmentArrayOutputWithContext(ctx context.Context) DataDiskAttachmentArrayOutput {
	return o
}

func (o DataDiskAttachmentArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*DataDiskAttachment] {
	return pulumix.Output[[]*DataDiskAttachment]{
		OutputState: o.OutputState,
	}
}

func (o DataDiskAttachmentArrayOutput) Index(i pulumi.IntInput) DataDiskAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataDiskAttachment {
		return vs[0].([]*DataDiskAttachment)[vs[1].(int)]
	}).(DataDiskAttachmentOutput)
}

type DataDiskAttachmentMapOutput struct{ *pulumi.OutputState }

func (DataDiskAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataDiskAttachment)(nil)).Elem()
}

func (o DataDiskAttachmentMapOutput) ToDataDiskAttachmentMapOutput() DataDiskAttachmentMapOutput {
	return o
}

func (o DataDiskAttachmentMapOutput) ToDataDiskAttachmentMapOutputWithContext(ctx context.Context) DataDiskAttachmentMapOutput {
	return o
}

func (o DataDiskAttachmentMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*DataDiskAttachment] {
	return pulumix.Output[map[string]*DataDiskAttachment]{
		OutputState: o.OutputState,
	}
}

func (o DataDiskAttachmentMapOutput) MapIndex(k pulumi.StringInput) DataDiskAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataDiskAttachment {
		return vs[0].(map[string]*DataDiskAttachment)[vs[1].(string)]
	}).(DataDiskAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataDiskAttachmentInput)(nil)).Elem(), &DataDiskAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataDiskAttachmentArrayInput)(nil)).Elem(), DataDiskAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataDiskAttachmentMapInput)(nil)).Elem(), DataDiskAttachmentMap{})
	pulumi.RegisterOutputType(DataDiskAttachmentOutput{})
	pulumi.RegisterOutputType(DataDiskAttachmentArrayOutput{})
	pulumi.RegisterOutputType(DataDiskAttachmentMapOutput{})
}
