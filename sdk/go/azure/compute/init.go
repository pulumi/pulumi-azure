// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "azure:compute/availabilitySet:AvailabilitySet":
		r, err = NewAvailabilitySet(ctx, name, nil, pulumi.URN_(urn))
	case "azure:compute/bastionHost:BastionHost":
		r, err = NewBastionHost(ctx, name, nil, pulumi.URN_(urn))
	case "azure:compute/dataDiskAttachment:DataDiskAttachment":
		r, err = NewDataDiskAttachment(ctx, name, nil, pulumi.URN_(urn))
	case "azure:compute/dedicatedHost:DedicatedHost":
		r, err = NewDedicatedHost(ctx, name, nil, pulumi.URN_(urn))
	case "azure:compute/dedicatedHostGroup:DedicatedHostGroup":
		r, err = NewDedicatedHostGroup(ctx, name, nil, pulumi.URN_(urn))
	case "azure:compute/diskAccess:DiskAccess":
		r, err = NewDiskAccess(ctx, name, nil, pulumi.URN_(urn))
	case "azure:compute/diskEncryptionSet:DiskEncryptionSet":
		r, err = NewDiskEncryptionSet(ctx, name, nil, pulumi.URN_(urn))
	case "azure:compute/extension:Extension":
		r, err = NewExtension(ctx, name, nil, pulumi.URN_(urn))
	case "azure:compute/image:Image":
		r, err = NewImage(ctx, name, nil, pulumi.URN_(urn))
	case "azure:compute/linuxVirtualMachine:LinuxVirtualMachine":
		r, err = NewLinuxVirtualMachine(ctx, name, nil, pulumi.URN_(urn))
	case "azure:compute/linuxVirtualMachineScaleSet:LinuxVirtualMachineScaleSet":
		r, err = NewLinuxVirtualMachineScaleSet(ctx, name, nil, pulumi.URN_(urn))
	case "azure:compute/managedDisk:ManagedDisk":
		r, err = NewManagedDisk(ctx, name, nil, pulumi.URN_(urn))
	case "azure:compute/orchestratedVirtualMachineScaleSet:OrchestratedVirtualMachineScaleSet":
		r, err = NewOrchestratedVirtualMachineScaleSet(ctx, name, nil, pulumi.URN_(urn))
	case "azure:compute/scaleSet:ScaleSet":
		r, err = NewScaleSet(ctx, name, nil, pulumi.URN_(urn))
	case "azure:compute/sharedImage:SharedImage":
		r, err = NewSharedImage(ctx, name, nil, pulumi.URN_(urn))
	case "azure:compute/sharedImageGallery:SharedImageGallery":
		r, err = NewSharedImageGallery(ctx, name, nil, pulumi.URN_(urn))
	case "azure:compute/sharedImageVersion:SharedImageVersion":
		r, err = NewSharedImageVersion(ctx, name, nil, pulumi.URN_(urn))
	case "azure:compute/snapshot:Snapshot":
		r, err = NewSnapshot(ctx, name, nil, pulumi.URN_(urn))
	case "azure:compute/sshPublicKey:SshPublicKey":
		r, err = NewSshPublicKey(ctx, name, nil, pulumi.URN_(urn))
	case "azure:compute/virtualMachine:VirtualMachine":
		r, err = NewVirtualMachine(ctx, name, nil, pulumi.URN_(urn))
	case "azure:compute/virtualMachineScaleSetExtension:VirtualMachineScaleSetExtension":
		r, err = NewVirtualMachineScaleSetExtension(ctx, name, nil, pulumi.URN_(urn))
	case "azure:compute/windowsVirtualMachine:WindowsVirtualMachine":
		r, err = NewWindowsVirtualMachine(ctx, name, nil, pulumi.URN_(urn))
	case "azure:compute/windowsVirtualMachineScaleSet:WindowsVirtualMachineScaleSet":
		r, err = NewWindowsVirtualMachineScaleSet(ctx, name, nil, pulumi.URN_(urn))
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	return
}

func init() {
	version, err := azure.PkgVersion()
	if err != nil {
		fmt.Println("failed to determine package version. defaulting to v1: %v", err)
	}
	pulumi.RegisterResourceModule(
		"azure",
		"compute/availabilitySet",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"compute/bastionHost",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"compute/dataDiskAttachment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"compute/dedicatedHost",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"compute/dedicatedHostGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"compute/diskAccess",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"compute/diskEncryptionSet",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"compute/extension",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"compute/image",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"compute/linuxVirtualMachine",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"compute/linuxVirtualMachineScaleSet",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"compute/managedDisk",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"compute/orchestratedVirtualMachineScaleSet",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"compute/scaleSet",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"compute/sharedImage",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"compute/sharedImageGallery",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"compute/sharedImageVersion",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"compute/snapshot",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"compute/sshPublicKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"compute/virtualMachine",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"compute/virtualMachineScaleSetExtension",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"compute/windowsVirtualMachine",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"compute/windowsVirtualMachineScaleSet",
		&module{version},
	)
}
