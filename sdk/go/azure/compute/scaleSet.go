// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a virtual machine scale set.
//
// ## Example Usage
// ### With Unmanaged Disks
//
// ```go
// package main
//
// import (
//
//	"fmt"
//	"os"
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/compute"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func readFileOrPanic(path string) pulumi.StringPtrInput {
//		data, err := os.ReadFile(path)
//		if err != nil {
//			panic(err.Error())
//		}
//		return pulumi.String(string(data))
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "exampleVirtualNetwork", &network.VirtualNetworkArgs{
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			exampleSubnet, err := network.NewSubnet(ctx, "exampleSubnet", &network.SubnetArgs{
//				ResourceGroupName:  exampleResourceGroup.Name,
//				VirtualNetworkName: exampleVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.0.2.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Location:               exampleResourceGroup.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("LRS"),
//				Tags: pulumi.StringMap{
//					"environment": pulumi.String("staging"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleContainer, err := storage.NewContainer(ctx, "exampleContainer", &storage.ContainerArgs{
//				StorageAccountName:  exampleAccount.Name,
//				ContainerAccessType: pulumi.String("private"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewScaleSet(ctx, "exampleScaleSet", &compute.ScaleSetArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				UpgradePolicyMode: pulumi.String("Manual"),
//				Sku: &compute.ScaleSetSkuArgs{
//					Name:     pulumi.String("Standard_F2"),
//					Tier:     pulumi.String("Standard"),
//					Capacity: pulumi.Int(2),
//				},
//				OsProfile: &compute.ScaleSetOsProfileArgs{
//					ComputerNamePrefix: pulumi.String("testvm"),
//					AdminUsername:      pulumi.String("myadmin"),
//				},
//				OsProfileLinuxConfig: &compute.ScaleSetOsProfileLinuxConfigArgs{
//					DisablePasswordAuthentication: pulumi.Bool(true),
//					SshKeys: compute.ScaleSetOsProfileLinuxConfigSshKeyArray{
//						&compute.ScaleSetOsProfileLinuxConfigSshKeyArgs{
//							Path:    pulumi.String("/home/myadmin/.ssh/authorized_keys"),
//							KeyData: readFileOrPanic("~/.ssh/demo_key.pub"),
//						},
//					},
//				},
//				NetworkProfiles: compute.ScaleSetNetworkProfileArray{
//					&compute.ScaleSetNetworkProfileArgs{
//						Name:    pulumi.String("TestNetworkProfile"),
//						Primary: pulumi.Bool(true),
//						IpConfigurations: compute.ScaleSetNetworkProfileIpConfigurationArray{
//							&compute.ScaleSetNetworkProfileIpConfigurationArgs{
//								Name:     pulumi.String("TestIPConfiguration"),
//								Primary:  pulumi.Bool(true),
//								SubnetId: exampleSubnet.ID(),
//							},
//						},
//					},
//				},
//				StorageProfileOsDisk: &compute.ScaleSetStorageProfileOsDiskArgs{
//					Name:         pulumi.String("osDiskProfile"),
//					Caching:      pulumi.String("ReadWrite"),
//					CreateOption: pulumi.String("FromImage"),
//					VhdContainers: pulumi.StringArray{
//						pulumi.All(exampleAccount.PrimaryBlobEndpoint, exampleContainer.Name).ApplyT(func(_args []interface{}) (string, error) {
//							primaryBlobEndpoint := _args[0].(string)
//							name := _args[1].(string)
//							return fmt.Sprintf("%v%v", primaryBlobEndpoint, name), nil
//						}).(pulumi.StringOutput),
//					},
//				},
//				StorageProfileImageReference: &compute.ScaleSetStorageProfileImageReferenceArgs{
//					Publisher: pulumi.String("Canonical"),
//					Offer:     pulumi.String("UbuntuServer"),
//					Sku:       pulumi.String("16.04-LTS"),
//					Version:   pulumi.String("latest"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Example of storageProfileImageReference with id
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/compute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleImage, err := compute.NewImage(ctx, "exampleImage", nil)
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewScaleSet(ctx, "exampleScaleSet", &compute.ScaleSetArgs{
//				StorageProfileImageReference: &compute.ScaleSetStorageProfileImageReferenceArgs{
//					Id: exampleImage.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Virtual Machine Scale Sets can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:compute/scaleSet:ScaleSet scaleset1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Compute/virtualMachineScaleSets/scaleset1
//
// ```
type ScaleSet struct {
	pulumi.CustomResourceState

	// Automatic OS patches can be applied by Azure to your scaleset. This is particularly useful when `upgradePolicyMode` is set to `Rolling`. Defaults to `false`.
	AutomaticOsUpgrade pulumi.BoolPtrOutput `pulumi:"automaticOsUpgrade"`
	// A boot diagnostics profile block as referenced below.
	BootDiagnostics ScaleSetBootDiagnosticsPtrOutput `pulumi:"bootDiagnostics"`
	// Specifies the eviction policy for Virtual Machines in this Scale Set. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
	EvictionPolicy pulumi.StringPtrOutput `pulumi:"evictionPolicy"`
	// Can be specified multiple times to add extension profiles to the scale set. Each `extension` block supports the fields documented below.
	Extensions ScaleSetExtensionArrayOutput `pulumi:"extensions"`
	// Specifies the identifier for the load balancer health probe. Required when using `Rolling` as your `upgradePolicyMode`.
	HealthProbeId pulumi.StringPtrOutput `pulumi:"healthProbeId"`
	Identity      ScaleSetIdentityOutput `pulumi:"identity"`
	// (Optional, when a Windows machine) Specifies the Windows OS license type. If supplied, the only allowed values are `Windows_Client` and `Windows_Server`.
	LicenseType pulumi.StringOutput `pulumi:"licenseType"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name of the virtual machine scale set resource. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A collection of network profile block as documented below.
	NetworkProfiles ScaleSetNetworkProfileArrayOutput `pulumi:"networkProfiles"`
	// A Virtual Machine OS Profile block as documented below.
	OsProfile ScaleSetOsProfileOutput `pulumi:"osProfile"`
	// A Linux config block as documented below.
	OsProfileLinuxConfig ScaleSetOsProfileLinuxConfigOutput `pulumi:"osProfileLinuxConfig"`
	// A collection of Secret blocks as documented below.
	OsProfileSecrets ScaleSetOsProfileSecretArrayOutput `pulumi:"osProfileSecrets"`
	// A Windows config block as documented below.
	OsProfileWindowsConfig ScaleSetOsProfileWindowsConfigPtrOutput `pulumi:"osProfileWindowsConfig"`
	// Specifies whether the virtual machine scale set should be overprovisioned. Defaults to `true`.
	Overprovision pulumi.BoolPtrOutput `pulumi:"overprovision"`
	// A plan block as documented below.
	Plan ScaleSetPlanPtrOutput `pulumi:"plan"`
	// Specifies the priority for the Virtual Machines in the Scale Set. Possible values are `Low` and `Regular`. Changing this forces a new resource to be created.
	Priority pulumi.StringPtrOutput `pulumi:"priority"`
	// The ID of the Proximity Placement Group to which this Virtual Machine should be assigned. Changing this forces a new resource to be created
	ProximityPlacementGroupId pulumi.StringPtrOutput `pulumi:"proximityPlacementGroupId"`
	// The name of the resource group in which to create the virtual machine scale set. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A `rollingUpgradePolicy` block as defined below. This is only applicable when the `upgradePolicyMode` is `Rolling`.
	RollingUpgradePolicy ScaleSetRollingUpgradePolicyPtrOutput `pulumi:"rollingUpgradePolicy"`
	// Specifies whether the scale set is limited to a single placement group with a maximum size of 100 virtual machines. If set to false, managed disks must be used. Default is true. Changing this forces a new resource to be created. See [documentation](https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-placement-groups) for more information.
	SinglePlacementGroup pulumi.BoolPtrOutput `pulumi:"singlePlacementGroup"`
	// A SKU block as documented below.
	Sku ScaleSetSkuOutput `pulumi:"sku"`
	// A storage profile data disk block as documented below
	StorageProfileDataDisks ScaleSetStorageProfileDataDiskArrayOutput `pulumi:"storageProfileDataDisks"`
	// A storage profile image reference block as documented below.
	StorageProfileImageReference ScaleSetStorageProfileImageReferenceOutput `pulumi:"storageProfileImageReference"`
	// A storage profile os disk block as documented below
	StorageProfileOsDisk ScaleSetStorageProfileOsDiskOutput `pulumi:"storageProfileOsDisk"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies the mode of an upgrade to virtual machines in the scale set. Possible values, `Rolling`, `Manual`, or `Automatic`. When choosing `Rolling`, you will need to set a health probe.
	UpgradePolicyMode pulumi.StringOutput `pulumi:"upgradePolicyMode"`
	// A collection of availability zones to spread the Virtual Machines over. Changing this forces a new resource to be created.
	Zones pulumi.StringArrayOutput `pulumi:"zones"`
}

// NewScaleSet registers a new resource with the given unique name, arguments, and options.
func NewScaleSet(ctx *pulumi.Context,
	name string, args *ScaleSetArgs, opts ...pulumi.ResourceOption) (*ScaleSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkProfiles == nil {
		return nil, errors.New("invalid value for required argument 'NetworkProfiles'")
	}
	if args.OsProfile == nil {
		return nil, errors.New("invalid value for required argument 'OsProfile'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Sku == nil {
		return nil, errors.New("invalid value for required argument 'Sku'")
	}
	if args.StorageProfileOsDisk == nil {
		return nil, errors.New("invalid value for required argument 'StorageProfileOsDisk'")
	}
	if args.UpgradePolicyMode == nil {
		return nil, errors.New("invalid value for required argument 'UpgradePolicyMode'")
	}
	var resource ScaleSet
	err := ctx.RegisterResource("azure:compute/scaleSet:ScaleSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScaleSet gets an existing ScaleSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScaleSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScaleSetState, opts ...pulumi.ResourceOption) (*ScaleSet, error) {
	var resource ScaleSet
	err := ctx.ReadResource("azure:compute/scaleSet:ScaleSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScaleSet resources.
type scaleSetState struct {
	// Automatic OS patches can be applied by Azure to your scaleset. This is particularly useful when `upgradePolicyMode` is set to `Rolling`. Defaults to `false`.
	AutomaticOsUpgrade *bool `pulumi:"automaticOsUpgrade"`
	// A boot diagnostics profile block as referenced below.
	BootDiagnostics *ScaleSetBootDiagnostics `pulumi:"bootDiagnostics"`
	// Specifies the eviction policy for Virtual Machines in this Scale Set. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
	EvictionPolicy *string `pulumi:"evictionPolicy"`
	// Can be specified multiple times to add extension profiles to the scale set. Each `extension` block supports the fields documented below.
	Extensions []ScaleSetExtension `pulumi:"extensions"`
	// Specifies the identifier for the load balancer health probe. Required when using `Rolling` as your `upgradePolicyMode`.
	HealthProbeId *string           `pulumi:"healthProbeId"`
	Identity      *ScaleSetIdentity `pulumi:"identity"`
	// (Optional, when a Windows machine) Specifies the Windows OS license type. If supplied, the only allowed values are `Windows_Client` and `Windows_Server`.
	LicenseType *string `pulumi:"licenseType"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the virtual machine scale set resource. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A collection of network profile block as documented below.
	NetworkProfiles []ScaleSetNetworkProfile `pulumi:"networkProfiles"`
	// A Virtual Machine OS Profile block as documented below.
	OsProfile *ScaleSetOsProfile `pulumi:"osProfile"`
	// A Linux config block as documented below.
	OsProfileLinuxConfig *ScaleSetOsProfileLinuxConfig `pulumi:"osProfileLinuxConfig"`
	// A collection of Secret blocks as documented below.
	OsProfileSecrets []ScaleSetOsProfileSecret `pulumi:"osProfileSecrets"`
	// A Windows config block as documented below.
	OsProfileWindowsConfig *ScaleSetOsProfileWindowsConfig `pulumi:"osProfileWindowsConfig"`
	// Specifies whether the virtual machine scale set should be overprovisioned. Defaults to `true`.
	Overprovision *bool `pulumi:"overprovision"`
	// A plan block as documented below.
	Plan *ScaleSetPlan `pulumi:"plan"`
	// Specifies the priority for the Virtual Machines in the Scale Set. Possible values are `Low` and `Regular`. Changing this forces a new resource to be created.
	Priority *string `pulumi:"priority"`
	// The ID of the Proximity Placement Group to which this Virtual Machine should be assigned. Changing this forces a new resource to be created
	ProximityPlacementGroupId *string `pulumi:"proximityPlacementGroupId"`
	// The name of the resource group in which to create the virtual machine scale set. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A `rollingUpgradePolicy` block as defined below. This is only applicable when the `upgradePolicyMode` is `Rolling`.
	RollingUpgradePolicy *ScaleSetRollingUpgradePolicy `pulumi:"rollingUpgradePolicy"`
	// Specifies whether the scale set is limited to a single placement group with a maximum size of 100 virtual machines. If set to false, managed disks must be used. Default is true. Changing this forces a new resource to be created. See [documentation](https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-placement-groups) for more information.
	SinglePlacementGroup *bool `pulumi:"singlePlacementGroup"`
	// A SKU block as documented below.
	Sku *ScaleSetSku `pulumi:"sku"`
	// A storage profile data disk block as documented below
	StorageProfileDataDisks []ScaleSetStorageProfileDataDisk `pulumi:"storageProfileDataDisks"`
	// A storage profile image reference block as documented below.
	StorageProfileImageReference *ScaleSetStorageProfileImageReference `pulumi:"storageProfileImageReference"`
	// A storage profile os disk block as documented below
	StorageProfileOsDisk *ScaleSetStorageProfileOsDisk `pulumi:"storageProfileOsDisk"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the mode of an upgrade to virtual machines in the scale set. Possible values, `Rolling`, `Manual`, or `Automatic`. When choosing `Rolling`, you will need to set a health probe.
	UpgradePolicyMode *string `pulumi:"upgradePolicyMode"`
	// A collection of availability zones to spread the Virtual Machines over. Changing this forces a new resource to be created.
	Zones []string `pulumi:"zones"`
}

type ScaleSetState struct {
	// Automatic OS patches can be applied by Azure to your scaleset. This is particularly useful when `upgradePolicyMode` is set to `Rolling`. Defaults to `false`.
	AutomaticOsUpgrade pulumi.BoolPtrInput
	// A boot diagnostics profile block as referenced below.
	BootDiagnostics ScaleSetBootDiagnosticsPtrInput
	// Specifies the eviction policy for Virtual Machines in this Scale Set. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
	EvictionPolicy pulumi.StringPtrInput
	// Can be specified multiple times to add extension profiles to the scale set. Each `extension` block supports the fields documented below.
	Extensions ScaleSetExtensionArrayInput
	// Specifies the identifier for the load balancer health probe. Required when using `Rolling` as your `upgradePolicyMode`.
	HealthProbeId pulumi.StringPtrInput
	Identity      ScaleSetIdentityPtrInput
	// (Optional, when a Windows machine) Specifies the Windows OS license type. If supplied, the only allowed values are `Windows_Client` and `Windows_Server`.
	LicenseType pulumi.StringPtrInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the virtual machine scale set resource. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A collection of network profile block as documented below.
	NetworkProfiles ScaleSetNetworkProfileArrayInput
	// A Virtual Machine OS Profile block as documented below.
	OsProfile ScaleSetOsProfilePtrInput
	// A Linux config block as documented below.
	OsProfileLinuxConfig ScaleSetOsProfileLinuxConfigPtrInput
	// A collection of Secret blocks as documented below.
	OsProfileSecrets ScaleSetOsProfileSecretArrayInput
	// A Windows config block as documented below.
	OsProfileWindowsConfig ScaleSetOsProfileWindowsConfigPtrInput
	// Specifies whether the virtual machine scale set should be overprovisioned. Defaults to `true`.
	Overprovision pulumi.BoolPtrInput
	// A plan block as documented below.
	Plan ScaleSetPlanPtrInput
	// Specifies the priority for the Virtual Machines in the Scale Set. Possible values are `Low` and `Regular`. Changing this forces a new resource to be created.
	Priority pulumi.StringPtrInput
	// The ID of the Proximity Placement Group to which this Virtual Machine should be assigned. Changing this forces a new resource to be created
	ProximityPlacementGroupId pulumi.StringPtrInput
	// The name of the resource group in which to create the virtual machine scale set. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A `rollingUpgradePolicy` block as defined below. This is only applicable when the `upgradePolicyMode` is `Rolling`.
	RollingUpgradePolicy ScaleSetRollingUpgradePolicyPtrInput
	// Specifies whether the scale set is limited to a single placement group with a maximum size of 100 virtual machines. If set to false, managed disks must be used. Default is true. Changing this forces a new resource to be created. See [documentation](https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-placement-groups) for more information.
	SinglePlacementGroup pulumi.BoolPtrInput
	// A SKU block as documented below.
	Sku ScaleSetSkuPtrInput
	// A storage profile data disk block as documented below
	StorageProfileDataDisks ScaleSetStorageProfileDataDiskArrayInput
	// A storage profile image reference block as documented below.
	StorageProfileImageReference ScaleSetStorageProfileImageReferencePtrInput
	// A storage profile os disk block as documented below
	StorageProfileOsDisk ScaleSetStorageProfileOsDiskPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// Specifies the mode of an upgrade to virtual machines in the scale set. Possible values, `Rolling`, `Manual`, or `Automatic`. When choosing `Rolling`, you will need to set a health probe.
	UpgradePolicyMode pulumi.StringPtrInput
	// A collection of availability zones to spread the Virtual Machines over. Changing this forces a new resource to be created.
	Zones pulumi.StringArrayInput
}

func (ScaleSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*scaleSetState)(nil)).Elem()
}

type scaleSetArgs struct {
	// Automatic OS patches can be applied by Azure to your scaleset. This is particularly useful when `upgradePolicyMode` is set to `Rolling`. Defaults to `false`.
	AutomaticOsUpgrade *bool `pulumi:"automaticOsUpgrade"`
	// A boot diagnostics profile block as referenced below.
	BootDiagnostics *ScaleSetBootDiagnostics `pulumi:"bootDiagnostics"`
	// Specifies the eviction policy for Virtual Machines in this Scale Set. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
	EvictionPolicy *string `pulumi:"evictionPolicy"`
	// Can be specified multiple times to add extension profiles to the scale set. Each `extension` block supports the fields documented below.
	Extensions []ScaleSetExtension `pulumi:"extensions"`
	// Specifies the identifier for the load balancer health probe. Required when using `Rolling` as your `upgradePolicyMode`.
	HealthProbeId *string           `pulumi:"healthProbeId"`
	Identity      *ScaleSetIdentity `pulumi:"identity"`
	// (Optional, when a Windows machine) Specifies the Windows OS license type. If supplied, the only allowed values are `Windows_Client` and `Windows_Server`.
	LicenseType *string `pulumi:"licenseType"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the virtual machine scale set resource. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A collection of network profile block as documented below.
	NetworkProfiles []ScaleSetNetworkProfile `pulumi:"networkProfiles"`
	// A Virtual Machine OS Profile block as documented below.
	OsProfile ScaleSetOsProfile `pulumi:"osProfile"`
	// A Linux config block as documented below.
	OsProfileLinuxConfig *ScaleSetOsProfileLinuxConfig `pulumi:"osProfileLinuxConfig"`
	// A collection of Secret blocks as documented below.
	OsProfileSecrets []ScaleSetOsProfileSecret `pulumi:"osProfileSecrets"`
	// A Windows config block as documented below.
	OsProfileWindowsConfig *ScaleSetOsProfileWindowsConfig `pulumi:"osProfileWindowsConfig"`
	// Specifies whether the virtual machine scale set should be overprovisioned. Defaults to `true`.
	Overprovision *bool `pulumi:"overprovision"`
	// A plan block as documented below.
	Plan *ScaleSetPlan `pulumi:"plan"`
	// Specifies the priority for the Virtual Machines in the Scale Set. Possible values are `Low` and `Regular`. Changing this forces a new resource to be created.
	Priority *string `pulumi:"priority"`
	// The ID of the Proximity Placement Group to which this Virtual Machine should be assigned. Changing this forces a new resource to be created
	ProximityPlacementGroupId *string `pulumi:"proximityPlacementGroupId"`
	// The name of the resource group in which to create the virtual machine scale set. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A `rollingUpgradePolicy` block as defined below. This is only applicable when the `upgradePolicyMode` is `Rolling`.
	RollingUpgradePolicy *ScaleSetRollingUpgradePolicy `pulumi:"rollingUpgradePolicy"`
	// Specifies whether the scale set is limited to a single placement group with a maximum size of 100 virtual machines. If set to false, managed disks must be used. Default is true. Changing this forces a new resource to be created. See [documentation](https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-placement-groups) for more information.
	SinglePlacementGroup *bool `pulumi:"singlePlacementGroup"`
	// A SKU block as documented below.
	Sku ScaleSetSku `pulumi:"sku"`
	// A storage profile data disk block as documented below
	StorageProfileDataDisks []ScaleSetStorageProfileDataDisk `pulumi:"storageProfileDataDisks"`
	// A storage profile image reference block as documented below.
	StorageProfileImageReference *ScaleSetStorageProfileImageReference `pulumi:"storageProfileImageReference"`
	// A storage profile os disk block as documented below
	StorageProfileOsDisk ScaleSetStorageProfileOsDisk `pulumi:"storageProfileOsDisk"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the mode of an upgrade to virtual machines in the scale set. Possible values, `Rolling`, `Manual`, or `Automatic`. When choosing `Rolling`, you will need to set a health probe.
	UpgradePolicyMode string `pulumi:"upgradePolicyMode"`
	// A collection of availability zones to spread the Virtual Machines over. Changing this forces a new resource to be created.
	Zones []string `pulumi:"zones"`
}

// The set of arguments for constructing a ScaleSet resource.
type ScaleSetArgs struct {
	// Automatic OS patches can be applied by Azure to your scaleset. This is particularly useful when `upgradePolicyMode` is set to `Rolling`. Defaults to `false`.
	AutomaticOsUpgrade pulumi.BoolPtrInput
	// A boot diagnostics profile block as referenced below.
	BootDiagnostics ScaleSetBootDiagnosticsPtrInput
	// Specifies the eviction policy for Virtual Machines in this Scale Set. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
	EvictionPolicy pulumi.StringPtrInput
	// Can be specified multiple times to add extension profiles to the scale set. Each `extension` block supports the fields documented below.
	Extensions ScaleSetExtensionArrayInput
	// Specifies the identifier for the load balancer health probe. Required when using `Rolling` as your `upgradePolicyMode`.
	HealthProbeId pulumi.StringPtrInput
	Identity      ScaleSetIdentityPtrInput
	// (Optional, when a Windows machine) Specifies the Windows OS license type. If supplied, the only allowed values are `Windows_Client` and `Windows_Server`.
	LicenseType pulumi.StringPtrInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the virtual machine scale set resource. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A collection of network profile block as documented below.
	NetworkProfiles ScaleSetNetworkProfileArrayInput
	// A Virtual Machine OS Profile block as documented below.
	OsProfile ScaleSetOsProfileInput
	// A Linux config block as documented below.
	OsProfileLinuxConfig ScaleSetOsProfileLinuxConfigPtrInput
	// A collection of Secret blocks as documented below.
	OsProfileSecrets ScaleSetOsProfileSecretArrayInput
	// A Windows config block as documented below.
	OsProfileWindowsConfig ScaleSetOsProfileWindowsConfigPtrInput
	// Specifies whether the virtual machine scale set should be overprovisioned. Defaults to `true`.
	Overprovision pulumi.BoolPtrInput
	// A plan block as documented below.
	Plan ScaleSetPlanPtrInput
	// Specifies the priority for the Virtual Machines in the Scale Set. Possible values are `Low` and `Regular`. Changing this forces a new resource to be created.
	Priority pulumi.StringPtrInput
	// The ID of the Proximity Placement Group to which this Virtual Machine should be assigned. Changing this forces a new resource to be created
	ProximityPlacementGroupId pulumi.StringPtrInput
	// The name of the resource group in which to create the virtual machine scale set. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A `rollingUpgradePolicy` block as defined below. This is only applicable when the `upgradePolicyMode` is `Rolling`.
	RollingUpgradePolicy ScaleSetRollingUpgradePolicyPtrInput
	// Specifies whether the scale set is limited to a single placement group with a maximum size of 100 virtual machines. If set to false, managed disks must be used. Default is true. Changing this forces a new resource to be created. See [documentation](https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-placement-groups) for more information.
	SinglePlacementGroup pulumi.BoolPtrInput
	// A SKU block as documented below.
	Sku ScaleSetSkuInput
	// A storage profile data disk block as documented below
	StorageProfileDataDisks ScaleSetStorageProfileDataDiskArrayInput
	// A storage profile image reference block as documented below.
	StorageProfileImageReference ScaleSetStorageProfileImageReferencePtrInput
	// A storage profile os disk block as documented below
	StorageProfileOsDisk ScaleSetStorageProfileOsDiskInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// Specifies the mode of an upgrade to virtual machines in the scale set. Possible values, `Rolling`, `Manual`, or `Automatic`. When choosing `Rolling`, you will need to set a health probe.
	UpgradePolicyMode pulumi.StringInput
	// A collection of availability zones to spread the Virtual Machines over. Changing this forces a new resource to be created.
	Zones pulumi.StringArrayInput
}

func (ScaleSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scaleSetArgs)(nil)).Elem()
}

type ScaleSetInput interface {
	pulumi.Input

	ToScaleSetOutput() ScaleSetOutput
	ToScaleSetOutputWithContext(ctx context.Context) ScaleSetOutput
}

func (*ScaleSet) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSet)(nil)).Elem()
}

func (i *ScaleSet) ToScaleSetOutput() ScaleSetOutput {
	return i.ToScaleSetOutputWithContext(context.Background())
}

func (i *ScaleSet) ToScaleSetOutputWithContext(ctx context.Context) ScaleSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSetOutput)
}

// ScaleSetArrayInput is an input type that accepts ScaleSetArray and ScaleSetArrayOutput values.
// You can construct a concrete instance of `ScaleSetArrayInput` via:
//
//	ScaleSetArray{ ScaleSetArgs{...} }
type ScaleSetArrayInput interface {
	pulumi.Input

	ToScaleSetArrayOutput() ScaleSetArrayOutput
	ToScaleSetArrayOutputWithContext(context.Context) ScaleSetArrayOutput
}

type ScaleSetArray []ScaleSetInput

func (ScaleSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScaleSet)(nil)).Elem()
}

func (i ScaleSetArray) ToScaleSetArrayOutput() ScaleSetArrayOutput {
	return i.ToScaleSetArrayOutputWithContext(context.Background())
}

func (i ScaleSetArray) ToScaleSetArrayOutputWithContext(ctx context.Context) ScaleSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSetArrayOutput)
}

// ScaleSetMapInput is an input type that accepts ScaleSetMap and ScaleSetMapOutput values.
// You can construct a concrete instance of `ScaleSetMapInput` via:
//
//	ScaleSetMap{ "key": ScaleSetArgs{...} }
type ScaleSetMapInput interface {
	pulumi.Input

	ToScaleSetMapOutput() ScaleSetMapOutput
	ToScaleSetMapOutputWithContext(context.Context) ScaleSetMapOutput
}

type ScaleSetMap map[string]ScaleSetInput

func (ScaleSetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScaleSet)(nil)).Elem()
}

func (i ScaleSetMap) ToScaleSetMapOutput() ScaleSetMapOutput {
	return i.ToScaleSetMapOutputWithContext(context.Background())
}

func (i ScaleSetMap) ToScaleSetMapOutputWithContext(ctx context.Context) ScaleSetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSetMapOutput)
}

type ScaleSetOutput struct{ *pulumi.OutputState }

func (ScaleSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSet)(nil)).Elem()
}

func (o ScaleSetOutput) ToScaleSetOutput() ScaleSetOutput {
	return o
}

func (o ScaleSetOutput) ToScaleSetOutputWithContext(ctx context.Context) ScaleSetOutput {
	return o
}

// Automatic OS patches can be applied by Azure to your scaleset. This is particularly useful when `upgradePolicyMode` is set to `Rolling`. Defaults to `false`.
func (o ScaleSetOutput) AutomaticOsUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ScaleSet) pulumi.BoolPtrOutput { return v.AutomaticOsUpgrade }).(pulumi.BoolPtrOutput)
}

// A boot diagnostics profile block as referenced below.
func (o ScaleSetOutput) BootDiagnostics() ScaleSetBootDiagnosticsPtrOutput {
	return o.ApplyT(func(v *ScaleSet) ScaleSetBootDiagnosticsPtrOutput { return v.BootDiagnostics }).(ScaleSetBootDiagnosticsPtrOutput)
}

// Specifies the eviction policy for Virtual Machines in this Scale Set. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
func (o ScaleSetOutput) EvictionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleSet) pulumi.StringPtrOutput { return v.EvictionPolicy }).(pulumi.StringPtrOutput)
}

// Can be specified multiple times to add extension profiles to the scale set. Each `extension` block supports the fields documented below.
func (o ScaleSetOutput) Extensions() ScaleSetExtensionArrayOutput {
	return o.ApplyT(func(v *ScaleSet) ScaleSetExtensionArrayOutput { return v.Extensions }).(ScaleSetExtensionArrayOutput)
}

// Specifies the identifier for the load balancer health probe. Required when using `Rolling` as your `upgradePolicyMode`.
func (o ScaleSetOutput) HealthProbeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleSet) pulumi.StringPtrOutput { return v.HealthProbeId }).(pulumi.StringPtrOutput)
}

func (o ScaleSetOutput) Identity() ScaleSetIdentityOutput {
	return o.ApplyT(func(v *ScaleSet) ScaleSetIdentityOutput { return v.Identity }).(ScaleSetIdentityOutput)
}

// (Optional, when a Windows machine) Specifies the Windows OS license type. If supplied, the only allowed values are `Windows_Client` and `Windows_Server`.
func (o ScaleSetOutput) LicenseType() pulumi.StringOutput {
	return o.ApplyT(func(v *ScaleSet) pulumi.StringOutput { return v.LicenseType }).(pulumi.StringOutput)
}

// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
func (o ScaleSetOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ScaleSet) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name of the virtual machine scale set resource. Changing this forces a new resource to be created.
func (o ScaleSetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ScaleSet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A collection of network profile block as documented below.
func (o ScaleSetOutput) NetworkProfiles() ScaleSetNetworkProfileArrayOutput {
	return o.ApplyT(func(v *ScaleSet) ScaleSetNetworkProfileArrayOutput { return v.NetworkProfiles }).(ScaleSetNetworkProfileArrayOutput)
}

// A Virtual Machine OS Profile block as documented below.
func (o ScaleSetOutput) OsProfile() ScaleSetOsProfileOutput {
	return o.ApplyT(func(v *ScaleSet) ScaleSetOsProfileOutput { return v.OsProfile }).(ScaleSetOsProfileOutput)
}

// A Linux config block as documented below.
func (o ScaleSetOutput) OsProfileLinuxConfig() ScaleSetOsProfileLinuxConfigOutput {
	return o.ApplyT(func(v *ScaleSet) ScaleSetOsProfileLinuxConfigOutput { return v.OsProfileLinuxConfig }).(ScaleSetOsProfileLinuxConfigOutput)
}

// A collection of Secret blocks as documented below.
func (o ScaleSetOutput) OsProfileSecrets() ScaleSetOsProfileSecretArrayOutput {
	return o.ApplyT(func(v *ScaleSet) ScaleSetOsProfileSecretArrayOutput { return v.OsProfileSecrets }).(ScaleSetOsProfileSecretArrayOutput)
}

// A Windows config block as documented below.
func (o ScaleSetOutput) OsProfileWindowsConfig() ScaleSetOsProfileWindowsConfigPtrOutput {
	return o.ApplyT(func(v *ScaleSet) ScaleSetOsProfileWindowsConfigPtrOutput { return v.OsProfileWindowsConfig }).(ScaleSetOsProfileWindowsConfigPtrOutput)
}

// Specifies whether the virtual machine scale set should be overprovisioned. Defaults to `true`.
func (o ScaleSetOutput) Overprovision() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ScaleSet) pulumi.BoolPtrOutput { return v.Overprovision }).(pulumi.BoolPtrOutput)
}

// A plan block as documented below.
func (o ScaleSetOutput) Plan() ScaleSetPlanPtrOutput {
	return o.ApplyT(func(v *ScaleSet) ScaleSetPlanPtrOutput { return v.Plan }).(ScaleSetPlanPtrOutput)
}

// Specifies the priority for the Virtual Machines in the Scale Set. Possible values are `Low` and `Regular`. Changing this forces a new resource to be created.
func (o ScaleSetOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleSet) pulumi.StringPtrOutput { return v.Priority }).(pulumi.StringPtrOutput)
}

// The ID of the Proximity Placement Group to which this Virtual Machine should be assigned. Changing this forces a new resource to be created
func (o ScaleSetOutput) ProximityPlacementGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleSet) pulumi.StringPtrOutput { return v.ProximityPlacementGroupId }).(pulumi.StringPtrOutput)
}

// The name of the resource group in which to create the virtual machine scale set. Changing this forces a new resource to be created.
func (o ScaleSetOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ScaleSet) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A `rollingUpgradePolicy` block as defined below. This is only applicable when the `upgradePolicyMode` is `Rolling`.
func (o ScaleSetOutput) RollingUpgradePolicy() ScaleSetRollingUpgradePolicyPtrOutput {
	return o.ApplyT(func(v *ScaleSet) ScaleSetRollingUpgradePolicyPtrOutput { return v.RollingUpgradePolicy }).(ScaleSetRollingUpgradePolicyPtrOutput)
}

// Specifies whether the scale set is limited to a single placement group with a maximum size of 100 virtual machines. If set to false, managed disks must be used. Default is true. Changing this forces a new resource to be created. See [documentation](https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-placement-groups) for more information.
func (o ScaleSetOutput) SinglePlacementGroup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ScaleSet) pulumi.BoolPtrOutput { return v.SinglePlacementGroup }).(pulumi.BoolPtrOutput)
}

// A SKU block as documented below.
func (o ScaleSetOutput) Sku() ScaleSetSkuOutput {
	return o.ApplyT(func(v *ScaleSet) ScaleSetSkuOutput { return v.Sku }).(ScaleSetSkuOutput)
}

// A storage profile data disk block as documented below
func (o ScaleSetOutput) StorageProfileDataDisks() ScaleSetStorageProfileDataDiskArrayOutput {
	return o.ApplyT(func(v *ScaleSet) ScaleSetStorageProfileDataDiskArrayOutput { return v.StorageProfileDataDisks }).(ScaleSetStorageProfileDataDiskArrayOutput)
}

// A storage profile image reference block as documented below.
func (o ScaleSetOutput) StorageProfileImageReference() ScaleSetStorageProfileImageReferenceOutput {
	return o.ApplyT(func(v *ScaleSet) ScaleSetStorageProfileImageReferenceOutput { return v.StorageProfileImageReference }).(ScaleSetStorageProfileImageReferenceOutput)
}

// A storage profile os disk block as documented below
func (o ScaleSetOutput) StorageProfileOsDisk() ScaleSetStorageProfileOsDiskOutput {
	return o.ApplyT(func(v *ScaleSet) ScaleSetStorageProfileOsDiskOutput { return v.StorageProfileOsDisk }).(ScaleSetStorageProfileOsDiskOutput)
}

// A mapping of tags to assign to the resource.
func (o ScaleSetOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ScaleSet) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the mode of an upgrade to virtual machines in the scale set. Possible values, `Rolling`, `Manual`, or `Automatic`. When choosing `Rolling`, you will need to set a health probe.
func (o ScaleSetOutput) UpgradePolicyMode() pulumi.StringOutput {
	return o.ApplyT(func(v *ScaleSet) pulumi.StringOutput { return v.UpgradePolicyMode }).(pulumi.StringOutput)
}

// A collection of availability zones to spread the Virtual Machines over. Changing this forces a new resource to be created.
func (o ScaleSetOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScaleSet) pulumi.StringArrayOutput { return v.Zones }).(pulumi.StringArrayOutput)
}

type ScaleSetArrayOutput struct{ *pulumi.OutputState }

func (ScaleSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScaleSet)(nil)).Elem()
}

func (o ScaleSetArrayOutput) ToScaleSetArrayOutput() ScaleSetArrayOutput {
	return o
}

func (o ScaleSetArrayOutput) ToScaleSetArrayOutputWithContext(ctx context.Context) ScaleSetArrayOutput {
	return o
}

func (o ScaleSetArrayOutput) Index(i pulumi.IntInput) ScaleSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ScaleSet {
		return vs[0].([]*ScaleSet)[vs[1].(int)]
	}).(ScaleSetOutput)
}

type ScaleSetMapOutput struct{ *pulumi.OutputState }

func (ScaleSetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScaleSet)(nil)).Elem()
}

func (o ScaleSetMapOutput) ToScaleSetMapOutput() ScaleSetMapOutput {
	return o
}

func (o ScaleSetMapOutput) ToScaleSetMapOutputWithContext(ctx context.Context) ScaleSetMapOutput {
	return o
}

func (o ScaleSetMapOutput) MapIndex(k pulumi.StringInput) ScaleSetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ScaleSet {
		return vs[0].(map[string]*ScaleSet)[vs[1].(string)]
	}).(ScaleSetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleSetInput)(nil)).Elem(), &ScaleSet{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleSetArrayInput)(nil)).Elem(), ScaleSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleSetMapInput)(nil)).Elem(), ScaleSetMap{})
	pulumi.RegisterOutputType(ScaleSetOutput{})
	pulumi.RegisterOutputType(ScaleSetArrayOutput{})
	pulumi.RegisterOutputType(ScaleSetMapOutput{})
}
