// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Virtual Machine Automanage Configuration Profile Assignment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/automanage"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/compute"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-rg"),
//				Location: pulumi.String("westus"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "example", &network.VirtualNetworkArgs{
//				Name: pulumi.String("examplevnet"),
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//			})
//			if err != nil {
//				return err
//			}
//			exampleSubnet, err := network.NewSubnet(ctx, "example", &network.SubnetArgs{
//				Name:               pulumi.String("internal"),
//				ResourceGroupName:  example.Name,
//				VirtualNetworkName: exampleVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.0.2.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleNetworkInterface, err := network.NewNetworkInterface(ctx, "example", &network.NetworkInterfaceArgs{
//				Name:              pulumi.String("exampleni"),
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//				IpConfigurations: network.NetworkInterfaceIpConfigurationArray{
//					&network.NetworkInterfaceIpConfigurationArgs{
//						Name:                       pulumi.String("internal"),
//						SubnetId:                   exampleSubnet.ID(),
//						PrivateIpAddressAllocation: pulumi.String("Dynamic"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleLinuxVirtualMachine, err := compute.NewLinuxVirtualMachine(ctx, "example", &compute.LinuxVirtualMachineArgs{
//				Name:                          pulumi.String("examplevm"),
//				ResourceGroupName:             example.Name,
//				Location:                      example.Location,
//				Size:                          pulumi.String("Standard_F2"),
//				AdminUsername:                 pulumi.String("adminuser"),
//				AdminPassword:                 pulumi.String("P@$$w0rd1234!"),
//				DisablePasswordAuthentication: pulumi.Bool(false),
//				NetworkInterfaceIds: pulumi.StringArray{
//					exampleNetworkInterface.ID(),
//				},
//				OsDisk: &compute.LinuxVirtualMachineOsDiskArgs{
//					Caching:            pulumi.String("ReadWrite"),
//					StorageAccountType: pulumi.String("Standard_LRS"),
//				},
//				SourceImageReference: &compute.LinuxVirtualMachineSourceImageReferenceArgs{
//					Publisher: pulumi.String("Canonical"),
//					Offer:     pulumi.String("0001-com-ubuntu-server-jammy"),
//					Sku:       pulumi.String("22_04-lts"),
//					Version:   pulumi.String("latest"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleConfiguration, err := automanage.NewConfiguration(ctx, "example", &automanage.ConfigurationArgs{
//				Name:              pulumi.String("exampleconfig"),
//				ResourceGroupName: example.Name,
//				Location:          example.Location,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewAutomanageConfigurationAssignment(ctx, "example", &compute.AutomanageConfigurationAssignmentArgs{
//				VirtualMachineId: exampleLinuxVirtualMachine.ID(),
//				ConfigurationId:  exampleConfiguration.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Virtual Machine Automanage Configuration Profile Assignment can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:compute/automanageConfigurationAssignment:AutomanageConfigurationAssignment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Compute/virtualMachines/vm1/providers/Microsoft.AutoManage/configurationProfileAssignments/default
// ```
type AutomanageConfigurationAssignment struct {
	pulumi.CustomResourceState

	// The ARM resource ID of the Automanage Configuration to assign to the Virtual Machine. Changing this forces a new resource to be created.
	ConfigurationId pulumi.StringOutput `pulumi:"configurationId"`
	// The ARM resource ID of the Virtual Machine to assign the Automanage Configuration to. Changing this forces a new resource to be created.
	VirtualMachineId pulumi.StringOutput `pulumi:"virtualMachineId"`
}

// NewAutomanageConfigurationAssignment registers a new resource with the given unique name, arguments, and options.
func NewAutomanageConfigurationAssignment(ctx *pulumi.Context,
	name string, args *AutomanageConfigurationAssignmentArgs, opts ...pulumi.ResourceOption) (*AutomanageConfigurationAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigurationId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigurationId'")
	}
	if args.VirtualMachineId == nil {
		return nil, errors.New("invalid value for required argument 'VirtualMachineId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AutomanageConfigurationAssignment
	err := ctx.RegisterResource("azure:compute/automanageConfigurationAssignment:AutomanageConfigurationAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAutomanageConfigurationAssignment gets an existing AutomanageConfigurationAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAutomanageConfigurationAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AutomanageConfigurationAssignmentState, opts ...pulumi.ResourceOption) (*AutomanageConfigurationAssignment, error) {
	var resource AutomanageConfigurationAssignment
	err := ctx.ReadResource("azure:compute/automanageConfigurationAssignment:AutomanageConfigurationAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AutomanageConfigurationAssignment resources.
type automanageConfigurationAssignmentState struct {
	// The ARM resource ID of the Automanage Configuration to assign to the Virtual Machine. Changing this forces a new resource to be created.
	ConfigurationId *string `pulumi:"configurationId"`
	// The ARM resource ID of the Virtual Machine to assign the Automanage Configuration to. Changing this forces a new resource to be created.
	VirtualMachineId *string `pulumi:"virtualMachineId"`
}

type AutomanageConfigurationAssignmentState struct {
	// The ARM resource ID of the Automanage Configuration to assign to the Virtual Machine. Changing this forces a new resource to be created.
	ConfigurationId pulumi.StringPtrInput
	// The ARM resource ID of the Virtual Machine to assign the Automanage Configuration to. Changing this forces a new resource to be created.
	VirtualMachineId pulumi.StringPtrInput
}

func (AutomanageConfigurationAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*automanageConfigurationAssignmentState)(nil)).Elem()
}

type automanageConfigurationAssignmentArgs struct {
	// The ARM resource ID of the Automanage Configuration to assign to the Virtual Machine. Changing this forces a new resource to be created.
	ConfigurationId string `pulumi:"configurationId"`
	// The ARM resource ID of the Virtual Machine to assign the Automanage Configuration to. Changing this forces a new resource to be created.
	VirtualMachineId string `pulumi:"virtualMachineId"`
}

// The set of arguments for constructing a AutomanageConfigurationAssignment resource.
type AutomanageConfigurationAssignmentArgs struct {
	// The ARM resource ID of the Automanage Configuration to assign to the Virtual Machine. Changing this forces a new resource to be created.
	ConfigurationId pulumi.StringInput
	// The ARM resource ID of the Virtual Machine to assign the Automanage Configuration to. Changing this forces a new resource to be created.
	VirtualMachineId pulumi.StringInput
}

func (AutomanageConfigurationAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*automanageConfigurationAssignmentArgs)(nil)).Elem()
}

type AutomanageConfigurationAssignmentInput interface {
	pulumi.Input

	ToAutomanageConfigurationAssignmentOutput() AutomanageConfigurationAssignmentOutput
	ToAutomanageConfigurationAssignmentOutputWithContext(ctx context.Context) AutomanageConfigurationAssignmentOutput
}

func (*AutomanageConfigurationAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((**AutomanageConfigurationAssignment)(nil)).Elem()
}

func (i *AutomanageConfigurationAssignment) ToAutomanageConfigurationAssignmentOutput() AutomanageConfigurationAssignmentOutput {
	return i.ToAutomanageConfigurationAssignmentOutputWithContext(context.Background())
}

func (i *AutomanageConfigurationAssignment) ToAutomanageConfigurationAssignmentOutputWithContext(ctx context.Context) AutomanageConfigurationAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomanageConfigurationAssignmentOutput)
}

// AutomanageConfigurationAssignmentArrayInput is an input type that accepts AutomanageConfigurationAssignmentArray and AutomanageConfigurationAssignmentArrayOutput values.
// You can construct a concrete instance of `AutomanageConfigurationAssignmentArrayInput` via:
//
//	AutomanageConfigurationAssignmentArray{ AutomanageConfigurationAssignmentArgs{...} }
type AutomanageConfigurationAssignmentArrayInput interface {
	pulumi.Input

	ToAutomanageConfigurationAssignmentArrayOutput() AutomanageConfigurationAssignmentArrayOutput
	ToAutomanageConfigurationAssignmentArrayOutputWithContext(context.Context) AutomanageConfigurationAssignmentArrayOutput
}

type AutomanageConfigurationAssignmentArray []AutomanageConfigurationAssignmentInput

func (AutomanageConfigurationAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AutomanageConfigurationAssignment)(nil)).Elem()
}

func (i AutomanageConfigurationAssignmentArray) ToAutomanageConfigurationAssignmentArrayOutput() AutomanageConfigurationAssignmentArrayOutput {
	return i.ToAutomanageConfigurationAssignmentArrayOutputWithContext(context.Background())
}

func (i AutomanageConfigurationAssignmentArray) ToAutomanageConfigurationAssignmentArrayOutputWithContext(ctx context.Context) AutomanageConfigurationAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomanageConfigurationAssignmentArrayOutput)
}

// AutomanageConfigurationAssignmentMapInput is an input type that accepts AutomanageConfigurationAssignmentMap and AutomanageConfigurationAssignmentMapOutput values.
// You can construct a concrete instance of `AutomanageConfigurationAssignmentMapInput` via:
//
//	AutomanageConfigurationAssignmentMap{ "key": AutomanageConfigurationAssignmentArgs{...} }
type AutomanageConfigurationAssignmentMapInput interface {
	pulumi.Input

	ToAutomanageConfigurationAssignmentMapOutput() AutomanageConfigurationAssignmentMapOutput
	ToAutomanageConfigurationAssignmentMapOutputWithContext(context.Context) AutomanageConfigurationAssignmentMapOutput
}

type AutomanageConfigurationAssignmentMap map[string]AutomanageConfigurationAssignmentInput

func (AutomanageConfigurationAssignmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AutomanageConfigurationAssignment)(nil)).Elem()
}

func (i AutomanageConfigurationAssignmentMap) ToAutomanageConfigurationAssignmentMapOutput() AutomanageConfigurationAssignmentMapOutput {
	return i.ToAutomanageConfigurationAssignmentMapOutputWithContext(context.Background())
}

func (i AutomanageConfigurationAssignmentMap) ToAutomanageConfigurationAssignmentMapOutputWithContext(ctx context.Context) AutomanageConfigurationAssignmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomanageConfigurationAssignmentMapOutput)
}

type AutomanageConfigurationAssignmentOutput struct{ *pulumi.OutputState }

func (AutomanageConfigurationAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutomanageConfigurationAssignment)(nil)).Elem()
}

func (o AutomanageConfigurationAssignmentOutput) ToAutomanageConfigurationAssignmentOutput() AutomanageConfigurationAssignmentOutput {
	return o
}

func (o AutomanageConfigurationAssignmentOutput) ToAutomanageConfigurationAssignmentOutputWithContext(ctx context.Context) AutomanageConfigurationAssignmentOutput {
	return o
}

// The ARM resource ID of the Automanage Configuration to assign to the Virtual Machine. Changing this forces a new resource to be created.
func (o AutomanageConfigurationAssignmentOutput) ConfigurationId() pulumi.StringOutput {
	return o.ApplyT(func(v *AutomanageConfigurationAssignment) pulumi.StringOutput { return v.ConfigurationId }).(pulumi.StringOutput)
}

// The ARM resource ID of the Virtual Machine to assign the Automanage Configuration to. Changing this forces a new resource to be created.
func (o AutomanageConfigurationAssignmentOutput) VirtualMachineId() pulumi.StringOutput {
	return o.ApplyT(func(v *AutomanageConfigurationAssignment) pulumi.StringOutput { return v.VirtualMachineId }).(pulumi.StringOutput)
}

type AutomanageConfigurationAssignmentArrayOutput struct{ *pulumi.OutputState }

func (AutomanageConfigurationAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AutomanageConfigurationAssignment)(nil)).Elem()
}

func (o AutomanageConfigurationAssignmentArrayOutput) ToAutomanageConfigurationAssignmentArrayOutput() AutomanageConfigurationAssignmentArrayOutput {
	return o
}

func (o AutomanageConfigurationAssignmentArrayOutput) ToAutomanageConfigurationAssignmentArrayOutputWithContext(ctx context.Context) AutomanageConfigurationAssignmentArrayOutput {
	return o
}

func (o AutomanageConfigurationAssignmentArrayOutput) Index(i pulumi.IntInput) AutomanageConfigurationAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AutomanageConfigurationAssignment {
		return vs[0].([]*AutomanageConfigurationAssignment)[vs[1].(int)]
	}).(AutomanageConfigurationAssignmentOutput)
}

type AutomanageConfigurationAssignmentMapOutput struct{ *pulumi.OutputState }

func (AutomanageConfigurationAssignmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AutomanageConfigurationAssignment)(nil)).Elem()
}

func (o AutomanageConfigurationAssignmentMapOutput) ToAutomanageConfigurationAssignmentMapOutput() AutomanageConfigurationAssignmentMapOutput {
	return o
}

func (o AutomanageConfigurationAssignmentMapOutput) ToAutomanageConfigurationAssignmentMapOutputWithContext(ctx context.Context) AutomanageConfigurationAssignmentMapOutput {
	return o
}

func (o AutomanageConfigurationAssignmentMapOutput) MapIndex(k pulumi.StringInput) AutomanageConfigurationAssignmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AutomanageConfigurationAssignment {
		return vs[0].(map[string]*AutomanageConfigurationAssignment)[vs[1].(string)]
	}).(AutomanageConfigurationAssignmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AutomanageConfigurationAssignmentInput)(nil)).Elem(), &AutomanageConfigurationAssignment{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutomanageConfigurationAssignmentArrayInput)(nil)).Elem(), AutomanageConfigurationAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutomanageConfigurationAssignmentMapInput)(nil)).Elem(), AutomanageConfigurationAssignmentMap{})
	pulumi.RegisterOutputType(AutomanageConfigurationAssignmentOutput{})
	pulumi.RegisterOutputType(AutomanageConfigurationAssignmentArrayOutput{})
	pulumi.RegisterOutputType(AutomanageConfigurationAssignmentMapOutput{})
}
