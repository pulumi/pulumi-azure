// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Virtual Machine.
//
// ## Disclaimers
//
// > **Note:** The `compute.VirtualMachine` resource has been superseded by the `compute.LinuxVirtualMachine` and `compute.WindowsVirtualMachine` resources. The existing `compute.VirtualMachine` resource will continue to be available throughout the 2.x releases however is in a feature-frozen state to maintain compatibility - new functionality will instead be added to the `compute.LinuxVirtualMachine` and `compute.WindowsVirtualMachine` resources.
//
// > **Note:** Data Disks can be attached either directly on the `compute.VirtualMachine` resource, or using the `compute.DataDiskAttachment` resource - but the two cannot be used together. If both are used against the same Virtual Machine, spurious changes will occur.
//
// ## Example Usage
// ### From An Azure Platform Image)
//
// This example provisions a Virtual Machine with Managed Disks.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/compute"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			prefix := "tfvmex"
//			if param := cfg.Get("prefix"); param != "" {
//				prefix = param
//			}
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			mainVirtualNetwork, err := network.NewVirtualNetwork(ctx, "mainVirtualNetwork", &network.VirtualNetworkArgs{
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//			})
//			if err != nil {
//				return err
//			}
//			internal, err := network.NewSubnet(ctx, "internal", &network.SubnetArgs{
//				ResourceGroupName:  example.Name,
//				VirtualNetworkName: mainVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.0.2.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			mainNetworkInterface, err := network.NewNetworkInterface(ctx, "mainNetworkInterface", &network.NetworkInterfaceArgs{
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//				IpConfigurations: network.NetworkInterfaceIpConfigurationArray{
//					&network.NetworkInterfaceIpConfigurationArgs{
//						Name:                       pulumi.String("testconfiguration1"),
//						SubnetId:                   internal.ID(),
//						PrivateIpAddressAllocation: pulumi.String("Dynamic"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewVirtualMachine(ctx, "mainVirtualMachine", &compute.VirtualMachineArgs{
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//				NetworkInterfaceIds: pulumi.StringArray{
//					mainNetworkInterface.ID(),
//				},
//				VmSize: pulumi.String("Standard_DS1_v2"),
//				StorageImageReference: &compute.VirtualMachineStorageImageReferenceArgs{
//					Publisher: pulumi.String("Canonical"),
//					Offer:     pulumi.String("0001-com-ubuntu-server-jammy"),
//					Sku:       pulumi.String("22_04-lts"),
//					Version:   pulumi.String("latest"),
//				},
//				StorageOsDisk: &compute.VirtualMachineStorageOsDiskArgs{
//					Name:            pulumi.String("myosdisk1"),
//					Caching:         pulumi.String("ReadWrite"),
//					CreateOption:    pulumi.String("FromImage"),
//					ManagedDiskType: pulumi.String("Standard_LRS"),
//				},
//				OsProfile: &compute.VirtualMachineOsProfileArgs{
//					ComputerName:  pulumi.String("hostname"),
//					AdminUsername: pulumi.String("testadmin"),
//					AdminPassword: pulumi.String("Password1234!"),
//				},
//				OsProfileLinuxConfig: &compute.VirtualMachineOsProfileLinuxConfigArgs{
//					DisablePasswordAuthentication: pulumi.Bool(false),
//				},
//				Tags: pulumi.StringMap{
//					"environment": pulumi.String("staging"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Virtual Machines can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:compute/virtualMachine:VirtualMachine example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Compute/virtualMachines/machine1
//
// ```
type VirtualMachine struct {
	pulumi.CustomResourceState

	// An `additionalCapabilities` block as defined below.
	AdditionalCapabilities VirtualMachineAdditionalCapabilitiesPtrOutput `pulumi:"additionalCapabilities"`
	// The ID of the Availability Set in which the Virtual Machine should exist. Changing this forces a new resource to be created.
	AvailabilitySetId pulumi.StringOutput `pulumi:"availabilitySetId"`
	// A `bootDiagnostics` block as defined below.
	BootDiagnostics VirtualMachineBootDiagnosticsPtrOutput `pulumi:"bootDiagnostics"`
	// Should the Data Disks (either the Managed Disks / VHD Blobs) be deleted when the Virtual Machine is destroyed? Defaults to `false`.
	//
	// > **Note:** This setting works when instance is deleted via the provider only and don't forget to delete disks manually if you deleted VM manually. It can increase spending.
	DeleteDataDisksOnTermination pulumi.BoolPtrOutput `pulumi:"deleteDataDisksOnTermination"`
	// Should the OS Disk (either the Managed Disk / VHD Blob) be deleted when the Virtual Machine is destroyed? Defaults to `false`.
	//
	// > **Note:** This setting works when instance is deleted via the provider only and don't forget to delete disks manually if you deleted VM manually. It can increase spending.
	DeleteOsDiskOnTermination pulumi.BoolPtrOutput `pulumi:"deleteOsDiskOnTermination"`
	// An `identity` block as defined below.
	Identity VirtualMachineIdentityOutput `pulumi:"identity"`
	// Specifies the BYOL Type for this Virtual Machine. This is only applicable to Windows Virtual Machines. Possible values are `Windows_Client` and `Windows_Server`.
	LicenseType pulumi.StringOutput `pulumi:"licenseType"`
	// Specifies the Azure Region where the Virtual Machine exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name of the Virtual Machine. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of Network Interface IDs which should be associated with the Virtual Machine.
	NetworkInterfaceIds pulumi.StringArrayOutput `pulumi:"networkInterfaceIds"`
	// An `osProfile` block as defined below. Required when `createOption` in the `storageOsDisk` block is set to `FromImage`.
	OsProfile VirtualMachineOsProfilePtrOutput `pulumi:"osProfile"`
	// (Required, when a Linux machine) An `osProfileLinuxConfig` block as defined below.
	OsProfileLinuxConfig VirtualMachineOsProfileLinuxConfigPtrOutput `pulumi:"osProfileLinuxConfig"`
	// One or more `osProfileSecrets` blocks as defined below.
	OsProfileSecrets VirtualMachineOsProfileSecretArrayOutput `pulumi:"osProfileSecrets"`
	// (Required, when a Windows machine) An `osProfileWindowsConfig` block as defined below.
	OsProfileWindowsConfig VirtualMachineOsProfileWindowsConfigPtrOutput `pulumi:"osProfileWindowsConfig"`
	// A `plan` block as defined below.
	Plan VirtualMachinePlanPtrOutput `pulumi:"plan"`
	// The ID of the Network Interface (which must be attached to the Virtual Machine) which should be the Primary Network Interface for this Virtual Machine.
	PrimaryNetworkInterfaceId pulumi.StringPtrOutput `pulumi:"primaryNetworkInterfaceId"`
	// The ID of the Proximity Placement Group to which this Virtual Machine should be assigned. Changing this forces a new resource to be created
	ProximityPlacementGroupId pulumi.StringPtrOutput `pulumi:"proximityPlacementGroupId"`
	// Specifies the name of the Resource Group in which the Virtual Machine should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// One or more `storageDataDisk` blocks as defined below.
	//
	// > **Please Note:** Data Disks can also be attached either using this block or the `compute.DataDiskAttachment` resource - but not both.
	StorageDataDisks VirtualMachineStorageDataDiskArrayOutput `pulumi:"storageDataDisks"`
	// A `storageImageReference` block as defined below. Changing this forces a new resource to be created.
	StorageImageReference VirtualMachineStorageImageReferenceOutput `pulumi:"storageImageReference"`
	// A `storageOsDisk` block as defined below.
	StorageOsDisk VirtualMachineStorageOsDiskOutput `pulumi:"storageOsDisk"`
	// A mapping of tags to assign to the Virtual Machine.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies the [size of the Virtual Machine](https://docs.microsoft.com/azure/virtual-machines/sizes-general). See also [Azure VM Naming Conventions](https://docs.microsoft.com/azure/virtual-machines/vm-naming-conventions).
	VmSize pulumi.StringOutput `pulumi:"vmSize"`
	// A list of a single item of the Availability Zone which the Virtual Machine should be allocated in. Changing this forces a new resource to be created.
	//
	// > **Please Note**: Availability Zones are [only supported in several regions at this time](https://docs.microsoft.com/azure/availability-zones/az-overview).
	//
	// For more information on the different example configurations, please check out the [Azure documentation](https://docs.microsoft.com/en-gb/rest/api/compute/virtualmachines/createorupdate#examples)
	Zones pulumi.StringPtrOutput `pulumi:"zones"`
}

// NewVirtualMachine registers a new resource with the given unique name, arguments, and options.
func NewVirtualMachine(ctx *pulumi.Context,
	name string, args *VirtualMachineArgs, opts ...pulumi.ResourceOption) (*VirtualMachine, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkInterfaceIds == nil {
		return nil, errors.New("invalid value for required argument 'NetworkInterfaceIds'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.StorageOsDisk == nil {
		return nil, errors.New("invalid value for required argument 'StorageOsDisk'")
	}
	if args.VmSize == nil {
		return nil, errors.New("invalid value for required argument 'VmSize'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VirtualMachine
	err := ctx.RegisterResource("azure:compute/virtualMachine:VirtualMachine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualMachine gets an existing VirtualMachine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualMachine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualMachineState, opts ...pulumi.ResourceOption) (*VirtualMachine, error) {
	var resource VirtualMachine
	err := ctx.ReadResource("azure:compute/virtualMachine:VirtualMachine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualMachine resources.
type virtualMachineState struct {
	// An `additionalCapabilities` block as defined below.
	AdditionalCapabilities *VirtualMachineAdditionalCapabilities `pulumi:"additionalCapabilities"`
	// The ID of the Availability Set in which the Virtual Machine should exist. Changing this forces a new resource to be created.
	AvailabilitySetId *string `pulumi:"availabilitySetId"`
	// A `bootDiagnostics` block as defined below.
	BootDiagnostics *VirtualMachineBootDiagnostics `pulumi:"bootDiagnostics"`
	// Should the Data Disks (either the Managed Disks / VHD Blobs) be deleted when the Virtual Machine is destroyed? Defaults to `false`.
	//
	// > **Note:** This setting works when instance is deleted via the provider only and don't forget to delete disks manually if you deleted VM manually. It can increase spending.
	DeleteDataDisksOnTermination *bool `pulumi:"deleteDataDisksOnTermination"`
	// Should the OS Disk (either the Managed Disk / VHD Blob) be deleted when the Virtual Machine is destroyed? Defaults to `false`.
	//
	// > **Note:** This setting works when instance is deleted via the provider only and don't forget to delete disks manually if you deleted VM manually. It can increase spending.
	DeleteOsDiskOnTermination *bool `pulumi:"deleteOsDiskOnTermination"`
	// An `identity` block as defined below.
	Identity *VirtualMachineIdentity `pulumi:"identity"`
	// Specifies the BYOL Type for this Virtual Machine. This is only applicable to Windows Virtual Machines. Possible values are `Windows_Client` and `Windows_Server`.
	LicenseType *string `pulumi:"licenseType"`
	// Specifies the Azure Region where the Virtual Machine exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the Virtual Machine. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A list of Network Interface IDs which should be associated with the Virtual Machine.
	NetworkInterfaceIds []string `pulumi:"networkInterfaceIds"`
	// An `osProfile` block as defined below. Required when `createOption` in the `storageOsDisk` block is set to `FromImage`.
	OsProfile *VirtualMachineOsProfile `pulumi:"osProfile"`
	// (Required, when a Linux machine) An `osProfileLinuxConfig` block as defined below.
	OsProfileLinuxConfig *VirtualMachineOsProfileLinuxConfig `pulumi:"osProfileLinuxConfig"`
	// One or more `osProfileSecrets` blocks as defined below.
	OsProfileSecrets []VirtualMachineOsProfileSecret `pulumi:"osProfileSecrets"`
	// (Required, when a Windows machine) An `osProfileWindowsConfig` block as defined below.
	OsProfileWindowsConfig *VirtualMachineOsProfileWindowsConfig `pulumi:"osProfileWindowsConfig"`
	// A `plan` block as defined below.
	Plan *VirtualMachinePlan `pulumi:"plan"`
	// The ID of the Network Interface (which must be attached to the Virtual Machine) which should be the Primary Network Interface for this Virtual Machine.
	PrimaryNetworkInterfaceId *string `pulumi:"primaryNetworkInterfaceId"`
	// The ID of the Proximity Placement Group to which this Virtual Machine should be assigned. Changing this forces a new resource to be created
	ProximityPlacementGroupId *string `pulumi:"proximityPlacementGroupId"`
	// Specifies the name of the Resource Group in which the Virtual Machine should exist. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// One or more `storageDataDisk` blocks as defined below.
	//
	// > **Please Note:** Data Disks can also be attached either using this block or the `compute.DataDiskAttachment` resource - but not both.
	StorageDataDisks []VirtualMachineStorageDataDisk `pulumi:"storageDataDisks"`
	// A `storageImageReference` block as defined below. Changing this forces a new resource to be created.
	StorageImageReference *VirtualMachineStorageImageReference `pulumi:"storageImageReference"`
	// A `storageOsDisk` block as defined below.
	StorageOsDisk *VirtualMachineStorageOsDisk `pulumi:"storageOsDisk"`
	// A mapping of tags to assign to the Virtual Machine.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the [size of the Virtual Machine](https://docs.microsoft.com/azure/virtual-machines/sizes-general). See also [Azure VM Naming Conventions](https://docs.microsoft.com/azure/virtual-machines/vm-naming-conventions).
	VmSize *string `pulumi:"vmSize"`
	// A list of a single item of the Availability Zone which the Virtual Machine should be allocated in. Changing this forces a new resource to be created.
	//
	// > **Please Note**: Availability Zones are [only supported in several regions at this time](https://docs.microsoft.com/azure/availability-zones/az-overview).
	//
	// For more information on the different example configurations, please check out the [Azure documentation](https://docs.microsoft.com/en-gb/rest/api/compute/virtualmachines/createorupdate#examples)
	Zones *string `pulumi:"zones"`
}

type VirtualMachineState struct {
	// An `additionalCapabilities` block as defined below.
	AdditionalCapabilities VirtualMachineAdditionalCapabilitiesPtrInput
	// The ID of the Availability Set in which the Virtual Machine should exist. Changing this forces a new resource to be created.
	AvailabilitySetId pulumi.StringPtrInput
	// A `bootDiagnostics` block as defined below.
	BootDiagnostics VirtualMachineBootDiagnosticsPtrInput
	// Should the Data Disks (either the Managed Disks / VHD Blobs) be deleted when the Virtual Machine is destroyed? Defaults to `false`.
	//
	// > **Note:** This setting works when instance is deleted via the provider only and don't forget to delete disks manually if you deleted VM manually. It can increase spending.
	DeleteDataDisksOnTermination pulumi.BoolPtrInput
	// Should the OS Disk (either the Managed Disk / VHD Blob) be deleted when the Virtual Machine is destroyed? Defaults to `false`.
	//
	// > **Note:** This setting works when instance is deleted via the provider only and don't forget to delete disks manually if you deleted VM manually. It can increase spending.
	DeleteOsDiskOnTermination pulumi.BoolPtrInput
	// An `identity` block as defined below.
	Identity VirtualMachineIdentityPtrInput
	// Specifies the BYOL Type for this Virtual Machine. This is only applicable to Windows Virtual Machines. Possible values are `Windows_Client` and `Windows_Server`.
	LicenseType pulumi.StringPtrInput
	// Specifies the Azure Region where the Virtual Machine exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the Virtual Machine. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A list of Network Interface IDs which should be associated with the Virtual Machine.
	NetworkInterfaceIds pulumi.StringArrayInput
	// An `osProfile` block as defined below. Required when `createOption` in the `storageOsDisk` block is set to `FromImage`.
	OsProfile VirtualMachineOsProfilePtrInput
	// (Required, when a Linux machine) An `osProfileLinuxConfig` block as defined below.
	OsProfileLinuxConfig VirtualMachineOsProfileLinuxConfigPtrInput
	// One or more `osProfileSecrets` blocks as defined below.
	OsProfileSecrets VirtualMachineOsProfileSecretArrayInput
	// (Required, when a Windows machine) An `osProfileWindowsConfig` block as defined below.
	OsProfileWindowsConfig VirtualMachineOsProfileWindowsConfigPtrInput
	// A `plan` block as defined below.
	Plan VirtualMachinePlanPtrInput
	// The ID of the Network Interface (which must be attached to the Virtual Machine) which should be the Primary Network Interface for this Virtual Machine.
	PrimaryNetworkInterfaceId pulumi.StringPtrInput
	// The ID of the Proximity Placement Group to which this Virtual Machine should be assigned. Changing this forces a new resource to be created
	ProximityPlacementGroupId pulumi.StringPtrInput
	// Specifies the name of the Resource Group in which the Virtual Machine should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// One or more `storageDataDisk` blocks as defined below.
	//
	// > **Please Note:** Data Disks can also be attached either using this block or the `compute.DataDiskAttachment` resource - but not both.
	StorageDataDisks VirtualMachineStorageDataDiskArrayInput
	// A `storageImageReference` block as defined below. Changing this forces a new resource to be created.
	StorageImageReference VirtualMachineStorageImageReferencePtrInput
	// A `storageOsDisk` block as defined below.
	StorageOsDisk VirtualMachineStorageOsDiskPtrInput
	// A mapping of tags to assign to the Virtual Machine.
	Tags pulumi.StringMapInput
	// Specifies the [size of the Virtual Machine](https://docs.microsoft.com/azure/virtual-machines/sizes-general). See also [Azure VM Naming Conventions](https://docs.microsoft.com/azure/virtual-machines/vm-naming-conventions).
	VmSize pulumi.StringPtrInput
	// A list of a single item of the Availability Zone which the Virtual Machine should be allocated in. Changing this forces a new resource to be created.
	//
	// > **Please Note**: Availability Zones are [only supported in several regions at this time](https://docs.microsoft.com/azure/availability-zones/az-overview).
	//
	// For more information on the different example configurations, please check out the [Azure documentation](https://docs.microsoft.com/en-gb/rest/api/compute/virtualmachines/createorupdate#examples)
	Zones pulumi.StringPtrInput
}

func (VirtualMachineState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMachineState)(nil)).Elem()
}

type virtualMachineArgs struct {
	// An `additionalCapabilities` block as defined below.
	AdditionalCapabilities *VirtualMachineAdditionalCapabilities `pulumi:"additionalCapabilities"`
	// The ID of the Availability Set in which the Virtual Machine should exist. Changing this forces a new resource to be created.
	AvailabilitySetId *string `pulumi:"availabilitySetId"`
	// A `bootDiagnostics` block as defined below.
	BootDiagnostics *VirtualMachineBootDiagnostics `pulumi:"bootDiagnostics"`
	// Should the Data Disks (either the Managed Disks / VHD Blobs) be deleted when the Virtual Machine is destroyed? Defaults to `false`.
	//
	// > **Note:** This setting works when instance is deleted via the provider only and don't forget to delete disks manually if you deleted VM manually. It can increase spending.
	DeleteDataDisksOnTermination *bool `pulumi:"deleteDataDisksOnTermination"`
	// Should the OS Disk (either the Managed Disk / VHD Blob) be deleted when the Virtual Machine is destroyed? Defaults to `false`.
	//
	// > **Note:** This setting works when instance is deleted via the provider only and don't forget to delete disks manually if you deleted VM manually. It can increase spending.
	DeleteOsDiskOnTermination *bool `pulumi:"deleteOsDiskOnTermination"`
	// An `identity` block as defined below.
	Identity *VirtualMachineIdentity `pulumi:"identity"`
	// Specifies the BYOL Type for this Virtual Machine. This is only applicable to Windows Virtual Machines. Possible values are `Windows_Client` and `Windows_Server`.
	LicenseType *string `pulumi:"licenseType"`
	// Specifies the Azure Region where the Virtual Machine exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the Virtual Machine. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A list of Network Interface IDs which should be associated with the Virtual Machine.
	NetworkInterfaceIds []string `pulumi:"networkInterfaceIds"`
	// An `osProfile` block as defined below. Required when `createOption` in the `storageOsDisk` block is set to `FromImage`.
	OsProfile *VirtualMachineOsProfile `pulumi:"osProfile"`
	// (Required, when a Linux machine) An `osProfileLinuxConfig` block as defined below.
	OsProfileLinuxConfig *VirtualMachineOsProfileLinuxConfig `pulumi:"osProfileLinuxConfig"`
	// One or more `osProfileSecrets` blocks as defined below.
	OsProfileSecrets []VirtualMachineOsProfileSecret `pulumi:"osProfileSecrets"`
	// (Required, when a Windows machine) An `osProfileWindowsConfig` block as defined below.
	OsProfileWindowsConfig *VirtualMachineOsProfileWindowsConfig `pulumi:"osProfileWindowsConfig"`
	// A `plan` block as defined below.
	Plan *VirtualMachinePlan `pulumi:"plan"`
	// The ID of the Network Interface (which must be attached to the Virtual Machine) which should be the Primary Network Interface for this Virtual Machine.
	PrimaryNetworkInterfaceId *string `pulumi:"primaryNetworkInterfaceId"`
	// The ID of the Proximity Placement Group to which this Virtual Machine should be assigned. Changing this forces a new resource to be created
	ProximityPlacementGroupId *string `pulumi:"proximityPlacementGroupId"`
	// Specifies the name of the Resource Group in which the Virtual Machine should exist. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// One or more `storageDataDisk` blocks as defined below.
	//
	// > **Please Note:** Data Disks can also be attached either using this block or the `compute.DataDiskAttachment` resource - but not both.
	StorageDataDisks []VirtualMachineStorageDataDisk `pulumi:"storageDataDisks"`
	// A `storageImageReference` block as defined below. Changing this forces a new resource to be created.
	StorageImageReference *VirtualMachineStorageImageReference `pulumi:"storageImageReference"`
	// A `storageOsDisk` block as defined below.
	StorageOsDisk VirtualMachineStorageOsDisk `pulumi:"storageOsDisk"`
	// A mapping of tags to assign to the Virtual Machine.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the [size of the Virtual Machine](https://docs.microsoft.com/azure/virtual-machines/sizes-general). See also [Azure VM Naming Conventions](https://docs.microsoft.com/azure/virtual-machines/vm-naming-conventions).
	VmSize string `pulumi:"vmSize"`
	// A list of a single item of the Availability Zone which the Virtual Machine should be allocated in. Changing this forces a new resource to be created.
	//
	// > **Please Note**: Availability Zones are [only supported in several regions at this time](https://docs.microsoft.com/azure/availability-zones/az-overview).
	//
	// For more information on the different example configurations, please check out the [Azure documentation](https://docs.microsoft.com/en-gb/rest/api/compute/virtualmachines/createorupdate#examples)
	Zones *string `pulumi:"zones"`
}

// The set of arguments for constructing a VirtualMachine resource.
type VirtualMachineArgs struct {
	// An `additionalCapabilities` block as defined below.
	AdditionalCapabilities VirtualMachineAdditionalCapabilitiesPtrInput
	// The ID of the Availability Set in which the Virtual Machine should exist. Changing this forces a new resource to be created.
	AvailabilitySetId pulumi.StringPtrInput
	// A `bootDiagnostics` block as defined below.
	BootDiagnostics VirtualMachineBootDiagnosticsPtrInput
	// Should the Data Disks (either the Managed Disks / VHD Blobs) be deleted when the Virtual Machine is destroyed? Defaults to `false`.
	//
	// > **Note:** This setting works when instance is deleted via the provider only and don't forget to delete disks manually if you deleted VM manually. It can increase spending.
	DeleteDataDisksOnTermination pulumi.BoolPtrInput
	// Should the OS Disk (either the Managed Disk / VHD Blob) be deleted when the Virtual Machine is destroyed? Defaults to `false`.
	//
	// > **Note:** This setting works when instance is deleted via the provider only and don't forget to delete disks manually if you deleted VM manually. It can increase spending.
	DeleteOsDiskOnTermination pulumi.BoolPtrInput
	// An `identity` block as defined below.
	Identity VirtualMachineIdentityPtrInput
	// Specifies the BYOL Type for this Virtual Machine. This is only applicable to Windows Virtual Machines. Possible values are `Windows_Client` and `Windows_Server`.
	LicenseType pulumi.StringPtrInput
	// Specifies the Azure Region where the Virtual Machine exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the Virtual Machine. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A list of Network Interface IDs which should be associated with the Virtual Machine.
	NetworkInterfaceIds pulumi.StringArrayInput
	// An `osProfile` block as defined below. Required when `createOption` in the `storageOsDisk` block is set to `FromImage`.
	OsProfile VirtualMachineOsProfilePtrInput
	// (Required, when a Linux machine) An `osProfileLinuxConfig` block as defined below.
	OsProfileLinuxConfig VirtualMachineOsProfileLinuxConfigPtrInput
	// One or more `osProfileSecrets` blocks as defined below.
	OsProfileSecrets VirtualMachineOsProfileSecretArrayInput
	// (Required, when a Windows machine) An `osProfileWindowsConfig` block as defined below.
	OsProfileWindowsConfig VirtualMachineOsProfileWindowsConfigPtrInput
	// A `plan` block as defined below.
	Plan VirtualMachinePlanPtrInput
	// The ID of the Network Interface (which must be attached to the Virtual Machine) which should be the Primary Network Interface for this Virtual Machine.
	PrimaryNetworkInterfaceId pulumi.StringPtrInput
	// The ID of the Proximity Placement Group to which this Virtual Machine should be assigned. Changing this forces a new resource to be created
	ProximityPlacementGroupId pulumi.StringPtrInput
	// Specifies the name of the Resource Group in which the Virtual Machine should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// One or more `storageDataDisk` blocks as defined below.
	//
	// > **Please Note:** Data Disks can also be attached either using this block or the `compute.DataDiskAttachment` resource - but not both.
	StorageDataDisks VirtualMachineStorageDataDiskArrayInput
	// A `storageImageReference` block as defined below. Changing this forces a new resource to be created.
	StorageImageReference VirtualMachineStorageImageReferencePtrInput
	// A `storageOsDisk` block as defined below.
	StorageOsDisk VirtualMachineStorageOsDiskInput
	// A mapping of tags to assign to the Virtual Machine.
	Tags pulumi.StringMapInput
	// Specifies the [size of the Virtual Machine](https://docs.microsoft.com/azure/virtual-machines/sizes-general). See also [Azure VM Naming Conventions](https://docs.microsoft.com/azure/virtual-machines/vm-naming-conventions).
	VmSize pulumi.StringInput
	// A list of a single item of the Availability Zone which the Virtual Machine should be allocated in. Changing this forces a new resource to be created.
	//
	// > **Please Note**: Availability Zones are [only supported in several regions at this time](https://docs.microsoft.com/azure/availability-zones/az-overview).
	//
	// For more information on the different example configurations, please check out the [Azure documentation](https://docs.microsoft.com/en-gb/rest/api/compute/virtualmachines/createorupdate#examples)
	Zones pulumi.StringPtrInput
}

func (VirtualMachineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMachineArgs)(nil)).Elem()
}

type VirtualMachineInput interface {
	pulumi.Input

	ToVirtualMachineOutput() VirtualMachineOutput
	ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput
}

func (*VirtualMachine) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachine)(nil)).Elem()
}

func (i *VirtualMachine) ToVirtualMachineOutput() VirtualMachineOutput {
	return i.ToVirtualMachineOutputWithContext(context.Background())
}

func (i *VirtualMachine) ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineOutput)
}

// VirtualMachineArrayInput is an input type that accepts VirtualMachineArray and VirtualMachineArrayOutput values.
// You can construct a concrete instance of `VirtualMachineArrayInput` via:
//
//	VirtualMachineArray{ VirtualMachineArgs{...} }
type VirtualMachineArrayInput interface {
	pulumi.Input

	ToVirtualMachineArrayOutput() VirtualMachineArrayOutput
	ToVirtualMachineArrayOutputWithContext(context.Context) VirtualMachineArrayOutput
}

type VirtualMachineArray []VirtualMachineInput

func (VirtualMachineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualMachine)(nil)).Elem()
}

func (i VirtualMachineArray) ToVirtualMachineArrayOutput() VirtualMachineArrayOutput {
	return i.ToVirtualMachineArrayOutputWithContext(context.Background())
}

func (i VirtualMachineArray) ToVirtualMachineArrayOutputWithContext(ctx context.Context) VirtualMachineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineArrayOutput)
}

// VirtualMachineMapInput is an input type that accepts VirtualMachineMap and VirtualMachineMapOutput values.
// You can construct a concrete instance of `VirtualMachineMapInput` via:
//
//	VirtualMachineMap{ "key": VirtualMachineArgs{...} }
type VirtualMachineMapInput interface {
	pulumi.Input

	ToVirtualMachineMapOutput() VirtualMachineMapOutput
	ToVirtualMachineMapOutputWithContext(context.Context) VirtualMachineMapOutput
}

type VirtualMachineMap map[string]VirtualMachineInput

func (VirtualMachineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualMachine)(nil)).Elem()
}

func (i VirtualMachineMap) ToVirtualMachineMapOutput() VirtualMachineMapOutput {
	return i.ToVirtualMachineMapOutputWithContext(context.Background())
}

func (i VirtualMachineMap) ToVirtualMachineMapOutputWithContext(ctx context.Context) VirtualMachineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineMapOutput)
}

type VirtualMachineOutput struct{ *pulumi.OutputState }

func (VirtualMachineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachine)(nil)).Elem()
}

func (o VirtualMachineOutput) ToVirtualMachineOutput() VirtualMachineOutput {
	return o
}

func (o VirtualMachineOutput) ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput {
	return o
}

// An `additionalCapabilities` block as defined below.
func (o VirtualMachineOutput) AdditionalCapabilities() VirtualMachineAdditionalCapabilitiesPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineAdditionalCapabilitiesPtrOutput { return v.AdditionalCapabilities }).(VirtualMachineAdditionalCapabilitiesPtrOutput)
}

// The ID of the Availability Set in which the Virtual Machine should exist. Changing this forces a new resource to be created.
func (o VirtualMachineOutput) AvailabilitySetId() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.AvailabilitySetId }).(pulumi.StringOutput)
}

// A `bootDiagnostics` block as defined below.
func (o VirtualMachineOutput) BootDiagnostics() VirtualMachineBootDiagnosticsPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineBootDiagnosticsPtrOutput { return v.BootDiagnostics }).(VirtualMachineBootDiagnosticsPtrOutput)
}

// Should the Data Disks (either the Managed Disks / VHD Blobs) be deleted when the Virtual Machine is destroyed? Defaults to `false`.
//
// > **Note:** This setting works when instance is deleted via the provider only and don't forget to delete disks manually if you deleted VM manually. It can increase spending.
func (o VirtualMachineOutput) DeleteDataDisksOnTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.DeleteDataDisksOnTermination }).(pulumi.BoolPtrOutput)
}

// Should the OS Disk (either the Managed Disk / VHD Blob) be deleted when the Virtual Machine is destroyed? Defaults to `false`.
//
// > **Note:** This setting works when instance is deleted via the provider only and don't forget to delete disks manually if you deleted VM manually. It can increase spending.
func (o VirtualMachineOutput) DeleteOsDiskOnTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.BoolPtrOutput { return v.DeleteOsDiskOnTermination }).(pulumi.BoolPtrOutput)
}

// An `identity` block as defined below.
func (o VirtualMachineOutput) Identity() VirtualMachineIdentityOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineIdentityOutput { return v.Identity }).(VirtualMachineIdentityOutput)
}

// Specifies the BYOL Type for this Virtual Machine. This is only applicable to Windows Virtual Machines. Possible values are `Windows_Client` and `Windows_Server`.
func (o VirtualMachineOutput) LicenseType() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.LicenseType }).(pulumi.StringOutput)
}

// Specifies the Azure Region where the Virtual Machine exists. Changing this forces a new resource to be created.
func (o VirtualMachineOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name of the Virtual Machine. Changing this forces a new resource to be created.
func (o VirtualMachineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of Network Interface IDs which should be associated with the Virtual Machine.
func (o VirtualMachineOutput) NetworkInterfaceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringArrayOutput { return v.NetworkInterfaceIds }).(pulumi.StringArrayOutput)
}

// An `osProfile` block as defined below. Required when `createOption` in the `storageOsDisk` block is set to `FromImage`.
func (o VirtualMachineOutput) OsProfile() VirtualMachineOsProfilePtrOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineOsProfilePtrOutput { return v.OsProfile }).(VirtualMachineOsProfilePtrOutput)
}

// (Required, when a Linux machine) An `osProfileLinuxConfig` block as defined below.
func (o VirtualMachineOutput) OsProfileLinuxConfig() VirtualMachineOsProfileLinuxConfigPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineOsProfileLinuxConfigPtrOutput { return v.OsProfileLinuxConfig }).(VirtualMachineOsProfileLinuxConfigPtrOutput)
}

// One or more `osProfileSecrets` blocks as defined below.
func (o VirtualMachineOutput) OsProfileSecrets() VirtualMachineOsProfileSecretArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineOsProfileSecretArrayOutput { return v.OsProfileSecrets }).(VirtualMachineOsProfileSecretArrayOutput)
}

// (Required, when a Windows machine) An `osProfileWindowsConfig` block as defined below.
func (o VirtualMachineOutput) OsProfileWindowsConfig() VirtualMachineOsProfileWindowsConfigPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineOsProfileWindowsConfigPtrOutput { return v.OsProfileWindowsConfig }).(VirtualMachineOsProfileWindowsConfigPtrOutput)
}

// A `plan` block as defined below.
func (o VirtualMachineOutput) Plan() VirtualMachinePlanPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachinePlanPtrOutput { return v.Plan }).(VirtualMachinePlanPtrOutput)
}

// The ID of the Network Interface (which must be attached to the Virtual Machine) which should be the Primary Network Interface for this Virtual Machine.
func (o VirtualMachineOutput) PrimaryNetworkInterfaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.PrimaryNetworkInterfaceId }).(pulumi.StringPtrOutput)
}

// The ID of the Proximity Placement Group to which this Virtual Machine should be assigned. Changing this forces a new resource to be created
func (o VirtualMachineOutput) ProximityPlacementGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.ProximityPlacementGroupId }).(pulumi.StringPtrOutput)
}

// Specifies the name of the Resource Group in which the Virtual Machine should exist. Changing this forces a new resource to be created.
func (o VirtualMachineOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// One or more `storageDataDisk` blocks as defined below.
//
// > **Please Note:** Data Disks can also be attached either using this block or the `compute.DataDiskAttachment` resource - but not both.
func (o VirtualMachineOutput) StorageDataDisks() VirtualMachineStorageDataDiskArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineStorageDataDiskArrayOutput { return v.StorageDataDisks }).(VirtualMachineStorageDataDiskArrayOutput)
}

// A `storageImageReference` block as defined below. Changing this forces a new resource to be created.
func (o VirtualMachineOutput) StorageImageReference() VirtualMachineStorageImageReferenceOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineStorageImageReferenceOutput { return v.StorageImageReference }).(VirtualMachineStorageImageReferenceOutput)
}

// A `storageOsDisk` block as defined below.
func (o VirtualMachineOutput) StorageOsDisk() VirtualMachineStorageOsDiskOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachineStorageOsDiskOutput { return v.StorageOsDisk }).(VirtualMachineStorageOsDiskOutput)
}

// A mapping of tags to assign to the Virtual Machine.
func (o VirtualMachineOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the [size of the Virtual Machine](https://docs.microsoft.com/azure/virtual-machines/sizes-general). See also [Azure VM Naming Conventions](https://docs.microsoft.com/azure/virtual-machines/vm-naming-conventions).
func (o VirtualMachineOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringOutput { return v.VmSize }).(pulumi.StringOutput)
}

// A list of a single item of the Availability Zone which the Virtual Machine should be allocated in. Changing this forces a new resource to be created.
//
// > **Please Note**: Availability Zones are [only supported in several regions at this time](https://docs.microsoft.com/azure/availability-zones/az-overview).
//
// For more information on the different example configurations, please check out the [Azure documentation](https://docs.microsoft.com/en-gb/rest/api/compute/virtualmachines/createorupdate#examples)
func (o VirtualMachineOutput) Zones() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) pulumi.StringPtrOutput { return v.Zones }).(pulumi.StringPtrOutput)
}

type VirtualMachineArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualMachine)(nil)).Elem()
}

func (o VirtualMachineArrayOutput) ToVirtualMachineArrayOutput() VirtualMachineArrayOutput {
	return o
}

func (o VirtualMachineArrayOutput) ToVirtualMachineArrayOutputWithContext(ctx context.Context) VirtualMachineArrayOutput {
	return o
}

func (o VirtualMachineArrayOutput) Index(i pulumi.IntInput) VirtualMachineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VirtualMachine {
		return vs[0].([]*VirtualMachine)[vs[1].(int)]
	}).(VirtualMachineOutput)
}

type VirtualMachineMapOutput struct{ *pulumi.OutputState }

func (VirtualMachineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualMachine)(nil)).Elem()
}

func (o VirtualMachineMapOutput) ToVirtualMachineMapOutput() VirtualMachineMapOutput {
	return o
}

func (o VirtualMachineMapOutput) ToVirtualMachineMapOutputWithContext(ctx context.Context) VirtualMachineMapOutput {
	return o
}

func (o VirtualMachineMapOutput) MapIndex(k pulumi.StringInput) VirtualMachineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VirtualMachine {
		return vs[0].(map[string]*VirtualMachine)[vs[1].(string)]
	}).(VirtualMachineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInput)(nil)).Elem(), &VirtualMachine{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineArrayInput)(nil)).Elem(), VirtualMachineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineMapInput)(nil)).Elem(), VirtualMachineMap{})
	pulumi.RegisterOutputType(VirtualMachineOutput{})
	pulumi.RegisterOutputType(VirtualMachineArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineMapOutput{})
}
