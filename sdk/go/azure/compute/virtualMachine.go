// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/virtual_machine.html.markdown.
type VirtualMachine struct {
	s *pulumi.ResourceState
}

// NewVirtualMachine registers a new resource with the given unique name, arguments, and options.
func NewVirtualMachine(ctx *pulumi.Context,
	name string, args *VirtualMachineArgs, opts ...pulumi.ResourceOpt) (*VirtualMachine, error) {
	if args == nil || args.NetworkInterfaceIds == nil {
		return nil, errors.New("missing required argument 'NetworkInterfaceIds'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.StorageOsDisk == nil {
		return nil, errors.New("missing required argument 'StorageOsDisk'")
	}
	if args == nil || args.VmSize == nil {
		return nil, errors.New("missing required argument 'VmSize'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["additionalCapabilities"] = nil
		inputs["availabilitySetId"] = nil
		inputs["bootDiagnostics"] = nil
		inputs["deleteDataDisksOnTermination"] = nil
		inputs["deleteOsDiskOnTermination"] = nil
		inputs["identity"] = nil
		inputs["licenseType"] = nil
		inputs["location"] = nil
		inputs["name"] = nil
		inputs["networkInterfaceIds"] = nil
		inputs["osProfile"] = nil
		inputs["osProfileLinuxConfig"] = nil
		inputs["osProfileSecrets"] = nil
		inputs["osProfileWindowsConfig"] = nil
		inputs["plan"] = nil
		inputs["primaryNetworkInterfaceId"] = nil
		inputs["proximityPlacementGroupId"] = nil
		inputs["resourceGroupName"] = nil
		inputs["storageDataDisks"] = nil
		inputs["storageImageReference"] = nil
		inputs["storageOsDisk"] = nil
		inputs["tags"] = nil
		inputs["vmSize"] = nil
		inputs["zones"] = nil
	} else {
		inputs["additionalCapabilities"] = args.AdditionalCapabilities
		inputs["availabilitySetId"] = args.AvailabilitySetId
		inputs["bootDiagnostics"] = args.BootDiagnostics
		inputs["deleteDataDisksOnTermination"] = args.DeleteDataDisksOnTermination
		inputs["deleteOsDiskOnTermination"] = args.DeleteOsDiskOnTermination
		inputs["identity"] = args.Identity
		inputs["licenseType"] = args.LicenseType
		inputs["location"] = args.Location
		inputs["name"] = args.Name
		inputs["networkInterfaceIds"] = args.NetworkInterfaceIds
		inputs["osProfile"] = args.OsProfile
		inputs["osProfileLinuxConfig"] = args.OsProfileLinuxConfig
		inputs["osProfileSecrets"] = args.OsProfileSecrets
		inputs["osProfileWindowsConfig"] = args.OsProfileWindowsConfig
		inputs["plan"] = args.Plan
		inputs["primaryNetworkInterfaceId"] = args.PrimaryNetworkInterfaceId
		inputs["proximityPlacementGroupId"] = args.ProximityPlacementGroupId
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["storageDataDisks"] = args.StorageDataDisks
		inputs["storageImageReference"] = args.StorageImageReference
		inputs["storageOsDisk"] = args.StorageOsDisk
		inputs["tags"] = args.Tags
		inputs["vmSize"] = args.VmSize
		inputs["zones"] = args.Zones
	}
	s, err := ctx.RegisterResource("azure:compute/virtualMachine:VirtualMachine", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VirtualMachine{s: s}, nil
}

// GetVirtualMachine gets an existing VirtualMachine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualMachine(ctx *pulumi.Context,
	name string, id pulumi.ID, state *VirtualMachineState, opts ...pulumi.ResourceOpt) (*VirtualMachine, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["additionalCapabilities"] = state.AdditionalCapabilities
		inputs["availabilitySetId"] = state.AvailabilitySetId
		inputs["bootDiagnostics"] = state.BootDiagnostics
		inputs["deleteDataDisksOnTermination"] = state.DeleteDataDisksOnTermination
		inputs["deleteOsDiskOnTermination"] = state.DeleteOsDiskOnTermination
		inputs["identity"] = state.Identity
		inputs["licenseType"] = state.LicenseType
		inputs["location"] = state.Location
		inputs["name"] = state.Name
		inputs["networkInterfaceIds"] = state.NetworkInterfaceIds
		inputs["osProfile"] = state.OsProfile
		inputs["osProfileLinuxConfig"] = state.OsProfileLinuxConfig
		inputs["osProfileSecrets"] = state.OsProfileSecrets
		inputs["osProfileWindowsConfig"] = state.OsProfileWindowsConfig
		inputs["plan"] = state.Plan
		inputs["primaryNetworkInterfaceId"] = state.PrimaryNetworkInterfaceId
		inputs["proximityPlacementGroupId"] = state.ProximityPlacementGroupId
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["storageDataDisks"] = state.StorageDataDisks
		inputs["storageImageReference"] = state.StorageImageReference
		inputs["storageOsDisk"] = state.StorageOsDisk
		inputs["tags"] = state.Tags
		inputs["vmSize"] = state.VmSize
		inputs["zones"] = state.Zones
	}
	s, err := ctx.ReadResource("azure:compute/virtualMachine:VirtualMachine", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VirtualMachine{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *VirtualMachine) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *VirtualMachine) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// A `additionalCapabilities` block.
func (r *VirtualMachine) AdditionalCapabilities() *pulumi.Output {
	return r.s.State["additionalCapabilities"]
}

// The ID of the Availability Set in which the Virtual Machine should exist. Changing this forces a new resource to be created.
func (r *VirtualMachine) AvailabilitySetId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["availabilitySetId"])
}

// A `bootDiagnostics` block.
func (r *VirtualMachine) BootDiagnostics() *pulumi.Output {
	return r.s.State["bootDiagnostics"]
}

// Should the Data Disks (either the Managed Disks / VHD Blobs) be deleted when the Virtual Machine is destroyed? Defaults to `false`.
func (r *VirtualMachine) DeleteDataDisksOnTermination() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["deleteDataDisksOnTermination"])
}

// Should the OS Disk (either the Managed Disk / VHD Blob) be deleted when the Virtual Machine is destroyed? Defaults to `false`.
func (r *VirtualMachine) DeleteOsDiskOnTermination() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["deleteOsDiskOnTermination"])
}

// A `identity` block.
func (r *VirtualMachine) Identity() *pulumi.Output {
	return r.s.State["identity"]
}

// Specifies the BYOL Type for this Virtual Machine. This is only applicable to Windows Virtual Machines. Possible values are `Windows_Client` and `Windows_Server`.
func (r *VirtualMachine) LicenseType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["licenseType"])
}

// Specifies the Azure Region where the Virtual Machine exists. Changing this forces a new resource to be created.
func (r *VirtualMachine) Location() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["location"])
}

// Specifies the name of the Virtual Machine. Changing this forces a new resource to be created.
func (r *VirtualMachine) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// A list of Network Interface ID's which should be associated with the Virtual Machine.
func (r *VirtualMachine) NetworkInterfaceIds() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["networkInterfaceIds"])
}

// An `osProfile` block. Required when `createOption` in the `storageOsDisk` block is set to `FromImage`.
func (r *VirtualMachine) OsProfile() *pulumi.Output {
	return r.s.State["osProfile"]
}

// A `osProfileLinuxConfig` block.
func (r *VirtualMachine) OsProfileLinuxConfig() *pulumi.Output {
	return r.s.State["osProfileLinuxConfig"]
}

// One or more `osProfileSecrets` blocks.
func (r *VirtualMachine) OsProfileSecrets() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["osProfileSecrets"])
}

// A `osProfileWindowsConfig` block.
func (r *VirtualMachine) OsProfileWindowsConfig() *pulumi.Output {
	return r.s.State["osProfileWindowsConfig"]
}

// A `plan` block.
func (r *VirtualMachine) Plan() *pulumi.Output {
	return r.s.State["plan"]
}

// The ID of the Network Interface (which must be attached to the Virtual Machine) which should be the Primary Network Interface for this Virtual Machine.
func (r *VirtualMachine) PrimaryNetworkInterfaceId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["primaryNetworkInterfaceId"])
}

// The ID of the Proximity Placement Group to which this Virtual Machine should be assigned. Changing this forces a new resource to be created
func (r *VirtualMachine) ProximityPlacementGroupId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["proximityPlacementGroupId"])
}

// Specifies the name of the Resource Group in which the Virtual Machine should exist. Changing this forces a new resource to be created.
func (r *VirtualMachine) ResourceGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// One or more `storageDataDisk` blocks.
func (r *VirtualMachine) StorageDataDisks() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["storageDataDisks"])
}

// A `storageImageReference` block.
func (r *VirtualMachine) StorageImageReference() *pulumi.Output {
	return r.s.State["storageImageReference"]
}

// A `storageOsDisk` block.
func (r *VirtualMachine) StorageOsDisk() *pulumi.Output {
	return r.s.State["storageOsDisk"]
}

// A mapping of tags to assign to the Virtual Machine.
func (r *VirtualMachine) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// Specifies the [size of the Virtual Machine](https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-size-specs/).
func (r *VirtualMachine) VmSize() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["vmSize"])
}

// A list of a single item of the Availability Zone which the Virtual Machine should be allocated in.
func (r *VirtualMachine) Zones() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zones"])
}

// Input properties used for looking up and filtering VirtualMachine resources.
type VirtualMachineState struct {
	// A `additionalCapabilities` block.
	AdditionalCapabilities interface{}
	// The ID of the Availability Set in which the Virtual Machine should exist. Changing this forces a new resource to be created.
	AvailabilitySetId interface{}
	// A `bootDiagnostics` block.
	BootDiagnostics interface{}
	// Should the Data Disks (either the Managed Disks / VHD Blobs) be deleted when the Virtual Machine is destroyed? Defaults to `false`.
	DeleteDataDisksOnTermination interface{}
	// Should the OS Disk (either the Managed Disk / VHD Blob) be deleted when the Virtual Machine is destroyed? Defaults to `false`.
	DeleteOsDiskOnTermination interface{}
	// A `identity` block.
	Identity interface{}
	// Specifies the BYOL Type for this Virtual Machine. This is only applicable to Windows Virtual Machines. Possible values are `Windows_Client` and `Windows_Server`.
	LicenseType interface{}
	// Specifies the Azure Region where the Virtual Machine exists. Changing this forces a new resource to be created.
	Location interface{}
	// Specifies the name of the Virtual Machine. Changing this forces a new resource to be created.
	Name interface{}
	// A list of Network Interface ID's which should be associated with the Virtual Machine.
	NetworkInterfaceIds interface{}
	// An `osProfile` block. Required when `createOption` in the `storageOsDisk` block is set to `FromImage`.
	OsProfile interface{}
	// A `osProfileLinuxConfig` block.
	OsProfileLinuxConfig interface{}
	// One or more `osProfileSecrets` blocks.
	OsProfileSecrets interface{}
	// A `osProfileWindowsConfig` block.
	OsProfileWindowsConfig interface{}
	// A `plan` block.
	Plan interface{}
	// The ID of the Network Interface (which must be attached to the Virtual Machine) which should be the Primary Network Interface for this Virtual Machine.
	PrimaryNetworkInterfaceId interface{}
	// The ID of the Proximity Placement Group to which this Virtual Machine should be assigned. Changing this forces a new resource to be created
	ProximityPlacementGroupId interface{}
	// Specifies the name of the Resource Group in which the Virtual Machine should exist. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// One or more `storageDataDisk` blocks.
	StorageDataDisks interface{}
	// A `storageImageReference` block.
	StorageImageReference interface{}
	// A `storageOsDisk` block.
	StorageOsDisk interface{}
	// A mapping of tags to assign to the Virtual Machine.
	Tags interface{}
	// Specifies the [size of the Virtual Machine](https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-size-specs/).
	VmSize interface{}
	// A list of a single item of the Availability Zone which the Virtual Machine should be allocated in.
	Zones interface{}
}

// The set of arguments for constructing a VirtualMachine resource.
type VirtualMachineArgs struct {
	// A `additionalCapabilities` block.
	AdditionalCapabilities interface{}
	// The ID of the Availability Set in which the Virtual Machine should exist. Changing this forces a new resource to be created.
	AvailabilitySetId interface{}
	// A `bootDiagnostics` block.
	BootDiagnostics interface{}
	// Should the Data Disks (either the Managed Disks / VHD Blobs) be deleted when the Virtual Machine is destroyed? Defaults to `false`.
	DeleteDataDisksOnTermination interface{}
	// Should the OS Disk (either the Managed Disk / VHD Blob) be deleted when the Virtual Machine is destroyed? Defaults to `false`.
	DeleteOsDiskOnTermination interface{}
	// A `identity` block.
	Identity interface{}
	// Specifies the BYOL Type for this Virtual Machine. This is only applicable to Windows Virtual Machines. Possible values are `Windows_Client` and `Windows_Server`.
	LicenseType interface{}
	// Specifies the Azure Region where the Virtual Machine exists. Changing this forces a new resource to be created.
	Location interface{}
	// Specifies the name of the Virtual Machine. Changing this forces a new resource to be created.
	Name interface{}
	// A list of Network Interface ID's which should be associated with the Virtual Machine.
	NetworkInterfaceIds interface{}
	// An `osProfile` block. Required when `createOption` in the `storageOsDisk` block is set to `FromImage`.
	OsProfile interface{}
	// A `osProfileLinuxConfig` block.
	OsProfileLinuxConfig interface{}
	// One or more `osProfileSecrets` blocks.
	OsProfileSecrets interface{}
	// A `osProfileWindowsConfig` block.
	OsProfileWindowsConfig interface{}
	// A `plan` block.
	Plan interface{}
	// The ID of the Network Interface (which must be attached to the Virtual Machine) which should be the Primary Network Interface for this Virtual Machine.
	PrimaryNetworkInterfaceId interface{}
	// The ID of the Proximity Placement Group to which this Virtual Machine should be assigned. Changing this forces a new resource to be created
	ProximityPlacementGroupId interface{}
	// Specifies the name of the Resource Group in which the Virtual Machine should exist. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// One or more `storageDataDisk` blocks.
	StorageDataDisks interface{}
	// A `storageImageReference` block.
	StorageImageReference interface{}
	// A `storageOsDisk` block.
	StorageOsDisk interface{}
	// A mapping of tags to assign to the Virtual Machine.
	Tags interface{}
	// Specifies the [size of the Virtual Machine](https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-size-specs/).
	VmSize interface{}
	// A list of a single item of the Availability Zone which the Virtual Machine should be allocated in.
	Zones interface{}
}
