// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a Windows Virtual Machine Scale Set.
//
// ## Disclaimers
//
// > **Note** This provider will automatically update & reimage the nodes in the Scale Set (if Required) during an Update - this behaviour can be configured using the `features` configuration within the Provider configuration block.
//
// > **Note:** This resource does not support Unmanaged Disks. If you need to use Unmanaged Disks you can continue to use the `compute.ScaleSet` resource instead
//
// ## Example Usage
//
// This example provisions a basic Windows Virtual Machine Scale Set on an internal network.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/compute"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/network"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West Europe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "exampleVirtualNetwork", &network.VirtualNetworkArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			Location:          exampleResourceGroup.Location,
// 			AddressSpaces: pulumi.StringArray{
// 				pulumi.String("10.0.0.0/16"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		internal, err := network.NewSubnet(ctx, "internal", &network.SubnetArgs{
// 			ResourceGroupName:  exampleResourceGroup.Name,
// 			VirtualNetworkName: exampleVirtualNetwork.Name,
// 			AddressPrefixes: pulumi.StringArray{
// 				pulumi.String("10.0.2.0/24"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = compute.NewWindowsVirtualMachineScaleSet(ctx, "exampleWindowsVirtualMachineScaleSet", &compute.WindowsVirtualMachineScaleSetArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			Location:          exampleResourceGroup.Location,
// 			Sku:               pulumi.String("Standard_F2"),
// 			Instances:         pulumi.Int(1),
// 			AdminPassword:     pulumi.String("P@55w0rd1234!"),
// 			AdminUsername:     pulumi.String("adminuser"),
// 			SourceImageReference: &compute.WindowsVirtualMachineScaleSetSourceImageReferenceArgs{
// 				Publisher: pulumi.String("MicrosoftWindowsServer"),
// 				Offer:     pulumi.String("WindowsServer"),
// 				Sku:       pulumi.String("2016-Datacenter-Server-Core"),
// 				Version:   pulumi.String("latest"),
// 			},
// 			OsDisk: &compute.WindowsVirtualMachineScaleSetOsDiskArgs{
// 				StorageAccountType: pulumi.String("Standard_LRS"),
// 				Caching:            pulumi.String("ReadWrite"),
// 			},
// 			NetworkInterfaces: compute.WindowsVirtualMachineScaleSetNetworkInterfaceArray{
// 				&compute.WindowsVirtualMachineScaleSetNetworkInterfaceArgs{
// 					Name:    pulumi.String("example"),
// 					Primary: pulumi.Bool(true),
// 					IpConfigurations: compute.WindowsVirtualMachineScaleSetNetworkInterfaceIpConfigurationArray{
// 						&compute.WindowsVirtualMachineScaleSetNetworkInterfaceIpConfigurationArgs{
// 							Name:     pulumi.String("internal"),
// 							Primary:  pulumi.Bool(true),
// 							SubnetId: internal.ID(),
// 						},
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Windows Virtual Machine Scale Sets can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:compute/windowsVirtualMachineScaleSet:WindowsVirtualMachineScaleSet example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/Microsoft.Compute/virtualMachineScaleSets/scaleset1
// ```
type WindowsVirtualMachineScaleSet struct {
	pulumi.CustomResourceState

	// A `additionalCapabilities` block as defined below.
	AdditionalCapabilities WindowsVirtualMachineScaleSetAdditionalCapabilitiesPtrOutput `pulumi:"additionalCapabilities"`
	// One or more `additionalUnattendContent` blocks as defined below.
	AdditionalUnattendContents WindowsVirtualMachineScaleSetAdditionalUnattendContentArrayOutput `pulumi:"additionalUnattendContents"`
	// The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
	AdminPassword pulumi.StringOutput `pulumi:"adminPassword"`
	// The username of the local administrator on each Virtual Machine Scale Set instance. Changing this forces a new resource to be created.
	AdminUsername pulumi.StringOutput `pulumi:"adminUsername"`
	// A `automaticInstanceRepair` block as defined below. To enable the automatic instance repair, this Virtual Machine Scale Set must have a valid `healthProbeId` or an [Application Health Extension](https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-health-extension).
	AutomaticInstanceRepair WindowsVirtualMachineScaleSetAutomaticInstanceRepairOutput `pulumi:"automaticInstanceRepair"`
	// A `automaticOsUpgradePolicy` block as defined below. This can only be specified when `upgradeMode` is set to `Automatic`.
	AutomaticOsUpgradePolicy WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicyPtrOutput `pulumi:"automaticOsUpgradePolicy"`
	// A `bootDiagnostics` block as defined below.
	BootDiagnostics WindowsVirtualMachineScaleSetBootDiagnosticsPtrOutput `pulumi:"bootDiagnostics"`
	// The prefix which should be used for the name of the Virtual Machines in this Scale Set. If unspecified this defaults to the value for the `name` field. If the value of the `name` field is not a valid `computerNamePrefix`, then you must specify `computerNamePrefix`.
	ComputerNamePrefix pulumi.StringOutput `pulumi:"computerNamePrefix"`
	// The Base64-Encoded Custom Data which should be used for this Virtual Machine Scale Set.
	CustomData pulumi.StringPtrOutput `pulumi:"customData"`
	// One or more `dataDisk` blocks as defined below.
	DataDisks WindowsVirtualMachineScaleSetDataDiskArrayOutput `pulumi:"dataDisks"`
	// Should Virtual Machine Extensions be run on Overprovisioned Virtual Machines in the Scale Set? Defaults to `false`.
	DoNotRunExtensionsOnOverprovisionedMachines pulumi.BoolPtrOutput `pulumi:"doNotRunExtensionsOnOverprovisionedMachines"`
	// Are automatic updates enabled for this Virtual Machine? Defaults to `true`.
	EnableAutomaticUpdates pulumi.BoolPtrOutput `pulumi:"enableAutomaticUpdates"`
	// Should all of the disks (including the temp disk) attached to this Virtual Machine be encrypted by enabling Encryption at Host?
	EncryptionAtHostEnabled pulumi.BoolPtrOutput `pulumi:"encryptionAtHostEnabled"`
	// The Policy which should be used Virtual Machines are Evicted from the Scale Set. Changing this forces a new resource to be created.
	EvictionPolicy pulumi.StringPtrOutput `pulumi:"evictionPolicy"`
	// One or more `extension` blocks as defined below
	Extensions WindowsVirtualMachineScaleSetExtensionArrayOutput `pulumi:"extensions"`
	// The ID of a Load Balancer Probe which should be used to determine the health of an instance. Changing this forces a new resource to be created. This is Required and can only be specified when `upgradeMode` is set to `Automatic` or `Rolling`.
	HealthProbeId pulumi.StringPtrOutput `pulumi:"healthProbeId"`
	// A `identity` block as defined below.
	Identity WindowsVirtualMachineScaleSetIdentityPtrOutput `pulumi:"identity"`
	// The number of Virtual Machines in the Scale Set.
	Instances pulumi.IntOutput `pulumi:"instances"`
	// Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing)) which should be used for this Virtual Machine Scale Set. Possible values are `None`, `Windows_Client` and `Windows_Server`. Changing this forces a new resource to be created.
	LicenseType pulumi.StringPtrOutput `pulumi:"licenseType"`
	// The Azure location where the Windows Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The maximum price you're willing to pay for each Virtual Machine in this Scale Set, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machines in the Scale Set will be evicted using the `evictionPolicy`. Defaults to `-1`, which means that each Virtual Machine in the Scale Set should not be evicted for price reasons.
	MaxBidPrice pulumi.Float64PtrOutput `pulumi:"maxBidPrice"`
	// The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// One or more `networkInterface` blocks as defined below.
	NetworkInterfaces WindowsVirtualMachineScaleSetNetworkInterfaceArrayOutput `pulumi:"networkInterfaces"`
	// An `osDisk` block as defined below.
	OsDisk WindowsVirtualMachineScaleSetOsDiskOutput `pulumi:"osDisk"`
	// Should Azure over-provision Virtual Machines in this Scale Set? This means that multiple Virtual Machines will be provisioned and Azure will keep the instances which become available first - which improves provisioning success rates and improves deployment time. You're not billed for these over-provisioned VM's and they don't count towards the Subscription Quota. Defaults to `true`.
	Overprovision pulumi.BoolPtrOutput `pulumi:"overprovision"`
	// A `plan` block as documented below.
	Plan WindowsVirtualMachineScaleSetPlanPtrOutput `pulumi:"plan"`
	// The Priority of this Virtual Machine Scale Set. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this value forces a new resource.
	Priority pulumi.StringPtrOutput `pulumi:"priority"`
	// Should the Azure VM Agent be provisioned on each Virtual Machine in the Scale Set? Defaults to `true`. Changing this value forces a new resource to be created.
	ProvisionVmAgent pulumi.BoolPtrOutput `pulumi:"provisionVmAgent"`
	// The ID of the Proximity Placement Group in which the Virtual Machine Scale Set should be assigned to. Changing this forces a new resource to be created.
	ProximityPlacementGroupId pulumi.StringPtrOutput `pulumi:"proximityPlacementGroupId"`
	// The name of the Resource Group in which the Windows Virtual Machine Scale Set should be exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A `rollingUpgradePolicy` block as defined below. This is Required and can only be specified when `upgradeMode` is set to `Automatic` or `Rolling`.
	RollingUpgradePolicy WindowsVirtualMachineScaleSetRollingUpgradePolicyPtrOutput `pulumi:"rollingUpgradePolicy"`
	// The scale-in policy rule that decides which virtual machines are chosen for removal when a Virtual Machine Scale Set is scaled in. Possible values for the scale-in policy rules are `Default`, `NewestVM` and `OldestVM`, defaults to `Default`. For more information about scale in policy, please [refer to this doc](https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-scale-in-policy).
	ScaleInPolicy pulumi.StringPtrOutput `pulumi:"scaleInPolicy"`
	// One or more `secret` blocks as defined below.
	Secrets WindowsVirtualMachineScaleSetSecretArrayOutput `pulumi:"secrets"`
	// Should this Virtual Machine Scale Set be limited to a Single Placement Group, which means the number of instances will be capped at 100 Virtual Machines. Defaults to `true`.
	SinglePlacementGroup pulumi.BoolPtrOutput `pulumi:"singlePlacementGroup"`
	// The Virtual Machine SKU for the Scale Set, such as `Standard_F2`.
	Sku pulumi.StringOutput `pulumi:"sku"`
	// The ID of an Image which each Virtual Machine in this Scale Set should be based on.
	SourceImageId pulumi.StringPtrOutput `pulumi:"sourceImageId"`
	// A `sourceImageReference` block as defined below.
	SourceImageReference WindowsVirtualMachineScaleSetSourceImageReferencePtrOutput `pulumi:"sourceImageReference"`
	// A mapping of tags which should be assigned to this Virtual Machine Scale Set.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A `terminateNotification` block as defined below.
	TerminateNotification WindowsVirtualMachineScaleSetTerminateNotificationOutput `pulumi:"terminateNotification"`
	// Specifies the time zone of the virtual machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
	Timezone pulumi.StringPtrOutput `pulumi:"timezone"`
	// The Unique ID for this Windows Virtual Machine Scale Set.
	UniqueId pulumi.StringOutput `pulumi:"uniqueId"`
	// Specifies how Upgrades (e.g. changing the Image/SKU) should be performed to Virtual Machine Instances. Possible values are `Automatic`, `Manual` and `Rolling`. Defaults to `Manual`.
	UpgradeMode pulumi.StringPtrOutput `pulumi:"upgradeMode"`
	// One or more `winrmListener` blocks as defined below.
	WinrmListeners WindowsVirtualMachineScaleSetWinrmListenerArrayOutput `pulumi:"winrmListeners"`
	// Should the Virtual Machines in this Scale Set be strictly evenly distributed across Availability Zones? Defaults to `false`. Changing this forces a new resource to be created.
	ZoneBalance pulumi.BoolPtrOutput `pulumi:"zoneBalance"`
	// A list of Availability Zones in which the Virtual Machines in this Scale Set should be created in. Changing this forces a new resource to be created.
	Zones pulumi.StringArrayOutput `pulumi:"zones"`
}

// NewWindowsVirtualMachineScaleSet registers a new resource with the given unique name, arguments, and options.
func NewWindowsVirtualMachineScaleSet(ctx *pulumi.Context,
	name string, args *WindowsVirtualMachineScaleSetArgs, opts ...pulumi.ResourceOption) (*WindowsVirtualMachineScaleSet, error) {
	if args == nil || args.AdminPassword == nil {
		return nil, errors.New("missing required argument 'AdminPassword'")
	}
	if args == nil || args.AdminUsername == nil {
		return nil, errors.New("missing required argument 'AdminUsername'")
	}
	if args == nil || args.Instances == nil {
		return nil, errors.New("missing required argument 'Instances'")
	}
	if args == nil || args.NetworkInterfaces == nil {
		return nil, errors.New("missing required argument 'NetworkInterfaces'")
	}
	if args == nil || args.OsDisk == nil {
		return nil, errors.New("missing required argument 'OsDisk'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.Sku == nil {
		return nil, errors.New("missing required argument 'Sku'")
	}
	if args == nil {
		args = &WindowsVirtualMachineScaleSetArgs{}
	}
	var resource WindowsVirtualMachineScaleSet
	err := ctx.RegisterResource("azure:compute/windowsVirtualMachineScaleSet:WindowsVirtualMachineScaleSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWindowsVirtualMachineScaleSet gets an existing WindowsVirtualMachineScaleSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWindowsVirtualMachineScaleSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WindowsVirtualMachineScaleSetState, opts ...pulumi.ResourceOption) (*WindowsVirtualMachineScaleSet, error) {
	var resource WindowsVirtualMachineScaleSet
	err := ctx.ReadResource("azure:compute/windowsVirtualMachineScaleSet:WindowsVirtualMachineScaleSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WindowsVirtualMachineScaleSet resources.
type windowsVirtualMachineScaleSetState struct {
	// A `additionalCapabilities` block as defined below.
	AdditionalCapabilities *WindowsVirtualMachineScaleSetAdditionalCapabilities `pulumi:"additionalCapabilities"`
	// One or more `additionalUnattendContent` blocks as defined below.
	AdditionalUnattendContents []WindowsVirtualMachineScaleSetAdditionalUnattendContent `pulumi:"additionalUnattendContents"`
	// The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
	AdminPassword *string `pulumi:"adminPassword"`
	// The username of the local administrator on each Virtual Machine Scale Set instance. Changing this forces a new resource to be created.
	AdminUsername *string `pulumi:"adminUsername"`
	// A `automaticInstanceRepair` block as defined below. To enable the automatic instance repair, this Virtual Machine Scale Set must have a valid `healthProbeId` or an [Application Health Extension](https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-health-extension).
	AutomaticInstanceRepair *WindowsVirtualMachineScaleSetAutomaticInstanceRepair `pulumi:"automaticInstanceRepair"`
	// A `automaticOsUpgradePolicy` block as defined below. This can only be specified when `upgradeMode` is set to `Automatic`.
	AutomaticOsUpgradePolicy *WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicy `pulumi:"automaticOsUpgradePolicy"`
	// A `bootDiagnostics` block as defined below.
	BootDiagnostics *WindowsVirtualMachineScaleSetBootDiagnostics `pulumi:"bootDiagnostics"`
	// The prefix which should be used for the name of the Virtual Machines in this Scale Set. If unspecified this defaults to the value for the `name` field. If the value of the `name` field is not a valid `computerNamePrefix`, then you must specify `computerNamePrefix`.
	ComputerNamePrefix *string `pulumi:"computerNamePrefix"`
	// The Base64-Encoded Custom Data which should be used for this Virtual Machine Scale Set.
	CustomData *string `pulumi:"customData"`
	// One or more `dataDisk` blocks as defined below.
	DataDisks []WindowsVirtualMachineScaleSetDataDisk `pulumi:"dataDisks"`
	// Should Virtual Machine Extensions be run on Overprovisioned Virtual Machines in the Scale Set? Defaults to `false`.
	DoNotRunExtensionsOnOverprovisionedMachines *bool `pulumi:"doNotRunExtensionsOnOverprovisionedMachines"`
	// Are automatic updates enabled for this Virtual Machine? Defaults to `true`.
	EnableAutomaticUpdates *bool `pulumi:"enableAutomaticUpdates"`
	// Should all of the disks (including the temp disk) attached to this Virtual Machine be encrypted by enabling Encryption at Host?
	EncryptionAtHostEnabled *bool `pulumi:"encryptionAtHostEnabled"`
	// The Policy which should be used Virtual Machines are Evicted from the Scale Set. Changing this forces a new resource to be created.
	EvictionPolicy *string `pulumi:"evictionPolicy"`
	// One or more `extension` blocks as defined below
	Extensions []WindowsVirtualMachineScaleSetExtension `pulumi:"extensions"`
	// The ID of a Load Balancer Probe which should be used to determine the health of an instance. Changing this forces a new resource to be created. This is Required and can only be specified when `upgradeMode` is set to `Automatic` or `Rolling`.
	HealthProbeId *string `pulumi:"healthProbeId"`
	// A `identity` block as defined below.
	Identity *WindowsVirtualMachineScaleSetIdentity `pulumi:"identity"`
	// The number of Virtual Machines in the Scale Set.
	Instances *int `pulumi:"instances"`
	// Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing)) which should be used for this Virtual Machine Scale Set. Possible values are `None`, `Windows_Client` and `Windows_Server`. Changing this forces a new resource to be created.
	LicenseType *string `pulumi:"licenseType"`
	// The Azure location where the Windows Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The maximum price you're willing to pay for each Virtual Machine in this Scale Set, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machines in the Scale Set will be evicted using the `evictionPolicy`. Defaults to `-1`, which means that each Virtual Machine in the Scale Set should not be evicted for price reasons.
	MaxBidPrice *float64 `pulumi:"maxBidPrice"`
	// The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// One or more `networkInterface` blocks as defined below.
	NetworkInterfaces []WindowsVirtualMachineScaleSetNetworkInterface `pulumi:"networkInterfaces"`
	// An `osDisk` block as defined below.
	OsDisk *WindowsVirtualMachineScaleSetOsDisk `pulumi:"osDisk"`
	// Should Azure over-provision Virtual Machines in this Scale Set? This means that multiple Virtual Machines will be provisioned and Azure will keep the instances which become available first - which improves provisioning success rates and improves deployment time. You're not billed for these over-provisioned VM's and they don't count towards the Subscription Quota. Defaults to `true`.
	Overprovision *bool `pulumi:"overprovision"`
	// A `plan` block as documented below.
	Plan *WindowsVirtualMachineScaleSetPlan `pulumi:"plan"`
	// The Priority of this Virtual Machine Scale Set. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this value forces a new resource.
	Priority *string `pulumi:"priority"`
	// Should the Azure VM Agent be provisioned on each Virtual Machine in the Scale Set? Defaults to `true`. Changing this value forces a new resource to be created.
	ProvisionVmAgent *bool `pulumi:"provisionVmAgent"`
	// The ID of the Proximity Placement Group in which the Virtual Machine Scale Set should be assigned to. Changing this forces a new resource to be created.
	ProximityPlacementGroupId *string `pulumi:"proximityPlacementGroupId"`
	// The name of the Resource Group in which the Windows Virtual Machine Scale Set should be exist. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A `rollingUpgradePolicy` block as defined below. This is Required and can only be specified when `upgradeMode` is set to `Automatic` or `Rolling`.
	RollingUpgradePolicy *WindowsVirtualMachineScaleSetRollingUpgradePolicy `pulumi:"rollingUpgradePolicy"`
	// The scale-in policy rule that decides which virtual machines are chosen for removal when a Virtual Machine Scale Set is scaled in. Possible values for the scale-in policy rules are `Default`, `NewestVM` and `OldestVM`, defaults to `Default`. For more information about scale in policy, please [refer to this doc](https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-scale-in-policy).
	ScaleInPolicy *string `pulumi:"scaleInPolicy"`
	// One or more `secret` blocks as defined below.
	Secrets []WindowsVirtualMachineScaleSetSecret `pulumi:"secrets"`
	// Should this Virtual Machine Scale Set be limited to a Single Placement Group, which means the number of instances will be capped at 100 Virtual Machines. Defaults to `true`.
	SinglePlacementGroup *bool `pulumi:"singlePlacementGroup"`
	// The Virtual Machine SKU for the Scale Set, such as `Standard_F2`.
	Sku *string `pulumi:"sku"`
	// The ID of an Image which each Virtual Machine in this Scale Set should be based on.
	SourceImageId *string `pulumi:"sourceImageId"`
	// A `sourceImageReference` block as defined below.
	SourceImageReference *WindowsVirtualMachineScaleSetSourceImageReference `pulumi:"sourceImageReference"`
	// A mapping of tags which should be assigned to this Virtual Machine Scale Set.
	Tags map[string]string `pulumi:"tags"`
	// A `terminateNotification` block as defined below.
	TerminateNotification *WindowsVirtualMachineScaleSetTerminateNotification `pulumi:"terminateNotification"`
	// Specifies the time zone of the virtual machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
	Timezone *string `pulumi:"timezone"`
	// The Unique ID for this Windows Virtual Machine Scale Set.
	UniqueId *string `pulumi:"uniqueId"`
	// Specifies how Upgrades (e.g. changing the Image/SKU) should be performed to Virtual Machine Instances. Possible values are `Automatic`, `Manual` and `Rolling`. Defaults to `Manual`.
	UpgradeMode *string `pulumi:"upgradeMode"`
	// One or more `winrmListener` blocks as defined below.
	WinrmListeners []WindowsVirtualMachineScaleSetWinrmListener `pulumi:"winrmListeners"`
	// Should the Virtual Machines in this Scale Set be strictly evenly distributed across Availability Zones? Defaults to `false`. Changing this forces a new resource to be created.
	ZoneBalance *bool `pulumi:"zoneBalance"`
	// A list of Availability Zones in which the Virtual Machines in this Scale Set should be created in. Changing this forces a new resource to be created.
	Zones []string `pulumi:"zones"`
}

type WindowsVirtualMachineScaleSetState struct {
	// A `additionalCapabilities` block as defined below.
	AdditionalCapabilities WindowsVirtualMachineScaleSetAdditionalCapabilitiesPtrInput
	// One or more `additionalUnattendContent` blocks as defined below.
	AdditionalUnattendContents WindowsVirtualMachineScaleSetAdditionalUnattendContentArrayInput
	// The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
	AdminPassword pulumi.StringPtrInput
	// The username of the local administrator on each Virtual Machine Scale Set instance. Changing this forces a new resource to be created.
	AdminUsername pulumi.StringPtrInput
	// A `automaticInstanceRepair` block as defined below. To enable the automatic instance repair, this Virtual Machine Scale Set must have a valid `healthProbeId` or an [Application Health Extension](https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-health-extension).
	AutomaticInstanceRepair WindowsVirtualMachineScaleSetAutomaticInstanceRepairPtrInput
	// A `automaticOsUpgradePolicy` block as defined below. This can only be specified when `upgradeMode` is set to `Automatic`.
	AutomaticOsUpgradePolicy WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicyPtrInput
	// A `bootDiagnostics` block as defined below.
	BootDiagnostics WindowsVirtualMachineScaleSetBootDiagnosticsPtrInput
	// The prefix which should be used for the name of the Virtual Machines in this Scale Set. If unspecified this defaults to the value for the `name` field. If the value of the `name` field is not a valid `computerNamePrefix`, then you must specify `computerNamePrefix`.
	ComputerNamePrefix pulumi.StringPtrInput
	// The Base64-Encoded Custom Data which should be used for this Virtual Machine Scale Set.
	CustomData pulumi.StringPtrInput
	// One or more `dataDisk` blocks as defined below.
	DataDisks WindowsVirtualMachineScaleSetDataDiskArrayInput
	// Should Virtual Machine Extensions be run on Overprovisioned Virtual Machines in the Scale Set? Defaults to `false`.
	DoNotRunExtensionsOnOverprovisionedMachines pulumi.BoolPtrInput
	// Are automatic updates enabled for this Virtual Machine? Defaults to `true`.
	EnableAutomaticUpdates pulumi.BoolPtrInput
	// Should all of the disks (including the temp disk) attached to this Virtual Machine be encrypted by enabling Encryption at Host?
	EncryptionAtHostEnabled pulumi.BoolPtrInput
	// The Policy which should be used Virtual Machines are Evicted from the Scale Set. Changing this forces a new resource to be created.
	EvictionPolicy pulumi.StringPtrInput
	// One or more `extension` blocks as defined below
	Extensions WindowsVirtualMachineScaleSetExtensionArrayInput
	// The ID of a Load Balancer Probe which should be used to determine the health of an instance. Changing this forces a new resource to be created. This is Required and can only be specified when `upgradeMode` is set to `Automatic` or `Rolling`.
	HealthProbeId pulumi.StringPtrInput
	// A `identity` block as defined below.
	Identity WindowsVirtualMachineScaleSetIdentityPtrInput
	// The number of Virtual Machines in the Scale Set.
	Instances pulumi.IntPtrInput
	// Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing)) which should be used for this Virtual Machine Scale Set. Possible values are `None`, `Windows_Client` and `Windows_Server`. Changing this forces a new resource to be created.
	LicenseType pulumi.StringPtrInput
	// The Azure location where the Windows Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The maximum price you're willing to pay for each Virtual Machine in this Scale Set, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machines in the Scale Set will be evicted using the `evictionPolicy`. Defaults to `-1`, which means that each Virtual Machine in the Scale Set should not be evicted for price reasons.
	MaxBidPrice pulumi.Float64PtrInput
	// The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// One or more `networkInterface` blocks as defined below.
	NetworkInterfaces WindowsVirtualMachineScaleSetNetworkInterfaceArrayInput
	// An `osDisk` block as defined below.
	OsDisk WindowsVirtualMachineScaleSetOsDiskPtrInput
	// Should Azure over-provision Virtual Machines in this Scale Set? This means that multiple Virtual Machines will be provisioned and Azure will keep the instances which become available first - which improves provisioning success rates and improves deployment time. You're not billed for these over-provisioned VM's and they don't count towards the Subscription Quota. Defaults to `true`.
	Overprovision pulumi.BoolPtrInput
	// A `plan` block as documented below.
	Plan WindowsVirtualMachineScaleSetPlanPtrInput
	// The Priority of this Virtual Machine Scale Set. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this value forces a new resource.
	Priority pulumi.StringPtrInput
	// Should the Azure VM Agent be provisioned on each Virtual Machine in the Scale Set? Defaults to `true`. Changing this value forces a new resource to be created.
	ProvisionVmAgent pulumi.BoolPtrInput
	// The ID of the Proximity Placement Group in which the Virtual Machine Scale Set should be assigned to. Changing this forces a new resource to be created.
	ProximityPlacementGroupId pulumi.StringPtrInput
	// The name of the Resource Group in which the Windows Virtual Machine Scale Set should be exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A `rollingUpgradePolicy` block as defined below. This is Required and can only be specified when `upgradeMode` is set to `Automatic` or `Rolling`.
	RollingUpgradePolicy WindowsVirtualMachineScaleSetRollingUpgradePolicyPtrInput
	// The scale-in policy rule that decides which virtual machines are chosen for removal when a Virtual Machine Scale Set is scaled in. Possible values for the scale-in policy rules are `Default`, `NewestVM` and `OldestVM`, defaults to `Default`. For more information about scale in policy, please [refer to this doc](https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-scale-in-policy).
	ScaleInPolicy pulumi.StringPtrInput
	// One or more `secret` blocks as defined below.
	Secrets WindowsVirtualMachineScaleSetSecretArrayInput
	// Should this Virtual Machine Scale Set be limited to a Single Placement Group, which means the number of instances will be capped at 100 Virtual Machines. Defaults to `true`.
	SinglePlacementGroup pulumi.BoolPtrInput
	// The Virtual Machine SKU for the Scale Set, such as `Standard_F2`.
	Sku pulumi.StringPtrInput
	// The ID of an Image which each Virtual Machine in this Scale Set should be based on.
	SourceImageId pulumi.StringPtrInput
	// A `sourceImageReference` block as defined below.
	SourceImageReference WindowsVirtualMachineScaleSetSourceImageReferencePtrInput
	// A mapping of tags which should be assigned to this Virtual Machine Scale Set.
	Tags pulumi.StringMapInput
	// A `terminateNotification` block as defined below.
	TerminateNotification WindowsVirtualMachineScaleSetTerminateNotificationPtrInput
	// Specifies the time zone of the virtual machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
	Timezone pulumi.StringPtrInput
	// The Unique ID for this Windows Virtual Machine Scale Set.
	UniqueId pulumi.StringPtrInput
	// Specifies how Upgrades (e.g. changing the Image/SKU) should be performed to Virtual Machine Instances. Possible values are `Automatic`, `Manual` and `Rolling`. Defaults to `Manual`.
	UpgradeMode pulumi.StringPtrInput
	// One or more `winrmListener` blocks as defined below.
	WinrmListeners WindowsVirtualMachineScaleSetWinrmListenerArrayInput
	// Should the Virtual Machines in this Scale Set be strictly evenly distributed across Availability Zones? Defaults to `false`. Changing this forces a new resource to be created.
	ZoneBalance pulumi.BoolPtrInput
	// A list of Availability Zones in which the Virtual Machines in this Scale Set should be created in. Changing this forces a new resource to be created.
	Zones pulumi.StringArrayInput
}

func (WindowsVirtualMachineScaleSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*windowsVirtualMachineScaleSetState)(nil)).Elem()
}

type windowsVirtualMachineScaleSetArgs struct {
	// A `additionalCapabilities` block as defined below.
	AdditionalCapabilities *WindowsVirtualMachineScaleSetAdditionalCapabilities `pulumi:"additionalCapabilities"`
	// One or more `additionalUnattendContent` blocks as defined below.
	AdditionalUnattendContents []WindowsVirtualMachineScaleSetAdditionalUnattendContent `pulumi:"additionalUnattendContents"`
	// The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
	AdminPassword string `pulumi:"adminPassword"`
	// The username of the local administrator on each Virtual Machine Scale Set instance. Changing this forces a new resource to be created.
	AdminUsername string `pulumi:"adminUsername"`
	// A `automaticInstanceRepair` block as defined below. To enable the automatic instance repair, this Virtual Machine Scale Set must have a valid `healthProbeId` or an [Application Health Extension](https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-health-extension).
	AutomaticInstanceRepair *WindowsVirtualMachineScaleSetAutomaticInstanceRepair `pulumi:"automaticInstanceRepair"`
	// A `automaticOsUpgradePolicy` block as defined below. This can only be specified when `upgradeMode` is set to `Automatic`.
	AutomaticOsUpgradePolicy *WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicy `pulumi:"automaticOsUpgradePolicy"`
	// A `bootDiagnostics` block as defined below.
	BootDiagnostics *WindowsVirtualMachineScaleSetBootDiagnostics `pulumi:"bootDiagnostics"`
	// The prefix which should be used for the name of the Virtual Machines in this Scale Set. If unspecified this defaults to the value for the `name` field. If the value of the `name` field is not a valid `computerNamePrefix`, then you must specify `computerNamePrefix`.
	ComputerNamePrefix *string `pulumi:"computerNamePrefix"`
	// The Base64-Encoded Custom Data which should be used for this Virtual Machine Scale Set.
	CustomData *string `pulumi:"customData"`
	// One or more `dataDisk` blocks as defined below.
	DataDisks []WindowsVirtualMachineScaleSetDataDisk `pulumi:"dataDisks"`
	// Should Virtual Machine Extensions be run on Overprovisioned Virtual Machines in the Scale Set? Defaults to `false`.
	DoNotRunExtensionsOnOverprovisionedMachines *bool `pulumi:"doNotRunExtensionsOnOverprovisionedMachines"`
	// Are automatic updates enabled for this Virtual Machine? Defaults to `true`.
	EnableAutomaticUpdates *bool `pulumi:"enableAutomaticUpdates"`
	// Should all of the disks (including the temp disk) attached to this Virtual Machine be encrypted by enabling Encryption at Host?
	EncryptionAtHostEnabled *bool `pulumi:"encryptionAtHostEnabled"`
	// The Policy which should be used Virtual Machines are Evicted from the Scale Set. Changing this forces a new resource to be created.
	EvictionPolicy *string `pulumi:"evictionPolicy"`
	// One or more `extension` blocks as defined below
	Extensions []WindowsVirtualMachineScaleSetExtension `pulumi:"extensions"`
	// The ID of a Load Balancer Probe which should be used to determine the health of an instance. Changing this forces a new resource to be created. This is Required and can only be specified when `upgradeMode` is set to `Automatic` or `Rolling`.
	HealthProbeId *string `pulumi:"healthProbeId"`
	// A `identity` block as defined below.
	Identity *WindowsVirtualMachineScaleSetIdentity `pulumi:"identity"`
	// The number of Virtual Machines in the Scale Set.
	Instances int `pulumi:"instances"`
	// Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing)) which should be used for this Virtual Machine Scale Set. Possible values are `None`, `Windows_Client` and `Windows_Server`. Changing this forces a new resource to be created.
	LicenseType *string `pulumi:"licenseType"`
	// The Azure location where the Windows Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The maximum price you're willing to pay for each Virtual Machine in this Scale Set, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machines in the Scale Set will be evicted using the `evictionPolicy`. Defaults to `-1`, which means that each Virtual Machine in the Scale Set should not be evicted for price reasons.
	MaxBidPrice *float64 `pulumi:"maxBidPrice"`
	// The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// One or more `networkInterface` blocks as defined below.
	NetworkInterfaces []WindowsVirtualMachineScaleSetNetworkInterface `pulumi:"networkInterfaces"`
	// An `osDisk` block as defined below.
	OsDisk WindowsVirtualMachineScaleSetOsDisk `pulumi:"osDisk"`
	// Should Azure over-provision Virtual Machines in this Scale Set? This means that multiple Virtual Machines will be provisioned and Azure will keep the instances which become available first - which improves provisioning success rates and improves deployment time. You're not billed for these over-provisioned VM's and they don't count towards the Subscription Quota. Defaults to `true`.
	Overprovision *bool `pulumi:"overprovision"`
	// A `plan` block as documented below.
	Plan *WindowsVirtualMachineScaleSetPlan `pulumi:"plan"`
	// The Priority of this Virtual Machine Scale Set. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this value forces a new resource.
	Priority *string `pulumi:"priority"`
	// Should the Azure VM Agent be provisioned on each Virtual Machine in the Scale Set? Defaults to `true`. Changing this value forces a new resource to be created.
	ProvisionVmAgent *bool `pulumi:"provisionVmAgent"`
	// The ID of the Proximity Placement Group in which the Virtual Machine Scale Set should be assigned to. Changing this forces a new resource to be created.
	ProximityPlacementGroupId *string `pulumi:"proximityPlacementGroupId"`
	// The name of the Resource Group in which the Windows Virtual Machine Scale Set should be exist. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A `rollingUpgradePolicy` block as defined below. This is Required and can only be specified when `upgradeMode` is set to `Automatic` or `Rolling`.
	RollingUpgradePolicy *WindowsVirtualMachineScaleSetRollingUpgradePolicy `pulumi:"rollingUpgradePolicy"`
	// The scale-in policy rule that decides which virtual machines are chosen for removal when a Virtual Machine Scale Set is scaled in. Possible values for the scale-in policy rules are `Default`, `NewestVM` and `OldestVM`, defaults to `Default`. For more information about scale in policy, please [refer to this doc](https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-scale-in-policy).
	ScaleInPolicy *string `pulumi:"scaleInPolicy"`
	// One or more `secret` blocks as defined below.
	Secrets []WindowsVirtualMachineScaleSetSecret `pulumi:"secrets"`
	// Should this Virtual Machine Scale Set be limited to a Single Placement Group, which means the number of instances will be capped at 100 Virtual Machines. Defaults to `true`.
	SinglePlacementGroup *bool `pulumi:"singlePlacementGroup"`
	// The Virtual Machine SKU for the Scale Set, such as `Standard_F2`.
	Sku string `pulumi:"sku"`
	// The ID of an Image which each Virtual Machine in this Scale Set should be based on.
	SourceImageId *string `pulumi:"sourceImageId"`
	// A `sourceImageReference` block as defined below.
	SourceImageReference *WindowsVirtualMachineScaleSetSourceImageReference `pulumi:"sourceImageReference"`
	// A mapping of tags which should be assigned to this Virtual Machine Scale Set.
	Tags map[string]string `pulumi:"tags"`
	// A `terminateNotification` block as defined below.
	TerminateNotification *WindowsVirtualMachineScaleSetTerminateNotification `pulumi:"terminateNotification"`
	// Specifies the time zone of the virtual machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
	Timezone *string `pulumi:"timezone"`
	// Specifies how Upgrades (e.g. changing the Image/SKU) should be performed to Virtual Machine Instances. Possible values are `Automatic`, `Manual` and `Rolling`. Defaults to `Manual`.
	UpgradeMode *string `pulumi:"upgradeMode"`
	// One or more `winrmListener` blocks as defined below.
	WinrmListeners []WindowsVirtualMachineScaleSetWinrmListener `pulumi:"winrmListeners"`
	// Should the Virtual Machines in this Scale Set be strictly evenly distributed across Availability Zones? Defaults to `false`. Changing this forces a new resource to be created.
	ZoneBalance *bool `pulumi:"zoneBalance"`
	// A list of Availability Zones in which the Virtual Machines in this Scale Set should be created in. Changing this forces a new resource to be created.
	Zones []string `pulumi:"zones"`
}

// The set of arguments for constructing a WindowsVirtualMachineScaleSet resource.
type WindowsVirtualMachineScaleSetArgs struct {
	// A `additionalCapabilities` block as defined below.
	AdditionalCapabilities WindowsVirtualMachineScaleSetAdditionalCapabilitiesPtrInput
	// One or more `additionalUnattendContent` blocks as defined below.
	AdditionalUnattendContents WindowsVirtualMachineScaleSetAdditionalUnattendContentArrayInput
	// The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
	AdminPassword pulumi.StringInput
	// The username of the local administrator on each Virtual Machine Scale Set instance. Changing this forces a new resource to be created.
	AdminUsername pulumi.StringInput
	// A `automaticInstanceRepair` block as defined below. To enable the automatic instance repair, this Virtual Machine Scale Set must have a valid `healthProbeId` or an [Application Health Extension](https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-health-extension).
	AutomaticInstanceRepair WindowsVirtualMachineScaleSetAutomaticInstanceRepairPtrInput
	// A `automaticOsUpgradePolicy` block as defined below. This can only be specified when `upgradeMode` is set to `Automatic`.
	AutomaticOsUpgradePolicy WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicyPtrInput
	// A `bootDiagnostics` block as defined below.
	BootDiagnostics WindowsVirtualMachineScaleSetBootDiagnosticsPtrInput
	// The prefix which should be used for the name of the Virtual Machines in this Scale Set. If unspecified this defaults to the value for the `name` field. If the value of the `name` field is not a valid `computerNamePrefix`, then you must specify `computerNamePrefix`.
	ComputerNamePrefix pulumi.StringPtrInput
	// The Base64-Encoded Custom Data which should be used for this Virtual Machine Scale Set.
	CustomData pulumi.StringPtrInput
	// One or more `dataDisk` blocks as defined below.
	DataDisks WindowsVirtualMachineScaleSetDataDiskArrayInput
	// Should Virtual Machine Extensions be run on Overprovisioned Virtual Machines in the Scale Set? Defaults to `false`.
	DoNotRunExtensionsOnOverprovisionedMachines pulumi.BoolPtrInput
	// Are automatic updates enabled for this Virtual Machine? Defaults to `true`.
	EnableAutomaticUpdates pulumi.BoolPtrInput
	// Should all of the disks (including the temp disk) attached to this Virtual Machine be encrypted by enabling Encryption at Host?
	EncryptionAtHostEnabled pulumi.BoolPtrInput
	// The Policy which should be used Virtual Machines are Evicted from the Scale Set. Changing this forces a new resource to be created.
	EvictionPolicy pulumi.StringPtrInput
	// One or more `extension` blocks as defined below
	Extensions WindowsVirtualMachineScaleSetExtensionArrayInput
	// The ID of a Load Balancer Probe which should be used to determine the health of an instance. Changing this forces a new resource to be created. This is Required and can only be specified when `upgradeMode` is set to `Automatic` or `Rolling`.
	HealthProbeId pulumi.StringPtrInput
	// A `identity` block as defined below.
	Identity WindowsVirtualMachineScaleSetIdentityPtrInput
	// The number of Virtual Machines in the Scale Set.
	Instances pulumi.IntInput
	// Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing)) which should be used for this Virtual Machine Scale Set. Possible values are `None`, `Windows_Client` and `Windows_Server`. Changing this forces a new resource to be created.
	LicenseType pulumi.StringPtrInput
	// The Azure location where the Windows Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The maximum price you're willing to pay for each Virtual Machine in this Scale Set, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machines in the Scale Set will be evicted using the `evictionPolicy`. Defaults to `-1`, which means that each Virtual Machine in the Scale Set should not be evicted for price reasons.
	MaxBidPrice pulumi.Float64PtrInput
	// The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// One or more `networkInterface` blocks as defined below.
	NetworkInterfaces WindowsVirtualMachineScaleSetNetworkInterfaceArrayInput
	// An `osDisk` block as defined below.
	OsDisk WindowsVirtualMachineScaleSetOsDiskInput
	// Should Azure over-provision Virtual Machines in this Scale Set? This means that multiple Virtual Machines will be provisioned and Azure will keep the instances which become available first - which improves provisioning success rates and improves deployment time. You're not billed for these over-provisioned VM's and they don't count towards the Subscription Quota. Defaults to `true`.
	Overprovision pulumi.BoolPtrInput
	// A `plan` block as documented below.
	Plan WindowsVirtualMachineScaleSetPlanPtrInput
	// The Priority of this Virtual Machine Scale Set. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this value forces a new resource.
	Priority pulumi.StringPtrInput
	// Should the Azure VM Agent be provisioned on each Virtual Machine in the Scale Set? Defaults to `true`. Changing this value forces a new resource to be created.
	ProvisionVmAgent pulumi.BoolPtrInput
	// The ID of the Proximity Placement Group in which the Virtual Machine Scale Set should be assigned to. Changing this forces a new resource to be created.
	ProximityPlacementGroupId pulumi.StringPtrInput
	// The name of the Resource Group in which the Windows Virtual Machine Scale Set should be exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A `rollingUpgradePolicy` block as defined below. This is Required and can only be specified when `upgradeMode` is set to `Automatic` or `Rolling`.
	RollingUpgradePolicy WindowsVirtualMachineScaleSetRollingUpgradePolicyPtrInput
	// The scale-in policy rule that decides which virtual machines are chosen for removal when a Virtual Machine Scale Set is scaled in. Possible values for the scale-in policy rules are `Default`, `NewestVM` and `OldestVM`, defaults to `Default`. For more information about scale in policy, please [refer to this doc](https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-scale-in-policy).
	ScaleInPolicy pulumi.StringPtrInput
	// One or more `secret` blocks as defined below.
	Secrets WindowsVirtualMachineScaleSetSecretArrayInput
	// Should this Virtual Machine Scale Set be limited to a Single Placement Group, which means the number of instances will be capped at 100 Virtual Machines. Defaults to `true`.
	SinglePlacementGroup pulumi.BoolPtrInput
	// The Virtual Machine SKU for the Scale Set, such as `Standard_F2`.
	Sku pulumi.StringInput
	// The ID of an Image which each Virtual Machine in this Scale Set should be based on.
	SourceImageId pulumi.StringPtrInput
	// A `sourceImageReference` block as defined below.
	SourceImageReference WindowsVirtualMachineScaleSetSourceImageReferencePtrInput
	// A mapping of tags which should be assigned to this Virtual Machine Scale Set.
	Tags pulumi.StringMapInput
	// A `terminateNotification` block as defined below.
	TerminateNotification WindowsVirtualMachineScaleSetTerminateNotificationPtrInput
	// Specifies the time zone of the virtual machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
	Timezone pulumi.StringPtrInput
	// Specifies how Upgrades (e.g. changing the Image/SKU) should be performed to Virtual Machine Instances. Possible values are `Automatic`, `Manual` and `Rolling`. Defaults to `Manual`.
	UpgradeMode pulumi.StringPtrInput
	// One or more `winrmListener` blocks as defined below.
	WinrmListeners WindowsVirtualMachineScaleSetWinrmListenerArrayInput
	// Should the Virtual Machines in this Scale Set be strictly evenly distributed across Availability Zones? Defaults to `false`. Changing this forces a new resource to be created.
	ZoneBalance pulumi.BoolPtrInput
	// A list of Availability Zones in which the Virtual Machines in this Scale Set should be created in. Changing this forces a new resource to be created.
	Zones pulumi.StringArrayInput
}

func (WindowsVirtualMachineScaleSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*windowsVirtualMachineScaleSetArgs)(nil)).Elem()
}

type WindowsVirtualMachineScaleSetInput interface {
	pulumi.Input

	ToWindowsVirtualMachineScaleSetOutput() WindowsVirtualMachineScaleSetOutput
	ToWindowsVirtualMachineScaleSetOutputWithContext(ctx context.Context) WindowsVirtualMachineScaleSetOutput
}

func (WindowsVirtualMachineScaleSet) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsVirtualMachineScaleSet)(nil)).Elem()
}

func (i WindowsVirtualMachineScaleSet) ToWindowsVirtualMachineScaleSetOutput() WindowsVirtualMachineScaleSetOutput {
	return i.ToWindowsVirtualMachineScaleSetOutputWithContext(context.Background())
}

func (i WindowsVirtualMachineScaleSet) ToWindowsVirtualMachineScaleSetOutputWithContext(ctx context.Context) WindowsVirtualMachineScaleSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsVirtualMachineScaleSetOutput)
}

type WindowsVirtualMachineScaleSetOutput struct {
	*pulumi.OutputState
}

func (WindowsVirtualMachineScaleSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsVirtualMachineScaleSetOutput)(nil)).Elem()
}

func (o WindowsVirtualMachineScaleSetOutput) ToWindowsVirtualMachineScaleSetOutput() WindowsVirtualMachineScaleSetOutput {
	return o
}

func (o WindowsVirtualMachineScaleSetOutput) ToWindowsVirtualMachineScaleSetOutputWithContext(ctx context.Context) WindowsVirtualMachineScaleSetOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(WindowsVirtualMachineScaleSetOutput{})
}
