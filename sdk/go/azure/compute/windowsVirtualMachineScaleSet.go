// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Windows Virtual Machine Scale Set.
//
// ## Disclaimers
//
// > **NOTE:**: All arguments including the administrator login and password will be stored in the raw state as plain-text.
//
// > **NOTE:** This provider will automatically update & reimage the nodes in the Scale Set (if Required) during an Update - this behaviour can be configured using the `features` setting within the Provider block.
//
// [> **NOTE:** This resource does not support Unmanaged Disks. If you need to use Unmanaged Disks you can continue to use the `compute.ScaleSet` resource instead
//
// ## Example Usage
//
// This example provisions a basic Windows Virtual Machine Scale Set on an internal network.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/compute"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "exampleVirtualNetwork", &network.VirtualNetworkArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			internal, err := network.NewSubnet(ctx, "internal", &network.SubnetArgs{
//				ResourceGroupName:  exampleResourceGroup.Name,
//				VirtualNetworkName: exampleVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.0.2.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = compute.NewWindowsVirtualMachineScaleSet(ctx, "exampleWindowsVirtualMachineScaleSet", &compute.WindowsVirtualMachineScaleSetArgs{
//				ResourceGroupName:  exampleResourceGroup.Name,
//				Location:           exampleResourceGroup.Location,
//				Sku:                pulumi.String("Standard_F2"),
//				Instances:          pulumi.Int(1),
//				AdminPassword:      pulumi.String("P@55w0rd1234!"),
//				AdminUsername:      pulumi.String("adminuser"),
//				ComputerNamePrefix: pulumi.String("vm-"),
//				SourceImageReference: &compute.WindowsVirtualMachineScaleSetSourceImageReferenceArgs{
//					Publisher: pulumi.String("MicrosoftWindowsServer"),
//					Offer:     pulumi.String("WindowsServer"),
//					Sku:       pulumi.String("2016-Datacenter-Server-Core"),
//					Version:   pulumi.String("latest"),
//				},
//				OsDisk: &compute.WindowsVirtualMachineScaleSetOsDiskArgs{
//					StorageAccountType: pulumi.String("Standard_LRS"),
//					Caching:            pulumi.String("ReadWrite"),
//				},
//				NetworkInterfaces: compute.WindowsVirtualMachineScaleSetNetworkInterfaceArray{
//					&compute.WindowsVirtualMachineScaleSetNetworkInterfaceArgs{
//						Name:    pulumi.String("example"),
//						Primary: pulumi.Bool(true),
//						IpConfigurations: compute.WindowsVirtualMachineScaleSetNetworkInterfaceIpConfigurationArray{
//							&compute.WindowsVirtualMachineScaleSetNetworkInterfaceIpConfigurationArgs{
//								Name:     pulumi.String("internal"),
//								Primary:  pulumi.Bool(true),
//								SubnetId: internal.ID(),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Windows Virtual Machine Scale Sets can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:compute/windowsVirtualMachineScaleSet:WindowsVirtualMachineScaleSet example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Compute/virtualMachineScaleSets/scaleset1
//
// ```
type WindowsVirtualMachineScaleSet struct {
	pulumi.CustomResourceState

	// An `additionalCapabilities` block as defined below.
	AdditionalCapabilities WindowsVirtualMachineScaleSetAdditionalCapabilitiesPtrOutput `pulumi:"additionalCapabilities"`
	// One or more `additionalUnattendContent` blocks as defined below. Changing this forces a new resource to be created.
	AdditionalUnattendContents WindowsVirtualMachineScaleSetAdditionalUnattendContentArrayOutput `pulumi:"additionalUnattendContents"`
	// The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
	AdminPassword pulumi.StringOutput `pulumi:"adminPassword"`
	// The username of the local administrator on each Virtual Machine Scale Set instance. Changing this forces a new resource to be created.
	AdminUsername pulumi.StringOutput `pulumi:"adminUsername"`
	// An `automaticInstanceRepair` block as defined below. To enable the automatic instance repair, this Virtual Machine Scale Set must have a valid `healthProbeId` or an [Application Health Extension](https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-health-extension).
	//
	// > **NOTE:** For more information about Automatic Instance Repair, please refer to [this doc](https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-automatic-instance-repairs).
	AutomaticInstanceRepair WindowsVirtualMachineScaleSetAutomaticInstanceRepairOutput `pulumi:"automaticInstanceRepair"`
	// An `automaticOsUpgradePolicy` block as defined below. This can only be specified when `upgradeMode` is set to either `Automatic` or `Rolling`.
	AutomaticOsUpgradePolicy WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicyPtrOutput `pulumi:"automaticOsUpgradePolicy"`
	// A `bootDiagnostics` block as defined below.
	BootDiagnostics WindowsVirtualMachineScaleSetBootDiagnosticsPtrOutput `pulumi:"bootDiagnostics"`
	// Specifies the ID of the Capacity Reservation Group which the Virtual Machine Scale Set should be allocated to. Changing this forces a new resource to be created.
	//
	// > **NOTE:** `capacityReservationGroupId` cannot be used with `proximityPlacementGroupId`
	//
	// > **NOTE:** `singlePlacementGroup` must be set to `false` when `capacityReservationGroupId` is specified.
	CapacityReservationGroupId pulumi.StringPtrOutput `pulumi:"capacityReservationGroupId"`
	// The prefix which should be used for the name of the Virtual Machines in this Scale Set. If unspecified this defaults to the value for the `name` field. If the value of the `name` field is not a valid `computerNamePrefix`, then you must specify `computerNamePrefix`. Changing this forces a new resource to be created.
	ComputerNamePrefix pulumi.StringOutput `pulumi:"computerNamePrefix"`
	// The Base64-Encoded Custom Data which should be used for this Virtual Machine Scale Set.
	//
	// > **NOTE:** When Custom Data has been configured, it's not possible to remove it without tainting the Virtual Machine Scale Set, due to a limitation of the Azure API.
	CustomData pulumi.StringPtrOutput `pulumi:"customData"`
	// One or more `dataDisk` blocks as defined below.
	DataDisks WindowsVirtualMachineScaleSetDataDiskArrayOutput `pulumi:"dataDisks"`
	// Should Virtual Machine Extensions be run on Overprovisioned Virtual Machines in the Scale Set? Defaults to `false`.
	DoNotRunExtensionsOnOverprovisionedMachines pulumi.BoolPtrOutput `pulumi:"doNotRunExtensionsOnOverprovisionedMachines"`
	// Specifies the Edge Zone within the Azure Region where this Windows Virtual Machine Scale Set should exist. Changing this forces a new Windows Virtual Machine Scale Set to be created.
	EdgeZone pulumi.StringPtrOutput `pulumi:"edgeZone"`
	// Are automatic updates enabled for this Virtual Machine? Defaults to `true`.
	EnableAutomaticUpdates pulumi.BoolPtrOutput `pulumi:"enableAutomaticUpdates"`
	// Should all of the disks (including the temp disk) attached to this Virtual Machine be encrypted by enabling Encryption at Host?
	EncryptionAtHostEnabled pulumi.BoolPtrOutput `pulumi:"encryptionAtHostEnabled"`
	// Specifies the eviction policy for Virtual Machines in this Scale Set. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** This can only be configured when `priority` is set to `Spot`.
	EvictionPolicy pulumi.StringPtrOutput `pulumi:"evictionPolicy"`
	// Should extension operations be allowed on the Virtual Machine Scale Set? Possible values are `true` or `false`. Defaults to `true`. Changing this forces a new Windows Virtual Machine Scale Set to be created.
	//
	// > **NOTE:** `extensionOperationsEnabled` may only be set to `false` if there are no extensions defined in the `extension` field.
	ExtensionOperationsEnabled pulumi.BoolOutput `pulumi:"extensionOperationsEnabled"`
	// One or more `extension` blocks as defined below
	Extensions WindowsVirtualMachineScaleSetExtensionArrayOutput `pulumi:"extensions"`
	// Specifies the duration allocated for all extensions to start. The time duration should be between `15` minutes and `120` minutes (inclusive) and should be specified in ISO 8601 format. Defaults to `PT1H30M`.
	ExtensionsTimeBudget pulumi.StringPtrOutput `pulumi:"extensionsTimeBudget"`
	// One or more `galleryApplication` blocks as defined below.
	GalleryApplication WindowsVirtualMachineScaleSetGalleryApplicationArrayOutput `pulumi:"galleryApplication"`
	// Deprecated: `gallery_applications` has been renamed to `gallery_application` and will be deprecated in 4.0
	GalleryApplications WindowsVirtualMachineScaleSetGalleryApplicationArrayOutput `pulumi:"galleryApplications"`
	// The ID of a Load Balancer Probe which should be used to determine the health of an instance. This is Required and can only be specified when `upgradeMode` is set to `Automatic` or `Rolling`.
	HealthProbeId pulumi.StringPtrOutput `pulumi:"healthProbeId"`
	// Specifies the ID of the dedicated host group that the virtual machine scale set resides in. Changing this forces a new resource to be created.
	HostGroupId pulumi.StringPtrOutput `pulumi:"hostGroupId"`
	// An `identity` block as defined below.
	Identity WindowsVirtualMachineScaleSetIdentityPtrOutput `pulumi:"identity"`
	// The number of Virtual Machines in the Scale Set.
	//
	// > **NOTE:** If you're using AutoScaling, you may wish to use [`Ignore Changes` functionality](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) to ignore changes to this field.
	Instances pulumi.IntOutput `pulumi:"instances"`
	// Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing)) which should be used for this Virtual Machine Scale Set. Possible values are `None`, `Windows_Client` and `Windows_Server`.
	LicenseType pulumi.StringPtrOutput `pulumi:"licenseType"`
	// The Azure location where the Windows Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The maximum price you're willing to pay for each Virtual Machine in this Scale Set, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machines in the Scale Set will be evicted using the `evictionPolicy`. Defaults to `-1`, which means that each Virtual Machine in the Scale Set should not be evicted for price reasons.
	//
	// > **NOTE:** This can only be configured when `priority` is set to `Spot`.
	MaxBidPrice pulumi.Float64PtrOutput `pulumi:"maxBidPrice"`
	// The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// One or more `networkInterface` blocks as defined below.
	NetworkInterfaces WindowsVirtualMachineScaleSetNetworkInterfaceArrayOutput `pulumi:"networkInterfaces"`
	// An `osDisk` block as defined below.
	OsDisk WindowsVirtualMachineScaleSetOsDiskOutput `pulumi:"osDisk"`
	// Should Azure over-provision Virtual Machines in this Scale Set? This means that multiple Virtual Machines will be provisioned and Azure will keep the instances which become available first - which improves provisioning success rates and improves deployment time. You're not billed for these over-provisioned VM's and they don't count towards the Subscription Quota. Defaults to `true`.
	Overprovision pulumi.BoolPtrOutput `pulumi:"overprovision"`
	// A `plan` block as defined below. Changing this forces a new resource to be created.
	//
	// > **NOTE:** When using an image from Azure Marketplace a `plan` must be specified.
	Plan WindowsVirtualMachineScaleSetPlanPtrOutput `pulumi:"plan"`
	// Specifies the number of fault domains that are used by this Linux Virtual Machine Scale Set. Changing this forces a new resource to be created.
	PlatformFaultDomainCount pulumi.IntOutput `pulumi:"platformFaultDomainCount"`
	// The Priority of this Virtual Machine Scale Set. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this value forces a new resource.
	//
	// > **NOTE:** When `priority` is set to `Spot` an `evictionPolicy` must be specified.
	Priority pulumi.StringPtrOutput `pulumi:"priority"`
	// Should the Azure VM Agent be provisioned on each Virtual Machine in the Scale Set? Defaults to `true`. Changing this value forces a new resource to be created.
	ProvisionVmAgent pulumi.BoolPtrOutput `pulumi:"provisionVmAgent"`
	// The ID of the Proximity Placement Group in which the Virtual Machine Scale Set should be assigned to. Changing this forces a new resource to be created.
	ProximityPlacementGroupId pulumi.StringPtrOutput `pulumi:"proximityPlacementGroupId"`
	// The name of the Resource Group in which the Windows Virtual Machine Scale Set should be exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A `rollingUpgradePolicy` block as defined below. This is Required and can only be specified when `upgradeMode` is set to `Automatic` or `Rolling`. Changing this forces a new resource to be created.
	RollingUpgradePolicy WindowsVirtualMachineScaleSetRollingUpgradePolicyPtrOutput `pulumi:"rollingUpgradePolicy"`
	// A `scaleIn` block as defined below.
	ScaleIn WindowsVirtualMachineScaleSetScaleInOutput `pulumi:"scaleIn"`
	// Deprecated: `scale_in_policy` will be removed in favour of the `scale_in` code block in version 4.0 of the AzureRM Provider.
	ScaleInPolicy pulumi.StringOutput `pulumi:"scaleInPolicy"`
	// One or more `secret` blocks as defined below.
	Secrets WindowsVirtualMachineScaleSetSecretArrayOutput `pulumi:"secrets"`
	// Specifies if Secure Boot and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
	SecureBootEnabled pulumi.BoolPtrOutput `pulumi:"secureBootEnabled"`
	// Should this Virtual Machine Scale Set be limited to a Single Placement Group, which means the number of instances will be capped at 100 Virtual Machines. Defaults to `true`.
	SinglePlacementGroup pulumi.BoolPtrOutput `pulumi:"singlePlacementGroup"`
	// The Virtual Machine SKU for the Scale Set, such as `Standard_F2`.
	Sku pulumi.StringOutput `pulumi:"sku"`
	// The ID of an Image which each Virtual Machine in this Scale Set should be based on. Possible Image ID types include `Image ID`, `Shared Image ID`, `Shared Image Version ID`, `Community Gallery Image ID`, `Community Gallery Image Version ID`, `Shared Gallery Image ID` and `Shared Gallery Image Version ID`.
	//
	// > **NOTE:** One of either `sourceImageId` or `sourceImageReference` must be set.
	SourceImageId pulumi.StringPtrOutput `pulumi:"sourceImageId"`
	// A `sourceImageReference` block as defined below.
	//
	// > **NOTE:** One of either `sourceImageId` or `sourceImageReference` must be set.
	SourceImageReference WindowsVirtualMachineScaleSetSourceImageReferencePtrOutput `pulumi:"sourceImageReference"`
	// A `spotRestore` block as defined below.
	SpotRestore WindowsVirtualMachineScaleSetSpotRestoreOutput `pulumi:"spotRestore"`
	// A mapping of tags which should be assigned to this Virtual Machine Scale Set.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A `terminateNotification` block as defined below.
	//
	// > **Note:** This property has been deprecated in favour of the `terminationNotification` property and will be removed in version 4.0 of the provider.
	//
	// Deprecated: `terminate_notification` has been renamed to `termination_notification` and will be removed in 4.0.
	TerminateNotification WindowsVirtualMachineScaleSetTerminateNotificationOutput `pulumi:"terminateNotification"`
	// A `terminationNotification` block as defined below.
	TerminationNotification WindowsVirtualMachineScaleSetTerminationNotificationOutput `pulumi:"terminationNotification"`
	// Specifies the time zone of the virtual machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
	Timezone pulumi.StringPtrOutput `pulumi:"timezone"`
	// The Unique ID for this Windows Virtual Machine Scale Set.
	UniqueId    pulumi.StringOutput    `pulumi:"uniqueId"`
	UpgradeMode pulumi.StringPtrOutput `pulumi:"upgradeMode"`
	// The Base64-Encoded User Data which should be used for this Virtual Machine Scale Set.
	UserData pulumi.StringPtrOutput `pulumi:"userData"`
	// Specifies if vTPM (Virtual Trusted Platform Module) and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
	VtpmEnabled pulumi.BoolPtrOutput `pulumi:"vtpmEnabled"`
	// One or more `winrmListener` blocks as defined below. Changing this forces a new resource to be created.
	WinrmListeners WindowsVirtualMachineScaleSetWinrmListenerArrayOutput `pulumi:"winrmListeners"`
	// Should the Virtual Machines in this Scale Set be strictly evenly distributed across Availability Zones? Defaults to `false`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** This can only be set to `true` when one or more `zones` are configured.
	ZoneBalance pulumi.BoolPtrOutput `pulumi:"zoneBalance"`
	// Specifies a list of Availability Zones in which this Windows Virtual Machine Scale Set should be located. Changing this forces a new Windows Virtual Machine Scale Set to be created.
	Zones pulumi.StringArrayOutput `pulumi:"zones"`
}

// NewWindowsVirtualMachineScaleSet registers a new resource with the given unique name, arguments, and options.
func NewWindowsVirtualMachineScaleSet(ctx *pulumi.Context,
	name string, args *WindowsVirtualMachineScaleSetArgs, opts ...pulumi.ResourceOption) (*WindowsVirtualMachineScaleSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminPassword == nil {
		return nil, errors.New("invalid value for required argument 'AdminPassword'")
	}
	if args.AdminUsername == nil {
		return nil, errors.New("invalid value for required argument 'AdminUsername'")
	}
	if args.Instances == nil {
		return nil, errors.New("invalid value for required argument 'Instances'")
	}
	if args.NetworkInterfaces == nil {
		return nil, errors.New("invalid value for required argument 'NetworkInterfaces'")
	}
	if args.OsDisk == nil {
		return nil, errors.New("invalid value for required argument 'OsDisk'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Sku == nil {
		return nil, errors.New("invalid value for required argument 'Sku'")
	}
	if args.AdminPassword != nil {
		args.AdminPassword = pulumi.ToSecret(args.AdminPassword).(pulumi.StringInput)
	}
	if args.CustomData != nil {
		args.CustomData = pulumi.ToSecret(args.CustomData).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"adminPassword",
		"customData",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WindowsVirtualMachineScaleSet
	err := ctx.RegisterResource("azure:compute/windowsVirtualMachineScaleSet:WindowsVirtualMachineScaleSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWindowsVirtualMachineScaleSet gets an existing WindowsVirtualMachineScaleSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWindowsVirtualMachineScaleSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WindowsVirtualMachineScaleSetState, opts ...pulumi.ResourceOption) (*WindowsVirtualMachineScaleSet, error) {
	var resource WindowsVirtualMachineScaleSet
	err := ctx.ReadResource("azure:compute/windowsVirtualMachineScaleSet:WindowsVirtualMachineScaleSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WindowsVirtualMachineScaleSet resources.
type windowsVirtualMachineScaleSetState struct {
	// An `additionalCapabilities` block as defined below.
	AdditionalCapabilities *WindowsVirtualMachineScaleSetAdditionalCapabilities `pulumi:"additionalCapabilities"`
	// One or more `additionalUnattendContent` blocks as defined below. Changing this forces a new resource to be created.
	AdditionalUnattendContents []WindowsVirtualMachineScaleSetAdditionalUnattendContent `pulumi:"additionalUnattendContents"`
	// The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
	AdminPassword *string `pulumi:"adminPassword"`
	// The username of the local administrator on each Virtual Machine Scale Set instance. Changing this forces a new resource to be created.
	AdminUsername *string `pulumi:"adminUsername"`
	// An `automaticInstanceRepair` block as defined below. To enable the automatic instance repair, this Virtual Machine Scale Set must have a valid `healthProbeId` or an [Application Health Extension](https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-health-extension).
	//
	// > **NOTE:** For more information about Automatic Instance Repair, please refer to [this doc](https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-automatic-instance-repairs).
	AutomaticInstanceRepair *WindowsVirtualMachineScaleSetAutomaticInstanceRepair `pulumi:"automaticInstanceRepair"`
	// An `automaticOsUpgradePolicy` block as defined below. This can only be specified when `upgradeMode` is set to either `Automatic` or `Rolling`.
	AutomaticOsUpgradePolicy *WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicy `pulumi:"automaticOsUpgradePolicy"`
	// A `bootDiagnostics` block as defined below.
	BootDiagnostics *WindowsVirtualMachineScaleSetBootDiagnostics `pulumi:"bootDiagnostics"`
	// Specifies the ID of the Capacity Reservation Group which the Virtual Machine Scale Set should be allocated to. Changing this forces a new resource to be created.
	//
	// > **NOTE:** `capacityReservationGroupId` cannot be used with `proximityPlacementGroupId`
	//
	// > **NOTE:** `singlePlacementGroup` must be set to `false` when `capacityReservationGroupId` is specified.
	CapacityReservationGroupId *string `pulumi:"capacityReservationGroupId"`
	// The prefix which should be used for the name of the Virtual Machines in this Scale Set. If unspecified this defaults to the value for the `name` field. If the value of the `name` field is not a valid `computerNamePrefix`, then you must specify `computerNamePrefix`. Changing this forces a new resource to be created.
	ComputerNamePrefix *string `pulumi:"computerNamePrefix"`
	// The Base64-Encoded Custom Data which should be used for this Virtual Machine Scale Set.
	//
	// > **NOTE:** When Custom Data has been configured, it's not possible to remove it without tainting the Virtual Machine Scale Set, due to a limitation of the Azure API.
	CustomData *string `pulumi:"customData"`
	// One or more `dataDisk` blocks as defined below.
	DataDisks []WindowsVirtualMachineScaleSetDataDisk `pulumi:"dataDisks"`
	// Should Virtual Machine Extensions be run on Overprovisioned Virtual Machines in the Scale Set? Defaults to `false`.
	DoNotRunExtensionsOnOverprovisionedMachines *bool `pulumi:"doNotRunExtensionsOnOverprovisionedMachines"`
	// Specifies the Edge Zone within the Azure Region where this Windows Virtual Machine Scale Set should exist. Changing this forces a new Windows Virtual Machine Scale Set to be created.
	EdgeZone *string `pulumi:"edgeZone"`
	// Are automatic updates enabled for this Virtual Machine? Defaults to `true`.
	EnableAutomaticUpdates *bool `pulumi:"enableAutomaticUpdates"`
	// Should all of the disks (including the temp disk) attached to this Virtual Machine be encrypted by enabling Encryption at Host?
	EncryptionAtHostEnabled *bool `pulumi:"encryptionAtHostEnabled"`
	// Specifies the eviction policy for Virtual Machines in this Scale Set. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** This can only be configured when `priority` is set to `Spot`.
	EvictionPolicy *string `pulumi:"evictionPolicy"`
	// Should extension operations be allowed on the Virtual Machine Scale Set? Possible values are `true` or `false`. Defaults to `true`. Changing this forces a new Windows Virtual Machine Scale Set to be created.
	//
	// > **NOTE:** `extensionOperationsEnabled` may only be set to `false` if there are no extensions defined in the `extension` field.
	ExtensionOperationsEnabled *bool `pulumi:"extensionOperationsEnabled"`
	// One or more `extension` blocks as defined below
	Extensions []WindowsVirtualMachineScaleSetExtension `pulumi:"extensions"`
	// Specifies the duration allocated for all extensions to start. The time duration should be between `15` minutes and `120` minutes (inclusive) and should be specified in ISO 8601 format. Defaults to `PT1H30M`.
	ExtensionsTimeBudget *string `pulumi:"extensionsTimeBudget"`
	// One or more `galleryApplication` blocks as defined below.
	GalleryApplication []WindowsVirtualMachineScaleSetGalleryApplication `pulumi:"galleryApplication"`
	// Deprecated: `gallery_applications` has been renamed to `gallery_application` and will be deprecated in 4.0
	GalleryApplications []WindowsVirtualMachineScaleSetGalleryApplication `pulumi:"galleryApplications"`
	// The ID of a Load Balancer Probe which should be used to determine the health of an instance. This is Required and can only be specified when `upgradeMode` is set to `Automatic` or `Rolling`.
	HealthProbeId *string `pulumi:"healthProbeId"`
	// Specifies the ID of the dedicated host group that the virtual machine scale set resides in. Changing this forces a new resource to be created.
	HostGroupId *string `pulumi:"hostGroupId"`
	// An `identity` block as defined below.
	Identity *WindowsVirtualMachineScaleSetIdentity `pulumi:"identity"`
	// The number of Virtual Machines in the Scale Set.
	//
	// > **NOTE:** If you're using AutoScaling, you may wish to use [`Ignore Changes` functionality](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) to ignore changes to this field.
	Instances *int `pulumi:"instances"`
	// Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing)) which should be used for this Virtual Machine Scale Set. Possible values are `None`, `Windows_Client` and `Windows_Server`.
	LicenseType *string `pulumi:"licenseType"`
	// The Azure location where the Windows Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The maximum price you're willing to pay for each Virtual Machine in this Scale Set, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machines in the Scale Set will be evicted using the `evictionPolicy`. Defaults to `-1`, which means that each Virtual Machine in the Scale Set should not be evicted for price reasons.
	//
	// > **NOTE:** This can only be configured when `priority` is set to `Spot`.
	MaxBidPrice *float64 `pulumi:"maxBidPrice"`
	// The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// One or more `networkInterface` blocks as defined below.
	NetworkInterfaces []WindowsVirtualMachineScaleSetNetworkInterface `pulumi:"networkInterfaces"`
	// An `osDisk` block as defined below.
	OsDisk *WindowsVirtualMachineScaleSetOsDisk `pulumi:"osDisk"`
	// Should Azure over-provision Virtual Machines in this Scale Set? This means that multiple Virtual Machines will be provisioned and Azure will keep the instances which become available first - which improves provisioning success rates and improves deployment time. You're not billed for these over-provisioned VM's and they don't count towards the Subscription Quota. Defaults to `true`.
	Overprovision *bool `pulumi:"overprovision"`
	// A `plan` block as defined below. Changing this forces a new resource to be created.
	//
	// > **NOTE:** When using an image from Azure Marketplace a `plan` must be specified.
	Plan *WindowsVirtualMachineScaleSetPlan `pulumi:"plan"`
	// Specifies the number of fault domains that are used by this Linux Virtual Machine Scale Set. Changing this forces a new resource to be created.
	PlatformFaultDomainCount *int `pulumi:"platformFaultDomainCount"`
	// The Priority of this Virtual Machine Scale Set. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this value forces a new resource.
	//
	// > **NOTE:** When `priority` is set to `Spot` an `evictionPolicy` must be specified.
	Priority *string `pulumi:"priority"`
	// Should the Azure VM Agent be provisioned on each Virtual Machine in the Scale Set? Defaults to `true`. Changing this value forces a new resource to be created.
	ProvisionVmAgent *bool `pulumi:"provisionVmAgent"`
	// The ID of the Proximity Placement Group in which the Virtual Machine Scale Set should be assigned to. Changing this forces a new resource to be created.
	ProximityPlacementGroupId *string `pulumi:"proximityPlacementGroupId"`
	// The name of the Resource Group in which the Windows Virtual Machine Scale Set should be exist. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A `rollingUpgradePolicy` block as defined below. This is Required and can only be specified when `upgradeMode` is set to `Automatic` or `Rolling`. Changing this forces a new resource to be created.
	RollingUpgradePolicy *WindowsVirtualMachineScaleSetRollingUpgradePolicy `pulumi:"rollingUpgradePolicy"`
	// A `scaleIn` block as defined below.
	ScaleIn *WindowsVirtualMachineScaleSetScaleIn `pulumi:"scaleIn"`
	// Deprecated: `scale_in_policy` will be removed in favour of the `scale_in` code block in version 4.0 of the AzureRM Provider.
	ScaleInPolicy *string `pulumi:"scaleInPolicy"`
	// One or more `secret` blocks as defined below.
	Secrets []WindowsVirtualMachineScaleSetSecret `pulumi:"secrets"`
	// Specifies if Secure Boot and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
	SecureBootEnabled *bool `pulumi:"secureBootEnabled"`
	// Should this Virtual Machine Scale Set be limited to a Single Placement Group, which means the number of instances will be capped at 100 Virtual Machines. Defaults to `true`.
	SinglePlacementGroup *bool `pulumi:"singlePlacementGroup"`
	// The Virtual Machine SKU for the Scale Set, such as `Standard_F2`.
	Sku *string `pulumi:"sku"`
	// The ID of an Image which each Virtual Machine in this Scale Set should be based on. Possible Image ID types include `Image ID`, `Shared Image ID`, `Shared Image Version ID`, `Community Gallery Image ID`, `Community Gallery Image Version ID`, `Shared Gallery Image ID` and `Shared Gallery Image Version ID`.
	//
	// > **NOTE:** One of either `sourceImageId` or `sourceImageReference` must be set.
	SourceImageId *string `pulumi:"sourceImageId"`
	// A `sourceImageReference` block as defined below.
	//
	// > **NOTE:** One of either `sourceImageId` or `sourceImageReference` must be set.
	SourceImageReference *WindowsVirtualMachineScaleSetSourceImageReference `pulumi:"sourceImageReference"`
	// A `spotRestore` block as defined below.
	SpotRestore *WindowsVirtualMachineScaleSetSpotRestore `pulumi:"spotRestore"`
	// A mapping of tags which should be assigned to this Virtual Machine Scale Set.
	Tags map[string]string `pulumi:"tags"`
	// A `terminateNotification` block as defined below.
	//
	// > **Note:** This property has been deprecated in favour of the `terminationNotification` property and will be removed in version 4.0 of the provider.
	//
	// Deprecated: `terminate_notification` has been renamed to `termination_notification` and will be removed in 4.0.
	TerminateNotification *WindowsVirtualMachineScaleSetTerminateNotification `pulumi:"terminateNotification"`
	// A `terminationNotification` block as defined below.
	TerminationNotification *WindowsVirtualMachineScaleSetTerminationNotification `pulumi:"terminationNotification"`
	// Specifies the time zone of the virtual machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
	Timezone *string `pulumi:"timezone"`
	// The Unique ID for this Windows Virtual Machine Scale Set.
	UniqueId    *string `pulumi:"uniqueId"`
	UpgradeMode *string `pulumi:"upgradeMode"`
	// The Base64-Encoded User Data which should be used for this Virtual Machine Scale Set.
	UserData *string `pulumi:"userData"`
	// Specifies if vTPM (Virtual Trusted Platform Module) and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
	VtpmEnabled *bool `pulumi:"vtpmEnabled"`
	// One or more `winrmListener` blocks as defined below. Changing this forces a new resource to be created.
	WinrmListeners []WindowsVirtualMachineScaleSetWinrmListener `pulumi:"winrmListeners"`
	// Should the Virtual Machines in this Scale Set be strictly evenly distributed across Availability Zones? Defaults to `false`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** This can only be set to `true` when one or more `zones` are configured.
	ZoneBalance *bool `pulumi:"zoneBalance"`
	// Specifies a list of Availability Zones in which this Windows Virtual Machine Scale Set should be located. Changing this forces a new Windows Virtual Machine Scale Set to be created.
	Zones []string `pulumi:"zones"`
}

type WindowsVirtualMachineScaleSetState struct {
	// An `additionalCapabilities` block as defined below.
	AdditionalCapabilities WindowsVirtualMachineScaleSetAdditionalCapabilitiesPtrInput
	// One or more `additionalUnattendContent` blocks as defined below. Changing this forces a new resource to be created.
	AdditionalUnattendContents WindowsVirtualMachineScaleSetAdditionalUnattendContentArrayInput
	// The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
	AdminPassword pulumi.StringPtrInput
	// The username of the local administrator on each Virtual Machine Scale Set instance. Changing this forces a new resource to be created.
	AdminUsername pulumi.StringPtrInput
	// An `automaticInstanceRepair` block as defined below. To enable the automatic instance repair, this Virtual Machine Scale Set must have a valid `healthProbeId` or an [Application Health Extension](https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-health-extension).
	//
	// > **NOTE:** For more information about Automatic Instance Repair, please refer to [this doc](https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-automatic-instance-repairs).
	AutomaticInstanceRepair WindowsVirtualMachineScaleSetAutomaticInstanceRepairPtrInput
	// An `automaticOsUpgradePolicy` block as defined below. This can only be specified when `upgradeMode` is set to either `Automatic` or `Rolling`.
	AutomaticOsUpgradePolicy WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicyPtrInput
	// A `bootDiagnostics` block as defined below.
	BootDiagnostics WindowsVirtualMachineScaleSetBootDiagnosticsPtrInput
	// Specifies the ID of the Capacity Reservation Group which the Virtual Machine Scale Set should be allocated to. Changing this forces a new resource to be created.
	//
	// > **NOTE:** `capacityReservationGroupId` cannot be used with `proximityPlacementGroupId`
	//
	// > **NOTE:** `singlePlacementGroup` must be set to `false` when `capacityReservationGroupId` is specified.
	CapacityReservationGroupId pulumi.StringPtrInput
	// The prefix which should be used for the name of the Virtual Machines in this Scale Set. If unspecified this defaults to the value for the `name` field. If the value of the `name` field is not a valid `computerNamePrefix`, then you must specify `computerNamePrefix`. Changing this forces a new resource to be created.
	ComputerNamePrefix pulumi.StringPtrInput
	// The Base64-Encoded Custom Data which should be used for this Virtual Machine Scale Set.
	//
	// > **NOTE:** When Custom Data has been configured, it's not possible to remove it without tainting the Virtual Machine Scale Set, due to a limitation of the Azure API.
	CustomData pulumi.StringPtrInput
	// One or more `dataDisk` blocks as defined below.
	DataDisks WindowsVirtualMachineScaleSetDataDiskArrayInput
	// Should Virtual Machine Extensions be run on Overprovisioned Virtual Machines in the Scale Set? Defaults to `false`.
	DoNotRunExtensionsOnOverprovisionedMachines pulumi.BoolPtrInput
	// Specifies the Edge Zone within the Azure Region where this Windows Virtual Machine Scale Set should exist. Changing this forces a new Windows Virtual Machine Scale Set to be created.
	EdgeZone pulumi.StringPtrInput
	// Are automatic updates enabled for this Virtual Machine? Defaults to `true`.
	EnableAutomaticUpdates pulumi.BoolPtrInput
	// Should all of the disks (including the temp disk) attached to this Virtual Machine be encrypted by enabling Encryption at Host?
	EncryptionAtHostEnabled pulumi.BoolPtrInput
	// Specifies the eviction policy for Virtual Machines in this Scale Set. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** This can only be configured when `priority` is set to `Spot`.
	EvictionPolicy pulumi.StringPtrInput
	// Should extension operations be allowed on the Virtual Machine Scale Set? Possible values are `true` or `false`. Defaults to `true`. Changing this forces a new Windows Virtual Machine Scale Set to be created.
	//
	// > **NOTE:** `extensionOperationsEnabled` may only be set to `false` if there are no extensions defined in the `extension` field.
	ExtensionOperationsEnabled pulumi.BoolPtrInput
	// One or more `extension` blocks as defined below
	Extensions WindowsVirtualMachineScaleSetExtensionArrayInput
	// Specifies the duration allocated for all extensions to start. The time duration should be between `15` minutes and `120` minutes (inclusive) and should be specified in ISO 8601 format. Defaults to `PT1H30M`.
	ExtensionsTimeBudget pulumi.StringPtrInput
	// One or more `galleryApplication` blocks as defined below.
	GalleryApplication WindowsVirtualMachineScaleSetGalleryApplicationArrayInput
	// Deprecated: `gallery_applications` has been renamed to `gallery_application` and will be deprecated in 4.0
	GalleryApplications WindowsVirtualMachineScaleSetGalleryApplicationArrayInput
	// The ID of a Load Balancer Probe which should be used to determine the health of an instance. This is Required and can only be specified when `upgradeMode` is set to `Automatic` or `Rolling`.
	HealthProbeId pulumi.StringPtrInput
	// Specifies the ID of the dedicated host group that the virtual machine scale set resides in. Changing this forces a new resource to be created.
	HostGroupId pulumi.StringPtrInput
	// An `identity` block as defined below.
	Identity WindowsVirtualMachineScaleSetIdentityPtrInput
	// The number of Virtual Machines in the Scale Set.
	//
	// > **NOTE:** If you're using AutoScaling, you may wish to use [`Ignore Changes` functionality](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) to ignore changes to this field.
	Instances pulumi.IntPtrInput
	// Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing)) which should be used for this Virtual Machine Scale Set. Possible values are `None`, `Windows_Client` and `Windows_Server`.
	LicenseType pulumi.StringPtrInput
	// The Azure location where the Windows Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The maximum price you're willing to pay for each Virtual Machine in this Scale Set, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machines in the Scale Set will be evicted using the `evictionPolicy`. Defaults to `-1`, which means that each Virtual Machine in the Scale Set should not be evicted for price reasons.
	//
	// > **NOTE:** This can only be configured when `priority` is set to `Spot`.
	MaxBidPrice pulumi.Float64PtrInput
	// The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// One or more `networkInterface` blocks as defined below.
	NetworkInterfaces WindowsVirtualMachineScaleSetNetworkInterfaceArrayInput
	// An `osDisk` block as defined below.
	OsDisk WindowsVirtualMachineScaleSetOsDiskPtrInput
	// Should Azure over-provision Virtual Machines in this Scale Set? This means that multiple Virtual Machines will be provisioned and Azure will keep the instances which become available first - which improves provisioning success rates and improves deployment time. You're not billed for these over-provisioned VM's and they don't count towards the Subscription Quota. Defaults to `true`.
	Overprovision pulumi.BoolPtrInput
	// A `plan` block as defined below. Changing this forces a new resource to be created.
	//
	// > **NOTE:** When using an image from Azure Marketplace a `plan` must be specified.
	Plan WindowsVirtualMachineScaleSetPlanPtrInput
	// Specifies the number of fault domains that are used by this Linux Virtual Machine Scale Set. Changing this forces a new resource to be created.
	PlatformFaultDomainCount pulumi.IntPtrInput
	// The Priority of this Virtual Machine Scale Set. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this value forces a new resource.
	//
	// > **NOTE:** When `priority` is set to `Spot` an `evictionPolicy` must be specified.
	Priority pulumi.StringPtrInput
	// Should the Azure VM Agent be provisioned on each Virtual Machine in the Scale Set? Defaults to `true`. Changing this value forces a new resource to be created.
	ProvisionVmAgent pulumi.BoolPtrInput
	// The ID of the Proximity Placement Group in which the Virtual Machine Scale Set should be assigned to. Changing this forces a new resource to be created.
	ProximityPlacementGroupId pulumi.StringPtrInput
	// The name of the Resource Group in which the Windows Virtual Machine Scale Set should be exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A `rollingUpgradePolicy` block as defined below. This is Required and can only be specified when `upgradeMode` is set to `Automatic` or `Rolling`. Changing this forces a new resource to be created.
	RollingUpgradePolicy WindowsVirtualMachineScaleSetRollingUpgradePolicyPtrInput
	// A `scaleIn` block as defined below.
	ScaleIn WindowsVirtualMachineScaleSetScaleInPtrInput
	// Deprecated: `scale_in_policy` will be removed in favour of the `scale_in` code block in version 4.0 of the AzureRM Provider.
	ScaleInPolicy pulumi.StringPtrInput
	// One or more `secret` blocks as defined below.
	Secrets WindowsVirtualMachineScaleSetSecretArrayInput
	// Specifies if Secure Boot and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
	SecureBootEnabled pulumi.BoolPtrInput
	// Should this Virtual Machine Scale Set be limited to a Single Placement Group, which means the number of instances will be capped at 100 Virtual Machines. Defaults to `true`.
	SinglePlacementGroup pulumi.BoolPtrInput
	// The Virtual Machine SKU for the Scale Set, such as `Standard_F2`.
	Sku pulumi.StringPtrInput
	// The ID of an Image which each Virtual Machine in this Scale Set should be based on. Possible Image ID types include `Image ID`, `Shared Image ID`, `Shared Image Version ID`, `Community Gallery Image ID`, `Community Gallery Image Version ID`, `Shared Gallery Image ID` and `Shared Gallery Image Version ID`.
	//
	// > **NOTE:** One of either `sourceImageId` or `sourceImageReference` must be set.
	SourceImageId pulumi.StringPtrInput
	// A `sourceImageReference` block as defined below.
	//
	// > **NOTE:** One of either `sourceImageId` or `sourceImageReference` must be set.
	SourceImageReference WindowsVirtualMachineScaleSetSourceImageReferencePtrInput
	// A `spotRestore` block as defined below.
	SpotRestore WindowsVirtualMachineScaleSetSpotRestorePtrInput
	// A mapping of tags which should be assigned to this Virtual Machine Scale Set.
	Tags pulumi.StringMapInput
	// A `terminateNotification` block as defined below.
	//
	// > **Note:** This property has been deprecated in favour of the `terminationNotification` property and will be removed in version 4.0 of the provider.
	//
	// Deprecated: `terminate_notification` has been renamed to `termination_notification` and will be removed in 4.0.
	TerminateNotification WindowsVirtualMachineScaleSetTerminateNotificationPtrInput
	// A `terminationNotification` block as defined below.
	TerminationNotification WindowsVirtualMachineScaleSetTerminationNotificationPtrInput
	// Specifies the time zone of the virtual machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
	Timezone pulumi.StringPtrInput
	// The Unique ID for this Windows Virtual Machine Scale Set.
	UniqueId    pulumi.StringPtrInput
	UpgradeMode pulumi.StringPtrInput
	// The Base64-Encoded User Data which should be used for this Virtual Machine Scale Set.
	UserData pulumi.StringPtrInput
	// Specifies if vTPM (Virtual Trusted Platform Module) and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
	VtpmEnabled pulumi.BoolPtrInput
	// One or more `winrmListener` blocks as defined below. Changing this forces a new resource to be created.
	WinrmListeners WindowsVirtualMachineScaleSetWinrmListenerArrayInput
	// Should the Virtual Machines in this Scale Set be strictly evenly distributed across Availability Zones? Defaults to `false`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** This can only be set to `true` when one or more `zones` are configured.
	ZoneBalance pulumi.BoolPtrInput
	// Specifies a list of Availability Zones in which this Windows Virtual Machine Scale Set should be located. Changing this forces a new Windows Virtual Machine Scale Set to be created.
	Zones pulumi.StringArrayInput
}

func (WindowsVirtualMachineScaleSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*windowsVirtualMachineScaleSetState)(nil)).Elem()
}

type windowsVirtualMachineScaleSetArgs struct {
	// An `additionalCapabilities` block as defined below.
	AdditionalCapabilities *WindowsVirtualMachineScaleSetAdditionalCapabilities `pulumi:"additionalCapabilities"`
	// One or more `additionalUnattendContent` blocks as defined below. Changing this forces a new resource to be created.
	AdditionalUnattendContents []WindowsVirtualMachineScaleSetAdditionalUnattendContent `pulumi:"additionalUnattendContents"`
	// The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
	AdminPassword string `pulumi:"adminPassword"`
	// The username of the local administrator on each Virtual Machine Scale Set instance. Changing this forces a new resource to be created.
	AdminUsername string `pulumi:"adminUsername"`
	// An `automaticInstanceRepair` block as defined below. To enable the automatic instance repair, this Virtual Machine Scale Set must have a valid `healthProbeId` or an [Application Health Extension](https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-health-extension).
	//
	// > **NOTE:** For more information about Automatic Instance Repair, please refer to [this doc](https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-automatic-instance-repairs).
	AutomaticInstanceRepair *WindowsVirtualMachineScaleSetAutomaticInstanceRepair `pulumi:"automaticInstanceRepair"`
	// An `automaticOsUpgradePolicy` block as defined below. This can only be specified when `upgradeMode` is set to either `Automatic` or `Rolling`.
	AutomaticOsUpgradePolicy *WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicy `pulumi:"automaticOsUpgradePolicy"`
	// A `bootDiagnostics` block as defined below.
	BootDiagnostics *WindowsVirtualMachineScaleSetBootDiagnostics `pulumi:"bootDiagnostics"`
	// Specifies the ID of the Capacity Reservation Group which the Virtual Machine Scale Set should be allocated to. Changing this forces a new resource to be created.
	//
	// > **NOTE:** `capacityReservationGroupId` cannot be used with `proximityPlacementGroupId`
	//
	// > **NOTE:** `singlePlacementGroup` must be set to `false` when `capacityReservationGroupId` is specified.
	CapacityReservationGroupId *string `pulumi:"capacityReservationGroupId"`
	// The prefix which should be used for the name of the Virtual Machines in this Scale Set. If unspecified this defaults to the value for the `name` field. If the value of the `name` field is not a valid `computerNamePrefix`, then you must specify `computerNamePrefix`. Changing this forces a new resource to be created.
	ComputerNamePrefix *string `pulumi:"computerNamePrefix"`
	// The Base64-Encoded Custom Data which should be used for this Virtual Machine Scale Set.
	//
	// > **NOTE:** When Custom Data has been configured, it's not possible to remove it without tainting the Virtual Machine Scale Set, due to a limitation of the Azure API.
	CustomData *string `pulumi:"customData"`
	// One or more `dataDisk` blocks as defined below.
	DataDisks []WindowsVirtualMachineScaleSetDataDisk `pulumi:"dataDisks"`
	// Should Virtual Machine Extensions be run on Overprovisioned Virtual Machines in the Scale Set? Defaults to `false`.
	DoNotRunExtensionsOnOverprovisionedMachines *bool `pulumi:"doNotRunExtensionsOnOverprovisionedMachines"`
	// Specifies the Edge Zone within the Azure Region where this Windows Virtual Machine Scale Set should exist. Changing this forces a new Windows Virtual Machine Scale Set to be created.
	EdgeZone *string `pulumi:"edgeZone"`
	// Are automatic updates enabled for this Virtual Machine? Defaults to `true`.
	EnableAutomaticUpdates *bool `pulumi:"enableAutomaticUpdates"`
	// Should all of the disks (including the temp disk) attached to this Virtual Machine be encrypted by enabling Encryption at Host?
	EncryptionAtHostEnabled *bool `pulumi:"encryptionAtHostEnabled"`
	// Specifies the eviction policy for Virtual Machines in this Scale Set. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** This can only be configured when `priority` is set to `Spot`.
	EvictionPolicy *string `pulumi:"evictionPolicy"`
	// Should extension operations be allowed on the Virtual Machine Scale Set? Possible values are `true` or `false`. Defaults to `true`. Changing this forces a new Windows Virtual Machine Scale Set to be created.
	//
	// > **NOTE:** `extensionOperationsEnabled` may only be set to `false` if there are no extensions defined in the `extension` field.
	ExtensionOperationsEnabled *bool `pulumi:"extensionOperationsEnabled"`
	// One or more `extension` blocks as defined below
	Extensions []WindowsVirtualMachineScaleSetExtension `pulumi:"extensions"`
	// Specifies the duration allocated for all extensions to start. The time duration should be between `15` minutes and `120` minutes (inclusive) and should be specified in ISO 8601 format. Defaults to `PT1H30M`.
	ExtensionsTimeBudget *string `pulumi:"extensionsTimeBudget"`
	// One or more `galleryApplication` blocks as defined below.
	GalleryApplication []WindowsVirtualMachineScaleSetGalleryApplication `pulumi:"galleryApplication"`
	// Deprecated: `gallery_applications` has been renamed to `gallery_application` and will be deprecated in 4.0
	GalleryApplications []WindowsVirtualMachineScaleSetGalleryApplication `pulumi:"galleryApplications"`
	// The ID of a Load Balancer Probe which should be used to determine the health of an instance. This is Required and can only be specified when `upgradeMode` is set to `Automatic` or `Rolling`.
	HealthProbeId *string `pulumi:"healthProbeId"`
	// Specifies the ID of the dedicated host group that the virtual machine scale set resides in. Changing this forces a new resource to be created.
	HostGroupId *string `pulumi:"hostGroupId"`
	// An `identity` block as defined below.
	Identity *WindowsVirtualMachineScaleSetIdentity `pulumi:"identity"`
	// The number of Virtual Machines in the Scale Set.
	//
	// > **NOTE:** If you're using AutoScaling, you may wish to use [`Ignore Changes` functionality](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) to ignore changes to this field.
	Instances int `pulumi:"instances"`
	// Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing)) which should be used for this Virtual Machine Scale Set. Possible values are `None`, `Windows_Client` and `Windows_Server`.
	LicenseType *string `pulumi:"licenseType"`
	// The Azure location where the Windows Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The maximum price you're willing to pay for each Virtual Machine in this Scale Set, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machines in the Scale Set will be evicted using the `evictionPolicy`. Defaults to `-1`, which means that each Virtual Machine in the Scale Set should not be evicted for price reasons.
	//
	// > **NOTE:** This can only be configured when `priority` is set to `Spot`.
	MaxBidPrice *float64 `pulumi:"maxBidPrice"`
	// The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// One or more `networkInterface` blocks as defined below.
	NetworkInterfaces []WindowsVirtualMachineScaleSetNetworkInterface `pulumi:"networkInterfaces"`
	// An `osDisk` block as defined below.
	OsDisk WindowsVirtualMachineScaleSetOsDisk `pulumi:"osDisk"`
	// Should Azure over-provision Virtual Machines in this Scale Set? This means that multiple Virtual Machines will be provisioned and Azure will keep the instances which become available first - which improves provisioning success rates and improves deployment time. You're not billed for these over-provisioned VM's and they don't count towards the Subscription Quota. Defaults to `true`.
	Overprovision *bool `pulumi:"overprovision"`
	// A `plan` block as defined below. Changing this forces a new resource to be created.
	//
	// > **NOTE:** When using an image from Azure Marketplace a `plan` must be specified.
	Plan *WindowsVirtualMachineScaleSetPlan `pulumi:"plan"`
	// Specifies the number of fault domains that are used by this Linux Virtual Machine Scale Set. Changing this forces a new resource to be created.
	PlatformFaultDomainCount *int `pulumi:"platformFaultDomainCount"`
	// The Priority of this Virtual Machine Scale Set. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this value forces a new resource.
	//
	// > **NOTE:** When `priority` is set to `Spot` an `evictionPolicy` must be specified.
	Priority *string `pulumi:"priority"`
	// Should the Azure VM Agent be provisioned on each Virtual Machine in the Scale Set? Defaults to `true`. Changing this value forces a new resource to be created.
	ProvisionVmAgent *bool `pulumi:"provisionVmAgent"`
	// The ID of the Proximity Placement Group in which the Virtual Machine Scale Set should be assigned to. Changing this forces a new resource to be created.
	ProximityPlacementGroupId *string `pulumi:"proximityPlacementGroupId"`
	// The name of the Resource Group in which the Windows Virtual Machine Scale Set should be exist. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A `rollingUpgradePolicy` block as defined below. This is Required and can only be specified when `upgradeMode` is set to `Automatic` or `Rolling`. Changing this forces a new resource to be created.
	RollingUpgradePolicy *WindowsVirtualMachineScaleSetRollingUpgradePolicy `pulumi:"rollingUpgradePolicy"`
	// A `scaleIn` block as defined below.
	ScaleIn *WindowsVirtualMachineScaleSetScaleIn `pulumi:"scaleIn"`
	// Deprecated: `scale_in_policy` will be removed in favour of the `scale_in` code block in version 4.0 of the AzureRM Provider.
	ScaleInPolicy *string `pulumi:"scaleInPolicy"`
	// One or more `secret` blocks as defined below.
	Secrets []WindowsVirtualMachineScaleSetSecret `pulumi:"secrets"`
	// Specifies if Secure Boot and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
	SecureBootEnabled *bool `pulumi:"secureBootEnabled"`
	// Should this Virtual Machine Scale Set be limited to a Single Placement Group, which means the number of instances will be capped at 100 Virtual Machines. Defaults to `true`.
	SinglePlacementGroup *bool `pulumi:"singlePlacementGroup"`
	// The Virtual Machine SKU for the Scale Set, such as `Standard_F2`.
	Sku string `pulumi:"sku"`
	// The ID of an Image which each Virtual Machine in this Scale Set should be based on. Possible Image ID types include `Image ID`, `Shared Image ID`, `Shared Image Version ID`, `Community Gallery Image ID`, `Community Gallery Image Version ID`, `Shared Gallery Image ID` and `Shared Gallery Image Version ID`.
	//
	// > **NOTE:** One of either `sourceImageId` or `sourceImageReference` must be set.
	SourceImageId *string `pulumi:"sourceImageId"`
	// A `sourceImageReference` block as defined below.
	//
	// > **NOTE:** One of either `sourceImageId` or `sourceImageReference` must be set.
	SourceImageReference *WindowsVirtualMachineScaleSetSourceImageReference `pulumi:"sourceImageReference"`
	// A `spotRestore` block as defined below.
	SpotRestore *WindowsVirtualMachineScaleSetSpotRestore `pulumi:"spotRestore"`
	// A mapping of tags which should be assigned to this Virtual Machine Scale Set.
	Tags map[string]string `pulumi:"tags"`
	// A `terminateNotification` block as defined below.
	//
	// > **Note:** This property has been deprecated in favour of the `terminationNotification` property and will be removed in version 4.0 of the provider.
	//
	// Deprecated: `terminate_notification` has been renamed to `termination_notification` and will be removed in 4.0.
	TerminateNotification *WindowsVirtualMachineScaleSetTerminateNotification `pulumi:"terminateNotification"`
	// A `terminationNotification` block as defined below.
	TerminationNotification *WindowsVirtualMachineScaleSetTerminationNotification `pulumi:"terminationNotification"`
	// Specifies the time zone of the virtual machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
	Timezone    *string `pulumi:"timezone"`
	UpgradeMode *string `pulumi:"upgradeMode"`
	// The Base64-Encoded User Data which should be used for this Virtual Machine Scale Set.
	UserData *string `pulumi:"userData"`
	// Specifies if vTPM (Virtual Trusted Platform Module) and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
	VtpmEnabled *bool `pulumi:"vtpmEnabled"`
	// One or more `winrmListener` blocks as defined below. Changing this forces a new resource to be created.
	WinrmListeners []WindowsVirtualMachineScaleSetWinrmListener `pulumi:"winrmListeners"`
	// Should the Virtual Machines in this Scale Set be strictly evenly distributed across Availability Zones? Defaults to `false`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** This can only be set to `true` when one or more `zones` are configured.
	ZoneBalance *bool `pulumi:"zoneBalance"`
	// Specifies a list of Availability Zones in which this Windows Virtual Machine Scale Set should be located. Changing this forces a new Windows Virtual Machine Scale Set to be created.
	Zones []string `pulumi:"zones"`
}

// The set of arguments for constructing a WindowsVirtualMachineScaleSet resource.
type WindowsVirtualMachineScaleSetArgs struct {
	// An `additionalCapabilities` block as defined below.
	AdditionalCapabilities WindowsVirtualMachineScaleSetAdditionalCapabilitiesPtrInput
	// One or more `additionalUnattendContent` blocks as defined below. Changing this forces a new resource to be created.
	AdditionalUnattendContents WindowsVirtualMachineScaleSetAdditionalUnattendContentArrayInput
	// The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
	AdminPassword pulumi.StringInput
	// The username of the local administrator on each Virtual Machine Scale Set instance. Changing this forces a new resource to be created.
	AdminUsername pulumi.StringInput
	// An `automaticInstanceRepair` block as defined below. To enable the automatic instance repair, this Virtual Machine Scale Set must have a valid `healthProbeId` or an [Application Health Extension](https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-health-extension).
	//
	// > **NOTE:** For more information about Automatic Instance Repair, please refer to [this doc](https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-automatic-instance-repairs).
	AutomaticInstanceRepair WindowsVirtualMachineScaleSetAutomaticInstanceRepairPtrInput
	// An `automaticOsUpgradePolicy` block as defined below. This can only be specified when `upgradeMode` is set to either `Automatic` or `Rolling`.
	AutomaticOsUpgradePolicy WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicyPtrInput
	// A `bootDiagnostics` block as defined below.
	BootDiagnostics WindowsVirtualMachineScaleSetBootDiagnosticsPtrInput
	// Specifies the ID of the Capacity Reservation Group which the Virtual Machine Scale Set should be allocated to. Changing this forces a new resource to be created.
	//
	// > **NOTE:** `capacityReservationGroupId` cannot be used with `proximityPlacementGroupId`
	//
	// > **NOTE:** `singlePlacementGroup` must be set to `false` when `capacityReservationGroupId` is specified.
	CapacityReservationGroupId pulumi.StringPtrInput
	// The prefix which should be used for the name of the Virtual Machines in this Scale Set. If unspecified this defaults to the value for the `name` field. If the value of the `name` field is not a valid `computerNamePrefix`, then you must specify `computerNamePrefix`. Changing this forces a new resource to be created.
	ComputerNamePrefix pulumi.StringPtrInput
	// The Base64-Encoded Custom Data which should be used for this Virtual Machine Scale Set.
	//
	// > **NOTE:** When Custom Data has been configured, it's not possible to remove it without tainting the Virtual Machine Scale Set, due to a limitation of the Azure API.
	CustomData pulumi.StringPtrInput
	// One or more `dataDisk` blocks as defined below.
	DataDisks WindowsVirtualMachineScaleSetDataDiskArrayInput
	// Should Virtual Machine Extensions be run on Overprovisioned Virtual Machines in the Scale Set? Defaults to `false`.
	DoNotRunExtensionsOnOverprovisionedMachines pulumi.BoolPtrInput
	// Specifies the Edge Zone within the Azure Region where this Windows Virtual Machine Scale Set should exist. Changing this forces a new Windows Virtual Machine Scale Set to be created.
	EdgeZone pulumi.StringPtrInput
	// Are automatic updates enabled for this Virtual Machine? Defaults to `true`.
	EnableAutomaticUpdates pulumi.BoolPtrInput
	// Should all of the disks (including the temp disk) attached to this Virtual Machine be encrypted by enabling Encryption at Host?
	EncryptionAtHostEnabled pulumi.BoolPtrInput
	// Specifies the eviction policy for Virtual Machines in this Scale Set. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** This can only be configured when `priority` is set to `Spot`.
	EvictionPolicy pulumi.StringPtrInput
	// Should extension operations be allowed on the Virtual Machine Scale Set? Possible values are `true` or `false`. Defaults to `true`. Changing this forces a new Windows Virtual Machine Scale Set to be created.
	//
	// > **NOTE:** `extensionOperationsEnabled` may only be set to `false` if there are no extensions defined in the `extension` field.
	ExtensionOperationsEnabled pulumi.BoolPtrInput
	// One or more `extension` blocks as defined below
	Extensions WindowsVirtualMachineScaleSetExtensionArrayInput
	// Specifies the duration allocated for all extensions to start. The time duration should be between `15` minutes and `120` minutes (inclusive) and should be specified in ISO 8601 format. Defaults to `PT1H30M`.
	ExtensionsTimeBudget pulumi.StringPtrInput
	// One or more `galleryApplication` blocks as defined below.
	GalleryApplication WindowsVirtualMachineScaleSetGalleryApplicationArrayInput
	// Deprecated: `gallery_applications` has been renamed to `gallery_application` and will be deprecated in 4.0
	GalleryApplications WindowsVirtualMachineScaleSetGalleryApplicationArrayInput
	// The ID of a Load Balancer Probe which should be used to determine the health of an instance. This is Required and can only be specified when `upgradeMode` is set to `Automatic` or `Rolling`.
	HealthProbeId pulumi.StringPtrInput
	// Specifies the ID of the dedicated host group that the virtual machine scale set resides in. Changing this forces a new resource to be created.
	HostGroupId pulumi.StringPtrInput
	// An `identity` block as defined below.
	Identity WindowsVirtualMachineScaleSetIdentityPtrInput
	// The number of Virtual Machines in the Scale Set.
	//
	// > **NOTE:** If you're using AutoScaling, you may wish to use [`Ignore Changes` functionality](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) to ignore changes to this field.
	Instances pulumi.IntInput
	// Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing)) which should be used for this Virtual Machine Scale Set. Possible values are `None`, `Windows_Client` and `Windows_Server`.
	LicenseType pulumi.StringPtrInput
	// The Azure location where the Windows Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The maximum price you're willing to pay for each Virtual Machine in this Scale Set, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machines in the Scale Set will be evicted using the `evictionPolicy`. Defaults to `-1`, which means that each Virtual Machine in the Scale Set should not be evicted for price reasons.
	//
	// > **NOTE:** This can only be configured when `priority` is set to `Spot`.
	MaxBidPrice pulumi.Float64PtrInput
	// The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// One or more `networkInterface` blocks as defined below.
	NetworkInterfaces WindowsVirtualMachineScaleSetNetworkInterfaceArrayInput
	// An `osDisk` block as defined below.
	OsDisk WindowsVirtualMachineScaleSetOsDiskInput
	// Should Azure over-provision Virtual Machines in this Scale Set? This means that multiple Virtual Machines will be provisioned and Azure will keep the instances which become available first - which improves provisioning success rates and improves deployment time. You're not billed for these over-provisioned VM's and they don't count towards the Subscription Quota. Defaults to `true`.
	Overprovision pulumi.BoolPtrInput
	// A `plan` block as defined below. Changing this forces a new resource to be created.
	//
	// > **NOTE:** When using an image from Azure Marketplace a `plan` must be specified.
	Plan WindowsVirtualMachineScaleSetPlanPtrInput
	// Specifies the number of fault domains that are used by this Linux Virtual Machine Scale Set. Changing this forces a new resource to be created.
	PlatformFaultDomainCount pulumi.IntPtrInput
	// The Priority of this Virtual Machine Scale Set. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this value forces a new resource.
	//
	// > **NOTE:** When `priority` is set to `Spot` an `evictionPolicy` must be specified.
	Priority pulumi.StringPtrInput
	// Should the Azure VM Agent be provisioned on each Virtual Machine in the Scale Set? Defaults to `true`. Changing this value forces a new resource to be created.
	ProvisionVmAgent pulumi.BoolPtrInput
	// The ID of the Proximity Placement Group in which the Virtual Machine Scale Set should be assigned to. Changing this forces a new resource to be created.
	ProximityPlacementGroupId pulumi.StringPtrInput
	// The name of the Resource Group in which the Windows Virtual Machine Scale Set should be exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A `rollingUpgradePolicy` block as defined below. This is Required and can only be specified when `upgradeMode` is set to `Automatic` or `Rolling`. Changing this forces a new resource to be created.
	RollingUpgradePolicy WindowsVirtualMachineScaleSetRollingUpgradePolicyPtrInput
	// A `scaleIn` block as defined below.
	ScaleIn WindowsVirtualMachineScaleSetScaleInPtrInput
	// Deprecated: `scale_in_policy` will be removed in favour of the `scale_in` code block in version 4.0 of the AzureRM Provider.
	ScaleInPolicy pulumi.StringPtrInput
	// One or more `secret` blocks as defined below.
	Secrets WindowsVirtualMachineScaleSetSecretArrayInput
	// Specifies if Secure Boot and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
	SecureBootEnabled pulumi.BoolPtrInput
	// Should this Virtual Machine Scale Set be limited to a Single Placement Group, which means the number of instances will be capped at 100 Virtual Machines. Defaults to `true`.
	SinglePlacementGroup pulumi.BoolPtrInput
	// The Virtual Machine SKU for the Scale Set, such as `Standard_F2`.
	Sku pulumi.StringInput
	// The ID of an Image which each Virtual Machine in this Scale Set should be based on. Possible Image ID types include `Image ID`, `Shared Image ID`, `Shared Image Version ID`, `Community Gallery Image ID`, `Community Gallery Image Version ID`, `Shared Gallery Image ID` and `Shared Gallery Image Version ID`.
	//
	// > **NOTE:** One of either `sourceImageId` or `sourceImageReference` must be set.
	SourceImageId pulumi.StringPtrInput
	// A `sourceImageReference` block as defined below.
	//
	// > **NOTE:** One of either `sourceImageId` or `sourceImageReference` must be set.
	SourceImageReference WindowsVirtualMachineScaleSetSourceImageReferencePtrInput
	// A `spotRestore` block as defined below.
	SpotRestore WindowsVirtualMachineScaleSetSpotRestorePtrInput
	// A mapping of tags which should be assigned to this Virtual Machine Scale Set.
	Tags pulumi.StringMapInput
	// A `terminateNotification` block as defined below.
	//
	// > **Note:** This property has been deprecated in favour of the `terminationNotification` property and will be removed in version 4.0 of the provider.
	//
	// Deprecated: `terminate_notification` has been renamed to `termination_notification` and will be removed in 4.0.
	TerminateNotification WindowsVirtualMachineScaleSetTerminateNotificationPtrInput
	// A `terminationNotification` block as defined below.
	TerminationNotification WindowsVirtualMachineScaleSetTerminationNotificationPtrInput
	// Specifies the time zone of the virtual machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
	Timezone    pulumi.StringPtrInput
	UpgradeMode pulumi.StringPtrInput
	// The Base64-Encoded User Data which should be used for this Virtual Machine Scale Set.
	UserData pulumi.StringPtrInput
	// Specifies if vTPM (Virtual Trusted Platform Module) and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
	VtpmEnabled pulumi.BoolPtrInput
	// One or more `winrmListener` blocks as defined below. Changing this forces a new resource to be created.
	WinrmListeners WindowsVirtualMachineScaleSetWinrmListenerArrayInput
	// Should the Virtual Machines in this Scale Set be strictly evenly distributed across Availability Zones? Defaults to `false`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** This can only be set to `true` when one or more `zones` are configured.
	ZoneBalance pulumi.BoolPtrInput
	// Specifies a list of Availability Zones in which this Windows Virtual Machine Scale Set should be located. Changing this forces a new Windows Virtual Machine Scale Set to be created.
	Zones pulumi.StringArrayInput
}

func (WindowsVirtualMachineScaleSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*windowsVirtualMachineScaleSetArgs)(nil)).Elem()
}

type WindowsVirtualMachineScaleSetInput interface {
	pulumi.Input

	ToWindowsVirtualMachineScaleSetOutput() WindowsVirtualMachineScaleSetOutput
	ToWindowsVirtualMachineScaleSetOutputWithContext(ctx context.Context) WindowsVirtualMachineScaleSetOutput
}

func (*WindowsVirtualMachineScaleSet) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsVirtualMachineScaleSet)(nil)).Elem()
}

func (i *WindowsVirtualMachineScaleSet) ToWindowsVirtualMachineScaleSetOutput() WindowsVirtualMachineScaleSetOutput {
	return i.ToWindowsVirtualMachineScaleSetOutputWithContext(context.Background())
}

func (i *WindowsVirtualMachineScaleSet) ToWindowsVirtualMachineScaleSetOutputWithContext(ctx context.Context) WindowsVirtualMachineScaleSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsVirtualMachineScaleSetOutput)
}

// WindowsVirtualMachineScaleSetArrayInput is an input type that accepts WindowsVirtualMachineScaleSetArray and WindowsVirtualMachineScaleSetArrayOutput values.
// You can construct a concrete instance of `WindowsVirtualMachineScaleSetArrayInput` via:
//
//	WindowsVirtualMachineScaleSetArray{ WindowsVirtualMachineScaleSetArgs{...} }
type WindowsVirtualMachineScaleSetArrayInput interface {
	pulumi.Input

	ToWindowsVirtualMachineScaleSetArrayOutput() WindowsVirtualMachineScaleSetArrayOutput
	ToWindowsVirtualMachineScaleSetArrayOutputWithContext(context.Context) WindowsVirtualMachineScaleSetArrayOutput
}

type WindowsVirtualMachineScaleSetArray []WindowsVirtualMachineScaleSetInput

func (WindowsVirtualMachineScaleSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WindowsVirtualMachineScaleSet)(nil)).Elem()
}

func (i WindowsVirtualMachineScaleSetArray) ToWindowsVirtualMachineScaleSetArrayOutput() WindowsVirtualMachineScaleSetArrayOutput {
	return i.ToWindowsVirtualMachineScaleSetArrayOutputWithContext(context.Background())
}

func (i WindowsVirtualMachineScaleSetArray) ToWindowsVirtualMachineScaleSetArrayOutputWithContext(ctx context.Context) WindowsVirtualMachineScaleSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsVirtualMachineScaleSetArrayOutput)
}

// WindowsVirtualMachineScaleSetMapInput is an input type that accepts WindowsVirtualMachineScaleSetMap and WindowsVirtualMachineScaleSetMapOutput values.
// You can construct a concrete instance of `WindowsVirtualMachineScaleSetMapInput` via:
//
//	WindowsVirtualMachineScaleSetMap{ "key": WindowsVirtualMachineScaleSetArgs{...} }
type WindowsVirtualMachineScaleSetMapInput interface {
	pulumi.Input

	ToWindowsVirtualMachineScaleSetMapOutput() WindowsVirtualMachineScaleSetMapOutput
	ToWindowsVirtualMachineScaleSetMapOutputWithContext(context.Context) WindowsVirtualMachineScaleSetMapOutput
}

type WindowsVirtualMachineScaleSetMap map[string]WindowsVirtualMachineScaleSetInput

func (WindowsVirtualMachineScaleSetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WindowsVirtualMachineScaleSet)(nil)).Elem()
}

func (i WindowsVirtualMachineScaleSetMap) ToWindowsVirtualMachineScaleSetMapOutput() WindowsVirtualMachineScaleSetMapOutput {
	return i.ToWindowsVirtualMachineScaleSetMapOutputWithContext(context.Background())
}

func (i WindowsVirtualMachineScaleSetMap) ToWindowsVirtualMachineScaleSetMapOutputWithContext(ctx context.Context) WindowsVirtualMachineScaleSetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsVirtualMachineScaleSetMapOutput)
}

type WindowsVirtualMachineScaleSetOutput struct{ *pulumi.OutputState }

func (WindowsVirtualMachineScaleSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsVirtualMachineScaleSet)(nil)).Elem()
}

func (o WindowsVirtualMachineScaleSetOutput) ToWindowsVirtualMachineScaleSetOutput() WindowsVirtualMachineScaleSetOutput {
	return o
}

func (o WindowsVirtualMachineScaleSetOutput) ToWindowsVirtualMachineScaleSetOutputWithContext(ctx context.Context) WindowsVirtualMachineScaleSetOutput {
	return o
}

// An `additionalCapabilities` block as defined below.
func (o WindowsVirtualMachineScaleSetOutput) AdditionalCapabilities() WindowsVirtualMachineScaleSetAdditionalCapabilitiesPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) WindowsVirtualMachineScaleSetAdditionalCapabilitiesPtrOutput {
		return v.AdditionalCapabilities
	}).(WindowsVirtualMachineScaleSetAdditionalCapabilitiesPtrOutput)
}

// One or more `additionalUnattendContent` blocks as defined below. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineScaleSetOutput) AdditionalUnattendContents() WindowsVirtualMachineScaleSetAdditionalUnattendContentArrayOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) WindowsVirtualMachineScaleSetAdditionalUnattendContentArrayOutput {
		return v.AdditionalUnattendContents
	}).(WindowsVirtualMachineScaleSetAdditionalUnattendContentArrayOutput)
}

// The Password which should be used for the local-administrator on this Virtual Machine. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineScaleSetOutput) AdminPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.StringOutput { return v.AdminPassword }).(pulumi.StringOutput)
}

// The username of the local administrator on each Virtual Machine Scale Set instance. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineScaleSetOutput) AdminUsername() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.StringOutput { return v.AdminUsername }).(pulumi.StringOutput)
}

// An `automaticInstanceRepair` block as defined below. To enable the automatic instance repair, this Virtual Machine Scale Set must have a valid `healthProbeId` or an [Application Health Extension](https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-health-extension).
//
// > **NOTE:** For more information about Automatic Instance Repair, please refer to [this doc](https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-automatic-instance-repairs).
func (o WindowsVirtualMachineScaleSetOutput) AutomaticInstanceRepair() WindowsVirtualMachineScaleSetAutomaticInstanceRepairOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) WindowsVirtualMachineScaleSetAutomaticInstanceRepairOutput {
		return v.AutomaticInstanceRepair
	}).(WindowsVirtualMachineScaleSetAutomaticInstanceRepairOutput)
}

// An `automaticOsUpgradePolicy` block as defined below. This can only be specified when `upgradeMode` is set to either `Automatic` or `Rolling`.
func (o WindowsVirtualMachineScaleSetOutput) AutomaticOsUpgradePolicy() WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicyPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicyPtrOutput {
		return v.AutomaticOsUpgradePolicy
	}).(WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicyPtrOutput)
}

// A `bootDiagnostics` block as defined below.
func (o WindowsVirtualMachineScaleSetOutput) BootDiagnostics() WindowsVirtualMachineScaleSetBootDiagnosticsPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) WindowsVirtualMachineScaleSetBootDiagnosticsPtrOutput {
		return v.BootDiagnostics
	}).(WindowsVirtualMachineScaleSetBootDiagnosticsPtrOutput)
}

// Specifies the ID of the Capacity Reservation Group which the Virtual Machine Scale Set should be allocated to. Changing this forces a new resource to be created.
//
// > **NOTE:** `capacityReservationGroupId` cannot be used with `proximityPlacementGroupId`
//
// > **NOTE:** `singlePlacementGroup` must be set to `false` when `capacityReservationGroupId` is specified.
func (o WindowsVirtualMachineScaleSetOutput) CapacityReservationGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.StringPtrOutput { return v.CapacityReservationGroupId }).(pulumi.StringPtrOutput)
}

// The prefix which should be used for the name of the Virtual Machines in this Scale Set. If unspecified this defaults to the value for the `name` field. If the value of the `name` field is not a valid `computerNamePrefix`, then you must specify `computerNamePrefix`. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineScaleSetOutput) ComputerNamePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.StringOutput { return v.ComputerNamePrefix }).(pulumi.StringOutput)
}

// The Base64-Encoded Custom Data which should be used for this Virtual Machine Scale Set.
//
// > **NOTE:** When Custom Data has been configured, it's not possible to remove it without tainting the Virtual Machine Scale Set, due to a limitation of the Azure API.
func (o WindowsVirtualMachineScaleSetOutput) CustomData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.StringPtrOutput { return v.CustomData }).(pulumi.StringPtrOutput)
}

// One or more `dataDisk` blocks as defined below.
func (o WindowsVirtualMachineScaleSetOutput) DataDisks() WindowsVirtualMachineScaleSetDataDiskArrayOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) WindowsVirtualMachineScaleSetDataDiskArrayOutput {
		return v.DataDisks
	}).(WindowsVirtualMachineScaleSetDataDiskArrayOutput)
}

// Should Virtual Machine Extensions be run on Overprovisioned Virtual Machines in the Scale Set? Defaults to `false`.
func (o WindowsVirtualMachineScaleSetOutput) DoNotRunExtensionsOnOverprovisionedMachines() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.BoolPtrOutput {
		return v.DoNotRunExtensionsOnOverprovisionedMachines
	}).(pulumi.BoolPtrOutput)
}

// Specifies the Edge Zone within the Azure Region where this Windows Virtual Machine Scale Set should exist. Changing this forces a new Windows Virtual Machine Scale Set to be created.
func (o WindowsVirtualMachineScaleSetOutput) EdgeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.StringPtrOutput { return v.EdgeZone }).(pulumi.StringPtrOutput)
}

// Are automatic updates enabled for this Virtual Machine? Defaults to `true`.
func (o WindowsVirtualMachineScaleSetOutput) EnableAutomaticUpdates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.BoolPtrOutput { return v.EnableAutomaticUpdates }).(pulumi.BoolPtrOutput)
}

// Should all of the disks (including the temp disk) attached to this Virtual Machine be encrypted by enabling Encryption at Host?
func (o WindowsVirtualMachineScaleSetOutput) EncryptionAtHostEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.BoolPtrOutput { return v.EncryptionAtHostEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the eviction policy for Virtual Machines in this Scale Set. Possible values are `Deallocate` and `Delete`. Changing this forces a new resource to be created.
//
// > **NOTE:** This can only be configured when `priority` is set to `Spot`.
func (o WindowsVirtualMachineScaleSetOutput) EvictionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.StringPtrOutput { return v.EvictionPolicy }).(pulumi.StringPtrOutput)
}

// Should extension operations be allowed on the Virtual Machine Scale Set? Possible values are `true` or `false`. Defaults to `true`. Changing this forces a new Windows Virtual Machine Scale Set to be created.
//
// > **NOTE:** `extensionOperationsEnabled` may only be set to `false` if there are no extensions defined in the `extension` field.
func (o WindowsVirtualMachineScaleSetOutput) ExtensionOperationsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.BoolOutput { return v.ExtensionOperationsEnabled }).(pulumi.BoolOutput)
}

// One or more `extension` blocks as defined below
func (o WindowsVirtualMachineScaleSetOutput) Extensions() WindowsVirtualMachineScaleSetExtensionArrayOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) WindowsVirtualMachineScaleSetExtensionArrayOutput {
		return v.Extensions
	}).(WindowsVirtualMachineScaleSetExtensionArrayOutput)
}

// Specifies the duration allocated for all extensions to start. The time duration should be between `15` minutes and `120` minutes (inclusive) and should be specified in ISO 8601 format. Defaults to `PT1H30M`.
func (o WindowsVirtualMachineScaleSetOutput) ExtensionsTimeBudget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.StringPtrOutput { return v.ExtensionsTimeBudget }).(pulumi.StringPtrOutput)
}

// One or more `galleryApplication` blocks as defined below.
func (o WindowsVirtualMachineScaleSetOutput) GalleryApplication() WindowsVirtualMachineScaleSetGalleryApplicationArrayOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) WindowsVirtualMachineScaleSetGalleryApplicationArrayOutput {
		return v.GalleryApplication
	}).(WindowsVirtualMachineScaleSetGalleryApplicationArrayOutput)
}

// Deprecated: `gallery_applications` has been renamed to `gallery_application` and will be deprecated in 4.0
func (o WindowsVirtualMachineScaleSetOutput) GalleryApplications() WindowsVirtualMachineScaleSetGalleryApplicationArrayOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) WindowsVirtualMachineScaleSetGalleryApplicationArrayOutput {
		return v.GalleryApplications
	}).(WindowsVirtualMachineScaleSetGalleryApplicationArrayOutput)
}

// The ID of a Load Balancer Probe which should be used to determine the health of an instance. This is Required and can only be specified when `upgradeMode` is set to `Automatic` or `Rolling`.
func (o WindowsVirtualMachineScaleSetOutput) HealthProbeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.StringPtrOutput { return v.HealthProbeId }).(pulumi.StringPtrOutput)
}

// Specifies the ID of the dedicated host group that the virtual machine scale set resides in. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineScaleSetOutput) HostGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.StringPtrOutput { return v.HostGroupId }).(pulumi.StringPtrOutput)
}

// An `identity` block as defined below.
func (o WindowsVirtualMachineScaleSetOutput) Identity() WindowsVirtualMachineScaleSetIdentityPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) WindowsVirtualMachineScaleSetIdentityPtrOutput {
		return v.Identity
	}).(WindowsVirtualMachineScaleSetIdentityPtrOutput)
}

// The number of Virtual Machines in the Scale Set.
//
// > **NOTE:** If you're using AutoScaling, you may wish to use [`Ignore Changes` functionality](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) to ignore changes to this field.
func (o WindowsVirtualMachineScaleSetOutput) Instances() pulumi.IntOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.IntOutput { return v.Instances }).(pulumi.IntOutput)
}

// Specifies the type of on-premise license (also known as [Azure Hybrid Use Benefit](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing)) which should be used for this Virtual Machine Scale Set. Possible values are `None`, `Windows_Client` and `Windows_Server`.
func (o WindowsVirtualMachineScaleSetOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.StringPtrOutput { return v.LicenseType }).(pulumi.StringPtrOutput)
}

// The Azure location where the Windows Virtual Machine Scale Set should exist. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineScaleSetOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The maximum price you're willing to pay for each Virtual Machine in this Scale Set, in US Dollars; which must be greater than the current spot price. If this bid price falls below the current spot price the Virtual Machines in the Scale Set will be evicted using the `evictionPolicy`. Defaults to `-1`, which means that each Virtual Machine in the Scale Set should not be evicted for price reasons.
//
// > **NOTE:** This can only be configured when `priority` is set to `Spot`.
func (o WindowsVirtualMachineScaleSetOutput) MaxBidPrice() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.Float64PtrOutput { return v.MaxBidPrice }).(pulumi.Float64PtrOutput)
}

// The name of the Windows Virtual Machine Scale Set. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineScaleSetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// One or more `networkInterface` blocks as defined below.
func (o WindowsVirtualMachineScaleSetOutput) NetworkInterfaces() WindowsVirtualMachineScaleSetNetworkInterfaceArrayOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) WindowsVirtualMachineScaleSetNetworkInterfaceArrayOutput {
		return v.NetworkInterfaces
	}).(WindowsVirtualMachineScaleSetNetworkInterfaceArrayOutput)
}

// An `osDisk` block as defined below.
func (o WindowsVirtualMachineScaleSetOutput) OsDisk() WindowsVirtualMachineScaleSetOsDiskOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) WindowsVirtualMachineScaleSetOsDiskOutput { return v.OsDisk }).(WindowsVirtualMachineScaleSetOsDiskOutput)
}

// Should Azure over-provision Virtual Machines in this Scale Set? This means that multiple Virtual Machines will be provisioned and Azure will keep the instances which become available first - which improves provisioning success rates and improves deployment time. You're not billed for these over-provisioned VM's and they don't count towards the Subscription Quota. Defaults to `true`.
func (o WindowsVirtualMachineScaleSetOutput) Overprovision() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.BoolPtrOutput { return v.Overprovision }).(pulumi.BoolPtrOutput)
}

// A `plan` block as defined below. Changing this forces a new resource to be created.
//
// > **NOTE:** When using an image from Azure Marketplace a `plan` must be specified.
func (o WindowsVirtualMachineScaleSetOutput) Plan() WindowsVirtualMachineScaleSetPlanPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) WindowsVirtualMachineScaleSetPlanPtrOutput { return v.Plan }).(WindowsVirtualMachineScaleSetPlanPtrOutput)
}

// Specifies the number of fault domains that are used by this Linux Virtual Machine Scale Set. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineScaleSetOutput) PlatformFaultDomainCount() pulumi.IntOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.IntOutput { return v.PlatformFaultDomainCount }).(pulumi.IntOutput)
}

// The Priority of this Virtual Machine Scale Set. Possible values are `Regular` and `Spot`. Defaults to `Regular`. Changing this value forces a new resource.
//
// > **NOTE:** When `priority` is set to `Spot` an `evictionPolicy` must be specified.
func (o WindowsVirtualMachineScaleSetOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.StringPtrOutput { return v.Priority }).(pulumi.StringPtrOutput)
}

// Should the Azure VM Agent be provisioned on each Virtual Machine in the Scale Set? Defaults to `true`. Changing this value forces a new resource to be created.
func (o WindowsVirtualMachineScaleSetOutput) ProvisionVmAgent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.BoolPtrOutput { return v.ProvisionVmAgent }).(pulumi.BoolPtrOutput)
}

// The ID of the Proximity Placement Group in which the Virtual Machine Scale Set should be assigned to. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineScaleSetOutput) ProximityPlacementGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.StringPtrOutput { return v.ProximityPlacementGroupId }).(pulumi.StringPtrOutput)
}

// The name of the Resource Group in which the Windows Virtual Machine Scale Set should be exist. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineScaleSetOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A `rollingUpgradePolicy` block as defined below. This is Required and can only be specified when `upgradeMode` is set to `Automatic` or `Rolling`. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineScaleSetOutput) RollingUpgradePolicy() WindowsVirtualMachineScaleSetRollingUpgradePolicyPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) WindowsVirtualMachineScaleSetRollingUpgradePolicyPtrOutput {
		return v.RollingUpgradePolicy
	}).(WindowsVirtualMachineScaleSetRollingUpgradePolicyPtrOutput)
}

// A `scaleIn` block as defined below.
func (o WindowsVirtualMachineScaleSetOutput) ScaleIn() WindowsVirtualMachineScaleSetScaleInOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) WindowsVirtualMachineScaleSetScaleInOutput { return v.ScaleIn }).(WindowsVirtualMachineScaleSetScaleInOutput)
}

// Deprecated: `scale_in_policy` will be removed in favour of the `scale_in` code block in version 4.0 of the AzureRM Provider.
func (o WindowsVirtualMachineScaleSetOutput) ScaleInPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.StringOutput { return v.ScaleInPolicy }).(pulumi.StringOutput)
}

// One or more `secret` blocks as defined below.
func (o WindowsVirtualMachineScaleSetOutput) Secrets() WindowsVirtualMachineScaleSetSecretArrayOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) WindowsVirtualMachineScaleSetSecretArrayOutput {
		return v.Secrets
	}).(WindowsVirtualMachineScaleSetSecretArrayOutput)
}

// Specifies if Secure Boot and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineScaleSetOutput) SecureBootEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.BoolPtrOutput { return v.SecureBootEnabled }).(pulumi.BoolPtrOutput)
}

// Should this Virtual Machine Scale Set be limited to a Single Placement Group, which means the number of instances will be capped at 100 Virtual Machines. Defaults to `true`.
func (o WindowsVirtualMachineScaleSetOutput) SinglePlacementGroup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.BoolPtrOutput { return v.SinglePlacementGroup }).(pulumi.BoolPtrOutput)
}

// The Virtual Machine SKU for the Scale Set, such as `Standard_F2`.
func (o WindowsVirtualMachineScaleSetOutput) Sku() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.StringOutput { return v.Sku }).(pulumi.StringOutput)
}

// The ID of an Image which each Virtual Machine in this Scale Set should be based on. Possible Image ID types include `Image ID`, `Shared Image ID`, `Shared Image Version ID`, `Community Gallery Image ID`, `Community Gallery Image Version ID`, `Shared Gallery Image ID` and `Shared Gallery Image Version ID`.
//
// > **NOTE:** One of either `sourceImageId` or `sourceImageReference` must be set.
func (o WindowsVirtualMachineScaleSetOutput) SourceImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.StringPtrOutput { return v.SourceImageId }).(pulumi.StringPtrOutput)
}

// A `sourceImageReference` block as defined below.
//
// > **NOTE:** One of either `sourceImageId` or `sourceImageReference` must be set.
func (o WindowsVirtualMachineScaleSetOutput) SourceImageReference() WindowsVirtualMachineScaleSetSourceImageReferencePtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) WindowsVirtualMachineScaleSetSourceImageReferencePtrOutput {
		return v.SourceImageReference
	}).(WindowsVirtualMachineScaleSetSourceImageReferencePtrOutput)
}

// A `spotRestore` block as defined below.
func (o WindowsVirtualMachineScaleSetOutput) SpotRestore() WindowsVirtualMachineScaleSetSpotRestoreOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) WindowsVirtualMachineScaleSetSpotRestoreOutput {
		return v.SpotRestore
	}).(WindowsVirtualMachineScaleSetSpotRestoreOutput)
}

// A mapping of tags which should be assigned to this Virtual Machine Scale Set.
func (o WindowsVirtualMachineScaleSetOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A `terminateNotification` block as defined below.
//
// > **Note:** This property has been deprecated in favour of the `terminationNotification` property and will be removed in version 4.0 of the provider.
//
// Deprecated: `terminate_notification` has been renamed to `termination_notification` and will be removed in 4.0.
func (o WindowsVirtualMachineScaleSetOutput) TerminateNotification() WindowsVirtualMachineScaleSetTerminateNotificationOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) WindowsVirtualMachineScaleSetTerminateNotificationOutput {
		return v.TerminateNotification
	}).(WindowsVirtualMachineScaleSetTerminateNotificationOutput)
}

// A `terminationNotification` block as defined below.
func (o WindowsVirtualMachineScaleSetOutput) TerminationNotification() WindowsVirtualMachineScaleSetTerminationNotificationOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) WindowsVirtualMachineScaleSetTerminationNotificationOutput {
		return v.TerminationNotification
	}).(WindowsVirtualMachineScaleSetTerminationNotificationOutput)
}

// Specifies the time zone of the virtual machine, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
func (o WindowsVirtualMachineScaleSetOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.StringPtrOutput { return v.Timezone }).(pulumi.StringPtrOutput)
}

// The Unique ID for this Windows Virtual Machine Scale Set.
func (o WindowsVirtualMachineScaleSetOutput) UniqueId() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.StringOutput { return v.UniqueId }).(pulumi.StringOutput)
}

func (o WindowsVirtualMachineScaleSetOutput) UpgradeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.StringPtrOutput { return v.UpgradeMode }).(pulumi.StringPtrOutput)
}

// The Base64-Encoded User Data which should be used for this Virtual Machine Scale Set.
func (o WindowsVirtualMachineScaleSetOutput) UserData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.StringPtrOutput { return v.UserData }).(pulumi.StringPtrOutput)
}

// Specifies if vTPM (Virtual Trusted Platform Module) and Trusted Launch is enabled for the Virtual Machine. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineScaleSetOutput) VtpmEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.BoolPtrOutput { return v.VtpmEnabled }).(pulumi.BoolPtrOutput)
}

// One or more `winrmListener` blocks as defined below. Changing this forces a new resource to be created.
func (o WindowsVirtualMachineScaleSetOutput) WinrmListeners() WindowsVirtualMachineScaleSetWinrmListenerArrayOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) WindowsVirtualMachineScaleSetWinrmListenerArrayOutput {
		return v.WinrmListeners
	}).(WindowsVirtualMachineScaleSetWinrmListenerArrayOutput)
}

// Should the Virtual Machines in this Scale Set be strictly evenly distributed across Availability Zones? Defaults to `false`. Changing this forces a new resource to be created.
//
// > **NOTE:** This can only be set to `true` when one or more `zones` are configured.
func (o WindowsVirtualMachineScaleSetOutput) ZoneBalance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.BoolPtrOutput { return v.ZoneBalance }).(pulumi.BoolPtrOutput)
}

// Specifies a list of Availability Zones in which this Windows Virtual Machine Scale Set should be located. Changing this forces a new Windows Virtual Machine Scale Set to be created.
func (o WindowsVirtualMachineScaleSetOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WindowsVirtualMachineScaleSet) pulumi.StringArrayOutput { return v.Zones }).(pulumi.StringArrayOutput)
}

type WindowsVirtualMachineScaleSetArrayOutput struct{ *pulumi.OutputState }

func (WindowsVirtualMachineScaleSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WindowsVirtualMachineScaleSet)(nil)).Elem()
}

func (o WindowsVirtualMachineScaleSetArrayOutput) ToWindowsVirtualMachineScaleSetArrayOutput() WindowsVirtualMachineScaleSetArrayOutput {
	return o
}

func (o WindowsVirtualMachineScaleSetArrayOutput) ToWindowsVirtualMachineScaleSetArrayOutputWithContext(ctx context.Context) WindowsVirtualMachineScaleSetArrayOutput {
	return o
}

func (o WindowsVirtualMachineScaleSetArrayOutput) Index(i pulumi.IntInput) WindowsVirtualMachineScaleSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WindowsVirtualMachineScaleSet {
		return vs[0].([]*WindowsVirtualMachineScaleSet)[vs[1].(int)]
	}).(WindowsVirtualMachineScaleSetOutput)
}

type WindowsVirtualMachineScaleSetMapOutput struct{ *pulumi.OutputState }

func (WindowsVirtualMachineScaleSetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WindowsVirtualMachineScaleSet)(nil)).Elem()
}

func (o WindowsVirtualMachineScaleSetMapOutput) ToWindowsVirtualMachineScaleSetMapOutput() WindowsVirtualMachineScaleSetMapOutput {
	return o
}

func (o WindowsVirtualMachineScaleSetMapOutput) ToWindowsVirtualMachineScaleSetMapOutputWithContext(ctx context.Context) WindowsVirtualMachineScaleSetMapOutput {
	return o
}

func (o WindowsVirtualMachineScaleSetMapOutput) MapIndex(k pulumi.StringInput) WindowsVirtualMachineScaleSetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WindowsVirtualMachineScaleSet {
		return vs[0].(map[string]*WindowsVirtualMachineScaleSet)[vs[1].(string)]
	}).(WindowsVirtualMachineScaleSetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WindowsVirtualMachineScaleSetInput)(nil)).Elem(), &WindowsVirtualMachineScaleSet{})
	pulumi.RegisterInputType(reflect.TypeOf((*WindowsVirtualMachineScaleSetArrayInput)(nil)).Elem(), WindowsVirtualMachineScaleSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WindowsVirtualMachineScaleSetMapInput)(nil)).Elem(), WindowsVirtualMachineScaleSetMap{})
	pulumi.RegisterOutputType(WindowsVirtualMachineScaleSetOutput{})
	pulumi.RegisterOutputType(WindowsVirtualMachineScaleSetArrayOutput{})
	pulumi.RegisterOutputType(WindowsVirtualMachineScaleSetMapOutput{})
}
