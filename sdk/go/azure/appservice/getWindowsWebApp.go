// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appservice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to access information about an existing Windows Web App.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/appservice"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := appservice.LookupWindowsWebApp(ctx, &appservice.LookupWindowsWebAppArgs{
//				Name:              "existing",
//				ResourceGroupName: "existing",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("id", example.Id)
//			return nil
//		})
//	}
//
// ```
func LookupWindowsWebApp(ctx *pulumi.Context, args *LookupWindowsWebAppArgs, opts ...pulumi.InvokeOption) (*LookupWindowsWebAppResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupWindowsWebAppResult
	err := ctx.Invoke("azure:appservice/getWindowsWebApp:getWindowsWebApp", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getWindowsWebApp.
type LookupWindowsWebAppArgs struct {
	// The name of this Windows Web App.
	Name string `pulumi:"name"`
	// The name of the Resource Group where the Windows Web App exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getWindowsWebApp.
type LookupWindowsWebAppResult struct {
	// A map of key-value pairs of App Settings.
	AppSettings map[string]string `pulumi:"appSettings"`
	// A `authSettings` block as defined below.
	AuthSettings []GetWindowsWebAppAuthSetting `pulumi:"authSettings"`
	// An `authSettingsV2` block as defined below.
	AuthSettingsV2s []GetWindowsWebAppAuthSettingsV2 `pulumi:"authSettingsV2s"`
	// A `backup` block as defined below.
	Backups []GetWindowsWebAppBackup `pulumi:"backups"`
	// Is Client Affinity enabled?
	ClientAffinityEnabled bool `pulumi:"clientAffinityEnabled"`
	// Are Client Certificates enabled?
	ClientCertificateEnabled bool `pulumi:"clientCertificateEnabled"`
	// Paths to exclude when using client certificates, separated by ;
	ClientCertificateExclusionPaths string `pulumi:"clientCertificateExclusionPaths"`
	// The Client Certificate mode.
	ClientCertificateMode string `pulumi:"clientCertificateMode"`
	// A `connectionString` block as defined below.
	ConnectionStrings []GetWindowsWebAppConnectionString `pulumi:"connectionStrings"`
	// The identifier used by App Service to perform domain ownership verification via DNS TXT record.
	CustomDomainVerificationId string `pulumi:"customDomainVerificationId"`
	// The Default Hostname of the Windows Web App.
	DefaultHostname string `pulumi:"defaultHostname"`
	// Is the Backup enabled?
	Enabled bool `pulumi:"enabled"`
	// Are the default FTP Basic Authentication publishing credentials enabled.
	FtpPublishBasicAuthenticationEnabled bool `pulumi:"ftpPublishBasicAuthenticationEnabled"`
	// The ID of the App Service Environment used by App Service.
	HostingEnvironmentId string `pulumi:"hostingEnvironmentId"`
	// Does the Windows Web App require HTTPS connections.
	HttpsOnly bool `pulumi:"httpsOnly"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A `identity` block as defined below.
	Identities []GetWindowsWebAppIdentity `pulumi:"identities"`
	// The string representation of the Windows Web App Kind.
	Kind string `pulumi:"kind"`
	// The Azure Region where the Windows Web App exists.
	Location string `pulumi:"location"`
	// A `logs` block as defined below.
	Logs []GetWindowsWebAppLog `pulumi:"logs"`
	// The name of this Storage Account.
	Name string `pulumi:"name"`
	// The list of Outbound IP Addresses for this Windows Web App.
	OutboundIpAddressLists []string `pulumi:"outboundIpAddressLists"`
	// A string representation of the list of Outbound IP Addresses for this Windows Web App.
	OutboundIpAddresses string `pulumi:"outboundIpAddresses"`
	// The list of Possible Outbound IP Addresses that could be used by this Windows Web App.
	PossibleOutboundIpAddressLists []string `pulumi:"possibleOutboundIpAddressLists"`
	// The string representation of the list of Possible Outbound IP Addresses that could be used by this Windows Web App.
	PossibleOutboundIpAddresses string `pulumi:"possibleOutboundIpAddresses"`
	// Is Public Network Access enabled for the Windows Web App.
	PublicNetworkAccessEnabled bool   `pulumi:"publicNetworkAccessEnabled"`
	ResourceGroupName          string `pulumi:"resourceGroupName"`
	// The ID of the Service Plan in which this Windows Web App resides.
	ServicePlanId string `pulumi:"servicePlanId"`
	// A `siteConfig` block as defined below.
	SiteConfigs []GetWindowsWebAppSiteConfig `pulumi:"siteConfigs"`
	// A `siteCredential` block as defined below.
	SiteCredentials []GetWindowsWebAppSiteCredential `pulumi:"siteCredentials"`
	// A `stickySettings` block as defined below.
	StickySettings []GetWindowsWebAppStickySetting `pulumi:"stickySettings"`
	// A `storageAccount` block as defined below.
	StorageAccounts []GetWindowsWebAppStorageAccount `pulumi:"storageAccounts"`
	// A mapping of tags assigned to the Windows Web App.
	Tags map[string]string `pulumi:"tags"`
	// The subnet id which the Windows Web App is vNet Integrated with.
	VirtualNetworkSubnetId string `pulumi:"virtualNetworkSubnetId"`
	// Are the default WebDeploy Basic Authentication publishing credentials enabled.
	WebdeployPublishBasicAuthenticationEnabled bool `pulumi:"webdeployPublishBasicAuthenticationEnabled"`
}

func LookupWindowsWebAppOutput(ctx *pulumi.Context, args LookupWindowsWebAppOutputArgs, opts ...pulumi.InvokeOption) LookupWindowsWebAppResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupWindowsWebAppResult, error) {
			args := v.(LookupWindowsWebAppArgs)
			r, err := LookupWindowsWebApp(ctx, &args, opts...)
			var s LookupWindowsWebAppResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupWindowsWebAppResultOutput)
}

// A collection of arguments for invoking getWindowsWebApp.
type LookupWindowsWebAppOutputArgs struct {
	// The name of this Windows Web App.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Resource Group where the Windows Web App exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupWindowsWebAppOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWindowsWebAppArgs)(nil)).Elem()
}

// A collection of values returned by getWindowsWebApp.
type LookupWindowsWebAppResultOutput struct{ *pulumi.OutputState }

func (LookupWindowsWebAppResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWindowsWebAppResult)(nil)).Elem()
}

func (o LookupWindowsWebAppResultOutput) ToLookupWindowsWebAppResultOutput() LookupWindowsWebAppResultOutput {
	return o
}

func (o LookupWindowsWebAppResultOutput) ToLookupWindowsWebAppResultOutputWithContext(ctx context.Context) LookupWindowsWebAppResultOutput {
	return o
}

func (o LookupWindowsWebAppResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupWindowsWebAppResult] {
	return pulumix.Output[LookupWindowsWebAppResult]{
		OutputState: o.OutputState,
	}
}

// A map of key-value pairs of App Settings.
func (o LookupWindowsWebAppResultOutput) AppSettings() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) map[string]string { return v.AppSettings }).(pulumi.StringMapOutput)
}

// A `authSettings` block as defined below.
func (o LookupWindowsWebAppResultOutput) AuthSettings() GetWindowsWebAppAuthSettingArrayOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) []GetWindowsWebAppAuthSetting { return v.AuthSettings }).(GetWindowsWebAppAuthSettingArrayOutput)
}

// An `authSettingsV2` block as defined below.
func (o LookupWindowsWebAppResultOutput) AuthSettingsV2s() GetWindowsWebAppAuthSettingsV2ArrayOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) []GetWindowsWebAppAuthSettingsV2 { return v.AuthSettingsV2s }).(GetWindowsWebAppAuthSettingsV2ArrayOutput)
}

// A `backup` block as defined below.
func (o LookupWindowsWebAppResultOutput) Backups() GetWindowsWebAppBackupArrayOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) []GetWindowsWebAppBackup { return v.Backups }).(GetWindowsWebAppBackupArrayOutput)
}

// Is Client Affinity enabled?
func (o LookupWindowsWebAppResultOutput) ClientAffinityEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) bool { return v.ClientAffinityEnabled }).(pulumi.BoolOutput)
}

// Are Client Certificates enabled?
func (o LookupWindowsWebAppResultOutput) ClientCertificateEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) bool { return v.ClientCertificateEnabled }).(pulumi.BoolOutput)
}

// Paths to exclude when using client certificates, separated by ;
func (o LookupWindowsWebAppResultOutput) ClientCertificateExclusionPaths() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) string { return v.ClientCertificateExclusionPaths }).(pulumi.StringOutput)
}

// The Client Certificate mode.
func (o LookupWindowsWebAppResultOutput) ClientCertificateMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) string { return v.ClientCertificateMode }).(pulumi.StringOutput)
}

// A `connectionString` block as defined below.
func (o LookupWindowsWebAppResultOutput) ConnectionStrings() GetWindowsWebAppConnectionStringArrayOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) []GetWindowsWebAppConnectionString { return v.ConnectionStrings }).(GetWindowsWebAppConnectionStringArrayOutput)
}

// The identifier used by App Service to perform domain ownership verification via DNS TXT record.
func (o LookupWindowsWebAppResultOutput) CustomDomainVerificationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) string { return v.CustomDomainVerificationId }).(pulumi.StringOutput)
}

// The Default Hostname of the Windows Web App.
func (o LookupWindowsWebAppResultOutput) DefaultHostname() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) string { return v.DefaultHostname }).(pulumi.StringOutput)
}

// Is the Backup enabled?
func (o LookupWindowsWebAppResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Are the default FTP Basic Authentication publishing credentials enabled.
func (o LookupWindowsWebAppResultOutput) FtpPublishBasicAuthenticationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) bool { return v.FtpPublishBasicAuthenticationEnabled }).(pulumi.BoolOutput)
}

// The ID of the App Service Environment used by App Service.
func (o LookupWindowsWebAppResultOutput) HostingEnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) string { return v.HostingEnvironmentId }).(pulumi.StringOutput)
}

// Does the Windows Web App require HTTPS connections.
func (o LookupWindowsWebAppResultOutput) HttpsOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) bool { return v.HttpsOnly }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupWindowsWebAppResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) string { return v.Id }).(pulumi.StringOutput)
}

// A `identity` block as defined below.
func (o LookupWindowsWebAppResultOutput) Identities() GetWindowsWebAppIdentityArrayOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) []GetWindowsWebAppIdentity { return v.Identities }).(GetWindowsWebAppIdentityArrayOutput)
}

// The string representation of the Windows Web App Kind.
func (o LookupWindowsWebAppResultOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) string { return v.Kind }).(pulumi.StringOutput)
}

// The Azure Region where the Windows Web App exists.
func (o LookupWindowsWebAppResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) string { return v.Location }).(pulumi.StringOutput)
}

// A `logs` block as defined below.
func (o LookupWindowsWebAppResultOutput) Logs() GetWindowsWebAppLogArrayOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) []GetWindowsWebAppLog { return v.Logs }).(GetWindowsWebAppLogArrayOutput)
}

// The name of this Storage Account.
func (o LookupWindowsWebAppResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) string { return v.Name }).(pulumi.StringOutput)
}

// The list of Outbound IP Addresses for this Windows Web App.
func (o LookupWindowsWebAppResultOutput) OutboundIpAddressLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) []string { return v.OutboundIpAddressLists }).(pulumi.StringArrayOutput)
}

// A string representation of the list of Outbound IP Addresses for this Windows Web App.
func (o LookupWindowsWebAppResultOutput) OutboundIpAddresses() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) string { return v.OutboundIpAddresses }).(pulumi.StringOutput)
}

// The list of Possible Outbound IP Addresses that could be used by this Windows Web App.
func (o LookupWindowsWebAppResultOutput) PossibleOutboundIpAddressLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) []string { return v.PossibleOutboundIpAddressLists }).(pulumi.StringArrayOutput)
}

// The string representation of the list of Possible Outbound IP Addresses that could be used by this Windows Web App.
func (o LookupWindowsWebAppResultOutput) PossibleOutboundIpAddresses() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) string { return v.PossibleOutboundIpAddresses }).(pulumi.StringOutput)
}

// Is Public Network Access enabled for the Windows Web App.
func (o LookupWindowsWebAppResultOutput) PublicNetworkAccessEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) bool { return v.PublicNetworkAccessEnabled }).(pulumi.BoolOutput)
}

func (o LookupWindowsWebAppResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The ID of the Service Plan in which this Windows Web App resides.
func (o LookupWindowsWebAppResultOutput) ServicePlanId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) string { return v.ServicePlanId }).(pulumi.StringOutput)
}

// A `siteConfig` block as defined below.
func (o LookupWindowsWebAppResultOutput) SiteConfigs() GetWindowsWebAppSiteConfigArrayOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) []GetWindowsWebAppSiteConfig { return v.SiteConfigs }).(GetWindowsWebAppSiteConfigArrayOutput)
}

// A `siteCredential` block as defined below.
func (o LookupWindowsWebAppResultOutput) SiteCredentials() GetWindowsWebAppSiteCredentialArrayOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) []GetWindowsWebAppSiteCredential { return v.SiteCredentials }).(GetWindowsWebAppSiteCredentialArrayOutput)
}

// A `stickySettings` block as defined below.
func (o LookupWindowsWebAppResultOutput) StickySettings() GetWindowsWebAppStickySettingArrayOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) []GetWindowsWebAppStickySetting { return v.StickySettings }).(GetWindowsWebAppStickySettingArrayOutput)
}

// A `storageAccount` block as defined below.
func (o LookupWindowsWebAppResultOutput) StorageAccounts() GetWindowsWebAppStorageAccountArrayOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) []GetWindowsWebAppStorageAccount { return v.StorageAccounts }).(GetWindowsWebAppStorageAccountArrayOutput)
}

// A mapping of tags assigned to the Windows Web App.
func (o LookupWindowsWebAppResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The subnet id which the Windows Web App is vNet Integrated with.
func (o LookupWindowsWebAppResultOutput) VirtualNetworkSubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) string { return v.VirtualNetworkSubnetId }).(pulumi.StringOutput)
}

// Are the default WebDeploy Basic Authentication publishing credentials enabled.
func (o LookupWindowsWebAppResultOutput) WebdeployPublishBasicAuthenticationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupWindowsWebAppResult) bool { return v.WebdeployPublishBasicAuthenticationEnabled }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupWindowsWebAppResultOutput{})
}
