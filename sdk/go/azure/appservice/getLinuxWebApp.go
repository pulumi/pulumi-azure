// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appservice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to access information about an existing Linux Web App.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/appservice"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := appservice.LookupLinuxWebApp(ctx, &appservice.LookupLinuxWebAppArgs{
//				Name:              "existing",
//				ResourceGroupName: "existing",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("id", example.Id)
//			return nil
//		})
//	}
//
// ```
func LookupLinuxWebApp(ctx *pulumi.Context, args *LookupLinuxWebAppArgs, opts ...pulumi.InvokeOption) (*LookupLinuxWebAppResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLinuxWebAppResult
	err := ctx.Invoke("azure:appservice/getLinuxWebApp:getLinuxWebApp", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLinuxWebApp.
type LookupLinuxWebAppArgs struct {
	// The name of this Linux Web App.
	Name string `pulumi:"name"`
	// The name of the Resource Group where the Linux Web App exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getLinuxWebApp.
type LookupLinuxWebAppResult struct {
	// An `appMetadata` block as defined below.
	AppMetadata map[string]string `pulumi:"appMetadata"`
	// An `appSettings` block as defined below.
	AppSettings map[string]string `pulumi:"appSettings"`
	// An `authSettings` block as defined below.
	AuthSettings []GetLinuxWebAppAuthSetting `pulumi:"authSettings"`
	// An `authSettingsV2` block as defined below.
	AuthSettingsV2s []GetLinuxWebAppAuthSettingsV2 `pulumi:"authSettingsV2s"`
	// The current availability state. Possible values are `Normal`, `Limited`, and `DisasterRecoveryMode`.
	Availability string `pulumi:"availability"`
	// A `backup` block as defined below.
	Backups []GetLinuxWebAppBackup `pulumi:"backups"`
	// Is Client Affinity enabled?
	ClientAffinityEnabled bool `pulumi:"clientAffinityEnabled"`
	// Are Client Certificates enabled?
	ClientCertificateEnabled bool `pulumi:"clientCertificateEnabled"`
	// Paths to exclude when using client certificates, separated by ;
	ClientCertificateExclusionPaths string `pulumi:"clientCertificateExclusionPaths"`
	// The Client Certificate mode.
	ClientCertificateMode string `pulumi:"clientCertificateMode"`
	// A `connectionString` block as defined below.
	ConnectionStrings []GetLinuxWebAppConnectionString `pulumi:"connectionStrings"`
	// The identifier used by App Service to perform domain ownership verification via DNS TXT record.
	CustomDomainVerificationId string `pulumi:"customDomainVerificationId"`
	// The default hostname of the Linux Web App.
	DefaultHostname string `pulumi:"defaultHostname"`
	// Is the Backup enabled?
	Enabled bool `pulumi:"enabled"`
	// Are the default FTP Basic Authentication publishing credentials enabled.
	FtpPublishBasicAuthenticationEnabled bool `pulumi:"ftpPublishBasicAuthenticationEnabled"`
	// The ID of the App Service Environment used by App Service.
	HostingEnvironmentId string `pulumi:"hostingEnvironmentId"`
	// Should the Linux Web App require HTTPS connections.
	HttpsOnly bool `pulumi:"httpsOnly"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A `identity` block as defined below.
	Identities                  []GetLinuxWebAppIdentity `pulumi:"identities"`
	KeyVaultReferenceIdentityId string                   `pulumi:"keyVaultReferenceIdentityId"`
	// The Kind value for this Linux Web App.
	Kind string `pulumi:"kind"`
	// The Azure Region where the Linux Web App exists.
	Location string `pulumi:"location"`
	// A `logs` block as defined below.
	Logs []GetLinuxWebAppLog `pulumi:"logs"`
	// The name of this Storage Account.
	Name string `pulumi:"name"`
	// A `outboundIpAddressList` block as defined below.
	OutboundIpAddressLists []string `pulumi:"outboundIpAddressLists"`
	// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`.
	OutboundIpAddresses string `pulumi:"outboundIpAddresses"`
	// A `possibleOutboundIpAddressList` block as defined below.
	PossibleOutboundIpAddressLists []string `pulumi:"possibleOutboundIpAddressLists"`
	// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outboundIpAddresses`.
	PossibleOutboundIpAddresses string `pulumi:"possibleOutboundIpAddresses"`
	// Is Public Network Access enabled for this Linux Web App.
	PublicNetworkAccessEnabled bool   `pulumi:"publicNetworkAccessEnabled"`
	ResourceGroupName          string `pulumi:"resourceGroupName"`
	// The ID of the Service Plan that this Linux Web App exists in.
	ServicePlanId string `pulumi:"servicePlanId"`
	// A `siteConfig` block as defined below.
	SiteConfigs []GetLinuxWebAppSiteConfig `pulumi:"siteConfigs"`
	// A `siteCredential` block as defined below.
	SiteCredentials []GetLinuxWebAppSiteCredential `pulumi:"siteCredentials"`
	// A `stickySettings` block as defined below.
	StickySettings []GetLinuxWebAppStickySetting `pulumi:"stickySettings"`
	// A `storageAccount` block as defined below.
	StorageAccounts []GetLinuxWebAppStorageAccount `pulumi:"storageAccounts"`
	// A mapping of tags assigned to the Linux Web App.
	Tags map[string]string `pulumi:"tags"`
	// The current usage state. Possible values are `Normal` and `Exceeded`.
	Usage string `pulumi:"usage"`
	// The subnet id which the Linux Web App is vNet Integrated with.
	VirtualNetworkSubnetId string `pulumi:"virtualNetworkSubnetId"`
	// Are the default WebDeploy Basic Authentication publishing credentials enabled.
	WebdeployPublishBasicAuthenticationEnabled bool `pulumi:"webdeployPublishBasicAuthenticationEnabled"`
}

func LookupLinuxWebAppOutput(ctx *pulumi.Context, args LookupLinuxWebAppOutputArgs, opts ...pulumi.InvokeOption) LookupLinuxWebAppResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupLinuxWebAppResult, error) {
			args := v.(LookupLinuxWebAppArgs)
			r, err := LookupLinuxWebApp(ctx, &args, opts...)
			var s LookupLinuxWebAppResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupLinuxWebAppResultOutput)
}

// A collection of arguments for invoking getLinuxWebApp.
type LookupLinuxWebAppOutputArgs struct {
	// The name of this Linux Web App.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Resource Group where the Linux Web App exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupLinuxWebAppOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLinuxWebAppArgs)(nil)).Elem()
}

// A collection of values returned by getLinuxWebApp.
type LookupLinuxWebAppResultOutput struct{ *pulumi.OutputState }

func (LookupLinuxWebAppResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLinuxWebAppResult)(nil)).Elem()
}

func (o LookupLinuxWebAppResultOutput) ToLookupLinuxWebAppResultOutput() LookupLinuxWebAppResultOutput {
	return o
}

func (o LookupLinuxWebAppResultOutput) ToLookupLinuxWebAppResultOutputWithContext(ctx context.Context) LookupLinuxWebAppResultOutput {
	return o
}

func (o LookupLinuxWebAppResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupLinuxWebAppResult] {
	return pulumix.Output[LookupLinuxWebAppResult]{
		OutputState: o.OutputState,
	}
}

// An `appMetadata` block as defined below.
func (o LookupLinuxWebAppResultOutput) AppMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) map[string]string { return v.AppMetadata }).(pulumi.StringMapOutput)
}

// An `appSettings` block as defined below.
func (o LookupLinuxWebAppResultOutput) AppSettings() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) map[string]string { return v.AppSettings }).(pulumi.StringMapOutput)
}

// An `authSettings` block as defined below.
func (o LookupLinuxWebAppResultOutput) AuthSettings() GetLinuxWebAppAuthSettingArrayOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) []GetLinuxWebAppAuthSetting { return v.AuthSettings }).(GetLinuxWebAppAuthSettingArrayOutput)
}

// An `authSettingsV2` block as defined below.
func (o LookupLinuxWebAppResultOutput) AuthSettingsV2s() GetLinuxWebAppAuthSettingsV2ArrayOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) []GetLinuxWebAppAuthSettingsV2 { return v.AuthSettingsV2s }).(GetLinuxWebAppAuthSettingsV2ArrayOutput)
}

// The current availability state. Possible values are `Normal`, `Limited`, and `DisasterRecoveryMode`.
func (o LookupLinuxWebAppResultOutput) Availability() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) string { return v.Availability }).(pulumi.StringOutput)
}

// A `backup` block as defined below.
func (o LookupLinuxWebAppResultOutput) Backups() GetLinuxWebAppBackupArrayOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) []GetLinuxWebAppBackup { return v.Backups }).(GetLinuxWebAppBackupArrayOutput)
}

// Is Client Affinity enabled?
func (o LookupLinuxWebAppResultOutput) ClientAffinityEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) bool { return v.ClientAffinityEnabled }).(pulumi.BoolOutput)
}

// Are Client Certificates enabled?
func (o LookupLinuxWebAppResultOutput) ClientCertificateEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) bool { return v.ClientCertificateEnabled }).(pulumi.BoolOutput)
}

// Paths to exclude when using client certificates, separated by ;
func (o LookupLinuxWebAppResultOutput) ClientCertificateExclusionPaths() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) string { return v.ClientCertificateExclusionPaths }).(pulumi.StringOutput)
}

// The Client Certificate mode.
func (o LookupLinuxWebAppResultOutput) ClientCertificateMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) string { return v.ClientCertificateMode }).(pulumi.StringOutput)
}

// A `connectionString` block as defined below.
func (o LookupLinuxWebAppResultOutput) ConnectionStrings() GetLinuxWebAppConnectionStringArrayOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) []GetLinuxWebAppConnectionString { return v.ConnectionStrings }).(GetLinuxWebAppConnectionStringArrayOutput)
}

// The identifier used by App Service to perform domain ownership verification via DNS TXT record.
func (o LookupLinuxWebAppResultOutput) CustomDomainVerificationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) string { return v.CustomDomainVerificationId }).(pulumi.StringOutput)
}

// The default hostname of the Linux Web App.
func (o LookupLinuxWebAppResultOutput) DefaultHostname() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) string { return v.DefaultHostname }).(pulumi.StringOutput)
}

// Is the Backup enabled?
func (o LookupLinuxWebAppResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Are the default FTP Basic Authentication publishing credentials enabled.
func (o LookupLinuxWebAppResultOutput) FtpPublishBasicAuthenticationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) bool { return v.FtpPublishBasicAuthenticationEnabled }).(pulumi.BoolOutput)
}

// The ID of the App Service Environment used by App Service.
func (o LookupLinuxWebAppResultOutput) HostingEnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) string { return v.HostingEnvironmentId }).(pulumi.StringOutput)
}

// Should the Linux Web App require HTTPS connections.
func (o LookupLinuxWebAppResultOutput) HttpsOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) bool { return v.HttpsOnly }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupLinuxWebAppResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) string { return v.Id }).(pulumi.StringOutput)
}

// A `identity` block as defined below.
func (o LookupLinuxWebAppResultOutput) Identities() GetLinuxWebAppIdentityArrayOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) []GetLinuxWebAppIdentity { return v.Identities }).(GetLinuxWebAppIdentityArrayOutput)
}

func (o LookupLinuxWebAppResultOutput) KeyVaultReferenceIdentityId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) string { return v.KeyVaultReferenceIdentityId }).(pulumi.StringOutput)
}

// The Kind value for this Linux Web App.
func (o LookupLinuxWebAppResultOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) string { return v.Kind }).(pulumi.StringOutput)
}

// The Azure Region where the Linux Web App exists.
func (o LookupLinuxWebAppResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) string { return v.Location }).(pulumi.StringOutput)
}

// A `logs` block as defined below.
func (o LookupLinuxWebAppResultOutput) Logs() GetLinuxWebAppLogArrayOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) []GetLinuxWebAppLog { return v.Logs }).(GetLinuxWebAppLogArrayOutput)
}

// The name of this Storage Account.
func (o LookupLinuxWebAppResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) string { return v.Name }).(pulumi.StringOutput)
}

// A `outboundIpAddressList` block as defined below.
func (o LookupLinuxWebAppResultOutput) OutboundIpAddressLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) []string { return v.OutboundIpAddressLists }).(pulumi.StringArrayOutput)
}

// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`.
func (o LookupLinuxWebAppResultOutput) OutboundIpAddresses() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) string { return v.OutboundIpAddresses }).(pulumi.StringOutput)
}

// A `possibleOutboundIpAddressList` block as defined below.
func (o LookupLinuxWebAppResultOutput) PossibleOutboundIpAddressLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) []string { return v.PossibleOutboundIpAddressLists }).(pulumi.StringArrayOutput)
}

// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outboundIpAddresses`.
func (o LookupLinuxWebAppResultOutput) PossibleOutboundIpAddresses() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) string { return v.PossibleOutboundIpAddresses }).(pulumi.StringOutput)
}

// Is Public Network Access enabled for this Linux Web App.
func (o LookupLinuxWebAppResultOutput) PublicNetworkAccessEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) bool { return v.PublicNetworkAccessEnabled }).(pulumi.BoolOutput)
}

func (o LookupLinuxWebAppResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The ID of the Service Plan that this Linux Web App exists in.
func (o LookupLinuxWebAppResultOutput) ServicePlanId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) string { return v.ServicePlanId }).(pulumi.StringOutput)
}

// A `siteConfig` block as defined below.
func (o LookupLinuxWebAppResultOutput) SiteConfigs() GetLinuxWebAppSiteConfigArrayOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) []GetLinuxWebAppSiteConfig { return v.SiteConfigs }).(GetLinuxWebAppSiteConfigArrayOutput)
}

// A `siteCredential` block as defined below.
func (o LookupLinuxWebAppResultOutput) SiteCredentials() GetLinuxWebAppSiteCredentialArrayOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) []GetLinuxWebAppSiteCredential { return v.SiteCredentials }).(GetLinuxWebAppSiteCredentialArrayOutput)
}

// A `stickySettings` block as defined below.
func (o LookupLinuxWebAppResultOutput) StickySettings() GetLinuxWebAppStickySettingArrayOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) []GetLinuxWebAppStickySetting { return v.StickySettings }).(GetLinuxWebAppStickySettingArrayOutput)
}

// A `storageAccount` block as defined below.
func (o LookupLinuxWebAppResultOutput) StorageAccounts() GetLinuxWebAppStorageAccountArrayOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) []GetLinuxWebAppStorageAccount { return v.StorageAccounts }).(GetLinuxWebAppStorageAccountArrayOutput)
}

// A mapping of tags assigned to the Linux Web App.
func (o LookupLinuxWebAppResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The current usage state. Possible values are `Normal` and `Exceeded`.
func (o LookupLinuxWebAppResultOutput) Usage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) string { return v.Usage }).(pulumi.StringOutput)
}

// The subnet id which the Linux Web App is vNet Integrated with.
func (o LookupLinuxWebAppResultOutput) VirtualNetworkSubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) string { return v.VirtualNetworkSubnetId }).(pulumi.StringOutput)
}

// Are the default WebDeploy Basic Authentication publishing credentials enabled.
func (o LookupLinuxWebAppResultOutput) WebdeployPublishBasicAuthenticationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupLinuxWebAppResult) bool { return v.WebdeployPublishBasicAuthenticationEnabled }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLinuxWebAppResultOutput{})
}
