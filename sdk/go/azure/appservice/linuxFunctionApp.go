// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Linux Function App.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/appservice"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Location:               exampleResourceGroup.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("LRS"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleServicePlan, err := appservice.NewServicePlan(ctx, "exampleServicePlan", &appservice.ServicePlanArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				OsType:            pulumi.String("Linux"),
//				SkuName:           pulumi.String("Y1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = appservice.NewLinuxFunctionApp(ctx, "exampleLinuxFunctionApp", &appservice.LinuxFunctionAppArgs{
//				ResourceGroupName:       exampleResourceGroup.Name,
//				Location:                exampleResourceGroup.Location,
//				StorageAccountName:      exampleAccount.Name,
//				StorageAccountAccessKey: exampleAccount.PrimaryAccessKey,
//				ServicePlanId:           exampleServicePlan.ID(),
//				SiteConfig:              nil,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Linux Function Apps can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:appservice/linuxFunctionApp:LinuxFunctionApp example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/sites/site1
//
// ```
type LinuxFunctionApp struct {
	pulumi.CustomResourceState

	// A map of key-value pairs for [App
	// Settings](https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings) and custom values.
	AppSettings pulumi.StringMapOutput `pulumi:"appSettings"`
	// A `authSettings` block as defined below.
	AuthSettings LinuxFunctionAppAuthSettingsPtrOutput `pulumi:"authSettings"`
	// An `authSettingsV2` block as defined below.
	AuthSettingsV2 LinuxFunctionAppAuthSettingsV2PtrOutput `pulumi:"authSettingsV2"`
	// A `backup` block as defined below.
	Backup LinuxFunctionAppBackupPtrOutput `pulumi:"backup"`
	// Should built in logging be enabled. Configures `AzureWebJobsDashboard` app setting based on the configured storage setting. Defaults to `true`.
	BuiltinLoggingEnabled pulumi.BoolPtrOutput `pulumi:"builtinLoggingEnabled"`
	// Should the function app use Client Certificates.
	ClientCertificateEnabled pulumi.BoolPtrOutput `pulumi:"clientCertificateEnabled"`
	// Paths to exclude when using client certificates, separated by ;
	ClientCertificateExclusionPaths pulumi.StringPtrOutput `pulumi:"clientCertificateExclusionPaths"`
	// The mode of the Function App's client certificates requirement for incoming requests. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. Defaults to `Optional`.
	ClientCertificateMode pulumi.StringPtrOutput `pulumi:"clientCertificateMode"`
	// One or more `connectionString` blocks as defined below.
	ConnectionStrings LinuxFunctionAppConnectionStringArrayOutput `pulumi:"connectionStrings"`
	// Should the settings for linking the Function App to storage be suppressed.
	ContentShareForceDisabled pulumi.BoolPtrOutput `pulumi:"contentShareForceDisabled"`
	// The identifier used by App Service to perform domain ownership verification via DNS TXT record.
	CustomDomainVerificationId pulumi.StringOutput `pulumi:"customDomainVerificationId"`
	// The amount of memory in gigabyte-seconds that your application is allowed to consume per day. Setting this value only affects function apps under the consumption plan. Defaults to `0`.
	DailyMemoryTimeQuota pulumi.IntPtrOutput `pulumi:"dailyMemoryTimeQuota"`
	// The default hostname of the Linux Function App.
	DefaultHostname pulumi.StringOutput `pulumi:"defaultHostname"`
	// Is the Function App enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Should the default FTP Basic Authentication publishing profile be enabled. Defaults to `true`.
	FtpPublishBasicAuthenticationEnabled pulumi.BoolPtrOutput `pulumi:"ftpPublishBasicAuthenticationEnabled"`
	// The runtime version associated with the Function App. Defaults to `~4`.
	FunctionsExtensionVersion pulumi.StringPtrOutput `pulumi:"functionsExtensionVersion"`
	// The ID of the App Service Environment used by Function App.
	HostingEnvironmentId pulumi.StringOutput `pulumi:"hostingEnvironmentId"`
	// Can the Function App only be accessed via HTTPS? Defaults to `false`.
	HttpsOnly pulumi.BoolPtrOutput `pulumi:"httpsOnly"`
	// A `identity` block as defined below.
	Identity LinuxFunctionAppIdentityPtrOutput `pulumi:"identity"`
	// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity)
	KeyVaultReferenceIdentityId pulumi.StringOutput `pulumi:"keyVaultReferenceIdentityId"`
	// The Kind value for this Linux Function App.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The Azure Region where the Linux Function App should exist. Changing this forces a new Linux Function App to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name which should be used for this Linux Function App. Changing this forces a new Linux Function App to be created. Limit the function name to 32 characters to avoid naming collisions. For more information about [Function App naming rule](https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/resource-name-rules#microsoftweb) and [Host ID Collisions](https://github.com/Azure/azure-functions-host/wiki/Host-IDs#host-id-collisions)
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of outbound IP addresses. For example `["52.23.25.3", "52.143.43.12"]`
	OutboundIpAddressLists pulumi.StringArrayOutput `pulumi:"outboundIpAddressLists"`
	// A comma separated list of outbound IP addresses as a string. For example `52.23.25.3,52.143.43.12`.
	OutboundIpAddresses pulumi.StringOutput `pulumi:"outboundIpAddresses"`
	// A list of possible outbound IP addresses, not all of which are necessarily in use. This is a superset of `outboundIpAddressList`. For example `["52.23.25.3", "52.143.43.12"]`.
	PossibleOutboundIpAddressLists pulumi.StringArrayOutput `pulumi:"possibleOutboundIpAddressLists"`
	// A comma separated list of possible outbound IP addresses as a string. For example `52.23.25.3,52.143.43.12,52.143.43.17`. This is a superset of `outboundIpAddresses`.
	PossibleOutboundIpAddresses pulumi.StringOutput `pulumi:"possibleOutboundIpAddresses"`
	// Should public network access be enabled for the Function App. Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrOutput `pulumi:"publicNetworkAccessEnabled"`
	// The name of the Resource Group where the Linux Function App should exist. Changing this forces a new Linux Function App to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The ID of the App Service Plan within which to create this Function App.
	ServicePlanId pulumi.StringOutput `pulumi:"servicePlanId"`
	// A `siteConfig` block as defined below.
	SiteConfig LinuxFunctionAppSiteConfigOutput `pulumi:"siteConfig"`
	// A `siteCredential` block as defined below.
	SiteCredentials LinuxFunctionAppSiteCredentialArrayOutput `pulumi:"siteCredentials"`
	// A `stickySettings` block as defined below.
	StickySettings LinuxFunctionAppStickySettingsPtrOutput `pulumi:"stickySettings"`
	// The access key which will be used to access the backend storage account for the Function App. Conflicts with `storageUsesManagedIdentity`.
	StorageAccountAccessKey pulumi.StringPtrOutput `pulumi:"storageAccountAccessKey"`
	// The backend storage account name which will be used by this Function App.
	StorageAccountName pulumi.StringPtrOutput `pulumi:"storageAccountName"`
	// One or more `storageAccount` blocks as defined below.
	StorageAccounts LinuxFunctionAppStorageAccountArrayOutput `pulumi:"storageAccounts"`
	// The Key Vault Secret ID, optionally including version, that contains the Connection String to connect to the storage account for this Function App.
	//
	// > **NOTE:** `storageKeyVaultSecretId` cannot be used with `storageAccountName`.
	//
	// > **NOTE:** `storageKeyVaultSecretId` used without a version will use the latest version of the secret, however, the service can take up to 24h to pick up a rotation of the latest version. See the [official docs](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#rotation) for more information.
	StorageKeyVaultSecretId pulumi.StringPtrOutput `pulumi:"storageKeyVaultSecretId"`
	// Should the Function App use Managed Identity to access the storage account. Conflicts with `storageAccountAccessKey`.
	//
	// > **NOTE:** One of `storageAccountAccessKey` or `storageUsesManagedIdentity` must be specified when using `storageAccountName`.
	StorageUsesManagedIdentity pulumi.BoolPtrOutput `pulumi:"storageUsesManagedIdentity"`
	// A mapping of tags which should be assigned to the Linux Function App.
	Tags                   pulumi.StringMapOutput `pulumi:"tags"`
	VirtualNetworkSubnetId pulumi.StringPtrOutput `pulumi:"virtualNetworkSubnetId"`
	// Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to `true`.
	//
	// > **NOTE:** Setting this value to true will disable the ability to use `zipDeployFile` which currently relies on the default publishing profile.
	WebdeployPublishBasicAuthenticationEnabled pulumi.BoolPtrOutput `pulumi:"webdeployPublishBasicAuthenticationEnabled"`
	// The local path and filename of the Zip packaged application to deploy to this Linux Function App.
	//
	// > **Note:** Using this value requires either `WEBSITE_RUN_FROM_PACKAGE=1` or `SCM_DO_BUILD_DURING_DEPLOYMENT=true` to be set on the App in `appSettings`. Refer to the [Azure docs](https://learn.microsoft.com/en-us/azure/azure-functions/functions-deployment-technologies) for further details.
	ZipDeployFile pulumi.StringOutput `pulumi:"zipDeployFile"`
}

// NewLinuxFunctionApp registers a new resource with the given unique name, arguments, and options.
func NewLinuxFunctionApp(ctx *pulumi.Context,
	name string, args *LinuxFunctionAppArgs, opts ...pulumi.ResourceOption) (*LinuxFunctionApp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServicePlanId == nil {
		return nil, errors.New("invalid value for required argument 'ServicePlanId'")
	}
	if args.SiteConfig == nil {
		return nil, errors.New("invalid value for required argument 'SiteConfig'")
	}
	if args.StorageAccountAccessKey != nil {
		args.StorageAccountAccessKey = pulumi.ToSecret(args.StorageAccountAccessKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"customDomainVerificationId",
		"siteCredentials",
		"storageAccountAccessKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LinuxFunctionApp
	err := ctx.RegisterResource("azure:appservice/linuxFunctionApp:LinuxFunctionApp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLinuxFunctionApp gets an existing LinuxFunctionApp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLinuxFunctionApp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LinuxFunctionAppState, opts ...pulumi.ResourceOption) (*LinuxFunctionApp, error) {
	var resource LinuxFunctionApp
	err := ctx.ReadResource("azure:appservice/linuxFunctionApp:LinuxFunctionApp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LinuxFunctionApp resources.
type linuxFunctionAppState struct {
	// A map of key-value pairs for [App
	// Settings](https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings) and custom values.
	AppSettings map[string]string `pulumi:"appSettings"`
	// A `authSettings` block as defined below.
	AuthSettings *LinuxFunctionAppAuthSettings `pulumi:"authSettings"`
	// An `authSettingsV2` block as defined below.
	AuthSettingsV2 *LinuxFunctionAppAuthSettingsV2 `pulumi:"authSettingsV2"`
	// A `backup` block as defined below.
	Backup *LinuxFunctionAppBackup `pulumi:"backup"`
	// Should built in logging be enabled. Configures `AzureWebJobsDashboard` app setting based on the configured storage setting. Defaults to `true`.
	BuiltinLoggingEnabled *bool `pulumi:"builtinLoggingEnabled"`
	// Should the function app use Client Certificates.
	ClientCertificateEnabled *bool `pulumi:"clientCertificateEnabled"`
	// Paths to exclude when using client certificates, separated by ;
	ClientCertificateExclusionPaths *string `pulumi:"clientCertificateExclusionPaths"`
	// The mode of the Function App's client certificates requirement for incoming requests. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. Defaults to `Optional`.
	ClientCertificateMode *string `pulumi:"clientCertificateMode"`
	// One or more `connectionString` blocks as defined below.
	ConnectionStrings []LinuxFunctionAppConnectionString `pulumi:"connectionStrings"`
	// Should the settings for linking the Function App to storage be suppressed.
	ContentShareForceDisabled *bool `pulumi:"contentShareForceDisabled"`
	// The identifier used by App Service to perform domain ownership verification via DNS TXT record.
	CustomDomainVerificationId *string `pulumi:"customDomainVerificationId"`
	// The amount of memory in gigabyte-seconds that your application is allowed to consume per day. Setting this value only affects function apps under the consumption plan. Defaults to `0`.
	DailyMemoryTimeQuota *int `pulumi:"dailyMemoryTimeQuota"`
	// The default hostname of the Linux Function App.
	DefaultHostname *string `pulumi:"defaultHostname"`
	// Is the Function App enabled? Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Should the default FTP Basic Authentication publishing profile be enabled. Defaults to `true`.
	FtpPublishBasicAuthenticationEnabled *bool `pulumi:"ftpPublishBasicAuthenticationEnabled"`
	// The runtime version associated with the Function App. Defaults to `~4`.
	FunctionsExtensionVersion *string `pulumi:"functionsExtensionVersion"`
	// The ID of the App Service Environment used by Function App.
	HostingEnvironmentId *string `pulumi:"hostingEnvironmentId"`
	// Can the Function App only be accessed via HTTPS? Defaults to `false`.
	HttpsOnly *bool `pulumi:"httpsOnly"`
	// A `identity` block as defined below.
	Identity *LinuxFunctionAppIdentity `pulumi:"identity"`
	// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity)
	KeyVaultReferenceIdentityId *string `pulumi:"keyVaultReferenceIdentityId"`
	// The Kind value for this Linux Function App.
	Kind *string `pulumi:"kind"`
	// The Azure Region where the Linux Function App should exist. Changing this forces a new Linux Function App to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Linux Function App. Changing this forces a new Linux Function App to be created. Limit the function name to 32 characters to avoid naming collisions. For more information about [Function App naming rule](https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/resource-name-rules#microsoftweb) and [Host ID Collisions](https://github.com/Azure/azure-functions-host/wiki/Host-IDs#host-id-collisions)
	Name *string `pulumi:"name"`
	// A list of outbound IP addresses. For example `["52.23.25.3", "52.143.43.12"]`
	OutboundIpAddressLists []string `pulumi:"outboundIpAddressLists"`
	// A comma separated list of outbound IP addresses as a string. For example `52.23.25.3,52.143.43.12`.
	OutboundIpAddresses *string `pulumi:"outboundIpAddresses"`
	// A list of possible outbound IP addresses, not all of which are necessarily in use. This is a superset of `outboundIpAddressList`. For example `["52.23.25.3", "52.143.43.12"]`.
	PossibleOutboundIpAddressLists []string `pulumi:"possibleOutboundIpAddressLists"`
	// A comma separated list of possible outbound IP addresses as a string. For example `52.23.25.3,52.143.43.12,52.143.43.17`. This is a superset of `outboundIpAddresses`.
	PossibleOutboundIpAddresses *string `pulumi:"possibleOutboundIpAddresses"`
	// Should public network access be enabled for the Function App. Defaults to `true`.
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// The name of the Resource Group where the Linux Function App should exist. Changing this forces a new Linux Function App to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The ID of the App Service Plan within which to create this Function App.
	ServicePlanId *string `pulumi:"servicePlanId"`
	// A `siteConfig` block as defined below.
	SiteConfig *LinuxFunctionAppSiteConfig `pulumi:"siteConfig"`
	// A `siteCredential` block as defined below.
	SiteCredentials []LinuxFunctionAppSiteCredential `pulumi:"siteCredentials"`
	// A `stickySettings` block as defined below.
	StickySettings *LinuxFunctionAppStickySettings `pulumi:"stickySettings"`
	// The access key which will be used to access the backend storage account for the Function App. Conflicts with `storageUsesManagedIdentity`.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// The backend storage account name which will be used by this Function App.
	StorageAccountName *string `pulumi:"storageAccountName"`
	// One or more `storageAccount` blocks as defined below.
	StorageAccounts []LinuxFunctionAppStorageAccount `pulumi:"storageAccounts"`
	// The Key Vault Secret ID, optionally including version, that contains the Connection String to connect to the storage account for this Function App.
	//
	// > **NOTE:** `storageKeyVaultSecretId` cannot be used with `storageAccountName`.
	//
	// > **NOTE:** `storageKeyVaultSecretId` used without a version will use the latest version of the secret, however, the service can take up to 24h to pick up a rotation of the latest version. See the [official docs](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#rotation) for more information.
	StorageKeyVaultSecretId *string `pulumi:"storageKeyVaultSecretId"`
	// Should the Function App use Managed Identity to access the storage account. Conflicts with `storageAccountAccessKey`.
	//
	// > **NOTE:** One of `storageAccountAccessKey` or `storageUsesManagedIdentity` must be specified when using `storageAccountName`.
	StorageUsesManagedIdentity *bool `pulumi:"storageUsesManagedIdentity"`
	// A mapping of tags which should be assigned to the Linux Function App.
	Tags                   map[string]string `pulumi:"tags"`
	VirtualNetworkSubnetId *string           `pulumi:"virtualNetworkSubnetId"`
	// Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to `true`.
	//
	// > **NOTE:** Setting this value to true will disable the ability to use `zipDeployFile` which currently relies on the default publishing profile.
	WebdeployPublishBasicAuthenticationEnabled *bool `pulumi:"webdeployPublishBasicAuthenticationEnabled"`
	// The local path and filename of the Zip packaged application to deploy to this Linux Function App.
	//
	// > **Note:** Using this value requires either `WEBSITE_RUN_FROM_PACKAGE=1` or `SCM_DO_BUILD_DURING_DEPLOYMENT=true` to be set on the App in `appSettings`. Refer to the [Azure docs](https://learn.microsoft.com/en-us/azure/azure-functions/functions-deployment-technologies) for further details.
	ZipDeployFile *string `pulumi:"zipDeployFile"`
}

type LinuxFunctionAppState struct {
	// A map of key-value pairs for [App
	// Settings](https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings) and custom values.
	AppSettings pulumi.StringMapInput
	// A `authSettings` block as defined below.
	AuthSettings LinuxFunctionAppAuthSettingsPtrInput
	// An `authSettingsV2` block as defined below.
	AuthSettingsV2 LinuxFunctionAppAuthSettingsV2PtrInput
	// A `backup` block as defined below.
	Backup LinuxFunctionAppBackupPtrInput
	// Should built in logging be enabled. Configures `AzureWebJobsDashboard` app setting based on the configured storage setting. Defaults to `true`.
	BuiltinLoggingEnabled pulumi.BoolPtrInput
	// Should the function app use Client Certificates.
	ClientCertificateEnabled pulumi.BoolPtrInput
	// Paths to exclude when using client certificates, separated by ;
	ClientCertificateExclusionPaths pulumi.StringPtrInput
	// The mode of the Function App's client certificates requirement for incoming requests. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. Defaults to `Optional`.
	ClientCertificateMode pulumi.StringPtrInput
	// One or more `connectionString` blocks as defined below.
	ConnectionStrings LinuxFunctionAppConnectionStringArrayInput
	// Should the settings for linking the Function App to storage be suppressed.
	ContentShareForceDisabled pulumi.BoolPtrInput
	// The identifier used by App Service to perform domain ownership verification via DNS TXT record.
	CustomDomainVerificationId pulumi.StringPtrInput
	// The amount of memory in gigabyte-seconds that your application is allowed to consume per day. Setting this value only affects function apps under the consumption plan. Defaults to `0`.
	DailyMemoryTimeQuota pulumi.IntPtrInput
	// The default hostname of the Linux Function App.
	DefaultHostname pulumi.StringPtrInput
	// Is the Function App enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// Should the default FTP Basic Authentication publishing profile be enabled. Defaults to `true`.
	FtpPublishBasicAuthenticationEnabled pulumi.BoolPtrInput
	// The runtime version associated with the Function App. Defaults to `~4`.
	FunctionsExtensionVersion pulumi.StringPtrInput
	// The ID of the App Service Environment used by Function App.
	HostingEnvironmentId pulumi.StringPtrInput
	// Can the Function App only be accessed via HTTPS? Defaults to `false`.
	HttpsOnly pulumi.BoolPtrInput
	// A `identity` block as defined below.
	Identity LinuxFunctionAppIdentityPtrInput
	// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity)
	KeyVaultReferenceIdentityId pulumi.StringPtrInput
	// The Kind value for this Linux Function App.
	Kind pulumi.StringPtrInput
	// The Azure Region where the Linux Function App should exist. Changing this forces a new Linux Function App to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Linux Function App. Changing this forces a new Linux Function App to be created. Limit the function name to 32 characters to avoid naming collisions. For more information about [Function App naming rule](https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/resource-name-rules#microsoftweb) and [Host ID Collisions](https://github.com/Azure/azure-functions-host/wiki/Host-IDs#host-id-collisions)
	Name pulumi.StringPtrInput
	// A list of outbound IP addresses. For example `["52.23.25.3", "52.143.43.12"]`
	OutboundIpAddressLists pulumi.StringArrayInput
	// A comma separated list of outbound IP addresses as a string. For example `52.23.25.3,52.143.43.12`.
	OutboundIpAddresses pulumi.StringPtrInput
	// A list of possible outbound IP addresses, not all of which are necessarily in use. This is a superset of `outboundIpAddressList`. For example `["52.23.25.3", "52.143.43.12"]`.
	PossibleOutboundIpAddressLists pulumi.StringArrayInput
	// A comma separated list of possible outbound IP addresses as a string. For example `52.23.25.3,52.143.43.12,52.143.43.17`. This is a superset of `outboundIpAddresses`.
	PossibleOutboundIpAddresses pulumi.StringPtrInput
	// Should public network access be enabled for the Function App. Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// The name of the Resource Group where the Linux Function App should exist. Changing this forces a new Linux Function App to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The ID of the App Service Plan within which to create this Function App.
	ServicePlanId pulumi.StringPtrInput
	// A `siteConfig` block as defined below.
	SiteConfig LinuxFunctionAppSiteConfigPtrInput
	// A `siteCredential` block as defined below.
	SiteCredentials LinuxFunctionAppSiteCredentialArrayInput
	// A `stickySettings` block as defined below.
	StickySettings LinuxFunctionAppStickySettingsPtrInput
	// The access key which will be used to access the backend storage account for the Function App. Conflicts with `storageUsesManagedIdentity`.
	StorageAccountAccessKey pulumi.StringPtrInput
	// The backend storage account name which will be used by this Function App.
	StorageAccountName pulumi.StringPtrInput
	// One or more `storageAccount` blocks as defined below.
	StorageAccounts LinuxFunctionAppStorageAccountArrayInput
	// The Key Vault Secret ID, optionally including version, that contains the Connection String to connect to the storage account for this Function App.
	//
	// > **NOTE:** `storageKeyVaultSecretId` cannot be used with `storageAccountName`.
	//
	// > **NOTE:** `storageKeyVaultSecretId` used without a version will use the latest version of the secret, however, the service can take up to 24h to pick up a rotation of the latest version. See the [official docs](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#rotation) for more information.
	StorageKeyVaultSecretId pulumi.StringPtrInput
	// Should the Function App use Managed Identity to access the storage account. Conflicts with `storageAccountAccessKey`.
	//
	// > **NOTE:** One of `storageAccountAccessKey` or `storageUsesManagedIdentity` must be specified when using `storageAccountName`.
	StorageUsesManagedIdentity pulumi.BoolPtrInput
	// A mapping of tags which should be assigned to the Linux Function App.
	Tags                   pulumi.StringMapInput
	VirtualNetworkSubnetId pulumi.StringPtrInput
	// Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to `true`.
	//
	// > **NOTE:** Setting this value to true will disable the ability to use `zipDeployFile` which currently relies on the default publishing profile.
	WebdeployPublishBasicAuthenticationEnabled pulumi.BoolPtrInput
	// The local path and filename of the Zip packaged application to deploy to this Linux Function App.
	//
	// > **Note:** Using this value requires either `WEBSITE_RUN_FROM_PACKAGE=1` or `SCM_DO_BUILD_DURING_DEPLOYMENT=true` to be set on the App in `appSettings`. Refer to the [Azure docs](https://learn.microsoft.com/en-us/azure/azure-functions/functions-deployment-technologies) for further details.
	ZipDeployFile pulumi.StringPtrInput
}

func (LinuxFunctionAppState) ElementType() reflect.Type {
	return reflect.TypeOf((*linuxFunctionAppState)(nil)).Elem()
}

type linuxFunctionAppArgs struct {
	// A map of key-value pairs for [App
	// Settings](https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings) and custom values.
	AppSettings map[string]string `pulumi:"appSettings"`
	// A `authSettings` block as defined below.
	AuthSettings *LinuxFunctionAppAuthSettings `pulumi:"authSettings"`
	// An `authSettingsV2` block as defined below.
	AuthSettingsV2 *LinuxFunctionAppAuthSettingsV2 `pulumi:"authSettingsV2"`
	// A `backup` block as defined below.
	Backup *LinuxFunctionAppBackup `pulumi:"backup"`
	// Should built in logging be enabled. Configures `AzureWebJobsDashboard` app setting based on the configured storage setting. Defaults to `true`.
	BuiltinLoggingEnabled *bool `pulumi:"builtinLoggingEnabled"`
	// Should the function app use Client Certificates.
	ClientCertificateEnabled *bool `pulumi:"clientCertificateEnabled"`
	// Paths to exclude when using client certificates, separated by ;
	ClientCertificateExclusionPaths *string `pulumi:"clientCertificateExclusionPaths"`
	// The mode of the Function App's client certificates requirement for incoming requests. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. Defaults to `Optional`.
	ClientCertificateMode *string `pulumi:"clientCertificateMode"`
	// One or more `connectionString` blocks as defined below.
	ConnectionStrings []LinuxFunctionAppConnectionString `pulumi:"connectionStrings"`
	// Should the settings for linking the Function App to storage be suppressed.
	ContentShareForceDisabled *bool `pulumi:"contentShareForceDisabled"`
	// The amount of memory in gigabyte-seconds that your application is allowed to consume per day. Setting this value only affects function apps under the consumption plan. Defaults to `0`.
	DailyMemoryTimeQuota *int `pulumi:"dailyMemoryTimeQuota"`
	// Is the Function App enabled? Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Should the default FTP Basic Authentication publishing profile be enabled. Defaults to `true`.
	FtpPublishBasicAuthenticationEnabled *bool `pulumi:"ftpPublishBasicAuthenticationEnabled"`
	// The runtime version associated with the Function App. Defaults to `~4`.
	FunctionsExtensionVersion *string `pulumi:"functionsExtensionVersion"`
	// Can the Function App only be accessed via HTTPS? Defaults to `false`.
	HttpsOnly *bool `pulumi:"httpsOnly"`
	// A `identity` block as defined below.
	Identity *LinuxFunctionAppIdentity `pulumi:"identity"`
	// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity)
	KeyVaultReferenceIdentityId *string `pulumi:"keyVaultReferenceIdentityId"`
	// The Azure Region where the Linux Function App should exist. Changing this forces a new Linux Function App to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Linux Function App. Changing this forces a new Linux Function App to be created. Limit the function name to 32 characters to avoid naming collisions. For more information about [Function App naming rule](https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/resource-name-rules#microsoftweb) and [Host ID Collisions](https://github.com/Azure/azure-functions-host/wiki/Host-IDs#host-id-collisions)
	Name *string `pulumi:"name"`
	// Should public network access be enabled for the Function App. Defaults to `true`.
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// The name of the Resource Group where the Linux Function App should exist. Changing this forces a new Linux Function App to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The ID of the App Service Plan within which to create this Function App.
	ServicePlanId string `pulumi:"servicePlanId"`
	// A `siteConfig` block as defined below.
	SiteConfig LinuxFunctionAppSiteConfig `pulumi:"siteConfig"`
	// A `stickySettings` block as defined below.
	StickySettings *LinuxFunctionAppStickySettings `pulumi:"stickySettings"`
	// The access key which will be used to access the backend storage account for the Function App. Conflicts with `storageUsesManagedIdentity`.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// The backend storage account name which will be used by this Function App.
	StorageAccountName *string `pulumi:"storageAccountName"`
	// One or more `storageAccount` blocks as defined below.
	StorageAccounts []LinuxFunctionAppStorageAccount `pulumi:"storageAccounts"`
	// The Key Vault Secret ID, optionally including version, that contains the Connection String to connect to the storage account for this Function App.
	//
	// > **NOTE:** `storageKeyVaultSecretId` cannot be used with `storageAccountName`.
	//
	// > **NOTE:** `storageKeyVaultSecretId` used without a version will use the latest version of the secret, however, the service can take up to 24h to pick up a rotation of the latest version. See the [official docs](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#rotation) for more information.
	StorageKeyVaultSecretId *string `pulumi:"storageKeyVaultSecretId"`
	// Should the Function App use Managed Identity to access the storage account. Conflicts with `storageAccountAccessKey`.
	//
	// > **NOTE:** One of `storageAccountAccessKey` or `storageUsesManagedIdentity` must be specified when using `storageAccountName`.
	StorageUsesManagedIdentity *bool `pulumi:"storageUsesManagedIdentity"`
	// A mapping of tags which should be assigned to the Linux Function App.
	Tags                   map[string]string `pulumi:"tags"`
	VirtualNetworkSubnetId *string           `pulumi:"virtualNetworkSubnetId"`
	// Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to `true`.
	//
	// > **NOTE:** Setting this value to true will disable the ability to use `zipDeployFile` which currently relies on the default publishing profile.
	WebdeployPublishBasicAuthenticationEnabled *bool `pulumi:"webdeployPublishBasicAuthenticationEnabled"`
	// The local path and filename of the Zip packaged application to deploy to this Linux Function App.
	//
	// > **Note:** Using this value requires either `WEBSITE_RUN_FROM_PACKAGE=1` or `SCM_DO_BUILD_DURING_DEPLOYMENT=true` to be set on the App in `appSettings`. Refer to the [Azure docs](https://learn.microsoft.com/en-us/azure/azure-functions/functions-deployment-technologies) for further details.
	ZipDeployFile *string `pulumi:"zipDeployFile"`
}

// The set of arguments for constructing a LinuxFunctionApp resource.
type LinuxFunctionAppArgs struct {
	// A map of key-value pairs for [App
	// Settings](https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings) and custom values.
	AppSettings pulumi.StringMapInput
	// A `authSettings` block as defined below.
	AuthSettings LinuxFunctionAppAuthSettingsPtrInput
	// An `authSettingsV2` block as defined below.
	AuthSettingsV2 LinuxFunctionAppAuthSettingsV2PtrInput
	// A `backup` block as defined below.
	Backup LinuxFunctionAppBackupPtrInput
	// Should built in logging be enabled. Configures `AzureWebJobsDashboard` app setting based on the configured storage setting. Defaults to `true`.
	BuiltinLoggingEnabled pulumi.BoolPtrInput
	// Should the function app use Client Certificates.
	ClientCertificateEnabled pulumi.BoolPtrInput
	// Paths to exclude when using client certificates, separated by ;
	ClientCertificateExclusionPaths pulumi.StringPtrInput
	// The mode of the Function App's client certificates requirement for incoming requests. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. Defaults to `Optional`.
	ClientCertificateMode pulumi.StringPtrInput
	// One or more `connectionString` blocks as defined below.
	ConnectionStrings LinuxFunctionAppConnectionStringArrayInput
	// Should the settings for linking the Function App to storage be suppressed.
	ContentShareForceDisabled pulumi.BoolPtrInput
	// The amount of memory in gigabyte-seconds that your application is allowed to consume per day. Setting this value only affects function apps under the consumption plan. Defaults to `0`.
	DailyMemoryTimeQuota pulumi.IntPtrInput
	// Is the Function App enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// Should the default FTP Basic Authentication publishing profile be enabled. Defaults to `true`.
	FtpPublishBasicAuthenticationEnabled pulumi.BoolPtrInput
	// The runtime version associated with the Function App. Defaults to `~4`.
	FunctionsExtensionVersion pulumi.StringPtrInput
	// Can the Function App only be accessed via HTTPS? Defaults to `false`.
	HttpsOnly pulumi.BoolPtrInput
	// A `identity` block as defined below.
	Identity LinuxFunctionAppIdentityPtrInput
	// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity)
	KeyVaultReferenceIdentityId pulumi.StringPtrInput
	// The Azure Region where the Linux Function App should exist. Changing this forces a new Linux Function App to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Linux Function App. Changing this forces a new Linux Function App to be created. Limit the function name to 32 characters to avoid naming collisions. For more information about [Function App naming rule](https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/resource-name-rules#microsoftweb) and [Host ID Collisions](https://github.com/Azure/azure-functions-host/wiki/Host-IDs#host-id-collisions)
	Name pulumi.StringPtrInput
	// Should public network access be enabled for the Function App. Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// The name of the Resource Group where the Linux Function App should exist. Changing this forces a new Linux Function App to be created.
	ResourceGroupName pulumi.StringInput
	// The ID of the App Service Plan within which to create this Function App.
	ServicePlanId pulumi.StringInput
	// A `siteConfig` block as defined below.
	SiteConfig LinuxFunctionAppSiteConfigInput
	// A `stickySettings` block as defined below.
	StickySettings LinuxFunctionAppStickySettingsPtrInput
	// The access key which will be used to access the backend storage account for the Function App. Conflicts with `storageUsesManagedIdentity`.
	StorageAccountAccessKey pulumi.StringPtrInput
	// The backend storage account name which will be used by this Function App.
	StorageAccountName pulumi.StringPtrInput
	// One or more `storageAccount` blocks as defined below.
	StorageAccounts LinuxFunctionAppStorageAccountArrayInput
	// The Key Vault Secret ID, optionally including version, that contains the Connection String to connect to the storage account for this Function App.
	//
	// > **NOTE:** `storageKeyVaultSecretId` cannot be used with `storageAccountName`.
	//
	// > **NOTE:** `storageKeyVaultSecretId` used without a version will use the latest version of the secret, however, the service can take up to 24h to pick up a rotation of the latest version. See the [official docs](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#rotation) for more information.
	StorageKeyVaultSecretId pulumi.StringPtrInput
	// Should the Function App use Managed Identity to access the storage account. Conflicts with `storageAccountAccessKey`.
	//
	// > **NOTE:** One of `storageAccountAccessKey` or `storageUsesManagedIdentity` must be specified when using `storageAccountName`.
	StorageUsesManagedIdentity pulumi.BoolPtrInput
	// A mapping of tags which should be assigned to the Linux Function App.
	Tags                   pulumi.StringMapInput
	VirtualNetworkSubnetId pulumi.StringPtrInput
	// Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to `true`.
	//
	// > **NOTE:** Setting this value to true will disable the ability to use `zipDeployFile` which currently relies on the default publishing profile.
	WebdeployPublishBasicAuthenticationEnabled pulumi.BoolPtrInput
	// The local path and filename of the Zip packaged application to deploy to this Linux Function App.
	//
	// > **Note:** Using this value requires either `WEBSITE_RUN_FROM_PACKAGE=1` or `SCM_DO_BUILD_DURING_DEPLOYMENT=true` to be set on the App in `appSettings`. Refer to the [Azure docs](https://learn.microsoft.com/en-us/azure/azure-functions/functions-deployment-technologies) for further details.
	ZipDeployFile pulumi.StringPtrInput
}

func (LinuxFunctionAppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*linuxFunctionAppArgs)(nil)).Elem()
}

type LinuxFunctionAppInput interface {
	pulumi.Input

	ToLinuxFunctionAppOutput() LinuxFunctionAppOutput
	ToLinuxFunctionAppOutputWithContext(ctx context.Context) LinuxFunctionAppOutput
}

func (*LinuxFunctionApp) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxFunctionApp)(nil)).Elem()
}

func (i *LinuxFunctionApp) ToLinuxFunctionAppOutput() LinuxFunctionAppOutput {
	return i.ToLinuxFunctionAppOutputWithContext(context.Background())
}

func (i *LinuxFunctionApp) ToLinuxFunctionAppOutputWithContext(ctx context.Context) LinuxFunctionAppOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxFunctionAppOutput)
}

// LinuxFunctionAppArrayInput is an input type that accepts LinuxFunctionAppArray and LinuxFunctionAppArrayOutput values.
// You can construct a concrete instance of `LinuxFunctionAppArrayInput` via:
//
//	LinuxFunctionAppArray{ LinuxFunctionAppArgs{...} }
type LinuxFunctionAppArrayInput interface {
	pulumi.Input

	ToLinuxFunctionAppArrayOutput() LinuxFunctionAppArrayOutput
	ToLinuxFunctionAppArrayOutputWithContext(context.Context) LinuxFunctionAppArrayOutput
}

type LinuxFunctionAppArray []LinuxFunctionAppInput

func (LinuxFunctionAppArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LinuxFunctionApp)(nil)).Elem()
}

func (i LinuxFunctionAppArray) ToLinuxFunctionAppArrayOutput() LinuxFunctionAppArrayOutput {
	return i.ToLinuxFunctionAppArrayOutputWithContext(context.Background())
}

func (i LinuxFunctionAppArray) ToLinuxFunctionAppArrayOutputWithContext(ctx context.Context) LinuxFunctionAppArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxFunctionAppArrayOutput)
}

// LinuxFunctionAppMapInput is an input type that accepts LinuxFunctionAppMap and LinuxFunctionAppMapOutput values.
// You can construct a concrete instance of `LinuxFunctionAppMapInput` via:
//
//	LinuxFunctionAppMap{ "key": LinuxFunctionAppArgs{...} }
type LinuxFunctionAppMapInput interface {
	pulumi.Input

	ToLinuxFunctionAppMapOutput() LinuxFunctionAppMapOutput
	ToLinuxFunctionAppMapOutputWithContext(context.Context) LinuxFunctionAppMapOutput
}

type LinuxFunctionAppMap map[string]LinuxFunctionAppInput

func (LinuxFunctionAppMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LinuxFunctionApp)(nil)).Elem()
}

func (i LinuxFunctionAppMap) ToLinuxFunctionAppMapOutput() LinuxFunctionAppMapOutput {
	return i.ToLinuxFunctionAppMapOutputWithContext(context.Background())
}

func (i LinuxFunctionAppMap) ToLinuxFunctionAppMapOutputWithContext(ctx context.Context) LinuxFunctionAppMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxFunctionAppMapOutput)
}

type LinuxFunctionAppOutput struct{ *pulumi.OutputState }

func (LinuxFunctionAppOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxFunctionApp)(nil)).Elem()
}

func (o LinuxFunctionAppOutput) ToLinuxFunctionAppOutput() LinuxFunctionAppOutput {
	return o
}

func (o LinuxFunctionAppOutput) ToLinuxFunctionAppOutputWithContext(ctx context.Context) LinuxFunctionAppOutput {
	return o
}

// A map of key-value pairs for [App
// Settings](https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings) and custom values.
func (o LinuxFunctionAppOutput) AppSettings() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) pulumi.StringMapOutput { return v.AppSettings }).(pulumi.StringMapOutput)
}

// A `authSettings` block as defined below.
func (o LinuxFunctionAppOutput) AuthSettings() LinuxFunctionAppAuthSettingsPtrOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) LinuxFunctionAppAuthSettingsPtrOutput { return v.AuthSettings }).(LinuxFunctionAppAuthSettingsPtrOutput)
}

// An `authSettingsV2` block as defined below.
func (o LinuxFunctionAppOutput) AuthSettingsV2() LinuxFunctionAppAuthSettingsV2PtrOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) LinuxFunctionAppAuthSettingsV2PtrOutput { return v.AuthSettingsV2 }).(LinuxFunctionAppAuthSettingsV2PtrOutput)
}

// A `backup` block as defined below.
func (o LinuxFunctionAppOutput) Backup() LinuxFunctionAppBackupPtrOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) LinuxFunctionAppBackupPtrOutput { return v.Backup }).(LinuxFunctionAppBackupPtrOutput)
}

// Should built in logging be enabled. Configures `AzureWebJobsDashboard` app setting based on the configured storage setting. Defaults to `true`.
func (o LinuxFunctionAppOutput) BuiltinLoggingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) pulumi.BoolPtrOutput { return v.BuiltinLoggingEnabled }).(pulumi.BoolPtrOutput)
}

// Should the function app use Client Certificates.
func (o LinuxFunctionAppOutput) ClientCertificateEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) pulumi.BoolPtrOutput { return v.ClientCertificateEnabled }).(pulumi.BoolPtrOutput)
}

// Paths to exclude when using client certificates, separated by ;
func (o LinuxFunctionAppOutput) ClientCertificateExclusionPaths() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) pulumi.StringPtrOutput { return v.ClientCertificateExclusionPaths }).(pulumi.StringPtrOutput)
}

// The mode of the Function App's client certificates requirement for incoming requests. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. Defaults to `Optional`.
func (o LinuxFunctionAppOutput) ClientCertificateMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) pulumi.StringPtrOutput { return v.ClientCertificateMode }).(pulumi.StringPtrOutput)
}

// One or more `connectionString` blocks as defined below.
func (o LinuxFunctionAppOutput) ConnectionStrings() LinuxFunctionAppConnectionStringArrayOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) LinuxFunctionAppConnectionStringArrayOutput { return v.ConnectionStrings }).(LinuxFunctionAppConnectionStringArrayOutput)
}

// Should the settings for linking the Function App to storage be suppressed.
func (o LinuxFunctionAppOutput) ContentShareForceDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) pulumi.BoolPtrOutput { return v.ContentShareForceDisabled }).(pulumi.BoolPtrOutput)
}

// The identifier used by App Service to perform domain ownership verification via DNS TXT record.
func (o LinuxFunctionAppOutput) CustomDomainVerificationId() pulumi.StringOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) pulumi.StringOutput { return v.CustomDomainVerificationId }).(pulumi.StringOutput)
}

// The amount of memory in gigabyte-seconds that your application is allowed to consume per day. Setting this value only affects function apps under the consumption plan. Defaults to `0`.
func (o LinuxFunctionAppOutput) DailyMemoryTimeQuota() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) pulumi.IntPtrOutput { return v.DailyMemoryTimeQuota }).(pulumi.IntPtrOutput)
}

// The default hostname of the Linux Function App.
func (o LinuxFunctionAppOutput) DefaultHostname() pulumi.StringOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) pulumi.StringOutput { return v.DefaultHostname }).(pulumi.StringOutput)
}

// Is the Function App enabled? Defaults to `true`.
func (o LinuxFunctionAppOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Should the default FTP Basic Authentication publishing profile be enabled. Defaults to `true`.
func (o LinuxFunctionAppOutput) FtpPublishBasicAuthenticationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) pulumi.BoolPtrOutput { return v.FtpPublishBasicAuthenticationEnabled }).(pulumi.BoolPtrOutput)
}

// The runtime version associated with the Function App. Defaults to `~4`.
func (o LinuxFunctionAppOutput) FunctionsExtensionVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) pulumi.StringPtrOutput { return v.FunctionsExtensionVersion }).(pulumi.StringPtrOutput)
}

// The ID of the App Service Environment used by Function App.
func (o LinuxFunctionAppOutput) HostingEnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) pulumi.StringOutput { return v.HostingEnvironmentId }).(pulumi.StringOutput)
}

// Can the Function App only be accessed via HTTPS? Defaults to `false`.
func (o LinuxFunctionAppOutput) HttpsOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) pulumi.BoolPtrOutput { return v.HttpsOnly }).(pulumi.BoolPtrOutput)
}

// A `identity` block as defined below.
func (o LinuxFunctionAppOutput) Identity() LinuxFunctionAppIdentityPtrOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) LinuxFunctionAppIdentityPtrOutput { return v.Identity }).(LinuxFunctionAppIdentityPtrOutput)
}

// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity)
func (o LinuxFunctionAppOutput) KeyVaultReferenceIdentityId() pulumi.StringOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) pulumi.StringOutput { return v.KeyVaultReferenceIdentityId }).(pulumi.StringOutput)
}

// The Kind value for this Linux Function App.
func (o LinuxFunctionAppOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// The Azure Region where the Linux Function App should exist. Changing this forces a new Linux Function App to be created.
func (o LinuxFunctionAppOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name which should be used for this Linux Function App. Changing this forces a new Linux Function App to be created. Limit the function name to 32 characters to avoid naming collisions. For more information about [Function App naming rule](https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/resource-name-rules#microsoftweb) and [Host ID Collisions](https://github.com/Azure/azure-functions-host/wiki/Host-IDs#host-id-collisions)
func (o LinuxFunctionAppOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of outbound IP addresses. For example `["52.23.25.3", "52.143.43.12"]`
func (o LinuxFunctionAppOutput) OutboundIpAddressLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) pulumi.StringArrayOutput { return v.OutboundIpAddressLists }).(pulumi.StringArrayOutput)
}

// A comma separated list of outbound IP addresses as a string. For example `52.23.25.3,52.143.43.12`.
func (o LinuxFunctionAppOutput) OutboundIpAddresses() pulumi.StringOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) pulumi.StringOutput { return v.OutboundIpAddresses }).(pulumi.StringOutput)
}

// A list of possible outbound IP addresses, not all of which are necessarily in use. This is a superset of `outboundIpAddressList`. For example `["52.23.25.3", "52.143.43.12"]`.
func (o LinuxFunctionAppOutput) PossibleOutboundIpAddressLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) pulumi.StringArrayOutput { return v.PossibleOutboundIpAddressLists }).(pulumi.StringArrayOutput)
}

// A comma separated list of possible outbound IP addresses as a string. For example `52.23.25.3,52.143.43.12,52.143.43.17`. This is a superset of `outboundIpAddresses`.
func (o LinuxFunctionAppOutput) PossibleOutboundIpAddresses() pulumi.StringOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) pulumi.StringOutput { return v.PossibleOutboundIpAddresses }).(pulumi.StringOutput)
}

// Should public network access be enabled for the Function App. Defaults to `true`.
func (o LinuxFunctionAppOutput) PublicNetworkAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) pulumi.BoolPtrOutput { return v.PublicNetworkAccessEnabled }).(pulumi.BoolPtrOutput)
}

// The name of the Resource Group where the Linux Function App should exist. Changing this forces a new Linux Function App to be created.
func (o LinuxFunctionAppOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The ID of the App Service Plan within which to create this Function App.
func (o LinuxFunctionAppOutput) ServicePlanId() pulumi.StringOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) pulumi.StringOutput { return v.ServicePlanId }).(pulumi.StringOutput)
}

// A `siteConfig` block as defined below.
func (o LinuxFunctionAppOutput) SiteConfig() LinuxFunctionAppSiteConfigOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) LinuxFunctionAppSiteConfigOutput { return v.SiteConfig }).(LinuxFunctionAppSiteConfigOutput)
}

// A `siteCredential` block as defined below.
func (o LinuxFunctionAppOutput) SiteCredentials() LinuxFunctionAppSiteCredentialArrayOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) LinuxFunctionAppSiteCredentialArrayOutput { return v.SiteCredentials }).(LinuxFunctionAppSiteCredentialArrayOutput)
}

// A `stickySettings` block as defined below.
func (o LinuxFunctionAppOutput) StickySettings() LinuxFunctionAppStickySettingsPtrOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) LinuxFunctionAppStickySettingsPtrOutput { return v.StickySettings }).(LinuxFunctionAppStickySettingsPtrOutput)
}

// The access key which will be used to access the backend storage account for the Function App. Conflicts with `storageUsesManagedIdentity`.
func (o LinuxFunctionAppOutput) StorageAccountAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) pulumi.StringPtrOutput { return v.StorageAccountAccessKey }).(pulumi.StringPtrOutput)
}

// The backend storage account name which will be used by this Function App.
func (o LinuxFunctionAppOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) pulumi.StringPtrOutput { return v.StorageAccountName }).(pulumi.StringPtrOutput)
}

// One or more `storageAccount` blocks as defined below.
func (o LinuxFunctionAppOutput) StorageAccounts() LinuxFunctionAppStorageAccountArrayOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) LinuxFunctionAppStorageAccountArrayOutput { return v.StorageAccounts }).(LinuxFunctionAppStorageAccountArrayOutput)
}

// The Key Vault Secret ID, optionally including version, that contains the Connection String to connect to the storage account for this Function App.
//
// > **NOTE:** `storageKeyVaultSecretId` cannot be used with `storageAccountName`.
//
// > **NOTE:** `storageKeyVaultSecretId` used without a version will use the latest version of the secret, however, the service can take up to 24h to pick up a rotation of the latest version. See the [official docs](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#rotation) for more information.
func (o LinuxFunctionAppOutput) StorageKeyVaultSecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) pulumi.StringPtrOutput { return v.StorageKeyVaultSecretId }).(pulumi.StringPtrOutput)
}

// Should the Function App use Managed Identity to access the storage account. Conflicts with `storageAccountAccessKey`.
//
// > **NOTE:** One of `storageAccountAccessKey` or `storageUsesManagedIdentity` must be specified when using `storageAccountName`.
func (o LinuxFunctionAppOutput) StorageUsesManagedIdentity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) pulumi.BoolPtrOutput { return v.StorageUsesManagedIdentity }).(pulumi.BoolPtrOutput)
}

// A mapping of tags which should be assigned to the Linux Function App.
func (o LinuxFunctionAppOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o LinuxFunctionAppOutput) VirtualNetworkSubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) pulumi.StringPtrOutput { return v.VirtualNetworkSubnetId }).(pulumi.StringPtrOutput)
}

// Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to `true`.
//
// > **NOTE:** Setting this value to true will disable the ability to use `zipDeployFile` which currently relies on the default publishing profile.
func (o LinuxFunctionAppOutput) WebdeployPublishBasicAuthenticationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) pulumi.BoolPtrOutput { return v.WebdeployPublishBasicAuthenticationEnabled }).(pulumi.BoolPtrOutput)
}

// The local path and filename of the Zip packaged application to deploy to this Linux Function App.
//
// > **Note:** Using this value requires either `WEBSITE_RUN_FROM_PACKAGE=1` or `SCM_DO_BUILD_DURING_DEPLOYMENT=true` to be set on the App in `appSettings`. Refer to the [Azure docs](https://learn.microsoft.com/en-us/azure/azure-functions/functions-deployment-technologies) for further details.
func (o LinuxFunctionAppOutput) ZipDeployFile() pulumi.StringOutput {
	return o.ApplyT(func(v *LinuxFunctionApp) pulumi.StringOutput { return v.ZipDeployFile }).(pulumi.StringOutput)
}

type LinuxFunctionAppArrayOutput struct{ *pulumi.OutputState }

func (LinuxFunctionAppArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LinuxFunctionApp)(nil)).Elem()
}

func (o LinuxFunctionAppArrayOutput) ToLinuxFunctionAppArrayOutput() LinuxFunctionAppArrayOutput {
	return o
}

func (o LinuxFunctionAppArrayOutput) ToLinuxFunctionAppArrayOutputWithContext(ctx context.Context) LinuxFunctionAppArrayOutput {
	return o
}

func (o LinuxFunctionAppArrayOutput) Index(i pulumi.IntInput) LinuxFunctionAppOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LinuxFunctionApp {
		return vs[0].([]*LinuxFunctionApp)[vs[1].(int)]
	}).(LinuxFunctionAppOutput)
}

type LinuxFunctionAppMapOutput struct{ *pulumi.OutputState }

func (LinuxFunctionAppMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LinuxFunctionApp)(nil)).Elem()
}

func (o LinuxFunctionAppMapOutput) ToLinuxFunctionAppMapOutput() LinuxFunctionAppMapOutput {
	return o
}

func (o LinuxFunctionAppMapOutput) ToLinuxFunctionAppMapOutputWithContext(ctx context.Context) LinuxFunctionAppMapOutput {
	return o
}

func (o LinuxFunctionAppMapOutput) MapIndex(k pulumi.StringInput) LinuxFunctionAppOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LinuxFunctionApp {
		return vs[0].(map[string]*LinuxFunctionApp)[vs[1].(string)]
	}).(LinuxFunctionAppOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LinuxFunctionAppInput)(nil)).Elem(), &LinuxFunctionApp{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinuxFunctionAppArrayInput)(nil)).Elem(), LinuxFunctionAppArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinuxFunctionAppMapInput)(nil)).Elem(), LinuxFunctionAppMap{})
	pulumi.RegisterOutputType(LinuxFunctionAppOutput{})
	pulumi.RegisterOutputType(LinuxFunctionAppArrayOutput{})
	pulumi.RegisterOutputType(LinuxFunctionAppMapOutput{})
}
