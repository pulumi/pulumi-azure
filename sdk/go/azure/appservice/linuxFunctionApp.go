// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appservice

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Linux Function App.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/appservice"
// 	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West Europe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
// 			ResourceGroupName:      exampleResourceGroup.Name,
// 			Location:               exampleResourceGroup.Location,
// 			AccountTier:            pulumi.String("Standard"),
// 			AccountReplicationType: pulumi.String("LRS"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleServicePlan, err := appservice.NewServicePlan(ctx, "exampleServicePlan", &appservice.ServicePlanArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			Location:          exampleResourceGroup.Location,
// 			OsType:            pulumi.String("Linux"),
// 			SkuName:           pulumi.String("Y1"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = appservice.NewLinuxFunctionApp(ctx, "exampleLinuxFunctionApp", &appservice.LinuxFunctionAppArgs{
// 			ResourceGroupName:  exampleResourceGroup.Name,
// 			Location:           exampleResourceGroup.Location,
// 			StorageAccountName: exampleAccount.Name,
// 			ServicePlanId:      exampleServicePlan.ID(),
// 			SiteConfig:         nil,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Linux Function Apps can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:appservice/linuxFunctionApp:LinuxFunctionApp example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/sites/site1
// ```
type LinuxFunctionApp struct {
	pulumi.CustomResourceState

	// A map of key-value pairs for [App Settings](https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings) and custom values.
	AppSettings pulumi.StringMapOutput `pulumi:"appSettings"`
	// A `authSettings` block as defined below.
	AuthSettings LinuxFunctionAppAuthSettingsOutput `pulumi:"authSettings"`
	// A `backup` block as defined below.
	Backup LinuxFunctionAppBackupPtrOutput `pulumi:"backup"`
	// Should built in logging be enabled. Configures `AzureWebJobsDashboard` app setting based on the configured storage setting.
	BuiltinLoggingEnabled pulumi.BoolPtrOutput `pulumi:"builtinLoggingEnabled"`
	// Should the function app use Client Certificates.
	ClientCertificateEnabled pulumi.BoolPtrOutput `pulumi:"clientCertificateEnabled"`
	// The mode of the Function App's client certificates requirement for incoming requests. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`.
	ClientCertificateMode pulumi.StringPtrOutput `pulumi:"clientCertificateMode"`
	// One or more `connectionString` blocks as defined below.
	ConnectionStrings LinuxFunctionAppConnectionStringArrayOutput `pulumi:"connectionStrings"`
	// Force disable the content share settings.
	ContentShareForceDisabled pulumi.BoolPtrOutput `pulumi:"contentShareForceDisabled"`
	// The identifier used by App Service to perform domain ownership verification via DNS TXT record.
	CustomDomainVerificationId pulumi.StringOutput `pulumi:"customDomainVerificationId"`
	// The amount of memory in gigabyte-seconds that your application is allowed to consume per day. Setting this value only affects function apps under the consumption plan. Defaults to `0`.
	DailyMemoryTimeQuota pulumi.IntPtrOutput `pulumi:"dailyMemoryTimeQuota"`
	// The default hostname of the Linux Function App.
	DefaultHostname pulumi.StringOutput `pulumi:"defaultHostname"`
	// Is the Function App enabled?
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The runtime version associated with the Function App. Defaults to `~4`.
	FunctionsExtensionVersion pulumi.StringPtrOutput `pulumi:"functionsExtensionVersion"`
	// Can the Function App only be accessed via HTTPS? Defaults to `false`.
	HttpsOnly pulumi.BoolPtrOutput `pulumi:"httpsOnly"`
	// A `identity` block as defined below.
	Identity LinuxFunctionAppIdentityPtrOutput `pulumi:"identity"`
	// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/en-us/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity)
	KeyVaultReferenceIdentityId pulumi.StringOutput `pulumi:"keyVaultReferenceIdentityId"`
	// The Kind value for this Linux Function App.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The Azure Region where the Linux Function App should exist. Changing this forces a new Linux Function App to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name which should be used for this Linux Function App. Changing this forces a new Linux Function App to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of outbound IP addresses. For example `["52.23.25.3", "52.143.43.12"]`
	OutboundIpAddressLists pulumi.StringArrayOutput `pulumi:"outboundIpAddressLists"`
	// A comma separated list of outbound IP addresses as a string. For example `52.23.25.3,52.143.43.12`.
	OutboundIpAddresses pulumi.StringOutput `pulumi:"outboundIpAddresses"`
	// A list of possible outbound IP addresses, not all of which are necessarily in use. This is a superset of `outboundIpAddressList`. For example `["52.23.25.3", "52.143.43.12"]`.
	PossibleOutboundIpAddressLists pulumi.StringArrayOutput `pulumi:"possibleOutboundIpAddressLists"`
	// A comma separated list of possible outbound IP addresses as a string. For example `52.23.25.3,52.143.43.12,52.143.43.17`. This is a superset of `outboundIpAddresses`. For example `["52.23.25.3", "52.143.43.12","52.143.43.17"]`.
	PossibleOutboundIpAddresses pulumi.StringOutput `pulumi:"possibleOutboundIpAddresses"`
	// The name of the Resource Group where the Linux Function App should exist. Changing this forces a new Linux Function App to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The ID of the App Service Plan within which to create this Function App.
	ServicePlanId pulumi.StringOutput `pulumi:"servicePlanId"`
	// A `siteConfig` block as defined below.
	SiteConfig LinuxFunctionAppSiteConfigOutput `pulumi:"siteConfig"`
	// A `siteCredential` block as defined below.
	SiteCredentials LinuxFunctionAppSiteCredentialArrayOutput `pulumi:"siteCredentials"`
	// The access key which will be used to access the backend storage account for the Function App. Conflicts with `storageUsesManagedIdentity`.
	StorageAccountAccessKey pulumi.StringPtrOutput `pulumi:"storageAccountAccessKey"`
	// The backend storage account name which will be used by this Function App.
	StorageAccountName pulumi.StringPtrOutput `pulumi:"storageAccountName"`
	// The Key Vault Secret ID, optionally including version, that contains the Connection String to connect to the storage account for this Function App.
	StorageKeyVaultSecretId pulumi.StringPtrOutput `pulumi:"storageKeyVaultSecretId"`
	// Should the Function App use Managed Identity to access the storage account. Conflicts with `storageAccountAccessKey`.
	StorageUsesManagedIdentity pulumi.BoolPtrOutput `pulumi:"storageUsesManagedIdentity"`
	// A mapping of tags which should be assigned to the Linux Function App.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewLinuxFunctionApp registers a new resource with the given unique name, arguments, and options.
func NewLinuxFunctionApp(ctx *pulumi.Context,
	name string, args *LinuxFunctionAppArgs, opts ...pulumi.ResourceOption) (*LinuxFunctionApp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServicePlanId == nil {
		return nil, errors.New("invalid value for required argument 'ServicePlanId'")
	}
	if args.SiteConfig == nil {
		return nil, errors.New("invalid value for required argument 'SiteConfig'")
	}
	var resource LinuxFunctionApp
	err := ctx.RegisterResource("azure:appservice/linuxFunctionApp:LinuxFunctionApp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLinuxFunctionApp gets an existing LinuxFunctionApp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLinuxFunctionApp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LinuxFunctionAppState, opts ...pulumi.ResourceOption) (*LinuxFunctionApp, error) {
	var resource LinuxFunctionApp
	err := ctx.ReadResource("azure:appservice/linuxFunctionApp:LinuxFunctionApp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LinuxFunctionApp resources.
type linuxFunctionAppState struct {
	// A map of key-value pairs for [App Settings](https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings) and custom values.
	AppSettings map[string]string `pulumi:"appSettings"`
	// A `authSettings` block as defined below.
	AuthSettings *LinuxFunctionAppAuthSettings `pulumi:"authSettings"`
	// A `backup` block as defined below.
	Backup *LinuxFunctionAppBackup `pulumi:"backup"`
	// Should built in logging be enabled. Configures `AzureWebJobsDashboard` app setting based on the configured storage setting.
	BuiltinLoggingEnabled *bool `pulumi:"builtinLoggingEnabled"`
	// Should the function app use Client Certificates.
	ClientCertificateEnabled *bool `pulumi:"clientCertificateEnabled"`
	// The mode of the Function App's client certificates requirement for incoming requests. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`.
	ClientCertificateMode *string `pulumi:"clientCertificateMode"`
	// One or more `connectionString` blocks as defined below.
	ConnectionStrings []LinuxFunctionAppConnectionString `pulumi:"connectionStrings"`
	// Force disable the content share settings.
	ContentShareForceDisabled *bool `pulumi:"contentShareForceDisabled"`
	// The identifier used by App Service to perform domain ownership verification via DNS TXT record.
	CustomDomainVerificationId *string `pulumi:"customDomainVerificationId"`
	// The amount of memory in gigabyte-seconds that your application is allowed to consume per day. Setting this value only affects function apps under the consumption plan. Defaults to `0`.
	DailyMemoryTimeQuota *int `pulumi:"dailyMemoryTimeQuota"`
	// The default hostname of the Linux Function App.
	DefaultHostname *string `pulumi:"defaultHostname"`
	// Is the Function App enabled?
	Enabled *bool `pulumi:"enabled"`
	// The runtime version associated with the Function App. Defaults to `~4`.
	FunctionsExtensionVersion *string `pulumi:"functionsExtensionVersion"`
	// Can the Function App only be accessed via HTTPS? Defaults to `false`.
	HttpsOnly *bool `pulumi:"httpsOnly"`
	// A `identity` block as defined below.
	Identity *LinuxFunctionAppIdentity `pulumi:"identity"`
	// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/en-us/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity)
	KeyVaultReferenceIdentityId *string `pulumi:"keyVaultReferenceIdentityId"`
	// The Kind value for this Linux Function App.
	Kind *string `pulumi:"kind"`
	// The Azure Region where the Linux Function App should exist. Changing this forces a new Linux Function App to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Linux Function App. Changing this forces a new Linux Function App to be created.
	Name *string `pulumi:"name"`
	// A list of outbound IP addresses. For example `["52.23.25.3", "52.143.43.12"]`
	OutboundIpAddressLists []string `pulumi:"outboundIpAddressLists"`
	// A comma separated list of outbound IP addresses as a string. For example `52.23.25.3,52.143.43.12`.
	OutboundIpAddresses *string `pulumi:"outboundIpAddresses"`
	// A list of possible outbound IP addresses, not all of which are necessarily in use. This is a superset of `outboundIpAddressList`. For example `["52.23.25.3", "52.143.43.12"]`.
	PossibleOutboundIpAddressLists []string `pulumi:"possibleOutboundIpAddressLists"`
	// A comma separated list of possible outbound IP addresses as a string. For example `52.23.25.3,52.143.43.12,52.143.43.17`. This is a superset of `outboundIpAddresses`. For example `["52.23.25.3", "52.143.43.12","52.143.43.17"]`.
	PossibleOutboundIpAddresses *string `pulumi:"possibleOutboundIpAddresses"`
	// The name of the Resource Group where the Linux Function App should exist. Changing this forces a new Linux Function App to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The ID of the App Service Plan within which to create this Function App.
	ServicePlanId *string `pulumi:"servicePlanId"`
	// A `siteConfig` block as defined below.
	SiteConfig *LinuxFunctionAppSiteConfig `pulumi:"siteConfig"`
	// A `siteCredential` block as defined below.
	SiteCredentials []LinuxFunctionAppSiteCredential `pulumi:"siteCredentials"`
	// The access key which will be used to access the backend storage account for the Function App. Conflicts with `storageUsesManagedIdentity`.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// The backend storage account name which will be used by this Function App.
	StorageAccountName *string `pulumi:"storageAccountName"`
	// The Key Vault Secret ID, optionally including version, that contains the Connection String to connect to the storage account for this Function App.
	StorageKeyVaultSecretId *string `pulumi:"storageKeyVaultSecretId"`
	// Should the Function App use Managed Identity to access the storage account. Conflicts with `storageAccountAccessKey`.
	StorageUsesManagedIdentity *bool `pulumi:"storageUsesManagedIdentity"`
	// A mapping of tags which should be assigned to the Linux Function App.
	Tags map[string]string `pulumi:"tags"`
}

type LinuxFunctionAppState struct {
	// A map of key-value pairs for [App Settings](https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings) and custom values.
	AppSettings pulumi.StringMapInput
	// A `authSettings` block as defined below.
	AuthSettings LinuxFunctionAppAuthSettingsPtrInput
	// A `backup` block as defined below.
	Backup LinuxFunctionAppBackupPtrInput
	// Should built in logging be enabled. Configures `AzureWebJobsDashboard` app setting based on the configured storage setting.
	BuiltinLoggingEnabled pulumi.BoolPtrInput
	// Should the function app use Client Certificates.
	ClientCertificateEnabled pulumi.BoolPtrInput
	// The mode of the Function App's client certificates requirement for incoming requests. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`.
	ClientCertificateMode pulumi.StringPtrInput
	// One or more `connectionString` blocks as defined below.
	ConnectionStrings LinuxFunctionAppConnectionStringArrayInput
	// Force disable the content share settings.
	ContentShareForceDisabled pulumi.BoolPtrInput
	// The identifier used by App Service to perform domain ownership verification via DNS TXT record.
	CustomDomainVerificationId pulumi.StringPtrInput
	// The amount of memory in gigabyte-seconds that your application is allowed to consume per day. Setting this value only affects function apps under the consumption plan. Defaults to `0`.
	DailyMemoryTimeQuota pulumi.IntPtrInput
	// The default hostname of the Linux Function App.
	DefaultHostname pulumi.StringPtrInput
	// Is the Function App enabled?
	Enabled pulumi.BoolPtrInput
	// The runtime version associated with the Function App. Defaults to `~4`.
	FunctionsExtensionVersion pulumi.StringPtrInput
	// Can the Function App only be accessed via HTTPS? Defaults to `false`.
	HttpsOnly pulumi.BoolPtrInput
	// A `identity` block as defined below.
	Identity LinuxFunctionAppIdentityPtrInput
	// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/en-us/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity)
	KeyVaultReferenceIdentityId pulumi.StringPtrInput
	// The Kind value for this Linux Function App.
	Kind pulumi.StringPtrInput
	// The Azure Region where the Linux Function App should exist. Changing this forces a new Linux Function App to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Linux Function App. Changing this forces a new Linux Function App to be created.
	Name pulumi.StringPtrInput
	// A list of outbound IP addresses. For example `["52.23.25.3", "52.143.43.12"]`
	OutboundIpAddressLists pulumi.StringArrayInput
	// A comma separated list of outbound IP addresses as a string. For example `52.23.25.3,52.143.43.12`.
	OutboundIpAddresses pulumi.StringPtrInput
	// A list of possible outbound IP addresses, not all of which are necessarily in use. This is a superset of `outboundIpAddressList`. For example `["52.23.25.3", "52.143.43.12"]`.
	PossibleOutboundIpAddressLists pulumi.StringArrayInput
	// A comma separated list of possible outbound IP addresses as a string. For example `52.23.25.3,52.143.43.12,52.143.43.17`. This is a superset of `outboundIpAddresses`. For example `["52.23.25.3", "52.143.43.12","52.143.43.17"]`.
	PossibleOutboundIpAddresses pulumi.StringPtrInput
	// The name of the Resource Group where the Linux Function App should exist. Changing this forces a new Linux Function App to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The ID of the App Service Plan within which to create this Function App.
	ServicePlanId pulumi.StringPtrInput
	// A `siteConfig` block as defined below.
	SiteConfig LinuxFunctionAppSiteConfigPtrInput
	// A `siteCredential` block as defined below.
	SiteCredentials LinuxFunctionAppSiteCredentialArrayInput
	// The access key which will be used to access the backend storage account for the Function App. Conflicts with `storageUsesManagedIdentity`.
	StorageAccountAccessKey pulumi.StringPtrInput
	// The backend storage account name which will be used by this Function App.
	StorageAccountName pulumi.StringPtrInput
	// The Key Vault Secret ID, optionally including version, that contains the Connection String to connect to the storage account for this Function App.
	StorageKeyVaultSecretId pulumi.StringPtrInput
	// Should the Function App use Managed Identity to access the storage account. Conflicts with `storageAccountAccessKey`.
	StorageUsesManagedIdentity pulumi.BoolPtrInput
	// A mapping of tags which should be assigned to the Linux Function App.
	Tags pulumi.StringMapInput
}

func (LinuxFunctionAppState) ElementType() reflect.Type {
	return reflect.TypeOf((*linuxFunctionAppState)(nil)).Elem()
}

type linuxFunctionAppArgs struct {
	// A map of key-value pairs for [App Settings](https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings) and custom values.
	AppSettings map[string]string `pulumi:"appSettings"`
	// A `authSettings` block as defined below.
	AuthSettings *LinuxFunctionAppAuthSettings `pulumi:"authSettings"`
	// A `backup` block as defined below.
	Backup *LinuxFunctionAppBackup `pulumi:"backup"`
	// Should built in logging be enabled. Configures `AzureWebJobsDashboard` app setting based on the configured storage setting.
	BuiltinLoggingEnabled *bool `pulumi:"builtinLoggingEnabled"`
	// Should the function app use Client Certificates.
	ClientCertificateEnabled *bool `pulumi:"clientCertificateEnabled"`
	// The mode of the Function App's client certificates requirement for incoming requests. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`.
	ClientCertificateMode *string `pulumi:"clientCertificateMode"`
	// One or more `connectionString` blocks as defined below.
	ConnectionStrings []LinuxFunctionAppConnectionString `pulumi:"connectionStrings"`
	// Force disable the content share settings.
	ContentShareForceDisabled *bool `pulumi:"contentShareForceDisabled"`
	// The amount of memory in gigabyte-seconds that your application is allowed to consume per day. Setting this value only affects function apps under the consumption plan. Defaults to `0`.
	DailyMemoryTimeQuota *int `pulumi:"dailyMemoryTimeQuota"`
	// Is the Function App enabled?
	Enabled *bool `pulumi:"enabled"`
	// The runtime version associated with the Function App. Defaults to `~4`.
	FunctionsExtensionVersion *string `pulumi:"functionsExtensionVersion"`
	// Can the Function App only be accessed via HTTPS? Defaults to `false`.
	HttpsOnly *bool `pulumi:"httpsOnly"`
	// A `identity` block as defined below.
	Identity *LinuxFunctionAppIdentity `pulumi:"identity"`
	// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/en-us/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity)
	KeyVaultReferenceIdentityId *string `pulumi:"keyVaultReferenceIdentityId"`
	// The Azure Region where the Linux Function App should exist. Changing this forces a new Linux Function App to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Linux Function App. Changing this forces a new Linux Function App to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Linux Function App should exist. Changing this forces a new Linux Function App to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The ID of the App Service Plan within which to create this Function App.
	ServicePlanId string `pulumi:"servicePlanId"`
	// A `siteConfig` block as defined below.
	SiteConfig LinuxFunctionAppSiteConfig `pulumi:"siteConfig"`
	// The access key which will be used to access the backend storage account for the Function App. Conflicts with `storageUsesManagedIdentity`.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// The backend storage account name which will be used by this Function App.
	StorageAccountName *string `pulumi:"storageAccountName"`
	// The Key Vault Secret ID, optionally including version, that contains the Connection String to connect to the storage account for this Function App.
	StorageKeyVaultSecretId *string `pulumi:"storageKeyVaultSecretId"`
	// Should the Function App use Managed Identity to access the storage account. Conflicts with `storageAccountAccessKey`.
	StorageUsesManagedIdentity *bool `pulumi:"storageUsesManagedIdentity"`
	// A mapping of tags which should be assigned to the Linux Function App.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a LinuxFunctionApp resource.
type LinuxFunctionAppArgs struct {
	// A map of key-value pairs for [App Settings](https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings) and custom values.
	AppSettings pulumi.StringMapInput
	// A `authSettings` block as defined below.
	AuthSettings LinuxFunctionAppAuthSettingsPtrInput
	// A `backup` block as defined below.
	Backup LinuxFunctionAppBackupPtrInput
	// Should built in logging be enabled. Configures `AzureWebJobsDashboard` app setting based on the configured storage setting.
	BuiltinLoggingEnabled pulumi.BoolPtrInput
	// Should the function app use Client Certificates.
	ClientCertificateEnabled pulumi.BoolPtrInput
	// The mode of the Function App's client certificates requirement for incoming requests. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`.
	ClientCertificateMode pulumi.StringPtrInput
	// One or more `connectionString` blocks as defined below.
	ConnectionStrings LinuxFunctionAppConnectionStringArrayInput
	// Force disable the content share settings.
	ContentShareForceDisabled pulumi.BoolPtrInput
	// The amount of memory in gigabyte-seconds that your application is allowed to consume per day. Setting this value only affects function apps under the consumption plan. Defaults to `0`.
	DailyMemoryTimeQuota pulumi.IntPtrInput
	// Is the Function App enabled?
	Enabled pulumi.BoolPtrInput
	// The runtime version associated with the Function App. Defaults to `~4`.
	FunctionsExtensionVersion pulumi.StringPtrInput
	// Can the Function App only be accessed via HTTPS? Defaults to `false`.
	HttpsOnly pulumi.BoolPtrInput
	// A `identity` block as defined below.
	Identity LinuxFunctionAppIdentityPtrInput
	// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/en-us/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity)
	KeyVaultReferenceIdentityId pulumi.StringPtrInput
	// The Azure Region where the Linux Function App should exist. Changing this forces a new Linux Function App to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Linux Function App. Changing this forces a new Linux Function App to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Linux Function App should exist. Changing this forces a new Linux Function App to be created.
	ResourceGroupName pulumi.StringInput
	// The ID of the App Service Plan within which to create this Function App.
	ServicePlanId pulumi.StringInput
	// A `siteConfig` block as defined below.
	SiteConfig LinuxFunctionAppSiteConfigInput
	// The access key which will be used to access the backend storage account for the Function App. Conflicts with `storageUsesManagedIdentity`.
	StorageAccountAccessKey pulumi.StringPtrInput
	// The backend storage account name which will be used by this Function App.
	StorageAccountName pulumi.StringPtrInput
	// The Key Vault Secret ID, optionally including version, that contains the Connection String to connect to the storage account for this Function App.
	StorageKeyVaultSecretId pulumi.StringPtrInput
	// Should the Function App use Managed Identity to access the storage account. Conflicts with `storageAccountAccessKey`.
	StorageUsesManagedIdentity pulumi.BoolPtrInput
	// A mapping of tags which should be assigned to the Linux Function App.
	Tags pulumi.StringMapInput
}

func (LinuxFunctionAppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*linuxFunctionAppArgs)(nil)).Elem()
}

type LinuxFunctionAppInput interface {
	pulumi.Input

	ToLinuxFunctionAppOutput() LinuxFunctionAppOutput
	ToLinuxFunctionAppOutputWithContext(ctx context.Context) LinuxFunctionAppOutput
}

func (*LinuxFunctionApp) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxFunctionApp)(nil)).Elem()
}

func (i *LinuxFunctionApp) ToLinuxFunctionAppOutput() LinuxFunctionAppOutput {
	return i.ToLinuxFunctionAppOutputWithContext(context.Background())
}

func (i *LinuxFunctionApp) ToLinuxFunctionAppOutputWithContext(ctx context.Context) LinuxFunctionAppOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxFunctionAppOutput)
}

// LinuxFunctionAppArrayInput is an input type that accepts LinuxFunctionAppArray and LinuxFunctionAppArrayOutput values.
// You can construct a concrete instance of `LinuxFunctionAppArrayInput` via:
//
//          LinuxFunctionAppArray{ LinuxFunctionAppArgs{...} }
type LinuxFunctionAppArrayInput interface {
	pulumi.Input

	ToLinuxFunctionAppArrayOutput() LinuxFunctionAppArrayOutput
	ToLinuxFunctionAppArrayOutputWithContext(context.Context) LinuxFunctionAppArrayOutput
}

type LinuxFunctionAppArray []LinuxFunctionAppInput

func (LinuxFunctionAppArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LinuxFunctionApp)(nil)).Elem()
}

func (i LinuxFunctionAppArray) ToLinuxFunctionAppArrayOutput() LinuxFunctionAppArrayOutput {
	return i.ToLinuxFunctionAppArrayOutputWithContext(context.Background())
}

func (i LinuxFunctionAppArray) ToLinuxFunctionAppArrayOutputWithContext(ctx context.Context) LinuxFunctionAppArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxFunctionAppArrayOutput)
}

// LinuxFunctionAppMapInput is an input type that accepts LinuxFunctionAppMap and LinuxFunctionAppMapOutput values.
// You can construct a concrete instance of `LinuxFunctionAppMapInput` via:
//
//          LinuxFunctionAppMap{ "key": LinuxFunctionAppArgs{...} }
type LinuxFunctionAppMapInput interface {
	pulumi.Input

	ToLinuxFunctionAppMapOutput() LinuxFunctionAppMapOutput
	ToLinuxFunctionAppMapOutputWithContext(context.Context) LinuxFunctionAppMapOutput
}

type LinuxFunctionAppMap map[string]LinuxFunctionAppInput

func (LinuxFunctionAppMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LinuxFunctionApp)(nil)).Elem()
}

func (i LinuxFunctionAppMap) ToLinuxFunctionAppMapOutput() LinuxFunctionAppMapOutput {
	return i.ToLinuxFunctionAppMapOutputWithContext(context.Background())
}

func (i LinuxFunctionAppMap) ToLinuxFunctionAppMapOutputWithContext(ctx context.Context) LinuxFunctionAppMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxFunctionAppMapOutput)
}

type LinuxFunctionAppOutput struct{ *pulumi.OutputState }

func (LinuxFunctionAppOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxFunctionApp)(nil)).Elem()
}

func (o LinuxFunctionAppOutput) ToLinuxFunctionAppOutput() LinuxFunctionAppOutput {
	return o
}

func (o LinuxFunctionAppOutput) ToLinuxFunctionAppOutputWithContext(ctx context.Context) LinuxFunctionAppOutput {
	return o
}

type LinuxFunctionAppArrayOutput struct{ *pulumi.OutputState }

func (LinuxFunctionAppArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LinuxFunctionApp)(nil)).Elem()
}

func (o LinuxFunctionAppArrayOutput) ToLinuxFunctionAppArrayOutput() LinuxFunctionAppArrayOutput {
	return o
}

func (o LinuxFunctionAppArrayOutput) ToLinuxFunctionAppArrayOutputWithContext(ctx context.Context) LinuxFunctionAppArrayOutput {
	return o
}

func (o LinuxFunctionAppArrayOutput) Index(i pulumi.IntInput) LinuxFunctionAppOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LinuxFunctionApp {
		return vs[0].([]*LinuxFunctionApp)[vs[1].(int)]
	}).(LinuxFunctionAppOutput)
}

type LinuxFunctionAppMapOutput struct{ *pulumi.OutputState }

func (LinuxFunctionAppMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LinuxFunctionApp)(nil)).Elem()
}

func (o LinuxFunctionAppMapOutput) ToLinuxFunctionAppMapOutput() LinuxFunctionAppMapOutput {
	return o
}

func (o LinuxFunctionAppMapOutput) ToLinuxFunctionAppMapOutputWithContext(ctx context.Context) LinuxFunctionAppMapOutput {
	return o
}

func (o LinuxFunctionAppMapOutput) MapIndex(k pulumi.StringInput) LinuxFunctionAppOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LinuxFunctionApp {
		return vs[0].(map[string]*LinuxFunctionApp)[vs[1].(string)]
	}).(LinuxFunctionAppOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LinuxFunctionAppInput)(nil)).Elem(), &LinuxFunctionApp{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinuxFunctionAppArrayInput)(nil)).Elem(), LinuxFunctionAppArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinuxFunctionAppMapInput)(nil)).Elem(), LinuxFunctionAppMap{})
	pulumi.RegisterOutputType(LinuxFunctionAppOutput{})
	pulumi.RegisterOutputType(LinuxFunctionAppArrayOutput{})
	pulumi.RegisterOutputType(LinuxFunctionAppMapOutput{})
}
