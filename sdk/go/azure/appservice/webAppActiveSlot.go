// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Web App Active Slot.
//
// ## Example Usage
// ### Windows Web App
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/appservice"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleServicePlan, err := appservice.NewServicePlan(ctx, "exampleServicePlan", &appservice.ServicePlanArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				OsType:            pulumi.String("Windows"),
//				SkuName:           pulumi.String("P1v2"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleWindowsWebApp, err := appservice.NewWindowsWebApp(ctx, "exampleWindowsWebApp", &appservice.WindowsWebAppArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleServicePlan.Location,
//				ServicePlanId:     exampleServicePlan.ID(),
//				SiteConfig:        nil,
//			})
//			if err != nil {
//				return err
//			}
//			exampleWindowsWebAppSlot, err := appservice.NewWindowsWebAppSlot(ctx, "exampleWindowsWebAppSlot", &appservice.WindowsWebAppSlotArgs{
//				AppServiceId: exampleWindowsWebApp.Name,
//				SiteConfig:   nil,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = appservice.NewWebAppActiveSlot(ctx, "exampleWebAppActiveSlot", &appservice.WebAppActiveSlotArgs{
//				SlotId: exampleWindowsWebAppSlot.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// a Web App Active Slot can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:appservice/webAppActiveSlot:WebAppActiveSlot example "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/sites/site1"
//
// ```
type WebAppActiveSlot struct {
	pulumi.CustomResourceState

	// The timestamp of the last successful swap with `Production`.
	LastSuccessfulSwap pulumi.StringOutput `pulumi:"lastSuccessfulSwap"`
	// The swap action should overwrite the Production slot's network configuration with the configuration from this slot. Defaults to `true`. Changing this forces a new resource to be created.
	OverwriteNetworkConfig pulumi.BoolPtrOutput `pulumi:"overwriteNetworkConfig"`
	// The ID of the Slot to swap with `Production`.
	SlotId pulumi.StringOutput `pulumi:"slotId"`
}

// NewWebAppActiveSlot registers a new resource with the given unique name, arguments, and options.
func NewWebAppActiveSlot(ctx *pulumi.Context,
	name string, args *WebAppActiveSlotArgs, opts ...pulumi.ResourceOption) (*WebAppActiveSlot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SlotId == nil {
		return nil, errors.New("invalid value for required argument 'SlotId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WebAppActiveSlot
	err := ctx.RegisterResource("azure:appservice/webAppActiveSlot:WebAppActiveSlot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebAppActiveSlot gets an existing WebAppActiveSlot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebAppActiveSlot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebAppActiveSlotState, opts ...pulumi.ResourceOption) (*WebAppActiveSlot, error) {
	var resource WebAppActiveSlot
	err := ctx.ReadResource("azure:appservice/webAppActiveSlot:WebAppActiveSlot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebAppActiveSlot resources.
type webAppActiveSlotState struct {
	// The timestamp of the last successful swap with `Production`.
	LastSuccessfulSwap *string `pulumi:"lastSuccessfulSwap"`
	// The swap action should overwrite the Production slot's network configuration with the configuration from this slot. Defaults to `true`. Changing this forces a new resource to be created.
	OverwriteNetworkConfig *bool `pulumi:"overwriteNetworkConfig"`
	// The ID of the Slot to swap with `Production`.
	SlotId *string `pulumi:"slotId"`
}

type WebAppActiveSlotState struct {
	// The timestamp of the last successful swap with `Production`.
	LastSuccessfulSwap pulumi.StringPtrInput
	// The swap action should overwrite the Production slot's network configuration with the configuration from this slot. Defaults to `true`. Changing this forces a new resource to be created.
	OverwriteNetworkConfig pulumi.BoolPtrInput
	// The ID of the Slot to swap with `Production`.
	SlotId pulumi.StringPtrInput
}

func (WebAppActiveSlotState) ElementType() reflect.Type {
	return reflect.TypeOf((*webAppActiveSlotState)(nil)).Elem()
}

type webAppActiveSlotArgs struct {
	// The swap action should overwrite the Production slot's network configuration with the configuration from this slot. Defaults to `true`. Changing this forces a new resource to be created.
	OverwriteNetworkConfig *bool `pulumi:"overwriteNetworkConfig"`
	// The ID of the Slot to swap with `Production`.
	SlotId string `pulumi:"slotId"`
}

// The set of arguments for constructing a WebAppActiveSlot resource.
type WebAppActiveSlotArgs struct {
	// The swap action should overwrite the Production slot's network configuration with the configuration from this slot. Defaults to `true`. Changing this forces a new resource to be created.
	OverwriteNetworkConfig pulumi.BoolPtrInput
	// The ID of the Slot to swap with `Production`.
	SlotId pulumi.StringInput
}

func (WebAppActiveSlotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webAppActiveSlotArgs)(nil)).Elem()
}

type WebAppActiveSlotInput interface {
	pulumi.Input

	ToWebAppActiveSlotOutput() WebAppActiveSlotOutput
	ToWebAppActiveSlotOutputWithContext(ctx context.Context) WebAppActiveSlotOutput
}

func (*WebAppActiveSlot) ElementType() reflect.Type {
	return reflect.TypeOf((**WebAppActiveSlot)(nil)).Elem()
}

func (i *WebAppActiveSlot) ToWebAppActiveSlotOutput() WebAppActiveSlotOutput {
	return i.ToWebAppActiveSlotOutputWithContext(context.Background())
}

func (i *WebAppActiveSlot) ToWebAppActiveSlotOutputWithContext(ctx context.Context) WebAppActiveSlotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppActiveSlotOutput)
}

// WebAppActiveSlotArrayInput is an input type that accepts WebAppActiveSlotArray and WebAppActiveSlotArrayOutput values.
// You can construct a concrete instance of `WebAppActiveSlotArrayInput` via:
//
//	WebAppActiveSlotArray{ WebAppActiveSlotArgs{...} }
type WebAppActiveSlotArrayInput interface {
	pulumi.Input

	ToWebAppActiveSlotArrayOutput() WebAppActiveSlotArrayOutput
	ToWebAppActiveSlotArrayOutputWithContext(context.Context) WebAppActiveSlotArrayOutput
}

type WebAppActiveSlotArray []WebAppActiveSlotInput

func (WebAppActiveSlotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebAppActiveSlot)(nil)).Elem()
}

func (i WebAppActiveSlotArray) ToWebAppActiveSlotArrayOutput() WebAppActiveSlotArrayOutput {
	return i.ToWebAppActiveSlotArrayOutputWithContext(context.Background())
}

func (i WebAppActiveSlotArray) ToWebAppActiveSlotArrayOutputWithContext(ctx context.Context) WebAppActiveSlotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppActiveSlotArrayOutput)
}

// WebAppActiveSlotMapInput is an input type that accepts WebAppActiveSlotMap and WebAppActiveSlotMapOutput values.
// You can construct a concrete instance of `WebAppActiveSlotMapInput` via:
//
//	WebAppActiveSlotMap{ "key": WebAppActiveSlotArgs{...} }
type WebAppActiveSlotMapInput interface {
	pulumi.Input

	ToWebAppActiveSlotMapOutput() WebAppActiveSlotMapOutput
	ToWebAppActiveSlotMapOutputWithContext(context.Context) WebAppActiveSlotMapOutput
}

type WebAppActiveSlotMap map[string]WebAppActiveSlotInput

func (WebAppActiveSlotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebAppActiveSlot)(nil)).Elem()
}

func (i WebAppActiveSlotMap) ToWebAppActiveSlotMapOutput() WebAppActiveSlotMapOutput {
	return i.ToWebAppActiveSlotMapOutputWithContext(context.Background())
}

func (i WebAppActiveSlotMap) ToWebAppActiveSlotMapOutputWithContext(ctx context.Context) WebAppActiveSlotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppActiveSlotMapOutput)
}

type WebAppActiveSlotOutput struct{ *pulumi.OutputState }

func (WebAppActiveSlotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebAppActiveSlot)(nil)).Elem()
}

func (o WebAppActiveSlotOutput) ToWebAppActiveSlotOutput() WebAppActiveSlotOutput {
	return o
}

func (o WebAppActiveSlotOutput) ToWebAppActiveSlotOutputWithContext(ctx context.Context) WebAppActiveSlotOutput {
	return o
}

// The timestamp of the last successful swap with `Production`.
func (o WebAppActiveSlotOutput) LastSuccessfulSwap() pulumi.StringOutput {
	return o.ApplyT(func(v *WebAppActiveSlot) pulumi.StringOutput { return v.LastSuccessfulSwap }).(pulumi.StringOutput)
}

// The swap action should overwrite the Production slot's network configuration with the configuration from this slot. Defaults to `true`. Changing this forces a new resource to be created.
func (o WebAppActiveSlotOutput) OverwriteNetworkConfig() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebAppActiveSlot) pulumi.BoolPtrOutput { return v.OverwriteNetworkConfig }).(pulumi.BoolPtrOutput)
}

// The ID of the Slot to swap with `Production`.
func (o WebAppActiveSlotOutput) SlotId() pulumi.StringOutput {
	return o.ApplyT(func(v *WebAppActiveSlot) pulumi.StringOutput { return v.SlotId }).(pulumi.StringOutput)
}

type WebAppActiveSlotArrayOutput struct{ *pulumi.OutputState }

func (WebAppActiveSlotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebAppActiveSlot)(nil)).Elem()
}

func (o WebAppActiveSlotArrayOutput) ToWebAppActiveSlotArrayOutput() WebAppActiveSlotArrayOutput {
	return o
}

func (o WebAppActiveSlotArrayOutput) ToWebAppActiveSlotArrayOutputWithContext(ctx context.Context) WebAppActiveSlotArrayOutput {
	return o
}

func (o WebAppActiveSlotArrayOutput) Index(i pulumi.IntInput) WebAppActiveSlotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WebAppActiveSlot {
		return vs[0].([]*WebAppActiveSlot)[vs[1].(int)]
	}).(WebAppActiveSlotOutput)
}

type WebAppActiveSlotMapOutput struct{ *pulumi.OutputState }

func (WebAppActiveSlotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebAppActiveSlot)(nil)).Elem()
}

func (o WebAppActiveSlotMapOutput) ToWebAppActiveSlotMapOutput() WebAppActiveSlotMapOutput {
	return o
}

func (o WebAppActiveSlotMapOutput) ToWebAppActiveSlotMapOutputWithContext(ctx context.Context) WebAppActiveSlotMapOutput {
	return o
}

func (o WebAppActiveSlotMapOutput) MapIndex(k pulumi.StringInput) WebAppActiveSlotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WebAppActiveSlot {
		return vs[0].(map[string]*WebAppActiveSlot)[vs[1].(string)]
	}).(WebAppActiveSlotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppActiveSlotInput)(nil)).Elem(), &WebAppActiveSlot{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppActiveSlotArrayInput)(nil)).Elem(), WebAppActiveSlotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppActiveSlotMapInput)(nil)).Elem(), WebAppActiveSlotMap{})
	pulumi.RegisterOutputType(WebAppActiveSlotOutput{})
	pulumi.RegisterOutputType(WebAppActiveSlotArrayOutput{})
	pulumi.RegisterOutputType(WebAppActiveSlotMapOutput{})
}
