// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appservice

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an App Service source control token.
// 
// > **NOTE:** Source Control Tokens are configured at the subscription level, not on each App Service - as such this can only be configured Subscription-wide
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/app_service_source_control_token.html.markdown.
type SourceCodeToken struct {
	s *pulumi.ResourceState
}

// NewSourceCodeToken registers a new resource with the given unique name, arguments, and options.
func NewSourceCodeToken(ctx *pulumi.Context,
	name string, args *SourceCodeTokenArgs, opts ...pulumi.ResourceOpt) (*SourceCodeToken, error) {
	if args == nil || args.Token == nil {
		return nil, errors.New("missing required argument 'Token'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["token"] = nil
		inputs["tokenSecret"] = nil
		inputs["type"] = nil
	} else {
		inputs["token"] = args.Token
		inputs["tokenSecret"] = args.TokenSecret
		inputs["type"] = args.Type
	}
	s, err := ctx.RegisterResource("azure:appservice/sourceCodeToken:SourceCodeToken", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SourceCodeToken{s: s}, nil
}

// GetSourceCodeToken gets an existing SourceCodeToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceCodeToken(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SourceCodeTokenState, opts ...pulumi.ResourceOpt) (*SourceCodeToken, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["token"] = state.Token
		inputs["tokenSecret"] = state.TokenSecret
		inputs["type"] = state.Type
	}
	s, err := ctx.ReadResource("azure:appservice/sourceCodeToken:SourceCodeToken", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SourceCodeToken{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SourceCodeToken) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SourceCodeToken) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The OAuth access token.
func (r *SourceCodeToken) Token() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["token"])
}

// The OAuth access token secret.
func (r *SourceCodeToken) TokenSecret() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["tokenSecret"])
}

// The source control type. Possible values are `BitBucket`, `Dropbox`, `GitHub` and `OneDrive`.
func (r *SourceCodeToken) Type() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["type"])
}

// Input properties used for looking up and filtering SourceCodeToken resources.
type SourceCodeTokenState struct {
	// The OAuth access token.
	Token interface{}
	// The OAuth access token secret.
	TokenSecret interface{}
	// The source control type. Possible values are `BitBucket`, `Dropbox`, `GitHub` and `OneDrive`.
	Type interface{}
}

// The set of arguments for constructing a SourceCodeToken resource.
type SourceCodeTokenArgs struct {
	// The OAuth access token.
	Token interface{}
	// The OAuth access token secret.
	TokenSecret interface{}
	// The source control type. Possible values are `BitBucket`, `Dropbox`, `GitHub` and `OneDrive`.
	Type interface{}
}
