// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/appservice"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := appservice.NewSourceControlToken(ctx, "example", &appservice.SourceControlTokenArgs{
//				Token: pulumi.String("ghp_sometokenvaluesecretsauce"),
//				Type:  pulumi.String("GitHub"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// App Service Source GitHub Tokens can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:appservice/sourceControlToken:SourceControlToken example /providers/Microsoft.Web/sourceControls/GitHub
//
// ```
type SourceControlToken struct {
	pulumi.CustomResourceState

	// The Access Token.
	Token pulumi.StringOutput `pulumi:"token"`
	// The Access Token Secret.
	//
	// > **NOTE:** The token used for deploying App Service needs the following permissions: `repo` and `workflow`.
	TokenSecret pulumi.StringPtrOutput `pulumi:"tokenSecret"`
	// The Token type. Possible values include `Bitbucket`, `Dropbox`, `Github`, and `OneDrive`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSourceControlToken registers a new resource with the given unique name, arguments, and options.
func NewSourceControlToken(ctx *pulumi.Context,
	name string, args *SourceControlTokenArgs, opts ...pulumi.ResourceOption) (*SourceControlToken, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Token == nil {
		return nil, errors.New("invalid value for required argument 'Token'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Token != nil {
		args.Token = pulumi.ToSecret(args.Token).(pulumi.StringInput)
	}
	if args.TokenSecret != nil {
		args.TokenSecret = pulumi.ToSecret(args.TokenSecret).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"token",
		"tokenSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceControlToken
	err := ctx.RegisterResource("azure:appservice/sourceControlToken:SourceControlToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceControlToken gets an existing SourceControlToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceControlToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceControlTokenState, opts ...pulumi.ResourceOption) (*SourceControlToken, error) {
	var resource SourceControlToken
	err := ctx.ReadResource("azure:appservice/sourceControlToken:SourceControlToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceControlToken resources.
type sourceControlTokenState struct {
	// The Access Token.
	Token *string `pulumi:"token"`
	// The Access Token Secret.
	//
	// > **NOTE:** The token used for deploying App Service needs the following permissions: `repo` and `workflow`.
	TokenSecret *string `pulumi:"tokenSecret"`
	// The Token type. Possible values include `Bitbucket`, `Dropbox`, `Github`, and `OneDrive`.
	Type *string `pulumi:"type"`
}

type SourceControlTokenState struct {
	// The Access Token.
	Token pulumi.StringPtrInput
	// The Access Token Secret.
	//
	// > **NOTE:** The token used for deploying App Service needs the following permissions: `repo` and `workflow`.
	TokenSecret pulumi.StringPtrInput
	// The Token type. Possible values include `Bitbucket`, `Dropbox`, `Github`, and `OneDrive`.
	Type pulumi.StringPtrInput
}

func (SourceControlTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceControlTokenState)(nil)).Elem()
}

type sourceControlTokenArgs struct {
	// The Access Token.
	Token string `pulumi:"token"`
	// The Access Token Secret.
	//
	// > **NOTE:** The token used for deploying App Service needs the following permissions: `repo` and `workflow`.
	TokenSecret *string `pulumi:"tokenSecret"`
	// The Token type. Possible values include `Bitbucket`, `Dropbox`, `Github`, and `OneDrive`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a SourceControlToken resource.
type SourceControlTokenArgs struct {
	// The Access Token.
	Token pulumi.StringInput
	// The Access Token Secret.
	//
	// > **NOTE:** The token used for deploying App Service needs the following permissions: `repo` and `workflow`.
	TokenSecret pulumi.StringPtrInput
	// The Token type. Possible values include `Bitbucket`, `Dropbox`, `Github`, and `OneDrive`.
	Type pulumi.StringInput
}

func (SourceControlTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceControlTokenArgs)(nil)).Elem()
}

type SourceControlTokenInput interface {
	pulumi.Input

	ToSourceControlTokenOutput() SourceControlTokenOutput
	ToSourceControlTokenOutputWithContext(ctx context.Context) SourceControlTokenOutput
}

func (*SourceControlToken) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceControlToken)(nil)).Elem()
}

func (i *SourceControlToken) ToSourceControlTokenOutput() SourceControlTokenOutput {
	return i.ToSourceControlTokenOutputWithContext(context.Background())
}

func (i *SourceControlToken) ToSourceControlTokenOutputWithContext(ctx context.Context) SourceControlTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceControlTokenOutput)
}

// SourceControlTokenArrayInput is an input type that accepts SourceControlTokenArray and SourceControlTokenArrayOutput values.
// You can construct a concrete instance of `SourceControlTokenArrayInput` via:
//
//	SourceControlTokenArray{ SourceControlTokenArgs{...} }
type SourceControlTokenArrayInput interface {
	pulumi.Input

	ToSourceControlTokenArrayOutput() SourceControlTokenArrayOutput
	ToSourceControlTokenArrayOutputWithContext(context.Context) SourceControlTokenArrayOutput
}

type SourceControlTokenArray []SourceControlTokenInput

func (SourceControlTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceControlToken)(nil)).Elem()
}

func (i SourceControlTokenArray) ToSourceControlTokenArrayOutput() SourceControlTokenArrayOutput {
	return i.ToSourceControlTokenArrayOutputWithContext(context.Background())
}

func (i SourceControlTokenArray) ToSourceControlTokenArrayOutputWithContext(ctx context.Context) SourceControlTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceControlTokenArrayOutput)
}

// SourceControlTokenMapInput is an input type that accepts SourceControlTokenMap and SourceControlTokenMapOutput values.
// You can construct a concrete instance of `SourceControlTokenMapInput` via:
//
//	SourceControlTokenMap{ "key": SourceControlTokenArgs{...} }
type SourceControlTokenMapInput interface {
	pulumi.Input

	ToSourceControlTokenMapOutput() SourceControlTokenMapOutput
	ToSourceControlTokenMapOutputWithContext(context.Context) SourceControlTokenMapOutput
}

type SourceControlTokenMap map[string]SourceControlTokenInput

func (SourceControlTokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceControlToken)(nil)).Elem()
}

func (i SourceControlTokenMap) ToSourceControlTokenMapOutput() SourceControlTokenMapOutput {
	return i.ToSourceControlTokenMapOutputWithContext(context.Background())
}

func (i SourceControlTokenMap) ToSourceControlTokenMapOutputWithContext(ctx context.Context) SourceControlTokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceControlTokenMapOutput)
}

type SourceControlTokenOutput struct{ *pulumi.OutputState }

func (SourceControlTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceControlToken)(nil)).Elem()
}

func (o SourceControlTokenOutput) ToSourceControlTokenOutput() SourceControlTokenOutput {
	return o
}

func (o SourceControlTokenOutput) ToSourceControlTokenOutputWithContext(ctx context.Context) SourceControlTokenOutput {
	return o
}

// The Access Token.
func (o SourceControlTokenOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceControlToken) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

// The Access Token Secret.
//
// > **NOTE:** The token used for deploying App Service needs the following permissions: `repo` and `workflow`.
func (o SourceControlTokenOutput) TokenSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceControlToken) pulumi.StringPtrOutput { return v.TokenSecret }).(pulumi.StringPtrOutput)
}

// The Token type. Possible values include `Bitbucket`, `Dropbox`, `Github`, and `OneDrive`.
func (o SourceControlTokenOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceControlToken) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type SourceControlTokenArrayOutput struct{ *pulumi.OutputState }

func (SourceControlTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceControlToken)(nil)).Elem()
}

func (o SourceControlTokenArrayOutput) ToSourceControlTokenArrayOutput() SourceControlTokenArrayOutput {
	return o
}

func (o SourceControlTokenArrayOutput) ToSourceControlTokenArrayOutputWithContext(ctx context.Context) SourceControlTokenArrayOutput {
	return o
}

func (o SourceControlTokenArrayOutput) Index(i pulumi.IntInput) SourceControlTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceControlToken {
		return vs[0].([]*SourceControlToken)[vs[1].(int)]
	}).(SourceControlTokenOutput)
}

type SourceControlTokenMapOutput struct{ *pulumi.OutputState }

func (SourceControlTokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceControlToken)(nil)).Elem()
}

func (o SourceControlTokenMapOutput) ToSourceControlTokenMapOutput() SourceControlTokenMapOutput {
	return o
}

func (o SourceControlTokenMapOutput) ToSourceControlTokenMapOutputWithContext(ctx context.Context) SourceControlTokenMapOutput {
	return o
}

func (o SourceControlTokenMapOutput) MapIndex(k pulumi.StringInput) SourceControlTokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceControlToken {
		return vs[0].(map[string]*SourceControlToken)[vs[1].(string)]
	}).(SourceControlTokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceControlTokenInput)(nil)).Elem(), &SourceControlToken{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceControlTokenArrayInput)(nil)).Elem(), SourceControlTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceControlTokenMapInput)(nil)).Elem(), SourceControlTokenMap{})
	pulumi.RegisterOutputType(SourceControlTokenOutput{})
	pulumi.RegisterOutputType(SourceControlTokenArrayOutput{})
	pulumi.RegisterOutputType(SourceControlTokenMapOutput{})
}
