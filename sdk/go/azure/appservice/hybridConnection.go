// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an App Service Hybrid Connection for an existing App Service, Relay and Service Bus.
//
// !> **NOTE:** This resource has been deprecated in version 3.0 of the AzureRM provider and will be removed in version 4.0. Please use `appservice.FunctionAppHybridConnection` resources instead.
//
// ## Example Usage
//
// This example provisions an App Service, a Relay Hybrid Connection, and a Service Bus using their outputs to create the App Service Hybrid Connection.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/appservice"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/relay"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			examplePlan, err := appservice.NewPlan(ctx, "examplePlan", &appservice.PlanArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku: &appservice.PlanSkuArgs{
//					Tier: pulumi.String("Standard"),
//					Size: pulumi.String("S1"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleAppService, err := appservice.NewAppService(ctx, "exampleAppService", &appservice.AppServiceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				AppServicePlanId:  examplePlan.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			exampleNamespace, err := relay.NewNamespace(ctx, "exampleNamespace", &relay.NamespaceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				SkuName:           pulumi.String("Standard"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleHybridConnection, err := relay.NewHybridConnection(ctx, "exampleHybridConnection", &relay.HybridConnectionArgs{
//				ResourceGroupName:  exampleResourceGroup.Name,
//				RelayNamespaceName: exampleNamespace.Name,
//				UserMetadata:       pulumi.String("examplemetadata"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = appservice.NewHybridConnection(ctx, "exampleAppservice/hybridConnectionHybridConnection", &appservice.HybridConnectionArgs{
//				AppServiceName:    exampleAppService.Name,
//				ResourceGroupName: exampleResourceGroup.Name,
//				RelayId:           exampleHybridConnection.ID(),
//				Hostname:          pulumi.String("testhostname.example"),
//				Port:              pulumi.Int(8080),
//				SendKeyName:       pulumi.String("exampleSharedAccessKey"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// App Service Hybrid Connections can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:appservice/hybridConnection:HybridConnection example /subscriptions/00000000-0000-0000-0000-00000000000/resourceGroups/exampleResourceGroup1/providers/Microsoft.Web/sites/exampleAppService1/hybridConnectionNamespaces/exampleRN1/relays/exampleRHC1
//
// ```
type HybridConnection struct {
	pulumi.CustomResourceState

	// Specifies the name of the App Service. Changing this forces a new resource to be created.
	AppServiceName pulumi.StringOutput `pulumi:"appServiceName"`
	// The hostname of the endpoint.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// The name of the Relay Namespace.
	NamespaceName pulumi.StringOutput `pulumi:"namespaceName"`
	// The port of the endpoint.
	Port pulumi.IntOutput `pulumi:"port"`
	// The ID of the Service Bus Relay. Changing this forces a new resource to be created.
	RelayId   pulumi.StringOutput `pulumi:"relayId"`
	RelayName pulumi.StringOutput `pulumi:"relayName"`
	// The name of the resource group in which to create the App Service. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The name of the Service Bus key which has Send permissions. Defaults to `RootManageSharedAccessKey`.
	SendKeyName pulumi.StringPtrOutput `pulumi:"sendKeyName"`
	// The value of the Service Bus Primary Access key.
	SendKeyValue pulumi.StringOutput `pulumi:"sendKeyValue"`
	// The name of the Service Bus namespace.
	ServiceBusNamespace pulumi.StringOutput `pulumi:"serviceBusNamespace"`
	// The suffix for the service bus endpoint.
	ServiceBusSuffix pulumi.StringOutput `pulumi:"serviceBusSuffix"`
}

// NewHybridConnection registers a new resource with the given unique name, arguments, and options.
func NewHybridConnection(ctx *pulumi.Context,
	name string, args *HybridConnectionArgs, opts ...pulumi.ResourceOption) (*HybridConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppServiceName == nil {
		return nil, errors.New("invalid value for required argument 'AppServiceName'")
	}
	if args.Hostname == nil {
		return nil, errors.New("invalid value for required argument 'Hostname'")
	}
	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	if args.RelayId == nil {
		return nil, errors.New("invalid value for required argument 'RelayId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"sendKeyValue",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HybridConnection
	err := ctx.RegisterResource("azure:appservice/hybridConnection:HybridConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHybridConnection gets an existing HybridConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHybridConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HybridConnectionState, opts ...pulumi.ResourceOption) (*HybridConnection, error) {
	var resource HybridConnection
	err := ctx.ReadResource("azure:appservice/hybridConnection:HybridConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HybridConnection resources.
type hybridConnectionState struct {
	// Specifies the name of the App Service. Changing this forces a new resource to be created.
	AppServiceName *string `pulumi:"appServiceName"`
	// The hostname of the endpoint.
	Hostname *string `pulumi:"hostname"`
	// The name of the Relay Namespace.
	NamespaceName *string `pulumi:"namespaceName"`
	// The port of the endpoint.
	Port *int `pulumi:"port"`
	// The ID of the Service Bus Relay. Changing this forces a new resource to be created.
	RelayId   *string `pulumi:"relayId"`
	RelayName *string `pulumi:"relayName"`
	// The name of the resource group in which to create the App Service. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The name of the Service Bus key which has Send permissions. Defaults to `RootManageSharedAccessKey`.
	SendKeyName *string `pulumi:"sendKeyName"`
	// The value of the Service Bus Primary Access key.
	SendKeyValue *string `pulumi:"sendKeyValue"`
	// The name of the Service Bus namespace.
	ServiceBusNamespace *string `pulumi:"serviceBusNamespace"`
	// The suffix for the service bus endpoint.
	ServiceBusSuffix *string `pulumi:"serviceBusSuffix"`
}

type HybridConnectionState struct {
	// Specifies the name of the App Service. Changing this forces a new resource to be created.
	AppServiceName pulumi.StringPtrInput
	// The hostname of the endpoint.
	Hostname pulumi.StringPtrInput
	// The name of the Relay Namespace.
	NamespaceName pulumi.StringPtrInput
	// The port of the endpoint.
	Port pulumi.IntPtrInput
	// The ID of the Service Bus Relay. Changing this forces a new resource to be created.
	RelayId   pulumi.StringPtrInput
	RelayName pulumi.StringPtrInput
	// The name of the resource group in which to create the App Service. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The name of the Service Bus key which has Send permissions. Defaults to `RootManageSharedAccessKey`.
	SendKeyName pulumi.StringPtrInput
	// The value of the Service Bus Primary Access key.
	SendKeyValue pulumi.StringPtrInput
	// The name of the Service Bus namespace.
	ServiceBusNamespace pulumi.StringPtrInput
	// The suffix for the service bus endpoint.
	ServiceBusSuffix pulumi.StringPtrInput
}

func (HybridConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*hybridConnectionState)(nil)).Elem()
}

type hybridConnectionArgs struct {
	// Specifies the name of the App Service. Changing this forces a new resource to be created.
	AppServiceName string `pulumi:"appServiceName"`
	// The hostname of the endpoint.
	Hostname string `pulumi:"hostname"`
	// The port of the endpoint.
	Port int `pulumi:"port"`
	// The ID of the Service Bus Relay. Changing this forces a new resource to be created.
	RelayId string `pulumi:"relayId"`
	// The name of the resource group in which to create the App Service. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the Service Bus key which has Send permissions. Defaults to `RootManageSharedAccessKey`.
	SendKeyName *string `pulumi:"sendKeyName"`
}

// The set of arguments for constructing a HybridConnection resource.
type HybridConnectionArgs struct {
	// Specifies the name of the App Service. Changing this forces a new resource to be created.
	AppServiceName pulumi.StringInput
	// The hostname of the endpoint.
	Hostname pulumi.StringInput
	// The port of the endpoint.
	Port pulumi.IntInput
	// The ID of the Service Bus Relay. Changing this forces a new resource to be created.
	RelayId pulumi.StringInput
	// The name of the resource group in which to create the App Service. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// The name of the Service Bus key which has Send permissions. Defaults to `RootManageSharedAccessKey`.
	SendKeyName pulumi.StringPtrInput
}

func (HybridConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hybridConnectionArgs)(nil)).Elem()
}

type HybridConnectionInput interface {
	pulumi.Input

	ToHybridConnectionOutput() HybridConnectionOutput
	ToHybridConnectionOutputWithContext(ctx context.Context) HybridConnectionOutput
}

func (*HybridConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**HybridConnection)(nil)).Elem()
}

func (i *HybridConnection) ToHybridConnectionOutput() HybridConnectionOutput {
	return i.ToHybridConnectionOutputWithContext(context.Background())
}

func (i *HybridConnection) ToHybridConnectionOutputWithContext(ctx context.Context) HybridConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridConnectionOutput)
}

// HybridConnectionArrayInput is an input type that accepts HybridConnectionArray and HybridConnectionArrayOutput values.
// You can construct a concrete instance of `HybridConnectionArrayInput` via:
//
//	HybridConnectionArray{ HybridConnectionArgs{...} }
type HybridConnectionArrayInput interface {
	pulumi.Input

	ToHybridConnectionArrayOutput() HybridConnectionArrayOutput
	ToHybridConnectionArrayOutputWithContext(context.Context) HybridConnectionArrayOutput
}

type HybridConnectionArray []HybridConnectionInput

func (HybridConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HybridConnection)(nil)).Elem()
}

func (i HybridConnectionArray) ToHybridConnectionArrayOutput() HybridConnectionArrayOutput {
	return i.ToHybridConnectionArrayOutputWithContext(context.Background())
}

func (i HybridConnectionArray) ToHybridConnectionArrayOutputWithContext(ctx context.Context) HybridConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridConnectionArrayOutput)
}

// HybridConnectionMapInput is an input type that accepts HybridConnectionMap and HybridConnectionMapOutput values.
// You can construct a concrete instance of `HybridConnectionMapInput` via:
//
//	HybridConnectionMap{ "key": HybridConnectionArgs{...} }
type HybridConnectionMapInput interface {
	pulumi.Input

	ToHybridConnectionMapOutput() HybridConnectionMapOutput
	ToHybridConnectionMapOutputWithContext(context.Context) HybridConnectionMapOutput
}

type HybridConnectionMap map[string]HybridConnectionInput

func (HybridConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HybridConnection)(nil)).Elem()
}

func (i HybridConnectionMap) ToHybridConnectionMapOutput() HybridConnectionMapOutput {
	return i.ToHybridConnectionMapOutputWithContext(context.Background())
}

func (i HybridConnectionMap) ToHybridConnectionMapOutputWithContext(ctx context.Context) HybridConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridConnectionMapOutput)
}

type HybridConnectionOutput struct{ *pulumi.OutputState }

func (HybridConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HybridConnection)(nil)).Elem()
}

func (o HybridConnectionOutput) ToHybridConnectionOutput() HybridConnectionOutput {
	return o
}

func (o HybridConnectionOutput) ToHybridConnectionOutputWithContext(ctx context.Context) HybridConnectionOutput {
	return o
}

// Specifies the name of the App Service. Changing this forces a new resource to be created.
func (o HybridConnectionOutput) AppServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *HybridConnection) pulumi.StringOutput { return v.AppServiceName }).(pulumi.StringOutput)
}

// The hostname of the endpoint.
func (o HybridConnectionOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *HybridConnection) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

// The name of the Relay Namespace.
func (o HybridConnectionOutput) NamespaceName() pulumi.StringOutput {
	return o.ApplyT(func(v *HybridConnection) pulumi.StringOutput { return v.NamespaceName }).(pulumi.StringOutput)
}

// The port of the endpoint.
func (o HybridConnectionOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *HybridConnection) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// The ID of the Service Bus Relay. Changing this forces a new resource to be created.
func (o HybridConnectionOutput) RelayId() pulumi.StringOutput {
	return o.ApplyT(func(v *HybridConnection) pulumi.StringOutput { return v.RelayId }).(pulumi.StringOutput)
}

func (o HybridConnectionOutput) RelayName() pulumi.StringOutput {
	return o.ApplyT(func(v *HybridConnection) pulumi.StringOutput { return v.RelayName }).(pulumi.StringOutput)
}

// The name of the resource group in which to create the App Service. Changing this forces a new resource to be created.
func (o HybridConnectionOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *HybridConnection) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The name of the Service Bus key which has Send permissions. Defaults to `RootManageSharedAccessKey`.
func (o HybridConnectionOutput) SendKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HybridConnection) pulumi.StringPtrOutput { return v.SendKeyName }).(pulumi.StringPtrOutput)
}

// The value of the Service Bus Primary Access key.
func (o HybridConnectionOutput) SendKeyValue() pulumi.StringOutput {
	return o.ApplyT(func(v *HybridConnection) pulumi.StringOutput { return v.SendKeyValue }).(pulumi.StringOutput)
}

// The name of the Service Bus namespace.
func (o HybridConnectionOutput) ServiceBusNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v *HybridConnection) pulumi.StringOutput { return v.ServiceBusNamespace }).(pulumi.StringOutput)
}

// The suffix for the service bus endpoint.
func (o HybridConnectionOutput) ServiceBusSuffix() pulumi.StringOutput {
	return o.ApplyT(func(v *HybridConnection) pulumi.StringOutput { return v.ServiceBusSuffix }).(pulumi.StringOutput)
}

type HybridConnectionArrayOutput struct{ *pulumi.OutputState }

func (HybridConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HybridConnection)(nil)).Elem()
}

func (o HybridConnectionArrayOutput) ToHybridConnectionArrayOutput() HybridConnectionArrayOutput {
	return o
}

func (o HybridConnectionArrayOutput) ToHybridConnectionArrayOutputWithContext(ctx context.Context) HybridConnectionArrayOutput {
	return o
}

func (o HybridConnectionArrayOutput) Index(i pulumi.IntInput) HybridConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HybridConnection {
		return vs[0].([]*HybridConnection)[vs[1].(int)]
	}).(HybridConnectionOutput)
}

type HybridConnectionMapOutput struct{ *pulumi.OutputState }

func (HybridConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HybridConnection)(nil)).Elem()
}

func (o HybridConnectionMapOutput) ToHybridConnectionMapOutput() HybridConnectionMapOutput {
	return o
}

func (o HybridConnectionMapOutput) ToHybridConnectionMapOutputWithContext(ctx context.Context) HybridConnectionMapOutput {
	return o
}

func (o HybridConnectionMapOutput) MapIndex(k pulumi.StringInput) HybridConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HybridConnection {
		return vs[0].(map[string]*HybridConnection)[vs[1].(string)]
	}).(HybridConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HybridConnectionInput)(nil)).Elem(), &HybridConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*HybridConnectionArrayInput)(nil)).Elem(), HybridConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HybridConnectionMapInput)(nil)).Elem(), HybridConnectionMap{})
	pulumi.RegisterOutputType(HybridConnectionOutput{})
	pulumi.RegisterOutputType(HybridConnectionArrayOutput{})
	pulumi.RegisterOutputType(HybridConnectionMapOutput{})
}
