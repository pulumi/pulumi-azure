// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appservice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an App Service Certificate.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/appservice"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		example, err := appservice.LookupCertificate(ctx, &appservice.LookupCertificateArgs{
// 			Name:              "example-app-service-certificate",
// 			ResourceGroupName: "example-rg",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("appServiceCertificateId", example.Id)
// 		return nil
// 	})
// }
// ```
func LookupCertificate(ctx *pulumi.Context, args *LookupCertificateArgs, opts ...pulumi.InvokeOption) (*LookupCertificateResult, error) {
	var rv LookupCertificateResult
	err := ctx.Invoke("azure:appservice/getCertificate:getCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCertificate.
type LookupCertificateArgs struct {
	// Specifies the name of the certificate.
	Name string `pulumi:"name"`
	// The name of the resource group in which to create the certificate.
	ResourceGroupName string            `pulumi:"resourceGroupName"`
	Tags              map[string]string `pulumi:"tags"`
}

// A collection of values returned by getCertificate.
type LookupCertificateResult struct {
	// The expiration date for the certificate.
	ExpirationDate string `pulumi:"expirationDate"`
	// The friendly name of the certificate.
	FriendlyName string `pulumi:"friendlyName"`
	// List of host names the certificate applies to.
	HostNames []string `pulumi:"hostNames"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The issue date for the certificate.
	IssueDate string `pulumi:"issueDate"`
	// The name of the certificate issuer.
	Issuer            string `pulumi:"issuer"`
	Location          string `pulumi:"location"`
	Name              string `pulumi:"name"`
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The subject name of the certificate.
	SubjectName string            `pulumi:"subjectName"`
	Tags        map[string]string `pulumi:"tags"`
	// The thumbprint for the certificate.
	Thumbprint string `pulumi:"thumbprint"`
}

func LookupCertificateOutput(ctx *pulumi.Context, args LookupCertificateOutputArgs, opts ...pulumi.InvokeOption) LookupCertificateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCertificateResult, error) {
			args := v.(LookupCertificateArgs)
			r, err := LookupCertificate(ctx, &args, opts...)
			return *r, err
		}).(LookupCertificateResultOutput)
}

// A collection of arguments for invoking getCertificate.
type LookupCertificateOutputArgs struct {
	// Specifies the name of the certificate.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the resource group in which to create the certificate.
	ResourceGroupName pulumi.StringInput    `pulumi:"resourceGroupName"`
	Tags              pulumi.StringMapInput `pulumi:"tags"`
}

func (LookupCertificateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateArgs)(nil)).Elem()
}

// A collection of values returned by getCertificate.
type LookupCertificateResultOutput struct{ *pulumi.OutputState }

func (LookupCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateResult)(nil)).Elem()
}

func (o LookupCertificateResultOutput) ToLookupCertificateResultOutput() LookupCertificateResultOutput {
	return o
}

func (o LookupCertificateResultOutput) ToLookupCertificateResultOutputWithContext(ctx context.Context) LookupCertificateResultOutput {
	return o
}

// The expiration date for the certificate.
func (o LookupCertificateResultOutput) ExpirationDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.ExpirationDate }).(pulumi.StringOutput)
}

// The friendly name of the certificate.
func (o LookupCertificateResultOutput) FriendlyName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.FriendlyName }).(pulumi.StringOutput)
}

// List of host names the certificate applies to.
func (o LookupCertificateResultOutput) HostNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCertificateResult) []string { return v.HostNames }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupCertificateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.Id }).(pulumi.StringOutput)
}

// The issue date for the certificate.
func (o LookupCertificateResultOutput) IssueDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.IssueDate }).(pulumi.StringOutput)
}

// The name of the certificate issuer.
func (o LookupCertificateResultOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.Issuer }).(pulumi.StringOutput)
}

func (o LookupCertificateResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o LookupCertificateResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupCertificateResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The subject name of the certificate.
func (o LookupCertificateResultOutput) SubjectName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.SubjectName }).(pulumi.StringOutput)
}

func (o LookupCertificateResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupCertificateResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The thumbprint for the certificate.
func (o LookupCertificateResultOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.Thumbprint }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCertificateResultOutput{})
}
