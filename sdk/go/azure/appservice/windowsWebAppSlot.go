// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Windows Web App Slot.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/appservice"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleServicePlan, err := appservice.NewServicePlan(ctx, "exampleServicePlan", &appservice.ServicePlanArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				OsType:            pulumi.String("Windows"),
//				SkuName:           pulumi.String("P1v2"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleWindowsWebApp, err := appservice.NewWindowsWebApp(ctx, "exampleWindowsWebApp", &appservice.WindowsWebAppArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleServicePlan.Location,
//				ServicePlanId:     exampleServicePlan.ID(),
//				SiteConfig:        nil,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = appservice.NewWindowsWebAppSlot(ctx, "exampleWindowsWebAppSlot", &appservice.WindowsWebAppSlotArgs{
//				AppServiceId: exampleWindowsWebApp.ID(),
//				SiteConfig:   nil,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Windows Web Apps can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:appservice/windowsWebAppSlot:WindowsWebAppSlot example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/sites/site1/slots/slot1
//
// ```
type WindowsWebAppSlot struct {
	pulumi.CustomResourceState

	// The ID of the Windows Web App this Deployment Slot will be part of. Changing this forces a new Windows Web App to be created.
	AppServiceId pulumi.StringOutput `pulumi:"appServiceId"`
	// A map of key-value pairs of App Settings.
	AppSettings pulumi.StringMapOutput `pulumi:"appSettings"`
	// An `authSettings` block as defined below.
	AuthSettings WindowsWebAppSlotAuthSettingsPtrOutput `pulumi:"authSettings"`
	// An `authSettingsV2` block as defined below.
	AuthSettingsV2 WindowsWebAppSlotAuthSettingsV2PtrOutput `pulumi:"authSettingsV2"`
	// A `backup` block as defined below.
	Backup WindowsWebAppSlotBackupPtrOutput `pulumi:"backup"`
	// Should Client Affinity be enabled?
	ClientAffinityEnabled pulumi.BoolPtrOutput `pulumi:"clientAffinityEnabled"`
	// Should Client Certificates be enabled?
	ClientCertificateEnabled pulumi.BoolPtrOutput `pulumi:"clientCertificateEnabled"`
	// Paths to exclude when using client certificates, separated by ;
	ClientCertificateExclusionPaths pulumi.StringPtrOutput `pulumi:"clientCertificateExclusionPaths"`
	// The Client Certificate mode. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. This property has no effect when `clientCertEnabled` is `false`. Defaults to `Required`.
	ClientCertificateMode pulumi.StringPtrOutput `pulumi:"clientCertificateMode"`
	// One or more `connectionString` blocks as defined below.
	ConnectionStrings WindowsWebAppSlotConnectionStringArrayOutput `pulumi:"connectionStrings"`
	// The identifier used by App Service to perform domain ownership verification via DNS TXT record.
	CustomDomainVerificationId pulumi.StringOutput `pulumi:"customDomainVerificationId"`
	// The default hostname of the Windows Web App Slot.
	DefaultHostname pulumi.StringOutput `pulumi:"defaultHostname"`
	// Should the Windows Web App Slot be enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Should the default FTP Basic Authentication publishing profile be enabled. Defaults to `true`.
	FtpPublishBasicAuthenticationEnabled pulumi.BoolPtrOutput `pulumi:"ftpPublishBasicAuthenticationEnabled"`
	// The ID of the App Service Environment used by App Service Slot.
	HostingEnvironmentId pulumi.StringOutput `pulumi:"hostingEnvironmentId"`
	// Should the Windows Web App Slot require HTTPS connections.
	HttpsOnly pulumi.BoolPtrOutput `pulumi:"httpsOnly"`
	// An `identity` block as defined below.
	Identity WindowsWebAppSlotIdentityPtrOutput `pulumi:"identity"`
	// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity)
	KeyVaultReferenceIdentityId pulumi.StringOutput `pulumi:"keyVaultReferenceIdentityId"`
	// The Kind value for this Windows Web App Slot.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// A `logs` block as defined below.
	Logs WindowsWebAppSlotLogsPtrOutput `pulumi:"logs"`
	Name pulumi.StringOutput            `pulumi:"name"`
	// A list of outbound IP addresses - such as `["52.23.25.3", "52.143.43.12"]`
	OutboundIpAddressLists pulumi.StringArrayOutput `pulumi:"outboundIpAddressLists"`
	// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`.
	OutboundIpAddresses pulumi.StringOutput `pulumi:"outboundIpAddresses"`
	// A list of possible outbound ip address.
	PossibleOutboundIpAddressLists pulumi.StringArrayOutput `pulumi:"possibleOutboundIpAddressLists"`
	// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outboundIpAddresses`.
	PossibleOutboundIpAddresses pulumi.StringOutput `pulumi:"possibleOutboundIpAddresses"`
	// Should public network access be enabled for the Web App. Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrOutput `pulumi:"publicNetworkAccessEnabled"`
	// The ID of the Service Plan in which to run this slot. If not specified the same Service Plan as the Windows Web App will be used.
	//
	// > **Note:** `servicePlanId` should only be specified if it differs from the Service Plan of the associated Windows Web App.
	ServicePlanId pulumi.StringPtrOutput `pulumi:"servicePlanId"`
	// A `siteConfig` block as defined below.
	SiteConfig WindowsWebAppSlotSiteConfigOutput `pulumi:"siteConfig"`
	// A `siteCredential` block as defined below.
	SiteCredentials WindowsWebAppSlotSiteCredentialArrayOutput `pulumi:"siteCredentials"`
	// One or more `storageAccount` blocks as defined below.
	//
	// > **Note:** Using this value requires `WEBSITE_RUN_FROM_PACKAGE=1` to be set on the App in `appSettings`. Refer to the [Azure docs](https://docs.microsoft.com/en-us/azure/app-service/deploy-run-package) for further details.
	StorageAccounts WindowsWebAppSlotStorageAccountArrayOutput `pulumi:"storageAccounts"`
	// A mapping of tags which should be assigned to the Windows Web App Slot.
	Tags                   pulumi.StringMapOutput `pulumi:"tags"`
	VirtualNetworkSubnetId pulumi.StringPtrOutput `pulumi:"virtualNetworkSubnetId"`
	// Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to`true`.
	//
	// > **NOTE:** Setting this value to true will disable the ability to use `zipDeployFile` which currently relies on the default publishing profile.
	WebdeployPublishBasicAuthenticationEnabled pulumi.BoolPtrOutput `pulumi:"webdeployPublishBasicAuthenticationEnabled"`
	// The local path and filename of the Zip packaged application to deploy to this Windows Web App.
	ZipDeployFile pulumi.StringOutput `pulumi:"zipDeployFile"`
}

// NewWindowsWebAppSlot registers a new resource with the given unique name, arguments, and options.
func NewWindowsWebAppSlot(ctx *pulumi.Context,
	name string, args *WindowsWebAppSlotArgs, opts ...pulumi.ResourceOption) (*WindowsWebAppSlot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppServiceId == nil {
		return nil, errors.New("invalid value for required argument 'AppServiceId'")
	}
	if args.SiteConfig == nil {
		return nil, errors.New("invalid value for required argument 'SiteConfig'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"customDomainVerificationId",
		"siteCredentials",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WindowsWebAppSlot
	err := ctx.RegisterResource("azure:appservice/windowsWebAppSlot:WindowsWebAppSlot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWindowsWebAppSlot gets an existing WindowsWebAppSlot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWindowsWebAppSlot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WindowsWebAppSlotState, opts ...pulumi.ResourceOption) (*WindowsWebAppSlot, error) {
	var resource WindowsWebAppSlot
	err := ctx.ReadResource("azure:appservice/windowsWebAppSlot:WindowsWebAppSlot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WindowsWebAppSlot resources.
type windowsWebAppSlotState struct {
	// The ID of the Windows Web App this Deployment Slot will be part of. Changing this forces a new Windows Web App to be created.
	AppServiceId *string `pulumi:"appServiceId"`
	// A map of key-value pairs of App Settings.
	AppSettings map[string]string `pulumi:"appSettings"`
	// An `authSettings` block as defined below.
	AuthSettings *WindowsWebAppSlotAuthSettings `pulumi:"authSettings"`
	// An `authSettingsV2` block as defined below.
	AuthSettingsV2 *WindowsWebAppSlotAuthSettingsV2 `pulumi:"authSettingsV2"`
	// A `backup` block as defined below.
	Backup *WindowsWebAppSlotBackup `pulumi:"backup"`
	// Should Client Affinity be enabled?
	ClientAffinityEnabled *bool `pulumi:"clientAffinityEnabled"`
	// Should Client Certificates be enabled?
	ClientCertificateEnabled *bool `pulumi:"clientCertificateEnabled"`
	// Paths to exclude when using client certificates, separated by ;
	ClientCertificateExclusionPaths *string `pulumi:"clientCertificateExclusionPaths"`
	// The Client Certificate mode. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. This property has no effect when `clientCertEnabled` is `false`. Defaults to `Required`.
	ClientCertificateMode *string `pulumi:"clientCertificateMode"`
	// One or more `connectionString` blocks as defined below.
	ConnectionStrings []WindowsWebAppSlotConnectionString `pulumi:"connectionStrings"`
	// The identifier used by App Service to perform domain ownership verification via DNS TXT record.
	CustomDomainVerificationId *string `pulumi:"customDomainVerificationId"`
	// The default hostname of the Windows Web App Slot.
	DefaultHostname *string `pulumi:"defaultHostname"`
	// Should the Windows Web App Slot be enabled? Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Should the default FTP Basic Authentication publishing profile be enabled. Defaults to `true`.
	FtpPublishBasicAuthenticationEnabled *bool `pulumi:"ftpPublishBasicAuthenticationEnabled"`
	// The ID of the App Service Environment used by App Service Slot.
	HostingEnvironmentId *string `pulumi:"hostingEnvironmentId"`
	// Should the Windows Web App Slot require HTTPS connections.
	HttpsOnly *bool `pulumi:"httpsOnly"`
	// An `identity` block as defined below.
	Identity *WindowsWebAppSlotIdentity `pulumi:"identity"`
	// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity)
	KeyVaultReferenceIdentityId *string `pulumi:"keyVaultReferenceIdentityId"`
	// The Kind value for this Windows Web App Slot.
	Kind *string `pulumi:"kind"`
	// A `logs` block as defined below.
	Logs *WindowsWebAppSlotLogs `pulumi:"logs"`
	Name *string                `pulumi:"name"`
	// A list of outbound IP addresses - such as `["52.23.25.3", "52.143.43.12"]`
	OutboundIpAddressLists []string `pulumi:"outboundIpAddressLists"`
	// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`.
	OutboundIpAddresses *string `pulumi:"outboundIpAddresses"`
	// A list of possible outbound ip address.
	PossibleOutboundIpAddressLists []string `pulumi:"possibleOutboundIpAddressLists"`
	// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outboundIpAddresses`.
	PossibleOutboundIpAddresses *string `pulumi:"possibleOutboundIpAddresses"`
	// Should public network access be enabled for the Web App. Defaults to `true`.
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// The ID of the Service Plan in which to run this slot. If not specified the same Service Plan as the Windows Web App will be used.
	//
	// > **Note:** `servicePlanId` should only be specified if it differs from the Service Plan of the associated Windows Web App.
	ServicePlanId *string `pulumi:"servicePlanId"`
	// A `siteConfig` block as defined below.
	SiteConfig *WindowsWebAppSlotSiteConfig `pulumi:"siteConfig"`
	// A `siteCredential` block as defined below.
	SiteCredentials []WindowsWebAppSlotSiteCredential `pulumi:"siteCredentials"`
	// One or more `storageAccount` blocks as defined below.
	//
	// > **Note:** Using this value requires `WEBSITE_RUN_FROM_PACKAGE=1` to be set on the App in `appSettings`. Refer to the [Azure docs](https://docs.microsoft.com/en-us/azure/app-service/deploy-run-package) for further details.
	StorageAccounts []WindowsWebAppSlotStorageAccount `pulumi:"storageAccounts"`
	// A mapping of tags which should be assigned to the Windows Web App Slot.
	Tags                   map[string]string `pulumi:"tags"`
	VirtualNetworkSubnetId *string           `pulumi:"virtualNetworkSubnetId"`
	// Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to`true`.
	//
	// > **NOTE:** Setting this value to true will disable the ability to use `zipDeployFile` which currently relies on the default publishing profile.
	WebdeployPublishBasicAuthenticationEnabled *bool `pulumi:"webdeployPublishBasicAuthenticationEnabled"`
	// The local path and filename of the Zip packaged application to deploy to this Windows Web App.
	ZipDeployFile *string `pulumi:"zipDeployFile"`
}

type WindowsWebAppSlotState struct {
	// The ID of the Windows Web App this Deployment Slot will be part of. Changing this forces a new Windows Web App to be created.
	AppServiceId pulumi.StringPtrInput
	// A map of key-value pairs of App Settings.
	AppSettings pulumi.StringMapInput
	// An `authSettings` block as defined below.
	AuthSettings WindowsWebAppSlotAuthSettingsPtrInput
	// An `authSettingsV2` block as defined below.
	AuthSettingsV2 WindowsWebAppSlotAuthSettingsV2PtrInput
	// A `backup` block as defined below.
	Backup WindowsWebAppSlotBackupPtrInput
	// Should Client Affinity be enabled?
	ClientAffinityEnabled pulumi.BoolPtrInput
	// Should Client Certificates be enabled?
	ClientCertificateEnabled pulumi.BoolPtrInput
	// Paths to exclude when using client certificates, separated by ;
	ClientCertificateExclusionPaths pulumi.StringPtrInput
	// The Client Certificate mode. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. This property has no effect when `clientCertEnabled` is `false`. Defaults to `Required`.
	ClientCertificateMode pulumi.StringPtrInput
	// One or more `connectionString` blocks as defined below.
	ConnectionStrings WindowsWebAppSlotConnectionStringArrayInput
	// The identifier used by App Service to perform domain ownership verification via DNS TXT record.
	CustomDomainVerificationId pulumi.StringPtrInput
	// The default hostname of the Windows Web App Slot.
	DefaultHostname pulumi.StringPtrInput
	// Should the Windows Web App Slot be enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// Should the default FTP Basic Authentication publishing profile be enabled. Defaults to `true`.
	FtpPublishBasicAuthenticationEnabled pulumi.BoolPtrInput
	// The ID of the App Service Environment used by App Service Slot.
	HostingEnvironmentId pulumi.StringPtrInput
	// Should the Windows Web App Slot require HTTPS connections.
	HttpsOnly pulumi.BoolPtrInput
	// An `identity` block as defined below.
	Identity WindowsWebAppSlotIdentityPtrInput
	// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity)
	KeyVaultReferenceIdentityId pulumi.StringPtrInput
	// The Kind value for this Windows Web App Slot.
	Kind pulumi.StringPtrInput
	// A `logs` block as defined below.
	Logs WindowsWebAppSlotLogsPtrInput
	Name pulumi.StringPtrInput
	// A list of outbound IP addresses - such as `["52.23.25.3", "52.143.43.12"]`
	OutboundIpAddressLists pulumi.StringArrayInput
	// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`.
	OutboundIpAddresses pulumi.StringPtrInput
	// A list of possible outbound ip address.
	PossibleOutboundIpAddressLists pulumi.StringArrayInput
	// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outboundIpAddresses`.
	PossibleOutboundIpAddresses pulumi.StringPtrInput
	// Should public network access be enabled for the Web App. Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// The ID of the Service Plan in which to run this slot. If not specified the same Service Plan as the Windows Web App will be used.
	//
	// > **Note:** `servicePlanId` should only be specified if it differs from the Service Plan of the associated Windows Web App.
	ServicePlanId pulumi.StringPtrInput
	// A `siteConfig` block as defined below.
	SiteConfig WindowsWebAppSlotSiteConfigPtrInput
	// A `siteCredential` block as defined below.
	SiteCredentials WindowsWebAppSlotSiteCredentialArrayInput
	// One or more `storageAccount` blocks as defined below.
	//
	// > **Note:** Using this value requires `WEBSITE_RUN_FROM_PACKAGE=1` to be set on the App in `appSettings`. Refer to the [Azure docs](https://docs.microsoft.com/en-us/azure/app-service/deploy-run-package) for further details.
	StorageAccounts WindowsWebAppSlotStorageAccountArrayInput
	// A mapping of tags which should be assigned to the Windows Web App Slot.
	Tags                   pulumi.StringMapInput
	VirtualNetworkSubnetId pulumi.StringPtrInput
	// Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to`true`.
	//
	// > **NOTE:** Setting this value to true will disable the ability to use `zipDeployFile` which currently relies on the default publishing profile.
	WebdeployPublishBasicAuthenticationEnabled pulumi.BoolPtrInput
	// The local path and filename of the Zip packaged application to deploy to this Windows Web App.
	ZipDeployFile pulumi.StringPtrInput
}

func (WindowsWebAppSlotState) ElementType() reflect.Type {
	return reflect.TypeOf((*windowsWebAppSlotState)(nil)).Elem()
}

type windowsWebAppSlotArgs struct {
	// The ID of the Windows Web App this Deployment Slot will be part of. Changing this forces a new Windows Web App to be created.
	AppServiceId string `pulumi:"appServiceId"`
	// A map of key-value pairs of App Settings.
	AppSettings map[string]string `pulumi:"appSettings"`
	// An `authSettings` block as defined below.
	AuthSettings *WindowsWebAppSlotAuthSettings `pulumi:"authSettings"`
	// An `authSettingsV2` block as defined below.
	AuthSettingsV2 *WindowsWebAppSlotAuthSettingsV2 `pulumi:"authSettingsV2"`
	// A `backup` block as defined below.
	Backup *WindowsWebAppSlotBackup `pulumi:"backup"`
	// Should Client Affinity be enabled?
	ClientAffinityEnabled *bool `pulumi:"clientAffinityEnabled"`
	// Should Client Certificates be enabled?
	ClientCertificateEnabled *bool `pulumi:"clientCertificateEnabled"`
	// Paths to exclude when using client certificates, separated by ;
	ClientCertificateExclusionPaths *string `pulumi:"clientCertificateExclusionPaths"`
	// The Client Certificate mode. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. This property has no effect when `clientCertEnabled` is `false`. Defaults to `Required`.
	ClientCertificateMode *string `pulumi:"clientCertificateMode"`
	// One or more `connectionString` blocks as defined below.
	ConnectionStrings []WindowsWebAppSlotConnectionString `pulumi:"connectionStrings"`
	// Should the Windows Web App Slot be enabled? Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Should the default FTP Basic Authentication publishing profile be enabled. Defaults to `true`.
	FtpPublishBasicAuthenticationEnabled *bool `pulumi:"ftpPublishBasicAuthenticationEnabled"`
	// Should the Windows Web App Slot require HTTPS connections.
	HttpsOnly *bool `pulumi:"httpsOnly"`
	// An `identity` block as defined below.
	Identity *WindowsWebAppSlotIdentity `pulumi:"identity"`
	// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity)
	KeyVaultReferenceIdentityId *string `pulumi:"keyVaultReferenceIdentityId"`
	// A `logs` block as defined below.
	Logs *WindowsWebAppSlotLogs `pulumi:"logs"`
	Name *string                `pulumi:"name"`
	// Should public network access be enabled for the Web App. Defaults to `true`.
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// The ID of the Service Plan in which to run this slot. If not specified the same Service Plan as the Windows Web App will be used.
	//
	// > **Note:** `servicePlanId` should only be specified if it differs from the Service Plan of the associated Windows Web App.
	ServicePlanId *string `pulumi:"servicePlanId"`
	// A `siteConfig` block as defined below.
	SiteConfig WindowsWebAppSlotSiteConfig `pulumi:"siteConfig"`
	// One or more `storageAccount` blocks as defined below.
	//
	// > **Note:** Using this value requires `WEBSITE_RUN_FROM_PACKAGE=1` to be set on the App in `appSettings`. Refer to the [Azure docs](https://docs.microsoft.com/en-us/azure/app-service/deploy-run-package) for further details.
	StorageAccounts []WindowsWebAppSlotStorageAccount `pulumi:"storageAccounts"`
	// A mapping of tags which should be assigned to the Windows Web App Slot.
	Tags                   map[string]string `pulumi:"tags"`
	VirtualNetworkSubnetId *string           `pulumi:"virtualNetworkSubnetId"`
	// Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to`true`.
	//
	// > **NOTE:** Setting this value to true will disable the ability to use `zipDeployFile` which currently relies on the default publishing profile.
	WebdeployPublishBasicAuthenticationEnabled *bool `pulumi:"webdeployPublishBasicAuthenticationEnabled"`
	// The local path and filename of the Zip packaged application to deploy to this Windows Web App.
	ZipDeployFile *string `pulumi:"zipDeployFile"`
}

// The set of arguments for constructing a WindowsWebAppSlot resource.
type WindowsWebAppSlotArgs struct {
	// The ID of the Windows Web App this Deployment Slot will be part of. Changing this forces a new Windows Web App to be created.
	AppServiceId pulumi.StringInput
	// A map of key-value pairs of App Settings.
	AppSettings pulumi.StringMapInput
	// An `authSettings` block as defined below.
	AuthSettings WindowsWebAppSlotAuthSettingsPtrInput
	// An `authSettingsV2` block as defined below.
	AuthSettingsV2 WindowsWebAppSlotAuthSettingsV2PtrInput
	// A `backup` block as defined below.
	Backup WindowsWebAppSlotBackupPtrInput
	// Should Client Affinity be enabled?
	ClientAffinityEnabled pulumi.BoolPtrInput
	// Should Client Certificates be enabled?
	ClientCertificateEnabled pulumi.BoolPtrInput
	// Paths to exclude when using client certificates, separated by ;
	ClientCertificateExclusionPaths pulumi.StringPtrInput
	// The Client Certificate mode. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. This property has no effect when `clientCertEnabled` is `false`. Defaults to `Required`.
	ClientCertificateMode pulumi.StringPtrInput
	// One or more `connectionString` blocks as defined below.
	ConnectionStrings WindowsWebAppSlotConnectionStringArrayInput
	// Should the Windows Web App Slot be enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// Should the default FTP Basic Authentication publishing profile be enabled. Defaults to `true`.
	FtpPublishBasicAuthenticationEnabled pulumi.BoolPtrInput
	// Should the Windows Web App Slot require HTTPS connections.
	HttpsOnly pulumi.BoolPtrInput
	// An `identity` block as defined below.
	Identity WindowsWebAppSlotIdentityPtrInput
	// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity)
	KeyVaultReferenceIdentityId pulumi.StringPtrInput
	// A `logs` block as defined below.
	Logs WindowsWebAppSlotLogsPtrInput
	Name pulumi.StringPtrInput
	// Should public network access be enabled for the Web App. Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// The ID of the Service Plan in which to run this slot. If not specified the same Service Plan as the Windows Web App will be used.
	//
	// > **Note:** `servicePlanId` should only be specified if it differs from the Service Plan of the associated Windows Web App.
	ServicePlanId pulumi.StringPtrInput
	// A `siteConfig` block as defined below.
	SiteConfig WindowsWebAppSlotSiteConfigInput
	// One or more `storageAccount` blocks as defined below.
	//
	// > **Note:** Using this value requires `WEBSITE_RUN_FROM_PACKAGE=1` to be set on the App in `appSettings`. Refer to the [Azure docs](https://docs.microsoft.com/en-us/azure/app-service/deploy-run-package) for further details.
	StorageAccounts WindowsWebAppSlotStorageAccountArrayInput
	// A mapping of tags which should be assigned to the Windows Web App Slot.
	Tags                   pulumi.StringMapInput
	VirtualNetworkSubnetId pulumi.StringPtrInput
	// Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to`true`.
	//
	// > **NOTE:** Setting this value to true will disable the ability to use `zipDeployFile` which currently relies on the default publishing profile.
	WebdeployPublishBasicAuthenticationEnabled pulumi.BoolPtrInput
	// The local path and filename of the Zip packaged application to deploy to this Windows Web App.
	ZipDeployFile pulumi.StringPtrInput
}

func (WindowsWebAppSlotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*windowsWebAppSlotArgs)(nil)).Elem()
}

type WindowsWebAppSlotInput interface {
	pulumi.Input

	ToWindowsWebAppSlotOutput() WindowsWebAppSlotOutput
	ToWindowsWebAppSlotOutputWithContext(ctx context.Context) WindowsWebAppSlotOutput
}

func (*WindowsWebAppSlot) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsWebAppSlot)(nil)).Elem()
}

func (i *WindowsWebAppSlot) ToWindowsWebAppSlotOutput() WindowsWebAppSlotOutput {
	return i.ToWindowsWebAppSlotOutputWithContext(context.Background())
}

func (i *WindowsWebAppSlot) ToWindowsWebAppSlotOutputWithContext(ctx context.Context) WindowsWebAppSlotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsWebAppSlotOutput)
}

// WindowsWebAppSlotArrayInput is an input type that accepts WindowsWebAppSlotArray and WindowsWebAppSlotArrayOutput values.
// You can construct a concrete instance of `WindowsWebAppSlotArrayInput` via:
//
//	WindowsWebAppSlotArray{ WindowsWebAppSlotArgs{...} }
type WindowsWebAppSlotArrayInput interface {
	pulumi.Input

	ToWindowsWebAppSlotArrayOutput() WindowsWebAppSlotArrayOutput
	ToWindowsWebAppSlotArrayOutputWithContext(context.Context) WindowsWebAppSlotArrayOutput
}

type WindowsWebAppSlotArray []WindowsWebAppSlotInput

func (WindowsWebAppSlotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WindowsWebAppSlot)(nil)).Elem()
}

func (i WindowsWebAppSlotArray) ToWindowsWebAppSlotArrayOutput() WindowsWebAppSlotArrayOutput {
	return i.ToWindowsWebAppSlotArrayOutputWithContext(context.Background())
}

func (i WindowsWebAppSlotArray) ToWindowsWebAppSlotArrayOutputWithContext(ctx context.Context) WindowsWebAppSlotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsWebAppSlotArrayOutput)
}

// WindowsWebAppSlotMapInput is an input type that accepts WindowsWebAppSlotMap and WindowsWebAppSlotMapOutput values.
// You can construct a concrete instance of `WindowsWebAppSlotMapInput` via:
//
//	WindowsWebAppSlotMap{ "key": WindowsWebAppSlotArgs{...} }
type WindowsWebAppSlotMapInput interface {
	pulumi.Input

	ToWindowsWebAppSlotMapOutput() WindowsWebAppSlotMapOutput
	ToWindowsWebAppSlotMapOutputWithContext(context.Context) WindowsWebAppSlotMapOutput
}

type WindowsWebAppSlotMap map[string]WindowsWebAppSlotInput

func (WindowsWebAppSlotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WindowsWebAppSlot)(nil)).Elem()
}

func (i WindowsWebAppSlotMap) ToWindowsWebAppSlotMapOutput() WindowsWebAppSlotMapOutput {
	return i.ToWindowsWebAppSlotMapOutputWithContext(context.Background())
}

func (i WindowsWebAppSlotMap) ToWindowsWebAppSlotMapOutputWithContext(ctx context.Context) WindowsWebAppSlotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsWebAppSlotMapOutput)
}

type WindowsWebAppSlotOutput struct{ *pulumi.OutputState }

func (WindowsWebAppSlotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsWebAppSlot)(nil)).Elem()
}

func (o WindowsWebAppSlotOutput) ToWindowsWebAppSlotOutput() WindowsWebAppSlotOutput {
	return o
}

func (o WindowsWebAppSlotOutput) ToWindowsWebAppSlotOutputWithContext(ctx context.Context) WindowsWebAppSlotOutput {
	return o
}

// The ID of the Windows Web App this Deployment Slot will be part of. Changing this forces a new Windows Web App to be created.
func (o WindowsWebAppSlotOutput) AppServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsWebAppSlot) pulumi.StringOutput { return v.AppServiceId }).(pulumi.StringOutput)
}

// A map of key-value pairs of App Settings.
func (o WindowsWebAppSlotOutput) AppSettings() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WindowsWebAppSlot) pulumi.StringMapOutput { return v.AppSettings }).(pulumi.StringMapOutput)
}

// An `authSettings` block as defined below.
func (o WindowsWebAppSlotOutput) AuthSettings() WindowsWebAppSlotAuthSettingsPtrOutput {
	return o.ApplyT(func(v *WindowsWebAppSlot) WindowsWebAppSlotAuthSettingsPtrOutput { return v.AuthSettings }).(WindowsWebAppSlotAuthSettingsPtrOutput)
}

// An `authSettingsV2` block as defined below.
func (o WindowsWebAppSlotOutput) AuthSettingsV2() WindowsWebAppSlotAuthSettingsV2PtrOutput {
	return o.ApplyT(func(v *WindowsWebAppSlot) WindowsWebAppSlotAuthSettingsV2PtrOutput { return v.AuthSettingsV2 }).(WindowsWebAppSlotAuthSettingsV2PtrOutput)
}

// A `backup` block as defined below.
func (o WindowsWebAppSlotOutput) Backup() WindowsWebAppSlotBackupPtrOutput {
	return o.ApplyT(func(v *WindowsWebAppSlot) WindowsWebAppSlotBackupPtrOutput { return v.Backup }).(WindowsWebAppSlotBackupPtrOutput)
}

// Should Client Affinity be enabled?
func (o WindowsWebAppSlotOutput) ClientAffinityEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsWebAppSlot) pulumi.BoolPtrOutput { return v.ClientAffinityEnabled }).(pulumi.BoolPtrOutput)
}

// Should Client Certificates be enabled?
func (o WindowsWebAppSlotOutput) ClientCertificateEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsWebAppSlot) pulumi.BoolPtrOutput { return v.ClientCertificateEnabled }).(pulumi.BoolPtrOutput)
}

// Paths to exclude when using client certificates, separated by ;
func (o WindowsWebAppSlotOutput) ClientCertificateExclusionPaths() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsWebAppSlot) pulumi.StringPtrOutput { return v.ClientCertificateExclusionPaths }).(pulumi.StringPtrOutput)
}

// The Client Certificate mode. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. This property has no effect when `clientCertEnabled` is `false`. Defaults to `Required`.
func (o WindowsWebAppSlotOutput) ClientCertificateMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsWebAppSlot) pulumi.StringPtrOutput { return v.ClientCertificateMode }).(pulumi.StringPtrOutput)
}

// One or more `connectionString` blocks as defined below.
func (o WindowsWebAppSlotOutput) ConnectionStrings() WindowsWebAppSlotConnectionStringArrayOutput {
	return o.ApplyT(func(v *WindowsWebAppSlot) WindowsWebAppSlotConnectionStringArrayOutput { return v.ConnectionStrings }).(WindowsWebAppSlotConnectionStringArrayOutput)
}

// The identifier used by App Service to perform domain ownership verification via DNS TXT record.
func (o WindowsWebAppSlotOutput) CustomDomainVerificationId() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsWebAppSlot) pulumi.StringOutput { return v.CustomDomainVerificationId }).(pulumi.StringOutput)
}

// The default hostname of the Windows Web App Slot.
func (o WindowsWebAppSlotOutput) DefaultHostname() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsWebAppSlot) pulumi.StringOutput { return v.DefaultHostname }).(pulumi.StringOutput)
}

// Should the Windows Web App Slot be enabled? Defaults to `true`.
func (o WindowsWebAppSlotOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsWebAppSlot) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Should the default FTP Basic Authentication publishing profile be enabled. Defaults to `true`.
func (o WindowsWebAppSlotOutput) FtpPublishBasicAuthenticationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsWebAppSlot) pulumi.BoolPtrOutput { return v.FtpPublishBasicAuthenticationEnabled }).(pulumi.BoolPtrOutput)
}

// The ID of the App Service Environment used by App Service Slot.
func (o WindowsWebAppSlotOutput) HostingEnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsWebAppSlot) pulumi.StringOutput { return v.HostingEnvironmentId }).(pulumi.StringOutput)
}

// Should the Windows Web App Slot require HTTPS connections.
func (o WindowsWebAppSlotOutput) HttpsOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsWebAppSlot) pulumi.BoolPtrOutput { return v.HttpsOnly }).(pulumi.BoolPtrOutput)
}

// An `identity` block as defined below.
func (o WindowsWebAppSlotOutput) Identity() WindowsWebAppSlotIdentityPtrOutput {
	return o.ApplyT(func(v *WindowsWebAppSlot) WindowsWebAppSlotIdentityPtrOutput { return v.Identity }).(WindowsWebAppSlotIdentityPtrOutput)
}

// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity)
func (o WindowsWebAppSlotOutput) KeyVaultReferenceIdentityId() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsWebAppSlot) pulumi.StringOutput { return v.KeyVaultReferenceIdentityId }).(pulumi.StringOutput)
}

// The Kind value for this Windows Web App Slot.
func (o WindowsWebAppSlotOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsWebAppSlot) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// A `logs` block as defined below.
func (o WindowsWebAppSlotOutput) Logs() WindowsWebAppSlotLogsPtrOutput {
	return o.ApplyT(func(v *WindowsWebAppSlot) WindowsWebAppSlotLogsPtrOutput { return v.Logs }).(WindowsWebAppSlotLogsPtrOutput)
}

func (o WindowsWebAppSlotOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsWebAppSlot) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of outbound IP addresses - such as `["52.23.25.3", "52.143.43.12"]`
func (o WindowsWebAppSlotOutput) OutboundIpAddressLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WindowsWebAppSlot) pulumi.StringArrayOutput { return v.OutboundIpAddressLists }).(pulumi.StringArrayOutput)
}

// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`.
func (o WindowsWebAppSlotOutput) OutboundIpAddresses() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsWebAppSlot) pulumi.StringOutput { return v.OutboundIpAddresses }).(pulumi.StringOutput)
}

// A list of possible outbound ip address.
func (o WindowsWebAppSlotOutput) PossibleOutboundIpAddressLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WindowsWebAppSlot) pulumi.StringArrayOutput { return v.PossibleOutboundIpAddressLists }).(pulumi.StringArrayOutput)
}

// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outboundIpAddresses`.
func (o WindowsWebAppSlotOutput) PossibleOutboundIpAddresses() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsWebAppSlot) pulumi.StringOutput { return v.PossibleOutboundIpAddresses }).(pulumi.StringOutput)
}

// Should public network access be enabled for the Web App. Defaults to `true`.
func (o WindowsWebAppSlotOutput) PublicNetworkAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsWebAppSlot) pulumi.BoolPtrOutput { return v.PublicNetworkAccessEnabled }).(pulumi.BoolPtrOutput)
}

// The ID of the Service Plan in which to run this slot. If not specified the same Service Plan as the Windows Web App will be used.
//
// > **Note:** `servicePlanId` should only be specified if it differs from the Service Plan of the associated Windows Web App.
func (o WindowsWebAppSlotOutput) ServicePlanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsWebAppSlot) pulumi.StringPtrOutput { return v.ServicePlanId }).(pulumi.StringPtrOutput)
}

// A `siteConfig` block as defined below.
func (o WindowsWebAppSlotOutput) SiteConfig() WindowsWebAppSlotSiteConfigOutput {
	return o.ApplyT(func(v *WindowsWebAppSlot) WindowsWebAppSlotSiteConfigOutput { return v.SiteConfig }).(WindowsWebAppSlotSiteConfigOutput)
}

// A `siteCredential` block as defined below.
func (o WindowsWebAppSlotOutput) SiteCredentials() WindowsWebAppSlotSiteCredentialArrayOutput {
	return o.ApplyT(func(v *WindowsWebAppSlot) WindowsWebAppSlotSiteCredentialArrayOutput { return v.SiteCredentials }).(WindowsWebAppSlotSiteCredentialArrayOutput)
}

// One or more `storageAccount` blocks as defined below.
//
// > **Note:** Using this value requires `WEBSITE_RUN_FROM_PACKAGE=1` to be set on the App in `appSettings`. Refer to the [Azure docs](https://docs.microsoft.com/en-us/azure/app-service/deploy-run-package) for further details.
func (o WindowsWebAppSlotOutput) StorageAccounts() WindowsWebAppSlotStorageAccountArrayOutput {
	return o.ApplyT(func(v *WindowsWebAppSlot) WindowsWebAppSlotStorageAccountArrayOutput { return v.StorageAccounts }).(WindowsWebAppSlotStorageAccountArrayOutput)
}

// A mapping of tags which should be assigned to the Windows Web App Slot.
func (o WindowsWebAppSlotOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WindowsWebAppSlot) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o WindowsWebAppSlotOutput) VirtualNetworkSubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsWebAppSlot) pulumi.StringPtrOutput { return v.VirtualNetworkSubnetId }).(pulumi.StringPtrOutput)
}

// Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to`true`.
//
// > **NOTE:** Setting this value to true will disable the ability to use `zipDeployFile` which currently relies on the default publishing profile.
func (o WindowsWebAppSlotOutput) WebdeployPublishBasicAuthenticationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsWebAppSlot) pulumi.BoolPtrOutput { return v.WebdeployPublishBasicAuthenticationEnabled }).(pulumi.BoolPtrOutput)
}

// The local path and filename of the Zip packaged application to deploy to this Windows Web App.
func (o WindowsWebAppSlotOutput) ZipDeployFile() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsWebAppSlot) pulumi.StringOutput { return v.ZipDeployFile }).(pulumi.StringOutput)
}

type WindowsWebAppSlotArrayOutput struct{ *pulumi.OutputState }

func (WindowsWebAppSlotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WindowsWebAppSlot)(nil)).Elem()
}

func (o WindowsWebAppSlotArrayOutput) ToWindowsWebAppSlotArrayOutput() WindowsWebAppSlotArrayOutput {
	return o
}

func (o WindowsWebAppSlotArrayOutput) ToWindowsWebAppSlotArrayOutputWithContext(ctx context.Context) WindowsWebAppSlotArrayOutput {
	return o
}

func (o WindowsWebAppSlotArrayOutput) Index(i pulumi.IntInput) WindowsWebAppSlotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WindowsWebAppSlot {
		return vs[0].([]*WindowsWebAppSlot)[vs[1].(int)]
	}).(WindowsWebAppSlotOutput)
}

type WindowsWebAppSlotMapOutput struct{ *pulumi.OutputState }

func (WindowsWebAppSlotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WindowsWebAppSlot)(nil)).Elem()
}

func (o WindowsWebAppSlotMapOutput) ToWindowsWebAppSlotMapOutput() WindowsWebAppSlotMapOutput {
	return o
}

func (o WindowsWebAppSlotMapOutput) ToWindowsWebAppSlotMapOutputWithContext(ctx context.Context) WindowsWebAppSlotMapOutput {
	return o
}

func (o WindowsWebAppSlotMapOutput) MapIndex(k pulumi.StringInput) WindowsWebAppSlotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WindowsWebAppSlot {
		return vs[0].(map[string]*WindowsWebAppSlot)[vs[1].(string)]
	}).(WindowsWebAppSlotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WindowsWebAppSlotInput)(nil)).Elem(), &WindowsWebAppSlot{})
	pulumi.RegisterInputType(reflect.TypeOf((*WindowsWebAppSlotArrayInput)(nil)).Elem(), WindowsWebAppSlotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WindowsWebAppSlotMapInput)(nil)).Elem(), WindowsWebAppSlotMap{})
	pulumi.RegisterOutputType(WindowsWebAppSlotOutput{})
	pulumi.RegisterOutputType(WindowsWebAppSlotArrayOutput{})
	pulumi.RegisterOutputType(WindowsWebAppSlotMapOutput{})
}
