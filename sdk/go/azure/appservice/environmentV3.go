// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// ## Import
//
// A 3rd Generation (v3) App Service Environment can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:appservice/environmentV3:EnvironmentV3 myAppServiceEnv /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Web/hostingEnvironments/myAppServiceEnv
//
// ```
type EnvironmentV3 struct {
	pulumi.CustomResourceState

	// Should new Private Endpoint Connections be allowed. Defaults to `true`.
	AllowNewPrivateEndpointConnections pulumi.BoolPtrOutput `pulumi:"allowNewPrivateEndpointConnections"`
	// Zero or more `clusterSetting` blocks as defined below.
	ClusterSettings EnvironmentV3ClusterSettingArrayOutput `pulumi:"clusterSettings"`
	// This ASEv3 should use dedicated Hosts. Possible values are `2`. Changing this forces a new resource to be created.
	DedicatedHostCount pulumi.IntPtrOutput `pulumi:"dedicatedHostCount"`
	// the DNS suffix for this App Service Environment V3.
	DnsSuffix pulumi.StringOutput `pulumi:"dnsSuffix"`
	// The external inbound IP addresses of the App Service Environment V3.
	ExternalInboundIpAddresses pulumi.StringArrayOutput `pulumi:"externalInboundIpAddresses"`
	// An `inboundNetworkDependencies` block as defined below.
	InboundNetworkDependencies EnvironmentV3InboundNetworkDependencyArrayOutput `pulumi:"inboundNetworkDependencies"`
	// The internal inbound IP addresses of the App Service Environment V3.
	InternalInboundIpAddresses pulumi.StringArrayOutput `pulumi:"internalInboundIpAddresses"`
	// Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment. Possible values are `None` (for an External VIP Type), and `"Web, Publishing"` (for an Internal VIP Type). Defaults to `None`. Changing this forces a new resource to be created.
	InternalLoadBalancingMode pulumi.StringPtrOutput `pulumi:"internalLoadBalancingMode"`
	// The number of IP SSL addresses reserved for the App Service Environment V3.
	IpSslAddressCount pulumi.IntOutput `pulumi:"ipSslAddressCount"`
	// Outbound addresses of Linux based Apps in this App Service Environment V3
	LinuxOutboundIpAddresses pulumi.StringArrayOutput `pulumi:"linuxOutboundIpAddresses"`
	// The location where the App Service Environment exists.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the App Service Environment. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Pricing tier for the front end instances.
	PricingTier pulumi.StringOutput `pulumi:"pricingTier"`
	// The name of the Resource Group where the App Service Environment exists. Defaults to the Resource Group of the Subnet (specified by `subnetId`). Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The ID of the Subnet which the App Service Environment should be connected to. Changing this forces a new resource to be created.
	//
	// > **NOTE** a /24 or larger CIDR is required. Once associated with an ASE, this size cannot be changed.
	//
	// > **NOTE:** This Subnet requires a delegation to `Microsoft.Web/hostingEnvironments` as detailed in the example above.
	SubnetId pulumi.StringOutput    `pulumi:"subnetId"`
	Tags     pulumi.StringMapOutput `pulumi:"tags"`
	// Outbound addresses of Windows based Apps in this App Service Environment V3.
	WindowsOutboundIpAddresses pulumi.StringArrayOutput `pulumi:"windowsOutboundIpAddresses"`
	// Set to `true` to deploy the ASEv3 with availability zones supported. Zonal ASEs can be deployed in some regions, you can refer to [Availability Zone support for App Service Environments](https://docs.microsoft.com/azure/app-service/environment/zone-redundancy). You can only set either `dedicatedHostCount` or `zoneRedundant` but not both. Changing this forces a new resource to be created.
	//
	// > **NOTE:** Setting this value will provision 2 Physical Hosts for your App Service Environment V3, this is done at additional cost, please be aware of the pricing commitment in the [General Availability Notes](https://techcommunity.microsoft.com/t5/apps-on-azure/announcing-app-service-environment-v3-ga/ba-p/2517990)
	ZoneRedundant pulumi.BoolPtrOutput `pulumi:"zoneRedundant"`
}

// NewEnvironmentV3 registers a new resource with the given unique name, arguments, and options.
func NewEnvironmentV3(ctx *pulumi.Context,
	name string, args *EnvironmentV3Args, opts ...pulumi.ResourceOption) (*EnvironmentV3, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EnvironmentV3
	err := ctx.RegisterResource("azure:appservice/environmentV3:EnvironmentV3", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvironmentV3 gets an existing EnvironmentV3 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvironmentV3(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvironmentV3State, opts ...pulumi.ResourceOption) (*EnvironmentV3, error) {
	var resource EnvironmentV3
	err := ctx.ReadResource("azure:appservice/environmentV3:EnvironmentV3", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnvironmentV3 resources.
type environmentV3State struct {
	// Should new Private Endpoint Connections be allowed. Defaults to `true`.
	AllowNewPrivateEndpointConnections *bool `pulumi:"allowNewPrivateEndpointConnections"`
	// Zero or more `clusterSetting` blocks as defined below.
	ClusterSettings []EnvironmentV3ClusterSetting `pulumi:"clusterSettings"`
	// This ASEv3 should use dedicated Hosts. Possible values are `2`. Changing this forces a new resource to be created.
	DedicatedHostCount *int `pulumi:"dedicatedHostCount"`
	// the DNS suffix for this App Service Environment V3.
	DnsSuffix *string `pulumi:"dnsSuffix"`
	// The external inbound IP addresses of the App Service Environment V3.
	ExternalInboundIpAddresses []string `pulumi:"externalInboundIpAddresses"`
	// An `inboundNetworkDependencies` block as defined below.
	InboundNetworkDependencies []EnvironmentV3InboundNetworkDependency `pulumi:"inboundNetworkDependencies"`
	// The internal inbound IP addresses of the App Service Environment V3.
	InternalInboundIpAddresses []string `pulumi:"internalInboundIpAddresses"`
	// Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment. Possible values are `None` (for an External VIP Type), and `"Web, Publishing"` (for an Internal VIP Type). Defaults to `None`. Changing this forces a new resource to be created.
	InternalLoadBalancingMode *string `pulumi:"internalLoadBalancingMode"`
	// The number of IP SSL addresses reserved for the App Service Environment V3.
	IpSslAddressCount *int `pulumi:"ipSslAddressCount"`
	// Outbound addresses of Linux based Apps in this App Service Environment V3
	LinuxOutboundIpAddresses []string `pulumi:"linuxOutboundIpAddresses"`
	// The location where the App Service Environment exists.
	Location *string `pulumi:"location"`
	// The name of the App Service Environment. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Pricing tier for the front end instances.
	PricingTier *string `pulumi:"pricingTier"`
	// The name of the Resource Group where the App Service Environment exists. Defaults to the Resource Group of the Subnet (specified by `subnetId`). Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The ID of the Subnet which the App Service Environment should be connected to. Changing this forces a new resource to be created.
	//
	// > **NOTE** a /24 or larger CIDR is required. Once associated with an ASE, this size cannot be changed.
	//
	// > **NOTE:** This Subnet requires a delegation to `Microsoft.Web/hostingEnvironments` as detailed in the example above.
	SubnetId *string           `pulumi:"subnetId"`
	Tags     map[string]string `pulumi:"tags"`
	// Outbound addresses of Windows based Apps in this App Service Environment V3.
	WindowsOutboundIpAddresses []string `pulumi:"windowsOutboundIpAddresses"`
	// Set to `true` to deploy the ASEv3 with availability zones supported. Zonal ASEs can be deployed in some regions, you can refer to [Availability Zone support for App Service Environments](https://docs.microsoft.com/azure/app-service/environment/zone-redundancy). You can only set either `dedicatedHostCount` or `zoneRedundant` but not both. Changing this forces a new resource to be created.
	//
	// > **NOTE:** Setting this value will provision 2 Physical Hosts for your App Service Environment V3, this is done at additional cost, please be aware of the pricing commitment in the [General Availability Notes](https://techcommunity.microsoft.com/t5/apps-on-azure/announcing-app-service-environment-v3-ga/ba-p/2517990)
	ZoneRedundant *bool `pulumi:"zoneRedundant"`
}

type EnvironmentV3State struct {
	// Should new Private Endpoint Connections be allowed. Defaults to `true`.
	AllowNewPrivateEndpointConnections pulumi.BoolPtrInput
	// Zero or more `clusterSetting` blocks as defined below.
	ClusterSettings EnvironmentV3ClusterSettingArrayInput
	// This ASEv3 should use dedicated Hosts. Possible values are `2`. Changing this forces a new resource to be created.
	DedicatedHostCount pulumi.IntPtrInput
	// the DNS suffix for this App Service Environment V3.
	DnsSuffix pulumi.StringPtrInput
	// The external inbound IP addresses of the App Service Environment V3.
	ExternalInboundIpAddresses pulumi.StringArrayInput
	// An `inboundNetworkDependencies` block as defined below.
	InboundNetworkDependencies EnvironmentV3InboundNetworkDependencyArrayInput
	// The internal inbound IP addresses of the App Service Environment V3.
	InternalInboundIpAddresses pulumi.StringArrayInput
	// Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment. Possible values are `None` (for an External VIP Type), and `"Web, Publishing"` (for an Internal VIP Type). Defaults to `None`. Changing this forces a new resource to be created.
	InternalLoadBalancingMode pulumi.StringPtrInput
	// The number of IP SSL addresses reserved for the App Service Environment V3.
	IpSslAddressCount pulumi.IntPtrInput
	// Outbound addresses of Linux based Apps in this App Service Environment V3
	LinuxOutboundIpAddresses pulumi.StringArrayInput
	// The location where the App Service Environment exists.
	Location pulumi.StringPtrInput
	// The name of the App Service Environment. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Pricing tier for the front end instances.
	PricingTier pulumi.StringPtrInput
	// The name of the Resource Group where the App Service Environment exists. Defaults to the Resource Group of the Subnet (specified by `subnetId`). Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The ID of the Subnet which the App Service Environment should be connected to. Changing this forces a new resource to be created.
	//
	// > **NOTE** a /24 or larger CIDR is required. Once associated with an ASE, this size cannot be changed.
	//
	// > **NOTE:** This Subnet requires a delegation to `Microsoft.Web/hostingEnvironments` as detailed in the example above.
	SubnetId pulumi.StringPtrInput
	Tags     pulumi.StringMapInput
	// Outbound addresses of Windows based Apps in this App Service Environment V3.
	WindowsOutboundIpAddresses pulumi.StringArrayInput
	// Set to `true` to deploy the ASEv3 with availability zones supported. Zonal ASEs can be deployed in some regions, you can refer to [Availability Zone support for App Service Environments](https://docs.microsoft.com/azure/app-service/environment/zone-redundancy). You can only set either `dedicatedHostCount` or `zoneRedundant` but not both. Changing this forces a new resource to be created.
	//
	// > **NOTE:** Setting this value will provision 2 Physical Hosts for your App Service Environment V3, this is done at additional cost, please be aware of the pricing commitment in the [General Availability Notes](https://techcommunity.microsoft.com/t5/apps-on-azure/announcing-app-service-environment-v3-ga/ba-p/2517990)
	ZoneRedundant pulumi.BoolPtrInput
}

func (EnvironmentV3State) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentV3State)(nil)).Elem()
}

type environmentV3Args struct {
	// Should new Private Endpoint Connections be allowed. Defaults to `true`.
	AllowNewPrivateEndpointConnections *bool `pulumi:"allowNewPrivateEndpointConnections"`
	// Zero or more `clusterSetting` blocks as defined below.
	ClusterSettings []EnvironmentV3ClusterSetting `pulumi:"clusterSettings"`
	// This ASEv3 should use dedicated Hosts. Possible values are `2`. Changing this forces a new resource to be created.
	DedicatedHostCount *int `pulumi:"dedicatedHostCount"`
	// Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment. Possible values are `None` (for an External VIP Type), and `"Web, Publishing"` (for an Internal VIP Type). Defaults to `None`. Changing this forces a new resource to be created.
	InternalLoadBalancingMode *string `pulumi:"internalLoadBalancingMode"`
	// The name of the App Service Environment. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the App Service Environment exists. Defaults to the Resource Group of the Subnet (specified by `subnetId`). Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The ID of the Subnet which the App Service Environment should be connected to. Changing this forces a new resource to be created.
	//
	// > **NOTE** a /24 or larger CIDR is required. Once associated with an ASE, this size cannot be changed.
	//
	// > **NOTE:** This Subnet requires a delegation to `Microsoft.Web/hostingEnvironments` as detailed in the example above.
	SubnetId string            `pulumi:"subnetId"`
	Tags     map[string]string `pulumi:"tags"`
	// Set to `true` to deploy the ASEv3 with availability zones supported. Zonal ASEs can be deployed in some regions, you can refer to [Availability Zone support for App Service Environments](https://docs.microsoft.com/azure/app-service/environment/zone-redundancy). You can only set either `dedicatedHostCount` or `zoneRedundant` but not both. Changing this forces a new resource to be created.
	//
	// > **NOTE:** Setting this value will provision 2 Physical Hosts for your App Service Environment V3, this is done at additional cost, please be aware of the pricing commitment in the [General Availability Notes](https://techcommunity.microsoft.com/t5/apps-on-azure/announcing-app-service-environment-v3-ga/ba-p/2517990)
	ZoneRedundant *bool `pulumi:"zoneRedundant"`
}

// The set of arguments for constructing a EnvironmentV3 resource.
type EnvironmentV3Args struct {
	// Should new Private Endpoint Connections be allowed. Defaults to `true`.
	AllowNewPrivateEndpointConnections pulumi.BoolPtrInput
	// Zero or more `clusterSetting` blocks as defined below.
	ClusterSettings EnvironmentV3ClusterSettingArrayInput
	// This ASEv3 should use dedicated Hosts. Possible values are `2`. Changing this forces a new resource to be created.
	DedicatedHostCount pulumi.IntPtrInput
	// Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment. Possible values are `None` (for an External VIP Type), and `"Web, Publishing"` (for an Internal VIP Type). Defaults to `None`. Changing this forces a new resource to be created.
	InternalLoadBalancingMode pulumi.StringPtrInput
	// The name of the App Service Environment. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the App Service Environment exists. Defaults to the Resource Group of the Subnet (specified by `subnetId`). Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// The ID of the Subnet which the App Service Environment should be connected to. Changing this forces a new resource to be created.
	//
	// > **NOTE** a /24 or larger CIDR is required. Once associated with an ASE, this size cannot be changed.
	//
	// > **NOTE:** This Subnet requires a delegation to `Microsoft.Web/hostingEnvironments` as detailed in the example above.
	SubnetId pulumi.StringInput
	Tags     pulumi.StringMapInput
	// Set to `true` to deploy the ASEv3 with availability zones supported. Zonal ASEs can be deployed in some regions, you can refer to [Availability Zone support for App Service Environments](https://docs.microsoft.com/azure/app-service/environment/zone-redundancy). You can only set either `dedicatedHostCount` or `zoneRedundant` but not both. Changing this forces a new resource to be created.
	//
	// > **NOTE:** Setting this value will provision 2 Physical Hosts for your App Service Environment V3, this is done at additional cost, please be aware of the pricing commitment in the [General Availability Notes](https://techcommunity.microsoft.com/t5/apps-on-azure/announcing-app-service-environment-v3-ga/ba-p/2517990)
	ZoneRedundant pulumi.BoolPtrInput
}

func (EnvironmentV3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentV3Args)(nil)).Elem()
}

type EnvironmentV3Input interface {
	pulumi.Input

	ToEnvironmentV3Output() EnvironmentV3Output
	ToEnvironmentV3OutputWithContext(ctx context.Context) EnvironmentV3Output
}

func (*EnvironmentV3) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentV3)(nil)).Elem()
}

func (i *EnvironmentV3) ToEnvironmentV3Output() EnvironmentV3Output {
	return i.ToEnvironmentV3OutputWithContext(context.Background())
}

func (i *EnvironmentV3) ToEnvironmentV3OutputWithContext(ctx context.Context) EnvironmentV3Output {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentV3Output)
}

func (i *EnvironmentV3) ToOutput(ctx context.Context) pulumix.Output[*EnvironmentV3] {
	return pulumix.Output[*EnvironmentV3]{
		OutputState: i.ToEnvironmentV3OutputWithContext(ctx).OutputState,
	}
}

// EnvironmentV3ArrayInput is an input type that accepts EnvironmentV3Array and EnvironmentV3ArrayOutput values.
// You can construct a concrete instance of `EnvironmentV3ArrayInput` via:
//
//	EnvironmentV3Array{ EnvironmentV3Args{...} }
type EnvironmentV3ArrayInput interface {
	pulumi.Input

	ToEnvironmentV3ArrayOutput() EnvironmentV3ArrayOutput
	ToEnvironmentV3ArrayOutputWithContext(context.Context) EnvironmentV3ArrayOutput
}

type EnvironmentV3Array []EnvironmentV3Input

func (EnvironmentV3Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnvironmentV3)(nil)).Elem()
}

func (i EnvironmentV3Array) ToEnvironmentV3ArrayOutput() EnvironmentV3ArrayOutput {
	return i.ToEnvironmentV3ArrayOutputWithContext(context.Background())
}

func (i EnvironmentV3Array) ToEnvironmentV3ArrayOutputWithContext(ctx context.Context) EnvironmentV3ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentV3ArrayOutput)
}

func (i EnvironmentV3Array) ToOutput(ctx context.Context) pulumix.Output[[]*EnvironmentV3] {
	return pulumix.Output[[]*EnvironmentV3]{
		OutputState: i.ToEnvironmentV3ArrayOutputWithContext(ctx).OutputState,
	}
}

// EnvironmentV3MapInput is an input type that accepts EnvironmentV3Map and EnvironmentV3MapOutput values.
// You can construct a concrete instance of `EnvironmentV3MapInput` via:
//
//	EnvironmentV3Map{ "key": EnvironmentV3Args{...} }
type EnvironmentV3MapInput interface {
	pulumi.Input

	ToEnvironmentV3MapOutput() EnvironmentV3MapOutput
	ToEnvironmentV3MapOutputWithContext(context.Context) EnvironmentV3MapOutput
}

type EnvironmentV3Map map[string]EnvironmentV3Input

func (EnvironmentV3Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnvironmentV3)(nil)).Elem()
}

func (i EnvironmentV3Map) ToEnvironmentV3MapOutput() EnvironmentV3MapOutput {
	return i.ToEnvironmentV3MapOutputWithContext(context.Background())
}

func (i EnvironmentV3Map) ToEnvironmentV3MapOutputWithContext(ctx context.Context) EnvironmentV3MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentV3MapOutput)
}

func (i EnvironmentV3Map) ToOutput(ctx context.Context) pulumix.Output[map[string]*EnvironmentV3] {
	return pulumix.Output[map[string]*EnvironmentV3]{
		OutputState: i.ToEnvironmentV3MapOutputWithContext(ctx).OutputState,
	}
}

type EnvironmentV3Output struct{ *pulumi.OutputState }

func (EnvironmentV3Output) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentV3)(nil)).Elem()
}

func (o EnvironmentV3Output) ToEnvironmentV3Output() EnvironmentV3Output {
	return o
}

func (o EnvironmentV3Output) ToEnvironmentV3OutputWithContext(ctx context.Context) EnvironmentV3Output {
	return o
}

func (o EnvironmentV3Output) ToOutput(ctx context.Context) pulumix.Output[*EnvironmentV3] {
	return pulumix.Output[*EnvironmentV3]{
		OutputState: o.OutputState,
	}
}

// Should new Private Endpoint Connections be allowed. Defaults to `true`.
func (o EnvironmentV3Output) AllowNewPrivateEndpointConnections() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnvironmentV3) pulumi.BoolPtrOutput { return v.AllowNewPrivateEndpointConnections }).(pulumi.BoolPtrOutput)
}

// Zero or more `clusterSetting` blocks as defined below.
func (o EnvironmentV3Output) ClusterSettings() EnvironmentV3ClusterSettingArrayOutput {
	return o.ApplyT(func(v *EnvironmentV3) EnvironmentV3ClusterSettingArrayOutput { return v.ClusterSettings }).(EnvironmentV3ClusterSettingArrayOutput)
}

// This ASEv3 should use dedicated Hosts. Possible values are `2`. Changing this forces a new resource to be created.
func (o EnvironmentV3Output) DedicatedHostCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EnvironmentV3) pulumi.IntPtrOutput { return v.DedicatedHostCount }).(pulumi.IntPtrOutput)
}

// the DNS suffix for this App Service Environment V3.
func (o EnvironmentV3Output) DnsSuffix() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentV3) pulumi.StringOutput { return v.DnsSuffix }).(pulumi.StringOutput)
}

// The external inbound IP addresses of the App Service Environment V3.
func (o EnvironmentV3Output) ExternalInboundIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnvironmentV3) pulumi.StringArrayOutput { return v.ExternalInboundIpAddresses }).(pulumi.StringArrayOutput)
}

// An `inboundNetworkDependencies` block as defined below.
func (o EnvironmentV3Output) InboundNetworkDependencies() EnvironmentV3InboundNetworkDependencyArrayOutput {
	return o.ApplyT(func(v *EnvironmentV3) EnvironmentV3InboundNetworkDependencyArrayOutput {
		return v.InboundNetworkDependencies
	}).(EnvironmentV3InboundNetworkDependencyArrayOutput)
}

// The internal inbound IP addresses of the App Service Environment V3.
func (o EnvironmentV3Output) InternalInboundIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnvironmentV3) pulumi.StringArrayOutput { return v.InternalInboundIpAddresses }).(pulumi.StringArrayOutput)
}

// Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment. Possible values are `None` (for an External VIP Type), and `"Web, Publishing"` (for an Internal VIP Type). Defaults to `None`. Changing this forces a new resource to be created.
func (o EnvironmentV3Output) InternalLoadBalancingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvironmentV3) pulumi.StringPtrOutput { return v.InternalLoadBalancingMode }).(pulumi.StringPtrOutput)
}

// The number of IP SSL addresses reserved for the App Service Environment V3.
func (o EnvironmentV3Output) IpSslAddressCount() pulumi.IntOutput {
	return o.ApplyT(func(v *EnvironmentV3) pulumi.IntOutput { return v.IpSslAddressCount }).(pulumi.IntOutput)
}

// Outbound addresses of Linux based Apps in this App Service Environment V3
func (o EnvironmentV3Output) LinuxOutboundIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnvironmentV3) pulumi.StringArrayOutput { return v.LinuxOutboundIpAddresses }).(pulumi.StringArrayOutput)
}

// The location where the App Service Environment exists.
func (o EnvironmentV3Output) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentV3) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the App Service Environment. Changing this forces a new resource to be created.
func (o EnvironmentV3Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentV3) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Pricing tier for the front end instances.
func (o EnvironmentV3Output) PricingTier() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentV3) pulumi.StringOutput { return v.PricingTier }).(pulumi.StringOutput)
}

// The name of the Resource Group where the App Service Environment exists. Defaults to the Resource Group of the Subnet (specified by `subnetId`). Changing this forces a new resource to be created.
func (o EnvironmentV3Output) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentV3) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The ID of the Subnet which the App Service Environment should be connected to. Changing this forces a new resource to be created.
//
// > **NOTE** a /24 or larger CIDR is required. Once associated with an ASE, this size cannot be changed.
//
// > **NOTE:** This Subnet requires a delegation to `Microsoft.Web/hostingEnvironments` as detailed in the example above.
func (o EnvironmentV3Output) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentV3) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

func (o EnvironmentV3Output) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EnvironmentV3) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Outbound addresses of Windows based Apps in this App Service Environment V3.
func (o EnvironmentV3Output) WindowsOutboundIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnvironmentV3) pulumi.StringArrayOutput { return v.WindowsOutboundIpAddresses }).(pulumi.StringArrayOutput)
}

// Set to `true` to deploy the ASEv3 with availability zones supported. Zonal ASEs can be deployed in some regions, you can refer to [Availability Zone support for App Service Environments](https://docs.microsoft.com/azure/app-service/environment/zone-redundancy). You can only set either `dedicatedHostCount` or `zoneRedundant` but not both. Changing this forces a new resource to be created.
//
// > **NOTE:** Setting this value will provision 2 Physical Hosts for your App Service Environment V3, this is done at additional cost, please be aware of the pricing commitment in the [General Availability Notes](https://techcommunity.microsoft.com/t5/apps-on-azure/announcing-app-service-environment-v3-ga/ba-p/2517990)
func (o EnvironmentV3Output) ZoneRedundant() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnvironmentV3) pulumi.BoolPtrOutput { return v.ZoneRedundant }).(pulumi.BoolPtrOutput)
}

type EnvironmentV3ArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentV3ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnvironmentV3)(nil)).Elem()
}

func (o EnvironmentV3ArrayOutput) ToEnvironmentV3ArrayOutput() EnvironmentV3ArrayOutput {
	return o
}

func (o EnvironmentV3ArrayOutput) ToEnvironmentV3ArrayOutputWithContext(ctx context.Context) EnvironmentV3ArrayOutput {
	return o
}

func (o EnvironmentV3ArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*EnvironmentV3] {
	return pulumix.Output[[]*EnvironmentV3]{
		OutputState: o.OutputState,
	}
}

func (o EnvironmentV3ArrayOutput) Index(i pulumi.IntInput) EnvironmentV3Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EnvironmentV3 {
		return vs[0].([]*EnvironmentV3)[vs[1].(int)]
	}).(EnvironmentV3Output)
}

type EnvironmentV3MapOutput struct{ *pulumi.OutputState }

func (EnvironmentV3MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnvironmentV3)(nil)).Elem()
}

func (o EnvironmentV3MapOutput) ToEnvironmentV3MapOutput() EnvironmentV3MapOutput {
	return o
}

func (o EnvironmentV3MapOutput) ToEnvironmentV3MapOutputWithContext(ctx context.Context) EnvironmentV3MapOutput {
	return o
}

func (o EnvironmentV3MapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*EnvironmentV3] {
	return pulumix.Output[map[string]*EnvironmentV3]{
		OutputState: o.OutputState,
	}
}

func (o EnvironmentV3MapOutput) MapIndex(k pulumi.StringInput) EnvironmentV3Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EnvironmentV3 {
		return vs[0].(map[string]*EnvironmentV3)[vs[1].(string)]
	}).(EnvironmentV3Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentV3Input)(nil)).Elem(), &EnvironmentV3{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentV3ArrayInput)(nil)).Elem(), EnvironmentV3Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentV3MapInput)(nil)).Elem(), EnvironmentV3Map{})
	pulumi.RegisterOutputType(EnvironmentV3Output{})
	pulumi.RegisterOutputType(EnvironmentV3ArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentV3MapOutput{})
}
