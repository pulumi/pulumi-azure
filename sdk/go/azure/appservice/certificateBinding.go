// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an App Service Certificate Binding.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/appservice"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/dns"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("webapp"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			examplePlan, err := appservice.NewPlan(ctx, "example", &appservice.PlanArgs{
//				Name:              pulumi.String("appserviceplan"),
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku: &appservice.PlanSkuArgs{
//					Tier: pulumi.String("Premium"),
//					Size: pulumi.String("P1"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleAppService, err := appservice.NewAppService(ctx, "example", &appservice.AppServiceArgs{
//				Name:              pulumi.String("mywebapp"),
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				AppServicePlanId:  examplePlan.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			example := dns.LookupZoneOutput(ctx, dns.GetZoneOutputArgs{
//				Name:              pulumi.String("example.com"),
//				ResourceGroupName: exampleResourceGroup.Name,
//			}, nil)
//			exampleCNameRecord, err := dns.NewCNameRecord(ctx, "example", &dns.CNameRecordArgs{
//				Name: pulumi.String("www"),
//				ZoneName: example.ApplyT(func(example dns.GetZoneResult) (*string, error) {
//					return &example.Name, nil
//				}).(pulumi.StringPtrOutput),
//				ResourceGroupName: example.ApplyT(func(example dns.GetZoneResult) (*string, error) {
//					return &example.ResourceGroupName, nil
//				}).(pulumi.StringPtrOutput),
//				Ttl:    pulumi.Int(300),
//				Record: exampleAppService.DefaultSiteHostname,
//			})
//			if err != nil {
//				return err
//			}
//			exampleTxtRecord, err := dns.NewTxtRecord(ctx, "example", &dns.TxtRecordArgs{
//				Name: exampleCNameRecord.Name.ApplyT(func(name string) (string, error) {
//					return fmt.Sprintf("asuid.%v", name), nil
//				}).(pulumi.StringOutput),
//				ZoneName: example.ApplyT(func(example dns.GetZoneResult) (*string, error) {
//					return &example.Name, nil
//				}).(pulumi.StringPtrOutput),
//				ResourceGroupName: example.ApplyT(func(example dns.GetZoneResult) (*string, error) {
//					return &example.ResourceGroupName, nil
//				}).(pulumi.StringPtrOutput),
//				Ttl: pulumi.Int(300),
//				Records: dns.TxtRecordRecordArray{
//					&dns.TxtRecordRecordArgs{
//						Value: exampleAppService.CustomDomainVerificationId,
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleCustomHostnameBinding, err := appservice.NewCustomHostnameBinding(ctx, "example", &appservice.CustomHostnameBindingArgs{
//				Hostname: std.TrimOutput(ctx, std.TrimOutputArgs{
//					Input:  exampleCNameRecord.Fqdn,
//					Cutset: pulumi.String("."),
//				}, nil).ApplyT(func(invoke std.TrimResult) (*string, error) {
//					return invoke.Result, nil
//				}).(pulumi.StringPtrOutput),
//				AppServiceName:    exampleAppService.Name,
//				ResourceGroupName: exampleResourceGroup.Name,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				exampleTxtRecord,
//			}))
//			if err != nil {
//				return err
//			}
//			exampleManagedCertificate, err := appservice.NewManagedCertificate(ctx, "example", &appservice.ManagedCertificateArgs{
//				CustomHostnameBindingId: exampleCustomHostnameBinding.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = appservice.NewCertificateBinding(ctx, "example", &appservice.CertificateBindingArgs{
//				HostnameBindingId: exampleCustomHostnameBinding.ID(),
//				CertificateId:     exampleManagedCertificate.ID(),
//				SslState:          pulumi.String("SniEnabled"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// App Service Certificate Bindings can be imported using the `hostname_binding_id` and the `app_service_certificate_id` , e.g.
//
// ```sh
// $ pulumi import azure:appservice/certificateBinding:CertificateBinding example "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Web/sites/instance1/hostNameBindings/mywebsite.com|/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Web/certificates/mywebsite.com"
// ```
type CertificateBinding struct {
	pulumi.CustomResourceState

	// The name of the App Service to which the certificate was bound.
	AppServiceName pulumi.StringOutput `pulumi:"appServiceName"`
	// The ID of the certificate to bind to the custom domain. Changing this forces a new App Service Certificate Binding to be created.
	CertificateId pulumi.StringOutput `pulumi:"certificateId"`
	// The hostname of the bound certificate.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// The ID of the Custom Domain/Hostname Binding. Changing this forces a new App Service Certificate Binding to be created.
	HostnameBindingId pulumi.StringOutput `pulumi:"hostnameBindingId"`
	// The type of certificate binding. Allowed values are `IpBasedEnabled` or `SniEnabled`. Changing this forces a new App Service Certificate Binding to be created.
	SslState pulumi.StringOutput `pulumi:"sslState"`
	// The certificate thumbprint.
	Thumbprint pulumi.StringOutput `pulumi:"thumbprint"`
}

// NewCertificateBinding registers a new resource with the given unique name, arguments, and options.
func NewCertificateBinding(ctx *pulumi.Context,
	name string, args *CertificateBindingArgs, opts ...pulumi.ResourceOption) (*CertificateBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateId == nil {
		return nil, errors.New("invalid value for required argument 'CertificateId'")
	}
	if args.HostnameBindingId == nil {
		return nil, errors.New("invalid value for required argument 'HostnameBindingId'")
	}
	if args.SslState == nil {
		return nil, errors.New("invalid value for required argument 'SslState'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CertificateBinding
	err := ctx.RegisterResource("azure:appservice/certificateBinding:CertificateBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificateBinding gets an existing CertificateBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificateBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateBindingState, opts ...pulumi.ResourceOption) (*CertificateBinding, error) {
	var resource CertificateBinding
	err := ctx.ReadResource("azure:appservice/certificateBinding:CertificateBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificateBinding resources.
type certificateBindingState struct {
	// The name of the App Service to which the certificate was bound.
	AppServiceName *string `pulumi:"appServiceName"`
	// The ID of the certificate to bind to the custom domain. Changing this forces a new App Service Certificate Binding to be created.
	CertificateId *string `pulumi:"certificateId"`
	// The hostname of the bound certificate.
	Hostname *string `pulumi:"hostname"`
	// The ID of the Custom Domain/Hostname Binding. Changing this forces a new App Service Certificate Binding to be created.
	HostnameBindingId *string `pulumi:"hostnameBindingId"`
	// The type of certificate binding. Allowed values are `IpBasedEnabled` or `SniEnabled`. Changing this forces a new App Service Certificate Binding to be created.
	SslState *string `pulumi:"sslState"`
	// The certificate thumbprint.
	Thumbprint *string `pulumi:"thumbprint"`
}

type CertificateBindingState struct {
	// The name of the App Service to which the certificate was bound.
	AppServiceName pulumi.StringPtrInput
	// The ID of the certificate to bind to the custom domain. Changing this forces a new App Service Certificate Binding to be created.
	CertificateId pulumi.StringPtrInput
	// The hostname of the bound certificate.
	Hostname pulumi.StringPtrInput
	// The ID of the Custom Domain/Hostname Binding. Changing this forces a new App Service Certificate Binding to be created.
	HostnameBindingId pulumi.StringPtrInput
	// The type of certificate binding. Allowed values are `IpBasedEnabled` or `SniEnabled`. Changing this forces a new App Service Certificate Binding to be created.
	SslState pulumi.StringPtrInput
	// The certificate thumbprint.
	Thumbprint pulumi.StringPtrInput
}

func (CertificateBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateBindingState)(nil)).Elem()
}

type certificateBindingArgs struct {
	// The ID of the certificate to bind to the custom domain. Changing this forces a new App Service Certificate Binding to be created.
	CertificateId string `pulumi:"certificateId"`
	// The ID of the Custom Domain/Hostname Binding. Changing this forces a new App Service Certificate Binding to be created.
	HostnameBindingId string `pulumi:"hostnameBindingId"`
	// The type of certificate binding. Allowed values are `IpBasedEnabled` or `SniEnabled`. Changing this forces a new App Service Certificate Binding to be created.
	SslState string `pulumi:"sslState"`
}

// The set of arguments for constructing a CertificateBinding resource.
type CertificateBindingArgs struct {
	// The ID of the certificate to bind to the custom domain. Changing this forces a new App Service Certificate Binding to be created.
	CertificateId pulumi.StringInput
	// The ID of the Custom Domain/Hostname Binding. Changing this forces a new App Service Certificate Binding to be created.
	HostnameBindingId pulumi.StringInput
	// The type of certificate binding. Allowed values are `IpBasedEnabled` or `SniEnabled`. Changing this forces a new App Service Certificate Binding to be created.
	SslState pulumi.StringInput
}

func (CertificateBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateBindingArgs)(nil)).Elem()
}

type CertificateBindingInput interface {
	pulumi.Input

	ToCertificateBindingOutput() CertificateBindingOutput
	ToCertificateBindingOutputWithContext(ctx context.Context) CertificateBindingOutput
}

func (*CertificateBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateBinding)(nil)).Elem()
}

func (i *CertificateBinding) ToCertificateBindingOutput() CertificateBindingOutput {
	return i.ToCertificateBindingOutputWithContext(context.Background())
}

func (i *CertificateBinding) ToCertificateBindingOutputWithContext(ctx context.Context) CertificateBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateBindingOutput)
}

// CertificateBindingArrayInput is an input type that accepts CertificateBindingArray and CertificateBindingArrayOutput values.
// You can construct a concrete instance of `CertificateBindingArrayInput` via:
//
//	CertificateBindingArray{ CertificateBindingArgs{...} }
type CertificateBindingArrayInput interface {
	pulumi.Input

	ToCertificateBindingArrayOutput() CertificateBindingArrayOutput
	ToCertificateBindingArrayOutputWithContext(context.Context) CertificateBindingArrayOutput
}

type CertificateBindingArray []CertificateBindingInput

func (CertificateBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificateBinding)(nil)).Elem()
}

func (i CertificateBindingArray) ToCertificateBindingArrayOutput() CertificateBindingArrayOutput {
	return i.ToCertificateBindingArrayOutputWithContext(context.Background())
}

func (i CertificateBindingArray) ToCertificateBindingArrayOutputWithContext(ctx context.Context) CertificateBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateBindingArrayOutput)
}

// CertificateBindingMapInput is an input type that accepts CertificateBindingMap and CertificateBindingMapOutput values.
// You can construct a concrete instance of `CertificateBindingMapInput` via:
//
//	CertificateBindingMap{ "key": CertificateBindingArgs{...} }
type CertificateBindingMapInput interface {
	pulumi.Input

	ToCertificateBindingMapOutput() CertificateBindingMapOutput
	ToCertificateBindingMapOutputWithContext(context.Context) CertificateBindingMapOutput
}

type CertificateBindingMap map[string]CertificateBindingInput

func (CertificateBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificateBinding)(nil)).Elem()
}

func (i CertificateBindingMap) ToCertificateBindingMapOutput() CertificateBindingMapOutput {
	return i.ToCertificateBindingMapOutputWithContext(context.Background())
}

func (i CertificateBindingMap) ToCertificateBindingMapOutputWithContext(ctx context.Context) CertificateBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateBindingMapOutput)
}

type CertificateBindingOutput struct{ *pulumi.OutputState }

func (CertificateBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateBinding)(nil)).Elem()
}

func (o CertificateBindingOutput) ToCertificateBindingOutput() CertificateBindingOutput {
	return o
}

func (o CertificateBindingOutput) ToCertificateBindingOutputWithContext(ctx context.Context) CertificateBindingOutput {
	return o
}

// The name of the App Service to which the certificate was bound.
func (o CertificateBindingOutput) AppServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateBinding) pulumi.StringOutput { return v.AppServiceName }).(pulumi.StringOutput)
}

// The ID of the certificate to bind to the custom domain. Changing this forces a new App Service Certificate Binding to be created.
func (o CertificateBindingOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateBinding) pulumi.StringOutput { return v.CertificateId }).(pulumi.StringOutput)
}

// The hostname of the bound certificate.
func (o CertificateBindingOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateBinding) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

// The ID of the Custom Domain/Hostname Binding. Changing this forces a new App Service Certificate Binding to be created.
func (o CertificateBindingOutput) HostnameBindingId() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateBinding) pulumi.StringOutput { return v.HostnameBindingId }).(pulumi.StringOutput)
}

// The type of certificate binding. Allowed values are `IpBasedEnabled` or `SniEnabled`. Changing this forces a new App Service Certificate Binding to be created.
func (o CertificateBindingOutput) SslState() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateBinding) pulumi.StringOutput { return v.SslState }).(pulumi.StringOutput)
}

// The certificate thumbprint.
func (o CertificateBindingOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateBinding) pulumi.StringOutput { return v.Thumbprint }).(pulumi.StringOutput)
}

type CertificateBindingArrayOutput struct{ *pulumi.OutputState }

func (CertificateBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificateBinding)(nil)).Elem()
}

func (o CertificateBindingArrayOutput) ToCertificateBindingArrayOutput() CertificateBindingArrayOutput {
	return o
}

func (o CertificateBindingArrayOutput) ToCertificateBindingArrayOutputWithContext(ctx context.Context) CertificateBindingArrayOutput {
	return o
}

func (o CertificateBindingArrayOutput) Index(i pulumi.IntInput) CertificateBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CertificateBinding {
		return vs[0].([]*CertificateBinding)[vs[1].(int)]
	}).(CertificateBindingOutput)
}

type CertificateBindingMapOutput struct{ *pulumi.OutputState }

func (CertificateBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificateBinding)(nil)).Elem()
}

func (o CertificateBindingMapOutput) ToCertificateBindingMapOutput() CertificateBindingMapOutput {
	return o
}

func (o CertificateBindingMapOutput) ToCertificateBindingMapOutputWithContext(ctx context.Context) CertificateBindingMapOutput {
	return o
}

func (o CertificateBindingMapOutput) MapIndex(k pulumi.StringInput) CertificateBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CertificateBinding {
		return vs[0].(map[string]*CertificateBinding)[vs[1].(string)]
	}).(CertificateBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateBindingInput)(nil)).Elem(), &CertificateBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateBindingArrayInput)(nil)).Elem(), CertificateBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateBindingMapInput)(nil)).Elem(), CertificateBindingMap{})
	pulumi.RegisterOutputType(CertificateBindingOutput{})
	pulumi.RegisterOutputType(CertificateBindingArrayOutput{})
	pulumi.RegisterOutputType(CertificateBindingMapOutput{})
}
