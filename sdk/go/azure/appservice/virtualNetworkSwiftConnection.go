// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an App Service Virtual Network Association for [Regional VNet Integration](https://docs.microsoft.com/azure/app-service/web-sites-integrate-with-vnet#regional-vnet-integration).
//
// This resource can be used for both App Services and Function Apps.
//
// > **Note:** The following resources support associating the vNet for Regional vNet Integration directly on the resource and via the `appservice.VirtualNetworkSwiftConnection` resource. You can't use both simultaneously.
//
// - appservice.LinuxFunctionApp
// - appservice.LinuxFunctionAppSlot
// - appservice.LinuxWebApp
// - appservice.LinuxWebAppSlot
// - logicapps.Standard
// - appservice.WindowsFunctionApp
// - appservice.WindowsFunctionAppSlot
// - appservice.WindowsWebApp
// - appservice.WindowsWebAppSlot
//
// This resource requires the `Microsoft.Network/virtualNetworks/subnets/write` permission scope on the subnet.
//
// The resource specific vNet integration requires the `Microsoft.Network/virtualNetworks/subnets/join/action` permission scope.
//
// There is a hard limit of [one VNet integration per App Service Plan](https://docs.microsoft.com/azure/app-service/web-sites-integrate-with-vnet#regional-vnet-integration).
// Multiple apps in the same App Service plan can use the same VNet.
//
// ## Example Usage
// ### With App Service)
//
// ```go
// package main
//
// import (
//
//	appservice/appService "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/appservice/appService"
//	appservice/plan "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/appservice/plan"
//	appservice/virtualNetworkSwiftConnection "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/appservice/virtualNetworkSwiftConnection"
//	core/resourceGroup "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/core/resourceGroup"
//	network/subnet "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/subnet"
//	network/virtualNetwork "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/virtualNetwork"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// example, err := core/resourceGroup.NewResourceGroup(ctx, "example", &core/resourceGroup.ResourceGroupArgs{
// Name: "example-resources",
// Location: "West Europe",
// })
// if err != nil {
// return err
// }
// exampleVirtualNetwork, err := network/virtualNetwork.NewVirtualNetwork(ctx, "example", &network/virtualNetwork.VirtualNetworkArgs{
// Name: "example-virtual-network",
// AddressSpaces: []string{
// "10.0.0.0/16",
// },
// Location: example.Location,
// ResourceGroupName: example.Name,
// })
// if err != nil {
// return err
// }
// exampleSubnet, err := network/subnet.NewSubnet(ctx, "example", &network/subnet.SubnetArgs{
// Name: "example-subnet",
// ResourceGroupName: example.Name,
// VirtualNetworkName: exampleVirtualNetwork.Name,
// AddressPrefixes: []string{
// "10.0.1.0/24",
// },
// Delegations: []map[string]interface{}{
// map[string]interface{}{
// "name": "example-delegation",
// "serviceDelegation": map[string]interface{}{
// "name": "Microsoft.Web/serverFarms",
// "actions": []string{
// "Microsoft.Network/virtualNetworks/subnets/action",
// },
// },
// },
// },
// })
// if err != nil {
// return err
// }
// examplePlan, err := appservice/plan.NewPlan(ctx, "example", &appservice/plan.PlanArgs{
// Name: "example-app-service-plan",
// Location: example.Location,
// ResourceGroupName: example.Name,
// Sku: map[string]interface{}{
// "tier": "Standard",
// "size": "S1",
// },
// })
// if err != nil {
// return err
// }
// exampleAppService, err := appservice/appService.NewAppService(ctx, "example", &appservice/appService.AppServiceArgs{
// Name: "example-app-service",
// Location: example.Location,
// ResourceGroupName: example.Name,
// AppServicePlanId: examplePlan.Id,
// })
// if err != nil {
// return err
// }
// _, err = appservice/virtualNetworkSwiftConnection.NewVirtualNetworkSwiftConnection(ctx, "example", &appservice/virtualNetworkSwiftConnection.VirtualNetworkSwiftConnectionArgs{
// AppServiceId: exampleAppService.Id,
// SubnetId: exampleSubnet.Id,
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
// ### With Function App)
//
// ```go
// package main
//
// import (
//
//	appservice/functionApp "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/appservice/functionApp"
//	appservice/plan "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/appservice/plan"
//	appservice/virtualNetworkSwiftConnection "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/appservice/virtualNetworkSwiftConnection"
//	core/resourceGroup "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/core/resourceGroup"
//	network/subnet "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/subnet"
//	network/virtualNetwork "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/virtualNetwork"
//	storage/account "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/storage/account"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// example, err := core/resourceGroup.NewResourceGroup(ctx, "example", &core/resourceGroup.ResourceGroupArgs{
// Name: "example-resources",
// Location: "West Europe",
// })
// if err != nil {
// return err
// }
// exampleVirtualNetwork, err := network/virtualNetwork.NewVirtualNetwork(ctx, "example", &network/virtualNetwork.VirtualNetworkArgs{
// Name: "example-virtual-network",
// AddressSpaces: []string{
// "10.0.0.0/16",
// },
// Location: example.Location,
// ResourceGroupName: example.Name,
// })
// if err != nil {
// return err
// }
// exampleSubnet, err := network/subnet.NewSubnet(ctx, "example", &network/subnet.SubnetArgs{
// Name: "example-subnet",
// ResourceGroupName: example.Name,
// VirtualNetworkName: exampleVirtualNetwork.Name,
// AddressPrefixes: []string{
// "10.0.1.0/24",
// },
// Delegations: []map[string]interface{}{
// map[string]interface{}{
// "name": "example-delegation",
// "serviceDelegation": map[string]interface{}{
// "name": "Microsoft.Web/serverFarms",
// "actions": []string{
// "Microsoft.Network/virtualNetworks/subnets/action",
// },
// },
// },
// },
// })
// if err != nil {
// return err
// }
// examplePlan, err := appservice/plan.NewPlan(ctx, "example", &appservice/plan.PlanArgs{
// Name: "example-app-service-plan",
// Location: example.Location,
// ResourceGroupName: example.Name,
// Sku: map[string]interface{}{
// "tier": "Standard",
// "size": "S1",
// },
// })
// if err != nil {
// return err
// }
// exampleAccount, err := storage/account.NewAccount(ctx, "example", &storage/account.AccountArgs{
// Name: "functionsappexamplesa",
// ResourceGroupName: example.Name,
// Location: example.Location,
// AccountTier: "Standard",
// AccountReplicationType: "LRS",
// })
// if err != nil {
// return err
// }
// exampleFunctionApp, err := appservice/functionApp.NewFunctionApp(ctx, "example", &appservice/functionApp.FunctionAppArgs{
// Name: "example-function-app",
// Location: example.Location,
// ResourceGroupName: example.Name,
// AppServicePlanId: examplePlan.Id,
// StorageAccountName: exampleAccount.Name,
// StorageAccountAccessKey: exampleAccount.PrimaryAccessKey,
// })
// if err != nil {
// return err
// }
// _, err = appservice/virtualNetworkSwiftConnection.NewVirtualNetworkSwiftConnection(ctx, "example", &appservice/virtualNetworkSwiftConnection.VirtualNetworkSwiftConnectionArgs{
// AppServiceId: exampleFunctionApp.Id,
// SubnetId: exampleSubnet.Id,
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
//
// ## Import
//
// App Service Virtual Network Associations can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:appservice/virtualNetworkSwiftConnection:VirtualNetworkSwiftConnection myassociation /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Web/sites/instance1/config/virtualNetwork
// ```
type VirtualNetworkSwiftConnection struct {
	pulumi.CustomResourceState

	// The ID of the App Service or Function App to associate to the VNet. Changing this forces a new resource to be created.
	AppServiceId pulumi.StringOutput `pulumi:"appServiceId"`
	// The ID of the subnet the app service will be associated to (the subnet must have a `serviceDelegation` configured for `Microsoft.Web/serverFarms`).
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
}

// NewVirtualNetworkSwiftConnection registers a new resource with the given unique name, arguments, and options.
func NewVirtualNetworkSwiftConnection(ctx *pulumi.Context,
	name string, args *VirtualNetworkSwiftConnectionArgs, opts ...pulumi.ResourceOption) (*VirtualNetworkSwiftConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppServiceId == nil {
		return nil, errors.New("invalid value for required argument 'AppServiceId'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VirtualNetworkSwiftConnection
	err := ctx.RegisterResource("azure:appservice/virtualNetworkSwiftConnection:VirtualNetworkSwiftConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualNetworkSwiftConnection gets an existing VirtualNetworkSwiftConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualNetworkSwiftConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualNetworkSwiftConnectionState, opts ...pulumi.ResourceOption) (*VirtualNetworkSwiftConnection, error) {
	var resource VirtualNetworkSwiftConnection
	err := ctx.ReadResource("azure:appservice/virtualNetworkSwiftConnection:VirtualNetworkSwiftConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualNetworkSwiftConnection resources.
type virtualNetworkSwiftConnectionState struct {
	// The ID of the App Service or Function App to associate to the VNet. Changing this forces a new resource to be created.
	AppServiceId *string `pulumi:"appServiceId"`
	// The ID of the subnet the app service will be associated to (the subnet must have a `serviceDelegation` configured for `Microsoft.Web/serverFarms`).
	SubnetId *string `pulumi:"subnetId"`
}

type VirtualNetworkSwiftConnectionState struct {
	// The ID of the App Service or Function App to associate to the VNet. Changing this forces a new resource to be created.
	AppServiceId pulumi.StringPtrInput
	// The ID of the subnet the app service will be associated to (the subnet must have a `serviceDelegation` configured for `Microsoft.Web/serverFarms`).
	SubnetId pulumi.StringPtrInput
}

func (VirtualNetworkSwiftConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualNetworkSwiftConnectionState)(nil)).Elem()
}

type virtualNetworkSwiftConnectionArgs struct {
	// The ID of the App Service or Function App to associate to the VNet. Changing this forces a new resource to be created.
	AppServiceId string `pulumi:"appServiceId"`
	// The ID of the subnet the app service will be associated to (the subnet must have a `serviceDelegation` configured for `Microsoft.Web/serverFarms`).
	SubnetId string `pulumi:"subnetId"`
}

// The set of arguments for constructing a VirtualNetworkSwiftConnection resource.
type VirtualNetworkSwiftConnectionArgs struct {
	// The ID of the App Service or Function App to associate to the VNet. Changing this forces a new resource to be created.
	AppServiceId pulumi.StringInput
	// The ID of the subnet the app service will be associated to (the subnet must have a `serviceDelegation` configured for `Microsoft.Web/serverFarms`).
	SubnetId pulumi.StringInput
}

func (VirtualNetworkSwiftConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualNetworkSwiftConnectionArgs)(nil)).Elem()
}

type VirtualNetworkSwiftConnectionInput interface {
	pulumi.Input

	ToVirtualNetworkSwiftConnectionOutput() VirtualNetworkSwiftConnectionOutput
	ToVirtualNetworkSwiftConnectionOutputWithContext(ctx context.Context) VirtualNetworkSwiftConnectionOutput
}

func (*VirtualNetworkSwiftConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNetworkSwiftConnection)(nil)).Elem()
}

func (i *VirtualNetworkSwiftConnection) ToVirtualNetworkSwiftConnectionOutput() VirtualNetworkSwiftConnectionOutput {
	return i.ToVirtualNetworkSwiftConnectionOutputWithContext(context.Background())
}

func (i *VirtualNetworkSwiftConnection) ToVirtualNetworkSwiftConnectionOutputWithContext(ctx context.Context) VirtualNetworkSwiftConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkSwiftConnectionOutput)
}

// VirtualNetworkSwiftConnectionArrayInput is an input type that accepts VirtualNetworkSwiftConnectionArray and VirtualNetworkSwiftConnectionArrayOutput values.
// You can construct a concrete instance of `VirtualNetworkSwiftConnectionArrayInput` via:
//
//	VirtualNetworkSwiftConnectionArray{ VirtualNetworkSwiftConnectionArgs{...} }
type VirtualNetworkSwiftConnectionArrayInput interface {
	pulumi.Input

	ToVirtualNetworkSwiftConnectionArrayOutput() VirtualNetworkSwiftConnectionArrayOutput
	ToVirtualNetworkSwiftConnectionArrayOutputWithContext(context.Context) VirtualNetworkSwiftConnectionArrayOutput
}

type VirtualNetworkSwiftConnectionArray []VirtualNetworkSwiftConnectionInput

func (VirtualNetworkSwiftConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualNetworkSwiftConnection)(nil)).Elem()
}

func (i VirtualNetworkSwiftConnectionArray) ToVirtualNetworkSwiftConnectionArrayOutput() VirtualNetworkSwiftConnectionArrayOutput {
	return i.ToVirtualNetworkSwiftConnectionArrayOutputWithContext(context.Background())
}

func (i VirtualNetworkSwiftConnectionArray) ToVirtualNetworkSwiftConnectionArrayOutputWithContext(ctx context.Context) VirtualNetworkSwiftConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkSwiftConnectionArrayOutput)
}

// VirtualNetworkSwiftConnectionMapInput is an input type that accepts VirtualNetworkSwiftConnectionMap and VirtualNetworkSwiftConnectionMapOutput values.
// You can construct a concrete instance of `VirtualNetworkSwiftConnectionMapInput` via:
//
//	VirtualNetworkSwiftConnectionMap{ "key": VirtualNetworkSwiftConnectionArgs{...} }
type VirtualNetworkSwiftConnectionMapInput interface {
	pulumi.Input

	ToVirtualNetworkSwiftConnectionMapOutput() VirtualNetworkSwiftConnectionMapOutput
	ToVirtualNetworkSwiftConnectionMapOutputWithContext(context.Context) VirtualNetworkSwiftConnectionMapOutput
}

type VirtualNetworkSwiftConnectionMap map[string]VirtualNetworkSwiftConnectionInput

func (VirtualNetworkSwiftConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualNetworkSwiftConnection)(nil)).Elem()
}

func (i VirtualNetworkSwiftConnectionMap) ToVirtualNetworkSwiftConnectionMapOutput() VirtualNetworkSwiftConnectionMapOutput {
	return i.ToVirtualNetworkSwiftConnectionMapOutputWithContext(context.Background())
}

func (i VirtualNetworkSwiftConnectionMap) ToVirtualNetworkSwiftConnectionMapOutputWithContext(ctx context.Context) VirtualNetworkSwiftConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkSwiftConnectionMapOutput)
}

type VirtualNetworkSwiftConnectionOutput struct{ *pulumi.OutputState }

func (VirtualNetworkSwiftConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNetworkSwiftConnection)(nil)).Elem()
}

func (o VirtualNetworkSwiftConnectionOutput) ToVirtualNetworkSwiftConnectionOutput() VirtualNetworkSwiftConnectionOutput {
	return o
}

func (o VirtualNetworkSwiftConnectionOutput) ToVirtualNetworkSwiftConnectionOutputWithContext(ctx context.Context) VirtualNetworkSwiftConnectionOutput {
	return o
}

// The ID of the App Service or Function App to associate to the VNet. Changing this forces a new resource to be created.
func (o VirtualNetworkSwiftConnectionOutput) AppServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualNetworkSwiftConnection) pulumi.StringOutput { return v.AppServiceId }).(pulumi.StringOutput)
}

// The ID of the subnet the app service will be associated to (the subnet must have a `serviceDelegation` configured for `Microsoft.Web/serverFarms`).
func (o VirtualNetworkSwiftConnectionOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualNetworkSwiftConnection) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

type VirtualNetworkSwiftConnectionArrayOutput struct{ *pulumi.OutputState }

func (VirtualNetworkSwiftConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualNetworkSwiftConnection)(nil)).Elem()
}

func (o VirtualNetworkSwiftConnectionArrayOutput) ToVirtualNetworkSwiftConnectionArrayOutput() VirtualNetworkSwiftConnectionArrayOutput {
	return o
}

func (o VirtualNetworkSwiftConnectionArrayOutput) ToVirtualNetworkSwiftConnectionArrayOutputWithContext(ctx context.Context) VirtualNetworkSwiftConnectionArrayOutput {
	return o
}

func (o VirtualNetworkSwiftConnectionArrayOutput) Index(i pulumi.IntInput) VirtualNetworkSwiftConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VirtualNetworkSwiftConnection {
		return vs[0].([]*VirtualNetworkSwiftConnection)[vs[1].(int)]
	}).(VirtualNetworkSwiftConnectionOutput)
}

type VirtualNetworkSwiftConnectionMapOutput struct{ *pulumi.OutputState }

func (VirtualNetworkSwiftConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualNetworkSwiftConnection)(nil)).Elem()
}

func (o VirtualNetworkSwiftConnectionMapOutput) ToVirtualNetworkSwiftConnectionMapOutput() VirtualNetworkSwiftConnectionMapOutput {
	return o
}

func (o VirtualNetworkSwiftConnectionMapOutput) ToVirtualNetworkSwiftConnectionMapOutputWithContext(ctx context.Context) VirtualNetworkSwiftConnectionMapOutput {
	return o
}

func (o VirtualNetworkSwiftConnectionMapOutput) MapIndex(k pulumi.StringInput) VirtualNetworkSwiftConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VirtualNetworkSwiftConnection {
		return vs[0].(map[string]*VirtualNetworkSwiftConnection)[vs[1].(string)]
	}).(VirtualNetworkSwiftConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualNetworkSwiftConnectionInput)(nil)).Elem(), &VirtualNetworkSwiftConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualNetworkSwiftConnectionArrayInput)(nil)).Elem(), VirtualNetworkSwiftConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualNetworkSwiftConnectionMapInput)(nil)).Elem(), VirtualNetworkSwiftConnectionMap{})
	pulumi.RegisterOutputType(VirtualNetworkSwiftConnectionOutput{})
	pulumi.RegisterOutputType(VirtualNetworkSwiftConnectionArrayOutput{})
	pulumi.RegisterOutputType(VirtualNetworkSwiftConnectionMapOutput{})
}
