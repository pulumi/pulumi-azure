// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appservice

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an App Service Slot (within an App Service).
// 
// > **Note:** When using Slots - the `appSettings`, `connectionString` and `siteConfig` blocks on the `appservice.AppService` resource will be overwritten when promoting a Slot using the `appservice.ActiveSlot` resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/app_service_slot.html.markdown.
type Slot struct {
	s *pulumi.ResourceState
}

// NewSlot registers a new resource with the given unique name, arguments, and options.
func NewSlot(ctx *pulumi.Context,
	name string, args *SlotArgs, opts ...pulumi.ResourceOpt) (*Slot, error) {
	if args == nil || args.AppServiceName == nil {
		return nil, errors.New("missing required argument 'AppServiceName'")
	}
	if args == nil || args.AppServicePlanId == nil {
		return nil, errors.New("missing required argument 'AppServicePlanId'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["appServiceName"] = nil
		inputs["appServicePlanId"] = nil
		inputs["appSettings"] = nil
		inputs["authSettings"] = nil
		inputs["clientAffinityEnabled"] = nil
		inputs["connectionStrings"] = nil
		inputs["enabled"] = nil
		inputs["httpsOnly"] = nil
		inputs["identity"] = nil
		inputs["location"] = nil
		inputs["logs"] = nil
		inputs["name"] = nil
		inputs["resourceGroupName"] = nil
		inputs["siteConfig"] = nil
		inputs["tags"] = nil
	} else {
		inputs["appServiceName"] = args.AppServiceName
		inputs["appServicePlanId"] = args.AppServicePlanId
		inputs["appSettings"] = args.AppSettings
		inputs["authSettings"] = args.AuthSettings
		inputs["clientAffinityEnabled"] = args.ClientAffinityEnabled
		inputs["connectionStrings"] = args.ConnectionStrings
		inputs["enabled"] = args.Enabled
		inputs["httpsOnly"] = args.HttpsOnly
		inputs["identity"] = args.Identity
		inputs["location"] = args.Location
		inputs["logs"] = args.Logs
		inputs["name"] = args.Name
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["siteConfig"] = args.SiteConfig
		inputs["tags"] = args.Tags
	}
	inputs["defaultSiteHostname"] = nil
	inputs["siteCredential"] = nil
	s, err := ctx.RegisterResource("azure:appservice/slot:Slot", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Slot{s: s}, nil
}

// GetSlot gets an existing Slot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSlot(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SlotState, opts ...pulumi.ResourceOpt) (*Slot, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["appServiceName"] = state.AppServiceName
		inputs["appServicePlanId"] = state.AppServicePlanId
		inputs["appSettings"] = state.AppSettings
		inputs["authSettings"] = state.AuthSettings
		inputs["clientAffinityEnabled"] = state.ClientAffinityEnabled
		inputs["connectionStrings"] = state.ConnectionStrings
		inputs["defaultSiteHostname"] = state.DefaultSiteHostname
		inputs["enabled"] = state.Enabled
		inputs["httpsOnly"] = state.HttpsOnly
		inputs["identity"] = state.Identity
		inputs["location"] = state.Location
		inputs["logs"] = state.Logs
		inputs["name"] = state.Name
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["siteConfig"] = state.SiteConfig
		inputs["siteCredential"] = state.SiteCredential
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("azure:appservice/slot:Slot", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Slot{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Slot) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Slot) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The name of the App Service within which to create the App Service Slot.  Changing this forces a new resource to be created.
func (r *Slot) AppServiceName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["appServiceName"])
}

// The ID of the App Service Plan within which to create this App Service Slot. Changing this forces a new resource to be created.
func (r *Slot) AppServicePlanId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["appServicePlanId"])
}

// A key-value pair of App Settings.
func (r *Slot) AppSettings() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["appSettings"])
}

// A `authSettings` block as defined below.
func (r *Slot) AuthSettings() pulumi.Output {
	return r.s.State["authSettings"]
}

// Should the App Service Slot send session affinity cookies, which route client requests in the same session to the same instance?
func (r *Slot) ClientAffinityEnabled() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["clientAffinityEnabled"])
}

// An `connectionString` block as defined below.
func (r *Slot) ConnectionStrings() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["connectionStrings"])
}

// The Default Hostname associated with the App Service Slot - such as `mysite.azurewebsites.net`
func (r *Slot) DefaultSiteHostname() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["defaultSiteHostname"])
}

// Is the App Service Slot Enabled?
func (r *Slot) Enabled() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["enabled"])
}

// Can the App Service Slot only be accessed via HTTPS? Defaults to `false`.
func (r *Slot) HttpsOnly() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["httpsOnly"])
}

// A Managed Service Identity block as defined below.
func (r *Slot) Identity() pulumi.Output {
	return r.s.State["identity"]
}

// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
func (r *Slot) Location() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["location"])
}

func (r *Slot) Logs() pulumi.Output {
	return r.s.State["logs"]
}

// The name of the Connection String.
func (r *Slot) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The name of the resource group in which to create the App Service Slot component.
func (r *Slot) ResourceGroupName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// A `siteConfig` object as defined below.
func (r *Slot) SiteConfig() pulumi.Output {
	return r.s.State["siteConfig"]
}

// A `siteCredential` block as defined below, which contains the site-level credentials used to publish to this App Service.
func (r *Slot) SiteCredential() pulumi.Output {
	return r.s.State["siteCredential"]
}

// A mapping of tags to assign to the resource.
func (r *Slot) Tags() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering Slot resources.
type SlotState struct {
	// The name of the App Service within which to create the App Service Slot.  Changing this forces a new resource to be created.
	AppServiceName interface{}
	// The ID of the App Service Plan within which to create this App Service Slot. Changing this forces a new resource to be created.
	AppServicePlanId interface{}
	// A key-value pair of App Settings.
	AppSettings interface{}
	// A `authSettings` block as defined below.
	AuthSettings interface{}
	// Should the App Service Slot send session affinity cookies, which route client requests in the same session to the same instance?
	ClientAffinityEnabled interface{}
	// An `connectionString` block as defined below.
	ConnectionStrings interface{}
	// The Default Hostname associated with the App Service Slot - such as `mysite.azurewebsites.net`
	DefaultSiteHostname interface{}
	// Is the App Service Slot Enabled?
	Enabled interface{}
	// Can the App Service Slot only be accessed via HTTPS? Defaults to `false`.
	HttpsOnly interface{}
	// A Managed Service Identity block as defined below.
	Identity interface{}
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location interface{}
	Logs interface{}
	// The name of the Connection String.
	Name interface{}
	// The name of the resource group in which to create the App Service Slot component.
	ResourceGroupName interface{}
	// A `siteConfig` object as defined below.
	SiteConfig interface{}
	// A `siteCredential` block as defined below, which contains the site-level credentials used to publish to this App Service.
	SiteCredential interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
}

// The set of arguments for constructing a Slot resource.
type SlotArgs struct {
	// The name of the App Service within which to create the App Service Slot.  Changing this forces a new resource to be created.
	AppServiceName interface{}
	// The ID of the App Service Plan within which to create this App Service Slot. Changing this forces a new resource to be created.
	AppServicePlanId interface{}
	// A key-value pair of App Settings.
	AppSettings interface{}
	// A `authSettings` block as defined below.
	AuthSettings interface{}
	// Should the App Service Slot send session affinity cookies, which route client requests in the same session to the same instance?
	ClientAffinityEnabled interface{}
	// An `connectionString` block as defined below.
	ConnectionStrings interface{}
	// Is the App Service Slot Enabled?
	Enabled interface{}
	// Can the App Service Slot only be accessed via HTTPS? Defaults to `false`.
	HttpsOnly interface{}
	// A Managed Service Identity block as defined below.
	Identity interface{}
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location interface{}
	Logs interface{}
	// The name of the Connection String.
	Name interface{}
	// The name of the resource group in which to create the App Service Slot component.
	ResourceGroupName interface{}
	// A `siteConfig` object as defined below.
	SiteConfig interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
}
