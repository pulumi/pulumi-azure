// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appservice

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages an App Service certificate.
//
// ## Import
//
// App Service Certificates can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:appservice/certificate:Certificate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Web/certificates/certificate1
// ```
type Certificate struct {
	pulumi.CustomResourceState

	// The expiration date for the certificate.
	ExpirationDate pulumi.StringOutput `pulumi:"expirationDate"`
	// The friendly name of the certificate.
	FriendlyName pulumi.StringOutput `pulumi:"friendlyName"`
	// List of host names the certificate applies to.
	HostNames pulumi.StringArrayOutput `pulumi:"hostNames"`
	// Must be specified when the certificate is for an App Service Environment hosted App Service. Changing this forces a new resource to be created.
	HostingEnvironmentProfileId pulumi.StringPtrOutput `pulumi:"hostingEnvironmentProfileId"`
	// The issue date for the certificate.
	IssueDate pulumi.StringOutput `pulumi:"issueDate"`
	// The name of the certificate issuer.
	Issuer pulumi.StringOutput `pulumi:"issuer"`
	// The ID of the Key Vault secret. Changing this forces a new resource to be created.
	KeyVaultSecretId pulumi.StringPtrOutput `pulumi:"keyVaultSecretId"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name of the certificate. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The password to access the certificate's private key. Changing this forces a new resource to be created.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The base64-encoded contents of the certificate. Changing this forces a new resource to be created.
	PfxBlob pulumi.StringPtrOutput `pulumi:"pfxBlob"`
	// The name of the resource group in which to create the certificate. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The subject name of the certificate.
	SubjectName pulumi.StringOutput    `pulumi:"subjectName"`
	Tags        pulumi.StringMapOutput `pulumi:"tags"`
	// The thumbprint for the certificate.
	Thumbprint pulumi.StringOutput `pulumi:"thumbprint"`
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOption) (*Certificate, error) {
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &CertificateArgs{}
	}
	var resource Certificate
	err := ctx.RegisterResource("azure:appservice/certificate:Certificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateState, opts ...pulumi.ResourceOption) (*Certificate, error) {
	var resource Certificate
	err := ctx.ReadResource("azure:appservice/certificate:Certificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certificate resources.
type certificateState struct {
	// The expiration date for the certificate.
	ExpirationDate *string `pulumi:"expirationDate"`
	// The friendly name of the certificate.
	FriendlyName *string `pulumi:"friendlyName"`
	// List of host names the certificate applies to.
	HostNames []string `pulumi:"hostNames"`
	// Must be specified when the certificate is for an App Service Environment hosted App Service. Changing this forces a new resource to be created.
	HostingEnvironmentProfileId *string `pulumi:"hostingEnvironmentProfileId"`
	// The issue date for the certificate.
	IssueDate *string `pulumi:"issueDate"`
	// The name of the certificate issuer.
	Issuer *string `pulumi:"issuer"`
	// The ID of the Key Vault secret. Changing this forces a new resource to be created.
	KeyVaultSecretId *string `pulumi:"keyVaultSecretId"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the certificate. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The password to access the certificate's private key. Changing this forces a new resource to be created.
	Password *string `pulumi:"password"`
	// The base64-encoded contents of the certificate. Changing this forces a new resource to be created.
	PfxBlob *string `pulumi:"pfxBlob"`
	// The name of the resource group in which to create the certificate. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The subject name of the certificate.
	SubjectName *string           `pulumi:"subjectName"`
	Tags        map[string]string `pulumi:"tags"`
	// The thumbprint for the certificate.
	Thumbprint *string `pulumi:"thumbprint"`
}

type CertificateState struct {
	// The expiration date for the certificate.
	ExpirationDate pulumi.StringPtrInput
	// The friendly name of the certificate.
	FriendlyName pulumi.StringPtrInput
	// List of host names the certificate applies to.
	HostNames pulumi.StringArrayInput
	// Must be specified when the certificate is for an App Service Environment hosted App Service. Changing this forces a new resource to be created.
	HostingEnvironmentProfileId pulumi.StringPtrInput
	// The issue date for the certificate.
	IssueDate pulumi.StringPtrInput
	// The name of the certificate issuer.
	Issuer pulumi.StringPtrInput
	// The ID of the Key Vault secret. Changing this forces a new resource to be created.
	KeyVaultSecretId pulumi.StringPtrInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the certificate. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The password to access the certificate's private key. Changing this forces a new resource to be created.
	Password pulumi.StringPtrInput
	// The base64-encoded contents of the certificate. Changing this forces a new resource to be created.
	PfxBlob pulumi.StringPtrInput
	// The name of the resource group in which to create the certificate. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The subject name of the certificate.
	SubjectName pulumi.StringPtrInput
	Tags        pulumi.StringMapInput
	// The thumbprint for the certificate.
	Thumbprint pulumi.StringPtrInput
}

func (CertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateState)(nil)).Elem()
}

type certificateArgs struct {
	// Must be specified when the certificate is for an App Service Environment hosted App Service. Changing this forces a new resource to be created.
	HostingEnvironmentProfileId *string `pulumi:"hostingEnvironmentProfileId"`
	// The ID of the Key Vault secret. Changing this forces a new resource to be created.
	KeyVaultSecretId *string `pulumi:"keyVaultSecretId"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the certificate. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The password to access the certificate's private key. Changing this forces a new resource to be created.
	Password *string `pulumi:"password"`
	// The base64-encoded contents of the certificate. Changing this forces a new resource to be created.
	PfxBlob *string `pulumi:"pfxBlob"`
	// The name of the resource group in which to create the certificate. Changing this forces a new resource to be created.
	ResourceGroupName string            `pulumi:"resourceGroupName"`
	Tags              map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	// Must be specified when the certificate is for an App Service Environment hosted App Service. Changing this forces a new resource to be created.
	HostingEnvironmentProfileId pulumi.StringPtrInput
	// The ID of the Key Vault secret. Changing this forces a new resource to be created.
	KeyVaultSecretId pulumi.StringPtrInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the certificate. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The password to access the certificate's private key. Changing this forces a new resource to be created.
	Password pulumi.StringPtrInput
	// The base64-encoded contents of the certificate. Changing this forces a new resource to be created.
	PfxBlob pulumi.StringPtrInput
	// The name of the resource group in which to create the certificate. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	Tags              pulumi.StringMapInput
}

func (CertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateArgs)(nil)).Elem()
}

type CertificateInput interface {
	pulumi.Input

	ToCertificateOutput() CertificateOutput
	ToCertificateOutputWithContext(ctx context.Context) CertificateOutput
}

func (Certificate) ElementType() reflect.Type {
	return reflect.TypeOf((*Certificate)(nil)).Elem()
}

func (i Certificate) ToCertificateOutput() CertificateOutput {
	return i.ToCertificateOutputWithContext(context.Background())
}

func (i Certificate) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateOutput)
}

type CertificateOutput struct {
	*pulumi.OutputState
}

func (CertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateOutput)(nil)).Elem()
}

func (o CertificateOutput) ToCertificateOutput() CertificateOutput {
	return o
}

func (o CertificateOutput) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(CertificateOutput{})
}
