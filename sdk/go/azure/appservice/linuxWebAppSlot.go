// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Linux Web App Slot.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/appservice"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleServicePlan, err := appservice.NewServicePlan(ctx, "exampleServicePlan", &appservice.ServicePlanArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				OsType:            pulumi.String("Linux"),
//				SkuName:           pulumi.String("P1v2"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleLinuxWebApp, err := appservice.NewLinuxWebApp(ctx, "exampleLinuxWebApp", &appservice.LinuxWebAppArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleServicePlan.Location,
//				ServicePlanId:     exampleServicePlan.ID(),
//				SiteConfig:        nil,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = appservice.NewLinuxWebAppSlot(ctx, "exampleLinuxWebAppSlot", &appservice.LinuxWebAppSlotArgs{
//				AppServiceId: exampleLinuxWebApp.ID(),
//				SiteConfig:   nil,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Linux Web Apps can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:appservice/linuxWebAppSlot:LinuxWebAppSlot example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/sites/site1/slots/slot1
//
// ```
type LinuxWebAppSlot struct {
	pulumi.CustomResourceState

	// A `appMetadata`.
	AppMetadata pulumi.StringMapOutput `pulumi:"appMetadata"`
	// The ID of the Linux Web App this Deployment Slot will be part of.
	AppServiceId pulumi.StringOutput `pulumi:"appServiceId"`
	// A map of key-value pairs of App Settings.
	AppSettings pulumi.StringMapOutput `pulumi:"appSettings"`
	// An `authSettings` block as defined below.
	AuthSettings LinuxWebAppSlotAuthSettingsPtrOutput `pulumi:"authSettings"`
	// An `authSettingsV2` block as defined below.
	AuthSettingsV2 LinuxWebAppSlotAuthSettingsV2PtrOutput `pulumi:"authSettingsV2"`
	// A `backup` block as defined below.
	Backup LinuxWebAppSlotBackupPtrOutput `pulumi:"backup"`
	// Should Client Affinity be enabled?
	ClientAffinityEnabled pulumi.BoolPtrOutput `pulumi:"clientAffinityEnabled"`
	// Should Client Certificates be enabled?
	ClientCertificateEnabled pulumi.BoolPtrOutput `pulumi:"clientCertificateEnabled"`
	// Paths to exclude when using client certificates, separated by ;
	ClientCertificateExclusionPaths pulumi.StringPtrOutput `pulumi:"clientCertificateExclusionPaths"`
	// The Client Certificate mode. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. This property has no effect when `clientCertEnabled` is `false`. Defaults to `Required`.
	ClientCertificateMode pulumi.StringPtrOutput `pulumi:"clientCertificateMode"`
	// One or more `connectionString` blocks as defined below.
	ConnectionStrings LinuxWebAppSlotConnectionStringArrayOutput `pulumi:"connectionStrings"`
	// The identifier used by App Service to perform domain ownership verification via DNS TXT record.
	CustomDomainVerificationId pulumi.StringOutput `pulumi:"customDomainVerificationId"`
	// The default hostname of the Linux Web App.
	DefaultHostname pulumi.StringOutput `pulumi:"defaultHostname"`
	// Should the Linux Web App be enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Should the default FTP Basic Authentication publishing profile be enabled. Defaults to `true`.
	FtpPublishBasicAuthenticationEnabled pulumi.BoolPtrOutput `pulumi:"ftpPublishBasicAuthenticationEnabled"`
	// The ID of the App Service Environment used by App Service Slot.
	HostingEnvironmentId pulumi.StringOutput `pulumi:"hostingEnvironmentId"`
	// Should the Linux Web App require HTTPS connections. Defaults to `false`.
	HttpsOnly pulumi.BoolPtrOutput `pulumi:"httpsOnly"`
	// An `identity` block as defined below.
	Identity LinuxWebAppSlotIdentityPtrOutput `pulumi:"identity"`
	// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity).
	KeyVaultReferenceIdentityId pulumi.StringOutput `pulumi:"keyVaultReferenceIdentityId"`
	// The Kind value for this Linux Web App.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// A `logs` block as defined below.
	Logs LinuxWebAppSlotLogsPtrOutput `pulumi:"logs"`
	Name pulumi.StringOutput          `pulumi:"name"`
	// A list of outbound IP addresses - such as `["52.23.25.3", "52.143.43.12"]`
	OutboundIpAddressLists pulumi.StringArrayOutput `pulumi:"outboundIpAddressLists"`
	// A comma-separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`.
	OutboundIpAddresses pulumi.StringOutput `pulumi:"outboundIpAddresses"`
	// A `possibleOutboundIpAddressList`.
	PossibleOutboundIpAddressLists pulumi.StringArrayOutput `pulumi:"possibleOutboundIpAddressLists"`
	// A comma-separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outboundIpAddresses`.
	PossibleOutboundIpAddresses pulumi.StringOutput `pulumi:"possibleOutboundIpAddresses"`
	// Should public network access be enabled for the Web App. Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrOutput `pulumi:"publicNetworkAccessEnabled"`
	// The ID of the Service Plan in which to run this slot. If not specified the same Service Plan as the Linux Web App will be used.
	//
	// > **Note:** `servicePlanId` should only be specified if it differs from the Service Plan of the associated Linux Web App.
	ServicePlanId pulumi.StringPtrOutput `pulumi:"servicePlanId"`
	// A `siteConfig` block as defined below.
	SiteConfig LinuxWebAppSlotSiteConfigOutput `pulumi:"siteConfig"`
	// A `siteCredential` block as defined below.
	SiteCredentials LinuxWebAppSlotSiteCredentialArrayOutput `pulumi:"siteCredentials"`
	// One or more `storageAccount` blocks as defined below.
	StorageAccounts LinuxWebAppSlotStorageAccountArrayOutput `pulumi:"storageAccounts"`
	// A mapping of tags that should be assigned to the Linux Web App.
	Tags                   pulumi.StringMapOutput `pulumi:"tags"`
	VirtualNetworkSubnetId pulumi.StringPtrOutput `pulumi:"virtualNetworkSubnetId"`
	// Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to`true`.
	//
	// > **NOTE:** Setting this value to true will disable the ability to use `zipDeployFile` which currently relies on the default publishing profile.
	WebdeployPublishBasicAuthenticationEnabled pulumi.BoolPtrOutput `pulumi:"webdeployPublishBasicAuthenticationEnabled"`
	// The local path and filename of the Zip packaged application to deploy to this Linux Web App.
	//
	// > **Note:** Using this value requires `WEBSITE_RUN_FROM_PACKAGE=1` to be set on the App in `appSettings`. Refer to the [Azure docs](https://docs.microsoft.com/en-us/azure/app-service/deploy-run-package) for further details.
	ZipDeployFile pulumi.StringOutput `pulumi:"zipDeployFile"`
}

// NewLinuxWebAppSlot registers a new resource with the given unique name, arguments, and options.
func NewLinuxWebAppSlot(ctx *pulumi.Context,
	name string, args *LinuxWebAppSlotArgs, opts ...pulumi.ResourceOption) (*LinuxWebAppSlot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppServiceId == nil {
		return nil, errors.New("invalid value for required argument 'AppServiceId'")
	}
	if args.SiteConfig == nil {
		return nil, errors.New("invalid value for required argument 'SiteConfig'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"customDomainVerificationId",
		"siteCredentials",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LinuxWebAppSlot
	err := ctx.RegisterResource("azure:appservice/linuxWebAppSlot:LinuxWebAppSlot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLinuxWebAppSlot gets an existing LinuxWebAppSlot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLinuxWebAppSlot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LinuxWebAppSlotState, opts ...pulumi.ResourceOption) (*LinuxWebAppSlot, error) {
	var resource LinuxWebAppSlot
	err := ctx.ReadResource("azure:appservice/linuxWebAppSlot:LinuxWebAppSlot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LinuxWebAppSlot resources.
type linuxWebAppSlotState struct {
	// A `appMetadata`.
	AppMetadata map[string]string `pulumi:"appMetadata"`
	// The ID of the Linux Web App this Deployment Slot will be part of.
	AppServiceId *string `pulumi:"appServiceId"`
	// A map of key-value pairs of App Settings.
	AppSettings map[string]string `pulumi:"appSettings"`
	// An `authSettings` block as defined below.
	AuthSettings *LinuxWebAppSlotAuthSettings `pulumi:"authSettings"`
	// An `authSettingsV2` block as defined below.
	AuthSettingsV2 *LinuxWebAppSlotAuthSettingsV2 `pulumi:"authSettingsV2"`
	// A `backup` block as defined below.
	Backup *LinuxWebAppSlotBackup `pulumi:"backup"`
	// Should Client Affinity be enabled?
	ClientAffinityEnabled *bool `pulumi:"clientAffinityEnabled"`
	// Should Client Certificates be enabled?
	ClientCertificateEnabled *bool `pulumi:"clientCertificateEnabled"`
	// Paths to exclude when using client certificates, separated by ;
	ClientCertificateExclusionPaths *string `pulumi:"clientCertificateExclusionPaths"`
	// The Client Certificate mode. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. This property has no effect when `clientCertEnabled` is `false`. Defaults to `Required`.
	ClientCertificateMode *string `pulumi:"clientCertificateMode"`
	// One or more `connectionString` blocks as defined below.
	ConnectionStrings []LinuxWebAppSlotConnectionString `pulumi:"connectionStrings"`
	// The identifier used by App Service to perform domain ownership verification via DNS TXT record.
	CustomDomainVerificationId *string `pulumi:"customDomainVerificationId"`
	// The default hostname of the Linux Web App.
	DefaultHostname *string `pulumi:"defaultHostname"`
	// Should the Linux Web App be enabled? Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Should the default FTP Basic Authentication publishing profile be enabled. Defaults to `true`.
	FtpPublishBasicAuthenticationEnabled *bool `pulumi:"ftpPublishBasicAuthenticationEnabled"`
	// The ID of the App Service Environment used by App Service Slot.
	HostingEnvironmentId *string `pulumi:"hostingEnvironmentId"`
	// Should the Linux Web App require HTTPS connections. Defaults to `false`.
	HttpsOnly *bool `pulumi:"httpsOnly"`
	// An `identity` block as defined below.
	Identity *LinuxWebAppSlotIdentity `pulumi:"identity"`
	// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity).
	KeyVaultReferenceIdentityId *string `pulumi:"keyVaultReferenceIdentityId"`
	// The Kind value for this Linux Web App.
	Kind *string `pulumi:"kind"`
	// A `logs` block as defined below.
	Logs *LinuxWebAppSlotLogs `pulumi:"logs"`
	Name *string              `pulumi:"name"`
	// A list of outbound IP addresses - such as `["52.23.25.3", "52.143.43.12"]`
	OutboundIpAddressLists []string `pulumi:"outboundIpAddressLists"`
	// A comma-separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`.
	OutboundIpAddresses *string `pulumi:"outboundIpAddresses"`
	// A `possibleOutboundIpAddressList`.
	PossibleOutboundIpAddressLists []string `pulumi:"possibleOutboundIpAddressLists"`
	// A comma-separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outboundIpAddresses`.
	PossibleOutboundIpAddresses *string `pulumi:"possibleOutboundIpAddresses"`
	// Should public network access be enabled for the Web App. Defaults to `true`.
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// The ID of the Service Plan in which to run this slot. If not specified the same Service Plan as the Linux Web App will be used.
	//
	// > **Note:** `servicePlanId` should only be specified if it differs from the Service Plan of the associated Linux Web App.
	ServicePlanId *string `pulumi:"servicePlanId"`
	// A `siteConfig` block as defined below.
	SiteConfig *LinuxWebAppSlotSiteConfig `pulumi:"siteConfig"`
	// A `siteCredential` block as defined below.
	SiteCredentials []LinuxWebAppSlotSiteCredential `pulumi:"siteCredentials"`
	// One or more `storageAccount` blocks as defined below.
	StorageAccounts []LinuxWebAppSlotStorageAccount `pulumi:"storageAccounts"`
	// A mapping of tags that should be assigned to the Linux Web App.
	Tags                   map[string]string `pulumi:"tags"`
	VirtualNetworkSubnetId *string           `pulumi:"virtualNetworkSubnetId"`
	// Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to`true`.
	//
	// > **NOTE:** Setting this value to true will disable the ability to use `zipDeployFile` which currently relies on the default publishing profile.
	WebdeployPublishBasicAuthenticationEnabled *bool `pulumi:"webdeployPublishBasicAuthenticationEnabled"`
	// The local path and filename of the Zip packaged application to deploy to this Linux Web App.
	//
	// > **Note:** Using this value requires `WEBSITE_RUN_FROM_PACKAGE=1` to be set on the App in `appSettings`. Refer to the [Azure docs](https://docs.microsoft.com/en-us/azure/app-service/deploy-run-package) for further details.
	ZipDeployFile *string `pulumi:"zipDeployFile"`
}

type LinuxWebAppSlotState struct {
	// A `appMetadata`.
	AppMetadata pulumi.StringMapInput
	// The ID of the Linux Web App this Deployment Slot will be part of.
	AppServiceId pulumi.StringPtrInput
	// A map of key-value pairs of App Settings.
	AppSettings pulumi.StringMapInput
	// An `authSettings` block as defined below.
	AuthSettings LinuxWebAppSlotAuthSettingsPtrInput
	// An `authSettingsV2` block as defined below.
	AuthSettingsV2 LinuxWebAppSlotAuthSettingsV2PtrInput
	// A `backup` block as defined below.
	Backup LinuxWebAppSlotBackupPtrInput
	// Should Client Affinity be enabled?
	ClientAffinityEnabled pulumi.BoolPtrInput
	// Should Client Certificates be enabled?
	ClientCertificateEnabled pulumi.BoolPtrInput
	// Paths to exclude when using client certificates, separated by ;
	ClientCertificateExclusionPaths pulumi.StringPtrInput
	// The Client Certificate mode. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. This property has no effect when `clientCertEnabled` is `false`. Defaults to `Required`.
	ClientCertificateMode pulumi.StringPtrInput
	// One or more `connectionString` blocks as defined below.
	ConnectionStrings LinuxWebAppSlotConnectionStringArrayInput
	// The identifier used by App Service to perform domain ownership verification via DNS TXT record.
	CustomDomainVerificationId pulumi.StringPtrInput
	// The default hostname of the Linux Web App.
	DefaultHostname pulumi.StringPtrInput
	// Should the Linux Web App be enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// Should the default FTP Basic Authentication publishing profile be enabled. Defaults to `true`.
	FtpPublishBasicAuthenticationEnabled pulumi.BoolPtrInput
	// The ID of the App Service Environment used by App Service Slot.
	HostingEnvironmentId pulumi.StringPtrInput
	// Should the Linux Web App require HTTPS connections. Defaults to `false`.
	HttpsOnly pulumi.BoolPtrInput
	// An `identity` block as defined below.
	Identity LinuxWebAppSlotIdentityPtrInput
	// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity).
	KeyVaultReferenceIdentityId pulumi.StringPtrInput
	// The Kind value for this Linux Web App.
	Kind pulumi.StringPtrInput
	// A `logs` block as defined below.
	Logs LinuxWebAppSlotLogsPtrInput
	Name pulumi.StringPtrInput
	// A list of outbound IP addresses - such as `["52.23.25.3", "52.143.43.12"]`
	OutboundIpAddressLists pulumi.StringArrayInput
	// A comma-separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`.
	OutboundIpAddresses pulumi.StringPtrInput
	// A `possibleOutboundIpAddressList`.
	PossibleOutboundIpAddressLists pulumi.StringArrayInput
	// A comma-separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outboundIpAddresses`.
	PossibleOutboundIpAddresses pulumi.StringPtrInput
	// Should public network access be enabled for the Web App. Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// The ID of the Service Plan in which to run this slot. If not specified the same Service Plan as the Linux Web App will be used.
	//
	// > **Note:** `servicePlanId` should only be specified if it differs from the Service Plan of the associated Linux Web App.
	ServicePlanId pulumi.StringPtrInput
	// A `siteConfig` block as defined below.
	SiteConfig LinuxWebAppSlotSiteConfigPtrInput
	// A `siteCredential` block as defined below.
	SiteCredentials LinuxWebAppSlotSiteCredentialArrayInput
	// One or more `storageAccount` blocks as defined below.
	StorageAccounts LinuxWebAppSlotStorageAccountArrayInput
	// A mapping of tags that should be assigned to the Linux Web App.
	Tags                   pulumi.StringMapInput
	VirtualNetworkSubnetId pulumi.StringPtrInput
	// Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to`true`.
	//
	// > **NOTE:** Setting this value to true will disable the ability to use `zipDeployFile` which currently relies on the default publishing profile.
	WebdeployPublishBasicAuthenticationEnabled pulumi.BoolPtrInput
	// The local path and filename of the Zip packaged application to deploy to this Linux Web App.
	//
	// > **Note:** Using this value requires `WEBSITE_RUN_FROM_PACKAGE=1` to be set on the App in `appSettings`. Refer to the [Azure docs](https://docs.microsoft.com/en-us/azure/app-service/deploy-run-package) for further details.
	ZipDeployFile pulumi.StringPtrInput
}

func (LinuxWebAppSlotState) ElementType() reflect.Type {
	return reflect.TypeOf((*linuxWebAppSlotState)(nil)).Elem()
}

type linuxWebAppSlotArgs struct {
	// The ID of the Linux Web App this Deployment Slot will be part of.
	AppServiceId string `pulumi:"appServiceId"`
	// A map of key-value pairs of App Settings.
	AppSettings map[string]string `pulumi:"appSettings"`
	// An `authSettings` block as defined below.
	AuthSettings *LinuxWebAppSlotAuthSettings `pulumi:"authSettings"`
	// An `authSettingsV2` block as defined below.
	AuthSettingsV2 *LinuxWebAppSlotAuthSettingsV2 `pulumi:"authSettingsV2"`
	// A `backup` block as defined below.
	Backup *LinuxWebAppSlotBackup `pulumi:"backup"`
	// Should Client Affinity be enabled?
	ClientAffinityEnabled *bool `pulumi:"clientAffinityEnabled"`
	// Should Client Certificates be enabled?
	ClientCertificateEnabled *bool `pulumi:"clientCertificateEnabled"`
	// Paths to exclude when using client certificates, separated by ;
	ClientCertificateExclusionPaths *string `pulumi:"clientCertificateExclusionPaths"`
	// The Client Certificate mode. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. This property has no effect when `clientCertEnabled` is `false`. Defaults to `Required`.
	ClientCertificateMode *string `pulumi:"clientCertificateMode"`
	// One or more `connectionString` blocks as defined below.
	ConnectionStrings []LinuxWebAppSlotConnectionString `pulumi:"connectionStrings"`
	// Should the Linux Web App be enabled? Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Should the default FTP Basic Authentication publishing profile be enabled. Defaults to `true`.
	FtpPublishBasicAuthenticationEnabled *bool `pulumi:"ftpPublishBasicAuthenticationEnabled"`
	// Should the Linux Web App require HTTPS connections. Defaults to `false`.
	HttpsOnly *bool `pulumi:"httpsOnly"`
	// An `identity` block as defined below.
	Identity *LinuxWebAppSlotIdentity `pulumi:"identity"`
	// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity).
	KeyVaultReferenceIdentityId *string `pulumi:"keyVaultReferenceIdentityId"`
	// A `logs` block as defined below.
	Logs *LinuxWebAppSlotLogs `pulumi:"logs"`
	Name *string              `pulumi:"name"`
	// Should public network access be enabled for the Web App. Defaults to `true`.
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// The ID of the Service Plan in which to run this slot. If not specified the same Service Plan as the Linux Web App will be used.
	//
	// > **Note:** `servicePlanId` should only be specified if it differs from the Service Plan of the associated Linux Web App.
	ServicePlanId *string `pulumi:"servicePlanId"`
	// A `siteConfig` block as defined below.
	SiteConfig LinuxWebAppSlotSiteConfig `pulumi:"siteConfig"`
	// One or more `storageAccount` blocks as defined below.
	StorageAccounts []LinuxWebAppSlotStorageAccount `pulumi:"storageAccounts"`
	// A mapping of tags that should be assigned to the Linux Web App.
	Tags                   map[string]string `pulumi:"tags"`
	VirtualNetworkSubnetId *string           `pulumi:"virtualNetworkSubnetId"`
	// Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to`true`.
	//
	// > **NOTE:** Setting this value to true will disable the ability to use `zipDeployFile` which currently relies on the default publishing profile.
	WebdeployPublishBasicAuthenticationEnabled *bool `pulumi:"webdeployPublishBasicAuthenticationEnabled"`
	// The local path and filename of the Zip packaged application to deploy to this Linux Web App.
	//
	// > **Note:** Using this value requires `WEBSITE_RUN_FROM_PACKAGE=1` to be set on the App in `appSettings`. Refer to the [Azure docs](https://docs.microsoft.com/en-us/azure/app-service/deploy-run-package) for further details.
	ZipDeployFile *string `pulumi:"zipDeployFile"`
}

// The set of arguments for constructing a LinuxWebAppSlot resource.
type LinuxWebAppSlotArgs struct {
	// The ID of the Linux Web App this Deployment Slot will be part of.
	AppServiceId pulumi.StringInput
	// A map of key-value pairs of App Settings.
	AppSettings pulumi.StringMapInput
	// An `authSettings` block as defined below.
	AuthSettings LinuxWebAppSlotAuthSettingsPtrInput
	// An `authSettingsV2` block as defined below.
	AuthSettingsV2 LinuxWebAppSlotAuthSettingsV2PtrInput
	// A `backup` block as defined below.
	Backup LinuxWebAppSlotBackupPtrInput
	// Should Client Affinity be enabled?
	ClientAffinityEnabled pulumi.BoolPtrInput
	// Should Client Certificates be enabled?
	ClientCertificateEnabled pulumi.BoolPtrInput
	// Paths to exclude when using client certificates, separated by ;
	ClientCertificateExclusionPaths pulumi.StringPtrInput
	// The Client Certificate mode. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. This property has no effect when `clientCertEnabled` is `false`. Defaults to `Required`.
	ClientCertificateMode pulumi.StringPtrInput
	// One or more `connectionString` blocks as defined below.
	ConnectionStrings LinuxWebAppSlotConnectionStringArrayInput
	// Should the Linux Web App be enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// Should the default FTP Basic Authentication publishing profile be enabled. Defaults to `true`.
	FtpPublishBasicAuthenticationEnabled pulumi.BoolPtrInput
	// Should the Linux Web App require HTTPS connections. Defaults to `false`.
	HttpsOnly pulumi.BoolPtrInput
	// An `identity` block as defined below.
	Identity LinuxWebAppSlotIdentityPtrInput
	// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity).
	KeyVaultReferenceIdentityId pulumi.StringPtrInput
	// A `logs` block as defined below.
	Logs LinuxWebAppSlotLogsPtrInput
	Name pulumi.StringPtrInput
	// Should public network access be enabled for the Web App. Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// The ID of the Service Plan in which to run this slot. If not specified the same Service Plan as the Linux Web App will be used.
	//
	// > **Note:** `servicePlanId` should only be specified if it differs from the Service Plan of the associated Linux Web App.
	ServicePlanId pulumi.StringPtrInput
	// A `siteConfig` block as defined below.
	SiteConfig LinuxWebAppSlotSiteConfigInput
	// One or more `storageAccount` blocks as defined below.
	StorageAccounts LinuxWebAppSlotStorageAccountArrayInput
	// A mapping of tags that should be assigned to the Linux Web App.
	Tags                   pulumi.StringMapInput
	VirtualNetworkSubnetId pulumi.StringPtrInput
	// Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to`true`.
	//
	// > **NOTE:** Setting this value to true will disable the ability to use `zipDeployFile` which currently relies on the default publishing profile.
	WebdeployPublishBasicAuthenticationEnabled pulumi.BoolPtrInput
	// The local path and filename of the Zip packaged application to deploy to this Linux Web App.
	//
	// > **Note:** Using this value requires `WEBSITE_RUN_FROM_PACKAGE=1` to be set on the App in `appSettings`. Refer to the [Azure docs](https://docs.microsoft.com/en-us/azure/app-service/deploy-run-package) for further details.
	ZipDeployFile pulumi.StringPtrInput
}

func (LinuxWebAppSlotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*linuxWebAppSlotArgs)(nil)).Elem()
}

type LinuxWebAppSlotInput interface {
	pulumi.Input

	ToLinuxWebAppSlotOutput() LinuxWebAppSlotOutput
	ToLinuxWebAppSlotOutputWithContext(ctx context.Context) LinuxWebAppSlotOutput
}

func (*LinuxWebAppSlot) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxWebAppSlot)(nil)).Elem()
}

func (i *LinuxWebAppSlot) ToLinuxWebAppSlotOutput() LinuxWebAppSlotOutput {
	return i.ToLinuxWebAppSlotOutputWithContext(context.Background())
}

func (i *LinuxWebAppSlot) ToLinuxWebAppSlotOutputWithContext(ctx context.Context) LinuxWebAppSlotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxWebAppSlotOutput)
}

// LinuxWebAppSlotArrayInput is an input type that accepts LinuxWebAppSlotArray and LinuxWebAppSlotArrayOutput values.
// You can construct a concrete instance of `LinuxWebAppSlotArrayInput` via:
//
//	LinuxWebAppSlotArray{ LinuxWebAppSlotArgs{...} }
type LinuxWebAppSlotArrayInput interface {
	pulumi.Input

	ToLinuxWebAppSlotArrayOutput() LinuxWebAppSlotArrayOutput
	ToLinuxWebAppSlotArrayOutputWithContext(context.Context) LinuxWebAppSlotArrayOutput
}

type LinuxWebAppSlotArray []LinuxWebAppSlotInput

func (LinuxWebAppSlotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LinuxWebAppSlot)(nil)).Elem()
}

func (i LinuxWebAppSlotArray) ToLinuxWebAppSlotArrayOutput() LinuxWebAppSlotArrayOutput {
	return i.ToLinuxWebAppSlotArrayOutputWithContext(context.Background())
}

func (i LinuxWebAppSlotArray) ToLinuxWebAppSlotArrayOutputWithContext(ctx context.Context) LinuxWebAppSlotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxWebAppSlotArrayOutput)
}

// LinuxWebAppSlotMapInput is an input type that accepts LinuxWebAppSlotMap and LinuxWebAppSlotMapOutput values.
// You can construct a concrete instance of `LinuxWebAppSlotMapInput` via:
//
//	LinuxWebAppSlotMap{ "key": LinuxWebAppSlotArgs{...} }
type LinuxWebAppSlotMapInput interface {
	pulumi.Input

	ToLinuxWebAppSlotMapOutput() LinuxWebAppSlotMapOutput
	ToLinuxWebAppSlotMapOutputWithContext(context.Context) LinuxWebAppSlotMapOutput
}

type LinuxWebAppSlotMap map[string]LinuxWebAppSlotInput

func (LinuxWebAppSlotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LinuxWebAppSlot)(nil)).Elem()
}

func (i LinuxWebAppSlotMap) ToLinuxWebAppSlotMapOutput() LinuxWebAppSlotMapOutput {
	return i.ToLinuxWebAppSlotMapOutputWithContext(context.Background())
}

func (i LinuxWebAppSlotMap) ToLinuxWebAppSlotMapOutputWithContext(ctx context.Context) LinuxWebAppSlotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxWebAppSlotMapOutput)
}

type LinuxWebAppSlotOutput struct{ *pulumi.OutputState }

func (LinuxWebAppSlotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxWebAppSlot)(nil)).Elem()
}

func (o LinuxWebAppSlotOutput) ToLinuxWebAppSlotOutput() LinuxWebAppSlotOutput {
	return o
}

func (o LinuxWebAppSlotOutput) ToLinuxWebAppSlotOutputWithContext(ctx context.Context) LinuxWebAppSlotOutput {
	return o
}

// A `appMetadata`.
func (o LinuxWebAppSlotOutput) AppMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) pulumi.StringMapOutput { return v.AppMetadata }).(pulumi.StringMapOutput)
}

// The ID of the Linux Web App this Deployment Slot will be part of.
func (o LinuxWebAppSlotOutput) AppServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) pulumi.StringOutput { return v.AppServiceId }).(pulumi.StringOutput)
}

// A map of key-value pairs of App Settings.
func (o LinuxWebAppSlotOutput) AppSettings() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) pulumi.StringMapOutput { return v.AppSettings }).(pulumi.StringMapOutput)
}

// An `authSettings` block as defined below.
func (o LinuxWebAppSlotOutput) AuthSettings() LinuxWebAppSlotAuthSettingsPtrOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) LinuxWebAppSlotAuthSettingsPtrOutput { return v.AuthSettings }).(LinuxWebAppSlotAuthSettingsPtrOutput)
}

// An `authSettingsV2` block as defined below.
func (o LinuxWebAppSlotOutput) AuthSettingsV2() LinuxWebAppSlotAuthSettingsV2PtrOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) LinuxWebAppSlotAuthSettingsV2PtrOutput { return v.AuthSettingsV2 }).(LinuxWebAppSlotAuthSettingsV2PtrOutput)
}

// A `backup` block as defined below.
func (o LinuxWebAppSlotOutput) Backup() LinuxWebAppSlotBackupPtrOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) LinuxWebAppSlotBackupPtrOutput { return v.Backup }).(LinuxWebAppSlotBackupPtrOutput)
}

// Should Client Affinity be enabled?
func (o LinuxWebAppSlotOutput) ClientAffinityEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) pulumi.BoolPtrOutput { return v.ClientAffinityEnabled }).(pulumi.BoolPtrOutput)
}

// Should Client Certificates be enabled?
func (o LinuxWebAppSlotOutput) ClientCertificateEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) pulumi.BoolPtrOutput { return v.ClientCertificateEnabled }).(pulumi.BoolPtrOutput)
}

// Paths to exclude when using client certificates, separated by ;
func (o LinuxWebAppSlotOutput) ClientCertificateExclusionPaths() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) pulumi.StringPtrOutput { return v.ClientCertificateExclusionPaths }).(pulumi.StringPtrOutput)
}

// The Client Certificate mode. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. This property has no effect when `clientCertEnabled` is `false`. Defaults to `Required`.
func (o LinuxWebAppSlotOutput) ClientCertificateMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) pulumi.StringPtrOutput { return v.ClientCertificateMode }).(pulumi.StringPtrOutput)
}

// One or more `connectionString` blocks as defined below.
func (o LinuxWebAppSlotOutput) ConnectionStrings() LinuxWebAppSlotConnectionStringArrayOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) LinuxWebAppSlotConnectionStringArrayOutput { return v.ConnectionStrings }).(LinuxWebAppSlotConnectionStringArrayOutput)
}

// The identifier used by App Service to perform domain ownership verification via DNS TXT record.
func (o LinuxWebAppSlotOutput) CustomDomainVerificationId() pulumi.StringOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) pulumi.StringOutput { return v.CustomDomainVerificationId }).(pulumi.StringOutput)
}

// The default hostname of the Linux Web App.
func (o LinuxWebAppSlotOutput) DefaultHostname() pulumi.StringOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) pulumi.StringOutput { return v.DefaultHostname }).(pulumi.StringOutput)
}

// Should the Linux Web App be enabled? Defaults to `true`.
func (o LinuxWebAppSlotOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Should the default FTP Basic Authentication publishing profile be enabled. Defaults to `true`.
func (o LinuxWebAppSlotOutput) FtpPublishBasicAuthenticationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) pulumi.BoolPtrOutput { return v.FtpPublishBasicAuthenticationEnabled }).(pulumi.BoolPtrOutput)
}

// The ID of the App Service Environment used by App Service Slot.
func (o LinuxWebAppSlotOutput) HostingEnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) pulumi.StringOutput { return v.HostingEnvironmentId }).(pulumi.StringOutput)
}

// Should the Linux Web App require HTTPS connections. Defaults to `false`.
func (o LinuxWebAppSlotOutput) HttpsOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) pulumi.BoolPtrOutput { return v.HttpsOnly }).(pulumi.BoolPtrOutput)
}

// An `identity` block as defined below.
func (o LinuxWebAppSlotOutput) Identity() LinuxWebAppSlotIdentityPtrOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) LinuxWebAppSlotIdentityPtrOutput { return v.Identity }).(LinuxWebAppSlotIdentityPtrOutput)
}

// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity).
func (o LinuxWebAppSlotOutput) KeyVaultReferenceIdentityId() pulumi.StringOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) pulumi.StringOutput { return v.KeyVaultReferenceIdentityId }).(pulumi.StringOutput)
}

// The Kind value for this Linux Web App.
func (o LinuxWebAppSlotOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// A `logs` block as defined below.
func (o LinuxWebAppSlotOutput) Logs() LinuxWebAppSlotLogsPtrOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) LinuxWebAppSlotLogsPtrOutput { return v.Logs }).(LinuxWebAppSlotLogsPtrOutput)
}

func (o LinuxWebAppSlotOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of outbound IP addresses - such as `["52.23.25.3", "52.143.43.12"]`
func (o LinuxWebAppSlotOutput) OutboundIpAddressLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) pulumi.StringArrayOutput { return v.OutboundIpAddressLists }).(pulumi.StringArrayOutput)
}

// A comma-separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`.
func (o LinuxWebAppSlotOutput) OutboundIpAddresses() pulumi.StringOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) pulumi.StringOutput { return v.OutboundIpAddresses }).(pulumi.StringOutput)
}

// A `possibleOutboundIpAddressList`.
func (o LinuxWebAppSlotOutput) PossibleOutboundIpAddressLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) pulumi.StringArrayOutput { return v.PossibleOutboundIpAddressLists }).(pulumi.StringArrayOutput)
}

// A comma-separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outboundIpAddresses`.
func (o LinuxWebAppSlotOutput) PossibleOutboundIpAddresses() pulumi.StringOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) pulumi.StringOutput { return v.PossibleOutboundIpAddresses }).(pulumi.StringOutput)
}

// Should public network access be enabled for the Web App. Defaults to `true`.
func (o LinuxWebAppSlotOutput) PublicNetworkAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) pulumi.BoolPtrOutput { return v.PublicNetworkAccessEnabled }).(pulumi.BoolPtrOutput)
}

// The ID of the Service Plan in which to run this slot. If not specified the same Service Plan as the Linux Web App will be used.
//
// > **Note:** `servicePlanId` should only be specified if it differs from the Service Plan of the associated Linux Web App.
func (o LinuxWebAppSlotOutput) ServicePlanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) pulumi.StringPtrOutput { return v.ServicePlanId }).(pulumi.StringPtrOutput)
}

// A `siteConfig` block as defined below.
func (o LinuxWebAppSlotOutput) SiteConfig() LinuxWebAppSlotSiteConfigOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) LinuxWebAppSlotSiteConfigOutput { return v.SiteConfig }).(LinuxWebAppSlotSiteConfigOutput)
}

// A `siteCredential` block as defined below.
func (o LinuxWebAppSlotOutput) SiteCredentials() LinuxWebAppSlotSiteCredentialArrayOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) LinuxWebAppSlotSiteCredentialArrayOutput { return v.SiteCredentials }).(LinuxWebAppSlotSiteCredentialArrayOutput)
}

// One or more `storageAccount` blocks as defined below.
func (o LinuxWebAppSlotOutput) StorageAccounts() LinuxWebAppSlotStorageAccountArrayOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) LinuxWebAppSlotStorageAccountArrayOutput { return v.StorageAccounts }).(LinuxWebAppSlotStorageAccountArrayOutput)
}

// A mapping of tags that should be assigned to the Linux Web App.
func (o LinuxWebAppSlotOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o LinuxWebAppSlotOutput) VirtualNetworkSubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) pulumi.StringPtrOutput { return v.VirtualNetworkSubnetId }).(pulumi.StringPtrOutput)
}

// Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to`true`.
//
// > **NOTE:** Setting this value to true will disable the ability to use `zipDeployFile` which currently relies on the default publishing profile.
func (o LinuxWebAppSlotOutput) WebdeployPublishBasicAuthenticationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) pulumi.BoolPtrOutput { return v.WebdeployPublishBasicAuthenticationEnabled }).(pulumi.BoolPtrOutput)
}

// The local path and filename of the Zip packaged application to deploy to this Linux Web App.
//
// > **Note:** Using this value requires `WEBSITE_RUN_FROM_PACKAGE=1` to be set on the App in `appSettings`. Refer to the [Azure docs](https://docs.microsoft.com/en-us/azure/app-service/deploy-run-package) for further details.
func (o LinuxWebAppSlotOutput) ZipDeployFile() pulumi.StringOutput {
	return o.ApplyT(func(v *LinuxWebAppSlot) pulumi.StringOutput { return v.ZipDeployFile }).(pulumi.StringOutput)
}

type LinuxWebAppSlotArrayOutput struct{ *pulumi.OutputState }

func (LinuxWebAppSlotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LinuxWebAppSlot)(nil)).Elem()
}

func (o LinuxWebAppSlotArrayOutput) ToLinuxWebAppSlotArrayOutput() LinuxWebAppSlotArrayOutput {
	return o
}

func (o LinuxWebAppSlotArrayOutput) ToLinuxWebAppSlotArrayOutputWithContext(ctx context.Context) LinuxWebAppSlotArrayOutput {
	return o
}

func (o LinuxWebAppSlotArrayOutput) Index(i pulumi.IntInput) LinuxWebAppSlotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LinuxWebAppSlot {
		return vs[0].([]*LinuxWebAppSlot)[vs[1].(int)]
	}).(LinuxWebAppSlotOutput)
}

type LinuxWebAppSlotMapOutput struct{ *pulumi.OutputState }

func (LinuxWebAppSlotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LinuxWebAppSlot)(nil)).Elem()
}

func (o LinuxWebAppSlotMapOutput) ToLinuxWebAppSlotMapOutput() LinuxWebAppSlotMapOutput {
	return o
}

func (o LinuxWebAppSlotMapOutput) ToLinuxWebAppSlotMapOutputWithContext(ctx context.Context) LinuxWebAppSlotMapOutput {
	return o
}

func (o LinuxWebAppSlotMapOutput) MapIndex(k pulumi.StringInput) LinuxWebAppSlotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LinuxWebAppSlot {
		return vs[0].(map[string]*LinuxWebAppSlot)[vs[1].(string)]
	}).(LinuxWebAppSlotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LinuxWebAppSlotInput)(nil)).Elem(), &LinuxWebAppSlot{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinuxWebAppSlotArrayInput)(nil)).Elem(), LinuxWebAppSlotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinuxWebAppSlotMapInput)(nil)).Elem(), LinuxWebAppSlotMap{})
	pulumi.RegisterOutputType(LinuxWebAppSlotOutput{})
	pulumi.RegisterOutputType(LinuxWebAppSlotArrayOutput{})
	pulumi.RegisterOutputType(LinuxWebAppSlotMapOutput{})
}
