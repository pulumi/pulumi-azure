// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an App Service Certificate Order.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/appservice"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = appservice.NewCertificateOrder(ctx, "exampleCertificateOrder", &appservice.CertificateOrderArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          pulumi.String("global"),
//				DistinguishedName: pulumi.String("CN=example.com"),
//				ProductType:       pulumi.String("Standard"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// App Service Certificate Orders can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:appservice/certificateOrder:CertificateOrder example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.CertificateRegistration/certificateOrders/certificateorder1
//
// ```
type CertificateOrder struct {
	pulumi.CustomResourceState

	// Reasons why App Service Certificate is not renewable at the current moment.
	AppServiceCertificateNotRenewableReasons pulumi.StringArrayOutput `pulumi:"appServiceCertificateNotRenewableReasons"`
	// true if the certificate should be automatically renewed when it expires; otherwise, false. Defaults to `true`.
	AutoRenew pulumi.BoolPtrOutput `pulumi:"autoRenew"`
	// State of the Key Vault secret. A `certificates` block as defined below.
	Certificates CertificateOrderCertificateArrayOutput `pulumi:"certificates"`
	// Last CSR that was created for this order.
	Csr pulumi.StringOutput `pulumi:"csr"`
	// The Distinguished Name for the App Service Certificate Order.
	//
	// > **NOTE:** Either `csr` or `distinguishedName` must be set - but not both.
	DistinguishedName pulumi.StringOutput `pulumi:"distinguishedName"`
	// Domain verification token.
	DomainVerificationToken pulumi.StringOutput `pulumi:"domainVerificationToken"`
	// Certificate expiration time.
	ExpirationTime pulumi.StringOutput `pulumi:"expirationTime"`
	// Certificate thumbprint intermediate certificate.
	IntermediateThumbprint pulumi.StringOutput `pulumi:"intermediateThumbprint"`
	// Whether the private key is external or not.
	IsPrivateKeyExternal pulumi.BoolOutput `pulumi:"isPrivateKeyExternal"`
	// Certificate key size. Defaults to `2048`.
	KeySize pulumi.IntPtrOutput `pulumi:"keySize"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created. Currently the only valid value is `global`.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name of the certificate. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Certificate product type, such as `Standard` or `WildCard`. Defaults to `Standard`.
	ProductType pulumi.StringPtrOutput `pulumi:"productType"`
	// The name of the resource group in which to create the certificate. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Certificate thumbprint for root certificate.
	RootThumbprint pulumi.StringOutput `pulumi:"rootThumbprint"`
	// Certificate thumbprint for signed certificate.
	SignedCertificateThumbprint pulumi.StringOutput `pulumi:"signedCertificateThumbprint"`
	// Current order status.
	Status pulumi.StringOutput `pulumi:"status"`
	// (Optional) A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Duration in years (must be between `1` and `3`). Defaults to `1`.
	ValidityInYears pulumi.IntPtrOutput `pulumi:"validityInYears"`
}

// NewCertificateOrder registers a new resource with the given unique name, arguments, and options.
func NewCertificateOrder(ctx *pulumi.Context,
	name string, args *CertificateOrderArgs, opts ...pulumi.ResourceOption) (*CertificateOrder, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CertificateOrder
	err := ctx.RegisterResource("azure:appservice/certificateOrder:CertificateOrder", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificateOrder gets an existing CertificateOrder resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificateOrder(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateOrderState, opts ...pulumi.ResourceOption) (*CertificateOrder, error) {
	var resource CertificateOrder
	err := ctx.ReadResource("azure:appservice/certificateOrder:CertificateOrder", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificateOrder resources.
type certificateOrderState struct {
	// Reasons why App Service Certificate is not renewable at the current moment.
	AppServiceCertificateNotRenewableReasons []string `pulumi:"appServiceCertificateNotRenewableReasons"`
	// true if the certificate should be automatically renewed when it expires; otherwise, false. Defaults to `true`.
	AutoRenew *bool `pulumi:"autoRenew"`
	// State of the Key Vault secret. A `certificates` block as defined below.
	Certificates []CertificateOrderCertificate `pulumi:"certificates"`
	// Last CSR that was created for this order.
	Csr *string `pulumi:"csr"`
	// The Distinguished Name for the App Service Certificate Order.
	//
	// > **NOTE:** Either `csr` or `distinguishedName` must be set - but not both.
	DistinguishedName *string `pulumi:"distinguishedName"`
	// Domain verification token.
	DomainVerificationToken *string `pulumi:"domainVerificationToken"`
	// Certificate expiration time.
	ExpirationTime *string `pulumi:"expirationTime"`
	// Certificate thumbprint intermediate certificate.
	IntermediateThumbprint *string `pulumi:"intermediateThumbprint"`
	// Whether the private key is external or not.
	IsPrivateKeyExternal *bool `pulumi:"isPrivateKeyExternal"`
	// Certificate key size. Defaults to `2048`.
	KeySize *int `pulumi:"keySize"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created. Currently the only valid value is `global`.
	Location *string `pulumi:"location"`
	// Specifies the name of the certificate. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Certificate product type, such as `Standard` or `WildCard`. Defaults to `Standard`.
	ProductType *string `pulumi:"productType"`
	// The name of the resource group in which to create the certificate. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Certificate thumbprint for root certificate.
	RootThumbprint *string `pulumi:"rootThumbprint"`
	// Certificate thumbprint for signed certificate.
	SignedCertificateThumbprint *string `pulumi:"signedCertificateThumbprint"`
	// Current order status.
	Status *string `pulumi:"status"`
	// (Optional) A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Duration in years (must be between `1` and `3`). Defaults to `1`.
	ValidityInYears *int `pulumi:"validityInYears"`
}

type CertificateOrderState struct {
	// Reasons why App Service Certificate is not renewable at the current moment.
	AppServiceCertificateNotRenewableReasons pulumi.StringArrayInput
	// true if the certificate should be automatically renewed when it expires; otherwise, false. Defaults to `true`.
	AutoRenew pulumi.BoolPtrInput
	// State of the Key Vault secret. A `certificates` block as defined below.
	Certificates CertificateOrderCertificateArrayInput
	// Last CSR that was created for this order.
	Csr pulumi.StringPtrInput
	// The Distinguished Name for the App Service Certificate Order.
	//
	// > **NOTE:** Either `csr` or `distinguishedName` must be set - but not both.
	DistinguishedName pulumi.StringPtrInput
	// Domain verification token.
	DomainVerificationToken pulumi.StringPtrInput
	// Certificate expiration time.
	ExpirationTime pulumi.StringPtrInput
	// Certificate thumbprint intermediate certificate.
	IntermediateThumbprint pulumi.StringPtrInput
	// Whether the private key is external or not.
	IsPrivateKeyExternal pulumi.BoolPtrInput
	// Certificate key size. Defaults to `2048`.
	KeySize pulumi.IntPtrInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created. Currently the only valid value is `global`.
	Location pulumi.StringPtrInput
	// Specifies the name of the certificate. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Certificate product type, such as `Standard` or `WildCard`. Defaults to `Standard`.
	ProductType pulumi.StringPtrInput
	// The name of the resource group in which to create the certificate. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// Certificate thumbprint for root certificate.
	RootThumbprint pulumi.StringPtrInput
	// Certificate thumbprint for signed certificate.
	SignedCertificateThumbprint pulumi.StringPtrInput
	// Current order status.
	Status pulumi.StringPtrInput
	// (Optional) A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// Duration in years (must be between `1` and `3`). Defaults to `1`.
	ValidityInYears pulumi.IntPtrInput
}

func (CertificateOrderState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateOrderState)(nil)).Elem()
}

type certificateOrderArgs struct {
	// true if the certificate should be automatically renewed when it expires; otherwise, false. Defaults to `true`.
	AutoRenew *bool `pulumi:"autoRenew"`
	// Last CSR that was created for this order.
	Csr *string `pulumi:"csr"`
	// The Distinguished Name for the App Service Certificate Order.
	//
	// > **NOTE:** Either `csr` or `distinguishedName` must be set - but not both.
	DistinguishedName *string `pulumi:"distinguishedName"`
	// Certificate key size. Defaults to `2048`.
	KeySize *int `pulumi:"keySize"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created. Currently the only valid value is `global`.
	Location *string `pulumi:"location"`
	// Specifies the name of the certificate. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Certificate product type, such as `Standard` or `WildCard`. Defaults to `Standard`.
	ProductType *string `pulumi:"productType"`
	// The name of the resource group in which to create the certificate. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// (Optional) A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Duration in years (must be between `1` and `3`). Defaults to `1`.
	ValidityInYears *int `pulumi:"validityInYears"`
}

// The set of arguments for constructing a CertificateOrder resource.
type CertificateOrderArgs struct {
	// true if the certificate should be automatically renewed when it expires; otherwise, false. Defaults to `true`.
	AutoRenew pulumi.BoolPtrInput
	// Last CSR that was created for this order.
	Csr pulumi.StringPtrInput
	// The Distinguished Name for the App Service Certificate Order.
	//
	// > **NOTE:** Either `csr` or `distinguishedName` must be set - but not both.
	DistinguishedName pulumi.StringPtrInput
	// Certificate key size. Defaults to `2048`.
	KeySize pulumi.IntPtrInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created. Currently the only valid value is `global`.
	Location pulumi.StringPtrInput
	// Specifies the name of the certificate. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Certificate product type, such as `Standard` or `WildCard`. Defaults to `Standard`.
	ProductType pulumi.StringPtrInput
	// The name of the resource group in which to create the certificate. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// (Optional) A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// Duration in years (must be between `1` and `3`). Defaults to `1`.
	ValidityInYears pulumi.IntPtrInput
}

func (CertificateOrderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateOrderArgs)(nil)).Elem()
}

type CertificateOrderInput interface {
	pulumi.Input

	ToCertificateOrderOutput() CertificateOrderOutput
	ToCertificateOrderOutputWithContext(ctx context.Context) CertificateOrderOutput
}

func (*CertificateOrder) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateOrder)(nil)).Elem()
}

func (i *CertificateOrder) ToCertificateOrderOutput() CertificateOrderOutput {
	return i.ToCertificateOrderOutputWithContext(context.Background())
}

func (i *CertificateOrder) ToCertificateOrderOutputWithContext(ctx context.Context) CertificateOrderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateOrderOutput)
}

func (i *CertificateOrder) ToOutput(ctx context.Context) pulumix.Output[*CertificateOrder] {
	return pulumix.Output[*CertificateOrder]{
		OutputState: i.ToCertificateOrderOutputWithContext(ctx).OutputState,
	}
}

// CertificateOrderArrayInput is an input type that accepts CertificateOrderArray and CertificateOrderArrayOutput values.
// You can construct a concrete instance of `CertificateOrderArrayInput` via:
//
//	CertificateOrderArray{ CertificateOrderArgs{...} }
type CertificateOrderArrayInput interface {
	pulumi.Input

	ToCertificateOrderArrayOutput() CertificateOrderArrayOutput
	ToCertificateOrderArrayOutputWithContext(context.Context) CertificateOrderArrayOutput
}

type CertificateOrderArray []CertificateOrderInput

func (CertificateOrderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificateOrder)(nil)).Elem()
}

func (i CertificateOrderArray) ToCertificateOrderArrayOutput() CertificateOrderArrayOutput {
	return i.ToCertificateOrderArrayOutputWithContext(context.Background())
}

func (i CertificateOrderArray) ToCertificateOrderArrayOutputWithContext(ctx context.Context) CertificateOrderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateOrderArrayOutput)
}

func (i CertificateOrderArray) ToOutput(ctx context.Context) pulumix.Output[[]*CertificateOrder] {
	return pulumix.Output[[]*CertificateOrder]{
		OutputState: i.ToCertificateOrderArrayOutputWithContext(ctx).OutputState,
	}
}

// CertificateOrderMapInput is an input type that accepts CertificateOrderMap and CertificateOrderMapOutput values.
// You can construct a concrete instance of `CertificateOrderMapInput` via:
//
//	CertificateOrderMap{ "key": CertificateOrderArgs{...} }
type CertificateOrderMapInput interface {
	pulumi.Input

	ToCertificateOrderMapOutput() CertificateOrderMapOutput
	ToCertificateOrderMapOutputWithContext(context.Context) CertificateOrderMapOutput
}

type CertificateOrderMap map[string]CertificateOrderInput

func (CertificateOrderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificateOrder)(nil)).Elem()
}

func (i CertificateOrderMap) ToCertificateOrderMapOutput() CertificateOrderMapOutput {
	return i.ToCertificateOrderMapOutputWithContext(context.Background())
}

func (i CertificateOrderMap) ToCertificateOrderMapOutputWithContext(ctx context.Context) CertificateOrderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateOrderMapOutput)
}

func (i CertificateOrderMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*CertificateOrder] {
	return pulumix.Output[map[string]*CertificateOrder]{
		OutputState: i.ToCertificateOrderMapOutputWithContext(ctx).OutputState,
	}
}

type CertificateOrderOutput struct{ *pulumi.OutputState }

func (CertificateOrderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateOrder)(nil)).Elem()
}

func (o CertificateOrderOutput) ToCertificateOrderOutput() CertificateOrderOutput {
	return o
}

func (o CertificateOrderOutput) ToCertificateOrderOutputWithContext(ctx context.Context) CertificateOrderOutput {
	return o
}

func (o CertificateOrderOutput) ToOutput(ctx context.Context) pulumix.Output[*CertificateOrder] {
	return pulumix.Output[*CertificateOrder]{
		OutputState: o.OutputState,
	}
}

// Reasons why App Service Certificate is not renewable at the current moment.
func (o CertificateOrderOutput) AppServiceCertificateNotRenewableReasons() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertificateOrder) pulumi.StringArrayOutput { return v.AppServiceCertificateNotRenewableReasons }).(pulumi.StringArrayOutput)
}

// true if the certificate should be automatically renewed when it expires; otherwise, false. Defaults to `true`.
func (o CertificateOrderOutput) AutoRenew() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CertificateOrder) pulumi.BoolPtrOutput { return v.AutoRenew }).(pulumi.BoolPtrOutput)
}

// State of the Key Vault secret. A `certificates` block as defined below.
func (o CertificateOrderOutput) Certificates() CertificateOrderCertificateArrayOutput {
	return o.ApplyT(func(v *CertificateOrder) CertificateOrderCertificateArrayOutput { return v.Certificates }).(CertificateOrderCertificateArrayOutput)
}

// Last CSR that was created for this order.
func (o CertificateOrderOutput) Csr() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateOrder) pulumi.StringOutput { return v.Csr }).(pulumi.StringOutput)
}

// The Distinguished Name for the App Service Certificate Order.
//
// > **NOTE:** Either `csr` or `distinguishedName` must be set - but not both.
func (o CertificateOrderOutput) DistinguishedName() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateOrder) pulumi.StringOutput { return v.DistinguishedName }).(pulumi.StringOutput)
}

// Domain verification token.
func (o CertificateOrderOutput) DomainVerificationToken() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateOrder) pulumi.StringOutput { return v.DomainVerificationToken }).(pulumi.StringOutput)
}

// Certificate expiration time.
func (o CertificateOrderOutput) ExpirationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateOrder) pulumi.StringOutput { return v.ExpirationTime }).(pulumi.StringOutput)
}

// Certificate thumbprint intermediate certificate.
func (o CertificateOrderOutput) IntermediateThumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateOrder) pulumi.StringOutput { return v.IntermediateThumbprint }).(pulumi.StringOutput)
}

// Whether the private key is external or not.
func (o CertificateOrderOutput) IsPrivateKeyExternal() pulumi.BoolOutput {
	return o.ApplyT(func(v *CertificateOrder) pulumi.BoolOutput { return v.IsPrivateKeyExternal }).(pulumi.BoolOutput)
}

// Certificate key size. Defaults to `2048`.
func (o CertificateOrderOutput) KeySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CertificateOrder) pulumi.IntPtrOutput { return v.KeySize }).(pulumi.IntPtrOutput)
}

// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created. Currently the only valid value is `global`.
func (o CertificateOrderOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateOrder) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name of the certificate. Changing this forces a new resource to be created.
func (o CertificateOrderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateOrder) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Certificate product type, such as `Standard` or `WildCard`. Defaults to `Standard`.
func (o CertificateOrderOutput) ProductType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateOrder) pulumi.StringPtrOutput { return v.ProductType }).(pulumi.StringPtrOutput)
}

// The name of the resource group in which to create the certificate. Changing this forces a new resource to be created.
func (o CertificateOrderOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateOrder) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// Certificate thumbprint for root certificate.
func (o CertificateOrderOutput) RootThumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateOrder) pulumi.StringOutput { return v.RootThumbprint }).(pulumi.StringOutput)
}

// Certificate thumbprint for signed certificate.
func (o CertificateOrderOutput) SignedCertificateThumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateOrder) pulumi.StringOutput { return v.SignedCertificateThumbprint }).(pulumi.StringOutput)
}

// Current order status.
func (o CertificateOrderOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateOrder) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// (Optional) A mapping of tags to assign to the resource.
func (o CertificateOrderOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertificateOrder) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Duration in years (must be between `1` and `3`). Defaults to `1`.
func (o CertificateOrderOutput) ValidityInYears() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CertificateOrder) pulumi.IntPtrOutput { return v.ValidityInYears }).(pulumi.IntPtrOutput)
}

type CertificateOrderArrayOutput struct{ *pulumi.OutputState }

func (CertificateOrderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificateOrder)(nil)).Elem()
}

func (o CertificateOrderArrayOutput) ToCertificateOrderArrayOutput() CertificateOrderArrayOutput {
	return o
}

func (o CertificateOrderArrayOutput) ToCertificateOrderArrayOutputWithContext(ctx context.Context) CertificateOrderArrayOutput {
	return o
}

func (o CertificateOrderArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*CertificateOrder] {
	return pulumix.Output[[]*CertificateOrder]{
		OutputState: o.OutputState,
	}
}

func (o CertificateOrderArrayOutput) Index(i pulumi.IntInput) CertificateOrderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CertificateOrder {
		return vs[0].([]*CertificateOrder)[vs[1].(int)]
	}).(CertificateOrderOutput)
}

type CertificateOrderMapOutput struct{ *pulumi.OutputState }

func (CertificateOrderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificateOrder)(nil)).Elem()
}

func (o CertificateOrderMapOutput) ToCertificateOrderMapOutput() CertificateOrderMapOutput {
	return o
}

func (o CertificateOrderMapOutput) ToCertificateOrderMapOutputWithContext(ctx context.Context) CertificateOrderMapOutput {
	return o
}

func (o CertificateOrderMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*CertificateOrder] {
	return pulumix.Output[map[string]*CertificateOrder]{
		OutputState: o.OutputState,
	}
}

func (o CertificateOrderMapOutput) MapIndex(k pulumi.StringInput) CertificateOrderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CertificateOrder {
		return vs[0].(map[string]*CertificateOrder)[vs[1].(string)]
	}).(CertificateOrderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateOrderInput)(nil)).Elem(), &CertificateOrder{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateOrderArrayInput)(nil)).Elem(), CertificateOrderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateOrderMapInput)(nil)).Elem(), CertificateOrderMap{})
	pulumi.RegisterOutputType(CertificateOrderOutput{})
	pulumi.RegisterOutputType(CertificateOrderArrayOutput{})
	pulumi.RegisterOutputType(CertificateOrderMapOutput{})
}
