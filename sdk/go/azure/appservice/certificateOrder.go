// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appservice

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an App Service Certificate Order.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/app_service_certificate_order.html.markdown.
type CertificateOrder struct {
	s *pulumi.ResourceState
}

// NewCertificateOrder registers a new resource with the given unique name, arguments, and options.
func NewCertificateOrder(ctx *pulumi.Context,
	name string, args *CertificateOrderArgs, opts ...pulumi.ResourceOpt) (*CertificateOrder, error) {
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["autoRenew"] = nil
		inputs["csr"] = nil
		inputs["distinguishedName"] = nil
		inputs["keySize"] = nil
		inputs["location"] = nil
		inputs["name"] = nil
		inputs["productType"] = nil
		inputs["resourceGroupName"] = nil
		inputs["tags"] = nil
		inputs["validityInYears"] = nil
	} else {
		inputs["autoRenew"] = args.AutoRenew
		inputs["csr"] = args.Csr
		inputs["distinguishedName"] = args.DistinguishedName
		inputs["keySize"] = args.KeySize
		inputs["location"] = args.Location
		inputs["name"] = args.Name
		inputs["productType"] = args.ProductType
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["tags"] = args.Tags
		inputs["validityInYears"] = args.ValidityInYears
	}
	inputs["appServiceCertificateNotRenewableReasons"] = nil
	inputs["certificates"] = nil
	inputs["domainVerificationToken"] = nil
	inputs["expirationTime"] = nil
	inputs["intermediateThumbprint"] = nil
	inputs["isPrivateKeyExternal"] = nil
	inputs["rootThumbprint"] = nil
	inputs["signedCertificateThumbprint"] = nil
	inputs["status"] = nil
	s, err := ctx.RegisterResource("azure:appservice/certificateOrder:CertificateOrder", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &CertificateOrder{s: s}, nil
}

// GetCertificateOrder gets an existing CertificateOrder resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificateOrder(ctx *pulumi.Context,
	name string, id pulumi.ID, state *CertificateOrderState, opts ...pulumi.ResourceOpt) (*CertificateOrder, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["appServiceCertificateNotRenewableReasons"] = state.AppServiceCertificateNotRenewableReasons
		inputs["autoRenew"] = state.AutoRenew
		inputs["certificates"] = state.Certificates
		inputs["csr"] = state.Csr
		inputs["distinguishedName"] = state.DistinguishedName
		inputs["domainVerificationToken"] = state.DomainVerificationToken
		inputs["expirationTime"] = state.ExpirationTime
		inputs["intermediateThumbprint"] = state.IntermediateThumbprint
		inputs["isPrivateKeyExternal"] = state.IsPrivateKeyExternal
		inputs["keySize"] = state.KeySize
		inputs["location"] = state.Location
		inputs["name"] = state.Name
		inputs["productType"] = state.ProductType
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["rootThumbprint"] = state.RootThumbprint
		inputs["signedCertificateThumbprint"] = state.SignedCertificateThumbprint
		inputs["status"] = state.Status
		inputs["tags"] = state.Tags
		inputs["validityInYears"] = state.ValidityInYears
	}
	s, err := ctx.ReadResource("azure:appservice/certificateOrder:CertificateOrder", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &CertificateOrder{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *CertificateOrder) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *CertificateOrder) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Reasons why App Service Certificate is not renewable at the current moment.
func (r *CertificateOrder) AppServiceCertificateNotRenewableReasons() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["appServiceCertificateNotRenewableReasons"])
}

// true if the certificate should be automatically renewed when it expires; otherwise, false.
func (r *CertificateOrder) AutoRenew() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["autoRenew"])
}

// State of the Key Vault secret. A `certificates` block as defined below.
func (r *CertificateOrder) Certificates() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["certificates"])
}

// Last CSR that was created for this order.
func (r *CertificateOrder) Csr() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["csr"])
}

// The Distinguished Name for the App Service Certificate Order.
func (r *CertificateOrder) DistinguishedName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["distinguishedName"])
}

// Domain verification token.
func (r *CertificateOrder) DomainVerificationToken() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["domainVerificationToken"])
}

// Certificate expiration time.
func (r *CertificateOrder) ExpirationTime() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["expirationTime"])
}

// Certificate thumbprint intermediate certificate.
func (r *CertificateOrder) IntermediateThumbprint() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["intermediateThumbprint"])
}

// Whether the private key is external or not.
func (r *CertificateOrder) IsPrivateKeyExternal() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["isPrivateKeyExternal"])
}

// Certificate key size.
func (r *CertificateOrder) KeySize() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["keySize"])
}

// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
func (r *CertificateOrder) Location() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["location"])
}

// Specifies the name of the certificate. Changing this forces a new resource to be created.
func (r *CertificateOrder) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Certificate product type, such as `Standard` or `WildCard`.
func (r *CertificateOrder) ProductType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["productType"])
}

// The name of the resource group in which to create the certificate. Changing this forces a new resource to be created.
func (r *CertificateOrder) ResourceGroupName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// Certificate thumbprint for root certificate.
func (r *CertificateOrder) RootThumbprint() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["rootThumbprint"])
}

// Certificate thumbprint for signed certificate.
func (r *CertificateOrder) SignedCertificateThumbprint() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["signedCertificateThumbprint"])
}

// Current order status.
func (r *CertificateOrder) Status() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["status"])
}

// A mapping of tags to assign to the resource.
func (r *CertificateOrder) Tags() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["tags"])
}

// Duration in years (must be between 1 and 3).
func (r *CertificateOrder) ValidityInYears() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["validityInYears"])
}

// Input properties used for looking up and filtering CertificateOrder resources.
type CertificateOrderState struct {
	// Reasons why App Service Certificate is not renewable at the current moment.
	AppServiceCertificateNotRenewableReasons interface{}
	// true if the certificate should be automatically renewed when it expires; otherwise, false.
	AutoRenew interface{}
	// State of the Key Vault secret. A `certificates` block as defined below.
	Certificates interface{}
	// Last CSR that was created for this order.
	Csr interface{}
	// The Distinguished Name for the App Service Certificate Order.
	DistinguishedName interface{}
	// Domain verification token.
	DomainVerificationToken interface{}
	// Certificate expiration time.
	ExpirationTime interface{}
	// Certificate thumbprint intermediate certificate.
	IntermediateThumbprint interface{}
	// Whether the private key is external or not.
	IsPrivateKeyExternal interface{}
	// Certificate key size.
	KeySize interface{}
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location interface{}
	// Specifies the name of the certificate. Changing this forces a new resource to be created.
	Name interface{}
	// Certificate product type, such as `Standard` or `WildCard`.
	ProductType interface{}
	// The name of the resource group in which to create the certificate. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// Certificate thumbprint for root certificate.
	RootThumbprint interface{}
	// Certificate thumbprint for signed certificate.
	SignedCertificateThumbprint interface{}
	// Current order status.
	Status interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// Duration in years (must be between 1 and 3).
	ValidityInYears interface{}
}

// The set of arguments for constructing a CertificateOrder resource.
type CertificateOrderArgs struct {
	// true if the certificate should be automatically renewed when it expires; otherwise, false.
	AutoRenew interface{}
	// Last CSR that was created for this order.
	Csr interface{}
	// The Distinguished Name for the App Service Certificate Order.
	DistinguishedName interface{}
	// Certificate key size.
	KeySize interface{}
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location interface{}
	// Specifies the name of the certificate. Changing this forces a new resource to be created.
	Name interface{}
	// Certificate product type, such as `Standard` or `WildCard`.
	ProductType interface{}
	// The name of the resource group in which to create the certificate. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// Duration in years (must be between 1 and 3).
	ValidityInYears interface{}
}
