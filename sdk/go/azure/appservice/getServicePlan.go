// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appservice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Service Plan.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/appservice"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := appservice.LookupServicePlan(ctx, &appservice.LookupServicePlanArgs{
//				Name:              "existing",
//				ResourceGroupName: "existing",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("id", example.Id)
//			return nil
//		})
//	}
//
// ```
func LookupServicePlan(ctx *pulumi.Context, args *LookupServicePlanArgs, opts ...pulumi.InvokeOption) (*LookupServicePlanResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupServicePlanResult
	err := ctx.Invoke("azure:appservice/getServicePlan:getServicePlan", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getServicePlan.
type LookupServicePlanArgs struct {
	// The name of this Service Plan.
	Name string `pulumi:"name"`
	// The name of the Resource Group where the Service Plan exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getServicePlan.
type LookupServicePlanResult struct {
	// The ID of the App Service Environment this Service Plan is part of.
	AppServiceEnvironmentId string `pulumi:"appServiceEnvironmentId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A string representing the Kind of Service Plan.
	Kind string `pulumi:"kind"`
	// The Azure Region where the Service Plan exists.
	Location string `pulumi:"location"`
	// The maximum number of workers in use in an Elastic SKU Plan.
	MaximumElasticWorkerCount int    `pulumi:"maximumElasticWorkerCount"`
	Name                      string `pulumi:"name"`
	// The O/S type for the App Services hosted in this plan.
	OsType string `pulumi:"osType"`
	// Is Per Site Scaling be enabled?
	PerSiteScalingEnabled bool `pulumi:"perSiteScalingEnabled"`
	// Whether this is a reserved Service Plan Type. `true` if `osType` is `Linux`, otherwise `false`.
	Reserved          bool   `pulumi:"reserved"`
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The SKU for the Service Plan.
	SkuName string `pulumi:"skuName"`
	// A mapping of tags assigned to the Service Plan.
	Tags map[string]string `pulumi:"tags"`
	// The number of Workers (instances) allocated.
	WorkerCount int `pulumi:"workerCount"`
	// Is the Service Plan balance across Availability Zones in the region?
	ZoneBalancingEnabled bool `pulumi:"zoneBalancingEnabled"`
}

func LookupServicePlanOutput(ctx *pulumi.Context, args LookupServicePlanOutputArgs, opts ...pulumi.InvokeOption) LookupServicePlanResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupServicePlanResult, error) {
			args := v.(LookupServicePlanArgs)
			r, err := LookupServicePlan(ctx, &args, opts...)
			var s LookupServicePlanResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupServicePlanResultOutput)
}

// A collection of arguments for invoking getServicePlan.
type LookupServicePlanOutputArgs struct {
	// The name of this Service Plan.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Resource Group where the Service Plan exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupServicePlanOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServicePlanArgs)(nil)).Elem()
}

// A collection of values returned by getServicePlan.
type LookupServicePlanResultOutput struct{ *pulumi.OutputState }

func (LookupServicePlanResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServicePlanResult)(nil)).Elem()
}

func (o LookupServicePlanResultOutput) ToLookupServicePlanResultOutput() LookupServicePlanResultOutput {
	return o
}

func (o LookupServicePlanResultOutput) ToLookupServicePlanResultOutputWithContext(ctx context.Context) LookupServicePlanResultOutput {
	return o
}

// The ID of the App Service Environment this Service Plan is part of.
func (o LookupServicePlanResultOutput) AppServiceEnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServicePlanResult) string { return v.AppServiceEnvironmentId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupServicePlanResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServicePlanResult) string { return v.Id }).(pulumi.StringOutput)
}

// A string representing the Kind of Service Plan.
func (o LookupServicePlanResultOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServicePlanResult) string { return v.Kind }).(pulumi.StringOutput)
}

// The Azure Region where the Service Plan exists.
func (o LookupServicePlanResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServicePlanResult) string { return v.Location }).(pulumi.StringOutput)
}

// The maximum number of workers in use in an Elastic SKU Plan.
func (o LookupServicePlanResultOutput) MaximumElasticWorkerCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupServicePlanResult) int { return v.MaximumElasticWorkerCount }).(pulumi.IntOutput)
}

func (o LookupServicePlanResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServicePlanResult) string { return v.Name }).(pulumi.StringOutput)
}

// The O/S type for the App Services hosted in this plan.
func (o LookupServicePlanResultOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServicePlanResult) string { return v.OsType }).(pulumi.StringOutput)
}

// Is Per Site Scaling be enabled?
func (o LookupServicePlanResultOutput) PerSiteScalingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupServicePlanResult) bool { return v.PerSiteScalingEnabled }).(pulumi.BoolOutput)
}

// Whether this is a reserved Service Plan Type. `true` if `osType` is `Linux`, otherwise `false`.
func (o LookupServicePlanResultOutput) Reserved() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupServicePlanResult) bool { return v.Reserved }).(pulumi.BoolOutput)
}

func (o LookupServicePlanResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServicePlanResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The SKU for the Service Plan.
func (o LookupServicePlanResultOutput) SkuName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServicePlanResult) string { return v.SkuName }).(pulumi.StringOutput)
}

// A mapping of tags assigned to the Service Plan.
func (o LookupServicePlanResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupServicePlanResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The number of Workers (instances) allocated.
func (o LookupServicePlanResultOutput) WorkerCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupServicePlanResult) int { return v.WorkerCount }).(pulumi.IntOutput)
}

// Is the Service Plan balance across Availability Zones in the region?
func (o LookupServicePlanResultOutput) ZoneBalancingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupServicePlanResult) bool { return v.ZoneBalancingEnabled }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupServicePlanResultOutput{})
}
