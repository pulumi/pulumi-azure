// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an App Service: Service Plan.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/appservice"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = appservice.NewServicePlan(ctx, "exampleServicePlan", &appservice.ServicePlanArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				OsType:            pulumi.String("Linux"),
//				SkuName:           pulumi.String("P1v2"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// AppServices can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:appservice/servicePlan:ServicePlan example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/serverfarms/farm1
//
// ```
type ServicePlan struct {
	pulumi.CustomResourceState

	// The ID of the App Service Environment to create this Service Plan in.
	//
	// > **NOTE:** Requires an Isolated SKU. Use one of `I1`, `I2`, `I3` for `appservice.Environment`, or `I1v2`, `I2v2`, `I3v2` for `appservice.EnvironmentV3`
	AppServiceEnvironmentId pulumi.StringPtrOutput `pulumi:"appServiceEnvironmentId"`
	// A string representing the Kind of Service Plan.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The Azure Region where the Service Plan should exist. Changing this forces a new AppService to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The maximum number of workers to use in an Elastic SKU Plan. Cannot be set unless using an Elastic SKU.
	MaximumElasticWorkerCount pulumi.IntOutput `pulumi:"maximumElasticWorkerCount"`
	// The name which should be used for this Service Plan. Changing this forces a new AppService to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The O/S type for the App Services to be hosted in this plan. Possible values include `Windows`, `Linux`, and `WindowsContainer`. Changing this forces a new resource to be created.
	OsType pulumi.StringOutput `pulumi:"osType"`
	// Should Per Site Scaling be enabled. Defaults to `false`.
	PerSiteScalingEnabled pulumi.BoolPtrOutput `pulumi:"perSiteScalingEnabled"`
	// Whether this is a reserved Service Plan Type. `true` if `osType` is `Linux`, otherwise `false`.
	Reserved pulumi.BoolOutput `pulumi:"reserved"`
	// The name of the Resource Group where the AppService should exist. Changing this forces a new AppService to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The SKU for the plan. Possible values include `B1`, `B2`, `B3`, `D1`, `F1`, `I1`, `I2`, `I3`, `I1v2`, `I2v2`, `I3v2`, `I4v2`, `I5v2`, `I6v2`, `P1v2`, `P2v2`, `P3v2`, `P0v3`, `P1v3`, `P2v3`, `P3v3`, `P1mv3`, `P2mv3`, `P3mv3`, `P4mv3`, `P5mv3`, `S1`, `S2`, `S3`, `SHARED`, `EP1`, `EP2`, `EP3`, `WS1`, `WS2`, `WS3`, and `Y1`.
	//
	// > **NOTE:** Isolated SKUs (`I1`, `I2`, `I3`, `I1v2`, `I2v2`, and `I3v2`) can only be used with App Service Environments
	//
	// > **NOTE:** Elastic and Consumption SKUs (`Y1`, `EP1`, `EP2`, and `EP3`) are for use with Function Apps.
	SkuName pulumi.StringOutput `pulumi:"skuName"`
	// A mapping of tags which should be assigned to the AppService.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The number of Workers (instances) to be allocated.
	WorkerCount pulumi.IntOutput `pulumi:"workerCount"`
	// Should the Service Plan balance across Availability Zones in the region. Changing this forces a new resource to be created.
	//
	// > **NOTE:** If this setting is set to `true` and the `workerCount` value is specified, it should be set to a multiple of the number of availability zones in the region. Please see the Azure documentation for the number of Availability Zones in your region.
	ZoneBalancingEnabled pulumi.BoolPtrOutput `pulumi:"zoneBalancingEnabled"`
}

// NewServicePlan registers a new resource with the given unique name, arguments, and options.
func NewServicePlan(ctx *pulumi.Context,
	name string, args *ServicePlanArgs, opts ...pulumi.ResourceOption) (*ServicePlan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OsType == nil {
		return nil, errors.New("invalid value for required argument 'OsType'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SkuName == nil {
		return nil, errors.New("invalid value for required argument 'SkuName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServicePlan
	err := ctx.RegisterResource("azure:appservice/servicePlan:ServicePlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServicePlan gets an existing ServicePlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServicePlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServicePlanState, opts ...pulumi.ResourceOption) (*ServicePlan, error) {
	var resource ServicePlan
	err := ctx.ReadResource("azure:appservice/servicePlan:ServicePlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServicePlan resources.
type servicePlanState struct {
	// The ID of the App Service Environment to create this Service Plan in.
	//
	// > **NOTE:** Requires an Isolated SKU. Use one of `I1`, `I2`, `I3` for `appservice.Environment`, or `I1v2`, `I2v2`, `I3v2` for `appservice.EnvironmentV3`
	AppServiceEnvironmentId *string `pulumi:"appServiceEnvironmentId"`
	// A string representing the Kind of Service Plan.
	Kind *string `pulumi:"kind"`
	// The Azure Region where the Service Plan should exist. Changing this forces a new AppService to be created.
	Location *string `pulumi:"location"`
	// The maximum number of workers to use in an Elastic SKU Plan. Cannot be set unless using an Elastic SKU.
	MaximumElasticWorkerCount *int `pulumi:"maximumElasticWorkerCount"`
	// The name which should be used for this Service Plan. Changing this forces a new AppService to be created.
	Name *string `pulumi:"name"`
	// The O/S type for the App Services to be hosted in this plan. Possible values include `Windows`, `Linux`, and `WindowsContainer`. Changing this forces a new resource to be created.
	OsType *string `pulumi:"osType"`
	// Should Per Site Scaling be enabled. Defaults to `false`.
	PerSiteScalingEnabled *bool `pulumi:"perSiteScalingEnabled"`
	// Whether this is a reserved Service Plan Type. `true` if `osType` is `Linux`, otherwise `false`.
	Reserved *bool `pulumi:"reserved"`
	// The name of the Resource Group where the AppService should exist. Changing this forces a new AppService to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The SKU for the plan. Possible values include `B1`, `B2`, `B3`, `D1`, `F1`, `I1`, `I2`, `I3`, `I1v2`, `I2v2`, `I3v2`, `I4v2`, `I5v2`, `I6v2`, `P1v2`, `P2v2`, `P3v2`, `P0v3`, `P1v3`, `P2v3`, `P3v3`, `P1mv3`, `P2mv3`, `P3mv3`, `P4mv3`, `P5mv3`, `S1`, `S2`, `S3`, `SHARED`, `EP1`, `EP2`, `EP3`, `WS1`, `WS2`, `WS3`, and `Y1`.
	//
	// > **NOTE:** Isolated SKUs (`I1`, `I2`, `I3`, `I1v2`, `I2v2`, and `I3v2`) can only be used with App Service Environments
	//
	// > **NOTE:** Elastic and Consumption SKUs (`Y1`, `EP1`, `EP2`, and `EP3`) are for use with Function Apps.
	SkuName *string `pulumi:"skuName"`
	// A mapping of tags which should be assigned to the AppService.
	Tags map[string]string `pulumi:"tags"`
	// The number of Workers (instances) to be allocated.
	WorkerCount *int `pulumi:"workerCount"`
	// Should the Service Plan balance across Availability Zones in the region. Changing this forces a new resource to be created.
	//
	// > **NOTE:** If this setting is set to `true` and the `workerCount` value is specified, it should be set to a multiple of the number of availability zones in the region. Please see the Azure documentation for the number of Availability Zones in your region.
	ZoneBalancingEnabled *bool `pulumi:"zoneBalancingEnabled"`
}

type ServicePlanState struct {
	// The ID of the App Service Environment to create this Service Plan in.
	//
	// > **NOTE:** Requires an Isolated SKU. Use one of `I1`, `I2`, `I3` for `appservice.Environment`, or `I1v2`, `I2v2`, `I3v2` for `appservice.EnvironmentV3`
	AppServiceEnvironmentId pulumi.StringPtrInput
	// A string representing the Kind of Service Plan.
	Kind pulumi.StringPtrInput
	// The Azure Region where the Service Plan should exist. Changing this forces a new AppService to be created.
	Location pulumi.StringPtrInput
	// The maximum number of workers to use in an Elastic SKU Plan. Cannot be set unless using an Elastic SKU.
	MaximumElasticWorkerCount pulumi.IntPtrInput
	// The name which should be used for this Service Plan. Changing this forces a new AppService to be created.
	Name pulumi.StringPtrInput
	// The O/S type for the App Services to be hosted in this plan. Possible values include `Windows`, `Linux`, and `WindowsContainer`. Changing this forces a new resource to be created.
	OsType pulumi.StringPtrInput
	// Should Per Site Scaling be enabled. Defaults to `false`.
	PerSiteScalingEnabled pulumi.BoolPtrInput
	// Whether this is a reserved Service Plan Type. `true` if `osType` is `Linux`, otherwise `false`.
	Reserved pulumi.BoolPtrInput
	// The name of the Resource Group where the AppService should exist. Changing this forces a new AppService to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The SKU for the plan. Possible values include `B1`, `B2`, `B3`, `D1`, `F1`, `I1`, `I2`, `I3`, `I1v2`, `I2v2`, `I3v2`, `I4v2`, `I5v2`, `I6v2`, `P1v2`, `P2v2`, `P3v2`, `P0v3`, `P1v3`, `P2v3`, `P3v3`, `P1mv3`, `P2mv3`, `P3mv3`, `P4mv3`, `P5mv3`, `S1`, `S2`, `S3`, `SHARED`, `EP1`, `EP2`, `EP3`, `WS1`, `WS2`, `WS3`, and `Y1`.
	//
	// > **NOTE:** Isolated SKUs (`I1`, `I2`, `I3`, `I1v2`, `I2v2`, and `I3v2`) can only be used with App Service Environments
	//
	// > **NOTE:** Elastic and Consumption SKUs (`Y1`, `EP1`, `EP2`, and `EP3`) are for use with Function Apps.
	SkuName pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the AppService.
	Tags pulumi.StringMapInput
	// The number of Workers (instances) to be allocated.
	WorkerCount pulumi.IntPtrInput
	// Should the Service Plan balance across Availability Zones in the region. Changing this forces a new resource to be created.
	//
	// > **NOTE:** If this setting is set to `true` and the `workerCount` value is specified, it should be set to a multiple of the number of availability zones in the region. Please see the Azure documentation for the number of Availability Zones in your region.
	ZoneBalancingEnabled pulumi.BoolPtrInput
}

func (ServicePlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*servicePlanState)(nil)).Elem()
}

type servicePlanArgs struct {
	// The ID of the App Service Environment to create this Service Plan in.
	//
	// > **NOTE:** Requires an Isolated SKU. Use one of `I1`, `I2`, `I3` for `appservice.Environment`, or `I1v2`, `I2v2`, `I3v2` for `appservice.EnvironmentV3`
	AppServiceEnvironmentId *string `pulumi:"appServiceEnvironmentId"`
	// The Azure Region where the Service Plan should exist. Changing this forces a new AppService to be created.
	Location *string `pulumi:"location"`
	// The maximum number of workers to use in an Elastic SKU Plan. Cannot be set unless using an Elastic SKU.
	MaximumElasticWorkerCount *int `pulumi:"maximumElasticWorkerCount"`
	// The name which should be used for this Service Plan. Changing this forces a new AppService to be created.
	Name *string `pulumi:"name"`
	// The O/S type for the App Services to be hosted in this plan. Possible values include `Windows`, `Linux`, and `WindowsContainer`. Changing this forces a new resource to be created.
	OsType string `pulumi:"osType"`
	// Should Per Site Scaling be enabled. Defaults to `false`.
	PerSiteScalingEnabled *bool `pulumi:"perSiteScalingEnabled"`
	// The name of the Resource Group where the AppService should exist. Changing this forces a new AppService to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The SKU for the plan. Possible values include `B1`, `B2`, `B3`, `D1`, `F1`, `I1`, `I2`, `I3`, `I1v2`, `I2v2`, `I3v2`, `I4v2`, `I5v2`, `I6v2`, `P1v2`, `P2v2`, `P3v2`, `P0v3`, `P1v3`, `P2v3`, `P3v3`, `P1mv3`, `P2mv3`, `P3mv3`, `P4mv3`, `P5mv3`, `S1`, `S2`, `S3`, `SHARED`, `EP1`, `EP2`, `EP3`, `WS1`, `WS2`, `WS3`, and `Y1`.
	//
	// > **NOTE:** Isolated SKUs (`I1`, `I2`, `I3`, `I1v2`, `I2v2`, and `I3v2`) can only be used with App Service Environments
	//
	// > **NOTE:** Elastic and Consumption SKUs (`Y1`, `EP1`, `EP2`, and `EP3`) are for use with Function Apps.
	SkuName string `pulumi:"skuName"`
	// A mapping of tags which should be assigned to the AppService.
	Tags map[string]string `pulumi:"tags"`
	// The number of Workers (instances) to be allocated.
	WorkerCount *int `pulumi:"workerCount"`
	// Should the Service Plan balance across Availability Zones in the region. Changing this forces a new resource to be created.
	//
	// > **NOTE:** If this setting is set to `true` and the `workerCount` value is specified, it should be set to a multiple of the number of availability zones in the region. Please see the Azure documentation for the number of Availability Zones in your region.
	ZoneBalancingEnabled *bool `pulumi:"zoneBalancingEnabled"`
}

// The set of arguments for constructing a ServicePlan resource.
type ServicePlanArgs struct {
	// The ID of the App Service Environment to create this Service Plan in.
	//
	// > **NOTE:** Requires an Isolated SKU. Use one of `I1`, `I2`, `I3` for `appservice.Environment`, or `I1v2`, `I2v2`, `I3v2` for `appservice.EnvironmentV3`
	AppServiceEnvironmentId pulumi.StringPtrInput
	// The Azure Region where the Service Plan should exist. Changing this forces a new AppService to be created.
	Location pulumi.StringPtrInput
	// The maximum number of workers to use in an Elastic SKU Plan. Cannot be set unless using an Elastic SKU.
	MaximumElasticWorkerCount pulumi.IntPtrInput
	// The name which should be used for this Service Plan. Changing this forces a new AppService to be created.
	Name pulumi.StringPtrInput
	// The O/S type for the App Services to be hosted in this plan. Possible values include `Windows`, `Linux`, and `WindowsContainer`. Changing this forces a new resource to be created.
	OsType pulumi.StringInput
	// Should Per Site Scaling be enabled. Defaults to `false`.
	PerSiteScalingEnabled pulumi.BoolPtrInput
	// The name of the Resource Group where the AppService should exist. Changing this forces a new AppService to be created.
	ResourceGroupName pulumi.StringInput
	// The SKU for the plan. Possible values include `B1`, `B2`, `B3`, `D1`, `F1`, `I1`, `I2`, `I3`, `I1v2`, `I2v2`, `I3v2`, `I4v2`, `I5v2`, `I6v2`, `P1v2`, `P2v2`, `P3v2`, `P0v3`, `P1v3`, `P2v3`, `P3v3`, `P1mv3`, `P2mv3`, `P3mv3`, `P4mv3`, `P5mv3`, `S1`, `S2`, `S3`, `SHARED`, `EP1`, `EP2`, `EP3`, `WS1`, `WS2`, `WS3`, and `Y1`.
	//
	// > **NOTE:** Isolated SKUs (`I1`, `I2`, `I3`, `I1v2`, `I2v2`, and `I3v2`) can only be used with App Service Environments
	//
	// > **NOTE:** Elastic and Consumption SKUs (`Y1`, `EP1`, `EP2`, and `EP3`) are for use with Function Apps.
	SkuName pulumi.StringInput
	// A mapping of tags which should be assigned to the AppService.
	Tags pulumi.StringMapInput
	// The number of Workers (instances) to be allocated.
	WorkerCount pulumi.IntPtrInput
	// Should the Service Plan balance across Availability Zones in the region. Changing this forces a new resource to be created.
	//
	// > **NOTE:** If this setting is set to `true` and the `workerCount` value is specified, it should be set to a multiple of the number of availability zones in the region. Please see the Azure documentation for the number of Availability Zones in your region.
	ZoneBalancingEnabled pulumi.BoolPtrInput
}

func (ServicePlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*servicePlanArgs)(nil)).Elem()
}

type ServicePlanInput interface {
	pulumi.Input

	ToServicePlanOutput() ServicePlanOutput
	ToServicePlanOutputWithContext(ctx context.Context) ServicePlanOutput
}

func (*ServicePlan) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePlan)(nil)).Elem()
}

func (i *ServicePlan) ToServicePlanOutput() ServicePlanOutput {
	return i.ToServicePlanOutputWithContext(context.Background())
}

func (i *ServicePlan) ToServicePlanOutputWithContext(ctx context.Context) ServicePlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePlanOutput)
}

// ServicePlanArrayInput is an input type that accepts ServicePlanArray and ServicePlanArrayOutput values.
// You can construct a concrete instance of `ServicePlanArrayInput` via:
//
//	ServicePlanArray{ ServicePlanArgs{...} }
type ServicePlanArrayInput interface {
	pulumi.Input

	ToServicePlanArrayOutput() ServicePlanArrayOutput
	ToServicePlanArrayOutputWithContext(context.Context) ServicePlanArrayOutput
}

type ServicePlanArray []ServicePlanInput

func (ServicePlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServicePlan)(nil)).Elem()
}

func (i ServicePlanArray) ToServicePlanArrayOutput() ServicePlanArrayOutput {
	return i.ToServicePlanArrayOutputWithContext(context.Background())
}

func (i ServicePlanArray) ToServicePlanArrayOutputWithContext(ctx context.Context) ServicePlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePlanArrayOutput)
}

// ServicePlanMapInput is an input type that accepts ServicePlanMap and ServicePlanMapOutput values.
// You can construct a concrete instance of `ServicePlanMapInput` via:
//
//	ServicePlanMap{ "key": ServicePlanArgs{...} }
type ServicePlanMapInput interface {
	pulumi.Input

	ToServicePlanMapOutput() ServicePlanMapOutput
	ToServicePlanMapOutputWithContext(context.Context) ServicePlanMapOutput
}

type ServicePlanMap map[string]ServicePlanInput

func (ServicePlanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServicePlan)(nil)).Elem()
}

func (i ServicePlanMap) ToServicePlanMapOutput() ServicePlanMapOutput {
	return i.ToServicePlanMapOutputWithContext(context.Background())
}

func (i ServicePlanMap) ToServicePlanMapOutputWithContext(ctx context.Context) ServicePlanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePlanMapOutput)
}

type ServicePlanOutput struct{ *pulumi.OutputState }

func (ServicePlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePlan)(nil)).Elem()
}

func (o ServicePlanOutput) ToServicePlanOutput() ServicePlanOutput {
	return o
}

func (o ServicePlanOutput) ToServicePlanOutputWithContext(ctx context.Context) ServicePlanOutput {
	return o
}

// The ID of the App Service Environment to create this Service Plan in.
//
// > **NOTE:** Requires an Isolated SKU. Use one of `I1`, `I2`, `I3` for `appservice.Environment`, or `I1v2`, `I2v2`, `I3v2` for `appservice.EnvironmentV3`
func (o ServicePlanOutput) AppServiceEnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePlan) pulumi.StringPtrOutput { return v.AppServiceEnvironmentId }).(pulumi.StringPtrOutput)
}

// A string representing the Kind of Service Plan.
func (o ServicePlanOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePlan) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// The Azure Region where the Service Plan should exist. Changing this forces a new AppService to be created.
func (o ServicePlanOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePlan) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The maximum number of workers to use in an Elastic SKU Plan. Cannot be set unless using an Elastic SKU.
func (o ServicePlanOutput) MaximumElasticWorkerCount() pulumi.IntOutput {
	return o.ApplyT(func(v *ServicePlan) pulumi.IntOutput { return v.MaximumElasticWorkerCount }).(pulumi.IntOutput)
}

// The name which should be used for this Service Plan. Changing this forces a new AppService to be created.
func (o ServicePlanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePlan) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The O/S type for the App Services to be hosted in this plan. Possible values include `Windows`, `Linux`, and `WindowsContainer`. Changing this forces a new resource to be created.
func (o ServicePlanOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePlan) pulumi.StringOutput { return v.OsType }).(pulumi.StringOutput)
}

// Should Per Site Scaling be enabled. Defaults to `false`.
func (o ServicePlanOutput) PerSiteScalingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServicePlan) pulumi.BoolPtrOutput { return v.PerSiteScalingEnabled }).(pulumi.BoolPtrOutput)
}

// Whether this is a reserved Service Plan Type. `true` if `osType` is `Linux`, otherwise `false`.
func (o ServicePlanOutput) Reserved() pulumi.BoolOutput {
	return o.ApplyT(func(v *ServicePlan) pulumi.BoolOutput { return v.Reserved }).(pulumi.BoolOutput)
}

// The name of the Resource Group where the AppService should exist. Changing this forces a new AppService to be created.
func (o ServicePlanOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePlan) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The SKU for the plan. Possible values include `B1`, `B2`, `B3`, `D1`, `F1`, `I1`, `I2`, `I3`, `I1v2`, `I2v2`, `I3v2`, `I4v2`, `I5v2`, `I6v2`, `P1v2`, `P2v2`, `P3v2`, `P0v3`, `P1v3`, `P2v3`, `P3v3`, `P1mv3`, `P2mv3`, `P3mv3`, `P4mv3`, `P5mv3`, `S1`, `S2`, `S3`, `SHARED`, `EP1`, `EP2`, `EP3`, `WS1`, `WS2`, `WS3`, and `Y1`.
//
// > **NOTE:** Isolated SKUs (`I1`, `I2`, `I3`, `I1v2`, `I2v2`, and `I3v2`) can only be used with App Service Environments
//
// > **NOTE:** Elastic and Consumption SKUs (`Y1`, `EP1`, `EP2`, and `EP3`) are for use with Function Apps.
func (o ServicePlanOutput) SkuName() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePlan) pulumi.StringOutput { return v.SkuName }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the AppService.
func (o ServicePlanOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServicePlan) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The number of Workers (instances) to be allocated.
func (o ServicePlanOutput) WorkerCount() pulumi.IntOutput {
	return o.ApplyT(func(v *ServicePlan) pulumi.IntOutput { return v.WorkerCount }).(pulumi.IntOutput)
}

// Should the Service Plan balance across Availability Zones in the region. Changing this forces a new resource to be created.
//
// > **NOTE:** If this setting is set to `true` and the `workerCount` value is specified, it should be set to a multiple of the number of availability zones in the region. Please see the Azure documentation for the number of Availability Zones in your region.
func (o ServicePlanOutput) ZoneBalancingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServicePlan) pulumi.BoolPtrOutput { return v.ZoneBalancingEnabled }).(pulumi.BoolPtrOutput)
}

type ServicePlanArrayOutput struct{ *pulumi.OutputState }

func (ServicePlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServicePlan)(nil)).Elem()
}

func (o ServicePlanArrayOutput) ToServicePlanArrayOutput() ServicePlanArrayOutput {
	return o
}

func (o ServicePlanArrayOutput) ToServicePlanArrayOutputWithContext(ctx context.Context) ServicePlanArrayOutput {
	return o
}

func (o ServicePlanArrayOutput) Index(i pulumi.IntInput) ServicePlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServicePlan {
		return vs[0].([]*ServicePlan)[vs[1].(int)]
	}).(ServicePlanOutput)
}

type ServicePlanMapOutput struct{ *pulumi.OutputState }

func (ServicePlanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServicePlan)(nil)).Elem()
}

func (o ServicePlanMapOutput) ToServicePlanMapOutput() ServicePlanMapOutput {
	return o
}

func (o ServicePlanMapOutput) ToServicePlanMapOutputWithContext(ctx context.Context) ServicePlanMapOutput {
	return o
}

func (o ServicePlanMapOutput) MapIndex(k pulumi.StringInput) ServicePlanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServicePlan {
		return vs[0].(map[string]*ServicePlan)[vs[1].(string)]
	}).(ServicePlanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePlanInput)(nil)).Elem(), &ServicePlan{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePlanArrayInput)(nil)).Elem(), ServicePlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePlanMapInput)(nil)).Elem(), ServicePlanMap{})
	pulumi.RegisterOutputType(ServicePlanOutput{})
	pulumi.RegisterOutputType(ServicePlanArrayOutput{})
	pulumi.RegisterOutputType(ServicePlanMapOutput{})
}
