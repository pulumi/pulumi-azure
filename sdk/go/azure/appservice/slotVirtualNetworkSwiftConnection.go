// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an App Service Slot's Virtual Network Association (this is for the [Regional VNet Integration](https://docs.microsoft.com/azure/app-service/web-sites-integrate-with-vnet#regional-vnet-integration) which is still in preview).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	appservice/appService "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/appservice/appService"
//	appservice/plan "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/appservice/plan"
//	appservice/slot "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/appservice/slot"
//	appservice/slotVirtualNetworkSwiftConnection "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/appservice/slotVirtualNetworkSwiftConnection"
//	core/resourceGroup "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/core/resourceGroup"
//	network/subnet "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/subnet"
//	network/virtualNetwork "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/virtualNetwork"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// example, err := core/resourceGroup.NewResourceGroup(ctx, "example", &core/resourceGroup.ResourceGroupArgs{
// Name: "example-resources",
// Location: "West Europe",
// })
// if err != nil {
// return err
// }
// exampleVirtualNetwork, err := network/virtualNetwork.NewVirtualNetwork(ctx, "example", &network/virtualNetwork.VirtualNetworkArgs{
// Name: "example-virtual-network",
// AddressSpaces: []string{
// "10.0.0.0/16",
// },
// Location: example.Location,
// ResourceGroupName: example.Name,
// })
// if err != nil {
// return err
// }
// exampleSubnet, err := network/subnet.NewSubnet(ctx, "example", &network/subnet.SubnetArgs{
// Name: "example-subnet",
// ResourceGroupName: example.Name,
// VirtualNetworkName: exampleVirtualNetwork.Name,
// AddressPrefixes: []string{
// "10.0.1.0/24",
// },
// Delegations: []map[string]interface{}{
// map[string]interface{}{
// "name": "example-delegation",
// "serviceDelegation": map[string]interface{}{
// "name": "Microsoft.Web/serverFarms",
// "actions": []string{
// "Microsoft.Network/virtualNetworks/subnets/action",
// },
// },
// },
// },
// })
// if err != nil {
// return err
// }
// examplePlan, err := appservice/plan.NewPlan(ctx, "example", &appservice/plan.PlanArgs{
// Name: "example-service-plan",
// Location: example.Location,
// ResourceGroupName: example.Name,
// Sku: map[string]interface{}{
// "tier": "Standard",
// "size": "S1",
// },
// })
// if err != nil {
// return err
// }
// exampleAppService, err := appservice/appService.NewAppService(ctx, "example", &appservice/appService.AppServiceArgs{
// Name: "example-app-service",
// Location: example.Location,
// ResourceGroupName: example.Name,
// AppServicePlanId: examplePlan.Id,
// })
// if err != nil {
// return err
// }
// _, err = appservice/slot.NewSlot(ctx, "example-staging", &appservice/slot.SlotArgs{
// Name: "staging",
// AppServiceName: exampleAppService.Name,
// Location: example.Location,
// ResourceGroupName: example.Name,
// AppServicePlanId: examplePlan.Id,
// })
// if err != nil {
// return err
// }
// _, err = appservice/slotVirtualNetworkSwiftConnection.NewSlotVirtualNetworkSwiftConnection(ctx, "example", &appservice/slotVirtualNetworkSwiftConnection.SlotVirtualNetworkSwiftConnectionArgs{
// SlotName: example_staging.Name,
// AppServiceId: exampleAppService.Id,
// SubnetId: exampleSubnet.Id,
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
//
// ## Import
//
// App Service Slot Virtual Network Associations can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:appservice/slotVirtualNetworkSwiftConnection:SlotVirtualNetworkSwiftConnection myassociation /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Web/sites/instance1/slots/staging/config/virtualNetwork
// ```
type SlotVirtualNetworkSwiftConnection struct {
	pulumi.CustomResourceState

	// The ID of the App Service or Function App to associate to the VNet. Changing this forces a new resource to be created.
	AppServiceId pulumi.StringOutput `pulumi:"appServiceId"`
	// The name of the App Service Slot or Function App Slot. Changing this forces a new resource to be created.
	SlotName pulumi.StringOutput `pulumi:"slotName"`
	// The ID of the subnet the app service will be associated to (the subnet must have a `serviceDelegation` configured for `Microsoft.Web/serverFarms`).
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
}

// NewSlotVirtualNetworkSwiftConnection registers a new resource with the given unique name, arguments, and options.
func NewSlotVirtualNetworkSwiftConnection(ctx *pulumi.Context,
	name string, args *SlotVirtualNetworkSwiftConnectionArgs, opts ...pulumi.ResourceOption) (*SlotVirtualNetworkSwiftConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppServiceId == nil {
		return nil, errors.New("invalid value for required argument 'AppServiceId'")
	}
	if args.SlotName == nil {
		return nil, errors.New("invalid value for required argument 'SlotName'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SlotVirtualNetworkSwiftConnection
	err := ctx.RegisterResource("azure:appservice/slotVirtualNetworkSwiftConnection:SlotVirtualNetworkSwiftConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSlotVirtualNetworkSwiftConnection gets an existing SlotVirtualNetworkSwiftConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSlotVirtualNetworkSwiftConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SlotVirtualNetworkSwiftConnectionState, opts ...pulumi.ResourceOption) (*SlotVirtualNetworkSwiftConnection, error) {
	var resource SlotVirtualNetworkSwiftConnection
	err := ctx.ReadResource("azure:appservice/slotVirtualNetworkSwiftConnection:SlotVirtualNetworkSwiftConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SlotVirtualNetworkSwiftConnection resources.
type slotVirtualNetworkSwiftConnectionState struct {
	// The ID of the App Service or Function App to associate to the VNet. Changing this forces a new resource to be created.
	AppServiceId *string `pulumi:"appServiceId"`
	// The name of the App Service Slot or Function App Slot. Changing this forces a new resource to be created.
	SlotName *string `pulumi:"slotName"`
	// The ID of the subnet the app service will be associated to (the subnet must have a `serviceDelegation` configured for `Microsoft.Web/serverFarms`).
	SubnetId *string `pulumi:"subnetId"`
}

type SlotVirtualNetworkSwiftConnectionState struct {
	// The ID of the App Service or Function App to associate to the VNet. Changing this forces a new resource to be created.
	AppServiceId pulumi.StringPtrInput
	// The name of the App Service Slot or Function App Slot. Changing this forces a new resource to be created.
	SlotName pulumi.StringPtrInput
	// The ID of the subnet the app service will be associated to (the subnet must have a `serviceDelegation` configured for `Microsoft.Web/serverFarms`).
	SubnetId pulumi.StringPtrInput
}

func (SlotVirtualNetworkSwiftConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*slotVirtualNetworkSwiftConnectionState)(nil)).Elem()
}

type slotVirtualNetworkSwiftConnectionArgs struct {
	// The ID of the App Service or Function App to associate to the VNet. Changing this forces a new resource to be created.
	AppServiceId string `pulumi:"appServiceId"`
	// The name of the App Service Slot or Function App Slot. Changing this forces a new resource to be created.
	SlotName string `pulumi:"slotName"`
	// The ID of the subnet the app service will be associated to (the subnet must have a `serviceDelegation` configured for `Microsoft.Web/serverFarms`).
	SubnetId string `pulumi:"subnetId"`
}

// The set of arguments for constructing a SlotVirtualNetworkSwiftConnection resource.
type SlotVirtualNetworkSwiftConnectionArgs struct {
	// The ID of the App Service or Function App to associate to the VNet. Changing this forces a new resource to be created.
	AppServiceId pulumi.StringInput
	// The name of the App Service Slot or Function App Slot. Changing this forces a new resource to be created.
	SlotName pulumi.StringInput
	// The ID of the subnet the app service will be associated to (the subnet must have a `serviceDelegation` configured for `Microsoft.Web/serverFarms`).
	SubnetId pulumi.StringInput
}

func (SlotVirtualNetworkSwiftConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*slotVirtualNetworkSwiftConnectionArgs)(nil)).Elem()
}

type SlotVirtualNetworkSwiftConnectionInput interface {
	pulumi.Input

	ToSlotVirtualNetworkSwiftConnectionOutput() SlotVirtualNetworkSwiftConnectionOutput
	ToSlotVirtualNetworkSwiftConnectionOutputWithContext(ctx context.Context) SlotVirtualNetworkSwiftConnectionOutput
}

func (*SlotVirtualNetworkSwiftConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**SlotVirtualNetworkSwiftConnection)(nil)).Elem()
}

func (i *SlotVirtualNetworkSwiftConnection) ToSlotVirtualNetworkSwiftConnectionOutput() SlotVirtualNetworkSwiftConnectionOutput {
	return i.ToSlotVirtualNetworkSwiftConnectionOutputWithContext(context.Background())
}

func (i *SlotVirtualNetworkSwiftConnection) ToSlotVirtualNetworkSwiftConnectionOutputWithContext(ctx context.Context) SlotVirtualNetworkSwiftConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlotVirtualNetworkSwiftConnectionOutput)
}

// SlotVirtualNetworkSwiftConnectionArrayInput is an input type that accepts SlotVirtualNetworkSwiftConnectionArray and SlotVirtualNetworkSwiftConnectionArrayOutput values.
// You can construct a concrete instance of `SlotVirtualNetworkSwiftConnectionArrayInput` via:
//
//	SlotVirtualNetworkSwiftConnectionArray{ SlotVirtualNetworkSwiftConnectionArgs{...} }
type SlotVirtualNetworkSwiftConnectionArrayInput interface {
	pulumi.Input

	ToSlotVirtualNetworkSwiftConnectionArrayOutput() SlotVirtualNetworkSwiftConnectionArrayOutput
	ToSlotVirtualNetworkSwiftConnectionArrayOutputWithContext(context.Context) SlotVirtualNetworkSwiftConnectionArrayOutput
}

type SlotVirtualNetworkSwiftConnectionArray []SlotVirtualNetworkSwiftConnectionInput

func (SlotVirtualNetworkSwiftConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SlotVirtualNetworkSwiftConnection)(nil)).Elem()
}

func (i SlotVirtualNetworkSwiftConnectionArray) ToSlotVirtualNetworkSwiftConnectionArrayOutput() SlotVirtualNetworkSwiftConnectionArrayOutput {
	return i.ToSlotVirtualNetworkSwiftConnectionArrayOutputWithContext(context.Background())
}

func (i SlotVirtualNetworkSwiftConnectionArray) ToSlotVirtualNetworkSwiftConnectionArrayOutputWithContext(ctx context.Context) SlotVirtualNetworkSwiftConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlotVirtualNetworkSwiftConnectionArrayOutput)
}

// SlotVirtualNetworkSwiftConnectionMapInput is an input type that accepts SlotVirtualNetworkSwiftConnectionMap and SlotVirtualNetworkSwiftConnectionMapOutput values.
// You can construct a concrete instance of `SlotVirtualNetworkSwiftConnectionMapInput` via:
//
//	SlotVirtualNetworkSwiftConnectionMap{ "key": SlotVirtualNetworkSwiftConnectionArgs{...} }
type SlotVirtualNetworkSwiftConnectionMapInput interface {
	pulumi.Input

	ToSlotVirtualNetworkSwiftConnectionMapOutput() SlotVirtualNetworkSwiftConnectionMapOutput
	ToSlotVirtualNetworkSwiftConnectionMapOutputWithContext(context.Context) SlotVirtualNetworkSwiftConnectionMapOutput
}

type SlotVirtualNetworkSwiftConnectionMap map[string]SlotVirtualNetworkSwiftConnectionInput

func (SlotVirtualNetworkSwiftConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SlotVirtualNetworkSwiftConnection)(nil)).Elem()
}

func (i SlotVirtualNetworkSwiftConnectionMap) ToSlotVirtualNetworkSwiftConnectionMapOutput() SlotVirtualNetworkSwiftConnectionMapOutput {
	return i.ToSlotVirtualNetworkSwiftConnectionMapOutputWithContext(context.Background())
}

func (i SlotVirtualNetworkSwiftConnectionMap) ToSlotVirtualNetworkSwiftConnectionMapOutputWithContext(ctx context.Context) SlotVirtualNetworkSwiftConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlotVirtualNetworkSwiftConnectionMapOutput)
}

type SlotVirtualNetworkSwiftConnectionOutput struct{ *pulumi.OutputState }

func (SlotVirtualNetworkSwiftConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SlotVirtualNetworkSwiftConnection)(nil)).Elem()
}

func (o SlotVirtualNetworkSwiftConnectionOutput) ToSlotVirtualNetworkSwiftConnectionOutput() SlotVirtualNetworkSwiftConnectionOutput {
	return o
}

func (o SlotVirtualNetworkSwiftConnectionOutput) ToSlotVirtualNetworkSwiftConnectionOutputWithContext(ctx context.Context) SlotVirtualNetworkSwiftConnectionOutput {
	return o
}

// The ID of the App Service or Function App to associate to the VNet. Changing this forces a new resource to be created.
func (o SlotVirtualNetworkSwiftConnectionOutput) AppServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SlotVirtualNetworkSwiftConnection) pulumi.StringOutput { return v.AppServiceId }).(pulumi.StringOutput)
}

// The name of the App Service Slot or Function App Slot. Changing this forces a new resource to be created.
func (o SlotVirtualNetworkSwiftConnectionOutput) SlotName() pulumi.StringOutput {
	return o.ApplyT(func(v *SlotVirtualNetworkSwiftConnection) pulumi.StringOutput { return v.SlotName }).(pulumi.StringOutput)
}

// The ID of the subnet the app service will be associated to (the subnet must have a `serviceDelegation` configured for `Microsoft.Web/serverFarms`).
func (o SlotVirtualNetworkSwiftConnectionOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *SlotVirtualNetworkSwiftConnection) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

type SlotVirtualNetworkSwiftConnectionArrayOutput struct{ *pulumi.OutputState }

func (SlotVirtualNetworkSwiftConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SlotVirtualNetworkSwiftConnection)(nil)).Elem()
}

func (o SlotVirtualNetworkSwiftConnectionArrayOutput) ToSlotVirtualNetworkSwiftConnectionArrayOutput() SlotVirtualNetworkSwiftConnectionArrayOutput {
	return o
}

func (o SlotVirtualNetworkSwiftConnectionArrayOutput) ToSlotVirtualNetworkSwiftConnectionArrayOutputWithContext(ctx context.Context) SlotVirtualNetworkSwiftConnectionArrayOutput {
	return o
}

func (o SlotVirtualNetworkSwiftConnectionArrayOutput) Index(i pulumi.IntInput) SlotVirtualNetworkSwiftConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SlotVirtualNetworkSwiftConnection {
		return vs[0].([]*SlotVirtualNetworkSwiftConnection)[vs[1].(int)]
	}).(SlotVirtualNetworkSwiftConnectionOutput)
}

type SlotVirtualNetworkSwiftConnectionMapOutput struct{ *pulumi.OutputState }

func (SlotVirtualNetworkSwiftConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SlotVirtualNetworkSwiftConnection)(nil)).Elem()
}

func (o SlotVirtualNetworkSwiftConnectionMapOutput) ToSlotVirtualNetworkSwiftConnectionMapOutput() SlotVirtualNetworkSwiftConnectionMapOutput {
	return o
}

func (o SlotVirtualNetworkSwiftConnectionMapOutput) ToSlotVirtualNetworkSwiftConnectionMapOutputWithContext(ctx context.Context) SlotVirtualNetworkSwiftConnectionMapOutput {
	return o
}

func (o SlotVirtualNetworkSwiftConnectionMapOutput) MapIndex(k pulumi.StringInput) SlotVirtualNetworkSwiftConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SlotVirtualNetworkSwiftConnection {
		return vs[0].(map[string]*SlotVirtualNetworkSwiftConnection)[vs[1].(string)]
	}).(SlotVirtualNetworkSwiftConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SlotVirtualNetworkSwiftConnectionInput)(nil)).Elem(), &SlotVirtualNetworkSwiftConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlotVirtualNetworkSwiftConnectionArrayInput)(nil)).Elem(), SlotVirtualNetworkSwiftConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlotVirtualNetworkSwiftConnectionMapInput)(nil)).Elem(), SlotVirtualNetworkSwiftConnectionMap{})
	pulumi.RegisterOutputType(SlotVirtualNetworkSwiftConnectionOutput{})
	pulumi.RegisterOutputType(SlotVirtualNetworkSwiftConnectionArrayOutput{})
	pulumi.RegisterOutputType(SlotVirtualNetworkSwiftConnectionMapOutput{})
}
