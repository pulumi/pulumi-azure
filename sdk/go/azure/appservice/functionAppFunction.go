// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Function App Function.
//
// ## Example Usage
// ### Basic HTTP Trigger
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/appservice"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Location:               exampleResourceGroup.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("LRS"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleServicePlan, err := appservice.NewServicePlan(ctx, "exampleServicePlan", &appservice.ServicePlanArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				OsType:            pulumi.String("Linux"),
//				SkuName:           pulumi.String("S1"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleLinuxFunctionApp, err := appservice.NewLinuxFunctionApp(ctx, "exampleLinuxFunctionApp", &appservice.LinuxFunctionAppArgs{
//				Location:                exampleResourceGroup.Location,
//				ResourceGroupName:       exampleResourceGroup.Name,
//				ServicePlanId:           exampleServicePlan.ID(),
//				StorageAccountName:      exampleAccount.Name,
//				StorageAccountAccessKey: exampleAccount.PrimaryAccessKey,
//				SiteConfig: &appservice.LinuxFunctionAppSiteConfigArgs{
//					ApplicationStack: &appservice.LinuxFunctionAppSiteConfigApplicationStackArgs{
//						PythonVersion: pulumi.String("3.9"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"name": "Azure",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			tmpJSON1, err := json.Marshal(map[string]interface{}{
//				"bindings": []interface{}{
//					map[string]interface{}{
//						"authLevel": "function",
//						"direction": "in",
//						"methods": []string{
//							"get",
//							"post",
//						},
//						"name": "req",
//						"type": "httpTrigger",
//					},
//					map[string]interface{}{
//						"direction": "out",
//						"name":      "$return",
//						"type":      "http",
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json1 := string(tmpJSON1)
//			_, err = appservice.NewFunctionAppFunction(ctx, "exampleFunctionAppFunction", &appservice.FunctionAppFunctionArgs{
//				FunctionAppId: exampleLinuxFunctionApp.ID(),
//				Language:      pulumi.String("Python"),
//				TestData:      pulumi.String(json0),
//				ConfigJson:    pulumi.String(json1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### HTTP Trigger With Code Upload
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//	"os"
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/appservice"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func readFileOrPanic(path string) pulumi.StringPtrInput {
//		data, err := os.ReadFile(path)
//		if err != nil {
//			panic(err.Error())
//		}
//		return pulumi.String(string(data))
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Location:               exampleResourceGroup.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("LRS"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleServicePlan, err := appservice.NewServicePlan(ctx, "exampleServicePlan", &appservice.ServicePlanArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				OsType:            pulumi.String("Windows"),
//				SkuName:           pulumi.String("S1"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleWindowsFunctionApp, err := appservice.NewWindowsFunctionApp(ctx, "exampleWindowsFunctionApp", &appservice.WindowsFunctionAppArgs{
//				Location:                exampleResourceGroup.Location,
//				ResourceGroupName:       exampleResourceGroup.Name,
//				ServicePlanId:           exampleServicePlan.ID(),
//				StorageAccountName:      exampleAccount.Name,
//				StorageAccountAccessKey: exampleAccount.PrimaryAccessKey,
//				SiteConfig: &appservice.WindowsFunctionAppSiteConfigArgs{
//					ApplicationStack: &appservice.WindowsFunctionAppSiteConfigApplicationStackArgs{
//						DotnetVersion: pulumi.String("6"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"name": "Azure",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			tmpJSON1, err := json.Marshal(map[string]interface{}{
//				"bindings": []interface{}{
//					map[string]interface{}{
//						"authLevel": "function",
//						"direction": "in",
//						"methods": []string{
//							"get",
//							"post",
//						},
//						"name": "req",
//						"type": "httpTrigger",
//					},
//					map[string]interface{}{
//						"direction": "out",
//						"name":      "$return",
//						"type":      "http",
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json1 := string(tmpJSON1)
//			_, err = appservice.NewFunctionAppFunction(ctx, "exampleFunctionAppFunction", &appservice.FunctionAppFunctionArgs{
//				FunctionAppId: exampleWindowsFunctionApp.ID(),
//				Language:      pulumi.String("CSharp"),
//				Files: appservice.FunctionAppFunctionFileArray{
//					&appservice.FunctionAppFunctionFileArgs{
//						Name:    pulumi.String("run.csx"),
//						Content: readFileOrPanic("exampledata/run.csx"),
//					},
//				},
//				TestData:   pulumi.String(json0),
//				ConfigJson: pulumi.String(json1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// a Function App Function can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:appservice/functionAppFunction:FunctionAppFunction example "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/sites/site1/functions/function1"
//
// ```
type FunctionAppFunction struct {
	pulumi.CustomResourceState

	// The config for this Function in JSON format.
	ConfigJson pulumi.StringOutput `pulumi:"configJson"`
	// The URL of the configuration JSON.
	ConfigUrl pulumi.StringOutput `pulumi:"configUrl"`
	// Should this function be enabled. Defaults to `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// A `file` block as detailed below. Changing this forces a new resource to be created.
	Files FunctionAppFunctionFileArrayOutput `pulumi:"files"`
	// The ID of the Function App in which this function should reside. Changing this forces a new resource to be created.
	FunctionAppId pulumi.StringOutput `pulumi:"functionAppId"`
	// The invocation URL.
	InvocationUrl pulumi.StringOutput `pulumi:"invocationUrl"`
	// The language the Function is written in. Possible values are `CSharp`, `Custom`, `Java`, `Javascript`, `Python`, `PowerShell`, and `TypeScript`.
	//
	// > **NOTE:** when using `Custom` language, you must specify the code handler in the `host.json` file for your function. See the [official docs](https://docs.microsoft.com/azure/azure-functions/functions-custom-handlers#hostjson) for more information.
	Language pulumi.StringPtrOutput `pulumi:"language"`
	// The name of the function. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Script root path URL.
	ScriptRootPathUrl pulumi.StringOutput `pulumi:"scriptRootPathUrl"`
	// The script URL.
	ScriptUrl pulumi.StringOutput `pulumi:"scriptUrl"`
	// The URL for the Secrets File.
	SecretsFileUrl pulumi.StringOutput `pulumi:"secretsFileUrl"`
	// The test data for the function.
	TestData pulumi.StringPtrOutput `pulumi:"testData"`
	// The Test data URL.
	TestDataUrl pulumi.StringOutput `pulumi:"testDataUrl"`
	// The function URL.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewFunctionAppFunction registers a new resource with the given unique name, arguments, and options.
func NewFunctionAppFunction(ctx *pulumi.Context,
	name string, args *FunctionAppFunctionArgs, opts ...pulumi.ResourceOption) (*FunctionAppFunction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigJson == nil {
		return nil, errors.New("invalid value for required argument 'ConfigJson'")
	}
	if args.FunctionAppId == nil {
		return nil, errors.New("invalid value for required argument 'FunctionAppId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FunctionAppFunction
	err := ctx.RegisterResource("azure:appservice/functionAppFunction:FunctionAppFunction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFunctionAppFunction gets an existing FunctionAppFunction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFunctionAppFunction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FunctionAppFunctionState, opts ...pulumi.ResourceOption) (*FunctionAppFunction, error) {
	var resource FunctionAppFunction
	err := ctx.ReadResource("azure:appservice/functionAppFunction:FunctionAppFunction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FunctionAppFunction resources.
type functionAppFunctionState struct {
	// The config for this Function in JSON format.
	ConfigJson *string `pulumi:"configJson"`
	// The URL of the configuration JSON.
	ConfigUrl *string `pulumi:"configUrl"`
	// Should this function be enabled. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// A `file` block as detailed below. Changing this forces a new resource to be created.
	Files []FunctionAppFunctionFile `pulumi:"files"`
	// The ID of the Function App in which this function should reside. Changing this forces a new resource to be created.
	FunctionAppId *string `pulumi:"functionAppId"`
	// The invocation URL.
	InvocationUrl *string `pulumi:"invocationUrl"`
	// The language the Function is written in. Possible values are `CSharp`, `Custom`, `Java`, `Javascript`, `Python`, `PowerShell`, and `TypeScript`.
	//
	// > **NOTE:** when using `Custom` language, you must specify the code handler in the `host.json` file for your function. See the [official docs](https://docs.microsoft.com/azure/azure-functions/functions-custom-handlers#hostjson) for more information.
	Language *string `pulumi:"language"`
	// The name of the function. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The Script root path URL.
	ScriptRootPathUrl *string `pulumi:"scriptRootPathUrl"`
	// The script URL.
	ScriptUrl *string `pulumi:"scriptUrl"`
	// The URL for the Secrets File.
	SecretsFileUrl *string `pulumi:"secretsFileUrl"`
	// The test data for the function.
	TestData *string `pulumi:"testData"`
	// The Test data URL.
	TestDataUrl *string `pulumi:"testDataUrl"`
	// The function URL.
	Url *string `pulumi:"url"`
}

type FunctionAppFunctionState struct {
	// The config for this Function in JSON format.
	ConfigJson pulumi.StringPtrInput
	// The URL of the configuration JSON.
	ConfigUrl pulumi.StringPtrInput
	// Should this function be enabled. Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// A `file` block as detailed below. Changing this forces a new resource to be created.
	Files FunctionAppFunctionFileArrayInput
	// The ID of the Function App in which this function should reside. Changing this forces a new resource to be created.
	FunctionAppId pulumi.StringPtrInput
	// The invocation URL.
	InvocationUrl pulumi.StringPtrInput
	// The language the Function is written in. Possible values are `CSharp`, `Custom`, `Java`, `Javascript`, `Python`, `PowerShell`, and `TypeScript`.
	//
	// > **NOTE:** when using `Custom` language, you must specify the code handler in the `host.json` file for your function. See the [official docs](https://docs.microsoft.com/azure/azure-functions/functions-custom-handlers#hostjson) for more information.
	Language pulumi.StringPtrInput
	// The name of the function. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The Script root path URL.
	ScriptRootPathUrl pulumi.StringPtrInput
	// The script URL.
	ScriptUrl pulumi.StringPtrInput
	// The URL for the Secrets File.
	SecretsFileUrl pulumi.StringPtrInput
	// The test data for the function.
	TestData pulumi.StringPtrInput
	// The Test data URL.
	TestDataUrl pulumi.StringPtrInput
	// The function URL.
	Url pulumi.StringPtrInput
}

func (FunctionAppFunctionState) ElementType() reflect.Type {
	return reflect.TypeOf((*functionAppFunctionState)(nil)).Elem()
}

type functionAppFunctionArgs struct {
	// The config for this Function in JSON format.
	ConfigJson string `pulumi:"configJson"`
	// Should this function be enabled. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// A `file` block as detailed below. Changing this forces a new resource to be created.
	Files []FunctionAppFunctionFile `pulumi:"files"`
	// The ID of the Function App in which this function should reside. Changing this forces a new resource to be created.
	FunctionAppId string `pulumi:"functionAppId"`
	// The language the Function is written in. Possible values are `CSharp`, `Custom`, `Java`, `Javascript`, `Python`, `PowerShell`, and `TypeScript`.
	//
	// > **NOTE:** when using `Custom` language, you must specify the code handler in the `host.json` file for your function. See the [official docs](https://docs.microsoft.com/azure/azure-functions/functions-custom-handlers#hostjson) for more information.
	Language *string `pulumi:"language"`
	// The name of the function. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The test data for the function.
	TestData *string `pulumi:"testData"`
}

// The set of arguments for constructing a FunctionAppFunction resource.
type FunctionAppFunctionArgs struct {
	// The config for this Function in JSON format.
	ConfigJson pulumi.StringInput
	// Should this function be enabled. Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// A `file` block as detailed below. Changing this forces a new resource to be created.
	Files FunctionAppFunctionFileArrayInput
	// The ID of the Function App in which this function should reside. Changing this forces a new resource to be created.
	FunctionAppId pulumi.StringInput
	// The language the Function is written in. Possible values are `CSharp`, `Custom`, `Java`, `Javascript`, `Python`, `PowerShell`, and `TypeScript`.
	//
	// > **NOTE:** when using `Custom` language, you must specify the code handler in the `host.json` file for your function. See the [official docs](https://docs.microsoft.com/azure/azure-functions/functions-custom-handlers#hostjson) for more information.
	Language pulumi.StringPtrInput
	// The name of the function. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The test data for the function.
	TestData pulumi.StringPtrInput
}

func (FunctionAppFunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*functionAppFunctionArgs)(nil)).Elem()
}

type FunctionAppFunctionInput interface {
	pulumi.Input

	ToFunctionAppFunctionOutput() FunctionAppFunctionOutput
	ToFunctionAppFunctionOutputWithContext(ctx context.Context) FunctionAppFunctionOutput
}

func (*FunctionAppFunction) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionAppFunction)(nil)).Elem()
}

func (i *FunctionAppFunction) ToFunctionAppFunctionOutput() FunctionAppFunctionOutput {
	return i.ToFunctionAppFunctionOutputWithContext(context.Background())
}

func (i *FunctionAppFunction) ToFunctionAppFunctionOutputWithContext(ctx context.Context) FunctionAppFunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionAppFunctionOutput)
}

// FunctionAppFunctionArrayInput is an input type that accepts FunctionAppFunctionArray and FunctionAppFunctionArrayOutput values.
// You can construct a concrete instance of `FunctionAppFunctionArrayInput` via:
//
//	FunctionAppFunctionArray{ FunctionAppFunctionArgs{...} }
type FunctionAppFunctionArrayInput interface {
	pulumi.Input

	ToFunctionAppFunctionArrayOutput() FunctionAppFunctionArrayOutput
	ToFunctionAppFunctionArrayOutputWithContext(context.Context) FunctionAppFunctionArrayOutput
}

type FunctionAppFunctionArray []FunctionAppFunctionInput

func (FunctionAppFunctionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FunctionAppFunction)(nil)).Elem()
}

func (i FunctionAppFunctionArray) ToFunctionAppFunctionArrayOutput() FunctionAppFunctionArrayOutput {
	return i.ToFunctionAppFunctionArrayOutputWithContext(context.Background())
}

func (i FunctionAppFunctionArray) ToFunctionAppFunctionArrayOutputWithContext(ctx context.Context) FunctionAppFunctionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionAppFunctionArrayOutput)
}

// FunctionAppFunctionMapInput is an input type that accepts FunctionAppFunctionMap and FunctionAppFunctionMapOutput values.
// You can construct a concrete instance of `FunctionAppFunctionMapInput` via:
//
//	FunctionAppFunctionMap{ "key": FunctionAppFunctionArgs{...} }
type FunctionAppFunctionMapInput interface {
	pulumi.Input

	ToFunctionAppFunctionMapOutput() FunctionAppFunctionMapOutput
	ToFunctionAppFunctionMapOutputWithContext(context.Context) FunctionAppFunctionMapOutput
}

type FunctionAppFunctionMap map[string]FunctionAppFunctionInput

func (FunctionAppFunctionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FunctionAppFunction)(nil)).Elem()
}

func (i FunctionAppFunctionMap) ToFunctionAppFunctionMapOutput() FunctionAppFunctionMapOutput {
	return i.ToFunctionAppFunctionMapOutputWithContext(context.Background())
}

func (i FunctionAppFunctionMap) ToFunctionAppFunctionMapOutputWithContext(ctx context.Context) FunctionAppFunctionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionAppFunctionMapOutput)
}

type FunctionAppFunctionOutput struct{ *pulumi.OutputState }

func (FunctionAppFunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionAppFunction)(nil)).Elem()
}

func (o FunctionAppFunctionOutput) ToFunctionAppFunctionOutput() FunctionAppFunctionOutput {
	return o
}

func (o FunctionAppFunctionOutput) ToFunctionAppFunctionOutputWithContext(ctx context.Context) FunctionAppFunctionOutput {
	return o
}

// The config for this Function in JSON format.
func (o FunctionAppFunctionOutput) ConfigJson() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionAppFunction) pulumi.StringOutput { return v.ConfigJson }).(pulumi.StringOutput)
}

// The URL of the configuration JSON.
func (o FunctionAppFunctionOutput) ConfigUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionAppFunction) pulumi.StringOutput { return v.ConfigUrl }).(pulumi.StringOutput)
}

// Should this function be enabled. Defaults to `true`.
func (o FunctionAppFunctionOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FunctionAppFunction) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// A `file` block as detailed below. Changing this forces a new resource to be created.
func (o FunctionAppFunctionOutput) Files() FunctionAppFunctionFileArrayOutput {
	return o.ApplyT(func(v *FunctionAppFunction) FunctionAppFunctionFileArrayOutput { return v.Files }).(FunctionAppFunctionFileArrayOutput)
}

// The ID of the Function App in which this function should reside. Changing this forces a new resource to be created.
func (o FunctionAppFunctionOutput) FunctionAppId() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionAppFunction) pulumi.StringOutput { return v.FunctionAppId }).(pulumi.StringOutput)
}

// The invocation URL.
func (o FunctionAppFunctionOutput) InvocationUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionAppFunction) pulumi.StringOutput { return v.InvocationUrl }).(pulumi.StringOutput)
}

// The language the Function is written in. Possible values are `CSharp`, `Custom`, `Java`, `Javascript`, `Python`, `PowerShell`, and `TypeScript`.
//
// > **NOTE:** when using `Custom` language, you must specify the code handler in the `host.json` file for your function. See the [official docs](https://docs.microsoft.com/azure/azure-functions/functions-custom-handlers#hostjson) for more information.
func (o FunctionAppFunctionOutput) Language() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionAppFunction) pulumi.StringPtrOutput { return v.Language }).(pulumi.StringPtrOutput)
}

// The name of the function. Changing this forces a new resource to be created.
func (o FunctionAppFunctionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionAppFunction) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Script root path URL.
func (o FunctionAppFunctionOutput) ScriptRootPathUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionAppFunction) pulumi.StringOutput { return v.ScriptRootPathUrl }).(pulumi.StringOutput)
}

// The script URL.
func (o FunctionAppFunctionOutput) ScriptUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionAppFunction) pulumi.StringOutput { return v.ScriptUrl }).(pulumi.StringOutput)
}

// The URL for the Secrets File.
func (o FunctionAppFunctionOutput) SecretsFileUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionAppFunction) pulumi.StringOutput { return v.SecretsFileUrl }).(pulumi.StringOutput)
}

// The test data for the function.
func (o FunctionAppFunctionOutput) TestData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionAppFunction) pulumi.StringPtrOutput { return v.TestData }).(pulumi.StringPtrOutput)
}

// The Test data URL.
func (o FunctionAppFunctionOutput) TestDataUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionAppFunction) pulumi.StringOutput { return v.TestDataUrl }).(pulumi.StringOutput)
}

// The function URL.
func (o FunctionAppFunctionOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionAppFunction) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type FunctionAppFunctionArrayOutput struct{ *pulumi.OutputState }

func (FunctionAppFunctionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FunctionAppFunction)(nil)).Elem()
}

func (o FunctionAppFunctionArrayOutput) ToFunctionAppFunctionArrayOutput() FunctionAppFunctionArrayOutput {
	return o
}

func (o FunctionAppFunctionArrayOutput) ToFunctionAppFunctionArrayOutputWithContext(ctx context.Context) FunctionAppFunctionArrayOutput {
	return o
}

func (o FunctionAppFunctionArrayOutput) Index(i pulumi.IntInput) FunctionAppFunctionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FunctionAppFunction {
		return vs[0].([]*FunctionAppFunction)[vs[1].(int)]
	}).(FunctionAppFunctionOutput)
}

type FunctionAppFunctionMapOutput struct{ *pulumi.OutputState }

func (FunctionAppFunctionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FunctionAppFunction)(nil)).Elem()
}

func (o FunctionAppFunctionMapOutput) ToFunctionAppFunctionMapOutput() FunctionAppFunctionMapOutput {
	return o
}

func (o FunctionAppFunctionMapOutput) ToFunctionAppFunctionMapOutputWithContext(ctx context.Context) FunctionAppFunctionMapOutput {
	return o
}

func (o FunctionAppFunctionMapOutput) MapIndex(k pulumi.StringInput) FunctionAppFunctionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FunctionAppFunction {
		return vs[0].(map[string]*FunctionAppFunction)[vs[1].(string)]
	}).(FunctionAppFunctionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionAppFunctionInput)(nil)).Elem(), &FunctionAppFunction{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionAppFunctionArrayInput)(nil)).Elem(), FunctionAppFunctionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionAppFunctionMapInput)(nil)).Elem(), FunctionAppFunctionMap{})
	pulumi.RegisterOutputType(FunctionAppFunctionOutput{})
	pulumi.RegisterOutputType(FunctionAppFunctionArrayOutput{})
	pulumi.RegisterOutputType(FunctionAppFunctionMapOutput{})
}
