// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Web App Hybrid Connection.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/appservice"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/relay"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleServicePlan, err := appservice.NewServicePlan(ctx, "exampleServicePlan", &appservice.ServicePlanArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				OsType:            pulumi.String("Windows"),
//				SkuName:           pulumi.String("S1"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleNamespace, err := relay.NewNamespace(ctx, "exampleNamespace", &relay.NamespaceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				SkuName:           pulumi.String("Standard"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleHybridConnection, err := relay.NewHybridConnection(ctx, "exampleHybridConnection", &relay.HybridConnectionArgs{
//				ResourceGroupName:  exampleResourceGroup.Name,
//				RelayNamespaceName: exampleNamespace.Name,
//			})
//			if err != nil {
//				return err
//			}
//			exampleWindowsWebApp, err := appservice.NewWindowsWebApp(ctx, "exampleWindowsWebApp", &appservice.WindowsWebAppArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				ServicePlanId:     exampleServicePlan.ID(),
//				SiteConfig:        nil,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = appservice.NewWebAppHybridConnection(ctx, "exampleWebAppHybridConnection", &appservice.WebAppHybridConnectionArgs{
//				WebAppId: exampleWindowsWebApp.ID(),
//				RelayId:  exampleHybridConnection.ID(),
//				Hostname: pulumi.String("myhostname.example"),
//				Port:     pulumi.Int(8081),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// a Web App Hybrid Connection can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:appservice/webAppHybridConnection:WebAppHybridConnection example "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/sites/site1/hybridConnectionNamespaces/hybridConnectionNamespace1/relays/relay1"
//
// ```
type WebAppHybridConnection struct {
	pulumi.CustomResourceState

	// The hostname of the endpoint.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// The name of the Relay Namespace.
	NamespaceName pulumi.StringOutput `pulumi:"namespaceName"`
	// The port to use for the endpoint.
	Port pulumi.IntOutput `pulumi:"port"`
	// The ID of the Relay Hybrid Connection to use. Changing this forces a new resource to be created.
	RelayId pulumi.StringOutput `pulumi:"relayId"`
	// The name of the Relay in use.
	RelayName pulumi.StringOutput `pulumi:"relayName"`
	// The name of the Relay key with `Send` permission to use. Defaults to `RootManageSharedAccessKey`
	SendKeyName pulumi.StringPtrOutput `pulumi:"sendKeyName"`
	// The Primary Access Key for the `sendKeyName`
	SendKeyValue pulumi.StringOutput `pulumi:"sendKeyValue"`
	// The Service Bus Namespace.
	ServiceBusNamespace pulumi.StringOutput `pulumi:"serviceBusNamespace"`
	// The suffix for the endpoint.
	ServiceBusSuffix pulumi.StringOutput `pulumi:"serviceBusSuffix"`
	// The ID of the Web App for this Hybrid Connection. Changing this forces a new resource to be created.
	WebAppId pulumi.StringOutput `pulumi:"webAppId"`
}

// NewWebAppHybridConnection registers a new resource with the given unique name, arguments, and options.
func NewWebAppHybridConnection(ctx *pulumi.Context,
	name string, args *WebAppHybridConnectionArgs, opts ...pulumi.ResourceOption) (*WebAppHybridConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Hostname == nil {
		return nil, errors.New("invalid value for required argument 'Hostname'")
	}
	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	if args.RelayId == nil {
		return nil, errors.New("invalid value for required argument 'RelayId'")
	}
	if args.WebAppId == nil {
		return nil, errors.New("invalid value for required argument 'WebAppId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"sendKeyValue",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WebAppHybridConnection
	err := ctx.RegisterResource("azure:appservice/webAppHybridConnection:WebAppHybridConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebAppHybridConnection gets an existing WebAppHybridConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebAppHybridConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebAppHybridConnectionState, opts ...pulumi.ResourceOption) (*WebAppHybridConnection, error) {
	var resource WebAppHybridConnection
	err := ctx.ReadResource("azure:appservice/webAppHybridConnection:WebAppHybridConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebAppHybridConnection resources.
type webAppHybridConnectionState struct {
	// The hostname of the endpoint.
	Hostname *string `pulumi:"hostname"`
	// The name of the Relay Namespace.
	NamespaceName *string `pulumi:"namespaceName"`
	// The port to use for the endpoint.
	Port *int `pulumi:"port"`
	// The ID of the Relay Hybrid Connection to use. Changing this forces a new resource to be created.
	RelayId *string `pulumi:"relayId"`
	// The name of the Relay in use.
	RelayName *string `pulumi:"relayName"`
	// The name of the Relay key with `Send` permission to use. Defaults to `RootManageSharedAccessKey`
	SendKeyName *string `pulumi:"sendKeyName"`
	// The Primary Access Key for the `sendKeyName`
	SendKeyValue *string `pulumi:"sendKeyValue"`
	// The Service Bus Namespace.
	ServiceBusNamespace *string `pulumi:"serviceBusNamespace"`
	// The suffix for the endpoint.
	ServiceBusSuffix *string `pulumi:"serviceBusSuffix"`
	// The ID of the Web App for this Hybrid Connection. Changing this forces a new resource to be created.
	WebAppId *string `pulumi:"webAppId"`
}

type WebAppHybridConnectionState struct {
	// The hostname of the endpoint.
	Hostname pulumi.StringPtrInput
	// The name of the Relay Namespace.
	NamespaceName pulumi.StringPtrInput
	// The port to use for the endpoint.
	Port pulumi.IntPtrInput
	// The ID of the Relay Hybrid Connection to use. Changing this forces a new resource to be created.
	RelayId pulumi.StringPtrInput
	// The name of the Relay in use.
	RelayName pulumi.StringPtrInput
	// The name of the Relay key with `Send` permission to use. Defaults to `RootManageSharedAccessKey`
	SendKeyName pulumi.StringPtrInput
	// The Primary Access Key for the `sendKeyName`
	SendKeyValue pulumi.StringPtrInput
	// The Service Bus Namespace.
	ServiceBusNamespace pulumi.StringPtrInput
	// The suffix for the endpoint.
	ServiceBusSuffix pulumi.StringPtrInput
	// The ID of the Web App for this Hybrid Connection. Changing this forces a new resource to be created.
	WebAppId pulumi.StringPtrInput
}

func (WebAppHybridConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*webAppHybridConnectionState)(nil)).Elem()
}

type webAppHybridConnectionArgs struct {
	// The hostname of the endpoint.
	Hostname string `pulumi:"hostname"`
	// The port to use for the endpoint.
	Port int `pulumi:"port"`
	// The ID of the Relay Hybrid Connection to use. Changing this forces a new resource to be created.
	RelayId string `pulumi:"relayId"`
	// The name of the Relay key with `Send` permission to use. Defaults to `RootManageSharedAccessKey`
	SendKeyName *string `pulumi:"sendKeyName"`
	// The ID of the Web App for this Hybrid Connection. Changing this forces a new resource to be created.
	WebAppId string `pulumi:"webAppId"`
}

// The set of arguments for constructing a WebAppHybridConnection resource.
type WebAppHybridConnectionArgs struct {
	// The hostname of the endpoint.
	Hostname pulumi.StringInput
	// The port to use for the endpoint.
	Port pulumi.IntInput
	// The ID of the Relay Hybrid Connection to use. Changing this forces a new resource to be created.
	RelayId pulumi.StringInput
	// The name of the Relay key with `Send` permission to use. Defaults to `RootManageSharedAccessKey`
	SendKeyName pulumi.StringPtrInput
	// The ID of the Web App for this Hybrid Connection. Changing this forces a new resource to be created.
	WebAppId pulumi.StringInput
}

func (WebAppHybridConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webAppHybridConnectionArgs)(nil)).Elem()
}

type WebAppHybridConnectionInput interface {
	pulumi.Input

	ToWebAppHybridConnectionOutput() WebAppHybridConnectionOutput
	ToWebAppHybridConnectionOutputWithContext(ctx context.Context) WebAppHybridConnectionOutput
}

func (*WebAppHybridConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**WebAppHybridConnection)(nil)).Elem()
}

func (i *WebAppHybridConnection) ToWebAppHybridConnectionOutput() WebAppHybridConnectionOutput {
	return i.ToWebAppHybridConnectionOutputWithContext(context.Background())
}

func (i *WebAppHybridConnection) ToWebAppHybridConnectionOutputWithContext(ctx context.Context) WebAppHybridConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppHybridConnectionOutput)
}

// WebAppHybridConnectionArrayInput is an input type that accepts WebAppHybridConnectionArray and WebAppHybridConnectionArrayOutput values.
// You can construct a concrete instance of `WebAppHybridConnectionArrayInput` via:
//
//	WebAppHybridConnectionArray{ WebAppHybridConnectionArgs{...} }
type WebAppHybridConnectionArrayInput interface {
	pulumi.Input

	ToWebAppHybridConnectionArrayOutput() WebAppHybridConnectionArrayOutput
	ToWebAppHybridConnectionArrayOutputWithContext(context.Context) WebAppHybridConnectionArrayOutput
}

type WebAppHybridConnectionArray []WebAppHybridConnectionInput

func (WebAppHybridConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebAppHybridConnection)(nil)).Elem()
}

func (i WebAppHybridConnectionArray) ToWebAppHybridConnectionArrayOutput() WebAppHybridConnectionArrayOutput {
	return i.ToWebAppHybridConnectionArrayOutputWithContext(context.Background())
}

func (i WebAppHybridConnectionArray) ToWebAppHybridConnectionArrayOutputWithContext(ctx context.Context) WebAppHybridConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppHybridConnectionArrayOutput)
}

// WebAppHybridConnectionMapInput is an input type that accepts WebAppHybridConnectionMap and WebAppHybridConnectionMapOutput values.
// You can construct a concrete instance of `WebAppHybridConnectionMapInput` via:
//
//	WebAppHybridConnectionMap{ "key": WebAppHybridConnectionArgs{...} }
type WebAppHybridConnectionMapInput interface {
	pulumi.Input

	ToWebAppHybridConnectionMapOutput() WebAppHybridConnectionMapOutput
	ToWebAppHybridConnectionMapOutputWithContext(context.Context) WebAppHybridConnectionMapOutput
}

type WebAppHybridConnectionMap map[string]WebAppHybridConnectionInput

func (WebAppHybridConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebAppHybridConnection)(nil)).Elem()
}

func (i WebAppHybridConnectionMap) ToWebAppHybridConnectionMapOutput() WebAppHybridConnectionMapOutput {
	return i.ToWebAppHybridConnectionMapOutputWithContext(context.Background())
}

func (i WebAppHybridConnectionMap) ToWebAppHybridConnectionMapOutputWithContext(ctx context.Context) WebAppHybridConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppHybridConnectionMapOutput)
}

type WebAppHybridConnectionOutput struct{ *pulumi.OutputState }

func (WebAppHybridConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebAppHybridConnection)(nil)).Elem()
}

func (o WebAppHybridConnectionOutput) ToWebAppHybridConnectionOutput() WebAppHybridConnectionOutput {
	return o
}

func (o WebAppHybridConnectionOutput) ToWebAppHybridConnectionOutputWithContext(ctx context.Context) WebAppHybridConnectionOutput {
	return o
}

// The hostname of the endpoint.
func (o WebAppHybridConnectionOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *WebAppHybridConnection) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

// The name of the Relay Namespace.
func (o WebAppHybridConnectionOutput) NamespaceName() pulumi.StringOutput {
	return o.ApplyT(func(v *WebAppHybridConnection) pulumi.StringOutput { return v.NamespaceName }).(pulumi.StringOutput)
}

// The port to use for the endpoint.
func (o WebAppHybridConnectionOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *WebAppHybridConnection) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// The ID of the Relay Hybrid Connection to use. Changing this forces a new resource to be created.
func (o WebAppHybridConnectionOutput) RelayId() pulumi.StringOutput {
	return o.ApplyT(func(v *WebAppHybridConnection) pulumi.StringOutput { return v.RelayId }).(pulumi.StringOutput)
}

// The name of the Relay in use.
func (o WebAppHybridConnectionOutput) RelayName() pulumi.StringOutput {
	return o.ApplyT(func(v *WebAppHybridConnection) pulumi.StringOutput { return v.RelayName }).(pulumi.StringOutput)
}

// The name of the Relay key with `Send` permission to use. Defaults to `RootManageSharedAccessKey`
func (o WebAppHybridConnectionOutput) SendKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebAppHybridConnection) pulumi.StringPtrOutput { return v.SendKeyName }).(pulumi.StringPtrOutput)
}

// The Primary Access Key for the `sendKeyName`
func (o WebAppHybridConnectionOutput) SendKeyValue() pulumi.StringOutput {
	return o.ApplyT(func(v *WebAppHybridConnection) pulumi.StringOutput { return v.SendKeyValue }).(pulumi.StringOutput)
}

// The Service Bus Namespace.
func (o WebAppHybridConnectionOutput) ServiceBusNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v *WebAppHybridConnection) pulumi.StringOutput { return v.ServiceBusNamespace }).(pulumi.StringOutput)
}

// The suffix for the endpoint.
func (o WebAppHybridConnectionOutput) ServiceBusSuffix() pulumi.StringOutput {
	return o.ApplyT(func(v *WebAppHybridConnection) pulumi.StringOutput { return v.ServiceBusSuffix }).(pulumi.StringOutput)
}

// The ID of the Web App for this Hybrid Connection. Changing this forces a new resource to be created.
func (o WebAppHybridConnectionOutput) WebAppId() pulumi.StringOutput {
	return o.ApplyT(func(v *WebAppHybridConnection) pulumi.StringOutput { return v.WebAppId }).(pulumi.StringOutput)
}

type WebAppHybridConnectionArrayOutput struct{ *pulumi.OutputState }

func (WebAppHybridConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebAppHybridConnection)(nil)).Elem()
}

func (o WebAppHybridConnectionArrayOutput) ToWebAppHybridConnectionArrayOutput() WebAppHybridConnectionArrayOutput {
	return o
}

func (o WebAppHybridConnectionArrayOutput) ToWebAppHybridConnectionArrayOutputWithContext(ctx context.Context) WebAppHybridConnectionArrayOutput {
	return o
}

func (o WebAppHybridConnectionArrayOutput) Index(i pulumi.IntInput) WebAppHybridConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WebAppHybridConnection {
		return vs[0].([]*WebAppHybridConnection)[vs[1].(int)]
	}).(WebAppHybridConnectionOutput)
}

type WebAppHybridConnectionMapOutput struct{ *pulumi.OutputState }

func (WebAppHybridConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebAppHybridConnection)(nil)).Elem()
}

func (o WebAppHybridConnectionMapOutput) ToWebAppHybridConnectionMapOutput() WebAppHybridConnectionMapOutput {
	return o
}

func (o WebAppHybridConnectionMapOutput) ToWebAppHybridConnectionMapOutputWithContext(ctx context.Context) WebAppHybridConnectionMapOutput {
	return o
}

func (o WebAppHybridConnectionMapOutput) MapIndex(k pulumi.StringInput) WebAppHybridConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WebAppHybridConnection {
		return vs[0].(map[string]*WebAppHybridConnection)[vs[1].(string)]
	}).(WebAppHybridConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppHybridConnectionInput)(nil)).Elem(), &WebAppHybridConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppHybridConnectionArrayInput)(nil)).Elem(), WebAppHybridConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppHybridConnectionMapInput)(nil)).Elem(), WebAppHybridConnectionMap{})
	pulumi.RegisterOutputType(WebAppHybridConnectionOutput{})
	pulumi.RegisterOutputType(WebAppHybridConnectionArrayOutput{})
	pulumi.RegisterOutputType(WebAppHybridConnectionMapOutput{})
}
