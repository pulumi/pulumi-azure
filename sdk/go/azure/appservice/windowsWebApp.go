// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Windows Web App.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/appservice"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleServicePlan, err := appservice.NewServicePlan(ctx, "exampleServicePlan", &appservice.ServicePlanArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				SkuName:           pulumi.String("P1v2"),
//				OsType:            pulumi.String("Windows"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = appservice.NewWindowsWebApp(ctx, "exampleWindowsWebApp", &appservice.WindowsWebAppArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleServicePlan.Location,
//				ServicePlanId:     exampleServicePlan.ID(),
//				SiteConfig:        nil,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Windows Web Apps can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:appservice/windowsWebApp:WindowsWebApp example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/sites/site1
//
// ```
type WindowsWebApp struct {
	pulumi.CustomResourceState

	// A map of key-value pairs of App Settings.
	AppSettings pulumi.StringMapOutput `pulumi:"appSettings"`
	// An `authSettings` block as defined below.
	AuthSettings WindowsWebAppAuthSettingsPtrOutput `pulumi:"authSettings"`
	// An `authSettingsV2` block as defined below.
	AuthSettingsV2 WindowsWebAppAuthSettingsV2PtrOutput `pulumi:"authSettingsV2"`
	// A `backup` block as defined below.
	Backup WindowsWebAppBackupPtrOutput `pulumi:"backup"`
	// Should Client Affinity be enabled?
	ClientAffinityEnabled pulumi.BoolPtrOutput `pulumi:"clientAffinityEnabled"`
	// Should Client Certificates be enabled?
	ClientCertificateEnabled pulumi.BoolPtrOutput `pulumi:"clientCertificateEnabled"`
	// Paths to exclude when using client certificates, separated by ;
	ClientCertificateExclusionPaths pulumi.StringPtrOutput `pulumi:"clientCertificateExclusionPaths"`
	// The Client Certificate mode. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. This property has no effect when `clientCertEnabled` is `false`. Defaults to `Required`.
	ClientCertificateMode pulumi.StringPtrOutput `pulumi:"clientCertificateMode"`
	// One or more `connectionString` blocks as defined below.
	ConnectionStrings WindowsWebAppConnectionStringArrayOutput `pulumi:"connectionStrings"`
	// The identifier used by App Service to perform domain ownership verification via DNS TXT record.
	CustomDomainVerificationId pulumi.StringOutput `pulumi:"customDomainVerificationId"`
	// The default hostname of the Windows Web App.
	DefaultHostname pulumi.StringOutput `pulumi:"defaultHostname"`
	// Should the Windows Web App be enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Should the default FTP Basic Authentication publishing profile be enabled. Defaults to `true`.
	FtpPublishBasicAuthenticationEnabled pulumi.BoolPtrOutput `pulumi:"ftpPublishBasicAuthenticationEnabled"`
	// The ID of the App Service Environment used by App Service.
	HostingEnvironmentId pulumi.StringOutput `pulumi:"hostingEnvironmentId"`
	// Should the Windows Web App require HTTPS connections. Defaults to `false`.
	HttpsOnly pulumi.BoolPtrOutput `pulumi:"httpsOnly"`
	// An `identity` block as defined below.
	Identity WindowsWebAppIdentityPtrOutput `pulumi:"identity"`
	// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity)
	KeyVaultReferenceIdentityId pulumi.StringOutput `pulumi:"keyVaultReferenceIdentityId"`
	// The Kind value for this Windows Web App.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The Azure Region where the Windows Web App should exist. Changing this forces a new Windows Web App to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// A `logs` block as defined below.
	Logs WindowsWebAppLogsPtrOutput `pulumi:"logs"`
	// The name which should be used for this Windows Web App. Changing this forces a new Windows Web App to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of outbound IP addresses - such as `["52.23.25.3", "52.143.43.12"]`
	OutboundIpAddressLists pulumi.StringArrayOutput `pulumi:"outboundIpAddressLists"`
	// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`.
	OutboundIpAddresses pulumi.StringOutput `pulumi:"outboundIpAddresses"`
	// A list of possible outbound ip address.
	PossibleOutboundIpAddressLists pulumi.StringArrayOutput `pulumi:"possibleOutboundIpAddressLists"`
	// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outboundIpAddresses`.
	PossibleOutboundIpAddresses pulumi.StringOutput `pulumi:"possibleOutboundIpAddresses"`
	// Should public network access be enabled for the Web App. Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrOutput `pulumi:"publicNetworkAccessEnabled"`
	// The name of the Resource Group where the Windows Web App should exist. Changing this forces a new Windows Web App to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The ID of the Service Plan that this Windows App Service will be created in.
	ServicePlanId pulumi.StringOutput `pulumi:"servicePlanId"`
	// A `siteConfig` block as defined below.
	SiteConfig WindowsWebAppSiteConfigOutput `pulumi:"siteConfig"`
	// A `siteCredential` block as defined below.
	SiteCredentials WindowsWebAppSiteCredentialArrayOutput `pulumi:"siteCredentials"`
	// A `stickySettings` block as defined below.
	StickySettings WindowsWebAppStickySettingsPtrOutput `pulumi:"stickySettings"`
	// One or more `storageAccount` blocks as defined below.
	//
	// > **Note:** Using this value requires `WEBSITE_RUN_FROM_PACKAGE=1` to be set on the App in `appSettings`. Refer to the [Azure docs](https://docs.microsoft.com/en-us/azure/app-service/deploy-run-package) for further details.
	StorageAccounts WindowsWebAppStorageAccountArrayOutput `pulumi:"storageAccounts"`
	// A mapping of tags which should be assigned to the Windows Web App.
	Tags                   pulumi.StringMapOutput `pulumi:"tags"`
	VirtualNetworkSubnetId pulumi.StringPtrOutput `pulumi:"virtualNetworkSubnetId"`
	// Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to `true`.
	//
	// > **NOTE:** Setting this value to true will disable the ability to use `zipDeployFile` which currently relies on the default publishing profile.
	WebdeployPublishBasicAuthenticationEnabled pulumi.BoolPtrOutput `pulumi:"webdeployPublishBasicAuthenticationEnabled"`
	// The local path and filename of the Zip packaged application to deploy to this Windows Web App.
	//
	// > **Note:** Using this value requires either `WEBSITE_RUN_FROM_PACKAGE=1` or `SCM_DO_BUILD_DURING_DEPLOYMENT=true` to be set on the App in `appSettings`. Refer to the Azure docs on [running the Web App directly from the Zip package](https://learn.microsoft.com/en-us/azure/app-service/deploy-run-package), or [automating the build for Zip deploy](https://learn.microsoft.com/en-us/azure/app-service/deploy-zip#enable-build-automation-for-zip-deploy) for further details.
	ZipDeployFile pulumi.StringOutput `pulumi:"zipDeployFile"`
}

// NewWindowsWebApp registers a new resource with the given unique name, arguments, and options.
func NewWindowsWebApp(ctx *pulumi.Context,
	name string, args *WindowsWebAppArgs, opts ...pulumi.ResourceOption) (*WindowsWebApp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServicePlanId == nil {
		return nil, errors.New("invalid value for required argument 'ServicePlanId'")
	}
	if args.SiteConfig == nil {
		return nil, errors.New("invalid value for required argument 'SiteConfig'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"customDomainVerificationId",
		"siteCredentials",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WindowsWebApp
	err := ctx.RegisterResource("azure:appservice/windowsWebApp:WindowsWebApp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWindowsWebApp gets an existing WindowsWebApp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWindowsWebApp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WindowsWebAppState, opts ...pulumi.ResourceOption) (*WindowsWebApp, error) {
	var resource WindowsWebApp
	err := ctx.ReadResource("azure:appservice/windowsWebApp:WindowsWebApp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WindowsWebApp resources.
type windowsWebAppState struct {
	// A map of key-value pairs of App Settings.
	AppSettings map[string]string `pulumi:"appSettings"`
	// An `authSettings` block as defined below.
	AuthSettings *WindowsWebAppAuthSettings `pulumi:"authSettings"`
	// An `authSettingsV2` block as defined below.
	AuthSettingsV2 *WindowsWebAppAuthSettingsV2 `pulumi:"authSettingsV2"`
	// A `backup` block as defined below.
	Backup *WindowsWebAppBackup `pulumi:"backup"`
	// Should Client Affinity be enabled?
	ClientAffinityEnabled *bool `pulumi:"clientAffinityEnabled"`
	// Should Client Certificates be enabled?
	ClientCertificateEnabled *bool `pulumi:"clientCertificateEnabled"`
	// Paths to exclude when using client certificates, separated by ;
	ClientCertificateExclusionPaths *string `pulumi:"clientCertificateExclusionPaths"`
	// The Client Certificate mode. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. This property has no effect when `clientCertEnabled` is `false`. Defaults to `Required`.
	ClientCertificateMode *string `pulumi:"clientCertificateMode"`
	// One or more `connectionString` blocks as defined below.
	ConnectionStrings []WindowsWebAppConnectionString `pulumi:"connectionStrings"`
	// The identifier used by App Service to perform domain ownership verification via DNS TXT record.
	CustomDomainVerificationId *string `pulumi:"customDomainVerificationId"`
	// The default hostname of the Windows Web App.
	DefaultHostname *string `pulumi:"defaultHostname"`
	// Should the Windows Web App be enabled? Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Should the default FTP Basic Authentication publishing profile be enabled. Defaults to `true`.
	FtpPublishBasicAuthenticationEnabled *bool `pulumi:"ftpPublishBasicAuthenticationEnabled"`
	// The ID of the App Service Environment used by App Service.
	HostingEnvironmentId *string `pulumi:"hostingEnvironmentId"`
	// Should the Windows Web App require HTTPS connections. Defaults to `false`.
	HttpsOnly *bool `pulumi:"httpsOnly"`
	// An `identity` block as defined below.
	Identity *WindowsWebAppIdentity `pulumi:"identity"`
	// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity)
	KeyVaultReferenceIdentityId *string `pulumi:"keyVaultReferenceIdentityId"`
	// The Kind value for this Windows Web App.
	Kind *string `pulumi:"kind"`
	// The Azure Region where the Windows Web App should exist. Changing this forces a new Windows Web App to be created.
	Location *string `pulumi:"location"`
	// A `logs` block as defined below.
	Logs *WindowsWebAppLogs `pulumi:"logs"`
	// The name which should be used for this Windows Web App. Changing this forces a new Windows Web App to be created.
	Name *string `pulumi:"name"`
	// A list of outbound IP addresses - such as `["52.23.25.3", "52.143.43.12"]`
	OutboundIpAddressLists []string `pulumi:"outboundIpAddressLists"`
	// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`.
	OutboundIpAddresses *string `pulumi:"outboundIpAddresses"`
	// A list of possible outbound ip address.
	PossibleOutboundIpAddressLists []string `pulumi:"possibleOutboundIpAddressLists"`
	// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outboundIpAddresses`.
	PossibleOutboundIpAddresses *string `pulumi:"possibleOutboundIpAddresses"`
	// Should public network access be enabled for the Web App. Defaults to `true`.
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// The name of the Resource Group where the Windows Web App should exist. Changing this forces a new Windows Web App to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The ID of the Service Plan that this Windows App Service will be created in.
	ServicePlanId *string `pulumi:"servicePlanId"`
	// A `siteConfig` block as defined below.
	SiteConfig *WindowsWebAppSiteConfig `pulumi:"siteConfig"`
	// A `siteCredential` block as defined below.
	SiteCredentials []WindowsWebAppSiteCredential `pulumi:"siteCredentials"`
	// A `stickySettings` block as defined below.
	StickySettings *WindowsWebAppStickySettings `pulumi:"stickySettings"`
	// One or more `storageAccount` blocks as defined below.
	//
	// > **Note:** Using this value requires `WEBSITE_RUN_FROM_PACKAGE=1` to be set on the App in `appSettings`. Refer to the [Azure docs](https://docs.microsoft.com/en-us/azure/app-service/deploy-run-package) for further details.
	StorageAccounts []WindowsWebAppStorageAccount `pulumi:"storageAccounts"`
	// A mapping of tags which should be assigned to the Windows Web App.
	Tags                   map[string]string `pulumi:"tags"`
	VirtualNetworkSubnetId *string           `pulumi:"virtualNetworkSubnetId"`
	// Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to `true`.
	//
	// > **NOTE:** Setting this value to true will disable the ability to use `zipDeployFile` which currently relies on the default publishing profile.
	WebdeployPublishBasicAuthenticationEnabled *bool `pulumi:"webdeployPublishBasicAuthenticationEnabled"`
	// The local path and filename of the Zip packaged application to deploy to this Windows Web App.
	//
	// > **Note:** Using this value requires either `WEBSITE_RUN_FROM_PACKAGE=1` or `SCM_DO_BUILD_DURING_DEPLOYMENT=true` to be set on the App in `appSettings`. Refer to the Azure docs on [running the Web App directly from the Zip package](https://learn.microsoft.com/en-us/azure/app-service/deploy-run-package), or [automating the build for Zip deploy](https://learn.microsoft.com/en-us/azure/app-service/deploy-zip#enable-build-automation-for-zip-deploy) for further details.
	ZipDeployFile *string `pulumi:"zipDeployFile"`
}

type WindowsWebAppState struct {
	// A map of key-value pairs of App Settings.
	AppSettings pulumi.StringMapInput
	// An `authSettings` block as defined below.
	AuthSettings WindowsWebAppAuthSettingsPtrInput
	// An `authSettingsV2` block as defined below.
	AuthSettingsV2 WindowsWebAppAuthSettingsV2PtrInput
	// A `backup` block as defined below.
	Backup WindowsWebAppBackupPtrInput
	// Should Client Affinity be enabled?
	ClientAffinityEnabled pulumi.BoolPtrInput
	// Should Client Certificates be enabled?
	ClientCertificateEnabled pulumi.BoolPtrInput
	// Paths to exclude when using client certificates, separated by ;
	ClientCertificateExclusionPaths pulumi.StringPtrInput
	// The Client Certificate mode. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. This property has no effect when `clientCertEnabled` is `false`. Defaults to `Required`.
	ClientCertificateMode pulumi.StringPtrInput
	// One or more `connectionString` blocks as defined below.
	ConnectionStrings WindowsWebAppConnectionStringArrayInput
	// The identifier used by App Service to perform domain ownership verification via DNS TXT record.
	CustomDomainVerificationId pulumi.StringPtrInput
	// The default hostname of the Windows Web App.
	DefaultHostname pulumi.StringPtrInput
	// Should the Windows Web App be enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// Should the default FTP Basic Authentication publishing profile be enabled. Defaults to `true`.
	FtpPublishBasicAuthenticationEnabled pulumi.BoolPtrInput
	// The ID of the App Service Environment used by App Service.
	HostingEnvironmentId pulumi.StringPtrInput
	// Should the Windows Web App require HTTPS connections. Defaults to `false`.
	HttpsOnly pulumi.BoolPtrInput
	// An `identity` block as defined below.
	Identity WindowsWebAppIdentityPtrInput
	// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity)
	KeyVaultReferenceIdentityId pulumi.StringPtrInput
	// The Kind value for this Windows Web App.
	Kind pulumi.StringPtrInput
	// The Azure Region where the Windows Web App should exist. Changing this forces a new Windows Web App to be created.
	Location pulumi.StringPtrInput
	// A `logs` block as defined below.
	Logs WindowsWebAppLogsPtrInput
	// The name which should be used for this Windows Web App. Changing this forces a new Windows Web App to be created.
	Name pulumi.StringPtrInput
	// A list of outbound IP addresses - such as `["52.23.25.3", "52.143.43.12"]`
	OutboundIpAddressLists pulumi.StringArrayInput
	// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`.
	OutboundIpAddresses pulumi.StringPtrInput
	// A list of possible outbound ip address.
	PossibleOutboundIpAddressLists pulumi.StringArrayInput
	// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outboundIpAddresses`.
	PossibleOutboundIpAddresses pulumi.StringPtrInput
	// Should public network access be enabled for the Web App. Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// The name of the Resource Group where the Windows Web App should exist. Changing this forces a new Windows Web App to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The ID of the Service Plan that this Windows App Service will be created in.
	ServicePlanId pulumi.StringPtrInput
	// A `siteConfig` block as defined below.
	SiteConfig WindowsWebAppSiteConfigPtrInput
	// A `siteCredential` block as defined below.
	SiteCredentials WindowsWebAppSiteCredentialArrayInput
	// A `stickySettings` block as defined below.
	StickySettings WindowsWebAppStickySettingsPtrInput
	// One or more `storageAccount` blocks as defined below.
	//
	// > **Note:** Using this value requires `WEBSITE_RUN_FROM_PACKAGE=1` to be set on the App in `appSettings`. Refer to the [Azure docs](https://docs.microsoft.com/en-us/azure/app-service/deploy-run-package) for further details.
	StorageAccounts WindowsWebAppStorageAccountArrayInput
	// A mapping of tags which should be assigned to the Windows Web App.
	Tags                   pulumi.StringMapInput
	VirtualNetworkSubnetId pulumi.StringPtrInput
	// Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to `true`.
	//
	// > **NOTE:** Setting this value to true will disable the ability to use `zipDeployFile` which currently relies on the default publishing profile.
	WebdeployPublishBasicAuthenticationEnabled pulumi.BoolPtrInput
	// The local path and filename of the Zip packaged application to deploy to this Windows Web App.
	//
	// > **Note:** Using this value requires either `WEBSITE_RUN_FROM_PACKAGE=1` or `SCM_DO_BUILD_DURING_DEPLOYMENT=true` to be set on the App in `appSettings`. Refer to the Azure docs on [running the Web App directly from the Zip package](https://learn.microsoft.com/en-us/azure/app-service/deploy-run-package), or [automating the build for Zip deploy](https://learn.microsoft.com/en-us/azure/app-service/deploy-zip#enable-build-automation-for-zip-deploy) for further details.
	ZipDeployFile pulumi.StringPtrInput
}

func (WindowsWebAppState) ElementType() reflect.Type {
	return reflect.TypeOf((*windowsWebAppState)(nil)).Elem()
}

type windowsWebAppArgs struct {
	// A map of key-value pairs of App Settings.
	AppSettings map[string]string `pulumi:"appSettings"`
	// An `authSettings` block as defined below.
	AuthSettings *WindowsWebAppAuthSettings `pulumi:"authSettings"`
	// An `authSettingsV2` block as defined below.
	AuthSettingsV2 *WindowsWebAppAuthSettingsV2 `pulumi:"authSettingsV2"`
	// A `backup` block as defined below.
	Backup *WindowsWebAppBackup `pulumi:"backup"`
	// Should Client Affinity be enabled?
	ClientAffinityEnabled *bool `pulumi:"clientAffinityEnabled"`
	// Should Client Certificates be enabled?
	ClientCertificateEnabled *bool `pulumi:"clientCertificateEnabled"`
	// Paths to exclude when using client certificates, separated by ;
	ClientCertificateExclusionPaths *string `pulumi:"clientCertificateExclusionPaths"`
	// The Client Certificate mode. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. This property has no effect when `clientCertEnabled` is `false`. Defaults to `Required`.
	ClientCertificateMode *string `pulumi:"clientCertificateMode"`
	// One or more `connectionString` blocks as defined below.
	ConnectionStrings []WindowsWebAppConnectionString `pulumi:"connectionStrings"`
	// Should the Windows Web App be enabled? Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Should the default FTP Basic Authentication publishing profile be enabled. Defaults to `true`.
	FtpPublishBasicAuthenticationEnabled *bool `pulumi:"ftpPublishBasicAuthenticationEnabled"`
	// Should the Windows Web App require HTTPS connections. Defaults to `false`.
	HttpsOnly *bool `pulumi:"httpsOnly"`
	// An `identity` block as defined below.
	Identity *WindowsWebAppIdentity `pulumi:"identity"`
	// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity)
	KeyVaultReferenceIdentityId *string `pulumi:"keyVaultReferenceIdentityId"`
	// The Azure Region where the Windows Web App should exist. Changing this forces a new Windows Web App to be created.
	Location *string `pulumi:"location"`
	// A `logs` block as defined below.
	Logs *WindowsWebAppLogs `pulumi:"logs"`
	// The name which should be used for this Windows Web App. Changing this forces a new Windows Web App to be created.
	Name *string `pulumi:"name"`
	// Should public network access be enabled for the Web App. Defaults to `true`.
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// The name of the Resource Group where the Windows Web App should exist. Changing this forces a new Windows Web App to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The ID of the Service Plan that this Windows App Service will be created in.
	ServicePlanId string `pulumi:"servicePlanId"`
	// A `siteConfig` block as defined below.
	SiteConfig WindowsWebAppSiteConfig `pulumi:"siteConfig"`
	// A `stickySettings` block as defined below.
	StickySettings *WindowsWebAppStickySettings `pulumi:"stickySettings"`
	// One or more `storageAccount` blocks as defined below.
	//
	// > **Note:** Using this value requires `WEBSITE_RUN_FROM_PACKAGE=1` to be set on the App in `appSettings`. Refer to the [Azure docs](https://docs.microsoft.com/en-us/azure/app-service/deploy-run-package) for further details.
	StorageAccounts []WindowsWebAppStorageAccount `pulumi:"storageAccounts"`
	// A mapping of tags which should be assigned to the Windows Web App.
	Tags                   map[string]string `pulumi:"tags"`
	VirtualNetworkSubnetId *string           `pulumi:"virtualNetworkSubnetId"`
	// Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to `true`.
	//
	// > **NOTE:** Setting this value to true will disable the ability to use `zipDeployFile` which currently relies on the default publishing profile.
	WebdeployPublishBasicAuthenticationEnabled *bool `pulumi:"webdeployPublishBasicAuthenticationEnabled"`
	// The local path and filename of the Zip packaged application to deploy to this Windows Web App.
	//
	// > **Note:** Using this value requires either `WEBSITE_RUN_FROM_PACKAGE=1` or `SCM_DO_BUILD_DURING_DEPLOYMENT=true` to be set on the App in `appSettings`. Refer to the Azure docs on [running the Web App directly from the Zip package](https://learn.microsoft.com/en-us/azure/app-service/deploy-run-package), or [automating the build for Zip deploy](https://learn.microsoft.com/en-us/azure/app-service/deploy-zip#enable-build-automation-for-zip-deploy) for further details.
	ZipDeployFile *string `pulumi:"zipDeployFile"`
}

// The set of arguments for constructing a WindowsWebApp resource.
type WindowsWebAppArgs struct {
	// A map of key-value pairs of App Settings.
	AppSettings pulumi.StringMapInput
	// An `authSettings` block as defined below.
	AuthSettings WindowsWebAppAuthSettingsPtrInput
	// An `authSettingsV2` block as defined below.
	AuthSettingsV2 WindowsWebAppAuthSettingsV2PtrInput
	// A `backup` block as defined below.
	Backup WindowsWebAppBackupPtrInput
	// Should Client Affinity be enabled?
	ClientAffinityEnabled pulumi.BoolPtrInput
	// Should Client Certificates be enabled?
	ClientCertificateEnabled pulumi.BoolPtrInput
	// Paths to exclude when using client certificates, separated by ;
	ClientCertificateExclusionPaths pulumi.StringPtrInput
	// The Client Certificate mode. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. This property has no effect when `clientCertEnabled` is `false`. Defaults to `Required`.
	ClientCertificateMode pulumi.StringPtrInput
	// One or more `connectionString` blocks as defined below.
	ConnectionStrings WindowsWebAppConnectionStringArrayInput
	// Should the Windows Web App be enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// Should the default FTP Basic Authentication publishing profile be enabled. Defaults to `true`.
	FtpPublishBasicAuthenticationEnabled pulumi.BoolPtrInput
	// Should the Windows Web App require HTTPS connections. Defaults to `false`.
	HttpsOnly pulumi.BoolPtrInput
	// An `identity` block as defined below.
	Identity WindowsWebAppIdentityPtrInput
	// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity)
	KeyVaultReferenceIdentityId pulumi.StringPtrInput
	// The Azure Region where the Windows Web App should exist. Changing this forces a new Windows Web App to be created.
	Location pulumi.StringPtrInput
	// A `logs` block as defined below.
	Logs WindowsWebAppLogsPtrInput
	// The name which should be used for this Windows Web App. Changing this forces a new Windows Web App to be created.
	Name pulumi.StringPtrInput
	// Should public network access be enabled for the Web App. Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// The name of the Resource Group where the Windows Web App should exist. Changing this forces a new Windows Web App to be created.
	ResourceGroupName pulumi.StringInput
	// The ID of the Service Plan that this Windows App Service will be created in.
	ServicePlanId pulumi.StringInput
	// A `siteConfig` block as defined below.
	SiteConfig WindowsWebAppSiteConfigInput
	// A `stickySettings` block as defined below.
	StickySettings WindowsWebAppStickySettingsPtrInput
	// One or more `storageAccount` blocks as defined below.
	//
	// > **Note:** Using this value requires `WEBSITE_RUN_FROM_PACKAGE=1` to be set on the App in `appSettings`. Refer to the [Azure docs](https://docs.microsoft.com/en-us/azure/app-service/deploy-run-package) for further details.
	StorageAccounts WindowsWebAppStorageAccountArrayInput
	// A mapping of tags which should be assigned to the Windows Web App.
	Tags                   pulumi.StringMapInput
	VirtualNetworkSubnetId pulumi.StringPtrInput
	// Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to `true`.
	//
	// > **NOTE:** Setting this value to true will disable the ability to use `zipDeployFile` which currently relies on the default publishing profile.
	WebdeployPublishBasicAuthenticationEnabled pulumi.BoolPtrInput
	// The local path and filename of the Zip packaged application to deploy to this Windows Web App.
	//
	// > **Note:** Using this value requires either `WEBSITE_RUN_FROM_PACKAGE=1` or `SCM_DO_BUILD_DURING_DEPLOYMENT=true` to be set on the App in `appSettings`. Refer to the Azure docs on [running the Web App directly from the Zip package](https://learn.microsoft.com/en-us/azure/app-service/deploy-run-package), or [automating the build for Zip deploy](https://learn.microsoft.com/en-us/azure/app-service/deploy-zip#enable-build-automation-for-zip-deploy) for further details.
	ZipDeployFile pulumi.StringPtrInput
}

func (WindowsWebAppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*windowsWebAppArgs)(nil)).Elem()
}

type WindowsWebAppInput interface {
	pulumi.Input

	ToWindowsWebAppOutput() WindowsWebAppOutput
	ToWindowsWebAppOutputWithContext(ctx context.Context) WindowsWebAppOutput
}

func (*WindowsWebApp) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsWebApp)(nil)).Elem()
}

func (i *WindowsWebApp) ToWindowsWebAppOutput() WindowsWebAppOutput {
	return i.ToWindowsWebAppOutputWithContext(context.Background())
}

func (i *WindowsWebApp) ToWindowsWebAppOutputWithContext(ctx context.Context) WindowsWebAppOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsWebAppOutput)
}

// WindowsWebAppArrayInput is an input type that accepts WindowsWebAppArray and WindowsWebAppArrayOutput values.
// You can construct a concrete instance of `WindowsWebAppArrayInput` via:
//
//	WindowsWebAppArray{ WindowsWebAppArgs{...} }
type WindowsWebAppArrayInput interface {
	pulumi.Input

	ToWindowsWebAppArrayOutput() WindowsWebAppArrayOutput
	ToWindowsWebAppArrayOutputWithContext(context.Context) WindowsWebAppArrayOutput
}

type WindowsWebAppArray []WindowsWebAppInput

func (WindowsWebAppArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WindowsWebApp)(nil)).Elem()
}

func (i WindowsWebAppArray) ToWindowsWebAppArrayOutput() WindowsWebAppArrayOutput {
	return i.ToWindowsWebAppArrayOutputWithContext(context.Background())
}

func (i WindowsWebAppArray) ToWindowsWebAppArrayOutputWithContext(ctx context.Context) WindowsWebAppArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsWebAppArrayOutput)
}

// WindowsWebAppMapInput is an input type that accepts WindowsWebAppMap and WindowsWebAppMapOutput values.
// You can construct a concrete instance of `WindowsWebAppMapInput` via:
//
//	WindowsWebAppMap{ "key": WindowsWebAppArgs{...} }
type WindowsWebAppMapInput interface {
	pulumi.Input

	ToWindowsWebAppMapOutput() WindowsWebAppMapOutput
	ToWindowsWebAppMapOutputWithContext(context.Context) WindowsWebAppMapOutput
}

type WindowsWebAppMap map[string]WindowsWebAppInput

func (WindowsWebAppMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WindowsWebApp)(nil)).Elem()
}

func (i WindowsWebAppMap) ToWindowsWebAppMapOutput() WindowsWebAppMapOutput {
	return i.ToWindowsWebAppMapOutputWithContext(context.Background())
}

func (i WindowsWebAppMap) ToWindowsWebAppMapOutputWithContext(ctx context.Context) WindowsWebAppMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsWebAppMapOutput)
}

type WindowsWebAppOutput struct{ *pulumi.OutputState }

func (WindowsWebAppOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsWebApp)(nil)).Elem()
}

func (o WindowsWebAppOutput) ToWindowsWebAppOutput() WindowsWebAppOutput {
	return o
}

func (o WindowsWebAppOutput) ToWindowsWebAppOutputWithContext(ctx context.Context) WindowsWebAppOutput {
	return o
}

// A map of key-value pairs of App Settings.
func (o WindowsWebAppOutput) AppSettings() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WindowsWebApp) pulumi.StringMapOutput { return v.AppSettings }).(pulumi.StringMapOutput)
}

// An `authSettings` block as defined below.
func (o WindowsWebAppOutput) AuthSettings() WindowsWebAppAuthSettingsPtrOutput {
	return o.ApplyT(func(v *WindowsWebApp) WindowsWebAppAuthSettingsPtrOutput { return v.AuthSettings }).(WindowsWebAppAuthSettingsPtrOutput)
}

// An `authSettingsV2` block as defined below.
func (o WindowsWebAppOutput) AuthSettingsV2() WindowsWebAppAuthSettingsV2PtrOutput {
	return o.ApplyT(func(v *WindowsWebApp) WindowsWebAppAuthSettingsV2PtrOutput { return v.AuthSettingsV2 }).(WindowsWebAppAuthSettingsV2PtrOutput)
}

// A `backup` block as defined below.
func (o WindowsWebAppOutput) Backup() WindowsWebAppBackupPtrOutput {
	return o.ApplyT(func(v *WindowsWebApp) WindowsWebAppBackupPtrOutput { return v.Backup }).(WindowsWebAppBackupPtrOutput)
}

// Should Client Affinity be enabled?
func (o WindowsWebAppOutput) ClientAffinityEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsWebApp) pulumi.BoolPtrOutput { return v.ClientAffinityEnabled }).(pulumi.BoolPtrOutput)
}

// Should Client Certificates be enabled?
func (o WindowsWebAppOutput) ClientCertificateEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsWebApp) pulumi.BoolPtrOutput { return v.ClientCertificateEnabled }).(pulumi.BoolPtrOutput)
}

// Paths to exclude when using client certificates, separated by ;
func (o WindowsWebAppOutput) ClientCertificateExclusionPaths() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsWebApp) pulumi.StringPtrOutput { return v.ClientCertificateExclusionPaths }).(pulumi.StringPtrOutput)
}

// The Client Certificate mode. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. This property has no effect when `clientCertEnabled` is `false`. Defaults to `Required`.
func (o WindowsWebAppOutput) ClientCertificateMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsWebApp) pulumi.StringPtrOutput { return v.ClientCertificateMode }).(pulumi.StringPtrOutput)
}

// One or more `connectionString` blocks as defined below.
func (o WindowsWebAppOutput) ConnectionStrings() WindowsWebAppConnectionStringArrayOutput {
	return o.ApplyT(func(v *WindowsWebApp) WindowsWebAppConnectionStringArrayOutput { return v.ConnectionStrings }).(WindowsWebAppConnectionStringArrayOutput)
}

// The identifier used by App Service to perform domain ownership verification via DNS TXT record.
func (o WindowsWebAppOutput) CustomDomainVerificationId() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsWebApp) pulumi.StringOutput { return v.CustomDomainVerificationId }).(pulumi.StringOutput)
}

// The default hostname of the Windows Web App.
func (o WindowsWebAppOutput) DefaultHostname() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsWebApp) pulumi.StringOutput { return v.DefaultHostname }).(pulumi.StringOutput)
}

// Should the Windows Web App be enabled? Defaults to `true`.
func (o WindowsWebAppOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsWebApp) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Should the default FTP Basic Authentication publishing profile be enabled. Defaults to `true`.
func (o WindowsWebAppOutput) FtpPublishBasicAuthenticationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsWebApp) pulumi.BoolPtrOutput { return v.FtpPublishBasicAuthenticationEnabled }).(pulumi.BoolPtrOutput)
}

// The ID of the App Service Environment used by App Service.
func (o WindowsWebAppOutput) HostingEnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsWebApp) pulumi.StringOutput { return v.HostingEnvironmentId }).(pulumi.StringOutput)
}

// Should the Windows Web App require HTTPS connections. Defaults to `false`.
func (o WindowsWebAppOutput) HttpsOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsWebApp) pulumi.BoolPtrOutput { return v.HttpsOnly }).(pulumi.BoolPtrOutput)
}

// An `identity` block as defined below.
func (o WindowsWebAppOutput) Identity() WindowsWebAppIdentityPtrOutput {
	return o.ApplyT(func(v *WindowsWebApp) WindowsWebAppIdentityPtrOutput { return v.Identity }).(WindowsWebAppIdentityPtrOutput)
}

// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity)
func (o WindowsWebAppOutput) KeyVaultReferenceIdentityId() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsWebApp) pulumi.StringOutput { return v.KeyVaultReferenceIdentityId }).(pulumi.StringOutput)
}

// The Kind value for this Windows Web App.
func (o WindowsWebAppOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsWebApp) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// The Azure Region where the Windows Web App should exist. Changing this forces a new Windows Web App to be created.
func (o WindowsWebAppOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsWebApp) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// A `logs` block as defined below.
func (o WindowsWebAppOutput) Logs() WindowsWebAppLogsPtrOutput {
	return o.ApplyT(func(v *WindowsWebApp) WindowsWebAppLogsPtrOutput { return v.Logs }).(WindowsWebAppLogsPtrOutput)
}

// The name which should be used for this Windows Web App. Changing this forces a new Windows Web App to be created.
func (o WindowsWebAppOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsWebApp) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of outbound IP addresses - such as `["52.23.25.3", "52.143.43.12"]`
func (o WindowsWebAppOutput) OutboundIpAddressLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WindowsWebApp) pulumi.StringArrayOutput { return v.OutboundIpAddressLists }).(pulumi.StringArrayOutput)
}

// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`.
func (o WindowsWebAppOutput) OutboundIpAddresses() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsWebApp) pulumi.StringOutput { return v.OutboundIpAddresses }).(pulumi.StringOutput)
}

// A list of possible outbound ip address.
func (o WindowsWebAppOutput) PossibleOutboundIpAddressLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WindowsWebApp) pulumi.StringArrayOutput { return v.PossibleOutboundIpAddressLists }).(pulumi.StringArrayOutput)
}

// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outboundIpAddresses`.
func (o WindowsWebAppOutput) PossibleOutboundIpAddresses() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsWebApp) pulumi.StringOutput { return v.PossibleOutboundIpAddresses }).(pulumi.StringOutput)
}

// Should public network access be enabled for the Web App. Defaults to `true`.
func (o WindowsWebAppOutput) PublicNetworkAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsWebApp) pulumi.BoolPtrOutput { return v.PublicNetworkAccessEnabled }).(pulumi.BoolPtrOutput)
}

// The name of the Resource Group where the Windows Web App should exist. Changing this forces a new Windows Web App to be created.
func (o WindowsWebAppOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsWebApp) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The ID of the Service Plan that this Windows App Service will be created in.
func (o WindowsWebAppOutput) ServicePlanId() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsWebApp) pulumi.StringOutput { return v.ServicePlanId }).(pulumi.StringOutput)
}

// A `siteConfig` block as defined below.
func (o WindowsWebAppOutput) SiteConfig() WindowsWebAppSiteConfigOutput {
	return o.ApplyT(func(v *WindowsWebApp) WindowsWebAppSiteConfigOutput { return v.SiteConfig }).(WindowsWebAppSiteConfigOutput)
}

// A `siteCredential` block as defined below.
func (o WindowsWebAppOutput) SiteCredentials() WindowsWebAppSiteCredentialArrayOutput {
	return o.ApplyT(func(v *WindowsWebApp) WindowsWebAppSiteCredentialArrayOutput { return v.SiteCredentials }).(WindowsWebAppSiteCredentialArrayOutput)
}

// A `stickySettings` block as defined below.
func (o WindowsWebAppOutput) StickySettings() WindowsWebAppStickySettingsPtrOutput {
	return o.ApplyT(func(v *WindowsWebApp) WindowsWebAppStickySettingsPtrOutput { return v.StickySettings }).(WindowsWebAppStickySettingsPtrOutput)
}

// One or more `storageAccount` blocks as defined below.
//
// > **Note:** Using this value requires `WEBSITE_RUN_FROM_PACKAGE=1` to be set on the App in `appSettings`. Refer to the [Azure docs](https://docs.microsoft.com/en-us/azure/app-service/deploy-run-package) for further details.
func (o WindowsWebAppOutput) StorageAccounts() WindowsWebAppStorageAccountArrayOutput {
	return o.ApplyT(func(v *WindowsWebApp) WindowsWebAppStorageAccountArrayOutput { return v.StorageAccounts }).(WindowsWebAppStorageAccountArrayOutput)
}

// A mapping of tags which should be assigned to the Windows Web App.
func (o WindowsWebAppOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WindowsWebApp) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o WindowsWebAppOutput) VirtualNetworkSubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsWebApp) pulumi.StringPtrOutput { return v.VirtualNetworkSubnetId }).(pulumi.StringPtrOutput)
}

// Should the default WebDeploy Basic Authentication publishing credentials enabled. Defaults to `true`.
//
// > **NOTE:** Setting this value to true will disable the ability to use `zipDeployFile` which currently relies on the default publishing profile.
func (o WindowsWebAppOutput) WebdeployPublishBasicAuthenticationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsWebApp) pulumi.BoolPtrOutput { return v.WebdeployPublishBasicAuthenticationEnabled }).(pulumi.BoolPtrOutput)
}

// The local path and filename of the Zip packaged application to deploy to this Windows Web App.
//
// > **Note:** Using this value requires either `WEBSITE_RUN_FROM_PACKAGE=1` or `SCM_DO_BUILD_DURING_DEPLOYMENT=true` to be set on the App in `appSettings`. Refer to the Azure docs on [running the Web App directly from the Zip package](https://learn.microsoft.com/en-us/azure/app-service/deploy-run-package), or [automating the build for Zip deploy](https://learn.microsoft.com/en-us/azure/app-service/deploy-zip#enable-build-automation-for-zip-deploy) for further details.
func (o WindowsWebAppOutput) ZipDeployFile() pulumi.StringOutput {
	return o.ApplyT(func(v *WindowsWebApp) pulumi.StringOutput { return v.ZipDeployFile }).(pulumi.StringOutput)
}

type WindowsWebAppArrayOutput struct{ *pulumi.OutputState }

func (WindowsWebAppArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WindowsWebApp)(nil)).Elem()
}

func (o WindowsWebAppArrayOutput) ToWindowsWebAppArrayOutput() WindowsWebAppArrayOutput {
	return o
}

func (o WindowsWebAppArrayOutput) ToWindowsWebAppArrayOutputWithContext(ctx context.Context) WindowsWebAppArrayOutput {
	return o
}

func (o WindowsWebAppArrayOutput) Index(i pulumi.IntInput) WindowsWebAppOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WindowsWebApp {
		return vs[0].([]*WindowsWebApp)[vs[1].(int)]
	}).(WindowsWebAppOutput)
}

type WindowsWebAppMapOutput struct{ *pulumi.OutputState }

func (WindowsWebAppMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WindowsWebApp)(nil)).Elem()
}

func (o WindowsWebAppMapOutput) ToWindowsWebAppMapOutput() WindowsWebAppMapOutput {
	return o
}

func (o WindowsWebAppMapOutput) ToWindowsWebAppMapOutputWithContext(ctx context.Context) WindowsWebAppMapOutput {
	return o
}

func (o WindowsWebAppMapOutput) MapIndex(k pulumi.StringInput) WindowsWebAppOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WindowsWebApp {
		return vs[0].(map[string]*WindowsWebApp)[vs[1].(string)]
	}).(WindowsWebAppOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WindowsWebAppInput)(nil)).Elem(), &WindowsWebApp{})
	pulumi.RegisterInputType(reflect.TypeOf((*WindowsWebAppArrayInput)(nil)).Elem(), WindowsWebAppArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WindowsWebAppMapInput)(nil)).Elem(), WindowsWebAppMap{})
	pulumi.RegisterOutputType(WindowsWebAppOutput{})
	pulumi.RegisterOutputType(WindowsWebAppArrayOutput{})
	pulumi.RegisterOutputType(WindowsWebAppMapOutput{})
}
