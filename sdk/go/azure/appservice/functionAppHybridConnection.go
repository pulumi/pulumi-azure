// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Function App Hybrid Connection.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/appservice"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/relay"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleServicePlan, err := appservice.NewServicePlan(ctx, "exampleServicePlan", &appservice.ServicePlanArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				OsType:            pulumi.String("Windows"),
//				SkuName:           pulumi.String("S1"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleNamespace, err := relay.NewNamespace(ctx, "exampleNamespace", &relay.NamespaceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				SkuName:           pulumi.String("Standard"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleHybridConnection, err := relay.NewHybridConnection(ctx, "exampleHybridConnection", &relay.HybridConnectionArgs{
//				ResourceGroupName:  exampleResourceGroup.Name,
//				RelayNamespaceName: exampleNamespace.Name,
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Location:               exampleResourceGroup.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("GRS"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleWindowsWebApp, err := appservice.NewWindowsWebApp(ctx, "exampleWindowsWebApp", &appservice.WindowsWebAppArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				ServicePlanId:     exampleServicePlan.ID(),
//				SiteConfig:        nil,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = appservice.NewWindowsFunctionApp(ctx, "exampleWindowsFunctionApp", &appservice.WindowsFunctionAppArgs{
//				Location:                exampleResourceGroup.Location,
//				ResourceGroupName:       exampleResourceGroup.Name,
//				ServicePlanId:           exampleServicePlan.ID(),
//				StorageAccountName:      exampleAccount.Name,
//				StorageAccountAccessKey: exampleAccount.PrimaryAccessKey,
//				SiteConfig:              nil,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = appservice.NewFunctionAppHybridConnection(ctx, "exampleFunctionAppHybridConnection", &appservice.FunctionAppHybridConnectionArgs{
//				FunctionAppId: exampleWindowsWebApp.ID(),
//				RelayId:       exampleHybridConnection.ID(),
//				Hostname:      pulumi.String("myhostname.example"),
//				Port:          pulumi.Int(8081),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// a Function App Hybrid Connection can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:appservice/functionAppHybridConnection:FunctionAppHybridConnection example "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/sites/site1/hybridConnectionNamespaces/hybridConnectionNamespace1/relays/relay1"
//
// ```
type FunctionAppHybridConnection struct {
	pulumi.CustomResourceState

	// The ID of the Function App for this Hybrid Connection. Changing this forces a new resource to be created.
	FunctionAppId pulumi.StringOutput `pulumi:"functionAppId"`
	// The hostname of the endpoint.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// The name of the Relay Namespace.
	NamespaceName pulumi.StringOutput `pulumi:"namespaceName"`
	// The port to use for the endpoint
	Port pulumi.IntOutput `pulumi:"port"`
	// The ID of the Relay Hybrid Connection to use. Changing this forces a new resource to be created.
	RelayId pulumi.StringOutput `pulumi:"relayId"`
	// The name of the Relay in use.
	RelayName pulumi.StringOutput `pulumi:"relayName"`
	// The name of the Relay key with `Send` permission to use. Defaults to `RootManageSharedAccessKey`
	SendKeyName pulumi.StringPtrOutput `pulumi:"sendKeyName"`
	// The Primary Access Key for the `sendKeyName`
	SendKeyValue pulumi.StringOutput `pulumi:"sendKeyValue"`
	// The Service Bus Namespace.
	ServiceBusNamespace pulumi.StringOutput `pulumi:"serviceBusNamespace"`
	// The suffix for the endpoint.
	ServiceBusSuffix pulumi.StringOutput `pulumi:"serviceBusSuffix"`
}

// NewFunctionAppHybridConnection registers a new resource with the given unique name, arguments, and options.
func NewFunctionAppHybridConnection(ctx *pulumi.Context,
	name string, args *FunctionAppHybridConnectionArgs, opts ...pulumi.ResourceOption) (*FunctionAppHybridConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FunctionAppId == nil {
		return nil, errors.New("invalid value for required argument 'FunctionAppId'")
	}
	if args.Hostname == nil {
		return nil, errors.New("invalid value for required argument 'Hostname'")
	}
	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	if args.RelayId == nil {
		return nil, errors.New("invalid value for required argument 'RelayId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"sendKeyValue",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FunctionAppHybridConnection
	err := ctx.RegisterResource("azure:appservice/functionAppHybridConnection:FunctionAppHybridConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFunctionAppHybridConnection gets an existing FunctionAppHybridConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFunctionAppHybridConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FunctionAppHybridConnectionState, opts ...pulumi.ResourceOption) (*FunctionAppHybridConnection, error) {
	var resource FunctionAppHybridConnection
	err := ctx.ReadResource("azure:appservice/functionAppHybridConnection:FunctionAppHybridConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FunctionAppHybridConnection resources.
type functionAppHybridConnectionState struct {
	// The ID of the Function App for this Hybrid Connection. Changing this forces a new resource to be created.
	FunctionAppId *string `pulumi:"functionAppId"`
	// The hostname of the endpoint.
	Hostname *string `pulumi:"hostname"`
	// The name of the Relay Namespace.
	NamespaceName *string `pulumi:"namespaceName"`
	// The port to use for the endpoint
	Port *int `pulumi:"port"`
	// The ID of the Relay Hybrid Connection to use. Changing this forces a new resource to be created.
	RelayId *string `pulumi:"relayId"`
	// The name of the Relay in use.
	RelayName *string `pulumi:"relayName"`
	// The name of the Relay key with `Send` permission to use. Defaults to `RootManageSharedAccessKey`
	SendKeyName *string `pulumi:"sendKeyName"`
	// The Primary Access Key for the `sendKeyName`
	SendKeyValue *string `pulumi:"sendKeyValue"`
	// The Service Bus Namespace.
	ServiceBusNamespace *string `pulumi:"serviceBusNamespace"`
	// The suffix for the endpoint.
	ServiceBusSuffix *string `pulumi:"serviceBusSuffix"`
}

type FunctionAppHybridConnectionState struct {
	// The ID of the Function App for this Hybrid Connection. Changing this forces a new resource to be created.
	FunctionAppId pulumi.StringPtrInput
	// The hostname of the endpoint.
	Hostname pulumi.StringPtrInput
	// The name of the Relay Namespace.
	NamespaceName pulumi.StringPtrInput
	// The port to use for the endpoint
	Port pulumi.IntPtrInput
	// The ID of the Relay Hybrid Connection to use. Changing this forces a new resource to be created.
	RelayId pulumi.StringPtrInput
	// The name of the Relay in use.
	RelayName pulumi.StringPtrInput
	// The name of the Relay key with `Send` permission to use. Defaults to `RootManageSharedAccessKey`
	SendKeyName pulumi.StringPtrInput
	// The Primary Access Key for the `sendKeyName`
	SendKeyValue pulumi.StringPtrInput
	// The Service Bus Namespace.
	ServiceBusNamespace pulumi.StringPtrInput
	// The suffix for the endpoint.
	ServiceBusSuffix pulumi.StringPtrInput
}

func (FunctionAppHybridConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*functionAppHybridConnectionState)(nil)).Elem()
}

type functionAppHybridConnectionArgs struct {
	// The ID of the Function App for this Hybrid Connection. Changing this forces a new resource to be created.
	FunctionAppId string `pulumi:"functionAppId"`
	// The hostname of the endpoint.
	Hostname string `pulumi:"hostname"`
	// The port to use for the endpoint
	Port int `pulumi:"port"`
	// The ID of the Relay Hybrid Connection to use. Changing this forces a new resource to be created.
	RelayId string `pulumi:"relayId"`
	// The name of the Relay key with `Send` permission to use. Defaults to `RootManageSharedAccessKey`
	SendKeyName *string `pulumi:"sendKeyName"`
}

// The set of arguments for constructing a FunctionAppHybridConnection resource.
type FunctionAppHybridConnectionArgs struct {
	// The ID of the Function App for this Hybrid Connection. Changing this forces a new resource to be created.
	FunctionAppId pulumi.StringInput
	// The hostname of the endpoint.
	Hostname pulumi.StringInput
	// The port to use for the endpoint
	Port pulumi.IntInput
	// The ID of the Relay Hybrid Connection to use. Changing this forces a new resource to be created.
	RelayId pulumi.StringInput
	// The name of the Relay key with `Send` permission to use. Defaults to `RootManageSharedAccessKey`
	SendKeyName pulumi.StringPtrInput
}

func (FunctionAppHybridConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*functionAppHybridConnectionArgs)(nil)).Elem()
}

type FunctionAppHybridConnectionInput interface {
	pulumi.Input

	ToFunctionAppHybridConnectionOutput() FunctionAppHybridConnectionOutput
	ToFunctionAppHybridConnectionOutputWithContext(ctx context.Context) FunctionAppHybridConnectionOutput
}

func (*FunctionAppHybridConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionAppHybridConnection)(nil)).Elem()
}

func (i *FunctionAppHybridConnection) ToFunctionAppHybridConnectionOutput() FunctionAppHybridConnectionOutput {
	return i.ToFunctionAppHybridConnectionOutputWithContext(context.Background())
}

func (i *FunctionAppHybridConnection) ToFunctionAppHybridConnectionOutputWithContext(ctx context.Context) FunctionAppHybridConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionAppHybridConnectionOutput)
}

// FunctionAppHybridConnectionArrayInput is an input type that accepts FunctionAppHybridConnectionArray and FunctionAppHybridConnectionArrayOutput values.
// You can construct a concrete instance of `FunctionAppHybridConnectionArrayInput` via:
//
//	FunctionAppHybridConnectionArray{ FunctionAppHybridConnectionArgs{...} }
type FunctionAppHybridConnectionArrayInput interface {
	pulumi.Input

	ToFunctionAppHybridConnectionArrayOutput() FunctionAppHybridConnectionArrayOutput
	ToFunctionAppHybridConnectionArrayOutputWithContext(context.Context) FunctionAppHybridConnectionArrayOutput
}

type FunctionAppHybridConnectionArray []FunctionAppHybridConnectionInput

func (FunctionAppHybridConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FunctionAppHybridConnection)(nil)).Elem()
}

func (i FunctionAppHybridConnectionArray) ToFunctionAppHybridConnectionArrayOutput() FunctionAppHybridConnectionArrayOutput {
	return i.ToFunctionAppHybridConnectionArrayOutputWithContext(context.Background())
}

func (i FunctionAppHybridConnectionArray) ToFunctionAppHybridConnectionArrayOutputWithContext(ctx context.Context) FunctionAppHybridConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionAppHybridConnectionArrayOutput)
}

// FunctionAppHybridConnectionMapInput is an input type that accepts FunctionAppHybridConnectionMap and FunctionAppHybridConnectionMapOutput values.
// You can construct a concrete instance of `FunctionAppHybridConnectionMapInput` via:
//
//	FunctionAppHybridConnectionMap{ "key": FunctionAppHybridConnectionArgs{...} }
type FunctionAppHybridConnectionMapInput interface {
	pulumi.Input

	ToFunctionAppHybridConnectionMapOutput() FunctionAppHybridConnectionMapOutput
	ToFunctionAppHybridConnectionMapOutputWithContext(context.Context) FunctionAppHybridConnectionMapOutput
}

type FunctionAppHybridConnectionMap map[string]FunctionAppHybridConnectionInput

func (FunctionAppHybridConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FunctionAppHybridConnection)(nil)).Elem()
}

func (i FunctionAppHybridConnectionMap) ToFunctionAppHybridConnectionMapOutput() FunctionAppHybridConnectionMapOutput {
	return i.ToFunctionAppHybridConnectionMapOutputWithContext(context.Background())
}

func (i FunctionAppHybridConnectionMap) ToFunctionAppHybridConnectionMapOutputWithContext(ctx context.Context) FunctionAppHybridConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionAppHybridConnectionMapOutput)
}

type FunctionAppHybridConnectionOutput struct{ *pulumi.OutputState }

func (FunctionAppHybridConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionAppHybridConnection)(nil)).Elem()
}

func (o FunctionAppHybridConnectionOutput) ToFunctionAppHybridConnectionOutput() FunctionAppHybridConnectionOutput {
	return o
}

func (o FunctionAppHybridConnectionOutput) ToFunctionAppHybridConnectionOutputWithContext(ctx context.Context) FunctionAppHybridConnectionOutput {
	return o
}

// The ID of the Function App for this Hybrid Connection. Changing this forces a new resource to be created.
func (o FunctionAppHybridConnectionOutput) FunctionAppId() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionAppHybridConnection) pulumi.StringOutput { return v.FunctionAppId }).(pulumi.StringOutput)
}

// The hostname of the endpoint.
func (o FunctionAppHybridConnectionOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionAppHybridConnection) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

// The name of the Relay Namespace.
func (o FunctionAppHybridConnectionOutput) NamespaceName() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionAppHybridConnection) pulumi.StringOutput { return v.NamespaceName }).(pulumi.StringOutput)
}

// The port to use for the endpoint
func (o FunctionAppHybridConnectionOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *FunctionAppHybridConnection) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// The ID of the Relay Hybrid Connection to use. Changing this forces a new resource to be created.
func (o FunctionAppHybridConnectionOutput) RelayId() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionAppHybridConnection) pulumi.StringOutput { return v.RelayId }).(pulumi.StringOutput)
}

// The name of the Relay in use.
func (o FunctionAppHybridConnectionOutput) RelayName() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionAppHybridConnection) pulumi.StringOutput { return v.RelayName }).(pulumi.StringOutput)
}

// The name of the Relay key with `Send` permission to use. Defaults to `RootManageSharedAccessKey`
func (o FunctionAppHybridConnectionOutput) SendKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionAppHybridConnection) pulumi.StringPtrOutput { return v.SendKeyName }).(pulumi.StringPtrOutput)
}

// The Primary Access Key for the `sendKeyName`
func (o FunctionAppHybridConnectionOutput) SendKeyValue() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionAppHybridConnection) pulumi.StringOutput { return v.SendKeyValue }).(pulumi.StringOutput)
}

// The Service Bus Namespace.
func (o FunctionAppHybridConnectionOutput) ServiceBusNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionAppHybridConnection) pulumi.StringOutput { return v.ServiceBusNamespace }).(pulumi.StringOutput)
}

// The suffix for the endpoint.
func (o FunctionAppHybridConnectionOutput) ServiceBusSuffix() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionAppHybridConnection) pulumi.StringOutput { return v.ServiceBusSuffix }).(pulumi.StringOutput)
}

type FunctionAppHybridConnectionArrayOutput struct{ *pulumi.OutputState }

func (FunctionAppHybridConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FunctionAppHybridConnection)(nil)).Elem()
}

func (o FunctionAppHybridConnectionArrayOutput) ToFunctionAppHybridConnectionArrayOutput() FunctionAppHybridConnectionArrayOutput {
	return o
}

func (o FunctionAppHybridConnectionArrayOutput) ToFunctionAppHybridConnectionArrayOutputWithContext(ctx context.Context) FunctionAppHybridConnectionArrayOutput {
	return o
}

func (o FunctionAppHybridConnectionArrayOutput) Index(i pulumi.IntInput) FunctionAppHybridConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FunctionAppHybridConnection {
		return vs[0].([]*FunctionAppHybridConnection)[vs[1].(int)]
	}).(FunctionAppHybridConnectionOutput)
}

type FunctionAppHybridConnectionMapOutput struct{ *pulumi.OutputState }

func (FunctionAppHybridConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FunctionAppHybridConnection)(nil)).Elem()
}

func (o FunctionAppHybridConnectionMapOutput) ToFunctionAppHybridConnectionMapOutput() FunctionAppHybridConnectionMapOutput {
	return o
}

func (o FunctionAppHybridConnectionMapOutput) ToFunctionAppHybridConnectionMapOutputWithContext(ctx context.Context) FunctionAppHybridConnectionMapOutput {
	return o
}

func (o FunctionAppHybridConnectionMapOutput) MapIndex(k pulumi.StringInput) FunctionAppHybridConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FunctionAppHybridConnection {
		return vs[0].(map[string]*FunctionAppHybridConnection)[vs[1].(string)]
	}).(FunctionAppHybridConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionAppHybridConnectionInput)(nil)).Elem(), &FunctionAppHybridConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionAppHybridConnectionArrayInput)(nil)).Elem(), FunctionAppHybridConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionAppHybridConnectionMapInput)(nil)).Elem(), FunctionAppHybridConnectionMap{})
	pulumi.RegisterOutputType(FunctionAppHybridConnectionOutput{})
	pulumi.RegisterOutputType(FunctionAppHybridConnectionArrayOutput{})
	pulumi.RegisterOutputType(FunctionAppHybridConnectionMapOutput{})
}
