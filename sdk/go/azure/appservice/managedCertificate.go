// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appservice

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// This certificate can be used to secure custom domains on App Services (Windows and Linux) hosted on an App Service Plan of Basic and above (free and shared tiers are not supported).
//
// > NOTE: A certificate is valid for six months, and about a month before the certificateâ€™s expiration date, App Services renews/rotates the certificate. This is managed by Azure and doesn't requre this resource to be changed or reprovisioned. It will change the `thumbprint` computed attribute the next time the resource is refreshed after rotation occurs, so keep that in mind if you have any dependencies on this attribute directly.
//
// ## Import
//
// App Service Managed Certificates can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:appservice/managedCertificate:ManagedCertificate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.Web/certificates/customhost.contoso.com
// ```
type ManagedCertificate struct {
	pulumi.CustomResourceState

	// The Canonical Name of the Certificate.
	CanonicalName pulumi.StringOutput `pulumi:"canonicalName"`
	// The ID of the App Service Custom Hostname Binding for the Certificate. Changing this forces a new App Service Managed Certificate to be created.
	CustomHostnameBindingId pulumi.StringOutput `pulumi:"customHostnameBindingId"`
	// The expiration date of the Certificate.
	ExpirationDate pulumi.StringOutput `pulumi:"expirationDate"`
	// The friendly name of the Certificate.
	FriendlyName pulumi.StringOutput `pulumi:"friendlyName"`
	// The list of Host Names for the Certificate.
	HostNames pulumi.StringArrayOutput `pulumi:"hostNames"`
	// The Start date for the Certificate.
	IssueDate pulumi.StringOutput `pulumi:"issueDate"`
	// The issuer of the Certificate.
	Issuer pulumi.StringOutput `pulumi:"issuer"`
	// The Subject Name for the Certificate.
	SubjectName pulumi.StringOutput `pulumi:"subjectName"`
	// A mapping of tags which should be assigned to the App Service Managed Certificate.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The Certificate Thumbprint.
	Thumbprint pulumi.StringOutput `pulumi:"thumbprint"`
}

// NewManagedCertificate registers a new resource with the given unique name, arguments, and options.
func NewManagedCertificate(ctx *pulumi.Context,
	name string, args *ManagedCertificateArgs, opts ...pulumi.ResourceOption) (*ManagedCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CustomHostnameBindingId == nil {
		return nil, errors.New("invalid value for required argument 'CustomHostnameBindingId'")
	}
	var resource ManagedCertificate
	err := ctx.RegisterResource("azure:appservice/managedCertificate:ManagedCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedCertificate gets an existing ManagedCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedCertificateState, opts ...pulumi.ResourceOption) (*ManagedCertificate, error) {
	var resource ManagedCertificate
	err := ctx.ReadResource("azure:appservice/managedCertificate:ManagedCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedCertificate resources.
type managedCertificateState struct {
	// The Canonical Name of the Certificate.
	CanonicalName *string `pulumi:"canonicalName"`
	// The ID of the App Service Custom Hostname Binding for the Certificate. Changing this forces a new App Service Managed Certificate to be created.
	CustomHostnameBindingId *string `pulumi:"customHostnameBindingId"`
	// The expiration date of the Certificate.
	ExpirationDate *string `pulumi:"expirationDate"`
	// The friendly name of the Certificate.
	FriendlyName *string `pulumi:"friendlyName"`
	// The list of Host Names for the Certificate.
	HostNames []string `pulumi:"hostNames"`
	// The Start date for the Certificate.
	IssueDate *string `pulumi:"issueDate"`
	// The issuer of the Certificate.
	Issuer *string `pulumi:"issuer"`
	// The Subject Name for the Certificate.
	SubjectName *string `pulumi:"subjectName"`
	// A mapping of tags which should be assigned to the App Service Managed Certificate.
	Tags map[string]string `pulumi:"tags"`
	// The Certificate Thumbprint.
	Thumbprint *string `pulumi:"thumbprint"`
}

type ManagedCertificateState struct {
	// The Canonical Name of the Certificate.
	CanonicalName pulumi.StringPtrInput
	// The ID of the App Service Custom Hostname Binding for the Certificate. Changing this forces a new App Service Managed Certificate to be created.
	CustomHostnameBindingId pulumi.StringPtrInput
	// The expiration date of the Certificate.
	ExpirationDate pulumi.StringPtrInput
	// The friendly name of the Certificate.
	FriendlyName pulumi.StringPtrInput
	// The list of Host Names for the Certificate.
	HostNames pulumi.StringArrayInput
	// The Start date for the Certificate.
	IssueDate pulumi.StringPtrInput
	// The issuer of the Certificate.
	Issuer pulumi.StringPtrInput
	// The Subject Name for the Certificate.
	SubjectName pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the App Service Managed Certificate.
	Tags pulumi.StringMapInput
	// The Certificate Thumbprint.
	Thumbprint pulumi.StringPtrInput
}

func (ManagedCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedCertificateState)(nil)).Elem()
}

type managedCertificateArgs struct {
	// The ID of the App Service Custom Hostname Binding for the Certificate. Changing this forces a new App Service Managed Certificate to be created.
	CustomHostnameBindingId string `pulumi:"customHostnameBindingId"`
	// A mapping of tags which should be assigned to the App Service Managed Certificate.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ManagedCertificate resource.
type ManagedCertificateArgs struct {
	// The ID of the App Service Custom Hostname Binding for the Certificate. Changing this forces a new App Service Managed Certificate to be created.
	CustomHostnameBindingId pulumi.StringInput
	// A mapping of tags which should be assigned to the App Service Managed Certificate.
	Tags pulumi.StringMapInput
}

func (ManagedCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedCertificateArgs)(nil)).Elem()
}

type ManagedCertificateInput interface {
	pulumi.Input

	ToManagedCertificateOutput() ManagedCertificateOutput
	ToManagedCertificateOutputWithContext(ctx context.Context) ManagedCertificateOutput
}

func (ManagedCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedCertificate)(nil)).Elem()
}

func (i ManagedCertificate) ToManagedCertificateOutput() ManagedCertificateOutput {
	return i.ToManagedCertificateOutputWithContext(context.Background())
}

func (i ManagedCertificate) ToManagedCertificateOutputWithContext(ctx context.Context) ManagedCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedCertificateOutput)
}

type ManagedCertificateOutput struct {
	*pulumi.OutputState
}

func (ManagedCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedCertificateOutput)(nil)).Elem()
}

func (o ManagedCertificateOutput) ToManagedCertificateOutput() ManagedCertificateOutput {
	return o
}

func (o ManagedCertificateOutput) ToManagedCertificateOutputWithContext(ctx context.Context) ManagedCertificateOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ManagedCertificateOutput{})
}
