// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appservice

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Linux Web App.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/appservice"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleServicePlan, err := appservice.NewServicePlan(ctx, "exampleServicePlan", &appservice.ServicePlanArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				OsType:            pulumi.String("Linux"),
//				SkuName:           pulumi.String("P1v2"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = appservice.NewLinuxWebApp(ctx, "exampleLinuxWebApp", &appservice.LinuxWebAppArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleServicePlan.Location,
//				ServicePlanId:     exampleServicePlan.ID(),
//				SiteConfig:        nil,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Linux Web Apps can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:appservice/linuxWebApp:LinuxWebApp example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/sites/site1
//
// ```
type LinuxWebApp struct {
	pulumi.CustomResourceState

	// A map of key-value pairs of App Settings.
	AppSettings pulumi.StringMapOutput `pulumi:"appSettings"`
	// A `authSettings` block as defined below.
	AuthSettings LinuxWebAppAuthSettingsOutput `pulumi:"authSettings"`
	// A `backup` block as defined below.
	Backup LinuxWebAppBackupPtrOutput `pulumi:"backup"`
	// Should Client Affinity be enabled?
	ClientAffinityEnabled pulumi.BoolPtrOutput `pulumi:"clientAffinityEnabled"`
	// Should Client Certificates be enabled?
	ClientCertificateEnabled pulumi.BoolPtrOutput `pulumi:"clientCertificateEnabled"`
	// Paths to exclude when using client certificates, separated by ;
	ClientCertificateExclusionPaths pulumi.StringPtrOutput `pulumi:"clientCertificateExclusionPaths"`
	// The Client Certificate mode. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. This property has no effect when `clientCertificateEnabled` is `false`
	ClientCertificateMode pulumi.StringPtrOutput `pulumi:"clientCertificateMode"`
	// One or more `connectionString` blocks as defined below.
	ConnectionStrings LinuxWebAppConnectionStringArrayOutput `pulumi:"connectionStrings"`
	// The identifier used by App Service to perform domain ownership verification via DNS TXT record.
	CustomDomainVerificationId pulumi.StringOutput `pulumi:"customDomainVerificationId"`
	// The default hostname of the Linux Web App.
	DefaultHostname pulumi.StringOutput `pulumi:"defaultHostname"`
	// Should the Linux Web App be enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Should the Linux Web App require HTTPS connections.
	HttpsOnly pulumi.BoolPtrOutput `pulumi:"httpsOnly"`
	// An `identity` block as defined below.
	Identity LinuxWebAppIdentityPtrOutput `pulumi:"identity"`
	// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity).
	KeyVaultReferenceIdentityId pulumi.StringOutput `pulumi:"keyVaultReferenceIdentityId"`
	// The Kind value for this Linux Web App.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The Azure Region where the Linux Web App should exist. Changing this forces a new Linux Web App to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// A `logs` block as defined below.
	Logs LinuxWebAppLogsPtrOutput `pulumi:"logs"`
	// The name which should be used for this Linux Web App. Changing this forces a new Linux Web App to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of outbound IP addresses - such as `["52.23.25.3", "52.143.43.12"]`
	OutboundIpAddressLists pulumi.StringArrayOutput `pulumi:"outboundIpAddressLists"`
	// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`.
	OutboundIpAddresses pulumi.StringOutput `pulumi:"outboundIpAddresses"`
	// A `possibleOutboundIpAddressList` block as defined below.
	PossibleOutboundIpAddressLists pulumi.StringArrayOutput `pulumi:"possibleOutboundIpAddressLists"`
	// A comma-separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outboundIpAddresses`.
	PossibleOutboundIpAddresses pulumi.StringOutput `pulumi:"possibleOutboundIpAddresses"`
	// The name of the Resource Group where the Linux Web App should exist. Changing this forces a new Linux Web App to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The ID of the Service Plan that this Linux App Service will be created in.
	ServicePlanId pulumi.StringOutput `pulumi:"servicePlanId"`
	// A `siteConfig` block as defined below.
	SiteConfig LinuxWebAppSiteConfigOutput `pulumi:"siteConfig"`
	// A `siteCredential` block as defined below.
	SiteCredentials LinuxWebAppSiteCredentialArrayOutput `pulumi:"siteCredentials"`
	// A `stickySettings` block as defined below.
	StickySettings LinuxWebAppStickySettingsPtrOutput `pulumi:"stickySettings"`
	// One or more `storageAccount` blocks as defined below.
	StorageAccounts LinuxWebAppStorageAccountArrayOutput `pulumi:"storageAccounts"`
	// A mapping of tags which should be assigned to the Linux Web App.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The subnet id which will be used by this Web App for [regional virtual network integration](https://docs.microsoft.com/en-us/azure/app-service/overview-vnet-integration#regional-virtual-network-integration).
	VirtualNetworkSubnetId pulumi.StringPtrOutput `pulumi:"virtualNetworkSubnetId"`
	// The local path and filename of the Zip packaged application to deploy to this Linux Web App.
	ZipDeployFile pulumi.StringOutput `pulumi:"zipDeployFile"`
}

// NewLinuxWebApp registers a new resource with the given unique name, arguments, and options.
func NewLinuxWebApp(ctx *pulumi.Context,
	name string, args *LinuxWebAppArgs, opts ...pulumi.ResourceOption) (*LinuxWebApp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServicePlanId == nil {
		return nil, errors.New("invalid value for required argument 'ServicePlanId'")
	}
	if args.SiteConfig == nil {
		return nil, errors.New("invalid value for required argument 'SiteConfig'")
	}
	var resource LinuxWebApp
	err := ctx.RegisterResource("azure:appservice/linuxWebApp:LinuxWebApp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLinuxWebApp gets an existing LinuxWebApp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLinuxWebApp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LinuxWebAppState, opts ...pulumi.ResourceOption) (*LinuxWebApp, error) {
	var resource LinuxWebApp
	err := ctx.ReadResource("azure:appservice/linuxWebApp:LinuxWebApp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LinuxWebApp resources.
type linuxWebAppState struct {
	// A map of key-value pairs of App Settings.
	AppSettings map[string]string `pulumi:"appSettings"`
	// A `authSettings` block as defined below.
	AuthSettings *LinuxWebAppAuthSettings `pulumi:"authSettings"`
	// A `backup` block as defined below.
	Backup *LinuxWebAppBackup `pulumi:"backup"`
	// Should Client Affinity be enabled?
	ClientAffinityEnabled *bool `pulumi:"clientAffinityEnabled"`
	// Should Client Certificates be enabled?
	ClientCertificateEnabled *bool `pulumi:"clientCertificateEnabled"`
	// Paths to exclude when using client certificates, separated by ;
	ClientCertificateExclusionPaths *string `pulumi:"clientCertificateExclusionPaths"`
	// The Client Certificate mode. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. This property has no effect when `clientCertificateEnabled` is `false`
	ClientCertificateMode *string `pulumi:"clientCertificateMode"`
	// One or more `connectionString` blocks as defined below.
	ConnectionStrings []LinuxWebAppConnectionString `pulumi:"connectionStrings"`
	// The identifier used by App Service to perform domain ownership verification via DNS TXT record.
	CustomDomainVerificationId *string `pulumi:"customDomainVerificationId"`
	// The default hostname of the Linux Web App.
	DefaultHostname *string `pulumi:"defaultHostname"`
	// Should the Linux Web App be enabled? Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Should the Linux Web App require HTTPS connections.
	HttpsOnly *bool `pulumi:"httpsOnly"`
	// An `identity` block as defined below.
	Identity *LinuxWebAppIdentity `pulumi:"identity"`
	// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity).
	KeyVaultReferenceIdentityId *string `pulumi:"keyVaultReferenceIdentityId"`
	// The Kind value for this Linux Web App.
	Kind *string `pulumi:"kind"`
	// The Azure Region where the Linux Web App should exist. Changing this forces a new Linux Web App to be created.
	Location *string `pulumi:"location"`
	// A `logs` block as defined below.
	Logs *LinuxWebAppLogs `pulumi:"logs"`
	// The name which should be used for this Linux Web App. Changing this forces a new Linux Web App to be created.
	Name *string `pulumi:"name"`
	// A list of outbound IP addresses - such as `["52.23.25.3", "52.143.43.12"]`
	OutboundIpAddressLists []string `pulumi:"outboundIpAddressLists"`
	// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`.
	OutboundIpAddresses *string `pulumi:"outboundIpAddresses"`
	// A `possibleOutboundIpAddressList` block as defined below.
	PossibleOutboundIpAddressLists []string `pulumi:"possibleOutboundIpAddressLists"`
	// A comma-separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outboundIpAddresses`.
	PossibleOutboundIpAddresses *string `pulumi:"possibleOutboundIpAddresses"`
	// The name of the Resource Group where the Linux Web App should exist. Changing this forces a new Linux Web App to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The ID of the Service Plan that this Linux App Service will be created in.
	ServicePlanId *string `pulumi:"servicePlanId"`
	// A `siteConfig` block as defined below.
	SiteConfig *LinuxWebAppSiteConfig `pulumi:"siteConfig"`
	// A `siteCredential` block as defined below.
	SiteCredentials []LinuxWebAppSiteCredential `pulumi:"siteCredentials"`
	// A `stickySettings` block as defined below.
	StickySettings *LinuxWebAppStickySettings `pulumi:"stickySettings"`
	// One or more `storageAccount` blocks as defined below.
	StorageAccounts []LinuxWebAppStorageAccount `pulumi:"storageAccounts"`
	// A mapping of tags which should be assigned to the Linux Web App.
	Tags map[string]string `pulumi:"tags"`
	// The subnet id which will be used by this Web App for [regional virtual network integration](https://docs.microsoft.com/en-us/azure/app-service/overview-vnet-integration#regional-virtual-network-integration).
	VirtualNetworkSubnetId *string `pulumi:"virtualNetworkSubnetId"`
	// The local path and filename of the Zip packaged application to deploy to this Linux Web App.
	ZipDeployFile *string `pulumi:"zipDeployFile"`
}

type LinuxWebAppState struct {
	// A map of key-value pairs of App Settings.
	AppSettings pulumi.StringMapInput
	// A `authSettings` block as defined below.
	AuthSettings LinuxWebAppAuthSettingsPtrInput
	// A `backup` block as defined below.
	Backup LinuxWebAppBackupPtrInput
	// Should Client Affinity be enabled?
	ClientAffinityEnabled pulumi.BoolPtrInput
	// Should Client Certificates be enabled?
	ClientCertificateEnabled pulumi.BoolPtrInput
	// Paths to exclude when using client certificates, separated by ;
	ClientCertificateExclusionPaths pulumi.StringPtrInput
	// The Client Certificate mode. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. This property has no effect when `clientCertificateEnabled` is `false`
	ClientCertificateMode pulumi.StringPtrInput
	// One or more `connectionString` blocks as defined below.
	ConnectionStrings LinuxWebAppConnectionStringArrayInput
	// The identifier used by App Service to perform domain ownership verification via DNS TXT record.
	CustomDomainVerificationId pulumi.StringPtrInput
	// The default hostname of the Linux Web App.
	DefaultHostname pulumi.StringPtrInput
	// Should the Linux Web App be enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// Should the Linux Web App require HTTPS connections.
	HttpsOnly pulumi.BoolPtrInput
	// An `identity` block as defined below.
	Identity LinuxWebAppIdentityPtrInput
	// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity).
	KeyVaultReferenceIdentityId pulumi.StringPtrInput
	// The Kind value for this Linux Web App.
	Kind pulumi.StringPtrInput
	// The Azure Region where the Linux Web App should exist. Changing this forces a new Linux Web App to be created.
	Location pulumi.StringPtrInput
	// A `logs` block as defined below.
	Logs LinuxWebAppLogsPtrInput
	// The name which should be used for this Linux Web App. Changing this forces a new Linux Web App to be created.
	Name pulumi.StringPtrInput
	// A list of outbound IP addresses - such as `["52.23.25.3", "52.143.43.12"]`
	OutboundIpAddressLists pulumi.StringArrayInput
	// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`.
	OutboundIpAddresses pulumi.StringPtrInput
	// A `possibleOutboundIpAddressList` block as defined below.
	PossibleOutboundIpAddressLists pulumi.StringArrayInput
	// A comma-separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outboundIpAddresses`.
	PossibleOutboundIpAddresses pulumi.StringPtrInput
	// The name of the Resource Group where the Linux Web App should exist. Changing this forces a new Linux Web App to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The ID of the Service Plan that this Linux App Service will be created in.
	ServicePlanId pulumi.StringPtrInput
	// A `siteConfig` block as defined below.
	SiteConfig LinuxWebAppSiteConfigPtrInput
	// A `siteCredential` block as defined below.
	SiteCredentials LinuxWebAppSiteCredentialArrayInput
	// A `stickySettings` block as defined below.
	StickySettings LinuxWebAppStickySettingsPtrInput
	// One or more `storageAccount` blocks as defined below.
	StorageAccounts LinuxWebAppStorageAccountArrayInput
	// A mapping of tags which should be assigned to the Linux Web App.
	Tags pulumi.StringMapInput
	// The subnet id which will be used by this Web App for [regional virtual network integration](https://docs.microsoft.com/en-us/azure/app-service/overview-vnet-integration#regional-virtual-network-integration).
	VirtualNetworkSubnetId pulumi.StringPtrInput
	// The local path and filename of the Zip packaged application to deploy to this Linux Web App.
	ZipDeployFile pulumi.StringPtrInput
}

func (LinuxWebAppState) ElementType() reflect.Type {
	return reflect.TypeOf((*linuxWebAppState)(nil)).Elem()
}

type linuxWebAppArgs struct {
	// A map of key-value pairs of App Settings.
	AppSettings map[string]string `pulumi:"appSettings"`
	// A `authSettings` block as defined below.
	AuthSettings *LinuxWebAppAuthSettings `pulumi:"authSettings"`
	// A `backup` block as defined below.
	Backup *LinuxWebAppBackup `pulumi:"backup"`
	// Should Client Affinity be enabled?
	ClientAffinityEnabled *bool `pulumi:"clientAffinityEnabled"`
	// Should Client Certificates be enabled?
	ClientCertificateEnabled *bool `pulumi:"clientCertificateEnabled"`
	// Paths to exclude when using client certificates, separated by ;
	ClientCertificateExclusionPaths *string `pulumi:"clientCertificateExclusionPaths"`
	// The Client Certificate mode. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. This property has no effect when `clientCertificateEnabled` is `false`
	ClientCertificateMode *string `pulumi:"clientCertificateMode"`
	// One or more `connectionString` blocks as defined below.
	ConnectionStrings []LinuxWebAppConnectionString `pulumi:"connectionStrings"`
	// Should the Linux Web App be enabled? Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Should the Linux Web App require HTTPS connections.
	HttpsOnly *bool `pulumi:"httpsOnly"`
	// An `identity` block as defined below.
	Identity *LinuxWebAppIdentity `pulumi:"identity"`
	// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity).
	KeyVaultReferenceIdentityId *string `pulumi:"keyVaultReferenceIdentityId"`
	// The Azure Region where the Linux Web App should exist. Changing this forces a new Linux Web App to be created.
	Location *string `pulumi:"location"`
	// A `logs` block as defined below.
	Logs *LinuxWebAppLogs `pulumi:"logs"`
	// The name which should be used for this Linux Web App. Changing this forces a new Linux Web App to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Linux Web App should exist. Changing this forces a new Linux Web App to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The ID of the Service Plan that this Linux App Service will be created in.
	ServicePlanId string `pulumi:"servicePlanId"`
	// A `siteConfig` block as defined below.
	SiteConfig LinuxWebAppSiteConfig `pulumi:"siteConfig"`
	// A `stickySettings` block as defined below.
	StickySettings *LinuxWebAppStickySettings `pulumi:"stickySettings"`
	// One or more `storageAccount` blocks as defined below.
	StorageAccounts []LinuxWebAppStorageAccount `pulumi:"storageAccounts"`
	// A mapping of tags which should be assigned to the Linux Web App.
	Tags map[string]string `pulumi:"tags"`
	// The subnet id which will be used by this Web App for [regional virtual network integration](https://docs.microsoft.com/en-us/azure/app-service/overview-vnet-integration#regional-virtual-network-integration).
	VirtualNetworkSubnetId *string `pulumi:"virtualNetworkSubnetId"`
	// The local path and filename of the Zip packaged application to deploy to this Linux Web App.
	ZipDeployFile *string `pulumi:"zipDeployFile"`
}

// The set of arguments for constructing a LinuxWebApp resource.
type LinuxWebAppArgs struct {
	// A map of key-value pairs of App Settings.
	AppSettings pulumi.StringMapInput
	// A `authSettings` block as defined below.
	AuthSettings LinuxWebAppAuthSettingsPtrInput
	// A `backup` block as defined below.
	Backup LinuxWebAppBackupPtrInput
	// Should Client Affinity be enabled?
	ClientAffinityEnabled pulumi.BoolPtrInput
	// Should Client Certificates be enabled?
	ClientCertificateEnabled pulumi.BoolPtrInput
	// Paths to exclude when using client certificates, separated by ;
	ClientCertificateExclusionPaths pulumi.StringPtrInput
	// The Client Certificate mode. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. This property has no effect when `clientCertificateEnabled` is `false`
	ClientCertificateMode pulumi.StringPtrInput
	// One or more `connectionString` blocks as defined below.
	ConnectionStrings LinuxWebAppConnectionStringArrayInput
	// Should the Linux Web App be enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// Should the Linux Web App require HTTPS connections.
	HttpsOnly pulumi.BoolPtrInput
	// An `identity` block as defined below.
	Identity LinuxWebAppIdentityPtrInput
	// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity).
	KeyVaultReferenceIdentityId pulumi.StringPtrInput
	// The Azure Region where the Linux Web App should exist. Changing this forces a new Linux Web App to be created.
	Location pulumi.StringPtrInput
	// A `logs` block as defined below.
	Logs LinuxWebAppLogsPtrInput
	// The name which should be used for this Linux Web App. Changing this forces a new Linux Web App to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Linux Web App should exist. Changing this forces a new Linux Web App to be created.
	ResourceGroupName pulumi.StringInput
	// The ID of the Service Plan that this Linux App Service will be created in.
	ServicePlanId pulumi.StringInput
	// A `siteConfig` block as defined below.
	SiteConfig LinuxWebAppSiteConfigInput
	// A `stickySettings` block as defined below.
	StickySettings LinuxWebAppStickySettingsPtrInput
	// One or more `storageAccount` blocks as defined below.
	StorageAccounts LinuxWebAppStorageAccountArrayInput
	// A mapping of tags which should be assigned to the Linux Web App.
	Tags pulumi.StringMapInput
	// The subnet id which will be used by this Web App for [regional virtual network integration](https://docs.microsoft.com/en-us/azure/app-service/overview-vnet-integration#regional-virtual-network-integration).
	VirtualNetworkSubnetId pulumi.StringPtrInput
	// The local path and filename of the Zip packaged application to deploy to this Linux Web App.
	ZipDeployFile pulumi.StringPtrInput
}

func (LinuxWebAppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*linuxWebAppArgs)(nil)).Elem()
}

type LinuxWebAppInput interface {
	pulumi.Input

	ToLinuxWebAppOutput() LinuxWebAppOutput
	ToLinuxWebAppOutputWithContext(ctx context.Context) LinuxWebAppOutput
}

func (*LinuxWebApp) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxWebApp)(nil)).Elem()
}

func (i *LinuxWebApp) ToLinuxWebAppOutput() LinuxWebAppOutput {
	return i.ToLinuxWebAppOutputWithContext(context.Background())
}

func (i *LinuxWebApp) ToLinuxWebAppOutputWithContext(ctx context.Context) LinuxWebAppOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxWebAppOutput)
}

// LinuxWebAppArrayInput is an input type that accepts LinuxWebAppArray and LinuxWebAppArrayOutput values.
// You can construct a concrete instance of `LinuxWebAppArrayInput` via:
//
//	LinuxWebAppArray{ LinuxWebAppArgs{...} }
type LinuxWebAppArrayInput interface {
	pulumi.Input

	ToLinuxWebAppArrayOutput() LinuxWebAppArrayOutput
	ToLinuxWebAppArrayOutputWithContext(context.Context) LinuxWebAppArrayOutput
}

type LinuxWebAppArray []LinuxWebAppInput

func (LinuxWebAppArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LinuxWebApp)(nil)).Elem()
}

func (i LinuxWebAppArray) ToLinuxWebAppArrayOutput() LinuxWebAppArrayOutput {
	return i.ToLinuxWebAppArrayOutputWithContext(context.Background())
}

func (i LinuxWebAppArray) ToLinuxWebAppArrayOutputWithContext(ctx context.Context) LinuxWebAppArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxWebAppArrayOutput)
}

// LinuxWebAppMapInput is an input type that accepts LinuxWebAppMap and LinuxWebAppMapOutput values.
// You can construct a concrete instance of `LinuxWebAppMapInput` via:
//
//	LinuxWebAppMap{ "key": LinuxWebAppArgs{...} }
type LinuxWebAppMapInput interface {
	pulumi.Input

	ToLinuxWebAppMapOutput() LinuxWebAppMapOutput
	ToLinuxWebAppMapOutputWithContext(context.Context) LinuxWebAppMapOutput
}

type LinuxWebAppMap map[string]LinuxWebAppInput

func (LinuxWebAppMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LinuxWebApp)(nil)).Elem()
}

func (i LinuxWebAppMap) ToLinuxWebAppMapOutput() LinuxWebAppMapOutput {
	return i.ToLinuxWebAppMapOutputWithContext(context.Background())
}

func (i LinuxWebAppMap) ToLinuxWebAppMapOutputWithContext(ctx context.Context) LinuxWebAppMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxWebAppMapOutput)
}

type LinuxWebAppOutput struct{ *pulumi.OutputState }

func (LinuxWebAppOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxWebApp)(nil)).Elem()
}

func (o LinuxWebAppOutput) ToLinuxWebAppOutput() LinuxWebAppOutput {
	return o
}

func (o LinuxWebAppOutput) ToLinuxWebAppOutputWithContext(ctx context.Context) LinuxWebAppOutput {
	return o
}

// A map of key-value pairs of App Settings.
func (o LinuxWebAppOutput) AppSettings() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LinuxWebApp) pulumi.StringMapOutput { return v.AppSettings }).(pulumi.StringMapOutput)
}

// A `authSettings` block as defined below.
func (o LinuxWebAppOutput) AuthSettings() LinuxWebAppAuthSettingsOutput {
	return o.ApplyT(func(v *LinuxWebApp) LinuxWebAppAuthSettingsOutput { return v.AuthSettings }).(LinuxWebAppAuthSettingsOutput)
}

// A `backup` block as defined below.
func (o LinuxWebAppOutput) Backup() LinuxWebAppBackupPtrOutput {
	return o.ApplyT(func(v *LinuxWebApp) LinuxWebAppBackupPtrOutput { return v.Backup }).(LinuxWebAppBackupPtrOutput)
}

// Should Client Affinity be enabled?
func (o LinuxWebAppOutput) ClientAffinityEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinuxWebApp) pulumi.BoolPtrOutput { return v.ClientAffinityEnabled }).(pulumi.BoolPtrOutput)
}

// Should Client Certificates be enabled?
func (o LinuxWebAppOutput) ClientCertificateEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinuxWebApp) pulumi.BoolPtrOutput { return v.ClientCertificateEnabled }).(pulumi.BoolPtrOutput)
}

// Paths to exclude when using client certificates, separated by ;
func (o LinuxWebAppOutput) ClientCertificateExclusionPaths() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxWebApp) pulumi.StringPtrOutput { return v.ClientCertificateExclusionPaths }).(pulumi.StringPtrOutput)
}

// The Client Certificate mode. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`. This property has no effect when `clientCertificateEnabled` is `false`
func (o LinuxWebAppOutput) ClientCertificateMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxWebApp) pulumi.StringPtrOutput { return v.ClientCertificateMode }).(pulumi.StringPtrOutput)
}

// One or more `connectionString` blocks as defined below.
func (o LinuxWebAppOutput) ConnectionStrings() LinuxWebAppConnectionStringArrayOutput {
	return o.ApplyT(func(v *LinuxWebApp) LinuxWebAppConnectionStringArrayOutput { return v.ConnectionStrings }).(LinuxWebAppConnectionStringArrayOutput)
}

// The identifier used by App Service to perform domain ownership verification via DNS TXT record.
func (o LinuxWebAppOutput) CustomDomainVerificationId() pulumi.StringOutput {
	return o.ApplyT(func(v *LinuxWebApp) pulumi.StringOutput { return v.CustomDomainVerificationId }).(pulumi.StringOutput)
}

// The default hostname of the Linux Web App.
func (o LinuxWebAppOutput) DefaultHostname() pulumi.StringOutput {
	return o.ApplyT(func(v *LinuxWebApp) pulumi.StringOutput { return v.DefaultHostname }).(pulumi.StringOutput)
}

// Should the Linux Web App be enabled? Defaults to `true`.
func (o LinuxWebAppOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinuxWebApp) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Should the Linux Web App require HTTPS connections.
func (o LinuxWebAppOutput) HttpsOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinuxWebApp) pulumi.BoolPtrOutput { return v.HttpsOnly }).(pulumi.BoolPtrOutput)
}

// An `identity` block as defined below.
func (o LinuxWebAppOutput) Identity() LinuxWebAppIdentityPtrOutput {
	return o.ApplyT(func(v *LinuxWebApp) LinuxWebAppIdentityPtrOutput { return v.Identity }).(LinuxWebAppIdentityPtrOutput)
}

// The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity).
func (o LinuxWebAppOutput) KeyVaultReferenceIdentityId() pulumi.StringOutput {
	return o.ApplyT(func(v *LinuxWebApp) pulumi.StringOutput { return v.KeyVaultReferenceIdentityId }).(pulumi.StringOutput)
}

// The Kind value for this Linux Web App.
func (o LinuxWebAppOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *LinuxWebApp) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// The Azure Region where the Linux Web App should exist. Changing this forces a new Linux Web App to be created.
func (o LinuxWebAppOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *LinuxWebApp) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// A `logs` block as defined below.
func (o LinuxWebAppOutput) Logs() LinuxWebAppLogsPtrOutput {
	return o.ApplyT(func(v *LinuxWebApp) LinuxWebAppLogsPtrOutput { return v.Logs }).(LinuxWebAppLogsPtrOutput)
}

// The name which should be used for this Linux Web App. Changing this forces a new Linux Web App to be created.
func (o LinuxWebAppOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LinuxWebApp) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of outbound IP addresses - such as `["52.23.25.3", "52.143.43.12"]`
func (o LinuxWebAppOutput) OutboundIpAddressLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LinuxWebApp) pulumi.StringArrayOutput { return v.OutboundIpAddressLists }).(pulumi.StringArrayOutput)
}

// A comma separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12`.
func (o LinuxWebAppOutput) OutboundIpAddresses() pulumi.StringOutput {
	return o.ApplyT(func(v *LinuxWebApp) pulumi.StringOutput { return v.OutboundIpAddresses }).(pulumi.StringOutput)
}

// A `possibleOutboundIpAddressList` block as defined below.
func (o LinuxWebAppOutput) PossibleOutboundIpAddressLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LinuxWebApp) pulumi.StringArrayOutput { return v.PossibleOutboundIpAddressLists }).(pulumi.StringArrayOutput)
}

// A comma-separated list of outbound IP addresses - such as `52.23.25.3,52.143.43.12,52.143.43.17` - not all of which are necessarily in use. Superset of `outboundIpAddresses`.
func (o LinuxWebAppOutput) PossibleOutboundIpAddresses() pulumi.StringOutput {
	return o.ApplyT(func(v *LinuxWebApp) pulumi.StringOutput { return v.PossibleOutboundIpAddresses }).(pulumi.StringOutput)
}

// The name of the Resource Group where the Linux Web App should exist. Changing this forces a new Linux Web App to be created.
func (o LinuxWebAppOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *LinuxWebApp) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The ID of the Service Plan that this Linux App Service will be created in.
func (o LinuxWebAppOutput) ServicePlanId() pulumi.StringOutput {
	return o.ApplyT(func(v *LinuxWebApp) pulumi.StringOutput { return v.ServicePlanId }).(pulumi.StringOutput)
}

// A `siteConfig` block as defined below.
func (o LinuxWebAppOutput) SiteConfig() LinuxWebAppSiteConfigOutput {
	return o.ApplyT(func(v *LinuxWebApp) LinuxWebAppSiteConfigOutput { return v.SiteConfig }).(LinuxWebAppSiteConfigOutput)
}

// A `siteCredential` block as defined below.
func (o LinuxWebAppOutput) SiteCredentials() LinuxWebAppSiteCredentialArrayOutput {
	return o.ApplyT(func(v *LinuxWebApp) LinuxWebAppSiteCredentialArrayOutput { return v.SiteCredentials }).(LinuxWebAppSiteCredentialArrayOutput)
}

// A `stickySettings` block as defined below.
func (o LinuxWebAppOutput) StickySettings() LinuxWebAppStickySettingsPtrOutput {
	return o.ApplyT(func(v *LinuxWebApp) LinuxWebAppStickySettingsPtrOutput { return v.StickySettings }).(LinuxWebAppStickySettingsPtrOutput)
}

// One or more `storageAccount` blocks as defined below.
func (o LinuxWebAppOutput) StorageAccounts() LinuxWebAppStorageAccountArrayOutput {
	return o.ApplyT(func(v *LinuxWebApp) LinuxWebAppStorageAccountArrayOutput { return v.StorageAccounts }).(LinuxWebAppStorageAccountArrayOutput)
}

// A mapping of tags which should be assigned to the Linux Web App.
func (o LinuxWebAppOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LinuxWebApp) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The subnet id which will be used by this Web App for [regional virtual network integration](https://docs.microsoft.com/en-us/azure/app-service/overview-vnet-integration#regional-virtual-network-integration).
func (o LinuxWebAppOutput) VirtualNetworkSubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxWebApp) pulumi.StringPtrOutput { return v.VirtualNetworkSubnetId }).(pulumi.StringPtrOutput)
}

// The local path and filename of the Zip packaged application to deploy to this Linux Web App.
func (o LinuxWebAppOutput) ZipDeployFile() pulumi.StringOutput {
	return o.ApplyT(func(v *LinuxWebApp) pulumi.StringOutput { return v.ZipDeployFile }).(pulumi.StringOutput)
}

type LinuxWebAppArrayOutput struct{ *pulumi.OutputState }

func (LinuxWebAppArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LinuxWebApp)(nil)).Elem()
}

func (o LinuxWebAppArrayOutput) ToLinuxWebAppArrayOutput() LinuxWebAppArrayOutput {
	return o
}

func (o LinuxWebAppArrayOutput) ToLinuxWebAppArrayOutputWithContext(ctx context.Context) LinuxWebAppArrayOutput {
	return o
}

func (o LinuxWebAppArrayOutput) Index(i pulumi.IntInput) LinuxWebAppOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LinuxWebApp {
		return vs[0].([]*LinuxWebApp)[vs[1].(int)]
	}).(LinuxWebAppOutput)
}

type LinuxWebAppMapOutput struct{ *pulumi.OutputState }

func (LinuxWebAppMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LinuxWebApp)(nil)).Elem()
}

func (o LinuxWebAppMapOutput) ToLinuxWebAppMapOutput() LinuxWebAppMapOutput {
	return o
}

func (o LinuxWebAppMapOutput) ToLinuxWebAppMapOutputWithContext(ctx context.Context) LinuxWebAppMapOutput {
	return o
}

func (o LinuxWebAppMapOutput) MapIndex(k pulumi.StringInput) LinuxWebAppOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LinuxWebApp {
		return vs[0].(map[string]*LinuxWebApp)[vs[1].(string)]
	}).(LinuxWebAppOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LinuxWebAppInput)(nil)).Elem(), &LinuxWebApp{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinuxWebAppArrayInput)(nil)).Elem(), LinuxWebAppArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinuxWebAppMapInput)(nil)).Elem(), LinuxWebAppMap{})
	pulumi.RegisterOutputType(LinuxWebAppOutput{})
	pulumi.RegisterOutputType(LinuxWebAppArrayOutput{})
	pulumi.RegisterOutputType(LinuxWebAppMapOutput{})
}
