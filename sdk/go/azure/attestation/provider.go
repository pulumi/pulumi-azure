// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package attestation

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Provider struct {
	pulumi.CustomResourceState

	AttestationUri               pulumi.StringOutput    `pulumi:"attestationUri"`
	Location                     pulumi.StringOutput    `pulumi:"location"`
	Name                         pulumi.StringOutput    `pulumi:"name"`
	PolicySigningCertificateData pulumi.StringPtrOutput `pulumi:"policySigningCertificateData"`
	ResourceGroupName            pulumi.StringOutput    `pulumi:"resourceGroupName"`
	Tags                         pulumi.StringMapOutput `pulumi:"tags"`
	TrustModel                   pulumi.StringOutput    `pulumi:"trustModel"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	var resource Provider
	err := ctx.RegisterResource("azure:attestation/provider:Provider", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProvider gets an existing Provider resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProvider(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProviderState, opts ...pulumi.ResourceOption) (*Provider, error) {
	var resource Provider
	err := ctx.ReadResource("azure:attestation/provider:Provider", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Provider resources.
type providerState struct {
	AttestationUri               *string           `pulumi:"attestationUri"`
	Location                     *string           `pulumi:"location"`
	Name                         *string           `pulumi:"name"`
	PolicySigningCertificateData *string           `pulumi:"policySigningCertificateData"`
	ResourceGroupName            *string           `pulumi:"resourceGroupName"`
	Tags                         map[string]string `pulumi:"tags"`
	TrustModel                   *string           `pulumi:"trustModel"`
}

type ProviderState struct {
	AttestationUri               pulumi.StringPtrInput
	Location                     pulumi.StringPtrInput
	Name                         pulumi.StringPtrInput
	PolicySigningCertificateData pulumi.StringPtrInput
	ResourceGroupName            pulumi.StringPtrInput
	Tags                         pulumi.StringMapInput
	TrustModel                   pulumi.StringPtrInput
}

func (ProviderState) ElementType() reflect.Type {
	return reflect.TypeOf((*providerState)(nil)).Elem()
}

type providerArgs struct {
	Location                     *string           `pulumi:"location"`
	Name                         *string           `pulumi:"name"`
	PolicySigningCertificateData *string           `pulumi:"policySigningCertificateData"`
	ResourceGroupName            string            `pulumi:"resourceGroupName"`
	Tags                         map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	Location                     pulumi.StringPtrInput
	Name                         pulumi.StringPtrInput
	PolicySigningCertificateData pulumi.StringPtrInput
	ResourceGroupName            pulumi.StringInput
	Tags                         pulumi.StringMapInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (Provider) ElementType() reflect.Type {
	return reflect.TypeOf((*Provider)(nil)).Elem()
}

func (i Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct {
	*pulumi.OutputState
}

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderOutput)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ProviderOutput{})
}
