// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package attestation

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Attestation Provider.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"io/ioutil"
//
// 	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/attestation"
// 	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func readFileOrPanic(path string) pulumi.StringPtrInput {
// 	data, err := ioutil.ReadFile(path)
// 	if err != nil {
// 		panic(err.Error())
// 	}
// 	return pulumi.String(string(data))
// }
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West Europe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = attestation.NewProvider(ctx, "exampleProvider", &attestation.ProviderArgs{
// 			ResourceGroupName:            exampleResourceGroup.Name,
// 			Location:                     exampleResourceGroup.Location,
// 			PolicySigningCertificateData: readFileOrPanic("./example/cert.pem"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Attestation Providers can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:attestation/provider:Provider example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Attestation/attestationProviders/provider1
// ```
type Provider struct {
	pulumi.CustomResourceState

	// The URI of the Attestation Service.
	AttestationUri pulumi.StringOutput `pulumi:"attestationUri"`
	// The Azure Region where the Attestation Provider should exist. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name which should be used for this Attestation Provider. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A valid X.509 certificate (Section 4 of [RFC4648](https://tools.ietf.org/html/rfc4648)). Changing this forces a new resource to be created.
	PolicySigningCertificateData pulumi.StringPtrOutput `pulumi:"policySigningCertificateData"`
	// The name of the Resource Group where the attestation provider should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Attestation Provider.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Trust model used for the Attestation Service.
	TrustModel pulumi.StringOutput `pulumi:"trustModel"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	var resource Provider
	err := ctx.RegisterResource("azure:attestation/provider:Provider", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProvider gets an existing Provider resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProvider(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProviderState, opts ...pulumi.ResourceOption) (*Provider, error) {
	var resource Provider
	err := ctx.ReadResource("azure:attestation/provider:Provider", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Provider resources.
type providerState struct {
	// The URI of the Attestation Service.
	AttestationUri *string `pulumi:"attestationUri"`
	// The Azure Region where the Attestation Provider should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Attestation Provider. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A valid X.509 certificate (Section 4 of [RFC4648](https://tools.ietf.org/html/rfc4648)). Changing this forces a new resource to be created.
	PolicySigningCertificateData *string `pulumi:"policySigningCertificateData"`
	// The name of the Resource Group where the attestation provider should exist. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Attestation Provider.
	Tags map[string]string `pulumi:"tags"`
	// Trust model used for the Attestation Service.
	TrustModel *string `pulumi:"trustModel"`
}

type ProviderState struct {
	// The URI of the Attestation Service.
	AttestationUri pulumi.StringPtrInput
	// The Azure Region where the Attestation Provider should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Attestation Provider. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A valid X.509 certificate (Section 4 of [RFC4648](https://tools.ietf.org/html/rfc4648)). Changing this forces a new resource to be created.
	PolicySigningCertificateData pulumi.StringPtrInput
	// The name of the Resource Group where the attestation provider should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Attestation Provider.
	Tags pulumi.StringMapInput
	// Trust model used for the Attestation Service.
	TrustModel pulumi.StringPtrInput
}

func (ProviderState) ElementType() reflect.Type {
	return reflect.TypeOf((*providerState)(nil)).Elem()
}

type providerArgs struct {
	// The Azure Region where the Attestation Provider should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Attestation Provider. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A valid X.509 certificate (Section 4 of [RFC4648](https://tools.ietf.org/html/rfc4648)). Changing this forces a new resource to be created.
	PolicySigningCertificateData *string `pulumi:"policySigningCertificateData"`
	// The name of the Resource Group where the attestation provider should exist. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Attestation Provider.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// The Azure Region where the Attestation Provider should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Attestation Provider. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A valid X.509 certificate (Section 4 of [RFC4648](https://tools.ietf.org/html/rfc4648)). Changing this forces a new resource to be created.
	PolicySigningCertificateData pulumi.StringPtrInput
	// The name of the Resource Group where the attestation provider should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags which should be assigned to the Attestation Provider.
	Tags pulumi.StringMapInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

// ProviderArrayInput is an input type that accepts ProviderArray and ProviderArrayOutput values.
// You can construct a concrete instance of `ProviderArrayInput` via:
//
//          ProviderArray{ ProviderArgs{...} }
type ProviderArrayInput interface {
	pulumi.Input

	ToProviderArrayOutput() ProviderArrayOutput
	ToProviderArrayOutputWithContext(context.Context) ProviderArrayOutput
}

type ProviderArray []ProviderInput

func (ProviderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Provider)(nil)).Elem()
}

func (i ProviderArray) ToProviderArrayOutput() ProviderArrayOutput {
	return i.ToProviderArrayOutputWithContext(context.Background())
}

func (i ProviderArray) ToProviderArrayOutputWithContext(ctx context.Context) ProviderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderArrayOutput)
}

// ProviderMapInput is an input type that accepts ProviderMap and ProviderMapOutput values.
// You can construct a concrete instance of `ProviderMapInput` via:
//
//          ProviderMap{ "key": ProviderArgs{...} }
type ProviderMapInput interface {
	pulumi.Input

	ToProviderMapOutput() ProviderMapOutput
	ToProviderMapOutputWithContext(context.Context) ProviderMapOutput
}

type ProviderMap map[string]ProviderInput

func (ProviderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Provider)(nil)).Elem()
}

func (i ProviderMap) ToProviderMapOutput() ProviderMapOutput {
	return i.ToProviderMapOutputWithContext(context.Background())
}

func (i ProviderMap) ToProviderMapOutputWithContext(ctx context.Context) ProviderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderMapOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

type ProviderArrayOutput struct{ *pulumi.OutputState }

func (ProviderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Provider)(nil)).Elem()
}

func (o ProviderArrayOutput) ToProviderArrayOutput() ProviderArrayOutput {
	return o
}

func (o ProviderArrayOutput) ToProviderArrayOutputWithContext(ctx context.Context) ProviderArrayOutput {
	return o
}

func (o ProviderArrayOutput) Index(i pulumi.IntInput) ProviderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Provider {
		return vs[0].([]*Provider)[vs[1].(int)]
	}).(ProviderOutput)
}

type ProviderMapOutput struct{ *pulumi.OutputState }

func (ProviderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Provider)(nil)).Elem()
}

func (o ProviderMapOutput) ToProviderMapOutput() ProviderMapOutput {
	return o
}

func (o ProviderMapOutput) ToProviderMapOutputWithContext(ctx context.Context) ProviderMapOutput {
	return o
}

func (o ProviderMapOutput) MapIndex(k pulumi.StringInput) ProviderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Provider {
		return vs[0].(map[string]*Provider)[vs[1].(string)]
	}).(ProviderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderArrayInput)(nil)).Elem(), ProviderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderMapInput)(nil)).Elem(), ProviderMap{})
	pulumi.RegisterOutputType(ProviderOutput{})
	pulumi.RegisterOutputType(ProviderArrayOutput{})
	pulumi.RegisterOutputType(ProviderMapOutput{})
}
