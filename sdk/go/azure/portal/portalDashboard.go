// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package portal

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Dashboards can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:portal/portalDashboard:PortalDashboard my-board /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Portal/dashboards/00000000-0000-0000-0000-000000000000
//
// ```
//
//	Note the URI in the above sample can be found using the Resource Explorer tool in the Azure Portal.
type PortalDashboard struct {
	pulumi.CustomResourceState

	// JSON data representing dashboard body. See above for details on how to obtain this from the Portal.
	DashboardProperties pulumi.StringOutput `pulumi:"dashboardProperties"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name of the Shared Dashboard. Changing this forces a new resource to be created.
	//
	// > **Note**: You can specify a tag with the key `hidden-title` to set a more user-friendly title for this Dashboard.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the resource group in which to create the dashboard. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewPortalDashboard registers a new resource with the given unique name, arguments, and options.
func NewPortalDashboard(ctx *pulumi.Context,
	name string, args *PortalDashboardArgs, opts ...pulumi.ResourceOption) (*PortalDashboard, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DashboardProperties == nil {
		return nil, errors.New("invalid value for required argument 'DashboardProperties'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PortalDashboard
	err := ctx.RegisterResource("azure:portal/portalDashboard:PortalDashboard", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPortalDashboard gets an existing PortalDashboard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPortalDashboard(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PortalDashboardState, opts ...pulumi.ResourceOption) (*PortalDashboard, error) {
	var resource PortalDashboard
	err := ctx.ReadResource("azure:portal/portalDashboard:PortalDashboard", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PortalDashboard resources.
type portalDashboardState struct {
	// JSON data representing dashboard body. See above for details on how to obtain this from the Portal.
	DashboardProperties *string `pulumi:"dashboardProperties"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the Shared Dashboard. Changing this forces a new resource to be created.
	//
	// > **Note**: You can specify a tag with the key `hidden-title` to set a more user-friendly title for this Dashboard.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to create the dashboard. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

type PortalDashboardState struct {
	// JSON data representing dashboard body. See above for details on how to obtain this from the Portal.
	DashboardProperties pulumi.StringPtrInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the Shared Dashboard. Changing this forces a new resource to be created.
	//
	// > **Note**: You can specify a tag with the key `hidden-title` to set a more user-friendly title for this Dashboard.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to create the dashboard. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
}

func (PortalDashboardState) ElementType() reflect.Type {
	return reflect.TypeOf((*portalDashboardState)(nil)).Elem()
}

type portalDashboardArgs struct {
	// JSON data representing dashboard body. See above for details on how to obtain this from the Portal.
	DashboardProperties string `pulumi:"dashboardProperties"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the Shared Dashboard. Changing this forces a new resource to be created.
	//
	// > **Note**: You can specify a tag with the key `hidden-title` to set a more user-friendly title for this Dashboard.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to create the dashboard. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a PortalDashboard resource.
type PortalDashboardArgs struct {
	// JSON data representing dashboard body. See above for details on how to obtain this from the Portal.
	DashboardProperties pulumi.StringInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the Shared Dashboard. Changing this forces a new resource to be created.
	//
	// > **Note**: You can specify a tag with the key `hidden-title` to set a more user-friendly title for this Dashboard.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to create the dashboard. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
}

func (PortalDashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*portalDashboardArgs)(nil)).Elem()
}

type PortalDashboardInput interface {
	pulumi.Input

	ToPortalDashboardOutput() PortalDashboardOutput
	ToPortalDashboardOutputWithContext(ctx context.Context) PortalDashboardOutput
}

func (*PortalDashboard) ElementType() reflect.Type {
	return reflect.TypeOf((**PortalDashboard)(nil)).Elem()
}

func (i *PortalDashboard) ToPortalDashboardOutput() PortalDashboardOutput {
	return i.ToPortalDashboardOutputWithContext(context.Background())
}

func (i *PortalDashboard) ToPortalDashboardOutputWithContext(ctx context.Context) PortalDashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortalDashboardOutput)
}

// PortalDashboardArrayInput is an input type that accepts PortalDashboardArray and PortalDashboardArrayOutput values.
// You can construct a concrete instance of `PortalDashboardArrayInput` via:
//
//	PortalDashboardArray{ PortalDashboardArgs{...} }
type PortalDashboardArrayInput interface {
	pulumi.Input

	ToPortalDashboardArrayOutput() PortalDashboardArrayOutput
	ToPortalDashboardArrayOutputWithContext(context.Context) PortalDashboardArrayOutput
}

type PortalDashboardArray []PortalDashboardInput

func (PortalDashboardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PortalDashboard)(nil)).Elem()
}

func (i PortalDashboardArray) ToPortalDashboardArrayOutput() PortalDashboardArrayOutput {
	return i.ToPortalDashboardArrayOutputWithContext(context.Background())
}

func (i PortalDashboardArray) ToPortalDashboardArrayOutputWithContext(ctx context.Context) PortalDashboardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortalDashboardArrayOutput)
}

// PortalDashboardMapInput is an input type that accepts PortalDashboardMap and PortalDashboardMapOutput values.
// You can construct a concrete instance of `PortalDashboardMapInput` via:
//
//	PortalDashboardMap{ "key": PortalDashboardArgs{...} }
type PortalDashboardMapInput interface {
	pulumi.Input

	ToPortalDashboardMapOutput() PortalDashboardMapOutput
	ToPortalDashboardMapOutputWithContext(context.Context) PortalDashboardMapOutput
}

type PortalDashboardMap map[string]PortalDashboardInput

func (PortalDashboardMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PortalDashboard)(nil)).Elem()
}

func (i PortalDashboardMap) ToPortalDashboardMapOutput() PortalDashboardMapOutput {
	return i.ToPortalDashboardMapOutputWithContext(context.Background())
}

func (i PortalDashboardMap) ToPortalDashboardMapOutputWithContext(ctx context.Context) PortalDashboardMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortalDashboardMapOutput)
}

type PortalDashboardOutput struct{ *pulumi.OutputState }

func (PortalDashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PortalDashboard)(nil)).Elem()
}

func (o PortalDashboardOutput) ToPortalDashboardOutput() PortalDashboardOutput {
	return o
}

func (o PortalDashboardOutput) ToPortalDashboardOutputWithContext(ctx context.Context) PortalDashboardOutput {
	return o
}

// JSON data representing dashboard body. See above for details on how to obtain this from the Portal.
func (o PortalDashboardOutput) DashboardProperties() pulumi.StringOutput {
	return o.ApplyT(func(v *PortalDashboard) pulumi.StringOutput { return v.DashboardProperties }).(pulumi.StringOutput)
}

// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
func (o PortalDashboardOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *PortalDashboard) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name of the Shared Dashboard. Changing this forces a new resource to be created.
//
// > **Note**: You can specify a tag with the key `hidden-title` to set a more user-friendly title for this Dashboard.
func (o PortalDashboardOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PortalDashboard) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the resource group in which to create the dashboard. Changing this forces a new resource to be created.
func (o PortalDashboardOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *PortalDashboard) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o PortalDashboardOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PortalDashboard) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type PortalDashboardArrayOutput struct{ *pulumi.OutputState }

func (PortalDashboardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PortalDashboard)(nil)).Elem()
}

func (o PortalDashboardArrayOutput) ToPortalDashboardArrayOutput() PortalDashboardArrayOutput {
	return o
}

func (o PortalDashboardArrayOutput) ToPortalDashboardArrayOutputWithContext(ctx context.Context) PortalDashboardArrayOutput {
	return o
}

func (o PortalDashboardArrayOutput) Index(i pulumi.IntInput) PortalDashboardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PortalDashboard {
		return vs[0].([]*PortalDashboard)[vs[1].(int)]
	}).(PortalDashboardOutput)
}

type PortalDashboardMapOutput struct{ *pulumi.OutputState }

func (PortalDashboardMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PortalDashboard)(nil)).Elem()
}

func (o PortalDashboardMapOutput) ToPortalDashboardMapOutput() PortalDashboardMapOutput {
	return o
}

func (o PortalDashboardMapOutput) ToPortalDashboardMapOutputWithContext(ctx context.Context) PortalDashboardMapOutput {
	return o
}

func (o PortalDashboardMapOutput) MapIndex(k pulumi.StringInput) PortalDashboardOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PortalDashboard {
		return vs[0].(map[string]*PortalDashboard)[vs[1].(string)]
	}).(PortalDashboardOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PortalDashboardInput)(nil)).Elem(), &PortalDashboard{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortalDashboardArrayInput)(nil)).Elem(), PortalDashboardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortalDashboardMapInput)(nil)).Elem(), PortalDashboardMap{})
	pulumi.RegisterOutputType(PortalDashboardOutput{})
	pulumi.RegisterOutputType(PortalDashboardArrayOutput{})
	pulumi.RegisterOutputType(PortalDashboardMapOutput{})
}
