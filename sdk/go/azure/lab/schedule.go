// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lab

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Lab Service Schedule.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/lab"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleLab, err := lab.NewLab(ctx, "exampleLab", &lab.LabArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				Title:             pulumi.String("Test Title"),
//				Security: &lab.LabSecurityArgs{
//					OpenAccessEnabled: pulumi.Bool(false),
//				},
//				VirtualMachine: &lab.LabVirtualMachineArgs{
//					AdminUser: &lab.LabVirtualMachineAdminUserArgs{
//						Username: pulumi.String("testadmin"),
//						Password: pulumi.String("Password1234!"),
//					},
//					ImageReference: &lab.LabVirtualMachineImageReferenceArgs{
//						Publisher: pulumi.String("Canonical"),
//						Offer:     pulumi.String("0001-com-ubuntu-server-jammy"),
//						Sku:       pulumi.String("22_04-lts"),
//						Version:   pulumi.String("latest"),
//					},
//					Sku: &lab.LabVirtualMachineSkuArgs{
//						Name:     pulumi.String("Classic_Fsv2_2_4GB_128_S_SSD"),
//						Capacity: pulumi.Int(1),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = lab.NewSchedule(ctx, "exampleSchedule", &lab.ScheduleArgs{
//				LabId:    exampleLab.ID(),
//				StopTime: pulumi.String("2022-11-28T00:00:00Z"),
//				TimeZone: pulumi.String("America/Los_Angeles"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Lab Service Schedules can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:lab/schedule:Schedule example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.LabServices/labs/lab1/schedules/schedule1
//
// ```
type Schedule struct {
	pulumi.CustomResourceState

	// The resource ID of the Lab Service Schedule. Changing this forces a new resource to be created.
	LabId pulumi.StringOutput `pulumi:"labId"`
	// The name which should be used for this Lab Service Schedule. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The notes for the Schedule.
	Notes pulumi.StringPtrOutput `pulumi:"notes"`
	// A `recurrence` block as defined below.
	Recurrence ScheduleRecurrencePtrOutput `pulumi:"recurrence"`
	// When Lab User Virtual Machines will be started in RFC-3339 format.
	StartTime pulumi.StringPtrOutput `pulumi:"startTime"`
	// When Lab User Virtual Machines will be stopped in RFC-3339 format.
	StopTime pulumi.StringOutput `pulumi:"stopTime"`
	// The IANA Time Zone ID for the Schedule.
	TimeZone pulumi.StringOutput `pulumi:"timeZone"`
}

// NewSchedule registers a new resource with the given unique name, arguments, and options.
func NewSchedule(ctx *pulumi.Context,
	name string, args *ScheduleArgs, opts ...pulumi.ResourceOption) (*Schedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LabId == nil {
		return nil, errors.New("invalid value for required argument 'LabId'")
	}
	if args.StopTime == nil {
		return nil, errors.New("invalid value for required argument 'StopTime'")
	}
	if args.TimeZone == nil {
		return nil, errors.New("invalid value for required argument 'TimeZone'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Schedule
	err := ctx.RegisterResource("azure:lab/schedule:Schedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchedule gets an existing Schedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScheduleState, opts ...pulumi.ResourceOption) (*Schedule, error) {
	var resource Schedule
	err := ctx.ReadResource("azure:lab/schedule:Schedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Schedule resources.
type scheduleState struct {
	// The resource ID of the Lab Service Schedule. Changing this forces a new resource to be created.
	LabId *string `pulumi:"labId"`
	// The name which should be used for this Lab Service Schedule. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The notes for the Schedule.
	Notes *string `pulumi:"notes"`
	// A `recurrence` block as defined below.
	Recurrence *ScheduleRecurrence `pulumi:"recurrence"`
	// When Lab User Virtual Machines will be started in RFC-3339 format.
	StartTime *string `pulumi:"startTime"`
	// When Lab User Virtual Machines will be stopped in RFC-3339 format.
	StopTime *string `pulumi:"stopTime"`
	// The IANA Time Zone ID for the Schedule.
	TimeZone *string `pulumi:"timeZone"`
}

type ScheduleState struct {
	// The resource ID of the Lab Service Schedule. Changing this forces a new resource to be created.
	LabId pulumi.StringPtrInput
	// The name which should be used for this Lab Service Schedule. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The notes for the Schedule.
	Notes pulumi.StringPtrInput
	// A `recurrence` block as defined below.
	Recurrence ScheduleRecurrencePtrInput
	// When Lab User Virtual Machines will be started in RFC-3339 format.
	StartTime pulumi.StringPtrInput
	// When Lab User Virtual Machines will be stopped in RFC-3339 format.
	StopTime pulumi.StringPtrInput
	// The IANA Time Zone ID for the Schedule.
	TimeZone pulumi.StringPtrInput
}

func (ScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduleState)(nil)).Elem()
}

type scheduleArgs struct {
	// The resource ID of the Lab Service Schedule. Changing this forces a new resource to be created.
	LabId string `pulumi:"labId"`
	// The name which should be used for this Lab Service Schedule. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The notes for the Schedule.
	Notes *string `pulumi:"notes"`
	// A `recurrence` block as defined below.
	Recurrence *ScheduleRecurrence `pulumi:"recurrence"`
	// When Lab User Virtual Machines will be started in RFC-3339 format.
	StartTime *string `pulumi:"startTime"`
	// When Lab User Virtual Machines will be stopped in RFC-3339 format.
	StopTime string `pulumi:"stopTime"`
	// The IANA Time Zone ID for the Schedule.
	TimeZone string `pulumi:"timeZone"`
}

// The set of arguments for constructing a Schedule resource.
type ScheduleArgs struct {
	// The resource ID of the Lab Service Schedule. Changing this forces a new resource to be created.
	LabId pulumi.StringInput
	// The name which should be used for this Lab Service Schedule. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The notes for the Schedule.
	Notes pulumi.StringPtrInput
	// A `recurrence` block as defined below.
	Recurrence ScheduleRecurrencePtrInput
	// When Lab User Virtual Machines will be started in RFC-3339 format.
	StartTime pulumi.StringPtrInput
	// When Lab User Virtual Machines will be stopped in RFC-3339 format.
	StopTime pulumi.StringInput
	// The IANA Time Zone ID for the Schedule.
	TimeZone pulumi.StringInput
}

func (ScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduleArgs)(nil)).Elem()
}

type ScheduleInput interface {
	pulumi.Input

	ToScheduleOutput() ScheduleOutput
	ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput
}

func (*Schedule) ElementType() reflect.Type {
	return reflect.TypeOf((**Schedule)(nil)).Elem()
}

func (i *Schedule) ToScheduleOutput() ScheduleOutput {
	return i.ToScheduleOutputWithContext(context.Background())
}

func (i *Schedule) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleOutput)
}

// ScheduleArrayInput is an input type that accepts ScheduleArray and ScheduleArrayOutput values.
// You can construct a concrete instance of `ScheduleArrayInput` via:
//
//	ScheduleArray{ ScheduleArgs{...} }
type ScheduleArrayInput interface {
	pulumi.Input

	ToScheduleArrayOutput() ScheduleArrayOutput
	ToScheduleArrayOutputWithContext(context.Context) ScheduleArrayOutput
}

type ScheduleArray []ScheduleInput

func (ScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Schedule)(nil)).Elem()
}

func (i ScheduleArray) ToScheduleArrayOutput() ScheduleArrayOutput {
	return i.ToScheduleArrayOutputWithContext(context.Background())
}

func (i ScheduleArray) ToScheduleArrayOutputWithContext(ctx context.Context) ScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleArrayOutput)
}

// ScheduleMapInput is an input type that accepts ScheduleMap and ScheduleMapOutput values.
// You can construct a concrete instance of `ScheduleMapInput` via:
//
//	ScheduleMap{ "key": ScheduleArgs{...} }
type ScheduleMapInput interface {
	pulumi.Input

	ToScheduleMapOutput() ScheduleMapOutput
	ToScheduleMapOutputWithContext(context.Context) ScheduleMapOutput
}

type ScheduleMap map[string]ScheduleInput

func (ScheduleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Schedule)(nil)).Elem()
}

func (i ScheduleMap) ToScheduleMapOutput() ScheduleMapOutput {
	return i.ToScheduleMapOutputWithContext(context.Background())
}

func (i ScheduleMap) ToScheduleMapOutputWithContext(ctx context.Context) ScheduleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleMapOutput)
}

type ScheduleOutput struct{ *pulumi.OutputState }

func (ScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Schedule)(nil)).Elem()
}

func (o ScheduleOutput) ToScheduleOutput() ScheduleOutput {
	return o
}

func (o ScheduleOutput) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return o
}

// The resource ID of the Lab Service Schedule. Changing this forces a new resource to be created.
func (o ScheduleOutput) LabId() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.LabId }).(pulumi.StringOutput)
}

// The name which should be used for this Lab Service Schedule. Changing this forces a new resource to be created.
func (o ScheduleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The notes for the Schedule.
func (o ScheduleOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringPtrOutput { return v.Notes }).(pulumi.StringPtrOutput)
}

// A `recurrence` block as defined below.
func (o ScheduleOutput) Recurrence() ScheduleRecurrencePtrOutput {
	return o.ApplyT(func(v *Schedule) ScheduleRecurrencePtrOutput { return v.Recurrence }).(ScheduleRecurrencePtrOutput)
}

// When Lab User Virtual Machines will be started in RFC-3339 format.
func (o ScheduleOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringPtrOutput { return v.StartTime }).(pulumi.StringPtrOutput)
}

// When Lab User Virtual Machines will be stopped in RFC-3339 format.
func (o ScheduleOutput) StopTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.StopTime }).(pulumi.StringOutput)
}

// The IANA Time Zone ID for the Schedule.
func (o ScheduleOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.TimeZone }).(pulumi.StringOutput)
}

type ScheduleArrayOutput struct{ *pulumi.OutputState }

func (ScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Schedule)(nil)).Elem()
}

func (o ScheduleArrayOutput) ToScheduleArrayOutput() ScheduleArrayOutput {
	return o
}

func (o ScheduleArrayOutput) ToScheduleArrayOutputWithContext(ctx context.Context) ScheduleArrayOutput {
	return o
}

func (o ScheduleArrayOutput) Index(i pulumi.IntInput) ScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Schedule {
		return vs[0].([]*Schedule)[vs[1].(int)]
	}).(ScheduleOutput)
}

type ScheduleMapOutput struct{ *pulumi.OutputState }

func (ScheduleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Schedule)(nil)).Elem()
}

func (o ScheduleMapOutput) ToScheduleMapOutput() ScheduleMapOutput {
	return o
}

func (o ScheduleMapOutput) ToScheduleMapOutputWithContext(ctx context.Context) ScheduleMapOutput {
	return o
}

func (o ScheduleMapOutput) MapIndex(k pulumi.StringInput) ScheduleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Schedule {
		return vs[0].(map[string]*Schedule)[vs[1].(string)]
	}).(ScheduleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleInput)(nil)).Elem(), &Schedule{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleArrayInput)(nil)).Elem(), ScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleMapInput)(nil)).Elem(), ScheduleMap{})
	pulumi.RegisterOutputType(ScheduleOutput{})
	pulumi.RegisterOutputType(ScheduleArrayOutput{})
	pulumi.RegisterOutputType(ScheduleMapOutput{})
}
