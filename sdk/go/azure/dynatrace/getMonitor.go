// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Dynatrace Monitor.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/dynatrace"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dynatrace.LookupMonitor(ctx, &dynatrace.LookupMonitorArgs{
//				Name:              "example-dynatracemonitor",
//				ResourceGroupName: "example-resources",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This data source uses the following Azure API Providers:
//
// * `Dynatrace.Observability`: 2023-04-27
func LookupMonitor(ctx *pulumi.Context, args *LookupMonitorArgs, opts ...pulumi.InvokeOption) (*LookupMonitorResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMonitorResult
	err := ctx.Invoke("azure:dynatrace/getMonitor:getMonitor", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMonitor.
type LookupMonitorArgs struct {
	// Name of the Dynatrace monitor.
	Name string `pulumi:"name"`
	// The name of the Resource Group where the Dynatrace monitor should exist.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getMonitor.
type LookupMonitorResult struct {
	EnvironmentProperties []GetMonitorEnvironmentProperty `pulumi:"environmentProperties"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The kind of managed identity assigned to this resource.  A `identity` block as defined below.
	Identities []GetMonitorIdentity `pulumi:"identities"`
	// The Azure Region where the Dynatrace monitor should exist.
	Location string `pulumi:"location"`
	// Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state.
	MarketplaceSubscription string `pulumi:"marketplaceSubscription"`
	// Flag specifying if the resource monitoring is enabled or disabled.
	MonitoringEnabled bool   `pulumi:"monitoringEnabled"`
	Name              string `pulumi:"name"`
	// Plan id as published by Dynatrace.
	Plans             []GetMonitorPlan `pulumi:"plans"`
	ResourceGroupName string           `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// User's information. A `user` block as defined below.
	Users []GetMonitorUser `pulumi:"users"`
}

func LookupMonitorOutput(ctx *pulumi.Context, args LookupMonitorOutputArgs, opts ...pulumi.InvokeOption) LookupMonitorResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupMonitorResultOutput, error) {
			args := v.(LookupMonitorArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure:dynatrace/getMonitor:getMonitor", args, LookupMonitorResultOutput{}, options).(LookupMonitorResultOutput), nil
		}).(LookupMonitorResultOutput)
}

// A collection of arguments for invoking getMonitor.
type LookupMonitorOutputArgs struct {
	// Name of the Dynatrace monitor.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Resource Group where the Dynatrace monitor should exist.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupMonitorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMonitorArgs)(nil)).Elem()
}

// A collection of values returned by getMonitor.
type LookupMonitorResultOutput struct{ *pulumi.OutputState }

func (LookupMonitorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMonitorResult)(nil)).Elem()
}

func (o LookupMonitorResultOutput) ToLookupMonitorResultOutput() LookupMonitorResultOutput {
	return o
}

func (o LookupMonitorResultOutput) ToLookupMonitorResultOutputWithContext(ctx context.Context) LookupMonitorResultOutput {
	return o
}

func (o LookupMonitorResultOutput) EnvironmentProperties() GetMonitorEnvironmentPropertyArrayOutput {
	return o.ApplyT(func(v LookupMonitorResult) []GetMonitorEnvironmentProperty { return v.EnvironmentProperties }).(GetMonitorEnvironmentPropertyArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupMonitorResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMonitorResult) string { return v.Id }).(pulumi.StringOutput)
}

// The kind of managed identity assigned to this resource.  A `identity` block as defined below.
func (o LookupMonitorResultOutput) Identities() GetMonitorIdentityArrayOutput {
	return o.ApplyT(func(v LookupMonitorResult) []GetMonitorIdentity { return v.Identities }).(GetMonitorIdentityArrayOutput)
}

// The Azure Region where the Dynatrace monitor should exist.
func (o LookupMonitorResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMonitorResult) string { return v.Location }).(pulumi.StringOutput)
}

// Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state.
func (o LookupMonitorResultOutput) MarketplaceSubscription() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMonitorResult) string { return v.MarketplaceSubscription }).(pulumi.StringOutput)
}

// Flag specifying if the resource monitoring is enabled or disabled.
func (o LookupMonitorResultOutput) MonitoringEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupMonitorResult) bool { return v.MonitoringEnabled }).(pulumi.BoolOutput)
}

func (o LookupMonitorResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMonitorResult) string { return v.Name }).(pulumi.StringOutput)
}

// Plan id as published by Dynatrace.
func (o LookupMonitorResultOutput) Plans() GetMonitorPlanArrayOutput {
	return o.ApplyT(func(v LookupMonitorResult) []GetMonitorPlan { return v.Plans }).(GetMonitorPlanArrayOutput)
}

func (o LookupMonitorResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMonitorResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o LookupMonitorResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupMonitorResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// User's information. A `user` block as defined below.
func (o LookupMonitorResultOutput) Users() GetMonitorUserArrayOutput {
	return o.ApplyT(func(v LookupMonitorResult) []GetMonitorUser { return v.Users }).(GetMonitorUserArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMonitorResultOutput{})
}
