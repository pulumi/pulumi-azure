// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages Dynatrace tag rules.
//
// ## Import
//
// Dynatrace tag rules can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:dynatrace/tagRules:TagRules example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Dynatrace.Observability/monitors/monitor1/tagRules/tagRules1
// ```
type TagRules struct {
	pulumi.CustomResourceState

	// Set of rules for sending logs for the Monitor resource. A `logRule` block as defined below.
	LogRule TagRulesLogRulePtrOutput `pulumi:"logRule"`
	// Set of rules for sending metrics for the Monitor resource. A `metricRule` block as defined below.
	MetricRule TagRulesMetricRulePtrOutput `pulumi:"metricRule"`
	// Name of the Dynatrace monitor. Changing this forces a new resource to be created.
	MonitorId pulumi.StringOutput `pulumi:"monitorId"`
	// Name of the Dynatrace tag rules. Currently, the only supported value is `default`. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewTagRules registers a new resource with the given unique name, arguments, and options.
func NewTagRules(ctx *pulumi.Context,
	name string, args *TagRulesArgs, opts ...pulumi.ResourceOption) (*TagRules, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MonitorId == nil {
		return nil, errors.New("invalid value for required argument 'MonitorId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TagRules
	err := ctx.RegisterResource("azure:dynatrace/tagRules:TagRules", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTagRules gets an existing TagRules resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTagRules(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TagRulesState, opts ...pulumi.ResourceOption) (*TagRules, error) {
	var resource TagRules
	err := ctx.ReadResource("azure:dynatrace/tagRules:TagRules", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TagRules resources.
type tagRulesState struct {
	// Set of rules for sending logs for the Monitor resource. A `logRule` block as defined below.
	LogRule *TagRulesLogRule `pulumi:"logRule"`
	// Set of rules for sending metrics for the Monitor resource. A `metricRule` block as defined below.
	MetricRule *TagRulesMetricRule `pulumi:"metricRule"`
	// Name of the Dynatrace monitor. Changing this forces a new resource to be created.
	MonitorId *string `pulumi:"monitorId"`
	// Name of the Dynatrace tag rules. Currently, the only supported value is `default`. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
}

type TagRulesState struct {
	// Set of rules for sending logs for the Monitor resource. A `logRule` block as defined below.
	LogRule TagRulesLogRulePtrInput
	// Set of rules for sending metrics for the Monitor resource. A `metricRule` block as defined below.
	MetricRule TagRulesMetricRulePtrInput
	// Name of the Dynatrace monitor. Changing this forces a new resource to be created.
	MonitorId pulumi.StringPtrInput
	// Name of the Dynatrace tag rules. Currently, the only supported value is `default`. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
}

func (TagRulesState) ElementType() reflect.Type {
	return reflect.TypeOf((*tagRulesState)(nil)).Elem()
}

type tagRulesArgs struct {
	// Set of rules for sending logs for the Monitor resource. A `logRule` block as defined below.
	LogRule *TagRulesLogRule `pulumi:"logRule"`
	// Set of rules for sending metrics for the Monitor resource. A `metricRule` block as defined below.
	MetricRule *TagRulesMetricRule `pulumi:"metricRule"`
	// Name of the Dynatrace monitor. Changing this forces a new resource to be created.
	MonitorId string `pulumi:"monitorId"`
	// Name of the Dynatrace tag rules. Currently, the only supported value is `default`. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a TagRules resource.
type TagRulesArgs struct {
	// Set of rules for sending logs for the Monitor resource. A `logRule` block as defined below.
	LogRule TagRulesLogRulePtrInput
	// Set of rules for sending metrics for the Monitor resource. A `metricRule` block as defined below.
	MetricRule TagRulesMetricRulePtrInput
	// Name of the Dynatrace monitor. Changing this forces a new resource to be created.
	MonitorId pulumi.StringInput
	// Name of the Dynatrace tag rules. Currently, the only supported value is `default`. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
}

func (TagRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tagRulesArgs)(nil)).Elem()
}

type TagRulesInput interface {
	pulumi.Input

	ToTagRulesOutput() TagRulesOutput
	ToTagRulesOutputWithContext(ctx context.Context) TagRulesOutput
}

func (*TagRules) ElementType() reflect.Type {
	return reflect.TypeOf((**TagRules)(nil)).Elem()
}

func (i *TagRules) ToTagRulesOutput() TagRulesOutput {
	return i.ToTagRulesOutputWithContext(context.Background())
}

func (i *TagRules) ToTagRulesOutputWithContext(ctx context.Context) TagRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagRulesOutput)
}

// TagRulesArrayInput is an input type that accepts TagRulesArray and TagRulesArrayOutput values.
// You can construct a concrete instance of `TagRulesArrayInput` via:
//
//	TagRulesArray{ TagRulesArgs{...} }
type TagRulesArrayInput interface {
	pulumi.Input

	ToTagRulesArrayOutput() TagRulesArrayOutput
	ToTagRulesArrayOutputWithContext(context.Context) TagRulesArrayOutput
}

type TagRulesArray []TagRulesInput

func (TagRulesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TagRules)(nil)).Elem()
}

func (i TagRulesArray) ToTagRulesArrayOutput() TagRulesArrayOutput {
	return i.ToTagRulesArrayOutputWithContext(context.Background())
}

func (i TagRulesArray) ToTagRulesArrayOutputWithContext(ctx context.Context) TagRulesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagRulesArrayOutput)
}

// TagRulesMapInput is an input type that accepts TagRulesMap and TagRulesMapOutput values.
// You can construct a concrete instance of `TagRulesMapInput` via:
//
//	TagRulesMap{ "key": TagRulesArgs{...} }
type TagRulesMapInput interface {
	pulumi.Input

	ToTagRulesMapOutput() TagRulesMapOutput
	ToTagRulesMapOutputWithContext(context.Context) TagRulesMapOutput
}

type TagRulesMap map[string]TagRulesInput

func (TagRulesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TagRules)(nil)).Elem()
}

func (i TagRulesMap) ToTagRulesMapOutput() TagRulesMapOutput {
	return i.ToTagRulesMapOutputWithContext(context.Background())
}

func (i TagRulesMap) ToTagRulesMapOutputWithContext(ctx context.Context) TagRulesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagRulesMapOutput)
}

type TagRulesOutput struct{ *pulumi.OutputState }

func (TagRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TagRules)(nil)).Elem()
}

func (o TagRulesOutput) ToTagRulesOutput() TagRulesOutput {
	return o
}

func (o TagRulesOutput) ToTagRulesOutputWithContext(ctx context.Context) TagRulesOutput {
	return o
}

// Set of rules for sending logs for the Monitor resource. A `logRule` block as defined below.
func (o TagRulesOutput) LogRule() TagRulesLogRulePtrOutput {
	return o.ApplyT(func(v *TagRules) TagRulesLogRulePtrOutput { return v.LogRule }).(TagRulesLogRulePtrOutput)
}

// Set of rules for sending metrics for the Monitor resource. A `metricRule` block as defined below.
func (o TagRulesOutput) MetricRule() TagRulesMetricRulePtrOutput {
	return o.ApplyT(func(v *TagRules) TagRulesMetricRulePtrOutput { return v.MetricRule }).(TagRulesMetricRulePtrOutput)
}

// Name of the Dynatrace monitor. Changing this forces a new resource to be created.
func (o TagRulesOutput) MonitorId() pulumi.StringOutput {
	return o.ApplyT(func(v *TagRules) pulumi.StringOutput { return v.MonitorId }).(pulumi.StringOutput)
}

// Name of the Dynatrace tag rules. Currently, the only supported value is `default`. Changing this forces a new resource to be created.
func (o TagRulesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TagRules) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type TagRulesArrayOutput struct{ *pulumi.OutputState }

func (TagRulesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TagRules)(nil)).Elem()
}

func (o TagRulesArrayOutput) ToTagRulesArrayOutput() TagRulesArrayOutput {
	return o
}

func (o TagRulesArrayOutput) ToTagRulesArrayOutputWithContext(ctx context.Context) TagRulesArrayOutput {
	return o
}

func (o TagRulesArrayOutput) Index(i pulumi.IntInput) TagRulesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TagRules {
		return vs[0].([]*TagRules)[vs[1].(int)]
	}).(TagRulesOutput)
}

type TagRulesMapOutput struct{ *pulumi.OutputState }

func (TagRulesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TagRules)(nil)).Elem()
}

func (o TagRulesMapOutput) ToTagRulesMapOutput() TagRulesMapOutput {
	return o
}

func (o TagRulesMapOutput) ToTagRulesMapOutputWithContext(ctx context.Context) TagRulesMapOutput {
	return o
}

func (o TagRulesMapOutput) MapIndex(k pulumi.StringInput) TagRulesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TagRules {
		return vs[0].(map[string]*TagRules)[vs[1].(string)]
	}).(TagRulesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TagRulesInput)(nil)).Elem(), &TagRules{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagRulesArrayInput)(nil)).Elem(), TagRulesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagRulesMapInput)(nil)).Elem(), TagRulesMap{})
	pulumi.RegisterOutputType(TagRulesOutput{})
	pulumi.RegisterOutputType(TagRulesArrayOutput{})
	pulumi.RegisterOutputType(TagRulesMapOutput{})
}
