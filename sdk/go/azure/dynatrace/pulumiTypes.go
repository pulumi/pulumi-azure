// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type MonitorIdentity struct {
	PrincipalId *string `pulumi:"principalId"`
	TenantId    *string `pulumi:"tenantId"`
	// The type of identity used for the resource. Only possible value is `SystemAssigned`.
	Type string `pulumi:"type"`
}

// MonitorIdentityInput is an input type that accepts MonitorIdentityArgs and MonitorIdentityOutput values.
// You can construct a concrete instance of `MonitorIdentityInput` via:
//
//	MonitorIdentityArgs{...}
type MonitorIdentityInput interface {
	pulumi.Input

	ToMonitorIdentityOutput() MonitorIdentityOutput
	ToMonitorIdentityOutputWithContext(context.Context) MonitorIdentityOutput
}

type MonitorIdentityArgs struct {
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	TenantId    pulumi.StringPtrInput `pulumi:"tenantId"`
	// The type of identity used for the resource. Only possible value is `SystemAssigned`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MonitorIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorIdentity)(nil)).Elem()
}

func (i MonitorIdentityArgs) ToMonitorIdentityOutput() MonitorIdentityOutput {
	return i.ToMonitorIdentityOutputWithContext(context.Background())
}

func (i MonitorIdentityArgs) ToMonitorIdentityOutputWithContext(ctx context.Context) MonitorIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorIdentityOutput)
}

func (i MonitorIdentityArgs) ToMonitorIdentityPtrOutput() MonitorIdentityPtrOutput {
	return i.ToMonitorIdentityPtrOutputWithContext(context.Background())
}

func (i MonitorIdentityArgs) ToMonitorIdentityPtrOutputWithContext(ctx context.Context) MonitorIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorIdentityOutput).ToMonitorIdentityPtrOutputWithContext(ctx)
}

// MonitorIdentityPtrInput is an input type that accepts MonitorIdentityArgs, MonitorIdentityPtr and MonitorIdentityPtrOutput values.
// You can construct a concrete instance of `MonitorIdentityPtrInput` via:
//
//	        MonitorIdentityArgs{...}
//
//	or:
//
//	        nil
type MonitorIdentityPtrInput interface {
	pulumi.Input

	ToMonitorIdentityPtrOutput() MonitorIdentityPtrOutput
	ToMonitorIdentityPtrOutputWithContext(context.Context) MonitorIdentityPtrOutput
}

type monitorIdentityPtrType MonitorIdentityArgs

func MonitorIdentityPtr(v *MonitorIdentityArgs) MonitorIdentityPtrInput {
	return (*monitorIdentityPtrType)(v)
}

func (*monitorIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorIdentity)(nil)).Elem()
}

func (i *monitorIdentityPtrType) ToMonitorIdentityPtrOutput() MonitorIdentityPtrOutput {
	return i.ToMonitorIdentityPtrOutputWithContext(context.Background())
}

func (i *monitorIdentityPtrType) ToMonitorIdentityPtrOutputWithContext(ctx context.Context) MonitorIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorIdentityPtrOutput)
}

type MonitorIdentityOutput struct{ *pulumi.OutputState }

func (MonitorIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorIdentity)(nil)).Elem()
}

func (o MonitorIdentityOutput) ToMonitorIdentityOutput() MonitorIdentityOutput {
	return o
}

func (o MonitorIdentityOutput) ToMonitorIdentityOutputWithContext(ctx context.Context) MonitorIdentityOutput {
	return o
}

func (o MonitorIdentityOutput) ToMonitorIdentityPtrOutput() MonitorIdentityPtrOutput {
	return o.ToMonitorIdentityPtrOutputWithContext(context.Background())
}

func (o MonitorIdentityOutput) ToMonitorIdentityPtrOutputWithContext(ctx context.Context) MonitorIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorIdentity) *MonitorIdentity {
		return &v
	}).(MonitorIdentityPtrOutput)
}

func (o MonitorIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

func (o MonitorIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The type of identity used for the resource. Only possible value is `SystemAssigned`.
func (o MonitorIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type MonitorIdentityPtrOutput struct{ *pulumi.OutputState }

func (MonitorIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorIdentity)(nil)).Elem()
}

func (o MonitorIdentityPtrOutput) ToMonitorIdentityPtrOutput() MonitorIdentityPtrOutput {
	return o
}

func (o MonitorIdentityPtrOutput) ToMonitorIdentityPtrOutputWithContext(ctx context.Context) MonitorIdentityPtrOutput {
	return o
}

func (o MonitorIdentityPtrOutput) Elem() MonitorIdentityOutput {
	return o.ApplyT(func(v *MonitorIdentity) MonitorIdentity {
		if v != nil {
			return *v
		}
		var ret MonitorIdentity
		return ret
	}).(MonitorIdentityOutput)
}

func (o MonitorIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

func (o MonitorIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The type of identity used for the resource. Only possible value is `SystemAssigned`.
func (o MonitorIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type MonitorPlan struct {
	// Different billing cycles. Possible values are `MONTHLY` and `WEEKLY`.
	BillingCycle *string `pulumi:"billingCycle"`
	// Date when plan was applied.
	EffectiveDate *string `pulumi:"effectiveDate"`
	// Plan id as published by Dynatrace.
	Plan string `pulumi:"plan"`
	// Different usage type. Possible values are `PAYG` and `COMMITTED`.
	UsageType *string `pulumi:"usageType"`
}

// MonitorPlanInput is an input type that accepts MonitorPlanArgs and MonitorPlanOutput values.
// You can construct a concrete instance of `MonitorPlanInput` via:
//
//	MonitorPlanArgs{...}
type MonitorPlanInput interface {
	pulumi.Input

	ToMonitorPlanOutput() MonitorPlanOutput
	ToMonitorPlanOutputWithContext(context.Context) MonitorPlanOutput
}

type MonitorPlanArgs struct {
	// Different billing cycles. Possible values are `MONTHLY` and `WEEKLY`.
	BillingCycle pulumi.StringPtrInput `pulumi:"billingCycle"`
	// Date when plan was applied.
	EffectiveDate pulumi.StringPtrInput `pulumi:"effectiveDate"`
	// Plan id as published by Dynatrace.
	Plan pulumi.StringInput `pulumi:"plan"`
	// Different usage type. Possible values are `PAYG` and `COMMITTED`.
	UsageType pulumi.StringPtrInput `pulumi:"usageType"`
}

func (MonitorPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorPlan)(nil)).Elem()
}

func (i MonitorPlanArgs) ToMonitorPlanOutput() MonitorPlanOutput {
	return i.ToMonitorPlanOutputWithContext(context.Background())
}

func (i MonitorPlanArgs) ToMonitorPlanOutputWithContext(ctx context.Context) MonitorPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorPlanOutput)
}

func (i MonitorPlanArgs) ToMonitorPlanPtrOutput() MonitorPlanPtrOutput {
	return i.ToMonitorPlanPtrOutputWithContext(context.Background())
}

func (i MonitorPlanArgs) ToMonitorPlanPtrOutputWithContext(ctx context.Context) MonitorPlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorPlanOutput).ToMonitorPlanPtrOutputWithContext(ctx)
}

// MonitorPlanPtrInput is an input type that accepts MonitorPlanArgs, MonitorPlanPtr and MonitorPlanPtrOutput values.
// You can construct a concrete instance of `MonitorPlanPtrInput` via:
//
//	        MonitorPlanArgs{...}
//
//	or:
//
//	        nil
type MonitorPlanPtrInput interface {
	pulumi.Input

	ToMonitorPlanPtrOutput() MonitorPlanPtrOutput
	ToMonitorPlanPtrOutputWithContext(context.Context) MonitorPlanPtrOutput
}

type monitorPlanPtrType MonitorPlanArgs

func MonitorPlanPtr(v *MonitorPlanArgs) MonitorPlanPtrInput {
	return (*monitorPlanPtrType)(v)
}

func (*monitorPlanPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorPlan)(nil)).Elem()
}

func (i *monitorPlanPtrType) ToMonitorPlanPtrOutput() MonitorPlanPtrOutput {
	return i.ToMonitorPlanPtrOutputWithContext(context.Background())
}

func (i *monitorPlanPtrType) ToMonitorPlanPtrOutputWithContext(ctx context.Context) MonitorPlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorPlanPtrOutput)
}

type MonitorPlanOutput struct{ *pulumi.OutputState }

func (MonitorPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorPlan)(nil)).Elem()
}

func (o MonitorPlanOutput) ToMonitorPlanOutput() MonitorPlanOutput {
	return o
}

func (o MonitorPlanOutput) ToMonitorPlanOutputWithContext(ctx context.Context) MonitorPlanOutput {
	return o
}

func (o MonitorPlanOutput) ToMonitorPlanPtrOutput() MonitorPlanPtrOutput {
	return o.ToMonitorPlanPtrOutputWithContext(context.Background())
}

func (o MonitorPlanOutput) ToMonitorPlanPtrOutputWithContext(ctx context.Context) MonitorPlanPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorPlan) *MonitorPlan {
		return &v
	}).(MonitorPlanPtrOutput)
}

// Different billing cycles. Possible values are `MONTHLY` and `WEEKLY`.
func (o MonitorPlanOutput) BillingCycle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorPlan) *string { return v.BillingCycle }).(pulumi.StringPtrOutput)
}

// Date when plan was applied.
func (o MonitorPlanOutput) EffectiveDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorPlan) *string { return v.EffectiveDate }).(pulumi.StringPtrOutput)
}

// Plan id as published by Dynatrace.
func (o MonitorPlanOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorPlan) string { return v.Plan }).(pulumi.StringOutput)
}

// Different usage type. Possible values are `PAYG` and `COMMITTED`.
func (o MonitorPlanOutput) UsageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorPlan) *string { return v.UsageType }).(pulumi.StringPtrOutput)
}

type MonitorPlanPtrOutput struct{ *pulumi.OutputState }

func (MonitorPlanPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorPlan)(nil)).Elem()
}

func (o MonitorPlanPtrOutput) ToMonitorPlanPtrOutput() MonitorPlanPtrOutput {
	return o
}

func (o MonitorPlanPtrOutput) ToMonitorPlanPtrOutputWithContext(ctx context.Context) MonitorPlanPtrOutput {
	return o
}

func (o MonitorPlanPtrOutput) Elem() MonitorPlanOutput {
	return o.ApplyT(func(v *MonitorPlan) MonitorPlan {
		if v != nil {
			return *v
		}
		var ret MonitorPlan
		return ret
	}).(MonitorPlanOutput)
}

// Different billing cycles. Possible values are `MONTHLY` and `WEEKLY`.
func (o MonitorPlanPtrOutput) BillingCycle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorPlan) *string {
		if v == nil {
			return nil
		}
		return v.BillingCycle
	}).(pulumi.StringPtrOutput)
}

// Date when plan was applied.
func (o MonitorPlanPtrOutput) EffectiveDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorPlan) *string {
		if v == nil {
			return nil
		}
		return v.EffectiveDate
	}).(pulumi.StringPtrOutput)
}

// Plan id as published by Dynatrace.
func (o MonitorPlanPtrOutput) Plan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorPlan) *string {
		if v == nil {
			return nil
		}
		return &v.Plan
	}).(pulumi.StringPtrOutput)
}

// Different usage type. Possible values are `PAYG` and `COMMITTED`.
func (o MonitorPlanPtrOutput) UsageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorPlan) *string {
		if v == nil {
			return nil
		}
		return v.UsageType
	}).(pulumi.StringPtrOutput)
}

type MonitorUser struct {
	// Country of the user.
	Country string `pulumi:"country"`
	// Email of the user used by Dynatrace for contacting them if needed.
	Email string `pulumi:"email"`
	// First name of the user.
	FirstName string `pulumi:"firstName"`
	// Last name of the user.
	LastName string `pulumi:"lastName"`
	// phone number of the user by Dynatrace for contacting them if needed.
	PhoneNumber string `pulumi:"phoneNumber"`
}

// MonitorUserInput is an input type that accepts MonitorUserArgs and MonitorUserOutput values.
// You can construct a concrete instance of `MonitorUserInput` via:
//
//	MonitorUserArgs{...}
type MonitorUserInput interface {
	pulumi.Input

	ToMonitorUserOutput() MonitorUserOutput
	ToMonitorUserOutputWithContext(context.Context) MonitorUserOutput
}

type MonitorUserArgs struct {
	// Country of the user.
	Country pulumi.StringInput `pulumi:"country"`
	// Email of the user used by Dynatrace for contacting them if needed.
	Email pulumi.StringInput `pulumi:"email"`
	// First name of the user.
	FirstName pulumi.StringInput `pulumi:"firstName"`
	// Last name of the user.
	LastName pulumi.StringInput `pulumi:"lastName"`
	// phone number of the user by Dynatrace for contacting them if needed.
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
}

func (MonitorUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorUser)(nil)).Elem()
}

func (i MonitorUserArgs) ToMonitorUserOutput() MonitorUserOutput {
	return i.ToMonitorUserOutputWithContext(context.Background())
}

func (i MonitorUserArgs) ToMonitorUserOutputWithContext(ctx context.Context) MonitorUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorUserOutput)
}

func (i MonitorUserArgs) ToMonitorUserPtrOutput() MonitorUserPtrOutput {
	return i.ToMonitorUserPtrOutputWithContext(context.Background())
}

func (i MonitorUserArgs) ToMonitorUserPtrOutputWithContext(ctx context.Context) MonitorUserPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorUserOutput).ToMonitorUserPtrOutputWithContext(ctx)
}

// MonitorUserPtrInput is an input type that accepts MonitorUserArgs, MonitorUserPtr and MonitorUserPtrOutput values.
// You can construct a concrete instance of `MonitorUserPtrInput` via:
//
//	        MonitorUserArgs{...}
//
//	or:
//
//	        nil
type MonitorUserPtrInput interface {
	pulumi.Input

	ToMonitorUserPtrOutput() MonitorUserPtrOutput
	ToMonitorUserPtrOutputWithContext(context.Context) MonitorUserPtrOutput
}

type monitorUserPtrType MonitorUserArgs

func MonitorUserPtr(v *MonitorUserArgs) MonitorUserPtrInput {
	return (*monitorUserPtrType)(v)
}

func (*monitorUserPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorUser)(nil)).Elem()
}

func (i *monitorUserPtrType) ToMonitorUserPtrOutput() MonitorUserPtrOutput {
	return i.ToMonitorUserPtrOutputWithContext(context.Background())
}

func (i *monitorUserPtrType) ToMonitorUserPtrOutputWithContext(ctx context.Context) MonitorUserPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorUserPtrOutput)
}

type MonitorUserOutput struct{ *pulumi.OutputState }

func (MonitorUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorUser)(nil)).Elem()
}

func (o MonitorUserOutput) ToMonitorUserOutput() MonitorUserOutput {
	return o
}

func (o MonitorUserOutput) ToMonitorUserOutputWithContext(ctx context.Context) MonitorUserOutput {
	return o
}

func (o MonitorUserOutput) ToMonitorUserPtrOutput() MonitorUserPtrOutput {
	return o.ToMonitorUserPtrOutputWithContext(context.Background())
}

func (o MonitorUserOutput) ToMonitorUserPtrOutputWithContext(ctx context.Context) MonitorUserPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorUser) *MonitorUser {
		return &v
	}).(MonitorUserPtrOutput)
}

// Country of the user.
func (o MonitorUserOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorUser) string { return v.Country }).(pulumi.StringOutput)
}

// Email of the user used by Dynatrace for contacting them if needed.
func (o MonitorUserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorUser) string { return v.Email }).(pulumi.StringOutput)
}

// First name of the user.
func (o MonitorUserOutput) FirstName() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorUser) string { return v.FirstName }).(pulumi.StringOutput)
}

// Last name of the user.
func (o MonitorUserOutput) LastName() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorUser) string { return v.LastName }).(pulumi.StringOutput)
}

// phone number of the user by Dynatrace for contacting them if needed.
func (o MonitorUserOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorUser) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

type MonitorUserPtrOutput struct{ *pulumi.OutputState }

func (MonitorUserPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorUser)(nil)).Elem()
}

func (o MonitorUserPtrOutput) ToMonitorUserPtrOutput() MonitorUserPtrOutput {
	return o
}

func (o MonitorUserPtrOutput) ToMonitorUserPtrOutputWithContext(ctx context.Context) MonitorUserPtrOutput {
	return o
}

func (o MonitorUserPtrOutput) Elem() MonitorUserOutput {
	return o.ApplyT(func(v *MonitorUser) MonitorUser {
		if v != nil {
			return *v
		}
		var ret MonitorUser
		return ret
	}).(MonitorUserOutput)
}

// Country of the user.
func (o MonitorUserPtrOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorUser) *string {
		if v == nil {
			return nil
		}
		return &v.Country
	}).(pulumi.StringPtrOutput)
}

// Email of the user used by Dynatrace for contacting them if needed.
func (o MonitorUserPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorUser) *string {
		if v == nil {
			return nil
		}
		return &v.Email
	}).(pulumi.StringPtrOutput)
}

// First name of the user.
func (o MonitorUserPtrOutput) FirstName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorUser) *string {
		if v == nil {
			return nil
		}
		return &v.FirstName
	}).(pulumi.StringPtrOutput)
}

// Last name of the user.
func (o MonitorUserPtrOutput) LastName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorUser) *string {
		if v == nil {
			return nil
		}
		return &v.LastName
	}).(pulumi.StringPtrOutput)
}

// phone number of the user by Dynatrace for contacting them if needed.
func (o MonitorUserPtrOutput) PhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorUser) *string {
		if v == nil {
			return nil
		}
		return &v.PhoneNumber
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorIdentityInput)(nil)).Elem(), MonitorIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorIdentityPtrInput)(nil)).Elem(), MonitorIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorPlanInput)(nil)).Elem(), MonitorPlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorPlanPtrInput)(nil)).Elem(), MonitorPlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorUserInput)(nil)).Elem(), MonitorUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorUserPtrInput)(nil)).Elem(), MonitorUserArgs{})
	pulumi.RegisterOutputType(MonitorIdentityOutput{})
	pulumi.RegisterOutputType(MonitorIdentityPtrOutput{})
	pulumi.RegisterOutputType(MonitorPlanOutput{})
	pulumi.RegisterOutputType(MonitorPlanPtrOutput{})
	pulumi.RegisterOutputType(MonitorUserOutput{})
	pulumi.RegisterOutputType(MonitorUserPtrOutput{})
}
