// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type MonitorIdentity struct {
	PrincipalId *string `pulumi:"principalId"`
	TenantId    *string `pulumi:"tenantId"`
	// The type of identity used for the resource. Only possible value is `SystemAssigned`.
	Type string `pulumi:"type"`
}

// MonitorIdentityInput is an input type that accepts MonitorIdentityArgs and MonitorIdentityOutput values.
// You can construct a concrete instance of `MonitorIdentityInput` via:
//
//	MonitorIdentityArgs{...}
type MonitorIdentityInput interface {
	pulumi.Input

	ToMonitorIdentityOutput() MonitorIdentityOutput
	ToMonitorIdentityOutputWithContext(context.Context) MonitorIdentityOutput
}

type MonitorIdentityArgs struct {
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	TenantId    pulumi.StringPtrInput `pulumi:"tenantId"`
	// The type of identity used for the resource. Only possible value is `SystemAssigned`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MonitorIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorIdentity)(nil)).Elem()
}

func (i MonitorIdentityArgs) ToMonitorIdentityOutput() MonitorIdentityOutput {
	return i.ToMonitorIdentityOutputWithContext(context.Background())
}

func (i MonitorIdentityArgs) ToMonitorIdentityOutputWithContext(ctx context.Context) MonitorIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorIdentityOutput)
}

func (i MonitorIdentityArgs) ToMonitorIdentityPtrOutput() MonitorIdentityPtrOutput {
	return i.ToMonitorIdentityPtrOutputWithContext(context.Background())
}

func (i MonitorIdentityArgs) ToMonitorIdentityPtrOutputWithContext(ctx context.Context) MonitorIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorIdentityOutput).ToMonitorIdentityPtrOutputWithContext(ctx)
}

// MonitorIdentityPtrInput is an input type that accepts MonitorIdentityArgs, MonitorIdentityPtr and MonitorIdentityPtrOutput values.
// You can construct a concrete instance of `MonitorIdentityPtrInput` via:
//
//	        MonitorIdentityArgs{...}
//
//	or:
//
//	        nil
type MonitorIdentityPtrInput interface {
	pulumi.Input

	ToMonitorIdentityPtrOutput() MonitorIdentityPtrOutput
	ToMonitorIdentityPtrOutputWithContext(context.Context) MonitorIdentityPtrOutput
}

type monitorIdentityPtrType MonitorIdentityArgs

func MonitorIdentityPtr(v *MonitorIdentityArgs) MonitorIdentityPtrInput {
	return (*monitorIdentityPtrType)(v)
}

func (*monitorIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorIdentity)(nil)).Elem()
}

func (i *monitorIdentityPtrType) ToMonitorIdentityPtrOutput() MonitorIdentityPtrOutput {
	return i.ToMonitorIdentityPtrOutputWithContext(context.Background())
}

func (i *monitorIdentityPtrType) ToMonitorIdentityPtrOutputWithContext(ctx context.Context) MonitorIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorIdentityPtrOutput)
}

type MonitorIdentityOutput struct{ *pulumi.OutputState }

func (MonitorIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorIdentity)(nil)).Elem()
}

func (o MonitorIdentityOutput) ToMonitorIdentityOutput() MonitorIdentityOutput {
	return o
}

func (o MonitorIdentityOutput) ToMonitorIdentityOutputWithContext(ctx context.Context) MonitorIdentityOutput {
	return o
}

func (o MonitorIdentityOutput) ToMonitorIdentityPtrOutput() MonitorIdentityPtrOutput {
	return o.ToMonitorIdentityPtrOutputWithContext(context.Background())
}

func (o MonitorIdentityOutput) ToMonitorIdentityPtrOutputWithContext(ctx context.Context) MonitorIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorIdentity) *MonitorIdentity {
		return &v
	}).(MonitorIdentityPtrOutput)
}

func (o MonitorIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

func (o MonitorIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The type of identity used for the resource. Only possible value is `SystemAssigned`.
func (o MonitorIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type MonitorIdentityPtrOutput struct{ *pulumi.OutputState }

func (MonitorIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorIdentity)(nil)).Elem()
}

func (o MonitorIdentityPtrOutput) ToMonitorIdentityPtrOutput() MonitorIdentityPtrOutput {
	return o
}

func (o MonitorIdentityPtrOutput) ToMonitorIdentityPtrOutputWithContext(ctx context.Context) MonitorIdentityPtrOutput {
	return o
}

func (o MonitorIdentityPtrOutput) Elem() MonitorIdentityOutput {
	return o.ApplyT(func(v *MonitorIdentity) MonitorIdentity {
		if v != nil {
			return *v
		}
		var ret MonitorIdentity
		return ret
	}).(MonitorIdentityOutput)
}

func (o MonitorIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

func (o MonitorIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The type of identity used for the resource. Only possible value is `SystemAssigned`.
func (o MonitorIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type MonitorPlan struct {
	// Different billing cycles. Possible values are `MONTHLY` and `WEEKLY`.
	BillingCycle *string `pulumi:"billingCycle"`
	// Date when plan was applied.
	EffectiveDate *string `pulumi:"effectiveDate"`
	// Plan id as published by Dynatrace.
	Plan string `pulumi:"plan"`
	// Different usage type. Possible values are `PAYG` and `COMMITTED`.
	UsageType *string `pulumi:"usageType"`
}

// MonitorPlanInput is an input type that accepts MonitorPlanArgs and MonitorPlanOutput values.
// You can construct a concrete instance of `MonitorPlanInput` via:
//
//	MonitorPlanArgs{...}
type MonitorPlanInput interface {
	pulumi.Input

	ToMonitorPlanOutput() MonitorPlanOutput
	ToMonitorPlanOutputWithContext(context.Context) MonitorPlanOutput
}

type MonitorPlanArgs struct {
	// Different billing cycles. Possible values are `MONTHLY` and `WEEKLY`.
	BillingCycle pulumi.StringPtrInput `pulumi:"billingCycle"`
	// Date when plan was applied.
	EffectiveDate pulumi.StringPtrInput `pulumi:"effectiveDate"`
	// Plan id as published by Dynatrace.
	Plan pulumi.StringInput `pulumi:"plan"`
	// Different usage type. Possible values are `PAYG` and `COMMITTED`.
	UsageType pulumi.StringPtrInput `pulumi:"usageType"`
}

func (MonitorPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorPlan)(nil)).Elem()
}

func (i MonitorPlanArgs) ToMonitorPlanOutput() MonitorPlanOutput {
	return i.ToMonitorPlanOutputWithContext(context.Background())
}

func (i MonitorPlanArgs) ToMonitorPlanOutputWithContext(ctx context.Context) MonitorPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorPlanOutput)
}

func (i MonitorPlanArgs) ToMonitorPlanPtrOutput() MonitorPlanPtrOutput {
	return i.ToMonitorPlanPtrOutputWithContext(context.Background())
}

func (i MonitorPlanArgs) ToMonitorPlanPtrOutputWithContext(ctx context.Context) MonitorPlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorPlanOutput).ToMonitorPlanPtrOutputWithContext(ctx)
}

// MonitorPlanPtrInput is an input type that accepts MonitorPlanArgs, MonitorPlanPtr and MonitorPlanPtrOutput values.
// You can construct a concrete instance of `MonitorPlanPtrInput` via:
//
//	        MonitorPlanArgs{...}
//
//	or:
//
//	        nil
type MonitorPlanPtrInput interface {
	pulumi.Input

	ToMonitorPlanPtrOutput() MonitorPlanPtrOutput
	ToMonitorPlanPtrOutputWithContext(context.Context) MonitorPlanPtrOutput
}

type monitorPlanPtrType MonitorPlanArgs

func MonitorPlanPtr(v *MonitorPlanArgs) MonitorPlanPtrInput {
	return (*monitorPlanPtrType)(v)
}

func (*monitorPlanPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorPlan)(nil)).Elem()
}

func (i *monitorPlanPtrType) ToMonitorPlanPtrOutput() MonitorPlanPtrOutput {
	return i.ToMonitorPlanPtrOutputWithContext(context.Background())
}

func (i *monitorPlanPtrType) ToMonitorPlanPtrOutputWithContext(ctx context.Context) MonitorPlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorPlanPtrOutput)
}

type MonitorPlanOutput struct{ *pulumi.OutputState }

func (MonitorPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorPlan)(nil)).Elem()
}

func (o MonitorPlanOutput) ToMonitorPlanOutput() MonitorPlanOutput {
	return o
}

func (o MonitorPlanOutput) ToMonitorPlanOutputWithContext(ctx context.Context) MonitorPlanOutput {
	return o
}

func (o MonitorPlanOutput) ToMonitorPlanPtrOutput() MonitorPlanPtrOutput {
	return o.ToMonitorPlanPtrOutputWithContext(context.Background())
}

func (o MonitorPlanOutput) ToMonitorPlanPtrOutputWithContext(ctx context.Context) MonitorPlanPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorPlan) *MonitorPlan {
		return &v
	}).(MonitorPlanPtrOutput)
}

// Different billing cycles. Possible values are `MONTHLY` and `WEEKLY`.
func (o MonitorPlanOutput) BillingCycle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorPlan) *string { return v.BillingCycle }).(pulumi.StringPtrOutput)
}

// Date when plan was applied.
func (o MonitorPlanOutput) EffectiveDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorPlan) *string { return v.EffectiveDate }).(pulumi.StringPtrOutput)
}

// Plan id as published by Dynatrace.
func (o MonitorPlanOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorPlan) string { return v.Plan }).(pulumi.StringOutput)
}

// Different usage type. Possible values are `PAYG` and `COMMITTED`.
func (o MonitorPlanOutput) UsageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorPlan) *string { return v.UsageType }).(pulumi.StringPtrOutput)
}

type MonitorPlanPtrOutput struct{ *pulumi.OutputState }

func (MonitorPlanPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorPlan)(nil)).Elem()
}

func (o MonitorPlanPtrOutput) ToMonitorPlanPtrOutput() MonitorPlanPtrOutput {
	return o
}

func (o MonitorPlanPtrOutput) ToMonitorPlanPtrOutputWithContext(ctx context.Context) MonitorPlanPtrOutput {
	return o
}

func (o MonitorPlanPtrOutput) Elem() MonitorPlanOutput {
	return o.ApplyT(func(v *MonitorPlan) MonitorPlan {
		if v != nil {
			return *v
		}
		var ret MonitorPlan
		return ret
	}).(MonitorPlanOutput)
}

// Different billing cycles. Possible values are `MONTHLY` and `WEEKLY`.
func (o MonitorPlanPtrOutput) BillingCycle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorPlan) *string {
		if v == nil {
			return nil
		}
		return v.BillingCycle
	}).(pulumi.StringPtrOutput)
}

// Date when plan was applied.
func (o MonitorPlanPtrOutput) EffectiveDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorPlan) *string {
		if v == nil {
			return nil
		}
		return v.EffectiveDate
	}).(pulumi.StringPtrOutput)
}

// Plan id as published by Dynatrace.
func (o MonitorPlanPtrOutput) Plan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorPlan) *string {
		if v == nil {
			return nil
		}
		return &v.Plan
	}).(pulumi.StringPtrOutput)
}

// Different usage type. Possible values are `PAYG` and `COMMITTED`.
func (o MonitorPlanPtrOutput) UsageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorPlan) *string {
		if v == nil {
			return nil
		}
		return v.UsageType
	}).(pulumi.StringPtrOutput)
}

type MonitorUser struct {
	// Country of the user.
	Country string `pulumi:"country"`
	// Email of the user used by Dynatrace for contacting them if needed.
	Email string `pulumi:"email"`
	// First name of the user.
	FirstName string `pulumi:"firstName"`
	// Last name of the user.
	LastName string `pulumi:"lastName"`
	// phone number of the user by Dynatrace for contacting them if needed.
	PhoneNumber string `pulumi:"phoneNumber"`
}

// MonitorUserInput is an input type that accepts MonitorUserArgs and MonitorUserOutput values.
// You can construct a concrete instance of `MonitorUserInput` via:
//
//	MonitorUserArgs{...}
type MonitorUserInput interface {
	pulumi.Input

	ToMonitorUserOutput() MonitorUserOutput
	ToMonitorUserOutputWithContext(context.Context) MonitorUserOutput
}

type MonitorUserArgs struct {
	// Country of the user.
	Country pulumi.StringInput `pulumi:"country"`
	// Email of the user used by Dynatrace for contacting them if needed.
	Email pulumi.StringInput `pulumi:"email"`
	// First name of the user.
	FirstName pulumi.StringInput `pulumi:"firstName"`
	// Last name of the user.
	LastName pulumi.StringInput `pulumi:"lastName"`
	// phone number of the user by Dynatrace for contacting them if needed.
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
}

func (MonitorUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorUser)(nil)).Elem()
}

func (i MonitorUserArgs) ToMonitorUserOutput() MonitorUserOutput {
	return i.ToMonitorUserOutputWithContext(context.Background())
}

func (i MonitorUserArgs) ToMonitorUserOutputWithContext(ctx context.Context) MonitorUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorUserOutput)
}

func (i MonitorUserArgs) ToMonitorUserPtrOutput() MonitorUserPtrOutput {
	return i.ToMonitorUserPtrOutputWithContext(context.Background())
}

func (i MonitorUserArgs) ToMonitorUserPtrOutputWithContext(ctx context.Context) MonitorUserPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorUserOutput).ToMonitorUserPtrOutputWithContext(ctx)
}

// MonitorUserPtrInput is an input type that accepts MonitorUserArgs, MonitorUserPtr and MonitorUserPtrOutput values.
// You can construct a concrete instance of `MonitorUserPtrInput` via:
//
//	        MonitorUserArgs{...}
//
//	or:
//
//	        nil
type MonitorUserPtrInput interface {
	pulumi.Input

	ToMonitorUserPtrOutput() MonitorUserPtrOutput
	ToMonitorUserPtrOutputWithContext(context.Context) MonitorUserPtrOutput
}

type monitorUserPtrType MonitorUserArgs

func MonitorUserPtr(v *MonitorUserArgs) MonitorUserPtrInput {
	return (*monitorUserPtrType)(v)
}

func (*monitorUserPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorUser)(nil)).Elem()
}

func (i *monitorUserPtrType) ToMonitorUserPtrOutput() MonitorUserPtrOutput {
	return i.ToMonitorUserPtrOutputWithContext(context.Background())
}

func (i *monitorUserPtrType) ToMonitorUserPtrOutputWithContext(ctx context.Context) MonitorUserPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorUserPtrOutput)
}

type MonitorUserOutput struct{ *pulumi.OutputState }

func (MonitorUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorUser)(nil)).Elem()
}

func (o MonitorUserOutput) ToMonitorUserOutput() MonitorUserOutput {
	return o
}

func (o MonitorUserOutput) ToMonitorUserOutputWithContext(ctx context.Context) MonitorUserOutput {
	return o
}

func (o MonitorUserOutput) ToMonitorUserPtrOutput() MonitorUserPtrOutput {
	return o.ToMonitorUserPtrOutputWithContext(context.Background())
}

func (o MonitorUserOutput) ToMonitorUserPtrOutputWithContext(ctx context.Context) MonitorUserPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorUser) *MonitorUser {
		return &v
	}).(MonitorUserPtrOutput)
}

// Country of the user.
func (o MonitorUserOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorUser) string { return v.Country }).(pulumi.StringOutput)
}

// Email of the user used by Dynatrace for contacting them if needed.
func (o MonitorUserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorUser) string { return v.Email }).(pulumi.StringOutput)
}

// First name of the user.
func (o MonitorUserOutput) FirstName() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorUser) string { return v.FirstName }).(pulumi.StringOutput)
}

// Last name of the user.
func (o MonitorUserOutput) LastName() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorUser) string { return v.LastName }).(pulumi.StringOutput)
}

// phone number of the user by Dynatrace for contacting them if needed.
func (o MonitorUserOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorUser) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

type MonitorUserPtrOutput struct{ *pulumi.OutputState }

func (MonitorUserPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorUser)(nil)).Elem()
}

func (o MonitorUserPtrOutput) ToMonitorUserPtrOutput() MonitorUserPtrOutput {
	return o
}

func (o MonitorUserPtrOutput) ToMonitorUserPtrOutputWithContext(ctx context.Context) MonitorUserPtrOutput {
	return o
}

func (o MonitorUserPtrOutput) Elem() MonitorUserOutput {
	return o.ApplyT(func(v *MonitorUser) MonitorUser {
		if v != nil {
			return *v
		}
		var ret MonitorUser
		return ret
	}).(MonitorUserOutput)
}

// Country of the user.
func (o MonitorUserPtrOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorUser) *string {
		if v == nil {
			return nil
		}
		return &v.Country
	}).(pulumi.StringPtrOutput)
}

// Email of the user used by Dynatrace for contacting them if needed.
func (o MonitorUserPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorUser) *string {
		if v == nil {
			return nil
		}
		return &v.Email
	}).(pulumi.StringPtrOutput)
}

// First name of the user.
func (o MonitorUserPtrOutput) FirstName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorUser) *string {
		if v == nil {
			return nil
		}
		return &v.FirstName
	}).(pulumi.StringPtrOutput)
}

// Last name of the user.
func (o MonitorUserPtrOutput) LastName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorUser) *string {
		if v == nil {
			return nil
		}
		return &v.LastName
	}).(pulumi.StringPtrOutput)
}

// phone number of the user by Dynatrace for contacting them if needed.
func (o MonitorUserPtrOutput) PhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorUser) *string {
		if v == nil {
			return nil
		}
		return &v.PhoneNumber
	}).(pulumi.StringPtrOutput)
}

type TagRulesLogRule struct {
	// Filtering tag for the log rule. A `filteringTag` block as defined below. Changing this forces a new resource to be created.
	FilteringTags []TagRulesLogRuleFilteringTag `pulumi:"filteringTags"`
	// Send Activity logs. The default value is `false`. Changing this forces a new resource to be created.
	SendActivityLogsEnabled *bool `pulumi:"sendActivityLogsEnabled"`
	// Send Azure Active Directory logs. The default value is `false`. Changing this forces a new resource to be created.
	SendAzureActiveDirectoryLogsEnabled *bool `pulumi:"sendAzureActiveDirectoryLogsEnabled"`
	// Send Subscription logs. The default value is `false`. Changing this forces a new resource to be created.
	SendSubscriptionLogsEnabled *bool `pulumi:"sendSubscriptionLogsEnabled"`
}

// TagRulesLogRuleInput is an input type that accepts TagRulesLogRuleArgs and TagRulesLogRuleOutput values.
// You can construct a concrete instance of `TagRulesLogRuleInput` via:
//
//	TagRulesLogRuleArgs{...}
type TagRulesLogRuleInput interface {
	pulumi.Input

	ToTagRulesLogRuleOutput() TagRulesLogRuleOutput
	ToTagRulesLogRuleOutputWithContext(context.Context) TagRulesLogRuleOutput
}

type TagRulesLogRuleArgs struct {
	// Filtering tag for the log rule. A `filteringTag` block as defined below. Changing this forces a new resource to be created.
	FilteringTags TagRulesLogRuleFilteringTagArrayInput `pulumi:"filteringTags"`
	// Send Activity logs. The default value is `false`. Changing this forces a new resource to be created.
	SendActivityLogsEnabled pulumi.BoolPtrInput `pulumi:"sendActivityLogsEnabled"`
	// Send Azure Active Directory logs. The default value is `false`. Changing this forces a new resource to be created.
	SendAzureActiveDirectoryLogsEnabled pulumi.BoolPtrInput `pulumi:"sendAzureActiveDirectoryLogsEnabled"`
	// Send Subscription logs. The default value is `false`. Changing this forces a new resource to be created.
	SendSubscriptionLogsEnabled pulumi.BoolPtrInput `pulumi:"sendSubscriptionLogsEnabled"`
}

func (TagRulesLogRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TagRulesLogRule)(nil)).Elem()
}

func (i TagRulesLogRuleArgs) ToTagRulesLogRuleOutput() TagRulesLogRuleOutput {
	return i.ToTagRulesLogRuleOutputWithContext(context.Background())
}

func (i TagRulesLogRuleArgs) ToTagRulesLogRuleOutputWithContext(ctx context.Context) TagRulesLogRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagRulesLogRuleOutput)
}

func (i TagRulesLogRuleArgs) ToTagRulesLogRulePtrOutput() TagRulesLogRulePtrOutput {
	return i.ToTagRulesLogRulePtrOutputWithContext(context.Background())
}

func (i TagRulesLogRuleArgs) ToTagRulesLogRulePtrOutputWithContext(ctx context.Context) TagRulesLogRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagRulesLogRuleOutput).ToTagRulesLogRulePtrOutputWithContext(ctx)
}

// TagRulesLogRulePtrInput is an input type that accepts TagRulesLogRuleArgs, TagRulesLogRulePtr and TagRulesLogRulePtrOutput values.
// You can construct a concrete instance of `TagRulesLogRulePtrInput` via:
//
//	        TagRulesLogRuleArgs{...}
//
//	or:
//
//	        nil
type TagRulesLogRulePtrInput interface {
	pulumi.Input

	ToTagRulesLogRulePtrOutput() TagRulesLogRulePtrOutput
	ToTagRulesLogRulePtrOutputWithContext(context.Context) TagRulesLogRulePtrOutput
}

type tagRulesLogRulePtrType TagRulesLogRuleArgs

func TagRulesLogRulePtr(v *TagRulesLogRuleArgs) TagRulesLogRulePtrInput {
	return (*tagRulesLogRulePtrType)(v)
}

func (*tagRulesLogRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TagRulesLogRule)(nil)).Elem()
}

func (i *tagRulesLogRulePtrType) ToTagRulesLogRulePtrOutput() TagRulesLogRulePtrOutput {
	return i.ToTagRulesLogRulePtrOutputWithContext(context.Background())
}

func (i *tagRulesLogRulePtrType) ToTagRulesLogRulePtrOutputWithContext(ctx context.Context) TagRulesLogRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagRulesLogRulePtrOutput)
}

type TagRulesLogRuleOutput struct{ *pulumi.OutputState }

func (TagRulesLogRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TagRulesLogRule)(nil)).Elem()
}

func (o TagRulesLogRuleOutput) ToTagRulesLogRuleOutput() TagRulesLogRuleOutput {
	return o
}

func (o TagRulesLogRuleOutput) ToTagRulesLogRuleOutputWithContext(ctx context.Context) TagRulesLogRuleOutput {
	return o
}

func (o TagRulesLogRuleOutput) ToTagRulesLogRulePtrOutput() TagRulesLogRulePtrOutput {
	return o.ToTagRulesLogRulePtrOutputWithContext(context.Background())
}

func (o TagRulesLogRuleOutput) ToTagRulesLogRulePtrOutputWithContext(ctx context.Context) TagRulesLogRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TagRulesLogRule) *TagRulesLogRule {
		return &v
	}).(TagRulesLogRulePtrOutput)
}

// Filtering tag for the log rule. A `filteringTag` block as defined below. Changing this forces a new resource to be created.
func (o TagRulesLogRuleOutput) FilteringTags() TagRulesLogRuleFilteringTagArrayOutput {
	return o.ApplyT(func(v TagRulesLogRule) []TagRulesLogRuleFilteringTag { return v.FilteringTags }).(TagRulesLogRuleFilteringTagArrayOutput)
}

// Send Activity logs. The default value is `false`. Changing this forces a new resource to be created.
func (o TagRulesLogRuleOutput) SendActivityLogsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TagRulesLogRule) *bool { return v.SendActivityLogsEnabled }).(pulumi.BoolPtrOutput)
}

// Send Azure Active Directory logs. The default value is `false`. Changing this forces a new resource to be created.
func (o TagRulesLogRuleOutput) SendAzureActiveDirectoryLogsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TagRulesLogRule) *bool { return v.SendAzureActiveDirectoryLogsEnabled }).(pulumi.BoolPtrOutput)
}

// Send Subscription logs. The default value is `false`. Changing this forces a new resource to be created.
func (o TagRulesLogRuleOutput) SendSubscriptionLogsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TagRulesLogRule) *bool { return v.SendSubscriptionLogsEnabled }).(pulumi.BoolPtrOutput)
}

type TagRulesLogRulePtrOutput struct{ *pulumi.OutputState }

func (TagRulesLogRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TagRulesLogRule)(nil)).Elem()
}

func (o TagRulesLogRulePtrOutput) ToTagRulesLogRulePtrOutput() TagRulesLogRulePtrOutput {
	return o
}

func (o TagRulesLogRulePtrOutput) ToTagRulesLogRulePtrOutputWithContext(ctx context.Context) TagRulesLogRulePtrOutput {
	return o
}

func (o TagRulesLogRulePtrOutput) Elem() TagRulesLogRuleOutput {
	return o.ApplyT(func(v *TagRulesLogRule) TagRulesLogRule {
		if v != nil {
			return *v
		}
		var ret TagRulesLogRule
		return ret
	}).(TagRulesLogRuleOutput)
}

// Filtering tag for the log rule. A `filteringTag` block as defined below. Changing this forces a new resource to be created.
func (o TagRulesLogRulePtrOutput) FilteringTags() TagRulesLogRuleFilteringTagArrayOutput {
	return o.ApplyT(func(v *TagRulesLogRule) []TagRulesLogRuleFilteringTag {
		if v == nil {
			return nil
		}
		return v.FilteringTags
	}).(TagRulesLogRuleFilteringTagArrayOutput)
}

// Send Activity logs. The default value is `false`. Changing this forces a new resource to be created.
func (o TagRulesLogRulePtrOutput) SendActivityLogsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TagRulesLogRule) *bool {
		if v == nil {
			return nil
		}
		return v.SendActivityLogsEnabled
	}).(pulumi.BoolPtrOutput)
}

// Send Azure Active Directory logs. The default value is `false`. Changing this forces a new resource to be created.
func (o TagRulesLogRulePtrOutput) SendAzureActiveDirectoryLogsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TagRulesLogRule) *bool {
		if v == nil {
			return nil
		}
		return v.SendAzureActiveDirectoryLogsEnabled
	}).(pulumi.BoolPtrOutput)
}

// Send Subscription logs. The default value is `false`. Changing this forces a new resource to be created.
func (o TagRulesLogRulePtrOutput) SendSubscriptionLogsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TagRulesLogRule) *bool {
		if v == nil {
			return nil
		}
		return v.SendSubscriptionLogsEnabled
	}).(pulumi.BoolPtrOutput)
}

type TagRulesLogRuleFilteringTag struct {
	// Action of the filtering tag. Possible values are `Include` and `Exclude`. Changing this forces a new resource to be created.
	Action string `pulumi:"action"`
	// Name of the filtering tag. Changing this forces a new resource to be created.
	Name string `pulumi:"name"`
	// Value of the filtering tag. Changing this forces a new resource to be created.
	Value string `pulumi:"value"`
}

// TagRulesLogRuleFilteringTagInput is an input type that accepts TagRulesLogRuleFilteringTagArgs and TagRulesLogRuleFilteringTagOutput values.
// You can construct a concrete instance of `TagRulesLogRuleFilteringTagInput` via:
//
//	TagRulesLogRuleFilteringTagArgs{...}
type TagRulesLogRuleFilteringTagInput interface {
	pulumi.Input

	ToTagRulesLogRuleFilteringTagOutput() TagRulesLogRuleFilteringTagOutput
	ToTagRulesLogRuleFilteringTagOutputWithContext(context.Context) TagRulesLogRuleFilteringTagOutput
}

type TagRulesLogRuleFilteringTagArgs struct {
	// Action of the filtering tag. Possible values are `Include` and `Exclude`. Changing this forces a new resource to be created.
	Action pulumi.StringInput `pulumi:"action"`
	// Name of the filtering tag. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// Value of the filtering tag. Changing this forces a new resource to be created.
	Value pulumi.StringInput `pulumi:"value"`
}

func (TagRulesLogRuleFilteringTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TagRulesLogRuleFilteringTag)(nil)).Elem()
}

func (i TagRulesLogRuleFilteringTagArgs) ToTagRulesLogRuleFilteringTagOutput() TagRulesLogRuleFilteringTagOutput {
	return i.ToTagRulesLogRuleFilteringTagOutputWithContext(context.Background())
}

func (i TagRulesLogRuleFilteringTagArgs) ToTagRulesLogRuleFilteringTagOutputWithContext(ctx context.Context) TagRulesLogRuleFilteringTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagRulesLogRuleFilteringTagOutput)
}

// TagRulesLogRuleFilteringTagArrayInput is an input type that accepts TagRulesLogRuleFilteringTagArray and TagRulesLogRuleFilteringTagArrayOutput values.
// You can construct a concrete instance of `TagRulesLogRuleFilteringTagArrayInput` via:
//
//	TagRulesLogRuleFilteringTagArray{ TagRulesLogRuleFilteringTagArgs{...} }
type TagRulesLogRuleFilteringTagArrayInput interface {
	pulumi.Input

	ToTagRulesLogRuleFilteringTagArrayOutput() TagRulesLogRuleFilteringTagArrayOutput
	ToTagRulesLogRuleFilteringTagArrayOutputWithContext(context.Context) TagRulesLogRuleFilteringTagArrayOutput
}

type TagRulesLogRuleFilteringTagArray []TagRulesLogRuleFilteringTagInput

func (TagRulesLogRuleFilteringTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TagRulesLogRuleFilteringTag)(nil)).Elem()
}

func (i TagRulesLogRuleFilteringTagArray) ToTagRulesLogRuleFilteringTagArrayOutput() TagRulesLogRuleFilteringTagArrayOutput {
	return i.ToTagRulesLogRuleFilteringTagArrayOutputWithContext(context.Background())
}

func (i TagRulesLogRuleFilteringTagArray) ToTagRulesLogRuleFilteringTagArrayOutputWithContext(ctx context.Context) TagRulesLogRuleFilteringTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagRulesLogRuleFilteringTagArrayOutput)
}

type TagRulesLogRuleFilteringTagOutput struct{ *pulumi.OutputState }

func (TagRulesLogRuleFilteringTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TagRulesLogRuleFilteringTag)(nil)).Elem()
}

func (o TagRulesLogRuleFilteringTagOutput) ToTagRulesLogRuleFilteringTagOutput() TagRulesLogRuleFilteringTagOutput {
	return o
}

func (o TagRulesLogRuleFilteringTagOutput) ToTagRulesLogRuleFilteringTagOutputWithContext(ctx context.Context) TagRulesLogRuleFilteringTagOutput {
	return o
}

// Action of the filtering tag. Possible values are `Include` and `Exclude`. Changing this forces a new resource to be created.
func (o TagRulesLogRuleFilteringTagOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v TagRulesLogRuleFilteringTag) string { return v.Action }).(pulumi.StringOutput)
}

// Name of the filtering tag. Changing this forces a new resource to be created.
func (o TagRulesLogRuleFilteringTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TagRulesLogRuleFilteringTag) string { return v.Name }).(pulumi.StringOutput)
}

// Value of the filtering tag. Changing this forces a new resource to be created.
func (o TagRulesLogRuleFilteringTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v TagRulesLogRuleFilteringTag) string { return v.Value }).(pulumi.StringOutput)
}

type TagRulesLogRuleFilteringTagArrayOutput struct{ *pulumi.OutputState }

func (TagRulesLogRuleFilteringTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TagRulesLogRuleFilteringTag)(nil)).Elem()
}

func (o TagRulesLogRuleFilteringTagArrayOutput) ToTagRulesLogRuleFilteringTagArrayOutput() TagRulesLogRuleFilteringTagArrayOutput {
	return o
}

func (o TagRulesLogRuleFilteringTagArrayOutput) ToTagRulesLogRuleFilteringTagArrayOutputWithContext(ctx context.Context) TagRulesLogRuleFilteringTagArrayOutput {
	return o
}

func (o TagRulesLogRuleFilteringTagArrayOutput) Index(i pulumi.IntInput) TagRulesLogRuleFilteringTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TagRulesLogRuleFilteringTag {
		return vs[0].([]TagRulesLogRuleFilteringTag)[vs[1].(int)]
	}).(TagRulesLogRuleFilteringTagOutput)
}

type TagRulesMetricRule struct {
	// Filtering tag for the metric rule. A `filteringTag` block as defined below.
	FilteringTags []TagRulesMetricRuleFilteringTag `pulumi:"filteringTags"`
}

// TagRulesMetricRuleInput is an input type that accepts TagRulesMetricRuleArgs and TagRulesMetricRuleOutput values.
// You can construct a concrete instance of `TagRulesMetricRuleInput` via:
//
//	TagRulesMetricRuleArgs{...}
type TagRulesMetricRuleInput interface {
	pulumi.Input

	ToTagRulesMetricRuleOutput() TagRulesMetricRuleOutput
	ToTagRulesMetricRuleOutputWithContext(context.Context) TagRulesMetricRuleOutput
}

type TagRulesMetricRuleArgs struct {
	// Filtering tag for the metric rule. A `filteringTag` block as defined below.
	FilteringTags TagRulesMetricRuleFilteringTagArrayInput `pulumi:"filteringTags"`
}

func (TagRulesMetricRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TagRulesMetricRule)(nil)).Elem()
}

func (i TagRulesMetricRuleArgs) ToTagRulesMetricRuleOutput() TagRulesMetricRuleOutput {
	return i.ToTagRulesMetricRuleOutputWithContext(context.Background())
}

func (i TagRulesMetricRuleArgs) ToTagRulesMetricRuleOutputWithContext(ctx context.Context) TagRulesMetricRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagRulesMetricRuleOutput)
}

func (i TagRulesMetricRuleArgs) ToTagRulesMetricRulePtrOutput() TagRulesMetricRulePtrOutput {
	return i.ToTagRulesMetricRulePtrOutputWithContext(context.Background())
}

func (i TagRulesMetricRuleArgs) ToTagRulesMetricRulePtrOutputWithContext(ctx context.Context) TagRulesMetricRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagRulesMetricRuleOutput).ToTagRulesMetricRulePtrOutputWithContext(ctx)
}

// TagRulesMetricRulePtrInput is an input type that accepts TagRulesMetricRuleArgs, TagRulesMetricRulePtr and TagRulesMetricRulePtrOutput values.
// You can construct a concrete instance of `TagRulesMetricRulePtrInput` via:
//
//	        TagRulesMetricRuleArgs{...}
//
//	or:
//
//	        nil
type TagRulesMetricRulePtrInput interface {
	pulumi.Input

	ToTagRulesMetricRulePtrOutput() TagRulesMetricRulePtrOutput
	ToTagRulesMetricRulePtrOutputWithContext(context.Context) TagRulesMetricRulePtrOutput
}

type tagRulesMetricRulePtrType TagRulesMetricRuleArgs

func TagRulesMetricRulePtr(v *TagRulesMetricRuleArgs) TagRulesMetricRulePtrInput {
	return (*tagRulesMetricRulePtrType)(v)
}

func (*tagRulesMetricRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TagRulesMetricRule)(nil)).Elem()
}

func (i *tagRulesMetricRulePtrType) ToTagRulesMetricRulePtrOutput() TagRulesMetricRulePtrOutput {
	return i.ToTagRulesMetricRulePtrOutputWithContext(context.Background())
}

func (i *tagRulesMetricRulePtrType) ToTagRulesMetricRulePtrOutputWithContext(ctx context.Context) TagRulesMetricRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagRulesMetricRulePtrOutput)
}

type TagRulesMetricRuleOutput struct{ *pulumi.OutputState }

func (TagRulesMetricRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TagRulesMetricRule)(nil)).Elem()
}

func (o TagRulesMetricRuleOutput) ToTagRulesMetricRuleOutput() TagRulesMetricRuleOutput {
	return o
}

func (o TagRulesMetricRuleOutput) ToTagRulesMetricRuleOutputWithContext(ctx context.Context) TagRulesMetricRuleOutput {
	return o
}

func (o TagRulesMetricRuleOutput) ToTagRulesMetricRulePtrOutput() TagRulesMetricRulePtrOutput {
	return o.ToTagRulesMetricRulePtrOutputWithContext(context.Background())
}

func (o TagRulesMetricRuleOutput) ToTagRulesMetricRulePtrOutputWithContext(ctx context.Context) TagRulesMetricRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TagRulesMetricRule) *TagRulesMetricRule {
		return &v
	}).(TagRulesMetricRulePtrOutput)
}

// Filtering tag for the metric rule. A `filteringTag` block as defined below.
func (o TagRulesMetricRuleOutput) FilteringTags() TagRulesMetricRuleFilteringTagArrayOutput {
	return o.ApplyT(func(v TagRulesMetricRule) []TagRulesMetricRuleFilteringTag { return v.FilteringTags }).(TagRulesMetricRuleFilteringTagArrayOutput)
}

type TagRulesMetricRulePtrOutput struct{ *pulumi.OutputState }

func (TagRulesMetricRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TagRulesMetricRule)(nil)).Elem()
}

func (o TagRulesMetricRulePtrOutput) ToTagRulesMetricRulePtrOutput() TagRulesMetricRulePtrOutput {
	return o
}

func (o TagRulesMetricRulePtrOutput) ToTagRulesMetricRulePtrOutputWithContext(ctx context.Context) TagRulesMetricRulePtrOutput {
	return o
}

func (o TagRulesMetricRulePtrOutput) Elem() TagRulesMetricRuleOutput {
	return o.ApplyT(func(v *TagRulesMetricRule) TagRulesMetricRule {
		if v != nil {
			return *v
		}
		var ret TagRulesMetricRule
		return ret
	}).(TagRulesMetricRuleOutput)
}

// Filtering tag for the metric rule. A `filteringTag` block as defined below.
func (o TagRulesMetricRulePtrOutput) FilteringTags() TagRulesMetricRuleFilteringTagArrayOutput {
	return o.ApplyT(func(v *TagRulesMetricRule) []TagRulesMetricRuleFilteringTag {
		if v == nil {
			return nil
		}
		return v.FilteringTags
	}).(TagRulesMetricRuleFilteringTagArrayOutput)
}

type TagRulesMetricRuleFilteringTag struct {
	// Action of the filtering tag. Possible values are `Include` and `Exclude`. Changing this forces a new resource to be created.
	Action string `pulumi:"action"`
	// Name of the filtering tag. Changing this forces a new resource to be created.
	Name string `pulumi:"name"`
	// Value of the filtering tag. Changing this forces a new resource to be created.
	Value string `pulumi:"value"`
}

// TagRulesMetricRuleFilteringTagInput is an input type that accepts TagRulesMetricRuleFilteringTagArgs and TagRulesMetricRuleFilteringTagOutput values.
// You can construct a concrete instance of `TagRulesMetricRuleFilteringTagInput` via:
//
//	TagRulesMetricRuleFilteringTagArgs{...}
type TagRulesMetricRuleFilteringTagInput interface {
	pulumi.Input

	ToTagRulesMetricRuleFilteringTagOutput() TagRulesMetricRuleFilteringTagOutput
	ToTagRulesMetricRuleFilteringTagOutputWithContext(context.Context) TagRulesMetricRuleFilteringTagOutput
}

type TagRulesMetricRuleFilteringTagArgs struct {
	// Action of the filtering tag. Possible values are `Include` and `Exclude`. Changing this forces a new resource to be created.
	Action pulumi.StringInput `pulumi:"action"`
	// Name of the filtering tag. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// Value of the filtering tag. Changing this forces a new resource to be created.
	Value pulumi.StringInput `pulumi:"value"`
}

func (TagRulesMetricRuleFilteringTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TagRulesMetricRuleFilteringTag)(nil)).Elem()
}

func (i TagRulesMetricRuleFilteringTagArgs) ToTagRulesMetricRuleFilteringTagOutput() TagRulesMetricRuleFilteringTagOutput {
	return i.ToTagRulesMetricRuleFilteringTagOutputWithContext(context.Background())
}

func (i TagRulesMetricRuleFilteringTagArgs) ToTagRulesMetricRuleFilteringTagOutputWithContext(ctx context.Context) TagRulesMetricRuleFilteringTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagRulesMetricRuleFilteringTagOutput)
}

// TagRulesMetricRuleFilteringTagArrayInput is an input type that accepts TagRulesMetricRuleFilteringTagArray and TagRulesMetricRuleFilteringTagArrayOutput values.
// You can construct a concrete instance of `TagRulesMetricRuleFilteringTagArrayInput` via:
//
//	TagRulesMetricRuleFilteringTagArray{ TagRulesMetricRuleFilteringTagArgs{...} }
type TagRulesMetricRuleFilteringTagArrayInput interface {
	pulumi.Input

	ToTagRulesMetricRuleFilteringTagArrayOutput() TagRulesMetricRuleFilteringTagArrayOutput
	ToTagRulesMetricRuleFilteringTagArrayOutputWithContext(context.Context) TagRulesMetricRuleFilteringTagArrayOutput
}

type TagRulesMetricRuleFilteringTagArray []TagRulesMetricRuleFilteringTagInput

func (TagRulesMetricRuleFilteringTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TagRulesMetricRuleFilteringTag)(nil)).Elem()
}

func (i TagRulesMetricRuleFilteringTagArray) ToTagRulesMetricRuleFilteringTagArrayOutput() TagRulesMetricRuleFilteringTagArrayOutput {
	return i.ToTagRulesMetricRuleFilteringTagArrayOutputWithContext(context.Background())
}

func (i TagRulesMetricRuleFilteringTagArray) ToTagRulesMetricRuleFilteringTagArrayOutputWithContext(ctx context.Context) TagRulesMetricRuleFilteringTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagRulesMetricRuleFilteringTagArrayOutput)
}

type TagRulesMetricRuleFilteringTagOutput struct{ *pulumi.OutputState }

func (TagRulesMetricRuleFilteringTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TagRulesMetricRuleFilteringTag)(nil)).Elem()
}

func (o TagRulesMetricRuleFilteringTagOutput) ToTagRulesMetricRuleFilteringTagOutput() TagRulesMetricRuleFilteringTagOutput {
	return o
}

func (o TagRulesMetricRuleFilteringTagOutput) ToTagRulesMetricRuleFilteringTagOutputWithContext(ctx context.Context) TagRulesMetricRuleFilteringTagOutput {
	return o
}

// Action of the filtering tag. Possible values are `Include` and `Exclude`. Changing this forces a new resource to be created.
func (o TagRulesMetricRuleFilteringTagOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v TagRulesMetricRuleFilteringTag) string { return v.Action }).(pulumi.StringOutput)
}

// Name of the filtering tag. Changing this forces a new resource to be created.
func (o TagRulesMetricRuleFilteringTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TagRulesMetricRuleFilteringTag) string { return v.Name }).(pulumi.StringOutput)
}

// Value of the filtering tag. Changing this forces a new resource to be created.
func (o TagRulesMetricRuleFilteringTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v TagRulesMetricRuleFilteringTag) string { return v.Value }).(pulumi.StringOutput)
}

type TagRulesMetricRuleFilteringTagArrayOutput struct{ *pulumi.OutputState }

func (TagRulesMetricRuleFilteringTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TagRulesMetricRuleFilteringTag)(nil)).Elem()
}

func (o TagRulesMetricRuleFilteringTagArrayOutput) ToTagRulesMetricRuleFilteringTagArrayOutput() TagRulesMetricRuleFilteringTagArrayOutput {
	return o
}

func (o TagRulesMetricRuleFilteringTagArrayOutput) ToTagRulesMetricRuleFilteringTagArrayOutputWithContext(ctx context.Context) TagRulesMetricRuleFilteringTagArrayOutput {
	return o
}

func (o TagRulesMetricRuleFilteringTagArrayOutput) Index(i pulumi.IntInput) TagRulesMetricRuleFilteringTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TagRulesMetricRuleFilteringTag {
		return vs[0].([]TagRulesMetricRuleFilteringTag)[vs[1].(int)]
	}).(TagRulesMetricRuleFilteringTagOutput)
}

type GetMonitorEnvironmentProperty struct {
	EnvironmentInfos []GetMonitorEnvironmentPropertyEnvironmentInfo `pulumi:"environmentInfos"`
}

// GetMonitorEnvironmentPropertyInput is an input type that accepts GetMonitorEnvironmentPropertyArgs and GetMonitorEnvironmentPropertyOutput values.
// You can construct a concrete instance of `GetMonitorEnvironmentPropertyInput` via:
//
//	GetMonitorEnvironmentPropertyArgs{...}
type GetMonitorEnvironmentPropertyInput interface {
	pulumi.Input

	ToGetMonitorEnvironmentPropertyOutput() GetMonitorEnvironmentPropertyOutput
	ToGetMonitorEnvironmentPropertyOutputWithContext(context.Context) GetMonitorEnvironmentPropertyOutput
}

type GetMonitorEnvironmentPropertyArgs struct {
	EnvironmentInfos GetMonitorEnvironmentPropertyEnvironmentInfoArrayInput `pulumi:"environmentInfos"`
}

func (GetMonitorEnvironmentPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitorEnvironmentProperty)(nil)).Elem()
}

func (i GetMonitorEnvironmentPropertyArgs) ToGetMonitorEnvironmentPropertyOutput() GetMonitorEnvironmentPropertyOutput {
	return i.ToGetMonitorEnvironmentPropertyOutputWithContext(context.Background())
}

func (i GetMonitorEnvironmentPropertyArgs) ToGetMonitorEnvironmentPropertyOutputWithContext(ctx context.Context) GetMonitorEnvironmentPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMonitorEnvironmentPropertyOutput)
}

// GetMonitorEnvironmentPropertyArrayInput is an input type that accepts GetMonitorEnvironmentPropertyArray and GetMonitorEnvironmentPropertyArrayOutput values.
// You can construct a concrete instance of `GetMonitorEnvironmentPropertyArrayInput` via:
//
//	GetMonitorEnvironmentPropertyArray{ GetMonitorEnvironmentPropertyArgs{...} }
type GetMonitorEnvironmentPropertyArrayInput interface {
	pulumi.Input

	ToGetMonitorEnvironmentPropertyArrayOutput() GetMonitorEnvironmentPropertyArrayOutput
	ToGetMonitorEnvironmentPropertyArrayOutputWithContext(context.Context) GetMonitorEnvironmentPropertyArrayOutput
}

type GetMonitorEnvironmentPropertyArray []GetMonitorEnvironmentPropertyInput

func (GetMonitorEnvironmentPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMonitorEnvironmentProperty)(nil)).Elem()
}

func (i GetMonitorEnvironmentPropertyArray) ToGetMonitorEnvironmentPropertyArrayOutput() GetMonitorEnvironmentPropertyArrayOutput {
	return i.ToGetMonitorEnvironmentPropertyArrayOutputWithContext(context.Background())
}

func (i GetMonitorEnvironmentPropertyArray) ToGetMonitorEnvironmentPropertyArrayOutputWithContext(ctx context.Context) GetMonitorEnvironmentPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMonitorEnvironmentPropertyArrayOutput)
}

type GetMonitorEnvironmentPropertyOutput struct{ *pulumi.OutputState }

func (GetMonitorEnvironmentPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitorEnvironmentProperty)(nil)).Elem()
}

func (o GetMonitorEnvironmentPropertyOutput) ToGetMonitorEnvironmentPropertyOutput() GetMonitorEnvironmentPropertyOutput {
	return o
}

func (o GetMonitorEnvironmentPropertyOutput) ToGetMonitorEnvironmentPropertyOutputWithContext(ctx context.Context) GetMonitorEnvironmentPropertyOutput {
	return o
}

func (o GetMonitorEnvironmentPropertyOutput) EnvironmentInfos() GetMonitorEnvironmentPropertyEnvironmentInfoArrayOutput {
	return o.ApplyT(func(v GetMonitorEnvironmentProperty) []GetMonitorEnvironmentPropertyEnvironmentInfo {
		return v.EnvironmentInfos
	}).(GetMonitorEnvironmentPropertyEnvironmentInfoArrayOutput)
}

type GetMonitorEnvironmentPropertyArrayOutput struct{ *pulumi.OutputState }

func (GetMonitorEnvironmentPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMonitorEnvironmentProperty)(nil)).Elem()
}

func (o GetMonitorEnvironmentPropertyArrayOutput) ToGetMonitorEnvironmentPropertyArrayOutput() GetMonitorEnvironmentPropertyArrayOutput {
	return o
}

func (o GetMonitorEnvironmentPropertyArrayOutput) ToGetMonitorEnvironmentPropertyArrayOutputWithContext(ctx context.Context) GetMonitorEnvironmentPropertyArrayOutput {
	return o
}

func (o GetMonitorEnvironmentPropertyArrayOutput) Index(i pulumi.IntInput) GetMonitorEnvironmentPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMonitorEnvironmentProperty {
		return vs[0].([]GetMonitorEnvironmentProperty)[vs[1].(int)]
	}).(GetMonitorEnvironmentPropertyOutput)
}

type GetMonitorEnvironmentPropertyEnvironmentInfo struct {
	EnvironmentId string `pulumi:"environmentId"`
}

// GetMonitorEnvironmentPropertyEnvironmentInfoInput is an input type that accepts GetMonitorEnvironmentPropertyEnvironmentInfoArgs and GetMonitorEnvironmentPropertyEnvironmentInfoOutput values.
// You can construct a concrete instance of `GetMonitorEnvironmentPropertyEnvironmentInfoInput` via:
//
//	GetMonitorEnvironmentPropertyEnvironmentInfoArgs{...}
type GetMonitorEnvironmentPropertyEnvironmentInfoInput interface {
	pulumi.Input

	ToGetMonitorEnvironmentPropertyEnvironmentInfoOutput() GetMonitorEnvironmentPropertyEnvironmentInfoOutput
	ToGetMonitorEnvironmentPropertyEnvironmentInfoOutputWithContext(context.Context) GetMonitorEnvironmentPropertyEnvironmentInfoOutput
}

type GetMonitorEnvironmentPropertyEnvironmentInfoArgs struct {
	EnvironmentId pulumi.StringInput `pulumi:"environmentId"`
}

func (GetMonitorEnvironmentPropertyEnvironmentInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitorEnvironmentPropertyEnvironmentInfo)(nil)).Elem()
}

func (i GetMonitorEnvironmentPropertyEnvironmentInfoArgs) ToGetMonitorEnvironmentPropertyEnvironmentInfoOutput() GetMonitorEnvironmentPropertyEnvironmentInfoOutput {
	return i.ToGetMonitorEnvironmentPropertyEnvironmentInfoOutputWithContext(context.Background())
}

func (i GetMonitorEnvironmentPropertyEnvironmentInfoArgs) ToGetMonitorEnvironmentPropertyEnvironmentInfoOutputWithContext(ctx context.Context) GetMonitorEnvironmentPropertyEnvironmentInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMonitorEnvironmentPropertyEnvironmentInfoOutput)
}

// GetMonitorEnvironmentPropertyEnvironmentInfoArrayInput is an input type that accepts GetMonitorEnvironmentPropertyEnvironmentInfoArray and GetMonitorEnvironmentPropertyEnvironmentInfoArrayOutput values.
// You can construct a concrete instance of `GetMonitorEnvironmentPropertyEnvironmentInfoArrayInput` via:
//
//	GetMonitorEnvironmentPropertyEnvironmentInfoArray{ GetMonitorEnvironmentPropertyEnvironmentInfoArgs{...} }
type GetMonitorEnvironmentPropertyEnvironmentInfoArrayInput interface {
	pulumi.Input

	ToGetMonitorEnvironmentPropertyEnvironmentInfoArrayOutput() GetMonitorEnvironmentPropertyEnvironmentInfoArrayOutput
	ToGetMonitorEnvironmentPropertyEnvironmentInfoArrayOutputWithContext(context.Context) GetMonitorEnvironmentPropertyEnvironmentInfoArrayOutput
}

type GetMonitorEnvironmentPropertyEnvironmentInfoArray []GetMonitorEnvironmentPropertyEnvironmentInfoInput

func (GetMonitorEnvironmentPropertyEnvironmentInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMonitorEnvironmentPropertyEnvironmentInfo)(nil)).Elem()
}

func (i GetMonitorEnvironmentPropertyEnvironmentInfoArray) ToGetMonitorEnvironmentPropertyEnvironmentInfoArrayOutput() GetMonitorEnvironmentPropertyEnvironmentInfoArrayOutput {
	return i.ToGetMonitorEnvironmentPropertyEnvironmentInfoArrayOutputWithContext(context.Background())
}

func (i GetMonitorEnvironmentPropertyEnvironmentInfoArray) ToGetMonitorEnvironmentPropertyEnvironmentInfoArrayOutputWithContext(ctx context.Context) GetMonitorEnvironmentPropertyEnvironmentInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMonitorEnvironmentPropertyEnvironmentInfoArrayOutput)
}

type GetMonitorEnvironmentPropertyEnvironmentInfoOutput struct{ *pulumi.OutputState }

func (GetMonitorEnvironmentPropertyEnvironmentInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitorEnvironmentPropertyEnvironmentInfo)(nil)).Elem()
}

func (o GetMonitorEnvironmentPropertyEnvironmentInfoOutput) ToGetMonitorEnvironmentPropertyEnvironmentInfoOutput() GetMonitorEnvironmentPropertyEnvironmentInfoOutput {
	return o
}

func (o GetMonitorEnvironmentPropertyEnvironmentInfoOutput) ToGetMonitorEnvironmentPropertyEnvironmentInfoOutputWithContext(ctx context.Context) GetMonitorEnvironmentPropertyEnvironmentInfoOutput {
	return o
}

func (o GetMonitorEnvironmentPropertyEnvironmentInfoOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorEnvironmentPropertyEnvironmentInfo) string { return v.EnvironmentId }).(pulumi.StringOutput)
}

type GetMonitorEnvironmentPropertyEnvironmentInfoArrayOutput struct{ *pulumi.OutputState }

func (GetMonitorEnvironmentPropertyEnvironmentInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMonitorEnvironmentPropertyEnvironmentInfo)(nil)).Elem()
}

func (o GetMonitorEnvironmentPropertyEnvironmentInfoArrayOutput) ToGetMonitorEnvironmentPropertyEnvironmentInfoArrayOutput() GetMonitorEnvironmentPropertyEnvironmentInfoArrayOutput {
	return o
}

func (o GetMonitorEnvironmentPropertyEnvironmentInfoArrayOutput) ToGetMonitorEnvironmentPropertyEnvironmentInfoArrayOutputWithContext(ctx context.Context) GetMonitorEnvironmentPropertyEnvironmentInfoArrayOutput {
	return o
}

func (o GetMonitorEnvironmentPropertyEnvironmentInfoArrayOutput) Index(i pulumi.IntInput) GetMonitorEnvironmentPropertyEnvironmentInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMonitorEnvironmentPropertyEnvironmentInfo {
		return vs[0].([]GetMonitorEnvironmentPropertyEnvironmentInfo)[vs[1].(int)]
	}).(GetMonitorEnvironmentPropertyEnvironmentInfoOutput)
}

type GetMonitorIdentity struct {
	PrincipalId string `pulumi:"principalId"`
	TenantId    string `pulumi:"tenantId"`
	// The type of identity used for the resource.
	Type string `pulumi:"type"`
}

// GetMonitorIdentityInput is an input type that accepts GetMonitorIdentityArgs and GetMonitorIdentityOutput values.
// You can construct a concrete instance of `GetMonitorIdentityInput` via:
//
//	GetMonitorIdentityArgs{...}
type GetMonitorIdentityInput interface {
	pulumi.Input

	ToGetMonitorIdentityOutput() GetMonitorIdentityOutput
	ToGetMonitorIdentityOutputWithContext(context.Context) GetMonitorIdentityOutput
}

type GetMonitorIdentityArgs struct {
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	TenantId    pulumi.StringInput `pulumi:"tenantId"`
	// The type of identity used for the resource.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetMonitorIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitorIdentity)(nil)).Elem()
}

func (i GetMonitorIdentityArgs) ToGetMonitorIdentityOutput() GetMonitorIdentityOutput {
	return i.ToGetMonitorIdentityOutputWithContext(context.Background())
}

func (i GetMonitorIdentityArgs) ToGetMonitorIdentityOutputWithContext(ctx context.Context) GetMonitorIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMonitorIdentityOutput)
}

// GetMonitorIdentityArrayInput is an input type that accepts GetMonitorIdentityArray and GetMonitorIdentityArrayOutput values.
// You can construct a concrete instance of `GetMonitorIdentityArrayInput` via:
//
//	GetMonitorIdentityArray{ GetMonitorIdentityArgs{...} }
type GetMonitorIdentityArrayInput interface {
	pulumi.Input

	ToGetMonitorIdentityArrayOutput() GetMonitorIdentityArrayOutput
	ToGetMonitorIdentityArrayOutputWithContext(context.Context) GetMonitorIdentityArrayOutput
}

type GetMonitorIdentityArray []GetMonitorIdentityInput

func (GetMonitorIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMonitorIdentity)(nil)).Elem()
}

func (i GetMonitorIdentityArray) ToGetMonitorIdentityArrayOutput() GetMonitorIdentityArrayOutput {
	return i.ToGetMonitorIdentityArrayOutputWithContext(context.Background())
}

func (i GetMonitorIdentityArray) ToGetMonitorIdentityArrayOutputWithContext(ctx context.Context) GetMonitorIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMonitorIdentityArrayOutput)
}

type GetMonitorIdentityOutput struct{ *pulumi.OutputState }

func (GetMonitorIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitorIdentity)(nil)).Elem()
}

func (o GetMonitorIdentityOutput) ToGetMonitorIdentityOutput() GetMonitorIdentityOutput {
	return o
}

func (o GetMonitorIdentityOutput) ToGetMonitorIdentityOutputWithContext(ctx context.Context) GetMonitorIdentityOutput {
	return o
}

func (o GetMonitorIdentityOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorIdentity) string { return v.PrincipalId }).(pulumi.StringOutput)
}

func (o GetMonitorIdentityOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorIdentity) string { return v.TenantId }).(pulumi.StringOutput)
}

// The type of identity used for the resource.
func (o GetMonitorIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type GetMonitorIdentityArrayOutput struct{ *pulumi.OutputState }

func (GetMonitorIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMonitorIdentity)(nil)).Elem()
}

func (o GetMonitorIdentityArrayOutput) ToGetMonitorIdentityArrayOutput() GetMonitorIdentityArrayOutput {
	return o
}

func (o GetMonitorIdentityArrayOutput) ToGetMonitorIdentityArrayOutputWithContext(ctx context.Context) GetMonitorIdentityArrayOutput {
	return o
}

func (o GetMonitorIdentityArrayOutput) Index(i pulumi.IntInput) GetMonitorIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMonitorIdentity {
		return vs[0].([]GetMonitorIdentity)[vs[1].(int)]
	}).(GetMonitorIdentityOutput)
}

type GetMonitorPlan struct {
	// Different billing cycles.
	BillingCycle string `pulumi:"billingCycle"`
	// Date when plan was applied.
	EffectiveDate string `pulumi:"effectiveDate"`
	// Plan id as published by Dynatrace.
	Plan string `pulumi:"plan"`
	// Different usage type.
	UsageType string `pulumi:"usageType"`
}

// GetMonitorPlanInput is an input type that accepts GetMonitorPlanArgs and GetMonitorPlanOutput values.
// You can construct a concrete instance of `GetMonitorPlanInput` via:
//
//	GetMonitorPlanArgs{...}
type GetMonitorPlanInput interface {
	pulumi.Input

	ToGetMonitorPlanOutput() GetMonitorPlanOutput
	ToGetMonitorPlanOutputWithContext(context.Context) GetMonitorPlanOutput
}

type GetMonitorPlanArgs struct {
	// Different billing cycles.
	BillingCycle pulumi.StringInput `pulumi:"billingCycle"`
	// Date when plan was applied.
	EffectiveDate pulumi.StringInput `pulumi:"effectiveDate"`
	// Plan id as published by Dynatrace.
	Plan pulumi.StringInput `pulumi:"plan"`
	// Different usage type.
	UsageType pulumi.StringInput `pulumi:"usageType"`
}

func (GetMonitorPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitorPlan)(nil)).Elem()
}

func (i GetMonitorPlanArgs) ToGetMonitorPlanOutput() GetMonitorPlanOutput {
	return i.ToGetMonitorPlanOutputWithContext(context.Background())
}

func (i GetMonitorPlanArgs) ToGetMonitorPlanOutputWithContext(ctx context.Context) GetMonitorPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMonitorPlanOutput)
}

// GetMonitorPlanArrayInput is an input type that accepts GetMonitorPlanArray and GetMonitorPlanArrayOutput values.
// You can construct a concrete instance of `GetMonitorPlanArrayInput` via:
//
//	GetMonitorPlanArray{ GetMonitorPlanArgs{...} }
type GetMonitorPlanArrayInput interface {
	pulumi.Input

	ToGetMonitorPlanArrayOutput() GetMonitorPlanArrayOutput
	ToGetMonitorPlanArrayOutputWithContext(context.Context) GetMonitorPlanArrayOutput
}

type GetMonitorPlanArray []GetMonitorPlanInput

func (GetMonitorPlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMonitorPlan)(nil)).Elem()
}

func (i GetMonitorPlanArray) ToGetMonitorPlanArrayOutput() GetMonitorPlanArrayOutput {
	return i.ToGetMonitorPlanArrayOutputWithContext(context.Background())
}

func (i GetMonitorPlanArray) ToGetMonitorPlanArrayOutputWithContext(ctx context.Context) GetMonitorPlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMonitorPlanArrayOutput)
}

type GetMonitorPlanOutput struct{ *pulumi.OutputState }

func (GetMonitorPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitorPlan)(nil)).Elem()
}

func (o GetMonitorPlanOutput) ToGetMonitorPlanOutput() GetMonitorPlanOutput {
	return o
}

func (o GetMonitorPlanOutput) ToGetMonitorPlanOutputWithContext(ctx context.Context) GetMonitorPlanOutput {
	return o
}

// Different billing cycles.
func (o GetMonitorPlanOutput) BillingCycle() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorPlan) string { return v.BillingCycle }).(pulumi.StringOutput)
}

// Date when plan was applied.
func (o GetMonitorPlanOutput) EffectiveDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorPlan) string { return v.EffectiveDate }).(pulumi.StringOutput)
}

// Plan id as published by Dynatrace.
func (o GetMonitorPlanOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorPlan) string { return v.Plan }).(pulumi.StringOutput)
}

// Different usage type.
func (o GetMonitorPlanOutput) UsageType() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorPlan) string { return v.UsageType }).(pulumi.StringOutput)
}

type GetMonitorPlanArrayOutput struct{ *pulumi.OutputState }

func (GetMonitorPlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMonitorPlan)(nil)).Elem()
}

func (o GetMonitorPlanArrayOutput) ToGetMonitorPlanArrayOutput() GetMonitorPlanArrayOutput {
	return o
}

func (o GetMonitorPlanArrayOutput) ToGetMonitorPlanArrayOutputWithContext(ctx context.Context) GetMonitorPlanArrayOutput {
	return o
}

func (o GetMonitorPlanArrayOutput) Index(i pulumi.IntInput) GetMonitorPlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMonitorPlan {
		return vs[0].([]GetMonitorPlan)[vs[1].(int)]
	}).(GetMonitorPlanOutput)
}

type GetMonitorUser struct {
	// Country of the user.
	Country string `pulumi:"country"`
	// Email of the user used by Dynatrace for contacting them if needed.
	Email string `pulumi:"email"`
	// First name of the user.
	FirstName string `pulumi:"firstName"`
	// Last name of the user.
	LastName string `pulumi:"lastName"`
	// phone number of the user by Dynatrace for contacting them if needed.
	PhoneNumber string `pulumi:"phoneNumber"`
}

// GetMonitorUserInput is an input type that accepts GetMonitorUserArgs and GetMonitorUserOutput values.
// You can construct a concrete instance of `GetMonitorUserInput` via:
//
//	GetMonitorUserArgs{...}
type GetMonitorUserInput interface {
	pulumi.Input

	ToGetMonitorUserOutput() GetMonitorUserOutput
	ToGetMonitorUserOutputWithContext(context.Context) GetMonitorUserOutput
}

type GetMonitorUserArgs struct {
	// Country of the user.
	Country pulumi.StringInput `pulumi:"country"`
	// Email of the user used by Dynatrace for contacting them if needed.
	Email pulumi.StringInput `pulumi:"email"`
	// First name of the user.
	FirstName pulumi.StringInput `pulumi:"firstName"`
	// Last name of the user.
	LastName pulumi.StringInput `pulumi:"lastName"`
	// phone number of the user by Dynatrace for contacting them if needed.
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
}

func (GetMonitorUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitorUser)(nil)).Elem()
}

func (i GetMonitorUserArgs) ToGetMonitorUserOutput() GetMonitorUserOutput {
	return i.ToGetMonitorUserOutputWithContext(context.Background())
}

func (i GetMonitorUserArgs) ToGetMonitorUserOutputWithContext(ctx context.Context) GetMonitorUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMonitorUserOutput)
}

// GetMonitorUserArrayInput is an input type that accepts GetMonitorUserArray and GetMonitorUserArrayOutput values.
// You can construct a concrete instance of `GetMonitorUserArrayInput` via:
//
//	GetMonitorUserArray{ GetMonitorUserArgs{...} }
type GetMonitorUserArrayInput interface {
	pulumi.Input

	ToGetMonitorUserArrayOutput() GetMonitorUserArrayOutput
	ToGetMonitorUserArrayOutputWithContext(context.Context) GetMonitorUserArrayOutput
}

type GetMonitorUserArray []GetMonitorUserInput

func (GetMonitorUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMonitorUser)(nil)).Elem()
}

func (i GetMonitorUserArray) ToGetMonitorUserArrayOutput() GetMonitorUserArrayOutput {
	return i.ToGetMonitorUserArrayOutputWithContext(context.Background())
}

func (i GetMonitorUserArray) ToGetMonitorUserArrayOutputWithContext(ctx context.Context) GetMonitorUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMonitorUserArrayOutput)
}

type GetMonitorUserOutput struct{ *pulumi.OutputState }

func (GetMonitorUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitorUser)(nil)).Elem()
}

func (o GetMonitorUserOutput) ToGetMonitorUserOutput() GetMonitorUserOutput {
	return o
}

func (o GetMonitorUserOutput) ToGetMonitorUserOutputWithContext(ctx context.Context) GetMonitorUserOutput {
	return o
}

// Country of the user.
func (o GetMonitorUserOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorUser) string { return v.Country }).(pulumi.StringOutput)
}

// Email of the user used by Dynatrace for contacting them if needed.
func (o GetMonitorUserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorUser) string { return v.Email }).(pulumi.StringOutput)
}

// First name of the user.
func (o GetMonitorUserOutput) FirstName() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorUser) string { return v.FirstName }).(pulumi.StringOutput)
}

// Last name of the user.
func (o GetMonitorUserOutput) LastName() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorUser) string { return v.LastName }).(pulumi.StringOutput)
}

// phone number of the user by Dynatrace for contacting them if needed.
func (o GetMonitorUserOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorUser) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

type GetMonitorUserArrayOutput struct{ *pulumi.OutputState }

func (GetMonitorUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMonitorUser)(nil)).Elem()
}

func (o GetMonitorUserArrayOutput) ToGetMonitorUserArrayOutput() GetMonitorUserArrayOutput {
	return o
}

func (o GetMonitorUserArrayOutput) ToGetMonitorUserArrayOutputWithContext(ctx context.Context) GetMonitorUserArrayOutput {
	return o
}

func (o GetMonitorUserArrayOutput) Index(i pulumi.IntInput) GetMonitorUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMonitorUser {
		return vs[0].([]GetMonitorUser)[vs[1].(int)]
	}).(GetMonitorUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorIdentityInput)(nil)).Elem(), MonitorIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorIdentityPtrInput)(nil)).Elem(), MonitorIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorPlanInput)(nil)).Elem(), MonitorPlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorPlanPtrInput)(nil)).Elem(), MonitorPlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorUserInput)(nil)).Elem(), MonitorUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorUserPtrInput)(nil)).Elem(), MonitorUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagRulesLogRuleInput)(nil)).Elem(), TagRulesLogRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagRulesLogRulePtrInput)(nil)).Elem(), TagRulesLogRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagRulesLogRuleFilteringTagInput)(nil)).Elem(), TagRulesLogRuleFilteringTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagRulesLogRuleFilteringTagArrayInput)(nil)).Elem(), TagRulesLogRuleFilteringTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagRulesMetricRuleInput)(nil)).Elem(), TagRulesMetricRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagRulesMetricRulePtrInput)(nil)).Elem(), TagRulesMetricRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagRulesMetricRuleFilteringTagInput)(nil)).Elem(), TagRulesMetricRuleFilteringTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagRulesMetricRuleFilteringTagArrayInput)(nil)).Elem(), TagRulesMetricRuleFilteringTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMonitorEnvironmentPropertyInput)(nil)).Elem(), GetMonitorEnvironmentPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMonitorEnvironmentPropertyArrayInput)(nil)).Elem(), GetMonitorEnvironmentPropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMonitorEnvironmentPropertyEnvironmentInfoInput)(nil)).Elem(), GetMonitorEnvironmentPropertyEnvironmentInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMonitorEnvironmentPropertyEnvironmentInfoArrayInput)(nil)).Elem(), GetMonitorEnvironmentPropertyEnvironmentInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMonitorIdentityInput)(nil)).Elem(), GetMonitorIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMonitorIdentityArrayInput)(nil)).Elem(), GetMonitorIdentityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMonitorPlanInput)(nil)).Elem(), GetMonitorPlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMonitorPlanArrayInput)(nil)).Elem(), GetMonitorPlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMonitorUserInput)(nil)).Elem(), GetMonitorUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMonitorUserArrayInput)(nil)).Elem(), GetMonitorUserArray{})
	pulumi.RegisterOutputType(MonitorIdentityOutput{})
	pulumi.RegisterOutputType(MonitorIdentityPtrOutput{})
	pulumi.RegisterOutputType(MonitorPlanOutput{})
	pulumi.RegisterOutputType(MonitorPlanPtrOutput{})
	pulumi.RegisterOutputType(MonitorUserOutput{})
	pulumi.RegisterOutputType(MonitorUserPtrOutput{})
	pulumi.RegisterOutputType(TagRulesLogRuleOutput{})
	pulumi.RegisterOutputType(TagRulesLogRulePtrOutput{})
	pulumi.RegisterOutputType(TagRulesLogRuleFilteringTagOutput{})
	pulumi.RegisterOutputType(TagRulesLogRuleFilteringTagArrayOutput{})
	pulumi.RegisterOutputType(TagRulesMetricRuleOutput{})
	pulumi.RegisterOutputType(TagRulesMetricRulePtrOutput{})
	pulumi.RegisterOutputType(TagRulesMetricRuleFilteringTagOutput{})
	pulumi.RegisterOutputType(TagRulesMetricRuleFilteringTagArrayOutput{})
	pulumi.RegisterOutputType(GetMonitorEnvironmentPropertyOutput{})
	pulumi.RegisterOutputType(GetMonitorEnvironmentPropertyArrayOutput{})
	pulumi.RegisterOutputType(GetMonitorEnvironmentPropertyEnvironmentInfoOutput{})
	pulumi.RegisterOutputType(GetMonitorEnvironmentPropertyEnvironmentInfoArrayOutput{})
	pulumi.RegisterOutputType(GetMonitorIdentityOutput{})
	pulumi.RegisterOutputType(GetMonitorIdentityArrayOutput{})
	pulumi.RegisterOutputType(GetMonitorPlanOutput{})
	pulumi.RegisterOutputType(GetMonitorPlanArrayOutput{})
	pulumi.RegisterOutputType(GetMonitorUserOutput{})
	pulumi.RegisterOutputType(GetMonitorUserArrayOutput{})
}
