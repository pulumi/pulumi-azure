// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mysql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a MySQL Database within a MySQL Flexible Server
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/mysql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleFlexibleServer, err := mysql.NewFlexibleServer(ctx, "exampleFlexibleServer", &mysql.FlexibleServerArgs{
//				ResourceGroupName:     exampleResourceGroup.Name,
//				Location:              exampleResourceGroup.Location,
//				AdministratorLogin:    pulumi.String("mysqladminun"),
//				AdministratorPassword: pulumi.String("H@Sh1CoR3!"),
//				SkuName:               pulumi.String("B_Standard_B1s"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mysql.NewFlexibleDatabase(ctx, "exampleFlexibleDatabase", &mysql.FlexibleDatabaseArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				ServerName:        exampleFlexibleServer.Name,
//				Charset:           pulumi.String("utf8"),
//				Collation:         pulumi.String("utf8_unicode_ci"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// MySQL Database's can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:mysql/flexibleDatabase:FlexibleDatabase database1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.DBforMySQL/flexibleServers/flexibleserver1/databases/database1
//
// ```
type FlexibleDatabase struct {
	pulumi.CustomResourceState

	// Specifies the Charset for the MySQL Database, which needs [to be a valid MySQL Charset](https://dev.mysql.com/doc/refman/5.7/en/charset-charsets.html). Changing this forces a new resource to be created.
	Charset pulumi.StringOutput `pulumi:"charset"`
	// Specifies the Collation for the MySQL Database, which needs [to be a valid MySQL Collation](https://dev.mysql.com/doc/refman/5.7/en/charset-mysql.html). Changing this forces a new resource to be created.
	Collation pulumi.StringOutput `pulumi:"collation"`
	// Specifies the name of the MySQL Database, which needs [to be a valid MySQL identifier](https://dev.mysql.com/doc/refman/5.7/en/identifiers.html). Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the resource group in which the MySQL Server exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Specifies the name of the MySQL Flexible Server. Changing this forces a new resource to be created.
	ServerName pulumi.StringOutput `pulumi:"serverName"`
}

// NewFlexibleDatabase registers a new resource with the given unique name, arguments, and options.
func NewFlexibleDatabase(ctx *pulumi.Context,
	name string, args *FlexibleDatabaseArgs, opts ...pulumi.ResourceOption) (*FlexibleDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Charset == nil {
		return nil, errors.New("invalid value for required argument 'Charset'")
	}
	if args.Collation == nil {
		return nil, errors.New("invalid value for required argument 'Collation'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServerName == nil {
		return nil, errors.New("invalid value for required argument 'ServerName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FlexibleDatabase
	err := ctx.RegisterResource("azure:mysql/flexibleDatabase:FlexibleDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFlexibleDatabase gets an existing FlexibleDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFlexibleDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FlexibleDatabaseState, opts ...pulumi.ResourceOption) (*FlexibleDatabase, error) {
	var resource FlexibleDatabase
	err := ctx.ReadResource("azure:mysql/flexibleDatabase:FlexibleDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FlexibleDatabase resources.
type flexibleDatabaseState struct {
	// Specifies the Charset for the MySQL Database, which needs [to be a valid MySQL Charset](https://dev.mysql.com/doc/refman/5.7/en/charset-charsets.html). Changing this forces a new resource to be created.
	Charset *string `pulumi:"charset"`
	// Specifies the Collation for the MySQL Database, which needs [to be a valid MySQL Collation](https://dev.mysql.com/doc/refman/5.7/en/charset-mysql.html). Changing this forces a new resource to be created.
	Collation *string `pulumi:"collation"`
	// Specifies the name of the MySQL Database, which needs [to be a valid MySQL identifier](https://dev.mysql.com/doc/refman/5.7/en/identifiers.html). Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which the MySQL Server exists. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Specifies the name of the MySQL Flexible Server. Changing this forces a new resource to be created.
	ServerName *string `pulumi:"serverName"`
}

type FlexibleDatabaseState struct {
	// Specifies the Charset for the MySQL Database, which needs [to be a valid MySQL Charset](https://dev.mysql.com/doc/refman/5.7/en/charset-charsets.html). Changing this forces a new resource to be created.
	Charset pulumi.StringPtrInput
	// Specifies the Collation for the MySQL Database, which needs [to be a valid MySQL Collation](https://dev.mysql.com/doc/refman/5.7/en/charset-mysql.html). Changing this forces a new resource to be created.
	Collation pulumi.StringPtrInput
	// Specifies the name of the MySQL Database, which needs [to be a valid MySQL identifier](https://dev.mysql.com/doc/refman/5.7/en/identifiers.html). Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which the MySQL Server exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// Specifies the name of the MySQL Flexible Server. Changing this forces a new resource to be created.
	ServerName pulumi.StringPtrInput
}

func (FlexibleDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*flexibleDatabaseState)(nil)).Elem()
}

type flexibleDatabaseArgs struct {
	// Specifies the Charset for the MySQL Database, which needs [to be a valid MySQL Charset](https://dev.mysql.com/doc/refman/5.7/en/charset-charsets.html). Changing this forces a new resource to be created.
	Charset string `pulumi:"charset"`
	// Specifies the Collation for the MySQL Database, which needs [to be a valid MySQL Collation](https://dev.mysql.com/doc/refman/5.7/en/charset-mysql.html). Changing this forces a new resource to be created.
	Collation string `pulumi:"collation"`
	// Specifies the name of the MySQL Database, which needs [to be a valid MySQL identifier](https://dev.mysql.com/doc/refman/5.7/en/identifiers.html). Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which the MySQL Server exists. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Specifies the name of the MySQL Flexible Server. Changing this forces a new resource to be created.
	ServerName string `pulumi:"serverName"`
}

// The set of arguments for constructing a FlexibleDatabase resource.
type FlexibleDatabaseArgs struct {
	// Specifies the Charset for the MySQL Database, which needs [to be a valid MySQL Charset](https://dev.mysql.com/doc/refman/5.7/en/charset-charsets.html). Changing this forces a new resource to be created.
	Charset pulumi.StringInput
	// Specifies the Collation for the MySQL Database, which needs [to be a valid MySQL Collation](https://dev.mysql.com/doc/refman/5.7/en/charset-mysql.html). Changing this forces a new resource to be created.
	Collation pulumi.StringInput
	// Specifies the name of the MySQL Database, which needs [to be a valid MySQL identifier](https://dev.mysql.com/doc/refman/5.7/en/identifiers.html). Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which the MySQL Server exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// Specifies the name of the MySQL Flexible Server. Changing this forces a new resource to be created.
	ServerName pulumi.StringInput
}

func (FlexibleDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*flexibleDatabaseArgs)(nil)).Elem()
}

type FlexibleDatabaseInput interface {
	pulumi.Input

	ToFlexibleDatabaseOutput() FlexibleDatabaseOutput
	ToFlexibleDatabaseOutputWithContext(ctx context.Context) FlexibleDatabaseOutput
}

func (*FlexibleDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexibleDatabase)(nil)).Elem()
}

func (i *FlexibleDatabase) ToFlexibleDatabaseOutput() FlexibleDatabaseOutput {
	return i.ToFlexibleDatabaseOutputWithContext(context.Background())
}

func (i *FlexibleDatabase) ToFlexibleDatabaseOutputWithContext(ctx context.Context) FlexibleDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleDatabaseOutput)
}

// FlexibleDatabaseArrayInput is an input type that accepts FlexibleDatabaseArray and FlexibleDatabaseArrayOutput values.
// You can construct a concrete instance of `FlexibleDatabaseArrayInput` via:
//
//	FlexibleDatabaseArray{ FlexibleDatabaseArgs{...} }
type FlexibleDatabaseArrayInput interface {
	pulumi.Input

	ToFlexibleDatabaseArrayOutput() FlexibleDatabaseArrayOutput
	ToFlexibleDatabaseArrayOutputWithContext(context.Context) FlexibleDatabaseArrayOutput
}

type FlexibleDatabaseArray []FlexibleDatabaseInput

func (FlexibleDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlexibleDatabase)(nil)).Elem()
}

func (i FlexibleDatabaseArray) ToFlexibleDatabaseArrayOutput() FlexibleDatabaseArrayOutput {
	return i.ToFlexibleDatabaseArrayOutputWithContext(context.Background())
}

func (i FlexibleDatabaseArray) ToFlexibleDatabaseArrayOutputWithContext(ctx context.Context) FlexibleDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleDatabaseArrayOutput)
}

// FlexibleDatabaseMapInput is an input type that accepts FlexibleDatabaseMap and FlexibleDatabaseMapOutput values.
// You can construct a concrete instance of `FlexibleDatabaseMapInput` via:
//
//	FlexibleDatabaseMap{ "key": FlexibleDatabaseArgs{...} }
type FlexibleDatabaseMapInput interface {
	pulumi.Input

	ToFlexibleDatabaseMapOutput() FlexibleDatabaseMapOutput
	ToFlexibleDatabaseMapOutputWithContext(context.Context) FlexibleDatabaseMapOutput
}

type FlexibleDatabaseMap map[string]FlexibleDatabaseInput

func (FlexibleDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlexibleDatabase)(nil)).Elem()
}

func (i FlexibleDatabaseMap) ToFlexibleDatabaseMapOutput() FlexibleDatabaseMapOutput {
	return i.ToFlexibleDatabaseMapOutputWithContext(context.Background())
}

func (i FlexibleDatabaseMap) ToFlexibleDatabaseMapOutputWithContext(ctx context.Context) FlexibleDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleDatabaseMapOutput)
}

type FlexibleDatabaseOutput struct{ *pulumi.OutputState }

func (FlexibleDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexibleDatabase)(nil)).Elem()
}

func (o FlexibleDatabaseOutput) ToFlexibleDatabaseOutput() FlexibleDatabaseOutput {
	return o
}

func (o FlexibleDatabaseOutput) ToFlexibleDatabaseOutputWithContext(ctx context.Context) FlexibleDatabaseOutput {
	return o
}

// Specifies the Charset for the MySQL Database, which needs [to be a valid MySQL Charset](https://dev.mysql.com/doc/refman/5.7/en/charset-charsets.html). Changing this forces a new resource to be created.
func (o FlexibleDatabaseOutput) Charset() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleDatabase) pulumi.StringOutput { return v.Charset }).(pulumi.StringOutput)
}

// Specifies the Collation for the MySQL Database, which needs [to be a valid MySQL Collation](https://dev.mysql.com/doc/refman/5.7/en/charset-mysql.html). Changing this forces a new resource to be created.
func (o FlexibleDatabaseOutput) Collation() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleDatabase) pulumi.StringOutput { return v.Collation }).(pulumi.StringOutput)
}

// Specifies the name of the MySQL Database, which needs [to be a valid MySQL identifier](https://dev.mysql.com/doc/refman/5.7/en/identifiers.html). Changing this forces a new resource to be created.
func (o FlexibleDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleDatabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the resource group in which the MySQL Server exists. Changing this forces a new resource to be created.
func (o FlexibleDatabaseOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleDatabase) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// Specifies the name of the MySQL Flexible Server. Changing this forces a new resource to be created.
func (o FlexibleDatabaseOutput) ServerName() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleDatabase) pulumi.StringOutput { return v.ServerName }).(pulumi.StringOutput)
}

type FlexibleDatabaseArrayOutput struct{ *pulumi.OutputState }

func (FlexibleDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlexibleDatabase)(nil)).Elem()
}

func (o FlexibleDatabaseArrayOutput) ToFlexibleDatabaseArrayOutput() FlexibleDatabaseArrayOutput {
	return o
}

func (o FlexibleDatabaseArrayOutput) ToFlexibleDatabaseArrayOutputWithContext(ctx context.Context) FlexibleDatabaseArrayOutput {
	return o
}

func (o FlexibleDatabaseArrayOutput) Index(i pulumi.IntInput) FlexibleDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FlexibleDatabase {
		return vs[0].([]*FlexibleDatabase)[vs[1].(int)]
	}).(FlexibleDatabaseOutput)
}

type FlexibleDatabaseMapOutput struct{ *pulumi.OutputState }

func (FlexibleDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlexibleDatabase)(nil)).Elem()
}

func (o FlexibleDatabaseMapOutput) ToFlexibleDatabaseMapOutput() FlexibleDatabaseMapOutput {
	return o
}

func (o FlexibleDatabaseMapOutput) ToFlexibleDatabaseMapOutputWithContext(ctx context.Context) FlexibleDatabaseMapOutput {
	return o
}

func (o FlexibleDatabaseMapOutput) MapIndex(k pulumi.StringInput) FlexibleDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FlexibleDatabase {
		return vs[0].(map[string]*FlexibleDatabase)[vs[1].(string)]
	}).(FlexibleDatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleDatabaseInput)(nil)).Elem(), &FlexibleDatabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleDatabaseArrayInput)(nil)).Elem(), FlexibleDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleDatabaseMapInput)(nil)).Elem(), FlexibleDatabaseMap{})
	pulumi.RegisterOutputType(FlexibleDatabaseOutput{})
	pulumi.RegisterOutputType(FlexibleDatabaseArrayOutput{})
	pulumi.RegisterOutputType(FlexibleDatabaseMapOutput{})
}
