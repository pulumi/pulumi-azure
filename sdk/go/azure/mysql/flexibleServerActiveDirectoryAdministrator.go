// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mysql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Deprecated: azure.mysql/flexibleserveractivedirectoryadministrator.FlexibleServerActiveDirectoryAdministrator has been deprecated in favor of azure.mysql/flexibleserveractivedirectoryadministratory.FlexibleServerActiveDirectoryAdministratory
type FlexibleServerActiveDirectoryAdministrator struct {
	pulumi.CustomResourceState

	IdentityId pulumi.StringOutput `pulumi:"identityId"`
	Login      pulumi.StringOutput `pulumi:"login"`
	ObjectId   pulumi.StringOutput `pulumi:"objectId"`
	ServerId   pulumi.StringOutput `pulumi:"serverId"`
	TenantId   pulumi.StringOutput `pulumi:"tenantId"`
}

// NewFlexibleServerActiveDirectoryAdministrator registers a new resource with the given unique name, arguments, and options.
func NewFlexibleServerActiveDirectoryAdministrator(ctx *pulumi.Context,
	name string, args *FlexibleServerActiveDirectoryAdministratorArgs, opts ...pulumi.ResourceOption) (*FlexibleServerActiveDirectoryAdministrator, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IdentityId == nil {
		return nil, errors.New("invalid value for required argument 'IdentityId'")
	}
	if args.Login == nil {
		return nil, errors.New("invalid value for required argument 'Login'")
	}
	if args.ObjectId == nil {
		return nil, errors.New("invalid value for required argument 'ObjectId'")
	}
	if args.ServerId == nil {
		return nil, errors.New("invalid value for required argument 'ServerId'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FlexibleServerActiveDirectoryAdministrator
	err := ctx.RegisterResource("azure:mysql/flexibleServerActiveDirectoryAdministrator:FlexibleServerActiveDirectoryAdministrator", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFlexibleServerActiveDirectoryAdministrator gets an existing FlexibleServerActiveDirectoryAdministrator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFlexibleServerActiveDirectoryAdministrator(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FlexibleServerActiveDirectoryAdministratorState, opts ...pulumi.ResourceOption) (*FlexibleServerActiveDirectoryAdministrator, error) {
	var resource FlexibleServerActiveDirectoryAdministrator
	err := ctx.ReadResource("azure:mysql/flexibleServerActiveDirectoryAdministrator:FlexibleServerActiveDirectoryAdministrator", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FlexibleServerActiveDirectoryAdministrator resources.
type flexibleServerActiveDirectoryAdministratorState struct {
	IdentityId *string `pulumi:"identityId"`
	Login      *string `pulumi:"login"`
	ObjectId   *string `pulumi:"objectId"`
	ServerId   *string `pulumi:"serverId"`
	TenantId   *string `pulumi:"tenantId"`
}

type FlexibleServerActiveDirectoryAdministratorState struct {
	IdentityId pulumi.StringPtrInput
	Login      pulumi.StringPtrInput
	ObjectId   pulumi.StringPtrInput
	ServerId   pulumi.StringPtrInput
	TenantId   pulumi.StringPtrInput
}

func (FlexibleServerActiveDirectoryAdministratorState) ElementType() reflect.Type {
	return reflect.TypeOf((*flexibleServerActiveDirectoryAdministratorState)(nil)).Elem()
}

type flexibleServerActiveDirectoryAdministratorArgs struct {
	IdentityId string `pulumi:"identityId"`
	Login      string `pulumi:"login"`
	ObjectId   string `pulumi:"objectId"`
	ServerId   string `pulumi:"serverId"`
	TenantId   string `pulumi:"tenantId"`
}

// The set of arguments for constructing a FlexibleServerActiveDirectoryAdministrator resource.
type FlexibleServerActiveDirectoryAdministratorArgs struct {
	IdentityId pulumi.StringInput
	Login      pulumi.StringInput
	ObjectId   pulumi.StringInput
	ServerId   pulumi.StringInput
	TenantId   pulumi.StringInput
}

func (FlexibleServerActiveDirectoryAdministratorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*flexibleServerActiveDirectoryAdministratorArgs)(nil)).Elem()
}

type FlexibleServerActiveDirectoryAdministratorInput interface {
	pulumi.Input

	ToFlexibleServerActiveDirectoryAdministratorOutput() FlexibleServerActiveDirectoryAdministratorOutput
	ToFlexibleServerActiveDirectoryAdministratorOutputWithContext(ctx context.Context) FlexibleServerActiveDirectoryAdministratorOutput
}

func (*FlexibleServerActiveDirectoryAdministrator) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexibleServerActiveDirectoryAdministrator)(nil)).Elem()
}

func (i *FlexibleServerActiveDirectoryAdministrator) ToFlexibleServerActiveDirectoryAdministratorOutput() FlexibleServerActiveDirectoryAdministratorOutput {
	return i.ToFlexibleServerActiveDirectoryAdministratorOutputWithContext(context.Background())
}

func (i *FlexibleServerActiveDirectoryAdministrator) ToFlexibleServerActiveDirectoryAdministratorOutputWithContext(ctx context.Context) FlexibleServerActiveDirectoryAdministratorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleServerActiveDirectoryAdministratorOutput)
}

// FlexibleServerActiveDirectoryAdministratorArrayInput is an input type that accepts FlexibleServerActiveDirectoryAdministratorArray and FlexibleServerActiveDirectoryAdministratorArrayOutput values.
// You can construct a concrete instance of `FlexibleServerActiveDirectoryAdministratorArrayInput` via:
//
//	FlexibleServerActiveDirectoryAdministratorArray{ FlexibleServerActiveDirectoryAdministratorArgs{...} }
type FlexibleServerActiveDirectoryAdministratorArrayInput interface {
	pulumi.Input

	ToFlexibleServerActiveDirectoryAdministratorArrayOutput() FlexibleServerActiveDirectoryAdministratorArrayOutput
	ToFlexibleServerActiveDirectoryAdministratorArrayOutputWithContext(context.Context) FlexibleServerActiveDirectoryAdministratorArrayOutput
}

type FlexibleServerActiveDirectoryAdministratorArray []FlexibleServerActiveDirectoryAdministratorInput

func (FlexibleServerActiveDirectoryAdministratorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlexibleServerActiveDirectoryAdministrator)(nil)).Elem()
}

func (i FlexibleServerActiveDirectoryAdministratorArray) ToFlexibleServerActiveDirectoryAdministratorArrayOutput() FlexibleServerActiveDirectoryAdministratorArrayOutput {
	return i.ToFlexibleServerActiveDirectoryAdministratorArrayOutputWithContext(context.Background())
}

func (i FlexibleServerActiveDirectoryAdministratorArray) ToFlexibleServerActiveDirectoryAdministratorArrayOutputWithContext(ctx context.Context) FlexibleServerActiveDirectoryAdministratorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleServerActiveDirectoryAdministratorArrayOutput)
}

// FlexibleServerActiveDirectoryAdministratorMapInput is an input type that accepts FlexibleServerActiveDirectoryAdministratorMap and FlexibleServerActiveDirectoryAdministratorMapOutput values.
// You can construct a concrete instance of `FlexibleServerActiveDirectoryAdministratorMapInput` via:
//
//	FlexibleServerActiveDirectoryAdministratorMap{ "key": FlexibleServerActiveDirectoryAdministratorArgs{...} }
type FlexibleServerActiveDirectoryAdministratorMapInput interface {
	pulumi.Input

	ToFlexibleServerActiveDirectoryAdministratorMapOutput() FlexibleServerActiveDirectoryAdministratorMapOutput
	ToFlexibleServerActiveDirectoryAdministratorMapOutputWithContext(context.Context) FlexibleServerActiveDirectoryAdministratorMapOutput
}

type FlexibleServerActiveDirectoryAdministratorMap map[string]FlexibleServerActiveDirectoryAdministratorInput

func (FlexibleServerActiveDirectoryAdministratorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlexibleServerActiveDirectoryAdministrator)(nil)).Elem()
}

func (i FlexibleServerActiveDirectoryAdministratorMap) ToFlexibleServerActiveDirectoryAdministratorMapOutput() FlexibleServerActiveDirectoryAdministratorMapOutput {
	return i.ToFlexibleServerActiveDirectoryAdministratorMapOutputWithContext(context.Background())
}

func (i FlexibleServerActiveDirectoryAdministratorMap) ToFlexibleServerActiveDirectoryAdministratorMapOutputWithContext(ctx context.Context) FlexibleServerActiveDirectoryAdministratorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleServerActiveDirectoryAdministratorMapOutput)
}

type FlexibleServerActiveDirectoryAdministratorOutput struct{ *pulumi.OutputState }

func (FlexibleServerActiveDirectoryAdministratorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexibleServerActiveDirectoryAdministrator)(nil)).Elem()
}

func (o FlexibleServerActiveDirectoryAdministratorOutput) ToFlexibleServerActiveDirectoryAdministratorOutput() FlexibleServerActiveDirectoryAdministratorOutput {
	return o
}

func (o FlexibleServerActiveDirectoryAdministratorOutput) ToFlexibleServerActiveDirectoryAdministratorOutputWithContext(ctx context.Context) FlexibleServerActiveDirectoryAdministratorOutput {
	return o
}

func (o FlexibleServerActiveDirectoryAdministratorOutput) IdentityId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleServerActiveDirectoryAdministrator) pulumi.StringOutput { return v.IdentityId }).(pulumi.StringOutput)
}

func (o FlexibleServerActiveDirectoryAdministratorOutput) Login() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleServerActiveDirectoryAdministrator) pulumi.StringOutput { return v.Login }).(pulumi.StringOutput)
}

func (o FlexibleServerActiveDirectoryAdministratorOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleServerActiveDirectoryAdministrator) pulumi.StringOutput { return v.ObjectId }).(pulumi.StringOutput)
}

func (o FlexibleServerActiveDirectoryAdministratorOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleServerActiveDirectoryAdministrator) pulumi.StringOutput { return v.ServerId }).(pulumi.StringOutput)
}

func (o FlexibleServerActiveDirectoryAdministratorOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleServerActiveDirectoryAdministrator) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type FlexibleServerActiveDirectoryAdministratorArrayOutput struct{ *pulumi.OutputState }

func (FlexibleServerActiveDirectoryAdministratorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlexibleServerActiveDirectoryAdministrator)(nil)).Elem()
}

func (o FlexibleServerActiveDirectoryAdministratorArrayOutput) ToFlexibleServerActiveDirectoryAdministratorArrayOutput() FlexibleServerActiveDirectoryAdministratorArrayOutput {
	return o
}

func (o FlexibleServerActiveDirectoryAdministratorArrayOutput) ToFlexibleServerActiveDirectoryAdministratorArrayOutputWithContext(ctx context.Context) FlexibleServerActiveDirectoryAdministratorArrayOutput {
	return o
}

func (o FlexibleServerActiveDirectoryAdministratorArrayOutput) Index(i pulumi.IntInput) FlexibleServerActiveDirectoryAdministratorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FlexibleServerActiveDirectoryAdministrator {
		return vs[0].([]*FlexibleServerActiveDirectoryAdministrator)[vs[1].(int)]
	}).(FlexibleServerActiveDirectoryAdministratorOutput)
}

type FlexibleServerActiveDirectoryAdministratorMapOutput struct{ *pulumi.OutputState }

func (FlexibleServerActiveDirectoryAdministratorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlexibleServerActiveDirectoryAdministrator)(nil)).Elem()
}

func (o FlexibleServerActiveDirectoryAdministratorMapOutput) ToFlexibleServerActiveDirectoryAdministratorMapOutput() FlexibleServerActiveDirectoryAdministratorMapOutput {
	return o
}

func (o FlexibleServerActiveDirectoryAdministratorMapOutput) ToFlexibleServerActiveDirectoryAdministratorMapOutputWithContext(ctx context.Context) FlexibleServerActiveDirectoryAdministratorMapOutput {
	return o
}

func (o FlexibleServerActiveDirectoryAdministratorMapOutput) MapIndex(k pulumi.StringInput) FlexibleServerActiveDirectoryAdministratorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FlexibleServerActiveDirectoryAdministrator {
		return vs[0].(map[string]*FlexibleServerActiveDirectoryAdministrator)[vs[1].(string)]
	}).(FlexibleServerActiveDirectoryAdministratorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleServerActiveDirectoryAdministratorInput)(nil)).Elem(), &FlexibleServerActiveDirectoryAdministrator{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleServerActiveDirectoryAdministratorArrayInput)(nil)).Elem(), FlexibleServerActiveDirectoryAdministratorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleServerActiveDirectoryAdministratorMapInput)(nil)).Elem(), FlexibleServerActiveDirectoryAdministratorMap{})
	pulumi.RegisterOutputType(FlexibleServerActiveDirectoryAdministratorOutput{})
	pulumi.RegisterOutputType(FlexibleServerActiveDirectoryAdministratorArrayOutput{})
	pulumi.RegisterOutputType(FlexibleServerActiveDirectoryAdministratorMapOutput{})
}
