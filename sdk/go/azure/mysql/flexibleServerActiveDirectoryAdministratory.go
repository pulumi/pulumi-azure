// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mysql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FlexibleServerActiveDirectoryAdministratory struct {
	pulumi.CustomResourceState

	IdentityId pulumi.StringOutput `pulumi:"identityId"`
	Login      pulumi.StringOutput `pulumi:"login"`
	ObjectId   pulumi.StringOutput `pulumi:"objectId"`
	ServerId   pulumi.StringOutput `pulumi:"serverId"`
	TenantId   pulumi.StringOutput `pulumi:"tenantId"`
}

// NewFlexibleServerActiveDirectoryAdministratory registers a new resource with the given unique name, arguments, and options.
func NewFlexibleServerActiveDirectoryAdministratory(ctx *pulumi.Context,
	name string, args *FlexibleServerActiveDirectoryAdministratoryArgs, opts ...pulumi.ResourceOption) (*FlexibleServerActiveDirectoryAdministratory, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IdentityId == nil {
		return nil, errors.New("invalid value for required argument 'IdentityId'")
	}
	if args.Login == nil {
		return nil, errors.New("invalid value for required argument 'Login'")
	}
	if args.ObjectId == nil {
		return nil, errors.New("invalid value for required argument 'ObjectId'")
	}
	if args.ServerId == nil {
		return nil, errors.New("invalid value for required argument 'ServerId'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure:mysql/flexibleServerActiveDirectoryAdministrator:FlexibleServerActiveDirectoryAdministrator"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FlexibleServerActiveDirectoryAdministratory
	err := ctx.RegisterResource("azure:mysql/flexibleServerActiveDirectoryAdministratory:FlexibleServerActiveDirectoryAdministratory", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFlexibleServerActiveDirectoryAdministratory gets an existing FlexibleServerActiveDirectoryAdministratory resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFlexibleServerActiveDirectoryAdministratory(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FlexibleServerActiveDirectoryAdministratoryState, opts ...pulumi.ResourceOption) (*FlexibleServerActiveDirectoryAdministratory, error) {
	var resource FlexibleServerActiveDirectoryAdministratory
	err := ctx.ReadResource("azure:mysql/flexibleServerActiveDirectoryAdministratory:FlexibleServerActiveDirectoryAdministratory", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FlexibleServerActiveDirectoryAdministratory resources.
type flexibleServerActiveDirectoryAdministratoryState struct {
	IdentityId *string `pulumi:"identityId"`
	Login      *string `pulumi:"login"`
	ObjectId   *string `pulumi:"objectId"`
	ServerId   *string `pulumi:"serverId"`
	TenantId   *string `pulumi:"tenantId"`
}

type FlexibleServerActiveDirectoryAdministratoryState struct {
	IdentityId pulumi.StringPtrInput
	Login      pulumi.StringPtrInput
	ObjectId   pulumi.StringPtrInput
	ServerId   pulumi.StringPtrInput
	TenantId   pulumi.StringPtrInput
}

func (FlexibleServerActiveDirectoryAdministratoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*flexibleServerActiveDirectoryAdministratoryState)(nil)).Elem()
}

type flexibleServerActiveDirectoryAdministratoryArgs struct {
	IdentityId string `pulumi:"identityId"`
	Login      string `pulumi:"login"`
	ObjectId   string `pulumi:"objectId"`
	ServerId   string `pulumi:"serverId"`
	TenantId   string `pulumi:"tenantId"`
}

// The set of arguments for constructing a FlexibleServerActiveDirectoryAdministratory resource.
type FlexibleServerActiveDirectoryAdministratoryArgs struct {
	IdentityId pulumi.StringInput
	Login      pulumi.StringInput
	ObjectId   pulumi.StringInput
	ServerId   pulumi.StringInput
	TenantId   pulumi.StringInput
}

func (FlexibleServerActiveDirectoryAdministratoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*flexibleServerActiveDirectoryAdministratoryArgs)(nil)).Elem()
}

type FlexibleServerActiveDirectoryAdministratoryInput interface {
	pulumi.Input

	ToFlexibleServerActiveDirectoryAdministratoryOutput() FlexibleServerActiveDirectoryAdministratoryOutput
	ToFlexibleServerActiveDirectoryAdministratoryOutputWithContext(ctx context.Context) FlexibleServerActiveDirectoryAdministratoryOutput
}

func (*FlexibleServerActiveDirectoryAdministratory) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexibleServerActiveDirectoryAdministratory)(nil)).Elem()
}

func (i *FlexibleServerActiveDirectoryAdministratory) ToFlexibleServerActiveDirectoryAdministratoryOutput() FlexibleServerActiveDirectoryAdministratoryOutput {
	return i.ToFlexibleServerActiveDirectoryAdministratoryOutputWithContext(context.Background())
}

func (i *FlexibleServerActiveDirectoryAdministratory) ToFlexibleServerActiveDirectoryAdministratoryOutputWithContext(ctx context.Context) FlexibleServerActiveDirectoryAdministratoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleServerActiveDirectoryAdministratoryOutput)
}

// FlexibleServerActiveDirectoryAdministratoryArrayInput is an input type that accepts FlexibleServerActiveDirectoryAdministratoryArray and FlexibleServerActiveDirectoryAdministratoryArrayOutput values.
// You can construct a concrete instance of `FlexibleServerActiveDirectoryAdministratoryArrayInput` via:
//
//	FlexibleServerActiveDirectoryAdministratoryArray{ FlexibleServerActiveDirectoryAdministratoryArgs{...} }
type FlexibleServerActiveDirectoryAdministratoryArrayInput interface {
	pulumi.Input

	ToFlexibleServerActiveDirectoryAdministratoryArrayOutput() FlexibleServerActiveDirectoryAdministratoryArrayOutput
	ToFlexibleServerActiveDirectoryAdministratoryArrayOutputWithContext(context.Context) FlexibleServerActiveDirectoryAdministratoryArrayOutput
}

type FlexibleServerActiveDirectoryAdministratoryArray []FlexibleServerActiveDirectoryAdministratoryInput

func (FlexibleServerActiveDirectoryAdministratoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlexibleServerActiveDirectoryAdministratory)(nil)).Elem()
}

func (i FlexibleServerActiveDirectoryAdministratoryArray) ToFlexibleServerActiveDirectoryAdministratoryArrayOutput() FlexibleServerActiveDirectoryAdministratoryArrayOutput {
	return i.ToFlexibleServerActiveDirectoryAdministratoryArrayOutputWithContext(context.Background())
}

func (i FlexibleServerActiveDirectoryAdministratoryArray) ToFlexibleServerActiveDirectoryAdministratoryArrayOutputWithContext(ctx context.Context) FlexibleServerActiveDirectoryAdministratoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleServerActiveDirectoryAdministratoryArrayOutput)
}

// FlexibleServerActiveDirectoryAdministratoryMapInput is an input type that accepts FlexibleServerActiveDirectoryAdministratoryMap and FlexibleServerActiveDirectoryAdministratoryMapOutput values.
// You can construct a concrete instance of `FlexibleServerActiveDirectoryAdministratoryMapInput` via:
//
//	FlexibleServerActiveDirectoryAdministratoryMap{ "key": FlexibleServerActiveDirectoryAdministratoryArgs{...} }
type FlexibleServerActiveDirectoryAdministratoryMapInput interface {
	pulumi.Input

	ToFlexibleServerActiveDirectoryAdministratoryMapOutput() FlexibleServerActiveDirectoryAdministratoryMapOutput
	ToFlexibleServerActiveDirectoryAdministratoryMapOutputWithContext(context.Context) FlexibleServerActiveDirectoryAdministratoryMapOutput
}

type FlexibleServerActiveDirectoryAdministratoryMap map[string]FlexibleServerActiveDirectoryAdministratoryInput

func (FlexibleServerActiveDirectoryAdministratoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlexibleServerActiveDirectoryAdministratory)(nil)).Elem()
}

func (i FlexibleServerActiveDirectoryAdministratoryMap) ToFlexibleServerActiveDirectoryAdministratoryMapOutput() FlexibleServerActiveDirectoryAdministratoryMapOutput {
	return i.ToFlexibleServerActiveDirectoryAdministratoryMapOutputWithContext(context.Background())
}

func (i FlexibleServerActiveDirectoryAdministratoryMap) ToFlexibleServerActiveDirectoryAdministratoryMapOutputWithContext(ctx context.Context) FlexibleServerActiveDirectoryAdministratoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleServerActiveDirectoryAdministratoryMapOutput)
}

type FlexibleServerActiveDirectoryAdministratoryOutput struct{ *pulumi.OutputState }

func (FlexibleServerActiveDirectoryAdministratoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexibleServerActiveDirectoryAdministratory)(nil)).Elem()
}

func (o FlexibleServerActiveDirectoryAdministratoryOutput) ToFlexibleServerActiveDirectoryAdministratoryOutput() FlexibleServerActiveDirectoryAdministratoryOutput {
	return o
}

func (o FlexibleServerActiveDirectoryAdministratoryOutput) ToFlexibleServerActiveDirectoryAdministratoryOutputWithContext(ctx context.Context) FlexibleServerActiveDirectoryAdministratoryOutput {
	return o
}

func (o FlexibleServerActiveDirectoryAdministratoryOutput) IdentityId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleServerActiveDirectoryAdministratory) pulumi.StringOutput { return v.IdentityId }).(pulumi.StringOutput)
}

func (o FlexibleServerActiveDirectoryAdministratoryOutput) Login() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleServerActiveDirectoryAdministratory) pulumi.StringOutput { return v.Login }).(pulumi.StringOutput)
}

func (o FlexibleServerActiveDirectoryAdministratoryOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleServerActiveDirectoryAdministratory) pulumi.StringOutput { return v.ObjectId }).(pulumi.StringOutput)
}

func (o FlexibleServerActiveDirectoryAdministratoryOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleServerActiveDirectoryAdministratory) pulumi.StringOutput { return v.ServerId }).(pulumi.StringOutput)
}

func (o FlexibleServerActiveDirectoryAdministratoryOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleServerActiveDirectoryAdministratory) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type FlexibleServerActiveDirectoryAdministratoryArrayOutput struct{ *pulumi.OutputState }

func (FlexibleServerActiveDirectoryAdministratoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlexibleServerActiveDirectoryAdministratory)(nil)).Elem()
}

func (o FlexibleServerActiveDirectoryAdministratoryArrayOutput) ToFlexibleServerActiveDirectoryAdministratoryArrayOutput() FlexibleServerActiveDirectoryAdministratoryArrayOutput {
	return o
}

func (o FlexibleServerActiveDirectoryAdministratoryArrayOutput) ToFlexibleServerActiveDirectoryAdministratoryArrayOutputWithContext(ctx context.Context) FlexibleServerActiveDirectoryAdministratoryArrayOutput {
	return o
}

func (o FlexibleServerActiveDirectoryAdministratoryArrayOutput) Index(i pulumi.IntInput) FlexibleServerActiveDirectoryAdministratoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FlexibleServerActiveDirectoryAdministratory {
		return vs[0].([]*FlexibleServerActiveDirectoryAdministratory)[vs[1].(int)]
	}).(FlexibleServerActiveDirectoryAdministratoryOutput)
}

type FlexibleServerActiveDirectoryAdministratoryMapOutput struct{ *pulumi.OutputState }

func (FlexibleServerActiveDirectoryAdministratoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlexibleServerActiveDirectoryAdministratory)(nil)).Elem()
}

func (o FlexibleServerActiveDirectoryAdministratoryMapOutput) ToFlexibleServerActiveDirectoryAdministratoryMapOutput() FlexibleServerActiveDirectoryAdministratoryMapOutput {
	return o
}

func (o FlexibleServerActiveDirectoryAdministratoryMapOutput) ToFlexibleServerActiveDirectoryAdministratoryMapOutputWithContext(ctx context.Context) FlexibleServerActiveDirectoryAdministratoryMapOutput {
	return o
}

func (o FlexibleServerActiveDirectoryAdministratoryMapOutput) MapIndex(k pulumi.StringInput) FlexibleServerActiveDirectoryAdministratoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FlexibleServerActiveDirectoryAdministratory {
		return vs[0].(map[string]*FlexibleServerActiveDirectoryAdministratory)[vs[1].(string)]
	}).(FlexibleServerActiveDirectoryAdministratoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleServerActiveDirectoryAdministratoryInput)(nil)).Elem(), &FlexibleServerActiveDirectoryAdministratory{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleServerActiveDirectoryAdministratoryArrayInput)(nil)).Elem(), FlexibleServerActiveDirectoryAdministratoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleServerActiveDirectoryAdministratoryMapInput)(nil)).Elem(), FlexibleServerActiveDirectoryAdministratoryMap{})
	pulumi.RegisterOutputType(FlexibleServerActiveDirectoryAdministratoryOutput{})
	pulumi.RegisterOutputType(FlexibleServerActiveDirectoryAdministratoryArrayOutput{})
	pulumi.RegisterOutputType(FlexibleServerActiveDirectoryAdministratoryMapOutput{})
}
