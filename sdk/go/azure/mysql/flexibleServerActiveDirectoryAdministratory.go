// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mysql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Active Directory administrator on a MySQL Flexible Server
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/authorization"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/mysql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := core.GetClientConfig(ctx, map[string]interface{}{}, nil)
//			if err != nil {
//				return err
//			}
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resources"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleUserAssignedIdentity, err := authorization.NewUserAssignedIdentity(ctx, "example", &authorization.UserAssignedIdentityArgs{
//				Name:              pulumi.String("exampleUAI"),
//				ResourceGroupName: example.Name,
//				Location:          example.Location,
//			})
//			if err != nil {
//				return err
//			}
//			exampleFlexibleServer, err := mysql.NewFlexibleServer(ctx, "example", &mysql.FlexibleServerArgs{
//				Name:                  pulumi.String("example-mysqlfs"),
//				ResourceGroupName:     example.Name,
//				Location:              example.Location,
//				AdministratorLogin:    pulumi.String("_admin_Terraform_892123456789312"),
//				AdministratorPassword: pulumi.String("QAZwsx123"),
//				SkuName:               pulumi.String("B_Standard_B1ms"),
//				Zone:                  pulumi.String("2"),
//				Identity: &mysql.FlexibleServerIdentityArgs{
//					Type: pulumi.String("UserAssigned"),
//					IdentityIds: pulumi.StringArray{
//						exampleUserAssignedIdentity.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mysql.NewFlexibleServerActiveDirectoryAdministratory(ctx, "example", &mysql.FlexibleServerActiveDirectoryAdministratoryArgs{
//				ServerId:   exampleFlexibleServer.ID(),
//				IdentityId: exampleUserAssignedIdentity.ID(),
//				Login:      pulumi.String("sqladmin"),
//				ObjectId:   pulumi.String(current.ClientId),
//				TenantId:   pulumi.String(current.TenantId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This resource uses the following Azure API Providers:
//
// * `Microsoft.DBforMySQL` - 2023-12-30
//
// ## Import
//
// A MySQL Flexible Server Active Directory Administrator can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:mysql/flexibleServerActiveDirectoryAdministratory:FlexibleServerActiveDirectoryAdministratory example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.DBforMySQL/flexibleServers/server1/administrators/ActiveDirectory
// ```
type FlexibleServerActiveDirectoryAdministratory struct {
	pulumi.CustomResourceState

	// The resource ID of the identity used for AAD Authentication.
	IdentityId pulumi.StringOutput `pulumi:"identityId"`
	// The login name of the principal to set as the server administrator
	Login pulumi.StringOutput `pulumi:"login"`
	// The ID of the principal to set as the server administrator. For a managed identity this should be the Client ID of the identity.
	ObjectId pulumi.StringOutput `pulumi:"objectId"`
	// The resource ID of the MySQL Flexible Server. Changing this forces a new resource to be created.
	ServerId pulumi.StringOutput `pulumi:"serverId"`
	// The Azure Tenant ID.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewFlexibleServerActiveDirectoryAdministratory registers a new resource with the given unique name, arguments, and options.
func NewFlexibleServerActiveDirectoryAdministratory(ctx *pulumi.Context,
	name string, args *FlexibleServerActiveDirectoryAdministratoryArgs, opts ...pulumi.ResourceOption) (*FlexibleServerActiveDirectoryAdministratory, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IdentityId == nil {
		return nil, errors.New("invalid value for required argument 'IdentityId'")
	}
	if args.Login == nil {
		return nil, errors.New("invalid value for required argument 'Login'")
	}
	if args.ObjectId == nil {
		return nil, errors.New("invalid value for required argument 'ObjectId'")
	}
	if args.ServerId == nil {
		return nil, errors.New("invalid value for required argument 'ServerId'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure:mysql/flexibleServerActiveDirectoryAdministrator:FlexibleServerActiveDirectoryAdministrator"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FlexibleServerActiveDirectoryAdministratory
	err := ctx.RegisterResource("azure:mysql/flexibleServerActiveDirectoryAdministratory:FlexibleServerActiveDirectoryAdministratory", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFlexibleServerActiveDirectoryAdministratory gets an existing FlexibleServerActiveDirectoryAdministratory resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFlexibleServerActiveDirectoryAdministratory(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FlexibleServerActiveDirectoryAdministratoryState, opts ...pulumi.ResourceOption) (*FlexibleServerActiveDirectoryAdministratory, error) {
	var resource FlexibleServerActiveDirectoryAdministratory
	err := ctx.ReadResource("azure:mysql/flexibleServerActiveDirectoryAdministratory:FlexibleServerActiveDirectoryAdministratory", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FlexibleServerActiveDirectoryAdministratory resources.
type flexibleServerActiveDirectoryAdministratoryState struct {
	// The resource ID of the identity used for AAD Authentication.
	IdentityId *string `pulumi:"identityId"`
	// The login name of the principal to set as the server administrator
	Login *string `pulumi:"login"`
	// The ID of the principal to set as the server administrator. For a managed identity this should be the Client ID of the identity.
	ObjectId *string `pulumi:"objectId"`
	// The resource ID of the MySQL Flexible Server. Changing this forces a new resource to be created.
	ServerId *string `pulumi:"serverId"`
	// The Azure Tenant ID.
	TenantId *string `pulumi:"tenantId"`
}

type FlexibleServerActiveDirectoryAdministratoryState struct {
	// The resource ID of the identity used for AAD Authentication.
	IdentityId pulumi.StringPtrInput
	// The login name of the principal to set as the server administrator
	Login pulumi.StringPtrInput
	// The ID of the principal to set as the server administrator. For a managed identity this should be the Client ID of the identity.
	ObjectId pulumi.StringPtrInput
	// The resource ID of the MySQL Flexible Server. Changing this forces a new resource to be created.
	ServerId pulumi.StringPtrInput
	// The Azure Tenant ID.
	TenantId pulumi.StringPtrInput
}

func (FlexibleServerActiveDirectoryAdministratoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*flexibleServerActiveDirectoryAdministratoryState)(nil)).Elem()
}

type flexibleServerActiveDirectoryAdministratoryArgs struct {
	// The resource ID of the identity used for AAD Authentication.
	IdentityId string `pulumi:"identityId"`
	// The login name of the principal to set as the server administrator
	Login string `pulumi:"login"`
	// The ID of the principal to set as the server administrator. For a managed identity this should be the Client ID of the identity.
	ObjectId string `pulumi:"objectId"`
	// The resource ID of the MySQL Flexible Server. Changing this forces a new resource to be created.
	ServerId string `pulumi:"serverId"`
	// The Azure Tenant ID.
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a FlexibleServerActiveDirectoryAdministratory resource.
type FlexibleServerActiveDirectoryAdministratoryArgs struct {
	// The resource ID of the identity used for AAD Authentication.
	IdentityId pulumi.StringInput
	// The login name of the principal to set as the server administrator
	Login pulumi.StringInput
	// The ID of the principal to set as the server administrator. For a managed identity this should be the Client ID of the identity.
	ObjectId pulumi.StringInput
	// The resource ID of the MySQL Flexible Server. Changing this forces a new resource to be created.
	ServerId pulumi.StringInput
	// The Azure Tenant ID.
	TenantId pulumi.StringInput
}

func (FlexibleServerActiveDirectoryAdministratoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*flexibleServerActiveDirectoryAdministratoryArgs)(nil)).Elem()
}

type FlexibleServerActiveDirectoryAdministratoryInput interface {
	pulumi.Input

	ToFlexibleServerActiveDirectoryAdministratoryOutput() FlexibleServerActiveDirectoryAdministratoryOutput
	ToFlexibleServerActiveDirectoryAdministratoryOutputWithContext(ctx context.Context) FlexibleServerActiveDirectoryAdministratoryOutput
}

func (*FlexibleServerActiveDirectoryAdministratory) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexibleServerActiveDirectoryAdministratory)(nil)).Elem()
}

func (i *FlexibleServerActiveDirectoryAdministratory) ToFlexibleServerActiveDirectoryAdministratoryOutput() FlexibleServerActiveDirectoryAdministratoryOutput {
	return i.ToFlexibleServerActiveDirectoryAdministratoryOutputWithContext(context.Background())
}

func (i *FlexibleServerActiveDirectoryAdministratory) ToFlexibleServerActiveDirectoryAdministratoryOutputWithContext(ctx context.Context) FlexibleServerActiveDirectoryAdministratoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleServerActiveDirectoryAdministratoryOutput)
}

// FlexibleServerActiveDirectoryAdministratoryArrayInput is an input type that accepts FlexibleServerActiveDirectoryAdministratoryArray and FlexibleServerActiveDirectoryAdministratoryArrayOutput values.
// You can construct a concrete instance of `FlexibleServerActiveDirectoryAdministratoryArrayInput` via:
//
//	FlexibleServerActiveDirectoryAdministratoryArray{ FlexibleServerActiveDirectoryAdministratoryArgs{...} }
type FlexibleServerActiveDirectoryAdministratoryArrayInput interface {
	pulumi.Input

	ToFlexibleServerActiveDirectoryAdministratoryArrayOutput() FlexibleServerActiveDirectoryAdministratoryArrayOutput
	ToFlexibleServerActiveDirectoryAdministratoryArrayOutputWithContext(context.Context) FlexibleServerActiveDirectoryAdministratoryArrayOutput
}

type FlexibleServerActiveDirectoryAdministratoryArray []FlexibleServerActiveDirectoryAdministratoryInput

func (FlexibleServerActiveDirectoryAdministratoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlexibleServerActiveDirectoryAdministratory)(nil)).Elem()
}

func (i FlexibleServerActiveDirectoryAdministratoryArray) ToFlexibleServerActiveDirectoryAdministratoryArrayOutput() FlexibleServerActiveDirectoryAdministratoryArrayOutput {
	return i.ToFlexibleServerActiveDirectoryAdministratoryArrayOutputWithContext(context.Background())
}

func (i FlexibleServerActiveDirectoryAdministratoryArray) ToFlexibleServerActiveDirectoryAdministratoryArrayOutputWithContext(ctx context.Context) FlexibleServerActiveDirectoryAdministratoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleServerActiveDirectoryAdministratoryArrayOutput)
}

// FlexibleServerActiveDirectoryAdministratoryMapInput is an input type that accepts FlexibleServerActiveDirectoryAdministratoryMap and FlexibleServerActiveDirectoryAdministratoryMapOutput values.
// You can construct a concrete instance of `FlexibleServerActiveDirectoryAdministratoryMapInput` via:
//
//	FlexibleServerActiveDirectoryAdministratoryMap{ "key": FlexibleServerActiveDirectoryAdministratoryArgs{...} }
type FlexibleServerActiveDirectoryAdministratoryMapInput interface {
	pulumi.Input

	ToFlexibleServerActiveDirectoryAdministratoryMapOutput() FlexibleServerActiveDirectoryAdministratoryMapOutput
	ToFlexibleServerActiveDirectoryAdministratoryMapOutputWithContext(context.Context) FlexibleServerActiveDirectoryAdministratoryMapOutput
}

type FlexibleServerActiveDirectoryAdministratoryMap map[string]FlexibleServerActiveDirectoryAdministratoryInput

func (FlexibleServerActiveDirectoryAdministratoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlexibleServerActiveDirectoryAdministratory)(nil)).Elem()
}

func (i FlexibleServerActiveDirectoryAdministratoryMap) ToFlexibleServerActiveDirectoryAdministratoryMapOutput() FlexibleServerActiveDirectoryAdministratoryMapOutput {
	return i.ToFlexibleServerActiveDirectoryAdministratoryMapOutputWithContext(context.Background())
}

func (i FlexibleServerActiveDirectoryAdministratoryMap) ToFlexibleServerActiveDirectoryAdministratoryMapOutputWithContext(ctx context.Context) FlexibleServerActiveDirectoryAdministratoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleServerActiveDirectoryAdministratoryMapOutput)
}

type FlexibleServerActiveDirectoryAdministratoryOutput struct{ *pulumi.OutputState }

func (FlexibleServerActiveDirectoryAdministratoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexibleServerActiveDirectoryAdministratory)(nil)).Elem()
}

func (o FlexibleServerActiveDirectoryAdministratoryOutput) ToFlexibleServerActiveDirectoryAdministratoryOutput() FlexibleServerActiveDirectoryAdministratoryOutput {
	return o
}

func (o FlexibleServerActiveDirectoryAdministratoryOutput) ToFlexibleServerActiveDirectoryAdministratoryOutputWithContext(ctx context.Context) FlexibleServerActiveDirectoryAdministratoryOutput {
	return o
}

// The resource ID of the identity used for AAD Authentication.
func (o FlexibleServerActiveDirectoryAdministratoryOutput) IdentityId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleServerActiveDirectoryAdministratory) pulumi.StringOutput { return v.IdentityId }).(pulumi.StringOutput)
}

// The login name of the principal to set as the server administrator
func (o FlexibleServerActiveDirectoryAdministratoryOutput) Login() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleServerActiveDirectoryAdministratory) pulumi.StringOutput { return v.Login }).(pulumi.StringOutput)
}

// The ID of the principal to set as the server administrator. For a managed identity this should be the Client ID of the identity.
func (o FlexibleServerActiveDirectoryAdministratoryOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleServerActiveDirectoryAdministratory) pulumi.StringOutput { return v.ObjectId }).(pulumi.StringOutput)
}

// The resource ID of the MySQL Flexible Server. Changing this forces a new resource to be created.
func (o FlexibleServerActiveDirectoryAdministratoryOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleServerActiveDirectoryAdministratory) pulumi.StringOutput { return v.ServerId }).(pulumi.StringOutput)
}

// The Azure Tenant ID.
func (o FlexibleServerActiveDirectoryAdministratoryOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleServerActiveDirectoryAdministratory) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type FlexibleServerActiveDirectoryAdministratoryArrayOutput struct{ *pulumi.OutputState }

func (FlexibleServerActiveDirectoryAdministratoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlexibleServerActiveDirectoryAdministratory)(nil)).Elem()
}

func (o FlexibleServerActiveDirectoryAdministratoryArrayOutput) ToFlexibleServerActiveDirectoryAdministratoryArrayOutput() FlexibleServerActiveDirectoryAdministratoryArrayOutput {
	return o
}

func (o FlexibleServerActiveDirectoryAdministratoryArrayOutput) ToFlexibleServerActiveDirectoryAdministratoryArrayOutputWithContext(ctx context.Context) FlexibleServerActiveDirectoryAdministratoryArrayOutput {
	return o
}

func (o FlexibleServerActiveDirectoryAdministratoryArrayOutput) Index(i pulumi.IntInput) FlexibleServerActiveDirectoryAdministratoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FlexibleServerActiveDirectoryAdministratory {
		return vs[0].([]*FlexibleServerActiveDirectoryAdministratory)[vs[1].(int)]
	}).(FlexibleServerActiveDirectoryAdministratoryOutput)
}

type FlexibleServerActiveDirectoryAdministratoryMapOutput struct{ *pulumi.OutputState }

func (FlexibleServerActiveDirectoryAdministratoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlexibleServerActiveDirectoryAdministratory)(nil)).Elem()
}

func (o FlexibleServerActiveDirectoryAdministratoryMapOutput) ToFlexibleServerActiveDirectoryAdministratoryMapOutput() FlexibleServerActiveDirectoryAdministratoryMapOutput {
	return o
}

func (o FlexibleServerActiveDirectoryAdministratoryMapOutput) ToFlexibleServerActiveDirectoryAdministratoryMapOutputWithContext(ctx context.Context) FlexibleServerActiveDirectoryAdministratoryMapOutput {
	return o
}

func (o FlexibleServerActiveDirectoryAdministratoryMapOutput) MapIndex(k pulumi.StringInput) FlexibleServerActiveDirectoryAdministratoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FlexibleServerActiveDirectoryAdministratory {
		return vs[0].(map[string]*FlexibleServerActiveDirectoryAdministratory)[vs[1].(string)]
	}).(FlexibleServerActiveDirectoryAdministratoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleServerActiveDirectoryAdministratoryInput)(nil)).Elem(), &FlexibleServerActiveDirectoryAdministratory{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleServerActiveDirectoryAdministratoryArrayInput)(nil)).Elem(), FlexibleServerActiveDirectoryAdministratoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleServerActiveDirectoryAdministratoryMapInput)(nil)).Elem(), FlexibleServerActiveDirectoryAdministratoryMap{})
	pulumi.RegisterOutputType(FlexibleServerActiveDirectoryAdministratoryOutput{})
	pulumi.RegisterOutputType(FlexibleServerActiveDirectoryAdministratoryArrayOutput{})
	pulumi.RegisterOutputType(FlexibleServerActiveDirectoryAdministratoryMapOutput{})
}
