// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mysql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a MySQL Flexible Server.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/mysql"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/privatedns"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "exampleVirtualNetwork", &network.VirtualNetworkArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleSubnet, err := network.NewSubnet(ctx, "exampleSubnet", &network.SubnetArgs{
//				ResourceGroupName:  exampleResourceGroup.Name,
//				VirtualNetworkName: exampleVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.0.2.0/24"),
//				},
//				ServiceEndpoints: pulumi.StringArray{
//					pulumi.String("Microsoft.Storage"),
//				},
//				Delegations: network.SubnetDelegationArray{
//					&network.SubnetDelegationArgs{
//						Name: pulumi.String("fs"),
//						ServiceDelegation: &network.SubnetDelegationServiceDelegationArgs{
//							Name: pulumi.String("Microsoft.DBforMySQL/flexibleServers"),
//							Actions: pulumi.StringArray{
//								pulumi.String("Microsoft.Network/virtualNetworks/subnets/join/action"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleZone, err := privatedns.NewZone(ctx, "exampleZone", &privatedns.ZoneArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			exampleZoneVirtualNetworkLink, err := privatedns.NewZoneVirtualNetworkLink(ctx, "exampleZoneVirtualNetworkLink", &privatedns.ZoneVirtualNetworkLinkArgs{
//				PrivateDnsZoneName: exampleZone.Name,
//				VirtualNetworkId:   exampleVirtualNetwork.ID(),
//				ResourceGroupName:  exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mysql.NewFlexibleServer(ctx, "exampleFlexibleServer", &mysql.FlexibleServerArgs{
//				ResourceGroupName:     exampleResourceGroup.Name,
//				Location:              exampleResourceGroup.Location,
//				AdministratorLogin:    pulumi.String("psqladmin"),
//				AdministratorPassword: pulumi.String("H@Sh1CoR3!"),
//				BackupRetentionDays:   pulumi.Int(7),
//				DelegatedSubnetId:     exampleSubnet.ID(),
//				PrivateDnsZoneId:      exampleZone.ID(),
//				SkuName:               pulumi.String("GP_Standard_D2ds_v4"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				exampleZoneVirtualNetworkLink,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// MySQL Flexible Servers can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:mysql/flexibleServer:FlexibleServer example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DBforMySQL/flexibleServers/flexibleServer1
//
// ```
type FlexibleServer struct {
	pulumi.CustomResourceState

	// The Administrator login for the MySQL Flexible Server. Required when `createMode` is `Default`. Changing this forces a new MySQL Flexible Server to be created.
	AdministratorLogin pulumi.StringOutput `pulumi:"administratorLogin"`
	// The Password associated with the `administratorLogin` for the MySQL Flexible Server. Required when `createMode` is `Default`.
	AdministratorPassword pulumi.StringPtrOutput `pulumi:"administratorPassword"`
	// The backup retention days for the MySQL Flexible Server. Possible values are between `1` and `35` days. Defaults to `7`.
	BackupRetentionDays pulumi.IntPtrOutput `pulumi:"backupRetentionDays"`
	// The creation mode which can be used to restore or replicate existing servers. Possible values are `Default`, `PointInTimeRestore`, `GeoRestore`, and `Replica`. Changing this forces a new MySQL Flexible Server to be created.
	//
	// > **NOTE:** Creating a `GeoRestore` server requires the source server with `geoRedundantBackupEnabled` enabled.
	//
	// > **NOTE:** When a server is first created it may not be immediately available for `geo restore` or `replica`. It may take a few minutes to several hours for the necessary metadata to be populated. Please see the [Geo Restore](https://learn.microsoft.com/azure/mysql/single-server/how-to-restore-server-portal#geo-restore) and the [Replica](https://learn.microsoft.com/azure/mysql/flexible-server/concepts-read-replicas#create-a-replica) for more information.
	CreateMode pulumi.StringPtrOutput `pulumi:"createMode"`
	// A `customerManagedKey` block as defined below.
	//
	// > **NOTE:** `identity` is required when `customerManagedKey` is specified.
	CustomerManagedKey FlexibleServerCustomerManagedKeyPtrOutput `pulumi:"customerManagedKey"`
	// The ID of the virtual network subnet to create the MySQL Flexible Server. Changing this forces a new MySQL Flexible Server to be created.
	DelegatedSubnetId pulumi.StringPtrOutput `pulumi:"delegatedSubnetId"`
	// The fully qualified domain name of the MySQL Flexible Server.
	Fqdn pulumi.StringOutput `pulumi:"fqdn"`
	// Should geo redundant backup enabled? Defaults to `false`. Changing this forces a new MySQL Flexible Server to be created.
	GeoRedundantBackupEnabled pulumi.BoolPtrOutput `pulumi:"geoRedundantBackupEnabled"`
	// A `highAvailability` block as defined below.
	HighAvailability FlexibleServerHighAvailabilityPtrOutput `pulumi:"highAvailability"`
	// An `identity` block as defined below.
	Identity FlexibleServerIdentityPtrOutput `pulumi:"identity"`
	// The Azure Region where the MySQL Flexible Server should exist. Changing this forces a new MySQL Flexible Server to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// A `maintenanceWindow` block as defined below.
	MaintenanceWindow FlexibleServerMaintenanceWindowPtrOutput `pulumi:"maintenanceWindow"`
	// The name which should be used for this MySQL Flexible Server. Changing this forces a new MySQL Flexible Server to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The point in time to restore from `creationSourceServerId` when `createMode` is `PointInTimeRestore`. Changing this forces a new MySQL Flexible Server to be created.
	PointInTimeRestoreTimeInUtc pulumi.StringPtrOutput `pulumi:"pointInTimeRestoreTimeInUtc"`
	// The ID of the private DNS zone to create the MySQL Flexible Server. Changing this forces a new MySQL Flexible Server to be created.
	//
	// > **NOTE:** The `privateDnsZoneId` is required when setting a `delegatedSubnetId`. The `privatedns.Zone` should end with suffix `.mysql.database.azure.com`.
	PrivateDnsZoneId pulumi.StringPtrOutput `pulumi:"privateDnsZoneId"`
	// Is the public network access enabled?
	PublicNetworkAccessEnabled pulumi.BoolOutput `pulumi:"publicNetworkAccessEnabled"`
	// The maximum number of replicas that a primary MySQL Flexible Server can have.
	ReplicaCapacity pulumi.IntOutput `pulumi:"replicaCapacity"`
	// The replication role. Possible value is `None`.
	//
	// > **NOTE:** The `replicationRole` cannot be set while creating and only can be updated from `Replica` to `None`.
	ReplicationRole pulumi.StringOutput `pulumi:"replicationRole"`
	// The name of the Resource Group where the MySQL Flexible Server should exist. Changing this forces a new MySQL Flexible Server to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The SKU Name for the MySQL Flexible Server.
	//
	// > **NOTE:** `skuName` should start with SKU tier `B (Burstable)`, `GP (General Purpose)`, `MO (Memory Optimized)` like `B_Standard_B1s`.
	SkuName pulumi.StringOutput `pulumi:"skuName"`
	// The resource ID of the source MySQL Flexible Server to be restored. Required when `createMode` is `PointInTimeRestore`, `GeoRestore`, and `Replica`. Changing this forces a new MySQL Flexible Server to be created.
	SourceServerId pulumi.StringPtrOutput `pulumi:"sourceServerId"`
	// A `storage` block as defined below.
	Storage FlexibleServerStorageOutput `pulumi:"storage"`
	// A mapping of tags which should be assigned to the MySQL Flexible Server.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The version of the MySQL Flexible Server to use. Possible values are `5.7`, and `8.0.21`. Changing this forces a new MySQL Flexible Server to be created.
	Version pulumi.StringOutput    `pulumi:"version"`
	Zone    pulumi.StringPtrOutput `pulumi:"zone"`
}

// NewFlexibleServer registers a new resource with the given unique name, arguments, and options.
func NewFlexibleServer(ctx *pulumi.Context,
	name string, args *FlexibleServerArgs, opts ...pulumi.ResourceOption) (*FlexibleServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.AdministratorPassword != nil {
		args.AdministratorPassword = pulumi.ToSecret(args.AdministratorPassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"administratorPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FlexibleServer
	err := ctx.RegisterResource("azure:mysql/flexibleServer:FlexibleServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFlexibleServer gets an existing FlexibleServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFlexibleServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FlexibleServerState, opts ...pulumi.ResourceOption) (*FlexibleServer, error) {
	var resource FlexibleServer
	err := ctx.ReadResource("azure:mysql/flexibleServer:FlexibleServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FlexibleServer resources.
type flexibleServerState struct {
	// The Administrator login for the MySQL Flexible Server. Required when `createMode` is `Default`. Changing this forces a new MySQL Flexible Server to be created.
	AdministratorLogin *string `pulumi:"administratorLogin"`
	// The Password associated with the `administratorLogin` for the MySQL Flexible Server. Required when `createMode` is `Default`.
	AdministratorPassword *string `pulumi:"administratorPassword"`
	// The backup retention days for the MySQL Flexible Server. Possible values are between `1` and `35` days. Defaults to `7`.
	BackupRetentionDays *int `pulumi:"backupRetentionDays"`
	// The creation mode which can be used to restore or replicate existing servers. Possible values are `Default`, `PointInTimeRestore`, `GeoRestore`, and `Replica`. Changing this forces a new MySQL Flexible Server to be created.
	//
	// > **NOTE:** Creating a `GeoRestore` server requires the source server with `geoRedundantBackupEnabled` enabled.
	//
	// > **NOTE:** When a server is first created it may not be immediately available for `geo restore` or `replica`. It may take a few minutes to several hours for the necessary metadata to be populated. Please see the [Geo Restore](https://learn.microsoft.com/azure/mysql/single-server/how-to-restore-server-portal#geo-restore) and the [Replica](https://learn.microsoft.com/azure/mysql/flexible-server/concepts-read-replicas#create-a-replica) for more information.
	CreateMode *string `pulumi:"createMode"`
	// A `customerManagedKey` block as defined below.
	//
	// > **NOTE:** `identity` is required when `customerManagedKey` is specified.
	CustomerManagedKey *FlexibleServerCustomerManagedKey `pulumi:"customerManagedKey"`
	// The ID of the virtual network subnet to create the MySQL Flexible Server. Changing this forces a new MySQL Flexible Server to be created.
	DelegatedSubnetId *string `pulumi:"delegatedSubnetId"`
	// The fully qualified domain name of the MySQL Flexible Server.
	Fqdn *string `pulumi:"fqdn"`
	// Should geo redundant backup enabled? Defaults to `false`. Changing this forces a new MySQL Flexible Server to be created.
	GeoRedundantBackupEnabled *bool `pulumi:"geoRedundantBackupEnabled"`
	// A `highAvailability` block as defined below.
	HighAvailability *FlexibleServerHighAvailability `pulumi:"highAvailability"`
	// An `identity` block as defined below.
	Identity *FlexibleServerIdentity `pulumi:"identity"`
	// The Azure Region where the MySQL Flexible Server should exist. Changing this forces a new MySQL Flexible Server to be created.
	Location *string `pulumi:"location"`
	// A `maintenanceWindow` block as defined below.
	MaintenanceWindow *FlexibleServerMaintenanceWindow `pulumi:"maintenanceWindow"`
	// The name which should be used for this MySQL Flexible Server. Changing this forces a new MySQL Flexible Server to be created.
	Name *string `pulumi:"name"`
	// The point in time to restore from `creationSourceServerId` when `createMode` is `PointInTimeRestore`. Changing this forces a new MySQL Flexible Server to be created.
	PointInTimeRestoreTimeInUtc *string `pulumi:"pointInTimeRestoreTimeInUtc"`
	// The ID of the private DNS zone to create the MySQL Flexible Server. Changing this forces a new MySQL Flexible Server to be created.
	//
	// > **NOTE:** The `privateDnsZoneId` is required when setting a `delegatedSubnetId`. The `privatedns.Zone` should end with suffix `.mysql.database.azure.com`.
	PrivateDnsZoneId *string `pulumi:"privateDnsZoneId"`
	// Is the public network access enabled?
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// The maximum number of replicas that a primary MySQL Flexible Server can have.
	ReplicaCapacity *int `pulumi:"replicaCapacity"`
	// The replication role. Possible value is `None`.
	//
	// > **NOTE:** The `replicationRole` cannot be set while creating and only can be updated from `Replica` to `None`.
	ReplicationRole *string `pulumi:"replicationRole"`
	// The name of the Resource Group where the MySQL Flexible Server should exist. Changing this forces a new MySQL Flexible Server to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The SKU Name for the MySQL Flexible Server.
	//
	// > **NOTE:** `skuName` should start with SKU tier `B (Burstable)`, `GP (General Purpose)`, `MO (Memory Optimized)` like `B_Standard_B1s`.
	SkuName *string `pulumi:"skuName"`
	// The resource ID of the source MySQL Flexible Server to be restored. Required when `createMode` is `PointInTimeRestore`, `GeoRestore`, and `Replica`. Changing this forces a new MySQL Flexible Server to be created.
	SourceServerId *string `pulumi:"sourceServerId"`
	// A `storage` block as defined below.
	Storage *FlexibleServerStorage `pulumi:"storage"`
	// A mapping of tags which should be assigned to the MySQL Flexible Server.
	Tags map[string]string `pulumi:"tags"`
	// The version of the MySQL Flexible Server to use. Possible values are `5.7`, and `8.0.21`. Changing this forces a new MySQL Flexible Server to be created.
	Version *string `pulumi:"version"`
	Zone    *string `pulumi:"zone"`
}

type FlexibleServerState struct {
	// The Administrator login for the MySQL Flexible Server. Required when `createMode` is `Default`. Changing this forces a new MySQL Flexible Server to be created.
	AdministratorLogin pulumi.StringPtrInput
	// The Password associated with the `administratorLogin` for the MySQL Flexible Server. Required when `createMode` is `Default`.
	AdministratorPassword pulumi.StringPtrInput
	// The backup retention days for the MySQL Flexible Server. Possible values are between `1` and `35` days. Defaults to `7`.
	BackupRetentionDays pulumi.IntPtrInput
	// The creation mode which can be used to restore or replicate existing servers. Possible values are `Default`, `PointInTimeRestore`, `GeoRestore`, and `Replica`. Changing this forces a new MySQL Flexible Server to be created.
	//
	// > **NOTE:** Creating a `GeoRestore` server requires the source server with `geoRedundantBackupEnabled` enabled.
	//
	// > **NOTE:** When a server is first created it may not be immediately available for `geo restore` or `replica`. It may take a few minutes to several hours for the necessary metadata to be populated. Please see the [Geo Restore](https://learn.microsoft.com/azure/mysql/single-server/how-to-restore-server-portal#geo-restore) and the [Replica](https://learn.microsoft.com/azure/mysql/flexible-server/concepts-read-replicas#create-a-replica) for more information.
	CreateMode pulumi.StringPtrInput
	// A `customerManagedKey` block as defined below.
	//
	// > **NOTE:** `identity` is required when `customerManagedKey` is specified.
	CustomerManagedKey FlexibleServerCustomerManagedKeyPtrInput
	// The ID of the virtual network subnet to create the MySQL Flexible Server. Changing this forces a new MySQL Flexible Server to be created.
	DelegatedSubnetId pulumi.StringPtrInput
	// The fully qualified domain name of the MySQL Flexible Server.
	Fqdn pulumi.StringPtrInput
	// Should geo redundant backup enabled? Defaults to `false`. Changing this forces a new MySQL Flexible Server to be created.
	GeoRedundantBackupEnabled pulumi.BoolPtrInput
	// A `highAvailability` block as defined below.
	HighAvailability FlexibleServerHighAvailabilityPtrInput
	// An `identity` block as defined below.
	Identity FlexibleServerIdentityPtrInput
	// The Azure Region where the MySQL Flexible Server should exist. Changing this forces a new MySQL Flexible Server to be created.
	Location pulumi.StringPtrInput
	// A `maintenanceWindow` block as defined below.
	MaintenanceWindow FlexibleServerMaintenanceWindowPtrInput
	// The name which should be used for this MySQL Flexible Server. Changing this forces a new MySQL Flexible Server to be created.
	Name pulumi.StringPtrInput
	// The point in time to restore from `creationSourceServerId` when `createMode` is `PointInTimeRestore`. Changing this forces a new MySQL Flexible Server to be created.
	PointInTimeRestoreTimeInUtc pulumi.StringPtrInput
	// The ID of the private DNS zone to create the MySQL Flexible Server. Changing this forces a new MySQL Flexible Server to be created.
	//
	// > **NOTE:** The `privateDnsZoneId` is required when setting a `delegatedSubnetId`. The `privatedns.Zone` should end with suffix `.mysql.database.azure.com`.
	PrivateDnsZoneId pulumi.StringPtrInput
	// Is the public network access enabled?
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// The maximum number of replicas that a primary MySQL Flexible Server can have.
	ReplicaCapacity pulumi.IntPtrInput
	// The replication role. Possible value is `None`.
	//
	// > **NOTE:** The `replicationRole` cannot be set while creating and only can be updated from `Replica` to `None`.
	ReplicationRole pulumi.StringPtrInput
	// The name of the Resource Group where the MySQL Flexible Server should exist. Changing this forces a new MySQL Flexible Server to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The SKU Name for the MySQL Flexible Server.
	//
	// > **NOTE:** `skuName` should start with SKU tier `B (Burstable)`, `GP (General Purpose)`, `MO (Memory Optimized)` like `B_Standard_B1s`.
	SkuName pulumi.StringPtrInput
	// The resource ID of the source MySQL Flexible Server to be restored. Required when `createMode` is `PointInTimeRestore`, `GeoRestore`, and `Replica`. Changing this forces a new MySQL Flexible Server to be created.
	SourceServerId pulumi.StringPtrInput
	// A `storage` block as defined below.
	Storage FlexibleServerStoragePtrInput
	// A mapping of tags which should be assigned to the MySQL Flexible Server.
	Tags pulumi.StringMapInput
	// The version of the MySQL Flexible Server to use. Possible values are `5.7`, and `8.0.21`. Changing this forces a new MySQL Flexible Server to be created.
	Version pulumi.StringPtrInput
	Zone    pulumi.StringPtrInput
}

func (FlexibleServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*flexibleServerState)(nil)).Elem()
}

type flexibleServerArgs struct {
	// The Administrator login for the MySQL Flexible Server. Required when `createMode` is `Default`. Changing this forces a new MySQL Flexible Server to be created.
	AdministratorLogin *string `pulumi:"administratorLogin"`
	// The Password associated with the `administratorLogin` for the MySQL Flexible Server. Required when `createMode` is `Default`.
	AdministratorPassword *string `pulumi:"administratorPassword"`
	// The backup retention days for the MySQL Flexible Server. Possible values are between `1` and `35` days. Defaults to `7`.
	BackupRetentionDays *int `pulumi:"backupRetentionDays"`
	// The creation mode which can be used to restore or replicate existing servers. Possible values are `Default`, `PointInTimeRestore`, `GeoRestore`, and `Replica`. Changing this forces a new MySQL Flexible Server to be created.
	//
	// > **NOTE:** Creating a `GeoRestore` server requires the source server with `geoRedundantBackupEnabled` enabled.
	//
	// > **NOTE:** When a server is first created it may not be immediately available for `geo restore` or `replica`. It may take a few minutes to several hours for the necessary metadata to be populated. Please see the [Geo Restore](https://learn.microsoft.com/azure/mysql/single-server/how-to-restore-server-portal#geo-restore) and the [Replica](https://learn.microsoft.com/azure/mysql/flexible-server/concepts-read-replicas#create-a-replica) for more information.
	CreateMode *string `pulumi:"createMode"`
	// A `customerManagedKey` block as defined below.
	//
	// > **NOTE:** `identity` is required when `customerManagedKey` is specified.
	CustomerManagedKey *FlexibleServerCustomerManagedKey `pulumi:"customerManagedKey"`
	// The ID of the virtual network subnet to create the MySQL Flexible Server. Changing this forces a new MySQL Flexible Server to be created.
	DelegatedSubnetId *string `pulumi:"delegatedSubnetId"`
	// Should geo redundant backup enabled? Defaults to `false`. Changing this forces a new MySQL Flexible Server to be created.
	GeoRedundantBackupEnabled *bool `pulumi:"geoRedundantBackupEnabled"`
	// A `highAvailability` block as defined below.
	HighAvailability *FlexibleServerHighAvailability `pulumi:"highAvailability"`
	// An `identity` block as defined below.
	Identity *FlexibleServerIdentity `pulumi:"identity"`
	// The Azure Region where the MySQL Flexible Server should exist. Changing this forces a new MySQL Flexible Server to be created.
	Location *string `pulumi:"location"`
	// A `maintenanceWindow` block as defined below.
	MaintenanceWindow *FlexibleServerMaintenanceWindow `pulumi:"maintenanceWindow"`
	// The name which should be used for this MySQL Flexible Server. Changing this forces a new MySQL Flexible Server to be created.
	Name *string `pulumi:"name"`
	// The point in time to restore from `creationSourceServerId` when `createMode` is `PointInTimeRestore`. Changing this forces a new MySQL Flexible Server to be created.
	PointInTimeRestoreTimeInUtc *string `pulumi:"pointInTimeRestoreTimeInUtc"`
	// The ID of the private DNS zone to create the MySQL Flexible Server. Changing this forces a new MySQL Flexible Server to be created.
	//
	// > **NOTE:** The `privateDnsZoneId` is required when setting a `delegatedSubnetId`. The `privatedns.Zone` should end with suffix `.mysql.database.azure.com`.
	PrivateDnsZoneId *string `pulumi:"privateDnsZoneId"`
	// The replication role. Possible value is `None`.
	//
	// > **NOTE:** The `replicationRole` cannot be set while creating and only can be updated from `Replica` to `None`.
	ReplicationRole *string `pulumi:"replicationRole"`
	// The name of the Resource Group where the MySQL Flexible Server should exist. Changing this forces a new MySQL Flexible Server to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The SKU Name for the MySQL Flexible Server.
	//
	// > **NOTE:** `skuName` should start with SKU tier `B (Burstable)`, `GP (General Purpose)`, `MO (Memory Optimized)` like `B_Standard_B1s`.
	SkuName *string `pulumi:"skuName"`
	// The resource ID of the source MySQL Flexible Server to be restored. Required when `createMode` is `PointInTimeRestore`, `GeoRestore`, and `Replica`. Changing this forces a new MySQL Flexible Server to be created.
	SourceServerId *string `pulumi:"sourceServerId"`
	// A `storage` block as defined below.
	Storage *FlexibleServerStorage `pulumi:"storage"`
	// A mapping of tags which should be assigned to the MySQL Flexible Server.
	Tags map[string]string `pulumi:"tags"`
	// The version of the MySQL Flexible Server to use. Possible values are `5.7`, and `8.0.21`. Changing this forces a new MySQL Flexible Server to be created.
	Version *string `pulumi:"version"`
	Zone    *string `pulumi:"zone"`
}

// The set of arguments for constructing a FlexibleServer resource.
type FlexibleServerArgs struct {
	// The Administrator login for the MySQL Flexible Server. Required when `createMode` is `Default`. Changing this forces a new MySQL Flexible Server to be created.
	AdministratorLogin pulumi.StringPtrInput
	// The Password associated with the `administratorLogin` for the MySQL Flexible Server. Required when `createMode` is `Default`.
	AdministratorPassword pulumi.StringPtrInput
	// The backup retention days for the MySQL Flexible Server. Possible values are between `1` and `35` days. Defaults to `7`.
	BackupRetentionDays pulumi.IntPtrInput
	// The creation mode which can be used to restore or replicate existing servers. Possible values are `Default`, `PointInTimeRestore`, `GeoRestore`, and `Replica`. Changing this forces a new MySQL Flexible Server to be created.
	//
	// > **NOTE:** Creating a `GeoRestore` server requires the source server with `geoRedundantBackupEnabled` enabled.
	//
	// > **NOTE:** When a server is first created it may not be immediately available for `geo restore` or `replica`. It may take a few minutes to several hours for the necessary metadata to be populated. Please see the [Geo Restore](https://learn.microsoft.com/azure/mysql/single-server/how-to-restore-server-portal#geo-restore) and the [Replica](https://learn.microsoft.com/azure/mysql/flexible-server/concepts-read-replicas#create-a-replica) for more information.
	CreateMode pulumi.StringPtrInput
	// A `customerManagedKey` block as defined below.
	//
	// > **NOTE:** `identity` is required when `customerManagedKey` is specified.
	CustomerManagedKey FlexibleServerCustomerManagedKeyPtrInput
	// The ID of the virtual network subnet to create the MySQL Flexible Server. Changing this forces a new MySQL Flexible Server to be created.
	DelegatedSubnetId pulumi.StringPtrInput
	// Should geo redundant backup enabled? Defaults to `false`. Changing this forces a new MySQL Flexible Server to be created.
	GeoRedundantBackupEnabled pulumi.BoolPtrInput
	// A `highAvailability` block as defined below.
	HighAvailability FlexibleServerHighAvailabilityPtrInput
	// An `identity` block as defined below.
	Identity FlexibleServerIdentityPtrInput
	// The Azure Region where the MySQL Flexible Server should exist. Changing this forces a new MySQL Flexible Server to be created.
	Location pulumi.StringPtrInput
	// A `maintenanceWindow` block as defined below.
	MaintenanceWindow FlexibleServerMaintenanceWindowPtrInput
	// The name which should be used for this MySQL Flexible Server. Changing this forces a new MySQL Flexible Server to be created.
	Name pulumi.StringPtrInput
	// The point in time to restore from `creationSourceServerId` when `createMode` is `PointInTimeRestore`. Changing this forces a new MySQL Flexible Server to be created.
	PointInTimeRestoreTimeInUtc pulumi.StringPtrInput
	// The ID of the private DNS zone to create the MySQL Flexible Server. Changing this forces a new MySQL Flexible Server to be created.
	//
	// > **NOTE:** The `privateDnsZoneId` is required when setting a `delegatedSubnetId`. The `privatedns.Zone` should end with suffix `.mysql.database.azure.com`.
	PrivateDnsZoneId pulumi.StringPtrInput
	// The replication role. Possible value is `None`.
	//
	// > **NOTE:** The `replicationRole` cannot be set while creating and only can be updated from `Replica` to `None`.
	ReplicationRole pulumi.StringPtrInput
	// The name of the Resource Group where the MySQL Flexible Server should exist. Changing this forces a new MySQL Flexible Server to be created.
	ResourceGroupName pulumi.StringInput
	// The SKU Name for the MySQL Flexible Server.
	//
	// > **NOTE:** `skuName` should start with SKU tier `B (Burstable)`, `GP (General Purpose)`, `MO (Memory Optimized)` like `B_Standard_B1s`.
	SkuName pulumi.StringPtrInput
	// The resource ID of the source MySQL Flexible Server to be restored. Required when `createMode` is `PointInTimeRestore`, `GeoRestore`, and `Replica`. Changing this forces a new MySQL Flexible Server to be created.
	SourceServerId pulumi.StringPtrInput
	// A `storage` block as defined below.
	Storage FlexibleServerStoragePtrInput
	// A mapping of tags which should be assigned to the MySQL Flexible Server.
	Tags pulumi.StringMapInput
	// The version of the MySQL Flexible Server to use. Possible values are `5.7`, and `8.0.21`. Changing this forces a new MySQL Flexible Server to be created.
	Version pulumi.StringPtrInput
	Zone    pulumi.StringPtrInput
}

func (FlexibleServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*flexibleServerArgs)(nil)).Elem()
}

type FlexibleServerInput interface {
	pulumi.Input

	ToFlexibleServerOutput() FlexibleServerOutput
	ToFlexibleServerOutputWithContext(ctx context.Context) FlexibleServerOutput
}

func (*FlexibleServer) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexibleServer)(nil)).Elem()
}

func (i *FlexibleServer) ToFlexibleServerOutput() FlexibleServerOutput {
	return i.ToFlexibleServerOutputWithContext(context.Background())
}

func (i *FlexibleServer) ToFlexibleServerOutputWithContext(ctx context.Context) FlexibleServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleServerOutput)
}

// FlexibleServerArrayInput is an input type that accepts FlexibleServerArray and FlexibleServerArrayOutput values.
// You can construct a concrete instance of `FlexibleServerArrayInput` via:
//
//	FlexibleServerArray{ FlexibleServerArgs{...} }
type FlexibleServerArrayInput interface {
	pulumi.Input

	ToFlexibleServerArrayOutput() FlexibleServerArrayOutput
	ToFlexibleServerArrayOutputWithContext(context.Context) FlexibleServerArrayOutput
}

type FlexibleServerArray []FlexibleServerInput

func (FlexibleServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlexibleServer)(nil)).Elem()
}

func (i FlexibleServerArray) ToFlexibleServerArrayOutput() FlexibleServerArrayOutput {
	return i.ToFlexibleServerArrayOutputWithContext(context.Background())
}

func (i FlexibleServerArray) ToFlexibleServerArrayOutputWithContext(ctx context.Context) FlexibleServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleServerArrayOutput)
}

// FlexibleServerMapInput is an input type that accepts FlexibleServerMap and FlexibleServerMapOutput values.
// You can construct a concrete instance of `FlexibleServerMapInput` via:
//
//	FlexibleServerMap{ "key": FlexibleServerArgs{...} }
type FlexibleServerMapInput interface {
	pulumi.Input

	ToFlexibleServerMapOutput() FlexibleServerMapOutput
	ToFlexibleServerMapOutputWithContext(context.Context) FlexibleServerMapOutput
}

type FlexibleServerMap map[string]FlexibleServerInput

func (FlexibleServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlexibleServer)(nil)).Elem()
}

func (i FlexibleServerMap) ToFlexibleServerMapOutput() FlexibleServerMapOutput {
	return i.ToFlexibleServerMapOutputWithContext(context.Background())
}

func (i FlexibleServerMap) ToFlexibleServerMapOutputWithContext(ctx context.Context) FlexibleServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleServerMapOutput)
}

type FlexibleServerOutput struct{ *pulumi.OutputState }

func (FlexibleServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexibleServer)(nil)).Elem()
}

func (o FlexibleServerOutput) ToFlexibleServerOutput() FlexibleServerOutput {
	return o
}

func (o FlexibleServerOutput) ToFlexibleServerOutputWithContext(ctx context.Context) FlexibleServerOutput {
	return o
}

// The Administrator login for the MySQL Flexible Server. Required when `createMode` is `Default`. Changing this forces a new MySQL Flexible Server to be created.
func (o FlexibleServerOutput) AdministratorLogin() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleServer) pulumi.StringOutput { return v.AdministratorLogin }).(pulumi.StringOutput)
}

// The Password associated with the `administratorLogin` for the MySQL Flexible Server. Required when `createMode` is `Default`.
func (o FlexibleServerOutput) AdministratorPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlexibleServer) pulumi.StringPtrOutput { return v.AdministratorPassword }).(pulumi.StringPtrOutput)
}

// The backup retention days for the MySQL Flexible Server. Possible values are between `1` and `35` days. Defaults to `7`.
func (o FlexibleServerOutput) BackupRetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlexibleServer) pulumi.IntPtrOutput { return v.BackupRetentionDays }).(pulumi.IntPtrOutput)
}

// The creation mode which can be used to restore or replicate existing servers. Possible values are `Default`, `PointInTimeRestore`, `GeoRestore`, and `Replica`. Changing this forces a new MySQL Flexible Server to be created.
//
// > **NOTE:** Creating a `GeoRestore` server requires the source server with `geoRedundantBackupEnabled` enabled.
//
// > **NOTE:** When a server is first created it may not be immediately available for `geo restore` or `replica`. It may take a few minutes to several hours for the necessary metadata to be populated. Please see the [Geo Restore](https://learn.microsoft.com/azure/mysql/single-server/how-to-restore-server-portal#geo-restore) and the [Replica](https://learn.microsoft.com/azure/mysql/flexible-server/concepts-read-replicas#create-a-replica) for more information.
func (o FlexibleServerOutput) CreateMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlexibleServer) pulumi.StringPtrOutput { return v.CreateMode }).(pulumi.StringPtrOutput)
}

// A `customerManagedKey` block as defined below.
//
// > **NOTE:** `identity` is required when `customerManagedKey` is specified.
func (o FlexibleServerOutput) CustomerManagedKey() FlexibleServerCustomerManagedKeyPtrOutput {
	return o.ApplyT(func(v *FlexibleServer) FlexibleServerCustomerManagedKeyPtrOutput { return v.CustomerManagedKey }).(FlexibleServerCustomerManagedKeyPtrOutput)
}

// The ID of the virtual network subnet to create the MySQL Flexible Server. Changing this forces a new MySQL Flexible Server to be created.
func (o FlexibleServerOutput) DelegatedSubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlexibleServer) pulumi.StringPtrOutput { return v.DelegatedSubnetId }).(pulumi.StringPtrOutput)
}

// The fully qualified domain name of the MySQL Flexible Server.
func (o FlexibleServerOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleServer) pulumi.StringOutput { return v.Fqdn }).(pulumi.StringOutput)
}

// Should geo redundant backup enabled? Defaults to `false`. Changing this forces a new MySQL Flexible Server to be created.
func (o FlexibleServerOutput) GeoRedundantBackupEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FlexibleServer) pulumi.BoolPtrOutput { return v.GeoRedundantBackupEnabled }).(pulumi.BoolPtrOutput)
}

// A `highAvailability` block as defined below.
func (o FlexibleServerOutput) HighAvailability() FlexibleServerHighAvailabilityPtrOutput {
	return o.ApplyT(func(v *FlexibleServer) FlexibleServerHighAvailabilityPtrOutput { return v.HighAvailability }).(FlexibleServerHighAvailabilityPtrOutput)
}

// An `identity` block as defined below.
func (o FlexibleServerOutput) Identity() FlexibleServerIdentityPtrOutput {
	return o.ApplyT(func(v *FlexibleServer) FlexibleServerIdentityPtrOutput { return v.Identity }).(FlexibleServerIdentityPtrOutput)
}

// The Azure Region where the MySQL Flexible Server should exist. Changing this forces a new MySQL Flexible Server to be created.
func (o FlexibleServerOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleServer) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// A `maintenanceWindow` block as defined below.
func (o FlexibleServerOutput) MaintenanceWindow() FlexibleServerMaintenanceWindowPtrOutput {
	return o.ApplyT(func(v *FlexibleServer) FlexibleServerMaintenanceWindowPtrOutput { return v.MaintenanceWindow }).(FlexibleServerMaintenanceWindowPtrOutput)
}

// The name which should be used for this MySQL Flexible Server. Changing this forces a new MySQL Flexible Server to be created.
func (o FlexibleServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleServer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The point in time to restore from `creationSourceServerId` when `createMode` is `PointInTimeRestore`. Changing this forces a new MySQL Flexible Server to be created.
func (o FlexibleServerOutput) PointInTimeRestoreTimeInUtc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlexibleServer) pulumi.StringPtrOutput { return v.PointInTimeRestoreTimeInUtc }).(pulumi.StringPtrOutput)
}

// The ID of the private DNS zone to create the MySQL Flexible Server. Changing this forces a new MySQL Flexible Server to be created.
//
// > **NOTE:** The `privateDnsZoneId` is required when setting a `delegatedSubnetId`. The `privatedns.Zone` should end with suffix `.mysql.database.azure.com`.
func (o FlexibleServerOutput) PrivateDnsZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlexibleServer) pulumi.StringPtrOutput { return v.PrivateDnsZoneId }).(pulumi.StringPtrOutput)
}

// Is the public network access enabled?
func (o FlexibleServerOutput) PublicNetworkAccessEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *FlexibleServer) pulumi.BoolOutput { return v.PublicNetworkAccessEnabled }).(pulumi.BoolOutput)
}

// The maximum number of replicas that a primary MySQL Flexible Server can have.
func (o FlexibleServerOutput) ReplicaCapacity() pulumi.IntOutput {
	return o.ApplyT(func(v *FlexibleServer) pulumi.IntOutput { return v.ReplicaCapacity }).(pulumi.IntOutput)
}

// The replication role. Possible value is `None`.
//
// > **NOTE:** The `replicationRole` cannot be set while creating and only can be updated from `Replica` to `None`.
func (o FlexibleServerOutput) ReplicationRole() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleServer) pulumi.StringOutput { return v.ReplicationRole }).(pulumi.StringOutput)
}

// The name of the Resource Group where the MySQL Flexible Server should exist. Changing this forces a new MySQL Flexible Server to be created.
func (o FlexibleServerOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleServer) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The SKU Name for the MySQL Flexible Server.
//
// > **NOTE:** `skuName` should start with SKU tier `B (Burstable)`, `GP (General Purpose)`, `MO (Memory Optimized)` like `B_Standard_B1s`.
func (o FlexibleServerOutput) SkuName() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleServer) pulumi.StringOutput { return v.SkuName }).(pulumi.StringOutput)
}

// The resource ID of the source MySQL Flexible Server to be restored. Required when `createMode` is `PointInTimeRestore`, `GeoRestore`, and `Replica`. Changing this forces a new MySQL Flexible Server to be created.
func (o FlexibleServerOutput) SourceServerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlexibleServer) pulumi.StringPtrOutput { return v.SourceServerId }).(pulumi.StringPtrOutput)
}

// A `storage` block as defined below.
func (o FlexibleServerOutput) Storage() FlexibleServerStorageOutput {
	return o.ApplyT(func(v *FlexibleServer) FlexibleServerStorageOutput { return v.Storage }).(FlexibleServerStorageOutput)
}

// A mapping of tags which should be assigned to the MySQL Flexible Server.
func (o FlexibleServerOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FlexibleServer) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The version of the MySQL Flexible Server to use. Possible values are `5.7`, and `8.0.21`. Changing this forces a new MySQL Flexible Server to be created.
func (o FlexibleServerOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleServer) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

func (o FlexibleServerOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlexibleServer) pulumi.StringPtrOutput { return v.Zone }).(pulumi.StringPtrOutput)
}

type FlexibleServerArrayOutput struct{ *pulumi.OutputState }

func (FlexibleServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlexibleServer)(nil)).Elem()
}

func (o FlexibleServerArrayOutput) ToFlexibleServerArrayOutput() FlexibleServerArrayOutput {
	return o
}

func (o FlexibleServerArrayOutput) ToFlexibleServerArrayOutputWithContext(ctx context.Context) FlexibleServerArrayOutput {
	return o
}

func (o FlexibleServerArrayOutput) Index(i pulumi.IntInput) FlexibleServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FlexibleServer {
		return vs[0].([]*FlexibleServer)[vs[1].(int)]
	}).(FlexibleServerOutput)
}

type FlexibleServerMapOutput struct{ *pulumi.OutputState }

func (FlexibleServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlexibleServer)(nil)).Elem()
}

func (o FlexibleServerMapOutput) ToFlexibleServerMapOutput() FlexibleServerMapOutput {
	return o
}

func (o FlexibleServerMapOutput) ToFlexibleServerMapOutputWithContext(ctx context.Context) FlexibleServerMapOutput {
	return o
}

func (o FlexibleServerMapOutput) MapIndex(k pulumi.StringInput) FlexibleServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FlexibleServer {
		return vs[0].(map[string]*FlexibleServer)[vs[1].(string)]
	}).(FlexibleServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleServerInput)(nil)).Elem(), &FlexibleServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleServerArrayInput)(nil)).Elem(), FlexibleServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleServerMapInput)(nil)).Elem(), FlexibleServerMap{})
	pulumi.RegisterOutputType(FlexibleServerOutput{})
	pulumi.RegisterOutputType(FlexibleServerArrayOutput{})
	pulumi.RegisterOutputType(FlexibleServerMapOutput{})
}
