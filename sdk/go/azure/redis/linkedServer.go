// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a Redis Linked Server (ie Geo Location)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/redis"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := core.NewResourceGroup(ctx, "example_primaryResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("East US"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = redis.NewCache(ctx, "example_primaryCache", &redis.CacheArgs{
// 			Location:          example_primaryResourceGroup.Location,
// 			ResourceGroupName: example_primaryResourceGroup.Name,
// 			Capacity:          pulumi.Int(1),
// 			Family:            pulumi.String("P"),
// 			SkuName:           pulumi.String("Premium"),
// 			EnableNonSslPort:  pulumi.Bool(false),
// 			RedisConfiguration: &redis.CacheRedisConfigurationArgs{
// 				MaxmemoryReserved: pulumi.Int(2),
// 				MaxmemoryDelta:    pulumi.Int(2),
// 				MaxmemoryPolicy:   pulumi.String("allkeys-lru"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = core.NewResourceGroup(ctx, "example_secondaryResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West US"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = redis.NewCache(ctx, "example_secondaryCache", &redis.CacheArgs{
// 			Location:          example_secondaryResourceGroup.Location,
// 			ResourceGroupName: example_secondaryResourceGroup.Name,
// 			Capacity:          pulumi.Int(1),
// 			Family:            pulumi.String("P"),
// 			SkuName:           pulumi.String("Premium"),
// 			EnableNonSslPort:  pulumi.Bool(false),
// 			RedisConfiguration: &redis.CacheRedisConfigurationArgs{
// 				MaxmemoryReserved: pulumi.Int(2),
// 				MaxmemoryDelta:    pulumi.Int(2),
// 				MaxmemoryPolicy:   pulumi.String("allkeys-lru"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = redis.NewLinkedServer(ctx, "example_link", &redis.LinkedServerArgs{
// 			TargetRedisCacheName:     example_primaryCache.Name,
// 			ResourceGroupName:        example_primaryCache.ResourceGroupName,
// 			LinkedRedisCacheId:       example_secondaryCache.ID(),
// 			LinkedRedisCacheLocation: example_secondaryCache.Location,
// 			ServerRole:               pulumi.String("Secondary"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Redis can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:redis/linkedServer:LinkedServer example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Cache/Redis/cache1/linkedServers/cache2
// ```
type LinkedServer struct {
	pulumi.CustomResourceState

	// The ID of the linked Redis cache. Changing this forces a new Redis to be created.
	LinkedRedisCacheId pulumi.StringOutput `pulumi:"linkedRedisCacheId"`
	// The location of the linked Redis cache. Changing this forces a new Redis to be created.
	LinkedRedisCacheLocation pulumi.StringOutput `pulumi:"linkedRedisCacheLocation"`
	// The name of the linked server.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Resource Group where the Redis caches exists. Changing this forces a new Redis to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The role of the linked Redis cache (eg "Secondary"). Changing this forces a new Redis to be created.
	ServerRole pulumi.StringOutput `pulumi:"serverRole"`
	// The name of Redis cache to link with. Changing this forces a new Redis to be created. (eg The primary role)
	TargetRedisCacheName pulumi.StringOutput `pulumi:"targetRedisCacheName"`
}

// NewLinkedServer registers a new resource with the given unique name, arguments, and options.
func NewLinkedServer(ctx *pulumi.Context,
	name string, args *LinkedServerArgs, opts ...pulumi.ResourceOption) (*LinkedServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LinkedRedisCacheId == nil {
		return nil, errors.New("invalid value for required argument 'LinkedRedisCacheId'")
	}
	if args.LinkedRedisCacheLocation == nil {
		return nil, errors.New("invalid value for required argument 'LinkedRedisCacheLocation'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServerRole == nil {
		return nil, errors.New("invalid value for required argument 'ServerRole'")
	}
	if args.TargetRedisCacheName == nil {
		return nil, errors.New("invalid value for required argument 'TargetRedisCacheName'")
	}
	var resource LinkedServer
	err := ctx.RegisterResource("azure:redis/linkedServer:LinkedServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLinkedServer gets an existing LinkedServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLinkedServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LinkedServerState, opts ...pulumi.ResourceOption) (*LinkedServer, error) {
	var resource LinkedServer
	err := ctx.ReadResource("azure:redis/linkedServer:LinkedServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LinkedServer resources.
type linkedServerState struct {
	// The ID of the linked Redis cache. Changing this forces a new Redis to be created.
	LinkedRedisCacheId *string `pulumi:"linkedRedisCacheId"`
	// The location of the linked Redis cache. Changing this forces a new Redis to be created.
	LinkedRedisCacheLocation *string `pulumi:"linkedRedisCacheLocation"`
	// The name of the linked server.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Redis caches exists. Changing this forces a new Redis to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The role of the linked Redis cache (eg "Secondary"). Changing this forces a new Redis to be created.
	ServerRole *string `pulumi:"serverRole"`
	// The name of Redis cache to link with. Changing this forces a new Redis to be created. (eg The primary role)
	TargetRedisCacheName *string `pulumi:"targetRedisCacheName"`
}

type LinkedServerState struct {
	// The ID of the linked Redis cache. Changing this forces a new Redis to be created.
	LinkedRedisCacheId pulumi.StringPtrInput
	// The location of the linked Redis cache. Changing this forces a new Redis to be created.
	LinkedRedisCacheLocation pulumi.StringPtrInput
	// The name of the linked server.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Redis caches exists. Changing this forces a new Redis to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The role of the linked Redis cache (eg "Secondary"). Changing this forces a new Redis to be created.
	ServerRole pulumi.StringPtrInput
	// The name of Redis cache to link with. Changing this forces a new Redis to be created. (eg The primary role)
	TargetRedisCacheName pulumi.StringPtrInput
}

func (LinkedServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*linkedServerState)(nil)).Elem()
}

type linkedServerArgs struct {
	// The ID of the linked Redis cache. Changing this forces a new Redis to be created.
	LinkedRedisCacheId string `pulumi:"linkedRedisCacheId"`
	// The location of the linked Redis cache. Changing this forces a new Redis to be created.
	LinkedRedisCacheLocation string `pulumi:"linkedRedisCacheLocation"`
	// The name of the Resource Group where the Redis caches exists. Changing this forces a new Redis to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The role of the linked Redis cache (eg "Secondary"). Changing this forces a new Redis to be created.
	ServerRole string `pulumi:"serverRole"`
	// The name of Redis cache to link with. Changing this forces a new Redis to be created. (eg The primary role)
	TargetRedisCacheName string `pulumi:"targetRedisCacheName"`
}

// The set of arguments for constructing a LinkedServer resource.
type LinkedServerArgs struct {
	// The ID of the linked Redis cache. Changing this forces a new Redis to be created.
	LinkedRedisCacheId pulumi.StringInput
	// The location of the linked Redis cache. Changing this forces a new Redis to be created.
	LinkedRedisCacheLocation pulumi.StringInput
	// The name of the Resource Group where the Redis caches exists. Changing this forces a new Redis to be created.
	ResourceGroupName pulumi.StringInput
	// The role of the linked Redis cache (eg "Secondary"). Changing this forces a new Redis to be created.
	ServerRole pulumi.StringInput
	// The name of Redis cache to link with. Changing this forces a new Redis to be created. (eg The primary role)
	TargetRedisCacheName pulumi.StringInput
}

func (LinkedServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*linkedServerArgs)(nil)).Elem()
}

type LinkedServerInput interface {
	pulumi.Input

	ToLinkedServerOutput() LinkedServerOutput
	ToLinkedServerOutputWithContext(ctx context.Context) LinkedServerOutput
}

func (*LinkedServer) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServer)(nil))
}

func (i *LinkedServer) ToLinkedServerOutput() LinkedServerOutput {
	return i.ToLinkedServerOutputWithContext(context.Background())
}

func (i *LinkedServer) ToLinkedServerOutputWithContext(ctx context.Context) LinkedServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServerOutput)
}

func (i *LinkedServer) ToLinkedServerPtrOutput() LinkedServerPtrOutput {
	return i.ToLinkedServerPtrOutputWithContext(context.Background())
}

func (i *LinkedServer) ToLinkedServerPtrOutputWithContext(ctx context.Context) LinkedServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServerPtrOutput)
}

type LinkedServerPtrInput interface {
	pulumi.Input

	ToLinkedServerPtrOutput() LinkedServerPtrOutput
	ToLinkedServerPtrOutputWithContext(ctx context.Context) LinkedServerPtrOutput
}

type linkedServerPtrType LinkedServerArgs

func (*linkedServerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServer)(nil))
}

func (i *linkedServerPtrType) ToLinkedServerPtrOutput() LinkedServerPtrOutput {
	return i.ToLinkedServerPtrOutputWithContext(context.Background())
}

func (i *linkedServerPtrType) ToLinkedServerPtrOutputWithContext(ctx context.Context) LinkedServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServerPtrOutput)
}

// LinkedServerArrayInput is an input type that accepts LinkedServerArray and LinkedServerArrayOutput values.
// You can construct a concrete instance of `LinkedServerArrayInput` via:
//
//          LinkedServerArray{ LinkedServerArgs{...} }
type LinkedServerArrayInput interface {
	pulumi.Input

	ToLinkedServerArrayOutput() LinkedServerArrayOutput
	ToLinkedServerArrayOutputWithContext(context.Context) LinkedServerArrayOutput
}

type LinkedServerArray []LinkedServerInput

func (LinkedServerArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*LinkedServer)(nil))
}

func (i LinkedServerArray) ToLinkedServerArrayOutput() LinkedServerArrayOutput {
	return i.ToLinkedServerArrayOutputWithContext(context.Background())
}

func (i LinkedServerArray) ToLinkedServerArrayOutputWithContext(ctx context.Context) LinkedServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServerArrayOutput)
}

// LinkedServerMapInput is an input type that accepts LinkedServerMap and LinkedServerMapOutput values.
// You can construct a concrete instance of `LinkedServerMapInput` via:
//
//          LinkedServerMap{ "key": LinkedServerArgs{...} }
type LinkedServerMapInput interface {
	pulumi.Input

	ToLinkedServerMapOutput() LinkedServerMapOutput
	ToLinkedServerMapOutputWithContext(context.Context) LinkedServerMapOutput
}

type LinkedServerMap map[string]LinkedServerInput

func (LinkedServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*LinkedServer)(nil))
}

func (i LinkedServerMap) ToLinkedServerMapOutput() LinkedServerMapOutput {
	return i.ToLinkedServerMapOutputWithContext(context.Background())
}

func (i LinkedServerMap) ToLinkedServerMapOutputWithContext(ctx context.Context) LinkedServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServerMapOutput)
}

type LinkedServerOutput struct {
	*pulumi.OutputState
}

func (LinkedServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServer)(nil))
}

func (o LinkedServerOutput) ToLinkedServerOutput() LinkedServerOutput {
	return o
}

func (o LinkedServerOutput) ToLinkedServerOutputWithContext(ctx context.Context) LinkedServerOutput {
	return o
}

func (o LinkedServerOutput) ToLinkedServerPtrOutput() LinkedServerPtrOutput {
	return o.ToLinkedServerPtrOutputWithContext(context.Background())
}

func (o LinkedServerOutput) ToLinkedServerPtrOutputWithContext(ctx context.Context) LinkedServerPtrOutput {
	return o.ApplyT(func(v LinkedServer) *LinkedServer {
		return &v
	}).(LinkedServerPtrOutput)
}

type LinkedServerPtrOutput struct {
	*pulumi.OutputState
}

func (LinkedServerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServer)(nil))
}

func (o LinkedServerPtrOutput) ToLinkedServerPtrOutput() LinkedServerPtrOutput {
	return o
}

func (o LinkedServerPtrOutput) ToLinkedServerPtrOutputWithContext(ctx context.Context) LinkedServerPtrOutput {
	return o
}

type LinkedServerArrayOutput struct{ *pulumi.OutputState }

func (LinkedServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinkedServer)(nil))
}

func (o LinkedServerArrayOutput) ToLinkedServerArrayOutput() LinkedServerArrayOutput {
	return o
}

func (o LinkedServerArrayOutput) ToLinkedServerArrayOutputWithContext(ctx context.Context) LinkedServerArrayOutput {
	return o
}

func (o LinkedServerArrayOutput) Index(i pulumi.IntInput) LinkedServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LinkedServer {
		return vs[0].([]LinkedServer)[vs[1].(int)]
	}).(LinkedServerOutput)
}

type LinkedServerMapOutput struct{ *pulumi.OutputState }

func (LinkedServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LinkedServer)(nil))
}

func (o LinkedServerMapOutput) ToLinkedServerMapOutput() LinkedServerMapOutput {
	return o
}

func (o LinkedServerMapOutput) ToLinkedServerMapOutputWithContext(ctx context.Context) LinkedServerMapOutput {
	return o
}

func (o LinkedServerMapOutput) MapIndex(k pulumi.StringInput) LinkedServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) LinkedServer {
		return vs[0].(map[string]LinkedServer)[vs[1].(string)]
	}).(LinkedServerOutput)
}

func init() {
	pulumi.RegisterOutputType(LinkedServerOutput{})
	pulumi.RegisterOutputType(LinkedServerPtrOutput{})
	pulumi.RegisterOutputType(LinkedServerArrayOutput{})
	pulumi.RegisterOutputType(LinkedServerMapOutput{})
}
