// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Use this data source to access information about an existing Redis Cache
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/d/redis_cache.html.markdown.
func LookupCache(ctx *pulumi.Context, args *GetCacheArgs) (*GetCacheResult, error) {
	inputs := make(map[string]interface{})
	if args != nil {
		inputs["name"] = args.Name
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["zones"] = args.Zones
	}
	outputs, err := ctx.Invoke("azure:redis/getCache:getCache", inputs)
	if err != nil {
		return nil, err
	}
	return &GetCacheResult{
		Capacity: outputs["capacity"],
		EnableNonSslPort: outputs["enableNonSslPort"],
		Family: outputs["family"],
		Hostname: outputs["hostname"],
		Location: outputs["location"],
		MinimumTlsVersion: outputs["minimumTlsVersion"],
		Name: outputs["name"],
		PatchSchedules: outputs["patchSchedules"],
		Port: outputs["port"],
		PrimaryAccessKey: outputs["primaryAccessKey"],
		PrivateStaticIpAddress: outputs["privateStaticIpAddress"],
		RedisConfigurations: outputs["redisConfigurations"],
		ResourceGroupName: outputs["resourceGroupName"],
		SecondaryAccessKey: outputs["secondaryAccessKey"],
		ShardCount: outputs["shardCount"],
		SkuName: outputs["skuName"],
		SslPort: outputs["sslPort"],
		SubnetId: outputs["subnetId"],
		Tags: outputs["tags"],
		Zones: outputs["zones"],
		Id: outputs["id"],
	}, nil
}

// A collection of arguments for invoking getCache.
type GetCacheArgs struct {
	// The name of the Redis cache
	Name interface{}
	// The name of the resource group the Redis cache instance is located in.
	ResourceGroupName interface{}
	Zones interface{}
}

// A collection of values returned by getCache.
type GetCacheResult struct {
	// The size of the Redis Cache deployed.
	Capacity interface{}
	// Whether the SSL port is enabled.
	EnableNonSslPort interface{}
	// The SKU family/pricing group used. Possible values are `C` (for Basic/Standard SKU family) and `P` (for `Premium`)
	Family interface{}
	// The Hostname of the Redis Instance
	Hostname interface{}
	// The location of the Redis Cache.
	Location interface{}
	// The minimum TLS version.
	MinimumTlsVersion interface{}
	Name interface{}
	// A list of `patch_schedule` blocks as defined below - only available for Premium SKU's.
	PatchSchedules interface{}
	// The non-SSL Port of the Redis Instance
	Port interface{}
	// The Primary Access Key for the Redis Instance
	PrimaryAccessKey interface{}
	PrivateStaticIpAddress interface{}
	// A `redis_configuration` block as defined below.
	RedisConfigurations interface{}
	ResourceGroupName interface{}
	// The Secondary Access Key for the Redis Instance
	SecondaryAccessKey interface{}
	ShardCount interface{}
	// The SKU of Redis used. Possible values are `Basic`, `Standard` and `Premium`.
	SkuName interface{}
	// The SSL Port of the Redis Instance
	SslPort interface{}
	SubnetId interface{}
	Tags interface{}
	Zones interface{}
	// id is the provider-assigned unique ID for this managed resource.
	Id interface{}
}
