// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type CacheIdentity struct {
	// A list of User Assigned Managed Identity IDs to be assigned to this Redis Cluster.
	//
	// > **NOTE:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
	IdentityIds []string `pulumi:"identityIds"`
	PrincipalId *string  `pulumi:"principalId"`
	TenantId    *string  `pulumi:"tenantId"`
	// Specifies the type of Managed Service Identity that should be configured on this Redis Cluster. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both).
	Type string `pulumi:"type"`
}

// CacheIdentityInput is an input type that accepts CacheIdentityArgs and CacheIdentityOutput values.
// You can construct a concrete instance of `CacheIdentityInput` via:
//
//	CacheIdentityArgs{...}
type CacheIdentityInput interface {
	pulumi.Input

	ToCacheIdentityOutput() CacheIdentityOutput
	ToCacheIdentityOutputWithContext(context.Context) CacheIdentityOutput
}

type CacheIdentityArgs struct {
	// A list of User Assigned Managed Identity IDs to be assigned to this Redis Cluster.
	//
	// > **NOTE:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	PrincipalId pulumi.StringPtrInput   `pulumi:"principalId"`
	TenantId    pulumi.StringPtrInput   `pulumi:"tenantId"`
	// Specifies the type of Managed Service Identity that should be configured on this Redis Cluster. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both).
	Type pulumi.StringInput `pulumi:"type"`
}

func (CacheIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheIdentity)(nil)).Elem()
}

func (i CacheIdentityArgs) ToCacheIdentityOutput() CacheIdentityOutput {
	return i.ToCacheIdentityOutputWithContext(context.Background())
}

func (i CacheIdentityArgs) ToCacheIdentityOutputWithContext(ctx context.Context) CacheIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheIdentityOutput)
}

func (i CacheIdentityArgs) ToCacheIdentityPtrOutput() CacheIdentityPtrOutput {
	return i.ToCacheIdentityPtrOutputWithContext(context.Background())
}

func (i CacheIdentityArgs) ToCacheIdentityPtrOutputWithContext(ctx context.Context) CacheIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheIdentityOutput).ToCacheIdentityPtrOutputWithContext(ctx)
}

// CacheIdentityPtrInput is an input type that accepts CacheIdentityArgs, CacheIdentityPtr and CacheIdentityPtrOutput values.
// You can construct a concrete instance of `CacheIdentityPtrInput` via:
//
//	        CacheIdentityArgs{...}
//
//	or:
//
//	        nil
type CacheIdentityPtrInput interface {
	pulumi.Input

	ToCacheIdentityPtrOutput() CacheIdentityPtrOutput
	ToCacheIdentityPtrOutputWithContext(context.Context) CacheIdentityPtrOutput
}

type cacheIdentityPtrType CacheIdentityArgs

func CacheIdentityPtr(v *CacheIdentityArgs) CacheIdentityPtrInput {
	return (*cacheIdentityPtrType)(v)
}

func (*cacheIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheIdentity)(nil)).Elem()
}

func (i *cacheIdentityPtrType) ToCacheIdentityPtrOutput() CacheIdentityPtrOutput {
	return i.ToCacheIdentityPtrOutputWithContext(context.Background())
}

func (i *cacheIdentityPtrType) ToCacheIdentityPtrOutputWithContext(ctx context.Context) CacheIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheIdentityPtrOutput)
}

type CacheIdentityOutput struct{ *pulumi.OutputState }

func (CacheIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheIdentity)(nil)).Elem()
}

func (o CacheIdentityOutput) ToCacheIdentityOutput() CacheIdentityOutput {
	return o
}

func (o CacheIdentityOutput) ToCacheIdentityOutputWithContext(ctx context.Context) CacheIdentityOutput {
	return o
}

func (o CacheIdentityOutput) ToCacheIdentityPtrOutput() CacheIdentityPtrOutput {
	return o.ToCacheIdentityPtrOutputWithContext(context.Background())
}

func (o CacheIdentityOutput) ToCacheIdentityPtrOutputWithContext(ctx context.Context) CacheIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CacheIdentity) *CacheIdentity {
		return &v
	}).(CacheIdentityPtrOutput)
}

// A list of User Assigned Managed Identity IDs to be assigned to this Redis Cluster.
//
// > **NOTE:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
func (o CacheIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CacheIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

func (o CacheIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

func (o CacheIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this Redis Cluster. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both).
func (o CacheIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CacheIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type CacheIdentityPtrOutput struct{ *pulumi.OutputState }

func (CacheIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheIdentity)(nil)).Elem()
}

func (o CacheIdentityPtrOutput) ToCacheIdentityPtrOutput() CacheIdentityPtrOutput {
	return o
}

func (o CacheIdentityPtrOutput) ToCacheIdentityPtrOutputWithContext(ctx context.Context) CacheIdentityPtrOutput {
	return o
}

func (o CacheIdentityPtrOutput) Elem() CacheIdentityOutput {
	return o.ApplyT(func(v *CacheIdentity) CacheIdentity {
		if v != nil {
			return *v
		}
		var ret CacheIdentity
		return ret
	}).(CacheIdentityOutput)
}

// A list of User Assigned Managed Identity IDs to be assigned to this Redis Cluster.
//
// > **NOTE:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
func (o CacheIdentityPtrOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CacheIdentity) []string {
		if v == nil {
			return nil
		}
		return v.IdentityIds
	}).(pulumi.StringArrayOutput)
}

func (o CacheIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

func (o CacheIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this Redis Cluster. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both).
func (o CacheIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type CachePatchSchedule struct {
	// the Weekday name - possible values include `Monday`, `Tuesday`, `Wednesday` etc.
	DayOfWeek string `pulumi:"dayOfWeek"`
	// The ISO 8601 timespan which specifies the amount of time the Redis Cache can be updated. Defaults to `PT5H`.
	MaintenanceWindow *string `pulumi:"maintenanceWindow"`
	// the Start Hour for maintenance in UTC - possible values range from `0 - 23`.
	//
	// > **Note:** The Patch Window lasts for `5` hours from the `startHourUtc`.
	StartHourUtc *int `pulumi:"startHourUtc"`
}

// CachePatchScheduleInput is an input type that accepts CachePatchScheduleArgs and CachePatchScheduleOutput values.
// You can construct a concrete instance of `CachePatchScheduleInput` via:
//
//	CachePatchScheduleArgs{...}
type CachePatchScheduleInput interface {
	pulumi.Input

	ToCachePatchScheduleOutput() CachePatchScheduleOutput
	ToCachePatchScheduleOutputWithContext(context.Context) CachePatchScheduleOutput
}

type CachePatchScheduleArgs struct {
	// the Weekday name - possible values include `Monday`, `Tuesday`, `Wednesday` etc.
	DayOfWeek pulumi.StringInput `pulumi:"dayOfWeek"`
	// The ISO 8601 timespan which specifies the amount of time the Redis Cache can be updated. Defaults to `PT5H`.
	MaintenanceWindow pulumi.StringPtrInput `pulumi:"maintenanceWindow"`
	// the Start Hour for maintenance in UTC - possible values range from `0 - 23`.
	//
	// > **Note:** The Patch Window lasts for `5` hours from the `startHourUtc`.
	StartHourUtc pulumi.IntPtrInput `pulumi:"startHourUtc"`
}

func (CachePatchScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CachePatchSchedule)(nil)).Elem()
}

func (i CachePatchScheduleArgs) ToCachePatchScheduleOutput() CachePatchScheduleOutput {
	return i.ToCachePatchScheduleOutputWithContext(context.Background())
}

func (i CachePatchScheduleArgs) ToCachePatchScheduleOutputWithContext(ctx context.Context) CachePatchScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CachePatchScheduleOutput)
}

// CachePatchScheduleArrayInput is an input type that accepts CachePatchScheduleArray and CachePatchScheduleArrayOutput values.
// You can construct a concrete instance of `CachePatchScheduleArrayInput` via:
//
//	CachePatchScheduleArray{ CachePatchScheduleArgs{...} }
type CachePatchScheduleArrayInput interface {
	pulumi.Input

	ToCachePatchScheduleArrayOutput() CachePatchScheduleArrayOutput
	ToCachePatchScheduleArrayOutputWithContext(context.Context) CachePatchScheduleArrayOutput
}

type CachePatchScheduleArray []CachePatchScheduleInput

func (CachePatchScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CachePatchSchedule)(nil)).Elem()
}

func (i CachePatchScheduleArray) ToCachePatchScheduleArrayOutput() CachePatchScheduleArrayOutput {
	return i.ToCachePatchScheduleArrayOutputWithContext(context.Background())
}

func (i CachePatchScheduleArray) ToCachePatchScheduleArrayOutputWithContext(ctx context.Context) CachePatchScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CachePatchScheduleArrayOutput)
}

type CachePatchScheduleOutput struct{ *pulumi.OutputState }

func (CachePatchScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CachePatchSchedule)(nil)).Elem()
}

func (o CachePatchScheduleOutput) ToCachePatchScheduleOutput() CachePatchScheduleOutput {
	return o
}

func (o CachePatchScheduleOutput) ToCachePatchScheduleOutputWithContext(ctx context.Context) CachePatchScheduleOutput {
	return o
}

// the Weekday name - possible values include `Monday`, `Tuesday`, `Wednesday` etc.
func (o CachePatchScheduleOutput) DayOfWeek() pulumi.StringOutput {
	return o.ApplyT(func(v CachePatchSchedule) string { return v.DayOfWeek }).(pulumi.StringOutput)
}

// The ISO 8601 timespan which specifies the amount of time the Redis Cache can be updated. Defaults to `PT5H`.
func (o CachePatchScheduleOutput) MaintenanceWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CachePatchSchedule) *string { return v.MaintenanceWindow }).(pulumi.StringPtrOutput)
}

// the Start Hour for maintenance in UTC - possible values range from `0 - 23`.
//
// > **Note:** The Patch Window lasts for `5` hours from the `startHourUtc`.
func (o CachePatchScheduleOutput) StartHourUtc() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CachePatchSchedule) *int { return v.StartHourUtc }).(pulumi.IntPtrOutput)
}

type CachePatchScheduleArrayOutput struct{ *pulumi.OutputState }

func (CachePatchScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CachePatchSchedule)(nil)).Elem()
}

func (o CachePatchScheduleArrayOutput) ToCachePatchScheduleArrayOutput() CachePatchScheduleArrayOutput {
	return o
}

func (o CachePatchScheduleArrayOutput) ToCachePatchScheduleArrayOutputWithContext(ctx context.Context) CachePatchScheduleArrayOutput {
	return o
}

func (o CachePatchScheduleArrayOutput) Index(i pulumi.IntInput) CachePatchScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CachePatchSchedule {
		return vs[0].([]CachePatchSchedule)[vs[1].(int)]
	}).(CachePatchScheduleOutput)
}

type CacheRedisConfiguration struct {
	// Enable or disable AOF persistence for this Redis Cache. Defaults to `false`.
	//
	// > **NOTE:** `aofBackupEnabled` can only be set when SKU is `Premium`.
	AofBackupEnabled *bool `pulumi:"aofBackupEnabled"`
	// First Storage Account connection string for AOF persistence.
	AofStorageConnectionString0 *string `pulumi:"aofStorageConnectionString0"`
	// Second Storage Account connection string for AOF persistence.
	//
	// Example usage:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		return nil
	// 	})
	// }
	// ```
	AofStorageConnectionString1 *string `pulumi:"aofStorageConnectionString1"`
	// If set to `false`, the Redis instance will be accessible without authentication. Defaults to `true`.
	//
	// > **NOTE:** `enableAuthentication` can only be set to `false` if a `subnetId` is specified; and only works if there aren't existing instances within the subnet with `enableAuthentication` set to `true`.
	EnableAuthentication *bool `pulumi:"enableAuthentication"`
	// Returns the max number of connected clients at the same time.
	Maxclients *int `pulumi:"maxclients"`
	// Value in megabytes reserved to accommodate for memory fragmentation. Defaults are shown below.
	MaxfragmentationmemoryReserved *int `pulumi:"maxfragmentationmemoryReserved"`
	// The max-memory delta for this Redis instance. Defaults are shown below.
	MaxmemoryDelta *int `pulumi:"maxmemoryDelta"`
	// How Redis will select what to remove when `maxmemory` is reached. Defaults to `volatile-lru`.
	MaxmemoryPolicy *string `pulumi:"maxmemoryPolicy"`
	// Value in megabytes reserved for non-cache usage e.g. failover. Defaults are shown below.
	MaxmemoryReserved *int `pulumi:"maxmemoryReserved"`
	// Keyspace notifications allows clients to subscribe to Pub/Sub channels in order to receive events affecting the Redis data set in some way. [Reference](https://redis.io/topics/notifications#configuration)
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		return nil
	// 	})
	// }
	// ```
	NotifyKeyspaceEvents *string `pulumi:"notifyKeyspaceEvents"`
	// Is Backup Enabled? Only supported on Premium SKUs. Defaults to `false`.
	//
	// > **NOTE:** If `rdbBackupEnabled` set to `true`, `rdbStorageConnectionString` must also be set.
	RdbBackupEnabled *bool `pulumi:"rdbBackupEnabled"`
	// The Backup Frequency in Minutes. Only supported on Premium SKUs. Possible values are: `15`, `30`, `60`, `360`, `720` and `1440`.
	RdbBackupFrequency *int `pulumi:"rdbBackupFrequency"`
	// The maximum number of snapshots to create as a backup. Only supported for Premium SKUs.
	RdbBackupMaxSnapshotCount *int `pulumi:"rdbBackupMaxSnapshotCount"`
	// The Connection String to the Storage Account. Only supported for Premium SKUs. In the format: `DefaultEndpointsProtocol=https;BlobEndpoint=${azurerm_storage_account.example.primary_blob_endpoint};AccountName=${azurerm_storage_account.example.name};AccountKey=${azurerm_storage_account.example.primary_access_key}`.
	//
	// > **NOTE:** There's a bug in the Redis API where the original storage connection string isn't being returned, which [is being tracked in this issue](https://github.com/Azure/azure-rest-api-specs/issues/3037). In the interim you can use [the `ignoreChanges` attribute to ignore changes to this field](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) e.g.:
	RdbStorageConnectionString *string `pulumi:"rdbStorageConnectionString"`
}

// CacheRedisConfigurationInput is an input type that accepts CacheRedisConfigurationArgs and CacheRedisConfigurationOutput values.
// You can construct a concrete instance of `CacheRedisConfigurationInput` via:
//
//	CacheRedisConfigurationArgs{...}
type CacheRedisConfigurationInput interface {
	pulumi.Input

	ToCacheRedisConfigurationOutput() CacheRedisConfigurationOutput
	ToCacheRedisConfigurationOutputWithContext(context.Context) CacheRedisConfigurationOutput
}

type CacheRedisConfigurationArgs struct {
	// Enable or disable AOF persistence for this Redis Cache. Defaults to `false`.
	//
	// > **NOTE:** `aofBackupEnabled` can only be set when SKU is `Premium`.
	AofBackupEnabled pulumi.BoolPtrInput `pulumi:"aofBackupEnabled"`
	// First Storage Account connection string for AOF persistence.
	AofStorageConnectionString0 pulumi.StringPtrInput `pulumi:"aofStorageConnectionString0"`
	// Second Storage Account connection string for AOF persistence.
	//
	// Example usage:
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		return nil
	// 	})
	// }
	// ```
	AofStorageConnectionString1 pulumi.StringPtrInput `pulumi:"aofStorageConnectionString1"`
	// If set to `false`, the Redis instance will be accessible without authentication. Defaults to `true`.
	//
	// > **NOTE:** `enableAuthentication` can only be set to `false` if a `subnetId` is specified; and only works if there aren't existing instances within the subnet with `enableAuthentication` set to `true`.
	EnableAuthentication pulumi.BoolPtrInput `pulumi:"enableAuthentication"`
	// Returns the max number of connected clients at the same time.
	Maxclients pulumi.IntPtrInput `pulumi:"maxclients"`
	// Value in megabytes reserved to accommodate for memory fragmentation. Defaults are shown below.
	MaxfragmentationmemoryReserved pulumi.IntPtrInput `pulumi:"maxfragmentationmemoryReserved"`
	// The max-memory delta for this Redis instance. Defaults are shown below.
	MaxmemoryDelta pulumi.IntPtrInput `pulumi:"maxmemoryDelta"`
	// How Redis will select what to remove when `maxmemory` is reached. Defaults to `volatile-lru`.
	MaxmemoryPolicy pulumi.StringPtrInput `pulumi:"maxmemoryPolicy"`
	// Value in megabytes reserved for non-cache usage e.g. failover. Defaults are shown below.
	MaxmemoryReserved pulumi.IntPtrInput `pulumi:"maxmemoryReserved"`
	// Keyspace notifications allows clients to subscribe to Pub/Sub channels in order to receive events affecting the Redis data set in some way. [Reference](https://redis.io/topics/notifications#configuration)
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		return nil
	// 	})
	// }
	// ```
	NotifyKeyspaceEvents pulumi.StringPtrInput `pulumi:"notifyKeyspaceEvents"`
	// Is Backup Enabled? Only supported on Premium SKUs. Defaults to `false`.
	//
	// > **NOTE:** If `rdbBackupEnabled` set to `true`, `rdbStorageConnectionString` must also be set.
	RdbBackupEnabled pulumi.BoolPtrInput `pulumi:"rdbBackupEnabled"`
	// The Backup Frequency in Minutes. Only supported on Premium SKUs. Possible values are: `15`, `30`, `60`, `360`, `720` and `1440`.
	RdbBackupFrequency pulumi.IntPtrInput `pulumi:"rdbBackupFrequency"`
	// The maximum number of snapshots to create as a backup. Only supported for Premium SKUs.
	RdbBackupMaxSnapshotCount pulumi.IntPtrInput `pulumi:"rdbBackupMaxSnapshotCount"`
	// The Connection String to the Storage Account. Only supported for Premium SKUs. In the format: `DefaultEndpointsProtocol=https;BlobEndpoint=${azurerm_storage_account.example.primary_blob_endpoint};AccountName=${azurerm_storage_account.example.name};AccountKey=${azurerm_storage_account.example.primary_access_key}`.
	//
	// > **NOTE:** There's a bug in the Redis API where the original storage connection string isn't being returned, which [is being tracked in this issue](https://github.com/Azure/azure-rest-api-specs/issues/3037). In the interim you can use [the `ignoreChanges` attribute to ignore changes to this field](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) e.g.:
	RdbStorageConnectionString pulumi.StringPtrInput `pulumi:"rdbStorageConnectionString"`
}

func (CacheRedisConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheRedisConfiguration)(nil)).Elem()
}

func (i CacheRedisConfigurationArgs) ToCacheRedisConfigurationOutput() CacheRedisConfigurationOutput {
	return i.ToCacheRedisConfigurationOutputWithContext(context.Background())
}

func (i CacheRedisConfigurationArgs) ToCacheRedisConfigurationOutputWithContext(ctx context.Context) CacheRedisConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheRedisConfigurationOutput)
}

func (i CacheRedisConfigurationArgs) ToCacheRedisConfigurationPtrOutput() CacheRedisConfigurationPtrOutput {
	return i.ToCacheRedisConfigurationPtrOutputWithContext(context.Background())
}

func (i CacheRedisConfigurationArgs) ToCacheRedisConfigurationPtrOutputWithContext(ctx context.Context) CacheRedisConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheRedisConfigurationOutput).ToCacheRedisConfigurationPtrOutputWithContext(ctx)
}

// CacheRedisConfigurationPtrInput is an input type that accepts CacheRedisConfigurationArgs, CacheRedisConfigurationPtr and CacheRedisConfigurationPtrOutput values.
// You can construct a concrete instance of `CacheRedisConfigurationPtrInput` via:
//
//	        CacheRedisConfigurationArgs{...}
//
//	or:
//
//	        nil
type CacheRedisConfigurationPtrInput interface {
	pulumi.Input

	ToCacheRedisConfigurationPtrOutput() CacheRedisConfigurationPtrOutput
	ToCacheRedisConfigurationPtrOutputWithContext(context.Context) CacheRedisConfigurationPtrOutput
}

type cacheRedisConfigurationPtrType CacheRedisConfigurationArgs

func CacheRedisConfigurationPtr(v *CacheRedisConfigurationArgs) CacheRedisConfigurationPtrInput {
	return (*cacheRedisConfigurationPtrType)(v)
}

func (*cacheRedisConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheRedisConfiguration)(nil)).Elem()
}

func (i *cacheRedisConfigurationPtrType) ToCacheRedisConfigurationPtrOutput() CacheRedisConfigurationPtrOutput {
	return i.ToCacheRedisConfigurationPtrOutputWithContext(context.Background())
}

func (i *cacheRedisConfigurationPtrType) ToCacheRedisConfigurationPtrOutputWithContext(ctx context.Context) CacheRedisConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheRedisConfigurationPtrOutput)
}

type CacheRedisConfigurationOutput struct{ *pulumi.OutputState }

func (CacheRedisConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheRedisConfiguration)(nil)).Elem()
}

func (o CacheRedisConfigurationOutput) ToCacheRedisConfigurationOutput() CacheRedisConfigurationOutput {
	return o
}

func (o CacheRedisConfigurationOutput) ToCacheRedisConfigurationOutputWithContext(ctx context.Context) CacheRedisConfigurationOutput {
	return o
}

func (o CacheRedisConfigurationOutput) ToCacheRedisConfigurationPtrOutput() CacheRedisConfigurationPtrOutput {
	return o.ToCacheRedisConfigurationPtrOutputWithContext(context.Background())
}

func (o CacheRedisConfigurationOutput) ToCacheRedisConfigurationPtrOutputWithContext(ctx context.Context) CacheRedisConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CacheRedisConfiguration) *CacheRedisConfiguration {
		return &v
	}).(CacheRedisConfigurationPtrOutput)
}

// Enable or disable AOF persistence for this Redis Cache. Defaults to `false`.
//
// > **NOTE:** `aofBackupEnabled` can only be set when SKU is `Premium`.
func (o CacheRedisConfigurationOutput) AofBackupEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheRedisConfiguration) *bool { return v.AofBackupEnabled }).(pulumi.BoolPtrOutput)
}

// First Storage Account connection string for AOF persistence.
func (o CacheRedisConfigurationOutput) AofStorageConnectionString0() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheRedisConfiguration) *string { return v.AofStorageConnectionString0 }).(pulumi.StringPtrOutput)
}

// Second Storage Account connection string for AOF persistence.
//
// Example usage:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			return nil
//		})
//	}
//
// ```
func (o CacheRedisConfigurationOutput) AofStorageConnectionString1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheRedisConfiguration) *string { return v.AofStorageConnectionString1 }).(pulumi.StringPtrOutput)
}

// If set to `false`, the Redis instance will be accessible without authentication. Defaults to `true`.
//
// > **NOTE:** `enableAuthentication` can only be set to `false` if a `subnetId` is specified; and only works if there aren't existing instances within the subnet with `enableAuthentication` set to `true`.
func (o CacheRedisConfigurationOutput) EnableAuthentication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheRedisConfiguration) *bool { return v.EnableAuthentication }).(pulumi.BoolPtrOutput)
}

// Returns the max number of connected clients at the same time.
func (o CacheRedisConfigurationOutput) Maxclients() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheRedisConfiguration) *int { return v.Maxclients }).(pulumi.IntPtrOutput)
}

// Value in megabytes reserved to accommodate for memory fragmentation. Defaults are shown below.
func (o CacheRedisConfigurationOutput) MaxfragmentationmemoryReserved() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheRedisConfiguration) *int { return v.MaxfragmentationmemoryReserved }).(pulumi.IntPtrOutput)
}

// The max-memory delta for this Redis instance. Defaults are shown below.
func (o CacheRedisConfigurationOutput) MaxmemoryDelta() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheRedisConfiguration) *int { return v.MaxmemoryDelta }).(pulumi.IntPtrOutput)
}

// How Redis will select what to remove when `maxmemory` is reached. Defaults to `volatile-lru`.
func (o CacheRedisConfigurationOutput) MaxmemoryPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheRedisConfiguration) *string { return v.MaxmemoryPolicy }).(pulumi.StringPtrOutput)
}

// Value in megabytes reserved for non-cache usage e.g. failover. Defaults are shown below.
func (o CacheRedisConfigurationOutput) MaxmemoryReserved() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheRedisConfiguration) *int { return v.MaxmemoryReserved }).(pulumi.IntPtrOutput)
}

// Keyspace notifications allows clients to subscribe to Pub/Sub channels in order to receive events affecting the Redis data set in some way. [Reference](https://redis.io/topics/notifications#configuration)
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			return nil
//		})
//	}
//
// ```
func (o CacheRedisConfigurationOutput) NotifyKeyspaceEvents() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheRedisConfiguration) *string { return v.NotifyKeyspaceEvents }).(pulumi.StringPtrOutput)
}

// Is Backup Enabled? Only supported on Premium SKUs. Defaults to `false`.
//
// > **NOTE:** If `rdbBackupEnabled` set to `true`, `rdbStorageConnectionString` must also be set.
func (o CacheRedisConfigurationOutput) RdbBackupEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheRedisConfiguration) *bool { return v.RdbBackupEnabled }).(pulumi.BoolPtrOutput)
}

// The Backup Frequency in Minutes. Only supported on Premium SKUs. Possible values are: `15`, `30`, `60`, `360`, `720` and `1440`.
func (o CacheRedisConfigurationOutput) RdbBackupFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheRedisConfiguration) *int { return v.RdbBackupFrequency }).(pulumi.IntPtrOutput)
}

// The maximum number of snapshots to create as a backup. Only supported for Premium SKUs.
func (o CacheRedisConfigurationOutput) RdbBackupMaxSnapshotCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheRedisConfiguration) *int { return v.RdbBackupMaxSnapshotCount }).(pulumi.IntPtrOutput)
}

// The Connection String to the Storage Account. Only supported for Premium SKUs. In the format: `DefaultEndpointsProtocol=https;BlobEndpoint=${azurerm_storage_account.example.primary_blob_endpoint};AccountName=${azurerm_storage_account.example.name};AccountKey=${azurerm_storage_account.example.primary_access_key}`.
//
// > **NOTE:** There's a bug in the Redis API where the original storage connection string isn't being returned, which [is being tracked in this issue](https://github.com/Azure/azure-rest-api-specs/issues/3037). In the interim you can use [the `ignoreChanges` attribute to ignore changes to this field](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) e.g.:
func (o CacheRedisConfigurationOutput) RdbStorageConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheRedisConfiguration) *string { return v.RdbStorageConnectionString }).(pulumi.StringPtrOutput)
}

type CacheRedisConfigurationPtrOutput struct{ *pulumi.OutputState }

func (CacheRedisConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheRedisConfiguration)(nil)).Elem()
}

func (o CacheRedisConfigurationPtrOutput) ToCacheRedisConfigurationPtrOutput() CacheRedisConfigurationPtrOutput {
	return o
}

func (o CacheRedisConfigurationPtrOutput) ToCacheRedisConfigurationPtrOutputWithContext(ctx context.Context) CacheRedisConfigurationPtrOutput {
	return o
}

func (o CacheRedisConfigurationPtrOutput) Elem() CacheRedisConfigurationOutput {
	return o.ApplyT(func(v *CacheRedisConfiguration) CacheRedisConfiguration {
		if v != nil {
			return *v
		}
		var ret CacheRedisConfiguration
		return ret
	}).(CacheRedisConfigurationOutput)
}

// Enable or disable AOF persistence for this Redis Cache. Defaults to `false`.
//
// > **NOTE:** `aofBackupEnabled` can only be set when SKU is `Premium`.
func (o CacheRedisConfigurationPtrOutput) AofBackupEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheRedisConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.AofBackupEnabled
	}).(pulumi.BoolPtrOutput)
}

// First Storage Account connection string for AOF persistence.
func (o CacheRedisConfigurationPtrOutput) AofStorageConnectionString0() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRedisConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.AofStorageConnectionString0
	}).(pulumi.StringPtrOutput)
}

// Second Storage Account connection string for AOF persistence.
//
// Example usage:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			return nil
//		})
//	}
//
// ```
func (o CacheRedisConfigurationPtrOutput) AofStorageConnectionString1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRedisConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.AofStorageConnectionString1
	}).(pulumi.StringPtrOutput)
}

// If set to `false`, the Redis instance will be accessible without authentication. Defaults to `true`.
//
// > **NOTE:** `enableAuthentication` can only be set to `false` if a `subnetId` is specified; and only works if there aren't existing instances within the subnet with `enableAuthentication` set to `true`.
func (o CacheRedisConfigurationPtrOutput) EnableAuthentication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheRedisConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.EnableAuthentication
	}).(pulumi.BoolPtrOutput)
}

// Returns the max number of connected clients at the same time.
func (o CacheRedisConfigurationPtrOutput) Maxclients() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CacheRedisConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.Maxclients
	}).(pulumi.IntPtrOutput)
}

// Value in megabytes reserved to accommodate for memory fragmentation. Defaults are shown below.
func (o CacheRedisConfigurationPtrOutput) MaxfragmentationmemoryReserved() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CacheRedisConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.MaxfragmentationmemoryReserved
	}).(pulumi.IntPtrOutput)
}

// The max-memory delta for this Redis instance. Defaults are shown below.
func (o CacheRedisConfigurationPtrOutput) MaxmemoryDelta() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CacheRedisConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.MaxmemoryDelta
	}).(pulumi.IntPtrOutput)
}

// How Redis will select what to remove when `maxmemory` is reached. Defaults to `volatile-lru`.
func (o CacheRedisConfigurationPtrOutput) MaxmemoryPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRedisConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.MaxmemoryPolicy
	}).(pulumi.StringPtrOutput)
}

// Value in megabytes reserved for non-cache usage e.g. failover. Defaults are shown below.
func (o CacheRedisConfigurationPtrOutput) MaxmemoryReserved() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CacheRedisConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.MaxmemoryReserved
	}).(pulumi.IntPtrOutput)
}

// Keyspace notifications allows clients to subscribe to Pub/Sub channels in order to receive events affecting the Redis data set in some way. [Reference](https://redis.io/topics/notifications#configuration)
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			return nil
//		})
//	}
//
// ```
func (o CacheRedisConfigurationPtrOutput) NotifyKeyspaceEvents() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRedisConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.NotifyKeyspaceEvents
	}).(pulumi.StringPtrOutput)
}

// Is Backup Enabled? Only supported on Premium SKUs. Defaults to `false`.
//
// > **NOTE:** If `rdbBackupEnabled` set to `true`, `rdbStorageConnectionString` must also be set.
func (o CacheRedisConfigurationPtrOutput) RdbBackupEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheRedisConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.RdbBackupEnabled
	}).(pulumi.BoolPtrOutput)
}

// The Backup Frequency in Minutes. Only supported on Premium SKUs. Possible values are: `15`, `30`, `60`, `360`, `720` and `1440`.
func (o CacheRedisConfigurationPtrOutput) RdbBackupFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CacheRedisConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.RdbBackupFrequency
	}).(pulumi.IntPtrOutput)
}

// The maximum number of snapshots to create as a backup. Only supported for Premium SKUs.
func (o CacheRedisConfigurationPtrOutput) RdbBackupMaxSnapshotCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CacheRedisConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.RdbBackupMaxSnapshotCount
	}).(pulumi.IntPtrOutput)
}

// The Connection String to the Storage Account. Only supported for Premium SKUs. In the format: `DefaultEndpointsProtocol=https;BlobEndpoint=${azurerm_storage_account.example.primary_blob_endpoint};AccountName=${azurerm_storage_account.example.name};AccountKey=${azurerm_storage_account.example.primary_access_key}`.
//
// > **NOTE:** There's a bug in the Redis API where the original storage connection string isn't being returned, which [is being tracked in this issue](https://github.com/Azure/azure-rest-api-specs/issues/3037). In the interim you can use [the `ignoreChanges` attribute to ignore changes to this field](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) e.g.:
func (o CacheRedisConfigurationPtrOutput) RdbStorageConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheRedisConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RdbStorageConnectionString
	}).(pulumi.StringPtrOutput)
}

type EnterpriseDatabaseModule struct {
	// Configuration options for the module (e.g. `ERROR_RATE 0.00 INITIAL_SIZE 400`). Changing this forces a new resource to be created. Defaults to `""`.
	Args *string `pulumi:"args"`
	// The name which should be used for this module. Possible values are `RedisBloom`, `RedisTimeSeries`, `RediSearch` and `RedisJSON`. Changing this forces a new Redis Enterprise Database to be created.
	Name    string  `pulumi:"name"`
	Version *string `pulumi:"version"`
}

// EnterpriseDatabaseModuleInput is an input type that accepts EnterpriseDatabaseModuleArgs and EnterpriseDatabaseModuleOutput values.
// You can construct a concrete instance of `EnterpriseDatabaseModuleInput` via:
//
//	EnterpriseDatabaseModuleArgs{...}
type EnterpriseDatabaseModuleInput interface {
	pulumi.Input

	ToEnterpriseDatabaseModuleOutput() EnterpriseDatabaseModuleOutput
	ToEnterpriseDatabaseModuleOutputWithContext(context.Context) EnterpriseDatabaseModuleOutput
}

type EnterpriseDatabaseModuleArgs struct {
	// Configuration options for the module (e.g. `ERROR_RATE 0.00 INITIAL_SIZE 400`). Changing this forces a new resource to be created. Defaults to `""`.
	Args pulumi.StringPtrInput `pulumi:"args"`
	// The name which should be used for this module. Possible values are `RedisBloom`, `RedisTimeSeries`, `RediSearch` and `RedisJSON`. Changing this forces a new Redis Enterprise Database to be created.
	Name    pulumi.StringInput    `pulumi:"name"`
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (EnterpriseDatabaseModuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseDatabaseModule)(nil)).Elem()
}

func (i EnterpriseDatabaseModuleArgs) ToEnterpriseDatabaseModuleOutput() EnterpriseDatabaseModuleOutput {
	return i.ToEnterpriseDatabaseModuleOutputWithContext(context.Background())
}

func (i EnterpriseDatabaseModuleArgs) ToEnterpriseDatabaseModuleOutputWithContext(ctx context.Context) EnterpriseDatabaseModuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseDatabaseModuleOutput)
}

// EnterpriseDatabaseModuleArrayInput is an input type that accepts EnterpriseDatabaseModuleArray and EnterpriseDatabaseModuleArrayOutput values.
// You can construct a concrete instance of `EnterpriseDatabaseModuleArrayInput` via:
//
//	EnterpriseDatabaseModuleArray{ EnterpriseDatabaseModuleArgs{...} }
type EnterpriseDatabaseModuleArrayInput interface {
	pulumi.Input

	ToEnterpriseDatabaseModuleArrayOutput() EnterpriseDatabaseModuleArrayOutput
	ToEnterpriseDatabaseModuleArrayOutputWithContext(context.Context) EnterpriseDatabaseModuleArrayOutput
}

type EnterpriseDatabaseModuleArray []EnterpriseDatabaseModuleInput

func (EnterpriseDatabaseModuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnterpriseDatabaseModule)(nil)).Elem()
}

func (i EnterpriseDatabaseModuleArray) ToEnterpriseDatabaseModuleArrayOutput() EnterpriseDatabaseModuleArrayOutput {
	return i.ToEnterpriseDatabaseModuleArrayOutputWithContext(context.Background())
}

func (i EnterpriseDatabaseModuleArray) ToEnterpriseDatabaseModuleArrayOutputWithContext(ctx context.Context) EnterpriseDatabaseModuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseDatabaseModuleArrayOutput)
}

type EnterpriseDatabaseModuleOutput struct{ *pulumi.OutputState }

func (EnterpriseDatabaseModuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseDatabaseModule)(nil)).Elem()
}

func (o EnterpriseDatabaseModuleOutput) ToEnterpriseDatabaseModuleOutput() EnterpriseDatabaseModuleOutput {
	return o
}

func (o EnterpriseDatabaseModuleOutput) ToEnterpriseDatabaseModuleOutputWithContext(ctx context.Context) EnterpriseDatabaseModuleOutput {
	return o
}

// Configuration options for the module (e.g. `ERROR_RATE 0.00 INITIAL_SIZE 400`). Changing this forces a new resource to be created. Defaults to `""`.
func (o EnterpriseDatabaseModuleOutput) Args() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseDatabaseModule) *string { return v.Args }).(pulumi.StringPtrOutput)
}

// The name which should be used for this module. Possible values are `RedisBloom`, `RedisTimeSeries`, `RediSearch` and `RedisJSON`. Changing this forces a new Redis Enterprise Database to be created.
func (o EnterpriseDatabaseModuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EnterpriseDatabaseModule) string { return v.Name }).(pulumi.StringOutput)
}

func (o EnterpriseDatabaseModuleOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseDatabaseModule) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type EnterpriseDatabaseModuleArrayOutput struct{ *pulumi.OutputState }

func (EnterpriseDatabaseModuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnterpriseDatabaseModule)(nil)).Elem()
}

func (o EnterpriseDatabaseModuleArrayOutput) ToEnterpriseDatabaseModuleArrayOutput() EnterpriseDatabaseModuleArrayOutput {
	return o
}

func (o EnterpriseDatabaseModuleArrayOutput) ToEnterpriseDatabaseModuleArrayOutputWithContext(ctx context.Context) EnterpriseDatabaseModuleArrayOutput {
	return o
}

func (o EnterpriseDatabaseModuleArrayOutput) Index(i pulumi.IntInput) EnterpriseDatabaseModuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnterpriseDatabaseModule {
		return vs[0].([]EnterpriseDatabaseModule)[vs[1].(int)]
	}).(EnterpriseDatabaseModuleOutput)
}

type GetCachePatchSchedule struct {
	// the Weekday name for the patch item
	DayOfWeek string `pulumi:"dayOfWeek"`
	// The ISO 8601 timespan which specifies the amount of time the Redis Cache can be updated.
	MaintenanceWindow string `pulumi:"maintenanceWindow"`
	// The Start Hour for maintenance in UTC
	StartHourUtc int `pulumi:"startHourUtc"`
}

// GetCachePatchScheduleInput is an input type that accepts GetCachePatchScheduleArgs and GetCachePatchScheduleOutput values.
// You can construct a concrete instance of `GetCachePatchScheduleInput` via:
//
//	GetCachePatchScheduleArgs{...}
type GetCachePatchScheduleInput interface {
	pulumi.Input

	ToGetCachePatchScheduleOutput() GetCachePatchScheduleOutput
	ToGetCachePatchScheduleOutputWithContext(context.Context) GetCachePatchScheduleOutput
}

type GetCachePatchScheduleArgs struct {
	// the Weekday name for the patch item
	DayOfWeek pulumi.StringInput `pulumi:"dayOfWeek"`
	// The ISO 8601 timespan which specifies the amount of time the Redis Cache can be updated.
	MaintenanceWindow pulumi.StringInput `pulumi:"maintenanceWindow"`
	// The Start Hour for maintenance in UTC
	StartHourUtc pulumi.IntInput `pulumi:"startHourUtc"`
}

func (GetCachePatchScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCachePatchSchedule)(nil)).Elem()
}

func (i GetCachePatchScheduleArgs) ToGetCachePatchScheduleOutput() GetCachePatchScheduleOutput {
	return i.ToGetCachePatchScheduleOutputWithContext(context.Background())
}

func (i GetCachePatchScheduleArgs) ToGetCachePatchScheduleOutputWithContext(ctx context.Context) GetCachePatchScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCachePatchScheduleOutput)
}

// GetCachePatchScheduleArrayInput is an input type that accepts GetCachePatchScheduleArray and GetCachePatchScheduleArrayOutput values.
// You can construct a concrete instance of `GetCachePatchScheduleArrayInput` via:
//
//	GetCachePatchScheduleArray{ GetCachePatchScheduleArgs{...} }
type GetCachePatchScheduleArrayInput interface {
	pulumi.Input

	ToGetCachePatchScheduleArrayOutput() GetCachePatchScheduleArrayOutput
	ToGetCachePatchScheduleArrayOutputWithContext(context.Context) GetCachePatchScheduleArrayOutput
}

type GetCachePatchScheduleArray []GetCachePatchScheduleInput

func (GetCachePatchScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCachePatchSchedule)(nil)).Elem()
}

func (i GetCachePatchScheduleArray) ToGetCachePatchScheduleArrayOutput() GetCachePatchScheduleArrayOutput {
	return i.ToGetCachePatchScheduleArrayOutputWithContext(context.Background())
}

func (i GetCachePatchScheduleArray) ToGetCachePatchScheduleArrayOutputWithContext(ctx context.Context) GetCachePatchScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCachePatchScheduleArrayOutput)
}

type GetCachePatchScheduleOutput struct{ *pulumi.OutputState }

func (GetCachePatchScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCachePatchSchedule)(nil)).Elem()
}

func (o GetCachePatchScheduleOutput) ToGetCachePatchScheduleOutput() GetCachePatchScheduleOutput {
	return o
}

func (o GetCachePatchScheduleOutput) ToGetCachePatchScheduleOutputWithContext(ctx context.Context) GetCachePatchScheduleOutput {
	return o
}

// the Weekday name for the patch item
func (o GetCachePatchScheduleOutput) DayOfWeek() pulumi.StringOutput {
	return o.ApplyT(func(v GetCachePatchSchedule) string { return v.DayOfWeek }).(pulumi.StringOutput)
}

// The ISO 8601 timespan which specifies the amount of time the Redis Cache can be updated.
func (o GetCachePatchScheduleOutput) MaintenanceWindow() pulumi.StringOutput {
	return o.ApplyT(func(v GetCachePatchSchedule) string { return v.MaintenanceWindow }).(pulumi.StringOutput)
}

// The Start Hour for maintenance in UTC
func (o GetCachePatchScheduleOutput) StartHourUtc() pulumi.IntOutput {
	return o.ApplyT(func(v GetCachePatchSchedule) int { return v.StartHourUtc }).(pulumi.IntOutput)
}

type GetCachePatchScheduleArrayOutput struct{ *pulumi.OutputState }

func (GetCachePatchScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCachePatchSchedule)(nil)).Elem()
}

func (o GetCachePatchScheduleArrayOutput) ToGetCachePatchScheduleArrayOutput() GetCachePatchScheduleArrayOutput {
	return o
}

func (o GetCachePatchScheduleArrayOutput) ToGetCachePatchScheduleArrayOutputWithContext(ctx context.Context) GetCachePatchScheduleArrayOutput {
	return o
}

func (o GetCachePatchScheduleArrayOutput) Index(i pulumi.IntInput) GetCachePatchScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCachePatchSchedule {
		return vs[0].([]GetCachePatchSchedule)[vs[1].(int)]
	}).(GetCachePatchScheduleOutput)
}

type GetCacheRedisConfiguration struct {
	AofBackupEnabled            bool   `pulumi:"aofBackupEnabled"`
	AofStorageConnectionString0 string `pulumi:"aofStorageConnectionString0"`
	AofStorageConnectionString1 string `pulumi:"aofStorageConnectionString1"`
	// Specifies if authentication is enabled
	EnableAuthentication bool `pulumi:"enableAuthentication"`
	Maxclients           int  `pulumi:"maxclients"`
	// Value in megabytes reserved to accommodate for memory fragmentation.
	MaxfragmentationmemoryReserved int `pulumi:"maxfragmentationmemoryReserved"`
	// The max-memory delta for this Redis instance.
	MaxmemoryDelta int `pulumi:"maxmemoryDelta"`
	// How Redis will select what to remove when `maxmemory` is reached.
	MaxmemoryPolicy string `pulumi:"maxmemoryPolicy"`
	// The value in megabytes reserved for non-cache usage e.g. failover
	MaxmemoryReserved    int    `pulumi:"maxmemoryReserved"`
	NotifyKeyspaceEvents string `pulumi:"notifyKeyspaceEvents"`
	// Is Backup Enabled? Only supported on Premium SKUs.
	RdbBackupEnabled bool `pulumi:"rdbBackupEnabled"`
	// The Backup Frequency in Minutes. Only supported on Premium SKUs.
	RdbBackupFrequency int `pulumi:"rdbBackupFrequency"`
	// The maximum number of snapshots that can be created as a backup.
	RdbBackupMaxSnapshotCount int `pulumi:"rdbBackupMaxSnapshotCount"`
	// The Connection String to the Storage Account. Only supported for Premium SKUs.
	RdbStorageConnectionString string `pulumi:"rdbStorageConnectionString"`
}

// GetCacheRedisConfigurationInput is an input type that accepts GetCacheRedisConfigurationArgs and GetCacheRedisConfigurationOutput values.
// You can construct a concrete instance of `GetCacheRedisConfigurationInput` via:
//
//	GetCacheRedisConfigurationArgs{...}
type GetCacheRedisConfigurationInput interface {
	pulumi.Input

	ToGetCacheRedisConfigurationOutput() GetCacheRedisConfigurationOutput
	ToGetCacheRedisConfigurationOutputWithContext(context.Context) GetCacheRedisConfigurationOutput
}

type GetCacheRedisConfigurationArgs struct {
	AofBackupEnabled            pulumi.BoolInput   `pulumi:"aofBackupEnabled"`
	AofStorageConnectionString0 pulumi.StringInput `pulumi:"aofStorageConnectionString0"`
	AofStorageConnectionString1 pulumi.StringInput `pulumi:"aofStorageConnectionString1"`
	// Specifies if authentication is enabled
	EnableAuthentication pulumi.BoolInput `pulumi:"enableAuthentication"`
	Maxclients           pulumi.IntInput  `pulumi:"maxclients"`
	// Value in megabytes reserved to accommodate for memory fragmentation.
	MaxfragmentationmemoryReserved pulumi.IntInput `pulumi:"maxfragmentationmemoryReserved"`
	// The max-memory delta for this Redis instance.
	MaxmemoryDelta pulumi.IntInput `pulumi:"maxmemoryDelta"`
	// How Redis will select what to remove when `maxmemory` is reached.
	MaxmemoryPolicy pulumi.StringInput `pulumi:"maxmemoryPolicy"`
	// The value in megabytes reserved for non-cache usage e.g. failover
	MaxmemoryReserved    pulumi.IntInput    `pulumi:"maxmemoryReserved"`
	NotifyKeyspaceEvents pulumi.StringInput `pulumi:"notifyKeyspaceEvents"`
	// Is Backup Enabled? Only supported on Premium SKUs.
	RdbBackupEnabled pulumi.BoolInput `pulumi:"rdbBackupEnabled"`
	// The Backup Frequency in Minutes. Only supported on Premium SKUs.
	RdbBackupFrequency pulumi.IntInput `pulumi:"rdbBackupFrequency"`
	// The maximum number of snapshots that can be created as a backup.
	RdbBackupMaxSnapshotCount pulumi.IntInput `pulumi:"rdbBackupMaxSnapshotCount"`
	// The Connection String to the Storage Account. Only supported for Premium SKUs.
	RdbStorageConnectionString pulumi.StringInput `pulumi:"rdbStorageConnectionString"`
}

func (GetCacheRedisConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCacheRedisConfiguration)(nil)).Elem()
}

func (i GetCacheRedisConfigurationArgs) ToGetCacheRedisConfigurationOutput() GetCacheRedisConfigurationOutput {
	return i.ToGetCacheRedisConfigurationOutputWithContext(context.Background())
}

func (i GetCacheRedisConfigurationArgs) ToGetCacheRedisConfigurationOutputWithContext(ctx context.Context) GetCacheRedisConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCacheRedisConfigurationOutput)
}

// GetCacheRedisConfigurationArrayInput is an input type that accepts GetCacheRedisConfigurationArray and GetCacheRedisConfigurationArrayOutput values.
// You can construct a concrete instance of `GetCacheRedisConfigurationArrayInput` via:
//
//	GetCacheRedisConfigurationArray{ GetCacheRedisConfigurationArgs{...} }
type GetCacheRedisConfigurationArrayInput interface {
	pulumi.Input

	ToGetCacheRedisConfigurationArrayOutput() GetCacheRedisConfigurationArrayOutput
	ToGetCacheRedisConfigurationArrayOutputWithContext(context.Context) GetCacheRedisConfigurationArrayOutput
}

type GetCacheRedisConfigurationArray []GetCacheRedisConfigurationInput

func (GetCacheRedisConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCacheRedisConfiguration)(nil)).Elem()
}

func (i GetCacheRedisConfigurationArray) ToGetCacheRedisConfigurationArrayOutput() GetCacheRedisConfigurationArrayOutput {
	return i.ToGetCacheRedisConfigurationArrayOutputWithContext(context.Background())
}

func (i GetCacheRedisConfigurationArray) ToGetCacheRedisConfigurationArrayOutputWithContext(ctx context.Context) GetCacheRedisConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCacheRedisConfigurationArrayOutput)
}

type GetCacheRedisConfigurationOutput struct{ *pulumi.OutputState }

func (GetCacheRedisConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCacheRedisConfiguration)(nil)).Elem()
}

func (o GetCacheRedisConfigurationOutput) ToGetCacheRedisConfigurationOutput() GetCacheRedisConfigurationOutput {
	return o
}

func (o GetCacheRedisConfigurationOutput) ToGetCacheRedisConfigurationOutputWithContext(ctx context.Context) GetCacheRedisConfigurationOutput {
	return o
}

func (o GetCacheRedisConfigurationOutput) AofBackupEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetCacheRedisConfiguration) bool { return v.AofBackupEnabled }).(pulumi.BoolOutput)
}

func (o GetCacheRedisConfigurationOutput) AofStorageConnectionString0() pulumi.StringOutput {
	return o.ApplyT(func(v GetCacheRedisConfiguration) string { return v.AofStorageConnectionString0 }).(pulumi.StringOutput)
}

func (o GetCacheRedisConfigurationOutput) AofStorageConnectionString1() pulumi.StringOutput {
	return o.ApplyT(func(v GetCacheRedisConfiguration) string { return v.AofStorageConnectionString1 }).(pulumi.StringOutput)
}

// Specifies if authentication is enabled
func (o GetCacheRedisConfigurationOutput) EnableAuthentication() pulumi.BoolOutput {
	return o.ApplyT(func(v GetCacheRedisConfiguration) bool { return v.EnableAuthentication }).(pulumi.BoolOutput)
}

func (o GetCacheRedisConfigurationOutput) Maxclients() pulumi.IntOutput {
	return o.ApplyT(func(v GetCacheRedisConfiguration) int { return v.Maxclients }).(pulumi.IntOutput)
}

// Value in megabytes reserved to accommodate for memory fragmentation.
func (o GetCacheRedisConfigurationOutput) MaxfragmentationmemoryReserved() pulumi.IntOutput {
	return o.ApplyT(func(v GetCacheRedisConfiguration) int { return v.MaxfragmentationmemoryReserved }).(pulumi.IntOutput)
}

// The max-memory delta for this Redis instance.
func (o GetCacheRedisConfigurationOutput) MaxmemoryDelta() pulumi.IntOutput {
	return o.ApplyT(func(v GetCacheRedisConfiguration) int { return v.MaxmemoryDelta }).(pulumi.IntOutput)
}

// How Redis will select what to remove when `maxmemory` is reached.
func (o GetCacheRedisConfigurationOutput) MaxmemoryPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v GetCacheRedisConfiguration) string { return v.MaxmemoryPolicy }).(pulumi.StringOutput)
}

// The value in megabytes reserved for non-cache usage e.g. failover
func (o GetCacheRedisConfigurationOutput) MaxmemoryReserved() pulumi.IntOutput {
	return o.ApplyT(func(v GetCacheRedisConfiguration) int { return v.MaxmemoryReserved }).(pulumi.IntOutput)
}

func (o GetCacheRedisConfigurationOutput) NotifyKeyspaceEvents() pulumi.StringOutput {
	return o.ApplyT(func(v GetCacheRedisConfiguration) string { return v.NotifyKeyspaceEvents }).(pulumi.StringOutput)
}

// Is Backup Enabled? Only supported on Premium SKUs.
func (o GetCacheRedisConfigurationOutput) RdbBackupEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetCacheRedisConfiguration) bool { return v.RdbBackupEnabled }).(pulumi.BoolOutput)
}

// The Backup Frequency in Minutes. Only supported on Premium SKUs.
func (o GetCacheRedisConfigurationOutput) RdbBackupFrequency() pulumi.IntOutput {
	return o.ApplyT(func(v GetCacheRedisConfiguration) int { return v.RdbBackupFrequency }).(pulumi.IntOutput)
}

// The maximum number of snapshots that can be created as a backup.
func (o GetCacheRedisConfigurationOutput) RdbBackupMaxSnapshotCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetCacheRedisConfiguration) int { return v.RdbBackupMaxSnapshotCount }).(pulumi.IntOutput)
}

// The Connection String to the Storage Account. Only supported for Premium SKUs.
func (o GetCacheRedisConfigurationOutput) RdbStorageConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v GetCacheRedisConfiguration) string { return v.RdbStorageConnectionString }).(pulumi.StringOutput)
}

type GetCacheRedisConfigurationArrayOutput struct{ *pulumi.OutputState }

func (GetCacheRedisConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCacheRedisConfiguration)(nil)).Elem()
}

func (o GetCacheRedisConfigurationArrayOutput) ToGetCacheRedisConfigurationArrayOutput() GetCacheRedisConfigurationArrayOutput {
	return o
}

func (o GetCacheRedisConfigurationArrayOutput) ToGetCacheRedisConfigurationArrayOutputWithContext(ctx context.Context) GetCacheRedisConfigurationArrayOutput {
	return o
}

func (o GetCacheRedisConfigurationArrayOutput) Index(i pulumi.IntInput) GetCacheRedisConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCacheRedisConfiguration {
		return vs[0].([]GetCacheRedisConfiguration)[vs[1].(int)]
	}).(GetCacheRedisConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CacheIdentityInput)(nil)).Elem(), CacheIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CacheIdentityPtrInput)(nil)).Elem(), CacheIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CachePatchScheduleInput)(nil)).Elem(), CachePatchScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CachePatchScheduleArrayInput)(nil)).Elem(), CachePatchScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CacheRedisConfigurationInput)(nil)).Elem(), CacheRedisConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CacheRedisConfigurationPtrInput)(nil)).Elem(), CacheRedisConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseDatabaseModuleInput)(nil)).Elem(), EnterpriseDatabaseModuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseDatabaseModuleArrayInput)(nil)).Elem(), EnterpriseDatabaseModuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCachePatchScheduleInput)(nil)).Elem(), GetCachePatchScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCachePatchScheduleArrayInput)(nil)).Elem(), GetCachePatchScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCacheRedisConfigurationInput)(nil)).Elem(), GetCacheRedisConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCacheRedisConfigurationArrayInput)(nil)).Elem(), GetCacheRedisConfigurationArray{})
	pulumi.RegisterOutputType(CacheIdentityOutput{})
	pulumi.RegisterOutputType(CacheIdentityPtrOutput{})
	pulumi.RegisterOutputType(CachePatchScheduleOutput{})
	pulumi.RegisterOutputType(CachePatchScheduleArrayOutput{})
	pulumi.RegisterOutputType(CacheRedisConfigurationOutput{})
	pulumi.RegisterOutputType(CacheRedisConfigurationPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseDatabaseModuleOutput{})
	pulumi.RegisterOutputType(EnterpriseDatabaseModuleArrayOutput{})
	pulumi.RegisterOutputType(GetCachePatchScheduleOutput{})
	pulumi.RegisterOutputType(GetCachePatchScheduleArrayOutput{})
	pulumi.RegisterOutputType(GetCacheRedisConfigurationOutput{})
	pulumi.RegisterOutputType(GetCacheRedisConfigurationArrayOutput{})
}
