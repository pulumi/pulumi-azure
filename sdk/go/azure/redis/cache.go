// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Redis Cache.
// 
// ## Default Redis Configuration Values
// 
// | Redis Value                     | Basic        | Standard     | Premium      |
// | ------------------------------- | ------------ | ------------ | ------------ |
// | enableAuthentication           | true         | true         | true         |
// | maxmemoryReserved              | 2            | 50           | 200          |
// | maxfragmentationmemoryReserved | 2            | 50           | 200          |
// | maxmemoryDelta                 | 2            | 50           | 200          |
// | maxmemoryPolicy                | volatile-lru | volatile-lru | volatile-lru |
// 
// > **NOTE:** The `maxmemoryReserved`, `maxmemoryDelta` and `maxfragmentationmemory-reserved` settings are only available for Standard and Premium caches. More details are available in the Relevant Links section below._
// 
// ---
// 
// A `patchSchedule` block supports the following:
// 
// * `dayOfWeek` (Required) the Weekday name - possible values include `Monday`, `Tuesday`, `Wednesday` etc.
// 
// * `startHourUtc` - (Optional) the Start Hour for maintenance in UTC - possible values range from `0 - 23`.
// 
// > **Note:** The Patch Window lasts for `5` hours from the `startHourUtc`.
// 
// ## Relevant Links
// 
//  - [Azure Redis Cache: SKU specific configuration limitations](https://azure.microsoft.com/en-us/documentation/articles/cache-configure/#advanced-settings)
//  - [Redis: Available Configuration Settings](http://redis.io/topics/config)
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/redis_cache.html.markdown.
type Cache struct {
	s *pulumi.ResourceState
}

// NewCache registers a new resource with the given unique name, arguments, and options.
func NewCache(ctx *pulumi.Context,
	name string, args *CacheArgs, opts ...pulumi.ResourceOpt) (*Cache, error) {
	if args == nil || args.Capacity == nil {
		return nil, errors.New("missing required argument 'Capacity'")
	}
	if args == nil || args.Family == nil {
		return nil, errors.New("missing required argument 'Family'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.SkuName == nil {
		return nil, errors.New("missing required argument 'SkuName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["capacity"] = nil
		inputs["enableNonSslPort"] = nil
		inputs["family"] = nil
		inputs["location"] = nil
		inputs["minimumTlsVersion"] = nil
		inputs["name"] = nil
		inputs["patchSchedules"] = nil
		inputs["privateStaticIpAddress"] = nil
		inputs["redisConfiguration"] = nil
		inputs["resourceGroupName"] = nil
		inputs["shardCount"] = nil
		inputs["skuName"] = nil
		inputs["subnetId"] = nil
		inputs["tags"] = nil
		inputs["zones"] = nil
	} else {
		inputs["capacity"] = args.Capacity
		inputs["enableNonSslPort"] = args.EnableNonSslPort
		inputs["family"] = args.Family
		inputs["location"] = args.Location
		inputs["minimumTlsVersion"] = args.MinimumTlsVersion
		inputs["name"] = args.Name
		inputs["patchSchedules"] = args.PatchSchedules
		inputs["privateStaticIpAddress"] = args.PrivateStaticIpAddress
		inputs["redisConfiguration"] = args.RedisConfiguration
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["shardCount"] = args.ShardCount
		inputs["skuName"] = args.SkuName
		inputs["subnetId"] = args.SubnetId
		inputs["tags"] = args.Tags
		inputs["zones"] = args.Zones
	}
	inputs["hostname"] = nil
	inputs["port"] = nil
	inputs["primaryAccessKey"] = nil
	inputs["secondaryAccessKey"] = nil
	inputs["sslPort"] = nil
	s, err := ctx.RegisterResource("azure:redis/cache:Cache", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Cache{s: s}, nil
}

// GetCache gets an existing Cache resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCache(ctx *pulumi.Context,
	name string, id pulumi.ID, state *CacheState, opts ...pulumi.ResourceOpt) (*Cache, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["capacity"] = state.Capacity
		inputs["enableNonSslPort"] = state.EnableNonSslPort
		inputs["family"] = state.Family
		inputs["hostname"] = state.Hostname
		inputs["location"] = state.Location
		inputs["minimumTlsVersion"] = state.MinimumTlsVersion
		inputs["name"] = state.Name
		inputs["patchSchedules"] = state.PatchSchedules
		inputs["port"] = state.Port
		inputs["primaryAccessKey"] = state.PrimaryAccessKey
		inputs["privateStaticIpAddress"] = state.PrivateStaticIpAddress
		inputs["redisConfiguration"] = state.RedisConfiguration
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["secondaryAccessKey"] = state.SecondaryAccessKey
		inputs["shardCount"] = state.ShardCount
		inputs["skuName"] = state.SkuName
		inputs["sslPort"] = state.SslPort
		inputs["subnetId"] = state.SubnetId
		inputs["tags"] = state.Tags
		inputs["zones"] = state.Zones
	}
	s, err := ctx.ReadResource("azure:redis/cache:Cache", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Cache{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Cache) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Cache) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The size of the Redis cache to deploy. Valid values for a SKU `family` of C (Basic/Standard) are `0, 1, 2, 3, 4, 5, 6`, and for P (Premium) `family` are `1, 2, 3, 4`.
func (r *Cache) Capacity() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["capacity"])
}

// Enable the non-SSL port (6379) - disabled by default.
func (r *Cache) EnableNonSslPort() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enableNonSslPort"])
}

// The SKU family/pricing group to use. Valid values are `C` (for Basic/Standard SKU family) and `P` (for `Premium`)
func (r *Cache) Family() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["family"])
}

// The Hostname of the Redis Instance
func (r *Cache) Hostname() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["hostname"])
}

// The location of the resource group.
func (r *Cache) Location() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["location"])
}

// The minimum TLS version.  Defaults to `1.0`.
func (r *Cache) MinimumTlsVersion() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["minimumTlsVersion"])
}

// The name of the Redis instance. Changing this forces a
// new resource to be created.
func (r *Cache) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// A list of `patchSchedule` blocks as defined below - only available for Premium SKU's.
func (r *Cache) PatchSchedules() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["patchSchedules"])
}

// The non-SSL Port of the Redis Instance
func (r *Cache) Port() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["port"])
}

// The Primary Access Key for the Redis Instance
func (r *Cache) PrimaryAccessKey() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["primaryAccessKey"])
}

// The Static IP Address to assign to the Redis Cache when hosted inside the Virtual Network. Changing this forces a new resource to be created.
func (r *Cache) PrivateStaticIpAddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["privateStaticIpAddress"])
}

// A `redisConfiguration` as defined below - with some limitations by SKU - defaults/details are shown below.
func (r *Cache) RedisConfiguration() *pulumi.Output {
	return r.s.State["redisConfiguration"]
}

// The name of the resource group in which to
// create the Redis instance.
func (r *Cache) ResourceGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// The Secondary Access Key for the Redis Instance
func (r *Cache) SecondaryAccessKey() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["secondaryAccessKey"])
}

// *Only available when using the Premium SKU* The number of Shards to create on the Redis Cluster.
func (r *Cache) ShardCount() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["shardCount"])
}

// The SKU of Redis to use. Possible values are `Basic`, `Standard` and `Premium`.
func (r *Cache) SkuName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["skuName"])
}

// The SSL Port of the Redis Instance
func (r *Cache) SslPort() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["sslPort"])
}

// The ID of the Subnet within which the Redis Cache should be deployed. Changing this forces a new resource to be created.
func (r *Cache) SubnetId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["subnetId"])
}

// A mapping of tags to assign to the resource.
func (r *Cache) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// A list of a single item of the Availability Zone which the Redis Cache should be allocated in.
func (r *Cache) Zones() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zones"])
}

// Input properties used for looking up and filtering Cache resources.
type CacheState struct {
	// The size of the Redis cache to deploy. Valid values for a SKU `family` of C (Basic/Standard) are `0, 1, 2, 3, 4, 5, 6`, and for P (Premium) `family` are `1, 2, 3, 4`.
	Capacity interface{}
	// Enable the non-SSL port (6379) - disabled by default.
	EnableNonSslPort interface{}
	// The SKU family/pricing group to use. Valid values are `C` (for Basic/Standard SKU family) and `P` (for `Premium`)
	Family interface{}
	// The Hostname of the Redis Instance
	Hostname interface{}
	// The location of the resource group.
	Location interface{}
	// The minimum TLS version.  Defaults to `1.0`.
	MinimumTlsVersion interface{}
	// The name of the Redis instance. Changing this forces a
	// new resource to be created.
	Name interface{}
	// A list of `patchSchedule` blocks as defined below - only available for Premium SKU's.
	PatchSchedules interface{}
	// The non-SSL Port of the Redis Instance
	Port interface{}
	// The Primary Access Key for the Redis Instance
	PrimaryAccessKey interface{}
	// The Static IP Address to assign to the Redis Cache when hosted inside the Virtual Network. Changing this forces a new resource to be created.
	PrivateStaticIpAddress interface{}
	// A `redisConfiguration` as defined below - with some limitations by SKU - defaults/details are shown below.
	RedisConfiguration interface{}
	// The name of the resource group in which to
	// create the Redis instance.
	ResourceGroupName interface{}
	// The Secondary Access Key for the Redis Instance
	SecondaryAccessKey interface{}
	// *Only available when using the Premium SKU* The number of Shards to create on the Redis Cluster.
	ShardCount interface{}
	// The SKU of Redis to use. Possible values are `Basic`, `Standard` and `Premium`.
	SkuName interface{}
	// The SSL Port of the Redis Instance
	SslPort interface{}
	// The ID of the Subnet within which the Redis Cache should be deployed. Changing this forces a new resource to be created.
	SubnetId interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// A list of a single item of the Availability Zone which the Redis Cache should be allocated in.
	Zones interface{}
}

// The set of arguments for constructing a Cache resource.
type CacheArgs struct {
	// The size of the Redis cache to deploy. Valid values for a SKU `family` of C (Basic/Standard) are `0, 1, 2, 3, 4, 5, 6`, and for P (Premium) `family` are `1, 2, 3, 4`.
	Capacity interface{}
	// Enable the non-SSL port (6379) - disabled by default.
	EnableNonSslPort interface{}
	// The SKU family/pricing group to use. Valid values are `C` (for Basic/Standard SKU family) and `P` (for `Premium`)
	Family interface{}
	// The location of the resource group.
	Location interface{}
	// The minimum TLS version.  Defaults to `1.0`.
	MinimumTlsVersion interface{}
	// The name of the Redis instance. Changing this forces a
	// new resource to be created.
	Name interface{}
	// A list of `patchSchedule` blocks as defined below - only available for Premium SKU's.
	PatchSchedules interface{}
	// The Static IP Address to assign to the Redis Cache when hosted inside the Virtual Network. Changing this forces a new resource to be created.
	PrivateStaticIpAddress interface{}
	// A `redisConfiguration` as defined below - with some limitations by SKU - defaults/details are shown below.
	RedisConfiguration interface{}
	// The name of the resource group in which to
	// create the Redis instance.
	ResourceGroupName interface{}
	// *Only available when using the Premium SKU* The number of Shards to create on the Redis Cluster.
	ShardCount interface{}
	// The SKU of Redis to use. Possible values are `Basic`, `Standard` and `Premium`.
	SkuName interface{}
	// The ID of the Subnet within which the Redis Cache should be deployed. Changing this forces a new resource to be created.
	SubnetId interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// A list of a single item of the Availability Zone which the Redis Cache should be allocated in.
	Zones interface{}
}
