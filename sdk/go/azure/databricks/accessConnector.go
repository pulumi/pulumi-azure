// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Databricks Access Connector
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/databricks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databricks.NewAccessConnector(ctx, "exampleAccessConnector", &databricks.AccessConnectorArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				Identity: &databricks.AccessConnectorIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//				Tags: pulumi.StringMap{
//					"Environment": pulumi.String("Production"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Databricks Access Connectors can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:databricks/accessConnector:AccessConnector connector1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Databricks/accessConnectors/connector1
//
// ```
type AccessConnector struct {
	pulumi.CustomResourceState

	// An `identity` block as defined below.
	Identity AccessConnectorIdentityPtrOutput `pulumi:"identity"`
	// Specifies the supported Azure location where the resource has to be created. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name of the Databricks Access Connector resource. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Resource Group in which the Databricks Access Connector should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewAccessConnector registers a new resource with the given unique name, arguments, and options.
func NewAccessConnector(ctx *pulumi.Context,
	name string, args *AccessConnectorArgs, opts ...pulumi.ResourceOption) (*AccessConnector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccessConnector
	err := ctx.RegisterResource("azure:databricks/accessConnector:AccessConnector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessConnector gets an existing AccessConnector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessConnectorState, opts ...pulumi.ResourceOption) (*AccessConnector, error) {
	var resource AccessConnector
	err := ctx.ReadResource("azure:databricks/accessConnector:AccessConnector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessConnector resources.
type accessConnectorState struct {
	// An `identity` block as defined below.
	Identity *AccessConnectorIdentity `pulumi:"identity"`
	// Specifies the supported Azure location where the resource has to be created. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the Databricks Access Connector resource. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group in which the Databricks Access Connector should exist. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

type AccessConnectorState struct {
	// An `identity` block as defined below.
	Identity AccessConnectorIdentityPtrInput
	// Specifies the supported Azure location where the resource has to be created. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the Databricks Access Connector resource. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group in which the Databricks Access Connector should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
}

func (AccessConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessConnectorState)(nil)).Elem()
}

type accessConnectorArgs struct {
	// An `identity` block as defined below.
	Identity *AccessConnectorIdentity `pulumi:"identity"`
	// Specifies the supported Azure location where the resource has to be created. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the Databricks Access Connector resource. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group in which the Databricks Access Connector should exist. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a AccessConnector resource.
type AccessConnectorArgs struct {
	// An `identity` block as defined below.
	Identity AccessConnectorIdentityPtrInput
	// Specifies the supported Azure location where the resource has to be created. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the Databricks Access Connector resource. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group in which the Databricks Access Connector should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
}

func (AccessConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessConnectorArgs)(nil)).Elem()
}

type AccessConnectorInput interface {
	pulumi.Input

	ToAccessConnectorOutput() AccessConnectorOutput
	ToAccessConnectorOutputWithContext(ctx context.Context) AccessConnectorOutput
}

func (*AccessConnector) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessConnector)(nil)).Elem()
}

func (i *AccessConnector) ToAccessConnectorOutput() AccessConnectorOutput {
	return i.ToAccessConnectorOutputWithContext(context.Background())
}

func (i *AccessConnector) ToAccessConnectorOutputWithContext(ctx context.Context) AccessConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessConnectorOutput)
}

// AccessConnectorArrayInput is an input type that accepts AccessConnectorArray and AccessConnectorArrayOutput values.
// You can construct a concrete instance of `AccessConnectorArrayInput` via:
//
//	AccessConnectorArray{ AccessConnectorArgs{...} }
type AccessConnectorArrayInput interface {
	pulumi.Input

	ToAccessConnectorArrayOutput() AccessConnectorArrayOutput
	ToAccessConnectorArrayOutputWithContext(context.Context) AccessConnectorArrayOutput
}

type AccessConnectorArray []AccessConnectorInput

func (AccessConnectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessConnector)(nil)).Elem()
}

func (i AccessConnectorArray) ToAccessConnectorArrayOutput() AccessConnectorArrayOutput {
	return i.ToAccessConnectorArrayOutputWithContext(context.Background())
}

func (i AccessConnectorArray) ToAccessConnectorArrayOutputWithContext(ctx context.Context) AccessConnectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessConnectorArrayOutput)
}

// AccessConnectorMapInput is an input type that accepts AccessConnectorMap and AccessConnectorMapOutput values.
// You can construct a concrete instance of `AccessConnectorMapInput` via:
//
//	AccessConnectorMap{ "key": AccessConnectorArgs{...} }
type AccessConnectorMapInput interface {
	pulumi.Input

	ToAccessConnectorMapOutput() AccessConnectorMapOutput
	ToAccessConnectorMapOutputWithContext(context.Context) AccessConnectorMapOutput
}

type AccessConnectorMap map[string]AccessConnectorInput

func (AccessConnectorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessConnector)(nil)).Elem()
}

func (i AccessConnectorMap) ToAccessConnectorMapOutput() AccessConnectorMapOutput {
	return i.ToAccessConnectorMapOutputWithContext(context.Background())
}

func (i AccessConnectorMap) ToAccessConnectorMapOutputWithContext(ctx context.Context) AccessConnectorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessConnectorMapOutput)
}

type AccessConnectorOutput struct{ *pulumi.OutputState }

func (AccessConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessConnector)(nil)).Elem()
}

func (o AccessConnectorOutput) ToAccessConnectorOutput() AccessConnectorOutput {
	return o
}

func (o AccessConnectorOutput) ToAccessConnectorOutputWithContext(ctx context.Context) AccessConnectorOutput {
	return o
}

// An `identity` block as defined below.
func (o AccessConnectorOutput) Identity() AccessConnectorIdentityPtrOutput {
	return o.ApplyT(func(v *AccessConnector) AccessConnectorIdentityPtrOutput { return v.Identity }).(AccessConnectorIdentityPtrOutput)
}

// Specifies the supported Azure location where the resource has to be created. Changing this forces a new resource to be created.
func (o AccessConnectorOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessConnector) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name of the Databricks Access Connector resource. Changing this forces a new resource to be created.
func (o AccessConnectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessConnector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the Resource Group in which the Databricks Access Connector should exist. Changing this forces a new resource to be created.
func (o AccessConnectorOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessConnector) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o AccessConnectorOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AccessConnector) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type AccessConnectorArrayOutput struct{ *pulumi.OutputState }

func (AccessConnectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessConnector)(nil)).Elem()
}

func (o AccessConnectorArrayOutput) ToAccessConnectorArrayOutput() AccessConnectorArrayOutput {
	return o
}

func (o AccessConnectorArrayOutput) ToAccessConnectorArrayOutputWithContext(ctx context.Context) AccessConnectorArrayOutput {
	return o
}

func (o AccessConnectorArrayOutput) Index(i pulumi.IntInput) AccessConnectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccessConnector {
		return vs[0].([]*AccessConnector)[vs[1].(int)]
	}).(AccessConnectorOutput)
}

type AccessConnectorMapOutput struct{ *pulumi.OutputState }

func (AccessConnectorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessConnector)(nil)).Elem()
}

func (o AccessConnectorMapOutput) ToAccessConnectorMapOutput() AccessConnectorMapOutput {
	return o
}

func (o AccessConnectorMapOutput) ToAccessConnectorMapOutputWithContext(ctx context.Context) AccessConnectorMapOutput {
	return o
}

func (o AccessConnectorMapOutput) MapIndex(k pulumi.StringInput) AccessConnectorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccessConnector {
		return vs[0].(map[string]*AccessConnector)[vs[1].(string)]
	}).(AccessConnectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessConnectorInput)(nil)).Elem(), &AccessConnector{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessConnectorArrayInput)(nil)).Elem(), AccessConnectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessConnectorMapInput)(nil)).Elem(), AccessConnectorMap{})
	pulumi.RegisterOutputType(AccessConnectorOutput{})
	pulumi.RegisterOutputType(AccessConnectorArrayOutput{})
	pulumi.RegisterOutputType(AccessConnectorMapOutput{})
}
