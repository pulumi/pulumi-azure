// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticsan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Elastic SAN Volume Group resource.
//
// ## Import
//
// An existing Elastic SAN Volume Group can be imported into Terraform using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:elasticsan/volumeGroup:VolumeGroup example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.ElasticSan/elasticSans/esan1/volumeGroups/vg1
// ```
type VolumeGroup struct {
	pulumi.CustomResourceState

	// Specifies the Elastic SAN ID within which this Elastic SAN Volume Group should exist. Changing this forces a new resource to be created.
	ElasticSanId pulumi.StringOutput `pulumi:"elasticSanId"`
	// An `encryption` block as defined below.
	//
	// > **NOTE:** The `encryption` block can only be set when `encryptionType` is set to `EncryptionAtRestWithCustomerManagedKey`.
	Encryption VolumeGroupEncryptionPtrOutput `pulumi:"encryption"`
	// Specifies the type of the key used to encrypt the data of the disk. Possible values are `EncryptionAtRestWithCustomerManagedKey` and `EncryptionAtRestWithPlatformKey`. Defaults to `EncryptionAtRestWithPlatformKey`.
	EncryptionType pulumi.StringPtrOutput `pulumi:"encryptionType"`
	// An `identity` block as defined below. Specifies the Managed Identity which should be assigned to this Elastic SAN Volume Group.
	Identity VolumeGroupIdentityPtrOutput `pulumi:"identity"`
	// Specifies the name of this Elastic SAN Volume Group. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// One or more `networkRule` blocks as defined below.
	NetworkRules VolumeGroupNetworkRuleArrayOutput `pulumi:"networkRules"`
	// Specifies the type of the storage target. The only possible value is `Iscsi`. Defaults to `Iscsi`.
	ProtocolType pulumi.StringPtrOutput `pulumi:"protocolType"`
}

// NewVolumeGroup registers a new resource with the given unique name, arguments, and options.
func NewVolumeGroup(ctx *pulumi.Context,
	name string, args *VolumeGroupArgs, opts ...pulumi.ResourceOption) (*VolumeGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ElasticSanId == nil {
		return nil, errors.New("invalid value for required argument 'ElasticSanId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VolumeGroup
	err := ctx.RegisterResource("azure:elasticsan/volumeGroup:VolumeGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolumeGroup gets an existing VolumeGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolumeGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeGroupState, opts ...pulumi.ResourceOption) (*VolumeGroup, error) {
	var resource VolumeGroup
	err := ctx.ReadResource("azure:elasticsan/volumeGroup:VolumeGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VolumeGroup resources.
type volumeGroupState struct {
	// Specifies the Elastic SAN ID within which this Elastic SAN Volume Group should exist. Changing this forces a new resource to be created.
	ElasticSanId *string `pulumi:"elasticSanId"`
	// An `encryption` block as defined below.
	//
	// > **NOTE:** The `encryption` block can only be set when `encryptionType` is set to `EncryptionAtRestWithCustomerManagedKey`.
	Encryption *VolumeGroupEncryption `pulumi:"encryption"`
	// Specifies the type of the key used to encrypt the data of the disk. Possible values are `EncryptionAtRestWithCustomerManagedKey` and `EncryptionAtRestWithPlatformKey`. Defaults to `EncryptionAtRestWithPlatformKey`.
	EncryptionType *string `pulumi:"encryptionType"`
	// An `identity` block as defined below. Specifies the Managed Identity which should be assigned to this Elastic SAN Volume Group.
	Identity *VolumeGroupIdentity `pulumi:"identity"`
	// Specifies the name of this Elastic SAN Volume Group. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// One or more `networkRule` blocks as defined below.
	NetworkRules []VolumeGroupNetworkRule `pulumi:"networkRules"`
	// Specifies the type of the storage target. The only possible value is `Iscsi`. Defaults to `Iscsi`.
	ProtocolType *string `pulumi:"protocolType"`
}

type VolumeGroupState struct {
	// Specifies the Elastic SAN ID within which this Elastic SAN Volume Group should exist. Changing this forces a new resource to be created.
	ElasticSanId pulumi.StringPtrInput
	// An `encryption` block as defined below.
	//
	// > **NOTE:** The `encryption` block can only be set when `encryptionType` is set to `EncryptionAtRestWithCustomerManagedKey`.
	Encryption VolumeGroupEncryptionPtrInput
	// Specifies the type of the key used to encrypt the data of the disk. Possible values are `EncryptionAtRestWithCustomerManagedKey` and `EncryptionAtRestWithPlatformKey`. Defaults to `EncryptionAtRestWithPlatformKey`.
	EncryptionType pulumi.StringPtrInput
	// An `identity` block as defined below. Specifies the Managed Identity which should be assigned to this Elastic SAN Volume Group.
	Identity VolumeGroupIdentityPtrInput
	// Specifies the name of this Elastic SAN Volume Group. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// One or more `networkRule` blocks as defined below.
	NetworkRules VolumeGroupNetworkRuleArrayInput
	// Specifies the type of the storage target. The only possible value is `Iscsi`. Defaults to `Iscsi`.
	ProtocolType pulumi.StringPtrInput
}

func (VolumeGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeGroupState)(nil)).Elem()
}

type volumeGroupArgs struct {
	// Specifies the Elastic SAN ID within which this Elastic SAN Volume Group should exist. Changing this forces a new resource to be created.
	ElasticSanId string `pulumi:"elasticSanId"`
	// An `encryption` block as defined below.
	//
	// > **NOTE:** The `encryption` block can only be set when `encryptionType` is set to `EncryptionAtRestWithCustomerManagedKey`.
	Encryption *VolumeGroupEncryption `pulumi:"encryption"`
	// Specifies the type of the key used to encrypt the data of the disk. Possible values are `EncryptionAtRestWithCustomerManagedKey` and `EncryptionAtRestWithPlatformKey`. Defaults to `EncryptionAtRestWithPlatformKey`.
	EncryptionType *string `pulumi:"encryptionType"`
	// An `identity` block as defined below. Specifies the Managed Identity which should be assigned to this Elastic SAN Volume Group.
	Identity *VolumeGroupIdentity `pulumi:"identity"`
	// Specifies the name of this Elastic SAN Volume Group. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// One or more `networkRule` blocks as defined below.
	NetworkRules []VolumeGroupNetworkRule `pulumi:"networkRules"`
	// Specifies the type of the storage target. The only possible value is `Iscsi`. Defaults to `Iscsi`.
	ProtocolType *string `pulumi:"protocolType"`
}

// The set of arguments for constructing a VolumeGroup resource.
type VolumeGroupArgs struct {
	// Specifies the Elastic SAN ID within which this Elastic SAN Volume Group should exist. Changing this forces a new resource to be created.
	ElasticSanId pulumi.StringInput
	// An `encryption` block as defined below.
	//
	// > **NOTE:** The `encryption` block can only be set when `encryptionType` is set to `EncryptionAtRestWithCustomerManagedKey`.
	Encryption VolumeGroupEncryptionPtrInput
	// Specifies the type of the key used to encrypt the data of the disk. Possible values are `EncryptionAtRestWithCustomerManagedKey` and `EncryptionAtRestWithPlatformKey`. Defaults to `EncryptionAtRestWithPlatformKey`.
	EncryptionType pulumi.StringPtrInput
	// An `identity` block as defined below. Specifies the Managed Identity which should be assigned to this Elastic SAN Volume Group.
	Identity VolumeGroupIdentityPtrInput
	// Specifies the name of this Elastic SAN Volume Group. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// One or more `networkRule` blocks as defined below.
	NetworkRules VolumeGroupNetworkRuleArrayInput
	// Specifies the type of the storage target. The only possible value is `Iscsi`. Defaults to `Iscsi`.
	ProtocolType pulumi.StringPtrInput
}

func (VolumeGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeGroupArgs)(nil)).Elem()
}

type VolumeGroupInput interface {
	pulumi.Input

	ToVolumeGroupOutput() VolumeGroupOutput
	ToVolumeGroupOutputWithContext(ctx context.Context) VolumeGroupOutput
}

func (*VolumeGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeGroup)(nil)).Elem()
}

func (i *VolumeGroup) ToVolumeGroupOutput() VolumeGroupOutput {
	return i.ToVolumeGroupOutputWithContext(context.Background())
}

func (i *VolumeGroup) ToVolumeGroupOutputWithContext(ctx context.Context) VolumeGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupOutput)
}

// VolumeGroupArrayInput is an input type that accepts VolumeGroupArray and VolumeGroupArrayOutput values.
// You can construct a concrete instance of `VolumeGroupArrayInput` via:
//
//	VolumeGroupArray{ VolumeGroupArgs{...} }
type VolumeGroupArrayInput interface {
	pulumi.Input

	ToVolumeGroupArrayOutput() VolumeGroupArrayOutput
	ToVolumeGroupArrayOutputWithContext(context.Context) VolumeGroupArrayOutput
}

type VolumeGroupArray []VolumeGroupInput

func (VolumeGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VolumeGroup)(nil)).Elem()
}

func (i VolumeGroupArray) ToVolumeGroupArrayOutput() VolumeGroupArrayOutput {
	return i.ToVolumeGroupArrayOutputWithContext(context.Background())
}

func (i VolumeGroupArray) ToVolumeGroupArrayOutputWithContext(ctx context.Context) VolumeGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupArrayOutput)
}

// VolumeGroupMapInput is an input type that accepts VolumeGroupMap and VolumeGroupMapOutput values.
// You can construct a concrete instance of `VolumeGroupMapInput` via:
//
//	VolumeGroupMap{ "key": VolumeGroupArgs{...} }
type VolumeGroupMapInput interface {
	pulumi.Input

	ToVolumeGroupMapOutput() VolumeGroupMapOutput
	ToVolumeGroupMapOutputWithContext(context.Context) VolumeGroupMapOutput
}

type VolumeGroupMap map[string]VolumeGroupInput

func (VolumeGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VolumeGroup)(nil)).Elem()
}

func (i VolumeGroupMap) ToVolumeGroupMapOutput() VolumeGroupMapOutput {
	return i.ToVolumeGroupMapOutputWithContext(context.Background())
}

func (i VolumeGroupMap) ToVolumeGroupMapOutputWithContext(ctx context.Context) VolumeGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupMapOutput)
}

type VolumeGroupOutput struct{ *pulumi.OutputState }

func (VolumeGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeGroup)(nil)).Elem()
}

func (o VolumeGroupOutput) ToVolumeGroupOutput() VolumeGroupOutput {
	return o
}

func (o VolumeGroupOutput) ToVolumeGroupOutputWithContext(ctx context.Context) VolumeGroupOutput {
	return o
}

// Specifies the Elastic SAN ID within which this Elastic SAN Volume Group should exist. Changing this forces a new resource to be created.
func (o VolumeGroupOutput) ElasticSanId() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeGroup) pulumi.StringOutput { return v.ElasticSanId }).(pulumi.StringOutput)
}

// An `encryption` block as defined below.
//
// > **NOTE:** The `encryption` block can only be set when `encryptionType` is set to `EncryptionAtRestWithCustomerManagedKey`.
func (o VolumeGroupOutput) Encryption() VolumeGroupEncryptionPtrOutput {
	return o.ApplyT(func(v *VolumeGroup) VolumeGroupEncryptionPtrOutput { return v.Encryption }).(VolumeGroupEncryptionPtrOutput)
}

// Specifies the type of the key used to encrypt the data of the disk. Possible values are `EncryptionAtRestWithCustomerManagedKey` and `EncryptionAtRestWithPlatformKey`. Defaults to `EncryptionAtRestWithPlatformKey`.
func (o VolumeGroupOutput) EncryptionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeGroup) pulumi.StringPtrOutput { return v.EncryptionType }).(pulumi.StringPtrOutput)
}

// An `identity` block as defined below. Specifies the Managed Identity which should be assigned to this Elastic SAN Volume Group.
func (o VolumeGroupOutput) Identity() VolumeGroupIdentityPtrOutput {
	return o.ApplyT(func(v *VolumeGroup) VolumeGroupIdentityPtrOutput { return v.Identity }).(VolumeGroupIdentityPtrOutput)
}

// Specifies the name of this Elastic SAN Volume Group. Changing this forces a new resource to be created.
func (o VolumeGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// One or more `networkRule` blocks as defined below.
func (o VolumeGroupOutput) NetworkRules() VolumeGroupNetworkRuleArrayOutput {
	return o.ApplyT(func(v *VolumeGroup) VolumeGroupNetworkRuleArrayOutput { return v.NetworkRules }).(VolumeGroupNetworkRuleArrayOutput)
}

// Specifies the type of the storage target. The only possible value is `Iscsi`. Defaults to `Iscsi`.
func (o VolumeGroupOutput) ProtocolType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeGroup) pulumi.StringPtrOutput { return v.ProtocolType }).(pulumi.StringPtrOutput)
}

type VolumeGroupArrayOutput struct{ *pulumi.OutputState }

func (VolumeGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VolumeGroup)(nil)).Elem()
}

func (o VolumeGroupArrayOutput) ToVolumeGroupArrayOutput() VolumeGroupArrayOutput {
	return o
}

func (o VolumeGroupArrayOutput) ToVolumeGroupArrayOutputWithContext(ctx context.Context) VolumeGroupArrayOutput {
	return o
}

func (o VolumeGroupArrayOutput) Index(i pulumi.IntInput) VolumeGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VolumeGroup {
		return vs[0].([]*VolumeGroup)[vs[1].(int)]
	}).(VolumeGroupOutput)
}

type VolumeGroupMapOutput struct{ *pulumi.OutputState }

func (VolumeGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VolumeGroup)(nil)).Elem()
}

func (o VolumeGroupMapOutput) ToVolumeGroupMapOutput() VolumeGroupMapOutput {
	return o
}

func (o VolumeGroupMapOutput) ToVolumeGroupMapOutputWithContext(ctx context.Context) VolumeGroupMapOutput {
	return o
}

func (o VolumeGroupMapOutput) MapIndex(k pulumi.StringInput) VolumeGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VolumeGroup {
		return vs[0].(map[string]*VolumeGroup)[vs[1].(string)]
	}).(VolumeGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeGroupInput)(nil)).Elem(), &VolumeGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeGroupArrayInput)(nil)).Elem(), VolumeGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeGroupMapInput)(nil)).Elem(), VolumeGroupMap{})
	pulumi.RegisterOutputType(VolumeGroupOutput{})
	pulumi.RegisterOutputType(VolumeGroupArrayOutput{})
	pulumi.RegisterOutputType(VolumeGroupMapOutput{})
}
