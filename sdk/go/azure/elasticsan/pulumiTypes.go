// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticsan

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ElasticSanSku struct {
	// The SKU name. Possible values are `Premium_LRS` and `Premium_ZRS`. Changing this forces a new resource to be created.
	//
	// > **NOTE** `Premium_ZRS` SKU is only available in limited Azure regions including `France Central`, `North Europe`, `West Europe`, and `West US 2`. Please refer to this [document](https://azure.microsoft.com/updates/regional-expansion-azure-elastic-san-public-preview-is-now-available-in-more-regions) for more details.
	Name string `pulumi:"name"`
	// The SKU tier. The only possible value is `Premium`. Defaults to `Premium`.
	Tier *string `pulumi:"tier"`
}

// ElasticSanSkuInput is an input type that accepts ElasticSanSkuArgs and ElasticSanSkuOutput values.
// You can construct a concrete instance of `ElasticSanSkuInput` via:
//
//	ElasticSanSkuArgs{...}
type ElasticSanSkuInput interface {
	pulumi.Input

	ToElasticSanSkuOutput() ElasticSanSkuOutput
	ToElasticSanSkuOutputWithContext(context.Context) ElasticSanSkuOutput
}

type ElasticSanSkuArgs struct {
	// The SKU name. Possible values are `Premium_LRS` and `Premium_ZRS`. Changing this forces a new resource to be created.
	//
	// > **NOTE** `Premium_ZRS` SKU is only available in limited Azure regions including `France Central`, `North Europe`, `West Europe`, and `West US 2`. Please refer to this [document](https://azure.microsoft.com/updates/regional-expansion-azure-elastic-san-public-preview-is-now-available-in-more-regions) for more details.
	Name pulumi.StringInput `pulumi:"name"`
	// The SKU tier. The only possible value is `Premium`. Defaults to `Premium`.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (ElasticSanSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticSanSku)(nil)).Elem()
}

func (i ElasticSanSkuArgs) ToElasticSanSkuOutput() ElasticSanSkuOutput {
	return i.ToElasticSanSkuOutputWithContext(context.Background())
}

func (i ElasticSanSkuArgs) ToElasticSanSkuOutputWithContext(ctx context.Context) ElasticSanSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticSanSkuOutput)
}

func (i ElasticSanSkuArgs) ToElasticSanSkuPtrOutput() ElasticSanSkuPtrOutput {
	return i.ToElasticSanSkuPtrOutputWithContext(context.Background())
}

func (i ElasticSanSkuArgs) ToElasticSanSkuPtrOutputWithContext(ctx context.Context) ElasticSanSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticSanSkuOutput).ToElasticSanSkuPtrOutputWithContext(ctx)
}

// ElasticSanSkuPtrInput is an input type that accepts ElasticSanSkuArgs, ElasticSanSkuPtr and ElasticSanSkuPtrOutput values.
// You can construct a concrete instance of `ElasticSanSkuPtrInput` via:
//
//	        ElasticSanSkuArgs{...}
//
//	or:
//
//	        nil
type ElasticSanSkuPtrInput interface {
	pulumi.Input

	ToElasticSanSkuPtrOutput() ElasticSanSkuPtrOutput
	ToElasticSanSkuPtrOutputWithContext(context.Context) ElasticSanSkuPtrOutput
}

type elasticSanSkuPtrType ElasticSanSkuArgs

func ElasticSanSkuPtr(v *ElasticSanSkuArgs) ElasticSanSkuPtrInput {
	return (*elasticSanSkuPtrType)(v)
}

func (*elasticSanSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticSanSku)(nil)).Elem()
}

func (i *elasticSanSkuPtrType) ToElasticSanSkuPtrOutput() ElasticSanSkuPtrOutput {
	return i.ToElasticSanSkuPtrOutputWithContext(context.Background())
}

func (i *elasticSanSkuPtrType) ToElasticSanSkuPtrOutputWithContext(ctx context.Context) ElasticSanSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticSanSkuPtrOutput)
}

type ElasticSanSkuOutput struct{ *pulumi.OutputState }

func (ElasticSanSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticSanSku)(nil)).Elem()
}

func (o ElasticSanSkuOutput) ToElasticSanSkuOutput() ElasticSanSkuOutput {
	return o
}

func (o ElasticSanSkuOutput) ToElasticSanSkuOutputWithContext(ctx context.Context) ElasticSanSkuOutput {
	return o
}

func (o ElasticSanSkuOutput) ToElasticSanSkuPtrOutput() ElasticSanSkuPtrOutput {
	return o.ToElasticSanSkuPtrOutputWithContext(context.Background())
}

func (o ElasticSanSkuOutput) ToElasticSanSkuPtrOutputWithContext(ctx context.Context) ElasticSanSkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticSanSku) *ElasticSanSku {
		return &v
	}).(ElasticSanSkuPtrOutput)
}

// The SKU name. Possible values are `Premium_LRS` and `Premium_ZRS`. Changing this forces a new resource to be created.
//
// > **NOTE** `Premium_ZRS` SKU is only available in limited Azure regions including `France Central`, `North Europe`, `West Europe`, and `West US 2`. Please refer to this [document](https://azure.microsoft.com/updates/regional-expansion-azure-elastic-san-public-preview-is-now-available-in-more-regions) for more details.
func (o ElasticSanSkuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticSanSku) string { return v.Name }).(pulumi.StringOutput)
}

// The SKU tier. The only possible value is `Premium`. Defaults to `Premium`.
func (o ElasticSanSkuOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticSanSku) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type ElasticSanSkuPtrOutput struct{ *pulumi.OutputState }

func (ElasticSanSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticSanSku)(nil)).Elem()
}

func (o ElasticSanSkuPtrOutput) ToElasticSanSkuPtrOutput() ElasticSanSkuPtrOutput {
	return o
}

func (o ElasticSanSkuPtrOutput) ToElasticSanSkuPtrOutputWithContext(ctx context.Context) ElasticSanSkuPtrOutput {
	return o
}

func (o ElasticSanSkuPtrOutput) Elem() ElasticSanSkuOutput {
	return o.ApplyT(func(v *ElasticSanSku) ElasticSanSku {
		if v != nil {
			return *v
		}
		var ret ElasticSanSku
		return ret
	}).(ElasticSanSkuOutput)
}

// The SKU name. Possible values are `Premium_LRS` and `Premium_ZRS`. Changing this forces a new resource to be created.
//
// > **NOTE** `Premium_ZRS` SKU is only available in limited Azure regions including `France Central`, `North Europe`, `West Europe`, and `West US 2`. Please refer to this [document](https://azure.microsoft.com/updates/regional-expansion-azure-elastic-san-public-preview-is-now-available-in-more-regions) for more details.
func (o ElasticSanSkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticSanSku) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The SKU tier. The only possible value is `Premium`. Defaults to `Premium`.
func (o ElasticSanSkuPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticSanSku) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

type VolumeCreateSource struct {
	// Specifies the ID of the source to create the Elastic SAN Volume from. Changing this forces a new resource to be created.
	SourceId string `pulumi:"sourceId"`
	// Specifies the type of the source to create the Elastic SAN Volume from. Possible values are `Disk`, `DiskRestorePoint`, `DiskSnapshot` and `VolumeSnapshot`. Changing this forces a new resource to be created.
	SourceType string `pulumi:"sourceType"`
}

// VolumeCreateSourceInput is an input type that accepts VolumeCreateSourceArgs and VolumeCreateSourceOutput values.
// You can construct a concrete instance of `VolumeCreateSourceInput` via:
//
//	VolumeCreateSourceArgs{...}
type VolumeCreateSourceInput interface {
	pulumi.Input

	ToVolumeCreateSourceOutput() VolumeCreateSourceOutput
	ToVolumeCreateSourceOutputWithContext(context.Context) VolumeCreateSourceOutput
}

type VolumeCreateSourceArgs struct {
	// Specifies the ID of the source to create the Elastic SAN Volume from. Changing this forces a new resource to be created.
	SourceId pulumi.StringInput `pulumi:"sourceId"`
	// Specifies the type of the source to create the Elastic SAN Volume from. Possible values are `Disk`, `DiskRestorePoint`, `DiskSnapshot` and `VolumeSnapshot`. Changing this forces a new resource to be created.
	SourceType pulumi.StringInput `pulumi:"sourceType"`
}

func (VolumeCreateSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeCreateSource)(nil)).Elem()
}

func (i VolumeCreateSourceArgs) ToVolumeCreateSourceOutput() VolumeCreateSourceOutput {
	return i.ToVolumeCreateSourceOutputWithContext(context.Background())
}

func (i VolumeCreateSourceArgs) ToVolumeCreateSourceOutputWithContext(ctx context.Context) VolumeCreateSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeCreateSourceOutput)
}

func (i VolumeCreateSourceArgs) ToVolumeCreateSourcePtrOutput() VolumeCreateSourcePtrOutput {
	return i.ToVolumeCreateSourcePtrOutputWithContext(context.Background())
}

func (i VolumeCreateSourceArgs) ToVolumeCreateSourcePtrOutputWithContext(ctx context.Context) VolumeCreateSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeCreateSourceOutput).ToVolumeCreateSourcePtrOutputWithContext(ctx)
}

// VolumeCreateSourcePtrInput is an input type that accepts VolumeCreateSourceArgs, VolumeCreateSourcePtr and VolumeCreateSourcePtrOutput values.
// You can construct a concrete instance of `VolumeCreateSourcePtrInput` via:
//
//	        VolumeCreateSourceArgs{...}
//
//	or:
//
//	        nil
type VolumeCreateSourcePtrInput interface {
	pulumi.Input

	ToVolumeCreateSourcePtrOutput() VolumeCreateSourcePtrOutput
	ToVolumeCreateSourcePtrOutputWithContext(context.Context) VolumeCreateSourcePtrOutput
}

type volumeCreateSourcePtrType VolumeCreateSourceArgs

func VolumeCreateSourcePtr(v *VolumeCreateSourceArgs) VolumeCreateSourcePtrInput {
	return (*volumeCreateSourcePtrType)(v)
}

func (*volumeCreateSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeCreateSource)(nil)).Elem()
}

func (i *volumeCreateSourcePtrType) ToVolumeCreateSourcePtrOutput() VolumeCreateSourcePtrOutput {
	return i.ToVolumeCreateSourcePtrOutputWithContext(context.Background())
}

func (i *volumeCreateSourcePtrType) ToVolumeCreateSourcePtrOutputWithContext(ctx context.Context) VolumeCreateSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeCreateSourcePtrOutput)
}

type VolumeCreateSourceOutput struct{ *pulumi.OutputState }

func (VolumeCreateSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeCreateSource)(nil)).Elem()
}

func (o VolumeCreateSourceOutput) ToVolumeCreateSourceOutput() VolumeCreateSourceOutput {
	return o
}

func (o VolumeCreateSourceOutput) ToVolumeCreateSourceOutputWithContext(ctx context.Context) VolumeCreateSourceOutput {
	return o
}

func (o VolumeCreateSourceOutput) ToVolumeCreateSourcePtrOutput() VolumeCreateSourcePtrOutput {
	return o.ToVolumeCreateSourcePtrOutputWithContext(context.Background())
}

func (o VolumeCreateSourceOutput) ToVolumeCreateSourcePtrOutputWithContext(ctx context.Context) VolumeCreateSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeCreateSource) *VolumeCreateSource {
		return &v
	}).(VolumeCreateSourcePtrOutput)
}

// Specifies the ID of the source to create the Elastic SAN Volume from. Changing this forces a new resource to be created.
func (o VolumeCreateSourceOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeCreateSource) string { return v.SourceId }).(pulumi.StringOutput)
}

// Specifies the type of the source to create the Elastic SAN Volume from. Possible values are `Disk`, `DiskRestorePoint`, `DiskSnapshot` and `VolumeSnapshot`. Changing this forces a new resource to be created.
func (o VolumeCreateSourceOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeCreateSource) string { return v.SourceType }).(pulumi.StringOutput)
}

type VolumeCreateSourcePtrOutput struct{ *pulumi.OutputState }

func (VolumeCreateSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeCreateSource)(nil)).Elem()
}

func (o VolumeCreateSourcePtrOutput) ToVolumeCreateSourcePtrOutput() VolumeCreateSourcePtrOutput {
	return o
}

func (o VolumeCreateSourcePtrOutput) ToVolumeCreateSourcePtrOutputWithContext(ctx context.Context) VolumeCreateSourcePtrOutput {
	return o
}

func (o VolumeCreateSourcePtrOutput) Elem() VolumeCreateSourceOutput {
	return o.ApplyT(func(v *VolumeCreateSource) VolumeCreateSource {
		if v != nil {
			return *v
		}
		var ret VolumeCreateSource
		return ret
	}).(VolumeCreateSourceOutput)
}

// Specifies the ID of the source to create the Elastic SAN Volume from. Changing this forces a new resource to be created.
func (o VolumeCreateSourcePtrOutput) SourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeCreateSource) *string {
		if v == nil {
			return nil
		}
		return &v.SourceId
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of the source to create the Elastic SAN Volume from. Possible values are `Disk`, `DiskRestorePoint`, `DiskSnapshot` and `VolumeSnapshot`. Changing this forces a new resource to be created.
func (o VolumeCreateSourcePtrOutput) SourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeCreateSource) *string {
		if v == nil {
			return nil
		}
		return &v.SourceType
	}).(pulumi.StringPtrOutput)
}

type VolumeGroupEncryption struct {
	// The timestamp of the expiration time for the current version of the customer managed key.
	CurrentVersionedKeyExpirationTimestamp *string `pulumi:"currentVersionedKeyExpirationTimestamp"`
	// The ID of the current versioned Key Vault Key in use.
	CurrentVersionedKeyId *string `pulumi:"currentVersionedKeyId"`
	// The Key Vault key URI for Customer Managed Key encryption, which can be either a full URI or a versionless URI.
	KeyVaultKeyId string `pulumi:"keyVaultKeyId"`
	// The timestamp of the last rotation of the Key Vault Key.
	LastKeyRotationTimestamp *string `pulumi:"lastKeyRotationTimestamp"`
	// The ID of the User Assigned Identity used by this Elastic SAN Volume Group.
	UserAssignedIdentityId *string `pulumi:"userAssignedIdentityId"`
}

// VolumeGroupEncryptionInput is an input type that accepts VolumeGroupEncryptionArgs and VolumeGroupEncryptionOutput values.
// You can construct a concrete instance of `VolumeGroupEncryptionInput` via:
//
//	VolumeGroupEncryptionArgs{...}
type VolumeGroupEncryptionInput interface {
	pulumi.Input

	ToVolumeGroupEncryptionOutput() VolumeGroupEncryptionOutput
	ToVolumeGroupEncryptionOutputWithContext(context.Context) VolumeGroupEncryptionOutput
}

type VolumeGroupEncryptionArgs struct {
	// The timestamp of the expiration time for the current version of the customer managed key.
	CurrentVersionedKeyExpirationTimestamp pulumi.StringPtrInput `pulumi:"currentVersionedKeyExpirationTimestamp"`
	// The ID of the current versioned Key Vault Key in use.
	CurrentVersionedKeyId pulumi.StringPtrInput `pulumi:"currentVersionedKeyId"`
	// The Key Vault key URI for Customer Managed Key encryption, which can be either a full URI or a versionless URI.
	KeyVaultKeyId pulumi.StringInput `pulumi:"keyVaultKeyId"`
	// The timestamp of the last rotation of the Key Vault Key.
	LastKeyRotationTimestamp pulumi.StringPtrInput `pulumi:"lastKeyRotationTimestamp"`
	// The ID of the User Assigned Identity used by this Elastic SAN Volume Group.
	UserAssignedIdentityId pulumi.StringPtrInput `pulumi:"userAssignedIdentityId"`
}

func (VolumeGroupEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeGroupEncryption)(nil)).Elem()
}

func (i VolumeGroupEncryptionArgs) ToVolumeGroupEncryptionOutput() VolumeGroupEncryptionOutput {
	return i.ToVolumeGroupEncryptionOutputWithContext(context.Background())
}

func (i VolumeGroupEncryptionArgs) ToVolumeGroupEncryptionOutputWithContext(ctx context.Context) VolumeGroupEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupEncryptionOutput)
}

func (i VolumeGroupEncryptionArgs) ToVolumeGroupEncryptionPtrOutput() VolumeGroupEncryptionPtrOutput {
	return i.ToVolumeGroupEncryptionPtrOutputWithContext(context.Background())
}

func (i VolumeGroupEncryptionArgs) ToVolumeGroupEncryptionPtrOutputWithContext(ctx context.Context) VolumeGroupEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupEncryptionOutput).ToVolumeGroupEncryptionPtrOutputWithContext(ctx)
}

// VolumeGroupEncryptionPtrInput is an input type that accepts VolumeGroupEncryptionArgs, VolumeGroupEncryptionPtr and VolumeGroupEncryptionPtrOutput values.
// You can construct a concrete instance of `VolumeGroupEncryptionPtrInput` via:
//
//	        VolumeGroupEncryptionArgs{...}
//
//	or:
//
//	        nil
type VolumeGroupEncryptionPtrInput interface {
	pulumi.Input

	ToVolumeGroupEncryptionPtrOutput() VolumeGroupEncryptionPtrOutput
	ToVolumeGroupEncryptionPtrOutputWithContext(context.Context) VolumeGroupEncryptionPtrOutput
}

type volumeGroupEncryptionPtrType VolumeGroupEncryptionArgs

func VolumeGroupEncryptionPtr(v *VolumeGroupEncryptionArgs) VolumeGroupEncryptionPtrInput {
	return (*volumeGroupEncryptionPtrType)(v)
}

func (*volumeGroupEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeGroupEncryption)(nil)).Elem()
}

func (i *volumeGroupEncryptionPtrType) ToVolumeGroupEncryptionPtrOutput() VolumeGroupEncryptionPtrOutput {
	return i.ToVolumeGroupEncryptionPtrOutputWithContext(context.Background())
}

func (i *volumeGroupEncryptionPtrType) ToVolumeGroupEncryptionPtrOutputWithContext(ctx context.Context) VolumeGroupEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupEncryptionPtrOutput)
}

type VolumeGroupEncryptionOutput struct{ *pulumi.OutputState }

func (VolumeGroupEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeGroupEncryption)(nil)).Elem()
}

func (o VolumeGroupEncryptionOutput) ToVolumeGroupEncryptionOutput() VolumeGroupEncryptionOutput {
	return o
}

func (o VolumeGroupEncryptionOutput) ToVolumeGroupEncryptionOutputWithContext(ctx context.Context) VolumeGroupEncryptionOutput {
	return o
}

func (o VolumeGroupEncryptionOutput) ToVolumeGroupEncryptionPtrOutput() VolumeGroupEncryptionPtrOutput {
	return o.ToVolumeGroupEncryptionPtrOutputWithContext(context.Background())
}

func (o VolumeGroupEncryptionOutput) ToVolumeGroupEncryptionPtrOutputWithContext(ctx context.Context) VolumeGroupEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeGroupEncryption) *VolumeGroupEncryption {
		return &v
	}).(VolumeGroupEncryptionPtrOutput)
}

// The timestamp of the expiration time for the current version of the customer managed key.
func (o VolumeGroupEncryptionOutput) CurrentVersionedKeyExpirationTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupEncryption) *string { return v.CurrentVersionedKeyExpirationTimestamp }).(pulumi.StringPtrOutput)
}

// The ID of the current versioned Key Vault Key in use.
func (o VolumeGroupEncryptionOutput) CurrentVersionedKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupEncryption) *string { return v.CurrentVersionedKeyId }).(pulumi.StringPtrOutput)
}

// The Key Vault key URI for Customer Managed Key encryption, which can be either a full URI or a versionless URI.
func (o VolumeGroupEncryptionOutput) KeyVaultKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeGroupEncryption) string { return v.KeyVaultKeyId }).(pulumi.StringOutput)
}

// The timestamp of the last rotation of the Key Vault Key.
func (o VolumeGroupEncryptionOutput) LastKeyRotationTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupEncryption) *string { return v.LastKeyRotationTimestamp }).(pulumi.StringPtrOutput)
}

// The ID of the User Assigned Identity used by this Elastic SAN Volume Group.
func (o VolumeGroupEncryptionOutput) UserAssignedIdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupEncryption) *string { return v.UserAssignedIdentityId }).(pulumi.StringPtrOutput)
}

type VolumeGroupEncryptionPtrOutput struct{ *pulumi.OutputState }

func (VolumeGroupEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeGroupEncryption)(nil)).Elem()
}

func (o VolumeGroupEncryptionPtrOutput) ToVolumeGroupEncryptionPtrOutput() VolumeGroupEncryptionPtrOutput {
	return o
}

func (o VolumeGroupEncryptionPtrOutput) ToVolumeGroupEncryptionPtrOutputWithContext(ctx context.Context) VolumeGroupEncryptionPtrOutput {
	return o
}

func (o VolumeGroupEncryptionPtrOutput) Elem() VolumeGroupEncryptionOutput {
	return o.ApplyT(func(v *VolumeGroupEncryption) VolumeGroupEncryption {
		if v != nil {
			return *v
		}
		var ret VolumeGroupEncryption
		return ret
	}).(VolumeGroupEncryptionOutput)
}

// The timestamp of the expiration time for the current version of the customer managed key.
func (o VolumeGroupEncryptionPtrOutput) CurrentVersionedKeyExpirationTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeGroupEncryption) *string {
		if v == nil {
			return nil
		}
		return v.CurrentVersionedKeyExpirationTimestamp
	}).(pulumi.StringPtrOutput)
}

// The ID of the current versioned Key Vault Key in use.
func (o VolumeGroupEncryptionPtrOutput) CurrentVersionedKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeGroupEncryption) *string {
		if v == nil {
			return nil
		}
		return v.CurrentVersionedKeyId
	}).(pulumi.StringPtrOutput)
}

// The Key Vault key URI for Customer Managed Key encryption, which can be either a full URI or a versionless URI.
func (o VolumeGroupEncryptionPtrOutput) KeyVaultKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeGroupEncryption) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVaultKeyId
	}).(pulumi.StringPtrOutput)
}

// The timestamp of the last rotation of the Key Vault Key.
func (o VolumeGroupEncryptionPtrOutput) LastKeyRotationTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeGroupEncryption) *string {
		if v == nil {
			return nil
		}
		return v.LastKeyRotationTimestamp
	}).(pulumi.StringPtrOutput)
}

// The ID of the User Assigned Identity used by this Elastic SAN Volume Group.
func (o VolumeGroupEncryptionPtrOutput) UserAssignedIdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeGroupEncryption) *string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentityId
	}).(pulumi.StringPtrOutput)
}

type VolumeGroupIdentity struct {
	// A list of the User Assigned Identity IDs that should be assigned to this Elastic SAN Volume Group.
	IdentityIds []string `pulumi:"identityIds"`
	// The Principal ID associated with the Managed Service Identity assigned to this Elastic SAN Volume Group.
	PrincipalId *string `pulumi:"principalId"`
	// The Tenant ID associated with this Managed Service Identity assigned to this Elastic SAN Volume Group.
	TenantId *string `pulumi:"tenantId"`
	// Specifies the type of Managed Identity that should be assigned to this Elastic SAN Volume Group. Possible values are `SystemAssigned` and `UserAssigned`.
	Type string `pulumi:"type"`
}

// VolumeGroupIdentityInput is an input type that accepts VolumeGroupIdentityArgs and VolumeGroupIdentityOutput values.
// You can construct a concrete instance of `VolumeGroupIdentityInput` via:
//
//	VolumeGroupIdentityArgs{...}
type VolumeGroupIdentityInput interface {
	pulumi.Input

	ToVolumeGroupIdentityOutput() VolumeGroupIdentityOutput
	ToVolumeGroupIdentityOutputWithContext(context.Context) VolumeGroupIdentityOutput
}

type VolumeGroupIdentityArgs struct {
	// A list of the User Assigned Identity IDs that should be assigned to this Elastic SAN Volume Group.
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	// The Principal ID associated with the Managed Service Identity assigned to this Elastic SAN Volume Group.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The Tenant ID associated with this Managed Service Identity assigned to this Elastic SAN Volume Group.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// Specifies the type of Managed Identity that should be assigned to this Elastic SAN Volume Group. Possible values are `SystemAssigned` and `UserAssigned`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (VolumeGroupIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeGroupIdentity)(nil)).Elem()
}

func (i VolumeGroupIdentityArgs) ToVolumeGroupIdentityOutput() VolumeGroupIdentityOutput {
	return i.ToVolumeGroupIdentityOutputWithContext(context.Background())
}

func (i VolumeGroupIdentityArgs) ToVolumeGroupIdentityOutputWithContext(ctx context.Context) VolumeGroupIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupIdentityOutput)
}

func (i VolumeGroupIdentityArgs) ToVolumeGroupIdentityPtrOutput() VolumeGroupIdentityPtrOutput {
	return i.ToVolumeGroupIdentityPtrOutputWithContext(context.Background())
}

func (i VolumeGroupIdentityArgs) ToVolumeGroupIdentityPtrOutputWithContext(ctx context.Context) VolumeGroupIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupIdentityOutput).ToVolumeGroupIdentityPtrOutputWithContext(ctx)
}

// VolumeGroupIdentityPtrInput is an input type that accepts VolumeGroupIdentityArgs, VolumeGroupIdentityPtr and VolumeGroupIdentityPtrOutput values.
// You can construct a concrete instance of `VolumeGroupIdentityPtrInput` via:
//
//	        VolumeGroupIdentityArgs{...}
//
//	or:
//
//	        nil
type VolumeGroupIdentityPtrInput interface {
	pulumi.Input

	ToVolumeGroupIdentityPtrOutput() VolumeGroupIdentityPtrOutput
	ToVolumeGroupIdentityPtrOutputWithContext(context.Context) VolumeGroupIdentityPtrOutput
}

type volumeGroupIdentityPtrType VolumeGroupIdentityArgs

func VolumeGroupIdentityPtr(v *VolumeGroupIdentityArgs) VolumeGroupIdentityPtrInput {
	return (*volumeGroupIdentityPtrType)(v)
}

func (*volumeGroupIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeGroupIdentity)(nil)).Elem()
}

func (i *volumeGroupIdentityPtrType) ToVolumeGroupIdentityPtrOutput() VolumeGroupIdentityPtrOutput {
	return i.ToVolumeGroupIdentityPtrOutputWithContext(context.Background())
}

func (i *volumeGroupIdentityPtrType) ToVolumeGroupIdentityPtrOutputWithContext(ctx context.Context) VolumeGroupIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupIdentityPtrOutput)
}

type VolumeGroupIdentityOutput struct{ *pulumi.OutputState }

func (VolumeGroupIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeGroupIdentity)(nil)).Elem()
}

func (o VolumeGroupIdentityOutput) ToVolumeGroupIdentityOutput() VolumeGroupIdentityOutput {
	return o
}

func (o VolumeGroupIdentityOutput) ToVolumeGroupIdentityOutputWithContext(ctx context.Context) VolumeGroupIdentityOutput {
	return o
}

func (o VolumeGroupIdentityOutput) ToVolumeGroupIdentityPtrOutput() VolumeGroupIdentityPtrOutput {
	return o.ToVolumeGroupIdentityPtrOutputWithContext(context.Background())
}

func (o VolumeGroupIdentityOutput) ToVolumeGroupIdentityPtrOutputWithContext(ctx context.Context) VolumeGroupIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeGroupIdentity) *VolumeGroupIdentity {
		return &v
	}).(VolumeGroupIdentityPtrOutput)
}

// A list of the User Assigned Identity IDs that should be assigned to this Elastic SAN Volume Group.
func (o VolumeGroupIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VolumeGroupIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

// The Principal ID associated with the Managed Service Identity assigned to this Elastic SAN Volume Group.
func (o VolumeGroupIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The Tenant ID associated with this Managed Service Identity assigned to this Elastic SAN Volume Group.
func (o VolumeGroupIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Identity that should be assigned to this Elastic SAN Volume Group. Possible values are `SystemAssigned` and `UserAssigned`.
func (o VolumeGroupIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeGroupIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type VolumeGroupIdentityPtrOutput struct{ *pulumi.OutputState }

func (VolumeGroupIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeGroupIdentity)(nil)).Elem()
}

func (o VolumeGroupIdentityPtrOutput) ToVolumeGroupIdentityPtrOutput() VolumeGroupIdentityPtrOutput {
	return o
}

func (o VolumeGroupIdentityPtrOutput) ToVolumeGroupIdentityPtrOutputWithContext(ctx context.Context) VolumeGroupIdentityPtrOutput {
	return o
}

func (o VolumeGroupIdentityPtrOutput) Elem() VolumeGroupIdentityOutput {
	return o.ApplyT(func(v *VolumeGroupIdentity) VolumeGroupIdentity {
		if v != nil {
			return *v
		}
		var ret VolumeGroupIdentity
		return ret
	}).(VolumeGroupIdentityOutput)
}

// A list of the User Assigned Identity IDs that should be assigned to this Elastic SAN Volume Group.
func (o VolumeGroupIdentityPtrOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VolumeGroupIdentity) []string {
		if v == nil {
			return nil
		}
		return v.IdentityIds
	}).(pulumi.StringArrayOutput)
}

// The Principal ID associated with the Managed Service Identity assigned to this Elastic SAN Volume Group.
func (o VolumeGroupIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeGroupIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The Tenant ID associated with this Managed Service Identity assigned to this Elastic SAN Volume Group.
func (o VolumeGroupIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeGroupIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Identity that should be assigned to this Elastic SAN Volume Group. Possible values are `SystemAssigned` and `UserAssigned`.
func (o VolumeGroupIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeGroupIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type VolumeGroupNetworkRule struct {
	// The action to take when the Subnet attempts to access this Elastic SAN Volume Group. The only possible value is `Allow`. Defaults to `Allow`.
	Action *string `pulumi:"action"`
	// The ID of the Subnet which should be allowed to access this Elastic SAN Volume Group.
	SubnetId string `pulumi:"subnetId"`
}

// VolumeGroupNetworkRuleInput is an input type that accepts VolumeGroupNetworkRuleArgs and VolumeGroupNetworkRuleOutput values.
// You can construct a concrete instance of `VolumeGroupNetworkRuleInput` via:
//
//	VolumeGroupNetworkRuleArgs{...}
type VolumeGroupNetworkRuleInput interface {
	pulumi.Input

	ToVolumeGroupNetworkRuleOutput() VolumeGroupNetworkRuleOutput
	ToVolumeGroupNetworkRuleOutputWithContext(context.Context) VolumeGroupNetworkRuleOutput
}

type VolumeGroupNetworkRuleArgs struct {
	// The action to take when the Subnet attempts to access this Elastic SAN Volume Group. The only possible value is `Allow`. Defaults to `Allow`.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// The ID of the Subnet which should be allowed to access this Elastic SAN Volume Group.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (VolumeGroupNetworkRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeGroupNetworkRule)(nil)).Elem()
}

func (i VolumeGroupNetworkRuleArgs) ToVolumeGroupNetworkRuleOutput() VolumeGroupNetworkRuleOutput {
	return i.ToVolumeGroupNetworkRuleOutputWithContext(context.Background())
}

func (i VolumeGroupNetworkRuleArgs) ToVolumeGroupNetworkRuleOutputWithContext(ctx context.Context) VolumeGroupNetworkRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupNetworkRuleOutput)
}

// VolumeGroupNetworkRuleArrayInput is an input type that accepts VolumeGroupNetworkRuleArray and VolumeGroupNetworkRuleArrayOutput values.
// You can construct a concrete instance of `VolumeGroupNetworkRuleArrayInput` via:
//
//	VolumeGroupNetworkRuleArray{ VolumeGroupNetworkRuleArgs{...} }
type VolumeGroupNetworkRuleArrayInput interface {
	pulumi.Input

	ToVolumeGroupNetworkRuleArrayOutput() VolumeGroupNetworkRuleArrayOutput
	ToVolumeGroupNetworkRuleArrayOutputWithContext(context.Context) VolumeGroupNetworkRuleArrayOutput
}

type VolumeGroupNetworkRuleArray []VolumeGroupNetworkRuleInput

func (VolumeGroupNetworkRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeGroupNetworkRule)(nil)).Elem()
}

func (i VolumeGroupNetworkRuleArray) ToVolumeGroupNetworkRuleArrayOutput() VolumeGroupNetworkRuleArrayOutput {
	return i.ToVolumeGroupNetworkRuleArrayOutputWithContext(context.Background())
}

func (i VolumeGroupNetworkRuleArray) ToVolumeGroupNetworkRuleArrayOutputWithContext(ctx context.Context) VolumeGroupNetworkRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupNetworkRuleArrayOutput)
}

type VolumeGroupNetworkRuleOutput struct{ *pulumi.OutputState }

func (VolumeGroupNetworkRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeGroupNetworkRule)(nil)).Elem()
}

func (o VolumeGroupNetworkRuleOutput) ToVolumeGroupNetworkRuleOutput() VolumeGroupNetworkRuleOutput {
	return o
}

func (o VolumeGroupNetworkRuleOutput) ToVolumeGroupNetworkRuleOutputWithContext(ctx context.Context) VolumeGroupNetworkRuleOutput {
	return o
}

// The action to take when the Subnet attempts to access this Elastic SAN Volume Group. The only possible value is `Allow`. Defaults to `Allow`.
func (o VolumeGroupNetworkRuleOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupNetworkRule) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// The ID of the Subnet which should be allowed to access this Elastic SAN Volume Group.
func (o VolumeGroupNetworkRuleOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeGroupNetworkRule) string { return v.SubnetId }).(pulumi.StringOutput)
}

type VolumeGroupNetworkRuleArrayOutput struct{ *pulumi.OutputState }

func (VolumeGroupNetworkRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeGroupNetworkRule)(nil)).Elem()
}

func (o VolumeGroupNetworkRuleArrayOutput) ToVolumeGroupNetworkRuleArrayOutput() VolumeGroupNetworkRuleArrayOutput {
	return o
}

func (o VolumeGroupNetworkRuleArrayOutput) ToVolumeGroupNetworkRuleArrayOutputWithContext(ctx context.Context) VolumeGroupNetworkRuleArrayOutput {
	return o
}

func (o VolumeGroupNetworkRuleArrayOutput) Index(i pulumi.IntInput) VolumeGroupNetworkRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeGroupNetworkRule {
		return vs[0].([]VolumeGroupNetworkRule)[vs[1].(int)]
	}).(VolumeGroupNetworkRuleOutput)
}

type GetSkus struct {
	// The name of this Elastic SAN.
	Name string `pulumi:"name"`
	// The SKU tier.
	Tier string `pulumi:"tier"`
}

// GetSkusInput is an input type that accepts GetSkusArgs and GetSkusOutput values.
// You can construct a concrete instance of `GetSkusInput` via:
//
//	GetSkusArgs{...}
type GetSkusInput interface {
	pulumi.Input

	ToGetSkusOutput() GetSkusOutput
	ToGetSkusOutputWithContext(context.Context) GetSkusOutput
}

type GetSkusArgs struct {
	// The name of this Elastic SAN.
	Name pulumi.StringInput `pulumi:"name"`
	// The SKU tier.
	Tier pulumi.StringInput `pulumi:"tier"`
}

func (GetSkusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSkus)(nil)).Elem()
}

func (i GetSkusArgs) ToGetSkusOutput() GetSkusOutput {
	return i.ToGetSkusOutputWithContext(context.Background())
}

func (i GetSkusArgs) ToGetSkusOutputWithContext(ctx context.Context) GetSkusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSkusOutput)
}

// GetSkusArrayInput is an input type that accepts GetSkusArray and GetSkusArrayOutput values.
// You can construct a concrete instance of `GetSkusArrayInput` via:
//
//	GetSkusArray{ GetSkusArgs{...} }
type GetSkusArrayInput interface {
	pulumi.Input

	ToGetSkusArrayOutput() GetSkusArrayOutput
	ToGetSkusArrayOutputWithContext(context.Context) GetSkusArrayOutput
}

type GetSkusArray []GetSkusInput

func (GetSkusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSkus)(nil)).Elem()
}

func (i GetSkusArray) ToGetSkusArrayOutput() GetSkusArrayOutput {
	return i.ToGetSkusArrayOutputWithContext(context.Background())
}

func (i GetSkusArray) ToGetSkusArrayOutputWithContext(ctx context.Context) GetSkusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSkusArrayOutput)
}

type GetSkusOutput struct{ *pulumi.OutputState }

func (GetSkusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSkus)(nil)).Elem()
}

func (o GetSkusOutput) ToGetSkusOutput() GetSkusOutput {
	return o
}

func (o GetSkusOutput) ToGetSkusOutputWithContext(ctx context.Context) GetSkusOutput {
	return o
}

// The name of this Elastic SAN.
func (o GetSkusOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSkus) string { return v.Name }).(pulumi.StringOutput)
}

// The SKU tier.
func (o GetSkusOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v GetSkus) string { return v.Tier }).(pulumi.StringOutput)
}

type GetSkusArrayOutput struct{ *pulumi.OutputState }

func (GetSkusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSkus)(nil)).Elem()
}

func (o GetSkusArrayOutput) ToGetSkusArrayOutput() GetSkusArrayOutput {
	return o
}

func (o GetSkusArrayOutput) ToGetSkusArrayOutputWithContext(ctx context.Context) GetSkusArrayOutput {
	return o
}

func (o GetSkusArrayOutput) Index(i pulumi.IntInput) GetSkusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSkus {
		return vs[0].([]GetSkus)[vs[1].(int)]
	}).(GetSkusOutput)
}

type GetVolumeGroupEncryption struct {
	// The timestamp of the expiration time for the current version of the Customer Managed Key.
	CurrentVersionedKeyExpirationTimestamp string `pulumi:"currentVersionedKeyExpirationTimestamp"`
	// The ID of the current versioned Key Vault Key in use.
	CurrentVersionedKeyId string `pulumi:"currentVersionedKeyId"`
	// The Key Vault Key URI for Customer Managed Key encryption, which can be either a full URI or a versionless URI.
	KeyVaultKeyId string `pulumi:"keyVaultKeyId"`
	// The timestamp of the last rotation of the Key Vault Key.
	LastKeyRotationTimestamp string `pulumi:"lastKeyRotationTimestamp"`
	// The ID of the User Assigned Identity used by this Elastic SAN Volume Group.
	UserAssignedIdentityId string `pulumi:"userAssignedIdentityId"`
}

// GetVolumeGroupEncryptionInput is an input type that accepts GetVolumeGroupEncryptionArgs and GetVolumeGroupEncryptionOutput values.
// You can construct a concrete instance of `GetVolumeGroupEncryptionInput` via:
//
//	GetVolumeGroupEncryptionArgs{...}
type GetVolumeGroupEncryptionInput interface {
	pulumi.Input

	ToGetVolumeGroupEncryptionOutput() GetVolumeGroupEncryptionOutput
	ToGetVolumeGroupEncryptionOutputWithContext(context.Context) GetVolumeGroupEncryptionOutput
}

type GetVolumeGroupEncryptionArgs struct {
	// The timestamp of the expiration time for the current version of the Customer Managed Key.
	CurrentVersionedKeyExpirationTimestamp pulumi.StringInput `pulumi:"currentVersionedKeyExpirationTimestamp"`
	// The ID of the current versioned Key Vault Key in use.
	CurrentVersionedKeyId pulumi.StringInput `pulumi:"currentVersionedKeyId"`
	// The Key Vault Key URI for Customer Managed Key encryption, which can be either a full URI or a versionless URI.
	KeyVaultKeyId pulumi.StringInput `pulumi:"keyVaultKeyId"`
	// The timestamp of the last rotation of the Key Vault Key.
	LastKeyRotationTimestamp pulumi.StringInput `pulumi:"lastKeyRotationTimestamp"`
	// The ID of the User Assigned Identity used by this Elastic SAN Volume Group.
	UserAssignedIdentityId pulumi.StringInput `pulumi:"userAssignedIdentityId"`
}

func (GetVolumeGroupEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeGroupEncryption)(nil)).Elem()
}

func (i GetVolumeGroupEncryptionArgs) ToGetVolumeGroupEncryptionOutput() GetVolumeGroupEncryptionOutput {
	return i.ToGetVolumeGroupEncryptionOutputWithContext(context.Background())
}

func (i GetVolumeGroupEncryptionArgs) ToGetVolumeGroupEncryptionOutputWithContext(ctx context.Context) GetVolumeGroupEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumeGroupEncryptionOutput)
}

// GetVolumeGroupEncryptionArrayInput is an input type that accepts GetVolumeGroupEncryptionArray and GetVolumeGroupEncryptionArrayOutput values.
// You can construct a concrete instance of `GetVolumeGroupEncryptionArrayInput` via:
//
//	GetVolumeGroupEncryptionArray{ GetVolumeGroupEncryptionArgs{...} }
type GetVolumeGroupEncryptionArrayInput interface {
	pulumi.Input

	ToGetVolumeGroupEncryptionArrayOutput() GetVolumeGroupEncryptionArrayOutput
	ToGetVolumeGroupEncryptionArrayOutputWithContext(context.Context) GetVolumeGroupEncryptionArrayOutput
}

type GetVolumeGroupEncryptionArray []GetVolumeGroupEncryptionInput

func (GetVolumeGroupEncryptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVolumeGroupEncryption)(nil)).Elem()
}

func (i GetVolumeGroupEncryptionArray) ToGetVolumeGroupEncryptionArrayOutput() GetVolumeGroupEncryptionArrayOutput {
	return i.ToGetVolumeGroupEncryptionArrayOutputWithContext(context.Background())
}

func (i GetVolumeGroupEncryptionArray) ToGetVolumeGroupEncryptionArrayOutputWithContext(ctx context.Context) GetVolumeGroupEncryptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumeGroupEncryptionArrayOutput)
}

type GetVolumeGroupEncryptionOutput struct{ *pulumi.OutputState }

func (GetVolumeGroupEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeGroupEncryption)(nil)).Elem()
}

func (o GetVolumeGroupEncryptionOutput) ToGetVolumeGroupEncryptionOutput() GetVolumeGroupEncryptionOutput {
	return o
}

func (o GetVolumeGroupEncryptionOutput) ToGetVolumeGroupEncryptionOutputWithContext(ctx context.Context) GetVolumeGroupEncryptionOutput {
	return o
}

// The timestamp of the expiration time for the current version of the Customer Managed Key.
func (o GetVolumeGroupEncryptionOutput) CurrentVersionedKeyExpirationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeGroupEncryption) string { return v.CurrentVersionedKeyExpirationTimestamp }).(pulumi.StringOutput)
}

// The ID of the current versioned Key Vault Key in use.
func (o GetVolumeGroupEncryptionOutput) CurrentVersionedKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeGroupEncryption) string { return v.CurrentVersionedKeyId }).(pulumi.StringOutput)
}

// The Key Vault Key URI for Customer Managed Key encryption, which can be either a full URI or a versionless URI.
func (o GetVolumeGroupEncryptionOutput) KeyVaultKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeGroupEncryption) string { return v.KeyVaultKeyId }).(pulumi.StringOutput)
}

// The timestamp of the last rotation of the Key Vault Key.
func (o GetVolumeGroupEncryptionOutput) LastKeyRotationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeGroupEncryption) string { return v.LastKeyRotationTimestamp }).(pulumi.StringOutput)
}

// The ID of the User Assigned Identity used by this Elastic SAN Volume Group.
func (o GetVolumeGroupEncryptionOutput) UserAssignedIdentityId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeGroupEncryption) string { return v.UserAssignedIdentityId }).(pulumi.StringOutput)
}

type GetVolumeGroupEncryptionArrayOutput struct{ *pulumi.OutputState }

func (GetVolumeGroupEncryptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVolumeGroupEncryption)(nil)).Elem()
}

func (o GetVolumeGroupEncryptionArrayOutput) ToGetVolumeGroupEncryptionArrayOutput() GetVolumeGroupEncryptionArrayOutput {
	return o
}

func (o GetVolumeGroupEncryptionArrayOutput) ToGetVolumeGroupEncryptionArrayOutputWithContext(ctx context.Context) GetVolumeGroupEncryptionArrayOutput {
	return o
}

func (o GetVolumeGroupEncryptionArrayOutput) Index(i pulumi.IntInput) GetVolumeGroupEncryptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVolumeGroupEncryption {
		return vs[0].([]GetVolumeGroupEncryption)[vs[1].(int)]
	}).(GetVolumeGroupEncryptionOutput)
}

type GetVolumeGroupIdentity struct {
	// A list of the User Assigned Identity IDs assigned to this Elastic SAN Volume Group.
	IdentityIds []string `pulumi:"identityIds"`
	// The Principal ID associated with the Managed Service Identity assigned to this Elastic SAN Volume Group.
	PrincipalId string `pulumi:"principalId"`
	// The Tenant ID associated with this Managed Service Identity assigned to this Elastic SAN Volume Group.
	TenantId string `pulumi:"tenantId"`
	// The type of Managed Identity assigned to this Elastic SAN Volume Group.
	Type string `pulumi:"type"`
}

// GetVolumeGroupIdentityInput is an input type that accepts GetVolumeGroupIdentityArgs and GetVolumeGroupIdentityOutput values.
// You can construct a concrete instance of `GetVolumeGroupIdentityInput` via:
//
//	GetVolumeGroupIdentityArgs{...}
type GetVolumeGroupIdentityInput interface {
	pulumi.Input

	ToGetVolumeGroupIdentityOutput() GetVolumeGroupIdentityOutput
	ToGetVolumeGroupIdentityOutputWithContext(context.Context) GetVolumeGroupIdentityOutput
}

type GetVolumeGroupIdentityArgs struct {
	// A list of the User Assigned Identity IDs assigned to this Elastic SAN Volume Group.
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	// The Principal ID associated with the Managed Service Identity assigned to this Elastic SAN Volume Group.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The Tenant ID associated with this Managed Service Identity assigned to this Elastic SAN Volume Group.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The type of Managed Identity assigned to this Elastic SAN Volume Group.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetVolumeGroupIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeGroupIdentity)(nil)).Elem()
}

func (i GetVolumeGroupIdentityArgs) ToGetVolumeGroupIdentityOutput() GetVolumeGroupIdentityOutput {
	return i.ToGetVolumeGroupIdentityOutputWithContext(context.Background())
}

func (i GetVolumeGroupIdentityArgs) ToGetVolumeGroupIdentityOutputWithContext(ctx context.Context) GetVolumeGroupIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumeGroupIdentityOutput)
}

// GetVolumeGroupIdentityArrayInput is an input type that accepts GetVolumeGroupIdentityArray and GetVolumeGroupIdentityArrayOutput values.
// You can construct a concrete instance of `GetVolumeGroupIdentityArrayInput` via:
//
//	GetVolumeGroupIdentityArray{ GetVolumeGroupIdentityArgs{...} }
type GetVolumeGroupIdentityArrayInput interface {
	pulumi.Input

	ToGetVolumeGroupIdentityArrayOutput() GetVolumeGroupIdentityArrayOutput
	ToGetVolumeGroupIdentityArrayOutputWithContext(context.Context) GetVolumeGroupIdentityArrayOutput
}

type GetVolumeGroupIdentityArray []GetVolumeGroupIdentityInput

func (GetVolumeGroupIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVolumeGroupIdentity)(nil)).Elem()
}

func (i GetVolumeGroupIdentityArray) ToGetVolumeGroupIdentityArrayOutput() GetVolumeGroupIdentityArrayOutput {
	return i.ToGetVolumeGroupIdentityArrayOutputWithContext(context.Background())
}

func (i GetVolumeGroupIdentityArray) ToGetVolumeGroupIdentityArrayOutputWithContext(ctx context.Context) GetVolumeGroupIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumeGroupIdentityArrayOutput)
}

type GetVolumeGroupIdentityOutput struct{ *pulumi.OutputState }

func (GetVolumeGroupIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeGroupIdentity)(nil)).Elem()
}

func (o GetVolumeGroupIdentityOutput) ToGetVolumeGroupIdentityOutput() GetVolumeGroupIdentityOutput {
	return o
}

func (o GetVolumeGroupIdentityOutput) ToGetVolumeGroupIdentityOutputWithContext(ctx context.Context) GetVolumeGroupIdentityOutput {
	return o
}

// A list of the User Assigned Identity IDs assigned to this Elastic SAN Volume Group.
func (o GetVolumeGroupIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetVolumeGroupIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

// The Principal ID associated with the Managed Service Identity assigned to this Elastic SAN Volume Group.
func (o GetVolumeGroupIdentityOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeGroupIdentity) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The Tenant ID associated with this Managed Service Identity assigned to this Elastic SAN Volume Group.
func (o GetVolumeGroupIdentityOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeGroupIdentity) string { return v.TenantId }).(pulumi.StringOutput)
}

// The type of Managed Identity assigned to this Elastic SAN Volume Group.
func (o GetVolumeGroupIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeGroupIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type GetVolumeGroupIdentityArrayOutput struct{ *pulumi.OutputState }

func (GetVolumeGroupIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVolumeGroupIdentity)(nil)).Elem()
}

func (o GetVolumeGroupIdentityArrayOutput) ToGetVolumeGroupIdentityArrayOutput() GetVolumeGroupIdentityArrayOutput {
	return o
}

func (o GetVolumeGroupIdentityArrayOutput) ToGetVolumeGroupIdentityArrayOutputWithContext(ctx context.Context) GetVolumeGroupIdentityArrayOutput {
	return o
}

func (o GetVolumeGroupIdentityArrayOutput) Index(i pulumi.IntInput) GetVolumeGroupIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVolumeGroupIdentity {
		return vs[0].([]GetVolumeGroupIdentity)[vs[1].(int)]
	}).(GetVolumeGroupIdentityOutput)
}

type GetVolumeGroupNetworkRule struct {
	// The action to take when an access attempt to this Elastic SAN Volume Group from this Subnet is made.
	Action string `pulumi:"action"`
	// The ID of the Subnet from which access to this Elastic SAN Volume Group is allowed.
	SubnetId string `pulumi:"subnetId"`
}

// GetVolumeGroupNetworkRuleInput is an input type that accepts GetVolumeGroupNetworkRuleArgs and GetVolumeGroupNetworkRuleOutput values.
// You can construct a concrete instance of `GetVolumeGroupNetworkRuleInput` via:
//
//	GetVolumeGroupNetworkRuleArgs{...}
type GetVolumeGroupNetworkRuleInput interface {
	pulumi.Input

	ToGetVolumeGroupNetworkRuleOutput() GetVolumeGroupNetworkRuleOutput
	ToGetVolumeGroupNetworkRuleOutputWithContext(context.Context) GetVolumeGroupNetworkRuleOutput
}

type GetVolumeGroupNetworkRuleArgs struct {
	// The action to take when an access attempt to this Elastic SAN Volume Group from this Subnet is made.
	Action pulumi.StringInput `pulumi:"action"`
	// The ID of the Subnet from which access to this Elastic SAN Volume Group is allowed.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (GetVolumeGroupNetworkRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeGroupNetworkRule)(nil)).Elem()
}

func (i GetVolumeGroupNetworkRuleArgs) ToGetVolumeGroupNetworkRuleOutput() GetVolumeGroupNetworkRuleOutput {
	return i.ToGetVolumeGroupNetworkRuleOutputWithContext(context.Background())
}

func (i GetVolumeGroupNetworkRuleArgs) ToGetVolumeGroupNetworkRuleOutputWithContext(ctx context.Context) GetVolumeGroupNetworkRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumeGroupNetworkRuleOutput)
}

// GetVolumeGroupNetworkRuleArrayInput is an input type that accepts GetVolumeGroupNetworkRuleArray and GetVolumeGroupNetworkRuleArrayOutput values.
// You can construct a concrete instance of `GetVolumeGroupNetworkRuleArrayInput` via:
//
//	GetVolumeGroupNetworkRuleArray{ GetVolumeGroupNetworkRuleArgs{...} }
type GetVolumeGroupNetworkRuleArrayInput interface {
	pulumi.Input

	ToGetVolumeGroupNetworkRuleArrayOutput() GetVolumeGroupNetworkRuleArrayOutput
	ToGetVolumeGroupNetworkRuleArrayOutputWithContext(context.Context) GetVolumeGroupNetworkRuleArrayOutput
}

type GetVolumeGroupNetworkRuleArray []GetVolumeGroupNetworkRuleInput

func (GetVolumeGroupNetworkRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVolumeGroupNetworkRule)(nil)).Elem()
}

func (i GetVolumeGroupNetworkRuleArray) ToGetVolumeGroupNetworkRuleArrayOutput() GetVolumeGroupNetworkRuleArrayOutput {
	return i.ToGetVolumeGroupNetworkRuleArrayOutputWithContext(context.Background())
}

func (i GetVolumeGroupNetworkRuleArray) ToGetVolumeGroupNetworkRuleArrayOutputWithContext(ctx context.Context) GetVolumeGroupNetworkRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumeGroupNetworkRuleArrayOutput)
}

type GetVolumeGroupNetworkRuleOutput struct{ *pulumi.OutputState }

func (GetVolumeGroupNetworkRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeGroupNetworkRule)(nil)).Elem()
}

func (o GetVolumeGroupNetworkRuleOutput) ToGetVolumeGroupNetworkRuleOutput() GetVolumeGroupNetworkRuleOutput {
	return o
}

func (o GetVolumeGroupNetworkRuleOutput) ToGetVolumeGroupNetworkRuleOutputWithContext(ctx context.Context) GetVolumeGroupNetworkRuleOutput {
	return o
}

// The action to take when an access attempt to this Elastic SAN Volume Group from this Subnet is made.
func (o GetVolumeGroupNetworkRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeGroupNetworkRule) string { return v.Action }).(pulumi.StringOutput)
}

// The ID of the Subnet from which access to this Elastic SAN Volume Group is allowed.
func (o GetVolumeGroupNetworkRuleOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeGroupNetworkRule) string { return v.SubnetId }).(pulumi.StringOutput)
}

type GetVolumeGroupNetworkRuleArrayOutput struct{ *pulumi.OutputState }

func (GetVolumeGroupNetworkRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVolumeGroupNetworkRule)(nil)).Elem()
}

func (o GetVolumeGroupNetworkRuleArrayOutput) ToGetVolumeGroupNetworkRuleArrayOutput() GetVolumeGroupNetworkRuleArrayOutput {
	return o
}

func (o GetVolumeGroupNetworkRuleArrayOutput) ToGetVolumeGroupNetworkRuleArrayOutputWithContext(ctx context.Context) GetVolumeGroupNetworkRuleArrayOutput {
	return o
}

func (o GetVolumeGroupNetworkRuleArrayOutput) Index(i pulumi.IntInput) GetVolumeGroupNetworkRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVolumeGroupNetworkRule {
		return vs[0].([]GetVolumeGroupNetworkRule)[vs[1].(int)]
	}).(GetVolumeGroupNetworkRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticSanSkuInput)(nil)).Elem(), ElasticSanSkuArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticSanSkuPtrInput)(nil)).Elem(), ElasticSanSkuArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeCreateSourceInput)(nil)).Elem(), VolumeCreateSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeCreateSourcePtrInput)(nil)).Elem(), VolumeCreateSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeGroupEncryptionInput)(nil)).Elem(), VolumeGroupEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeGroupEncryptionPtrInput)(nil)).Elem(), VolumeGroupEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeGroupIdentityInput)(nil)).Elem(), VolumeGroupIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeGroupIdentityPtrInput)(nil)).Elem(), VolumeGroupIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeGroupNetworkRuleInput)(nil)).Elem(), VolumeGroupNetworkRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeGroupNetworkRuleArrayInput)(nil)).Elem(), VolumeGroupNetworkRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSkusInput)(nil)).Elem(), GetSkusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSkusArrayInput)(nil)).Elem(), GetSkusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumeGroupEncryptionInput)(nil)).Elem(), GetVolumeGroupEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumeGroupEncryptionArrayInput)(nil)).Elem(), GetVolumeGroupEncryptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumeGroupIdentityInput)(nil)).Elem(), GetVolumeGroupIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumeGroupIdentityArrayInput)(nil)).Elem(), GetVolumeGroupIdentityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumeGroupNetworkRuleInput)(nil)).Elem(), GetVolumeGroupNetworkRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumeGroupNetworkRuleArrayInput)(nil)).Elem(), GetVolumeGroupNetworkRuleArray{})
	pulumi.RegisterOutputType(ElasticSanSkuOutput{})
	pulumi.RegisterOutputType(ElasticSanSkuPtrOutput{})
	pulumi.RegisterOutputType(VolumeCreateSourceOutput{})
	pulumi.RegisterOutputType(VolumeCreateSourcePtrOutput{})
	pulumi.RegisterOutputType(VolumeGroupEncryptionOutput{})
	pulumi.RegisterOutputType(VolumeGroupEncryptionPtrOutput{})
	pulumi.RegisterOutputType(VolumeGroupIdentityOutput{})
	pulumi.RegisterOutputType(VolumeGroupIdentityPtrOutput{})
	pulumi.RegisterOutputType(VolumeGroupNetworkRuleOutput{})
	pulumi.RegisterOutputType(VolumeGroupNetworkRuleArrayOutput{})
	pulumi.RegisterOutputType(GetSkusOutput{})
	pulumi.RegisterOutputType(GetSkusArrayOutput{})
	pulumi.RegisterOutputType(GetVolumeGroupEncryptionOutput{})
	pulumi.RegisterOutputType(GetVolumeGroupEncryptionArrayOutput{})
	pulumi.RegisterOutputType(GetVolumeGroupIdentityOutput{})
	pulumi.RegisterOutputType(GetVolumeGroupIdentityArrayOutput{})
	pulumi.RegisterOutputType(GetVolumeGroupNetworkRuleOutput{})
	pulumi.RegisterOutputType(GetVolumeGroupNetworkRuleArrayOutput{})
}
