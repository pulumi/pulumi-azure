// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticsan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Elastic SAN resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/elasticsan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = elasticsan.NewElasticSan(ctx, "exampleElasticSan", &elasticsan.ElasticSanArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				BaseSizeInTib:     pulumi.Int(1),
//				ExtendedSizeInTib: pulumi.Int(2),
//				Sku: &elasticsan.ElasticSanSkuArgs{
//					Name: pulumi.String("example-value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// An existing Elastic SAN can be imported into Terraform using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:elasticsan/elasticSan:ElasticSan example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.ElasticSan/elasticSans/esan1
//
// ```
type ElasticSan struct {
	pulumi.CustomResourceState

	// Specifies the base size of the Elastic SAN resource in TiB. Possible values are between `1` and `100`.
	//
	// > **NOTE** When updating `baseSizeInTib`, the new value should be greater than the existing one.
	BaseSizeInTib pulumi.IntOutput `pulumi:"baseSizeInTib"`
	// Specifies the extended size of the Elastic SAN resource in TiB. Possible values are between `1` and `100`.
	//
	// > **NOTE** `extendedSizeInTib` cannot be removed and when updating, the new value should be greater than the existing one.
	ExtendedSizeInTib pulumi.IntPtrOutput `pulumi:"extendedSizeInTib"`
	// The Azure Region where the Elastic SAN resource should exist. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name of this Elastic SAN resource. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the name of the Resource Group within which this Elastic SAN resource should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A `sku` block as defined below.
	Sku ElasticSanSkuOutput `pulumi:"sku"`
	// A mapping of tags which should be assigned to the Elastic SAN resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Total Provisioned IOps of the Elastic SAN resource.
	TotalIops pulumi.IntOutput `pulumi:"totalIops"`
	// Total Provisioned MBps Elastic SAN resource.
	TotalMbps pulumi.IntOutput `pulumi:"totalMbps"`
	// Total size of the Elastic SAN resource in TB.
	TotalSizeInTib pulumi.IntOutput `pulumi:"totalSizeInTib"`
	// Total size of the provisioned Volumes in GiB.
	TotalVolumeSizeInGib pulumi.IntOutput `pulumi:"totalVolumeSizeInGib"`
	// Total number of volume groups in this Elastic SAN resource.
	VolumeGroupCount pulumi.IntOutput `pulumi:"volumeGroupCount"`
	// Logical zone for the Elastic SAN resource. Changing this forces a new resource to be created.
	//
	// > **NOTE** `zones` cannot be specified if `sku.name` is set to `Premium_ZRS`.
	Zones pulumi.StringArrayOutput `pulumi:"zones"`
}

// NewElasticSan registers a new resource with the given unique name, arguments, and options.
func NewElasticSan(ctx *pulumi.Context,
	name string, args *ElasticSanArgs, opts ...pulumi.ResourceOption) (*ElasticSan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BaseSizeInTib == nil {
		return nil, errors.New("invalid value for required argument 'BaseSizeInTib'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Sku == nil {
		return nil, errors.New("invalid value for required argument 'Sku'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ElasticSan
	err := ctx.RegisterResource("azure:elasticsan/elasticSan:ElasticSan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElasticSan gets an existing ElasticSan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElasticSan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElasticSanState, opts ...pulumi.ResourceOption) (*ElasticSan, error) {
	var resource ElasticSan
	err := ctx.ReadResource("azure:elasticsan/elasticSan:ElasticSan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElasticSan resources.
type elasticSanState struct {
	// Specifies the base size of the Elastic SAN resource in TiB. Possible values are between `1` and `100`.
	//
	// > **NOTE** When updating `baseSizeInTib`, the new value should be greater than the existing one.
	BaseSizeInTib *int `pulumi:"baseSizeInTib"`
	// Specifies the extended size of the Elastic SAN resource in TiB. Possible values are between `1` and `100`.
	//
	// > **NOTE** `extendedSizeInTib` cannot be removed and when updating, the new value should be greater than the existing one.
	ExtendedSizeInTib *int `pulumi:"extendedSizeInTib"`
	// The Azure Region where the Elastic SAN resource should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of this Elastic SAN resource. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies the name of the Resource Group within which this Elastic SAN resource should exist. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A `sku` block as defined below.
	Sku *ElasticSanSku `pulumi:"sku"`
	// A mapping of tags which should be assigned to the Elastic SAN resource.
	Tags map[string]string `pulumi:"tags"`
	// Total Provisioned IOps of the Elastic SAN resource.
	TotalIops *int `pulumi:"totalIops"`
	// Total Provisioned MBps Elastic SAN resource.
	TotalMbps *int `pulumi:"totalMbps"`
	// Total size of the Elastic SAN resource in TB.
	TotalSizeInTib *int `pulumi:"totalSizeInTib"`
	// Total size of the provisioned Volumes in GiB.
	TotalVolumeSizeInGib *int `pulumi:"totalVolumeSizeInGib"`
	// Total number of volume groups in this Elastic SAN resource.
	VolumeGroupCount *int `pulumi:"volumeGroupCount"`
	// Logical zone for the Elastic SAN resource. Changing this forces a new resource to be created.
	//
	// > **NOTE** `zones` cannot be specified if `sku.name` is set to `Premium_ZRS`.
	Zones []string `pulumi:"zones"`
}

type ElasticSanState struct {
	// Specifies the base size of the Elastic SAN resource in TiB. Possible values are between `1` and `100`.
	//
	// > **NOTE** When updating `baseSizeInTib`, the new value should be greater than the existing one.
	BaseSizeInTib pulumi.IntPtrInput
	// Specifies the extended size of the Elastic SAN resource in TiB. Possible values are between `1` and `100`.
	//
	// > **NOTE** `extendedSizeInTib` cannot be removed and when updating, the new value should be greater than the existing one.
	ExtendedSizeInTib pulumi.IntPtrInput
	// The Azure Region where the Elastic SAN resource should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of this Elastic SAN resource. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies the name of the Resource Group within which this Elastic SAN resource should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A `sku` block as defined below.
	Sku ElasticSanSkuPtrInput
	// A mapping of tags which should be assigned to the Elastic SAN resource.
	Tags pulumi.StringMapInput
	// Total Provisioned IOps of the Elastic SAN resource.
	TotalIops pulumi.IntPtrInput
	// Total Provisioned MBps Elastic SAN resource.
	TotalMbps pulumi.IntPtrInput
	// Total size of the Elastic SAN resource in TB.
	TotalSizeInTib pulumi.IntPtrInput
	// Total size of the provisioned Volumes in GiB.
	TotalVolumeSizeInGib pulumi.IntPtrInput
	// Total number of volume groups in this Elastic SAN resource.
	VolumeGroupCount pulumi.IntPtrInput
	// Logical zone for the Elastic SAN resource. Changing this forces a new resource to be created.
	//
	// > **NOTE** `zones` cannot be specified if `sku.name` is set to `Premium_ZRS`.
	Zones pulumi.StringArrayInput
}

func (ElasticSanState) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticSanState)(nil)).Elem()
}

type elasticSanArgs struct {
	// Specifies the base size of the Elastic SAN resource in TiB. Possible values are between `1` and `100`.
	//
	// > **NOTE** When updating `baseSizeInTib`, the new value should be greater than the existing one.
	BaseSizeInTib int `pulumi:"baseSizeInTib"`
	// Specifies the extended size of the Elastic SAN resource in TiB. Possible values are between `1` and `100`.
	//
	// > **NOTE** `extendedSizeInTib` cannot be removed and when updating, the new value should be greater than the existing one.
	ExtendedSizeInTib *int `pulumi:"extendedSizeInTib"`
	// The Azure Region where the Elastic SAN resource should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of this Elastic SAN resource. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies the name of the Resource Group within which this Elastic SAN resource should exist. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A `sku` block as defined below.
	Sku ElasticSanSku `pulumi:"sku"`
	// A mapping of tags which should be assigned to the Elastic SAN resource.
	Tags map[string]string `pulumi:"tags"`
	// Logical zone for the Elastic SAN resource. Changing this forces a new resource to be created.
	//
	// > **NOTE** `zones` cannot be specified if `sku.name` is set to `Premium_ZRS`.
	Zones []string `pulumi:"zones"`
}

// The set of arguments for constructing a ElasticSan resource.
type ElasticSanArgs struct {
	// Specifies the base size of the Elastic SAN resource in TiB. Possible values are between `1` and `100`.
	//
	// > **NOTE** When updating `baseSizeInTib`, the new value should be greater than the existing one.
	BaseSizeInTib pulumi.IntInput
	// Specifies the extended size of the Elastic SAN resource in TiB. Possible values are between `1` and `100`.
	//
	// > **NOTE** `extendedSizeInTib` cannot be removed and when updating, the new value should be greater than the existing one.
	ExtendedSizeInTib pulumi.IntPtrInput
	// The Azure Region where the Elastic SAN resource should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of this Elastic SAN resource. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies the name of the Resource Group within which this Elastic SAN resource should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A `sku` block as defined below.
	Sku ElasticSanSkuInput
	// A mapping of tags which should be assigned to the Elastic SAN resource.
	Tags pulumi.StringMapInput
	// Logical zone for the Elastic SAN resource. Changing this forces a new resource to be created.
	//
	// > **NOTE** `zones` cannot be specified if `sku.name` is set to `Premium_ZRS`.
	Zones pulumi.StringArrayInput
}

func (ElasticSanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticSanArgs)(nil)).Elem()
}

type ElasticSanInput interface {
	pulumi.Input

	ToElasticSanOutput() ElasticSanOutput
	ToElasticSanOutputWithContext(ctx context.Context) ElasticSanOutput
}

func (*ElasticSan) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticSan)(nil)).Elem()
}

func (i *ElasticSan) ToElasticSanOutput() ElasticSanOutput {
	return i.ToElasticSanOutputWithContext(context.Background())
}

func (i *ElasticSan) ToElasticSanOutputWithContext(ctx context.Context) ElasticSanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticSanOutput)
}

// ElasticSanArrayInput is an input type that accepts ElasticSanArray and ElasticSanArrayOutput values.
// You can construct a concrete instance of `ElasticSanArrayInput` via:
//
//	ElasticSanArray{ ElasticSanArgs{...} }
type ElasticSanArrayInput interface {
	pulumi.Input

	ToElasticSanArrayOutput() ElasticSanArrayOutput
	ToElasticSanArrayOutputWithContext(context.Context) ElasticSanArrayOutput
}

type ElasticSanArray []ElasticSanInput

func (ElasticSanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticSan)(nil)).Elem()
}

func (i ElasticSanArray) ToElasticSanArrayOutput() ElasticSanArrayOutput {
	return i.ToElasticSanArrayOutputWithContext(context.Background())
}

func (i ElasticSanArray) ToElasticSanArrayOutputWithContext(ctx context.Context) ElasticSanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticSanArrayOutput)
}

// ElasticSanMapInput is an input type that accepts ElasticSanMap and ElasticSanMapOutput values.
// You can construct a concrete instance of `ElasticSanMapInput` via:
//
//	ElasticSanMap{ "key": ElasticSanArgs{...} }
type ElasticSanMapInput interface {
	pulumi.Input

	ToElasticSanMapOutput() ElasticSanMapOutput
	ToElasticSanMapOutputWithContext(context.Context) ElasticSanMapOutput
}

type ElasticSanMap map[string]ElasticSanInput

func (ElasticSanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticSan)(nil)).Elem()
}

func (i ElasticSanMap) ToElasticSanMapOutput() ElasticSanMapOutput {
	return i.ToElasticSanMapOutputWithContext(context.Background())
}

func (i ElasticSanMap) ToElasticSanMapOutputWithContext(ctx context.Context) ElasticSanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticSanMapOutput)
}

type ElasticSanOutput struct{ *pulumi.OutputState }

func (ElasticSanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticSan)(nil)).Elem()
}

func (o ElasticSanOutput) ToElasticSanOutput() ElasticSanOutput {
	return o
}

func (o ElasticSanOutput) ToElasticSanOutputWithContext(ctx context.Context) ElasticSanOutput {
	return o
}

// Specifies the base size of the Elastic SAN resource in TiB. Possible values are between `1` and `100`.
//
// > **NOTE** When updating `baseSizeInTib`, the new value should be greater than the existing one.
func (o ElasticSanOutput) BaseSizeInTib() pulumi.IntOutput {
	return o.ApplyT(func(v *ElasticSan) pulumi.IntOutput { return v.BaseSizeInTib }).(pulumi.IntOutput)
}

// Specifies the extended size of the Elastic SAN resource in TiB. Possible values are between `1` and `100`.
//
// > **NOTE** `extendedSizeInTib` cannot be removed and when updating, the new value should be greater than the existing one.
func (o ElasticSanOutput) ExtendedSizeInTib() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticSan) pulumi.IntPtrOutput { return v.ExtendedSizeInTib }).(pulumi.IntPtrOutput)
}

// The Azure Region where the Elastic SAN resource should exist. Changing this forces a new resource to be created.
func (o ElasticSanOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ElasticSan) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name of this Elastic SAN resource. Changing this forces a new resource to be created.
func (o ElasticSanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ElasticSan) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the name of the Resource Group within which this Elastic SAN resource should exist. Changing this forces a new resource to be created.
func (o ElasticSanOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ElasticSan) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A `sku` block as defined below.
func (o ElasticSanOutput) Sku() ElasticSanSkuOutput {
	return o.ApplyT(func(v *ElasticSan) ElasticSanSkuOutput { return v.Sku }).(ElasticSanSkuOutput)
}

// A mapping of tags which should be assigned to the Elastic SAN resource.
func (o ElasticSanOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticSan) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Total Provisioned IOps of the Elastic SAN resource.
func (o ElasticSanOutput) TotalIops() pulumi.IntOutput {
	return o.ApplyT(func(v *ElasticSan) pulumi.IntOutput { return v.TotalIops }).(pulumi.IntOutput)
}

// Total Provisioned MBps Elastic SAN resource.
func (o ElasticSanOutput) TotalMbps() pulumi.IntOutput {
	return o.ApplyT(func(v *ElasticSan) pulumi.IntOutput { return v.TotalMbps }).(pulumi.IntOutput)
}

// Total size of the Elastic SAN resource in TB.
func (o ElasticSanOutput) TotalSizeInTib() pulumi.IntOutput {
	return o.ApplyT(func(v *ElasticSan) pulumi.IntOutput { return v.TotalSizeInTib }).(pulumi.IntOutput)
}

// Total size of the provisioned Volumes in GiB.
func (o ElasticSanOutput) TotalVolumeSizeInGib() pulumi.IntOutput {
	return o.ApplyT(func(v *ElasticSan) pulumi.IntOutput { return v.TotalVolumeSizeInGib }).(pulumi.IntOutput)
}

// Total number of volume groups in this Elastic SAN resource.
func (o ElasticSanOutput) VolumeGroupCount() pulumi.IntOutput {
	return o.ApplyT(func(v *ElasticSan) pulumi.IntOutput { return v.VolumeGroupCount }).(pulumi.IntOutput)
}

// Logical zone for the Elastic SAN resource. Changing this forces a new resource to be created.
//
// > **NOTE** `zones` cannot be specified if `sku.name` is set to `Premium_ZRS`.
func (o ElasticSanOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticSan) pulumi.StringArrayOutput { return v.Zones }).(pulumi.StringArrayOutput)
}

type ElasticSanArrayOutput struct{ *pulumi.OutputState }

func (ElasticSanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticSan)(nil)).Elem()
}

func (o ElasticSanArrayOutput) ToElasticSanArrayOutput() ElasticSanArrayOutput {
	return o
}

func (o ElasticSanArrayOutput) ToElasticSanArrayOutputWithContext(ctx context.Context) ElasticSanArrayOutput {
	return o
}

func (o ElasticSanArrayOutput) Index(i pulumi.IntInput) ElasticSanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ElasticSan {
		return vs[0].([]*ElasticSan)[vs[1].(int)]
	}).(ElasticSanOutput)
}

type ElasticSanMapOutput struct{ *pulumi.OutputState }

func (ElasticSanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticSan)(nil)).Elem()
}

func (o ElasticSanMapOutput) ToElasticSanMapOutput() ElasticSanMapOutput {
	return o
}

func (o ElasticSanMapOutput) ToElasticSanMapOutputWithContext(ctx context.Context) ElasticSanMapOutput {
	return o
}

func (o ElasticSanMapOutput) MapIndex(k pulumi.StringInput) ElasticSanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ElasticSan {
		return vs[0].(map[string]*ElasticSan)[vs[1].(string)]
	}).(ElasticSanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticSanInput)(nil)).Elem(), &ElasticSan{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticSanArrayInput)(nil)).Elem(), ElasticSanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticSanMapInput)(nil)).Elem(), ElasticSanMap{})
	pulumi.RegisterOutputType(ElasticSanOutput{})
	pulumi.RegisterOutputType(ElasticSanArrayOutput{})
	pulumi.RegisterOutputType(ElasticSanMapOutput{})
}
