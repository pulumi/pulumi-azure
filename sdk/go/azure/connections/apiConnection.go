// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connections

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an API Connection.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/connections"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/servicebus"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleManagedApi := connections.GetManagedApiOutput(ctx, connections.GetManagedApiOutputArgs{
//				Name:     pulumi.String("servicebus"),
//				Location: exampleResourceGroup.Location,
//			}, nil)
//			exampleNamespace, err := servicebus.NewNamespace(ctx, "exampleNamespace", &servicebus.NamespaceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku:               pulumi.String("Basic"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = connections.NewApiConnection(ctx, "exampleApiConnection", &connections.ApiConnectionArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				ManagedApiId: exampleManagedApi.ApplyT(func(exampleManagedApi connections.GetManagedApiResult) (*string, error) {
//					return &exampleManagedApi.Id, nil
//				}).(pulumi.StringPtrOutput),
//				DisplayName: pulumi.String("Example 1"),
//				ParameterValues: pulumi.StringMap{
//					"connectionString": exampleNamespace.DefaultPrimaryConnectionString,
//				},
//				Tags: pulumi.StringMap{
//					"Hello": pulumi.String("World"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// API Connections can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:connections/apiConnection:ApiConnection example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.Web/connections/example-connection
//
// ```
type ApiConnection struct {
	pulumi.CustomResourceState

	// A display name for this API Connection. Changing this forces a new API Connection to be created.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The ID of the Managed API which this API Connection is linked to. Changing this forces a new API Connection to be created.
	ManagedApiId pulumi.StringOutput `pulumi:"managedApiId"`
	// The Name which should be used for this API Connection. Changing this forces a new API Connection to be created.
	Name            pulumi.StringOutput    `pulumi:"name"`
	ParameterValues pulumi.StringMapOutput `pulumi:"parameterValues"`
	// The name of the Resource Group where this API Connection should exist. Changing this forces a new API Connection to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the API Connection.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewApiConnection registers a new resource with the given unique name, arguments, and options.
func NewApiConnection(ctx *pulumi.Context,
	name string, args *ApiConnectionArgs, opts ...pulumi.ResourceOption) (*ApiConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ManagedApiId == nil {
		return nil, errors.New("invalid value for required argument 'ManagedApiId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApiConnection
	err := ctx.RegisterResource("azure:connections/apiConnection:ApiConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApiConnection gets an existing ApiConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApiConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiConnectionState, opts ...pulumi.ResourceOption) (*ApiConnection, error) {
	var resource ApiConnection
	err := ctx.ReadResource("azure:connections/apiConnection:ApiConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApiConnection resources.
type apiConnectionState struct {
	// A display name for this API Connection. Changing this forces a new API Connection to be created.
	DisplayName *string `pulumi:"displayName"`
	// The ID of the Managed API which this API Connection is linked to. Changing this forces a new API Connection to be created.
	ManagedApiId *string `pulumi:"managedApiId"`
	// The Name which should be used for this API Connection. Changing this forces a new API Connection to be created.
	Name            *string           `pulumi:"name"`
	ParameterValues map[string]string `pulumi:"parameterValues"`
	// The name of the Resource Group where this API Connection should exist. Changing this forces a new API Connection to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the API Connection.
	Tags map[string]string `pulumi:"tags"`
}

type ApiConnectionState struct {
	// A display name for this API Connection. Changing this forces a new API Connection to be created.
	DisplayName pulumi.StringPtrInput
	// The ID of the Managed API which this API Connection is linked to. Changing this forces a new API Connection to be created.
	ManagedApiId pulumi.StringPtrInput
	// The Name which should be used for this API Connection. Changing this forces a new API Connection to be created.
	Name            pulumi.StringPtrInput
	ParameterValues pulumi.StringMapInput
	// The name of the Resource Group where this API Connection should exist. Changing this forces a new API Connection to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the API Connection.
	Tags pulumi.StringMapInput
}

func (ApiConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*apiConnectionState)(nil)).Elem()
}

type apiConnectionArgs struct {
	// A display name for this API Connection. Changing this forces a new API Connection to be created.
	DisplayName *string `pulumi:"displayName"`
	// The ID of the Managed API which this API Connection is linked to. Changing this forces a new API Connection to be created.
	ManagedApiId string `pulumi:"managedApiId"`
	// The Name which should be used for this API Connection. Changing this forces a new API Connection to be created.
	Name            *string           `pulumi:"name"`
	ParameterValues map[string]string `pulumi:"parameterValues"`
	// The name of the Resource Group where this API Connection should exist. Changing this forces a new API Connection to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the API Connection.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ApiConnection resource.
type ApiConnectionArgs struct {
	// A display name for this API Connection. Changing this forces a new API Connection to be created.
	DisplayName pulumi.StringPtrInput
	// The ID of the Managed API which this API Connection is linked to. Changing this forces a new API Connection to be created.
	ManagedApiId pulumi.StringInput
	// The Name which should be used for this API Connection. Changing this forces a new API Connection to be created.
	Name            pulumi.StringPtrInput
	ParameterValues pulumi.StringMapInput
	// The name of the Resource Group where this API Connection should exist. Changing this forces a new API Connection to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags which should be assigned to the API Connection.
	Tags pulumi.StringMapInput
}

func (ApiConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apiConnectionArgs)(nil)).Elem()
}

type ApiConnectionInput interface {
	pulumi.Input

	ToApiConnectionOutput() ApiConnectionOutput
	ToApiConnectionOutputWithContext(ctx context.Context) ApiConnectionOutput
}

func (*ApiConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiConnection)(nil)).Elem()
}

func (i *ApiConnection) ToApiConnectionOutput() ApiConnectionOutput {
	return i.ToApiConnectionOutputWithContext(context.Background())
}

func (i *ApiConnection) ToApiConnectionOutputWithContext(ctx context.Context) ApiConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiConnectionOutput)
}

// ApiConnectionArrayInput is an input type that accepts ApiConnectionArray and ApiConnectionArrayOutput values.
// You can construct a concrete instance of `ApiConnectionArrayInput` via:
//
//	ApiConnectionArray{ ApiConnectionArgs{...} }
type ApiConnectionArrayInput interface {
	pulumi.Input

	ToApiConnectionArrayOutput() ApiConnectionArrayOutput
	ToApiConnectionArrayOutputWithContext(context.Context) ApiConnectionArrayOutput
}

type ApiConnectionArray []ApiConnectionInput

func (ApiConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiConnection)(nil)).Elem()
}

func (i ApiConnectionArray) ToApiConnectionArrayOutput() ApiConnectionArrayOutput {
	return i.ToApiConnectionArrayOutputWithContext(context.Background())
}

func (i ApiConnectionArray) ToApiConnectionArrayOutputWithContext(ctx context.Context) ApiConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiConnectionArrayOutput)
}

// ApiConnectionMapInput is an input type that accepts ApiConnectionMap and ApiConnectionMapOutput values.
// You can construct a concrete instance of `ApiConnectionMapInput` via:
//
//	ApiConnectionMap{ "key": ApiConnectionArgs{...} }
type ApiConnectionMapInput interface {
	pulumi.Input

	ToApiConnectionMapOutput() ApiConnectionMapOutput
	ToApiConnectionMapOutputWithContext(context.Context) ApiConnectionMapOutput
}

type ApiConnectionMap map[string]ApiConnectionInput

func (ApiConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiConnection)(nil)).Elem()
}

func (i ApiConnectionMap) ToApiConnectionMapOutput() ApiConnectionMapOutput {
	return i.ToApiConnectionMapOutputWithContext(context.Background())
}

func (i ApiConnectionMap) ToApiConnectionMapOutputWithContext(ctx context.Context) ApiConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiConnectionMapOutput)
}

type ApiConnectionOutput struct{ *pulumi.OutputState }

func (ApiConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiConnection)(nil)).Elem()
}

func (o ApiConnectionOutput) ToApiConnectionOutput() ApiConnectionOutput {
	return o
}

func (o ApiConnectionOutput) ToApiConnectionOutputWithContext(ctx context.Context) ApiConnectionOutput {
	return o
}

// A display name for this API Connection. Changing this forces a new API Connection to be created.
func (o ApiConnectionOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiConnection) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The ID of the Managed API which this API Connection is linked to. Changing this forces a new API Connection to be created.
func (o ApiConnectionOutput) ManagedApiId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiConnection) pulumi.StringOutput { return v.ManagedApiId }).(pulumi.StringOutput)
}

// The Name which should be used for this API Connection. Changing this forces a new API Connection to be created.
func (o ApiConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ApiConnectionOutput) ParameterValues() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ApiConnection) pulumi.StringMapOutput { return v.ParameterValues }).(pulumi.StringMapOutput)
}

// The name of the Resource Group where this API Connection should exist. Changing this forces a new API Connection to be created.
func (o ApiConnectionOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiConnection) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the API Connection.
func (o ApiConnectionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ApiConnection) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type ApiConnectionArrayOutput struct{ *pulumi.OutputState }

func (ApiConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiConnection)(nil)).Elem()
}

func (o ApiConnectionArrayOutput) ToApiConnectionArrayOutput() ApiConnectionArrayOutput {
	return o
}

func (o ApiConnectionArrayOutput) ToApiConnectionArrayOutputWithContext(ctx context.Context) ApiConnectionArrayOutput {
	return o
}

func (o ApiConnectionArrayOutput) Index(i pulumi.IntInput) ApiConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApiConnection {
		return vs[0].([]*ApiConnection)[vs[1].(int)]
	}).(ApiConnectionOutput)
}

type ApiConnectionMapOutput struct{ *pulumi.OutputState }

func (ApiConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiConnection)(nil)).Elem()
}

func (o ApiConnectionMapOutput) ToApiConnectionMapOutput() ApiConnectionMapOutput {
	return o
}

func (o ApiConnectionMapOutput) ToApiConnectionMapOutputWithContext(ctx context.Context) ApiConnectionMapOutput {
	return o
}

func (o ApiConnectionMapOutput) MapIndex(k pulumi.StringInput) ApiConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApiConnection {
		return vs[0].(map[string]*ApiConnection)[vs[1].(string)]
	}).(ApiConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApiConnectionInput)(nil)).Elem(), &ApiConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiConnectionArrayInput)(nil)).Elem(), ApiConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiConnectionMapInput)(nil)).Elem(), ApiConnectionMap{})
	pulumi.RegisterOutputType(ApiConnectionOutput{})
	pulumi.RegisterOutputType(ApiConnectionArrayOutput{})
	pulumi.RegisterOutputType(ApiConnectionMapOutput{})
}
