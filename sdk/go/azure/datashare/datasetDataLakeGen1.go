// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datashare

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a Data Share Data Lake Gen1 Dataset.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/authorization"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/datalake"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/datashare"
// 	"github.com/pulumi/pulumi-azuread/sdk/v2/go/azuread"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West Europe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleAccount, err := datashare.NewAccount(ctx, "exampleAccount", &datashare.AccountArgs{
// 			Location:          exampleResourceGroup.Location,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			Identity: &datashare.AccountIdentityArgs{
// 				Type: pulumi.String("SystemAssigned"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleShare, err := datashare.NewShare(ctx, "exampleShare", &datashare.ShareArgs{
// 			AccountId: exampleAccount.ID(),
// 			Kind:      pulumi.String("CopyBased"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleStore, err := datalake.NewStore(ctx, "exampleStore", &datalake.StoreArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			Location:          exampleResourceGroup.Location,
// 			FirewallState:     pulumi.String("Disabled"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = datalake.NewStoreFile(ctx, "exampleStoreFile", &datalake.StoreFileArgs{
// 			AccountName:    exampleStore.Name,
// 			LocalFilePath:  pulumi.String("./example/myfile.txt"),
// 			RemoteFilePath: pulumi.String("/example/myfile.txt"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleAssignment, err := authorization.NewAssignment(ctx, "exampleAssignment", &authorization.AssignmentArgs{
// 			Scope:              exampleStore.ID(),
// 			RoleDefinitionName: pulumi.String("Owner"),
// 			PrincipalId: exampleServicePrincipal.ApplyT(func(exampleServicePrincipal azuread.LookupServicePrincipalResult) (string, error) {
// 				return exampleServicePrincipal.ObjectId, nil
// 			}).(pulumi.StringOutput),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = datashare.NewDatasetDataLakeGen1(ctx, "exampleDatasetDataLakeGen1", &datashare.DatasetDataLakeGen1Args{
// 			DataShareId:     exampleShare.ID(),
// 			DataLakeStoreId: exampleStore.ID(),
// 			FileName:        pulumi.String("myfile.txt"),
// 			FolderPath:      pulumi.String("example"),
// 		}, pulumi.DependsOn([]pulumi.Resource{
// 			exampleAssignment,
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Data Share Data Lake Gen1 Datasets can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:datashare/datasetDataLakeGen1:DatasetDataLakeGen1 example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DataShare/accounts/account1/shares/share1/dataSets/dataSet1
// ```
type DatasetDataLakeGen1 struct {
	pulumi.CustomResourceState

	// The resource ID of the Data Lake Store to be shared with the receiver.
	DataLakeStoreId pulumi.StringOutput `pulumi:"dataLakeStoreId"`
	// The resource ID of the Data Share where this Data Share Data Lake Gen1 Dataset should be created. Changing this forces a new Data Share Data Lake Gen1 Dataset to be created.
	DataShareId pulumi.StringOutput `pulumi:"dataShareId"`
	// The displayed name of the Data Share Dataset.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The file name of the data lake store to be shared with the receiver. Changing this forces a new Data Share Data Lake Gen1 Dataset to be created.
	FileName pulumi.StringPtrOutput `pulumi:"fileName"`
	// The folder path of the data lake store to be shared with the receiver. Changing this forces a new Data Share Data Lake Gen1 Dataset to be created.
	FolderPath pulumi.StringOutput `pulumi:"folderPath"`
	// The name of the Data Share Data Lake Gen1 Dataset. Changing this forces a new Data Share Data Lake Gen1 Dataset to be created.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewDatasetDataLakeGen1 registers a new resource with the given unique name, arguments, and options.
func NewDatasetDataLakeGen1(ctx *pulumi.Context,
	name string, args *DatasetDataLakeGen1Args, opts ...pulumi.ResourceOption) (*DatasetDataLakeGen1, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataLakeStoreId == nil {
		return nil, errors.New("invalid value for required argument 'DataLakeStoreId'")
	}
	if args.DataShareId == nil {
		return nil, errors.New("invalid value for required argument 'DataShareId'")
	}
	if args.FolderPath == nil {
		return nil, errors.New("invalid value for required argument 'FolderPath'")
	}
	var resource DatasetDataLakeGen1
	err := ctx.RegisterResource("azure:datashare/datasetDataLakeGen1:DatasetDataLakeGen1", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatasetDataLakeGen1 gets an existing DatasetDataLakeGen1 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatasetDataLakeGen1(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatasetDataLakeGen1State, opts ...pulumi.ResourceOption) (*DatasetDataLakeGen1, error) {
	var resource DatasetDataLakeGen1
	err := ctx.ReadResource("azure:datashare/datasetDataLakeGen1:DatasetDataLakeGen1", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatasetDataLakeGen1 resources.
type datasetDataLakeGen1State struct {
	// The resource ID of the Data Lake Store to be shared with the receiver.
	DataLakeStoreId *string `pulumi:"dataLakeStoreId"`
	// The resource ID of the Data Share where this Data Share Data Lake Gen1 Dataset should be created. Changing this forces a new Data Share Data Lake Gen1 Dataset to be created.
	DataShareId *string `pulumi:"dataShareId"`
	// The displayed name of the Data Share Dataset.
	DisplayName *string `pulumi:"displayName"`
	// The file name of the data lake store to be shared with the receiver. Changing this forces a new Data Share Data Lake Gen1 Dataset to be created.
	FileName *string `pulumi:"fileName"`
	// The folder path of the data lake store to be shared with the receiver. Changing this forces a new Data Share Data Lake Gen1 Dataset to be created.
	FolderPath *string `pulumi:"folderPath"`
	// The name of the Data Share Data Lake Gen1 Dataset. Changing this forces a new Data Share Data Lake Gen1 Dataset to be created.
	Name *string `pulumi:"name"`
}

type DatasetDataLakeGen1State struct {
	// The resource ID of the Data Lake Store to be shared with the receiver.
	DataLakeStoreId pulumi.StringPtrInput
	// The resource ID of the Data Share where this Data Share Data Lake Gen1 Dataset should be created. Changing this forces a new Data Share Data Lake Gen1 Dataset to be created.
	DataShareId pulumi.StringPtrInput
	// The displayed name of the Data Share Dataset.
	DisplayName pulumi.StringPtrInput
	// The file name of the data lake store to be shared with the receiver. Changing this forces a new Data Share Data Lake Gen1 Dataset to be created.
	FileName pulumi.StringPtrInput
	// The folder path of the data lake store to be shared with the receiver. Changing this forces a new Data Share Data Lake Gen1 Dataset to be created.
	FolderPath pulumi.StringPtrInput
	// The name of the Data Share Data Lake Gen1 Dataset. Changing this forces a new Data Share Data Lake Gen1 Dataset to be created.
	Name pulumi.StringPtrInput
}

func (DatasetDataLakeGen1State) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetDataLakeGen1State)(nil)).Elem()
}

type datasetDataLakeGen1Args struct {
	// The resource ID of the Data Lake Store to be shared with the receiver.
	DataLakeStoreId string `pulumi:"dataLakeStoreId"`
	// The resource ID of the Data Share where this Data Share Data Lake Gen1 Dataset should be created. Changing this forces a new Data Share Data Lake Gen1 Dataset to be created.
	DataShareId string `pulumi:"dataShareId"`
	// The file name of the data lake store to be shared with the receiver. Changing this forces a new Data Share Data Lake Gen1 Dataset to be created.
	FileName *string `pulumi:"fileName"`
	// The folder path of the data lake store to be shared with the receiver. Changing this forces a new Data Share Data Lake Gen1 Dataset to be created.
	FolderPath string `pulumi:"folderPath"`
	// The name of the Data Share Data Lake Gen1 Dataset. Changing this forces a new Data Share Data Lake Gen1 Dataset to be created.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a DatasetDataLakeGen1 resource.
type DatasetDataLakeGen1Args struct {
	// The resource ID of the Data Lake Store to be shared with the receiver.
	DataLakeStoreId pulumi.StringInput
	// The resource ID of the Data Share where this Data Share Data Lake Gen1 Dataset should be created. Changing this forces a new Data Share Data Lake Gen1 Dataset to be created.
	DataShareId pulumi.StringInput
	// The file name of the data lake store to be shared with the receiver. Changing this forces a new Data Share Data Lake Gen1 Dataset to be created.
	FileName pulumi.StringPtrInput
	// The folder path of the data lake store to be shared with the receiver. Changing this forces a new Data Share Data Lake Gen1 Dataset to be created.
	FolderPath pulumi.StringInput
	// The name of the Data Share Data Lake Gen1 Dataset. Changing this forces a new Data Share Data Lake Gen1 Dataset to be created.
	Name pulumi.StringPtrInput
}

func (DatasetDataLakeGen1Args) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetDataLakeGen1Args)(nil)).Elem()
}

type DatasetDataLakeGen1Input interface {
	pulumi.Input

	ToDatasetDataLakeGen1Output() DatasetDataLakeGen1Output
	ToDatasetDataLakeGen1OutputWithContext(ctx context.Context) DatasetDataLakeGen1Output
}

func (*DatasetDataLakeGen1) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDataLakeGen1)(nil))
}

func (i *DatasetDataLakeGen1) ToDatasetDataLakeGen1Output() DatasetDataLakeGen1Output {
	return i.ToDatasetDataLakeGen1OutputWithContext(context.Background())
}

func (i *DatasetDataLakeGen1) ToDatasetDataLakeGen1OutputWithContext(ctx context.Context) DatasetDataLakeGen1Output {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDataLakeGen1Output)
}

func (i *DatasetDataLakeGen1) ToDatasetDataLakeGen1PtrOutput() DatasetDataLakeGen1PtrOutput {
	return i.ToDatasetDataLakeGen1PtrOutputWithContext(context.Background())
}

func (i *DatasetDataLakeGen1) ToDatasetDataLakeGen1PtrOutputWithContext(ctx context.Context) DatasetDataLakeGen1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDataLakeGen1PtrOutput)
}

type DatasetDataLakeGen1PtrInput interface {
	pulumi.Input

	ToDatasetDataLakeGen1PtrOutput() DatasetDataLakeGen1PtrOutput
	ToDatasetDataLakeGen1PtrOutputWithContext(ctx context.Context) DatasetDataLakeGen1PtrOutput
}

type datasetDataLakeGen1PtrType DatasetDataLakeGen1Args

func (*datasetDataLakeGen1PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetDataLakeGen1)(nil))
}

func (i *datasetDataLakeGen1PtrType) ToDatasetDataLakeGen1PtrOutput() DatasetDataLakeGen1PtrOutput {
	return i.ToDatasetDataLakeGen1PtrOutputWithContext(context.Background())
}

func (i *datasetDataLakeGen1PtrType) ToDatasetDataLakeGen1PtrOutputWithContext(ctx context.Context) DatasetDataLakeGen1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDataLakeGen1PtrOutput)
}

// DatasetDataLakeGen1ArrayInput is an input type that accepts DatasetDataLakeGen1Array and DatasetDataLakeGen1ArrayOutput values.
// You can construct a concrete instance of `DatasetDataLakeGen1ArrayInput` via:
//
//          DatasetDataLakeGen1Array{ DatasetDataLakeGen1Args{...} }
type DatasetDataLakeGen1ArrayInput interface {
	pulumi.Input

	ToDatasetDataLakeGen1ArrayOutput() DatasetDataLakeGen1ArrayOutput
	ToDatasetDataLakeGen1ArrayOutputWithContext(context.Context) DatasetDataLakeGen1ArrayOutput
}

type DatasetDataLakeGen1Array []DatasetDataLakeGen1Input

func (DatasetDataLakeGen1Array) ElementType() reflect.Type {
	return reflect.TypeOf(([]*DatasetDataLakeGen1)(nil))
}

func (i DatasetDataLakeGen1Array) ToDatasetDataLakeGen1ArrayOutput() DatasetDataLakeGen1ArrayOutput {
	return i.ToDatasetDataLakeGen1ArrayOutputWithContext(context.Background())
}

func (i DatasetDataLakeGen1Array) ToDatasetDataLakeGen1ArrayOutputWithContext(ctx context.Context) DatasetDataLakeGen1ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDataLakeGen1ArrayOutput)
}

// DatasetDataLakeGen1MapInput is an input type that accepts DatasetDataLakeGen1Map and DatasetDataLakeGen1MapOutput values.
// You can construct a concrete instance of `DatasetDataLakeGen1MapInput` via:
//
//          DatasetDataLakeGen1Map{ "key": DatasetDataLakeGen1Args{...} }
type DatasetDataLakeGen1MapInput interface {
	pulumi.Input

	ToDatasetDataLakeGen1MapOutput() DatasetDataLakeGen1MapOutput
	ToDatasetDataLakeGen1MapOutputWithContext(context.Context) DatasetDataLakeGen1MapOutput
}

type DatasetDataLakeGen1Map map[string]DatasetDataLakeGen1Input

func (DatasetDataLakeGen1Map) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*DatasetDataLakeGen1)(nil))
}

func (i DatasetDataLakeGen1Map) ToDatasetDataLakeGen1MapOutput() DatasetDataLakeGen1MapOutput {
	return i.ToDatasetDataLakeGen1MapOutputWithContext(context.Background())
}

func (i DatasetDataLakeGen1Map) ToDatasetDataLakeGen1MapOutputWithContext(ctx context.Context) DatasetDataLakeGen1MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDataLakeGen1MapOutput)
}

type DatasetDataLakeGen1Output struct {
	*pulumi.OutputState
}

func (DatasetDataLakeGen1Output) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDataLakeGen1)(nil))
}

func (o DatasetDataLakeGen1Output) ToDatasetDataLakeGen1Output() DatasetDataLakeGen1Output {
	return o
}

func (o DatasetDataLakeGen1Output) ToDatasetDataLakeGen1OutputWithContext(ctx context.Context) DatasetDataLakeGen1Output {
	return o
}

func (o DatasetDataLakeGen1Output) ToDatasetDataLakeGen1PtrOutput() DatasetDataLakeGen1PtrOutput {
	return o.ToDatasetDataLakeGen1PtrOutputWithContext(context.Background())
}

func (o DatasetDataLakeGen1Output) ToDatasetDataLakeGen1PtrOutputWithContext(ctx context.Context) DatasetDataLakeGen1PtrOutput {
	return o.ApplyT(func(v DatasetDataLakeGen1) *DatasetDataLakeGen1 {
		return &v
	}).(DatasetDataLakeGen1PtrOutput)
}

type DatasetDataLakeGen1PtrOutput struct {
	*pulumi.OutputState
}

func (DatasetDataLakeGen1PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetDataLakeGen1)(nil))
}

func (o DatasetDataLakeGen1PtrOutput) ToDatasetDataLakeGen1PtrOutput() DatasetDataLakeGen1PtrOutput {
	return o
}

func (o DatasetDataLakeGen1PtrOutput) ToDatasetDataLakeGen1PtrOutputWithContext(ctx context.Context) DatasetDataLakeGen1PtrOutput {
	return o
}

type DatasetDataLakeGen1ArrayOutput struct{ *pulumi.OutputState }

func (DatasetDataLakeGen1ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetDataLakeGen1)(nil))
}

func (o DatasetDataLakeGen1ArrayOutput) ToDatasetDataLakeGen1ArrayOutput() DatasetDataLakeGen1ArrayOutput {
	return o
}

func (o DatasetDataLakeGen1ArrayOutput) ToDatasetDataLakeGen1ArrayOutputWithContext(ctx context.Context) DatasetDataLakeGen1ArrayOutput {
	return o
}

func (o DatasetDataLakeGen1ArrayOutput) Index(i pulumi.IntInput) DatasetDataLakeGen1Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetDataLakeGen1 {
		return vs[0].([]DatasetDataLakeGen1)[vs[1].(int)]
	}).(DatasetDataLakeGen1Output)
}

type DatasetDataLakeGen1MapOutput struct{ *pulumi.OutputState }

func (DatasetDataLakeGen1MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DatasetDataLakeGen1)(nil))
}

func (o DatasetDataLakeGen1MapOutput) ToDatasetDataLakeGen1MapOutput() DatasetDataLakeGen1MapOutput {
	return o
}

func (o DatasetDataLakeGen1MapOutput) ToDatasetDataLakeGen1MapOutputWithContext(ctx context.Context) DatasetDataLakeGen1MapOutput {
	return o
}

func (o DatasetDataLakeGen1MapOutput) MapIndex(k pulumi.StringInput) DatasetDataLakeGen1Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DatasetDataLakeGen1 {
		return vs[0].(map[string]DatasetDataLakeGen1)[vs[1].(string)]
	}).(DatasetDataLakeGen1Output)
}

func init() {
	pulumi.RegisterOutputType(DatasetDataLakeGen1Output{})
	pulumi.RegisterOutputType(DatasetDataLakeGen1PtrOutput{})
	pulumi.RegisterOutputType(DatasetDataLakeGen1ArrayOutput{})
	pulumi.RegisterOutputType(DatasetDataLakeGen1MapOutput{})
}
