// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datashare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Data Share Kusto Cluster Dataset.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/authorization"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/datashare"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/kusto"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := datashare.NewAccount(ctx, "exampleAccount", &datashare.AccountArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Identity: &datashare.AccountIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleShare, err := datashare.NewShare(ctx, "exampleShare", &datashare.ShareArgs{
//				AccountId: exampleAccount.ID(),
//				Kind:      pulumi.String("InPlace"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleCluster, err := kusto.NewCluster(ctx, "exampleCluster", &kusto.ClusterArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku: &kusto.ClusterSkuArgs{
//					Name:     pulumi.String("Dev(No SLA)_Standard_D11_v2"),
//					Capacity: pulumi.Int(1),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleAssignment, err := authorization.NewAssignment(ctx, "exampleAssignment", &authorization.AssignmentArgs{
//				Scope:              exampleCluster.ID(),
//				RoleDefinitionName: pulumi.String("Contributor"),
//				PrincipalId: exampleAccount.Identity.ApplyT(func(identity datashare.AccountIdentity) (*string, error) {
//					return &identity.PrincipalId, nil
//				}).(pulumi.StringPtrOutput),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = datashare.NewDatasetKustoCluster(ctx, "exampleDatasetKustoCluster", &datashare.DatasetKustoClusterArgs{
//				ShareId:        exampleShare.ID(),
//				KustoClusterId: exampleCluster.ID(),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				exampleAssignment,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Data Share Kusto Cluster Datasets can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:datashare/datasetKustoCluster:DatasetKustoCluster example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DataShare/accounts/account1/shares/share1/dataSets/dataSet1
//
// ```
type DatasetKustoCluster struct {
	pulumi.CustomResourceState

	// The name of the Data Share Dataset.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The resource ID of the Kusto Cluster to be shared with the receiver. Changing this forces a new Data Share Kusto Cluster Dataset to be created.
	KustoClusterId pulumi.StringOutput `pulumi:"kustoClusterId"`
	// The location of the Kusto Cluster.
	KustoClusterLocation pulumi.StringOutput `pulumi:"kustoClusterLocation"`
	// The name which should be used for this Data Share Kusto Cluster Dataset. Changing this forces a new Data Share Kusto Cluster Dataset to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The resource ID of the Data Share where this Data Share Kusto Cluster Dataset should be created. Changing this forces a new Data Share Kusto Cluster Dataset to be created.
	ShareId pulumi.StringOutput `pulumi:"shareId"`
}

// NewDatasetKustoCluster registers a new resource with the given unique name, arguments, and options.
func NewDatasetKustoCluster(ctx *pulumi.Context,
	name string, args *DatasetKustoClusterArgs, opts ...pulumi.ResourceOption) (*DatasetKustoCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KustoClusterId == nil {
		return nil, errors.New("invalid value for required argument 'KustoClusterId'")
	}
	if args.ShareId == nil {
		return nil, errors.New("invalid value for required argument 'ShareId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatasetKustoCluster
	err := ctx.RegisterResource("azure:datashare/datasetKustoCluster:DatasetKustoCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatasetKustoCluster gets an existing DatasetKustoCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatasetKustoCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatasetKustoClusterState, opts ...pulumi.ResourceOption) (*DatasetKustoCluster, error) {
	var resource DatasetKustoCluster
	err := ctx.ReadResource("azure:datashare/datasetKustoCluster:DatasetKustoCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatasetKustoCluster resources.
type datasetKustoClusterState struct {
	// The name of the Data Share Dataset.
	DisplayName *string `pulumi:"displayName"`
	// The resource ID of the Kusto Cluster to be shared with the receiver. Changing this forces a new Data Share Kusto Cluster Dataset to be created.
	KustoClusterId *string `pulumi:"kustoClusterId"`
	// The location of the Kusto Cluster.
	KustoClusterLocation *string `pulumi:"kustoClusterLocation"`
	// The name which should be used for this Data Share Kusto Cluster Dataset. Changing this forces a new Data Share Kusto Cluster Dataset to be created.
	Name *string `pulumi:"name"`
	// The resource ID of the Data Share where this Data Share Kusto Cluster Dataset should be created. Changing this forces a new Data Share Kusto Cluster Dataset to be created.
	ShareId *string `pulumi:"shareId"`
}

type DatasetKustoClusterState struct {
	// The name of the Data Share Dataset.
	DisplayName pulumi.StringPtrInput
	// The resource ID of the Kusto Cluster to be shared with the receiver. Changing this forces a new Data Share Kusto Cluster Dataset to be created.
	KustoClusterId pulumi.StringPtrInput
	// The location of the Kusto Cluster.
	KustoClusterLocation pulumi.StringPtrInput
	// The name which should be used for this Data Share Kusto Cluster Dataset. Changing this forces a new Data Share Kusto Cluster Dataset to be created.
	Name pulumi.StringPtrInput
	// The resource ID of the Data Share where this Data Share Kusto Cluster Dataset should be created. Changing this forces a new Data Share Kusto Cluster Dataset to be created.
	ShareId pulumi.StringPtrInput
}

func (DatasetKustoClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetKustoClusterState)(nil)).Elem()
}

type datasetKustoClusterArgs struct {
	// The resource ID of the Kusto Cluster to be shared with the receiver. Changing this forces a new Data Share Kusto Cluster Dataset to be created.
	KustoClusterId string `pulumi:"kustoClusterId"`
	// The name which should be used for this Data Share Kusto Cluster Dataset. Changing this forces a new Data Share Kusto Cluster Dataset to be created.
	Name *string `pulumi:"name"`
	// The resource ID of the Data Share where this Data Share Kusto Cluster Dataset should be created. Changing this forces a new Data Share Kusto Cluster Dataset to be created.
	ShareId string `pulumi:"shareId"`
}

// The set of arguments for constructing a DatasetKustoCluster resource.
type DatasetKustoClusterArgs struct {
	// The resource ID of the Kusto Cluster to be shared with the receiver. Changing this forces a new Data Share Kusto Cluster Dataset to be created.
	KustoClusterId pulumi.StringInput
	// The name which should be used for this Data Share Kusto Cluster Dataset. Changing this forces a new Data Share Kusto Cluster Dataset to be created.
	Name pulumi.StringPtrInput
	// The resource ID of the Data Share where this Data Share Kusto Cluster Dataset should be created. Changing this forces a new Data Share Kusto Cluster Dataset to be created.
	ShareId pulumi.StringInput
}

func (DatasetKustoClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetKustoClusterArgs)(nil)).Elem()
}

type DatasetKustoClusterInput interface {
	pulumi.Input

	ToDatasetKustoClusterOutput() DatasetKustoClusterOutput
	ToDatasetKustoClusterOutputWithContext(ctx context.Context) DatasetKustoClusterOutput
}

func (*DatasetKustoCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetKustoCluster)(nil)).Elem()
}

func (i *DatasetKustoCluster) ToDatasetKustoClusterOutput() DatasetKustoClusterOutput {
	return i.ToDatasetKustoClusterOutputWithContext(context.Background())
}

func (i *DatasetKustoCluster) ToDatasetKustoClusterOutputWithContext(ctx context.Context) DatasetKustoClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetKustoClusterOutput)
}

// DatasetKustoClusterArrayInput is an input type that accepts DatasetKustoClusterArray and DatasetKustoClusterArrayOutput values.
// You can construct a concrete instance of `DatasetKustoClusterArrayInput` via:
//
//	DatasetKustoClusterArray{ DatasetKustoClusterArgs{...} }
type DatasetKustoClusterArrayInput interface {
	pulumi.Input

	ToDatasetKustoClusterArrayOutput() DatasetKustoClusterArrayOutput
	ToDatasetKustoClusterArrayOutputWithContext(context.Context) DatasetKustoClusterArrayOutput
}

type DatasetKustoClusterArray []DatasetKustoClusterInput

func (DatasetKustoClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatasetKustoCluster)(nil)).Elem()
}

func (i DatasetKustoClusterArray) ToDatasetKustoClusterArrayOutput() DatasetKustoClusterArrayOutput {
	return i.ToDatasetKustoClusterArrayOutputWithContext(context.Background())
}

func (i DatasetKustoClusterArray) ToDatasetKustoClusterArrayOutputWithContext(ctx context.Context) DatasetKustoClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetKustoClusterArrayOutput)
}

// DatasetKustoClusterMapInput is an input type that accepts DatasetKustoClusterMap and DatasetKustoClusterMapOutput values.
// You can construct a concrete instance of `DatasetKustoClusterMapInput` via:
//
//	DatasetKustoClusterMap{ "key": DatasetKustoClusterArgs{...} }
type DatasetKustoClusterMapInput interface {
	pulumi.Input

	ToDatasetKustoClusterMapOutput() DatasetKustoClusterMapOutput
	ToDatasetKustoClusterMapOutputWithContext(context.Context) DatasetKustoClusterMapOutput
}

type DatasetKustoClusterMap map[string]DatasetKustoClusterInput

func (DatasetKustoClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatasetKustoCluster)(nil)).Elem()
}

func (i DatasetKustoClusterMap) ToDatasetKustoClusterMapOutput() DatasetKustoClusterMapOutput {
	return i.ToDatasetKustoClusterMapOutputWithContext(context.Background())
}

func (i DatasetKustoClusterMap) ToDatasetKustoClusterMapOutputWithContext(ctx context.Context) DatasetKustoClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetKustoClusterMapOutput)
}

type DatasetKustoClusterOutput struct{ *pulumi.OutputState }

func (DatasetKustoClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetKustoCluster)(nil)).Elem()
}

func (o DatasetKustoClusterOutput) ToDatasetKustoClusterOutput() DatasetKustoClusterOutput {
	return o
}

func (o DatasetKustoClusterOutput) ToDatasetKustoClusterOutputWithContext(ctx context.Context) DatasetKustoClusterOutput {
	return o
}

// The name of the Data Share Dataset.
func (o DatasetKustoClusterOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetKustoCluster) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The resource ID of the Kusto Cluster to be shared with the receiver. Changing this forces a new Data Share Kusto Cluster Dataset to be created.
func (o DatasetKustoClusterOutput) KustoClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetKustoCluster) pulumi.StringOutput { return v.KustoClusterId }).(pulumi.StringOutput)
}

// The location of the Kusto Cluster.
func (o DatasetKustoClusterOutput) KustoClusterLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetKustoCluster) pulumi.StringOutput { return v.KustoClusterLocation }).(pulumi.StringOutput)
}

// The name which should be used for this Data Share Kusto Cluster Dataset. Changing this forces a new Data Share Kusto Cluster Dataset to be created.
func (o DatasetKustoClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetKustoCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The resource ID of the Data Share where this Data Share Kusto Cluster Dataset should be created. Changing this forces a new Data Share Kusto Cluster Dataset to be created.
func (o DatasetKustoClusterOutput) ShareId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetKustoCluster) pulumi.StringOutput { return v.ShareId }).(pulumi.StringOutput)
}

type DatasetKustoClusterArrayOutput struct{ *pulumi.OutputState }

func (DatasetKustoClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatasetKustoCluster)(nil)).Elem()
}

func (o DatasetKustoClusterArrayOutput) ToDatasetKustoClusterArrayOutput() DatasetKustoClusterArrayOutput {
	return o
}

func (o DatasetKustoClusterArrayOutput) ToDatasetKustoClusterArrayOutputWithContext(ctx context.Context) DatasetKustoClusterArrayOutput {
	return o
}

func (o DatasetKustoClusterArrayOutput) Index(i pulumi.IntInput) DatasetKustoClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatasetKustoCluster {
		return vs[0].([]*DatasetKustoCluster)[vs[1].(int)]
	}).(DatasetKustoClusterOutput)
}

type DatasetKustoClusterMapOutput struct{ *pulumi.OutputState }

func (DatasetKustoClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatasetKustoCluster)(nil)).Elem()
}

func (o DatasetKustoClusterMapOutput) ToDatasetKustoClusterMapOutput() DatasetKustoClusterMapOutput {
	return o
}

func (o DatasetKustoClusterMapOutput) ToDatasetKustoClusterMapOutputWithContext(ctx context.Context) DatasetKustoClusterMapOutput {
	return o
}

func (o DatasetKustoClusterMapOutput) MapIndex(k pulumi.StringInput) DatasetKustoClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatasetKustoCluster {
		return vs[0].(map[string]*DatasetKustoCluster)[vs[1].(string)]
	}).(DatasetKustoClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetKustoClusterInput)(nil)).Elem(), &DatasetKustoCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetKustoClusterArrayInput)(nil)).Elem(), DatasetKustoClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetKustoClusterMapInput)(nil)).Elem(), DatasetKustoClusterMap{})
	pulumi.RegisterOutputType(DatasetKustoClusterOutput{})
	pulumi.RegisterOutputType(DatasetKustoClusterArrayOutput{})
	pulumi.RegisterOutputType(DatasetKustoClusterMapOutput{})
}
