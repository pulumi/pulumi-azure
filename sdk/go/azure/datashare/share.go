// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datashare

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a Data Share.
type Share struct {
	pulumi.CustomResourceState

	// The ID of the Data Share account in which the Data Share is created. Changing this forces a new Data Share to be created.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The Data Share's description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The kind of the Data Share. Possible values are `CopyBased` and `InPlace`. Changing this forces a new Data Share to be created.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The name which should be used for this Data Share. Changing this forces a new Data Share to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A `snapshotSchedule` block as defined below.
	SnapshotSchedule ShareSnapshotSchedulePtrOutput `pulumi:"snapshotSchedule"`
	// The terms of the Data Share.
	Terms pulumi.StringPtrOutput `pulumi:"terms"`
}

// NewShare registers a new resource with the given unique name, arguments, and options.
func NewShare(ctx *pulumi.Context,
	name string, args *ShareArgs, opts ...pulumi.ResourceOption) (*Share, error) {
	if args == nil || args.AccountId == nil {
		return nil, errors.New("missing required argument 'AccountId'")
	}
	if args == nil || args.Kind == nil {
		return nil, errors.New("missing required argument 'Kind'")
	}
	if args == nil {
		args = &ShareArgs{}
	}
	var resource Share
	err := ctx.RegisterResource("azure:datashare/share:Share", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetShare gets an existing Share resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetShare(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ShareState, opts ...pulumi.ResourceOption) (*Share, error) {
	var resource Share
	err := ctx.ReadResource("azure:datashare/share:Share", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Share resources.
type shareState struct {
	// The ID of the Data Share account in which the Data Share is created. Changing this forces a new Data Share to be created.
	AccountId *string `pulumi:"accountId"`
	// The Data Share's description.
	Description *string `pulumi:"description"`
	// The kind of the Data Share. Possible values are `CopyBased` and `InPlace`. Changing this forces a new Data Share to be created.
	Kind *string `pulumi:"kind"`
	// The name which should be used for this Data Share. Changing this forces a new Data Share to be created.
	Name *string `pulumi:"name"`
	// A `snapshotSchedule` block as defined below.
	SnapshotSchedule *ShareSnapshotSchedule `pulumi:"snapshotSchedule"`
	// The terms of the Data Share.
	Terms *string `pulumi:"terms"`
}

type ShareState struct {
	// The ID of the Data Share account in which the Data Share is created. Changing this forces a new Data Share to be created.
	AccountId pulumi.StringPtrInput
	// The Data Share's description.
	Description pulumi.StringPtrInput
	// The kind of the Data Share. Possible values are `CopyBased` and `InPlace`. Changing this forces a new Data Share to be created.
	Kind pulumi.StringPtrInput
	// The name which should be used for this Data Share. Changing this forces a new Data Share to be created.
	Name pulumi.StringPtrInput
	// A `snapshotSchedule` block as defined below.
	SnapshotSchedule ShareSnapshotSchedulePtrInput
	// The terms of the Data Share.
	Terms pulumi.StringPtrInput
}

func (ShareState) ElementType() reflect.Type {
	return reflect.TypeOf((*shareState)(nil)).Elem()
}

type shareArgs struct {
	// The ID of the Data Share account in which the Data Share is created. Changing this forces a new Data Share to be created.
	AccountId string `pulumi:"accountId"`
	// The Data Share's description.
	Description *string `pulumi:"description"`
	// The kind of the Data Share. Possible values are `CopyBased` and `InPlace`. Changing this forces a new Data Share to be created.
	Kind string `pulumi:"kind"`
	// The name which should be used for this Data Share. Changing this forces a new Data Share to be created.
	Name *string `pulumi:"name"`
	// A `snapshotSchedule` block as defined below.
	SnapshotSchedule *ShareSnapshotSchedule `pulumi:"snapshotSchedule"`
	// The terms of the Data Share.
	Terms *string `pulumi:"terms"`
}

// The set of arguments for constructing a Share resource.
type ShareArgs struct {
	// The ID of the Data Share account in which the Data Share is created. Changing this forces a new Data Share to be created.
	AccountId pulumi.StringInput
	// The Data Share's description.
	Description pulumi.StringPtrInput
	// The kind of the Data Share. Possible values are `CopyBased` and `InPlace`. Changing this forces a new Data Share to be created.
	Kind pulumi.StringInput
	// The name which should be used for this Data Share. Changing this forces a new Data Share to be created.
	Name pulumi.StringPtrInput
	// A `snapshotSchedule` block as defined below.
	SnapshotSchedule ShareSnapshotSchedulePtrInput
	// The terms of the Data Share.
	Terms pulumi.StringPtrInput
}

func (ShareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*shareArgs)(nil)).Elem()
}
