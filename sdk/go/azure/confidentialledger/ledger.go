// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package confidentialledger

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Confidential Ledger.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/confidentialledger"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := core.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = confidentialledger.NewLedger(ctx, "ledger", &confidentialledger.LedgerArgs{
//				ResourceGroupName: example.Name,
//				Location:          example.Location,
//				LedgerType:        pulumi.String("Private"),
//				AzureadBasedServicePrincipals: confidentialledger.LedgerAzureadBasedServicePrincipalArray{
//					&confidentialledger.LedgerAzureadBasedServicePrincipalArgs{
//						PrincipalId:    *pulumi.String(current.ObjectId),
//						TenantId:       *pulumi.String(current.TenantId),
//						LedgerRoleName: pulumi.String("Administrator"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Confidential Ledgers can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:confidentialledger/ledger:Ledger example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/example-group/providers/Microsoft.ConfidentialLedger/ledgers/example-ledger
//
// ```
type Ledger struct {
	pulumi.CustomResourceState

	// A list of `azureadBasedServicePrincipal` blocks as defined below.
	AzureadBasedServicePrincipals LedgerAzureadBasedServicePrincipalArrayOutput `pulumi:"azureadBasedServicePrincipals"`
	// A list of `certificateBasedSecurityPrincipal` blocks as defined below.
	CertificateBasedSecurityPrincipals LedgerCertificateBasedSecurityPrincipalArrayOutput `pulumi:"certificateBasedSecurityPrincipals"`
	// The Identity Service Endpoint for this Confidential Ledger.
	IdentityServiceEndpoint pulumi.StringOutput `pulumi:"identityServiceEndpoint"`
	// The Endpoint for this Confidential Ledger.
	LedgerEndpoint pulumi.StringOutput `pulumi:"ledgerEndpoint"`
	// Specifies the type of Confidential Ledger. Possible values are `Private` and `Public`. Changing this forces a new resource to be created.
	LedgerType pulumi.StringOutput `pulumi:"ledgerType"`
	// Specifies the supported Azure location where the Confidential Ledger exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name of the Confidential Ledger. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Resource Group where the Confidential Ledger exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the Confidential Ledger.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewLedger registers a new resource with the given unique name, arguments, and options.
func NewLedger(ctx *pulumi.Context,
	name string, args *LedgerArgs, opts ...pulumi.ResourceOption) (*Ledger, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AzureadBasedServicePrincipals == nil {
		return nil, errors.New("invalid value for required argument 'AzureadBasedServicePrincipals'")
	}
	if args.LedgerType == nil {
		return nil, errors.New("invalid value for required argument 'LedgerType'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ledger
	err := ctx.RegisterResource("azure:confidentialledger/ledger:Ledger", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLedger gets an existing Ledger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLedger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LedgerState, opts ...pulumi.ResourceOption) (*Ledger, error) {
	var resource Ledger
	err := ctx.ReadResource("azure:confidentialledger/ledger:Ledger", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ledger resources.
type ledgerState struct {
	// A list of `azureadBasedServicePrincipal` blocks as defined below.
	AzureadBasedServicePrincipals []LedgerAzureadBasedServicePrincipal `pulumi:"azureadBasedServicePrincipals"`
	// A list of `certificateBasedSecurityPrincipal` blocks as defined below.
	CertificateBasedSecurityPrincipals []LedgerCertificateBasedSecurityPrincipal `pulumi:"certificateBasedSecurityPrincipals"`
	// The Identity Service Endpoint for this Confidential Ledger.
	IdentityServiceEndpoint *string `pulumi:"identityServiceEndpoint"`
	// The Endpoint for this Confidential Ledger.
	LedgerEndpoint *string `pulumi:"ledgerEndpoint"`
	// Specifies the type of Confidential Ledger. Possible values are `Private` and `Public`. Changing this forces a new resource to be created.
	LedgerType *string `pulumi:"ledgerType"`
	// Specifies the supported Azure location where the Confidential Ledger exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the Confidential Ledger. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Confidential Ledger exists. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the Confidential Ledger.
	Tags map[string]string `pulumi:"tags"`
}

type LedgerState struct {
	// A list of `azureadBasedServicePrincipal` blocks as defined below.
	AzureadBasedServicePrincipals LedgerAzureadBasedServicePrincipalArrayInput
	// A list of `certificateBasedSecurityPrincipal` blocks as defined below.
	CertificateBasedSecurityPrincipals LedgerCertificateBasedSecurityPrincipalArrayInput
	// The Identity Service Endpoint for this Confidential Ledger.
	IdentityServiceEndpoint pulumi.StringPtrInput
	// The Endpoint for this Confidential Ledger.
	LedgerEndpoint pulumi.StringPtrInput
	// Specifies the type of Confidential Ledger. Possible values are `Private` and `Public`. Changing this forces a new resource to be created.
	LedgerType pulumi.StringPtrInput
	// Specifies the supported Azure location where the Confidential Ledger exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the Confidential Ledger. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Confidential Ledger exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags to assign to the Confidential Ledger.
	Tags pulumi.StringMapInput
}

func (LedgerState) ElementType() reflect.Type {
	return reflect.TypeOf((*ledgerState)(nil)).Elem()
}

type ledgerArgs struct {
	// A list of `azureadBasedServicePrincipal` blocks as defined below.
	AzureadBasedServicePrincipals []LedgerAzureadBasedServicePrincipal `pulumi:"azureadBasedServicePrincipals"`
	// A list of `certificateBasedSecurityPrincipal` blocks as defined below.
	CertificateBasedSecurityPrincipals []LedgerCertificateBasedSecurityPrincipal `pulumi:"certificateBasedSecurityPrincipals"`
	// Specifies the type of Confidential Ledger. Possible values are `Private` and `Public`. Changing this forces a new resource to be created.
	LedgerType string `pulumi:"ledgerType"`
	// Specifies the supported Azure location where the Confidential Ledger exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the Confidential Ledger. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Confidential Ledger exists. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the Confidential Ledger.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Ledger resource.
type LedgerArgs struct {
	// A list of `azureadBasedServicePrincipal` blocks as defined below.
	AzureadBasedServicePrincipals LedgerAzureadBasedServicePrincipalArrayInput
	// A list of `certificateBasedSecurityPrincipal` blocks as defined below.
	CertificateBasedSecurityPrincipals LedgerCertificateBasedSecurityPrincipalArrayInput
	// Specifies the type of Confidential Ledger. Possible values are `Private` and `Public`. Changing this forces a new resource to be created.
	LedgerType pulumi.StringInput
	// Specifies the supported Azure location where the Confidential Ledger exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the Confidential Ledger. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Confidential Ledger exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags to assign to the Confidential Ledger.
	Tags pulumi.StringMapInput
}

func (LedgerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ledgerArgs)(nil)).Elem()
}

type LedgerInput interface {
	pulumi.Input

	ToLedgerOutput() LedgerOutput
	ToLedgerOutputWithContext(ctx context.Context) LedgerOutput
}

func (*Ledger) ElementType() reflect.Type {
	return reflect.TypeOf((**Ledger)(nil)).Elem()
}

func (i *Ledger) ToLedgerOutput() LedgerOutput {
	return i.ToLedgerOutputWithContext(context.Background())
}

func (i *Ledger) ToLedgerOutputWithContext(ctx context.Context) LedgerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LedgerOutput)
}

// LedgerArrayInput is an input type that accepts LedgerArray and LedgerArrayOutput values.
// You can construct a concrete instance of `LedgerArrayInput` via:
//
//	LedgerArray{ LedgerArgs{...} }
type LedgerArrayInput interface {
	pulumi.Input

	ToLedgerArrayOutput() LedgerArrayOutput
	ToLedgerArrayOutputWithContext(context.Context) LedgerArrayOutput
}

type LedgerArray []LedgerInput

func (LedgerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ledger)(nil)).Elem()
}

func (i LedgerArray) ToLedgerArrayOutput() LedgerArrayOutput {
	return i.ToLedgerArrayOutputWithContext(context.Background())
}

func (i LedgerArray) ToLedgerArrayOutputWithContext(ctx context.Context) LedgerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LedgerArrayOutput)
}

// LedgerMapInput is an input type that accepts LedgerMap and LedgerMapOutput values.
// You can construct a concrete instance of `LedgerMapInput` via:
//
//	LedgerMap{ "key": LedgerArgs{...} }
type LedgerMapInput interface {
	pulumi.Input

	ToLedgerMapOutput() LedgerMapOutput
	ToLedgerMapOutputWithContext(context.Context) LedgerMapOutput
}

type LedgerMap map[string]LedgerInput

func (LedgerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ledger)(nil)).Elem()
}

func (i LedgerMap) ToLedgerMapOutput() LedgerMapOutput {
	return i.ToLedgerMapOutputWithContext(context.Background())
}

func (i LedgerMap) ToLedgerMapOutputWithContext(ctx context.Context) LedgerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LedgerMapOutput)
}

type LedgerOutput struct{ *pulumi.OutputState }

func (LedgerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ledger)(nil)).Elem()
}

func (o LedgerOutput) ToLedgerOutput() LedgerOutput {
	return o
}

func (o LedgerOutput) ToLedgerOutputWithContext(ctx context.Context) LedgerOutput {
	return o
}

// A list of `azureadBasedServicePrincipal` blocks as defined below.
func (o LedgerOutput) AzureadBasedServicePrincipals() LedgerAzureadBasedServicePrincipalArrayOutput {
	return o.ApplyT(func(v *Ledger) LedgerAzureadBasedServicePrincipalArrayOutput { return v.AzureadBasedServicePrincipals }).(LedgerAzureadBasedServicePrincipalArrayOutput)
}

// A list of `certificateBasedSecurityPrincipal` blocks as defined below.
func (o LedgerOutput) CertificateBasedSecurityPrincipals() LedgerCertificateBasedSecurityPrincipalArrayOutput {
	return o.ApplyT(func(v *Ledger) LedgerCertificateBasedSecurityPrincipalArrayOutput {
		return v.CertificateBasedSecurityPrincipals
	}).(LedgerCertificateBasedSecurityPrincipalArrayOutput)
}

// The Identity Service Endpoint for this Confidential Ledger.
func (o LedgerOutput) IdentityServiceEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Ledger) pulumi.StringOutput { return v.IdentityServiceEndpoint }).(pulumi.StringOutput)
}

// The Endpoint for this Confidential Ledger.
func (o LedgerOutput) LedgerEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Ledger) pulumi.StringOutput { return v.LedgerEndpoint }).(pulumi.StringOutput)
}

// Specifies the type of Confidential Ledger. Possible values are `Private` and `Public`. Changing this forces a new resource to be created.
func (o LedgerOutput) LedgerType() pulumi.StringOutput {
	return o.ApplyT(func(v *Ledger) pulumi.StringOutput { return v.LedgerType }).(pulumi.StringOutput)
}

// Specifies the supported Azure location where the Confidential Ledger exists. Changing this forces a new resource to be created.
func (o LedgerOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Ledger) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name of the Confidential Ledger. Changing this forces a new resource to be created.
func (o LedgerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Ledger) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the Resource Group where the Confidential Ledger exists. Changing this forces a new resource to be created.
func (o LedgerOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Ledger) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the Confidential Ledger.
func (o LedgerOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Ledger) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type LedgerArrayOutput struct{ *pulumi.OutputState }

func (LedgerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ledger)(nil)).Elem()
}

func (o LedgerArrayOutput) ToLedgerArrayOutput() LedgerArrayOutput {
	return o
}

func (o LedgerArrayOutput) ToLedgerArrayOutputWithContext(ctx context.Context) LedgerArrayOutput {
	return o
}

func (o LedgerArrayOutput) Index(i pulumi.IntInput) LedgerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ledger {
		return vs[0].([]*Ledger)[vs[1].(int)]
	}).(LedgerOutput)
}

type LedgerMapOutput struct{ *pulumi.OutputState }

func (LedgerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ledger)(nil)).Elem()
}

func (o LedgerMapOutput) ToLedgerMapOutput() LedgerMapOutput {
	return o
}

func (o LedgerMapOutput) ToLedgerMapOutputWithContext(ctx context.Context) LedgerMapOutput {
	return o
}

func (o LedgerMapOutput) MapIndex(k pulumi.StringInput) LedgerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ledger {
		return vs[0].(map[string]*Ledger)[vs[1].(string)]
	}).(LedgerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LedgerInput)(nil)).Elem(), &Ledger{})
	pulumi.RegisterInputType(reflect.TypeOf((*LedgerArrayInput)(nil)).Elem(), LedgerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LedgerMapInput)(nil)).Elem(), LedgerMap{})
	pulumi.RegisterOutputType(LedgerOutput{})
	pulumi.RegisterOutputType(LedgerArrayOutput{})
	pulumi.RegisterOutputType(LedgerMapOutput{})
}
