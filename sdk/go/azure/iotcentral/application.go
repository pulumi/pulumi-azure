// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iotcentral

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an IoT Central Application
//
// ## Import
//
// The IoT Central Application can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:iotcentral/application:Application example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.IoTCentral/iotApps/app1
//
// ```
type Application struct {
	pulumi.CustomResourceState

	// A `displayName` name. Custom display name for the IoT Central application. Default is resource name.
	//
	// > **NOTE:** Due to a bug in the provider, the default value of `displayName` of a newly created IoT Central App will be the Resource Group Name, it will be fixed and use resource name in 4.0. For an existing IoT Central App, this could be fixed by specifying the `displayName` explicitly.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// An `identity` block as defined below.
	Identity ApplicationIdentityPtrOutput `pulumi:"identity"`
	// Specifies the supported Azure location where the resource has to be create. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name of the IotHub resource. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Whether public network access is allowed for the IoT Central Application. Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrOutput `pulumi:"publicNetworkAccessEnabled"`
	// The name of the resource group under which the IotHub resource has to be created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A `sku` name. Possible values is `ST0`, `ST1`, `ST2`, Default value is `ST1`
	Sku pulumi.StringPtrOutput `pulumi:"sku"`
	// A `subDomain` name. Subdomain for the IoT Central URL. Each application must have a unique subdomain.
	SubDomain pulumi.StringOutput `pulumi:"subDomain"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A `template` name. IoT Central application template name. Default is a custom application. Changing this forces a new resource to be created.
	Template pulumi.StringOutput `pulumi:"template"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOption) (*Application, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SubDomain == nil {
		return nil, errors.New("invalid value for required argument 'SubDomain'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Application
	err := ctx.RegisterResource("azure:iotcentral/application:Application", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationState, opts ...pulumi.ResourceOption) (*Application, error) {
	var resource Application
	err := ctx.ReadResource("azure:iotcentral/application:Application", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Application resources.
type applicationState struct {
	// A `displayName` name. Custom display name for the IoT Central application. Default is resource name.
	//
	// > **NOTE:** Due to a bug in the provider, the default value of `displayName` of a newly created IoT Central App will be the Resource Group Name, it will be fixed and use resource name in 4.0. For an existing IoT Central App, this could be fixed by specifying the `displayName` explicitly.
	DisplayName *string `pulumi:"displayName"`
	// An `identity` block as defined below.
	Identity *ApplicationIdentity `pulumi:"identity"`
	// Specifies the supported Azure location where the resource has to be create. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the IotHub resource. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Whether public network access is allowed for the IoT Central Application. Defaults to `true`.
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// The name of the resource group under which the IotHub resource has to be created. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A `sku` name. Possible values is `ST0`, `ST1`, `ST2`, Default value is `ST1`
	Sku *string `pulumi:"sku"`
	// A `subDomain` name. Subdomain for the IoT Central URL. Each application must have a unique subdomain.
	SubDomain *string `pulumi:"subDomain"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// A `template` name. IoT Central application template name. Default is a custom application. Changing this forces a new resource to be created.
	Template *string `pulumi:"template"`
}

type ApplicationState struct {
	// A `displayName` name. Custom display name for the IoT Central application. Default is resource name.
	//
	// > **NOTE:** Due to a bug in the provider, the default value of `displayName` of a newly created IoT Central App will be the Resource Group Name, it will be fixed and use resource name in 4.0. For an existing IoT Central App, this could be fixed by specifying the `displayName` explicitly.
	DisplayName pulumi.StringPtrInput
	// An `identity` block as defined below.
	Identity ApplicationIdentityPtrInput
	// Specifies the supported Azure location where the resource has to be create. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the IotHub resource. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Whether public network access is allowed for the IoT Central Application. Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// The name of the resource group under which the IotHub resource has to be created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A `sku` name. Possible values is `ST0`, `ST1`, `ST2`, Default value is `ST1`
	Sku pulumi.StringPtrInput
	// A `subDomain` name. Subdomain for the IoT Central URL. Each application must have a unique subdomain.
	SubDomain pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// A `template` name. IoT Central application template name. Default is a custom application. Changing this forces a new resource to be created.
	Template pulumi.StringPtrInput
}

func (ApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationState)(nil)).Elem()
}

type applicationArgs struct {
	// A `displayName` name. Custom display name for the IoT Central application. Default is resource name.
	//
	// > **NOTE:** Due to a bug in the provider, the default value of `displayName` of a newly created IoT Central App will be the Resource Group Name, it will be fixed and use resource name in 4.0. For an existing IoT Central App, this could be fixed by specifying the `displayName` explicitly.
	DisplayName *string `pulumi:"displayName"`
	// An `identity` block as defined below.
	Identity *ApplicationIdentity `pulumi:"identity"`
	// Specifies the supported Azure location where the resource has to be create. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the IotHub resource. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Whether public network access is allowed for the IoT Central Application. Defaults to `true`.
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// The name of the resource group under which the IotHub resource has to be created. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A `sku` name. Possible values is `ST0`, `ST1`, `ST2`, Default value is `ST1`
	Sku *string `pulumi:"sku"`
	// A `subDomain` name. Subdomain for the IoT Central URL. Each application must have a unique subdomain.
	SubDomain string `pulumi:"subDomain"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// A `template` name. IoT Central application template name. Default is a custom application. Changing this forces a new resource to be created.
	Template *string `pulumi:"template"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	// A `displayName` name. Custom display name for the IoT Central application. Default is resource name.
	//
	// > **NOTE:** Due to a bug in the provider, the default value of `displayName` of a newly created IoT Central App will be the Resource Group Name, it will be fixed and use resource name in 4.0. For an existing IoT Central App, this could be fixed by specifying the `displayName` explicitly.
	DisplayName pulumi.StringPtrInput
	// An `identity` block as defined below.
	Identity ApplicationIdentityPtrInput
	// Specifies the supported Azure location where the resource has to be create. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the IotHub resource. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Whether public network access is allowed for the IoT Central Application. Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// The name of the resource group under which the IotHub resource has to be created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A `sku` name. Possible values is `ST0`, `ST1`, `ST2`, Default value is `ST1`
	Sku pulumi.StringPtrInput
	// A `subDomain` name. Subdomain for the IoT Central URL. Each application must have a unique subdomain.
	SubDomain pulumi.StringInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// A `template` name. IoT Central application template name. Default is a custom application. Changing this forces a new resource to be created.
	Template pulumi.StringPtrInput
}

func (ApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationArgs)(nil)).Elem()
}

type ApplicationInput interface {
	pulumi.Input

	ToApplicationOutput() ApplicationOutput
	ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput
}

func (*Application) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (i *Application) ToApplicationOutput() ApplicationOutput {
	return i.ToApplicationOutputWithContext(context.Background())
}

func (i *Application) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutput)
}

func (i *Application) ToOutput(ctx context.Context) pulumix.Output[*Application] {
	return pulumix.Output[*Application]{
		OutputState: i.ToApplicationOutputWithContext(ctx).OutputState,
	}
}

// ApplicationArrayInput is an input type that accepts ApplicationArray and ApplicationArrayOutput values.
// You can construct a concrete instance of `ApplicationArrayInput` via:
//
//	ApplicationArray{ ApplicationArgs{...} }
type ApplicationArrayInput interface {
	pulumi.Input

	ToApplicationArrayOutput() ApplicationArrayOutput
	ToApplicationArrayOutputWithContext(context.Context) ApplicationArrayOutput
}

type ApplicationArray []ApplicationInput

func (ApplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Application)(nil)).Elem()
}

func (i ApplicationArray) ToApplicationArrayOutput() ApplicationArrayOutput {
	return i.ToApplicationArrayOutputWithContext(context.Background())
}

func (i ApplicationArray) ToApplicationArrayOutputWithContext(ctx context.Context) ApplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationArrayOutput)
}

func (i ApplicationArray) ToOutput(ctx context.Context) pulumix.Output[[]*Application] {
	return pulumix.Output[[]*Application]{
		OutputState: i.ToApplicationArrayOutputWithContext(ctx).OutputState,
	}
}

// ApplicationMapInput is an input type that accepts ApplicationMap and ApplicationMapOutput values.
// You can construct a concrete instance of `ApplicationMapInput` via:
//
//	ApplicationMap{ "key": ApplicationArgs{...} }
type ApplicationMapInput interface {
	pulumi.Input

	ToApplicationMapOutput() ApplicationMapOutput
	ToApplicationMapOutputWithContext(context.Context) ApplicationMapOutput
}

type ApplicationMap map[string]ApplicationInput

func (ApplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Application)(nil)).Elem()
}

func (i ApplicationMap) ToApplicationMapOutput() ApplicationMapOutput {
	return i.ToApplicationMapOutputWithContext(context.Background())
}

func (i ApplicationMap) ToApplicationMapOutputWithContext(ctx context.Context) ApplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMapOutput)
}

func (i ApplicationMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Application] {
	return pulumix.Output[map[string]*Application]{
		OutputState: i.ToApplicationMapOutputWithContext(ctx).OutputState,
	}
}

type ApplicationOutput struct{ *pulumi.OutputState }

func (ApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (o ApplicationOutput) ToApplicationOutput() ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToOutput(ctx context.Context) pulumix.Output[*Application] {
	return pulumix.Output[*Application]{
		OutputState: o.OutputState,
	}
}

// A `displayName` name. Custom display name for the IoT Central application. Default is resource name.
//
// > **NOTE:** Due to a bug in the provider, the default value of `displayName` of a newly created IoT Central App will be the Resource Group Name, it will be fixed and use resource name in 4.0. For an existing IoT Central App, this could be fixed by specifying the `displayName` explicitly.
func (o ApplicationOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// An `identity` block as defined below.
func (o ApplicationOutput) Identity() ApplicationIdentityPtrOutput {
	return o.ApplyT(func(v *Application) ApplicationIdentityPtrOutput { return v.Identity }).(ApplicationIdentityPtrOutput)
}

// Specifies the supported Azure location where the resource has to be create. Changing this forces a new resource to be created.
func (o ApplicationOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name of the IotHub resource. Changing this forces a new resource to be created.
func (o ApplicationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Whether public network access is allowed for the IoT Central Application. Defaults to `true`.
func (o ApplicationOutput) PublicNetworkAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.BoolPtrOutput { return v.PublicNetworkAccessEnabled }).(pulumi.BoolPtrOutput)
}

// The name of the resource group under which the IotHub resource has to be created. Changing this forces a new resource to be created.
func (o ApplicationOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A `sku` name. Possible values is `ST0`, `ST1`, `ST2`, Default value is `ST1`
func (o ApplicationOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.Sku }).(pulumi.StringPtrOutput)
}

// A `subDomain` name. Subdomain for the IoT Central URL. Each application must have a unique subdomain.
func (o ApplicationOutput) SubDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.SubDomain }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o ApplicationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Application) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A `template` name. IoT Central application template name. Default is a custom application. Changing this forces a new resource to be created.
func (o ApplicationOutput) Template() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Template }).(pulumi.StringOutput)
}

type ApplicationArrayOutput struct{ *pulumi.OutputState }

func (ApplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Application)(nil)).Elem()
}

func (o ApplicationArrayOutput) ToApplicationArrayOutput() ApplicationArrayOutput {
	return o
}

func (o ApplicationArrayOutput) ToApplicationArrayOutputWithContext(ctx context.Context) ApplicationArrayOutput {
	return o
}

func (o ApplicationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Application] {
	return pulumix.Output[[]*Application]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationArrayOutput) Index(i pulumi.IntInput) ApplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Application {
		return vs[0].([]*Application)[vs[1].(int)]
	}).(ApplicationOutput)
}

type ApplicationMapOutput struct{ *pulumi.OutputState }

func (ApplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Application)(nil)).Elem()
}

func (o ApplicationMapOutput) ToApplicationMapOutput() ApplicationMapOutput {
	return o
}

func (o ApplicationMapOutput) ToApplicationMapOutputWithContext(ctx context.Context) ApplicationMapOutput {
	return o
}

func (o ApplicationMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Application] {
	return pulumix.Output[map[string]*Application]{
		OutputState: o.OutputState,
	}
}

func (o ApplicationMapOutput) MapIndex(k pulumi.StringInput) ApplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Application {
		return vs[0].(map[string]*Application)[vs[1].(string)]
	}).(ApplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInput)(nil)).Elem(), &Application{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationArrayInput)(nil)).Elem(), ApplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationMapInput)(nil)).Elem(), ApplicationMap{})
	pulumi.RegisterOutputType(ApplicationOutput{})
	pulumi.RegisterOutputType(ApplicationArrayOutput{})
	pulumi.RegisterOutputType(ApplicationMapOutput{})
}
