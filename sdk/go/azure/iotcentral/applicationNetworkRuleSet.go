// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iotcentral

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an IoT Central Application Network Rule Set.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/iotcentral"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleApplication, err := iotcentral.NewApplication(ctx, "exampleApplication", &iotcentral.ApplicationArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				SubDomain:         pulumi.String("example-iotcentral-app-subdomain"),
//				DisplayName:       pulumi.String("example-iotcentral-app-display-name"),
//				Sku:               pulumi.String("ST1"),
//				Tags: pulumi.StringMap{
//					"Foo": pulumi.String("Bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = iotcentral.NewApplicationNetworkRuleSet(ctx, "exampleApplicationNetworkRuleSet", &iotcentral.ApplicationNetworkRuleSetArgs{
//				IotcentralApplicationId: exampleApplication.ID(),
//				IpRules: iotcentral.ApplicationNetworkRuleSetIpRuleArray{
//					&iotcentral.ApplicationNetworkRuleSetIpRuleArgs{
//						Name:   pulumi.String("rule1"),
//						IpMask: pulumi.String("10.0.1.0/24"),
//					},
//					&iotcentral.ApplicationNetworkRuleSetIpRuleArgs{
//						Name:   pulumi.String("rule2"),
//						IpMask: pulumi.String("10.1.1.0/24"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// IoT Central Application Network Rule Sets can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:iotcentral/applicationNetworkRuleSet:ApplicationNetworkRuleSet example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.IoTCentral/iotApps/app1
//
// ```
type ApplicationNetworkRuleSet struct {
	pulumi.CustomResourceState

	// Whether these IP Rules apply for device connectivity to IoT Hub and Device Provisioning Service associated with this IoT Central Application. Possible values are `true`, `false`. Defaults to `true`
	ApplyToDevice pulumi.BoolPtrOutput `pulumi:"applyToDevice"`
	// Specifies the default action for the IoT Central Application Network Rule Set. Possible values are `Allow` and `Deny`. Defaults to `Deny`.
	DefaultAction pulumi.StringPtrOutput `pulumi:"defaultAction"`
	// The ID of the IoT Central Application. Changing this forces a new resource to be created.
	IotcentralApplicationId pulumi.StringOutput `pulumi:"iotcentralApplicationId"`
	// One or more `ipRule` blocks as defined below.
	IpRules ApplicationNetworkRuleSetIpRuleArrayOutput `pulumi:"ipRules"`
}

// NewApplicationNetworkRuleSet registers a new resource with the given unique name, arguments, and options.
func NewApplicationNetworkRuleSet(ctx *pulumi.Context,
	name string, args *ApplicationNetworkRuleSetArgs, opts ...pulumi.ResourceOption) (*ApplicationNetworkRuleSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IotcentralApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'IotcentralApplicationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplicationNetworkRuleSet
	err := ctx.RegisterResource("azure:iotcentral/applicationNetworkRuleSet:ApplicationNetworkRuleSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationNetworkRuleSet gets an existing ApplicationNetworkRuleSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationNetworkRuleSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationNetworkRuleSetState, opts ...pulumi.ResourceOption) (*ApplicationNetworkRuleSet, error) {
	var resource ApplicationNetworkRuleSet
	err := ctx.ReadResource("azure:iotcentral/applicationNetworkRuleSet:ApplicationNetworkRuleSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationNetworkRuleSet resources.
type applicationNetworkRuleSetState struct {
	// Whether these IP Rules apply for device connectivity to IoT Hub and Device Provisioning Service associated with this IoT Central Application. Possible values are `true`, `false`. Defaults to `true`
	ApplyToDevice *bool `pulumi:"applyToDevice"`
	// Specifies the default action for the IoT Central Application Network Rule Set. Possible values are `Allow` and `Deny`. Defaults to `Deny`.
	DefaultAction *string `pulumi:"defaultAction"`
	// The ID of the IoT Central Application. Changing this forces a new resource to be created.
	IotcentralApplicationId *string `pulumi:"iotcentralApplicationId"`
	// One or more `ipRule` blocks as defined below.
	IpRules []ApplicationNetworkRuleSetIpRule `pulumi:"ipRules"`
}

type ApplicationNetworkRuleSetState struct {
	// Whether these IP Rules apply for device connectivity to IoT Hub and Device Provisioning Service associated with this IoT Central Application. Possible values are `true`, `false`. Defaults to `true`
	ApplyToDevice pulumi.BoolPtrInput
	// Specifies the default action for the IoT Central Application Network Rule Set. Possible values are `Allow` and `Deny`. Defaults to `Deny`.
	DefaultAction pulumi.StringPtrInput
	// The ID of the IoT Central Application. Changing this forces a new resource to be created.
	IotcentralApplicationId pulumi.StringPtrInput
	// One or more `ipRule` blocks as defined below.
	IpRules ApplicationNetworkRuleSetIpRuleArrayInput
}

func (ApplicationNetworkRuleSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationNetworkRuleSetState)(nil)).Elem()
}

type applicationNetworkRuleSetArgs struct {
	// Whether these IP Rules apply for device connectivity to IoT Hub and Device Provisioning Service associated with this IoT Central Application. Possible values are `true`, `false`. Defaults to `true`
	ApplyToDevice *bool `pulumi:"applyToDevice"`
	// Specifies the default action for the IoT Central Application Network Rule Set. Possible values are `Allow` and `Deny`. Defaults to `Deny`.
	DefaultAction *string `pulumi:"defaultAction"`
	// The ID of the IoT Central Application. Changing this forces a new resource to be created.
	IotcentralApplicationId string `pulumi:"iotcentralApplicationId"`
	// One or more `ipRule` blocks as defined below.
	IpRules []ApplicationNetworkRuleSetIpRule `pulumi:"ipRules"`
}

// The set of arguments for constructing a ApplicationNetworkRuleSet resource.
type ApplicationNetworkRuleSetArgs struct {
	// Whether these IP Rules apply for device connectivity to IoT Hub and Device Provisioning Service associated with this IoT Central Application. Possible values are `true`, `false`. Defaults to `true`
	ApplyToDevice pulumi.BoolPtrInput
	// Specifies the default action for the IoT Central Application Network Rule Set. Possible values are `Allow` and `Deny`. Defaults to `Deny`.
	DefaultAction pulumi.StringPtrInput
	// The ID of the IoT Central Application. Changing this forces a new resource to be created.
	IotcentralApplicationId pulumi.StringInput
	// One or more `ipRule` blocks as defined below.
	IpRules ApplicationNetworkRuleSetIpRuleArrayInput
}

func (ApplicationNetworkRuleSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationNetworkRuleSetArgs)(nil)).Elem()
}

type ApplicationNetworkRuleSetInput interface {
	pulumi.Input

	ToApplicationNetworkRuleSetOutput() ApplicationNetworkRuleSetOutput
	ToApplicationNetworkRuleSetOutputWithContext(ctx context.Context) ApplicationNetworkRuleSetOutput
}

func (*ApplicationNetworkRuleSet) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationNetworkRuleSet)(nil)).Elem()
}

func (i *ApplicationNetworkRuleSet) ToApplicationNetworkRuleSetOutput() ApplicationNetworkRuleSetOutput {
	return i.ToApplicationNetworkRuleSetOutputWithContext(context.Background())
}

func (i *ApplicationNetworkRuleSet) ToApplicationNetworkRuleSetOutputWithContext(ctx context.Context) ApplicationNetworkRuleSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationNetworkRuleSetOutput)
}

// ApplicationNetworkRuleSetArrayInput is an input type that accepts ApplicationNetworkRuleSetArray and ApplicationNetworkRuleSetArrayOutput values.
// You can construct a concrete instance of `ApplicationNetworkRuleSetArrayInput` via:
//
//	ApplicationNetworkRuleSetArray{ ApplicationNetworkRuleSetArgs{...} }
type ApplicationNetworkRuleSetArrayInput interface {
	pulumi.Input

	ToApplicationNetworkRuleSetArrayOutput() ApplicationNetworkRuleSetArrayOutput
	ToApplicationNetworkRuleSetArrayOutputWithContext(context.Context) ApplicationNetworkRuleSetArrayOutput
}

type ApplicationNetworkRuleSetArray []ApplicationNetworkRuleSetInput

func (ApplicationNetworkRuleSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationNetworkRuleSet)(nil)).Elem()
}

func (i ApplicationNetworkRuleSetArray) ToApplicationNetworkRuleSetArrayOutput() ApplicationNetworkRuleSetArrayOutput {
	return i.ToApplicationNetworkRuleSetArrayOutputWithContext(context.Background())
}

func (i ApplicationNetworkRuleSetArray) ToApplicationNetworkRuleSetArrayOutputWithContext(ctx context.Context) ApplicationNetworkRuleSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationNetworkRuleSetArrayOutput)
}

// ApplicationNetworkRuleSetMapInput is an input type that accepts ApplicationNetworkRuleSetMap and ApplicationNetworkRuleSetMapOutput values.
// You can construct a concrete instance of `ApplicationNetworkRuleSetMapInput` via:
//
//	ApplicationNetworkRuleSetMap{ "key": ApplicationNetworkRuleSetArgs{...} }
type ApplicationNetworkRuleSetMapInput interface {
	pulumi.Input

	ToApplicationNetworkRuleSetMapOutput() ApplicationNetworkRuleSetMapOutput
	ToApplicationNetworkRuleSetMapOutputWithContext(context.Context) ApplicationNetworkRuleSetMapOutput
}

type ApplicationNetworkRuleSetMap map[string]ApplicationNetworkRuleSetInput

func (ApplicationNetworkRuleSetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationNetworkRuleSet)(nil)).Elem()
}

func (i ApplicationNetworkRuleSetMap) ToApplicationNetworkRuleSetMapOutput() ApplicationNetworkRuleSetMapOutput {
	return i.ToApplicationNetworkRuleSetMapOutputWithContext(context.Background())
}

func (i ApplicationNetworkRuleSetMap) ToApplicationNetworkRuleSetMapOutputWithContext(ctx context.Context) ApplicationNetworkRuleSetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationNetworkRuleSetMapOutput)
}

type ApplicationNetworkRuleSetOutput struct{ *pulumi.OutputState }

func (ApplicationNetworkRuleSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationNetworkRuleSet)(nil)).Elem()
}

func (o ApplicationNetworkRuleSetOutput) ToApplicationNetworkRuleSetOutput() ApplicationNetworkRuleSetOutput {
	return o
}

func (o ApplicationNetworkRuleSetOutput) ToApplicationNetworkRuleSetOutputWithContext(ctx context.Context) ApplicationNetworkRuleSetOutput {
	return o
}

// Whether these IP Rules apply for device connectivity to IoT Hub and Device Provisioning Service associated with this IoT Central Application. Possible values are `true`, `false`. Defaults to `true`
func (o ApplicationNetworkRuleSetOutput) ApplyToDevice() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationNetworkRuleSet) pulumi.BoolPtrOutput { return v.ApplyToDevice }).(pulumi.BoolPtrOutput)
}

// Specifies the default action for the IoT Central Application Network Rule Set. Possible values are `Allow` and `Deny`. Defaults to `Deny`.
func (o ApplicationNetworkRuleSetOutput) DefaultAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationNetworkRuleSet) pulumi.StringPtrOutput { return v.DefaultAction }).(pulumi.StringPtrOutput)
}

// The ID of the IoT Central Application. Changing this forces a new resource to be created.
func (o ApplicationNetworkRuleSetOutput) IotcentralApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationNetworkRuleSet) pulumi.StringOutput { return v.IotcentralApplicationId }).(pulumi.StringOutput)
}

// One or more `ipRule` blocks as defined below.
func (o ApplicationNetworkRuleSetOutput) IpRules() ApplicationNetworkRuleSetIpRuleArrayOutput {
	return o.ApplyT(func(v *ApplicationNetworkRuleSet) ApplicationNetworkRuleSetIpRuleArrayOutput { return v.IpRules }).(ApplicationNetworkRuleSetIpRuleArrayOutput)
}

type ApplicationNetworkRuleSetArrayOutput struct{ *pulumi.OutputState }

func (ApplicationNetworkRuleSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationNetworkRuleSet)(nil)).Elem()
}

func (o ApplicationNetworkRuleSetArrayOutput) ToApplicationNetworkRuleSetArrayOutput() ApplicationNetworkRuleSetArrayOutput {
	return o
}

func (o ApplicationNetworkRuleSetArrayOutput) ToApplicationNetworkRuleSetArrayOutputWithContext(ctx context.Context) ApplicationNetworkRuleSetArrayOutput {
	return o
}

func (o ApplicationNetworkRuleSetArrayOutput) Index(i pulumi.IntInput) ApplicationNetworkRuleSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplicationNetworkRuleSet {
		return vs[0].([]*ApplicationNetworkRuleSet)[vs[1].(int)]
	}).(ApplicationNetworkRuleSetOutput)
}

type ApplicationNetworkRuleSetMapOutput struct{ *pulumi.OutputState }

func (ApplicationNetworkRuleSetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationNetworkRuleSet)(nil)).Elem()
}

func (o ApplicationNetworkRuleSetMapOutput) ToApplicationNetworkRuleSetMapOutput() ApplicationNetworkRuleSetMapOutput {
	return o
}

func (o ApplicationNetworkRuleSetMapOutput) ToApplicationNetworkRuleSetMapOutputWithContext(ctx context.Context) ApplicationNetworkRuleSetMapOutput {
	return o
}

func (o ApplicationNetworkRuleSetMapOutput) MapIndex(k pulumi.StringInput) ApplicationNetworkRuleSetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplicationNetworkRuleSet {
		return vs[0].(map[string]*ApplicationNetworkRuleSet)[vs[1].(string)]
	}).(ApplicationNetworkRuleSetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationNetworkRuleSetInput)(nil)).Elem(), &ApplicationNetworkRuleSet{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationNetworkRuleSetArrayInput)(nil)).Elem(), ApplicationNetworkRuleSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationNetworkRuleSetMapInput)(nil)).Elem(), ApplicationNetworkRuleSetMap{})
	pulumi.RegisterOutputType(ApplicationNetworkRuleSetOutput{})
	pulumi.RegisterOutputType(ApplicationNetworkRuleSetArrayOutput{})
	pulumi.RegisterOutputType(ApplicationNetworkRuleSetMapOutput{})
}
