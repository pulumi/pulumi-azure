// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iotcentral

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an IoT Central Organization
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/iotcentral"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleApplication, err := iotcentral.NewApplication(ctx, "exampleApplication", &iotcentral.ApplicationArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				SubDomain:         pulumi.String("example-iotcentral-app-subdomain"),
//				DisplayName:       pulumi.String("example-iotcentral-app-display-name"),
//				Sku:               pulumi.String("ST1"),
//				Template:          pulumi.String("iotc-default@1.0.0"),
//				Tags: pulumi.StringMap{
//					"Foo": pulumi.String("Bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleParent, err := iotcentral.NewOrganization(ctx, "exampleParent", &iotcentral.OrganizationArgs{
//				IotcentralApplicationId: exampleApplication.ID(),
//				OrganizationId:          pulumi.String("example-parent-organization-id"),
//				DisplayName:             pulumi.String("Org example parent"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = iotcentral.NewOrganization(ctx, "exampleOrganization", &iotcentral.OrganizationArgs{
//				IotcentralApplicationId: exampleApplication.ID(),
//				OrganizationId:          pulumi.String("example-child-organization-id"),
//				DisplayName:             pulumi.String("Org example"),
//				ParentOrganizationId:    exampleParent.OrganizationId,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The IoT Central Organization can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import azure:iotcentral/organization:Organization example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.IoTCentral/iotApps/example/organizations/example
// ```
type Organization struct {
	pulumi.CustomResourceState

	// Custom `displayName` for the organization.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The application `id`. Changing this forces a new resource to be created.
	IotcentralApplicationId pulumi.StringOutput `pulumi:"iotcentralApplicationId"`
	// The ID of the organization. Changing this forces a new resource to be created.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The `organizationId` of the parent organization. Changing this forces a new resource to be created.
	ParentOrganizationId pulumi.StringPtrOutput `pulumi:"parentOrganizationId"`
}

// NewOrganization registers a new resource with the given unique name, arguments, and options.
func NewOrganization(ctx *pulumi.Context,
	name string, args *OrganizationArgs, opts ...pulumi.ResourceOption) (*Organization, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.IotcentralApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'IotcentralApplicationId'")
	}
	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Organization
	err := ctx.RegisterResource("azure:iotcentral/organization:Organization", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganization gets an existing Organization resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganization(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationState, opts ...pulumi.ResourceOption) (*Organization, error) {
	var resource Organization
	err := ctx.ReadResource("azure:iotcentral/organization:Organization", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Organization resources.
type organizationState struct {
	// Custom `displayName` for the organization.
	DisplayName *string `pulumi:"displayName"`
	// The application `id`. Changing this forces a new resource to be created.
	IotcentralApplicationId *string `pulumi:"iotcentralApplicationId"`
	// The ID of the organization. Changing this forces a new resource to be created.
	OrganizationId *string `pulumi:"organizationId"`
	// The `organizationId` of the parent organization. Changing this forces a new resource to be created.
	ParentOrganizationId *string `pulumi:"parentOrganizationId"`
}

type OrganizationState struct {
	// Custom `displayName` for the organization.
	DisplayName pulumi.StringPtrInput
	// The application `id`. Changing this forces a new resource to be created.
	IotcentralApplicationId pulumi.StringPtrInput
	// The ID of the organization. Changing this forces a new resource to be created.
	OrganizationId pulumi.StringPtrInput
	// The `organizationId` of the parent organization. Changing this forces a new resource to be created.
	ParentOrganizationId pulumi.StringPtrInput
}

func (OrganizationState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationState)(nil)).Elem()
}

type organizationArgs struct {
	// Custom `displayName` for the organization.
	DisplayName string `pulumi:"displayName"`
	// The application `id`. Changing this forces a new resource to be created.
	IotcentralApplicationId string `pulumi:"iotcentralApplicationId"`
	// The ID of the organization. Changing this forces a new resource to be created.
	OrganizationId string `pulumi:"organizationId"`
	// The `organizationId` of the parent organization. Changing this forces a new resource to be created.
	ParentOrganizationId *string `pulumi:"parentOrganizationId"`
}

// The set of arguments for constructing a Organization resource.
type OrganizationArgs struct {
	// Custom `displayName` for the organization.
	DisplayName pulumi.StringInput
	// The application `id`. Changing this forces a new resource to be created.
	IotcentralApplicationId pulumi.StringInput
	// The ID of the organization. Changing this forces a new resource to be created.
	OrganizationId pulumi.StringInput
	// The `organizationId` of the parent organization. Changing this forces a new resource to be created.
	ParentOrganizationId pulumi.StringPtrInput
}

func (OrganizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationArgs)(nil)).Elem()
}

type OrganizationInput interface {
	pulumi.Input

	ToOrganizationOutput() OrganizationOutput
	ToOrganizationOutputWithContext(ctx context.Context) OrganizationOutput
}

func (*Organization) ElementType() reflect.Type {
	return reflect.TypeOf((**Organization)(nil)).Elem()
}

func (i *Organization) ToOrganizationOutput() OrganizationOutput {
	return i.ToOrganizationOutputWithContext(context.Background())
}

func (i *Organization) ToOrganizationOutputWithContext(ctx context.Context) OrganizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationOutput)
}

// OrganizationArrayInput is an input type that accepts OrganizationArray and OrganizationArrayOutput values.
// You can construct a concrete instance of `OrganizationArrayInput` via:
//
//	OrganizationArray{ OrganizationArgs{...} }
type OrganizationArrayInput interface {
	pulumi.Input

	ToOrganizationArrayOutput() OrganizationArrayOutput
	ToOrganizationArrayOutputWithContext(context.Context) OrganizationArrayOutput
}

type OrganizationArray []OrganizationInput

func (OrganizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Organization)(nil)).Elem()
}

func (i OrganizationArray) ToOrganizationArrayOutput() OrganizationArrayOutput {
	return i.ToOrganizationArrayOutputWithContext(context.Background())
}

func (i OrganizationArray) ToOrganizationArrayOutputWithContext(ctx context.Context) OrganizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationArrayOutput)
}

// OrganizationMapInput is an input type that accepts OrganizationMap and OrganizationMapOutput values.
// You can construct a concrete instance of `OrganizationMapInput` via:
//
//	OrganizationMap{ "key": OrganizationArgs{...} }
type OrganizationMapInput interface {
	pulumi.Input

	ToOrganizationMapOutput() OrganizationMapOutput
	ToOrganizationMapOutputWithContext(context.Context) OrganizationMapOutput
}

type OrganizationMap map[string]OrganizationInput

func (OrganizationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Organization)(nil)).Elem()
}

func (i OrganizationMap) ToOrganizationMapOutput() OrganizationMapOutput {
	return i.ToOrganizationMapOutputWithContext(context.Background())
}

func (i OrganizationMap) ToOrganizationMapOutputWithContext(ctx context.Context) OrganizationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationMapOutput)
}

type OrganizationOutput struct{ *pulumi.OutputState }

func (OrganizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Organization)(nil)).Elem()
}

func (o OrganizationOutput) ToOrganizationOutput() OrganizationOutput {
	return o
}

func (o OrganizationOutput) ToOrganizationOutputWithContext(ctx context.Context) OrganizationOutput {
	return o
}

// Custom `displayName` for the organization.
func (o OrganizationOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Organization) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The application `id`. Changing this forces a new resource to be created.
func (o OrganizationOutput) IotcentralApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Organization) pulumi.StringOutput { return v.IotcentralApplicationId }).(pulumi.StringOutput)
}

// The ID of the organization. Changing this forces a new resource to be created.
func (o OrganizationOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Organization) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The `organizationId` of the parent organization. Changing this forces a new resource to be created.
func (o OrganizationOutput) ParentOrganizationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Organization) pulumi.StringPtrOutput { return v.ParentOrganizationId }).(pulumi.StringPtrOutput)
}

type OrganizationArrayOutput struct{ *pulumi.OutputState }

func (OrganizationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Organization)(nil)).Elem()
}

func (o OrganizationArrayOutput) ToOrganizationArrayOutput() OrganizationArrayOutput {
	return o
}

func (o OrganizationArrayOutput) ToOrganizationArrayOutputWithContext(ctx context.Context) OrganizationArrayOutput {
	return o
}

func (o OrganizationArrayOutput) Index(i pulumi.IntInput) OrganizationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Organization {
		return vs[0].([]*Organization)[vs[1].(int)]
	}).(OrganizationOutput)
}

type OrganizationMapOutput struct{ *pulumi.OutputState }

func (OrganizationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Organization)(nil)).Elem()
}

func (o OrganizationMapOutput) ToOrganizationMapOutput() OrganizationMapOutput {
	return o
}

func (o OrganizationMapOutput) ToOrganizationMapOutputWithContext(ctx context.Context) OrganizationMapOutput {
	return o
}

func (o OrganizationMapOutput) MapIndex(k pulumi.StringInput) OrganizationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Organization {
		return vs[0].(map[string]*Organization)[vs[1].(string)]
	}).(OrganizationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationInput)(nil)).Elem(), &Organization{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationArrayInput)(nil)).Elem(), OrganizationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationMapInput)(nil)).Elem(), OrganizationMap{})
	pulumi.RegisterOutputType(OrganizationOutput{})
	pulumi.RegisterOutputType(OrganizationArrayOutput{})
	pulumi.RegisterOutputType(OrganizationMapOutput{})
}
