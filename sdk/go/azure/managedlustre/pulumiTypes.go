// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package managedlustre

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type FileSystemEncryptionKey struct {
	// The URL to the Key Vault Key used as the Encryption Key. This can be found as `id` on the `keyvault.Key` resource.
	KeyUrl string `pulumi:"keyUrl"`
	// The ID of the source Key Vault. This can be found as `id` on the `keyvault.KeyVault` resource.
	SourceVaultId string `pulumi:"sourceVaultId"`
}

// FileSystemEncryptionKeyInput is an input type that accepts FileSystemEncryptionKeyArgs and FileSystemEncryptionKeyOutput values.
// You can construct a concrete instance of `FileSystemEncryptionKeyInput` via:
//
//	FileSystemEncryptionKeyArgs{...}
type FileSystemEncryptionKeyInput interface {
	pulumi.Input

	ToFileSystemEncryptionKeyOutput() FileSystemEncryptionKeyOutput
	ToFileSystemEncryptionKeyOutputWithContext(context.Context) FileSystemEncryptionKeyOutput
}

type FileSystemEncryptionKeyArgs struct {
	// The URL to the Key Vault Key used as the Encryption Key. This can be found as `id` on the `keyvault.Key` resource.
	KeyUrl pulumi.StringInput `pulumi:"keyUrl"`
	// The ID of the source Key Vault. This can be found as `id` on the `keyvault.KeyVault` resource.
	SourceVaultId pulumi.StringInput `pulumi:"sourceVaultId"`
}

func (FileSystemEncryptionKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemEncryptionKey)(nil)).Elem()
}

func (i FileSystemEncryptionKeyArgs) ToFileSystemEncryptionKeyOutput() FileSystemEncryptionKeyOutput {
	return i.ToFileSystemEncryptionKeyOutputWithContext(context.Background())
}

func (i FileSystemEncryptionKeyArgs) ToFileSystemEncryptionKeyOutputWithContext(ctx context.Context) FileSystemEncryptionKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemEncryptionKeyOutput)
}

func (i FileSystemEncryptionKeyArgs) ToOutput(ctx context.Context) pulumix.Output[FileSystemEncryptionKey] {
	return pulumix.Output[FileSystemEncryptionKey]{
		OutputState: i.ToFileSystemEncryptionKeyOutputWithContext(ctx).OutputState,
	}
}

func (i FileSystemEncryptionKeyArgs) ToFileSystemEncryptionKeyPtrOutput() FileSystemEncryptionKeyPtrOutput {
	return i.ToFileSystemEncryptionKeyPtrOutputWithContext(context.Background())
}

func (i FileSystemEncryptionKeyArgs) ToFileSystemEncryptionKeyPtrOutputWithContext(ctx context.Context) FileSystemEncryptionKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemEncryptionKeyOutput).ToFileSystemEncryptionKeyPtrOutputWithContext(ctx)
}

// FileSystemEncryptionKeyPtrInput is an input type that accepts FileSystemEncryptionKeyArgs, FileSystemEncryptionKeyPtr and FileSystemEncryptionKeyPtrOutput values.
// You can construct a concrete instance of `FileSystemEncryptionKeyPtrInput` via:
//
//	        FileSystemEncryptionKeyArgs{...}
//
//	or:
//
//	        nil
type FileSystemEncryptionKeyPtrInput interface {
	pulumi.Input

	ToFileSystemEncryptionKeyPtrOutput() FileSystemEncryptionKeyPtrOutput
	ToFileSystemEncryptionKeyPtrOutputWithContext(context.Context) FileSystemEncryptionKeyPtrOutput
}

type fileSystemEncryptionKeyPtrType FileSystemEncryptionKeyArgs

func FileSystemEncryptionKeyPtr(v *FileSystemEncryptionKeyArgs) FileSystemEncryptionKeyPtrInput {
	return (*fileSystemEncryptionKeyPtrType)(v)
}

func (*fileSystemEncryptionKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystemEncryptionKey)(nil)).Elem()
}

func (i *fileSystemEncryptionKeyPtrType) ToFileSystemEncryptionKeyPtrOutput() FileSystemEncryptionKeyPtrOutput {
	return i.ToFileSystemEncryptionKeyPtrOutputWithContext(context.Background())
}

func (i *fileSystemEncryptionKeyPtrType) ToFileSystemEncryptionKeyPtrOutputWithContext(ctx context.Context) FileSystemEncryptionKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemEncryptionKeyPtrOutput)
}

func (i *fileSystemEncryptionKeyPtrType) ToOutput(ctx context.Context) pulumix.Output[*FileSystemEncryptionKey] {
	return pulumix.Output[*FileSystemEncryptionKey]{
		OutputState: i.ToFileSystemEncryptionKeyPtrOutputWithContext(ctx).OutputState,
	}
}

type FileSystemEncryptionKeyOutput struct{ *pulumi.OutputState }

func (FileSystemEncryptionKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemEncryptionKey)(nil)).Elem()
}

func (o FileSystemEncryptionKeyOutput) ToFileSystemEncryptionKeyOutput() FileSystemEncryptionKeyOutput {
	return o
}

func (o FileSystemEncryptionKeyOutput) ToFileSystemEncryptionKeyOutputWithContext(ctx context.Context) FileSystemEncryptionKeyOutput {
	return o
}

func (o FileSystemEncryptionKeyOutput) ToFileSystemEncryptionKeyPtrOutput() FileSystemEncryptionKeyPtrOutput {
	return o.ToFileSystemEncryptionKeyPtrOutputWithContext(context.Background())
}

func (o FileSystemEncryptionKeyOutput) ToFileSystemEncryptionKeyPtrOutputWithContext(ctx context.Context) FileSystemEncryptionKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FileSystemEncryptionKey) *FileSystemEncryptionKey {
		return &v
	}).(FileSystemEncryptionKeyPtrOutput)
}

func (o FileSystemEncryptionKeyOutput) ToOutput(ctx context.Context) pulumix.Output[FileSystemEncryptionKey] {
	return pulumix.Output[FileSystemEncryptionKey]{
		OutputState: o.OutputState,
	}
}

// The URL to the Key Vault Key used as the Encryption Key. This can be found as `id` on the `keyvault.Key` resource.
func (o FileSystemEncryptionKeyOutput) KeyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v FileSystemEncryptionKey) string { return v.KeyUrl }).(pulumi.StringOutput)
}

// The ID of the source Key Vault. This can be found as `id` on the `keyvault.KeyVault` resource.
func (o FileSystemEncryptionKeyOutput) SourceVaultId() pulumi.StringOutput {
	return o.ApplyT(func(v FileSystemEncryptionKey) string { return v.SourceVaultId }).(pulumi.StringOutput)
}

type FileSystemEncryptionKeyPtrOutput struct{ *pulumi.OutputState }

func (FileSystemEncryptionKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystemEncryptionKey)(nil)).Elem()
}

func (o FileSystemEncryptionKeyPtrOutput) ToFileSystemEncryptionKeyPtrOutput() FileSystemEncryptionKeyPtrOutput {
	return o
}

func (o FileSystemEncryptionKeyPtrOutput) ToFileSystemEncryptionKeyPtrOutputWithContext(ctx context.Context) FileSystemEncryptionKeyPtrOutput {
	return o
}

func (o FileSystemEncryptionKeyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FileSystemEncryptionKey] {
	return pulumix.Output[*FileSystemEncryptionKey]{
		OutputState: o.OutputState,
	}
}

func (o FileSystemEncryptionKeyPtrOutput) Elem() FileSystemEncryptionKeyOutput {
	return o.ApplyT(func(v *FileSystemEncryptionKey) FileSystemEncryptionKey {
		if v != nil {
			return *v
		}
		var ret FileSystemEncryptionKey
		return ret
	}).(FileSystemEncryptionKeyOutput)
}

// The URL to the Key Vault Key used as the Encryption Key. This can be found as `id` on the `keyvault.Key` resource.
func (o FileSystemEncryptionKeyPtrOutput) KeyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystemEncryptionKey) *string {
		if v == nil {
			return nil
		}
		return &v.KeyUrl
	}).(pulumi.StringPtrOutput)
}

// The ID of the source Key Vault. This can be found as `id` on the `keyvault.KeyVault` resource.
func (o FileSystemEncryptionKeyPtrOutput) SourceVaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystemEncryptionKey) *string {
		if v == nil {
			return nil
		}
		return &v.SourceVaultId
	}).(pulumi.StringPtrOutput)
}

type FileSystemHsmSetting struct {
	// The resource ID of the storage container that is used for hydrating the namespace and archiving from the namespace. Changing this forces a new resource to be created.
	ContainerId string `pulumi:"containerId"`
	// The import prefix for the Azure Managed Lustre File System. Only blobs in the non-logging container that start with this path/prefix get hydrated into the cluster namespace. Changing this forces a new resource to be created.
	//
	// > **NOTE:** The roles `Contributor` and `Storage Blob Data Contributor` must be added to the Service Principal `HPC Cache Resource Provider` for the Storage Account. See official docs for more information.
	ImportPrefix *string `pulumi:"importPrefix"`
	// The resource ID of the storage container that is used for logging events and errors. Changing this forces a new resource to be created.
	LoggingContainerId string `pulumi:"loggingContainerId"`
}

// FileSystemHsmSettingInput is an input type that accepts FileSystemHsmSettingArgs and FileSystemHsmSettingOutput values.
// You can construct a concrete instance of `FileSystemHsmSettingInput` via:
//
//	FileSystemHsmSettingArgs{...}
type FileSystemHsmSettingInput interface {
	pulumi.Input

	ToFileSystemHsmSettingOutput() FileSystemHsmSettingOutput
	ToFileSystemHsmSettingOutputWithContext(context.Context) FileSystemHsmSettingOutput
}

type FileSystemHsmSettingArgs struct {
	// The resource ID of the storage container that is used for hydrating the namespace and archiving from the namespace. Changing this forces a new resource to be created.
	ContainerId pulumi.StringInput `pulumi:"containerId"`
	// The import prefix for the Azure Managed Lustre File System. Only blobs in the non-logging container that start with this path/prefix get hydrated into the cluster namespace. Changing this forces a new resource to be created.
	//
	// > **NOTE:** The roles `Contributor` and `Storage Blob Data Contributor` must be added to the Service Principal `HPC Cache Resource Provider` for the Storage Account. See official docs for more information.
	ImportPrefix pulumi.StringPtrInput `pulumi:"importPrefix"`
	// The resource ID of the storage container that is used for logging events and errors. Changing this forces a new resource to be created.
	LoggingContainerId pulumi.StringInput `pulumi:"loggingContainerId"`
}

func (FileSystemHsmSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemHsmSetting)(nil)).Elem()
}

func (i FileSystemHsmSettingArgs) ToFileSystemHsmSettingOutput() FileSystemHsmSettingOutput {
	return i.ToFileSystemHsmSettingOutputWithContext(context.Background())
}

func (i FileSystemHsmSettingArgs) ToFileSystemHsmSettingOutputWithContext(ctx context.Context) FileSystemHsmSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemHsmSettingOutput)
}

func (i FileSystemHsmSettingArgs) ToOutput(ctx context.Context) pulumix.Output[FileSystemHsmSetting] {
	return pulumix.Output[FileSystemHsmSetting]{
		OutputState: i.ToFileSystemHsmSettingOutputWithContext(ctx).OutputState,
	}
}

func (i FileSystemHsmSettingArgs) ToFileSystemHsmSettingPtrOutput() FileSystemHsmSettingPtrOutput {
	return i.ToFileSystemHsmSettingPtrOutputWithContext(context.Background())
}

func (i FileSystemHsmSettingArgs) ToFileSystemHsmSettingPtrOutputWithContext(ctx context.Context) FileSystemHsmSettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemHsmSettingOutput).ToFileSystemHsmSettingPtrOutputWithContext(ctx)
}

// FileSystemHsmSettingPtrInput is an input type that accepts FileSystemHsmSettingArgs, FileSystemHsmSettingPtr and FileSystemHsmSettingPtrOutput values.
// You can construct a concrete instance of `FileSystemHsmSettingPtrInput` via:
//
//	        FileSystemHsmSettingArgs{...}
//
//	or:
//
//	        nil
type FileSystemHsmSettingPtrInput interface {
	pulumi.Input

	ToFileSystemHsmSettingPtrOutput() FileSystemHsmSettingPtrOutput
	ToFileSystemHsmSettingPtrOutputWithContext(context.Context) FileSystemHsmSettingPtrOutput
}

type fileSystemHsmSettingPtrType FileSystemHsmSettingArgs

func FileSystemHsmSettingPtr(v *FileSystemHsmSettingArgs) FileSystemHsmSettingPtrInput {
	return (*fileSystemHsmSettingPtrType)(v)
}

func (*fileSystemHsmSettingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystemHsmSetting)(nil)).Elem()
}

func (i *fileSystemHsmSettingPtrType) ToFileSystemHsmSettingPtrOutput() FileSystemHsmSettingPtrOutput {
	return i.ToFileSystemHsmSettingPtrOutputWithContext(context.Background())
}

func (i *fileSystemHsmSettingPtrType) ToFileSystemHsmSettingPtrOutputWithContext(ctx context.Context) FileSystemHsmSettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemHsmSettingPtrOutput)
}

func (i *fileSystemHsmSettingPtrType) ToOutput(ctx context.Context) pulumix.Output[*FileSystemHsmSetting] {
	return pulumix.Output[*FileSystemHsmSetting]{
		OutputState: i.ToFileSystemHsmSettingPtrOutputWithContext(ctx).OutputState,
	}
}

type FileSystemHsmSettingOutput struct{ *pulumi.OutputState }

func (FileSystemHsmSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemHsmSetting)(nil)).Elem()
}

func (o FileSystemHsmSettingOutput) ToFileSystemHsmSettingOutput() FileSystemHsmSettingOutput {
	return o
}

func (o FileSystemHsmSettingOutput) ToFileSystemHsmSettingOutputWithContext(ctx context.Context) FileSystemHsmSettingOutput {
	return o
}

func (o FileSystemHsmSettingOutput) ToFileSystemHsmSettingPtrOutput() FileSystemHsmSettingPtrOutput {
	return o.ToFileSystemHsmSettingPtrOutputWithContext(context.Background())
}

func (o FileSystemHsmSettingOutput) ToFileSystemHsmSettingPtrOutputWithContext(ctx context.Context) FileSystemHsmSettingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FileSystemHsmSetting) *FileSystemHsmSetting {
		return &v
	}).(FileSystemHsmSettingPtrOutput)
}

func (o FileSystemHsmSettingOutput) ToOutput(ctx context.Context) pulumix.Output[FileSystemHsmSetting] {
	return pulumix.Output[FileSystemHsmSetting]{
		OutputState: o.OutputState,
	}
}

// The resource ID of the storage container that is used for hydrating the namespace and archiving from the namespace. Changing this forces a new resource to be created.
func (o FileSystemHsmSettingOutput) ContainerId() pulumi.StringOutput {
	return o.ApplyT(func(v FileSystemHsmSetting) string { return v.ContainerId }).(pulumi.StringOutput)
}

// The import prefix for the Azure Managed Lustre File System. Only blobs in the non-logging container that start with this path/prefix get hydrated into the cluster namespace. Changing this forces a new resource to be created.
//
// > **NOTE:** The roles `Contributor` and `Storage Blob Data Contributor` must be added to the Service Principal `HPC Cache Resource Provider` for the Storage Account. See official docs for more information.
func (o FileSystemHsmSettingOutput) ImportPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileSystemHsmSetting) *string { return v.ImportPrefix }).(pulumi.StringPtrOutput)
}

// The resource ID of the storage container that is used for logging events and errors. Changing this forces a new resource to be created.
func (o FileSystemHsmSettingOutput) LoggingContainerId() pulumi.StringOutput {
	return o.ApplyT(func(v FileSystemHsmSetting) string { return v.LoggingContainerId }).(pulumi.StringOutput)
}

type FileSystemHsmSettingPtrOutput struct{ *pulumi.OutputState }

func (FileSystemHsmSettingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystemHsmSetting)(nil)).Elem()
}

func (o FileSystemHsmSettingPtrOutput) ToFileSystemHsmSettingPtrOutput() FileSystemHsmSettingPtrOutput {
	return o
}

func (o FileSystemHsmSettingPtrOutput) ToFileSystemHsmSettingPtrOutputWithContext(ctx context.Context) FileSystemHsmSettingPtrOutput {
	return o
}

func (o FileSystemHsmSettingPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FileSystemHsmSetting] {
	return pulumix.Output[*FileSystemHsmSetting]{
		OutputState: o.OutputState,
	}
}

func (o FileSystemHsmSettingPtrOutput) Elem() FileSystemHsmSettingOutput {
	return o.ApplyT(func(v *FileSystemHsmSetting) FileSystemHsmSetting {
		if v != nil {
			return *v
		}
		var ret FileSystemHsmSetting
		return ret
	}).(FileSystemHsmSettingOutput)
}

// The resource ID of the storage container that is used for hydrating the namespace and archiving from the namespace. Changing this forces a new resource to be created.
func (o FileSystemHsmSettingPtrOutput) ContainerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystemHsmSetting) *string {
		if v == nil {
			return nil
		}
		return &v.ContainerId
	}).(pulumi.StringPtrOutput)
}

// The import prefix for the Azure Managed Lustre File System. Only blobs in the non-logging container that start with this path/prefix get hydrated into the cluster namespace. Changing this forces a new resource to be created.
//
// > **NOTE:** The roles `Contributor` and `Storage Blob Data Contributor` must be added to the Service Principal `HPC Cache Resource Provider` for the Storage Account. See official docs for more information.
func (o FileSystemHsmSettingPtrOutput) ImportPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystemHsmSetting) *string {
		if v == nil {
			return nil
		}
		return v.ImportPrefix
	}).(pulumi.StringPtrOutput)
}

// The resource ID of the storage container that is used for logging events and errors. Changing this forces a new resource to be created.
func (o FileSystemHsmSettingPtrOutput) LoggingContainerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystemHsmSetting) *string {
		if v == nil {
			return nil
		}
		return &v.LoggingContainerId
	}).(pulumi.StringPtrOutput)
}

type FileSystemIdentity struct {
	// A list of User Assigned Managed Identity IDs to be assigned to this Azure Managed Lustre File System. Changing this forces a new resource to be created.
	IdentityIds []string `pulumi:"identityIds"`
	// The type of Managed Service Identity that should be configured on this Azure Managed Lustre File System. Only possible value is `UserAssigned`. Changing this forces a new resource to be created.
	Type string `pulumi:"type"`
}

// FileSystemIdentityInput is an input type that accepts FileSystemIdentityArgs and FileSystemIdentityOutput values.
// You can construct a concrete instance of `FileSystemIdentityInput` via:
//
//	FileSystemIdentityArgs{...}
type FileSystemIdentityInput interface {
	pulumi.Input

	ToFileSystemIdentityOutput() FileSystemIdentityOutput
	ToFileSystemIdentityOutputWithContext(context.Context) FileSystemIdentityOutput
}

type FileSystemIdentityArgs struct {
	// A list of User Assigned Managed Identity IDs to be assigned to this Azure Managed Lustre File System. Changing this forces a new resource to be created.
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	// The type of Managed Service Identity that should be configured on this Azure Managed Lustre File System. Only possible value is `UserAssigned`. Changing this forces a new resource to be created.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FileSystemIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemIdentity)(nil)).Elem()
}

func (i FileSystemIdentityArgs) ToFileSystemIdentityOutput() FileSystemIdentityOutput {
	return i.ToFileSystemIdentityOutputWithContext(context.Background())
}

func (i FileSystemIdentityArgs) ToFileSystemIdentityOutputWithContext(ctx context.Context) FileSystemIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemIdentityOutput)
}

func (i FileSystemIdentityArgs) ToOutput(ctx context.Context) pulumix.Output[FileSystemIdentity] {
	return pulumix.Output[FileSystemIdentity]{
		OutputState: i.ToFileSystemIdentityOutputWithContext(ctx).OutputState,
	}
}

func (i FileSystemIdentityArgs) ToFileSystemIdentityPtrOutput() FileSystemIdentityPtrOutput {
	return i.ToFileSystemIdentityPtrOutputWithContext(context.Background())
}

func (i FileSystemIdentityArgs) ToFileSystemIdentityPtrOutputWithContext(ctx context.Context) FileSystemIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemIdentityOutput).ToFileSystemIdentityPtrOutputWithContext(ctx)
}

// FileSystemIdentityPtrInput is an input type that accepts FileSystemIdentityArgs, FileSystemIdentityPtr and FileSystemIdentityPtrOutput values.
// You can construct a concrete instance of `FileSystemIdentityPtrInput` via:
//
//	        FileSystemIdentityArgs{...}
//
//	or:
//
//	        nil
type FileSystemIdentityPtrInput interface {
	pulumi.Input

	ToFileSystemIdentityPtrOutput() FileSystemIdentityPtrOutput
	ToFileSystemIdentityPtrOutputWithContext(context.Context) FileSystemIdentityPtrOutput
}

type fileSystemIdentityPtrType FileSystemIdentityArgs

func FileSystemIdentityPtr(v *FileSystemIdentityArgs) FileSystemIdentityPtrInput {
	return (*fileSystemIdentityPtrType)(v)
}

func (*fileSystemIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystemIdentity)(nil)).Elem()
}

func (i *fileSystemIdentityPtrType) ToFileSystemIdentityPtrOutput() FileSystemIdentityPtrOutput {
	return i.ToFileSystemIdentityPtrOutputWithContext(context.Background())
}

func (i *fileSystemIdentityPtrType) ToFileSystemIdentityPtrOutputWithContext(ctx context.Context) FileSystemIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemIdentityPtrOutput)
}

func (i *fileSystemIdentityPtrType) ToOutput(ctx context.Context) pulumix.Output[*FileSystemIdentity] {
	return pulumix.Output[*FileSystemIdentity]{
		OutputState: i.ToFileSystemIdentityPtrOutputWithContext(ctx).OutputState,
	}
}

type FileSystemIdentityOutput struct{ *pulumi.OutputState }

func (FileSystemIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemIdentity)(nil)).Elem()
}

func (o FileSystemIdentityOutput) ToFileSystemIdentityOutput() FileSystemIdentityOutput {
	return o
}

func (o FileSystemIdentityOutput) ToFileSystemIdentityOutputWithContext(ctx context.Context) FileSystemIdentityOutput {
	return o
}

func (o FileSystemIdentityOutput) ToFileSystemIdentityPtrOutput() FileSystemIdentityPtrOutput {
	return o.ToFileSystemIdentityPtrOutputWithContext(context.Background())
}

func (o FileSystemIdentityOutput) ToFileSystemIdentityPtrOutputWithContext(ctx context.Context) FileSystemIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FileSystemIdentity) *FileSystemIdentity {
		return &v
	}).(FileSystemIdentityPtrOutput)
}

func (o FileSystemIdentityOutput) ToOutput(ctx context.Context) pulumix.Output[FileSystemIdentity] {
	return pulumix.Output[FileSystemIdentity]{
		OutputState: o.OutputState,
	}
}

// A list of User Assigned Managed Identity IDs to be assigned to this Azure Managed Lustre File System. Changing this forces a new resource to be created.
func (o FileSystemIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FileSystemIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

// The type of Managed Service Identity that should be configured on this Azure Managed Lustre File System. Only possible value is `UserAssigned`. Changing this forces a new resource to be created.
func (o FileSystemIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FileSystemIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type FileSystemIdentityPtrOutput struct{ *pulumi.OutputState }

func (FileSystemIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystemIdentity)(nil)).Elem()
}

func (o FileSystemIdentityPtrOutput) ToFileSystemIdentityPtrOutput() FileSystemIdentityPtrOutput {
	return o
}

func (o FileSystemIdentityPtrOutput) ToFileSystemIdentityPtrOutputWithContext(ctx context.Context) FileSystemIdentityPtrOutput {
	return o
}

func (o FileSystemIdentityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FileSystemIdentity] {
	return pulumix.Output[*FileSystemIdentity]{
		OutputState: o.OutputState,
	}
}

func (o FileSystemIdentityPtrOutput) Elem() FileSystemIdentityOutput {
	return o.ApplyT(func(v *FileSystemIdentity) FileSystemIdentity {
		if v != nil {
			return *v
		}
		var ret FileSystemIdentity
		return ret
	}).(FileSystemIdentityOutput)
}

// A list of User Assigned Managed Identity IDs to be assigned to this Azure Managed Lustre File System. Changing this forces a new resource to be created.
func (o FileSystemIdentityPtrOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FileSystemIdentity) []string {
		if v == nil {
			return nil
		}
		return v.IdentityIds
	}).(pulumi.StringArrayOutput)
}

// The type of Managed Service Identity that should be configured on this Azure Managed Lustre File System. Only possible value is `UserAssigned`. Changing this forces a new resource to be created.
func (o FileSystemIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystemIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type FileSystemMaintenanceWindow struct {
	// The day of the week on which the maintenance window will occur. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` and `Saturday`.
	DayOfWeek string `pulumi:"dayOfWeek"`
	// The time of day (in UTC) to start the maintenance window.
	TimeOfDayInUtc string `pulumi:"timeOfDayInUtc"`
}

// FileSystemMaintenanceWindowInput is an input type that accepts FileSystemMaintenanceWindowArgs and FileSystemMaintenanceWindowOutput values.
// You can construct a concrete instance of `FileSystemMaintenanceWindowInput` via:
//
//	FileSystemMaintenanceWindowArgs{...}
type FileSystemMaintenanceWindowInput interface {
	pulumi.Input

	ToFileSystemMaintenanceWindowOutput() FileSystemMaintenanceWindowOutput
	ToFileSystemMaintenanceWindowOutputWithContext(context.Context) FileSystemMaintenanceWindowOutput
}

type FileSystemMaintenanceWindowArgs struct {
	// The day of the week on which the maintenance window will occur. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` and `Saturday`.
	DayOfWeek pulumi.StringInput `pulumi:"dayOfWeek"`
	// The time of day (in UTC) to start the maintenance window.
	TimeOfDayInUtc pulumi.StringInput `pulumi:"timeOfDayInUtc"`
}

func (FileSystemMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemMaintenanceWindow)(nil)).Elem()
}

func (i FileSystemMaintenanceWindowArgs) ToFileSystemMaintenanceWindowOutput() FileSystemMaintenanceWindowOutput {
	return i.ToFileSystemMaintenanceWindowOutputWithContext(context.Background())
}

func (i FileSystemMaintenanceWindowArgs) ToFileSystemMaintenanceWindowOutputWithContext(ctx context.Context) FileSystemMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemMaintenanceWindowOutput)
}

func (i FileSystemMaintenanceWindowArgs) ToOutput(ctx context.Context) pulumix.Output[FileSystemMaintenanceWindow] {
	return pulumix.Output[FileSystemMaintenanceWindow]{
		OutputState: i.ToFileSystemMaintenanceWindowOutputWithContext(ctx).OutputState,
	}
}

func (i FileSystemMaintenanceWindowArgs) ToFileSystemMaintenanceWindowPtrOutput() FileSystemMaintenanceWindowPtrOutput {
	return i.ToFileSystemMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i FileSystemMaintenanceWindowArgs) ToFileSystemMaintenanceWindowPtrOutputWithContext(ctx context.Context) FileSystemMaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemMaintenanceWindowOutput).ToFileSystemMaintenanceWindowPtrOutputWithContext(ctx)
}

// FileSystemMaintenanceWindowPtrInput is an input type that accepts FileSystemMaintenanceWindowArgs, FileSystemMaintenanceWindowPtr and FileSystemMaintenanceWindowPtrOutput values.
// You can construct a concrete instance of `FileSystemMaintenanceWindowPtrInput` via:
//
//	        FileSystemMaintenanceWindowArgs{...}
//
//	or:
//
//	        nil
type FileSystemMaintenanceWindowPtrInput interface {
	pulumi.Input

	ToFileSystemMaintenanceWindowPtrOutput() FileSystemMaintenanceWindowPtrOutput
	ToFileSystemMaintenanceWindowPtrOutputWithContext(context.Context) FileSystemMaintenanceWindowPtrOutput
}

type fileSystemMaintenanceWindowPtrType FileSystemMaintenanceWindowArgs

func FileSystemMaintenanceWindowPtr(v *FileSystemMaintenanceWindowArgs) FileSystemMaintenanceWindowPtrInput {
	return (*fileSystemMaintenanceWindowPtrType)(v)
}

func (*fileSystemMaintenanceWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystemMaintenanceWindow)(nil)).Elem()
}

func (i *fileSystemMaintenanceWindowPtrType) ToFileSystemMaintenanceWindowPtrOutput() FileSystemMaintenanceWindowPtrOutput {
	return i.ToFileSystemMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i *fileSystemMaintenanceWindowPtrType) ToFileSystemMaintenanceWindowPtrOutputWithContext(ctx context.Context) FileSystemMaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemMaintenanceWindowPtrOutput)
}

func (i *fileSystemMaintenanceWindowPtrType) ToOutput(ctx context.Context) pulumix.Output[*FileSystemMaintenanceWindow] {
	return pulumix.Output[*FileSystemMaintenanceWindow]{
		OutputState: i.ToFileSystemMaintenanceWindowPtrOutputWithContext(ctx).OutputState,
	}
}

type FileSystemMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (FileSystemMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemMaintenanceWindow)(nil)).Elem()
}

func (o FileSystemMaintenanceWindowOutput) ToFileSystemMaintenanceWindowOutput() FileSystemMaintenanceWindowOutput {
	return o
}

func (o FileSystemMaintenanceWindowOutput) ToFileSystemMaintenanceWindowOutputWithContext(ctx context.Context) FileSystemMaintenanceWindowOutput {
	return o
}

func (o FileSystemMaintenanceWindowOutput) ToFileSystemMaintenanceWindowPtrOutput() FileSystemMaintenanceWindowPtrOutput {
	return o.ToFileSystemMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (o FileSystemMaintenanceWindowOutput) ToFileSystemMaintenanceWindowPtrOutputWithContext(ctx context.Context) FileSystemMaintenanceWindowPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FileSystemMaintenanceWindow) *FileSystemMaintenanceWindow {
		return &v
	}).(FileSystemMaintenanceWindowPtrOutput)
}

func (o FileSystemMaintenanceWindowOutput) ToOutput(ctx context.Context) pulumix.Output[FileSystemMaintenanceWindow] {
	return pulumix.Output[FileSystemMaintenanceWindow]{
		OutputState: o.OutputState,
	}
}

// The day of the week on which the maintenance window will occur. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` and `Saturday`.
func (o FileSystemMaintenanceWindowOutput) DayOfWeek() pulumi.StringOutput {
	return o.ApplyT(func(v FileSystemMaintenanceWindow) string { return v.DayOfWeek }).(pulumi.StringOutput)
}

// The time of day (in UTC) to start the maintenance window.
func (o FileSystemMaintenanceWindowOutput) TimeOfDayInUtc() pulumi.StringOutput {
	return o.ApplyT(func(v FileSystemMaintenanceWindow) string { return v.TimeOfDayInUtc }).(pulumi.StringOutput)
}

type FileSystemMaintenanceWindowPtrOutput struct{ *pulumi.OutputState }

func (FileSystemMaintenanceWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystemMaintenanceWindow)(nil)).Elem()
}

func (o FileSystemMaintenanceWindowPtrOutput) ToFileSystemMaintenanceWindowPtrOutput() FileSystemMaintenanceWindowPtrOutput {
	return o
}

func (o FileSystemMaintenanceWindowPtrOutput) ToFileSystemMaintenanceWindowPtrOutputWithContext(ctx context.Context) FileSystemMaintenanceWindowPtrOutput {
	return o
}

func (o FileSystemMaintenanceWindowPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FileSystemMaintenanceWindow] {
	return pulumix.Output[*FileSystemMaintenanceWindow]{
		OutputState: o.OutputState,
	}
}

func (o FileSystemMaintenanceWindowPtrOutput) Elem() FileSystemMaintenanceWindowOutput {
	return o.ApplyT(func(v *FileSystemMaintenanceWindow) FileSystemMaintenanceWindow {
		if v != nil {
			return *v
		}
		var ret FileSystemMaintenanceWindow
		return ret
	}).(FileSystemMaintenanceWindowOutput)
}

// The day of the week on which the maintenance window will occur. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` and `Saturday`.
func (o FileSystemMaintenanceWindowPtrOutput) DayOfWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystemMaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return &v.DayOfWeek
	}).(pulumi.StringPtrOutput)
}

// The time of day (in UTC) to start the maintenance window.
func (o FileSystemMaintenanceWindowPtrOutput) TimeOfDayInUtc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystemMaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return &v.TimeOfDayInUtc
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemEncryptionKeyInput)(nil)).Elem(), FileSystemEncryptionKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemEncryptionKeyPtrInput)(nil)).Elem(), FileSystemEncryptionKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemHsmSettingInput)(nil)).Elem(), FileSystemHsmSettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemHsmSettingPtrInput)(nil)).Elem(), FileSystemHsmSettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemIdentityInput)(nil)).Elem(), FileSystemIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemIdentityPtrInput)(nil)).Elem(), FileSystemIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemMaintenanceWindowInput)(nil)).Elem(), FileSystemMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemMaintenanceWindowPtrInput)(nil)).Elem(), FileSystemMaintenanceWindowArgs{})
	pulumi.RegisterOutputType(FileSystemEncryptionKeyOutput{})
	pulumi.RegisterOutputType(FileSystemEncryptionKeyPtrOutput{})
	pulumi.RegisterOutputType(FileSystemHsmSettingOutput{})
	pulumi.RegisterOutputType(FileSystemHsmSettingPtrOutput{})
	pulumi.RegisterOutputType(FileSystemIdentityOutput{})
	pulumi.RegisterOutputType(FileSystemIdentityPtrOutput{})
	pulumi.RegisterOutputType(FileSystemMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(FileSystemMaintenanceWindowPtrOutput{})
}
