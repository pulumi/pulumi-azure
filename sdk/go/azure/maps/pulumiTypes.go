// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package maps

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type AccountCors struct {
	// A list of origins that should be allowed to make cross-origin calls.
	AllowedOrigins []string `pulumi:"allowedOrigins"`
}

// AccountCorsInput is an input type that accepts AccountCorsArgs and AccountCorsOutput values.
// You can construct a concrete instance of `AccountCorsInput` via:
//
//	AccountCorsArgs{...}
type AccountCorsInput interface {
	pulumi.Input

	ToAccountCorsOutput() AccountCorsOutput
	ToAccountCorsOutputWithContext(context.Context) AccountCorsOutput
}

type AccountCorsArgs struct {
	// A list of origins that should be allowed to make cross-origin calls.
	AllowedOrigins pulumi.StringArrayInput `pulumi:"allowedOrigins"`
}

func (AccountCorsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountCors)(nil)).Elem()
}

func (i AccountCorsArgs) ToAccountCorsOutput() AccountCorsOutput {
	return i.ToAccountCorsOutputWithContext(context.Background())
}

func (i AccountCorsArgs) ToAccountCorsOutputWithContext(ctx context.Context) AccountCorsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountCorsOutput)
}

func (i AccountCorsArgs) ToAccountCorsPtrOutput() AccountCorsPtrOutput {
	return i.ToAccountCorsPtrOutputWithContext(context.Background())
}

func (i AccountCorsArgs) ToAccountCorsPtrOutputWithContext(ctx context.Context) AccountCorsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountCorsOutput).ToAccountCorsPtrOutputWithContext(ctx)
}

// AccountCorsPtrInput is an input type that accepts AccountCorsArgs, AccountCorsPtr and AccountCorsPtrOutput values.
// You can construct a concrete instance of `AccountCorsPtrInput` via:
//
//	        AccountCorsArgs{...}
//
//	or:
//
//	        nil
type AccountCorsPtrInput interface {
	pulumi.Input

	ToAccountCorsPtrOutput() AccountCorsPtrOutput
	ToAccountCorsPtrOutputWithContext(context.Context) AccountCorsPtrOutput
}

type accountCorsPtrType AccountCorsArgs

func AccountCorsPtr(v *AccountCorsArgs) AccountCorsPtrInput {
	return (*accountCorsPtrType)(v)
}

func (*accountCorsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountCors)(nil)).Elem()
}

func (i *accountCorsPtrType) ToAccountCorsPtrOutput() AccountCorsPtrOutput {
	return i.ToAccountCorsPtrOutputWithContext(context.Background())
}

func (i *accountCorsPtrType) ToAccountCorsPtrOutputWithContext(ctx context.Context) AccountCorsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountCorsPtrOutput)
}

type AccountCorsOutput struct{ *pulumi.OutputState }

func (AccountCorsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountCors)(nil)).Elem()
}

func (o AccountCorsOutput) ToAccountCorsOutput() AccountCorsOutput {
	return o
}

func (o AccountCorsOutput) ToAccountCorsOutputWithContext(ctx context.Context) AccountCorsOutput {
	return o
}

func (o AccountCorsOutput) ToAccountCorsPtrOutput() AccountCorsPtrOutput {
	return o.ToAccountCorsPtrOutputWithContext(context.Background())
}

func (o AccountCorsOutput) ToAccountCorsPtrOutputWithContext(ctx context.Context) AccountCorsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccountCors) *AccountCors {
		return &v
	}).(AccountCorsPtrOutput)
}

// A list of origins that should be allowed to make cross-origin calls.
func (o AccountCorsOutput) AllowedOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccountCors) []string { return v.AllowedOrigins }).(pulumi.StringArrayOutput)
}

type AccountCorsPtrOutput struct{ *pulumi.OutputState }

func (AccountCorsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountCors)(nil)).Elem()
}

func (o AccountCorsPtrOutput) ToAccountCorsPtrOutput() AccountCorsPtrOutput {
	return o
}

func (o AccountCorsPtrOutput) ToAccountCorsPtrOutputWithContext(ctx context.Context) AccountCorsPtrOutput {
	return o
}

func (o AccountCorsPtrOutput) Elem() AccountCorsOutput {
	return o.ApplyT(func(v *AccountCors) AccountCors {
		if v != nil {
			return *v
		}
		var ret AccountCors
		return ret
	}).(AccountCorsOutput)
}

// A list of origins that should be allowed to make cross-origin calls.
func (o AccountCorsPtrOutput) AllowedOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AccountCors) []string {
		if v == nil {
			return nil
		}
		return v.AllowedOrigins
	}).(pulumi.StringArrayOutput)
}

type AccountDataStore struct {
	// The ID of the Storage Account that should be linked to this Azure Maps Account.
	StorageAccountId *string `pulumi:"storageAccountId"`
	// The name given to the linked Storage Account.
	UniqueName string `pulumi:"uniqueName"`
}

// AccountDataStoreInput is an input type that accepts AccountDataStoreArgs and AccountDataStoreOutput values.
// You can construct a concrete instance of `AccountDataStoreInput` via:
//
//	AccountDataStoreArgs{...}
type AccountDataStoreInput interface {
	pulumi.Input

	ToAccountDataStoreOutput() AccountDataStoreOutput
	ToAccountDataStoreOutputWithContext(context.Context) AccountDataStoreOutput
}

type AccountDataStoreArgs struct {
	// The ID of the Storage Account that should be linked to this Azure Maps Account.
	StorageAccountId pulumi.StringPtrInput `pulumi:"storageAccountId"`
	// The name given to the linked Storage Account.
	UniqueName pulumi.StringInput `pulumi:"uniqueName"`
}

func (AccountDataStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountDataStore)(nil)).Elem()
}

func (i AccountDataStoreArgs) ToAccountDataStoreOutput() AccountDataStoreOutput {
	return i.ToAccountDataStoreOutputWithContext(context.Background())
}

func (i AccountDataStoreArgs) ToAccountDataStoreOutputWithContext(ctx context.Context) AccountDataStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountDataStoreOutput)
}

// AccountDataStoreArrayInput is an input type that accepts AccountDataStoreArray and AccountDataStoreArrayOutput values.
// You can construct a concrete instance of `AccountDataStoreArrayInput` via:
//
//	AccountDataStoreArray{ AccountDataStoreArgs{...} }
type AccountDataStoreArrayInput interface {
	pulumi.Input

	ToAccountDataStoreArrayOutput() AccountDataStoreArrayOutput
	ToAccountDataStoreArrayOutputWithContext(context.Context) AccountDataStoreArrayOutput
}

type AccountDataStoreArray []AccountDataStoreInput

func (AccountDataStoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccountDataStore)(nil)).Elem()
}

func (i AccountDataStoreArray) ToAccountDataStoreArrayOutput() AccountDataStoreArrayOutput {
	return i.ToAccountDataStoreArrayOutputWithContext(context.Background())
}

func (i AccountDataStoreArray) ToAccountDataStoreArrayOutputWithContext(ctx context.Context) AccountDataStoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountDataStoreArrayOutput)
}

type AccountDataStoreOutput struct{ *pulumi.OutputState }

func (AccountDataStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountDataStore)(nil)).Elem()
}

func (o AccountDataStoreOutput) ToAccountDataStoreOutput() AccountDataStoreOutput {
	return o
}

func (o AccountDataStoreOutput) ToAccountDataStoreOutputWithContext(ctx context.Context) AccountDataStoreOutput {
	return o
}

// The ID of the Storage Account that should be linked to this Azure Maps Account.
func (o AccountDataStoreOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountDataStore) *string { return v.StorageAccountId }).(pulumi.StringPtrOutput)
}

// The name given to the linked Storage Account.
func (o AccountDataStoreOutput) UniqueName() pulumi.StringOutput {
	return o.ApplyT(func(v AccountDataStore) string { return v.UniqueName }).(pulumi.StringOutput)
}

type AccountDataStoreArrayOutput struct{ *pulumi.OutputState }

func (AccountDataStoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccountDataStore)(nil)).Elem()
}

func (o AccountDataStoreArrayOutput) ToAccountDataStoreArrayOutput() AccountDataStoreArrayOutput {
	return o
}

func (o AccountDataStoreArrayOutput) ToAccountDataStoreArrayOutputWithContext(ctx context.Context) AccountDataStoreArrayOutput {
	return o
}

func (o AccountDataStoreArrayOutput) Index(i pulumi.IntInput) AccountDataStoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccountDataStore {
		return vs[0].([]AccountDataStore)[vs[1].(int)]
	}).(AccountDataStoreOutput)
}

type AccountIdentity struct {
	// A list of User Assigned Managed Identity IDs to be assigned to this Azure Maps Account.
	//
	// > **Note:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
	IdentityIds []string `pulumi:"identityIds"`
	// The Principal ID associated with this Managed Service Identity.
	PrincipalId *string `pulumi:"principalId"`
	// The Tenant ID associated with this Managed Service Identity.
	TenantId *string `pulumi:"tenantId"`
	// Specifies the type of Managed Service Identity that should be configured on this Azure Maps Account. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both).
	Type string `pulumi:"type"`
}

// AccountIdentityInput is an input type that accepts AccountIdentityArgs and AccountIdentityOutput values.
// You can construct a concrete instance of `AccountIdentityInput` via:
//
//	AccountIdentityArgs{...}
type AccountIdentityInput interface {
	pulumi.Input

	ToAccountIdentityOutput() AccountIdentityOutput
	ToAccountIdentityOutputWithContext(context.Context) AccountIdentityOutput
}

type AccountIdentityArgs struct {
	// A list of User Assigned Managed Identity IDs to be assigned to this Azure Maps Account.
	//
	// > **Note:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	// The Principal ID associated with this Managed Service Identity.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The Tenant ID associated with this Managed Service Identity.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// Specifies the type of Managed Service Identity that should be configured on this Azure Maps Account. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both).
	Type pulumi.StringInput `pulumi:"type"`
}

func (AccountIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountIdentity)(nil)).Elem()
}

func (i AccountIdentityArgs) ToAccountIdentityOutput() AccountIdentityOutput {
	return i.ToAccountIdentityOutputWithContext(context.Background())
}

func (i AccountIdentityArgs) ToAccountIdentityOutputWithContext(ctx context.Context) AccountIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountIdentityOutput)
}

func (i AccountIdentityArgs) ToAccountIdentityPtrOutput() AccountIdentityPtrOutput {
	return i.ToAccountIdentityPtrOutputWithContext(context.Background())
}

func (i AccountIdentityArgs) ToAccountIdentityPtrOutputWithContext(ctx context.Context) AccountIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountIdentityOutput).ToAccountIdentityPtrOutputWithContext(ctx)
}

// AccountIdentityPtrInput is an input type that accepts AccountIdentityArgs, AccountIdentityPtr and AccountIdentityPtrOutput values.
// You can construct a concrete instance of `AccountIdentityPtrInput` via:
//
//	        AccountIdentityArgs{...}
//
//	or:
//
//	        nil
type AccountIdentityPtrInput interface {
	pulumi.Input

	ToAccountIdentityPtrOutput() AccountIdentityPtrOutput
	ToAccountIdentityPtrOutputWithContext(context.Context) AccountIdentityPtrOutput
}

type accountIdentityPtrType AccountIdentityArgs

func AccountIdentityPtr(v *AccountIdentityArgs) AccountIdentityPtrInput {
	return (*accountIdentityPtrType)(v)
}

func (*accountIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountIdentity)(nil)).Elem()
}

func (i *accountIdentityPtrType) ToAccountIdentityPtrOutput() AccountIdentityPtrOutput {
	return i.ToAccountIdentityPtrOutputWithContext(context.Background())
}

func (i *accountIdentityPtrType) ToAccountIdentityPtrOutputWithContext(ctx context.Context) AccountIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountIdentityPtrOutput)
}

type AccountIdentityOutput struct{ *pulumi.OutputState }

func (AccountIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountIdentity)(nil)).Elem()
}

func (o AccountIdentityOutput) ToAccountIdentityOutput() AccountIdentityOutput {
	return o
}

func (o AccountIdentityOutput) ToAccountIdentityOutputWithContext(ctx context.Context) AccountIdentityOutput {
	return o
}

func (o AccountIdentityOutput) ToAccountIdentityPtrOutput() AccountIdentityPtrOutput {
	return o.ToAccountIdentityPtrOutputWithContext(context.Background())
}

func (o AccountIdentityOutput) ToAccountIdentityPtrOutputWithContext(ctx context.Context) AccountIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccountIdentity) *AccountIdentity {
		return &v
	}).(AccountIdentityPtrOutput)
}

// A list of User Assigned Managed Identity IDs to be assigned to this Azure Maps Account.
//
// > **Note:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
func (o AccountIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccountIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

// The Principal ID associated with this Managed Service Identity.
func (o AccountIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The Tenant ID associated with this Managed Service Identity.
func (o AccountIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this Azure Maps Account. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both).
func (o AccountIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AccountIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type AccountIdentityPtrOutput struct{ *pulumi.OutputState }

func (AccountIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountIdentity)(nil)).Elem()
}

func (o AccountIdentityPtrOutput) ToAccountIdentityPtrOutput() AccountIdentityPtrOutput {
	return o
}

func (o AccountIdentityPtrOutput) ToAccountIdentityPtrOutputWithContext(ctx context.Context) AccountIdentityPtrOutput {
	return o
}

func (o AccountIdentityPtrOutput) Elem() AccountIdentityOutput {
	return o.ApplyT(func(v *AccountIdentity) AccountIdentity {
		if v != nil {
			return *v
		}
		var ret AccountIdentity
		return ret
	}).(AccountIdentityOutput)
}

// A list of User Assigned Managed Identity IDs to be assigned to this Azure Maps Account.
//
// > **Note:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
func (o AccountIdentityPtrOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AccountIdentity) []string {
		if v == nil {
			return nil
		}
		return v.IdentityIds
	}).(pulumi.StringArrayOutput)
}

// The Principal ID associated with this Managed Service Identity.
func (o AccountIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The Tenant ID associated with this Managed Service Identity.
func (o AccountIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this Azure Maps Account. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both).
func (o AccountIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountCorsInput)(nil)).Elem(), AccountCorsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountCorsPtrInput)(nil)).Elem(), AccountCorsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountDataStoreInput)(nil)).Elem(), AccountDataStoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountDataStoreArrayInput)(nil)).Elem(), AccountDataStoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountIdentityInput)(nil)).Elem(), AccountIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountIdentityPtrInput)(nil)).Elem(), AccountIdentityArgs{})
	pulumi.RegisterOutputType(AccountCorsOutput{})
	pulumi.RegisterOutputType(AccountCorsPtrOutput{})
	pulumi.RegisterOutputType(AccountDataStoreOutput{})
	pulumi.RegisterOutputType(AccountDataStoreArrayOutput{})
	pulumi.RegisterOutputType(AccountIdentityOutput{})
	pulumi.RegisterOutputType(AccountIdentityPtrOutput{})
}
