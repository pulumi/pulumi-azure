// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Route Map.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualWan, err := network.NewVirtualWan(ctx, "exampleVirtualWan", &network.VirtualWanArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualHub, err := network.NewVirtualHub(ctx, "exampleVirtualHub", &network.VirtualHubArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				VirtualWanId:      exampleVirtualWan.ID(),
//				AddressPrefix:     pulumi.String("10.0.1.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = network.NewRouteMap(ctx, "exampleRouteMap", &network.RouteMapArgs{
//				VirtualHubId: exampleVirtualHub.ID(),
//				Rules: network.RouteMapRuleArray{
//					&network.RouteMapRuleArgs{
//						Name:              pulumi.String("rule1"),
//						NextStepIfMatched: pulumi.String("Continue"),
//						Actions: network.RouteMapRuleActionArray{
//							&network.RouteMapRuleActionArgs{
//								Type: pulumi.String("Add"),
//								Parameters: network.RouteMapRuleActionParameterArray{
//									&network.RouteMapRuleActionParameterArgs{
//										AsPaths: pulumi.StringArray{
//											pulumi.String("22334"),
//										},
//									},
//								},
//							},
//						},
//						MatchCriterions: network.RouteMapRuleMatchCriterionArray{
//							&network.RouteMapRuleMatchCriterionArgs{
//								MatchCondition: pulumi.String("Contains"),
//								RoutePrefixes: pulumi.StringArray{
//									pulumi.String("10.0.0.0/8"),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Route Maps can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:network/routeMap:RouteMap example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Network/virtualHubs/virtualHub1/routeMaps/routeMap1
//
// ```
type RouteMapResource struct {
	pulumi.CustomResourceState

	// The name which should be used for this Route Map. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A `rule` block as defined below.
	Rules RouteMapRuleArrayOutput `pulumi:"rules"`
	// The resource ID of the Virtual Hub. Changing this forces a new resource to be created.
	VirtualHubId pulumi.StringOutput `pulumi:"virtualHubId"`
}

// NewRouteMapResource registers a new resource with the given unique name, arguments, and options.
func NewRouteMapResource(ctx *pulumi.Context,
	name string, args *RouteMapResourceArgs, opts ...pulumi.ResourceOption) (*RouteMapResource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VirtualHubId == nil {
		return nil, errors.New("invalid value for required argument 'VirtualHubId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouteMapResource
	err := ctx.RegisterResource("azure:network/routeMap:RouteMap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteMapResource gets an existing RouteMapResource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteMapResource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteMapResourceState, opts ...pulumi.ResourceOption) (*RouteMapResource, error) {
	var resource RouteMapResource
	err := ctx.ReadResource("azure:network/routeMap:RouteMap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteMapResource resources.
type routeMapResourceState struct {
	// The name which should be used for this Route Map. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A `rule` block as defined below.
	Rules []RouteMapRule `pulumi:"rules"`
	// The resource ID of the Virtual Hub. Changing this forces a new resource to be created.
	VirtualHubId *string `pulumi:"virtualHubId"`
}

type RouteMapResourceState struct {
	// The name which should be used for this Route Map. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A `rule` block as defined below.
	Rules RouteMapRuleArrayInput
	// The resource ID of the Virtual Hub. Changing this forces a new resource to be created.
	VirtualHubId pulumi.StringPtrInput
}

func (RouteMapResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeMapResourceState)(nil)).Elem()
}

type routeMapResourceArgs struct {
	// The name which should be used for this Route Map. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A `rule` block as defined below.
	Rules []RouteMapRule `pulumi:"rules"`
	// The resource ID of the Virtual Hub. Changing this forces a new resource to be created.
	VirtualHubId string `pulumi:"virtualHubId"`
}

// The set of arguments for constructing a RouteMapResource resource.
type RouteMapResourceArgs struct {
	// The name which should be used for this Route Map. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A `rule` block as defined below.
	Rules RouteMapRuleArrayInput
	// The resource ID of the Virtual Hub. Changing this forces a new resource to be created.
	VirtualHubId pulumi.StringInput
}

func (RouteMapResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeMapResourceArgs)(nil)).Elem()
}

type RouteMapResourceInput interface {
	pulumi.Input

	ToRouteMapResourceOutput() RouteMapResourceOutput
	ToRouteMapResourceOutputWithContext(ctx context.Context) RouteMapResourceOutput
}

func (*RouteMapResource) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteMapResource)(nil)).Elem()
}

func (i *RouteMapResource) ToRouteMapResourceOutput() RouteMapResourceOutput {
	return i.ToRouteMapResourceOutputWithContext(context.Background())
}

func (i *RouteMapResource) ToRouteMapResourceOutputWithContext(ctx context.Context) RouteMapResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteMapResourceOutput)
}

// RouteMapResourceArrayInput is an input type that accepts RouteMapResourceArray and RouteMapResourceArrayOutput values.
// You can construct a concrete instance of `RouteMapResourceArrayInput` via:
//
//	RouteMapResourceArray{ RouteMapResourceArgs{...} }
type RouteMapResourceArrayInput interface {
	pulumi.Input

	ToRouteMapResourceArrayOutput() RouteMapResourceArrayOutput
	ToRouteMapResourceArrayOutputWithContext(context.Context) RouteMapResourceArrayOutput
}

type RouteMapResourceArray []RouteMapResourceInput

func (RouteMapResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteMapResource)(nil)).Elem()
}

func (i RouteMapResourceArray) ToRouteMapResourceArrayOutput() RouteMapResourceArrayOutput {
	return i.ToRouteMapResourceArrayOutputWithContext(context.Background())
}

func (i RouteMapResourceArray) ToRouteMapResourceArrayOutputWithContext(ctx context.Context) RouteMapResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteMapResourceArrayOutput)
}

// RouteMapResourceMapInput is an input type that accepts RouteMapResourceMap and RouteMapResourceMapOutput values.
// You can construct a concrete instance of `RouteMapResourceMapInput` via:
//
//	RouteMapResourceMap{ "key": RouteMapResourceArgs{...} }
type RouteMapResourceMapInput interface {
	pulumi.Input

	ToRouteMapResourceMapOutput() RouteMapResourceMapOutput
	ToRouteMapResourceMapOutputWithContext(context.Context) RouteMapResourceMapOutput
}

type RouteMapResourceMap map[string]RouteMapResourceInput

func (RouteMapResourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteMapResource)(nil)).Elem()
}

func (i RouteMapResourceMap) ToRouteMapResourceMapOutput() RouteMapResourceMapOutput {
	return i.ToRouteMapResourceMapOutputWithContext(context.Background())
}

func (i RouteMapResourceMap) ToRouteMapResourceMapOutputWithContext(ctx context.Context) RouteMapResourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteMapResourceMapOutput)
}

type RouteMapResourceOutput struct{ *pulumi.OutputState }

func (RouteMapResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteMapResource)(nil)).Elem()
}

func (o RouteMapResourceOutput) ToRouteMapResourceOutput() RouteMapResourceOutput {
	return o
}

func (o RouteMapResourceOutput) ToRouteMapResourceOutputWithContext(ctx context.Context) RouteMapResourceOutput {
	return o
}

// The name which should be used for this Route Map. Changing this forces a new resource to be created.
func (o RouteMapResourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteMapResource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A `rule` block as defined below.
func (o RouteMapResourceOutput) Rules() RouteMapRuleArrayOutput {
	return o.ApplyT(func(v *RouteMapResource) RouteMapRuleArrayOutput { return v.Rules }).(RouteMapRuleArrayOutput)
}

// The resource ID of the Virtual Hub. Changing this forces a new resource to be created.
func (o RouteMapResourceOutput) VirtualHubId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteMapResource) pulumi.StringOutput { return v.VirtualHubId }).(pulumi.StringOutput)
}

type RouteMapResourceArrayOutput struct{ *pulumi.OutputState }

func (RouteMapResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteMapResource)(nil)).Elem()
}

func (o RouteMapResourceArrayOutput) ToRouteMapResourceArrayOutput() RouteMapResourceArrayOutput {
	return o
}

func (o RouteMapResourceArrayOutput) ToRouteMapResourceArrayOutputWithContext(ctx context.Context) RouteMapResourceArrayOutput {
	return o
}

func (o RouteMapResourceArrayOutput) Index(i pulumi.IntInput) RouteMapResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouteMapResource {
		return vs[0].([]*RouteMapResource)[vs[1].(int)]
	}).(RouteMapResourceOutput)
}

type RouteMapResourceMapOutput struct{ *pulumi.OutputState }

func (RouteMapResourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteMapResource)(nil)).Elem()
}

func (o RouteMapResourceMapOutput) ToRouteMapResourceMapOutput() RouteMapResourceMapOutput {
	return o
}

func (o RouteMapResourceMapOutput) ToRouteMapResourceMapOutputWithContext(ctx context.Context) RouteMapResourceMapOutput {
	return o
}

func (o RouteMapResourceMapOutput) MapIndex(k pulumi.StringInput) RouteMapResourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouteMapResource {
		return vs[0].(map[string]*RouteMapResource)[vs[1].(string)]
	}).(RouteMapResourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteMapResourceInput)(nil)).Elem(), &RouteMapResource{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteMapResourceArrayInput)(nil)).Elem(), RouteMapResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteMapResourceMapInput)(nil)).Elem(), RouteMapResourceMap{})
	pulumi.RegisterOutputType(RouteMapResourceOutput{})
	pulumi.RegisterOutputType(RouteMapResourceArrayOutput{})
	pulumi.RegisterOutputType(RouteMapResourceMapOutput{})
}
