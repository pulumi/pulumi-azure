// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a virtual network peering which allows resources to access other
// resources in the linked virtual network.
// 
// ## Note
// 
// Virtual Network peerings cannot be created, updated or deleted concurrently.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/virtual_network_peering.html.markdown.
type VirtualNetworkPeering struct {
	s *pulumi.ResourceState
}

// NewVirtualNetworkPeering registers a new resource with the given unique name, arguments, and options.
func NewVirtualNetworkPeering(ctx *pulumi.Context,
	name string, args *VirtualNetworkPeeringArgs, opts ...pulumi.ResourceOpt) (*VirtualNetworkPeering, error) {
	if args == nil || args.RemoteVirtualNetworkId == nil {
		return nil, errors.New("missing required argument 'RemoteVirtualNetworkId'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.VirtualNetworkName == nil {
		return nil, errors.New("missing required argument 'VirtualNetworkName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["allowForwardedTraffic"] = nil
		inputs["allowGatewayTransit"] = nil
		inputs["allowVirtualNetworkAccess"] = nil
		inputs["name"] = nil
		inputs["remoteVirtualNetworkId"] = nil
		inputs["resourceGroupName"] = nil
		inputs["useRemoteGateways"] = nil
		inputs["virtualNetworkName"] = nil
	} else {
		inputs["allowForwardedTraffic"] = args.AllowForwardedTraffic
		inputs["allowGatewayTransit"] = args.AllowGatewayTransit
		inputs["allowVirtualNetworkAccess"] = args.AllowVirtualNetworkAccess
		inputs["name"] = args.Name
		inputs["remoteVirtualNetworkId"] = args.RemoteVirtualNetworkId
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["useRemoteGateways"] = args.UseRemoteGateways
		inputs["virtualNetworkName"] = args.VirtualNetworkName
	}
	s, err := ctx.RegisterResource("azure:network/virtualNetworkPeering:VirtualNetworkPeering", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VirtualNetworkPeering{s: s}, nil
}

// GetVirtualNetworkPeering gets an existing VirtualNetworkPeering resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualNetworkPeering(ctx *pulumi.Context,
	name string, id pulumi.ID, state *VirtualNetworkPeeringState, opts ...pulumi.ResourceOpt) (*VirtualNetworkPeering, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["allowForwardedTraffic"] = state.AllowForwardedTraffic
		inputs["allowGatewayTransit"] = state.AllowGatewayTransit
		inputs["allowVirtualNetworkAccess"] = state.AllowVirtualNetworkAccess
		inputs["name"] = state.Name
		inputs["remoteVirtualNetworkId"] = state.RemoteVirtualNetworkId
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["useRemoteGateways"] = state.UseRemoteGateways
		inputs["virtualNetworkName"] = state.VirtualNetworkName
	}
	s, err := ctx.ReadResource("azure:network/virtualNetworkPeering:VirtualNetworkPeering", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VirtualNetworkPeering{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *VirtualNetworkPeering) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *VirtualNetworkPeering) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Controls if forwarded traffic from  VMs
// in the remote virtual network is allowed. Defaults to false.
func (r *VirtualNetworkPeering) AllowForwardedTraffic() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["allowForwardedTraffic"])
}

// Controls gatewayLinks can be used in the
// remote virtual network’s link to the local virtual network.
func (r *VirtualNetworkPeering) AllowGatewayTransit() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["allowGatewayTransit"])
}

// Controls if the VMs in the remote
// virtual network can access VMs in the local virtual network. Defaults to
// false.
func (r *VirtualNetworkPeering) AllowVirtualNetworkAccess() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["allowVirtualNetworkAccess"])
}

// The name of the virtual network peering. Changing this
// forces a new resource to be created.
func (r *VirtualNetworkPeering) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The full Azure resource ID of the
// remote virtual network.  Changing this forces a new resource to be created.
func (r *VirtualNetworkPeering) RemoteVirtualNetworkId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["remoteVirtualNetworkId"])
}

// The name of the resource group in which to
// create the virtual network. Changing this forces a new resource to be
// created.
func (r *VirtualNetworkPeering) ResourceGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// Controls if remote gateways can be used on
// the local virtual network. If the flag is set to `true`, and
// `allow_gateway_transit` on the remote peering is also `true`, virtual network will
// use gateways of remote virtual network for transit. Only one peering can
// have this flag set to `true`. This flag cannot be set if virtual network
// already has a gateway. Defaults to `false`.
func (r *VirtualNetworkPeering) UseRemoteGateways() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["useRemoteGateways"])
}

// The name of the virtual network. Changing
// this forces a new resource to be created.
func (r *VirtualNetworkPeering) VirtualNetworkName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["virtualNetworkName"])
}

// Input properties used for looking up and filtering VirtualNetworkPeering resources.
type VirtualNetworkPeeringState struct {
	// Controls if forwarded traffic from  VMs
	// in the remote virtual network is allowed. Defaults to false.
	AllowForwardedTraffic interface{}
	// Controls gatewayLinks can be used in the
	// remote virtual network’s link to the local virtual network.
	AllowGatewayTransit interface{}
	// Controls if the VMs in the remote
	// virtual network can access VMs in the local virtual network. Defaults to
	// false.
	AllowVirtualNetworkAccess interface{}
	// The name of the virtual network peering. Changing this
	// forces a new resource to be created.
	Name interface{}
	// The full Azure resource ID of the
	// remote virtual network.  Changing this forces a new resource to be created.
	RemoteVirtualNetworkId interface{}
	// The name of the resource group in which to
	// create the virtual network. Changing this forces a new resource to be
	// created.
	ResourceGroupName interface{}
	// Controls if remote gateways can be used on
	// the local virtual network. If the flag is set to `true`, and
	// `allow_gateway_transit` on the remote peering is also `true`, virtual network will
	// use gateways of remote virtual network for transit. Only one peering can
	// have this flag set to `true`. This flag cannot be set if virtual network
	// already has a gateway. Defaults to `false`.
	UseRemoteGateways interface{}
	// The name of the virtual network. Changing
	// this forces a new resource to be created.
	VirtualNetworkName interface{}
}

// The set of arguments for constructing a VirtualNetworkPeering resource.
type VirtualNetworkPeeringArgs struct {
	// Controls if forwarded traffic from  VMs
	// in the remote virtual network is allowed. Defaults to false.
	AllowForwardedTraffic interface{}
	// Controls gatewayLinks can be used in the
	// remote virtual network’s link to the local virtual network.
	AllowGatewayTransit interface{}
	// Controls if the VMs in the remote
	// virtual network can access VMs in the local virtual network. Defaults to
	// false.
	AllowVirtualNetworkAccess interface{}
	// The name of the virtual network peering. Changing this
	// forces a new resource to be created.
	Name interface{}
	// The full Azure resource ID of the
	// remote virtual network.  Changing this forces a new resource to be created.
	RemoteVirtualNetworkId interface{}
	// The name of the resource group in which to
	// create the virtual network. Changing this forces a new resource to be
	// created.
	ResourceGroupName interface{}
	// Controls if remote gateways can be used on
	// the local virtual network. If the flag is set to `true`, and
	// `allow_gateway_transit` on the remote peering is also `true`, virtual network will
	// use gateways of remote virtual network for transit. Only one peering can
	// have this flag set to `true`. This flag cannot be set if virtual network
	// already has a gateway. Defaults to `false`.
	UseRemoteGateways interface{}
	// The name of the virtual network. Changing
	// this forces a new resource to be created.
	VirtualNetworkName interface{}
}
