// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a virtual network peering which allows resources to access other
// resources in the linked virtual network.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/network"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West US"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = network.NewVirtualNetwork(ctx, "example_1VirtualNetwork", &network.VirtualNetworkArgs{
// 			ResourceGroupName: example.Name,
// 			AddressSpaces: pulumi.StringArray{
// 				pulumi.String("10.0.1.0/24"),
// 			},
// 			Location: pulumi.String("West US"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = network.NewVirtualNetwork(ctx, "example_2VirtualNetwork", &network.VirtualNetworkArgs{
// 			ResourceGroupName: example.Name,
// 			AddressSpaces: pulumi.StringArray{
// 				pulumi.String("10.0.2.0/24"),
// 			},
// 			Location: pulumi.String("West US"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = network.NewVirtualNetworkPeering(ctx, "example_1VirtualNetworkPeering", &network.VirtualNetworkPeeringArgs{
// 			ResourceGroupName:      example.Name,
// 			VirtualNetworkName:     example_1VirtualNetwork.Name,
// 			RemoteVirtualNetworkId: example_2VirtualNetwork.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = network.NewVirtualNetworkPeering(ctx, "example_2VirtualNetworkPeering", &network.VirtualNetworkPeeringArgs{
// 			ResourceGroupName:      example.Name,
// 			VirtualNetworkName:     example_2VirtualNetwork.Name,
// 			RemoteVirtualNetworkId: example_1VirtualNetwork.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Note
//
// Virtual Network peerings cannot be created, updated or deleted concurrently.
//
// ## Import
//
// Virtual Network Peerings can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:network/virtualNetworkPeering:VirtualNetworkPeering examplePeering /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/virtualNetworks/myvnet1/virtualNetworkPeerings/myvnet1peering
// ```
type VirtualNetworkPeering struct {
	pulumi.CustomResourceState

	// Controls if forwarded traffic from  VMs
	// in the remote virtual network is allowed. Defaults to false.
	AllowForwardedTraffic pulumi.BoolOutput `pulumi:"allowForwardedTraffic"`
	// Controls gatewayLinks can be used in the
	// remote virtual network’s link to the local virtual network.
	AllowGatewayTransit pulumi.BoolOutput `pulumi:"allowGatewayTransit"`
	// Controls if the VMs in the remote
	// virtual network can access VMs in the local virtual network. Defaults to
	// true.
	AllowVirtualNetworkAccess pulumi.BoolPtrOutput `pulumi:"allowVirtualNetworkAccess"`
	// The name of the virtual network peering. Changing this
	// forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The full Azure resource ID of the
	// remote virtual network.  Changing this forces a new resource to be created.
	RemoteVirtualNetworkId pulumi.StringOutput `pulumi:"remoteVirtualNetworkId"`
	// The name of the resource group in which to
	// create the virtual network peering. Changing this forces a new resource to be
	// created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Controls if remote gateways can be used on
	// the local virtual network. If the flag is set to `true`, and
	// `allowGatewayTransit` on the remote peering is also `true`, virtual network will
	// use gateways of remote virtual network for transit. Only one peering can
	// have this flag set to `true`. This flag cannot be set if virtual network
	// already has a gateway. Defaults to `false`.
	UseRemoteGateways pulumi.BoolOutput `pulumi:"useRemoteGateways"`
	// The name of the virtual network. Changing
	// this forces a new resource to be created.
	VirtualNetworkName pulumi.StringOutput `pulumi:"virtualNetworkName"`
}

// NewVirtualNetworkPeering registers a new resource with the given unique name, arguments, and options.
func NewVirtualNetworkPeering(ctx *pulumi.Context,
	name string, args *VirtualNetworkPeeringArgs, opts ...pulumi.ResourceOption) (*VirtualNetworkPeering, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RemoteVirtualNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'RemoteVirtualNetworkId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.VirtualNetworkName == nil {
		return nil, errors.New("invalid value for required argument 'VirtualNetworkName'")
	}
	var resource VirtualNetworkPeering
	err := ctx.RegisterResource("azure:network/virtualNetworkPeering:VirtualNetworkPeering", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualNetworkPeering gets an existing VirtualNetworkPeering resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualNetworkPeering(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualNetworkPeeringState, opts ...pulumi.ResourceOption) (*VirtualNetworkPeering, error) {
	var resource VirtualNetworkPeering
	err := ctx.ReadResource("azure:network/virtualNetworkPeering:VirtualNetworkPeering", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualNetworkPeering resources.
type virtualNetworkPeeringState struct {
	// Controls if forwarded traffic from  VMs
	// in the remote virtual network is allowed. Defaults to false.
	AllowForwardedTraffic *bool `pulumi:"allowForwardedTraffic"`
	// Controls gatewayLinks can be used in the
	// remote virtual network’s link to the local virtual network.
	AllowGatewayTransit *bool `pulumi:"allowGatewayTransit"`
	// Controls if the VMs in the remote
	// virtual network can access VMs in the local virtual network. Defaults to
	// true.
	AllowVirtualNetworkAccess *bool `pulumi:"allowVirtualNetworkAccess"`
	// The name of the virtual network peering. Changing this
	// forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The full Azure resource ID of the
	// remote virtual network.  Changing this forces a new resource to be created.
	RemoteVirtualNetworkId *string `pulumi:"remoteVirtualNetworkId"`
	// The name of the resource group in which to
	// create the virtual network peering. Changing this forces a new resource to be
	// created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Controls if remote gateways can be used on
	// the local virtual network. If the flag is set to `true`, and
	// `allowGatewayTransit` on the remote peering is also `true`, virtual network will
	// use gateways of remote virtual network for transit. Only one peering can
	// have this flag set to `true`. This flag cannot be set if virtual network
	// already has a gateway. Defaults to `false`.
	UseRemoteGateways *bool `pulumi:"useRemoteGateways"`
	// The name of the virtual network. Changing
	// this forces a new resource to be created.
	VirtualNetworkName *string `pulumi:"virtualNetworkName"`
}

type VirtualNetworkPeeringState struct {
	// Controls if forwarded traffic from  VMs
	// in the remote virtual network is allowed. Defaults to false.
	AllowForwardedTraffic pulumi.BoolPtrInput
	// Controls gatewayLinks can be used in the
	// remote virtual network’s link to the local virtual network.
	AllowGatewayTransit pulumi.BoolPtrInput
	// Controls if the VMs in the remote
	// virtual network can access VMs in the local virtual network. Defaults to
	// true.
	AllowVirtualNetworkAccess pulumi.BoolPtrInput
	// The name of the virtual network peering. Changing this
	// forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The full Azure resource ID of the
	// remote virtual network.  Changing this forces a new resource to be created.
	RemoteVirtualNetworkId pulumi.StringPtrInput
	// The name of the resource group in which to
	// create the virtual network peering. Changing this forces a new resource to be
	// created.
	ResourceGroupName pulumi.StringPtrInput
	// Controls if remote gateways can be used on
	// the local virtual network. If the flag is set to `true`, and
	// `allowGatewayTransit` on the remote peering is also `true`, virtual network will
	// use gateways of remote virtual network for transit. Only one peering can
	// have this flag set to `true`. This flag cannot be set if virtual network
	// already has a gateway. Defaults to `false`.
	UseRemoteGateways pulumi.BoolPtrInput
	// The name of the virtual network. Changing
	// this forces a new resource to be created.
	VirtualNetworkName pulumi.StringPtrInput
}

func (VirtualNetworkPeeringState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualNetworkPeeringState)(nil)).Elem()
}

type virtualNetworkPeeringArgs struct {
	// Controls if forwarded traffic from  VMs
	// in the remote virtual network is allowed. Defaults to false.
	AllowForwardedTraffic *bool `pulumi:"allowForwardedTraffic"`
	// Controls gatewayLinks can be used in the
	// remote virtual network’s link to the local virtual network.
	AllowGatewayTransit *bool `pulumi:"allowGatewayTransit"`
	// Controls if the VMs in the remote
	// virtual network can access VMs in the local virtual network. Defaults to
	// true.
	AllowVirtualNetworkAccess *bool `pulumi:"allowVirtualNetworkAccess"`
	// The name of the virtual network peering. Changing this
	// forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The full Azure resource ID of the
	// remote virtual network.  Changing this forces a new resource to be created.
	RemoteVirtualNetworkId string `pulumi:"remoteVirtualNetworkId"`
	// The name of the resource group in which to
	// create the virtual network peering. Changing this forces a new resource to be
	// created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Controls if remote gateways can be used on
	// the local virtual network. If the flag is set to `true`, and
	// `allowGatewayTransit` on the remote peering is also `true`, virtual network will
	// use gateways of remote virtual network for transit. Only one peering can
	// have this flag set to `true`. This flag cannot be set if virtual network
	// already has a gateway. Defaults to `false`.
	UseRemoteGateways *bool `pulumi:"useRemoteGateways"`
	// The name of the virtual network. Changing
	// this forces a new resource to be created.
	VirtualNetworkName string `pulumi:"virtualNetworkName"`
}

// The set of arguments for constructing a VirtualNetworkPeering resource.
type VirtualNetworkPeeringArgs struct {
	// Controls if forwarded traffic from  VMs
	// in the remote virtual network is allowed. Defaults to false.
	AllowForwardedTraffic pulumi.BoolPtrInput
	// Controls gatewayLinks can be used in the
	// remote virtual network’s link to the local virtual network.
	AllowGatewayTransit pulumi.BoolPtrInput
	// Controls if the VMs in the remote
	// virtual network can access VMs in the local virtual network. Defaults to
	// true.
	AllowVirtualNetworkAccess pulumi.BoolPtrInput
	// The name of the virtual network peering. Changing this
	// forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The full Azure resource ID of the
	// remote virtual network.  Changing this forces a new resource to be created.
	RemoteVirtualNetworkId pulumi.StringInput
	// The name of the resource group in which to
	// create the virtual network peering. Changing this forces a new resource to be
	// created.
	ResourceGroupName pulumi.StringInput
	// Controls if remote gateways can be used on
	// the local virtual network. If the flag is set to `true`, and
	// `allowGatewayTransit` on the remote peering is also `true`, virtual network will
	// use gateways of remote virtual network for transit. Only one peering can
	// have this flag set to `true`. This flag cannot be set if virtual network
	// already has a gateway. Defaults to `false`.
	UseRemoteGateways pulumi.BoolPtrInput
	// The name of the virtual network. Changing
	// this forces a new resource to be created.
	VirtualNetworkName pulumi.StringInput
}

func (VirtualNetworkPeeringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualNetworkPeeringArgs)(nil)).Elem()
}

type VirtualNetworkPeeringInput interface {
	pulumi.Input

	ToVirtualNetworkPeeringOutput() VirtualNetworkPeeringOutput
	ToVirtualNetworkPeeringOutputWithContext(ctx context.Context) VirtualNetworkPeeringOutput
}

func (*VirtualNetworkPeering) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkPeering)(nil))
}

func (i *VirtualNetworkPeering) ToVirtualNetworkPeeringOutput() VirtualNetworkPeeringOutput {
	return i.ToVirtualNetworkPeeringOutputWithContext(context.Background())
}

func (i *VirtualNetworkPeering) ToVirtualNetworkPeeringOutputWithContext(ctx context.Context) VirtualNetworkPeeringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkPeeringOutput)
}

func (i *VirtualNetworkPeering) ToVirtualNetworkPeeringPtrOutput() VirtualNetworkPeeringPtrOutput {
	return i.ToVirtualNetworkPeeringPtrOutputWithContext(context.Background())
}

func (i *VirtualNetworkPeering) ToVirtualNetworkPeeringPtrOutputWithContext(ctx context.Context) VirtualNetworkPeeringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkPeeringPtrOutput)
}

type VirtualNetworkPeeringPtrInput interface {
	pulumi.Input

	ToVirtualNetworkPeeringPtrOutput() VirtualNetworkPeeringPtrOutput
	ToVirtualNetworkPeeringPtrOutputWithContext(ctx context.Context) VirtualNetworkPeeringPtrOutput
}

type virtualNetworkPeeringPtrType VirtualNetworkPeeringArgs

func (*virtualNetworkPeeringPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNetworkPeering)(nil))
}

func (i *virtualNetworkPeeringPtrType) ToVirtualNetworkPeeringPtrOutput() VirtualNetworkPeeringPtrOutput {
	return i.ToVirtualNetworkPeeringPtrOutputWithContext(context.Background())
}

func (i *virtualNetworkPeeringPtrType) ToVirtualNetworkPeeringPtrOutputWithContext(ctx context.Context) VirtualNetworkPeeringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkPeeringPtrOutput)
}

// VirtualNetworkPeeringArrayInput is an input type that accepts VirtualNetworkPeeringArray and VirtualNetworkPeeringArrayOutput values.
// You can construct a concrete instance of `VirtualNetworkPeeringArrayInput` via:
//
//          VirtualNetworkPeeringArray{ VirtualNetworkPeeringArgs{...} }
type VirtualNetworkPeeringArrayInput interface {
	pulumi.Input

	ToVirtualNetworkPeeringArrayOutput() VirtualNetworkPeeringArrayOutput
	ToVirtualNetworkPeeringArrayOutputWithContext(context.Context) VirtualNetworkPeeringArrayOutput
}

type VirtualNetworkPeeringArray []VirtualNetworkPeeringInput

func (VirtualNetworkPeeringArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*VirtualNetworkPeering)(nil))
}

func (i VirtualNetworkPeeringArray) ToVirtualNetworkPeeringArrayOutput() VirtualNetworkPeeringArrayOutput {
	return i.ToVirtualNetworkPeeringArrayOutputWithContext(context.Background())
}

func (i VirtualNetworkPeeringArray) ToVirtualNetworkPeeringArrayOutputWithContext(ctx context.Context) VirtualNetworkPeeringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkPeeringArrayOutput)
}

// VirtualNetworkPeeringMapInput is an input type that accepts VirtualNetworkPeeringMap and VirtualNetworkPeeringMapOutput values.
// You can construct a concrete instance of `VirtualNetworkPeeringMapInput` via:
//
//          VirtualNetworkPeeringMap{ "key": VirtualNetworkPeeringArgs{...} }
type VirtualNetworkPeeringMapInput interface {
	pulumi.Input

	ToVirtualNetworkPeeringMapOutput() VirtualNetworkPeeringMapOutput
	ToVirtualNetworkPeeringMapOutputWithContext(context.Context) VirtualNetworkPeeringMapOutput
}

type VirtualNetworkPeeringMap map[string]VirtualNetworkPeeringInput

func (VirtualNetworkPeeringMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*VirtualNetworkPeering)(nil))
}

func (i VirtualNetworkPeeringMap) ToVirtualNetworkPeeringMapOutput() VirtualNetworkPeeringMapOutput {
	return i.ToVirtualNetworkPeeringMapOutputWithContext(context.Background())
}

func (i VirtualNetworkPeeringMap) ToVirtualNetworkPeeringMapOutputWithContext(ctx context.Context) VirtualNetworkPeeringMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkPeeringMapOutput)
}

type VirtualNetworkPeeringOutput struct {
	*pulumi.OutputState
}

func (VirtualNetworkPeeringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkPeering)(nil))
}

func (o VirtualNetworkPeeringOutput) ToVirtualNetworkPeeringOutput() VirtualNetworkPeeringOutput {
	return o
}

func (o VirtualNetworkPeeringOutput) ToVirtualNetworkPeeringOutputWithContext(ctx context.Context) VirtualNetworkPeeringOutput {
	return o
}

func (o VirtualNetworkPeeringOutput) ToVirtualNetworkPeeringPtrOutput() VirtualNetworkPeeringPtrOutput {
	return o.ToVirtualNetworkPeeringPtrOutputWithContext(context.Background())
}

func (o VirtualNetworkPeeringOutput) ToVirtualNetworkPeeringPtrOutputWithContext(ctx context.Context) VirtualNetworkPeeringPtrOutput {
	return o.ApplyT(func(v VirtualNetworkPeering) *VirtualNetworkPeering {
		return &v
	}).(VirtualNetworkPeeringPtrOutput)
}

type VirtualNetworkPeeringPtrOutput struct {
	*pulumi.OutputState
}

func (VirtualNetworkPeeringPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNetworkPeering)(nil))
}

func (o VirtualNetworkPeeringPtrOutput) ToVirtualNetworkPeeringPtrOutput() VirtualNetworkPeeringPtrOutput {
	return o
}

func (o VirtualNetworkPeeringPtrOutput) ToVirtualNetworkPeeringPtrOutputWithContext(ctx context.Context) VirtualNetworkPeeringPtrOutput {
	return o
}

type VirtualNetworkPeeringArrayOutput struct{ *pulumi.OutputState }

func (VirtualNetworkPeeringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualNetworkPeering)(nil))
}

func (o VirtualNetworkPeeringArrayOutput) ToVirtualNetworkPeeringArrayOutput() VirtualNetworkPeeringArrayOutput {
	return o
}

func (o VirtualNetworkPeeringArrayOutput) ToVirtualNetworkPeeringArrayOutputWithContext(ctx context.Context) VirtualNetworkPeeringArrayOutput {
	return o
}

func (o VirtualNetworkPeeringArrayOutput) Index(i pulumi.IntInput) VirtualNetworkPeeringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualNetworkPeering {
		return vs[0].([]VirtualNetworkPeering)[vs[1].(int)]
	}).(VirtualNetworkPeeringOutput)
}

type VirtualNetworkPeeringMapOutput struct{ *pulumi.OutputState }

func (VirtualNetworkPeeringMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VirtualNetworkPeering)(nil))
}

func (o VirtualNetworkPeeringMapOutput) ToVirtualNetworkPeeringMapOutput() VirtualNetworkPeeringMapOutput {
	return o
}

func (o VirtualNetworkPeeringMapOutput) ToVirtualNetworkPeeringMapOutputWithContext(ctx context.Context) VirtualNetworkPeeringMapOutput {
	return o
}

func (o VirtualNetworkPeeringMapOutput) MapIndex(k pulumi.StringInput) VirtualNetworkPeeringOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) VirtualNetworkPeering {
		return vs[0].(map[string]VirtualNetworkPeering)[vs[1].(string)]
	}).(VirtualNetworkPeeringOutput)
}

func init() {
	pulumi.RegisterOutputType(VirtualNetworkPeeringOutput{})
	pulumi.RegisterOutputType(VirtualNetworkPeeringPtrOutput{})
	pulumi.RegisterOutputType(VirtualNetworkPeeringArrayOutput{})
	pulumi.RegisterOutputType(VirtualNetworkPeeringMapOutput{})
}
