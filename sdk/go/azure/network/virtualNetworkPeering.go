// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package network

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a virtual network peering which allows resources to access other
// resources in the linked virtual network.
//
// ## Note
//
// Virtual Network peerings cannot be created, updated or deleted concurrently.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/virtual_network_peering.html.markdown.
type VirtualNetworkPeering struct {
	pulumi.CustomResourceState

	// Controls if forwarded traffic from  VMs
	// in the remote virtual network is allowed. Defaults to false.
	AllowForwardedTraffic pulumi.BoolOutput `pulumi:"allowForwardedTraffic"`
	// Controls gatewayLinks can be used in the
	// remote virtual network’s link to the local virtual network.
	AllowGatewayTransit pulumi.BoolOutput `pulumi:"allowGatewayTransit"`
	// Controls if the VMs in the remote
	// virtual network can access VMs in the local virtual network. Defaults to
	// true.
	AllowVirtualNetworkAccess pulumi.BoolPtrOutput `pulumi:"allowVirtualNetworkAccess"`
	// The name of the virtual network peering. Changing this
	// forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The full Azure resource ID of the
	// remote virtual network.  Changing this forces a new resource to be created.
	RemoteVirtualNetworkId pulumi.StringOutput `pulumi:"remoteVirtualNetworkId"`
	// The name of the resource group in which to
	// create the virtual network. Changing this forces a new resource to be
	// created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Controls if remote gateways can be used on
	// the local virtual network. If the flag is set to `true`, and
	// `allowGatewayTransit` on the remote peering is also `true`, virtual network will
	// use gateways of remote virtual network for transit. Only one peering can
	// have this flag set to `true`. This flag cannot be set if virtual network
	// already has a gateway. Defaults to `false`.
	UseRemoteGateways pulumi.BoolOutput `pulumi:"useRemoteGateways"`
	// The name of the virtual network. Changing
	// this forces a new resource to be created.
	VirtualNetworkName pulumi.StringOutput `pulumi:"virtualNetworkName"`
}

// NewVirtualNetworkPeering registers a new resource with the given unique name, arguments, and options.
func NewVirtualNetworkPeering(ctx *pulumi.Context,
	name string, args *VirtualNetworkPeeringArgs, opts ...pulumi.ResourceOption) (*VirtualNetworkPeering, error) {
	if args == nil || args.RemoteVirtualNetworkId == nil {
		return nil, errors.New("missing required argument 'RemoteVirtualNetworkId'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.VirtualNetworkName == nil {
		return nil, errors.New("missing required argument 'VirtualNetworkName'")
	}
	if args == nil {
		args = &VirtualNetworkPeeringArgs{}
	}
	var resource VirtualNetworkPeering
	err := ctx.RegisterResource("azure:network/virtualNetworkPeering:VirtualNetworkPeering", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualNetworkPeering gets an existing VirtualNetworkPeering resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualNetworkPeering(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualNetworkPeeringState, opts ...pulumi.ResourceOption) (*VirtualNetworkPeering, error) {
	var resource VirtualNetworkPeering
	err := ctx.ReadResource("azure:network/virtualNetworkPeering:VirtualNetworkPeering", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualNetworkPeering resources.
type virtualNetworkPeeringState struct {
	// Controls if forwarded traffic from  VMs
	// in the remote virtual network is allowed. Defaults to false.
	AllowForwardedTraffic *bool `pulumi:"allowForwardedTraffic"`
	// Controls gatewayLinks can be used in the
	// remote virtual network’s link to the local virtual network.
	AllowGatewayTransit *bool `pulumi:"allowGatewayTransit"`
	// Controls if the VMs in the remote
	// virtual network can access VMs in the local virtual network. Defaults to
	// true.
	AllowVirtualNetworkAccess *bool `pulumi:"allowVirtualNetworkAccess"`
	// The name of the virtual network peering. Changing this
	// forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The full Azure resource ID of the
	// remote virtual network.  Changing this forces a new resource to be created.
	RemoteVirtualNetworkId *string `pulumi:"remoteVirtualNetworkId"`
	// The name of the resource group in which to
	// create the virtual network. Changing this forces a new resource to be
	// created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Controls if remote gateways can be used on
	// the local virtual network. If the flag is set to `true`, and
	// `allowGatewayTransit` on the remote peering is also `true`, virtual network will
	// use gateways of remote virtual network for transit. Only one peering can
	// have this flag set to `true`. This flag cannot be set if virtual network
	// already has a gateway. Defaults to `false`.
	UseRemoteGateways *bool `pulumi:"useRemoteGateways"`
	// The name of the virtual network. Changing
	// this forces a new resource to be created.
	VirtualNetworkName *string `pulumi:"virtualNetworkName"`
}

type VirtualNetworkPeeringState struct {
	// Controls if forwarded traffic from  VMs
	// in the remote virtual network is allowed. Defaults to false.
	AllowForwardedTraffic pulumi.BoolPtrInput
	// Controls gatewayLinks can be used in the
	// remote virtual network’s link to the local virtual network.
	AllowGatewayTransit pulumi.BoolPtrInput
	// Controls if the VMs in the remote
	// virtual network can access VMs in the local virtual network. Defaults to
	// true.
	AllowVirtualNetworkAccess pulumi.BoolPtrInput
	// The name of the virtual network peering. Changing this
	// forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The full Azure resource ID of the
	// remote virtual network.  Changing this forces a new resource to be created.
	RemoteVirtualNetworkId pulumi.StringPtrInput
	// The name of the resource group in which to
	// create the virtual network. Changing this forces a new resource to be
	// created.
	ResourceGroupName pulumi.StringPtrInput
	// Controls if remote gateways can be used on
	// the local virtual network. If the flag is set to `true`, and
	// `allowGatewayTransit` on the remote peering is also `true`, virtual network will
	// use gateways of remote virtual network for transit. Only one peering can
	// have this flag set to `true`. This flag cannot be set if virtual network
	// already has a gateway. Defaults to `false`.
	UseRemoteGateways pulumi.BoolPtrInput
	// The name of the virtual network. Changing
	// this forces a new resource to be created.
	VirtualNetworkName pulumi.StringPtrInput
}

func (VirtualNetworkPeeringState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualNetworkPeeringState)(nil)).Elem()
}

type virtualNetworkPeeringArgs struct {
	// Controls if forwarded traffic from  VMs
	// in the remote virtual network is allowed. Defaults to false.
	AllowForwardedTraffic *bool `pulumi:"allowForwardedTraffic"`
	// Controls gatewayLinks can be used in the
	// remote virtual network’s link to the local virtual network.
	AllowGatewayTransit *bool `pulumi:"allowGatewayTransit"`
	// Controls if the VMs in the remote
	// virtual network can access VMs in the local virtual network. Defaults to
	// true.
	AllowVirtualNetworkAccess *bool `pulumi:"allowVirtualNetworkAccess"`
	// The name of the virtual network peering. Changing this
	// forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The full Azure resource ID of the
	// remote virtual network.  Changing this forces a new resource to be created.
	RemoteVirtualNetworkId string `pulumi:"remoteVirtualNetworkId"`
	// The name of the resource group in which to
	// create the virtual network. Changing this forces a new resource to be
	// created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Controls if remote gateways can be used on
	// the local virtual network. If the flag is set to `true`, and
	// `allowGatewayTransit` on the remote peering is also `true`, virtual network will
	// use gateways of remote virtual network for transit. Only one peering can
	// have this flag set to `true`. This flag cannot be set if virtual network
	// already has a gateway. Defaults to `false`.
	UseRemoteGateways *bool `pulumi:"useRemoteGateways"`
	// The name of the virtual network. Changing
	// this forces a new resource to be created.
	VirtualNetworkName string `pulumi:"virtualNetworkName"`
}

// The set of arguments for constructing a VirtualNetworkPeering resource.
type VirtualNetworkPeeringArgs struct {
	// Controls if forwarded traffic from  VMs
	// in the remote virtual network is allowed. Defaults to false.
	AllowForwardedTraffic pulumi.BoolPtrInput
	// Controls gatewayLinks can be used in the
	// remote virtual network’s link to the local virtual network.
	AllowGatewayTransit pulumi.BoolPtrInput
	// Controls if the VMs in the remote
	// virtual network can access VMs in the local virtual network. Defaults to
	// true.
	AllowVirtualNetworkAccess pulumi.BoolPtrInput
	// The name of the virtual network peering. Changing this
	// forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The full Azure resource ID of the
	// remote virtual network.  Changing this forces a new resource to be created.
	RemoteVirtualNetworkId pulumi.StringInput
	// The name of the resource group in which to
	// create the virtual network. Changing this forces a new resource to be
	// created.
	ResourceGroupName pulumi.StringInput
	// Controls if remote gateways can be used on
	// the local virtual network. If the flag is set to `true`, and
	// `allowGatewayTransit` on the remote peering is also `true`, virtual network will
	// use gateways of remote virtual network for transit. Only one peering can
	// have this flag set to `true`. This flag cannot be set if virtual network
	// already has a gateway. Defaults to `false`.
	UseRemoteGateways pulumi.BoolPtrInput
	// The name of the virtual network. Changing
	// this forces a new resource to be created.
	VirtualNetworkName pulumi.StringInput
}

func (VirtualNetworkPeeringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualNetworkPeeringArgs)(nil)).Elem()
}

