// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a virtual network peering which allows resources to access other
// resources in the linked virtual network.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = network.NewVirtualNetwork(ctx, "example-1VirtualNetwork", &network.VirtualNetworkArgs{
//				ResourceGroupName: example.Name,
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.1.0/24"),
//				},
//				Location: example.Location,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = network.NewVirtualNetwork(ctx, "example-2VirtualNetwork", &network.VirtualNetworkArgs{
//				ResourceGroupName: example.Name,
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.2.0/24"),
//				},
//				Location: example.Location,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = network.NewVirtualNetworkPeering(ctx, "example-1VirtualNetworkPeering", &network.VirtualNetworkPeeringArgs{
//				ResourceGroupName:      example.Name,
//				VirtualNetworkName:     example_1VirtualNetwork.Name,
//				RemoteVirtualNetworkId: example_2VirtualNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = network.NewVirtualNetworkPeering(ctx, "example-2VirtualNetworkPeering", &network.VirtualNetworkPeeringArgs{
//				ResourceGroupName:      example.Name,
//				VirtualNetworkName:     example_2VirtualNetwork.Name,
//				RemoteVirtualNetworkId: example_1VirtualNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Note
//
// Virtual Network peerings cannot be created, updated or deleted concurrently.
//
// ## Import
//
// Virtual Network Peerings can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:network/virtualNetworkPeering:VirtualNetworkPeering examplePeering /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/virtualNetworks/myvnet1/virtualNetworkPeerings/myvnet1peering
//
// ```
type VirtualNetworkPeering struct {
	pulumi.CustomResourceState

	// Controls if forwarded traffic from VMs in the remote virtual network is allowed. Defaults to `false`.
	AllowForwardedTraffic pulumi.BoolPtrOutput `pulumi:"allowForwardedTraffic"`
	// Controls gatewayLinks can be used in the remote virtual network’s link to the local virtual network. Defaults to `false`.
	AllowGatewayTransit pulumi.BoolPtrOutput `pulumi:"allowGatewayTransit"`
	// Controls if the VMs in the remote virtual network can access VMs in the local virtual network. Defaults to `true`.
	AllowVirtualNetworkAccess pulumi.BoolPtrOutput `pulumi:"allowVirtualNetworkAccess"`
	// The name of the virtual network peering. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The full Azure resource ID of the remote virtual network. Changing this forces a new resource to be created.
	RemoteVirtualNetworkId pulumi.StringOutput `pulumi:"remoteVirtualNetworkId"`
	// The name of the resource group in which to create the virtual network peering. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of key values pairs that can be used to sync network routes from the remote virtual network to the local virtual network. See the trigger example for an example on how to set it up.
	Triggers pulumi.StringMapOutput `pulumi:"triggers"`
	// Controls if remote gateways can be used on the local virtual network. If the flag is set to `true`, and `allowGatewayTransit` on the remote peering is also `true`, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to `true`. This flag cannot be set if virtual network already has a gateway. Defaults to `false`.
	//
	// > **NOTE:** `useRemoteGateways` must be set to `false` if using Global Virtual Network Peerings.
	UseRemoteGateways pulumi.BoolPtrOutput `pulumi:"useRemoteGateways"`
	// The name of the virtual network. Changing this forces a new resource to be created.
	VirtualNetworkName pulumi.StringOutput `pulumi:"virtualNetworkName"`
}

// NewVirtualNetworkPeering registers a new resource with the given unique name, arguments, and options.
func NewVirtualNetworkPeering(ctx *pulumi.Context,
	name string, args *VirtualNetworkPeeringArgs, opts ...pulumi.ResourceOption) (*VirtualNetworkPeering, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RemoteVirtualNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'RemoteVirtualNetworkId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.VirtualNetworkName == nil {
		return nil, errors.New("invalid value for required argument 'VirtualNetworkName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VirtualNetworkPeering
	err := ctx.RegisterResource("azure:network/virtualNetworkPeering:VirtualNetworkPeering", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualNetworkPeering gets an existing VirtualNetworkPeering resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualNetworkPeering(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualNetworkPeeringState, opts ...pulumi.ResourceOption) (*VirtualNetworkPeering, error) {
	var resource VirtualNetworkPeering
	err := ctx.ReadResource("azure:network/virtualNetworkPeering:VirtualNetworkPeering", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualNetworkPeering resources.
type virtualNetworkPeeringState struct {
	// Controls if forwarded traffic from VMs in the remote virtual network is allowed. Defaults to `false`.
	AllowForwardedTraffic *bool `pulumi:"allowForwardedTraffic"`
	// Controls gatewayLinks can be used in the remote virtual network’s link to the local virtual network. Defaults to `false`.
	AllowGatewayTransit *bool `pulumi:"allowGatewayTransit"`
	// Controls if the VMs in the remote virtual network can access VMs in the local virtual network. Defaults to `true`.
	AllowVirtualNetworkAccess *bool `pulumi:"allowVirtualNetworkAccess"`
	// The name of the virtual network peering. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The full Azure resource ID of the remote virtual network. Changing this forces a new resource to be created.
	RemoteVirtualNetworkId *string `pulumi:"remoteVirtualNetworkId"`
	// The name of the resource group in which to create the virtual network peering. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of key values pairs that can be used to sync network routes from the remote virtual network to the local virtual network. See the trigger example for an example on how to set it up.
	Triggers map[string]string `pulumi:"triggers"`
	// Controls if remote gateways can be used on the local virtual network. If the flag is set to `true`, and `allowGatewayTransit` on the remote peering is also `true`, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to `true`. This flag cannot be set if virtual network already has a gateway. Defaults to `false`.
	//
	// > **NOTE:** `useRemoteGateways` must be set to `false` if using Global Virtual Network Peerings.
	UseRemoteGateways *bool `pulumi:"useRemoteGateways"`
	// The name of the virtual network. Changing this forces a new resource to be created.
	VirtualNetworkName *string `pulumi:"virtualNetworkName"`
}

type VirtualNetworkPeeringState struct {
	// Controls if forwarded traffic from VMs in the remote virtual network is allowed. Defaults to `false`.
	AllowForwardedTraffic pulumi.BoolPtrInput
	// Controls gatewayLinks can be used in the remote virtual network’s link to the local virtual network. Defaults to `false`.
	AllowGatewayTransit pulumi.BoolPtrInput
	// Controls if the VMs in the remote virtual network can access VMs in the local virtual network. Defaults to `true`.
	AllowVirtualNetworkAccess pulumi.BoolPtrInput
	// The name of the virtual network peering. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The full Azure resource ID of the remote virtual network. Changing this forces a new resource to be created.
	RemoteVirtualNetworkId pulumi.StringPtrInput
	// The name of the resource group in which to create the virtual network peering. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of key values pairs that can be used to sync network routes from the remote virtual network to the local virtual network. See the trigger example for an example on how to set it up.
	Triggers pulumi.StringMapInput
	// Controls if remote gateways can be used on the local virtual network. If the flag is set to `true`, and `allowGatewayTransit` on the remote peering is also `true`, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to `true`. This flag cannot be set if virtual network already has a gateway. Defaults to `false`.
	//
	// > **NOTE:** `useRemoteGateways` must be set to `false` if using Global Virtual Network Peerings.
	UseRemoteGateways pulumi.BoolPtrInput
	// The name of the virtual network. Changing this forces a new resource to be created.
	VirtualNetworkName pulumi.StringPtrInput
}

func (VirtualNetworkPeeringState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualNetworkPeeringState)(nil)).Elem()
}

type virtualNetworkPeeringArgs struct {
	// Controls if forwarded traffic from VMs in the remote virtual network is allowed. Defaults to `false`.
	AllowForwardedTraffic *bool `pulumi:"allowForwardedTraffic"`
	// Controls gatewayLinks can be used in the remote virtual network’s link to the local virtual network. Defaults to `false`.
	AllowGatewayTransit *bool `pulumi:"allowGatewayTransit"`
	// Controls if the VMs in the remote virtual network can access VMs in the local virtual network. Defaults to `true`.
	AllowVirtualNetworkAccess *bool `pulumi:"allowVirtualNetworkAccess"`
	// The name of the virtual network peering. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The full Azure resource ID of the remote virtual network. Changing this forces a new resource to be created.
	RemoteVirtualNetworkId string `pulumi:"remoteVirtualNetworkId"`
	// The name of the resource group in which to create the virtual network peering. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of key values pairs that can be used to sync network routes from the remote virtual network to the local virtual network. See the trigger example for an example on how to set it up.
	Triggers map[string]string `pulumi:"triggers"`
	// Controls if remote gateways can be used on the local virtual network. If the flag is set to `true`, and `allowGatewayTransit` on the remote peering is also `true`, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to `true`. This flag cannot be set if virtual network already has a gateway. Defaults to `false`.
	//
	// > **NOTE:** `useRemoteGateways` must be set to `false` if using Global Virtual Network Peerings.
	UseRemoteGateways *bool `pulumi:"useRemoteGateways"`
	// The name of the virtual network. Changing this forces a new resource to be created.
	VirtualNetworkName string `pulumi:"virtualNetworkName"`
}

// The set of arguments for constructing a VirtualNetworkPeering resource.
type VirtualNetworkPeeringArgs struct {
	// Controls if forwarded traffic from VMs in the remote virtual network is allowed. Defaults to `false`.
	AllowForwardedTraffic pulumi.BoolPtrInput
	// Controls gatewayLinks can be used in the remote virtual network’s link to the local virtual network. Defaults to `false`.
	AllowGatewayTransit pulumi.BoolPtrInput
	// Controls if the VMs in the remote virtual network can access VMs in the local virtual network. Defaults to `true`.
	AllowVirtualNetworkAccess pulumi.BoolPtrInput
	// The name of the virtual network peering. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The full Azure resource ID of the remote virtual network. Changing this forces a new resource to be created.
	RemoteVirtualNetworkId pulumi.StringInput
	// The name of the resource group in which to create the virtual network peering. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of key values pairs that can be used to sync network routes from the remote virtual network to the local virtual network. See the trigger example for an example on how to set it up.
	Triggers pulumi.StringMapInput
	// Controls if remote gateways can be used on the local virtual network. If the flag is set to `true`, and `allowGatewayTransit` on the remote peering is also `true`, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to `true`. This flag cannot be set if virtual network already has a gateway. Defaults to `false`.
	//
	// > **NOTE:** `useRemoteGateways` must be set to `false` if using Global Virtual Network Peerings.
	UseRemoteGateways pulumi.BoolPtrInput
	// The name of the virtual network. Changing this forces a new resource to be created.
	VirtualNetworkName pulumi.StringInput
}

func (VirtualNetworkPeeringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualNetworkPeeringArgs)(nil)).Elem()
}

type VirtualNetworkPeeringInput interface {
	pulumi.Input

	ToVirtualNetworkPeeringOutput() VirtualNetworkPeeringOutput
	ToVirtualNetworkPeeringOutputWithContext(ctx context.Context) VirtualNetworkPeeringOutput
}

func (*VirtualNetworkPeering) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNetworkPeering)(nil)).Elem()
}

func (i *VirtualNetworkPeering) ToVirtualNetworkPeeringOutput() VirtualNetworkPeeringOutput {
	return i.ToVirtualNetworkPeeringOutputWithContext(context.Background())
}

func (i *VirtualNetworkPeering) ToVirtualNetworkPeeringOutputWithContext(ctx context.Context) VirtualNetworkPeeringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkPeeringOutput)
}

// VirtualNetworkPeeringArrayInput is an input type that accepts VirtualNetworkPeeringArray and VirtualNetworkPeeringArrayOutput values.
// You can construct a concrete instance of `VirtualNetworkPeeringArrayInput` via:
//
//	VirtualNetworkPeeringArray{ VirtualNetworkPeeringArgs{...} }
type VirtualNetworkPeeringArrayInput interface {
	pulumi.Input

	ToVirtualNetworkPeeringArrayOutput() VirtualNetworkPeeringArrayOutput
	ToVirtualNetworkPeeringArrayOutputWithContext(context.Context) VirtualNetworkPeeringArrayOutput
}

type VirtualNetworkPeeringArray []VirtualNetworkPeeringInput

func (VirtualNetworkPeeringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualNetworkPeering)(nil)).Elem()
}

func (i VirtualNetworkPeeringArray) ToVirtualNetworkPeeringArrayOutput() VirtualNetworkPeeringArrayOutput {
	return i.ToVirtualNetworkPeeringArrayOutputWithContext(context.Background())
}

func (i VirtualNetworkPeeringArray) ToVirtualNetworkPeeringArrayOutputWithContext(ctx context.Context) VirtualNetworkPeeringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkPeeringArrayOutput)
}

// VirtualNetworkPeeringMapInput is an input type that accepts VirtualNetworkPeeringMap and VirtualNetworkPeeringMapOutput values.
// You can construct a concrete instance of `VirtualNetworkPeeringMapInput` via:
//
//	VirtualNetworkPeeringMap{ "key": VirtualNetworkPeeringArgs{...} }
type VirtualNetworkPeeringMapInput interface {
	pulumi.Input

	ToVirtualNetworkPeeringMapOutput() VirtualNetworkPeeringMapOutput
	ToVirtualNetworkPeeringMapOutputWithContext(context.Context) VirtualNetworkPeeringMapOutput
}

type VirtualNetworkPeeringMap map[string]VirtualNetworkPeeringInput

func (VirtualNetworkPeeringMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualNetworkPeering)(nil)).Elem()
}

func (i VirtualNetworkPeeringMap) ToVirtualNetworkPeeringMapOutput() VirtualNetworkPeeringMapOutput {
	return i.ToVirtualNetworkPeeringMapOutputWithContext(context.Background())
}

func (i VirtualNetworkPeeringMap) ToVirtualNetworkPeeringMapOutputWithContext(ctx context.Context) VirtualNetworkPeeringMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkPeeringMapOutput)
}

type VirtualNetworkPeeringOutput struct{ *pulumi.OutputState }

func (VirtualNetworkPeeringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNetworkPeering)(nil)).Elem()
}

func (o VirtualNetworkPeeringOutput) ToVirtualNetworkPeeringOutput() VirtualNetworkPeeringOutput {
	return o
}

func (o VirtualNetworkPeeringOutput) ToVirtualNetworkPeeringOutputWithContext(ctx context.Context) VirtualNetworkPeeringOutput {
	return o
}

// Controls if forwarded traffic from VMs in the remote virtual network is allowed. Defaults to `false`.
func (o VirtualNetworkPeeringOutput) AllowForwardedTraffic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualNetworkPeering) pulumi.BoolPtrOutput { return v.AllowForwardedTraffic }).(pulumi.BoolPtrOutput)
}

// Controls gatewayLinks can be used in the remote virtual network’s link to the local virtual network. Defaults to `false`.
func (o VirtualNetworkPeeringOutput) AllowGatewayTransit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualNetworkPeering) pulumi.BoolPtrOutput { return v.AllowGatewayTransit }).(pulumi.BoolPtrOutput)
}

// Controls if the VMs in the remote virtual network can access VMs in the local virtual network. Defaults to `true`.
func (o VirtualNetworkPeeringOutput) AllowVirtualNetworkAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualNetworkPeering) pulumi.BoolPtrOutput { return v.AllowVirtualNetworkAccess }).(pulumi.BoolPtrOutput)
}

// The name of the virtual network peering. Changing this forces a new resource to be created.
func (o VirtualNetworkPeeringOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualNetworkPeering) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The full Azure resource ID of the remote virtual network. Changing this forces a new resource to be created.
func (o VirtualNetworkPeeringOutput) RemoteVirtualNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualNetworkPeering) pulumi.StringOutput { return v.RemoteVirtualNetworkId }).(pulumi.StringOutput)
}

// The name of the resource group in which to create the virtual network peering. Changing this forces a new resource to be created.
func (o VirtualNetworkPeeringOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualNetworkPeering) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of key values pairs that can be used to sync network routes from the remote virtual network to the local virtual network. See the trigger example for an example on how to set it up.
func (o VirtualNetworkPeeringOutput) Triggers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualNetworkPeering) pulumi.StringMapOutput { return v.Triggers }).(pulumi.StringMapOutput)
}

// Controls if remote gateways can be used on the local virtual network. If the flag is set to `true`, and `allowGatewayTransit` on the remote peering is also `true`, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to `true`. This flag cannot be set if virtual network already has a gateway. Defaults to `false`.
//
// > **NOTE:** `useRemoteGateways` must be set to `false` if using Global Virtual Network Peerings.
func (o VirtualNetworkPeeringOutput) UseRemoteGateways() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualNetworkPeering) pulumi.BoolPtrOutput { return v.UseRemoteGateways }).(pulumi.BoolPtrOutput)
}

// The name of the virtual network. Changing this forces a new resource to be created.
func (o VirtualNetworkPeeringOutput) VirtualNetworkName() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualNetworkPeering) pulumi.StringOutput { return v.VirtualNetworkName }).(pulumi.StringOutput)
}

type VirtualNetworkPeeringArrayOutput struct{ *pulumi.OutputState }

func (VirtualNetworkPeeringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualNetworkPeering)(nil)).Elem()
}

func (o VirtualNetworkPeeringArrayOutput) ToVirtualNetworkPeeringArrayOutput() VirtualNetworkPeeringArrayOutput {
	return o
}

func (o VirtualNetworkPeeringArrayOutput) ToVirtualNetworkPeeringArrayOutputWithContext(ctx context.Context) VirtualNetworkPeeringArrayOutput {
	return o
}

func (o VirtualNetworkPeeringArrayOutput) Index(i pulumi.IntInput) VirtualNetworkPeeringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VirtualNetworkPeering {
		return vs[0].([]*VirtualNetworkPeering)[vs[1].(int)]
	}).(VirtualNetworkPeeringOutput)
}

type VirtualNetworkPeeringMapOutput struct{ *pulumi.OutputState }

func (VirtualNetworkPeeringMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualNetworkPeering)(nil)).Elem()
}

func (o VirtualNetworkPeeringMapOutput) ToVirtualNetworkPeeringMapOutput() VirtualNetworkPeeringMapOutput {
	return o
}

func (o VirtualNetworkPeeringMapOutput) ToVirtualNetworkPeeringMapOutputWithContext(ctx context.Context) VirtualNetworkPeeringMapOutput {
	return o
}

func (o VirtualNetworkPeeringMapOutput) MapIndex(k pulumi.StringInput) VirtualNetworkPeeringOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VirtualNetworkPeering {
		return vs[0].(map[string]*VirtualNetworkPeering)[vs[1].(string)]
	}).(VirtualNetworkPeeringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualNetworkPeeringInput)(nil)).Elem(), &VirtualNetworkPeering{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualNetworkPeeringArrayInput)(nil)).Elem(), VirtualNetworkPeeringArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualNetworkPeeringMapInput)(nil)).Elem(), VirtualNetworkPeeringMap{})
	pulumi.RegisterOutputType(VirtualNetworkPeeringOutput{})
	pulumi.RegisterOutputType(VirtualNetworkPeeringArrayOutput{})
	pulumi.RegisterOutputType(VirtualNetworkPeeringMapOutput{})
}
