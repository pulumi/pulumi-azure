// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configures Network Packet Capturing against a Virtual Machine using a Network Watcher.
//
// !> **NOTE:** The `network.NetworkPacketCapture` resource is deprecated and will be removed in favour of `compute.PacketCapture` and `compute.ScaleSetPacketCapture` in version 4.0 of the AzureRM Provider.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	compute/extension "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/compute/extension"
//	compute/virtualMachine "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/compute/virtualMachine"
//	core/resourceGroup "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/core/resourceGroup"
//	network/networkInterface "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/networkInterface"
//	network/networkPacketCapture "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/networkPacketCapture"
//	network/networkWatcher "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/networkWatcher"
//	network/subnet "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/subnet"
//	network/virtualNetwork "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/virtualNetwork"
//	storage/account "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/storage/account"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// example, err := core/resourceGroup.NewResourceGroup(ctx, "example", &core/resourceGroup.ResourceGroupArgs{
// Name: "packet-capture-rg",
// Location: "West Europe",
// })
// if err != nil {
// return err
// }
// exampleNetworkWatcher, err := network/networkWatcher.NewNetworkWatcher(ctx, "example", &network/networkWatcher.NetworkWatcherArgs{
// Name: "network-watcher",
// Location: example.Location,
// ResourceGroupName: example.Name,
// })
// if err != nil {
// return err
// }
// exampleVirtualNetwork, err := network/virtualNetwork.NewVirtualNetwork(ctx, "example", &network/virtualNetwork.VirtualNetworkArgs{
// Name: "production-network",
// AddressSpaces: []string{
// "10.0.0.0/16",
// },
// Location: example.Location,
// ResourceGroupName: example.Name,
// })
// if err != nil {
// return err
// }
// exampleSubnet, err := network/subnet.NewSubnet(ctx, "example", &network/subnet.SubnetArgs{
// Name: "internal",
// ResourceGroupName: example.Name,
// VirtualNetworkName: exampleVirtualNetwork.Name,
// AddressPrefixes: []string{
// "10.0.2.0/24",
// },
// })
// if err != nil {
// return err
// }
// exampleNetworkInterface, err := network/networkInterface.NewNetworkInterface(ctx, "example", &network/networkInterface.NetworkInterfaceArgs{
// Name: "pctest-nic",
// Location: example.Location,
// ResourceGroupName: example.Name,
// IpConfigurations: []map[string]interface{}{
// map[string]interface{}{
// "name": "testconfiguration1",
// "subnetId": exampleSubnet.Id,
// "privateIpAddressAllocation": "Dynamic",
// },
// },
// })
// if err != nil {
// return err
// }
// exampleVirtualMachine, err := compute/virtualMachine.NewVirtualMachine(ctx, "example", &compute/virtualMachine.VirtualMachineArgs{
// Name: "pctest-vm",
// Location: example.Location,
// ResourceGroupName: example.Name,
// NetworkInterfaceIds: []interface{}{
// exampleNetworkInterface.Id,
// },
// VmSize: "Standard_F2",
// StorageImageReference: map[string]interface{}{
// "publisher": "Canonical",
// "offer": "0001-com-ubuntu-server-jammy",
// "sku": "22_04-lts",
// "version": "latest",
// },
// StorageOsDisk: map[string]interface{}{
// "name": "osdisk",
// "caching": "ReadWrite",
// "createOption": "FromImage",
// "managedDiskType": "Standard_LRS",
// },
// OsProfile: map[string]interface{}{
// "computerName": "pctest-vm",
// "adminUsername": "testadmin",
// "adminPassword": "Password1234!",
// },
// OsProfileLinuxConfig: map[string]interface{}{
// "disablePasswordAuthentication": false,
// },
// })
// if err != nil {
// return err
// }
// _, err = compute/extension.NewExtension(ctx, "example", &compute/extension.ExtensionArgs{
// Name: "network-watcher",
// VirtualMachineId: exampleVirtualMachine.Id,
// Publisher: "Microsoft.Azure.NetworkWatcher",
// Type: "NetworkWatcherAgentLinux",
// TypeHandlerVersion: "1.4",
// AutoUpgradeMinorVersion: true,
// })
// if err != nil {
// return err
// }
// exampleAccount, err := storage/account.NewAccount(ctx, "example", &storage/account.AccountArgs{
// Name: "pctestsa",
// ResourceGroupName: example.Name,
// Location: example.Location,
// AccountTier: "Standard",
// AccountReplicationType: "LRS",
// })
// if err != nil {
// return err
// }
// _, err = network/networkPacketCapture.NewNetworkPacketCapture(ctx, "example", &network/networkPacketCapture.NetworkPacketCaptureArgs{
// Name: "pctestcapture",
// NetworkWatcherName: exampleNetworkWatcher.Name,
// ResourceGroupName: example.Name,
// TargetResourceId: exampleVirtualMachine.Id,
// StorageLocation: map[string]interface{}{
// "storageAccountId": exampleAccount.Id,
// },
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
//
// > **NOTE:** This Resource requires that [the Network Watcher Virtual Machine Extension](https://docs.microsoft.com/azure/network-watcher/network-watcher-packet-capture-manage-portal#before-you-begin) is installed on the Virtual Machine before capturing can be enabled which can be installed via the `compute.Extension` resource.
//
// ## Import
//
// Packet Captures can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:network/networkPacketCapture:NetworkPacketCapture capture1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/networkWatchers/watcher1/packetCaptures/capture1
// ```
type NetworkPacketCapture struct {
	pulumi.CustomResourceState

	// One or more `filter` blocks as defined below. Changing this forces a new resource to be created.
	Filters NetworkPacketCaptureFilterArrayOutput `pulumi:"filters"`
	// The number of bytes captured per packet. The remaining bytes are truncated. Defaults to `0` (Entire Packet Captured). Changing this forces a new resource to be created.
	MaximumBytesPerPacket pulumi.IntPtrOutput `pulumi:"maximumBytesPerPacket"`
	// Maximum size of the capture in Bytes. Defaults to `1073741824` (1GB). Changing this forces a new resource to be created.
	MaximumBytesPerSession pulumi.IntPtrOutput `pulumi:"maximumBytesPerSession"`
	// The maximum duration of the capture session in seconds. Defaults to `18000` (5 hours). Changing this forces a new resource to be created.
	MaximumCaptureDuration pulumi.IntPtrOutput `pulumi:"maximumCaptureDuration"`
	// The name to use for this Network Packet Capture. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Network Watcher. Changing this forces a new resource to be created.
	NetworkWatcherName pulumi.StringOutput `pulumi:"networkWatcherName"`
	// The name of the resource group in which the Network Watcher exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A `storageLocation` block as defined below. Changing this forces a new resource to be created.
	StorageLocation NetworkPacketCaptureStorageLocationOutput `pulumi:"storageLocation"`
	// The ID of the Resource to capture packets from. Changing this forces a new resource to be created.
	//
	// > **NOTE:** Currently only Virtual Machines IDs are supported.
	TargetResourceId pulumi.StringOutput `pulumi:"targetResourceId"`
}

// NewNetworkPacketCapture registers a new resource with the given unique name, arguments, and options.
func NewNetworkPacketCapture(ctx *pulumi.Context,
	name string, args *NetworkPacketCaptureArgs, opts ...pulumi.ResourceOption) (*NetworkPacketCapture, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkWatcherName == nil {
		return nil, errors.New("invalid value for required argument 'NetworkWatcherName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.StorageLocation == nil {
		return nil, errors.New("invalid value for required argument 'StorageLocation'")
	}
	if args.TargetResourceId == nil {
		return nil, errors.New("invalid value for required argument 'TargetResourceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkPacketCapture
	err := ctx.RegisterResource("azure:network/networkPacketCapture:NetworkPacketCapture", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkPacketCapture gets an existing NetworkPacketCapture resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkPacketCapture(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkPacketCaptureState, opts ...pulumi.ResourceOption) (*NetworkPacketCapture, error) {
	var resource NetworkPacketCapture
	err := ctx.ReadResource("azure:network/networkPacketCapture:NetworkPacketCapture", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkPacketCapture resources.
type networkPacketCaptureState struct {
	// One or more `filter` blocks as defined below. Changing this forces a new resource to be created.
	Filters []NetworkPacketCaptureFilter `pulumi:"filters"`
	// The number of bytes captured per packet. The remaining bytes are truncated. Defaults to `0` (Entire Packet Captured). Changing this forces a new resource to be created.
	MaximumBytesPerPacket *int `pulumi:"maximumBytesPerPacket"`
	// Maximum size of the capture in Bytes. Defaults to `1073741824` (1GB). Changing this forces a new resource to be created.
	MaximumBytesPerSession *int `pulumi:"maximumBytesPerSession"`
	// The maximum duration of the capture session in seconds. Defaults to `18000` (5 hours). Changing this forces a new resource to be created.
	MaximumCaptureDuration *int `pulumi:"maximumCaptureDuration"`
	// The name to use for this Network Packet Capture. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the Network Watcher. Changing this forces a new resource to be created.
	NetworkWatcherName *string `pulumi:"networkWatcherName"`
	// The name of the resource group in which the Network Watcher exists. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A `storageLocation` block as defined below. Changing this forces a new resource to be created.
	StorageLocation *NetworkPacketCaptureStorageLocation `pulumi:"storageLocation"`
	// The ID of the Resource to capture packets from. Changing this forces a new resource to be created.
	//
	// > **NOTE:** Currently only Virtual Machines IDs are supported.
	TargetResourceId *string `pulumi:"targetResourceId"`
}

type NetworkPacketCaptureState struct {
	// One or more `filter` blocks as defined below. Changing this forces a new resource to be created.
	Filters NetworkPacketCaptureFilterArrayInput
	// The number of bytes captured per packet. The remaining bytes are truncated. Defaults to `0` (Entire Packet Captured). Changing this forces a new resource to be created.
	MaximumBytesPerPacket pulumi.IntPtrInput
	// Maximum size of the capture in Bytes. Defaults to `1073741824` (1GB). Changing this forces a new resource to be created.
	MaximumBytesPerSession pulumi.IntPtrInput
	// The maximum duration of the capture session in seconds. Defaults to `18000` (5 hours). Changing this forces a new resource to be created.
	MaximumCaptureDuration pulumi.IntPtrInput
	// The name to use for this Network Packet Capture. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the Network Watcher. Changing this forces a new resource to be created.
	NetworkWatcherName pulumi.StringPtrInput
	// The name of the resource group in which the Network Watcher exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A `storageLocation` block as defined below. Changing this forces a new resource to be created.
	StorageLocation NetworkPacketCaptureStorageLocationPtrInput
	// The ID of the Resource to capture packets from. Changing this forces a new resource to be created.
	//
	// > **NOTE:** Currently only Virtual Machines IDs are supported.
	TargetResourceId pulumi.StringPtrInput
}

func (NetworkPacketCaptureState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkPacketCaptureState)(nil)).Elem()
}

type networkPacketCaptureArgs struct {
	// One or more `filter` blocks as defined below. Changing this forces a new resource to be created.
	Filters []NetworkPacketCaptureFilter `pulumi:"filters"`
	// The number of bytes captured per packet. The remaining bytes are truncated. Defaults to `0` (Entire Packet Captured). Changing this forces a new resource to be created.
	MaximumBytesPerPacket *int `pulumi:"maximumBytesPerPacket"`
	// Maximum size of the capture in Bytes. Defaults to `1073741824` (1GB). Changing this forces a new resource to be created.
	MaximumBytesPerSession *int `pulumi:"maximumBytesPerSession"`
	// The maximum duration of the capture session in seconds. Defaults to `18000` (5 hours). Changing this forces a new resource to be created.
	MaximumCaptureDuration *int `pulumi:"maximumCaptureDuration"`
	// The name to use for this Network Packet Capture. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the Network Watcher. Changing this forces a new resource to be created.
	NetworkWatcherName string `pulumi:"networkWatcherName"`
	// The name of the resource group in which the Network Watcher exists. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A `storageLocation` block as defined below. Changing this forces a new resource to be created.
	StorageLocation NetworkPacketCaptureStorageLocation `pulumi:"storageLocation"`
	// The ID of the Resource to capture packets from. Changing this forces a new resource to be created.
	//
	// > **NOTE:** Currently only Virtual Machines IDs are supported.
	TargetResourceId string `pulumi:"targetResourceId"`
}

// The set of arguments for constructing a NetworkPacketCapture resource.
type NetworkPacketCaptureArgs struct {
	// One or more `filter` blocks as defined below. Changing this forces a new resource to be created.
	Filters NetworkPacketCaptureFilterArrayInput
	// The number of bytes captured per packet. The remaining bytes are truncated. Defaults to `0` (Entire Packet Captured). Changing this forces a new resource to be created.
	MaximumBytesPerPacket pulumi.IntPtrInput
	// Maximum size of the capture in Bytes. Defaults to `1073741824` (1GB). Changing this forces a new resource to be created.
	MaximumBytesPerSession pulumi.IntPtrInput
	// The maximum duration of the capture session in seconds. Defaults to `18000` (5 hours). Changing this forces a new resource to be created.
	MaximumCaptureDuration pulumi.IntPtrInput
	// The name to use for this Network Packet Capture. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the Network Watcher. Changing this forces a new resource to be created.
	NetworkWatcherName pulumi.StringInput
	// The name of the resource group in which the Network Watcher exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A `storageLocation` block as defined below. Changing this forces a new resource to be created.
	StorageLocation NetworkPacketCaptureStorageLocationInput
	// The ID of the Resource to capture packets from. Changing this forces a new resource to be created.
	//
	// > **NOTE:** Currently only Virtual Machines IDs are supported.
	TargetResourceId pulumi.StringInput
}

func (NetworkPacketCaptureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkPacketCaptureArgs)(nil)).Elem()
}

type NetworkPacketCaptureInput interface {
	pulumi.Input

	ToNetworkPacketCaptureOutput() NetworkPacketCaptureOutput
	ToNetworkPacketCaptureOutputWithContext(ctx context.Context) NetworkPacketCaptureOutput
}

func (*NetworkPacketCapture) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPacketCapture)(nil)).Elem()
}

func (i *NetworkPacketCapture) ToNetworkPacketCaptureOutput() NetworkPacketCaptureOutput {
	return i.ToNetworkPacketCaptureOutputWithContext(context.Background())
}

func (i *NetworkPacketCapture) ToNetworkPacketCaptureOutputWithContext(ctx context.Context) NetworkPacketCaptureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPacketCaptureOutput)
}

// NetworkPacketCaptureArrayInput is an input type that accepts NetworkPacketCaptureArray and NetworkPacketCaptureArrayOutput values.
// You can construct a concrete instance of `NetworkPacketCaptureArrayInput` via:
//
//	NetworkPacketCaptureArray{ NetworkPacketCaptureArgs{...} }
type NetworkPacketCaptureArrayInput interface {
	pulumi.Input

	ToNetworkPacketCaptureArrayOutput() NetworkPacketCaptureArrayOutput
	ToNetworkPacketCaptureArrayOutputWithContext(context.Context) NetworkPacketCaptureArrayOutput
}

type NetworkPacketCaptureArray []NetworkPacketCaptureInput

func (NetworkPacketCaptureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkPacketCapture)(nil)).Elem()
}

func (i NetworkPacketCaptureArray) ToNetworkPacketCaptureArrayOutput() NetworkPacketCaptureArrayOutput {
	return i.ToNetworkPacketCaptureArrayOutputWithContext(context.Background())
}

func (i NetworkPacketCaptureArray) ToNetworkPacketCaptureArrayOutputWithContext(ctx context.Context) NetworkPacketCaptureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPacketCaptureArrayOutput)
}

// NetworkPacketCaptureMapInput is an input type that accepts NetworkPacketCaptureMap and NetworkPacketCaptureMapOutput values.
// You can construct a concrete instance of `NetworkPacketCaptureMapInput` via:
//
//	NetworkPacketCaptureMap{ "key": NetworkPacketCaptureArgs{...} }
type NetworkPacketCaptureMapInput interface {
	pulumi.Input

	ToNetworkPacketCaptureMapOutput() NetworkPacketCaptureMapOutput
	ToNetworkPacketCaptureMapOutputWithContext(context.Context) NetworkPacketCaptureMapOutput
}

type NetworkPacketCaptureMap map[string]NetworkPacketCaptureInput

func (NetworkPacketCaptureMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkPacketCapture)(nil)).Elem()
}

func (i NetworkPacketCaptureMap) ToNetworkPacketCaptureMapOutput() NetworkPacketCaptureMapOutput {
	return i.ToNetworkPacketCaptureMapOutputWithContext(context.Background())
}

func (i NetworkPacketCaptureMap) ToNetworkPacketCaptureMapOutputWithContext(ctx context.Context) NetworkPacketCaptureMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPacketCaptureMapOutput)
}

type NetworkPacketCaptureOutput struct{ *pulumi.OutputState }

func (NetworkPacketCaptureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPacketCapture)(nil)).Elem()
}

func (o NetworkPacketCaptureOutput) ToNetworkPacketCaptureOutput() NetworkPacketCaptureOutput {
	return o
}

func (o NetworkPacketCaptureOutput) ToNetworkPacketCaptureOutputWithContext(ctx context.Context) NetworkPacketCaptureOutput {
	return o
}

// One or more `filter` blocks as defined below. Changing this forces a new resource to be created.
func (o NetworkPacketCaptureOutput) Filters() NetworkPacketCaptureFilterArrayOutput {
	return o.ApplyT(func(v *NetworkPacketCapture) NetworkPacketCaptureFilterArrayOutput { return v.Filters }).(NetworkPacketCaptureFilterArrayOutput)
}

// The number of bytes captured per packet. The remaining bytes are truncated. Defaults to `0` (Entire Packet Captured). Changing this forces a new resource to be created.
func (o NetworkPacketCaptureOutput) MaximumBytesPerPacket() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkPacketCapture) pulumi.IntPtrOutput { return v.MaximumBytesPerPacket }).(pulumi.IntPtrOutput)
}

// Maximum size of the capture in Bytes. Defaults to `1073741824` (1GB). Changing this forces a new resource to be created.
func (o NetworkPacketCaptureOutput) MaximumBytesPerSession() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkPacketCapture) pulumi.IntPtrOutput { return v.MaximumBytesPerSession }).(pulumi.IntPtrOutput)
}

// The maximum duration of the capture session in seconds. Defaults to `18000` (5 hours). Changing this forces a new resource to be created.
func (o NetworkPacketCaptureOutput) MaximumCaptureDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkPacketCapture) pulumi.IntPtrOutput { return v.MaximumCaptureDuration }).(pulumi.IntPtrOutput)
}

// The name to use for this Network Packet Capture. Changing this forces a new resource to be created.
func (o NetworkPacketCaptureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPacketCapture) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the Network Watcher. Changing this forces a new resource to be created.
func (o NetworkPacketCaptureOutput) NetworkWatcherName() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPacketCapture) pulumi.StringOutput { return v.NetworkWatcherName }).(pulumi.StringOutput)
}

// The name of the resource group in which the Network Watcher exists. Changing this forces a new resource to be created.
func (o NetworkPacketCaptureOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPacketCapture) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A `storageLocation` block as defined below. Changing this forces a new resource to be created.
func (o NetworkPacketCaptureOutput) StorageLocation() NetworkPacketCaptureStorageLocationOutput {
	return o.ApplyT(func(v *NetworkPacketCapture) NetworkPacketCaptureStorageLocationOutput { return v.StorageLocation }).(NetworkPacketCaptureStorageLocationOutput)
}

// The ID of the Resource to capture packets from. Changing this forces a new resource to be created.
//
// > **NOTE:** Currently only Virtual Machines IDs are supported.
func (o NetworkPacketCaptureOutput) TargetResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPacketCapture) pulumi.StringOutput { return v.TargetResourceId }).(pulumi.StringOutput)
}

type NetworkPacketCaptureArrayOutput struct{ *pulumi.OutputState }

func (NetworkPacketCaptureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkPacketCapture)(nil)).Elem()
}

func (o NetworkPacketCaptureArrayOutput) ToNetworkPacketCaptureArrayOutput() NetworkPacketCaptureArrayOutput {
	return o
}

func (o NetworkPacketCaptureArrayOutput) ToNetworkPacketCaptureArrayOutputWithContext(ctx context.Context) NetworkPacketCaptureArrayOutput {
	return o
}

func (o NetworkPacketCaptureArrayOutput) Index(i pulumi.IntInput) NetworkPacketCaptureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkPacketCapture {
		return vs[0].([]*NetworkPacketCapture)[vs[1].(int)]
	}).(NetworkPacketCaptureOutput)
}

type NetworkPacketCaptureMapOutput struct{ *pulumi.OutputState }

func (NetworkPacketCaptureMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkPacketCapture)(nil)).Elem()
}

func (o NetworkPacketCaptureMapOutput) ToNetworkPacketCaptureMapOutput() NetworkPacketCaptureMapOutput {
	return o
}

func (o NetworkPacketCaptureMapOutput) ToNetworkPacketCaptureMapOutputWithContext(ctx context.Context) NetworkPacketCaptureMapOutput {
	return o
}

func (o NetworkPacketCaptureMapOutput) MapIndex(k pulumi.StringInput) NetworkPacketCaptureOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkPacketCapture {
		return vs[0].(map[string]*NetworkPacketCapture)[vs[1].(string)]
	}).(NetworkPacketCaptureOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPacketCaptureInput)(nil)).Elem(), &NetworkPacketCapture{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPacketCaptureArrayInput)(nil)).Elem(), NetworkPacketCaptureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPacketCaptureMapInput)(nil)).Elem(), NetworkPacketCaptureMap{})
	pulumi.RegisterOutputType(NetworkPacketCaptureOutput{})
	pulumi.RegisterOutputType(NetworkPacketCaptureArrayOutput{})
	pulumi.RegisterOutputType(NetworkPacketCaptureMapOutput{})
}
