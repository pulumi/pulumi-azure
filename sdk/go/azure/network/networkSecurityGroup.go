// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a network security group that contains a list of network security rules.  Network security groups enable inbound or outbound traffic to be enabled or denied.
//
// > **NOTE on Network Security Groups and Network Security Rules:** This provider currently
// provides both a standalone Network Security Rule resource, and allows for Network Security Rules to be defined in-line within the Network Security Group resource.
// At this time you cannot use a Network Security Group with in-line Network Security Rules in conjunction with any Network Security Rule resources. Doing so will cause a conflict of rule settings and will overwrite rules.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = network.NewNetworkSecurityGroup(ctx, "exampleNetworkSecurityGroup", &network.NetworkSecurityGroupArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				SecurityRules: network.NetworkSecurityGroupSecurityRuleArray{
//					&network.NetworkSecurityGroupSecurityRuleArgs{
//						Name:                     pulumi.String("test123"),
//						Priority:                 pulumi.Int(100),
//						Direction:                pulumi.String("Inbound"),
//						Access:                   pulumi.String("Allow"),
//						Protocol:                 pulumi.String("Tcp"),
//						SourcePortRange:          pulumi.String("*"),
//						DestinationPortRange:     pulumi.String("*"),
//						SourceAddressPrefix:      pulumi.String("*"),
//						DestinationAddressPrefix: pulumi.String("*"),
//					},
//				},
//				Tags: pulumi.StringMap{
//					"environment": pulumi.String("Production"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Network Security Groups can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:network/networkSecurityGroup:NetworkSecurityGroup group1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/networkSecurityGroups/mySecurityGroup
//
// ```
type NetworkSecurityGroup struct {
	pulumi.CustomResourceState

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the security rule.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the resource group in which to create the network security group. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A list of objects representing security rules, as defined below.
	//
	// > **NOTE** Since `securityRule` can be configured both inline and via the separate `network.NetworkSecurityRule` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
	SecurityRules NetworkSecurityGroupSecurityRuleArrayOutput `pulumi:"securityRules"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewNetworkSecurityGroup registers a new resource with the given unique name, arguments, and options.
func NewNetworkSecurityGroup(ctx *pulumi.Context,
	name string, args *NetworkSecurityGroupArgs, opts ...pulumi.ResourceOption) (*NetworkSecurityGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkSecurityGroup
	err := ctx.RegisterResource("azure:network/networkSecurityGroup:NetworkSecurityGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkSecurityGroup gets an existing NetworkSecurityGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkSecurityGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkSecurityGroupState, opts ...pulumi.ResourceOption) (*NetworkSecurityGroup, error) {
	var resource NetworkSecurityGroup
	err := ctx.ReadResource("azure:network/networkSecurityGroup:NetworkSecurityGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkSecurityGroup resources.
type networkSecurityGroupState struct {
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name of the security rule.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to create the network security group. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A list of objects representing security rules, as defined below.
	//
	// > **NOTE** Since `securityRule` can be configured both inline and via the separate `network.NetworkSecurityRule` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
	SecurityRules []NetworkSecurityGroupSecurityRule `pulumi:"securityRules"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

type NetworkSecurityGroupState struct {
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name of the security rule.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to create the network security group. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A list of objects representing security rules, as defined below.
	//
	// > **NOTE** Since `securityRule` can be configured both inline and via the separate `network.NetworkSecurityRule` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
	SecurityRules NetworkSecurityGroupSecurityRuleArrayInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
}

func (NetworkSecurityGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkSecurityGroupState)(nil)).Elem()
}

type networkSecurityGroupArgs struct {
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name of the security rule.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to create the network security group. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A list of objects representing security rules, as defined below.
	//
	// > **NOTE** Since `securityRule` can be configured both inline and via the separate `network.NetworkSecurityRule` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
	SecurityRules []NetworkSecurityGroupSecurityRule `pulumi:"securityRules"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a NetworkSecurityGroup resource.
type NetworkSecurityGroupArgs struct {
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name of the security rule.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to create the network security group. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A list of objects representing security rules, as defined below.
	//
	// > **NOTE** Since `securityRule` can be configured both inline and via the separate `network.NetworkSecurityRule` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
	SecurityRules NetworkSecurityGroupSecurityRuleArrayInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
}

func (NetworkSecurityGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkSecurityGroupArgs)(nil)).Elem()
}

type NetworkSecurityGroupInput interface {
	pulumi.Input

	ToNetworkSecurityGroupOutput() NetworkSecurityGroupOutput
	ToNetworkSecurityGroupOutputWithContext(ctx context.Context) NetworkSecurityGroupOutput
}

func (*NetworkSecurityGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkSecurityGroup)(nil)).Elem()
}

func (i *NetworkSecurityGroup) ToNetworkSecurityGroupOutput() NetworkSecurityGroupOutput {
	return i.ToNetworkSecurityGroupOutputWithContext(context.Background())
}

func (i *NetworkSecurityGroup) ToNetworkSecurityGroupOutputWithContext(ctx context.Context) NetworkSecurityGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSecurityGroupOutput)
}

// NetworkSecurityGroupArrayInput is an input type that accepts NetworkSecurityGroupArray and NetworkSecurityGroupArrayOutput values.
// You can construct a concrete instance of `NetworkSecurityGroupArrayInput` via:
//
//	NetworkSecurityGroupArray{ NetworkSecurityGroupArgs{...} }
type NetworkSecurityGroupArrayInput interface {
	pulumi.Input

	ToNetworkSecurityGroupArrayOutput() NetworkSecurityGroupArrayOutput
	ToNetworkSecurityGroupArrayOutputWithContext(context.Context) NetworkSecurityGroupArrayOutput
}

type NetworkSecurityGroupArray []NetworkSecurityGroupInput

func (NetworkSecurityGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkSecurityGroup)(nil)).Elem()
}

func (i NetworkSecurityGroupArray) ToNetworkSecurityGroupArrayOutput() NetworkSecurityGroupArrayOutput {
	return i.ToNetworkSecurityGroupArrayOutputWithContext(context.Background())
}

func (i NetworkSecurityGroupArray) ToNetworkSecurityGroupArrayOutputWithContext(ctx context.Context) NetworkSecurityGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSecurityGroupArrayOutput)
}

// NetworkSecurityGroupMapInput is an input type that accepts NetworkSecurityGroupMap and NetworkSecurityGroupMapOutput values.
// You can construct a concrete instance of `NetworkSecurityGroupMapInput` via:
//
//	NetworkSecurityGroupMap{ "key": NetworkSecurityGroupArgs{...} }
type NetworkSecurityGroupMapInput interface {
	pulumi.Input

	ToNetworkSecurityGroupMapOutput() NetworkSecurityGroupMapOutput
	ToNetworkSecurityGroupMapOutputWithContext(context.Context) NetworkSecurityGroupMapOutput
}

type NetworkSecurityGroupMap map[string]NetworkSecurityGroupInput

func (NetworkSecurityGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkSecurityGroup)(nil)).Elem()
}

func (i NetworkSecurityGroupMap) ToNetworkSecurityGroupMapOutput() NetworkSecurityGroupMapOutput {
	return i.ToNetworkSecurityGroupMapOutputWithContext(context.Background())
}

func (i NetworkSecurityGroupMap) ToNetworkSecurityGroupMapOutputWithContext(ctx context.Context) NetworkSecurityGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSecurityGroupMapOutput)
}

type NetworkSecurityGroupOutput struct{ *pulumi.OutputState }

func (NetworkSecurityGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkSecurityGroup)(nil)).Elem()
}

func (o NetworkSecurityGroupOutput) ToNetworkSecurityGroupOutput() NetworkSecurityGroupOutput {
	return o
}

func (o NetworkSecurityGroupOutput) ToNetworkSecurityGroupOutputWithContext(ctx context.Context) NetworkSecurityGroupOutput {
	return o
}

// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
func (o NetworkSecurityGroupOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSecurityGroup) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the security rule.
func (o NetworkSecurityGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSecurityGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the resource group in which to create the network security group. Changing this forces a new resource to be created.
func (o NetworkSecurityGroupOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSecurityGroup) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A list of objects representing security rules, as defined below.
//
// > **NOTE** Since `securityRule` can be configured both inline and via the separate `network.NetworkSecurityRule` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
func (o NetworkSecurityGroupOutput) SecurityRules() NetworkSecurityGroupSecurityRuleArrayOutput {
	return o.ApplyT(func(v *NetworkSecurityGroup) NetworkSecurityGroupSecurityRuleArrayOutput { return v.SecurityRules }).(NetworkSecurityGroupSecurityRuleArrayOutput)
}

// A mapping of tags to assign to the resource.
func (o NetworkSecurityGroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkSecurityGroup) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type NetworkSecurityGroupArrayOutput struct{ *pulumi.OutputState }

func (NetworkSecurityGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkSecurityGroup)(nil)).Elem()
}

func (o NetworkSecurityGroupArrayOutput) ToNetworkSecurityGroupArrayOutput() NetworkSecurityGroupArrayOutput {
	return o
}

func (o NetworkSecurityGroupArrayOutput) ToNetworkSecurityGroupArrayOutputWithContext(ctx context.Context) NetworkSecurityGroupArrayOutput {
	return o
}

func (o NetworkSecurityGroupArrayOutput) Index(i pulumi.IntInput) NetworkSecurityGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkSecurityGroup {
		return vs[0].([]*NetworkSecurityGroup)[vs[1].(int)]
	}).(NetworkSecurityGroupOutput)
}

type NetworkSecurityGroupMapOutput struct{ *pulumi.OutputState }

func (NetworkSecurityGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkSecurityGroup)(nil)).Elem()
}

func (o NetworkSecurityGroupMapOutput) ToNetworkSecurityGroupMapOutput() NetworkSecurityGroupMapOutput {
	return o
}

func (o NetworkSecurityGroupMapOutput) ToNetworkSecurityGroupMapOutputWithContext(ctx context.Context) NetworkSecurityGroupMapOutput {
	return o
}

func (o NetworkSecurityGroupMapOutput) MapIndex(k pulumi.StringInput) NetworkSecurityGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkSecurityGroup {
		return vs[0].(map[string]*NetworkSecurityGroup)[vs[1].(string)]
	}).(NetworkSecurityGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSecurityGroupInput)(nil)).Elem(), &NetworkSecurityGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSecurityGroupArrayInput)(nil)).Elem(), NetworkSecurityGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSecurityGroupMapInput)(nil)).Elem(), NetworkSecurityGroupMap{})
	pulumi.RegisterOutputType(NetworkSecurityGroupOutput{})
	pulumi.RegisterOutputType(NetworkSecurityGroupArrayOutput{})
	pulumi.RegisterOutputType(NetworkSecurityGroupMapOutput{})
}
