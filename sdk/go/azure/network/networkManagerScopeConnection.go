// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Network Manager Scope Connection which may cross tenants.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			currentClientConfig, err := core.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			currentSubscription, err := core.LookupSubscription(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			alt, err := core.LookupSubscription(ctx, &core.LookupSubscriptionArgs{
//				SubscriptionId: pulumi.StringRef("00000000-0000-0000-0000-000000000000"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleNetworkManager, err := network.NewNetworkManager(ctx, "exampleNetworkManager", &network.NetworkManagerArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Scope: &network.NetworkManagerScopeArgs{
//					SubscriptionIds: pulumi.StringArray{
//						*pulumi.String(currentSubscription.Id),
//					},
//				},
//				ScopeAccesses: pulumi.StringArray{
//					pulumi.String("SecurityAdmin"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = network.NewNetworkManagerScopeConnection(ctx, "exampleNetworkManagerScopeConnection", &network.NetworkManagerScopeConnectionArgs{
//				NetworkManagerId: exampleNetworkManager.ID(),
//				TenantId:         *pulumi.String(currentClientConfig.TenantId),
//				TargetScopeId:    *pulumi.String(alt.Id),
//				Description:      pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Network Manager Scope Connection can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:network/networkManagerScopeConnection:NetworkManagerScopeConnection example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Network/networkManagers/networkManager1/scopeConnections/scopeConnection1
//
// ```
type NetworkManagerScopeConnection struct {
	pulumi.CustomResourceState

	// The Connection state of the Network Manager Scope Connection.
	ConnectionState pulumi.StringOutput `pulumi:"connectionState"`
	// A description of the Network Manager Scope Connection.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the name which should be used for this Network Manager Scope Connection. Changing this forces a new Network Manager Scope Connection to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the ID of the Network Manager Scope Connection. Changing this forces a new Network Manager Scope Connection to be created.
	NetworkManagerId pulumi.StringOutput `pulumi:"networkManagerId"`
	// Specifies the Resource ID of the target scope which the Network Manager is connected to. It should be either Subscription ID or Management Group ID.
	TargetScopeId pulumi.StringOutput `pulumi:"targetScopeId"`
	// Specifies the Tenant ID of the Resource which the Network Manager is connected to.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewNetworkManagerScopeConnection registers a new resource with the given unique name, arguments, and options.
func NewNetworkManagerScopeConnection(ctx *pulumi.Context,
	name string, args *NetworkManagerScopeConnectionArgs, opts ...pulumi.ResourceOption) (*NetworkManagerScopeConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkManagerId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkManagerId'")
	}
	if args.TargetScopeId == nil {
		return nil, errors.New("invalid value for required argument 'TargetScopeId'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkManagerScopeConnection
	err := ctx.RegisterResource("azure:network/networkManagerScopeConnection:NetworkManagerScopeConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkManagerScopeConnection gets an existing NetworkManagerScopeConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkManagerScopeConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkManagerScopeConnectionState, opts ...pulumi.ResourceOption) (*NetworkManagerScopeConnection, error) {
	var resource NetworkManagerScopeConnection
	err := ctx.ReadResource("azure:network/networkManagerScopeConnection:NetworkManagerScopeConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkManagerScopeConnection resources.
type networkManagerScopeConnectionState struct {
	// The Connection state of the Network Manager Scope Connection.
	ConnectionState *string `pulumi:"connectionState"`
	// A description of the Network Manager Scope Connection.
	Description *string `pulumi:"description"`
	// Specifies the name which should be used for this Network Manager Scope Connection. Changing this forces a new Network Manager Scope Connection to be created.
	Name *string `pulumi:"name"`
	// Specifies the ID of the Network Manager Scope Connection. Changing this forces a new Network Manager Scope Connection to be created.
	NetworkManagerId *string `pulumi:"networkManagerId"`
	// Specifies the Resource ID of the target scope which the Network Manager is connected to. It should be either Subscription ID or Management Group ID.
	TargetScopeId *string `pulumi:"targetScopeId"`
	// Specifies the Tenant ID of the Resource which the Network Manager is connected to.
	TenantId *string `pulumi:"tenantId"`
}

type NetworkManagerScopeConnectionState struct {
	// The Connection state of the Network Manager Scope Connection.
	ConnectionState pulumi.StringPtrInput
	// A description of the Network Manager Scope Connection.
	Description pulumi.StringPtrInput
	// Specifies the name which should be used for this Network Manager Scope Connection. Changing this forces a new Network Manager Scope Connection to be created.
	Name pulumi.StringPtrInput
	// Specifies the ID of the Network Manager Scope Connection. Changing this forces a new Network Manager Scope Connection to be created.
	NetworkManagerId pulumi.StringPtrInput
	// Specifies the Resource ID of the target scope which the Network Manager is connected to. It should be either Subscription ID or Management Group ID.
	TargetScopeId pulumi.StringPtrInput
	// Specifies the Tenant ID of the Resource which the Network Manager is connected to.
	TenantId pulumi.StringPtrInput
}

func (NetworkManagerScopeConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkManagerScopeConnectionState)(nil)).Elem()
}

type networkManagerScopeConnectionArgs struct {
	// A description of the Network Manager Scope Connection.
	Description *string `pulumi:"description"`
	// Specifies the name which should be used for this Network Manager Scope Connection. Changing this forces a new Network Manager Scope Connection to be created.
	Name *string `pulumi:"name"`
	// Specifies the ID of the Network Manager Scope Connection. Changing this forces a new Network Manager Scope Connection to be created.
	NetworkManagerId string `pulumi:"networkManagerId"`
	// Specifies the Resource ID of the target scope which the Network Manager is connected to. It should be either Subscription ID or Management Group ID.
	TargetScopeId string `pulumi:"targetScopeId"`
	// Specifies the Tenant ID of the Resource which the Network Manager is connected to.
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a NetworkManagerScopeConnection resource.
type NetworkManagerScopeConnectionArgs struct {
	// A description of the Network Manager Scope Connection.
	Description pulumi.StringPtrInput
	// Specifies the name which should be used for this Network Manager Scope Connection. Changing this forces a new Network Manager Scope Connection to be created.
	Name pulumi.StringPtrInput
	// Specifies the ID of the Network Manager Scope Connection. Changing this forces a new Network Manager Scope Connection to be created.
	NetworkManagerId pulumi.StringInput
	// Specifies the Resource ID of the target scope which the Network Manager is connected to. It should be either Subscription ID or Management Group ID.
	TargetScopeId pulumi.StringInput
	// Specifies the Tenant ID of the Resource which the Network Manager is connected to.
	TenantId pulumi.StringInput
}

func (NetworkManagerScopeConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkManagerScopeConnectionArgs)(nil)).Elem()
}

type NetworkManagerScopeConnectionInput interface {
	pulumi.Input

	ToNetworkManagerScopeConnectionOutput() NetworkManagerScopeConnectionOutput
	ToNetworkManagerScopeConnectionOutputWithContext(ctx context.Context) NetworkManagerScopeConnectionOutput
}

func (*NetworkManagerScopeConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkManagerScopeConnection)(nil)).Elem()
}

func (i *NetworkManagerScopeConnection) ToNetworkManagerScopeConnectionOutput() NetworkManagerScopeConnectionOutput {
	return i.ToNetworkManagerScopeConnectionOutputWithContext(context.Background())
}

func (i *NetworkManagerScopeConnection) ToNetworkManagerScopeConnectionOutputWithContext(ctx context.Context) NetworkManagerScopeConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkManagerScopeConnectionOutput)
}

// NetworkManagerScopeConnectionArrayInput is an input type that accepts NetworkManagerScopeConnectionArray and NetworkManagerScopeConnectionArrayOutput values.
// You can construct a concrete instance of `NetworkManagerScopeConnectionArrayInput` via:
//
//	NetworkManagerScopeConnectionArray{ NetworkManagerScopeConnectionArgs{...} }
type NetworkManagerScopeConnectionArrayInput interface {
	pulumi.Input

	ToNetworkManagerScopeConnectionArrayOutput() NetworkManagerScopeConnectionArrayOutput
	ToNetworkManagerScopeConnectionArrayOutputWithContext(context.Context) NetworkManagerScopeConnectionArrayOutput
}

type NetworkManagerScopeConnectionArray []NetworkManagerScopeConnectionInput

func (NetworkManagerScopeConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkManagerScopeConnection)(nil)).Elem()
}

func (i NetworkManagerScopeConnectionArray) ToNetworkManagerScopeConnectionArrayOutput() NetworkManagerScopeConnectionArrayOutput {
	return i.ToNetworkManagerScopeConnectionArrayOutputWithContext(context.Background())
}

func (i NetworkManagerScopeConnectionArray) ToNetworkManagerScopeConnectionArrayOutputWithContext(ctx context.Context) NetworkManagerScopeConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkManagerScopeConnectionArrayOutput)
}

// NetworkManagerScopeConnectionMapInput is an input type that accepts NetworkManagerScopeConnectionMap and NetworkManagerScopeConnectionMapOutput values.
// You can construct a concrete instance of `NetworkManagerScopeConnectionMapInput` via:
//
//	NetworkManagerScopeConnectionMap{ "key": NetworkManagerScopeConnectionArgs{...} }
type NetworkManagerScopeConnectionMapInput interface {
	pulumi.Input

	ToNetworkManagerScopeConnectionMapOutput() NetworkManagerScopeConnectionMapOutput
	ToNetworkManagerScopeConnectionMapOutputWithContext(context.Context) NetworkManagerScopeConnectionMapOutput
}

type NetworkManagerScopeConnectionMap map[string]NetworkManagerScopeConnectionInput

func (NetworkManagerScopeConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkManagerScopeConnection)(nil)).Elem()
}

func (i NetworkManagerScopeConnectionMap) ToNetworkManagerScopeConnectionMapOutput() NetworkManagerScopeConnectionMapOutput {
	return i.ToNetworkManagerScopeConnectionMapOutputWithContext(context.Background())
}

func (i NetworkManagerScopeConnectionMap) ToNetworkManagerScopeConnectionMapOutputWithContext(ctx context.Context) NetworkManagerScopeConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkManagerScopeConnectionMapOutput)
}

type NetworkManagerScopeConnectionOutput struct{ *pulumi.OutputState }

func (NetworkManagerScopeConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkManagerScopeConnection)(nil)).Elem()
}

func (o NetworkManagerScopeConnectionOutput) ToNetworkManagerScopeConnectionOutput() NetworkManagerScopeConnectionOutput {
	return o
}

func (o NetworkManagerScopeConnectionOutput) ToNetworkManagerScopeConnectionOutputWithContext(ctx context.Context) NetworkManagerScopeConnectionOutput {
	return o
}

// The Connection state of the Network Manager Scope Connection.
func (o NetworkManagerScopeConnectionOutput) ConnectionState() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkManagerScopeConnection) pulumi.StringOutput { return v.ConnectionState }).(pulumi.StringOutput)
}

// A description of the Network Manager Scope Connection.
func (o NetworkManagerScopeConnectionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkManagerScopeConnection) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the name which should be used for this Network Manager Scope Connection. Changing this forces a new Network Manager Scope Connection to be created.
func (o NetworkManagerScopeConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkManagerScopeConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the ID of the Network Manager Scope Connection. Changing this forces a new Network Manager Scope Connection to be created.
func (o NetworkManagerScopeConnectionOutput) NetworkManagerId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkManagerScopeConnection) pulumi.StringOutput { return v.NetworkManagerId }).(pulumi.StringOutput)
}

// Specifies the Resource ID of the target scope which the Network Manager is connected to. It should be either Subscription ID or Management Group ID.
func (o NetworkManagerScopeConnectionOutput) TargetScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkManagerScopeConnection) pulumi.StringOutput { return v.TargetScopeId }).(pulumi.StringOutput)
}

// Specifies the Tenant ID of the Resource which the Network Manager is connected to.
func (o NetworkManagerScopeConnectionOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkManagerScopeConnection) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type NetworkManagerScopeConnectionArrayOutput struct{ *pulumi.OutputState }

func (NetworkManagerScopeConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkManagerScopeConnection)(nil)).Elem()
}

func (o NetworkManagerScopeConnectionArrayOutput) ToNetworkManagerScopeConnectionArrayOutput() NetworkManagerScopeConnectionArrayOutput {
	return o
}

func (o NetworkManagerScopeConnectionArrayOutput) ToNetworkManagerScopeConnectionArrayOutputWithContext(ctx context.Context) NetworkManagerScopeConnectionArrayOutput {
	return o
}

func (o NetworkManagerScopeConnectionArrayOutput) Index(i pulumi.IntInput) NetworkManagerScopeConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkManagerScopeConnection {
		return vs[0].([]*NetworkManagerScopeConnection)[vs[1].(int)]
	}).(NetworkManagerScopeConnectionOutput)
}

type NetworkManagerScopeConnectionMapOutput struct{ *pulumi.OutputState }

func (NetworkManagerScopeConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkManagerScopeConnection)(nil)).Elem()
}

func (o NetworkManagerScopeConnectionMapOutput) ToNetworkManagerScopeConnectionMapOutput() NetworkManagerScopeConnectionMapOutput {
	return o
}

func (o NetworkManagerScopeConnectionMapOutput) ToNetworkManagerScopeConnectionMapOutputWithContext(ctx context.Context) NetworkManagerScopeConnectionMapOutput {
	return o
}

func (o NetworkManagerScopeConnectionMapOutput) MapIndex(k pulumi.StringInput) NetworkManagerScopeConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkManagerScopeConnection {
		return vs[0].(map[string]*NetworkManagerScopeConnection)[vs[1].(string)]
	}).(NetworkManagerScopeConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkManagerScopeConnectionInput)(nil)).Elem(), &NetworkManagerScopeConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkManagerScopeConnectionArrayInput)(nil)).Elem(), NetworkManagerScopeConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkManagerScopeConnectionMapInput)(nil)).Elem(), NetworkManagerScopeConnectionMap{})
	pulumi.RegisterOutputType(NetworkManagerScopeConnectionOutput{})
	pulumi.RegisterOutputType(NetworkManagerScopeConnectionArrayOutput{})
	pulumi.RegisterOutputType(NetworkManagerScopeConnectionMapOutput{})
}
