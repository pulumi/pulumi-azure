// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an ExpressRoute Port Authorization.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleExpressRoutePort, err := network.NewExpressRoutePort(ctx, "exampleExpressRoutePort", &network.ExpressRoutePortArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				PeeringLocation:   pulumi.String("Airtel-Chennai-CLS"),
//				BandwidthInGbps:   pulumi.Int(10),
//				Encapsulation:     pulumi.String("Dot1Q"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = network.NewExpressRoutePortAuthorization(ctx, "exampleExpressRoutePortAuthorization", &network.ExpressRoutePortAuthorizationArgs{
//				ExpressRoutePortName: exampleExpressRoutePort.Name,
//				ResourceGroupName:    exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ExpressRoute Port Authorizations can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:network/expressRoutePortAuthorization:ExpressRoutePortAuthorization auth1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/expressRoutePorts/myExpressPort/authorizations/auth1
//
// ```
type ExpressRoutePortAuthorization struct {
	pulumi.CustomResourceState

	// The Authorization Key.
	AuthorizationKey pulumi.StringOutput `pulumi:"authorizationKey"`
	// The authorization use status.
	AuthorizationUseStatus pulumi.StringOutput `pulumi:"authorizationUseStatus"`
	// The name of the Express Route Port in which to create the Authorization. Changing this forces a new resource to be created.
	ExpressRoutePortName pulumi.StringOutput `pulumi:"expressRoutePortName"`
	// The name of the ExpressRoute Port. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the resource group in which to create the ExpressRoute Port. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
}

// NewExpressRoutePortAuthorization registers a new resource with the given unique name, arguments, and options.
func NewExpressRoutePortAuthorization(ctx *pulumi.Context,
	name string, args *ExpressRoutePortAuthorizationArgs, opts ...pulumi.ResourceOption) (*ExpressRoutePortAuthorization, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExpressRoutePortName == nil {
		return nil, errors.New("invalid value for required argument 'ExpressRoutePortName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"authorizationKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ExpressRoutePortAuthorization
	err := ctx.RegisterResource("azure:network/expressRoutePortAuthorization:ExpressRoutePortAuthorization", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExpressRoutePortAuthorization gets an existing ExpressRoutePortAuthorization resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExpressRoutePortAuthorization(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExpressRoutePortAuthorizationState, opts ...pulumi.ResourceOption) (*ExpressRoutePortAuthorization, error) {
	var resource ExpressRoutePortAuthorization
	err := ctx.ReadResource("azure:network/expressRoutePortAuthorization:ExpressRoutePortAuthorization", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExpressRoutePortAuthorization resources.
type expressRoutePortAuthorizationState struct {
	// The Authorization Key.
	AuthorizationKey *string `pulumi:"authorizationKey"`
	// The authorization use status.
	AuthorizationUseStatus *string `pulumi:"authorizationUseStatus"`
	// The name of the Express Route Port in which to create the Authorization. Changing this forces a new resource to be created.
	ExpressRoutePortName *string `pulumi:"expressRoutePortName"`
	// The name of the ExpressRoute Port. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to create the ExpressRoute Port. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
}

type ExpressRoutePortAuthorizationState struct {
	// The Authorization Key.
	AuthorizationKey pulumi.StringPtrInput
	// The authorization use status.
	AuthorizationUseStatus pulumi.StringPtrInput
	// The name of the Express Route Port in which to create the Authorization. Changing this forces a new resource to be created.
	ExpressRoutePortName pulumi.StringPtrInput
	// The name of the ExpressRoute Port. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to create the ExpressRoute Port. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
}

func (ExpressRoutePortAuthorizationState) ElementType() reflect.Type {
	return reflect.TypeOf((*expressRoutePortAuthorizationState)(nil)).Elem()
}

type expressRoutePortAuthorizationArgs struct {
	// The name of the Express Route Port in which to create the Authorization. Changing this forces a new resource to be created.
	ExpressRoutePortName string `pulumi:"expressRoutePortName"`
	// The name of the ExpressRoute Port. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to create the ExpressRoute Port. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a ExpressRoutePortAuthorization resource.
type ExpressRoutePortAuthorizationArgs struct {
	// The name of the Express Route Port in which to create the Authorization. Changing this forces a new resource to be created.
	ExpressRoutePortName pulumi.StringInput
	// The name of the ExpressRoute Port. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to create the ExpressRoute Port. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
}

func (ExpressRoutePortAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*expressRoutePortAuthorizationArgs)(nil)).Elem()
}

type ExpressRoutePortAuthorizationInput interface {
	pulumi.Input

	ToExpressRoutePortAuthorizationOutput() ExpressRoutePortAuthorizationOutput
	ToExpressRoutePortAuthorizationOutputWithContext(ctx context.Context) ExpressRoutePortAuthorizationOutput
}

func (*ExpressRoutePortAuthorization) ElementType() reflect.Type {
	return reflect.TypeOf((**ExpressRoutePortAuthorization)(nil)).Elem()
}

func (i *ExpressRoutePortAuthorization) ToExpressRoutePortAuthorizationOutput() ExpressRoutePortAuthorizationOutput {
	return i.ToExpressRoutePortAuthorizationOutputWithContext(context.Background())
}

func (i *ExpressRoutePortAuthorization) ToExpressRoutePortAuthorizationOutputWithContext(ctx context.Context) ExpressRoutePortAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpressRoutePortAuthorizationOutput)
}

// ExpressRoutePortAuthorizationArrayInput is an input type that accepts ExpressRoutePortAuthorizationArray and ExpressRoutePortAuthorizationArrayOutput values.
// You can construct a concrete instance of `ExpressRoutePortAuthorizationArrayInput` via:
//
//	ExpressRoutePortAuthorizationArray{ ExpressRoutePortAuthorizationArgs{...} }
type ExpressRoutePortAuthorizationArrayInput interface {
	pulumi.Input

	ToExpressRoutePortAuthorizationArrayOutput() ExpressRoutePortAuthorizationArrayOutput
	ToExpressRoutePortAuthorizationArrayOutputWithContext(context.Context) ExpressRoutePortAuthorizationArrayOutput
}

type ExpressRoutePortAuthorizationArray []ExpressRoutePortAuthorizationInput

func (ExpressRoutePortAuthorizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExpressRoutePortAuthorization)(nil)).Elem()
}

func (i ExpressRoutePortAuthorizationArray) ToExpressRoutePortAuthorizationArrayOutput() ExpressRoutePortAuthorizationArrayOutput {
	return i.ToExpressRoutePortAuthorizationArrayOutputWithContext(context.Background())
}

func (i ExpressRoutePortAuthorizationArray) ToExpressRoutePortAuthorizationArrayOutputWithContext(ctx context.Context) ExpressRoutePortAuthorizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpressRoutePortAuthorizationArrayOutput)
}

// ExpressRoutePortAuthorizationMapInput is an input type that accepts ExpressRoutePortAuthorizationMap and ExpressRoutePortAuthorizationMapOutput values.
// You can construct a concrete instance of `ExpressRoutePortAuthorizationMapInput` via:
//
//	ExpressRoutePortAuthorizationMap{ "key": ExpressRoutePortAuthorizationArgs{...} }
type ExpressRoutePortAuthorizationMapInput interface {
	pulumi.Input

	ToExpressRoutePortAuthorizationMapOutput() ExpressRoutePortAuthorizationMapOutput
	ToExpressRoutePortAuthorizationMapOutputWithContext(context.Context) ExpressRoutePortAuthorizationMapOutput
}

type ExpressRoutePortAuthorizationMap map[string]ExpressRoutePortAuthorizationInput

func (ExpressRoutePortAuthorizationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExpressRoutePortAuthorization)(nil)).Elem()
}

func (i ExpressRoutePortAuthorizationMap) ToExpressRoutePortAuthorizationMapOutput() ExpressRoutePortAuthorizationMapOutput {
	return i.ToExpressRoutePortAuthorizationMapOutputWithContext(context.Background())
}

func (i ExpressRoutePortAuthorizationMap) ToExpressRoutePortAuthorizationMapOutputWithContext(ctx context.Context) ExpressRoutePortAuthorizationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpressRoutePortAuthorizationMapOutput)
}

type ExpressRoutePortAuthorizationOutput struct{ *pulumi.OutputState }

func (ExpressRoutePortAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExpressRoutePortAuthorization)(nil)).Elem()
}

func (o ExpressRoutePortAuthorizationOutput) ToExpressRoutePortAuthorizationOutput() ExpressRoutePortAuthorizationOutput {
	return o
}

func (o ExpressRoutePortAuthorizationOutput) ToExpressRoutePortAuthorizationOutputWithContext(ctx context.Context) ExpressRoutePortAuthorizationOutput {
	return o
}

// The Authorization Key.
func (o ExpressRoutePortAuthorizationOutput) AuthorizationKey() pulumi.StringOutput {
	return o.ApplyT(func(v *ExpressRoutePortAuthorization) pulumi.StringOutput { return v.AuthorizationKey }).(pulumi.StringOutput)
}

// The authorization use status.
func (o ExpressRoutePortAuthorizationOutput) AuthorizationUseStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *ExpressRoutePortAuthorization) pulumi.StringOutput { return v.AuthorizationUseStatus }).(pulumi.StringOutput)
}

// The name of the Express Route Port in which to create the Authorization. Changing this forces a new resource to be created.
func (o ExpressRoutePortAuthorizationOutput) ExpressRoutePortName() pulumi.StringOutput {
	return o.ApplyT(func(v *ExpressRoutePortAuthorization) pulumi.StringOutput { return v.ExpressRoutePortName }).(pulumi.StringOutput)
}

// The name of the ExpressRoute Port. Changing this forces a new resource to be created.
func (o ExpressRoutePortAuthorizationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ExpressRoutePortAuthorization) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the resource group in which to create the ExpressRoute Port. Changing this forces a new resource to be created.
func (o ExpressRoutePortAuthorizationOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ExpressRoutePortAuthorization) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

type ExpressRoutePortAuthorizationArrayOutput struct{ *pulumi.OutputState }

func (ExpressRoutePortAuthorizationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExpressRoutePortAuthorization)(nil)).Elem()
}

func (o ExpressRoutePortAuthorizationArrayOutput) ToExpressRoutePortAuthorizationArrayOutput() ExpressRoutePortAuthorizationArrayOutput {
	return o
}

func (o ExpressRoutePortAuthorizationArrayOutput) ToExpressRoutePortAuthorizationArrayOutputWithContext(ctx context.Context) ExpressRoutePortAuthorizationArrayOutput {
	return o
}

func (o ExpressRoutePortAuthorizationArrayOutput) Index(i pulumi.IntInput) ExpressRoutePortAuthorizationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExpressRoutePortAuthorization {
		return vs[0].([]*ExpressRoutePortAuthorization)[vs[1].(int)]
	}).(ExpressRoutePortAuthorizationOutput)
}

type ExpressRoutePortAuthorizationMapOutput struct{ *pulumi.OutputState }

func (ExpressRoutePortAuthorizationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExpressRoutePortAuthorization)(nil)).Elem()
}

func (o ExpressRoutePortAuthorizationMapOutput) ToExpressRoutePortAuthorizationMapOutput() ExpressRoutePortAuthorizationMapOutput {
	return o
}

func (o ExpressRoutePortAuthorizationMapOutput) ToExpressRoutePortAuthorizationMapOutputWithContext(ctx context.Context) ExpressRoutePortAuthorizationMapOutput {
	return o
}

func (o ExpressRoutePortAuthorizationMapOutput) MapIndex(k pulumi.StringInput) ExpressRoutePortAuthorizationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExpressRoutePortAuthorization {
		return vs[0].(map[string]*ExpressRoutePortAuthorization)[vs[1].(string)]
	}).(ExpressRoutePortAuthorizationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExpressRoutePortAuthorizationInput)(nil)).Elem(), &ExpressRoutePortAuthorization{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExpressRoutePortAuthorizationArrayInput)(nil)).Elem(), ExpressRoutePortAuthorizationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExpressRoutePortAuthorizationMapInput)(nil)).Elem(), ExpressRoutePortAuthorizationMap{})
	pulumi.RegisterOutputType(ExpressRoutePortAuthorizationOutput{})
	pulumi.RegisterOutputType(ExpressRoutePortAuthorizationArrayOutput{})
	pulumi.RegisterOutputType(ExpressRoutePortAuthorizationMapOutput{})
}
