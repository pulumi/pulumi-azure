// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about a Network Manager.
func LookupNetworkManager(ctx *pulumi.Context, args *LookupNetworkManagerArgs, opts ...pulumi.InvokeOption) (*LookupNetworkManagerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNetworkManagerResult
	err := ctx.Invoke("azure:network/getNetworkManager:getNetworkManager", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNetworkManager.
type LookupNetworkManagerArgs struct {
	// The name of the Network Manager.
	Name string `pulumi:"name"`
	// The Name of the Resource Group where the Network Manager exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getNetworkManager.
type LookupNetworkManagerResult struct {
	// One or more `crossTenantScopes` blocks as defined below.
	CrossTenantScopes []GetNetworkManagerCrossTenantScope `pulumi:"crossTenantScopes"`
	// A description of the Network Manager.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The Azure Region where the Network Manager exists.
	Location          string `pulumi:"location"`
	Name              string `pulumi:"name"`
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A list of configuration deployment type configured on the Network Manager.
	ScopeAccesses []string `pulumi:"scopeAccesses"`
	// A `scope` block as defined below.
	Scopes []GetNetworkManagerScope `pulumi:"scopes"`
	// A mapping of tags assigned to the Network Manager.
	Tags map[string]string `pulumi:"tags"`
}

func LookupNetworkManagerOutput(ctx *pulumi.Context, args LookupNetworkManagerOutputArgs, opts ...pulumi.InvokeOption) LookupNetworkManagerResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNetworkManagerResult, error) {
			args := v.(LookupNetworkManagerArgs)
			r, err := LookupNetworkManager(ctx, &args, opts...)
			var s LookupNetworkManagerResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupNetworkManagerResultOutput)
}

// A collection of arguments for invoking getNetworkManager.
type LookupNetworkManagerOutputArgs struct {
	// The name of the Network Manager.
	Name pulumi.StringInput `pulumi:"name"`
	// The Name of the Resource Group where the Network Manager exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupNetworkManagerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkManagerArgs)(nil)).Elem()
}

// A collection of values returned by getNetworkManager.
type LookupNetworkManagerResultOutput struct{ *pulumi.OutputState }

func (LookupNetworkManagerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkManagerResult)(nil)).Elem()
}

func (o LookupNetworkManagerResultOutput) ToLookupNetworkManagerResultOutput() LookupNetworkManagerResultOutput {
	return o
}

func (o LookupNetworkManagerResultOutput) ToLookupNetworkManagerResultOutputWithContext(ctx context.Context) LookupNetworkManagerResultOutput {
	return o
}

// One or more `crossTenantScopes` blocks as defined below.
func (o LookupNetworkManagerResultOutput) CrossTenantScopes() GetNetworkManagerCrossTenantScopeArrayOutput {
	return o.ApplyT(func(v LookupNetworkManagerResult) []GetNetworkManagerCrossTenantScope { return v.CrossTenantScopes }).(GetNetworkManagerCrossTenantScopeArrayOutput)
}

// A description of the Network Manager.
func (o LookupNetworkManagerResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkManagerResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupNetworkManagerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkManagerResult) string { return v.Id }).(pulumi.StringOutput)
}

// The Azure Region where the Network Manager exists.
func (o LookupNetworkManagerResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkManagerResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o LookupNetworkManagerResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkManagerResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupNetworkManagerResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkManagerResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A list of configuration deployment type configured on the Network Manager.
func (o LookupNetworkManagerResultOutput) ScopeAccesses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNetworkManagerResult) []string { return v.ScopeAccesses }).(pulumi.StringArrayOutput)
}

// A `scope` block as defined below.
func (o LookupNetworkManagerResultOutput) Scopes() GetNetworkManagerScopeArrayOutput {
	return o.ApplyT(func(v LookupNetworkManagerResult) []GetNetworkManagerScope { return v.Scopes }).(GetNetworkManagerScopeArrayOutput)
}

// A mapping of tags assigned to the Network Manager.
func (o LookupNetworkManagerResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupNetworkManagerResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNetworkManagerResultOutput{})
}
