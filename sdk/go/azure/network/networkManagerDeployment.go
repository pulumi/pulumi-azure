// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a Network Manager Deployment.
//
// > **NOTE on Virtual Network Peering:** Using Network Manager Deployment to deploy Connectivity Configuration may modify or delete existing Virtual Network Peering. At this time you should not use Network Peering resource in conjunction with Network Manager Deployment. Doing so may cause a conflict of Peering configurations.
//
// ## Import
//
// Network Manager Deployment can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:network/networkManagerDeployment:NetworkManagerDeployment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Network/networkManagers/networkManager1/commit|eastus|Connectivity
//
// ```
type NetworkManagerDeployment struct {
	pulumi.CustomResourceState

	// A list of Network Manager Configuration IDs which should be aligned with `scopeAccess`.
	ConfigurationIds pulumi.StringArrayOutput `pulumi:"configurationIds"`
	// Specifies the location which the configurations will be deployed to. Changing this forces a new Network Manager Deployment to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the ID of the Network Manager. Changing this forces a new Network Manager Deployment to be created.
	NetworkManagerId pulumi.StringOutput `pulumi:"networkManagerId"`
	// Specifies the configuration deployment type. Possible values are `Connectivity` and `SecurityAdmin`. Changing this forces a new Network Manager Deployment to be created.
	ScopeAccess pulumi.StringOutput `pulumi:"scopeAccess"`
	// A mapping of key values pairs that can be used to keep the deployment up with the Network Manager configurations and rules.
	Triggers pulumi.StringMapOutput `pulumi:"triggers"`
}

// NewNetworkManagerDeployment registers a new resource with the given unique name, arguments, and options.
func NewNetworkManagerDeployment(ctx *pulumi.Context,
	name string, args *NetworkManagerDeploymentArgs, opts ...pulumi.ResourceOption) (*NetworkManagerDeployment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigurationIds == nil {
		return nil, errors.New("invalid value for required argument 'ConfigurationIds'")
	}
	if args.NetworkManagerId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkManagerId'")
	}
	if args.ScopeAccess == nil {
		return nil, errors.New("invalid value for required argument 'ScopeAccess'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkManagerDeployment
	err := ctx.RegisterResource("azure:network/networkManagerDeployment:NetworkManagerDeployment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkManagerDeployment gets an existing NetworkManagerDeployment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkManagerDeployment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkManagerDeploymentState, opts ...pulumi.ResourceOption) (*NetworkManagerDeployment, error) {
	var resource NetworkManagerDeployment
	err := ctx.ReadResource("azure:network/networkManagerDeployment:NetworkManagerDeployment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkManagerDeployment resources.
type networkManagerDeploymentState struct {
	// A list of Network Manager Configuration IDs which should be aligned with `scopeAccess`.
	ConfigurationIds []string `pulumi:"configurationIds"`
	// Specifies the location which the configurations will be deployed to. Changing this forces a new Network Manager Deployment to be created.
	Location *string `pulumi:"location"`
	// Specifies the ID of the Network Manager. Changing this forces a new Network Manager Deployment to be created.
	NetworkManagerId *string `pulumi:"networkManagerId"`
	// Specifies the configuration deployment type. Possible values are `Connectivity` and `SecurityAdmin`. Changing this forces a new Network Manager Deployment to be created.
	ScopeAccess *string `pulumi:"scopeAccess"`
	// A mapping of key values pairs that can be used to keep the deployment up with the Network Manager configurations and rules.
	Triggers map[string]string `pulumi:"triggers"`
}

type NetworkManagerDeploymentState struct {
	// A list of Network Manager Configuration IDs which should be aligned with `scopeAccess`.
	ConfigurationIds pulumi.StringArrayInput
	// Specifies the location which the configurations will be deployed to. Changing this forces a new Network Manager Deployment to be created.
	Location pulumi.StringPtrInput
	// Specifies the ID of the Network Manager. Changing this forces a new Network Manager Deployment to be created.
	NetworkManagerId pulumi.StringPtrInput
	// Specifies the configuration deployment type. Possible values are `Connectivity` and `SecurityAdmin`. Changing this forces a new Network Manager Deployment to be created.
	ScopeAccess pulumi.StringPtrInput
	// A mapping of key values pairs that can be used to keep the deployment up with the Network Manager configurations and rules.
	Triggers pulumi.StringMapInput
}

func (NetworkManagerDeploymentState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkManagerDeploymentState)(nil)).Elem()
}

type networkManagerDeploymentArgs struct {
	// A list of Network Manager Configuration IDs which should be aligned with `scopeAccess`.
	ConfigurationIds []string `pulumi:"configurationIds"`
	// Specifies the location which the configurations will be deployed to. Changing this forces a new Network Manager Deployment to be created.
	Location *string `pulumi:"location"`
	// Specifies the ID of the Network Manager. Changing this forces a new Network Manager Deployment to be created.
	NetworkManagerId string `pulumi:"networkManagerId"`
	// Specifies the configuration deployment type. Possible values are `Connectivity` and `SecurityAdmin`. Changing this forces a new Network Manager Deployment to be created.
	ScopeAccess string `pulumi:"scopeAccess"`
	// A mapping of key values pairs that can be used to keep the deployment up with the Network Manager configurations and rules.
	Triggers map[string]string `pulumi:"triggers"`
}

// The set of arguments for constructing a NetworkManagerDeployment resource.
type NetworkManagerDeploymentArgs struct {
	// A list of Network Manager Configuration IDs which should be aligned with `scopeAccess`.
	ConfigurationIds pulumi.StringArrayInput
	// Specifies the location which the configurations will be deployed to. Changing this forces a new Network Manager Deployment to be created.
	Location pulumi.StringPtrInput
	// Specifies the ID of the Network Manager. Changing this forces a new Network Manager Deployment to be created.
	NetworkManagerId pulumi.StringInput
	// Specifies the configuration deployment type. Possible values are `Connectivity` and `SecurityAdmin`. Changing this forces a new Network Manager Deployment to be created.
	ScopeAccess pulumi.StringInput
	// A mapping of key values pairs that can be used to keep the deployment up with the Network Manager configurations and rules.
	Triggers pulumi.StringMapInput
}

func (NetworkManagerDeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkManagerDeploymentArgs)(nil)).Elem()
}

type NetworkManagerDeploymentInput interface {
	pulumi.Input

	ToNetworkManagerDeploymentOutput() NetworkManagerDeploymentOutput
	ToNetworkManagerDeploymentOutputWithContext(ctx context.Context) NetworkManagerDeploymentOutput
}

func (*NetworkManagerDeployment) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkManagerDeployment)(nil)).Elem()
}

func (i *NetworkManagerDeployment) ToNetworkManagerDeploymentOutput() NetworkManagerDeploymentOutput {
	return i.ToNetworkManagerDeploymentOutputWithContext(context.Background())
}

func (i *NetworkManagerDeployment) ToNetworkManagerDeploymentOutputWithContext(ctx context.Context) NetworkManagerDeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkManagerDeploymentOutput)
}

func (i *NetworkManagerDeployment) ToOutput(ctx context.Context) pulumix.Output[*NetworkManagerDeployment] {
	return pulumix.Output[*NetworkManagerDeployment]{
		OutputState: i.ToNetworkManagerDeploymentOutputWithContext(ctx).OutputState,
	}
}

// NetworkManagerDeploymentArrayInput is an input type that accepts NetworkManagerDeploymentArray and NetworkManagerDeploymentArrayOutput values.
// You can construct a concrete instance of `NetworkManagerDeploymentArrayInput` via:
//
//	NetworkManagerDeploymentArray{ NetworkManagerDeploymentArgs{...} }
type NetworkManagerDeploymentArrayInput interface {
	pulumi.Input

	ToNetworkManagerDeploymentArrayOutput() NetworkManagerDeploymentArrayOutput
	ToNetworkManagerDeploymentArrayOutputWithContext(context.Context) NetworkManagerDeploymentArrayOutput
}

type NetworkManagerDeploymentArray []NetworkManagerDeploymentInput

func (NetworkManagerDeploymentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkManagerDeployment)(nil)).Elem()
}

func (i NetworkManagerDeploymentArray) ToNetworkManagerDeploymentArrayOutput() NetworkManagerDeploymentArrayOutput {
	return i.ToNetworkManagerDeploymentArrayOutputWithContext(context.Background())
}

func (i NetworkManagerDeploymentArray) ToNetworkManagerDeploymentArrayOutputWithContext(ctx context.Context) NetworkManagerDeploymentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkManagerDeploymentArrayOutput)
}

func (i NetworkManagerDeploymentArray) ToOutput(ctx context.Context) pulumix.Output[[]*NetworkManagerDeployment] {
	return pulumix.Output[[]*NetworkManagerDeployment]{
		OutputState: i.ToNetworkManagerDeploymentArrayOutputWithContext(ctx).OutputState,
	}
}

// NetworkManagerDeploymentMapInput is an input type that accepts NetworkManagerDeploymentMap and NetworkManagerDeploymentMapOutput values.
// You can construct a concrete instance of `NetworkManagerDeploymentMapInput` via:
//
//	NetworkManagerDeploymentMap{ "key": NetworkManagerDeploymentArgs{...} }
type NetworkManagerDeploymentMapInput interface {
	pulumi.Input

	ToNetworkManagerDeploymentMapOutput() NetworkManagerDeploymentMapOutput
	ToNetworkManagerDeploymentMapOutputWithContext(context.Context) NetworkManagerDeploymentMapOutput
}

type NetworkManagerDeploymentMap map[string]NetworkManagerDeploymentInput

func (NetworkManagerDeploymentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkManagerDeployment)(nil)).Elem()
}

func (i NetworkManagerDeploymentMap) ToNetworkManagerDeploymentMapOutput() NetworkManagerDeploymentMapOutput {
	return i.ToNetworkManagerDeploymentMapOutputWithContext(context.Background())
}

func (i NetworkManagerDeploymentMap) ToNetworkManagerDeploymentMapOutputWithContext(ctx context.Context) NetworkManagerDeploymentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkManagerDeploymentMapOutput)
}

func (i NetworkManagerDeploymentMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*NetworkManagerDeployment] {
	return pulumix.Output[map[string]*NetworkManagerDeployment]{
		OutputState: i.ToNetworkManagerDeploymentMapOutputWithContext(ctx).OutputState,
	}
}

type NetworkManagerDeploymentOutput struct{ *pulumi.OutputState }

func (NetworkManagerDeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkManagerDeployment)(nil)).Elem()
}

func (o NetworkManagerDeploymentOutput) ToNetworkManagerDeploymentOutput() NetworkManagerDeploymentOutput {
	return o
}

func (o NetworkManagerDeploymentOutput) ToNetworkManagerDeploymentOutputWithContext(ctx context.Context) NetworkManagerDeploymentOutput {
	return o
}

func (o NetworkManagerDeploymentOutput) ToOutput(ctx context.Context) pulumix.Output[*NetworkManagerDeployment] {
	return pulumix.Output[*NetworkManagerDeployment]{
		OutputState: o.OutputState,
	}
}

// A list of Network Manager Configuration IDs which should be aligned with `scopeAccess`.
func (o NetworkManagerDeploymentOutput) ConfigurationIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkManagerDeployment) pulumi.StringArrayOutput { return v.ConfigurationIds }).(pulumi.StringArrayOutput)
}

// Specifies the location which the configurations will be deployed to. Changing this forces a new Network Manager Deployment to be created.
func (o NetworkManagerDeploymentOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkManagerDeployment) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the ID of the Network Manager. Changing this forces a new Network Manager Deployment to be created.
func (o NetworkManagerDeploymentOutput) NetworkManagerId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkManagerDeployment) pulumi.StringOutput { return v.NetworkManagerId }).(pulumi.StringOutput)
}

// Specifies the configuration deployment type. Possible values are `Connectivity` and `SecurityAdmin`. Changing this forces a new Network Manager Deployment to be created.
func (o NetworkManagerDeploymentOutput) ScopeAccess() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkManagerDeployment) pulumi.StringOutput { return v.ScopeAccess }).(pulumi.StringOutput)
}

// A mapping of key values pairs that can be used to keep the deployment up with the Network Manager configurations and rules.
func (o NetworkManagerDeploymentOutput) Triggers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkManagerDeployment) pulumi.StringMapOutput { return v.Triggers }).(pulumi.StringMapOutput)
}

type NetworkManagerDeploymentArrayOutput struct{ *pulumi.OutputState }

func (NetworkManagerDeploymentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkManagerDeployment)(nil)).Elem()
}

func (o NetworkManagerDeploymentArrayOutput) ToNetworkManagerDeploymentArrayOutput() NetworkManagerDeploymentArrayOutput {
	return o
}

func (o NetworkManagerDeploymentArrayOutput) ToNetworkManagerDeploymentArrayOutputWithContext(ctx context.Context) NetworkManagerDeploymentArrayOutput {
	return o
}

func (o NetworkManagerDeploymentArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*NetworkManagerDeployment] {
	return pulumix.Output[[]*NetworkManagerDeployment]{
		OutputState: o.OutputState,
	}
}

func (o NetworkManagerDeploymentArrayOutput) Index(i pulumi.IntInput) NetworkManagerDeploymentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkManagerDeployment {
		return vs[0].([]*NetworkManagerDeployment)[vs[1].(int)]
	}).(NetworkManagerDeploymentOutput)
}

type NetworkManagerDeploymentMapOutput struct{ *pulumi.OutputState }

func (NetworkManagerDeploymentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkManagerDeployment)(nil)).Elem()
}

func (o NetworkManagerDeploymentMapOutput) ToNetworkManagerDeploymentMapOutput() NetworkManagerDeploymentMapOutput {
	return o
}

func (o NetworkManagerDeploymentMapOutput) ToNetworkManagerDeploymentMapOutputWithContext(ctx context.Context) NetworkManagerDeploymentMapOutput {
	return o
}

func (o NetworkManagerDeploymentMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*NetworkManagerDeployment] {
	return pulumix.Output[map[string]*NetworkManagerDeployment]{
		OutputState: o.OutputState,
	}
}

func (o NetworkManagerDeploymentMapOutput) MapIndex(k pulumi.StringInput) NetworkManagerDeploymentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkManagerDeployment {
		return vs[0].(map[string]*NetworkManagerDeployment)[vs[1].(string)]
	}).(NetworkManagerDeploymentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkManagerDeploymentInput)(nil)).Elem(), &NetworkManagerDeployment{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkManagerDeploymentArrayInput)(nil)).Elem(), NetworkManagerDeploymentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkManagerDeploymentMapInput)(nil)).Elem(), NetworkManagerDeploymentMap{})
	pulumi.RegisterOutputType(NetworkManagerDeploymentOutput{})
	pulumi.RegisterOutputType(NetworkManagerDeploymentArrayOutput{})
	pulumi.RegisterOutputType(NetworkManagerDeploymentMapOutput{})
}
