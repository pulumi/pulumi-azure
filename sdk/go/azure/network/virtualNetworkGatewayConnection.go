// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a connection in an existing Virtual Network Gateway.
//
// ## Example Usage
// ### Site-to-Site connection
//
// The following example shows a connection between an Azure virtual network
// and an on-premises VPN device and network.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West US"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "exampleVirtualNetwork", &network.VirtualNetworkArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleSubnet, err := network.NewSubnet(ctx, "exampleSubnet", &network.SubnetArgs{
//				ResourceGroupName:  exampleResourceGroup.Name,
//				VirtualNetworkName: exampleVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.0.1.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			onpremiseLocalNetworkGateway, err := network.NewLocalNetworkGateway(ctx, "onpremiseLocalNetworkGateway", &network.LocalNetworkGatewayArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				GatewayAddress:    pulumi.String("168.62.225.23"),
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.1.1.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			examplePublicIp, err := network.NewPublicIp(ctx, "examplePublicIp", &network.PublicIpArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				AllocationMethod:  pulumi.String("Dynamic"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualNetworkGateway, err := network.NewVirtualNetworkGateway(ctx, "exampleVirtualNetworkGateway", &network.VirtualNetworkGatewayArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Type:              pulumi.String("Vpn"),
//				VpnType:           pulumi.String("RouteBased"),
//				ActiveActive:      pulumi.Bool(false),
//				EnableBgp:         pulumi.Bool(false),
//				Sku:               pulumi.String("Basic"),
//				IpConfigurations: network.VirtualNetworkGatewayIpConfigurationArray{
//					&network.VirtualNetworkGatewayIpConfigurationArgs{
//						PublicIpAddressId:          examplePublicIp.ID(),
//						PrivateIpAddressAllocation: pulumi.String("Dynamic"),
//						SubnetId:                   exampleSubnet.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = network.NewVirtualNetworkGatewayConnection(ctx, "onpremiseVirtualNetworkGatewayConnection", &network.VirtualNetworkGatewayConnectionArgs{
//				Location:                exampleResourceGroup.Location,
//				ResourceGroupName:       exampleResourceGroup.Name,
//				Type:                    pulumi.String("IPsec"),
//				VirtualNetworkGatewayId: exampleVirtualNetworkGateway.ID(),
//				LocalNetworkGatewayId:   onpremiseLocalNetworkGateway.ID(),
//				SharedKey:               pulumi.String("4-v3ry-53cr37-1p53c-5h4r3d-k3y"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### VNet-to-VNet connection
//
// The following example shows a connection between two Azure virtual network
// in different locations/regions.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			usResourceGroup, err := core.NewResourceGroup(ctx, "usResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("East US"),
//			})
//			if err != nil {
//				return err
//			}
//			usVirtualNetwork, err := network.NewVirtualNetwork(ctx, "usVirtualNetwork", &network.VirtualNetworkArgs{
//				Location:          usResourceGroup.Location,
//				ResourceGroupName: usResourceGroup.Name,
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			usGateway, err := network.NewSubnet(ctx, "usGateway", &network.SubnetArgs{
//				ResourceGroupName:  usResourceGroup.Name,
//				VirtualNetworkName: usVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.0.1.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			usPublicIp, err := network.NewPublicIp(ctx, "usPublicIp", &network.PublicIpArgs{
//				Location:          usResourceGroup.Location,
//				ResourceGroupName: usResourceGroup.Name,
//				AllocationMethod:  pulumi.String("Dynamic"),
//			})
//			if err != nil {
//				return err
//			}
//			usVirtualNetworkGateway, err := network.NewVirtualNetworkGateway(ctx, "usVirtualNetworkGateway", &network.VirtualNetworkGatewayArgs{
//				Location:          usResourceGroup.Location,
//				ResourceGroupName: usResourceGroup.Name,
//				Type:              pulumi.String("Vpn"),
//				VpnType:           pulumi.String("RouteBased"),
//				Sku:               pulumi.String("Basic"),
//				IpConfigurations: network.VirtualNetworkGatewayIpConfigurationArray{
//					&network.VirtualNetworkGatewayIpConfigurationArgs{
//						PublicIpAddressId:          usPublicIp.ID(),
//						PrivateIpAddressAllocation: pulumi.String("Dynamic"),
//						SubnetId:                   usGateway.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			europeResourceGroup, err := core.NewResourceGroup(ctx, "europeResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			europeVirtualNetwork, err := network.NewVirtualNetwork(ctx, "europeVirtualNetwork", &network.VirtualNetworkArgs{
//				Location:          europeResourceGroup.Location,
//				ResourceGroupName: europeResourceGroup.Name,
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.1.0.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			europeGateway, err := network.NewSubnet(ctx, "europeGateway", &network.SubnetArgs{
//				ResourceGroupName:  europeResourceGroup.Name,
//				VirtualNetworkName: europeVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.1.1.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			europePublicIp, err := network.NewPublicIp(ctx, "europePublicIp", &network.PublicIpArgs{
//				Location:          europeResourceGroup.Location,
//				ResourceGroupName: europeResourceGroup.Name,
//				AllocationMethod:  pulumi.String("Dynamic"),
//			})
//			if err != nil {
//				return err
//			}
//			europeVirtualNetworkGateway, err := network.NewVirtualNetworkGateway(ctx, "europeVirtualNetworkGateway", &network.VirtualNetworkGatewayArgs{
//				Location:          europeResourceGroup.Location,
//				ResourceGroupName: europeResourceGroup.Name,
//				Type:              pulumi.String("Vpn"),
//				VpnType:           pulumi.String("RouteBased"),
//				Sku:               pulumi.String("Basic"),
//				IpConfigurations: network.VirtualNetworkGatewayIpConfigurationArray{
//					&network.VirtualNetworkGatewayIpConfigurationArgs{
//						PublicIpAddressId:          europePublicIp.ID(),
//						PrivateIpAddressAllocation: pulumi.String("Dynamic"),
//						SubnetId:                   europeGateway.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = network.NewVirtualNetworkGatewayConnection(ctx, "usToEurope", &network.VirtualNetworkGatewayConnectionArgs{
//				Location:                    usResourceGroup.Location,
//				ResourceGroupName:           usResourceGroup.Name,
//				Type:                        pulumi.String("Vnet2Vnet"),
//				VirtualNetworkGatewayId:     usVirtualNetworkGateway.ID(),
//				PeerVirtualNetworkGatewayId: europeVirtualNetworkGateway.ID(),
//				SharedKey:                   pulumi.String("4-v3ry-53cr37-1p53c-5h4r3d-k3y"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = network.NewVirtualNetworkGatewayConnection(ctx, "europeToUs", &network.VirtualNetworkGatewayConnectionArgs{
//				Location:                    europeResourceGroup.Location,
//				ResourceGroupName:           europeResourceGroup.Name,
//				Type:                        pulumi.String("Vnet2Vnet"),
//				VirtualNetworkGatewayId:     europeVirtualNetworkGateway.ID(),
//				PeerVirtualNetworkGatewayId: usVirtualNetworkGateway.ID(),
//				SharedKey:                   pulumi.String("4-v3ry-53cr37-1p53c-5h4r3d-k3y"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Virtual Network Gateway Connections can be imported using their `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:network/virtualNetworkGatewayConnection:VirtualNetworkGatewayConnection exampleConnection /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup1/providers/Microsoft.Network/connections/myConnection1
//
// ```
type VirtualNetworkGatewayConnection struct {
	pulumi.CustomResourceState

	// The authorization key associated with the Express Route Circuit. This field is required only if the type is an ExpressRoute connection.
	AuthorizationKey pulumi.StringPtrOutput `pulumi:"authorizationKey"`
	// Connection mode to use. Possible values are `Default`, `InitiatorOnly` and `ResponderOnly`. Defaults to `Default`. Changing this value will force a resource to be created.
	ConnectionMode pulumi.StringPtrOutput `pulumi:"connectionMode"`
	// The IKE protocol version to use. Possible values are `IKEv1` and `IKEv2`, values are `IKEv1` and `IKEv2`. Defaults to `IKEv2`. Changing this forces a new resource to be created.
	// > **Note:** Only valid for `IPSec` connections on virtual network gateways with SKU `VpnGw1`, `VpnGw2`, `VpnGw3`, `VpnGw1AZ`, `VpnGw2AZ` or `VpnGw3AZ`.
	ConnectionProtocol pulumi.StringOutput `pulumi:"connectionProtocol"`
	// A `customBgpAddresses` block which is documented below.
	// The block can only be used on `IPSec` / `activeactive` connections,
	// For details about see [the relevant section in the Azure documentation](https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-howto-aws-bgp).
	CustomBgpAddresses VirtualNetworkGatewayConnectionCustomBgpAddressesPtrOutput `pulumi:"customBgpAddresses"`
	// The dead peer detection timeout of this connection in seconds. Changing this forces a new resource to be created.
	DpdTimeoutSeconds pulumi.IntPtrOutput `pulumi:"dpdTimeoutSeconds"`
	// A list of the egress NAT Rule Ids.
	EgressNatRuleIds pulumi.StringArrayOutput `pulumi:"egressNatRuleIds"`
	// If `true`, BGP (Border Gateway Protocol) is enabled for this connection. Defaults to `false`.
	EnableBgp pulumi.BoolOutput `pulumi:"enableBgp"`
	// The ID of the Express Route Circuit when creating an ExpressRoute connection (i.e. when `type` is `ExpressRoute`). The Express Route Circuit can be in the same or in a different subscription. Changing this forces a new resource to be created.
	ExpressRouteCircuitId pulumi.StringPtrOutput `pulumi:"expressRouteCircuitId"`
	// If `true`, data packets will bypass ExpressRoute Gateway for data forwarding This is only valid for ExpressRoute connections.
	ExpressRouteGatewayBypass pulumi.BoolOutput `pulumi:"expressRouteGatewayBypass"`
	// A list of the ingress NAT Rule Ids.
	IngressNatRuleIds pulumi.StringArrayOutput `pulumi:"ingressNatRuleIds"`
	// A `ipsecPolicy` block which is documented below.
	// Only a single policy can be defined for a connection. For details on
	// custom policies refer to [the relevant section in the Azure documentation](https://docs.microsoft.com/azure/vpn-gateway/vpn-gateway-ipsecikepolicy-rm-powershell).
	IpsecPolicy VirtualNetworkGatewayConnectionIpsecPolicyPtrOutput `pulumi:"ipsecPolicy"`
	// Use private local Azure IP for the connection. Changing this forces a new resource to be created.
	LocalAzureIpAddressEnabled pulumi.BoolPtrOutput `pulumi:"localAzureIpAddressEnabled"`
	// The ID of the local network gateway when creating Site-to-Site connection (i.e. when `type` is `IPsec`).
	LocalNetworkGatewayId pulumi.StringPtrOutput `pulumi:"localNetworkGatewayId"`
	// The location/region where the connection is located. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the connection. Changing the name forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the peer virtual network gateway when creating a VNet-to-VNet connection (i.e. when `type` is `Vnet2Vnet`). The peer Virtual Network Gateway can be in the same or in a different subscription. Changing this forces a new resource to be created.
	PeerVirtualNetworkGatewayId pulumi.StringPtrOutput `pulumi:"peerVirtualNetworkGatewayId"`
	// The name of the resource group in which to create the connection Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The routing weight. Defaults to `10`.
	RoutingWeight pulumi.IntOutput `pulumi:"routingWeight"`
	// The shared IPSec key. A key could be provided if a Site-to-Site, VNet-to-VNet or ExpressRoute connection is created.
	SharedKey pulumi.StringPtrOutput `pulumi:"sharedKey"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// One or more `trafficSelectorPolicy` blocks which are documented below.
	// A `trafficSelectorPolicy` allows to specify a traffic selector policy proposal to be used in a virtual network gateway connection.
	// For details about traffic selectors refer to [the relevant section in the Azure documentation](https://docs.microsoft.com/azure/vpn-gateway/vpn-gateway-connect-multiple-policybased-rm-ps).
	TrafficSelectorPolicy VirtualNetworkGatewayConnectionTrafficSelectorPolicyPtrOutput `pulumi:"trafficSelectorPolicy"`
	// The type of connection. Valid options are `IPsec` (Site-to-Site), `ExpressRoute` (ExpressRoute), and `Vnet2Vnet` (VNet-to-VNet). Each connection type requires different mandatory arguments (refer to the examples above). Changing this forces a new resource to be created.
	Type pulumi.StringOutput `pulumi:"type"`
	// If `true`, policy-based traffic selectors are enabled for this connection. Enabling policy-based traffic selectors requires an `ipsecPolicy` block. Defaults to `false`.
	UsePolicyBasedTrafficSelectors pulumi.BoolOutput `pulumi:"usePolicyBasedTrafficSelectors"`
	// The ID of the Virtual Network Gateway in which the connection will be created. Changing this forces a new resource to be created.
	VirtualNetworkGatewayId pulumi.StringOutput `pulumi:"virtualNetworkGatewayId"`
}

// NewVirtualNetworkGatewayConnection registers a new resource with the given unique name, arguments, and options.
func NewVirtualNetworkGatewayConnection(ctx *pulumi.Context,
	name string, args *VirtualNetworkGatewayConnectionArgs, opts ...pulumi.ResourceOption) (*VirtualNetworkGatewayConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.VirtualNetworkGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'VirtualNetworkGatewayId'")
	}
	if args.AuthorizationKey != nil {
		args.AuthorizationKey = pulumi.ToSecret(args.AuthorizationKey).(pulumi.StringPtrInput)
	}
	if args.SharedKey != nil {
		args.SharedKey = pulumi.ToSecret(args.SharedKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"authorizationKey",
		"sharedKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VirtualNetworkGatewayConnection
	err := ctx.RegisterResource("azure:network/virtualNetworkGatewayConnection:VirtualNetworkGatewayConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualNetworkGatewayConnection gets an existing VirtualNetworkGatewayConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualNetworkGatewayConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualNetworkGatewayConnectionState, opts ...pulumi.ResourceOption) (*VirtualNetworkGatewayConnection, error) {
	var resource VirtualNetworkGatewayConnection
	err := ctx.ReadResource("azure:network/virtualNetworkGatewayConnection:VirtualNetworkGatewayConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualNetworkGatewayConnection resources.
type virtualNetworkGatewayConnectionState struct {
	// The authorization key associated with the Express Route Circuit. This field is required only if the type is an ExpressRoute connection.
	AuthorizationKey *string `pulumi:"authorizationKey"`
	// Connection mode to use. Possible values are `Default`, `InitiatorOnly` and `ResponderOnly`. Defaults to `Default`. Changing this value will force a resource to be created.
	ConnectionMode *string `pulumi:"connectionMode"`
	// The IKE protocol version to use. Possible values are `IKEv1` and `IKEv2`, values are `IKEv1` and `IKEv2`. Defaults to `IKEv2`. Changing this forces a new resource to be created.
	// > **Note:** Only valid for `IPSec` connections on virtual network gateways with SKU `VpnGw1`, `VpnGw2`, `VpnGw3`, `VpnGw1AZ`, `VpnGw2AZ` or `VpnGw3AZ`.
	ConnectionProtocol *string `pulumi:"connectionProtocol"`
	// A `customBgpAddresses` block which is documented below.
	// The block can only be used on `IPSec` / `activeactive` connections,
	// For details about see [the relevant section in the Azure documentation](https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-howto-aws-bgp).
	CustomBgpAddresses *VirtualNetworkGatewayConnectionCustomBgpAddresses `pulumi:"customBgpAddresses"`
	// The dead peer detection timeout of this connection in seconds. Changing this forces a new resource to be created.
	DpdTimeoutSeconds *int `pulumi:"dpdTimeoutSeconds"`
	// A list of the egress NAT Rule Ids.
	EgressNatRuleIds []string `pulumi:"egressNatRuleIds"`
	// If `true`, BGP (Border Gateway Protocol) is enabled for this connection. Defaults to `false`.
	EnableBgp *bool `pulumi:"enableBgp"`
	// The ID of the Express Route Circuit when creating an ExpressRoute connection (i.e. when `type` is `ExpressRoute`). The Express Route Circuit can be in the same or in a different subscription. Changing this forces a new resource to be created.
	ExpressRouteCircuitId *string `pulumi:"expressRouteCircuitId"`
	// If `true`, data packets will bypass ExpressRoute Gateway for data forwarding This is only valid for ExpressRoute connections.
	ExpressRouteGatewayBypass *bool `pulumi:"expressRouteGatewayBypass"`
	// A list of the ingress NAT Rule Ids.
	IngressNatRuleIds []string `pulumi:"ingressNatRuleIds"`
	// A `ipsecPolicy` block which is documented below.
	// Only a single policy can be defined for a connection. For details on
	// custom policies refer to [the relevant section in the Azure documentation](https://docs.microsoft.com/azure/vpn-gateway/vpn-gateway-ipsecikepolicy-rm-powershell).
	IpsecPolicy *VirtualNetworkGatewayConnectionIpsecPolicy `pulumi:"ipsecPolicy"`
	// Use private local Azure IP for the connection. Changing this forces a new resource to be created.
	LocalAzureIpAddressEnabled *bool `pulumi:"localAzureIpAddressEnabled"`
	// The ID of the local network gateway when creating Site-to-Site connection (i.e. when `type` is `IPsec`).
	LocalNetworkGatewayId *string `pulumi:"localNetworkGatewayId"`
	// The location/region where the connection is located. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name of the connection. Changing the name forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The ID of the peer virtual network gateway when creating a VNet-to-VNet connection (i.e. when `type` is `Vnet2Vnet`). The peer Virtual Network Gateway can be in the same or in a different subscription. Changing this forces a new resource to be created.
	PeerVirtualNetworkGatewayId *string `pulumi:"peerVirtualNetworkGatewayId"`
	// The name of the resource group in which to create the connection Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The routing weight. Defaults to `10`.
	RoutingWeight *int `pulumi:"routingWeight"`
	// The shared IPSec key. A key could be provided if a Site-to-Site, VNet-to-VNet or ExpressRoute connection is created.
	SharedKey *string `pulumi:"sharedKey"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// One or more `trafficSelectorPolicy` blocks which are documented below.
	// A `trafficSelectorPolicy` allows to specify a traffic selector policy proposal to be used in a virtual network gateway connection.
	// For details about traffic selectors refer to [the relevant section in the Azure documentation](https://docs.microsoft.com/azure/vpn-gateway/vpn-gateway-connect-multiple-policybased-rm-ps).
	TrafficSelectorPolicy *VirtualNetworkGatewayConnectionTrafficSelectorPolicy `pulumi:"trafficSelectorPolicy"`
	// The type of connection. Valid options are `IPsec` (Site-to-Site), `ExpressRoute` (ExpressRoute), and `Vnet2Vnet` (VNet-to-VNet). Each connection type requires different mandatory arguments (refer to the examples above). Changing this forces a new resource to be created.
	Type *string `pulumi:"type"`
	// If `true`, policy-based traffic selectors are enabled for this connection. Enabling policy-based traffic selectors requires an `ipsecPolicy` block. Defaults to `false`.
	UsePolicyBasedTrafficSelectors *bool `pulumi:"usePolicyBasedTrafficSelectors"`
	// The ID of the Virtual Network Gateway in which the connection will be created. Changing this forces a new resource to be created.
	VirtualNetworkGatewayId *string `pulumi:"virtualNetworkGatewayId"`
}

type VirtualNetworkGatewayConnectionState struct {
	// The authorization key associated with the Express Route Circuit. This field is required only if the type is an ExpressRoute connection.
	AuthorizationKey pulumi.StringPtrInput
	// Connection mode to use. Possible values are `Default`, `InitiatorOnly` and `ResponderOnly`. Defaults to `Default`. Changing this value will force a resource to be created.
	ConnectionMode pulumi.StringPtrInput
	// The IKE protocol version to use. Possible values are `IKEv1` and `IKEv2`, values are `IKEv1` and `IKEv2`. Defaults to `IKEv2`. Changing this forces a new resource to be created.
	// > **Note:** Only valid for `IPSec` connections on virtual network gateways with SKU `VpnGw1`, `VpnGw2`, `VpnGw3`, `VpnGw1AZ`, `VpnGw2AZ` or `VpnGw3AZ`.
	ConnectionProtocol pulumi.StringPtrInput
	// A `customBgpAddresses` block which is documented below.
	// The block can only be used on `IPSec` / `activeactive` connections,
	// For details about see [the relevant section in the Azure documentation](https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-howto-aws-bgp).
	CustomBgpAddresses VirtualNetworkGatewayConnectionCustomBgpAddressesPtrInput
	// The dead peer detection timeout of this connection in seconds. Changing this forces a new resource to be created.
	DpdTimeoutSeconds pulumi.IntPtrInput
	// A list of the egress NAT Rule Ids.
	EgressNatRuleIds pulumi.StringArrayInput
	// If `true`, BGP (Border Gateway Protocol) is enabled for this connection. Defaults to `false`.
	EnableBgp pulumi.BoolPtrInput
	// The ID of the Express Route Circuit when creating an ExpressRoute connection (i.e. when `type` is `ExpressRoute`). The Express Route Circuit can be in the same or in a different subscription. Changing this forces a new resource to be created.
	ExpressRouteCircuitId pulumi.StringPtrInput
	// If `true`, data packets will bypass ExpressRoute Gateway for data forwarding This is only valid for ExpressRoute connections.
	ExpressRouteGatewayBypass pulumi.BoolPtrInput
	// A list of the ingress NAT Rule Ids.
	IngressNatRuleIds pulumi.StringArrayInput
	// A `ipsecPolicy` block which is documented below.
	// Only a single policy can be defined for a connection. For details on
	// custom policies refer to [the relevant section in the Azure documentation](https://docs.microsoft.com/azure/vpn-gateway/vpn-gateway-ipsecikepolicy-rm-powershell).
	IpsecPolicy VirtualNetworkGatewayConnectionIpsecPolicyPtrInput
	// Use private local Azure IP for the connection. Changing this forces a new resource to be created.
	LocalAzureIpAddressEnabled pulumi.BoolPtrInput
	// The ID of the local network gateway when creating Site-to-Site connection (i.e. when `type` is `IPsec`).
	LocalNetworkGatewayId pulumi.StringPtrInput
	// The location/region where the connection is located. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name of the connection. Changing the name forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The ID of the peer virtual network gateway when creating a VNet-to-VNet connection (i.e. when `type` is `Vnet2Vnet`). The peer Virtual Network Gateway can be in the same or in a different subscription. Changing this forces a new resource to be created.
	PeerVirtualNetworkGatewayId pulumi.StringPtrInput
	// The name of the resource group in which to create the connection Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The routing weight. Defaults to `10`.
	RoutingWeight pulumi.IntPtrInput
	// The shared IPSec key. A key could be provided if a Site-to-Site, VNet-to-VNet or ExpressRoute connection is created.
	SharedKey pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// One or more `trafficSelectorPolicy` blocks which are documented below.
	// A `trafficSelectorPolicy` allows to specify a traffic selector policy proposal to be used in a virtual network gateway connection.
	// For details about traffic selectors refer to [the relevant section in the Azure documentation](https://docs.microsoft.com/azure/vpn-gateway/vpn-gateway-connect-multiple-policybased-rm-ps).
	TrafficSelectorPolicy VirtualNetworkGatewayConnectionTrafficSelectorPolicyPtrInput
	// The type of connection. Valid options are `IPsec` (Site-to-Site), `ExpressRoute` (ExpressRoute), and `Vnet2Vnet` (VNet-to-VNet). Each connection type requires different mandatory arguments (refer to the examples above). Changing this forces a new resource to be created.
	Type pulumi.StringPtrInput
	// If `true`, policy-based traffic selectors are enabled for this connection. Enabling policy-based traffic selectors requires an `ipsecPolicy` block. Defaults to `false`.
	UsePolicyBasedTrafficSelectors pulumi.BoolPtrInput
	// The ID of the Virtual Network Gateway in which the connection will be created. Changing this forces a new resource to be created.
	VirtualNetworkGatewayId pulumi.StringPtrInput
}

func (VirtualNetworkGatewayConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualNetworkGatewayConnectionState)(nil)).Elem()
}

type virtualNetworkGatewayConnectionArgs struct {
	// The authorization key associated with the Express Route Circuit. This field is required only if the type is an ExpressRoute connection.
	AuthorizationKey *string `pulumi:"authorizationKey"`
	// Connection mode to use. Possible values are `Default`, `InitiatorOnly` and `ResponderOnly`. Defaults to `Default`. Changing this value will force a resource to be created.
	ConnectionMode *string `pulumi:"connectionMode"`
	// The IKE protocol version to use. Possible values are `IKEv1` and `IKEv2`, values are `IKEv1` and `IKEv2`. Defaults to `IKEv2`. Changing this forces a new resource to be created.
	// > **Note:** Only valid for `IPSec` connections on virtual network gateways with SKU `VpnGw1`, `VpnGw2`, `VpnGw3`, `VpnGw1AZ`, `VpnGw2AZ` or `VpnGw3AZ`.
	ConnectionProtocol *string `pulumi:"connectionProtocol"`
	// A `customBgpAddresses` block which is documented below.
	// The block can only be used on `IPSec` / `activeactive` connections,
	// For details about see [the relevant section in the Azure documentation](https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-howto-aws-bgp).
	CustomBgpAddresses *VirtualNetworkGatewayConnectionCustomBgpAddresses `pulumi:"customBgpAddresses"`
	// The dead peer detection timeout of this connection in seconds. Changing this forces a new resource to be created.
	DpdTimeoutSeconds *int `pulumi:"dpdTimeoutSeconds"`
	// A list of the egress NAT Rule Ids.
	EgressNatRuleIds []string `pulumi:"egressNatRuleIds"`
	// If `true`, BGP (Border Gateway Protocol) is enabled for this connection. Defaults to `false`.
	EnableBgp *bool `pulumi:"enableBgp"`
	// The ID of the Express Route Circuit when creating an ExpressRoute connection (i.e. when `type` is `ExpressRoute`). The Express Route Circuit can be in the same or in a different subscription. Changing this forces a new resource to be created.
	ExpressRouteCircuitId *string `pulumi:"expressRouteCircuitId"`
	// If `true`, data packets will bypass ExpressRoute Gateway for data forwarding This is only valid for ExpressRoute connections.
	ExpressRouteGatewayBypass *bool `pulumi:"expressRouteGatewayBypass"`
	// A list of the ingress NAT Rule Ids.
	IngressNatRuleIds []string `pulumi:"ingressNatRuleIds"`
	// A `ipsecPolicy` block which is documented below.
	// Only a single policy can be defined for a connection. For details on
	// custom policies refer to [the relevant section in the Azure documentation](https://docs.microsoft.com/azure/vpn-gateway/vpn-gateway-ipsecikepolicy-rm-powershell).
	IpsecPolicy *VirtualNetworkGatewayConnectionIpsecPolicy `pulumi:"ipsecPolicy"`
	// Use private local Azure IP for the connection. Changing this forces a new resource to be created.
	LocalAzureIpAddressEnabled *bool `pulumi:"localAzureIpAddressEnabled"`
	// The ID of the local network gateway when creating Site-to-Site connection (i.e. when `type` is `IPsec`).
	LocalNetworkGatewayId *string `pulumi:"localNetworkGatewayId"`
	// The location/region where the connection is located. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name of the connection. Changing the name forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The ID of the peer virtual network gateway when creating a VNet-to-VNet connection (i.e. when `type` is `Vnet2Vnet`). The peer Virtual Network Gateway can be in the same or in a different subscription. Changing this forces a new resource to be created.
	PeerVirtualNetworkGatewayId *string `pulumi:"peerVirtualNetworkGatewayId"`
	// The name of the resource group in which to create the connection Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The routing weight. Defaults to `10`.
	RoutingWeight *int `pulumi:"routingWeight"`
	// The shared IPSec key. A key could be provided if a Site-to-Site, VNet-to-VNet or ExpressRoute connection is created.
	SharedKey *string `pulumi:"sharedKey"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// One or more `trafficSelectorPolicy` blocks which are documented below.
	// A `trafficSelectorPolicy` allows to specify a traffic selector policy proposal to be used in a virtual network gateway connection.
	// For details about traffic selectors refer to [the relevant section in the Azure documentation](https://docs.microsoft.com/azure/vpn-gateway/vpn-gateway-connect-multiple-policybased-rm-ps).
	TrafficSelectorPolicy *VirtualNetworkGatewayConnectionTrafficSelectorPolicy `pulumi:"trafficSelectorPolicy"`
	// The type of connection. Valid options are `IPsec` (Site-to-Site), `ExpressRoute` (ExpressRoute), and `Vnet2Vnet` (VNet-to-VNet). Each connection type requires different mandatory arguments (refer to the examples above). Changing this forces a new resource to be created.
	Type string `pulumi:"type"`
	// If `true`, policy-based traffic selectors are enabled for this connection. Enabling policy-based traffic selectors requires an `ipsecPolicy` block. Defaults to `false`.
	UsePolicyBasedTrafficSelectors *bool `pulumi:"usePolicyBasedTrafficSelectors"`
	// The ID of the Virtual Network Gateway in which the connection will be created. Changing this forces a new resource to be created.
	VirtualNetworkGatewayId string `pulumi:"virtualNetworkGatewayId"`
}

// The set of arguments for constructing a VirtualNetworkGatewayConnection resource.
type VirtualNetworkGatewayConnectionArgs struct {
	// The authorization key associated with the Express Route Circuit. This field is required only if the type is an ExpressRoute connection.
	AuthorizationKey pulumi.StringPtrInput
	// Connection mode to use. Possible values are `Default`, `InitiatorOnly` and `ResponderOnly`. Defaults to `Default`. Changing this value will force a resource to be created.
	ConnectionMode pulumi.StringPtrInput
	// The IKE protocol version to use. Possible values are `IKEv1` and `IKEv2`, values are `IKEv1` and `IKEv2`. Defaults to `IKEv2`. Changing this forces a new resource to be created.
	// > **Note:** Only valid for `IPSec` connections on virtual network gateways with SKU `VpnGw1`, `VpnGw2`, `VpnGw3`, `VpnGw1AZ`, `VpnGw2AZ` or `VpnGw3AZ`.
	ConnectionProtocol pulumi.StringPtrInput
	// A `customBgpAddresses` block which is documented below.
	// The block can only be used on `IPSec` / `activeactive` connections,
	// For details about see [the relevant section in the Azure documentation](https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-howto-aws-bgp).
	CustomBgpAddresses VirtualNetworkGatewayConnectionCustomBgpAddressesPtrInput
	// The dead peer detection timeout of this connection in seconds. Changing this forces a new resource to be created.
	DpdTimeoutSeconds pulumi.IntPtrInput
	// A list of the egress NAT Rule Ids.
	EgressNatRuleIds pulumi.StringArrayInput
	// If `true`, BGP (Border Gateway Protocol) is enabled for this connection. Defaults to `false`.
	EnableBgp pulumi.BoolPtrInput
	// The ID of the Express Route Circuit when creating an ExpressRoute connection (i.e. when `type` is `ExpressRoute`). The Express Route Circuit can be in the same or in a different subscription. Changing this forces a new resource to be created.
	ExpressRouteCircuitId pulumi.StringPtrInput
	// If `true`, data packets will bypass ExpressRoute Gateway for data forwarding This is only valid for ExpressRoute connections.
	ExpressRouteGatewayBypass pulumi.BoolPtrInput
	// A list of the ingress NAT Rule Ids.
	IngressNatRuleIds pulumi.StringArrayInput
	// A `ipsecPolicy` block which is documented below.
	// Only a single policy can be defined for a connection. For details on
	// custom policies refer to [the relevant section in the Azure documentation](https://docs.microsoft.com/azure/vpn-gateway/vpn-gateway-ipsecikepolicy-rm-powershell).
	IpsecPolicy VirtualNetworkGatewayConnectionIpsecPolicyPtrInput
	// Use private local Azure IP for the connection. Changing this forces a new resource to be created.
	LocalAzureIpAddressEnabled pulumi.BoolPtrInput
	// The ID of the local network gateway when creating Site-to-Site connection (i.e. when `type` is `IPsec`).
	LocalNetworkGatewayId pulumi.StringPtrInput
	// The location/region where the connection is located. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name of the connection. Changing the name forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The ID of the peer virtual network gateway when creating a VNet-to-VNet connection (i.e. when `type` is `Vnet2Vnet`). The peer Virtual Network Gateway can be in the same or in a different subscription. Changing this forces a new resource to be created.
	PeerVirtualNetworkGatewayId pulumi.StringPtrInput
	// The name of the resource group in which to create the connection Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// The routing weight. Defaults to `10`.
	RoutingWeight pulumi.IntPtrInput
	// The shared IPSec key. A key could be provided if a Site-to-Site, VNet-to-VNet or ExpressRoute connection is created.
	SharedKey pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// One or more `trafficSelectorPolicy` blocks which are documented below.
	// A `trafficSelectorPolicy` allows to specify a traffic selector policy proposal to be used in a virtual network gateway connection.
	// For details about traffic selectors refer to [the relevant section in the Azure documentation](https://docs.microsoft.com/azure/vpn-gateway/vpn-gateway-connect-multiple-policybased-rm-ps).
	TrafficSelectorPolicy VirtualNetworkGatewayConnectionTrafficSelectorPolicyPtrInput
	// The type of connection. Valid options are `IPsec` (Site-to-Site), `ExpressRoute` (ExpressRoute), and `Vnet2Vnet` (VNet-to-VNet). Each connection type requires different mandatory arguments (refer to the examples above). Changing this forces a new resource to be created.
	Type pulumi.StringInput
	// If `true`, policy-based traffic selectors are enabled for this connection. Enabling policy-based traffic selectors requires an `ipsecPolicy` block. Defaults to `false`.
	UsePolicyBasedTrafficSelectors pulumi.BoolPtrInput
	// The ID of the Virtual Network Gateway in which the connection will be created. Changing this forces a new resource to be created.
	VirtualNetworkGatewayId pulumi.StringInput
}

func (VirtualNetworkGatewayConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualNetworkGatewayConnectionArgs)(nil)).Elem()
}

type VirtualNetworkGatewayConnectionInput interface {
	pulumi.Input

	ToVirtualNetworkGatewayConnectionOutput() VirtualNetworkGatewayConnectionOutput
	ToVirtualNetworkGatewayConnectionOutputWithContext(ctx context.Context) VirtualNetworkGatewayConnectionOutput
}

func (*VirtualNetworkGatewayConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNetworkGatewayConnection)(nil)).Elem()
}

func (i *VirtualNetworkGatewayConnection) ToVirtualNetworkGatewayConnectionOutput() VirtualNetworkGatewayConnectionOutput {
	return i.ToVirtualNetworkGatewayConnectionOutputWithContext(context.Background())
}

func (i *VirtualNetworkGatewayConnection) ToVirtualNetworkGatewayConnectionOutputWithContext(ctx context.Context) VirtualNetworkGatewayConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkGatewayConnectionOutput)
}

func (i *VirtualNetworkGatewayConnection) ToOutput(ctx context.Context) pulumix.Output[*VirtualNetworkGatewayConnection] {
	return pulumix.Output[*VirtualNetworkGatewayConnection]{
		OutputState: i.ToVirtualNetworkGatewayConnectionOutputWithContext(ctx).OutputState,
	}
}

// VirtualNetworkGatewayConnectionArrayInput is an input type that accepts VirtualNetworkGatewayConnectionArray and VirtualNetworkGatewayConnectionArrayOutput values.
// You can construct a concrete instance of `VirtualNetworkGatewayConnectionArrayInput` via:
//
//	VirtualNetworkGatewayConnectionArray{ VirtualNetworkGatewayConnectionArgs{...} }
type VirtualNetworkGatewayConnectionArrayInput interface {
	pulumi.Input

	ToVirtualNetworkGatewayConnectionArrayOutput() VirtualNetworkGatewayConnectionArrayOutput
	ToVirtualNetworkGatewayConnectionArrayOutputWithContext(context.Context) VirtualNetworkGatewayConnectionArrayOutput
}

type VirtualNetworkGatewayConnectionArray []VirtualNetworkGatewayConnectionInput

func (VirtualNetworkGatewayConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualNetworkGatewayConnection)(nil)).Elem()
}

func (i VirtualNetworkGatewayConnectionArray) ToVirtualNetworkGatewayConnectionArrayOutput() VirtualNetworkGatewayConnectionArrayOutput {
	return i.ToVirtualNetworkGatewayConnectionArrayOutputWithContext(context.Background())
}

func (i VirtualNetworkGatewayConnectionArray) ToVirtualNetworkGatewayConnectionArrayOutputWithContext(ctx context.Context) VirtualNetworkGatewayConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkGatewayConnectionArrayOutput)
}

func (i VirtualNetworkGatewayConnectionArray) ToOutput(ctx context.Context) pulumix.Output[[]*VirtualNetworkGatewayConnection] {
	return pulumix.Output[[]*VirtualNetworkGatewayConnection]{
		OutputState: i.ToVirtualNetworkGatewayConnectionArrayOutputWithContext(ctx).OutputState,
	}
}

// VirtualNetworkGatewayConnectionMapInput is an input type that accepts VirtualNetworkGatewayConnectionMap and VirtualNetworkGatewayConnectionMapOutput values.
// You can construct a concrete instance of `VirtualNetworkGatewayConnectionMapInput` via:
//
//	VirtualNetworkGatewayConnectionMap{ "key": VirtualNetworkGatewayConnectionArgs{...} }
type VirtualNetworkGatewayConnectionMapInput interface {
	pulumi.Input

	ToVirtualNetworkGatewayConnectionMapOutput() VirtualNetworkGatewayConnectionMapOutput
	ToVirtualNetworkGatewayConnectionMapOutputWithContext(context.Context) VirtualNetworkGatewayConnectionMapOutput
}

type VirtualNetworkGatewayConnectionMap map[string]VirtualNetworkGatewayConnectionInput

func (VirtualNetworkGatewayConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualNetworkGatewayConnection)(nil)).Elem()
}

func (i VirtualNetworkGatewayConnectionMap) ToVirtualNetworkGatewayConnectionMapOutput() VirtualNetworkGatewayConnectionMapOutput {
	return i.ToVirtualNetworkGatewayConnectionMapOutputWithContext(context.Background())
}

func (i VirtualNetworkGatewayConnectionMap) ToVirtualNetworkGatewayConnectionMapOutputWithContext(ctx context.Context) VirtualNetworkGatewayConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkGatewayConnectionMapOutput)
}

func (i VirtualNetworkGatewayConnectionMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*VirtualNetworkGatewayConnection] {
	return pulumix.Output[map[string]*VirtualNetworkGatewayConnection]{
		OutputState: i.ToVirtualNetworkGatewayConnectionMapOutputWithContext(ctx).OutputState,
	}
}

type VirtualNetworkGatewayConnectionOutput struct{ *pulumi.OutputState }

func (VirtualNetworkGatewayConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNetworkGatewayConnection)(nil)).Elem()
}

func (o VirtualNetworkGatewayConnectionOutput) ToVirtualNetworkGatewayConnectionOutput() VirtualNetworkGatewayConnectionOutput {
	return o
}

func (o VirtualNetworkGatewayConnectionOutput) ToVirtualNetworkGatewayConnectionOutputWithContext(ctx context.Context) VirtualNetworkGatewayConnectionOutput {
	return o
}

func (o VirtualNetworkGatewayConnectionOutput) ToOutput(ctx context.Context) pulumix.Output[*VirtualNetworkGatewayConnection] {
	return pulumix.Output[*VirtualNetworkGatewayConnection]{
		OutputState: o.OutputState,
	}
}

// The authorization key associated with the Express Route Circuit. This field is required only if the type is an ExpressRoute connection.
func (o VirtualNetworkGatewayConnectionOutput) AuthorizationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualNetworkGatewayConnection) pulumi.StringPtrOutput { return v.AuthorizationKey }).(pulumi.StringPtrOutput)
}

// Connection mode to use. Possible values are `Default`, `InitiatorOnly` and `ResponderOnly`. Defaults to `Default`. Changing this value will force a resource to be created.
func (o VirtualNetworkGatewayConnectionOutput) ConnectionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualNetworkGatewayConnection) pulumi.StringPtrOutput { return v.ConnectionMode }).(pulumi.StringPtrOutput)
}

// The IKE protocol version to use. Possible values are `IKEv1` and `IKEv2`, values are `IKEv1` and `IKEv2`. Defaults to `IKEv2`. Changing this forces a new resource to be created.
// > **Note:** Only valid for `IPSec` connections on virtual network gateways with SKU `VpnGw1`, `VpnGw2`, `VpnGw3`, `VpnGw1AZ`, `VpnGw2AZ` or `VpnGw3AZ`.
func (o VirtualNetworkGatewayConnectionOutput) ConnectionProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualNetworkGatewayConnection) pulumi.StringOutput { return v.ConnectionProtocol }).(pulumi.StringOutput)
}

// A `customBgpAddresses` block which is documented below.
// The block can only be used on `IPSec` / `activeactive` connections,
// For details about see [the relevant section in the Azure documentation](https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-howto-aws-bgp).
func (o VirtualNetworkGatewayConnectionOutput) CustomBgpAddresses() VirtualNetworkGatewayConnectionCustomBgpAddressesPtrOutput {
	return o.ApplyT(func(v *VirtualNetworkGatewayConnection) VirtualNetworkGatewayConnectionCustomBgpAddressesPtrOutput {
		return v.CustomBgpAddresses
	}).(VirtualNetworkGatewayConnectionCustomBgpAddressesPtrOutput)
}

// The dead peer detection timeout of this connection in seconds. Changing this forces a new resource to be created.
func (o VirtualNetworkGatewayConnectionOutput) DpdTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualNetworkGatewayConnection) pulumi.IntPtrOutput { return v.DpdTimeoutSeconds }).(pulumi.IntPtrOutput)
}

// A list of the egress NAT Rule Ids.
func (o VirtualNetworkGatewayConnectionOutput) EgressNatRuleIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualNetworkGatewayConnection) pulumi.StringArrayOutput { return v.EgressNatRuleIds }).(pulumi.StringArrayOutput)
}

// If `true`, BGP (Border Gateway Protocol) is enabled for this connection. Defaults to `false`.
func (o VirtualNetworkGatewayConnectionOutput) EnableBgp() pulumi.BoolOutput {
	return o.ApplyT(func(v *VirtualNetworkGatewayConnection) pulumi.BoolOutput { return v.EnableBgp }).(pulumi.BoolOutput)
}

// The ID of the Express Route Circuit when creating an ExpressRoute connection (i.e. when `type` is `ExpressRoute`). The Express Route Circuit can be in the same or in a different subscription. Changing this forces a new resource to be created.
func (o VirtualNetworkGatewayConnectionOutput) ExpressRouteCircuitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualNetworkGatewayConnection) pulumi.StringPtrOutput { return v.ExpressRouteCircuitId }).(pulumi.StringPtrOutput)
}

// If `true`, data packets will bypass ExpressRoute Gateway for data forwarding This is only valid for ExpressRoute connections.
func (o VirtualNetworkGatewayConnectionOutput) ExpressRouteGatewayBypass() pulumi.BoolOutput {
	return o.ApplyT(func(v *VirtualNetworkGatewayConnection) pulumi.BoolOutput { return v.ExpressRouteGatewayBypass }).(pulumi.BoolOutput)
}

// A list of the ingress NAT Rule Ids.
func (o VirtualNetworkGatewayConnectionOutput) IngressNatRuleIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualNetworkGatewayConnection) pulumi.StringArrayOutput { return v.IngressNatRuleIds }).(pulumi.StringArrayOutput)
}

// A `ipsecPolicy` block which is documented below.
// Only a single policy can be defined for a connection. For details on
// custom policies refer to [the relevant section in the Azure documentation](https://docs.microsoft.com/azure/vpn-gateway/vpn-gateway-ipsecikepolicy-rm-powershell).
func (o VirtualNetworkGatewayConnectionOutput) IpsecPolicy() VirtualNetworkGatewayConnectionIpsecPolicyPtrOutput {
	return o.ApplyT(func(v *VirtualNetworkGatewayConnection) VirtualNetworkGatewayConnectionIpsecPolicyPtrOutput {
		return v.IpsecPolicy
	}).(VirtualNetworkGatewayConnectionIpsecPolicyPtrOutput)
}

// Use private local Azure IP for the connection. Changing this forces a new resource to be created.
func (o VirtualNetworkGatewayConnectionOutput) LocalAzureIpAddressEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualNetworkGatewayConnection) pulumi.BoolPtrOutput { return v.LocalAzureIpAddressEnabled }).(pulumi.BoolPtrOutput)
}

// The ID of the local network gateway when creating Site-to-Site connection (i.e. when `type` is `IPsec`).
func (o VirtualNetworkGatewayConnectionOutput) LocalNetworkGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualNetworkGatewayConnection) pulumi.StringPtrOutput { return v.LocalNetworkGatewayId }).(pulumi.StringPtrOutput)
}

// The location/region where the connection is located. Changing this forces a new resource to be created.
func (o VirtualNetworkGatewayConnectionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualNetworkGatewayConnection) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the connection. Changing the name forces a new resource to be created.
func (o VirtualNetworkGatewayConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualNetworkGatewayConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the peer virtual network gateway when creating a VNet-to-VNet connection (i.e. when `type` is `Vnet2Vnet`). The peer Virtual Network Gateway can be in the same or in a different subscription. Changing this forces a new resource to be created.
func (o VirtualNetworkGatewayConnectionOutput) PeerVirtualNetworkGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualNetworkGatewayConnection) pulumi.StringPtrOutput { return v.PeerVirtualNetworkGatewayId }).(pulumi.StringPtrOutput)
}

// The name of the resource group in which to create the connection Changing this forces a new resource to be created.
func (o VirtualNetworkGatewayConnectionOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualNetworkGatewayConnection) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The routing weight. Defaults to `10`.
func (o VirtualNetworkGatewayConnectionOutput) RoutingWeight() pulumi.IntOutput {
	return o.ApplyT(func(v *VirtualNetworkGatewayConnection) pulumi.IntOutput { return v.RoutingWeight }).(pulumi.IntOutput)
}

// The shared IPSec key. A key could be provided if a Site-to-Site, VNet-to-VNet or ExpressRoute connection is created.
func (o VirtualNetworkGatewayConnectionOutput) SharedKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualNetworkGatewayConnection) pulumi.StringPtrOutput { return v.SharedKey }).(pulumi.StringPtrOutput)
}

// A mapping of tags to assign to the resource.
func (o VirtualNetworkGatewayConnectionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualNetworkGatewayConnection) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// One or more `trafficSelectorPolicy` blocks which are documented below.
// A `trafficSelectorPolicy` allows to specify a traffic selector policy proposal to be used in a virtual network gateway connection.
// For details about traffic selectors refer to [the relevant section in the Azure documentation](https://docs.microsoft.com/azure/vpn-gateway/vpn-gateway-connect-multiple-policybased-rm-ps).
func (o VirtualNetworkGatewayConnectionOutput) TrafficSelectorPolicy() VirtualNetworkGatewayConnectionTrafficSelectorPolicyPtrOutput {
	return o.ApplyT(func(v *VirtualNetworkGatewayConnection) VirtualNetworkGatewayConnectionTrafficSelectorPolicyPtrOutput {
		return v.TrafficSelectorPolicy
	}).(VirtualNetworkGatewayConnectionTrafficSelectorPolicyPtrOutput)
}

// The type of connection. Valid options are `IPsec` (Site-to-Site), `ExpressRoute` (ExpressRoute), and `Vnet2Vnet` (VNet-to-VNet). Each connection type requires different mandatory arguments (refer to the examples above). Changing this forces a new resource to be created.
func (o VirtualNetworkGatewayConnectionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualNetworkGatewayConnection) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// If `true`, policy-based traffic selectors are enabled for this connection. Enabling policy-based traffic selectors requires an `ipsecPolicy` block. Defaults to `false`.
func (o VirtualNetworkGatewayConnectionOutput) UsePolicyBasedTrafficSelectors() pulumi.BoolOutput {
	return o.ApplyT(func(v *VirtualNetworkGatewayConnection) pulumi.BoolOutput { return v.UsePolicyBasedTrafficSelectors }).(pulumi.BoolOutput)
}

// The ID of the Virtual Network Gateway in which the connection will be created. Changing this forces a new resource to be created.
func (o VirtualNetworkGatewayConnectionOutput) VirtualNetworkGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualNetworkGatewayConnection) pulumi.StringOutput { return v.VirtualNetworkGatewayId }).(pulumi.StringOutput)
}

type VirtualNetworkGatewayConnectionArrayOutput struct{ *pulumi.OutputState }

func (VirtualNetworkGatewayConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualNetworkGatewayConnection)(nil)).Elem()
}

func (o VirtualNetworkGatewayConnectionArrayOutput) ToVirtualNetworkGatewayConnectionArrayOutput() VirtualNetworkGatewayConnectionArrayOutput {
	return o
}

func (o VirtualNetworkGatewayConnectionArrayOutput) ToVirtualNetworkGatewayConnectionArrayOutputWithContext(ctx context.Context) VirtualNetworkGatewayConnectionArrayOutput {
	return o
}

func (o VirtualNetworkGatewayConnectionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*VirtualNetworkGatewayConnection] {
	return pulumix.Output[[]*VirtualNetworkGatewayConnection]{
		OutputState: o.OutputState,
	}
}

func (o VirtualNetworkGatewayConnectionArrayOutput) Index(i pulumi.IntInput) VirtualNetworkGatewayConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VirtualNetworkGatewayConnection {
		return vs[0].([]*VirtualNetworkGatewayConnection)[vs[1].(int)]
	}).(VirtualNetworkGatewayConnectionOutput)
}

type VirtualNetworkGatewayConnectionMapOutput struct{ *pulumi.OutputState }

func (VirtualNetworkGatewayConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualNetworkGatewayConnection)(nil)).Elem()
}

func (o VirtualNetworkGatewayConnectionMapOutput) ToVirtualNetworkGatewayConnectionMapOutput() VirtualNetworkGatewayConnectionMapOutput {
	return o
}

func (o VirtualNetworkGatewayConnectionMapOutput) ToVirtualNetworkGatewayConnectionMapOutputWithContext(ctx context.Context) VirtualNetworkGatewayConnectionMapOutput {
	return o
}

func (o VirtualNetworkGatewayConnectionMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*VirtualNetworkGatewayConnection] {
	return pulumix.Output[map[string]*VirtualNetworkGatewayConnection]{
		OutputState: o.OutputState,
	}
}

func (o VirtualNetworkGatewayConnectionMapOutput) MapIndex(k pulumi.StringInput) VirtualNetworkGatewayConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VirtualNetworkGatewayConnection {
		return vs[0].(map[string]*VirtualNetworkGatewayConnection)[vs[1].(string)]
	}).(VirtualNetworkGatewayConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualNetworkGatewayConnectionInput)(nil)).Elem(), &VirtualNetworkGatewayConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualNetworkGatewayConnectionArrayInput)(nil)).Elem(), VirtualNetworkGatewayConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualNetworkGatewayConnectionMapInput)(nil)).Elem(), VirtualNetworkGatewayConnectionMap{})
	pulumi.RegisterOutputType(VirtualNetworkGatewayConnectionOutput{})
	pulumi.RegisterOutputType(VirtualNetworkGatewayConnectionArrayOutput{})
	pulumi.RegisterOutputType(VirtualNetworkGatewayConnectionMapOutput{})
}
