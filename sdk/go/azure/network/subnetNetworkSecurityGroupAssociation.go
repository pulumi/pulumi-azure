// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Associates a Network Security Group with a Subnet within a Virtual Network.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	core/resourceGroup "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/core/resourceGroup"
//	network/networkSecurityGroup "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/networkSecurityGroup"
//	network/subnet "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/subnet"
//	network/subnetNetworkSecurityGroupAssociation "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/subnetNetworkSecurityGroupAssociation"
//	network/virtualNetwork "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/virtualNetwork"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// example, err := core/resourceGroup.NewResourceGroup(ctx, "example", &core/resourceGroup.ResourceGroupArgs{
// Name: "example-resources",
// Location: "West Europe",
// })
// if err != nil {
// return err
// }
// exampleVirtualNetwork, err := network/virtualNetwork.NewVirtualNetwork(ctx, "example", &network/virtualNetwork.VirtualNetworkArgs{
// Name: "example-network",
// AddressSpaces: []string{
// "10.0.0.0/16",
// },
// Location: example.Location,
// ResourceGroupName: example.Name,
// })
// if err != nil {
// return err
// }
// exampleSubnet, err := network/subnet.NewSubnet(ctx, "example", &network/subnet.SubnetArgs{
// Name: "frontend",
// ResourceGroupName: example.Name,
// VirtualNetworkName: exampleVirtualNetwork.Name,
// AddressPrefixes: []string{
// "10.0.2.0/24",
// },
// })
// if err != nil {
// return err
// }
// exampleNetworkSecurityGroup, err := network/networkSecurityGroup.NewNetworkSecurityGroup(ctx, "example", &network/networkSecurityGroup.NetworkSecurityGroupArgs{
// Name: "example-nsg",
// Location: example.Location,
// ResourceGroupName: example.Name,
// SecurityRules: []map[string]interface{}{
// map[string]interface{}{
// "name": "test123",
// "priority": 100,
// "direction": "Inbound",
// "access": "Allow",
// "protocol": "Tcp",
// "sourcePortRange": "*",
// "destinationPortRange": "*",
// "sourceAddressPrefix": "*",
// "destinationAddressPrefix": "*",
// },
// },
// })
// if err != nil {
// return err
// }
// _, err = network/subnetNetworkSecurityGroupAssociation.NewSubnetNetworkSecurityGroupAssociation(ctx, "example", &network/subnetNetworkSecurityGroupAssociation.SubnetNetworkSecurityGroupAssociationArgs{
// SubnetId: exampleSubnet.Id,
// NetworkSecurityGroupId: exampleNetworkSecurityGroup.Id,
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
//
// ## Import
//
// Subnet `<->` Network Security Group Associations can be imported using the `resource id` of the Subnet, e.g.
//
// ```sh
// $ pulumi import azure:network/subnetNetworkSecurityGroupAssociation:SubnetNetworkSecurityGroupAssociation association1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/virtualNetworks/myvnet1/subnets/mysubnet1
// ```
type SubnetNetworkSecurityGroupAssociation struct {
	pulumi.CustomResourceState

	// The ID of the Network Security Group which should be associated with the Subnet. Changing this forces a new resource to be created.
	NetworkSecurityGroupId pulumi.StringOutput `pulumi:"networkSecurityGroupId"`
	// The ID of the Subnet. Changing this forces a new resource to be created.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
}

// NewSubnetNetworkSecurityGroupAssociation registers a new resource with the given unique name, arguments, and options.
func NewSubnetNetworkSecurityGroupAssociation(ctx *pulumi.Context,
	name string, args *SubnetNetworkSecurityGroupAssociationArgs, opts ...pulumi.ResourceOption) (*SubnetNetworkSecurityGroupAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkSecurityGroupId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkSecurityGroupId'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SubnetNetworkSecurityGroupAssociation
	err := ctx.RegisterResource("azure:network/subnetNetworkSecurityGroupAssociation:SubnetNetworkSecurityGroupAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubnetNetworkSecurityGroupAssociation gets an existing SubnetNetworkSecurityGroupAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnetNetworkSecurityGroupAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubnetNetworkSecurityGroupAssociationState, opts ...pulumi.ResourceOption) (*SubnetNetworkSecurityGroupAssociation, error) {
	var resource SubnetNetworkSecurityGroupAssociation
	err := ctx.ReadResource("azure:network/subnetNetworkSecurityGroupAssociation:SubnetNetworkSecurityGroupAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubnetNetworkSecurityGroupAssociation resources.
type subnetNetworkSecurityGroupAssociationState struct {
	// The ID of the Network Security Group which should be associated with the Subnet. Changing this forces a new resource to be created.
	NetworkSecurityGroupId *string `pulumi:"networkSecurityGroupId"`
	// The ID of the Subnet. Changing this forces a new resource to be created.
	SubnetId *string `pulumi:"subnetId"`
}

type SubnetNetworkSecurityGroupAssociationState struct {
	// The ID of the Network Security Group which should be associated with the Subnet. Changing this forces a new resource to be created.
	NetworkSecurityGroupId pulumi.StringPtrInput
	// The ID of the Subnet. Changing this forces a new resource to be created.
	SubnetId pulumi.StringPtrInput
}

func (SubnetNetworkSecurityGroupAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetNetworkSecurityGroupAssociationState)(nil)).Elem()
}

type subnetNetworkSecurityGroupAssociationArgs struct {
	// The ID of the Network Security Group which should be associated with the Subnet. Changing this forces a new resource to be created.
	NetworkSecurityGroupId string `pulumi:"networkSecurityGroupId"`
	// The ID of the Subnet. Changing this forces a new resource to be created.
	SubnetId string `pulumi:"subnetId"`
}

// The set of arguments for constructing a SubnetNetworkSecurityGroupAssociation resource.
type SubnetNetworkSecurityGroupAssociationArgs struct {
	// The ID of the Network Security Group which should be associated with the Subnet. Changing this forces a new resource to be created.
	NetworkSecurityGroupId pulumi.StringInput
	// The ID of the Subnet. Changing this forces a new resource to be created.
	SubnetId pulumi.StringInput
}

func (SubnetNetworkSecurityGroupAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetNetworkSecurityGroupAssociationArgs)(nil)).Elem()
}

type SubnetNetworkSecurityGroupAssociationInput interface {
	pulumi.Input

	ToSubnetNetworkSecurityGroupAssociationOutput() SubnetNetworkSecurityGroupAssociationOutput
	ToSubnetNetworkSecurityGroupAssociationOutputWithContext(ctx context.Context) SubnetNetworkSecurityGroupAssociationOutput
}

func (*SubnetNetworkSecurityGroupAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetNetworkSecurityGroupAssociation)(nil)).Elem()
}

func (i *SubnetNetworkSecurityGroupAssociation) ToSubnetNetworkSecurityGroupAssociationOutput() SubnetNetworkSecurityGroupAssociationOutput {
	return i.ToSubnetNetworkSecurityGroupAssociationOutputWithContext(context.Background())
}

func (i *SubnetNetworkSecurityGroupAssociation) ToSubnetNetworkSecurityGroupAssociationOutputWithContext(ctx context.Context) SubnetNetworkSecurityGroupAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetNetworkSecurityGroupAssociationOutput)
}

// SubnetNetworkSecurityGroupAssociationArrayInput is an input type that accepts SubnetNetworkSecurityGroupAssociationArray and SubnetNetworkSecurityGroupAssociationArrayOutput values.
// You can construct a concrete instance of `SubnetNetworkSecurityGroupAssociationArrayInput` via:
//
//	SubnetNetworkSecurityGroupAssociationArray{ SubnetNetworkSecurityGroupAssociationArgs{...} }
type SubnetNetworkSecurityGroupAssociationArrayInput interface {
	pulumi.Input

	ToSubnetNetworkSecurityGroupAssociationArrayOutput() SubnetNetworkSecurityGroupAssociationArrayOutput
	ToSubnetNetworkSecurityGroupAssociationArrayOutputWithContext(context.Context) SubnetNetworkSecurityGroupAssociationArrayOutput
}

type SubnetNetworkSecurityGroupAssociationArray []SubnetNetworkSecurityGroupAssociationInput

func (SubnetNetworkSecurityGroupAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubnetNetworkSecurityGroupAssociation)(nil)).Elem()
}

func (i SubnetNetworkSecurityGroupAssociationArray) ToSubnetNetworkSecurityGroupAssociationArrayOutput() SubnetNetworkSecurityGroupAssociationArrayOutput {
	return i.ToSubnetNetworkSecurityGroupAssociationArrayOutputWithContext(context.Background())
}

func (i SubnetNetworkSecurityGroupAssociationArray) ToSubnetNetworkSecurityGroupAssociationArrayOutputWithContext(ctx context.Context) SubnetNetworkSecurityGroupAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetNetworkSecurityGroupAssociationArrayOutput)
}

// SubnetNetworkSecurityGroupAssociationMapInput is an input type that accepts SubnetNetworkSecurityGroupAssociationMap and SubnetNetworkSecurityGroupAssociationMapOutput values.
// You can construct a concrete instance of `SubnetNetworkSecurityGroupAssociationMapInput` via:
//
//	SubnetNetworkSecurityGroupAssociationMap{ "key": SubnetNetworkSecurityGroupAssociationArgs{...} }
type SubnetNetworkSecurityGroupAssociationMapInput interface {
	pulumi.Input

	ToSubnetNetworkSecurityGroupAssociationMapOutput() SubnetNetworkSecurityGroupAssociationMapOutput
	ToSubnetNetworkSecurityGroupAssociationMapOutputWithContext(context.Context) SubnetNetworkSecurityGroupAssociationMapOutput
}

type SubnetNetworkSecurityGroupAssociationMap map[string]SubnetNetworkSecurityGroupAssociationInput

func (SubnetNetworkSecurityGroupAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubnetNetworkSecurityGroupAssociation)(nil)).Elem()
}

func (i SubnetNetworkSecurityGroupAssociationMap) ToSubnetNetworkSecurityGroupAssociationMapOutput() SubnetNetworkSecurityGroupAssociationMapOutput {
	return i.ToSubnetNetworkSecurityGroupAssociationMapOutputWithContext(context.Background())
}

func (i SubnetNetworkSecurityGroupAssociationMap) ToSubnetNetworkSecurityGroupAssociationMapOutputWithContext(ctx context.Context) SubnetNetworkSecurityGroupAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetNetworkSecurityGroupAssociationMapOutput)
}

type SubnetNetworkSecurityGroupAssociationOutput struct{ *pulumi.OutputState }

func (SubnetNetworkSecurityGroupAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetNetworkSecurityGroupAssociation)(nil)).Elem()
}

func (o SubnetNetworkSecurityGroupAssociationOutput) ToSubnetNetworkSecurityGroupAssociationOutput() SubnetNetworkSecurityGroupAssociationOutput {
	return o
}

func (o SubnetNetworkSecurityGroupAssociationOutput) ToSubnetNetworkSecurityGroupAssociationOutputWithContext(ctx context.Context) SubnetNetworkSecurityGroupAssociationOutput {
	return o
}

// The ID of the Network Security Group which should be associated with the Subnet. Changing this forces a new resource to be created.
func (o SubnetNetworkSecurityGroupAssociationOutput) NetworkSecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubnetNetworkSecurityGroupAssociation) pulumi.StringOutput { return v.NetworkSecurityGroupId }).(pulumi.StringOutput)
}

// The ID of the Subnet. Changing this forces a new resource to be created.
func (o SubnetNetworkSecurityGroupAssociationOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubnetNetworkSecurityGroupAssociation) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

type SubnetNetworkSecurityGroupAssociationArrayOutput struct{ *pulumi.OutputState }

func (SubnetNetworkSecurityGroupAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubnetNetworkSecurityGroupAssociation)(nil)).Elem()
}

func (o SubnetNetworkSecurityGroupAssociationArrayOutput) ToSubnetNetworkSecurityGroupAssociationArrayOutput() SubnetNetworkSecurityGroupAssociationArrayOutput {
	return o
}

func (o SubnetNetworkSecurityGroupAssociationArrayOutput) ToSubnetNetworkSecurityGroupAssociationArrayOutputWithContext(ctx context.Context) SubnetNetworkSecurityGroupAssociationArrayOutput {
	return o
}

func (o SubnetNetworkSecurityGroupAssociationArrayOutput) Index(i pulumi.IntInput) SubnetNetworkSecurityGroupAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SubnetNetworkSecurityGroupAssociation {
		return vs[0].([]*SubnetNetworkSecurityGroupAssociation)[vs[1].(int)]
	}).(SubnetNetworkSecurityGroupAssociationOutput)
}

type SubnetNetworkSecurityGroupAssociationMapOutput struct{ *pulumi.OutputState }

func (SubnetNetworkSecurityGroupAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubnetNetworkSecurityGroupAssociation)(nil)).Elem()
}

func (o SubnetNetworkSecurityGroupAssociationMapOutput) ToSubnetNetworkSecurityGroupAssociationMapOutput() SubnetNetworkSecurityGroupAssociationMapOutput {
	return o
}

func (o SubnetNetworkSecurityGroupAssociationMapOutput) ToSubnetNetworkSecurityGroupAssociationMapOutputWithContext(ctx context.Context) SubnetNetworkSecurityGroupAssociationMapOutput {
	return o
}

func (o SubnetNetworkSecurityGroupAssociationMapOutput) MapIndex(k pulumi.StringInput) SubnetNetworkSecurityGroupAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SubnetNetworkSecurityGroupAssociation {
		return vs[0].(map[string]*SubnetNetworkSecurityGroupAssociation)[vs[1].(string)]
	}).(SubnetNetworkSecurityGroupAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetNetworkSecurityGroupAssociationInput)(nil)).Elem(), &SubnetNetworkSecurityGroupAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetNetworkSecurityGroupAssociationArrayInput)(nil)).Elem(), SubnetNetworkSecurityGroupAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetNetworkSecurityGroupAssociationMapInput)(nil)).Elem(), SubnetNetworkSecurityGroupAssociationMap{})
	pulumi.RegisterOutputType(SubnetNetworkSecurityGroupAssociationOutput{})
	pulumi.RegisterOutputType(SubnetNetworkSecurityGroupAssociationArrayOutput{})
	pulumi.RegisterOutputType(SubnetNetworkSecurityGroupAssociationMapOutput{})
}
