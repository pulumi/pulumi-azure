// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Express Route Port.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West US"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = network.NewExpressRoutePort(ctx, "exampleExpressRoutePort", &network.ExpressRoutePortArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				PeeringLocation:   pulumi.String("Airtel-Chennai-CLS"),
//				BandwidthInGbps:   pulumi.Int(10),
//				Encapsulation:     pulumi.String("Dot1Q"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Express Route Ports can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:network/expressRoutePort:ExpressRoutePort example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/expressRoutePorts/port1
//
// ```
type ExpressRoutePort struct {
	pulumi.CustomResourceState

	// Bandwidth of the Express Route Port in Gbps. Changing this forces a new Express Route Port to be created.
	BandwidthInGbps pulumi.IntOutput `pulumi:"bandwidthInGbps"`
	// The billing type of the Express Route Port. Possible values are `MeteredData` and `UnlimitedData`.
	BillingType pulumi.StringOutput `pulumi:"billingType"`
	// The encapsulation method used for the Express Route Port. Changing this forces a new Express Route Port to be created. Possible values are: `Dot1Q`, `QinQ`.
	Encapsulation pulumi.StringOutput `pulumi:"encapsulation"`
	// The EtherType of the Express Route Port.
	Ethertype pulumi.StringOutput `pulumi:"ethertype"`
	// The resource GUID of the Express Route Port.
	Guid pulumi.StringOutput `pulumi:"guid"`
	// An `identity` block as defined below.
	Identity ExpressRoutePortIdentityPtrOutput `pulumi:"identity"`
	// A list of `link` blocks as defined below.
	Link1 ExpressRoutePortLink1Output `pulumi:"link1"`
	// A list of `link` blocks as defined below.
	Link2 ExpressRoutePortLink2Output `pulumi:"link2"`
	// The Azure Region where the Express Route Port should exist. Changing this forces a new Express Route Port to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The maximum transmission unit of the Express Route Port.
	Mtu pulumi.StringOutput `pulumi:"mtu"`
	// The name which should be used for this Express Route Port. Changing this forces a new Express Route Port to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the peering location that this Express Route Port is physically mapped to. Changing this forces a new Express Route Port to be created.
	PeeringLocation pulumi.StringOutput `pulumi:"peeringLocation"`
	// The name of the Resource Group where the Express Route Port should exist. Changing this forces a new Express Route Port to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Express Route Port.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewExpressRoutePort registers a new resource with the given unique name, arguments, and options.
func NewExpressRoutePort(ctx *pulumi.Context,
	name string, args *ExpressRoutePortArgs, opts ...pulumi.ResourceOption) (*ExpressRoutePort, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BandwidthInGbps == nil {
		return nil, errors.New("invalid value for required argument 'BandwidthInGbps'")
	}
	if args.Encapsulation == nil {
		return nil, errors.New("invalid value for required argument 'Encapsulation'")
	}
	if args.PeeringLocation == nil {
		return nil, errors.New("invalid value for required argument 'PeeringLocation'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ExpressRoutePort
	err := ctx.RegisterResource("azure:network/expressRoutePort:ExpressRoutePort", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExpressRoutePort gets an existing ExpressRoutePort resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExpressRoutePort(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExpressRoutePortState, opts ...pulumi.ResourceOption) (*ExpressRoutePort, error) {
	var resource ExpressRoutePort
	err := ctx.ReadResource("azure:network/expressRoutePort:ExpressRoutePort", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExpressRoutePort resources.
type expressRoutePortState struct {
	// Bandwidth of the Express Route Port in Gbps. Changing this forces a new Express Route Port to be created.
	BandwidthInGbps *int `pulumi:"bandwidthInGbps"`
	// The billing type of the Express Route Port. Possible values are `MeteredData` and `UnlimitedData`.
	BillingType *string `pulumi:"billingType"`
	// The encapsulation method used for the Express Route Port. Changing this forces a new Express Route Port to be created. Possible values are: `Dot1Q`, `QinQ`.
	Encapsulation *string `pulumi:"encapsulation"`
	// The EtherType of the Express Route Port.
	Ethertype *string `pulumi:"ethertype"`
	// The resource GUID of the Express Route Port.
	Guid *string `pulumi:"guid"`
	// An `identity` block as defined below.
	Identity *ExpressRoutePortIdentity `pulumi:"identity"`
	// A list of `link` blocks as defined below.
	Link1 *ExpressRoutePortLink1 `pulumi:"link1"`
	// A list of `link` blocks as defined below.
	Link2 *ExpressRoutePortLink2 `pulumi:"link2"`
	// The Azure Region where the Express Route Port should exist. Changing this forces a new Express Route Port to be created.
	Location *string `pulumi:"location"`
	// The maximum transmission unit of the Express Route Port.
	Mtu *string `pulumi:"mtu"`
	// The name which should be used for this Express Route Port. Changing this forces a new Express Route Port to be created.
	Name *string `pulumi:"name"`
	// The name of the peering location that this Express Route Port is physically mapped to. Changing this forces a new Express Route Port to be created.
	PeeringLocation *string `pulumi:"peeringLocation"`
	// The name of the Resource Group where the Express Route Port should exist. Changing this forces a new Express Route Port to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Express Route Port.
	Tags map[string]string `pulumi:"tags"`
}

type ExpressRoutePortState struct {
	// Bandwidth of the Express Route Port in Gbps. Changing this forces a new Express Route Port to be created.
	BandwidthInGbps pulumi.IntPtrInput
	// The billing type of the Express Route Port. Possible values are `MeteredData` and `UnlimitedData`.
	BillingType pulumi.StringPtrInput
	// The encapsulation method used for the Express Route Port. Changing this forces a new Express Route Port to be created. Possible values are: `Dot1Q`, `QinQ`.
	Encapsulation pulumi.StringPtrInput
	// The EtherType of the Express Route Port.
	Ethertype pulumi.StringPtrInput
	// The resource GUID of the Express Route Port.
	Guid pulumi.StringPtrInput
	// An `identity` block as defined below.
	Identity ExpressRoutePortIdentityPtrInput
	// A list of `link` blocks as defined below.
	Link1 ExpressRoutePortLink1PtrInput
	// A list of `link` blocks as defined below.
	Link2 ExpressRoutePortLink2PtrInput
	// The Azure Region where the Express Route Port should exist. Changing this forces a new Express Route Port to be created.
	Location pulumi.StringPtrInput
	// The maximum transmission unit of the Express Route Port.
	Mtu pulumi.StringPtrInput
	// The name which should be used for this Express Route Port. Changing this forces a new Express Route Port to be created.
	Name pulumi.StringPtrInput
	// The name of the peering location that this Express Route Port is physically mapped to. Changing this forces a new Express Route Port to be created.
	PeeringLocation pulumi.StringPtrInput
	// The name of the Resource Group where the Express Route Port should exist. Changing this forces a new Express Route Port to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Express Route Port.
	Tags pulumi.StringMapInput
}

func (ExpressRoutePortState) ElementType() reflect.Type {
	return reflect.TypeOf((*expressRoutePortState)(nil)).Elem()
}

type expressRoutePortArgs struct {
	// Bandwidth of the Express Route Port in Gbps. Changing this forces a new Express Route Port to be created.
	BandwidthInGbps int `pulumi:"bandwidthInGbps"`
	// The billing type of the Express Route Port. Possible values are `MeteredData` and `UnlimitedData`.
	BillingType *string `pulumi:"billingType"`
	// The encapsulation method used for the Express Route Port. Changing this forces a new Express Route Port to be created. Possible values are: `Dot1Q`, `QinQ`.
	Encapsulation string `pulumi:"encapsulation"`
	// An `identity` block as defined below.
	Identity *ExpressRoutePortIdentity `pulumi:"identity"`
	// A list of `link` blocks as defined below.
	Link1 *ExpressRoutePortLink1 `pulumi:"link1"`
	// A list of `link` blocks as defined below.
	Link2 *ExpressRoutePortLink2 `pulumi:"link2"`
	// The Azure Region where the Express Route Port should exist. Changing this forces a new Express Route Port to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Express Route Port. Changing this forces a new Express Route Port to be created.
	Name *string `pulumi:"name"`
	// The name of the peering location that this Express Route Port is physically mapped to. Changing this forces a new Express Route Port to be created.
	PeeringLocation string `pulumi:"peeringLocation"`
	// The name of the Resource Group where the Express Route Port should exist. Changing this forces a new Express Route Port to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Express Route Port.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ExpressRoutePort resource.
type ExpressRoutePortArgs struct {
	// Bandwidth of the Express Route Port in Gbps. Changing this forces a new Express Route Port to be created.
	BandwidthInGbps pulumi.IntInput
	// The billing type of the Express Route Port. Possible values are `MeteredData` and `UnlimitedData`.
	BillingType pulumi.StringPtrInput
	// The encapsulation method used for the Express Route Port. Changing this forces a new Express Route Port to be created. Possible values are: `Dot1Q`, `QinQ`.
	Encapsulation pulumi.StringInput
	// An `identity` block as defined below.
	Identity ExpressRoutePortIdentityPtrInput
	// A list of `link` blocks as defined below.
	Link1 ExpressRoutePortLink1PtrInput
	// A list of `link` blocks as defined below.
	Link2 ExpressRoutePortLink2PtrInput
	// The Azure Region where the Express Route Port should exist. Changing this forces a new Express Route Port to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Express Route Port. Changing this forces a new Express Route Port to be created.
	Name pulumi.StringPtrInput
	// The name of the peering location that this Express Route Port is physically mapped to. Changing this forces a new Express Route Port to be created.
	PeeringLocation pulumi.StringInput
	// The name of the Resource Group where the Express Route Port should exist. Changing this forces a new Express Route Port to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags which should be assigned to the Express Route Port.
	Tags pulumi.StringMapInput
}

func (ExpressRoutePortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*expressRoutePortArgs)(nil)).Elem()
}

type ExpressRoutePortInput interface {
	pulumi.Input

	ToExpressRoutePortOutput() ExpressRoutePortOutput
	ToExpressRoutePortOutputWithContext(ctx context.Context) ExpressRoutePortOutput
}

func (*ExpressRoutePort) ElementType() reflect.Type {
	return reflect.TypeOf((**ExpressRoutePort)(nil)).Elem()
}

func (i *ExpressRoutePort) ToExpressRoutePortOutput() ExpressRoutePortOutput {
	return i.ToExpressRoutePortOutputWithContext(context.Background())
}

func (i *ExpressRoutePort) ToExpressRoutePortOutputWithContext(ctx context.Context) ExpressRoutePortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpressRoutePortOutput)
}

// ExpressRoutePortArrayInput is an input type that accepts ExpressRoutePortArray and ExpressRoutePortArrayOutput values.
// You can construct a concrete instance of `ExpressRoutePortArrayInput` via:
//
//	ExpressRoutePortArray{ ExpressRoutePortArgs{...} }
type ExpressRoutePortArrayInput interface {
	pulumi.Input

	ToExpressRoutePortArrayOutput() ExpressRoutePortArrayOutput
	ToExpressRoutePortArrayOutputWithContext(context.Context) ExpressRoutePortArrayOutput
}

type ExpressRoutePortArray []ExpressRoutePortInput

func (ExpressRoutePortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExpressRoutePort)(nil)).Elem()
}

func (i ExpressRoutePortArray) ToExpressRoutePortArrayOutput() ExpressRoutePortArrayOutput {
	return i.ToExpressRoutePortArrayOutputWithContext(context.Background())
}

func (i ExpressRoutePortArray) ToExpressRoutePortArrayOutputWithContext(ctx context.Context) ExpressRoutePortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpressRoutePortArrayOutput)
}

// ExpressRoutePortMapInput is an input type that accepts ExpressRoutePortMap and ExpressRoutePortMapOutput values.
// You can construct a concrete instance of `ExpressRoutePortMapInput` via:
//
//	ExpressRoutePortMap{ "key": ExpressRoutePortArgs{...} }
type ExpressRoutePortMapInput interface {
	pulumi.Input

	ToExpressRoutePortMapOutput() ExpressRoutePortMapOutput
	ToExpressRoutePortMapOutputWithContext(context.Context) ExpressRoutePortMapOutput
}

type ExpressRoutePortMap map[string]ExpressRoutePortInput

func (ExpressRoutePortMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExpressRoutePort)(nil)).Elem()
}

func (i ExpressRoutePortMap) ToExpressRoutePortMapOutput() ExpressRoutePortMapOutput {
	return i.ToExpressRoutePortMapOutputWithContext(context.Background())
}

func (i ExpressRoutePortMap) ToExpressRoutePortMapOutputWithContext(ctx context.Context) ExpressRoutePortMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpressRoutePortMapOutput)
}

type ExpressRoutePortOutput struct{ *pulumi.OutputState }

func (ExpressRoutePortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExpressRoutePort)(nil)).Elem()
}

func (o ExpressRoutePortOutput) ToExpressRoutePortOutput() ExpressRoutePortOutput {
	return o
}

func (o ExpressRoutePortOutput) ToExpressRoutePortOutputWithContext(ctx context.Context) ExpressRoutePortOutput {
	return o
}

// Bandwidth of the Express Route Port in Gbps. Changing this forces a new Express Route Port to be created.
func (o ExpressRoutePortOutput) BandwidthInGbps() pulumi.IntOutput {
	return o.ApplyT(func(v *ExpressRoutePort) pulumi.IntOutput { return v.BandwidthInGbps }).(pulumi.IntOutput)
}

// The billing type of the Express Route Port. Possible values are `MeteredData` and `UnlimitedData`.
func (o ExpressRoutePortOutput) BillingType() pulumi.StringOutput {
	return o.ApplyT(func(v *ExpressRoutePort) pulumi.StringOutput { return v.BillingType }).(pulumi.StringOutput)
}

// The encapsulation method used for the Express Route Port. Changing this forces a new Express Route Port to be created. Possible values are: `Dot1Q`, `QinQ`.
func (o ExpressRoutePortOutput) Encapsulation() pulumi.StringOutput {
	return o.ApplyT(func(v *ExpressRoutePort) pulumi.StringOutput { return v.Encapsulation }).(pulumi.StringOutput)
}

// The EtherType of the Express Route Port.
func (o ExpressRoutePortOutput) Ethertype() pulumi.StringOutput {
	return o.ApplyT(func(v *ExpressRoutePort) pulumi.StringOutput { return v.Ethertype }).(pulumi.StringOutput)
}

// The resource GUID of the Express Route Port.
func (o ExpressRoutePortOutput) Guid() pulumi.StringOutput {
	return o.ApplyT(func(v *ExpressRoutePort) pulumi.StringOutput { return v.Guid }).(pulumi.StringOutput)
}

// An `identity` block as defined below.
func (o ExpressRoutePortOutput) Identity() ExpressRoutePortIdentityPtrOutput {
	return o.ApplyT(func(v *ExpressRoutePort) ExpressRoutePortIdentityPtrOutput { return v.Identity }).(ExpressRoutePortIdentityPtrOutput)
}

// A list of `link` blocks as defined below.
func (o ExpressRoutePortOutput) Link1() ExpressRoutePortLink1Output {
	return o.ApplyT(func(v *ExpressRoutePort) ExpressRoutePortLink1Output { return v.Link1 }).(ExpressRoutePortLink1Output)
}

// A list of `link` blocks as defined below.
func (o ExpressRoutePortOutput) Link2() ExpressRoutePortLink2Output {
	return o.ApplyT(func(v *ExpressRoutePort) ExpressRoutePortLink2Output { return v.Link2 }).(ExpressRoutePortLink2Output)
}

// The Azure Region where the Express Route Port should exist. Changing this forces a new Express Route Port to be created.
func (o ExpressRoutePortOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ExpressRoutePort) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The maximum transmission unit of the Express Route Port.
func (o ExpressRoutePortOutput) Mtu() pulumi.StringOutput {
	return o.ApplyT(func(v *ExpressRoutePort) pulumi.StringOutput { return v.Mtu }).(pulumi.StringOutput)
}

// The name which should be used for this Express Route Port. Changing this forces a new Express Route Port to be created.
func (o ExpressRoutePortOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ExpressRoutePort) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the peering location that this Express Route Port is physically mapped to. Changing this forces a new Express Route Port to be created.
func (o ExpressRoutePortOutput) PeeringLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *ExpressRoutePort) pulumi.StringOutput { return v.PeeringLocation }).(pulumi.StringOutput)
}

// The name of the Resource Group where the Express Route Port should exist. Changing this forces a new Express Route Port to be created.
func (o ExpressRoutePortOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ExpressRoutePort) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the Express Route Port.
func (o ExpressRoutePortOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ExpressRoutePort) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type ExpressRoutePortArrayOutput struct{ *pulumi.OutputState }

func (ExpressRoutePortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExpressRoutePort)(nil)).Elem()
}

func (o ExpressRoutePortArrayOutput) ToExpressRoutePortArrayOutput() ExpressRoutePortArrayOutput {
	return o
}

func (o ExpressRoutePortArrayOutput) ToExpressRoutePortArrayOutputWithContext(ctx context.Context) ExpressRoutePortArrayOutput {
	return o
}

func (o ExpressRoutePortArrayOutput) Index(i pulumi.IntInput) ExpressRoutePortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExpressRoutePort {
		return vs[0].([]*ExpressRoutePort)[vs[1].(int)]
	}).(ExpressRoutePortOutput)
}

type ExpressRoutePortMapOutput struct{ *pulumi.OutputState }

func (ExpressRoutePortMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExpressRoutePort)(nil)).Elem()
}

func (o ExpressRoutePortMapOutput) ToExpressRoutePortMapOutput() ExpressRoutePortMapOutput {
	return o
}

func (o ExpressRoutePortMapOutput) ToExpressRoutePortMapOutputWithContext(ctx context.Context) ExpressRoutePortMapOutput {
	return o
}

func (o ExpressRoutePortMapOutput) MapIndex(k pulumi.StringInput) ExpressRoutePortOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExpressRoutePort {
		return vs[0].(map[string]*ExpressRoutePort)[vs[1].(string)]
	}).(ExpressRoutePortOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExpressRoutePortInput)(nil)).Elem(), &ExpressRoutePort{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExpressRoutePortArrayInput)(nil)).Elem(), ExpressRoutePortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExpressRoutePortMapInput)(nil)).Elem(), ExpressRoutePortMap{})
	pulumi.RegisterOutputType(ExpressRoutePortOutput{})
	pulumi.RegisterOutputType(ExpressRoutePortArrayOutput{})
	pulumi.RegisterOutputType(ExpressRoutePortMapOutput{})
}
