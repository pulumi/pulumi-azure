// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package network

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Associates a Route Table with a Subnet within a Virtual Network.
// 
// > **NOTE:** Subnet `<->` Route Table associations currently need to be configured on both this resource and using the `routeTableId` field on the `network.Subnet` resource. The next major version of the AzureRM Provider (2.0) will remove the `routeTableId` field from the `network.Subnet` resource such that this resource is used to link resources in future.
// 
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/subnet_route_table_association.html.markdown.
type SubnetRouteTableAssociation struct {
	pulumi.CustomResourceState

	// The ID of the Route Table which should be associated with the Subnet. Changing this forces a new resource to be created.
	RouteTableId pulumi.StringOutput `pulumi:"routeTableId"`
	// The ID of the Subnet. Changing this forces a new resource to be created.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
}

// NewSubnetRouteTableAssociation registers a new resource with the given unique name, arguments, and options.
func NewSubnetRouteTableAssociation(ctx *pulumi.Context,
	name string, args *SubnetRouteTableAssociationArgs, opts ...pulumi.ResourceOption) (*SubnetRouteTableAssociation, error) {
	if args == nil || args.RouteTableId == nil {
		return nil, errors.New("missing required argument 'RouteTableId'")
	}
	if args == nil || args.SubnetId == nil {
		return nil, errors.New("missing required argument 'SubnetId'")
	}
	if args == nil {
		args = &SubnetRouteTableAssociationArgs{}
	}
	var resource SubnetRouteTableAssociation
	err := ctx.RegisterResource("azure:network/subnetRouteTableAssociation:SubnetRouteTableAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubnetRouteTableAssociation gets an existing SubnetRouteTableAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnetRouteTableAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubnetRouteTableAssociationState, opts ...pulumi.ResourceOption) (*SubnetRouteTableAssociation, error) {
	var resource SubnetRouteTableAssociation
	err := ctx.ReadResource("azure:network/subnetRouteTableAssociation:SubnetRouteTableAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubnetRouteTableAssociation resources.
type subnetRouteTableAssociationState struct {
	// The ID of the Route Table which should be associated with the Subnet. Changing this forces a new resource to be created.
	RouteTableId *string `pulumi:"routeTableId"`
	// The ID of the Subnet. Changing this forces a new resource to be created.
	SubnetId *string `pulumi:"subnetId"`
}

type SubnetRouteTableAssociationState struct {
	// The ID of the Route Table which should be associated with the Subnet. Changing this forces a new resource to be created.
	RouteTableId pulumi.StringPtrInput
	// The ID of the Subnet. Changing this forces a new resource to be created.
	SubnetId pulumi.StringPtrInput
}

func (SubnetRouteTableAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetRouteTableAssociationState)(nil)).Elem()
}

type subnetRouteTableAssociationArgs struct {
	// The ID of the Route Table which should be associated with the Subnet. Changing this forces a new resource to be created.
	RouteTableId string `pulumi:"routeTableId"`
	// The ID of the Subnet. Changing this forces a new resource to be created.
	SubnetId string `pulumi:"subnetId"`
}

// The set of arguments for constructing a SubnetRouteTableAssociation resource.
type SubnetRouteTableAssociationArgs struct {
	// The ID of the Route Table which should be associated with the Subnet. Changing this forces a new resource to be created.
	RouteTableId pulumi.StringInput
	// The ID of the Subnet. Changing this forces a new resource to be created.
	SubnetId pulumi.StringInput
}

func (SubnetRouteTableAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetRouteTableAssociationArgs)(nil)).Elem()
}

