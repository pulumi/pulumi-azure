// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Network Manager Security Admin Configuration.
//
// ## Import
//
// Network Manager Security Admin Configuration can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:network/networkManagerSecurityAdminConfiguration:NetworkManagerSecurityAdminConfiguration example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Network/networkManagers/networkManager1/securityAdminConfigurations/configuration1
//
// ```
type NetworkManagerSecurityAdminConfiguration struct {
	pulumi.CustomResourceState

	// A list of network intent policy based services. Possible values are `All`, `None` and `AllowRulesOnly`. Exactly one value should be set. The `All` option requires `Microsoft.Network/AllowAdminRulesOnNipBasedServices` feature registration to Subscription. Please see [this document](https://learn.microsoft.com/en-us/azure/virtual-network-manager/concept-security-admins#network-intent-policies-and-security-admin-rules) for more information.
	ApplyOnNetworkIntentPolicyBasedServices pulumi.StringPtrOutput `pulumi:"applyOnNetworkIntentPolicyBasedServices"`
	// A description of the Security Admin Configuration.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the name which should be used for this Network Manager Security Admin Configuration. Changing this forces a new Network Manager Security Admin Configuration to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the ID of the Network Manager Security Admin Configuration. Changing this forces a new Network Manager Security Admin Configuration to be created.
	NetworkManagerId pulumi.StringOutput `pulumi:"networkManagerId"`
}

// NewNetworkManagerSecurityAdminConfiguration registers a new resource with the given unique name, arguments, and options.
func NewNetworkManagerSecurityAdminConfiguration(ctx *pulumi.Context,
	name string, args *NetworkManagerSecurityAdminConfigurationArgs, opts ...pulumi.ResourceOption) (*NetworkManagerSecurityAdminConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkManagerId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkManagerId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkManagerSecurityAdminConfiguration
	err := ctx.RegisterResource("azure:network/networkManagerSecurityAdminConfiguration:NetworkManagerSecurityAdminConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkManagerSecurityAdminConfiguration gets an existing NetworkManagerSecurityAdminConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkManagerSecurityAdminConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkManagerSecurityAdminConfigurationState, opts ...pulumi.ResourceOption) (*NetworkManagerSecurityAdminConfiguration, error) {
	var resource NetworkManagerSecurityAdminConfiguration
	err := ctx.ReadResource("azure:network/networkManagerSecurityAdminConfiguration:NetworkManagerSecurityAdminConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkManagerSecurityAdminConfiguration resources.
type networkManagerSecurityAdminConfigurationState struct {
	// A list of network intent policy based services. Possible values are `All`, `None` and `AllowRulesOnly`. Exactly one value should be set. The `All` option requires `Microsoft.Network/AllowAdminRulesOnNipBasedServices` feature registration to Subscription. Please see [this document](https://learn.microsoft.com/en-us/azure/virtual-network-manager/concept-security-admins#network-intent-policies-and-security-admin-rules) for more information.
	ApplyOnNetworkIntentPolicyBasedServices *string `pulumi:"applyOnNetworkIntentPolicyBasedServices"`
	// A description of the Security Admin Configuration.
	Description *string `pulumi:"description"`
	// Specifies the name which should be used for this Network Manager Security Admin Configuration. Changing this forces a new Network Manager Security Admin Configuration to be created.
	Name *string `pulumi:"name"`
	// Specifies the ID of the Network Manager Security Admin Configuration. Changing this forces a new Network Manager Security Admin Configuration to be created.
	NetworkManagerId *string `pulumi:"networkManagerId"`
}

type NetworkManagerSecurityAdminConfigurationState struct {
	// A list of network intent policy based services. Possible values are `All`, `None` and `AllowRulesOnly`. Exactly one value should be set. The `All` option requires `Microsoft.Network/AllowAdminRulesOnNipBasedServices` feature registration to Subscription. Please see [this document](https://learn.microsoft.com/en-us/azure/virtual-network-manager/concept-security-admins#network-intent-policies-and-security-admin-rules) for more information.
	ApplyOnNetworkIntentPolicyBasedServices pulumi.StringPtrInput
	// A description of the Security Admin Configuration.
	Description pulumi.StringPtrInput
	// Specifies the name which should be used for this Network Manager Security Admin Configuration. Changing this forces a new Network Manager Security Admin Configuration to be created.
	Name pulumi.StringPtrInput
	// Specifies the ID of the Network Manager Security Admin Configuration. Changing this forces a new Network Manager Security Admin Configuration to be created.
	NetworkManagerId pulumi.StringPtrInput
}

func (NetworkManagerSecurityAdminConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkManagerSecurityAdminConfigurationState)(nil)).Elem()
}

type networkManagerSecurityAdminConfigurationArgs struct {
	// A list of network intent policy based services. Possible values are `All`, `None` and `AllowRulesOnly`. Exactly one value should be set. The `All` option requires `Microsoft.Network/AllowAdminRulesOnNipBasedServices` feature registration to Subscription. Please see [this document](https://learn.microsoft.com/en-us/azure/virtual-network-manager/concept-security-admins#network-intent-policies-and-security-admin-rules) for more information.
	ApplyOnNetworkIntentPolicyBasedServices *string `pulumi:"applyOnNetworkIntentPolicyBasedServices"`
	// A description of the Security Admin Configuration.
	Description *string `pulumi:"description"`
	// Specifies the name which should be used for this Network Manager Security Admin Configuration. Changing this forces a new Network Manager Security Admin Configuration to be created.
	Name *string `pulumi:"name"`
	// Specifies the ID of the Network Manager Security Admin Configuration. Changing this forces a new Network Manager Security Admin Configuration to be created.
	NetworkManagerId string `pulumi:"networkManagerId"`
}

// The set of arguments for constructing a NetworkManagerSecurityAdminConfiguration resource.
type NetworkManagerSecurityAdminConfigurationArgs struct {
	// A list of network intent policy based services. Possible values are `All`, `None` and `AllowRulesOnly`. Exactly one value should be set. The `All` option requires `Microsoft.Network/AllowAdminRulesOnNipBasedServices` feature registration to Subscription. Please see [this document](https://learn.microsoft.com/en-us/azure/virtual-network-manager/concept-security-admins#network-intent-policies-and-security-admin-rules) for more information.
	ApplyOnNetworkIntentPolicyBasedServices pulumi.StringPtrInput
	// A description of the Security Admin Configuration.
	Description pulumi.StringPtrInput
	// Specifies the name which should be used for this Network Manager Security Admin Configuration. Changing this forces a new Network Manager Security Admin Configuration to be created.
	Name pulumi.StringPtrInput
	// Specifies the ID of the Network Manager Security Admin Configuration. Changing this forces a new Network Manager Security Admin Configuration to be created.
	NetworkManagerId pulumi.StringInput
}

func (NetworkManagerSecurityAdminConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkManagerSecurityAdminConfigurationArgs)(nil)).Elem()
}

type NetworkManagerSecurityAdminConfigurationInput interface {
	pulumi.Input

	ToNetworkManagerSecurityAdminConfigurationOutput() NetworkManagerSecurityAdminConfigurationOutput
	ToNetworkManagerSecurityAdminConfigurationOutputWithContext(ctx context.Context) NetworkManagerSecurityAdminConfigurationOutput
}

func (*NetworkManagerSecurityAdminConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkManagerSecurityAdminConfiguration)(nil)).Elem()
}

func (i *NetworkManagerSecurityAdminConfiguration) ToNetworkManagerSecurityAdminConfigurationOutput() NetworkManagerSecurityAdminConfigurationOutput {
	return i.ToNetworkManagerSecurityAdminConfigurationOutputWithContext(context.Background())
}

func (i *NetworkManagerSecurityAdminConfiguration) ToNetworkManagerSecurityAdminConfigurationOutputWithContext(ctx context.Context) NetworkManagerSecurityAdminConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkManagerSecurityAdminConfigurationOutput)
}

// NetworkManagerSecurityAdminConfigurationArrayInput is an input type that accepts NetworkManagerSecurityAdminConfigurationArray and NetworkManagerSecurityAdminConfigurationArrayOutput values.
// You can construct a concrete instance of `NetworkManagerSecurityAdminConfigurationArrayInput` via:
//
//	NetworkManagerSecurityAdminConfigurationArray{ NetworkManagerSecurityAdminConfigurationArgs{...} }
type NetworkManagerSecurityAdminConfigurationArrayInput interface {
	pulumi.Input

	ToNetworkManagerSecurityAdminConfigurationArrayOutput() NetworkManagerSecurityAdminConfigurationArrayOutput
	ToNetworkManagerSecurityAdminConfigurationArrayOutputWithContext(context.Context) NetworkManagerSecurityAdminConfigurationArrayOutput
}

type NetworkManagerSecurityAdminConfigurationArray []NetworkManagerSecurityAdminConfigurationInput

func (NetworkManagerSecurityAdminConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkManagerSecurityAdminConfiguration)(nil)).Elem()
}

func (i NetworkManagerSecurityAdminConfigurationArray) ToNetworkManagerSecurityAdminConfigurationArrayOutput() NetworkManagerSecurityAdminConfigurationArrayOutput {
	return i.ToNetworkManagerSecurityAdminConfigurationArrayOutputWithContext(context.Background())
}

func (i NetworkManagerSecurityAdminConfigurationArray) ToNetworkManagerSecurityAdminConfigurationArrayOutputWithContext(ctx context.Context) NetworkManagerSecurityAdminConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkManagerSecurityAdminConfigurationArrayOutput)
}

// NetworkManagerSecurityAdminConfigurationMapInput is an input type that accepts NetworkManagerSecurityAdminConfigurationMap and NetworkManagerSecurityAdminConfigurationMapOutput values.
// You can construct a concrete instance of `NetworkManagerSecurityAdminConfigurationMapInput` via:
//
//	NetworkManagerSecurityAdminConfigurationMap{ "key": NetworkManagerSecurityAdminConfigurationArgs{...} }
type NetworkManagerSecurityAdminConfigurationMapInput interface {
	pulumi.Input

	ToNetworkManagerSecurityAdminConfigurationMapOutput() NetworkManagerSecurityAdminConfigurationMapOutput
	ToNetworkManagerSecurityAdminConfigurationMapOutputWithContext(context.Context) NetworkManagerSecurityAdminConfigurationMapOutput
}

type NetworkManagerSecurityAdminConfigurationMap map[string]NetworkManagerSecurityAdminConfigurationInput

func (NetworkManagerSecurityAdminConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkManagerSecurityAdminConfiguration)(nil)).Elem()
}

func (i NetworkManagerSecurityAdminConfigurationMap) ToNetworkManagerSecurityAdminConfigurationMapOutput() NetworkManagerSecurityAdminConfigurationMapOutput {
	return i.ToNetworkManagerSecurityAdminConfigurationMapOutputWithContext(context.Background())
}

func (i NetworkManagerSecurityAdminConfigurationMap) ToNetworkManagerSecurityAdminConfigurationMapOutputWithContext(ctx context.Context) NetworkManagerSecurityAdminConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkManagerSecurityAdminConfigurationMapOutput)
}

type NetworkManagerSecurityAdminConfigurationOutput struct{ *pulumi.OutputState }

func (NetworkManagerSecurityAdminConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkManagerSecurityAdminConfiguration)(nil)).Elem()
}

func (o NetworkManagerSecurityAdminConfigurationOutput) ToNetworkManagerSecurityAdminConfigurationOutput() NetworkManagerSecurityAdminConfigurationOutput {
	return o
}

func (o NetworkManagerSecurityAdminConfigurationOutput) ToNetworkManagerSecurityAdminConfigurationOutputWithContext(ctx context.Context) NetworkManagerSecurityAdminConfigurationOutput {
	return o
}

// A list of network intent policy based services. Possible values are `All`, `None` and `AllowRulesOnly`. Exactly one value should be set. The `All` option requires `Microsoft.Network/AllowAdminRulesOnNipBasedServices` feature registration to Subscription. Please see [this document](https://learn.microsoft.com/en-us/azure/virtual-network-manager/concept-security-admins#network-intent-policies-and-security-admin-rules) for more information.
func (o NetworkManagerSecurityAdminConfigurationOutput) ApplyOnNetworkIntentPolicyBasedServices() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkManagerSecurityAdminConfiguration) pulumi.StringPtrOutput {
		return v.ApplyOnNetworkIntentPolicyBasedServices
	}).(pulumi.StringPtrOutput)
}

// A description of the Security Admin Configuration.
func (o NetworkManagerSecurityAdminConfigurationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkManagerSecurityAdminConfiguration) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the name which should be used for this Network Manager Security Admin Configuration. Changing this forces a new Network Manager Security Admin Configuration to be created.
func (o NetworkManagerSecurityAdminConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkManagerSecurityAdminConfiguration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the ID of the Network Manager Security Admin Configuration. Changing this forces a new Network Manager Security Admin Configuration to be created.
func (o NetworkManagerSecurityAdminConfigurationOutput) NetworkManagerId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkManagerSecurityAdminConfiguration) pulumi.StringOutput { return v.NetworkManagerId }).(pulumi.StringOutput)
}

type NetworkManagerSecurityAdminConfigurationArrayOutput struct{ *pulumi.OutputState }

func (NetworkManagerSecurityAdminConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkManagerSecurityAdminConfiguration)(nil)).Elem()
}

func (o NetworkManagerSecurityAdminConfigurationArrayOutput) ToNetworkManagerSecurityAdminConfigurationArrayOutput() NetworkManagerSecurityAdminConfigurationArrayOutput {
	return o
}

func (o NetworkManagerSecurityAdminConfigurationArrayOutput) ToNetworkManagerSecurityAdminConfigurationArrayOutputWithContext(ctx context.Context) NetworkManagerSecurityAdminConfigurationArrayOutput {
	return o
}

func (o NetworkManagerSecurityAdminConfigurationArrayOutput) Index(i pulumi.IntInput) NetworkManagerSecurityAdminConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkManagerSecurityAdminConfiguration {
		return vs[0].([]*NetworkManagerSecurityAdminConfiguration)[vs[1].(int)]
	}).(NetworkManagerSecurityAdminConfigurationOutput)
}

type NetworkManagerSecurityAdminConfigurationMapOutput struct{ *pulumi.OutputState }

func (NetworkManagerSecurityAdminConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkManagerSecurityAdminConfiguration)(nil)).Elem()
}

func (o NetworkManagerSecurityAdminConfigurationMapOutput) ToNetworkManagerSecurityAdminConfigurationMapOutput() NetworkManagerSecurityAdminConfigurationMapOutput {
	return o
}

func (o NetworkManagerSecurityAdminConfigurationMapOutput) ToNetworkManagerSecurityAdminConfigurationMapOutputWithContext(ctx context.Context) NetworkManagerSecurityAdminConfigurationMapOutput {
	return o
}

func (o NetworkManagerSecurityAdminConfigurationMapOutput) MapIndex(k pulumi.StringInput) NetworkManagerSecurityAdminConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkManagerSecurityAdminConfiguration {
		return vs[0].(map[string]*NetworkManagerSecurityAdminConfiguration)[vs[1].(string)]
	}).(NetworkManagerSecurityAdminConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkManagerSecurityAdminConfigurationInput)(nil)).Elem(), &NetworkManagerSecurityAdminConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkManagerSecurityAdminConfigurationArrayInput)(nil)).Elem(), NetworkManagerSecurityAdminConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkManagerSecurityAdminConfigurationMapInput)(nil)).Elem(), NetworkManagerSecurityAdminConfigurationMap{})
	pulumi.RegisterOutputType(NetworkManagerSecurityAdminConfigurationOutput{})
	pulumi.RegisterOutputType(NetworkManagerSecurityAdminConfigurationArrayOutput{})
	pulumi.RegisterOutputType(NetworkManagerSecurityAdminConfigurationMapOutput{})
}
