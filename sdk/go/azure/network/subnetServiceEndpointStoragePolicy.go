// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a Subnet Service Endpoint Storage Policy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/network"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/storage"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("west europe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
// 			ResourceGroupName:      exampleResourceGroup.Name,
// 			Location:               exampleResourceGroup.Location,
// 			AccountTier:            pulumi.String("Standard"),
// 			AccountReplicationType: pulumi.String("GRS"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = network.NewSubnetServiceEndpointStoragePolicy(ctx, "exampleSubnetServiceEndpointStoragePolicy", &network.SubnetServiceEndpointStoragePolicyArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			Location:          exampleResourceGroup.Location,
// 			Definition: &network.SubnetServiceEndpointStoragePolicyDefinitionArgs{
// 				Name:        pulumi.String("name1"),
// 				Description: pulumi.String("definition1"),
// 				ServiceResources: pulumi.StringArray{
// 					exampleResourceGroup.ID(),
// 					exampleAccount.ID(),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Subnet Service Endpoint Policies can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:network/subnetServiceEndpointStoragePolicy:SubnetServiceEndpointStoragePolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/serviceEndpointPolicies/policy1
// ```
type SubnetServiceEndpointStoragePolicy struct {
	pulumi.CustomResourceState

	// A `definition` block as defined below
	Definition SubnetServiceEndpointStoragePolicyDefinitionPtrOutput `pulumi:"definition"`
	// The Azure Region where the Subnet Service Endpoint Storage Policy should exist. Changing this forces a new Subnet Service Endpoint Storage Policy to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name which should be used for this Subnet Service Endpoint Storage Policy. Changing this forces a new Subnet Service Endpoint Storage Policy to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Resource Group where the Subnet Service Endpoint Storage Policy should exist. Changing this forces a new Subnet Service Endpoint Storage Policy to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Subnet Service Endpoint Storage Policy.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewSubnetServiceEndpointStoragePolicy registers a new resource with the given unique name, arguments, and options.
func NewSubnetServiceEndpointStoragePolicy(ctx *pulumi.Context,
	name string, args *SubnetServiceEndpointStoragePolicyArgs, opts ...pulumi.ResourceOption) (*SubnetServiceEndpointStoragePolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	var resource SubnetServiceEndpointStoragePolicy
	err := ctx.RegisterResource("azure:network/subnetServiceEndpointStoragePolicy:SubnetServiceEndpointStoragePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubnetServiceEndpointStoragePolicy gets an existing SubnetServiceEndpointStoragePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnetServiceEndpointStoragePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubnetServiceEndpointStoragePolicyState, opts ...pulumi.ResourceOption) (*SubnetServiceEndpointStoragePolicy, error) {
	var resource SubnetServiceEndpointStoragePolicy
	err := ctx.ReadResource("azure:network/subnetServiceEndpointStoragePolicy:SubnetServiceEndpointStoragePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubnetServiceEndpointStoragePolicy resources.
type subnetServiceEndpointStoragePolicyState struct {
	// A `definition` block as defined below
	Definition *SubnetServiceEndpointStoragePolicyDefinition `pulumi:"definition"`
	// The Azure Region where the Subnet Service Endpoint Storage Policy should exist. Changing this forces a new Subnet Service Endpoint Storage Policy to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Subnet Service Endpoint Storage Policy. Changing this forces a new Subnet Service Endpoint Storage Policy to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Subnet Service Endpoint Storage Policy should exist. Changing this forces a new Subnet Service Endpoint Storage Policy to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Subnet Service Endpoint Storage Policy.
	Tags map[string]string `pulumi:"tags"`
}

type SubnetServiceEndpointStoragePolicyState struct {
	// A `definition` block as defined below
	Definition SubnetServiceEndpointStoragePolicyDefinitionPtrInput
	// The Azure Region where the Subnet Service Endpoint Storage Policy should exist. Changing this forces a new Subnet Service Endpoint Storage Policy to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Subnet Service Endpoint Storage Policy. Changing this forces a new Subnet Service Endpoint Storage Policy to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Subnet Service Endpoint Storage Policy should exist. Changing this forces a new Subnet Service Endpoint Storage Policy to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Subnet Service Endpoint Storage Policy.
	Tags pulumi.StringMapInput
}

func (SubnetServiceEndpointStoragePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetServiceEndpointStoragePolicyState)(nil)).Elem()
}

type subnetServiceEndpointStoragePolicyArgs struct {
	// A `definition` block as defined below
	Definition *SubnetServiceEndpointStoragePolicyDefinition `pulumi:"definition"`
	// The Azure Region where the Subnet Service Endpoint Storage Policy should exist. Changing this forces a new Subnet Service Endpoint Storage Policy to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Subnet Service Endpoint Storage Policy. Changing this forces a new Subnet Service Endpoint Storage Policy to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Subnet Service Endpoint Storage Policy should exist. Changing this forces a new Subnet Service Endpoint Storage Policy to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Subnet Service Endpoint Storage Policy.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a SubnetServiceEndpointStoragePolicy resource.
type SubnetServiceEndpointStoragePolicyArgs struct {
	// A `definition` block as defined below
	Definition SubnetServiceEndpointStoragePolicyDefinitionPtrInput
	// The Azure Region where the Subnet Service Endpoint Storage Policy should exist. Changing this forces a new Subnet Service Endpoint Storage Policy to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Subnet Service Endpoint Storage Policy. Changing this forces a new Subnet Service Endpoint Storage Policy to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Subnet Service Endpoint Storage Policy should exist. Changing this forces a new Subnet Service Endpoint Storage Policy to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags which should be assigned to the Subnet Service Endpoint Storage Policy.
	Tags pulumi.StringMapInput
}

func (SubnetServiceEndpointStoragePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetServiceEndpointStoragePolicyArgs)(nil)).Elem()
}

type SubnetServiceEndpointStoragePolicyInput interface {
	pulumi.Input

	ToSubnetServiceEndpointStoragePolicyOutput() SubnetServiceEndpointStoragePolicyOutput
	ToSubnetServiceEndpointStoragePolicyOutputWithContext(ctx context.Context) SubnetServiceEndpointStoragePolicyOutput
}

func (*SubnetServiceEndpointStoragePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetServiceEndpointStoragePolicy)(nil))
}

func (i *SubnetServiceEndpointStoragePolicy) ToSubnetServiceEndpointStoragePolicyOutput() SubnetServiceEndpointStoragePolicyOutput {
	return i.ToSubnetServiceEndpointStoragePolicyOutputWithContext(context.Background())
}

func (i *SubnetServiceEndpointStoragePolicy) ToSubnetServiceEndpointStoragePolicyOutputWithContext(ctx context.Context) SubnetServiceEndpointStoragePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetServiceEndpointStoragePolicyOutput)
}

func (i *SubnetServiceEndpointStoragePolicy) ToSubnetServiceEndpointStoragePolicyPtrOutput() SubnetServiceEndpointStoragePolicyPtrOutput {
	return i.ToSubnetServiceEndpointStoragePolicyPtrOutputWithContext(context.Background())
}

func (i *SubnetServiceEndpointStoragePolicy) ToSubnetServiceEndpointStoragePolicyPtrOutputWithContext(ctx context.Context) SubnetServiceEndpointStoragePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetServiceEndpointStoragePolicyPtrOutput)
}

type SubnetServiceEndpointStoragePolicyPtrInput interface {
	pulumi.Input

	ToSubnetServiceEndpointStoragePolicyPtrOutput() SubnetServiceEndpointStoragePolicyPtrOutput
	ToSubnetServiceEndpointStoragePolicyPtrOutputWithContext(ctx context.Context) SubnetServiceEndpointStoragePolicyPtrOutput
}

type subnetServiceEndpointStoragePolicyPtrType SubnetServiceEndpointStoragePolicyArgs

func (*subnetServiceEndpointStoragePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetServiceEndpointStoragePolicy)(nil))
}

func (i *subnetServiceEndpointStoragePolicyPtrType) ToSubnetServiceEndpointStoragePolicyPtrOutput() SubnetServiceEndpointStoragePolicyPtrOutput {
	return i.ToSubnetServiceEndpointStoragePolicyPtrOutputWithContext(context.Background())
}

func (i *subnetServiceEndpointStoragePolicyPtrType) ToSubnetServiceEndpointStoragePolicyPtrOutputWithContext(ctx context.Context) SubnetServiceEndpointStoragePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetServiceEndpointStoragePolicyPtrOutput)
}

// SubnetServiceEndpointStoragePolicyArrayInput is an input type that accepts SubnetServiceEndpointStoragePolicyArray and SubnetServiceEndpointStoragePolicyArrayOutput values.
// You can construct a concrete instance of `SubnetServiceEndpointStoragePolicyArrayInput` via:
//
//          SubnetServiceEndpointStoragePolicyArray{ SubnetServiceEndpointStoragePolicyArgs{...} }
type SubnetServiceEndpointStoragePolicyArrayInput interface {
	pulumi.Input

	ToSubnetServiceEndpointStoragePolicyArrayOutput() SubnetServiceEndpointStoragePolicyArrayOutput
	ToSubnetServiceEndpointStoragePolicyArrayOutputWithContext(context.Context) SubnetServiceEndpointStoragePolicyArrayOutput
}

type SubnetServiceEndpointStoragePolicyArray []SubnetServiceEndpointStoragePolicyInput

func (SubnetServiceEndpointStoragePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*SubnetServiceEndpointStoragePolicy)(nil))
}

func (i SubnetServiceEndpointStoragePolicyArray) ToSubnetServiceEndpointStoragePolicyArrayOutput() SubnetServiceEndpointStoragePolicyArrayOutput {
	return i.ToSubnetServiceEndpointStoragePolicyArrayOutputWithContext(context.Background())
}

func (i SubnetServiceEndpointStoragePolicyArray) ToSubnetServiceEndpointStoragePolicyArrayOutputWithContext(ctx context.Context) SubnetServiceEndpointStoragePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetServiceEndpointStoragePolicyArrayOutput)
}

// SubnetServiceEndpointStoragePolicyMapInput is an input type that accepts SubnetServiceEndpointStoragePolicyMap and SubnetServiceEndpointStoragePolicyMapOutput values.
// You can construct a concrete instance of `SubnetServiceEndpointStoragePolicyMapInput` via:
//
//          SubnetServiceEndpointStoragePolicyMap{ "key": SubnetServiceEndpointStoragePolicyArgs{...} }
type SubnetServiceEndpointStoragePolicyMapInput interface {
	pulumi.Input

	ToSubnetServiceEndpointStoragePolicyMapOutput() SubnetServiceEndpointStoragePolicyMapOutput
	ToSubnetServiceEndpointStoragePolicyMapOutputWithContext(context.Context) SubnetServiceEndpointStoragePolicyMapOutput
}

type SubnetServiceEndpointStoragePolicyMap map[string]SubnetServiceEndpointStoragePolicyInput

func (SubnetServiceEndpointStoragePolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*SubnetServiceEndpointStoragePolicy)(nil))
}

func (i SubnetServiceEndpointStoragePolicyMap) ToSubnetServiceEndpointStoragePolicyMapOutput() SubnetServiceEndpointStoragePolicyMapOutput {
	return i.ToSubnetServiceEndpointStoragePolicyMapOutputWithContext(context.Background())
}

func (i SubnetServiceEndpointStoragePolicyMap) ToSubnetServiceEndpointStoragePolicyMapOutputWithContext(ctx context.Context) SubnetServiceEndpointStoragePolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetServiceEndpointStoragePolicyMapOutput)
}

type SubnetServiceEndpointStoragePolicyOutput struct {
	*pulumi.OutputState
}

func (SubnetServiceEndpointStoragePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetServiceEndpointStoragePolicy)(nil))
}

func (o SubnetServiceEndpointStoragePolicyOutput) ToSubnetServiceEndpointStoragePolicyOutput() SubnetServiceEndpointStoragePolicyOutput {
	return o
}

func (o SubnetServiceEndpointStoragePolicyOutput) ToSubnetServiceEndpointStoragePolicyOutputWithContext(ctx context.Context) SubnetServiceEndpointStoragePolicyOutput {
	return o
}

func (o SubnetServiceEndpointStoragePolicyOutput) ToSubnetServiceEndpointStoragePolicyPtrOutput() SubnetServiceEndpointStoragePolicyPtrOutput {
	return o.ToSubnetServiceEndpointStoragePolicyPtrOutputWithContext(context.Background())
}

func (o SubnetServiceEndpointStoragePolicyOutput) ToSubnetServiceEndpointStoragePolicyPtrOutputWithContext(ctx context.Context) SubnetServiceEndpointStoragePolicyPtrOutput {
	return o.ApplyT(func(v SubnetServiceEndpointStoragePolicy) *SubnetServiceEndpointStoragePolicy {
		return &v
	}).(SubnetServiceEndpointStoragePolicyPtrOutput)
}

type SubnetServiceEndpointStoragePolicyPtrOutput struct {
	*pulumi.OutputState
}

func (SubnetServiceEndpointStoragePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetServiceEndpointStoragePolicy)(nil))
}

func (o SubnetServiceEndpointStoragePolicyPtrOutput) ToSubnetServiceEndpointStoragePolicyPtrOutput() SubnetServiceEndpointStoragePolicyPtrOutput {
	return o
}

func (o SubnetServiceEndpointStoragePolicyPtrOutput) ToSubnetServiceEndpointStoragePolicyPtrOutputWithContext(ctx context.Context) SubnetServiceEndpointStoragePolicyPtrOutput {
	return o
}

type SubnetServiceEndpointStoragePolicyArrayOutput struct{ *pulumi.OutputState }

func (SubnetServiceEndpointStoragePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubnetServiceEndpointStoragePolicy)(nil))
}

func (o SubnetServiceEndpointStoragePolicyArrayOutput) ToSubnetServiceEndpointStoragePolicyArrayOutput() SubnetServiceEndpointStoragePolicyArrayOutput {
	return o
}

func (o SubnetServiceEndpointStoragePolicyArrayOutput) ToSubnetServiceEndpointStoragePolicyArrayOutputWithContext(ctx context.Context) SubnetServiceEndpointStoragePolicyArrayOutput {
	return o
}

func (o SubnetServiceEndpointStoragePolicyArrayOutput) Index(i pulumi.IntInput) SubnetServiceEndpointStoragePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubnetServiceEndpointStoragePolicy {
		return vs[0].([]SubnetServiceEndpointStoragePolicy)[vs[1].(int)]
	}).(SubnetServiceEndpointStoragePolicyOutput)
}

type SubnetServiceEndpointStoragePolicyMapOutput struct{ *pulumi.OutputState }

func (SubnetServiceEndpointStoragePolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SubnetServiceEndpointStoragePolicy)(nil))
}

func (o SubnetServiceEndpointStoragePolicyMapOutput) ToSubnetServiceEndpointStoragePolicyMapOutput() SubnetServiceEndpointStoragePolicyMapOutput {
	return o
}

func (o SubnetServiceEndpointStoragePolicyMapOutput) ToSubnetServiceEndpointStoragePolicyMapOutputWithContext(ctx context.Context) SubnetServiceEndpointStoragePolicyMapOutput {
	return o
}

func (o SubnetServiceEndpointStoragePolicyMapOutput) MapIndex(k pulumi.StringInput) SubnetServiceEndpointStoragePolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SubnetServiceEndpointStoragePolicy {
		return vs[0].(map[string]SubnetServiceEndpointStoragePolicy)[vs[1].(string)]
	}).(SubnetServiceEndpointStoragePolicyOutput)
}

func init() {
	pulumi.RegisterOutputType(SubnetServiceEndpointStoragePolicyOutput{})
	pulumi.RegisterOutputType(SubnetServiceEndpointStoragePolicyPtrOutput{})
	pulumi.RegisterOutputType(SubnetServiceEndpointStoragePolicyArrayOutput{})
	pulumi.RegisterOutputType(SubnetServiceEndpointStoragePolicyMapOutput{})
}
