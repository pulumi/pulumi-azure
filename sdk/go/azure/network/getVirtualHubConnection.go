// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Uses this data source to access information about an existing Virtual Hub Connection.
//
// ## Virtual Hub Connection Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := network.LookupVirtualHubConnection(ctx, &network.LookupVirtualHubConnectionArgs{
//				Name:              "example-connection",
//				ResourceGroupName: "example-resources",
//				VirtualHubName:    "example-hub-name",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("virtualHubConnectionId", example.Id)
//			return nil
//		})
//	}
//
// ```
func LookupVirtualHubConnection(ctx *pulumi.Context, args *LookupVirtualHubConnectionArgs, opts ...pulumi.InvokeOption) (*LookupVirtualHubConnectionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVirtualHubConnectionResult
	err := ctx.Invoke("azure:network/getVirtualHubConnection:getVirtualHubConnection", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVirtualHubConnection.
type LookupVirtualHubConnectionArgs struct {
	// The name of the Connection which should be retrieved.
	Name string `pulumi:"name"`
	// The Name of the Resource Group where the Virtual Hub Connection exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the Virtual Hub where this Connection exists.
	VirtualHubName string `pulumi:"virtualHubName"`
}

// A collection of values returned by getVirtualHubConnection.
type LookupVirtualHubConnectionResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Whether Internet Security is enabled to secure internet traffic on this connection
	InternetSecurityEnabled bool `pulumi:"internetSecurityEnabled"`
	// The name which is used for this Static Route.
	Name string `pulumi:"name"`
	// The ID of the Virtual Network which the Virtual Hub is connected
	RemoteVirtualNetworkId string `pulumi:"remoteVirtualNetworkId"`
	ResourceGroupName      string `pulumi:"resourceGroupName"`
	// A `routing` block as defined below.
	Routings []GetVirtualHubConnectionRouting `pulumi:"routings"`
	// The ID of the Virtual Hub within which this connection is created
	VirtualHubId   string `pulumi:"virtualHubId"`
	VirtualHubName string `pulumi:"virtualHubName"`
}

func LookupVirtualHubConnectionOutput(ctx *pulumi.Context, args LookupVirtualHubConnectionOutputArgs, opts ...pulumi.InvokeOption) LookupVirtualHubConnectionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupVirtualHubConnectionResult, error) {
			args := v.(LookupVirtualHubConnectionArgs)
			r, err := LookupVirtualHubConnection(ctx, &args, opts...)
			var s LookupVirtualHubConnectionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupVirtualHubConnectionResultOutput)
}

// A collection of arguments for invoking getVirtualHubConnection.
type LookupVirtualHubConnectionOutputArgs struct {
	// The name of the Connection which should be retrieved.
	Name pulumi.StringInput `pulumi:"name"`
	// The Name of the Resource Group where the Virtual Hub Connection exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the Virtual Hub where this Connection exists.
	VirtualHubName pulumi.StringInput `pulumi:"virtualHubName"`
}

func (LookupVirtualHubConnectionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVirtualHubConnectionArgs)(nil)).Elem()
}

// A collection of values returned by getVirtualHubConnection.
type LookupVirtualHubConnectionResultOutput struct{ *pulumi.OutputState }

func (LookupVirtualHubConnectionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVirtualHubConnectionResult)(nil)).Elem()
}

func (o LookupVirtualHubConnectionResultOutput) ToLookupVirtualHubConnectionResultOutput() LookupVirtualHubConnectionResultOutput {
	return o
}

func (o LookupVirtualHubConnectionResultOutput) ToLookupVirtualHubConnectionResultOutputWithContext(ctx context.Context) LookupVirtualHubConnectionResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupVirtualHubConnectionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualHubConnectionResult) string { return v.Id }).(pulumi.StringOutput)
}

// Whether Internet Security is enabled to secure internet traffic on this connection
func (o LookupVirtualHubConnectionResultOutput) InternetSecurityEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVirtualHubConnectionResult) bool { return v.InternetSecurityEnabled }).(pulumi.BoolOutput)
}

// The name which is used for this Static Route.
func (o LookupVirtualHubConnectionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualHubConnectionResult) string { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Virtual Network which the Virtual Hub is connected
func (o LookupVirtualHubConnectionResultOutput) RemoteVirtualNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualHubConnectionResult) string { return v.RemoteVirtualNetworkId }).(pulumi.StringOutput)
}

func (o LookupVirtualHubConnectionResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualHubConnectionResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A `routing` block as defined below.
func (o LookupVirtualHubConnectionResultOutput) Routings() GetVirtualHubConnectionRoutingArrayOutput {
	return o.ApplyT(func(v LookupVirtualHubConnectionResult) []GetVirtualHubConnectionRouting { return v.Routings }).(GetVirtualHubConnectionRoutingArrayOutput)
}

// The ID of the Virtual Hub within which this connection is created
func (o LookupVirtualHubConnectionResultOutput) VirtualHubId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualHubConnectionResult) string { return v.VirtualHubId }).(pulumi.StringOutput)
}

func (o LookupVirtualHubConnectionResultOutput) VirtualHubName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualHubConnectionResult) string { return v.VirtualHubName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVirtualHubConnectionResultOutput{})
}
