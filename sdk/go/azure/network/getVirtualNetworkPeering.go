// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing virtual network peering.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := network.LookupVirtualNetwork(ctx, &network.LookupVirtualNetworkArgs{
//				Name:              "vnet01",
//				ResourceGroupName: "networking",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleGetVirtualNetworkPeering, err := network.LookupVirtualNetworkPeering(ctx, &network.LookupVirtualNetworkPeeringArgs{
//				Name:             "peer-vnet01-to-vnet02",
//				VirtualNetworkId: example.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("id", exampleGetVirtualNetworkPeering.Id)
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This data source uses the following Azure API Providers:
//
// * `Microsoft.Network`: 2024-05-01
func LookupVirtualNetworkPeering(ctx *pulumi.Context, args *LookupVirtualNetworkPeeringArgs, opts ...pulumi.InvokeOption) (*LookupVirtualNetworkPeeringResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVirtualNetworkPeeringResult
	err := ctx.Invoke("azure:network/getVirtualNetworkPeering:getVirtualNetworkPeering", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVirtualNetworkPeering.
type LookupVirtualNetworkPeeringArgs struct {
	// The name of this virtual network peering.
	Name string `pulumi:"name"`
	// The resource ID of the virtual network.
	VirtualNetworkId string `pulumi:"virtualNetworkId"`
}

// A collection of values returned by getVirtualNetworkPeering.
type LookupVirtualNetworkPeeringResult struct {
	// Controls if forwarded traffic from VMs in the remote virtual network is allowed.
	AllowForwardedTraffic bool `pulumi:"allowForwardedTraffic"`
	// Controls gatewayLinks can be used in the remote virtual network’s link to the local virtual network.
	AllowGatewayTransit bool `pulumi:"allowGatewayTransit"`
	// Controls if the traffic from the local virtual network can reach the remote virtual network.
	AllowVirtualNetworkAccess bool `pulumi:"allowVirtualNetworkAccess"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// Specifies whether only IPv6 address space is peered for Subnet peering.
	OnlyIpv6PeeringEnabled bool `pulumi:"onlyIpv6PeeringEnabled"`
	// Specifies whether complete Virtual Network address space is peered.
	PeerCompleteVirtualNetworksEnabled bool `pulumi:"peerCompleteVirtualNetworksEnabled"`
	// The full Azure resource ID of the remote virtual network.
	RemoteVirtualNetworkId string `pulumi:"remoteVirtualNetworkId"`
	// Controls if remote gateways can be used on the local virtual network.
	UseRemoteGateways bool   `pulumi:"useRemoteGateways"`
	VirtualNetworkId  string `pulumi:"virtualNetworkId"`
}

func LookupVirtualNetworkPeeringOutput(ctx *pulumi.Context, args LookupVirtualNetworkPeeringOutputArgs, opts ...pulumi.InvokeOption) LookupVirtualNetworkPeeringResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupVirtualNetworkPeeringResultOutput, error) {
			args := v.(LookupVirtualNetworkPeeringArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure:network/getVirtualNetworkPeering:getVirtualNetworkPeering", args, LookupVirtualNetworkPeeringResultOutput{}, options).(LookupVirtualNetworkPeeringResultOutput), nil
		}).(LookupVirtualNetworkPeeringResultOutput)
}

// A collection of arguments for invoking getVirtualNetworkPeering.
type LookupVirtualNetworkPeeringOutputArgs struct {
	// The name of this virtual network peering.
	Name pulumi.StringInput `pulumi:"name"`
	// The resource ID of the virtual network.
	VirtualNetworkId pulumi.StringInput `pulumi:"virtualNetworkId"`
}

func (LookupVirtualNetworkPeeringOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVirtualNetworkPeeringArgs)(nil)).Elem()
}

// A collection of values returned by getVirtualNetworkPeering.
type LookupVirtualNetworkPeeringResultOutput struct{ *pulumi.OutputState }

func (LookupVirtualNetworkPeeringResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVirtualNetworkPeeringResult)(nil)).Elem()
}

func (o LookupVirtualNetworkPeeringResultOutput) ToLookupVirtualNetworkPeeringResultOutput() LookupVirtualNetworkPeeringResultOutput {
	return o
}

func (o LookupVirtualNetworkPeeringResultOutput) ToLookupVirtualNetworkPeeringResultOutputWithContext(ctx context.Context) LookupVirtualNetworkPeeringResultOutput {
	return o
}

// Controls if forwarded traffic from VMs in the remote virtual network is allowed.
func (o LookupVirtualNetworkPeeringResultOutput) AllowForwardedTraffic() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVirtualNetworkPeeringResult) bool { return v.AllowForwardedTraffic }).(pulumi.BoolOutput)
}

// Controls gatewayLinks can be used in the remote virtual network’s link to the local virtual network.
func (o LookupVirtualNetworkPeeringResultOutput) AllowGatewayTransit() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVirtualNetworkPeeringResult) bool { return v.AllowGatewayTransit }).(pulumi.BoolOutput)
}

// Controls if the traffic from the local virtual network can reach the remote virtual network.
func (o LookupVirtualNetworkPeeringResultOutput) AllowVirtualNetworkAccess() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVirtualNetworkPeeringResult) bool { return v.AllowVirtualNetworkAccess }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupVirtualNetworkPeeringResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualNetworkPeeringResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupVirtualNetworkPeeringResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualNetworkPeeringResult) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies whether only IPv6 address space is peered for Subnet peering.
func (o LookupVirtualNetworkPeeringResultOutput) OnlyIpv6PeeringEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVirtualNetworkPeeringResult) bool { return v.OnlyIpv6PeeringEnabled }).(pulumi.BoolOutput)
}

// Specifies whether complete Virtual Network address space is peered.
func (o LookupVirtualNetworkPeeringResultOutput) PeerCompleteVirtualNetworksEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVirtualNetworkPeeringResult) bool { return v.PeerCompleteVirtualNetworksEnabled }).(pulumi.BoolOutput)
}

// The full Azure resource ID of the remote virtual network.
func (o LookupVirtualNetworkPeeringResultOutput) RemoteVirtualNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualNetworkPeeringResult) string { return v.RemoteVirtualNetworkId }).(pulumi.StringOutput)
}

// Controls if remote gateways can be used on the local virtual network.
func (o LookupVirtualNetworkPeeringResultOutput) UseRemoteGateways() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVirtualNetworkPeeringResult) bool { return v.UseRemoteGateways }).(pulumi.BoolOutput)
}

func (o LookupVirtualNetworkPeeringResultOutput) VirtualNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualNetworkPeeringResult) string { return v.VirtualNetworkId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVirtualNetworkPeeringResultOutput{})
}
