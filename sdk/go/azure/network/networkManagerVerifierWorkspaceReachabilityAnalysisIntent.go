// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Network Manager Verifier Workspace Reachability Analysis Intent.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/compute"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resources"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			current, err := core.LookupSubscription(ctx, &core.LookupSubscriptionArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			exampleNetworkManager, err := network.NewNetworkManager(ctx, "example", &network.NetworkManagerArgs{
//				Name:              pulumi.String("example-nm"),
//				ResourceGroupName: example.Name,
//				Location:          example.Location,
//				Scope: &network.NetworkManagerScopeArgs{
//					SubscriptionIds: pulumi.StringArray{
//						pulumi.String(current.Id),
//					},
//				},
//				ScopeAccesses: pulumi.StringArray{
//					pulumi.String("Connectivity"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleNetworkManagerVerifierWorkspace, err := network.NewNetworkManagerVerifierWorkspace(ctx, "example", &network.NetworkManagerVerifierWorkspaceArgs{
//				Name:             pulumi.String("example"),
//				NetworkManagerId: exampleNetworkManager.ID(),
//				Location:         example.Location,
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "example", &network.VirtualNetworkArgs{
//				Name: pulumi.String("example-network"),
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//			})
//			if err != nil {
//				return err
//			}
//			exampleSubnet, err := network.NewSubnet(ctx, "example", &network.SubnetArgs{
//				Name:               pulumi.String("internal"),
//				ResourceGroupName:  example.Name,
//				VirtualNetworkName: exampleVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.0.2.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleNetworkInterface, err := network.NewNetworkInterface(ctx, "example", &network.NetworkInterfaceArgs{
//				Name:              pulumi.String("example-nic"),
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//				IpConfigurations: network.NetworkInterfaceIpConfigurationArray{
//					&network.NetworkInterfaceIpConfigurationArgs{
//						Name:                       pulumi.String("internal"),
//						SubnetId:                   exampleSubnet.ID(),
//						PrivateIpAddressAllocation: pulumi.String("Dynamic"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleLinuxVirtualMachine, err := compute.NewLinuxVirtualMachine(ctx, "example", &compute.LinuxVirtualMachineArgs{
//				Name:                          pulumi.String("example-machine"),
//				ResourceGroupName:             example.Name,
//				Location:                      example.Location,
//				Size:                          pulumi.String("Standard_B1ls"),
//				AdminUsername:                 pulumi.String("adminuser"),
//				AdminPassword:                 pulumi.String("P@ssw0rd1234!"),
//				DisablePasswordAuthentication: pulumi.Bool(false),
//				NetworkInterfaceIds: pulumi.StringArray{
//					exampleNetworkInterface.ID(),
//				},
//				OsDisk: &compute.LinuxVirtualMachineOsDiskArgs{
//					Caching:            pulumi.String("ReadWrite"),
//					StorageAccountType: pulumi.String("Standard_LRS"),
//				},
//				SourceImageReference: &compute.LinuxVirtualMachineSourceImageReferenceArgs{
//					Publisher: pulumi.String("Canonical"),
//					Offer:     pulumi.String("0001-com-ubuntu-server-jammy"),
//					Sku:       pulumi.String("22_04-lts"),
//					Version:   pulumi.String("latest"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = network.NewNetworkManagerVerifierWorkspaceReachabilityAnalysisIntent(ctx, "example", &network.NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArgs{
//				Name:                  pulumi.String("example-intent"),
//				VerifierWorkspaceId:   exampleNetworkManagerVerifierWorkspace.ID(),
//				SourceResourceId:      exampleLinuxVirtualMachine.ID(),
//				DestinationResourceId: exampleLinuxVirtualMachine.ID(),
//				Description:           pulumi.String("example"),
//				IpTraffic: &network.NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentIpTrafficArgs{
//					SourceIps: pulumi.StringArray{
//						pulumi.String("10.0.2.1"),
//					},
//					SourcePorts: pulumi.StringArray{
//						pulumi.String("80"),
//					},
//					DestinationIps: pulumi.StringArray{
//						pulumi.String("10.0.2.2"),
//					},
//					DestinationPorts: pulumi.StringArray{
//						pulumi.String("*"),
//					},
//					Protocols: pulumi.StringArray{
//						pulumi.String("Any"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This resource uses the following Azure API Providers:
//
// * `Microsoft.Network` - 2024-05-01
//
// ## Import
//
// Network Manager Verifier Workspace Reachability Analysis Intents can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:network/networkManagerVerifierWorkspaceReachabilityAnalysisIntent:NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Network/networkManagers/manager1/verifierWorkspaces/workspace1/reachabilityAnalysisIntents/intent1
// ```
type NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent struct {
	pulumi.CustomResourceState

	// The description of the resource. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The ID of the destination resource. The value can be the ID of either Public internet, Cosmos DB, Storage Account, SQL Server, Virtual machines, or Subnet. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
	DestinationResourceId pulumi.StringOutput `pulumi:"destinationResourceId"`
	// An `ipTraffic` block as defined below. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
	IpTraffic NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentIpTrafficOutput `pulumi:"ipTraffic"`
	// The name which should be used for this Network Manager Verifier Workspace Reachability Analysis Intent. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the source resource. The value can be the ID of either Public internet, Virtual machines, or Subnet. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
	SourceResourceId pulumi.StringOutput `pulumi:"sourceResourceId"`
	// The ID of the Network Manager Verifier Workspace. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
	VerifierWorkspaceId pulumi.StringOutput `pulumi:"verifierWorkspaceId"`
}

// NewNetworkManagerVerifierWorkspaceReachabilityAnalysisIntent registers a new resource with the given unique name, arguments, and options.
func NewNetworkManagerVerifierWorkspaceReachabilityAnalysisIntent(ctx *pulumi.Context,
	name string, args *NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArgs, opts ...pulumi.ResourceOption) (*NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationResourceId == nil {
		return nil, errors.New("invalid value for required argument 'DestinationResourceId'")
	}
	if args.IpTraffic == nil {
		return nil, errors.New("invalid value for required argument 'IpTraffic'")
	}
	if args.SourceResourceId == nil {
		return nil, errors.New("invalid value for required argument 'SourceResourceId'")
	}
	if args.VerifierWorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'VerifierWorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent
	err := ctx.RegisterResource("azure:network/networkManagerVerifierWorkspaceReachabilityAnalysisIntent:NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkManagerVerifierWorkspaceReachabilityAnalysisIntent gets an existing NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkManagerVerifierWorkspaceReachabilityAnalysisIntent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentState, opts ...pulumi.ResourceOption) (*NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent, error) {
	var resource NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent
	err := ctx.ReadResource("azure:network/networkManagerVerifierWorkspaceReachabilityAnalysisIntent:NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent resources.
type networkManagerVerifierWorkspaceReachabilityAnalysisIntentState struct {
	// The description of the resource. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
	Description *string `pulumi:"description"`
	// The ID of the destination resource. The value can be the ID of either Public internet, Cosmos DB, Storage Account, SQL Server, Virtual machines, or Subnet. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
	DestinationResourceId *string `pulumi:"destinationResourceId"`
	// An `ipTraffic` block as defined below. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
	IpTraffic *NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentIpTraffic `pulumi:"ipTraffic"`
	// The name which should be used for this Network Manager Verifier Workspace Reachability Analysis Intent. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
	Name *string `pulumi:"name"`
	// The ID of the source resource. The value can be the ID of either Public internet, Virtual machines, or Subnet. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
	SourceResourceId *string `pulumi:"sourceResourceId"`
	// The ID of the Network Manager Verifier Workspace. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
	VerifierWorkspaceId *string `pulumi:"verifierWorkspaceId"`
}

type NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentState struct {
	// The description of the resource. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
	Description pulumi.StringPtrInput
	// The ID of the destination resource. The value can be the ID of either Public internet, Cosmos DB, Storage Account, SQL Server, Virtual machines, or Subnet. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
	DestinationResourceId pulumi.StringPtrInput
	// An `ipTraffic` block as defined below. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
	IpTraffic NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentIpTrafficPtrInput
	// The name which should be used for this Network Manager Verifier Workspace Reachability Analysis Intent. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
	Name pulumi.StringPtrInput
	// The ID of the source resource. The value can be the ID of either Public internet, Virtual machines, or Subnet. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
	SourceResourceId pulumi.StringPtrInput
	// The ID of the Network Manager Verifier Workspace. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
	VerifierWorkspaceId pulumi.StringPtrInput
}

func (NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkManagerVerifierWorkspaceReachabilityAnalysisIntentState)(nil)).Elem()
}

type networkManagerVerifierWorkspaceReachabilityAnalysisIntentArgs struct {
	// The description of the resource. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
	Description *string `pulumi:"description"`
	// The ID of the destination resource. The value can be the ID of either Public internet, Cosmos DB, Storage Account, SQL Server, Virtual machines, or Subnet. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
	DestinationResourceId string `pulumi:"destinationResourceId"`
	// An `ipTraffic` block as defined below. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
	IpTraffic NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentIpTraffic `pulumi:"ipTraffic"`
	// The name which should be used for this Network Manager Verifier Workspace Reachability Analysis Intent. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
	Name *string `pulumi:"name"`
	// The ID of the source resource. The value can be the ID of either Public internet, Virtual machines, or Subnet. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
	SourceResourceId string `pulumi:"sourceResourceId"`
	// The ID of the Network Manager Verifier Workspace. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
	VerifierWorkspaceId string `pulumi:"verifierWorkspaceId"`
}

// The set of arguments for constructing a NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent resource.
type NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArgs struct {
	// The description of the resource. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
	Description pulumi.StringPtrInput
	// The ID of the destination resource. The value can be the ID of either Public internet, Cosmos DB, Storage Account, SQL Server, Virtual machines, or Subnet. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
	DestinationResourceId pulumi.StringInput
	// An `ipTraffic` block as defined below. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
	IpTraffic NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentIpTrafficInput
	// The name which should be used for this Network Manager Verifier Workspace Reachability Analysis Intent. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
	Name pulumi.StringPtrInput
	// The ID of the source resource. The value can be the ID of either Public internet, Virtual machines, or Subnet. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
	SourceResourceId pulumi.StringInput
	// The ID of the Network Manager Verifier Workspace. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
	VerifierWorkspaceId pulumi.StringInput
}

func (NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkManagerVerifierWorkspaceReachabilityAnalysisIntentArgs)(nil)).Elem()
}

type NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentInput interface {
	pulumi.Input

	ToNetworkManagerVerifierWorkspaceReachabilityAnalysisIntentOutput() NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentOutput
	ToNetworkManagerVerifierWorkspaceReachabilityAnalysisIntentOutputWithContext(ctx context.Context) NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentOutput
}

func (*NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent)(nil)).Elem()
}

func (i *NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent) ToNetworkManagerVerifierWorkspaceReachabilityAnalysisIntentOutput() NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentOutput {
	return i.ToNetworkManagerVerifierWorkspaceReachabilityAnalysisIntentOutputWithContext(context.Background())
}

func (i *NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent) ToNetworkManagerVerifierWorkspaceReachabilityAnalysisIntentOutputWithContext(ctx context.Context) NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentOutput)
}

// NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArrayInput is an input type that accepts NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArray and NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArrayOutput values.
// You can construct a concrete instance of `NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArrayInput` via:
//
//	NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArray{ NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArgs{...} }
type NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArrayInput interface {
	pulumi.Input

	ToNetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArrayOutput() NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArrayOutput
	ToNetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArrayOutputWithContext(context.Context) NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArrayOutput
}

type NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArray []NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentInput

func (NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent)(nil)).Elem()
}

func (i NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArray) ToNetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArrayOutput() NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArrayOutput {
	return i.ToNetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArrayOutputWithContext(context.Background())
}

func (i NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArray) ToNetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArrayOutputWithContext(ctx context.Context) NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArrayOutput)
}

// NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentMapInput is an input type that accepts NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentMap and NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentMapOutput values.
// You can construct a concrete instance of `NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentMapInput` via:
//
//	NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentMap{ "key": NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArgs{...} }
type NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentMapInput interface {
	pulumi.Input

	ToNetworkManagerVerifierWorkspaceReachabilityAnalysisIntentMapOutput() NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentMapOutput
	ToNetworkManagerVerifierWorkspaceReachabilityAnalysisIntentMapOutputWithContext(context.Context) NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentMapOutput
}

type NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentMap map[string]NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentInput

func (NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent)(nil)).Elem()
}

func (i NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentMap) ToNetworkManagerVerifierWorkspaceReachabilityAnalysisIntentMapOutput() NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentMapOutput {
	return i.ToNetworkManagerVerifierWorkspaceReachabilityAnalysisIntentMapOutputWithContext(context.Background())
}

func (i NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentMap) ToNetworkManagerVerifierWorkspaceReachabilityAnalysisIntentMapOutputWithContext(ctx context.Context) NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentMapOutput)
}

type NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentOutput struct{ *pulumi.OutputState }

func (NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent)(nil)).Elem()
}

func (o NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentOutput) ToNetworkManagerVerifierWorkspaceReachabilityAnalysisIntentOutput() NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentOutput {
	return o
}

func (o NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentOutput) ToNetworkManagerVerifierWorkspaceReachabilityAnalysisIntentOutputWithContext(ctx context.Context) NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentOutput {
	return o
}

// The description of the resource. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
func (o NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent) pulumi.StringPtrOutput {
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The ID of the destination resource. The value can be the ID of either Public internet, Cosmos DB, Storage Account, SQL Server, Virtual machines, or Subnet. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
func (o NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentOutput) DestinationResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent) pulumi.StringOutput {
		return v.DestinationResourceId
	}).(pulumi.StringOutput)
}

// An `ipTraffic` block as defined below. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
func (o NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentOutput) IpTraffic() NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentIpTrafficOutput {
	return o.ApplyT(func(v *NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent) NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentIpTrafficOutput {
		return v.IpTraffic
	}).(NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentIpTrafficOutput)
}

// The name which should be used for this Network Manager Verifier Workspace Reachability Analysis Intent. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
func (o NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the source resource. The value can be the ID of either Public internet, Virtual machines, or Subnet. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
func (o NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentOutput) SourceResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent) pulumi.StringOutput {
		return v.SourceResourceId
	}).(pulumi.StringOutput)
}

// The ID of the Network Manager Verifier Workspace. Changing this forces a new Network Manager Verifier Workspace Reachability Analysis Intent to be created.
func (o NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentOutput) VerifierWorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent) pulumi.StringOutput {
		return v.VerifierWorkspaceId
	}).(pulumi.StringOutput)
}

type NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArrayOutput struct{ *pulumi.OutputState }

func (NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent)(nil)).Elem()
}

func (o NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArrayOutput) ToNetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArrayOutput() NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArrayOutput {
	return o
}

func (o NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArrayOutput) ToNetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArrayOutputWithContext(ctx context.Context) NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArrayOutput {
	return o
}

func (o NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArrayOutput) Index(i pulumi.IntInput) NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent {
		return vs[0].([]*NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent)[vs[1].(int)]
	}).(NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentOutput)
}

type NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentMapOutput struct{ *pulumi.OutputState }

func (NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent)(nil)).Elem()
}

func (o NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentMapOutput) ToNetworkManagerVerifierWorkspaceReachabilityAnalysisIntentMapOutput() NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentMapOutput {
	return o
}

func (o NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentMapOutput) ToNetworkManagerVerifierWorkspaceReachabilityAnalysisIntentMapOutputWithContext(ctx context.Context) NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentMapOutput {
	return o
}

func (o NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentMapOutput) MapIndex(k pulumi.StringInput) NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent {
		return vs[0].(map[string]*NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent)[vs[1].(string)]
	}).(NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentInput)(nil)).Elem(), &NetworkManagerVerifierWorkspaceReachabilityAnalysisIntent{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArrayInput)(nil)).Elem(), NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentMapInput)(nil)).Elem(), NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentMap{})
	pulumi.RegisterOutputType(NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentOutput{})
	pulumi.RegisterOutputType(NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentArrayOutput{})
	pulumi.RegisterOutputType(NetworkManagerVerifierWorkspaceReachabilityAnalysisIntentMapOutput{})
}
