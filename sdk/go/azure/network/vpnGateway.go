// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a VPN Gateway within a Virtual Hub, which enables Site-to-Site communication.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = network.NewVirtualNetwork(ctx, "exampleVirtualNetwork", &network.VirtualNetworkArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualWan, err := network.NewVirtualWan(ctx, "exampleVirtualWan", &network.VirtualWanArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualHub, err := network.NewVirtualHub(ctx, "exampleVirtualHub", &network.VirtualHubArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				VirtualWanId:      exampleVirtualWan.ID(),
//				AddressPrefix:     pulumi.String("10.0.1.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = network.NewVpnGateway(ctx, "exampleVpnGateway", &network.VpnGatewayArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				VirtualHubId:      exampleVirtualHub.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VPN Gateways can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:network/vpnGateway:VpnGateway gateway1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/vpnGateways/gateway1
//
// ```
type VpnGateway struct {
	pulumi.CustomResourceState

	// Is BGP route translation for NAT on this VPN Gateway enabled? Defaults to `false`.
	BgpRouteTranslationForNatEnabled pulumi.BoolPtrOutput `pulumi:"bgpRouteTranslationForNatEnabled"`
	// A `bgpSettings` block as defined below.
	BgpSettings VpnGatewayBgpSettingsOutput `pulumi:"bgpSettings"`
	// The Azure location where this VPN Gateway should be created. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The Name which should be used for this VPN Gateway. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Name of the Resource Group in which this VPN Gateway should be created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Azure routing preference lets you to choose how your traffic routes between Azure and the internet. You can choose to route traffic either via the Microsoft network (default value, `Microsoft Network`), or via the ISP network (public internet, set to `Internet`). More context of the configuration can be found in the [Microsoft Docs](https://docs.microsoft.com/azure/virtual-wan/virtual-wan-site-to-site-portal#gateway) to create a VPN Gateway. Changing this forces a new resource to be created.
	RoutingPreference pulumi.StringOutput `pulumi:"routingPreference"`
	// The Scale Unit for this VPN Gateway. Defaults to `1`.
	ScaleUnit pulumi.IntPtrOutput `pulumi:"scaleUnit"`
	// A mapping of tags to assign to the VPN Gateway.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The ID of the Virtual Hub within which this VPN Gateway should be created. Changing this forces a new resource to be created.
	VirtualHubId pulumi.StringOutput `pulumi:"virtualHubId"`
}

// NewVpnGateway registers a new resource with the given unique name, arguments, and options.
func NewVpnGateway(ctx *pulumi.Context,
	name string, args *VpnGatewayArgs, opts ...pulumi.ResourceOption) (*VpnGateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.VirtualHubId == nil {
		return nil, errors.New("invalid value for required argument 'VirtualHubId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpnGateway
	err := ctx.RegisterResource("azure:network/vpnGateway:VpnGateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnGateway gets an existing VpnGateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnGatewayState, opts ...pulumi.ResourceOption) (*VpnGateway, error) {
	var resource VpnGateway
	err := ctx.ReadResource("azure:network/vpnGateway:VpnGateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnGateway resources.
type vpnGatewayState struct {
	// Is BGP route translation for NAT on this VPN Gateway enabled? Defaults to `false`.
	BgpRouteTranslationForNatEnabled *bool `pulumi:"bgpRouteTranslationForNatEnabled"`
	// A `bgpSettings` block as defined below.
	BgpSettings *VpnGatewayBgpSettings `pulumi:"bgpSettings"`
	// The Azure location where this VPN Gateway should be created. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The Name which should be used for this VPN Gateway. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The Name of the Resource Group in which this VPN Gateway should be created. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Azure routing preference lets you to choose how your traffic routes between Azure and the internet. You can choose to route traffic either via the Microsoft network (default value, `Microsoft Network`), or via the ISP network (public internet, set to `Internet`). More context of the configuration can be found in the [Microsoft Docs](https://docs.microsoft.com/azure/virtual-wan/virtual-wan-site-to-site-portal#gateway) to create a VPN Gateway. Changing this forces a new resource to be created.
	RoutingPreference *string `pulumi:"routingPreference"`
	// The Scale Unit for this VPN Gateway. Defaults to `1`.
	ScaleUnit *int `pulumi:"scaleUnit"`
	// A mapping of tags to assign to the VPN Gateway.
	Tags map[string]string `pulumi:"tags"`
	// The ID of the Virtual Hub within which this VPN Gateway should be created. Changing this forces a new resource to be created.
	VirtualHubId *string `pulumi:"virtualHubId"`
}

type VpnGatewayState struct {
	// Is BGP route translation for NAT on this VPN Gateway enabled? Defaults to `false`.
	BgpRouteTranslationForNatEnabled pulumi.BoolPtrInput
	// A `bgpSettings` block as defined below.
	BgpSettings VpnGatewayBgpSettingsPtrInput
	// The Azure location where this VPN Gateway should be created. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The Name which should be used for this VPN Gateway. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The Name of the Resource Group in which this VPN Gateway should be created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// Azure routing preference lets you to choose how your traffic routes between Azure and the internet. You can choose to route traffic either via the Microsoft network (default value, `Microsoft Network`), or via the ISP network (public internet, set to `Internet`). More context of the configuration can be found in the [Microsoft Docs](https://docs.microsoft.com/azure/virtual-wan/virtual-wan-site-to-site-portal#gateway) to create a VPN Gateway. Changing this forces a new resource to be created.
	RoutingPreference pulumi.StringPtrInput
	// The Scale Unit for this VPN Gateway. Defaults to `1`.
	ScaleUnit pulumi.IntPtrInput
	// A mapping of tags to assign to the VPN Gateway.
	Tags pulumi.StringMapInput
	// The ID of the Virtual Hub within which this VPN Gateway should be created. Changing this forces a new resource to be created.
	VirtualHubId pulumi.StringPtrInput
}

func (VpnGatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnGatewayState)(nil)).Elem()
}

type vpnGatewayArgs struct {
	// Is BGP route translation for NAT on this VPN Gateway enabled? Defaults to `false`.
	BgpRouteTranslationForNatEnabled *bool `pulumi:"bgpRouteTranslationForNatEnabled"`
	// A `bgpSettings` block as defined below.
	BgpSettings *VpnGatewayBgpSettings `pulumi:"bgpSettings"`
	// The Azure location where this VPN Gateway should be created. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The Name which should be used for this VPN Gateway. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The Name of the Resource Group in which this VPN Gateway should be created. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Azure routing preference lets you to choose how your traffic routes between Azure and the internet. You can choose to route traffic either via the Microsoft network (default value, `Microsoft Network`), or via the ISP network (public internet, set to `Internet`). More context of the configuration can be found in the [Microsoft Docs](https://docs.microsoft.com/azure/virtual-wan/virtual-wan-site-to-site-portal#gateway) to create a VPN Gateway. Changing this forces a new resource to be created.
	RoutingPreference *string `pulumi:"routingPreference"`
	// The Scale Unit for this VPN Gateway. Defaults to `1`.
	ScaleUnit *int `pulumi:"scaleUnit"`
	// A mapping of tags to assign to the VPN Gateway.
	Tags map[string]string `pulumi:"tags"`
	// The ID of the Virtual Hub within which this VPN Gateway should be created. Changing this forces a new resource to be created.
	VirtualHubId string `pulumi:"virtualHubId"`
}

// The set of arguments for constructing a VpnGateway resource.
type VpnGatewayArgs struct {
	// Is BGP route translation for NAT on this VPN Gateway enabled? Defaults to `false`.
	BgpRouteTranslationForNatEnabled pulumi.BoolPtrInput
	// A `bgpSettings` block as defined below.
	BgpSettings VpnGatewayBgpSettingsPtrInput
	// The Azure location where this VPN Gateway should be created. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The Name which should be used for this VPN Gateway. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The Name of the Resource Group in which this VPN Gateway should be created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// Azure routing preference lets you to choose how your traffic routes between Azure and the internet. You can choose to route traffic either via the Microsoft network (default value, `Microsoft Network`), or via the ISP network (public internet, set to `Internet`). More context of the configuration can be found in the [Microsoft Docs](https://docs.microsoft.com/azure/virtual-wan/virtual-wan-site-to-site-portal#gateway) to create a VPN Gateway. Changing this forces a new resource to be created.
	RoutingPreference pulumi.StringPtrInput
	// The Scale Unit for this VPN Gateway. Defaults to `1`.
	ScaleUnit pulumi.IntPtrInput
	// A mapping of tags to assign to the VPN Gateway.
	Tags pulumi.StringMapInput
	// The ID of the Virtual Hub within which this VPN Gateway should be created. Changing this forces a new resource to be created.
	VirtualHubId pulumi.StringInput
}

func (VpnGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnGatewayArgs)(nil)).Elem()
}

type VpnGatewayInput interface {
	pulumi.Input

	ToVpnGatewayOutput() VpnGatewayOutput
	ToVpnGatewayOutputWithContext(ctx context.Context) VpnGatewayOutput
}

func (*VpnGateway) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnGateway)(nil)).Elem()
}

func (i *VpnGateway) ToVpnGatewayOutput() VpnGatewayOutput {
	return i.ToVpnGatewayOutputWithContext(context.Background())
}

func (i *VpnGateway) ToVpnGatewayOutputWithContext(ctx context.Context) VpnGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnGatewayOutput)
}

// VpnGatewayArrayInput is an input type that accepts VpnGatewayArray and VpnGatewayArrayOutput values.
// You can construct a concrete instance of `VpnGatewayArrayInput` via:
//
//	VpnGatewayArray{ VpnGatewayArgs{...} }
type VpnGatewayArrayInput interface {
	pulumi.Input

	ToVpnGatewayArrayOutput() VpnGatewayArrayOutput
	ToVpnGatewayArrayOutputWithContext(context.Context) VpnGatewayArrayOutput
}

type VpnGatewayArray []VpnGatewayInput

func (VpnGatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnGateway)(nil)).Elem()
}

func (i VpnGatewayArray) ToVpnGatewayArrayOutput() VpnGatewayArrayOutput {
	return i.ToVpnGatewayArrayOutputWithContext(context.Background())
}

func (i VpnGatewayArray) ToVpnGatewayArrayOutputWithContext(ctx context.Context) VpnGatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnGatewayArrayOutput)
}

// VpnGatewayMapInput is an input type that accepts VpnGatewayMap and VpnGatewayMapOutput values.
// You can construct a concrete instance of `VpnGatewayMapInput` via:
//
//	VpnGatewayMap{ "key": VpnGatewayArgs{...} }
type VpnGatewayMapInput interface {
	pulumi.Input

	ToVpnGatewayMapOutput() VpnGatewayMapOutput
	ToVpnGatewayMapOutputWithContext(context.Context) VpnGatewayMapOutput
}

type VpnGatewayMap map[string]VpnGatewayInput

func (VpnGatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnGateway)(nil)).Elem()
}

func (i VpnGatewayMap) ToVpnGatewayMapOutput() VpnGatewayMapOutput {
	return i.ToVpnGatewayMapOutputWithContext(context.Background())
}

func (i VpnGatewayMap) ToVpnGatewayMapOutputWithContext(ctx context.Context) VpnGatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnGatewayMapOutput)
}

type VpnGatewayOutput struct{ *pulumi.OutputState }

func (VpnGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnGateway)(nil)).Elem()
}

func (o VpnGatewayOutput) ToVpnGatewayOutput() VpnGatewayOutput {
	return o
}

func (o VpnGatewayOutput) ToVpnGatewayOutputWithContext(ctx context.Context) VpnGatewayOutput {
	return o
}

// Is BGP route translation for NAT on this VPN Gateway enabled? Defaults to `false`.
func (o VpnGatewayOutput) BgpRouteTranslationForNatEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VpnGateway) pulumi.BoolPtrOutput { return v.BgpRouteTranslationForNatEnabled }).(pulumi.BoolPtrOutput)
}

// A `bgpSettings` block as defined below.
func (o VpnGatewayOutput) BgpSettings() VpnGatewayBgpSettingsOutput {
	return o.ApplyT(func(v *VpnGateway) VpnGatewayBgpSettingsOutput { return v.BgpSettings }).(VpnGatewayBgpSettingsOutput)
}

// The Azure location where this VPN Gateway should be created. Changing this forces a new resource to be created.
func (o VpnGatewayOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnGateway) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The Name which should be used for this VPN Gateway. Changing this forces a new resource to be created.
func (o VpnGatewayOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnGateway) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Name of the Resource Group in which this VPN Gateway should be created. Changing this forces a new resource to be created.
func (o VpnGatewayOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnGateway) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// Azure routing preference lets you to choose how your traffic routes between Azure and the internet. You can choose to route traffic either via the Microsoft network (default value, `Microsoft Network`), or via the ISP network (public internet, set to `Internet`). More context of the configuration can be found in the [Microsoft Docs](https://docs.microsoft.com/azure/virtual-wan/virtual-wan-site-to-site-portal#gateway) to create a VPN Gateway. Changing this forces a new resource to be created.
func (o VpnGatewayOutput) RoutingPreference() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnGateway) pulumi.StringOutput { return v.RoutingPreference }).(pulumi.StringOutput)
}

// The Scale Unit for this VPN Gateway. Defaults to `1`.
func (o VpnGatewayOutput) ScaleUnit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VpnGateway) pulumi.IntPtrOutput { return v.ScaleUnit }).(pulumi.IntPtrOutput)
}

// A mapping of tags to assign to the VPN Gateway.
func (o VpnGatewayOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VpnGateway) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The ID of the Virtual Hub within which this VPN Gateway should be created. Changing this forces a new resource to be created.
func (o VpnGatewayOutput) VirtualHubId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnGateway) pulumi.StringOutput { return v.VirtualHubId }).(pulumi.StringOutput)
}

type VpnGatewayArrayOutput struct{ *pulumi.OutputState }

func (VpnGatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnGateway)(nil)).Elem()
}

func (o VpnGatewayArrayOutput) ToVpnGatewayArrayOutput() VpnGatewayArrayOutput {
	return o
}

func (o VpnGatewayArrayOutput) ToVpnGatewayArrayOutputWithContext(ctx context.Context) VpnGatewayArrayOutput {
	return o
}

func (o VpnGatewayArrayOutput) Index(i pulumi.IntInput) VpnGatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpnGateway {
		return vs[0].([]*VpnGateway)[vs[1].(int)]
	}).(VpnGatewayOutput)
}

type VpnGatewayMapOutput struct{ *pulumi.OutputState }

func (VpnGatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnGateway)(nil)).Elem()
}

func (o VpnGatewayMapOutput) ToVpnGatewayMapOutput() VpnGatewayMapOutput {
	return o
}

func (o VpnGatewayMapOutput) ToVpnGatewayMapOutputWithContext(ctx context.Context) VpnGatewayMapOutput {
	return o
}

func (o VpnGatewayMapOutput) MapIndex(k pulumi.StringInput) VpnGatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpnGateway {
		return vs[0].(map[string]*VpnGateway)[vs[1].(string)]
	}).(VpnGatewayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpnGatewayInput)(nil)).Elem(), &VpnGateway{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnGatewayArrayInput)(nil)).Elem(), VpnGatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnGatewayMapInput)(nil)).Elem(), VpnGatewayMap{})
	pulumi.RegisterOutputType(VpnGatewayOutput{})
	pulumi.RegisterOutputType(VpnGatewayArrayOutput{})
	pulumi.RegisterOutputType(VpnGatewayMapOutput{})
}
