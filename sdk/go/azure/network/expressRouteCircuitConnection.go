// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Express Route Circuit Connection.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleExpressRoutePort, err := network.NewExpressRoutePort(ctx, "exampleExpressRoutePort", &network.ExpressRoutePortArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				PeeringLocation:   pulumi.String("Equinix-Seattle-SE2"),
//				BandwidthInGbps:   pulumi.Int(10),
//				Encapsulation:     pulumi.String("Dot1Q"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleExpressRouteCircuit, err := network.NewExpressRouteCircuit(ctx, "exampleExpressRouteCircuit", &network.ExpressRouteCircuitArgs{
//				Location:           exampleResourceGroup.Location,
//				ResourceGroupName:  exampleResourceGroup.Name,
//				ExpressRoutePortId: exampleExpressRoutePort.ID(),
//				BandwidthInGbps:    pulumi.Float64(5),
//				Sku: &network.ExpressRouteCircuitSkuArgs{
//					Tier:   pulumi.String("Standard"),
//					Family: pulumi.String("MeteredData"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			example2ExpressRoutePort, err := network.NewExpressRoutePort(ctx, "example2ExpressRoutePort", &network.ExpressRoutePortArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				PeeringLocation:   pulumi.String("Allied-Toronto-King-West"),
//				BandwidthInGbps:   pulumi.Int(10),
//				Encapsulation:     pulumi.String("Dot1Q"),
//			})
//			if err != nil {
//				return err
//			}
//			example2ExpressRouteCircuit, err := network.NewExpressRouteCircuit(ctx, "example2ExpressRouteCircuit", &network.ExpressRouteCircuitArgs{
//				Location:           exampleResourceGroup.Location,
//				ResourceGroupName:  exampleResourceGroup.Name,
//				ExpressRoutePortId: example2ExpressRoutePort.ID(),
//				BandwidthInGbps:    pulumi.Float64(5),
//				Sku: &network.ExpressRouteCircuitSkuArgs{
//					Tier:   pulumi.String("Standard"),
//					Family: pulumi.String("MeteredData"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleExpressRouteCircuitPeering, err := network.NewExpressRouteCircuitPeering(ctx, "exampleExpressRouteCircuitPeering", &network.ExpressRouteCircuitPeeringArgs{
//				PeeringType:                pulumi.String("AzurePrivatePeering"),
//				ExpressRouteCircuitName:    exampleExpressRouteCircuit.Name,
//				ResourceGroupName:          exampleResourceGroup.Name,
//				SharedKey:                  pulumi.String("ItsASecret"),
//				PeerAsn:                    pulumi.Int(100),
//				PrimaryPeerAddressPrefix:   pulumi.String("192.168.1.0/30"),
//				SecondaryPeerAddressPrefix: pulumi.String("192.168.1.0/30"),
//				VlanId:                     pulumi.Int(100),
//			})
//			if err != nil {
//				return err
//			}
//			example2ExpressRouteCircuitPeering, err := network.NewExpressRouteCircuitPeering(ctx, "example2ExpressRouteCircuitPeering", &network.ExpressRouteCircuitPeeringArgs{
//				PeeringType:                pulumi.String("AzurePrivatePeering"),
//				ExpressRouteCircuitName:    example2ExpressRouteCircuit.Name,
//				ResourceGroupName:          exampleResourceGroup.Name,
//				SharedKey:                  pulumi.String("ItsASecret"),
//				PeerAsn:                    pulumi.Int(100),
//				PrimaryPeerAddressPrefix:   pulumi.String("192.168.1.0/30"),
//				SecondaryPeerAddressPrefix: pulumi.String("192.168.1.0/30"),
//				VlanId:                     pulumi.Int(100),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = network.NewExpressRouteCircuitConnection(ctx, "exampleExpressRouteCircuitConnection", &network.ExpressRouteCircuitConnectionArgs{
//				PeeringId:         exampleExpressRouteCircuitPeering.ID(),
//				PeerPeeringId:     example2ExpressRouteCircuitPeering.ID(),
//				AddressPrefixIpv4: pulumi.String("192.169.9.0/29"),
//				AuthorizationKey:  pulumi.String("846a1918-b7a2-4917-b43c-8c4cdaee006a"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Express Route Circuit Connections can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:network/expressRouteCircuitConnection:ExpressRouteCircuitConnection example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/expressRouteCircuits/circuit1/peerings/peering1/connections/connection1
//
// ```
type ExpressRouteCircuitConnection struct {
	pulumi.CustomResourceState

	// The IPv4 address space from which to allocate customer address for global reach. Changing this forces a new Express Route Circuit Connection to be created.
	AddressPrefixIpv4 pulumi.StringOutput `pulumi:"addressPrefixIpv4"`
	// The IPv6 address space from which to allocate customer addresses for global reach.
	//
	// > **NOTE:** `addressPrefixIpv6` cannot be set when ExpressRoute Circuit Connection with ExpressRoute Circuit based on ExpressRoute Port.
	AddressPrefixIpv6 pulumi.StringPtrOutput `pulumi:"addressPrefixIpv6"`
	// The authorization key which is associated with the Express Route Circuit Connection.
	AuthorizationKey pulumi.StringPtrOutput `pulumi:"authorizationKey"`
	// The name which should be used for this Express Route Circuit Connection. Changing this forces a new Express Route Circuit Connection to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the peered Express Route Circuit Private Peering. Changing this forces a new Express Route Circuit Connection to be created.
	PeerPeeringId pulumi.StringOutput `pulumi:"peerPeeringId"`
	// The ID of the Express Route Circuit Private Peering that this Express Route Circuit Connection connects with. Changing this forces a new Express Route Circuit Connection to be created.
	PeeringId pulumi.StringOutput `pulumi:"peeringId"`
}

// NewExpressRouteCircuitConnection registers a new resource with the given unique name, arguments, and options.
func NewExpressRouteCircuitConnection(ctx *pulumi.Context,
	name string, args *ExpressRouteCircuitConnectionArgs, opts ...pulumi.ResourceOption) (*ExpressRouteCircuitConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AddressPrefixIpv4 == nil {
		return nil, errors.New("invalid value for required argument 'AddressPrefixIpv4'")
	}
	if args.PeerPeeringId == nil {
		return nil, errors.New("invalid value for required argument 'PeerPeeringId'")
	}
	if args.PeeringId == nil {
		return nil, errors.New("invalid value for required argument 'PeeringId'")
	}
	if args.AuthorizationKey != nil {
		args.AuthorizationKey = pulumi.ToSecret(args.AuthorizationKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"authorizationKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ExpressRouteCircuitConnection
	err := ctx.RegisterResource("azure:network/expressRouteCircuitConnection:ExpressRouteCircuitConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExpressRouteCircuitConnection gets an existing ExpressRouteCircuitConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExpressRouteCircuitConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExpressRouteCircuitConnectionState, opts ...pulumi.ResourceOption) (*ExpressRouteCircuitConnection, error) {
	var resource ExpressRouteCircuitConnection
	err := ctx.ReadResource("azure:network/expressRouteCircuitConnection:ExpressRouteCircuitConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExpressRouteCircuitConnection resources.
type expressRouteCircuitConnectionState struct {
	// The IPv4 address space from which to allocate customer address for global reach. Changing this forces a new Express Route Circuit Connection to be created.
	AddressPrefixIpv4 *string `pulumi:"addressPrefixIpv4"`
	// The IPv6 address space from which to allocate customer addresses for global reach.
	//
	// > **NOTE:** `addressPrefixIpv6` cannot be set when ExpressRoute Circuit Connection with ExpressRoute Circuit based on ExpressRoute Port.
	AddressPrefixIpv6 *string `pulumi:"addressPrefixIpv6"`
	// The authorization key which is associated with the Express Route Circuit Connection.
	AuthorizationKey *string `pulumi:"authorizationKey"`
	// The name which should be used for this Express Route Circuit Connection. Changing this forces a new Express Route Circuit Connection to be created.
	Name *string `pulumi:"name"`
	// The ID of the peered Express Route Circuit Private Peering. Changing this forces a new Express Route Circuit Connection to be created.
	PeerPeeringId *string `pulumi:"peerPeeringId"`
	// The ID of the Express Route Circuit Private Peering that this Express Route Circuit Connection connects with. Changing this forces a new Express Route Circuit Connection to be created.
	PeeringId *string `pulumi:"peeringId"`
}

type ExpressRouteCircuitConnectionState struct {
	// The IPv4 address space from which to allocate customer address for global reach. Changing this forces a new Express Route Circuit Connection to be created.
	AddressPrefixIpv4 pulumi.StringPtrInput
	// The IPv6 address space from which to allocate customer addresses for global reach.
	//
	// > **NOTE:** `addressPrefixIpv6` cannot be set when ExpressRoute Circuit Connection with ExpressRoute Circuit based on ExpressRoute Port.
	AddressPrefixIpv6 pulumi.StringPtrInput
	// The authorization key which is associated with the Express Route Circuit Connection.
	AuthorizationKey pulumi.StringPtrInput
	// The name which should be used for this Express Route Circuit Connection. Changing this forces a new Express Route Circuit Connection to be created.
	Name pulumi.StringPtrInput
	// The ID of the peered Express Route Circuit Private Peering. Changing this forces a new Express Route Circuit Connection to be created.
	PeerPeeringId pulumi.StringPtrInput
	// The ID of the Express Route Circuit Private Peering that this Express Route Circuit Connection connects with. Changing this forces a new Express Route Circuit Connection to be created.
	PeeringId pulumi.StringPtrInput
}

func (ExpressRouteCircuitConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*expressRouteCircuitConnectionState)(nil)).Elem()
}

type expressRouteCircuitConnectionArgs struct {
	// The IPv4 address space from which to allocate customer address for global reach. Changing this forces a new Express Route Circuit Connection to be created.
	AddressPrefixIpv4 string `pulumi:"addressPrefixIpv4"`
	// The IPv6 address space from which to allocate customer addresses for global reach.
	//
	// > **NOTE:** `addressPrefixIpv6` cannot be set when ExpressRoute Circuit Connection with ExpressRoute Circuit based on ExpressRoute Port.
	AddressPrefixIpv6 *string `pulumi:"addressPrefixIpv6"`
	// The authorization key which is associated with the Express Route Circuit Connection.
	AuthorizationKey *string `pulumi:"authorizationKey"`
	// The name which should be used for this Express Route Circuit Connection. Changing this forces a new Express Route Circuit Connection to be created.
	Name *string `pulumi:"name"`
	// The ID of the peered Express Route Circuit Private Peering. Changing this forces a new Express Route Circuit Connection to be created.
	PeerPeeringId string `pulumi:"peerPeeringId"`
	// The ID of the Express Route Circuit Private Peering that this Express Route Circuit Connection connects with. Changing this forces a new Express Route Circuit Connection to be created.
	PeeringId string `pulumi:"peeringId"`
}

// The set of arguments for constructing a ExpressRouteCircuitConnection resource.
type ExpressRouteCircuitConnectionArgs struct {
	// The IPv4 address space from which to allocate customer address for global reach. Changing this forces a new Express Route Circuit Connection to be created.
	AddressPrefixIpv4 pulumi.StringInput
	// The IPv6 address space from which to allocate customer addresses for global reach.
	//
	// > **NOTE:** `addressPrefixIpv6` cannot be set when ExpressRoute Circuit Connection with ExpressRoute Circuit based on ExpressRoute Port.
	AddressPrefixIpv6 pulumi.StringPtrInput
	// The authorization key which is associated with the Express Route Circuit Connection.
	AuthorizationKey pulumi.StringPtrInput
	// The name which should be used for this Express Route Circuit Connection. Changing this forces a new Express Route Circuit Connection to be created.
	Name pulumi.StringPtrInput
	// The ID of the peered Express Route Circuit Private Peering. Changing this forces a new Express Route Circuit Connection to be created.
	PeerPeeringId pulumi.StringInput
	// The ID of the Express Route Circuit Private Peering that this Express Route Circuit Connection connects with. Changing this forces a new Express Route Circuit Connection to be created.
	PeeringId pulumi.StringInput
}

func (ExpressRouteCircuitConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*expressRouteCircuitConnectionArgs)(nil)).Elem()
}

type ExpressRouteCircuitConnectionInput interface {
	pulumi.Input

	ToExpressRouteCircuitConnectionOutput() ExpressRouteCircuitConnectionOutput
	ToExpressRouteCircuitConnectionOutputWithContext(ctx context.Context) ExpressRouteCircuitConnectionOutput
}

func (*ExpressRouteCircuitConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**ExpressRouteCircuitConnection)(nil)).Elem()
}

func (i *ExpressRouteCircuitConnection) ToExpressRouteCircuitConnectionOutput() ExpressRouteCircuitConnectionOutput {
	return i.ToExpressRouteCircuitConnectionOutputWithContext(context.Background())
}

func (i *ExpressRouteCircuitConnection) ToExpressRouteCircuitConnectionOutputWithContext(ctx context.Context) ExpressRouteCircuitConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpressRouteCircuitConnectionOutput)
}

// ExpressRouteCircuitConnectionArrayInput is an input type that accepts ExpressRouteCircuitConnectionArray and ExpressRouteCircuitConnectionArrayOutput values.
// You can construct a concrete instance of `ExpressRouteCircuitConnectionArrayInput` via:
//
//	ExpressRouteCircuitConnectionArray{ ExpressRouteCircuitConnectionArgs{...} }
type ExpressRouteCircuitConnectionArrayInput interface {
	pulumi.Input

	ToExpressRouteCircuitConnectionArrayOutput() ExpressRouteCircuitConnectionArrayOutput
	ToExpressRouteCircuitConnectionArrayOutputWithContext(context.Context) ExpressRouteCircuitConnectionArrayOutput
}

type ExpressRouteCircuitConnectionArray []ExpressRouteCircuitConnectionInput

func (ExpressRouteCircuitConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExpressRouteCircuitConnection)(nil)).Elem()
}

func (i ExpressRouteCircuitConnectionArray) ToExpressRouteCircuitConnectionArrayOutput() ExpressRouteCircuitConnectionArrayOutput {
	return i.ToExpressRouteCircuitConnectionArrayOutputWithContext(context.Background())
}

func (i ExpressRouteCircuitConnectionArray) ToExpressRouteCircuitConnectionArrayOutputWithContext(ctx context.Context) ExpressRouteCircuitConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpressRouteCircuitConnectionArrayOutput)
}

// ExpressRouteCircuitConnectionMapInput is an input type that accepts ExpressRouteCircuitConnectionMap and ExpressRouteCircuitConnectionMapOutput values.
// You can construct a concrete instance of `ExpressRouteCircuitConnectionMapInput` via:
//
//	ExpressRouteCircuitConnectionMap{ "key": ExpressRouteCircuitConnectionArgs{...} }
type ExpressRouteCircuitConnectionMapInput interface {
	pulumi.Input

	ToExpressRouteCircuitConnectionMapOutput() ExpressRouteCircuitConnectionMapOutput
	ToExpressRouteCircuitConnectionMapOutputWithContext(context.Context) ExpressRouteCircuitConnectionMapOutput
}

type ExpressRouteCircuitConnectionMap map[string]ExpressRouteCircuitConnectionInput

func (ExpressRouteCircuitConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExpressRouteCircuitConnection)(nil)).Elem()
}

func (i ExpressRouteCircuitConnectionMap) ToExpressRouteCircuitConnectionMapOutput() ExpressRouteCircuitConnectionMapOutput {
	return i.ToExpressRouteCircuitConnectionMapOutputWithContext(context.Background())
}

func (i ExpressRouteCircuitConnectionMap) ToExpressRouteCircuitConnectionMapOutputWithContext(ctx context.Context) ExpressRouteCircuitConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpressRouteCircuitConnectionMapOutput)
}

type ExpressRouteCircuitConnectionOutput struct{ *pulumi.OutputState }

func (ExpressRouteCircuitConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExpressRouteCircuitConnection)(nil)).Elem()
}

func (o ExpressRouteCircuitConnectionOutput) ToExpressRouteCircuitConnectionOutput() ExpressRouteCircuitConnectionOutput {
	return o
}

func (o ExpressRouteCircuitConnectionOutput) ToExpressRouteCircuitConnectionOutputWithContext(ctx context.Context) ExpressRouteCircuitConnectionOutput {
	return o
}

// The IPv4 address space from which to allocate customer address for global reach. Changing this forces a new Express Route Circuit Connection to be created.
func (o ExpressRouteCircuitConnectionOutput) AddressPrefixIpv4() pulumi.StringOutput {
	return o.ApplyT(func(v *ExpressRouteCircuitConnection) pulumi.StringOutput { return v.AddressPrefixIpv4 }).(pulumi.StringOutput)
}

// The IPv6 address space from which to allocate customer addresses for global reach.
//
// > **NOTE:** `addressPrefixIpv6` cannot be set when ExpressRoute Circuit Connection with ExpressRoute Circuit based on ExpressRoute Port.
func (o ExpressRouteCircuitConnectionOutput) AddressPrefixIpv6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpressRouteCircuitConnection) pulumi.StringPtrOutput { return v.AddressPrefixIpv6 }).(pulumi.StringPtrOutput)
}

// The authorization key which is associated with the Express Route Circuit Connection.
func (o ExpressRouteCircuitConnectionOutput) AuthorizationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpressRouteCircuitConnection) pulumi.StringPtrOutput { return v.AuthorizationKey }).(pulumi.StringPtrOutput)
}

// The name which should be used for this Express Route Circuit Connection. Changing this forces a new Express Route Circuit Connection to be created.
func (o ExpressRouteCircuitConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ExpressRouteCircuitConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the peered Express Route Circuit Private Peering. Changing this forces a new Express Route Circuit Connection to be created.
func (o ExpressRouteCircuitConnectionOutput) PeerPeeringId() pulumi.StringOutput {
	return o.ApplyT(func(v *ExpressRouteCircuitConnection) pulumi.StringOutput { return v.PeerPeeringId }).(pulumi.StringOutput)
}

// The ID of the Express Route Circuit Private Peering that this Express Route Circuit Connection connects with. Changing this forces a new Express Route Circuit Connection to be created.
func (o ExpressRouteCircuitConnectionOutput) PeeringId() pulumi.StringOutput {
	return o.ApplyT(func(v *ExpressRouteCircuitConnection) pulumi.StringOutput { return v.PeeringId }).(pulumi.StringOutput)
}

type ExpressRouteCircuitConnectionArrayOutput struct{ *pulumi.OutputState }

func (ExpressRouteCircuitConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExpressRouteCircuitConnection)(nil)).Elem()
}

func (o ExpressRouteCircuitConnectionArrayOutput) ToExpressRouteCircuitConnectionArrayOutput() ExpressRouteCircuitConnectionArrayOutput {
	return o
}

func (o ExpressRouteCircuitConnectionArrayOutput) ToExpressRouteCircuitConnectionArrayOutputWithContext(ctx context.Context) ExpressRouteCircuitConnectionArrayOutput {
	return o
}

func (o ExpressRouteCircuitConnectionArrayOutput) Index(i pulumi.IntInput) ExpressRouteCircuitConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExpressRouteCircuitConnection {
		return vs[0].([]*ExpressRouteCircuitConnection)[vs[1].(int)]
	}).(ExpressRouteCircuitConnectionOutput)
}

type ExpressRouteCircuitConnectionMapOutput struct{ *pulumi.OutputState }

func (ExpressRouteCircuitConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExpressRouteCircuitConnection)(nil)).Elem()
}

func (o ExpressRouteCircuitConnectionMapOutput) ToExpressRouteCircuitConnectionMapOutput() ExpressRouteCircuitConnectionMapOutput {
	return o
}

func (o ExpressRouteCircuitConnectionMapOutput) ToExpressRouteCircuitConnectionMapOutputWithContext(ctx context.Context) ExpressRouteCircuitConnectionMapOutput {
	return o
}

func (o ExpressRouteCircuitConnectionMapOutput) MapIndex(k pulumi.StringInput) ExpressRouteCircuitConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExpressRouteCircuitConnection {
		return vs[0].(map[string]*ExpressRouteCircuitConnection)[vs[1].(string)]
	}).(ExpressRouteCircuitConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExpressRouteCircuitConnectionInput)(nil)).Elem(), &ExpressRouteCircuitConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExpressRouteCircuitConnectionArrayInput)(nil)).Elem(), ExpressRouteCircuitConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExpressRouteCircuitConnectionMapInput)(nil)).Elem(), ExpressRouteCircuitConnectionMap{})
	pulumi.RegisterOutputType(ExpressRouteCircuitConnectionOutput{})
	pulumi.RegisterOutputType(ExpressRouteCircuitConnectionArrayOutput{})
	pulumi.RegisterOutputType(ExpressRouteCircuitConnectionMapOutput{})
}
