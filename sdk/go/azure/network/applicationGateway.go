// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type ApplicationGateway struct {
	s *pulumi.ResourceState
}

// NewApplicationGateway registers a new resource with the given unique name, arguments, and options.
func NewApplicationGateway(ctx *pulumi.Context,
	name string, args *ApplicationGatewayArgs, opts ...pulumi.ResourceOpt) (*ApplicationGateway, error) {
	if args == nil || args.BackendAddressPools == nil {
		return nil, errors.New("missing required argument 'BackendAddressPools'")
	}
	if args == nil || args.BackendHttpSettings == nil {
		return nil, errors.New("missing required argument 'BackendHttpSettings'")
	}
	if args == nil || args.FrontendIpConfigurations == nil {
		return nil, errors.New("missing required argument 'FrontendIpConfigurations'")
	}
	if args == nil || args.FrontendPorts == nil {
		return nil, errors.New("missing required argument 'FrontendPorts'")
	}
	if args == nil || args.GatewayIpConfigurations == nil {
		return nil, errors.New("missing required argument 'GatewayIpConfigurations'")
	}
	if args == nil || args.HttpListeners == nil {
		return nil, errors.New("missing required argument 'HttpListeners'")
	}
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	if args == nil || args.RequestRoutingRules == nil {
		return nil, errors.New("missing required argument 'RequestRoutingRules'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.Sku == nil {
		return nil, errors.New("missing required argument 'Sku'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["authenticationCertificates"] = nil
		inputs["backendAddressPools"] = nil
		inputs["backendHttpSettings"] = nil
		inputs["disabledSslProtocols"] = nil
		inputs["frontendIpConfigurations"] = nil
		inputs["frontendPorts"] = nil
		inputs["gatewayIpConfigurations"] = nil
		inputs["httpListeners"] = nil
		inputs["location"] = nil
		inputs["name"] = nil
		inputs["probes"] = nil
		inputs["requestRoutingRules"] = nil
		inputs["resourceGroupName"] = nil
		inputs["sku"] = nil
		inputs["sslCertificates"] = nil
		inputs["tags"] = nil
		inputs["urlPathMaps"] = nil
		inputs["wafConfiguration"] = nil
	} else {
		inputs["authenticationCertificates"] = args.AuthenticationCertificates
		inputs["backendAddressPools"] = args.BackendAddressPools
		inputs["backendHttpSettings"] = args.BackendHttpSettings
		inputs["disabledSslProtocols"] = args.DisabledSslProtocols
		inputs["frontendIpConfigurations"] = args.FrontendIpConfigurations
		inputs["frontendPorts"] = args.FrontendPorts
		inputs["gatewayIpConfigurations"] = args.GatewayIpConfigurations
		inputs["httpListeners"] = args.HttpListeners
		inputs["location"] = args.Location
		inputs["name"] = args.Name
		inputs["probes"] = args.Probes
		inputs["requestRoutingRules"] = args.RequestRoutingRules
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["sku"] = args.Sku
		inputs["sslCertificates"] = args.SslCertificates
		inputs["tags"] = args.Tags
		inputs["urlPathMaps"] = args.UrlPathMaps
		inputs["wafConfiguration"] = args.WafConfiguration
	}
	s, err := ctx.RegisterResource("azure:network/applicationGateway:ApplicationGateway", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ApplicationGateway{s: s}, nil
}

// GetApplicationGateway gets an existing ApplicationGateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationGateway(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ApplicationGatewayState, opts ...pulumi.ResourceOpt) (*ApplicationGateway, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["authenticationCertificates"] = state.AuthenticationCertificates
		inputs["backendAddressPools"] = state.BackendAddressPools
		inputs["backendHttpSettings"] = state.BackendHttpSettings
		inputs["disabledSslProtocols"] = state.DisabledSslProtocols
		inputs["frontendIpConfigurations"] = state.FrontendIpConfigurations
		inputs["frontendPorts"] = state.FrontendPorts
		inputs["gatewayIpConfigurations"] = state.GatewayIpConfigurations
		inputs["httpListeners"] = state.HttpListeners
		inputs["location"] = state.Location
		inputs["name"] = state.Name
		inputs["probes"] = state.Probes
		inputs["requestRoutingRules"] = state.RequestRoutingRules
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["sku"] = state.Sku
		inputs["sslCertificates"] = state.SslCertificates
		inputs["tags"] = state.Tags
		inputs["urlPathMaps"] = state.UrlPathMaps
		inputs["wafConfiguration"] = state.WafConfiguration
	}
	s, err := ctx.ReadResource("azure:network/applicationGateway:ApplicationGateway", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ApplicationGateway{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ApplicationGateway) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ApplicationGateway) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *ApplicationGateway) AuthenticationCertificates() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["authenticationCertificates"])
}

func (r *ApplicationGateway) BackendAddressPools() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["backendAddressPools"])
}

func (r *ApplicationGateway) BackendHttpSettings() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["backendHttpSettings"])
}

func (r *ApplicationGateway) DisabledSslProtocols() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["disabledSslProtocols"])
}

func (r *ApplicationGateway) FrontendIpConfigurations() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["frontendIpConfigurations"])
}

func (r *ApplicationGateway) FrontendPorts() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["frontendPorts"])
}

func (r *ApplicationGateway) GatewayIpConfigurations() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["gatewayIpConfigurations"])
}

func (r *ApplicationGateway) HttpListeners() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["httpListeners"])
}

func (r *ApplicationGateway) Location() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["location"])
}

func (r *ApplicationGateway) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

func (r *ApplicationGateway) Probes() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["probes"])
}

func (r *ApplicationGateway) RequestRoutingRules() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["requestRoutingRules"])
}

func (r *ApplicationGateway) ResourceGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

func (r *ApplicationGateway) Sku() *pulumi.Output {
	return r.s.State["sku"]
}

func (r *ApplicationGateway) SslCertificates() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["sslCertificates"])
}

func (r *ApplicationGateway) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

func (r *ApplicationGateway) UrlPathMaps() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["urlPathMaps"])
}

func (r *ApplicationGateway) WafConfiguration() *pulumi.Output {
	return r.s.State["wafConfiguration"]
}

// Input properties used for looking up and filtering ApplicationGateway resources.
type ApplicationGatewayState struct {
	AuthenticationCertificates interface{}
	BackendAddressPools interface{}
	BackendHttpSettings interface{}
	DisabledSslProtocols interface{}
	FrontendIpConfigurations interface{}
	FrontendPorts interface{}
	GatewayIpConfigurations interface{}
	HttpListeners interface{}
	Location interface{}
	Name interface{}
	Probes interface{}
	RequestRoutingRules interface{}
	ResourceGroupName interface{}
	Sku interface{}
	SslCertificates interface{}
	Tags interface{}
	UrlPathMaps interface{}
	WafConfiguration interface{}
}

// The set of arguments for constructing a ApplicationGateway resource.
type ApplicationGatewayArgs struct {
	AuthenticationCertificates interface{}
	BackendAddressPools interface{}
	BackendHttpSettings interface{}
	DisabledSslProtocols interface{}
	FrontendIpConfigurations interface{}
	FrontendPorts interface{}
	GatewayIpConfigurations interface{}
	HttpListeners interface{}
	Location interface{}
	Name interface{}
	Probes interface{}
	RequestRoutingRules interface{}
	ResourceGroupName interface{}
	Sku interface{}
	SslCertificates interface{}
	Tags interface{}
	UrlPathMaps interface{}
	WafConfiguration interface{}
}
