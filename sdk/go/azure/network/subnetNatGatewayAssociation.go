// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Associates a NAT Gateway with a Subnet within a Virtual Network.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/network"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("East US 2"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "exampleVirtualNetwork", &network.VirtualNetworkArgs{
// 			AddressSpaces: pulumi.StringArray{
// 				pulumi.String("10.0.0.0/16"),
// 			},
// 			Location:          exampleResourceGroup.Location,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleSubnet, err := network.NewSubnet(ctx, "exampleSubnet", &network.SubnetArgs{
// 			ResourceGroupName:  exampleResourceGroup.Name,
// 			VirtualNetworkName: exampleVirtualNetwork.Name,
// 			AddressPrefixes: pulumi.StringArray{
// 				pulumi.String("10.0.2.0/24"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleNatGateway, err := network.NewNatGateway(ctx, "exampleNatGateway", &network.NatGatewayArgs{
// 			Location:          exampleResourceGroup.Location,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = network.NewSubnetNatGatewayAssociation(ctx, "exampleSubnetNatGatewayAssociation", &network.SubnetNatGatewayAssociationArgs{
// 			SubnetId:     exampleSubnet.ID(),
// 			NatGatewayId: exampleNatGateway.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Subnet NAT Gateway Associations can be imported using the `resource id` of the Subnet, e.g.
//
// ```sh
//  $ pulumi import azure:network/subnetNatGatewayAssociation:SubnetNatGatewayAssociation association1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/virtualNetworks/myvnet1/subnets/mysubnet1
// ```
type SubnetNatGatewayAssociation struct {
	pulumi.CustomResourceState

	// The ID of the NAT Gateway which should be associated with the Subnet. Changing this forces a new resource to be created.
	NatGatewayId pulumi.StringOutput `pulumi:"natGatewayId"`
	// The ID of the Subnet. Changing this forces a new resource to be created.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
}

// NewSubnetNatGatewayAssociation registers a new resource with the given unique name, arguments, and options.
func NewSubnetNatGatewayAssociation(ctx *pulumi.Context,
	name string, args *SubnetNatGatewayAssociationArgs, opts ...pulumi.ResourceOption) (*SubnetNatGatewayAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NatGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'NatGatewayId'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	var resource SubnetNatGatewayAssociation
	err := ctx.RegisterResource("azure:network/subnetNatGatewayAssociation:SubnetNatGatewayAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubnetNatGatewayAssociation gets an existing SubnetNatGatewayAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnetNatGatewayAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubnetNatGatewayAssociationState, opts ...pulumi.ResourceOption) (*SubnetNatGatewayAssociation, error) {
	var resource SubnetNatGatewayAssociation
	err := ctx.ReadResource("azure:network/subnetNatGatewayAssociation:SubnetNatGatewayAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubnetNatGatewayAssociation resources.
type subnetNatGatewayAssociationState struct {
	// The ID of the NAT Gateway which should be associated with the Subnet. Changing this forces a new resource to be created.
	NatGatewayId *string `pulumi:"natGatewayId"`
	// The ID of the Subnet. Changing this forces a new resource to be created.
	SubnetId *string `pulumi:"subnetId"`
}

type SubnetNatGatewayAssociationState struct {
	// The ID of the NAT Gateway which should be associated with the Subnet. Changing this forces a new resource to be created.
	NatGatewayId pulumi.StringPtrInput
	// The ID of the Subnet. Changing this forces a new resource to be created.
	SubnetId pulumi.StringPtrInput
}

func (SubnetNatGatewayAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetNatGatewayAssociationState)(nil)).Elem()
}

type subnetNatGatewayAssociationArgs struct {
	// The ID of the NAT Gateway which should be associated with the Subnet. Changing this forces a new resource to be created.
	NatGatewayId string `pulumi:"natGatewayId"`
	// The ID of the Subnet. Changing this forces a new resource to be created.
	SubnetId string `pulumi:"subnetId"`
}

// The set of arguments for constructing a SubnetNatGatewayAssociation resource.
type SubnetNatGatewayAssociationArgs struct {
	// The ID of the NAT Gateway which should be associated with the Subnet. Changing this forces a new resource to be created.
	NatGatewayId pulumi.StringInput
	// The ID of the Subnet. Changing this forces a new resource to be created.
	SubnetId pulumi.StringInput
}

func (SubnetNatGatewayAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetNatGatewayAssociationArgs)(nil)).Elem()
}

type SubnetNatGatewayAssociationInput interface {
	pulumi.Input

	ToSubnetNatGatewayAssociationOutput() SubnetNatGatewayAssociationOutput
	ToSubnetNatGatewayAssociationOutputWithContext(ctx context.Context) SubnetNatGatewayAssociationOutput
}

func (*SubnetNatGatewayAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetNatGatewayAssociation)(nil))
}

func (i *SubnetNatGatewayAssociation) ToSubnetNatGatewayAssociationOutput() SubnetNatGatewayAssociationOutput {
	return i.ToSubnetNatGatewayAssociationOutputWithContext(context.Background())
}

func (i *SubnetNatGatewayAssociation) ToSubnetNatGatewayAssociationOutputWithContext(ctx context.Context) SubnetNatGatewayAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetNatGatewayAssociationOutput)
}

func (i *SubnetNatGatewayAssociation) ToSubnetNatGatewayAssociationPtrOutput() SubnetNatGatewayAssociationPtrOutput {
	return i.ToSubnetNatGatewayAssociationPtrOutputWithContext(context.Background())
}

func (i *SubnetNatGatewayAssociation) ToSubnetNatGatewayAssociationPtrOutputWithContext(ctx context.Context) SubnetNatGatewayAssociationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetNatGatewayAssociationPtrOutput)
}

type SubnetNatGatewayAssociationPtrInput interface {
	pulumi.Input

	ToSubnetNatGatewayAssociationPtrOutput() SubnetNatGatewayAssociationPtrOutput
	ToSubnetNatGatewayAssociationPtrOutputWithContext(ctx context.Context) SubnetNatGatewayAssociationPtrOutput
}

type subnetNatGatewayAssociationPtrType SubnetNatGatewayAssociationArgs

func (*subnetNatGatewayAssociationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetNatGatewayAssociation)(nil))
}

func (i *subnetNatGatewayAssociationPtrType) ToSubnetNatGatewayAssociationPtrOutput() SubnetNatGatewayAssociationPtrOutput {
	return i.ToSubnetNatGatewayAssociationPtrOutputWithContext(context.Background())
}

func (i *subnetNatGatewayAssociationPtrType) ToSubnetNatGatewayAssociationPtrOutputWithContext(ctx context.Context) SubnetNatGatewayAssociationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetNatGatewayAssociationPtrOutput)
}

// SubnetNatGatewayAssociationArrayInput is an input type that accepts SubnetNatGatewayAssociationArray and SubnetNatGatewayAssociationArrayOutput values.
// You can construct a concrete instance of `SubnetNatGatewayAssociationArrayInput` via:
//
//          SubnetNatGatewayAssociationArray{ SubnetNatGatewayAssociationArgs{...} }
type SubnetNatGatewayAssociationArrayInput interface {
	pulumi.Input

	ToSubnetNatGatewayAssociationArrayOutput() SubnetNatGatewayAssociationArrayOutput
	ToSubnetNatGatewayAssociationArrayOutputWithContext(context.Context) SubnetNatGatewayAssociationArrayOutput
}

type SubnetNatGatewayAssociationArray []SubnetNatGatewayAssociationInput

func (SubnetNatGatewayAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*SubnetNatGatewayAssociation)(nil))
}

func (i SubnetNatGatewayAssociationArray) ToSubnetNatGatewayAssociationArrayOutput() SubnetNatGatewayAssociationArrayOutput {
	return i.ToSubnetNatGatewayAssociationArrayOutputWithContext(context.Background())
}

func (i SubnetNatGatewayAssociationArray) ToSubnetNatGatewayAssociationArrayOutputWithContext(ctx context.Context) SubnetNatGatewayAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetNatGatewayAssociationArrayOutput)
}

// SubnetNatGatewayAssociationMapInput is an input type that accepts SubnetNatGatewayAssociationMap and SubnetNatGatewayAssociationMapOutput values.
// You can construct a concrete instance of `SubnetNatGatewayAssociationMapInput` via:
//
//          SubnetNatGatewayAssociationMap{ "key": SubnetNatGatewayAssociationArgs{...} }
type SubnetNatGatewayAssociationMapInput interface {
	pulumi.Input

	ToSubnetNatGatewayAssociationMapOutput() SubnetNatGatewayAssociationMapOutput
	ToSubnetNatGatewayAssociationMapOutputWithContext(context.Context) SubnetNatGatewayAssociationMapOutput
}

type SubnetNatGatewayAssociationMap map[string]SubnetNatGatewayAssociationInput

func (SubnetNatGatewayAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*SubnetNatGatewayAssociation)(nil))
}

func (i SubnetNatGatewayAssociationMap) ToSubnetNatGatewayAssociationMapOutput() SubnetNatGatewayAssociationMapOutput {
	return i.ToSubnetNatGatewayAssociationMapOutputWithContext(context.Background())
}

func (i SubnetNatGatewayAssociationMap) ToSubnetNatGatewayAssociationMapOutputWithContext(ctx context.Context) SubnetNatGatewayAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetNatGatewayAssociationMapOutput)
}

type SubnetNatGatewayAssociationOutput struct {
	*pulumi.OutputState
}

func (SubnetNatGatewayAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetNatGatewayAssociation)(nil))
}

func (o SubnetNatGatewayAssociationOutput) ToSubnetNatGatewayAssociationOutput() SubnetNatGatewayAssociationOutput {
	return o
}

func (o SubnetNatGatewayAssociationOutput) ToSubnetNatGatewayAssociationOutputWithContext(ctx context.Context) SubnetNatGatewayAssociationOutput {
	return o
}

func (o SubnetNatGatewayAssociationOutput) ToSubnetNatGatewayAssociationPtrOutput() SubnetNatGatewayAssociationPtrOutput {
	return o.ToSubnetNatGatewayAssociationPtrOutputWithContext(context.Background())
}

func (o SubnetNatGatewayAssociationOutput) ToSubnetNatGatewayAssociationPtrOutputWithContext(ctx context.Context) SubnetNatGatewayAssociationPtrOutput {
	return o.ApplyT(func(v SubnetNatGatewayAssociation) *SubnetNatGatewayAssociation {
		return &v
	}).(SubnetNatGatewayAssociationPtrOutput)
}

type SubnetNatGatewayAssociationPtrOutput struct {
	*pulumi.OutputState
}

func (SubnetNatGatewayAssociationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetNatGatewayAssociation)(nil))
}

func (o SubnetNatGatewayAssociationPtrOutput) ToSubnetNatGatewayAssociationPtrOutput() SubnetNatGatewayAssociationPtrOutput {
	return o
}

func (o SubnetNatGatewayAssociationPtrOutput) ToSubnetNatGatewayAssociationPtrOutputWithContext(ctx context.Context) SubnetNatGatewayAssociationPtrOutput {
	return o
}

type SubnetNatGatewayAssociationArrayOutput struct{ *pulumi.OutputState }

func (SubnetNatGatewayAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubnetNatGatewayAssociation)(nil))
}

func (o SubnetNatGatewayAssociationArrayOutput) ToSubnetNatGatewayAssociationArrayOutput() SubnetNatGatewayAssociationArrayOutput {
	return o
}

func (o SubnetNatGatewayAssociationArrayOutput) ToSubnetNatGatewayAssociationArrayOutputWithContext(ctx context.Context) SubnetNatGatewayAssociationArrayOutput {
	return o
}

func (o SubnetNatGatewayAssociationArrayOutput) Index(i pulumi.IntInput) SubnetNatGatewayAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubnetNatGatewayAssociation {
		return vs[0].([]SubnetNatGatewayAssociation)[vs[1].(int)]
	}).(SubnetNatGatewayAssociationOutput)
}

type SubnetNatGatewayAssociationMapOutput struct{ *pulumi.OutputState }

func (SubnetNatGatewayAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SubnetNatGatewayAssociation)(nil))
}

func (o SubnetNatGatewayAssociationMapOutput) ToSubnetNatGatewayAssociationMapOutput() SubnetNatGatewayAssociationMapOutput {
	return o
}

func (o SubnetNatGatewayAssociationMapOutput) ToSubnetNatGatewayAssociationMapOutputWithContext(ctx context.Context) SubnetNatGatewayAssociationMapOutput {
	return o
}

func (o SubnetNatGatewayAssociationMapOutput) MapIndex(k pulumi.StringInput) SubnetNatGatewayAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SubnetNatGatewayAssociation {
		return vs[0].(map[string]SubnetNatGatewayAssociation)[vs[1].(string)]
	}).(SubnetNatGatewayAssociationOutput)
}

func init() {
	pulumi.RegisterOutputType(SubnetNatGatewayAssociationOutput{})
	pulumi.RegisterOutputType(SubnetNatGatewayAssociationPtrOutput{})
	pulumi.RegisterOutputType(SubnetNatGatewayAssociationArrayOutput{})
	pulumi.RegisterOutputType(SubnetNatGatewayAssociationMapOutput{})
}
