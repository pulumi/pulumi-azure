// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Network Connection Monitor.
//
// > **NOTE:** Any Network Connection Monitor resource created with API versions 2019-06-01 or earlier (v1) are now incompatible with this provider, which now only supports v2.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	compute/extension "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/compute/extension"
//	compute/virtualMachine "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/compute/virtualMachine"
//	core/resourceGroup "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/core/resourceGroup"
//	network/networkConnectionMonitor "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/networkConnectionMonitor"
//	network/networkInterface "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/networkInterface"
//	network/networkWatcher "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/networkWatcher"
//	network/subnet "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/subnet"
//	network/virtualNetwork "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/virtualNetwork"
//	operationalinsights/analyticsWorkspace "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/operationalinsights/analyticsWorkspace"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// example, err := core/resourceGroup.NewResourceGroup(ctx, "example", &core/resourceGroup.ResourceGroupArgs{
// Name: "example-Watcher-resources",
// Location: "West Europe",
// })
// if err != nil {
// return err
// }
// exampleNetworkWatcher, err := network/networkWatcher.NewNetworkWatcher(ctx, "example", &network/networkWatcher.NetworkWatcherArgs{
// Name: "example-Watcher",
// Location: example.Location,
// ResourceGroupName: example.Name,
// })
// if err != nil {
// return err
// }
// exampleVirtualNetwork, err := network/virtualNetwork.NewVirtualNetwork(ctx, "example", &network/virtualNetwork.VirtualNetworkArgs{
// Name: "example-Vnet",
// AddressSpaces: []string{
// "10.0.0.0/16",
// },
// Location: example.Location,
// ResourceGroupName: example.Name,
// })
// if err != nil {
// return err
// }
// exampleSubnet, err := network/subnet.NewSubnet(ctx, "example", &network/subnet.SubnetArgs{
// Name: "example-Subnet",
// ResourceGroupName: example.Name,
// VirtualNetworkName: exampleVirtualNetwork.Name,
// AddressPrefixes: []string{
// "10.0.2.0/24",
// },
// })
// if err != nil {
// return err
// }
// exampleNetworkInterface, err := network/networkInterface.NewNetworkInterface(ctx, "example", &network/networkInterface.NetworkInterfaceArgs{
// Name: "example-Nic",
// Location: example.Location,
// ResourceGroupName: example.Name,
// IpConfigurations: []map[string]interface{}{
// map[string]interface{}{
// "name": "testconfiguration1",
// "subnetId": exampleSubnet.Id,
// "privateIpAddressAllocation": "Dynamic",
// },
// },
// })
// if err != nil {
// return err
// }
// exampleVirtualMachine, err := compute/virtualMachine.NewVirtualMachine(ctx, "example", &compute/virtualMachine.VirtualMachineArgs{
// Name: "example-VM",
// Location: example.Location,
// ResourceGroupName: example.Name,
// NetworkInterfaceIds: []interface{}{
// exampleNetworkInterface.Id,
// },
// VmSize: "Standard_D2s_v3",
// StorageImageReference: map[string]interface{}{
// "publisher": "Canonical",
// "offer": "0001-com-ubuntu-server-jammy",
// "sku": "22_04-lts",
// "version": "latest",
// },
// StorageOsDisk: map[string]interface{}{
// "name": "osdisk-example01",
// "caching": "ReadWrite",
// "createOption": "FromImage",
// "managedDiskType": "Standard_LRS",
// },
// OsProfile: map[string]interface{}{
// "computerName": "hostnametest01",
// "adminUsername": "testadmin",
// "adminPassword": "Password1234!",
// },
// OsProfileLinuxConfig: map[string]interface{}{
// "disablePasswordAuthentication": false,
// },
// })
// if err != nil {
// return err
// }
// _, err = compute/extension.NewExtension(ctx, "example", &compute/extension.ExtensionArgs{
// Name: "example-VMExtension",
// VirtualMachineId: exampleVirtualMachine.Id,
// Publisher: "Microsoft.Azure.NetworkWatcher",
// Type: "NetworkWatcherAgentLinux",
// TypeHandlerVersion: "1.4",
// AutoUpgradeMinorVersion: true,
// })
// if err != nil {
// return err
// }
// exampleAnalyticsWorkspace, err := operationalinsights/analyticsWorkspace.NewAnalyticsWorkspace(ctx, "example", &operationalinsights/analyticsWorkspace.AnalyticsWorkspaceArgs{
// Name: "example-Workspace",
// Location: example.Location,
// ResourceGroupName: example.Name,
// Sku: "PerGB2018",
// })
// if err != nil {
// return err
// }
// _, err = network/networkConnectionMonitor.NewNetworkConnectionMonitor(ctx, "example", &network/networkConnectionMonitor.NetworkConnectionMonitorArgs{
// Name: "example-Monitor",
// NetworkWatcherId: exampleNetworkWatcher.Id,
// Location: exampleNetworkWatcher.Location,
// Endpoints: []interface{}{
// map[string]interface{}{
// "name": "source",
// "targetResourceId": exampleVirtualMachine.Id,
// "filter": map[string]interface{}{
// "items": []map[string]interface{}{
// map[string]interface{}{
// "address": exampleVirtualMachine.Id,
// "type": "AgentAddress",
// },
// },
// "type": "Include",
// },
// },
// map[string]interface{}{
// "name": "destination",
// "address": "mycompany.io",
// },
// },
// TestConfigurations: []map[string]interface{}{
// map[string]interface{}{
// "name": "tcpName",
// "protocol": "Tcp",
// "testFrequencyInSeconds": 60,
// "tcpConfiguration": map[string]interface{}{
// "port": 80,
// },
// },
// },
// TestGroups: []map[string]interface{}{
// map[string]interface{}{
// "name": "exampletg",
// "destinationEndpoints": []string{
// "destination",
// },
// "sourceEndpoints": []string{
// "source",
// },
// "testConfigurationNames": []string{
// "tcpName",
// },
// },
// },
// Notes: "examplenote",
// OutputWorkspaceResourceIds: []interface{}{
// exampleAnalyticsWorkspace.Id,
// },
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
//
// ## Import
//
// Network Connection Monitors can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:network/networkConnectionMonitor:NetworkConnectionMonitor example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/networkWatchers/watcher1/connectionMonitors/connectionMonitor1
// ```
type NetworkConnectionMonitor struct {
	pulumi.CustomResourceState

	// A `endpoint` block as defined below.
	Endpoints NetworkConnectionMonitorEndpointArrayOutput `pulumi:"endpoints"`
	// The Azure Region where the Network Connection Monitor should exist. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name which should be used for this Network Connection Monitor. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Network Watcher. Changing this forces a new resource to be created.
	NetworkWatcherId pulumi.StringOutput `pulumi:"networkWatcherId"`
	// The description of the Network Connection Monitor.
	Notes pulumi.StringPtrOutput `pulumi:"notes"`
	// A list of IDs of the Log Analytics Workspace which will accept the output from the Network Connection Monitor.
	OutputWorkspaceResourceIds pulumi.StringArrayOutput `pulumi:"outputWorkspaceResourceIds"`
	// A mapping of tags which should be assigned to the Network Connection Monitor.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A `testConfiguration` block as defined below.
	TestConfigurations NetworkConnectionMonitorTestConfigurationArrayOutput `pulumi:"testConfigurations"`
	// A `testGroup` block as defined below.
	TestGroups NetworkConnectionMonitorTestGroupArrayOutput `pulumi:"testGroups"`
}

// NewNetworkConnectionMonitor registers a new resource with the given unique name, arguments, and options.
func NewNetworkConnectionMonitor(ctx *pulumi.Context,
	name string, args *NetworkConnectionMonitorArgs, opts ...pulumi.ResourceOption) (*NetworkConnectionMonitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Endpoints == nil {
		return nil, errors.New("invalid value for required argument 'Endpoints'")
	}
	if args.NetworkWatcherId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkWatcherId'")
	}
	if args.TestConfigurations == nil {
		return nil, errors.New("invalid value for required argument 'TestConfigurations'")
	}
	if args.TestGroups == nil {
		return nil, errors.New("invalid value for required argument 'TestGroups'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkConnectionMonitor
	err := ctx.RegisterResource("azure:network/networkConnectionMonitor:NetworkConnectionMonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkConnectionMonitor gets an existing NetworkConnectionMonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkConnectionMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkConnectionMonitorState, opts ...pulumi.ResourceOption) (*NetworkConnectionMonitor, error) {
	var resource NetworkConnectionMonitor
	err := ctx.ReadResource("azure:network/networkConnectionMonitor:NetworkConnectionMonitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkConnectionMonitor resources.
type networkConnectionMonitorState struct {
	// A `endpoint` block as defined below.
	Endpoints []NetworkConnectionMonitorEndpoint `pulumi:"endpoints"`
	// The Azure Region where the Network Connection Monitor should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Network Connection Monitor. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The ID of the Network Watcher. Changing this forces a new resource to be created.
	NetworkWatcherId *string `pulumi:"networkWatcherId"`
	// The description of the Network Connection Monitor.
	Notes *string `pulumi:"notes"`
	// A list of IDs of the Log Analytics Workspace which will accept the output from the Network Connection Monitor.
	OutputWorkspaceResourceIds []string `pulumi:"outputWorkspaceResourceIds"`
	// A mapping of tags which should be assigned to the Network Connection Monitor.
	Tags map[string]string `pulumi:"tags"`
	// A `testConfiguration` block as defined below.
	TestConfigurations []NetworkConnectionMonitorTestConfiguration `pulumi:"testConfigurations"`
	// A `testGroup` block as defined below.
	TestGroups []NetworkConnectionMonitorTestGroup `pulumi:"testGroups"`
}

type NetworkConnectionMonitorState struct {
	// A `endpoint` block as defined below.
	Endpoints NetworkConnectionMonitorEndpointArrayInput
	// The Azure Region where the Network Connection Monitor should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Network Connection Monitor. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The ID of the Network Watcher. Changing this forces a new resource to be created.
	NetworkWatcherId pulumi.StringPtrInput
	// The description of the Network Connection Monitor.
	Notes pulumi.StringPtrInput
	// A list of IDs of the Log Analytics Workspace which will accept the output from the Network Connection Monitor.
	OutputWorkspaceResourceIds pulumi.StringArrayInput
	// A mapping of tags which should be assigned to the Network Connection Monitor.
	Tags pulumi.StringMapInput
	// A `testConfiguration` block as defined below.
	TestConfigurations NetworkConnectionMonitorTestConfigurationArrayInput
	// A `testGroup` block as defined below.
	TestGroups NetworkConnectionMonitorTestGroupArrayInput
}

func (NetworkConnectionMonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkConnectionMonitorState)(nil)).Elem()
}

type networkConnectionMonitorArgs struct {
	// A `endpoint` block as defined below.
	Endpoints []NetworkConnectionMonitorEndpoint `pulumi:"endpoints"`
	// The Azure Region where the Network Connection Monitor should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Network Connection Monitor. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The ID of the Network Watcher. Changing this forces a new resource to be created.
	NetworkWatcherId string `pulumi:"networkWatcherId"`
	// The description of the Network Connection Monitor.
	Notes *string `pulumi:"notes"`
	// A list of IDs of the Log Analytics Workspace which will accept the output from the Network Connection Monitor.
	OutputWorkspaceResourceIds []string `pulumi:"outputWorkspaceResourceIds"`
	// A mapping of tags which should be assigned to the Network Connection Monitor.
	Tags map[string]string `pulumi:"tags"`
	// A `testConfiguration` block as defined below.
	TestConfigurations []NetworkConnectionMonitorTestConfiguration `pulumi:"testConfigurations"`
	// A `testGroup` block as defined below.
	TestGroups []NetworkConnectionMonitorTestGroup `pulumi:"testGroups"`
}

// The set of arguments for constructing a NetworkConnectionMonitor resource.
type NetworkConnectionMonitorArgs struct {
	// A `endpoint` block as defined below.
	Endpoints NetworkConnectionMonitorEndpointArrayInput
	// The Azure Region where the Network Connection Monitor should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Network Connection Monitor. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The ID of the Network Watcher. Changing this forces a new resource to be created.
	NetworkWatcherId pulumi.StringInput
	// The description of the Network Connection Monitor.
	Notes pulumi.StringPtrInput
	// A list of IDs of the Log Analytics Workspace which will accept the output from the Network Connection Monitor.
	OutputWorkspaceResourceIds pulumi.StringArrayInput
	// A mapping of tags which should be assigned to the Network Connection Monitor.
	Tags pulumi.StringMapInput
	// A `testConfiguration` block as defined below.
	TestConfigurations NetworkConnectionMonitorTestConfigurationArrayInput
	// A `testGroup` block as defined below.
	TestGroups NetworkConnectionMonitorTestGroupArrayInput
}

func (NetworkConnectionMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkConnectionMonitorArgs)(nil)).Elem()
}

type NetworkConnectionMonitorInput interface {
	pulumi.Input

	ToNetworkConnectionMonitorOutput() NetworkConnectionMonitorOutput
	ToNetworkConnectionMonitorOutputWithContext(ctx context.Context) NetworkConnectionMonitorOutput
}

func (*NetworkConnectionMonitor) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConnectionMonitor)(nil)).Elem()
}

func (i *NetworkConnectionMonitor) ToNetworkConnectionMonitorOutput() NetworkConnectionMonitorOutput {
	return i.ToNetworkConnectionMonitorOutputWithContext(context.Background())
}

func (i *NetworkConnectionMonitor) ToNetworkConnectionMonitorOutputWithContext(ctx context.Context) NetworkConnectionMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConnectionMonitorOutput)
}

// NetworkConnectionMonitorArrayInput is an input type that accepts NetworkConnectionMonitorArray and NetworkConnectionMonitorArrayOutput values.
// You can construct a concrete instance of `NetworkConnectionMonitorArrayInput` via:
//
//	NetworkConnectionMonitorArray{ NetworkConnectionMonitorArgs{...} }
type NetworkConnectionMonitorArrayInput interface {
	pulumi.Input

	ToNetworkConnectionMonitorArrayOutput() NetworkConnectionMonitorArrayOutput
	ToNetworkConnectionMonitorArrayOutputWithContext(context.Context) NetworkConnectionMonitorArrayOutput
}

type NetworkConnectionMonitorArray []NetworkConnectionMonitorInput

func (NetworkConnectionMonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkConnectionMonitor)(nil)).Elem()
}

func (i NetworkConnectionMonitorArray) ToNetworkConnectionMonitorArrayOutput() NetworkConnectionMonitorArrayOutput {
	return i.ToNetworkConnectionMonitorArrayOutputWithContext(context.Background())
}

func (i NetworkConnectionMonitorArray) ToNetworkConnectionMonitorArrayOutputWithContext(ctx context.Context) NetworkConnectionMonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConnectionMonitorArrayOutput)
}

// NetworkConnectionMonitorMapInput is an input type that accepts NetworkConnectionMonitorMap and NetworkConnectionMonitorMapOutput values.
// You can construct a concrete instance of `NetworkConnectionMonitorMapInput` via:
//
//	NetworkConnectionMonitorMap{ "key": NetworkConnectionMonitorArgs{...} }
type NetworkConnectionMonitorMapInput interface {
	pulumi.Input

	ToNetworkConnectionMonitorMapOutput() NetworkConnectionMonitorMapOutput
	ToNetworkConnectionMonitorMapOutputWithContext(context.Context) NetworkConnectionMonitorMapOutput
}

type NetworkConnectionMonitorMap map[string]NetworkConnectionMonitorInput

func (NetworkConnectionMonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkConnectionMonitor)(nil)).Elem()
}

func (i NetworkConnectionMonitorMap) ToNetworkConnectionMonitorMapOutput() NetworkConnectionMonitorMapOutput {
	return i.ToNetworkConnectionMonitorMapOutputWithContext(context.Background())
}

func (i NetworkConnectionMonitorMap) ToNetworkConnectionMonitorMapOutputWithContext(ctx context.Context) NetworkConnectionMonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConnectionMonitorMapOutput)
}

type NetworkConnectionMonitorOutput struct{ *pulumi.OutputState }

func (NetworkConnectionMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConnectionMonitor)(nil)).Elem()
}

func (o NetworkConnectionMonitorOutput) ToNetworkConnectionMonitorOutput() NetworkConnectionMonitorOutput {
	return o
}

func (o NetworkConnectionMonitorOutput) ToNetworkConnectionMonitorOutputWithContext(ctx context.Context) NetworkConnectionMonitorOutput {
	return o
}

// A `endpoint` block as defined below.
func (o NetworkConnectionMonitorOutput) Endpoints() NetworkConnectionMonitorEndpointArrayOutput {
	return o.ApplyT(func(v *NetworkConnectionMonitor) NetworkConnectionMonitorEndpointArrayOutput { return v.Endpoints }).(NetworkConnectionMonitorEndpointArrayOutput)
}

// The Azure Region where the Network Connection Monitor should exist. Changing this forces a new resource to be created.
func (o NetworkConnectionMonitorOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkConnectionMonitor) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name which should be used for this Network Connection Monitor. Changing this forces a new resource to be created.
func (o NetworkConnectionMonitorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkConnectionMonitor) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Network Watcher. Changing this forces a new resource to be created.
func (o NetworkConnectionMonitorOutput) NetworkWatcherId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkConnectionMonitor) pulumi.StringOutput { return v.NetworkWatcherId }).(pulumi.StringOutput)
}

// The description of the Network Connection Monitor.
func (o NetworkConnectionMonitorOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkConnectionMonitor) pulumi.StringPtrOutput { return v.Notes }).(pulumi.StringPtrOutput)
}

// A list of IDs of the Log Analytics Workspace which will accept the output from the Network Connection Monitor.
func (o NetworkConnectionMonitorOutput) OutputWorkspaceResourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkConnectionMonitor) pulumi.StringArrayOutput { return v.OutputWorkspaceResourceIds }).(pulumi.StringArrayOutput)
}

// A mapping of tags which should be assigned to the Network Connection Monitor.
func (o NetworkConnectionMonitorOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkConnectionMonitor) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A `testConfiguration` block as defined below.
func (o NetworkConnectionMonitorOutput) TestConfigurations() NetworkConnectionMonitorTestConfigurationArrayOutput {
	return o.ApplyT(func(v *NetworkConnectionMonitor) NetworkConnectionMonitorTestConfigurationArrayOutput {
		return v.TestConfigurations
	}).(NetworkConnectionMonitorTestConfigurationArrayOutput)
}

// A `testGroup` block as defined below.
func (o NetworkConnectionMonitorOutput) TestGroups() NetworkConnectionMonitorTestGroupArrayOutput {
	return o.ApplyT(func(v *NetworkConnectionMonitor) NetworkConnectionMonitorTestGroupArrayOutput { return v.TestGroups }).(NetworkConnectionMonitorTestGroupArrayOutput)
}

type NetworkConnectionMonitorArrayOutput struct{ *pulumi.OutputState }

func (NetworkConnectionMonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkConnectionMonitor)(nil)).Elem()
}

func (o NetworkConnectionMonitorArrayOutput) ToNetworkConnectionMonitorArrayOutput() NetworkConnectionMonitorArrayOutput {
	return o
}

func (o NetworkConnectionMonitorArrayOutput) ToNetworkConnectionMonitorArrayOutputWithContext(ctx context.Context) NetworkConnectionMonitorArrayOutput {
	return o
}

func (o NetworkConnectionMonitorArrayOutput) Index(i pulumi.IntInput) NetworkConnectionMonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkConnectionMonitor {
		return vs[0].([]*NetworkConnectionMonitor)[vs[1].(int)]
	}).(NetworkConnectionMonitorOutput)
}

type NetworkConnectionMonitorMapOutput struct{ *pulumi.OutputState }

func (NetworkConnectionMonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkConnectionMonitor)(nil)).Elem()
}

func (o NetworkConnectionMonitorMapOutput) ToNetworkConnectionMonitorMapOutput() NetworkConnectionMonitorMapOutput {
	return o
}

func (o NetworkConnectionMonitorMapOutput) ToNetworkConnectionMonitorMapOutputWithContext(ctx context.Context) NetworkConnectionMonitorMapOutput {
	return o
}

func (o NetworkConnectionMonitorMapOutput) MapIndex(k pulumi.StringInput) NetworkConnectionMonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkConnectionMonitor {
		return vs[0].(map[string]*NetworkConnectionMonitor)[vs[1].(string)]
	}).(NetworkConnectionMonitorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkConnectionMonitorInput)(nil)).Elem(), &NetworkConnectionMonitor{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkConnectionMonitorArrayInput)(nil)).Elem(), NetworkConnectionMonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkConnectionMonitorMapInput)(nil)).Elem(), NetworkConnectionMonitorMap{})
	pulumi.RegisterOutputType(NetworkConnectionMonitorOutput{})
	pulumi.RegisterOutputType(NetworkConnectionMonitorArrayOutput{})
	pulumi.RegisterOutputType(NetworkConnectionMonitorMapOutput{})
}
