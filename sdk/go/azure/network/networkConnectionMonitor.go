// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Network Connection Monitor.
//
// > **NOTE:** Any Network Connection Monitor resource created with API versions 2019-06-01 or earlier (v1) are now incompatible with this provider, which now only supports v2.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/compute"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/operationalinsights"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleNetworkWatcher, err := network.NewNetworkWatcher(ctx, "exampleNetworkWatcher", &network.NetworkWatcherArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "exampleVirtualNetwork", &network.VirtualNetworkArgs{
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			exampleSubnet, err := network.NewSubnet(ctx, "exampleSubnet", &network.SubnetArgs{
//				ResourceGroupName:  exampleResourceGroup.Name,
//				VirtualNetworkName: exampleVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.0.2.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleNetworkInterface, err := network.NewNetworkInterface(ctx, "exampleNetworkInterface", &network.NetworkInterfaceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				IpConfigurations: network.NetworkInterfaceIpConfigurationArray{
//					&network.NetworkInterfaceIpConfigurationArgs{
//						Name:                       pulumi.String("testconfiguration1"),
//						SubnetId:                   exampleSubnet.ID(),
//						PrivateIpAddressAllocation: pulumi.String("Dynamic"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualMachine, err := compute.NewVirtualMachine(ctx, "exampleVirtualMachine", &compute.VirtualMachineArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				NetworkInterfaceIds: pulumi.StringArray{
//					exampleNetworkInterface.ID(),
//				},
//				VmSize: pulumi.String("Standard_D2s_v3"),
//				StorageImageReference: &compute.VirtualMachineStorageImageReferenceArgs{
//					Publisher: pulumi.String("Canonical"),
//					Offer:     pulumi.String("0001-com-ubuntu-server-jammy"),
//					Sku:       pulumi.String("22_04-lts"),
//					Version:   pulumi.String("latest"),
//				},
//				StorageOsDisk: &compute.VirtualMachineStorageOsDiskArgs{
//					Name:            pulumi.String("osdisk-example01"),
//					Caching:         pulumi.String("ReadWrite"),
//					CreateOption:    pulumi.String("FromImage"),
//					ManagedDiskType: pulumi.String("Standard_LRS"),
//				},
//				OsProfile: &compute.VirtualMachineOsProfileArgs{
//					ComputerName:  pulumi.String("hostnametest01"),
//					AdminUsername: pulumi.String("testadmin"),
//					AdminPassword: pulumi.String("Password1234!"),
//				},
//				OsProfileLinuxConfig: &compute.VirtualMachineOsProfileLinuxConfigArgs{
//					DisablePasswordAuthentication: pulumi.Bool(false),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleExtension, err := compute.NewExtension(ctx, "exampleExtension", &compute.ExtensionArgs{
//				VirtualMachineId:        exampleVirtualMachine.ID(),
//				Publisher:               pulumi.String("Microsoft.Azure.NetworkWatcher"),
//				Type:                    pulumi.String("NetworkWatcherAgentLinux"),
//				TypeHandlerVersion:      pulumi.String("1.4"),
//				AutoUpgradeMinorVersion: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAnalyticsWorkspace, err := operationalinsights.NewAnalyticsWorkspace(ctx, "exampleAnalyticsWorkspace", &operationalinsights.AnalyticsWorkspaceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku:               pulumi.String("PerGB2018"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = network.NewNetworkConnectionMonitor(ctx, "exampleNetworkConnectionMonitor", &network.NetworkConnectionMonitorArgs{
//				NetworkWatcherId: exampleNetworkWatcher.ID(),
//				Location:         exampleNetworkWatcher.Location,
//				Endpoints: network.NetworkConnectionMonitorEndpointArray{
//					&network.NetworkConnectionMonitorEndpointArgs{
//						Name:             pulumi.String("source"),
//						TargetResourceId: exampleVirtualMachine.ID(),
//						Filter: &network.NetworkConnectionMonitorEndpointFilterArgs{
//							Items: network.NetworkConnectionMonitorEndpointFilterItemArray{
//								&network.NetworkConnectionMonitorEndpointFilterItemArgs{
//									Address: exampleVirtualMachine.ID(),
//									Type:    pulumi.String("AgentAddress"),
//								},
//							},
//							Type: pulumi.String("Include"),
//						},
//					},
//					&network.NetworkConnectionMonitorEndpointArgs{
//						Name:    pulumi.String("destination"),
//						Address: pulumi.String("mycompany.io"),
//					},
//				},
//				TestConfigurations: network.NetworkConnectionMonitorTestConfigurationArray{
//					&network.NetworkConnectionMonitorTestConfigurationArgs{
//						Name:                   pulumi.String("tcpName"),
//						Protocol:               pulumi.String("Tcp"),
//						TestFrequencyInSeconds: pulumi.Int(60),
//						TcpConfiguration: &network.NetworkConnectionMonitorTestConfigurationTcpConfigurationArgs{
//							Port: pulumi.Int(80),
//						},
//					},
//				},
//				TestGroups: network.NetworkConnectionMonitorTestGroupArray{
//					&network.NetworkConnectionMonitorTestGroupArgs{
//						Name: pulumi.String("exampletg"),
//						DestinationEndpoints: pulumi.StringArray{
//							pulumi.String("destination"),
//						},
//						SourceEndpoints: pulumi.StringArray{
//							pulumi.String("source"),
//						},
//						TestConfigurationNames: pulumi.StringArray{
//							pulumi.String("tcpName"),
//						},
//					},
//				},
//				Notes: pulumi.String("examplenote"),
//				OutputWorkspaceResourceIds: pulumi.StringArray{
//					exampleAnalyticsWorkspace.ID(),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				exampleExtension,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Network Connection Monitors can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:network/networkConnectionMonitor:NetworkConnectionMonitor example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/networkWatchers/watcher1/connectionMonitors/connectionMonitor1
//
// ```
type NetworkConnectionMonitor struct {
	pulumi.CustomResourceState

	// A `endpoint` block as defined below.
	Endpoints NetworkConnectionMonitorEndpointArrayOutput `pulumi:"endpoints"`
	// The Azure Region where the Network Connection Monitor should exist. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name which should be used for this Network Connection Monitor. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Network Watcher. Changing this forces a new resource to be created.
	NetworkWatcherId pulumi.StringOutput `pulumi:"networkWatcherId"`
	// The description of the Network Connection Monitor.
	Notes pulumi.StringPtrOutput `pulumi:"notes"`
	// A list of IDs of the Log Analytics Workspace which will accept the output from the Network Connection Monitor.
	OutputWorkspaceResourceIds pulumi.StringArrayOutput `pulumi:"outputWorkspaceResourceIds"`
	// A mapping of tags which should be assigned to the Network Connection Monitor.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A `testConfiguration` block as defined below.
	TestConfigurations NetworkConnectionMonitorTestConfigurationArrayOutput `pulumi:"testConfigurations"`
	// A `testGroup` block as defined below.
	TestGroups NetworkConnectionMonitorTestGroupArrayOutput `pulumi:"testGroups"`
}

// NewNetworkConnectionMonitor registers a new resource with the given unique name, arguments, and options.
func NewNetworkConnectionMonitor(ctx *pulumi.Context,
	name string, args *NetworkConnectionMonitorArgs, opts ...pulumi.ResourceOption) (*NetworkConnectionMonitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Endpoints == nil {
		return nil, errors.New("invalid value for required argument 'Endpoints'")
	}
	if args.NetworkWatcherId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkWatcherId'")
	}
	if args.TestConfigurations == nil {
		return nil, errors.New("invalid value for required argument 'TestConfigurations'")
	}
	if args.TestGroups == nil {
		return nil, errors.New("invalid value for required argument 'TestGroups'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkConnectionMonitor
	err := ctx.RegisterResource("azure:network/networkConnectionMonitor:NetworkConnectionMonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkConnectionMonitor gets an existing NetworkConnectionMonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkConnectionMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkConnectionMonitorState, opts ...pulumi.ResourceOption) (*NetworkConnectionMonitor, error) {
	var resource NetworkConnectionMonitor
	err := ctx.ReadResource("azure:network/networkConnectionMonitor:NetworkConnectionMonitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkConnectionMonitor resources.
type networkConnectionMonitorState struct {
	// A `endpoint` block as defined below.
	Endpoints []NetworkConnectionMonitorEndpoint `pulumi:"endpoints"`
	// The Azure Region where the Network Connection Monitor should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Network Connection Monitor. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The ID of the Network Watcher. Changing this forces a new resource to be created.
	NetworkWatcherId *string `pulumi:"networkWatcherId"`
	// The description of the Network Connection Monitor.
	Notes *string `pulumi:"notes"`
	// A list of IDs of the Log Analytics Workspace which will accept the output from the Network Connection Monitor.
	OutputWorkspaceResourceIds []string `pulumi:"outputWorkspaceResourceIds"`
	// A mapping of tags which should be assigned to the Network Connection Monitor.
	Tags map[string]string `pulumi:"tags"`
	// A `testConfiguration` block as defined below.
	TestConfigurations []NetworkConnectionMonitorTestConfiguration `pulumi:"testConfigurations"`
	// A `testGroup` block as defined below.
	TestGroups []NetworkConnectionMonitorTestGroup `pulumi:"testGroups"`
}

type NetworkConnectionMonitorState struct {
	// A `endpoint` block as defined below.
	Endpoints NetworkConnectionMonitorEndpointArrayInput
	// The Azure Region where the Network Connection Monitor should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Network Connection Monitor. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The ID of the Network Watcher. Changing this forces a new resource to be created.
	NetworkWatcherId pulumi.StringPtrInput
	// The description of the Network Connection Monitor.
	Notes pulumi.StringPtrInput
	// A list of IDs of the Log Analytics Workspace which will accept the output from the Network Connection Monitor.
	OutputWorkspaceResourceIds pulumi.StringArrayInput
	// A mapping of tags which should be assigned to the Network Connection Monitor.
	Tags pulumi.StringMapInput
	// A `testConfiguration` block as defined below.
	TestConfigurations NetworkConnectionMonitorTestConfigurationArrayInput
	// A `testGroup` block as defined below.
	TestGroups NetworkConnectionMonitorTestGroupArrayInput
}

func (NetworkConnectionMonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkConnectionMonitorState)(nil)).Elem()
}

type networkConnectionMonitorArgs struct {
	// A `endpoint` block as defined below.
	Endpoints []NetworkConnectionMonitorEndpoint `pulumi:"endpoints"`
	// The Azure Region where the Network Connection Monitor should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Network Connection Monitor. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The ID of the Network Watcher. Changing this forces a new resource to be created.
	NetworkWatcherId string `pulumi:"networkWatcherId"`
	// The description of the Network Connection Monitor.
	Notes *string `pulumi:"notes"`
	// A list of IDs of the Log Analytics Workspace which will accept the output from the Network Connection Monitor.
	OutputWorkspaceResourceIds []string `pulumi:"outputWorkspaceResourceIds"`
	// A mapping of tags which should be assigned to the Network Connection Monitor.
	Tags map[string]string `pulumi:"tags"`
	// A `testConfiguration` block as defined below.
	TestConfigurations []NetworkConnectionMonitorTestConfiguration `pulumi:"testConfigurations"`
	// A `testGroup` block as defined below.
	TestGroups []NetworkConnectionMonitorTestGroup `pulumi:"testGroups"`
}

// The set of arguments for constructing a NetworkConnectionMonitor resource.
type NetworkConnectionMonitorArgs struct {
	// A `endpoint` block as defined below.
	Endpoints NetworkConnectionMonitorEndpointArrayInput
	// The Azure Region where the Network Connection Monitor should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Network Connection Monitor. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The ID of the Network Watcher. Changing this forces a new resource to be created.
	NetworkWatcherId pulumi.StringInput
	// The description of the Network Connection Monitor.
	Notes pulumi.StringPtrInput
	// A list of IDs of the Log Analytics Workspace which will accept the output from the Network Connection Monitor.
	OutputWorkspaceResourceIds pulumi.StringArrayInput
	// A mapping of tags which should be assigned to the Network Connection Monitor.
	Tags pulumi.StringMapInput
	// A `testConfiguration` block as defined below.
	TestConfigurations NetworkConnectionMonitorTestConfigurationArrayInput
	// A `testGroup` block as defined below.
	TestGroups NetworkConnectionMonitorTestGroupArrayInput
}

func (NetworkConnectionMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkConnectionMonitorArgs)(nil)).Elem()
}

type NetworkConnectionMonitorInput interface {
	pulumi.Input

	ToNetworkConnectionMonitorOutput() NetworkConnectionMonitorOutput
	ToNetworkConnectionMonitorOutputWithContext(ctx context.Context) NetworkConnectionMonitorOutput
}

func (*NetworkConnectionMonitor) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConnectionMonitor)(nil)).Elem()
}

func (i *NetworkConnectionMonitor) ToNetworkConnectionMonitorOutput() NetworkConnectionMonitorOutput {
	return i.ToNetworkConnectionMonitorOutputWithContext(context.Background())
}

func (i *NetworkConnectionMonitor) ToNetworkConnectionMonitorOutputWithContext(ctx context.Context) NetworkConnectionMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConnectionMonitorOutput)
}

// NetworkConnectionMonitorArrayInput is an input type that accepts NetworkConnectionMonitorArray and NetworkConnectionMonitorArrayOutput values.
// You can construct a concrete instance of `NetworkConnectionMonitorArrayInput` via:
//
//	NetworkConnectionMonitorArray{ NetworkConnectionMonitorArgs{...} }
type NetworkConnectionMonitorArrayInput interface {
	pulumi.Input

	ToNetworkConnectionMonitorArrayOutput() NetworkConnectionMonitorArrayOutput
	ToNetworkConnectionMonitorArrayOutputWithContext(context.Context) NetworkConnectionMonitorArrayOutput
}

type NetworkConnectionMonitorArray []NetworkConnectionMonitorInput

func (NetworkConnectionMonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkConnectionMonitor)(nil)).Elem()
}

func (i NetworkConnectionMonitorArray) ToNetworkConnectionMonitorArrayOutput() NetworkConnectionMonitorArrayOutput {
	return i.ToNetworkConnectionMonitorArrayOutputWithContext(context.Background())
}

func (i NetworkConnectionMonitorArray) ToNetworkConnectionMonitorArrayOutputWithContext(ctx context.Context) NetworkConnectionMonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConnectionMonitorArrayOutput)
}

// NetworkConnectionMonitorMapInput is an input type that accepts NetworkConnectionMonitorMap and NetworkConnectionMonitorMapOutput values.
// You can construct a concrete instance of `NetworkConnectionMonitorMapInput` via:
//
//	NetworkConnectionMonitorMap{ "key": NetworkConnectionMonitorArgs{...} }
type NetworkConnectionMonitorMapInput interface {
	pulumi.Input

	ToNetworkConnectionMonitorMapOutput() NetworkConnectionMonitorMapOutput
	ToNetworkConnectionMonitorMapOutputWithContext(context.Context) NetworkConnectionMonitorMapOutput
}

type NetworkConnectionMonitorMap map[string]NetworkConnectionMonitorInput

func (NetworkConnectionMonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkConnectionMonitor)(nil)).Elem()
}

func (i NetworkConnectionMonitorMap) ToNetworkConnectionMonitorMapOutput() NetworkConnectionMonitorMapOutput {
	return i.ToNetworkConnectionMonitorMapOutputWithContext(context.Background())
}

func (i NetworkConnectionMonitorMap) ToNetworkConnectionMonitorMapOutputWithContext(ctx context.Context) NetworkConnectionMonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConnectionMonitorMapOutput)
}

type NetworkConnectionMonitorOutput struct{ *pulumi.OutputState }

func (NetworkConnectionMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConnectionMonitor)(nil)).Elem()
}

func (o NetworkConnectionMonitorOutput) ToNetworkConnectionMonitorOutput() NetworkConnectionMonitorOutput {
	return o
}

func (o NetworkConnectionMonitorOutput) ToNetworkConnectionMonitorOutputWithContext(ctx context.Context) NetworkConnectionMonitorOutput {
	return o
}

// A `endpoint` block as defined below.
func (o NetworkConnectionMonitorOutput) Endpoints() NetworkConnectionMonitorEndpointArrayOutput {
	return o.ApplyT(func(v *NetworkConnectionMonitor) NetworkConnectionMonitorEndpointArrayOutput { return v.Endpoints }).(NetworkConnectionMonitorEndpointArrayOutput)
}

// The Azure Region where the Network Connection Monitor should exist. Changing this forces a new resource to be created.
func (o NetworkConnectionMonitorOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkConnectionMonitor) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name which should be used for this Network Connection Monitor. Changing this forces a new resource to be created.
func (o NetworkConnectionMonitorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkConnectionMonitor) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Network Watcher. Changing this forces a new resource to be created.
func (o NetworkConnectionMonitorOutput) NetworkWatcherId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkConnectionMonitor) pulumi.StringOutput { return v.NetworkWatcherId }).(pulumi.StringOutput)
}

// The description of the Network Connection Monitor.
func (o NetworkConnectionMonitorOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkConnectionMonitor) pulumi.StringPtrOutput { return v.Notes }).(pulumi.StringPtrOutput)
}

// A list of IDs of the Log Analytics Workspace which will accept the output from the Network Connection Monitor.
func (o NetworkConnectionMonitorOutput) OutputWorkspaceResourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkConnectionMonitor) pulumi.StringArrayOutput { return v.OutputWorkspaceResourceIds }).(pulumi.StringArrayOutput)
}

// A mapping of tags which should be assigned to the Network Connection Monitor.
func (o NetworkConnectionMonitorOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkConnectionMonitor) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A `testConfiguration` block as defined below.
func (o NetworkConnectionMonitorOutput) TestConfigurations() NetworkConnectionMonitorTestConfigurationArrayOutput {
	return o.ApplyT(func(v *NetworkConnectionMonitor) NetworkConnectionMonitorTestConfigurationArrayOutput {
		return v.TestConfigurations
	}).(NetworkConnectionMonitorTestConfigurationArrayOutput)
}

// A `testGroup` block as defined below.
func (o NetworkConnectionMonitorOutput) TestGroups() NetworkConnectionMonitorTestGroupArrayOutput {
	return o.ApplyT(func(v *NetworkConnectionMonitor) NetworkConnectionMonitorTestGroupArrayOutput { return v.TestGroups }).(NetworkConnectionMonitorTestGroupArrayOutput)
}

type NetworkConnectionMonitorArrayOutput struct{ *pulumi.OutputState }

func (NetworkConnectionMonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkConnectionMonitor)(nil)).Elem()
}

func (o NetworkConnectionMonitorArrayOutput) ToNetworkConnectionMonitorArrayOutput() NetworkConnectionMonitorArrayOutput {
	return o
}

func (o NetworkConnectionMonitorArrayOutput) ToNetworkConnectionMonitorArrayOutputWithContext(ctx context.Context) NetworkConnectionMonitorArrayOutput {
	return o
}

func (o NetworkConnectionMonitorArrayOutput) Index(i pulumi.IntInput) NetworkConnectionMonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkConnectionMonitor {
		return vs[0].([]*NetworkConnectionMonitor)[vs[1].(int)]
	}).(NetworkConnectionMonitorOutput)
}

type NetworkConnectionMonitorMapOutput struct{ *pulumi.OutputState }

func (NetworkConnectionMonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkConnectionMonitor)(nil)).Elem()
}

func (o NetworkConnectionMonitorMapOutput) ToNetworkConnectionMonitorMapOutput() NetworkConnectionMonitorMapOutput {
	return o
}

func (o NetworkConnectionMonitorMapOutput) ToNetworkConnectionMonitorMapOutputWithContext(ctx context.Context) NetworkConnectionMonitorMapOutput {
	return o
}

func (o NetworkConnectionMonitorMapOutput) MapIndex(k pulumi.StringInput) NetworkConnectionMonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkConnectionMonitor {
		return vs[0].(map[string]*NetworkConnectionMonitor)[vs[1].(string)]
	}).(NetworkConnectionMonitorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkConnectionMonitorInput)(nil)).Elem(), &NetworkConnectionMonitor{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkConnectionMonitorArrayInput)(nil)).Elem(), NetworkConnectionMonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkConnectionMonitorMapInput)(nil)).Elem(), NetworkConnectionMonitorMap{})
	pulumi.RegisterOutputType(NetworkConnectionMonitorOutput{})
	pulumi.RegisterOutputType(NetworkConnectionMonitorArrayOutput{})
	pulumi.RegisterOutputType(NetworkConnectionMonitorMapOutput{})
}
