// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an IP group that contains a list of CIDRs and/or IP addresses.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = network.NewIPGroup(ctx, "exampleIPGroup", &network.IPGroupArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Cidrs: pulumi.StringArray{
//					pulumi.String("192.168.0.1"),
//					pulumi.String("172.16.240.0/20"),
//					pulumi.String("10.48.0.0/12"),
//				},
//				Tags: pulumi.StringMap{
//					"environment": pulumi.String("Production"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// IP Groups can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:network/iPGroup:IPGroup ipgroup1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/ipGroups/myIpGroup
//
// ```
type IPGroup struct {
	pulumi.CustomResourceState

	Cidrs pulumi.StringArrayOutput `pulumi:"cidrs"`
	// A list of ID of Firewall.
	FirewallIds pulumi.StringArrayOutput `pulumi:"firewallIds"`
	// A list of ID of Firewall Policy`.
	FirewallPolicyIds pulumi.StringArrayOutput `pulumi:"firewallPolicyIds"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name of the IP group. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the resource group in which to create the IP group. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewIPGroup registers a new resource with the given unique name, arguments, and options.
func NewIPGroup(ctx *pulumi.Context,
	name string, args *IPGroupArgs, opts ...pulumi.ResourceOption) (*IPGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IPGroup
	err := ctx.RegisterResource("azure:network/iPGroup:IPGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIPGroup gets an existing IPGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIPGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IPGroupState, opts ...pulumi.ResourceOption) (*IPGroup, error) {
	var resource IPGroup
	err := ctx.ReadResource("azure:network/iPGroup:IPGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IPGroup resources.
type ipgroupState struct {
	Cidrs []string `pulumi:"cidrs"`
	// A list of ID of Firewall.
	FirewallIds []string `pulumi:"firewallIds"`
	// A list of ID of Firewall Policy`.
	FirewallPolicyIds []string `pulumi:"firewallPolicyIds"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the IP group. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to create the IP group. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

type IPGroupState struct {
	Cidrs pulumi.StringArrayInput
	// A list of ID of Firewall.
	FirewallIds pulumi.StringArrayInput
	// A list of ID of Firewall Policy`.
	FirewallPolicyIds pulumi.StringArrayInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the IP group. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to create the IP group. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
}

func (IPGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipgroupState)(nil)).Elem()
}

type ipgroupArgs struct {
	Cidrs []string `pulumi:"cidrs"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the IP group. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to create the IP group. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a IPGroup resource.
type IPGroupArgs struct {
	Cidrs pulumi.StringArrayInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the IP group. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to create the IP group. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
}

func (IPGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipgroupArgs)(nil)).Elem()
}

type IPGroupInput interface {
	pulumi.Input

	ToIPGroupOutput() IPGroupOutput
	ToIPGroupOutputWithContext(ctx context.Context) IPGroupOutput
}

func (*IPGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**IPGroup)(nil)).Elem()
}

func (i *IPGroup) ToIPGroupOutput() IPGroupOutput {
	return i.ToIPGroupOutputWithContext(context.Background())
}

func (i *IPGroup) ToIPGroupOutputWithContext(ctx context.Context) IPGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPGroupOutput)
}

func (i *IPGroup) ToOutput(ctx context.Context) pulumix.Output[*IPGroup] {
	return pulumix.Output[*IPGroup]{
		OutputState: i.ToIPGroupOutputWithContext(ctx).OutputState,
	}
}

// IPGroupArrayInput is an input type that accepts IPGroupArray and IPGroupArrayOutput values.
// You can construct a concrete instance of `IPGroupArrayInput` via:
//
//	IPGroupArray{ IPGroupArgs{...} }
type IPGroupArrayInput interface {
	pulumi.Input

	ToIPGroupArrayOutput() IPGroupArrayOutput
	ToIPGroupArrayOutputWithContext(context.Context) IPGroupArrayOutput
}

type IPGroupArray []IPGroupInput

func (IPGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPGroup)(nil)).Elem()
}

func (i IPGroupArray) ToIPGroupArrayOutput() IPGroupArrayOutput {
	return i.ToIPGroupArrayOutputWithContext(context.Background())
}

func (i IPGroupArray) ToIPGroupArrayOutputWithContext(ctx context.Context) IPGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPGroupArrayOutput)
}

func (i IPGroupArray) ToOutput(ctx context.Context) pulumix.Output[[]*IPGroup] {
	return pulumix.Output[[]*IPGroup]{
		OutputState: i.ToIPGroupArrayOutputWithContext(ctx).OutputState,
	}
}

// IPGroupMapInput is an input type that accepts IPGroupMap and IPGroupMapOutput values.
// You can construct a concrete instance of `IPGroupMapInput` via:
//
//	IPGroupMap{ "key": IPGroupArgs{...} }
type IPGroupMapInput interface {
	pulumi.Input

	ToIPGroupMapOutput() IPGroupMapOutput
	ToIPGroupMapOutputWithContext(context.Context) IPGroupMapOutput
}

type IPGroupMap map[string]IPGroupInput

func (IPGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPGroup)(nil)).Elem()
}

func (i IPGroupMap) ToIPGroupMapOutput() IPGroupMapOutput {
	return i.ToIPGroupMapOutputWithContext(context.Background())
}

func (i IPGroupMap) ToIPGroupMapOutputWithContext(ctx context.Context) IPGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPGroupMapOutput)
}

func (i IPGroupMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*IPGroup] {
	return pulumix.Output[map[string]*IPGroup]{
		OutputState: i.ToIPGroupMapOutputWithContext(ctx).OutputState,
	}
}

type IPGroupOutput struct{ *pulumi.OutputState }

func (IPGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPGroup)(nil)).Elem()
}

func (o IPGroupOutput) ToIPGroupOutput() IPGroupOutput {
	return o
}

func (o IPGroupOutput) ToIPGroupOutputWithContext(ctx context.Context) IPGroupOutput {
	return o
}

func (o IPGroupOutput) ToOutput(ctx context.Context) pulumix.Output[*IPGroup] {
	return pulumix.Output[*IPGroup]{
		OutputState: o.OutputState,
	}
}

func (o IPGroupOutput) Cidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IPGroup) pulumi.StringArrayOutput { return v.Cidrs }).(pulumi.StringArrayOutput)
}

// A list of ID of Firewall.
func (o IPGroupOutput) FirewallIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IPGroup) pulumi.StringArrayOutput { return v.FirewallIds }).(pulumi.StringArrayOutput)
}

// A list of ID of Firewall Policy`.
func (o IPGroupOutput) FirewallPolicyIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IPGroup) pulumi.StringArrayOutput { return v.FirewallPolicyIds }).(pulumi.StringArrayOutput)
}

// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
func (o IPGroupOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *IPGroup) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name of the IP group. Changing this forces a new resource to be created.
func (o IPGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IPGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the resource group in which to create the IP group. Changing this forces a new resource to be created.
func (o IPGroupOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *IPGroup) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o IPGroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *IPGroup) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type IPGroupArrayOutput struct{ *pulumi.OutputState }

func (IPGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPGroup)(nil)).Elem()
}

func (o IPGroupArrayOutput) ToIPGroupArrayOutput() IPGroupArrayOutput {
	return o
}

func (o IPGroupArrayOutput) ToIPGroupArrayOutputWithContext(ctx context.Context) IPGroupArrayOutput {
	return o
}

func (o IPGroupArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*IPGroup] {
	return pulumix.Output[[]*IPGroup]{
		OutputState: o.OutputState,
	}
}

func (o IPGroupArrayOutput) Index(i pulumi.IntInput) IPGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IPGroup {
		return vs[0].([]*IPGroup)[vs[1].(int)]
	}).(IPGroupOutput)
}

type IPGroupMapOutput struct{ *pulumi.OutputState }

func (IPGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPGroup)(nil)).Elem()
}

func (o IPGroupMapOutput) ToIPGroupMapOutput() IPGroupMapOutput {
	return o
}

func (o IPGroupMapOutput) ToIPGroupMapOutputWithContext(ctx context.Context) IPGroupMapOutput {
	return o
}

func (o IPGroupMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*IPGroup] {
	return pulumix.Output[map[string]*IPGroup]{
		OutputState: o.OutputState,
	}
}

func (o IPGroupMapOutput) MapIndex(k pulumi.StringInput) IPGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IPGroup {
		return vs[0].(map[string]*IPGroup)[vs[1].(string)]
	}).(IPGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IPGroupInput)(nil)).Elem(), &IPGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPGroupArrayInput)(nil)).Elem(), IPGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPGroupMapInput)(nil)).Elem(), IPGroupMap{})
	pulumi.RegisterOutputType(IPGroupOutput{})
	pulumi.RegisterOutputType(IPGroupArrayOutput{})
	pulumi.RegisterOutputType(IPGroupMapOutput{})
}
