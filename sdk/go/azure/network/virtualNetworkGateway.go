// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a Virtual Network Gateway to establish secure, cross-premises connectivity.
//
// > **Note:** Please be aware that provisioning a Virtual Network Gateway takes a long time (between 30 minutes and 1 hour)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "exampleVirtualNetwork", &network.VirtualNetworkArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleSubnet, err := network.NewSubnet(ctx, "exampleSubnet", &network.SubnetArgs{
//				ResourceGroupName:  exampleResourceGroup.Name,
//				VirtualNetworkName: exampleVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.0.1.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			examplePublicIp, err := network.NewPublicIp(ctx, "examplePublicIp", &network.PublicIpArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				AllocationMethod:  pulumi.String("Dynamic"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = network.NewVirtualNetworkGateway(ctx, "exampleVirtualNetworkGateway", &network.VirtualNetworkGatewayArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Type:              pulumi.String("Vpn"),
//				VpnType:           pulumi.String("RouteBased"),
//				ActiveActive:      pulumi.Bool(false),
//				EnableBgp:         pulumi.Bool(false),
//				Sku:               pulumi.String("Basic"),
//				IpConfigurations: network.VirtualNetworkGatewayIpConfigurationArray{
//					&network.VirtualNetworkGatewayIpConfigurationArgs{
//						Name:                       pulumi.String("vnetGatewayConfig"),
//						PublicIpAddressId:          examplePublicIp.ID(),
//						PrivateIpAddressAllocation: pulumi.String("Dynamic"),
//						SubnetId:                   exampleSubnet.ID(),
//					},
//				},
//				VpnClientConfiguration: &network.VirtualNetworkGatewayVpnClientConfigurationArgs{
//					AddressSpaces: pulumi.StringArray{
//						pulumi.String("10.2.0.0/24"),
//					},
//					RootCertificates: network.VirtualNetworkGatewayVpnClientConfigurationRootCertificateArray{
//						&network.VirtualNetworkGatewayVpnClientConfigurationRootCertificateArgs{
//							Name: pulumi.String("DigiCert-Federated-ID-Root-CA"),
//							PublicCertData: pulumi.String(`MIIDuzCCAqOgAwIBAgIQCHTZWCM+IlfFIRXIvyKSrjANBgkqhkiG9w0BAQsFADBn
//
// MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3
// d3cuZGlnaWNlcnQuY29tMSYwJAYDVQQDEx1EaWdpQ2VydCBGZWRlcmF0ZWQgSUQg
// Um9vdCBDQTAeFw0xMzAxMTUxMjAwMDBaFw0zMzAxMTUxMjAwMDBaMGcxCzAJBgNV
// BAYTAlVTMRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdp
// Y2VydC5jb20xJjAkBgNVBAMTHURpZ2lDZXJ0IEZlZGVyYXRlZCBJRCBSb290IENB
// MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvAEB4pcCqnNNOWE6Ur5j
// QPUH+1y1F9KdHTRSza6k5iDlXq1kGS1qAkuKtw9JsiNRrjltmFnzMZRBbX8Tlfl8
// zAhBmb6dDduDGED01kBsTkgywYPxXVTKec0WxYEEF0oMn4wSYNl0lt2eJAKHXjNf
// GTwiibdP8CUR2ghSM2sUTI8Nt1Omfc4SMHhGhYD64uJMbX98THQ/4LMGuYegou+d
// GTiahfHtjn7AboSEknwAMJHCh5RlYZZ6B1O4QbKJ+34Q0eKgnI3X6Vc9u0zf6DH8
// Dk+4zQDYRRTqTnVO3VT8jzqDlCRuNtq6YvryOWN74/dq8LQhUnXHvFyrsdMaE1X2
// DwIDAQABo2MwYTAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBhjAdBgNV
// HQ4EFgQUGRdkFnbGt1EWjKwbUne+5OaZvRYwHwYDVR0jBBgwFoAUGRdkFnbGt1EW
// jKwbUne+5OaZvRYwDQYJKoZIhvcNAQELBQADggEBAHcqsHkrjpESqfuVTRiptJfP
// 9JbdtWqRTmOf6uJi2c8YVqI6XlKXsD8C1dUUaaHKLUJzvKiazibVuBwMIT84AyqR
// QELn3e0BtgEymEygMU569b01ZPxoFSnNXc7qDZBDef8WfqAV/sxkTi8L9BkmFYfL
// uGLOhRJOFprPdoDIUBB+tmCl3oDcBy3vnUeOEioz8zAkprcb3GHwHAK+vHmmfgcn
// WsfMLH4JCLa/tRYL+Rw/N3ybCkDp00s0WUZ+AoDywSl0Q/ZEnNY0MsFiw6LyIdbq
// M/s/1JRtO3bDSzD9TazRVzn2oBqzSa8VgIo5C1nOnoAKJTlsClJKvIhnRlaLQqk=
// `),
//
//						},
//					},
//					RevokedCertificates: network.VirtualNetworkGatewayVpnClientConfigurationRevokedCertificateArray{
//						&network.VirtualNetworkGatewayVpnClientConfigurationRevokedCertificateArgs{
//							Name:       pulumi.String("Verizon-Global-Root-CA"),
//							Thumbprint: pulumi.String("912198EEF23DCAC40939312FEE97DD560BAE49B1"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Virtual Network Gateways can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:network/virtualNetworkGateway:VirtualNetworkGateway exampleGateway /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup1/providers/Microsoft.Network/virtualNetworkGateways/myGateway1
//
// ```
type VirtualNetworkGateway struct {
	pulumi.CustomResourceState

	// If `true`, an active-active Virtual Network Gateway will be created. An active-active gateway requires a `HighPerformance` or an `UltraPerformance` SKU. If `false`, an active-standby gateway will be created. Defaults to `false`.
	ActiveActive pulumi.BoolOutput `pulumi:"activeActive"`
	// A `bgpSettings` block which is documented below. In this block the BGP specific settings can be defined.
	BgpSettings VirtualNetworkGatewayBgpSettingsOutput `pulumi:"bgpSettings"`
	// A `customRoute` block as defined below. Specifies a custom routes address space for a virtual network gateway and a VpnClient.
	CustomRoute VirtualNetworkGatewayCustomRoutePtrOutput `pulumi:"customRoute"`
	// The ID of the local network gateway through which outbound Internet traffic from the virtual network in which the gateway is created will be routed (*forced tunnelling*). Refer to the [Azure documentation on forced tunnelling](https://docs.microsoft.com/azure/vpn-gateway/vpn-gateway-forced-tunneling-rm). If not specified, forced tunnelling is disabled.
	DefaultLocalNetworkGatewayId pulumi.StringPtrOutput `pulumi:"defaultLocalNetworkGatewayId"`
	// Specifies the Edge Zone within the Azure Region where this Virtual Network Gateway should exist. Changing this forces a new Virtual Network Gateway to be created.
	EdgeZone pulumi.StringPtrOutput `pulumi:"edgeZone"`
	// If `true`, BGP (Border Gateway Protocol) will be enabled for this Virtual Network Gateway. Defaults to `false`.
	EnableBgp pulumi.BoolOutput `pulumi:"enableBgp"`
	// The Generation of the Virtual Network gateway. Possible values include `Generation1`, `Generation2` or `None`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** The available values depend on the `type` and `sku` arguments - where `Generation2` is only value for a `sku` larger than `VpnGw2` or `VpnGw2AZ`.
	Generation pulumi.StringOutput `pulumi:"generation"`
	// One or more (up to 3) `ipConfiguration` blocks documented below.
	// An active-standby gateway requires exactly one `ipConfiguration` block,
	// an active-active gateway requires exactly two `ipConfiguration` blocks whereas
	// an active-active zone redundant gateway with P2S configuration requires exactly three `ipConfiguration` blocks.
	IpConfigurations VirtualNetworkGatewayIpConfigurationArrayOutput `pulumi:"ipConfigurations"`
	// The location/region where the Virtual Network Gateway is located. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the Virtual Network Gateway. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Should private IP be enabled on this gateway for connections? Changing this forces a new resource to be created.
	PrivateIpAddressEnabled pulumi.BoolPtrOutput `pulumi:"privateIpAddressEnabled"`
	// The name of the resource group in which to create the Virtual Network Gateway. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Configuration of the size and capacity of the virtual network gateway. Valid options are `Basic`, `Standard`, `HighPerformance`, `UltraPerformance`, `ErGw1AZ`, `ErGw2AZ`, `ErGw3AZ`, `VpnGw1`, `VpnGw2`, `VpnGw3`, `VpnGw4`,`VpnGw5`, `VpnGw1AZ`, `VpnGw2AZ`, `VpnGw3AZ`,`VpnGw4AZ` and `VpnGw5AZ` and depend on the `type`, `vpnType` and `generation` arguments. A `PolicyBased` gateway only supports the `Basic` SKU. Further, the `UltraPerformance` SKU is only supported by an `ExpressRoute` gateway.
	//
	// > **NOTE:** To build a UltraPerformance ExpressRoute Virtual Network gateway, the associated Public IP needs to be SKU "Basic" not "Standard"
	//
	// > **NOTE:** Not all SKUs (e.g. `ErGw1AZ`) are available in all regions. If you see `StatusCode=400 -- Original Error: Code="InvalidGatewaySkuSpecifiedForGatewayDeploymentType"` please try another region.
	Sku pulumi.StringOutput `pulumi:"sku"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the Virtual Network Gateway. Valid options are `Vpn` or `ExpressRoute`. Changing the type forces a new resource to be created.
	Type pulumi.StringOutput `pulumi:"type"`
	// A `vpnClientConfiguration` block which is documented below. In this block the Virtual Network Gateway can be configured to accept IPSec point-to-site connections.
	VpnClientConfiguration VirtualNetworkGatewayVpnClientConfigurationPtrOutput `pulumi:"vpnClientConfiguration"`
	// The routing type of the Virtual Network Gateway. Valid options are `RouteBased` or `PolicyBased`. Defaults to `RouteBased`. Changing this forces a new resource to be created.
	VpnType pulumi.StringPtrOutput `pulumi:"vpnType"`
}

// NewVirtualNetworkGateway registers a new resource with the given unique name, arguments, and options.
func NewVirtualNetworkGateway(ctx *pulumi.Context,
	name string, args *VirtualNetworkGatewayArgs, opts ...pulumi.ResourceOption) (*VirtualNetworkGateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpConfigurations == nil {
		return nil, errors.New("invalid value for required argument 'IpConfigurations'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Sku == nil {
		return nil, errors.New("invalid value for required argument 'Sku'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VirtualNetworkGateway
	err := ctx.RegisterResource("azure:network/virtualNetworkGateway:VirtualNetworkGateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualNetworkGateway gets an existing VirtualNetworkGateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualNetworkGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualNetworkGatewayState, opts ...pulumi.ResourceOption) (*VirtualNetworkGateway, error) {
	var resource VirtualNetworkGateway
	err := ctx.ReadResource("azure:network/virtualNetworkGateway:VirtualNetworkGateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualNetworkGateway resources.
type virtualNetworkGatewayState struct {
	// If `true`, an active-active Virtual Network Gateway will be created. An active-active gateway requires a `HighPerformance` or an `UltraPerformance` SKU. If `false`, an active-standby gateway will be created. Defaults to `false`.
	ActiveActive *bool `pulumi:"activeActive"`
	// A `bgpSettings` block which is documented below. In this block the BGP specific settings can be defined.
	BgpSettings *VirtualNetworkGatewayBgpSettings `pulumi:"bgpSettings"`
	// A `customRoute` block as defined below. Specifies a custom routes address space for a virtual network gateway and a VpnClient.
	CustomRoute *VirtualNetworkGatewayCustomRoute `pulumi:"customRoute"`
	// The ID of the local network gateway through which outbound Internet traffic from the virtual network in which the gateway is created will be routed (*forced tunnelling*). Refer to the [Azure documentation on forced tunnelling](https://docs.microsoft.com/azure/vpn-gateway/vpn-gateway-forced-tunneling-rm). If not specified, forced tunnelling is disabled.
	DefaultLocalNetworkGatewayId *string `pulumi:"defaultLocalNetworkGatewayId"`
	// Specifies the Edge Zone within the Azure Region where this Virtual Network Gateway should exist. Changing this forces a new Virtual Network Gateway to be created.
	EdgeZone *string `pulumi:"edgeZone"`
	// If `true`, BGP (Border Gateway Protocol) will be enabled for this Virtual Network Gateway. Defaults to `false`.
	EnableBgp *bool `pulumi:"enableBgp"`
	// The Generation of the Virtual Network gateway. Possible values include `Generation1`, `Generation2` or `None`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** The available values depend on the `type` and `sku` arguments - where `Generation2` is only value for a `sku` larger than `VpnGw2` or `VpnGw2AZ`.
	Generation *string `pulumi:"generation"`
	// One or more (up to 3) `ipConfiguration` blocks documented below.
	// An active-standby gateway requires exactly one `ipConfiguration` block,
	// an active-active gateway requires exactly two `ipConfiguration` blocks whereas
	// an active-active zone redundant gateway with P2S configuration requires exactly three `ipConfiguration` blocks.
	IpConfigurations []VirtualNetworkGatewayIpConfiguration `pulumi:"ipConfigurations"`
	// The location/region where the Virtual Network Gateway is located. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name of the Virtual Network Gateway. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Should private IP be enabled on this gateway for connections? Changing this forces a new resource to be created.
	PrivateIpAddressEnabled *bool `pulumi:"privateIpAddressEnabled"`
	// The name of the resource group in which to create the Virtual Network Gateway. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Configuration of the size and capacity of the virtual network gateway. Valid options are `Basic`, `Standard`, `HighPerformance`, `UltraPerformance`, `ErGw1AZ`, `ErGw2AZ`, `ErGw3AZ`, `VpnGw1`, `VpnGw2`, `VpnGw3`, `VpnGw4`,`VpnGw5`, `VpnGw1AZ`, `VpnGw2AZ`, `VpnGw3AZ`,`VpnGw4AZ` and `VpnGw5AZ` and depend on the `type`, `vpnType` and `generation` arguments. A `PolicyBased` gateway only supports the `Basic` SKU. Further, the `UltraPerformance` SKU is only supported by an `ExpressRoute` gateway.
	//
	// > **NOTE:** To build a UltraPerformance ExpressRoute Virtual Network gateway, the associated Public IP needs to be SKU "Basic" not "Standard"
	//
	// > **NOTE:** Not all SKUs (e.g. `ErGw1AZ`) are available in all regions. If you see `StatusCode=400 -- Original Error: Code="InvalidGatewaySkuSpecifiedForGatewayDeploymentType"` please try another region.
	Sku *string `pulumi:"sku"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The type of the Virtual Network Gateway. Valid options are `Vpn` or `ExpressRoute`. Changing the type forces a new resource to be created.
	Type *string `pulumi:"type"`
	// A `vpnClientConfiguration` block which is documented below. In this block the Virtual Network Gateway can be configured to accept IPSec point-to-site connections.
	VpnClientConfiguration *VirtualNetworkGatewayVpnClientConfiguration `pulumi:"vpnClientConfiguration"`
	// The routing type of the Virtual Network Gateway. Valid options are `RouteBased` or `PolicyBased`. Defaults to `RouteBased`. Changing this forces a new resource to be created.
	VpnType *string `pulumi:"vpnType"`
}

type VirtualNetworkGatewayState struct {
	// If `true`, an active-active Virtual Network Gateway will be created. An active-active gateway requires a `HighPerformance` or an `UltraPerformance` SKU. If `false`, an active-standby gateway will be created. Defaults to `false`.
	ActiveActive pulumi.BoolPtrInput
	// A `bgpSettings` block which is documented below. In this block the BGP specific settings can be defined.
	BgpSettings VirtualNetworkGatewayBgpSettingsPtrInput
	// A `customRoute` block as defined below. Specifies a custom routes address space for a virtual network gateway and a VpnClient.
	CustomRoute VirtualNetworkGatewayCustomRoutePtrInput
	// The ID of the local network gateway through which outbound Internet traffic from the virtual network in which the gateway is created will be routed (*forced tunnelling*). Refer to the [Azure documentation on forced tunnelling](https://docs.microsoft.com/azure/vpn-gateway/vpn-gateway-forced-tunneling-rm). If not specified, forced tunnelling is disabled.
	DefaultLocalNetworkGatewayId pulumi.StringPtrInput
	// Specifies the Edge Zone within the Azure Region where this Virtual Network Gateway should exist. Changing this forces a new Virtual Network Gateway to be created.
	EdgeZone pulumi.StringPtrInput
	// If `true`, BGP (Border Gateway Protocol) will be enabled for this Virtual Network Gateway. Defaults to `false`.
	EnableBgp pulumi.BoolPtrInput
	// The Generation of the Virtual Network gateway. Possible values include `Generation1`, `Generation2` or `None`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** The available values depend on the `type` and `sku` arguments - where `Generation2` is only value for a `sku` larger than `VpnGw2` or `VpnGw2AZ`.
	Generation pulumi.StringPtrInput
	// One or more (up to 3) `ipConfiguration` blocks documented below.
	// An active-standby gateway requires exactly one `ipConfiguration` block,
	// an active-active gateway requires exactly two `ipConfiguration` blocks whereas
	// an active-active zone redundant gateway with P2S configuration requires exactly three `ipConfiguration` blocks.
	IpConfigurations VirtualNetworkGatewayIpConfigurationArrayInput
	// The location/region where the Virtual Network Gateway is located. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name of the Virtual Network Gateway. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Should private IP be enabled on this gateway for connections? Changing this forces a new resource to be created.
	PrivateIpAddressEnabled pulumi.BoolPtrInput
	// The name of the resource group in which to create the Virtual Network Gateway. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// Configuration of the size and capacity of the virtual network gateway. Valid options are `Basic`, `Standard`, `HighPerformance`, `UltraPerformance`, `ErGw1AZ`, `ErGw2AZ`, `ErGw3AZ`, `VpnGw1`, `VpnGw2`, `VpnGw3`, `VpnGw4`,`VpnGw5`, `VpnGw1AZ`, `VpnGw2AZ`, `VpnGw3AZ`,`VpnGw4AZ` and `VpnGw5AZ` and depend on the `type`, `vpnType` and `generation` arguments. A `PolicyBased` gateway only supports the `Basic` SKU. Further, the `UltraPerformance` SKU is only supported by an `ExpressRoute` gateway.
	//
	// > **NOTE:** To build a UltraPerformance ExpressRoute Virtual Network gateway, the associated Public IP needs to be SKU "Basic" not "Standard"
	//
	// > **NOTE:** Not all SKUs (e.g. `ErGw1AZ`) are available in all regions. If you see `StatusCode=400 -- Original Error: Code="InvalidGatewaySkuSpecifiedForGatewayDeploymentType"` please try another region.
	Sku pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// The type of the Virtual Network Gateway. Valid options are `Vpn` or `ExpressRoute`. Changing the type forces a new resource to be created.
	Type pulumi.StringPtrInput
	// A `vpnClientConfiguration` block which is documented below. In this block the Virtual Network Gateway can be configured to accept IPSec point-to-site connections.
	VpnClientConfiguration VirtualNetworkGatewayVpnClientConfigurationPtrInput
	// The routing type of the Virtual Network Gateway. Valid options are `RouteBased` or `PolicyBased`. Defaults to `RouteBased`. Changing this forces a new resource to be created.
	VpnType pulumi.StringPtrInput
}

func (VirtualNetworkGatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualNetworkGatewayState)(nil)).Elem()
}

type virtualNetworkGatewayArgs struct {
	// If `true`, an active-active Virtual Network Gateway will be created. An active-active gateway requires a `HighPerformance` or an `UltraPerformance` SKU. If `false`, an active-standby gateway will be created. Defaults to `false`.
	ActiveActive *bool `pulumi:"activeActive"`
	// A `bgpSettings` block which is documented below. In this block the BGP specific settings can be defined.
	BgpSettings *VirtualNetworkGatewayBgpSettings `pulumi:"bgpSettings"`
	// A `customRoute` block as defined below. Specifies a custom routes address space for a virtual network gateway and a VpnClient.
	CustomRoute *VirtualNetworkGatewayCustomRoute `pulumi:"customRoute"`
	// The ID of the local network gateway through which outbound Internet traffic from the virtual network in which the gateway is created will be routed (*forced tunnelling*). Refer to the [Azure documentation on forced tunnelling](https://docs.microsoft.com/azure/vpn-gateway/vpn-gateway-forced-tunneling-rm). If not specified, forced tunnelling is disabled.
	DefaultLocalNetworkGatewayId *string `pulumi:"defaultLocalNetworkGatewayId"`
	// Specifies the Edge Zone within the Azure Region where this Virtual Network Gateway should exist. Changing this forces a new Virtual Network Gateway to be created.
	EdgeZone *string `pulumi:"edgeZone"`
	// If `true`, BGP (Border Gateway Protocol) will be enabled for this Virtual Network Gateway. Defaults to `false`.
	EnableBgp *bool `pulumi:"enableBgp"`
	// The Generation of the Virtual Network gateway. Possible values include `Generation1`, `Generation2` or `None`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** The available values depend on the `type` and `sku` arguments - where `Generation2` is only value for a `sku` larger than `VpnGw2` or `VpnGw2AZ`.
	Generation *string `pulumi:"generation"`
	// One or more (up to 3) `ipConfiguration` blocks documented below.
	// An active-standby gateway requires exactly one `ipConfiguration` block,
	// an active-active gateway requires exactly two `ipConfiguration` blocks whereas
	// an active-active zone redundant gateway with P2S configuration requires exactly three `ipConfiguration` blocks.
	IpConfigurations []VirtualNetworkGatewayIpConfiguration `pulumi:"ipConfigurations"`
	// The location/region where the Virtual Network Gateway is located. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name of the Virtual Network Gateway. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Should private IP be enabled on this gateway for connections? Changing this forces a new resource to be created.
	PrivateIpAddressEnabled *bool `pulumi:"privateIpAddressEnabled"`
	// The name of the resource group in which to create the Virtual Network Gateway. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Configuration of the size and capacity of the virtual network gateway. Valid options are `Basic`, `Standard`, `HighPerformance`, `UltraPerformance`, `ErGw1AZ`, `ErGw2AZ`, `ErGw3AZ`, `VpnGw1`, `VpnGw2`, `VpnGw3`, `VpnGw4`,`VpnGw5`, `VpnGw1AZ`, `VpnGw2AZ`, `VpnGw3AZ`,`VpnGw4AZ` and `VpnGw5AZ` and depend on the `type`, `vpnType` and `generation` arguments. A `PolicyBased` gateway only supports the `Basic` SKU. Further, the `UltraPerformance` SKU is only supported by an `ExpressRoute` gateway.
	//
	// > **NOTE:** To build a UltraPerformance ExpressRoute Virtual Network gateway, the associated Public IP needs to be SKU "Basic" not "Standard"
	//
	// > **NOTE:** Not all SKUs (e.g. `ErGw1AZ`) are available in all regions. If you see `StatusCode=400 -- Original Error: Code="InvalidGatewaySkuSpecifiedForGatewayDeploymentType"` please try another region.
	Sku string `pulumi:"sku"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The type of the Virtual Network Gateway. Valid options are `Vpn` or `ExpressRoute`. Changing the type forces a new resource to be created.
	Type string `pulumi:"type"`
	// A `vpnClientConfiguration` block which is documented below. In this block the Virtual Network Gateway can be configured to accept IPSec point-to-site connections.
	VpnClientConfiguration *VirtualNetworkGatewayVpnClientConfiguration `pulumi:"vpnClientConfiguration"`
	// The routing type of the Virtual Network Gateway. Valid options are `RouteBased` or `PolicyBased`. Defaults to `RouteBased`. Changing this forces a new resource to be created.
	VpnType *string `pulumi:"vpnType"`
}

// The set of arguments for constructing a VirtualNetworkGateway resource.
type VirtualNetworkGatewayArgs struct {
	// If `true`, an active-active Virtual Network Gateway will be created. An active-active gateway requires a `HighPerformance` or an `UltraPerformance` SKU. If `false`, an active-standby gateway will be created. Defaults to `false`.
	ActiveActive pulumi.BoolPtrInput
	// A `bgpSettings` block which is documented below. In this block the BGP specific settings can be defined.
	BgpSettings VirtualNetworkGatewayBgpSettingsPtrInput
	// A `customRoute` block as defined below. Specifies a custom routes address space for a virtual network gateway and a VpnClient.
	CustomRoute VirtualNetworkGatewayCustomRoutePtrInput
	// The ID of the local network gateway through which outbound Internet traffic from the virtual network in which the gateway is created will be routed (*forced tunnelling*). Refer to the [Azure documentation on forced tunnelling](https://docs.microsoft.com/azure/vpn-gateway/vpn-gateway-forced-tunneling-rm). If not specified, forced tunnelling is disabled.
	DefaultLocalNetworkGatewayId pulumi.StringPtrInput
	// Specifies the Edge Zone within the Azure Region where this Virtual Network Gateway should exist. Changing this forces a new Virtual Network Gateway to be created.
	EdgeZone pulumi.StringPtrInput
	// If `true`, BGP (Border Gateway Protocol) will be enabled for this Virtual Network Gateway. Defaults to `false`.
	EnableBgp pulumi.BoolPtrInput
	// The Generation of the Virtual Network gateway. Possible values include `Generation1`, `Generation2` or `None`. Changing this forces a new resource to be created.
	//
	// > **NOTE:** The available values depend on the `type` and `sku` arguments - where `Generation2` is only value for a `sku` larger than `VpnGw2` or `VpnGw2AZ`.
	Generation pulumi.StringPtrInput
	// One or more (up to 3) `ipConfiguration` blocks documented below.
	// An active-standby gateway requires exactly one `ipConfiguration` block,
	// an active-active gateway requires exactly two `ipConfiguration` blocks whereas
	// an active-active zone redundant gateway with P2S configuration requires exactly three `ipConfiguration` blocks.
	IpConfigurations VirtualNetworkGatewayIpConfigurationArrayInput
	// The location/region where the Virtual Network Gateway is located. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name of the Virtual Network Gateway. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Should private IP be enabled on this gateway for connections? Changing this forces a new resource to be created.
	PrivateIpAddressEnabled pulumi.BoolPtrInput
	// The name of the resource group in which to create the Virtual Network Gateway. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// Configuration of the size and capacity of the virtual network gateway. Valid options are `Basic`, `Standard`, `HighPerformance`, `UltraPerformance`, `ErGw1AZ`, `ErGw2AZ`, `ErGw3AZ`, `VpnGw1`, `VpnGw2`, `VpnGw3`, `VpnGw4`,`VpnGw5`, `VpnGw1AZ`, `VpnGw2AZ`, `VpnGw3AZ`,`VpnGw4AZ` and `VpnGw5AZ` and depend on the `type`, `vpnType` and `generation` arguments. A `PolicyBased` gateway only supports the `Basic` SKU. Further, the `UltraPerformance` SKU is only supported by an `ExpressRoute` gateway.
	//
	// > **NOTE:** To build a UltraPerformance ExpressRoute Virtual Network gateway, the associated Public IP needs to be SKU "Basic" not "Standard"
	//
	// > **NOTE:** Not all SKUs (e.g. `ErGw1AZ`) are available in all regions. If you see `StatusCode=400 -- Original Error: Code="InvalidGatewaySkuSpecifiedForGatewayDeploymentType"` please try another region.
	Sku pulumi.StringInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// The type of the Virtual Network Gateway. Valid options are `Vpn` or `ExpressRoute`. Changing the type forces a new resource to be created.
	Type pulumi.StringInput
	// A `vpnClientConfiguration` block which is documented below. In this block the Virtual Network Gateway can be configured to accept IPSec point-to-site connections.
	VpnClientConfiguration VirtualNetworkGatewayVpnClientConfigurationPtrInput
	// The routing type of the Virtual Network Gateway. Valid options are `RouteBased` or `PolicyBased`. Defaults to `RouteBased`. Changing this forces a new resource to be created.
	VpnType pulumi.StringPtrInput
}

func (VirtualNetworkGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualNetworkGatewayArgs)(nil)).Elem()
}

type VirtualNetworkGatewayInput interface {
	pulumi.Input

	ToVirtualNetworkGatewayOutput() VirtualNetworkGatewayOutput
	ToVirtualNetworkGatewayOutputWithContext(ctx context.Context) VirtualNetworkGatewayOutput
}

func (*VirtualNetworkGateway) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNetworkGateway)(nil)).Elem()
}

func (i *VirtualNetworkGateway) ToVirtualNetworkGatewayOutput() VirtualNetworkGatewayOutput {
	return i.ToVirtualNetworkGatewayOutputWithContext(context.Background())
}

func (i *VirtualNetworkGateway) ToVirtualNetworkGatewayOutputWithContext(ctx context.Context) VirtualNetworkGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkGatewayOutput)
}

func (i *VirtualNetworkGateway) ToOutput(ctx context.Context) pulumix.Output[*VirtualNetworkGateway] {
	return pulumix.Output[*VirtualNetworkGateway]{
		OutputState: i.ToVirtualNetworkGatewayOutputWithContext(ctx).OutputState,
	}
}

// VirtualNetworkGatewayArrayInput is an input type that accepts VirtualNetworkGatewayArray and VirtualNetworkGatewayArrayOutput values.
// You can construct a concrete instance of `VirtualNetworkGatewayArrayInput` via:
//
//	VirtualNetworkGatewayArray{ VirtualNetworkGatewayArgs{...} }
type VirtualNetworkGatewayArrayInput interface {
	pulumi.Input

	ToVirtualNetworkGatewayArrayOutput() VirtualNetworkGatewayArrayOutput
	ToVirtualNetworkGatewayArrayOutputWithContext(context.Context) VirtualNetworkGatewayArrayOutput
}

type VirtualNetworkGatewayArray []VirtualNetworkGatewayInput

func (VirtualNetworkGatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualNetworkGateway)(nil)).Elem()
}

func (i VirtualNetworkGatewayArray) ToVirtualNetworkGatewayArrayOutput() VirtualNetworkGatewayArrayOutput {
	return i.ToVirtualNetworkGatewayArrayOutputWithContext(context.Background())
}

func (i VirtualNetworkGatewayArray) ToVirtualNetworkGatewayArrayOutputWithContext(ctx context.Context) VirtualNetworkGatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkGatewayArrayOutput)
}

func (i VirtualNetworkGatewayArray) ToOutput(ctx context.Context) pulumix.Output[[]*VirtualNetworkGateway] {
	return pulumix.Output[[]*VirtualNetworkGateway]{
		OutputState: i.ToVirtualNetworkGatewayArrayOutputWithContext(ctx).OutputState,
	}
}

// VirtualNetworkGatewayMapInput is an input type that accepts VirtualNetworkGatewayMap and VirtualNetworkGatewayMapOutput values.
// You can construct a concrete instance of `VirtualNetworkGatewayMapInput` via:
//
//	VirtualNetworkGatewayMap{ "key": VirtualNetworkGatewayArgs{...} }
type VirtualNetworkGatewayMapInput interface {
	pulumi.Input

	ToVirtualNetworkGatewayMapOutput() VirtualNetworkGatewayMapOutput
	ToVirtualNetworkGatewayMapOutputWithContext(context.Context) VirtualNetworkGatewayMapOutput
}

type VirtualNetworkGatewayMap map[string]VirtualNetworkGatewayInput

func (VirtualNetworkGatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualNetworkGateway)(nil)).Elem()
}

func (i VirtualNetworkGatewayMap) ToVirtualNetworkGatewayMapOutput() VirtualNetworkGatewayMapOutput {
	return i.ToVirtualNetworkGatewayMapOutputWithContext(context.Background())
}

func (i VirtualNetworkGatewayMap) ToVirtualNetworkGatewayMapOutputWithContext(ctx context.Context) VirtualNetworkGatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkGatewayMapOutput)
}

func (i VirtualNetworkGatewayMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*VirtualNetworkGateway] {
	return pulumix.Output[map[string]*VirtualNetworkGateway]{
		OutputState: i.ToVirtualNetworkGatewayMapOutputWithContext(ctx).OutputState,
	}
}

type VirtualNetworkGatewayOutput struct{ *pulumi.OutputState }

func (VirtualNetworkGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNetworkGateway)(nil)).Elem()
}

func (o VirtualNetworkGatewayOutput) ToVirtualNetworkGatewayOutput() VirtualNetworkGatewayOutput {
	return o
}

func (o VirtualNetworkGatewayOutput) ToVirtualNetworkGatewayOutputWithContext(ctx context.Context) VirtualNetworkGatewayOutput {
	return o
}

func (o VirtualNetworkGatewayOutput) ToOutput(ctx context.Context) pulumix.Output[*VirtualNetworkGateway] {
	return pulumix.Output[*VirtualNetworkGateway]{
		OutputState: o.OutputState,
	}
}

// If `true`, an active-active Virtual Network Gateway will be created. An active-active gateway requires a `HighPerformance` or an `UltraPerformance` SKU. If `false`, an active-standby gateway will be created. Defaults to `false`.
func (o VirtualNetworkGatewayOutput) ActiveActive() pulumi.BoolOutput {
	return o.ApplyT(func(v *VirtualNetworkGateway) pulumi.BoolOutput { return v.ActiveActive }).(pulumi.BoolOutput)
}

// A `bgpSettings` block which is documented below. In this block the BGP specific settings can be defined.
func (o VirtualNetworkGatewayOutput) BgpSettings() VirtualNetworkGatewayBgpSettingsOutput {
	return o.ApplyT(func(v *VirtualNetworkGateway) VirtualNetworkGatewayBgpSettingsOutput { return v.BgpSettings }).(VirtualNetworkGatewayBgpSettingsOutput)
}

// A `customRoute` block as defined below. Specifies a custom routes address space for a virtual network gateway and a VpnClient.
func (o VirtualNetworkGatewayOutput) CustomRoute() VirtualNetworkGatewayCustomRoutePtrOutput {
	return o.ApplyT(func(v *VirtualNetworkGateway) VirtualNetworkGatewayCustomRoutePtrOutput { return v.CustomRoute }).(VirtualNetworkGatewayCustomRoutePtrOutput)
}

// The ID of the local network gateway through which outbound Internet traffic from the virtual network in which the gateway is created will be routed (*forced tunnelling*). Refer to the [Azure documentation on forced tunnelling](https://docs.microsoft.com/azure/vpn-gateway/vpn-gateway-forced-tunneling-rm). If not specified, forced tunnelling is disabled.
func (o VirtualNetworkGatewayOutput) DefaultLocalNetworkGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualNetworkGateway) pulumi.StringPtrOutput { return v.DefaultLocalNetworkGatewayId }).(pulumi.StringPtrOutput)
}

// Specifies the Edge Zone within the Azure Region where this Virtual Network Gateway should exist. Changing this forces a new Virtual Network Gateway to be created.
func (o VirtualNetworkGatewayOutput) EdgeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualNetworkGateway) pulumi.StringPtrOutput { return v.EdgeZone }).(pulumi.StringPtrOutput)
}

// If `true`, BGP (Border Gateway Protocol) will be enabled for this Virtual Network Gateway. Defaults to `false`.
func (o VirtualNetworkGatewayOutput) EnableBgp() pulumi.BoolOutput {
	return o.ApplyT(func(v *VirtualNetworkGateway) pulumi.BoolOutput { return v.EnableBgp }).(pulumi.BoolOutput)
}

// The Generation of the Virtual Network gateway. Possible values include `Generation1`, `Generation2` or `None`. Changing this forces a new resource to be created.
//
// > **NOTE:** The available values depend on the `type` and `sku` arguments - where `Generation2` is only value for a `sku` larger than `VpnGw2` or `VpnGw2AZ`.
func (o VirtualNetworkGatewayOutput) Generation() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualNetworkGateway) pulumi.StringOutput { return v.Generation }).(pulumi.StringOutput)
}

// One or more (up to 3) `ipConfiguration` blocks documented below.
// An active-standby gateway requires exactly one `ipConfiguration` block,
// an active-active gateway requires exactly two `ipConfiguration` blocks whereas
// an active-active zone redundant gateway with P2S configuration requires exactly three `ipConfiguration` blocks.
func (o VirtualNetworkGatewayOutput) IpConfigurations() VirtualNetworkGatewayIpConfigurationArrayOutput {
	return o.ApplyT(func(v *VirtualNetworkGateway) VirtualNetworkGatewayIpConfigurationArrayOutput {
		return v.IpConfigurations
	}).(VirtualNetworkGatewayIpConfigurationArrayOutput)
}

// The location/region where the Virtual Network Gateway is located. Changing this forces a new resource to be created.
func (o VirtualNetworkGatewayOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualNetworkGateway) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the Virtual Network Gateway. Changing this forces a new resource to be created.
func (o VirtualNetworkGatewayOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualNetworkGateway) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Should private IP be enabled on this gateway for connections? Changing this forces a new resource to be created.
func (o VirtualNetworkGatewayOutput) PrivateIpAddressEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualNetworkGateway) pulumi.BoolPtrOutput { return v.PrivateIpAddressEnabled }).(pulumi.BoolPtrOutput)
}

// The name of the resource group in which to create the Virtual Network Gateway. Changing this forces a new resource to be created.
func (o VirtualNetworkGatewayOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualNetworkGateway) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// Configuration of the size and capacity of the virtual network gateway. Valid options are `Basic`, `Standard`, `HighPerformance`, `UltraPerformance`, `ErGw1AZ`, `ErGw2AZ`, `ErGw3AZ`, `VpnGw1`, `VpnGw2`, `VpnGw3`, `VpnGw4`,`VpnGw5`, `VpnGw1AZ`, `VpnGw2AZ`, `VpnGw3AZ`,`VpnGw4AZ` and `VpnGw5AZ` and depend on the `type`, `vpnType` and `generation` arguments. A `PolicyBased` gateway only supports the `Basic` SKU. Further, the `UltraPerformance` SKU is only supported by an `ExpressRoute` gateway.
//
// > **NOTE:** To build a UltraPerformance ExpressRoute Virtual Network gateway, the associated Public IP needs to be SKU "Basic" not "Standard"
//
// > **NOTE:** Not all SKUs (e.g. `ErGw1AZ`) are available in all regions. If you see `StatusCode=400 -- Original Error: Code="InvalidGatewaySkuSpecifiedForGatewayDeploymentType"` please try another region.
func (o VirtualNetworkGatewayOutput) Sku() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualNetworkGateway) pulumi.StringOutput { return v.Sku }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o VirtualNetworkGatewayOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualNetworkGateway) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the Virtual Network Gateway. Valid options are `Vpn` or `ExpressRoute`. Changing the type forces a new resource to be created.
func (o VirtualNetworkGatewayOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualNetworkGateway) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// A `vpnClientConfiguration` block which is documented below. In this block the Virtual Network Gateway can be configured to accept IPSec point-to-site connections.
func (o VirtualNetworkGatewayOutput) VpnClientConfiguration() VirtualNetworkGatewayVpnClientConfigurationPtrOutput {
	return o.ApplyT(func(v *VirtualNetworkGateway) VirtualNetworkGatewayVpnClientConfigurationPtrOutput {
		return v.VpnClientConfiguration
	}).(VirtualNetworkGatewayVpnClientConfigurationPtrOutput)
}

// The routing type of the Virtual Network Gateway. Valid options are `RouteBased` or `PolicyBased`. Defaults to `RouteBased`. Changing this forces a new resource to be created.
func (o VirtualNetworkGatewayOutput) VpnType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualNetworkGateway) pulumi.StringPtrOutput { return v.VpnType }).(pulumi.StringPtrOutput)
}

type VirtualNetworkGatewayArrayOutput struct{ *pulumi.OutputState }

func (VirtualNetworkGatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualNetworkGateway)(nil)).Elem()
}

func (o VirtualNetworkGatewayArrayOutput) ToVirtualNetworkGatewayArrayOutput() VirtualNetworkGatewayArrayOutput {
	return o
}

func (o VirtualNetworkGatewayArrayOutput) ToVirtualNetworkGatewayArrayOutputWithContext(ctx context.Context) VirtualNetworkGatewayArrayOutput {
	return o
}

func (o VirtualNetworkGatewayArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*VirtualNetworkGateway] {
	return pulumix.Output[[]*VirtualNetworkGateway]{
		OutputState: o.OutputState,
	}
}

func (o VirtualNetworkGatewayArrayOutput) Index(i pulumi.IntInput) VirtualNetworkGatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VirtualNetworkGateway {
		return vs[0].([]*VirtualNetworkGateway)[vs[1].(int)]
	}).(VirtualNetworkGatewayOutput)
}

type VirtualNetworkGatewayMapOutput struct{ *pulumi.OutputState }

func (VirtualNetworkGatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualNetworkGateway)(nil)).Elem()
}

func (o VirtualNetworkGatewayMapOutput) ToVirtualNetworkGatewayMapOutput() VirtualNetworkGatewayMapOutput {
	return o
}

func (o VirtualNetworkGatewayMapOutput) ToVirtualNetworkGatewayMapOutputWithContext(ctx context.Context) VirtualNetworkGatewayMapOutput {
	return o
}

func (o VirtualNetworkGatewayMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*VirtualNetworkGateway] {
	return pulumix.Output[map[string]*VirtualNetworkGateway]{
		OutputState: o.OutputState,
	}
}

func (o VirtualNetworkGatewayMapOutput) MapIndex(k pulumi.StringInput) VirtualNetworkGatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VirtualNetworkGateway {
		return vs[0].(map[string]*VirtualNetworkGateway)[vs[1].(string)]
	}).(VirtualNetworkGatewayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualNetworkGatewayInput)(nil)).Elem(), &VirtualNetworkGateway{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualNetworkGatewayArrayInput)(nil)).Elem(), VirtualNetworkGatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualNetworkGatewayMapInput)(nil)).Elem(), VirtualNetworkGatewayMap{})
	pulumi.RegisterOutputType(VirtualNetworkGatewayOutput{})
	pulumi.RegisterOutputType(VirtualNetworkGatewayArrayOutput{})
	pulumi.RegisterOutputType(VirtualNetworkGatewayMapOutput{})
}
