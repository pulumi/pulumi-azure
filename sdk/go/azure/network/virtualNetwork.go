// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a virtual network including any configured subnets. Each subnet can
// optionally be configured with a security group to be associated with the subnet.
//
// > **NOTE on Virtual Networks and Subnet's:** This provider currently
// provides both a standalone Subnet resource, and allows for Subnets to be defined in-line within the Virtual Network resource.
// At this time you cannot use a Virtual Network with in-line Subnets in conjunction with any Subnet resources. Doing so will cause a conflict of Subnet configurations and will overwrite Subnet's.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/network"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West US"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleNetworkSecurityGroup, err := network.NewNetworkSecurityGroup(ctx, "exampleNetworkSecurityGroup", &network.NetworkSecurityGroupArgs{
// 			Location:          exampleResourceGroup.Location,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleDdosProtectionPlan, err := network.NewDdosProtectionPlan(ctx, "exampleDdosProtectionPlan", &network.DdosProtectionPlanArgs{
// 			Location:          exampleResourceGroup.Location,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = network.NewVirtualNetwork(ctx, "exampleVirtualNetwork", &network.VirtualNetworkArgs{
// 			Location:          exampleResourceGroup.Location,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			AddressSpaces: pulumi.StringArray{
// 				pulumi.String("10.0.0.0/16"),
// 			},
// 			DnsServers: pulumi.StringArray{
// 				pulumi.String("10.0.0.4"),
// 				pulumi.String("10.0.0.5"),
// 			},
// 			DdosProtectionPlan: &network.VirtualNetworkDdosProtectionPlanArgs{
// 				Id:     exampleDdosProtectionPlan.ID(),
// 				Enable: pulumi.Bool(true),
// 			},
// 			Subnets: network.VirtualNetworkSubnetArray{
// 				&network.VirtualNetworkSubnetArgs{
// 					Name:          pulumi.String("subnet1"),
// 					AddressPrefix: pulumi.String("10.0.1.0/24"),
// 				},
// 				&network.VirtualNetworkSubnetArgs{
// 					Name:          pulumi.String("subnet2"),
// 					AddressPrefix: pulumi.String("10.0.2.0/24"),
// 				},
// 				&network.VirtualNetworkSubnetArgs{
// 					Name:          pulumi.String("subnet3"),
// 					AddressPrefix: pulumi.String("10.0.3.0/24"),
// 					SecurityGroup: exampleNetworkSecurityGroup.ID(),
// 				},
// 			},
// 			Tags: pulumi.StringMap{
// 				"environment": pulumi.String("Production"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Virtual Networks can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:network/virtualNetwork:VirtualNetwork exampleNetwork /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/virtualNetworks/myvnet1
// ```
type VirtualNetwork struct {
	pulumi.CustomResourceState

	// The address space that is used the virtual network. You can supply more than one address space.
	AddressSpaces pulumi.StringArrayOutput `pulumi:"addressSpaces"`
	// The BGP community attribute in format `<as-number>:<community-value>`.
	BgpCommunity pulumi.StringPtrOutput `pulumi:"bgpCommunity"`
	// A `ddosProtectionPlan` block as documented below.
	DdosProtectionPlan VirtualNetworkDdosProtectionPlanPtrOutput `pulumi:"ddosProtectionPlan"`
	// List of IP addresses of DNS servers
	DnsServers pulumi.StringArrayOutput `pulumi:"dnsServers"`
	// The GUID of the virtual network.
	Guid pulumi.StringOutput `pulumi:"guid"`
	// The location/region where the virtual network is created. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the virtual network. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the resource group in which to create the virtual network.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Can be specified multiple times to define multiple subnets. Each `subnet` block supports fields documented below.
	Subnets VirtualNetworkSubnetArrayOutput `pulumi:"subnets"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Whether to enable VM protection for all the subnets in this Virtual Network. Defaults to `false`.
	VmProtectionEnabled pulumi.BoolPtrOutput `pulumi:"vmProtectionEnabled"`
}

// NewVirtualNetwork registers a new resource with the given unique name, arguments, and options.
func NewVirtualNetwork(ctx *pulumi.Context,
	name string, args *VirtualNetworkArgs, opts ...pulumi.ResourceOption) (*VirtualNetwork, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AddressSpaces == nil {
		return nil, errors.New("invalid value for required argument 'AddressSpaces'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	var resource VirtualNetwork
	err := ctx.RegisterResource("azure:network/virtualNetwork:VirtualNetwork", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualNetwork gets an existing VirtualNetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualNetworkState, opts ...pulumi.ResourceOption) (*VirtualNetwork, error) {
	var resource VirtualNetwork
	err := ctx.ReadResource("azure:network/virtualNetwork:VirtualNetwork", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualNetwork resources.
type virtualNetworkState struct {
	// The address space that is used the virtual network. You can supply more than one address space.
	AddressSpaces []string `pulumi:"addressSpaces"`
	// The BGP community attribute in format `<as-number>:<community-value>`.
	BgpCommunity *string `pulumi:"bgpCommunity"`
	// A `ddosProtectionPlan` block as documented below.
	DdosProtectionPlan *VirtualNetworkDdosProtectionPlan `pulumi:"ddosProtectionPlan"`
	// List of IP addresses of DNS servers
	DnsServers []string `pulumi:"dnsServers"`
	// The GUID of the virtual network.
	Guid *string `pulumi:"guid"`
	// The location/region where the virtual network is created. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name of the virtual network. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to create the virtual network.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Can be specified multiple times to define multiple subnets. Each `subnet` block supports fields documented below.
	Subnets []VirtualNetworkSubnet `pulumi:"subnets"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Whether to enable VM protection for all the subnets in this Virtual Network. Defaults to `false`.
	VmProtectionEnabled *bool `pulumi:"vmProtectionEnabled"`
}

type VirtualNetworkState struct {
	// The address space that is used the virtual network. You can supply more than one address space.
	AddressSpaces pulumi.StringArrayInput
	// The BGP community attribute in format `<as-number>:<community-value>`.
	BgpCommunity pulumi.StringPtrInput
	// A `ddosProtectionPlan` block as documented below.
	DdosProtectionPlan VirtualNetworkDdosProtectionPlanPtrInput
	// List of IP addresses of DNS servers
	DnsServers pulumi.StringArrayInput
	// The GUID of the virtual network.
	Guid pulumi.StringPtrInput
	// The location/region where the virtual network is created. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name of the virtual network. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to create the virtual network.
	ResourceGroupName pulumi.StringPtrInput
	// Can be specified multiple times to define multiple subnets. Each `subnet` block supports fields documented below.
	Subnets VirtualNetworkSubnetArrayInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// Whether to enable VM protection for all the subnets in this Virtual Network. Defaults to `false`.
	VmProtectionEnabled pulumi.BoolPtrInput
}

func (VirtualNetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualNetworkState)(nil)).Elem()
}

type virtualNetworkArgs struct {
	// The address space that is used the virtual network. You can supply more than one address space.
	AddressSpaces []string `pulumi:"addressSpaces"`
	// The BGP community attribute in format `<as-number>:<community-value>`.
	BgpCommunity *string `pulumi:"bgpCommunity"`
	// A `ddosProtectionPlan` block as documented below.
	DdosProtectionPlan *VirtualNetworkDdosProtectionPlan `pulumi:"ddosProtectionPlan"`
	// List of IP addresses of DNS servers
	DnsServers []string `pulumi:"dnsServers"`
	// The location/region where the virtual network is created. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name of the virtual network. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to create the virtual network.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Can be specified multiple times to define multiple subnets. Each `subnet` block supports fields documented below.
	Subnets []VirtualNetworkSubnet `pulumi:"subnets"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Whether to enable VM protection for all the subnets in this Virtual Network. Defaults to `false`.
	VmProtectionEnabled *bool `pulumi:"vmProtectionEnabled"`
}

// The set of arguments for constructing a VirtualNetwork resource.
type VirtualNetworkArgs struct {
	// The address space that is used the virtual network. You can supply more than one address space.
	AddressSpaces pulumi.StringArrayInput
	// The BGP community attribute in format `<as-number>:<community-value>`.
	BgpCommunity pulumi.StringPtrInput
	// A `ddosProtectionPlan` block as documented below.
	DdosProtectionPlan VirtualNetworkDdosProtectionPlanPtrInput
	// List of IP addresses of DNS servers
	DnsServers pulumi.StringArrayInput
	// The location/region where the virtual network is created. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name of the virtual network. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to create the virtual network.
	ResourceGroupName pulumi.StringInput
	// Can be specified multiple times to define multiple subnets. Each `subnet` block supports fields documented below.
	Subnets VirtualNetworkSubnetArrayInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// Whether to enable VM protection for all the subnets in this Virtual Network. Defaults to `false`.
	VmProtectionEnabled pulumi.BoolPtrInput
}

func (VirtualNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualNetworkArgs)(nil)).Elem()
}

type VirtualNetworkInput interface {
	pulumi.Input

	ToVirtualNetworkOutput() VirtualNetworkOutput
	ToVirtualNetworkOutputWithContext(ctx context.Context) VirtualNetworkOutput
}

func (VirtualNetwork) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetwork)(nil)).Elem()
}

func (i VirtualNetwork) ToVirtualNetworkOutput() VirtualNetworkOutput {
	return i.ToVirtualNetworkOutputWithContext(context.Background())
}

func (i VirtualNetwork) ToVirtualNetworkOutputWithContext(ctx context.Context) VirtualNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkOutput)
}

type VirtualNetworkOutput struct {
	*pulumi.OutputState
}

func (VirtualNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkOutput)(nil)).Elem()
}

func (o VirtualNetworkOutput) ToVirtualNetworkOutput() VirtualNetworkOutput {
	return o
}

func (o VirtualNetworkOutput) ToVirtualNetworkOutputWithContext(ctx context.Context) VirtualNetworkOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(VirtualNetworkOutput{})
}
