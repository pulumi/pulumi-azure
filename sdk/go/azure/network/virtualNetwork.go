// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a virtual network including any configured subnets. Each subnet can
// optionally be configured with a security group to be associated with the subnet.
//
// > **NOTE on Virtual Networks and Subnet's:** This provider currently
// provides both a standalone Subnet resource, and allows for Subnets to be defined in-line within the Virtual Network resource.
// At this time you cannot use a Virtual Network with in-line Subnets in conjunction with any Subnet resources. Doing so will cause a conflict of Subnet configurations and will overwrite Subnet's.
// **NOTE on Virtual Networks and DNS Servers:** This provider currently provides both a standalone virtual network DNS Servers resource, and allows for DNS servers to be defined in-line within the Virtual Network resource.
// At this time you cannot use a Virtual Network with in-line DNS servers in conjunction with any Virtual Network DNS Servers resources. Doing so will cause a conflict of Virtual Network DNS Servers configurations and will overwrite virtual networks DNS servers.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleNetworkSecurityGroup, err := network.NewNetworkSecurityGroup(ctx, "exampleNetworkSecurityGroup", &network.NetworkSecurityGroupArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = network.NewVirtualNetwork(ctx, "exampleVirtualNetwork", &network.VirtualNetworkArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//				DnsServers: pulumi.StringArray{
//					pulumi.String("10.0.0.4"),
//					pulumi.String("10.0.0.5"),
//				},
//				Subnets: network.VirtualNetworkSubnetArray{
//					&network.VirtualNetworkSubnetArgs{
//						Name:          pulumi.String("subnet1"),
//						AddressPrefix: pulumi.String("10.0.1.0/24"),
//					},
//					&network.VirtualNetworkSubnetArgs{
//						Name:          pulumi.String("subnet2"),
//						AddressPrefix: pulumi.String("10.0.2.0/24"),
//						SecurityGroup: exampleNetworkSecurityGroup.ID(),
//					},
//				},
//				Tags: pulumi.StringMap{
//					"environment": pulumi.String("Production"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Virtual Networks can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:network/virtualNetwork:VirtualNetwork exampleNetwork /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/virtualNetworks/myvnet1
//
// ```
type VirtualNetwork struct {
	pulumi.CustomResourceState

	// The address space that is used the virtual network. You can supply more than one address space.
	AddressSpaces pulumi.StringArrayOutput `pulumi:"addressSpaces"`
	// The BGP community attribute in format `<as-number>:<community-value>`.
	//
	// > **NOTE** The `as-number` segment is the Microsoft ASN, which is always `12076` for now.
	BgpCommunity pulumi.StringPtrOutput `pulumi:"bgpCommunity"`
	// A `ddosProtectionPlan` block as documented below.
	DdosProtectionPlan VirtualNetworkDdosProtectionPlanPtrOutput `pulumi:"ddosProtectionPlan"`
	// List of IP addresses of DNS servers
	//
	// > **NOTE** Since `dnsServers` can be configured both inline and via the separate `network.VirtualNetworkDnsServers` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
	DnsServers pulumi.StringArrayOutput `pulumi:"dnsServers"`
	// Specifies the Edge Zone within the Azure Region where this Virtual Network should exist. Changing this forces a new Virtual Network to be created.
	EdgeZone pulumi.StringPtrOutput `pulumi:"edgeZone"`
	// A `encryption` block as defined below.
	Encryption VirtualNetworkEncryptionPtrOutput `pulumi:"encryption"`
	// The flow timeout in minutes for the Virtual Network, which is used to enable connection tracking for intra-VM flows. Possible values are between `4` and `30` minutes.
	FlowTimeoutInMinutes pulumi.IntPtrOutput `pulumi:"flowTimeoutInMinutes"`
	// The GUID of the virtual network.
	Guid pulumi.StringOutput `pulumi:"guid"`
	// The location/region where the virtual network is created. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the virtual network. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the resource group in which to create the virtual network. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Can be specified multiple times to define multiple subnets. Each `subnet` block supports fields documented below.
	//
	// > **NOTE** Since `subnet` can be configured both inline and via the separate `network.Subnet` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
	Subnets VirtualNetworkSubnetArrayOutput `pulumi:"subnets"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewVirtualNetwork registers a new resource with the given unique name, arguments, and options.
func NewVirtualNetwork(ctx *pulumi.Context,
	name string, args *VirtualNetworkArgs, opts ...pulumi.ResourceOption) (*VirtualNetwork, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AddressSpaces == nil {
		return nil, errors.New("invalid value for required argument 'AddressSpaces'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VirtualNetwork
	err := ctx.RegisterResource("azure:network/virtualNetwork:VirtualNetwork", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualNetwork gets an existing VirtualNetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualNetworkState, opts ...pulumi.ResourceOption) (*VirtualNetwork, error) {
	var resource VirtualNetwork
	err := ctx.ReadResource("azure:network/virtualNetwork:VirtualNetwork", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualNetwork resources.
type virtualNetworkState struct {
	// The address space that is used the virtual network. You can supply more than one address space.
	AddressSpaces []string `pulumi:"addressSpaces"`
	// The BGP community attribute in format `<as-number>:<community-value>`.
	//
	// > **NOTE** The `as-number` segment is the Microsoft ASN, which is always `12076` for now.
	BgpCommunity *string `pulumi:"bgpCommunity"`
	// A `ddosProtectionPlan` block as documented below.
	DdosProtectionPlan *VirtualNetworkDdosProtectionPlan `pulumi:"ddosProtectionPlan"`
	// List of IP addresses of DNS servers
	//
	// > **NOTE** Since `dnsServers` can be configured both inline and via the separate `network.VirtualNetworkDnsServers` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
	DnsServers []string `pulumi:"dnsServers"`
	// Specifies the Edge Zone within the Azure Region where this Virtual Network should exist. Changing this forces a new Virtual Network to be created.
	EdgeZone *string `pulumi:"edgeZone"`
	// A `encryption` block as defined below.
	Encryption *VirtualNetworkEncryption `pulumi:"encryption"`
	// The flow timeout in minutes for the Virtual Network, which is used to enable connection tracking for intra-VM flows. Possible values are between `4` and `30` minutes.
	FlowTimeoutInMinutes *int `pulumi:"flowTimeoutInMinutes"`
	// The GUID of the virtual network.
	Guid *string `pulumi:"guid"`
	// The location/region where the virtual network is created. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name of the virtual network. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to create the virtual network. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Can be specified multiple times to define multiple subnets. Each `subnet` block supports fields documented below.
	//
	// > **NOTE** Since `subnet` can be configured both inline and via the separate `network.Subnet` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
	Subnets []VirtualNetworkSubnet `pulumi:"subnets"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

type VirtualNetworkState struct {
	// The address space that is used the virtual network. You can supply more than one address space.
	AddressSpaces pulumi.StringArrayInput
	// The BGP community attribute in format `<as-number>:<community-value>`.
	//
	// > **NOTE** The `as-number` segment is the Microsoft ASN, which is always `12076` for now.
	BgpCommunity pulumi.StringPtrInput
	// A `ddosProtectionPlan` block as documented below.
	DdosProtectionPlan VirtualNetworkDdosProtectionPlanPtrInput
	// List of IP addresses of DNS servers
	//
	// > **NOTE** Since `dnsServers` can be configured both inline and via the separate `network.VirtualNetworkDnsServers` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
	DnsServers pulumi.StringArrayInput
	// Specifies the Edge Zone within the Azure Region where this Virtual Network should exist. Changing this forces a new Virtual Network to be created.
	EdgeZone pulumi.StringPtrInput
	// A `encryption` block as defined below.
	Encryption VirtualNetworkEncryptionPtrInput
	// The flow timeout in minutes for the Virtual Network, which is used to enable connection tracking for intra-VM flows. Possible values are between `4` and `30` minutes.
	FlowTimeoutInMinutes pulumi.IntPtrInput
	// The GUID of the virtual network.
	Guid pulumi.StringPtrInput
	// The location/region where the virtual network is created. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name of the virtual network. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to create the virtual network. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// Can be specified multiple times to define multiple subnets. Each `subnet` block supports fields documented below.
	//
	// > **NOTE** Since `subnet` can be configured both inline and via the separate `network.Subnet` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
	Subnets VirtualNetworkSubnetArrayInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
}

func (VirtualNetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualNetworkState)(nil)).Elem()
}

type virtualNetworkArgs struct {
	// The address space that is used the virtual network. You can supply more than one address space.
	AddressSpaces []string `pulumi:"addressSpaces"`
	// The BGP community attribute in format `<as-number>:<community-value>`.
	//
	// > **NOTE** The `as-number` segment is the Microsoft ASN, which is always `12076` for now.
	BgpCommunity *string `pulumi:"bgpCommunity"`
	// A `ddosProtectionPlan` block as documented below.
	DdosProtectionPlan *VirtualNetworkDdosProtectionPlan `pulumi:"ddosProtectionPlan"`
	// List of IP addresses of DNS servers
	//
	// > **NOTE** Since `dnsServers` can be configured both inline and via the separate `network.VirtualNetworkDnsServers` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
	DnsServers []string `pulumi:"dnsServers"`
	// Specifies the Edge Zone within the Azure Region where this Virtual Network should exist. Changing this forces a new Virtual Network to be created.
	EdgeZone *string `pulumi:"edgeZone"`
	// A `encryption` block as defined below.
	Encryption *VirtualNetworkEncryption `pulumi:"encryption"`
	// The flow timeout in minutes for the Virtual Network, which is used to enable connection tracking for intra-VM flows. Possible values are between `4` and `30` minutes.
	FlowTimeoutInMinutes *int `pulumi:"flowTimeoutInMinutes"`
	// The location/region where the virtual network is created. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name of the virtual network. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to create the virtual network. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Can be specified multiple times to define multiple subnets. Each `subnet` block supports fields documented below.
	//
	// > **NOTE** Since `subnet` can be configured both inline and via the separate `network.Subnet` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
	Subnets []VirtualNetworkSubnet `pulumi:"subnets"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a VirtualNetwork resource.
type VirtualNetworkArgs struct {
	// The address space that is used the virtual network. You can supply more than one address space.
	AddressSpaces pulumi.StringArrayInput
	// The BGP community attribute in format `<as-number>:<community-value>`.
	//
	// > **NOTE** The `as-number` segment is the Microsoft ASN, which is always `12076` for now.
	BgpCommunity pulumi.StringPtrInput
	// A `ddosProtectionPlan` block as documented below.
	DdosProtectionPlan VirtualNetworkDdosProtectionPlanPtrInput
	// List of IP addresses of DNS servers
	//
	// > **NOTE** Since `dnsServers` can be configured both inline and via the separate `network.VirtualNetworkDnsServers` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
	DnsServers pulumi.StringArrayInput
	// Specifies the Edge Zone within the Azure Region where this Virtual Network should exist. Changing this forces a new Virtual Network to be created.
	EdgeZone pulumi.StringPtrInput
	// A `encryption` block as defined below.
	Encryption VirtualNetworkEncryptionPtrInput
	// The flow timeout in minutes for the Virtual Network, which is used to enable connection tracking for intra-VM flows. Possible values are between `4` and `30` minutes.
	FlowTimeoutInMinutes pulumi.IntPtrInput
	// The location/region where the virtual network is created. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name of the virtual network. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to create the virtual network. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// Can be specified multiple times to define multiple subnets. Each `subnet` block supports fields documented below.
	//
	// > **NOTE** Since `subnet` can be configured both inline and via the separate `network.Subnet` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
	Subnets VirtualNetworkSubnetArrayInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
}

func (VirtualNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualNetworkArgs)(nil)).Elem()
}

type VirtualNetworkInput interface {
	pulumi.Input

	ToVirtualNetworkOutput() VirtualNetworkOutput
	ToVirtualNetworkOutputWithContext(ctx context.Context) VirtualNetworkOutput
}

func (*VirtualNetwork) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNetwork)(nil)).Elem()
}

func (i *VirtualNetwork) ToVirtualNetworkOutput() VirtualNetworkOutput {
	return i.ToVirtualNetworkOutputWithContext(context.Background())
}

func (i *VirtualNetwork) ToVirtualNetworkOutputWithContext(ctx context.Context) VirtualNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkOutput)
}

// VirtualNetworkArrayInput is an input type that accepts VirtualNetworkArray and VirtualNetworkArrayOutput values.
// You can construct a concrete instance of `VirtualNetworkArrayInput` via:
//
//	VirtualNetworkArray{ VirtualNetworkArgs{...} }
type VirtualNetworkArrayInput interface {
	pulumi.Input

	ToVirtualNetworkArrayOutput() VirtualNetworkArrayOutput
	ToVirtualNetworkArrayOutputWithContext(context.Context) VirtualNetworkArrayOutput
}

type VirtualNetworkArray []VirtualNetworkInput

func (VirtualNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualNetwork)(nil)).Elem()
}

func (i VirtualNetworkArray) ToVirtualNetworkArrayOutput() VirtualNetworkArrayOutput {
	return i.ToVirtualNetworkArrayOutputWithContext(context.Background())
}

func (i VirtualNetworkArray) ToVirtualNetworkArrayOutputWithContext(ctx context.Context) VirtualNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkArrayOutput)
}

// VirtualNetworkMapInput is an input type that accepts VirtualNetworkMap and VirtualNetworkMapOutput values.
// You can construct a concrete instance of `VirtualNetworkMapInput` via:
//
//	VirtualNetworkMap{ "key": VirtualNetworkArgs{...} }
type VirtualNetworkMapInput interface {
	pulumi.Input

	ToVirtualNetworkMapOutput() VirtualNetworkMapOutput
	ToVirtualNetworkMapOutputWithContext(context.Context) VirtualNetworkMapOutput
}

type VirtualNetworkMap map[string]VirtualNetworkInput

func (VirtualNetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualNetwork)(nil)).Elem()
}

func (i VirtualNetworkMap) ToVirtualNetworkMapOutput() VirtualNetworkMapOutput {
	return i.ToVirtualNetworkMapOutputWithContext(context.Background())
}

func (i VirtualNetworkMap) ToVirtualNetworkMapOutputWithContext(ctx context.Context) VirtualNetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkMapOutput)
}

type VirtualNetworkOutput struct{ *pulumi.OutputState }

func (VirtualNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNetwork)(nil)).Elem()
}

func (o VirtualNetworkOutput) ToVirtualNetworkOutput() VirtualNetworkOutput {
	return o
}

func (o VirtualNetworkOutput) ToVirtualNetworkOutputWithContext(ctx context.Context) VirtualNetworkOutput {
	return o
}

// The address space that is used the virtual network. You can supply more than one address space.
func (o VirtualNetworkOutput) AddressSpaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualNetwork) pulumi.StringArrayOutput { return v.AddressSpaces }).(pulumi.StringArrayOutput)
}

// The BGP community attribute in format `<as-number>:<community-value>`.
//
// > **NOTE** The `as-number` segment is the Microsoft ASN, which is always `12076` for now.
func (o VirtualNetworkOutput) BgpCommunity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualNetwork) pulumi.StringPtrOutput { return v.BgpCommunity }).(pulumi.StringPtrOutput)
}

// A `ddosProtectionPlan` block as documented below.
func (o VirtualNetworkOutput) DdosProtectionPlan() VirtualNetworkDdosProtectionPlanPtrOutput {
	return o.ApplyT(func(v *VirtualNetwork) VirtualNetworkDdosProtectionPlanPtrOutput { return v.DdosProtectionPlan }).(VirtualNetworkDdosProtectionPlanPtrOutput)
}

// List of IP addresses of DNS servers
//
// > **NOTE** Since `dnsServers` can be configured both inline and via the separate `network.VirtualNetworkDnsServers` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
func (o VirtualNetworkOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualNetwork) pulumi.StringArrayOutput { return v.DnsServers }).(pulumi.StringArrayOutput)
}

// Specifies the Edge Zone within the Azure Region where this Virtual Network should exist. Changing this forces a new Virtual Network to be created.
func (o VirtualNetworkOutput) EdgeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualNetwork) pulumi.StringPtrOutput { return v.EdgeZone }).(pulumi.StringPtrOutput)
}

// A `encryption` block as defined below.
func (o VirtualNetworkOutput) Encryption() VirtualNetworkEncryptionPtrOutput {
	return o.ApplyT(func(v *VirtualNetwork) VirtualNetworkEncryptionPtrOutput { return v.Encryption }).(VirtualNetworkEncryptionPtrOutput)
}

// The flow timeout in minutes for the Virtual Network, which is used to enable connection tracking for intra-VM flows. Possible values are between `4` and `30` minutes.
func (o VirtualNetworkOutput) FlowTimeoutInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualNetwork) pulumi.IntPtrOutput { return v.FlowTimeoutInMinutes }).(pulumi.IntPtrOutput)
}

// The GUID of the virtual network.
func (o VirtualNetworkOutput) Guid() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualNetwork) pulumi.StringOutput { return v.Guid }).(pulumi.StringOutput)
}

// The location/region where the virtual network is created. Changing this forces a new resource to be created.
func (o VirtualNetworkOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualNetwork) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the virtual network. Changing this forces a new resource to be created.
func (o VirtualNetworkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualNetwork) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the resource group in which to create the virtual network. Changing this forces a new resource to be created.
func (o VirtualNetworkOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualNetwork) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// Can be specified multiple times to define multiple subnets. Each `subnet` block supports fields documented below.
//
// > **NOTE** Since `subnet` can be configured both inline and via the separate `network.Subnet` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
func (o VirtualNetworkOutput) Subnets() VirtualNetworkSubnetArrayOutput {
	return o.ApplyT(func(v *VirtualNetwork) VirtualNetworkSubnetArrayOutput { return v.Subnets }).(VirtualNetworkSubnetArrayOutput)
}

// A mapping of tags to assign to the resource.
func (o VirtualNetworkOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualNetwork) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type VirtualNetworkArrayOutput struct{ *pulumi.OutputState }

func (VirtualNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualNetwork)(nil)).Elem()
}

func (o VirtualNetworkArrayOutput) ToVirtualNetworkArrayOutput() VirtualNetworkArrayOutput {
	return o
}

func (o VirtualNetworkArrayOutput) ToVirtualNetworkArrayOutputWithContext(ctx context.Context) VirtualNetworkArrayOutput {
	return o
}

func (o VirtualNetworkArrayOutput) Index(i pulumi.IntInput) VirtualNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VirtualNetwork {
		return vs[0].([]*VirtualNetwork)[vs[1].(int)]
	}).(VirtualNetworkOutput)
}

type VirtualNetworkMapOutput struct{ *pulumi.OutputState }

func (VirtualNetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualNetwork)(nil)).Elem()
}

func (o VirtualNetworkMapOutput) ToVirtualNetworkMapOutput() VirtualNetworkMapOutput {
	return o
}

func (o VirtualNetworkMapOutput) ToVirtualNetworkMapOutputWithContext(ctx context.Context) VirtualNetworkMapOutput {
	return o
}

func (o VirtualNetworkMapOutput) MapIndex(k pulumi.StringInput) VirtualNetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VirtualNetwork {
		return vs[0].(map[string]*VirtualNetwork)[vs[1].(string)]
	}).(VirtualNetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualNetworkInput)(nil)).Elem(), &VirtualNetwork{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualNetworkArrayInput)(nil)).Elem(), VirtualNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualNetworkMapInput)(nil)).Elem(), VirtualNetworkMap{})
	pulumi.RegisterOutputType(VirtualNetworkOutput{})
	pulumi.RegisterOutputType(VirtualNetworkArrayOutput{})
	pulumi.RegisterOutputType(VirtualNetworkMapOutput{})
}
