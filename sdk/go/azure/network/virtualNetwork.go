// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a virtual network including any configured subnets. Each subnet can
// optionally be configured with a security group to be associated with the subnet.
//
// > **NOTE on Virtual Networks and Subnet's:** This provider currently
// provides both a standalone Subnet resource, and allows for Subnets to be defined in-line within the Virtual Network resource.
// At this time you cannot use a Virtual Network with in-line Subnets in conjunction with any Subnet resources. Doing so will cause a conflict of Subnet configurations and will overwrite Subnet's.
type VirtualNetwork struct {
	pulumi.CustomResourceState

	// The address space that is used the virtual
	// network. You can supply more than one address space. Changing this forces
	// a new resource to be created.
	AddressSpaces pulumi.StringArrayOutput `pulumi:"addressSpaces"`
	// A `ddosProtectionPlan` block as documented below.
	DdosProtectionPlan VirtualNetworkDdosProtectionPlanPtrOutput `pulumi:"ddosProtectionPlan"`
	// List of IP addresses of DNS servers
	DnsServers pulumi.StringArrayOutput `pulumi:"dnsServers"`
	// The location/region where the virtual network is
	// created. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the virtual network. Changing this forces a
	// new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the resource group in which to
	// create the virtual network.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Can be specified multiple times to define multiple
	// subnets. Each `subnet` block supports fields documented below.
	Subnets VirtualNetworkSubnetArrayOutput `pulumi:"subnets"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewVirtualNetwork registers a new resource with the given unique name, arguments, and options.
func NewVirtualNetwork(ctx *pulumi.Context,
	name string, args *VirtualNetworkArgs, opts ...pulumi.ResourceOption) (*VirtualNetwork, error) {
	if args == nil || args.AddressSpaces == nil {
		return nil, errors.New("missing required argument 'AddressSpaces'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &VirtualNetworkArgs{}
	}
	var resource VirtualNetwork
	err := ctx.RegisterResource("azure:network/virtualNetwork:VirtualNetwork", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualNetwork gets an existing VirtualNetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualNetworkState, opts ...pulumi.ResourceOption) (*VirtualNetwork, error) {
	var resource VirtualNetwork
	err := ctx.ReadResource("azure:network/virtualNetwork:VirtualNetwork", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualNetwork resources.
type virtualNetworkState struct {
	// The address space that is used the virtual
	// network. You can supply more than one address space. Changing this forces
	// a new resource to be created.
	AddressSpaces []string `pulumi:"addressSpaces"`
	// A `ddosProtectionPlan` block as documented below.
	DdosProtectionPlan *VirtualNetworkDdosProtectionPlan `pulumi:"ddosProtectionPlan"`
	// List of IP addresses of DNS servers
	DnsServers []string `pulumi:"dnsServers"`
	// The location/region where the virtual network is
	// created. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name of the virtual network. Changing this forces a
	// new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to
	// create the virtual network.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Can be specified multiple times to define multiple
	// subnets. Each `subnet` block supports fields documented below.
	Subnets []VirtualNetworkSubnet `pulumi:"subnets"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

type VirtualNetworkState struct {
	// The address space that is used the virtual
	// network. You can supply more than one address space. Changing this forces
	// a new resource to be created.
	AddressSpaces pulumi.StringArrayInput
	// A `ddosProtectionPlan` block as documented below.
	DdosProtectionPlan VirtualNetworkDdosProtectionPlanPtrInput
	// List of IP addresses of DNS servers
	DnsServers pulumi.StringArrayInput
	// The location/region where the virtual network is
	// created. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name of the virtual network. Changing this forces a
	// new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to
	// create the virtual network.
	ResourceGroupName pulumi.StringPtrInput
	// Can be specified multiple times to define multiple
	// subnets. Each `subnet` block supports fields documented below.
	Subnets VirtualNetworkSubnetArrayInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
}

func (VirtualNetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualNetworkState)(nil)).Elem()
}

type virtualNetworkArgs struct {
	// The address space that is used the virtual
	// network. You can supply more than one address space. Changing this forces
	// a new resource to be created.
	AddressSpaces []string `pulumi:"addressSpaces"`
	// A `ddosProtectionPlan` block as documented below.
	DdosProtectionPlan *VirtualNetworkDdosProtectionPlan `pulumi:"ddosProtectionPlan"`
	// List of IP addresses of DNS servers
	DnsServers []string `pulumi:"dnsServers"`
	// The location/region where the virtual network is
	// created. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name of the virtual network. Changing this forces a
	// new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to
	// create the virtual network.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Can be specified multiple times to define multiple
	// subnets. Each `subnet` block supports fields documented below.
	Subnets []VirtualNetworkSubnet `pulumi:"subnets"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a VirtualNetwork resource.
type VirtualNetworkArgs struct {
	// The address space that is used the virtual
	// network. You can supply more than one address space. Changing this forces
	// a new resource to be created.
	AddressSpaces pulumi.StringArrayInput
	// A `ddosProtectionPlan` block as documented below.
	DdosProtectionPlan VirtualNetworkDdosProtectionPlanPtrInput
	// List of IP addresses of DNS servers
	DnsServers pulumi.StringArrayInput
	// The location/region where the virtual network is
	// created. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name of the virtual network. Changing this forces a
	// new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to
	// create the virtual network.
	ResourceGroupName pulumi.StringInput
	// Can be specified multiple times to define multiple
	// subnets. Each `subnet` block supports fields documented below.
	Subnets VirtualNetworkSubnetArrayInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
}

func (VirtualNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualNetworkArgs)(nil)).Elem()
}
