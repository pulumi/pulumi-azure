// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Route within a Route Table.
// 
// > **NOTE on Route Tables and Routes:** This provider currently
// provides both a standalone Route resource, and allows for Routes to be defined in-line within the Route Table resource.
// At this time you cannot use a Route Table with in-line Routes in conjunction with any Route resources. Doing so will cause a conflict of Route configurations and will overwrite Routes.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/route.html.markdown.
type Route struct {
	s *pulumi.ResourceState
}

// NewRoute registers a new resource with the given unique name, arguments, and options.
func NewRoute(ctx *pulumi.Context,
	name string, args *RouteArgs, opts ...pulumi.ResourceOpt) (*Route, error) {
	if args == nil || args.AddressPrefix == nil {
		return nil, errors.New("missing required argument 'AddressPrefix'")
	}
	if args == nil || args.NextHopType == nil {
		return nil, errors.New("missing required argument 'NextHopType'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.RouteTableName == nil {
		return nil, errors.New("missing required argument 'RouteTableName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["addressPrefix"] = nil
		inputs["name"] = nil
		inputs["nextHopInIpAddress"] = nil
		inputs["nextHopType"] = nil
		inputs["resourceGroupName"] = nil
		inputs["routeTableName"] = nil
	} else {
		inputs["addressPrefix"] = args.AddressPrefix
		inputs["name"] = args.Name
		inputs["nextHopInIpAddress"] = args.NextHopInIpAddress
		inputs["nextHopType"] = args.NextHopType
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["routeTableName"] = args.RouteTableName
	}
	s, err := ctx.RegisterResource("azure:network/route:Route", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Route{s: s}, nil
}

// GetRoute gets an existing Route resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoute(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RouteState, opts ...pulumi.ResourceOpt) (*Route, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["addressPrefix"] = state.AddressPrefix
		inputs["name"] = state.Name
		inputs["nextHopInIpAddress"] = state.NextHopInIpAddress
		inputs["nextHopType"] = state.NextHopType
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["routeTableName"] = state.RouteTableName
	}
	s, err := ctx.ReadResource("azure:network/route:Route", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Route{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Route) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Route) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The destination CIDR to which the route applies, such as `10.1.0.0/16`
func (r *Route) AddressPrefix() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["addressPrefix"])
}

// The name of the route. Changing this forces a new resource to be created.
func (r *Route) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Contains the IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is `VirtualAppliance`.
func (r *Route) NextHopInIpAddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["nextHopInIpAddress"])
}

// The type of Azure hop the packet should be sent to. Possible values are `VirtualNetworkGateway`, `VnetLocal`, `Internet`, `VirtualAppliance` and `None`
func (r *Route) NextHopType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["nextHopType"])
}

// The name of the resource group in which to create the route. Changing this forces a new resource to be created.
func (r *Route) ResourceGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// The name of the route table within which create the route. Changing this forces a new resource to be created.
func (r *Route) RouteTableName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["routeTableName"])
}

// Input properties used for looking up and filtering Route resources.
type RouteState struct {
	// The destination CIDR to which the route applies, such as `10.1.0.0/16`
	AddressPrefix interface{}
	// The name of the route. Changing this forces a new resource to be created.
	Name interface{}
	// Contains the IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is `VirtualAppliance`.
	NextHopInIpAddress interface{}
	// The type of Azure hop the packet should be sent to. Possible values are `VirtualNetworkGateway`, `VnetLocal`, `Internet`, `VirtualAppliance` and `None`
	NextHopType interface{}
	// The name of the resource group in which to create the route. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// The name of the route table within which create the route. Changing this forces a new resource to be created.
	RouteTableName interface{}
}

// The set of arguments for constructing a Route resource.
type RouteArgs struct {
	// The destination CIDR to which the route applies, such as `10.1.0.0/16`
	AddressPrefix interface{}
	// The name of the route. Changing this forces a new resource to be created.
	Name interface{}
	// Contains the IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is `VirtualAppliance`.
	NextHopInIpAddress interface{}
	// The type of Azure hop the packet should be sent to. Possible values are `VirtualNetworkGateway`, `VnetLocal`, `Internet`, `VirtualAppliance` and `None`
	NextHopType interface{}
	// The name of the resource group in which to create the route. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// The name of the route table within which create the route. Changing this forces a new resource to be created.
	RouteTableName interface{}
}
