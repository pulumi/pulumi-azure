// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to access information about an existing Public IP Address.
//
// ## Example Usage
func GetPublicIP(ctx *pulumi.Context, args *GetPublicIPArgs, opts ...pulumi.InvokeOption) (*GetPublicIPResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetPublicIPResult
	err := ctx.Invoke("azure:network/getPublicIP:getPublicIP", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPublicIP.
type GetPublicIPArgs struct {
	// Specifies the name of the public IP address.
	Name string `pulumi:"name"`
	// Specifies the name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getPublicIP.
type GetPublicIPResult struct {
	// The allocation method for this IP address. Possible values are `Static` or `Dynamic`.
	AllocationMethod string `pulumi:"allocationMethod"`
	// The DDoS protection mode of the public IP.
	DdosProtectionMode string `pulumi:"ddosProtectionMode"`
	// The ID of DDoS protection plan associated with the public IP.
	DdosProtectionPlanId string `pulumi:"ddosProtectionPlanId"`
	// The label for the Domain Name.
	DomainNameLabel string `pulumi:"domainNameLabel"`
	// Fully qualified domain name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone.
	Fqdn string `pulumi:"fqdn"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Specifies the timeout for the TCP idle connection.
	IdleTimeoutInMinutes int `pulumi:"idleTimeoutInMinutes"`
	// The IP address value that was allocated.
	IpAddress string `pulumi:"ipAddress"`
	// A mapping of tags to assigned to the resource.
	IpTags map[string]string `pulumi:"ipTags"`
	// The IP version being used, for example `IPv4` or `IPv6`.
	IpVersion string `pulumi:"ipVersion"`
	// The region that this public ip exists.
	Location          string `pulumi:"location"`
	Name              string `pulumi:"name"`
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The fully qualified domain name that resolves to this public IP address.
	ReverseFqdn string `pulumi:"reverseFqdn"`
	// The SKU of the Public IP.
	Sku string `pulumi:"sku"`
	// A mapping of tags to assigned to the resource.
	Tags map[string]string `pulumi:"tags"`
	// A list of Availability Zones in which this Public IP is located.
	Zones []string `pulumi:"zones"`
}

func GetPublicIPOutput(ctx *pulumi.Context, args GetPublicIPOutputArgs, opts ...pulumi.InvokeOption) GetPublicIPResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetPublicIPResult, error) {
			args := v.(GetPublicIPArgs)
			r, err := GetPublicIP(ctx, &args, opts...)
			var s GetPublicIPResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetPublicIPResultOutput)
}

// A collection of arguments for invoking getPublicIP.
type GetPublicIPOutputArgs struct {
	// Specifies the name of the public IP address.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the name of the resource group.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (GetPublicIPOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicIPArgs)(nil)).Elem()
}

// A collection of values returned by getPublicIP.
type GetPublicIPResultOutput struct{ *pulumi.OutputState }

func (GetPublicIPResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicIPResult)(nil)).Elem()
}

func (o GetPublicIPResultOutput) ToGetPublicIPResultOutput() GetPublicIPResultOutput {
	return o
}

func (o GetPublicIPResultOutput) ToGetPublicIPResultOutputWithContext(ctx context.Context) GetPublicIPResultOutput {
	return o
}

func (o GetPublicIPResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetPublicIPResult] {
	return pulumix.Output[GetPublicIPResult]{
		OutputState: o.OutputState,
	}
}

// The allocation method for this IP address. Possible values are `Static` or `Dynamic`.
func (o GetPublicIPResultOutput) AllocationMethod() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicIPResult) string { return v.AllocationMethod }).(pulumi.StringOutput)
}

// The DDoS protection mode of the public IP.
func (o GetPublicIPResultOutput) DdosProtectionMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicIPResult) string { return v.DdosProtectionMode }).(pulumi.StringOutput)
}

// The ID of DDoS protection plan associated with the public IP.
func (o GetPublicIPResultOutput) DdosProtectionPlanId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicIPResult) string { return v.DdosProtectionPlanId }).(pulumi.StringOutput)
}

// The label for the Domain Name.
func (o GetPublicIPResultOutput) DomainNameLabel() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicIPResult) string { return v.DomainNameLabel }).(pulumi.StringOutput)
}

// Fully qualified domain name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone.
func (o GetPublicIPResultOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicIPResult) string { return v.Fqdn }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetPublicIPResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicIPResult) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies the timeout for the TCP idle connection.
func (o GetPublicIPResultOutput) IdleTimeoutInMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v GetPublicIPResult) int { return v.IdleTimeoutInMinutes }).(pulumi.IntOutput)
}

// The IP address value that was allocated.
func (o GetPublicIPResultOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicIPResult) string { return v.IpAddress }).(pulumi.StringOutput)
}

// A mapping of tags to assigned to the resource.
func (o GetPublicIPResultOutput) IpTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetPublicIPResult) map[string]string { return v.IpTags }).(pulumi.StringMapOutput)
}

// The IP version being used, for example `IPv4` or `IPv6`.
func (o GetPublicIPResultOutput) IpVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicIPResult) string { return v.IpVersion }).(pulumi.StringOutput)
}

// The region that this public ip exists.
func (o GetPublicIPResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicIPResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o GetPublicIPResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicIPResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetPublicIPResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicIPResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The fully qualified domain name that resolves to this public IP address.
func (o GetPublicIPResultOutput) ReverseFqdn() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicIPResult) string { return v.ReverseFqdn }).(pulumi.StringOutput)
}

// The SKU of the Public IP.
func (o GetPublicIPResultOutput) Sku() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicIPResult) string { return v.Sku }).(pulumi.StringOutput)
}

// A mapping of tags to assigned to the resource.
func (o GetPublicIPResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetPublicIPResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// A list of Availability Zones in which this Public IP is located.
func (o GetPublicIPResultOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPublicIPResult) []string { return v.Zones }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetPublicIPResultOutput{})
}
