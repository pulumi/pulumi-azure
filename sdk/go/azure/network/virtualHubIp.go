// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a Virtual Hub IP.
//
// > **NOTE** Virtual Hub IP only supports Standard Virtual Hub without Virtual Wan.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/network"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West Europe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleVirtualHub, err := network.NewVirtualHub(ctx, "exampleVirtualHub", &network.VirtualHubArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			Location:          exampleResourceGroup.Location,
// 			Sku:               pulumi.String("Standard"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		examplePublicIp, err := network.NewPublicIp(ctx, "examplePublicIp", &network.PublicIpArgs{
// 			Location:          exampleResourceGroup.Location,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			AllocationMethod:  pulumi.String("Dynamic"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "exampleVirtualNetwork", &network.VirtualNetworkArgs{
// 			AddressSpaces: pulumi.StringArray{
// 				pulumi.String("10.5.0.0/16"),
// 			},
// 			Location:          exampleResourceGroup.Location,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleSubnet, err := network.NewSubnet(ctx, "exampleSubnet", &network.SubnetArgs{
// 			ResourceGroupName:  exampleResourceGroup.Name,
// 			VirtualNetworkName: exampleVirtualNetwork.Name,
// 			AddressPrefix:      pulumi.String("10.5.1.0/24"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = network.NewVirtualHubIp(ctx, "exampleVirtualHubIp", &network.VirtualHubIpArgs{
// 			VirtualHubId:              exampleVirtualHub.ID(),
// 			PrivateIpAddress:          pulumi.String("10.5.1.18"),
// 			PrivateIpAllocationMethod: pulumi.String("Static"),
// 			PublicIpAddressId:         examplePublicIp.ID(),
// 			SubnetId:                  exampleSubnet.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Virtual Hub IPs can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:network/virtualHubIp:VirtualHubIp example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/virtualHubs/virtualHub1/ipConfigurations/ipConfig1
// ```
type VirtualHubIp struct {
	pulumi.CustomResourceState

	// The name which should be used for this Virtual Hub IP. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The private IP address of the IP configuration.
	PrivateIpAddress pulumi.StringPtrOutput `pulumi:"privateIpAddress"`
	// The private IP address allocation method. Possible values are `Static` and `Dynamic` is allowed. Defaults to `Dynamic`.
	PrivateIpAllocationMethod pulumi.StringPtrOutput `pulumi:"privateIpAllocationMethod"`
	// The ID of the Public IP Address.
	PublicIpAddressId pulumi.StringPtrOutput `pulumi:"publicIpAddressId"`
	// The ID of the Subnet that the IP will reside. Changing this forces a new resource to be created.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// The ID of the Virtual Hub within which this ip configuration should be created. Changing this forces a new resource to be created.
	VirtualHubId pulumi.StringOutput `pulumi:"virtualHubId"`
}

// NewVirtualHubIp registers a new resource with the given unique name, arguments, and options.
func NewVirtualHubIp(ctx *pulumi.Context,
	name string, args *VirtualHubIpArgs, opts ...pulumi.ResourceOption) (*VirtualHubIp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.VirtualHubId == nil {
		return nil, errors.New("invalid value for required argument 'VirtualHubId'")
	}
	var resource VirtualHubIp
	err := ctx.RegisterResource("azure:network/virtualHubIp:VirtualHubIp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualHubIp gets an existing VirtualHubIp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualHubIp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualHubIpState, opts ...pulumi.ResourceOption) (*VirtualHubIp, error) {
	var resource VirtualHubIp
	err := ctx.ReadResource("azure:network/virtualHubIp:VirtualHubIp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualHubIp resources.
type virtualHubIpState struct {
	// The name which should be used for this Virtual Hub IP. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The private IP address of the IP configuration.
	PrivateIpAddress *string `pulumi:"privateIpAddress"`
	// The private IP address allocation method. Possible values are `Static` and `Dynamic` is allowed. Defaults to `Dynamic`.
	PrivateIpAllocationMethod *string `pulumi:"privateIpAllocationMethod"`
	// The ID of the Public IP Address.
	PublicIpAddressId *string `pulumi:"publicIpAddressId"`
	// The ID of the Subnet that the IP will reside. Changing this forces a new resource to be created.
	SubnetId *string `pulumi:"subnetId"`
	// The ID of the Virtual Hub within which this ip configuration should be created. Changing this forces a new resource to be created.
	VirtualHubId *string `pulumi:"virtualHubId"`
}

type VirtualHubIpState struct {
	// The name which should be used for this Virtual Hub IP. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The private IP address of the IP configuration.
	PrivateIpAddress pulumi.StringPtrInput
	// The private IP address allocation method. Possible values are `Static` and `Dynamic` is allowed. Defaults to `Dynamic`.
	PrivateIpAllocationMethod pulumi.StringPtrInput
	// The ID of the Public IP Address.
	PublicIpAddressId pulumi.StringPtrInput
	// The ID of the Subnet that the IP will reside. Changing this forces a new resource to be created.
	SubnetId pulumi.StringPtrInput
	// The ID of the Virtual Hub within which this ip configuration should be created. Changing this forces a new resource to be created.
	VirtualHubId pulumi.StringPtrInput
}

func (VirtualHubIpState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualHubIpState)(nil)).Elem()
}

type virtualHubIpArgs struct {
	// The name which should be used for this Virtual Hub IP. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The private IP address of the IP configuration.
	PrivateIpAddress *string `pulumi:"privateIpAddress"`
	// The private IP address allocation method. Possible values are `Static` and `Dynamic` is allowed. Defaults to `Dynamic`.
	PrivateIpAllocationMethod *string `pulumi:"privateIpAllocationMethod"`
	// The ID of the Public IP Address.
	PublicIpAddressId *string `pulumi:"publicIpAddressId"`
	// The ID of the Subnet that the IP will reside. Changing this forces a new resource to be created.
	SubnetId string `pulumi:"subnetId"`
	// The ID of the Virtual Hub within which this ip configuration should be created. Changing this forces a new resource to be created.
	VirtualHubId string `pulumi:"virtualHubId"`
}

// The set of arguments for constructing a VirtualHubIp resource.
type VirtualHubIpArgs struct {
	// The name which should be used for this Virtual Hub IP. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The private IP address of the IP configuration.
	PrivateIpAddress pulumi.StringPtrInput
	// The private IP address allocation method. Possible values are `Static` and `Dynamic` is allowed. Defaults to `Dynamic`.
	PrivateIpAllocationMethod pulumi.StringPtrInput
	// The ID of the Public IP Address.
	PublicIpAddressId pulumi.StringPtrInput
	// The ID of the Subnet that the IP will reside. Changing this forces a new resource to be created.
	SubnetId pulumi.StringInput
	// The ID of the Virtual Hub within which this ip configuration should be created. Changing this forces a new resource to be created.
	VirtualHubId pulumi.StringInput
}

func (VirtualHubIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualHubIpArgs)(nil)).Elem()
}

type VirtualHubIpInput interface {
	pulumi.Input

	ToVirtualHubIpOutput() VirtualHubIpOutput
	ToVirtualHubIpOutputWithContext(ctx context.Context) VirtualHubIpOutput
}

func (VirtualHubIp) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualHubIp)(nil)).Elem()
}

func (i VirtualHubIp) ToVirtualHubIpOutput() VirtualHubIpOutput {
	return i.ToVirtualHubIpOutputWithContext(context.Background())
}

func (i VirtualHubIp) ToVirtualHubIpOutputWithContext(ctx context.Context) VirtualHubIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualHubIpOutput)
}

type VirtualHubIpOutput struct {
	*pulumi.OutputState
}

func (VirtualHubIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualHubIpOutput)(nil)).Elem()
}

func (o VirtualHubIpOutput) ToVirtualHubIpOutput() VirtualHubIpOutput {
	return o
}

func (o VirtualHubIpOutput) ToVirtualHubIpOutputWithContext(ctx context.Context) VirtualHubIpOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(VirtualHubIpOutput{})
}
