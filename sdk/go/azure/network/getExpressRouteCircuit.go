// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing ExpressRoute circuit.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/network"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		example, err := network.LookupExpressRouteCircuit(ctx, &network.LookupExpressRouteCircuitArgs{
// 			ResourceGroupName: azurerm_resource_group.Example.Name,
// 			Name:              azurerm_express_route_circuit.Example.Name,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("expressRouteCircuitId", example.Id)
// 		ctx.Export("serviceKey", example.ServiceKey)
// 		return nil
// 	})
// }
// ```
func LookupExpressRouteCircuit(ctx *pulumi.Context, args *LookupExpressRouteCircuitArgs, opts ...pulumi.InvokeOption) (*LookupExpressRouteCircuitResult, error) {
	var rv LookupExpressRouteCircuitResult
	err := ctx.Invoke("azure:network/getExpressRouteCircuit:getExpressRouteCircuit", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getExpressRouteCircuit.
type LookupExpressRouteCircuitArgs struct {
	// The name of the ExpressRoute circuit.
	Name string `pulumi:"name"`
	// The Name of the Resource Group where the ExpressRoute circuit exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getExpressRouteCircuit.
type LookupExpressRouteCircuitResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The Azure location where the ExpressRoute circuit exists
	Location string `pulumi:"location"`
	Name     string `pulumi:"name"`
	// A `peerings` block for the ExpressRoute circuit as documented below
	Peerings          []GetExpressRouteCircuitPeeringType `pulumi:"peerings"`
	ResourceGroupName string                              `pulumi:"resourceGroupName"`
	// The string needed by the service provider to provision the ExpressRoute circuit.
	ServiceKey string `pulumi:"serviceKey"`
	// A `serviceProviderProperties` block for the ExpressRoute circuit as documented below
	ServiceProviderProperties []GetExpressRouteCircuitServiceProviderProperty `pulumi:"serviceProviderProperties"`
	// The ExpressRoute circuit provisioning state from your chosen service provider. Possible values are "NotProvisioned", "Provisioning", "Provisioned", and "Deprovisioning".
	ServiceProviderProvisioningState string `pulumi:"serviceProviderProvisioningState"`
	// A `sku` block for the ExpressRoute circuit as documented below.
	Sku GetExpressRouteCircuitSku `pulumi:"sku"`
}

func LookupExpressRouteCircuitOutput(ctx *pulumi.Context, args LookupExpressRouteCircuitOutputArgs, opts ...pulumi.InvokeOption) LookupExpressRouteCircuitResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupExpressRouteCircuitResult, error) {
			args := v.(LookupExpressRouteCircuitArgs)
			r, err := LookupExpressRouteCircuit(ctx, &args, opts...)
			return *r, err
		}).(LookupExpressRouteCircuitResultOutput)
}

// A collection of arguments for invoking getExpressRouteCircuit.
type LookupExpressRouteCircuitOutputArgs struct {
	// The name of the ExpressRoute circuit.
	Name pulumi.StringInput `pulumi:"name"`
	// The Name of the Resource Group where the ExpressRoute circuit exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupExpressRouteCircuitOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupExpressRouteCircuitArgs)(nil)).Elem()
}

// A collection of values returned by getExpressRouteCircuit.
type LookupExpressRouteCircuitResultOutput struct{ *pulumi.OutputState }

func (LookupExpressRouteCircuitResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupExpressRouteCircuitResult)(nil)).Elem()
}

func (o LookupExpressRouteCircuitResultOutput) ToLookupExpressRouteCircuitResultOutput() LookupExpressRouteCircuitResultOutput {
	return o
}

func (o LookupExpressRouteCircuitResultOutput) ToLookupExpressRouteCircuitResultOutputWithContext(ctx context.Context) LookupExpressRouteCircuitResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupExpressRouteCircuitResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExpressRouteCircuitResult) string { return v.Id }).(pulumi.StringOutput)
}

// The Azure location where the ExpressRoute circuit exists
func (o LookupExpressRouteCircuitResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExpressRouteCircuitResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o LookupExpressRouteCircuitResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExpressRouteCircuitResult) string { return v.Name }).(pulumi.StringOutput)
}

// A `peerings` block for the ExpressRoute circuit as documented below
func (o LookupExpressRouteCircuitResultOutput) Peerings() GetExpressRouteCircuitPeeringTypeArrayOutput {
	return o.ApplyT(func(v LookupExpressRouteCircuitResult) []GetExpressRouteCircuitPeeringType { return v.Peerings }).(GetExpressRouteCircuitPeeringTypeArrayOutput)
}

func (o LookupExpressRouteCircuitResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExpressRouteCircuitResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The string needed by the service provider to provision the ExpressRoute circuit.
func (o LookupExpressRouteCircuitResultOutput) ServiceKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExpressRouteCircuitResult) string { return v.ServiceKey }).(pulumi.StringOutput)
}

// A `serviceProviderProperties` block for the ExpressRoute circuit as documented below
func (o LookupExpressRouteCircuitResultOutput) ServiceProviderProperties() GetExpressRouteCircuitServiceProviderPropertyArrayOutput {
	return o.ApplyT(func(v LookupExpressRouteCircuitResult) []GetExpressRouteCircuitServiceProviderProperty {
		return v.ServiceProviderProperties
	}).(GetExpressRouteCircuitServiceProviderPropertyArrayOutput)
}

// The ExpressRoute circuit provisioning state from your chosen service provider. Possible values are "NotProvisioned", "Provisioning", "Provisioned", and "Deprovisioning".
func (o LookupExpressRouteCircuitResultOutput) ServiceProviderProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExpressRouteCircuitResult) string { return v.ServiceProviderProvisioningState }).(pulumi.StringOutput)
}

// A `sku` block for the ExpressRoute circuit as documented below.
func (o LookupExpressRouteCircuitResultOutput) Sku() GetExpressRouteCircuitSkuOutput {
	return o.ApplyT(func(v LookupExpressRouteCircuitResult) GetExpressRouteCircuitSku { return v.Sku }).(GetExpressRouteCircuitSkuOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupExpressRouteCircuitResultOutput{})
}
