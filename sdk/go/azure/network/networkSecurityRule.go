// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/network_security_rule.html.markdown.
type NetworkSecurityRule struct {
	s *pulumi.ResourceState
}

// NewNetworkSecurityRule registers a new resource with the given unique name, arguments, and options.
func NewNetworkSecurityRule(ctx *pulumi.Context,
	name string, args *NetworkSecurityRuleArgs, opts ...pulumi.ResourceOpt) (*NetworkSecurityRule, error) {
	if args == nil || args.Access == nil {
		return nil, errors.New("missing required argument 'Access'")
	}
	if args == nil || args.Direction == nil {
		return nil, errors.New("missing required argument 'Direction'")
	}
	if args == nil || args.NetworkSecurityGroupName == nil {
		return nil, errors.New("missing required argument 'NetworkSecurityGroupName'")
	}
	if args == nil || args.Priority == nil {
		return nil, errors.New("missing required argument 'Priority'")
	}
	if args == nil || args.Protocol == nil {
		return nil, errors.New("missing required argument 'Protocol'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["access"] = nil
		inputs["description"] = nil
		inputs["destinationAddressPrefix"] = nil
		inputs["destinationAddressPrefixes"] = nil
		inputs["destinationApplicationSecurityGroupIds"] = nil
		inputs["destinationPortRange"] = nil
		inputs["destinationPortRanges"] = nil
		inputs["direction"] = nil
		inputs["name"] = nil
		inputs["networkSecurityGroupName"] = nil
		inputs["priority"] = nil
		inputs["protocol"] = nil
		inputs["resourceGroupName"] = nil
		inputs["sourceAddressPrefix"] = nil
		inputs["sourceAddressPrefixes"] = nil
		inputs["sourceApplicationSecurityGroupIds"] = nil
		inputs["sourcePortRange"] = nil
		inputs["sourcePortRanges"] = nil
	} else {
		inputs["access"] = args.Access
		inputs["description"] = args.Description
		inputs["destinationAddressPrefix"] = args.DestinationAddressPrefix
		inputs["destinationAddressPrefixes"] = args.DestinationAddressPrefixes
		inputs["destinationApplicationSecurityGroupIds"] = args.DestinationApplicationSecurityGroupIds
		inputs["destinationPortRange"] = args.DestinationPortRange
		inputs["destinationPortRanges"] = args.DestinationPortRanges
		inputs["direction"] = args.Direction
		inputs["name"] = args.Name
		inputs["networkSecurityGroupName"] = args.NetworkSecurityGroupName
		inputs["priority"] = args.Priority
		inputs["protocol"] = args.Protocol
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["sourceAddressPrefix"] = args.SourceAddressPrefix
		inputs["sourceAddressPrefixes"] = args.SourceAddressPrefixes
		inputs["sourceApplicationSecurityGroupIds"] = args.SourceApplicationSecurityGroupIds
		inputs["sourcePortRange"] = args.SourcePortRange
		inputs["sourcePortRanges"] = args.SourcePortRanges
	}
	s, err := ctx.RegisterResource("azure:network/networkSecurityRule:NetworkSecurityRule", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NetworkSecurityRule{s: s}, nil
}

// GetNetworkSecurityRule gets an existing NetworkSecurityRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkSecurityRule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NetworkSecurityRuleState, opts ...pulumi.ResourceOpt) (*NetworkSecurityRule, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["access"] = state.Access
		inputs["description"] = state.Description
		inputs["destinationAddressPrefix"] = state.DestinationAddressPrefix
		inputs["destinationAddressPrefixes"] = state.DestinationAddressPrefixes
		inputs["destinationApplicationSecurityGroupIds"] = state.DestinationApplicationSecurityGroupIds
		inputs["destinationPortRange"] = state.DestinationPortRange
		inputs["destinationPortRanges"] = state.DestinationPortRanges
		inputs["direction"] = state.Direction
		inputs["name"] = state.Name
		inputs["networkSecurityGroupName"] = state.NetworkSecurityGroupName
		inputs["priority"] = state.Priority
		inputs["protocol"] = state.Protocol
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["sourceAddressPrefix"] = state.SourceAddressPrefix
		inputs["sourceAddressPrefixes"] = state.SourceAddressPrefixes
		inputs["sourceApplicationSecurityGroupIds"] = state.SourceApplicationSecurityGroupIds
		inputs["sourcePortRange"] = state.SourcePortRange
		inputs["sourcePortRanges"] = state.SourcePortRanges
	}
	s, err := ctx.ReadResource("azure:network/networkSecurityRule:NetworkSecurityRule", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NetworkSecurityRule{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *NetworkSecurityRule) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *NetworkSecurityRule) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Specifies whether network traffic is allowed or denied. Possible values are `Allow` and `Deny`.
func (r *NetworkSecurityRule) Access() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["access"])
}

// A description for this rule. Restricted to 140 characters.
func (r *NetworkSecurityRule) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// CIDR or destination IP range or * to match any IP. Tags such as ‘VirtualNetwork’, ‘AzureLoadBalancer’ and ‘Internet’ can also be used. This is required if `destination_address_prefixes` is not specified.
func (r *NetworkSecurityRule) DestinationAddressPrefix() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["destinationAddressPrefix"])
}

// List of destination address prefixes. Tags may not be used. This is required if `destination_address_prefix` is not specified.
func (r *NetworkSecurityRule) DestinationAddressPrefixes() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["destinationAddressPrefixes"])
}

// A List of destination Application Security Group ID's
func (r *NetworkSecurityRule) DestinationApplicationSecurityGroupIds() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["destinationApplicationSecurityGroupIds"])
}

// Destination Port or Range. Integer or range between `0` and `65535` or `*` to match any. This is required if `destination_port_ranges` is not specified.
func (r *NetworkSecurityRule) DestinationPortRange() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["destinationPortRange"])
}

// List of destination ports or port ranges. This is required if `destination_port_range` is not specified.
func (r *NetworkSecurityRule) DestinationPortRanges() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["destinationPortRanges"])
}

// The direction specifies if rule will be evaluated on incoming or outgoing traffic. Possible values are `Inbound` and `Outbound`.
func (r *NetworkSecurityRule) Direction() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["direction"])
}

// The name of the security rule. This needs to be unique across all Rules in the Network Security Group. Changing this forces a new resource to be created.
func (r *NetworkSecurityRule) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The name of the Network Security Group that we want to attach the rule to. Changing this forces a new resource to be created.
func (r *NetworkSecurityRule) NetworkSecurityGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["networkSecurityGroupName"])
}

// Specifies the priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.
func (r *NetworkSecurityRule) Priority() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["priority"])
}

// Network protocol this rule applies to. Possible values include `Tcp`, `Udp` or `*` (which matches both).
func (r *NetworkSecurityRule) Protocol() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["protocol"])
}

// The name of the resource group in which to create the Network Security Rule. Changing this forces a new resource to be created.
func (r *NetworkSecurityRule) ResourceGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// CIDR or source IP range or * to match any IP. Tags such as ‘VirtualNetwork’, ‘AzureLoadBalancer’ and ‘Internet’ can also be used. This is required if `source_address_prefixes` is not specified.
func (r *NetworkSecurityRule) SourceAddressPrefix() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sourceAddressPrefix"])
}

// List of source address prefixes. Tags may not be used. This is required if `source_address_prefix` is not specified.
func (r *NetworkSecurityRule) SourceAddressPrefixes() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["sourceAddressPrefixes"])
}

// A List of source Application Security Group ID's
func (r *NetworkSecurityRule) SourceApplicationSecurityGroupIds() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sourceApplicationSecurityGroupIds"])
}

// Source Port or Range. Integer or range between `0` and `65535` or `*` to match any. This is required if `source_port_ranges` is not specified.
func (r *NetworkSecurityRule) SourcePortRange() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sourcePortRange"])
}

// List of source ports or port ranges. This is required if `source_port_range` is not specified.
func (r *NetworkSecurityRule) SourcePortRanges() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["sourcePortRanges"])
}

// Input properties used for looking up and filtering NetworkSecurityRule resources.
type NetworkSecurityRuleState struct {
	// Specifies whether network traffic is allowed or denied. Possible values are `Allow` and `Deny`.
	Access interface{}
	// A description for this rule. Restricted to 140 characters.
	Description interface{}
	// CIDR or destination IP range or * to match any IP. Tags such as ‘VirtualNetwork’, ‘AzureLoadBalancer’ and ‘Internet’ can also be used. This is required if `destination_address_prefixes` is not specified.
	DestinationAddressPrefix interface{}
	// List of destination address prefixes. Tags may not be used. This is required if `destination_address_prefix` is not specified.
	DestinationAddressPrefixes interface{}
	// A List of destination Application Security Group ID's
	DestinationApplicationSecurityGroupIds interface{}
	// Destination Port or Range. Integer or range between `0` and `65535` or `*` to match any. This is required if `destination_port_ranges` is not specified.
	DestinationPortRange interface{}
	// List of destination ports or port ranges. This is required if `destination_port_range` is not specified.
	DestinationPortRanges interface{}
	// The direction specifies if rule will be evaluated on incoming or outgoing traffic. Possible values are `Inbound` and `Outbound`.
	Direction interface{}
	// The name of the security rule. This needs to be unique across all Rules in the Network Security Group. Changing this forces a new resource to be created.
	Name interface{}
	// The name of the Network Security Group that we want to attach the rule to. Changing this forces a new resource to be created.
	NetworkSecurityGroupName interface{}
	// Specifies the priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.
	Priority interface{}
	// Network protocol this rule applies to. Possible values include `Tcp`, `Udp` or `*` (which matches both).
	Protocol interface{}
	// The name of the resource group in which to create the Network Security Rule. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// CIDR or source IP range or * to match any IP. Tags such as ‘VirtualNetwork’, ‘AzureLoadBalancer’ and ‘Internet’ can also be used. This is required if `source_address_prefixes` is not specified.
	SourceAddressPrefix interface{}
	// List of source address prefixes. Tags may not be used. This is required if `source_address_prefix` is not specified.
	SourceAddressPrefixes interface{}
	// A List of source Application Security Group ID's
	SourceApplicationSecurityGroupIds interface{}
	// Source Port or Range. Integer or range between `0` and `65535` or `*` to match any. This is required if `source_port_ranges` is not specified.
	SourcePortRange interface{}
	// List of source ports or port ranges. This is required if `source_port_range` is not specified.
	SourcePortRanges interface{}
}

// The set of arguments for constructing a NetworkSecurityRule resource.
type NetworkSecurityRuleArgs struct {
	// Specifies whether network traffic is allowed or denied. Possible values are `Allow` and `Deny`.
	Access interface{}
	// A description for this rule. Restricted to 140 characters.
	Description interface{}
	// CIDR or destination IP range or * to match any IP. Tags such as ‘VirtualNetwork’, ‘AzureLoadBalancer’ and ‘Internet’ can also be used. This is required if `destination_address_prefixes` is not specified.
	DestinationAddressPrefix interface{}
	// List of destination address prefixes. Tags may not be used. This is required if `destination_address_prefix` is not specified.
	DestinationAddressPrefixes interface{}
	// A List of destination Application Security Group ID's
	DestinationApplicationSecurityGroupIds interface{}
	// Destination Port or Range. Integer or range between `0` and `65535` or `*` to match any. This is required if `destination_port_ranges` is not specified.
	DestinationPortRange interface{}
	// List of destination ports or port ranges. This is required if `destination_port_range` is not specified.
	DestinationPortRanges interface{}
	// The direction specifies if rule will be evaluated on incoming or outgoing traffic. Possible values are `Inbound` and `Outbound`.
	Direction interface{}
	// The name of the security rule. This needs to be unique across all Rules in the Network Security Group. Changing this forces a new resource to be created.
	Name interface{}
	// The name of the Network Security Group that we want to attach the rule to. Changing this forces a new resource to be created.
	NetworkSecurityGroupName interface{}
	// Specifies the priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.
	Priority interface{}
	// Network protocol this rule applies to. Possible values include `Tcp`, `Udp` or `*` (which matches both).
	Protocol interface{}
	// The name of the resource group in which to create the Network Security Rule. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// CIDR or source IP range or * to match any IP. Tags such as ‘VirtualNetwork’, ‘AzureLoadBalancer’ and ‘Internet’ can also be used. This is required if `source_address_prefixes` is not specified.
	SourceAddressPrefix interface{}
	// List of source address prefixes. Tags may not be used. This is required if `source_address_prefix` is not specified.
	SourceAddressPrefixes interface{}
	// A List of source Application Security Group ID's
	SourceApplicationSecurityGroupIds interface{}
	// Source Port or Range. Integer or range between `0` and `65535` or `*` to match any. This is required if `source_port_ranges` is not specified.
	SourcePortRange interface{}
	// List of source ports or port ranges. This is required if `source_port_range` is not specified.
	SourcePortRanges interface{}
}
