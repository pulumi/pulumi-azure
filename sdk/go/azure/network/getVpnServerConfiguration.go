// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing VPN Server Configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := network.LookupVpnServerConfiguration(ctx, &network.LookupVpnServerConfigurationArgs{
//				Name:              "existing-local-vpn-server-configuration",
//				ResourceGroupName: "existing-resource-group",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("azurermVpnServerConfiguration", example.Id)
//			return nil
//		})
//	}
//
// ```
func LookupVpnServerConfiguration(ctx *pulumi.Context, args *LookupVpnServerConfigurationArgs, opts ...pulumi.InvokeOption) (*LookupVpnServerConfigurationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVpnServerConfigurationResult
	err := ctx.Invoke("azure:network/getVpnServerConfiguration:getVpnServerConfiguration", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVpnServerConfiguration.
type LookupVpnServerConfigurationArgs struct {
	// The Name of the VPN Server Configuration.
	Name string `pulumi:"name"`
	// The name of the Resource Group where the VPN Server Configuration exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getVpnServerConfiguration.
type LookupVpnServerConfigurationResult struct {
	// A `azureActiveDirectoryAuthentication` block as defined below.
	AzureActiveDirectoryAuthentications []GetVpnServerConfigurationAzureActiveDirectoryAuthentication `pulumi:"azureActiveDirectoryAuthentications"`
	// One or more `clientRevokedCertificate` blocks as defined below.
	ClientRevokedCertificates []GetVpnServerConfigurationClientRevokedCertificate `pulumi:"clientRevokedCertificates"`
	// One or more `clientRootCertificate` blocks as defined below.
	ClientRootCertificates []GetVpnServerConfigurationClientRootCertificate `pulumi:"clientRootCertificates"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The `bgpSettings` block as defined below.
	IpsecPolicies []GetVpnServerConfigurationIpsecPolicy `pulumi:"ipsecPolicies"`
	// The Azure Region where the VPN Server Configuration exists.
	Location string `pulumi:"location"`
	// The name used to uniquely identify this certificate.
	Name string `pulumi:"name"`
	// A `radius` block as defined below.
	Radii             []GetVpnServerConfigurationRadius `pulumi:"radii"`
	ResourceGroupName string                            `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the VPN Server Configuration.
	Tags map[string]string `pulumi:"tags"`
	// The list of Authentication Types applicable for the VPN Server Configuration.
	VpnAuthenticationTypes []string `pulumi:"vpnAuthenticationTypes"`
	// The list of VPN Protocols to use for the VPN Server Configuration.
	VpnProtocols []string `pulumi:"vpnProtocols"`
}

func LookupVpnServerConfigurationOutput(ctx *pulumi.Context, args LookupVpnServerConfigurationOutputArgs, opts ...pulumi.InvokeOption) LookupVpnServerConfigurationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupVpnServerConfigurationResultOutput, error) {
			args := v.(LookupVpnServerConfigurationArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupVpnServerConfigurationResult
			secret, err := ctx.InvokePackageRaw("azure:network/getVpnServerConfiguration:getVpnServerConfiguration", args, &rv, "", opts...)
			if err != nil {
				return LookupVpnServerConfigurationResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupVpnServerConfigurationResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupVpnServerConfigurationResultOutput), nil
			}
			return output, nil
		}).(LookupVpnServerConfigurationResultOutput)
}

// A collection of arguments for invoking getVpnServerConfiguration.
type LookupVpnServerConfigurationOutputArgs struct {
	// The Name of the VPN Server Configuration.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Resource Group where the VPN Server Configuration exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupVpnServerConfigurationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVpnServerConfigurationArgs)(nil)).Elem()
}

// A collection of values returned by getVpnServerConfiguration.
type LookupVpnServerConfigurationResultOutput struct{ *pulumi.OutputState }

func (LookupVpnServerConfigurationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVpnServerConfigurationResult)(nil)).Elem()
}

func (o LookupVpnServerConfigurationResultOutput) ToLookupVpnServerConfigurationResultOutput() LookupVpnServerConfigurationResultOutput {
	return o
}

func (o LookupVpnServerConfigurationResultOutput) ToLookupVpnServerConfigurationResultOutputWithContext(ctx context.Context) LookupVpnServerConfigurationResultOutput {
	return o
}

// A `azureActiveDirectoryAuthentication` block as defined below.
func (o LookupVpnServerConfigurationResultOutput) AzureActiveDirectoryAuthentications() GetVpnServerConfigurationAzureActiveDirectoryAuthenticationArrayOutput {
	return o.ApplyT(func(v LookupVpnServerConfigurationResult) []GetVpnServerConfigurationAzureActiveDirectoryAuthentication {
		return v.AzureActiveDirectoryAuthentications
	}).(GetVpnServerConfigurationAzureActiveDirectoryAuthenticationArrayOutput)
}

// One or more `clientRevokedCertificate` blocks as defined below.
func (o LookupVpnServerConfigurationResultOutput) ClientRevokedCertificates() GetVpnServerConfigurationClientRevokedCertificateArrayOutput {
	return o.ApplyT(func(v LookupVpnServerConfigurationResult) []GetVpnServerConfigurationClientRevokedCertificate {
		return v.ClientRevokedCertificates
	}).(GetVpnServerConfigurationClientRevokedCertificateArrayOutput)
}

// One or more `clientRootCertificate` blocks as defined below.
func (o LookupVpnServerConfigurationResultOutput) ClientRootCertificates() GetVpnServerConfigurationClientRootCertificateArrayOutput {
	return o.ApplyT(func(v LookupVpnServerConfigurationResult) []GetVpnServerConfigurationClientRootCertificate {
		return v.ClientRootCertificates
	}).(GetVpnServerConfigurationClientRootCertificateArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupVpnServerConfigurationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpnServerConfigurationResult) string { return v.Id }).(pulumi.StringOutput)
}

// The `bgpSettings` block as defined below.
func (o LookupVpnServerConfigurationResultOutput) IpsecPolicies() GetVpnServerConfigurationIpsecPolicyArrayOutput {
	return o.ApplyT(func(v LookupVpnServerConfigurationResult) []GetVpnServerConfigurationIpsecPolicy {
		return v.IpsecPolicies
	}).(GetVpnServerConfigurationIpsecPolicyArrayOutput)
}

// The Azure Region where the VPN Server Configuration exists.
func (o LookupVpnServerConfigurationResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpnServerConfigurationResult) string { return v.Location }).(pulumi.StringOutput)
}

// The name used to uniquely identify this certificate.
func (o LookupVpnServerConfigurationResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpnServerConfigurationResult) string { return v.Name }).(pulumi.StringOutput)
}

// A `radius` block as defined below.
func (o LookupVpnServerConfigurationResultOutput) Radii() GetVpnServerConfigurationRadiusArrayOutput {
	return o.ApplyT(func(v LookupVpnServerConfigurationResult) []GetVpnServerConfigurationRadius { return v.Radii }).(GetVpnServerConfigurationRadiusArrayOutput)
}

func (o LookupVpnServerConfigurationResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpnServerConfigurationResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the VPN Server Configuration.
func (o LookupVpnServerConfigurationResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupVpnServerConfigurationResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The list of Authentication Types applicable for the VPN Server Configuration.
func (o LookupVpnServerConfigurationResultOutput) VpnAuthenticationTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVpnServerConfigurationResult) []string { return v.VpnAuthenticationTypes }).(pulumi.StringArrayOutput)
}

// The list of VPN Protocols to use for the VPN Server Configuration.
func (o LookupVpnServerConfigurationResultOutput) VpnProtocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVpnServerConfigurationResult) []string { return v.VpnProtocols }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVpnServerConfigurationResultOutput{})
}
