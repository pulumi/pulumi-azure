// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"errors"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Network Manager Connectivity Configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := network.LookupNetworkManagerConnectivityConfiguration(ctx, &network.LookupNetworkManagerConnectivityConfigurationArgs{
//				Name:             "existing",
//				NetworkManagerId: "TODO",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("id", example.Id)
//			return nil
//		})
//	}
//
// ```
func LookupNetworkManagerConnectivityConfiguration(ctx *pulumi.Context, args *LookupNetworkManagerConnectivityConfigurationArgs, opts ...pulumi.InvokeOption) (*LookupNetworkManagerConnectivityConfigurationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	invokeOpts, optsErr := pulumi.NewInvokeOptions(opts...)
	if optsErr != nil {
		return &LookupNetworkManagerConnectivityConfigurationResult{}, optsErr
	}
	if len(invokeOpts.DependsOn) > 0 {
		return &LookupNetworkManagerConnectivityConfigurationResult{}, errors.New("DependsOn is not supported for direct form invoke LookupNetworkManagerConnectivityConfiguration, use LookupNetworkManagerConnectivityConfigurationOutput instead")
	}
	if len(invokeOpts.DependsOnInputs) > 0 {
		return &LookupNetworkManagerConnectivityConfigurationResult{}, errors.New("DependsOnInputs is not supported for direct form invoke LookupNetworkManagerConnectivityConfiguration, use LookupNetworkManagerConnectivityConfigurationOutput instead")
	}
	var rv LookupNetworkManagerConnectivityConfigurationResult
	err := ctx.Invoke("azure:network/getNetworkManagerConnectivityConfiguration:getNetworkManagerConnectivityConfiguration", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNetworkManagerConnectivityConfiguration.
type LookupNetworkManagerConnectivityConfigurationArgs struct {
	// The name of this Network Manager Connectivity Configuration.
	Name string `pulumi:"name"`
	// The ID of the Network Manager.
	NetworkManagerId string `pulumi:"networkManagerId"`
}

// A collection of values returned by getNetworkManagerConnectivityConfiguration.
type LookupNetworkManagerConnectivityConfigurationResult struct {
	// An `appliesToGroup` block as defined below.
	AppliesToGroups []GetNetworkManagerConnectivityConfigurationAppliesToGroup `pulumi:"appliesToGroups"`
	// The connectivity topology type.
	ConnectivityTopology string `pulumi:"connectivityTopology"`
	// Whether to current existing Virtual Network Peering in the Connectivity Configuration affected scope.
	DeleteExistingPeeringEnabled bool `pulumi:"deleteExistingPeeringEnabled"`
	// The description of the Connectivity Configuration.
	Description string `pulumi:"description"`
	// Whether global mesh is supported.
	GlobalMeshEnabled bool `pulumi:"globalMeshEnabled"`
	// A `hub` block as defined below.
	Hubs []GetNetworkManagerConnectivityConfigurationHub `pulumi:"hubs"`
	// The provider-assigned unique ID for this managed resource.
	Id               string `pulumi:"id"`
	Name             string `pulumi:"name"`
	NetworkManagerId string `pulumi:"networkManagerId"`
}

func LookupNetworkManagerConnectivityConfigurationOutput(ctx *pulumi.Context, args LookupNetworkManagerConnectivityConfigurationOutputArgs, opts ...pulumi.InvokeOption) LookupNetworkManagerConnectivityConfigurationResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupNetworkManagerConnectivityConfigurationResultOutput, error) {
			args := v.(LookupNetworkManagerConnectivityConfigurationArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupNetworkManagerConnectivityConfigurationResult
			secret, deps, err := ctx.InvokePackageRawWithDeps("azure:network/getNetworkManagerConnectivityConfiguration:getNetworkManagerConnectivityConfiguration", args, &rv, "", opts...)
			if err != nil {
				return LookupNetworkManagerConnectivityConfigurationResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupNetworkManagerConnectivityConfigurationResultOutput)
			output = pulumi.OutputWithDependencies(ctx.Context(), output, deps...).(LookupNetworkManagerConnectivityConfigurationResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupNetworkManagerConnectivityConfigurationResultOutput), nil
			}
			return output, nil
		}).(LookupNetworkManagerConnectivityConfigurationResultOutput)
}

// A collection of arguments for invoking getNetworkManagerConnectivityConfiguration.
type LookupNetworkManagerConnectivityConfigurationOutputArgs struct {
	// The name of this Network Manager Connectivity Configuration.
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of the Network Manager.
	NetworkManagerId pulumi.StringInput `pulumi:"networkManagerId"`
}

func (LookupNetworkManagerConnectivityConfigurationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkManagerConnectivityConfigurationArgs)(nil)).Elem()
}

// A collection of values returned by getNetworkManagerConnectivityConfiguration.
type LookupNetworkManagerConnectivityConfigurationResultOutput struct{ *pulumi.OutputState }

func (LookupNetworkManagerConnectivityConfigurationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkManagerConnectivityConfigurationResult)(nil)).Elem()
}

func (o LookupNetworkManagerConnectivityConfigurationResultOutput) ToLookupNetworkManagerConnectivityConfigurationResultOutput() LookupNetworkManagerConnectivityConfigurationResultOutput {
	return o
}

func (o LookupNetworkManagerConnectivityConfigurationResultOutput) ToLookupNetworkManagerConnectivityConfigurationResultOutputWithContext(ctx context.Context) LookupNetworkManagerConnectivityConfigurationResultOutput {
	return o
}

// An `appliesToGroup` block as defined below.
func (o LookupNetworkManagerConnectivityConfigurationResultOutput) AppliesToGroups() GetNetworkManagerConnectivityConfigurationAppliesToGroupArrayOutput {
	return o.ApplyT(func(v LookupNetworkManagerConnectivityConfigurationResult) []GetNetworkManagerConnectivityConfigurationAppliesToGroup {
		return v.AppliesToGroups
	}).(GetNetworkManagerConnectivityConfigurationAppliesToGroupArrayOutput)
}

// The connectivity topology type.
func (o LookupNetworkManagerConnectivityConfigurationResultOutput) ConnectivityTopology() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkManagerConnectivityConfigurationResult) string { return v.ConnectivityTopology }).(pulumi.StringOutput)
}

// Whether to current existing Virtual Network Peering in the Connectivity Configuration affected scope.
func (o LookupNetworkManagerConnectivityConfigurationResultOutput) DeleteExistingPeeringEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNetworkManagerConnectivityConfigurationResult) bool {
		return v.DeleteExistingPeeringEnabled
	}).(pulumi.BoolOutput)
}

// The description of the Connectivity Configuration.
func (o LookupNetworkManagerConnectivityConfigurationResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkManagerConnectivityConfigurationResult) string { return v.Description }).(pulumi.StringOutput)
}

// Whether global mesh is supported.
func (o LookupNetworkManagerConnectivityConfigurationResultOutput) GlobalMeshEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNetworkManagerConnectivityConfigurationResult) bool { return v.GlobalMeshEnabled }).(pulumi.BoolOutput)
}

// A `hub` block as defined below.
func (o LookupNetworkManagerConnectivityConfigurationResultOutput) Hubs() GetNetworkManagerConnectivityConfigurationHubArrayOutput {
	return o.ApplyT(func(v LookupNetworkManagerConnectivityConfigurationResult) []GetNetworkManagerConnectivityConfigurationHub {
		return v.Hubs
	}).(GetNetworkManagerConnectivityConfigurationHubArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupNetworkManagerConnectivityConfigurationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkManagerConnectivityConfigurationResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupNetworkManagerConnectivityConfigurationResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkManagerConnectivityConfigurationResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupNetworkManagerConnectivityConfigurationResultOutput) NetworkManagerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkManagerConnectivityConfigurationResult) string { return v.NetworkManagerId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNetworkManagerConnectivityConfigurationResultOutput{})
}
