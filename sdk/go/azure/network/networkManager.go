// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Network Managers.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			current, err := core.LookupSubscription(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = network.NewNetworkManager(ctx, "exampleNetworkManager", &network.NetworkManagerArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Scope: &network.NetworkManagerScopeArgs{
//					SubscriptionIds: pulumi.StringArray{
//						*pulumi.String(current.Id),
//					},
//				},
//				ScopeAccesses: pulumi.StringArray{
//					pulumi.String("Connectivity"),
//					pulumi.String("SecurityAdmin"),
//				},
//				Description: pulumi.String("example network manager"),
//				Tags: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Network Managers can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:network/networkManager:NetworkManager example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Network/networkManagers/networkManager1
//
// ```
type NetworkManager struct {
	pulumi.CustomResourceState

	// One or more `crossTenantScopes` blocks as defined below.
	CrossTenantScopes NetworkManagerCrossTenantScopeArrayOutput `pulumi:"crossTenantScopes"`
	// A description of the network manager.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the Azure Region where the Network Managers should exist. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name which should be used for this Network Managers. Changing this forces a new Network Managers to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the name of the Resource Group where the Network Managers should exist. Changing this forces a new Network Managers to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A `scope` block as defined below.
	Scope NetworkManagerScopeOutput `pulumi:"scope"`
	// A list of configuration deployment type. Possible values are `Connectivity` and `SecurityAdmin`, corresponds to if Connectivity Configuration and Security Admin Configuration is allowed for the Network Manager.
	ScopeAccesses pulumi.StringArrayOutput `pulumi:"scopeAccesses"`
	// A mapping of tags which should be assigned to the Network Managers.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewNetworkManager registers a new resource with the given unique name, arguments, and options.
func NewNetworkManager(ctx *pulumi.Context,
	name string, args *NetworkManagerArgs, opts ...pulumi.ResourceOption) (*NetworkManager, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	if args.ScopeAccesses == nil {
		return nil, errors.New("invalid value for required argument 'ScopeAccesses'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkManager
	err := ctx.RegisterResource("azure:network/networkManager:NetworkManager", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkManager gets an existing NetworkManager resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkManager(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkManagerState, opts ...pulumi.ResourceOption) (*NetworkManager, error) {
	var resource NetworkManager
	err := ctx.ReadResource("azure:network/networkManager:NetworkManager", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkManager resources.
type networkManagerState struct {
	// One or more `crossTenantScopes` blocks as defined below.
	CrossTenantScopes []NetworkManagerCrossTenantScope `pulumi:"crossTenantScopes"`
	// A description of the network manager.
	Description *string `pulumi:"description"`
	// Specifies the Azure Region where the Network Managers should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name which should be used for this Network Managers. Changing this forces a new Network Managers to be created.
	Name *string `pulumi:"name"`
	// Specifies the name of the Resource Group where the Network Managers should exist. Changing this forces a new Network Managers to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A `scope` block as defined below.
	Scope *NetworkManagerScope `pulumi:"scope"`
	// A list of configuration deployment type. Possible values are `Connectivity` and `SecurityAdmin`, corresponds to if Connectivity Configuration and Security Admin Configuration is allowed for the Network Manager.
	ScopeAccesses []string `pulumi:"scopeAccesses"`
	// A mapping of tags which should be assigned to the Network Managers.
	Tags map[string]string `pulumi:"tags"`
}

type NetworkManagerState struct {
	// One or more `crossTenantScopes` blocks as defined below.
	CrossTenantScopes NetworkManagerCrossTenantScopeArrayInput
	// A description of the network manager.
	Description pulumi.StringPtrInput
	// Specifies the Azure Region where the Network Managers should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name which should be used for this Network Managers. Changing this forces a new Network Managers to be created.
	Name pulumi.StringPtrInput
	// Specifies the name of the Resource Group where the Network Managers should exist. Changing this forces a new Network Managers to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A `scope` block as defined below.
	Scope NetworkManagerScopePtrInput
	// A list of configuration deployment type. Possible values are `Connectivity` and `SecurityAdmin`, corresponds to if Connectivity Configuration and Security Admin Configuration is allowed for the Network Manager.
	ScopeAccesses pulumi.StringArrayInput
	// A mapping of tags which should be assigned to the Network Managers.
	Tags pulumi.StringMapInput
}

func (NetworkManagerState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkManagerState)(nil)).Elem()
}

type networkManagerArgs struct {
	// A description of the network manager.
	Description *string `pulumi:"description"`
	// Specifies the Azure Region where the Network Managers should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name which should be used for this Network Managers. Changing this forces a new Network Managers to be created.
	Name *string `pulumi:"name"`
	// Specifies the name of the Resource Group where the Network Managers should exist. Changing this forces a new Network Managers to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A `scope` block as defined below.
	Scope NetworkManagerScope `pulumi:"scope"`
	// A list of configuration deployment type. Possible values are `Connectivity` and `SecurityAdmin`, corresponds to if Connectivity Configuration and Security Admin Configuration is allowed for the Network Manager.
	ScopeAccesses []string `pulumi:"scopeAccesses"`
	// A mapping of tags which should be assigned to the Network Managers.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a NetworkManager resource.
type NetworkManagerArgs struct {
	// A description of the network manager.
	Description pulumi.StringPtrInput
	// Specifies the Azure Region where the Network Managers should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name which should be used for this Network Managers. Changing this forces a new Network Managers to be created.
	Name pulumi.StringPtrInput
	// Specifies the name of the Resource Group where the Network Managers should exist. Changing this forces a new Network Managers to be created.
	ResourceGroupName pulumi.StringInput
	// A `scope` block as defined below.
	Scope NetworkManagerScopeInput
	// A list of configuration deployment type. Possible values are `Connectivity` and `SecurityAdmin`, corresponds to if Connectivity Configuration and Security Admin Configuration is allowed for the Network Manager.
	ScopeAccesses pulumi.StringArrayInput
	// A mapping of tags which should be assigned to the Network Managers.
	Tags pulumi.StringMapInput
}

func (NetworkManagerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkManagerArgs)(nil)).Elem()
}

type NetworkManagerInput interface {
	pulumi.Input

	ToNetworkManagerOutput() NetworkManagerOutput
	ToNetworkManagerOutputWithContext(ctx context.Context) NetworkManagerOutput
}

func (*NetworkManager) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkManager)(nil)).Elem()
}

func (i *NetworkManager) ToNetworkManagerOutput() NetworkManagerOutput {
	return i.ToNetworkManagerOutputWithContext(context.Background())
}

func (i *NetworkManager) ToNetworkManagerOutputWithContext(ctx context.Context) NetworkManagerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkManagerOutput)
}

// NetworkManagerArrayInput is an input type that accepts NetworkManagerArray and NetworkManagerArrayOutput values.
// You can construct a concrete instance of `NetworkManagerArrayInput` via:
//
//	NetworkManagerArray{ NetworkManagerArgs{...} }
type NetworkManagerArrayInput interface {
	pulumi.Input

	ToNetworkManagerArrayOutput() NetworkManagerArrayOutput
	ToNetworkManagerArrayOutputWithContext(context.Context) NetworkManagerArrayOutput
}

type NetworkManagerArray []NetworkManagerInput

func (NetworkManagerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkManager)(nil)).Elem()
}

func (i NetworkManagerArray) ToNetworkManagerArrayOutput() NetworkManagerArrayOutput {
	return i.ToNetworkManagerArrayOutputWithContext(context.Background())
}

func (i NetworkManagerArray) ToNetworkManagerArrayOutputWithContext(ctx context.Context) NetworkManagerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkManagerArrayOutput)
}

// NetworkManagerMapInput is an input type that accepts NetworkManagerMap and NetworkManagerMapOutput values.
// You can construct a concrete instance of `NetworkManagerMapInput` via:
//
//	NetworkManagerMap{ "key": NetworkManagerArgs{...} }
type NetworkManagerMapInput interface {
	pulumi.Input

	ToNetworkManagerMapOutput() NetworkManagerMapOutput
	ToNetworkManagerMapOutputWithContext(context.Context) NetworkManagerMapOutput
}

type NetworkManagerMap map[string]NetworkManagerInput

func (NetworkManagerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkManager)(nil)).Elem()
}

func (i NetworkManagerMap) ToNetworkManagerMapOutput() NetworkManagerMapOutput {
	return i.ToNetworkManagerMapOutputWithContext(context.Background())
}

func (i NetworkManagerMap) ToNetworkManagerMapOutputWithContext(ctx context.Context) NetworkManagerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkManagerMapOutput)
}

type NetworkManagerOutput struct{ *pulumi.OutputState }

func (NetworkManagerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkManager)(nil)).Elem()
}

func (o NetworkManagerOutput) ToNetworkManagerOutput() NetworkManagerOutput {
	return o
}

func (o NetworkManagerOutput) ToNetworkManagerOutputWithContext(ctx context.Context) NetworkManagerOutput {
	return o
}

// One or more `crossTenantScopes` blocks as defined below.
func (o NetworkManagerOutput) CrossTenantScopes() NetworkManagerCrossTenantScopeArrayOutput {
	return o.ApplyT(func(v *NetworkManager) NetworkManagerCrossTenantScopeArrayOutput { return v.CrossTenantScopes }).(NetworkManagerCrossTenantScopeArrayOutput)
}

// A description of the network manager.
func (o NetworkManagerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkManager) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the Azure Region where the Network Managers should exist. Changing this forces a new resource to be created.
func (o NetworkManagerOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkManager) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name which should be used for this Network Managers. Changing this forces a new Network Managers to be created.
func (o NetworkManagerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkManager) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the name of the Resource Group where the Network Managers should exist. Changing this forces a new Network Managers to be created.
func (o NetworkManagerOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkManager) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A `scope` block as defined below.
func (o NetworkManagerOutput) Scope() NetworkManagerScopeOutput {
	return o.ApplyT(func(v *NetworkManager) NetworkManagerScopeOutput { return v.Scope }).(NetworkManagerScopeOutput)
}

// A list of configuration deployment type. Possible values are `Connectivity` and `SecurityAdmin`, corresponds to if Connectivity Configuration and Security Admin Configuration is allowed for the Network Manager.
func (o NetworkManagerOutput) ScopeAccesses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkManager) pulumi.StringArrayOutput { return v.ScopeAccesses }).(pulumi.StringArrayOutput)
}

// A mapping of tags which should be assigned to the Network Managers.
func (o NetworkManagerOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkManager) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type NetworkManagerArrayOutput struct{ *pulumi.OutputState }

func (NetworkManagerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkManager)(nil)).Elem()
}

func (o NetworkManagerArrayOutput) ToNetworkManagerArrayOutput() NetworkManagerArrayOutput {
	return o
}

func (o NetworkManagerArrayOutput) ToNetworkManagerArrayOutputWithContext(ctx context.Context) NetworkManagerArrayOutput {
	return o
}

func (o NetworkManagerArrayOutput) Index(i pulumi.IntInput) NetworkManagerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkManager {
		return vs[0].([]*NetworkManager)[vs[1].(int)]
	}).(NetworkManagerOutput)
}

type NetworkManagerMapOutput struct{ *pulumi.OutputState }

func (NetworkManagerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkManager)(nil)).Elem()
}

func (o NetworkManagerMapOutput) ToNetworkManagerMapOutput() NetworkManagerMapOutput {
	return o
}

func (o NetworkManagerMapOutput) ToNetworkManagerMapOutputWithContext(ctx context.Context) NetworkManagerMapOutput {
	return o
}

func (o NetworkManagerMapOutput) MapIndex(k pulumi.StringInput) NetworkManagerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkManager {
		return vs[0].(map[string]*NetworkManager)[vs[1].(string)]
	}).(NetworkManagerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkManagerInput)(nil)).Elem(), &NetworkManager{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkManagerArrayInput)(nil)).Elem(), NetworkManagerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkManagerMapInput)(nil)).Elem(), NetworkManagerMap{})
	pulumi.RegisterOutputType(NetworkManagerOutput{})
	pulumi.RegisterOutputType(NetworkManagerArrayOutput{})
	pulumi.RegisterOutputType(NetworkManagerMapOutput{})
}
