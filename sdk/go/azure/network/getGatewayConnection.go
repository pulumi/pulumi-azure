// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Use this data source to access information about an existing Virtual Network Gateway Connection.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/d/virtual_network_gateway_connection.html.markdown.
func LookupGatewayConnection(ctx *pulumi.Context, args *GetGatewayConnectionArgs) (*GetGatewayConnectionResult, error) {
	inputs := make(map[string]interface{})
	if args != nil {
		inputs["name"] = args.Name
		inputs["resourceGroupName"] = args.ResourceGroupName
	}
	outputs, err := ctx.Invoke("azure:network/getGatewayConnection:getGatewayConnection", inputs)
	if err != nil {
		return nil, err
	}
	return &GetGatewayConnectionResult{
		AuthorizationKey: outputs["authorizationKey"],
		ConnectionProtocol: outputs["connectionProtocol"],
		EgressBytesTransferred: outputs["egressBytesTransferred"],
		EnableBgp: outputs["enableBgp"],
		ExpressRouteCircuitId: outputs["expressRouteCircuitId"],
		ExpressRouteGatewayBypass: outputs["expressRouteGatewayBypass"],
		IngressBytesTransferred: outputs["ingressBytesTransferred"],
		IpsecPolicies: outputs["ipsecPolicies"],
		LocalNetworkGatewayId: outputs["localNetworkGatewayId"],
		Location: outputs["location"],
		Name: outputs["name"],
		PeerVirtualNetworkGatewayId: outputs["peerVirtualNetworkGatewayId"],
		ResourceGroupName: outputs["resourceGroupName"],
		ResourceGuid: outputs["resourceGuid"],
		RoutingWeight: outputs["routingWeight"],
		SharedKey: outputs["sharedKey"],
		Tags: outputs["tags"],
		Type: outputs["type"],
		UsePolicyBasedTrafficSelectors: outputs["usePolicyBasedTrafficSelectors"],
		VirtualNetworkGatewayId: outputs["virtualNetworkGatewayId"],
		Id: outputs["id"],
	}, nil
}

// A collection of arguments for invoking getGatewayConnection.
type GetGatewayConnectionArgs struct {
	// Specifies the name of the Virtual Network Gateway Connection.
	Name interface{}
	// Specifies the name of the resource group the Virtual Network Gateway Connection is located in.
	ResourceGroupName interface{}
}

// A collection of values returned by getGatewayConnection.
type GetGatewayConnectionResult struct {
	// The authorization key associated with the
	// Express Route Circuit. This field is present only if the type is an
	// ExpressRoute connection.
	AuthorizationKey interface{}
	ConnectionProtocol interface{}
	EgressBytesTransferred interface{}
	// If `true`, BGP (Border Gateway Protocol) is enabled
	// for this connection.
	EnableBgp interface{}
	// The ID of the Express Route Circuit
	// (i.e. when `type` is `ExpressRoute`).
	ExpressRouteCircuitId interface{}
	// If `true`, data packets will bypass ExpressRoute Gateway for data forwarding. This is only valid for ExpressRoute connections.
	ExpressRouteGatewayBypass interface{}
	IngressBytesTransferred interface{}
	IpsecPolicies interface{}
	// The ID of the local network gateway
	// when a Site-to-Site connection (i.e. when `type` is `IPsec`).
	LocalNetworkGatewayId interface{}
	// The location/region where the connection is
	// located.
	Location interface{}
	Name interface{}
	// The ID of the peer virtual
	// network gateway when a VNet-to-VNet connection (i.e. when `type`
	// is `Vnet2Vnet`).
	PeerVirtualNetworkGatewayId interface{}
	ResourceGroupName interface{}
	ResourceGuid interface{}
	// The routing weight.
	RoutingWeight interface{}
	// The shared IPSec key. 
	SharedKey interface{}
	// (Optional) A mapping of tags to assign to the resource.
	Tags interface{}
	// The type of connection. Valid options are `IPsec`
	// (Site-to-Site), `ExpressRoute` (ExpressRoute), and `Vnet2Vnet` (VNet-to-VNet).
	Type interface{}
	// If `true`, policy-based traffic
	// selectors are enabled for this connection. Enabling policy-based traffic
	// selectors requires an `ipsec_policy` block.
	UsePolicyBasedTrafficSelectors interface{}
	// The ID of the Virtual Network Gateway
	// in which the connection is created.
	VirtualNetworkGatewayId interface{}
	// id is the provider-assigned unique ID for this managed resource.
	Id interface{}
}
