// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Express Route Connection.
//
// > **NOTE:** The provider status of the Express Route Circuit must be set as provisioned while creating the Express Route Connection. See more details [here](https://docs.microsoft.com/azure/expressroute/expressroute-howto-circuit-portal-resource-manager#send-the-service-key-to-your-connectivity-provider-for-provisioning).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualWan, err := network.NewVirtualWan(ctx, "exampleVirtualWan", &network.VirtualWanArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualHub, err := network.NewVirtualHub(ctx, "exampleVirtualHub", &network.VirtualHubArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				VirtualWanId:      exampleVirtualWan.ID(),
//				AddressPrefix:     pulumi.String("10.0.1.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleExpressRouteGateway, err := network.NewExpressRouteGateway(ctx, "exampleExpressRouteGateway", &network.ExpressRouteGatewayArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				VirtualHubId:      exampleVirtualHub.ID(),
//				ScaleUnits:        pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			exampleExpressRoutePort, err := network.NewExpressRoutePort(ctx, "exampleExpressRoutePort", &network.ExpressRoutePortArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				PeeringLocation:   pulumi.String("Equinix-Seattle-SE2"),
//				BandwidthInGbps:   pulumi.Int(10),
//				Encapsulation:     pulumi.String("Dot1Q"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleExpressRouteCircuit, err := network.NewExpressRouteCircuit(ctx, "exampleExpressRouteCircuit", &network.ExpressRouteCircuitArgs{
//				Location:           exampleResourceGroup.Location,
//				ResourceGroupName:  exampleResourceGroup.Name,
//				ExpressRoutePortId: exampleExpressRoutePort.ID(),
//				BandwidthInGbps:    pulumi.Float64(5),
//				Sku: &network.ExpressRouteCircuitSkuArgs{
//					Tier:   pulumi.String("Standard"),
//					Family: pulumi.String("MeteredData"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleExpressRouteCircuitPeering, err := network.NewExpressRouteCircuitPeering(ctx, "exampleExpressRouteCircuitPeering", &network.ExpressRouteCircuitPeeringArgs{
//				PeeringType:                pulumi.String("AzurePrivatePeering"),
//				ExpressRouteCircuitName:    exampleExpressRouteCircuit.Name,
//				ResourceGroupName:          exampleResourceGroup.Name,
//				SharedKey:                  pulumi.String("ItsASecret"),
//				PeerAsn:                    pulumi.Int(100),
//				PrimaryPeerAddressPrefix:   pulumi.String("192.168.1.0/30"),
//				SecondaryPeerAddressPrefix: pulumi.String("192.168.2.0/30"),
//				VlanId:                     pulumi.Int(100),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = network.NewExpressRouteConnection(ctx, "exampleExpressRouteConnection", &network.ExpressRouteConnectionArgs{
//				ExpressRouteGatewayId:        exampleExpressRouteGateway.ID(),
//				ExpressRouteCircuitPeeringId: exampleExpressRouteCircuitPeering.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Express Route Connections can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:network/expressRouteConnection:ExpressRouteConnection example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/expressRouteGateways/expressRouteGateway1/expressRouteConnections/connection1
//
// ```
type ExpressRouteConnection struct {
	pulumi.CustomResourceState

	// The authorization key to establish the Express Route Connection.
	AuthorizationKey pulumi.StringPtrOutput `pulumi:"authorizationKey"`
	// Is Internet security enabled for this Express Route Connection?
	EnableInternetSecurity pulumi.BoolPtrOutput `pulumi:"enableInternetSecurity"`
	// The ID of the Express Route Circuit Peering that this Express Route Connection connects with. Changing this forces a new resource to be created.
	ExpressRouteCircuitPeeringId pulumi.StringOutput `pulumi:"expressRouteCircuitPeeringId"`
	// Specified whether Fast Path is enabled for Virtual Wan Firewall Hub. Defaults to `false`.
	ExpressRouteGatewayBypassEnabled pulumi.BoolPtrOutput `pulumi:"expressRouteGatewayBypassEnabled"`
	// The ID of the Express Route Gateway that this Express Route Connection connects with. Changing this forces a new resource to be created.
	ExpressRouteGatewayId pulumi.StringOutput `pulumi:"expressRouteGatewayId"`
	// The name which should be used for this Express Route Connection. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A `routing` block as defined below.
	Routing ExpressRouteConnectionRoutingOutput `pulumi:"routing"`
	// The routing weight associated to the Express Route Connection. Possible value is between `0` and `32000`. Defaults to `0`.
	RoutingWeight pulumi.IntPtrOutput `pulumi:"routingWeight"`
}

// NewExpressRouteConnection registers a new resource with the given unique name, arguments, and options.
func NewExpressRouteConnection(ctx *pulumi.Context,
	name string, args *ExpressRouteConnectionArgs, opts ...pulumi.ResourceOption) (*ExpressRouteConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExpressRouteCircuitPeeringId == nil {
		return nil, errors.New("invalid value for required argument 'ExpressRouteCircuitPeeringId'")
	}
	if args.ExpressRouteGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'ExpressRouteGatewayId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ExpressRouteConnection
	err := ctx.RegisterResource("azure:network/expressRouteConnection:ExpressRouteConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExpressRouteConnection gets an existing ExpressRouteConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExpressRouteConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExpressRouteConnectionState, opts ...pulumi.ResourceOption) (*ExpressRouteConnection, error) {
	var resource ExpressRouteConnection
	err := ctx.ReadResource("azure:network/expressRouteConnection:ExpressRouteConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExpressRouteConnection resources.
type expressRouteConnectionState struct {
	// The authorization key to establish the Express Route Connection.
	AuthorizationKey *string `pulumi:"authorizationKey"`
	// Is Internet security enabled for this Express Route Connection?
	EnableInternetSecurity *bool `pulumi:"enableInternetSecurity"`
	// The ID of the Express Route Circuit Peering that this Express Route Connection connects with. Changing this forces a new resource to be created.
	ExpressRouteCircuitPeeringId *string `pulumi:"expressRouteCircuitPeeringId"`
	// Specified whether Fast Path is enabled for Virtual Wan Firewall Hub. Defaults to `false`.
	ExpressRouteGatewayBypassEnabled *bool `pulumi:"expressRouteGatewayBypassEnabled"`
	// The ID of the Express Route Gateway that this Express Route Connection connects with. Changing this forces a new resource to be created.
	ExpressRouteGatewayId *string `pulumi:"expressRouteGatewayId"`
	// The name which should be used for this Express Route Connection. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A `routing` block as defined below.
	Routing *ExpressRouteConnectionRouting `pulumi:"routing"`
	// The routing weight associated to the Express Route Connection. Possible value is between `0` and `32000`. Defaults to `0`.
	RoutingWeight *int `pulumi:"routingWeight"`
}

type ExpressRouteConnectionState struct {
	// The authorization key to establish the Express Route Connection.
	AuthorizationKey pulumi.StringPtrInput
	// Is Internet security enabled for this Express Route Connection?
	EnableInternetSecurity pulumi.BoolPtrInput
	// The ID of the Express Route Circuit Peering that this Express Route Connection connects with. Changing this forces a new resource to be created.
	ExpressRouteCircuitPeeringId pulumi.StringPtrInput
	// Specified whether Fast Path is enabled for Virtual Wan Firewall Hub. Defaults to `false`.
	ExpressRouteGatewayBypassEnabled pulumi.BoolPtrInput
	// The ID of the Express Route Gateway that this Express Route Connection connects with. Changing this forces a new resource to be created.
	ExpressRouteGatewayId pulumi.StringPtrInput
	// The name which should be used for this Express Route Connection. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A `routing` block as defined below.
	Routing ExpressRouteConnectionRoutingPtrInput
	// The routing weight associated to the Express Route Connection. Possible value is between `0` and `32000`. Defaults to `0`.
	RoutingWeight pulumi.IntPtrInput
}

func (ExpressRouteConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*expressRouteConnectionState)(nil)).Elem()
}

type expressRouteConnectionArgs struct {
	// The authorization key to establish the Express Route Connection.
	AuthorizationKey *string `pulumi:"authorizationKey"`
	// Is Internet security enabled for this Express Route Connection?
	EnableInternetSecurity *bool `pulumi:"enableInternetSecurity"`
	// The ID of the Express Route Circuit Peering that this Express Route Connection connects with. Changing this forces a new resource to be created.
	ExpressRouteCircuitPeeringId string `pulumi:"expressRouteCircuitPeeringId"`
	// Specified whether Fast Path is enabled for Virtual Wan Firewall Hub. Defaults to `false`.
	ExpressRouteGatewayBypassEnabled *bool `pulumi:"expressRouteGatewayBypassEnabled"`
	// The ID of the Express Route Gateway that this Express Route Connection connects with. Changing this forces a new resource to be created.
	ExpressRouteGatewayId string `pulumi:"expressRouteGatewayId"`
	// The name which should be used for this Express Route Connection. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A `routing` block as defined below.
	Routing *ExpressRouteConnectionRouting `pulumi:"routing"`
	// The routing weight associated to the Express Route Connection. Possible value is between `0` and `32000`. Defaults to `0`.
	RoutingWeight *int `pulumi:"routingWeight"`
}

// The set of arguments for constructing a ExpressRouteConnection resource.
type ExpressRouteConnectionArgs struct {
	// The authorization key to establish the Express Route Connection.
	AuthorizationKey pulumi.StringPtrInput
	// Is Internet security enabled for this Express Route Connection?
	EnableInternetSecurity pulumi.BoolPtrInput
	// The ID of the Express Route Circuit Peering that this Express Route Connection connects with. Changing this forces a new resource to be created.
	ExpressRouteCircuitPeeringId pulumi.StringInput
	// Specified whether Fast Path is enabled for Virtual Wan Firewall Hub. Defaults to `false`.
	ExpressRouteGatewayBypassEnabled pulumi.BoolPtrInput
	// The ID of the Express Route Gateway that this Express Route Connection connects with. Changing this forces a new resource to be created.
	ExpressRouteGatewayId pulumi.StringInput
	// The name which should be used for this Express Route Connection. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A `routing` block as defined below.
	Routing ExpressRouteConnectionRoutingPtrInput
	// The routing weight associated to the Express Route Connection. Possible value is between `0` and `32000`. Defaults to `0`.
	RoutingWeight pulumi.IntPtrInput
}

func (ExpressRouteConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*expressRouteConnectionArgs)(nil)).Elem()
}

type ExpressRouteConnectionInput interface {
	pulumi.Input

	ToExpressRouteConnectionOutput() ExpressRouteConnectionOutput
	ToExpressRouteConnectionOutputWithContext(ctx context.Context) ExpressRouteConnectionOutput
}

func (*ExpressRouteConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**ExpressRouteConnection)(nil)).Elem()
}

func (i *ExpressRouteConnection) ToExpressRouteConnectionOutput() ExpressRouteConnectionOutput {
	return i.ToExpressRouteConnectionOutputWithContext(context.Background())
}

func (i *ExpressRouteConnection) ToExpressRouteConnectionOutputWithContext(ctx context.Context) ExpressRouteConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpressRouteConnectionOutput)
}

// ExpressRouteConnectionArrayInput is an input type that accepts ExpressRouteConnectionArray and ExpressRouteConnectionArrayOutput values.
// You can construct a concrete instance of `ExpressRouteConnectionArrayInput` via:
//
//	ExpressRouteConnectionArray{ ExpressRouteConnectionArgs{...} }
type ExpressRouteConnectionArrayInput interface {
	pulumi.Input

	ToExpressRouteConnectionArrayOutput() ExpressRouteConnectionArrayOutput
	ToExpressRouteConnectionArrayOutputWithContext(context.Context) ExpressRouteConnectionArrayOutput
}

type ExpressRouteConnectionArray []ExpressRouteConnectionInput

func (ExpressRouteConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExpressRouteConnection)(nil)).Elem()
}

func (i ExpressRouteConnectionArray) ToExpressRouteConnectionArrayOutput() ExpressRouteConnectionArrayOutput {
	return i.ToExpressRouteConnectionArrayOutputWithContext(context.Background())
}

func (i ExpressRouteConnectionArray) ToExpressRouteConnectionArrayOutputWithContext(ctx context.Context) ExpressRouteConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpressRouteConnectionArrayOutput)
}

// ExpressRouteConnectionMapInput is an input type that accepts ExpressRouteConnectionMap and ExpressRouteConnectionMapOutput values.
// You can construct a concrete instance of `ExpressRouteConnectionMapInput` via:
//
//	ExpressRouteConnectionMap{ "key": ExpressRouteConnectionArgs{...} }
type ExpressRouteConnectionMapInput interface {
	pulumi.Input

	ToExpressRouteConnectionMapOutput() ExpressRouteConnectionMapOutput
	ToExpressRouteConnectionMapOutputWithContext(context.Context) ExpressRouteConnectionMapOutput
}

type ExpressRouteConnectionMap map[string]ExpressRouteConnectionInput

func (ExpressRouteConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExpressRouteConnection)(nil)).Elem()
}

func (i ExpressRouteConnectionMap) ToExpressRouteConnectionMapOutput() ExpressRouteConnectionMapOutput {
	return i.ToExpressRouteConnectionMapOutputWithContext(context.Background())
}

func (i ExpressRouteConnectionMap) ToExpressRouteConnectionMapOutputWithContext(ctx context.Context) ExpressRouteConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpressRouteConnectionMapOutput)
}

type ExpressRouteConnectionOutput struct{ *pulumi.OutputState }

func (ExpressRouteConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExpressRouteConnection)(nil)).Elem()
}

func (o ExpressRouteConnectionOutput) ToExpressRouteConnectionOutput() ExpressRouteConnectionOutput {
	return o
}

func (o ExpressRouteConnectionOutput) ToExpressRouteConnectionOutputWithContext(ctx context.Context) ExpressRouteConnectionOutput {
	return o
}

// The authorization key to establish the Express Route Connection.
func (o ExpressRouteConnectionOutput) AuthorizationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpressRouteConnection) pulumi.StringPtrOutput { return v.AuthorizationKey }).(pulumi.StringPtrOutput)
}

// Is Internet security enabled for this Express Route Connection?
func (o ExpressRouteConnectionOutput) EnableInternetSecurity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExpressRouteConnection) pulumi.BoolPtrOutput { return v.EnableInternetSecurity }).(pulumi.BoolPtrOutput)
}

// The ID of the Express Route Circuit Peering that this Express Route Connection connects with. Changing this forces a new resource to be created.
func (o ExpressRouteConnectionOutput) ExpressRouteCircuitPeeringId() pulumi.StringOutput {
	return o.ApplyT(func(v *ExpressRouteConnection) pulumi.StringOutput { return v.ExpressRouteCircuitPeeringId }).(pulumi.StringOutput)
}

// Specified whether Fast Path is enabled for Virtual Wan Firewall Hub. Defaults to `false`.
func (o ExpressRouteConnectionOutput) ExpressRouteGatewayBypassEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExpressRouteConnection) pulumi.BoolPtrOutput { return v.ExpressRouteGatewayBypassEnabled }).(pulumi.BoolPtrOutput)
}

// The ID of the Express Route Gateway that this Express Route Connection connects with. Changing this forces a new resource to be created.
func (o ExpressRouteConnectionOutput) ExpressRouteGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *ExpressRouteConnection) pulumi.StringOutput { return v.ExpressRouteGatewayId }).(pulumi.StringOutput)
}

// The name which should be used for this Express Route Connection. Changing this forces a new resource to be created.
func (o ExpressRouteConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ExpressRouteConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A `routing` block as defined below.
func (o ExpressRouteConnectionOutput) Routing() ExpressRouteConnectionRoutingOutput {
	return o.ApplyT(func(v *ExpressRouteConnection) ExpressRouteConnectionRoutingOutput { return v.Routing }).(ExpressRouteConnectionRoutingOutput)
}

// The routing weight associated to the Express Route Connection. Possible value is between `0` and `32000`. Defaults to `0`.
func (o ExpressRouteConnectionOutput) RoutingWeight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ExpressRouteConnection) pulumi.IntPtrOutput { return v.RoutingWeight }).(pulumi.IntPtrOutput)
}

type ExpressRouteConnectionArrayOutput struct{ *pulumi.OutputState }

func (ExpressRouteConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExpressRouteConnection)(nil)).Elem()
}

func (o ExpressRouteConnectionArrayOutput) ToExpressRouteConnectionArrayOutput() ExpressRouteConnectionArrayOutput {
	return o
}

func (o ExpressRouteConnectionArrayOutput) ToExpressRouteConnectionArrayOutputWithContext(ctx context.Context) ExpressRouteConnectionArrayOutput {
	return o
}

func (o ExpressRouteConnectionArrayOutput) Index(i pulumi.IntInput) ExpressRouteConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExpressRouteConnection {
		return vs[0].([]*ExpressRouteConnection)[vs[1].(int)]
	}).(ExpressRouteConnectionOutput)
}

type ExpressRouteConnectionMapOutput struct{ *pulumi.OutputState }

func (ExpressRouteConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExpressRouteConnection)(nil)).Elem()
}

func (o ExpressRouteConnectionMapOutput) ToExpressRouteConnectionMapOutput() ExpressRouteConnectionMapOutput {
	return o
}

func (o ExpressRouteConnectionMapOutput) ToExpressRouteConnectionMapOutputWithContext(ctx context.Context) ExpressRouteConnectionMapOutput {
	return o
}

func (o ExpressRouteConnectionMapOutput) MapIndex(k pulumi.StringInput) ExpressRouteConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExpressRouteConnection {
		return vs[0].(map[string]*ExpressRouteConnection)[vs[1].(string)]
	}).(ExpressRouteConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExpressRouteConnectionInput)(nil)).Elem(), &ExpressRouteConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExpressRouteConnectionArrayInput)(nil)).Elem(), ExpressRouteConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExpressRouteConnectionMapInput)(nil)).Elem(), ExpressRouteConnectionMap{})
	pulumi.RegisterOutputType(ExpressRouteConnectionOutput{})
	pulumi.RegisterOutputType(ExpressRouteConnectionArrayOutput{})
	pulumi.RegisterOutputType(ExpressRouteConnectionMapOutput{})
}
