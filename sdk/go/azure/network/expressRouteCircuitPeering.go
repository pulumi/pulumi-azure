// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package network

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an ExpressRoute Circuit Peering.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/express_route_circuit_peering.html.markdown.
type ExpressRouteCircuitPeering struct {
	pulumi.CustomResourceState

	// The ASN used by Azure.
	AzureAsn pulumi.IntOutput `pulumi:"azureAsn"`
	// The name of the ExpressRoute Circuit in which to create the Peering.
	ExpressRouteCircuitName pulumi.StringOutput `pulumi:"expressRouteCircuitName"`
	// A `microsoftPeeringConfig` block as defined below. Required when `peeringType` is set to `MicrosoftPeering`.
	MicrosoftPeeringConfig ExpressRouteCircuitPeeringMicrosoftPeeringConfigPtrOutput `pulumi:"microsoftPeeringConfig"`
	// The Either a 16-bit or a 32-bit ASN. Can either be public or private..
	PeerAsn pulumi.IntOutput `pulumi:"peerAsn"`
	// The type of the ExpressRoute Circuit Peering. Acceptable values include `AzurePrivatePeering`, `AzurePublicPeering` and `MicrosoftPeering`. Changing this forces a new resource to be created.
	PeeringType pulumi.StringOutput `pulumi:"peeringType"`
	// The Primary Port used by Azure for this Peering.
	PrimaryAzurePort pulumi.StringOutput `pulumi:"primaryAzurePort"`
	// A `/30` subnet for the primary link.
	PrimaryPeerAddressPrefix pulumi.StringOutput `pulumi:"primaryPeerAddressPrefix"`
	// The name of the resource group in which to
	// create the Express Route Circuit Peering. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The Secondary Port used by Azure for this Peering.
	SecondaryAzurePort pulumi.StringOutput `pulumi:"secondaryAzurePort"`
	// A `/30` subnet for the secondary link.
	SecondaryPeerAddressPrefix pulumi.StringOutput `pulumi:"secondaryPeerAddressPrefix"`
	// The shared key. Can be a maximum of 25 characters.
	SharedKey pulumi.StringPtrOutput `pulumi:"sharedKey"`
	// A valid VLAN ID to establish this peering on.
	VlanId pulumi.IntOutput `pulumi:"vlanId"`
}

// NewExpressRouteCircuitPeering registers a new resource with the given unique name, arguments, and options.
func NewExpressRouteCircuitPeering(ctx *pulumi.Context,
	name string, args *ExpressRouteCircuitPeeringArgs, opts ...pulumi.ResourceOption) (*ExpressRouteCircuitPeering, error) {
	if args == nil || args.ExpressRouteCircuitName == nil {
		return nil, errors.New("missing required argument 'ExpressRouteCircuitName'")
	}
	if args == nil || args.PeeringType == nil {
		return nil, errors.New("missing required argument 'PeeringType'")
	}
	if args == nil || args.PrimaryPeerAddressPrefix == nil {
		return nil, errors.New("missing required argument 'PrimaryPeerAddressPrefix'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.SecondaryPeerAddressPrefix == nil {
		return nil, errors.New("missing required argument 'SecondaryPeerAddressPrefix'")
	}
	if args == nil || args.VlanId == nil {
		return nil, errors.New("missing required argument 'VlanId'")
	}
	if args == nil {
		args = &ExpressRouteCircuitPeeringArgs{}
	}
	var resource ExpressRouteCircuitPeering
	err := ctx.RegisterResource("azure:network/expressRouteCircuitPeering:ExpressRouteCircuitPeering", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExpressRouteCircuitPeering gets an existing ExpressRouteCircuitPeering resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExpressRouteCircuitPeering(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExpressRouteCircuitPeeringState, opts ...pulumi.ResourceOption) (*ExpressRouteCircuitPeering, error) {
	var resource ExpressRouteCircuitPeering
	err := ctx.ReadResource("azure:network/expressRouteCircuitPeering:ExpressRouteCircuitPeering", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExpressRouteCircuitPeering resources.
type expressRouteCircuitPeeringState struct {
	// The ASN used by Azure.
	AzureAsn *int `pulumi:"azureAsn"`
	// The name of the ExpressRoute Circuit in which to create the Peering.
	ExpressRouteCircuitName *string `pulumi:"expressRouteCircuitName"`
	// A `microsoftPeeringConfig` block as defined below. Required when `peeringType` is set to `MicrosoftPeering`.
	MicrosoftPeeringConfig *ExpressRouteCircuitPeeringMicrosoftPeeringConfig `pulumi:"microsoftPeeringConfig"`
	// The Either a 16-bit or a 32-bit ASN. Can either be public or private..
	PeerAsn *int `pulumi:"peerAsn"`
	// The type of the ExpressRoute Circuit Peering. Acceptable values include `AzurePrivatePeering`, `AzurePublicPeering` and `MicrosoftPeering`. Changing this forces a new resource to be created.
	PeeringType *string `pulumi:"peeringType"`
	// The Primary Port used by Azure for this Peering.
	PrimaryAzurePort *string `pulumi:"primaryAzurePort"`
	// A `/30` subnet for the primary link.
	PrimaryPeerAddressPrefix *string `pulumi:"primaryPeerAddressPrefix"`
	// The name of the resource group in which to
	// create the Express Route Circuit Peering. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The Secondary Port used by Azure for this Peering.
	SecondaryAzurePort *string `pulumi:"secondaryAzurePort"`
	// A `/30` subnet for the secondary link.
	SecondaryPeerAddressPrefix *string `pulumi:"secondaryPeerAddressPrefix"`
	// The shared key. Can be a maximum of 25 characters.
	SharedKey *string `pulumi:"sharedKey"`
	// A valid VLAN ID to establish this peering on.
	VlanId *int `pulumi:"vlanId"`
}

type ExpressRouteCircuitPeeringState struct {
	// The ASN used by Azure.
	AzureAsn pulumi.IntPtrInput
	// The name of the ExpressRoute Circuit in which to create the Peering.
	ExpressRouteCircuitName pulumi.StringPtrInput
	// A `microsoftPeeringConfig` block as defined below. Required when `peeringType` is set to `MicrosoftPeering`.
	MicrosoftPeeringConfig ExpressRouteCircuitPeeringMicrosoftPeeringConfigPtrInput
	// The Either a 16-bit or a 32-bit ASN. Can either be public or private..
	PeerAsn pulumi.IntPtrInput
	// The type of the ExpressRoute Circuit Peering. Acceptable values include `AzurePrivatePeering`, `AzurePublicPeering` and `MicrosoftPeering`. Changing this forces a new resource to be created.
	PeeringType pulumi.StringPtrInput
	// The Primary Port used by Azure for this Peering.
	PrimaryAzurePort pulumi.StringPtrInput
	// A `/30` subnet for the primary link.
	PrimaryPeerAddressPrefix pulumi.StringPtrInput
	// The name of the resource group in which to
	// create the Express Route Circuit Peering. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The Secondary Port used by Azure for this Peering.
	SecondaryAzurePort pulumi.StringPtrInput
	// A `/30` subnet for the secondary link.
	SecondaryPeerAddressPrefix pulumi.StringPtrInput
	// The shared key. Can be a maximum of 25 characters.
	SharedKey pulumi.StringPtrInput
	// A valid VLAN ID to establish this peering on.
	VlanId pulumi.IntPtrInput
}

func (ExpressRouteCircuitPeeringState) ElementType() reflect.Type {
	return reflect.TypeOf((*expressRouteCircuitPeeringState)(nil)).Elem()
}

type expressRouteCircuitPeeringArgs struct {
	// The name of the ExpressRoute Circuit in which to create the Peering.
	ExpressRouteCircuitName string `pulumi:"expressRouteCircuitName"`
	// A `microsoftPeeringConfig` block as defined below. Required when `peeringType` is set to `MicrosoftPeering`.
	MicrosoftPeeringConfig *ExpressRouteCircuitPeeringMicrosoftPeeringConfig `pulumi:"microsoftPeeringConfig"`
	// The Either a 16-bit or a 32-bit ASN. Can either be public or private..
	PeerAsn *int `pulumi:"peerAsn"`
	// The type of the ExpressRoute Circuit Peering. Acceptable values include `AzurePrivatePeering`, `AzurePublicPeering` and `MicrosoftPeering`. Changing this forces a new resource to be created.
	PeeringType string `pulumi:"peeringType"`
	// A `/30` subnet for the primary link.
	PrimaryPeerAddressPrefix string `pulumi:"primaryPeerAddressPrefix"`
	// The name of the resource group in which to
	// create the Express Route Circuit Peering. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A `/30` subnet for the secondary link.
	SecondaryPeerAddressPrefix string `pulumi:"secondaryPeerAddressPrefix"`
	// The shared key. Can be a maximum of 25 characters.
	SharedKey *string `pulumi:"sharedKey"`
	// A valid VLAN ID to establish this peering on.
	VlanId int `pulumi:"vlanId"`
}

// The set of arguments for constructing a ExpressRouteCircuitPeering resource.
type ExpressRouteCircuitPeeringArgs struct {
	// The name of the ExpressRoute Circuit in which to create the Peering.
	ExpressRouteCircuitName pulumi.StringInput
	// A `microsoftPeeringConfig` block as defined below. Required when `peeringType` is set to `MicrosoftPeering`.
	MicrosoftPeeringConfig ExpressRouteCircuitPeeringMicrosoftPeeringConfigPtrInput
	// The Either a 16-bit or a 32-bit ASN. Can either be public or private..
	PeerAsn pulumi.IntPtrInput
	// The type of the ExpressRoute Circuit Peering. Acceptable values include `AzurePrivatePeering`, `AzurePublicPeering` and `MicrosoftPeering`. Changing this forces a new resource to be created.
	PeeringType pulumi.StringInput
	// A `/30` subnet for the primary link.
	PrimaryPeerAddressPrefix pulumi.StringInput
	// The name of the resource group in which to
	// create the Express Route Circuit Peering. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A `/30` subnet for the secondary link.
	SecondaryPeerAddressPrefix pulumi.StringInput
	// The shared key. Can be a maximum of 25 characters.
	SharedKey pulumi.StringPtrInput
	// A valid VLAN ID to establish this peering on.
	VlanId pulumi.IntInput
}

func (ExpressRouteCircuitPeeringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*expressRouteCircuitPeeringArgs)(nil)).Elem()
}

