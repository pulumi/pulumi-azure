// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an ExpressRoute Circuit Peering.
//
// ## Example Usage
// ### Creating A Microsoft Peering)
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleExpressRouteCircuit, err := network.NewExpressRouteCircuit(ctx, "exampleExpressRouteCircuit", &network.ExpressRouteCircuitArgs{
//				ResourceGroupName:   exampleResourceGroup.Name,
//				Location:            exampleResourceGroup.Location,
//				ServiceProviderName: pulumi.String("Equinix"),
//				PeeringLocation:     pulumi.String("Silicon Valley"),
//				BandwidthInMbps:     pulumi.Int(50),
//				Sku: &network.ExpressRouteCircuitSkuArgs{
//					Tier:   pulumi.String("Standard"),
//					Family: pulumi.String("MeteredData"),
//				},
//				AllowClassicOperations: pulumi.Bool(false),
//				Tags: pulumi.StringMap{
//					"environment": pulumi.String("Production"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = network.NewExpressRouteCircuitPeering(ctx, "exampleExpressRouteCircuitPeering", &network.ExpressRouteCircuitPeeringArgs{
//				PeeringType:                pulumi.String("MicrosoftPeering"),
//				ExpressRouteCircuitName:    exampleExpressRouteCircuit.Name,
//				ResourceGroupName:          exampleResourceGroup.Name,
//				PeerAsn:                    pulumi.Int(100),
//				PrimaryPeerAddressPrefix:   pulumi.String("123.0.0.0/30"),
//				SecondaryPeerAddressPrefix: pulumi.String("123.0.0.4/30"),
//				Ipv4Enabled:                pulumi.Bool(true),
//				VlanId:                     pulumi.Int(300),
//				MicrosoftPeeringConfig: &network.ExpressRouteCircuitPeeringMicrosoftPeeringConfigArgs{
//					AdvertisedPublicPrefixes: pulumi.StringArray{
//						pulumi.String("123.1.0.0/24"),
//					},
//				},
//				Ipv6: &network.ExpressRouteCircuitPeeringIpv6Args{
//					PrimaryPeerAddressPrefix:   pulumi.String("2002:db01::/126"),
//					SecondaryPeerAddressPrefix: pulumi.String("2003:db01::/126"),
//					Enabled:                    pulumi.Bool(true),
//					MicrosoftPeering: &network.ExpressRouteCircuitPeeringIpv6MicrosoftPeeringArgs{
//						AdvertisedPublicPrefixes: pulumi.StringArray{
//							pulumi.String("2002:db01::/126"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Creating Azure Private Peering)
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleExpressRouteCircuit, err := network.NewExpressRouteCircuit(ctx, "exampleExpressRouteCircuit", &network.ExpressRouteCircuitArgs{
//				ResourceGroupName:   exampleResourceGroup.Name,
//				Location:            exampleResourceGroup.Location,
//				ServiceProviderName: pulumi.String("Equinix"),
//				PeeringLocation:     pulumi.String("Silicon Valley"),
//				BandwidthInMbps:     pulumi.Int(50),
//				Sku: &network.ExpressRouteCircuitSkuArgs{
//					Tier:   pulumi.String("Standard"),
//					Family: pulumi.String("MeteredData"),
//				},
//				AllowClassicOperations: pulumi.Bool(false),
//				Tags: pulumi.StringMap{
//					"environment": pulumi.String("Production"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = network.NewExpressRouteCircuitPeering(ctx, "exampleExpressRouteCircuitPeering", &network.ExpressRouteCircuitPeeringArgs{
//				PeeringType:                pulumi.String("AzurePrivatePeering"),
//				ExpressRouteCircuitName:    exampleExpressRouteCircuit.Name,
//				ResourceGroupName:          exampleResourceGroup.Name,
//				PeerAsn:                    pulumi.Int(100),
//				PrimaryPeerAddressPrefix:   pulumi.String("123.0.0.0/30"),
//				SecondaryPeerAddressPrefix: pulumi.String("123.0.0.4/30"),
//				Ipv4Enabled:                pulumi.Bool(true),
//				VlanId:                     pulumi.Int(300),
//				Ipv6: &network.ExpressRouteCircuitPeeringIpv6Args{
//					PrimaryPeerAddressPrefix:   pulumi.String("2002:db01::/126"),
//					SecondaryPeerAddressPrefix: pulumi.String("2003:db01::/126"),
//					Enabled:                    pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ExpressRoute Circuit Peerings can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:network/expressRouteCircuitPeering:ExpressRouteCircuitPeering peering1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/expressRouteCircuits/myExpressRoute/peerings/peering1
//
// ```
type ExpressRouteCircuitPeering struct {
	pulumi.CustomResourceState

	// The ASN used by Azure.
	AzureAsn pulumi.IntOutput `pulumi:"azureAsn"`
	// The name of the ExpressRoute Circuit in which to create the Peering. Changing this forces a new resource to be created.
	ExpressRouteCircuitName pulumi.StringOutput `pulumi:"expressRouteCircuitName"`
	GatewayManagerEtag      pulumi.StringOutput `pulumi:"gatewayManagerEtag"`
	// A boolean value indicating whether the IPv4 peering is enabled. Defaults to `true`.
	Ipv4Enabled pulumi.BoolPtrOutput `pulumi:"ipv4Enabled"`
	// A `ipv6` block as defined below.
	Ipv6 ExpressRouteCircuitPeeringIpv6PtrOutput `pulumi:"ipv6"`
	// A `microsoftPeeringConfig` block as defined below. Required when `peeringType` is set to `MicrosoftPeering` and config for IPv4.
	MicrosoftPeeringConfig ExpressRouteCircuitPeeringMicrosoftPeeringConfigPtrOutput `pulumi:"microsoftPeeringConfig"`
	// The Either a 16-bit or a 32-bit ASN. Can either be public or private.
	PeerAsn pulumi.IntOutput `pulumi:"peerAsn"`
	// The type of the ExpressRoute Circuit Peering. Acceptable values include `AzurePrivatePeering`, `AzurePublicPeering` and `MicrosoftPeering`.
	//
	// > **NOTE:** only one Peering of each Type can be created. Attempting to create multiple peerings of the same type will overwrite the original peering.
	PeeringType pulumi.StringOutput `pulumi:"peeringType"`
	// The Primary Port used by Azure for this Peering.
	PrimaryAzurePort pulumi.StringOutput `pulumi:"primaryAzurePort"`
	// A subnet for the primary link.
	PrimaryPeerAddressPrefix pulumi.StringPtrOutput `pulumi:"primaryPeerAddressPrefix"`
	// The name of the resource group in which to create the Express Route Circuit Peering. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The ID of the Route Filter. Only available when `peeringType` is set to `MicrosoftPeering`.
	//
	// > **NOTE:** `ipv6` can be specified when `peeringType` is `MicrosoftPeering` or `AzurePrivatePeering`
	RouteFilterId pulumi.StringPtrOutput `pulumi:"routeFilterId"`
	// The Secondary Port used by Azure for this Peering.
	SecondaryAzurePort pulumi.StringOutput `pulumi:"secondaryAzurePort"`
	// A subnet for the secondary link.
	SecondaryPeerAddressPrefix pulumi.StringPtrOutput `pulumi:"secondaryPeerAddressPrefix"`
	// The shared key. Can be a maximum of 25 characters.
	SharedKey pulumi.StringPtrOutput `pulumi:"sharedKey"`
	// A valid VLAN ID to establish this peering on.
	VlanId pulumi.IntOutput `pulumi:"vlanId"`
}

// NewExpressRouteCircuitPeering registers a new resource with the given unique name, arguments, and options.
func NewExpressRouteCircuitPeering(ctx *pulumi.Context,
	name string, args *ExpressRouteCircuitPeeringArgs, opts ...pulumi.ResourceOption) (*ExpressRouteCircuitPeering, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExpressRouteCircuitName == nil {
		return nil, errors.New("invalid value for required argument 'ExpressRouteCircuitName'")
	}
	if args.PeeringType == nil {
		return nil, errors.New("invalid value for required argument 'PeeringType'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.VlanId == nil {
		return nil, errors.New("invalid value for required argument 'VlanId'")
	}
	if args.SharedKey != nil {
		args.SharedKey = pulumi.ToSecret(args.SharedKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"sharedKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ExpressRouteCircuitPeering
	err := ctx.RegisterResource("azure:network/expressRouteCircuitPeering:ExpressRouteCircuitPeering", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExpressRouteCircuitPeering gets an existing ExpressRouteCircuitPeering resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExpressRouteCircuitPeering(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExpressRouteCircuitPeeringState, opts ...pulumi.ResourceOption) (*ExpressRouteCircuitPeering, error) {
	var resource ExpressRouteCircuitPeering
	err := ctx.ReadResource("azure:network/expressRouteCircuitPeering:ExpressRouteCircuitPeering", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExpressRouteCircuitPeering resources.
type expressRouteCircuitPeeringState struct {
	// The ASN used by Azure.
	AzureAsn *int `pulumi:"azureAsn"`
	// The name of the ExpressRoute Circuit in which to create the Peering. Changing this forces a new resource to be created.
	ExpressRouteCircuitName *string `pulumi:"expressRouteCircuitName"`
	GatewayManagerEtag      *string `pulumi:"gatewayManagerEtag"`
	// A boolean value indicating whether the IPv4 peering is enabled. Defaults to `true`.
	Ipv4Enabled *bool `pulumi:"ipv4Enabled"`
	// A `ipv6` block as defined below.
	Ipv6 *ExpressRouteCircuitPeeringIpv6 `pulumi:"ipv6"`
	// A `microsoftPeeringConfig` block as defined below. Required when `peeringType` is set to `MicrosoftPeering` and config for IPv4.
	MicrosoftPeeringConfig *ExpressRouteCircuitPeeringMicrosoftPeeringConfig `pulumi:"microsoftPeeringConfig"`
	// The Either a 16-bit or a 32-bit ASN. Can either be public or private.
	PeerAsn *int `pulumi:"peerAsn"`
	// The type of the ExpressRoute Circuit Peering. Acceptable values include `AzurePrivatePeering`, `AzurePublicPeering` and `MicrosoftPeering`.
	//
	// > **NOTE:** only one Peering of each Type can be created. Attempting to create multiple peerings of the same type will overwrite the original peering.
	PeeringType *string `pulumi:"peeringType"`
	// The Primary Port used by Azure for this Peering.
	PrimaryAzurePort *string `pulumi:"primaryAzurePort"`
	// A subnet for the primary link.
	PrimaryPeerAddressPrefix *string `pulumi:"primaryPeerAddressPrefix"`
	// The name of the resource group in which to create the Express Route Circuit Peering. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The ID of the Route Filter. Only available when `peeringType` is set to `MicrosoftPeering`.
	//
	// > **NOTE:** `ipv6` can be specified when `peeringType` is `MicrosoftPeering` or `AzurePrivatePeering`
	RouteFilterId *string `pulumi:"routeFilterId"`
	// The Secondary Port used by Azure for this Peering.
	SecondaryAzurePort *string `pulumi:"secondaryAzurePort"`
	// A subnet for the secondary link.
	SecondaryPeerAddressPrefix *string `pulumi:"secondaryPeerAddressPrefix"`
	// The shared key. Can be a maximum of 25 characters.
	SharedKey *string `pulumi:"sharedKey"`
	// A valid VLAN ID to establish this peering on.
	VlanId *int `pulumi:"vlanId"`
}

type ExpressRouteCircuitPeeringState struct {
	// The ASN used by Azure.
	AzureAsn pulumi.IntPtrInput
	// The name of the ExpressRoute Circuit in which to create the Peering. Changing this forces a new resource to be created.
	ExpressRouteCircuitName pulumi.StringPtrInput
	GatewayManagerEtag      pulumi.StringPtrInput
	// A boolean value indicating whether the IPv4 peering is enabled. Defaults to `true`.
	Ipv4Enabled pulumi.BoolPtrInput
	// A `ipv6` block as defined below.
	Ipv6 ExpressRouteCircuitPeeringIpv6PtrInput
	// A `microsoftPeeringConfig` block as defined below. Required when `peeringType` is set to `MicrosoftPeering` and config for IPv4.
	MicrosoftPeeringConfig ExpressRouteCircuitPeeringMicrosoftPeeringConfigPtrInput
	// The Either a 16-bit or a 32-bit ASN. Can either be public or private.
	PeerAsn pulumi.IntPtrInput
	// The type of the ExpressRoute Circuit Peering. Acceptable values include `AzurePrivatePeering`, `AzurePublicPeering` and `MicrosoftPeering`.
	//
	// > **NOTE:** only one Peering of each Type can be created. Attempting to create multiple peerings of the same type will overwrite the original peering.
	PeeringType pulumi.StringPtrInput
	// The Primary Port used by Azure for this Peering.
	PrimaryAzurePort pulumi.StringPtrInput
	// A subnet for the primary link.
	PrimaryPeerAddressPrefix pulumi.StringPtrInput
	// The name of the resource group in which to create the Express Route Circuit Peering. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The ID of the Route Filter. Only available when `peeringType` is set to `MicrosoftPeering`.
	//
	// > **NOTE:** `ipv6` can be specified when `peeringType` is `MicrosoftPeering` or `AzurePrivatePeering`
	RouteFilterId pulumi.StringPtrInput
	// The Secondary Port used by Azure for this Peering.
	SecondaryAzurePort pulumi.StringPtrInput
	// A subnet for the secondary link.
	SecondaryPeerAddressPrefix pulumi.StringPtrInput
	// The shared key. Can be a maximum of 25 characters.
	SharedKey pulumi.StringPtrInput
	// A valid VLAN ID to establish this peering on.
	VlanId pulumi.IntPtrInput
}

func (ExpressRouteCircuitPeeringState) ElementType() reflect.Type {
	return reflect.TypeOf((*expressRouteCircuitPeeringState)(nil)).Elem()
}

type expressRouteCircuitPeeringArgs struct {
	// The name of the ExpressRoute Circuit in which to create the Peering. Changing this forces a new resource to be created.
	ExpressRouteCircuitName string `pulumi:"expressRouteCircuitName"`
	// A boolean value indicating whether the IPv4 peering is enabled. Defaults to `true`.
	Ipv4Enabled *bool `pulumi:"ipv4Enabled"`
	// A `ipv6` block as defined below.
	Ipv6 *ExpressRouteCircuitPeeringIpv6 `pulumi:"ipv6"`
	// A `microsoftPeeringConfig` block as defined below. Required when `peeringType` is set to `MicrosoftPeering` and config for IPv4.
	MicrosoftPeeringConfig *ExpressRouteCircuitPeeringMicrosoftPeeringConfig `pulumi:"microsoftPeeringConfig"`
	// The Either a 16-bit or a 32-bit ASN. Can either be public or private.
	PeerAsn *int `pulumi:"peerAsn"`
	// The type of the ExpressRoute Circuit Peering. Acceptable values include `AzurePrivatePeering`, `AzurePublicPeering` and `MicrosoftPeering`.
	//
	// > **NOTE:** only one Peering of each Type can be created. Attempting to create multiple peerings of the same type will overwrite the original peering.
	PeeringType string `pulumi:"peeringType"`
	// A subnet for the primary link.
	PrimaryPeerAddressPrefix *string `pulumi:"primaryPeerAddressPrefix"`
	// The name of the resource group in which to create the Express Route Circuit Peering. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The ID of the Route Filter. Only available when `peeringType` is set to `MicrosoftPeering`.
	//
	// > **NOTE:** `ipv6` can be specified when `peeringType` is `MicrosoftPeering` or `AzurePrivatePeering`
	RouteFilterId *string `pulumi:"routeFilterId"`
	// A subnet for the secondary link.
	SecondaryPeerAddressPrefix *string `pulumi:"secondaryPeerAddressPrefix"`
	// The shared key. Can be a maximum of 25 characters.
	SharedKey *string `pulumi:"sharedKey"`
	// A valid VLAN ID to establish this peering on.
	VlanId int `pulumi:"vlanId"`
}

// The set of arguments for constructing a ExpressRouteCircuitPeering resource.
type ExpressRouteCircuitPeeringArgs struct {
	// The name of the ExpressRoute Circuit in which to create the Peering. Changing this forces a new resource to be created.
	ExpressRouteCircuitName pulumi.StringInput
	// A boolean value indicating whether the IPv4 peering is enabled. Defaults to `true`.
	Ipv4Enabled pulumi.BoolPtrInput
	// A `ipv6` block as defined below.
	Ipv6 ExpressRouteCircuitPeeringIpv6PtrInput
	// A `microsoftPeeringConfig` block as defined below. Required when `peeringType` is set to `MicrosoftPeering` and config for IPv4.
	MicrosoftPeeringConfig ExpressRouteCircuitPeeringMicrosoftPeeringConfigPtrInput
	// The Either a 16-bit or a 32-bit ASN. Can either be public or private.
	PeerAsn pulumi.IntPtrInput
	// The type of the ExpressRoute Circuit Peering. Acceptable values include `AzurePrivatePeering`, `AzurePublicPeering` and `MicrosoftPeering`.
	//
	// > **NOTE:** only one Peering of each Type can be created. Attempting to create multiple peerings of the same type will overwrite the original peering.
	PeeringType pulumi.StringInput
	// A subnet for the primary link.
	PrimaryPeerAddressPrefix pulumi.StringPtrInput
	// The name of the resource group in which to create the Express Route Circuit Peering. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// The ID of the Route Filter. Only available when `peeringType` is set to `MicrosoftPeering`.
	//
	// > **NOTE:** `ipv6` can be specified when `peeringType` is `MicrosoftPeering` or `AzurePrivatePeering`
	RouteFilterId pulumi.StringPtrInput
	// A subnet for the secondary link.
	SecondaryPeerAddressPrefix pulumi.StringPtrInput
	// The shared key. Can be a maximum of 25 characters.
	SharedKey pulumi.StringPtrInput
	// A valid VLAN ID to establish this peering on.
	VlanId pulumi.IntInput
}

func (ExpressRouteCircuitPeeringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*expressRouteCircuitPeeringArgs)(nil)).Elem()
}

type ExpressRouteCircuitPeeringInput interface {
	pulumi.Input

	ToExpressRouteCircuitPeeringOutput() ExpressRouteCircuitPeeringOutput
	ToExpressRouteCircuitPeeringOutputWithContext(ctx context.Context) ExpressRouteCircuitPeeringOutput
}

func (*ExpressRouteCircuitPeering) ElementType() reflect.Type {
	return reflect.TypeOf((**ExpressRouteCircuitPeering)(nil)).Elem()
}

func (i *ExpressRouteCircuitPeering) ToExpressRouteCircuitPeeringOutput() ExpressRouteCircuitPeeringOutput {
	return i.ToExpressRouteCircuitPeeringOutputWithContext(context.Background())
}

func (i *ExpressRouteCircuitPeering) ToExpressRouteCircuitPeeringOutputWithContext(ctx context.Context) ExpressRouteCircuitPeeringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpressRouteCircuitPeeringOutput)
}

// ExpressRouteCircuitPeeringArrayInput is an input type that accepts ExpressRouteCircuitPeeringArray and ExpressRouteCircuitPeeringArrayOutput values.
// You can construct a concrete instance of `ExpressRouteCircuitPeeringArrayInput` via:
//
//	ExpressRouteCircuitPeeringArray{ ExpressRouteCircuitPeeringArgs{...} }
type ExpressRouteCircuitPeeringArrayInput interface {
	pulumi.Input

	ToExpressRouteCircuitPeeringArrayOutput() ExpressRouteCircuitPeeringArrayOutput
	ToExpressRouteCircuitPeeringArrayOutputWithContext(context.Context) ExpressRouteCircuitPeeringArrayOutput
}

type ExpressRouteCircuitPeeringArray []ExpressRouteCircuitPeeringInput

func (ExpressRouteCircuitPeeringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExpressRouteCircuitPeering)(nil)).Elem()
}

func (i ExpressRouteCircuitPeeringArray) ToExpressRouteCircuitPeeringArrayOutput() ExpressRouteCircuitPeeringArrayOutput {
	return i.ToExpressRouteCircuitPeeringArrayOutputWithContext(context.Background())
}

func (i ExpressRouteCircuitPeeringArray) ToExpressRouteCircuitPeeringArrayOutputWithContext(ctx context.Context) ExpressRouteCircuitPeeringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpressRouteCircuitPeeringArrayOutput)
}

// ExpressRouteCircuitPeeringMapInput is an input type that accepts ExpressRouteCircuitPeeringMap and ExpressRouteCircuitPeeringMapOutput values.
// You can construct a concrete instance of `ExpressRouteCircuitPeeringMapInput` via:
//
//	ExpressRouteCircuitPeeringMap{ "key": ExpressRouteCircuitPeeringArgs{...} }
type ExpressRouteCircuitPeeringMapInput interface {
	pulumi.Input

	ToExpressRouteCircuitPeeringMapOutput() ExpressRouteCircuitPeeringMapOutput
	ToExpressRouteCircuitPeeringMapOutputWithContext(context.Context) ExpressRouteCircuitPeeringMapOutput
}

type ExpressRouteCircuitPeeringMap map[string]ExpressRouteCircuitPeeringInput

func (ExpressRouteCircuitPeeringMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExpressRouteCircuitPeering)(nil)).Elem()
}

func (i ExpressRouteCircuitPeeringMap) ToExpressRouteCircuitPeeringMapOutput() ExpressRouteCircuitPeeringMapOutput {
	return i.ToExpressRouteCircuitPeeringMapOutputWithContext(context.Background())
}

func (i ExpressRouteCircuitPeeringMap) ToExpressRouteCircuitPeeringMapOutputWithContext(ctx context.Context) ExpressRouteCircuitPeeringMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpressRouteCircuitPeeringMapOutput)
}

type ExpressRouteCircuitPeeringOutput struct{ *pulumi.OutputState }

func (ExpressRouteCircuitPeeringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExpressRouteCircuitPeering)(nil)).Elem()
}

func (o ExpressRouteCircuitPeeringOutput) ToExpressRouteCircuitPeeringOutput() ExpressRouteCircuitPeeringOutput {
	return o
}

func (o ExpressRouteCircuitPeeringOutput) ToExpressRouteCircuitPeeringOutputWithContext(ctx context.Context) ExpressRouteCircuitPeeringOutput {
	return o
}

// The ASN used by Azure.
func (o ExpressRouteCircuitPeeringOutput) AzureAsn() pulumi.IntOutput {
	return o.ApplyT(func(v *ExpressRouteCircuitPeering) pulumi.IntOutput { return v.AzureAsn }).(pulumi.IntOutput)
}

// The name of the ExpressRoute Circuit in which to create the Peering. Changing this forces a new resource to be created.
func (o ExpressRouteCircuitPeeringOutput) ExpressRouteCircuitName() pulumi.StringOutput {
	return o.ApplyT(func(v *ExpressRouteCircuitPeering) pulumi.StringOutput { return v.ExpressRouteCircuitName }).(pulumi.StringOutput)
}

func (o ExpressRouteCircuitPeeringOutput) GatewayManagerEtag() pulumi.StringOutput {
	return o.ApplyT(func(v *ExpressRouteCircuitPeering) pulumi.StringOutput { return v.GatewayManagerEtag }).(pulumi.StringOutput)
}

// A boolean value indicating whether the IPv4 peering is enabled. Defaults to `true`.
func (o ExpressRouteCircuitPeeringOutput) Ipv4Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExpressRouteCircuitPeering) pulumi.BoolPtrOutput { return v.Ipv4Enabled }).(pulumi.BoolPtrOutput)
}

// A `ipv6` block as defined below.
func (o ExpressRouteCircuitPeeringOutput) Ipv6() ExpressRouteCircuitPeeringIpv6PtrOutput {
	return o.ApplyT(func(v *ExpressRouteCircuitPeering) ExpressRouteCircuitPeeringIpv6PtrOutput { return v.Ipv6 }).(ExpressRouteCircuitPeeringIpv6PtrOutput)
}

// A `microsoftPeeringConfig` block as defined below. Required when `peeringType` is set to `MicrosoftPeering` and config for IPv4.
func (o ExpressRouteCircuitPeeringOutput) MicrosoftPeeringConfig() ExpressRouteCircuitPeeringMicrosoftPeeringConfigPtrOutput {
	return o.ApplyT(func(v *ExpressRouteCircuitPeering) ExpressRouteCircuitPeeringMicrosoftPeeringConfigPtrOutput {
		return v.MicrosoftPeeringConfig
	}).(ExpressRouteCircuitPeeringMicrosoftPeeringConfigPtrOutput)
}

// The Either a 16-bit or a 32-bit ASN. Can either be public or private.
func (o ExpressRouteCircuitPeeringOutput) PeerAsn() pulumi.IntOutput {
	return o.ApplyT(func(v *ExpressRouteCircuitPeering) pulumi.IntOutput { return v.PeerAsn }).(pulumi.IntOutput)
}

// The type of the ExpressRoute Circuit Peering. Acceptable values include `AzurePrivatePeering`, `AzurePublicPeering` and `MicrosoftPeering`.
//
// > **NOTE:** only one Peering of each Type can be created. Attempting to create multiple peerings of the same type will overwrite the original peering.
func (o ExpressRouteCircuitPeeringOutput) PeeringType() pulumi.StringOutput {
	return o.ApplyT(func(v *ExpressRouteCircuitPeering) pulumi.StringOutput { return v.PeeringType }).(pulumi.StringOutput)
}

// The Primary Port used by Azure for this Peering.
func (o ExpressRouteCircuitPeeringOutput) PrimaryAzurePort() pulumi.StringOutput {
	return o.ApplyT(func(v *ExpressRouteCircuitPeering) pulumi.StringOutput { return v.PrimaryAzurePort }).(pulumi.StringOutput)
}

// A subnet for the primary link.
func (o ExpressRouteCircuitPeeringOutput) PrimaryPeerAddressPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpressRouteCircuitPeering) pulumi.StringPtrOutput { return v.PrimaryPeerAddressPrefix }).(pulumi.StringPtrOutput)
}

// The name of the resource group in which to create the Express Route Circuit Peering. Changing this forces a new resource to be created.
func (o ExpressRouteCircuitPeeringOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ExpressRouteCircuitPeering) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The ID of the Route Filter. Only available when `peeringType` is set to `MicrosoftPeering`.
//
// > **NOTE:** `ipv6` can be specified when `peeringType` is `MicrosoftPeering` or `AzurePrivatePeering`
func (o ExpressRouteCircuitPeeringOutput) RouteFilterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpressRouteCircuitPeering) pulumi.StringPtrOutput { return v.RouteFilterId }).(pulumi.StringPtrOutput)
}

// The Secondary Port used by Azure for this Peering.
func (o ExpressRouteCircuitPeeringOutput) SecondaryAzurePort() pulumi.StringOutput {
	return o.ApplyT(func(v *ExpressRouteCircuitPeering) pulumi.StringOutput { return v.SecondaryAzurePort }).(pulumi.StringOutput)
}

// A subnet for the secondary link.
func (o ExpressRouteCircuitPeeringOutput) SecondaryPeerAddressPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpressRouteCircuitPeering) pulumi.StringPtrOutput { return v.SecondaryPeerAddressPrefix }).(pulumi.StringPtrOutput)
}

// The shared key. Can be a maximum of 25 characters.
func (o ExpressRouteCircuitPeeringOutput) SharedKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpressRouteCircuitPeering) pulumi.StringPtrOutput { return v.SharedKey }).(pulumi.StringPtrOutput)
}

// A valid VLAN ID to establish this peering on.
func (o ExpressRouteCircuitPeeringOutput) VlanId() pulumi.IntOutput {
	return o.ApplyT(func(v *ExpressRouteCircuitPeering) pulumi.IntOutput { return v.VlanId }).(pulumi.IntOutput)
}

type ExpressRouteCircuitPeeringArrayOutput struct{ *pulumi.OutputState }

func (ExpressRouteCircuitPeeringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExpressRouteCircuitPeering)(nil)).Elem()
}

func (o ExpressRouteCircuitPeeringArrayOutput) ToExpressRouteCircuitPeeringArrayOutput() ExpressRouteCircuitPeeringArrayOutput {
	return o
}

func (o ExpressRouteCircuitPeeringArrayOutput) ToExpressRouteCircuitPeeringArrayOutputWithContext(ctx context.Context) ExpressRouteCircuitPeeringArrayOutput {
	return o
}

func (o ExpressRouteCircuitPeeringArrayOutput) Index(i pulumi.IntInput) ExpressRouteCircuitPeeringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExpressRouteCircuitPeering {
		return vs[0].([]*ExpressRouteCircuitPeering)[vs[1].(int)]
	}).(ExpressRouteCircuitPeeringOutput)
}

type ExpressRouteCircuitPeeringMapOutput struct{ *pulumi.OutputState }

func (ExpressRouteCircuitPeeringMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExpressRouteCircuitPeering)(nil)).Elem()
}

func (o ExpressRouteCircuitPeeringMapOutput) ToExpressRouteCircuitPeeringMapOutput() ExpressRouteCircuitPeeringMapOutput {
	return o
}

func (o ExpressRouteCircuitPeeringMapOutput) ToExpressRouteCircuitPeeringMapOutputWithContext(ctx context.Context) ExpressRouteCircuitPeeringMapOutput {
	return o
}

func (o ExpressRouteCircuitPeeringMapOutput) MapIndex(k pulumi.StringInput) ExpressRouteCircuitPeeringOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExpressRouteCircuitPeering {
		return vs[0].(map[string]*ExpressRouteCircuitPeering)[vs[1].(string)]
	}).(ExpressRouteCircuitPeeringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExpressRouteCircuitPeeringInput)(nil)).Elem(), &ExpressRouteCircuitPeering{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExpressRouteCircuitPeeringArrayInput)(nil)).Elem(), ExpressRouteCircuitPeeringArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExpressRouteCircuitPeeringMapInput)(nil)).Elem(), ExpressRouteCircuitPeeringMap{})
	pulumi.RegisterOutputType(ExpressRouteCircuitPeeringOutput{})
	pulumi.RegisterOutputType(ExpressRouteCircuitPeeringArrayOutput{})
	pulumi.RegisterOutputType(ExpressRouteCircuitPeeringMapOutput{})
}
