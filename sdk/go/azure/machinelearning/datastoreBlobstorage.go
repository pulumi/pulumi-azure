// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package machinelearning

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DatastoreBlobstorage struct {
	pulumi.CustomResourceState

	AccountKey              pulumi.StringPtrOutput `pulumi:"accountKey"`
	Description             pulumi.StringPtrOutput `pulumi:"description"`
	IsDefault               pulumi.BoolPtrOutput   `pulumi:"isDefault"`
	Name                    pulumi.StringOutput    `pulumi:"name"`
	ServiceDataAuthIdentity pulumi.StringPtrOutput `pulumi:"serviceDataAuthIdentity"`
	SharedAccessSignature   pulumi.StringPtrOutput `pulumi:"sharedAccessSignature"`
	StorageContainerId      pulumi.StringOutput    `pulumi:"storageContainerId"`
	Tags                    pulumi.StringMapOutput `pulumi:"tags"`
	WorkspaceId             pulumi.StringOutput    `pulumi:"workspaceId"`
}

// NewDatastoreBlobstorage registers a new resource with the given unique name, arguments, and options.
func NewDatastoreBlobstorage(ctx *pulumi.Context,
	name string, args *DatastoreBlobstorageArgs, opts ...pulumi.ResourceOption) (*DatastoreBlobstorage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StorageContainerId == nil {
		return nil, errors.New("invalid value for required argument 'StorageContainerId'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	if args.AccountKey != nil {
		args.AccountKey = pulumi.ToSecret(args.AccountKey).(pulumi.StringPtrInput)
	}
	if args.SharedAccessSignature != nil {
		args.SharedAccessSignature = pulumi.ToSecret(args.SharedAccessSignature).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accountKey",
		"sharedAccessSignature",
	})
	opts = append(opts, secrets)
	var resource DatastoreBlobstorage
	err := ctx.RegisterResource("azure:machinelearning/datastoreBlobstorage:DatastoreBlobstorage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatastoreBlobstorage gets an existing DatastoreBlobstorage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatastoreBlobstorage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatastoreBlobstorageState, opts ...pulumi.ResourceOption) (*DatastoreBlobstorage, error) {
	var resource DatastoreBlobstorage
	err := ctx.ReadResource("azure:machinelearning/datastoreBlobstorage:DatastoreBlobstorage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatastoreBlobstorage resources.
type datastoreBlobstorageState struct {
	AccountKey              *string           `pulumi:"accountKey"`
	Description             *string           `pulumi:"description"`
	IsDefault               *bool             `pulumi:"isDefault"`
	Name                    *string           `pulumi:"name"`
	ServiceDataAuthIdentity *string           `pulumi:"serviceDataAuthIdentity"`
	SharedAccessSignature   *string           `pulumi:"sharedAccessSignature"`
	StorageContainerId      *string           `pulumi:"storageContainerId"`
	Tags                    map[string]string `pulumi:"tags"`
	WorkspaceId             *string           `pulumi:"workspaceId"`
}

type DatastoreBlobstorageState struct {
	AccountKey              pulumi.StringPtrInput
	Description             pulumi.StringPtrInput
	IsDefault               pulumi.BoolPtrInput
	Name                    pulumi.StringPtrInput
	ServiceDataAuthIdentity pulumi.StringPtrInput
	SharedAccessSignature   pulumi.StringPtrInput
	StorageContainerId      pulumi.StringPtrInput
	Tags                    pulumi.StringMapInput
	WorkspaceId             pulumi.StringPtrInput
}

func (DatastoreBlobstorageState) ElementType() reflect.Type {
	return reflect.TypeOf((*datastoreBlobstorageState)(nil)).Elem()
}

type datastoreBlobstorageArgs struct {
	AccountKey              *string           `pulumi:"accountKey"`
	Description             *string           `pulumi:"description"`
	IsDefault               *bool             `pulumi:"isDefault"`
	Name                    *string           `pulumi:"name"`
	ServiceDataAuthIdentity *string           `pulumi:"serviceDataAuthIdentity"`
	SharedAccessSignature   *string           `pulumi:"sharedAccessSignature"`
	StorageContainerId      string            `pulumi:"storageContainerId"`
	Tags                    map[string]string `pulumi:"tags"`
	WorkspaceId             string            `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DatastoreBlobstorage resource.
type DatastoreBlobstorageArgs struct {
	AccountKey              pulumi.StringPtrInput
	Description             pulumi.StringPtrInput
	IsDefault               pulumi.BoolPtrInput
	Name                    pulumi.StringPtrInput
	ServiceDataAuthIdentity pulumi.StringPtrInput
	SharedAccessSignature   pulumi.StringPtrInput
	StorageContainerId      pulumi.StringInput
	Tags                    pulumi.StringMapInput
	WorkspaceId             pulumi.StringInput
}

func (DatastoreBlobstorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datastoreBlobstorageArgs)(nil)).Elem()
}

type DatastoreBlobstorageInput interface {
	pulumi.Input

	ToDatastoreBlobstorageOutput() DatastoreBlobstorageOutput
	ToDatastoreBlobstorageOutputWithContext(ctx context.Context) DatastoreBlobstorageOutput
}

func (*DatastoreBlobstorage) ElementType() reflect.Type {
	return reflect.TypeOf((**DatastoreBlobstorage)(nil)).Elem()
}

func (i *DatastoreBlobstorage) ToDatastoreBlobstorageOutput() DatastoreBlobstorageOutput {
	return i.ToDatastoreBlobstorageOutputWithContext(context.Background())
}

func (i *DatastoreBlobstorage) ToDatastoreBlobstorageOutputWithContext(ctx context.Context) DatastoreBlobstorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatastoreBlobstorageOutput)
}

// DatastoreBlobstorageArrayInput is an input type that accepts DatastoreBlobstorageArray and DatastoreBlobstorageArrayOutput values.
// You can construct a concrete instance of `DatastoreBlobstorageArrayInput` via:
//
//	DatastoreBlobstorageArray{ DatastoreBlobstorageArgs{...} }
type DatastoreBlobstorageArrayInput interface {
	pulumi.Input

	ToDatastoreBlobstorageArrayOutput() DatastoreBlobstorageArrayOutput
	ToDatastoreBlobstorageArrayOutputWithContext(context.Context) DatastoreBlobstorageArrayOutput
}

type DatastoreBlobstorageArray []DatastoreBlobstorageInput

func (DatastoreBlobstorageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatastoreBlobstorage)(nil)).Elem()
}

func (i DatastoreBlobstorageArray) ToDatastoreBlobstorageArrayOutput() DatastoreBlobstorageArrayOutput {
	return i.ToDatastoreBlobstorageArrayOutputWithContext(context.Background())
}

func (i DatastoreBlobstorageArray) ToDatastoreBlobstorageArrayOutputWithContext(ctx context.Context) DatastoreBlobstorageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatastoreBlobstorageArrayOutput)
}

// DatastoreBlobstorageMapInput is an input type that accepts DatastoreBlobstorageMap and DatastoreBlobstorageMapOutput values.
// You can construct a concrete instance of `DatastoreBlobstorageMapInput` via:
//
//	DatastoreBlobstorageMap{ "key": DatastoreBlobstorageArgs{...} }
type DatastoreBlobstorageMapInput interface {
	pulumi.Input

	ToDatastoreBlobstorageMapOutput() DatastoreBlobstorageMapOutput
	ToDatastoreBlobstorageMapOutputWithContext(context.Context) DatastoreBlobstorageMapOutput
}

type DatastoreBlobstorageMap map[string]DatastoreBlobstorageInput

func (DatastoreBlobstorageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatastoreBlobstorage)(nil)).Elem()
}

func (i DatastoreBlobstorageMap) ToDatastoreBlobstorageMapOutput() DatastoreBlobstorageMapOutput {
	return i.ToDatastoreBlobstorageMapOutputWithContext(context.Background())
}

func (i DatastoreBlobstorageMap) ToDatastoreBlobstorageMapOutputWithContext(ctx context.Context) DatastoreBlobstorageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatastoreBlobstorageMapOutput)
}

type DatastoreBlobstorageOutput struct{ *pulumi.OutputState }

func (DatastoreBlobstorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatastoreBlobstorage)(nil)).Elem()
}

func (o DatastoreBlobstorageOutput) ToDatastoreBlobstorageOutput() DatastoreBlobstorageOutput {
	return o
}

func (o DatastoreBlobstorageOutput) ToDatastoreBlobstorageOutputWithContext(ctx context.Context) DatastoreBlobstorageOutput {
	return o
}

func (o DatastoreBlobstorageOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatastoreBlobstorage) pulumi.StringPtrOutput { return v.AccountKey }).(pulumi.StringPtrOutput)
}

func (o DatastoreBlobstorageOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatastoreBlobstorage) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o DatastoreBlobstorageOutput) IsDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatastoreBlobstorage) pulumi.BoolPtrOutput { return v.IsDefault }).(pulumi.BoolPtrOutput)
}

func (o DatastoreBlobstorageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DatastoreBlobstorage) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DatastoreBlobstorageOutput) ServiceDataAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatastoreBlobstorage) pulumi.StringPtrOutput { return v.ServiceDataAuthIdentity }).(pulumi.StringPtrOutput)
}

func (o DatastoreBlobstorageOutput) SharedAccessSignature() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatastoreBlobstorage) pulumi.StringPtrOutput { return v.SharedAccessSignature }).(pulumi.StringPtrOutput)
}

func (o DatastoreBlobstorageOutput) StorageContainerId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatastoreBlobstorage) pulumi.StringOutput { return v.StorageContainerId }).(pulumi.StringOutput)
}

func (o DatastoreBlobstorageOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DatastoreBlobstorage) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o DatastoreBlobstorageOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatastoreBlobstorage) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type DatastoreBlobstorageArrayOutput struct{ *pulumi.OutputState }

func (DatastoreBlobstorageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatastoreBlobstorage)(nil)).Elem()
}

func (o DatastoreBlobstorageArrayOutput) ToDatastoreBlobstorageArrayOutput() DatastoreBlobstorageArrayOutput {
	return o
}

func (o DatastoreBlobstorageArrayOutput) ToDatastoreBlobstorageArrayOutputWithContext(ctx context.Context) DatastoreBlobstorageArrayOutput {
	return o
}

func (o DatastoreBlobstorageArrayOutput) Index(i pulumi.IntInput) DatastoreBlobstorageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatastoreBlobstorage {
		return vs[0].([]*DatastoreBlobstorage)[vs[1].(int)]
	}).(DatastoreBlobstorageOutput)
}

type DatastoreBlobstorageMapOutput struct{ *pulumi.OutputState }

func (DatastoreBlobstorageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatastoreBlobstorage)(nil)).Elem()
}

func (o DatastoreBlobstorageMapOutput) ToDatastoreBlobstorageMapOutput() DatastoreBlobstorageMapOutput {
	return o
}

func (o DatastoreBlobstorageMapOutput) ToDatastoreBlobstorageMapOutputWithContext(ctx context.Context) DatastoreBlobstorageMapOutput {
	return o
}

func (o DatastoreBlobstorageMapOutput) MapIndex(k pulumi.StringInput) DatastoreBlobstorageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatastoreBlobstorage {
		return vs[0].(map[string]*DatastoreBlobstorage)[vs[1].(string)]
	}).(DatastoreBlobstorageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatastoreBlobstorageInput)(nil)).Elem(), &DatastoreBlobstorage{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatastoreBlobstorageArrayInput)(nil)).Elem(), DatastoreBlobstorageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatastoreBlobstorageMapInput)(nil)).Elem(), DatastoreBlobstorageMap{})
	pulumi.RegisterOutputType(DatastoreBlobstorageOutput{})
	pulumi.RegisterOutputType(DatastoreBlobstorageArrayOutput{})
	pulumi.RegisterOutputType(DatastoreBlobstorageMapOutput{})
}
