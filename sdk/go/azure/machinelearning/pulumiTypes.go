// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package machinelearning

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ComputeClusterIdentity struct {
	// A list of User Managed Identity ID's which should be assigned to the Machine Learning Compute Cluster. Changing this forces a new Machine Learning Compute Cluster to be created.
	IdentityIds []string `pulumi:"identityIds"`
	// The Principal ID for the Service Principal associated with the Managed Service Identity of this Machine Learning Compute Cluster.
	PrincipalId *string `pulumi:"principalId"`
	// The Tenant ID for the Service Principal associated with the Managed Service Identity of this Machine Learning Compute Cluster.
	TenantId *string `pulumi:"tenantId"`
	// The Type of Identity which should be used for this Machine Learning Compute Cluster. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned,UserAssigned`. Changing this forces a new Machine Learning Compute Cluster to be created.
	Type string `pulumi:"type"`
}

// ComputeClusterIdentityInput is an input type that accepts ComputeClusterIdentityArgs and ComputeClusterIdentityOutput values.
// You can construct a concrete instance of `ComputeClusterIdentityInput` via:
//
//          ComputeClusterIdentityArgs{...}
type ComputeClusterIdentityInput interface {
	pulumi.Input

	ToComputeClusterIdentityOutput() ComputeClusterIdentityOutput
	ToComputeClusterIdentityOutputWithContext(context.Context) ComputeClusterIdentityOutput
}

type ComputeClusterIdentityArgs struct {
	// A list of User Managed Identity ID's which should be assigned to the Machine Learning Compute Cluster. Changing this forces a new Machine Learning Compute Cluster to be created.
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	// The Principal ID for the Service Principal associated with the Managed Service Identity of this Machine Learning Compute Cluster.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The Tenant ID for the Service Principal associated with the Managed Service Identity of this Machine Learning Compute Cluster.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// The Type of Identity which should be used for this Machine Learning Compute Cluster. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned,UserAssigned`. Changing this forces a new Machine Learning Compute Cluster to be created.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ComputeClusterIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeClusterIdentity)(nil)).Elem()
}

func (i ComputeClusterIdentityArgs) ToComputeClusterIdentityOutput() ComputeClusterIdentityOutput {
	return i.ToComputeClusterIdentityOutputWithContext(context.Background())
}

func (i ComputeClusterIdentityArgs) ToComputeClusterIdentityOutputWithContext(ctx context.Context) ComputeClusterIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeClusterIdentityOutput)
}

func (i ComputeClusterIdentityArgs) ToComputeClusterIdentityPtrOutput() ComputeClusterIdentityPtrOutput {
	return i.ToComputeClusterIdentityPtrOutputWithContext(context.Background())
}

func (i ComputeClusterIdentityArgs) ToComputeClusterIdentityPtrOutputWithContext(ctx context.Context) ComputeClusterIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeClusterIdentityOutput).ToComputeClusterIdentityPtrOutputWithContext(ctx)
}

// ComputeClusterIdentityPtrInput is an input type that accepts ComputeClusterIdentityArgs, ComputeClusterIdentityPtr and ComputeClusterIdentityPtrOutput values.
// You can construct a concrete instance of `ComputeClusterIdentityPtrInput` via:
//
//          ComputeClusterIdentityArgs{...}
//
//  or:
//
//          nil
type ComputeClusterIdentityPtrInput interface {
	pulumi.Input

	ToComputeClusterIdentityPtrOutput() ComputeClusterIdentityPtrOutput
	ToComputeClusterIdentityPtrOutputWithContext(context.Context) ComputeClusterIdentityPtrOutput
}

type computeClusterIdentityPtrType ComputeClusterIdentityArgs

func ComputeClusterIdentityPtr(v *ComputeClusterIdentityArgs) ComputeClusterIdentityPtrInput {
	return (*computeClusterIdentityPtrType)(v)
}

func (*computeClusterIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeClusterIdentity)(nil)).Elem()
}

func (i *computeClusterIdentityPtrType) ToComputeClusterIdentityPtrOutput() ComputeClusterIdentityPtrOutput {
	return i.ToComputeClusterIdentityPtrOutputWithContext(context.Background())
}

func (i *computeClusterIdentityPtrType) ToComputeClusterIdentityPtrOutputWithContext(ctx context.Context) ComputeClusterIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeClusterIdentityPtrOutput)
}

type ComputeClusterIdentityOutput struct{ *pulumi.OutputState }

func (ComputeClusterIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeClusterIdentity)(nil)).Elem()
}

func (o ComputeClusterIdentityOutput) ToComputeClusterIdentityOutput() ComputeClusterIdentityOutput {
	return o
}

func (o ComputeClusterIdentityOutput) ToComputeClusterIdentityOutputWithContext(ctx context.Context) ComputeClusterIdentityOutput {
	return o
}

func (o ComputeClusterIdentityOutput) ToComputeClusterIdentityPtrOutput() ComputeClusterIdentityPtrOutput {
	return o.ToComputeClusterIdentityPtrOutputWithContext(context.Background())
}

func (o ComputeClusterIdentityOutput) ToComputeClusterIdentityPtrOutputWithContext(ctx context.Context) ComputeClusterIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeClusterIdentity) *ComputeClusterIdentity {
		return &v
	}).(ComputeClusterIdentityPtrOutput)
}

// A list of User Managed Identity ID's which should be assigned to the Machine Learning Compute Cluster. Changing this forces a new Machine Learning Compute Cluster to be created.
func (o ComputeClusterIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ComputeClusterIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

// The Principal ID for the Service Principal associated with the Managed Service Identity of this Machine Learning Compute Cluster.
func (o ComputeClusterIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeClusterIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The Tenant ID for the Service Principal associated with the Managed Service Identity of this Machine Learning Compute Cluster.
func (o ComputeClusterIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeClusterIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The Type of Identity which should be used for this Machine Learning Compute Cluster. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned,UserAssigned`. Changing this forces a new Machine Learning Compute Cluster to be created.
func (o ComputeClusterIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeClusterIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type ComputeClusterIdentityPtrOutput struct{ *pulumi.OutputState }

func (ComputeClusterIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeClusterIdentity)(nil)).Elem()
}

func (o ComputeClusterIdentityPtrOutput) ToComputeClusterIdentityPtrOutput() ComputeClusterIdentityPtrOutput {
	return o
}

func (o ComputeClusterIdentityPtrOutput) ToComputeClusterIdentityPtrOutputWithContext(ctx context.Context) ComputeClusterIdentityPtrOutput {
	return o
}

func (o ComputeClusterIdentityPtrOutput) Elem() ComputeClusterIdentityOutput {
	return o.ApplyT(func(v *ComputeClusterIdentity) ComputeClusterIdentity {
		if v != nil {
			return *v
		}
		var ret ComputeClusterIdentity
		return ret
	}).(ComputeClusterIdentityOutput)
}

// A list of User Managed Identity ID's which should be assigned to the Machine Learning Compute Cluster. Changing this forces a new Machine Learning Compute Cluster to be created.
func (o ComputeClusterIdentityPtrOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeClusterIdentity) []string {
		if v == nil {
			return nil
		}
		return v.IdentityIds
	}).(pulumi.StringArrayOutput)
}

// The Principal ID for the Service Principal associated with the Managed Service Identity of this Machine Learning Compute Cluster.
func (o ComputeClusterIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeClusterIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The Tenant ID for the Service Principal associated with the Managed Service Identity of this Machine Learning Compute Cluster.
func (o ComputeClusterIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeClusterIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The Type of Identity which should be used for this Machine Learning Compute Cluster. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned,UserAssigned`. Changing this forces a new Machine Learning Compute Cluster to be created.
func (o ComputeClusterIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeClusterIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type ComputeClusterScaleSettings struct {
	// Maximum node count. Changing this forces a new Machine Learning Compute Cluster to be created.
	MaxNodeCount int `pulumi:"maxNodeCount"`
	// Minimal node count. Changing this forces a new Machine Learning Compute Cluster to be created.
	MinNodeCount int `pulumi:"minNodeCount"`
	// Node Idle Time Before Scale Down: defines the time until the compute is shutdown when it has gone into Idle state. Is defined according to W3C XML schema standard for duration. Changing this forces a new Machine Learning Compute Cluster to be created.
	ScaleDownNodesAfterIdleDuration string `pulumi:"scaleDownNodesAfterIdleDuration"`
}

// ComputeClusterScaleSettingsInput is an input type that accepts ComputeClusterScaleSettingsArgs and ComputeClusterScaleSettingsOutput values.
// You can construct a concrete instance of `ComputeClusterScaleSettingsInput` via:
//
//          ComputeClusterScaleSettingsArgs{...}
type ComputeClusterScaleSettingsInput interface {
	pulumi.Input

	ToComputeClusterScaleSettingsOutput() ComputeClusterScaleSettingsOutput
	ToComputeClusterScaleSettingsOutputWithContext(context.Context) ComputeClusterScaleSettingsOutput
}

type ComputeClusterScaleSettingsArgs struct {
	// Maximum node count. Changing this forces a new Machine Learning Compute Cluster to be created.
	MaxNodeCount pulumi.IntInput `pulumi:"maxNodeCount"`
	// Minimal node count. Changing this forces a new Machine Learning Compute Cluster to be created.
	MinNodeCount pulumi.IntInput `pulumi:"minNodeCount"`
	// Node Idle Time Before Scale Down: defines the time until the compute is shutdown when it has gone into Idle state. Is defined according to W3C XML schema standard for duration. Changing this forces a new Machine Learning Compute Cluster to be created.
	ScaleDownNodesAfterIdleDuration pulumi.StringInput `pulumi:"scaleDownNodesAfterIdleDuration"`
}

func (ComputeClusterScaleSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeClusterScaleSettings)(nil)).Elem()
}

func (i ComputeClusterScaleSettingsArgs) ToComputeClusterScaleSettingsOutput() ComputeClusterScaleSettingsOutput {
	return i.ToComputeClusterScaleSettingsOutputWithContext(context.Background())
}

func (i ComputeClusterScaleSettingsArgs) ToComputeClusterScaleSettingsOutputWithContext(ctx context.Context) ComputeClusterScaleSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeClusterScaleSettingsOutput)
}

func (i ComputeClusterScaleSettingsArgs) ToComputeClusterScaleSettingsPtrOutput() ComputeClusterScaleSettingsPtrOutput {
	return i.ToComputeClusterScaleSettingsPtrOutputWithContext(context.Background())
}

func (i ComputeClusterScaleSettingsArgs) ToComputeClusterScaleSettingsPtrOutputWithContext(ctx context.Context) ComputeClusterScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeClusterScaleSettingsOutput).ToComputeClusterScaleSettingsPtrOutputWithContext(ctx)
}

// ComputeClusterScaleSettingsPtrInput is an input type that accepts ComputeClusterScaleSettingsArgs, ComputeClusterScaleSettingsPtr and ComputeClusterScaleSettingsPtrOutput values.
// You can construct a concrete instance of `ComputeClusterScaleSettingsPtrInput` via:
//
//          ComputeClusterScaleSettingsArgs{...}
//
//  or:
//
//          nil
type ComputeClusterScaleSettingsPtrInput interface {
	pulumi.Input

	ToComputeClusterScaleSettingsPtrOutput() ComputeClusterScaleSettingsPtrOutput
	ToComputeClusterScaleSettingsPtrOutputWithContext(context.Context) ComputeClusterScaleSettingsPtrOutput
}

type computeClusterScaleSettingsPtrType ComputeClusterScaleSettingsArgs

func ComputeClusterScaleSettingsPtr(v *ComputeClusterScaleSettingsArgs) ComputeClusterScaleSettingsPtrInput {
	return (*computeClusterScaleSettingsPtrType)(v)
}

func (*computeClusterScaleSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeClusterScaleSettings)(nil)).Elem()
}

func (i *computeClusterScaleSettingsPtrType) ToComputeClusterScaleSettingsPtrOutput() ComputeClusterScaleSettingsPtrOutput {
	return i.ToComputeClusterScaleSettingsPtrOutputWithContext(context.Background())
}

func (i *computeClusterScaleSettingsPtrType) ToComputeClusterScaleSettingsPtrOutputWithContext(ctx context.Context) ComputeClusterScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeClusterScaleSettingsPtrOutput)
}

type ComputeClusterScaleSettingsOutput struct{ *pulumi.OutputState }

func (ComputeClusterScaleSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeClusterScaleSettings)(nil)).Elem()
}

func (o ComputeClusterScaleSettingsOutput) ToComputeClusterScaleSettingsOutput() ComputeClusterScaleSettingsOutput {
	return o
}

func (o ComputeClusterScaleSettingsOutput) ToComputeClusterScaleSettingsOutputWithContext(ctx context.Context) ComputeClusterScaleSettingsOutput {
	return o
}

func (o ComputeClusterScaleSettingsOutput) ToComputeClusterScaleSettingsPtrOutput() ComputeClusterScaleSettingsPtrOutput {
	return o.ToComputeClusterScaleSettingsPtrOutputWithContext(context.Background())
}

func (o ComputeClusterScaleSettingsOutput) ToComputeClusterScaleSettingsPtrOutputWithContext(ctx context.Context) ComputeClusterScaleSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeClusterScaleSettings) *ComputeClusterScaleSettings {
		return &v
	}).(ComputeClusterScaleSettingsPtrOutput)
}

// Maximum node count. Changing this forces a new Machine Learning Compute Cluster to be created.
func (o ComputeClusterScaleSettingsOutput) MaxNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v ComputeClusterScaleSettings) int { return v.MaxNodeCount }).(pulumi.IntOutput)
}

// Minimal node count. Changing this forces a new Machine Learning Compute Cluster to be created.
func (o ComputeClusterScaleSettingsOutput) MinNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v ComputeClusterScaleSettings) int { return v.MinNodeCount }).(pulumi.IntOutput)
}

// Node Idle Time Before Scale Down: defines the time until the compute is shutdown when it has gone into Idle state. Is defined according to W3C XML schema standard for duration. Changing this forces a new Machine Learning Compute Cluster to be created.
func (o ComputeClusterScaleSettingsOutput) ScaleDownNodesAfterIdleDuration() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeClusterScaleSettings) string { return v.ScaleDownNodesAfterIdleDuration }).(pulumi.StringOutput)
}

type ComputeClusterScaleSettingsPtrOutput struct{ *pulumi.OutputState }

func (ComputeClusterScaleSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeClusterScaleSettings)(nil)).Elem()
}

func (o ComputeClusterScaleSettingsPtrOutput) ToComputeClusterScaleSettingsPtrOutput() ComputeClusterScaleSettingsPtrOutput {
	return o
}

func (o ComputeClusterScaleSettingsPtrOutput) ToComputeClusterScaleSettingsPtrOutputWithContext(ctx context.Context) ComputeClusterScaleSettingsPtrOutput {
	return o
}

func (o ComputeClusterScaleSettingsPtrOutput) Elem() ComputeClusterScaleSettingsOutput {
	return o.ApplyT(func(v *ComputeClusterScaleSettings) ComputeClusterScaleSettings {
		if v != nil {
			return *v
		}
		var ret ComputeClusterScaleSettings
		return ret
	}).(ComputeClusterScaleSettingsOutput)
}

// Maximum node count. Changing this forces a new Machine Learning Compute Cluster to be created.
func (o ComputeClusterScaleSettingsPtrOutput) MaxNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeClusterScaleSettings) *int {
		if v == nil {
			return nil
		}
		return &v.MaxNodeCount
	}).(pulumi.IntPtrOutput)
}

// Minimal node count. Changing this forces a new Machine Learning Compute Cluster to be created.
func (o ComputeClusterScaleSettingsPtrOutput) MinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeClusterScaleSettings) *int {
		if v == nil {
			return nil
		}
		return &v.MinNodeCount
	}).(pulumi.IntPtrOutput)
}

// Node Idle Time Before Scale Down: defines the time until the compute is shutdown when it has gone into Idle state. Is defined according to W3C XML schema standard for duration. Changing this forces a new Machine Learning Compute Cluster to be created.
func (o ComputeClusterScaleSettingsPtrOutput) ScaleDownNodesAfterIdleDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeClusterScaleSettings) *string {
		if v == nil {
			return nil
		}
		return &v.ScaleDownNodesAfterIdleDuration
	}).(pulumi.StringPtrOutput)
}

type ComputeClusterSsh struct {
	// Password of the administrator user account. Changing this forces a new Machine Learning Compute Cluster to be created.
	AdminPassword *string `pulumi:"adminPassword"`
	// Name of the administrator user account which can be used to SSH to nodes. Changing this forces a new Machine Learning Compute Cluster to be created.
	AdminUsername string `pulumi:"adminUsername"`
	// SSH public key of the administrator user account. Changing this forces a new Machine Learning Compute Cluster to be created.
	KeyValue *string `pulumi:"keyValue"`
}

// ComputeClusterSshInput is an input type that accepts ComputeClusterSshArgs and ComputeClusterSshOutput values.
// You can construct a concrete instance of `ComputeClusterSshInput` via:
//
//          ComputeClusterSshArgs{...}
type ComputeClusterSshInput interface {
	pulumi.Input

	ToComputeClusterSshOutput() ComputeClusterSshOutput
	ToComputeClusterSshOutputWithContext(context.Context) ComputeClusterSshOutput
}

type ComputeClusterSshArgs struct {
	// Password of the administrator user account. Changing this forces a new Machine Learning Compute Cluster to be created.
	AdminPassword pulumi.StringPtrInput `pulumi:"adminPassword"`
	// Name of the administrator user account which can be used to SSH to nodes. Changing this forces a new Machine Learning Compute Cluster to be created.
	AdminUsername pulumi.StringInput `pulumi:"adminUsername"`
	// SSH public key of the administrator user account. Changing this forces a new Machine Learning Compute Cluster to be created.
	KeyValue pulumi.StringPtrInput `pulumi:"keyValue"`
}

func (ComputeClusterSshArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeClusterSsh)(nil)).Elem()
}

func (i ComputeClusterSshArgs) ToComputeClusterSshOutput() ComputeClusterSshOutput {
	return i.ToComputeClusterSshOutputWithContext(context.Background())
}

func (i ComputeClusterSshArgs) ToComputeClusterSshOutputWithContext(ctx context.Context) ComputeClusterSshOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeClusterSshOutput)
}

func (i ComputeClusterSshArgs) ToComputeClusterSshPtrOutput() ComputeClusterSshPtrOutput {
	return i.ToComputeClusterSshPtrOutputWithContext(context.Background())
}

func (i ComputeClusterSshArgs) ToComputeClusterSshPtrOutputWithContext(ctx context.Context) ComputeClusterSshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeClusterSshOutput).ToComputeClusterSshPtrOutputWithContext(ctx)
}

// ComputeClusterSshPtrInput is an input type that accepts ComputeClusterSshArgs, ComputeClusterSshPtr and ComputeClusterSshPtrOutput values.
// You can construct a concrete instance of `ComputeClusterSshPtrInput` via:
//
//          ComputeClusterSshArgs{...}
//
//  or:
//
//          nil
type ComputeClusterSshPtrInput interface {
	pulumi.Input

	ToComputeClusterSshPtrOutput() ComputeClusterSshPtrOutput
	ToComputeClusterSshPtrOutputWithContext(context.Context) ComputeClusterSshPtrOutput
}

type computeClusterSshPtrType ComputeClusterSshArgs

func ComputeClusterSshPtr(v *ComputeClusterSshArgs) ComputeClusterSshPtrInput {
	return (*computeClusterSshPtrType)(v)
}

func (*computeClusterSshPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeClusterSsh)(nil)).Elem()
}

func (i *computeClusterSshPtrType) ToComputeClusterSshPtrOutput() ComputeClusterSshPtrOutput {
	return i.ToComputeClusterSshPtrOutputWithContext(context.Background())
}

func (i *computeClusterSshPtrType) ToComputeClusterSshPtrOutputWithContext(ctx context.Context) ComputeClusterSshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeClusterSshPtrOutput)
}

type ComputeClusterSshOutput struct{ *pulumi.OutputState }

func (ComputeClusterSshOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeClusterSsh)(nil)).Elem()
}

func (o ComputeClusterSshOutput) ToComputeClusterSshOutput() ComputeClusterSshOutput {
	return o
}

func (o ComputeClusterSshOutput) ToComputeClusterSshOutputWithContext(ctx context.Context) ComputeClusterSshOutput {
	return o
}

func (o ComputeClusterSshOutput) ToComputeClusterSshPtrOutput() ComputeClusterSshPtrOutput {
	return o.ToComputeClusterSshPtrOutputWithContext(context.Background())
}

func (o ComputeClusterSshOutput) ToComputeClusterSshPtrOutputWithContext(ctx context.Context) ComputeClusterSshPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeClusterSsh) *ComputeClusterSsh {
		return &v
	}).(ComputeClusterSshPtrOutput)
}

// Password of the administrator user account. Changing this forces a new Machine Learning Compute Cluster to be created.
func (o ComputeClusterSshOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeClusterSsh) *string { return v.AdminPassword }).(pulumi.StringPtrOutput)
}

// Name of the administrator user account which can be used to SSH to nodes. Changing this forces a new Machine Learning Compute Cluster to be created.
func (o ComputeClusterSshOutput) AdminUsername() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeClusterSsh) string { return v.AdminUsername }).(pulumi.StringOutput)
}

// SSH public key of the administrator user account. Changing this forces a new Machine Learning Compute Cluster to be created.
func (o ComputeClusterSshOutput) KeyValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeClusterSsh) *string { return v.KeyValue }).(pulumi.StringPtrOutput)
}

type ComputeClusterSshPtrOutput struct{ *pulumi.OutputState }

func (ComputeClusterSshPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeClusterSsh)(nil)).Elem()
}

func (o ComputeClusterSshPtrOutput) ToComputeClusterSshPtrOutput() ComputeClusterSshPtrOutput {
	return o
}

func (o ComputeClusterSshPtrOutput) ToComputeClusterSshPtrOutputWithContext(ctx context.Context) ComputeClusterSshPtrOutput {
	return o
}

func (o ComputeClusterSshPtrOutput) Elem() ComputeClusterSshOutput {
	return o.ApplyT(func(v *ComputeClusterSsh) ComputeClusterSsh {
		if v != nil {
			return *v
		}
		var ret ComputeClusterSsh
		return ret
	}).(ComputeClusterSshOutput)
}

// Password of the administrator user account. Changing this forces a new Machine Learning Compute Cluster to be created.
func (o ComputeClusterSshPtrOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeClusterSsh) *string {
		if v == nil {
			return nil
		}
		return v.AdminPassword
	}).(pulumi.StringPtrOutput)
}

// Name of the administrator user account which can be used to SSH to nodes. Changing this forces a new Machine Learning Compute Cluster to be created.
func (o ComputeClusterSshPtrOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeClusterSsh) *string {
		if v == nil {
			return nil
		}
		return &v.AdminUsername
	}).(pulumi.StringPtrOutput)
}

// SSH public key of the administrator user account. Changing this forces a new Machine Learning Compute Cluster to be created.
func (o ComputeClusterSshPtrOutput) KeyValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeClusterSsh) *string {
		if v == nil {
			return nil
		}
		return v.KeyValue
	}).(pulumi.StringPtrOutput)
}

type ComputeInstanceAssignToUser struct {
	// User’s AAD Object Id.
	ObjectId *string `pulumi:"objectId"`
	// User’s AAD Tenant Id.
	TenantId *string `pulumi:"tenantId"`
}

// ComputeInstanceAssignToUserInput is an input type that accepts ComputeInstanceAssignToUserArgs and ComputeInstanceAssignToUserOutput values.
// You can construct a concrete instance of `ComputeInstanceAssignToUserInput` via:
//
//          ComputeInstanceAssignToUserArgs{...}
type ComputeInstanceAssignToUserInput interface {
	pulumi.Input

	ToComputeInstanceAssignToUserOutput() ComputeInstanceAssignToUserOutput
	ToComputeInstanceAssignToUserOutputWithContext(context.Context) ComputeInstanceAssignToUserOutput
}

type ComputeInstanceAssignToUserArgs struct {
	// User’s AAD Object Id.
	ObjectId pulumi.StringPtrInput `pulumi:"objectId"`
	// User’s AAD Tenant Id.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
}

func (ComputeInstanceAssignToUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceAssignToUser)(nil)).Elem()
}

func (i ComputeInstanceAssignToUserArgs) ToComputeInstanceAssignToUserOutput() ComputeInstanceAssignToUserOutput {
	return i.ToComputeInstanceAssignToUserOutputWithContext(context.Background())
}

func (i ComputeInstanceAssignToUserArgs) ToComputeInstanceAssignToUserOutputWithContext(ctx context.Context) ComputeInstanceAssignToUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInstanceAssignToUserOutput)
}

func (i ComputeInstanceAssignToUserArgs) ToComputeInstanceAssignToUserPtrOutput() ComputeInstanceAssignToUserPtrOutput {
	return i.ToComputeInstanceAssignToUserPtrOutputWithContext(context.Background())
}

func (i ComputeInstanceAssignToUserArgs) ToComputeInstanceAssignToUserPtrOutputWithContext(ctx context.Context) ComputeInstanceAssignToUserPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInstanceAssignToUserOutput).ToComputeInstanceAssignToUserPtrOutputWithContext(ctx)
}

// ComputeInstanceAssignToUserPtrInput is an input type that accepts ComputeInstanceAssignToUserArgs, ComputeInstanceAssignToUserPtr and ComputeInstanceAssignToUserPtrOutput values.
// You can construct a concrete instance of `ComputeInstanceAssignToUserPtrInput` via:
//
//          ComputeInstanceAssignToUserArgs{...}
//
//  or:
//
//          nil
type ComputeInstanceAssignToUserPtrInput interface {
	pulumi.Input

	ToComputeInstanceAssignToUserPtrOutput() ComputeInstanceAssignToUserPtrOutput
	ToComputeInstanceAssignToUserPtrOutputWithContext(context.Context) ComputeInstanceAssignToUserPtrOutput
}

type computeInstanceAssignToUserPtrType ComputeInstanceAssignToUserArgs

func ComputeInstanceAssignToUserPtr(v *ComputeInstanceAssignToUserArgs) ComputeInstanceAssignToUserPtrInput {
	return (*computeInstanceAssignToUserPtrType)(v)
}

func (*computeInstanceAssignToUserPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstanceAssignToUser)(nil)).Elem()
}

func (i *computeInstanceAssignToUserPtrType) ToComputeInstanceAssignToUserPtrOutput() ComputeInstanceAssignToUserPtrOutput {
	return i.ToComputeInstanceAssignToUserPtrOutputWithContext(context.Background())
}

func (i *computeInstanceAssignToUserPtrType) ToComputeInstanceAssignToUserPtrOutputWithContext(ctx context.Context) ComputeInstanceAssignToUserPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInstanceAssignToUserPtrOutput)
}

type ComputeInstanceAssignToUserOutput struct{ *pulumi.OutputState }

func (ComputeInstanceAssignToUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceAssignToUser)(nil)).Elem()
}

func (o ComputeInstanceAssignToUserOutput) ToComputeInstanceAssignToUserOutput() ComputeInstanceAssignToUserOutput {
	return o
}

func (o ComputeInstanceAssignToUserOutput) ToComputeInstanceAssignToUserOutputWithContext(ctx context.Context) ComputeInstanceAssignToUserOutput {
	return o
}

func (o ComputeInstanceAssignToUserOutput) ToComputeInstanceAssignToUserPtrOutput() ComputeInstanceAssignToUserPtrOutput {
	return o.ToComputeInstanceAssignToUserPtrOutputWithContext(context.Background())
}

func (o ComputeInstanceAssignToUserOutput) ToComputeInstanceAssignToUserPtrOutputWithContext(ctx context.Context) ComputeInstanceAssignToUserPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeInstanceAssignToUser) *ComputeInstanceAssignToUser {
		return &v
	}).(ComputeInstanceAssignToUserPtrOutput)
}

// User’s AAD Object Id.
func (o ComputeInstanceAssignToUserOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceAssignToUser) *string { return v.ObjectId }).(pulumi.StringPtrOutput)
}

// User’s AAD Tenant Id.
func (o ComputeInstanceAssignToUserOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceAssignToUser) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type ComputeInstanceAssignToUserPtrOutput struct{ *pulumi.OutputState }

func (ComputeInstanceAssignToUserPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstanceAssignToUser)(nil)).Elem()
}

func (o ComputeInstanceAssignToUserPtrOutput) ToComputeInstanceAssignToUserPtrOutput() ComputeInstanceAssignToUserPtrOutput {
	return o
}

func (o ComputeInstanceAssignToUserPtrOutput) ToComputeInstanceAssignToUserPtrOutputWithContext(ctx context.Context) ComputeInstanceAssignToUserPtrOutput {
	return o
}

func (o ComputeInstanceAssignToUserPtrOutput) Elem() ComputeInstanceAssignToUserOutput {
	return o.ApplyT(func(v *ComputeInstanceAssignToUser) ComputeInstanceAssignToUser {
		if v != nil {
			return *v
		}
		var ret ComputeInstanceAssignToUser
		return ret
	}).(ComputeInstanceAssignToUserOutput)
}

// User’s AAD Object Id.
func (o ComputeInstanceAssignToUserPtrOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceAssignToUser) *string {
		if v == nil {
			return nil
		}
		return v.ObjectId
	}).(pulumi.StringPtrOutput)
}

// User’s AAD Tenant Id.
func (o ComputeInstanceAssignToUserPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceAssignToUser) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

type ComputeInstanceIdentity struct {
	// A list of User Managed Identity ID's which should be assigned to the Machine Learning Compute Instance. Changing this forces a new Machine Learning Compute Instance to be created.
	IdentityIds []string `pulumi:"identityIds"`
	// The Principal ID for the Service Principal associated with the Managed Service Identity of this Machine Learning Compute Instance.
	PrincipalId *string `pulumi:"principalId"`
	// User’s AAD Tenant Id.
	TenantId *string `pulumi:"tenantId"`
	// The Type of Identity which should be used for this Machine Learning Compute Instance. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned,UserAssigned`. Changing this forces a new Machine Learning Compute Instance to be created.
	Type string `pulumi:"type"`
}

// ComputeInstanceIdentityInput is an input type that accepts ComputeInstanceIdentityArgs and ComputeInstanceIdentityOutput values.
// You can construct a concrete instance of `ComputeInstanceIdentityInput` via:
//
//          ComputeInstanceIdentityArgs{...}
type ComputeInstanceIdentityInput interface {
	pulumi.Input

	ToComputeInstanceIdentityOutput() ComputeInstanceIdentityOutput
	ToComputeInstanceIdentityOutputWithContext(context.Context) ComputeInstanceIdentityOutput
}

type ComputeInstanceIdentityArgs struct {
	// A list of User Managed Identity ID's which should be assigned to the Machine Learning Compute Instance. Changing this forces a new Machine Learning Compute Instance to be created.
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	// The Principal ID for the Service Principal associated with the Managed Service Identity of this Machine Learning Compute Instance.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// User’s AAD Tenant Id.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// The Type of Identity which should be used for this Machine Learning Compute Instance. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned,UserAssigned`. Changing this forces a new Machine Learning Compute Instance to be created.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ComputeInstanceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceIdentity)(nil)).Elem()
}

func (i ComputeInstanceIdentityArgs) ToComputeInstanceIdentityOutput() ComputeInstanceIdentityOutput {
	return i.ToComputeInstanceIdentityOutputWithContext(context.Background())
}

func (i ComputeInstanceIdentityArgs) ToComputeInstanceIdentityOutputWithContext(ctx context.Context) ComputeInstanceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInstanceIdentityOutput)
}

func (i ComputeInstanceIdentityArgs) ToComputeInstanceIdentityPtrOutput() ComputeInstanceIdentityPtrOutput {
	return i.ToComputeInstanceIdentityPtrOutputWithContext(context.Background())
}

func (i ComputeInstanceIdentityArgs) ToComputeInstanceIdentityPtrOutputWithContext(ctx context.Context) ComputeInstanceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInstanceIdentityOutput).ToComputeInstanceIdentityPtrOutputWithContext(ctx)
}

// ComputeInstanceIdentityPtrInput is an input type that accepts ComputeInstanceIdentityArgs, ComputeInstanceIdentityPtr and ComputeInstanceIdentityPtrOutput values.
// You can construct a concrete instance of `ComputeInstanceIdentityPtrInput` via:
//
//          ComputeInstanceIdentityArgs{...}
//
//  or:
//
//          nil
type ComputeInstanceIdentityPtrInput interface {
	pulumi.Input

	ToComputeInstanceIdentityPtrOutput() ComputeInstanceIdentityPtrOutput
	ToComputeInstanceIdentityPtrOutputWithContext(context.Context) ComputeInstanceIdentityPtrOutput
}

type computeInstanceIdentityPtrType ComputeInstanceIdentityArgs

func ComputeInstanceIdentityPtr(v *ComputeInstanceIdentityArgs) ComputeInstanceIdentityPtrInput {
	return (*computeInstanceIdentityPtrType)(v)
}

func (*computeInstanceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstanceIdentity)(nil)).Elem()
}

func (i *computeInstanceIdentityPtrType) ToComputeInstanceIdentityPtrOutput() ComputeInstanceIdentityPtrOutput {
	return i.ToComputeInstanceIdentityPtrOutputWithContext(context.Background())
}

func (i *computeInstanceIdentityPtrType) ToComputeInstanceIdentityPtrOutputWithContext(ctx context.Context) ComputeInstanceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInstanceIdentityPtrOutput)
}

type ComputeInstanceIdentityOutput struct{ *pulumi.OutputState }

func (ComputeInstanceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceIdentity)(nil)).Elem()
}

func (o ComputeInstanceIdentityOutput) ToComputeInstanceIdentityOutput() ComputeInstanceIdentityOutput {
	return o
}

func (o ComputeInstanceIdentityOutput) ToComputeInstanceIdentityOutputWithContext(ctx context.Context) ComputeInstanceIdentityOutput {
	return o
}

func (o ComputeInstanceIdentityOutput) ToComputeInstanceIdentityPtrOutput() ComputeInstanceIdentityPtrOutput {
	return o.ToComputeInstanceIdentityPtrOutputWithContext(context.Background())
}

func (o ComputeInstanceIdentityOutput) ToComputeInstanceIdentityPtrOutputWithContext(ctx context.Context) ComputeInstanceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeInstanceIdentity) *ComputeInstanceIdentity {
		return &v
	}).(ComputeInstanceIdentityPtrOutput)
}

// A list of User Managed Identity ID's which should be assigned to the Machine Learning Compute Instance. Changing this forces a new Machine Learning Compute Instance to be created.
func (o ComputeInstanceIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ComputeInstanceIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

// The Principal ID for the Service Principal associated with the Managed Service Identity of this Machine Learning Compute Instance.
func (o ComputeInstanceIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// User’s AAD Tenant Id.
func (o ComputeInstanceIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The Type of Identity which should be used for this Machine Learning Compute Instance. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned,UserAssigned`. Changing this forces a new Machine Learning Compute Instance to be created.
func (o ComputeInstanceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeInstanceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type ComputeInstanceIdentityPtrOutput struct{ *pulumi.OutputState }

func (ComputeInstanceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstanceIdentity)(nil)).Elem()
}

func (o ComputeInstanceIdentityPtrOutput) ToComputeInstanceIdentityPtrOutput() ComputeInstanceIdentityPtrOutput {
	return o
}

func (o ComputeInstanceIdentityPtrOutput) ToComputeInstanceIdentityPtrOutputWithContext(ctx context.Context) ComputeInstanceIdentityPtrOutput {
	return o
}

func (o ComputeInstanceIdentityPtrOutput) Elem() ComputeInstanceIdentityOutput {
	return o.ApplyT(func(v *ComputeInstanceIdentity) ComputeInstanceIdentity {
		if v != nil {
			return *v
		}
		var ret ComputeInstanceIdentity
		return ret
	}).(ComputeInstanceIdentityOutput)
}

// A list of User Managed Identity ID's which should be assigned to the Machine Learning Compute Instance. Changing this forces a new Machine Learning Compute Instance to be created.
func (o ComputeInstanceIdentityPtrOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeInstanceIdentity) []string {
		if v == nil {
			return nil
		}
		return v.IdentityIds
	}).(pulumi.StringArrayOutput)
}

// The Principal ID for the Service Principal associated with the Managed Service Identity of this Machine Learning Compute Instance.
func (o ComputeInstanceIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// User’s AAD Tenant Id.
func (o ComputeInstanceIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The Type of Identity which should be used for this Machine Learning Compute Instance. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned,UserAssigned`. Changing this forces a new Machine Learning Compute Instance to be created.
func (o ComputeInstanceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type ComputeInstanceSsh struct {
	// Describes the port for connecting through SSH.
	Port *int `pulumi:"port"`
	// Specifies the SSH rsa public key file as a string. Use "ssh-keygen -t rsa -b 2048" to generate your SSH key pairs.
	PublicKey string `pulumi:"publicKey"`
	// The admin username of this Machine Learning Compute Instance.
	Username *string `pulumi:"username"`
}

// ComputeInstanceSshInput is an input type that accepts ComputeInstanceSshArgs and ComputeInstanceSshOutput values.
// You can construct a concrete instance of `ComputeInstanceSshInput` via:
//
//          ComputeInstanceSshArgs{...}
type ComputeInstanceSshInput interface {
	pulumi.Input

	ToComputeInstanceSshOutput() ComputeInstanceSshOutput
	ToComputeInstanceSshOutputWithContext(context.Context) ComputeInstanceSshOutput
}

type ComputeInstanceSshArgs struct {
	// Describes the port for connecting through SSH.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Specifies the SSH rsa public key file as a string. Use "ssh-keygen -t rsa -b 2048" to generate your SSH key pairs.
	PublicKey pulumi.StringInput `pulumi:"publicKey"`
	// The admin username of this Machine Learning Compute Instance.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ComputeInstanceSshArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceSsh)(nil)).Elem()
}

func (i ComputeInstanceSshArgs) ToComputeInstanceSshOutput() ComputeInstanceSshOutput {
	return i.ToComputeInstanceSshOutputWithContext(context.Background())
}

func (i ComputeInstanceSshArgs) ToComputeInstanceSshOutputWithContext(ctx context.Context) ComputeInstanceSshOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInstanceSshOutput)
}

func (i ComputeInstanceSshArgs) ToComputeInstanceSshPtrOutput() ComputeInstanceSshPtrOutput {
	return i.ToComputeInstanceSshPtrOutputWithContext(context.Background())
}

func (i ComputeInstanceSshArgs) ToComputeInstanceSshPtrOutputWithContext(ctx context.Context) ComputeInstanceSshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInstanceSshOutput).ToComputeInstanceSshPtrOutputWithContext(ctx)
}

// ComputeInstanceSshPtrInput is an input type that accepts ComputeInstanceSshArgs, ComputeInstanceSshPtr and ComputeInstanceSshPtrOutput values.
// You can construct a concrete instance of `ComputeInstanceSshPtrInput` via:
//
//          ComputeInstanceSshArgs{...}
//
//  or:
//
//          nil
type ComputeInstanceSshPtrInput interface {
	pulumi.Input

	ToComputeInstanceSshPtrOutput() ComputeInstanceSshPtrOutput
	ToComputeInstanceSshPtrOutputWithContext(context.Context) ComputeInstanceSshPtrOutput
}

type computeInstanceSshPtrType ComputeInstanceSshArgs

func ComputeInstanceSshPtr(v *ComputeInstanceSshArgs) ComputeInstanceSshPtrInput {
	return (*computeInstanceSshPtrType)(v)
}

func (*computeInstanceSshPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstanceSsh)(nil)).Elem()
}

func (i *computeInstanceSshPtrType) ToComputeInstanceSshPtrOutput() ComputeInstanceSshPtrOutput {
	return i.ToComputeInstanceSshPtrOutputWithContext(context.Background())
}

func (i *computeInstanceSshPtrType) ToComputeInstanceSshPtrOutputWithContext(ctx context.Context) ComputeInstanceSshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInstanceSshPtrOutput)
}

type ComputeInstanceSshOutput struct{ *pulumi.OutputState }

func (ComputeInstanceSshOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceSsh)(nil)).Elem()
}

func (o ComputeInstanceSshOutput) ToComputeInstanceSshOutput() ComputeInstanceSshOutput {
	return o
}

func (o ComputeInstanceSshOutput) ToComputeInstanceSshOutputWithContext(ctx context.Context) ComputeInstanceSshOutput {
	return o
}

func (o ComputeInstanceSshOutput) ToComputeInstanceSshPtrOutput() ComputeInstanceSshPtrOutput {
	return o.ToComputeInstanceSshPtrOutputWithContext(context.Background())
}

func (o ComputeInstanceSshOutput) ToComputeInstanceSshPtrOutputWithContext(ctx context.Context) ComputeInstanceSshPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeInstanceSsh) *ComputeInstanceSsh {
		return &v
	}).(ComputeInstanceSshPtrOutput)
}

// Describes the port for connecting through SSH.
func (o ComputeInstanceSshOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ComputeInstanceSsh) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Specifies the SSH rsa public key file as a string. Use "ssh-keygen -t rsa -b 2048" to generate your SSH key pairs.
func (o ComputeInstanceSshOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeInstanceSsh) string { return v.PublicKey }).(pulumi.StringOutput)
}

// The admin username of this Machine Learning Compute Instance.
func (o ComputeInstanceSshOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceSsh) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ComputeInstanceSshPtrOutput struct{ *pulumi.OutputState }

func (ComputeInstanceSshPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstanceSsh)(nil)).Elem()
}

func (o ComputeInstanceSshPtrOutput) ToComputeInstanceSshPtrOutput() ComputeInstanceSshPtrOutput {
	return o
}

func (o ComputeInstanceSshPtrOutput) ToComputeInstanceSshPtrOutputWithContext(ctx context.Context) ComputeInstanceSshPtrOutput {
	return o
}

func (o ComputeInstanceSshPtrOutput) Elem() ComputeInstanceSshOutput {
	return o.ApplyT(func(v *ComputeInstanceSsh) ComputeInstanceSsh {
		if v != nil {
			return *v
		}
		var ret ComputeInstanceSsh
		return ret
	}).(ComputeInstanceSshOutput)
}

// Describes the port for connecting through SSH.
func (o ComputeInstanceSshPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceSsh) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Specifies the SSH rsa public key file as a string. Use "ssh-keygen -t rsa -b 2048" to generate your SSH key pairs.
func (o ComputeInstanceSshPtrOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceSsh) *string {
		if v == nil {
			return nil
		}
		return &v.PublicKey
	}).(pulumi.StringPtrOutput)
}

// The admin username of this Machine Learning Compute Instance.
func (o ComputeInstanceSshPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceSsh) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type InferenceClusterIdentity struct {
	// A list of User Managed Identity ID's which should be assigned to the Machine Learning Inference Cluster. Changing this forces a new Machine Learning Inference Cluster to be created.
	IdentityIds []string `pulumi:"identityIds"`
	// The Principal ID for the Service Principal associated with the Managed Service Identity of this Machine Learning Inference Cluster.
	PrincipalId *string `pulumi:"principalId"`
	// The Tenant ID for the Service Principal associated with the Managed Service Identity of this Machine Learning Inference Cluster.
	TenantId *string `pulumi:"tenantId"`
	// The Type of Identity which should be used for this Machine Learning Inference Cluster. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned,UserAssigned`. Changing this forces a new Machine Learning Inference Cluster to be created.
	Type string `pulumi:"type"`
}

// InferenceClusterIdentityInput is an input type that accepts InferenceClusterIdentityArgs and InferenceClusterIdentityOutput values.
// You can construct a concrete instance of `InferenceClusterIdentityInput` via:
//
//          InferenceClusterIdentityArgs{...}
type InferenceClusterIdentityInput interface {
	pulumi.Input

	ToInferenceClusterIdentityOutput() InferenceClusterIdentityOutput
	ToInferenceClusterIdentityOutputWithContext(context.Context) InferenceClusterIdentityOutput
}

type InferenceClusterIdentityArgs struct {
	// A list of User Managed Identity ID's which should be assigned to the Machine Learning Inference Cluster. Changing this forces a new Machine Learning Inference Cluster to be created.
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	// The Principal ID for the Service Principal associated with the Managed Service Identity of this Machine Learning Inference Cluster.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The Tenant ID for the Service Principal associated with the Managed Service Identity of this Machine Learning Inference Cluster.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// The Type of Identity which should be used for this Machine Learning Inference Cluster. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned,UserAssigned`. Changing this forces a new Machine Learning Inference Cluster to be created.
	Type pulumi.StringInput `pulumi:"type"`
}

func (InferenceClusterIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InferenceClusterIdentity)(nil)).Elem()
}

func (i InferenceClusterIdentityArgs) ToInferenceClusterIdentityOutput() InferenceClusterIdentityOutput {
	return i.ToInferenceClusterIdentityOutputWithContext(context.Background())
}

func (i InferenceClusterIdentityArgs) ToInferenceClusterIdentityOutputWithContext(ctx context.Context) InferenceClusterIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InferenceClusterIdentityOutput)
}

func (i InferenceClusterIdentityArgs) ToInferenceClusterIdentityPtrOutput() InferenceClusterIdentityPtrOutput {
	return i.ToInferenceClusterIdentityPtrOutputWithContext(context.Background())
}

func (i InferenceClusterIdentityArgs) ToInferenceClusterIdentityPtrOutputWithContext(ctx context.Context) InferenceClusterIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InferenceClusterIdentityOutput).ToInferenceClusterIdentityPtrOutputWithContext(ctx)
}

// InferenceClusterIdentityPtrInput is an input type that accepts InferenceClusterIdentityArgs, InferenceClusterIdentityPtr and InferenceClusterIdentityPtrOutput values.
// You can construct a concrete instance of `InferenceClusterIdentityPtrInput` via:
//
//          InferenceClusterIdentityArgs{...}
//
//  or:
//
//          nil
type InferenceClusterIdentityPtrInput interface {
	pulumi.Input

	ToInferenceClusterIdentityPtrOutput() InferenceClusterIdentityPtrOutput
	ToInferenceClusterIdentityPtrOutputWithContext(context.Context) InferenceClusterIdentityPtrOutput
}

type inferenceClusterIdentityPtrType InferenceClusterIdentityArgs

func InferenceClusterIdentityPtr(v *InferenceClusterIdentityArgs) InferenceClusterIdentityPtrInput {
	return (*inferenceClusterIdentityPtrType)(v)
}

func (*inferenceClusterIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InferenceClusterIdentity)(nil)).Elem()
}

func (i *inferenceClusterIdentityPtrType) ToInferenceClusterIdentityPtrOutput() InferenceClusterIdentityPtrOutput {
	return i.ToInferenceClusterIdentityPtrOutputWithContext(context.Background())
}

func (i *inferenceClusterIdentityPtrType) ToInferenceClusterIdentityPtrOutputWithContext(ctx context.Context) InferenceClusterIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InferenceClusterIdentityPtrOutput)
}

type InferenceClusterIdentityOutput struct{ *pulumi.OutputState }

func (InferenceClusterIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InferenceClusterIdentity)(nil)).Elem()
}

func (o InferenceClusterIdentityOutput) ToInferenceClusterIdentityOutput() InferenceClusterIdentityOutput {
	return o
}

func (o InferenceClusterIdentityOutput) ToInferenceClusterIdentityOutputWithContext(ctx context.Context) InferenceClusterIdentityOutput {
	return o
}

func (o InferenceClusterIdentityOutput) ToInferenceClusterIdentityPtrOutput() InferenceClusterIdentityPtrOutput {
	return o.ToInferenceClusterIdentityPtrOutputWithContext(context.Background())
}

func (o InferenceClusterIdentityOutput) ToInferenceClusterIdentityPtrOutputWithContext(ctx context.Context) InferenceClusterIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InferenceClusterIdentity) *InferenceClusterIdentity {
		return &v
	}).(InferenceClusterIdentityPtrOutput)
}

// A list of User Managed Identity ID's which should be assigned to the Machine Learning Inference Cluster. Changing this forces a new Machine Learning Inference Cluster to be created.
func (o InferenceClusterIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InferenceClusterIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

// The Principal ID for the Service Principal associated with the Managed Service Identity of this Machine Learning Inference Cluster.
func (o InferenceClusterIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InferenceClusterIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The Tenant ID for the Service Principal associated with the Managed Service Identity of this Machine Learning Inference Cluster.
func (o InferenceClusterIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InferenceClusterIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The Type of Identity which should be used for this Machine Learning Inference Cluster. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned,UserAssigned`. Changing this forces a new Machine Learning Inference Cluster to be created.
func (o InferenceClusterIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InferenceClusterIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type InferenceClusterIdentityPtrOutput struct{ *pulumi.OutputState }

func (InferenceClusterIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InferenceClusterIdentity)(nil)).Elem()
}

func (o InferenceClusterIdentityPtrOutput) ToInferenceClusterIdentityPtrOutput() InferenceClusterIdentityPtrOutput {
	return o
}

func (o InferenceClusterIdentityPtrOutput) ToInferenceClusterIdentityPtrOutputWithContext(ctx context.Context) InferenceClusterIdentityPtrOutput {
	return o
}

func (o InferenceClusterIdentityPtrOutput) Elem() InferenceClusterIdentityOutput {
	return o.ApplyT(func(v *InferenceClusterIdentity) InferenceClusterIdentity {
		if v != nil {
			return *v
		}
		var ret InferenceClusterIdentity
		return ret
	}).(InferenceClusterIdentityOutput)
}

// A list of User Managed Identity ID's which should be assigned to the Machine Learning Inference Cluster. Changing this forces a new Machine Learning Inference Cluster to be created.
func (o InferenceClusterIdentityPtrOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InferenceClusterIdentity) []string {
		if v == nil {
			return nil
		}
		return v.IdentityIds
	}).(pulumi.StringArrayOutput)
}

// The Principal ID for the Service Principal associated with the Managed Service Identity of this Machine Learning Inference Cluster.
func (o InferenceClusterIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InferenceClusterIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The Tenant ID for the Service Principal associated with the Managed Service Identity of this Machine Learning Inference Cluster.
func (o InferenceClusterIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InferenceClusterIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The Type of Identity which should be used for this Machine Learning Inference Cluster. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned,UserAssigned`. Changing this forces a new Machine Learning Inference Cluster to be created.
func (o InferenceClusterIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InferenceClusterIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type InferenceClusterSsl struct {
	// The certificate for the ssl configuration.Conflicts with `ssl.0.leaf_domain_label`,`ssl.0.overwrite_existing_domain`. Changing this forces a new Machine Learning Inference Cluster to be created.
	Cert *string `pulumi:"cert"`
	// The cname of the ssl configuration.Conflicts with `ssl.0.leaf_domain_label`,`ssl.0.overwrite_existing_domain`. Changing this forces a new Machine Learning Inference Cluster to be created.
	Cname *string `pulumi:"cname"`
	// The key content for the ssl configuration.Conflicts with `ssl.0.leaf_domain_label`,`ssl.0.overwrite_existing_domain`. Changing this forces a new Machine Learning Inference Cluster to be created.
	Key *string `pulumi:"key"`
	// The leaf domain label for the ssl configuration. Conflicts with `ssl.0.cert`,`ssl.0.key`,`ssl.0.cname`. Changing this forces a new Machine Learning Inference Cluster to be created.
	LeafDomainLabel *string `pulumi:"leafDomainLabel"`
	// Whether or not to overwrite existing leaf domain. Conflicts with `ssl.0.cert`,`ssl.0.key`,`ssl.0.cname` Changing this forces a new Machine Learning Inference Cluster to be created.
	OverwriteExistingDomain *bool `pulumi:"overwriteExistingDomain"`
}

// InferenceClusterSslInput is an input type that accepts InferenceClusterSslArgs and InferenceClusterSslOutput values.
// You can construct a concrete instance of `InferenceClusterSslInput` via:
//
//          InferenceClusterSslArgs{...}
type InferenceClusterSslInput interface {
	pulumi.Input

	ToInferenceClusterSslOutput() InferenceClusterSslOutput
	ToInferenceClusterSslOutputWithContext(context.Context) InferenceClusterSslOutput
}

type InferenceClusterSslArgs struct {
	// The certificate for the ssl configuration.Conflicts with `ssl.0.leaf_domain_label`,`ssl.0.overwrite_existing_domain`. Changing this forces a new Machine Learning Inference Cluster to be created.
	Cert pulumi.StringPtrInput `pulumi:"cert"`
	// The cname of the ssl configuration.Conflicts with `ssl.0.leaf_domain_label`,`ssl.0.overwrite_existing_domain`. Changing this forces a new Machine Learning Inference Cluster to be created.
	Cname pulumi.StringPtrInput `pulumi:"cname"`
	// The key content for the ssl configuration.Conflicts with `ssl.0.leaf_domain_label`,`ssl.0.overwrite_existing_domain`. Changing this forces a new Machine Learning Inference Cluster to be created.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The leaf domain label for the ssl configuration. Conflicts with `ssl.0.cert`,`ssl.0.key`,`ssl.0.cname`. Changing this forces a new Machine Learning Inference Cluster to be created.
	LeafDomainLabel pulumi.StringPtrInput `pulumi:"leafDomainLabel"`
	// Whether or not to overwrite existing leaf domain. Conflicts with `ssl.0.cert`,`ssl.0.key`,`ssl.0.cname` Changing this forces a new Machine Learning Inference Cluster to be created.
	OverwriteExistingDomain pulumi.BoolPtrInput `pulumi:"overwriteExistingDomain"`
}

func (InferenceClusterSslArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InferenceClusterSsl)(nil)).Elem()
}

func (i InferenceClusterSslArgs) ToInferenceClusterSslOutput() InferenceClusterSslOutput {
	return i.ToInferenceClusterSslOutputWithContext(context.Background())
}

func (i InferenceClusterSslArgs) ToInferenceClusterSslOutputWithContext(ctx context.Context) InferenceClusterSslOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InferenceClusterSslOutput)
}

func (i InferenceClusterSslArgs) ToInferenceClusterSslPtrOutput() InferenceClusterSslPtrOutput {
	return i.ToInferenceClusterSslPtrOutputWithContext(context.Background())
}

func (i InferenceClusterSslArgs) ToInferenceClusterSslPtrOutputWithContext(ctx context.Context) InferenceClusterSslPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InferenceClusterSslOutput).ToInferenceClusterSslPtrOutputWithContext(ctx)
}

// InferenceClusterSslPtrInput is an input type that accepts InferenceClusterSslArgs, InferenceClusterSslPtr and InferenceClusterSslPtrOutput values.
// You can construct a concrete instance of `InferenceClusterSslPtrInput` via:
//
//          InferenceClusterSslArgs{...}
//
//  or:
//
//          nil
type InferenceClusterSslPtrInput interface {
	pulumi.Input

	ToInferenceClusterSslPtrOutput() InferenceClusterSslPtrOutput
	ToInferenceClusterSslPtrOutputWithContext(context.Context) InferenceClusterSslPtrOutput
}

type inferenceClusterSslPtrType InferenceClusterSslArgs

func InferenceClusterSslPtr(v *InferenceClusterSslArgs) InferenceClusterSslPtrInput {
	return (*inferenceClusterSslPtrType)(v)
}

func (*inferenceClusterSslPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InferenceClusterSsl)(nil)).Elem()
}

func (i *inferenceClusterSslPtrType) ToInferenceClusterSslPtrOutput() InferenceClusterSslPtrOutput {
	return i.ToInferenceClusterSslPtrOutputWithContext(context.Background())
}

func (i *inferenceClusterSslPtrType) ToInferenceClusterSslPtrOutputWithContext(ctx context.Context) InferenceClusterSslPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InferenceClusterSslPtrOutput)
}

type InferenceClusterSslOutput struct{ *pulumi.OutputState }

func (InferenceClusterSslOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InferenceClusterSsl)(nil)).Elem()
}

func (o InferenceClusterSslOutput) ToInferenceClusterSslOutput() InferenceClusterSslOutput {
	return o
}

func (o InferenceClusterSslOutput) ToInferenceClusterSslOutputWithContext(ctx context.Context) InferenceClusterSslOutput {
	return o
}

func (o InferenceClusterSslOutput) ToInferenceClusterSslPtrOutput() InferenceClusterSslPtrOutput {
	return o.ToInferenceClusterSslPtrOutputWithContext(context.Background())
}

func (o InferenceClusterSslOutput) ToInferenceClusterSslPtrOutputWithContext(ctx context.Context) InferenceClusterSslPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InferenceClusterSsl) *InferenceClusterSsl {
		return &v
	}).(InferenceClusterSslPtrOutput)
}

// The certificate for the ssl configuration.Conflicts with `ssl.0.leaf_domain_label`,`ssl.0.overwrite_existing_domain`. Changing this forces a new Machine Learning Inference Cluster to be created.
func (o InferenceClusterSslOutput) Cert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InferenceClusterSsl) *string { return v.Cert }).(pulumi.StringPtrOutput)
}

// The cname of the ssl configuration.Conflicts with `ssl.0.leaf_domain_label`,`ssl.0.overwrite_existing_domain`. Changing this forces a new Machine Learning Inference Cluster to be created.
func (o InferenceClusterSslOutput) Cname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InferenceClusterSsl) *string { return v.Cname }).(pulumi.StringPtrOutput)
}

// The key content for the ssl configuration.Conflicts with `ssl.0.leaf_domain_label`,`ssl.0.overwrite_existing_domain`. Changing this forces a new Machine Learning Inference Cluster to be created.
func (o InferenceClusterSslOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InferenceClusterSsl) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The leaf domain label for the ssl configuration. Conflicts with `ssl.0.cert`,`ssl.0.key`,`ssl.0.cname`. Changing this forces a new Machine Learning Inference Cluster to be created.
func (o InferenceClusterSslOutput) LeafDomainLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InferenceClusterSsl) *string { return v.LeafDomainLabel }).(pulumi.StringPtrOutput)
}

// Whether or not to overwrite existing leaf domain. Conflicts with `ssl.0.cert`,`ssl.0.key`,`ssl.0.cname` Changing this forces a new Machine Learning Inference Cluster to be created.
func (o InferenceClusterSslOutput) OverwriteExistingDomain() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InferenceClusterSsl) *bool { return v.OverwriteExistingDomain }).(pulumi.BoolPtrOutput)
}

type InferenceClusterSslPtrOutput struct{ *pulumi.OutputState }

func (InferenceClusterSslPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InferenceClusterSsl)(nil)).Elem()
}

func (o InferenceClusterSslPtrOutput) ToInferenceClusterSslPtrOutput() InferenceClusterSslPtrOutput {
	return o
}

func (o InferenceClusterSslPtrOutput) ToInferenceClusterSslPtrOutputWithContext(ctx context.Context) InferenceClusterSslPtrOutput {
	return o
}

func (o InferenceClusterSslPtrOutput) Elem() InferenceClusterSslOutput {
	return o.ApplyT(func(v *InferenceClusterSsl) InferenceClusterSsl {
		if v != nil {
			return *v
		}
		var ret InferenceClusterSsl
		return ret
	}).(InferenceClusterSslOutput)
}

// The certificate for the ssl configuration.Conflicts with `ssl.0.leaf_domain_label`,`ssl.0.overwrite_existing_domain`. Changing this forces a new Machine Learning Inference Cluster to be created.
func (o InferenceClusterSslPtrOutput) Cert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InferenceClusterSsl) *string {
		if v == nil {
			return nil
		}
		return v.Cert
	}).(pulumi.StringPtrOutput)
}

// The cname of the ssl configuration.Conflicts with `ssl.0.leaf_domain_label`,`ssl.0.overwrite_existing_domain`. Changing this forces a new Machine Learning Inference Cluster to be created.
func (o InferenceClusterSslPtrOutput) Cname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InferenceClusterSsl) *string {
		if v == nil {
			return nil
		}
		return v.Cname
	}).(pulumi.StringPtrOutput)
}

// The key content for the ssl configuration.Conflicts with `ssl.0.leaf_domain_label`,`ssl.0.overwrite_existing_domain`. Changing this forces a new Machine Learning Inference Cluster to be created.
func (o InferenceClusterSslPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InferenceClusterSsl) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The leaf domain label for the ssl configuration. Conflicts with `ssl.0.cert`,`ssl.0.key`,`ssl.0.cname`. Changing this forces a new Machine Learning Inference Cluster to be created.
func (o InferenceClusterSslPtrOutput) LeafDomainLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InferenceClusterSsl) *string {
		if v == nil {
			return nil
		}
		return v.LeafDomainLabel
	}).(pulumi.StringPtrOutput)
}

// Whether or not to overwrite existing leaf domain. Conflicts with `ssl.0.cert`,`ssl.0.key`,`ssl.0.cname` Changing this forces a new Machine Learning Inference Cluster to be created.
func (o InferenceClusterSslPtrOutput) OverwriteExistingDomain() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InferenceClusterSsl) *bool {
		if v == nil {
			return nil
		}
		return v.OverwriteExistingDomain
	}).(pulumi.BoolPtrOutput)
}

type SynapseSparkIdentity struct {
	// A list of User Managed Identity ID's which should be assigned to the Machine Learning Synapse Spark. Changing this forces a new Machine Learning Synapse Spark to be created.
	IdentityIds []string `pulumi:"identityIds"`
	// The Principal ID for the Service Principal associated with the Managed Service Identity of this Machine Learning Synapse Spark.
	PrincipalId *string `pulumi:"principalId"`
	// The Tenant ID for the Service Principal associated with the Managed Service Identity of this Machine Learning Synapse Spark.
	TenantId *string `pulumi:"tenantId"`
	// The Type of Identity which should be used for this Machine Learning Synapse Spark. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned,UserAssigned`. Changing this forces a new Machine Learning Synapse Spark to be created.
	Type string `pulumi:"type"`
}

// SynapseSparkIdentityInput is an input type that accepts SynapseSparkIdentityArgs and SynapseSparkIdentityOutput values.
// You can construct a concrete instance of `SynapseSparkIdentityInput` via:
//
//          SynapseSparkIdentityArgs{...}
type SynapseSparkIdentityInput interface {
	pulumi.Input

	ToSynapseSparkIdentityOutput() SynapseSparkIdentityOutput
	ToSynapseSparkIdentityOutputWithContext(context.Context) SynapseSparkIdentityOutput
}

type SynapseSparkIdentityArgs struct {
	// A list of User Managed Identity ID's which should be assigned to the Machine Learning Synapse Spark. Changing this forces a new Machine Learning Synapse Spark to be created.
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	// The Principal ID for the Service Principal associated with the Managed Service Identity of this Machine Learning Synapse Spark.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The Tenant ID for the Service Principal associated with the Managed Service Identity of this Machine Learning Synapse Spark.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// The Type of Identity which should be used for this Machine Learning Synapse Spark. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned,UserAssigned`. Changing this forces a new Machine Learning Synapse Spark to be created.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SynapseSparkIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SynapseSparkIdentity)(nil)).Elem()
}

func (i SynapseSparkIdentityArgs) ToSynapseSparkIdentityOutput() SynapseSparkIdentityOutput {
	return i.ToSynapseSparkIdentityOutputWithContext(context.Background())
}

func (i SynapseSparkIdentityArgs) ToSynapseSparkIdentityOutputWithContext(ctx context.Context) SynapseSparkIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SynapseSparkIdentityOutput)
}

func (i SynapseSparkIdentityArgs) ToSynapseSparkIdentityPtrOutput() SynapseSparkIdentityPtrOutput {
	return i.ToSynapseSparkIdentityPtrOutputWithContext(context.Background())
}

func (i SynapseSparkIdentityArgs) ToSynapseSparkIdentityPtrOutputWithContext(ctx context.Context) SynapseSparkIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SynapseSparkIdentityOutput).ToSynapseSparkIdentityPtrOutputWithContext(ctx)
}

// SynapseSparkIdentityPtrInput is an input type that accepts SynapseSparkIdentityArgs, SynapseSparkIdentityPtr and SynapseSparkIdentityPtrOutput values.
// You can construct a concrete instance of `SynapseSparkIdentityPtrInput` via:
//
//          SynapseSparkIdentityArgs{...}
//
//  or:
//
//          nil
type SynapseSparkIdentityPtrInput interface {
	pulumi.Input

	ToSynapseSparkIdentityPtrOutput() SynapseSparkIdentityPtrOutput
	ToSynapseSparkIdentityPtrOutputWithContext(context.Context) SynapseSparkIdentityPtrOutput
}

type synapseSparkIdentityPtrType SynapseSparkIdentityArgs

func SynapseSparkIdentityPtr(v *SynapseSparkIdentityArgs) SynapseSparkIdentityPtrInput {
	return (*synapseSparkIdentityPtrType)(v)
}

func (*synapseSparkIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SynapseSparkIdentity)(nil)).Elem()
}

func (i *synapseSparkIdentityPtrType) ToSynapseSparkIdentityPtrOutput() SynapseSparkIdentityPtrOutput {
	return i.ToSynapseSparkIdentityPtrOutputWithContext(context.Background())
}

func (i *synapseSparkIdentityPtrType) ToSynapseSparkIdentityPtrOutputWithContext(ctx context.Context) SynapseSparkIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SynapseSparkIdentityPtrOutput)
}

type SynapseSparkIdentityOutput struct{ *pulumi.OutputState }

func (SynapseSparkIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SynapseSparkIdentity)(nil)).Elem()
}

func (o SynapseSparkIdentityOutput) ToSynapseSparkIdentityOutput() SynapseSparkIdentityOutput {
	return o
}

func (o SynapseSparkIdentityOutput) ToSynapseSparkIdentityOutputWithContext(ctx context.Context) SynapseSparkIdentityOutput {
	return o
}

func (o SynapseSparkIdentityOutput) ToSynapseSparkIdentityPtrOutput() SynapseSparkIdentityPtrOutput {
	return o.ToSynapseSparkIdentityPtrOutputWithContext(context.Background())
}

func (o SynapseSparkIdentityOutput) ToSynapseSparkIdentityPtrOutputWithContext(ctx context.Context) SynapseSparkIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SynapseSparkIdentity) *SynapseSparkIdentity {
		return &v
	}).(SynapseSparkIdentityPtrOutput)
}

// A list of User Managed Identity ID's which should be assigned to the Machine Learning Synapse Spark. Changing this forces a new Machine Learning Synapse Spark to be created.
func (o SynapseSparkIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SynapseSparkIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

// The Principal ID for the Service Principal associated with the Managed Service Identity of this Machine Learning Synapse Spark.
func (o SynapseSparkIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The Tenant ID for the Service Principal associated with the Managed Service Identity of this Machine Learning Synapse Spark.
func (o SynapseSparkIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The Type of Identity which should be used for this Machine Learning Synapse Spark. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned,UserAssigned`. Changing this forces a new Machine Learning Synapse Spark to be created.
func (o SynapseSparkIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SynapseSparkIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type SynapseSparkIdentityPtrOutput struct{ *pulumi.OutputState }

func (SynapseSparkIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SynapseSparkIdentity)(nil)).Elem()
}

func (o SynapseSparkIdentityPtrOutput) ToSynapseSparkIdentityPtrOutput() SynapseSparkIdentityPtrOutput {
	return o
}

func (o SynapseSparkIdentityPtrOutput) ToSynapseSparkIdentityPtrOutputWithContext(ctx context.Context) SynapseSparkIdentityPtrOutput {
	return o
}

func (o SynapseSparkIdentityPtrOutput) Elem() SynapseSparkIdentityOutput {
	return o.ApplyT(func(v *SynapseSparkIdentity) SynapseSparkIdentity {
		if v != nil {
			return *v
		}
		var ret SynapseSparkIdentity
		return ret
	}).(SynapseSparkIdentityOutput)
}

// A list of User Managed Identity ID's which should be assigned to the Machine Learning Synapse Spark. Changing this forces a new Machine Learning Synapse Spark to be created.
func (o SynapseSparkIdentityPtrOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SynapseSparkIdentity) []string {
		if v == nil {
			return nil
		}
		return v.IdentityIds
	}).(pulumi.StringArrayOutput)
}

// The Principal ID for the Service Principal associated with the Managed Service Identity of this Machine Learning Synapse Spark.
func (o SynapseSparkIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSparkIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The Tenant ID for the Service Principal associated with the Managed Service Identity of this Machine Learning Synapse Spark.
func (o SynapseSparkIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSparkIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The Type of Identity which should be used for this Machine Learning Synapse Spark. Possible values are `SystemAssigned`, `UserAssigned` and `SystemAssigned,UserAssigned`. Changing this forces a new Machine Learning Synapse Spark to be created.
func (o SynapseSparkIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSparkIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type WorkspaceIdentity struct {
	// The (Client) ID of the Service Principal.
	PrincipalId *string `pulumi:"principalId"`
	// The ID of the Tenant the Service Principal is assigned in.
	TenantId *string `pulumi:"tenantId"`
	// The Type of Identity which should be used for this Disk Encryption Set. At this time the only possible value is `SystemAssigned`.
	Type string `pulumi:"type"`
}

// WorkspaceIdentityInput is an input type that accepts WorkspaceIdentityArgs and WorkspaceIdentityOutput values.
// You can construct a concrete instance of `WorkspaceIdentityInput` via:
//
//          WorkspaceIdentityArgs{...}
type WorkspaceIdentityInput interface {
	pulumi.Input

	ToWorkspaceIdentityOutput() WorkspaceIdentityOutput
	ToWorkspaceIdentityOutputWithContext(context.Context) WorkspaceIdentityOutput
}

type WorkspaceIdentityArgs struct {
	// The (Client) ID of the Service Principal.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The ID of the Tenant the Service Principal is assigned in.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// The Type of Identity which should be used for this Disk Encryption Set. At this time the only possible value is `SystemAssigned`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (WorkspaceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceIdentity)(nil)).Elem()
}

func (i WorkspaceIdentityArgs) ToWorkspaceIdentityOutput() WorkspaceIdentityOutput {
	return i.ToWorkspaceIdentityOutputWithContext(context.Background())
}

func (i WorkspaceIdentityArgs) ToWorkspaceIdentityOutputWithContext(ctx context.Context) WorkspaceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceIdentityOutput)
}

func (i WorkspaceIdentityArgs) ToWorkspaceIdentityPtrOutput() WorkspaceIdentityPtrOutput {
	return i.ToWorkspaceIdentityPtrOutputWithContext(context.Background())
}

func (i WorkspaceIdentityArgs) ToWorkspaceIdentityPtrOutputWithContext(ctx context.Context) WorkspaceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceIdentityOutput).ToWorkspaceIdentityPtrOutputWithContext(ctx)
}

// WorkspaceIdentityPtrInput is an input type that accepts WorkspaceIdentityArgs, WorkspaceIdentityPtr and WorkspaceIdentityPtrOutput values.
// You can construct a concrete instance of `WorkspaceIdentityPtrInput` via:
//
//          WorkspaceIdentityArgs{...}
//
//  or:
//
//          nil
type WorkspaceIdentityPtrInput interface {
	pulumi.Input

	ToWorkspaceIdentityPtrOutput() WorkspaceIdentityPtrOutput
	ToWorkspaceIdentityPtrOutputWithContext(context.Context) WorkspaceIdentityPtrOutput
}

type workspaceIdentityPtrType WorkspaceIdentityArgs

func WorkspaceIdentityPtr(v *WorkspaceIdentityArgs) WorkspaceIdentityPtrInput {
	return (*workspaceIdentityPtrType)(v)
}

func (*workspaceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceIdentity)(nil)).Elem()
}

func (i *workspaceIdentityPtrType) ToWorkspaceIdentityPtrOutput() WorkspaceIdentityPtrOutput {
	return i.ToWorkspaceIdentityPtrOutputWithContext(context.Background())
}

func (i *workspaceIdentityPtrType) ToWorkspaceIdentityPtrOutputWithContext(ctx context.Context) WorkspaceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceIdentityPtrOutput)
}

type WorkspaceIdentityOutput struct{ *pulumi.OutputState }

func (WorkspaceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceIdentity)(nil)).Elem()
}

func (o WorkspaceIdentityOutput) ToWorkspaceIdentityOutput() WorkspaceIdentityOutput {
	return o
}

func (o WorkspaceIdentityOutput) ToWorkspaceIdentityOutputWithContext(ctx context.Context) WorkspaceIdentityOutput {
	return o
}

func (o WorkspaceIdentityOutput) ToWorkspaceIdentityPtrOutput() WorkspaceIdentityPtrOutput {
	return o.ToWorkspaceIdentityPtrOutputWithContext(context.Background())
}

func (o WorkspaceIdentityOutput) ToWorkspaceIdentityPtrOutputWithContext(ctx context.Context) WorkspaceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkspaceIdentity) *WorkspaceIdentity {
		return &v
	}).(WorkspaceIdentityPtrOutput)
}

// The (Client) ID of the Service Principal.
func (o WorkspaceIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The ID of the Tenant the Service Principal is assigned in.
func (o WorkspaceIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The Type of Identity which should be used for this Disk Encryption Set. At this time the only possible value is `SystemAssigned`.
func (o WorkspaceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WorkspaceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type WorkspaceIdentityPtrOutput struct{ *pulumi.OutputState }

func (WorkspaceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceIdentity)(nil)).Elem()
}

func (o WorkspaceIdentityPtrOutput) ToWorkspaceIdentityPtrOutput() WorkspaceIdentityPtrOutput {
	return o
}

func (o WorkspaceIdentityPtrOutput) ToWorkspaceIdentityPtrOutputWithContext(ctx context.Context) WorkspaceIdentityPtrOutput {
	return o
}

func (o WorkspaceIdentityPtrOutput) Elem() WorkspaceIdentityOutput {
	return o.ApplyT(func(v *WorkspaceIdentity) WorkspaceIdentity {
		if v != nil {
			return *v
		}
		var ret WorkspaceIdentity
		return ret
	}).(WorkspaceIdentityOutput)
}

// The (Client) ID of the Service Principal.
func (o WorkspaceIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The ID of the Tenant the Service Principal is assigned in.
func (o WorkspaceIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The Type of Identity which should be used for this Disk Encryption Set. At this time the only possible value is `SystemAssigned`.
func (o WorkspaceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type GetWorkspaceIdentity struct {
	PrincipalId string `pulumi:"principalId"`
	TenantId    string `pulumi:"tenantId"`
	Type        string `pulumi:"type"`
}

// GetWorkspaceIdentityInput is an input type that accepts GetWorkspaceIdentityArgs and GetWorkspaceIdentityOutput values.
// You can construct a concrete instance of `GetWorkspaceIdentityInput` via:
//
//          GetWorkspaceIdentityArgs{...}
type GetWorkspaceIdentityInput interface {
	pulumi.Input

	ToGetWorkspaceIdentityOutput() GetWorkspaceIdentityOutput
	ToGetWorkspaceIdentityOutputWithContext(context.Context) GetWorkspaceIdentityOutput
}

type GetWorkspaceIdentityArgs struct {
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	TenantId    pulumi.StringInput `pulumi:"tenantId"`
	Type        pulumi.StringInput `pulumi:"type"`
}

func (GetWorkspaceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWorkspaceIdentity)(nil)).Elem()
}

func (i GetWorkspaceIdentityArgs) ToGetWorkspaceIdentityOutput() GetWorkspaceIdentityOutput {
	return i.ToGetWorkspaceIdentityOutputWithContext(context.Background())
}

func (i GetWorkspaceIdentityArgs) ToGetWorkspaceIdentityOutputWithContext(ctx context.Context) GetWorkspaceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWorkspaceIdentityOutput)
}

// GetWorkspaceIdentityArrayInput is an input type that accepts GetWorkspaceIdentityArray and GetWorkspaceIdentityArrayOutput values.
// You can construct a concrete instance of `GetWorkspaceIdentityArrayInput` via:
//
//          GetWorkspaceIdentityArray{ GetWorkspaceIdentityArgs{...} }
type GetWorkspaceIdentityArrayInput interface {
	pulumi.Input

	ToGetWorkspaceIdentityArrayOutput() GetWorkspaceIdentityArrayOutput
	ToGetWorkspaceIdentityArrayOutputWithContext(context.Context) GetWorkspaceIdentityArrayOutput
}

type GetWorkspaceIdentityArray []GetWorkspaceIdentityInput

func (GetWorkspaceIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWorkspaceIdentity)(nil)).Elem()
}

func (i GetWorkspaceIdentityArray) ToGetWorkspaceIdentityArrayOutput() GetWorkspaceIdentityArrayOutput {
	return i.ToGetWorkspaceIdentityArrayOutputWithContext(context.Background())
}

func (i GetWorkspaceIdentityArray) ToGetWorkspaceIdentityArrayOutputWithContext(ctx context.Context) GetWorkspaceIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWorkspaceIdentityArrayOutput)
}

type GetWorkspaceIdentityOutput struct{ *pulumi.OutputState }

func (GetWorkspaceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWorkspaceIdentity)(nil)).Elem()
}

func (o GetWorkspaceIdentityOutput) ToGetWorkspaceIdentityOutput() GetWorkspaceIdentityOutput {
	return o
}

func (o GetWorkspaceIdentityOutput) ToGetWorkspaceIdentityOutputWithContext(ctx context.Context) GetWorkspaceIdentityOutput {
	return o
}

func (o GetWorkspaceIdentityOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v GetWorkspaceIdentity) string { return v.PrincipalId }).(pulumi.StringOutput)
}

func (o GetWorkspaceIdentityOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v GetWorkspaceIdentity) string { return v.TenantId }).(pulumi.StringOutput)
}

func (o GetWorkspaceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetWorkspaceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type GetWorkspaceIdentityArrayOutput struct{ *pulumi.OutputState }

func (GetWorkspaceIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWorkspaceIdentity)(nil)).Elem()
}

func (o GetWorkspaceIdentityArrayOutput) ToGetWorkspaceIdentityArrayOutput() GetWorkspaceIdentityArrayOutput {
	return o
}

func (o GetWorkspaceIdentityArrayOutput) ToGetWorkspaceIdentityArrayOutputWithContext(ctx context.Context) GetWorkspaceIdentityArrayOutput {
	return o
}

func (o GetWorkspaceIdentityArrayOutput) Index(i pulumi.IntInput) GetWorkspaceIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetWorkspaceIdentity {
		return vs[0].([]GetWorkspaceIdentity)[vs[1].(int)]
	}).(GetWorkspaceIdentityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeClusterIdentityInput)(nil)).Elem(), ComputeClusterIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeClusterIdentityPtrInput)(nil)).Elem(), ComputeClusterIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeClusterScaleSettingsInput)(nil)).Elem(), ComputeClusterScaleSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeClusterScaleSettingsPtrInput)(nil)).Elem(), ComputeClusterScaleSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeClusterSshInput)(nil)).Elem(), ComputeClusterSshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeClusterSshPtrInput)(nil)).Elem(), ComputeClusterSshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeInstanceAssignToUserInput)(nil)).Elem(), ComputeInstanceAssignToUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeInstanceAssignToUserPtrInput)(nil)).Elem(), ComputeInstanceAssignToUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeInstanceIdentityInput)(nil)).Elem(), ComputeInstanceIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeInstanceIdentityPtrInput)(nil)).Elem(), ComputeInstanceIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeInstanceSshInput)(nil)).Elem(), ComputeInstanceSshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeInstanceSshPtrInput)(nil)).Elem(), ComputeInstanceSshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InferenceClusterIdentityInput)(nil)).Elem(), InferenceClusterIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InferenceClusterIdentityPtrInput)(nil)).Elem(), InferenceClusterIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InferenceClusterSslInput)(nil)).Elem(), InferenceClusterSslArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InferenceClusterSslPtrInput)(nil)).Elem(), InferenceClusterSslArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SynapseSparkIdentityInput)(nil)).Elem(), SynapseSparkIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SynapseSparkIdentityPtrInput)(nil)).Elem(), SynapseSparkIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceIdentityInput)(nil)).Elem(), WorkspaceIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceIdentityPtrInput)(nil)).Elem(), WorkspaceIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWorkspaceIdentityInput)(nil)).Elem(), GetWorkspaceIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWorkspaceIdentityArrayInput)(nil)).Elem(), GetWorkspaceIdentityArray{})
	pulumi.RegisterOutputType(ComputeClusterIdentityOutput{})
	pulumi.RegisterOutputType(ComputeClusterIdentityPtrOutput{})
	pulumi.RegisterOutputType(ComputeClusterScaleSettingsOutput{})
	pulumi.RegisterOutputType(ComputeClusterScaleSettingsPtrOutput{})
	pulumi.RegisterOutputType(ComputeClusterSshOutput{})
	pulumi.RegisterOutputType(ComputeClusterSshPtrOutput{})
	pulumi.RegisterOutputType(ComputeInstanceAssignToUserOutput{})
	pulumi.RegisterOutputType(ComputeInstanceAssignToUserPtrOutput{})
	pulumi.RegisterOutputType(ComputeInstanceIdentityOutput{})
	pulumi.RegisterOutputType(ComputeInstanceIdentityPtrOutput{})
	pulumi.RegisterOutputType(ComputeInstanceSshOutput{})
	pulumi.RegisterOutputType(ComputeInstanceSshPtrOutput{})
	pulumi.RegisterOutputType(InferenceClusterIdentityOutput{})
	pulumi.RegisterOutputType(InferenceClusterIdentityPtrOutput{})
	pulumi.RegisterOutputType(InferenceClusterSslOutput{})
	pulumi.RegisterOutputType(InferenceClusterSslPtrOutput{})
	pulumi.RegisterOutputType(SynapseSparkIdentityOutput{})
	pulumi.RegisterOutputType(SynapseSparkIdentityPtrOutput{})
	pulumi.RegisterOutputType(WorkspaceIdentityOutput{})
	pulumi.RegisterOutputType(WorkspaceIdentityPtrOutput{})
	pulumi.RegisterOutputType(GetWorkspaceIdentityOutput{})
	pulumi.RegisterOutputType(GetWorkspaceIdentityArrayOutput{})
}
