// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Data Lake Gen2 File System within an Azure Storage Account.
//
// > **NOTE:** This resource requires some `Storage` specific roles which are not granted by default. Some of the built-ins roles that can be attributed are [`Storage Account Contributor`](https://docs.microsoft.com/azure/role-based-access-control/built-in-roles#storage-account-contributor), [`Storage Blob Data Owner`](https://docs.microsoft.com/azure/role-based-access-control/built-in-roles#storage-blob-data-owner), [`Storage Blob Data Contributor`](https://docs.microsoft.com/azure/role-based-access-control/built-in-roles#storage-blob-data-contributor), [`Storage Blob Data Reader`](https://docs.microsoft.com/azure/role-based-access-control/built-in-roles#storage-blob-data-reader).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Location:               exampleResourceGroup.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("LRS"),
//				AccountKind:            pulumi.String("StorageV2"),
//				IsHnsEnabled:           pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = storage.NewDataLakeGen2Filesystem(ctx, "exampleDataLakeGen2Filesystem", &storage.DataLakeGen2FilesystemArgs{
//				StorageAccountId: exampleAccount.ID(),
//				Properties: pulumi.StringMap{
//					"hello": pulumi.String("aGVsbG8="),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Data Lake Gen2 File System's can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:storage/dataLakeGen2Filesystem:DataLakeGen2Filesystem queue1 https://account1.dfs.core.windows.net/fileSystem1
//
// ```
type DataLakeGen2Filesystem struct {
	pulumi.CustomResourceState

	// One or more `ace` blocks as defined below to specify the entries for the ACL for the path.
	Aces DataLakeGen2FilesystemAceArrayOutput `pulumi:"aces"`
	// Specifies the Object ID of the Azure Active Directory Group to make the owning group of the root path (i.e. `/`). Possible values also include `$superuser`.
	//
	// > **NOTE:** The Storage Account requires `accountKind` to be either `StorageV2` or `BlobStorage`. In addition, `isHnsEnabled` has to be set to `true`.
	Group pulumi.StringOutput `pulumi:"group"`
	// The name of the Data Lake Gen2 File System which should be created within the Storage Account. Must be unique within the storage account the queue is located. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the Object ID of the Azure Active Directory User to make the owning user of the root path (i.e. `/`). Possible values also include `$superuser`.
	Owner pulumi.StringOutput `pulumi:"owner"`
	// A mapping of Key to Base64-Encoded Values which should be assigned to this Data Lake Gen2 File System.
	Properties pulumi.StringMapOutput `pulumi:"properties"`
	// Specifies the ID of the Storage Account in which the Data Lake Gen2 File System should exist. Changing this forces a new resource to be created.
	StorageAccountId pulumi.StringOutput `pulumi:"storageAccountId"`
}

// NewDataLakeGen2Filesystem registers a new resource with the given unique name, arguments, and options.
func NewDataLakeGen2Filesystem(ctx *pulumi.Context,
	name string, args *DataLakeGen2FilesystemArgs, opts ...pulumi.ResourceOption) (*DataLakeGen2Filesystem, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StorageAccountId == nil {
		return nil, errors.New("invalid value for required argument 'StorageAccountId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataLakeGen2Filesystem
	err := ctx.RegisterResource("azure:storage/dataLakeGen2Filesystem:DataLakeGen2Filesystem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataLakeGen2Filesystem gets an existing DataLakeGen2Filesystem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataLakeGen2Filesystem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataLakeGen2FilesystemState, opts ...pulumi.ResourceOption) (*DataLakeGen2Filesystem, error) {
	var resource DataLakeGen2Filesystem
	err := ctx.ReadResource("azure:storage/dataLakeGen2Filesystem:DataLakeGen2Filesystem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataLakeGen2Filesystem resources.
type dataLakeGen2FilesystemState struct {
	// One or more `ace` blocks as defined below to specify the entries for the ACL for the path.
	Aces []DataLakeGen2FilesystemAce `pulumi:"aces"`
	// Specifies the Object ID of the Azure Active Directory Group to make the owning group of the root path (i.e. `/`). Possible values also include `$superuser`.
	//
	// > **NOTE:** The Storage Account requires `accountKind` to be either `StorageV2` or `BlobStorage`. In addition, `isHnsEnabled` has to be set to `true`.
	Group *string `pulumi:"group"`
	// The name of the Data Lake Gen2 File System which should be created within the Storage Account. Must be unique within the storage account the queue is located. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies the Object ID of the Azure Active Directory User to make the owning user of the root path (i.e. `/`). Possible values also include `$superuser`.
	Owner *string `pulumi:"owner"`
	// A mapping of Key to Base64-Encoded Values which should be assigned to this Data Lake Gen2 File System.
	Properties map[string]string `pulumi:"properties"`
	// Specifies the ID of the Storage Account in which the Data Lake Gen2 File System should exist. Changing this forces a new resource to be created.
	StorageAccountId *string `pulumi:"storageAccountId"`
}

type DataLakeGen2FilesystemState struct {
	// One or more `ace` blocks as defined below to specify the entries for the ACL for the path.
	Aces DataLakeGen2FilesystemAceArrayInput
	// Specifies the Object ID of the Azure Active Directory Group to make the owning group of the root path (i.e. `/`). Possible values also include `$superuser`.
	//
	// > **NOTE:** The Storage Account requires `accountKind` to be either `StorageV2` or `BlobStorage`. In addition, `isHnsEnabled` has to be set to `true`.
	Group pulumi.StringPtrInput
	// The name of the Data Lake Gen2 File System which should be created within the Storage Account. Must be unique within the storage account the queue is located. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies the Object ID of the Azure Active Directory User to make the owning user of the root path (i.e. `/`). Possible values also include `$superuser`.
	Owner pulumi.StringPtrInput
	// A mapping of Key to Base64-Encoded Values which should be assigned to this Data Lake Gen2 File System.
	Properties pulumi.StringMapInput
	// Specifies the ID of the Storage Account in which the Data Lake Gen2 File System should exist. Changing this forces a new resource to be created.
	StorageAccountId pulumi.StringPtrInput
}

func (DataLakeGen2FilesystemState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataLakeGen2FilesystemState)(nil)).Elem()
}

type dataLakeGen2FilesystemArgs struct {
	// One or more `ace` blocks as defined below to specify the entries for the ACL for the path.
	Aces []DataLakeGen2FilesystemAce `pulumi:"aces"`
	// Specifies the Object ID of the Azure Active Directory Group to make the owning group of the root path (i.e. `/`). Possible values also include `$superuser`.
	//
	// > **NOTE:** The Storage Account requires `accountKind` to be either `StorageV2` or `BlobStorage`. In addition, `isHnsEnabled` has to be set to `true`.
	Group *string `pulumi:"group"`
	// The name of the Data Lake Gen2 File System which should be created within the Storage Account. Must be unique within the storage account the queue is located. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies the Object ID of the Azure Active Directory User to make the owning user of the root path (i.e. `/`). Possible values also include `$superuser`.
	Owner *string `pulumi:"owner"`
	// A mapping of Key to Base64-Encoded Values which should be assigned to this Data Lake Gen2 File System.
	Properties map[string]string `pulumi:"properties"`
	// Specifies the ID of the Storage Account in which the Data Lake Gen2 File System should exist. Changing this forces a new resource to be created.
	StorageAccountId string `pulumi:"storageAccountId"`
}

// The set of arguments for constructing a DataLakeGen2Filesystem resource.
type DataLakeGen2FilesystemArgs struct {
	// One or more `ace` blocks as defined below to specify the entries for the ACL for the path.
	Aces DataLakeGen2FilesystemAceArrayInput
	// Specifies the Object ID of the Azure Active Directory Group to make the owning group of the root path (i.e. `/`). Possible values also include `$superuser`.
	//
	// > **NOTE:** The Storage Account requires `accountKind` to be either `StorageV2` or `BlobStorage`. In addition, `isHnsEnabled` has to be set to `true`.
	Group pulumi.StringPtrInput
	// The name of the Data Lake Gen2 File System which should be created within the Storage Account. Must be unique within the storage account the queue is located. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies the Object ID of the Azure Active Directory User to make the owning user of the root path (i.e. `/`). Possible values also include `$superuser`.
	Owner pulumi.StringPtrInput
	// A mapping of Key to Base64-Encoded Values which should be assigned to this Data Lake Gen2 File System.
	Properties pulumi.StringMapInput
	// Specifies the ID of the Storage Account in which the Data Lake Gen2 File System should exist. Changing this forces a new resource to be created.
	StorageAccountId pulumi.StringInput
}

func (DataLakeGen2FilesystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataLakeGen2FilesystemArgs)(nil)).Elem()
}

type DataLakeGen2FilesystemInput interface {
	pulumi.Input

	ToDataLakeGen2FilesystemOutput() DataLakeGen2FilesystemOutput
	ToDataLakeGen2FilesystemOutputWithContext(ctx context.Context) DataLakeGen2FilesystemOutput
}

func (*DataLakeGen2Filesystem) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLakeGen2Filesystem)(nil)).Elem()
}

func (i *DataLakeGen2Filesystem) ToDataLakeGen2FilesystemOutput() DataLakeGen2FilesystemOutput {
	return i.ToDataLakeGen2FilesystemOutputWithContext(context.Background())
}

func (i *DataLakeGen2Filesystem) ToDataLakeGen2FilesystemOutputWithContext(ctx context.Context) DataLakeGen2FilesystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeGen2FilesystemOutput)
}

// DataLakeGen2FilesystemArrayInput is an input type that accepts DataLakeGen2FilesystemArray and DataLakeGen2FilesystemArrayOutput values.
// You can construct a concrete instance of `DataLakeGen2FilesystemArrayInput` via:
//
//	DataLakeGen2FilesystemArray{ DataLakeGen2FilesystemArgs{...} }
type DataLakeGen2FilesystemArrayInput interface {
	pulumi.Input

	ToDataLakeGen2FilesystemArrayOutput() DataLakeGen2FilesystemArrayOutput
	ToDataLakeGen2FilesystemArrayOutputWithContext(context.Context) DataLakeGen2FilesystemArrayOutput
}

type DataLakeGen2FilesystemArray []DataLakeGen2FilesystemInput

func (DataLakeGen2FilesystemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataLakeGen2Filesystem)(nil)).Elem()
}

func (i DataLakeGen2FilesystemArray) ToDataLakeGen2FilesystemArrayOutput() DataLakeGen2FilesystemArrayOutput {
	return i.ToDataLakeGen2FilesystemArrayOutputWithContext(context.Background())
}

func (i DataLakeGen2FilesystemArray) ToDataLakeGen2FilesystemArrayOutputWithContext(ctx context.Context) DataLakeGen2FilesystemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeGen2FilesystemArrayOutput)
}

// DataLakeGen2FilesystemMapInput is an input type that accepts DataLakeGen2FilesystemMap and DataLakeGen2FilesystemMapOutput values.
// You can construct a concrete instance of `DataLakeGen2FilesystemMapInput` via:
//
//	DataLakeGen2FilesystemMap{ "key": DataLakeGen2FilesystemArgs{...} }
type DataLakeGen2FilesystemMapInput interface {
	pulumi.Input

	ToDataLakeGen2FilesystemMapOutput() DataLakeGen2FilesystemMapOutput
	ToDataLakeGen2FilesystemMapOutputWithContext(context.Context) DataLakeGen2FilesystemMapOutput
}

type DataLakeGen2FilesystemMap map[string]DataLakeGen2FilesystemInput

func (DataLakeGen2FilesystemMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataLakeGen2Filesystem)(nil)).Elem()
}

func (i DataLakeGen2FilesystemMap) ToDataLakeGen2FilesystemMapOutput() DataLakeGen2FilesystemMapOutput {
	return i.ToDataLakeGen2FilesystemMapOutputWithContext(context.Background())
}

func (i DataLakeGen2FilesystemMap) ToDataLakeGen2FilesystemMapOutputWithContext(ctx context.Context) DataLakeGen2FilesystemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeGen2FilesystemMapOutput)
}

type DataLakeGen2FilesystemOutput struct{ *pulumi.OutputState }

func (DataLakeGen2FilesystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLakeGen2Filesystem)(nil)).Elem()
}

func (o DataLakeGen2FilesystemOutput) ToDataLakeGen2FilesystemOutput() DataLakeGen2FilesystemOutput {
	return o
}

func (o DataLakeGen2FilesystemOutput) ToDataLakeGen2FilesystemOutputWithContext(ctx context.Context) DataLakeGen2FilesystemOutput {
	return o
}

// One or more `ace` blocks as defined below to specify the entries for the ACL for the path.
func (o DataLakeGen2FilesystemOutput) Aces() DataLakeGen2FilesystemAceArrayOutput {
	return o.ApplyT(func(v *DataLakeGen2Filesystem) DataLakeGen2FilesystemAceArrayOutput { return v.Aces }).(DataLakeGen2FilesystemAceArrayOutput)
}

// Specifies the Object ID of the Azure Active Directory Group to make the owning group of the root path (i.e. `/`). Possible values also include `$superuser`.
//
// > **NOTE:** The Storage Account requires `accountKind` to be either `StorageV2` or `BlobStorage`. In addition, `isHnsEnabled` has to be set to `true`.
func (o DataLakeGen2FilesystemOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v *DataLakeGen2Filesystem) pulumi.StringOutput { return v.Group }).(pulumi.StringOutput)
}

// The name of the Data Lake Gen2 File System which should be created within the Storage Account. Must be unique within the storage account the queue is located. Changing this forces a new resource to be created.
func (o DataLakeGen2FilesystemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataLakeGen2Filesystem) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the Object ID of the Azure Active Directory User to make the owning user of the root path (i.e. `/`). Possible values also include `$superuser`.
func (o DataLakeGen2FilesystemOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *DataLakeGen2Filesystem) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// A mapping of Key to Base64-Encoded Values which should be assigned to this Data Lake Gen2 File System.
func (o DataLakeGen2FilesystemOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataLakeGen2Filesystem) pulumi.StringMapOutput { return v.Properties }).(pulumi.StringMapOutput)
}

// Specifies the ID of the Storage Account in which the Data Lake Gen2 File System should exist. Changing this forces a new resource to be created.
func (o DataLakeGen2FilesystemOutput) StorageAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataLakeGen2Filesystem) pulumi.StringOutput { return v.StorageAccountId }).(pulumi.StringOutput)
}

type DataLakeGen2FilesystemArrayOutput struct{ *pulumi.OutputState }

func (DataLakeGen2FilesystemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataLakeGen2Filesystem)(nil)).Elem()
}

func (o DataLakeGen2FilesystemArrayOutput) ToDataLakeGen2FilesystemArrayOutput() DataLakeGen2FilesystemArrayOutput {
	return o
}

func (o DataLakeGen2FilesystemArrayOutput) ToDataLakeGen2FilesystemArrayOutputWithContext(ctx context.Context) DataLakeGen2FilesystemArrayOutput {
	return o
}

func (o DataLakeGen2FilesystemArrayOutput) Index(i pulumi.IntInput) DataLakeGen2FilesystemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataLakeGen2Filesystem {
		return vs[0].([]*DataLakeGen2Filesystem)[vs[1].(int)]
	}).(DataLakeGen2FilesystemOutput)
}

type DataLakeGen2FilesystemMapOutput struct{ *pulumi.OutputState }

func (DataLakeGen2FilesystemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataLakeGen2Filesystem)(nil)).Elem()
}

func (o DataLakeGen2FilesystemMapOutput) ToDataLakeGen2FilesystemMapOutput() DataLakeGen2FilesystemMapOutput {
	return o
}

func (o DataLakeGen2FilesystemMapOutput) ToDataLakeGen2FilesystemMapOutputWithContext(ctx context.Context) DataLakeGen2FilesystemMapOutput {
	return o
}

func (o DataLakeGen2FilesystemMapOutput) MapIndex(k pulumi.StringInput) DataLakeGen2FilesystemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataLakeGen2Filesystem {
		return vs[0].(map[string]*DataLakeGen2Filesystem)[vs[1].(string)]
	}).(DataLakeGen2FilesystemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataLakeGen2FilesystemInput)(nil)).Elem(), &DataLakeGen2Filesystem{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataLakeGen2FilesystemArrayInput)(nil)).Elem(), DataLakeGen2FilesystemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataLakeGen2FilesystemMapInput)(nil)).Elem(), DataLakeGen2FilesystemMap{})
	pulumi.RegisterOutputType(DataLakeGen2FilesystemOutput{})
	pulumi.RegisterOutputType(DataLakeGen2FilesystemArrayOutput{})
	pulumi.RegisterOutputType(DataLakeGen2FilesystemMapOutput{})
}
