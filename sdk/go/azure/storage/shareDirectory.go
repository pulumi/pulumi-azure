// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Directory within an Azure Storage File Share.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/storage_share_directory.html.markdown.
type ShareDirectory struct {
	s *pulumi.ResourceState
}

// NewShareDirectory registers a new resource with the given unique name, arguments, and options.
func NewShareDirectory(ctx *pulumi.Context,
	name string, args *ShareDirectoryArgs, opts ...pulumi.ResourceOpt) (*ShareDirectory, error) {
	if args == nil || args.ShareName == nil {
		return nil, errors.New("missing required argument 'ShareName'")
	}
	if args == nil || args.StorageAccountName == nil {
		return nil, errors.New("missing required argument 'StorageAccountName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["metadata"] = nil
		inputs["name"] = nil
		inputs["shareName"] = nil
		inputs["storageAccountName"] = nil
	} else {
		inputs["metadata"] = args.Metadata
		inputs["name"] = args.Name
		inputs["shareName"] = args.ShareName
		inputs["storageAccountName"] = args.StorageAccountName
	}
	s, err := ctx.RegisterResource("azure:storage/shareDirectory:ShareDirectory", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ShareDirectory{s: s}, nil
}

// GetShareDirectory gets an existing ShareDirectory resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetShareDirectory(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ShareDirectoryState, opts ...pulumi.ResourceOpt) (*ShareDirectory, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["metadata"] = state.Metadata
		inputs["name"] = state.Name
		inputs["shareName"] = state.ShareName
		inputs["storageAccountName"] = state.StorageAccountName
	}
	s, err := ctx.ReadResource("azure:storage/shareDirectory:ShareDirectory", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ShareDirectory{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ShareDirectory) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ShareDirectory) ID() pulumi.IDOutput {
	return r.s.ID()
}

// A mapping of metadata to assign to this Directory.
func (r *ShareDirectory) Metadata() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["metadata"])
}

// The name (or path) of the Directory that should be created within this File Share. Changing this forces a new resource to be created.
func (r *ShareDirectory) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The name of the File Share where this Directory should be created. Changing this forces a new resource to be created.
func (r *ShareDirectory) ShareName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["shareName"])
}

// The name of the Storage Account within which the File Share is located. Changing this forces a new resource to be created.
func (r *ShareDirectory) StorageAccountName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["storageAccountName"])
}

// Input properties used for looking up and filtering ShareDirectory resources.
type ShareDirectoryState struct {
	// A mapping of metadata to assign to this Directory.
	Metadata interface{}
	// The name (or path) of the Directory that should be created within this File Share. Changing this forces a new resource to be created.
	Name interface{}
	// The name of the File Share where this Directory should be created. Changing this forces a new resource to be created.
	ShareName interface{}
	// The name of the Storage Account within which the File Share is located. Changing this forces a new resource to be created.
	StorageAccountName interface{}
}

// The set of arguments for constructing a ShareDirectory resource.
type ShareDirectoryArgs struct {
	// A mapping of metadata to assign to this Directory.
	Metadata interface{}
	// The name (or path) of the Directory that should be created within this File Share. Changing this forces a new resource to be created.
	Name interface{}
	// The name of the File Share where this Directory should be created. Changing this forces a new resource to be created.
	ShareName interface{}
	// The name of the Storage Account within which the File Share is located. Changing this forces a new resource to be created.
	StorageAccountName interface{}
}
