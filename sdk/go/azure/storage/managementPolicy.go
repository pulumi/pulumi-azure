// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages an Azure Storage Account Management Policy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/storage"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("westus"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
// 			ResourceGroupName:      exampleResourceGroup.Name,
// 			Location:               exampleResourceGroup.Location,
// 			AccountTier:            pulumi.String("Standard"),
// 			AccountReplicationType: pulumi.String("LRS"),
// 			AccountKind:            pulumi.String("BlobStorage"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = storage.NewManagementPolicy(ctx, "exampleManagementPolicy", &storage.ManagementPolicyArgs{
// 			StorageAccountId: exampleAccount.ID(),
// 			Rules: storage.ManagementPolicyRuleArray{
// 				&storage.ManagementPolicyRuleArgs{
// 					Name:    pulumi.String("rule1"),
// 					Enabled: pulumi.Bool(true),
// 					Filters: &storage.ManagementPolicyRuleFiltersArgs{
// 						PrefixMatches: pulumi.StringArray{
// 							pulumi.String("container1/prefix1"),
// 						},
// 						BlobTypes: pulumi.StringArray{
// 							pulumi.String("blockBlob"),
// 						},
// 					},
// 					Actions: &storage.ManagementPolicyRuleActionsArgs{
// 						BaseBlob: &storage.ManagementPolicyRuleActionsBaseBlobArgs{
// 							TierToCoolAfterDaysSinceModificationGreaterThan:    pulumi.Int(10),
// 							TierToArchiveAfterDaysSinceModificationGreaterThan: pulumi.Int(50),
// 							DeleteAfterDaysSinceModificationGreaterThan:        pulumi.Int(100),
// 						},
// 						Snapshot: &storage.ManagementPolicyRuleActionsSnapshotArgs{
// 							DeleteAfterDaysSinceCreationGreaterThan: pulumi.Int(30),
// 						},
// 					},
// 				},
// 				&storage.ManagementPolicyRuleArgs{
// 					Name:    pulumi.String("rule2"),
// 					Enabled: pulumi.Bool(false),
// 					Filters: &storage.ManagementPolicyRuleFiltersArgs{
// 						PrefixMatches: pulumi.StringArray{
// 							pulumi.String("container2/prefix1"),
// 							pulumi.String("container2/prefix2"),
// 						},
// 						BlobTypes: pulumi.StringArray{
// 							pulumi.String("blockBlob"),
// 						},
// 					},
// 					Actions: &storage.ManagementPolicyRuleActionsArgs{
// 						BaseBlob: &storage.ManagementPolicyRuleActionsBaseBlobArgs{
// 							TierToCoolAfterDaysSinceModificationGreaterThan:    pulumi.Int(11),
// 							TierToArchiveAfterDaysSinceModificationGreaterThan: pulumi.Int(51),
// 							DeleteAfterDaysSinceModificationGreaterThan:        pulumi.Int(101),
// 						},
// 						Snapshot: &storage.ManagementPolicyRuleActionsSnapshotArgs{
// 							DeleteAfterDaysSinceCreationGreaterThan: pulumi.Int(31),
// 						},
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Storage Account Management Policies can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:storage/managementPolicy:ManagementPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Storage/storageAccounts/myaccountname/managementPolicies/default
// ```
type ManagementPolicy struct {
	pulumi.CustomResourceState

	// A `rule` block as documented below.
	Rules ManagementPolicyRuleArrayOutput `pulumi:"rules"`
	// Specifies the id of the storage account to apply the management policy to.
	StorageAccountId pulumi.StringOutput `pulumi:"storageAccountId"`
}

// NewManagementPolicy registers a new resource with the given unique name, arguments, and options.
func NewManagementPolicy(ctx *pulumi.Context,
	name string, args *ManagementPolicyArgs, opts ...pulumi.ResourceOption) (*ManagementPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StorageAccountId == nil {
		return nil, errors.New("invalid value for required argument 'StorageAccountId'")
	}
	var resource ManagementPolicy
	err := ctx.RegisterResource("azure:storage/managementPolicy:ManagementPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagementPolicy gets an existing ManagementPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagementPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagementPolicyState, opts ...pulumi.ResourceOption) (*ManagementPolicy, error) {
	var resource ManagementPolicy
	err := ctx.ReadResource("azure:storage/managementPolicy:ManagementPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagementPolicy resources.
type managementPolicyState struct {
	// A `rule` block as documented below.
	Rules []ManagementPolicyRule `pulumi:"rules"`
	// Specifies the id of the storage account to apply the management policy to.
	StorageAccountId *string `pulumi:"storageAccountId"`
}

type ManagementPolicyState struct {
	// A `rule` block as documented below.
	Rules ManagementPolicyRuleArrayInput
	// Specifies the id of the storage account to apply the management policy to.
	StorageAccountId pulumi.StringPtrInput
}

func (ManagementPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*managementPolicyState)(nil)).Elem()
}

type managementPolicyArgs struct {
	// A `rule` block as documented below.
	Rules []ManagementPolicyRule `pulumi:"rules"`
	// Specifies the id of the storage account to apply the management policy to.
	StorageAccountId string `pulumi:"storageAccountId"`
}

// The set of arguments for constructing a ManagementPolicy resource.
type ManagementPolicyArgs struct {
	// A `rule` block as documented below.
	Rules ManagementPolicyRuleArrayInput
	// Specifies the id of the storage account to apply the management policy to.
	StorageAccountId pulumi.StringInput
}

func (ManagementPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managementPolicyArgs)(nil)).Elem()
}

type ManagementPolicyInput interface {
	pulumi.Input

	ToManagementPolicyOutput() ManagementPolicyOutput
	ToManagementPolicyOutputWithContext(ctx context.Context) ManagementPolicyOutput
}

func (*ManagementPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementPolicy)(nil))
}

func (i *ManagementPolicy) ToManagementPolicyOutput() ManagementPolicyOutput {
	return i.ToManagementPolicyOutputWithContext(context.Background())
}

func (i *ManagementPolicy) ToManagementPolicyOutputWithContext(ctx context.Context) ManagementPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementPolicyOutput)
}

func (i *ManagementPolicy) ToManagementPolicyPtrOutput() ManagementPolicyPtrOutput {
	return i.ToManagementPolicyPtrOutputWithContext(context.Background())
}

func (i *ManagementPolicy) ToManagementPolicyPtrOutputWithContext(ctx context.Context) ManagementPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementPolicyPtrOutput)
}

type ManagementPolicyPtrInput interface {
	pulumi.Input

	ToManagementPolicyPtrOutput() ManagementPolicyPtrOutput
	ToManagementPolicyPtrOutputWithContext(ctx context.Context) ManagementPolicyPtrOutput
}

type managementPolicyPtrType ManagementPolicyArgs

func (*managementPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagementPolicy)(nil))
}

func (i *managementPolicyPtrType) ToManagementPolicyPtrOutput() ManagementPolicyPtrOutput {
	return i.ToManagementPolicyPtrOutputWithContext(context.Background())
}

func (i *managementPolicyPtrType) ToManagementPolicyPtrOutputWithContext(ctx context.Context) ManagementPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementPolicyPtrOutput)
}

// ManagementPolicyArrayInput is an input type that accepts ManagementPolicyArray and ManagementPolicyArrayOutput values.
// You can construct a concrete instance of `ManagementPolicyArrayInput` via:
//
//          ManagementPolicyArray{ ManagementPolicyArgs{...} }
type ManagementPolicyArrayInput interface {
	pulumi.Input

	ToManagementPolicyArrayOutput() ManagementPolicyArrayOutput
	ToManagementPolicyArrayOutputWithContext(context.Context) ManagementPolicyArrayOutput
}

type ManagementPolicyArray []ManagementPolicyInput

func (ManagementPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*ManagementPolicy)(nil))
}

func (i ManagementPolicyArray) ToManagementPolicyArrayOutput() ManagementPolicyArrayOutput {
	return i.ToManagementPolicyArrayOutputWithContext(context.Background())
}

func (i ManagementPolicyArray) ToManagementPolicyArrayOutputWithContext(ctx context.Context) ManagementPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementPolicyArrayOutput)
}

// ManagementPolicyMapInput is an input type that accepts ManagementPolicyMap and ManagementPolicyMapOutput values.
// You can construct a concrete instance of `ManagementPolicyMapInput` via:
//
//          ManagementPolicyMap{ "key": ManagementPolicyArgs{...} }
type ManagementPolicyMapInput interface {
	pulumi.Input

	ToManagementPolicyMapOutput() ManagementPolicyMapOutput
	ToManagementPolicyMapOutputWithContext(context.Context) ManagementPolicyMapOutput
}

type ManagementPolicyMap map[string]ManagementPolicyInput

func (ManagementPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*ManagementPolicy)(nil))
}

func (i ManagementPolicyMap) ToManagementPolicyMapOutput() ManagementPolicyMapOutput {
	return i.ToManagementPolicyMapOutputWithContext(context.Background())
}

func (i ManagementPolicyMap) ToManagementPolicyMapOutputWithContext(ctx context.Context) ManagementPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementPolicyMapOutput)
}

type ManagementPolicyOutput struct {
	*pulumi.OutputState
}

func (ManagementPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementPolicy)(nil))
}

func (o ManagementPolicyOutput) ToManagementPolicyOutput() ManagementPolicyOutput {
	return o
}

func (o ManagementPolicyOutput) ToManagementPolicyOutputWithContext(ctx context.Context) ManagementPolicyOutput {
	return o
}

func (o ManagementPolicyOutput) ToManagementPolicyPtrOutput() ManagementPolicyPtrOutput {
	return o.ToManagementPolicyPtrOutputWithContext(context.Background())
}

func (o ManagementPolicyOutput) ToManagementPolicyPtrOutputWithContext(ctx context.Context) ManagementPolicyPtrOutput {
	return o.ApplyT(func(v ManagementPolicy) *ManagementPolicy {
		return &v
	}).(ManagementPolicyPtrOutput)
}

type ManagementPolicyPtrOutput struct {
	*pulumi.OutputState
}

func (ManagementPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagementPolicy)(nil))
}

func (o ManagementPolicyPtrOutput) ToManagementPolicyPtrOutput() ManagementPolicyPtrOutput {
	return o
}

func (o ManagementPolicyPtrOutput) ToManagementPolicyPtrOutputWithContext(ctx context.Context) ManagementPolicyPtrOutput {
	return o
}

type ManagementPolicyArrayOutput struct{ *pulumi.OutputState }

func (ManagementPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagementPolicy)(nil))
}

func (o ManagementPolicyArrayOutput) ToManagementPolicyArrayOutput() ManagementPolicyArrayOutput {
	return o
}

func (o ManagementPolicyArrayOutput) ToManagementPolicyArrayOutputWithContext(ctx context.Context) ManagementPolicyArrayOutput {
	return o
}

func (o ManagementPolicyArrayOutput) Index(i pulumi.IntInput) ManagementPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagementPolicy {
		return vs[0].([]ManagementPolicy)[vs[1].(int)]
	}).(ManagementPolicyOutput)
}

type ManagementPolicyMapOutput struct{ *pulumi.OutputState }

func (ManagementPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ManagementPolicy)(nil))
}

func (o ManagementPolicyMapOutput) ToManagementPolicyMapOutput() ManagementPolicyMapOutput {
	return o
}

func (o ManagementPolicyMapOutput) ToManagementPolicyMapOutputWithContext(ctx context.Context) ManagementPolicyMapOutput {
	return o
}

func (o ManagementPolicyMapOutput) MapIndex(k pulumi.StringInput) ManagementPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ManagementPolicy {
		return vs[0].(map[string]ManagementPolicy)[vs[1].(string)]
	}).(ManagementPolicyOutput)
}

func init() {
	pulumi.RegisterOutputType(ManagementPolicyOutput{})
	pulumi.RegisterOutputType(ManagementPolicyPtrOutput{})
	pulumi.RegisterOutputType(ManagementPolicyArrayOutput{})
	pulumi.RegisterOutputType(ManagementPolicyMapOutput{})
}
