// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Storage Mover.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = storage.NewMover(ctx, "exampleMover", &storage.MoverArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          pulumi.String("West Europe"),
//				Description:       pulumi.String("Example Storage Mover Description"),
//				Tags: pulumi.StringMap{
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Storage Mover can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:storage/mover:Mover example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.StorageMover/storageMovers/storageMover1
//
// ```
type Mover struct {
	pulumi.CustomResourceState

	// A description for the Storage Mover.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the Azure Region where the Storage Mover should exist. Changing this forces a new Storage Mover to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name which should be used for this Storage Mover. Changing this forces a new Storage Mover to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the name of the Resource Group where the Storage Mover should exist. Changing this forces a new Storage Mover to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Storage Mover.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewMover registers a new resource with the given unique name, arguments, and options.
func NewMover(ctx *pulumi.Context,
	name string, args *MoverArgs, opts ...pulumi.ResourceOption) (*Mover, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Mover
	err := ctx.RegisterResource("azure:storage/mover:Mover", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMover gets an existing Mover resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMover(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MoverState, opts ...pulumi.ResourceOption) (*Mover, error) {
	var resource Mover
	err := ctx.ReadResource("azure:storage/mover:Mover", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Mover resources.
type moverState struct {
	// A description for the Storage Mover.
	Description *string `pulumi:"description"`
	// Specifies the Azure Region where the Storage Mover should exist. Changing this forces a new Storage Mover to be created.
	Location *string `pulumi:"location"`
	// Specifies the name which should be used for this Storage Mover. Changing this forces a new Storage Mover to be created.
	Name *string `pulumi:"name"`
	// Specifies the name of the Resource Group where the Storage Mover should exist. Changing this forces a new Storage Mover to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Storage Mover.
	Tags map[string]string `pulumi:"tags"`
}

type MoverState struct {
	// A description for the Storage Mover.
	Description pulumi.StringPtrInput
	// Specifies the Azure Region where the Storage Mover should exist. Changing this forces a new Storage Mover to be created.
	Location pulumi.StringPtrInput
	// Specifies the name which should be used for this Storage Mover. Changing this forces a new Storage Mover to be created.
	Name pulumi.StringPtrInput
	// Specifies the name of the Resource Group where the Storage Mover should exist. Changing this forces a new Storage Mover to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Storage Mover.
	Tags pulumi.StringMapInput
}

func (MoverState) ElementType() reflect.Type {
	return reflect.TypeOf((*moverState)(nil)).Elem()
}

type moverArgs struct {
	// A description for the Storage Mover.
	Description *string `pulumi:"description"`
	// Specifies the Azure Region where the Storage Mover should exist. Changing this forces a new Storage Mover to be created.
	Location *string `pulumi:"location"`
	// Specifies the name which should be used for this Storage Mover. Changing this forces a new Storage Mover to be created.
	Name *string `pulumi:"name"`
	// Specifies the name of the Resource Group where the Storage Mover should exist. Changing this forces a new Storage Mover to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Storage Mover.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Mover resource.
type MoverArgs struct {
	// A description for the Storage Mover.
	Description pulumi.StringPtrInput
	// Specifies the Azure Region where the Storage Mover should exist. Changing this forces a new Storage Mover to be created.
	Location pulumi.StringPtrInput
	// Specifies the name which should be used for this Storage Mover. Changing this forces a new Storage Mover to be created.
	Name pulumi.StringPtrInput
	// Specifies the name of the Resource Group where the Storage Mover should exist. Changing this forces a new Storage Mover to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags which should be assigned to the Storage Mover.
	Tags pulumi.StringMapInput
}

func (MoverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*moverArgs)(nil)).Elem()
}

type MoverInput interface {
	pulumi.Input

	ToMoverOutput() MoverOutput
	ToMoverOutputWithContext(ctx context.Context) MoverOutput
}

func (*Mover) ElementType() reflect.Type {
	return reflect.TypeOf((**Mover)(nil)).Elem()
}

func (i *Mover) ToMoverOutput() MoverOutput {
	return i.ToMoverOutputWithContext(context.Background())
}

func (i *Mover) ToMoverOutputWithContext(ctx context.Context) MoverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MoverOutput)
}

// MoverArrayInput is an input type that accepts MoverArray and MoverArrayOutput values.
// You can construct a concrete instance of `MoverArrayInput` via:
//
//	MoverArray{ MoverArgs{...} }
type MoverArrayInput interface {
	pulumi.Input

	ToMoverArrayOutput() MoverArrayOutput
	ToMoverArrayOutputWithContext(context.Context) MoverArrayOutput
}

type MoverArray []MoverInput

func (MoverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Mover)(nil)).Elem()
}

func (i MoverArray) ToMoverArrayOutput() MoverArrayOutput {
	return i.ToMoverArrayOutputWithContext(context.Background())
}

func (i MoverArray) ToMoverArrayOutputWithContext(ctx context.Context) MoverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MoverArrayOutput)
}

// MoverMapInput is an input type that accepts MoverMap and MoverMapOutput values.
// You can construct a concrete instance of `MoverMapInput` via:
//
//	MoverMap{ "key": MoverArgs{...} }
type MoverMapInput interface {
	pulumi.Input

	ToMoverMapOutput() MoverMapOutput
	ToMoverMapOutputWithContext(context.Context) MoverMapOutput
}

type MoverMap map[string]MoverInput

func (MoverMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Mover)(nil)).Elem()
}

func (i MoverMap) ToMoverMapOutput() MoverMapOutput {
	return i.ToMoverMapOutputWithContext(context.Background())
}

func (i MoverMap) ToMoverMapOutputWithContext(ctx context.Context) MoverMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MoverMapOutput)
}

type MoverOutput struct{ *pulumi.OutputState }

func (MoverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Mover)(nil)).Elem()
}

func (o MoverOutput) ToMoverOutput() MoverOutput {
	return o
}

func (o MoverOutput) ToMoverOutputWithContext(ctx context.Context) MoverOutput {
	return o
}

// A description for the Storage Mover.
func (o MoverOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Mover) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the Azure Region where the Storage Mover should exist. Changing this forces a new Storage Mover to be created.
func (o MoverOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Mover) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name which should be used for this Storage Mover. Changing this forces a new Storage Mover to be created.
func (o MoverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Mover) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the name of the Resource Group where the Storage Mover should exist. Changing this forces a new Storage Mover to be created.
func (o MoverOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Mover) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the Storage Mover.
func (o MoverOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Mover) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type MoverArrayOutput struct{ *pulumi.OutputState }

func (MoverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Mover)(nil)).Elem()
}

func (o MoverArrayOutput) ToMoverArrayOutput() MoverArrayOutput {
	return o
}

func (o MoverArrayOutput) ToMoverArrayOutputWithContext(ctx context.Context) MoverArrayOutput {
	return o
}

func (o MoverArrayOutput) Index(i pulumi.IntInput) MoverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Mover {
		return vs[0].([]*Mover)[vs[1].(int)]
	}).(MoverOutput)
}

type MoverMapOutput struct{ *pulumi.OutputState }

func (MoverMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Mover)(nil)).Elem()
}

func (o MoverMapOutput) ToMoverMapOutput() MoverMapOutput {
	return o
}

func (o MoverMapOutput) ToMoverMapOutputWithContext(ctx context.Context) MoverMapOutput {
	return o
}

func (o MoverMapOutput) MapIndex(k pulumi.StringInput) MoverOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Mover {
		return vs[0].(map[string]*Mover)[vs[1].(string)]
	}).(MoverOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MoverInput)(nil)).Elem(), &Mover{})
	pulumi.RegisterInputType(reflect.TypeOf((*MoverArrayInput)(nil)).Elem(), MoverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MoverMapInput)(nil)).Elem(), MoverMap{})
	pulumi.RegisterOutputType(MoverOutput{})
	pulumi.RegisterOutputType(MoverArrayOutput{})
	pulumi.RegisterOutputType(MoverMapOutput{})
}
