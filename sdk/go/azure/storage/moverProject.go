// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Storage Mover Project.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleMover, err := storage.NewMover(ctx, "exampleMover", &storage.MoverArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = storage.NewMoverProject(ctx, "exampleMoverProject", &storage.MoverProjectArgs{
//				StorageMoverId: exampleMover.ID(),
//				Description:    pulumi.String("Example Project Description"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Storage Mover Project can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:storage/moverProject:MoverProject example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.StorageMover/storageMovers/storageMover1/projects/project1
//
// ```
type MoverProject struct {
	pulumi.CustomResourceState

	// Specifies a description for this Storage Mover Project.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the name which should be used for this Storage Mover Project. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the ID of the storage mover for this Storage Mover Project. Changing this forces a new resource to be created.
	StorageMoverId pulumi.StringOutput `pulumi:"storageMoverId"`
}

// NewMoverProject registers a new resource with the given unique name, arguments, and options.
func NewMoverProject(ctx *pulumi.Context,
	name string, args *MoverProjectArgs, opts ...pulumi.ResourceOption) (*MoverProject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StorageMoverId == nil {
		return nil, errors.New("invalid value for required argument 'StorageMoverId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MoverProject
	err := ctx.RegisterResource("azure:storage/moverProject:MoverProject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMoverProject gets an existing MoverProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMoverProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MoverProjectState, opts ...pulumi.ResourceOption) (*MoverProject, error) {
	var resource MoverProject
	err := ctx.ReadResource("azure:storage/moverProject:MoverProject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MoverProject resources.
type moverProjectState struct {
	// Specifies a description for this Storage Mover Project.
	Description *string `pulumi:"description"`
	// Specifies the name which should be used for this Storage Mover Project. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies the ID of the storage mover for this Storage Mover Project. Changing this forces a new resource to be created.
	StorageMoverId *string `pulumi:"storageMoverId"`
}

type MoverProjectState struct {
	// Specifies a description for this Storage Mover Project.
	Description pulumi.StringPtrInput
	// Specifies the name which should be used for this Storage Mover Project. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies the ID of the storage mover for this Storage Mover Project. Changing this forces a new resource to be created.
	StorageMoverId pulumi.StringPtrInput
}

func (MoverProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*moverProjectState)(nil)).Elem()
}

type moverProjectArgs struct {
	// Specifies a description for this Storage Mover Project.
	Description *string `pulumi:"description"`
	// Specifies the name which should be used for this Storage Mover Project. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies the ID of the storage mover for this Storage Mover Project. Changing this forces a new resource to be created.
	StorageMoverId string `pulumi:"storageMoverId"`
}

// The set of arguments for constructing a MoverProject resource.
type MoverProjectArgs struct {
	// Specifies a description for this Storage Mover Project.
	Description pulumi.StringPtrInput
	// Specifies the name which should be used for this Storage Mover Project. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies the ID of the storage mover for this Storage Mover Project. Changing this forces a new resource to be created.
	StorageMoverId pulumi.StringInput
}

func (MoverProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*moverProjectArgs)(nil)).Elem()
}

type MoverProjectInput interface {
	pulumi.Input

	ToMoverProjectOutput() MoverProjectOutput
	ToMoverProjectOutputWithContext(ctx context.Context) MoverProjectOutput
}

func (*MoverProject) ElementType() reflect.Type {
	return reflect.TypeOf((**MoverProject)(nil)).Elem()
}

func (i *MoverProject) ToMoverProjectOutput() MoverProjectOutput {
	return i.ToMoverProjectOutputWithContext(context.Background())
}

func (i *MoverProject) ToMoverProjectOutputWithContext(ctx context.Context) MoverProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MoverProjectOutput)
}

// MoverProjectArrayInput is an input type that accepts MoverProjectArray and MoverProjectArrayOutput values.
// You can construct a concrete instance of `MoverProjectArrayInput` via:
//
//	MoverProjectArray{ MoverProjectArgs{...} }
type MoverProjectArrayInput interface {
	pulumi.Input

	ToMoverProjectArrayOutput() MoverProjectArrayOutput
	ToMoverProjectArrayOutputWithContext(context.Context) MoverProjectArrayOutput
}

type MoverProjectArray []MoverProjectInput

func (MoverProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MoverProject)(nil)).Elem()
}

func (i MoverProjectArray) ToMoverProjectArrayOutput() MoverProjectArrayOutput {
	return i.ToMoverProjectArrayOutputWithContext(context.Background())
}

func (i MoverProjectArray) ToMoverProjectArrayOutputWithContext(ctx context.Context) MoverProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MoverProjectArrayOutput)
}

// MoverProjectMapInput is an input type that accepts MoverProjectMap and MoverProjectMapOutput values.
// You can construct a concrete instance of `MoverProjectMapInput` via:
//
//	MoverProjectMap{ "key": MoverProjectArgs{...} }
type MoverProjectMapInput interface {
	pulumi.Input

	ToMoverProjectMapOutput() MoverProjectMapOutput
	ToMoverProjectMapOutputWithContext(context.Context) MoverProjectMapOutput
}

type MoverProjectMap map[string]MoverProjectInput

func (MoverProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MoverProject)(nil)).Elem()
}

func (i MoverProjectMap) ToMoverProjectMapOutput() MoverProjectMapOutput {
	return i.ToMoverProjectMapOutputWithContext(context.Background())
}

func (i MoverProjectMap) ToMoverProjectMapOutputWithContext(ctx context.Context) MoverProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MoverProjectMapOutput)
}

type MoverProjectOutput struct{ *pulumi.OutputState }

func (MoverProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MoverProject)(nil)).Elem()
}

func (o MoverProjectOutput) ToMoverProjectOutput() MoverProjectOutput {
	return o
}

func (o MoverProjectOutput) ToMoverProjectOutputWithContext(ctx context.Context) MoverProjectOutput {
	return o
}

// Specifies a description for this Storage Mover Project.
func (o MoverProjectOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MoverProject) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the name which should be used for this Storage Mover Project. Changing this forces a new resource to be created.
func (o MoverProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MoverProject) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the ID of the storage mover for this Storage Mover Project. Changing this forces a new resource to be created.
func (o MoverProjectOutput) StorageMoverId() pulumi.StringOutput {
	return o.ApplyT(func(v *MoverProject) pulumi.StringOutput { return v.StorageMoverId }).(pulumi.StringOutput)
}

type MoverProjectArrayOutput struct{ *pulumi.OutputState }

func (MoverProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MoverProject)(nil)).Elem()
}

func (o MoverProjectArrayOutput) ToMoverProjectArrayOutput() MoverProjectArrayOutput {
	return o
}

func (o MoverProjectArrayOutput) ToMoverProjectArrayOutputWithContext(ctx context.Context) MoverProjectArrayOutput {
	return o
}

func (o MoverProjectArrayOutput) Index(i pulumi.IntInput) MoverProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MoverProject {
		return vs[0].([]*MoverProject)[vs[1].(int)]
	}).(MoverProjectOutput)
}

type MoverProjectMapOutput struct{ *pulumi.OutputState }

func (MoverProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MoverProject)(nil)).Elem()
}

func (o MoverProjectMapOutput) ToMoverProjectMapOutput() MoverProjectMapOutput {
	return o
}

func (o MoverProjectMapOutput) ToMoverProjectMapOutputWithContext(ctx context.Context) MoverProjectMapOutput {
	return o
}

func (o MoverProjectMapOutput) MapIndex(k pulumi.StringInput) MoverProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MoverProject {
		return vs[0].(map[string]*MoverProject)[vs[1].(string)]
	}).(MoverProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MoverProjectInput)(nil)).Elem(), &MoverProject{})
	pulumi.RegisterInputType(reflect.TypeOf((*MoverProjectArrayInput)(nil)).Elem(), MoverProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MoverProjectMapInput)(nil)).Elem(), MoverProjectMap{})
	pulumi.RegisterOutputType(MoverProjectOutput{})
	pulumi.RegisterOutputType(MoverProjectArrayOutput{})
	pulumi.RegisterOutputType(MoverProjectMapOutput{})
}
