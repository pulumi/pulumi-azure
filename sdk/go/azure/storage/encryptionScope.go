// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a Storage Encryption Scope.
//
// > **Note:** Storage Encryption Scopes are in Preview [more information can be found here](https://docs.microsoft.com/en-us/azure/storage/blobs/encryption-scope-manage).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/storage"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West Europe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
// 			ResourceGroupName:      exampleResourceGroup.Name,
// 			Location:               exampleResourceGroup.Location,
// 			AccountTier:            pulumi.String("Standard"),
// 			AccountReplicationType: pulumi.String("LRS"),
// 			Identity: &storage.AccountIdentityArgs{
// 				Type: pulumi.String("SystemAssigned"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = storage.NewEncryptionScope(ctx, "exampleEncryptionScope", &storage.EncryptionScopeArgs{
// 			StorageAccountId: exampleAccount.ID(),
// 			Source:           pulumi.String("Microsoft.Storage"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Storage Encryption Scopes can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:storage/encryptionScope:EncryptionScope example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Storage/storageAccounts/account1/encryptionScopes/scope1
// ```
type EncryptionScope struct {
	pulumi.CustomResourceState

	// The ID of the Key Vault Key. Required when `source` is `Microsoft.KeyVault`.
	KeyVaultKeyId pulumi.StringPtrOutput `pulumi:"keyVaultKeyId"`
	// The name which should be used for this Storage Encryption Scope. Changing this forces a new Storage Encryption Scope to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The source of the Storage Encryption Scope. Possible values are `Microsoft.KeyVault` and `Microsoft.Storage`.
	Source pulumi.StringOutput `pulumi:"source"`
	// The ID of the Storage Account where this Storage Encryption Scope is created. Changing this forces a new Storage Encryption Scope to be created.
	StorageAccountId pulumi.StringOutput `pulumi:"storageAccountId"`
}

// NewEncryptionScope registers a new resource with the given unique name, arguments, and options.
func NewEncryptionScope(ctx *pulumi.Context,
	name string, args *EncryptionScopeArgs, opts ...pulumi.ResourceOption) (*EncryptionScope, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	if args.StorageAccountId == nil {
		return nil, errors.New("invalid value for required argument 'StorageAccountId'")
	}
	var resource EncryptionScope
	err := ctx.RegisterResource("azure:storage/encryptionScope:EncryptionScope", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEncryptionScope gets an existing EncryptionScope resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEncryptionScope(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EncryptionScopeState, opts ...pulumi.ResourceOption) (*EncryptionScope, error) {
	var resource EncryptionScope
	err := ctx.ReadResource("azure:storage/encryptionScope:EncryptionScope", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EncryptionScope resources.
type encryptionScopeState struct {
	// The ID of the Key Vault Key. Required when `source` is `Microsoft.KeyVault`.
	KeyVaultKeyId *string `pulumi:"keyVaultKeyId"`
	// The name which should be used for this Storage Encryption Scope. Changing this forces a new Storage Encryption Scope to be created.
	Name *string `pulumi:"name"`
	// The source of the Storage Encryption Scope. Possible values are `Microsoft.KeyVault` and `Microsoft.Storage`.
	Source *string `pulumi:"source"`
	// The ID of the Storage Account where this Storage Encryption Scope is created. Changing this forces a new Storage Encryption Scope to be created.
	StorageAccountId *string `pulumi:"storageAccountId"`
}

type EncryptionScopeState struct {
	// The ID of the Key Vault Key. Required when `source` is `Microsoft.KeyVault`.
	KeyVaultKeyId pulumi.StringPtrInput
	// The name which should be used for this Storage Encryption Scope. Changing this forces a new Storage Encryption Scope to be created.
	Name pulumi.StringPtrInput
	// The source of the Storage Encryption Scope. Possible values are `Microsoft.KeyVault` and `Microsoft.Storage`.
	Source pulumi.StringPtrInput
	// The ID of the Storage Account where this Storage Encryption Scope is created. Changing this forces a new Storage Encryption Scope to be created.
	StorageAccountId pulumi.StringPtrInput
}

func (EncryptionScopeState) ElementType() reflect.Type {
	return reflect.TypeOf((*encryptionScopeState)(nil)).Elem()
}

type encryptionScopeArgs struct {
	// The ID of the Key Vault Key. Required when `source` is `Microsoft.KeyVault`.
	KeyVaultKeyId *string `pulumi:"keyVaultKeyId"`
	// The name which should be used for this Storage Encryption Scope. Changing this forces a new Storage Encryption Scope to be created.
	Name *string `pulumi:"name"`
	// The source of the Storage Encryption Scope. Possible values are `Microsoft.KeyVault` and `Microsoft.Storage`.
	Source string `pulumi:"source"`
	// The ID of the Storage Account where this Storage Encryption Scope is created. Changing this forces a new Storage Encryption Scope to be created.
	StorageAccountId string `pulumi:"storageAccountId"`
}

// The set of arguments for constructing a EncryptionScope resource.
type EncryptionScopeArgs struct {
	// The ID of the Key Vault Key. Required when `source` is `Microsoft.KeyVault`.
	KeyVaultKeyId pulumi.StringPtrInput
	// The name which should be used for this Storage Encryption Scope. Changing this forces a new Storage Encryption Scope to be created.
	Name pulumi.StringPtrInput
	// The source of the Storage Encryption Scope. Possible values are `Microsoft.KeyVault` and `Microsoft.Storage`.
	Source pulumi.StringInput
	// The ID of the Storage Account where this Storage Encryption Scope is created. Changing this forces a new Storage Encryption Scope to be created.
	StorageAccountId pulumi.StringInput
}

func (EncryptionScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*encryptionScopeArgs)(nil)).Elem()
}

type EncryptionScopeInput interface {
	pulumi.Input

	ToEncryptionScopeOutput() EncryptionScopeOutput
	ToEncryptionScopeOutputWithContext(ctx context.Context) EncryptionScopeOutput
}

func (*EncryptionScope) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionScope)(nil))
}

func (i *EncryptionScope) ToEncryptionScopeOutput() EncryptionScopeOutput {
	return i.ToEncryptionScopeOutputWithContext(context.Background())
}

func (i *EncryptionScope) ToEncryptionScopeOutputWithContext(ctx context.Context) EncryptionScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionScopeOutput)
}

func (i *EncryptionScope) ToEncryptionScopePtrOutput() EncryptionScopePtrOutput {
	return i.ToEncryptionScopePtrOutputWithContext(context.Background())
}

func (i *EncryptionScope) ToEncryptionScopePtrOutputWithContext(ctx context.Context) EncryptionScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionScopePtrOutput)
}

type EncryptionScopePtrInput interface {
	pulumi.Input

	ToEncryptionScopePtrOutput() EncryptionScopePtrOutput
	ToEncryptionScopePtrOutputWithContext(ctx context.Context) EncryptionScopePtrOutput
}

type encryptionScopePtrType EncryptionScopeArgs

func (*encryptionScopePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionScope)(nil))
}

func (i *encryptionScopePtrType) ToEncryptionScopePtrOutput() EncryptionScopePtrOutput {
	return i.ToEncryptionScopePtrOutputWithContext(context.Background())
}

func (i *encryptionScopePtrType) ToEncryptionScopePtrOutputWithContext(ctx context.Context) EncryptionScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionScopePtrOutput)
}

// EncryptionScopeArrayInput is an input type that accepts EncryptionScopeArray and EncryptionScopeArrayOutput values.
// You can construct a concrete instance of `EncryptionScopeArrayInput` via:
//
//          EncryptionScopeArray{ EncryptionScopeArgs{...} }
type EncryptionScopeArrayInput interface {
	pulumi.Input

	ToEncryptionScopeArrayOutput() EncryptionScopeArrayOutput
	ToEncryptionScopeArrayOutputWithContext(context.Context) EncryptionScopeArrayOutput
}

type EncryptionScopeArray []EncryptionScopeInput

func (EncryptionScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*EncryptionScope)(nil))
}

func (i EncryptionScopeArray) ToEncryptionScopeArrayOutput() EncryptionScopeArrayOutput {
	return i.ToEncryptionScopeArrayOutputWithContext(context.Background())
}

func (i EncryptionScopeArray) ToEncryptionScopeArrayOutputWithContext(ctx context.Context) EncryptionScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionScopeArrayOutput)
}

// EncryptionScopeMapInput is an input type that accepts EncryptionScopeMap and EncryptionScopeMapOutput values.
// You can construct a concrete instance of `EncryptionScopeMapInput` via:
//
//          EncryptionScopeMap{ "key": EncryptionScopeArgs{...} }
type EncryptionScopeMapInput interface {
	pulumi.Input

	ToEncryptionScopeMapOutput() EncryptionScopeMapOutput
	ToEncryptionScopeMapOutputWithContext(context.Context) EncryptionScopeMapOutput
}

type EncryptionScopeMap map[string]EncryptionScopeInput

func (EncryptionScopeMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*EncryptionScope)(nil))
}

func (i EncryptionScopeMap) ToEncryptionScopeMapOutput() EncryptionScopeMapOutput {
	return i.ToEncryptionScopeMapOutputWithContext(context.Background())
}

func (i EncryptionScopeMap) ToEncryptionScopeMapOutputWithContext(ctx context.Context) EncryptionScopeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionScopeMapOutput)
}

type EncryptionScopeOutput struct {
	*pulumi.OutputState
}

func (EncryptionScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionScope)(nil))
}

func (o EncryptionScopeOutput) ToEncryptionScopeOutput() EncryptionScopeOutput {
	return o
}

func (o EncryptionScopeOutput) ToEncryptionScopeOutputWithContext(ctx context.Context) EncryptionScopeOutput {
	return o
}

func (o EncryptionScopeOutput) ToEncryptionScopePtrOutput() EncryptionScopePtrOutput {
	return o.ToEncryptionScopePtrOutputWithContext(context.Background())
}

func (o EncryptionScopeOutput) ToEncryptionScopePtrOutputWithContext(ctx context.Context) EncryptionScopePtrOutput {
	return o.ApplyT(func(v EncryptionScope) *EncryptionScope {
		return &v
	}).(EncryptionScopePtrOutput)
}

type EncryptionScopePtrOutput struct {
	*pulumi.OutputState
}

func (EncryptionScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionScope)(nil))
}

func (o EncryptionScopePtrOutput) ToEncryptionScopePtrOutput() EncryptionScopePtrOutput {
	return o
}

func (o EncryptionScopePtrOutput) ToEncryptionScopePtrOutputWithContext(ctx context.Context) EncryptionScopePtrOutput {
	return o
}

type EncryptionScopeArrayOutput struct{ *pulumi.OutputState }

func (EncryptionScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EncryptionScope)(nil))
}

func (o EncryptionScopeArrayOutput) ToEncryptionScopeArrayOutput() EncryptionScopeArrayOutput {
	return o
}

func (o EncryptionScopeArrayOutput) ToEncryptionScopeArrayOutputWithContext(ctx context.Context) EncryptionScopeArrayOutput {
	return o
}

func (o EncryptionScopeArrayOutput) Index(i pulumi.IntInput) EncryptionScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EncryptionScope {
		return vs[0].([]EncryptionScope)[vs[1].(int)]
	}).(EncryptionScopeOutput)
}

type EncryptionScopeMapOutput struct{ *pulumi.OutputState }

func (EncryptionScopeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]EncryptionScope)(nil))
}

func (o EncryptionScopeMapOutput) ToEncryptionScopeMapOutput() EncryptionScopeMapOutput {
	return o
}

func (o EncryptionScopeMapOutput) ToEncryptionScopeMapOutputWithContext(ctx context.Context) EncryptionScopeMapOutput {
	return o
}

func (o EncryptionScopeMapOutput) MapIndex(k pulumi.StringInput) EncryptionScopeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) EncryptionScope {
		return vs[0].(map[string]EncryptionScope)[vs[1].(string)]
	}).(EncryptionScopeOutput)
}

func init() {
	pulumi.RegisterOutputType(EncryptionScopeOutput{})
	pulumi.RegisterOutputType(EncryptionScopePtrOutput{})
	pulumi.RegisterOutputType(EncryptionScopeArrayOutput{})
	pulumi.RegisterOutputType(EncryptionScopeMapOutput{})
}
