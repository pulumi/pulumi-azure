// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"context"
	"errors"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Storage Table.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := storage.LookupTable(ctx, &storage.LookupTableArgs{
//				Name:               "example-table-name",
//				StorageAccountName: "example-storage-account-name",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupTable(ctx *pulumi.Context, args *LookupTableArgs, opts ...pulumi.InvokeOption) (*LookupTableResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	invokeOpts, optsErr := pulumi.NewInvokeOptions(opts...)
	if optsErr != nil {
		return &LookupTableResult{}, optsErr
	}
	if len(invokeOpts.DependsOn) > 0 {
		return &LookupTableResult{}, errors.New("DependsOn is not supported for direct form invoke LookupTable, use LookupTableOutput instead")
	}
	if len(invokeOpts.DependsOnInputs) > 0 {
		return &LookupTableResult{}, errors.New("DependsOnInputs is not supported for direct form invoke LookupTable, use LookupTableOutput instead")
	}
	var rv LookupTableResult
	err := ctx.Invoke("azure:storage/getTable:getTable", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTable.
type LookupTableArgs struct {
	// The name of the Table.
	Name string `pulumi:"name"`
	// The name of the Storage Account where the Table exists.
	StorageAccountName string `pulumi:"storageAccountName"`
}

// A collection of values returned by getTable.
type LookupTableResult struct {
	// A mapping of ACLs for this Table.
	Acls []GetTableAcl `pulumi:"acls"`
	// The ID of the Storage Table.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// The Resource Manager ID of this Storage Table.
	ResourceManagerId  string `pulumi:"resourceManagerId"`
	StorageAccountName string `pulumi:"storageAccountName"`
}

func LookupTableOutput(ctx *pulumi.Context, args LookupTableOutputArgs, opts ...pulumi.InvokeOption) LookupTableResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupTableResultOutput, error) {
			args := v.(LookupTableArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupTableResult
			secret, deps, err := ctx.InvokePackageRawWithDeps("azure:storage/getTable:getTable", args, &rv, "", opts...)
			if err != nil {
				return LookupTableResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupTableResultOutput)
			output = pulumi.OutputWithDependencies(ctx.Context(), output, deps...).(LookupTableResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupTableResultOutput), nil
			}
			return output, nil
		}).(LookupTableResultOutput)
}

// A collection of arguments for invoking getTable.
type LookupTableOutputArgs struct {
	// The name of the Table.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Storage Account where the Table exists.
	StorageAccountName pulumi.StringInput `pulumi:"storageAccountName"`
}

func (LookupTableOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTableArgs)(nil)).Elem()
}

// A collection of values returned by getTable.
type LookupTableResultOutput struct{ *pulumi.OutputState }

func (LookupTableResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTableResult)(nil)).Elem()
}

func (o LookupTableResultOutput) ToLookupTableResultOutput() LookupTableResultOutput {
	return o
}

func (o LookupTableResultOutput) ToLookupTableResultOutputWithContext(ctx context.Context) LookupTableResultOutput {
	return o
}

// A mapping of ACLs for this Table.
func (o LookupTableResultOutput) Acls() GetTableAclArrayOutput {
	return o.ApplyT(func(v LookupTableResult) []GetTableAcl { return v.Acls }).(GetTableAclArrayOutput)
}

// The ID of the Storage Table.
func (o LookupTableResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTableResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupTableResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTableResult) string { return v.Name }).(pulumi.StringOutput)
}

// The Resource Manager ID of this Storage Table.
func (o LookupTableResultOutput) ResourceManagerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTableResult) string { return v.ResourceManagerId }).(pulumi.StringOutput)
}

func (o LookupTableResultOutput) StorageAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTableResult) string { return v.StorageAccountName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTableResultOutput{})
}
