// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Storage Sync Server Endpoint.
//
// > **Note:** The parent `storage.SyncGroup` must have an `storage.SyncCloudEndpoint` available before an `storage.SyncServerEndpoint` resource can be created.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resources"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleSync, err := storage.NewSync(ctx, "example", &storage.SyncArgs{
//				Name:              pulumi.String("example-storage-sync"),
//				ResourceGroupName: example.Name,
//				Location:          example.Location,
//			})
//			if err != nil {
//				return err
//			}
//			exampleSyncGroup, err := storage.NewSyncGroup(ctx, "example", &storage.SyncGroupArgs{
//				Name:          pulumi.String("example-storage-sync-group"),
//				StorageSyncId: exampleSync.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "example", &storage.AccountArgs{
//				Name:                   pulumi.String("example-storage-account"),
//				ResourceGroupName:      example.Name,
//				Location:               example.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("LRS"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleShare, err := storage.NewShare(ctx, "example", &storage.ShareArgs{
//				Name:               pulumi.String("example-storage-share"),
//				StorageAccountName: exampleAccount.Name,
//				Quota:              pulumi.Int(1),
//				Acls: storage.ShareAclArray{
//					&storage.ShareAclArgs{
//						Id: pulumi.String("GhostedRecall"),
//						AccessPolicies: storage.ShareAclAccessPolicyArray{
//							&storage.ShareAclAccessPolicyArgs{
//								Permissions: pulumi.String("r"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleSyncCloudEndpoint, err := storage.NewSyncCloudEndpoint(ctx, "example", &storage.SyncCloudEndpointArgs{
//				Name:               pulumi.String("example-ss-ce"),
//				StorageSyncGroupId: exampleSyncGroup.ID(),
//				FileShareName:      exampleShare.Name,
//				StorageAccountId:   exampleAccount.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = storage.NewSyncServerEndpoint(ctx, "example", &storage.SyncServerEndpointArgs{
//				Name:               pulumi.String("example-storage-sync-server-endpoint"),
//				StorageSyncGroupId: exampleSyncGroup.ID(),
//				RegisteredServerId: exampleSync.RegisteredServers.ApplyT(func(registeredServers []string) (string, error) {
//					return registeredServers[0], nil
//				}).(pulumi.StringOutput),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				exampleSyncCloudEndpoint,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This resource uses the following Azure API Providers:
//
// * `Microsoft.StorageSync`: 2020-03-01
//
// ## Import
//
// Storage Sync Server Endpoints can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:storage/syncServerEndpoint:SyncServerEndpoint example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.StorageSync/storageSyncServices/sync1/syncGroups/syncGroup1/serverEndpoints/endpoint1
// ```
type SyncServerEndpoint struct {
	pulumi.CustomResourceState

	// Is Cloud Tiering Enabled? Defaults to `false`.
	CloudTieringEnabled pulumi.BoolPtrOutput `pulumi:"cloudTieringEnabled"`
	// Specifies how the server initially downloads the Azure file share data. Valid Values includes `NamespaceThenModifiedFiles`, `NamespaceOnly`, and `AvoidTieredFiles`. Defaults to `NamespaceThenModifiedFiles`.
	InitialDownloadPolicy pulumi.StringPtrOutput `pulumi:"initialDownloadPolicy"`
	// Specifies how to handle the local cache. Valid Values include `UpdateLocallyCachedFiles` and `DownloadNewAndModifiedFiles`. Defaults to `UpdateLocallyCachedFiles`.
	LocalCacheMode pulumi.StringPtrOutput `pulumi:"localCacheMode"`
	// The name which should be used for this Storage Sync. Changing this forces a new Storage Sync Server Endpoint to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Registered Server that will be associate with the Storage Sync Server Endpoint. Changing this forces a new Storage Sync Server Endpoint to be created.
	//
	// > **Note:** The target server must already be registered with the parent `storage.Sync` prior to creating this endpoint. For more information on registering a server see the [Microsoft documentation](https://learn.microsoft.com/azure/storage/file-sync/file-sync-server-registration)
	RegisteredServerId pulumi.StringOutput `pulumi:"registeredServerId"`
	// The path on the Windows Server to be synced to the Azure file share. Changing this forces a new Storage Sync Server Endpoint to be created.
	ServerLocalPath pulumi.StringOutput `pulumi:"serverLocalPath"`
	// The ID of the Storage Sync Group where the Storage Sync Server Endpoint should exist. Changing this forces a new Storage Sync Server Endpoint to be created.
	StorageSyncGroupId pulumi.StringOutput `pulumi:"storageSyncGroupId"`
	// Files older than the specified age will be tiered to the cloud.
	TierFilesOlderThanDays pulumi.IntPtrOutput `pulumi:"tierFilesOlderThanDays"`
	// What percentage of free space on the volume should be preserved? Defaults to `20`.
	VolumeFreeSpacePercent pulumi.IntPtrOutput `pulumi:"volumeFreeSpacePercent"`
}

// NewSyncServerEndpoint registers a new resource with the given unique name, arguments, and options.
func NewSyncServerEndpoint(ctx *pulumi.Context,
	name string, args *SyncServerEndpointArgs, opts ...pulumi.ResourceOption) (*SyncServerEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RegisteredServerId == nil {
		return nil, errors.New("invalid value for required argument 'RegisteredServerId'")
	}
	if args.ServerLocalPath == nil {
		return nil, errors.New("invalid value for required argument 'ServerLocalPath'")
	}
	if args.StorageSyncGroupId == nil {
		return nil, errors.New("invalid value for required argument 'StorageSyncGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SyncServerEndpoint
	err := ctx.RegisterResource("azure:storage/syncServerEndpoint:SyncServerEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSyncServerEndpoint gets an existing SyncServerEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSyncServerEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SyncServerEndpointState, opts ...pulumi.ResourceOption) (*SyncServerEndpoint, error) {
	var resource SyncServerEndpoint
	err := ctx.ReadResource("azure:storage/syncServerEndpoint:SyncServerEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SyncServerEndpoint resources.
type syncServerEndpointState struct {
	// Is Cloud Tiering Enabled? Defaults to `false`.
	CloudTieringEnabled *bool `pulumi:"cloudTieringEnabled"`
	// Specifies how the server initially downloads the Azure file share data. Valid Values includes `NamespaceThenModifiedFiles`, `NamespaceOnly`, and `AvoidTieredFiles`. Defaults to `NamespaceThenModifiedFiles`.
	InitialDownloadPolicy *string `pulumi:"initialDownloadPolicy"`
	// Specifies how to handle the local cache. Valid Values include `UpdateLocallyCachedFiles` and `DownloadNewAndModifiedFiles`. Defaults to `UpdateLocallyCachedFiles`.
	LocalCacheMode *string `pulumi:"localCacheMode"`
	// The name which should be used for this Storage Sync. Changing this forces a new Storage Sync Server Endpoint to be created.
	Name *string `pulumi:"name"`
	// The ID of the Registered Server that will be associate with the Storage Sync Server Endpoint. Changing this forces a new Storage Sync Server Endpoint to be created.
	//
	// > **Note:** The target server must already be registered with the parent `storage.Sync` prior to creating this endpoint. For more information on registering a server see the [Microsoft documentation](https://learn.microsoft.com/azure/storage/file-sync/file-sync-server-registration)
	RegisteredServerId *string `pulumi:"registeredServerId"`
	// The path on the Windows Server to be synced to the Azure file share. Changing this forces a new Storage Sync Server Endpoint to be created.
	ServerLocalPath *string `pulumi:"serverLocalPath"`
	// The ID of the Storage Sync Group where the Storage Sync Server Endpoint should exist. Changing this forces a new Storage Sync Server Endpoint to be created.
	StorageSyncGroupId *string `pulumi:"storageSyncGroupId"`
	// Files older than the specified age will be tiered to the cloud.
	TierFilesOlderThanDays *int `pulumi:"tierFilesOlderThanDays"`
	// What percentage of free space on the volume should be preserved? Defaults to `20`.
	VolumeFreeSpacePercent *int `pulumi:"volumeFreeSpacePercent"`
}

type SyncServerEndpointState struct {
	// Is Cloud Tiering Enabled? Defaults to `false`.
	CloudTieringEnabled pulumi.BoolPtrInput
	// Specifies how the server initially downloads the Azure file share data. Valid Values includes `NamespaceThenModifiedFiles`, `NamespaceOnly`, and `AvoidTieredFiles`. Defaults to `NamespaceThenModifiedFiles`.
	InitialDownloadPolicy pulumi.StringPtrInput
	// Specifies how to handle the local cache. Valid Values include `UpdateLocallyCachedFiles` and `DownloadNewAndModifiedFiles`. Defaults to `UpdateLocallyCachedFiles`.
	LocalCacheMode pulumi.StringPtrInput
	// The name which should be used for this Storage Sync. Changing this forces a new Storage Sync Server Endpoint to be created.
	Name pulumi.StringPtrInput
	// The ID of the Registered Server that will be associate with the Storage Sync Server Endpoint. Changing this forces a new Storage Sync Server Endpoint to be created.
	//
	// > **Note:** The target server must already be registered with the parent `storage.Sync` prior to creating this endpoint. For more information on registering a server see the [Microsoft documentation](https://learn.microsoft.com/azure/storage/file-sync/file-sync-server-registration)
	RegisteredServerId pulumi.StringPtrInput
	// The path on the Windows Server to be synced to the Azure file share. Changing this forces a new Storage Sync Server Endpoint to be created.
	ServerLocalPath pulumi.StringPtrInput
	// The ID of the Storage Sync Group where the Storage Sync Server Endpoint should exist. Changing this forces a new Storage Sync Server Endpoint to be created.
	StorageSyncGroupId pulumi.StringPtrInput
	// Files older than the specified age will be tiered to the cloud.
	TierFilesOlderThanDays pulumi.IntPtrInput
	// What percentage of free space on the volume should be preserved? Defaults to `20`.
	VolumeFreeSpacePercent pulumi.IntPtrInput
}

func (SyncServerEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*syncServerEndpointState)(nil)).Elem()
}

type syncServerEndpointArgs struct {
	// Is Cloud Tiering Enabled? Defaults to `false`.
	CloudTieringEnabled *bool `pulumi:"cloudTieringEnabled"`
	// Specifies how the server initially downloads the Azure file share data. Valid Values includes `NamespaceThenModifiedFiles`, `NamespaceOnly`, and `AvoidTieredFiles`. Defaults to `NamespaceThenModifiedFiles`.
	InitialDownloadPolicy *string `pulumi:"initialDownloadPolicy"`
	// Specifies how to handle the local cache. Valid Values include `UpdateLocallyCachedFiles` and `DownloadNewAndModifiedFiles`. Defaults to `UpdateLocallyCachedFiles`.
	LocalCacheMode *string `pulumi:"localCacheMode"`
	// The name which should be used for this Storage Sync. Changing this forces a new Storage Sync Server Endpoint to be created.
	Name *string `pulumi:"name"`
	// The ID of the Registered Server that will be associate with the Storage Sync Server Endpoint. Changing this forces a new Storage Sync Server Endpoint to be created.
	//
	// > **Note:** The target server must already be registered with the parent `storage.Sync` prior to creating this endpoint. For more information on registering a server see the [Microsoft documentation](https://learn.microsoft.com/azure/storage/file-sync/file-sync-server-registration)
	RegisteredServerId string `pulumi:"registeredServerId"`
	// The path on the Windows Server to be synced to the Azure file share. Changing this forces a new Storage Sync Server Endpoint to be created.
	ServerLocalPath string `pulumi:"serverLocalPath"`
	// The ID of the Storage Sync Group where the Storage Sync Server Endpoint should exist. Changing this forces a new Storage Sync Server Endpoint to be created.
	StorageSyncGroupId string `pulumi:"storageSyncGroupId"`
	// Files older than the specified age will be tiered to the cloud.
	TierFilesOlderThanDays *int `pulumi:"tierFilesOlderThanDays"`
	// What percentage of free space on the volume should be preserved? Defaults to `20`.
	VolumeFreeSpacePercent *int `pulumi:"volumeFreeSpacePercent"`
}

// The set of arguments for constructing a SyncServerEndpoint resource.
type SyncServerEndpointArgs struct {
	// Is Cloud Tiering Enabled? Defaults to `false`.
	CloudTieringEnabled pulumi.BoolPtrInput
	// Specifies how the server initially downloads the Azure file share data. Valid Values includes `NamespaceThenModifiedFiles`, `NamespaceOnly`, and `AvoidTieredFiles`. Defaults to `NamespaceThenModifiedFiles`.
	InitialDownloadPolicy pulumi.StringPtrInput
	// Specifies how to handle the local cache. Valid Values include `UpdateLocallyCachedFiles` and `DownloadNewAndModifiedFiles`. Defaults to `UpdateLocallyCachedFiles`.
	LocalCacheMode pulumi.StringPtrInput
	// The name which should be used for this Storage Sync. Changing this forces a new Storage Sync Server Endpoint to be created.
	Name pulumi.StringPtrInput
	// The ID of the Registered Server that will be associate with the Storage Sync Server Endpoint. Changing this forces a new Storage Sync Server Endpoint to be created.
	//
	// > **Note:** The target server must already be registered with the parent `storage.Sync` prior to creating this endpoint. For more information on registering a server see the [Microsoft documentation](https://learn.microsoft.com/azure/storage/file-sync/file-sync-server-registration)
	RegisteredServerId pulumi.StringInput
	// The path on the Windows Server to be synced to the Azure file share. Changing this forces a new Storage Sync Server Endpoint to be created.
	ServerLocalPath pulumi.StringInput
	// The ID of the Storage Sync Group where the Storage Sync Server Endpoint should exist. Changing this forces a new Storage Sync Server Endpoint to be created.
	StorageSyncGroupId pulumi.StringInput
	// Files older than the specified age will be tiered to the cloud.
	TierFilesOlderThanDays pulumi.IntPtrInput
	// What percentage of free space on the volume should be preserved? Defaults to `20`.
	VolumeFreeSpacePercent pulumi.IntPtrInput
}

func (SyncServerEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*syncServerEndpointArgs)(nil)).Elem()
}

type SyncServerEndpointInput interface {
	pulumi.Input

	ToSyncServerEndpointOutput() SyncServerEndpointOutput
	ToSyncServerEndpointOutputWithContext(ctx context.Context) SyncServerEndpointOutput
}

func (*SyncServerEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**SyncServerEndpoint)(nil)).Elem()
}

func (i *SyncServerEndpoint) ToSyncServerEndpointOutput() SyncServerEndpointOutput {
	return i.ToSyncServerEndpointOutputWithContext(context.Background())
}

func (i *SyncServerEndpoint) ToSyncServerEndpointOutputWithContext(ctx context.Context) SyncServerEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncServerEndpointOutput)
}

// SyncServerEndpointArrayInput is an input type that accepts SyncServerEndpointArray and SyncServerEndpointArrayOutput values.
// You can construct a concrete instance of `SyncServerEndpointArrayInput` via:
//
//	SyncServerEndpointArray{ SyncServerEndpointArgs{...} }
type SyncServerEndpointArrayInput interface {
	pulumi.Input

	ToSyncServerEndpointArrayOutput() SyncServerEndpointArrayOutput
	ToSyncServerEndpointArrayOutputWithContext(context.Context) SyncServerEndpointArrayOutput
}

type SyncServerEndpointArray []SyncServerEndpointInput

func (SyncServerEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SyncServerEndpoint)(nil)).Elem()
}

func (i SyncServerEndpointArray) ToSyncServerEndpointArrayOutput() SyncServerEndpointArrayOutput {
	return i.ToSyncServerEndpointArrayOutputWithContext(context.Background())
}

func (i SyncServerEndpointArray) ToSyncServerEndpointArrayOutputWithContext(ctx context.Context) SyncServerEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncServerEndpointArrayOutput)
}

// SyncServerEndpointMapInput is an input type that accepts SyncServerEndpointMap and SyncServerEndpointMapOutput values.
// You can construct a concrete instance of `SyncServerEndpointMapInput` via:
//
//	SyncServerEndpointMap{ "key": SyncServerEndpointArgs{...} }
type SyncServerEndpointMapInput interface {
	pulumi.Input

	ToSyncServerEndpointMapOutput() SyncServerEndpointMapOutput
	ToSyncServerEndpointMapOutputWithContext(context.Context) SyncServerEndpointMapOutput
}

type SyncServerEndpointMap map[string]SyncServerEndpointInput

func (SyncServerEndpointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SyncServerEndpoint)(nil)).Elem()
}

func (i SyncServerEndpointMap) ToSyncServerEndpointMapOutput() SyncServerEndpointMapOutput {
	return i.ToSyncServerEndpointMapOutputWithContext(context.Background())
}

func (i SyncServerEndpointMap) ToSyncServerEndpointMapOutputWithContext(ctx context.Context) SyncServerEndpointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncServerEndpointMapOutput)
}

type SyncServerEndpointOutput struct{ *pulumi.OutputState }

func (SyncServerEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyncServerEndpoint)(nil)).Elem()
}

func (o SyncServerEndpointOutput) ToSyncServerEndpointOutput() SyncServerEndpointOutput {
	return o
}

func (o SyncServerEndpointOutput) ToSyncServerEndpointOutputWithContext(ctx context.Context) SyncServerEndpointOutput {
	return o
}

// Is Cloud Tiering Enabled? Defaults to `false`.
func (o SyncServerEndpointOutput) CloudTieringEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyncServerEndpoint) pulumi.BoolPtrOutput { return v.CloudTieringEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies how the server initially downloads the Azure file share data. Valid Values includes `NamespaceThenModifiedFiles`, `NamespaceOnly`, and `AvoidTieredFiles`. Defaults to `NamespaceThenModifiedFiles`.
func (o SyncServerEndpointOutput) InitialDownloadPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyncServerEndpoint) pulumi.StringPtrOutput { return v.InitialDownloadPolicy }).(pulumi.StringPtrOutput)
}

// Specifies how to handle the local cache. Valid Values include `UpdateLocallyCachedFiles` and `DownloadNewAndModifiedFiles`. Defaults to `UpdateLocallyCachedFiles`.
func (o SyncServerEndpointOutput) LocalCacheMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyncServerEndpoint) pulumi.StringPtrOutput { return v.LocalCacheMode }).(pulumi.StringPtrOutput)
}

// The name which should be used for this Storage Sync. Changing this forces a new Storage Sync Server Endpoint to be created.
func (o SyncServerEndpointOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SyncServerEndpoint) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Registered Server that will be associate with the Storage Sync Server Endpoint. Changing this forces a new Storage Sync Server Endpoint to be created.
//
// > **Note:** The target server must already be registered with the parent `storage.Sync` prior to creating this endpoint. For more information on registering a server see the [Microsoft documentation](https://learn.microsoft.com/azure/storage/file-sync/file-sync-server-registration)
func (o SyncServerEndpointOutput) RegisteredServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *SyncServerEndpoint) pulumi.StringOutput { return v.RegisteredServerId }).(pulumi.StringOutput)
}

// The path on the Windows Server to be synced to the Azure file share. Changing this forces a new Storage Sync Server Endpoint to be created.
func (o SyncServerEndpointOutput) ServerLocalPath() pulumi.StringOutput {
	return o.ApplyT(func(v *SyncServerEndpoint) pulumi.StringOutput { return v.ServerLocalPath }).(pulumi.StringOutput)
}

// The ID of the Storage Sync Group where the Storage Sync Server Endpoint should exist. Changing this forces a new Storage Sync Server Endpoint to be created.
func (o SyncServerEndpointOutput) StorageSyncGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *SyncServerEndpoint) pulumi.StringOutput { return v.StorageSyncGroupId }).(pulumi.StringOutput)
}

// Files older than the specified age will be tiered to the cloud.
func (o SyncServerEndpointOutput) TierFilesOlderThanDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyncServerEndpoint) pulumi.IntPtrOutput { return v.TierFilesOlderThanDays }).(pulumi.IntPtrOutput)
}

// What percentage of free space on the volume should be preserved? Defaults to `20`.
func (o SyncServerEndpointOutput) VolumeFreeSpacePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyncServerEndpoint) pulumi.IntPtrOutput { return v.VolumeFreeSpacePercent }).(pulumi.IntPtrOutput)
}

type SyncServerEndpointArrayOutput struct{ *pulumi.OutputState }

func (SyncServerEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SyncServerEndpoint)(nil)).Elem()
}

func (o SyncServerEndpointArrayOutput) ToSyncServerEndpointArrayOutput() SyncServerEndpointArrayOutput {
	return o
}

func (o SyncServerEndpointArrayOutput) ToSyncServerEndpointArrayOutputWithContext(ctx context.Context) SyncServerEndpointArrayOutput {
	return o
}

func (o SyncServerEndpointArrayOutput) Index(i pulumi.IntInput) SyncServerEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SyncServerEndpoint {
		return vs[0].([]*SyncServerEndpoint)[vs[1].(int)]
	}).(SyncServerEndpointOutput)
}

type SyncServerEndpointMapOutput struct{ *pulumi.OutputState }

func (SyncServerEndpointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SyncServerEndpoint)(nil)).Elem()
}

func (o SyncServerEndpointMapOutput) ToSyncServerEndpointMapOutput() SyncServerEndpointMapOutput {
	return o
}

func (o SyncServerEndpointMapOutput) ToSyncServerEndpointMapOutputWithContext(ctx context.Context) SyncServerEndpointMapOutput {
	return o
}

func (o SyncServerEndpointMapOutput) MapIndex(k pulumi.StringInput) SyncServerEndpointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SyncServerEndpoint {
		return vs[0].(map[string]*SyncServerEndpoint)[vs[1].(string)]
	}).(SyncServerEndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SyncServerEndpointInput)(nil)).Elem(), &SyncServerEndpoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyncServerEndpointArrayInput)(nil)).Elem(), SyncServerEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyncServerEndpointMapInput)(nil)).Elem(), SyncServerEndpointMap{})
	pulumi.RegisterOutputType(SyncServerEndpointOutput{})
	pulumi.RegisterOutputType(SyncServerEndpointArrayOutput{})
	pulumi.RegisterOutputType(SyncServerEndpointMapOutput{})
}
