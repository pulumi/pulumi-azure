// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Storage Blob Inventory Policy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	core/resourceGroup "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/core/resourceGroup"
//	storage/account "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/storage/account"
//	storage/blobInventoryPolicy "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/storage/blobInventoryPolicy"
//	storage/container "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/storage/container"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// example, err := core/resourceGroup.NewResourceGroup(ctx, "example", &core/resourceGroup.ResourceGroupArgs{
// Name: "example-resources",
// Location: "West Europe",
// })
// if err != nil {
// return err
// }
// exampleAccount, err := storage/account.NewAccount(ctx, "example", &storage/account.AccountArgs{
// Name: "examplestoracc",
// ResourceGroupName: example.Name,
// Location: example.Location,
// AccountTier: "Standard",
// AccountReplicationType: "LRS",
// BlobProperties: map[string]interface{}{
// "versioningEnabled": true,
// },
// })
// if err != nil {
// return err
// }
// exampleContainer, err := storage/container.NewContainer(ctx, "example", &storage/container.ContainerArgs{
// Name: "examplecontainer",
// StorageAccountName: exampleAccount.Name,
// ContainerAccessType: "private",
// })
// if err != nil {
// return err
// }
// _, err = storage/blobInventoryPolicy.NewBlobInventoryPolicy(ctx, "example", &storage/blobInventoryPolicy.BlobInventoryPolicyArgs{
// StorageAccountId: exampleAccount.Id,
// Rules: []map[string]interface{}{
// map[string]interface{}{
// "name": "rule1",
// "storageContainerName": exampleContainer.Name,
// "format": "Csv",
// "schedule": "Daily",
// "scope": "Container",
// "schemaFields": []string{
// "Name",
// "Last-Modified",
// },
// },
// },
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
//
// ## Import
//
// Storage Blob Inventory Policies can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:storage/blobInventoryPolicy:BlobInventoryPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Storage/storageAccounts/storageAccount1/inventoryPolicies/inventoryPolicy1
// ```
type BlobInventoryPolicy struct {
	pulumi.CustomResourceState

	// One or more `rules` blocks as defined below.
	Rules BlobInventoryPolicyRuleArrayOutput `pulumi:"rules"`
	// The ID of the storage account to apply this Blob Inventory Policy to. Changing this forces a new Storage Blob Inventory Policy to be created.
	StorageAccountId pulumi.StringOutput `pulumi:"storageAccountId"`
}

// NewBlobInventoryPolicy registers a new resource with the given unique name, arguments, and options.
func NewBlobInventoryPolicy(ctx *pulumi.Context,
	name string, args *BlobInventoryPolicyArgs, opts ...pulumi.ResourceOption) (*BlobInventoryPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	if args.StorageAccountId == nil {
		return nil, errors.New("invalid value for required argument 'StorageAccountId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BlobInventoryPolicy
	err := ctx.RegisterResource("azure:storage/blobInventoryPolicy:BlobInventoryPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBlobInventoryPolicy gets an existing BlobInventoryPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBlobInventoryPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BlobInventoryPolicyState, opts ...pulumi.ResourceOption) (*BlobInventoryPolicy, error) {
	var resource BlobInventoryPolicy
	err := ctx.ReadResource("azure:storage/blobInventoryPolicy:BlobInventoryPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BlobInventoryPolicy resources.
type blobInventoryPolicyState struct {
	// One or more `rules` blocks as defined below.
	Rules []BlobInventoryPolicyRule `pulumi:"rules"`
	// The ID of the storage account to apply this Blob Inventory Policy to. Changing this forces a new Storage Blob Inventory Policy to be created.
	StorageAccountId *string `pulumi:"storageAccountId"`
}

type BlobInventoryPolicyState struct {
	// One or more `rules` blocks as defined below.
	Rules BlobInventoryPolicyRuleArrayInput
	// The ID of the storage account to apply this Blob Inventory Policy to. Changing this forces a new Storage Blob Inventory Policy to be created.
	StorageAccountId pulumi.StringPtrInput
}

func (BlobInventoryPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*blobInventoryPolicyState)(nil)).Elem()
}

type blobInventoryPolicyArgs struct {
	// One or more `rules` blocks as defined below.
	Rules []BlobInventoryPolicyRule `pulumi:"rules"`
	// The ID of the storage account to apply this Blob Inventory Policy to. Changing this forces a new Storage Blob Inventory Policy to be created.
	StorageAccountId string `pulumi:"storageAccountId"`
}

// The set of arguments for constructing a BlobInventoryPolicy resource.
type BlobInventoryPolicyArgs struct {
	// One or more `rules` blocks as defined below.
	Rules BlobInventoryPolicyRuleArrayInput
	// The ID of the storage account to apply this Blob Inventory Policy to. Changing this forces a new Storage Blob Inventory Policy to be created.
	StorageAccountId pulumi.StringInput
}

func (BlobInventoryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*blobInventoryPolicyArgs)(nil)).Elem()
}

type BlobInventoryPolicyInput interface {
	pulumi.Input

	ToBlobInventoryPolicyOutput() BlobInventoryPolicyOutput
	ToBlobInventoryPolicyOutputWithContext(ctx context.Context) BlobInventoryPolicyOutput
}

func (*BlobInventoryPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobInventoryPolicy)(nil)).Elem()
}

func (i *BlobInventoryPolicy) ToBlobInventoryPolicyOutput() BlobInventoryPolicyOutput {
	return i.ToBlobInventoryPolicyOutputWithContext(context.Background())
}

func (i *BlobInventoryPolicy) ToBlobInventoryPolicyOutputWithContext(ctx context.Context) BlobInventoryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobInventoryPolicyOutput)
}

// BlobInventoryPolicyArrayInput is an input type that accepts BlobInventoryPolicyArray and BlobInventoryPolicyArrayOutput values.
// You can construct a concrete instance of `BlobInventoryPolicyArrayInput` via:
//
//	BlobInventoryPolicyArray{ BlobInventoryPolicyArgs{...} }
type BlobInventoryPolicyArrayInput interface {
	pulumi.Input

	ToBlobInventoryPolicyArrayOutput() BlobInventoryPolicyArrayOutput
	ToBlobInventoryPolicyArrayOutputWithContext(context.Context) BlobInventoryPolicyArrayOutput
}

type BlobInventoryPolicyArray []BlobInventoryPolicyInput

func (BlobInventoryPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BlobInventoryPolicy)(nil)).Elem()
}

func (i BlobInventoryPolicyArray) ToBlobInventoryPolicyArrayOutput() BlobInventoryPolicyArrayOutput {
	return i.ToBlobInventoryPolicyArrayOutputWithContext(context.Background())
}

func (i BlobInventoryPolicyArray) ToBlobInventoryPolicyArrayOutputWithContext(ctx context.Context) BlobInventoryPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobInventoryPolicyArrayOutput)
}

// BlobInventoryPolicyMapInput is an input type that accepts BlobInventoryPolicyMap and BlobInventoryPolicyMapOutput values.
// You can construct a concrete instance of `BlobInventoryPolicyMapInput` via:
//
//	BlobInventoryPolicyMap{ "key": BlobInventoryPolicyArgs{...} }
type BlobInventoryPolicyMapInput interface {
	pulumi.Input

	ToBlobInventoryPolicyMapOutput() BlobInventoryPolicyMapOutput
	ToBlobInventoryPolicyMapOutputWithContext(context.Context) BlobInventoryPolicyMapOutput
}

type BlobInventoryPolicyMap map[string]BlobInventoryPolicyInput

func (BlobInventoryPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BlobInventoryPolicy)(nil)).Elem()
}

func (i BlobInventoryPolicyMap) ToBlobInventoryPolicyMapOutput() BlobInventoryPolicyMapOutput {
	return i.ToBlobInventoryPolicyMapOutputWithContext(context.Background())
}

func (i BlobInventoryPolicyMap) ToBlobInventoryPolicyMapOutputWithContext(ctx context.Context) BlobInventoryPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobInventoryPolicyMapOutput)
}

type BlobInventoryPolicyOutput struct{ *pulumi.OutputState }

func (BlobInventoryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobInventoryPolicy)(nil)).Elem()
}

func (o BlobInventoryPolicyOutput) ToBlobInventoryPolicyOutput() BlobInventoryPolicyOutput {
	return o
}

func (o BlobInventoryPolicyOutput) ToBlobInventoryPolicyOutputWithContext(ctx context.Context) BlobInventoryPolicyOutput {
	return o
}

// One or more `rules` blocks as defined below.
func (o BlobInventoryPolicyOutput) Rules() BlobInventoryPolicyRuleArrayOutput {
	return o.ApplyT(func(v *BlobInventoryPolicy) BlobInventoryPolicyRuleArrayOutput { return v.Rules }).(BlobInventoryPolicyRuleArrayOutput)
}

// The ID of the storage account to apply this Blob Inventory Policy to. Changing this forces a new Storage Blob Inventory Policy to be created.
func (o BlobInventoryPolicyOutput) StorageAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *BlobInventoryPolicy) pulumi.StringOutput { return v.StorageAccountId }).(pulumi.StringOutput)
}

type BlobInventoryPolicyArrayOutput struct{ *pulumi.OutputState }

func (BlobInventoryPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BlobInventoryPolicy)(nil)).Elem()
}

func (o BlobInventoryPolicyArrayOutput) ToBlobInventoryPolicyArrayOutput() BlobInventoryPolicyArrayOutput {
	return o
}

func (o BlobInventoryPolicyArrayOutput) ToBlobInventoryPolicyArrayOutputWithContext(ctx context.Context) BlobInventoryPolicyArrayOutput {
	return o
}

func (o BlobInventoryPolicyArrayOutput) Index(i pulumi.IntInput) BlobInventoryPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BlobInventoryPolicy {
		return vs[0].([]*BlobInventoryPolicy)[vs[1].(int)]
	}).(BlobInventoryPolicyOutput)
}

type BlobInventoryPolicyMapOutput struct{ *pulumi.OutputState }

func (BlobInventoryPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BlobInventoryPolicy)(nil)).Elem()
}

func (o BlobInventoryPolicyMapOutput) ToBlobInventoryPolicyMapOutput() BlobInventoryPolicyMapOutput {
	return o
}

func (o BlobInventoryPolicyMapOutput) ToBlobInventoryPolicyMapOutputWithContext(ctx context.Context) BlobInventoryPolicyMapOutput {
	return o
}

func (o BlobInventoryPolicyMapOutput) MapIndex(k pulumi.StringInput) BlobInventoryPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BlobInventoryPolicy {
		return vs[0].(map[string]*BlobInventoryPolicy)[vs[1].(string)]
	}).(BlobInventoryPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BlobInventoryPolicyInput)(nil)).Elem(), &BlobInventoryPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlobInventoryPolicyArrayInput)(nil)).Elem(), BlobInventoryPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlobInventoryPolicyMapInput)(nil)).Elem(), BlobInventoryPolicyMap{})
	pulumi.RegisterOutputType(BlobInventoryPolicyOutput{})
	pulumi.RegisterOutputType(BlobInventoryPolicyArrayOutput{})
	pulumi.RegisterOutputType(BlobInventoryPolicyMapOutput{})
}
