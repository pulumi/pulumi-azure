// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages the Static Website of an Azure Storage Account.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resources"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = storage.NewAccount(ctx, "example", &storage.AccountArgs{
//				Name:                   pulumi.String("storageaccountname"),
//				ResourceGroupName:      example.Name,
//				Location:               example.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("GRS"),
//				Tags: pulumi.StringMap{
//					"environment": pulumi.String("staging"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = storage.NewAccountStaticWebsite(ctx, "test", &storage.AccountStaticWebsiteArgs{
//				StorageAccountId: pulumi.Any(testAzurermStorageAccount.Id),
//				Error404Document: pulumi.String("custom_not_found.html"),
//				IndexDocument:    pulumi.String("custom_index.html"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Storage Account Static Websites can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:storage/accountStaticWebsite:AccountStaticWebsite mysite /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.Storage/storageAccounts/myaccount
// ```
type AccountStaticWebsite struct {
	pulumi.CustomResourceState

	// The absolute path to a custom webpage that should be used when a request is made which does not correspond to an existing file.
	Error404Document pulumi.StringPtrOutput `pulumi:"error404Document"`
	// The webpage that Azure Storage serves for requests to the root of a website or any subfolder. For example, index.html.
	IndexDocument pulumi.StringPtrOutput `pulumi:"indexDocument"`
	// The ID of the Storage Account to set Static Website on. Changing this forces a new resource to be created.
	StorageAccountId pulumi.StringOutput `pulumi:"storageAccountId"`
}

// NewAccountStaticWebsite registers a new resource with the given unique name, arguments, and options.
func NewAccountStaticWebsite(ctx *pulumi.Context,
	name string, args *AccountStaticWebsiteArgs, opts ...pulumi.ResourceOption) (*AccountStaticWebsite, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StorageAccountId == nil {
		return nil, errors.New("invalid value for required argument 'StorageAccountId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccountStaticWebsite
	err := ctx.RegisterResource("azure:storage/accountStaticWebsite:AccountStaticWebsite", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccountStaticWebsite gets an existing AccountStaticWebsite resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountStaticWebsite(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountStaticWebsiteState, opts ...pulumi.ResourceOption) (*AccountStaticWebsite, error) {
	var resource AccountStaticWebsite
	err := ctx.ReadResource("azure:storage/accountStaticWebsite:AccountStaticWebsite", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccountStaticWebsite resources.
type accountStaticWebsiteState struct {
	// The absolute path to a custom webpage that should be used when a request is made which does not correspond to an existing file.
	Error404Document *string `pulumi:"error404Document"`
	// The webpage that Azure Storage serves for requests to the root of a website or any subfolder. For example, index.html.
	IndexDocument *string `pulumi:"indexDocument"`
	// The ID of the Storage Account to set Static Website on. Changing this forces a new resource to be created.
	StorageAccountId *string `pulumi:"storageAccountId"`
}

type AccountStaticWebsiteState struct {
	// The absolute path to a custom webpage that should be used when a request is made which does not correspond to an existing file.
	Error404Document pulumi.StringPtrInput
	// The webpage that Azure Storage serves for requests to the root of a website or any subfolder. For example, index.html.
	IndexDocument pulumi.StringPtrInput
	// The ID of the Storage Account to set Static Website on. Changing this forces a new resource to be created.
	StorageAccountId pulumi.StringPtrInput
}

func (AccountStaticWebsiteState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountStaticWebsiteState)(nil)).Elem()
}

type accountStaticWebsiteArgs struct {
	// The absolute path to a custom webpage that should be used when a request is made which does not correspond to an existing file.
	Error404Document *string `pulumi:"error404Document"`
	// The webpage that Azure Storage serves for requests to the root of a website or any subfolder. For example, index.html.
	IndexDocument *string `pulumi:"indexDocument"`
	// The ID of the Storage Account to set Static Website on. Changing this forces a new resource to be created.
	StorageAccountId string `pulumi:"storageAccountId"`
}

// The set of arguments for constructing a AccountStaticWebsite resource.
type AccountStaticWebsiteArgs struct {
	// The absolute path to a custom webpage that should be used when a request is made which does not correspond to an existing file.
	Error404Document pulumi.StringPtrInput
	// The webpage that Azure Storage serves for requests to the root of a website or any subfolder. For example, index.html.
	IndexDocument pulumi.StringPtrInput
	// The ID of the Storage Account to set Static Website on. Changing this forces a new resource to be created.
	StorageAccountId pulumi.StringInput
}

func (AccountStaticWebsiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountStaticWebsiteArgs)(nil)).Elem()
}

type AccountStaticWebsiteInput interface {
	pulumi.Input

	ToAccountStaticWebsiteOutput() AccountStaticWebsiteOutput
	ToAccountStaticWebsiteOutputWithContext(ctx context.Context) AccountStaticWebsiteOutput
}

func (*AccountStaticWebsite) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountStaticWebsite)(nil)).Elem()
}

func (i *AccountStaticWebsite) ToAccountStaticWebsiteOutput() AccountStaticWebsiteOutput {
	return i.ToAccountStaticWebsiteOutputWithContext(context.Background())
}

func (i *AccountStaticWebsite) ToAccountStaticWebsiteOutputWithContext(ctx context.Context) AccountStaticWebsiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountStaticWebsiteOutput)
}

// AccountStaticWebsiteArrayInput is an input type that accepts AccountStaticWebsiteArray and AccountStaticWebsiteArrayOutput values.
// You can construct a concrete instance of `AccountStaticWebsiteArrayInput` via:
//
//	AccountStaticWebsiteArray{ AccountStaticWebsiteArgs{...} }
type AccountStaticWebsiteArrayInput interface {
	pulumi.Input

	ToAccountStaticWebsiteArrayOutput() AccountStaticWebsiteArrayOutput
	ToAccountStaticWebsiteArrayOutputWithContext(context.Context) AccountStaticWebsiteArrayOutput
}

type AccountStaticWebsiteArray []AccountStaticWebsiteInput

func (AccountStaticWebsiteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountStaticWebsite)(nil)).Elem()
}

func (i AccountStaticWebsiteArray) ToAccountStaticWebsiteArrayOutput() AccountStaticWebsiteArrayOutput {
	return i.ToAccountStaticWebsiteArrayOutputWithContext(context.Background())
}

func (i AccountStaticWebsiteArray) ToAccountStaticWebsiteArrayOutputWithContext(ctx context.Context) AccountStaticWebsiteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountStaticWebsiteArrayOutput)
}

// AccountStaticWebsiteMapInput is an input type that accepts AccountStaticWebsiteMap and AccountStaticWebsiteMapOutput values.
// You can construct a concrete instance of `AccountStaticWebsiteMapInput` via:
//
//	AccountStaticWebsiteMap{ "key": AccountStaticWebsiteArgs{...} }
type AccountStaticWebsiteMapInput interface {
	pulumi.Input

	ToAccountStaticWebsiteMapOutput() AccountStaticWebsiteMapOutput
	ToAccountStaticWebsiteMapOutputWithContext(context.Context) AccountStaticWebsiteMapOutput
}

type AccountStaticWebsiteMap map[string]AccountStaticWebsiteInput

func (AccountStaticWebsiteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountStaticWebsite)(nil)).Elem()
}

func (i AccountStaticWebsiteMap) ToAccountStaticWebsiteMapOutput() AccountStaticWebsiteMapOutput {
	return i.ToAccountStaticWebsiteMapOutputWithContext(context.Background())
}

func (i AccountStaticWebsiteMap) ToAccountStaticWebsiteMapOutputWithContext(ctx context.Context) AccountStaticWebsiteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountStaticWebsiteMapOutput)
}

type AccountStaticWebsiteOutput struct{ *pulumi.OutputState }

func (AccountStaticWebsiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountStaticWebsite)(nil)).Elem()
}

func (o AccountStaticWebsiteOutput) ToAccountStaticWebsiteOutput() AccountStaticWebsiteOutput {
	return o
}

func (o AccountStaticWebsiteOutput) ToAccountStaticWebsiteOutputWithContext(ctx context.Context) AccountStaticWebsiteOutput {
	return o
}

// The absolute path to a custom webpage that should be used when a request is made which does not correspond to an existing file.
func (o AccountStaticWebsiteOutput) Error404Document() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountStaticWebsite) pulumi.StringPtrOutput { return v.Error404Document }).(pulumi.StringPtrOutput)
}

// The webpage that Azure Storage serves for requests to the root of a website or any subfolder. For example, index.html.
func (o AccountStaticWebsiteOutput) IndexDocument() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountStaticWebsite) pulumi.StringPtrOutput { return v.IndexDocument }).(pulumi.StringPtrOutput)
}

// The ID of the Storage Account to set Static Website on. Changing this forces a new resource to be created.
func (o AccountStaticWebsiteOutput) StorageAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountStaticWebsite) pulumi.StringOutput { return v.StorageAccountId }).(pulumi.StringOutput)
}

type AccountStaticWebsiteArrayOutput struct{ *pulumi.OutputState }

func (AccountStaticWebsiteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountStaticWebsite)(nil)).Elem()
}

func (o AccountStaticWebsiteArrayOutput) ToAccountStaticWebsiteArrayOutput() AccountStaticWebsiteArrayOutput {
	return o
}

func (o AccountStaticWebsiteArrayOutput) ToAccountStaticWebsiteArrayOutputWithContext(ctx context.Context) AccountStaticWebsiteArrayOutput {
	return o
}

func (o AccountStaticWebsiteArrayOutput) Index(i pulumi.IntInput) AccountStaticWebsiteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccountStaticWebsite {
		return vs[0].([]*AccountStaticWebsite)[vs[1].(int)]
	}).(AccountStaticWebsiteOutput)
}

type AccountStaticWebsiteMapOutput struct{ *pulumi.OutputState }

func (AccountStaticWebsiteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountStaticWebsite)(nil)).Elem()
}

func (o AccountStaticWebsiteMapOutput) ToAccountStaticWebsiteMapOutput() AccountStaticWebsiteMapOutput {
	return o
}

func (o AccountStaticWebsiteMapOutput) ToAccountStaticWebsiteMapOutputWithContext(ctx context.Context) AccountStaticWebsiteMapOutput {
	return o
}

func (o AccountStaticWebsiteMapOutput) MapIndex(k pulumi.StringInput) AccountStaticWebsiteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccountStaticWebsite {
		return vs[0].(map[string]*AccountStaticWebsite)[vs[1].(string)]
	}).(AccountStaticWebsiteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountStaticWebsiteInput)(nil)).Elem(), &AccountStaticWebsite{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountStaticWebsiteArrayInput)(nil)).Elem(), AccountStaticWebsiteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountStaticWebsiteMapInput)(nil)).Elem(), AccountStaticWebsiteMap{})
	pulumi.RegisterOutputType(AccountStaticWebsiteOutput{})
	pulumi.RegisterOutputType(AccountStaticWebsiteArrayOutput{})
	pulumi.RegisterOutputType(AccountStaticWebsiteMapOutput{})
}
