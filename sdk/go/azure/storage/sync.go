// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Storage Sync.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = storage.NewSync(ctx, "exampleSync", &storage.SyncArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				Tags: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Storage Syncs can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:storage/sync:Sync example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.StorageSync/storageSyncServices/sync1
//
// ```
type Sync struct {
	pulumi.CustomResourceState

	// Incoming traffic policy. Possible values are `AllowAllTraffic` and `AllowVirtualNetworksOnly`. Defaults to `AllowAllTraffic`.
	IncomingTrafficPolicy pulumi.StringPtrOutput `pulumi:"incomingTrafficPolicy"`
	// The Azure Region where the Storage Sync should exist. Changing this forces a new Storage Sync to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name which should be used for this Storage Sync. Changing this forces a new Storage Sync to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Resource Group where the Storage Sync should exist. Changing this forces a new Storage Sync to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Storage Sync.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewSync registers a new resource with the given unique name, arguments, and options.
func NewSync(ctx *pulumi.Context,
	name string, args *SyncArgs, opts ...pulumi.ResourceOption) (*Sync, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Sync
	err := ctx.RegisterResource("azure:storage/sync:Sync", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSync gets an existing Sync resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSync(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SyncState, opts ...pulumi.ResourceOption) (*Sync, error) {
	var resource Sync
	err := ctx.ReadResource("azure:storage/sync:Sync", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Sync resources.
type syncState struct {
	// Incoming traffic policy. Possible values are `AllowAllTraffic` and `AllowVirtualNetworksOnly`. Defaults to `AllowAllTraffic`.
	IncomingTrafficPolicy *string `pulumi:"incomingTrafficPolicy"`
	// The Azure Region where the Storage Sync should exist. Changing this forces a new Storage Sync to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Storage Sync. Changing this forces a new Storage Sync to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Storage Sync should exist. Changing this forces a new Storage Sync to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Storage Sync.
	Tags map[string]string `pulumi:"tags"`
}

type SyncState struct {
	// Incoming traffic policy. Possible values are `AllowAllTraffic` and `AllowVirtualNetworksOnly`. Defaults to `AllowAllTraffic`.
	IncomingTrafficPolicy pulumi.StringPtrInput
	// The Azure Region where the Storage Sync should exist. Changing this forces a new Storage Sync to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Storage Sync. Changing this forces a new Storage Sync to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Storage Sync should exist. Changing this forces a new Storage Sync to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Storage Sync.
	Tags pulumi.StringMapInput
}

func (SyncState) ElementType() reflect.Type {
	return reflect.TypeOf((*syncState)(nil)).Elem()
}

type syncArgs struct {
	// Incoming traffic policy. Possible values are `AllowAllTraffic` and `AllowVirtualNetworksOnly`. Defaults to `AllowAllTraffic`.
	IncomingTrafficPolicy *string `pulumi:"incomingTrafficPolicy"`
	// The Azure Region where the Storage Sync should exist. Changing this forces a new Storage Sync to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Storage Sync. Changing this forces a new Storage Sync to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Storage Sync should exist. Changing this forces a new Storage Sync to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Storage Sync.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Sync resource.
type SyncArgs struct {
	// Incoming traffic policy. Possible values are `AllowAllTraffic` and `AllowVirtualNetworksOnly`. Defaults to `AllowAllTraffic`.
	IncomingTrafficPolicy pulumi.StringPtrInput
	// The Azure Region where the Storage Sync should exist. Changing this forces a new Storage Sync to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Storage Sync. Changing this forces a new Storage Sync to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Storage Sync should exist. Changing this forces a new Storage Sync to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags which should be assigned to the Storage Sync.
	Tags pulumi.StringMapInput
}

func (SyncArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*syncArgs)(nil)).Elem()
}

type SyncInput interface {
	pulumi.Input

	ToSyncOutput() SyncOutput
	ToSyncOutputWithContext(ctx context.Context) SyncOutput
}

func (*Sync) ElementType() reflect.Type {
	return reflect.TypeOf((**Sync)(nil)).Elem()
}

func (i *Sync) ToSyncOutput() SyncOutput {
	return i.ToSyncOutputWithContext(context.Background())
}

func (i *Sync) ToSyncOutputWithContext(ctx context.Context) SyncOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncOutput)
}

// SyncArrayInput is an input type that accepts SyncArray and SyncArrayOutput values.
// You can construct a concrete instance of `SyncArrayInput` via:
//
//	SyncArray{ SyncArgs{...} }
type SyncArrayInput interface {
	pulumi.Input

	ToSyncArrayOutput() SyncArrayOutput
	ToSyncArrayOutputWithContext(context.Context) SyncArrayOutput
}

type SyncArray []SyncInput

func (SyncArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Sync)(nil)).Elem()
}

func (i SyncArray) ToSyncArrayOutput() SyncArrayOutput {
	return i.ToSyncArrayOutputWithContext(context.Background())
}

func (i SyncArray) ToSyncArrayOutputWithContext(ctx context.Context) SyncArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncArrayOutput)
}

// SyncMapInput is an input type that accepts SyncMap and SyncMapOutput values.
// You can construct a concrete instance of `SyncMapInput` via:
//
//	SyncMap{ "key": SyncArgs{...} }
type SyncMapInput interface {
	pulumi.Input

	ToSyncMapOutput() SyncMapOutput
	ToSyncMapOutputWithContext(context.Context) SyncMapOutput
}

type SyncMap map[string]SyncInput

func (SyncMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Sync)(nil)).Elem()
}

func (i SyncMap) ToSyncMapOutput() SyncMapOutput {
	return i.ToSyncMapOutputWithContext(context.Background())
}

func (i SyncMap) ToSyncMapOutputWithContext(ctx context.Context) SyncMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncMapOutput)
}

type SyncOutput struct{ *pulumi.OutputState }

func (SyncOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sync)(nil)).Elem()
}

func (o SyncOutput) ToSyncOutput() SyncOutput {
	return o
}

func (o SyncOutput) ToSyncOutputWithContext(ctx context.Context) SyncOutput {
	return o
}

// Incoming traffic policy. Possible values are `AllowAllTraffic` and `AllowVirtualNetworksOnly`. Defaults to `AllowAllTraffic`.
func (o SyncOutput) IncomingTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sync) pulumi.StringPtrOutput { return v.IncomingTrafficPolicy }).(pulumi.StringPtrOutput)
}

// The Azure Region where the Storage Sync should exist. Changing this forces a new Storage Sync to be created.
func (o SyncOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Sync) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name which should be used for this Storage Sync. Changing this forces a new Storage Sync to be created.
func (o SyncOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Sync) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the Resource Group where the Storage Sync should exist. Changing this forces a new Storage Sync to be created.
func (o SyncOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Sync) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the Storage Sync.
func (o SyncOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Sync) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type SyncArrayOutput struct{ *pulumi.OutputState }

func (SyncArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Sync)(nil)).Elem()
}

func (o SyncArrayOutput) ToSyncArrayOutput() SyncArrayOutput {
	return o
}

func (o SyncArrayOutput) ToSyncArrayOutputWithContext(ctx context.Context) SyncArrayOutput {
	return o
}

func (o SyncArrayOutput) Index(i pulumi.IntInput) SyncOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Sync {
		return vs[0].([]*Sync)[vs[1].(int)]
	}).(SyncOutput)
}

type SyncMapOutput struct{ *pulumi.OutputState }

func (SyncMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Sync)(nil)).Elem()
}

func (o SyncMapOutput) ToSyncMapOutput() SyncMapOutput {
	return o
}

func (o SyncMapOutput) ToSyncMapOutputWithContext(ctx context.Context) SyncMapOutput {
	return o
}

func (o SyncMapOutput) MapIndex(k pulumi.StringInput) SyncOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Sync {
		return vs[0].(map[string]*Sync)[vs[1].(string)]
	}).(SyncOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SyncInput)(nil)).Elem(), &Sync{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyncArrayInput)(nil)).Elem(), SyncArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyncMapInput)(nil)).Elem(), SyncMap{})
	pulumi.RegisterOutputType(SyncOutput{})
	pulumi.RegisterOutputType(SyncArrayOutput{})
	pulumi.RegisterOutputType(SyncMapOutput{})
}
