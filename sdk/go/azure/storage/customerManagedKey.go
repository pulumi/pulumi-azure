// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a Customer Managed Key for a Storage Account.
//
// ## Import
//
// Customer Managed Keys for a Storage Account can be imported using the `resource id` of the Storage Account, e.g.
//
// ```sh
//  $ pulumi import azure:storage/customerManagedKey:CustomerManagedKey example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.Storage/storageAccounts/myaccount
// ```
type CustomerManagedKey struct {
	pulumi.CustomResourceState

	// The name of Key Vault Key.
	KeyName pulumi.StringOutput `pulumi:"keyName"`
	// The ID of the Key Vault. Changing this forces a new resource to be created.
	KeyVaultId pulumi.StringOutput `pulumi:"keyVaultId"`
	// The version of Key Vault Key. Remove or omit this argument to enable Automatic Key Rotation.
	KeyVersion pulumi.StringPtrOutput `pulumi:"keyVersion"`
	// The ID of the Storage Account. Changing this forces a new resource to be created.
	StorageAccountId pulumi.StringOutput `pulumi:"storageAccountId"`
}

// NewCustomerManagedKey registers a new resource with the given unique name, arguments, and options.
func NewCustomerManagedKey(ctx *pulumi.Context,
	name string, args *CustomerManagedKeyArgs, opts ...pulumi.ResourceOption) (*CustomerManagedKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KeyName == nil {
		return nil, errors.New("invalid value for required argument 'KeyName'")
	}
	if args.KeyVaultId == nil {
		return nil, errors.New("invalid value for required argument 'KeyVaultId'")
	}
	if args.StorageAccountId == nil {
		return nil, errors.New("invalid value for required argument 'StorageAccountId'")
	}
	var resource CustomerManagedKey
	err := ctx.RegisterResource("azure:storage/customerManagedKey:CustomerManagedKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCustomerManagedKey gets an existing CustomerManagedKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCustomerManagedKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CustomerManagedKeyState, opts ...pulumi.ResourceOption) (*CustomerManagedKey, error) {
	var resource CustomerManagedKey
	err := ctx.ReadResource("azure:storage/customerManagedKey:CustomerManagedKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CustomerManagedKey resources.
type customerManagedKeyState struct {
	// The name of Key Vault Key.
	KeyName *string `pulumi:"keyName"`
	// The ID of the Key Vault. Changing this forces a new resource to be created.
	KeyVaultId *string `pulumi:"keyVaultId"`
	// The version of Key Vault Key. Remove or omit this argument to enable Automatic Key Rotation.
	KeyVersion *string `pulumi:"keyVersion"`
	// The ID of the Storage Account. Changing this forces a new resource to be created.
	StorageAccountId *string `pulumi:"storageAccountId"`
}

type CustomerManagedKeyState struct {
	// The name of Key Vault Key.
	KeyName pulumi.StringPtrInput
	// The ID of the Key Vault. Changing this forces a new resource to be created.
	KeyVaultId pulumi.StringPtrInput
	// The version of Key Vault Key. Remove or omit this argument to enable Automatic Key Rotation.
	KeyVersion pulumi.StringPtrInput
	// The ID of the Storage Account. Changing this forces a new resource to be created.
	StorageAccountId pulumi.StringPtrInput
}

func (CustomerManagedKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*customerManagedKeyState)(nil)).Elem()
}

type customerManagedKeyArgs struct {
	// The name of Key Vault Key.
	KeyName string `pulumi:"keyName"`
	// The ID of the Key Vault. Changing this forces a new resource to be created.
	KeyVaultId string `pulumi:"keyVaultId"`
	// The version of Key Vault Key. Remove or omit this argument to enable Automatic Key Rotation.
	KeyVersion *string `pulumi:"keyVersion"`
	// The ID of the Storage Account. Changing this forces a new resource to be created.
	StorageAccountId string `pulumi:"storageAccountId"`
}

// The set of arguments for constructing a CustomerManagedKey resource.
type CustomerManagedKeyArgs struct {
	// The name of Key Vault Key.
	KeyName pulumi.StringInput
	// The ID of the Key Vault. Changing this forces a new resource to be created.
	KeyVaultId pulumi.StringInput
	// The version of Key Vault Key. Remove or omit this argument to enable Automatic Key Rotation.
	KeyVersion pulumi.StringPtrInput
	// The ID of the Storage Account. Changing this forces a new resource to be created.
	StorageAccountId pulumi.StringInput
}

func (CustomerManagedKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*customerManagedKeyArgs)(nil)).Elem()
}

type CustomerManagedKeyInput interface {
	pulumi.Input

	ToCustomerManagedKeyOutput() CustomerManagedKeyOutput
	ToCustomerManagedKeyOutputWithContext(ctx context.Context) CustomerManagedKeyOutput
}

func (*CustomerManagedKey) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomerManagedKey)(nil))
}

func (i *CustomerManagedKey) ToCustomerManagedKeyOutput() CustomerManagedKeyOutput {
	return i.ToCustomerManagedKeyOutputWithContext(context.Background())
}

func (i *CustomerManagedKey) ToCustomerManagedKeyOutputWithContext(ctx context.Context) CustomerManagedKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerManagedKeyOutput)
}

func (i *CustomerManagedKey) ToCustomerManagedKeyPtrOutput() CustomerManagedKeyPtrOutput {
	return i.ToCustomerManagedKeyPtrOutputWithContext(context.Background())
}

func (i *CustomerManagedKey) ToCustomerManagedKeyPtrOutputWithContext(ctx context.Context) CustomerManagedKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerManagedKeyPtrOutput)
}

type CustomerManagedKeyPtrInput interface {
	pulumi.Input

	ToCustomerManagedKeyPtrOutput() CustomerManagedKeyPtrOutput
	ToCustomerManagedKeyPtrOutputWithContext(ctx context.Context) CustomerManagedKeyPtrOutput
}

type customerManagedKeyPtrType CustomerManagedKeyArgs

func (*customerManagedKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomerManagedKey)(nil))
}

func (i *customerManagedKeyPtrType) ToCustomerManagedKeyPtrOutput() CustomerManagedKeyPtrOutput {
	return i.ToCustomerManagedKeyPtrOutputWithContext(context.Background())
}

func (i *customerManagedKeyPtrType) ToCustomerManagedKeyPtrOutputWithContext(ctx context.Context) CustomerManagedKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerManagedKeyPtrOutput)
}

// CustomerManagedKeyArrayInput is an input type that accepts CustomerManagedKeyArray and CustomerManagedKeyArrayOutput values.
// You can construct a concrete instance of `CustomerManagedKeyArrayInput` via:
//
//          CustomerManagedKeyArray{ CustomerManagedKeyArgs{...} }
type CustomerManagedKeyArrayInput interface {
	pulumi.Input

	ToCustomerManagedKeyArrayOutput() CustomerManagedKeyArrayOutput
	ToCustomerManagedKeyArrayOutputWithContext(context.Context) CustomerManagedKeyArrayOutput
}

type CustomerManagedKeyArray []CustomerManagedKeyInput

func (CustomerManagedKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*CustomerManagedKey)(nil))
}

func (i CustomerManagedKeyArray) ToCustomerManagedKeyArrayOutput() CustomerManagedKeyArrayOutput {
	return i.ToCustomerManagedKeyArrayOutputWithContext(context.Background())
}

func (i CustomerManagedKeyArray) ToCustomerManagedKeyArrayOutputWithContext(ctx context.Context) CustomerManagedKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerManagedKeyArrayOutput)
}

// CustomerManagedKeyMapInput is an input type that accepts CustomerManagedKeyMap and CustomerManagedKeyMapOutput values.
// You can construct a concrete instance of `CustomerManagedKeyMapInput` via:
//
//          CustomerManagedKeyMap{ "key": CustomerManagedKeyArgs{...} }
type CustomerManagedKeyMapInput interface {
	pulumi.Input

	ToCustomerManagedKeyMapOutput() CustomerManagedKeyMapOutput
	ToCustomerManagedKeyMapOutputWithContext(context.Context) CustomerManagedKeyMapOutput
}

type CustomerManagedKeyMap map[string]CustomerManagedKeyInput

func (CustomerManagedKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*CustomerManagedKey)(nil))
}

func (i CustomerManagedKeyMap) ToCustomerManagedKeyMapOutput() CustomerManagedKeyMapOutput {
	return i.ToCustomerManagedKeyMapOutputWithContext(context.Background())
}

func (i CustomerManagedKeyMap) ToCustomerManagedKeyMapOutputWithContext(ctx context.Context) CustomerManagedKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerManagedKeyMapOutput)
}

type CustomerManagedKeyOutput struct {
	*pulumi.OutputState
}

func (CustomerManagedKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomerManagedKey)(nil))
}

func (o CustomerManagedKeyOutput) ToCustomerManagedKeyOutput() CustomerManagedKeyOutput {
	return o
}

func (o CustomerManagedKeyOutput) ToCustomerManagedKeyOutputWithContext(ctx context.Context) CustomerManagedKeyOutput {
	return o
}

func (o CustomerManagedKeyOutput) ToCustomerManagedKeyPtrOutput() CustomerManagedKeyPtrOutput {
	return o.ToCustomerManagedKeyPtrOutputWithContext(context.Background())
}

func (o CustomerManagedKeyOutput) ToCustomerManagedKeyPtrOutputWithContext(ctx context.Context) CustomerManagedKeyPtrOutput {
	return o.ApplyT(func(v CustomerManagedKey) *CustomerManagedKey {
		return &v
	}).(CustomerManagedKeyPtrOutput)
}

type CustomerManagedKeyPtrOutput struct {
	*pulumi.OutputState
}

func (CustomerManagedKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomerManagedKey)(nil))
}

func (o CustomerManagedKeyPtrOutput) ToCustomerManagedKeyPtrOutput() CustomerManagedKeyPtrOutput {
	return o
}

func (o CustomerManagedKeyPtrOutput) ToCustomerManagedKeyPtrOutputWithContext(ctx context.Context) CustomerManagedKeyPtrOutput {
	return o
}

type CustomerManagedKeyArrayOutput struct{ *pulumi.OutputState }

func (CustomerManagedKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomerManagedKey)(nil))
}

func (o CustomerManagedKeyArrayOutput) ToCustomerManagedKeyArrayOutput() CustomerManagedKeyArrayOutput {
	return o
}

func (o CustomerManagedKeyArrayOutput) ToCustomerManagedKeyArrayOutputWithContext(ctx context.Context) CustomerManagedKeyArrayOutput {
	return o
}

func (o CustomerManagedKeyArrayOutput) Index(i pulumi.IntInput) CustomerManagedKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CustomerManagedKey {
		return vs[0].([]CustomerManagedKey)[vs[1].(int)]
	}).(CustomerManagedKeyOutput)
}

type CustomerManagedKeyMapOutput struct{ *pulumi.OutputState }

func (CustomerManagedKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CustomerManagedKey)(nil))
}

func (o CustomerManagedKeyMapOutput) ToCustomerManagedKeyMapOutput() CustomerManagedKeyMapOutput {
	return o
}

func (o CustomerManagedKeyMapOutput) ToCustomerManagedKeyMapOutputWithContext(ctx context.Context) CustomerManagedKeyMapOutput {
	return o
}

func (o CustomerManagedKeyMapOutput) MapIndex(k pulumi.StringInput) CustomerManagedKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CustomerManagedKey {
		return vs[0].(map[string]CustomerManagedKey)[vs[1].(string)]
	}).(CustomerManagedKeyOutput)
}

func init() {
	pulumi.RegisterOutputType(CustomerManagedKeyOutput{})
	pulumi.RegisterOutputType(CustomerManagedKeyPtrOutput{})
	pulumi.RegisterOutputType(CustomerManagedKeyArrayOutput{})
	pulumi.RegisterOutputType(CustomerManagedKeyMapOutput{})
}
