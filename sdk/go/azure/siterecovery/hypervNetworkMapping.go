// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package siterecovery

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a HyperV site recovery network mapping on Azure. A HyperV network mapping decides how to translate connected networks when a VM is migrated from HyperV VMM Center to Azure.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/recoveryservices"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/siterecovery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			targetResourceGroup, err := core.NewResourceGroup(ctx, "targetResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("East US"),
//			})
//			if err != nil {
//				return err
//			}
//			vault, err := recoveryservices.NewVault(ctx, "vault", &recoveryservices.VaultArgs{
//				Location:          targetResourceGroup.Location,
//				ResourceGroupName: targetResourceGroup.Name,
//				Sku:               pulumi.String("Standard"),
//			})
//			if err != nil {
//				return err
//			}
//			targetVirtualNetwork, err := network.NewVirtualNetwork(ctx, "targetVirtualNetwork", &network.VirtualNetworkArgs{
//				ResourceGroupName: targetResourceGroup.Name,
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("192.168.2.0/24"),
//				},
//				Location: targetResourceGroup.Location,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = siterecovery.NewHypervNetworkMapping(ctx, "recovery-mapping", &siterecovery.HypervNetworkMappingArgs{
//				RecoveryVaultId: vault.ID(),
//				SourceSystemCenterVirtualMachineManagerName: pulumi.String("my-vmm-server"),
//				SourceNetworkName: pulumi.String("my-vmm-network"),
//				TargetNetworkId:   targetVirtualNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Site Recovery Network Mapping can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:siterecovery/hypervNetworkMapping:HypervNetworkMapping azurerm_site_recovery_hyperv_network_mapping.mymapping /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resource-group-name/providers/Microsoft.RecoveryServices/vaults/recovery-vault-name/replicationFabrics/primary-fabric-name/replicationNetworks/azureNetwork/replicationNetworkMappings/mapping-name
//
// ```
type HypervNetworkMapping struct {
	pulumi.CustomResourceState

	// The name of the HyperV network mapping. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Recovery Services Vault where the HyperV network mapping should be created. Changing this forces a new resource to be created.
	RecoveryVaultId pulumi.StringOutput `pulumi:"recoveryVaultId"`
	// The Name of the primary network. Changing this forces a new resource to be created.
	SourceNetworkName pulumi.StringOutput `pulumi:"sourceNetworkName"`
	// Specifies the name of source System Center Virtual Machine Manager where the source network exists. Changing this forces a new resource to be created.
	SourceSystemCenterVirtualMachineManagerName pulumi.StringOutput `pulumi:"sourceSystemCenterVirtualMachineManagerName"`
	// The id of the recovery network. Changing this forces a new resource to be created.
	TargetNetworkId pulumi.StringOutput `pulumi:"targetNetworkId"`
}

// NewHypervNetworkMapping registers a new resource with the given unique name, arguments, and options.
func NewHypervNetworkMapping(ctx *pulumi.Context,
	name string, args *HypervNetworkMappingArgs, opts ...pulumi.ResourceOption) (*HypervNetworkMapping, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RecoveryVaultId == nil {
		return nil, errors.New("invalid value for required argument 'RecoveryVaultId'")
	}
	if args.SourceNetworkName == nil {
		return nil, errors.New("invalid value for required argument 'SourceNetworkName'")
	}
	if args.SourceSystemCenterVirtualMachineManagerName == nil {
		return nil, errors.New("invalid value for required argument 'SourceSystemCenterVirtualMachineManagerName'")
	}
	if args.TargetNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'TargetNetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HypervNetworkMapping
	err := ctx.RegisterResource("azure:siterecovery/hypervNetworkMapping:HypervNetworkMapping", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHypervNetworkMapping gets an existing HypervNetworkMapping resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHypervNetworkMapping(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HypervNetworkMappingState, opts ...pulumi.ResourceOption) (*HypervNetworkMapping, error) {
	var resource HypervNetworkMapping
	err := ctx.ReadResource("azure:siterecovery/hypervNetworkMapping:HypervNetworkMapping", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HypervNetworkMapping resources.
type hypervNetworkMappingState struct {
	// The name of the HyperV network mapping. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The ID of the Recovery Services Vault where the HyperV network mapping should be created. Changing this forces a new resource to be created.
	RecoveryVaultId *string `pulumi:"recoveryVaultId"`
	// The Name of the primary network. Changing this forces a new resource to be created.
	SourceNetworkName *string `pulumi:"sourceNetworkName"`
	// Specifies the name of source System Center Virtual Machine Manager where the source network exists. Changing this forces a new resource to be created.
	SourceSystemCenterVirtualMachineManagerName *string `pulumi:"sourceSystemCenterVirtualMachineManagerName"`
	// The id of the recovery network. Changing this forces a new resource to be created.
	TargetNetworkId *string `pulumi:"targetNetworkId"`
}

type HypervNetworkMappingState struct {
	// The name of the HyperV network mapping. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The ID of the Recovery Services Vault where the HyperV network mapping should be created. Changing this forces a new resource to be created.
	RecoveryVaultId pulumi.StringPtrInput
	// The Name of the primary network. Changing this forces a new resource to be created.
	SourceNetworkName pulumi.StringPtrInput
	// Specifies the name of source System Center Virtual Machine Manager where the source network exists. Changing this forces a new resource to be created.
	SourceSystemCenterVirtualMachineManagerName pulumi.StringPtrInput
	// The id of the recovery network. Changing this forces a new resource to be created.
	TargetNetworkId pulumi.StringPtrInput
}

func (HypervNetworkMappingState) ElementType() reflect.Type {
	return reflect.TypeOf((*hypervNetworkMappingState)(nil)).Elem()
}

type hypervNetworkMappingArgs struct {
	// The name of the HyperV network mapping. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The ID of the Recovery Services Vault where the HyperV network mapping should be created. Changing this forces a new resource to be created.
	RecoveryVaultId string `pulumi:"recoveryVaultId"`
	// The Name of the primary network. Changing this forces a new resource to be created.
	SourceNetworkName string `pulumi:"sourceNetworkName"`
	// Specifies the name of source System Center Virtual Machine Manager where the source network exists. Changing this forces a new resource to be created.
	SourceSystemCenterVirtualMachineManagerName string `pulumi:"sourceSystemCenterVirtualMachineManagerName"`
	// The id of the recovery network. Changing this forces a new resource to be created.
	TargetNetworkId string `pulumi:"targetNetworkId"`
}

// The set of arguments for constructing a HypervNetworkMapping resource.
type HypervNetworkMappingArgs struct {
	// The name of the HyperV network mapping. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The ID of the Recovery Services Vault where the HyperV network mapping should be created. Changing this forces a new resource to be created.
	RecoveryVaultId pulumi.StringInput
	// The Name of the primary network. Changing this forces a new resource to be created.
	SourceNetworkName pulumi.StringInput
	// Specifies the name of source System Center Virtual Machine Manager where the source network exists. Changing this forces a new resource to be created.
	SourceSystemCenterVirtualMachineManagerName pulumi.StringInput
	// The id of the recovery network. Changing this forces a new resource to be created.
	TargetNetworkId pulumi.StringInput
}

func (HypervNetworkMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hypervNetworkMappingArgs)(nil)).Elem()
}

type HypervNetworkMappingInput interface {
	pulumi.Input

	ToHypervNetworkMappingOutput() HypervNetworkMappingOutput
	ToHypervNetworkMappingOutputWithContext(ctx context.Context) HypervNetworkMappingOutput
}

func (*HypervNetworkMapping) ElementType() reflect.Type {
	return reflect.TypeOf((**HypervNetworkMapping)(nil)).Elem()
}

func (i *HypervNetworkMapping) ToHypervNetworkMappingOutput() HypervNetworkMappingOutput {
	return i.ToHypervNetworkMappingOutputWithContext(context.Background())
}

func (i *HypervNetworkMapping) ToHypervNetworkMappingOutputWithContext(ctx context.Context) HypervNetworkMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HypervNetworkMappingOutput)
}

// HypervNetworkMappingArrayInput is an input type that accepts HypervNetworkMappingArray and HypervNetworkMappingArrayOutput values.
// You can construct a concrete instance of `HypervNetworkMappingArrayInput` via:
//
//	HypervNetworkMappingArray{ HypervNetworkMappingArgs{...} }
type HypervNetworkMappingArrayInput interface {
	pulumi.Input

	ToHypervNetworkMappingArrayOutput() HypervNetworkMappingArrayOutput
	ToHypervNetworkMappingArrayOutputWithContext(context.Context) HypervNetworkMappingArrayOutput
}

type HypervNetworkMappingArray []HypervNetworkMappingInput

func (HypervNetworkMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HypervNetworkMapping)(nil)).Elem()
}

func (i HypervNetworkMappingArray) ToHypervNetworkMappingArrayOutput() HypervNetworkMappingArrayOutput {
	return i.ToHypervNetworkMappingArrayOutputWithContext(context.Background())
}

func (i HypervNetworkMappingArray) ToHypervNetworkMappingArrayOutputWithContext(ctx context.Context) HypervNetworkMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HypervNetworkMappingArrayOutput)
}

// HypervNetworkMappingMapInput is an input type that accepts HypervNetworkMappingMap and HypervNetworkMappingMapOutput values.
// You can construct a concrete instance of `HypervNetworkMappingMapInput` via:
//
//	HypervNetworkMappingMap{ "key": HypervNetworkMappingArgs{...} }
type HypervNetworkMappingMapInput interface {
	pulumi.Input

	ToHypervNetworkMappingMapOutput() HypervNetworkMappingMapOutput
	ToHypervNetworkMappingMapOutputWithContext(context.Context) HypervNetworkMappingMapOutput
}

type HypervNetworkMappingMap map[string]HypervNetworkMappingInput

func (HypervNetworkMappingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HypervNetworkMapping)(nil)).Elem()
}

func (i HypervNetworkMappingMap) ToHypervNetworkMappingMapOutput() HypervNetworkMappingMapOutput {
	return i.ToHypervNetworkMappingMapOutputWithContext(context.Background())
}

func (i HypervNetworkMappingMap) ToHypervNetworkMappingMapOutputWithContext(ctx context.Context) HypervNetworkMappingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HypervNetworkMappingMapOutput)
}

type HypervNetworkMappingOutput struct{ *pulumi.OutputState }

func (HypervNetworkMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HypervNetworkMapping)(nil)).Elem()
}

func (o HypervNetworkMappingOutput) ToHypervNetworkMappingOutput() HypervNetworkMappingOutput {
	return o
}

func (o HypervNetworkMappingOutput) ToHypervNetworkMappingOutputWithContext(ctx context.Context) HypervNetworkMappingOutput {
	return o
}

// The name of the HyperV network mapping. Changing this forces a new resource to be created.
func (o HypervNetworkMappingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HypervNetworkMapping) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Recovery Services Vault where the HyperV network mapping should be created. Changing this forces a new resource to be created.
func (o HypervNetworkMappingOutput) RecoveryVaultId() pulumi.StringOutput {
	return o.ApplyT(func(v *HypervNetworkMapping) pulumi.StringOutput { return v.RecoveryVaultId }).(pulumi.StringOutput)
}

// The Name of the primary network. Changing this forces a new resource to be created.
func (o HypervNetworkMappingOutput) SourceNetworkName() pulumi.StringOutput {
	return o.ApplyT(func(v *HypervNetworkMapping) pulumi.StringOutput { return v.SourceNetworkName }).(pulumi.StringOutput)
}

// Specifies the name of source System Center Virtual Machine Manager where the source network exists. Changing this forces a new resource to be created.
func (o HypervNetworkMappingOutput) SourceSystemCenterVirtualMachineManagerName() pulumi.StringOutput {
	return o.ApplyT(func(v *HypervNetworkMapping) pulumi.StringOutput {
		return v.SourceSystemCenterVirtualMachineManagerName
	}).(pulumi.StringOutput)
}

// The id of the recovery network. Changing this forces a new resource to be created.
func (o HypervNetworkMappingOutput) TargetNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *HypervNetworkMapping) pulumi.StringOutput { return v.TargetNetworkId }).(pulumi.StringOutput)
}

type HypervNetworkMappingArrayOutput struct{ *pulumi.OutputState }

func (HypervNetworkMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HypervNetworkMapping)(nil)).Elem()
}

func (o HypervNetworkMappingArrayOutput) ToHypervNetworkMappingArrayOutput() HypervNetworkMappingArrayOutput {
	return o
}

func (o HypervNetworkMappingArrayOutput) ToHypervNetworkMappingArrayOutputWithContext(ctx context.Context) HypervNetworkMappingArrayOutput {
	return o
}

func (o HypervNetworkMappingArrayOutput) Index(i pulumi.IntInput) HypervNetworkMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HypervNetworkMapping {
		return vs[0].([]*HypervNetworkMapping)[vs[1].(int)]
	}).(HypervNetworkMappingOutput)
}

type HypervNetworkMappingMapOutput struct{ *pulumi.OutputState }

func (HypervNetworkMappingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HypervNetworkMapping)(nil)).Elem()
}

func (o HypervNetworkMappingMapOutput) ToHypervNetworkMappingMapOutput() HypervNetworkMappingMapOutput {
	return o
}

func (o HypervNetworkMappingMapOutput) ToHypervNetworkMappingMapOutputWithContext(ctx context.Context) HypervNetworkMappingMapOutput {
	return o
}

func (o HypervNetworkMappingMapOutput) MapIndex(k pulumi.StringInput) HypervNetworkMappingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HypervNetworkMapping {
		return vs[0].(map[string]*HypervNetworkMapping)[vs[1].(string)]
	}).(HypervNetworkMappingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HypervNetworkMappingInput)(nil)).Elem(), &HypervNetworkMapping{})
	pulumi.RegisterInputType(reflect.TypeOf((*HypervNetworkMappingArrayInput)(nil)).Elem(), HypervNetworkMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HypervNetworkMappingMapInput)(nil)).Elem(), HypervNetworkMappingMap{})
	pulumi.RegisterOutputType(HypervNetworkMappingOutput{})
	pulumi.RegisterOutputType(HypervNetworkMappingArrayOutput{})
	pulumi.RegisterOutputType(HypervNetworkMappingMapOutput{})
}
